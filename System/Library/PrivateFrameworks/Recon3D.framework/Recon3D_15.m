void sub_2236E94A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,_QWORD *a53)
{
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;

  if (a53 == v53)
  {
    v56 = 4;
  }
  else
  {
    if (!a53)
      goto LABEL_6;
    v56 = 5;
    v53 = a53;
  }
  (*(void (**)(_QWORD *))(*v53 + 8 * v56))(v53);
LABEL_6:
  if ((_QWORD *)STACK[0x280] == v55)
  {
    v57 = 4;
  }
  else
  {
    if (!STACK[0x280])
      goto LABEL_11;
    v57 = 5;
    v55 = (_QWORD *)STACK[0x280];
  }
  (*(void (**)(_QWORD *))(*v55 + 8 * v57))(v55);
LABEL_11:
  if (STACK[0x2B0] != v54)
  {
    if (STACK[0x2B0])
      JUMPOUT(0x2236E98ECLL);
    JUMPOUT(0x2236E98FCLL);
  }
  JUMPOUT(0x2236E98E8);
}

void sub_2236E94AC()
{
  JUMPOUT(0x2236E97B0);
}

void sub_2236E94B4()
{
  JUMPOUT(0x2236E97E0);
}

void sub_2236E94BC()
{
  JUMPOUT(0x2236E97E0);
}

void sub_2236E94C4()
{
  JUMPOUT(0x2236E987CLL);
}

void sub_2236E94CC()
{
  JUMPOUT(0x2236E98ACLL);
}

void sub_2236E94D4()
{
  JUMPOUT(0x2236E98DCLL);
}

void sub_2236E94DC()
{
  JUMPOUT(0x2236E9938);
}

void sub_2236E94E4()
{
  JUMPOUT(0x2236E9974);
}

void sub_2236E94EC()
{
  JUMPOUT(0x2236E99CCLL);
}

void sub_2236E94F4()
{
  JUMPOUT(0x2236E9A08);
}

void sub_2236E9500()
{
  JUMPOUT(0x2236E9A1CLL);
}

void sub_2236E9508()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v1 - 144);
  if (v2 == v0)
  {
    v3 = 4;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
    v0 = *(_QWORD **)(v1 - 144);
  }
  (*(void (**)(_QWORD *))(*v0 + 8 * v3))(v0);
LABEL_6:
  JUMPOUT(0x2236E9A50);
}

void sub_2236E95D8(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  JUMPOUT(0x2236E9A68);
}

void sub_2236E95F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  uint64_t v53;

  __cxa_end_catch();
  if (a53 != v53 && !a53)
    JUMPOUT(0x2236E97E0);
  JUMPOUT(0x2236E97DCLL);
}

void sub_2236E967C()
{
  uint64_t v0;
  void **v1;
  void **v2;
  void *v3;
  void *v4;

  v3 = *v1;
  if (*v1)
  {
    *(_QWORD *)(v0 - 120) = v3;
    operator delete(v3);
  }
  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v0 - 152) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x2236E981CLL);
}

void sub_2236E972C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  JUMPOUT(0x2236E9A68);
}

void sub_2236E9748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,_QWORD *a53)
{
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  __cxa_end_catch();
  v58 = *(_QWORD **)(v57 - 144);
  if (v58 == v54)
  {
    v59 = 4;
  }
  else
  {
    if (!v58)
      goto LABEL_6;
    v59 = 5;
    v54 = *(_QWORD **)(v57 - 144);
  }
  (*(void (**)(_QWORD *))(*v54 + 8 * v59))(v54);
LABEL_6:
  if (a53 == v53)
  {
    v60 = 4;
  }
  else
  {
    if (!a53)
      goto LABEL_11;
    v60 = 5;
    v53 = a53;
  }
  (*(void (**)(_QWORD *))(*v53 + 8 * v60))(v53);
LABEL_11:
  if ((_QWORD *)STACK[0x280] == v56)
  {
    v61 = 4;
  }
  else
  {
    if (!STACK[0x280])
      goto LABEL_16;
    v61 = 5;
    v56 = (_QWORD *)STACK[0x280];
  }
  (*(void (**)(_QWORD *))(*v56 + 8 * v61))(v56);
LABEL_16:
  if (STACK[0x2B0] != v55)
  {
    if (STACK[0x2B0])
      JUMPOUT(0x2236E98ECLL);
    JUMPOUT(0x2236E98FCLL);
  }
  JUMPOUT(0x2236E98E8);
}

void sub_2236E97FC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void **sub_2236E9A70(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 424;
        sub_2236EA79C(v3);
      }
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_2236E9AD0@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t *v13;
  unsigned int v14;
  _BYTE *v15;
  uint64_t *v16;
  uint64_t *v17;

  v4 = result[26];
  v5 = result[27];
  a3[1] = 0;
  v6 = a3 + 1;
  a3[2] = 0;
  *a3 = (uint64_t *)(a3 + 1);
  if (v4 != v5)
  {
    v7 = *(uint64_t ***)(a2 + 16);
    if (v7)
    {
      v8 = result;
      do
      {
        v9 = *((unsigned __int8 *)v7 + 16);
        v10 = v8[26] + 424 * *((unsigned __int8 *)v7 + 16);
        if (!*(_BYTE *)(v10 + 416) || *(_QWORD *)(v10 + 392) == *(_QWORD *)(v10 + 400))
        {
          v11 = a3 + 1;
          v12 = a3 + 1;
          if (*v6)
          {
            v13 = *v6;
            while (1)
            {
              while (1)
              {
                v12 = (uint64_t **)v13;
                v14 = *((unsigned __int8 *)v13 + 28);
                if (v14 <= v9)
                  break;
                v13 = *v12;
                v11 = v12;
                if (!*v12)
                  goto LABEL_16;
              }
              if (v14 >= v9)
                break;
              v13 = v12[1];
              if (!v13)
              {
                v11 = v12 + 1;
                goto LABEL_16;
              }
            }
            v15 = v12;
          }
          else
          {
LABEL_16:
            v15 = operator new(0x30uLL);
            v15[28] = v9;
            *((_QWORD *)v15 + 4) = 0;
            *((_DWORD *)v15 + 10) = 0;
            *(_QWORD *)v15 = 0;
            *((_QWORD *)v15 + 1) = 0;
            *((_QWORD *)v15 + 2) = v12;
            *v11 = (uint64_t *)v15;
            v16 = (uint64_t *)**a3;
            v17 = (uint64_t *)v15;
            if (v16)
            {
              *a3 = v16;
              v17 = *v11;
            }
            result = sub_2231A9A8C(a3[1], v17);
            a3[2] = (uint64_t *)((char *)a3[2] + 1);
          }
          *((_QWORD *)v15 + 4) = 0;
          *((_DWORD *)v15 + 10) = 0;
        }
        v7 = (uint64_t **)*v7;
      }
      while (v7);
    }
  }
  return result;
}

void sub_2236E9C10(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  sub_223198030(v1, v2);
  _Unwind_Resume(a1);
}

void sub_2236E9C2C()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_2236E9C40(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24EC57A80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_2236E9C80(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC57A80;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_2236E9CA8(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  __int16 v18;
  int v19;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 208);
  if (0x21CFB2B78C13521DLL * ((*(_QWORD *)(v3 + 216) - v4) >> 3) <= v2)
    sub_2236C5448();
  v5 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(v5 + 8);
  v6 = v5 + 8;
  v7 = v8;
  if (!v8)
    return 0;
  v9 = v6;
  do
  {
    v10 = *(unsigned __int8 *)(v7 + 28);
    v11 = v10 >= v2;
    if (v10 >= v2)
      v12 = (uint64_t *)v7;
    else
      v12 = (uint64_t *)(v7 + 8);
    if (v11)
      v9 = v7;
    v7 = *v12;
  }
  while (*v12);
  if (v9 == v6 || *(unsigned __int8 *)(v9 + 28) > v2)
    return 0;
  v14 = *(unsigned int *)(v9 + 32);
  if (**(_QWORD **)(a1 + 24) >= v14)
    return 1;
  v15 = v4 + 424 * *a2 + 264;
  if (*(_QWORD *)(v4 + 424 * *a2 + 272) == *(_QWORD *)v15)
    goto LABEL_25;
  v16 = *(__int16 *)(v4 + 424 * *a2 + 328);
  if (v16 < 0 || (v17 = *(__int16 *)(v4 + 424 * *a2 + 330), v17 < 0))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/RLRegion.hpp", 180, (uint64_t)"(bounding_box_.min_corner.e() >= T{0}).all()", 44, (uint64_t)"Cannot create arr::IndexRange2 from region with negative row/column indices", 75, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_47;
    }
    LOWORD(v16) = *(_WORD *)(v15 + 64);
    LOWORD(v17) = *(_WORD *)(v15 + 66);
  }
  v18 = *(_WORD *)(v15 + 68) - v16;
  v19 = (unsigned __int16)~(*(_WORD *)(v15 + 70) - v17);
  if (v18 == -1 || v19 == 0)
  {
LABEL_25:
    v21 = 0;
    if (*(_QWORD *)(v15 + 8) == *(_QWORD *)v15)
    {
LABEL_41:
      v25 = 0;
      v23 = -1;
      goto LABEL_42;
    }
  }
  else
  {
    if ((__int16)v16 + v18 >= (__int16)v16)
      v21 = v18 + 1;
    else
      v21 = 0;
    if (*(_QWORD *)(v15 + 8) == *(_QWORD *)v15)
      goto LABEL_41;
  }
  v22 = *(__int16 *)(v15 + 64);
  if ((v22 & 0x80000000) == 0)
  {
    v23 = *(__int16 *)(v15 + 66);
    if ((v23 & 0x80000000) == 0)
      goto LABEL_36;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/RLRegion.hpp", 180, (uint64_t)"(bounding_box_.min_corner.e() >= T{0}).all()", 44, (uint64_t)"Cannot create arr::IndexRange2 from region with negative row/column indices", 75, (void (*)(void **))sub_22457406C))
  {
LABEL_47:
    abort();
  }
  LOWORD(v22) = *(_WORD *)(v15 + 64);
  LOWORD(v23) = *(_WORD *)(v15 + 66);
LABEL_36:
  if (*(_WORD *)(v15 + 68) - (_WORD)v22 == 0xFFFF || (unsigned __int16)~(*(_WORD *)(v15 + 70) - v23) == 0)
    goto LABEL_41;
  v23 = (__int16)v23;
  v25 = (__int16)v23 + (__int16)(*(_WORD *)(v15 + 70) - v23);
LABEL_42:
  v11 = v25 >= v23;
  v26 = v25 - v23;
  if (v11)
    v27 = v26 + 1;
  else
    v27 = 0;
  return (float)((float)v14 / (float)(v27 * v21)) < 0.2;
}

uint64_t sub_2236E9EFC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon8kfplanes17RemoveEmptyPlanesERNS1_25KeyframePlaneSegmentationERNSt3__113unordered_setI"
                     "hNS4_4hashIhEENS4_8equal_toIhEENS4_9allocatorIhEEEERNS1_29KeyframePlaneObservationGraphERKNS4_6vect"
                     "orINS_3esn6random4UUIDENSA_ISJ_EEEERKNS4_3mapIhNS1_17InconsistentPlaneENS4_4lessIhEENSA_INS4_4pairI"
                     "KhSP_EEEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon8kfplanes17RemoveEmptyPlanesERNS1_25KeyframePlaneSegmentationERNSt3__113uno"
                                "rdered_setIhNS4_4hashIhEENS4_8equal_toIhEENS4_9allocatorIhEEEERNS1_29KeyframePlaneObserv"
                                "ationGraphERKNS4_6vectorINS_3esn6random4UUIDENSA_ISJ_EEEERKNS4_3mapIhNS1_17InconsistentP"
                                "laneENS4_4lessIhEENSA_INS4_4pairIKhSP_EEEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon8kfplanes17RemoveEmptyPlanesERNS1_25KeyframePlaneSegmentationERNSt3__113unordered_setIhNS4_4hashIhEENS4_8equal_toIhEENS4_9allocatorIhEEEERNS1_29KeyframePlaneObservationGraphERKNS4_6vectorINS_3esn6random4UUIDENSA_ISJ_EEEERKNS4_3mapIhNS1_17InconsistentPlaneENS4_4lessIhEENSA_INS4_4pairIKhSP_EEEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon8kfplanes17RemoveEmptyPlanesERNS1_25KeyframePlaneSegmentationERNSt3__113unordered_setIhNS4_4hashIhEENS4_8equal_toIhEENS4_9allocatorIhEEEERNS1_29KeyframePlaneObservationGraphERKNS4_6vectorINS_3esn6random4UUIDENSA_ISJ_EEEERKNS4_3mapIhNS1_17InconsistentPlaneENS4_4lessIhEENSA_INS4_4pairIKhSP_EEEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2236E9F68()
{
  return &unk_24EC57AF0;
}

void sub_2236E9F74(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __int128 v12;

  v2 = *a1;
  if (0x21CFB2B78C13521DLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0x9A90E7D95BC60ALL)
      sub_2236EA0B4();
    v4 = a1[1];
    v5 = 424 * a2;
    v6 = (char *)operator new(424 * a2);
    v7 = 0;
    v8 = &v6[v4 - v2];
    *(_QWORD *)&v12 = v8;
    *((_QWORD *)&v12 + 1) = &v6[v5];
    while (&v4[v7] != v2)
    {
      v7 -= 424;
      sub_2236EA118((uint64_t)&v8[v7], (uint64_t)&v4[v7]);
    }
    v9 = &v8[v7];
    v10 = *a1;
    v11 = (uint64_t)a1[1];
    *a1 = v9;
    *(_OWORD *)(a1 + 1) = v12;
    while ((char *)v11 != v10)
    {
      v11 -= 424;
      sub_2236EA79C(v11);
    }
    if (v10)
      operator delete(v10);
  }
}

void sub_2236EA0B4()
{
  sub_22316DBD4("vector");
}

uint64_t sub_2236EA0C8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 424;
    sub_2236EA79C(i - 424);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_2236EA118(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = v5;
  v6 = *(_OWORD *)(a2 + 88);
  v7 = *(_OWORD *)(a2 + 104);
  v8 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v6;
  v9 = *(_OWORD *)(a2 + 152);
  v10 = *(_OWORD *)(a2 + 168);
  v11 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 184) = v11;
  *(_OWORD *)(a1 + 168) = v10;
  *(_OWORD *)(a1 + 152) = v9;
  v12 = *(_OWORD *)(a2 + 216);
  v13 = *(_OWORD *)(a2 + 232);
  v14 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 248) = v14;
  *(_OWORD *)(a1 + 232) = v13;
  *(_OWORD *)(a1 + 216) = v12;
  v15 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v15;
  sub_2236EA2D0(a1 + 264, a2 + 264);
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  sub_2236EA4B8(a1 + 360, a2 + 360);
  *(_BYTE *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  if (*(_BYTE *)(a2 + 416))
  {
    sub_2236EA584((_QWORD *)(a1 + 392), (uint64_t *)(a2 + 392));
    *(_BYTE *)(a1 + 416) = 1;
  }
  return a1;
}

void sub_2236EA23C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  char *v6;
  char *v7;
  void *v8;
  char *v9;
  void *v10;
  void *v11;
  void *v12;

  if (*(_BYTE *)(v1 + 416))
  {
    v6 = (char *)*v4;
    if (*v4)
    {
      v7 = *(char **)(v1 + 400);
      v8 = *v4;
      if (v7 != v6)
      {
        v9 = *(char **)(v1 + 400);
        do
        {
          v11 = (void *)*((_QWORD *)v9 - 3);
          v9 -= 24;
          v10 = v11;
          if (v11)
          {
            *((_QWORD *)v7 - 2) = v10;
            operator delete(v10);
          }
          v7 = v9;
        }
        while (v9 != v6);
        v8 = *v4;
      }
      *(_QWORD *)(v1 + 400) = v6;
      operator delete(v8);
    }
  }
  if (*(_BYTE *)(v1 + 384))
  {
    v12 = *v3;
    if (*v3)
    {
      *(_QWORD *)(v1 + 368) = v12;
      operator delete(v12);
      sub_2236B3F2C(v2);
      _Unwind_Resume(a1);
    }
  }
  sub_2236B3F2C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_2236EA2D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  BOOL v22;
  BOOL v23;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _OWORD *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_2236EA0B4();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v7, v5, v6 - 2);
    *(_QWORD *)(a1 + 8) = v8;
  }
  v9 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v11 = *(char **)(a2 + 32);
  v10 = *(char **)(a2 + 40);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_2236EA0B4();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = &v13[16 * (v12 >> 4)];
    v14 = v12 - 16;
    if ((unint64_t)(v12 - 16) < 0xF0)
      goto LABEL_7;
    v18 = v14 & 0xFFFFFFFFFFFFFFF0 | 8;
    v19 = &v13[v18];
    v20 = &v11[v18];
    v21 = (v14 & 0xFFFFFFFFFFFFFFF0) + 16;
    v22 = v13 + 8 >= &v11[v21] || v11 + 8 >= &v13[v21];
    v23 = !v22;
    if (v11 < v19 && v13 < v20)
      goto LABEL_7;
    if (v23)
      goto LABEL_7;
    v25 = (v14 >> 4) + 1;
    v26 = 16 * (v25 & 0x1FFFFFFFFFFFFFFCLL);
    v27 = &v11[v26];
    v15 = &v13[v26];
    v28 = v13 + 32;
    v29 = (__int128 *)(v11 + 32);
    v30 = v25 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      v32 = *(v29 - 2);
      v31 = *(v29 - 1);
      v34 = *v29;
      v33 = v29[1];
      v29 += 4;
      *(v28 - 2) = v32;
      *(v28 - 1) = v31;
      *v28 = v34;
      v28[1] = v33;
      v28 += 4;
      v30 -= 4;
    }
    while (v30);
    v11 = v27;
    v13 = v15;
    if (v25 != (v25 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_7:
      v15 = v13;
      do
      {
        v16 = *(_OWORD *)v11;
        v11 += 16;
        *(_OWORD *)v15 = v16;
        v15 += 16;
      }
      while (v11 != v10);
    }
    *(_QWORD *)(a1 + 40) = v15;
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 80) = 1;
  }
  return a1;
}

void sub_2236EA484(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2236EA4B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  char *v6;
  size_t v7;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(const void **)a2;
    v3 = *(_QWORD *)(a2 + 8);
    v5 = v3 - *(_QWORD *)a2;
    if (v3 != *(_QWORD *)a2)
    {
      if (v5 < 0)
        sub_2236EA0B4();
      v6 = (char *)operator new(v3 - *(_QWORD *)a2);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = &v6[4 * (v5 >> 2)];
      v7 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      memcpy(v6, v4, v7);
      *(_QWORD *)(a1 + 8) = &v6[v7];
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_2236EA550(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  if (*(_BYTE *)(v1 + 24))
  {
    v4 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2236EA584(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  _QWORD *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_2236EA690(v3, v4, v5, v8);
  }
  return a1;
}

void sub_2236EA62C(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  void *v8;
  void *v9;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      v7 = (char *)v1[1];
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 3);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *((_QWORD *)v5 - 2) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2236EA690(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v10 = *(const void **)v6;
      v9 = *(_QWORD *)(v6 + 8);
      v11 = v9 - *(_QWORD *)v6;
      if (v9 != *(_QWORD *)v6)
      {
        if (v11 < 0)
          sub_22316E078();
        v7 = (char *)operator new(v9 - *(_QWORD *)v6);
        *a4 = v7;
        a4[1] = v7;
        a4[2] = &v7[16 * (v11 >> 4)];
        v8 = v11 & 0xFFFFFFFFFFFFFFF0;
        memcpy(v7, v10, v8);
        a4[1] = &v7[v8];
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_2236EA764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22324A4B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2236EA778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_22324A4B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2236EA79C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  if (*(_BYTE *)(a1 + 416))
  {
    v2 = *(_QWORD *)(a1 + 392);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 400);
      v4 = *(void **)(a1 + 392);
      if (v3 != v2)
      {
        v5 = *(_QWORD *)(a1 + 400);
        do
        {
          v7 = *(void **)(v5 - 24);
          v5 -= 24;
          v6 = v7;
          if (v7)
          {
            *(_QWORD *)(v3 - 16) = v6;
            operator delete(v6);
          }
          v3 = v5;
        }
        while (v5 != v2);
        v4 = *(void **)(a1 + 392);
      }
      *(_QWORD *)(a1 + 400) = v2;
      operator delete(v4);
    }
  }
  if (*(_BYTE *)(a1 + 384))
  {
    v8 = *(void **)(a1 + 360);
    if (v8)
    {
      *(_QWORD *)(a1 + 368) = v8;
      operator delete(v8);
    }
  }
  v9 = *(void **)(a1 + 296);
  if (v9)
  {
    *(_QWORD *)(a1 + 304) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 264);
  if (v10)
  {
    *(_QWORD *)(a1 + 272) = v10;
    operator delete(v10);
  }
}

uint64_t **sub_2236EA858(uint64_t a1, unsigned __int8 *a2, _BYTE *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t ***v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == (uint64_t *)v6)
            {
              if (*((unsigned __int8 *)v10 + 16) == (_DWORD)v6)
                return v10;
            }
            else if (((unint64_t)v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t **)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = (unint64_t)v10[1];
          if (v11 == v6)
          {
            if (*((unsigned __int8 *)v10 + 16) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_BYTE *)v14 + 16) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v6 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_36;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_36:
        sub_2231B0668(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v25)
  {
    *v14 = *v25;
LABEL_59:
    *v25 = v14;
    goto LABEL_60;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    v26 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return (uint64_t **)v14;
}

void sub_2236EAB44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_2236EAB58(uint64_t a1, unsigned __int8 *a2, _BYTE *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t ***v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == (uint64_t *)v6)
            {
              if (*((unsigned __int8 *)v10 + 16) == (_DWORD)v6)
                return v10;
            }
            else if (((unint64_t)v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t **)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = (unint64_t)v10[1];
          if (v11 == v6)
          {
            if (*((unsigned __int8 *)v10 + 16) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_BYTE *)v14 + 16) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v6 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_36;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_36:
        sub_2231B0668(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v25)
  {
    *v14 = *v25;
LABEL_59:
    *v25 = v14;
    goto LABEL_60;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    v26 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return (uint64_t **)v14;
}

void sub_2236EAE44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2236EAE58(uint64_t a1, uint64_t a2, __int128 *a3, _QWORD **a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  std::string *v18;
  uint64_t v19;
  _QWORD *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string::size_type v23;
  std::string::size_type v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _OWORD *v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unsigned __int8 v52;
  uint64_t v53;
  _QWORD *v54;
  _OWORD *v55;
  uint64_t v56;
  std::string __p;
  std::string v59;
  std::__fs::filesystem::path __dst;

  *(_QWORD *)a1 = &off_24EC57B10;
  sub_2232D3688();
  *(_WORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 888);
  v8 = *(_OWORD *)(a2 + 904);
  v9 = *(_OWORD *)(a2 + 920);
  v10 = *(_OWORD *)(a2 + 936);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 952);
  *(_OWORD *)(a1 + 88) = v10;
  *(_OWORD *)(a1 + 72) = v9;
  *(_OWORD *)(a1 + 56) = v8;
  v11 = *a3;
  v12 = a3[1];
  *(_OWORD *)(a1 + 152) = a3[2];
  *(_OWORD *)(a1 + 136) = v12;
  *(_OWORD *)(a1 + 120) = v11;
  v13 = (std::string *)(a3 + 3);
  if (*((char *)a3 + 71) < 0)
  {
    sub_223197FA4((_BYTE *)(a1 + 168), *((void **)a3 + 6), *((_QWORD *)a3 + 7));
  }
  else
  {
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 184) = *((_QWORD *)a3 + 8);
    *(_OWORD *)(a1 + 168) = v14;
  }
  v15 = *a4;
  if (*a4)
  {
    *a4 = 0;
    goto LABEL_47;
  }
  if ((*((char *)a3 + 71) & 0x80000000) == 0)
  {
    v16 = *((unsigned __int8 *)a3 + 71);
    if (*(_BYTE *)(a2 + 72))
      goto LABEL_8;
LABEL_16:
    memset(&v59, 0, sizeof(v59));
    sub_2231816F0(&v59, (std::string *)"/memory-persistence", (std::string *)"");
    memset(&__p, 0, sizeof(__p));
    sub_2231816F0(&__p, v13, (std::string *)((char *)v13 + v16));
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      sub_223197FA4(&__dst, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
    else
      __dst.__pn_ = v59;
    sub_22319C30C((uint64_t)&__dst, (std::__fs::filesystem::path *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    sub_223701118((uint64_t *)&__p);
    sub_2242B6EF4(__p.__r_.__value_.__l.__data_, (uint64_t)&__dst);
    v15 = (_QWORD *)operator new();
    v22 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    v59.__r_.__value_.__r.__words[0] = v22;
    sub_2236E30B4((uint64_t)v15, &__dst, (uint64_t *)&v59);
    v23 = v59.__r_.__value_.__r.__words[0];
    v59.__r_.__value_.__r.__words[0] = 0;
    if (v23)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v23 + 8))(v23);
    *v15 = off_24EC58760;
    v24 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v24)
    {
      v25 = *(std::__shared_weak_count **)(v24 + 64);
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if (*(char *)(v24 + 55) < 0)
        operator delete(*(void **)(v24 + 32));
      sub_2242BAF30(v24 + 8, *(_QWORD *)(v24 + 16));
      MEMORY[0x227684CE8](v24, 0x10B3C4067016974);
    }
    goto LABEL_45;
  }
  v13 = (std::string *)*((_QWORD *)a3 + 6);
  v16 = *((_QWORD *)a3 + 7);
  if (!*(_BYTE *)(a2 + 72))
    goto LABEL_16;
LABEL_8:
  memset(&v59, 0, sizeof(v59));
  v17 = *(char *)(a2 + 71);
  if (v17 >= 0)
    v18 = (std::string *)(a2 + 48);
  else
    v18 = *(std::string **)(a2 + 48);
  v19 = *(_QWORD *)(a2 + 56);
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a2 + 71);
  sub_2231816F0(&v59, v18, (std::string *)((char *)v18 + v19));
  memset(&__p, 0, sizeof(__p));
  sub_2231816F0(&__p, v13, (std::string *)((char *)v13 + v16));
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&__dst, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  else
    __dst.__pn_ = v59;
  sub_22319C30C((uint64_t)&__dst, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_21;
  }
  else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(v59.__r_.__value_.__l.__data_);
LABEL_21:
  v20 = (_QWORD *)operator new();
  *v20 = &off_24EC71718;
  v20[1] = 0;
  sub_2242AEF94((int)v20, &__dst);
  if (*(_BYTE *)(a2 + 45))
  {
    v15 = (_QWORD *)operator new();
    v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
    sub_2236E30B4((uint64_t)v15, &__dst, (uint64_t *)&v59);
    v21 = v59.__r_.__value_.__r.__words[0];
    v59.__r_.__value_.__r.__words[0] = 0;
    if (v21)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v21 + 8))(v21);
    *v15 = off_24EC58760;
  }
  else
  {
    v15 = (_QWORD *)operator new();
    v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
    sub_22374DAB8((uint64_t)v15, &__dst, (uint64_t *)&v59, 256, 5000, 1);
    if (v59.__r_.__value_.__r.__words[0])
      (*(void (**)(std::string::size_type))(*(_QWORD *)v59.__r_.__value_.__l.__data_ + 8))(v59.__r_.__value_.__r.__words[0]);
  }
LABEL_45:
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
LABEL_47:
  *(_QWORD *)(a1 + 192) = v15;
  v28 = (_QWORD *)operator new();
  *v28 = &off_24EC57CB0;
  v28[1] = 0;
  v28[2] = 0;
  v28[3] = v15;
  *(_QWORD *)(a1 + 200) = v28;
  v29 = operator new();
  v30 = v29;
  v31 = *(std::__shared_weak_count **)(a1 + 200);
  __dst.__pn_.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 192);
  __dst.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v31;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  sub_2237264D0(v29, (uint64_t *)&__dst);
  *(_QWORD *)(a1 + 208) = v30;
  if (v31)
  {
    v34 = (unint64_t *)&v31->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v36 = operator new();
  *(_OWORD *)v36 = 0u;
  *(_OWORD *)(v36 + 16) = 0u;
  *(_QWORD *)v36 = v36 + 8;
  *(_QWORD *)(v36 + 40) = 0;
  *(_QWORD *)(v36 + 32) = 0;
  *(_QWORD *)(v36 + 24) = v36 + 32;
  *(_QWORD *)(a1 + 216) = v36;
  v37 = (_QWORD *)operator new();
  *v37 = 0;
  v37[1] = 0;
  v38 = (_OWORD *)operator new();
  v38[18] = 0u;
  v38[19] = 0u;
  v38[16] = 0u;
  v38[17] = 0u;
  v38[14] = 0u;
  v38[15] = 0u;
  v38[12] = 0u;
  v38[13] = 0u;
  v38[10] = 0u;
  v38[11] = 0u;
  v38[8] = 0u;
  v38[9] = 0u;
  v38[6] = 0u;
  v38[7] = 0u;
  v38[4] = 0u;
  v38[5] = 0u;
  v38[2] = 0u;
  v38[3] = 0u;
  *v38 = 0u;
  v38[1] = 0u;
  sub_223EF3378((uint64_t)v38);
  *v37 = v38;
  v37[1] = sub_223EF34C8;
  *(_QWORD *)(a1 + 224) = v37;
  v39 = *(float *)a3;
  v40 = *((float *)a3 + 1);
  v41 = operator new();
  sub_22374A328(v41, *(_BYTE *)(a1 + 56), *(_DWORD *)(a1 + 60), v39, v40);
  *(_QWORD *)(a1 + 232) = v41;
  v42 = *(_QWORD *)(a1 + 208);
  v43 = (_QWORD *)operator new();
  *v43 = v42;
  *(_QWORD *)(a1 + 240) = v43;
  v44 = (_QWORD *)operator new();
  *v44 = 0;
  v44[1] = 0;
  v44[2] = 0;
  v44[3] = 20;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 248) = v44;
  v45 = *(_OWORD *)(a2 + 144);
  v46 = *(_OWORD *)(a2 + 160);
  v47 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 320) = v47;
  *(_OWORD *)(a1 + 272) = v45;
  *(_OWORD *)(a1 + 288) = v46;
  v49 = *(_OWORD *)(a2 + 240);
  v48 = *(_OWORD *)(a2 + 256);
  v50 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 352) = v50;
  *(_OWORD *)(a1 + 368) = v49;
  *(_OWORD *)(a1 + 384) = v48;
  if (!*(_BYTE *)(a2 + 968)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/KeyframePlaneDetector.cpp", 158, (uint64_t)"config.plane_detection", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (*(_BYTE *)(a2 + 880))
  {
    v51 = *(_OWORD *)(a2 + 720);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 736);
    *(_OWORD *)(a1 + 64) = v51;
  }
  v52 = atomic_load((unsigned __int8 *)&qword_255795030);
  if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_255795030))
  {
    sub_22379785C(&qword_255795020);
    __cxa_atexit((void (*)(void *))sub_2232D88EC, &qword_255795020, &dword_22314D000);
    __cxa_guard_release(&qword_255795030);
  }
  v53 = qword_255795020;
  v54 = (_QWORD *)(qword_255795020 + 80);
  sub_223198030(qword_255795020 + 72, *(_QWORD **)(qword_255795020 + 80));
  *(_QWORD *)(v53 + 72) = v54;
  *(_QWORD *)(v53 + 88) = 0;
  *v54 = 0;
  if (*(_BYTE *)(v53 + 160))
    *(_BYTE *)(v53 + 160) = 0;
  v55 = (_OWORD *)operator new();
  v55[1] = 0u;
  v55[2] = 0u;
  *v55 = 0u;
  v56 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v55;
  if (v56)
    MEMORY[0x227684CE8](v56, 0x1000C40E28D2BCALL);
  return a1;
}

void sub_2236EB5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v32;
  uint64_t v33;

  __cxa_guard_abort(&qword_255795030);
  v32 = *(_QWORD *)(v26 + 264);
  *(_QWORD *)(v26 + 264) = 0;
  if (v32)
    MEMORY[0x227684CE8](v32, 0x1000C40E28D2BCALL);
  sub_2236EB9CC((uint64_t *)(v26 + 248));
  v33 = *(_QWORD *)(v26 + 240);
  *(_QWORD *)(v26 + 240) = 0;
  if (v33)
    MEMORY[0x227684CE8](v33, 0x20C4093837F09);
  sub_2236EBA20((uint64_t **)(v26 + 232));
  sub_2236EBA94((uint64_t **)(v26 + 224));
  sub_2236EBAF0((uint64_t *)(v26 + 216));
  sub_2236EBB4C(v30);
  sub_223167354(v29);
  if (*(char *)(v26 + 191) < 0)
    operator delete(*v28);
  sub_2232D3808(v27);
  _Unwind_Resume(a1);
}

void sub_2236EB878()
{
  JUMPOUT(0x2236EB848);
}

void sub_2236EB880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_223167354((uint64_t)va);
  MEMORY[0x227684CE8](v6, 0x10A0C4021400B94);
  JUMPOUT(0x2236EB850);
}

void sub_2236EB8A8()
{
  JUMPOUT(0x2236EB850);
}

void sub_2236EB8B0()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if ((*(char *)(v0 + 191) & 0x80000000) == 0)
    JUMPOUT(0x2236EB868);
  JUMPOUT(0x2236EB860);
}

uint64_t sub_2236EB8D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  _QWORD *v7;
  __int128 v8[3];
  __int128 __p;
  uint64_t v10;

  v5 = *(_OWORD *)(a3 + 16);
  v8[0] = *(_OWORD *)a3;
  v8[1] = v5;
  v8[2] = *(_OWORD *)(a3 + 32);
  if (*(char *)(a3 + 71) < 0)
  {
    sub_223197FA4(&__p, *(void **)(a3 + 48), *(_QWORD *)(a3 + 56));
  }
  else
  {
    __p = *(_OWORD *)(a3 + 48);
    v10 = *(_QWORD *)(a3 + 64);
  }
  v7 = 0;
  sub_2236EAE58(a1, a2, v8, &v7);
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__p);
  return a1;
}

void sub_2236EB98C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    if ((a22 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2236EB9CC(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x227684CE8](v2, 0x1020C4016EE4530);
  }
  return a1;
}

uint64_t **sub_2236EBA20(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = v2[2];
    v2[2] = 0;
    if (v3)
      ((void (*)(void))v2[3])();
    v4 = *v2;
    *v2 = 0;
    if (v4)
      ((void (*)(void))v2[1])();
    MEMORY[0x227684CE8](v2, 0x10A0C409499B5C4);
  }
  return a1;
}

uint64_t **sub_2236EBA94(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      ((void (*)(void))v2[1])();
    MEMORY[0x227684CE8](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

uint64_t *sub_2236EBAF0(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_223198030(v2 + 24, *(_QWORD **)(v2 + 32));
    sub_223198030(v2, *(_QWORD **)(v2 + 8));
    MEMORY[0x227684CE8](v2, 0x1020C404C310C12);
  }
  return a1;
}

uint64_t *sub_2236EBB4C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_223726628(v2);
    MEMORY[0x227684CE8](v3, 0x10A0C4021400B94);
  }
  return a1;
}

uint64_t sub_2236EBB90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24EC57B10;
  v2 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (v2)
    MEMORY[0x227684CE8](v2, 0x1000C40E28D2BCALL);
  v3 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;
  if (v3)
  {
    v4 = *(void **)v3;
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(v3 + 8) = v4;
      operator delete(v4);
    }
    MEMORY[0x227684CE8](v3, 0x1020C4016EE4530);
  }
  v5 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v5)
    MEMORY[0x227684CE8](v5, 0x20C4093837F09);
  v6 = *(uint64_t **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v6)
  {
    v7 = v6[2];
    v6[2] = 0;
    if (v7)
      ((void (*)(void))v6[3])();
    v8 = *v6;
    *v6 = 0;
    if (v8)
      ((void (*)(void))v6[1])();
    MEMORY[0x227684CE8](v6, 0x10A0C409499B5C4);
  }
  v9 = *(uint64_t **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v9)
  {
    v10 = *v9;
    *v9 = 0;
    if (v10)
      ((void (*)(void))v9[1])();
    MEMORY[0x227684CE8](v9, 0xA0C40AFF93C70);
  }
  v11 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v11)
  {
    sub_223198030(v11 + 24, *(_QWORD **)(v11 + 32));
    sub_223198030(v11, *(_QWORD **)(v11 + 8));
    MEMORY[0x227684CE8](v11, 0x1020C404C310C12);
  }
  v12 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v12)
  {
    v13 = sub_223726628(v12);
    MEMORY[0x227684CE8](v13, 0x10A0C4021400B94);
  }
  v14 = *(std::__shared_weak_count **)(a1 + 200);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if ((*(char *)(a1 + 191) & 0x80000000) == 0)
        goto LABEL_29;
      goto LABEL_28;
    }
  }
  if (*(char *)(a1 + 191) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 168));
LABEL_29:
  v17 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v17)
    return a1;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_2236EBDC0(uint64_t a1)
{
  sub_2236EBB90(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2236EBDE4()
{
  return 1;
}

uint64_t sub_2236EBDEC(uint64_t result)
{
  *(_BYTE *)(result + 32) = 1;
  return result;
}

uint64_t sub_2236EBDF8(uint64_t a1)
{
  int v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  const char *v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  const char *v11;
  size_t v12;
  void *v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v61;
  _QWORD v62[3];
  int v63;
  const char *v64;
  int v65;
  const char *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  void *object;
  void *v71[2];
  __int128 v72;
  void *__p[2];
  unint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;

  sub_2236EC60C(&v69);
  if (**(int **)(v69 + 56) > 3)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 88))(*(_QWORD *)(a1 + 192));
  v2 = *(unsigned __int8 *)(v69 + 72);
  v3 = sub_22322F254(v69, "OSLogSurrogateAppender", 1, 0);
  if (!v2 && v3 == 0)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 88))(*(_QWORD *)(a1 + 192));
  v5 = v3;
  v62[0] = &v69;
  v62[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v62[2] = std::chrono::system_clock::now().__d_.__rep_;
  v63 = 3;
  v64 = "unknown file";
  v65 = 181;
  v67 = 0;
  v68 = 0;
  v66 = "unknown function";
  v6 = v69;
  if (*(char *)(v69 + 39) < 0)
  {
    v8 = *(const char **)(v69 + 16);
    v7 = *(_QWORD *)(v69 + 24);
    v61 = *(_QWORD *)v62[0] + 16;
    v10 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v10 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v7 = *(unsigned __int8 *)(v69 + 39);
    v8 = (const char *)(*(_QWORD *)v62[0] + 16);
    v61 = (uint64_t)v8;
    v9 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v9 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&object);
    sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
    if ((_BYTE)v72 && SHIBYTE(v71[1]) < 0)
      operator delete(object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F57 >= 0)
    v11 = (const char *)&xmmword_255788F40;
  else
    v11 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v12 = byte_255788F57;
  else
    v12 = *((_QWORD *)&xmmword_255788F40 + 1);
  object = os_log_create(v11, v8);
  v13 = v71;
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v12 >= 0x17)
  {
    v14 = v5;
    v15 = v8;
    v16 = v6;
    v17 = a1;
    v18 = v2;
    v19 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v19 = v12 | 7;
    v20 = v19 + 1;
    v13 = operator new(v19 + 1);
    v71[1] = (void *)v12;
    *(_QWORD *)&v72 = v20 | 0x8000000000000000;
    v71[0] = v13;
    v2 = v18;
    a1 = v17;
    v6 = v16;
    v8 = v15;
    v5 = v14;
    goto LABEL_23;
  }
  BYTE7(v72) = v12;
  if (v12)
LABEL_23:
    memmove(v13, v11, v12);
  *((_BYTE *)v13 + v12) = 0;
  BYTE8(v72) = 1;
  v21 = __p;
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v7 >= 0x17)
  {
    v23 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v23 = v7 | 7;
    v24 = v23 + 1;
    v21 = operator new(v23 + 1);
    __p[1] = (void *)v7;
    v74 = v24 | 0x8000000000000000;
    __p[0] = v21;
  }
  else
  {
    HIBYTE(v74) = v7;
    if (!v7)
    {
      LOBYTE(__p[0]) = 0;
      v75 = 1;
      v22 = object;
      if ((SHIBYTE(v74) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v21, v8, v7);
  *((_BYTE *)v21 + v7) = 0;
  v75 = 1;
  v22 = object;
  if ((SHIBYTE(v74) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v72))
      goto LABEL_37;
LABEL_35:
    if (SBYTE7(v72) < 0)
      operator delete(v71[0]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(__p[0]);
  if (BYTE8(v72))
    goto LABEL_35;
LABEL_37:
  if (object)
    os_release(object);
  if (v5 && *(_QWORD *)(v5 + 24))
  {
    v25 = _os_log_pack_size();
    v26 = (std::__shared_weak_count_vtbl *)operator new(v25, (std::align_val_t)8uLL);
    v27 = (std::__shared_weak_count *)operator new();
    v28 = v27;
    v27->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    v27->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v27->__shared_weak_owners_ = 0;
    v27[1].__vftable = v26;
    object = v26;
    v71[0] = v26;
    v71[1] = v27;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
    v72 = 0uLL;
    __p[0] = 0;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v28);
    }
    v32 = object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v33 = operator new();
    v34 = *(unsigned __int8 *)(v6 + 39);
    v35 = v61;
    if ((v34 & 0x80u) != 0)
    {
      v35 = *(_QWORD *)(v6 + 16);
      v34 = *(_QWORD *)(v6 + 24);
    }
    *(_QWORD *)v33 = v32;
    *(_OWORD *)(v33 + 8) = *(_OWORD *)v71;
    v71[0] = 0;
    v71[1] = 0;
    *(_OWORD *)(v33 + 24) = v72;
    v72 = 0uLL;
    *(_QWORD *)(v33 + 40) = v35;
    *(_QWORD *)(v33 + 48) = v34;
    *(_BYTE *)(v33 + 56) = 1;
    v76 = 0;
    v77 = v33;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24), &v77);
    v36 = v77;
    v77 = 0;
    if (v36)
    {
      v37 = *(std::__shared_weak_count **)(v36 + 32);
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = *(std::__shared_weak_count **)(v36 + 16);
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      MEMORY[0x227684CE8](v36, 0x10F0C40B62ED6C6);
      v43 = v76;
      v76 = 0;
      if (v43)
      {
        v44 = *(std::__shared_weak_count **)(v43 + 32);
        if (v44)
        {
          v45 = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v47 = *(std::__shared_weak_count **)(v43 + 16);
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        MEMORY[0x227684CE8](v43, 0x10F0C40B62ED6C6);
      }
    }
    v50 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
    if (*((_QWORD *)&v72 + 1))
    {
      v51 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = (std::__shared_weak_count *)v71[1];
    if (v71[1])
    {
      v54 = (unint64_t *)((char *)v71[1] + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
  }
  else
  {
    os_log_type_enabled(v22, OS_LOG_TYPE_INFO);
    LOWORD(object) = 0;
    v56 = (void *)_os_log_send_and_compose_impl();
    if (v56)
      free(v56);
  }
  if (v2)
  {
    sub_22322C138((uint64_t)v62, "Filesystem access granted");
    sub_223182C08((uint64_t)v62);
  }
  sub_223182C08((uint64_t)v62);
  v57 = v68;
  if (v68)
  {
    v58 = (unint64_t *)&v68->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 88))(*(_QWORD *)(a1 + 192));
}

void sub_2236EC4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2236EC538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_22319A054((uint64_t *)(v5 - 96));
  sub_22319A054((uint64_t *)(v5 - 104));
  sub_223199DE8((uint64_t)va1);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2236EC56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x227684CE8](v5, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2236EC598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2236EC5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2236EC5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a30 && a29 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2236EC60C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC0B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC0B8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC0B0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC0B8);
  }
  *a1 = qword_2540CC0B0;
}

void sub_2236EC6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC0B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC0B8);
  _Unwind_Resume(a1);
}

uint64_t sub_2236EC700(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

_QWORD *sub_2236EC708@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  int64x2_t v17;
  uint64_t v18;

  *(_QWORD *)(a3 + 104) = 0;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_DWORD *)(a3 + 112) = 1065353216;
  *(_BYTE *)(a3 + 368) = 0;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 209) = 0u;
  *(_QWORD *)a3 = *a2;
  sub_2236DEE90(&v17, **(_QWORD ***)(a1 + 216), (_QWORD *)(*(_QWORD *)(a1 + 216) + 8));
  v5 = *(_QWORD *)(a1 + 208);
  v6 = v18;
  *(int64x2_t *)(a3 + 32) = v17;
  *(_QWORD *)(a3 + 48) = v6;
  sub_223737F28(v5, &v17);
  v7 = *(_QWORD *)(a1 + 240);
  v8 = v18;
  *(int64x2_t *)(a3 + 136) = v17;
  *(_QWORD *)(a3 + 152) = v8;
  *(_QWORD *)(a1 + 240) = 0;
  if (v7)
    MEMORY[0x227684CE8](v7, 0x20C4093837F09);
  v9 = atomic_load((unsigned __int8 *)&qword_255795030);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795030))
  {
    sub_22379785C(&qword_255795020);
    __cxa_atexit((void (*)(void *))sub_2232D88EC, &qword_255795020, &dword_22314D000);
    __cxa_guard_release(&qword_255795030);
  }
  v10 = qword_255795020;
  v11 = (_QWORD *)(qword_255795020 + 80);
  sub_223198030(qword_255795020 + 72, *(_QWORD **)(qword_255795020 + 80));
  *(_QWORD *)(v10 + 72) = v11;
  *(_QWORD *)(v10 + 88) = 0;
  *v11 = 0;
  if (*(_BYTE *)(v10 + 160))
    *(_BYTE *)(v10 + 160) = 0;
  sub_223734C20(*(_QWORD *)(a1 + 208));
  v12 = operator new();
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_QWORD *)v12 = v12 + 8;
  *(_QWORD *)(v12 + 40) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 24) = v12 + 32;
  v13 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v12;
  if (v13)
  {
    sub_223198030(v13 + 24, *(_QWORD **)(v13 + 32));
    sub_223198030(v13, *(_QWORD **)(v13 + 8));
    MEMORY[0x227684CE8](v13, 0x1020C404C310C12);
  }
  v14 = *(_QWORD *)(a1 + 208);
  result = (_QWORD *)operator new();
  *result = v14;
  v16 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = result;
  if (v16)
    result = (_QWORD *)MEMORY[0x227684CE8](v16, 0x20C4093837F09);
  *(_QWORD *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

void sub_2236EC934(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_255795030);
  sub_22327F500(v1);
  _Unwind_Resume(a1);
}

void sub_2236EC954(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22327F500(v1);
  _Unwind_Resume(a1);
}

void sub_2236EC968(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22327F500(v1);
  _Unwind_Resume(a1);
}

void sub_2236EC97C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22327F500(v1);
  _Unwind_Resume(a1);
}

void sub_2236EC990(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22327F500(v1);
  _Unwind_Resume(a1);
}

void sub_2236EC9A4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6;
  float v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  const char *v19;
  uint64_t v20;
  unsigned __int8 v21;
  const char *v22;
  size_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  double v31;
  size_t v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  const char *v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  int v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  unint64_t v72;
  unint64_t v73;
  __int128 v74;
  uint64_t *v75;
  uint64_t *v76;
  char *v77;
  char *v78;
  void *v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  uint64_t v83;
  unsigned __int8 v84;
  const char *v85;
  size_t v86;
  _BYTE *v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  double v96;
  size_t v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  void *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  void *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  void *v135;
  unint64_t v136;
  unint64_t v137;
  __int128 v138;
  uint64_t *v139;
  uint64_t *v140;
  _QWORD *v141;
  _QWORD *v142;
  void *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  char *v147;
  char *v148;
  void *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  const char *v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  void *v160[2];
  uint64_t v161;
  __int128 v162;
  void *v163;
  __int128 v164;
  uint64_t v165;
  void *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  char v176;
  __int128 v177;
  uint64_t v178;
  char v179;
  __int128 v180;
  uint64_t v181;
  __int128 v182;
  uint64_t v183;
  char v184;
  uint64_t (**v185)();
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  __int16 v191;
  char v192;
  char v193;
  void *v194[3];
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  char *v200;
  void *v201;
  char *v202;
  uint64_t v203;
  void *v204;
  _QWORD *rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v206;
  char **v207;
  char *v208;
  uint64_t v209;
  void *v210;
  void *v211;
  std::__shared_weak_count *v212;
  uint64_t v213;
  uint64_t *v214;
  _BYTE oslog[24];
  _BYTE v216[24];
  void *v217;
  __int128 v218;
  uint64_t v219;
  void *v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  __int128 v228;
  uint64_t v229;
  char v230;
  __int128 v231;
  uint64_t v232;
  char v233;
  __int128 v234;
  uint64_t v235;
  __int128 v236;
  uint64_t v237;
  char v238;
  uint64_t (**v239)();
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  uint64_t v244;
  __int16 v245;
  char v246;
  char v247;
  _BYTE object[24];
  _BYTE v249[24];
  void *v250;
  __int128 v251;
  uint64_t v252;
  void *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  __int128 v258;
  __int128 v259;
  uint64_t v260;
  __int128 v261;
  uint64_t v262;
  char v263;
  __int128 v264;
  uint64_t v265;
  char v266;
  __int128 v267;
  uint64_t v268;
  __int128 v269;
  uint64_t v270;
  char v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  uint64_t v276;
  __int16 v277;
  char v278;
  uint64_t v279;

  v279 = *MEMORY[0x24BDAC8D0];
  sub_223705CA8((_QWORD *)(a2 + 1872), &v199);
  sub_223705990((_QWORD *)a2, v194);
  *(_QWORD *)(a3 + 368) = 0;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_DWORD *)(a3 + 112) = 1065353216;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 209) = 0u;
  *(_BYTE *)(a3 + 376) = 1;
  if (*(_BYTE *)(a2 + 1832))
  {
    v6 = *(_BYTE *)(a2 + 1616);
    if (v6)
    {
      v6 = *(_BYTE *)(a2 + 1608) == 1;
      v7 = 3.0;
      if (*(_BYTE *)(a2 + 1608) == 1)
        v7 = 10.0;
    }
    else
    {
      v7 = 3.0;
    }
    *(_BYTE *)(a1 + 33) = v6;
    sub_223795590(*(uint64_t **)(a1 + 224), a2 + 8, a1 + 40, (int32x2_t *)(a1 + 272), (uint64_t)&v159, v7);
    if (v199 != v200)
    {
      sub_2236EEEC8((uint64_t)oslog, a1, (uint64_t (****)())&v199, (float32x4_t *)&v159, 1, (uint64_t *)v194, &v159);
LABEL_128:
      sub_2236EE408(a3, (uint64_t)oslog);
      if (v247)
      {
        sub_22327F500((uint64_t)oslog);
      }
      else if ((_BYTE)v224)
      {
        if ((_BYTE)v223)
        {
          if (SHIBYTE(v222) < 0)
            operator delete(v220);
          if (SHIBYTE(v218) < 0)
            operator delete(v217);
        }
        if (v216[16] && (v216[15] & 0x80000000) != 0)
          operator delete(*(void **)&oslog[16]);
      }
      sub_223701370(&v159);
      goto LABEL_249;
    }
    sub_2236EC60C(&v213);
    if (**(int **)(v213 + 56) > 3
      || (v8 = *(unsigned __int8 *)(v213 + 72), v9 = sub_22322F254(v213, "OSLogSurrogateAppender", 1, 0),
                                                v10 = v9,
                                                !v8)
      && !v9)
    {
LABEL_104:
      rep = 0;
      v204 = &rep;
      v208 = 0;
      v209 = 0;
      v206 = 0;
      v207 = &v208;
      v212 = 0;
      v210 = 0;
      v211 = 0;
      v202 = 0;
      v201 = 0;
      v203 = 0;
      v69 = operator new();
      *(_QWORD *)(v69 + 128) = 0;
      *(_OWORD *)(v69 + 96) = 0u;
      *(_OWORD *)(v69 + 112) = 0u;
      *(_OWORD *)(v69 + 64) = 0u;
      *(_OWORD *)(v69 + 80) = 0u;
      *(_OWORD *)(v69 + 32) = 0u;
      *(_OWORD *)(v69 + 48) = 0u;
      *(_OWORD *)v69 = 0u;
      *(_OWORD *)(v69 + 16) = 0u;
      sub_22370F510(v69);
      *(_OWORD *)(v69 + 72) = 0u;
      *(_OWORD *)(v69 + 56) = 0u;
      *(_DWORD *)(v69 + 88) = 1065353216;
      *(_OWORD *)(v69 + 96) = 0u;
      *(_OWORD *)(v69 + 112) = 0u;
      *(_DWORD *)(v69 + 128) = 1065353216;
      v214 = (uint64_t *)v69;
      sub_2236EEBF4((uint64_t)object, a1, &v159, (uint64_t)&v204, (unsigned __int8 **)&v201, &v214, 0, 0);
      *(_OWORD *)&oslog[8] = *(_OWORD *)&object[8];
      *(_QWORD *)oslog = *(_QWORD *)object;
      *(_QWORD *)v216 = *(_QWORD *)v249;
      *(_QWORD *)&object[8] = 0;
      *(_QWORD *)&object[16] = 0;
      *(_OWORD *)&v216[8] = *(_OWORD *)&v249[8];
      memset(v249, 0, sizeof(v249));
      v70 = v250;
      v250 = 0;
      v218 = v251;
      v217 = v70;
      v219 = v252;
      v251 = 0uLL;
      v71 = v253;
      v72 = v254;
      v252 = 0;
      v253 = 0;
      v220 = v71;
      v221 = v254;
      v254 = 0;
      v222 = v255;
      v223 = v256;
      v224 = v257;
      if (v256)
      {
        v73 = *(_QWORD *)(v255 + 8);
        if ((v72 & (v72 - 1)) != 0)
        {
          if (v73 >= v72)
            v73 %= v72;
        }
        else
        {
          v73 &= v72 - 1;
        }
        *((_QWORD *)v71 + v73) = &v222;
        v255 = 0;
        v256 = 0;
      }
      v225 = v258;
      v258 = 0uLL;
      v226 = v259;
      v227 = v260;
      v259 = 0uLL;
      v228 = v261;
      v229 = v262;
      v260 = 0;
      v261 = 0uLL;
      v262 = 0;
      v230 = v263;
      v231 = v264;
      v232 = v265;
      v264 = 0uLL;
      v265 = 0;
      v233 = v266;
      LOBYTE(v234) = 0;
      v246 = 0;
      if (v278)
      {
        v234 = v267;
        v267 = 0uLL;
        v236 = v269;
        v235 = v268;
        v237 = v270;
        v268 = 0;
        v269 = 0uLL;
        v270 = 0;
        v238 = v271;
        v239 = &off_24EC24788;
        v74 = v272;
        v272 = 0uLL;
        v244 = v276;
        v243 = v275;
        v242 = v274;
        v240 = v74;
        v241 = v273;
        v245 = v277;
        v246 = 1;
      }
      v247 = 1;
      sub_22327F500((uint64_t)object);
      v75 = v214;
      v214 = 0;
      if (v75)
      {
        v76 = sub_22370F604(v75);
        MEMORY[0x227684CE8](v76, 0x10A0C402FF47DCALL);
      }
      v77 = (char *)v201;
      if (v201)
      {
        v78 = v202;
        v79 = v201;
        if (v202 != v201)
        {
          do
          {
            v80 = (std::__shared_weak_count *)*((_QWORD *)v78 - 28);
            if (v80)
            {
              p_shared_owners = (unint64_t *)&v80->__shared_owners_;
              do
                v82 = __ldaxr(p_shared_owners);
              while (__stlxr(v82 - 1, p_shared_owners));
              if (!v82)
              {
                ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                std::__shared_weak_count::__release_weak(v80);
              }
            }
            v78 -= 248;
          }
          while (v78 != v77);
          v79 = v201;
        }
        v202 = v77;
        operator delete(v79);
      }
      if (v210)
      {
        v211 = v210;
        operator delete(v210);
      }
      sub_223198030((uint64_t)&v207, v208);
      sub_223198030((uint64_t)&v204, rep);
      goto LABEL_128;
    }
    v157 = v8;
    v204 = &v213;
    rep = (_QWORD *)std::chrono::steady_clock::now().__d_.__rep_;
    v206 = std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v207) = 3;
    v208 = "unknown file";
    LODWORD(v209) = 247;
    v212 = 0;
    v210 = "unknown function";
    v211 = 0;
    v11 = *(_QWORD *)v204;
    v12 = (const char *)(*(_QWORD *)v204 + 16);
    v153 = v12;
    v155 = *(_QWORD *)v204;
    if (*(char *)(*(_QWORD *)v204 + 39) < 0)
    {
      v12 = *(const char **)(v11 + 16);
      v13 = *(_QWORD *)(v11 + 24);
    }
    else
    {
      v13 = *(unsigned __int8 *)(*(_QWORD *)v204 + 39);
    }
    v20 = v159;
    v21 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
      if (v249[0] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v22 = (const char *)&xmmword_255788F40;
    else
      v22 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v23 = byte_255788F57;
    else
      v23 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)object = os_log_create(v22, v12);
    v24 = &object[8];
    if (v23 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v23 >= 0x17)
    {
      v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17)
        v25 = v23 | 7;
      v26 = v25 + 1;
      v24 = operator new(v25 + 1);
      *(_QWORD *)v249 = v26 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v24;
      *(_QWORD *)&object[16] = v23;
    }
    else
    {
      v249[7] = v23;
      if (!v23)
      {
LABEL_37:
        v24[v23] = 0;
        v249[8] = 1;
        v27 = &v249[16];
        if (v13 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v13 >= 0x17)
        {
          v28 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v13 | 7) != 0x17)
            v28 = v13 | 7;
          v29 = v28 + 1;
          v27 = operator new(v28 + 1);
          *(_QWORD *)&v251 = v29 | 0x8000000000000000;
          *(_QWORD *)&v249[16] = v27;
          v250 = (void *)v13;
        }
        else
        {
          BYTE7(v251) = v13;
          if (!v13)
            goto LABEL_45;
        }
        memmove(v27, v12, v13);
LABEL_45:
        v27[v13] = 0;
        BYTE8(v251) = 1;
        v30 = *(NSObject **)object;
        if (SBYTE7(v251) < 0)
          operator delete(*(void **)&v249[16]);
        if (v249[8] && (v249[7] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        v31 = (double)v20 / 1000000000.0;
        if (v10 && *(_QWORD *)(v10 + 24))
        {
          v32 = _os_log_pack_size();
          v33 = (std::__shared_weak_count_vtbl *)operator new(v32, (std::align_val_t)8uLL);
          v34 = (std::__shared_weak_count *)operator new();
          v35 = v34;
          v34->__shared_owners_ = 0;
          v36 = (unint64_t *)&v34->__shared_owners_;
          v34->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v34->__shared_weak_owners_ = 0;
          v34[1].__vftable = v33;
          *(_QWORD *)object = v33;
          *(_QWORD *)&object[8] = v33;
          *(_QWORD *)&object[16] = v34;
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
          memset(v249, 0, sizeof(v249));
          do
            v38 = __ldaxr(v36);
          while (__stlxr(v38 - 1, v36));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v35);
          }
          v39 = *(_QWORD *)object;
          v40 = _os_log_pack_fill();
          *(_DWORD *)v40 = 134217984;
          *(double *)(v40 + 4) = v31;
          v41 = (char *)operator new();
          v42 = *(unsigned __int8 *)(v155 + 39);
          v43 = v153;
          if ((v42 & 0x80u) != 0)
          {
            v43 = *(const char **)(v155 + 16);
            v42 = *(_QWORD *)(v155 + 24);
          }
          *(_QWORD *)v41 = v39;
          *(_OWORD *)(v41 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v41 + 24) = *(_OWORD *)v249;
          *(_QWORD *)v249 = 0;
          *(_QWORD *)&v249[8] = 0;
          *((_QWORD *)v41 + 5) = v43;
          *((_QWORD *)v41 + 6) = v42;
          v41[56] = 1;
          v214 = 0;
          v201 = v41;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v10 + 24) + 40))(*(_QWORD *)(v10 + 24), &v201);
          v44 = v201;
          v201 = 0;
          if (v44)
          {
            v45 = (std::__shared_weak_count *)*((_QWORD *)v44 + 4);
            if (v45)
            {
              v46 = (unint64_t *)&v45->__shared_owners_;
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }
            v48 = (std::__shared_weak_count *)*((_QWORD *)v44 + 2);
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            MEMORY[0x227684CE8](v44, 0x10F0C40B62ED6C6);
            v51 = v214;
            v214 = 0;
            if (v51)
            {
              v52 = (std::__shared_weak_count *)v51[4];
              if (v52)
              {
                v53 = (unint64_t *)&v52->__shared_owners_;
                do
                  v54 = __ldaxr(v53);
                while (__stlxr(v54 - 1, v53));
                if (!v54)
                {
                  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                  std::__shared_weak_count::__release_weak(v52);
                }
              }
              v55 = (std::__shared_weak_count *)v51[2];
              if (v55)
              {
                v56 = (unint64_t *)&v55->__shared_owners_;
                do
                  v57 = __ldaxr(v56);
                while (__stlxr(v57 - 1, v56));
                if (!v57)
                {
                  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                  std::__shared_weak_count::__release_weak(v55);
                }
              }
              MEMORY[0x227684CE8](v51, 0x10F0C40B62ED6C6);
            }
          }
          v58 = *(std::__shared_weak_count **)&v249[8];
          v59 = v157;
          if (*(_QWORD *)&v249[8])
          {
            v60 = (unint64_t *)(*(_QWORD *)&v249[8] + 8);
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
          v62 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v63 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
        }
        else
        {
          os_log_type_enabled(v30, OS_LOG_TYPE_INFO);
          *(_DWORD *)object = 134217984;
          *(double *)&object[4] = v31;
          v65 = (void *)_os_log_send_and_compose_impl();
          v59 = v157;
          if (v65)
            free(v65);
        }
        if (v59)
        {
          sub_22322C138((uint64_t)&v204, "KeyframePlaneDetector: No keyframes to process at ts %f", (double)v159 / 1000000000.0);
          sub_223182C08((uint64_t)&v204);
        }
        sub_223182C08((uint64_t)&v204);
        v66 = v212;
        if (v212)
        {
          v67 = (unint64_t *)&v212->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        goto LABEL_104;
      }
    }
    memmove(v24, v22, v23);
    goto LABEL_37;
  }
  if (v199 == v200)
  {
    sub_2236EC60C(&v214);
    if (*(int *)v214[7] > 3
      || (v14 = *((unsigned __int8 *)v214 + 72),
          v15 = sub_22322F254((uint64_t)v214, "OSLogSurrogateAppender", 1, 0),
          v16 = v15,
          !v14)
      && !v15)
    {
LABEL_223:
      *(_QWORD *)&object[8] = 0;
      *(_QWORD *)object = &object[8];
      *(_QWORD *)&v249[8] = 0;
      *(_QWORD *)&v249[16] = 0;
      *(_QWORD *)&object[16] = 0;
      *(_QWORD *)v249 = &v249[8];
      v250 = 0;
      v251 = 0uLL;
      rep = 0;
      v204 = 0;
      v206 = 0;
      v133 = (char *)operator new();
      *((_QWORD *)v133 + 16) = 0;
      *((_OWORD *)v133 + 6) = 0u;
      *((_OWORD *)v133 + 7) = 0u;
      *((_OWORD *)v133 + 4) = 0u;
      *((_OWORD *)v133 + 5) = 0u;
      *((_OWORD *)v133 + 2) = 0u;
      *((_OWORD *)v133 + 3) = 0u;
      *(_OWORD *)v133 = 0u;
      *((_OWORD *)v133 + 1) = 0u;
      sub_22370F510((uint64_t)v133);
      *(_OWORD *)(v133 + 72) = 0u;
      *(_OWORD *)(v133 + 56) = 0u;
      *((_DWORD *)v133 + 22) = 1065353216;
      *((_OWORD *)v133 + 6) = 0u;
      *((_OWORD *)v133 + 7) = 0u;
      *((_DWORD *)v133 + 32) = 1065353216;
      v201 = v133;
      sub_2236EEBF4((uint64_t)oslog, a1, (uint64_t *)a2, (uint64_t)object, (unsigned __int8 **)&v204, (_QWORD **)&v201, 0, 0);
      v159 = *(_QWORD *)oslog;
      *(_OWORD *)v160 = *(_OWORD *)&oslog[8];
      v161 = *(_QWORD *)v216;
      *(_QWORD *)&oslog[8] = 0;
      *(_QWORD *)&oslog[16] = 0;
      v162 = *(_OWORD *)&v216[8];
      v134 = v219;
      v163 = v217;
      memset(v216, 0, sizeof(v216));
      v217 = 0;
      v164 = v218;
      v218 = 0uLL;
      v135 = v220;
      v136 = v221;
      v219 = 0;
      v220 = 0;
      v165 = v134;
      v166 = v135;
      v221 = 0;
      v167 = v136;
      v168 = v222;
      v169 = v223;
      v170 = v224;
      if (v223)
      {
        v137 = *(_QWORD *)(v222 + 8);
        if ((v136 & (v136 - 1)) != 0)
        {
          if (v137 >= v136)
            v137 %= v136;
        }
        else
        {
          v137 &= v136 - 1;
        }
        *((_QWORD *)v135 + v137) = &v168;
        v222 = 0;
        v223 = 0;
      }
      v171 = v225;
      v225 = 0uLL;
      v172 = v226;
      v173 = v227;
      v226 = 0uLL;
      v174 = v228;
      v175 = v229;
      v227 = 0;
      v228 = 0uLL;
      v229 = 0;
      v176 = v230;
      v177 = v231;
      v178 = v232;
      v231 = 0uLL;
      v232 = 0;
      v179 = v233;
      LOBYTE(v180) = 0;
      v192 = 0;
      if (v246)
      {
        v180 = v234;
        v234 = 0uLL;
        v182 = v236;
        v181 = v235;
        v183 = v237;
        v235 = 0;
        v236 = 0uLL;
        v237 = 0;
        v184 = v238;
        v185 = &off_24EC24788;
        v138 = v240;
        v240 = 0uLL;
        v190 = v244;
        v188 = v242;
        v189 = v243;
        v186 = v138;
        v187 = v241;
        v191 = v245;
        v192 = 1;
      }
      v193 = 1;
      sub_22327F500((uint64_t)oslog);
      v139 = (uint64_t *)v201;
      v201 = 0;
      if (v139)
      {
        v140 = sub_22370F604(v139);
        MEMORY[0x227684CE8](v140, 0x10A0C402FF47DCALL);
      }
      v141 = v204;
      if (v204)
      {
        v142 = rep;
        v143 = v204;
        if (rep != v204)
        {
          do
          {
            v144 = (std::__shared_weak_count *)*(v142 - 28);
            if (v144)
            {
              v145 = (unint64_t *)&v144->__shared_owners_;
              do
                v146 = __ldaxr(v145);
              while (__stlxr(v146 - 1, v145));
              if (!v146)
              {
                ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                std::__shared_weak_count::__release_weak(v144);
              }
            }
            v142 -= 31;
          }
          while (v142 != v141);
          v143 = v204;
        }
        rep = v141;
        operator delete(v143);
      }
      if (v250)
      {
        *(_QWORD *)&v251 = v250;
        operator delete(v250);
      }
      sub_223198030((uint64_t)v249, *(_QWORD **)&v249[8]);
      sub_223198030((uint64_t)object, *(_QWORD **)&object[8]);
      goto LABEL_247;
    }
    *(_QWORD *)object = &v214;
    *(std::chrono::steady_clock::time_point *)&object[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&object[16] = std::chrono::system_clock::now();
    *(_DWORD *)v249 = 3;
    *(_QWORD *)&v249[8] = "unknown file";
    *(_DWORD *)&v249[16] = 260;
    v250 = "unknown function";
    v251 = 0uLL;
    v17 = **(_QWORD **)object;
    v158 = **(_QWORD **)object;
    if (*(char *)(**(_QWORD **)object + 39) < 0)
    {
      v19 = *(const char **)(v17 + 16);
      v18 = *(_QWORD *)(v17 + 24);
    }
    else
    {
      v18 = *(unsigned __int8 *)(**(_QWORD **)object + 39);
      v19 = (const char *)(**(_QWORD **)object + 16);
    }
    v156 = **(_QWORD **)object + 16;
    v83 = *(_QWORD *)a2;
    v84 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v84 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)oslog);
      sub_223199C58("com.apple.cv3d", (unint64_t)oslog, &xmmword_255788F40);
      if (v216[0] && (oslog[23] & 0x80000000) != 0)
        operator delete(*(void **)oslog);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v85 = (const char *)&xmmword_255788F40;
    else
      v85 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v86 = byte_255788F57;
    else
      v86 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)oslog = os_log_create(v85, v19);
    v87 = &oslog[8];
    if (v86 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v86 >= 0x17)
    {
      v154 = v19;
      v88 = v16;
      v89 = v14;
      v90 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v86 | 7) != 0x17)
        v90 = v86 | 7;
      v91 = v90 + 1;
      v87 = operator new(v90 + 1);
      *(_QWORD *)v216 = v91 | 0x8000000000000000;
      *(_QWORD *)&oslog[8] = v87;
      *(_QWORD *)&oslog[16] = v86;
      v14 = v89;
      v16 = v88;
      v19 = v154;
    }
    else
    {
      v216[7] = v86;
      if (!v86)
      {
LABEL_156:
        v87[v86] = 0;
        v216[8] = 1;
        v92 = &v216[16];
        if (v18 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v18 >= 0x17)
        {
          v93 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v18 | 7) != 0x17)
            v93 = v18 | 7;
          v94 = v93 + 1;
          v92 = operator new(v93 + 1);
          *(_QWORD *)&v218 = v94 | 0x8000000000000000;
          *(_QWORD *)&v216[16] = v92;
          v217 = (void *)v18;
        }
        else
        {
          BYTE7(v218) = v18;
          if (!v18)
            goto LABEL_164;
        }
        memmove(v92, v19, v18);
LABEL_164:
        v92[v18] = 0;
        BYTE8(v218) = 1;
        v95 = *(NSObject **)oslog;
        if (SBYTE7(v218) < 0)
          operator delete(*(void **)&v216[16]);
        if (v216[8] && (v216[7] & 0x80000000) != 0)
          operator delete(*(void **)&oslog[8]);
        if (*(_QWORD *)oslog)
          os_release(*(void **)oslog);
        v96 = (double)v83 / 1000000000.0;
        if (v16 && *(_QWORD *)(v16 + 24))
        {
          v97 = _os_log_pack_size();
          v98 = (std::__shared_weak_count_vtbl *)operator new(v97, (std::align_val_t)8uLL);
          v99 = (std::__shared_weak_count *)operator new();
          v100 = v99;
          v99->__shared_owners_ = 0;
          v101 = (unint64_t *)&v99->__shared_owners_;
          v99->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v99->__shared_weak_owners_ = 0;
          v99[1].__vftable = v98;
          *(_QWORD *)oslog = v98;
          *(_QWORD *)&oslog[8] = v98;
          *(_QWORD *)&oslog[16] = v99;
          do
            v102 = __ldxr(v101);
          while (__stxr(v102 + 1, v101));
          memset(v216, 0, sizeof(v216));
          do
            v103 = __ldaxr(v101);
          while (__stlxr(v103 - 1, v101));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v100);
          }
          v104 = *(_QWORD *)oslog;
          v105 = _os_log_pack_fill();
          *(_DWORD *)v105 = 134217984;
          *(double *)(v105 + 4) = v96;
          v106 = (char *)operator new();
          v107 = *(unsigned __int8 *)(v158 + 39);
          v108 = v156;
          if ((v107 & 0x80u) != 0)
          {
            v108 = *(_QWORD *)(v158 + 16);
            v107 = *(_QWORD *)(v158 + 24);
          }
          *(_QWORD *)v106 = v104;
          *(_OWORD *)(v106 + 8) = *(_OWORD *)&oslog[8];
          *(_QWORD *)&oslog[8] = 0;
          *(_QWORD *)&oslog[16] = 0;
          *(_OWORD *)(v106 + 24) = *(_OWORD *)v216;
          *(_QWORD *)v216 = 0;
          *(_QWORD *)&v216[8] = 0;
          *((_QWORD *)v106 + 5) = v108;
          *((_QWORD *)v106 + 6) = v107;
          v106[56] = 1;
          v201 = 0;
          v204 = v106;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v16 + 24) + 40))(*(_QWORD *)(v16 + 24), &v204);
          v109 = v204;
          v204 = 0;
          if (v109)
          {
            v110 = (std::__shared_weak_count *)*((_QWORD *)v109 + 4);
            if (v110)
            {
              v111 = (unint64_t *)&v110->__shared_owners_;
              do
                v112 = __ldaxr(v111);
              while (__stlxr(v112 - 1, v111));
              if (!v112)
              {
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v110);
              }
            }
            v113 = (std::__shared_weak_count *)*((_QWORD *)v109 + 2);
            if (v113)
            {
              v114 = (unint64_t *)&v113->__shared_owners_;
              do
                v115 = __ldaxr(v114);
              while (__stlxr(v115 - 1, v114));
              if (!v115)
              {
                ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                std::__shared_weak_count::__release_weak(v113);
              }
            }
            MEMORY[0x227684CE8](v109, 0x10F0C40B62ED6C6);
            v116 = v201;
            v201 = 0;
            if (v116)
            {
              v117 = (std::__shared_weak_count *)*((_QWORD *)v116 + 4);
              if (v117)
              {
                v118 = (unint64_t *)&v117->__shared_owners_;
                do
                  v119 = __ldaxr(v118);
                while (__stlxr(v119 - 1, v118));
                if (!v119)
                {
                  ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                  std::__shared_weak_count::__release_weak(v117);
                }
              }
              v120 = (std::__shared_weak_count *)*((_QWORD *)v116 + 2);
              if (v120)
              {
                v121 = (unint64_t *)&v120->__shared_owners_;
                do
                  v122 = __ldaxr(v121);
                while (__stlxr(v122 - 1, v121));
                if (!v122)
                {
                  ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                  std::__shared_weak_count::__release_weak(v120);
                }
              }
              MEMORY[0x227684CE8](v116, 0x10F0C40B62ED6C6);
            }
          }
          v123 = *(std::__shared_weak_count **)&v216[8];
          if (*(_QWORD *)&v216[8])
          {
            v124 = (unint64_t *)(*(_QWORD *)&v216[8] + 8);
            do
              v125 = __ldaxr(v124);
            while (__stlxr(v125 - 1, v124));
            if (!v125)
            {
              ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
              std::__shared_weak_count::__release_weak(v123);
            }
          }
          v126 = *(std::__shared_weak_count **)&oslog[16];
          if (*(_QWORD *)&oslog[16])
          {
            v127 = (unint64_t *)(*(_QWORD *)&oslog[16] + 8);
            do
              v128 = __ldaxr(v127);
            while (__stlxr(v128 - 1, v127));
            if (!v128)
            {
              ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
              std::__shared_weak_count::__release_weak(v126);
            }
          }
        }
        else
        {
          os_log_type_enabled(v95, OS_LOG_TYPE_INFO);
          *(_DWORD *)oslog = 134217984;
          *(double *)&oslog[4] = v96;
          v129 = (void *)_os_log_send_and_compose_impl();
          if (v129)
            free(v129);
        }
        if (v14)
        {
          sub_22322C138((uint64_t)object, "KeyframePlaneDetector: No keyframes to process at ts %f", (double)*(uint64_t *)a2 / 1000000000.0);
          sub_223182C08((uint64_t)object);
        }
        sub_223182C08((uint64_t)object);
        v130 = (std::__shared_weak_count *)*((_QWORD *)&v251 + 1);
        if (*((_QWORD *)&v251 + 1))
        {
          v131 = (unint64_t *)(*((_QWORD *)&v251 + 1) + 8);
          do
            v132 = __ldaxr(v131);
          while (__stlxr(v132 - 1, v131));
          if (!v132)
          {
            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
            std::__shared_weak_count::__release_weak(v130);
          }
        }
        goto LABEL_223;
      }
    }
    memmove(v87, v85, v86);
    goto LABEL_156;
  }
  sub_2236EEEC8((uint64_t)&v159, a1, (uint64_t (****)())&v199, 0, 0, (uint64_t *)v194, (uint64_t *)a2);
LABEL_247:
  sub_2236EE408(a3, (uint64_t)&v159);
  if (v193)
  {
    sub_22327F500((uint64_t)&v159);
  }
  else if ((_BYTE)v170)
  {
    if ((_BYTE)v169)
    {
      if (SHIBYTE(v168) < 0)
        operator delete(v166);
      if (SHIBYTE(v164) < 0)
        operator delete(v163);
    }
    if (BYTE8(v162) && SBYTE7(v162) < 0)
      operator delete(v160[1]);
  }
LABEL_249:
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (v194[0])
  {
    v194[1] = v194[0];
    operator delete(v194[0]);
  }
  v147 = (char *)v199;
  if (v199)
  {
    v148 = v200;
    v149 = v199;
    if (v200 != v199)
    {
      do
      {
        v150 = (std::__shared_weak_count *)*((_QWORD *)v148 - 28);
        if (v150)
        {
          v151 = (unint64_t *)&v150->__shared_owners_;
          do
            v152 = __ldaxr(v151);
          while (__stlxr(v152 - 1, v151));
          if (!v152)
          {
            ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
            std::__shared_weak_count::__release_weak(v150);
          }
        }
        v148 -= 248;
      }
      while (v148 != v147);
      v149 = v199;
    }
    v200 = v147;
    operator delete(v149);
  }
}

void sub_2236EE144(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (LOBYTE(STACK[0x968]))
  {
    if (SLOBYTE(STACK[0x967]) < 0)
      operator delete((void *)STACK[0x950]);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0xAD0]);
  sub_2234F144C(v1);
  sub_2234791DC((uint64_t)&STACK[0x880]);
  sub_223473EA8((void **)&STACK[0x8C8]);
  _Unwind_Resume(a1);
}

void sub_2236EE3E8(_Unwind_Exception *a1)
{
  sub_223473EA8((void **)&STACK[0x8C8]);
  _Unwind_Resume(a1);
}

uint64_t sub_2236EE408(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v4;
  char *v5;
  int v6;
  void **v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  char v23;
  char v25;
  char v26;
  _BYTE v27[32];
  __int128 v28;
  void *v29[3];
  uint64_t v30;
  void *v31[2];
  uint64_t v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  uint64_t (**v49)();
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int16 v55;
  char v56;
  char v57;
  _BYTE v58[32];
  __int128 v59;
  _BYTE v60[24];
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  char v71;
  __int128 v72;
  uint64_t v73;
  char v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  char v79;
  uint64_t (**v80)();
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int16 v86;
  char v87;

  v27[0] = 0;
  v57 = *(_BYTE *)(a2 + 376);
  if (!v57)
  {
    *(_OWORD *)v27 = *(_OWORD *)a2;
    v27[16] = 0;
    LOBYTE(v34) = 0;
    if (*(_BYTE *)(a2 + 112))
    {
      BYTE8(v28) = 0;
      if (*(_BYTE *)(a2 + 40))
      {
        *(_OWORD *)&v27[16] = *(_OWORD *)(a2 + 16);
        *(_QWORD *)&v28 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a2 + 24) = 0;
        *(_QWORD *)(a2 + 32) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        BYTE8(v28) = 1;
      }
      LOBYTE(v29[0]) = 0;
      LOBYTE(v33) = 0;
      if (*(_BYTE *)(a2 + 104))
      {
        v11 = *(_QWORD *)(a2 + 72);
        v29[2] = *(void **)(a2 + 64);
        *(_OWORD *)v29 = *(_OWORD *)(a2 + 48);
        *(_QWORD *)(a2 + 56) = 0;
        *(_QWORD *)(a2 + 64) = 0;
        *(_QWORD *)(a2 + 48) = 0;
        v30 = v11;
        *(_OWORD *)v31 = *(_OWORD *)(a2 + 80);
        v32 = *(_QWORD *)(a2 + 96);
        *(_QWORD *)(a2 + 80) = 0;
        *(_QWORD *)(a2 + 88) = 0;
        *(_QWORD *)(a2 + 96) = 0;
        LOBYTE(v33) = 1;
      }
      LOBYTE(v34) = 1;
    }
    if (!*(_BYTE *)(a1 + 376))
      goto LABEL_36;
    v5 = (char *)(a1 + 376);
    goto LABEL_25;
  }
  sub_22327F72C((uint64_t)v27, a2);
  if (v57)
    v4 = *(_BYTE *)(a1 + 376) == 0;
  else
    v4 = 1;
  if (!v4)
  {
    *(_OWORD *)&v58[8] = *(_OWORD *)&v27[8];
    *(_QWORD *)v58 = *(_QWORD *)v27;
    *(_QWORD *)&v58[24] = *(_QWORD *)&v27[24];
    memset(&v27[8], 0, 24);
    v59 = v28;
    v12 = v29[0];
    v28 = 0uLL;
    memset(v29, 0, sizeof(v29));
    *(_OWORD *)&v60[8] = *(_OWORD *)&v29[1];
    v13 = v31[0];
    *(_QWORD *)v60 = v12;
    v61 = v30;
    v62 = *(_OWORD *)v31;
    v30 = 0;
    v31[0] = 0;
    v14 = (unint64_t)v31[1];
    v63 = v32;
    v31[1] = 0;
    v64 = v33;
    v65 = v34;
    if (v33)
    {
      v15 = *(_QWORD *)(v32 + 8);
      if ((v14 & (v14 - 1)) != 0)
      {
        if (v15 >= v14)
          v15 %= v14;
      }
      else
      {
        v15 &= v14 - 1;
      }
      v13[v15] = &v63;
      v32 = 0;
      v33 = 0;
    }
    v66 = v35;
    v35 = 0uLL;
    v67 = v36;
    v68 = v37;
    v36 = 0uLL;
    v69 = v38;
    v70 = v39;
    v37 = 0;
    v38 = 0uLL;
    v39 = 0;
    v71 = v40;
    v72 = v41;
    v73 = v42;
    v41 = 0uLL;
    v42 = 0;
    v74 = v43;
    LOBYTE(v75) = 0;
    v87 = 0;
    if (v56)
    {
      v75 = v44;
      v44 = 0uLL;
      v77 = v46;
      v76 = v45;
      v78 = v47;
      v45 = 0;
      v46 = 0uLL;
      v47 = 0;
      v79 = v48;
      v80 = &off_24EC24788;
      v21 = v50;
      v50 = 0uLL;
      v85 = v54;
      v83 = v52;
      v84 = v53;
      v81 = v21;
      v82 = v51;
      v86 = v55;
      v87 = 1;
    }
    sub_2234F36D4((uint64_t)v27, a1);
    sub_2234F36D4(a1, (uint64_t)v58);
LABEL_49:
    sub_22327F500((uint64_t)v58);
    goto LABEL_50;
  }
  v5 = (char *)(a1 + 376);
  if (!v57)
  {
    if (!*(_BYTE *)(a1 + 376))
      goto LABEL_36;
LABEL_25:
    sub_22327F72C((uint64_t)v58, a1);
    sub_22327F500(a1);
    *(_OWORD *)a1 = *(_OWORD *)v27;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    if ((_BYTE)v34)
    {
      *(_BYTE *)(a1 + 40) = 0;
      v16 = BYTE8(v28);
      if (BYTE8(v28))
      {
        *(_OWORD *)(a1 + 16) = *(_OWORD *)&v27[16];
        *(_QWORD *)(a1 + 32) = v28;
        *(_QWORD *)&v27[24] = 0;
        *(_QWORD *)&v28 = 0;
        *(_QWORD *)&v27[16] = 0;
        *(_BYTE *)(a1 + 40) = 1;
      }
      *(_BYTE *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 104) = 0;
      if ((_BYTE)v33)
      {
        v17 = v30;
        *(void **)(a1 + 64) = v29[2];
        *(_OWORD *)(a1 + 48) = *(_OWORD *)v29;
        v29[0] = 0;
        v29[1] = 0;
        *(_QWORD *)(a1 + 72) = v17;
        *(_OWORD *)(a1 + 80) = *(_OWORD *)v31;
        *(_QWORD *)(a1 + 96) = v32;
        v29[2] = 0;
        v31[0] = 0;
        v31[1] = 0;
        v32 = 0;
        *(_BYTE *)(a1 + 104) = 1;
      }
      *(_BYTE *)(a1 + 112) = 1;
      if (v16 && SBYTE7(v28) < 0)
        operator delete(*(void **)&v27[16]);
    }
    *(_QWORD *)v27 = *(_QWORD *)v58;
    *(_OWORD *)&v27[8] = *(_OWORD *)&v58[8];
    *(_QWORD *)&v27[24] = *(_QWORD *)&v58[24];
    memset(&v58[8], 0, 24);
    v28 = v59;
    v29[0] = *(void **)v60;
    v59 = 0uLL;
    memset(v60, 0, sizeof(v60));
    *(_OWORD *)&v29[1] = *(_OWORD *)&v60[8];
    v18 = v61;
    v19 = v62;
    v61 = 0;
    v62 = 0uLL;
    v30 = v18;
    *(_OWORD *)v31 = v19;
    v32 = v63;
    v33 = v64;
    v34 = v65;
    if (v64)
    {
      v20 = *(_QWORD *)(v63 + 8);
      if ((*((_QWORD *)&v19 + 1) & (*((_QWORD *)&v19 + 1) - 1)) != 0)
      {
        if (v20 >= *((_QWORD *)&v19 + 1))
          v20 %= *((_QWORD *)&v19 + 1);
      }
      else
      {
        v20 &= *((_QWORD *)&v19 + 1) - 1;
      }
      *(_QWORD *)(v19 + 8 * v20) = &v32;
      v63 = 0;
      v64 = 0;
    }
    v35 = v66;
    v66 = 0uLL;
    v36 = v67;
    v37 = v68;
    v67 = 0uLL;
    v38 = v69;
    v39 = v70;
    v68 = 0;
    v69 = 0uLL;
    v70 = 0;
    v40 = v71;
    v41 = v72;
    v42 = v73;
    v72 = 0uLL;
    v73 = 0;
    v43 = v74;
    LOBYTE(v44) = 0;
    v56 = 0;
    if (v87)
    {
      v44 = v75;
      v75 = 0uLL;
      v46 = v77;
      v45 = v76;
      v47 = v78;
      v76 = 0;
      v77 = 0uLL;
      v78 = 0;
      v48 = v79;
      v49 = &off_24EC24788;
      v22 = v81;
      v81 = 0uLL;
      v54 = v85;
      v52 = v83;
      v53 = v84;
      v50 = v22;
      v51 = v82;
      v55 = v86;
      v56 = 1;
    }
    v23 = v57;
    v57 = *v5;
    *v5 = v23;
    goto LABEL_49;
  }
  if (*(_BYTE *)(a1 + 376))
  {
LABEL_36:
    sub_22370173C((__int128 *)v27, (__int128 *)a1);
    goto LABEL_50;
  }
  *(_OWORD *)v58 = *(_OWORD *)a1;
  v58[16] = 0;
  LOBYTE(v65) = 0;
  v6 = *(unsigned __int8 *)(a1 + 112);
  if (*(_BYTE *)(a1 + 112))
  {
    v7 = (void **)(a1 + 16);
    BYTE8(v59) = 0;
    v8 = *(unsigned __int8 *)(a1 + 40);
    if (*(_BYTE *)(a1 + 40))
    {
      *(_OWORD *)&v58[16] = *(_OWORD *)v7;
      *(_QWORD *)&v59 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *v7 = 0;
      v9 = 1;
      BYTE8(v59) = 1;
      v60[0] = 0;
      LOBYTE(v64) = 0;
      if (*(_BYTE *)(a1 + 104))
      {
LABEL_12:
        v2 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)&v60[16] = *(_QWORD *)(a1 + 64);
        *(_OWORD *)v60 = *(_OWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 64) = 0;
        *(_QWORD *)(a1 + 48) = 0;
        v61 = v2;
        v62 = *(_OWORD *)(a1 + 80);
        v63 = *(_QWORD *)(a1 + 96);
        *(_QWORD *)(a1 + 80) = 0;
        *(_QWORD *)(a1 + 88) = 0;
        *(_QWORD *)(a1 + 96) = 0;
        v10 = 1;
        LOBYTE(v64) = 1;
LABEL_65:
        LOBYTE(v65) = 1;
        if (v8 && *(char *)(a1 + 39) < 0)
          operator delete(*v7);
        goto LABEL_68;
      }
    }
    else
    {
      v9 = 0;
      v60[0] = 0;
      LOBYTE(v64) = 0;
      if (*(_BYTE *)(a1 + 104))
        goto LABEL_12;
    }
    v10 = 0;
    goto LABEL_65;
  }
  v10 = 0;
  v9 = 0;
LABEL_68:
  sub_22327F72C(a1, (uint64_t)v27);
  sub_22327F500((uint64_t)v27);
  *(_OWORD *)v27 = *(_OWORD *)v58;
  v27[16] = 0;
  LOBYTE(v34) = 0;
  if (v6)
  {
    BYTE8(v28) = 0;
    if (v9)
    {
      *(_OWORD *)&v27[16] = *(_OWORD *)&v58[16];
      *(_QWORD *)&v28 = v59;
      *(_QWORD *)&v58[24] = 0;
      *(_QWORD *)&v59 = 0;
      *(_QWORD *)&v58[16] = 0;
      BYTE8(v28) = 1;
    }
    LOBYTE(v29[0]) = 0;
    LOBYTE(v33) = 0;
    if (v10)
    {
      *(_OWORD *)v29 = *(_OWORD *)v60;
      v29[2] = *(void **)&v60[16];
      v30 = v2;
      *(_OWORD *)v31 = v62;
      v32 = v63;
      LOBYTE(v33) = 1;
    }
    LOBYTE(v34) = 1;
    v25 = v57;
    v57 = *v5;
    *v5 = v25;
    if (v9 && SBYTE7(v59) < 0)
      operator delete(*(void **)&v58[16]);
  }
  else
  {
    v26 = v57;
    v57 = *v5;
    *v5 = v26;
  }
LABEL_50:
  if (v57)
  {
    sub_22327F500((uint64_t)v27);
  }
  else if ((_BYTE)v34)
  {
    if ((_BYTE)v33)
    {
      if (SHIBYTE(v32) < 0)
        operator delete(v31[0]);
      if (SHIBYTE(v29[2]) < 0)
        operator delete(v29[0]);
    }
    if (BYTE8(v28) && SBYTE7(v28) < 0)
      operator delete(*(void **)&v27[16]);
  }
  return a1;
}

void sub_2236EEBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  sub_22319723C((uint64_t)&a57);
  sub_2234F144C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2236EEBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2234F144C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2236EEBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  sub_22327F500((uint64_t)&a57);
  sub_2234F144C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2236EEBF4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned __int8 **a5, _QWORD **a6, uint64_t a7, char a8)
{
  uint64_t v15;
  BOOL v16;
  float v17;
  uint64_t v18;
  unsigned __int8 **v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  unsigned __int8 **v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t **v27;
  unsigned __int8 **v28;
  int8x8_t v29;
  float v30;
  int v31;
  void *v32;
  unsigned __int8 *v33;
  void *__p;
  unsigned __int8 *v35;
  void *v36[3];
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;

  sub_2236D31A0(a3, a4, *(_QWORD *)(a2 + 208), a5, (uint64_t)v36);
  sub_2236D6360((uint64_t *)v36, *(_QWORD *)(a2 + 208), *(_QWORD *)(a2 + 216), *(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 104), &v32);
  sub_2236D8E80((uint64_t)v36, (unsigned __int8 **)&v32, *(_QWORD *)(a2 + 216));
  v15 = *(_QWORD *)(a2 + 208);
  v16 = *(_BYTE *)(a2 + 33) == 0;
  v29 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(_BYTE *)(a2 + 33) == 0), 0x1FuLL)), (int8x8_t)0x3F7FA63740400000, (int8x8_t)0x3F7C1C6141200000);
  v17 = 0.17365;
  if (v16)
    v17 = 0.052336;
  v30 = v17;
  v31 = 1048576000;
  sub_2236D9A00(a3, (uint64_t **)v36, v15, (float *)&v29, a6, a7, a8, a1);
  v19 = *(unsigned __int8 ***)(a2 + 216);
  v20 = (unsigned __int8 *)__p;
  v21 = v35;
  if (__p != v35)
  {
    do
    {
      v22 = *((_DWORD *)v20 + 4);
      v23 = v19;
      if (v22)
      {
        if (v22 != 1)
          goto LABEL_6;
        v23 = v19 + 3;
      }
      sub_2231AFD68(v23, v20);
LABEL_6:
      v20 += 20;
    }
    while (v20 != v21);
  }
  v24 = (unsigned __int8 *)v32;
  v25 = v33;
  if (v32 != v33)
  {
    while (1)
    {
      v26 = *((_DWORD *)v24 + 4);
      if ((v26 - 1) < 2)
        break;
      v27 = (uint64_t **)v19;
      v28 = v19 + 3;
      if (!v26)
        goto LABEL_16;
LABEL_12:
      v24 += 20;
      if (v24 == v25)
        goto LABEL_17;
    }
    v27 = (uint64_t **)(v19 + 3);
    v28 = v19;
LABEL_16:
    sub_2231A9984(v27, v24, v24);
    sub_2231AFD68(v28, v24);
    goto LABEL_12;
  }
LABEL_17:
  sub_2236DDF34(a4, (uint64_t *)v36, v18, (double)*a3 / 1000000000.0);
  if (__p)
  {
    v35 = (unsigned __int8 *)__p;
    operator delete(__p);
  }
  if (v32)
  {
    v33 = (unsigned __int8 *)v32;
    operator delete(v32);
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
}

void sub_2236EEE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_22327F500(v4);
  sub_2236B3F2C((uint64_t)va);
  sub_223255CAC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2236EEEC8(uint64_t a1, uint64_t a2, uint64_t (****a3)(), float32x4_t *a4, char a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t *v8;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  std::mutex *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  double v21;
  float v22;
  float v23;
  uint64_t *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned __int8 v41;
  const void *v42;
  size_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  size_t v48;
  const char *v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  size_t v54;
  char v55;
  size_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  const char *v61;
  size_t v62;
  char *v63;
  unint64_t v64;
  const char *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  double v74;
  double v75;
  size_t v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  const void *v115;
  uint64_t v116;
  uint64_t v117;
  const char *v118;
  uint64_t v119;
  const char *v120;
  size_t v121;
  uint64_t v122;
  unsigned __int8 v123;
  unsigned __int8 v124;
  const char *v125;
  size_t v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  int v131;
  const char *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  size_t v137;
  void *v138;
  _QWORD *v139;
  size_t v140;
  size_t v141;
  _BYTE *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  _QWORD *v148;
  std::string::size_type v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  void *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  const char *v168;
  void *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  const char *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  _QWORD *v195;
  uint64_t v196;
  float32x2_t **v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t i;
  _QWORD *v201;
  _QWORD *v202;
  uint64_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  void *v214;
  unsigned __int8 **v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  const char *v222;
  size_t v223;
  unsigned __int8 v224;
  const char *v225;
  size_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  NSObject *v233;
  size_t v234;
  std::__shared_weak_count_vtbl *v235;
  std::__shared_weak_count *v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  const char *v244;
  std::string::size_type v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  std::string::size_type v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  int v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  void *v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  uint64_t v270;
  _OWORD *v271;
  _OWORD *v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t v276;
  unsigned __int8 *v277;
  int v278;
  unint64_t v279;
  unint64_t v280;
  const char *v282;
  size_t v283;
  unsigned __int8 v284;
  unsigned __int8 v285;
  const char *v286;
  size_t v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  NSObject *v292;
  uint64_t v293;
  uint64_t v294;
  size_t v295;
  void *v296;
  _QWORD *v297;
  size_t v298;
  size_t v299;
  double *v300;
  void *v301;
  uint64_t v302;
  uint64_t v303;
  size_t v304;
  size_t v305;
  uint64_t *v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  char *v313;
  std::string::size_type v314;
  unint64_t *v315;
  unint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  unint64_t v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  std::string::size_type v324;
  char *v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  const char *v330;
  uint64_t v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  std::string::size_type v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  _QWORD *v354;
  _OWORD *v355;
  _QWORD *v356;
  uint64_t *v357;
  uint64_t **v358;
  uint64_t **v359;
  unsigned int v360;
  unsigned int v361;
  BOOL v362;
  unsigned int v363;
  unsigned int v364;
  unsigned int v365;
  char *v366;
  int has_internal_diagnostics;
  unsigned __int8 v368;
  float32x4_t v369;
  float32x2_t v370;
  unsigned __int8 v371;
  uint64_t v372;
  int8x16_t v373;
  float32x2_t v374;
  float v375;
  int32x4_t v376;
  int32x4_t v377;
  int8x16_t v378;
  float32x4_t v379;
  __int128 v380;
  float32x4_t v381;
  int8x16_t v382;
  int32x4_t v383;
  int32x4_t v384;
  __int128 v385;
  int v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t v395;
  std::mutex *v396;
  uint64_t v397;
  uint64_t v398;
  char v399;
  std::string *v400;
  std::string *v401;
  uint64_t v402;
  std::string::size_type size;
  std::string *v404;
  std::string::size_type v405;
  std::string::size_type v406;
  int v407;
  __n128 *v410;
  std::string *v411;
  size_t v412;
  std::string *v413;
  __int128 v414;
  std::string::size_type v415;
  std::string *v416;
  uint64_t *v417;
  uint64_t v418;
  uint64_t v419;
  std::mutex *v420;
  uint64_t v421;
  uint64_t v422;
  char v423;
  std::string *v424;
  std::string *v425;
  uint64_t v426;
  std::string::size_type v427;
  std::string *v428;
  std::string::size_type v429;
  std::string::size_type v430;
  int v431;
  __n128 *v434;
  std::string *v435;
  size_t v436;
  std::string::size_type v437;
  std::string *v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  std::mutex *v442;
  uint64_t v443;
  uint64_t v444;
  char v445;
  std::string *v446;
  std::string *v447;
  uint64_t v448;
  std::string::size_type v449;
  std::string *v450;
  std::string::size_type v451;
  std::string::size_type v452;
  int v453;
  __n128 *v456;
  std::string *v457;
  size_t v458;
  std::string::size_type v459;
  std::string *v460;
  uint64_t *v461;
  uint64_t v462;
  uint64_t v463;
  std::mutex *v464;
  uint64_t v465;
  uint64_t v466;
  char v467;
  std::string *v468;
  std::string *v469;
  uint64_t v470;
  std::string::size_type v471;
  std::string *v472;
  std::string::size_type v473;
  std::string::size_type v474;
  int v475;
  __n128 *v478;
  std::string *v479;
  size_t v480;
  std::string::size_type v481;
  std::string *v482;
  uint64_t *v483;
  uint64_t v484;
  uint64_t v485;
  std::mutex *v486;
  uint64_t v487;
  uint64_t v488;
  char v489;
  std::string *v490;
  std::string *v491;
  uint64_t v492;
  std::string::size_type v493;
  std::string *v494;
  std::string::size_type v495;
  std::string::size_type v496;
  int v497;
  __n128 *v500;
  std::string *v501;
  size_t v502;
  std::string::size_type v503;
  std::string *v504;
  uint64_t *v505;
  uint64_t v506;
  uint64_t v507;
  std::mutex *v508;
  uint64_t v509;
  uint64_t v510;
  char v511;
  std::string *v512;
  std::string *v513;
  uint64_t v514;
  std::string::size_type v515;
  std::string *v516;
  std::string::size_type v517;
  std::string::size_type v518;
  int v519;
  __n128 *v522;
  std::string *v523;
  size_t v524;
  std::string::size_type v525;
  std::string *v526;
  uint64_t *v527;
  uint64_t v528;
  uint64_t v529;
  std::mutex *v530;
  uint64_t v531;
  uint64_t v532;
  char v533;
  std::string *v534;
  std::string *v535;
  uint64_t v536;
  std::string::size_type v537;
  std::string *v538;
  std::string::size_type v539;
  std::string::size_type v540;
  int v541;
  __n128 *v544;
  std::string *v545;
  size_t v546;
  int v547;
  unint64_t v548;
  unint64_t v549;
  uint64_t v550;
  const char *v551;
  size_t v552;
  unsigned __int8 v553;
  unsigned __int8 v554;
  const char *v555;
  size_t v556;
  _BYTE *v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  _BYTE *v561;
  uint64_t v562;
  uint64_t v563;
  NSObject *v564;
  size_t v565;
  std::__shared_weak_count_vtbl *v566;
  std::__shared_weak_count *v567;
  std::__shared_weak_count *v568;
  unint64_t *v569;
  unint64_t v570;
  unint64_t v571;
  uint64_t v572;
  uint64_t v573;
  double v574;
  uint64_t v575;
  uint64_t v576;
  void *v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  const char *v583;
  uint64_t v584;
  std::__shared_weak_count *v585;
  unint64_t *v586;
  unint64_t v587;
  std::__shared_weak_count *v588;
  unint64_t *v589;
  unint64_t v590;
  uint64_t v591;
  std::__shared_weak_count *v592;
  unint64_t *v593;
  unint64_t v594;
  std::__shared_weak_count *v595;
  unint64_t *v596;
  unint64_t v597;
  std::__shared_weak_count *v598;
  int v599;
  unint64_t *v600;
  unint64_t v601;
  std::__shared_weak_count *v602;
  unint64_t *v603;
  unint64_t v604;
  void *v605;
  std::__shared_weak_count *v606;
  unint64_t *v607;
  unint64_t v608;
  uint64_t *v609;
  uint64_t v610;
  uint64_t v611;
  std::mutex *v612;
  uint64_t v613;
  uint64_t v614;
  char v615;
  std::string::size_type v616;
  std::string *v617;
  uint64_t v618;
  int v619;
  int v620;
  _OWORD **v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  _QWORD *v625;
  _QWORD *v626;
  void *v627;
  uint64_t *v628;
  uint64_t *v629;
  uint64_t v630;
  _QWORD *v631;
  uint64_t v632;
  uint64_t v633;
  float32x4_t v634;
  float32x2_t v635;
  float32x2_t v636;
  float32x2_t v637;
  float v638;
  uint64_t v639;
  _QWORD **v640;
  uint64_t v641;
  void *v642;
  uint64_t *v643;
  const char *v644;
  float v645;
  uint64_t v646;
  float32x2_t v647;
  float32x4_t v648;
  uint64_t (****v649)();
  const char *v652;
  const char *v653;
  float32x4_t v654;
  unint64_t v655;
  uint64_t v656;
  int v657;
  float32x4_t v658;
  const char *v659;
  uint64_t v660;
  int v661;
  unsigned __int8 *v662;
  float32x4_t v663;
  uint64_t v664;
  uint64_t *v665;
  int v666;
  void *v667[2];
  void *v668[2];
  int j;
  uint64_t *v670;
  double v671;
  double v672;
  _QWORD *v673[2];
  _QWORD **v674;
  _QWORD *v675[2];
  void *v676;
  void *v677;
  uint64_t v678;
  void *v679[2];
  uint64_t v680;
  char v681;
  void *v682;
  char v683;
  void *v684;
  char v685;
  char v686;
  char v687;
  uint64_t *v688;
  uint64_t *v689;
  uint64_t v690;
  void *v691;
  unsigned __int8 *v692;
  _QWORD **v693;
  _QWORD *v694;
  uint64_t v695;
  std::string v696;
  char *v697;
  std::__shared_weak_count *v698;
  uint64_t v699;
  __int128 v700;
  double v701;
  __int128 v702;
  uint64_t v703;
  uint64_t v704;
  unint64_t v705;
  _OWORD object[4];
  const void *v707;
  unint64_t v708;
  void *v709[2];
  uint64_t v710;
  char v711;
  char v712;
  unint64_t v713;
  int v714;
  uint64_t v715;
  _BYTE v716[24];
  _QWORD **v717;
  _QWORD *v718[2];
  void *v719;
  void *v720;
  uint64_t v721;
  void *v722[2];
  float32x4_t v723;
  float32x4_t v724;
  void *v725[2];
  uint64_t v726;
  __int128 __p;
  __int128 v728;
  char *v729;
  uint64_t v730;
  void *v731;
  void *v732;
  std::__shared_weak_count *v733;
  _BYTE oslog[40];
  void *v735;
  const char *v736;
  unint64_t v737;
  std::__shared_weak_count *v738;
  _BYTE v739[24];
  _BYTE *v740;
  char __src[40];
  char __s[40];
  std::string v743;
  __int128 v744;
  char *v745;
  const char *v746;
  uint64_t v747;
  std::__shared_weak_count *v748;
  _BYTE __dst[64];
  uint64_t v750;
  uint64_t v751;

  v751 = *MEMORY[0x24BDAC8D0];
  v8 = (uint64_t *)(a2 + 256);
  v665 = (uint64_t *)(a2 + 256);
  if (*a7 > *(_QWORD *)(a2 + 256))
  {
    *v8 = *a7;
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v12 = sub_2241471F8();
      v13 = v12[2];
      if (!v13)
      {
        v14 = v12;
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v13 = v14[2];
      }
      v15 = *(_QWORD *)(v13 + 64);
      v16 = (std::mutex *)(v15 + 32);
      std::mutex::lock((std::mutex *)(v15 + 32));
      v18 = *(_QWORD *)(v15 + 96);
      v17 = *(_QWORD *)(v15 + 104);
      std::mutex::unlock(v16);
      if (v18 != v17)
      {
        *(_QWORD *)&object[0] = "cv3d.recon.";
        *((_QWORD *)&object[0] + 1) = 11;
        *(_QWORD *)&object[1] = "Stats.FrameRate";
        *((_QWORD *)&object[1] + 1) = 15;
        sub_2231A9820((uint64_t)object, (uint64_t)&object[2], 0, 0, (std::string *)__dst);
        sub_2241471F8();
        v19 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19))
        {
          memset(oslog, 0, 32);
          *(_DWORD *)&oslog[32] = 728325616;
          kdebug_trace();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19))
          {
            v743.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            v743.__r_.__value_.__l.__size_ = 2;
            v20 = sub_2241471F8();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19))
            {
              v21 = (double)*v8 / 1000000000.0;
              v22 = v21 - *(float *)&dword_255794BC0;
              *(float *)&v21 = v21;
              dword_255794BC0 = LODWORD(v21);
              v23 = 1.0 / v22;
              if ((float)(1.0 / v22) > 100.0)
                v23 = 100.0;
              *(float *)object = v23;
              strcpy((char *)&__p, "PlaneDetector");
              *(_WORD *)((char *)&v728 + 7) = 269;
              sub_2231FBCB0((float *)object, &__p, (__int128 *)&v743, v722);
              if (BYTE8(v728) && SBYTE7(v728) < 0)
                operator delete((void *)__p);
              v24 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 56))(v19);
              v25 = *v24;
              v26 = (std::__shared_weak_count *)v24[1];
              if (v26)
              {
                p_shared_owners = (unint64_t *)&v26->__shared_owners_;
                do
                  v28 = __ldxr(p_shared_owners);
                while (__stxr(v28 + 1, p_shared_owners));
              }
              v29 = v722[1];
              v30 = v723.i64[0];
              *(_QWORD *)v716 = &off_24EC6A3B8;
              *(void **)&v716[8] = v722[1];
              *(_QWORD *)&v716[16] = v723.i64[0];
              v723.i64[0] = 0;
              v722[1] = 0;
              *(_QWORD *)&object[0] = v25;
              *((_QWORD *)&object[0] + 1) = v26;
              if (v26)
              {
                v31 = (unint64_t *)&v26->__shared_owners_;
                do
                  v32 = __ldxr(v31);
                while (__stxr(v32 + 1, v31));
              }
              *(_QWORD *)&object[1] = &off_24EC6A3B8;
              *((_QWORD *)&object[1] + 1) = v29;
              *(_QWORD *)&object[2] = v30;
              if (v30)
              {
                v33 = (unint64_t *)(v30 + 8);
                do
                  v34 = __ldxr(v33);
                while (__stxr(v34 + 1, v33));
              }
              (*(void (**)(uint64_t *, _OWORD *))(*v20 + 16))(v20, object);
              sub_2241231D8((uint64_t)&object[1]);
              v35 = (std::__shared_weak_count *)*((_QWORD *)&object[0] + 1);
              if (*((_QWORD *)&object[0] + 1))
              {
                v36 = (unint64_t *)(*((_QWORD *)&object[0] + 1) + 8);
                do
                  v37 = __ldaxr(v36);
                while (__stlxr(v37 - 1, v36));
                if (!v37)
                {
                  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                  std::__shared_weak_count::__release_weak(v35);
                }
              }
              sub_2241231D8((uint64_t)v716);
              if (v26)
              {
                v38 = (unint64_t *)&v26->__shared_owners_;
                do
                  v39 = __ldaxr(v38);
                while (__stlxr(v39 - 1, v38));
                if (!v39)
                {
                  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                  std::__shared_weak_count::__release_weak(v26);
                }
              }
              sub_2241231D8((uint64_t)v722);
            }
          }
          kdebug_trace();
        }
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
      }
    }
    sub_2236EC60C(&v672);
    v643 = a6;
    v649 = a3;
    if (**(int **)(*(_QWORD *)&v672 + 56) > 3
      || (v50 = *(unsigned __int8 *)(*(_QWORD *)&v672 + 72),
          v51 = sub_22322F254(*(uint64_t *)&v672, "OSLogSurrogateAppender", 1, 0),
          v52 = v51,
          !v50)
      && !v51)
    {
LABEL_315:
      v672 = COERCE_DOUBLE(v673);
      v673[0] = 0;
      v675[0] = 0;
      v675[1] = 0;
      v673[1] = 0;
      v674 = v675;
      v678 = 0;
      v676 = 0;
      v677 = 0;
      v671 = (double)*v8 / 1000000000.0;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v195 = operator new(0x30uLL);
      *v195 = &off_24EC57D60;
      v195[1] = &v671;
      v195[2] = rep;
      v195[3] = 0;
      *((_BYTE *)v195 + 32) = 1;
      v740 = v195;
      kdebug_trace();
      sub_2236F5478((uint64_t *)oslog, *a3, a3[1], 4);
      v196 = *(_QWORD *)&oslog[8];
      if (*(_QWORD *)&oslog[8])
      {
        v197 = *(float32x2_t ***)oslog;
        *(_QWORD *)v716 = *(_QWORD *)&oslog[8];
        *(_QWORD *)&v716[8] = 0;
        v717 = 0;
        *(_QWORD *)&v716[16] = 0;
        LODWORD(v718[0]) = 728309608;
        kdebug_trace();
        *((_QWORD *)&__p + 1) = 0;
        *(_QWORD *)&__p = (char *)&__p + 8;
        v729 = 0;
        v730 = 0;
        *(_QWORD *)&v728 = 0;
        *((_QWORD *)&v728 + 1) = &v729;
        v733 = 0;
        v198 = 8 * v196;
        v731 = 0;
        v732 = 0;
        do
        {
          sub_22374AFA8(*(int32x4_t **)(a2 + 232), v665, *v197, (float32x4_t *)(a2 + 272), *(_QWORD **)(a2 + 208), (uint64_t)object);
          sub_2236D2F4C((uint64_t)&__p, (uint64_t)object);
          if (*(_QWORD *)&object[3])
          {
            *((_QWORD *)&object[3] + 1) = *(_QWORD *)&object[3];
            operator delete(*(void **)&object[3]);
          }
          sub_223198030((uint64_t)&object[1] + 8, *(_QWORD **)&object[2]);
          sub_223198030((uint64_t)object, *((_QWORD **)&object[0] + 1));
          ++v197;
          v198 -= 8;
        }
        while (v198);
        v199 = a6[3];
        for (i = a6[4]; v199 != i; v199 += 84)
        {
          v201 = *(_QWORD **)(a2 + 208);
          v202 = sub_22342DA5C(v201, v199);
          if (v202)
          {
            v203 = v202[4];
            v204 = *(float32x4_t *)(a2 + 272);
            v205 = *(float32x4_t *)(a2 + 288);
            v206 = *(float32x4_t *)(a2 + 304);
            v207 = *(float32x4_t *)(a2 + 320);
            v208 = *(float32x4_t *)(v199 + 52);
            v209 = *(float32x4_t *)(v199 + 68);
            v210 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v204, COERCE_FLOAT(*(_OWORD *)(v199 + 36))), v205, *(float32x2_t *)(v199 + 36), 1), v206, *(float32x4_t *)(v199 + 36), 2), v207, *(float32x4_t *)(v199 + 36), 3);
            *(float32x4_t *)v722 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v204, COERCE_FLOAT(*(_OWORD *)(v199 + 20))), v205, *(float32x2_t *)(v199 + 20), 1), v206, *(float32x4_t *)(v199 + 20), 2), v207, *(float32x4_t *)(v199 + 20), 3);
            v723 = v210;
            v724 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v204, v208.f32[0]), v205, *(float32x2_t *)v208.f32, 1), v206, v208, 2), v207, v208, 3);
            *(float32x4_t *)v725 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v204, v209.f32[0]), v205, *(float32x2_t *)v209.f32, 1), v206, v209, 2), v207, v209, 3);
            sub_22374B324((uint64_t **)object, v203, v665, (float32x2_t *)v722, 0, (uint64_t)v201, *(int32x4_t *)v725, (int32x4_t)v205, *(double *)v206.i64, v207, v210, v724, *(float32x2_t *)v208.f32, v209);
          }
          else
          {
            *((_QWORD *)&object[0] + 1) = 0;
            *(_QWORD *)&object[1] = 0;
            memset(&object[2], 0, 32);
            *(_QWORD *)&object[0] = (char *)object + 8;
            *((_QWORD *)&object[1] + 1) = &object[2];
            v707 = 0;
          }
          sub_2236D2F4C((uint64_t)&__p, (uint64_t)object);
          if (*(_QWORD *)&object[3])
          {
            *((_QWORD *)&object[3] + 1) = *(_QWORD *)&object[3];
            operator delete(*(void **)&object[3]);
          }
          sub_223198030((uint64_t)&object[1] + 8, *(_QWORD **)&object[2]);
          sub_223198030((uint64_t)object, *((_QWORD **)&object[0] + 1));
        }
        kdebug_trace();
        a3 = v649;
        v8 = v665;
        sub_2236D2F4C((uint64_t)&v672, (uint64_t)&__p);
        if (v731)
        {
          v732 = v731;
          operator delete(v731);
        }
        sub_223198030((uint64_t)&v728 + 8, v729);
        sub_223198030((uint64_t)&__p, *((_QWORD **)&__p + 1));
        v642 = *(void **)&oslog[8];
        a6 = v643;
      }
      else
      {
        v642 = 0;
      }
      sub_2236F5478((uint64_t *)&__p, *a3, a3[1], 32);
      v211 = *((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        *(_QWORD *)v716 = *((_QWORD *)&__p + 1);
        v212 = (uint64_t *)__p;
        *(_QWORD *)&v716[8] = 0;
        v717 = 0;
        *(_QWORD *)&v716[16] = 0;
        LODWORD(v718[0]) = 728309908;
        kdebug_trace();
        v722[1] = 0;
        v722[0] = &v722[1];
        v724 = 0uLL;
        v723.i64[0] = 0;
        v723.i64[1] = (uint64_t)&v724;
        v726 = 0;
        v213 = 8 * v211;
        v725[0] = 0;
        v725[1] = 0;
        do
        {
          sub_22374C1C4(*v212, *(_QWORD *)(a2 + 208), (uint64_t)object);
          sub_2236D2F4C((uint64_t)v722, (uint64_t)object);
          if (*(_QWORD *)&object[3])
          {
            *((_QWORD *)&object[3] + 1) = *(_QWORD *)&object[3];
            operator delete(*(void **)&object[3]);
          }
          sub_223198030((uint64_t)&object[1] + 8, *(_QWORD **)&object[2]);
          sub_223198030((uint64_t)object, *((_QWORD **)&object[0] + 1));
          ++v212;
          v213 -= 8;
        }
        while (v213);
        kdebug_trace();
        sub_2236D2F4C((uint64_t)&v672, (uint64_t)v722);
        v8 = v665;
        if (v725[0])
        {
          v725[1] = v725[0];
          operator delete(v725[0]);
        }
        sub_223198030((uint64_t)&v723.i64[1], v724.i64[0]);
        sub_223198030((uint64_t)v722, (_QWORD *)v722[1]);
        v641 = *((_QWORD *)&__p + 1);
      }
      else
      {
        v641 = 0;
      }
      sub_2236F5478((uint64_t *)v722, *a3, a3[1], 16);
      v214 = v722[1];
      if (v722[1])
      {
        v215 = (unsigned __int8 **)v722[0];
        *(_OWORD *)__dst = (unint64_t)v722[1];
        *(_OWORD *)&__dst[16] = 0uLL;
        *(_DWORD *)&__dst[32] = 728309600;
        kdebug_trace();
        *(_QWORD *)&v716[8] = 0;
        *(_QWORD *)v716 = &v716[8];
        v718[0] = 0;
        v718[1] = 0;
        *(_QWORD *)&v716[16] = 0;
        v717 = v718;
        v721 = 0;
        v216 = 8 * (_QWORD)v214;
        v719 = 0;
        v720 = 0;
        do
        {
          sub_22374CF38(*v215, *(_QWORD **)(a2 + 208), (uint64_t)object);
          sub_2236D2F4C((uint64_t)v716, (uint64_t)object);
          if (*(_QWORD *)&object[3])
          {
            *((_QWORD *)&object[3] + 1) = *(_QWORD *)&object[3];
            operator delete(*(void **)&object[3]);
          }
          sub_223198030((uint64_t)&object[1] + 8, *(_QWORD **)&object[2]);
          sub_223198030((uint64_t)object, *((_QWORD **)&object[0] + 1));
          ++v215;
          v216 -= 8;
        }
        while (v216);
        kdebug_trace();
        sub_2236D2F4C((uint64_t)&v672, (uint64_t)v716);
        v8 = v665;
        if (v719)
        {
          v720 = v719;
          operator delete(v719);
        }
        sub_223198030((uint64_t)&v717, v718[0]);
        sub_223198030((uint64_t)v716, *(_QWORD **)&v716[8]);
        v640 = (_QWORD **)v722[1];
      }
      else
      {
        v640 = 0;
      }
      sub_2236F5478((uint64_t *)v716, *a3, a3[1], 8);
      v217 = operator new();
      *(_QWORD *)(v217 + 128) = 0;
      *(_OWORD *)(v217 + 96) = 0u;
      *(_OWORD *)(v217 + 112) = 0u;
      *(_OWORD *)(v217 + 64) = 0u;
      *(_OWORD *)(v217 + 80) = 0u;
      *(_OWORD *)(v217 + 32) = 0u;
      *(_OWORD *)(v217 + 48) = 0u;
      *(_OWORD *)v217 = 0u;
      *(_OWORD *)(v217 + 16) = 0u;
      sub_22370F510(v217);
      *(_OWORD *)(v217 + 72) = 0u;
      *(_OWORD *)(v217 + 56) = 0u;
      *(_DWORD *)(v217 + 88) = 1065353216;
      *(_OWORD *)(v217 + 96) = 0u;
      *(_OWORD *)(v217 + 112) = 0u;
      *(_DWORD *)(v217 + 128) = 1065353216;
      v670 = (uint64_t *)v217;
      if (!*(_QWORD *)&v716[8])
      {
LABEL_443:
        v639 = *(_QWORD *)&v716[8];
        sub_2236BC304(v8, *(_QWORD **)(a2 + 208), (uint64_t)&v672, *(unsigned __int8 *)(a2 + 56), *(_DWORD *)(a2 + 60) != 0, (_QWORD *)(a2 + 8), (uint64_t **)object);
        sub_2236D2F4C((uint64_t)&v672, (uint64_t)object);
        if (*(_QWORD *)&object[3])
        {
          *((_QWORD *)&object[3] + 1) = *(_QWORD *)&object[3];
          operator delete(*(void **)&object[3]);
        }
        sub_223198030((uint64_t)&object[1] + 8, *(_QWORD **)&object[2]);
        sub_223198030((uint64_t)object, *((_QWORD **)&object[0] + 1));
        v271 = (_OWORD *)*a6;
        v272 = (_OWORD *)a6[1];
        *(_OWORD *)v667 = 0u;
        *(_OWORD *)v668 = 0u;
        for (j = 1065353216; v271 != v272; ++v271)
          sub_223340BF8((uint64_t)v667, (uint64_t)v271, v271);
        if (*(_QWORD *)&v716[8])
        {
          v273 = *(uint64_t **)v716;
          v274 = 8 * *(_QWORD *)&v716[8];
          do
          {
            sub_223340BF8((uint64_t)v667, *v273, (_OWORD *)*v273);
            ++v273;
            v274 -= 8;
          }
          while (v274);
        }
        if (*(_QWORD *)&oslog[8])
        {
          v275 = *(uint64_t **)oslog;
          v276 = 8 * *(_QWORD *)&oslog[8];
          do
          {
            sub_223340BF8((uint64_t)v667, *v275, (_OWORD *)*v275);
            ++v275;
            v276 -= 8;
          }
          while (v276);
        }
        v695 = 0;
        v694 = 0;
        v693 = &v694;
        sub_2236C4048(&v693, *(_QWORD **)&v672, v270, v673);
        sub_2236FE590(a2, &v693, (uint64_t)&v672);
        if (v668[1] && v695)
        {
          kdebug_trace();
          v633 = a1;
          sub_2236B6CC8(*(_QWORD *)(a2 + 208), v667, (uint64_t)&v693, (uint64_t *)&v691);
          v277 = (unsigned __int8 *)v691;
          v662 = v692;
          if (v691 != v692)
          {
            v690 = 0;
            v689 = 0;
            v688 = (uint64_t *)&v689;
            while (1)
            {
              sub_2236EC60C(&v705);
              if (**(int **)(v705 + 56) <= 3)
              {
                v278 = *(unsigned __int8 *)(v705 + 72);
                v279 = sub_22322F254(v705, "OSLogSurrogateAppender", 1, 0);
                v280 = v279;
                if (v278 || v279 != 0)
                  break;
              }
LABEL_590:
              v354 = sub_22342DA5C((_QWORD *)(*(_QWORD *)(a2 + 208) + 40), (uint64_t)(v277 + 16));
              v8 = v665;
              if (v354)
                v355 = (_OWORD *)v354[4];
              else
                v355 = 0;
              v356 = sub_22342DA5C((_QWORD *)(*(_QWORD *)(a2 + 208) + 40), (uint64_t)v277);
              sub_2236CE7A8(*(_QWORD ***)(a2 + 240), v355, v356[4], v665, (uint64_t)object);
              sub_2236D2F4C((uint64_t)&v672, (uint64_t)object);
              if (*(_QWORD *)&object[3])
              {
                *((_QWORD *)&object[3] + 1) = *(_QWORD *)&object[3];
                operator delete(*(void **)&object[3]);
              }
              sub_223198030((uint64_t)&object[1] + 8, *(_QWORD **)&object[2]);
              sub_223198030((uint64_t)object, *((_QWORD **)&object[0] + 1));
              sub_22372D6F4(*(_QWORD **)(a2 + 208), *(_QWORD *)v277, *((_QWORD *)v277 + 1));
              v357 = v689;
              v358 = &v689;
              v359 = &v689;
              if (!v689)
                goto LABEL_634;
              v360 = v277[16];
              do
              {
                while (1)
                {
                  v358 = (uint64_t **)v357;
                  v361 = *((unsigned __int8 *)v357 + 25);
                  v362 = v360 >= v361;
                  if (v360 != v361)
                  {
                    v363 = v277[16];
                    goto LABEL_629;
                  }
                  v363 = v277[17];
                  v361 = *((unsigned __int8 *)v358 + 26);
                  v362 = v363 >= v361;
                  if (v363 == v361)
                  {
                    v363 = v277[18];
                    v361 = *((unsigned __int8 *)v358 + 27);
                    v362 = v363 >= v361;
                    if (v363 == v361)
                    {
                      v363 = v277[19];
                      v361 = *((unsigned __int8 *)v358 + 28);
                      v362 = v363 >= v361;
                      if (v363 == v361)
                        break;
                    }
                  }
LABEL_629:
                  if (v362)
                    goto LABEL_631;
LABEL_597:
                  v357 = *v358;
                  v359 = v358;
                  if (!*v358)
                    goto LABEL_634;
                }
                v364 = v277[20];
                v365 = *((unsigned __int8 *)v358 + 29);
                if (v364 != v365)
                  goto LABEL_614;
                v364 = v277[21];
                v365 = *((unsigned __int8 *)v358 + 30);
                if (v364 != v365)
                  goto LABEL_614;
                v364 = v277[22];
                v365 = *((unsigned __int8 *)v358 + 31);
                if (v364 != v365)
                  goto LABEL_614;
                v364 = v277[23];
                v365 = *((unsigned __int8 *)v358 + 32);
                if (v364 != v365)
                  goto LABEL_614;
                v364 = v277[24];
                v365 = *((unsigned __int8 *)v358 + 33);
                if (v364 != v365)
                  goto LABEL_614;
                v364 = v277[25];
                v365 = *((unsigned __int8 *)v358 + 34);
                if (v364 != v365)
                  goto LABEL_614;
                v364 = v277[26];
                v365 = *((unsigned __int8 *)v358 + 35);
                if (v364 != v365)
                  goto LABEL_614;
                v364 = v277[27];
                v365 = *((unsigned __int8 *)v358 + 36);
                if (v364 != v365)
                  goto LABEL_614;
                v364 = v277[28];
                v365 = *((unsigned __int8 *)v358 + 37);
                if (v364 != v365
                  || (v364 = v277[29], v365 = *((unsigned __int8 *)v358 + 38), v364 != v365)
                  || (v364 = v277[30], v365 = *((unsigned __int8 *)v358 + 39), v364 != v365)
                  || (v364 = v277[31], v365 = *((unsigned __int8 *)v358 + 40), v364 != v365))
                {
LABEL_614:
                  if (v364 < v365)
                    goto LABEL_597;
                }
                v361 = *((unsigned __int8 *)v358 + 29);
                v363 = v277[20];
                if (v361 == v363)
                {
                  v361 = *((unsigned __int8 *)v358 + 30);
                  v363 = v277[21];
                  if (v361 == v363)
                  {
                    v361 = *((unsigned __int8 *)v358 + 31);
                    v363 = v277[22];
                    if (v361 == v363)
                    {
                      v361 = *((unsigned __int8 *)v358 + 32);
                      v363 = v277[23];
                      if (v361 == v363)
                      {
                        v361 = *((unsigned __int8 *)v358 + 33);
                        v363 = v277[24];
                        if (v361 == v363)
                        {
                          v361 = *((unsigned __int8 *)v358 + 34);
                          v363 = v277[25];
                          if (v361 == v363)
                          {
                            v361 = *((unsigned __int8 *)v358 + 35);
                            v363 = v277[26];
                            if (v361 == v363)
                            {
                              v361 = *((unsigned __int8 *)v358 + 36);
                              v363 = v277[27];
                              if (v361 == v363)
                              {
                                v361 = *((unsigned __int8 *)v358 + 37);
                                v363 = v277[28];
                                if (v361 == v363)
                                {
                                  v361 = *((unsigned __int8 *)v358 + 38);
                                  v363 = v277[29];
                                  if (v361 == v363)
                                  {
                                    v361 = *((unsigned __int8 *)v358 + 39);
                                    v363 = v277[30];
                                    if (v361 == v363)
                                    {
                                      v361 = *((unsigned __int8 *)v358 + 40);
                                      v363 = v277[31];
                                      if (v361 == v363)
                                        goto LABEL_458;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
LABEL_631:
                if (v361 >= v363)
                  goto LABEL_458;
                v357 = v358[1];
              }
              while (v357);
              v359 = v358 + 1;
LABEL_634:
              v366 = (char *)operator new(0x30uLL);
              *(_OWORD *)(v366 + 25) = *((_OWORD *)v277 + 1);
              *(_QWORD *)v366 = 0;
              *((_QWORD *)v366 + 1) = 0;
              *((_QWORD *)v366 + 2) = v358;
              *v359 = (uint64_t *)v366;
              if (*v688)
              {
                v688 = (uint64_t *)*v688;
                v366 = (char *)*v359;
              }
              sub_2231A9A8C(v689, (uint64_t *)v366);
              ++v690;
LABEL_458:
              v277 += 32;
              if (v277 == v662)
              {
                sub_2236FE590(a2, &v688, (uint64_t)&v672);
                sub_223198030((uint64_t)&v688, v689);
                goto LABEL_646;
              }
            }
            *(_QWORD *)__dst = &v705;
            *(std::chrono::steady_clock::time_point *)&__dst[8] = std::chrono::steady_clock::now();
            *(std::chrono::system_clock::time_point *)&__dst[16] = std::chrono::system_clock::now();
            *(_DWORD *)&__dst[24] = 3;
            *(_QWORD *)&__dst[32] = "unknown file";
            *(_DWORD *)&__dst[40] = 771;
            *(_QWORD *)&__dst[48] = "unknown function";
            *(_QWORD *)&__dst[56] = 0;
            v750 = 0;
            sub_2245664AC(v277, __s);
            sub_2245664AC(v277 + 16, __src);
            v282 = (const char *)(**(_QWORD **)__dst + 16);
            v646 = **(_QWORD **)__dst;
            v644 = v282;
            if (*(char *)(**(_QWORD **)__dst + 39) < 0)
            {
              v282 = *(const char **)(v646 + 16);
              v283 = *(_QWORD *)(v646 + 24);
              v285 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v285 & 1) != 0)
                goto LABEL_468;
            }
            else
            {
              v283 = *(unsigned __int8 *)(**(_QWORD **)__dst + 39);
              v284 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v284 & 1) != 0)
                goto LABEL_468;
            }
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)&v743);
              sub_223199C58("com.apple.cv3d", (unint64_t)&v743, &xmmword_255788F40);
              if ((_BYTE)v744 && SHIBYTE(v743.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v743.__r_.__value_.__l.__data_);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
              a6 = v643;
            }
LABEL_468:
            if (byte_255788F57 >= 0)
              v286 = (const char *)&xmmword_255788F40;
            else
              v286 = (const char *)xmmword_255788F40;
            if (byte_255788F57 >= 0)
              v287 = byte_255788F57;
            else
              v287 = *((_QWORD *)&xmmword_255788F40 + 1);
            *(_QWORD *)&object[0] = os_log_create(v286, v282);
            if (v287 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v287 >= 0x17)
            {
              v289 = (v287 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v287 | 7) != 0x17)
                v289 = v287 | 7;
              v290 = v289 + 1;
              v288 = (char *)operator new(v289 + 1);
              *((_QWORD *)&object[1] + 1) = v290 | 0x8000000000000000;
              *((_QWORD *)&object[0] + 1) = v288;
              *(_QWORD *)&object[1] = v287;
              a6 = v643;
            }
            else
            {
              HIBYTE(object[1]) = v287;
              v288 = (char *)object + 8;
              if (!v287)
              {
LABEL_482:
                v288[v287] = 0;
                LOBYTE(object[2]) = 1;
                if (v283 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                a3 = v649;
                if (v283 >= 0x17)
                {
                  v293 = (v283 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v283 | 7) != 0x17)
                    v293 = v283 | 7;
                  v294 = v293 + 1;
                  v291 = (char *)operator new(v293 + 1);
                  *((_QWORD *)&object[3] + 1) = v294 | 0x8000000000000000;
                  *((_QWORD *)&object[2] + 1) = v291;
                  *(_QWORD *)&object[3] = v283;
                }
                else
                {
                  HIBYTE(object[3]) = v283;
                  v291 = (char *)&object[2] + 8;
                  if (!v283)
                  {
                    BYTE8(object[2]) = 0;
                    LOBYTE(v707) = 1;
                    v292 = *(NSObject **)&object[0];
                    if ((SHIBYTE(object[3]) & 0x80000000) == 0)
                      goto LABEL_486;
                    goto LABEL_492;
                  }
                }
                memmove(v291, v282, v283);
                v291[v283] = 0;
                LOBYTE(v707) = 1;
                v292 = *(NSObject **)&object[0];
                if ((SHIBYTE(object[3]) & 0x80000000) == 0)
                {
LABEL_486:
                  if (!LOBYTE(object[2]))
                    goto LABEL_495;
                  goto LABEL_493;
                }
LABEL_492:
                operator delete(*((void **)&object[2] + 1));
                if (!LOBYTE(object[2]))
                  goto LABEL_495;
LABEL_493:
                if (SHIBYTE(object[1]) < 0)
                  operator delete(*((void **)&object[0] + 1));
LABEL_495:
                if (*(_QWORD *)&object[0])
                  os_release(*(void **)&object[0]);
                if (!v280 || !*(_QWORD *)(v280 + 24))
                {
                  os_log_type_enabled(v292, OS_LOG_TYPE_INFO);
                  *(_QWORD *)&object[0] = 0xD04100402;
                  WORD4(object[0]) = 2080;
                  *(_QWORD *)((char *)object + 10) = __s;
                  WORD1(object[1]) = 1040;
                  DWORD1(object[1]) = 13;
                  WORD4(object[1]) = 2080;
                  *(_QWORD *)((char *)&object[1] + 10) = __src;
                  v301 = (void *)_os_log_send_and_compose_impl();
                  if (v301)
                  {
                    free(v301);
                    if (!v278)
                      goto LABEL_585;
                    goto LABEL_584;
                  }
                  goto LABEL_583;
                }
                v295 = _os_log_pack_size();
                v296 = operator new(v295, (std::align_val_t)8uLL);
                v297 = (_QWORD *)operator new();
                *v297 = &off_24EC1F7F0;
                v297[1] = 0;
                v297[2] = 0;
                v297[3] = v296;
                v696.__r_.__value_.__r.__words[0] = (std::string::size_type)v296;
                v696.__r_.__value_.__l.__size_ = (std::string::size_type)v296;
                v696.__r_.__value_.__r.__words[2] = (std::string::size_type)v297;
                v697 = 0;
                v698 = 0;
                v298 = strlen(__s);
                if (v298 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v299 = v298;
                if (v298 >= 0x17)
                {
                  v302 = (v298 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v298 | 7) != 0x17)
                    v302 = v298 | 7;
                  v303 = v302 + 1;
                  v300 = (double *)operator new(v302 + 1);
                  *((_QWORD *)&v702 + 1) = v303 | 0x8000000000000000;
                  v701 = *(double *)&v300;
                  *(_QWORD *)&v702 = v299;
                }
                else
                {
                  HIBYTE(v702) = v298;
                  v300 = &v701;
                  if (!v298)
                  {
LABEL_510:
                    *((_BYTE *)v300 + v299) = 0;
                    v304 = strlen(__src);
                    if (v304 > 0x7FFFFFFFFFFFFFF7)
                      sub_22316DBC0();
                    v305 = v304;
                    if (v304 >= 0x17)
                    {
                      v307 = (v304 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v304 | 7) != 0x17)
                        v307 = v304 | 7;
                      v308 = v307 + 1;
                      v306 = (uint64_t *)operator new(v307 + 1);
                      *((_QWORD *)&v700 + 1) = v308 | 0x8000000000000000;
                      v699 = (uint64_t)v306;
                      *(_QWORD *)&v700 = v305;
                    }
                    else
                    {
                      HIBYTE(v700) = v304;
                      v306 = &v699;
                      if (!v304)
                        goto LABEL_518;
                    }
                    memcpy(v306, __src, v305);
LABEL_518:
                    *((_BYTE *)v306 + v305) = 0;
                    *(_QWORD *)&object[1] = v702;
                    *(_QWORD *)((char *)&object[1] + 7) = *(_QWORD *)((char *)&v702 + 7);
                    *((_QWORD *)&object[2] + 1) = v700;
                    *(_QWORD *)((char *)&object[2] + 15) = *(_QWORD *)((char *)&v700 + 7);
                    *(_QWORD *)&object[0] = off_24EC20780;
                    *((double *)object + 1) = v701;
                    HIBYTE(object[1]) = HIBYTE(v702);
                    *(_QWORD *)&object[2] = v699;
                    BYTE7(object[3]) = HIBYTE(v700);
                    v309 = (char *)operator new(0x50uLL);
                    *((_QWORD *)v309 + 1) = 0;
                    *((_QWORD *)v309 + 2) = 0;
                    *((_QWORD *)v309 + 3) = off_24EC20780;
                    *(_QWORD *)v309 = &off_24EC20730;
                    *((_OWORD *)v309 + 2) = *(_OWORD *)((char *)object + 8);
                    *((_QWORD *)v309 + 6) = *((_QWORD *)&object[1] + 1);
                    memset((char *)object + 8, 0, 24);
                    *(_OWORD *)(v309 + 56) = object[2];
                    *((_QWORD *)v309 + 9) = *(_QWORD *)&object[3];
                    memset(&object[2], 0, 24);
                    v310 = v698;
                    v697 = v309 + 24;
                    v698 = (std::__shared_weak_count *)v309;
                    if (!v310)
                      goto LABEL_522;
                    v311 = (unint64_t *)&v310->__shared_owners_;
                    do
                      v312 = __ldaxr(v311);
                    while (__stlxr(v312 - 1, v311));
                    if (!v312)
                    {
                      ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
                      std::__shared_weak_count::__release_weak(v310);
                      if ((SBYTE7(object[3]) & 0x80000000) == 0)
                      {
LABEL_523:
                        if ((SHIBYTE(object[1]) & 0x80000000) == 0)
                          goto LABEL_524;
                        goto LABEL_528;
                      }
                    }
                    else
                    {
LABEL_522:
                      if ((SBYTE7(object[3]) & 0x80000000) == 0)
                        goto LABEL_523;
                    }
                    operator delete(*(void **)&object[2]);
                    if ((SHIBYTE(object[1]) & 0x80000000) == 0)
                    {
LABEL_524:
                      v743 = v696;
                      v313 = v697;
                      v314 = v696.__r_.__value_.__r.__words[2];
                      if (!v696.__r_.__value_.__r.__words[2])
                        goto LABEL_531;
                      goto LABEL_529;
                    }
LABEL_528:
                    operator delete(*((void **)&object[0] + 1));
                    v743 = v696;
                    v313 = v697;
                    v314 = v696.__r_.__value_.__r.__words[2];
                    if (!v696.__r_.__value_.__r.__words[2])
                      goto LABEL_531;
LABEL_529:
                    v315 = (unint64_t *)(v314 + 8);
                    do
                      v316 = __ldxr(v315);
                    while (__stxr(v316 + 1, v315));
LABEL_531:
                    v317 = v698;
                    *(_QWORD *)&v744 = v313;
                    *((_QWORD *)&v744 + 1) = v698;
                    if (v698)
                    {
                      v318 = (unint64_t *)&v698->__shared_owners_;
                      do
                        v319 = __ldxr(v318);
                      while (__stxr(v319 + 1, v318));
                      v745 = v313;
                      do
                        v320 = __ldaxr(v318);
                      while (__stlxr(v320 - 1, v318));
                      if (!v320)
                      {
                        ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
                        std::__shared_weak_count::__release_weak(v317);
                      }
                    }
                    else
                    {
                      v745 = v313;
                    }
                    v321 = (std::__shared_weak_count *)v696.__r_.__value_.__r.__words[2];
                    if (v696.__r_.__value_.__r.__words[2])
                    {
                      v322 = (unint64_t *)(v696.__r_.__value_.__r.__words[2] + 8);
                      do
                        v323 = __ldaxr(v322);
                      while (__stlxr(v323 - 1, v322));
                      if (!v323)
                      {
                        ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
                        std::__shared_weak_count::__release_weak(v321);
                      }
                    }
                    v324 = v743.__r_.__value_.__r.__words[0];
                    if (v745[31] >= 0)
                      v325 = v745 + 8;
                    else
                      v325 = (char *)*((_QWORD *)v745 + 1);
                    if (v745[55] >= 0)
                      v326 = v745 + 32;
                    else
                      v326 = (char *)*((_QWORD *)v745 + 4);
                    v327 = _os_log_pack_fill();
                    *(_DWORD *)v327 = 68158466;
                    *(_DWORD *)(v327 + 4) = 13;
                    *(_WORD *)(v327 + 8) = 2080;
                    *(_QWORD *)(v327 + 10) = v325;
                    *(_WORD *)(v327 + 18) = 1040;
                    *(_DWORD *)(v327 + 20) = 13;
                    *(_WORD *)(v327 + 24) = 2080;
                    *(_QWORD *)(v327 + 26) = v326;
                    v328 = operator new();
                    v329 = *(unsigned __int8 *)(v646 + 39);
                    v330 = v644;
                    if ((v329 & 0x80u) != 0)
                    {
                      v330 = *(const char **)(v646 + 16);
                      v329 = *(_QWORD *)(v646 + 24);
                    }
                    *(_QWORD *)v328 = v324;
                    *(_OWORD *)(v328 + 8) = *(_OWORD *)&v743.__r_.__value_.__r.__words[1];
                    *(_OWORD *)&v743.__r_.__value_.__r.__words[1] = 0uLL;
                    *(_OWORD *)(v328 + 24) = v744;
                    v744 = 0uLL;
                    *(_QWORD *)(v328 + 40) = v330;
                    *(_QWORD *)(v328 + 48) = v329;
                    *(_BYTE *)(v328 + 56) = 1;
                    v696.__r_.__value_.__r.__words[0] = 0;
                    *(_QWORD *)&object[0] = v328;
                    (*(void (**)(_QWORD, _OWORD *))(**(_QWORD **)(v280 + 24) + 40))(*(_QWORD *)(v280 + 24), object);
                    v331 = *(_QWORD *)&object[0];
                    *(_QWORD *)&object[0] = 0;
                    if (v331)
                    {
                      v332 = *(std::__shared_weak_count **)(v331 + 32);
                      if (v332)
                      {
                        v333 = (unint64_t *)&v332->__shared_owners_;
                        do
                          v334 = __ldaxr(v333);
                        while (__stlxr(v334 - 1, v333));
                        if (!v334)
                        {
                          ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
                          std::__shared_weak_count::__release_weak(v332);
                        }
                      }
                      v335 = *(std::__shared_weak_count **)(v331 + 16);
                      if (v335)
                      {
                        v336 = (unint64_t *)&v335->__shared_owners_;
                        do
                          v337 = __ldaxr(v336);
                        while (__stlxr(v337 - 1, v336));
                        if (!v337)
                        {
                          ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
                          std::__shared_weak_count::__release_weak(v335);
                        }
                      }
                      MEMORY[0x227684CE8](v331, 0x10F0C40B62ED6C6);
                      v338 = v696.__r_.__value_.__r.__words[0];
                      v696.__r_.__value_.__r.__words[0] = 0;
                      if (v338)
                      {
                        v339 = *(std::__shared_weak_count **)(v338 + 32);
                        if (v339)
                        {
                          v340 = (unint64_t *)&v339->__shared_owners_;
                          do
                            v341 = __ldaxr(v340);
                          while (__stlxr(v341 - 1, v340));
                          if (!v341)
                          {
                            ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
                            std::__shared_weak_count::__release_weak(v339);
                          }
                        }
                        v342 = *(std::__shared_weak_count **)(v338 + 16);
                        if (v342)
                        {
                          v343 = (unint64_t *)&v342->__shared_owners_;
                          do
                            v344 = __ldaxr(v343);
                          while (__stlxr(v344 - 1, v343));
                          if (!v344)
                          {
                            ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
                            std::__shared_weak_count::__release_weak(v342);
                          }
                        }
                        MEMORY[0x227684CE8](v338, 0x10F0C40B62ED6C6);
                      }
                    }
                    v345 = (std::__shared_weak_count *)*((_QWORD *)&v744 + 1);
                    if (!*((_QWORD *)&v744 + 1))
                      goto LABEL_579;
                    v346 = (unint64_t *)(*((_QWORD *)&v744 + 1) + 8);
                    do
                      v347 = __ldaxr(v346);
                    while (__stlxr(v347 - 1, v346));
                    if (!v347)
                    {
                      ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
                      std::__shared_weak_count::__release_weak(v345);
                      v348 = (std::__shared_weak_count *)v743.__r_.__value_.__r.__words[2];
                      if (!v743.__r_.__value_.__r.__words[2])
                        goto LABEL_583;
                    }
                    else
                    {
LABEL_579:
                      v348 = (std::__shared_weak_count *)v743.__r_.__value_.__r.__words[2];
                      if (!v743.__r_.__value_.__r.__words[2])
                        goto LABEL_583;
                    }
                    v349 = (unint64_t *)&v348->__shared_owners_;
                    do
                      v350 = __ldaxr(v349);
                    while (__stlxr(v350 - 1, v349));
                    if (!v350)
                    {
                      ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
                      std::__shared_weak_count::__release_weak(v348);
                      if (!v278)
                        goto LABEL_585;
                      goto LABEL_584;
                    }
LABEL_583:
                    if (!v278)
                    {
LABEL_585:
                      sub_223182C08((uint64_t)__dst);
                      v351 = (std::__shared_weak_count *)v750;
                      if (v750)
                      {
                        v352 = (unint64_t *)(v750 + 8);
                        do
                          v353 = __ldaxr(v352);
                        while (__stlxr(v353 - 1, v352));
                        if (!v353)
                        {
                          ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
                          std::__shared_weak_count::__release_weak(v351);
                        }
                      }
                      goto LABEL_590;
                    }
LABEL_584:
                    sub_2245664AC(v277, object);
                    sub_2245664AC(v277 + 16, &v743);
                    sub_22322C138((uint64_t)__dst, "Global plane %.13s merged into %.13s", (const char *)object, (const char *)&v743);
                    sub_223182C08((uint64_t)__dst);
                    goto LABEL_585;
                  }
                }
                memcpy(v300, __s, v299);
                goto LABEL_510;
              }
            }
            memmove(v288, v286, v287);
            goto LABEL_482;
          }
LABEL_646:
          kdebug_trace();
          a1 = v633;
          if (v691)
          {
            v692 = (unsigned __int8 *)v691;
            operator delete(v691);
          }
        }
        sub_223198030((uint64_t)&v693, v694);
        sub_2236EEBF4((uint64_t)object, a2, v8, (uint64_t)&v672, (unsigned __int8 **)a3, &v670, (uint64_t)a4, a5);
        if (*(_BYTE *)(a2 + 80))
          sub_22373300C(*(_QWORD **)(a2 + 208), *(unsigned __int8 *)(a2 + 64), v8, *(double *)(a2 + 72));
        sub_224569D7C();
        sub_224569A80();
        has_internal_diagnostics = os_variant_has_internal_diagnostics();
        v368 = atomic_load((unsigned __int8 *)&qword_255795030);
        if (has_internal_diagnostics)
        {
          if ((v368 & 1) == 0 && __cxa_guard_acquire(&qword_255795030))
          {
            sub_22379785C(&qword_255795020);
            __cxa_atexit((void (*)(void *))sub_2232D88EC, &qword_255795020, &dword_22314D000);
            __cxa_guard_release(&qword_255795030);
            a6 = v643;
            a3 = v649;
            v8 = v665;
          }
          sub_223799184(qword_255795020, object);
        }
        else
        {
          if ((v368 & 1) == 0 && __cxa_guard_acquire(&qword_255795030))
          {
            sub_22379785C(&qword_255795020);
            __cxa_atexit((void (*)(void *))sub_2232D88EC, &qword_255795020, &dword_22314D000);
            __cxa_guard_release(&qword_255795030);
            a6 = v643;
            a3 = v649;
            v8 = v665;
          }
          sub_223799340(qword_255795020, object);
        }
        if (a5)
        {
          v369.i64[0] = *(_QWORD *)(a2 + 320);
          v369.i32[2] = *(_DWORD *)(a2 + 328);
          v634 = v369;
          v635 = *(float32x2_t *)(a2 + 272);
          v638 = *(float *)(a2 + 280);
          v636 = *(float32x2_t *)(a2 + 288);
          v645 = *(float *)(a2 + 296);
          v370 = *(float32x2_t *)(a2 + 304);
          v637 = v370;
          v370.i32[0] = *(_DWORD *)(a2 + 312);
          v647 = v370;
          v648 = a4[97];
          v654 = a4[98];
          v658 = a4[99];
          v663 = a4[100];
          v371 = atomic_load((unsigned __int8 *)&qword_255795030);
          if ((v371 & 1) == 0 && __cxa_guard_acquire(&qword_255795030))
          {
            sub_22379785C(&qword_255795020);
            __cxa_atexit((void (*)(void *))sub_2232D88EC, &qword_255795020, &dword_22314D000);
            __cxa_guard_release(&qword_255795030);
            a6 = v643;
            a3 = v649;
            v8 = v665;
          }
          v372 = qword_255795020;
          std::mutex::lock((std::mutex *)(qword_255795020 + 8));
          v373 = (int8x16_t)vnegq_f32(v634);
          v374 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v635, (int32x2_t)v636), *(float *)v373.i32), (float32x2_t)vzip2_s32((int32x2_t)v635, (int32x2_t)v636), *(float32x2_t *)v634.f32, 1), (float32x2_t)__PAIR64__(LODWORD(v645), LODWORD(v638)), v634, 2);
          LODWORD(v375) = vmla_f32(vmls_lane_f32(vmul_f32(v637, *(float32x2_t *)v373.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v637, 1), *(float32x2_t *)v634.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v373, v373, 8uLL), v647).u32[0];
          v373.i32[3] = 0;
          v376 = (int32x4_t)vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v648, v635.f32[0]), v654, v636.f32[0]), v658, v637.f32[0]), (float32x4_t)0, v663);
          v377 = (int32x4_t)vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v648, v635, 1), v654, v636, 1), v658, v637, 1), (float32x4_t)0, v663);
          v378 = (int8x16_t)vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v648, v638), v654, v645), v658, v647.f32[0]), (float32x4_t)0, v663);
          v379 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v648, v374.f32[0]), v654, v374, 1), v658, v375);
          *(_QWORD *)&v380 = vzip1q_s32(v376, v377).u64[0];
          *((_QWORD *)&v380 + 1) = v378.u32[0];
          v381 = vaddq_f32(v663, v379);
          v381.i64[0] ^= 0x8000000080000000;
          v382 = (int8x16_t)vtrn2q_s32(v376, v377);
          v382.i32[2] = v378.i32[1];
          v383 = vzip2q_s32(v376, v377);
          v384 = v383;
          v384.i32[2] = v378.i32[2];
          *(float32x2_t *)&v385 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)&v380, v381.f32[0]), *(float32x2_t *)v382.i8, *(float32x2_t *)v381.f32, 1), *(float32x2_t *)v383.i8, COERCE_FLOAT(v381.i32[2] ^ 0x80000000));
          *((_QWORD *)&v385 + 1) = __PAIR64__(1.0, vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v378.i8, *(float32x2_t *)v381.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v381.f32, 1), *(float32x2_t *)v378.i8, 1), (float32x2_t)(v381.i64[1] ^ 0xFFFFFFFF80000000), (float32x2_t)*(_OWORD *)&vextq_s8(v378, v378, 8uLL)).u32[0]);
          v373.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v382, 0).i32[3];
          *(uint64_t *)((char *)v373.i64 + 4) = vextq_s8(v382, (int8x16_t)0, 4uLL).u64[0];
          v384.i64[1] = vdupq_laneq_s32(v384, 2).u32[0];
          v386 = *(unsigned __int8 *)(v372 + 160);
          *(_OWORD *)(v372 + 96) = v380;
          *(int8x16_t *)(v372 + 112) = v373;
          *(int32x4_t *)(v372 + 128) = v384;
          *(_OWORD *)(v372 + 144) = v385;
          if (!v386)
            *(_BYTE *)(v372 + 160) = 1;
          std::mutex::unlock((std::mutex *)(v372 + 8));
        }
        v387 = *(_QWORD *)(a2 + 264);
        if (v387)
        {
          v388 = *(_QWORD *)(a2 + 208);
          v389 = sub_22375FF84(v387, v388, (uint64_t)a4, a5, v8);
          sub_2237610CC(v389, v388, (uint64_t)&v672);
          sub_223761AE8(v390, v388);
        }
        v391 = 0xCF3CF3CF3CF3CF3DLL * ((a6[4] - a6[3]) >> 2);
        v392 = (a6[1] - *a6) >> 4;
        v701 = v671;
        v699 = v641;
        v693 = v640;
        v691 = v642;
        v688 = (uint64_t *)v639;
        v705 = v391;
        v704 = v392;
        sub_22328CE6C("cv3d.recon.", (const char *)&off_24EC57BA0);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v393 = sub_2241471F8();
          v394 = v393[2];
          if (!v394)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v394 = v393[2];
          }
          v395 = *(_QWORD *)(v394 + 64);
          v396 = (std::mutex *)(v395 + 32);
          std::mutex::lock((std::mutex *)(v395 + 32));
          v398 = *(_QWORD *)(v395 + 96);
          v397 = *(_QWORD *)(v395 + 104);
          std::mutex::unlock(v396);
          if (v398 != v397)
          {
            v399 = HIBYTE(v743.__r_.__value_.__r.__words[2]);
            v400 = (std::string *)v743.__r_.__value_.__r.__words[0];
            sub_2241471F8();
            v401 = v399 >= 0 ? &v743 : v400;
            v402 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v401);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v402 + 24))(v402))
            {
              memset(__dst, 0, 32);
              *(_DWORD *)&__dst[32] = 728325608;
              kdebug_trace();
              sub_2237009B0((double *)&qword_255788F20, v402, (uint64_t *)&v701, "FrameTime");
              kdebug_trace();
            }
          }
        }
        memset(__dst, 0, 32);
        *(_DWORD *)&__dst[32] = 728325624;
        kdebug_trace();
        size = HIBYTE(v743.__r_.__value_.__r.__words[2]);
        if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v743.__r_.__value_.__l.__size_;
        if (size >= 0x11)
        {
          v404 = &v743;
          if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v404 = (std::string *)v743.__r_.__value_.__r.__words[0];
          v405 = v404->__r_.__value_.__r.__words[0];
          v406 = v404->__r_.__value_.__l.__size_;
          v407 = v404->__r_.__value_.__s.__data_[16];
          if (v405 == 0x6365722E64337663 && v406 == 0x73746174532E6E6FLL && v407 == 46)
          {
            v410 = sub_223187510();
            if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v411 = &v743;
            else
              v411 = (std::string *)v743.__r_.__value_.__r.__words[0];
            if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v412 = HIBYTE(v743.__r_.__value_.__r.__words[2]);
            else
              v412 = v743.__r_.__value_.__l.__size_;
            sub_2231AA374((uint64_t *)v410, v411, v412, (uint64_t *)&v701, (uint64_t)"FrameTime", 9);
          }
        }
        kdebug_trace();
        if (SHIBYTE(v743.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v743.__r_.__value_.__l.__data_);
        __dst[23] = 20;
        strcpy(__dst, "Stats.KeyframePlanes");
        v413 = std::string::append((std::string *)__dst, ".KeyframeSegmentations", 0x16uLL);
        v414 = *(_OWORD *)&v413->__r_.__value_.__l.__data_;
        v696.__r_.__value_.__r.__words[2] = v413->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v696.__r_.__value_.__l.__data_ = v414;
        v413->__r_.__value_.__l.__size_ = 0;
        v413->__r_.__value_.__r.__words[2] = 0;
        v413->__r_.__value_.__r.__words[0] = 0;
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        *(_QWORD *)__dst = "cv3d.recon.";
        *(_QWORD *)&__dst[8] = 11;
        v415 = HIBYTE(v696.__r_.__value_.__r.__words[2]);
        v416 = &v696;
        if ((v696.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        {
          v415 = v696.__r_.__value_.__l.__size_;
          v416 = (std::string *)v696.__r_.__value_.__r.__words[0];
        }
        *(_QWORD *)&__dst[16] = v416;
        *(_QWORD *)&__dst[24] = v415;
        sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, &v743);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v417 = sub_2241471F8();
          v418 = v417[2];
          if (!v418)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v418 = v417[2];
          }
          v419 = *(_QWORD *)(v418 + 64);
          v420 = (std::mutex *)(v419 + 32);
          std::mutex::lock((std::mutex *)(v419 + 32));
          v422 = *(_QWORD *)(v419 + 96);
          v421 = *(_QWORD *)(v419 + 104);
          std::mutex::unlock(v420);
          if (v422 != v421)
          {
            v423 = HIBYTE(v743.__r_.__value_.__r.__words[2]);
            v424 = (std::string *)v743.__r_.__value_.__r.__words[0];
            sub_2241471F8();
            v425 = v423 >= 0 ? &v743 : v424;
            v426 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v425);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v426 + 24))(v426))
            {
              memset(__dst, 0, 32);
              *(_DWORD *)&__dst[32] = 728325608;
              kdebug_trace();
              sub_223700AEC((double *)&qword_255788F20, v426, &v699, "Deleted");
              kdebug_trace();
            }
          }
        }
        memset(__dst, 0, 32);
        *(_DWORD *)&__dst[32] = 728325624;
        kdebug_trace();
        v427 = HIBYTE(v743.__r_.__value_.__r.__words[2]);
        if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v427 = v743.__r_.__value_.__l.__size_;
        if (v427 >= 0x11)
        {
          v428 = &v743;
          if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v428 = (std::string *)v743.__r_.__value_.__r.__words[0];
          v429 = v428->__r_.__value_.__r.__words[0];
          v430 = v428->__r_.__value_.__l.__size_;
          v431 = v428->__r_.__value_.__s.__data_[16];
          if (v429 == 0x6365722E64337663 && v430 == 0x73746174532E6E6FLL && v431 == 46)
          {
            v434 = sub_223187510();
            if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v435 = &v743;
            else
              v435 = (std::string *)v743.__r_.__value_.__r.__words[0];
            if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v436 = HIBYTE(v743.__r_.__value_.__r.__words[2]);
            else
              v436 = v743.__r_.__value_.__l.__size_;
            sub_22318760C((uint64_t *)v434, v435, v436, &v699, (uint64_t)"Deleted", 7);
          }
        }
        kdebug_trace();
        if (SHIBYTE(v743.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v743.__r_.__value_.__l.__data_);
        *(_QWORD *)__dst = "cv3d.recon.";
        *(_QWORD *)&__dst[8] = 11;
        v437 = HIBYTE(v696.__r_.__value_.__r.__words[2]);
        v438 = &v696;
        if ((v696.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        {
          v437 = v696.__r_.__value_.__l.__size_;
          v438 = (std::string *)v696.__r_.__value_.__r.__words[0];
        }
        *(_QWORD *)&__dst[16] = v438;
        *(_QWORD *)&__dst[24] = v437;
        sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, &v743);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v439 = sub_2241471F8();
          v440 = v439[2];
          if (!v440)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v440 = v439[2];
          }
          v441 = *(_QWORD *)(v440 + 64);
          v442 = (std::mutex *)(v441 + 32);
          std::mutex::lock((std::mutex *)(v441 + 32));
          v444 = *(_QWORD *)(v441 + 96);
          v443 = *(_QWORD *)(v441 + 104);
          std::mutex::unlock(v442);
          if (v444 != v443)
          {
            v445 = HIBYTE(v743.__r_.__value_.__r.__words[2]);
            v446 = (std::string *)v743.__r_.__value_.__r.__words[0];
            sub_2241471F8();
            v447 = v445 >= 0 ? &v743 : v446;
            v448 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v447);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v448 + 24))(v448))
            {
              memset(__dst, 0, 32);
              *(_DWORD *)&__dst[32] = 728325608;
              kdebug_trace();
              sub_223700C28((double *)&qword_255788F20, v448, (uint64_t *)&v693, "External");
              kdebug_trace();
            }
          }
        }
        memset(__dst, 0, 32);
        *(_DWORD *)&__dst[32] = 728325624;
        kdebug_trace();
        v449 = HIBYTE(v743.__r_.__value_.__r.__words[2]);
        if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v449 = v743.__r_.__value_.__l.__size_;
        if (v449 >= 0x11)
        {
          v450 = &v743;
          if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v450 = (std::string *)v743.__r_.__value_.__r.__words[0];
          v451 = v450->__r_.__value_.__r.__words[0];
          v452 = v450->__r_.__value_.__l.__size_;
          v453 = v450->__r_.__value_.__s.__data_[16];
          if (v451 == 0x6365722E64337663 && v452 == 0x73746174532E6E6FLL && v453 == 46)
          {
            v456 = sub_223187510();
            if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v457 = &v743;
            else
              v457 = (std::string *)v743.__r_.__value_.__r.__words[0];
            if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v458 = HIBYTE(v743.__r_.__value_.__r.__words[2]);
            else
              v458 = v743.__r_.__value_.__l.__size_;
            sub_22318760C((uint64_t *)v456, v457, v458, (uint64_t *)&v693, (uint64_t)"External", 8);
          }
        }
        kdebug_trace();
        if (SHIBYTE(v743.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v743.__r_.__value_.__l.__data_);
        *(_QWORD *)__dst = "cv3d.recon.";
        *(_QWORD *)&__dst[8] = 11;
        v459 = HIBYTE(v696.__r_.__value_.__r.__words[2]);
        v460 = &v696;
        if ((v696.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        {
          v459 = v696.__r_.__value_.__l.__size_;
          v460 = (std::string *)v696.__r_.__value_.__r.__words[0];
        }
        *(_QWORD *)&__dst[16] = v460;
        *(_QWORD *)&__dst[24] = v459;
        sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, &v743);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v461 = sub_2241471F8();
          v462 = v461[2];
          if (!v462)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v462 = v461[2];
          }
          v463 = *(_QWORD *)(v462 + 64);
          v464 = (std::mutex *)(v463 + 32);
          std::mutex::lock((std::mutex *)(v463 + 32));
          v466 = *(_QWORD *)(v463 + 96);
          v465 = *(_QWORD *)(v463 + 104);
          std::mutex::unlock(v464);
          if (v466 != v465)
          {
            v467 = HIBYTE(v743.__r_.__value_.__r.__words[2]);
            v468 = (std::string *)v743.__r_.__value_.__r.__words[0];
            sub_2241471F8();
            v469 = v467 >= 0 ? &v743 : v468;
            v470 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v469);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v470 + 24))(v470))
            {
              memset(__dst, 0, 32);
              *(_DWORD *)&__dst[32] = 728325608;
              kdebug_trace();
              sub_223700D64((double *)&qword_255788F20, v470, (uint64_t *)&v691, "PoseUpdated");
              kdebug_trace();
            }
          }
        }
        memset(__dst, 0, 32);
        *(_DWORD *)&__dst[32] = 728325624;
        kdebug_trace();
        v471 = HIBYTE(v743.__r_.__value_.__r.__words[2]);
        if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v471 = v743.__r_.__value_.__l.__size_;
        if (v471 >= 0x11)
        {
          v472 = &v743;
          if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v472 = (std::string *)v743.__r_.__value_.__r.__words[0];
          v473 = v472->__r_.__value_.__r.__words[0];
          v474 = v472->__r_.__value_.__l.__size_;
          v475 = v472->__r_.__value_.__s.__data_[16];
          if (v473 == 0x6365722E64337663 && v474 == 0x73746174532E6E6FLL && v475 == 46)
          {
            v478 = sub_223187510();
            if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v479 = &v743;
            else
              v479 = (std::string *)v743.__r_.__value_.__r.__words[0];
            if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v480 = HIBYTE(v743.__r_.__value_.__r.__words[2]);
            else
              v480 = v743.__r_.__value_.__l.__size_;
            sub_22318760C((uint64_t *)v478, v479, v480, (uint64_t *)&v691, (uint64_t)"PoseUpdated", 11);
          }
        }
        kdebug_trace();
        if (SHIBYTE(v743.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v743.__r_.__value_.__l.__data_);
        *(_QWORD *)__dst = "cv3d.recon.";
        *(_QWORD *)&__dst[8] = 11;
        v481 = HIBYTE(v696.__r_.__value_.__r.__words[2]);
        v482 = &v696;
        if ((v696.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        {
          v481 = v696.__r_.__value_.__l.__size_;
          v482 = (std::string *)v696.__r_.__value_.__r.__words[0];
        }
        *(_QWORD *)&__dst[16] = v482;
        *(_QWORD *)&__dst[24] = v481;
        sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, &v743);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v483 = sub_2241471F8();
          v484 = v483[2];
          if (!v484)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v484 = v483[2];
          }
          v485 = *(_QWORD *)(v484 + 64);
          v486 = (std::mutex *)(v485 + 32);
          std::mutex::lock((std::mutex *)(v485 + 32));
          v488 = *(_QWORD *)(v485 + 96);
          v487 = *(_QWORD *)(v485 + 104);
          std::mutex::unlock(v486);
          if (v488 != v487)
          {
            v489 = HIBYTE(v743.__r_.__value_.__r.__words[2]);
            v490 = (std::string *)v743.__r_.__value_.__r.__words[0];
            sub_2241471F8();
            v491 = v489 >= 0 ? &v743 : v490;
            v492 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v491);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v492 + 24))(v492))
            {
              memset(__dst, 0, 32);
              *(_DWORD *)&__dst[32] = 728325608;
              kdebug_trace();
              sub_223700EA0((double *)&qword_255788F20, v492, (uint64_t *)&v688, "ContentUpdated");
              kdebug_trace();
            }
          }
        }
        memset(__dst, 0, 32);
        *(_DWORD *)&__dst[32] = 728325624;
        kdebug_trace();
        v493 = HIBYTE(v743.__r_.__value_.__r.__words[2]);
        if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v493 = v743.__r_.__value_.__l.__size_;
        if (v493 >= 0x11)
        {
          v494 = &v743;
          if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v494 = (std::string *)v743.__r_.__value_.__r.__words[0];
          v495 = v494->__r_.__value_.__r.__words[0];
          v496 = v494->__r_.__value_.__l.__size_;
          v497 = v494->__r_.__value_.__s.__data_[16];
          if (v495 == 0x6365722E64337663 && v496 == 0x73746174532E6E6FLL && v497 == 46)
          {
            v500 = sub_223187510();
            if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v501 = &v743;
            else
              v501 = (std::string *)v743.__r_.__value_.__r.__words[0];
            if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v502 = HIBYTE(v743.__r_.__value_.__r.__words[2]);
            else
              v502 = v743.__r_.__value_.__l.__size_;
            sub_22318760C((uint64_t *)v500, v501, v502, (uint64_t *)&v688, (uint64_t)"ContentUpdated", 14);
          }
        }
        kdebug_trace();
        if (SHIBYTE(v743.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v743.__r_.__value_.__l.__data_);
        *(_QWORD *)__dst = "cv3d.recon.";
        *(_QWORD *)&__dst[8] = 11;
        v503 = HIBYTE(v696.__r_.__value_.__r.__words[2]);
        v504 = &v696;
        if ((v696.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        {
          v503 = v696.__r_.__value_.__l.__size_;
          v504 = (std::string *)v696.__r_.__value_.__r.__words[0];
        }
        *(_QWORD *)&__dst[16] = v504;
        *(_QWORD *)&__dst[24] = v503;
        sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, &v743);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v505 = sub_2241471F8();
          v506 = v505[2];
          if (!v506)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v506 = v505[2];
          }
          v507 = *(_QWORD *)(v506 + 64);
          v508 = (std::mutex *)(v507 + 32);
          std::mutex::lock((std::mutex *)(v507 + 32));
          v510 = *(_QWORD *)(v507 + 96);
          v509 = *(_QWORD *)(v507 + 104);
          std::mutex::unlock(v508);
          if (v510 != v509)
          {
            v511 = HIBYTE(v743.__r_.__value_.__r.__words[2]);
            v512 = (std::string *)v743.__r_.__value_.__r.__words[0];
            sub_2241471F8();
            v513 = v511 >= 0 ? &v743 : v512;
            v514 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v513);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v514 + 24))(v514))
            {
              memset(__dst, 0, 32);
              *(_DWORD *)&__dst[32] = 728325608;
              kdebug_trace();
              sub_223700EA0((double *)&qword_255788F20, v514, (uint64_t *)&v705, "PendingUpdates");
              kdebug_trace();
            }
          }
        }
        memset(__dst, 0, 32);
        *(_DWORD *)&__dst[32] = 728325624;
        kdebug_trace();
        v515 = HIBYTE(v743.__r_.__value_.__r.__words[2]);
        if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v515 = v743.__r_.__value_.__l.__size_;
        if (v515 >= 0x11)
        {
          v516 = &v743;
          if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v516 = (std::string *)v743.__r_.__value_.__r.__words[0];
          v517 = v516->__r_.__value_.__r.__words[0];
          v518 = v516->__r_.__value_.__l.__size_;
          v519 = v516->__r_.__value_.__s.__data_[16];
          if (v517 == 0x6365722E64337663 && v518 == 0x73746174532E6E6FLL && v519 == 46)
          {
            v522 = sub_223187510();
            if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v523 = &v743;
            else
              v523 = (std::string *)v743.__r_.__value_.__r.__words[0];
            if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v524 = HIBYTE(v743.__r_.__value_.__r.__words[2]);
            else
              v524 = v743.__r_.__value_.__l.__size_;
            sub_22318760C((uint64_t *)v522, v523, v524, (uint64_t *)&v705, (uint64_t)"PendingUpdates", 14);
          }
        }
        kdebug_trace();
        if (SHIBYTE(v743.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v743.__r_.__value_.__l.__data_);
        *(_QWORD *)__dst = "cv3d.recon.";
        *(_QWORD *)&__dst[8] = 11;
        v525 = HIBYTE(v696.__r_.__value_.__r.__words[2]);
        v526 = &v696;
        if ((v696.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        {
          v525 = v696.__r_.__value_.__l.__size_;
          v526 = (std::string *)v696.__r_.__value_.__r.__words[0];
        }
        *(_QWORD *)&__dst[16] = v526;
        *(_QWORD *)&__dst[24] = v525;
        sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, &v743);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v527 = sub_2241471F8();
          v528 = v527[2];
          if (!v528)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v528 = v527[2];
          }
          v529 = *(_QWORD *)(v528 + 64);
          v530 = (std::mutex *)(v529 + 32);
          std::mutex::lock((std::mutex *)(v529 + 32));
          v532 = *(_QWORD *)(v529 + 96);
          v531 = *(_QWORD *)(v529 + 104);
          std::mutex::unlock(v530);
          if (v532 != v531)
          {
            v533 = HIBYTE(v743.__r_.__value_.__r.__words[2]);
            v534 = (std::string *)v743.__r_.__value_.__r.__words[0];
            sub_2241471F8();
            v535 = v533 >= 0 ? &v743 : v534;
            v536 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v535);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v536 + 24))(v536))
            {
              memset(__dst, 0, 32);
              *(_DWORD *)&__dst[32] = 728325608;
              kdebug_trace();
              sub_223700FDC((double *)&qword_255788F20, v536, &v704, "AdditionalCandidates");
              kdebug_trace();
            }
          }
        }
        memset(__dst, 0, 32);
        *(_DWORD *)&__dst[32] = 728325624;
        kdebug_trace();
        v537 = HIBYTE(v743.__r_.__value_.__r.__words[2]);
        if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v537 = v743.__r_.__value_.__l.__size_;
        if (v537 >= 0x11)
        {
          v538 = &v743;
          if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v538 = (std::string *)v743.__r_.__value_.__r.__words[0];
          v539 = v538->__r_.__value_.__r.__words[0];
          v540 = v538->__r_.__value_.__l.__size_;
          v541 = v538->__r_.__value_.__s.__data_[16];
          if (v539 == 0x6365722E64337663 && v540 == 0x73746174532E6E6FLL && v541 == 46)
          {
            v544 = sub_223187510();
            if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v545 = &v743;
            else
              v545 = (std::string *)v743.__r_.__value_.__r.__words[0];
            if ((v743.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v546 = HIBYTE(v743.__r_.__value_.__r.__words[2]);
            else
              v546 = v743.__r_.__value_.__l.__size_;
            sub_22318760C((uint64_t *)v544, v545, v546, &v704, (uint64_t)"AdditionalCandidates", 20);
          }
        }
        kdebug_trace();
        if (SHIBYTE(v743.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v743.__r_.__value_.__l.__data_);
        sub_2236F5384(&v703);
        if (**(int **)(v703 + 56) > 3
          || (v547 = *(unsigned __int8 *)(v703 + 72),
              v548 = sub_22322F254(v703, "OSLogSurrogateAppender", 1, 0),
              v549 = v548,
              !v547)
          && !v548)
        {
LABEL_988:
          if (SHIBYTE(v696.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v696.__r_.__value_.__l.__data_);
          sub_223734D2C(*(_QWORD **)(a2 + 208), v671);
          sub_224569D7C();
          sub_224569A80();
          if (os_variant_has_internal_diagnostics())
          {
            v609 = sub_2241471F8();
            v610 = v609[2];
            if (!v610)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              v610 = v609[2];
            }
            v611 = *(_QWORD *)(v610 + 64);
            v612 = (std::mutex *)(v611 + 32);
            std::mutex::lock((std::mutex *)(v611 + 32));
            v614 = *(_QWORD *)(v611 + 96);
            v613 = *(_QWORD *)(v611 + 104);
            std::mutex::unlock(v612);
            if (v614 != v613)
            {
              *(_QWORD *)__dst = "cv3d.recon.";
              *(_QWORD *)&__dst[8] = 11;
              *(_QWORD *)&__dst[16] = "KeyframePlanes";
              *(_QWORD *)&__dst[24] = 14;
              sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, &v743);
              v615 = HIBYTE(v743.__r_.__value_.__r.__words[2]);
              v616 = v743.__r_.__value_.__r.__words[0];
              sub_2241471F8();
              if (v615 >= 0)
                v617 = &v743;
              else
                v617 = (std::string *)v616;
              v618 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v617);
              v619 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v618 + 24))(v618);
              v620 = v619;
              if (SHIBYTE(v743.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v743.__r_.__value_.__l.__data_);
                if (!v620)
                  goto LABEL_1010;
              }
              else if (!v619)
              {
                goto LABEL_1010;
              }
              v621 = *(_OWORD ***)v716;
              v622 = *(_QWORD *)&v716[8];
              memset(__dst, 0, 24);
              if (*(_QWORD *)&v716[8])
              {
                if (*(_QWORD *)&v716[8] >> 60)
                  sub_22316E078();
                *(_QWORD *)__dst = operator new(16 * *(_QWORD *)&v716[8]);
                *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
                *(_QWORD *)&__dst[16] = *(_QWORD *)__dst + 16 * v622;
                v696.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
                v623 = 8 * v622;
                do
                {
                  *(_OWORD *)&v743.__r_.__value_.__l.__data_ = **v621;
                  sub_2232E9564((char ***)&v696, &v743);
                  ++v621;
                  v623 -= 8;
                }
                while (v623);
                v624 = *(_QWORD *)&__dst[8];
                v622 = *(_QWORD *)__dst;
              }
              else
              {
                v624 = 0;
              }
              sub_2236F9814((uint64_t)object, *(_QWORD **)(a2 + 208), (int32x2_t *)(a2 + 272), (uint64_t)a4, a5, a6, (v624 - v622) >> 4, v622, (uint64_t)a3);
              if (v622)
                operator delete((void *)v622);
            }
          }
LABEL_1010:
          kdebug_trace();
          if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 192) + 56))(*(_QWORD *)(a2 + 192)))
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 192) + 72))(*(_QWORD *)(a2 + 192), 32);
          sub_22327F72C(a1, (uint64_t)object);
          *(_BYTE *)(a1 + 376) = 1;
          sub_22327F500((uint64_t)object);
          v625 = v668[0];
          if (v668[0])
          {
            do
            {
              v626 = (_QWORD *)*v625;
              operator delete(v625);
              v625 = v626;
            }
            while (v626);
          }
          v627 = v667[0];
          v667[0] = 0;
          if (v627)
            operator delete(v627);
          v628 = v670;
          v670 = 0;
          if (v628)
          {
            v629 = sub_22370F604(v628);
            MEMORY[0x227684CE8](v629, 0x10A0C402FF47DCALL);
          }
          if (*(_QWORD *)&v716[16] && &v717 != *(_QWORD ****)v716)
            operator delete(*(void **)v716);
          if (v723.i64[0] && &v723.u32[2] != v722[0])
            operator delete(v722[0]);
          if ((_QWORD)v728 && (__int128 *)((char *)&v728 + 8) != (__int128 *)__p)
            operator delete((void *)__p);
          if (*(_QWORD *)&oslog[16] && &oslog[24] != *(_BYTE **)oslog)
            operator delete(*(void **)oslog);
          if (!v740)
            sub_223198474();
          (*(void (**)(_BYTE *))(*(_QWORD *)v740 + 48))(v740);
          v631 = v740;
          if (v740 == v739)
          {
            v632 = 4;
            v631 = v739;
          }
          else
          {
            if (!v740)
            {
LABEL_1036:
              if (v676)
              {
                v677 = v676;
                operator delete(v676);
              }
              sub_223198030((uint64_t)&v674, v675[0]);
              sub_223198030((uint64_t)&v672, v673[0]);
              return;
            }
            v632 = 5;
          }
          (*(void (**)(_QWORD *, uint64_t))(*v631 + 8 * v632))(v631, v630);
          goto LABEL_1036;
        }
        v666 = v547;
        v743.__r_.__value_.__r.__words[0] = (std::string::size_type)&v703;
        v743.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v743.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v744) = 3;
        *((_QWORD *)&v744 + 1) = "unknown file";
        LODWORD(v745) = 1041;
        v748 = 0;
        v746 = "unknown function";
        v747 = 0;
        v550 = *(_QWORD *)v743.__r_.__value_.__l.__data_;
        v551 = (const char *)(*(_QWORD *)v743.__r_.__value_.__l.__data_ + 16);
        v664 = *(_QWORD *)v743.__r_.__value_.__l.__data_;
        v659 = v551;
        if (*(char *)(*(_QWORD *)v743.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v551 = *(const char **)(v550 + 16);
          v552 = *(_QWORD *)(v550 + 24);
          v554 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v554 & 1) != 0)
            goto LABEL_907;
        }
        else
        {
          v552 = *(unsigned __int8 *)(*(_QWORD *)v743.__r_.__value_.__l.__data_ + 39);
          v553 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v553 & 1) != 0)
            goto LABEL_907;
        }
        if (__cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)__dst);
          sub_223199C58("com.apple.cv3d", (unint64_t)__dst, &xmmword_255788F40);
          if (__dst[24] && (__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
          a6 = v643;
        }
LABEL_907:
        if (byte_255788F57 >= 0)
          v555 = (const char *)&xmmword_255788F40;
        else
          v555 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v556 = byte_255788F57;
        else
          v556 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)__dst = os_log_create(v555, v551);
        v557 = &__dst[8];
        if (v556 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v556 >= 0x17)
        {
          v558 = a1;
          v559 = (v556 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v556 | 7) != 0x17)
            v559 = v556 | 7;
          v560 = v559 + 1;
          v557 = operator new(v559 + 1);
          *(_QWORD *)&__dst[16] = v556;
          *(_QWORD *)&__dst[24] = v560 | 0x8000000000000000;
          *(_QWORD *)&__dst[8] = v557;
          a1 = v558;
          a6 = v643;
        }
        else
        {
          __dst[31] = v556;
          if (!v556)
          {
LABEL_921:
            v557[v556] = 0;
            __dst[32] = 1;
            v561 = &__dst[40];
            if (v552 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            a3 = v649;
            if (v552 >= 0x17)
            {
              v562 = (v552 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v552 | 7) != 0x17)
                v562 = v552 | 7;
              v563 = v562 + 1;
              v561 = operator new(v562 + 1);
              *(_QWORD *)&__dst[48] = v552;
              *(_QWORD *)&__dst[56] = v563 | 0x8000000000000000;
              *(_QWORD *)&__dst[40] = v561;
            }
            else
            {
              __dst[63] = v552;
              if (!v552)
                goto LABEL_929;
            }
            memmove(v561, v551, v552);
LABEL_929:
            v561[v552] = 0;
            LOBYTE(v750) = 1;
            v564 = *(NSObject **)__dst;
            if ((__dst[63] & 0x80000000) != 0)
              operator delete(*(void **)&__dst[40]);
            if (__dst[32] && (__dst[31] & 0x80000000) != 0)
              operator delete(*(void **)&__dst[8]);
            if (*(_QWORD *)__dst)
              os_release(*(void **)__dst);
            if (v549 && *(_QWORD *)(v549 + 24))
            {
              v565 = _os_log_pack_size();
              v566 = (std::__shared_weak_count_vtbl *)operator new(v565, (std::align_val_t)8uLL);
              v567 = (std::__shared_weak_count *)operator new();
              v568 = v567;
              v567->__shared_owners_ = 0;
              v569 = (unint64_t *)&v567->__shared_owners_;
              v567->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v567->__shared_weak_owners_ = 0;
              v567[1].__vftable = v566;
              *(_QWORD *)__dst = v566;
              *(_QWORD *)&__dst[8] = v566;
              *(_QWORD *)&__dst[16] = v567;
              do
                v570 = __ldxr(v569);
              while (__stxr(v570 + 1, v569));
              memset(&__dst[24], 0, 24);
              do
                v571 = __ldaxr(v569);
              while (__stlxr(v571 - 1, v569));
              if (!v571)
              {
                ((void (*)(std::__shared_weak_count *))v567->__on_zero_shared)(v567);
                std::__shared_weak_count::__release_weak(v568);
              }
              v572 = *(_QWORD *)__dst;
              v573 = _os_log_pack_fill();
              v574 = v701;
              v575 = v699;
              v576 = (uint64_t)v693;
              v577 = v691;
              v578 = (uint64_t)v688;
              v579 = v705;
              v580 = v704;
              *(_DWORD *)v573 = 134219520;
              *(double *)(v573 + 4) = v574;
              *(_WORD *)(v573 + 12) = 2048;
              *(_QWORD *)(v573 + 14) = v575;
              *(_WORD *)(v573 + 22) = 2048;
              *(_QWORD *)(v573 + 24) = v576;
              *(_WORD *)(v573 + 32) = 2048;
              *(_QWORD *)(v573 + 34) = v577;
              *(_WORD *)(v573 + 42) = 2048;
              *(_QWORD *)(v573 + 44) = v578;
              *(_WORD *)(v573 + 52) = 2048;
              *(_QWORD *)(v573 + 54) = v579;
              *(_WORD *)(v573 + 62) = 2048;
              *(_QWORD *)(v573 + 64) = v580;
              v581 = operator new();
              v582 = *(unsigned __int8 *)(v664 + 39);
              v583 = v659;
              if ((v582 & 0x80u) != 0)
              {
                v583 = *(const char **)(v664 + 16);
                v582 = *(_QWORD *)(v664 + 24);
              }
              *(_QWORD *)v581 = v572;
              *(_OWORD *)(v581 + 8) = *(_OWORD *)&__dst[8];
              *(_QWORD *)&__dst[8] = 0;
              *(_QWORD *)&__dst[16] = 0;
              *(_OWORD *)(v581 + 24) = *(_OWORD *)&__dst[24];
              *(_QWORD *)&__dst[24] = 0;
              *(_QWORD *)&__dst[32] = 0;
              *(_QWORD *)(v581 + 40) = v583;
              *(_QWORD *)(v581 + 48) = v582;
              *(_BYTE *)(v581 + 56) = 1;
              *(_QWORD *)__src = 0;
              *(_QWORD *)__s = v581;
              (*(void (**)(_QWORD, char *))(**(_QWORD **)(v549 + 24) + 40))(*(_QWORD *)(v549 + 24), __s);
              v584 = *(_QWORD *)__s;
              *(_QWORD *)__s = 0;
              if (v584)
              {
                v585 = *(std::__shared_weak_count **)(v584 + 32);
                if (v585)
                {
                  v586 = (unint64_t *)&v585->__shared_owners_;
                  do
                    v587 = __ldaxr(v586);
                  while (__stlxr(v587 - 1, v586));
                  if (!v587)
                  {
                    ((void (*)(std::__shared_weak_count *))v585->__on_zero_shared)(v585);
                    std::__shared_weak_count::__release_weak(v585);
                  }
                }
                v588 = *(std::__shared_weak_count **)(v584 + 16);
                if (v588)
                {
                  v589 = (unint64_t *)&v588->__shared_owners_;
                  do
                    v590 = __ldaxr(v589);
                  while (__stlxr(v590 - 1, v589));
                  if (!v590)
                  {
                    ((void (*)(std::__shared_weak_count *))v588->__on_zero_shared)(v588);
                    std::__shared_weak_count::__release_weak(v588);
                  }
                }
                MEMORY[0x227684CE8](v584, 0x10F0C40B62ED6C6);
                v591 = *(_QWORD *)__src;
                *(_QWORD *)__src = 0;
                if (v591)
                {
                  v592 = *(std::__shared_weak_count **)(v591 + 32);
                  if (v592)
                  {
                    v593 = (unint64_t *)&v592->__shared_owners_;
                    do
                      v594 = __ldaxr(v593);
                    while (__stlxr(v594 - 1, v593));
                    if (!v594)
                    {
                      ((void (*)(std::__shared_weak_count *))v592->__on_zero_shared)(v592);
                      std::__shared_weak_count::__release_weak(v592);
                    }
                  }
                  v595 = *(std::__shared_weak_count **)(v591 + 16);
                  if (v595)
                  {
                    v596 = (unint64_t *)&v595->__shared_owners_;
                    do
                      v597 = __ldaxr(v596);
                    while (__stlxr(v597 - 1, v596));
                    if (!v597)
                    {
                      ((void (*)(std::__shared_weak_count *))v595->__on_zero_shared)(v595);
                      std::__shared_weak_count::__release_weak(v595);
                    }
                  }
                  MEMORY[0x227684CE8](v591, 0x10F0C40B62ED6C6);
                }
              }
              v598 = *(std::__shared_weak_count **)&__dst[32];
              v599 = v666;
              if (*(_QWORD *)&__dst[32])
              {
                v600 = (unint64_t *)(*(_QWORD *)&__dst[32] + 8);
                do
                  v601 = __ldaxr(v600);
                while (__stlxr(v601 - 1, v600));
                if (!v601)
                {
                  ((void (*)(std::__shared_weak_count *))v598->__on_zero_shared)(v598);
                  std::__shared_weak_count::__release_weak(v598);
                }
              }
              v602 = *(std::__shared_weak_count **)&__dst[16];
              if (*(_QWORD *)&__dst[16])
              {
                v603 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
                do
                  v604 = __ldaxr(v603);
                while (__stlxr(v604 - 1, v603));
                if (!v604)
                {
                  ((void (*)(std::__shared_weak_count *))v602->__on_zero_shared)(v602);
                  std::__shared_weak_count::__release_weak(v602);
                }
              }
            }
            else
            {
              os_log_type_enabled(v564, OS_LOG_TYPE_INFO);
              *(_DWORD *)__dst = 134219520;
              *(double *)&__dst[4] = v701;
              *(_WORD *)&__dst[12] = 2048;
              *(_QWORD *)&__dst[14] = v699;
              *(_WORD *)&__dst[22] = 2048;
              *(_QWORD *)&__dst[24] = v693;
              *(_WORD *)&__dst[32] = 2048;
              *(_QWORD *)&__dst[34] = v691;
              *(_WORD *)&__dst[42] = 2048;
              *(_QWORD *)&__dst[44] = v688;
              *(_WORD *)&__dst[52] = 2048;
              *(_QWORD *)&__dst[54] = v705;
              *(_WORD *)&__dst[62] = 2048;
              v750 = v704;
              v605 = (void *)_os_log_send_and_compose_impl();
              v599 = v666;
              if (v605)
                free(v605);
            }
            if (v599)
            {
              sub_22322C138((uint64_t)&v743, "KPDetector: Update stats at ts %f d/e/p/c/p/a: %zu/%zu/%zu/%zu/%zu/%zu", v701, v699, (size_t)v693, (size_t)v691, (size_t)v688, v705, v704);
              sub_223182C08((uint64_t)&v743);
            }
            sub_223182C08((uint64_t)&v743);
            v606 = v748;
            if (v748)
            {
              v607 = (unint64_t *)&v748->__shared_owners_;
              do
                v608 = __ldaxr(v607);
              while (__stlxr(v608 - 1, v607));
              if (!v608)
              {
                ((void (*)(std::__shared_weak_count *))v606->__on_zero_shared)(v606);
                std::__shared_weak_count::__release_weak(v606);
              }
            }
            goto LABEL_988;
          }
        }
        memmove(v557, v555, v556);
        goto LABEL_921;
      }
      if (a5)
      {
        sub_2236F6E50(object, a2, *(uint64_t *)&v716[8], *(unsigned __int8 ***)v716, (uint64_t)a4, a6, (uint64_t *)&v670);
        sub_2236D2F4C((uint64_t)&v672, (uint64_t)object);
        if (*(_QWORD *)&object[3])
        {
          *((_QWORD *)&object[3] + 1) = *(_QWORD *)&object[3];
          operator delete(*(void **)&object[3]);
        }
        sub_223198030((uint64_t)&object[1] + 8, *(_QWORD **)&object[2]);
        sub_223198030((uint64_t)object, *((_QWORD **)&object[0] + 1));
        goto LABEL_443;
      }
      sub_2236EC60C(v667);
      if (**((int **)v667[0] + 7) > 3)
        goto LABEL_443;
      v218 = *((unsigned __int8 *)v667[0] + 72);
      v219 = sub_22322F254((uint64_t)v667[0], "OSLogSurrogateAppender", 1, 0);
      v220 = v219;
      if (!v218 && !v219)
        goto LABEL_443;
      v657 = v218;
      *(_QWORD *)__dst = v667;
      *(std::chrono::steady_clock::time_point *)&__dst[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&__dst[16] = std::chrono::system_clock::now();
      *(_DWORD *)&__dst[24] = 3;
      *(_QWORD *)&__dst[32] = "unknown file";
      *(_DWORD *)&__dst[40] = 373;
      *(_QWORD *)&__dst[56] = 0;
      v750 = 0;
      *(_QWORD *)&__dst[48] = "unknown function";
      v221 = **(_QWORD **)__dst;
      v222 = (const char *)(**(_QWORD **)__dst + 16);
      v653 = v222;
      if (*(char *)(**(_QWORD **)__dst + 39) < 0)
      {
        v222 = *(const char **)(v221 + 16);
        v223 = *(_QWORD *)(v221 + 24);
      }
      else
      {
        v223 = *(unsigned __int8 *)(**(_QWORD **)__dst + 39);
      }
      v224 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v224 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if (BYTE8(object[1]) && SBYTE7(object[1]) < 0)
          operator delete(*(void **)&object[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
        a3 = v649;
      }
      if (byte_255788F57 >= 0)
        v225 = (const char *)&xmmword_255788F40;
      else
        v225 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v226 = byte_255788F57;
      else
        v226 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)&object[0] = os_log_create(v225, v222);
      v227 = (char *)object + 8;
      if (v226 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v226 >= 0x17)
      {
        v228 = (v226 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v226 | 7) != 0x17)
          v228 = v226 | 7;
        v229 = v228 + 1;
        v227 = (char *)operator new(v228 + 1);
        *((_QWORD *)&object[1] + 1) = v229 | 0x8000000000000000;
        *((_QWORD *)&object[0] + 1) = v227;
        *(_QWORD *)&object[1] = v226;
        a3 = v649;
      }
      else
      {
        HIBYTE(object[1]) = v226;
        if (!v226)
        {
LABEL_376:
          v227[v226] = 0;
          LOBYTE(object[2]) = 1;
          v230 = (char *)&object[2] + 8;
          if (v223 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v223 >= 0x17)
          {
            v231 = (v223 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v223 | 7) != 0x17)
              v231 = v223 | 7;
            v232 = v231 + 1;
            v230 = (char *)operator new(v231 + 1);
            *((_QWORD *)&object[3] + 1) = v232 | 0x8000000000000000;
            *((_QWORD *)&object[2] + 1) = v230;
            *(_QWORD *)&object[3] = v223;
            v8 = v665;
          }
          else
          {
            HIBYTE(object[3]) = v223;
            v8 = v665;
            if (!v223)
              goto LABEL_384;
          }
          memmove(v230, v222, v223);
LABEL_384:
          v230[v223] = 0;
          LOBYTE(v707) = 1;
          v233 = *(NSObject **)&object[0];
          if (SHIBYTE(object[3]) < 0)
            operator delete(*((void **)&object[2] + 1));
          if (LOBYTE(object[2]) && SHIBYTE(object[1]) < 0)
            operator delete(*((void **)&object[0] + 1));
          if (*(_QWORD *)&object[0])
            os_release(*(void **)&object[0]);
          if (v220 && *(_QWORD *)(v220 + 24))
          {
            v234 = _os_log_pack_size();
            v235 = (std::__shared_weak_count_vtbl *)operator new(v234, (std::align_val_t)8uLL);
            v236 = (std::__shared_weak_count *)operator new();
            v237 = v236;
            v236->__shared_owners_ = 0;
            v238 = (unint64_t *)&v236->__shared_owners_;
            v236->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v236->__shared_weak_owners_ = 0;
            v236[1].__vftable = v235;
            *(_QWORD *)&object[0] = v235;
            *((_QWORD *)&object[0] + 1) = v235;
            *(_QWORD *)&object[1] = v236;
            do
              v239 = __ldxr(v238);
            while (__stxr(v239 + 1, v238));
            memset((char *)&object[1] + 8, 0, 24);
            do
              v240 = __ldaxr(v238);
            while (__stlxr(v240 - 1, v238));
            if (!v240)
            {
              ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
              std::__shared_weak_count::__release_weak(v237);
            }
            v241 = *(_QWORD *)&object[0];
            *(_WORD *)_os_log_pack_fill() = 0;
            v242 = operator new();
            v243 = *(unsigned __int8 *)(v221 + 39);
            v244 = v653;
            if ((v243 & 0x80u) != 0)
            {
              v244 = *(const char **)(v221 + 16);
              v243 = *(_QWORD *)(v221 + 24);
            }
            *(_QWORD *)v242 = v241;
            *(_OWORD *)(v242 + 8) = *(_OWORD *)((char *)object + 8);
            *((_QWORD *)&object[0] + 1) = 0;
            *(_QWORD *)&object[1] = 0;
            *(_OWORD *)(v242 + 24) = *(_OWORD *)((char *)&object[1] + 8);
            *((_QWORD *)&object[1] + 1) = 0;
            *(_QWORD *)&object[2] = 0;
            *(_QWORD *)(v242 + 40) = v244;
            *(_QWORD *)(v242 + 48) = v243;
            *(_BYTE *)(v242 + 56) = 1;
            v696.__r_.__value_.__r.__words[0] = 0;
            v743.__r_.__value_.__r.__words[0] = v242;
            (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v220 + 24) + 40))(*(_QWORD *)(v220 + 24), &v743);
            v245 = v743.__r_.__value_.__r.__words[0];
            v743.__r_.__value_.__r.__words[0] = 0;
            a6 = v643;
            v8 = v665;
            if (v245)
            {
              v246 = *(std::__shared_weak_count **)(v245 + 32);
              if (v246)
              {
                v247 = (unint64_t *)&v246->__shared_owners_;
                do
                  v248 = __ldaxr(v247);
                while (__stlxr(v248 - 1, v247));
                if (!v248)
                {
                  ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                  std::__shared_weak_count::__release_weak(v246);
                }
              }
              v249 = *(std::__shared_weak_count **)(v245 + 16);
              if (v249)
              {
                v250 = (unint64_t *)&v249->__shared_owners_;
                do
                  v251 = __ldaxr(v250);
                while (__stlxr(v251 - 1, v250));
                if (!v251)
                {
                  ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
                  std::__shared_weak_count::__release_weak(v249);
                }
              }
              MEMORY[0x227684CE8](v245, 0x10F0C40B62ED6C6);
              v252 = v696.__r_.__value_.__r.__words[0];
              v696.__r_.__value_.__r.__words[0] = 0;
              if (v252)
              {
                v253 = *(std::__shared_weak_count **)(v252 + 32);
                if (v253)
                {
                  v254 = (unint64_t *)&v253->__shared_owners_;
                  do
                    v255 = __ldaxr(v254);
                  while (__stlxr(v255 - 1, v254));
                  if (!v255)
                  {
                    ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                    std::__shared_weak_count::__release_weak(v253);
                  }
                }
                v256 = *(std::__shared_weak_count **)(v252 + 16);
                if (v256)
                {
                  v257 = (unint64_t *)&v256->__shared_owners_;
                  do
                    v258 = __ldaxr(v257);
                  while (__stlxr(v258 - 1, v257));
                  if (!v258)
                  {
                    ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
                    std::__shared_weak_count::__release_weak(v256);
                  }
                }
                MEMORY[0x227684CE8](v252, 0x10F0C40B62ED6C6);
              }
            }
            v259 = *(std::__shared_weak_count **)&object[2];
            v260 = v657;
            if (*(_QWORD *)&object[2])
            {
              v261 = (unint64_t *)(*(_QWORD *)&object[2] + 8);
              do
                v262 = __ldaxr(v261);
              while (__stlxr(v262 - 1, v261));
              if (!v262)
              {
                ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                std::__shared_weak_count::__release_weak(v259);
              }
            }
            v263 = *(std::__shared_weak_count **)&object[1];
            if (*(_QWORD *)&object[1])
            {
              v264 = (unint64_t *)(*(_QWORD *)&object[1] + 8);
              do
                v265 = __ldaxr(v264);
              while (__stlxr(v265 - 1, v264));
              if (!v265)
              {
                ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                std::__shared_weak_count::__release_weak(v263);
              }
            }
          }
          else
          {
            os_log_type_enabled(v233, OS_LOG_TYPE_INFO);
            LOWORD(object[0]) = 0;
            v266 = (void *)_os_log_send_and_compose_impl();
            a6 = v643;
            v260 = v657;
            if (v266)
              free(v266);
          }
          if (v260)
          {
            sub_22322C138((uint64_t)__dst, "Dropping content updates without a single shot result.");
            sub_223182C08((uint64_t)__dst);
          }
          sub_223182C08((uint64_t)__dst);
          v267 = (std::__shared_weak_count *)v750;
          if (v750)
          {
            v268 = (unint64_t *)(v750 + 8);
            do
              v269 = __ldaxr(v268);
            while (__stlxr(v269 - 1, v268));
            if (!v269)
            {
              ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
              std::__shared_weak_count::__release_weak(v267);
            }
          }
          goto LABEL_443;
        }
      }
      memmove(v227, v225, v226);
      goto LABEL_376;
    }
    sub_223195210((uint64_t)object);
    *(double *)&v743.__r_.__value_.__l.__data_ = (double)*v8 / 1000000000.0;
    DWORD2(v728) = 0;
    sub_223702498(&__p, "KeyframePlaneDetector: Processing frame at time: ");
    sub_223701C90((uint64_t *)&v743, (std::string *)v722);
    *(_QWORD *)oslog = &__p;
    *(_QWORD *)&oslog[8] = v722;
    *(_QWORD *)&oslog[16] = &__p;
    *(_QWORD *)&oslog[24] = v722;
    *(_QWORD *)&oslog[32] = v722;
    if (DWORD2(v728) == -1)
      sub_22316DD70();
    *(_QWORD *)__dst = oslog;
    ((void (*)(_BYTE *, __int128 *))off_24EC57D08[DWORD2(v728)])(__dst, &__p);
    if (v723.i8[7] < 0)
      operator delete(v722[0]);
    if (DWORD2(v728) == -1)
      sub_22316DD70();
    *(_QWORD *)oslog = v722;
    ((void (*)(_BYTE *__return_ptr, _BYTE *, __int128 *))off_24EC57D38[DWORD2(v728)])(v716, oslog, &__p);
    if (DWORD2(v728) != -1)
      ((void (*)(_BYTE *, __int128 *))off_24EC57CF0[DWORD2(v728)])(oslog, &__p);
    if (v716[23] >= 0)
      v53 = v716;
    else
      v53 = *(const char **)v716;
    v54 = strlen(v53);
    sub_2231813E8(&object[1], (uint64_t)v53, v54);
    if ((v716[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v716);
      v55 = v714;
      v655 = v52;
      if ((v714 & 0x10) == 0)
      {
LABEL_61:
        if ((v55 & 8) == 0)
        {
          v56 = 0;
          __dst[23] = 0;
          v57 = __dst;
          goto LABEL_192;
        }
        v115 = (const void *)*((_QWORD *)&object[2] + 1);
        v56 = *((_QWORD *)&object[3] + 1) - *((_QWORD *)&object[2] + 1);
        if (*((_QWORD *)&object[3] + 1) - *((_QWORD *)&object[2] + 1) > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_237:
          sub_22316DBC0();
LABEL_185:
        if (v56 >= 0x17)
        {
          v116 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v56 | 7) != 0x17)
            v116 = v56 | 7;
          v117 = v116 + 1;
          v57 = operator new(v116 + 1);
          *(_QWORD *)&__dst[8] = v56;
          *(_QWORD *)&__dst[16] = v117 | 0x8000000000000000;
          *(_QWORD *)__dst = v57;
        }
        else
        {
          __dst[23] = v56;
          v57 = __dst;
          if (!v56)
          {
LABEL_192:
            v57[v56] = 0;
            *(_QWORD *)&__p = &v672;
            *((std::chrono::steady_clock::time_point *)&__p + 1) = std::chrono::steady_clock::now();
            *(std::chrono::system_clock::time_point *)&v728 = std::chrono::system_clock::now();
            DWORD2(v728) = 3;
            v729 = "unknown file";
            LODWORD(v730) = 301;
            v733 = 0;
            v731 = "unknown function";
            v732 = 0;
            if (__dst[23] >= 0)
              v118 = __dst;
            else
              v118 = *(const char **)__dst;
            v119 = *(_QWORD *)__p;
            v120 = (const char *)(*(_QWORD *)__p + 16);
            v652 = v120;
            if (*(char *)(*(_QWORD *)__p + 39) < 0)
            {
              v120 = *(const char **)(v119 + 16);
              v121 = *(_QWORD *)(v119 + 24);
              v661 = v50;
              v122 = a1;
              v124 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v124 & 1) != 0)
                goto LABEL_199;
            }
            else
            {
              v121 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
              v661 = v50;
              v122 = a1;
              v123 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v123 & 1) != 0)
                goto LABEL_199;
            }
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)oslog);
              sub_223199C58("com.apple.cv3d", (unint64_t)oslog, &xmmword_255788F40);
              if (oslog[24] && (oslog[23] & 0x80000000) != 0)
                operator delete(*(void **)oslog);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
LABEL_199:
            if (byte_255788F57 >= 0)
              v125 = (const char *)&xmmword_255788F40;
            else
              v125 = (const char *)xmmword_255788F40;
            if (byte_255788F57 >= 0)
              v126 = byte_255788F57;
            else
              v126 = *((_QWORD *)&xmmword_255788F40 + 1);
            *(_QWORD *)oslog = os_log_create(v125, v120);
            v127 = &oslog[8];
            if (v126 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v126 >= 0x17)
            {
              v128 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v126 | 7) != 0x17)
                v128 = v126 | 7;
              v129 = v128 + 1;
              v127 = operator new(v128 + 1);
              *(_QWORD *)&oslog[24] = v129 | 0x8000000000000000;
              *(_QWORD *)&oslog[8] = v127;
              *(_QWORD *)&oslog[16] = v126;
              a3 = v649;
            }
            else
            {
              oslog[31] = v126;
              if (!v126)
              {
LABEL_213:
                v127[v126] = 0;
                oslog[32] = 1;
                v130 = &v735;
                if (v121 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                a1 = v122;
                if (v121 >= 0x17)
                {
                  v134 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v121 | 7) != 0x17)
                    v134 = v121 | 7;
                  v135 = v134 + 1;
                  v130 = operator new(v134 + 1);
                  v132 = v118;
                  v737 = v135 | 0x8000000000000000;
                  v735 = v130;
                  v736 = (const char *)v121;
                  v131 = v661;
                  v133 = v655;
                }
                else
                {
                  HIBYTE(v737) = v121;
                  v131 = v661;
                  v132 = v118;
                  v133 = v655;
                  if (!v121)
                  {
LABEL_221:
                    *((_BYTE *)v130 + v121) = 0;
                    LOBYTE(v738) = 1;
                    v136 = *(NSObject **)oslog;
                    if (SHIBYTE(v737) < 0)
                      operator delete(v735);
                    v8 = v665;
                    if (oslog[32] && (oslog[31] & 0x80000000) != 0)
                      operator delete(*(void **)&oslog[8]);
                    if (*(_QWORD *)oslog)
                      os_release(*(void **)oslog);
                    if (!v133 || !*(_QWORD *)(v133 + 24))
                    {
                      os_log_type_enabled(v136, OS_LOG_TYPE_INFO);
                      *(_DWORD *)oslog = 136315138;
                      *(_QWORD *)&oslog[4] = v132;
                      v143 = (void *)_os_log_send_and_compose_impl();
                      a6 = v643;
                      if (v143)
                        free(v143);
                      goto LABEL_301;
                    }
                    v137 = _os_log_pack_size();
                    v138 = operator new(v137, (std::align_val_t)8uLL);
                    v139 = (_QWORD *)operator new();
                    *v139 = &off_24EC1F7F0;
                    v139[1] = 0;
                    v139[2] = 0;
                    v139[3] = v138;
                    v722[0] = v138;
                    v722[1] = v138;
                    v724.i64[0] = 0;
                    v723 = (float32x4_t)(unint64_t)v139;
                    v140 = strlen(v132);
                    if (v140 > 0x7FFFFFFFFFFFFFF7)
                      sub_22316DBC0();
                    v141 = v140;
                    if (v140 >= 0x17)
                    {
                      v144 = (v140 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v140 | 7) != 0x17)
                        v144 = v140 | 7;
                      v145 = v144 + 1;
                      v142 = operator new(v144 + 1);
                      *(_QWORD *)&v716[16] = v145 | 0x8000000000000000;
                      *(_QWORD *)v716 = v142;
                      *(_QWORD *)&v716[8] = v141;
                      v131 = v661;
                    }
                    else
                    {
                      v716[23] = v140;
                      v142 = v716;
                      if (!v140)
                      {
LABEL_242:
                        v142[v141] = 0;
                        v146 = *(_QWORD *)v716;
                        v743.__r_.__value_.__r.__words[0] = *(_QWORD *)&v716[8];
                        *(std::string::size_type *)((char *)v743.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v716[15];
                        v147 = v716[23];
                        v148 = operator new(0x38uLL);
                        v148[1] = 0;
                        v148[2] = 0;
                        v148[3] = off_24EC1FA48;
                        *v148 = &off_24EC1F9F8;
                        v149 = v743.__r_.__value_.__r.__words[0];
                        v148[4] = v146;
                        v148[5] = v149;
                        *(_QWORD *)((char *)v148 + 47) = *(std::string::size_type *)((char *)v743.__r_.__value_.__r.__words
                                                                                   + 7);
                        *((_BYTE *)v148 + 55) = v147;
                        v743.__r_.__value_.__r.__words[0] = 0;
                        *(std::string::size_type *)((char *)v743.__r_.__value_.__r.__words + 7) = 0;
                        v150 = (std::__shared_weak_count *)v724.i64[0];
                        v723.i64[1] = (uint64_t)(v148 + 3);
                        v724.i64[0] = (uint64_t)v148;
                        v8 = v665;
                        if (v150)
                        {
                          v151 = (unint64_t *)&v150->__shared_owners_;
                          do
                            v152 = __ldaxr(v151);
                          while (__stlxr(v152 - 1, v151));
                          if (!v152)
                          {
                            ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                            std::__shared_weak_count::__release_weak(v150);
                          }
                        }
                        *(_OWORD *)oslog = *(_OWORD *)v722;
                        v153 = (void *)v723.i64[1];
                        *(_QWORD *)&oslog[16] = v723.i64[0];
                        if (v723.i64[0])
                        {
                          v154 = (unint64_t *)(v723.i64[0] + 8);
                          do
                            v155 = __ldxr(v154);
                          while (__stxr(v155 + 1, v154));
                        }
                        v156 = (std::__shared_weak_count *)v724.i64[0];
                        *(_QWORD *)&oslog[24] = v153;
                        *(_QWORD *)&oslog[32] = v724.i64[0];
                        if (v724.i64[0])
                        {
                          v157 = (unint64_t *)(v724.i64[0] + 8);
                          do
                            v158 = __ldxr(v157);
                          while (__stxr(v158 + 1, v157));
                          v735 = v153;
                          do
                            v159 = __ldaxr(v157);
                          while (__stlxr(v159 - 1, v157));
                          if (!v159)
                          {
                            ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                            std::__shared_weak_count::__release_weak(v156);
                          }
                        }
                        else
                        {
                          v735 = v153;
                        }
                        v160 = (std::__shared_weak_count *)v723.i64[0];
                        if (v723.i64[0])
                        {
                          v161 = (unint64_t *)(v723.i64[0] + 8);
                          do
                            v162 = __ldaxr(v161);
                          while (__stlxr(v162 - 1, v161));
                          if (!v162)
                          {
                            ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                            std::__shared_weak_count::__release_weak(v160);
                          }
                        }
                        v163 = *(_QWORD *)oslog;
                        if (*((char *)v735 + 31) >= 0)
                          v164 = (char *)v735 + 8;
                        else
                          v164 = (char *)*((_QWORD *)v735 + 1);
                        v165 = _os_log_pack_fill();
                        *(_DWORD *)v165 = 136315138;
                        *(_QWORD *)(v165 + 4) = v164;
                        v166 = (char *)operator new();
                        v167 = *(unsigned __int8 *)(v119 + 39);
                        v168 = v652;
                        if ((v167 & 0x80u) != 0)
                        {
                          v168 = *(const char **)(v119 + 16);
                          v167 = *(_QWORD *)(v119 + 24);
                        }
                        *(_QWORD *)v166 = v163;
                        *(_OWORD *)(v166 + 8) = *(_OWORD *)&oslog[8];
                        *(_QWORD *)&oslog[8] = 0;
                        *(_QWORD *)&oslog[16] = 0;
                        *(_OWORD *)(v166 + 24) = *(_OWORD *)&oslog[24];
                        *(_QWORD *)&oslog[24] = 0;
                        *(_QWORD *)&oslog[32] = 0;
                        *((_QWORD *)v166 + 5) = v168;
                        *((_QWORD *)v166 + 6) = v167;
                        v166[56] = 1;
                        *(_QWORD *)v716 = 0;
                        v722[0] = v166;
                        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v133 + 24) + 40))(*(_QWORD *)(v133 + 24), v722);
                        v169 = v722[0];
                        v722[0] = 0;
                        a6 = v643;
                        if (v169)
                        {
                          v170 = (std::__shared_weak_count *)*((_QWORD *)v169 + 4);
                          if (v170)
                          {
                            v171 = (unint64_t *)&v170->__shared_owners_;
                            do
                              v172 = __ldaxr(v171);
                            while (__stlxr(v172 - 1, v171));
                            if (!v172)
                            {
                              ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                              std::__shared_weak_count::__release_weak(v170);
                            }
                          }
                          v173 = (std::__shared_weak_count *)*((_QWORD *)v169 + 2);
                          if (v173)
                          {
                            v174 = (unint64_t *)&v173->__shared_owners_;
                            do
                              v175 = __ldaxr(v174);
                            while (__stlxr(v175 - 1, v174));
                            if (!v175)
                            {
                              ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                              std::__shared_weak_count::__release_weak(v173);
                            }
                          }
                          MEMORY[0x227684CE8](v169, 0x10F0C40B62ED6C6);
                          v176 = *(_QWORD *)v716;
                          *(_QWORD *)v716 = 0;
                          if (v176)
                          {
                            v177 = *(std::__shared_weak_count **)(v176 + 32);
                            if (v177)
                            {
                              v178 = (unint64_t *)&v177->__shared_owners_;
                              do
                                v179 = __ldaxr(v178);
                              while (__stlxr(v179 - 1, v178));
                              if (!v179)
                              {
                                ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                                std::__shared_weak_count::__release_weak(v177);
                              }
                            }
                            v180 = *(std::__shared_weak_count **)(v176 + 16);
                            if (v180)
                            {
                              v181 = (unint64_t *)&v180->__shared_owners_;
                              do
                                v182 = __ldaxr(v181);
                              while (__stlxr(v182 - 1, v181));
                              if (!v182)
                              {
                                ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                                std::__shared_weak_count::__release_weak(v180);
                              }
                            }
                            MEMORY[0x227684CE8](v176, 0x10F0C40B62ED6C6);
                          }
                        }
                        v183 = *(std::__shared_weak_count **)&oslog[32];
                        if (*(_QWORD *)&oslog[32])
                        {
                          v184 = (unint64_t *)(*(_QWORD *)&oslog[32] + 8);
                          do
                            v185 = __ldaxr(v184);
                          while (__stlxr(v185 - 1, v184));
                          if (!v185)
                          {
                            ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                            std::__shared_weak_count::__release_weak(v183);
                          }
                        }
                        v186 = *(std::__shared_weak_count **)&oslog[16];
                        if (*(_QWORD *)&oslog[16])
                        {
                          v187 = (unint64_t *)(*(_QWORD *)&oslog[16] + 8);
                          do
                            v188 = __ldaxr(v187);
                          while (__stlxr(v188 - 1, v187));
                          if (!v188)
                          {
                            ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                            std::__shared_weak_count::__release_weak(v186);
                          }
                        }
LABEL_301:
                        if (v131)
                        {
                          v189 = __dst;
                          if (__dst[23] < 0)
                            v189 = *(const char **)__dst;
                          sub_22322C138((uint64_t)&__p, "%s", v189);
                          sub_223182C08((uint64_t)&__p);
                        }
                        sub_223182C08((uint64_t)&__p);
                        v190 = v733;
                        if (v733)
                        {
                          v191 = (unint64_t *)&v733->__shared_owners_;
                          do
                            v192 = __ldaxr(v191);
                          while (__stlxr(v192 - 1, v191));
                          if (!v192)
                          {
                            ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                            std::__shared_weak_count::__release_weak(v190);
                          }
                        }
                        if ((__dst[23] & 0x80000000) != 0)
                          operator delete(*(void **)__dst);
                        *(_QWORD *)&object[0] = *MEMORY[0x24BEDB7F0];
                        v193 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                        *(_QWORD *)((char *)object + *(_QWORD *)(*(_QWORD *)&object[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                        *(_QWORD *)&object[1] = v193;
                        *((_QWORD *)&object[1] + 1) = MEMORY[0x24BEDB848] + 16;
                        if (v712 < 0)
                          operator delete(v709[1]);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x227684BE0](&v715);
                        goto LABEL_315;
                      }
                    }
                    memcpy(v142, v132, v141);
                    goto LABEL_242;
                  }
                }
                memmove(v130, v120, v121);
                goto LABEL_221;
              }
            }
            memmove(v127, v125, v126);
            goto LABEL_213;
          }
        }
        memmove(v57, v115, v56);
        goto LABEL_192;
      }
    }
    else
    {
      v55 = v714;
      v655 = v52;
      if ((v714 & 0x10) == 0)
        goto LABEL_61;
    }
    v114 = v713;
    if (v713 < v708)
    {
      v713 = v708;
      v114 = v708;
    }
    v115 = v707;
    v56 = v114 - (_QWORD)v707;
    if (v114 - (unint64_t)v707 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_237;
    goto LABEL_185;
  }
  v41 = atomic_load((unsigned __int8 *)&qword_2557892F0);
  if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
  {
    __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
    __cxa_guard_release(&qword_2557892F0);
  }
  sub_2236EC60C(object);
  if (*(char *)(*(_QWORD *)&object[0] + 39) < 0)
  {
    v42 = *(const void **)(*(_QWORD *)&object[0] + 16);
    v43 = *(_QWORD *)(*(_QWORD *)&object[0] + 24);
  }
  else
  {
    v42 = (const void *)(*(_QWORD *)&object[0] + 16);
    v43 = *(unsigned __int8 *)(*(_QWORD *)&object[0] + 39);
  }
  sub_223195728((uint64_t)&stru_255789280, v42, v43, "KPDetector: Out of order bundle to process at time: %lf with latest bundle processed at time: %lf", 0x61uLL);
  sub_2236F5384(v716);
  if (**(int **)(*(_QWORD *)v716 + 56) <= 5)
  {
    v44 = *(unsigned __int8 *)(*(_QWORD *)v716 + 72);
    v45 = sub_22322F254(*(uint64_t *)v716, "OSLogSurrogateAppender", 1, 0);
    v46 = v45;
    if (v44 || v45)
    {
      *(_QWORD *)oslog = v716;
      *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
      *(_DWORD *)&oslog[24] = 5;
      *(_QWORD *)&oslog[32] = "unknown file";
      LODWORD(v735) = 285;
      v738 = 0;
      v736 = "unknown function";
      v737 = 0;
      v47 = **(_QWORD **)oslog;
      v660 = **(_QWORD **)oslog;
      if (*(char *)(**(_QWORD **)oslog + 39) < 0)
      {
        v49 = *(const char **)(v47 + 16);
        v48 = *(_QWORD *)(v47 + 24);
      }
      else
      {
        v48 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
        v49 = (const char *)(**(_QWORD **)oslog + 16);
      }
      v656 = **(_QWORD **)oslog + 16;
      v58 = *a7;
      v59 = *v8;
      v60 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v60 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if (BYTE8(object[1]) && SBYTE7(object[1]) < 0)
          operator delete(*(void **)&object[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v61 = (const char *)&xmmword_255788F40;
      else
        v61 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v62 = byte_255788F57;
      else
        v62 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)&object[0] = os_log_create(v61, v49);
      v63 = (char *)object + 8;
      if (v62 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v62 >= 0x17)
      {
        v64 = v46;
        v65 = v49;
        v66 = v44;
        v67 = a1;
        v68 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v62 | 7) != 0x17)
          v68 = v62 | 7;
        v69 = v68 + 1;
        v63 = (char *)operator new(v68 + 1);
        *((_QWORD *)&object[1] + 1) = v69 | 0x8000000000000000;
        *((_QWORD *)&object[0] + 1) = v63;
        *(_QWORD *)&object[1] = v62;
        a1 = v67;
        v44 = v66;
        v49 = v65;
        v46 = v64;
      }
      else
      {
        HIBYTE(object[1]) = v62;
        if (!v62)
        {
LABEL_79:
          v63[v62] = 0;
          LOBYTE(object[2]) = 1;
          v70 = (char *)&object[2] + 8;
          if (v48 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v48 >= 0x17)
          {
            v71 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v48 | 7) != 0x17)
              v71 = v48 | 7;
            v72 = v71 + 1;
            v70 = (char *)operator new(v71 + 1);
            *((_QWORD *)&object[3] + 1) = v72 | 0x8000000000000000;
            *((_QWORD *)&object[2] + 1) = v70;
            *(_QWORD *)&object[3] = v48;
            v8 = v665;
          }
          else
          {
            HIBYTE(object[3]) = v48;
            v8 = v665;
            if (!v48)
              goto LABEL_87;
          }
          memmove(v70, v49, v48);
LABEL_87:
          v70[v48] = 0;
          LOBYTE(v707) = 1;
          v73 = *(NSObject **)&object[0];
          if (SHIBYTE(object[3]) < 0)
            operator delete(*((void **)&object[2] + 1));
          if (LOBYTE(object[2]) && SHIBYTE(object[1]) < 0)
            operator delete(*((void **)&object[0] + 1));
          if (*(_QWORD *)&object[0])
            os_release(*(void **)&object[0]);
          v74 = (double)v58 / 1000000000.0;
          v75 = (double)v59 / 1000000000.0;
          if (v46 && *(_QWORD *)(v46 + 24))
          {
            v76 = _os_log_pack_size();
            v77 = (std::__shared_weak_count_vtbl *)operator new(v76, (std::align_val_t)8uLL);
            v78 = (std::__shared_weak_count *)operator new();
            v79 = v78;
            v78->__shared_owners_ = 0;
            v80 = (unint64_t *)&v78->__shared_owners_;
            v78->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v78->__shared_weak_owners_ = 0;
            v78[1].__vftable = v77;
            *(_QWORD *)&object[0] = v77;
            *((_QWORD *)&object[0] + 1) = v77;
            *(_QWORD *)&object[1] = v78;
            do
              v81 = __ldxr(v80);
            while (__stxr(v81 + 1, v80));
            memset((char *)&object[1] + 8, 0, 24);
            do
              v82 = __ldaxr(v80);
            while (__stlxr(v82 - 1, v80));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v79);
            }
            v83 = *(_QWORD *)&object[0];
            v84 = _os_log_pack_fill();
            *(_DWORD *)v84 = 134218240;
            *(double *)(v84 + 4) = v74;
            *(_WORD *)(v84 + 12) = 2048;
            *(double *)(v84 + 14) = v75;
            v85 = operator new();
            v86 = *(unsigned __int8 *)(v660 + 39);
            v87 = v656;
            if ((v86 & 0x80u) != 0)
            {
              v87 = *(_QWORD *)(v660 + 16);
              v86 = *(_QWORD *)(v660 + 24);
            }
            *(_QWORD *)v85 = v83;
            *(_OWORD *)(v85 + 8) = *(_OWORD *)((char *)object + 8);
            *((_QWORD *)&object[0] + 1) = 0;
            *(_QWORD *)&object[1] = 0;
            *(_OWORD *)(v85 + 24) = *(_OWORD *)((char *)&object[1] + 8);
            *((_QWORD *)&object[1] + 1) = 0;
            *(_QWORD *)&object[2] = 0;
            *(_QWORD *)(v85 + 40) = v87;
            *(_QWORD *)(v85 + 48) = v86;
            *(_BYTE *)(v85 + 56) = 16;
            v722[0] = 0;
            *(_QWORD *)&__p = v85;
            (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v46 + 24) + 40))(*(_QWORD *)(v46 + 24), &__p);
            v88 = __p;
            *(_QWORD *)&__p = 0;
            v8 = v665;
            if (v88)
            {
              v89 = *(std::__shared_weak_count **)(v88 + 32);
              if (v89)
              {
                v90 = (unint64_t *)&v89->__shared_owners_;
                do
                  v91 = __ldaxr(v90);
                while (__stlxr(v91 - 1, v90));
                if (!v91)
                {
                  ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                  std::__shared_weak_count::__release_weak(v89);
                }
              }
              v92 = *(std::__shared_weak_count **)(v88 + 16);
              if (v92)
              {
                v93 = (unint64_t *)&v92->__shared_owners_;
                do
                  v94 = __ldaxr(v93);
                while (__stlxr(v94 - 1, v93));
                if (!v94)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
              MEMORY[0x227684CE8](v88, 0x10F0C40B62ED6C6);
              v95 = v722[0];
              v722[0] = 0;
              if (v95)
              {
                v96 = (std::__shared_weak_count *)*((_QWORD *)v95 + 4);
                if (v96)
                {
                  v97 = (unint64_t *)&v96->__shared_owners_;
                  do
                    v98 = __ldaxr(v97);
                  while (__stlxr(v98 - 1, v97));
                  if (!v98)
                  {
                    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                    std::__shared_weak_count::__release_weak(v96);
                  }
                }
                v99 = (std::__shared_weak_count *)*((_QWORD *)v95 + 2);
                if (v99)
                {
                  v100 = (unint64_t *)&v99->__shared_owners_;
                  do
                    v101 = __ldaxr(v100);
                  while (__stlxr(v101 - 1, v100));
                  if (!v101)
                  {
                    ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                    std::__shared_weak_count::__release_weak(v99);
                  }
                }
                MEMORY[0x227684CE8](v95, 0x10F0C40B62ED6C6);
              }
            }
            v102 = *(std::__shared_weak_count **)&object[2];
            if (*(_QWORD *)&object[2])
            {
              v103 = (unint64_t *)(*(_QWORD *)&object[2] + 8);
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 - 1, v103));
              if (!v104)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
            v105 = *(std::__shared_weak_count **)&object[1];
            if (*(_QWORD *)&object[1])
            {
              v106 = (unint64_t *)(*(_QWORD *)&object[1] + 8);
              do
                v107 = __ldaxr(v106);
              while (__stlxr(v107 - 1, v106));
              if (!v107)
              {
                ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                std::__shared_weak_count::__release_weak(v105);
              }
            }
          }
          else
          {
            os_log_type_enabled(v73, OS_LOG_TYPE_ERROR);
            LODWORD(object[0]) = 134218240;
            *(double *)((char *)object + 4) = v74;
            WORD6(object[0]) = 2048;
            *(double *)((char *)object + 14) = v75;
            v108 = (void *)_os_log_send_and_compose_impl();
            if (v108)
              free(v108);
          }
          if (v44)
          {
            sub_22322C138((uint64_t)oslog, "KPDetector: Out of order bundle to process at time: %lf with latest bundle processed at time: %lf", (double)*a7 / 1000000000.0, (double)*v8 / 1000000000.0);
            sub_223182C08((uint64_t)oslog);
          }
          sub_223182C08((uint64_t)oslog);
          v109 = v738;
          if (v738)
          {
            v110 = (unint64_t *)&v738->__shared_owners_;
            do
              v111 = __ldaxr(v110);
            while (__stlxr(v111 - 1, v110));
            if (!v111)
            {
              ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
              std::__shared_weak_count::__release_weak(v109);
            }
          }
          goto LABEL_146;
        }
      }
      memmove(v63, v61, v62);
      goto LABEL_79;
    }
  }
LABEL_146:
  *(double *)&v743.__r_.__value_.__l.__data_ = (double)*a7 / 1000000000.0;
  v672 = (double)*v8 / 1000000000.0;
  DWORD2(v728) = 0;
  sub_223701BA0(&__p, "Out of order bundle to process at time: ");
  sub_223701C90((uint64_t *)&v743, (std::string *)v722);
  *(_QWORD *)oslog = &__p;
  *(_QWORD *)&oslog[8] = v722;
  *(_QWORD *)&oslog[16] = &__p;
  *(_QWORD *)&oslog[24] = v722;
  *(_QWORD *)&oslog[32] = v722;
  if (DWORD2(v728) == -1)
    sub_22316DD70();
  *(_QWORD *)__dst = oslog;
  ((void (*)(_BYTE *, __int128 *))off_24EC57D08[DWORD2(v728)])(__dst, &__p);
  if (v723.i8[7] < 0)
    operator delete(v722[0]);
  *(_QWORD *)oslog = &__p;
  *(_QWORD *)&oslog[8] = " received ";
  *(_QWORD *)&oslog[16] = &__p;
  *(_QWORD *)&oslog[24] = " received ";
  *(_QWORD *)&oslog[32] = " received ";
  if (DWORD2(v728) == -1)
    sub_22316DD70();
  v722[0] = oslog;
  ((void (*)(void **, __int128 *))off_24EC57D20[DWORD2(v728)])(v722, &__p);
  sub_223701C90((uint64_t *)&v672, (std::string *)v722);
  *(_QWORD *)oslog = &__p;
  *(_QWORD *)&oslog[8] = v722;
  *(_QWORD *)&oslog[16] = &__p;
  *(_QWORD *)&oslog[24] = v722;
  *(_QWORD *)&oslog[32] = v722;
  if (DWORD2(v728) == -1)
    sub_22316DD70();
  *(_QWORD *)__dst = oslog;
  ((void (*)(_BYTE *, __int128 *))off_24EC57D08[DWORD2(v728)])(__dst, &__p);
  if (v723.i8[7] < 0)
    operator delete(v722[0]);
  if (DWORD2(v728) == -1)
    sub_22316DD70();
  *(_QWORD *)oslog = v722;
  ((void (*)(_BYTE *__return_ptr, _BYTE *, __int128 *))off_24EC57D38[DWORD2(v728)])(v716, oslog, &__p);
  if (DWORD2(v728) != -1)
    ((void (*)(_BYTE *, __int128 *))off_24EC57CF0[DWORD2(v728)])(oslog, &__p);
  if ((v716[23] & 0x80000000) != 0)
  {
    sub_223197FA4(v679, *(void **)v716, *(unint64_t *)&v716[8]);
  }
  else
  {
    *(_OWORD *)v679 = *(_OWORD *)v716;
    v680 = *(_QWORD *)&v716[16];
  }
  v681 = 1;
  LOBYTE(v682) = 0;
  v686 = 0;
  v687 = 1;
  sub_2231A958C(5u, (__int128 *)v679, (uint64_t)object);
  *(_OWORD *)a1 = object[0];
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if ((_BYTE)v713)
  {
    *(_BYTE *)(a1 + 40) = 0;
    v112 = BYTE8(object[2]);
    if (BYTE8(object[2]))
    {
      *(_OWORD *)(a1 + 16) = object[1];
      *(_QWORD *)(a1 + 32) = *(_QWORD *)&object[2];
      memset(&object[1], 0, 24);
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (v711)
    {
      v113 = v708;
      *(_QWORD *)(a1 + 64) = v707;
      *(_OWORD *)(a1 + 48) = object[3];
      object[3] = 0uLL;
      *(_QWORD *)(a1 + 72) = v113;
      *(_OWORD *)(a1 + 80) = *(_OWORD *)v709;
      *(_QWORD *)(a1 + 96) = v710;
      v707 = 0;
      v709[0] = 0;
      v709[1] = 0;
      v710 = 0;
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 1;
    *(_BYTE *)(a1 + 376) = 0;
    if (v112 && SBYTE7(object[2]) < 0)
      operator delete(*(void **)&object[1]);
    if (!v687)
      goto LABEL_176;
  }
  else
  {
    *(_BYTE *)(a1 + 376) = 0;
    if (!v687)
      goto LABEL_176;
  }
  if (!v686)
    goto LABEL_173;
  if (v685 < 0)
  {
    operator delete(v684);
    if ((v683 & 0x80000000) == 0)
    {
LABEL_173:
      if (v681)
        goto LABEL_174;
      goto LABEL_176;
    }
  }
  else if ((v683 & 0x80000000) == 0)
  {
    goto LABEL_173;
  }
  operator delete(v682);
  if (v681)
  {
LABEL_174:
    if (SHIBYTE(v680) < 0)
      operator delete(v679[0]);
  }
LABEL_176:
  if ((v716[23] & 0x80000000) != 0)
    operator delete(*(void **)v716);
}

void sub_2236F4768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a64;
  char a66;
  uint64_t v66;

  if (LOBYTE(STACK[0x348]) && SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC(v66 - 192);
  sub_22370D318(&a64);
  if (STACK[0x4B8] && &STACK[0x4C0] != (unint64_t *)STACK[0x4A8])
    operator delete((void *)STACK[0x4A8]);
  if (STACK[0x510] && &STACK[0x518] != (unint64_t *)STACK[0x500])
    operator delete((void *)STACK[0x500]);
  if (STACK[0x568] && &STACK[0x570] != (unint64_t *)STACK[0x558])
    operator delete((void *)STACK[0x558]);
  if (STACK[0x5C0])
  {
    if (&STACK[0x5C8] != (unint64_t *)STACK[0x5B0])
      operator delete((void *)STACK[0x5B0]);
  }
  sub_22318A1C8(&STACK[0x610]);
  sub_2236C4000((uint64_t)&a66);
  _Unwind_Resume(a1);
}

void sub_2236F5384(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC0C8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC0C8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC0C0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC0C8);
  }
  *a1 = qword_2540CC0C0;
}

void sub_2236F5420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC0C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC0C8);
  _Unwind_Resume(a1);
}

uint64_t sub_2236F5478(uint64_t *a1, uint64_t (***a2)(), uint64_t (***a3)(), char a4)
{
  uint64_t (***v7)();
  uint64_t (***v8)();
  uint64_t (***v9)();
  uint64_t (***v10)();
  uint64_t (***v11)();
  uint64_t (****v12)();
  uint64_t (**v13)();
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  uint64_t (****v17)();
  uint64_t (****v18)();
  uint64_t (***v19)();
  uint64_t v20;
  uint64_t v21;
  uint64_t (***v22)();
  uint64_t (***v23)();
  uint64_t (***v24)();
  uint64_t (***v25)();
  uint64_t (***v26)();
  uint64_t (***v27)();
  uint64_t (***v28)();
  uint64_t (****v29)();
  uint64_t (***v30)();
  uint64_t (****v31)();
  uint64_t (***v32)();
  uint64_t (****v33)();
  uint64_t (***v34)();
  uint64_t (***v35)();
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (****v42)();
  uint64_t (***v43)();
  uint64_t (****v44)();
  uint64_t (***v45)();
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (***v51)();
  uint64_t v52;
  uint64_t v53;
  uint64_t (***v54)();
  uint64_t v55;
  uint64_t (***v56)();
  uint64_t v57;
  uint64_t (***v58)();
  uint64_t v59;
  uint64_t (***v60)();
  uint64_t (***v61)();
  uint64_t (***v62)();
  unint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t (***v72)();
  uint64_t v73;
  uint64_t (***v74)();
  uint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t (***v78)();
  uint64_t result;
  uint64_t (***v80)();
  uint64_t v81;
  uint64_t (***v82)();
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (***v86)();
  uint64_t (***v87)();
  uint64_t (****v88)();
  uint64_t (***v89)();
  uint64_t (***v90)();
  uint64_t (****v91)();
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t (***v95)();
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t (***v103)();
  uint64_t (***v104)();
  uint64_t (****p_i)();
  uint64_t (***v106)();
  unint64_t v107;
  uint64_t (***v108)();
  uint64_t (***v109)();
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t (***v121)();
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t (***v125)();
  _QWORD v126[3];
  uint64_t (***v127)();
  __int128 v128;
  _QWORD v129[3];
  uint64_t (***v130)();
  uint64_t (***v131)();
  uint64_t (***v132)();
  _QWORD v133[3];
  uint64_t (***v134)();
  uint64_t (***v135)();
  uint64_t (***v136)();
  _QWORD v137[3];
  uint64_t (***v138)();
  uint64_t (***v139)();
  uint64_t (***j)();
  _QWORD v141[3];
  uint64_t (***v142)();
  __int128 v143;
  uint64_t (***v144)();
  _QWORD v145[2];
  uint64_t (***v146)();
  uint64_t (***v147)();
  uint64_t (***v148)();
  uint64_t (***v149)();
  _QWORD v150[3];
  _QWORD *v151;
  uint64_t (***v152)();
  uint64_t (***v153)();
  _QWORD v154[3];
  _QWORD *v155;
  uint64_t (***v156)();
  uint64_t (***v157)();
  _QWORD v158[3];
  _QWORD *v159;
  uint64_t (***v160)();
  uint64_t (***v161)();
  _QWORD v162[3];
  uint64_t (***v163)();
  uint64_t (***v164)();
  uint64_t (***v165)();
  _QWORD v166[3];
  uint64_t (***v167)();
  uint64_t (***v168)();
  uint64_t (***v169)();
  _QWORD v170[3];
  uint64_t (***v171)();
  uint64_t (***v172)();
  uint64_t (***v173)();
  _QWORD v174[3];
  uint64_t (***v175)();
  uint64_t (***v176)();
  uint64_t (***v177)();
  uint64_t (**v178)();
  char v179;
  uint64_t (***v180)();
  uint64_t (***v181)();
  uint64_t (***i)();
  uint64_t (**v183)();
  char v184;
  uint64_t (***v185)();
  uint64_t (***v186)();
  uint64_t v187;

  v187 = *MEMORY[0x24BDAC8D0];
  i = a2;
  v183 = &off_24EC57BD0;
  v184 = a4;
  v7 = &v183;
  v185 = &v183;
  v186 = a3;
  if (a2 == a3)
  {
    v9 = &v183;
  }
  else
  {
    v8 = &v183;
    while (!((unsigned int (*)(uint64_t (***)()))(*v8)[6])(v8))
    {
      a2 = i + 31;
      i = a2;
      if (a2 == v186)
        goto LABEL_9;
      v8 = v185;
      if (!v185)
        sub_223198474();
    }
    a2 = i;
LABEL_9:
    v9 = v185;
  }
  v10 = &v178;
  v177 = a3;
  v178 = &off_24EC57BD0;
  v179 = a4;
  v180 = &v178;
  v181 = a3;
  j = a2;
  v11 = (uint64_t (***)())v141;
  if (!v9)
  {
    v12 = &v142;
    goto LABEL_14;
  }
  if (v9 != &v183)
  {
    v12 = &v185;
    v142 = v9;
LABEL_14:
    *v12 = 0;
    *(_QWORD *)&v143 = v186;
    *((_QWORD *)&v143 + 1) = a3;
    v13 = &off_24EC57BD0;
    goto LABEL_15;
  }
  v142 = (uint64_t (***)())v141;
  ((void (*)(uint64_t (***)(), _QWORD *))v183[3])(&v183, v141);
  *(_QWORD *)&v143 = v186;
  *((_QWORD *)&v143 + 1) = v177;
  if (!v180)
  {
    v146 = 0;
    v14 = 0;
    v147 = v181;
    if (&v178)
      goto LABEL_16;
    goto LABEL_21;
  }
  if (v180 != &v178)
  {
    v146 = v180;
    v180 = 0;
    v14 = 0;
    v147 = v181;
    if (&v178)
      goto LABEL_16;
LABEL_21:
    v15 = 4;
    goto LABEL_22;
  }
  v13 = v178;
LABEL_15:
  v146 = (uint64_t (***)())&v144;
  ((void (*)(uint64_t (***)()))v13[3])(&v178);
  v14 = v180;
  v147 = v181;
  if (v180 == &v178)
    goto LABEL_21;
LABEL_16:
  if (!v14)
    goto LABEL_23;
  v15 = 5;
  v10 = v14;
LABEL_22:
  ((void (*)(uint64_t (***)()))(*v10)[v15])(v10);
LABEL_23:
  if (v185 == &v183)
  {
    v16 = 4;
  }
  else
  {
    if (!v185)
      goto LABEL_28;
    v16 = 5;
    v7 = v185;
  }
  ((void (*)(uint64_t (***)()))(*v7)[v16])(v7);
LABEL_28:
  v125 = j;
  v17 = &v125;
  if (!v142)
  {
LABEL_31:
    v17[4] = 0;
    goto LABEL_33;
  }
  if (v142 != v141)
  {
    v17 = &j;
    v127 = v142;
    goto LABEL_31;
  }
  v127 = (uint64_t (***)())v126;
  (*(void (**)(_QWORD *, _QWORD *))(v141[0] + 24))(v141, v126);
LABEL_33:
  v128 = v143;
  v18 = &v125;
  if (!v146)
  {
LABEL_36:
    v18[10] = 0;
    goto LABEL_38;
  }
  v18 = &j;
  if (v146 != (uint64_t (***)())&v144)
  {
    v130 = v146;
    goto LABEL_36;
  }
  v130 = (uint64_t (***)())v129;
  ((void (*)(void))v144[3])();
LABEL_38:
  v19 = v146;
  v131 = v147;
  if (v146 == (uint64_t (***)())&v144)
  {
    v20 = 4;
    v19 = (uint64_t (***)())&v144;
  }
  else
  {
    if (!v146)
      goto LABEL_43;
    v20 = 5;
  }
  (*v19)[v20]();
LABEL_43:
  if (v142 == v141)
  {
    v21 = 4;
  }
  else
  {
    if (!v142)
      goto LABEL_48;
    v21 = 5;
    v11 = v142;
  }
  ((void (*)(uint64_t (***)()))(*v11)[v21])(v11);
LABEL_48:
  v22 = v125;
  v23 = v127;
  v165 = v125;
  v24 = (uint64_t (***)())v166;
  if (!v127)
  {
    v167 = 0;
    v168 = (uint64_t (***)())v128;
    v173 = v125;
    v25 = (uint64_t (***)())v174;
    goto LABEL_56;
  }
  if (v127 == v126)
  {
    v167 = (uint64_t (***)())v166;
    (*(void (**)(_QWORD *, _QWORD *))(v126[0] + 24))(v126, v166);
    v23 = v167;
    v168 = (uint64_t (***)())v128;
    v173 = v165;
    v25 = (uint64_t (***)())v174;
    if (v167)
      goto LABEL_54;
LABEL_56:
    v175 = v23;
    goto LABEL_57;
  }
  v23 = (uint64_t (***)())(*v127)[2]();
  v167 = v23;
  v168 = (uint64_t (***)())v128;
  v173 = v22;
  v25 = (uint64_t (***)())v174;
  if (!v23)
    goto LABEL_56;
LABEL_54:
  if (v23 != v166)
  {
    v23 = (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))(*v23)[2])(v23);
    goto LABEL_56;
  }
  v175 = (uint64_t (***)())v174;
  (*(void (**)(_QWORD *, _QWORD *))(v166[0] + 24))(v166, v174);
LABEL_57:
  v176 = v168;
  v26 = v130;
  v161 = (uint64_t (***)())*((_QWORD *)&v128 + 1);
  v27 = (uint64_t (***)())v162;
  if (!v130)
  {
    v163 = 0;
    v164 = v131;
    v169 = (uint64_t (***)())*((_QWORD *)&v128 + 1);
    v28 = (uint64_t (***)())v170;
LABEL_65:
    v171 = v26;
    goto LABEL_66;
  }
  if (v130 == v129)
  {
    v163 = (uint64_t (***)())v162;
    (*(void (**)(_QWORD *, _QWORD *))(v129[0] + 24))(v129, v162);
    v26 = v163;
  }
  else
  {
    v26 = (uint64_t (***)())(*v130)[2]();
    v163 = v26;
  }
  v164 = v131;
  v169 = v161;
  v28 = (uint64_t (***)())v170;
  if (!v26)
    goto LABEL_65;
  if (v26 != v162)
  {
    v26 = (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))(*v26)[2])(v26);
    goto LABEL_65;
  }
  v171 = (uint64_t (***)())v170;
  (*(void (**)(_QWORD *, _QWORD *))(v162[0] + 24))(v162, v170);
LABEL_66:
  v172 = v164;
  i = v173;
  v29 = &i;
  v30 = &v183;
  if (!v175)
  {
LABEL_69:
    v29[4] = 0;
    goto LABEL_71;
  }
  if (v175 != v174)
  {
    v29 = &v173;
    v185 = v175;
    goto LABEL_69;
  }
  v185 = &v183;
  (*(void (**)(_QWORD *, uint64_t (***)()))(v174[0] + 24))(v174, &v183);
LABEL_71:
  v186 = v176;
  v177 = v169;
  v31 = &v177;
  v32 = &v178;
  if (!v171)
  {
LABEL_74:
    v31[4] = 0;
    goto LABEL_76;
  }
  if (v171 != v170)
  {
    v31 = &v169;
    v180 = v171;
    goto LABEL_74;
  }
  v180 = &v178;
  (*(void (**)(_QWORD *, uint64_t (***)()))(v170[0] + 24))(v170, &v178);
LABEL_76:
  v181 = v172;
  j = i;
  v33 = &j;
  v34 = (uint64_t (***)())v141;
  if (!v185)
  {
LABEL_79:
    v33[4] = 0;
    goto LABEL_81;
  }
  if (v185 != &v183)
  {
    v33 = &i;
    v142 = v185;
    goto LABEL_79;
  }
  v142 = (uint64_t (***)())v141;
  ((void (*)(uint64_t (***)(), _QWORD *))v183[3])(&v183, v141);
LABEL_81:
  *(_QWORD *)&v143 = v186;
  v144 = v177;
  v35 = (uint64_t (***)())v145;
  if (v180)
  {
    if (v180 == &v178)
    {
      v147 = (uint64_t (***)())v145;
      ((void (*)(uint64_t (***)(), _QWORD *))v178[3])(&v178, v145);
    }
    else
    {
      v147 = v180;
      v180 = 0;
    }
  }
  else
  {
    v147 = 0;
  }
  v148 = v181;
  if (v180 == &v178)
  {
    v36 = 4;
  }
  else
  {
    if (!v180)
      goto LABEL_91;
    v36 = 5;
    v32 = v180;
  }
  ((void (*)(uint64_t (***)()))(*v32)[v36])(v32);
LABEL_91:
  if (v185 == &v183)
  {
    v37 = 4;
  }
  else
  {
    if (!v185)
      goto LABEL_96;
    v37 = 5;
    v30 = v185;
  }
  ((void (*)(uint64_t (***)()))(*v30)[v37])(v30);
LABEL_96:
  if (v171 == v170)
  {
    v38 = 4;
  }
  else
  {
    if (!v171)
      goto LABEL_101;
    v38 = 5;
    v28 = v171;
  }
  ((void (*)(uint64_t (***)()))(*v28)[v38])(v28);
LABEL_101:
  if (v163 == v162)
  {
    v39 = 4;
  }
  else
  {
    if (!v163)
      goto LABEL_106;
    v39 = 5;
    v27 = v163;
  }
  ((void (*)(uint64_t (***)()))(*v27)[v39])(v27);
LABEL_106:
  if (v175 == v174)
  {
    v40 = 4;
  }
  else
  {
    if (!v175)
      goto LABEL_111;
    v40 = 5;
    v25 = v175;
  }
  ((void (*)(uint64_t (***)()))(*v25)[v40])(v25);
LABEL_111:
  if (v167 == v166)
  {
    v41 = 4;
  }
  else
  {
    if (!v167)
      goto LABEL_116;
    v41 = 5;
    v24 = v167;
  }
  ((void (*)(uint64_t (***)()))(*v24)[v41])(v24);
LABEL_116:
  v132 = j;
  v42 = &v132;
  v43 = (uint64_t (***)())v133;
  if (!v142)
  {
LABEL_119:
    v42[4] = 0;
    goto LABEL_121;
  }
  if (v142 != v141)
  {
    v42 = &j;
    v134 = v142;
    goto LABEL_119;
  }
  v134 = (uint64_t (***)())v133;
  (*(void (**)(_QWORD *, _QWORD *))(v141[0] + 24))(v141, v133);
LABEL_121:
  v135 = (uint64_t (***)())v143;
  v136 = v144;
  v44 = &v132;
  v45 = (uint64_t (***)())v137;
  if (!v147)
  {
LABEL_124:
    v44[11] = 0;
    goto LABEL_126;
  }
  if (v147 != v145)
  {
    v44 = &j;
    v138 = v147;
    goto LABEL_124;
  }
  v138 = (uint64_t (***)())v137;
  (*(void (**)(_QWORD *, _QWORD *))(v145[0] + 24))(v145, v137);
LABEL_126:
  v139 = v148;
  if (v147 == v145)
  {
    v46 = 4;
  }
  else
  {
    if (!v147)
      goto LABEL_131;
    v46 = 5;
    v35 = v147;
  }
  ((void (*)(uint64_t (***)()))(*v35)[v46])(v35);
LABEL_131:
  if (v142 == v141)
  {
    v47 = 4;
  }
  else
  {
    if (!v142)
      goto LABEL_136;
    v47 = 5;
    v34 = v142;
  }
  ((void (*)(uint64_t (***)()))(*v34)[v47])(v34);
LABEL_136:
  v48 = (uint64_t)v134;
  v153 = v132;
  if (!v134)
  {
LABEL_139:
    v155 = (_QWORD *)v48;
    goto LABEL_141;
  }
  if (v134 != v133)
  {
    v48 = (*v134)[2]();
    goto LABEL_139;
  }
  v155 = v154;
  (*(void (**)(_QWORD *, _QWORD *))(v133[0] + 24))(v133, v154);
LABEL_141:
  v156 = v135;
  v149 = v136;
  v49 = (uint64_t)v138;
  if (!v138)
  {
LABEL_144:
    v151 = (_QWORD *)v49;
    goto LABEL_146;
  }
  if (v138 != v137)
  {
    v49 = (*v138)[2]();
    goto LABEL_144;
  }
  v151 = v150;
  (*(void (**)(_QWORD *, _QWORD *))(v137[0] + 24))(v137, v150);
LABEL_146:
  v152 = v139;
  *a1 = (uint64_t)(a1 + 3);
  *(_OWORD *)(a1 + 1) = xmmword_22464B030;
  v50 = (uint64_t)v155;
  v161 = v153;
  v51 = (uint64_t (***)())v162;
  if (!v155)
  {
LABEL_149:
    v163 = (uint64_t (***)())v50;
    goto LABEL_151;
  }
  if (v155 != v154)
  {
    v50 = (*(uint64_t (**)(void))(*v155 + 16))();
    goto LABEL_149;
  }
  v163 = (uint64_t (***)())v162;
  (*(void (**)(_QWORD *, _QWORD *))(v154[0] + 24))(v154, v162);
LABEL_151:
  v164 = v156;
  v52 = (uint64_t)v151;
  v157 = v149;
  if (!v151)
  {
LABEL_154:
    v159 = (_QWORD *)v52;
    goto LABEL_156;
  }
  if (v151 != v150)
  {
    v52 = (*(uint64_t (**)(void))(*v151 + 16))();
    goto LABEL_154;
  }
  v159 = v158;
  (*(void (**)(_QWORD *, _QWORD *))(v150[0] + 24))(v150, v158);
LABEL_156:
  v160 = v152;
  v53 = (uint64_t)v163;
  v177 = v161;
  v54 = &v178;
  if (!v163)
  {
LABEL_159:
    v180 = (uint64_t (***)())v53;
    goto LABEL_161;
  }
  if (v163 != v162)
  {
    v53 = (*v163)[2]();
    goto LABEL_159;
  }
  v180 = &v178;
  (*(void (**)(_QWORD *, uint64_t (***)()))(v162[0] + 24))(v162, &v178);
LABEL_161:
  v181 = v164;
  v55 = (uint64_t)v159;
  v173 = v157;
  v56 = (uint64_t (***)())v174;
  if (!v159)
  {
LABEL_164:
    v175 = (uint64_t (***)())v55;
    goto LABEL_166;
  }
  if (v159 != v158)
  {
    v55 = (*(uint64_t (**)(void))(*v159 + 16))();
    goto LABEL_164;
  }
  v175 = (uint64_t (***)())v174;
  (*(void (**)(_QWORD *, _QWORD *))(v158[0] + 24))(v158, v174);
LABEL_166:
  v176 = v160;
  v57 = (uint64_t)v180;
  j = v177;
  v58 = (uint64_t (***)())v141;
  if (!v180)
  {
LABEL_169:
    v142 = (uint64_t (***)())v57;
    goto LABEL_171;
  }
  if (v180 != &v178)
  {
    v57 = (*v180)[2]();
    goto LABEL_169;
  }
  v142 = (uint64_t (***)())v141;
  ((void (*)(uint64_t (***)(), _QWORD *))v178[3])(&v178, v141);
LABEL_171:
  *(_QWORD *)&v143 = v181;
  v59 = (uint64_t)v175;
  i = v173;
  v60 = &v183;
  if (!v175)
  {
LABEL_174:
    v185 = (uint64_t (***)())v59;
    goto LABEL_176;
  }
  if (v175 != v174)
  {
    v59 = (*v175)[2]();
    goto LABEL_174;
  }
  v185 = &v183;
  (*(void (**)(_QWORD *, uint64_t (***)()))(v174[0] + 24))(v174, &v183);
LABEL_176:
  v186 = v176;
  v61 = j;
  v62 = i;
  if (j == i)
  {
    v63 = 0;
  }
  else
  {
    v63 = 0;
    do
    {
      v61 += 31;
      j = v61;
      if (v61 != (uint64_t (***)())v143)
      {
        do
        {
          if (!v142)
            sub_223198474();
          v64 = ((uint64_t (*)(uint64_t (***)()))(*v142)[6])(v142);
          v61 = j;
          if ((v64 & 1) != 0)
            break;
          v61 = j + 31;
          j = v61;
        }
        while (v61 != (uint64_t (***)())v143);
        v62 = i;
      }
      ++v63;
    }
    while (v61 != v62);
  }
  if (v185 == &v183)
  {
    v65 = 4;
  }
  else
  {
    if (!v185)
      goto LABEL_191;
    v65 = 5;
    v60 = v185;
  }
  ((void (*)(uint64_t (***)()))(*v60)[v65])(v60);
LABEL_191:
  if (v142 == v141)
  {
    v66 = 4;
  }
  else
  {
    if (!v142)
      goto LABEL_196;
    v66 = 5;
    v58 = v142;
  }
  ((void (*)(uint64_t (***)()))(*v58)[v66])(v58);
LABEL_196:
  if (v175 == v174)
  {
    v67 = 4;
  }
  else
  {
    if (!v175)
      goto LABEL_201;
    v67 = 5;
    v56 = v175;
  }
  ((void (*)(uint64_t (***)()))(*v56)[v67])(v56);
LABEL_201:
  if (v180 == &v178)
  {
    v68 = 4;
  }
  else
  {
    if (!v180)
      goto LABEL_206;
    v68 = 5;
    v54 = v180;
  }
  ((void (*)(uint64_t (***)()))(*v54)[v68])(v54);
LABEL_206:
  if (v63 <= a1[2])
  {
    v73 = (uint64_t)v163;
    v169 = v161;
    v74 = (uint64_t (***)())v170;
    if (v163)
    {
      if (v163 == v162)
      {
        v171 = (uint64_t (***)())v170;
        (*(void (**)(_QWORD *, _QWORD *))(v162[0] + 24))(v162, v170);
LABEL_222:
        v172 = v164;
        v75 = (uint64_t *)*a1;
        v76 = a1[1];
        if (v63 > v76)
        {
          v77 = (uint64_t)v171;
          i = v169;
          v78 = &v183;
          if (v171)
          {
            if (v171 == v170)
            {
              v185 = &v183;
              (*(void (**)(_QWORD *, uint64_t (***)()))(v170[0] + 24))(v170, &v183);
LABEL_282:
              v186 = v172;
              if (v76)
              {
                v102 = v76;
                do
                {
                  v103 = i;
                  *v75 = (uint64_t)i;
                  for (i = v103 + 31; i != v186; i += 31)
                  {
                    if (!v185)
                      sub_223198474();
                    if ((((uint64_t (*)(uint64_t (***)()))(*v185)[6])(v185) & 1) != 0)
                      break;
                  }
                  ++v75;
                  --v102;
                }
                while (v102);
              }
              v104 = i;
              j = i;
              p_i = &j;
              v106 = (uint64_t (***)())v141;
              if (v185)
              {
                if (v185 == &v183)
                {
                  v142 = (uint64_t (***)())v141;
                  ((void (*)(uint64_t (***)(), _QWORD *))v183[3])(&v183, v141);
                  v104 = j;
LABEL_304:
                  *(_QWORD *)&v143 = v186;
                  v109 = v171;
                  v169 = v104;
                  v171 = 0;
                  if (v109 == v170)
                  {
                    v110 = 4;
                    v109 = (uint64_t (***)())v170;
                  }
                  else
                  {
                    if (!v109)
                      goto LABEL_309;
                    v110 = 5;
                  }
                  (*v109)[v110]();
LABEL_309:
                  if (v142)
                  {
                    if (v142 == v141)
                    {
                      v171 = (uint64_t (***)())v170;
                      (*(void (**)(_QWORD *, _QWORD *))(v141[0] + 24))(v141, v170);
                    }
                    else
                    {
                      v171 = v142;
                      v142 = 0;
                    }
                  }
                  else
                  {
                    v171 = 0;
                  }
                  v172 = (uint64_t (***)())v143;
                  if (v142 == v141)
                  {
                    v111 = 4;
                  }
                  else
                  {
                    if (!v142)
                      goto LABEL_319;
                    v111 = 5;
                    v106 = v142;
                  }
                  ((void (*)(uint64_t (***)()))(*v106)[v111])(v106);
LABEL_319:
                  if (v185 == &v183)
                  {
                    v112 = 4;
                  }
                  else
                  {
                    if (!v185)
                      goto LABEL_324;
                    v112 = 5;
                    v78 = v185;
                  }
                  ((void (*)(uint64_t (***)()))(*v78)[v112])(v78);
LABEL_324:
                  result = (uint64_t)v171;
                  j = v169;
                  v80 = (uint64_t (***)())v141;
                  if (v171)
                  {
                    if (v171 == v170)
                    {
                      v142 = (uint64_t (***)())v141;
                      result = (*(uint64_t (**)(_QWORD *, _QWORD *))(v170[0] + 24))(v170, v141);
LABEL_329:
                      *(_QWORD *)&v143 = v172;
                      v114 = v63 - v76;
                      v113 = v63 == v76;
                      v96 = v154;
                      if (!v113)
                      {
                        do
                        {
                          *v75 = (uint64_t)j;
                          do
                          {
                            j += 31;
                            if (j == (uint64_t (***)())v143)
                              break;
                            if (!v142)
                              sub_223198474();
                            result = ((uint64_t (*)(uint64_t (***)()))(*v142)[6])(v142);
                          }
                          while ((result & 1) == 0);
                          ++v75;
                          --v114;
                        }
                        while (v114);
                      }
                      goto LABEL_331;
                    }
                    result = (*v171)[2]();
                  }
                  v142 = (uint64_t (***)())result;
                  goto LABEL_329;
                }
                p_i = &i;
                v142 = v185;
              }
              p_i[4] = 0;
              goto LABEL_304;
            }
            v77 = (*v171)[2]();
          }
          v185 = (uint64_t (***)())v77;
          goto LABEL_282;
        }
        result = (uint64_t)v171;
        j = v169;
        v80 = (uint64_t (***)())v141;
        if (v171)
        {
          if (v171 == v170)
          {
            v142 = (uint64_t (***)())v141;
            result = (*(uint64_t (**)(_QWORD *, _QWORD *))(v170[0] + 24))(v170, v141);
LABEL_295:
            *(_QWORD *)&v143 = v172;
            v96 = v154;
            if (v63)
            {
              v107 = v63;
              do
              {
                v108 = j;
                *v75 = (uint64_t)j;
                for (j = v108 + 31; j != (uint64_t (***)())v143; j += 31)
                {
                  if (!v142)
                    sub_223198474();
                  result = ((uint64_t (*)(uint64_t (***)()))(*v142)[6])(v142);
                  if ((result & 1) != 0)
                    break;
                }
                ++v75;
                --v107;
              }
              while (v107);
            }
LABEL_331:
            if (v142 == v141)
            {
              v115 = 4;
              v95 = (uint64_t (***)())v129;
              v93 = v158;
            }
            else
            {
              v95 = (uint64_t (***)())v129;
              v93 = v158;
              if (!v142)
                goto LABEL_342;
              v115 = 5;
              v80 = v142;
            }
            result = ((uint64_t (*)(uint64_t (***)()))(*v80)[v115])(v80);
LABEL_342:
            if (v171 == v170)
            {
              v116 = 4;
              v98 = v150;
            }
            else
            {
              v98 = v150;
              if (!v171)
                goto LABEL_347;
              v116 = 5;
              v74 = v171;
            }
            result = ((uint64_t (*)(uint64_t (***)()))(*v74)[v116])(v74);
LABEL_347:
            a1[1] = v63;
            v100 = v159;
            if (v159 != v158)
              goto LABEL_277;
LABEL_348:
            v101 = 4;
            goto LABEL_349;
          }
          result = (*v171)[2]();
        }
        v142 = (uint64_t (***)())result;
        goto LABEL_295;
      }
      v73 = (*v163)[2]();
    }
    v171 = (uint64_t (***)())v73;
    goto LABEL_222;
  }
  if (v63 >> 60)
    sub_22317521C((uint64_t)"get_next_capacity, allocator's max size reached");
  v69 = operator new(8 * v63);
  v70 = (uint64_t *)*a1;
  if (*a1)
  {
    a1[1] = 0;
    if (a1 + 3 != v70)
      operator delete(v70);
  }
  a1[1] = 0;
  a1[2] = v63;
  *a1 = (uint64_t)v69;
  v71 = (uint64_t)v163;
  v169 = v161;
  v72 = (uint64_t (***)())v170;
  if (!v163)
    goto LABEL_214;
  if (v163 != v162)
  {
    v71 = (*v163)[2]();
LABEL_214:
    v171 = (uint64_t (***)())v71;
    goto LABEL_232;
  }
  v171 = (uint64_t (***)())v170;
  (*(void (**)(_QWORD *, _QWORD *))(v162[0] + 24))(v162, v170);
LABEL_232:
  v172 = v164;
  v81 = (uint64_t)v159;
  v165 = v157;
  v82 = (uint64_t (***)())v166;
  if (!v159)
  {
LABEL_235:
    v167 = (uint64_t (***)())v81;
    goto LABEL_237;
  }
  if (v159 != v158)
  {
    v81 = (*(uint64_t (**)(void))(*v159 + 16))();
    goto LABEL_235;
  }
  v167 = (uint64_t (***)())v166;
  (*(void (**)(_QWORD *, _QWORD *))(v158[0] + 24))(v158, v166);
LABEL_237:
  v168 = v160;
  v83 = (uint64_t *)*a1;
  v84 = a1[1];
  v85 = (uint64_t)v171;
  j = v169;
  v86 = (uint64_t (***)())v141;
  if (!v171)
  {
LABEL_240:
    v142 = (uint64_t (***)())v85;
    goto LABEL_242;
  }
  if (v171 != v170)
  {
    v85 = (*v171)[2]();
    goto LABEL_240;
  }
  v142 = (uint64_t (***)())v141;
  (*(void (**)(_QWORD *, _QWORD *))(v170[0] + 24))(v170, v141);
LABEL_242:
  *(_QWORD *)&v143 = v172;
  result = (uint64_t)v167;
  i = v165;
  v87 = &v183;
  if (v167)
  {
    if (v167 == v166)
    {
      v185 = &v183;
      result = (*(uint64_t (**)(_QWORD *, uint64_t (***)()))(v166[0] + 24))(v166, &v183);
      goto LABEL_247;
    }
    result = (*v167)[2]();
  }
  v185 = (uint64_t (***)())result;
LABEL_247:
  v88 = (uint64_t (****)())&v83[v84];
  v186 = v168;
  v89 = j;
  v90 = i;
  v91 = v88;
  while (v89 != v90)
  {
    *v91 = v89;
    v89 += 31;
    j = v89;
    if (v89 != (uint64_t (***)())v143)
    {
      do
      {
        if (!v142)
          sub_223198474();
        result = ((uint64_t (*)(uint64_t (***)()))(*v142)[6])(v142);
        v89 = j;
        if ((result & 1) != 0)
          break;
        v89 = j + 31;
        j = v89;
      }
      while (v89 != (uint64_t (***)())v143);
      v90 = i;
    }
    ++v91;
  }
  if (v185 == &v183)
  {
    v92 = 4;
  }
  else
  {
    if (!v185)
      goto LABEL_261;
    v92 = 5;
    v87 = v185;
  }
  result = ((uint64_t (*)(uint64_t (***)()))(*v87)[v92])(v87);
LABEL_261:
  if (v142 == v141)
  {
    v94 = 4;
    v93 = v158;
  }
  else
  {
    v93 = v158;
    if (!v142)
      goto LABEL_266;
    v94 = 5;
    v86 = v142;
  }
  result = ((uint64_t (*)(uint64_t (***)()))(*v86)[v94])(v86);
LABEL_266:
  a1[1] += v91 - v88;
  if (v167 == v166)
  {
    v97 = 4;
    v95 = (uint64_t (***)())v129;
    v96 = v154;
  }
  else
  {
    v95 = (uint64_t (***)())v129;
    v96 = v154;
    if (!v167)
      goto LABEL_271;
    v97 = 5;
    v82 = v167;
  }
  result = ((uint64_t (*)(uint64_t (***)()))(*v82)[v97])(v82);
LABEL_271:
  if (v171 == v170)
  {
    v99 = 4;
    v98 = v150;
  }
  else
  {
    v98 = v150;
    if (!v171)
      goto LABEL_276;
    v99 = 5;
    v72 = v171;
  }
  result = ((uint64_t (*)(uint64_t (***)()))(*v72)[v99])(v72);
LABEL_276:
  v100 = v159;
  if (v159 == v158)
    goto LABEL_348;
LABEL_277:
  if (!v100)
    goto LABEL_350;
  v101 = 5;
  v93 = v100;
LABEL_349:
  result = (*(uint64_t (**)(_QWORD *))(*v93 + 8 * v101))(v93);
LABEL_350:
  if (v163 == v162)
  {
    v117 = 4;
  }
  else
  {
    if (!v163)
      goto LABEL_355;
    v117 = 5;
    v51 = v163;
  }
  result = ((uint64_t (*)(uint64_t (***)()))(*v51)[v117])(v51);
LABEL_355:
  if (v151 == v150)
  {
    v118 = 4;
  }
  else
  {
    if (!v151)
      goto LABEL_360;
    v118 = 5;
    v98 = v151;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v98 + 8 * v118))(v98);
LABEL_360:
  if (v155 == v154)
  {
    v119 = 4;
  }
  else
  {
    if (!v155)
      goto LABEL_365;
    v119 = 5;
    v96 = v155;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v96 + 8 * v119))(v96);
LABEL_365:
  if (v138 == v137)
  {
    v120 = 4;
  }
  else
  {
    if (!v138)
      goto LABEL_370;
    v120 = 5;
    v45 = v138;
  }
  result = ((uint64_t (*)(uint64_t (***)()))(*v45)[v120])(v45);
LABEL_370:
  if (v134 == v133)
  {
    v122 = 4;
    v121 = (uint64_t (***)())v126;
  }
  else
  {
    v121 = (uint64_t (***)())v126;
    if (!v134)
      goto LABEL_375;
    v122 = 5;
    v43 = v134;
  }
  result = ((uint64_t (*)(uint64_t (***)()))(*v43)[v122])(v43);
LABEL_375:
  if (v130 == v129)
  {
    v123 = 4;
  }
  else
  {
    if (!v130)
      goto LABEL_380;
    v123 = 5;
    v95 = v130;
  }
  result = ((uint64_t (*)(uint64_t (***)()))(*v95)[v123])(v95);
LABEL_380:
  if (v127 == v126)
  {
    v124 = 4;
  }
  else
  {
    if (!v127)
      return result;
    v124 = 5;
    v121 = v127;
  }
  return ((uint64_t (*)(uint64_t (***)()))(*v121)[v124])(v121);
}

void sub_2236F69C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,_QWORD *a46)
{
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if (a46 == v47)
  {
    v50 = 4;
  }
  else
  {
    if (!a46)
      goto LABEL_13;
    v50 = 5;
    v47 = a46;
  }
  (*(void (**)(_QWORD *))(*v47 + 8 * v50))(v47);
LABEL_13:
  if ((_QWORD *)STACK[0x278] == v46)
  {
    v49 = 4;
  }
  else
  {
    if (!STACK[0x278])
      goto LABEL_5;
    v49 = 5;
    v46 = (_QWORD *)STACK[0x278];
  }
  (*(void (**)(_QWORD *))(*v46 + 8 * v49))(v46);
LABEL_5:
  if (STACK[0x2B0] != v48 && !STACK[0x2B0])
    JUMPOUT(0x2236F6D5CLL);
  JUMPOUT(0x2236F6D4CLL);
}

void sub_2236F69C8()
{
  JUMPOUT(0x2236F6C6CLL);
}

void sub_2236F69D0()
{
  JUMPOUT(0x2236F6BB0);
}

void sub_2236F69D8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((_QWORD *)STACK[0x240] == v0)
  {
    v3 = 4;
  }
  else
  {
    if (!STACK[0x240])
      goto LABEL_6;
    v3 = 5;
    v0 = (_QWORD *)STACK[0x240];
  }
  (*(void (**)(_QWORD *))(*v0 + 8 * v3))(v0);
LABEL_6:
  if ((_QWORD *)STACK[0x2E8] == v2)
  {
    v4 = 4;
  }
  else
  {
    if (!STACK[0x2E8])
      goto LABEL_11;
    v4 = 5;
    v2 = (_QWORD *)STACK[0x2E8];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v4))(v2);
LABEL_11:
  if ((_QWORD *)STACK[0x278] == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!STACK[0x278])
      goto LABEL_16;
    v5 = 5;
    v1 = (_QWORD *)STACK[0x278];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_16:
  JUMPOUT(0x2236F6E40);
}

void sub_2236F6AC0()
{
  JUMPOUT(0x2236F6E40);
}

void sub_2236F6ACC()
{
  JUMPOUT(0x2236F6D5CLL);
}

void sub_2236F6AD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 - 120);
  if (v4 == v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
    _Unwind_Resume(a1);
  }
  if (v4)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v4 + 40))(*(_QWORD *)(v2 - 120));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2236F6E48);
}

void sub_2236F6B2C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  JUMPOUT(0x2236F6E48);
}

void sub_2236F6B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,_QWORD *a46)
{
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;

  __cxa_end_catch();
  if (a46 == v46)
  {
    v48 = 4;
  }
  else
  {
    if (!a46)
      goto LABEL_6;
    v48 = 5;
    v46 = a46;
  }
  (*(void (**)(_QWORD *))(*v46 + 8 * v48))(v46);
LABEL_6:
  if (STACK[0x2B0] != v47 && !STACK[0x2B0])
    JUMPOUT(0x2236F6D5CLL);
  JUMPOUT(0x2236F6D4CLL);
}

void sub_2236F6B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,_QWORD *a46)
{
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;

  if (a46 == v46)
  {
    v48 = 4;
  }
  else
  {
    if (!a46)
      goto LABEL_6;
    v48 = 5;
    v46 = a46;
  }
  (*(void (**)(_QWORD *))(*v46 + 8 * v48))(v46);
LABEL_6:
  if (STACK[0x2B0] != v47 && !STACK[0x2B0])
    JUMPOUT(0x2236F6D5CLL);
  JUMPOUT(0x2236F6D4CLL);
}

void sub_2236F6BE8(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  JUMPOUT(0x2236F6E48);
}

void sub_2236F6C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,_QWORD *a46)
{
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;

  __cxa_end_catch();
  v50 = *(_QWORD **)(v49 - 120);
  if (v50 == v48)
  {
    v51 = 4;
  }
  else
  {
    if (!v50)
      goto LABEL_6;
    v51 = 5;
    v48 = *(_QWORD **)(v49 - 120);
  }
  (*(void (**)(_QWORD *))(*v48 + 8 * v51))(v48);
LABEL_6:
  if (a46 == v47)
  {
    v52 = 4;
  }
  else
  {
    if (!a46)
      goto LABEL_11;
    v52 = 5;
    v47 = a46;
  }
  (*(void (**)(_QWORD *))(*v47 + 8 * v52))(v47);
LABEL_11:
  if (STACK[0x278] != v46)
    JUMPOUT(0x2236F6B7CLL);
  JUMPOUT(0x2236F6B9CLL);
}

void sub_2236F6C7C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_2236F6E50(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 **a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v7;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unsigned __int8 *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  const char *v38;
  size_t v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  const char *v42;
  size_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  size_t v51;
  void *v52;
  _QWORD *v53;
  size_t v54;
  size_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  char v61;
  _QWORD *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  std::string::size_type v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  void *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  void *v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  std::string::size_type v120;
  uint64_t v121;
  std::string::size_type v122;
  std::string *v123;
  std::string::size_type v124;
  std::string *v125;
  uint64_t v126;
  std::string *v127;
  std::string *v128;
  uint64_t v129;
  size_t v130;
  const char *v131;
  unsigned __int8 v132;
  const char *v133;
  size_t v134;
  _BYTE *v135;
  uint64_t v136;
  uint64_t v137;
  _BYTE *v138;
  NSObject *v139;
  uint64_t v140;
  uint64_t v141;
  size_t v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  std::string::size_type v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::string::size_type v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  int v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  void *v175;
  std::string::size_type v176;
  uint64_t v177;
  std::string::size_type v178;
  std::string *v179;
  std::string::size_type v180;
  std::string *v181;
  uint64_t v182;
  std::string *v183;
  std::string *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  std::mutex *v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  _BYTE *v195;
  _BYTE *v196;
  uint64_t v197;
  int v198;
  int v199;
  std::string *v200;
  float32x2_t v201;
  float32x4_t v202;
  __int128 v203;
  float32x2_t v204;
  float32x2_t v205;
  float32x2_t v206;
  float32x2_t v207;
  int8x16_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x2_t v211;
  float v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  int32x4_t v216;
  int32x4_t v217;
  int8x16_t v218;
  float32x4_t v219;
  __int128 v220;
  int8x16_t v221;
  int8x16_t v222;
  int8x16_t v223;
  float32x2_t v224;
  float32x2_t v225;
  float32x2_t v226;
  __int128 v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  __int128 *v237;
  __int128 v238;
  __int128 v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t *v242;
  _BOOL4 v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  _BOOL4 v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  float32x4_t v254;
  float32x2_t v255;
  float32x2_t v256;
  float32x2_t v257;
  float32x2_t v258;
  int8x16_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x2_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  std::mutex *v270;
  uint64_t v271;
  uint64_t v272;
  char v273;
  std::string::size_type v274;
  std::string *p_p;
  uint64_t v276;
  int v277;
  int v278;
  uint64_t *v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t v285;
  std::mutex *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  int v291;
  _QWORD *v292;
  _QWORD *v293;
  void *v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  std::mutex *v298;
  uint64_t v299;
  uint64_t v300;
  char v301;
  _BYTE *v302;
  _BYTE *v303;
  uint64_t v304;
  char v305;
  char v306;
  char v307;
  char v308;
  unint64_t v309;
  _QWORD *v310;
  float32x2_t *v311;
  std::string *v312;
  __int128 v313;
  __int128 v314;
  unint64_t *v315;
  unint64_t v316;
  __int16 v317;
  unint64_t v318;
  uint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  uint64_t *v329;
  uint64_t *v330;
  void *__dst;
  uint64_t v334;
  uint64_t *v335;
  uint64_t v337;
  const char *__src;
  const char *v339;
  int v340;
  uint64_t v341;
  std::string::size_type v342;
  int32x2_t *v344;
  uint64_t v345;
  uint64_t *v346;
  uint64_t v347;
  void **v348;
  unint64_t v349;
  uint64_t (**v350)();
  __int128 v351;
  uint64_t v352;
  __int128 v353;
  __int128 v354;
  uint64_t v355;
  __int16 v356;
  char v357;
  int64x2_t v358;
  int64x2_t v359;
  uint64_t *v360;
  std::string v361;
  uint64_t v362;
  float32x2_t v363;
  float32x4_t v364[4];
  uint64_t v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  uint64_t v370;
  uint64_t *v371;
  std::string v372;
  void *v373;
  __int128 v374;
  _BYTE v375[64];
  std::__shared_weak_count *v376;
  std::string __p;
  uint64_t v378;
  std::__shared_weak_count *v379;
  std::string __s;
  _QWORD v381[2];
  _BYTE v382[64];
  uint64_t v383;
  __int16 v384;
  uint64_t v385;

  v7 = a5;
  v385 = *MEMORY[0x24BDAC8D0];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a5 + 16) - *(_QWORD *)(a5 + 8)) >> 3);
  v13 = *a6;
  v12 = a6[1];
  v365 = a3;
  v366 = v11;
  v367 = (v12 - v13) >> 4;
  v368 = 0;
  v369 = 728309616;
  kdebug_trace();
  v14 = (float32x4_t *)(a2 + 272);
  v15 = *(float32x2_t *)v7;
  v16 = *(float32x2_t *)(a2 + 272);
  v17.i32[0] = *(_DWORD *)(a2 + 280);
  v18 = *(float32x2_t *)(a2 + 288);
  v19 = *(float32x2_t *)(a2 + 304);
  v20.i32[0] = *(_DWORD *)(a2 + 312);
  v21.i64[0] = *(_QWORD *)(a2 + 320);
  v21.i32[2] = *(_DWORD *)(a2 + 328);
  v22 = (int8x16_t)vnegq_f32(v21);
  v23 = *(float32x4_t *)(v7 + 1552);
  v24 = vmulq_n_f32(v23, v17.f32[0]);
  v17.i32[1] = *(_DWORD *)(a2 + 296);
  v25 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v16, (int32x2_t)v18), *(float *)v22.i32), (float32x2_t)vzip2_s32((int32x2_t)v16, (int32x2_t)v18), *(float32x2_t *)v21.f32, 1), v17, v21, 2);
  v17.i32[0] = vmla_f32(vmls_lane_f32(vmul_f32(v19, *(float32x2_t *)v22.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v19, 1), *(float32x2_t *)v21.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), v20).u32[0];
  v26 = *(float32x4_t *)(v7 + 1568);
  v27 = *(float32x4_t *)(v7 + 1584);
  v28 = *(float32x4_t *)(v7 + 1600);
  v364[0] = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v23, v16.f32[0]), v26, v18.f32[0]), v27, v19.f32[0]), (float32x4_t)0, v28);
  v364[1] = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v23, v16, 1), v26, v18, 1), v27, v19, 1), (float32x4_t)0, v28);
  v364[2] = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v24, v26, v17.f32[1]), v27, v20.f32[0]), (float32x4_t)0, v28);
  v364[3] = vaddq_f32(v28, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v23, v25.f32[0]), v26, v25, 1), v27, v17.f32[0]));
  v362 = a2;
  v363 = v15;
  kdebug_trace();
  *(_OWORD *)&v372.__r_.__value_.__r.__words[1] = 0uLL;
  v372.__r_.__value_.__r.__words[0] = (std::string::size_type)&v372.__r_.__value_.__l.__size_;
  v29 = operator new();
  *(_QWORD *)(v29 + 128) = 0;
  *(_OWORD *)(v29 + 96) = 0u;
  *(_OWORD *)(v29 + 112) = 0u;
  *(_OWORD *)(v29 + 64) = 0u;
  *(_OWORD *)(v29 + 80) = 0u;
  *(_OWORD *)(v29 + 32) = 0u;
  *(_OWORD *)(v29 + 48) = 0u;
  *(_OWORD *)v29 = 0u;
  *(_OWORD *)(v29 + 16) = 0u;
  sub_22370F510(v29);
  *(_OWORD *)(v29 + 72) = 0u;
  *(_OWORD *)(v29 + 56) = 0u;
  *(_DWORD *)(v29 + 88) = 1065353216;
  *(_OWORD *)(v29 + 96) = 0u;
  *(_OWORD *)(v29 + 112) = 0u;
  *(_DWORD *)(v29 + 128) = 1065353216;
  v30 = a3;
  v31 = (uint64_t *)&a4[a3];
  v371 = (uint64_t *)v29;
  v334 = v30;
  v335 = (uint64_t *)a4;
  v346 = v31;
  v347 = a2;
  v344 = (int32x2_t *)(a2 + 272);
  v345 = v7;
  if (v30)
  {
    v348 = (void **)(a2 + 8);
    while (1)
    {
      v32 = *a4;
      if (sub_2231D01EC(*((_QWORD *)*a4 + 2)))
      {
        sub_22374A490(*(_QWORD *)(a2 + 232), (uint64_t)v32, (float32x2_t *)v7, v14, *(uint64_t **)(a2 + 208), (uint64_t **)&v372, (uint64_t *)&v371, v348);
      }
      else
      {
        sub_2236F5384(&v370);
        if (**(int **)(v370 + 56) <= 4)
        {
          v33 = *(unsigned __int8 *)(v370 + 72);
          v34 = sub_22322F254(v370, "OSLogSurrogateAppender", 1, 0);
          v35 = v34;
          v36 = !v33 && v34 == 0;
          if (!v36)
          {
            *(_QWORD *)v375 = &v370;
            *(std::chrono::steady_clock::time_point *)&v375[8] = std::chrono::steady_clock::now();
            *(std::chrono::system_clock::time_point *)&v375[16] = std::chrono::system_clock::now();
            *(_DWORD *)&v375[24] = 4;
            *(_QWORD *)&v375[32] = "unknown file";
            *(_DWORD *)&v375[40] = 496;
            *(_QWORD *)&v375[48] = "unknown function";
            *(_QWORD *)&v375[56] = 0;
            v376 = 0;
            sub_2245664AC(v32, &__s);
            v37 = **(_QWORD **)v375;
            v38 = (const char *)(**(_QWORD **)v375 + 16);
            v339 = v38;
            v341 = **(_QWORD **)v375;
            if (*(char *)(**(_QWORD **)v375 + 39) < 0)
            {
              v38 = *(const char **)(v37 + 16);
              v39 = *(_QWORD *)(v37 + 24);
              v41 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v41 & 1) == 0)
              {
LABEL_125:
                if (__cxa_guard_acquire(&qword_255788F58))
                {
                  sub_224568628((uint64_t)&__p);
                  sub_223199C58("com.apple.cv3d", (unint64_t)&__p, &xmmword_255788F40);
                  if ((_BYTE)v378 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                  __cxa_guard_release(&qword_255788F58);
                }
              }
            }
            else
            {
              v39 = *(unsigned __int8 *)(**(_QWORD **)v375 + 39);
              v40 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v40 & 1) == 0)
                goto LABEL_125;
            }
            if (byte_255788F57 >= 0)
              v42 = (const char *)&xmmword_255788F40;
            else
              v42 = (const char *)xmmword_255788F40;
            if (byte_255788F57 >= 0)
              v43 = byte_255788F57;
            else
              v43 = *((_QWORD *)&xmmword_255788F40 + 1);
            *(_QWORD *)v382 = os_log_create(v42, v38);
            if (v43 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v43 >= 0x17)
            {
              v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v43 | 7) != 0x17)
                v45 = v43 | 7;
              v46 = v45 + 1;
              v44 = operator new(v45 + 1);
              *(_QWORD *)&v382[16] = v43;
              *(_QWORD *)&v382[24] = v46 | 0x8000000000000000;
              *(_QWORD *)&v382[8] = v44;
            }
            else
            {
              v382[31] = v43;
              v44 = &v382[8];
              if (!v43)
              {
LABEL_29:
                v44[v43] = 0;
                v382[32] = 1;
                if (v39 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                a2 = v347;
                if (v39 >= 0x17)
                {
                  v49 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v39 | 7) != 0x17)
                    v49 = v39 | 7;
                  v50 = v49 + 1;
                  v47 = operator new(v49 + 1);
                  *(_QWORD *)&v382[48] = v39;
                  *(_QWORD *)&v382[56] = v50 | 0x8000000000000000;
                  *(_QWORD *)&v382[40] = v47;
                }
                else
                {
                  v382[63] = v39;
                  v47 = &v382[40];
                  if (!v39)
                  {
                    v382[40] = 0;
                    LOBYTE(v383) = 1;
                    v48 = *(NSObject **)v382;
                    if ((v382[63] & 0x80000000) == 0)
                      goto LABEL_33;
LABEL_39:
                    operator delete(*(void **)&v382[40]);
                    if (v382[32])
                      goto LABEL_40;
                    goto LABEL_42;
                  }
                }
                memmove(v47, v38, v39);
                v47[v39] = 0;
                LOBYTE(v383) = 1;
                v48 = *(NSObject **)v382;
                if ((v382[63] & 0x80000000) != 0)
                  goto LABEL_39;
LABEL_33:
                if (v382[32])
                {
LABEL_40:
                  if ((v382[31] & 0x80000000) != 0)
                    operator delete(*(void **)&v382[8]);
                }
LABEL_42:
                if (*(_QWORD *)v382)
                  os_release(*(void **)v382);
                if (v35 && *(_QWORD *)(v35 + 24))
                {
                  v51 = _os_log_pack_size();
                  v52 = operator new(v51, (std::align_val_t)8uLL);
                  v53 = (_QWORD *)operator new();
                  *v53 = &off_24EC1F7F0;
                  v53[1] = 0;
                  v53[2] = 0;
                  v53[3] = v52;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
                  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v52;
                  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v53;
                  v378 = 0;
                  v379 = 0;
                  v54 = strlen((const char *)&__s);
                  if (v54 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v55 = v54;
                  if (v54 >= 0x17)
                  {
                    v58 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v54 | 7) != 0x17)
                      v58 = v54 | 7;
                    v59 = v58 + 1;
                    v56 = operator new(v58 + 1);
                    *((_QWORD *)&v374 + 1) = v59 | 0x8000000000000000;
                    v373 = v56;
                    *(_QWORD *)&v374 = v55;
                  }
                  else
                  {
                    HIBYTE(v374) = v54;
                    v56 = &v373;
                    if (!v54)
                      goto LABEL_57;
                  }
                  memcpy(v56, &__s, v55);
LABEL_57:
                  *((_BYTE *)v56 + v55) = 0;
                  v60 = v373;
                  v381[0] = v374;
                  *(_QWORD *)((char *)v381 + 7) = *(_QWORD *)((char *)&v374 + 7);
                  v61 = HIBYTE(v374);
                  v62 = operator new(0x38uLL);
                  v62[1] = 0;
                  v62[2] = 0;
                  v62[3] = off_24EC1FA48;
                  *v62 = &off_24EC1F9F8;
                  v63 = v381[0];
                  v62[4] = v60;
                  v62[5] = v63;
                  *(_QWORD *)((char *)v62 + 47) = *(_QWORD *)((char *)v381 + 7);
                  *((_BYTE *)v62 + 55) = v61;
                  v381[0] = 0;
                  *(_QWORD *)((char *)v381 + 7) = 0;
                  v64 = v379;
                  v378 = (uint64_t)(v62 + 3);
                  v379 = (std::__shared_weak_count *)v62;
                  if (v64)
                  {
                    p_shared_owners = (unint64_t *)&v64->__shared_owners_;
                    do
                      v66 = __ldaxr(p_shared_owners);
                    while (__stlxr(v66 - 1, p_shared_owners));
                    if (!v66)
                    {
                      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                      std::__shared_weak_count::__release_weak(v64);
                    }
                  }
                  *(std::string *)v382 = __p;
                  v67 = v378;
                  if (__p.__r_.__value_.__r.__words[2])
                  {
                    v68 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
                    do
                      v69 = __ldxr(v68);
                    while (__stxr(v69 + 1, v68));
                  }
                  v70 = v379;
                  *(_QWORD *)&v382[24] = v67;
                  *(_QWORD *)&v382[32] = v379;
                  if (v379)
                  {
                    v71 = (unint64_t *)&v379->__shared_owners_;
                    do
                      v72 = __ldxr(v71);
                    while (__stxr(v72 + 1, v71));
                    *(_QWORD *)&v382[40] = v67;
                    do
                      v73 = __ldaxr(v71);
                    while (__stlxr(v73 - 1, v71));
                    if (!v73)
                    {
                      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                      std::__shared_weak_count::__release_weak(v70);
                    }
                  }
                  else
                  {
                    *(_QWORD *)&v382[40] = v67;
                  }
                  v74 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
                  if (__p.__r_.__value_.__r.__words[2])
                  {
                    v75 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
                    do
                      v76 = __ldaxr(v75);
                    while (__stlxr(v76 - 1, v75));
                    if (!v76)
                    {
                      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                      std::__shared_weak_count::__release_weak(v74);
                    }
                  }
                  v77 = *(_QWORD *)v382;
                  if (*(char *)(*(_QWORD *)&v382[40] + 31) >= 0)
                    v78 = *(_QWORD *)&v382[40] + 8;
                  else
                    v78 = *(_QWORD *)(*(_QWORD *)&v382[40] + 8);
                  v79 = _os_log_pack_fill();
                  *(_DWORD *)v79 = 68157954;
                  *(_DWORD *)(v79 + 4) = 13;
                  *(_WORD *)(v79 + 8) = 2080;
                  *(_QWORD *)(v79 + 10) = v78;
                  v80 = operator new();
                  v81 = *(unsigned __int8 *)(v341 + 39);
                  v82 = v339;
                  if ((v81 & 0x80u) != 0)
                  {
                    v82 = *(const char **)(v341 + 16);
                    v81 = *(_QWORD *)(v341 + 24);
                  }
                  *(_QWORD *)v80 = v77;
                  *(_OWORD *)(v80 + 8) = *(_OWORD *)&v382[8];
                  *(_OWORD *)&v382[8] = 0uLL;
                  *(_OWORD *)(v80 + 24) = *(_OWORD *)&v382[24];
                  *(_QWORD *)&v382[24] = 0;
                  *(_QWORD *)&v382[32] = 0;
                  *(_QWORD *)(v80 + 40) = v82;
                  *(_QWORD *)(v80 + 48) = v81;
                  *(_BYTE *)(v80 + 56) = 16;
                  v373 = 0;
                  __p.__r_.__value_.__r.__words[0] = v80;
                  (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v35 + 24) + 40))(*(_QWORD *)(v35 + 24), &__p);
                  v83 = __p.__r_.__value_.__r.__words[0];
                  __p.__r_.__value_.__r.__words[0] = 0;
                  if (v83)
                  {
                    v84 = *(std::__shared_weak_count **)(v83 + 32);
                    if (v84)
                    {
                      v85 = (unint64_t *)&v84->__shared_owners_;
                      do
                        v86 = __ldaxr(v85);
                      while (__stlxr(v86 - 1, v85));
                      if (!v86)
                      {
                        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                        std::__shared_weak_count::__release_weak(v84);
                      }
                    }
                    v87 = *(std::__shared_weak_count **)(v83 + 16);
                    if (v87)
                    {
                      v88 = (unint64_t *)&v87->__shared_owners_;
                      do
                        v89 = __ldaxr(v88);
                      while (__stlxr(v89 - 1, v88));
                      if (!v89)
                      {
                        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                        std::__shared_weak_count::__release_weak(v87);
                      }
                    }
                    MEMORY[0x227684CE8](v83, 0x10F0C40B62ED6C6);
                    v90 = v373;
                    v373 = 0;
                    if (v90)
                    {
                      v91 = (std::__shared_weak_count *)*((_QWORD *)v90 + 4);
                      if (v91)
                      {
                        v92 = (unint64_t *)&v91->__shared_owners_;
                        do
                          v93 = __ldaxr(v92);
                        while (__stlxr(v93 - 1, v92));
                        if (!v93)
                        {
                          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                          std::__shared_weak_count::__release_weak(v91);
                        }
                      }
                      v94 = (std::__shared_weak_count *)*((_QWORD *)v90 + 2);
                      if (v94)
                      {
                        v95 = (unint64_t *)&v94->__shared_owners_;
                        do
                          v96 = __ldaxr(v95);
                        while (__stlxr(v96 - 1, v95));
                        if (!v96)
                        {
                          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                          std::__shared_weak_count::__release_weak(v94);
                        }
                      }
                      MEMORY[0x227684CE8](v90, 0x10F0C40B62ED6C6);
                    }
                  }
                  v97 = *(std::__shared_weak_count **)&v382[32];
                  v14 = (float32x4_t *)v344;
                  v7 = v345;
                  if (*(_QWORD *)&v382[32])
                  {
                    v98 = (unint64_t *)(*(_QWORD *)&v382[32] + 8);
                    do
                      v99 = __ldaxr(v98);
                    while (__stlxr(v99 - 1, v98));
                    if (!v99)
                    {
                      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                      std::__shared_weak_count::__release_weak(v97);
                    }
                  }
                  v100 = *(std::__shared_weak_count **)&v382[16];
                  if (!*(_QWORD *)&v382[16])
                    goto LABEL_115;
                  v101 = (unint64_t *)(*(_QWORD *)&v382[16] + 8);
                  do
                    v102 = __ldaxr(v101);
                  while (__stlxr(v102 - 1, v101));
                  if (v102)
                  {
LABEL_115:
                    if (v33)
                      goto LABEL_116;
LABEL_117:
                    sub_223182C08((uint64_t)v375);
                    v103 = v376;
                    if (v376)
                    {
                      v104 = (unint64_t *)&v376->__shared_owners_;
                      do
                        v105 = __ldaxr(v104);
                      while (__stlxr(v105 - 1, v104));
                      if (!v105)
                      {
                        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                        std::__shared_weak_count::__release_weak(v103);
                      }
                    }
                    v31 = v346;
                    goto LABEL_4;
                  }
                  ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                  std::__shared_weak_count::__release_weak(v100);
                  if (!v33)
                    goto LABEL_117;
                }
                else
                {
                  os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
                  *(_QWORD *)v382 = 0xD04100202;
                  *(_WORD *)&v382[8] = 2080;
                  *(_QWORD *)&v382[10] = &__s;
                  v57 = (void *)_os_log_send_and_compose_impl();
                  v14 = (float32x4_t *)v344;
                  v7 = v345;
                  if (!v57)
                    goto LABEL_115;
                  free(v57);
                  if (!v33)
                    goto LABEL_117;
                }
LABEL_116:
                sub_2245664AC(v32, v382);
                sub_22322C138((uint64_t)v375, "ProcessKeyframeContentUpdates: KF %.13s not valid", v382);
                sub_223182C08((uint64_t)v375);
                goto LABEL_117;
              }
            }
            memmove(v44, v42, v43);
            goto LABEL_29;
          }
        }
      }
LABEL_4:
      if (++a4 == (unsigned __int8 **)v31)
      {
        v29 = (uint64_t)v371;
        break;
      }
    }
  }
  sub_22370D35C(v29, v382);
  kdebug_trace();
  v106 = *(_QWORD *)v382;
  if (*(_QWORD *)v382)
  {
    v107 = *(_QWORD *)&v382[8];
    v108 = *(void **)v382;
    if (*(_QWORD *)&v382[8] != *(_QWORD *)v382)
    {
      v109 = *(_QWORD *)&v382[8];
      do
      {
        v111 = *(void **)(v109 - 24);
        v109 -= 24;
        v110 = v111;
        if (v111)
        {
          *(_QWORD *)(v107 - 16) = v110;
          operator delete(v110);
        }
        v107 = v109;
      }
      while (v109 != v106);
      v108 = *(void **)v382;
    }
    *(_QWORD *)&v382[8] = v106;
    operator delete(v108);
  }
  v360 = v371;
  v361 = v372;
  if (v372.__r_.__value_.__r.__words[2])
  {
    *(_QWORD *)(v372.__r_.__value_.__l.__size_ + 16) = &v361.__r_.__value_.__l.__size_;
    v372.__r_.__value_.__r.__words[0] = (std::string::size_type)&v372.__r_.__value_.__l.__size_;
    *(_OWORD *)&v372.__r_.__value_.__r.__words[1] = 0uLL;
    sub_223198030((uint64_t)&v372, 0);
    if (*a6 == a6[1])
      goto LABEL_152;
  }
  else
  {
    v361.__r_.__value_.__r.__words[0] = (std::string::size_type)&v361.__r_.__value_.__l.__size_;
    sub_223198030((uint64_t)&v372, (_QWORD *)v372.__r_.__value_.__l.__size_);
    if (*a6 == a6[1])
      goto LABEL_152;
  }
  if (*(_QWORD *)(v7 + 8) != *(_QWORD *)(v7 + 16))
  {
    kdebug_trace();
    if (sub_2236D1830(*(_QWORD *)(a2 + 240), (uint64_t *)&v360))
    {
      v113 = *a6;
      v112 = a6[1];
      if (*a6 != v112)
      {
        v114 = 0;
        do
        {
          v115 = sub_22342DA5C(*(_QWORD **)(a2 + 208), v113);
          if (v115)
          {
            if (v114 > 5)
              break;
            sub_22374AE30(*(_QWORD *)(a2 + 232), v115[4], (uint64_t *)v345, v364, (uint64_t *)&v360);
            ++v114;
          }
          v113 += 16;
        }
        while (v113 != v112);
      }
    }
    kdebug_trace();
  }
LABEL_152:
  v116 = v362;
  sub_2236EC60C(&v373);
  if (**((int **)v373 + 7) > 3)
    goto LABEL_280;
  v117 = *((unsigned __int8 *)v373 + 72);
  v118 = sub_22322F254((uint64_t)v373, "OSLogSurrogateAppender", 1, 0);
  v119 = v118;
  if (!v117 && !v118)
    goto LABEL_280;
  *(_QWORD *)v375 = &v373;
  *(std::chrono::steady_clock::time_point *)&v375[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v375[16] = std::chrono::system_clock::now();
  *(_DWORD *)&v375[24] = 3;
  *(_QWORD *)&v375[32] = "unknown file";
  *(_DWORD *)&v375[40] = 561;
  v376 = 0;
  *(_QWORD *)&v375[48] = "unknown function";
  *(_QWORD *)&v375[56] = 0;
  v120 = v361.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v361.__r_.__value_.__l.__data_ == &v361.__r_.__value_.__r.__words[1])
  {
    v121 = 0;
    v126 = 0;
  }
  else
  {
    v121 = 0;
    v122 = v361.__r_.__value_.__r.__words[0];
    do
    {
      v123 = *(std::string **)(v122 + 8);
      v124 = v122;
      if (v123)
      {
        do
        {
          v125 = v123;
          v123 = (std::string *)v123->__r_.__value_.__r.__words[0];
        }
        while (v123);
      }
      else
      {
        do
        {
          v125 = *(std::string **)(v124 + 16);
          v36 = v125->__r_.__value_.__r.__words[0] == v124;
          v124 = (std::string::size_type)v125;
        }
        while (!v36);
      }
      v121 += *(_DWORD *)(v122 + 44) & 1;
      v122 = (std::string::size_type)v125;
    }
    while (v125 != (std::string *)&v361.__r_.__value_.__r.__words[1]);
    v126 = 0;
    do
    {
      if ((*(_BYTE *)(v120 + 44) & 6) != 0)
        ++v126;
      v127 = *(std::string **)(v120 + 8);
      if (v127)
      {
        do
        {
          v128 = v127;
          v127 = (std::string *)v127->__r_.__value_.__r.__words[0];
        }
        while (v127);
      }
      else
      {
        do
        {
          v128 = *(std::string **)(v120 + 16);
          v36 = v128->__r_.__value_.__r.__words[0] == v120;
          v120 = (std::string::size_type)v128;
        }
        while (!v36);
      }
      v120 = (std::string::size_type)v128;
    }
    while (v128 != (std::string *)&v361.__r_.__value_.__r.__words[1]);
  }
  v340 = v117;
  v129 = **(_QWORD **)v375;
  v337 = **(_QWORD **)v375;
  if (*(char *)(**(_QWORD **)v375 + 39) < 0)
  {
    v131 = *(const char **)(v129 + 16);
    v130 = *(_QWORD *)(v129 + 24);
  }
  else
  {
    v130 = *(unsigned __int8 *)(**(_QWORD **)v375 + 39);
    v131 = (const char *)(**(_QWORD **)v375 + 16);
  }
  __dst = (void *)(**(_QWORD **)v375 + 16);
  v349 = v119;
  v342 = v361.__r_.__value_.__r.__words[2];
  v132 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v132 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v382);
    sub_223199C58("com.apple.cv3d", (unint64_t)v382, &xmmword_255788F40);
    if (v382[24] && (v382[23] & 0x80000000) != 0)
      operator delete(*(void **)v382);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v133 = (const char *)&xmmword_255788F40;
  else
    v133 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v134 = byte_255788F57;
  else
    v134 = *((_QWORD *)&xmmword_255788F40 + 1);
  __src = v131;
  *(_QWORD *)v382 = os_log_create(v133, v131);
  v135 = &v382[8];
  if (v134 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v134 >= 0x17)
  {
    v136 = (v134 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v134 | 7) != 0x17)
      v136 = v134 | 7;
    v137 = v136 + 1;
    v135 = operator new(v136 + 1);
    *(_QWORD *)&v382[16] = v134;
    *(_QWORD *)&v382[24] = v137 | 0x8000000000000000;
    *(_QWORD *)&v382[8] = v135;
    goto LABEL_192;
  }
  v382[31] = v134;
  if (v134)
LABEL_192:
    memmove(v135, v133, v134);
  v135[v134] = 0;
  v382[32] = 1;
  v138 = &v382[40];
  if (v130 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v130 >= 0x17)
  {
    v140 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v130 | 7) != 0x17)
      v140 = v130 | 7;
    v141 = v140 + 1;
    v138 = operator new(v140 + 1);
    *(_QWORD *)&v382[48] = v130;
    *(_QWORD *)&v382[56] = v141 | 0x8000000000000000;
    *(_QWORD *)&v382[40] = v138;
  }
  else
  {
    v382[63] = v130;
    if (!v130)
    {
      v382[40] = 0;
      LOBYTE(v383) = 1;
      v139 = *(NSObject **)v382;
      if ((v382[63] & 0x80000000) == 0)
        goto LABEL_197;
      goto LABEL_203;
    }
  }
  memmove(v138, __src, v130);
  v138[v130] = 0;
  LOBYTE(v383) = 1;
  v139 = *(NSObject **)v382;
  if ((v382[63] & 0x80000000) == 0)
  {
LABEL_197:
    a2 = v347;
    if (!v382[32])
      goto LABEL_206;
LABEL_204:
    if ((v382[31] & 0x80000000) != 0)
      operator delete(*(void **)&v382[8]);
    goto LABEL_206;
  }
LABEL_203:
  operator delete(*(void **)&v382[40]);
  a2 = v347;
  if (v382[32])
    goto LABEL_204;
LABEL_206:
  if (*(_QWORD *)v382)
    os_release(*(void **)v382);
  if (v119 && *(_QWORD *)(v119 + 24))
  {
    v142 = _os_log_pack_size();
    v143 = (std::__shared_weak_count_vtbl *)operator new(v142, (std::align_val_t)8uLL);
    v144 = (std::__shared_weak_count *)operator new();
    v145 = v144;
    v144->__shared_owners_ = 0;
    v146 = (unint64_t *)&v144->__shared_owners_;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = v143;
    *(_QWORD *)v382 = v143;
    *(_QWORD *)&v382[8] = v143;
    *(_QWORD *)&v382[16] = v144;
    do
      v147 = __ldxr(v146);
    while (__stxr(v147 + 1, v146));
    memset(&v382[24], 0, 24);
    do
      v148 = __ldaxr(v146);
    while (__stlxr(v148 - 1, v146));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v145);
    }
    v149 = *(_QWORD *)v382;
    v150 = _os_log_pack_fill();
    *(_DWORD *)v150 = 134218496;
    *(_QWORD *)(v150 + 4) = v342;
    *(_WORD *)(v150 + 12) = 2048;
    *(_QWORD *)(v150 + 14) = v121;
    *(_WORD *)(v150 + 22) = 2048;
    *(_QWORD *)(v150 + 24) = v126;
    v151 = operator new();
    v152 = *(unsigned __int8 *)(v337 + 39);
    v153 = __dst;
    if ((v152 & 0x80u) != 0)
    {
      v153 = *(void **)(v337 + 16);
      v152 = *(_QWORD *)(v337 + 24);
    }
    *(_QWORD *)v151 = v149;
    *(_OWORD *)(v151 + 8) = *(_OWORD *)&v382[8];
    *(_OWORD *)&v382[8] = 0uLL;
    *(_OWORD *)(v151 + 24) = *(_OWORD *)&v382[24];
    *(_QWORD *)&v382[24] = 0;
    *(_QWORD *)&v382[32] = 0;
    *(_QWORD *)(v151 + 40) = v153;
    *(_QWORD *)(v151 + 48) = v152;
    *(_BYTE *)(v151 + 56) = 1;
    __s.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__r.__words[0] = v151;
    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v349 + 24) + 40))(*(_QWORD *)(v349 + 24), &__p);
    v154 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    a2 = v347;
    if (v154)
    {
      v155 = *(std::__shared_weak_count **)(v154 + 32);
      if (v155)
      {
        v156 = (unint64_t *)&v155->__shared_owners_;
        do
          v157 = __ldaxr(v156);
        while (__stlxr(v157 - 1, v156));
        if (!v157)
        {
          ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
          std::__shared_weak_count::__release_weak(v155);
        }
      }
      v158 = *(std::__shared_weak_count **)(v154 + 16);
      if (v158)
      {
        v159 = (unint64_t *)&v158->__shared_owners_;
        do
          v160 = __ldaxr(v159);
        while (__stlxr(v160 - 1, v159));
        if (!v160)
        {
          ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
          std::__shared_weak_count::__release_weak(v158);
        }
      }
      MEMORY[0x227684CE8](v154, 0x10F0C40B62ED6C6);
      v161 = __s.__r_.__value_.__r.__words[0];
      __s.__r_.__value_.__r.__words[0] = 0;
      if (v161)
      {
        v162 = *(std::__shared_weak_count **)(v161 + 32);
        if (v162)
        {
          v163 = (unint64_t *)&v162->__shared_owners_;
          do
            v164 = __ldaxr(v163);
          while (__stlxr(v164 - 1, v163));
          if (!v164)
          {
            ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
            std::__shared_weak_count::__release_weak(v162);
          }
        }
        v165 = *(std::__shared_weak_count **)(v161 + 16);
        if (v165)
        {
          v166 = (unint64_t *)&v165->__shared_owners_;
          do
            v167 = __ldaxr(v166);
          while (__stlxr(v167 - 1, v166));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
            std::__shared_weak_count::__release_weak(v165);
          }
        }
        MEMORY[0x227684CE8](v161, 0x10F0C40B62ED6C6);
      }
    }
    v168 = *(std::__shared_weak_count **)&v382[32];
    v169 = v340;
    if (*(_QWORD *)&v382[32])
    {
      v170 = (unint64_t *)(*(_QWORD *)&v382[32] + 8);
      do
        v171 = __ldaxr(v170);
      while (__stlxr(v171 - 1, v170));
      if (!v171)
      {
        ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
        std::__shared_weak_count::__release_weak(v168);
      }
    }
    v172 = *(std::__shared_weak_count **)&v382[16];
    if (*(_QWORD *)&v382[16])
    {
      v173 = (unint64_t *)(*(_QWORD *)&v382[16] + 8);
      do
        v174 = __ldaxr(v173);
      while (__stlxr(v174 - 1, v173));
      if (!v174)
      {
        ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
        std::__shared_weak_count::__release_weak(v172);
      }
    }
  }
  else
  {
    os_log_type_enabled(v139, OS_LOG_TYPE_INFO);
    *(_DWORD *)v382 = 134218496;
    *(_QWORD *)&v382[4] = v342;
    *(_WORD *)&v382[12] = 2048;
    *(_QWORD *)&v382[14] = v121;
    *(_WORD *)&v382[22] = 2048;
    *(_QWORD *)&v382[24] = v126;
    v175 = (void *)_os_log_send_and_compose_impl();
    v169 = v340;
    if (v175)
      free(v175);
  }
  if (v169)
  {
    v176 = v361.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v361.__r_.__value_.__l.__data_ == &v361.__r_.__value_.__r.__words[1])
    {
      v177 = 0;
      v182 = 0;
    }
    else
    {
      v177 = 0;
      v178 = v361.__r_.__value_.__r.__words[0];
      do
      {
        v179 = *(std::string **)(v178 + 8);
        v180 = v178;
        if (v179)
        {
          do
          {
            v181 = v179;
            v179 = (std::string *)v179->__r_.__value_.__r.__words[0];
          }
          while (v179);
        }
        else
        {
          do
          {
            v181 = *(std::string **)(v180 + 16);
            v36 = v181->__r_.__value_.__r.__words[0] == v180;
            v180 = (std::string::size_type)v181;
          }
          while (!v36);
        }
        v177 += *(_DWORD *)(v178 + 44) & 1;
        v178 = (std::string::size_type)v181;
      }
      while (v181 != (std::string *)&v361.__r_.__value_.__r.__words[1]);
      v182 = 0;
      do
      {
        if ((*(_BYTE *)(v176 + 44) & 6) != 0)
          ++v182;
        v183 = *(std::string **)(v176 + 8);
        if (v183)
        {
          do
          {
            v184 = v183;
            v183 = (std::string *)v183->__r_.__value_.__r.__words[0];
          }
          while (v183);
        }
        else
        {
          do
          {
            v184 = *(std::string **)(v176 + 16);
            v36 = v184->__r_.__value_.__r.__words[0] == v176;
            v176 = (std::string::size_type)v184;
          }
          while (!v36);
        }
        v176 = (std::string::size_type)v184;
      }
      while (v184 != (std::string *)&v361.__r_.__value_.__r.__words[1]);
    }
    sub_22322C138((uint64_t)v375, "Inconsistent kf planes: %zu %zu %zu", v361.__r_.__value_.__r.__words[2], v177, v182);
    sub_223182C08((uint64_t)v375);
  }
  sub_223182C08((uint64_t)v375);
  v185 = v376;
  if (v376)
  {
    v186 = (unint64_t *)&v376->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
LABEL_280:
  sub_2236C9420(*(_QWORD ***)(v116 + 240), &v363, (uint64_t *)&v360, (void **)(v116 + 8), (uint64_t)a1);
  sub_2236D08B4(*(uint64_t **)(v116 + 240), &v361, (uint64_t)v382);
  sub_2236D2F4C((uint64_t)a1, (uint64_t)v382);
  if (*(_QWORD *)&v382[48])
  {
    *(_QWORD *)&v382[56] = *(_QWORD *)&v382[48];
    operator delete(*(void **)&v382[48]);
  }
  sub_223198030((uint64_t)&v382[24], *(_QWORD **)&v382[32]);
  sub_223198030((uint64_t)v382, *(_QWORD **)&v382[8]);
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_302;
  v188 = sub_2241471F8();
  v189 = v188[2];
  if (!v189)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v189 = v188[2];
  }
  v190 = *(_QWORD *)(v189 + 64);
  v191 = (std::mutex *)(v190 + 32);
  std::mutex::lock((std::mutex *)(v190 + 32));
  v193 = *(_QWORD *)(v190 + 96);
  v192 = *(_QWORD *)(v190 + 104);
  std::mutex::unlock(v191);
  if (v193 == v192)
    goto LABEL_302;
  sub_22328CE6C("cv3d.recon.", (const char *)off_24EC57B60);
  v194 = v382[23];
  v195 = *(_BYTE **)v382;
  sub_2241471F8();
  if (v194 >= 0)
    v196 = v382;
  else
    v196 = v195;
  v197 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v196);
  v198 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v197 + 24))(v197);
  v199 = v198;
  if ((v382[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v382);
    if (!v199)
      goto LABEL_302;
  }
  else if (!v198)
  {
    goto LABEL_302;
  }
  *(_QWORD *)v382 = operator new(0x20uLL);
  *(_OWORD *)&v382[8] = xmmword_2245B8D50;
  strcpy(*(char **)v382, "KeyframePlanes.GlobalPlanes");
  v200 = std::string::append((std::string *)v382, ".Topology", 9uLL);
  v203 = *(_OWORD *)&v200->__r_.__value_.__l.__data_;
  *(_QWORD *)&v375[16] = *((_QWORD *)&v200->__r_.__value_.__l + 2);
  *(_OWORD *)v375 = v203;
  v200->__r_.__value_.__l.__size_ = 0;
  v200->__r_.__value_.__r.__words[2] = 0;
  v200->__r_.__value_.__r.__words[0] = 0;
  if ((v382[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v382);
    if (*(_BYTE *)(v345 + 1960))
      goto LABEL_296;
  }
  else if (*(_BYTE *)(v345 + 1960))
  {
LABEL_296:
    v204 = *(float32x2_t *)(v345 + 1832);
    v205.i32[0] = *(_DWORD *)(v345 + 1840);
    v206 = *(float32x2_t *)(v345 + 1848);
    v207 = *(float32x2_t *)(v345 + 1864);
    v201.i32[0] = *(_DWORD *)(v345 + 1872);
    v202.i64[0] = *(_QWORD *)(v345 + 1880);
    v202.i32[2] = *(_DWORD *)(v345 + 1888);
    v208 = (int8x16_t)vnegq_f32(v202);
    v209 = *(float32x4_t *)(v345 + 1552);
    v210 = vmulq_n_f32(v209, v205.f32[0]);
    v205.i32[1] = *(_DWORD *)(v345 + 1856);
    v211 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v204, (int32x2_t)v206), *(float *)v208.i32), (float32x2_t)vzip2_s32((int32x2_t)v204, (int32x2_t)v206), *(float32x2_t *)v202.f32, 1), v205, v202, 2);
    LODWORD(v212) = vmla_f32(vmls_lane_f32(vmul_f32(v207, *(float32x2_t *)v208.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v207, 1), *(float32x2_t *)v202.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v208, v208, 8uLL), v201).u32[0];
    v213 = *(float32x4_t *)(v345 + 1568);
    v214 = *(float32x4_t *)(v345 + 1584);
    v215 = *(float32x4_t *)(v345 + 1600);
    v216 = (int32x4_t)vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v209, v204.f32[0]), v213, v206.f32[0]), v214, v207.f32[0]), (float32x4_t)0, v215);
    v217 = (int32x4_t)vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v209, v204, 1), v213, v206, 1), v214, v207, 1), (float32x4_t)0, v215);
    v218 = (int8x16_t)vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v210, v213, *(float *)(v345 + 1856)), v214, v201.f32[0]), (float32x4_t)0, v215);
    v219 = vaddq_f32(v215, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v209, v211.f32[0]), v213, v211, 1), v214, v212));
    goto LABEL_299;
  }
  v216 = *(int32x4_t *)(v345 + 1552);
  v217 = *(int32x4_t *)(v345 + 1568);
  v218 = *(int8x16_t *)(v345 + 1584);
  v219 = *(float32x4_t *)(v345 + 1600);
LABEL_299:
  *(_QWORD *)&v220 = vzip1q_s32(v216, v217).u64[0];
  v221 = (int8x16_t)vnegq_f32(v219);
  *((_QWORD *)&v220 + 1) = v218.u32[0];
  v222 = (int8x16_t)vtrn2q_s32(v216, v217);
  v222.i32[2] = v218.i32[1];
  v223 = (int8x16_t)vzip2q_s32(v216, v217);
  v224 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v220, *(float *)v221.i32), *(float32x2_t *)v222.i8, *(float32x2_t *)v219.f32, 1), *(float32x2_t *)v223.i8, v219, 2);
  v223.i32[2] = v218.i32[2];
  v225 = vmls_lane_f32(vmul_f32(*(float32x2_t *)v218.i8, *(float32x2_t *)v221.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v218.i8, 1), *(float32x2_t *)v219.f32, 1);
  v226 = (float32x2_t)vextq_s8(v218, v218, 8uLL).u64[0];
  HIDWORD(v227) = 0;
  LODWORD(v227) = vdupq_lane_s32(*(int32x2_t *)&v222, 0).i32[3];
  *(_QWORD *)((char *)&v227 + 4) = vextq_s8(v222, v223, 4uLL).u64[0];
  v223.i64[1] = vdupq_laneq_s32((int32x4_t)v223, 2).u32[0];
  *(_OWORD *)&v382[16] = v227;
  *(int8x16_t *)&v382[32] = v223;
  *(_OWORD *)v382 = v220;
  *(float32x2_t *)&v382[48] = v224;
  *(_DWORD *)&v382[56] = vmla_f32(v225, (float32x2_t)*(_OWORD *)&vextq_s8(v221, v221, 8uLL), v226).u32[0];
  *(_DWORD *)&v382[60] = 1065353216;
  v228 = *(_QWORD *)(a2 + 208);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&__p, "ObservationGraph");
  sub_22373FEC0((uint64_t *)&v360, (uint64_t)v382, v228, (uint64_t)v375, (uint64_t)&__p, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v375[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v375);
    v229 = (uint64_t)v360;
    v230 = (uint64_t *)v360[1];
    if (v230 == v360)
      goto LABEL_312;
    goto LABEL_303;
  }
LABEL_302:
  v229 = (uint64_t)v360;
  v230 = (uint64_t *)v360[1];
  if (v230 == v360)
    goto LABEL_312;
LABEL_303:
  v231 = *a7;
  do
  {
    v232 = v230[2];
    v233 = *(_QWORD *)(v229 + 24);
    v234 = *(_DWORD *)(v233 + (v230[3] << 6) + 60);
    if (v234)
      v235 = v230[2];
    else
      v235 = v230[3];
    v236 = v233 + (v235 << 6);
    if (*(_DWORD *)(v236 + 60))
      goto LABEL_434;
    v237 = (__int128 *)(v236 + 24);
    if (v234)
      v232 = v230[3];
    v238 = *v237;
    v239 = v237[1];
    *(_DWORD *)&v382[32] = *((_DWORD *)v237 + 8);
    *(_OWORD *)v382 = v238;
    *(_OWORD *)&v382[16] = v239;
    v240 = v233 + (v232 << 6);
    if (*(_DWORD *)(v240 + 60) != 1)
LABEL_434:
      sub_22316DD70();
    sub_22370FD80(v231, &v382[20], (__int128 *)v382, *(_DWORD *)(v240 + 24), *(int *)&v382[16]);
    v230 = (uint64_t *)v230[1];
  }
  while (v230 != (uint64_t *)v229);
LABEL_312:
  v241 = v345;
  if (!*(_BYTE *)(v345 + 272))
  {
    v242 = v335;
    goto LABEL_379;
  }
  v242 = v335;
  if (!*(_DWORD *)(v345 + 248) || !*(_DWORD *)(v345 + 252))
  {
    v243 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C);
    v241 = v345;
    if (v243)
      abort();
  }
  v244 = v241 + 216;
  sub_223C3BF78(v241 + 216, (uint64_t)v382);
  *(_QWORD *)v375 = &off_24EC200A8;
  *(_OWORD *)&v375[8] = *(_OWORD *)&v382[8];
  *(_OWORD *)&v375[24] = *(_OWORD *)&v382[24];
  *(_OWORD *)&v375[34] = *(_OWORD *)&v382[34];
  v375[56] = 1;
  v245 = *(unsigned __int8 *)(v345 + 424);
  if (*(_BYTE *)(v345 + 424))
  {
    v246 = v345;
    if (!*(_DWORD *)(v345 + 400) || !*(_DWORD *)(v345 + 404))
    {
      v247 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1169, (uint64_t)"!depth.normals->Empty()", 23, (uint64_t)"Normals buffer not valid", 24, (void (*)(void **))sub_22457406C);
      v246 = v345;
      if (v247)
        abort();
    }
    sub_223C3D9D0(v246 + 344, (uint64_t)v382);
    v248 = *(std::__shared_weak_count **)&v382[16];
    if (!*(_QWORD *)&v382[16])
      goto LABEL_324;
    v249 = (unint64_t *)(*(_QWORD *)&v382[16] + 8);
    do
      v250 = __ldaxr(v249);
    while (__stlxr(v250 - 1, v249));
    if (!v250)
    {
      ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
      std::__shared_weak_count::__release_weak(v248);
      if (!v375[56])
        goto LABEL_330;
    }
    else
    {
LABEL_324:
      if (!v375[56])
        goto LABEL_330;
    }
  }
  v251 = *(std::__shared_weak_count **)&v375[16];
  if (!*(_QWORD *)&v375[16])
    goto LABEL_329;
  v252 = (unint64_t *)(*(_QWORD *)&v375[16] + 8);
  do
    v253 = __ldaxr(v252);
  while (__stlxr(v253 - 1, v252));
  if (!v253)
  {
    ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
    std::__shared_weak_count::__release_weak(v251);
    if (!v245)
      goto LABEL_379;
  }
  else
  {
LABEL_329:
    if (!v245)
      goto LABEL_379;
  }
LABEL_330:
  kdebug_trace();
  *(int32x2_t *)v254.f32 = v344[6];
  v254.i32[2] = v344[7].i32[0];
  v255.i32[0] = v344[1].i32[0];
  v256 = (float32x2_t)v344[2];
  v257 = (float32x2_t)v344[4];
  v258.i32[0] = v344[5].i32[0];
  v259 = (int8x16_t)vnegq_f32(v254);
  v260 = *(float32x4_t *)(v345 + 1552);
  v261 = vmulq_n_f32(v260, v255.f32[0]);
  v255.i32[1] = v344[3].i32[0];
  v262 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*v344, (int32x2_t)v256), *(float *)v259.i32), (float32x2_t)vzip2_s32(*v344, (int32x2_t)v256), *(float32x2_t *)v254.f32, 1), v255, v254, 2);
  v255.i32[0] = vmla_f32(vmls_lane_f32(vmul_f32(v257, *(float32x2_t *)v259.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v257, 1), *(float32x2_t *)v254.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v259, v259, 8uLL), v258).u32[0];
  v263 = *(float32x4_t *)(v345 + 1568);
  v264 = *(float32x4_t *)(v345 + 1584);
  v265 = *(float32x4_t *)(v345 + 1600);
  v266 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v260, (float32x2_t)*v344, 1), v263, v256, 1), v264, v257, 1), (float32x4_t)0, v265);
  *(float32x4_t *)v375 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v260, COERCE_FLOAT(*v344)), v263, v256.f32[0]), v264, v257.f32[0]), (float32x4_t)0, v265);
  *(float32x4_t *)&v375[16] = v266;
  *(float32x4_t *)&v375[32] = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v261, v263, v255.f32[1]), v264, v258.f32[0]), (float32x4_t)0, v265);
  *(float32x4_t *)&v375[48] = vaddq_f32(v265, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v260, v262.f32[0]), v263, v262, 1), v264, v255.f32[0]));
  sub_2236CF7E4(*(_QWORD **)(a2 + 240), v244, (float32x2_t *)v375, a1, (uint64_t *)&v373);
  sub_2236B406C(*(_QWORD *)(a2 + 248), a6 + 6, (uint64_t)&__s);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v267 = sub_2241471F8();
    v268 = v267[2];
    if (!v268)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v268 = v267[2];
    }
    v269 = *(_QWORD *)(v268 + 64);
    v270 = (std::mutex *)(v269 + 32);
    std::mutex::lock((std::mutex *)(v269 + 32));
    v272 = *(_QWORD *)(v269 + 96);
    v271 = *(_QWORD *)(v269 + 104);
    std::mutex::unlock(v270);
    v242 = v335;
    if (v272 != v271)
    {
      *(_QWORD *)v382 = "cv3d.recon.";
      *(_QWORD *)&v382[8] = 11;
      *(_QWORD *)&v382[16] = "KeyframePlanes.Extents.AllKeyframesBeforeFSV";
      *(_QWORD *)&v382[24] = 44;
      sub_2231A9820((uint64_t)v382, (uint64_t)&v382[32], 0, 0, &__p);
      v273 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v274 = __p.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      if (v273 >= 0)
        p_p = &__p;
      else
        p_p = (std::string *)v274;
      v276 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, p_p);
      v277 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 32))(v276);
      v278 = v277;
      v242 = v335;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v278 != 1)
          goto LABEL_353;
      }
      else if (v277 != 1)
      {
        goto LABEL_353;
      }
      sub_223737D60(*(_QWORD *)(a2 + 208), &v359);
      *(_QWORD *)v382 = operator new(0x30uLL);
      *(_OWORD *)&v382[8] = xmmword_2245C43F0;
      strcpy(*(char **)v382, "KeyframePlanes.Extents.AllKeyframesBeforeFSV");
      sub_22373E638((uint64_t **)&v359, (void **)v382);
      if ((v382[23] & 0x80000000) != 0)
        operator delete(*(void **)v382);
      if (v359.i64[0])
      {
        v359.i64[1] = v359.i64[0];
        operator delete((void *)v359.i64[0]);
      }
    }
  }
LABEL_353:
  v279 = *(uint64_t **)(a2 + 240);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC21420;
  sub_2231F9830(v345 + 2040, (uint64_t *)&__p.__r_.__value_.__l.__size_);
  sub_2236CF96C(v279, &v373, v244, (float32x2_t *)v375, (uint64_t)&__p, &__s, (float *)(a2 + 128), (float *)(a2 + 148), (uint64_t **)v382, *(unsigned __int8 **)(*(_QWORD *)(a2 + 232) + 16));
  v280 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
  if (__p.__r_.__value_.__r.__words[2])
  {
    v281 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
    do
      v282 = __ldaxr(v281);
    while (__stlxr(v282 - 1, v281));
    if (!v282)
    {
      ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
      std::__shared_weak_count::__release_weak(v280);
    }
  }
  sub_2236D2F4C((uint64_t)a1, (uint64_t)v382);
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_371;
  v283 = sub_2241471F8();
  v284 = v283[2];
  if (!v284)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v284 = v283[2];
  }
  v285 = *(_QWORD *)(v284 + 64);
  v286 = (std::mutex *)(v285 + 32);
  std::mutex::lock((std::mutex *)(v285 + 32));
  v288 = *(_QWORD *)(v285 + 96);
  v287 = *(_QWORD *)(v285 + 104);
  std::mutex::unlock(v286);
  if (v288 == v287)
    goto LABEL_371;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"cv3d.recon.";
  __p.__r_.__value_.__l.__size_ = 11;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)"KeyframePlanes.Extents.AllKeyframesAfterFSV";
  v378 = 43;
  sub_2231A9820((uint64_t)&__p, (uint64_t)&v379, 0, 0, &v372);
  sub_2241471F8();
  v289 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  v290 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v289 + 32))(v289);
  v291 = v290;
  v242 = v335;
  if ((SHIBYTE(v372.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v290 != 1)
      goto LABEL_371;
LABEL_367:
    sub_223737D60(*(_QWORD *)(a2 + 208), &v358);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_2245C76D0;
    strcpy(__p.__r_.__value_.__l.__data_, "KeyframePlanes.Extents.AllKeyframesAfterFSV");
    sub_22373E638((uint64_t **)&v358, (void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v358.i64[0])
    {
      v358.i64[1] = v358.i64[0];
      operator delete((void *)v358.i64[0]);
    }
    goto LABEL_371;
  }
  operator delete(v372.__r_.__value_.__l.__data_);
  if (v291 == 1)
    goto LABEL_367;
LABEL_371:
  kdebug_trace();
  if (*(_QWORD *)&v382[48])
  {
    *(_QWORD *)&v382[56] = *(_QWORD *)&v382[48];
    operator delete(*(void **)&v382[48]);
  }
  sub_223198030((uint64_t)&v382[24], *(_QWORD **)&v382[32]);
  sub_223198030((uint64_t)v382, *(_QWORD **)&v382[8]);
  v292 = (_QWORD *)__s.__r_.__value_.__r.__words[2];
  if (__s.__r_.__value_.__r.__words[2])
  {
    do
    {
      v293 = (_QWORD *)*v292;
      operator delete(v292);
      v292 = v293;
    }
    while (v293);
  }
  v294 = (void *)__s.__r_.__value_.__r.__words[0];
  __s.__r_.__value_.__r.__words[0] = 0;
  if (v294)
    operator delete(v294);
  if (v373)
  {
    *(_QWORD *)&v374 = v373;
    operator delete(v373);
  }
LABEL_379:
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v295 = sub_2241471F8();
    v296 = v295[2];
    if (!v296)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v296 = v295[2];
    }
    v297 = *(_QWORD *)(v296 + 64);
    v298 = (std::mutex *)(v297 + 32);
    std::mutex::lock((std::mutex *)(v297 + 32));
    v300 = *(_QWORD *)(v297 + 96);
    v299 = *(_QWORD *)(v297 + 104);
    std::mutex::unlock(v298);
    if (v300 != v299)
    {
      *(_QWORD *)v382 = "cv3d.recon.";
      *(_QWORD *)&v382[8] = 11;
      *(_QWORD *)&v382[16] = "KeyframePlanes.Extents";
      *(_QWORD *)&v382[24] = 22;
      sub_2231A9820((uint64_t)v382, (uint64_t)&v382[32], 0, 0, (std::string *)v375);
      v301 = v375[23];
      v302 = *(_BYTE **)v375;
      sub_2241471F8();
      if (v301 >= 0)
        v303 = v375;
      else
        v303 = v302;
      v304 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v303);
      v305 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v304 + 24))(v304);
      v306 = v305;
      if ((v375[23] & 0x80000000) == 0)
      {
        v307 = v305 ^ 1;
        if (!v334)
          v307 = 1;
        if ((v307 & 1) != 0)
          goto LABEL_431;
        goto LABEL_395;
      }
      operator delete(*(void **)v375);
      v308 = v306 ^ 1;
      if (!v334)
        v308 = 1;
      if ((v308 & 1) == 0)
      {
LABEL_395:
        v309 = 0;
        do
        {
          v310 = sub_22342DA5C(*(_QWORD **)(v347 + 208), *v242);
          if (!v310)
            goto LABEL_396;
          v311 = (float32x2_t *)v310[4];
          strcpy(v375, "KeyframePlanes.Extents");
          v375[23] = 22;
          std::to_string(&__s, v309);
          v312 = std::string::insert(&__s, 0, " ", 1uLL);
          v313 = *(_OWORD *)&v312->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v312->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v313;
          v312->__r_.__value_.__l.__size_ = 0;
          v312->__r_.__value_.__r.__words[2] = 0;
          v312->__r_.__value_.__r.__words[0] = 0;
          sub_2231CD8A8(*(_QWORD *)(*v242 + 16), (uint64_t)v382);
          v350 = &off_24EC25150;
          v314 = *(_OWORD *)&v382[8];
          if (*(_QWORD *)&v382[16])
          {
            v315 = (unint64_t *)(*(_QWORD *)&v382[16] + 8);
            do
              v316 = __ldxr(v315);
            while (__stxr(v316 + 1, v315));
            v317 = v384;
            do
              v318 = __ldxr(v315);
            while (__stxr(v318 + 1, v315));
            v319 = *(_QWORD *)&v382[24];
            v353 = *(_OWORD *)&v382[32];
            v354 = *(_OWORD *)&v382[48];
            v355 = v383;
            do
              v320 = __ldxr(v315);
            while (__stxr(v320 + 1, v315));
            v351 = v314;
            v352 = v319;
            v356 = v317;
            do
              v321 = __ldaxr(v315);
            while (__stlxr(v321 - 1, v315));
            if (!v321)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v314 + 1) + 16))(*((_QWORD *)&v314 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v314 + 1));
            }
            do
              v322 = __ldaxr(v315);
            while (__stlxr(v322 - 1, v315));
            if (!v322)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v314 + 1) + 16))(*((_QWORD *)&v314 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v314 + 1));
            }
          }
          else
          {
            v351 = *(unint64_t *)&v382[8];
            v352 = *(_QWORD *)&v382[24];
            v353 = *(_OWORD *)&v382[32];
            v354 = *(_OWORD *)&v382[48];
            v355 = v383;
            v356 = v384;
          }
          v357 = 1;
          sub_22371B950(v311, (const void **)v375, (uint64_t)&__p, (uint64_t)&v350);
          if (v357)
          {
            v323 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
            if (*((_QWORD *)&v351 + 1))
            {
              v324 = (unint64_t *)(*((_QWORD *)&v351 + 1) + 8);
              do
                v325 = __ldaxr(v324);
              while (__stlxr(v325 - 1, v324));
              if (!v325)
              {
                ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
                std::__shared_weak_count::__release_weak(v323);
              }
            }
          }
          v326 = *(std::__shared_weak_count **)&v382[16];
          if (!*(_QWORD *)&v382[16])
            goto LABEL_423;
          v327 = (unint64_t *)(*(_QWORD *)&v382[16] + 8);
          do
            v328 = __ldaxr(v327);
          while (__stlxr(v328 - 1, v327));
          if (!v328)
          {
            ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
            std::__shared_weak_count::__release_weak(v326);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_424:
              if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_425;
              goto LABEL_429;
            }
          }
          else
          {
LABEL_423:
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_424;
          }
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_425:
            if ((v375[23] & 0x80000000) != 0)
              goto LABEL_430;
            goto LABEL_396;
          }
LABEL_429:
          operator delete(__s.__r_.__value_.__l.__data_);
          if ((v375[23] & 0x80000000) != 0)
LABEL_430:
            operator delete(*(void **)v375);
LABEL_396:
          ++v242;
          ++v309;
        }
        while (v242 != v346);
      }
    }
  }
LABEL_431:
  sub_223198030((uint64_t)&v361, (_QWORD *)v361.__r_.__value_.__l.__size_);
  v329 = v360;
  v360 = 0;
  if (v329)
  {
    v330 = sub_22370F604(v329);
    MEMORY[0x227684CE8](v330, 0x10A0C402FF47DCALL);
  }
  return kdebug_trace();
}

void sub_2236F939C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  uint64_t v66;

  if (*(_BYTE *)(v66 - 168))
  {
    if (*(char *)(v66 - 169) < 0)
      operator delete(*(void **)(v66 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x230]);
  sub_2236FE2F4(&a51);
  sub_2231874DC((uint64_t)&a66);
  _Unwind_Resume(a1);
}

uint64_t sub_2236F9814(uint64_t a1, _QWORD *a2, int32x2_t *a3, uint64_t a4, unsigned __int8 a5, uint64_t *a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  float32x2_t v13;
  float32x4_t v14;
  char *v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  int8x16_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  char *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  __int128 *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  _QWORD *v61;
  const void *v62;
  int64_t v63;
  char *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  std::mutex *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _BYTE *v94;
  _QWORD *v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  _OWORD *v101;
  __int128 *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  _QWORD *v106;
  const void *v107;
  int64_t v108;
  unint64_t v109;
  char *v110;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  _QWORD *v121;
  _QWORD *v122;
  char *v124;
  _QWORD *v126;
  uint64_t v127;
  _BYTE *v128;
  _QWORD *v129;
  _BYTE *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  _BYTE *v136;
  _QWORD *v137;
  char *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  _OWORD *v143;
  __int128 *v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  _QWORD *v148;
  const void *v149;
  int64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  unsigned __int8 *v154;
  unsigned __int8 *v155;
  _QWORD *v156;
  _QWORD *v157;
  unsigned __int8 *v158;
  char *v159;
  int v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v164;
  const char *v165;
  size_t v166;
  unsigned __int8 v167;
  unsigned __int8 v168;
  const char *v169;
  size_t v170;
  _BYTE *v171;
  uint64_t v172;
  uint64_t v173;
  _BYTE *v174;
  NSObject *v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  size_t v179;
  void *v180;
  _QWORD *v181;
  size_t v182;
  size_t v183;
  _BYTE *v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  _QWORD *v190;
  uint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  char *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  const char *v210;
  std::string::size_type v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  float32x4_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  int8x16_t v238;
  float32x2_t v239;
  float v240;
  int32x4_t v241;
  int32x4_t v242;
  int8x16_t v243;
  float32x4_t v244;
  uint64_t v245;
  __int16 **v246;
  __int128 v247;
  int8x16_t v248;
  int8x16_t v249;
  int8x16_t v250;
  float32x2_t v251;
  float32x2_t v252;
  char *v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  _OWORD *v257;
  _OWORD *v258;
  _OWORD *v259;
  __int128 v260;
  char *v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  std::mutex *v265;
  uint64_t v266;
  uint64_t v267;
  char v268;
  void **v269;
  void **v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  unsigned int *v280;
  unsigned int *i;
  uint64_t v282;
  uint64_t v283;
  float32x4_t v284;
  double v285;
  double v286;
  double v287;
  double v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  uint64_t *v292;
  uint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  unint64_t *v306;
  unint64_t v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t v310;
  std::mutex *v311;
  uint64_t v312;
  uint64_t v313;
  char v314;
  _BYTE *v315;
  _BYTE *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t *v319;
  unint64_t v320;
  _BYTE *v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  std::mutex *v336;
  uint64_t v337;
  uint64_t v338;
  char v339;
  _BYTE *v340;
  _BYTE *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t *v344;
  unint64_t v345;
  _BYTE *v346;
  uint64_t v347;
  uint64_t v348;
  int v349;
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  std::mutex *v355;
  uint64_t v356;
  uint64_t v357;
  char v358;
  _BYTE *v359;
  _BYTE *v360;
  uint64_t v361;
  unint64_t v362;
  _BYTE *v363;
  uint64_t v364;
  uint64_t v365;
  int v366;
  float32x4_t v369;
  int has_internal_diagnostics;
  int8x16_t v371;
  float32x2_t v372;
  float v373;
  float32x4_t v374;
  uint64_t *v375;
  uint64_t v376;
  uint64_t v377;
  std::mutex *v378;
  uint64_t v379;
  uint64_t v380;
  char v381;
  std::string *v382;
  std::string *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v391;
  std::string::size_type v392;
  int v393;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  std::mutex *v402;
  uint64_t v403;
  uint64_t v404;
  char v405;
  _BYTE *v406;
  _BYTE *v407;
  uint64_t v408;
  uint64_t *v409;
  unint64_t v410;
  _BYTE *v411;
  uint64_t v412;
  uint64_t v413;
  int v414;
  std::string::size_type v417;
  uint64_t v418;
  std::string::size_type v419;
  std::__shared_weak_count *v420;
  unint64_t *v421;
  unint64_t v422;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  std::__shared_weak_count *v426;
  unint64_t *v427;
  unint64_t v428;
  std::__shared_weak_count *v429;
  unint64_t *v430;
  unint64_t v431;
  uint64_t *v432;
  uint64_t v433;
  uint64_t v434;
  std::mutex *v435;
  uint64_t v436;
  uint64_t v437;
  char v438;
  _BYTE *v439;
  _BYTE *v440;
  uint64_t v441;
  uint64_t *v442;
  unint64_t v443;
  _BYTE *v444;
  uint64_t v445;
  uint64_t v446;
  int v447;
  std::__shared_weak_count *v450;
  unint64_t *v451;
  unint64_t v452;
  uint64_t *v453;
  uint64_t v454;
  uint64_t v455;
  std::mutex *v456;
  uint64_t v457;
  uint64_t v458;
  char v459;
  _BYTE *v460;
  _BYTE *v461;
  uint64_t v462;
  uint64_t *v463;
  unint64_t v464;
  _BYTE *v465;
  uint64_t v466;
  uint64_t v467;
  int v468;
  uint64_t *v471;
  uint64_t v472;
  uint64_t v473;
  std::mutex *v474;
  uint64_t v475;
  uint64_t v476;
  char v477;
  _BYTE *v478;
  _BYTE *v479;
  uint64_t v480;
  int v481;
  int v482;
  unsigned __int8 v483;
  uint64_t v484;
  _OWORD *v485;
  __int128 v486;
  uint64_t *v487;
  uint64_t *v488;
  uint64_t *v489;
  uint64_t v490;
  unsigned __int8 *v491;
  unsigned __int8 *v492;
  uint64_t v493;
  uint64_t v494;
  unsigned int v495;
  uint64_t *v496;
  uint64_t *v497;
  unsigned int v498;
  unsigned int v500;
  unsigned int v501;
  unsigned int v502;
  char *v503;
  uint64_t v504;
  uint64_t v505;
  _BYTE *v506;
  uint64_t v507;
  _BYTE *v508;
  int v509;
  uint64_t v510;
  int v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  char *v515;
  uint64_t v516;
  float32x4_t v518;
  float32x2_t v519;
  float32x2_t v520;
  float32x2_t v521;
  float32x2_t v522;
  void *__dst[2];
  float v524;
  float32x2_t v525;
  float32x4_t v526;
  float32x2_t v527;
  const char *v528;
  float32x4_t v529;
  float32x2_t v530;
  float32x4_t v531;
  float32x4_t v533;
  float32x4_t v534;
  uint64_t v535;
  float32x4_t v536;
  float v539;
  uint64_t v541;
  float v542;
  float32x4_t v543;
  unint64_t v544;
  int v545;
  float32x4_t v546;
  float32x4_t v547;
  float32x4_t v548[2];
  __int128 v549;
  _QWORD *v550;
  uint64_t v551;
  char v552;
  _DWORD v553[2];
  _OWORD v554[2];
  int v555;
  void *v556;
  char v557;
  uint64_t v558;
  int v559;
  void *v560;
  char *v561;
  char *v562;
  uint64_t v563;
  int v564;
  void *v565;
  char *v566;
  char *v567;
  uint64_t v568;
  int v569;
  void *v570;
  char *v571;
  char *v572;
  __int128 v573;
  __int128 v574;
  int v575;
  __int128 v576;
  _BYTE key[56];
  uint64_t v578;
  std::__shared_weak_count *v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  _BYTE v583[24];
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  _BYTE v589[24];
  uint64_t v590;
  int v591;
  std::string __p;
  char *v593;
  std::__shared_weak_count *v594;
  _BYTE v595[24];
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int16 v599;
  _BYTE object[72];
  __int16 v601;
  _BYTE __s[24];
  char v603;
  uint64_t v604;

  v550 = a2;
  v604 = *MEMORY[0x24BDAC8D0];
  v573 = 0u;
  v574 = 0u;
  v575 = 728309704;
  kdebug_trace();
  v15 = "alue of type ";
  v535 = a5;
  if (!a5)
    goto LABEL_16;
  v16.i32[0] = a3[1].i32[0];
  v17 = (float32x2_t)a3[2];
  v18 = (float32x2_t)a3[4];
  v13.i32[0] = a3[5].i32[0];
  *(int32x2_t *)v14.f32 = a3[6];
  v14.i32[2] = a3[7].i32[0];
  v19 = (int8x16_t)vnegq_f32(v14);
  v20 = *(float32x4_t *)(a4 + 1552);
  v21 = vmulq_n_f32(v20, v16.f32[0]);
  v16.i32[1] = a3[3].i32[0];
  v22 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*a3, (int32x2_t)v17), *(float *)v19.i32), (float32x2_t)vzip2_s32(*a3, (int32x2_t)v17), *(float32x2_t *)v14.f32, 1), v16, v14, 2);
  v16.i32[0] = vmla_f32(vmls_lane_f32(vmul_f32(v18, *(float32x2_t *)v19.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v18, 1), *(float32x2_t *)v14.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), v13).u32[0];
  v23 = *(float32x4_t *)(a4 + 1568);
  v24 = *(float32x4_t *)(a4 + 1584);
  v25 = *(float32x4_t *)(a4 + 1600);
  v26 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v20, (float32x2_t)*a3, 1), v23, v17, 1), v24, v18, 1), (float32x4_t)0, v25);
  *(float32x4_t *)object = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v20, COERCE_FLOAT(*a3)), v23, v17.f32[0]), v24, v18.f32[0]), (float32x4_t)0, v25);
  *(float32x4_t *)&object[16] = v26;
  *(float32x4_t *)&object[32] = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v21, v23, v16.f32[1]), v24, v13.f32[0]), (float32x4_t)0, v25);
  *(float32x4_t *)&object[48] = vaddq_f32(v25, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v22.f32[0]), v23, v22, 1), v24, v16.f32[0]));
  v27 = (char *)operator new(0x78uLL);
  v28 = (std::__shared_weak_count *)v27;
  *((_QWORD *)v27 + 1) = 0;
  v29 = (unint64_t *)(v27 + 8);
  *((_QWORD *)v27 + 2) = 0;
  *(_QWORD *)v27 = &off_24EC28318;
  *((_QWORD *)v27 + 4) = &off_24EC20868;
  *((_QWORD *)v27 + 5) = *(_QWORD *)(a4 + 1472);
  *((_QWORD *)v27 + 6) = *(_QWORD *)(a4 + 1480);
  *(_OWORD *)(v27 + 56) = *(_OWORD *)(a4 + 1488);
  v30 = *(_OWORD *)(a4 + 1504);
  v31 = *(_OWORD *)(a4 + 1520);
  *((_DWORD *)v27 + 26) = *(_DWORD *)(a4 + 1536);
  *(_OWORD *)(v27 + 88) = v31;
  *(_OWORD *)(v27 + 72) = v30;
  v32 = *(_QWORD *)(a4 + 1544);
  *((_QWORD *)v27 + 3) = &off_24EC207B8;
  *((_QWORD *)v27 + 14) = v32;
  *(_QWORD *)key = &off_24EC6D000;
  *(_QWORD *)&key[8] = v27 + 24;
  *(_QWORD *)&key[16] = v27;
  do
    v33 = __ldxr(v29);
  while (__stxr(v33 + 1, v29));
  do
    v34 = __ldaxr(v29);
  while (__stlxr(v34 - 1, v29));
  if (!v34)
  {
    (*(void (**)(char *))(*(_QWORD *)v27 + 16))(v27);
    std::__shared_weak_count::__release_weak(v28);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_2245B8D50;
  strcpy(__p.__r_.__value_.__l.__data_, "KeyframePlanes.GlobalPlanes");
  __s[23] = 17;
  strcpy(__s, "FrameBundleCamera");
  sub_22373B6EC(object, (uint64_t)key, (uint64_t *)&__p, (uint64_t)__s);
  if ((__s[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__s);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      *(_QWORD *)key = &off_24EC6D000;
      v35 = *(std::__shared_weak_count **)&key[16];
      if (!*(_QWORD *)&key[16])
        goto LABEL_16;
      goto LABEL_13;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)key = &off_24EC6D000;
  v35 = *(std::__shared_weak_count **)&key[16];
  if (!*(_QWORD *)&key[16])
    goto LABEL_16;
LABEL_13:
  p_shared_owners = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldaxr(p_shared_owners);
  while (__stlxr(v37 - 1, p_shared_owners));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    memset(key, 0, 24);
    v544 = a7;
    if (a7)
      goto LABEL_17;
LABEL_48:
    v571 = 0;
    v570 = 0;
    v39 = (char *)a8;
    v572 = 0;
    goto LABEL_49;
  }
LABEL_16:
  memset(key, 0, 24);
  v544 = a7;
  if (!a7)
    goto LABEL_48;
LABEL_17:
  v38 = a8;
  if (a7 >> 61)
    sub_22316E078();
  *(_QWORD *)key = operator new(8 * a7);
  *(_QWORD *)&key[8] = *(_QWORD *)key;
  *(_QWORD *)&key[16] = *(_QWORD *)key + 8 * a7;
  v39 = (char *)(a8 + 16 * a7);
  do
  {
    v41 = sub_223340F28(v550, v38);
    if (v41)
    {
      v42 = v41[4];
      v9 = *(_QWORD *)&key[8];
      if (*(_QWORD *)&key[8] < *(_QWORD *)&key[16])
      {
        **(_QWORD **)&key[8] = v42;
        v9 += 8;
        v40 = (_QWORD *)v9;
      }
      else
      {
        v43 = *(_QWORD *)key;
        v44 = *(_QWORD *)&key[8] - *(_QWORD *)key;
        v45 = (uint64_t)(*(_QWORD *)&key[8] - *(_QWORD *)key) >> 3;
        v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 61)
          sub_22316E078();
        v47 = *(_QWORD *)&key[16] - *(_QWORD *)key;
        if ((uint64_t)(*(_QWORD *)&key[16] - *(_QWORD *)key) >> 2 > v46)
          v46 = v47 >> 2;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
          v48 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v48 = v46;
        if (v48)
        {
          if (v48 >> 61)
            sub_223174E94();
          v49 = (char *)operator new(8 * v48);
          v50 = &v49[8 * v45];
          *(_QWORD *)v50 = v42;
          v40 = v50 + 8;
          v51 = v9 - v43;
          if (v9 != v43)
          {
LABEL_33:
            v52 = v51 - 8;
            if (v52 < 0x58)
              goto LABEL_804;
            if ((unint64_t)(v9 - (_QWORD)v49 - v44) < 0x20)
              goto LABEL_804;
            v53 = (v52 >> 3) + 1;
            v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
            v55 = v9 - v54;
            v50 -= v54;
            v56 = &v49[v44 - 16];
            v57 = (__int128 *)(v9 - 16);
            v58 = v53 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v59 = *v57;
              *((_OWORD *)v56 - 1) = *(v57 - 1);
              *(_OWORD *)v56 = v59;
              v56 -= 32;
              v57 -= 2;
              v58 -= 4;
            }
            while (v58);
            v9 = v55;
            if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_804:
              do
              {
                v60 = *(_QWORD *)(v9 - 8);
                v9 -= 8;
                *((_QWORD *)v50 - 1) = v60;
                v50 -= 8;
              }
              while (v9 != v43);
            }
            v9 = *(_QWORD *)key;
            *(_QWORD *)key = v50;
            *(_QWORD *)&key[8] = v40;
            *(_QWORD *)&key[16] = &v49[8 * v48];
            if (!v9)
              goto LABEL_20;
            goto LABEL_43;
          }
        }
        else
        {
          v49 = 0;
          v50 = (char *)(8 * v45);
          v61 = (_QWORD *)(8 * v45);
          *v61 = v42;
          v40 = v61 + 1;
          v51 = v9 - v43;
          if (v9 != v43)
            goto LABEL_33;
        }
        *(_QWORD *)key = v50;
        *(_QWORD *)&key[8] = v40;
        *(_QWORD *)&key[16] = &v49[8 * v48];
        if (v9)
LABEL_43:
          operator delete((void *)v9);
      }
LABEL_20:
      *(_QWORD *)&key[8] = v40;
    }
    v38 += 16;
  }
  while ((char *)v38 != v39);
  v62 = *(const void **)key;
  v572 = 0;
  v570 = 0;
  v571 = 0;
  v15 = "Value of type " + 1;
  v63 = *(_QWORD *)&key[8] - *(_QWORD *)key;
  if (*(_QWORD *)&key[8] != *(_QWORD *)key)
  {
    if (v63 < 0)
      sub_22316E078();
    v570 = operator new(*(_QWORD *)&key[8] - *(_QWORD *)key);
    v572 = (char *)v570 + 8 * (v63 >> 3);
    memcpy(v570, v62, v63);
    v571 = v572;
  }
LABEL_49:
  *(_QWORD *)object = operator new(0x20uLL);
  v549 = *((_OWORD *)v15 + 213);
  *(_OWORD *)&object[8] = *((_OWORD *)v15 + 213);
  strcpy(*(char **)object, "KeyframePlanes.GlobalPlanes");
  qmemcpy(v548, "nes.GlobalPlanesKeyframePlanes.G", sizeof(v548));
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&__p, "ContentUpdates");
  v568 = 0x3F1291FB3C807358;
  v569 = 1061339770;
  sub_22373F854((int32x2_t ***)&v570, (uint64_t)object, (uint64_t)&__p, &v568, 0, 0);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((object[23] & 0x80000000) == 0)
      goto LABEL_51;
LABEL_62:
    operator delete(*(void **)object);
    v64 = (char *)v570;
    if (!v570)
      goto LABEL_53;
LABEL_52:
    v571 = v64;
    operator delete(v64);
    goto LABEL_53;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((object[23] & 0x80000000) != 0)
    goto LABEL_62;
LABEL_51:
  v64 = (char *)v570;
  if (v570)
    goto LABEL_52;
LABEL_53:
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_77;
  v65 = sub_2241471F8();
  v66 = v65[2];
  if (!v66)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v66 = v65[2];
  }
  v67 = *(_QWORD *)(v66 + 64);
  v68 = (std::mutex *)(v67 + 32);
  std::mutex::lock((std::mutex *)(v67 + 32));
  v70 = *(_QWORD *)(v67 + 96);
  v69 = *(_QWORD *)(v67 + 104);
  std::mutex::unlock(v68);
  if (v70 == v69)
  {
LABEL_77:
    v74 = *(uint64_t **)key;
  }
  else
  {
    *(_QWORD *)object = "cv3d.recon.";
    *(_QWORD *)&object[8] = 11;
    *(_QWORD *)&object[16] = "KeyframePlanes.GT";
    *(_QWORD *)&object[24] = 17;
    sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &__p);
    sub_2241471F8();
    v71 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
    v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 32))(v71);
    v73 = v72;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v73 != 1)
        goto LABEL_77;
    }
    else if (v72 != 1)
    {
      goto LABEL_77;
    }
    v74 = *(uint64_t **)key;
    v75 = *(uint64_t **)&key[8];
    if (*(_QWORD *)key != *(_QWORD *)&key[8])
    {
      do
      {
        v76 = *v74;
        v9 &= 0xFFFFFFFFFFFFFF00;
        v77 = *(_QWORD **)a9;
        v78 = *(_QWORD **)(a9 + 8);
        if (*(_QWORD **)a9 != v78)
        {
          while (1)
          {
            _ZF = *v77 == *(_QWORD *)v76 && v77[1] == *(_QWORD *)(v76 + 8);
            if (_ZF)
              break;
            v77 += 31;
            if (v77 == v78)
              goto LABEL_75;
          }
        }
        if (v77 == v78)
        {
LABEL_75:
          v80 = 0;
        }
        else
        {
          v9 = v77[2];
          v80 = 1;
        }
        sub_223742C80((unsigned __int8 *)v76, (void **)(v76 + 16), 0x21CFB2B78C13521DLL * ((uint64_t)(*(_QWORD *)(v76 + 216) - *(_QWORD *)(v76 + 208)) >> 3), *(_QWORD *)(v76 + 208), (float32x2_t *)(v76 + 144), v76 + 48, v9, v80);
        ++v74;
      }
      while (v74 != v75);
      goto LABEL_77;
    }
  }
  if (v74)
  {
    *(_QWORD *)&key[8] = v74;
    operator delete(v74);
  }
  v82 = *a6;
  v81 = a6[1];
  memset(object, 0, 24);
  v83 = v81 - v82;
  if (v81 == v82)
  {
    v565 = 0;
    v566 = 0;
    v567 = 0;
    v109 = v544;
    goto LABEL_112;
  }
  if (v83 < 0)
    sub_22316E078();
  *(_QWORD *)object = operator new((unint64_t)v83 >> 1);
  *(_QWORD *)&object[8] = *(_QWORD *)object;
  *(_QWORD *)&object[16] = *(_QWORD *)object + 8 * (v83 >> 4);
  while (2)
  {
    v85 = sub_223340F28(v550, v82);
    if (v85)
    {
      v86 = v85[4];
      v87 = *(_BYTE **)&object[8];
      if (*(_QWORD *)&object[8] < *(_QWORD *)&object[16])
      {
        **(_QWORD **)&object[8] = v86;
        v84 = v87 + 8;
        goto LABEL_84;
      }
      v88 = *(_BYTE **)object;
      v89 = *(_QWORD *)&object[8] - *(_QWORD *)object;
      v90 = (uint64_t)(*(_QWORD *)&object[8] - *(_QWORD *)object) >> 3;
      v91 = v90 + 1;
      if ((unint64_t)(v90 + 1) >> 61)
        sub_22316E078();
      v92 = *(_QWORD *)&object[16] - *(_QWORD *)object;
      if ((uint64_t)(*(_QWORD *)&object[16] - *(_QWORD *)object) >> 2 > v91)
        v91 = v92 >> 2;
      if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
        v93 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v93 = v91;
      if (v93)
      {
        if (v93 >> 61)
          sub_223174E94();
        v94 = operator new(8 * v93);
        v95 = &v94[8 * v90];
        *v95 = v86;
        v84 = v95 + 1;
        v96 = (char *)(v87 - v88);
        if (v87 != v88)
        {
LABEL_97:
          v97 = (unint64_t)(v96 - 8);
          if (v97 < 0x58)
            goto LABEL_805;
          if ((unint64_t)(v87 - v94 - v89) < 0x20)
            goto LABEL_805;
          v98 = (v97 >> 3) + 1;
          v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
          v100 = &v87[-v99];
          v95 = (_QWORD *)((char *)v95 - v99);
          v101 = &v94[v89 - 16];
          v102 = (__int128 *)(v87 - 16);
          v103 = v98 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v104 = *v102;
            *(v101 - 1) = *(v102 - 1);
            *v101 = v104;
            v101 -= 2;
            v102 -= 2;
            v103 -= 4;
          }
          while (v103);
          v87 = v100;
          if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_805:
            do
            {
              v105 = *((_QWORD *)v87 - 1);
              v87 -= 8;
              *--v95 = v105;
            }
            while (v87 != v88);
          }
          v87 = *(_BYTE **)object;
          *(_QWORD *)object = v95;
          *(_QWORD *)&object[8] = v84;
          *(_QWORD *)&object[16] = &v94[8 * v93];
          if (!v87)
          {
LABEL_84:
            *(_QWORD *)&object[8] = v84;
            goto LABEL_85;
          }
LABEL_107:
          operator delete(v87);
          goto LABEL_84;
        }
      }
      else
      {
        v94 = 0;
        v95 = (_QWORD *)(8 * v90);
        v106 = (_QWORD *)(8 * v90);
        *v106 = v86;
        v84 = v106 + 1;
        v96 = (char *)(v87 - v88);
        if (v87 != v88)
          goto LABEL_97;
      }
      *(_QWORD *)object = v95;
      *(_QWORD *)&object[8] = v84;
      *(_QWORD *)&object[16] = &v94[8 * v93];
      if (!v87)
        goto LABEL_84;
      goto LABEL_107;
    }
LABEL_85:
    v82 += 16;
    if (v82 != v81)
      continue;
    break;
  }
  v107 = *(const void **)object;
  v566 = 0;
  v567 = 0;
  v565 = 0;
  v108 = *(_QWORD *)&object[8] - *(_QWORD *)object;
  v109 = v544;
  if (*(_QWORD *)&object[8] != *(_QWORD *)object)
  {
    if (v108 < 0)
      sub_22316E078();
    v565 = operator new(*(_QWORD *)&object[8] - *(_QWORD *)object);
    v567 = (char *)v565 + 8 * (v108 >> 3);
    memcpy(v565, v107, v108);
    v566 = (char *)v565 + 8 * (v108 >> 3);
  }
LABEL_112:
  v110 = (char *)operator new(0x20uLL);
  *(_QWORD *)key = v110;
  *(_OWORD *)&key[8] = v549;
  *(float32x4_t *)v110 = v548[1];
  *(float32x4_t *)(v110 + 11) = v548[0];
  v110[27] = 0;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 21;
  strcpy((char *)&__p, "IntegrationCandidates");
  __asm { FMOV            V0.2S, #1.0 }
  v563 = _D0;
  v564 = 1065353216;
  sub_22373F854((int32x2_t ***)&v565, (uint64_t)key, (uint64_t)&__p, &v563, 0, 0);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((key[23] & 0x80000000) == 0)
      goto LABEL_114;
LABEL_168:
    operator delete(*(void **)key);
    v114 = (char *)v565;
    if (!v565)
      goto LABEL_116;
LABEL_115:
    v566 = v114;
    operator delete(v114);
    goto LABEL_116;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((key[23] & 0x80000000) != 0)
    goto LABEL_168;
LABEL_114:
  v114 = (char *)v565;
  if (v565)
    goto LABEL_115;
LABEL_116:
  if (*(_QWORD *)object)
  {
    *(_QWORD *)&object[8] = *(_QWORD *)object;
    operator delete(*(void **)object);
  }
  v116 = (char *)a6[6];
  v115 = (char *)a6[7];
  v117 = (v115 - v116) >> 4;
  v118 = (a6[1] - *a6) >> 4;
  memset(object, 0, 24);
  v119 = v117 - v118;
  if (v117 != v118)
  {
    if (v119 >> 61)
      sub_22316E078();
    *(_QWORD *)object = operator new(8 * v119);
    *(_QWORD *)&object[8] = *(_QWORD *)object;
    *(_QWORD *)&object[16] = *(_QWORD *)object + 8 * v119;
  }
  if (v116 == v115)
  {
    v560 = 0;
    v561 = 0;
    v562 = 0;
    v151 = a4;
    goto LABEL_171;
  }
  v120 = (char *)a8;
  while (2)
  {
    v121 = (_QWORD *)*a6;
    v122 = (_QWORD *)a6[1];
    if ((_QWORD *)*a6 != v122)
    {
      while (*v121 != *(_QWORD *)v116 || v121[1] != *((_QWORD *)v116 + 1))
      {
        v121 += 2;
        if (v121 == v122)
        {
          v121 = (_QWORD *)a6[1];
          break;
        }
      }
    }
    if (v121 != v122)
      goto LABEL_124;
    v124 = v120;
    if (v109)
    {
      while (*(_QWORD *)v124 != *(_QWORD *)v116 || *((_QWORD *)v124 + 1) != *((_QWORD *)v116 + 1))
      {
        v124 += 16;
        if (v124 == v39)
        {
          v124 = v39;
          break;
        }
      }
    }
    if (v109 != (v124 - v120) >> 4)
      goto LABEL_124;
    v126 = sub_223340F28(v550, (uint64_t)v116);
    v120 = (char *)a8;
    v109 = v544;
    if (!v126)
      goto LABEL_124;
    v127 = v126[4];
    v128 = *(_BYTE **)&object[8];
    if (*(_QWORD *)&object[8] < *(_QWORD *)&object[16])
    {
      **(_QWORD **)&object[8] = v127;
      v129 = v128 + 8;
      goto LABEL_160;
    }
    v130 = *(_BYTE **)object;
    v131 = *(_QWORD *)&object[8] - *(_QWORD *)object;
    v132 = (uint64_t)(*(_QWORD *)&object[8] - *(_QWORD *)object) >> 3;
    v133 = v132 + 1;
    if ((unint64_t)(v132 + 1) >> 61)
      sub_22316E078();
    v134 = *(_QWORD *)&object[16] - *(_QWORD *)object;
    if ((uint64_t)(*(_QWORD *)&object[16] - *(_QWORD *)object) >> 2 > v133)
      v133 = v134 >> 2;
    if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFF8)
      v135 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v135 = v133;
    if (!v135)
    {
      v136 = 0;
      v137 = (_QWORD *)(8 * v132);
      v148 = (_QWORD *)(8 * v132);
      *v148 = v127;
      v129 = v148 + 1;
      v138 = (char *)(v128 - v130);
      if (v128 != v130)
        goto LABEL_152;
LABEL_162:
      *(_QWORD *)object = v137;
      *(_QWORD *)&object[8] = v129;
      *(_QWORD *)&object[16] = &v136[8 * v135];
      v120 = (char *)a8;
      if (v128)
        goto LABEL_159;
      goto LABEL_160;
    }
    if (v135 >> 61)
      sub_223174E94();
    v136 = operator new(8 * v135);
    v137 = &v136[8 * v132];
    *v137 = v127;
    v129 = v137 + 1;
    v138 = (char *)(v128 - v130);
    if (v128 == v130)
      goto LABEL_162;
LABEL_152:
    v139 = (unint64_t)(v138 - 8);
    if (v139 < 0x58)
      goto LABEL_806;
    if ((unint64_t)(v128 - v136 - v131) < 0x20)
      goto LABEL_806;
    v140 = (v139 >> 3) + 1;
    v141 = 8 * (v140 & 0x3FFFFFFFFFFFFFFCLL);
    v142 = &v128[-v141];
    v137 = (_QWORD *)((char *)v137 - v141);
    v143 = &v136[v131 - 16];
    v144 = (__int128 *)(v128 - 16);
    v145 = v140 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v146 = *v144;
      *(v143 - 1) = *(v144 - 1);
      *v143 = v146;
      v143 -= 2;
      v144 -= 2;
      v145 -= 4;
    }
    while (v145);
    v128 = v142;
    if (v140 != (v140 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_806:
      do
      {
        v147 = *((_QWORD *)v128 - 1);
        v128 -= 8;
        *--v137 = v147;
      }
      while (v128 != v130);
    }
    v128 = *(_BYTE **)object;
    *(_QWORD *)object = v137;
    *(_QWORD *)&object[8] = v129;
    *(_QWORD *)&object[16] = &v136[8 * v135];
    v120 = (char *)a8;
    if (v128)
LABEL_159:
      operator delete(v128);
LABEL_160:
    v109 = v544;
    *(_QWORD *)&object[8] = v129;
LABEL_124:
    v116 += 16;
    if (v116 != v115)
      continue;
    break;
  }
  v149 = *(const void **)object;
  v561 = 0;
  v562 = 0;
  v560 = 0;
  v150 = *(_QWORD *)&object[8] - *(_QWORD *)object;
  v151 = a4;
  if (*(_QWORD *)&object[8] != *(_QWORD *)object)
  {
    if (v150 < 0)
      sub_22316E078();
    v560 = operator new(*(_QWORD *)&object[8] - *(_QWORD *)object);
    v562 = (char *)v560 + 8 * (v150 >> 3);
    memcpy(v560, v149, v150);
    v561 = (char *)v560 + 8 * (v150 >> 3);
  }
LABEL_171:
  v152 = (char *)operator new(0x20uLL);
  *(_QWORD *)key = v152;
  *(_OWORD *)&key[8] = v549;
  *(float32x4_t *)v152 = v548[1];
  *(float32x4_t *)(v152 + 11) = v548[0];
  v152[27] = 0;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&__p, "OverlappingKeyframes");
  v558 = 0x3F8000003E800000;
  v559 = 1048576000;
  sub_22373F854((int32x2_t ***)&v560, (uint64_t)key, (uint64_t)&__p, &v558, 0, 0);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((key[23] & 0x80000000) == 0)
      goto LABEL_173;
LABEL_327:
    operator delete(*(void **)key);
    v153 = (char *)v560;
    if (!v560)
      goto LABEL_175;
LABEL_174:
    v561 = v153;
    operator delete(v153);
    goto LABEL_175;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((key[23] & 0x80000000) != 0)
    goto LABEL_327;
LABEL_173:
  v153 = (char *)v560;
  if (v560)
    goto LABEL_174;
LABEL_175:
  if (*(_QWORD *)object)
  {
    *(_QWORD *)&object[8] = *(_QWORD *)object;
    operator delete(*(void **)object);
  }
  v155 = *(unsigned __int8 **)(a1 + 8);
  v154 = *(unsigned __int8 **)(a1 + 16);
  if (v155 != v154)
  {
    v156 = v550 + 5;
    do
    {
      v157 = sub_223340F28(v156, (uint64_t)v155);
      if (v157)
      {
        v158 = (unsigned __int8 *)v157[4];
        v159 = (char *)operator new(0x20uLL);
        *(_QWORD *)object = v159;
        *(_OWORD *)&object[8] = v549;
        *(float32x4_t *)v159 = v548[1];
        *(float32x4_t *)(v159 + 11) = v548[0];
        v159[27] = 0;
        sub_2236AB1A4(v158, (const void **)object);
        if ((object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
      }
      else
      {
        sub_2236F5384(v554);
        if (**(int **)(*(_QWORD *)&v554[0] + 56) <= 4)
        {
          v160 = *(unsigned __int8 *)(*(_QWORD *)&v554[0] + 72);
          v161 = sub_22322F254(*(uint64_t *)&v554[0], "OSLogSurrogateAppender", 1, 0);
          v162 = v161;
          if (v160 || v161 != 0)
          {
            *(_QWORD *)key = v554;
            *(std::chrono::steady_clock::time_point *)&key[8] = std::chrono::steady_clock::now();
            *(std::chrono::system_clock::time_point *)&key[16] = std::chrono::system_clock::now();
            *(_DWORD *)&key[24] = 4;
            *(_QWORD *)&key[32] = "unknown file";
            *(_DWORD *)&key[40] = 919;
            *(_QWORD *)&key[48] = "unknown function";
            v578 = 0;
            v579 = 0;
            sub_2245664AC(v155, __s);
            v164 = **(_QWORD **)key;
            v165 = (const char *)(**(_QWORD **)key + 16);
            v541 = **(_QWORD **)key;
            v528 = v165;
            if (*(char *)(**(_QWORD **)key + 39) < 0)
            {
              v165 = *(const char **)(v164 + 16);
              v166 = *(_QWORD *)(v164 + 24);
              v168 = atomic_load((unsigned __int8 *)&qword_255788F58);
              v545 = v160;
              if ((v168 & 1) == 0)
              {
LABEL_303:
                if (__cxa_guard_acquire(&qword_255788F58))
                {
                  sub_224568628((uint64_t)&__p);
                  sub_223199C58("com.apple.cv3d", (unint64_t)&__p, &xmmword_255788F40);
                  if ((_BYTE)v593 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                  __cxa_guard_release(&qword_255788F58);
                }
              }
            }
            else
            {
              v166 = *(unsigned __int8 *)(**(_QWORD **)key + 39);
              v167 = atomic_load((unsigned __int8 *)&qword_255788F58);
              v545 = v160;
              if ((v167 & 1) == 0)
                goto LABEL_303;
            }
            if (byte_255788F57 >= 0)
              v169 = (const char *)&xmmword_255788F40;
            else
              v169 = (const char *)xmmword_255788F40;
            if (byte_255788F57 >= 0)
              v170 = byte_255788F57;
            else
              v170 = *((_QWORD *)&xmmword_255788F40 + 1);
            *(_QWORD *)object = os_log_create(v169, v165);
            if (v170 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v170 >= 0x17)
            {
              v172 = (v170 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v170 | 7) != 0x17)
                v172 = v170 | 7;
              v173 = v172 + 1;
              v171 = operator new(v172 + 1);
              *(_QWORD *)&object[24] = v173 | 0x8000000000000000;
              *(_QWORD *)&object[8] = v171;
              *(_QWORD *)&object[16] = v170;
            }
            else
            {
              object[31] = v170;
              v171 = &object[8];
              if (!v170)
              {
LABEL_206:
                v171[v170] = 0;
                object[32] = 1;
                if (v166 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                if (v166 >= 0x17)
                {
                  v177 = (v166 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v166 | 7) != 0x17)
                    v177 = v166 | 7;
                  v178 = v177 + 1;
                  v174 = operator new(v177 + 1);
                  *(_QWORD *)&object[56] = v178 | 0x8000000000000000;
                  *(_QWORD *)&object[40] = v174;
                  *(_QWORD *)&object[48] = v166;
                }
                else
                {
                  object[63] = v166;
                  v174 = &object[40];
                  if (!v166)
                  {
                    object[40] = 0;
                    object[64] = 1;
                    v175 = *(NSObject **)object;
                    if ((object[63] & 0x80000000) == 0)
                      goto LABEL_210;
LABEL_216:
                    operator delete(*(void **)&object[40]);
                    v151 = a4;
                    v176 = v545;
                    if (object[32])
                      goto LABEL_217;
                    goto LABEL_219;
                  }
                }
                memmove(v174, v165, v166);
                v174[v166] = 0;
                object[64] = 1;
                v175 = *(NSObject **)object;
                if ((object[63] & 0x80000000) != 0)
                  goto LABEL_216;
LABEL_210:
                v151 = a4;
                v176 = v545;
                if (object[32])
                {
LABEL_217:
                  if ((object[31] & 0x80000000) != 0)
                    operator delete(*(void **)&object[8]);
                }
LABEL_219:
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (v162 && *(_QWORD *)(v162 + 24))
                {
                  v179 = _os_log_pack_size();
                  v180 = operator new(v179, (std::align_val_t)8uLL);
                  v181 = (_QWORD *)operator new();
                  *v181 = &off_24EC1F7F0;
                  v181[1] = 0;
                  v181[2] = 0;
                  v181[3] = v180;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v180;
                  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v180;
                  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v181;
                  v593 = 0;
                  v594 = 0;
                  v182 = strlen(__s);
                  if (v182 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v183 = v182;
                  if (v182 >= 0x17)
                  {
                    v186 = (v182 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v182 | 7) != 0x17)
                      v186 = v182 | 7;
                    v187 = v186 + 1;
                    v184 = operator new(v186 + 1);
                    *(_QWORD *)&v583[16] = v187 | 0x8000000000000000;
                    *(_QWORD *)v583 = v184;
                    *(_QWORD *)&v583[8] = v183;
                  }
                  else
                  {
                    v583[23] = v182;
                    v184 = v583;
                    if (!v182)
                      goto LABEL_235;
                  }
                  memcpy(v184, __s, v183);
LABEL_235:
                  v184[v183] = 0;
                  *(_QWORD *)v595 = *(_QWORD *)&v583[8];
                  v188 = *(_QWORD *)v583;
                  *(_QWORD *)&v595[7] = *(_QWORD *)&v583[15];
                  v189 = v583[23];
                  v190 = operator new(0x38uLL);
                  v190[1] = 0;
                  v190[2] = 0;
                  v190[3] = off_24EC1FA48;
                  *v190 = &off_24EC1F9F8;
                  v191 = *(_QWORD *)v595;
                  v190[4] = v188;
                  v190[5] = v191;
                  *(_QWORD *)((char *)v190 + 47) = *(_QWORD *)&v595[7];
                  *((_BYTE *)v190 + 55) = v189;
                  *(_QWORD *)v595 = 0;
                  *(_QWORD *)&v595[7] = 0;
                  v192 = v594;
                  v593 = (char *)(v190 + 3);
                  v594 = (std::__shared_weak_count *)v190;
                  v151 = a4;
                  if (v192)
                  {
                    v193 = (unint64_t *)&v192->__shared_owners_;
                    do
                      v194 = __ldaxr(v193);
                    while (__stlxr(v194 - 1, v193));
                    if (!v194)
                    {
                      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                      std::__shared_weak_count::__release_weak(v192);
                    }
                  }
                  *(std::string *)object = __p;
                  v195 = v593;
                  if (__p.__r_.__value_.__r.__words[2])
                  {
                    v196 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
                    do
                      v197 = __ldxr(v196);
                    while (__stxr(v197 + 1, v196));
                  }
                  v198 = v594;
                  *(_QWORD *)&object[24] = v195;
                  *(_QWORD *)&object[32] = v594;
                  if (v594)
                  {
                    v199 = (unint64_t *)&v594->__shared_owners_;
                    do
                      v200 = __ldxr(v199);
                    while (__stxr(v200 + 1, v199));
                    *(_QWORD *)&object[40] = v195;
                    do
                      v201 = __ldaxr(v199);
                    while (__stlxr(v201 - 1, v199));
                    if (!v201)
                    {
                      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
                      std::__shared_weak_count::__release_weak(v198);
                    }
                  }
                  else
                  {
                    *(_QWORD *)&object[40] = v195;
                  }
                  v202 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
                  if (__p.__r_.__value_.__r.__words[2])
                  {
                    v203 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
                    do
                      v204 = __ldaxr(v203);
                    while (__stlxr(v204 - 1, v203));
                    if (!v204)
                    {
                      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                      std::__shared_weak_count::__release_weak(v202);
                    }
                  }
                  v205 = *(_QWORD *)object;
                  if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
                    v206 = *(_QWORD *)&object[40] + 8;
                  else
                    v206 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
                  v207 = _os_log_pack_fill();
                  *(_DWORD *)v207 = 68157954;
                  *(_DWORD *)(v207 + 4) = 13;
                  *(_WORD *)(v207 + 8) = 2080;
                  *(_QWORD *)(v207 + 10) = v206;
                  v208 = operator new();
                  v209 = *(unsigned __int8 *)(v541 + 39);
                  v210 = v528;
                  if ((v209 & 0x80u) != 0)
                  {
                    v210 = *(const char **)(v541 + 16);
                    v209 = *(_QWORD *)(v541 + 24);
                  }
                  *(_QWORD *)v208 = v205;
                  *(_OWORD *)(v208 + 8) = *(_OWORD *)&object[8];
                  *(_QWORD *)&object[8] = 0;
                  *(_QWORD *)&object[16] = 0;
                  *(_OWORD *)(v208 + 24) = *(_OWORD *)&object[24];
                  *(_QWORD *)&object[24] = 0;
                  *(_QWORD *)&object[32] = 0;
                  *(_QWORD *)(v208 + 40) = v210;
                  *(_QWORD *)(v208 + 48) = v209;
                  *(_BYTE *)(v208 + 56) = 16;
                  *(_QWORD *)v583 = 0;
                  __p.__r_.__value_.__r.__words[0] = v208;
                  (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v162 + 24) + 40))(*(_QWORD *)(v162 + 24), &__p);
                  v211 = __p.__r_.__value_.__r.__words[0];
                  __p.__r_.__value_.__r.__words[0] = 0;
                  if (v211)
                  {
                    v212 = *(std::__shared_weak_count **)(v211 + 32);
                    if (v212)
                    {
                      v213 = (unint64_t *)&v212->__shared_owners_;
                      do
                        v214 = __ldaxr(v213);
                      while (__stlxr(v214 - 1, v213));
                      if (!v214)
                      {
                        ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                        std::__shared_weak_count::__release_weak(v212);
                      }
                    }
                    v215 = *(std::__shared_weak_count **)(v211 + 16);
                    if (v215)
                    {
                      v216 = (unint64_t *)&v215->__shared_owners_;
                      do
                        v217 = __ldaxr(v216);
                      while (__stlxr(v217 - 1, v216));
                      if (!v217)
                      {
                        ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                        std::__shared_weak_count::__release_weak(v215);
                      }
                    }
                    MEMORY[0x227684CE8](v211, 0x10F0C40B62ED6C6);
                    v218 = *(_QWORD *)v583;
                    *(_QWORD *)v583 = 0;
                    if (v218)
                    {
                      v219 = *(std::__shared_weak_count **)(v218 + 32);
                      if (v219)
                      {
                        v220 = (unint64_t *)&v219->__shared_owners_;
                        do
                          v221 = __ldaxr(v220);
                        while (__stlxr(v221 - 1, v220));
                        if (!v221)
                        {
                          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
                          std::__shared_weak_count::__release_weak(v219);
                        }
                      }
                      v222 = *(std::__shared_weak_count **)(v218 + 16);
                      if (v222)
                      {
                        v223 = (unint64_t *)&v222->__shared_owners_;
                        do
                          v224 = __ldaxr(v223);
                        while (__stlxr(v224 - 1, v223));
                        if (!v224)
                        {
                          ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
                          std::__shared_weak_count::__release_weak(v222);
                        }
                      }
                      MEMORY[0x227684CE8](v218, 0x10F0C40B62ED6C6);
                    }
                  }
                  v225 = *(std::__shared_weak_count **)&object[32];
                  if (*(_QWORD *)&object[32])
                  {
                    v226 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                    do
                      v227 = __ldaxr(v226);
                    while (__stlxr(v227 - 1, v226));
                    if (!v227)
                    {
                      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
                      std::__shared_weak_count::__release_weak(v225);
                      v228 = *(std::__shared_weak_count **)&object[16];
                      if (*(_QWORD *)&object[16])
                        goto LABEL_289;
                      goto LABEL_292;
                    }
                  }
                  v228 = *(std::__shared_weak_count **)&object[16];
                  if (!*(_QWORD *)&object[16])
                    goto LABEL_292;
LABEL_289:
                  v229 = (unint64_t *)&v228->__shared_owners_;
                  do
                    v230 = __ldaxr(v229);
                  while (__stlxr(v230 - 1, v229));
                  if (v230)
                  {
LABEL_292:
                    if (v545)
                      goto LABEL_293;
LABEL_294:
                    sub_223182C08((uint64_t)key);
                    v231 = v579;
                    if (v579)
                    {
                      v232 = (unint64_t *)&v579->__shared_owners_;
                      do
                        v233 = __ldaxr(v232);
                      while (__stlxr(v233 - 1, v232));
                      if (!v233)
                      {
                        ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                        std::__shared_weak_count::__release_weak(v231);
                      }
                    }
                    goto LABEL_179;
                  }
                  ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                  std::__shared_weak_count::__release_weak(v228);
                  if (!v545)
                    goto LABEL_294;
                }
                else
                {
                  os_log_type_enabled(v175, OS_LOG_TYPE_ERROR);
                  *(_QWORD *)object = 0xD04100202;
                  *(_WORD *)&object[8] = 2080;
                  *(_QWORD *)&object[10] = __s;
                  v185 = (void *)_os_log_send_and_compose_impl();
                  if (v185)
                    free(v185);
                  if (!v176)
                    goto LABEL_294;
                }
LABEL_293:
                sub_2245664AC(v155, object);
                sub_22322C138((uint64_t)key, "Visualizing GP %.13s that does not exist", object);
                sub_223182C08((uint64_t)key);
                goto LABEL_294;
              }
            }
            memmove(v171, v169, v170);
            goto LABEL_206;
          }
        }
      }
LABEL_179:
      v155 += 464;
    }
    while (v155 != v154);
  }
  if (!v535 || !*(_BYTE *)(v151 + 272))
    goto LABEL_335;
  if ((!*(_DWORD *)(v151 + 248) || !*(_DWORD *)(v151 + 252))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223C3BF78(v151 + 216, (uint64_t)object);
  v235 = *(std::__shared_weak_count **)&object[16];
  if (*(_QWORD *)&object[16])
  {
    v236 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
  if (!*(_BYTE *)(v151 + 272))
  {
    object[0] = 0;
    object[56] = 0;
    sub_22324A974();
  }
  v521 = (float32x2_t)*a3;
  v524 = *(float *)a3[1].i32;
  v520 = (float32x2_t)a3[2];
  v542 = *(float *)a3[3].i32;
  v519 = (float32x2_t)a3[4];
  *(int32x2_t *)v234.f32 = a3[6];
  v234.i32[2] = a3[7].i32[0];
  v518 = v234;
  v234.i32[0] = a3[5].i32[0];
  v522 = *(float32x2_t *)v234.f32;
  *(_OWORD *)__dst = *(_OWORD *)(v151 + 1552);
  v526 = *(float32x4_t *)(v151 + 1568);
  v529 = *(float32x4_t *)(v151 + 1584);
  v546 = *(float32x4_t *)(v151 + 1600);
  if ((!*(_DWORD *)(v151 + 248) || !*(_DWORD *)(v151 + 252))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223C3BF78(v151 + 216, (uint64_t)key);
  v238 = (int8x16_t)vnegq_f32(v518);
  v239 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v521, (int32x2_t)v520), *(float *)v238.i32), (float32x2_t)vzip2_s32((int32x2_t)v521, (int32x2_t)v520), *(float32x2_t *)v518.f32, 1), (float32x2_t)__PAIR64__(LODWORD(v542), LODWORD(v524)), v518, 2);
  LODWORD(v240) = vmla_f32(vmls_lane_f32(vmul_f32(v519, *(float32x2_t *)v238.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v519, 1), *(float32x2_t *)v518.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v238, v238, 8uLL), v522).u32[0];
  v241 = (int32x4_t)vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)__dst, v521.f32[0]), v526, v520.f32[0]), v529, v519.f32[0]), (float32x4_t)0, v546);
  v242 = (int32x4_t)vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(*(float32x4_t *)__dst, v521, 1), v526, v520, 1), v529, v519, 1), (float32x4_t)0, v546);
  v243 = (int8x16_t)vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)__dst, v524), v526, v542), v529, v522.f32[0]), (float32x4_t)0, v546);
  v244 = vaddq_f32(v546, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)__dst, v239.f32[0]), v526, v239, 1), v529, v240));
  *(_QWORD *)object = &off_24EC200A8;
  *(_OWORD *)&object[8] = *(_OWORD *)&key[8];
  *(_OWORD *)&object[24] = *(_OWORD *)&key[24];
  *(_OWORD *)&object[34] = *(_OWORD *)&key[34];
  object[56] = 1;
  v246 = *(__int16 ***)(v151 + 192);
  v245 = *(_QWORD *)(v151 + 200);
  *(_QWORD *)&v247 = vzip1q_s32(v241, v242).u64[0];
  v248 = (int8x16_t)vnegq_f32(v244);
  *((_QWORD *)&v247 + 1) = v243.u32[0];
  v249 = (int8x16_t)vtrn2q_s32(v241, v242);
  v249.i32[2] = v243.i32[1];
  v250 = (int8x16_t)vzip2q_s32(v241, v242);
  v251 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v247, *(float *)v248.i32), *(float32x2_t *)v249.i8, *(float32x2_t *)v244.f32, 1), *(float32x2_t *)v250.i8, v244, 2);
  v250.i32[2] = v243.i32[2];
  v252 = vmls_lane_f32(vmul_f32(*(float32x2_t *)v243.i8, *(float32x2_t *)v248.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v243.i8, 1), *(float32x2_t *)v244.f32, 1);
  v244.i64[0] = vextq_s8(v243, v243, 8uLL).u64[0];
  v243.i32[3] = 0;
  v243.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v249, 0).i32[3];
  *(uint64_t *)((char *)v243.i64 + 4) = vextq_s8(v249, v250, 4uLL).u64[0];
  v250.i64[1] = vdupq_laneq_s32((int32x4_t)v250, 2).u32[0];
  *(int8x16_t *)&key[16] = v243;
  *(int8x16_t *)&key[32] = v250;
  *(_OWORD *)key = v247;
  *(float32x2_t *)&key[48] = v251;
  LODWORD(v578) = vmla_f32(v252, (float32x2_t)*(_OWORD *)&vextq_s8(v248, v248, 8uLL), *(float32x2_t *)v244.f32).u32[0];
  HIDWORD(v578) = 1065353216;
  v253 = (char *)operator new(0x20uLL);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v253;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v549;
  *(float32x4_t *)v253 = v548[1];
  *(float32x4_t *)(v253 + 11) = v548[0];
  v253[27] = 0;
  __s[23] = 20;
  strcpy(__s, "SingleShotPointCloud");
  sub_22373D81C((uint64_t)object, 0x2E8BA2E8BA2E8BA3 * ((v245 - (uint64_t)v246) >> 3), v246, (float32x2_t *)(v151 + 1456), (float32x2_t *)key, (uint64_t)&__p, (uint64_t)__s);
  if ((__s[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_324;
LABEL_330:
    operator delete(__p.__r_.__value_.__l.__data_);
    if (object[56])
      goto LABEL_331;
LABEL_335:
    v257 = *(_OWORD **)(a1 + 32);
    v258 = *(_OWORD **)(a1 + 40);
    if (v257 != v258)
      goto LABEL_339;
    goto LABEL_342;
  }
  operator delete(*(void **)__s);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_330;
LABEL_324:
  if (!object[56])
    goto LABEL_335;
LABEL_331:
  v254 = *(std::__shared_weak_count **)&object[16];
  if (!*(_QWORD *)&object[16])
    goto LABEL_335;
  v255 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
  do
    v256 = __ldaxr(v255);
  while (__stlxr(v256 - 1, v255));
  if (v256)
    goto LABEL_335;
  ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
  std::__shared_weak_count::__release_weak(v254);
  v257 = *(_OWORD **)(a1 + 32);
  v258 = *(_OWORD **)(a1 + 40);
  if (v257 != v258)
  {
    while (1)
    {
LABEL_339:
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v257;
      sub_2245664AC((unsigned __int8 *)&__p, object);
      v259 = operator new(0x28uLL);
      *(_QWORD *)key = v259;
      *(_OWORD *)&key[8] = xmmword_2245C4640;
      v260 = *(_OWORD *)&object[16];
      *v259 = *(_OWORD *)object;
      v259[1] = v260;
      *((_DWORD *)v259 + 8) = *(_DWORD *)&object[32];
      *((_BYTE *)v259 + 36) = 0;
      v261 = (char *)operator new(0x20uLL);
      *(_QWORD *)object = v261;
      *(_OWORD *)&object[8] = v549;
      *(float32x4_t *)v261 = v548[1];
      *(float32x4_t *)(v261 + 11) = v548[0];
      v261[27] = 0;
      sub_22373AF04((uint64_t)key, (const void **)object);
      if ((object[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)object);
        if ((key[23] & 0x80000000) == 0)
          goto LABEL_338;
LABEL_341:
        operator delete(*(void **)key);
        if (++v257 == v258)
          break;
      }
      else
      {
        if ((key[23] & 0x80000000) != 0)
          goto LABEL_341;
LABEL_338:
        if (++v257 == v258)
          break;
      }
    }
  }
LABEL_342:
  if (!v535)
    goto LABEL_628;
  if (*(_BYTE *)(v151 + 656))
  {
    if ((!*(_DWORD *)(v151 + 632) || !*(_DWORD *)(v151 + 636))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1175, (uint64_t)"!color.color->Empty()", 21, (uint64_t)"Color buffer not valid", 22, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3E368(v151 + 576, (uint64_t)object);
    v596 = *(_OWORD *)&object[24];
    v597 = *(_OWORD *)&object[40];
    v598 = *(_OWORD *)&object[56];
    v599 = v601;
    *(_QWORD *)v595 = &off_24EC21DF8;
    *(_OWORD *)&v595[8] = *(_OWORD *)&object[8];
    sub_223CC580C((uint64_t)v595, (uint64_t)&__p);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v262 = sub_2241471F8();
      v263 = v262[2];
      if (!v263)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v263 = v262[2];
      }
      v264 = *(_QWORD *)(v263 + 64);
      v265 = (std::mutex *)(v264 + 32);
      std::mutex::lock((std::mutex *)(v264 + 32));
      v267 = *(_QWORD *)(v264 + 96);
      v266 = *(_QWORD *)(v264 + 104);
      std::mutex::unlock(v265);
      if (v267 != v266)
      {
        sub_22328CE6C("cv3d.recon.", (const char *)off_24EC57B68);
        v268 = v557;
        v269 = (void **)v556;
        sub_2241471F8();
        if (v268 >= 0)
          v270 = &v556;
        else
          v270 = v269;
        v271 = (*(uint64_t (**)(uint64_t *, void **))(qword_2557952E0 + 48))(&qword_2557952E0, v270);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v271 + 24))(v271))
        {
          memset(v554, 0, sizeof(v554));
          v555 = 728325616;
          kdebug_trace();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v271 + 24))(v271))
          {
            *(_QWORD *)&v576 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            *((_QWORD *)&v576 + 1) = 2;
            v272 = sub_2241471F8();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v271 + 24))(v271))
            {
              v273 = *(_QWORD *)(v151 + 1544);
              v589[0] = 0;
              v589[16] = 0;
              sub_223702B64((uint64_t)object, (__int16 ***)(v151 + 192), v273, (uint64_t)v589);
              *(_QWORD *)__s = &off_24EC57DE8;
              sub_2237042B0((uint64_t *)&__s[8], *(uint64_t *)&object[8], *(std::__shared_weak_count **)&object[16]);
              *(_QWORD *)v583 = &off_24EC57DE8;
              sub_223704620((uint64_t)&__p, (uint64_t *)&v583[8]);
              sub_224002AA4((uint64_t)__s, (uint64_t)v583, (uint64_t)key, 0.5);
              v274 = *(std::__shared_weak_count **)&v583[16];
              if (*(_QWORD *)&v583[16])
              {
                v275 = (unint64_t *)(*(_QWORD *)&v583[16] + 8);
                do
                  v276 = __ldaxr(v275);
                while (__stlxr(v276 - 1, v275));
                if (!v276)
                {
                  ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
                  std::__shared_weak_count::__release_weak(v274);
                }
              }
              v277 = *(std::__shared_weak_count **)&__s[16];
              if (*(_QWORD *)&__s[16])
              {
                v278 = (unint64_t *)(*(_QWORD *)&__s[16] + 8);
                do
                  v279 = __ldaxr(v278);
                while (__stlxr(v279 - 1, v278));
                if (!v279)
                {
                  ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                  std::__shared_weak_count::__release_weak(v277);
                }
              }
              v280 = *(unsigned int **)(v151 + 144);
              for (i = *(unsigned int **)(v151 + 152); v280 != i; v280 += 4)
              {
                v282 = v280[1];
                *(_QWORD *)v583 = *v280;
                *(_QWORD *)&v583[8] = v282;
                *(_QWORD *)&v583[16] = v280[2];
                v584 = v282;
                v283 = v280[3];
                v585 = *(_QWORD *)&v583[16];
                v586 = v283;
                v587 = *(_QWORD *)v583;
                v588 = v283;
                *(_QWORD *)__s = &off_24EC232F0;
                sub_223416D28((uint64_t)key, (uint64_t *)&__s[8]);
                v590 = 0;
                v591 = 0;
                sub_223738D80((uint64_t)__s, 4uLL, (uint64_t *)v583, (uint64_t)&v590, v284, v285, v286, v287, v288);
                v289 = *(std::__shared_weak_count **)&__s[16];
                if (*(_QWORD *)&__s[16])
                {
                  v290 = (unint64_t *)(*(_QWORD *)&__s[16] + 8);
                  do
                    v291 = __ldaxr(v290);
                  while (__stlxr(v291 - 1, v290));
                  if (!v291)
                  {
                    ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
                    std::__shared_weak_count::__release_weak(v289);
                  }
                }
              }
              sub_223167354((uint64_t)&object[8]);
              __s[0] = 0;
              v603 = 0;
              sub_2231C6C30(key, (__int128 *)__s, &v576, &v580);
              if (v603 && (__s[23] & 0x80000000) != 0)
                operator delete(*(void **)__s);
              sub_223167354((uint64_t)&key[8]);
              v292 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v271 + 56))(v271);
              v293 = *v292;
              v294 = (std::__shared_weak_count *)v292[1];
              v151 = a4;
              if (v294)
              {
                v295 = (unint64_t *)&v294->__shared_owners_;
                do
                  v296 = __ldxr(v295);
                while (__stxr(v296 + 1, v295));
              }
              v297 = v581;
              v298 = v582;
              *(_QWORD *)key = &off_24EC6A3B8;
              *(_QWORD *)&key[8] = v581;
              *(_QWORD *)&key[16] = v582;
              v582 = 0;
              v581 = 0;
              *(_QWORD *)object = v293;
              *(_QWORD *)&object[8] = v294;
              if (v294)
              {
                v299 = (unint64_t *)&v294->__shared_owners_;
                do
                  v300 = __ldxr(v299);
                while (__stxr(v300 + 1, v299));
              }
              *(_QWORD *)&object[16] = &off_24EC6A3B8;
              *(_QWORD *)&object[24] = v297;
              *(_QWORD *)&object[32] = v298;
              if (v298)
              {
                v301 = (unint64_t *)(v298 + 8);
                do
                  v302 = __ldxr(v301);
                while (__stxr(v302 + 1, v301));
              }
              (*(void (**)(uint64_t *, _BYTE *))(*v272 + 16))(v272, object);
              sub_2241231D8((uint64_t)&object[16]);
              v303 = *(std::__shared_weak_count **)&object[8];
              if (*(_QWORD *)&object[8])
              {
                v304 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
                do
                  v305 = __ldaxr(v304);
                while (__stlxr(v305 - 1, v304));
                if (!v305)
                {
                  ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
                  std::__shared_weak_count::__release_weak(v303);
                }
              }
              sub_2241231D8((uint64_t)key);
              if (v294)
              {
                v306 = (unint64_t *)&v294->__shared_owners_;
                do
                  v307 = __ldaxr(v306);
                while (__stlxr(v307 - 1, v306));
                if (!v307)
                {
                  ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                  std::__shared_weak_count::__release_weak(v294);
                }
              }
              sub_2241231D8((uint64_t)&v580);
            }
          }
          kdebug_trace();
        }
        if (v557 < 0)
          operator delete(v556);
      }
    }
    sub_22328CE6C("cv3d.recon.", (const char *)off_24EC57B70);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v308 = sub_2241471F8();
      v309 = v308[2];
      if (!v309)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v309 = v308[2];
      }
      v310 = *(_QWORD *)(v309 + 64);
      v311 = (std::mutex *)(v310 + 32);
      std::mutex::lock((std::mutex *)(v310 + 32));
      v313 = *(_QWORD *)(v310 + 96);
      v312 = *(_QWORD *)(v310 + 104);
      std::mutex::unlock(v311);
      if (v313 != v312)
      {
        v314 = key[23];
        v315 = *(_BYTE **)key;
        sub_2241471F8();
        v316 = v314 >= 0 ? key : v315;
        v317 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v316);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v317 + 24))(v317))
        {
          memset(object, 0, 32);
          *(_DWORD *)&object[32] = 728325608;
          kdebug_trace();
          v318 = *(_QWORD *)v151;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v317 + 24))(v317))
          {
            *(_QWORD *)__s = (uint64_t)((double)v318 / 1000000000.0 * 1000000000.0);
            *(_QWORD *)&__s[8] = 2;
            v319 = sub_2241471F8();
            sub_22370472C((uint64_t)v319, v317, (uint64_t)&__p, (uint64_t)&unk_2245C9EFE, (__int128 *)__s);
          }
          kdebug_trace();
        }
      }
    }
    memset(object, 0, 32);
    *(_DWORD *)&object[32] = 728325624;
    kdebug_trace();
    v320 = key[23];
    if (key[23] < 0)
      v320 = *(_QWORD *)&key[8];
    if (v320 >= 0x11)
    {
      v321 = key;
      if (key[23] < 0)
        v321 = *(_BYTE **)key;
      v322 = *(_QWORD *)v321;
      v323 = *((_QWORD *)v321 + 1);
      v324 = v321[16];
      if (v322 == 0x6365722E64337663 && v323 == 0x73746174532E6E6FLL && v324 == 46)
        sub_223187510();
    }
    kdebug_trace();
    if ((key[23] & 0x80000000) != 0)
      operator delete(*(void **)key);
    v327 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
    if (__p.__r_.__value_.__r.__words[2])
    {
      v328 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
      do
        v329 = __ldaxr(v328);
      while (__stlxr(v329 - 1, v328));
      if (!v329)
      {
        ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
        std::__shared_weak_count::__release_weak(v327);
      }
    }
    v330 = *(std::__shared_weak_count **)&v595[16];
    if (*(_QWORD *)&v595[16])
    {
      v331 = (unint64_t *)(*(_QWORD *)&v595[16] + 8);
      do
        v332 = __ldaxr(v331);
      while (__stlxr(v332 - 1, v331));
      if (!v332)
      {
        ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
        std::__shared_weak_count::__release_weak(v330);
      }
    }
  }
  sub_22328CE6C("cv3d.recon.", (const char *)off_24EC57B78);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v333 = sub_2241471F8();
    v334 = v333[2];
    if (!v334)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v334 = v333[2];
    }
    v335 = *(_QWORD *)(v334 + 64);
    v336 = (std::mutex *)(v335 + 32);
    std::mutex::lock((std::mutex *)(v335 + 32));
    v338 = *(_QWORD *)(v335 + 96);
    v337 = *(_QWORD *)(v335 + 104);
    std::mutex::unlock(v336);
    if (v338 != v337)
    {
      v339 = key[23];
      v340 = *(_BYTE **)key;
      sub_2241471F8();
      v341 = v339 >= 0 ? key : v340;
      v342 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v341);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v342 + 24))(v342))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        v343 = *(_QWORD *)v151;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v342 + 24))(v342))
        {
          __p.__r_.__value_.__r.__words[0] = (uint64_t)((double)v343 / 1000000000.0 * 1000000000.0);
          __p.__r_.__value_.__l.__size_ = 2;
          v344 = sub_2241471F8();
          sub_223704D40((uint64_t)v344, v342, v151 + 2040, (__int128 *)&__p);
        }
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  v345 = key[23];
  if (key[23] < 0)
    v345 = *(_QWORD *)&key[8];
  if (v345 >= 0x11)
  {
    v346 = key;
    if (key[23] < 0)
      v346 = *(_BYTE **)key;
    v347 = *(_QWORD *)v346;
    v348 = *((_QWORD *)v346 + 1);
    v349 = v346[16];
    if (v347 == 0x6365722E64337663 && v348 == 0x73746174532E6E6FLL && v349 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if ((key[23] & 0x80000000) != 0)
    operator delete(*(void **)key);
  sub_22328CE6C("cv3d.recon.", (const char *)off_24EC57B80);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v352 = sub_2241471F8();
    v353 = v352[2];
    if (!v353)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v353 = v352[2];
    }
    v354 = *(_QWORD *)(v353 + 64);
    v355 = (std::mutex *)(v354 + 32);
    std::mutex::lock((std::mutex *)(v354 + 32));
    v357 = *(_QWORD *)(v354 + 96);
    v356 = *(_QWORD *)(v354 + 104);
    std::mutex::unlock(v355);
    if (v357 != v356)
    {
      v358 = key[23];
      v359 = *(_BYTE **)key;
      sub_2241471F8();
      v360 = v358 >= 0 ? key : v359;
      v361 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v360);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v361 + 24))(v361))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        sub_223700708((double)*(uint64_t *)v151 / 1000000000.0, (uint64_t)&qword_255788F20, v361, v151 + 1456, "color_frame_cam");
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  v362 = key[23];
  if (key[23] < 0)
    v362 = *(_QWORD *)&key[8];
  if (v362 >= 0x11)
  {
    v363 = key;
    if (key[23] < 0)
      v363 = *(_BYTE **)key;
    v364 = *(_QWORD *)v363;
    v365 = *((_QWORD *)v363 + 1);
    v366 = v363[16];
    if (v364 == 0x6365722E64337663 && v365 == 0x73746174532E6E6FLL && v366 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if ((key[23] & 0x80000000) != 0)
    operator delete(*(void **)key);
  v530 = (float32x2_t)*a3;
  v539 = *(float *)a3[1].i32;
  *(int32x2_t *)v369.f32 = a3[2];
  v527 = *(float32x2_t *)v369.f32;
  v369.i32[0] = a3[3].i32[0];
  v548[1] = v369;
  *(int32x2_t *)v369.f32 = a3[4];
  v525 = *(float32x2_t *)v369.f32;
  v369.i32[0] = a3[5].i32[0];
  v549 = (__int128)v369;
  *(int32x2_t *)v369.f32 = a3[6];
  v369.i32[2] = a3[7].i32[0];
  v533 = v369;
  v536 = *(float32x4_t *)(v151 + 1552);
  v548[0] = *(float32x4_t *)(v151 + 1584);
  v543 = *(float32x4_t *)(v151 + 1568);
  v547 = *(float32x4_t *)(v151 + 1600);
  sub_22328CE6C("cv3d.recon.", (const char *)off_24EC57B88);
  sub_224569D7C();
  sub_224569A80();
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v371 = (int8x16_t)vnegq_f32(v533);
  v372 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v530, (int32x2_t)v527), *(float *)v371.i32), (float32x2_t)vzip2_s32((int32x2_t)v530, (int32x2_t)v527), *(float32x2_t *)v533.f32, 1), (float32x2_t)__PAIR64__(v548[1].u32[0], LODWORD(v539)), v533, 2);
  LODWORD(v373) = vmla_f32(vmls_lane_f32(vmul_f32(v525, *(float32x2_t *)v371.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v525, 1), *(float32x2_t *)v533.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v371, v371, 8uLL), *(float32x2_t *)&v549).u32[0];
  v534 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v536, v530.f32[0]), v543, v527.f32[0]), v548[0], v525.f32[0]), (float32x4_t)0, v547);
  v531 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v536, v530, 1), v543, v527, 1), v548[0], v525, 1), (float32x4_t)0, v547);
  v374 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v536, v539), v543, v548[1].f32[0]), v548[0], *(float *)&v549), (float32x4_t)0, v547);
  v548[1] = vaddq_f32(v547, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v536, v372.f32[0]), v543, v372, 1), v548[0], v373));
  v549 = (__int128)v374;
  if (has_internal_diagnostics)
  {
    v375 = sub_2241471F8();
    v376 = v375[2];
    if (!v376)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v376 = v375[2];
    }
    v377 = *(_QWORD *)(v376 + 64);
    v378 = (std::mutex *)(v377 + 32);
    std::mutex::lock((std::mutex *)(v377 + 32));
    v380 = *(_QWORD *)(v377 + 96);
    v379 = *(_QWORD *)(v377 + 104);
    std::mutex::unlock(v378);
    if (v380 != v379)
    {
      v381 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v382 = (std::string *)__p.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v383 = v381 >= 0 ? &__p : v382;
      v384 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v383);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v384 + 24))(v384))
      {
        memset(key, 0, 32);
        *(_DWORD *)&key[32] = 728325608;
        kdebug_trace();
        v385 = operator new();
        *(float32x4_t *)v385 = v534;
        *(float32x4_t *)(v385 + 16) = v531;
        *(_OWORD *)(v385 + 32) = v549;
        *(float32x4_t *)(v385 + 48) = v548[1];
        *(_DWORD *)(v385 + 128) = 0;
        *(_BYTE *)(v385 + 136) = 4;
        v386 = operator new();
        *(_BYTE *)v386 = 0;
        *(_DWORD *)(v386 + 128) = -1;
        v387 = *(unsigned int *)(v385 + 128);
        if ((_DWORD)v387 != -1)
        {
          ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC6BD10[v387])(__s, v386, v385);
          *(_DWORD *)(v386 + 128) = v387;
        }
        *(_BYTE *)(v386 + 136) = *(_BYTE *)(v385 + 136);
        *(_QWORD *)object = v386;
        object[8] = 0;
        object[32] = 0;
        strcpy(&object[40], "color_frame_cam");
        *(_DWORD *)&object[56] = v553[0];
        *(_DWORD *)&object[59] = *(_DWORD *)((char *)v553 + 3);
        *(_WORD *)&object[63] = 271;
        v553[0] = 0;
        *(_DWORD *)((char *)v553 + 3) = 0;
        sub_22370085C((double)*(uint64_t *)v151 / 1000000000.0, (uint64_t)&qword_255788F20, v384, (uint64_t)object, "world_to_color_frame_cam");
        if (object[64] && (object[63] & 0x80000000) != 0)
          operator delete(*(void **)&object[40]);
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        v388 = *(_QWORD *)object;
        *(_QWORD *)object = 0;
        if (v388)
          MEMORY[0x227684CE8](v388, 0x1000C4072FAA15ELL);
        MEMORY[0x227684CE8](v385, 0x1000C4072FAA15ELL);
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v391 = p_p->__r_.__value_.__r.__words[0];
    v392 = p_p->__r_.__value_.__l.__size_;
    v393 = p_p->__r_.__value_.__s.__data_[16];
    if (v391 == 0x6365722E64337663 && v392 == 0x73746174532E6E6FLL && v393 == 46)
    {
      sub_223187510();
      v396 = operator new();
      *(float32x4_t *)v396 = v534;
      *(float32x4_t *)(v396 + 16) = v531;
      *(_OWORD *)(v396 + 32) = v549;
      *(float32x4_t *)(v396 + 48) = v548[1];
      *(_DWORD *)(v396 + 128) = 0;
      *(_BYTE *)(v396 + 136) = 4;
      v397 = operator new();
      *(_BYTE *)v397 = 0;
      *(_DWORD *)(v397 + 128) = -1;
      v398 = *(unsigned int *)(v396 + 128);
      if ((_DWORD)v398 != -1)
      {
        ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC6BD10[v398])(key, v397, v396);
        *(_DWORD *)(v397 + 128) = v398;
      }
      *(_BYTE *)(v397 + 136) = *(_BYTE *)(v396 + 136);
      MEMORY[0x227684CE8](v397, 0x1000C4072FAA15ELL);
      MEMORY[0x227684CE8](v396, 0x1000C4072FAA15ELL);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_22328CE6C("cv3d.recon.", (const char *)off_24EC57B90);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v399 = sub_2241471F8();
    v400 = v399[2];
    if (!v400)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v400 = v399[2];
    }
    v401 = *(_QWORD *)(v400 + 64);
    v402 = (std::mutex *)(v401 + 32);
    std::mutex::lock((std::mutex *)(v401 + 32));
    v404 = *(_QWORD *)(v401 + 96);
    v403 = *(_QWORD *)(v401 + 104);
    std::mutex::unlock(v402);
    if (v404 != v403)
    {
      v405 = key[23];
      v406 = *(_BYTE **)key;
      sub_2241471F8();
      v407 = v405 >= 0 ? key : v406;
      v408 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v407);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v408 + 24))(v408))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v408 + 24))(v408))
        {
          __p.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          __p.__r_.__value_.__l.__size_ = 2;
          v409 = sub_2241471F8();
          sub_223704D40((uint64_t)v409, v408, v151 + 56, (__int128 *)&__p);
        }
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  v410 = key[23];
  if (key[23] < 0)
    v410 = *(_QWORD *)&key[8];
  if (v410 >= 0x11)
  {
    v411 = key;
    if (key[23] < 0)
      v411 = *(_BYTE **)key;
    v412 = *(_QWORD *)v411;
    v413 = *((_QWORD *)v411 + 1);
    v414 = v411[16];
    if (v412 == 0x6365722E64337663 && v413 == 0x73746174532E6E6FLL && v414 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if ((key[23] & 0x80000000) != 0)
    operator delete(*(void **)key);
  *(_QWORD *)&object[16] = 0;
  *(_QWORD *)&object[8] = 0;
  *(_QWORD *)object = &object[8];
  sub_2245314F4(object, key);
  *(_OWORD *)__s = *(_OWORD *)key;
  sub_22323DF84((uint64_t)object, *(char **)&object[8]);
  v417 = *(_QWORD *)(v151 + 8);
  v418 = *(_QWORD *)(v151 + 16);
  if (v417 != v418)
  {
    v419 = 0;
    while (1)
    {
      __p.__r_.__value_.__r.__words[0] = v419;
      __p.__r_.__value_.__l.__size_ = v417;
      *(_QWORD *)&object[8] = 0;
      *(_QWORD *)&object[16] = 0;
      *(_QWORD *)object = &object[8];
      sub_2245314F4(object, key);
      *(_OWORD *)v583 = *(_OWORD *)key;
      sub_22323DF84((uint64_t)object, *(char **)&object[8]);
      object[23] = 7;
      strcpy(object, "support");
      *(_QWORD *)v595 = __p.__r_.__value_.__l.__size_;
      sub_224527BAC((uint64_t)object, (CFStringRef *)key);
      sub_22342669C((uint64_t)v583, *(void **)key, (uint64_t *)v595);
      v420 = *(std::__shared_weak_count **)&key[8];
      if (*(_QWORD *)&key[8])
      {
        v421 = (unint64_t *)(*(_QWORD *)&key[8] + 8);
        do
          v422 = __ldaxr(v421);
        while (__stlxr(v422 - 1, v421));
        if (!v422)
          break;
      }
      if ((object[23] & 0x80000000) != 0)
        goto LABEL_571;
LABEL_572:
      object[23] = 6;
      strcpy(object, "normal");
      *(_QWORD *)v595 = __p.__r_.__value_.__l.__size_ + 12;
      sub_224527BAC((uint64_t)object, (CFStringRef *)key);
      sub_22342669C((uint64_t)v583, *(void **)key, (uint64_t *)v595);
      v423 = *(std::__shared_weak_count **)&key[8];
      if (*(_QWORD *)&key[8])
      {
        v424 = (unint64_t *)(*(_QWORD *)&key[8] + 8);
        do
          v425 = __ldaxr(v424);
        while (__stlxr(v425 - 1, v424));
        if (!v425)
        {
          ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
          std::__shared_weak_count::__release_weak(v423);
          if ((object[23] & 0x80000000) == 0)
            goto LABEL_578;
LABEL_577:
          operator delete(*(void **)object);
          goto LABEL_578;
        }
      }
      if ((object[23] & 0x80000000) != 0)
        goto LABEL_577;
LABEL_578:
      sub_223425184((unint64_t *)&__p);
      sub_224527BAC((uint64_t)object, (CFStringRef *)key);
      sub_223427380((uint64_t)__s, *(void **)key, (void **)v583);
      v426 = *(std::__shared_weak_count **)&key[8];
      if (!*(_QWORD *)&key[8])
        goto LABEL_582;
      v427 = (unint64_t *)(*(_QWORD *)&key[8] + 8);
      do
        v428 = __ldaxr(v427);
      while (__stlxr(v428 - 1, v427));
      if (!v428)
      {
        ((void (*)(std::__shared_weak_count *))v426->__on_zero_shared)(v426);
        std::__shared_weak_count::__release_weak(v426);
        if ((object[23] & 0x80000000) == 0)
        {
LABEL_583:
          v429 = *(std::__shared_weak_count **)&v583[8];
          if (*(_QWORD *)&v583[8])
            goto LABEL_591;
          goto LABEL_565;
        }
      }
      else
      {
LABEL_582:
        if ((object[23] & 0x80000000) == 0)
          goto LABEL_583;
      }
      operator delete(*(void **)object);
      v429 = *(std::__shared_weak_count **)&v583[8];
      if (*(_QWORD *)&v583[8])
      {
LABEL_591:
        v430 = (unint64_t *)&v429->__shared_owners_;
        do
          v431 = __ldaxr(v430);
        while (__stlxr(v431 - 1, v430));
        if (!v431)
        {
          ((void (*)(std::__shared_weak_count *))v429->__on_zero_shared)(v429);
          std::__shared_weak_count::__release_weak(v429);
        }
      }
LABEL_565:
      v417 += 24;
      ++v419;
      if (v417 == v418)
        goto LABEL_595;
    }
    ((void (*)(std::__shared_weak_count *))v420->__on_zero_shared)(v420);
    std::__shared_weak_count::__release_weak(v420);
    if ((object[23] & 0x80000000) == 0)
      goto LABEL_572;
LABEL_571:
    operator delete(*(void **)object);
    goto LABEL_572;
  }
LABEL_595:
  sub_22328CE6C("cv3d.recon.", (const char *)off_24EC57B98);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v432 = sub_2241471F8();
    v433 = v432[2];
    if (!v433)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v433 = v432[2];
    }
    v434 = *(_QWORD *)(v433 + 64);
    v435 = (std::mutex *)(v434 + 32);
    std::mutex::lock((std::mutex *)(v434 + 32));
    v437 = *(_QWORD *)(v434 + 96);
    v436 = *(_QWORD *)(v434 + 104);
    std::mutex::unlock(v435);
    if (v437 != v436)
    {
      v438 = key[23];
      v439 = *(_BYTE **)key;
      sub_2241471F8();
      v440 = v438 >= 0 ? key : v439;
      v441 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v440);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v441 + 24))(v441))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v441 + 24))(v441))
        {
          __p.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          __p.__r_.__value_.__l.__size_ = 2;
          v442 = sub_2241471F8();
          sub_2234277D4((uint64_t)v442, v441, (uint64_t)__s, (uint64_t)&unk_2245C9EFE, (__int128 *)&__p);
        }
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  v443 = key[23];
  if (key[23] < 0)
    v443 = *(_QWORD *)&key[8];
  if (v443 >= 0x11)
  {
    v444 = key;
    if (key[23] < 0)
      v444 = *(_BYTE **)key;
    v445 = *(_QWORD *)v444;
    v446 = *((_QWORD *)v444 + 1);
    v447 = v444[16];
    if (v445 == 0x6365722E64337663 && v446 == 0x73746174532E6E6FLL && v447 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if ((key[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)key);
    v450 = *(std::__shared_weak_count **)&__s[8];
    if (!*(_QWORD *)&__s[8])
      goto LABEL_628;
  }
  else
  {
    v450 = *(std::__shared_weak_count **)&__s[8];
    if (!*(_QWORD *)&__s[8])
      goto LABEL_628;
  }
  v451 = (unint64_t *)&v450->__shared_owners_;
  do
    v452 = __ldaxr(v451);
  while (__stlxr(v452 - 1, v451));
  if (v452)
  {
LABEL_628:
    if (*(_BYTE *)(a1 + 368))
      goto LABEL_629;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
    std::__shared_weak_count::__release_weak(v450);
    if (*(_BYTE *)(a1 + 368))
    {
LABEL_629:
      *(_QWORD *)object = "cv3d.recon.";
      *(_QWORD *)&object[8] = 11;
      *(_QWORD *)&object[16] = "KeyframePlanes.SingleShotOutputSegmentationMask";
      *(_QWORD *)&object[24] = 47;
      sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, (std::string *)key);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v453 = sub_2241471F8();
        v454 = v453[2];
        if (!v454)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v454 = v453[2];
        }
        v455 = *(_QWORD *)(v454 + 64);
        v456 = (std::mutex *)(v455 + 32);
        std::mutex::lock((std::mutex *)(v455 + 32));
        v458 = *(_QWORD *)(v455 + 96);
        v457 = *(_QWORD *)(v455 + 104);
        std::mutex::unlock(v456);
        if (v458 != v457)
        {
          v459 = key[23];
          v460 = *(_BYTE **)key;
          sub_2241471F8();
          v461 = v459 >= 0 ? key : v460;
          v462 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v461);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v462 + 24))(v462))
          {
            memset(object, 0, 32);
            *(_DWORD *)&object[32] = 728325608;
            kdebug_trace();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v462 + 24))(v462))
            {
              __p.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
              __p.__r_.__value_.__l.__size_ = 2;
              v463 = sub_2241471F8();
              sub_223704D40((uint64_t)v463, v462, a1 + 280, (__int128 *)&__p);
            }
            kdebug_trace();
          }
        }
      }
      memset(object, 0, 32);
      *(_DWORD *)&object[32] = 728325624;
      kdebug_trace();
      v464 = key[23];
      if (key[23] < 0)
        v464 = *(_QWORD *)&key[8];
      if (v464 >= 0x11)
      {
        v465 = key;
        if (key[23] < 0)
          v465 = *(_BYTE **)key;
        v466 = *(_QWORD *)v465;
        v467 = *((_QWORD *)v465 + 1);
        v468 = v465[16];
        if (v466 == 0x6365722E64337663 && v467 == 0x73746174532E6E6FLL && v468 == 46)
          sub_223187510();
      }
      kdebug_trace();
      if ((key[23] & 0x80000000) != 0)
        operator delete(*(void **)key);
    }
  }
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    return kdebug_trace();
  v471 = sub_2241471F8();
  v472 = v471[2];
  if (!v472)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v472 = v471[2];
  }
  v473 = *(_QWORD *)(v472 + 64);
  v474 = (std::mutex *)(v473 + 32);
  std::mutex::lock((std::mutex *)(v473 + 32));
  v476 = *(_QWORD *)(v473 + 96);
  v475 = *(_QWORD *)(v473 + 104);
  std::mutex::unlock(v474);
  if (v476 == v475)
    return kdebug_trace();
  *(_QWORD *)object = "cv3d.recon.";
  *(_QWORD *)&object[8] = 11;
  *(_QWORD *)&object[16] = "KeyframePlanes.RawGlobalPlanesKeyframes";
  *(_QWORD *)&object[24] = 39;
  sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, (std::string *)key);
  v477 = key[23];
  v478 = *(_BYTE **)key;
  sub_2241471F8();
  if (v477 >= 0)
    v479 = key;
  else
    v479 = v478;
  v480 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v479);
  v481 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v480 + 32))(v480);
  v482 = v481;
  if ((key[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)key);
    if (v482 != 1)
      return kdebug_trace();
  }
  else if (v481 != 1)
  {
    return kdebug_trace();
  }
  v483 = atomic_load((unsigned __int8 *)&qword_2540CC0A8);
  if ((v483 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC0A8))
  {
    qword_2540CC0E0 = 0;
    qword_2540CC0D8 = 0;
    qword_2540CC0D0 = (uint64_t)&qword_2540CC0D8;
    __cxa_atexit((void (*)(void *))sub_2237006E0, &qword_2540CC0D0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CC0A8);
  }
  v484 = qword_2540CC0D0;
  if ((uint64_t *)qword_2540CC0D0 != &qword_2540CC0D8)
  {
    v549 = xmmword_2245C4640;
    v548[1] = (float32x4_t)xmmword_2245B9440;
    do
    {
      sub_2245664AC((unsigned __int8 *)(v484 + 25), object);
      v485 = operator new(0x28uLL);
      *(_QWORD *)key = v485;
      *(_OWORD *)&key[8] = v549;
      v486 = *(_OWORD *)&object[16];
      *v485 = *(_OWORD *)object;
      v485[1] = v486;
      *((_DWORD *)v485 + 8) = *(_DWORD *)&object[32];
      *((_BYTE *)v485 + 36) = 0;
      *(_QWORD *)object = operator new(0x28uLL);
      *(float32x4_t *)&object[8] = v548[1];
      strcpy(*(char **)object, "KeyframePlanes.RawGlobalPlanesKeyframes");
      sub_22373AF04((uint64_t)key, (const void **)object);
      if ((object[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)object);
        if ((key[23] & 0x80000000) == 0)
        {
LABEL_677:
          v487 = *(uint64_t **)(v484 + 8);
          if (v487)
            goto LABEL_681;
          goto LABEL_683;
        }
      }
      else if ((key[23] & 0x80000000) == 0)
      {
        goto LABEL_677;
      }
      operator delete(*(void **)key);
      v487 = *(uint64_t **)(v484 + 8);
      if (v487)
      {
        do
        {
LABEL_681:
          v488 = v487;
          v487 = (uint64_t *)*v487;
        }
        while (v487);
        goto LABEL_674;
      }
      do
      {
LABEL_683:
        v488 = *(uint64_t **)(v484 + 16);
        _ZF = *v488 == v484;
        v484 = (uint64_t)v488;
      }
      while (!_ZF);
LABEL_674:
      v484 = (uint64_t)v488;
    }
    while (v488 != &qword_2540CC0D8);
  }
  sub_223198030((uint64_t)&qword_2540CC0D0, (_QWORD *)qword_2540CC0D8);
  qword_2540CC0D0 = (uint64_t)&qword_2540CC0D8;
  qword_2540CC0E0 = 0;
  qword_2540CC0D8 = 0;
  sub_223737D60((uint64_t)v550, (int64x2_t *)object);
  v489 = *(uint64_t **)object;
  *(_QWORD *)&v549 = *(_QWORD *)&object[8];
  if (*(_QWORD *)object == *(_QWORD *)&object[8])
    goto LABEL_768;
  v548[1] = (float32x4_t)xmmword_2245B9440;
  while (2)
  {
    v490 = *v489;
    v492 = *(unsigned __int8 **)(*v489 + 208);
    v491 = *(unsigned __int8 **)(*v489 + 216);
    if (v492 == v491)
      goto LABEL_765;
    v493 = qword_2540CC0E0;
    while (2)
    {
      v494 = qword_2540CC0D8;
      if (!qword_2540CC0D8)
      {
        v496 = &qword_2540CC0D8;
        v497 = &qword_2540CC0D8;
        goto LABEL_736;
      }
      v495 = *v492;
      while (2)
      {
        while (2)
        {
          v497 = (uint64_t *)v494;
          v498 = *(unsigned __int8 *)(v494 + 25);
          _CF = v495 >= v498;
          if (v495 != v498)
          {
            v500 = *v492;
            goto LABEL_730;
          }
          v500 = v492[1];
          v498 = *((unsigned __int8 *)v497 + 26);
          _CF = v500 >= v498;
          if (v500 != v498
            || (v500 = v492[2], v498 = *((unsigned __int8 *)v497 + 27), _CF = v500 >= v498, v500 != v498)
            || (v500 = v492[3], v498 = *((unsigned __int8 *)v497 + 28), _CF = v500 >= v498, v500 != v498))
          {
LABEL_730:
            if (!_CF)
              goto LABEL_698;
            goto LABEL_732;
          }
          v501 = v492[4];
          v502 = *((unsigned __int8 *)v497 + 29);
          if (v501 != v502)
            goto LABEL_715;
          v501 = v492[5];
          v502 = *((unsigned __int8 *)v497 + 30);
          if (v501 != v502)
            goto LABEL_715;
          v501 = v492[6];
          v502 = *((unsigned __int8 *)v497 + 31);
          if (v501 != v502)
            goto LABEL_715;
          v501 = v492[7];
          v502 = *((unsigned __int8 *)v497 + 32);
          if (v501 != v502)
            goto LABEL_715;
          v501 = v492[8];
          v502 = *((unsigned __int8 *)v497 + 33);
          if (v501 != v502)
            goto LABEL_715;
          v501 = v492[9];
          v502 = *((unsigned __int8 *)v497 + 34);
          if (v501 != v502)
            goto LABEL_715;
          v501 = v492[10];
          v502 = *((unsigned __int8 *)v497 + 35);
          if (v501 != v502)
            goto LABEL_715;
          v501 = v492[11];
          v502 = *((unsigned __int8 *)v497 + 36);
          if (v501 != v502)
            goto LABEL_715;
          v501 = v492[12];
          v502 = *((unsigned __int8 *)v497 + 37);
          if (v501 != v502
            || (v501 = v492[13], v502 = *((unsigned __int8 *)v497 + 38), v501 != v502)
            || (v501 = v492[14], v502 = *((unsigned __int8 *)v497 + 39), v501 != v502)
            || (v501 = v492[15], v502 = *((unsigned __int8 *)v497 + 40), v501 != v502))
          {
LABEL_715:
            if (v501 < v502)
            {
LABEL_698:
              v494 = *v497;
              v496 = v497;
              if (!*v497)
                goto LABEL_736;
              continue;
            }
          }
          break;
        }
        v498 = *((unsigned __int8 *)v497 + 29);
        v500 = v492[4];
        if (v498 == v500)
        {
          v498 = *((unsigned __int8 *)v497 + 30);
          v500 = v492[5];
          if (v498 == v500)
          {
            v498 = *((unsigned __int8 *)v497 + 31);
            v500 = v492[6];
            if (v498 == v500)
            {
              v498 = *((unsigned __int8 *)v497 + 32);
              v500 = v492[7];
              if (v498 == v500)
              {
                v498 = *((unsigned __int8 *)v497 + 33);
                v500 = v492[8];
                if (v498 == v500)
                {
                  v498 = *((unsigned __int8 *)v497 + 34);
                  v500 = v492[9];
                  if (v498 == v500)
                  {
                    v498 = *((unsigned __int8 *)v497 + 35);
                    v500 = v492[10];
                    if (v498 == v500)
                    {
                      v498 = *((unsigned __int8 *)v497 + 36);
                      v500 = v492[11];
                      if (v498 == v500)
                      {
                        v498 = *((unsigned __int8 *)v497 + 37);
                        v500 = v492[12];
                        if (v498 == v500)
                        {
                          v498 = *((unsigned __int8 *)v497 + 38);
                          v500 = v492[13];
                          if (v498 == v500)
                          {
                            v498 = *((unsigned __int8 *)v497 + 39);
                            v500 = v492[14];
                            if (v498 == v500)
                            {
                              v498 = *((unsigned __int8 *)v497 + 40);
                              v500 = v492[15];
                              if (v498 == v500)
                                goto LABEL_695;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_732:
        if (v498 >= v500)
          goto LABEL_695;
        v494 = v497[1];
        if (v494)
          continue;
        break;
      }
      v496 = v497 + 1;
LABEL_736:
      v503 = (char *)operator new(0x30uLL);
      *(_OWORD *)(v503 + 25) = *(_OWORD *)v492;
      *(_QWORD *)v503 = 0;
      *((_QWORD *)v503 + 1) = 0;
      *((_QWORD *)v503 + 2) = v497;
      *v496 = (uint64_t)v503;
      if (*(_QWORD *)qword_2540CC0D0)
      {
        qword_2540CC0D0 = *(_QWORD *)qword_2540CC0D0;
        v503 = (char *)*v496;
      }
      v504 = qword_2540CC0D8;
      _ZF = v503 == (char *)qword_2540CC0D8;
      v503[24] = v503 == (char *)qword_2540CC0D8;
      if (!_ZF)
      {
        do
        {
          v505 = *((_QWORD *)v503 + 2);
          if (*(_BYTE *)(v505 + 24))
            break;
          v506 = *(_BYTE **)(v505 + 16);
          v507 = *(_QWORD *)v506;
          if (*(_QWORD *)v506 == v505)
          {
            v510 = *((_QWORD *)v506 + 1);
            if (!v510 || (v511 = *(unsigned __int8 *)(v510 + 24), v508 = (_BYTE *)(v510 + 24), v511))
            {
              if (*(char **)v505 == v503)
              {
                *(_BYTE *)(v505 + 24) = 1;
                v506[24] = 0;
                v514 = *(_QWORD *)(v505 + 8);
                *(_QWORD *)v506 = v514;
                if (v514)
                  goto LABEL_753;
              }
              else
              {
                v512 = *(uint64_t **)(v505 + 8);
                v513 = *v512;
                *(_QWORD *)(v505 + 8) = *v512;
                if (v513)
                {
                  *(_QWORD *)(v513 + 16) = v505;
                  v506 = *(_BYTE **)(v505 + 16);
                }
                v512[2] = (uint64_t)v506;
                *(_QWORD *)(*(_QWORD *)(v505 + 16) + 8 * (**(_QWORD **)(v505 + 16) != v505)) = v512;
                *v512 = v505;
                *(_QWORD *)(v505 + 16) = v512;
                v506 = (_BYTE *)v512[2];
                v505 = *(_QWORD *)v506;
                *((_BYTE *)v512 + 24) = 1;
                v506[24] = 0;
                v514 = *(_QWORD *)(v505 + 8);
                *(_QWORD *)v506 = v514;
                if (v514)
LABEL_753:
                  *(_QWORD *)(v514 + 16) = v506;
              }
              *(_QWORD *)(v505 + 16) = *((_QWORD *)v506 + 2);
              *(_QWORD *)(*((_QWORD *)v506 + 2) + 8 * (**((_QWORD **)v506 + 2) != (_QWORD)v506)) = v505;
              *(_QWORD *)(v505 + 8) = v506;
LABEL_693:
              *((_QWORD *)v506 + 2) = v505;
              break;
            }
          }
          else if (!v507 || (v509 = *(unsigned __int8 *)(v507 + 24), v508 = (_BYTE *)(v507 + 24), v509))
          {
            if (*(char **)v505 == v503)
            {
              v516 = *((_QWORD *)v503 + 1);
              *(_QWORD *)v505 = v516;
              if (v516)
              {
                *(_QWORD *)(v516 + 16) = v505;
                v506 = *(_BYTE **)(v505 + 16);
              }
              *((_QWORD *)v503 + 2) = v506;
              *(_QWORD *)(*(_QWORD *)(v505 + 16) + 8 * (**(_QWORD **)(v505 + 16) != v505)) = v503;
              *((_QWORD *)v503 + 1) = v505;
              *(_QWORD *)(v505 + 16) = v503;
              v506 = (_BYTE *)*((_QWORD *)v503 + 2);
              v503[24] = 1;
              v506[24] = 0;
              v505 = *((_QWORD *)v506 + 1);
              v515 = *(char **)v505;
              *((_QWORD *)v506 + 1) = *(_QWORD *)v505;
              if (!v515)
                goto LABEL_692;
            }
            else
            {
              *(_BYTE *)(v505 + 24) = 1;
              v506[24] = 0;
              v505 = *((_QWORD *)v506 + 1);
              v515 = *(char **)v505;
              *((_QWORD *)v506 + 1) = *(_QWORD *)v505;
              if (!v515)
                goto LABEL_692;
            }
            *((_QWORD *)v515 + 2) = v506;
LABEL_692:
            *(_QWORD *)(v505 + 16) = *((_QWORD *)v506 + 2);
            *(_QWORD *)(*((_QWORD *)v506 + 2) + 8 * (**((_QWORD **)v506 + 2) != (_QWORD)v506)) = v505;
            *(_QWORD *)v505 = v506;
            goto LABEL_693;
          }
          *(_BYTE *)(v505 + 24) = 1;
          v503 = v506;
          v506[24] = v506 == (_BYTE *)v504;
          *v508 = 1;
        }
        while (v506 != (_BYTE *)v504);
      }
      qword_2540CC0E0 = ++v493;
LABEL_695:
      v492 += 424;
      if (v492 != v491)
        continue;
      break;
    }
    v490 = *v489;
LABEL_765:
    *(_QWORD *)key = operator new(0x28uLL);
    *(float32x4_t *)&key[8] = v548[1];
    strcpy(*(char **)key, "KeyframePlanes.RawGlobalPlanesKeyframes");
    LOBYTE(v551) = 0;
    v552 = 0;
    sub_22371ECF0(v490, (const void **)key, (uint64_t)v550, 1u, &v551, 0, 0, *(double *)"KeyframePlanes.RawGlobalPlanesKeyframes", *(float32x4_t *)"awGlobalPlanesKeyframes");
    if ((key[23] & 0x80000000) != 0)
      operator delete(*(void **)key);
    if (++v489 != (uint64_t *)v549)
      continue;
    break;
  }
  v489 = *(uint64_t **)object;
LABEL_768:
  if (v489)
  {
    *(_QWORD *)&object[8] = v489;
    operator delete(v489);
  }
  return kdebug_trace();
}

void sub_2236FD9F8(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x398]))
  {
    if (SLOBYTE(STACK[0x397]) < 0)
      operator delete((void *)STACK[0x380]);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x260]);
  sub_2231874DC((uint64_t)&STACK[0x220]);
  _Unwind_Resume(a1);
}

uint64_t sub_2236FE284(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 80))
  {
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

uint64_t **sub_2236FE2F4(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;

  sub_223198030((uint64_t)(a1 + 1), a1[2]);
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_22370F604(v2);
    MEMORY[0x227684CE8](v3, 0x10A0C402FF47DCALL);
  }
  return a1;
}

uint64_t sub_2236FE344(uint64_t a1, int a2)
{
  return sub_22373300C(*(_QWORD **)(a1 + 208), a2, (_QWORD *)(a1 + 256), *(double *)(a1 + 72));
}

void sub_2236FE358(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t *v14;
  unint64_t v15;
  std::string __p;
  uint64_t v17;
  std::exception_ptr v18;

  if (((*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 24))(a1, a3) & 1) != 0)
  {
    v7 = a1[26];
    memset(&__p, 0, sizeof(__p));
    v8 = *(unsigned __int8 *)(a2 + 23);
    if ((v8 & 0x80u) == 0)
      v9 = (std::string *)a2;
    else
      v9 = *(std::string **)a2;
    if ((v8 & 0x80u) != 0)
      v8 = *(_QWORD *)(a2 + 8);
    sub_2231816F0(&__p, v9, (std::string *)((char *)v9 + v8));
    sub_223734B70(v7, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v10 = operator new();
    *(_QWORD *)(v10 + 24) = 850045863;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = 0;
    *(_OWORD *)(v10 + 32) = 0u;
    *(_OWORD *)(v10 + 48) = 0u;
    *(_OWORD *)(v10 + 64) = 0u;
    *(_QWORD *)(v10 + 80) = 0;
    *(_QWORD *)(v10 + 88) = 1018212795;
    *(_OWORD *)(v10 + 96) = 0u;
    *(_OWORD *)(v10 + 112) = 0u;
    *(_OWORD *)(v10 + 124) = 0u;
    *(_QWORD *)v10 = &off_24EC557C0;
    v17 = v10;
    std::mutex::lock((std::mutex *)(v10 + 24));
    if ((*(_BYTE *)(v10 + 136) & 1) != 0
      || (v18.__ptr_ = 0, v11 = *(_QWORD *)(v10 + 16), std::exception_ptr::~exception_ptr(&v18), v11))
    {
      sub_2233236D4(2u);
    }
    *(_BYTE *)(v10 + 140) = 0;
    *(_DWORD *)(v10 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v10 + 88));
    std::mutex::unlock((std::mutex *)(v10 + 24));
    v12 = v17;
    if (!v17)
      sub_2233236D4(3u);
    *a4 = v17;
    std::mutex::lock((std::mutex *)(v12 + 24));
    v13 = *(_DWORD *)(v12 + 136);
    if ((v13 & 2) != 0)
      sub_2233236D4(1u);
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    *(_DWORD *)(v12 + 136) = v13 | 2;
    std::mutex::unlock((std::mutex *)(v12 + 24));
    sub_2234AB028(&v17);
  }
}

void sub_2236FE548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  std::mutex *v16;

  std::mutex::unlock(v16);
  sub_2234AB028(&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_2236FE590(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  const char *v14;
  size_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  const char *v18;
  size_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  NSObject *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  size_t v31;
  size_t v32;
  unsigned __int8 *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  const char *v60;
  void *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unsigned __int8 *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  unsigned int v88;
  unsigned int v89;
  float32x4_t v90;
  float32x4_t v91;
  uint64_t v92;
  unsigned __int8 v93;
  const void *v94;
  size_t v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  const char *v100;
  size_t v101;
  unsigned __int8 v102;
  int v103;
  int v104;
  unint64_t v105;
  uint64_t v106;
  const char *v107;
  size_t v108;
  unsigned __int8 v109;
  unsigned __int8 v110;
  const char *v111;
  size_t v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  NSObject *v117;
  unsigned __int8 *v118;
  uint64_t v119;
  uint64_t v120;
  size_t v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  size_t v124;
  size_t v125;
  _QWORD *v126;
  void *v127;
  unsigned __int8 v128;
  const char *v129;
  size_t v130;
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  NSObject *v135;
  unsigned __int8 *v136;
  uint64_t v137;
  uint64_t v138;
  size_t v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  size_t v142;
  size_t v143;
  _QWORD *v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  char v149;
  _QWORD *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  char *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  char v165;
  _QWORD *v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  char *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  const char *v186;
  void *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  _QWORD *v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  const char *v220;
  void *v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  _QWORD *v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  const char *v245;
  unsigned __int8 *v246;
  unsigned __int8 *v247;
  uint64_t *v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  const char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  const char *v258;
  unsigned __int8 *v259;
  uint64_t *v260;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v262;
  int v263;
  const char *v264;
  int v265;
  const char *v266;
  uint64_t v267;
  std::__shared_weak_count *v268;
  uint64_t v269;
  void *__p[2];
  std::__shared_weak_count *v271;
  char *v272;
  std::__shared_weak_count *v273;
  _QWORD *v274;
  __int128 v275;
  char __s[37];
  _BYTE v277[24];
  __int128 v278;
  char *v279;
  size_t v280;
  unint64_t v281;
  char v282;
  _QWORD v283[5];

  v283[2] = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v6 = (_QWORD *)*a2;
  v250 = a2 + 1;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v7 = 0;
    v248 = (uint64_t *)(a1 + 256);
    v259 = (unsigned __int8 *)(a3 + 8);
    v249 = a1;
    do
    {
      sub_2236EC60C(&v269);
      v8 = (unsigned __int8 *)v6 + 25;
      if (**(int **)(v269 + 56) > 2)
        goto LABEL_121;
      v9 = *(unsigned __int8 *)(v269 + 72);
      v10 = sub_22322F254(v269, "OSLogSurrogateAppender", 1, 0);
      v11 = v10;
      v12 = !v9 && v10 == 0;
      if (v12)
        goto LABEL_121;
      v260 = &v269;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v262 = std::chrono::system_clock::now().__d_.__rep_;
      v263 = 2;
      v264 = "unknown file";
      v265 = 734;
      v266 = "unknown function";
      v267 = 0;
      v268 = 0;
      sub_2245664AC((unsigned __int8 *)v6 + 25, __s);
      v13 = *v260;
      v14 = (const char *)(*v260 + 16);
      v254 = v14;
      v256 = *v260;
      if (*(char *)(*v260 + 39) < 0)
      {
        v14 = *(const char **)(v13 + 16);
        v15 = *(_QWORD *)(v13 + 24);
        v251 = v7;
        v17 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v17 & 1) != 0)
          goto LABEL_13;
      }
      else
      {
        v15 = *(unsigned __int8 *)(*v260 + 39);
        v251 = v7;
        v16 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v16 & 1) != 0)
          goto LABEL_13;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)__p);
        sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
        if ((_BYTE)v272 && SHIBYTE(v271) < 0)
          operator delete(__p[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_13:
      if (byte_255788F57 >= 0)
        v18 = (const char *)&xmmword_255788F40;
      else
        v18 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v19 = byte_255788F57;
      else
        v19 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)v277 = os_log_create(v18, v14);
      if (v19 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v19 >= 0x17)
      {
        v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17)
          v21 = v19 | 7;
        v22 = v21 + 1;
        v20 = operator new(v21 + 1);
        *(_QWORD *)&v277[16] = v19;
        *(_QWORD *)&v278 = v22 | 0x8000000000000000;
        *(_QWORD *)&v277[8] = v20;
        v8 = (unsigned __int8 *)v6 + 25;
LABEL_26:
        memmove(v20, v18, v19);
        goto LABEL_27;
      }
      BYTE7(v278) = v19;
      v20 = &v277[8];
      if (v19)
        goto LABEL_26;
LABEL_27:
      v20[v19] = 0;
      BYTE8(v278) = 1;
      if (v15 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v7 = v251;
      if (v15 >= 0x17)
      {
        v25 = v8;
        v26 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17)
          v26 = v15 | 7;
        v27 = v26 + 1;
        v23 = (char *)operator new(v26 + 1);
        v280 = v15;
        v281 = v27 | 0x8000000000000000;
        v279 = v23;
        v8 = v25;
      }
      else
      {
        HIBYTE(v281) = v15;
        v23 = (char *)&v279;
        if (!v15)
        {
          LOBYTE(v279) = 0;
          v282 = 1;
          v24 = *(NSObject **)v277;
          if ((SHIBYTE(v281) & 0x80000000) == 0)
            goto LABEL_31;
          goto LABEL_37;
        }
      }
      memmove(v23, v14, v15);
      v23[v15] = 0;
      v282 = 1;
      v24 = *(NSObject **)v277;
      if ((SHIBYTE(v281) & 0x80000000) == 0)
      {
LABEL_31:
        a1 = v249;
        if (!BYTE8(v278))
          goto LABEL_40;
        goto LABEL_38;
      }
LABEL_37:
      operator delete(v279);
      a1 = v249;
      if (!BYTE8(v278))
        goto LABEL_40;
LABEL_38:
      if (SBYTE7(v278) < 0)
        operator delete(*(void **)&v277[8]);
LABEL_40:
      if (*(_QWORD *)v277)
        os_release(*(void **)v277);
      if (!v11 || !*(_QWORD *)(v11 + 24))
      {
        os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG);
        *(_QWORD *)v277 = 0xD04100202;
        *(_WORD *)&v277[8] = 2080;
        *(_QWORD *)&v277[10] = __s;
        v35 = (void *)_os_log_send_and_compose_impl();
        if (v35)
          free(v35);
        if (!v9)
          goto LABEL_115;
LABEL_114:
        sub_2245664AC(v8, v277);
        sub_22322C138((uint64_t)&v260, "Updating global plane %.13s", v277);
        sub_223182C08((uint64_t)&v260);
        goto LABEL_115;
      }
      v28 = _os_log_pack_size();
      v29 = (std::__shared_weak_count_vtbl *)operator new(v28, (std::align_val_t)8uLL);
      v30 = (std::__shared_weak_count *)operator new();
      v30->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
      v30->__shared_owners_ = 0;
      v30->__shared_weak_owners_ = 0;
      v30[1].__vftable = v29;
      __p[0] = v29;
      __p[1] = v29;
      v271 = v30;
      v272 = 0;
      v273 = 0;
      v31 = strlen(__s);
      if (v31 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v32 = v31;
      v33 = v8;
      if (v31 >= 0x17)
      {
        v36 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v31 | 7) != 0x17)
          v36 = v31 | 7;
        v37 = v36 + 1;
        v34 = operator new(v36 + 1);
        *(_QWORD *)&v275 = v32;
        *((_QWORD *)&v275 + 1) = v37 | 0x8000000000000000;
        v274 = v34;
      }
      else
      {
        HIBYTE(v275) = v31;
        v34 = &v274;
        if (!v31)
          goto LABEL_56;
      }
      memcpy(v34, __s, v32);
LABEL_56:
      *((_BYTE *)v34 + v32) = 0;
      v38 = v274;
      v283[0] = v275;
      *(_QWORD *)((char *)v283 + 7) = *(_QWORD *)((char *)&v275 + 7);
      v39 = HIBYTE(v275);
      v40 = operator new(0x38uLL);
      v40[1] = 0;
      v40[2] = 0;
      v40[3] = off_24EC1FA48;
      *v40 = &off_24EC1F9F8;
      v41 = v283[0];
      v40[4] = v38;
      v40[5] = v41;
      *(_QWORD *)((char *)v40 + 47) = *(_QWORD *)((char *)v283 + 7);
      *((_BYTE *)v40 + 55) = v39;
      v283[0] = 0;
      *(_QWORD *)((char *)v283 + 7) = 0;
      v42 = v273;
      v272 = (char *)(v40 + 3);
      v273 = (std::__shared_weak_count *)v40;
      v7 = v251;
      if (v42)
      {
        p_shared_owners = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(p_shared_owners);
        while (__stlxr(v44 - 1, p_shared_owners));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      *(_OWORD *)v277 = *(_OWORD *)__p;
      v45 = v272;
      *(_QWORD *)&v277[16] = v271;
      if (v271)
      {
        v46 = (unint64_t *)&v271->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
      v48 = v273;
      *(_QWORD *)&v278 = v45;
      *((_QWORD *)&v278 + 1) = v273;
      if (v273)
      {
        v49 = (unint64_t *)&v273->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
        v279 = v45;
        do
          v51 = __ldaxr(v49);
        while (__stlxr(v51 - 1, v49));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      else
      {
        v279 = v45;
      }
      v52 = v271;
      if (v271)
      {
        v53 = (unint64_t *)&v271->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v55 = *(_QWORD *)v277;
      if (v279[31] >= 0)
        v56 = v279 + 8;
      else
        v56 = (char *)*((_QWORD *)v279 + 1);
      v57 = _os_log_pack_fill();
      *(_DWORD *)v57 = 68157954;
      *(_DWORD *)(v57 + 4) = 13;
      *(_WORD *)(v57 + 8) = 2080;
      *(_QWORD *)(v57 + 10) = v56;
      v58 = (char *)operator new();
      v59 = *(unsigned __int8 *)(v256 + 39);
      v60 = v254;
      if ((v59 & 0x80u) != 0)
      {
        v60 = *(const char **)(v256 + 16);
        v59 = *(_QWORD *)(v256 + 24);
      }
      *(_QWORD *)v58 = v55;
      *(_OWORD *)(v58 + 8) = *(_OWORD *)&v277[8];
      *(_QWORD *)&v277[8] = 0;
      *(_QWORD *)&v277[16] = 0;
      *(_OWORD *)(v58 + 24) = v278;
      v278 = 0uLL;
      *((_QWORD *)v58 + 5) = v60;
      *((_QWORD *)v58 + 6) = v59;
      v58[56] = 2;
      v274 = 0;
      __p[0] = v58;
      (*(void (**)(_QWORD, void **))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24), __p);
      a1 = v249;
      v61 = __p[0];
      __p[0] = 0;
      if (v61)
      {
        v62 = (std::__shared_weak_count *)*((_QWORD *)v61 + 4);
        if (v62)
        {
          v63 = (unint64_t *)&v62->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        v65 = (std::__shared_weak_count *)*((_QWORD *)v61 + 2);
        if (v65)
        {
          v66 = (unint64_t *)&v65->__shared_owners_;
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        MEMORY[0x227684CE8](v61, 0x10F0C40B62ED6C6);
        v68 = v274;
        v274 = 0;
        if (v68)
        {
          v69 = (std::__shared_weak_count *)v68[4];
          if (v69)
          {
            v70 = (unint64_t *)&v69->__shared_owners_;
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
          v72 = (std::__shared_weak_count *)v68[2];
          if (v72)
          {
            v73 = (unint64_t *)&v72->__shared_owners_;
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          MEMORY[0x227684CE8](v68, 0x10F0C40B62ED6C6);
        }
      }
      v75 = (std::__shared_weak_count *)*((_QWORD *)&v278 + 1);
      if (!*((_QWORD *)&v278 + 1))
        goto LABEL_109;
      v76 = (unint64_t *)(*((_QWORD *)&v278 + 1) + 8);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
        v78 = *(std::__shared_weak_count **)&v277[16];
        if (!*(_QWORD *)&v277[16])
          goto LABEL_113;
      }
      else
      {
LABEL_109:
        v78 = *(std::__shared_weak_count **)&v277[16];
        if (!*(_QWORD *)&v277[16])
          goto LABEL_113;
      }
      v79 = (unint64_t *)&v78->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (v80)
      {
LABEL_113:
        v8 = v33;
        if (!v9)
          goto LABEL_115;
        goto LABEL_114;
      }
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
      v8 = v33;
      if (v9)
        goto LABEL_114;
LABEL_115:
      v81 = v8;
      sub_223182C08((uint64_t)&v260);
      v82 = v268;
      if (v268)
      {
        v83 = (unint64_t *)&v268->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v8 = v81;
LABEL_121:
      v85 = sub_22342DA5C((_QWORD *)(*(_QWORD *)(a1 + 208) + 40), (uint64_t)v8);
      if (v85)
      {
        v255 = v85[4];
        v257 = *(_QWORD *)(a1 + 208);
        v86 = *(unsigned __int8 **)v259;
        if (*(_QWORD *)v259)
        {
          v87 = v259;
          do
          {
            v88 = v86[28];
            v89 = *((unsigned __int8 *)v6 + 25);
            if (v88 != v89)
              goto LABEL_141;
            v88 = v86[29];
            v89 = *((unsigned __int8 *)v6 + 26);
            if (v88 != v89)
              goto LABEL_141;
            v88 = v86[30];
            v89 = *((unsigned __int8 *)v6 + 27);
            if (v88 != v89)
              goto LABEL_141;
            v88 = v86[31];
            v89 = *((unsigned __int8 *)v6 + 28);
            if (v88 != v89)
              goto LABEL_141;
            v88 = v86[32];
            v89 = *((unsigned __int8 *)v6 + 29);
            if (v88 != v89)
              goto LABEL_141;
            v88 = v86[33];
            v89 = *((unsigned __int8 *)v6 + 30);
            if (v88 != v89)
              goto LABEL_141;
            v88 = v86[34];
            v89 = *((unsigned __int8 *)v6 + 31);
            if (v88 != v89)
              goto LABEL_141;
            v88 = v86[35];
            v89 = *((unsigned __int8 *)v6 + 32);
            if (v88 != v89)
              goto LABEL_141;
            v88 = v86[36];
            v89 = *((unsigned __int8 *)v6 + 33);
            if (v88 != v89)
              goto LABEL_141;
            v88 = v86[37];
            v89 = *((unsigned __int8 *)v6 + 34);
            if (v88 != v89)
              goto LABEL_141;
            v88 = v86[38];
            v89 = *((unsigned __int8 *)v6 + 35);
            if (v88 != v89)
              goto LABEL_141;
            v88 = v86[39];
            v89 = *((unsigned __int8 *)v6 + 36);
            if (v88 != v89)
              goto LABEL_141;
            v88 = v86[40];
            v89 = *((unsigned __int8 *)v6 + 37);
            if (v88 != v89)
              goto LABEL_141;
            v88 = v86[41];
            v89 = *((unsigned __int8 *)v6 + 38);
            if (v88 == v89
              && (v88 = v86[42], v89 = *((unsigned __int8 *)v6 + 39), v88 == v89)
              && (v88 = v86[43], v89 = *((unsigned __int8 *)v6 + 40), v88 == v89))
            {
              v87 = v86;
            }
            else
            {
LABEL_141:
              if (v88 < v89)
                v86 += 8;
              else
                v87 = v86;
            }
            v86 = *(unsigned __int8 **)v86;
          }
          while (v86);
          if (v87 != v259 && ((char)sub_22319835C(v8, v87 + 28) & 0x80000000) == 0)
          {
            v92 = *((unsigned int *)v87 + 11);
LABEL_335:
            v7 += sub_2236A857C(v255, v248, v257, v92 | 0x100000000, *(unsigned __int8 *)(a1 + 56), *(_DWORD *)(a1 + 60) != 0, v90, v91);
            goto LABEL_336;
          }
        }
        v93 = atomic_load((unsigned __int8 *)&qword_2557892F0);
        if ((v93 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
        {
          __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
          __cxa_guard_release(&qword_2557892F0);
        }
        sub_2236EC60C(v277);
        if (*(char *)(*(_QWORD *)v277 + 39) < 0)
        {
          v94 = *(const void **)(*(_QWORD *)v277 + 16);
          v95 = *(_QWORD *)(*(_QWORD *)v277 + 24);
        }
        else
        {
          v94 = (const void *)(*(_QWORD *)v277 + 16);
          v95 = *(unsigned __int8 *)(*(_QWORD *)v277 + 39);
        }
        sub_223195728((uint64_t)&stru_255789280, v94, v95, "GP %.13s does not have an update reason", 0x27uLL);
        sub_2236F5384(&v269);
        if (**(int **)(v269 + 56) > 5)
          goto LABEL_334;
        v103 = *(unsigned __int8 *)(v269 + 72);
        v104 = *(_BYTE *)(v269 + 72) != 0;
        v105 = sub_22322F254(v269, "OSLogSurrogateAppender", 1, 0);
        if (((v105 == 0) & ~v104) != 0)
          goto LABEL_334;
        v260 = &v269;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v262 = std::chrono::system_clock::now().__d_.__rep_;
        v263 = 5;
        v264 = "unknown file";
        v265 = 64;
        v266 = "unknown function";
        v267 = 0;
        v268 = 0;
        sub_2245664AC(v8, __s);
        v253 = v7;
        v106 = *v260;
        v107 = (const char *)(*v260 + 16);
        v245 = v107;
        if (*(char *)(*v260 + 39) < 0)
        {
          v107 = *(const char **)(v106 + 16);
          v108 = *(_QWORD *)(v106 + 24);
          v110 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v110 & 1) == 0)
          {
LABEL_406:
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)__p);
              sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
              if ((_BYTE)v272 && SHIBYTE(v271) < 0)
                operator delete(__p[0]);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
              a1 = v249;
            }
          }
        }
        else
        {
          v108 = *(unsigned __int8 *)(*v260 + 39);
          v109 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v109 & 1) == 0)
            goto LABEL_406;
        }
        if (byte_255788F57 >= 0)
          v111 = (const char *)&xmmword_255788F40;
        else
          v111 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v112 = byte_255788F57;
        else
          v112 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)v277 = os_log_create(v111, v107);
        if (v112 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v247 = v8;
        if (v112 >= 0x17)
        {
          v114 = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v112 | 7) != 0x17)
            v114 = v112 | 7;
          v115 = v114 + 1;
          v113 = operator new(v114 + 1);
          *(_QWORD *)&v277[16] = v112;
          *(_QWORD *)&v278 = v115 | 0x8000000000000000;
          *(_QWORD *)&v277[8] = v113;
          a1 = v249;
        }
        else
        {
          BYTE7(v278) = v112;
          v113 = &v277[8];
          if (!v112)
          {
LABEL_178:
            v113[v112] = 0;
            BYTE8(v278) = 1;
            if (v108 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v108 >= 0x17)
            {
              v119 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v108 | 7) != 0x17)
                v119 = v108 | 7;
              v120 = v119 + 1;
              v116 = (char *)operator new(v119 + 1);
              v280 = v108;
              v281 = v120 | 0x8000000000000000;
              v279 = v116;
              a1 = v249;
            }
            else
            {
              HIBYTE(v281) = v108;
              v116 = (char *)&v279;
              if (!v108)
              {
                LOBYTE(v279) = 0;
                v282 = 1;
                v117 = *(NSObject **)v277;
                if ((SHIBYTE(v281) & 0x80000000) == 0)
                  goto LABEL_182;
LABEL_188:
                operator delete(v279);
                v118 = v247;
                if (BYTE8(v278))
                  goto LABEL_189;
                goto LABEL_191;
              }
            }
            memmove(v116, v107, v108);
            v116[v108] = 0;
            v282 = 1;
            v117 = *(NSObject **)v277;
            if (SHIBYTE(v281) < 0)
              goto LABEL_188;
LABEL_182:
            v118 = v247;
            if (BYTE8(v278))
            {
LABEL_189:
              if (SBYTE7(v278) < 0)
                operator delete(*(void **)&v277[8]);
            }
LABEL_191:
            if (*(_QWORD *)v277)
              os_release(*(void **)v277);
            if (v105 && *(_QWORD *)(v105 + 24))
            {
              v121 = _os_log_pack_size();
              v122 = (std::__shared_weak_count_vtbl *)operator new(v121, (std::align_val_t)8uLL);
              v123 = (std::__shared_weak_count *)operator new();
              v123->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v123->__shared_owners_ = 0;
              v123->__shared_weak_owners_ = 0;
              v123[1].__vftable = v122;
              __p[0] = v122;
              __p[1] = v122;
              v271 = v123;
              v272 = 0;
              v273 = 0;
              v124 = strlen(__s);
              if (v124 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v125 = v124;
              if (v124 >= 0x17)
              {
                v146 = (v124 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v124 | 7) != 0x17)
                  v146 = v124 | 7;
                v147 = v146 + 1;
                v126 = operator new(v146 + 1);
                *(_QWORD *)&v275 = v125;
                *((_QWORD *)&v275 + 1) = v147 | 0x8000000000000000;
                v274 = v126;
              }
              else
              {
                HIBYTE(v275) = v124;
                v126 = &v274;
                if (!v124)
                  goto LABEL_247;
              }
              memcpy(v126, __s, v125);
LABEL_247:
              *((_BYTE *)v126 + v125) = 0;
              v148 = v274;
              v283[0] = v275;
              *(_QWORD *)((char *)v283 + 7) = *(_QWORD *)((char *)&v275 + 7);
              v149 = HIBYTE(v275);
              v150 = operator new(0x38uLL);
              v150[1] = 0;
              v150[2] = 0;
              v150[3] = off_24EC1FA48;
              *v150 = &off_24EC1F9F8;
              v151 = v283[0];
              v150[4] = v148;
              v150[5] = v151;
              *(_QWORD *)((char *)v150 + 47) = *(_QWORD *)((char *)v283 + 7);
              *((_BYTE *)v150 + 55) = v149;
              v283[0] = 0;
              *(_QWORD *)((char *)v283 + 7) = 0;
              v152 = v273;
              v272 = (char *)(v150 + 3);
              v273 = (std::__shared_weak_count *)v150;
              v7 = v253;
              if (v152)
              {
                v153 = (unint64_t *)&v152->__shared_owners_;
                do
                  v154 = __ldaxr(v153);
                while (__stlxr(v154 - 1, v153));
                if (!v154)
                {
                  ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                  std::__shared_weak_count::__release_weak(v152);
                }
              }
              *(_OWORD *)v277 = *(_OWORD *)__p;
              v155 = v272;
              *(_QWORD *)&v277[16] = v271;
              if (v271)
              {
                v156 = (unint64_t *)&v271->__shared_owners_;
                do
                  v157 = __ldxr(v156);
                while (__stxr(v157 + 1, v156));
              }
              v158 = v273;
              *(_QWORD *)&v278 = v155;
              *((_QWORD *)&v278 + 1) = v273;
              if (v273)
              {
                v159 = (unint64_t *)&v273->__shared_owners_;
                do
                  v160 = __ldxr(v159);
                while (__stxr(v160 + 1, v159));
                v279 = v155;
                do
                  v161 = __ldaxr(v159);
                while (__stlxr(v161 - 1, v159));
                if (!v161)
                {
                  ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                  std::__shared_weak_count::__release_weak(v158);
                }
              }
              else
              {
                v279 = v155;
              }
              v178 = v271;
              if (v271)
              {
                v179 = (unint64_t *)&v271->__shared_owners_;
                do
                  v180 = __ldaxr(v179);
                while (__stlxr(v180 - 1, v179));
                if (!v180)
                {
                  ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                  std::__shared_weak_count::__release_weak(v178);
                }
              }
              v181 = *(_QWORD *)v277;
              if (v279[31] >= 0)
                v182 = v279 + 8;
              else
                v182 = (char *)*((_QWORD *)v279 + 1);
              v183 = _os_log_pack_fill();
              *(_DWORD *)v183 = 68157954;
              *(_DWORD *)(v183 + 4) = 13;
              *(_WORD *)(v183 + 8) = 2080;
              *(_QWORD *)(v183 + 10) = v182;
              v184 = (char *)operator new();
              v185 = *(unsigned __int8 *)(v106 + 39);
              v186 = v245;
              if ((v185 & 0x80u) != 0)
              {
                v186 = *(const char **)(v106 + 16);
                v185 = *(_QWORD *)(v106 + 24);
              }
              *(_QWORD *)v184 = v181;
              *(_OWORD *)(v184 + 8) = *(_OWORD *)&v277[8];
              *(_QWORD *)&v277[8] = 0;
              *(_QWORD *)&v277[16] = 0;
              *(_OWORD *)(v184 + 24) = v278;
              v278 = 0uLL;
              *((_QWORD *)v184 + 5) = v186;
              *((_QWORD *)v184 + 6) = v185;
              v184[56] = 16;
              v274 = 0;
              __p[0] = v184;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v105 + 24) + 40))(*(_QWORD *)(v105 + 24), __p);
              a1 = v249;
              v187 = __p[0];
              __p[0] = 0;
              if (v187)
              {
                v188 = (std::__shared_weak_count *)*((_QWORD *)v187 + 4);
                if (v188)
                {
                  v189 = (unint64_t *)&v188->__shared_owners_;
                  do
                    v190 = __ldaxr(v189);
                  while (__stlxr(v190 - 1, v189));
                  if (!v190)
                  {
                    ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                    std::__shared_weak_count::__release_weak(v188);
                  }
                }
                v191 = (std::__shared_weak_count *)*((_QWORD *)v187 + 2);
                if (v191)
                {
                  v192 = (unint64_t *)&v191->__shared_owners_;
                  do
                    v193 = __ldaxr(v192);
                  while (__stlxr(v193 - 1, v192));
                  if (!v193)
                  {
                    ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                    std::__shared_weak_count::__release_weak(v191);
                  }
                }
                MEMORY[0x227684CE8](v187, 0x10F0C40B62ED6C6);
                v194 = v274;
                v274 = 0;
                if (v194)
                {
                  v195 = (std::__shared_weak_count *)v194[4];
                  if (v195)
                  {
                    v196 = (unint64_t *)&v195->__shared_owners_;
                    do
                      v197 = __ldaxr(v196);
                    while (__stlxr(v197 - 1, v196));
                    if (!v197)
                    {
                      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                      std::__shared_weak_count::__release_weak(v195);
                    }
                  }
                  v198 = (std::__shared_weak_count *)v194[2];
                  if (v198)
                  {
                    v199 = (unint64_t *)&v198->__shared_owners_;
                    do
                      v200 = __ldaxr(v199);
                    while (__stlxr(v200 - 1, v199));
                    if (!v200)
                    {
                      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
                      std::__shared_weak_count::__release_weak(v198);
                    }
                  }
                  MEMORY[0x227684CE8](v194, 0x10F0C40B62ED6C6);
                }
              }
              v201 = (std::__shared_weak_count *)*((_QWORD *)&v278 + 1);
              if (*((_QWORD *)&v278 + 1))
              {
                v202 = (unint64_t *)(*((_QWORD *)&v278 + 1) + 8);
                do
                  v203 = __ldaxr(v202);
                while (__stlxr(v203 - 1, v202));
                if (!v203)
                {
                  ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
                  std::__shared_weak_count::__release_weak(v201);
                  v204 = *(std::__shared_weak_count **)&v277[16];
                  if (*(_QWORD *)&v277[16])
                    goto LABEL_324;
                  goto LABEL_327;
                }
              }
              v204 = *(std::__shared_weak_count **)&v277[16];
              if (!*(_QWORD *)&v277[16])
                goto LABEL_327;
LABEL_324:
              v205 = (unint64_t *)&v204->__shared_owners_;
              do
                v206 = __ldaxr(v205);
              while (__stlxr(v206 - 1, v205));
              if (v206)
              {
LABEL_327:
                v118 = v247;
                if (v103)
                  goto LABEL_328;
LABEL_329:
                sub_223182C08((uint64_t)&v260);
                v207 = v268;
                if (v268)
                {
                  v208 = (unint64_t *)&v268->__shared_owners_;
                  do
                    v209 = __ldaxr(v208);
                  while (__stlxr(v209 - 1, v208));
                  if (!v209)
                  {
                    ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                    std::__shared_weak_count::__release_weak(v207);
                  }
                }
LABEL_334:
                v92 = 0;
                goto LABEL_335;
              }
              ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
              std::__shared_weak_count::__release_weak(v204);
              v118 = v247;
              if (!v103)
                goto LABEL_329;
            }
            else
            {
              os_log_type_enabled(v117, OS_LOG_TYPE_ERROR);
              *(_QWORD *)v277 = 0xD04100202;
              *(_WORD *)&v277[8] = 2080;
              *(_QWORD *)&v277[10] = __s;
              v127 = (void *)_os_log_send_and_compose_impl();
              v7 = v253;
              if (v127)
                free(v127);
              if (!v103)
                goto LABEL_329;
            }
LABEL_328:
            sub_2245664AC(v118, v277);
            sub_22322C138((uint64_t)&v260, "GP %.13s does not have an update reason", v277);
            sub_223182C08((uint64_t)&v260);
            goto LABEL_329;
          }
        }
        memmove(v113, v111, v112);
        goto LABEL_178;
      }
      sub_2236F5384(&v269);
      if (**(int **)(v269 + 56) <= 4)
      {
        v96 = *(unsigned __int8 *)(v269 + 72);
        v97 = sub_22322F254(v269, "OSLogSurrogateAppender", 1, 0);
        v98 = v97;
        if (v96 || v97)
        {
          v260 = &v269;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v262 = std::chrono::system_clock::now().__d_.__rep_;
          v263 = 4;
          v264 = "unknown file";
          v265 = 738;
          v266 = "unknown function";
          v267 = 0;
          v268 = 0;
          sub_2245664AC(v8, __s);
          v246 = v8;
          v99 = *v260;
          v100 = (const char *)(*v260 + 16);
          v258 = v100;
          if (*(char *)(*v260 + 39) < 0)
          {
            v100 = *(const char **)(v99 + 16);
            v101 = *(_QWORD *)(v99 + 24);
            v252 = v7;
            v128 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v128 & 1) == 0)
            {
LABEL_411:
              if (__cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)__p);
                sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
                if ((_BYTE)v272 && SHIBYTE(v271) < 0)
                  operator delete(__p[0]);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
                a1 = v249;
              }
            }
          }
          else
          {
            v101 = *(unsigned __int8 *)(*v260 + 39);
            v252 = v7;
            v102 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v102 & 1) == 0)
              goto LABEL_411;
          }
          if (byte_255788F57 >= 0)
            v129 = (const char *)&xmmword_255788F40;
          else
            v129 = (const char *)xmmword_255788F40;
          if (byte_255788F57 >= 0)
            v130 = byte_255788F57;
          else
            v130 = *((_QWORD *)&xmmword_255788F40 + 1);
          *(_QWORD *)v277 = os_log_create(v129, v100);
          if (v130 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v130 >= 0x17)
          {
            v132 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v130 | 7) != 0x17)
              v132 = v130 | 7;
            v133 = v132 + 1;
            v131 = operator new(v132 + 1);
            *(_QWORD *)&v277[16] = v130;
            *(_QWORD *)&v278 = v133 | 0x8000000000000000;
            *(_QWORD *)&v277[8] = v131;
            a1 = v249;
          }
          else
          {
            BYTE7(v278) = v130;
            v131 = &v277[8];
            if (!v130)
            {
LABEL_218:
              v131[v130] = 0;
              BYTE8(v278) = 1;
              if (v101 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v7 = v252;
              if (v101 >= 0x17)
              {
                v137 = (v101 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v101 | 7) != 0x17)
                  v137 = v101 | 7;
                v138 = v137 + 1;
                v134 = (char *)operator new(v137 + 1);
                v280 = v101;
                v281 = v138 | 0x8000000000000000;
                v279 = v134;
                a1 = v249;
              }
              else
              {
                HIBYTE(v281) = v101;
                v134 = (char *)&v279;
                if (!v101)
                {
                  LOBYTE(v279) = 0;
                  v282 = 1;
                  v135 = *(NSObject **)v277;
                  if ((SHIBYTE(v281) & 0x80000000) == 0)
                    goto LABEL_222;
LABEL_228:
                  operator delete(v279);
                  v136 = v246;
                  if (BYTE8(v278))
                    goto LABEL_229;
                  goto LABEL_231;
                }
              }
              memmove(v134, v100, v101);
              v134[v101] = 0;
              v282 = 1;
              v135 = *(NSObject **)v277;
              if (SHIBYTE(v281) < 0)
                goto LABEL_228;
LABEL_222:
              v136 = v246;
              if (BYTE8(v278))
              {
LABEL_229:
                if (SBYTE7(v278) < 0)
                  operator delete(*(void **)&v277[8]);
              }
LABEL_231:
              if (*(_QWORD *)v277)
                os_release(*(void **)v277);
              if (v98 && *(_QWORD *)(v98 + 24))
              {
                v139 = _os_log_pack_size();
                v140 = (std::__shared_weak_count_vtbl *)operator new(v139, (std::align_val_t)8uLL);
                v141 = (std::__shared_weak_count *)operator new();
                v141->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v141->__shared_owners_ = 0;
                v141->__shared_weak_owners_ = 0;
                v141[1].__vftable = v140;
                __p[0] = v140;
                __p[1] = v140;
                v271 = v141;
                v272 = 0;
                v273 = 0;
                v142 = strlen(__s);
                if (v142 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v143 = v142;
                if (v142 >= 0x17)
                {
                  v162 = (v142 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v142 | 7) != 0x17)
                    v162 = v142 | 7;
                  v163 = v162 + 1;
                  v144 = operator new(v162 + 1);
                  *(_QWORD *)&v275 = v143;
                  *((_QWORD *)&v275 + 1) = v163 | 0x8000000000000000;
                  v274 = v144;
                }
                else
                {
                  HIBYTE(v275) = v142;
                  v144 = &v274;
                  if (!v142)
                    goto LABEL_270;
                }
                memcpy(v144, __s, v143);
LABEL_270:
                *((_BYTE *)v144 + v143) = 0;
                v164 = v274;
                v283[0] = v275;
                *(_QWORD *)((char *)v283 + 7) = *(_QWORD *)((char *)&v275 + 7);
                v165 = HIBYTE(v275);
                v166 = operator new(0x38uLL);
                v166[1] = 0;
                v166[2] = 0;
                v166[3] = off_24EC1FA48;
                *v166 = &off_24EC1F9F8;
                v167 = v283[0];
                v166[4] = v164;
                v166[5] = v167;
                *(_QWORD *)((char *)v166 + 47) = *(_QWORD *)((char *)v283 + 7);
                *((_BYTE *)v166 + 55) = v165;
                v283[0] = 0;
                *(_QWORD *)((char *)v283 + 7) = 0;
                v168 = v273;
                v272 = (char *)(v166 + 3);
                v273 = (std::__shared_weak_count *)v166;
                v7 = v252;
                if (v168)
                {
                  v169 = (unint64_t *)&v168->__shared_owners_;
                  do
                    v170 = __ldaxr(v169);
                  while (__stlxr(v170 - 1, v169));
                  if (!v170)
                  {
                    ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                    std::__shared_weak_count::__release_weak(v168);
                  }
                }
                *(_OWORD *)v277 = *(_OWORD *)__p;
                v171 = v272;
                *(_QWORD *)&v277[16] = v271;
                if (v271)
                {
                  v172 = (unint64_t *)&v271->__shared_owners_;
                  do
                    v173 = __ldxr(v172);
                  while (__stxr(v173 + 1, v172));
                }
                v174 = v273;
                *(_QWORD *)&v278 = v171;
                *((_QWORD *)&v278 + 1) = v273;
                if (v273)
                {
                  v175 = (unint64_t *)&v273->__shared_owners_;
                  do
                    v176 = __ldxr(v175);
                  while (__stxr(v176 + 1, v175));
                  v279 = v171;
                  do
                    v177 = __ldaxr(v175);
                  while (__stlxr(v177 - 1, v175));
                  if (!v177)
                  {
                    ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                    std::__shared_weak_count::__release_weak(v174);
                  }
                }
                else
                {
                  v279 = v171;
                }
                v212 = v271;
                if (v271)
                {
                  v213 = (unint64_t *)&v271->__shared_owners_;
                  do
                    v214 = __ldaxr(v213);
                  while (__stlxr(v214 - 1, v213));
                  if (!v214)
                  {
                    ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                    std::__shared_weak_count::__release_weak(v212);
                  }
                }
                v215 = *(_QWORD *)v277;
                if (v279[31] >= 0)
                  v216 = v279 + 8;
                else
                  v216 = (char *)*((_QWORD *)v279 + 1);
                v217 = _os_log_pack_fill();
                *(_DWORD *)v217 = 68157954;
                *(_DWORD *)(v217 + 4) = 13;
                *(_WORD *)(v217 + 8) = 2080;
                *(_QWORD *)(v217 + 10) = v216;
                v218 = (char *)operator new();
                v219 = *(unsigned __int8 *)(v99 + 39);
                v220 = v258;
                if ((v219 & 0x80u) != 0)
                {
                  v220 = *(const char **)(v99 + 16);
                  v219 = *(_QWORD *)(v99 + 24);
                }
                *(_QWORD *)v218 = v215;
                *(_OWORD *)(v218 + 8) = *(_OWORD *)&v277[8];
                *(_QWORD *)&v277[8] = 0;
                *(_QWORD *)&v277[16] = 0;
                *(_OWORD *)(v218 + 24) = v278;
                v278 = 0uLL;
                *((_QWORD *)v218 + 5) = v220;
                *((_QWORD *)v218 + 6) = v219;
                v218[56] = 16;
                v274 = 0;
                __p[0] = v218;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v98 + 24) + 40))(*(_QWORD *)(v98 + 24), __p);
                a1 = v249;
                v221 = __p[0];
                __p[0] = 0;
                if (v221)
                {
                  v222 = (std::__shared_weak_count *)*((_QWORD *)v221 + 4);
                  if (v222)
                  {
                    v223 = (unint64_t *)&v222->__shared_owners_;
                    do
                      v224 = __ldaxr(v223);
                    while (__stlxr(v224 - 1, v223));
                    if (!v224)
                    {
                      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
                      std::__shared_weak_count::__release_weak(v222);
                    }
                  }
                  v225 = (std::__shared_weak_count *)*((_QWORD *)v221 + 2);
                  if (v225)
                  {
                    v226 = (unint64_t *)&v225->__shared_owners_;
                    do
                      v227 = __ldaxr(v226);
                    while (__stlxr(v227 - 1, v226));
                    if (!v227)
                    {
                      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
                      std::__shared_weak_count::__release_weak(v225);
                    }
                  }
                  MEMORY[0x227684CE8](v221, 0x10F0C40B62ED6C6);
                  v228 = v274;
                  v274 = 0;
                  if (v228)
                  {
                    v229 = (std::__shared_weak_count *)v228[4];
                    if (v229)
                    {
                      v230 = (unint64_t *)&v229->__shared_owners_;
                      do
                        v231 = __ldaxr(v230);
                      while (__stlxr(v231 - 1, v230));
                      if (!v231)
                      {
                        ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                        std::__shared_weak_count::__release_weak(v229);
                      }
                    }
                    v232 = (std::__shared_weak_count *)v228[2];
                    if (v232)
                    {
                      v233 = (unint64_t *)&v232->__shared_owners_;
                      do
                        v234 = __ldaxr(v233);
                      while (__stlxr(v234 - 1, v233));
                      if (!v234)
                      {
                        ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                        std::__shared_weak_count::__release_weak(v232);
                      }
                    }
                    MEMORY[0x227684CE8](v228, 0x10F0C40B62ED6C6);
                  }
                }
                v235 = (std::__shared_weak_count *)*((_QWORD *)&v278 + 1);
                if (*((_QWORD *)&v278 + 1))
                {
                  v236 = (unint64_t *)(*((_QWORD *)&v278 + 1) + 8);
                  do
                    v237 = __ldaxr(v236);
                  while (__stlxr(v237 - 1, v236));
                  if (!v237)
                  {
                    ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
                    std::__shared_weak_count::__release_weak(v235);
                    v238 = *(std::__shared_weak_count **)&v277[16];
                    if (*(_QWORD *)&v277[16])
                      goto LABEL_381;
                    goto LABEL_384;
                  }
                }
                v238 = *(std::__shared_weak_count **)&v277[16];
                if (!*(_QWORD *)&v277[16])
                  goto LABEL_384;
LABEL_381:
                v239 = (unint64_t *)&v238->__shared_owners_;
                do
                  v240 = __ldaxr(v239);
                while (__stlxr(v240 - 1, v239));
                if (v240)
                {
LABEL_384:
                  v136 = v246;
                  if (v96)
                    goto LABEL_385;
LABEL_386:
                  sub_223182C08((uint64_t)&v260);
                  v241 = v268;
                  if (v268)
                  {
                    v242 = (unint64_t *)&v268->__shared_owners_;
                    do
                      v243 = __ldaxr(v242);
                    while (__stlxr(v243 - 1, v242));
                    if (!v243)
                    {
                      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
                      std::__shared_weak_count::__release_weak(v241);
                    }
                  }
                  goto LABEL_336;
                }
                ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
                std::__shared_weak_count::__release_weak(v238);
                v136 = v246;
                if (!v96)
                  goto LABEL_386;
              }
              else
              {
                os_log_type_enabled(v135, OS_LOG_TYPE_ERROR);
                *(_QWORD *)v277 = 0xD04100202;
                *(_WORD *)&v277[8] = 2080;
                *(_QWORD *)&v277[10] = __s;
                v145 = (void *)_os_log_send_and_compose_impl();
                if (v145)
                  free(v145);
                if (!v96)
                  goto LABEL_386;
              }
LABEL_385:
              sub_2245664AC(v136, v277);
              sub_22322C138((uint64_t)&v260, "Updating GP %.13s that does not exist", v277);
              sub_223182C08((uint64_t)&v260);
              goto LABEL_386;
            }
          }
          memmove(v131, v129, v130);
          goto LABEL_218;
        }
      }
LABEL_336:
      v210 = (_QWORD *)v6[1];
      if (v210)
      {
        do
        {
          v211 = v210;
          v210 = (_QWORD *)*v210;
        }
        while (v210);
      }
      else
      {
        do
        {
          v211 = (_QWORD *)v6[2];
          v12 = *v211 == (_QWORD)v6;
          v6 = v211;
        }
        while (!v12);
      }
      v6 = v211;
    }
    while (v211 != v250);
  }
  return kdebug_trace();
}

void sub_2237003C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47)
{
  if (a47)
  {
    if (a46 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_223700410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_223199DE8((uint64_t)&a41);
  sub_223182DAC((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_22370042C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_223199DE8((uint64_t)&a41);
  sub_223182DAC((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_223700448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_223199DE8((uint64_t)&a41);
  sub_223182DAC((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_223700464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;

  sub_22319A054(&a41);
  sub_22319A054((uint64_t *)(v41 - 256));
  sub_223199DE8(v41 - 192);
  sub_223182DAC((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_2237005F8()
{
  JUMPOUT(0x223700608);
}

void sub_22370063C()
{
  uint64_t v0;
  void *v1;

  if (*(char *)(v0 - 161) < 0)
    operator delete(*(void **)(v0 - 184));
  v1 = *(void **)(v0 - 192);
  if (v1)
    os_release(v1);
  JUMPOUT(0x2237006C0);
}

void sub_2237006A8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2237006BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_223182DAC((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_2237006D0()
{
  JUMPOUT(0x2237006D8);
}

uint64_t sub_2237006E0(uint64_t a1)
{
  sub_223198030(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sub_223700708(double a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  size_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  void *__dst[2];
  unint64_t v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3))
  {
    v9 = strlen(a5);
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v10 = (void *)v9;
    if (v9 >= 0x17)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      v11 = (void **)operator new(v12 + 1);
      __dst[1] = v10;
      v17 = v13 | 0x8000000000000000;
      __dst[0] = v11;
    }
    else
    {
      HIBYTE(v17) = v9;
      v11 = __dst;
      if (!v9)
      {
LABEL_10:
        *((_BYTE *)v10 + (_QWORD)v11) = 0;
        *(_QWORD *)&v15 = (uint64_t)(a1 * 1000000000.0);
        *((_QWORD *)&v15 + 1) = 2;
        v14 = sub_2241471F8();
        sub_223705218((uint64_t)v14, a3, a4, (uint64_t)__dst, &v15);
        if (SHIBYTE(v17) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v11, a5, (size_t)v10);
    goto LABEL_10;
  }
}

void sub_223700840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22370085C(double a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  size_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  void *__dst[2];
  unint64_t v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3))
  {
    v9 = strlen(a5);
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v10 = (void *)v9;
    if (v9 >= 0x17)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      v11 = (void **)operator new(v12 + 1);
      __dst[1] = v10;
      v17 = v13 | 0x8000000000000000;
      __dst[0] = v11;
    }
    else
    {
      HIBYTE(v17) = v9;
      v11 = __dst;
      if (!v9)
      {
LABEL_10:
        *((_BYTE *)v10 + (_QWORD)v11) = 0;
        *(_QWORD *)&v15 = (uint64_t)(a1 * 1000000000.0);
        *((_QWORD *)&v15 + 1) = 2;
        v14 = sub_2241471F8();
        sub_2232A6F44((uint64_t)v14, a3, a4, (uint64_t)__dst, &v15);
        if (SHIBYTE(v17) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v11, a5, (size_t)v10);
    goto LABEL_10;
  }
}

void sub_223700994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2237009B0(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_223705350((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223700AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223700AEC(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_223705674((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223700C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223700C28(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_223705674((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223700D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223700D64(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_223705674((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223700E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223700EA0(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_223705674((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223700FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223700FDC(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_223705674((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2237010FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223701118(uint64_t *a1@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD v6[2];
  std::string __p;

  v2 = operator new();
  memset(&__p, 0, sizeof(__p));
  sub_2231816F0(&__p, (std::string *)"/", (std::string *)"");
  v3 = (std::__shared_weak_count *)operator new(0x30uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC57C60;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24EC77DB8;
  *(_OWORD *)&v3[1].__shared_owners_ = xmmword_2245F5410;
  v6[0] = v3 + 1;
  v6[1] = v3;
  sub_2242B4FBC(v2, (std::__fs::filesystem::path *)&__p, v6);
  *a1 = v2;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223701274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  sub_223167354((uint64_t)&a12);
  sub_223167354((uint64_t)&a10);
  if (a19 < 0)
    operator delete(__p);
  MEMORY[0x227684CE8](v19, 0x10B3C4067016974);
  _Unwind_Resume(a1);
}

uint64_t *sub_2237012C4(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 64);
    if (!v3)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if ((*(char *)(v2 + 55) & 0x80000000) == 0)
        goto LABEL_8;
    }
    else
    {
LABEL_6:
      if ((*(char *)(v2 + 55) & 0x80000000) == 0)
      {
LABEL_8:
        sub_2242BAF30(v2 + 8, *(_QWORD *)(v2 + 16));
        MEMORY[0x227684CE8](v2, 0x10B3C4067016974);
        return a1;
      }
    }
    operator delete(*(void **)(v2 + 32));
    goto LABEL_8;
  }
  return a1;
}

_QWORD *sub_223701370(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *v15;
  void *v16;

  v2 = (std::__shared_weak_count *)a1[257];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    sub_2232555B8((uint64_t)(a1 + 27));
    v5 = (char *)a1[24];
    if (!v5)
      goto LABEL_15;
  }
  else
  {
LABEL_5:
    sub_2232555B8((uint64_t)(a1 + 27));
    v5 = (char *)a1[24];
    if (!v5)
      goto LABEL_15;
  }
  v6 = (char *)a1[25];
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = (void *)*((_QWORD *)v6 - 7);
      if (v8)
      {
        *((_QWORD *)v6 - 6) = v8;
        operator delete(v8);
      }
      v9 = (void *)*((_QWORD *)v6 - 11);
      if (v9)
      {
        *((_QWORD *)v6 - 10) = v9;
        operator delete(v9);
      }
      v6 -= 88;
    }
    while (v6 != v5);
    v7 = (char *)a1[24];
  }
  a1[25] = v5;
  operator delete(v7);
LABEL_15:
  v10 = (void *)a1[21];
  if (v10)
  {
    a1[22] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[18];
  if (v11)
  {
    a1[19] = v11;
    operator delete(v11);
  }
  v12 = (std::__shared_weak_count *)a1[9];
  if (!v12)
    goto LABEL_23;
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
  {
LABEL_23:
    v15 = (void *)a1[4];
    if (!v15)
      goto LABEL_25;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  v15 = (void *)a1[4];
  if (v15)
  {
LABEL_24:
    a1[5] = v15;
    operator delete(v15);
  }
LABEL_25:
  v16 = (void *)a1[1];
  if (v16)
  {
    a1[2] = v16;
    operator delete(v16);
  }
  return a1;
}

_QWORD *sub_2237014C8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 8;
  v3 = (_QWORD *)a1[11];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[4];
  if (v5 == a1 + 1)
  {
    v6 = 4;
    v5 = a1 + 1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_22370154C()
{
  JUMPOUT(0x227684CE8);
}

_BYTE *sub_223701560(uint64_t a1)
{
  _BYTE *result;
  char v3;

  result = operator new(0x10uLL);
  v3 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24EC57BD0;
  result[8] = v3;
  return result;
}

uint64_t sub_223701598(uint64_t result, uint64_t a2)
{
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)a2 = &off_24EC57BD0;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

BOOL sub_2237015B8(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(a2 + 240) & *(_BYTE *)(a1 + 8)) != 0;
}

uint64_t sub_2237015CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d5recon8kfplanes21KeyframePlaneDetector26ProcessKeyframeUpdatesImplERKNSt3__16vectorINS0_5fr"
                     "ame12KeyframeDataENS3_9allocatorIS6_EEEENS_3esn11OptionalRefIKNS1_16SingleShotResultEEERKNS1_15Keyf"
                     "ramingStateERKNS3_6chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEEENK3$_0clENS5_19KeyframeUpdateStateEEUlRKS6_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d5recon8kfplanes21KeyframePlaneDetector26ProcessKeyframeUpdatesImplERKNSt3__16vec"
                                "torINS0_5frame12KeyframeDataENS3_9allocatorIS6_EEEENS_3esn11OptionalRefIKNS1_16SingleSho"
                                "tResultEEERKNS1_15KeyframingStateERKNS3_6chrono8durationIxNS3_5ratioILl1ELl1000000000EEE"
                                "EEENK3$_0clENS5_19KeyframeUpdateStateEEUlRKS6_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d5recon8kfplanes21KeyframePlaneDetector26ProcessKeyframeUpdatesImplERKNSt3__16vectorINS0_5frame12KeyframeDataENS3_9allocatorIS6_EEEENS_3esn11OptionalRefIKNS1_16SingleShotResultEEERKNS1_15KeyframingStateERKNS3_6chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEEENK3$_0clENS5_19KeyframeUpdateStateEEUlRKS6_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d5recon8kfplanes21KeyframePlaneDetector26ProcessKeyframeUpdatesImplERKNSt3__16vectorINS0_5frame12KeyframeDataENS3_9allocatorIS6_EEEENS_3esn11OptionalRefIKNS1_16SingleShotResultEEERKNS1_15KeyframingStateERKNS3_6chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEEENK3$_0clENS5_19KeyframeUpdateStateEEUlRKS6_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223701638()
{
  return &unk_24EC57C40;
}

void sub_223701644(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC57C60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223701654(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC57C60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223701690(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2237016B4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2237016CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d5recon8kfplanes22IPersistenceFilesystemEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d5recon8kfplanes22IPersistenceFilesystemEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d5recon8kfplanes22IPersistenceFilesystemEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d5recon8kfplanes22IPersistenceFilesystemEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_22370173C(__int128 *a1, __int128 *a2)
{
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  __int128 __p;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  char v14;
  char v15;

  v5 = *a1;
  v3 = a1 + 1;
  LOBYTE(__p) = 0;
  v15 = 0;
  if (*((_BYTE *)a1 + 112))
  {
    v8 = 0;
    if (*((_BYTE *)a1 + 40))
    {
      __p = *v3;
      v7 = *((_QWORD *)a1 + 4);
      *((_QWORD *)a1 + 3) = 0;
      *((_QWORD *)a1 + 4) = 0;
      *(_QWORD *)v3 = 0;
      v8 = 1;
    }
    LOBYTE(v9) = 0;
    v14 = 0;
    if (*((_BYTE *)a1 + 104))
    {
      v4 = *((_QWORD *)a1 + 9);
      v10 = *((_QWORD *)a1 + 8);
      v9 = a1[3];
      *((_QWORD *)a1 + 7) = 0;
      *((_QWORD *)a1 + 8) = 0;
      *((_QWORD *)a1 + 6) = 0;
      v11 = v4;
      *(_OWORD *)v12 = a1[5];
      v13 = *((_QWORD *)a1 + 12);
      *((_QWORD *)a1 + 10) = 0;
      *((_QWORD *)a1 + 11) = 0;
      *((_QWORD *)a1 + 12) = 0;
      v14 = 1;
    }
    v15 = 1;
  }
  *a1 = *a2;
  sub_2237018A4((uint64_t)(a1 + 1), a2 + 1);
  *a2 = v5;
  sub_2237018A4((uint64_t)(a2 + 1), &__p);
  if (v15)
  {
    if (!v14)
      goto LABEL_11;
    if (SHIBYTE(v13) < 0)
    {
      operator delete(v12[0]);
      if ((SHIBYTE(v10) & 0x80000000) == 0)
      {
LABEL_11:
        if (!v8)
          return;
        goto LABEL_12;
      }
    }
    else if ((SHIBYTE(v10) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete((void *)v9);
    if (!v8)
      return;
LABEL_12:
    if (SHIBYTE(v7) < 0)
      operator delete((void *)__p);
  }
}

void sub_2237018A4(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (*(unsigned __int8 *)(a1 + 96) != *((unsigned __int8 *)a2 + 96))
  {
    if (!*(_BYTE *)(a1 + 96))
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 0;
      if (*((_BYTE *)a2 + 24))
      {
        v6 = *a2;
        *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)a1 = v6;
        *((_QWORD *)a2 + 1) = 0;
        *((_QWORD *)a2 + 2) = 0;
        *(_QWORD *)a2 = 0;
        *(_BYTE *)(a1 + 24) = 1;
      }
      *(_BYTE *)(a1 + 32) = 0;
      *(_BYTE *)(a1 + 88) = 0;
      v5 = 1;
      if (*((_BYTE *)a2 + 88))
      {
        v7 = a2[2];
        *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
        *(_OWORD *)(a1 + 32) = v7;
        *((_QWORD *)a2 + 5) = 0;
        *((_QWORD *)a2 + 6) = 0;
        *((_QWORD *)a2 + 4) = 0;
        *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
        v8 = a2[4];
        *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
        *(_OWORD *)(a1 + 64) = v8;
        *((_QWORD *)a2 + 9) = 0;
        *((_QWORD *)a2 + 10) = 0;
        *((_QWORD *)a2 + 8) = 0;
        *(_BYTE *)(a1 + 88) = 1;
        *(_BYTE *)(a1 + 96) = 1;
        return;
      }
      goto LABEL_16;
    }
    if (!*(_BYTE *)(a1 + 88))
      goto LABEL_12;
    if (*(char *)(a1 + 87) < 0)
    {
      operator delete(*(void **)(a1 + 64));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_12:
        v5 = *(_BYTE *)(a1 + 24);
        if (v5)
        {
LABEL_13:
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v5 = 0;
        }
LABEL_16:
        *(_BYTE *)(a1 + 96) = v5;
        return;
      }
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(*(void **)(a1 + 32));
    v5 = *(_BYTE *)(a1 + 24);
    if (v5)
      goto LABEL_13;
    goto LABEL_16;
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (*(unsigned __int8 *)(a1 + 24) == *((unsigned __int8 *)a2 + 24))
    {
      if (*(_BYTE *)(a1 + 24))
      {
        if (*(char *)(a1 + 23) < 0)
          operator delete(*(void **)a1);
        v4 = *a2;
        *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)a1 = v4;
        *((_BYTE *)a2 + 23) = 0;
        *(_BYTE *)a2 = 0;
      }
    }
    else if (*(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      *(_BYTE *)(a1 + 24) = 0;
    }
    else
    {
      v9 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v9;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a1 + 24) = 1;
    }
    sub_223701A64(a1 + 32, a2 + 2);
  }
}

void sub_223701A64(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*(unsigned __int8 *)(a1 + 56) != *((unsigned __int8 *)a2 + 56))
  {
    if (!*(_BYTE *)(a1 + 56))
    {
      v7 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v7;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      v8 = a2[2];
      *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = v8;
      *((_QWORD *)a2 + 5) = 0;
      *((_QWORD *)a2 + 6) = 0;
      *((_QWORD *)a2 + 4) = 0;
      *(_BYTE *)(a1 + 56) = 1;
      return;
    }
    if (*(char *)(a1 + 55) < 0)
    {
      operator delete(*(void **)(a1 + 32));
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
        goto LABEL_12;
    }
    else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
LABEL_12:
      *(_BYTE *)(a1 + 56) = 0;
      return;
    }
    operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 56) = 0;
    return;
  }
  if (*(_BYTE *)(a1 + 56))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    v5 = (void **)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      operator delete(*v5);
    v6 = a2[2];
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_OWORD *)v5 = v6;
    *((_BYTE *)a2 + 55) = 0;
    *((_BYTE *)a2 + 32) = 0;
  }
}

_DWORD *sub_223701BA0(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC57CF0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_223701C90(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  uint64_t v6;
  std::string v7;
  std::string v8;
  void *__p[2];
  unsigned __int8 v10;
  int v11;
  char v12;
  char *v13;

  v6 = *a1;
  v11 = 0;
  sub_2233B45E8((uint64_t)&v13, (uint64_t)__p, (double *)&v6);
  if (v11 == -1)
    sub_22316DD70();
  v13 = &v12;
  ((void (*)(std::string *__return_ptr, char **, void **))off_24EC57D38[v11])(&v7, &v13, __p);
  if (v11 != -1)
    ((void (*)(char **, void **))off_24EC57CF0[v11])(&v13, __p);
  std::string::push_back(&v7, 32);
  v8 = v7;
  memset(&v7, 0, sizeof(v7));
  sub_22456DDD0(1, 1, __p);
  if ((v10 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v4 = v10;
  else
    v4 = (std::string::size_type)__p[1];
  v5 = std::string::append(&v8, (const std::string::value_type *)v3, v4);
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_16:
      operator delete(v7.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_16;
}

void sub_223701DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_223701E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223701E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_223701E8C(_DWORD ***a1)
{
  return sub_223701EA8(**a1, (char *)(*a1)[1]);
}

void sub_223701E98(uint64_t a1, uint64_t a2)
{
  sub_223701F98((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_223701EA8(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC57CF0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_223701F98(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC57CF0[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_22370214C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_223702190(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_223702288((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_223702280(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_223702288(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_223702484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_223702498(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC57CF0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_22370258C()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_2237025A0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24EC57D60;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_2237025E8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24EC57D60;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_223702618(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  std::mutex *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9;
  unint64_t v10;
  uint64_t *p_p;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __n128 *v17;
  void *v18;
  size_t v19;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v20;
  float v21;
  void *__p;
  unint64_t v23;
  unsigned __int8 v24;

  sub_22328CE6C("cv3d.recon.", (const char *)&off_24EC57DC0);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v2 = sub_2241471F8();
    v3 = v2[2];
    if (!v3)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v3 = v2[2];
    }
    v4 = *(_QWORD *)(v3 + 64);
    v5 = (std::mutex *)(v4 + 32);
    std::mutex::lock((std::mutex *)(v4 + 32));
    v7 = *(_QWORD *)(v4 + 96);
    v6 = *(_QWORD *)(v4 + 104);
    std::mutex::unlock(v5);
    if (v7 != v6)
    {
      sub_2241471F8();
      v8 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8))
      {
        kdebug_trace();
        if (*(_BYTE *)(a1 + 32))
          v9 = std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 24);
        else
          v9 = *(_QWORD *)(a1 + 24);
        v21 = (float)v9 / 1000000.0;
        sub_223702A10(**(double **)(a1 + 8), (uint64_t)&qword_255788F20, v8, &v21, "ProcessKeyframeUpdates total runtime");
        kdebug_trace();
      }
    }
  }
  kdebug_trace();
  v10 = v24;
  if ((v24 & 0x80u) != 0)
    v10 = v23;
  if (v10 >= 0x11)
  {
    p_p = (uint64_t *)&__p;
    if ((v24 & 0x80u) != 0)
      p_p = (uint64_t *)__p;
    v12 = *p_p;
    v13 = p_p[1];
    v14 = *((unsigned __int8 *)p_p + 16);
    if (v12 == 0x6365722E64337663 && v13 == 0x73746174532E6E6FLL && v14 == 46)
    {
      v17 = sub_223187510();
      if ((v24 & 0x80u) == 0)
        v18 = &__p;
      else
        v18 = __p;
      if ((v24 & 0x80u) == 0)
        v19 = v24;
      else
        v19 = v23;
      if (*(_BYTE *)(a1 + 32))
        v20 = std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 24);
      else
        v20 = *(_QWORD *)(a1 + 24);
      v21 = (float)v20 / 1000000.0;
      sub_2231897A8((uint64_t *)v17, v18, v19, &v21, (uint64_t)"ProcessKeyframeUpdates total runtime", 36);
    }
  }
  kdebug_trace();
  if ((char)v24 < 0)
    operator delete(__p);
}

void sub_223702918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  kdebug_trace();
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223702998(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon8kfplanes21KeyframePlaneDetector26ProcessKe"
                     "yframeUpdatesImplERKNS3_6vectorINS5_5frame12KeyframeDataENS3_9allocatorISA_EEEENS0_11OptionalRefIKN"
                     "S6_16SingleShotResultEEERKNS6_15KeyframingStateERKNS3_6chrono8durationIxNS3_5ratioILl1ELl1000000000"
                     "EEEEEE3$_5JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon8kfplanes21KeyframePlaneDetector"
                                "26ProcessKeyframeUpdatesImplERKNS3_6vectorINS5_5frame12KeyframeDataENS3_9allocatorISA_EE"
                                "EENS0_11OptionalRefIKNS6_16SingleShotResultEEERKNS6_15KeyframingStateERKNS3_6chrono8dura"
                                "tionIxNS3_5ratioILl1ELl1000000000EEEEEE3$_5JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon8kfplanes21KeyframePlaneDetector26ProcessKeyframeUpdatesImplERKNS3_6vectorINS5_5frame12KeyframeDataENS3_9allocatorISA_EEEENS0_11OptionalRefIKNS6_16SingleShotResultEEERKNS6_15KeyframingStateERKNS3_6chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEEE3$_5JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon8kfplanes21KeyframePlaneDetector26ProcessKeyframeUpdatesImplERKNS3_6vectorINS5_5frame12KeyframeDataENS3_9allocatorISA_EEEENS0_11OptionalRefIKNS6_16SingleShotResultEEERKNS6_15KeyframingStateERKNS3_6chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEEE3$_5JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223702A04()
{
  return &unk_24EC57DC8;
}

void sub_223702A10(double a1, uint64_t a2, uint64_t a3, float *a4, const char *a5)
{
  size_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  void *__dst[2];
  unint64_t v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3))
  {
    v9 = strlen(a5);
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v10 = (void *)v9;
    if (v9 >= 0x17)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      v11 = (void **)operator new(v12 + 1);
      __dst[1] = v10;
      v17 = v13 | 0x8000000000000000;
      __dst[0] = v11;
    }
    else
    {
      HIBYTE(v17) = v9;
      v11 = __dst;
      if (!v9)
      {
LABEL_10:
        *((_BYTE *)v10 + (_QWORD)v11) = 0;
        *(_QWORD *)&v15 = (uint64_t)(a1 * 1000000000.0);
        *((_QWORD *)&v15 + 1) = 2;
        v14 = sub_2241471F8();
        sub_2231FBBA8((uint64_t)v14, a3, a4, (uint64_t)__dst, &v15);
        if (SHIBYTE(v17) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v11, a5, (size_t)v10);
    goto LABEL_10;
  }
}

void sub_223702B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223702B64(uint64_t a1, __int16 ***a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int16 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  __int16 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  unsigned __int16 v29;
  unsigned int v30;
  unint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  unsigned __int8 *v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  __int16 **v52;
  int v53;
  char v54;
  __int16 **v55;
  signed __int16 v56;
  int v57;
  unsigned __int16 *v58;
  uint64_t (**v59)();
  uint64_t v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int16 v65;
  uint64_t v66;
  uint64_t (**v67)();
  uint64_t v68;
  std::__shared_weak_count *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int16 v73;

  v66 = a3;
  LOWORD(v67) = 128;
  BYTE2(v67) = 0;
  *(_QWORD *)a1 = &off_24EC21B18;
  sub_2231C5C38(&v66, (_WORD *)(a1 + 8));
  sub_22370325C(a1, (__int16 *)&v67);
  v59 = &off_24EC232F0;
  sub_223416D28(a1, &v60);
  v51 = *(_QWORD *)(a4 + 8);
  v53 = *(unsigned __int8 *)(a4 + 16);
  if (*(_BYTE *)(a4 + 16)
    && *(_QWORD *)a4 != 0x2E8BA2E8BA2E8BA3 * (a2[1] - *a2)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include/Reconstruction/KeyframePlanes/KeyframePlaneVisualization.h", 440, (uint64_t)"!colors_opt.has_value() || Size(*colors_opt) == Size(regions)", 61, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  LOWORD(v67) = 128;
  BYTE2(v67) = 0;
  sub_2237039AC((uint64_t)&v59, (__int16 *)&v67);
  v55 = *a2;
  v52 = a2[1];
  if (*a2 != v52)
  {
    v7 = 0;
    v8 = (unsigned __int8 *)&qword_255795680;
    do
    {
      v67 = &off_24EC232F0;
      v9 = v60;
      v10 = v61;
      if (v61)
      {
        p_shared_owners = (unint64_t *)&v61->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        v13 = v65;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        v70 = v62;
        v71 = v63;
        v72 = v64;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        v68 = v9;
        v69 = v10;
        v73 = v13;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        v54 = v7;
        if (v53)
        {
LABEL_22:
          v18 = *(unsigned __int16 *)(v51 + 3 * v7) | (*(unsigned __int8 *)(v51 + 3 * v7 + 2) << 16);
          v19 = *v55;
          v58 = (unsigned __int16 *)v55[1];
          if (*v55 != (__int16 *)v58)
            goto LABEL_26;
          goto LABEL_68;
        }
      }
      else
      {
        v68 = v60;
        v69 = 0;
        v70 = v62;
        v71 = v63;
        v72 = v64;
        v73 = v65;
        v54 = v7;
        if (v53)
          goto LABEL_22;
      }
      v18 = sub_223738400(v7);
      v19 = *v55;
      v58 = (unsigned __int16 *)v55[1];
      if (*v55 != (__int16 *)v58)
      {
LABEL_26:
        v56 = v72 - 1;
        v57 = SWORD2(v72);
        do
        {
          if ((*v19 & 0x80000000) == 0 && v57 > (unsigned __int16)*v19)
          {
            v20 = v19[1] & ~(v19[1] >> 31);
            v21 = v19[2] >= v56 ? v56 : v19[2];
            if (v20 <= v21)
            {
              v22 = HIDWORD(*(_QWORD *)((char *)&v71 + 4));
              v23 = v70 + HIDWORD(v72) * (unsigned __int16)*v19;
              if ((_QWORD)v70)
              {
                v24 = (__int16)(v21 + 1);
                v25 = (__int16)(v20 + 1);
                if (v24 <= v25)
                  v26 = v20 + 1;
                else
                  v26 = v21 + 1;
                v27 = (unsigned __int16)(v26 + ~(_WORD)v20);
                if (!v27)
                  goto LABEL_83;
                if (v24 <= v25)
                  LOWORD(v24) = v20 + 1;
                v28 = v24 - 1;
                v29 = v24 - 1 - v20;
                v30 = *(uint64_t *)((char *)&v71 + 4) >= 0 ? DWORD2(v71) : -DWORD2(v71);
                v31 = v30 * (unint64_t)v29;
                if (v20 > v28)
                  goto LABEL_83;
                if (v31 > ((*(uint64_t *)((char *)&v71 + 4) >> 63) ^ ~((unsigned __int16)(v19[1] & ~(v19[1] >> 15))
                                                                                                 * DWORD2(v71))))
                  goto LABEL_83;
                if ((v31 & 0xFFFFFFFF00000000) != 0)
                  goto LABEL_83;
                v32 = 0;
                v33 = v27 + 1;
                v34 = (v27 + 1) & 0x1FFFE;
                do
                {
                  v35 = v23 + (v22 * (__int16)(v20 + v32));
                  v36 = v23 + (v22 * (__int16)(v20 + v32 + 1));
                  *(_BYTE *)(v35 + 2) = BYTE2(v18);
                  *(_WORD *)v35 = v18;
                  *(_BYTE *)(v36 + 2) = BYTE2(v18);
                  *(_WORD *)v36 = v18;
                  v32 += 2;
                }
                while (v34 != v32);
                LOWORD(v20) = v20 + v34;
                if (v33 != v34)
                {
LABEL_83:
                  do
                  {
                    v37 = v23 + (v22 * (__int16)v20);
                    *(_BYTE *)(v37 + 2) = BYTE2(v18);
                    *(_WORD *)v37 = v18;
                    v20 = (__int16)(v20 + 1);
                  }
                  while (v20 <= (__int16)v21);
                }
              }
              else
              {
                do
                {
                  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2245AAA31, 0, (void (*)(void **))sub_22457406C);
                  v38 = atomic_load(v8);
                  if ((v38 & 1) == 0 && __cxa_guard_acquire((__guard *)v8))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release((__guard *)v8);
                  }
                  v39 = v8;
                  if (byte_255795670)
                    v40 = byte_255795678 == 0;
                  else
                    v40 = 0;
                  if (!v40)
                  {
                    v41 = qword_255795648;
                    v42 = qword_255795650;
                    while (v41 != v42)
                    {
                      (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v41)(*(_QWORD *)(v41 + 8), "ptr != nullptr || size == 0", 27, &unk_2245AAA31, 0);
                      v41 += 16;
                    }
                  }
                  v8 = v39;
                  v43 = atomic_load(v39);
                  if ((v43 & 1) == 0 && __cxa_guard_acquire((__guard *)v39))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release((__guard *)v39);
                  }
                  if (!byte_255795670)
                    abort();
                  qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, &unk_2245AAA31, 0);
                  v44 = v23 + (v22 * (__int16)v20);
                  *(_BYTE *)(v44 + 2) = BYTE2(v18);
                  *(_WORD *)v44 = v18;
                  v20 = (__int16)(v20 + 1);
                }
                while (v20 <= (__int16)v21);
              }
            }
          }
          v19 += 4;
        }
        while (v19 != (__int16 *)v58);
      }
LABEL_68:
      v45 = v69;
      if (v69)
      {
        v46 = (unint64_t *)&v69->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v7 = (v54 + 1);
      v55 += 11;
    }
    while (v55 != v52);
  }
  v48 = v61;
  if (v61)
  {
    v49 = (unint64_t *)&v61->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

void sub_223703194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_223167354(a10);
  _Unwind_Resume(a1);
}

void sub_2237031AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_2231E94AC((uint64_t)va);
  sub_223167354(a3);
  _Unwind_Resume(a1);
}

void sub_2237031C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  sub_2231E94AC(v12 - 168);
  sub_2231E94AC((uint64_t)va);
  sub_223167354(a3);
  _Unwind_Resume(a1);
}

uint64_t sub_2237031F4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_22370325C(uint64_t a1, __int16 *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  __int16 v11;
  char v12;
  uint64_t v13[2];
  _QWORD v14[2];
  uint64_t v15;
  __int16 *v16;
  char v17;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if (!v5)
      goto LABEL_10;
  }
  if (*(_BYTE *)(a1 + 129))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(&v10, *(_QWORD *)(a1 + 8), 1);
    goto LABEL_11;
  }
LABEL_10:
  v10 = 0;
LABEL_11:
  v11 = *a2;
  v12 = *((_BYTE *)a2 + 2);
  v13[0] = a1;
  v13[1] = (uint64_t)&v11;
  if (*(_DWORD *)(a1 + 100) == 1)
  {
    if (*(_DWORD *)(a1 + 104) == *(_DWORD *)(a1 + 88))
    {
      sub_2237033CC(v13);
    }
    else
    {
      v15 = a1;
      v16 = &v11;
      sub_2237034F0(&v15);
    }
  }
  else
  {
    v17 = 0;
    v15 = a1;
    v16 = (__int16 *)&v17;
    v14[0] = &v11;
    v14[1] = &v15;
    if (*(_DWORD *)(a1 + 88) && *(_DWORD *)(a1 + 92) && *(_DWORD *)(a1 + 96))
      sub_2237035B0((uint64_t)v14, a1);
  }
  result = v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2237033A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2237033CC(uint64_t *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  int v3;
  int v4;
  _BOOL4 v5;
  int v6;
  int v7;
  size_t v8;
  void *v9;
  BOOL v10;
  BOOL v11;
  _QWORD v13[2];
  _QWORD v14[2];
  char v15;

  v1 = *result;
  v2 = (unsigned __int8 *)result[1];
  v3 = *(_DWORD *)(*result + 92);
  if (*(_DWORD *)(*result + 108) != *(_DWORD *)(*result + 104) * v3)
    return (uint64_t *)sub_22370371C((_DWORD *)*result, v2);
  v4 = *v2;
  v5 = v2[1] == v4;
  if (v2[1] == v4)
    v5 = v2[2] == v4;
  v6 = *(_DWORD *)(v1 + 88);
  v7 = *(_DWORD *)(v1 + 96);
  if (v5)
  {
    v8 = (v6 * v3 * v7);
    v9 = *(void **)(v1 + 32);
    if (*(_BYTE *)(v1 + 128))
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v1 + 8) + 88))(*(_QWORD *)(v1 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
      v9 = *(void **)(v1 + 32);
      v4 = *v2;
    }
    return (uint64_t *)memset(v9, v4, v8);
  }
  else
  {
    v15 = 0;
    v14[0] = v1;
    v14[1] = &v15;
    v13[0] = v2;
    v13[1] = v14;
    if (v3)
      v11 = v6 == 0;
    else
      v11 = 1;
    if (!v11 && v7 != 0)
      return (uint64_t *)sub_2237035B0((uint64_t)v13, v1);
  }
  return result;
}

uint64_t *sub_2237034F0(uint64_t *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned int v3;
  int v4;
  _BOOL4 v5;
  BOOL v6;
  BOOL v8;
  uint64_t v10;
  char v11;
  char *v12;
  uint64_t *v13;
  unsigned __int8 *v14;
  _QWORD v15[2];
  char v16;

  v1 = *result;
  v2 = (unsigned __int8 *)result[1];
  v11 = 0;
  v3 = *(_DWORD *)(v1 + 88);
  v10 = v3;
  v4 = *v2;
  v5 = v2[1] == v4;
  if (v2[1] == v4)
    v5 = v2[2] == v4;
  if (v5)
  {
    v12 = &v11;
    v13 = &v10;
    v14 = v2;
    if (v3)
      v6 = *(_DWORD *)(v1 + 92) == 0;
    else
      v6 = 1;
    if (!v6 && *(_DWORD *)(v1 + 96) != 0)
      return (uint64_t *)sub_223703848((_QWORD **)&v12, v1);
  }
  else
  {
    v16 = 0;
    v12 = (char *)v1;
    v13 = (uint64_t *)&v16;
    v15[0] = v2;
    v15[1] = &v12;
    if (v3)
      v8 = *(_DWORD *)(v1 + 92) == 0;
    else
      v8 = 1;
    if (!v8 && *(_DWORD *)(v1 + 96) != 0)
      return (uint64_t *)sub_2237035B0((uint64_t)v15, v1);
  }
  return result;
}

uint64_t sub_2237035B0(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  _BYTE **v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  BOOL v12;
  int v13;
  int v14;
  _BYTE *v15;
  _BYTE *v16;
  int v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;

  v2 = *(_DWORD *)(a2 + 92);
  v3 = *(_DWORD *)(a2 + 96);
  if (*(_DWORD *)(a2 + 88))
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4 && v3 != 0)
  {
    v7 = (_BYTE **)result;
    v8 = v3 - 1;
    v9 = *(unsigned int *)(a2 + 104);
    v10 = *(unsigned int *)(a2 + 108);
    v11 = *(_BYTE **)(a2 + 32);
    if (*(_BYTE *)(a2 + 128))
      v12 = v11 == 0;
    else
      v12 = 1;
    if (!v12)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
      v11 = *(_BYTE **)(a2 + 32);
    }
    v13 = v2 - 1;
    if (v8)
    {
      if (v2 == 1)
      {
        do
        {
          v20 = *v7;
          *v11 = **v7;
          v11[1] = v20[1];
          v11[2] = v20[2];
          v11 += v10;
          --v8;
        }
        while (v8);
      }
      else
      {
        v14 = 0;
        v15 = v11 + 2;
        do
        {
          v16 = v15;
          v17 = v2 - 1;
          do
          {
            v18 = *v7;
            *(v16 - 2) = **v7;
            *(v16 - 1) = v18[1];
            *v16 = v18[2];
            v16 += v9;
            --v17;
          }
          while (v17);
          v19 = *v7;
          *(v16 - 2) = **v7;
          *(v16 - 1) = v19[1];
          *v16 = v19[2];
          v11 += v10;
          ++v14;
          v15 += v10;
        }
        while (v14 != v8);
      }
    }
    if (v2 != 1)
    {
      do
      {
        v21 = *v7;
        *v11 = **v7;
        v11[1] = v21[1];
        v11[2] = v21[2];
        v11 += v9;
        --v13;
      }
      while (v13);
    }
    v22 = *v7;
    *v11 = **v7;
    v11[1] = v22[1];
    v11[2] = v22[2];
  }
  return result;
}

_DWORD *sub_22370371C(_DWORD *result, unsigned __int8 *a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  int v6;
  _BOOL4 v7;
  int v8;
  size_t v9;
  int v10;
  uint64_t v11;
  char *v12;
  _QWORD v13[2];
  _QWORD v14[2];
  char v15;

  v3 = result;
  v5 = result[22];
  v4 = result[23];
  v6 = *a2;
  v7 = a2[1] == v6;
  if (a2[1] == v6)
    v7 = a2[2] == v6;
  if (v7)
  {
    if (v5)
    {
      if (v4)
      {
        v8 = result[24];
        if (v8)
        {
          v9 = (v4 * v5);
          v10 = v8 - 1;
          v11 = result[27];
          v12 = (char *)*((_QWORD *)result + 4);
          if (*((_BYTE *)result + 128) && v12)
          {
            (*(void (**)(_QWORD, uint64_t, const char *))(**((_QWORD **)result + 1) + 88))(*((_QWORD *)result + 1), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
            v12 = (char *)*((_QWORD *)v3 + 4);
          }
          for (; v10; --v10)
          {
            memset(v12, *a2, v9);
            v12 += v11;
          }
          return memset(v12, *a2, v9);
        }
      }
    }
  }
  else
  {
    v15 = 0;
    v14[0] = result;
    v14[1] = &v15;
    v13[0] = a2;
    v13[1] = v14;
    if (v5 && v4 && result[24])
      return (_DWORD *)sub_2237035B0((uint64_t)v13, (uint64_t)result);
  }
  return result;
}

_QWORD **sub_223703848(_QWORD **result, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  _QWORD **v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  int v13;
  int i;
  int v15;
  char *v16;

  v2 = *(_DWORD *)(a2 + 92);
  v3 = *(_DWORD *)(a2 + 96);
  if (*(_DWORD *)(a2 + 88))
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4 && v3 != 0)
  {
    v7 = result;
    v8 = v3 - 1;
    v9 = *(unsigned int *)(a2 + 104);
    v10 = *(unsigned int *)(a2 + 108);
    v11 = *(char **)(a2 + 32);
    if (*(_BYTE *)(a2 + 128))
      v12 = v11 == 0;
    else
      v12 = 1;
    if (!v12)
    {
      (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
      v11 = *(char **)(a2 + 32);
    }
    v13 = v2 - 1;
    if (v8)
    {
      if (v13)
      {
        for (i = 0; i != v8; ++i)
        {
          v15 = v13;
          v16 = v11;
          do
          {
            memset(v16, *(unsigned __int8 *)v7[2], *v7[1]);
            v16 += v9;
            --v15;
          }
          while (v15);
          memset(v16, *(unsigned __int8 *)v7[2], *v7[1]);
          v11 += v10;
        }
      }
      else
      {
        do
        {
          memset(v11, *(unsigned __int8 *)v7[2], *v7[1]);
          v11 += v10;
          --v8;
        }
        while (v8);
      }
    }
    for (; v13; --v13)
    {
      memset(v11, *(unsigned __int8 *)v7[2], *v7[1]);
      v11 += v9;
    }
    return (_QWORD **)memset(v11, *(unsigned __int8 *)v7[2], *v7[1]);
  }
  return result;
}

uint64_t sub_2237039AC(uint64_t a1, __int16 *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  __int16 v15;
  char v16;
  uint64_t v17[2];

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_21;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_21;
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (*(_BYTE *)(a1 + 73))
        goto LABEL_14;
    }
    else
    {
LABEL_21:
      if (*(_BYTE *)(a1 + 73))
      {
LABEL_14:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(&v14, v4, 1);
        goto LABEL_17;
      }
    }
  }
  v14 = 0;
LABEL_17:
  v15 = *a2;
  v16 = *((_BYTE *)a2 + 2);
  v17[0] = a1;
  v17[1] = (uint64_t)&v15;
  sub_223703B00(v17);
  result = v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_223703ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223703B00(uint64_t *result)
{
  _DWORD *v1;
  int v2;
  unsigned __int8 *v3;
  unsigned int *v4;
  uint64_t v5;
  BOOL v6;
  char *v8;
  _QWORD v9[2];
  _DWORD *v10;
  char *v11;
  char v12;

  v1 = (_DWORD *)*result;
  if (*(_DWORD *)(*result + 44) == 1)
  {
    v2 = v1[12];
    if (v2 == v1[8])
    {
      v3 = (unsigned __int8 *)result[1];
      v4 = (unsigned int *)*result;
      if (v1[13] == v1[9] * v2)
        return (uint64_t *)sub_223703C84(v4, v3);
      else
        return (uint64_t *)sub_223703F84(v4, v3);
    }
    else
    {
      v8 = (char *)result[1];
      v10 = (_DWORD *)*result;
      v11 = v8;
      return sub_223703BC4((uint64_t *)&v10);
    }
  }
  else
  {
    v5 = result[1];
    v12 = 0;
    v10 = v1;
    v11 = &v12;
    v9[0] = v5;
    v9[1] = &v10;
    if (v1[8])
      v6 = v1[9] == 0;
    else
      v6 = 1;
    if (!v6 && v1[10] != 0)
      return (uint64_t *)sub_223703DC8((uint64_t)v9, (uint64_t)v1);
  }
  return result;
}

uint64_t *sub_223703BC4(uint64_t *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned int v3;
  int v4;
  _BOOL4 v5;
  BOOL v6;
  BOOL v8;
  uint64_t v10;
  char v11;
  char *v12;
  uint64_t *v13;
  unsigned __int8 *v14;
  _QWORD v15[2];
  char v16;

  v1 = *result;
  v2 = (unsigned __int8 *)result[1];
  v11 = 0;
  v3 = *(_DWORD *)(v1 + 32);
  v10 = v3;
  v4 = *v2;
  v5 = v2[1] == v4;
  if (v2[1] == v4)
    v5 = v2[2] == v4;
  if (v5)
  {
    v12 = &v11;
    v13 = &v10;
    v14 = v2;
    if (v3)
      v6 = *(_DWORD *)(v1 + 36) == 0;
    else
      v6 = 1;
    if (!v6 && *(_DWORD *)(v1 + 40) != 0)
      return (uint64_t *)sub_223704104((_QWORD **)&v12, v1);
  }
  else
  {
    v16 = 0;
    v12 = (char *)v1;
    v13 = (uint64_t *)&v16;
    v15[0] = v2;
    v15[1] = &v12;
    if (v3)
      v8 = *(_DWORD *)(v1 + 36) == 0;
    else
      v8 = 1;
    if (!v8 && *(_DWORD *)(v1 + 40) != 0)
      return (uint64_t *)sub_223703DC8((uint64_t)v15, v1);
  }
  return result;
}

_DWORD *sub_223703C84(_DWORD *result, unsigned __int8 *a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  _BOOL4 v6;
  int v7;
  int v8;
  int v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[2];
  _QWORD v18[2];
  char v19;

  v3 = result;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 == v4;
  if (v5 == v4)
    v6 = a2[2] == v4;
  v8 = result[8];
  v7 = result[9];
  v9 = result[10];
  if (v6)
  {
    v10 = (v7 * v8 * v9);
    v11 = (void *)*((_QWORD *)result + 3);
    if (*((_BYTE *)v3 + 72) && v11)
    {
      v12 = *((_QWORD *)v3 + 1);
      v13 = (std::__shared_weak_count *)*((_QWORD *)v3 + 2);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v12 + 88))(v12, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v11 = (void *)*((_QWORD *)v3 + 3);
      v4 = *a2;
    }
    return memset(v11, v4, v10);
  }
  else
  {
    v19 = 0;
    v18[0] = result;
    v18[1] = &v19;
    v17[0] = a2;
    v17[1] = v18;
    if (v8 && v7 && v9)
      return (_DWORD *)sub_223703DC8((uint64_t)v17, (uint64_t)result);
  }
  return result;
}

uint64_t sub_223703DC8(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  _BYTE **v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  BOOL v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  _BYTE *v20;
  _BYTE *v21;
  int v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;

  v2 = *(_DWORD *)(a2 + 36);
  v3 = *(_DWORD *)(a2 + 40);
  if (*(_DWORD *)(a2 + 32))
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4 && v3 != 0)
  {
    v7 = (_BYTE **)result;
    v8 = v3 - 1;
    v9 = *(unsigned int *)(a2 + 48);
    v10 = *(unsigned int *)(a2 + 52);
    v11 = *(_BYTE **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72))
      v12 = v11 == 0;
    else
      v12 = 1;
    if (!v12)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(std::__shared_weak_count **)(a2 + 16);
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v13 + 88))(v13, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v11 = *(_BYTE **)(a2 + 24);
    }
    v18 = v2 - 1;
    if (v8)
    {
      if (v2 == 1)
      {
        do
        {
          v25 = *v7;
          *v11 = **v7;
          v11[1] = v25[1];
          v11[2] = v25[2];
          v11 += v10;
          --v8;
        }
        while (v8);
      }
      else
      {
        v19 = 0;
        v20 = v11 + 2;
        do
        {
          v21 = v20;
          v22 = v2 - 1;
          do
          {
            v23 = *v7;
            *(v21 - 2) = **v7;
            *(v21 - 1) = v23[1];
            *v21 = v23[2];
            v21 += v9;
            --v22;
          }
          while (v22);
          v24 = *v7;
          *(v21 - 2) = **v7;
          *(v21 - 1) = v24[1];
          *v21 = v24[2];
          v11 += v10;
          ++v19;
          v20 += v10;
        }
        while (v19 != v8);
      }
    }
    if (v2 != 1)
    {
      do
      {
        v26 = *v7;
        *v11 = **v7;
        v11[1] = v26[1];
        v11[2] = v26[2];
        v11 += v9;
        --v18;
      }
      while (v18);
    }
    v27 = *v7;
    *v11 = **v7;
    v11[1] = v27[1];
    v11[2] = v27[2];
  }
  return result;
}

unsigned int *sub_223703F84(unsigned int *result, unsigned __int8 *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  _BOOL4 v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  _QWORD v18[2];
  _QWORD v19[2];
  char v20;

  v3 = result;
  v5 = result[8];
  v4 = result[9];
  v6 = *a2;
  v7 = a2[1] == v6;
  if (a2[1] == v6)
    v7 = a2[2] == v6;
  if (v7)
  {
    if (v5)
    {
      if (v4)
      {
        v8 = result[10];
        if (v8)
        {
          v9 = v4 * v5;
          v10 = v8 - 1;
          v11 = result[13];
          v12 = (char *)*((_QWORD *)result + 3);
          if (*((_BYTE *)result + 72) && v12)
          {
            v13 = *((_QWORD *)result + 1);
            v14 = (std::__shared_weak_count *)*((_QWORD *)result + 2);
            if (v14)
            {
              p_shared_owners = (unint64_t *)&v14->__shared_owners_;
              do
                v16 = __ldxr(p_shared_owners);
              while (__stxr(v16 + 1, p_shared_owners));
              do
                v17 = __ldaxr(p_shared_owners);
              while (__stlxr(v17 - 1, p_shared_owners));
              if (!v17)
              {
                ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                std::__shared_weak_count::__release_weak(v14);
              }
            }
            (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v13 + 88))(v13, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
            v12 = (char *)*((_QWORD *)v3 + 3);
          }
          for (; v10; --v10)
          {
            memset(v12, *a2, v9);
            v12 += v11;
          }
          return (unsigned int *)memset(v12, *a2, v9);
        }
      }
    }
  }
  else
  {
    v20 = 0;
    v19[0] = result;
    v19[1] = &v20;
    v18[0] = a2;
    v18[1] = v19;
    if (v5 && v4 && result[10])
      return (unsigned int *)sub_223703DC8((uint64_t)v18, (uint64_t)result);
  }
  return result;
}

_QWORD **sub_223704104(_QWORD **result, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  _QWORD **v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int i;
  int v20;
  char *v21;

  v2 = *(_DWORD *)(a2 + 36);
  v3 = *(_DWORD *)(a2 + 40);
  if (*(_DWORD *)(a2 + 32))
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4 && v3 != 0)
  {
    v7 = result;
    v8 = v3 - 1;
    v9 = *(unsigned int *)(a2 + 48);
    v10 = *(unsigned int *)(a2 + 52);
    v11 = *(char **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72))
      v12 = v11 == 0;
    else
      v12 = 1;
    if (!v12)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(std::__shared_weak_count **)(a2 + 16);
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v13 + 88))(v13, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v11 = *(char **)(a2 + 24);
    }
    v18 = v2 - 1;
    if (v8)
    {
      if (v2 == 1)
      {
        do
        {
          memset(v11, *(unsigned __int8 *)v7[2], *v7[1]);
          v11 += v10;
          --v8;
        }
        while (v8);
      }
      else
      {
        for (i = 0; i != v8; ++i)
        {
          v20 = v18;
          v21 = v11;
          do
          {
            memset(v21, *(unsigned __int8 *)v7[2], *v7[1]);
            v21 += v9;
            --v20;
          }
          while (v20);
          memset(v21, *(unsigned __int8 *)v7[2], *v7[1]);
          v11 += v10;
        }
      }
    }
    for (; v18; --v18)
    {
      memset(v11, *(unsigned __int8 *)v7[2], *v7[1]);
      v11 += v9;
    }
    return (_QWORD **)memset(v11, *(unsigned __int8 *)v7[2], *v7[1]);
  }
  return result;
}

void sub_2237042B0(uint64_t *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v14 = a2;
  v15 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    v12 = a2;
    v13 = a3;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  else
  {
    v12 = a2;
    v13 = 0;
  }
  sub_2237044BC(a1, &v12);
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_223704390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_2237043AC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223704414()
{
  return 21;
}

uint64_t sub_22370441C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_223704424@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_223704438(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t *sub_2237044BC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 72))(&v20, v3, 21);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_22370460C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223704620(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v17 = v4;
    v18 = v5;
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 8);
    v18 = 0;
    v15 = v4;
    v16 = 0;
  }
  sub_2237044BC(a2, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_223704710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_22370472C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 __p;
  char v15;
  char v16;
  _QWORD v17[2];
  std::__shared_weak_count *v18;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v9 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    LOBYTE(__p) = 0;
    v16 = 0;
    sub_223704840(a3, &__p, a5, v17);
    sub_2231AA5A4(a1, v9, (uint64_t)v17);
    v10 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (v16 && v15 < 0)
      operator delete((void *)__p);
  }
  return a1;
}

void sub_22370480C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  sub_2241231D8((uint64_t)&a18);
  if (a16)
  {
    if (a15 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223704840@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v13;
  unint64_t v14;
  mach_timebase_info info;
  _QWORD v16[2];
  __int128 v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v13) = info.numer;
    LODWORD(v14) = info.denom;
    *(double *)&qword_255795558 = (double)v13 / (double)v14;
    __cxa_guard_release(&qword_255795560);
  }
  v16[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v16[1] = 2;
  LOBYTE(v17) = 0;
  v19 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v17 = *a2;
    v18 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v19 = 1;
  }
  v20 = 0;
  v21 = 0;
  v22 = *a3;
  v23 = 1;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v10 = operator new();
  sub_223704A70(v10, a1, (uint64_t)v16);
  info = 0;
  *a4 = &off_24EC6A3B8;
  a4[1] = v10;
  v11 = (_QWORD *)operator new();
  *v11 = &off_24EC6A4B0;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v10;
  a4[2] = v11;
  return sub_2231AD66C((uint64_t)v16);
}

void sub_2237049EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_223704A04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD *);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2231C35FC((_QWORD **)va);
  sub_2231AD66C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_223704A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x227684CE8](v3, 0x10F3C4035895BD5);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223704A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223704A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v14;
  _OWORD v15[2];
  uint64_t (**v16)();
  uint64_t v17;
  std::__shared_weak_count *v18;

  v16 = &off_24EC1F958;
  sub_223704C04(a2, (uint64_t)&v17);
  sub_2231F9F68((uint64_t)&v16, (uint64_t)&v14);
  v5 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_QWORD *)a1 = &off_24EC21AC8;
  *(_QWORD *)(a1 + 8) = &off_24EC219D8;
  v8 = v14;
  v9 = v15[0];
  v14 = 0uLL;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = v9;
  *(_OWORD *)(a1 + 46) = *(_OWORD *)((char *)v15 + 14);
  sub_2231AB0FC(a1 + 64, a3);
  *(_QWORD *)a1 = &off_24EC21A48;
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_QWORD *)a1 = &off_24EC6A528;
  return a1;
}

void sub_223704BA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  v5 = *(std::__shared_weak_count **)(v2 + 24);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_2231C37EC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223704BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_22319B358((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_223704C04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v17, v4);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17);
  v10 = v17;
  if (v17)
  {
    result = (_QWORD *)operator new();
    v12 = v17;
    *result = &off_24EC20DE8;
    result[1] = 0;
    result[2] = 0;
    result[3] = v12;
  }
  else
  {
    result = 0;
  }
  if (*(_BYTE *)(a1 + 28))
    v13 = *(unsigned int *)(a1 + 24) | 0x100000000;
  else
    v13 = 0;
  v14 = *(_QWORD *)(a1 + 92);
  v15 = *(_DWORD *)(a1 + 108);
  v16 = *(_WORD *)(a1 + 128);
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 16) = v13;
  *(_QWORD *)(a2 + 24) = v14;
  *(_DWORD *)(a2 + 32) = v15;
  *(_QWORD *)(a2 + 40) = v9;
  *(_DWORD *)(a2 + 48) = 21;
  *(_WORD *)(a2 + 52) = v16;
  return result;
}

void sub_223704D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223704D40(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 __p;
  char v14;
  char v15;
  _QWORD v16[2];
  std::__shared_weak_count *v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    LOBYTE(__p) = 0;
    v15 = 0;
    sub_223704E54(a3, &__p, a4, v16);
    sub_2231AA5A4(a1, v8, (uint64_t)v16);
    v9 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (v15 && v14 < 0)
      operator delete((void *)__p);
  }
  return a1;
}

void sub_223704E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  sub_2241231D8((uint64_t)&a18);
  if (a16)
  {
    if (a15 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223704E54@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v13;
  unint64_t v14;
  mach_timebase_info info;
  _QWORD v16[2];
  __int128 v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v13) = info.numer;
    LODWORD(v14) = info.denom;
    *(double *)&qword_255795558 = (double)v13 / (double)v14;
    __cxa_guard_release(&qword_255795560);
  }
  v16[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v16[1] = 2;
  LOBYTE(v17) = 0;
  v19 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v17 = *a2;
    v18 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v19 = 1;
  }
  v20 = 0;
  v21 = 0;
  v22 = *a3;
  v23 = 1;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v10 = operator new();
  sub_223705084(v10, a1, (uint64_t)v16);
  info = 0;
  *a4 = &off_24EC6A3B8;
  a4[1] = v10;
  v11 = (_QWORD *)operator new();
  *v11 = &off_24EC6A4B0;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v10;
  a4[2] = v11;
  return sub_2231AD66C((uint64_t)v16);
}

void sub_223705000(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_223705018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD *);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2231C35FC((_QWORD **)va);
  sub_2231AD66C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_223705044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x227684CE8](v3, 0x10F3C4035895BD5);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223705070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223705084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v14;
  _OWORD v15[2];
  uint64_t (**v16)();
  uint64_t v17;
  std::__shared_weak_count *v18;

  v16 = &off_24EC1F958;
  sub_2231FB274(a2, (uint64_t)&v17);
  sub_2231F9F68((uint64_t)&v16, (uint64_t)&v14);
  v5 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_QWORD *)a1 = &off_24EC21AC8;
  *(_QWORD *)(a1 + 8) = &off_24EC219D8;
  v8 = v14;
  v9 = v15[0];
  v14 = 0uLL;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = v9;
  *(_OWORD *)(a1 + 46) = *(_OWORD *)((char *)v15 + 14);
  sub_2231AB0FC(a1 + 64, a3);
  *(_QWORD *)a1 = &off_24EC21A48;
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_QWORD *)a1 = &off_24EC6A528;
  return a1;
}

void sub_2237051B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  v5 = *(std::__shared_weak_count **)(v2 + 24);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_2231C37EC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223705204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_22319B358((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223705218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  std::__shared_weak_count *v19;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v17 = 1;
    sub_223427540(a3, (__int128 *)__p, a5, v18);
    sub_2231AA5A4(a1, v10, (uint64_t)v18);
    v11 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v17 && SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_22370531C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223705350(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  std::__shared_weak_count *v19;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v17 = 1;
    sub_223705488(a3, (__int128 *)__p, a5, v18);
    sub_2231AA5A4(a1, v10, (uint64_t)v18);
    v11 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v17 && SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_223705454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223705488@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v13;
  unint64_t v14;
  mach_timebase_info info;
  void *__p;
  void *v17;
  _QWORD *v18;
  _QWORD v19[2];
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v13) = info.numer;
    LODWORD(v14) = info.denom;
    *(double *)&qword_255795558 = (double)v13 / (double)v14;
    __cxa_guard_release(&qword_255795560);
  }
  v19[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v19[1] = 2;
  LOBYTE(v20) = 0;
  v22 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v20 = *a2;
    v21 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v22 = 1;
  }
  v23 = 0;
  v24 = 0;
  v25 = *a3;
  v26 = 1;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v10 = *a1;
  LOBYTE(info.numer) = 12;
  v17 = 0;
  v18 = 0;
  __p = 0;
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = v10;
  v17 = v11 + 1;
  v18 = v11 + 1;
  sub_2231AA8F0((char *)&info, (uint64_t)v19, a4);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  return sub_2231AD66C((uint64_t)v19);
}

void sub_223705624(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_22370563C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    operator delete(__p);
    sub_2231AD66C((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_2231AD66C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_223705674(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  std::__shared_weak_count *v19;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v17 = 1;
    sub_2237057AC(a3, (__int128 *)__p, a5, v18);
    sub_2231AA5A4(a1, v10, (uint64_t)v18);
    v11 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v17 && SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_223705778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2237057AC@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v13;
  unint64_t v14;
  mach_timebase_info info;
  void *__p;
  void *v17;
  _QWORD *v18;
  _QWORD v19[2];
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v13) = info.numer;
    LODWORD(v14) = info.denom;
    *(double *)&qword_255795558 = (double)v13 / (double)v14;
    __cxa_guard_release(&qword_255795560);
  }
  v19[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v19[1] = 2;
  LOBYTE(v20) = 0;
  v22 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v20 = *a2;
    v21 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v22 = 1;
  }
  v23 = 0;
  v24 = 0;
  v25 = *a3;
  v26 = 1;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v10 = *a1;
  LOBYTE(info.numer) = 3;
  v17 = 0;
  v18 = 0;
  __p = 0;
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = v10;
  v17 = v11 + 1;
  v18 = v11 + 1;
  sub_2231AA8F0((char *)&info, (uint64_t)v19, a4);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  return sub_2231AD66C((uint64_t)v19);
}

void sub_223705940(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_223705958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    operator delete(__p);
    sub_2231AD66C((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_2231AD66C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

int64_t sub_223705990@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  BOOL v12;
  _BOOL4 v13;
  char *v15;
  char *i;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  _BOOL4 v20;
  uint64_t v22;
  uint64_t v23;
  int64_t result;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE *v33;
  _BYTE *v34;
  int64_t v35;
  char *v36;
  char *v37;

  v4 = (_BYTE *)a1[256];
  v5 = (_BYTE *)a1[257];
  v6 = v5 - v4;
  if (v5 == v4)
  {
    v7 = 0;
    v8 = 0;
    v15 = 0;
  }
  else
  {
    if (v6 < 0)
      sub_22316E078();
    v7 = (char *)operator new(v5 - v4);
    v8 = &v7[16 * (v6 >> 4)];
    memmove(v7, v4, v6);
    v9 = a1[235];
    if (a1[234] == v9)
    {
      v10 = &v7[v6 & 0xFFFFFFFFFFFFFFF0];
    }
    else
    {
      v10 = v7;
LABEL_5:
      v11 = a1[234];
      while (1)
      {
        v12 = *(_QWORD *)v11 == *(_QWORD *)v10 && *(_QWORD *)(v11 + 8) == *((_QWORD *)v10 + 1);
        v13 = !v12;
        if (!v13 && *(_BYTE *)(v11 + 241) != 1)
          break;
        v11 += 248;
        if (v11 == v9)
        {
          v10 += 16;
          if (v10 != v8)
            goto LABEL_5;
          goto LABEL_43;
        }
      }
    }
    if (v10 == v8)
      goto LABEL_43;
    for (i = v10 + 16; i != v8; i += 16)
    {
      v17 = a1[234];
      v18 = a1[235];
      if (v17 == v18)
      {
LABEL_24:
        *(_OWORD *)v10 = *(_OWORD *)i;
        v10 += 16;
      }
      else
      {
        while (1)
        {
          v19 = *(_QWORD *)v17 == *(_QWORD *)i && *(_QWORD *)(v17 + 8) == *((_QWORD *)i + 1);
          v20 = !v19;
          if (!v20 && *(_BYTE *)(v17 + 241) != 1)
            break;
          v17 += 248;
          if (v17 == v18)
            goto LABEL_24;
        }
      }
    }
    if (v10 == v8)
LABEL_43:
      v15 = v8;
    else
      v15 = v10;
  }
  *a2 = v7;
  a2[1] = v15;
  a2[3] = 0;
  a2[2] = v8;
  a2[4] = 0;
  a2[5] = 0;
  v22 = a1[237];
  v23 = a1[238];
  result = v23 - v22;
  if (v23 != v22)
  {
    v25 = 0xCF3CF3CF3CF3CF3DLL * (result >> 2);
    if (v25 >= 0x30C30C30C30C30DLL)
      sub_22316E078();
    result = (int64_t)operator new(result);
    v26 = 0;
    a2[3] = result;
    a2[4] = result;
    a2[5] = result + 84 * v25;
    do
    {
      v27 = v22 + v26;
      v28 = result + v26;
      v29 = *(_OWORD *)(v22 + v26);
      *(_BYTE *)(v28 + 16) = *(_BYTE *)(v22 + v26 + 16);
      *(_OWORD *)v28 = v29;
      v30 = *(_OWORD *)(v22 + v26 + 20);
      v31 = *(_OWORD *)(v22 + v26 + 36);
      v32 = *(_OWORD *)(v22 + v26 + 52);
      *(_OWORD *)(v28 + 68) = *(_OWORD *)(v22 + v26 + 68);
      *(_OWORD *)(v28 + 52) = v32;
      *(_OWORD *)(v28 + 36) = v31;
      *(_OWORD *)(v28 + 20) = v30;
      v26 += 84;
    }
    while (v27 + 84 != v23);
    a2[4] = result + v26;
  }
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  v33 = (_BYTE *)a1[253];
  v34 = (_BYTE *)a1[254];
  v35 = v34 - v33;
  if (v34 != v33)
  {
    if (v35 < 0)
      sub_22316E078();
    v36 = (char *)operator new(v34 - v33);
    a2[6] = v36;
    a2[7] = v36;
    v37 = &v36[16 * (v35 >> 4)];
    a2[8] = v37;
    result = (int64_t)memcpy(v36, v33, v35);
    a2[7] = v37;
  }
  return result;
}

void sub_223705C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void **v12;
  void **v13;
  void *v15;
  void *v16;
  void *v17;

  v15 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v11 + 56) = v15;
    operator delete(v15);
    v16 = *v12;
    if (!*v12)
    {
LABEL_3:
      v17 = *(void **)v11;
      if (!*(_QWORD *)v11)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      *(_QWORD *)(v11 + 8) = v17;
      operator delete(v17);
      goto LABEL_8;
    }
  }
  else
  {
    v16 = *v12;
    if (!*v12)
      goto LABEL_3;
  }
  *(_QWORD *)(v11 + 32) = v16;
  operator delete(v16);
  v17 = *(void **)v11;
  if (!*(_QWORD *)v11)
    goto LABEL_8;
  goto LABEL_7;
}

_QWORD *sub_223705CA8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = *result;
  v4 = result[1];
  if (*result != v4)
  {
    while (*(_BYTE *)(v3 + 241) == 1)
    {
      v3 += 248;
      if (v3 == v4)
      {
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        return result;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (v3 != v4)
  {
    v5 = 0;
    v6 = v3;
LABEL_8:
    v7 = v5++;
    while (1)
    {
      v6 += 248;
      if (v6 == v4)
        break;
      if (*(_BYTE *)(v6 + 241) != 1)
      {
        if (v6 != v4)
          goto LABEL_8;
        break;
      }
    }
    if (v7 >= 0x108421084210842)
      sub_22316E078();
    result = operator new(248 * v5);
    *a2 = result;
    a2[1] = result;
    a2[2] = &result[31 * v5];
    while (2)
    {
      *(_OWORD *)result = *(_OWORD *)v3;
      v8 = *(_QWORD *)(v3 + 24);
      result[2] = *(_QWORD *)(v3 + 16);
      result[3] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = *(_OWORD *)(v3 + 32);
      v12 = *(_OWORD *)(v3 + 48);
      v13 = *(_OWORD *)(v3 + 80);
      *((_OWORD *)result + 4) = *(_OWORD *)(v3 + 64);
      *((_OWORD *)result + 5) = v13;
      *((_OWORD *)result + 2) = v11;
      *((_OWORD *)result + 3) = v12;
      *((_OWORD *)result + 6) = *(_OWORD *)(v3 + 96);
      v14 = *(_OWORD *)(v3 + 112);
      v15 = *(_OWORD *)(v3 + 128);
      v16 = *(_OWORD *)(v3 + 160);
      *((_OWORD *)result + 9) = *(_OWORD *)(v3 + 144);
      *((_OWORD *)result + 10) = v16;
      *((_OWORD *)result + 7) = v14;
      *((_OWORD *)result + 8) = v15;
      v17 = *(_OWORD *)(v3 + 176);
      v18 = *(_OWORD *)(v3 + 192);
      v19 = *(_OWORD *)(v3 + 224);
      *((_OWORD *)result + 13) = *(_OWORD *)(v3 + 208);
      *((_OWORD *)result + 14) = v19;
      *((_OWORD *)result + 11) = v17;
      *((_OWORD *)result + 12) = v18;
      *((_WORD *)result + 120) = *(_WORD *)(v3 + 240);
      do
      {
        v3 += 248;
        if (v3 == v4)
        {
          result += 31;
          goto LABEL_23;
        }
      }
      while (*(_BYTE *)(v3 + 241) == 1);
      result += 31;
      if (v3 != v4)
        continue;
      break;
    }
LABEL_23:
    a2[1] = result;
  }
  return result;
}

void sub_223705E2C(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 28);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 248;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_223705EA8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  void **v13;
  void **v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  void **v21;
  void **v22;
  void *v23;
  void *v24;
  void **v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  int64x2_t v32;
  int64x2_t v33;
  void **v34;
  int8x8_t *v35;
  int8x8_t *v36;
  unint64_t v37;
  unint64_t v39;
  int8x8_t v40;
  int8x8_t v41;
  int8x8_t v42;
  int8x8_t v43;
  int8x8_t *v44;
  uint64_t v45;
  const double *v46;
  uint64_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  const double *v56;
  int8x16_t v57;
  uint64_t v58;
  int8x16_t v59;
  uint64_t v60;
  int8x16_t v61;
  uint64_t v62;
  int8x16_t v63;
  uint64_t v64;
  int8x8_t v65;
  int8x8_t v66;
  void **v68;
  void **v69;
  void **v70;
  void *v71;
  double *v72;
  char *v73;
  unint64_t v74;
  int8x8_t v75;
  int8x8_t v76;
  int8x8_t v77;
  int8x8_t v78;
  int8x8_t *v79;
  uint64_t v80;
  const double *v81;
  uint64_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  const double *v91;
  int8x16_t v92;
  uint64_t v93;
  int8x16_t v94;
  uint64_t v95;
  int8x16_t v96;
  uint64_t v97;
  int8x16_t v98;
  uint64_t v99;
  int8x8_t v100;
  int8x8_t v101;
  void *v103;
  void **v104;
  void *v105;
  void *v106;
  unsigned __int8 v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v112;
  uint64_t v113;
  size_t v114;
  const char *v115;
  uint64_t v116;
  void **v117;
  char *v118;
  char *v119;
  void *v120;
  char *v121;
  void *v122;
  void *v123;
  unsigned __int8 v124;
  const char *v125;
  size_t v126;
  _BYTE *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void **v132;
  uint64_t v133;
  uint64_t v134;
  NSObject *v135;
  size_t v136;
  std::__shared_weak_count_vtbl *v137;
  std::__shared_weak_count *v138;
  size_t v139;
  size_t v140;
  void *p_dst;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  char v146;
  _QWORD *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *p_shared_owners;
  unint64_t v151;
  void *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  void *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  void *v195;
  void *v196;
  void **v197;
  void **v198;
  void **v199;
  void *v200;
  void *v201;
  int64x2_t v202;
  uint64_t v203;
  int64x2_t v204;
  unint64_t v205;
  uint64_t v206;
  void *v207[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v209;
  const char *v210;
  int v211;
  const char *v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  uint64_t v215;
  void *v216;
  void **v217;
  char *v218;
  void *__p[2];
  std::__shared_weak_count *v220;
  char *v221;
  std::__shared_weak_count *v222;
  void *__dst;
  __int128 v224;
  char __s[8];
  void **v226;
  char *v227;
  _BYTE v228[24];
  __int128 v229;
  void *v230[2];
  unint64_t v231;
  char v232;
  _QWORD v233[5];
  float64x2x2_t v234;
  float64x2x2_t v235;
  float64x2x2_t v236;
  float64x2x2_t v237;

  v233[2] = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 4);
  if (!v3)
    return;
  v4 = a3;
  v5 = *(_QWORD *)(a2 + 208);
  if (0x21CFB2B78C13521DLL * ((*(_QWORD *)(a2 + 216) - v5) >> 3) <= a3)
    return;
  v206 = *(_QWORD *)(a2 + 208);
  v203 = v5 + 424 * a3;
  sub_223EB3184((__int16 **)(v203 + 264), v3 == 2, (uint64_t)&__dst, 16.0);
  v226 = 0;
  v227 = 0;
  *(_QWORD *)__s = 0;
  sub_2232EA6AC((uint64_t)__s, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v224 - (_QWORD)__dst) >> 3));
  v6 = __dst;
  v7 = (_QWORD *)v224;
  if (__dst == (void *)v224)
  {
    v25 = *(void ***)__s;
    v8 = v226;
    v216 = *(void **)__s;
    v217 = v226;
    v218 = v227;
    if (__dst)
      goto LABEL_30;
  }
  else
  {
    do
    {
      v9 = v6[2];
      v10 = *(_OWORD *)v6;
      v6[1] = 0;
      v6[2] = 0;
      *v6 = 0;
      *(_OWORD *)v207 = v10;
      rep = v9;
      __p[0] = 0;
      __p[1] = 0;
      v220 = 0;
      sub_223ED182C((char **)v207, (unsigned int **)__p, (uint64_t)v228, 1.5);
      v11 = *(_OWORD *)v228;
      v12 = *(void **)&v228[16];
      memset(v228, 0, sizeof(v228));
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v207[0])
      {
        v207[1] = v207[0];
        operator delete(v207[0]);
      }
      v13 = v226;
      if (v226 < (void **)v227)
      {
        *v226 = (void *)v11;
        v13[1] = (void *)*((_QWORD *)&v11 + 1);
        v8 = v13 + 3;
        v13[2] = v12;
      }
      else
      {
        v14 = *(void ***)__s;
        v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v226 - *(_QWORD *)__s) >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_22316E078();
        if (0x5555555555555556 * ((uint64_t)&v227[-*(_QWORD *)__s] >> 3) > v16)
          v16 = 0x5555555555555556 * ((uint64_t)&v227[-*(_QWORD *)__s] >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v227[-*(_QWORD *)__s] >> 3) >= 0x555555555555555)
          v17 = 0xAAAAAAAAAAAAAAALL;
        else
          v17 = v16;
        if (v17 > 0xAAAAAAAAAAAAAAALL)
          sub_223174E94();
        v18 = (char *)operator new(24 * v17);
        v19 = &v18[24 * v15];
        *(_OWORD *)v19 = v11;
        *((_QWORD *)v19 + 2) = v12;
        v8 = (void **)(v19 + 24);
        if (v13 == v14)
        {
          *(_QWORD *)__s = &v18[24 * v15];
          v226 = (void **)(v19 + 24);
          v227 = &v18[24 * v17];
        }
        else
        {
          do
          {
            v20 = *(_OWORD *)(v13 - 3);
            v13 -= 3;
            *(_OWORD *)(v19 - 24) = v20;
            v19 -= 24;
            *((_QWORD *)v19 + 2) = v13[2];
            *v13 = 0;
            v13[1] = 0;
            v13[2] = 0;
          }
          while (v13 != v14);
          v13 = *(void ***)__s;
          v21 = v226;
          *(_QWORD *)__s = v19;
          v226 = v8;
          v227 = &v18[24 * v17];
          if (v21 != v13)
          {
            v22 = v21;
            do
            {
              v24 = *(v22 - 3);
              v22 -= 3;
              v23 = v24;
              if (v24)
              {
                *(v21 - 2) = v23;
                operator delete(v23);
              }
              v21 = v22;
            }
            while (v22 != v13);
          }
        }
        if (v13)
          operator delete(v13);
      }
      v226 = v8;
      v6 += 3;
    }
    while (v6 != v7);
    v6 = __dst;
    v25 = *(void ***)__s;
    v216 = *(void **)__s;
    v217 = v8;
    v218 = v227;
    if (__dst)
    {
LABEL_30:
      v26 = (_QWORD *)v224;
      v27 = v6;
      if ((_QWORD *)v224 != v6)
      {
        v28 = (_QWORD *)v224;
        do
        {
          v30 = (void *)*(v28 - 3);
          v28 -= 3;
          v29 = v30;
          if (v30)
          {
            *(v26 - 2) = v29;
            operator delete(v29);
          }
          v26 = v28;
        }
        while (v28 != v6);
        v27 = __dst;
      }
      *(_QWORD *)&v224 = v6;
      operator delete(v27);
      v25 = (void **)v216;
      v8 = v217;
      v31 = v206;
      if (v216 == v217)
        goto LABEL_99;
      goto LABEL_40;
    }
  }
  v31 = v206;
  if (v25 == v8)
    goto LABEL_99;
LABEL_40:
  v32 = vdupq_n_s64(0x8000000000000000);
  v33 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v34 = v25;
  while (1)
  {
    v36 = (int8x8_t *)*v34;
    v35 = (int8x8_t *)v34[1];
    v37 = (char *)v35 - (_BYTE *)*v34;
    if (v37 < 0x30 || v36 == v35)
      break;
    v39 = v37 - 16;
    if (v39 >= 0x30)
    {
      v45 = (v39 >> 4) + 1;
      v44 = &v36[2 * (v45 & 0x1FFFFFFFFFFFFFFCLL)];
      v46 = (const double *)&v36[4];
      v47 = v45 & 0x1FFFFFFFFFFFFFFCLL;
      v48 = v33;
      v49 = v33;
      v50 = v33;
      v51 = v33;
      v52 = v32;
      v53 = v32;
      v54 = v32;
      v55 = v32;
      do
      {
        v56 = v46 - 4;
        v235 = vld2q_f64(v56);
        v237 = vld2q_f64(v46);
        v48 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v48, (int64x2_t)v235.val[0]), (int8x16_t)v235.val[0], (int8x16_t)v48);
        v49 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v49, (int64x2_t)v237.val[0]), (int8x16_t)v237.val[0], (int8x16_t)v49);
        v54 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v235.val[0], v54), (int8x16_t)v235.val[0], (int8x16_t)v54);
        v55 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v237.val[0], v55), (int8x16_t)v237.val[0], (int8x16_t)v55);
        v50 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v50, (int64x2_t)v235.val[1]), (int8x16_t)v235.val[1], (int8x16_t)v50);
        v51 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v51, (int64x2_t)v237.val[1]), (int8x16_t)v237.val[1], (int8x16_t)v51);
        v52 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v235.val[1], v52), (int8x16_t)v235.val[1], (int8x16_t)v52);
        v53 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v237.val[1], v53), (int8x16_t)v237.val[1], (int8x16_t)v53);
        v46 += 8;
        v47 -= 4;
      }
      while (v47);
      v57 = vbslq_s8((int8x16_t)vcgtq_s64(v54, v55), (int8x16_t)v54, (int8x16_t)v55);
      v58 = vextq_s8(v57, v57, 8uLL).u64[0];
      v43 = vbsl_s8((int8x8_t)vcgtd_s64(v57.i64[0], v58), *(int8x8_t *)v57.i8, (int8x8_t)v58);
      v59 = vbslq_s8((int8x16_t)vcgtq_s64(v52, v53), (int8x16_t)v52, (int8x16_t)v53);
      v60 = vextq_s8(v59, v59, 8uLL).u64[0];
      v40 = vbsl_s8((int8x8_t)vcgtd_s64(v59.i64[0], v60), *(int8x8_t *)v59.i8, (int8x8_t)v60);
      v61 = vbslq_s8((int8x16_t)vcgtq_s64(v51, v50), (int8x16_t)v50, (int8x16_t)v51);
      v62 = vextq_s8(v61, v61, 8uLL).u64[0];
      v42 = vbsl_s8((int8x8_t)vcgtd_s64(v62, v61.i64[0]), *(int8x8_t *)v61.i8, (int8x8_t)v62);
      v63 = vbslq_s8((int8x16_t)vcgtq_s64(v49, v48), (int8x16_t)v48, (int8x16_t)v49);
      v64 = vextq_s8(v63, v63, 8uLL).u64[0];
      v41 = vbsl_s8((int8x8_t)vcgtd_s64(v64, v63.i64[0]), *(int8x8_t *)v63.i8, (int8x8_t)v64);
      if (v45 == (v45 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_59;
    }
    else
    {
      v40 = (int8x8_t)0x8000000000000000;
      v41 = (int8x8_t)0x7FFFFFFFFFFFFFFFLL;
      v42 = (int8x8_t)0x7FFFFFFFFFFFFFFFLL;
      v43 = (int8x8_t)0x8000000000000000;
      v44 = (int8x8_t *)*v34;
    }
    do
    {
      v65 = *v44;
      v66 = v44[1];
      v44 += 2;
      if (*(_QWORD *)&v65 < *(_QWORD *)&v41)
        v41 = v65;
      if (*(_QWORD *)&v65 > *(_QWORD *)&v43)
        v43 = v65;
      if (*(_QWORD *)&v66 < *(_QWORD *)&v42)
        v42 = v66;
      if (*(_QWORD *)&v66 > *(_QWORD *)&v40)
        v40 = v66;
    }
    while (v44 != v35);
LABEL_59:
    if ((uint64_t)(*(_QWORD *)&v43 - *(_QWORD *)&v41) < 4 || *(_QWORD *)&v40 - *(_QWORD *)&v42 < 4)
      break;
    v34 += 3;
    if (v34 == v8)
      goto LABEL_108;
  }
  if (v34 == v8)
    goto LABEL_108;
  v68 = v34 + 3;
  if (v34 + 3 == v8)
  {
    v69 = v34;
    if (v34 == v8)
      goto LABEL_108;
LABEL_93:
    if (v8 != v69)
    {
      v104 = v8;
      do
      {
        v106 = *(v104 - 3);
        v104 -= 3;
        v105 = v106;
        if (v106)
        {
          *(v8 - 2) = v105;
          operator delete(v105);
        }
        v8 = v104;
      }
      while (v104 != v69);
    }
    v217 = v69;
    v25 = (void **)v216;
    v31 = v206;
    if (v216 != v69)
      goto LABEL_109;
    goto LABEL_99;
  }
  v204 = vdupq_n_s64(0x8000000000000000);
  v202 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v69 = v34;
  while (2)
  {
    v70 = v34;
    v34 = v68;
    v72 = (double *)v70[3];
    v71 = v70[4];
    if ((unint64_t)((_BYTE *)v71 - (_BYTE *)v72) >= 0x30)
    {
      v73 = (char *)v34[1];
      if (v72 != (double *)v73)
      {
        v74 = v73 - (char *)v72 - 16;
        if (v74 >= 0x30)
        {
          v80 = (v74 >> 4) + 1;
          v79 = (int8x8_t *)&v72[2 * (v80 & 0x1FFFFFFFFFFFFFFCLL)];
          v81 = v72 + 4;
          v82 = v80 & 0x1FFFFFFFFFFFFFFCLL;
          v83 = v202;
          v84 = v202;
          v85 = v202;
          v86 = v202;
          v87 = v204;
          v88 = v204;
          v89 = v204;
          v90 = v204;
          do
          {
            v91 = v81 - 4;
            v234 = vld2q_f64(v91);
            v236 = vld2q_f64(v81);
            v84 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v84, (int64x2_t)v234.val[0]), (int8x16_t)v234.val[0], (int8x16_t)v84);
            v85 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v85, (int64x2_t)v236.val[0]), (int8x16_t)v236.val[0], (int8x16_t)v85);
            v90 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v234.val[0], v90), (int8x16_t)v234.val[0], (int8x16_t)v90);
            v87 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v236.val[0], v87), (int8x16_t)v236.val[0], (int8x16_t)v87);
            v86 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v86, (int64x2_t)v234.val[1]), (int8x16_t)v234.val[1], (int8x16_t)v86);
            v83 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v83, (int64x2_t)v236.val[1]), (int8x16_t)v236.val[1], (int8x16_t)v83);
            v88 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v234.val[1], v88), (int8x16_t)v234.val[1], (int8x16_t)v88);
            v89 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v236.val[1], v89), (int8x16_t)v236.val[1], (int8x16_t)v89);
            v81 += 8;
            v82 -= 4;
          }
          while (v82);
          v92 = vbslq_s8((int8x16_t)vcgtq_s64(v90, v87), (int8x16_t)v90, (int8x16_t)v87);
          v93 = vextq_s8(v92, v92, 8uLL).u64[0];
          v78 = vbsl_s8((int8x8_t)vcgtd_s64(v92.i64[0], v93), *(int8x8_t *)v92.i8, (int8x8_t)v93);
          v94 = vbslq_s8((int8x16_t)vcgtq_s64(v88, v89), (int8x16_t)v88, (int8x16_t)v89);
          v95 = vextq_s8(v94, v94, 8uLL).u64[0];
          v75 = vbsl_s8((int8x8_t)vcgtd_s64(v94.i64[0], v95), *(int8x8_t *)v94.i8, (int8x8_t)v95);
          v96 = vbslq_s8((int8x16_t)vcgtq_s64(v83, v86), (int8x16_t)v86, (int8x16_t)v83);
          v97 = vextq_s8(v96, v96, 8uLL).u64[0];
          v77 = vbsl_s8((int8x8_t)vcgtd_s64(v97, v96.i64[0]), *(int8x8_t *)v96.i8, (int8x8_t)v97);
          v98 = vbslq_s8((int8x16_t)vcgtq_s64(v85, v84), (int8x16_t)v84, (int8x16_t)v85);
          v99 = vextq_s8(v98, v98, 8uLL).u64[0];
          v76 = vbsl_s8((int8x8_t)vcgtd_s64(v99, v98.i64[0]), *(int8x8_t *)v98.i8, (int8x8_t)v99);
          if (v80 != (v80 & 0x1FFFFFFFFFFFFFFCLL))
            goto LABEL_77;
        }
        else
        {
          v75 = (int8x8_t)0x8000000000000000;
          v76 = (int8x8_t)0x7FFFFFFFFFFFFFFFLL;
          v77 = (int8x8_t)0x7FFFFFFFFFFFFFFFLL;
          v78 = (int8x8_t)0x8000000000000000;
          v79 = (int8x8_t *)v70[3];
          do
          {
LABEL_77:
            v100 = *v79;
            v101 = v79[1];
            v79 += 2;
            if (*(_QWORD *)&v100 < *(_QWORD *)&v76)
              v76 = v100;
            if (*(_QWORD *)&v100 > *(_QWORD *)&v78)
              v78 = v100;
            if (*(_QWORD *)&v101 < *(_QWORD *)&v77)
              v77 = v101;
            if (*(_QWORD *)&v101 > *(_QWORD *)&v75)
              v75 = v101;
          }
          while (v79 != (int8x8_t *)v73);
        }
        if ((uint64_t)(*(_QWORD *)&v78 - *(_QWORD *)&v76) >= 4 && *(_QWORD *)&v75 - *(_QWORD *)&v77 >= 4)
        {
          v103 = *v69;
          if (*v69)
          {
            v69[1] = v103;
            operator delete(v103);
            *v69 = 0;
            v69[1] = 0;
            v69[2] = 0;
            v72 = (double *)*v34;
            v71 = v70[4];
          }
          v31 = v206;
          *v69 = v72;
          v69[1] = v71;
          v69[2] = v70[5];
          *v34 = 0;
          v34[1] = 0;
          v34[2] = 0;
          v69 += 3;
        }
      }
    }
    v68 = v34 + 3;
    if (v34 + 3 != v8)
      continue;
    break;
  }
  v25 = (void **)v216;
  v8 = v217;
  if (v69 != v217)
    goto LABEL_93;
LABEL_108:
  v69 = v8;
  if (v25 == v8)
  {
LABEL_99:
    v107 = atomic_load((unsigned __int8 *)&qword_2540CC0F0);
    if ((v107 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC0F0))
    {
      sub_22455F53C(v207);
      sub_223174DE4(v228, "cv3d.recon.kfplanes");
      sub_2232300E0((uint64_t **)v207, (uint64_t)v228, &qword_2540CC0E8);
      if ((v228[23] & 0x80000000) != 0)
        operator delete(*(void **)v228);
      __cxa_guard_release(&qword_2540CC0F0);
    }
    v215 = qword_2540CC0E8;
    if (**(int **)(qword_2540CC0E8 + 56) > 3)
      goto LABEL_232;
    v108 = *(unsigned __int8 *)(qword_2540CC0E8 + 72);
    v109 = sub_22322F254(qword_2540CC0E8, "OSLogSurrogateAppender", 1, 0);
    v110 = v109;
    if (!v108 && v109 == 0)
      goto LABEL_232;
    v207[0] = &v215;
    v207[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v209 = 3;
    v210 = "unknown file";
    v211 = 83;
    v213 = 0;
    v214 = 0;
    v212 = "unknown function";
    sub_2245664AC((unsigned __int8 *)v203, __s);
    v112 = *(_QWORD *)v207[0];
    v113 = *(_QWORD *)v207[0] + 16;
    if (*(char *)(*(_QWORD *)v207[0] + 39) < 0)
    {
      v115 = *(const char **)(v112 + 16);
      v114 = *(_QWORD *)(v112 + 24);
    }
    else
    {
      v114 = *(unsigned __int8 *)(*(_QWORD *)v207[0] + 39);
      v115 = (const char *)(*(_QWORD *)v207[0] + 16);
    }
    v205 = v4;
    v124 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v124 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v228);
      sub_223199C58("com.apple.cv3d", (unint64_t)v228, &xmmword_255788F40);
      if ((_BYTE)v229 && (v228[23] & 0x80000000) != 0)
        operator delete(*(void **)v228);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v125 = (const char *)&xmmword_255788F40;
    else
      v125 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v126 = byte_255788F57;
    else
      v126 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)v228 = os_log_create(v125, v115);
    v127 = &v228[8];
    if (v126 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v126 >= 0x17)
    {
      v128 = v108;
      v129 = v113;
      v130 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v126 | 7) != 0x17)
        v130 = v126 | 7;
      v131 = v130 + 1;
      v127 = operator new(v130 + 1);
      *(_QWORD *)&v228[16] = v126;
      *(_QWORD *)&v229 = v131 | 0x8000000000000000;
      *(_QWORD *)&v228[8] = v127;
      v113 = v129;
      v108 = v128;
    }
    else
    {
      BYTE7(v229) = v126;
      if (!v126)
      {
LABEL_136:
        v127[v126] = 0;
        BYTE8(v229) = 1;
        v132 = v230;
        if (v114 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v114 >= 0x17)
        {
          v133 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v114 | 7) != 0x17)
            v133 = v114 | 7;
          v134 = v133 + 1;
          v132 = (void **)operator new(v133 + 1);
          v230[1] = (void *)v114;
          v231 = v134 | 0x8000000000000000;
          v230[0] = v132;
        }
        else
        {
          HIBYTE(v231) = v114;
          if (!v114)
          {
LABEL_144:
            *((_BYTE *)v132 + v114) = 0;
            v232 = 1;
            v135 = *(NSObject **)v228;
            if (SHIBYTE(v231) < 0)
              operator delete(v230[0]);
            v4 = v205;
            if (BYTE8(v229) && SBYTE7(v229) < 0)
              operator delete(*(void **)&v228[8]);
            if (*(_QWORD *)v228)
              os_release(*(void **)v228);
            if (!v110 || !*(_QWORD *)(v110 + 24))
            {
              os_log_type_enabled(v135, OS_LOG_TYPE_INFO);
              *(_QWORD *)v228 = 0xD04100202;
              *(_WORD *)&v228[8] = 2080;
              *(_QWORD *)&v228[10] = __s;
              v142 = (void *)_os_log_send_and_compose_impl();
              if (v142)
                free(v142);
              goto LABEL_225;
            }
            v136 = _os_log_pack_size();
            v137 = (std::__shared_weak_count_vtbl *)operator new(v136, (std::align_val_t)8uLL);
            v138 = (std::__shared_weak_count *)operator new();
            v138->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v138->__shared_owners_ = 0;
            v138->__shared_weak_owners_ = 0;
            v138[1].__vftable = v137;
            __p[0] = v137;
            __p[1] = v137;
            v221 = 0;
            v222 = 0;
            v220 = v138;
            v139 = strlen(__s);
            if (v139 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v140 = v139;
            if (v139 >= 0x17)
            {
              v143 = (v139 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v139 | 7) != 0x17)
                v143 = v139 | 7;
              v144 = v143 + 1;
              p_dst = operator new(v143 + 1);
              *(_QWORD *)&v224 = v140;
              *((_QWORD *)&v224 + 1) = v144 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v224) = v139;
              p_dst = &__dst;
              if (!v139)
              {
LABEL_163:
                *((_BYTE *)p_dst + v140) = 0;
                v145 = __dst;
                v233[0] = v224;
                *(_QWORD *)((char *)v233 + 7) = *(_QWORD *)((char *)&v224 + 7);
                v146 = HIBYTE(v224);
                v147 = operator new(0x38uLL);
                v147[1] = 0;
                v147[2] = 0;
                v147[3] = off_24EC1FA48;
                *v147 = &off_24EC1F9F8;
                v148 = v233[0];
                v147[4] = v145;
                v147[5] = v148;
                *(_QWORD *)((char *)v147 + 47) = *(_QWORD *)((char *)v233 + 7);
                *((_BYTE *)v147 + 55) = v146;
                v233[0] = 0;
                *(_QWORD *)((char *)v233 + 7) = 0;
                v149 = v222;
                v221 = (char *)(v147 + 3);
                v222 = (std::__shared_weak_count *)v147;
                v4 = v205;
                if (v149)
                {
                  p_shared_owners = (unint64_t *)&v149->__shared_owners_;
                  do
                    v151 = __ldaxr(p_shared_owners);
                  while (__stlxr(v151 - 1, p_shared_owners));
                  if (!v151)
                  {
                    ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                    std::__shared_weak_count::__release_weak(v149);
                  }
                }
                *(_OWORD *)v228 = *(_OWORD *)__p;
                v152 = v221;
                *(_QWORD *)&v228[16] = v220;
                if (v220)
                {
                  v153 = (unint64_t *)&v220->__shared_owners_;
                  do
                    v154 = __ldxr(v153);
                  while (__stxr(v154 + 1, v153));
                }
                v155 = v222;
                *(_QWORD *)&v229 = v152;
                *((_QWORD *)&v229 + 1) = v222;
                if (v222)
                {
                  v156 = (unint64_t *)&v222->__shared_owners_;
                  do
                    v157 = __ldxr(v156);
                  while (__stxr(v157 + 1, v156));
                  v230[0] = v152;
                  do
                    v158 = __ldaxr(v156);
                  while (__stlxr(v158 - 1, v156));
                  if (!v158)
                  {
                    ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                    std::__shared_weak_count::__release_weak(v155);
                  }
                }
                else
                {
                  v230[0] = v152;
                }
                v159 = v220;
                if (v220)
                {
                  v160 = (unint64_t *)&v220->__shared_owners_;
                  do
                    v161 = __ldaxr(v160);
                  while (__stlxr(v161 - 1, v160));
                  if (!v161)
                  {
                    ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                    std::__shared_weak_count::__release_weak(v159);
                  }
                }
                v162 = *(_QWORD *)v228;
                if (*((char *)v230[0] + 31) >= 0)
                  v163 = (char *)v230[0] + 8;
                else
                  v163 = (char *)*((_QWORD *)v230[0] + 1);
                v164 = _os_log_pack_fill();
                *(_DWORD *)v164 = 68157954;
                *(_DWORD *)(v164 + 4) = 13;
                *(_WORD *)(v164 + 8) = 2080;
                *(_QWORD *)(v164 + 10) = v163;
                v165 = (char *)operator new();
                v166 = *(unsigned __int8 *)(v112 + 39);
                if ((v166 & 0x80u) == 0)
                  v167 = v113;
                else
                  v167 = *(_QWORD *)(v112 + 16);
                if ((v166 & 0x80u) != 0)
                  v166 = *(_QWORD *)(v112 + 24);
                *(_QWORD *)v165 = v162;
                *(_OWORD *)(v165 + 8) = *(_OWORD *)&v228[8];
                *(_QWORD *)&v228[8] = 0;
                *(_QWORD *)&v228[16] = 0;
                *(_OWORD *)(v165 + 24) = v229;
                v229 = 0uLL;
                *((_QWORD *)v165 + 5) = v167;
                *((_QWORD *)v165 + 6) = v166;
                v165[56] = 1;
                __dst = 0;
                __p[0] = v165;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v110 + 24) + 40))(*(_QWORD *)(v110 + 24), __p);
                v168 = __p[0];
                __p[0] = 0;
                if (v168)
                {
                  v169 = (std::__shared_weak_count *)*((_QWORD *)v168 + 4);
                  if (v169)
                  {
                    v170 = (unint64_t *)&v169->__shared_owners_;
                    do
                      v171 = __ldaxr(v170);
                    while (__stlxr(v171 - 1, v170));
                    if (!v171)
                    {
                      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                      std::__shared_weak_count::__release_weak(v169);
                    }
                  }
                  v172 = (std::__shared_weak_count *)*((_QWORD *)v168 + 2);
                  if (v172)
                  {
                    v173 = (unint64_t *)&v172->__shared_owners_;
                    do
                      v174 = __ldaxr(v173);
                    while (__stlxr(v174 - 1, v173));
                    if (!v174)
                    {
                      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                      std::__shared_weak_count::__release_weak(v172);
                    }
                  }
                  MEMORY[0x227684CE8](v168, 0x10F0C40B62ED6C6);
                  v175 = __dst;
                  __dst = 0;
                  if (v175)
                  {
                    v176 = (std::__shared_weak_count *)*((_QWORD *)v175 + 4);
                    if (v176)
                    {
                      v177 = (unint64_t *)&v176->__shared_owners_;
                      do
                        v178 = __ldaxr(v177);
                      while (__stlxr(v178 - 1, v177));
                      if (!v178)
                      {
                        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                        std::__shared_weak_count::__release_weak(v176);
                      }
                    }
                    v179 = (std::__shared_weak_count *)*((_QWORD *)v175 + 2);
                    if (v179)
                    {
                      v180 = (unint64_t *)&v179->__shared_owners_;
                      do
                        v181 = __ldaxr(v180);
                      while (__stlxr(v181 - 1, v180));
                      if (!v181)
                      {
                        ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                        std::__shared_weak_count::__release_weak(v179);
                      }
                    }
                    MEMORY[0x227684CE8](v175, 0x10F0C40B62ED6C6);
                  }
                }
                v182 = (std::__shared_weak_count *)*((_QWORD *)&v229 + 1);
                if (*((_QWORD *)&v229 + 1))
                {
                  v183 = (unint64_t *)(*((_QWORD *)&v229 + 1) + 8);
                  do
                    v184 = __ldaxr(v183);
                  while (__stlxr(v184 - 1, v183));
                  if (!v184)
                  {
                    ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                    std::__shared_weak_count::__release_weak(v182);
                  }
                }
                v185 = *(std::__shared_weak_count **)&v228[16];
                if (*(_QWORD *)&v228[16])
                {
                  v186 = (unint64_t *)(*(_QWORD *)&v228[16] + 8);
                  do
                    v187 = __ldaxr(v186);
                  while (__stlxr(v187 - 1, v186));
                  if (!v187)
                  {
                    ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                    std::__shared_weak_count::__release_weak(v185);
                  }
                }
LABEL_225:
                if (v108)
                {
                  sub_2245664AC((unsigned __int8 *)v203, v228);
                  sub_22322C138((uint64_t)v207, "Keyframe polygon for plane %.13s is too small (pixel space)", v228);
                  sub_223182C08((uint64_t)v207);
                }
                sub_223182C08((uint64_t)v207);
                v188 = v214;
                if (v214)
                {
                  v189 = (unint64_t *)&v214->__shared_owners_;
                  do
                    v190 = __ldaxr(v189);
                  while (__stlxr(v190 - 1, v189));
                  if (!v190)
                  {
                    ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                    std::__shared_weak_count::__release_weak(v188);
                  }
                }
LABEL_232:
                v228[0] = 0;
                LOBYTE(v229) = 0;
                sub_2236ADA84((char **)(v206 + 424 * v4 + 392), (uint64_t)v228);
                if ((_BYTE)v229)
                {
                  v191 = *(_QWORD *)v228;
                  if (*(_QWORD *)v228)
                  {
                    v192 = *(_QWORD *)&v228[8];
                    v193 = *(void **)v228;
                    if (*(_QWORD *)&v228[8] != *(_QWORD *)v228)
                    {
                      v194 = *(_QWORD *)&v228[8];
                      do
                      {
                        v196 = *(void **)(v194 - 24);
                        v194 -= 24;
                        v195 = v196;
                        if (v196)
                        {
                          *(_QWORD *)(v192 - 16) = v195;
                          operator delete(v195);
                        }
                        v192 = v194;
                      }
                      while (v194 != v191);
                      v193 = *(void **)v228;
                    }
                    *(_QWORD *)&v228[8] = v191;
                    operator delete(v193);
                  }
                }
                v197 = (void **)v216;
                if (v216)
                {
                  v198 = v217;
                  if (v217 != v216)
                  {
                    v199 = v217;
                    do
                    {
                      v201 = *(v199 - 3);
                      v199 -= 3;
                      v200 = v201;
                      if (v201)
                      {
                        *(v198 - 2) = v200;
                        operator delete(v200);
                      }
                      v198 = v199;
                    }
                    while (v199 != v197);
                  }
                  operator delete(v197);
                }
                return;
              }
            }
            memcpy(p_dst, __s, v140);
            goto LABEL_163;
          }
        }
        memmove(v132, v115, v114);
        goto LABEL_144;
      }
    }
    memmove(v127, v125, v126);
    goto LABEL_136;
  }
LABEL_109:
  v116 = v31 + 424 * v4;
  v117 = (void **)(v116 + 392);
  if (*(_BYTE *)(v116 + 416))
  {
    v118 = (char *)*v117;
    if (*v117)
    {
      v119 = *(char **)(v116 + 400);
      v120 = *v117;
      if (v119 != v118)
      {
        v121 = (char *)v117[1];
        do
        {
          v123 = (void *)*((_QWORD *)v121 - 3);
          v121 -= 24;
          v122 = v123;
          if (v123)
          {
            *((_QWORD *)v119 - 2) = v122;
            operator delete(v122);
          }
          v119 = v121;
        }
        while (v121 != v118);
        v120 = *v117;
      }
      v117[1] = v118;
      operator delete(v120);
      *v117 = 0;
      v117[1] = 0;
      v117[2] = 0;
    }
    *v117 = v25;
    v117[1] = v69;
    v117[2] = v218;
  }
  else
  {
    *v117 = v25;
    *(_QWORD *)(v116 + 400) = v69;
    *(_QWORD *)(v116 + 408) = v218;
    *(_BYTE *)(v116 + 416) = 1;
  }
}

void sub_22370706C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  uint64_t v30;

  if (*(_BYTE *)(v30 - 168))
  {
    if (*(char *)(v30 - 169) < 0)
      operator delete(*(void **)(v30 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a19);
  sub_22317C838(&a30);
  _Unwind_Resume(a1);
}

void sub_2237070B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  uint64_t v30;

  if (*(char *)(v30 - 169) < 0)
    operator delete(*(void **)(v30 - 192));
  __cxa_guard_abort(&qword_2540CC0F0);
  sub_22317C838(&a30);
  _Unwind_Resume(a1);
}

void sub_2237070F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;

  sub_22319A054(&a33);
  sub_22319A054(&a39);
  sub_223199DE8(v39 - 192);
  sub_223182DAC((uint64_t)&a19);
  sub_22317C838(&a30);
  _Unwind_Resume(a1);
}

void sub_22370712C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  int v34;

  if (v34 < 0)
    operator delete(v33);
  sub_223199DE8((uint64_t)&a33);
  sub_223182DAC((uint64_t)&a19);
  sub_22317C838(&a30);
  _Unwind_Resume(a1);
}

void sub_223707198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  sub_223182DAC((uint64_t)&a19);
  sub_22317C838(&a30);
  _Unwind_Resume(a1);
}

void sub_2237071C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  uint64_t v30;
  void *v32;

  if (*(_BYTE *)(v30 - 160) && *(char *)(v30 - 161) < 0)
    operator delete(*(void **)(v30 - 184));
  v32 = *(void **)(v30 - 192);
  if (v32)
    os_release(v32);
  sub_223182DAC((uint64_t)&a19);
  sub_22317C838(&a30);
  _Unwind_Resume(a1);
}

void sub_223707210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  sub_22317C838(&a30);
  _Unwind_Resume(a1);
}

void sub_223707224(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223707234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  uint64_t v39;

  sub_22317C838((void **)(v39 - 232));
  sub_22317C838(&a39);
  _Unwind_Resume(a1);
}

void sub_22370725C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  void *v39;
  uint64_t v40;

  if (v39)
    operator delete(v39);
  sub_22317C838((void **)(v40 - 232));
  sub_22317C838(&a39);
  _Unwind_Resume(a1);
}

void **sub_2237072AC(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 6);
        if (v6)
        {
          *((_QWORD *)v3 - 5) = v6;
          operator delete(v6);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_22370732C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  if (*(_BYTE *)(a1 + 416))
  {
    v2 = *(_QWORD *)(a1 + 392);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 400);
      v4 = *(void **)(a1 + 392);
      if (v3 != v2)
      {
        v5 = *(_QWORD *)(a1 + 400);
        do
        {
          v7 = *(void **)(v5 - 24);
          v5 -= 24;
          v6 = v7;
          if (v7)
          {
            *(_QWORD *)(v3 - 16) = v6;
            operator delete(v6);
          }
          v3 = v5;
        }
        while (v5 != v2);
        v4 = *(void **)(a1 + 392);
      }
      *(_QWORD *)(a1 + 400) = v2;
      operator delete(v4);
    }
  }
  if (*(_BYTE *)(a1 + 384))
  {
    v8 = *(void **)(a1 + 360);
    if (v8)
    {
      *(_QWORD *)(a1 + 368) = v8;
      operator delete(v8);
    }
  }
  v9 = *(void **)(a1 + 296);
  if (v9)
  {
    *(_QWORD *)(a1 + 304) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 264);
  if (v10)
  {
    *(_QWORD *)(a1 + 272) = v10;
    operator delete(v10);
  }
  return a1;
}

void **sub_2237073E0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 7);
        if (v5)
        {
          *((_QWORD *)v3 - 6) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 11);
        if (v6)
        {
          *((_QWORD *)v3 - 10) = v6;
          operator delete(v6);
        }
        v3 -= 88;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_223707460(uint64_t a1@<X0>, _QWORD *a2@<X1>, float32x4_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int8x16_t v35;
  float32x2_t v36;
  float v37;
  float v38;
  BOOL v39;
  float v40;
  float32x2_t v41;
  float32x2_t v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  __int32 v49;
  float32x2_t v50;
  __int32 v51;
  _OWORD v52[5];

  v7 = operator new();
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_QWORD *)(v7 + 128) = 0;
  sub_22370F510(v7);
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_DWORD *)(v7 + 88) = 1065353216;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_DWORD *)(v7 + 128) = 1065353216;
  *a4 = v7;
  v12 = *(_QWORD *)(a1 + 208);
  v45 = *(_QWORD *)(a1 + 216);
  if (v12 != v45)
  {
    v47 = 0;
    v13 = *(float32x2_t *)(a1 + 144);
    v14.i32[0] = *(_DWORD *)(a1 + 152);
    v15 = *(float32x2_t *)(a1 + 160);
    v16 = *(float32x2_t *)(a1 + 176);
    v9.i32[0] = *(_DWORD *)(a1 + 184);
    v11.i64[0] = *(_QWORD *)(a1 + 192);
    v11.i32[2] = *(_DWORD *)(a1 + 200);
    v17 = (int8x16_t)vnegq_f32(v11);
    v18 = a3[1];
    v19 = vmulq_n_f32(*a3, v14.f32[0]);
    v14.i32[1] = *(_DWORD *)(a1 + 168);
    v20 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v13, (int32x2_t)v15), *(float *)v17.i32), (float32x2_t)vzip2_s32((int32x2_t)v13, (int32x2_t)v15), *(float32x2_t *)v11.f32, 1), v14, v11, 2);
    v21 = vmla_f32(vmls_lane_f32(vmul_f32(v16, *(float32x2_t *)v17.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v16, 1), *(float32x2_t *)v11.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL), *(float32x2_t *)v9.i8);
    v22 = a3[2];
    v23 = a3[3];
    v24 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*a3, v13.f32[0]), v18, v15.f32[0]), v22, v16.f32[0]), (float32x4_t)0, v23);
    v25 = (int8x16_t)vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(*a3, v13, 1), v18, v15, 1), v22, v16, 1), (float32x4_t)0, v23);
    v26 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v19, v18, *(float *)(a1 + 168)), v22, *(float *)v9.i32), (float32x4_t)0, v23);
    v27 = (int32x4_t)vaddq_f32(v23, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*a3, v20.f32[0]), v18, v20, 1), v22, v21.f32[0]));
    v52[0] = v24;
    v52[1] = v25;
    v52[2] = v26;
    v52[3] = v27;
    do
    {
      v28 = *(float32x2_t *)(a1 + 144);
      v27.i32[0] = *(_DWORD *)(a1 + 152);
      v29 = *(float32x2_t *)(a1 + 160);
      v9.i32[0] = *(_DWORD *)(a1 + 168);
      v10.i64[0] = *(_QWORD *)(a1 + 176);
      v21.i32[0] = *(_DWORD *)(a1 + 184);
      v22.i64[0] = *(_QWORD *)(v12 + 16);
      v23.i32[0] = *(_DWORD *)(v12 + 24);
      *(float32x2_t *)v30.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v28, v22.f32[0]), v29, *(float32x2_t *)v22.f32, 1), *(float32x2_t *)v10.f32, v23.f32[0]);
      *(float32x2_t *)&v30.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v22.f32), *(float32x2_t *)v9.i8, *(float32x2_t *)v22.f32, 1), *(float32x2_t *)v23.f32, v21);
      v22.i64[0] = *(_QWORD *)(a1 + 192);
      v22.i32[2] = *(_DWORD *)(a1 + 200);
      v22 = vaddq_f32(v30, v22);
      v23.i64[0] = *(_QWORD *)(v12 + 28);
      v30.i32[0] = *(_DWORD *)(v12 + 36);
      *(float32x2_t *)v27.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v23.f32), *(float32x2_t *)v9.i8, *(float32x2_t *)v23.f32, 1), *(float32x2_t *)v30.f32, v21);
      v49 = v22.i32[2];
      v48 = v22.i64[0];
      v51 = v27.i32[0];
      v50 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v28, v23.f32[0]), v29, *(float32x2_t *)v23.f32, 1), *(float32x2_t *)v10.f32, v30.f32[0]);
      v31 = a2[1];
      v32 = a2[2];
      if (v31 != v32)
      {
        v33 = 0;
        v34 = 0;
        while (1)
        {
          v10.i32[0] = *(_DWORD *)(v12 + 36);
          v8.i64[0] = *(_QWORD *)(v12 + 28);
          *(int32x2_t *)v22.f32 = vdup_lane_s32(*(int32x2_t *)v8.f32, 1);
          v25.i64[0] = *(_QWORD *)(v31 + 12);
          v35 = (int8x16_t)v8;
          v35.i32[2] = v10.i32[0];
          *(int32x2_t *)v27.i8 = vdup_lane_s32(*(int32x2_t *)v25.i8, 1);
          v36 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v25.i8), *(float32x2_t *)v27.i8, *(float32x2_t *)v8.f32, 1);
          v8.i32[0] = *(_DWORD *)(v31 + 20);
          v37 = vmla_f32(v36, *(float32x2_t *)v8.f32, *(float32x2_t *)v10.f32).f32[0];
          v38 = v37 + -0.96593;
          if (v37 < 0.96593)
            v38 = 0.96593 - v37;
          v39 = v38 <= 0.000001;
          if (v37 >= 0.96593)
            v39 = 1;
          *(float32x2_t *)v9.i8 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8), *(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32), *(float32x2_t *)v10.f32, *(float32x2_t *)v10.f32);
          if (*(float *)v9.i32 != 1.0)
          {
            v40 = *(float *)v9.i32 + -1.0;
            if (*(float *)v9.i32 < 1.0)
              v40 = 1.0 - *(float *)v9.i32;
            if (v40 > 0.000001)
              v35 = (int8x16_t)vmulq_n_f32((float32x4_t)v35, 1.0 / sqrtf(*(float *)v9.i32));
          }
          v10.i64[0] = *(_QWORD *)(v12 + 16);
          v9.i32[0] = *(_DWORD *)(v12 + 24);
          v41 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 1);
          v42 = (float32x2_t)vextq_s8(v35, v35, 8uLL).u64[0];
          v23.i64[0] = *(_QWORD *)v31;
          v22.i32[0] = *(_DWORD *)(v31 + 8);
          v21 = vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v31, *(float32x2_t *)v35.i8), v41, *(float32x2_t *)v31, 1), v42, *(float32x2_t *)v22.f32), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v10.f32, *(float32x2_t *)v35.i8), v41, *(float32x2_t *)v10.f32, 1), v42, *(float32x2_t *)v9.i8));
          if (fabsf(v21.f32[0]) <= 0.1)
          {
            v25.i32[2] = *(_DWORD *)(v31 + 20);
            v43 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8), *(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), *(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32).f32[0];
            if (v43 != 1.0)
            {
              v44 = v43 + -1.0;
              if (v43 < 1.0)
                v44 = 1.0 - v43;
              if (v44 > 0.000001)
                v25 = (int8x16_t)vmulq_n_f32((float32x4_t)v25, 1.0 / sqrtf(v43));
            }
            *(int32x2_t *)v27.i8 = vdup_lane_s32(*(int32x2_t *)v10.f32, 1);
            v8 = (float32x4_t)vextq_s8(v25, v25, 8uLL);
            v21 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v25.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.f32, 1), *(float32x2_t *)v25.i8, 1), *(float32x2_t *)v8.f32, *(float32x2_t *)v22.f32);
            *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v10.f32, *(float32x2_t *)v25.i8), *(float32x2_t *)v27.i8, *(float32x2_t *)v25.i8, 1), *(float32x2_t *)v8.f32, *(float32x2_t *)v9.i8);
            *(float32x2_t *)v25.i8 = vsub_f32(*(float32x2_t *)v10.f32, v21);
            v27.i32[0] = 1036831949;
            if (fabsf(*(float *)v25.i32) > 0.1)
              v39 = 0;
            if (v39)
            {
              v25.i32[0] = 1036831949;
              if (sub_2237934F4((uint64_t *)(*(_QWORD *)(a1 + 208) + 424 * v47 + 264), a2[24] + v33, (float32x2_t *)(a1 + 48), (uint64_t)(a2 + 182), (uint64_t)&v48, (float32x2_t *)v52, v25, v27, v8, v9, v10, v21, v22, *(double *)v23.i64))break;
            }
          }
          v31 += 24;
          ++v34;
          v33 += 88;
          if (v31 == v32)
            goto LABEL_3;
        }
        sub_22370FD80(v7, (_OWORD *)a1, (__int128 *)v12, v34, 0);
      }
LABEL_3:
      v12 += 424;
      ++v47;
    }
    while (v12 != v45);
  }
}

void sub_22370789C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10A0C402FF47DCALL);
  _Unwind_Resume(a1);
}

void sub_2237078C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t **a10)
{
  sub_22370D318(a10);
  _Unwind_Resume(a1);
}

void sub_2237078D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t **a10)
{
  sub_22370D318(a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_2237078E8@<X0>(uint64_t a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void **a7@<X6>, float *a8@<X7>, uint64_t **a9@<X8>, float32x4_t *a10)
{
  float32x2_t *v12;
  uint64_t v14;
  __int128 v15;
  void **v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x2_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  int32x4_t v44;
  int v45;
  int v46;
  float32x2_t v47;
  float32x2_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  _QWORD *v53;
  char *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  void *v74;
  void *v75;
  uint64_t (**v76)();
  std::__shared_weak_count *v77;
  unint64_t v78;
  __int16 v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  __int128 v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t (**v91)();
  _OWORD *v92;
  uint64_t (**v93)();
  void *v94;
  uint64_t (*v95)();
  uint64_t (*v96)();
  std::__shared_weak_count *v97;
  unint64_t *p_shared_owners;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 *v103;
  __int128 *v104;
  unsigned int v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  int8x16_t v109;
  int8x16_t v110;
  float32x2_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint8x8_t v120;
  void **v121;
  _QWORD *v122;
  BOOL v123;
  unint64_t v124;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _BOOL8 v129;
  unint64_t v130;
  unint64_t v131;
  size_t prime;
  void *v133;
  void *v134;
  uint64_t v135;
  _QWORD **v136;
  size_t v137;
  size_t v138;
  size_t v139;
  _QWORD *i;
  size_t v141;
  uint64_t v142;
  unint64_t v143;
  uint8x8_t v144;
  uint64_t v145;
  _QWORD *v146;
  void *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  size_t v151;
  float32x2_t *v152;
  float32x2_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  float32x2_t v157;
  int8x16_t v158;
  float32x2_t v159;
  float32x2_t v160;
  float v161;
  float v162;
  _BOOL4 v163;
  float32x2_t v164;
  float v165;
  float32x2_t v166;
  float32x2_t v167;
  float32x2_t v168;
  float v169;
  float v170;
  uint64_t *v171;
  unint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  float32x2_t v177;
  float32x2_t v178;
  unint64_t v179;
  void **v180;
  void **v181;
  char v182;
  unsigned __int8 *v183;
  unsigned __int8 *v184;
  uint64_t (**v185)();
  void *v186;
  unsigned __int8 *v187;
  unsigned __int8 *v188;
  unsigned __int8 *v189;
  uint64_t (**v190)();
  void *v191;
  char *v192;
  _QWORD *v193;
  unsigned int v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t (***v201)();
  uint64_t v202;
  void **v203;
  uint64_t v204;
  char *v205;
  unint64_t v206;
  unsigned int *v207;
  unsigned int *v208;
  float32x4_t v209;
  float v210;
  int8x16_t v211;
  float v212;
  unint64_t v213;
  char *v214;
  float v215;
  float v216;
  float32x4_t v217;
  float32x4_t v218;
  unsigned int *v219;
  unsigned int *v220;
  float v221;
  unsigned int v222;
  float v223;
  uint64_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float v227;
  float32x4_t v228;
  float32x2_t v229;
  float v230;
  float v231;
  char *v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  void *v260;
  uint64_t v261;
  void *v262;
  void *v263;
  __int128 v264;
  unint64_t v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  void *v269;
  char *v270;
  char *v271;
  void *v272;
  void *v273;
  void *v274;
  unsigned int *v275;
  unsigned int *v276;
  unint64_t v277;
  _QWORD *v278;
  unint64_t v279;
  unsigned int *v280;
  unint64_t v281;
  __int128 v282;
  void *v283;
  uint64_t v284;
  uint64_t j;
  unsigned int *v286;
  unsigned int *v287;
  unsigned int v288;
  _QWORD *v289;
  char *v290;
  unint64_t v291;
  uint64_t v292;
  int v293;
  int v294;
  char *v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  void *v313;
  uint64_t v314;
  void *v315;
  void *v316;
  char *v317;
  char *v318;
  void *v319;
  void *v320;
  void *v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  void **v325;
  void **v326;
  int v327;
  uint64_t *v328;
  uint64_t **v329;
  uint64_t **v330;
  unsigned int v331;
  unsigned int v332;
  BOOL v333;
  unsigned int v334;
  unsigned int v335;
  unsigned int v336;
  char *v337;
  uint64_t *v338;
  void **v339;
  void **v340;
  unsigned int v341;
  uint64_t v342;
  _QWORD *v343;
  void *v344;
  void **v345;
  void **v346;
  void *v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  __int16 v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  int v357;
  uint64_t *v358;
  uint64_t **v359;
  uint64_t **v360;
  unsigned int v361;
  unsigned int v362;
  BOOL v363;
  unsigned int v364;
  unsigned int v365;
  unsigned int v366;
  char *v367;
  uint64_t *v368;
  void **v369;
  void **v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  void *v377;
  void **v378;
  void **v379;
  void **v380;
  uint64_t (***v381)();
  void **v382;
  __int128 *v383;
  uint64_t (**v384)();
  uint64_t **v385;
  __n128 v386;
  int32x4_t v387;
  int32x4_t v388;
  uint64_t (***v389)();
  uint64_t v390;
  uint64_t v391;
  void **v392;
  __n128 v393;
  void **v394;
  _QWORD *v395;
  uint64_t v396;
  uint64_t v397;
  _QWORD *v398;
  _QWORD *v399;
  _QWORD *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  _QWORD *v404;
  uint64_t v405;
  void **v406;
  _QWORD *v407;
  uint64_t v408;
  void **v409;
  _QWORD *v410;
  _QWORD *v411;
  size_t v412;
  char v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  _QWORD *v419;
  uint64_t v420;
  _QWORD *v421;
  _BYTE *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  void **v429;
  _QWORD *v430;
  void **v431;
  _QWORD *v432;
  void *v433;
  void **v434;
  __int128 *v435;
  void *v436;
  void **v437;
  void **v438;
  void **v439;
  uint64_t v440;
  void *v441;
  void **v442;
  _QWORD *v443;
  uint64_t v444;
  void **v445;
  void **v446;
  void **v447;
  uint64_t v448;
  void **v449;
  __int128 *v450;
  _QWORD *v451;
  __int128 *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t (***v455)();
  uint64_t v456;
  uint64_t v457;
  _QWORD *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  _QWORD *v462;
  uint64_t v463;
  uint64_t v464;
  void **v465;
  uint64_t (***v466)();
  uint64_t v467;
  _BYTE *v468;
  _BYTE *v469;
  char v470;
  uint64_t v471;
  _QWORD *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  _QWORD *v476;
  _QWORD *v477;
  uint64_t v478;
  _QWORD *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  void **v485;
  void **v486;
  uint64_t v487;
  float32x2_t *v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t *v492;
  uint64_t *v493;
  uint64_t **v494;
  uint64_t *v495;
  uint64_t *v496;
  _BYTE *v497;
  _QWORD *v498;
  _QWORD *v499;
  void *v500;
  _QWORD *v501;
  _QWORD *v502;
  void *v503;
  uint64_t *result;
  uint64_t *v505;
  uint64_t v506;
  unsigned int v507;
  uint64_t v508;
  void **v513;
  float32x2_t *v515;
  unsigned __int8 *v516;
  float32x2_t v517;
  unint64_t v518;
  unint64_t *v519;
  __int128 v520;
  uint64_t v521;
  __int128 v522;
  void **v523;
  void *v524;
  _BYTE *v525;
  _BYTE *v526;
  uint64_t **v527;
  uint64_t *v528;
  uint64_t *v529;
  _OWORD v530[4];
  void *v531[2];
  void *v532[2];
  int v533;
  void *v534[2];
  uint64_t v535;
  void *v536[2];
  std::__shared_weak_count *v537;
  unint64_t v538;
  void *v539[4];
  unint64_t v540;
  uint64_t (***v541)();
  void **v542;
  uint64_t v543;
  void *v544;
  uint64_t (**v545)();
  void **v546;
  uint64_t v547;
  __int128 v548;
  __int16 v549;
  void *v550;
  _BYTE *v551;
  __int128 v552;
  uint64_t *v553;
  __int128 v554;
  __int128 v555;
  float v556;
  void *v557;
  _QWORD v558[3];
  _QWORD *v559;
  uint64_t v560;
  void *v561;
  _QWORD v562[3];
  _QWORD *v563;
  void *v564;
  void *v565;
  _QWORD v566[3];
  _QWORD *v567;
  uint64_t v568;
  void *v569;
  _QWORD v570[3];
  _QWORD *v571;
  void *v572;
  void *v573;
  _QWORD v574[3];
  _QWORD *v575;
  uint64_t v576;
  void *v577;
  _QWORD v578[3];
  _QWORD *v579;
  void *v580;
  void *v581;
  _QWORD v582[3];
  _QWORD *v583;
  uint64_t v584;
  void *v585;
  _QWORD v586[3];
  _QWORD *v587;
  void *v588;
  void *v589;
  _QWORD v590[3];
  _QWORD *v591;
  uint64_t v592;
  void *v593;
  _QWORD v594[3];
  _QWORD *v595;
  void *v596;
  void *v597;
  _QWORD v598[3];
  _QWORD *v599;
  uint64_t v600;
  __int128 v601;
  unint64_t v602;
  _OWORD *v603;
  void *v604;
  _OWORD v605[2];
  _OWORD *v606;
  uint64_t v607;
  char *v608;
  _QWORD v609[3];
  _QWORD *v610;
  void *v611;
  char *v612;
  _QWORD v613[3];
  _QWORD *v614;
  uint64_t v615;
  void *v616;
  __int128 v617;
  char v618[8];
  __int128 *v619;
  uint64_t v620;
  void *v621;
  __int128 v622;
  char v623[8];
  __int128 *v624;
  void *v625;
  void *v626[2];
  __int128 v627;
  __int128 v628;
  uint64_t (**v629)();
  void **v630;
  unint64_t v631;
  uint64_t (***v632)();
  unsigned __int8 v633;
  void *v634[2];
  _BYTE v635[200];
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  uint64_t v640;
  int v641;
  __int128 v642;
  uint64_t v643;
  unint64_t v644;
  uint64_t v645;
  uint64_t v646;
  char v647;
  int v648;
  __int128 v649;
  uint64_t v650;
  char v651;
  __int128 __p;
  uint64_t v653;
  char v654;
  uint64_t v655;

  v12 = a2;
  v655 = *MEMORY[0x24BDAC8D0];
  *(float32x2_t *)(a1 + 24) = a2[181];
  v552 = *(_OWORD *)a1;
  v14 = operator new();
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_QWORD *)(v14 + 128) = 0;
  sub_22370F510(v14);
  v15 = 0uLL;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_DWORD *)(v14 + 88) = 1065353216;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_DWORD *)(v14 + 128) = 1065353216;
  v553 = (uint64_t *)v14;
  v554 = 0u;
  v555 = 0u;
  v521 = a1;
  v16 = (void **)(a1 + 208);
  v17 = *(char **)(a1 + 208);
  v556 = 1.0;
  v523 = v16;
  v18 = (char *)v16[1];
  v634[1] = 0;
  v634[0] = 0;
  *(_QWORD *)v635 = 0;
  v19 = v18 - v17;
  if (v18 != v17)
  {
    v20 = 0x21CFB2B78C13521DLL * (v19 >> 3);
    if (v20 >> 60)
      sub_22316E078();
    v634[0] = operator new(0x1CFB2B78C13521D0 * (v19 >> 3));
    v634[1] = v634[0];
    *(_QWORD *)v635 = (char *)v634[0] + 16 * v20;
    v626[0] = v634;
    do
    {
      *(_OWORD *)v536 = *(_OWORD *)v17;
      sub_2232E9564((char ***)v626, v536);
      v17 += 424;
    }
    while (v17 != v18);
    v15 = *(_OWORD *)v634;
    v19 = *(_QWORD *)v635;
  }
  *(_OWORD *)v534 = v15;
  v535 = v19;
  HIDWORD(v21) = 0;
  *(_OWORD *)v531 = 0u;
  *(_OWORD *)v532 = 0u;
  v533 = 1065353216;
  v22 = *(_QWORD *)(a4 + 8);
  v23 = v12[15];
  v24 = a10[1];
  v25 = a10[2];
  v26 = a10[3];
  v27 = *(float32x4_t *)(a3 + 64);
  v28 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a10, COERCE_FLOAT(*(_OWORD *)(a3 + 32))), v24, *(float32x2_t *)(a3 + 32), 1), v25, *(float32x4_t *)(a3 + 32), 2), v26, *(float32x4_t *)(a3 + 32), 3);
  v29 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a10, COERCE_FLOAT(*(_OWORD *)(a3 + 48))), v24, *(float32x2_t *)(a3 + 48), 1), v25, *(float32x4_t *)(a3 + 48), 2), v26, *(float32x4_t *)(a3 + 48), 3);
  v30 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a10, v27.f32[0]), v24, *(float32x2_t *)v27.f32, 1), v25, v27, 2), v26, v27, 3);
  v31 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a10, COERCE_FLOAT(*(_OWORD *)(a3 + 80))), v24, *(float32x2_t *)(a3 + 80), 1), v25, *(float32x4_t *)(a3 + 80), 2), v26, *(float32x4_t *)(a3 + 80), 3);
  v32.i32[0] = a10->i32[2];
  v33 = *(float32x2_t *)a10[1].f32;
  v34 = *(float32x2_t *)a10[2].f32;
  v27.i32[0] = a10[2].i32[2];
  v35 = a10[3].i64[0];
  v26.i64[0] = a10[3].i64[1] ^ 0xFFFFFFFF80000000;
  v36 = *(float32x4_t *)v12[194].f32;
  v37 = vmulq_n_f32(v36, v32.f32[0]);
  v32.i32[1] = a10[1].i32[2];
  v38 = vmla_n_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)a10->f32, (int32x2_t)v33), COERCE_FLOAT(v35 ^ 0x80000000)), (float32x2_t)vzip2_s32(*(int32x2_t *)a10->f32, (int32x2_t)v33), (float32x2_t)(v35 ^ 0x8000000080000000), 1), v32, v26.f32[0]);
  v32.i32[0] = vmla_f32(vmla_lane_f32(vmul_f32(v34, (float32x2_t)(v35 ^ 0x8000000080000000)), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v34, 1), (float32x2_t)(v35 ^ 0x8000000080000000), 1), *(float32x2_t *)v26.f32, *(float32x2_t *)v27.f32).u32[0];
  v39 = *(float32x4_t *)v12[196].f32;
  v40 = *(float32x4_t *)v12[198].f32;
  v41 = *(float32x4_t *)v12[200].f32;
  v42 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v36, *(float32x2_t *)a10->f32, 1), v39, v33, 1), v40, v34, 1), (float32x4_t)0, v41);
  v530[0] = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v36, COERCE_FLOAT(a10->i64[0])), v39, v33.f32[0]), v40, v34.f32[0]), (float32x4_t)0, v41);
  v530[1] = v42;
  v530[2] = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v37, v39, v32.f32[1]), v40, v27.f32[0]), (float32x4_t)0, v41);
  v530[3] = vaddq_f32(v41, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v36, v38.f32[0]), v39, v38, 1), v40, v32.f32[0]));
  v42.i64[0] = vzip1q_s32(v28, v29).u64[0];
  v31.i64[0] ^= 0x8000000080000000;
  v42.i64[1] = v30.u32[0];
  v43 = (int8x16_t)vtrn2q_s32(v28, v29);
  v43.i32[2] = v30.i32[1];
  v44 = vzip2q_s32(v28, v29);
  v44.i32[2] = v30.i32[2];
  LODWORD(v21) = vdupq_lane_s32(*(int32x2_t *)&v43, 0).i32[3];
  *(_QWORD *)((char *)&v21 + 4) = vextq_s8(v43, (int8x16_t)0, 4uLL).u64[0];
  v44.i64[1] = vdupq_laneq_s32(v44, 2).u32[0];
  *(_OWORD *)v635 = v21;
  *(float32x4_t *)v634 = v42;
  *(int32x4_t *)&v635[16] = v44;
  *(float32x2_t *)&v635[32] = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v42.f32, v31.f32[0]), *(float32x2_t *)v43.i8, *(float32x2_t *)v31.f32, 1), *(float32x2_t *)v44.i8, COERCE_FLOAT(v31.i32[2] ^ 0x80000000));
  *(_DWORD *)&v635[40] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v31.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.f32, 1), *(float32x2_t *)v30.i8, 1), (float32x2_t)(v31.i64[1] ^ 0xFFFFFFFF80000000), (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)).u32[0];
  *(_DWORD *)&v635[44] = 1065353216;
  LODWORD(v626[0]) = 897988541;
  v536[0] = v626;
  v45 = sub_22370CDB4((float *)v634, (float *)v530, (float **)v536);
  if (*(_QWORD *)(v521 + 208) == *(_QWORD *)(v521 + 216))
    v46 = v45;
  else
    v46 = 0;
  v515 = v12;
  v508 = a4;
  if (v46 == 1)
  {
    kdebug_trace();
    v536[0] = &off_24EC21420;
    sub_2231F9830((uint64_t)&v12[7], (uint64_t *)&v536[1]);
    sub_223792EFC((int32x2_t *)v536, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v12[2] - *(_QWORD *)&v12[1]) >> 3), v12 + 182, (float32x2_t *)(v521 + 48), &v544);
    v48 = v12[1];
    v47 = v12[2];
    v626[1] = 0;
    v626[0] = 0;
    *(_QWORD *)&v627 = 0;
    v518 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v47 - *(_QWORD *)&v48) >> 3);
    sub_2236E9F74((char **)v626, v518);
    if (*(_QWORD *)&v47 != *(_QWORD *)&v48)
    {
      v49 = 0;
      do
      {
        v616 = *a7;
        sub_2232D69F0((unsigned int *)&v621, (uint64_t *)&v616);
        v634[0] = (void *)((v621 | ((unint64_t)BYTE4(v621) << 32) | ((unint64_t)BYTE5(v621) << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)HIBYTE(v621) << 56) | ((unint64_t)(HIWORD(HIDWORD(v621)) & 0xF | 0x40u) << 48));
        v634[1] = (void *)(((unint64_t)BYTE4(v622) << 32) | ((unint64_t)BYTE5(v622) << 40) | v622 & 0xFFFFFF00 | ((unint64_t)DWORD1(v622) << 32) & 0xFF00000000000000 | ((unint64_t)BYTE6(v622) << 48) | v622 & 0x3F | 0x80);
        v50 = *(_QWORD *)&v12[1] + 24 * v49;
        v51 = *(_DWORD *)(v50 + 8);
        *(_QWORD *)v635 = *(_QWORD *)v50;
        *(_DWORD *)&v635[8] = v51;
        v52 = *(_DWORD *)(v50 + 20);
        *(_QWORD *)&v635[12] = *(_QWORD *)(v50 + 12);
        *(_DWORD *)&v635[20] = v52;
        v53 = v544;
        v54 = (char *)v544 + 88 * v49;
        v55 = *((_QWORD *)v54 + 7);
        *(float *)&v635[24] = (float)v55;
        memset(&v635[28], 0, 168);
        BYTE8(v637) = 0;
        BYTE8(v638) = 0;
        v636 = 0uLL;
        LODWORD(v637) = 0;
        v639 = *(_OWORD *)v54;
        v640 = *((_QWORD *)v54 + 2);
        *(_QWORD *)v54 = 0;
        *((_QWORD *)v54 + 1) = 0;
        *((_QWORD *)v54 + 2) = 0;
        v641 = *((_DWORD *)v54 + 6);
        v642 = *((_OWORD *)v54 + 2);
        v643 = *((_QWORD *)v54 + 6);
        *((_QWORD *)v54 + 4) = 0;
        *((_QWORD *)v54 + 5) = 0;
        *((_QWORD *)v54 + 6) = 0;
        v644 = v55;
        v645 = *((_QWORD *)v54 + 8);
        LOBYTE(v646) = 0;
        v647 = 0;
        if (v54[80])
        {
          v646 = v53[11 * v49 + 9];
          v647 = 1;
        }
        v648 = 1;
        LOBYTE(v649) = 0;
        v651 = 0;
        LOBYTE(__p) = 0;
        v654 = 0;
        v56 = (char *)v626[1];
        if (v626[1] >= (void *)v627)
        {
          v69 = (void *)sub_22370CA60(v626, (uint64_t)v634);
        }
        else
        {
          *(_OWORD *)v626[1] = *(_OWORD *)v634;
          v57 = *(_QWORD *)v635;
          *((_DWORD *)v56 + 6) = *(_DWORD *)&v635[8];
          *((_QWORD *)v56 + 2) = v57;
          v58 = *(_QWORD *)&v635[12];
          *((_DWORD *)v56 + 9) = *(_DWORD *)&v635[20];
          *(_QWORD *)(v56 + 28) = v58;
          v59 = *(_OWORD *)&v635[40];
          *(_OWORD *)(v56 + 40) = *(_OWORD *)&v635[24];
          *(_OWORD *)(v56 + 56) = v59;
          v60 = *(_OWORD *)&v635[56];
          v61 = *(_OWORD *)&v635[72];
          v62 = *(_OWORD *)&v635[88];
          *(_OWORD *)(v56 + 120) = *(_OWORD *)&v635[104];
          *(_OWORD *)(v56 + 104) = v62;
          *(_OWORD *)(v56 + 88) = v61;
          *(_OWORD *)(v56 + 72) = v60;
          v63 = *(_OWORD *)&v635[120];
          v64 = *(_OWORD *)&v635[136];
          v65 = *(_OWORD *)&v635[152];
          *(_OWORD *)(v56 + 184) = *(_OWORD *)&v635[168];
          *(_OWORD *)(v56 + 168) = v65;
          *(_OWORD *)(v56 + 152) = v64;
          *(_OWORD *)(v56 + 136) = v63;
          v66 = *(_OWORD *)&v635[184];
          v67 = v636;
          v68 = v637;
          *(_OWORD *)(v56 + 248) = v638;
          *(_OWORD *)(v56 + 232) = v68;
          *(_OWORD *)(v56 + 216) = v67;
          *(_OWORD *)(v56 + 200) = v66;
          *((_QWORD *)v56 + 34) = 0;
          *((_QWORD *)v56 + 35) = 0;
          *((_QWORD *)v56 + 33) = 0;
          *(_OWORD *)(v56 + 264) = v639;
          *((_QWORD *)v56 + 35) = v640;
          v639 = 0uLL;
          v640 = 0;
          *((_DWORD *)v56 + 72) = v641;
          *((_QWORD *)v56 + 38) = 0;
          *((_QWORD *)v56 + 39) = 0;
          *((_QWORD *)v56 + 37) = 0;
          *(_OWORD *)(v56 + 296) = v642;
          *((_QWORD *)v56 + 39) = v643;
          v642 = 0uLL;
          v643 = 0;
          *((_QWORD *)v56 + 40) = v644;
          *((_QWORD *)v56 + 41) = v645;
          v56[336] = 0;
          v56[344] = 0;
          if (v647)
          {
            *((_QWORD *)v56 + 42) = v646;
            v56[344] = 1;
          }
          *((_DWORD *)v56 + 88) = v648;
          v56[360] = 0;
          v56[384] = 0;
          if (v651)
          {
            *((_QWORD *)v56 + 45) = 0;
            *((_QWORD *)v56 + 46) = 0;
            *((_QWORD *)v56 + 47) = 0;
            *(_OWORD *)(v56 + 360) = v649;
            *((_QWORD *)v56 + 47) = v650;
            v649 = 0uLL;
            v650 = 0;
            v56[384] = 1;
          }
          v56[392] = 0;
          v56[416] = 0;
          if (v654)
          {
            *((_QWORD *)v56 + 49) = 0;
            *((_QWORD *)v56 + 50) = 0;
            *((_QWORD *)v56 + 51) = 0;
            *(_OWORD *)(v56 + 392) = __p;
            *((_QWORD *)v56 + 51) = v653;
            __p = 0uLL;
            v653 = 0;
            v56[416] = 1;
          }
          v69 = v56 + 424;
        }
        v626[1] = v69;
        if (v654)
        {
          v70 = __p;
          if ((_QWORD)__p)
          {
            v71 = *((_QWORD *)&__p + 1);
            v72 = (void *)__p;
            if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
            {
              v73 = *((_QWORD *)&__p + 1);
              do
              {
                v75 = *(void **)(v73 - 24);
                v73 -= 24;
                v74 = v75;
                if (v75)
                {
                  *(_QWORD *)(v71 - 16) = v74;
                  operator delete(v74);
                }
                v71 = v73;
              }
              while (v73 != v70);
              v72 = (void *)__p;
              v12 = v515;
            }
            *((_QWORD *)&__p + 1) = v70;
            operator delete(v72);
          }
        }
        if (v651 && (_QWORD)v649)
        {
          *((_QWORD *)&v649 + 1) = v649;
          operator delete((void *)v649);
        }
        if ((_QWORD)v642)
        {
          *((_QWORD *)&v642 + 1) = v642;
          operator delete((void *)v642);
        }
        if ((_QWORD)v639)
        {
          *((_QWORD *)&v639 + 1) = v639;
          operator delete((void *)v639);
        }
        ++v49;
      }
      while (v49 != v518);
    }
    v85 = *(_OWORD *)v626;
    v86 = v627;
    v87 = *v523;
    v88 = v521;
    if (*v523)
    {
      v522 = *(_OWORD *)v626;
      v89 = *(_QWORD *)(v521 + 216);
      v90 = *v523;
      if ((void *)v89 != v87)
      {
        do
        {
          v89 -= 424;
          sub_2236EA79C(v89);
        }
        while ((void *)v89 != v87);
        v90 = *v523;
      }
      v88 = v521;
      *(_QWORD *)(v521 + 216) = v87;
      operator delete(v90);
      *v523 = 0;
      v523[1] = 0;
      v523[2] = 0;
      v85 = v522;
    }
    *(_OWORD *)(v88 + 208) = v85;
    *(_QWORD *)(v88 + 224) = v86;
    v91 = (uint64_t (**)())v544;
    v92 = (_OWORD *)v88;
    if (v544)
    {
      v93 = v545;
      v94 = v544;
      if (v545 != v544)
      {
        do
        {
          v95 = *(v93 - 7);
          if (v95)
          {
            *(v93 - 6) = v95;
            operator delete(v95);
          }
          v96 = *(v93 - 11);
          if (v96)
          {
            *(v93 - 10) = v96;
            operator delete(v96);
          }
          v93 -= 11;
        }
        while (v93 != v91);
        v94 = v544;
      }
      v545 = v91;
      operator delete(v94);
    }
    v97 = v537;
    if (!v537)
      goto LABEL_73;
    p_shared_owners = (unint64_t *)&v537->__shared_owners_;
    do
      v99 = __ldaxr(p_shared_owners);
    while (__stlxr(v99 - 1, p_shared_owners));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
      v100 = *(_QWORD *)(v88 + 216) - *(_QWORD *)(v88 + 208);
      if (v100)
        goto LABEL_74;
    }
    else
    {
LABEL_73:
      v100 = *(_QWORD *)(v88 + 216) - *(_QWORD *)(v88 + 208);
      if (v100)
      {
LABEL_74:
        v101 = 0;
        v102 = v100 / 424;
        do
        {
          LOBYTE(v634[0]) = v101;
          sub_2236EAB58((uint64_t)v531, (unsigned __int8 *)v634, v634);
          ++v101;
        }
        while (v102 != v101);
        v103 = *(__int128 **)(v88 + 208);
        v104 = *(__int128 **)(v88 + 216);
        if (v103 != v104)
        {
          v105 = 0;
          do
          {
            sub_22370FD80((uint64_t)v553, v92, v103, v105, 0);
            v103 = (__int128 *)((char *)v103 + 424);
            ++v105;
          }
          while (v103 != v104);
        }
      }
    }
    kdebug_trace();
    goto LABEL_442;
  }
  kdebug_trace();
  sub_223746C24(a5, (int32x2_t *)v12, a4, v521 + 48, v12 + 182, (float32x4_t *)(v521 + 144), (int32x2_t *)v530, (uint64_t)&v544, *a8);
  v634[0] = &off_24EC21420;
  v76 = v545;
  v77 = (std::__shared_weak_count *)v546;
  if (v546)
  {
    v22 = (uint64_t)(v546 + 1);
    do
      v78 = __ldxr((unint64_t *)v22);
    while (__stxr(v78 + 1, (unint64_t *)v22));
    v79 = v549;
    do
      v80 = __ldxr((unint64_t *)v22);
    while (__stxr(v80 + 1, (unint64_t *)v22));
    v81 = v547;
    *(_OWORD *)&v635[16] = v548;
    do
      v82 = __ldxr((unint64_t *)v22);
    while (__stxr(v82 + 1, (unint64_t *)v22));
    v634[1] = v76;
    *(_QWORD *)v635 = v77;
    *(_QWORD *)&v635[8] = v81;
    *(_WORD *)&v635[32] = v79;
    do
      v83 = __ldaxr((unint64_t *)v22);
    while (__stlxr(v83 - 1, (unint64_t *)v22));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
    do
      v84 = __ldaxr((unint64_t *)v22);
    while (__stlxr(v84 - 1, (unint64_t *)v22));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  else
  {
    v634[1] = v545;
    *(_OWORD *)v635 = __PAIR128__(v547, 0);
    *(_OWORD *)&v635[16] = v548;
    *(_WORD *)&v635[32] = v549;
  }
  sub_223792D7C((uint64_t)v634, (v551 - (_BYTE *)v550) >> 3, &v593);
  v106 = *(std::__shared_weak_count **)v635;
  if (*(_QWORD *)v635)
  {
    v107 = (unint64_t *)(*(_QWORD *)v635 + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v519 = (unint64_t *)v550;
  *(_OWORD *)v635 = 0u;
  *(_OWORD *)v634 = 0u;
  *(_DWORD *)&v635[16] = 728309824;
  kdebug_trace();
  v112 = *(_QWORD *)&v12[2] - *(_QWORD *)&v12[1];
  if (v112)
  {
    v113 = 0;
    v22 = v112 / 24;
    do
      sub_22370FF50((uint64_t)v553, v113++);
    while (v22 != v113);
  }
  v506 = HIDWORD(*(_QWORD *)&v23);
  v507 = v23.i32[0];
  v114 = *(_QWORD *)(v521 + 208);
  v115 = *(_QWORD *)(v521 + 216);
  if (v114 != v115)
  {
    v116 = 0;
    while (1)
    {
      sub_22370DC2C((uint64_t)v553, &v552, (__int128 *)v114);
      v117 = sub_22456636C((unsigned __int8 *)v114);
      v118 = v117;
      v119 = *((_QWORD *)&v554 + 1);
      if (*((_QWORD *)&v554 + 1))
      {
        v120 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v554 + 8));
        v120.i16[0] = vaddlv_u8(v120);
        if (v120.u32[0] > 1uLL)
        {
          v22 = v117;
          if (v117 >= *((_QWORD *)&v554 + 1))
            v22 = v117 % *((_QWORD *)&v554 + 1);
        }
        else
        {
          v22 = (*((_QWORD *)&v554 + 1) - 1) & v117;
        }
        v121 = *(void ***)(v554 + 8 * v22);
        if (v121)
        {
          v122 = *v121;
          if (*v121)
          {
            if (v120.u32[0] < 2uLL)
            {
              while (1)
              {
                v126 = v122[1];
                if (v126 == v117)
                {
                  if (v122[2] == *(_QWORD *)v114 && v122[3] == *(_QWORD *)(v114 + 8))
                    goto LABEL_190;
                }
                else if ((v126 & (*((_QWORD *)&v554 + 1) - 1)) != v22)
                {
                  goto LABEL_117;
                }
                v122 = (_QWORD *)*v122;
                if (!v122)
                  goto LABEL_117;
              }
            }
            do
            {
              v124 = v122[1];
              if (v124 == v117)
              {
                v123 = v122[2] == *(_QWORD *)v114 && v122[3] == *(_QWORD *)(v114 + 8);
                if (v123)
                  goto LABEL_190;
              }
              else
              {
                if (v124 >= *((_QWORD *)&v554 + 1))
                  v124 %= *((_QWORD *)&v554 + 1);
                if (v124 != v22)
                  break;
              }
              v122 = (_QWORD *)*v122;
            }
            while (v122);
          }
        }
      }
LABEL_117:
      v122 = operator new(0x28uLL);
      *v122 = 0;
      v122[1] = v118;
      v109 = *(int8x16_t *)v114;
      *((_OWORD *)v122 + 1) = *(_OWORD *)v114;
      *((_BYTE *)v122 + 32) = 0;
      *(float *)v109.i32 = (float)(unint64_t)(*((_QWORD *)&v555 + 1) + 1);
      if (!v119 || (float)(v556 * (float)v119) < *(float *)v109.i32)
        break;
      v127 = v554;
      v128 = *(_QWORD **)(v554 + 8 * v22);
      if (v128)
        goto LABEL_120;
LABEL_169:
      *v122 = v555;
      *(_QWORD *)&v555 = v122;
      *(_QWORD *)(v127 + 8 * v22) = &v555;
      if (!*v122)
        goto LABEL_189;
      v149 = *(_QWORD *)(*v122 + 8);
      if ((v119 & (v119 - 1)) != 0)
      {
        if (v149 >= v119)
          v149 %= v119;
      }
      else
      {
        v149 &= v119 - 1;
      }
      v128 = (_QWORD *)(v554 + 8 * v149);
LABEL_188:
      *v128 = v122;
LABEL_189:
      ++*((_QWORD *)&v555 + 1);
LABEL_190:
      *((_BYTE *)v122 + 32) = v116;
      v114 += 424;
      ++v116;
      if (v114 == v115)
        goto LABEL_191;
    }
    v129 = (v119 & (v119 - 1)) != 0;
    if (v119 < 3)
      v129 = 1;
    v130 = v129 | (2 * v119);
    v131 = vcvtps_u32_f32(*(float *)v109.i32 / v556);
    if (v130 <= v131)
      prime = v131;
    else
      prime = v130;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v119 = *((_QWORD *)&v554 + 1);
    }
    if (prime <= v119)
    {
      if (prime >= v119)
        goto LABEL_167;
      v143 = vcvtps_u32_f32((float)*((unint64_t *)&v555 + 1) / v556);
      if (v119 < 3 || (v144 = (uint8x8_t)vcnt_s8((int8x8_t)v119), v144.i16[0] = vaddlv_u8(v144), v144.u32[0] > 1uLL))
      {
        v143 = std::__next_prime(v143);
      }
      else
      {
        v145 = 1 << -(char)__clz(v143 - 1);
        if (v143 >= 2)
          v143 = v145;
      }
      if (prime <= v143)
        prime = v143;
      if (prime >= v119)
      {
        v119 = *((_QWORD *)&v554 + 1);
        v148 = *((_QWORD *)&v554 + 1) - 1;
        if ((*((_QWORD *)&v554 + 1) & (*((_QWORD *)&v554 + 1) - 1)) != 0)
          goto LABEL_180;
        goto LABEL_168;
      }
      if (!prime)
      {
        v147 = (void *)v554;
        *(_QWORD *)&v554 = 0;
        if (v147)
          operator delete(v147);
        v119 = 0;
        *((_QWORD *)&v554 + 1) = 0;
        v148 = -1;
        goto LABEL_168;
      }
    }
    if (prime >> 61)
      sub_223174E94();
    v133 = operator new(8 * prime);
    v134 = (void *)v554;
    *(_QWORD *)&v554 = v133;
    if (v134)
      operator delete(v134);
    v135 = 0;
    *((_QWORD *)&v554 + 1) = prime;
    do
      *(_QWORD *)(v554 + 8 * v135++) = 0;
    while (prime != v135);
    v136 = (_QWORD **)v555;
    if (!(_QWORD)v555)
    {
LABEL_179:
      v119 = prime;
      v148 = prime - 1;
      if ((prime & (prime - 1)) != 0)
      {
LABEL_180:
        if (v118 >= v119)
        {
          v22 = v118 % v119;
          v127 = v554;
          v128 = *(_QWORD **)(v554 + 8 * (v118 % v119));
          if (!v128)
            goto LABEL_169;
        }
        else
        {
          v22 = v118;
          v127 = v554;
          v128 = *(_QWORD **)(v554 + 8 * v118);
          if (!v128)
            goto LABEL_169;
        }
        goto LABEL_120;
      }
LABEL_168:
      v22 = v148 & v118;
      v127 = v554;
      v128 = *(_QWORD **)(v554 + 8 * (v148 & v118));
      if (!v128)
        goto LABEL_169;
LABEL_120:
      *v122 = *v128;
      goto LABEL_188;
    }
    v137 = *(_QWORD *)(v555 + 8);
    v138 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v139 = v137 & v138;
      *(_QWORD *)(v554 + 8 * v139) = &v555;
      for (i = *v136; *v136; i = *v136)
      {
        v141 = i[1] & v138;
        if (v141 == v139)
        {
          v136 = (_QWORD **)i;
        }
        else if (*(_QWORD *)(v554 + 8 * v141))
        {
          *v136 = (_QWORD *)*i;
          v142 = 8 * v141;
          *i = **(_QWORD **)(v554 + v142);
          **(_QWORD **)(v554 + v142) = i;
        }
        else
        {
          *(_QWORD *)(v554 + 8 * v141) = v136;
          v136 = (_QWORD **)i;
          v139 = v141;
        }
      }
      goto LABEL_179;
    }
    if (v137 < prime)
    {
      *(_QWORD *)(v554 + 8 * v137) = &v555;
      v146 = *v136;
      if (*v136)
        goto LABEL_174;
      goto LABEL_166;
    }
    v137 %= prime;
    *(_QWORD *)(v554 + 8 * v137) = &v555;
    v146 = *v136;
    if (!*v136)
    {
LABEL_166:
      v119 = prime;
LABEL_167:
      v148 = v119 - 1;
      if ((v119 & (v119 - 1)) != 0)
        goto LABEL_180;
      goto LABEL_168;
    }
    while (1)
    {
LABEL_174:
      v151 = v146[1];
      if (v151 >= prime)
        v151 %= prime;
      if (v151 == v137)
        goto LABEL_173;
      if (*(_QWORD *)(v554 + 8 * v151))
      {
        *v136 = (_QWORD *)*v146;
        v150 = 8 * v151;
        *v146 = **(_QWORD **)(v554 + v150);
        **(_QWORD **)(v554 + v150) = v146;
        v146 = v136;
LABEL_173:
        v136 = (_QWORD **)v146;
        v146 = (_QWORD *)*v146;
        if (!v146)
          goto LABEL_179;
      }
      else
      {
        *(_QWORD *)(v554 + 8 * v151) = v136;
        v136 = (_QWORD **)v146;
        v146 = (_QWORD *)*v146;
        v137 = v151;
        if (!v146)
          goto LABEL_179;
      }
    }
  }
LABEL_191:
  v152 = v12;
  v153 = v12[1];
  v517 = v12[2];
  if (*(_QWORD *)&v153 != *(_QWORD *)&v517 && *(_QWORD *)(v521 + 208) != *(_QWORD *)(v521 + 216))
  {
    v154 = 0;
    do
    {
      v155 = *(_QWORD *)(v521 + 208);
      v156 = *(_QWORD *)(v521 + 216);
      while (v155 != v156)
      {
        v111.i32[0] = *(_DWORD *)(*(_QWORD *)&v153 + 20);
        v110.i64[0] = *(_QWORD *)(*(_QWORD *)&v153 + 12);
        v157 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v110.i8, 1);
        v109.i64[0] = *(_QWORD *)(v155 + 28);
        v158 = v110;
        v158.i32[2] = v111.i32[0];
        v159 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v109.i8, 1);
        v160 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v110.i8, *(float32x2_t *)v109.i8), v159, *(float32x2_t *)v110.i8, 1);
        v110.i32[0] = *(_DWORD *)(v155 + 36);
        v161 = vmla_f32(v160, *(float32x2_t *)v110.i8, v111).f32[0];
        v162 = v161 + -0.96593;
        if (v161 < 0.96593)
          v162 = 0.96593 - v161;
        v163 = v162 <= 0.000001;
        if (v161 >= 0.96593)
          v163 = 1;
        v164 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v158.i8, *(float32x2_t *)v158.i8), v157, v157), v111, v111);
        if (v164.f32[0] != 1.0)
        {
          v165 = v164.f32[0] + -1.0;
          if (v164.f32[0] < 1.0)
            v165 = 1.0 - v164.f32[0];
          if (v165 > 0.000001)
            v158 = (int8x16_t)vmulq_n_f32((float32x4_t)v158, 1.0 / sqrtf(v164.f32[0]));
        }
        v111 = **(float32x2_t **)&v153;
        v164.i32[0] = *(_DWORD *)(*(_QWORD *)&v153 + 8);
        v166 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v158.i8, 1);
        v167 = (float32x2_t)vextq_s8(v158, v158, 8uLL).u64[0];
        v168 = *(float32x2_t *)(v155 + 16);
        v157.i32[0] = *(_DWORD *)(v155 + 24);
        if (fabsf(vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(v168, *(float32x2_t *)v158.i8), v166, v168, 1), v167, v157), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v153, *(float32x2_t *)v158.i8), v166, *(float32x2_t *)v153, 1), v167, v164)).f32[0]) <= 0.1)
        {
          v109.i32[2] = *(_DWORD *)(v155 + 36);
          v169 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v109.i8, *(float32x2_t *)v109.i8), v159, v159), *(float32x2_t *)v110.i8, *(float32x2_t *)v110.i8).f32[0];
          if (v169 != 1.0)
          {
            v170 = v169 + -1.0;
            if (v169 < 1.0)
              v170 = 1.0 - v169;
            if (v170 > 0.000001)
              v109 = (int8x16_t)vmulq_n_f32((float32x4_t)v109, 1.0 / sqrtf(v169));
          }
          v110 = vextq_s8(v109, v109, 8uLL);
          v111 = vmla_f32(vmla_lane_f32(vmul_f32(v111, *(float32x2_t *)v109.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v111, 1), *(float32x2_t *)v109.i8, 1), *(float32x2_t *)v110.i8, v164);
          if (fabsf(vsub_f32(v111, vmla_f32(vmla_lane_f32(vmul_f32(v168, *(float32x2_t *)v109.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v168, 1), *(float32x2_t *)v109.i8, 1), *(float32x2_t *)v110.i8, v157)).f32[0]) > 0.1)v163 = 0;
          if (v163
            && (sub_223ECCCF0((uint64_t *)(v155 + 264), (uint64_t *)v593 + 11 * v154, (float)((float)v519[v154] * 0.1) + 1) & 1) != 0)
          {
            v171 = v553;
            LODWORD(v626[0]) = v154;
            v536[0] = v626;
            v172 = sub_223710828((uint64_t)(v553 + 7), (unsigned int *)v626, (uint64_t)&unk_2245BA939, (_DWORD **)v536)[3];
            v536[0] = (void *)v155;
            v173 = sub_2236BA6E0((uint64_t)(v171 + 12), v155, (uint64_t)&unk_2245BA939, (_OWORD **)v536);
            sub_223710574(v172, v173[4], v171, (uint64_t)v536);
          }
        }
        v155 += 424;
      }
      *(_QWORD *)&v153 += 24;
      ++v154;
    }
    while (*(_QWORD *)&v153 != *(_QWORD *)&v517);
    v152 = v12;
  }
  kdebug_trace();
  memset(v605, 0, sizeof(v605));
  LODWORD(v606) = 728309832;
  kdebug_trace();
  v175 = *(_QWORD *)(v521 + 208);
  v174 = *(_QWORD *)(v521 + 216);
  v176 = 0x21CFB2B78C13521DLL * ((v174 - v175) >> 3);
  v621 = v623;
  v622 = xmmword_22464BCD0;
  if (v176 > 0x20)
  {
    sub_22370D1C4(v634, (uint64_t)&v621, v623, 0x21CFB2B78C13521DLL * ((v174 - v175) >> 3));
  }
  else
  {
    if (v174 != v175)
      memset(v623, 255, 0x21CFB2B78C13521DLL * ((v174 - v175) >> 3));
    *(_QWORD *)&v622 = v176;
  }
  v178 = v152[1];
  v177 = v152[2];
  v179 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v177 - *(_QWORD *)&v178) >> 3);
  v616 = v618;
  v617 = xmmword_22464BCD0;
  if (v179 > 0x20)
  {
    sub_22370D1C4(v634, (uint64_t)&v616, v618, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v177 - *(_QWORD *)&v178) >> 3));
  }
  else
  {
    if (*(_QWORD *)&v177 != *(_QWORD *)&v178)
      memset(v618, 255, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v177 - *(_QWORD *)&v178) >> 3));
    *(_QWORD *)&v617 = v179;
  }
  sub_22370E008((uint64_t *)&v553, &v552, &v554, &v597);
  v180 = (void **)v597;
  v181 = (void **)v598[0];
  v601 = 0uLL;
  v602 = 0;
  sub_2236E9F74((char **)&v601, 0x9249249249249249 * (((uint64_t)v597 - v598[0]) >> 3));
  if (v180 != v181)
  {
    v182 = 0;
    v513 = v181;
    while (1)
    {
      sub_2236EA2D0((uint64_t)v536, (uint64_t)*v523 + 424 * *(unsigned int *)v180 + 264);
      v183 = (unsigned __int8 *)v180[1];
      v184 = (unsigned __int8 *)v180[2];
      while (v183 != v184)
      {
        sub_223ECBF68((__int16 **)v536, (unsigned __int16 **)*v523 + 53 * *v183 + 33, (__int16 **)v626);
        if (v536[0])
        {
          v536[1] = v536[0];
          operator delete(v536[0]);
        }
        *(_OWORD *)v536 = *(_OWORD *)v626;
        v537 = (std::__shared_weak_count *)v627;
        *(_QWORD *)&v627 = 0;
        v626[1] = 0;
        v626[0] = 0;
        LODWORD(v538) = DWORD2(v627);
        if (v539[0])
        {
          v539[1] = v539[0];
          operator delete(v539[0]);
        }
        *(_OWORD *)v539 = v628;
        v185 = v629;
        v629 = 0;
        v628 = 0uLL;
        v539[2] = v185;
        v539[3] = v630;
        v540 = v631;
        if (v542 == v633)
        {
          if (!(_BYTE)v542)
            goto LABEL_244;
          v541 = v632;
          v186 = v626[0];
          if (v626[0])
            goto LABEL_245;
        }
        else
        {
          if ((_BYTE)v542)
          {
            LOBYTE(v542) = 0;
LABEL_244:
            v186 = v626[0];
            if (!v626[0])
              goto LABEL_232;
LABEL_245:
            v626[1] = v186;
            operator delete(v186);
            goto LABEL_232;
          }
          v541 = v632;
          LOBYTE(v542) = 1;
          v186 = v626[0];
          if (v626[0])
            goto LABEL_245;
        }
LABEL_232:
        v183 += 4;
      }
      v187 = (unsigned __int8 *)v180[4];
      v188 = (unsigned __int8 *)v180[5];
      v189 = v187;
      if (v187 != v188)
        break;
LABEL_266:
      v516 = v189;
      v192 = (char *)v180[2];
      v626[0] = v180[1];
      v626[1] = &off_24EC57EF0;
      *(_QWORD *)&v628 = &v626[1];
      *(_QWORD *)&v627 = v523;
      *((_QWORD *)&v628 + 1) = v192;
      v629 = &off_24EC57EF0;
      v632 = &v629;
      v630 = v523;
      v612 = (char *)v626[0];
      v613[0] = &off_24EC57EF0;
      v614 = v613;
      v613[1] = v523;
      v608 = v192;
      v609[0] = &off_24EC57EF0;
      v193 = v609;
      v610 = v609;
      v609[1] = v523;
      if (v626[0] == v192)
      {
        v194 = 0;
      }
      else
      {
        v194 = 0;
        do
        {
          if (!v614)
            sub_223198474();
          v194 += (*(uint64_t (**)(_QWORD *))(*v614 + 48))(v614);
          v612 += 4;
        }
        while (v612 != v608);
        v193 = v610;
        if (v610 != v609)
        {
          if (v610)
          {
            v198 = 5;
            goto LABEL_276;
          }
          goto LABEL_277;
        }
        v193 = v609;
      }
      v198 = 4;
LABEL_276:
      (*(void (**)(_QWORD *))(*v193 + 8 * v198))(v193);
LABEL_277:
      v199 = v614;
      if (v614 == v613)
      {
        v199 = v613;
        v200 = 4;
LABEL_281:
        (*(void (**)(_QWORD *))(*v199 + 8 * v200))(v199);
      }
      else if (v614)
      {
        v200 = 5;
        goto LABEL_281;
      }
      v201 = v632;
      if (v632 == &v629)
      {
        v201 = &v629;
        v202 = 4;
LABEL_286:
        ((void (*)(uint64_t (***)()))(*v201)[v202])(v201);
      }
      else if (v632)
      {
        v202 = 5;
        goto LABEL_286;
      }
      v203 = (void **)v628;
      if ((void **)v628 == &v626[1])
      {
        v203 = &v626[1];
        v204 = 4;
LABEL_291:
        (*((void (**)(void **))*v203 + v204))(v203);
      }
      else if ((_QWORD)v628)
      {
        v204 = 5;
        goto LABEL_291;
      }
      v205 = *(char **)(v521 + 208);
      v206 = 0x21CFB2B78C13521DLL * ((uint64_t)(*(_QWORD *)(v521 + 216) - (_QWORD)v205) >> 3);
      v207 = (unsigned int *)v180[1];
      v208 = (unsigned int *)v180[2];
      v626[0] = v207;
      v626[1] = v205;
      *(_QWORD *)&v627 = v206;
      if (v207 == v208)
      {
        v211 = 0uLL;
        v212 = 0.0;
        v209 = 0uLL;
        v195.i32[0] = 0;
        v219 = (unsigned int *)v180[4];
        v220 = (unsigned int *)v180[5];
        if (v219 == v220)
          goto LABEL_301;
LABEL_299:
        v221 = fmaxf((float)v194 * 0.2, 1.0);
        do
        {
          v222 = *v219++;
          v223 = (float)*(unsigned int *)(*(_QWORD *)&v12[21] + 4 * v222);
          v224 = *(_QWORD *)&v12[1] + 24 * v222;
          v225 = vmulq_n_f32(v209, v195.f32[0]);
          v196.i64[0] = *(_QWORD *)v224;
          v196.i32[2] = *(_DWORD *)(v224 + 8);
          v226 = vmulq_n_f32((float32x4_t)v211, v195.f32[0]);
          v227 = v195.f32[0] * v212;
          v195.f32[0] = v195.f32[0] + (float)(v221 * v223);
          v228 = vaddq_f32(v225, vmulq_n_f32(v196, v221 * v223));
          v196 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v195.f32, 0);
          v209 = vdivq_f32(v228, v196);
          v197.i64[0] = *(_QWORD *)(v224 + 12);
          v197.i32[2] = *(_DWORD *)(v224 + 20);
          v197 = vmulq_n_f32(v197, v221 * v223);
          v211 = (int8x16_t)vdivq_f32(vaddq_f32(v226, v197), v196);
          v212 = (float)(v227 + (float)((float)(v221 * v223) * v223)) / v195.f32[0];
        }
        while (v219 != v220);
        goto LABEL_301;
      }
      v209 = 0uLL;
      v210 = 0.0;
      v211 = 0uLL;
      v212 = 0.0;
      do
      {
        v213 = *v207;
        if (v206 <= v213)
          sub_22457354C((unint64_t *)&v627, v213);
        v214 = &v205[424 * v213];
        v215 = *((float *)v214 + 10);
        v216 = v215 * (float)*((unsigned int *)v214 + 88);
        v195.i64[0] = *((_QWORD *)v214 + 2);
        v195.i32[2] = *((_DWORD *)v214 + 6);
        v217 = vmulq_n_f32(v195, v216);
        v195.f32[0] = v210 + v216;
        v218 = vaddq_f32(vmulq_n_f32(v209, v210), v217);
        v196 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v195.f32, 0);
        v209 = vdivq_f32(v218, v196);
        v197.i64[0] = *(_QWORD *)(v214 + 28);
        v197.i32[2] = *((_DWORD *)v214 + 9);
        v197 = vmulq_n_f32(v197, v216);
        v211 = (int8x16_t)vdivq_f32(vaddq_f32(vmulq_n_f32((float32x4_t)v211, v210), v197), v196);
        v212 = (float)((float)(v210 * v212) + (float)(v215 * v216)) / (float)(v210 + v216);
        v626[0] = ++v207;
        v210 = v210 + v216;
      }
      while (v207 != v208);
      v219 = (unsigned int *)v180[4];
      v220 = (unsigned int *)v180[5];
      if (v219 != v220)
        goto LABEL_299;
LABEL_301:
      v229 = (float32x2_t)vextq_s8(v211, v211, 8uLL).u64[0];
      v230 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v211.i8, *(float32x2_t *)v211.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v211.i8, 1), *(float32x2_t *)v211.i8, 1), v229, v229).f32[0];
      v231 = fabsf(v230);
      if (v230 != 0.0 && v231 > 0.000001)
        v211 = (int8x16_t)vmulq_n_f32((float32x4_t)v211, 1.0 / sqrtf(v230));
      v233 = &v205[424 * *(unsigned int *)v180];
      *(_OWORD *)v634 = *(_OWORD *)v233;
      *(_DWORD *)&v635[8] = v209.i32[2];
      *(_QWORD *)v635 = v209.i64[0];
      *(_DWORD *)&v635[20] = v211.i32[2];
      *(_QWORD *)&v635[12] = v211.i64[0];
      *(float *)&v635[24] = v212;
      v234 = *(_OWORD *)(v233 + 44);
      v235 = *(_OWORD *)(v233 + 76);
      *(_OWORD *)&v635[44] = *(_OWORD *)(v233 + 60);
      *(_OWORD *)&v635[60] = v235;
      *(_OWORD *)&v635[28] = v234;
      v236 = *(_OWORD *)(v233 + 92);
      v237 = *(_OWORD *)(v233 + 108);
      v238 = *(_OWORD *)(v233 + 140);
      *(_OWORD *)&v635[108] = *(_OWORD *)(v233 + 124);
      *(_OWORD *)&v635[124] = v238;
      *(_OWORD *)&v635[76] = v236;
      *(_OWORD *)&v635[92] = v237;
      v239 = *(_OWORD *)(v233 + 156);
      v240 = *(_OWORD *)(v233 + 172);
      v241 = *(_OWORD *)(v233 + 188);
      *(_QWORD *)&v635[188] = *(_QWORD *)(v233 + 204);
      *(_OWORD *)&v635[156] = v240;
      *(_OWORD *)&v635[172] = v241;
      *(_OWORD *)&v635[140] = v239;
      v242 = *(_OWORD *)(v233 + 216);
      v243 = *(_OWORD *)(v233 + 248);
      v637 = *(_OWORD *)(v233 + 232);
      v638 = v243;
      v636 = v242;
      sub_2236EA2D0((uint64_t)&v639, (uint64_t)v536);
      v648 = v194 + ((unint64_t)(v516 - v187) >> 2);
      LOBYTE(v649) = 0;
      v651 = 0;
      LOBYTE(__p) = 0;
      v654 = 0;
      LOBYTE(v626[0]) = v182;
      sub_2236EAB58((uint64_t)v531, (unsigned __int8 *)v626, v626);
      if (v539[0])
      {
        v539[1] = v539[0];
        operator delete(v539[0]);
      }
      if (v536[0])
      {
        v536[1] = v536[0];
        operator delete(v536[0]);
      }
      v244 = *((_QWORD *)&v601 + 1);
      if (*((_QWORD *)&v601 + 1) >= v602)
      {
        v257 = sub_22370CA60(&v601, (uint64_t)v634);
      }
      else
      {
        **((_OWORD **)&v601 + 1) = *(_OWORD *)v634;
        v245 = *(_QWORD *)v635;
        *(_DWORD *)(v244 + 24) = *(_DWORD *)&v635[8];
        *(_QWORD *)(v244 + 16) = v245;
        v246 = *(_QWORD *)&v635[12];
        *(_DWORD *)(v244 + 36) = *(_DWORD *)&v635[20];
        *(_QWORD *)(v244 + 28) = v246;
        v247 = *(_OWORD *)&v635[40];
        *(_OWORD *)(v244 + 40) = *(_OWORD *)&v635[24];
        *(_OWORD *)(v244 + 56) = v247;
        v248 = *(_OWORD *)&v635[56];
        v249 = *(_OWORD *)&v635[72];
        v250 = *(_OWORD *)&v635[88];
        *(_OWORD *)(v244 + 120) = *(_OWORD *)&v635[104];
        *(_OWORD *)(v244 + 104) = v250;
        *(_OWORD *)(v244 + 88) = v249;
        *(_OWORD *)(v244 + 72) = v248;
        v251 = *(_OWORD *)&v635[120];
        v252 = *(_OWORD *)&v635[136];
        v253 = *(_OWORD *)&v635[152];
        *(_OWORD *)(v244 + 184) = *(_OWORD *)&v635[168];
        *(_OWORD *)(v244 + 168) = v253;
        *(_OWORD *)(v244 + 152) = v252;
        *(_OWORD *)(v244 + 136) = v251;
        v254 = *(_OWORD *)&v635[184];
        v255 = v636;
        v256 = v637;
        *(_OWORD *)(v244 + 248) = v638;
        *(_OWORD *)(v244 + 232) = v256;
        *(_OWORD *)(v244 + 216) = v255;
        *(_OWORD *)(v244 + 200) = v254;
        *(_QWORD *)(v244 + 272) = 0;
        *(_QWORD *)(v244 + 280) = 0;
        *(_QWORD *)(v244 + 264) = 0;
        *(_OWORD *)(v244 + 264) = v639;
        *(_QWORD *)(v244 + 280) = v640;
        v639 = 0uLL;
        v640 = 0;
        *(_DWORD *)(v244 + 288) = v641;
        *(_QWORD *)(v244 + 304) = 0;
        *(_QWORD *)(v244 + 312) = 0;
        *(_QWORD *)(v244 + 296) = 0;
        *(_OWORD *)(v244 + 296) = v642;
        *(_QWORD *)(v244 + 312) = v643;
        v642 = 0uLL;
        v643 = 0;
        *(_QWORD *)(v244 + 320) = v644;
        *(_QWORD *)(v244 + 328) = v645;
        *(_BYTE *)(v244 + 336) = 0;
        *(_BYTE *)(v244 + 344) = 0;
        if (v647)
        {
          *(_QWORD *)(v244 + 336) = v646;
          *(_BYTE *)(v244 + 344) = 1;
        }
        *(_DWORD *)(v244 + 352) = v648;
        *(_BYTE *)(v244 + 360) = 0;
        *(_BYTE *)(v244 + 384) = 0;
        if (v651)
        {
          *(_QWORD *)(v244 + 360) = 0;
          *(_QWORD *)(v244 + 368) = 0;
          *(_QWORD *)(v244 + 376) = 0;
          *(_OWORD *)(v244 + 360) = v649;
          *(_QWORD *)(v244 + 376) = v650;
          v649 = 0uLL;
          v650 = 0;
          *(_BYTE *)(v244 + 384) = 1;
        }
        *(_BYTE *)(v244 + 392) = 0;
        *(_BYTE *)(v244 + 416) = 0;
        if (v654)
        {
          *(_QWORD *)(v244 + 392) = 0;
          *(_QWORD *)(v244 + 400) = 0;
          *(_QWORD *)(v244 + 408) = 0;
          *(_OWORD *)(v244 + 392) = __p;
          *(_QWORD *)(v244 + 408) = v653;
          __p = 0uLL;
          v653 = 0;
          *(_BYTE *)(v244 + 416) = 1;
        }
        v257 = v244 + 424;
      }
      *((_QWORD *)&v601 + 1) = v257;
      if (v654)
      {
        v258 = __p;
        if ((_QWORD)__p)
        {
          v259 = *((_QWORD *)&__p + 1);
          v260 = (void *)__p;
          if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
          {
            v261 = *((_QWORD *)&__p + 1);
            do
            {
              v263 = *(void **)(v261 - 24);
              v261 -= 24;
              v262 = v263;
              if (v263)
              {
                *(_QWORD *)(v259 - 16) = v262;
                operator delete(v262);
              }
              v259 = v261;
            }
            while (v261 != v258);
            v260 = (void *)__p;
          }
          *((_QWORD *)&__p + 1) = v258;
          operator delete(v260);
        }
      }
      if (v651 && (_QWORD)v649)
      {
        *((_QWORD *)&v649 + 1) = v649;
        operator delete((void *)v649);
      }
      if ((_QWORD)v642)
      {
        *((_QWORD *)&v642 + 1) = v642;
        operator delete((void *)v642);
      }
      if ((_QWORD)v639)
      {
        *((_QWORD *)&v639 + 1) = v639;
        operator delete((void *)v639);
      }
      v180 += 7;
      ++v182;
      if (v180 == v513)
        goto LABEL_336;
    }
    while (1)
    {
      sub_223ECBF68((__int16 **)v536, (unsigned __int16 **)v593 + 11 * *v187, (__int16 **)v626);
      if (v536[0])
      {
        v536[1] = v536[0];
        operator delete(v536[0]);
      }
      *(_OWORD *)v536 = *(_OWORD *)v626;
      v537 = (std::__shared_weak_count *)v627;
      *(_QWORD *)&v627 = 0;
      v626[1] = 0;
      v626[0] = 0;
      LODWORD(v538) = DWORD2(v627);
      if (v539[0])
      {
        v539[1] = v539[0];
        operator delete(v539[0]);
      }
      *(_OWORD *)v539 = v628;
      v190 = v629;
      v629 = 0;
      v628 = 0uLL;
      v539[2] = v190;
      v539[3] = v630;
      v540 = v631;
      if (v542 == v633)
      {
        if ((_BYTE)v542)
        {
          v541 = v632;
          v191 = v626[0];
          if (!v626[0])
            goto LABEL_250;
          goto LABEL_262;
        }
      }
      else
      {
        if (!(_BYTE)v542)
        {
          v541 = v632;
          LOBYTE(v542) = 1;
          v191 = v626[0];
          if (!v626[0])
            goto LABEL_250;
LABEL_262:
          v626[1] = v191;
          operator delete(v191);
          goto LABEL_250;
        }
        LOBYTE(v542) = 0;
      }
      v191 = v626[0];
      if (v626[0])
        goto LABEL_262;
LABEL_250:
      v187 += 4;
      if (v187 == v188)
      {
        v187 = (unsigned __int8 *)v180[4];
        v189 = (unsigned __int8 *)v180[5];
        goto LABEL_266;
      }
    }
  }
LABEL_336:
  v264 = v601;
  v265 = v602;
  v266 = *v523;
  v267 = v521;
  a4 = v508;
  if (*v523)
  {
    v520 = v601;
    v268 = *(_QWORD *)(v521 + 216);
    v269 = *v523;
    if ((void *)v268 != v266)
    {
      do
      {
        v268 -= 424;
        sub_2236EA79C(v268);
      }
      while ((void *)v268 != v266);
      v269 = *v523;
    }
    v267 = v521;
    *(_QWORD *)(v521 + 216) = v266;
    operator delete(v269);
    *v523 = 0;
    v523[1] = 0;
    v523[2] = 0;
    v264 = v520;
  }
  *(_OWORD *)(v267 + 208) = v264;
  *(_QWORD *)(v267 + 224) = v265;
  v270 = (char *)v597;
  if (v597)
  {
    v271 = (char *)v598[0];
    v272 = v597;
    if ((void *)v598[0] != v597)
    {
      do
      {
        v273 = (void *)*((_QWORD *)v271 - 3);
        if (v273)
        {
          *((_QWORD *)v271 - 2) = v273;
          operator delete(v273);
        }
        v274 = (void *)*((_QWORD *)v271 - 6);
        if (v274)
        {
          *((_QWORD *)v271 - 5) = v274;
          operator delete(v274);
        }
        v271 -= 56;
      }
      while (v271 != v270);
      v272 = v597;
    }
    v598[0] = v270;
    operator delete(v272);
  }
  if (*((_QWORD *)&v617 + 1) && v618 != v616)
    operator delete(v616);
  if (*((_QWORD *)&v622 + 1) && v623 != v621)
    operator delete(v621);
  kdebug_trace();
  v627 = 0u;
  *(_OWORD *)v626 = 0u;
  LODWORD(v628) = 728309840;
  kdebug_trace();
  sub_22370F264((uint64_t *)&v553, (char **)&v621);
  v275 = (unsigned int *)v621;
  v276 = (unsigned int *)v622;
  if (v621 != (void *)v622)
  {
    v277 = (unint64_t)(float)((float)((float)v507 * 0.0078125) * (float)v506);
    v278 = v593;
    v279 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v594[0] - (_QWORD)v593) >> 3);
    v280 = (unsigned int *)v621;
    while (v279 > *v280)
    {
      if (++v280 == (unsigned int *)v622)
        goto LABEL_364;
    }
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/KeyframePlaneIntegrator.cpp", 265, (uint64_t)"range::all_of(new_segment_indices, [&](auto idx) { return idx < warped_segment_regions.size(); })",
           97,
           (uint64_t)"",
           0,
           (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v275 = (unsigned int *)v621;
    v276 = (unsigned int *)v622;
    v278 = v593;
    v279 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v594[0] - (_QWORD)v593) >> 3);
LABEL_364:
    v536[0] = 0;
    v536[1] = 0;
    LODWORD(v538) = 0;
    v537 = 0;
    memset(v539, 0, sizeof(v539));
    v540 = 0x800080007FFF7FFFLL;
    LOBYTE(v541) = 0;
    LOBYTE(v542) = 0;
    v616 = v275;
    *(_QWORD *)&v617 = v278;
    for (*((_QWORD *)&v617 + 1) = v279; v275 != v276; v616 = v275)
    {
      v281 = *v275;
      if (v279 <= v281)
        sub_22457354C((unint64_t *)&v617 + 1, v281);
      if (v278[11 * v281 + 7] <= v277)
        goto LABEL_367;
      sub_223ECBF68((__int16 **)v536, (unsigned __int16 **)&v278[11 * v281], (__int16 **)v634);
      if (v536[0])
      {
        v536[1] = v536[0];
        operator delete(v536[0]);
      }
      *(_OWORD *)v536 = *(_OWORD *)v634;
      v537 = *(std::__shared_weak_count **)v635;
      *(_QWORD *)v635 = 0;
      v634[1] = 0;
      v634[0] = 0;
      LODWORD(v538) = *(_DWORD *)&v635[8];
      if (v539[0])
      {
        v539[1] = v539[0];
        operator delete(v539[0]);
      }
      *(_OWORD *)v539 = *(_OWORD *)&v635[16];
      v282 = *(_OWORD *)&v635[32];
      memset(&v635[16], 0, 24);
      *(_OWORD *)&v539[2] = v282;
      v540 = *(_QWORD *)&v635[48];
      if (v542 == v635[64])
      {
        if ((_BYTE)v542)
        {
          v541 = *(uint64_t (****)())&v635[56];
          v283 = v634[0];
          if (!v634[0])
            goto LABEL_366;
          goto LABEL_381;
        }
      }
      else
      {
        if (!(_BYTE)v542)
        {
          v541 = *(uint64_t (****)())&v635[56];
          LOBYTE(v542) = 1;
          v283 = v634[0];
          if (!v634[0])
            goto LABEL_366;
LABEL_381:
          v634[1] = v283;
          operator delete(v283);
          goto LABEL_366;
        }
        LOBYTE(v542) = 0;
      }
      v283 = v634[0];
      if (v634[0])
        goto LABEL_381;
LABEL_366:
      v275 = (unsigned int *)v616;
LABEL_367:
      ++v275;
    }
    v284 = *(_QWORD *)(v521 + 208);
    for (j = *(_QWORD *)(v521 + 216); v284 != j; v284 += 424)
      sub_2236B3F6C(v284, (uint64_t)v536);
    v286 = (unsigned int *)v621;
    v287 = (unsigned int *)v622;
    if (v621 != (void *)v622)
    {
      do
      {
        v288 = *v286;
        v289 = v593;
        v290 = (char *)v593 + 88 * *v286;
        v291 = *((_QWORD *)v290 + 7);
        if (v291 >= v277)
        {
          LOBYTE(v634[0]) = 29 * ((*(_DWORD *)(v521 + 216) - *(_DWORD *)(v521 + 208)) >> 3);
          sub_2236EAB58((uint64_t)v531, (unsigned __int8 *)v634, v634);
          v612 = (char *)*a7;
          sub_2232D69F0((unsigned int *)&v616, (uint64_t *)&v612);
          v634[0] = (void *)((v616 | ((unint64_t)BYTE4(v616) << 32) | ((unint64_t)BYTE5(v616) << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)HIBYTE(v616) << 56) | ((unint64_t)(HIWORD(HIDWORD(v616)) & 0xF | 0x40u) << 48));
          v634[1] = (void *)(((unint64_t)BYTE4(v617) << 32) | ((unint64_t)BYTE5(v617) << 40) | v617 & 0xFFFFFF00 | ((unint64_t)DWORD1(v617) << 32) & 0xFF00000000000000 | ((unint64_t)BYTE6(v617) << 48) | v617 & 0x3F | 0x80);
          v292 = *(_QWORD *)&v12[1] + 24 * *v286;
          v293 = *(_DWORD *)(v292 + 8);
          *(_QWORD *)v635 = *(_QWORD *)v292;
          *(_DWORD *)&v635[8] = v293;
          v294 = *(_DWORD *)(v292 + 20);
          *(_QWORD *)&v635[12] = *(_QWORD *)(v292 + 12);
          *(_DWORD *)&v635[20] = v294;
          *(float *)&v635[24] = (float)v291;
          memset(&v635[28], 0, 168);
          BYTE8(v637) = 0;
          BYTE8(v638) = 0;
          v640 = 0;
          v639 = 0uLL;
          v636 = 0uLL;
          LODWORD(v637) = 0;
          v639 = *(_OWORD *)v290;
          v640 = *((_QWORD *)v290 + 2);
          *((_QWORD *)v290 + 1) = 0;
          *((_QWORD *)v290 + 2) = 0;
          *(_QWORD *)v290 = 0;
          v295 = (char *)&v289[11 * v288];
          v641 = *((_DWORD *)v295 + 6);
          v643 = 0;
          v642 = 0uLL;
          v642 = *((_OWORD *)v295 + 2);
          v643 = *((_QWORD *)v295 + 6);
          *((_QWORD *)v295 + 4) = 0;
          *((_QWORD *)v295 + 5) = 0;
          *((_QWORD *)v295 + 6) = 0;
          v644 = *((_QWORD *)v290 + 7);
          v645 = *((_QWORD *)v295 + 8);
          LOBYTE(v646) = 0;
          v647 = 0;
          if (v295[80])
          {
            v646 = v289[11 * v288 + 9];
            v647 = 1;
          }
          v648 = 1;
          LOBYTE(v649) = 0;
          v651 = 0;
          LOBYTE(__p) = 0;
          v654 = 0;
          v296 = v521;
          v297 = *(_QWORD *)(v521 + 216);
          if (v297 >= *(_QWORD *)(v521 + 224))
          {
            v310 = sub_22370CA60(v523, (uint64_t)v634);
          }
          else
          {
            *(_OWORD *)v297 = *(_OWORD *)v634;
            v298 = *(_QWORD *)v635;
            *(_DWORD *)(v297 + 24) = *(_DWORD *)&v635[8];
            *(_QWORD *)(v297 + 16) = v298;
            v299 = *(_QWORD *)&v635[12];
            *(_DWORD *)(v297 + 36) = *(_DWORD *)&v635[20];
            *(_QWORD *)(v297 + 28) = v299;
            v300 = *(_OWORD *)&v635[40];
            *(_OWORD *)(v297 + 40) = *(_OWORD *)&v635[24];
            *(_OWORD *)(v297 + 56) = v300;
            v301 = *(_OWORD *)&v635[56];
            v302 = *(_OWORD *)&v635[72];
            v303 = *(_OWORD *)&v635[88];
            *(_OWORD *)(v297 + 120) = *(_OWORD *)&v635[104];
            *(_OWORD *)(v297 + 104) = v303;
            *(_OWORD *)(v297 + 88) = v302;
            *(_OWORD *)(v297 + 72) = v301;
            v304 = *(_OWORD *)&v635[120];
            v305 = *(_OWORD *)&v635[136];
            v306 = *(_OWORD *)&v635[152];
            *(_OWORD *)(v297 + 184) = *(_OWORD *)&v635[168];
            *(_OWORD *)(v297 + 168) = v306;
            *(_OWORD *)(v297 + 152) = v305;
            *(_OWORD *)(v297 + 136) = v304;
            v307 = *(_OWORD *)&v635[184];
            v308 = v636;
            v309 = v637;
            *(_OWORD *)(v297 + 248) = v638;
            *(_OWORD *)(v297 + 232) = v309;
            *(_OWORD *)(v297 + 216) = v308;
            *(_OWORD *)(v297 + 200) = v307;
            *(_QWORD *)(v297 + 272) = 0;
            *(_QWORD *)(v297 + 280) = 0;
            *(_QWORD *)(v297 + 264) = 0;
            *(_OWORD *)(v297 + 264) = v639;
            *(_QWORD *)(v297 + 280) = v640;
            v639 = 0uLL;
            v640 = 0;
            *(_DWORD *)(v297 + 288) = v641;
            *(_QWORD *)(v297 + 304) = 0;
            *(_QWORD *)(v297 + 312) = 0;
            *(_QWORD *)(v297 + 296) = 0;
            *(_OWORD *)(v297 + 296) = v642;
            *(_QWORD *)(v297 + 312) = v643;
            v642 = 0uLL;
            v643 = 0;
            *(_QWORD *)(v297 + 320) = v644;
            *(_QWORD *)(v297 + 328) = v645;
            *(_BYTE *)(v297 + 336) = 0;
            *(_BYTE *)(v297 + 344) = 0;
            if (v647)
            {
              *(_QWORD *)(v297 + 336) = v646;
              *(_BYTE *)(v297 + 344) = 1;
            }
            *(_DWORD *)(v297 + 352) = v648;
            *(_BYTE *)(v297 + 360) = 0;
            *(_BYTE *)(v297 + 384) = 0;
            if (v651)
            {
              *(_QWORD *)(v297 + 360) = 0;
              *(_QWORD *)(v297 + 368) = 0;
              *(_QWORD *)(v297 + 376) = 0;
              *(_OWORD *)(v297 + 360) = v649;
              *(_QWORD *)(v297 + 376) = v650;
              v649 = 0uLL;
              v650 = 0;
              *(_BYTE *)(v297 + 384) = 1;
            }
            *(_BYTE *)(v297 + 392) = 0;
            *(_BYTE *)(v297 + 416) = 0;
            if (v654)
            {
              *(_QWORD *)(v297 + 392) = 0;
              *(_QWORD *)(v297 + 400) = 0;
              *(_QWORD *)(v297 + 408) = 0;
              *(_OWORD *)(v297 + 392) = __p;
              *(_QWORD *)(v297 + 408) = v653;
              __p = 0uLL;
              v653 = 0;
              *(_BYTE *)(v297 + 416) = 1;
            }
            v310 = v297 + 424;
            *(_QWORD *)(v521 + 216) = v297 + 424;
          }
          *(_QWORD *)(v521 + 216) = v310;
          if (v654)
          {
            v311 = __p;
            if ((_QWORD)__p)
            {
              v312 = *((_QWORD *)&__p + 1);
              v313 = (void *)__p;
              if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
              {
                v314 = *((_QWORD *)&__p + 1);
                do
                {
                  v316 = *(void **)(v314 - 24);
                  v314 -= 24;
                  v315 = v316;
                  if (v316)
                  {
                    *(_QWORD *)(v312 - 16) = v315;
                    operator delete(v315);
                  }
                  v312 = v314;
                }
                while (v314 != v311);
                v313 = (void *)__p;
                v296 = v521;
              }
              *((_QWORD *)&__p + 1) = v311;
              operator delete(v313);
            }
          }
          if (v651 && (_QWORD)v649)
          {
            *((_QWORD *)&v649 + 1) = v649;
            operator delete((void *)v649);
          }
          if ((_QWORD)v642)
          {
            *((_QWORD *)&v642 + 1) = v642;
            operator delete((void *)v642);
          }
          if ((_QWORD)v639)
          {
            *((_QWORD *)&v639 + 1) = v639;
            operator delete((void *)v639);
          }
          sub_22370FD80((uint64_t)v553, &v552, (__int128 *)(*(_QWORD *)(v296 + 216) - 424), *v286, 0);
        }
        ++v286;
      }
      while (v286 != v287);
    }
    if (v539[0])
    {
      v539[1] = v539[0];
      operator delete(v539[0]);
    }
    a4 = v508;
    if (v536[0])
    {
      v536[1] = v536[0];
      operator delete(v536[0]);
    }
    v275 = (unsigned int *)v621;
  }
  v92 = (_OWORD *)v521;
  if (v275)
  {
    *(_QWORD *)&v622 = v275;
    operator delete(v275);
  }
  kdebug_trace();
  kdebug_trace();
  v317 = (char *)v593;
  if (v593)
  {
    v318 = (char *)v594[0];
    v319 = v593;
    if ((void *)v594[0] != v593)
    {
      do
      {
        v320 = (void *)*((_QWORD *)v318 - 7);
        if (v320)
        {
          *((_QWORD *)v318 - 6) = v320;
          operator delete(v320);
        }
        v321 = (void *)*((_QWORD *)v318 - 11);
        if (v321)
        {
          *((_QWORD *)v318 - 10) = v321;
          operator delete(v321);
        }
        v318 -= 88;
      }
      while (v318 != v317);
      v319 = v593;
    }
    v594[0] = v317;
    operator delete(v319);
  }
  if (v550)
  {
    v551 = v550;
    operator delete(v550);
  }
  v322 = (std::__shared_weak_count *)v546;
  if (v546)
  {
    v323 = (unint64_t *)(v546 + 1);
    do
      v324 = __ldaxr(v323);
    while (__stlxr(v324 - 1, v323));
    if (!v324)
    {
      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
      std::__shared_weak_count::__release_weak(v322);
    }
  }
LABEL_442:
  v528 = 0;
  v529 = 0;
  v527 = &v528;
  sub_2236E71D8((uint64_t)v92, a4, (uint64_t)v531, (uint64_t **)v634, a8[1]);
  sub_2236E7910((uint64_t)v92, (uint64_t)v531, &v553, (uint64_t)v534, (uint64_t)v634, (uint64_t)v536);
  v325 = (void **)v536[0];
  if (v536[0] != &v536[1])
  {
    while (1)
    {
      v327 = *((_DWORD *)v325 + 11);
      v328 = v528;
      v329 = &v528;
      v330 = &v528;
      if (v528)
        break;
LABEL_487:
      v337 = (char *)operator new(0x30uLL);
      *(_OWORD *)(v337 + 28) = *(_OWORD *)((char *)v325 + 28);
      *((_DWORD *)v337 + 11) = 0;
      *(_QWORD *)v337 = 0;
      *((_QWORD *)v337 + 1) = 0;
      *((_QWORD *)v337 + 2) = v330;
      *v329 = (uint64_t *)v337;
      v338 = (uint64_t *)v337;
      if (*v527)
      {
        v527 = (uint64_t **)*v527;
        v338 = *v329;
      }
      sub_2231A9A8C(v528, v338);
      v529 = (uint64_t *)((char *)v529 + 1);
      *((_DWORD *)v337 + 11) |= v327;
      v339 = (void **)v325[1];
      if (!v339)
        goto LABEL_495;
      do
      {
LABEL_492:
        v340 = v339;
        v339 = (void **)*v339;
      }
      while (v339);
LABEL_447:
      v325 = v340;
      if (v340 == &v536[1])
        goto LABEL_443;
    }
    v331 = *((unsigned __int8 *)v325 + 28);
    while (1)
    {
      v330 = (uint64_t **)v328;
      v332 = *((unsigned __int8 *)v328 + 28);
      v333 = v331 >= v332;
      if (v331 != v332)
        break;
      v334 = *((unsigned __int8 *)v325 + 29);
      v332 = *((unsigned __int8 *)v330 + 29);
      v333 = v334 >= v332;
      if (v334 == v332
        && (v334 = *((unsigned __int8 *)v325 + 30),
            v332 = *((unsigned __int8 *)v330 + 30),
            v333 = v334 >= v332,
            v334 == v332)
        && (v334 = *((unsigned __int8 *)v325 + 31),
            v332 = *((unsigned __int8 *)v330 + 31),
            v333 = v334 >= v332,
            v334 == v332))
      {
        v335 = *((unsigned __int8 *)v325 + 32);
        v336 = *((unsigned __int8 *)v330 + 32);
        if (v335 != v336)
          goto LABEL_467;
        v335 = *((unsigned __int8 *)v325 + 33);
        v336 = *((unsigned __int8 *)v330 + 33);
        if (v335 != v336)
          goto LABEL_467;
        v335 = *((unsigned __int8 *)v325 + 34);
        v336 = *((unsigned __int8 *)v330 + 34);
        if (v335 != v336)
          goto LABEL_467;
        v335 = *((unsigned __int8 *)v325 + 35);
        v336 = *((unsigned __int8 *)v330 + 35);
        if (v335 != v336)
          goto LABEL_467;
        v335 = *((unsigned __int8 *)v325 + 36);
        v336 = *((unsigned __int8 *)v330 + 36);
        if (v335 != v336)
          goto LABEL_467;
        v335 = *((unsigned __int8 *)v325 + 37);
        v336 = *((unsigned __int8 *)v330 + 37);
        if (v335 != v336)
          goto LABEL_467;
        v335 = *((unsigned __int8 *)v325 + 38);
        v336 = *((unsigned __int8 *)v330 + 38);
        if (v335 != v336)
          goto LABEL_467;
        v335 = *((unsigned __int8 *)v325 + 39);
        v336 = *((unsigned __int8 *)v330 + 39);
        if (v335 != v336)
          goto LABEL_467;
        v335 = *((unsigned __int8 *)v325 + 40);
        v336 = *((unsigned __int8 *)v330 + 40);
        if (v335 != v336
          || (v335 = *((unsigned __int8 *)v325 + 41), v336 = *((unsigned __int8 *)v330 + 41), v335 != v336)
          || (v335 = *((unsigned __int8 *)v325 + 42), v336 = *((unsigned __int8 *)v330 + 42), v335 != v336)
          || (v335 = *((unsigned __int8 *)v325 + 43), v336 = *((unsigned __int8 *)v330 + 43), v335 != v336))
        {
LABEL_467:
          if (v335 < v336)
            goto LABEL_450;
        }
        v332 = *((unsigned __int8 *)v330 + 32);
        v334 = *((unsigned __int8 *)v325 + 32);
        if (v332 == v334)
        {
          v332 = *((unsigned __int8 *)v330 + 33);
          v334 = *((unsigned __int8 *)v325 + 33);
          if (v332 == v334)
          {
            v332 = *((unsigned __int8 *)v330 + 34);
            v334 = *((unsigned __int8 *)v325 + 34);
            if (v332 == v334)
            {
              v332 = *((unsigned __int8 *)v330 + 35);
              v334 = *((unsigned __int8 *)v325 + 35);
              if (v332 == v334)
              {
                v332 = *((unsigned __int8 *)v330 + 36);
                v334 = *((unsigned __int8 *)v325 + 36);
                if (v332 == v334)
                {
                  v332 = *((unsigned __int8 *)v330 + 37);
                  v334 = *((unsigned __int8 *)v325 + 37);
                  if (v332 == v334)
                  {
                    v332 = *((unsigned __int8 *)v330 + 38);
                    v334 = *((unsigned __int8 *)v325 + 38);
                    if (v332 == v334)
                    {
                      v332 = *((unsigned __int8 *)v330 + 39);
                      v334 = *((unsigned __int8 *)v325 + 39);
                      if (v332 == v334)
                      {
                        v332 = *((unsigned __int8 *)v330 + 40);
                        v334 = *((unsigned __int8 *)v325 + 40);
                        if (v332 == v334)
                        {
                          v332 = *((unsigned __int8 *)v330 + 41);
                          v334 = *((unsigned __int8 *)v325 + 41);
                          if (v332 == v334)
                          {
                            v332 = *((unsigned __int8 *)v330 + 42);
                            v334 = *((unsigned __int8 *)v325 + 42);
                            if (v332 == v334)
                            {
                              v332 = *((unsigned __int8 *)v330 + 43);
                              v334 = *((unsigned __int8 *)v325 + 43);
                              if (v332 == v334)
                              {
                                *((_DWORD *)v330 + 11) |= v327;
                                v339 = (void **)v325[1];
                                if (v339)
                                  goto LABEL_492;
                                do
                                {
LABEL_495:
                                  v340 = (void **)v325[2];
                                  v123 = *v340 == v325;
                                  v325 = v340;
                                }
                                while (!v123);
                                goto LABEL_447;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_484:
        if (v332 >= v334)
        {
          *((_DWORD *)v330 + 11) |= v327;
          v339 = (void **)v325[1];
          if (!v339)
            goto LABEL_495;
          goto LABEL_492;
        }
        v328 = v330[1];
        if (!v328)
        {
          v329 = v330 + 1;
          goto LABEL_487;
        }
      }
      else
      {
LABEL_482:
        if (v333)
          goto LABEL_484;
LABEL_450:
        v328 = *v330;
        v329 = v330;
        if (!*v330)
          goto LABEL_487;
      }
    }
    v334 = *((unsigned __int8 *)v325 + 28);
    goto LABEL_482;
  }
LABEL_443:
  sub_223198030((uint64_t)v536, (_QWORD *)v536[1]);
  sub_223198030((uint64_t)v634, (_QWORD *)v634[1]);
  kdebug_trace();
  if (*(_BYTE *)a6)
  {
    if (*(_QWORD *)(v521 + 208) != *(_QWORD *)(v521 + 216))
    {
      v326 = (void **)v532[0];
      if (v532[0])
      {
        do
        {
          while (1)
          {
            v341 = *((unsigned __int8 *)v326 + 16);
            sub_223ECE884((unsigned __int16 **)*v523 + 53 * *((unsigned __int8 *)v326 + 16) + 33, (int8x16_t **)v634);
            v342 = (uint64_t)*v523 + 424 * v341;
            v343 = (_QWORD *)(v342 + 360);
            if (*(_BYTE *)(v342 + 384))
              break;
            *v343 = 0;
            *(_QWORD *)(v342 + 368) = 0;
            *(_QWORD *)(v342 + 376) = 0;
            *(_OWORD *)v343 = *(_OWORD *)v634;
            *(_QWORD *)(v342 + 376) = *(_QWORD *)v635;
            *(_BYTE *)(v342 + 384) = 1;
            v326 = (void **)*v326;
            if (!v326)
              goto LABEL_503;
          }
          v344 = (void *)*v343;
          if (*v343)
          {
            *(_QWORD *)(v342 + 368) = v344;
            operator delete(v344);
            *v343 = 0;
            v343[1] = 0;
            v343[2] = 0;
          }
          *(_OWORD *)v343 = *(_OWORD *)v634;
          v343[2] = *(_QWORD *)v635;
          v326 = (void **)*v326;
        }
        while (v326);
      }
    }
  }
LABEL_503:
  if (*(_DWORD *)(a6 + 4))
  {
    if (*(_QWORD *)(v521 + 208) != *(_QWORD *)(v521 + 216))
    {
      if (v532[1])
      {
        v345 = (void **)v532[0];
        if (v532[0])
        {
          do
          {
            sub_223705EA8(a6, v521, *((unsigned __int8 *)v345 + 16));
            v345 = (void **)*v345;
          }
          while (v345);
        }
      }
    }
    sub_2236E9AD0((uint64_t *)v521, (uint64_t)v531, (uint64_t **)v634);
    sub_2236E7910(v521, (uint64_t)v531, &v553, (uint64_t)v534, (uint64_t)v634, (uint64_t)v536);
    v346 = (void **)v536[0];
    if (v536[0] == &v536[1])
    {
LABEL_509:
      sub_223198030((uint64_t)v536, (_QWORD *)v536[1]);
      sub_223198030((uint64_t)v634, (_QWORD *)v634[1]);
      goto LABEL_510;
    }
    while (1)
    {
      v357 = *((_DWORD *)v346 + 11);
      v358 = v528;
      v359 = &v528;
      v360 = &v528;
      if (v528)
        break;
LABEL_564:
      v367 = (char *)operator new(0x30uLL);
      *(_OWORD *)(v367 + 28) = *(_OWORD *)((char *)v346 + 28);
      *((_DWORD *)v367 + 11) = 0;
      *(_QWORD *)v367 = 0;
      *((_QWORD *)v367 + 1) = 0;
      *((_QWORD *)v367 + 2) = v360;
      *v359 = (uint64_t *)v367;
      v368 = (uint64_t *)v367;
      if (*v527)
      {
        v527 = (uint64_t **)*v527;
        v368 = *v359;
      }
      sub_2231A9A8C(v528, v368);
      v529 = (uint64_t *)((char *)v529 + 1);
      *((_DWORD *)v367 + 11) |= v357;
      v369 = (void **)v346[1];
      if (!v369)
        goto LABEL_572;
      do
      {
LABEL_569:
        v370 = v369;
        v369 = (void **)*v369;
      }
      while (v369);
LABEL_524:
      v346 = v370;
      if (v370 == &v536[1])
        goto LABEL_509;
    }
    v361 = *((unsigned __int8 *)v346 + 28);
    while (1)
    {
      v360 = (uint64_t **)v358;
      v362 = *((unsigned __int8 *)v358 + 28);
      v363 = v361 >= v362;
      if (v361 != v362)
        break;
      v364 = *((unsigned __int8 *)v346 + 29);
      v362 = *((unsigned __int8 *)v360 + 29);
      v363 = v364 >= v362;
      if (v364 == v362
        && (v364 = *((unsigned __int8 *)v346 + 30),
            v362 = *((unsigned __int8 *)v360 + 30),
            v363 = v364 >= v362,
            v364 == v362)
        && (v364 = *((unsigned __int8 *)v346 + 31),
            v362 = *((unsigned __int8 *)v360 + 31),
            v363 = v364 >= v362,
            v364 == v362))
      {
        v365 = *((unsigned __int8 *)v346 + 32);
        v366 = *((unsigned __int8 *)v360 + 32);
        if (v365 != v366)
          goto LABEL_544;
        v365 = *((unsigned __int8 *)v346 + 33);
        v366 = *((unsigned __int8 *)v360 + 33);
        if (v365 != v366)
          goto LABEL_544;
        v365 = *((unsigned __int8 *)v346 + 34);
        v366 = *((unsigned __int8 *)v360 + 34);
        if (v365 != v366)
          goto LABEL_544;
        v365 = *((unsigned __int8 *)v346 + 35);
        v366 = *((unsigned __int8 *)v360 + 35);
        if (v365 != v366)
          goto LABEL_544;
        v365 = *((unsigned __int8 *)v346 + 36);
        v366 = *((unsigned __int8 *)v360 + 36);
        if (v365 != v366)
          goto LABEL_544;
        v365 = *((unsigned __int8 *)v346 + 37);
        v366 = *((unsigned __int8 *)v360 + 37);
        if (v365 != v366)
          goto LABEL_544;
        v365 = *((unsigned __int8 *)v346 + 38);
        v366 = *((unsigned __int8 *)v360 + 38);
        if (v365 != v366)
          goto LABEL_544;
        v365 = *((unsigned __int8 *)v346 + 39);
        v366 = *((unsigned __int8 *)v360 + 39);
        if (v365 != v366)
          goto LABEL_544;
        v365 = *((unsigned __int8 *)v346 + 40);
        v366 = *((unsigned __int8 *)v360 + 40);
        if (v365 != v366
          || (v365 = *((unsigned __int8 *)v346 + 41), v366 = *((unsigned __int8 *)v360 + 41), v365 != v366)
          || (v365 = *((unsigned __int8 *)v346 + 42), v366 = *((unsigned __int8 *)v360 + 42), v365 != v366)
          || (v365 = *((unsigned __int8 *)v346 + 43), v366 = *((unsigned __int8 *)v360 + 43), v365 != v366))
        {
LABEL_544:
          if (v365 < v366)
            goto LABEL_527;
        }
        v362 = *((unsigned __int8 *)v360 + 32);
        v364 = *((unsigned __int8 *)v346 + 32);
        if (v362 == v364)
        {
          v362 = *((unsigned __int8 *)v360 + 33);
          v364 = *((unsigned __int8 *)v346 + 33);
          if (v362 == v364)
          {
            v362 = *((unsigned __int8 *)v360 + 34);
            v364 = *((unsigned __int8 *)v346 + 34);
            if (v362 == v364)
            {
              v362 = *((unsigned __int8 *)v360 + 35);
              v364 = *((unsigned __int8 *)v346 + 35);
              if (v362 == v364)
              {
                v362 = *((unsigned __int8 *)v360 + 36);
                v364 = *((unsigned __int8 *)v346 + 36);
                if (v362 == v364)
                {
                  v362 = *((unsigned __int8 *)v360 + 37);
                  v364 = *((unsigned __int8 *)v346 + 37);
                  if (v362 == v364)
                  {
                    v362 = *((unsigned __int8 *)v360 + 38);
                    v364 = *((unsigned __int8 *)v346 + 38);
                    if (v362 == v364)
                    {
                      v362 = *((unsigned __int8 *)v360 + 39);
                      v364 = *((unsigned __int8 *)v346 + 39);
                      if (v362 == v364)
                      {
                        v362 = *((unsigned __int8 *)v360 + 40);
                        v364 = *((unsigned __int8 *)v346 + 40);
                        if (v362 == v364)
                        {
                          v362 = *((unsigned __int8 *)v360 + 41);
                          v364 = *((unsigned __int8 *)v346 + 41);
                          if (v362 == v364)
                          {
                            v362 = *((unsigned __int8 *)v360 + 42);
                            v364 = *((unsigned __int8 *)v346 + 42);
                            if (v362 == v364)
                            {
                              v362 = *((unsigned __int8 *)v360 + 43);
                              v364 = *((unsigned __int8 *)v346 + 43);
                              if (v362 == v364)
                              {
                                *((_DWORD *)v360 + 11) |= v357;
                                v369 = (void **)v346[1];
                                if (v369)
                                  goto LABEL_569;
                                do
                                {
LABEL_572:
                                  v370 = (void **)v346[2];
                                  v123 = *v370 == v346;
                                  v346 = v370;
                                }
                                while (!v123);
                                goto LABEL_524;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_561:
        if (v362 >= v364)
        {
          *((_DWORD *)v360 + 11) |= v357;
          v369 = (void **)v346[1];
          if (!v369)
            goto LABEL_572;
          goto LABEL_569;
        }
        v358 = v360[1];
        if (!v358)
        {
          v359 = v360 + 1;
          goto LABEL_564;
        }
      }
      else
      {
LABEL_559:
        if (v363)
          goto LABEL_561;
LABEL_527:
        v358 = *v360;
        v359 = v360;
        if (!*v360)
          goto LABEL_564;
      }
    }
    v364 = *((unsigned __int8 *)v346 + 28);
    goto LABEL_559;
  }
LABEL_510:
  kdebug_trace();
  sub_2231CDAE0(*(_QWORD *)(a3 + 16), (uint64_t)v536);
  v634[0] = &off_24EC204C0;
  v347 = v536[1];
  v348 = v537;
  if (v537)
  {
    v349 = (unint64_t *)&v537->__shared_owners_;
    do
      v350 = __ldxr(v349);
    while (__stxr(v350 + 1, v349));
    v351 = (__int16)v541;
    do
      v352 = __ldxr(v349);
    while (__stxr(v352 + 1, v349));
    v353 = v538;
    *(_OWORD *)&v635[16] = *(_OWORD *)v539;
    *(_OWORD *)&v635[32] = *(_OWORD *)&v539[2];
    *(_QWORD *)&v635[48] = v540;
    do
      v354 = __ldxr(v349);
    while (__stxr(v354 + 1, v349));
    v634[1] = v347;
    *(_QWORD *)v635 = v348;
    *(_QWORD *)&v635[8] = v353;
    *(_WORD *)&v635[56] = v351;
    do
      v355 = __ldaxr(v349);
    while (__stlxr(v355 - 1, v349));
    if (!v355)
    {
      ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
      std::__shared_weak_count::__release_weak(v348);
    }
    do
      v356 = __ldaxr(v349);
    while (__stlxr(v356 - 1, v349));
    if (!v356)
    {
      ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
      std::__shared_weak_count::__release_weak(v348);
    }
  }
  else
  {
    v634[1] = v536[1];
    *(_OWORD *)v635 = __PAIR128__(v538, 0);
    *(_OWORD *)&v635[16] = *(_OWORD *)v539;
    *(_OWORD *)&v635[32] = *(_OWORD *)&v539[2];
    *(_QWORD *)&v635[48] = v540;
    *(_WORD *)&v635[56] = (_WORD)v541;
  }
  sub_223725FE8(v521, (uint64_t)v634, v531);
  v371 = *(std::__shared_weak_count **)v635;
  if (*(_QWORD *)v635)
  {
    v372 = (unint64_t *)(*(_QWORD *)v635 + 8);
    do
      v373 = __ldaxr(v372);
    while (__stlxr(v373 - 1, v372));
    if (!v373)
    {
      ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
      std::__shared_weak_count::__release_weak(v371);
    }
  }
  v374 = v537;
  if (v537)
  {
    v375 = (unint64_t *)&v537->__shared_owners_;
    do
      v376 = __ldaxr(v375);
    while (__stlxr(v376 - 1, v375));
    if (!v376)
    {
      ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
      std::__shared_weak_count::__release_weak(v374);
    }
  }
  v377 = v532[0];
  v378 = &v626[1];
  v626[0] = v532[0];
  v626[1] = &off_24EC57F80;
  *(_QWORD *)&v627 = v534;
  *((_QWORD *)&v627 + 1) = v521;
  *(_QWORD *)&v628 = &v626[1];
  *((_QWORD *)&v628 + 1) = 0;
  if (v532[0])
  {
    v379 = &v626[1];
    while (!(*((unsigned int (**)(void **, uint64_t))*v379 + 6))(v379, (uint64_t)v377 + 16))
    {
      v377 = *(void **)v626[0];
      v626[0] = v377;
      if (v377 == *((void **)&v628 + 1))
        goto LABEL_594;
      v379 = (void **)v628;
      if (!(_QWORD)v628)
        sub_223198474();
    }
    v377 = v626[0];
LABEL_594:
    v380 = (void **)v628;
  }
  else
  {
    v380 = &v626[1];
  }
  v381 = &v545;
  v544 = 0;
  v545 = &off_24EC57F80;
  v546 = v534;
  v547 = v521;
  *(_QWORD *)&v548 = &v545;
  *((_QWORD *)&v548 + 1) = 0;
  v382 = &v634[1];
  v634[0] = v377;
  if (!v380)
  {
    v383 = (__int128 *)&v635[16];
    goto LABEL_599;
  }
  if (v380 != &v626[1])
  {
    v383 = &v628;
    *(_QWORD *)&v635[16] = v380;
LABEL_599:
    *(_QWORD *)v383 = 0;
    *(_QWORD *)&v635[24] = *((_QWORD *)&v628 + 1);
    *(_QWORD *)&v635[32] = 0;
    v384 = &off_24EC57F80;
    v385 = a9;
    goto LABEL_600;
  }
  *(_QWORD *)&v635[16] = &v634[1];
  v386 = ((__n128 (*)(uint64_t, uint64_t))*((_QWORD *)v626[1] + 3))((uint64_t)&v626[1], (uint64_t)&v634[1]);
  *(_QWORD *)&v635[24] = *((_QWORD *)&v628 + 1);
  *(_QWORD *)&v635[32] = v544;
  v385 = a9;
  if (!(_QWORD)v548)
  {
    *(_QWORD *)&v635[64] = 0;
    *(_QWORD *)&v635[72] = *((_QWORD *)&v548 + 1);
    v389 = (uint64_t (***)())v548;
    if (&v545)
      goto LABEL_601;
    goto LABEL_610;
  }
  if ((uint64_t (***)())v548 != &v545)
  {
    *(_OWORD *)&v635[64] = v548;
    *(_QWORD *)&v548 = 0;
    v389 = 0;
    if (&v545)
      goto LABEL_601;
LABEL_610:
    v390 = 4;
    goto LABEL_611;
  }
  v384 = v545;
LABEL_600:
  *(_QWORD *)&v635[64] = &v635[40];
  v386 = ((__n128 (*)(uint64_t, uint64_t))v384[3])((uint64_t)&v545, (uint64_t)&v635[40]);
  *(_QWORD *)&v635[72] = *((_QWORD *)&v548 + 1);
  v389 = (uint64_t (***)())v548;
  if ((uint64_t (***)())v548 == &v545)
    goto LABEL_610;
LABEL_601:
  if (!v389)
    goto LABEL_612;
  v390 = 5;
  v381 = v389;
LABEL_611:
  ((void (*)(uint64_t (***)(), __n128))(*v381)[v390])(v381, v386);
LABEL_612:
  if ((void **)v628 == &v626[1])
  {
    v391 = 4;
  }
  else
  {
    if (!(_QWORD)v628)
      goto LABEL_617;
    v391 = 5;
    v378 = (void **)v628;
  }
  (*((void (**)(void **, __n128))*v378 + v391))(v378, v386);
LABEL_617:
  v536[0] = v634[0];
  v392 = v536;
  if (!*(_QWORD *)&v635[16])
  {
LABEL_620:
    v392[4] = 0;
    goto LABEL_622;
  }
  if (*(void ***)&v635[16] != &v634[1])
  {
    v392 = v634;
    v539[0] = *(void **)&v635[16];
    goto LABEL_620;
  }
  v539[0] = &v536[1];
  (*((void (**)(void **, void **, __n128))v634[1] + 3))(&v634[1], &v536[1], v386);
LABEL_622:
  v393.n128_u64[0] = *(_QWORD *)&v635[24];
  *(_OWORD *)&v539[1] = *(_OWORD *)&v635[24];
  v394 = v536;
  if (!*(_QWORD *)&v635[64])
  {
LABEL_625:
    v394[10] = 0;
    goto LABEL_627;
  }
  v394 = v634;
  if (*(_BYTE **)&v635[64] != &v635[40])
  {
    v542 = *(void ***)&v635[64];
    goto LABEL_625;
  }
  v542 = &v539[3];
  (*(void (**)(_BYTE *))(*(_QWORD *)&v635[40] + 24))(&v635[40]);
LABEL_627:
  v395 = *(_QWORD **)&v635[64];
  v543 = *(_QWORD *)&v635[72];
  if (*(_BYTE **)&v635[64] == &v635[40])
  {
    v396 = 4;
    v395 = &v635[40];
  }
  else
  {
    if (!*(_QWORD *)&v635[64])
      goto LABEL_632;
    v396 = 5;
  }
  (*(void (**)(_QWORD *))(*v395 + 8 * v396))(v395);
LABEL_632:
  if (*(void ***)&v635[16] == &v634[1])
  {
    v397 = 4;
  }
  else
  {
    if (!*(_QWORD *)&v635[16])
      goto LABEL_637;
    v397 = 5;
    v382 = *(void ***)&v635[16];
  }
  (*((void (**)(void **))*v382 + v397))(v382);
LABEL_637:
  v398 = v539[0];
  v561 = v536[0];
  v399 = v562;
  if (!v539[0])
  {
LABEL_640:
    v563 = v398;
    goto LABEL_642;
  }
  if (v539[0] != &v536[1])
  {
    v398 = (_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v539[0] + 16))(v539[0]);
    goto LABEL_640;
  }
  v563 = v562;
  (*((void (**)(void **, _QWORD *))v536[1] + 3))(&v536[1], v562);
LABEL_642:
  v564 = v539[1];
  v557 = v539[2];
  v400 = v558;
  v401 = (uint64_t)v542;
  if (!v542)
  {
LABEL_645:
    v559 = (_QWORD *)v401;
    goto LABEL_647;
  }
  if (v542 != &v539[3])
  {
    v401 = (*((uint64_t (**)(void **))*v542 + 2))(v542);
    goto LABEL_645;
  }
  v559 = v558;
  (*((void (**)(void **, _QWORD *))v539[3] + 3))(&v539[3], v558);
LABEL_647:
  v524 = 0;
  v560 = v543;
  v525 = 0;
  v526 = 0;
  v402 = (uint64_t)v563;
  v577 = v561;
  if (!v563)
  {
LABEL_650:
    v579 = (_QWORD *)v402;
    goto LABEL_652;
  }
  if (v563 != v562)
  {
    v402 = (*(uint64_t (**)(_QWORD *))(*v563 + 16))(v563);
    goto LABEL_650;
  }
  v579 = v578;
  (*(void (**)(_QWORD *, _QWORD *))(v562[0] + 24))(v562, v578);
LABEL_652:
  v580 = v564;
  v403 = (uint64_t)v559;
  v573 = v557;
  v404 = v574;
  if (!v559)
  {
LABEL_655:
    v575 = (_QWORD *)v403;
    goto LABEL_657;
  }
  if (v559 != v558)
  {
    v403 = (*(uint64_t (**)(_QWORD *))(*v559 + 16))(v559);
    goto LABEL_655;
  }
  v575 = v574;
  (*(void (**)(_QWORD *, _QWORD *))(v558[0] + 24))(v558, v574);
LABEL_657:
  v576 = v560;
  v405 = (uint64_t)v579;
  v634[0] = v577;
  v406 = &v634[1];
  if (!v579)
  {
LABEL_660:
    *(_QWORD *)&v635[16] = v405;
    goto LABEL_662;
  }
  if (v579 != v578)
  {
    v405 = (*(uint64_t (**)(_QWORD *))(*v579 + 16))(v579);
    goto LABEL_660;
  }
  *(_QWORD *)&v635[16] = &v634[1];
  (*(void (**)(_QWORD *, void **))(v578[0] + 24))(v578, &v634[1]);
LABEL_662:
  v407 = v578;
  *(_QWORD *)&v635[24] = v580;
  v408 = (uint64_t)v575;
  v626[0] = v573;
  v409 = &v626[1];
  if (!v575)
  {
LABEL_665:
    *(_QWORD *)&v628 = v408;
    goto LABEL_667;
  }
  if (v575 != v574)
  {
    v408 = (*(uint64_t (**)(_QWORD *))(*v575 + 16))(v575);
    goto LABEL_665;
  }
  *(_QWORD *)&v628 = &v626[1];
  (*(void (**)(_QWORD *, void **))(v574[0] + 24))(v574, &v626[1]);
LABEL_667:
  *((_QWORD *)&v628 + 1) = v576;
  v410 = v634[0];
  v411 = v626[0];
  if (v634[0] == v626[0])
  {
    v412 = 0;
  }
  else
  {
    v412 = 0;
    do
    {
      v410 = (_QWORD *)*v410;
      v634[0] = v410;
      if (v410 != *(_QWORD **)&v635[24])
      {
        do
        {
          if (!*(_QWORD *)&v635[16])
            sub_223198474();
          v413 = (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)&v635[16] + 48))(*(_QWORD *)&v635[16], v410 + 2);
          v410 = v634[0];
          if ((v413 & 1) != 0)
            break;
          v410 = *(_QWORD **)v634[0];
          v634[0] = v410;
        }
        while (v410 != *(_QWORD **)&v635[24]);
        v411 = v626[0];
      }
      ++v412;
    }
    while (v410 != v411);
  }
  if ((void **)v628 == &v626[1])
  {
    v414 = 4;
  }
  else
  {
    if (!(_QWORD)v628)
      goto LABEL_682;
    v414 = 5;
    v409 = (void **)v628;
  }
  (*((void (**)(void **))*v409 + v414))(v409);
LABEL_682:
  if (*(void ***)&v635[16] == &v634[1])
  {
    v415 = 4;
  }
  else
  {
    if (!*(_QWORD *)&v635[16])
      goto LABEL_687;
    v415 = 5;
    v406 = *(void ***)&v635[16];
  }
  (*((void (**)(void **))*v406 + v415))(v406);
LABEL_687:
  if (v575 == v574)
  {
    v416 = 4;
  }
  else
  {
    if (!v575)
      goto LABEL_692;
    v416 = 5;
    v404 = v575;
  }
  (*(void (**)(_QWORD *))(*v404 + 8 * v416))(v404);
LABEL_692:
  if (v579 == v578)
  {
    v417 = 4;
  }
  else
  {
    if (!v579)
      goto LABEL_697;
    v417 = 5;
    v407 = v579;
  }
  (*(void (**)(_QWORD *))(*v407 + 8 * v417))(v407);
LABEL_697:
  v418 = (uint64_t)v563;
  v569 = v561;
  v419 = v570;
  if (!v563)
  {
LABEL_700:
    v571 = (_QWORD *)v418;
    goto LABEL_702;
  }
  if (v563 != v562)
  {
    v418 = (*(uint64_t (**)(_QWORD *))(*v563 + 16))(v563);
    goto LABEL_700;
  }
  v571 = v570;
  (*(void (**)(_QWORD *, _QWORD *))(v562[0] + 24))(v562, v570);
LABEL_702:
  v572 = v564;
  v420 = (uint64_t)v559;
  v565 = v557;
  v421 = v566;
  if (!v559)
  {
LABEL_705:
    v567 = (_QWORD *)v420;
    goto LABEL_707;
  }
  if (v559 != v558)
  {
    v420 = (*(uint64_t (**)(_QWORD *))(*v559 + 16))(v559);
    goto LABEL_705;
  }
  v567 = v566;
  (*(void (**)(_QWORD *, _QWORD *))(v558[0] + 24))(v558, v566);
LABEL_707:
  v568 = v560;
  if (!v412)
    goto LABEL_894;
  v422 = operator new(v412);
  v524 = v422;
  v525 = v422;
  v526 = &v422[v412];
  v423 = (uint64_t)v571;
  v585 = v569;
  if (!v571)
    goto LABEL_711;
  if (v571 != v570)
  {
    v423 = (*(uint64_t (**)(_QWORD *))(*v571 + 16))(v571);
LABEL_711:
    v587 = (_QWORD *)v423;
    goto LABEL_713;
  }
  v587 = v586;
  (*(void (**)(_QWORD *, _QWORD *))(v570[0] + 24))(v570, v586);
LABEL_713:
  v588 = v572;
  v424 = (uint64_t)v567;
  v581 = v565;
  if (!v567)
  {
LABEL_716:
    v583 = (_QWORD *)v424;
    goto LABEL_718;
  }
  if (v567 != v566)
  {
    v424 = (*(uint64_t (**)(_QWORD *))(*v567 + 16))(v567);
    goto LABEL_716;
  }
  v583 = v582;
  (*(void (**)(_QWORD *, _QWORD *))(v566[0] + 24))(v566, v582);
LABEL_718:
  v584 = v568;
  v425 = (uint64_t)v587;
  v593 = v585;
  if (!v587)
  {
LABEL_721:
    v595 = (_QWORD *)v425;
    goto LABEL_723;
  }
  if (v587 != v586)
  {
    v425 = (*(uint64_t (**)(_QWORD *))(*v587 + 16))(v587);
    goto LABEL_721;
  }
  v595 = v594;
  (*(void (**)(_QWORD *, _QWORD *))(v586[0] + 24))(v586, v594);
LABEL_723:
  v596 = v588;
  v426 = (uint64_t)v583;
  v589 = v581;
  if (!v583)
  {
LABEL_726:
    v591 = (_QWORD *)v426;
    goto LABEL_728;
  }
  if (v583 != v582)
  {
    v426 = (*(uint64_t (**)(_QWORD *))(*v583 + 16))(v583);
    goto LABEL_726;
  }
  v591 = v590;
  (*(void (**)(_QWORD *, _QWORD *))(v582[0] + 24))(v582, v590);
LABEL_728:
  v592 = v584;
  v427 = (uint64_t)v595;
  *(_QWORD *)&v601 = v593;
  if (!v595)
  {
LABEL_731:
    v603 = (_OWORD *)v427;
    goto LABEL_733;
  }
  if (v595 != v594)
  {
    v427 = (*(uint64_t (**)(_QWORD *))(*v595 + 16))(v595);
    goto LABEL_731;
  }
  v603 = (__int128 *)((char *)&v601 + 8);
  (*(void (**)(_QWORD *, char *))(v594[0] + 24))(v594, (char *)&v601 + 8);
LABEL_733:
  v604 = v596;
  v428 = (uint64_t)v591;
  v597 = v589;
  if (!v591)
  {
LABEL_736:
    v599 = (_QWORD *)v428;
    goto LABEL_738;
  }
  if (v591 != v590)
  {
    v428 = (*(uint64_t (**)(_QWORD *))(*v591 + 16))(v591);
    goto LABEL_736;
  }
  v599 = v598;
  (*(void (**)(_QWORD *, _QWORD *))(v590[0] + 24))(v590, v598);
LABEL_738:
  v600 = v592;
  v608 = (char *)v601;
  v429 = (void **)&v608;
  v430 = v609;
  if (!v603)
  {
LABEL_741:
    v429[4] = 0;
    goto LABEL_743;
  }
  if (v603 != (__int128 *)((char *)&v601 + 8))
  {
    v429 = (void **)&v601;
    v610 = v603;
    goto LABEL_741;
  }
  v610 = v609;
  (*(void (**)(char *, _QWORD *))(*((_QWORD *)&v601 + 1) + 24))((char *)&v601 + 8, v609);
LABEL_743:
  v611 = v604;
  *(_QWORD *)&v605[0] = v597;
  v431 = (void **)v605;
  v432 = (_QWORD *)v605 + 1;
  if (!v599)
  {
LABEL_746:
    v431[4] = 0;
    goto LABEL_748;
  }
  if (v599 != v598)
  {
    v431 = &v597;
    v606 = v599;
    goto LABEL_746;
  }
  v606 = (_OWORD *)((char *)v605 + 8);
  (*(void (**)(_QWORD *, char *))(v598[0] + 24))(v598, (char *)v605 + 8);
LABEL_748:
  v607 = v600;
  v433 = v608;
  v621 = v608;
  v434 = &v621;
  v435 = &v622;
  if (!v610)
  {
LABEL_751:
    v434[4] = 0;
    goto LABEL_753;
  }
  if (v610 != v609)
  {
    v434 = (void **)&v608;
    v624 = (__int128 *)v610;
    goto LABEL_751;
  }
  v624 = &v622;
  (*(void (**)(_QWORD *, __int128 *))(v609[0] + 24))(v609, &v622);
  v433 = v621;
LABEL_753:
  v436 = v611;
  v625 = v611;
  v626[0] = v433;
  v437 = &v626[1];
  if (!v624)
  {
    *(_QWORD *)&v628 = 0;
    *((_QWORD *)&v628 + 1) = v611;
    v544 = v433;
    goto LABEL_758;
  }
  if (v624 == &v622)
  {
    *(_QWORD *)&v628 = &v626[1];
    (*(void (**)(__int128 *, void **))(v622 + 24))(&v622, &v626[1]);
    v438 = (void **)v628;
    v436 = v625;
    *((_QWORD *)&v628 + 1) = v625;
    v544 = v626[0];
    if (!(_QWORD)v628)
      goto LABEL_758;
LABEL_762:
    if (v438 == &v626[1])
    {
      *(_QWORD *)&v548 = &v545;
      v393 = ((__n128 (*)(uint64_t, uint64_t))*((_QWORD *)v626[1] + 3))((uint64_t)&v626[1], (uint64_t)&v545);
      *((_QWORD *)&v548 + 1) = *((_QWORD *)&v628 + 1);
      v439 = (void **)v628;
      if ((void **)v628 != &v626[1])
        goto LABEL_759;
    }
    else
    {
      *(_QWORD *)&v548 = v438;
      *(_QWORD *)&v628 = 0;
      *((_QWORD *)&v548 + 1) = v436;
      v439 = 0;
      if (v626 != (void **)-8)
        goto LABEL_759;
    }
LABEL_764:
    v440 = 4;
    goto LABEL_765;
  }
  v438 = (void **)(*(uint64_t (**)(__int128 *))(*(_QWORD *)v624 + 16))(v624);
  *(_QWORD *)&v628 = v438;
  v436 = v625;
  *((_QWORD *)&v628 + 1) = v625;
  v544 = v626[0];
  if (v438)
    goto LABEL_762;
LABEL_758:
  *(_QWORD *)&v548 = 0;
  *((_QWORD *)&v548 + 1) = v436;
  v439 = (void **)v628;
  if ((void **)v628 == &v626[1])
    goto LABEL_764;
LABEL_759:
  if (!v439)
    goto LABEL_766;
  v440 = 5;
  v437 = v439;
LABEL_765:
  (*((void (**)(void **))*v437 + v440))(v437);
LABEL_766:
  v441 = *(void **)&v605[0];
  v612 = *(char **)&v605[0];
  v442 = (void **)&v612;
  v443 = v613;
  if (!v606)
  {
LABEL_769:
    v442[4] = 0;
    goto LABEL_771;
  }
  if (v606 != (_OWORD *)((char *)v605 + 8))
  {
    v442 = (void **)v605;
    v614 = v606;
    goto LABEL_769;
  }
  v614 = v613;
  (*(void (**)(char *, _QWORD *))(*((_QWORD *)&v605[0] + 1) + 24))((char *)v605 + 8, v613);
  v441 = v612;
LABEL_771:
  v444 = v607;
  v615 = v607;
  v626[0] = v441;
  v445 = &v626[1];
  if (!v614)
  {
    *(_QWORD *)&v628 = 0;
    *((_QWORD *)&v628 + 1) = v607;
    v616 = v441;
    goto LABEL_776;
  }
  if (v614 == v613)
  {
    *(_QWORD *)&v628 = &v626[1];
    (*(void (**)(_QWORD *, void **))(v613[0] + 24))(v613, &v626[1]);
    v446 = (void **)v628;
    v444 = v615;
    *((_QWORD *)&v628 + 1) = v615;
    v616 = v626[0];
    if (!(_QWORD)v628)
      goto LABEL_776;
LABEL_780:
    if (v446 == &v626[1])
    {
      v619 = &v617;
      v393 = ((__n128 (*)(uint64_t, uint64_t))*((_QWORD *)v626[1] + 3))((uint64_t)&v626[1], (uint64_t)&v617);
      v620 = *((_QWORD *)&v628 + 1);
      v447 = (void **)v628;
      if ((void **)v628 != &v626[1])
        goto LABEL_777;
    }
    else
    {
      v619 = (__int128 *)v446;
      *(_QWORD *)&v628 = 0;
      v620 = v444;
      v447 = 0;
      if (v626 != (void **)-8)
        goto LABEL_777;
    }
LABEL_782:
    v448 = 4;
    goto LABEL_783;
  }
  v446 = (void **)(*(uint64_t (**)(_QWORD *))(*v614 + 16))(v614);
  *(_QWORD *)&v628 = v446;
  v444 = v615;
  *((_QWORD *)&v628 + 1) = v615;
  v616 = v626[0];
  if (v446)
    goto LABEL_780;
LABEL_776:
  v619 = 0;
  v620 = v444;
  v447 = (void **)v628;
  if ((void **)v628 == &v626[1])
    goto LABEL_782;
LABEL_777:
  if (!v447)
    goto LABEL_784;
  v448 = 5;
  v445 = v447;
LABEL_783:
  (*((void (**)(void **))*v445 + v448))(v445);
LABEL_784:
  v634[0] = v544;
  v449 = &v634[1];
  if (!(_QWORD)v548)
  {
    v450 = (__int128 *)&v635[16];
    goto LABEL_788;
  }
  if ((uint64_t (***)())v548 != &v545)
  {
    v450 = &v548;
    *(_QWORD *)&v635[16] = v548;
LABEL_788:
    *(_QWORD *)v450 = 0;
    goto LABEL_790;
  }
  *(_QWORD *)&v635[16] = &v634[1];
  v393 = ((__n128 (*)(uint64_t, uint64_t))v545[3])((uint64_t)&v545, (uint64_t)&v634[1]);
LABEL_790:
  *(_QWORD *)&v635[24] = *((_QWORD *)&v548 + 1);
  *(_QWORD *)&v635[32] = v616;
  v451 = &v635[40];
  if (v619)
  {
    if (v619 == &v617)
    {
      *(_QWORD *)&v635[64] = &v635[40];
      (*(void (**)(__n128))(v617 + 24))(v393);
    }
    else
    {
      *(_QWORD *)&v635[64] = v619;
      v619 = 0;
    }
  }
  else
  {
    *(_QWORD *)&v635[64] = 0;
  }
  v452 = v619;
  *(_QWORD *)&v635[72] = v620;
  if (v619 == &v617)
  {
    v453 = 4;
    v452 = &v617;
  }
  else
  {
    if (!v619)
      goto LABEL_800;
    v453 = 5;
  }
  (*(void (**)(__n128))(*(_QWORD *)v452 + 8 * v453))(v393);
LABEL_800:
  if (v614 == v613)
  {
    v454 = 4;
  }
  else
  {
    if (!v614)
      goto LABEL_805;
    v454 = 5;
    v443 = v614;
  }
  (*(void (**)(_QWORD *, __n128))(*v443 + 8 * v454))(v443, v393);
LABEL_805:
  v455 = (uint64_t (***)())v548;
  if ((uint64_t (***)())v548 == &v545)
  {
    v456 = 4;
    v455 = &v545;
  }
  else
  {
    if (!(_QWORD)v548)
      goto LABEL_810;
    v456 = 5;
  }
  ((void (*)(__n128))(*v455)[v456])(v393);
LABEL_810:
  if (v624 == &v622)
  {
    v457 = 4;
  }
  else
  {
    if (!v624)
      goto LABEL_815;
    v457 = 5;
    v435 = v624;
  }
  (*(void (**)(__int128 *, __n128))(*(_QWORD *)v435 + 8 * v457))(v435, v393);
LABEL_815:
  if (v606 == (_OWORD *)((char *)v605 + 8))
  {
    v459 = 4;
    v458 = v598;
    v385 = a9;
  }
  else
  {
    v458 = v598;
    v385 = a9;
    if (!v606)
      goto LABEL_820;
    v459 = 5;
    v432 = v606;
  }
  (*(void (**)(_QWORD *, __n128))(*v432 + 8 * v459))(v432, v393);
LABEL_820:
  if (v610 == v609)
  {
    v460 = 4;
    v400 = v558;
  }
  else
  {
    v400 = v558;
    if (!v610)
      goto LABEL_825;
    v460 = 5;
    v430 = v610;
  }
  (*(void (**)(_QWORD *, __n128))(*v430 + 8 * v460))(v430, v393);
LABEL_825:
  if (v599 == v598)
  {
    v461 = 4;
    v419 = v570;
  }
  else
  {
    v419 = v570;
    if (!v599)
      goto LABEL_830;
    v461 = 5;
    v458 = v599;
  }
  (*(void (**)(_QWORD *, __n128))(*v458 + 8 * v461))(v458, v393);
LABEL_830:
  v462 = (_QWORD *)&v601 + 1;
  if (v603 == (__int128 *)((char *)&v601 + 8))
  {
    v463 = 4;
  }
  else
  {
    if (!v603)
      goto LABEL_835;
    v463 = 5;
    v462 = v603;
  }
  (*(void (**)(__n128))(*v462 + 8 * v463))(v393);
LABEL_835:
  v464 = *(_QWORD *)&v635[16];
  v626[0] = v634[0];
  v465 = &v626[1];
  if (!*(_QWORD *)&v635[16])
  {
LABEL_838:
    *(_QWORD *)&v628 = v464;
    goto LABEL_840;
  }
  if (*(void ***)&v635[16] != &v634[1])
  {
    v464 = (*(uint64_t (**)(__n128))(**(_QWORD **)&v635[16] + 16))(v393);
    goto LABEL_838;
  }
  *(_QWORD *)&v628 = &v626[1];
  (*((void (**)(void **, void **, __n128))v634[1] + 3))(&v634[1], &v626[1], v393);
LABEL_840:
  *((_QWORD *)&v628 + 1) = *(_QWORD *)&v635[24];
  v544 = *(void **)&v635[32];
  v466 = &v545;
  v467 = *(_QWORD *)&v635[64];
  if (*(_QWORD *)&v635[64])
  {
    if (*(_BYTE **)&v635[64] == &v635[40])
    {
      *(_QWORD *)&v548 = &v545;
      (*(void (**)(_BYTE *, uint64_t (***)(), __n128))(*(_QWORD *)&v635[40] + 24))(&v635[40], &v545, v393);
      goto LABEL_845;
    }
    v467 = (*(uint64_t (**)(__n128))(**(_QWORD **)&v635[64] + 16))(v393);
  }
  *(_QWORD *)&v548 = v467;
LABEL_845:
  *((_QWORD *)&v548 + 1) = *(_QWORD *)&v635[72];
  v468 = v626[0];
  v469 = v544;
  while (v468 != v469)
  {
    *v422 = v468[16];
    v468 = *(_BYTE **)v468;
    v626[0] = v468;
    if (v468 != *((_BYTE **)&v628 + 1))
    {
      do
      {
        if (!(_QWORD)v628)
          sub_223198474();
        v470 = (*(uint64_t (**)(_QWORD, _BYTE *, __n128))(*(_QWORD *)v628 + 48))(v628, v468 + 16, v393);
        v468 = v626[0];
        if ((v470 & 1) != 0)
          break;
        v468 = *(_BYTE **)v626[0];
        v626[0] = v468;
      }
      while (v468 != *((_BYTE **)&v628 + 1));
      v469 = v544;
    }
    ++v422;
  }
  if ((uint64_t (***)())v548 == &v545)
  {
    v471 = 4;
  }
  else
  {
    if (!(_QWORD)v548)
      goto LABEL_859;
    v471 = 5;
    v466 = (uint64_t (***)())v548;
  }
  ((void (*)(uint64_t (***)(), __n128))(*v466)[v471])(v466, v393);
LABEL_859:
  if ((void **)v628 == &v626[1])
  {
    v473 = 4;
    v472 = v582;
  }
  else
  {
    v472 = v582;
    if (!(_QWORD)v628)
      goto LABEL_864;
    v473 = 5;
    v465 = (void **)v628;
  }
  (*((void (**)(void **, __n128))*v465 + v473))(v465, v393);
LABEL_864:
  if (*(_BYTE **)&v635[64] == &v635[40])
  {
    v474 = 4;
  }
  else
  {
    if (!*(_QWORD *)&v635[64])
      goto LABEL_869;
    v474 = 5;
    v451 = *(_QWORD **)&v635[64];
  }
  (*(void (**)(_QWORD *, __n128))(*v451 + 8 * v474))(v451, v393);
LABEL_869:
  if (*(void ***)&v635[16] == &v634[1])
  {
    v475 = 4;
    v399 = v562;
  }
  else
  {
    v399 = v562;
    if (!*(_QWORD *)&v635[16])
      goto LABEL_874;
    v475 = 5;
    v449 = *(void ***)&v635[16];
  }
  (*((void (**)(void **, __n128))*v449 + v475))(v449, v393);
LABEL_874:
  v476 = v590;
  if (v591 == v590)
  {
    v478 = 4;
    v477 = v586;
    v421 = v566;
  }
  else
  {
    v477 = v586;
    v421 = v566;
    if (!v591)
      goto LABEL_879;
    v478 = 5;
    v476 = v591;
  }
  (*(void (**)(__n128))(*v476 + 8 * v478))(v393);
LABEL_879:
  v479 = v594;
  if (v595 == v594)
  {
    v480 = 4;
  }
  else
  {
    if (!v595)
      goto LABEL_884;
    v480 = 5;
    v479 = v595;
  }
  (*(void (**)(__n128))(*v479 + 8 * v480))(v393);
LABEL_884:
  v525 = v422;
  if (v583 == v582)
  {
    v481 = 4;
  }
  else
  {
    if (!v583)
      goto LABEL_889;
    v481 = 5;
    v472 = v583;
  }
  (*(void (**)(_QWORD *, __n128))(*v472 + 8 * v481))(v472, v393);
LABEL_889:
  if (v587 == v586)
  {
    v482 = 4;
  }
  else
  {
    if (!v587)
      goto LABEL_894;
    v482 = 5;
    v477 = v587;
  }
  (*(void (**)(_QWORD *, __n128))(*v477 + 8 * v482))(v477, v393);
LABEL_894:
  if (v567 == v566)
  {
    v483 = 4;
  }
  else
  {
    if (!v567)
      goto LABEL_899;
    v483 = 5;
    v421 = v567;
  }
  (*(void (**)(_QWORD *))(*v421 + 8 * v483))(v421);
LABEL_899:
  if (v571 == v570)
  {
    v484 = 4;
  }
  else
  {
    if (!v571)
      goto LABEL_904;
    v484 = 5;
    v419 = v571;
  }
  (*(void (**)(_QWORD *))(*v419 + 8 * v484))(v419);
LABEL_904:
  if (v559 == v558)
  {
    v487 = 4;
    v485 = &v536[1];
    v486 = &v539[3];
  }
  else
  {
    v485 = &v536[1];
    v486 = &v539[3];
    if (!v559)
      goto LABEL_909;
    v487 = 5;
    v400 = v559;
  }
  (*(void (**)(_QWORD *))(*v400 + 8 * v487))(v400);
LABEL_909:
  if (v563 == v562)
  {
    v489 = 4;
    v488 = (float32x2_t *)v521;
  }
  else
  {
    v488 = (float32x2_t *)v521;
    if (!v563)
      goto LABEL_914;
    v489 = 5;
    v399 = v563;
  }
  (*(void (**)(_QWORD *))(*v399 + 8 * v489))(v399);
LABEL_914:
  if (v542 == &v539[3])
  {
    v490 = 4;
  }
  else
  {
    if (!v542)
      goto LABEL_919;
    v490 = 5;
    v486 = v542;
  }
  (*((void (**)(void **))*v486 + v490))(v486);
LABEL_919:
  if (v539[0] == &v536[1])
  {
    v491 = 4;
  }
  else
  {
    if (!v539[0])
      goto LABEL_924;
    v491 = 5;
    v485 = (void **)v539[0];
  }
  v393.n128_f64[0] = (*((double (**)(void **))*v485 + v491))(v485);
LABEL_924:
  sub_22371B448(v488, v515 + 181, (unsigned __int8 **)&v524, v393.n128_f64[0], v387, v388);
  v492 = v553;
  v553 = 0;
  v494 = v527;
  v493 = v528;
  *v385 = v492;
  v385[1] = (uint64_t *)v494;
  v385[2] = v493;
  v495 = (uint64_t *)(v385 + 2);
  v496 = v529;
  v385[3] = v529;
  if (v496)
  {
    v493[2] = (uint64_t)v495;
    v527 = &v528;
    v528 = 0;
    v529 = 0;
    v493 = 0;
    v497 = v524;
    if (!v524)
      goto LABEL_927;
    goto LABEL_926;
  }
  v385[1] = v495;
  v497 = v524;
  if (v524)
  {
LABEL_926:
    v525 = v497;
    operator delete(v497);
    v493 = v528;
  }
LABEL_927:
  sub_223198030((uint64_t)&v527, v493);
  v498 = v532[0];
  if (v532[0])
  {
    do
    {
      v499 = (_QWORD *)*v498;
      operator delete(v498);
      v498 = v499;
    }
    while (v499);
  }
  v500 = v531[0];
  v531[0] = 0;
  if (v500)
    operator delete(v500);
  if (v534[0])
  {
    v534[1] = v534[0];
    operator delete(v534[0]);
  }
  v501 = (_QWORD *)v555;
  if ((_QWORD)v555)
  {
    do
    {
      v502 = (_QWORD *)*v501;
      operator delete(v501);
      v501 = v502;
    }
    while (v502);
  }
  v503 = (void *)v554;
  *(_QWORD *)&v554 = 0;
  if (v503)
    operator delete(v503);
  result = v553;
  v553 = 0;
  if (result)
  {
    v505 = sub_22370F604(result);
    return (uint64_t *)MEMORY[0x227684CE8](v505, 0x10A0C402FF47DCALL);
  }
  return result;
}

void sub_22370BE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a64;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;

  v66 = v64;
  if (STACK[0x5A0])
  {
    v68 = v65;
    if (v66 != STACK[0x590])
      operator delete((void *)STACK[0x590]);
  }
  else
  {
    v68 = v65;
  }
  if (STACK[0x5D8] && v68 != STACK[0x5C8])
    operator delete((void *)STACK[0x5C8]);
  sub_2231874DC((uint64_t)&STACK[0x500]);
  sub_2237073E0((void **)&STACK[0x470]);
  sub_22370C880(&STACK[0x230]);
  sub_22322E828((uint64_t)&a57);
  if (a63)
  {
    a64 = a63;
    operator delete(a63);
  }
  sub_22370C8F8(&STACK[0x280]);
  _Unwind_Resume(a1);
}

_QWORD *sub_22370C880(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[2];
  if (!v3)
    return a1;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

_QWORD *sub_22370C8F8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t *v5;
  uint64_t *v6;

  v2 = (_QWORD *)a1[5];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4)
    operator delete(v4);
  v5 = (uint64_t *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    v6 = sub_22370F604(v5);
    MEMORY[0x227684CE8](v6, 0x10A0C402FF47DCALL);
  }
  return a1;
}

void sub_22370C968()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22370C97C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC57EF0;
  result[1] = v3;
  return result;
}

uint64_t sub_22370C9B0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC57EF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_22370C9CC(uint64_t a1, unsigned int *a2)
{
  return *(unsigned int *)(**(_QWORD **)(a1 + 8) + 424 * *a2 + 352);
}

uint64_t sub_22370C9E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d5recon8kfplanes6detail11MergePlanesERNSt3__16vectorINS1_13KeyframePlaneENS3_9allocatorIS5_E"
                     "EEERKNS4_INS_3acv8geometry5PlaneIfEENS6_ISD_EEEERKNSA_16surfacedetection19SegmentImageExtentsERKNS4"
                     "_INS0_8geometry8RLRegionIsEENS6_ISO_EEEERNS3_13unordered_setIhNS3_4hashIhEENS3_8equal_toIhEENS6_IhE"
                     "EEERNS2_38KeyframePlaneObservationsExtendedGraphEENK3$_0clINS_3esn10IndexValueIRNS1_29KeyframePlane"
                     "ObservationGraph9MergeInfoEmEEEES5_T_EUlS1B_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d5recon8kfplanes6detail11MergePlanesERNSt3__16vectorINS1_13KeyframePlaneENS3_9all"
                                "ocatorIS5_EEEERKNS4_INS_3acv8geometry5PlaneIfEENS6_ISD_EEEERKNSA_16surfacedetection19Seg"
                                "mentImageExtentsERKNS4_INS0_8geometry8RLRegionIsEENS6_ISO_EEEERNS3_13unordered_setIhNS3_"
                                "4hashIhEENS3_8equal_toIhEENS6_IhEEEERNS2_38KeyframePlaneObservationsExtendedGraphEENK3$_"
                                "0clINS_3esn10IndexValueIRNS1_29KeyframePlaneObservationGraph9MergeInfoEmEEEES5_T_EUlS1B_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d5recon8kfplanes6detail11MergePlanesERNSt3__16vectorINS1_13KeyframePlaneENS3_9allocatorIS5_EEEERKNS4_INS_3acv8geometry5PlaneIfEENS6_ISD_EEEERKNSA_16surfacedetection19SegmentImageExtentsERKNS4_INS0_8geometry8RLRegionIsEENS6_ISO_EEEERNS3_13unordered_setIhNS3_4hashIhEENS3_8equal_toIhEENS6_IhEEEERNS2_38KeyframePlaneObservationsExtendedGraphEENK3$_0clINS_3esn10IndexValueIRNS1_29KeyframePlaneObservationGraph9MergeInfoEmEEEES5_T_EUlS1B_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d5recon8kfplanes6detail11MergePlanesERNSt3__16vectorINS1_13KeyframePlaneENS3_9allocatorIS5_EEEERKNS4_INS_3acv8geometry5PlaneIfEENS6_ISD_EEEERKNSA_16surfacedetection19SegmentImageExtentsERKNS4_INS0_8geometry8RLRegionIsEENS6_ISO_EEEERNS3_13unordered_setIhNS3_4hashIhEENS3_8equal_toIhEENS6_IhEEEERNS2_38KeyframePlaneObservationsExtendedGraphEENK3$_0clINS_3esn10IndexValueIRNS1_29KeyframePlaneObservationGraph9MergeInfoEmEEEES5_T_EUlS1B_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22370CA54()
{
  return &unk_24EC57F60;
}

uint64_t sub_22370CA60(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  v3 = 0x21CFB2B78C13521DLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x9A90E7D95BC609)
    sub_2236EA0B4();
  if (0x439F656F1826A43ALL * ((uint64_t)(a1[2] - *a1) >> 3) > v4)
    v4 = 0x439F656F1826A43ALL * ((uint64_t)(a1[2] - *a1) >> 3);
  if ((unint64_t)(0x21CFB2B78C13521DLL * ((uint64_t)(a1[2] - *a1) >> 3)) >= 0x4D4873ECADE304)
    v6 = 0x9A90E7D95BC609;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x9A90E7D95BC609)
      sub_223174E94();
    v7 = (char *)operator new(424 * v6);
  }
  else
  {
    v7 = 0;
  }
  v15 = (uint64_t)&v7[424 * v3];
  *((_QWORD *)&v16 + 1) = &v7[424 * v6];
  sub_22370CC1C(v15, a2);
  v8 = 0;
  v10 = (void *)*a1;
  for (i = a1[1]; (void *)(i + v8) != v10; sub_2236EA118(v8 + v15, v8 + i))
    v8 -= 424;
  v11 = v15 + v8;
  v12 = (void *)*a1;
  v13 = a1[1];
  *a1 = v11;
  *(_QWORD *)&v16 = v15 + 424;
  *(_OWORD *)(a1 + 1) = v16;
  while ((void *)v13 != v12)
  {
    v13 -= 424;
    sub_2236EA79C(v13);
  }
  if (v12)
    operator delete(v12);
  return v15 + 424;
}

void sub_22370CBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2236EA0C8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22370CC1C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_OWORD *)result = *(_OWORD *)a2;
  v2 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(result + 16) = v2;
  v3 = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(result + 28) = v3;
  v4 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(result + 56) = v4;
  v5 = *(_OWORD *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 88);
  v7 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(result + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(result + 104) = v7;
  *(_OWORD *)(result + 88) = v6;
  *(_OWORD *)(result + 72) = v5;
  v8 = *(_OWORD *)(a2 + 136);
  v9 = *(_OWORD *)(a2 + 152);
  v10 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(result + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(result + 168) = v10;
  *(_OWORD *)(result + 152) = v9;
  *(_OWORD *)(result + 136) = v8;
  v11 = *(_OWORD *)(a2 + 200);
  v12 = *(_OWORD *)(a2 + 216);
  v13 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(result + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(result + 232) = v13;
  *(_OWORD *)(result + 216) = v12;
  *(_OWORD *)(result + 200) = v11;
  *(_QWORD *)(result + 272) = 0;
  *(_QWORD *)(result + 280) = 0;
  *(_QWORD *)(result + 264) = 0;
  v14 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(result + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(result + 272) = v14;
  *(_QWORD *)(result + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  *(_DWORD *)(result + 288) = *(_DWORD *)(a2 + 288);
  *(_QWORD *)(result + 304) = 0;
  *(_QWORD *)(result + 312) = 0;
  *(_QWORD *)(result + 296) = 0;
  v15 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(result + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(result + 304) = v15;
  v16 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(result + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a2 + 312) = 0;
  *(_QWORD *)(result + 320) = v16;
  *(_DWORD *)(result + 328) = *(_DWORD *)(a2 + 328);
  *(_DWORD *)(result + 332) = *(_DWORD *)(a2 + 332);
  *(_BYTE *)(result + 336) = 0;
  *(_BYTE *)(result + 344) = 0;
  if (*(_BYTE *)(a2 + 344))
  {
    *(_QWORD *)(result + 336) = *(_QWORD *)(a2 + 336);
    *(_BYTE *)(result + 344) = 1;
  }
  *(_DWORD *)(result + 352) = *(_DWORD *)(a2 + 352);
  *(_BYTE *)(result + 360) = 0;
  *(_BYTE *)(result + 384) = 0;
  if (*(_BYTE *)(a2 + 384))
  {
    *(_QWORD *)(result + 360) = 0;
    *(_QWORD *)(result + 368) = 0;
    *(_QWORD *)(result + 376) = 0;
    v17 = *(_QWORD *)(a2 + 368);
    *(_QWORD *)(result + 360) = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(result + 368) = v17;
    *(_QWORD *)(result + 376) = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a2 + 360) = 0;
    *(_QWORD *)(a2 + 368) = 0;
    *(_QWORD *)(a2 + 376) = 0;
    *(_BYTE *)(result + 384) = 1;
  }
  *(_BYTE *)(result + 392) = 0;
  *(_BYTE *)(result + 416) = 0;
  if (*(_BYTE *)(a2 + 416))
  {
    *(_QWORD *)(result + 392) = 0;
    *(_QWORD *)(result + 400) = 0;
    *(_QWORD *)(result + 408) = 0;
    v18 = *(_QWORD *)(a2 + 400);
    *(_QWORD *)(result + 392) = *(_QWORD *)(a2 + 392);
    *(_QWORD *)(result + 400) = v18;
    *(_QWORD *)(result + 408) = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a2 + 392) = 0;
    *(_QWORD *)(a2 + 400) = 0;
    *(_QWORD *)(a2 + 408) = 0;
    *(_BYTE *)(result + 416) = 1;
  }
  return result;
}

uint64_t sub_22370CDB4(float *a1, float *a2, float **a3)
{
  float *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;

  v3 = *a3;
  v4 = *a1;
  v5 = *a2;
  if (*a1 != *a2)
  {
    v6 = v4 >= v5 ? v4 - v5 : v5 - v4;
    if (v6 > *v3)
      return 0;
  }
  v7 = a1[1];
  v8 = a2[1];
  if (v7 != v8)
  {
    v9 = v7 >= v8 ? v7 - v8 : v8 - v7;
    if (v9 > *v3)
      return 0;
  }
  v10 = a1[2];
  v11 = a2[2];
  if (v10 != v11)
  {
    v12 = v10 >= v11 ? v10 - v11 : v11 - v10;
    if (v12 > *v3)
      return 0;
  }
  v13 = a1[3];
  v14 = a2[3];
  if (v13 != v14)
  {
    v15 = v13 >= v14 ? v13 - v14 : v14 - v13;
    if (v15 > *v3)
      return 0;
  }
  v16 = a1[4];
  v17 = a2[4];
  if (v16 != v17)
  {
    v18 = v16 >= v17 ? v16 - v17 : v17 - v16;
    if (v18 > *v3)
      return 0;
  }
  v19 = a1[5];
  v20 = a2[5];
  if (v19 != v20)
  {
    v21 = v19 >= v20 ? v19 - v20 : v20 - v19;
    if (v21 > *v3)
      return 0;
  }
  v22 = a1[6];
  v23 = a2[6];
  if (v22 != v23)
  {
    v24 = v22 >= v23 ? v22 - v23 : v23 - v22;
    if (v24 > *v3)
      return 0;
  }
  v25 = a1[7];
  v26 = a2[7];
  if (v25 != v26)
  {
    v27 = v25 >= v26 ? v25 - v26 : v26 - v25;
    if (v27 > *v3)
      return 0;
  }
  v28 = a1[8];
  v29 = a2[8];
  if (v28 != v29)
  {
    v30 = v28 >= v29 ? v28 - v29 : v29 - v28;
    if (v30 > *v3)
      return 0;
  }
  v31 = a1[9];
  v32 = a2[9];
  if (v31 != v32)
  {
    v33 = v31 >= v32 ? v31 - v32 : v32 - v31;
    if (v33 > *v3)
      return 0;
  }
  v34 = a1[10];
  v35 = a2[10];
  if (v34 != v35)
  {
    v36 = v34 >= v35 ? v34 - v35 : v35 - v34;
    if (v36 > *v3)
      return 0;
  }
  v37 = a1[11];
  v38 = a2[11];
  if (v37 != v38)
  {
    v39 = v37 >= v38 ? v37 - v38 : v38 - v37;
    if (v39 > *v3)
      return 0;
  }
  v40 = a1[12];
  v41 = a2[12];
  if (v40 != v41)
  {
    v42 = v40 >= v41 ? v40 - v41 : v41 - v40;
    if (v42 > *v3)
      return 0;
  }
  v43 = a1[13];
  v44 = a2[13];
  if (v43 != v44)
  {
    v45 = v43 >= v44 ? v43 - v44 : v44 - v43;
    if (v45 > *v3)
      return 0;
  }
  if (((v46 = a1[14], v47 = a2[14], v46 == v47) || (v46 >= v47 ? (v48 = v46 - v47) : (v48 = v47 - v46), v48 <= *v3))
    && ((v49 = a1[15], v50 = a2[15], v49 == v50) || (v49 >= v50 ? (v51 = v49 - v50) : (v51 = v50 - v49), v51 <= *v3)))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

void sub_22370D08C()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_22370D0A0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24EC57F80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_22370D0D8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC57F80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_22370D0F8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD **)(v2 + 8);
  if (v3 != v4)
  {
    v5 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 208) + 424 * *a2);
    while (*v3 != *v5 || v3[1] != v5[1])
    {
      v3 += 2;
      if (v3 == v4)
      {
        v3 = v4;
        return v3 == v4;
      }
    }
  }
  return v3 == v4;
}

uint64_t sub_22370D14C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon8kfplanes20IntegrateObservationERNS1_25KeyframePlaneSegmentationERKNS1_16SingleShotRes"
                     "ultERKNS0_5frame12KeyframeDataERKNS_3esn3arr9ArrayViewIKN10half_float4halfENSB_3dim2DXILj2EEEPSG_EE"
                     "RNS1_19KeyframePlaneWarperERNS1_28KeyframePlaneExtentExtractorERNSB_6random17DistributedRandomINSS_"
                     "6RandomINSt3__123mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7E"
                     "Lj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEENSS_16UUIDDistributionEEERKNS1_17IntegrationCo"
                     "nfigERKNS0_21CoordinateTransformerEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon8kfplanes20IntegrateObservationERNS1_25KeyframePlaneSegmentationERKNS1_16Si"
                                "ngleShotResultERKNS0_5frame12KeyframeDataERKNS_3esn3arr9ArrayViewIKN10half_float4halfENS"
                                "B_3dim2DXILj2EEEPSG_EERNS1_19KeyframePlaneWarperERNS1_28KeyframePlaneExtentExtractorERNS"
                                "B_6random17DistributedRandomINSS_6RandomINSt3__123mersenne_twister_engineIjLm32ELm624ELm"
                                "397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj181243"
                                "3253EEEEENSS_16UUIDDistributionEEERKNS1_17IntegrationConfigERKNS0_21CoordinateTransformerEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon8kfplanes20IntegrateObservationERNS1_25KeyframePlaneSegmentationERKNS1_16SingleShotResultERKNS0_5frame12KeyframeDataERKNS_3esn3arr9ArrayViewIKN10half_float4halfENSB_3dim2DXILj2EEEPSG_EERNS1_19KeyframePlaneWarperERNS1_28KeyframePlaneExtentExtractorERNSB_6random17DistributedRandomINSS_6RandomINSt3__123mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEENSS_16UUIDDistributionEEERKNS1_17IntegrationConfigERKNS0_21CoordinateTransformerEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon8kfplanes20IntegrateObservationERNS1_25KeyframePlaneSegmentationERKNS1_16SingleShotResultERKNS0_5frame12KeyframeDataERKNS_3esn3arr9ArrayViewIKN10half_float4halfENSB_3dim2DXILj2EEEPSG_EERNS1_19KeyframePlaneWarperERNS1_28KeyframePlaneExtentExtractorERNSB_6random17DistributedRandomINSS_6RandomINSt3__123mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEENSS_16UUIDDistributionEEERKNS1_17IntegrationConfigERKNS0_21CoordinateTransformerEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22370D1B8()
{
  return &unk_24EC57FE0;
}

void sub_22370D1C4(_QWORD *a1, uint64_t a2, _BYTE *a3, size_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  _BYTE *v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  uint64_t v20;
  char *v21;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  if ((v5 ^ 0x7FFFFFFFFFFFFFFFLL) < a4 - v5 + v4)
    goto LABEL_25;
  v7 = v5 >> 61;
  v8 = 8 * v5;
  if (v7 > 4)
    v9 = -1;
  else
    v9 = v8;
  v10 = v8 / 5;
  if (v7)
    v10 = v9;
  v11 = v4 + a4;
  if (v10 >= 0x7FFFFFFFFFFFFFFFLL)
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  v12 = v11 <= v10 ? v10 : v11;
  if ((v12 & 0x8000000000000000) != 0)
LABEL_25:
    sub_22317521C((uint64_t)"get_next_capacity, allocator's max size reached");
  v16 = *(_BYTE **)a2;
  v17 = (char *)operator new(v12);
  v18 = v17;
  v19 = *(_BYTE **)a2;
  v20 = *(_QWORD *)(a2 + 8);
  v21 = v17;
  if (*(_QWORD *)a2)
  {
    v21 = v17;
    if (v19 != a3)
    {
      memmove(v17, *(const void **)a2, a3 - v19);
      v21 = &v18[a3 - v19];
    }
  }
  if (a4)
    memset(v21, 255, a4);
  if (a3 && &v19[v20] != a3)
    memmove(&v21[a4], a3, &v19[v20] - a3);
  if (v19 && (_BYTE *)(a2 + 24) != v19)
  {
    operator delete(v19);
    v20 = *(_QWORD *)(a2 + 8);
  }
  *(_QWORD *)a2 = v18;
  *(_QWORD *)(a2 + 8) = v20 + a4;
  *(_QWORD *)(a2 + 16) = v12;
  *a1 = &v18[a3 - v16];
}

uint64_t **sub_22370D318(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_22370F604(v2);
    MEMORY[0x227684CE8](v3, 0x10A0C402FF47DCALL);
  }
  return a1;
}

void sub_22370D35C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  size_t v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  __int128 *v16;
  char *v17;
  _QWORD *v18;
  _OWORD *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  _OWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  char *v38;
  void *v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  const void *v46;
  int64_t v47;
  char *v48;
  char *v49;
  char *v50;
  void *v51;
  void *v52;
  _QWORD *v53;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t *v66;
  char v67;
  _QWORD *v68;
  _QWORD *v69;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v63 = 0;
  v64 = 0;
  v62 = 0;
  v4 = v3 - v2;
  if (!v4)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  if ((v4 & 0x8000000000000000) != 0)
    sub_22367C394();
  v5 = a1;
  v6 = v4 >> 3;
  v7 = operator new(v4 >> 3);
  bzero(v7, v6);
  v59 = -1;
  *((_QWORD *)&v65 + 1) = v7;
  v66 = &v59;
  v53 = v7;
  sub_22370F720(v5, &v65);
  v8 = 0;
  v9 = 0;
  v10 = v59;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v11 = v10 + 1;
  if (v10 != -1)
  {
    if (v11 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v9 = (char *)operator new(24 * v11);
    v59 = (uint64_t)v9;
    v61 = &v9[24 * v11];
    bzero(v9, 24 * ((24 * v11 - 24) / 0x18) + 24);
    v8 = &v9[24 * ((24 * v11 - 24) / 0x18) + 24];
    v60 = v8;
  }
  v55 = v8;
  v56 = v5;
  v12 = 0;
  v13 = (_QWORD *)((char *)v7 + v6);
  v57 = (char *)v7 + v6;
  v58 = v9;
  do
  {
    v14 = *(_QWORD *)(v5 + 24) + (v12 << 6);
    v15 = *(_DWORD *)(v14 + 60);
    if (v15)
    {
      if (v15 != 1)
        sub_22316DD70();
    }
    else
    {
      v16 = (__int128 *)(v14 + 24);
      if (*(_DWORD *)(v14 + 40) != 2)
      {
        v17 = &v9[24 * *v7];
        v18 = v17 + 8;
        v19 = (_OWORD *)*((_QWORD *)v17 + 1);
        v20 = *((_QWORD *)v17 + 2);
        if ((unint64_t)v19 >= v20)
        {
          v24 = *(_OWORD **)v17;
          v25 = 0x8E38E38E38E38E39 * (((uint64_t)v19 - *(_QWORD *)v17) >> 2);
          v26 = v25 + 1;
          if (v25 + 1 > 0x71C71C71C71C71CLL)
            sub_22316E078();
          v27 = 0x8E38E38E38E38E39 * ((uint64_t)(v20 - (_QWORD)v24) >> 2);
          if (2 * v27 > v26)
            v26 = 2 * v27;
          if (v27 >= 0x38E38E38E38E38ELL)
            v28 = 0x71C71C71C71C71CLL;
          else
            v28 = v26;
          if (v28)
          {
            if (v28 > 0x71C71C71C71C71CLL)
              sub_223174E94();
            v29 = v28;
            v30 = (char *)operator new(36 * v28);
            v28 = v29;
          }
          else
          {
            v30 = 0;
          }
          v31 = &v30[36 * v25];
          v32 = *v16;
          v33 = v16[1];
          *((_DWORD *)v31 + 8) = *((_DWORD *)v16 + 8);
          *(_OWORD *)v31 = v32;
          *((_OWORD *)v31 + 1) = v33;
          v34 = v31;
          if (v19 == v24)
          {
            v5 = v56;
          }
          else
          {
            v5 = v56;
            do
            {
              v35 = *(_OWORD *)((char *)v19 - 36);
              v36 = *(_OWORD *)((char *)v19 - 20);
              *((_DWORD *)v34 - 1) = *((_DWORD *)v19 - 1);
              *(_OWORD *)(v34 - 20) = v36;
              *(_OWORD *)(v34 - 36) = v35;
              v34 -= 36;
              v19 = (_OWORD *)((char *)v19 - 36);
            }
            while (v19 != v24);
            v19 = *(_OWORD **)v17;
          }
          *(_QWORD *)v17 = v34;
          v23 = v31 + 36;
          *v18 = v31 + 36;
          *((_QWORD *)v17 + 2) = &v30[36 * v28];
          if (v19)
            operator delete(v19);
          v13 = v57;
          v9 = v58;
        }
        else
        {
          v21 = *v16;
          v22 = v16[1];
          *((_DWORD *)v19 + 8) = *((_DWORD *)v16 + 8);
          *v19 = v21;
          v19[1] = v22;
          v23 = (char *)v19 + 36;
        }
        *v18 = v23;
      }
    }
    ++v7;
    ++v12;
  }
  while (v7 != v13);
  v37 = v55;
  if (v9 == v55)
  {
    v39 = v53;
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (!v9)
      goto LABEL_66;
  }
  else
  {
    v38 = v9;
    while (*(_QWORD *)v38 == *((_QWORD *)v38 + 1))
    {
      v38 += 24;
      if (v38 == v55)
      {
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        v39 = v53;
        goto LABEL_59;
      }
    }
    a2[2] = 0;
    *a2 = 0;
    a2[1] = 0;
    v39 = v53;
    if (v38 != v55)
    {
      v40 = 0;
      v41 = v38;
LABEL_42:
      v42 = v40++;
      while (1)
      {
        v41 += 24;
        if (v41 == v55)
          break;
        if (*(_QWORD *)v41 != *((_QWORD *)v41 + 1))
        {
          if (v41 != v55)
            goto LABEL_42;
          break;
        }
      }
      if (v42 > 0xAAAAAAAAAAAAAA9)
        sub_22316E078();
      v43 = operator new(24 * v40);
      *a2 = v43;
      a2[1] = v43;
      a2[2] = &v43[3 * v40];
      v68 = v43;
      v69 = v43;
      *(_QWORD *)&v65 = a2 + 2;
      *((_QWORD *)&v65 + 1) = &v68;
      v66 = (uint64_t *)&v69;
      v67 = 0;
      v44 = v43;
      while (1)
      {
        *v44 = 0;
        v44[1] = 0;
        v44[2] = 0;
        v46 = *(const void **)v38;
        v45 = *((_QWORD *)v38 + 1);
        v47 = v45 - *(_QWORD *)v38;
        if (v45 != *(_QWORD *)v38)
        {
          if (0x8E38E38E38E38E39 * (v47 >> 2) > 0x71C71C71C71C71CLL)
            sub_22316E078();
          v48 = (char *)operator new(v47);
          *v44 = v48;
          v44[1] = v48;
          v49 = &v48[4 * (v47 >> 2)];
          v44[2] = v49;
          memcpy(v48, v46, v47);
          v44[1] = v49;
        }
        v38 += 24;
        v37 = v55;
        if (v38 == v55)
          break;
        while (*(_QWORD *)v38 == *((_QWORD *)v38 + 1))
        {
          v38 += 24;
          if (v38 == v55)
            goto LABEL_57;
        }
        v44 += 3;
        v69 = v44;
        if (v38 == v55)
          goto LABEL_58;
      }
LABEL_57:
      v44 += 3;
LABEL_58:
      a2[1] = v44;
    }
LABEL_59:
    if (!v9)
      goto LABEL_66;
    if (v9 != v37)
    {
      v50 = v37;
      do
      {
        v52 = (void *)*((_QWORD *)v50 - 3);
        v50 -= 24;
        v51 = v52;
        if (v52)
        {
          *((_QWORD *)v37 - 2) = v51;
          operator delete(v51);
        }
        v37 = v50;
      }
      while (v50 != v9);
    }
  }
  operator delete(v9);
LABEL_66:
  operator delete(v39);
}

void sub_22370D87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;
  void *v22;
  void *v24;
  char *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  void *v30;

  v24 = *(void **)v21;
  if (*(_QWORD *)v21)
  {
    *(_QWORD *)(v21 + 8) = v24;
    operator delete(v24);
  }
  sub_22324A4B0((uint64_t)&a21);
  a10[1] = v22;
  v25 = (char *)*a10;
  if (*a10)
  {
    v26 = (char *)a10[1];
    v27 = *a10;
    if (v26 != v25)
    {
      v28 = (char *)a10[1];
      do
      {
        v30 = (void *)*((_QWORD *)v28 - 3);
        v28 -= 24;
        v29 = v30;
        if (v30)
        {
          *((_QWORD *)v26 - 2) = v29;
          operator delete(v29);
        }
        v26 = v28;
      }
      while (v28 != v25);
      v27 = *a10;
    }
    a10[1] = v25;
    operator delete(v27);
  }
  sub_22317C838(&a15);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22370D954(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v3 = a1 + 12;
  v4 = sub_22342DA5C(a1 + 12, a2);
  if (v4)
  {
    v5 = v4;
    v6 = v4[4];
    v7 = a1[3];
    v8 = v6 << 6;
    v9 = *(char **)(v7 + (v6 << 6));
    v11 = (char **)(v7 + (v6 << 6) + 8);
    v10 = *v11;
    if (v9 != *v11)
    {
      do
      {
        v13 = 0;
        v15 = *(_QWORD *)v9;
        v14 = (uint64_t *)*((_QWORD *)v9 + 1);
        while (1)
        {
          v16 = &v9[v13];
          if (*(uint64_t **)&v9[v13 + 8] == v14)
            break;
          v13 += 16;
          if (&v9[v13] == v10)
          {
            v17 = 0;
            v18 = (uint64_t *)(v7 + (v15 << 6));
            v20 = *v18;
            v19 = v18[1];
            if (*v18 == v19)
              goto LABEL_5;
            goto LABEL_14;
          }
        }
        v21 = v10 - (v16 + 16);
        if (v10 != v16 + 16)
        {
          memmove(&v9[v13], v16 + 16, v10 - (v16 + 16));
          v7 = a1[3];
        }
        *v11 = &v16[v21];
        v17 = v14;
        v18 = (uint64_t *)(v7 + (v15 << 6));
        v20 = *v18;
        v19 = v18[1];
        if (*v18 == v19)
          goto LABEL_5;
LABEL_14:
        v22 = 0;
        while (1)
        {
          v23 = v20 + v22;
          if (*(uint64_t **)(v20 + v22 + 8) == v14)
            break;
          v22 += 16;
          if (v20 + v22 == v19)
            goto LABEL_5;
        }
        v24 = v19 - (v23 + 16);
        if (v19 != v23 + 16)
          memmove((void *)(v20 + v22), (const void *)(v23 + 16), v19 - (v23 + 16));
        v18[1] = v23 + v24;
LABEL_5:
        v12 = *v17;
        *(_QWORD *)(v12 + 8) = v17[1];
        *(_QWORD *)v17[1] = v12;
        --a1[2];
        operator delete(v17);
        v7 = a1[3];
        v9 = *(char **)(v7 + v8);
        v11 = (char **)(v7 + v8 + 8);
        v10 = *v11;
      }
      while (v9 != *v11);
      v6 = v5[4];
    }
    v25 = v7 + (v6 << 6);
    if (*(_DWORD *)(v25 + 60))
      sub_22316DD70();
    *(_DWORD *)(v25 + 40) = 2;
    v26 = (int8x8_t)a1[13];
    v27 = v5[1];
    v28 = (uint8x8_t)vcnt_s8(v26);
    v28.i16[0] = vaddlv_u8(v28);
    if (v28.u32[0] > 1uLL)
    {
      if (v27 >= *(_QWORD *)&v26)
        v27 %= *(_QWORD *)&v26;
    }
    else
    {
      v27 &= *(_QWORD *)&v26 - 1;
    }
    v29 = *(_QWORD **)(*v3 + 8 * v27);
    do
    {
      v30 = v29;
      v29 = (_QWORD *)*v29;
    }
    while (v29 != v5);
    if (v30 == a1 + 14)
      goto LABEL_40;
    v31 = v30[1];
    if (v28.u32[0] > 1uLL)
    {
      if (v31 >= *(_QWORD *)&v26)
        v31 %= *(_QWORD *)&v26;
    }
    else
    {
      v31 &= *(_QWORD *)&v26 - 1;
    }
    if (v31 != v27)
    {
LABEL_40:
      if (!*v5)
        goto LABEL_41;
      v32 = *(_QWORD *)(*v5 + 8);
      if (v28.u32[0] > 1uLL)
      {
        if (v32 >= *(_QWORD *)&v26)
          v32 %= *(_QWORD *)&v26;
      }
      else
      {
        v32 &= *(_QWORD *)&v26 - 1;
      }
      if (v32 != v27)
LABEL_41:
        *(_QWORD *)(*v3 + 8 * v27) = 0;
    }
    v33 = *v5;
    if (*v5)
    {
      v34 = *(_QWORD *)(v33 + 8);
      if (v28.u32[0] > 1uLL)
      {
        if (v34 >= *(_QWORD *)&v26)
          v34 %= *(_QWORD *)&v26;
      }
      else
      {
        v34 &= *(_QWORD *)&v26 - 1;
      }
      if (v34 != v27)
      {
        *(_QWORD *)(*v3 + 8 * v34) = v30;
        v33 = *v5;
      }
    }
    *v30 = v33;
    *v5 = 0;
    --a1[15];
    operator delete(v5);
  }
}

_QWORD *sub_22370DC2C(uint64_t a1, _OWORD *a2, __int128 *a3)
{
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  char *v8;
  void *v9;
  uint64_t v10;
  _QWORD *result;
  void *__p;
  void *v13;
  uint64_t v14;
  __int128 v15;
  _BYTE v16[24];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = *a3;
  *(_OWORD *)&v16[4] = *a2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  *(_DWORD *)v16 = 0;
  *(_DWORD *)&v16[20] = 0;
  v5 = *(_QWORD *)(a1 + 32);
  if (v5 >= *(_QWORD *)(a1 + 40))
  {
    v8 = sub_2237103FC((void **)(a1 + 24), (uint64_t)&__p);
    v9 = __p;
    *(_QWORD *)(a1 + 32) = v8;
    if (v9)
    {
      v13 = v9;
      operator delete(v9);
      v8 = *(char **)(a1 + 32);
    }
  }
  else
  {
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    v6 = v15;
    v7 = *(_OWORD *)v16;
    *(_QWORD *)(v5 + 56) = *(_QWORD *)&v16[16];
    *(_OWORD *)(v5 + 40) = v7;
    *(_OWORD *)(v5 + 24) = v6;
    v8 = (char *)(v5 + 64);
    *(_QWORD *)(a1 + 32) = v5 + 64;
  }
  v10 = *(_QWORD *)(a1 + 24);
  __p = a3;
  result = sub_2236BA6E0(a1 + 96, (uint64_t)a3, (uint64_t)&unk_2245BA939, (_OWORD **)&__p);
  result[4] = ((uint64_t)&v8[-v10] >> 6) - 1;
  return result;
}

void sub_22370DD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_22370DD68(_QWORD *a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  unint64_t v3;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  unint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = a1[8];
  if (v3)
  {
    v6 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a2;
      if (v3 <= a2)
        v7 = a2 % v3;
    }
    else
    {
      v7 = ((_DWORD)v3 - 1) & a2;
    }
    v8 = *(uint64_t ***)(a1[7] + 8 * v7);
    if (v8)
    {
      v9 = *v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = v3 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v9 + 4) == a2)
                goto LABEL_22;
            }
            else if ((v12 & v10) != v7)
            {
              return;
            }
            v9 = (uint64_t *)*v9;
            if (!v9)
              return;
          }
        }
        while (1)
        {
          v11 = v9[1];
          if (v11 == a2)
            break;
          if (v11 >= v3)
            v11 %= v3;
          if (v11 != v7)
            return;
LABEL_11:
          v9 = (uint64_t *)*v9;
          if (!v9)
            return;
        }
        if (*((_DWORD *)v9 + 4) != a2)
          goto LABEL_11;
LABEL_22:
        v13 = a1[3] + (v9[3] << 6);
        v14 = *(_QWORD **)v13;
        v15 = *(_QWORD **)(v13 + 8);
        if (*(_QWORD **)v13 != v15)
        {
          v16 = 0;
          while (1)
          {
            v18 = a1[3] + (*v14 << 6);
            if (*(_DWORD *)(v18 + 60))
              sub_22316DD70();
            v19 = (_OWORD *)(v18 + 24);
            v20 = a3[2];
            if ((unint64_t)v16 >= v20)
              break;
            *v16 = *v19;
            v17 = v16 + 1;
LABEL_25:
            a3[1] = (uint64_t)v17;
            v14 += 2;
            v16 = v17;
            if (v14 == v15)
              return;
          }
          v21 = (_OWORD *)*a3;
          v22 = ((uint64_t)v16 - *a3) >> 4;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 60)
            sub_22316E078();
          v24 = v20 - (_QWORD)v21;
          if (v24 >> 3 > v23)
            v23 = v24 >> 3;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
            v25 = 0xFFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
          {
            if (v25 >> 60)
              sub_223174E94();
            v26 = (char *)operator new(16 * v25);
            v27 = &v26[16 * v22];
            *(_OWORD *)v27 = *v19;
            v28 = (uint64_t)v27;
            if (v16 == v21)
            {
LABEL_37:
              v17 = v27 + 16;
              *a3 = v28;
              a3[1] = (uint64_t)(v27 + 16);
              a3[2] = (uint64_t)&v26[16 * v25];
              if (!v16)
                goto LABEL_25;
              goto LABEL_42;
            }
          }
          else
          {
            v26 = 0;
            v27 = (char *)(16 * v22);
            *(_OWORD *)(16 * v22) = *v19;
            v28 = 16 * v22;
            if (v16 == v21)
              goto LABEL_37;
          }
          do
          {
            *(_OWORD *)(v28 - 16) = *(v16 - 1);
            v28 -= 16;
            --v16;
          }
          while (v16 != v21);
          v16 = (_OWORD *)*a3;
          v17 = v27 + 16;
          *a3 = v28;
          a3[1] = (uint64_t)(v27 + 16);
          a3[2] = (uint64_t)&v26[16 * v25];
          if (!v16)
            goto LABEL_25;
LABEL_42:
          operator delete(v16);
          goto LABEL_25;
        }
      }
    }
  }
}

void sub_22370DFDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_22370E008(uint64_t *a1@<X0>, _OWORD *a2@<X1>, _QWORD *a3@<X2>, void **a4@<X8>)
{
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  uint64_t ***v19;
  uint64_t **v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v24;
  int v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  char *v34;
  int64_t v35;
  _DWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  char *v46;
  char *v47;
  BOOL v48;
  char *v49;
  unsigned int v50;
  char *v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  uint64_t *i;
  uint64_t *v56;
  unsigned int *v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  __int128 *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int *v76;
  __int128 *v77;
  char *v78;
  unsigned int *v79;
  unsigned int *j;
  int v81;
  _BYTE *v82;
  _BYTE *v83;
  int64_t v84;
  void *v85;
  unint64_t v86;
  void **v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  void **v100;
  char *v101;
  char *v102;
  void *v103;
  void *v104;
  char *v105;
  char *v106;
  void *v107;
  void *v108;
  int v110;
  char *v111;
  void **v112;
  char *v113;
  char *v114;
  char *v115;
  char *__p;
  __int128 *__pa;
  char *v118;
  __int128 *v119;
  void *v120[2];
  char *v121;
  __int128 *v122;
  void *v123[2];
  unint64_t v124;
  char *v125;
  char *v126;

  sub_22370EB74(&v125, *a1);
  v8 = v125;
  v7 = v126;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (v7 == v8)
    goto LABEL_146;
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 4) > 0x492492492492492)
    sub_22316E078();
  v9 = (char *)operator new(0x5555555555555568 * ((v7 - v8) >> 4));
  *a4 = v9;
  a4[1] = v9;
  a4[2] = &v9[0x5555555555555568 * ((v7 - v8) >> 4)];
  if (v7 == v8)
    goto LABEL_146;
  v10 = v8;
  v112 = a4;
  v111 = v7;
  while (2)
  {
    v11 = *(_QWORD *)v10;
    v12 = *((_QWORD *)v10 + 1);
    if (*(_QWORD *)v10 == v12)
      goto LABEL_5;
    v115 = v10;
    v13 = v12 - v11;
    if (v12 - v11 < 0)
      sub_22316E078();
    __p = (char *)operator new((unint64_t)v13 >> 2);
    v118 = __p;
    v121 = &__p[4 * (v13 >> 4)];
    do
    {
      v15 = sub_22456636C((unsigned __int8 *)v11);
      v16 = (int8x8_t)a3[1];
      if (!*(_QWORD *)&v16)
        goto LABEL_157;
      v17 = (uint8x8_t)vcnt_s8(v16);
      v17.i16[0] = vaddlv_u8(v17);
      if (v17.u32[0] > 1uLL)
      {
        v18 = v15;
        if (v15 >= *(_QWORD *)&v16)
          v18 = v15 % *(_QWORD *)&v16;
      }
      else
      {
        v18 = (*(_QWORD *)&v16 - 1) & v15;
      }
      v19 = *(uint64_t ****)(*a3 + 8 * v18);
      if (!v19 || (v20 = *v19) == 0)
LABEL_157:
        sub_223198218("unordered_map::at: key not found");
      if (v17.u32[0] < 2uLL)
      {
        v21 = *(_QWORD *)&v16 - 1;
        while (1)
        {
          v24 = v20[1];
          if ((uint64_t *)v15 == v24)
          {
            if (v20[2] == *(uint64_t **)v11 && v20[3] == *(uint64_t **)(v11 + 8))
              goto LABEL_39;
          }
          else if (((unint64_t)v24 & v21) != v18)
          {
            goto LABEL_157;
          }
          v20 = (uint64_t **)*v20;
          if (!v20)
            goto LABEL_157;
        }
      }
      while (1)
      {
        v22 = (unint64_t)v20[1];
        if (v15 == v22)
          break;
        if (v22 >= *(_QWORD *)&v16)
          v22 %= *(_QWORD *)&v16;
        if (v22 != v18)
          goto LABEL_157;
LABEL_21:
        v20 = (uint64_t **)*v20;
        if (!v20)
          goto LABEL_157;
      }
      if (v20[2] != *(uint64_t **)v11 || v20[3] != *(uint64_t **)(v11 + 8))
        goto LABEL_21;
LABEL_39:
      v26 = *((unsigned __int8 *)v20 + 32);
      v27 = v118;
      if (v118 < v121)
      {
        *(_DWORD *)v118 = v26;
        v14 = v118 + 4;
        goto LABEL_10;
      }
      v28 = __p;
      v29 = (v118 - __p) >> 2;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 62)
        sub_22316E078();
      v31 = v121 - __p;
      if ((v121 - __p) >> 1 > v30)
        v30 = v31 >> 1;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
        v32 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (!v32)
      {
        v33 = 0;
        v34 = (char *)(4 * v29);
        v36 = (_DWORD *)(4 * v29);
        *v36 = v26;
        v14 = (char *)(v36 + 1);
        v35 = v118 - __p;
        if (v118 == __p)
          goto LABEL_57;
LABEL_51:
        v37 = v35 - 4;
        if (v37 < 0x2C)
          goto LABEL_170;
        if ((unint64_t)(__p - v33) < 0x20)
          goto LABEL_170;
        v38 = (v37 >> 2) + 1;
        v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
        v40 = &v118[-v39];
        v34 -= v39;
        v41 = &v33[v118 - __p - 16];
        v42 = v118 - 16;
        v43 = v38 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v44 = *(_OWORD *)v42;
          *(v41 - 1) = *((_OWORD *)v42 - 1);
          *v41 = v44;
          v41 -= 2;
          v42 -= 32;
          v43 -= 8;
        }
        while (v43);
        v27 = v40;
        if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_170:
          do
          {
            v45 = *((_DWORD *)v27 - 1);
            v27 -= 4;
            *((_DWORD *)v34 - 1) = v45;
            v34 -= 4;
          }
          while (v27 != __p);
        }
        goto LABEL_57;
      }
      if (v32 >> 62)
        sub_223174E94();
      v33 = operator new(4 * v32);
      v34 = &v33[4 * v29];
      *(_DWORD *)v34 = v26;
      v14 = v34 + 4;
      v35 = v118 - __p;
      if (v118 != __p)
        goto LABEL_51;
LABEL_57:
      __p = v34;
      v121 = &v33[4 * v32];
      if (v28)
        operator delete(v28);
LABEL_10:
      v118 = v14;
      v11 += 16;
    }
    while (v11 != v12);
    v46 = __p;
    v47 = __p + 4;
    v48 = __p == v14 || v47 == v14;
    v49 = __p;
    if (!v48)
    {
      v50 = *(_DWORD *)__p;
      v49 = __p;
      v51 = __p + 4;
      do
      {
        v53 = *(_DWORD *)v51;
        v51 += 4;
        v52 = v53;
        if (v53 < v50)
        {
          v50 = v52;
          v49 = v47;
        }
        v47 = v51;
      }
      while (v51 != v14);
    }
    v54 = *v49;
    for (i = (uint64_t *)a3[2]; i; i = (uint64_t *)*i)
    {
      if (*((unsigned __int8 *)i + 32) == v54)
        break;
    }
    v114 = v121;
    v56 = i + 2;
    v113 = __p;
    if (v14 - __p == 4)
    {
      v57 = (unsigned int *)*((_QWORD *)v115 + 3);
      v58 = (unsigned int *)*((_QWORD *)v115 + 4);
      if (v57 != v58)
      {
        v59 = *a1;
        do
          sub_22370FD80(v59, a2, (__int128 *)v56, *v57++, 0);
        while (v57 != v58);
      }
      goto LABEL_116;
    }
    v60 = (v14 - __p) >> 2;
    __pa = 0;
    v119 = 0;
    v122 = 0;
    v61 = v60 - 1;
    v110 = *v49;
    if (v60 == 1)
    {
      v62 = 0;
    }
    else
    {
      if (v61 >> 60)
        sub_22316E078();
      v62 = (__int128 *)operator new(16 * v61);
      __pa = v62;
      v119 = v62;
      v122 = &v62[v61];
    }
    v64 = *(_QWORD *)v115;
    v63 = *((_QWORD *)v115 + 1);
    while (2)
    {
      if (v64 != v63)
      {
        if (*(_QWORD *)v64 != *v56 || *(_QWORD *)(v64 + 8) != v56[1])
        {
          if (v62 < v122)
          {
            *v62 = *(_OWORD *)v64;
            v65 = v62 + 1;
            goto LABEL_81;
          }
          v67 = v62 - __pa;
          v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 60)
            sub_22316E078();
          v69 = (char *)v122 - (char *)__pa;
          if (((char *)v122 - (char *)__pa) >> 3 > v68)
            v68 = v69 >> 3;
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF0)
            v70 = 0xFFFFFFFFFFFFFFFLL;
          else
            v70 = v68;
          if (v70)
          {
            if (v70 >> 60)
              sub_223174E94();
            v71 = (char *)operator new(16 * v70);
            v72 = &v71[16 * v67];
            *(_OWORD *)v72 = *(_OWORD *)v64;
            v73 = (uint64_t)v72;
            if (v62 == __pa)
            {
LABEL_103:
              v65 = (__int128 *)(v72 + 16);
              __pa = (__int128 *)v73;
              v122 = (__int128 *)&v71[16 * v70];
              if (v62)
                goto LABEL_104;
              goto LABEL_81;
            }
          }
          else
          {
            v71 = 0;
            v72 = (char *)(16 * v67);
            *(_OWORD *)(16 * v67) = *(_OWORD *)v64;
            v73 = 16 * v67;
            if (v62 == __pa)
              goto LABEL_103;
          }
          do
          {
            *(_OWORD *)(v73 - 16) = *(v62 - 1);
            v73 -= 16;
            --v62;
          }
          while (v62 != __pa);
          v62 = __pa;
          v65 = (__int128 *)(v72 + 16);
          __pa = (__int128 *)v73;
          v122 = (__int128 *)&v71[16 * v70];
          if (v62)
LABEL_104:
            operator delete(v62);
LABEL_81:
          v119 = v65;
          v62 = v65;
        }
        v64 += 16;
        continue;
      }
      break;
    }
    v74 = *a1;
    v75 = (unsigned int *)*((_QWORD *)v115 + 3);
    v76 = (unsigned int *)*((_QWORD *)v115 + 4);
    if (v75 != v76)
    {
      do
        sub_22370FD80(v74, a2, (__int128 *)v56, *v75++, 0);
      while (v75 != v76);
      v62 = v119;
    }
    v77 = __pa;
    if (__pa == v62)
    {
LABEL_114:
      v46 = v113;
      v54 = v110;
      if (!v62)
        goto LABEL_116;
      goto LABEL_115;
    }
    v78 = v115;
    if (*((_QWORD *)v115 + 3) != *((_QWORD *)v115 + 4))
    {
      do
      {
        v79 = (unsigned int *)*((_QWORD *)v78 + 3);
        for (j = (unsigned int *)*((_QWORD *)v78 + 4); v79 != j; ++v79)
          sub_22370FD80(v74, a2, v77, *v79, 1);
        ++v77;
        v78 = v115;
      }
      while (v77 != v62);
      v62 = __pa;
      goto LABEL_114;
    }
    v62 = __pa;
    v46 = v113;
    v54 = v110;
    if (__pa)
LABEL_115:
      operator delete(v62);
LABEL_116:
    v81 = v54;
    v120[0] = v46;
    v120[1] = v14;
    v10 = v115;
    v124 = 0;
    *(_OWORD *)v123 = 0uLL;
    v83 = (_BYTE *)*((_QWORD *)v115 + 3);
    v82 = (_BYTE *)*((_QWORD *)v115 + 4);
    v84 = v82 - v83;
    if (v82 == v83)
    {
      v86 = 0;
      v85 = 0;
      v87 = v112;
      v89 = (char *)v112[1];
      v88 = (unint64_t)v112[2];
      if ((unint64_t)v89 < v88)
        goto LABEL_119;
    }
    else
    {
      if (v84 < 0)
        sub_22316E078();
      v85 = operator new(v82 - v83);
      v123[0] = v85;
      v86 = (unint64_t)v85 + 4 * (v84 >> 2);
      v124 = v86;
      memcpy(v85, v83, v84);
      v123[1] = (void *)v86;
      v87 = v112;
      v89 = (char *)v112[1];
      v88 = (unint64_t)v112[2];
      if ((unint64_t)v89 < v88)
      {
LABEL_119:
        *(_DWORD *)v89 = v81;
        *((_QWORD *)v89 + 1) = 0;
        *((_QWORD *)v89 + 2) = 0;
        *((_QWORD *)v89 + 3) = 0;
        *((_QWORD *)v89 + 4) = 0;
        *(_OWORD *)(v89 + 8) = *(_OWORD *)v120;
        *((_QWORD *)v89 + 3) = v114;
        *((_QWORD *)v89 + 5) = 0;
        *((_QWORD *)v89 + 6) = 0;
        *((_OWORD *)v89 + 2) = *(_OWORD *)v123;
        *((_QWORD *)v89 + 6) = v124;
        v87[1] = v89 + 56;
        goto LABEL_140;
      }
    }
    v90 = (char *)*v87;
    v91 = 0x6DB6DB6DB6DB6DB7 * ((v89 - (_BYTE *)*v87) >> 3);
    v92 = v91 + 1;
    if ((unint64_t)(v91 + 1) > 0x492492492492492)
      sub_22316E078();
    v93 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v88 - (_QWORD)v90) >> 3);
    if (2 * v93 > v92)
      v92 = 2 * v93;
    if (v93 >= 0x249249249249249)
      v94 = 0x492492492492492;
    else
      v94 = v92;
    if (v94 > 0x492492492492492)
      sub_223174E94();
    v95 = (char *)operator new(56 * v94);
    v96 = &v95[56 * v91];
    v97 = &v95[56 * v94];
    *(_DWORD *)v96 = v81;
    *((_QWORD *)v96 + 1) = v113;
    *((_QWORD *)v96 + 2) = v14;
    *((_QWORD *)v96 + 5) = 0;
    *((_QWORD *)v96 + 6) = 0;
    *((_QWORD *)v96 + 3) = v114;
    *((_QWORD *)v96 + 4) = v85;
    *(int64x2_t *)(v96 + 40) = vdupq_n_s64(v86);
    v98 = v96 + 56;
    if (v89 == v90)
    {
      v100 = v112;
      *v112 = v96;
      v112[1] = v98;
      v112[2] = v97;
      v10 = v115;
      if (v89)
        goto LABEL_138;
    }
    else
    {
      v99 = 0;
      v100 = v112;
      do
      {
        v101 = &v96[v99];
        v102 = &v89[v99];
        *((_DWORD *)v101 - 14) = *(_DWORD *)&v89[v99 - 56];
        *((_OWORD *)v101 - 3) = *(_OWORD *)&v89[v99 - 48];
        *((_QWORD *)v101 - 4) = *(_QWORD *)&v89[v99 - 32];
        *((_QWORD *)v102 - 6) = 0;
        *((_QWORD *)v102 - 5) = 0;
        *((_QWORD *)v102 - 4) = 0;
        *(_OWORD *)(v101 - 24) = *(_OWORD *)&v89[v99 - 24];
        *((_QWORD *)v101 - 1) = *(_QWORD *)&v89[v99 - 8];
        *((_QWORD *)v102 - 3) = 0;
        *((_QWORD *)v102 - 2) = 0;
        *((_QWORD *)v102 - 1) = 0;
        v99 -= 56;
      }
      while (&v89[v99] != v90);
      *v112 = &v96[v99];
      v112[1] = v98;
      v112[2] = v97;
      do
      {
        v103 = (void *)*((_QWORD *)v89 - 3);
        if (v103)
        {
          *((_QWORD *)v89 - 2) = v103;
          operator delete(v103);
        }
        v104 = (void *)*((_QWORD *)v89 - 6);
        if (v104)
        {
          *((_QWORD *)v89 - 5) = v104;
          operator delete(v104);
        }
        v89 -= 56;
      }
      while (v89 != v90);
      v89 = v90;
      v10 = v115;
      if (v89)
LABEL_138:
        operator delete(v89);
    }
    v100[1] = v98;
LABEL_140:
    v7 = v111;
LABEL_5:
    v10 += 48;
    if (v10 != v7)
      continue;
    break;
  }
  v7 = v125;
LABEL_146:
  if (v7)
  {
    v105 = v126;
    v106 = v7;
    if (v126 != v7)
    {
      do
      {
        v107 = (void *)*((_QWORD *)v105 - 3);
        if (v107)
        {
          *((_QWORD *)v105 - 2) = v107;
          operator delete(v107);
        }
        v108 = (void *)*((_QWORD *)v105 - 6);
        if (v108)
        {
          *((_QWORD *)v105 - 5) = v108;
          operator delete(v108);
        }
        v105 -= 48;
      }
      while (v105 != v7);
      v106 = v125;
    }
    v126 = v7;
    operator delete(v106);
  }
}

void sub_22370E9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  void **v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;

  sub_2237072AC(v23);
  v26 = *(_QWORD *)(v24 - 112);
  if (!v26)
    _Unwind_Resume(a1);
  v27 = *(_QWORD *)(v24 - 104);
  v28 = *(void **)(v24 - 112);
  if (v27 != v26)
  {
    do
    {
      v29 = *(void **)(v27 - 24);
      if (v29)
      {
        *(_QWORD *)(v27 - 16) = v29;
        operator delete(v29);
      }
      v30 = *(void **)(v27 - 48);
      if (v30)
      {
        *(_QWORD *)(v27 - 40) = v30;
        operator delete(v30);
      }
      v27 -= 48;
    }
    while (v27 != v26);
    v28 = *(void **)(v24 - 112);
  }
  *(_QWORD *)(v24 - 104) = v26;
  operator delete(v28);
  _Unwind_Resume(a1);
}

void sub_22370EB74(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  _BYTE *v29;
  _DWORD *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t *v33;
  unint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  _OWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  _QWORD *v65;
  char *v66;
  _QWORD *v67;
  void *__p;
  __int128 v70;
  uint64_t *v71;
  uint64_t v72;

  v2 = a1;
  v3 = *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24);
  if (!v3)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  if ((v3 & 0x8000000000000000) != 0)
    sub_22367C394();
  v4 = v3 >> 3;
  v5 = operator new(v3 >> 3);
  __p = v5;
  bzero(v5, v4);
  v72 = -1;
  *((_QWORD *)&v70 + 1) = v5;
  v71 = &v72;
  sub_22370F720(a2, &v70);
  v6 = v72;
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  v7 = v6 + 1;
  v8 = a2;
  if (v6 != -1)
  {
    if (v7 >= 0x555555555555556)
      sub_22316E078();
    v9 = (char *)operator new(48 * v7);
    *v2 = v9;
    v2[2] = &v9[48 * v7];
    bzero(v9, 48 * ((48 * v7 - 48) / 0x30) + 48);
    v2[1] = &v9[48 * ((48 * v7 - 48) / 0x30) + 48];
    v8 = a2;
  }
  v10 = 0;
  v11 = (_QWORD *)((char *)v5 + v4);
  v66 = (char *)v5 + v4;
  v67 = v2;
  do
  {
    v12 = *(_QWORD *)(v8 + 24) + (v10 << 6);
    v13 = v12 + 24;
    v14 = *(_DWORD *)(v12 + 60);
    if (!v14)
    {
      if (*(_DWORD *)(v13 + 16) == 2)
        goto LABEL_8;
      v33 = (uint64_t *)(*v2 + 48 * *v5);
      v35 = (_OWORD *)v33[1];
      v34 = v33[2];
      if ((unint64_t)v35 < v34)
      {
        *v35 = *(_OWORD *)v13;
        v36 = v35 + 1;
LABEL_39:
        v33[1] = (uint64_t)v36;
        goto LABEL_8;
      }
      v37 = (_OWORD *)*v33;
      v38 = ((uint64_t)v35 - *v33) >> 4;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 60)
        sub_22316E078();
      v40 = v34 - (_QWORD)v37;
      if (v40 >> 3 > v39)
        v39 = v40 >> 3;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
        v41 = 0xFFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41)
      {
        if (v41 >> 60)
          sub_223174E94();
        v42 = (char *)operator new(16 * v41);
        v43 = &v42[16 * v38];
        *(_OWORD *)v43 = *(_OWORD *)v13;
        v44 = (uint64_t)v43;
        if (v35 != v37)
        {
LABEL_34:
          v2 = v67;
          do
          {
            *(_OWORD *)(v44 - 16) = *(v35 - 1);
            v44 -= 16;
            --v35;
          }
          while (v35 != v37);
          v35 = (_OWORD *)*v33;
          v36 = v43 + 16;
          *v33 = v44;
          v33[1] = (uint64_t)(v43 + 16);
          v33[2] = (uint64_t)&v42[16 * v41];
          if (!v35)
            goto LABEL_38;
LABEL_37:
          operator delete(v35);
LABEL_38:
          v8 = a2;
          v11 = v66;
          goto LABEL_39;
        }
      }
      else
      {
        v42 = 0;
        v43 = (char *)(16 * v38);
        *(_OWORD *)(16 * v38) = *(_OWORD *)v13;
        v44 = 16 * v38;
        if (v35 != v37)
          goto LABEL_34;
      }
      v2 = v67;
      v36 = v43 + 16;
      *v33 = v44;
      v33[1] = (uint64_t)(v43 + 16);
      v33[2] = (uint64_t)&v42[16 * v41];
      if (!v35)
        goto LABEL_38;
      goto LABEL_37;
    }
    if (v14 != 1)
      sub_22316DD70();
    v15 = *v2 + 48 * *v5;
    v18 = *(_QWORD *)(v15 + 40);
    v17 = (_QWORD *)(v15 + 40);
    v16 = v18;
    v20 = v17 - 1;
    v19 = (char *)*(v17 - 1);
    if ((unint64_t)v19 < v18)
    {
      *(_DWORD *)v19 = *(_DWORD *)v13;
      *v20 = (uint64_t)(v19 + 4);
      goto LABEL_8;
    }
    v21 = v17 - 2;
    v22 = (char *)*(v17 - 2);
    v23 = (v19 - v22) >> 2;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 62)
      sub_22316E078();
    v25 = v16 - (_QWORD)v22;
    if (v25 >> 1 > v24)
      v24 = v25 >> 1;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
      v26 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    if (v26)
    {
      v65 = v17;
      if (v26 >> 62)
        sub_223174E94();
      v27 = v17 - 1;
      v28 = v26;
      v29 = operator new(4 * v26);
      v26 = v28;
      v20 = v27;
      v17 = v65;
      v30 = &v29[4 * v23];
      *v30 = *(_DWORD *)v13;
      v31 = (uint64_t)(v30 + 1);
      v32 = v19 - v22;
      if (v19 == v22)
        goto LABEL_47;
LABEL_41:
      v45 = v32 - 4;
      if (v45 < 0x2C)
        goto LABEL_96;
      if ((unint64_t)(v22 - v29) < 0x20)
        goto LABEL_96;
      v46 = (v45 >> 2) + 1;
      v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
      v48 = &v19[-v47];
      v30 = (_DWORD *)((char *)v30 - v47);
      v49 = &v29[4 * v23 - 16];
      v50 = v19 - 16;
      v51 = v46 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v52 = *(_OWORD *)v50;
        *(v49 - 1) = *((_OWORD *)v50 - 1);
        *v49 = v52;
        v49 -= 2;
        v50 -= 32;
        v51 -= 8;
      }
      while (v51);
      v19 = v48;
      if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_96:
        do
        {
          v53 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          *--v30 = v53;
        }
        while (v19 != v22);
      }
      goto LABEL_47;
    }
    v29 = 0;
    v30 = (_DWORD *)(4 * v23);
    *(_DWORD *)(4 * v23) = *(_DWORD *)v13;
    v31 = 4 * v23 + 4;
    v32 = v19 - v22;
    if (v19 != v22)
      goto LABEL_41;
LABEL_47:
    *v21 = v30;
    *v20 = v31;
    *v17 = &v29[4 * v26];
    if (v22)
      operator delete(v22);
    v2 = v67;
    v8 = a2;
    v11 = v66;
    *v20 = v31;
LABEL_8:
    ++v5;
    ++v10;
  }
  while (v5 != v11);
  v54 = (_QWORD *)*v2;
  v55 = (_QWORD *)v2[1];
  if ((_QWORD *)*v2 != v55)
  {
    while (*v54 != v54[1] || v54[3] != v54[4])
    {
      v54 += 6;
      if (v54 == v55)
        goto LABEL_84;
    }
    if (v54 != v55)
    {
      v57 = v54 + 6;
      if (v54 + 6 != v55)
      {
        do
        {
          v58 = *v57;
          v59 = v57[1];
          if (*v57 != v59 || v57[3] != v57[4])
          {
            v61 = (void *)*v54;
            if (*v54)
            {
              v54[1] = v61;
              operator delete(v61);
              *v54 = 0;
              v54[1] = 0;
              v54[2] = 0;
              v58 = *v57;
              v59 = v57[1];
            }
            *v54 = v58;
            v54[1] = v59;
            v54[2] = v57[2];
            *v57 = 0;
            v57[1] = 0;
            v57[2] = 0;
            v62 = (void *)v54[3];
            if (v62)
            {
              v54[4] = v62;
              operator delete(v62);
              v54[3] = 0;
              v54[4] = 0;
              v54[5] = 0;
            }
            *(_OWORD *)(v54 + 3) = *(_OWORD *)(v57 + 3);
            v54[5] = v57[5];
            v57[3] = 0;
            v57[4] = 0;
            v57[5] = 0;
            v54 += 6;
          }
          v57 += 6;
        }
        while (v57 != v55);
        v55 = (_QWORD *)v2[1];
      }
    }
    if (v54 != v55)
    {
      while (v55 != v54)
      {
        v63 = (void *)*(v55 - 3);
        if (v63)
        {
          *(v55 - 2) = v63;
          operator delete(v63);
        }
        v64 = (void *)*(v55 - 6);
        if (v64)
        {
          *(v55 - 5) = v64;
          operator delete(v64);
        }
        v55 -= 6;
      }
      v2[1] = v54;
    }
  }
LABEL_84:
  if (__p)
    operator delete(__p);
}

void sub_22370F190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;

  operator delete(v14);
  _Unwind_Resume(a1);
}

void **sub_22370F1E4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 6);
        if (v6)
        {
          *((_QWORD *)v3 - 5) = v6;
          operator delete(v6);
        }
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_22370F264(uint64_t *a1@<X0>, char **a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  int64_t v15;
  unint64_t v16;
  char *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  void *v29;
  void *__p;
  _QWORD *v31;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_22370EB74(&__p, *a1);
  v3 = __p;
  v4 = v31;
  if (__p != v31)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    while (1)
    {
      if (*v3 != v3[1])
        goto LABEL_5;
      v9 = (_DWORD *)v3[3];
      if (v3[4] - (_QWORD)v9 != 4)
        goto LABEL_5;
      if (v7 >= v6)
        break;
      *(_DWORD *)v7 = *v9;
      v8 = (uint64_t)(v7 + 4);
LABEL_4:
      a2[1] = (char *)v8;
      v7 = (char *)v8;
LABEL_5:
      v3 += 6;
      if (v3 == v4)
      {
        v3 = __p;
        goto LABEL_37;
      }
    }
    v10 = (v7 - v5) >> 2;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62)
      sub_22316E078();
    if ((v6 - v5) >> 1 > v11)
      v11 = (v6 - v5) >> 1;
    if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
    {
      if (v12 >> 62)
        sub_223174E94();
      v13 = operator new(4 * v12);
      v14 = &v13[4 * v10];
      *(_DWORD *)v14 = *v9;
      v8 = (uint64_t)(v14 + 4);
      v15 = v7 - v5;
      if (v7 == v5)
        goto LABEL_23;
    }
    else
    {
      v13 = 0;
      v14 = (char *)(4 * v10);
      *(_DWORD *)(4 * v10) = *v9;
      v8 = 4 * v10 + 4;
      v15 = v7 - v5;
      if (v7 == v5)
        goto LABEL_23;
    }
    v16 = v15 - 4;
    if (v16 >= 0xBC)
    {
      v19 = (v7 - 4 - v5) & 0xFFFFFFFFFFFFFFFCLL;
      if (&v13[v7 - v5 - 4 - v19] > &v13[v7 - v5 - 4])
      {
        v17 = v7;
      }
      else if (&v7[-v19 - 4] > v7 - 4)
      {
        v17 = v7;
      }
      else if ((unint64_t)(v5 - v13) >= 0x20)
      {
        v20 = (v16 >> 2) + 1;
        v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
        v17 = &v7[-v21];
        v14 -= v21;
        v22 = &v13[4 * v10 - 16];
        v23 = v7 - 16;
        v24 = v20 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v25 = *(_OWORD *)v23;
          *(v22 - 1) = *((_OWORD *)v23 - 1);
          *v22 = v25;
          v22 -= 2;
          v23 -= 32;
          v24 -= 8;
        }
        while (v24);
        if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_23;
      }
      else
      {
        v17 = v7;
      }
    }
    else
    {
      v17 = v7;
    }
    do
    {
      v18 = *((_DWORD *)v17 - 1);
      v17 -= 4;
      *((_DWORD *)v14 - 1) = v18;
      v14 -= 4;
    }
    while (v17 != v5);
LABEL_23:
    v6 = &v13[4 * v12];
    *a2 = v14;
    a2[1] = (char *)v8;
    a2[2] = v6;
    if (v5)
      operator delete(v5);
    v5 = v14;
    goto LABEL_4;
  }
LABEL_37:
  if (v3)
  {
    v26 = v31;
    v27 = v3;
    if (v31 != v3)
    {
      do
      {
        v28 = (void *)*(v26 - 3);
        if (v28)
        {
          *(v26 - 2) = v28;
          operator delete(v28);
        }
        v29 = (void *)*(v26 - 6);
        if (v29)
        {
          *(v26 - 5) = v29;
          operator delete(v29);
        }
        v26 -= 6;
      }
      while (v26 != v3);
      v27 = __p;
    }
    v31 = v3;
    operator delete(v27);
  }
}

void sub_22370F4E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  sub_22370F1E4((void **)va);
  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22370F510(uint64_t a1)
{
  *(_QWORD *)a1 = a1;
  *(_QWORD *)(a1 + 8) = a1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = operator new();
  return a1;
}

void sub_22370F56C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v4 = v1[3];
  if (v4)
  {
    v5 = v1[4];
    v6 = (void *)v1[3];
    if (v5 != v4)
    {
      v7 = v1[4];
      do
      {
        v9 = *(void **)(v7 - 64);
        v7 -= 64;
        v8 = v9;
        if (v9)
        {
          *(_QWORD *)(v5 - 56) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = (void *)v1[3];
    }
    v1[4] = v4;
    operator delete(v6);
  }
  if (*v2)
  {
    v11 = *v1;
    v10 = (uint64_t *)v1[1];
    v12 = *v10;
    *(_QWORD *)(v12 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v11 + 8) = v12;
    v1[2] = 0;
    if (v10 != v1)
    {
      do
      {
        v13 = (uint64_t *)v10[1];
        operator delete(v10);
        v10 = v13;
      }
      while (v13 != v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_22370F604(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;

  v2 = (_QWORD *)a1[14];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[12];
  a1[12] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[9];
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)a1[7];
  a1[7] = 0;
  if (v7)
    operator delete(v7);
  v8 = a1[6];
  if (v8)
    MEMORY[0x227684CE8](v8, 0xC400A2AC0F1);
  v9 = a1[3];
  if (v9)
  {
    v10 = a1[4];
    v11 = (void *)a1[3];
    if (v10 != v9)
    {
      v12 = a1[4];
      do
      {
        v14 = *(void **)(v12 - 64);
        v12 -= 64;
        v13 = v14;
        if (v14)
        {
          *(_QWORD *)(v10 - 56) = v13;
          operator delete(v13);
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = (void *)a1[3];
    }
    a1[4] = v9;
    operator delete(v11);
  }
  if (a1[2])
  {
    v16 = *a1;
    v15 = (uint64_t *)a1[1];
    v17 = *v15;
    *(_QWORD *)(v17 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v16 + 8) = v17;
    a1[2] = 0;
    if (v15 != a1)
    {
      do
      {
        v18 = (uint64_t *)v15[1];
        operator delete(v15);
        v15 = v18;
      }
      while (v18 != a1);
    }
  }
  return a1;
}

void sub_22370F720(uint64_t a1, __int128 *a2)
{
  void *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  __int128 v25;
  _QWORD *v26;
  _QWORD v27[3];

  v25 = *a2;
  v26 = (_QWORD *)*((_QWORD *)a2 + 2);
  v3 = (void *)operator new[]();
  v4 = (unsigned int *)operator new();
  *((_QWORD *)v4 + 1) = 0x100000001;
  *(_QWORD *)v4 = &off_24EC57500;
  *((_QWORD *)v4 + 2) = v3;
  v24 = v4;
  v6 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v7 = v5 - v6;
  if (v5 == v6)
    goto LABEL_17;
  bzero(v3, (v7 >> 4) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = 0;
  v9 = v7 >> 6;
  do
  {
    if (!*((_DWORD *)v3 + v8))
    {
      ++*v26;
      v27[0] = v3;
      v27[1] = v24;
      if (v24)
      {
        v10 = v24 + 2;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      sub_22370F9D0(a1, v8, (uint64_t)&v25, v27);
      if (v24)
      {
        v12 = v24 + 2;
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
          v15 = v24 + 3;
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
            (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 24))(v24);
        }
      }
    }
    ++v8;
  }
  while (v8 != v9);
  v4 = v24;
  if (v24)
  {
LABEL_17:
    v18 = v4 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
      v21 = v4 + 3;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
    }
  }
}

void sub_22370F8FC(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  MEMORY[0x227684CB8](v1, 0x1000C8052888210);
  __cxa_rethrow();
}

void sub_22370F920(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_22370F938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_22370F954((uint64_t)va1);
  sub_22370F954((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22370F954(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void sub_22370F9D0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = a4;
  v5 = a3;
  v6 = a1;
  v49 = *MEMORY[0x24BDAC8D0];
  v40 = 0;
  v41 = 0;
  v42 = 0;
  *(_DWORD *)(*a4 + 4 * a2) = 1;
  *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8 * a2) = **(_QWORD **)(a3 + 16);
  v7 = (uint64_t *)(*(_QWORD *)(a1 + 24) + (a2 << 6));
  v9 = *v7;
  v8 = v7[1];
  v43 = a2;
  v44 = 0;
  v45 = v9;
  v46 = a2;
  v47 = v8;
  v48 = a2;
  v10 = sub_2236BBE80((void **)&v40, (uint64_t)&v43);
  v41 = v10;
  if (v40 != v10)
  {
    v11 = v10;
    v37 = v6;
    v38 = v4;
    v36 = v5;
    while (1)
    {
      v13 = *((_QWORD *)v11 - 9);
      v11 -= 72;
      v12 = v13;
      if (v11[8])
        *(v10 - 64) = 0;
      v14 = (uint64_t *)*((_QWORD *)v11 + 5);
      v15 = *((_QWORD *)v11 + 6);
      v17 = (uint64_t *)*((_QWORD *)v11 + 7);
      v16 = *((_QWORD *)v11 + 8);
      v41 = v11;
      v18 = *v4;
      if (v14 != v17)
        break;
LABEL_3:
      *(_DWORD *)(v18 + 4 * v12) = 4;
      v10 = v11;
      if (v40 == v11)
        goto LABEL_35;
    }
    while (1)
    {
      while (1)
      {
        v19 = *v14;
        if (!*(_DWORD *)(v18 + 4 * *v14))
          break;
        v14 += 2;
        if (v14 == v17)
          goto LABEL_3;
      }
      v20 = v14[1] + 32;
      v21 = v14 + 2;
      if (v11 >= v42)
      {
        v23 = v40;
        v24 = 0x8E38E38E38E38E39 * ((v11 - v40) >> 3);
        v25 = v24 + 1;
        if (v24 + 1 > 0x38E38E38E38E38ELL)
          sub_22316E078();
        v39 = v16;
        if (0x1C71C71C71C71C72 * ((v42 - v40) >> 3) > v25)
          v25 = 0x1C71C71C71C71C72 * ((v42 - v40) >> 3);
        if (0x8E38E38E38E38E39 * ((v42 - v40) >> 3) >= 0x1C71C71C71C71C7)
          v26 = 0x38E38E38E38E38ELL;
        else
          v26 = v25;
        if (v26 > 0x38E38E38E38E38ELL)
          sub_223174E94();
        v27 = v17;
        v28 = (char *)operator new(72 * v26);
        v29 = &v28[72 * v24];
        *(_QWORD *)v29 = v12;
        *((_QWORD *)v29 + 2) = v15;
        *((_QWORD *)v29 + 3) = v19;
        v29[8] = 1;
        *((_QWORD *)v29 + 4) = v20;
        *((_QWORD *)v29 + 5) = v21;
        *((_QWORD *)v29 + 6) = v15;
        *((_QWORD *)v29 + 7) = v27;
        *((_QWORD *)v29 + 8) = v39;
        v22 = v29 + 72;
        if (v11 == v23)
        {
          v40 = &v28[72 * v24];
          v41 = v29 + 72;
          v42 = &v28[72 * v26];
          v5 = v36;
          v6 = v37;
          v4 = v38;
          if (!v11)
            goto LABEL_30;
        }
        else
        {
          v30 = 0;
          v5 = v36;
          v6 = v37;
          do
          {
            v32 = &v29[v30];
            v33 = &v11[v30];
            *((_QWORD *)v32 - 9) = *(_QWORD *)&v11[v30 - 72];
            *(v32 - 64) = 0;
            if (v11[v30 - 64])
            {
              v34 = *(_OWORD *)(v33 - 56);
              *((_QWORD *)v32 - 5) = *((_QWORD *)v33 - 5);
              *(_OWORD *)(v32 - 56) = v34;
              *(v32 - 64) = 1;
            }
            v31 = *((_OWORD *)v33 - 1);
            *((_OWORD *)v32 - 2) = *((_OWORD *)v33 - 2);
            *((_OWORD *)v32 - 1) = v31;
            v30 -= 72;
          }
          while (&v11[v30] != v23);
          v40 = &v29[v30];
          v41 = v29 + 72;
          v42 = &v28[72 * v26];
          do
          {
            if (*(v11 - 64))
              *(v11 - 64) = 0;
            v11 -= 72;
          }
          while (v11 != v23);
          v11 = v23;
          v4 = v38;
          if (!v11)
            goto LABEL_30;
        }
        operator delete(v11);
      }
      else
      {
        *(_QWORD *)v11 = v12;
        *((_QWORD *)v11 + 2) = v15;
        *((_QWORD *)v11 + 3) = v19;
        v11[8] = 1;
        *((_QWORD *)v11 + 4) = v20;
        *((_QWORD *)v11 + 5) = v21;
        *((_QWORD *)v11 + 6) = v15;
        *((_QWORD *)v11 + 7) = v17;
        v22 = v11 + 72;
        *((_QWORD *)v11 + 8) = v16;
      }
LABEL_30:
      v41 = v22;
      v18 = *v4;
      *(_DWORD *)(*v4 + 4 * v19) = 1;
      *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v19) = **(_QWORD **)(v5 + 16);
      v35 = *(_QWORD *)(v6 + 24) + (v19 << 6);
      v14 = *(uint64_t **)v35;
      v17 = *(uint64_t **)(v35 + 8);
      v11 = v22;
      v16 = v19;
      v12 = v19;
      v15 = v19;
      if (*(uint64_t **)v35 == v17)
        goto LABEL_3;
    }
  }
  v11 = v10;
LABEL_35:
  if (v11)
  {
    v41 = v11;
    operator delete(v11);
  }
}

void sub_22370FD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_2236BBE2C((char **)va);
  _Unwind_Resume(a1);
}

void sub_22370FD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_2236BBE2C((char **)va);
  _Unwind_Resume(a1);
}

void sub_22370FD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_2236BBE2C((char **)va);
  _Unwind_Resume(a1);
}

void sub_22370FD80(uint64_t a1, _OWORD *a2, __int128 *a3, unsigned int a4, int a5)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  void *__p;
  void *v21;
  uint64_t v22;
  __int128 v23;
  _BYTE v24[24];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v9 = sub_22370FF50(a1, a4);
  v10 = sub_22342DA5C((_QWORD *)(a1 + 96), (uint64_t)a3);
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 24) + (v10[4] << 6);
    if (*(_DWORD *)(v11 + 60))
      sub_22316DD70();
    *(_DWORD *)(v11 + 40) = a5;
  }
  else
  {
    v23 = *a3;
    *(_OWORD *)&v24[4] = *a2;
    v21 = 0;
    v22 = 0;
    __p = 0;
    *(_DWORD *)v24 = a5;
    *(_DWORD *)&v24[20] = 0;
    v12 = *(_QWORD *)(a1 + 32);
    if (v12 >= *(_QWORD *)(a1 + 40))
    {
      v15 = sub_2237103FC((void **)(a1 + 24), (uint64_t)&__p);
      v16 = __p;
      *(_QWORD *)(a1 + 32) = v15;
      if (v16)
      {
        v21 = v16;
        operator delete(v16);
        v15 = *(char **)(a1 + 32);
      }
    }
    else
    {
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      v13 = v23;
      v14 = *(_OWORD *)v24;
      *(_QWORD *)(v12 + 56) = *(_QWORD *)&v24[16];
      *(_OWORD *)(v12 + 40) = v14;
      *(_OWORD *)(v12 + 24) = v13;
      v15 = (char *)(v12 + 64);
      *(_QWORD *)(a1 + 32) = v12 + 64;
    }
    v17 = *(_QWORD *)(a1 + 24);
    __p = a3;
    sub_2236BA6E0(a1 + 96, (uint64_t)a3, (uint64_t)&unk_2245BA939, (_OWORD **)&__p)[4] = ((uint64_t)&v15[-v17] >> 6) - 1;
  }
  v18 = v9[3];
  __p = a3;
  v19 = sub_2236BA6E0(a1 + 96, (uint64_t)a3, (uint64_t)&unk_2245BA939, (_OWORD **)&__p);
  sub_223710574(v18, v19[4], (uint64_t *)a1, (uint64_t)&__p);
}

void sub_22370FF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22370FF50(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint8x8_t v22;
  void **v23;
  unint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  void *__p;
  void *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v5 = (uint64_t *)(a1 + 56);
  v6 = a2;
  v7 = *(_QWORD *)(a1 + 64);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = a2;
      if (v7 <= a2)
        v9 = a2 % v7;
    }
    else
    {
      v9 = ((_DWORD)v7 - 1) & a2;
    }
    v10 = *(void ***)(*v5 + 8 * v9);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          v12 = v7 - 1;
          while (1)
          {
            v14 = v11[1];
            if (v14 == a2)
            {
              if (*((_DWORD *)v11 + 4) == a2)
                return v11;
            }
            else if ((v14 & v12) != v9)
            {
              goto LABEL_21;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_21;
          }
        }
        do
        {
          v13 = v11[1];
          if (v13 == a2)
          {
            if (*((_DWORD *)v11 + 4) == a2)
              return v11;
          }
          else
          {
            if (v13 >= v7)
              v13 %= v7;
            if (v13 != v9)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_21:
  __p = 0;
  v40 = 0;
  v41 = 0;
  LODWORD(v42) = a2;
  HIDWORD(v44) = 1;
  v15 = *(_QWORD *)(a1 + 32);
  if (v15 >= *(_QWORD *)(a1 + 40))
  {
    v18 = sub_2237103FC((void **)(a1 + 24), (uint64_t)&__p);
    v19 = __p;
    *(_QWORD *)(a1 + 32) = v18;
    if (v19)
    {
      v40 = v19;
      operator delete(v19);
      v18 = *(char **)(a1 + 32);
    }
  }
  else
  {
    *(_QWORD *)v15 = 0;
    *(_QWORD *)(v15 + 8) = 0;
    *(_QWORD *)(v15 + 16) = 0;
    v16 = v42;
    v17 = v43;
    *(_QWORD *)(v15 + 56) = v44;
    *(_OWORD *)(v15 + 40) = v17;
    *(_OWORD *)(v15 + 24) = v16;
    v18 = (char *)(v15 + 64);
    *(_QWORD *)(a1 + 32) = v15 + 64;
  }
  v20 = *(_QWORD *)(a1 + 24);
  v21 = *(_QWORD *)(a1 + 64);
  if (v21)
  {
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.u32[0] > 1uLL)
    {
      v2 = v6;
      if (v21 <= v6)
        v2 = v6 % v21;
    }
    else
    {
      v2 = ((_DWORD)v21 - 1) & v6;
    }
    v23 = *(void ***)(*v5 + 8 * v2);
    if (v23)
    {
      v11 = *v23;
      if (*v23)
      {
        if (v22.u32[0] < 2uLL)
        {
          while (1)
          {
            v25 = v11[1];
            if (v25 == v6)
            {
              if (*((_DWORD *)v11 + 4) == a2)
                return v11;
            }
            else if ((v25 & (v21 - 1)) != v2)
            {
              goto LABEL_46;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_46;
          }
        }
        do
        {
          v24 = v11[1];
          if (v24 == v6)
          {
            if (*((_DWORD *)v11 + 4) == a2)
              return v11;
          }
          else
          {
            if (v24 >= v21)
              v24 %= v21;
            if (v24 != v2)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_46:
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v6;
  *((_DWORD *)v11 + 4) = a2;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 80) + 1);
  v11[3] = ((uint64_t)&v18[-v20] >> 6) - 1;
  v27 = *(float *)(a1 + 88);
  if ((((float)(v27 * (float)v21) >= v26) & ~(v21 == 0)) != 0)
  {
    v6 = v2;
  }
  else
  {
    v28 = 1;
    if (v21 >= 3)
      v28 = (v21 & (v21 - 1)) != 0;
    v29 = v28 | (2 * v21);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      prime = v30;
    else
      prime = v29;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v21 = *(_QWORD *)(a1 + 64);
    }
    if (prime > v21)
      goto LABEL_58;
    if (prime < v21)
    {
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 80) / *(float *)(a1 + 88));
      if (v21 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v21), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime < v21)
LABEL_58:
        sub_2231B0668((uint64_t)v5, prime);
    }
    v21 = *(_QWORD *)(a1 + 64);
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v21 <= v6)
        v6 %= v21;
    }
    else
    {
      v6 = ((_DWORD)v21 - 1) & v6;
    }
  }
  v35 = *v5;
  v36 = *(_QWORD **)(*v5 + 8 * v6);
  if (v36)
  {
    *v11 = *v36;
LABEL_81:
    *v36 = v11;
    goto LABEL_82;
  }
  *v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(v35 + 8 * v6) = a1 + 72;
  if (*v11)
  {
    v37 = *(_QWORD *)(*v11 + 8);
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v37 >= v21)
        v37 %= v21;
    }
    else
    {
      v37 &= v21 - 1;
    }
    v36 = (_QWORD *)(*v5 + 8 * v37);
    goto LABEL_81;
  }
LABEL_82:
  ++*(_QWORD *)(a1 + 80);
  return v11;
}

void sub_2237103C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2237103D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2237103FC(void **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  char *v20;
  void *v21;
  void *v22;

  v2 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 6;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 58)
    sub_22316E078();
  v6 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v6 >> 5 > v3)
    v3 = v6 >> 5;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0)
    v7 = 0x3FFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 58)
      sub_223174E94();
    v8 = (char *)operator new(v7 << 6);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[64 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  v10 = &v8[64 * v7];
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v9 + 40) = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v9 + 7) = *(_QWORD *)(a2 + 56);
  v11 = v9 + 64;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = &v9[v14];
      v16 = &v13[v14];
      *((_QWORD *)v15 - 7) = 0;
      *((_QWORD *)v15 - 6) = 0;
      *((_OWORD *)v15 - 4) = *(_OWORD *)&v13[v14 - 64];
      *((_QWORD *)v15 - 6) = *(_QWORD *)&v13[v14 - 48];
      *((_QWORD *)v16 - 8) = 0;
      *((_QWORD *)v16 - 7) = 0;
      *((_QWORD *)v16 - 6) = 0;
      v17 = *(_OWORD *)&v13[v14 - 40];
      v18 = *(_OWORD *)&v13[v14 - 24];
      *((_QWORD *)v15 - 1) = *(_QWORD *)&v13[v14 - 8];
      *(_OWORD *)(v15 - 24) = v18;
      *(_OWORD *)(v15 - 40) = v17;
      v14 -= 64;
    }
    while (&v13[v14] != v12);
    v13 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = &v9[v14];
    a1[1] = v11;
    a1[2] = v10;
    if (v19 != v13)
    {
      v20 = v19;
      do
      {
        v22 = (void *)*((_QWORD *)v20 - 8);
        v20 -= 64;
        v21 = v22;
        if (v22)
        {
          *((_QWORD *)v19 - 7) = v21;
          operator delete(v21);
        }
        v19 = v20;
      }
      while (v20 != v13);
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

void sub_223710574(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char *v29;
  void *v30;
  void *v31;
  char *v32;
  char *v33;
  void *v34;
  void *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  char **v41;
  char v42;
  char *v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  __int128 v47;
  void *v48;

  if (a1 <= a2)
    v8 = a2;
  else
    v8 = a1;
  v10 = (char *)a3[3];
  v9 = (char *)a3[4];
  v11 = (char *)(v9 - v10);
  v12 = (v9 - v10) >> 6;
  if (v8 < v12)
    goto LABEL_32;
  v13 = v8 + 1;
  v14 = v8 + 1 - v12;
  if (v8 + 1 <= v12)
  {
    if (v8 + 1 >= v12)
      goto LABEL_32;
    v32 = &v10[64 * v13];
    if (v9 != v32)
    {
      v33 = (char *)a3[4];
      do
      {
        v35 = (void *)*((_QWORD *)v33 - 8);
        v33 -= 64;
        v34 = v35;
        if (v35)
        {
          *((_QWORD *)v9 - 7) = v34;
          operator delete(v34);
        }
        v9 = v33;
      }
      while (v33 != v32);
    }
    goto LABEL_28;
  }
  v15 = a3[5];
  if (v14 <= (v15 - (uint64_t)v9) >> 6)
  {
    v32 = &v9[64 * v14];
    bzero((void *)a3[4], (((v8 << 6) - (_QWORD)v11) & 0xFFFFFFFFFFFFFFC0) + 64);
LABEL_28:
    a3[4] = (uint64_t)v32;
    goto LABEL_32;
  }
  if (v13 >> 58)
    sub_22316E078();
  v16 = v15 - (_QWORD)v10;
  v17 = (v15 - (uint64_t)v10) >> 5;
  if (v17 <= v13)
    v17 = v8 + 1;
  v18 = v16 >= 0x7FFFFFFFFFFFFFC0;
  v19 = 0x3FFFFFFFFFFFFFFLL;
  if (!v18)
    v19 = v17;
  if (v19 >> 58)
    sub_223174E94();
  v46 = v19 << 6;
  v45 = (char *)operator new(v19 << 6);
  v20 = &v45[64 * v12];
  bzero(v20, (((v8 << 6) - (_QWORD)v11) & 0xFFFFFFFFFFFFFFC0) + 64);
  v21 = &v45[64 * v13];
  v22 = &v45[v46];
  if (v9 == v10)
  {
    a3[3] = (uint64_t)v20;
    a3[4] = (uint64_t)v21;
    a3[5] = (uint64_t)v22;
  }
  else
  {
    v23 = 0;
    do
    {
      v24 = &v20[v23];
      v25 = &v9[v23];
      *((_OWORD *)v24 - 4) = *(_OWORD *)&v9[v23 - 64];
      *((_QWORD *)v24 - 6) = *(_QWORD *)&v9[v23 - 48];
      *((_QWORD *)v25 - 8) = 0;
      *((_QWORD *)v25 - 7) = 0;
      *((_QWORD *)v25 - 6) = 0;
      v26 = *(_OWORD *)&v9[v23 - 40];
      v27 = *(_OWORD *)&v9[v23 - 24];
      *((_QWORD *)v24 - 1) = *(_QWORD *)&v9[v23 - 8];
      *(_OWORD *)(v24 - 24) = v27;
      *(_OWORD *)(v24 - 40) = v26;
      v23 -= 64;
    }
    while (&v9[v23] != v10);
    v9 = (char *)a3[3];
    v28 = (char *)a3[4];
    a3[3] = (uint64_t)&v20[v23];
    a3[4] = (uint64_t)v21;
    a3[5] = (uint64_t)v22;
    if (v28 != v9)
    {
      v29 = v28;
      do
      {
        v31 = (void *)*((_QWORD *)v29 - 8);
        v29 -= 64;
        v30 = v31;
        if (v31)
        {
          *((_QWORD *)v28 - 7) = v30;
          operator delete(v30);
        }
        v28 = v29;
      }
      while (v29 != v9);
    }
  }
  if (v9)
    operator delete(v9);
LABEL_32:
  v36 = (uint64_t *)operator new(0x28uLL);
  v36[2] = a1;
  v36[3] = a2;
  v37 = *a3;
  *v36 = *a3;
  v36[1] = (uint64_t)a3;
  *(_QWORD *)(v37 + 8) = v36;
  *a3 = (uint64_t)v36;
  v38 = a3[3];
  ++a3[2];
  *(_QWORD *)&v47 = a2;
  *((_QWORD *)&v47 + 1) = v36;
  v48 = &unk_24EC574F0;
  v39 = sub_2236BBCA8((char **)(v38 + (a1 << 6)), &v47);
  if (v40)
  {
    v41 = (char **)(a3[3] + (a2 << 6));
    *(_QWORD *)&v47 = a1;
    *((_QWORD *)&v47 + 1) = v36;
    v48 = &unk_24EC574F0;
    sub_2236BBCA8(v41, &v47);
    v42 = 1;
  }
  else
  {
    v43 = v39;
    v44 = *v36;
    *(_QWORD *)(v44 + 8) = v36[1];
    *(_QWORD *)v36[1] = v44;
    --a3[2];
    operator delete(v36);
    v42 = 0;
    v36 = (uint64_t *)*((_QWORD *)v43 + 1);
  }
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = v36 + 4;
  *(_BYTE *)(a4 + 24) = v42;
}

uint64_t *sub_223710828(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  v15[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v8)
LABEL_36:
        sub_2231B0668(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *v15 = *v26;
LABEL_59:
    *v26 = v15;
    goto LABEL_60;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_223710B1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223710B30(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  uint64_t i;
  int v12;
  char *v13;
  unsigned int *v14;
  uint64_t j;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t k;
  int v52;
  char *v53;
  char *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  std::string *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  const char *v76;
  uint64_t v77;
  const char *v78;
  size_t v79;
  unsigned __int8 v80;
  unsigned __int8 v81;
  const char *v82;
  size_t v83;
  const char *v84;
  std::string::size_type *p_size;
  unint64_t v86;
  const char *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  size_t v96;
  void *v97;
  _QWORD *v98;
  size_t v99;
  size_t v100;
  _QWORD *p_dst;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  char v106;
  _QWORD *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *p_shared_owners;
  unint64_t v111;
  void *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::string::size_type v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  std::string::size_type v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  _QWORD *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  const char *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  const char *v156;
  uint64_t *v157;
  uint64_t v158;
  char *v159;
  unsigned int v160;
  uint64_t v161;
  _QWORD v162[2];
  void *v163;
  uint64_t v164;
  void *v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  int v169;
  std::string v170;
  char *v171;
  std::__shared_weak_count *v172;
  _QWORD *__dst;
  __int128 v174;
  __int128 v175;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v177;
  const char *v178;
  int v179;
  const char *v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  std::string object;
  __int128 v184;
  void *v185;
  size_t v186;
  unint64_t v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199[3];
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  char *v205;
  char v206;
  char v207;
  char v208;
  char v209;
  char v210;
  char v211;
  char v212;
  char v213;
  char v214;
  char v215;
  char v216;
  char v217;
  char v218;
  char v219;
  char v220;
  char v221;
  void *__p;
  char *v223;
  __int128 v224;
  __int128 v225;
  int v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  void *v231;
  char v232;
  unint64_t v233;
  int v234;
  uint64_t v235;
  _QWORD v236[5];

  v236[2] = *MEMORY[0x24BDAC8D0];
  v167 = 0u;
  v168 = 0u;
  v169 = 728309760;
  kdebug_trace();
  sub_2245664AC(a2, &v224);
  v6 = operator new(0x28uLL);
  v165 = v6;
  v166 = xmmword_2245C4640;
  v7 = v225;
  *v6 = v224;
  v6[1] = v7;
  *((_DWORD *)v6 + 8) = v226;
  *((_BYTE *)v6 + 36) = 0;
  sub_22340EADC((uint64_t)&v224, 16);
  v162[0] = &off_24EC79738;
  v162[1] = 1;
  v163 = &unk_24EC79888;
  v8 = operator new();
  *(_QWORD *)v8 = &v225;
  *(_QWORD *)(v8 + 8) = &v225;
  *(_BYTE *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 40) = 0;
  *(_BYTE *)(v8 + 48) = 0;
  *(_BYTE *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  v9 = *(__int128 **)a3;
  v10 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4;
  v162[0] = &off_24EC1FA80;
  v163 = &unk_24EC1FBD0;
  v164 = v8;
  sub_223723FB4((uint64_t)a2, v10, v9, (uint64_t)&object);
  v157 = a1;
  if (*(_BYTE *)(v164 + 40))
  {
    *(_QWORD *)&v175 = v164 + 16;
    sub_22455A7EC((uint64_t **)&v175, 1u);
  }
  else
  {
    sub_22455AA60((uint64_t)&v175, v164 + 8);
  }
  if (*(_BYTE *)(v164 + 40))
  {
    *(_QWORD *)&v175 = v164 + 16;
    sub_22455A7EC((uint64_t **)&v175, 3u);
  }
  else
  {
    LOBYTE(v175) = 3;
    std::ostream::write();
  }
  if (*(_BYTE *)(v164 + 40))
  {
    *(_QWORD *)&v175 = v164 + 16;
    sub_224559C04((uint64_t **)&v175, object.__r_.__value_.__s.__data_[8]);
    sub_224559C04((uint64_t **)&v175, object.__r_.__value_.__s.__data_[9]);
    sub_224559C04((uint64_t **)&v175, object.__r_.__value_.__s.__data_[10]);
    sub_224559C04((uint64_t **)&v175, object.__r_.__value_.__s.__data_[11]);
    sub_224559C04((uint64_t **)&v175, object.__r_.__value_.__s.__data_[12]);
    sub_224559C04((uint64_t **)&v175, object.__r_.__value_.__s.__data_[13]);
    sub_224559C04((uint64_t **)&v175, object.__r_.__value_.__s.__data_[14]);
    sub_224559C04((uint64_t **)&v175, object.__r_.__value_.__s.__data_[15]);
    sub_224559C04((uint64_t **)&v175, object.__r_.__value_.__s.__data_[16]);
    sub_224559C04((uint64_t **)&v175, object.__r_.__value_.__s.__data_[17]);
    sub_224559C04((uint64_t **)&v175, object.__r_.__value_.__s.__data_[18]);
    sub_224559C04((uint64_t **)&v175, object.__r_.__value_.__s.__data_[19]);
    sub_224559C04((uint64_t **)&v175, object.__r_.__value_.__s.__data_[20]);
    sub_224559C04((uint64_t **)&v175, object.__r_.__value_.__s.__data_[21]);
    sub_224559C04((uint64_t **)&v175, object.__r_.__value_.__s.__data_[22]);
    sub_224559C04((uint64_t **)&v175, SHIBYTE(object.__r_.__value_.__r.__words[2]));
  }
  else
  {
    for (i = 0; i != 16; ++i)
    {
      v12 = *((char *)&object.__r_.__value_.__r.__words[1] + i);
      if (v12 < 0)
      {
        LOBYTE(v175) = -52;
        BYTE1(v175) = v12;
      }
      else
      {
        LOBYTE(v175) = *((_BYTE *)&object.__r_.__value_.__r.__words[1] + i);
      }
      std::ostream::write();
    }
  }
  if (*(_BYTE *)(v164 + 40))
  {
    *(_QWORD *)&v175 = v164 + 16;
    sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, (unsigned int *)&v184);
    sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, (unsigned int *)&v184 + 1);
  }
  else
  {
    LOBYTE(v175) = -54;
    *(_DWORD *)((char *)&v175 + 1) = bswap32(v184);
    std::ostream::write();
    LOBYTE(v175) = -54;
    *(_DWORD *)((char *)&v175 + 1) = bswap32(DWORD1(v184));
    std::ostream::write();
  }
  if (*(_BYTE *)(v164 + 40))
  {
    *(_QWORD *)&v175 = v164 + 16;
    sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, (unsigned int *)&v184 + 2);
    sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, (unsigned int *)&v184 + 3);
  }
  else
  {
    LOBYTE(v175) = -54;
    *(_DWORD *)((char *)&v175 + 1) = bswap32(DWORD2(v184));
    std::ostream::write();
    LOBYTE(v175) = -54;
    *(_DWORD *)((char *)&v175 + 1) = bswap32(HIDWORD(v184));
    std::ostream::write();
  }
  if (*(_BYTE *)(v164 + 40))
  {
    *(_QWORD *)&v175 = v164 + 16;
    sub_22455A7EC((uint64_t **)&v175, v185);
    sub_22455A7EC((uint64_t **)&v175, HIDWORD(v185));
  }
  else
  {
    sub_22455AA60((uint64_t)&v175, v164 + 8);
    sub_22455AA60((uint64_t)&v175, v164 + 8);
  }
  if (*(_BYTE *)(v164 + 40))
  {
    *(_QWORD *)&v175 = v164 + 16;
    sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, (unsigned int *)&v186);
    sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, (unsigned int *)&v186 + 1);
    sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, (unsigned int *)&v187);
    sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, (unsigned int *)&v187 + 1);
    sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, &v188);
    sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, &v189);
    sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, &v190);
    sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, &v191);
    sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, &v192);
    sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, &v193);
    sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, &v194);
    sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, &v195);
    sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, &v196);
    sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, &v197);
    sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, &v198);
    sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, v199);
  }
  else
  {
    LOBYTE(v175) = -54;
    *(_DWORD *)((char *)&v175 + 1) = bswap32(v186);
    std::ostream::write();
    LOBYTE(v175) = -54;
    *(_DWORD *)((char *)&v175 + 1) = bswap32(HIDWORD(v186));
    std::ostream::write();
    LOBYTE(v175) = -54;
    *(_DWORD *)((char *)&v175 + 1) = bswap32(v187);
    std::ostream::write();
    LOBYTE(v175) = -54;
    *(_DWORD *)((char *)&v175 + 1) = bswap32(HIDWORD(v187));
    std::ostream::write();
    LOBYTE(v175) = -54;
    *(_DWORD *)((char *)&v175 + 1) = bswap32(v188);
    std::ostream::write();
    LOBYTE(v175) = -54;
    *(_DWORD *)((char *)&v175 + 1) = bswap32(v189);
    std::ostream::write();
    LOBYTE(v175) = -54;
    *(_DWORD *)((char *)&v175 + 1) = bswap32(v190);
    std::ostream::write();
    LOBYTE(v175) = -54;
    *(_DWORD *)((char *)&v175 + 1) = bswap32(v191);
    std::ostream::write();
    LOBYTE(v175) = -54;
    *(_DWORD *)((char *)&v175 + 1) = bswap32(v192);
    std::ostream::write();
    LOBYTE(v175) = -54;
    *(_DWORD *)((char *)&v175 + 1) = bswap32(v193);
    std::ostream::write();
    LOBYTE(v175) = -54;
    *(_DWORD *)((char *)&v175 + 1) = bswap32(v194);
    std::ostream::write();
    LOBYTE(v175) = -54;
    *(_DWORD *)((char *)&v175 + 1) = bswap32(v195);
    std::ostream::write();
    LOBYTE(v175) = -54;
    *(_DWORD *)((char *)&v175 + 1) = bswap32(v196);
    std::ostream::write();
    LOBYTE(v175) = -54;
    *(_DWORD *)((char *)&v175 + 1) = bswap32(v197);
    std::ostream::write();
    LOBYTE(v175) = -54;
    *(_DWORD *)((char *)&v175 + 1) = bswap32(v198);
    std::ostream::write();
    LOBYTE(v175) = -54;
    *(_DWORD *)((char *)&v175 + 1) = bswap32(v199[0]);
    std::ostream::write();
  }
  if (*(_BYTE *)(v164 + 40))
  {
    *(_QWORD *)&v175 = v164 + 16;
    sub_22455B1CC((uint64_t **)&v175, 0xAAAAAAAAAAAAAAABLL * ((v205 - (_BYTE *)v204) >> 6));
  }
  else
  {
    sub_22455B4D4();
  }
  v13 = (char *)v204;
  v159 = v205;
  if (v205 != v204)
  {
    while (1)
    {
      if (*(_BYTE *)(v164 + 40))
      {
        *(_QWORD *)&v175 = v164 + 16;
        sub_22455A7EC((uint64_t **)&v175, 6u);
      }
      else
      {
        LOBYTE(v175) = 6;
        std::ostream::write();
      }
      if (*(_BYTE *)(v164 + 40))
      {
        *(_QWORD *)&v175 = v164 + 16;
        sub_224559C04((uint64_t **)&v175, *v13);
        sub_224559C04((uint64_t **)&v175, v13[1]);
        sub_224559C04((uint64_t **)&v175, v13[2]);
        sub_224559C04((uint64_t **)&v175, v13[3]);
        sub_224559C04((uint64_t **)&v175, v13[4]);
        sub_224559C04((uint64_t **)&v175, v13[5]);
        sub_224559C04((uint64_t **)&v175, v13[6]);
        sub_224559C04((uint64_t **)&v175, v13[7]);
        sub_224559C04((uint64_t **)&v175, v13[8]);
        sub_224559C04((uint64_t **)&v175, v13[9]);
        sub_224559C04((uint64_t **)&v175, v13[10]);
        sub_224559C04((uint64_t **)&v175, v13[11]);
        sub_224559C04((uint64_t **)&v175, v13[12]);
        sub_224559C04((uint64_t **)&v175, v13[13]);
        sub_224559C04((uint64_t **)&v175, v13[14]);
        sub_224559C04((uint64_t **)&v175, v13[15]);
      }
      else
      {
        for (j = 0; j != 16; ++j)
        {
          v16 = v13[j];
          if (v16 < 0)
          {
            LOBYTE(v175) = -52;
            BYTE1(v175) = v16;
          }
          else
          {
            LOBYTE(v175) = v13[j];
          }
          std::ostream::write();
        }
      }
      v14 = (unsigned int *)(v13 + 16);
      if (*(_BYTE *)(v164 + 40))
      {
        *(_QWORD *)&v175 = v164 + 16;
        sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, v14);
        sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, (unsigned int *)v13 + 5);
        sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, (unsigned int *)v13 + 6);
      }
      else
      {
        v17 = *v14;
        LOBYTE(v175) = -54;
        *(_DWORD *)((char *)&v175 + 1) = bswap32(v17);
        std::ostream::write();
        v18 = *((_DWORD *)v13 + 5);
        LOBYTE(v175) = -54;
        *(_DWORD *)((char *)&v175 + 1) = bswap32(v18);
        std::ostream::write();
        v19 = *((_DWORD *)v13 + 6);
        LOBYTE(v175) = -54;
        *(_DWORD *)((char *)&v175 + 1) = bswap32(v19);
        std::ostream::write();
      }
      v20 = (unsigned int *)(v13 + 28);
      if (*(_BYTE *)(v164 + 40))
      {
        *(_QWORD *)&v175 = v164 + 16;
        sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, v20);
        sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, (unsigned int *)v13 + 8);
        sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, (unsigned int *)v13 + 9);
      }
      else
      {
        v21 = *v20;
        LOBYTE(v175) = -54;
        *(_DWORD *)((char *)&v175 + 1) = bswap32(v21);
        std::ostream::write();
        v22 = *((_DWORD *)v13 + 8);
        LOBYTE(v175) = -54;
        *(_DWORD *)((char *)&v175 + 1) = bswap32(v22);
        std::ostream::write();
        v23 = *((_DWORD *)v13 + 9);
        LOBYTE(v175) = -54;
        *(_DWORD *)((char *)&v175 + 1) = bswap32(v23);
        std::ostream::write();
      }
      v24 = (unsigned int *)(v13 + 40);
      if (*(_BYTE *)(v164 + 40))
      {
        *(_QWORD *)&v175 = v164 + 16;
        sub_22455B5CC((uint64_t)&v170, (uint64_t **)&v175, v24);
      }
      else
      {
        v25 = *v24;
        LOBYTE(v175) = -54;
        *(_DWORD *)((char *)&v175 + 1) = bswap32(v25);
        std::ostream::write();
      }
      v26 = (uint64_t)(*((_QWORD *)v13 + 7) - *((_QWORD *)v13 + 6)) >> 2;
      if (*(_BYTE *)(v164 + 40))
      {
        *(_QWORD *)&v175 = v164 + 16;
        sub_22455B1CC((uint64_t **)&v175, v26);
      }
      else
      {
        sub_22455B4D4();
      }
      v28 = (unsigned int *)*((_QWORD *)v13 + 6);
      v27 = (unsigned int *)*((_QWORD *)v13 + 7);
      v29 = v27 - v28;
      if (*(_BYTE *)(v164 + 40))
      {
        *(_QWORD *)&v175 = v164 + 16;
        if (v27 != v28)
        {
          v30 = 4 * v29;
          do
          {
            sub_22455A7EC((uint64_t **)&v175, *v28++);
            v30 -= 4;
          }
          while (v30);
        }
      }
      else if (v27 != v28)
      {
        v31 = 4 * v29;
        do
        {
          v32 = *v28;
          if (*v28 > 0xFF)
          {
            if (HIWORD(v32))
            {
              LOBYTE(v175) = -50;
              *(_DWORD *)((char *)&v175 + 1) = bswap32(v32);
            }
            else
            {
              LOBYTE(v175) = -51;
              *(_WORD *)((char *)&v175 + 1) = bswap32(v32) >> 16;
            }
          }
          else if (v32 > 0x7F)
          {
            LOBYTE(v175) = -52;
            BYTE1(v175) = v32;
          }
          else
          {
            LOBYTE(v175) = *v28;
          }
          std::ostream::write();
          ++v28;
          v31 -= 4;
        }
        while (v31);
      }
      if (*(_BYTE *)(v164 + 40))
      {
        *(_QWORD *)&v175 = v164 + 16;
        sub_22455A7EC((uint64_t **)&v175, 2u);
      }
      else
      {
        LOBYTE(v175) = 2;
        std::ostream::write();
      }
      sub_22330005C((uint64_t)v162, (uint64_t)(v13 + 72), 2u);
      if (*(_BYTE *)(v164 + 40))
      {
        *(_QWORD *)&v175 = v164 + 16;
        sub_22455A7EC((uint64_t **)&v175, *((_DWORD *)v13 + 32));
      }
      else
      {
        sub_22455AA60((uint64_t)&v175, v164 + 8);
      }
      v33 = (uint64_t)(*((_QWORD *)v13 + 18) - *((_QWORD *)v13 + 17)) >> 3;
      if (*(_BYTE *)(v164 + 40))
      {
        *(_QWORD *)&v175 = v164 + 16;
        sub_22455B1CC((uint64_t **)&v175, v33);
      }
      else
      {
        sub_22455B4D4();
      }
      v34 = *((_QWORD *)v13 + 17);
      v35 = *((_QWORD *)v13 + 18) - v34;
      if (v35)
      {
        v36 = (unsigned __int16 *)(v34 + 4);
        v37 = 8 * (v35 >> 3);
        while (1)
        {
          if (*(_BYTE *)(v164 + 40))
          {
            *(_QWORD *)&v175 = v164 + 16;
            sub_224559D48((uint64_t **)&v175, (__int16)*(v36 - 2));
            goto LABEL_86;
          }
          v39 = *(v36 - 2);
          if ((__int16)*(v36 - 2) <= -33)
            break;
          if ((__int16)v39 > 127)
          {
            if (v39 > 0xFF)
            {
              LOBYTE(v175) = -51;
              *(_WORD *)((char *)&v175 + 1) = __rev16(v39);
            }
            else
            {
              LOBYTE(v175) = -52;
              BYTE1(v175) = v39;
            }
            goto LABEL_96;
          }
          LOBYTE(v175) = *(v36 - 2);
          std::ostream::write();
LABEL_86:
          if (*(_BYTE *)(v164 + 40))
          {
            *(_QWORD *)&v175 = v164 + 16;
            sub_224559D48((uint64_t **)&v175, (__int16)*(v36 - 1));
            goto LABEL_88;
          }
          v40 = *(v36 - 1);
          if ((__int16)*(v36 - 1) <= -33)
          {
            if (v40 >> 7 > 0x1FE)
            {
              LOBYTE(v175) = -48;
              BYTE1(v175) = v40;
            }
            else
            {
              LOBYTE(v175) = -47;
              *(_WORD *)((char *)&v175 + 1) = __rev16(v40);
            }
LABEL_100:
            std::ostream::write();
            goto LABEL_88;
          }
          if ((__int16)v40 > 127)
          {
            if (v40 > 0xFF)
            {
              LOBYTE(v175) = -51;
              *(_WORD *)((char *)&v175 + 1) = __rev16(v40);
            }
            else
            {
              LOBYTE(v175) = -52;
              BYTE1(v175) = v40;
            }
            goto LABEL_100;
          }
          LOBYTE(v175) = *(v36 - 1);
          std::ostream::write();
LABEL_88:
          if (*(_BYTE *)(v164 + 40))
          {
            *(_QWORD *)&v175 = v164 + 16;
            sub_224559D48((uint64_t **)&v175, (__int16)*v36);
          }
          else
          {
            v38 = *v36;
            if ((__int16)*v36 > -33)
            {
              if ((__int16)v38 <= 127)
              {
                LOBYTE(v175) = *v36;
                std::ostream::write();
                goto LABEL_83;
              }
              if (v38 > 0xFF)
              {
                LOBYTE(v175) = -51;
                *(_WORD *)((char *)&v175 + 1) = __rev16(v38);
              }
              else
              {
                LOBYTE(v175) = -52;
                BYTE1(v175) = v38;
              }
            }
            else if (v38 >> 7 > 0x1FE)
            {
              LOBYTE(v175) = -48;
              BYTE1(v175) = v38;
            }
            else
            {
              LOBYTE(v175) = -47;
              *(_WORD *)((char *)&v175 + 1) = __rev16(v38);
            }
            std::ostream::write();
          }
LABEL_83:
          v36 += 4;
          v37 -= 8;
          if (!v37)
            goto LABEL_119;
        }
        if (v39 >> 7 > 0x1FE)
        {
          LOBYTE(v175) = -48;
          BYTE1(v175) = v39;
        }
        else
        {
          LOBYTE(v175) = -47;
          *(_WORD *)((char *)&v175 + 1) = __rev16(v39);
        }
LABEL_96:
        std::ostream::write();
        goto LABEL_86;
      }
LABEL_119:
      if (v13[184])
        break;
      if (*(_BYTE *)(v164 + 40))
      {
        *(_QWORD *)&v175 = v164 + 16;
        sub_224559C04((uint64_t **)&v175, 0);
      }
      else
      {
        LOBYTE(v175) = 0;
        std::ostream::write();
      }
LABEL_32:
      v13 += 192;
      if (v13 == v159)
        goto LABEL_149;
    }
    if (*(_BYTE *)(v164 + 40))
    {
      *(_QWORD *)&v175 = v164 + 16;
      sub_224559C04((uint64_t **)&v175, 1);
    }
    else
    {
      LOBYTE(v175) = 1;
      std::ostream::write();
    }
    v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v13 + 21) - *((_QWORD *)v13 + 20)) >> 3);
    if (*(_BYTE *)(v164 + 40))
    {
      *(_QWORD *)&v175 = v164 + 16;
      sub_22455B1CC((uint64_t **)&v175, v41);
    }
    else
    {
      sub_22455B4D4();
    }
    v42 = (_QWORD *)*((_QWORD *)v13 + 20);
    v43 = (_QWORD *)*((_QWORD *)v13 + 21);
    if (v43 == v42)
      goto LABEL_32;
    while (1)
    {
      v44 = v42[1] - *v42;
      v45 = (uint64_t)v44 >> 4;
      if (*(_BYTE *)(v164 + 40))
      {
        *(_QWORD *)&v175 = v164 + 16;
        sub_22455B1CC((uint64_t **)&v175, v45);
      }
      else
      {
        if (v44 > 0xFFF)
        {
          if (!(v44 >> 20))
          {
            LOBYTE(v175) = -51;
            *(_WORD *)((char *)&v175 + 1) = bswap32(v44 >> 4) >> 16;
            std::ostream::write();
            goto LABEL_133;
          }
          if (v44 >> 36)
          {
            LOBYTE(v175) = -49;
            *(_QWORD *)((char *)&v175 + 1) = bswap64(v45);
          }
          else
          {
            LOBYTE(v175) = -50;
            *(_DWORD *)((char *)&v175 + 1) = bswap32(v44 >> 4);
          }
        }
        else if (v44 > 0x7FF)
        {
          LOBYTE(v175) = -52;
          BYTE1(v175) = v44 >> 4;
        }
        else
        {
          LOBYTE(v175) = v44 >> 4;
        }
        std::ostream::write();
      }
LABEL_133:
      v46 = v42[1] - *v42;
      if (v46)
      {
        v47 = (unint64_t *)(*v42 + 8);
        v48 = 16 * (v46 >> 4);
        do
        {
          if (*(_BYTE *)(v164 + 40))
          {
            *(_QWORD *)&v175 = v164 + 16;
            sub_22455AB50((uint64_t **)&v175, *(v47 - 1));
            sub_22455AB50((uint64_t **)&v175, *v47);
          }
          else
          {
            sub_22455B08C();
            sub_22455B08C();
          }
          v47 += 2;
          v48 -= 16;
        }
        while (v48);
      }
      v42 += 3;
      if (v42 == v43)
        goto LABEL_32;
    }
  }
LABEL_149:
  if (*(_BYTE *)(v164 + 40))
  {
    *(_QWORD *)&v175 = v164 + 16;
    sub_224559C04((uint64_t **)&v175, v206);
    sub_224559C04((uint64_t **)&v175, v207);
    sub_224559C04((uint64_t **)&v175, v208);
    sub_224559C04((uint64_t **)&v175, v209);
    sub_224559C04((uint64_t **)&v175, v210);
    sub_224559C04((uint64_t **)&v175, v211);
    sub_224559C04((uint64_t **)&v175, v212);
    sub_224559C04((uint64_t **)&v175, v213);
    sub_224559C04((uint64_t **)&v175, v214);
    sub_224559C04((uint64_t **)&v175, v215);
    sub_224559C04((uint64_t **)&v175, v216);
    sub_224559C04((uint64_t **)&v175, v217);
    sub_224559C04((uint64_t **)&v175, v218);
    sub_224559C04((uint64_t **)&v175, v219);
    sub_224559C04((uint64_t **)&v175, v220);
    sub_224559C04((uint64_t **)&v175, v221);
  }
  else
  {
    if (v206 < 0)
    {
      LOBYTE(v175) = -52;
      BYTE1(v175) = v206;
    }
    else
    {
      LOBYTE(v175) = v206;
    }
    std::ostream::write();
    if (v207 < 0)
    {
      LOBYTE(v175) = -52;
      BYTE1(v175) = v207;
    }
    else
    {
      LOBYTE(v175) = v207;
    }
    std::ostream::write();
    if (v208 < 0)
    {
      LOBYTE(v175) = -52;
      BYTE1(v175) = v208;
    }
    else
    {
      LOBYTE(v175) = v208;
    }
    std::ostream::write();
    if (v209 < 0)
    {
      LOBYTE(v175) = -52;
      BYTE1(v175) = v209;
    }
    else
    {
      LOBYTE(v175) = v209;
    }
    std::ostream::write();
    if (v210 < 0)
    {
      LOBYTE(v175) = -52;
      BYTE1(v175) = v210;
    }
    else
    {
      LOBYTE(v175) = v210;
    }
    std::ostream::write();
    if (v211 < 0)
    {
      LOBYTE(v175) = -52;
      BYTE1(v175) = v211;
    }
    else
    {
      LOBYTE(v175) = v211;
    }
    std::ostream::write();
    if (v212 < 0)
    {
      LOBYTE(v175) = -52;
      BYTE1(v175) = v212;
    }
    else
    {
      LOBYTE(v175) = v212;
    }
    std::ostream::write();
    if (v213 < 0)
    {
      LOBYTE(v175) = -52;
      BYTE1(v175) = v213;
    }
    else
    {
      LOBYTE(v175) = v213;
    }
    std::ostream::write();
    if (v214 < 0)
    {
      LOBYTE(v175) = -52;
      BYTE1(v175) = v214;
    }
    else
    {
      LOBYTE(v175) = v214;
    }
    std::ostream::write();
    if (v215 < 0)
    {
      LOBYTE(v175) = -52;
      BYTE1(v175) = v215;
    }
    else
    {
      LOBYTE(v175) = v215;
    }
    std::ostream::write();
    if (v216 < 0)
    {
      LOBYTE(v175) = -52;
      BYTE1(v175) = v216;
    }
    else
    {
      LOBYTE(v175) = v216;
    }
    std::ostream::write();
    if (v217 < 0)
    {
      LOBYTE(v175) = -52;
      BYTE1(v175) = v217;
    }
    else
    {
      LOBYTE(v175) = v217;
    }
    std::ostream::write();
    if (v218 < 0)
    {
      LOBYTE(v175) = -52;
      BYTE1(v175) = v218;
    }
    else
    {
      LOBYTE(v175) = v218;
    }
    std::ostream::write();
    if (v219 < 0)
    {
      LOBYTE(v175) = -52;
      BYTE1(v175) = v219;
    }
    else
    {
      LOBYTE(v175) = v219;
    }
    std::ostream::write();
    if (v220 < 0)
    {
      LOBYTE(v175) = -52;
      BYTE1(v175) = v220;
    }
    else
    {
      LOBYTE(v175) = v220;
    }
    std::ostream::write();
    if (v221 < 0)
    {
      LOBYTE(v175) = -52;
      BYTE1(v175) = v221;
    }
    else
    {
      LOBYTE(v175) = v221;
    }
    std::ostream::write();
  }
  if (*(_BYTE *)(v164 + 40))
  {
    *(_QWORD *)&v175 = v164 + 16;
    sub_22455B1CC((uint64_t **)&v175, (v223 - (_BYTE *)__p) >> 4);
  }
  else
  {
    sub_22455B4D4();
  }
  v49 = (char *)__p;
  v50 = v223;
  if (v223 != __p)
  {
    do
    {
      if (*(_BYTE *)(v164 + 40))
      {
        *(_QWORD *)&v175 = v164 + 16;
        sub_224559C04((uint64_t **)&v175, *v49);
        sub_224559C04((uint64_t **)&v175, v49[1]);
        sub_224559C04((uint64_t **)&v175, v49[2]);
        sub_224559C04((uint64_t **)&v175, v49[3]);
        sub_224559C04((uint64_t **)&v175, v49[4]);
        sub_224559C04((uint64_t **)&v175, v49[5]);
        sub_224559C04((uint64_t **)&v175, v49[6]);
        sub_224559C04((uint64_t **)&v175, v49[7]);
        sub_224559C04((uint64_t **)&v175, v49[8]);
        sub_224559C04((uint64_t **)&v175, v49[9]);
        sub_224559C04((uint64_t **)&v175, v49[10]);
        sub_224559C04((uint64_t **)&v175, v49[11]);
        sub_224559C04((uint64_t **)&v175, v49[12]);
        sub_224559C04((uint64_t **)&v175, v49[13]);
        sub_224559C04((uint64_t **)&v175, v49[14]);
        sub_224559C04((uint64_t **)&v175, v49[15]);
      }
      else
      {
        for (k = 0; k != 16; ++k)
        {
          v52 = v49[k];
          if (v52 < 0)
          {
            LOBYTE(v175) = -52;
            BYTE1(v175) = v52;
          }
          else
          {
            LOBYTE(v175) = v49[k];
          }
          std::ostream::write();
        }
      }
      v49 += 16;
    }
    while (v49 != v50);
    v49 = (char *)__p;
  }
  if (v49)
  {
    v223 = v49;
    operator delete(v49);
  }
  v53 = (char *)v204;
  if (v204)
  {
    v54 = v205;
    v55 = v204;
    if (v205 != v204)
    {
      do
      {
        if (*(v54 - 8))
        {
          v56 = *((_QWORD *)v54 - 4);
          if (v56)
          {
            v57 = *((_QWORD *)v54 - 3);
            v58 = (void *)*((_QWORD *)v54 - 4);
            if (v57 != v56)
            {
              v59 = *((_QWORD *)v54 - 3);
              do
              {
                v61 = *(void **)(v59 - 24);
                v59 -= 24;
                v60 = v61;
                if (v61)
                {
                  *(_QWORD *)(v57 - 16) = v60;
                  operator delete(v60);
                }
                v57 = v59;
              }
              while (v59 != v56);
              v58 = (void *)*((_QWORD *)v54 - 4);
            }
            *((_QWORD *)v54 - 3) = v56;
            operator delete(v58);
          }
        }
        v62 = (void *)*((_QWORD *)v54 - 7);
        if (v62)
        {
          *((_QWORD *)v54 - 6) = v62;
          operator delete(v62);
        }
        v63 = (void *)*((_QWORD *)v54 - 18);
        if (v63)
        {
          *((_QWORD *)v54 - 17) = v63;
          operator delete(v63);
        }
        v54 -= 192;
      }
      while (v54 != v53);
      v55 = v204;
    }
    v205 = v53;
    operator delete(v55);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  v64 = *v157;
  memset(&object, 0, sizeof(object));
  v65 = HIBYTE(v166);
  if (v166 >= 0)
    v66 = (std::string *)&v165;
  else
    v66 = (std::string *)v165;
  if (v166 < 0)
    v65 = v166;
  sub_2231816F0(&object, v66, (std::string *)((char *)v66 + v65));
  if ((v234 & 0x10) != 0)
  {
    v69 = v233;
    if (v233 < v230)
    {
      v233 = v230;
      v69 = v230;
    }
    v67 = v229;
  }
  else
  {
    if ((v234 & 8) == 0)
    {
      v67 = 0;
      v68 = 0;
      goto LABEL_252;
    }
    v67 = v227;
    v69 = v228;
  }
  v68 = v69 - v67;
LABEL_252:
  v70 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t, uint64_t))(*(_QWORD *)v64 + 24))(v64, &object, v68, v67);
  v71 = v70;
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(object.__r_.__value_.__l.__data_);
    if ((v71 & 1) != 0)
      goto LABEL_376;
  }
  else if ((v70 & 1) != 0)
  {
    goto LABEL_376;
  }
  v72 = atomic_load((unsigned __int8 *)&qword_2557892F0);
  if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
  {
    __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
    __cxa_guard_release(&qword_2557892F0);
  }
  sub_223195728((uint64_t)&stru_255789280, "cv3d.recon.kfplanes_pers", 0x18uLL, "KPPers: Failed to open %.13s", 0x1CuLL);
  sub_223713100(&v161);
  if (**(int **)(v161 + 56) <= 5)
  {
    v73 = *(unsigned __int8 *)(v161 + 72);
    v74 = sub_22322F254(v161, "OSLogSurrogateAppender", 1, 0);
    v75 = v74;
    if (v73 || v74)
    {
      *(_QWORD *)&v175 = &v161;
      *((std::chrono::steady_clock::time_point *)&v175 + 1) = std::chrono::steady_clock::now();
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v177 = 5;
      v178 = "unknown file";
      v179 = 71;
      v181 = 0;
      v182 = 0;
      v180 = "unknown function";
      if (v166 >= 0)
        v76 = (const char *)&v165;
      else
        v76 = (const char *)v165;
      v77 = *(_QWORD *)v175;
      v78 = (const char *)(*(_QWORD *)v175 + 16);
      v156 = v78;
      v158 = *(_QWORD *)v175;
      if (*(char *)(*(_QWORD *)v175 + 39) < 0)
      {
        v78 = *(const char **)(v77 + 16);
        v79 = *(_QWORD *)(v77 + 24);
        v160 = v71;
        v81 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v81 & 1) != 0)
          goto LABEL_267;
      }
      else
      {
        v79 = *(unsigned __int8 *)(*(_QWORD *)v175 + 39);
        v160 = v71;
        v80 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v80 & 1) != 0)
          goto LABEL_267;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&object);
        sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
        if ((_BYTE)v184 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
          operator delete(object.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_267:
      if (byte_255788F57 >= 0)
        v82 = (const char *)&xmmword_255788F40;
      else
        v82 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v83 = byte_255788F57;
      else
        v83 = *((_QWORD *)&xmmword_255788F40 + 1);
      v84 = v78;
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v82, v78);
      p_size = &object.__r_.__value_.__l.__size_;
      if (v83 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v83 >= 0x17)
      {
        v86 = v75;
        v87 = v76;
        v88 = v73;
        v89 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v83 | 7) != 0x17)
          v89 = v83 | 7;
        v90 = v89 + 1;
        p_size = (std::string::size_type *)operator new(v89 + 1);
        object.__r_.__value_.__r.__words[2] = v83;
        *(_QWORD *)&v184 = v90 | 0x8000000000000000;
        object.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
        v73 = v88;
        v76 = v87;
        v75 = v86;
      }
      else
      {
        BYTE7(v184) = v83;
        if (!v83)
        {
LABEL_281:
          *((_BYTE *)p_size + v83) = 0;
          BYTE8(v184) = 1;
          v91 = &v185;
          if (v79 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v92 = v84;
          if (v79 >= 0x17)
          {
            v93 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v79 | 7) != 0x17)
              v93 = v79 | 7;
            v94 = v93 + 1;
            v71 = v160;
            v91 = operator new(v93 + 1);
            v186 = v79;
            v187 = v94 | 0x8000000000000000;
            v185 = v91;
          }
          else
          {
            HIBYTE(v187) = v79;
            v71 = v160;
            if (!v79)
            {
LABEL_289:
              *((_BYTE *)v91 + v79) = 0;
              LOBYTE(v188) = 1;
              v95 = object.__r_.__value_.__r.__words[0];
              if (SHIBYTE(v187) < 0)
                operator delete(v185);
              if (BYTE8(v184) && SBYTE7(v184) < 0)
                operator delete((void *)object.__r_.__value_.__l.__size_);
              if (object.__r_.__value_.__r.__words[0])
                os_release(object.__r_.__value_.__l.__data_);
              if (!v75 || !*(_QWORD *)(v75 + 24))
              {
                os_log_type_enabled(v95, OS_LOG_TYPE_ERROR);
                object.__r_.__value_.__r.__words[0] = 0xD04100202;
                LOWORD(object.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&object.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v76;
                v102 = (void *)_os_log_send_and_compose_impl();
                if (v102)
                  free(v102);
                goto LABEL_367;
              }
              v96 = _os_log_pack_size();
              v97 = operator new(v96, (std::align_val_t)8uLL);
              v98 = (_QWORD *)operator new();
              *v98 = &off_24EC1F7F0;
              v98[1] = 0;
              v98[2] = 0;
              v98[3] = v97;
              v170.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
              v170.__r_.__value_.__l.__size_ = (std::string::size_type)v97;
              v171 = 0;
              v172 = 0;
              v170.__r_.__value_.__r.__words[2] = (std::string::size_type)v98;
              v99 = strlen(v76);
              if (v99 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v100 = v99;
              if (v99 >= 0x17)
              {
                v103 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v99 | 7) != 0x17)
                  v103 = v99 | 7;
                v104 = v103 + 1;
                p_dst = operator new(v103 + 1);
                *(_QWORD *)&v174 = v100;
                *((_QWORD *)&v174 + 1) = v104 | 0x8000000000000000;
                __dst = p_dst;
              }
              else
              {
                HIBYTE(v174) = v99;
                p_dst = &__dst;
                if (!v99)
                {
LABEL_308:
                  *((_BYTE *)p_dst + v100) = 0;
                  v105 = __dst;
                  v236[0] = v174;
                  *(_QWORD *)((char *)v236 + 7) = *(_QWORD *)((char *)&v174 + 7);
                  v106 = HIBYTE(v174);
                  v107 = operator new(0x38uLL);
                  v107[1] = 0;
                  v107[2] = 0;
                  v107[3] = off_24EC1FA48;
                  *v107 = &off_24EC1F9F8;
                  v108 = v236[0];
                  v107[4] = v105;
                  v107[5] = v108;
                  *(_QWORD *)((char *)v107 + 47) = *(_QWORD *)((char *)v236 + 7);
                  *((_BYTE *)v107 + 55) = v106;
                  v236[0] = 0;
                  *(_QWORD *)((char *)v236 + 7) = 0;
                  v109 = v172;
                  v171 = (char *)(v107 + 3);
                  v172 = (std::__shared_weak_count *)v107;
                  if (v109)
                  {
                    p_shared_owners = (unint64_t *)&v109->__shared_owners_;
                    do
                      v111 = __ldaxr(p_shared_owners);
                    while (__stlxr(v111 - 1, p_shared_owners));
                    if (!v111)
                    {
                      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                      std::__shared_weak_count::__release_weak(v109);
                    }
                  }
                  object = v170;
                  v112 = v171;
                  if (v170.__r_.__value_.__r.__words[2])
                  {
                    v113 = (unint64_t *)(v170.__r_.__value_.__r.__words[2] + 8);
                    do
                      v114 = __ldxr(v113);
                    while (__stxr(v114 + 1, v113));
                  }
                  v115 = v172;
                  *(_QWORD *)&v184 = v112;
                  *((_QWORD *)&v184 + 1) = v172;
                  if (v172)
                  {
                    v116 = (unint64_t *)&v172->__shared_owners_;
                    do
                      v117 = __ldxr(v116);
                    while (__stxr(v117 + 1, v116));
                    v185 = v112;
                    do
                      v118 = __ldaxr(v116);
                    while (__stlxr(v118 - 1, v116));
                    if (!v118)
                    {
                      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                      std::__shared_weak_count::__release_weak(v115);
                    }
                  }
                  else
                  {
                    v185 = v112;
                  }
                  v119 = (std::__shared_weak_count *)v170.__r_.__value_.__r.__words[2];
                  if (v170.__r_.__value_.__r.__words[2])
                  {
                    v120 = (unint64_t *)(v170.__r_.__value_.__r.__words[2] + 8);
                    do
                      v121 = __ldaxr(v120);
                    while (__stlxr(v121 - 1, v120));
                    if (!v121)
                    {
                      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                      std::__shared_weak_count::__release_weak(v119);
                    }
                  }
                  v122 = object.__r_.__value_.__r.__words[0];
                  if (*((char *)v185 + 31) >= 0)
                    v123 = (char *)v185 + 8;
                  else
                    v123 = (char *)*((_QWORD *)v185 + 1);
                  v124 = _os_log_pack_fill();
                  *(_DWORD *)v124 = 68157954;
                  *(_DWORD *)(v124 + 4) = 13;
                  *(_WORD *)(v124 + 8) = 2080;
                  *(_QWORD *)(v124 + 10) = v123;
                  v125 = operator new();
                  v126 = *(unsigned __int8 *)(v158 + 39);
                  v127 = v156;
                  if ((v126 & 0x80u) != 0)
                  {
                    v127 = *(const char **)(v158 + 16);
                    v126 = *(_QWORD *)(v158 + 24);
                  }
                  *(_QWORD *)v125 = v122;
                  *(_OWORD *)(v125 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
                  *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
                  *(_OWORD *)(v125 + 24) = v184;
                  v184 = 0uLL;
                  *(_QWORD *)(v125 + 40) = v127;
                  *(_QWORD *)(v125 + 48) = v126;
                  *(_BYTE *)(v125 + 56) = 16;
                  __dst = 0;
                  v170.__r_.__value_.__r.__words[0] = v125;
                  (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v75 + 24) + 40))(*(_QWORD *)(v75 + 24), &v170);
                  v128 = v170.__r_.__value_.__r.__words[0];
                  v170.__r_.__value_.__r.__words[0] = 0;
                  if (v128)
                  {
                    v129 = *(std::__shared_weak_count **)(v128 + 32);
                    if (v129)
                    {
                      v130 = (unint64_t *)&v129->__shared_owners_;
                      do
                        v131 = __ldaxr(v130);
                      while (__stlxr(v131 - 1, v130));
                      if (!v131)
                      {
                        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                        std::__shared_weak_count::__release_weak(v129);
                      }
                    }
                    v132 = *(std::__shared_weak_count **)(v128 + 16);
                    if (v132)
                    {
                      v133 = (unint64_t *)&v132->__shared_owners_;
                      do
                        v134 = __ldaxr(v133);
                      while (__stlxr(v134 - 1, v133));
                      if (!v134)
                      {
                        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                        std::__shared_weak_count::__release_weak(v132);
                      }
                    }
                    MEMORY[0x227684CE8](v128, 0x10F0C40B62ED6C6);
                    v135 = __dst;
                    __dst = 0;
                    if (v135)
                    {
                      v136 = (std::__shared_weak_count *)v135[4];
                      if (v136)
                      {
                        v137 = (unint64_t *)&v136->__shared_owners_;
                        do
                          v138 = __ldaxr(v137);
                        while (__stlxr(v138 - 1, v137));
                        if (!v138)
                        {
                          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                          std::__shared_weak_count::__release_weak(v136);
                        }
                      }
                      v139 = (std::__shared_weak_count *)v135[2];
                      if (v139)
                      {
                        v140 = (unint64_t *)&v139->__shared_owners_;
                        do
                          v141 = __ldaxr(v140);
                        while (__stlxr(v141 - 1, v140));
                        if (!v141)
                        {
                          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                          std::__shared_weak_count::__release_weak(v139);
                        }
                      }
                      MEMORY[0x227684CE8](v135, 0x10F0C40B62ED6C6);
                    }
                  }
                  v142 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
                  if (*((_QWORD *)&v184 + 1))
                  {
                    v143 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
                    do
                      v144 = __ldaxr(v143);
                    while (__stlxr(v144 - 1, v143));
                    if (!v144)
                    {
                      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                      std::__shared_weak_count::__release_weak(v142);
                    }
                  }
                  v145 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
                  if (object.__r_.__value_.__r.__words[2])
                  {
                    v146 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
                    do
                      v147 = __ldaxr(v146);
                    while (__stlxr(v147 - 1, v146));
                    if (!v147)
                    {
                      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                      std::__shared_weak_count::__release_weak(v145);
                    }
                  }
LABEL_367:
                  if (v73)
                  {
                    v148 = (const char *)&v165;
                    if (v166 < 0)
                      v148 = (const char *)v165;
                    sub_22322C138((uint64_t)&v175, "KPPers: Failed to open %.13s", v148);
                    sub_223182C08((uint64_t)&v175);
                  }
                  sub_223182C08((uint64_t)&v175);
                  v149 = v182;
                  if (v182)
                  {
                    v150 = (unint64_t *)&v182->__shared_owners_;
                    do
                      v151 = __ldaxr(v150);
                    while (__stlxr(v151 - 1, v150));
                    if (!v151)
                    {
                      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                      std::__shared_weak_count::__release_weak(v149);
                    }
                  }
                  goto LABEL_376;
                }
              }
              memcpy(p_dst, v76, v100);
              goto LABEL_308;
            }
          }
          memmove(v91, v92, v79);
          goto LABEL_289;
        }
      }
      memmove(p_size, v82, v83);
      goto LABEL_281;
    }
  }
LABEL_376:
  v162[0] = &off_24EC79738;
  v152 = v164;
  v163 = &unk_24EC79888;
  v164 = 0;
  if (v152)
  {
    v153 = *(void **)(v152 + 80);
    if (v153)
    {
      *(_QWORD *)(v152 + 88) = v153;
      operator delete(v153);
    }
    if (*(_BYTE *)(v152 + 72))
      free(*(void **)(v152 + 56));
    if (*(_BYTE *)(v152 + 40))
      free(*(void **)(v152 + 24));
    MEMORY[0x227684CE8](v152, 0x1030C408C1A3048);
  }
  *(_QWORD *)&v224 = *MEMORY[0x24BEDB7F0];
  v154 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&v224 + *(_QWORD *)(v224 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v225 = v154;
  *((_QWORD *)&v225 + 1) = MEMORY[0x24BEDB848] + 16;
  if (v232 < 0)
    operator delete(v231);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](&v235);
  if (SHIBYTE(v166) < 0)
    operator delete(v165);
  kdebug_trace();
  return v71;
}

void sub_223712EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,void *a51,int a52,__int16 a53,char a54,char a55,char a56)
{
  if (a56 && a55 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a41);
  sub_224554FC4(&a16);
  sub_223195348((uint64_t)&STACK[0x220]);
  if (a25 < 0)
    operator delete(a20);
  sub_2231874DC((uint64_t)&a26);
  _Unwind_Resume(a1);
}

_QWORD *sub_223713094(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[26];
  if (v2)
  {
    a1[27] = v2;
    operator delete(v2);
  }
  v3 = a1[21];
  if (v3)
  {
    sub_2237149D0((uint64_t)(a1 + 21), v3);
    operator delete((void *)a1[21]);
  }
  v4 = (void *)a1[18];
  if (v4)
  {
    a1[19] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[15];
  if (v5)
  {
    a1[16] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_223713100(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC100);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC100))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC0F8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC100);
  }
  *a1 = qword_2540CC0F8;
}

void sub_22371319C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC100);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC100);
  _Unwind_Resume(a1);
}

uint64_t sub_2237131F4@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *i;
  uint64_t v29;
  void (*v30)(uint64_t);
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  std::bad_cast *v56;
  std::bad_cast *v57;
  std::runtime_error *exception;
  _QWORD v59[2];
  void (**v60)();
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  char v67;
  void *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  int v72;
  uint64_t v73[11];
  unint64_t v74;
  unsigned int v75;
  unint64_t v76;
  _QWORD *v77;
  __int128 __p;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _OWORD v86[4];
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  char v94[8];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  float v100[8];
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  v71 = 0u;
  v70 = 0u;
  v72 = 728309744;
  kdebug_trace();
  sub_2245664AC(a2, &__p);
  v6 = operator new(0x28uLL);
  v68 = v6;
  v69 = xmmword_2245C4640;
  v7 = v79;
  *v6 = __p;
  v6[1] = v7;
  *((_DWORD *)v6 + 8) = v80;
  *((_BYTE *)v6 + 36) = 0;
  v8 = *a1;
  __p = 0uLL;
  *(_QWORD *)&v79 = 0;
  sub_2231816F0((std::string *)&__p, (std::string *)v6, (std::string *)((char *)v6 + 36));
  (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v8 + 16))(&v64, v8, &__p);
  if ((SBYTE7(v79) & 0x80000000) == 0)
  {
    if (v67)
      goto LABEL_3;
LABEL_8:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    if (SHIBYTE(v69) < 0)
      goto LABEL_70;
    return kdebug_trace();
  }
  operator delete((void *)__p);
  if (!v67)
    goto LABEL_8;
LABEL_3:
  memset(v100, 0, 28);
  v99 = 0u;
  v98 = 0u;
  v97 = 0u;
  v96 = 0u;
  v95 = 0u;
  v101 = 0u;
  v102 = 0u;
  v103 = 0u;
  v104 = 0u;
  v105 = 0u;
  v106 = 0u;
  v107 = 0u;
  v9 = v64;
  v10 = v66;
  *((_QWORD *)&v86[0] + 1) = MEMORY[0x24BEDB898] + 16;
  std::streambuf::basic_streambuf();
  BYTE8(v83) = 0;
  v84 = 0u;
  v85 = 0u;
  LOBYTE(v86[0]) = 1;
  LODWORD(v82) = 1;
  *((_QWORD *)&__p + 1) = 0;
  *(_QWORD *)&v79 = &off_24EC36790;
  *((_QWORD *)&v86[0] + 1) = &unk_24EC36758;
  *(_QWORD *)&__p = &unk_24EC36730;
  std::ios_base::init((std::ios_base *)((char *)v86 + 8), &v79);
  v92 = 0;
  v93 = -1;
  *(_QWORD *)&__p = &off_24EC36618;
  *((_QWORD *)&v86[0] + 1) = &unk_24EC36640;
  v73[0] = v9;
  v73[1] = v9 + v10;
  sub_22341227C((uint64_t)&__p, v73);
  v73[0] = 1;
  sub_224555660(v59, v73, (uint64_t)&__p, 0x2800uLL);
  v59[0] = &off_24EC20B48;
  v60 = (void (**)())&unk_24EC20C90;
  v75 = 1;
  sub_224554038(v63, &v75);
  v11 = v75;
  if (v75 >= 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_223714A94(exception, v11);
    goto LABEL_79;
  }
  v75 = 3;
  sub_224554038(v63, &v75);
  v12 = v75;
  if (v75 >= 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_223715560(exception, v12);
    goto LABEL_79;
  }
  v13 = v63;
  sub_224553CF0(v63, &v95);
  sub_224553CF0(v13, (_BYTE *)&v95 + 1);
  sub_224553CF0(v13, (_BYTE *)&v95 + 2);
  sub_224553CF0(v13, (_BYTE *)&v95 + 3);
  sub_224553CF0(v13, (_BYTE *)&v95 + 4);
  sub_224553CF0(v13, (_BYTE *)&v95 + 5);
  sub_224553CF0(v13, (_BYTE *)&v95 + 6);
  sub_224553CF0(v13, (_BYTE *)&v95 + 7);
  sub_224553CF0(v13, (_BYTE *)&v95 + 8);
  sub_224553CF0(v13, (_BYTE *)&v95 + 9);
  sub_224553CF0(v13, (_BYTE *)&v95 + 10);
  sub_224553CF0(v13, (_BYTE *)&v95 + 11);
  sub_224553CF0(v13, (_BYTE *)&v95 + 12);
  sub_224553CF0(v13, (_BYTE *)&v95 + 13);
  sub_224553CF0(v13, (_BYTE *)&v95 + 14);
  sub_224553CF0(v13, (_BYTE *)&v95 + 15);
  v14 = v63;
  sub_2245544CC(v63, (float *)&v96);
  sub_2245544CC(v14, (float *)&v96 + 1);
  v15 = v63;
  sub_2245544CC(v63, (float *)&v96 + 2);
  sub_2245544CC(v15, (float *)&v96 + 3);
  v16 = v63;
  sub_224554038(v63, &v97);
  sub_224554038(v16, (_DWORD *)&v97 + 1);
  v17 = v63;
  sub_2245544CC(v63, (float *)&v97 + 2);
  sub_2245544CC(v17, (float *)&v97 + 3);
  sub_2245544CC(v17, (float *)&v98);
  sub_2245544CC(v17, (float *)&v98 + 1);
  sub_2245544CC(v17, (float *)&v98 + 2);
  sub_2245544CC(v17, (float *)&v98 + 3);
  sub_2245544CC(v17, (float *)&v99);
  sub_2245544CC(v17, (float *)&v99 + 1);
  sub_2245544CC(v17, (float *)&v99 + 2);
  sub_2245544CC(v17, (float *)&v99 + 3);
  sub_2245544CC(v17, v100);
  sub_2245544CC(v17, &v100[1]);
  sub_2245544CC(v17, &v100[2]);
  sub_2245544CC(v17, &v100[3]);
  sub_2245544CC(v17, &v100[4]);
  sub_2245544CC(v17, &v100[5]);
  if (v12 != 3)
  {
    v75 = 1;
    sub_224554038(v63, &v75);
    v18 = v75;
    if (v75 >= 2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_223715790(exception, v18);
    }
    else
    {
      sub_224554038(v63, &v100[6]);
      if (!LODWORD(v100[6]))
        goto LABEL_14;
      v75 = 1;
      sub_224554038(v63, &v75);
      v19 = v75;
      if (v75 < 2)
      {
        sub_2231B623C((uint64_t)v59, (uint64_t)&v101);
        sub_2231B623C((uint64_t)v59, (uint64_t)&v102 + 8);
LABEL_14:
        sub_22371650C((uint64_t)v59, (void **)&v104);
        if (v12 < 2)
          goto LABEL_16;
        goto LABEL_15;
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_2237159C0(exception, v19);
    }
LABEL_79:
    __cxa_throw(exception, (struct type_info *)&unk_24EC65A68, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  sub_22371650C((uint64_t)v59, (void **)&v104);
LABEL_15:
  v20 = v63;
  sub_224553CF0(v63, (_BYTE *)&v105 + 8);
  sub_224553CF0(v20, (_BYTE *)&v105 + 9);
  sub_224553CF0(v20, (_BYTE *)&v105 + 10);
  sub_224553CF0(v20, (_BYTE *)&v105 + 11);
  sub_224553CF0(v20, (_BYTE *)&v105 + 12);
  sub_224553CF0(v20, (_BYTE *)&v105 + 13);
  sub_224553CF0(v20, (_BYTE *)&v105 + 14);
  sub_224553CF0(v20, (_BYTE *)&v105 + 15);
  sub_224553CF0(v20, &v106);
  sub_224553CF0(v20, (_BYTE *)&v106 + 1);
  sub_224553CF0(v20, (_BYTE *)&v106 + 2);
  sub_224553CF0(v20, (_BYTE *)&v106 + 3);
  sub_224553CF0(v20, (_BYTE *)&v106 + 4);
  sub_224553CF0(v20, (_BYTE *)&v106 + 5);
  sub_224553CF0(v20, (_BYTE *)&v106 + 6);
  sub_224553CF0(v20, (_BYTE *)&v106 + 7);
LABEL_16:
  v74 = (uint64_t)(v107 - *((_QWORD *)&v106 + 1)) >> 4;
  sub_2245543E8(v63, &v74);
  v21 = v107;
  v22 = *((_QWORD *)&v106 + 1);
  v23 = (uint64_t)(v107 - *((_QWORD *)&v106 + 1)) >> 4;
  if (v74 <= v23)
  {
    if (v74 < v23)
    {
      v21 = *((_QWORD *)&v106 + 1) + 16 * v74;
      *(_QWORD *)&v107 = v21;
    }
  }
  else
  {
    sub_2232C68D0((char **)&v106 + 1, v74 - v23);
    v22 = *((_QWORD *)&v106 + 1);
    v21 = v107;
  }
  if (v21 != v22)
  {
    v24 = v21;
    do
    {
      v25 = 0;
      v26 = v63;
      do
      {
        sub_2245564B0(v26, (uint64_t)&v75);
        if (v75 != 2 || v76 >= 0x100)
        {
          v56 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v56->__vftable = 0;
          v57 = std::bad_cast::bad_cast(v56);
          v57->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
          __cxa_throw(v57, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
        }
        *(_BYTE *)(v22 + v25) = v76;
        v27 = v77;
        v77 = 0;
        if (v27)
        {
          for (i = (char *)v27[4]; i != (char *)v27[6]; i -= 16)
          {
            v30 = (void (*)(uint64_t))*((_QWORD *)i - 2);
            v29 = *((_QWORD *)i - 1);
            v30(v29);
          }
          free(i);
          v31 = (_QWORD *)v27[3];
          if (v31)
          {
            do
            {
              v32 = (_QWORD *)*v31;
              free(v31);
              v31 = v32;
            }
            while (v32);
          }
          free(v27);
        }
        ++v25;
      }
      while (v25 != 16);
      v22 += 16;
    }
    while (v22 != v24);
  }
  v59[0] = &off_24EC798B8;
  v60 = (void (**)())&unk_24EC79A00;
  v33 = v63;
  v63 = 0;
  if (v33)
  {
    sub_22455612C((_QWORD *)(v33 + 8));
    MEMORY[0x227684CE8](v33, 0x10F2C40853B94B7);
  }
  v60 = off_24EC79B20;
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
  std::istream::~istream();
  sub_22341293C((uint64_t)&v79);
  MEMORY[0x227684BE0]((char *)v86 + 8);
  sub_223724120((uint64_t)v94, (uint64_t)&__p);
  v34 = operator new();
  *(_DWORD *)(v34 + 128) = v85;
  v35 = v88;
  *(_QWORD *)(v34 + 136) = *((_QWORD *)&v85 + 1);
  *(_QWORD *)(v34 + 48) = &off_24EC207B8;
  *(_QWORD *)(v34 + 56) = &off_24EC20868;
  v36 = v79;
  *(_OWORD *)v34 = __p;
  *(_OWORD *)(v34 + 16) = v36;
  *(_OWORD *)(v34 + 32) = v80;
  v37 = v82;
  *(_OWORD *)(v34 + 64) = v81;
  *(_OWORD *)(v34 + 80) = v37;
  v38 = v84;
  *(_OWORD *)(v34 + 96) = v83;
  *(_OWORD *)(v34 + 112) = v38;
  v39 = v86[3];
  *(_OWORD *)(v34 + 176) = v86[2];
  *(_OWORD *)(v34 + 192) = v39;
  v40 = v86[1];
  *(_OWORD *)(v34 + 144) = v86[0];
  *(_OWORD *)(v34 + 160) = v40;
  *(_OWORD *)(v34 + 208) = v87;
  *(_QWORD *)(v34 + 224) = v35;
  v87 = 0uLL;
  v88 = 0;
  *(_OWORD *)(v34 + 232) = v89;
  *(_QWORD *)a3 = v34;
  *(_OWORD *)(a3 + 8) = v90;
  *(_QWORD *)(a3 + 24) = v91;
  if (*((_QWORD *)&v106 + 1))
  {
    *(_QWORD *)&v107 = *((_QWORD *)&v106 + 1);
    operator delete(*((void **)&v106 + 1));
  }
  v41 = v104;
  if ((_QWORD)v104)
  {
    v42 = *((_QWORD *)&v104 + 1);
    v43 = (void *)v104;
    if (*((_QWORD *)&v104 + 1) != (_QWORD)v104)
    {
      do
      {
        if (*(_BYTE *)(v42 - 8))
        {
          v44 = *(_QWORD *)(v42 - 32);
          if (v44)
          {
            v45 = *(_QWORD *)(v42 - 24);
            v46 = *(void **)(v42 - 32);
            if (v45 != v44)
            {
              v47 = *(_QWORD *)(v42 - 24);
              do
              {
                v49 = *(void **)(v47 - 24);
                v47 -= 24;
                v48 = v49;
                if (v49)
                {
                  *(_QWORD *)(v45 - 16) = v48;
                  operator delete(v48);
                }
                v45 = v47;
              }
              while (v47 != v44);
              v46 = *(void **)(v42 - 32);
            }
            *(_QWORD *)(v42 - 24) = v44;
            operator delete(v46);
          }
        }
        v50 = *(void **)(v42 - 56);
        if (v50)
        {
          *(_QWORD *)(v42 - 48) = v50;
          operator delete(v50);
        }
        v51 = *(void **)(v42 - 144);
        if (v51)
        {
          *(_QWORD *)(v42 - 136) = v51;
          operator delete(v51);
        }
        v42 -= 192;
      }
      while (v42 != v41);
      v43 = (void *)v104;
    }
    *((_QWORD *)&v104 + 1) = v41;
    operator delete(v43);
  }
  if (*((_QWORD *)&v102 + 1))
  {
    *(_QWORD *)&v103 = *((_QWORD *)&v102 + 1);
    operator delete(*((void **)&v102 + 1));
  }
  if ((_QWORD)v101)
  {
    *((_QWORD *)&v101 + 1) = v101;
    operator delete((void *)v101);
  }
  if (v67)
  {
    v52 = v65;
    if (v65)
    {
      p_shared_owners = (unint64_t *)&v65->__shared_owners_;
      do
        v54 = __ldaxr(p_shared_owners);
      while (__stlxr(v54 - 1, p_shared_owners));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
        if ((SHIBYTE(v69) & 0x80000000) == 0)
          return kdebug_trace();
        goto LABEL_70;
      }
    }
  }
  if (SHIBYTE(v69) < 0)
LABEL_70:
    operator delete(v68);
  return kdebug_trace();
}

#error "2237142DC: call analysis failed (funcsize=397)"

_QWORD *sub_223714688(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = (void *)a1[31];
  if (v2)
  {
    a1[32] = v2;
    operator delete(v2);
  }
  v3 = a1[26];
  if (v3)
  {
    v4 = a1[27];
    v5 = (void *)a1[26];
    if (v4 != v3)
    {
      do
      {
        v4 -= 424;
        sub_2236EA79C(v4);
      }
      while (v4 != v3);
      v5 = (void *)a1[26];
    }
    a1[27] = v3;
    operator delete(v5);
  }
  a1[6] = &off_24EC20828;
  return a1;
}

uint64_t sub_223714704(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 24))
  {
    v2 = *(std::__shared_weak_count **)(result + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

uint64_t sub_223714774(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  uint64_t v7;
  void *__p;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  _OWORD v14[2];
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v11 = 0u;
  v12 = 0u;
  v13 = 728309768;
  kdebug_trace();
  v4 = *a1;
  sub_2245664AC(a2, v14);
  v5 = operator new(0x28uLL);
  v6 = v14[1];
  *v5 = v14[0];
  v5[1] = v6;
  *((_DWORD *)v5 + 8) = v15;
  *((_BYTE *)v5 + 36) = 0;
  __p = v5;
  v10 = xmmword_2245C4640;
  v7 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v4 + 40))(v4, &__p);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  kdebug_trace();
  return v7;
}

void sub_223714880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2237148C0(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)*a1;
  *a1 = 0;
  if (v3)
  {
    v4 = v3[26];
    if (v4)
    {
      v5 = v3[27];
      v6 = (void *)v3[26];
      if (v5 != v4)
      {
        do
        {
          v5 -= 424;
          sub_2236EA79C(v5);
        }
        while (v5 != v4);
        v6 = (void *)v3[26];
      }
      v3[27] = v4;
      operator delete(v6);
    }
    v3[6] = &off_24EC20828;
    MEMORY[0x227684CE8](v3, 0x10A0C4047C2BC0BLL);
  }
  return a1;
}

void **sub_223714960(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0)
          operator delete(*(v3 - 4));
        v3 -= 4;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_2237149D0(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 192)
  {
    if (*(_BYTE *)(i - 8))
    {
      v5 = *(_QWORD *)(i - 32);
      if (v5)
      {
        v6 = *(_QWORD *)(i - 24);
        v7 = *(void **)(i - 32);
        if (v6 != v5)
        {
          v8 = *(_QWORD *)(i - 24);
          do
          {
            v10 = *(void **)(v8 - 24);
            v8 -= 24;
            v9 = v10;
            if (v10)
            {
              *(_QWORD *)(v6 - 16) = v9;
              operator delete(v9);
            }
            v6 = v8;
          }
          while (v8 != v5);
          v7 = *(void **)(i - 32);
        }
        *(_QWORD *)(i - 24) = v5;
        operator delete(v7);
      }
    }
    v11 = *(void **)(i - 56);
    if (v11)
    {
      *(_QWORD *)(i - 48) = v11;
      operator delete(v11);
    }
    v12 = *(void **)(i - 144);
    if (v12)
    {
      *(_QWORD *)(i - 136) = v12;
      operator delete(v12);
    }
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_223714A94(std::runtime_error *a1, unsigned int a2)
{
  unsigned __int8 v3;
  unsigned int v4;
  std::string v5;
  unsigned int v6;

  v6 = a2;
  v3 = atomic_load((unsigned __int8 *)&qword_2540CC108);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC108))
  {
    sub_223715460();
    if (byte_2540CC217 < 0)
    {
      sub_223197FA4(&xmmword_2540CC1D0, (void *)xmmword_2540CC200, *((unint64_t *)&xmmword_2540CC200 + 1));
    }
    else
    {
      xmmword_2540CC1D0 = xmmword_2540CC200;
      qword_2540CC1E0 = unk_2540CC210;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CC1D0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CC108);
  }
  v4 = 1;
  sub_223714BC4((uint64_t)&v5, &v6, (std::string *)&xmmword_2540CC1D0, &v4);
  std::runtime_error::runtime_error(a1, &v5);
  a1->__vftable = (std::runtime_error_vtbl *)&off_24EC65A50;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_223714B90(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CC108);
  _Unwind_Resume(a1);
}

void sub_223714BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223714BC4(uint64_t a1, unsigned int *a2, std::string *a3, unsigned int *a4)
{
  uint64_t result;
  _DWORD v8[6];
  int v9;
  std::string v10;
  std::string **v11;
  std::string *v12;
  std::string *v13;
  _DWORD *v14;
  std::string *v15;
  std::string *v16;

  v9 = 0;
  sub_223714EB8(v8, "Cannot deserialize sample with version ");
  std::to_string(&v10, *a2);
  v12 = (std::string *)v8;
  v13 = &v10;
  v14 = v8;
  v15 = &v10;
  v16 = &v10;
  if (v9 == -1)
    sub_22316DD70();
  v11 = &v12;
  ((void (*)(std::string ***, _DWORD *))off_24EC58008[v9])(&v11, v8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  v12 = (std::string *)v8;
  v13 = (std::string *)" of type \"";
  v14 = v8;
  v15 = (std::string *)" of type \"";
  v16 = (std::string *)" of type \"";
  if (v9 == -1)
    sub_22316DD70();
  v10.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, _DWORD *))off_24EC58020[v9])(&v10, v8);
  v12 = (std::string *)v8;
  v13 = a3;
  v14 = v8;
  v15 = a3;
  v16 = a3;
  if (v9 == -1)
    sub_22316DD70();
  v10.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, _DWORD *))off_24EC58038[v9])(&v10, v8);
  v12 = (std::string *)v8;
  v13 = (std::string *)"\". Maximum supported version is ";
  v14 = v8;
  v15 = (std::string *)"\". Maximum supported version is ";
  v16 = (std::string *)"\". Maximum supported version is ";
  if (v9 == -1)
    sub_22316DD70();
  v10.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, _DWORD *))off_24EC58050[v9])(&v10, v8);
  std::to_string(&v10, *a4);
  v12 = (std::string *)v8;
  v13 = &v10;
  v14 = v8;
  v15 = &v10;
  v16 = &v10;
  if (v9 == -1)
    sub_22316DD70();
  v11 = &v12;
  ((void (*)(std::string ***, _DWORD *))off_24EC58008[v9])(&v11, v8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  v12 = (std::string *)v8;
  v13 = (std::string *)".";
  v14 = v8;
  v15 = (std::string *)".";
  v16 = (std::string *)".";
  if (v9 == -1)
    sub_22316DD70();
  v10.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, _DWORD *))off_24EC58068[v9])(&v10, v8);
  if (v9 == -1)
    sub_22316DD70();
  v12 = &v10;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24EC58080[v9])(&v12, v8);
  if (v9 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24EC57FF0[v9])(&v12, v8);
  return result;
}

void sub_223714E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_22319B964((uint64_t)&a10);
  _Unwind_Resume(a1);
}

_DWORD *sub_223714EB8(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC57FF0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_223714FA8(_DWORD ***a1)
{
  return sub_2232C8A68(**a1, (char *)(*a1)[1]);
}

void sub_223714FB4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC57FF0[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_22319BD1C((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_22371516C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2237151B0(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_223715440(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_223715458(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_223715460()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CC110);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC110))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::kfplanes::PersistedKeyframePlaneSegmentationSample]", qword_2540CC1E8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CC1E8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CC110);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CC118);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CC118))
    {
      sub_224573040((uint64_t)qword_2540CC1E8, (uint64_t)&xmmword_2540CC200);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CC200, &dword_22314D000);
      __cxa_guard_release(&qword_2540CC118);
    }
  }
}

void sub_223715530(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CC118);
  _Unwind_Resume(a1);
}

void sub_223715548(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CC110);
  _Unwind_Resume(a1);
}

void sub_223715560(std::runtime_error *a1, unsigned int a2)
{
  unsigned __int8 v3;
  unsigned int v4;
  std::string v5;
  unsigned int v6;

  v6 = a2;
  v3 = atomic_load((unsigned __int8 *)&qword_2540CC120);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC120))
  {
    sub_223715690();
    if (byte_2540CC25F < 0)
    {
      sub_223197FA4(&xmmword_2540CC218, (void *)xmmword_2540CC248, *((unint64_t *)&xmmword_2540CC248 + 1));
    }
    else
    {
      xmmword_2540CC218 = xmmword_2540CC248;
      qword_2540CC228 = unk_2540CC258;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CC218, &dword_22314D000);
    __cxa_guard_release(&qword_2540CC120);
  }
  v4 = 3;
  sub_223714BC4((uint64_t)&v5, &v6, (std::string *)&xmmword_2540CC218, &v4);
  std::runtime_error::runtime_error(a1, &v5);
  a1->__vftable = (std::runtime_error_vtbl *)&off_24EC65A50;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_22371565C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CC120);
  _Unwind_Resume(a1);
}

void sub_223715674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223715690()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CC128);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC128))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::kfplanes::KeyframePlaneSegmentationSample]", qword_2540CC230);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CC230, &dword_22314D000);
    __cxa_guard_release(&qword_2540CC128);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CC130);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CC130))
    {
      sub_224573040((uint64_t)qword_2540CC230, (uint64_t)&xmmword_2540CC248);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CC248, &dword_22314D000);
      __cxa_guard_release(&qword_2540CC130);
    }
  }
}

void sub_223715760(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CC130);
  _Unwind_Resume(a1);
}

void sub_223715778(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CC128);
  _Unwind_Resume(a1);
}

void sub_223715790(std::runtime_error *a1, unsigned int a2)
{
  unsigned __int8 v3;
  unsigned int v4;
  std::string v5;
  unsigned int v6;

  v6 = a2;
  v3 = atomic_load((unsigned __int8 *)&qword_2540CC138);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC138))
  {
    sub_2237158C0();
    if (byte_2540CC2A7 < 0)
    {
      sub_223197FA4(&xmmword_2540CC260, (void *)xmmword_2540CC290, *((unint64_t *)&xmmword_2540CC290 + 1));
    }
    else
    {
      xmmword_2540CC260 = xmmword_2540CC290;
      qword_2540CC270 = unk_2540CC2A0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CC260, &dword_22314D000);
    __cxa_guard_release(&qword_2540CC138);
  }
  v4 = 1;
  sub_223714BC4((uint64_t)&v5, &v6, (std::string *)&xmmword_2540CC260, &v4);
  std::runtime_error::runtime_error(a1, &v5);
  a1->__vftable = (std::runtime_error_vtbl *)&off_24EC65A50;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_22371588C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CC138);
  _Unwind_Resume(a1);
}

void sub_2237158A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2237158C0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CC140);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC140))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::kfplanes::KeyframePlaneSegmentImageSample]", qword_2540CC278);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CC278, &dword_22314D000);
    __cxa_guard_release(&qword_2540CC140);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CC148);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CC148))
    {
      sub_224573040((uint64_t)qword_2540CC278, (uint64_t)&xmmword_2540CC290);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CC290, &dword_22314D000);
      __cxa_guard_release(&qword_2540CC148);
    }
  }
}

void sub_223715990(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CC148);
  _Unwind_Resume(a1);
}

void sub_2237159A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CC140);
  _Unwind_Resume(a1);
}

void sub_2237159C0(std::runtime_error *a1, unsigned int a2)
{
  unsigned __int8 v3;
  unsigned int v4;
  std::string v5;
  unsigned int v6;

  v6 = a2;
  v3 = atomic_load((unsigned __int8 *)&qword_2540CC150);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC150))
  {
    sub_223715AF0();
    if (byte_2540CC2D7 < 0)
    {
      sub_223197FA4(&xmmword_2540CC2A8, (void *)qword_2540CC2C0, unk_2540CC2C8);
    }
    else
    {
      xmmword_2540CC2A8 = *(_OWORD *)&qword_2540CC2C0;
      qword_2540CC2B8 = unk_2540CC2D0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CC2A8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CC150);
  }
  v4 = 1;
  sub_223714BC4((uint64_t)&v5, &v6, (std::string *)&xmmword_2540CC2A8, &v4);
  std::runtime_error::runtime_error(a1, &v5);
  a1->__vftable = (std::runtime_error_vtbl *)&off_24EC65A50;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_223715ABC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CC150);
  _Unwind_Resume(a1);
}

void sub_223715AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223715AF0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CC158);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC158))
  {
    sub_223715D2C(__p);
    sub_223715BC4((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CC2C0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CC158);
  }
}

void sub_223715B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC158);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC158);
  _Unwind_Resume(a1);
}

void sub_223715BC4(char *a1)
{
  int64x2_t v2;
  int8x16_t v3;
  void **v4;
  void **v5;
  void *v6;
  void *__p;
  void **v8;
  void *v9[2];
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v9 = *(_OWORD *)"uint8";
  v10 = 0x500000000000000;
  *(_OWORD *)v11 = *(_OWORD *)"uint8";
  v12 = 0x500000000000000;
  sub_22319BD1C(&__p, (uint64_t)v9, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&qword_2540CC2C0, v2, v3);
  v4 = (void **)__p;
  if (__p)
  {
    v5 = v8;
    v6 = __p;
    if (v8 != __p)
    {
      do
      {
        if (*((char *)v5 - 1) < 0)
          operator delete(*(v5 - 3));
        v5 -= 3;
      }
      while (v5 != v4);
      v6 = __p;
    }
    v8 = v4;
    operator delete(v6);
  }
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(v9[0]);
    return;
  }
  operator delete(v11[0]);
  if (SHIBYTE(v10) < 0)
    goto LABEL_13;
}

void sub_223715CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_22319BB48(&a10);
  if (a24 < 0)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

void sub_223715D2C(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC160);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC160))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::kfplanes::RunLengthEncodedDataSample<unsigned char>]", qword_2540CC2D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CC2D8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CC160);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CC168);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC168))
  {
    v5 = sub_2231A38CC(qword_2540CC2D8, "<", 0);
    sub_2231A37C8(qword_2540CC2D8, 0, v5, qword_2540CC2F0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CC2F0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CC168);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CC170);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC170))
  {
    sub_224573040((uint64_t)qword_2540CC2F0, (uint64_t)&xmmword_2540CC308);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CC308, &dword_22314D000);
    __cxa_guard_release(&qword_2540CC170);
  }
  if (byte_2540CC31F < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2540CC308, *((unint64_t *)&xmmword_2540CC308 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2540CC308;
    __dst[2] = unk_2540CC318;
  }
}

void sub_223715EC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CC170);
  _Unwind_Resume(a1);
}

void sub_223715ED8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CC168);
  _Unwind_Resume(a1);
}

void sub_223715EF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CC160);
  _Unwind_Resume(a1);
}

void sub_223715F08(std::runtime_error *a1, unsigned int a2)
{
  unsigned __int8 v3;
  unsigned int v4;
  std::string v5;
  unsigned int v6;

  v6 = a2;
  v3 = atomic_load((unsigned __int8 *)&qword_2540CC178);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC178))
  {
    sub_223716038();
    if (byte_2540CC367 < 0)
    {
      sub_223197FA4(&xmmword_2540CC320, (void *)xmmword_2540CC350, *((unint64_t *)&xmmword_2540CC350 + 1));
    }
    else
    {
      xmmword_2540CC320 = xmmword_2540CC350;
      qword_2540CC330 = unk_2540CC360;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CC320, &dword_22314D000);
    __cxa_guard_release(&qword_2540CC178);
  }
  v4 = 6;
  sub_223714BC4((uint64_t)&v5, &v6, (std::string *)&xmmword_2540CC320, &v4);
  std::runtime_error::runtime_error(a1, &v5);
  a1->__vftable = (std::runtime_error_vtbl *)&off_24EC65A50;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_223716004(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CC178);
  _Unwind_Resume(a1);
}

void sub_22371601C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223716038()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CC180);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC180))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::kfplanes::KeyframePlaneSample]", qword_2540CC338);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CC338, &dword_22314D000);
    __cxa_guard_release(&qword_2540CC180);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CC188);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CC188))
    {
      sub_224573040((uint64_t)qword_2540CC338, (uint64_t)&xmmword_2540CC350);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CC350, &dword_22314D000);
      __cxa_guard_release(&qword_2540CC188);
    }
  }
}

void sub_223716108(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CC188);
  _Unwind_Resume(a1);
}

void sub_223716120(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CC180);
  _Unwind_Resume(a1);
}

void sub_223716138(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v13 = *(_OWORD *)"float32";
  v14 = 0x700000000000000;
  v4 = sub_2232A0DB4();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v16 = v4->__r_.__value_.__r.__words[2];
    v15 = v5;
  }
  sub_22319BD1C(&__p, (uint64_t)v13, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      return;
LABEL_16:
    operator delete(v13[0]);
    return;
  }
  operator delete((void *)v15);
  if (SHIBYTE(v14) < 0)
    goto LABEL_16;
}

void sub_223716280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_22319BB48(&a10);
  if (a24 < 0)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

void sub_2237162DC(std::runtime_error *a1, unsigned int a2)
{
  unsigned __int8 v3;
  unsigned int v4;
  std::string v5;
  unsigned int v6;

  v6 = a2;
  v3 = atomic_load((unsigned __int8 *)&qword_2540CC1B8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC1B8))
  {
    sub_22371640C();
    if (byte_2540CC427 < 0)
    {
      sub_223197FA4(&xmmword_2540CC3E0, (void *)xmmword_2540CC410, *((unint64_t *)&xmmword_2540CC410 + 1));
    }
    else
    {
      xmmword_2540CC3E0 = xmmword_2540CC410;
      qword_2540CC3F0 = unk_2540CC420;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CC3E0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CC1B8);
  }
  v4 = 1;
  sub_223714BC4((uint64_t)&v5, &v6, (std::string *)&xmmword_2540CC3E0, &v4);
  std::runtime_error::runtime_error(a1, &v5);
  a1->__vftable = (std::runtime_error_vtbl *)&off_24EC65A50;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_2237163D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CC1B8);
  _Unwind_Resume(a1);
}

void sub_2237163F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22371640C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CC1C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC1C0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::kfplanes::ImageRegionSample]", qword_2540CC3F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CC3F8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CC1C0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CC1C8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CC1C8))
    {
      sub_224573040((uint64_t)qword_2540CC3F8, (uint64_t)&xmmword_2540CC410);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CC410, &dword_22314D000);
      __cxa_guard_release(&qword_2540CC1C8);
    }
  }
}

void sub_2237164DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CC1C8);
  _Unwind_Resume(a1);
}

void sub_2237164F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CC1C0);
  _Unwind_Resume(a1);
}

void sub_22371650C(uint64_t a1, void **a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  _OWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  char *v43;
  void *v44;
  unsigned int data;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD *v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v54;
  char *i;
  uint64_t v56;
  void (*v57)(uint64_t);
  _QWORD *v58;
  _QWORD *v59;
  int64_t v60;
  float *v61;
  float *v62;
  unint64_t v63;
  float *v64;
  uint64_t v65;
  float v66;
  _QWORD *v67;
  char *k;
  uint64_t v69;
  void (*v70)(uint64_t);
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  float v74;
  char *j;
  uint64_t v76;
  void (*v77)(uint64_t);
  _QWORD *v78;
  _QWORD *v79;
  unint64_t v80;
  char *v81;
  char *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  void *v88;
  void *v89;
  char *v90;
  void *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  size_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  void *v111;
  void *v112;
  char *v113;
  void *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  void *v120;
  void *v121;
  char *v122;
  void *v123;
  size_t v124;
  float **v125;
  float **v126;
  unsigned int v127;
  _QWORD *v129;
  char *m;
  uint64_t v131;
  void (*v132)(uint64_t);
  _QWORD *v133;
  _QWORD *v134;
  std::string::size_type size;
  _QWORD *v136;
  char *n;
  uint64_t v138;
  void (*v139)(uint64_t);
  _QWORD *v140;
  _QWORD *v141;
  float *v142;
  float *v143;
  unint64_t v144;
  float *v145;
  uint64_t v146;
  float v147;
  _QWORD *v148;
  char *jj;
  uint64_t v150;
  void (*v151)(uint64_t);
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  float v155;
  char *ii;
  uint64_t v157;
  void (*v158)(uint64_t);
  _QWORD *v159;
  _QWORD *v160;
  void **v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  void *v166;
  void *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  void *v173;
  void *v174;
  char *v175;
  void *v176;
  unsigned int v177;
  char **v178;
  unint64_t v179;
  char *v180;
  char *v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  size_t v189;
  char *v190;
  int v191;
  __int16 v192;
  char *v193;
  _QWORD *v195;
  char *kk;
  uint64_t v197;
  void (*v198)(uint64_t);
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  char *mm;
  uint64_t v203;
  void (*v204)(uint64_t);
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  char *nn;
  uint64_t v209;
  void (*v210)(uint64_t);
  _QWORD *v211;
  _QWORD *v212;
  void **v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  char *v218;
  void *v219;
  void *v220;
  unint64_t v221;
  _QWORD *v222;
  std::string::size_type **v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  char *v231;
  char *v232;
  __int128 v233;
  std::string::size_type **v234;
  std::string::size_type **v235;
  std::string::size_type *v236;
  std::string::size_type *v237;
  std::string::size_type **v238;
  std::string::size_type **v239;
  std::string::size_type *v240;
  std::string::size_type *v241;
  size_t v242;
  std::string::size_type **i1;
  unint64_t v244;
  std::string::size_type *v245;
  std::string::size_type *v246;
  unint64_t v247;
  unint64_t v248;
  std::string::size_type *v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  char *v253;
  size_t v254;
  char *v255;
  std::string::size_type *v256;
  std::string::size_type *v257;
  uint64_t v258;
  _QWORD *v259;
  char *i2;
  uint64_t v261;
  void (*v262)(uint64_t);
  _QWORD *v263;
  _QWORD *v264;
  _QWORD *v265;
  char *i3;
  uint64_t v267;
  void (*v268)(uint64_t);
  _QWORD *v269;
  _QWORD *v270;
  std::bad_cast *v271;
  std::bad_cast *v272;
  std::bad_cast *v273;
  std::bad_cast *v274;
  std::bad_cast *v275;
  std::bad_cast *v276;
  std::bad_cast *v277;
  std::bad_cast *v278;
  std::bad_cast *v279;
  std::bad_cast *v280;
  std::bad_cast *v281;
  std::bad_cast *v282;
  std::bad_cast *v283;
  std::bad_cast *v284;
  std::bad_cast *v285;
  std::bad_cast *v286;
  std::runtime_error *v287;
  unsigned __int8 v288;
  std::bad_cast *v289;
  std::bad_cast *v290;
  std::runtime_error *exception;
  unsigned __int8 v292;
  unsigned __int8 v293;
  unsigned __int8 v294;
  size_t v295;
  uint64_t *v296;
  _BYTE *v297;
  size_t v298;
  uint64_t *v299;
  _BYTE *v300;
  unint64_t v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  unsigned __int8 v305;
  char *v306;
  char *v307;
  char *v308;
  unint64_t v309;
  void *__p;
  char *v311;
  char *v312;
  char v313;
  char v314;
  unint64_t v315;
  std::string v316;
  unsigned int v317;
  std::string __s;
  _QWORD *v319;
  __int128 __dst;
  uint64_t v321;

  v309 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a2[1] - (_BYTE *)*a2) >> 6);
  sub_2245543E8(*(_QWORD *)(a1 + 48), &v309);
  v4 = v309;
  v6 = (char *)*a2;
  v5 = (char *)a2[1];
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a2) >> 6);
  v8 = v309 - v7;
  if (v309 <= v7)
  {
    if (v309 < v7)
      sub_2237149D0((uint64_t)a2, (uint64_t)&v6[192 * v309]);
  }
  else
  {
    v9 = a2[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v9 - v5) >> 6) >= v8)
    {
      v30 = &v5[192 * v8];
      v31 = 192 * v309 - ((v5 - (_BYTE *)*a2) >> 6 << 6);
      v32 = 0uLL;
      do
      {
        *((_OWORD *)v5 + 10) = v32;
        *((_OWORD *)v5 + 11) = v32;
        *((_OWORD *)v5 + 8) = v32;
        *((_OWORD *)v5 + 9) = v32;
        *((_OWORD *)v5 + 6) = v32;
        *((_OWORD *)v5 + 7) = v32;
        *((_OWORD *)v5 + 4) = v32;
        *((_OWORD *)v5 + 5) = v32;
        *((_OWORD *)v5 + 2) = v32;
        *((_OWORD *)v5 + 3) = v32;
        *(_OWORD *)v5 = v32;
        *((_OWORD *)v5 + 1) = v32;
        v33 = operator new(0xA8uLL);
        *((_QWORD *)v5 + 6) = v33;
        *((_QWORD *)v5 + 8) = v33 + 21;
        v33[20] = 0;
        v32 = 0uLL;
        *((_OWORD *)v33 + 8) = 0u;
        *((_OWORD *)v33 + 9) = 0u;
        *((_OWORD *)v33 + 6) = 0u;
        *((_OWORD *)v33 + 7) = 0u;
        *((_OWORD *)v33 + 4) = 0u;
        *((_OWORD *)v33 + 5) = 0u;
        *((_OWORD *)v33 + 2) = 0u;
        *((_OWORD *)v33 + 3) = 0u;
        *(_OWORD *)v33 = 0u;
        *((_OWORD *)v33 + 1) = 0u;
        *((_QWORD *)v5 + 7) = v33 + 21;
        *((_QWORD *)v5 + 10) = 0;
        v5[88] = 0;
        *((_DWORD *)v5 + 24) = 0;
        v5[104] = 0;
        v5[120] = 0;
        *((_DWORD *)v5 + 32) = 1;
        v5[184] = 0;
        *((_QWORD *)v5 + 18) = 0;
        *((_QWORD *)v5 + 19) = 0;
        *((_QWORD *)v5 + 17) = 0;
        v5[160] = 0;
        v5 += 192;
        v31 -= 192;
      }
      while (v31);
      a2[1] = v30;
    }
    else
    {
      if (v309 > 0x155555555555555)
        sub_22316E078();
      v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v6) >> 6);
      v11 = 2 * v10;
      if (2 * v10 <= v309)
        v11 = v309;
      if (v10 >= 0xAAAAAAAAAAAAAALL)
        v12 = 0x155555555555555;
      else
        v12 = v11;
      if (v12 > 0x155555555555555)
LABEL_432:
        sub_223174E94();
      v13 = 192 * v12;
      v14 = (char *)operator new(192 * v12);
      v15 = 0;
      v16 = 192 * v7;
      v17 = &v14[192 * v7];
      v307 = &v14[v13];
      v306 = &v14[192 * v4];
      v18 = 192 * v4 - v16;
      v19 = 0uLL;
      do
      {
        v20 = &v17[v15];
        *((_OWORD *)v20 + 10) = v19;
        *((_OWORD *)v20 + 11) = v19;
        *((_OWORD *)v20 + 8) = v19;
        *((_OWORD *)v20 + 9) = v19;
        *((_OWORD *)v20 + 6) = v19;
        *((_OWORD *)v20 + 7) = v19;
        *((_OWORD *)v20 + 4) = v19;
        *((_OWORD *)v20 + 5) = v19;
        *((_OWORD *)v20 + 2) = v19;
        *((_OWORD *)v20 + 3) = v19;
        *(_OWORD *)v20 = v19;
        *((_OWORD *)v20 + 1) = v19;
        v21 = operator new(0xA8uLL);
        *((_QWORD *)v20 + 7) = (char *)v21 + 168;
        *((_QWORD *)v20 + 8) = (char *)v21 + 168;
        v19 = 0uLL;
        *v21 = 0u;
        v21[1] = 0u;
        v21[2] = 0u;
        v21[3] = 0u;
        v21[4] = 0u;
        v21[5] = 0u;
        v21[6] = 0u;
        v21[7] = 0u;
        v21[8] = 0u;
        v21[9] = 0u;
        *((_QWORD *)v21 + 20) = 0;
        *((_QWORD *)v20 + 6) = v21;
        *((_QWORD *)v20 + 10) = 0;
        v20[88] = 0;
        *((_DWORD *)v20 + 24) = 0;
        v20[104] = 0;
        v20[120] = 0;
        *((_DWORD *)v20 + 32) = 1;
        v20[184] = 0;
        *((_QWORD *)v20 + 17) = 0;
        *((_QWORD *)v20 + 18) = 0;
        v20[160] = 0;
        v15 += 192;
        *((_QWORD *)v20 + 19) = 0;
      }
      while (v18 != v15);
      if (v5 == v6)
      {
        *a2 = v17;
        a2[1] = v306;
        a2[2] = v307;
      }
      else
      {
        v22 = 0;
        do
        {
          v23 = &v17[v22];
          v24 = &v5[v22];
          v25 = *(_OWORD *)&v5[v22 - 192];
          v26 = *(_OWORD *)&v5[v22 - 176];
          *(_OWORD *)(v23 - 164) = *(_OWORD *)&v5[v22 - 164];
          *((_OWORD *)v23 - 12) = v25;
          *((_OWORD *)v23 - 11) = v26;
          *((_OWORD *)v23 - 9) = *(_OWORD *)&v5[v22 - 144];
          *((_QWORD *)v23 - 16) = *(_QWORD *)&v5[v22 - 128];
          *((_QWORD *)v24 - 18) = 0;
          *((_QWORD *)v24 - 17) = 0;
          *((_QWORD *)v24 - 16) = 0;
          v27 = *(_OWORD *)&v5[v22 - 120];
          v28 = *(_OWORD *)&v5[v22 - 104];
          v29 = *(_OWORD *)&v5[v22 - 88];
          *(_OWORD *)(v23 - 76) = *(_OWORD *)&v5[v22 - 76];
          *(_OWORD *)(v23 - 88) = v29;
          *(_OWORD *)(v23 - 104) = v28;
          *(_OWORD *)(v23 - 120) = v27;
          *(_OWORD *)(v23 - 56) = *(_OWORD *)&v5[v22 - 56];
          *((_QWORD *)v23 - 5) = *(_QWORD *)&v5[v22 - 40];
          *((_QWORD *)v24 - 7) = 0;
          *((_QWORD *)v24 - 6) = 0;
          *((_QWORD *)v24 - 5) = 0;
          *(v23 - 32) = 0;
          *(v23 - 8) = 0;
          if (v5[v22 - 8])
          {
            *((_OWORD *)v23 - 2) = *((_OWORD *)v24 - 2);
            *((_QWORD *)v23 - 2) = *((_QWORD *)v24 - 2);
            *((_QWORD *)v24 - 4) = 0;
            *((_QWORD *)v24 - 3) = 0;
            *((_QWORD *)v24 - 2) = 0;
            *(v23 - 8) = 1;
          }
          v22 -= 192;
        }
        while (&v5[v22] != v6);
        v5 = (char *)*a2;
        v34 = (char *)a2[1];
        *a2 = &v17[v22];
        a2[1] = v306;
        a2[2] = v307;
        while (v34 != v5)
        {
          if (*(v34 - 8))
          {
            v35 = *((_QWORD *)v34 - 4);
            if (v35)
            {
              v36 = *((_QWORD *)v34 - 3);
              v37 = (void *)*((_QWORD *)v34 - 4);
              if (v36 != v35)
              {
                v38 = *((_QWORD *)v34 - 3);
                do
                {
                  v40 = *(void **)(v38 - 24);
                  v38 -= 24;
                  v39 = v40;
                  if (v40)
                  {
                    *(_QWORD *)(v36 - 16) = v39;
                    operator delete(v39);
                  }
                  v36 = v38;
                }
                while (v38 != v35);
                v37 = (void *)*((_QWORD *)v34 - 4);
              }
              *((_QWORD *)v34 - 3) = v35;
              operator delete(v37);
            }
          }
          v41 = (void *)*((_QWORD *)v34 - 7);
          if (v41)
          {
            *((_QWORD *)v34 - 6) = v41;
            operator delete(v41);
          }
          v42 = (void *)*((_QWORD *)v34 - 18);
          if (v42)
          {
            *((_QWORD *)v34 - 17) = v42;
            operator delete(v42);
          }
          v34 -= 192;
        }
      }
      if (v5)
        operator delete(v5);
    }
  }
  v43 = (char *)*a2;
  v308 = (char *)a2[1];
  if (v308 != *a2)
  {
    while (1)
    {
      LODWORD(__s.__r_.__value_.__l.__data_) = 6;
      sub_224554038(*(_QWORD *)(a1 + 48), &__s);
      data = __s.__r_.__value_.__l.__data_;
      if (LODWORD(__s.__r_.__value_.__l.__data_) >= 7)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        sub_223715F08(exception, data);
        goto LABEL_431;
      }
      v46 = *(_QWORD *)(a1 + 48);
      sub_224553CF0(v46, v43);
      sub_224553CF0(v46, v43 + 1);
      sub_224553CF0(v46, v43 + 2);
      sub_224553CF0(v46, v43 + 3);
      sub_224553CF0(v46, v43 + 4);
      sub_224553CF0(v46, v43 + 5);
      sub_224553CF0(v46, v43 + 6);
      sub_224553CF0(v46, v43 + 7);
      sub_224553CF0(v46, v43 + 8);
      sub_224553CF0(v46, v43 + 9);
      sub_224553CF0(v46, v43 + 10);
      sub_224553CF0(v46, v43 + 11);
      sub_224553CF0(v46, v43 + 12);
      sub_224553CF0(v46, v43 + 13);
      sub_224553CF0(v46, v43 + 14);
      sub_224553CF0(v46, v43 + 15);
      v47 = *(_QWORD *)(a1 + 48);
      sub_2245544CC(v47, (float *)v43 + 4);
      sub_2245544CC(v47, (float *)v43 + 5);
      sub_2245544CC(v47, (float *)v43 + 6);
      v48 = *(_QWORD *)(a1 + 48);
      sub_2245544CC(v48, (float *)v43 + 7);
      sub_2245544CC(v48, (float *)v43 + 8);
      sub_2245544CC(v48, (float *)v43 + 9);
      sub_2245544CC(*(_QWORD *)(a1 + 48), (float *)v43 + 10);
      __p = (void *)((uint64_t)(*((_QWORD *)v43 + 7) - *((_QWORD *)v43 + 6)) >> 2);
      sub_2245543E8(*(_QWORD *)(a1 + 48), &__p);
      v49 = (_DWORD *)*((_QWORD *)v43 + 6);
      v50 = (_DWORD *)*((_QWORD *)v43 + 7);
      v51 = v50 - v49;
      if ((unint64_t)__p <= v51)
      {
        if ((unint64_t)__p < v51)
        {
          v50 = &v49[(_QWORD)__p];
          *((_QWORD *)v43 + 7) = v50;
        }
      }
      else
      {
        sub_2237189C8((uint64_t)(v43 + 48), (unint64_t)__p - v51);
        v49 = (_DWORD *)*((_QWORD *)v43 + 6);
        v50 = (_DWORD *)*((_QWORD *)v43 + 7);
      }
      v52 = *(_QWORD *)(a1 + 48);
      if (v50 == v49)
      {
        if (data == 6)
          goto LABEL_270;
      }
      else
      {
        do
        {
          sub_2245564B0(v52, (uint64_t)&__s);
          if (LODWORD(__s.__r_.__value_.__l.__data_) != 2 || HIDWORD(__s.__r_.__value_.__l.__size_) != 0)
          {
            v275 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v275->__vftable = 0;
            v276 = std::bad_cast::bad_cast(v275);
            v276->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
            __cxa_throw(v276, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
          }
          *v49 = __s.__r_.__value_.__r.__words[1];
          v54 = v319;
          v319 = 0;
          if (v54)
          {
            for (i = (char *)v54[4]; i != (char *)v54[6]; i -= 16)
            {
              v57 = (void (*)(uint64_t))*((_QWORD *)i - 2);
              v56 = *((_QWORD *)i - 1);
              v57(v56);
            }
            free(i);
            v58 = (_QWORD *)v54[3];
            if (v58)
            {
              do
              {
                v59 = (_QWORD *)*v58;
                free(v58);
                v58 = v59;
              }
              while (v59);
            }
            free(v54);
          }
          ++v49;
        }
        while (v49 != v50);
        v52 = *(_QWORD *)(a1 + 48);
        if (data == 6)
          goto LABEL_270;
      }
      LOBYTE(__p) = 0;
      v313 = 0;
      v316.__r_.__value_.__s.__data_[0] = 0;
      sub_224553CF0(v52, &v316);
      if (!v316.__r_.__value_.__s.__data_[0])
        break;
      if (v313)
      {
        v60 = (v311 - (_BYTE *)__p) >> 3;
      }
      else
      {
        v60 = 0;
        __p = 0;
        v311 = 0;
        v312 = 0;
        v313 = 1;
      }
      *(_QWORD *)&__dst = v60;
      sub_2245543E8(*(_QWORD *)(a1 + 48), &__dst);
      v62 = (float *)__p;
      v61 = (float *)v311;
      v63 = (v311 - (_BYTE *)__p) >> 3;
      if ((unint64_t)__dst <= v63)
      {
        if ((unint64_t)__dst < v63)
        {
          v61 = (float *)((char *)__p + 8 * __dst);
          v311 = (char *)v61;
        }
      }
      else
      {
        sub_2232F8F14(&__p, __dst - v63);
        v62 = (float *)__p;
        v61 = (float *)v311;
      }
      if (v61 != v62)
      {
        v64 = v61;
        while (1)
        {
          v65 = *(_QWORD *)(a1 + 48);
          sub_2245564B0(v65, (uint64_t)&__s);
          if (LODWORD(__s.__r_.__value_.__l.__data_) == 2)
            break;
          if (LODWORD(__s.__r_.__value_.__l.__data_) == 3)
          {
            *v62 = (float)(uint64_t)__s.__r_.__value_.__l.__size_;
            v67 = v319;
            v319 = 0;
            if (!v67)
              goto LABEL_98;
            goto LABEL_92;
          }
          if (LODWORD(__s.__r_.__value_.__l.__data_) != 4)
            goto LABEL_424;
          v66 = *(double *)&__s.__r_.__value_.__l.__size_;
          *v62 = v66;
          v67 = v319;
          v319 = 0;
          if (v67)
            goto LABEL_92;
LABEL_98:
          sub_2245564B0(v65, (uint64_t)&__s);
          switch(LODWORD(__s.__r_.__value_.__l.__data_))
          {
            case 2:
              v62[1] = (float)__s.__r_.__value_.__l.__size_;
              v73 = v319;
              v319 = 0;
              if (v73)
                goto LABEL_106;
              break;
            case 4:
              v74 = *(double *)&__s.__r_.__value_.__l.__size_;
              v62[1] = v74;
              v73 = v319;
              v319 = 0;
              if (v73)
                goto LABEL_106;
              break;
            case 3:
              v62[1] = (float)(uint64_t)__s.__r_.__value_.__l.__size_;
              v73 = v319;
              v319 = 0;
              if (v73)
              {
LABEL_106:
                for (j = (char *)v73[4]; j != (char *)v73[6]; j -= 16)
                {
                  v77 = (void (*)(uint64_t))*((_QWORD *)j - 2);
                  v76 = *((_QWORD *)j - 1);
                  v77(v76);
                }
                free(j);
                v78 = (_QWORD *)v73[3];
                if (v78)
                {
                  do
                  {
                    v79 = (_QWORD *)*v78;
                    free(v78);
                    v78 = v79;
                  }
                  while (v79);
                }
                free(v73);
              }
              break;
            default:
LABEL_424:
              v283 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
              v283->__vftable = 0;
              v284 = std::bad_cast::bad_cast(v283);
              v284->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
              __cxa_throw(v284, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
          }
          v62 += 2;
          if (v62 == v64)
            goto LABEL_112;
        }
        *v62 = (float)__s.__r_.__value_.__l.__size_;
        v67 = v319;
        v319 = 0;
        if (!v67)
          goto LABEL_98;
LABEL_92:
        for (k = (char *)v67[4]; k != (char *)v67[6]; k -= 16)
        {
          v70 = (void (*)(uint64_t))*((_QWORD *)k - 2);
          v69 = *((_QWORD *)k - 1);
          v70(v69);
        }
        free(k);
        v71 = (_QWORD *)v67[3];
        if (v71)
        {
          do
          {
            v72 = (_QWORD *)*v71;
            free(v71);
            v71 = v72;
          }
          while (v72);
        }
        free(v67);
        goto LABEL_98;
      }
LABEL_112:
      if (v313)
        goto LABEL_113;
LABEL_115:
      v52 = *(_QWORD *)(a1 + 48);
      if (data > 4)
        goto LABEL_270;
      LOBYTE(__p) = 0;
      v313 = 0;
      v314 = 0;
      sub_224553CF0(v52, &v314);
      if (v314)
      {
        if (v313)
        {
          v80 = 0xAAAAAAAAAAAAAAABLL * ((v311 - (_BYTE *)__p) >> 4);
        }
        else
        {
          v80 = 0;
          __p = 0;
          v311 = 0;
          v312 = 0;
          v313 = 1;
        }
        v315 = v80;
        sub_2245543E8(*(_QWORD *)(a1 + 48), &v315);
        v92 = v315;
        v93 = (char *)__p;
        v94 = v311;
        v95 = 0xAAAAAAAAAAAAAAABLL * ((v311 - (_BYTE *)__p) >> 4);
        v96 = v315 - v95;
        if (v315 <= v95)
        {
          if (v315 < v95)
          {
            v115 = (char *)__p + 48 * v315;
            if (v311 != v115)
            {
              do
              {
                v116 = *((_QWORD *)v94 - 3);
                if (v116)
                {
                  v117 = *((_QWORD *)v94 - 2);
                  v118 = (void *)*((_QWORD *)v94 - 3);
                  if (v117 != v116)
                  {
                    v119 = *((_QWORD *)v94 - 2);
                    do
                    {
                      v121 = *(void **)(v119 - 24);
                      v119 -= 24;
                      v120 = v121;
                      if (v121)
                      {
                        *(_QWORD *)(v117 - 16) = v120;
                        operator delete(v120);
                      }
                      v117 = v119;
                    }
                    while (v119 != v116);
                    v118 = (void *)*((_QWORD *)v94 - 3);
                  }
                  *((_QWORD *)v94 - 2) = v116;
                  operator delete(v118);
                }
                v122 = v94 - 48;
                v123 = (void *)*((_QWORD *)v94 - 6);
                if (v123)
                {
                  *((_QWORD *)v94 - 5) = v123;
                  operator delete(v123);
                }
                v94 -= 48;
              }
              while (v122 != v115);
            }
            v311 = v115;
          }
        }
        else if (0xAAAAAAAAAAAAAAABLL * ((v312 - v311) >> 4) >= v96)
        {
          v124 = 48 * ((48 * v96 - 48) / 0x30) + 48;
          bzero(v311, v124);
          v311 = &v94[v124];
        }
        else
        {
          if (v315 > 0x555555555555555)
            sub_22316E078();
          if (0x5555555555555556 * ((v312 - (_BYTE *)__p) >> 4) > v315)
            v92 = 0x5555555555555556 * ((v312 - (_BYTE *)__p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((v312 - (_BYTE *)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v97 = 0x555555555555555;
          else
            v97 = v92;
          if (v97 > 0x555555555555555)
            sub_223174E94();
          v98 = (char *)operator new(48 * v97);
          v99 = &v98[48 * v95];
          v100 = &v98[48 * v97];
          v101 = 48 * ((48 * v96 - 48) / 0x30) + 48;
          bzero(v99, v101);
          v102 = &v99[v101];
          if (v94 == v93)
          {
            __p = v99;
            v311 = &v99[v101];
            v312 = v100;
          }
          else
          {
            v103 = 0;
            do
            {
              v104 = &v99[v103];
              v105 = &v94[v103];
              *((_OWORD *)v104 - 3) = *(_OWORD *)&v94[v103 - 48];
              *((_QWORD *)v104 - 4) = *(_QWORD *)&v94[v103 - 32];
              *((_QWORD *)v105 - 6) = 0;
              *((_QWORD *)v105 - 5) = 0;
              *((_QWORD *)v105 - 4) = 0;
              *(_OWORD *)(v104 - 24) = *(_OWORD *)&v94[v103 - 24];
              *((_QWORD *)v104 - 1) = *(_QWORD *)&v94[v103 - 8];
              *((_QWORD *)v105 - 3) = 0;
              *((_QWORD *)v105 - 2) = 0;
              *((_QWORD *)v105 - 1) = 0;
              v103 -= 48;
            }
            while (&v94[v103] != v93);
            v94 = (char *)__p;
            v106 = v311;
            __p = &v99[v103];
            v311 = v102;
            v312 = v100;
            if (v106 != v94)
            {
              do
              {
                v107 = *((_QWORD *)v106 - 3);
                if (v107)
                {
                  v108 = *((_QWORD *)v106 - 2);
                  v109 = (void *)*((_QWORD *)v106 - 3);
                  if (v108 != v107)
                  {
                    v110 = *((_QWORD *)v106 - 2);
                    do
                    {
                      v112 = *(void **)(v110 - 24);
                      v110 -= 24;
                      v111 = v112;
                      if (v112)
                      {
                        *(_QWORD *)(v108 - 16) = v111;
                        operator delete(v111);
                      }
                      v108 = v110;
                    }
                    while (v110 != v107);
                    v109 = (void *)*((_QWORD *)v106 - 3);
                  }
                  *((_QWORD *)v106 - 2) = v107;
                  operator delete(v109);
                }
                v113 = v106 - 48;
                v114 = (void *)*((_QWORD *)v106 - 6);
                if (v114)
                {
                  *((_QWORD *)v106 - 5) = v114;
                  operator delete(v114);
                }
                v106 -= 48;
              }
              while (v113 != v94);
            }
          }
          if (v94)
            operator delete(v94);
        }
        v126 = (float **)__p;
        v125 = (float **)v311;
        if (v311 != __p)
        {
          while (1)
          {
            sub_2245564B0(*(_QWORD *)(a1 + 48), (uint64_t)&__s);
            v127 = __s.__r_.__value_.__r.__words[1];
            if (LODWORD(__s.__r_.__value_.__l.__data_) != 2 || HIDWORD(__s.__r_.__value_.__l.__size_) != 0)
            {
              v285 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
              v285->__vftable = 0;
              v286 = std::bad_cast::bad_cast(v285);
              v286->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
              __cxa_throw(v286, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
            }
            v129 = v319;
            v319 = 0;
            if (v129)
            {
              for (m = (char *)v129[4]; m != (char *)v129[6]; m -= 16)
              {
                v132 = (void (*)(uint64_t))*((_QWORD *)m - 2);
                v131 = *((_QWORD *)m - 1);
                v132(v131);
              }
              free(m);
              v133 = (_QWORD *)v129[3];
              if (v133)
              {
                do
                {
                  v134 = (_QWORD *)*v133;
                  free(v133);
                  v133 = v134;
                }
                while (v134);
              }
              free(v129);
            }
            if (v127 >= 2)
              break;
            sub_2245564B0(*(_QWORD *)(a1 + 48), (uint64_t)&__s);
            if (LODWORD(__s.__r_.__value_.__l.__data_) != 2)
            {
              v289 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
              v289->__vftable = 0;
              v290 = std::bad_cast::bad_cast(v289);
              v290->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
              __cxa_throw(v290, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
            }
            size = __s.__r_.__value_.__l.__size_;
            v136 = v319;
            v319 = 0;
            if (v136)
            {
              for (n = (char *)v136[4]; n != (char *)v136[6]; n -= 16)
              {
                v139 = (void (*)(uint64_t))*((_QWORD *)n - 2);
                v138 = *((_QWORD *)n - 1);
                v139(v138);
              }
              free(n);
              v140 = (_QWORD *)v136[3];
              if (v140)
              {
                do
                {
                  v141 = (_QWORD *)*v140;
                  free(v140);
                  v140 = v141;
                }
                while (v141);
              }
              free(v136);
            }
            v143 = *v126;
            v142 = v126[1];
            v144 = ((char *)v142 - (char *)*v126) >> 3;
            if (size <= v144)
            {
              if (size < v144)
              {
                v142 = &v143[2 * size];
                v126[1] = v142;
              }
            }
            else
            {
              sub_2232F8F14((void **)v126, size - v144);
              v143 = *v126;
              v142 = v126[1];
            }
            if (v142 != v143)
            {
              v145 = v142;
              while (1)
              {
                v146 = *(_QWORD *)(a1 + 48);
                sub_2245564B0(v146, (uint64_t)&__s);
                if (LODWORD(__s.__r_.__value_.__l.__data_) == 2)
                  break;
                if (LODWORD(__s.__r_.__value_.__l.__data_) == 3)
                {
                  *v143 = (float)(uint64_t)__s.__r_.__value_.__l.__size_;
                  v148 = v319;
                  v319 = 0;
                  if (!v148)
                    goto LABEL_222;
                  goto LABEL_216;
                }
                if (LODWORD(__s.__r_.__value_.__l.__data_) != 4)
                  goto LABEL_420;
                v147 = *(double *)&__s.__r_.__value_.__l.__size_;
                *v143 = v147;
                v148 = v319;
                v319 = 0;
                if (v148)
                  goto LABEL_216;
LABEL_222:
                sub_2245564B0(v146, (uint64_t)&__s);
                switch(LODWORD(__s.__r_.__value_.__l.__data_))
                {
                  case 2:
                    v143[1] = (float)__s.__r_.__value_.__l.__size_;
                    v154 = v319;
                    v319 = 0;
                    if (v154)
                      goto LABEL_230;
                    break;
                  case 4:
                    v155 = *(double *)&__s.__r_.__value_.__l.__size_;
                    v143[1] = v155;
                    v154 = v319;
                    v319 = 0;
                    if (v154)
                      goto LABEL_230;
                    break;
                  case 3:
                    v143[1] = (float)(uint64_t)__s.__r_.__value_.__l.__size_;
                    v154 = v319;
                    v319 = 0;
                    if (v154)
                    {
LABEL_230:
                      for (ii = (char *)v154[4]; ii != (char *)v154[6]; ii -= 16)
                      {
                        v158 = (void (*)(uint64_t))*((_QWORD *)ii - 2);
                        v157 = *((_QWORD *)ii - 1);
                        v158(v157);
                      }
                      free(ii);
                      v159 = (_QWORD *)v154[3];
                      if (v159)
                      {
                        do
                        {
                          v160 = (_QWORD *)*v159;
                          free(v159);
                          v159 = v160;
                        }
                        while (v160);
                      }
                      free(v154);
                    }
                    break;
                  default:
LABEL_420:
                    v273 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                    v273->__vftable = 0;
                    v274 = std::bad_cast::bad_cast(v273);
                    v274->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
                    __cxa_throw(v274, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
                }
                v143 += 2;
                if (v143 == v145)
                  goto LABEL_236;
              }
              *v143 = (float)__s.__r_.__value_.__l.__size_;
              v148 = v319;
              v319 = 0;
              if (!v148)
                goto LABEL_222;
LABEL_216:
              for (jj = (char *)v148[4]; jj != (char *)v148[6]; jj -= 16)
              {
                v151 = (void (*)(uint64_t))*((_QWORD *)jj - 2);
                v150 = *((_QWORD *)jj - 1);
                v151(v150);
              }
              free(jj);
              v152 = (_QWORD *)v148[3];
              if (v152)
              {
                do
                {
                  v153 = (_QWORD *)*v152;
                  free(v152);
                  v152 = v153;
                }
                while (v153);
              }
              free(v148);
              goto LABEL_222;
            }
LABEL_236:
            sub_2232F90B4(a1, v126 + 3);
            v126 += 6;
            if (v126 == v125)
              goto LABEL_237;
          }
          v287 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          v317 = v127;
          v288 = atomic_load((unsigned __int8 *)&qword_2540CC190);
          if ((v288 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC190))
          {
            v292 = atomic_load((unsigned __int8 *)&qword_2540CC198);
            if ((v292 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC198))
            {
              v293 = atomic_load((unsigned __int8 *)&qword_2540CC1A0);
              if ((v293 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC1A0))
              {
                sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::geometry::PolygonSample<float, 2>]", &qword_2540CC398);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CC398, &dword_22314D000);
                __cxa_guard_release(&qword_2540CC1A0);
              }
              v294 = atomic_load((unsigned __int8 *)&qword_2540CC1A8);
              if ((v294 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC1A8))
              {
                if (byte_2540CC3AF >= 0)
                  v295 = byte_2540CC3AF;
                else
                  v295 = unk_2540CC3A0;
                if (byte_2540CC3AF >= 0)
                  v296 = &qword_2540CC398;
                else
                  v296 = (uint64_t *)qword_2540CC398;
                v297 = (char *)v296 + v295;
                if ((uint64_t)v295 >= 1)
                {
                  v298 = v295;
                  v299 = v296;
                  do
                  {
                    v300 = memchr(v299, 60, v298);
                    if (!v300)
                      break;
                    if (*v300 == 60)
                      goto LABEL_464;
                    v299 = (uint64_t *)(v300 + 1);
                    v298 = v297 - (_BYTE *)v299;
                  }
                  while (v297 - (_BYTE *)v299 > 0);
                }
                v300 = (char *)v296 + v295;
LABEL_464:
                v301 = v300 - (_BYTE *)v296;
                if (v300 == v297)
                  v301 = -1;
                if (v295 >= v301)
                  v295 = v301;
                if (v295 >= 0x7FFFFFFFFFFFFFF8)
                  sub_22316DBC0();
                if (v295 >= 0x17)
                {
                  v303 = (v295 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v295 | 7) != 0x17)
                    v303 = v295 | 7;
                  v304 = v303 + 1;
                  v302 = (char *)operator new(v303 + 1);
                  *(_QWORD *)&byte_2540CC3B0[8] = v295;
                  *(_QWORD *)&byte_2540CC3B0[16] = v304 | 0x8000000000000000;
                  *(_QWORD *)byte_2540CC3B0 = v302;
                }
                else
                {
                  byte_2540CC3B0[23] = v295;
                  v302 = byte_2540CC3B0;
                  if (!v295)
                  {
LABEL_477:
                    v302[v295] = 0;
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_2540CC3B0, &dword_22314D000);
                    __cxa_guard_release(&qword_2540CC1A8);
                    goto LABEL_478;
                  }
                }
                memmove(v302, v296, v295);
                goto LABEL_477;
              }
LABEL_478:
              v305 = atomic_load((unsigned __int8 *)&qword_2540CC1B0);
              if ((v305 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC1B0))
              {
                if (byte_2540CC3B0[23] < 0)
                  sub_223197FA4(&__s, *(void **)byte_2540CC3B0, *(unint64_t *)&byte_2540CC3B0[8]);
                else
                  __s = *(std::string *)byte_2540CC3B0;
                sub_22456D060(&__s, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_2540CC3C8);
                if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__s.__r_.__value_.__l.__data_);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CC3C8, &dword_22314D000);
                __cxa_guard_release(&qword_2540CC1B0);
              }
              if (byte_2540CC3DF < 0)
              {
                sub_223197FA4(&__dst, (void *)xmmword_2540CC3C8, *((unint64_t *)&xmmword_2540CC3C8 + 1));
              }
              else
              {
                __dst = xmmword_2540CC3C8;
                v321 = unk_2540CC3D8;
              }
              sub_223716138((char *)&__dst, (std::string *)&qword_2540CC380);
              if (SHIBYTE(v321) < 0)
                operator delete((void *)__dst);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CC380, &dword_22314D000);
              __cxa_guard_release(&qword_2540CC198);
            }
            if (byte_2540CC397 < 0)
            {
              sub_223197FA4(&xmmword_2540CC368, (void *)qword_2540CC380, unk_2540CC388);
            }
            else
            {
              xmmword_2540CC368 = *(_OWORD *)&qword_2540CC380;
              qword_2540CC378 = unk_2540CC390;
            }
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CC368, &dword_22314D000);
            __cxa_guard_release(&qword_2540CC190);
          }
          LODWORD(__s.__r_.__value_.__l.__data_) = 1;
          sub_223714BC4((uint64_t)&v316, &v317, (std::string *)&xmmword_2540CC368, (unsigned int *)&__s);
          std::runtime_error::runtime_error(v287, &v316);
          v287->__vftable = (std::runtime_error_vtbl *)&off_24EC65A50;
          if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v316.__r_.__value_.__l.__data_);
          __cxa_throw(v287, (struct type_info *)&unk_24EC65A68, (void (*)(void *))std::runtime_error::~runtime_error);
        }
LABEL_237:
        if (v313)
        {
          sub_2237224B8((uint64_t *)&__p, (uint64_t)&__s);
          if (v43[184])
          {
            v161 = (void **)(v43 + 160);
            v162 = *((_QWORD *)v43 + 20);
            if (v162)
            {
              v163 = *((_QWORD *)v43 + 21);
              v164 = (void *)*((_QWORD *)v43 + 20);
              if (v163 != v162)
              {
                v165 = *((_QWORD *)v43 + 21);
                do
                {
                  v167 = *(void **)(v165 - 24);
                  v165 -= 24;
                  v166 = v167;
                  if (v167)
                  {
                    *(_QWORD *)(v163 - 16) = v166;
                    operator delete(v166);
                  }
                  v163 = v165;
                }
                while (v165 != v162);
                v164 = *v161;
              }
              *((_QWORD *)v43 + 21) = v162;
              operator delete(v164);
              *v161 = 0;
              *((_QWORD *)v43 + 21) = 0;
              *((_QWORD *)v43 + 22) = 0;
            }
            *(std::string *)(v43 + 160) = __s;
            if (v313)
            {
LABEL_250:
              v81 = (char *)__p;
              if (!__p)
                goto LABEL_266;
              v168 = v311;
              v83 = __p;
              if (v311 == __p)
                goto LABEL_265;
              do
              {
                v169 = *((_QWORD *)v168 - 3);
                if (v169)
                {
                  v170 = *((_QWORD *)v168 - 2);
                  v171 = (void *)*((_QWORD *)v168 - 3);
                  if (v170 != v169)
                  {
                    v172 = *((_QWORD *)v168 - 2);
                    do
                    {
                      v174 = *(void **)(v172 - 24);
                      v172 -= 24;
                      v173 = v174;
                      if (v174)
                      {
                        *(_QWORD *)(v170 - 16) = v173;
                        operator delete(v173);
                      }
                      v170 = v172;
                    }
                    while (v172 != v169);
                    v171 = (void *)*((_QWORD *)v168 - 3);
                  }
                  *((_QWORD *)v168 - 2) = v169;
                  operator delete(v171);
                }
                v175 = v168 - 48;
                v176 = (void *)*((_QWORD *)v168 - 6);
                if (v176)
                {
                  *((_QWORD *)v168 - 5) = v176;
                  operator delete(v176);
                }
                v168 -= 48;
              }
              while (v175 != v81);
LABEL_264:
              v83 = __p;
              goto LABEL_265;
            }
          }
          else
          {
            *(std::string *)(v43 + 160) = __s;
            v43[184] = 1;
            if (v313)
              goto LABEL_250;
          }
        }
      }
      else if (v313)
      {
        v81 = (char *)__p;
        if (__p)
        {
          v82 = v311;
          v83 = __p;
          if (v311 != __p)
          {
            do
            {
              v84 = *((_QWORD *)v82 - 3);
              if (v84)
              {
                v85 = *((_QWORD *)v82 - 2);
                v86 = (void *)*((_QWORD *)v82 - 3);
                if (v85 != v84)
                {
                  v87 = *((_QWORD *)v82 - 2);
                  do
                  {
                    v89 = *(void **)(v87 - 24);
                    v87 -= 24;
                    v88 = v89;
                    if (v89)
                    {
                      *(_QWORD *)(v85 - 16) = v88;
                      operator delete(v88);
                    }
                    v85 = v87;
                  }
                  while (v87 != v84);
                  v86 = (void *)*((_QWORD *)v82 - 3);
                }
                *((_QWORD *)v82 - 2) = v84;
                operator delete(v86);
              }
              v90 = v82 - 48;
              v91 = (void *)*((_QWORD *)v82 - 6);
              if (v91)
              {
                *((_QWORD *)v82 - 5) = v91;
                operator delete(v91);
              }
              v82 -= 48;
            }
            while (v90 != v81);
            goto LABEL_264;
          }
LABEL_265:
          v311 = v81;
          operator delete(v83);
        }
      }
LABEL_266:
      v52 = *(_QWORD *)(a1 + 48);
      if (data <= 3)
      {
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = 0uLL;
        LODWORD(__p) = 1;
        sub_224554038(v52, &__p);
        v177 = __p;
        if (__p >= 2)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          sub_2237162DC(exception, v177);
LABEL_431:
          __cxa_throw(exception, (struct type_info *)&unk_24EC65A68, (void (*)(void *))std::runtime_error::~runtime_error);
        }
        sub_224554038(*(_QWORD *)(a1 + 48), &__s);
        sub_224554038(*(_QWORD *)(a1 + 48), (_DWORD *)__s.__r_.__value_.__r.__words + 1);
        sub_224554038(*(_QWORD *)(a1 + 48), &__s.__r_.__value_.__r.__words[1]);
        sub_224554038(*(_QWORD *)(a1 + 48), (_DWORD *)&__s.__r_.__value_.__r.__words[1] + 1);
        if (data < 2)
          goto LABEL_46;
        v52 = *(_QWORD *)(a1 + 48);
      }
LABEL_270:
      LODWORD(__s.__r_.__value_.__l.__data_) = 2;
      sub_224554038(v52, &__s);
      sub_2232F8E20(a1, (uint64_t)(v43 + 72), __s.__r_.__value_.__l.__data_);
      if (data >= 3)
      {
        sub_224554038(*(_QWORD *)(a1 + 48), (_DWORD *)v43 + 32);
        if (data != 3)
        {
          v178 = (char **)(v43 + 136);
          __p = (void *)((uint64_t)(*((_QWORD *)v43 + 18) - *((_QWORD *)v43 + 17)) >> 3);
          sub_2245543E8(*(_QWORD *)(a1 + 48), &__p);
          v179 = (unint64_t)__p;
          v181 = (char *)*((_QWORD *)v43 + 17);
          v180 = (char *)*((_QWORD *)v43 + 18);
          v182 = (v180 - v181) >> 3;
          v183 = (unint64_t)__p - v182;
          if ((unint64_t)__p <= v182)
          {
            if ((unint64_t)__p < v182)
            {
              v180 = &v181[8 * (_QWORD)__p];
              *((_QWORD *)v43 + 18) = v180;
            }
            for (; v181 != v180; v181 += 8)
            {
LABEL_295:
              sub_2245564B0(*(_QWORD *)(a1 + 48), (uint64_t)&__s);
              if (LODWORD(__s.__r_.__value_.__l.__data_) == 3)
              {
                if ((uint64_t)__s.__r_.__value_.__l.__size_ <= -32769)
                  goto LABEL_421;
              }
              else if (LODWORD(__s.__r_.__value_.__l.__data_) != 2 || __s.__r_.__value_.__l.__size_ >> 15 != 0)
              {
LABEL_421:
                v277 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                v277->__vftable = 0;
                v278 = std::bad_cast::bad_cast(v277);
                v278->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
                __cxa_throw(v278, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
              }
              *(_WORD *)v181 = __s.__r_.__value_.__r.__words[1];
              v195 = v319;
              v319 = 0;
              if (v195)
              {
                for (kk = (char *)v195[4]; kk != (char *)v195[6]; kk -= 16)
                {
                  v198 = (void (*)(uint64_t))*((_QWORD *)kk - 2);
                  v197 = *((_QWORD *)kk - 1);
                  v198(v197);
                }
                free(kk);
                v199 = (_QWORD *)v195[3];
                if (v199)
                {
                  do
                  {
                    v200 = (_QWORD *)*v199;
                    free(v199);
                    v199 = v200;
                  }
                  while (v200);
                }
                free(v195);
              }
              sub_2245564B0(*(_QWORD *)(a1 + 48), (uint64_t)&__s);
              if (LODWORD(__s.__r_.__value_.__l.__data_) == 3)
              {
                if ((uint64_t)__s.__r_.__value_.__l.__size_ <= -32769)
                  goto LABEL_422;
              }
              else if (LODWORD(__s.__r_.__value_.__l.__data_) != 2 || __s.__r_.__value_.__l.__size_ >> 15)
              {
LABEL_422:
                v279 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                v279->__vftable = 0;
                v280 = std::bad_cast::bad_cast(v279);
                v280->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
                __cxa_throw(v280, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
              }
              *((_WORD *)v181 + 1) = __s.__r_.__value_.__r.__words[1];
              v201 = v319;
              v319 = 0;
              if (v201)
              {
                for (mm = (char *)v201[4]; mm != (char *)v201[6]; mm -= 16)
                {
                  v204 = (void (*)(uint64_t))*((_QWORD *)mm - 2);
                  v203 = *((_QWORD *)mm - 1);
                  v204(v203);
                }
                free(mm);
                v205 = (_QWORD *)v201[3];
                if (v205)
                {
                  do
                  {
                    v206 = (_QWORD *)*v205;
                    free(v205);
                    v205 = v206;
                  }
                  while (v206);
                }
                free(v201);
              }
              sub_2245564B0(*(_QWORD *)(a1 + 48), (uint64_t)&__s);
              if (LODWORD(__s.__r_.__value_.__l.__data_) == 3)
              {
                if ((uint64_t)__s.__r_.__value_.__l.__size_ <= -32769)
                  goto LABEL_423;
              }
              else if (LODWORD(__s.__r_.__value_.__l.__data_) != 2 || __s.__r_.__value_.__l.__size_ >> 15)
              {
LABEL_423:
                v281 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                v281->__vftable = 0;
                v282 = std::bad_cast::bad_cast(v281);
                v282->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
                __cxa_throw(v282, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
              }
              *((_WORD *)v181 + 2) = __s.__r_.__value_.__r.__words[1];
              v207 = v319;
              v319 = 0;
              if (v207)
              {
                for (nn = (char *)v207[4]; nn != (char *)v207[6]; nn -= 16)
                {
                  v210 = (void (*)(uint64_t))*((_QWORD *)nn - 2);
                  v209 = *((_QWORD *)nn - 1);
                  v210(v209);
                }
                free(nn);
                v211 = (_QWORD *)v207[3];
                if (v211)
                {
                  do
                  {
                    v212 = (_QWORD *)*v211;
                    free(v211);
                    v211 = v212;
                  }
                  while (v212);
                }
                free(v207);
              }
            }
          }
          else
          {
            v184 = *((_QWORD *)v43 + 19);
            if (v183 <= (v184 - (uint64_t)v180) >> 3)
            {
              memset_pattern16(*((void **)v43 + 18), &unk_22464C510, 8 * v183);
              *((_QWORD *)v43 + 18) = &v180[8 * v183];
              v181 = *v178;
              v180 += 8 * v183;
              if (v180 != *v178)
                goto LABEL_295;
            }
            else
            {
              if ((unint64_t)__p >> 61)
                sub_2236EA0B4();
              v185 = v184 - (_QWORD)v181;
              if (v185 >> 2 > (unint64_t)__p)
                v179 = v185 >> 2;
              if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFF8)
                v179 = 0x1FFFFFFFFFFFFFFFLL;
              if (v179 >> 61)
                goto LABEL_432;
              v186 = 8 * v179;
              v187 = (char *)operator new(8 * v179);
              v188 = &v187[8 * v182];
              v189 = 8 * v183;
              memset_pattern16(v188, &unk_22464C510, v189);
              v190 = v188;
              if (v180 != v181)
              {
                do
                {
                  v191 = *((_DWORD *)v180 - 2);
                  v180 -= 8;
                  v192 = *((_WORD *)v180 + 2);
                  *((_DWORD *)v190 - 2) = v191;
                  v190 -= 8;
                  *((_WORD *)v190 + 2) = v192;
                }
                while (v180 != v181);
                v180 = v181;
              }
              v193 = &v188[v189];
              *((_QWORD *)v43 + 17) = v190;
              *((_QWORD *)v43 + 18) = &v188[v189];
              *((_QWORD *)v43 + 19) = &v187[v186];
              if (v180)
              {
                operator delete(v180);
                v193 = (char *)*((_QWORD *)v43 + 18);
              }
              v181 = *v178;
              v180 = v193;
              if (v193 != *v178)
                goto LABEL_295;
            }
          }
          if (data >= 5)
          {
            v213 = (void **)(v43 + 160);
            v316.__r_.__value_.__s.__data_[0] = 0;
            sub_224553CF0(*(_QWORD *)(a1 + 48), &v316);
            if (v316.__r_.__value_.__s.__data_[0])
            {
              if (v43[184])
              {
                v215 = *((_QWORD *)v43 + 20);
                v214 = *((_QWORD *)v43 + 21);
              }
              else
              {
                v215 = 0;
                v214 = 0;
                *v213 = 0;
                *((_QWORD *)v43 + 21) = 0;
                *((_QWORD *)v43 + 22) = 0;
                v43[184] = 1;
              }
              *(_QWORD *)&__dst = 0xAAAAAAAAAAAAAAABLL * ((v214 - v215) >> 3);
              sub_2245543E8(*(_QWORD *)(a1 + 48), &__dst);
              v221 = __dst;
              v222 = (_QWORD *)*((_QWORD *)v43 + 20);
              v223 = (std::string::size_type **)*((_QWORD *)v43 + 21);
              v224 = 0xAAAAAAAAAAAAAAABLL * (v223 - (std::string::size_type **)v222);
              v225 = __dst - v224;
              if ((unint64_t)__dst <= v224)
              {
                if ((unint64_t)__dst < v224)
                {
                  v238 = (std::string::size_type **)&v222[3 * __dst];
                  if (v223 != v238)
                  {
                    v239 = (std::string::size_type **)*((_QWORD *)v43 + 21);
                    do
                    {
                      v241 = *(v239 - 3);
                      v239 -= 3;
                      v240 = v241;
                      if (v241)
                      {
                        *(v223 - 2) = v240;
                        operator delete(v240);
                      }
                      v223 = v239;
                    }
                    while (v239 != v238);
                  }
                  *((_QWORD *)v43 + 21) = v238;
                  v223 = v238;
                }
                for (i1 = (std::string::size_type **)*v213; i1 != v223; i1 += 3)
                {
LABEL_377:
                  __p = (void *)(((char *)i1[1] - (char *)*i1) >> 4);
                  sub_2245543E8(*(_QWORD *)(a1 + 48), &__p);
                  v244 = (unint64_t)__p;
                  v245 = *i1;
                  v246 = i1[1];
                  v247 = ((char *)v246 - (char *)*i1) >> 4;
                  v248 = (unint64_t)__p - v247;
                  if ((unint64_t)__p <= v247)
                  {
                    if ((unint64_t)__p < v247)
                    {
                      v246 = &v245[2 * (_QWORD)__p];
                      i1[1] = v246;
                    }
                  }
                  else
                  {
                    v249 = i1[2];
                    if (v248 <= ((char *)v249 - (char *)v246) >> 4)
                    {
                      bzero(i1[1], 16 * v248);
                      v256 = &v246[2 * v248];
                      i1[1] = v256;
                    }
                    else
                    {
                      if ((unint64_t)__p >> 60)
                        sub_22316E078();
                      v250 = (char *)v249 - (char *)v245;
                      if (v250 >> 3 > (unint64_t)__p)
                        v244 = v250 >> 3;
                      if ((unint64_t)v250 >= 0x7FFFFFFFFFFFFFF0)
                        v244 = 0xFFFFFFFFFFFFFFFLL;
                      if (v244 >> 60)
                        goto LABEL_432;
                      v251 = 16 * v244;
                      v252 = (char *)operator new(16 * v244);
                      v253 = &v252[16 * v247];
                      v254 = 16 * v248;
                      bzero(v253, v254);
                      v255 = v253;
                      if (v246 != v245)
                      {
                        do
                        {
                          *((_OWORD *)v255 - 1) = *((_OWORD *)v246 - 1);
                          v255 -= 16;
                          v246 -= 2;
                        }
                        while (v246 != v245);
                        v246 = *i1;
                      }
                      v256 = (std::string::size_type *)&v253[v254];
                      *i1 = (std::string::size_type *)v255;
                      i1[1] = (std::string::size_type *)&v253[v254];
                      i1[2] = (std::string::size_type *)&v252[v251];
                      if (v246)
                      {
                        operator delete(v246);
                        v256 = i1[1];
                      }
                    }
                    v245 = *i1;
                    v246 = v256;
                  }
                  if (v246 != v245)
                  {
                    v257 = v246;
                    do
                    {
                      v258 = *(_QWORD *)(a1 + 48);
                      sub_2245564B0(v258, (uint64_t)&__s);
                      if (LODWORD(__s.__r_.__value_.__l.__data_) != 3
                        && (LODWORD(__s.__r_.__value_.__l.__data_) != 2
                         || (__s.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0))
                      {
                        goto LABEL_419;
                      }
                      *v245 = __s.__r_.__value_.__l.__size_;
                      v259 = v319;
                      v319 = 0;
                      if (v259)
                      {
                        for (i2 = (char *)v259[4]; i2 != (char *)v259[6]; i2 -= 16)
                        {
                          v262 = (void (*)(uint64_t))*((_QWORD *)i2 - 2);
                          v261 = *((_QWORD *)i2 - 1);
                          v262(v261);
                        }
                        free(i2);
                        v263 = (_QWORD *)v259[3];
                        if (v263)
                        {
                          do
                          {
                            v264 = (_QWORD *)*v263;
                            free(v263);
                            v263 = v264;
                          }
                          while (v264);
                        }
                        free(v259);
                      }
                      sub_2245564B0(v258, (uint64_t)&__s);
                      if (LODWORD(__s.__r_.__value_.__l.__data_) != 3
                        && (LODWORD(__s.__r_.__value_.__l.__data_) != 2
                         || (__s.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0))
                      {
LABEL_419:
                        v271 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                        v271->__vftable = 0;
                        v272 = std::bad_cast::bad_cast(v271);
                        v272->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
                        __cxa_throw(v272, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
                      }
                      v245[1] = __s.__r_.__value_.__l.__size_;
                      v265 = v319;
                      v319 = 0;
                      if (v265)
                      {
                        for (i3 = (char *)v265[4]; i3 != (char *)v265[6]; i3 -= 16)
                        {
                          v268 = (void (*)(uint64_t))*((_QWORD *)i3 - 2);
                          v267 = *((_QWORD *)i3 - 1);
                          v268(v267);
                        }
                        free(i3);
                        v269 = (_QWORD *)v265[3];
                        if (v269)
                        {
                          do
                          {
                            v270 = (_QWORD *)*v269;
                            free(v269);
                            v269 = v270;
                          }
                          while (v270);
                        }
                        free(v265);
                      }
                      v245 += 2;
                    }
                    while (v245 != v257);
                  }
                }
              }
              else
              {
                v226 = *((_QWORD *)v43 + 22);
                if (0xAAAAAAAAAAAAAAABLL * ((v226 - (uint64_t)v223) >> 3) >= v225)
                {
                  v242 = 24 * ((24 * v225 - 24) / 0x18) + 24;
                  bzero(*((void **)v43 + 21), v242);
                  *((_QWORD *)v43 + 21) = (char *)v223 + v242;
                  v223 = (std::string::size_type **)((char *)v223 + v242);
                  i1 = (std::string::size_type **)*v213;
                  if (v223 != i1)
                    goto LABEL_377;
                }
                else
                {
                  if ((unint64_t)__dst > 0xAAAAAAAAAAAAAAALL)
                    sub_22316E078();
                  v227 = 0xAAAAAAAAAAAAAAABLL * ((v226 - (uint64_t)v222) >> 3);
                  if (2 * v227 > (unint64_t)__dst)
                    v221 = 2 * v227;
                  if (v227 >= 0x555555555555555)
                    v221 = 0xAAAAAAAAAAAAAAALL;
                  if (v221 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_432;
                  v228 = 24 * v221;
                  v229 = (char *)operator new(24 * v221);
                  v230 = &v229[8 * (v223 - (std::string::size_type **)v222)];
                  v231 = &v229[v228];
                  bzero(v230, 24 * ((24 * v225 - 24) / 0x18) + 24);
                  v232 = &v230[24 * ((24 * v225 - 24) / 0x18) + 24];
                  if (v223 == v222)
                  {
                    *((_QWORD *)v43 + 20) = v230;
                    *((_QWORD *)v43 + 21) = v232;
                    *((_QWORD *)v43 + 22) = v231;
                  }
                  else
                  {
                    do
                    {
                      v233 = *(_OWORD *)(v223 - 3);
                      v223 -= 3;
                      *(_OWORD *)(v230 - 24) = v233;
                      v230 -= 24;
                      *((_QWORD *)v230 + 2) = v223[2];
                      *v223 = 0;
                      v223[1] = 0;
                      v223[2] = 0;
                    }
                    while (v223 != v222);
                    v223 = (std::string::size_type **)*((_QWORD *)v43 + 20);
                    v234 = (std::string::size_type **)*((_QWORD *)v43 + 21);
                    *((_QWORD *)v43 + 20) = v230;
                    *((_QWORD *)v43 + 21) = v232;
                    *((_QWORD *)v43 + 22) = v231;
                    if (v234 != v223)
                    {
                      v235 = v234;
                      do
                      {
                        v237 = *(v235 - 3);
                        v235 -= 3;
                        v236 = v237;
                        if (v237)
                        {
                          *(v234 - 2) = v236;
                          operator delete(v236);
                        }
                        v234 = v235;
                      }
                      while (v235 != v223);
                    }
                  }
                  if (v223)
                    operator delete(v223);
                  v223 = (std::string::size_type **)*((_QWORD *)v43 + 21);
                  i1 = (std::string::size_type **)*v213;
                  if (v223 != i1)
                    goto LABEL_377;
                }
              }
            }
            else if (v43[184])
            {
              v216 = (char *)*v213;
              if (*v213)
              {
                v217 = (char *)*((_QWORD *)v43 + 21);
                v44 = *v213;
                if (v217 != v216)
                {
                  v218 = (char *)*((_QWORD *)v43 + 21);
                  do
                  {
                    v220 = (void *)*((_QWORD *)v218 - 3);
                    v218 -= 24;
                    v219 = v220;
                    if (v220)
                    {
                      *((_QWORD *)v217 - 2) = v219;
                      operator delete(v219);
                    }
                    v217 = v218;
                  }
                  while (v218 != v216);
                  v44 = *v213;
                }
                *((_QWORD *)v43 + 21) = v216;
                operator delete(v44);
              }
              v43[184] = 0;
            }
          }
        }
      }
LABEL_46:
      v43 += 192;
      if (v43 == v308)
        return;
    }
    if (!v313)
      goto LABEL_115;
LABEL_113:
    if (__p)
    {
      v311 = (char *)__p;
      operator delete(__p);
    }
    goto LABEL_115;
  }
}

void sub_22371841C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, char *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34)
{
  void *v34;
  uint64_t v35;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  char *v45;
  void *v46;

  if (*(char *)(v35 - 89) < 0)
    operator delete(*(void **)(v35 - 112));
  __cxa_guard_abort(&qword_2540CC198);
  __cxa_guard_abort(&qword_2540CC190);
  __cxa_free_exception(v34);
  if (!a18 || !__p)
    _Unwind_Resume(a1);
  v37 = a16;
  v38 = __p;
  if (a16 != __p)
  {
    do
    {
      v39 = *((_QWORD *)v37 - 3);
      if (v39)
      {
        v40 = *((_QWORD *)v37 - 2);
        v41 = (void *)*((_QWORD *)v37 - 3);
        if (v40 != v39)
        {
          v42 = *((_QWORD *)v37 - 2);
          do
          {
            v44 = *(void **)(v42 - 24);
            v42 -= 24;
            v43 = v44;
            if (v44)
            {
              *(_QWORD *)(v40 - 16) = v43;
              operator delete(v43);
            }
            v40 = v42;
          }
          while (v42 != v39);
          v41 = (void *)*((_QWORD *)v37 - 3);
        }
        *((_QWORD *)v37 - 2) = v39;
        operator delete(v41);
      }
      v45 = v37 - 48;
      v46 = (void *)*((_QWORD *)v37 - 6);
      if (v46)
      {
        *((_QWORD *)v37 - 5) = v46;
        operator delete(v46);
      }
      v37 -= 48;
    }
    while (v45 != __p);
    v38 = __p;
  }
  operator delete(v38);
  _Unwind_Resume(a1);
}

void sub_2237189C8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      sub_22316E078();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_223174E94();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void sub_223718B64(uint64_t *a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type, int a6, const char **a7, const char **a8)
{
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  const char *v17;
  size_t v18;
  size_t v19;
  _QWORD *p_dst;
  const char *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  size_t v29;
  size_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  const char *v55;
  const char *v56;
  const char **v57;
  uint64_t *v58;
  size_t v60;
  __int128 v63;
  __int128 v64;
  char *v65;
  _QWORD *v66;
  __int128 v67;
  _QWORD *__dst;
  __int128 v69;
  _BYTE v70[32];
  _BYTE v71[24];
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v60 = _os_log_pack_size();
    v14 = (std::__shared_weak_count_vtbl *)operator new(v60, (std::align_val_t)8uLL);
    v15 = (std::__shared_weak_count *)operator new();
    v15->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    v15->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v15->__shared_weak_owners_ = 0;
    v15[1].__vftable = v14;
    v57 = a7;
    v17 = *a7;
    v18 = strlen(v17);
    if (v18 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v19 = v18;
    v58 = a1;
    if (v18 >= 0x17)
    {
      v26 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v26 = v18 | 7;
      v27 = v26 + 1;
      p_dst = operator new(v26 + 1);
      *(_QWORD *)&v69 = v19;
      *((_QWORD *)&v69 + 1) = v27 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v69) = v18;
      p_dst = &__dst;
      if (!v18)
      {
LABEL_16:
        *((_BYTE *)p_dst + v19) = 0;
        v28 = *a8;
        v29 = strlen(*a8);
        if (v29 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v30 = v29;
        if (v29 >= 0x17)
        {
          v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v29 | 7) != 0x17)
            v32 = v29 | 7;
          v33 = v32 + 1;
          v31 = operator new(v32 + 1);
          *(_QWORD *)&v67 = v30;
          *((_QWORD *)&v67 + 1) = v33 | 0x8000000000000000;
          v66 = v31;
        }
        else
        {
          HIBYTE(v67) = v29;
          v31 = &v66;
          if (!v29)
          {
LABEL_24:
            *((_BYTE *)v31 + v30) = 0;
            *(_QWORD *)v70 = off_24EC20780;
            *(_QWORD *)&v70[8] = __dst;
            *(_QWORD *)&v70[16] = v69;
            *(_QWORD *)&v70[23] = *(_QWORD *)((char *)&v69 + 7);
            v70[31] = HIBYTE(v69);
            *(_QWORD *)v71 = v66;
            *(_QWORD *)&v71[8] = v67;
            *(_QWORD *)&v71[15] = *(_QWORD *)((char *)&v67 + 7);
            v71[23] = HIBYTE(v67);
            v34 = (char *)operator new(0x50uLL);
            v35 = (std::__shared_weak_count *)v34;
            *((_QWORD *)v34 + 1) = 0;
            v36 = (unint64_t *)(v34 + 8);
            *((_QWORD *)v34 + 2) = 0;
            *((_QWORD *)v34 + 3) = off_24EC20780;
            *(_QWORD *)v34 = &off_24EC20730;
            *((_OWORD *)v34 + 2) = *(_OWORD *)&v70[8];
            *((_QWORD *)v34 + 6) = *(_QWORD *)&v70[24];
            *(_OWORD *)(v34 + 56) = *(_OWORD *)v71;
            *((_QWORD *)v34 + 9) = *(_QWORD *)&v71[16];
            *(_QWORD *)&v63 = v14;
            *((_QWORD *)&v63 + 1) = v15;
            do
              v37 = __ldxr(p_shared_owners);
            while (__stxr(v37 + 1, p_shared_owners));
            *(_QWORD *)&v64 = v34 + 24;
            *((_QWORD *)&v64 + 1) = v34;
            do
              v38 = __ldxr(v36);
            while (__stxr(v38 + 1, v36));
            v65 = v34 + 24;
            do
              v39 = __ldaxr(v36);
            while (__stlxr(v39 - 1, v36));
            if (!v39)
            {
              (*(void (**)(char *))(*(_QWORD *)v34 + 16))(v34);
              std::__shared_weak_count::__release_weak(v35);
            }
            if (v15)
            {
              v40 = (unint64_t *)&v15->__shared_owners_;
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v15);
              }
            }
            if (v65[31] >= 0)
              v42 = v65 + 8;
            else
              v42 = (char *)*((_QWORD *)v65 + 1);
            if (v65[55] >= 0)
              v43 = v65 + 32;
            else
              v43 = (char *)*((_QWORD *)v65 + 4);
            v44 = _os_log_pack_fill();
            *(_DWORD *)v44 = 136315395;
            *(_QWORD *)(v44 + 4) = v42;
            *(_WORD *)(v44 + 12) = 2081;
            *(_QWORD *)(v44 + 14) = v43;
            v45 = operator new();
            v46 = *((unsigned __int8 *)a3 + 23);
            if ((v46 & 0x80u) == 0)
              v47 = a3;
            else
              v47 = (uint64_t *)*a3;
            if ((v46 & 0x80u) != 0)
              v46 = a3[1];
            *(_QWORD *)v45 = v14;
            *(_OWORD *)(v45 + 8) = v63;
            *(_OWORD *)(v45 + 24) = v64;
            *(_QWORD *)(v45 + 40) = v47;
            *(_QWORD *)(v45 + 48) = v46;
            *(_BYTE *)(v45 + 56) = type;
            *(_QWORD *)v70 = v45;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), v70);
            v48 = *(_QWORD *)v70;
            *(_QWORD *)v70 = 0;
            if (v48)
            {
              v49 = *(std::__shared_weak_count **)(v48 + 32);
              if (v49)
              {
                v50 = (unint64_t *)&v49->__shared_owners_;
                do
                  v51 = __ldaxr(v50);
                while (__stlxr(v51 - 1, v50));
                if (!v51)
                {
                  ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                  std::__shared_weak_count::__release_weak(v49);
                }
              }
              v52 = *(std::__shared_weak_count **)(v48 + 16);
              if (v52)
              {
                v53 = (unint64_t *)&v52->__shared_owners_;
                do
                  v54 = __ldaxr(v53);
                while (__stlxr(v54 - 1, v53));
                if (!v54)
                {
                  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                  std::__shared_weak_count::__release_weak(v52);
                }
              }
              MEMORY[0x227684CE8](v48, 0x10F0C40B62ED6C6);
            }
            if (a6)
            {
              v55 = *v57;
              v56 = *a8;
              *(_DWORD *)v70 = 136315395;
              *(_QWORD *)&v70[4] = v55;
              *(_WORD *)&v70[12] = 2081;
              *(_QWORD *)&v70[14] = v56;
              *v58 = _os_log_send_and_compose_impl();
            }
            else
            {
              *v58 = 0;
            }
            return;
          }
        }
        memcpy(v31, v28, v30);
        goto LABEL_24;
      }
    }
    memcpy(p_dst, v17, v19);
    goto LABEL_16;
  }
  os_log_type_enabled(oslog, type);
  if (a6)
  {
    v21 = *a7;
    v22 = *a8;
    *(_DWORD *)v70 = 136315395;
    *(_QWORD *)&v70[4] = v21;
    *(_WORD *)&v70[12] = 2081;
    *(_QWORD *)&v70[14] = v22;
    *a1 = _os_log_send_and_compose_impl();
  }
  else
  {
    v23 = *a7;
    v24 = *a8;
    *(_DWORD *)v70 = 136315395;
    *(_QWORD *)&v70[4] = v23;
    *(_WORD *)&v70[12] = 2081;
    *(_QWORD *)&v70[14] = v24;
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
    *a1 = 0;
  }
}

void sub_2237192B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;

  sub_22319A054((uint64_t *)(v26 - 160));
  sub_22319A054(&a26);
  sub_223199DE8((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_2237192DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237192F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  sub_2231A87A4(v26 - 160);
  sub_223199DE8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_22371930C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_223719330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 161) < 0)
  {
    operator delete(*(void **)(v26 - 184));
    sub_223199DE8((uint64_t)&a26);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_223719368(uint64_t *a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type, int a6, const char **a7, const char **a8)
{
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  const char *v17;
  size_t v18;
  size_t v19;
  _QWORD *p_dst;
  const char *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  const char *v29;
  size_t v30;
  size_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  char *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  const char *v60;
  const char *v61;
  size_t v64;
  _BYTE v65[24];
  __int128 v66;
  char *v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  char *v70;
  std::__shared_weak_count *v71;
  void **v72;
  __int128 v73;
  _QWORD *__dst;
  __int128 v75;
  _BYTE v76[32];
  __int128 v77;
  unint64_t v78;
  void *__p[7];

  __p[4] = *(void **)MEMORY[0x24BDAC8D0];
  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v64 = _os_log_pack_size();
    v15 = (std::__shared_weak_count_vtbl *)operator new(v64, (std::align_val_t)8uLL);
    v16 = (std::__shared_weak_count *)operator new();
    v16->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v16->__shared_owners_ = 0;
    v16->__shared_weak_owners_ = 0;
    v16[1].__vftable = v15;
    *(_QWORD *)&v68 = v15;
    *((_QWORD *)&v68 + 1) = v15;
    v69 = v16;
    v17 = *a7;
    v18 = strlen(*a7);
    if (v18 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v19 = v18;
    if (v18 >= 0x17)
    {
      v26 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v26 = v18 | 7;
      v27 = v26 + 1;
      p_dst = operator new(v26 + 1);
      *(_QWORD *)&v75 = v19;
      *((_QWORD *)&v75 + 1) = v27 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v75) = v18;
      p_dst = &__dst;
      if (!v18)
      {
LABEL_16:
        *((_BYTE *)p_dst + v19) = 0;
        v28 = (char *)operator new(0x78uLL);
        strcpy(v28, "Encountered persistence data with future version. Please clear persistence data after version downgrade. Message:");
        v29 = *a8;
        v30 = strlen(*a8);
        if (v30 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v31 = v30;
        if (v30 >= 0x17)
        {
          v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v30 | 7) != 0x17)
            v33 = v30 | 7;
          v34 = v33 + 1;
          v32 = (void **)operator new(v33 + 1);
          *(_QWORD *)&v73 = v31;
          *((_QWORD *)&v73 + 1) = v34 | 0x8000000000000000;
          v72 = v32;
        }
        else
        {
          HIBYTE(v73) = v30;
          v32 = (void **)&v72;
          if (!v30)
          {
LABEL_24:
            *((_BYTE *)v32 + v31) = 0;
            *(_QWORD *)&v76[8] = __dst;
            *(_QWORD *)&v76[16] = v75;
            *(_QWORD *)&v76[23] = *(_QWORD *)((char *)&v75 + 7);
            __p[0] = v72;
            __p[1] = (void *)v73;
            *(void **)((char *)&__p[1] + 7) = *(void **)((char *)&v73 + 7);
            *(_QWORD *)v76 = off_24EC206F8;
            v76[31] = HIBYTE(v75);
            *(_QWORD *)&v77 = v28;
            *((_QWORD *)&v77 + 1) = 113;
            v78 = 0x8000000000000078;
            HIBYTE(__p[2]) = HIBYTE(v73);
            v35 = (char *)operator new(0x68uLL);
            *((_QWORD *)v35 + 1) = 0;
            *((_QWORD *)v35 + 2) = 0;
            *(_QWORD *)v35 = &off_24EC206A8;
            *((_QWORD *)v35 + 3) = off_24EC206F8;
            *((_OWORD *)v35 + 2) = *(_OWORD *)&v76[8];
            *((_QWORD *)v35 + 6) = *(_QWORD *)&v76[24];
            memset(&v76[8], 0, 24);
            *(_OWORD *)(v35 + 56) = v77;
            *((_QWORD *)v35 + 9) = v78;
            v78 = 0;
            v77 = 0uLL;
            v36 = *(_OWORD *)__p;
            *((void **)v35 + 12) = __p[2];
            *((_OWORD *)v35 + 5) = v36;
            memset(__p, 0, 24);
            v70 = v35 + 24;
            v71 = (std::__shared_weak_count *)v35;
            if (SHIBYTE(v78) < 0)
            {
              operator delete((void *)v77);
              if ((v76[31] & 0x80000000) == 0)
              {
LABEL_26:
                *(_OWORD *)v65 = v68;
                v38 = v69;
                v37 = v70;
                *(_QWORD *)&v65[16] = v69;
                if (!v69)
                  goto LABEL_32;
                goto LABEL_30;
              }
            }
            else if ((v76[31] & 0x80000000) == 0)
            {
              goto LABEL_26;
            }
            operator delete(*(void **)&v76[8]);
            *(_OWORD *)v65 = v68;
            v38 = v69;
            v37 = v70;
            *(_QWORD *)&v65[16] = v69;
            if (!v69)
            {
LABEL_32:
              *(_QWORD *)&v66 = v37;
              *((_QWORD *)&v66 + 1) = v71;
              if (v71)
              {
                p_shared_owners = (unint64_t *)&v71->__shared_owners_;
                do
                  v42 = __ldxr(p_shared_owners);
                while (__stxr(v42 + 1, p_shared_owners));
                v67 = v37;
                do
                  v43 = __ldaxr(p_shared_owners);
                while (__stlxr(v43 - 1, p_shared_owners));
                if (!v43)
                {
                  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                  std::__shared_weak_count::__release_weak(v71);
                }
              }
              else
              {
                v67 = v37;
              }
              if (v69)
              {
                v44 = (unint64_t *)&v69->__shared_owners_;
                do
                  v45 = __ldaxr(v44);
                while (__stlxr(v45 - 1, v44));
                if (!v45)
                {
                  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                  std::__shared_weak_count::__release_weak(v69);
                }
              }
              if (v67[31] >= 0)
                v46 = v67 + 8;
              else
                v46 = (char *)*((_QWORD *)v67 + 1);
              if (v67[55] >= 0)
                v47 = v67 + 32;
              else
                v47 = (char *)*((_QWORD *)v67 + 4);
              if (v67[79] >= 0)
                v48 = v67 + 56;
              else
                v48 = (char *)*((_QWORD *)v67 + 7);
              v49 = _os_log_pack_fill();
              *(_DWORD *)v49 = 136315651;
              *(_QWORD *)(v49 + 4) = v46;
              *(_WORD *)(v49 + 12) = 2081;
              *(_QWORD *)(v49 + 14) = v47;
              *(_WORD *)(v49 + 22) = 2081;
              *(_QWORD *)(v49 + 24) = v48;
              v50 = operator new();
              v51 = *((unsigned __int8 *)a3 + 23);
              if ((v51 & 0x80u) == 0)
                v52 = a3;
              else
                v52 = (uint64_t *)*a3;
              if ((v51 & 0x80u) != 0)
                v51 = a3[1];
              *(_QWORD *)v50 = *(_QWORD *)v65;
              *(_OWORD *)(v50 + 8) = *(_OWORD *)&v65[8];
              *(_OWORD *)(v50 + 24) = v66;
              *(_QWORD *)(v50 + 40) = v52;
              *(_QWORD *)(v50 + 48) = v51;
              *(_BYTE *)(v50 + 56) = type;
              *(_QWORD *)v76 = v50;
              (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), v76);
              v53 = *(_QWORD *)v76;
              *(_QWORD *)v76 = 0;
              if (v53)
              {
                v54 = *(std::__shared_weak_count **)(v53 + 32);
                if (v54)
                {
                  v55 = (unint64_t *)&v54->__shared_owners_;
                  do
                    v56 = __ldaxr(v55);
                  while (__stlxr(v56 - 1, v55));
                  if (!v56)
                  {
                    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                    std::__shared_weak_count::__release_weak(v54);
                  }
                }
                v57 = *(std::__shared_weak_count **)(v53 + 16);
                if (v57)
                {
                  v58 = (unint64_t *)&v57->__shared_owners_;
                  do
                    v59 = __ldaxr(v58);
                  while (__stlxr(v59 - 1, v58));
                  if (!v59)
                  {
                    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                    std::__shared_weak_count::__release_weak(v57);
                  }
                }
                MEMORY[0x227684CE8](v53, 0x10F0C40B62ED6C6);
              }
              if (a6)
              {
                v60 = *a7;
                v61 = *a8;
                *(_DWORD *)v76 = 136315651;
                *(_QWORD *)&v76[4] = v60;
                *(_WORD *)&v76[12] = 2081;
                *(_QWORD *)&v76[14] = "Encountered persistence data with future version. Please clear persistence data af"
                                      "ter version downgrade. Message:";
                *(_WORD *)&v76[22] = 2081;
                *(_QWORD *)&v76[24] = v61;
                *a1 = _os_log_send_and_compose_impl();
              }
              else
              {
                *a1 = 0;
              }
              return;
            }
LABEL_30:
            v39 = (unint64_t *)&v38->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            goto LABEL_32;
          }
        }
        memcpy(v32, v29, v31);
        goto LABEL_24;
      }
    }
    memcpy(p_dst, v17, v19);
    goto LABEL_16;
  }
  os_log_type_enabled(oslog, type);
  if (a6)
  {
    v21 = *a7;
    v22 = *a8;
    *(_DWORD *)v76 = 136315651;
    *(_QWORD *)&v76[4] = v21;
    *(_WORD *)&v76[12] = 2081;
    *(_QWORD *)&v76[14] = "Encountered persistence data with future version. Please clear persistence data after version "
                          "downgrade. Message:";
    *(_WORD *)&v76[22] = 2081;
    *(_QWORD *)&v76[24] = v22;
    *a1 = _os_log_send_and_compose_impl();
  }
  else
  {
    v23 = *a7;
    v24 = *a8;
    *(_DWORD *)v76 = 136315651;
    *(_QWORD *)&v76[4] = v23;
    *(_WORD *)&v76[12] = 2081;
    *(_QWORD *)&v76[14] = "Encountered persistence data with future version. Please clear persistence data after version "
                          "downgrade. Message:";
    *(_WORD *)&v76[22] = 2081;
    *(_QWORD *)&v76[24] = v24;
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
    *a1 = 0;
  }
}

void sub_223719C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  sub_22319A054(&a33);
  sub_22319A054(&a21);
  sub_223199DE8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_223719C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223719C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_2231A7EB4((uint64_t)&a33);
  sub_223199DE8((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_223719C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
  {
    operator delete(__p);
    sub_223199DE8((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_223719CC4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_22371A238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_22371A25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22371A270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

double sub_22371A2C8(uint64_t a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  int32x4_t v6;
  double result;
  std::runtime_error *exception;

  v3 = 0;
  *(_OWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = *a3;
  *(_QWORD *)(a1 + 24) = *a3;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  do
  {
    v4 = *(unsigned __int8 *)(a1 + v3);
    if (*(_BYTE *)(a1 + v3))
      v5 = 1;
    else
      v5 = v3 == 15;
    ++v3;
  }
  while (!v5);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "UUID cannot be null");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(a1 + 80) = v6;
  *(int32x4_t *)(a1 + 96) = v6;
  *(int32x4_t *)(a1 + 112) = v6;
  *(_DWORD *)(a1 + 128) = 2143289344;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 48) = &off_24EC207B8;
  *(_QWORD *)(a1 + 56) = &off_24EC20868;
  result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = 0;
  return result;
}

void sub_22371A390(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22371A3A4(uint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4)
{
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  std::runtime_error *exception;

  v6 = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *a4;
  *(_QWORD *)(a1 + 24) = *a4;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  do
  {
    v7 = *(unsigned __int8 *)(a1 + v6);
    if (*(_BYTE *)(a1 + v6))
      v8 = 1;
    else
      v8 = v6 == 15;
    ++v6;
  }
  while (!v8);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "UUID cannot be null");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v9 = sub_2231D0224(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 48) = &off_24EC20828;
  *(_QWORD *)(a1 + 56) = &off_24EC20868;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v9 + 24);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(v9 + 32);
  v11 = *(_OWORD *)(v9 + 48);
  v10 = *(_OWORD *)(v9 + 64);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(v9 + 80);
  *(_OWORD *)(a1 + 96) = v11;
  *(_OWORD *)(a1 + 112) = v10;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(v9 + 88);
  *(_QWORD *)(a1 + 48) = &off_24EC207B8;
  v12 = *a3;
  v13 = a3[1];
  v14 = a3[3];
  *(_OWORD *)(a1 + 176) = a3[2];
  *(_OWORD *)(a1 + 192) = v14;
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = 0;
  return a1;
}

void sub_22371A4A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_22371A4BC(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v4;
  unsigned __int8 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  size_t v11;
  const char *v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  const char *v15;
  size_t v16;
  const char *v17;
  _OWORD *v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  const char *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  size_t v33;
  size_t v34;
  _BYTE *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  size_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  char *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  void **v103;
  void *v104;
  uint64_t v105;
  _QWORD *v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  void **v110;
  void **v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119[3];
  int v120;
  const char *v121;
  int v122;
  const char *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  uint64_t v126;
  __int128 v127;
  std::__shared_weak_count *v128;
  char *v129;
  std::__shared_weak_count *v130;
  _QWORD *v131;
  __int128 v132;
  _BYTE __dst[24];
  char __src[37];
  char __s[37];
  uint64_t v136;
  _OWORD v137[3];
  unint64_t v138;
  char v139;
  _BYTE v140[24];
  __int128 v141;
  char *v142;
  uint64_t v143;

  v4 = a1;
  v143 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 24) = *a2;
  v5 = atomic_load((unsigned __int8 *)&qword_2540CC438);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC438))
  {
    sub_22455F53C(v119);
    sub_223174DE4(&v136, "cv3d.recon.kfplanes");
    sub_2232300E0(v119, (uint64_t)&v136, &qword_2540CC430);
    if (SHIBYTE(v137[0]) < 0)
      operator delete((void *)v136);
    __cxa_guard_release(&qword_2540CC438);
  }
  v126 = qword_2540CC430;
  if (**(int **)(qword_2540CC430 + 56) > 3)
    goto LABEL_133;
  v6 = *(unsigned __int8 *)(qword_2540CC430 + 72);
  v7 = sub_22322F254(qword_2540CC430, "OSLogSurrogateAppender", 1, 0);
  v8 = v7;
  if (!v6 && v7 == 0)
    goto LABEL_133;
  v119[0] = &v126;
  v119[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
  v119[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
  v120 = 3;
  v121 = "unknown file";
  v122 = 95;
  v124 = 0;
  v125 = 0;
  v123 = "unknown function";
  sub_2245664AC((unsigned __int8 *)(*(_QWORD *)(v4 + 208) + 424 * a3), __s);
  sub_2245664AC((unsigned __int8 *)v4, __src);
  v10 = *v119[0];
  if (*(char *)(*v119[0] + 39) < 0)
  {
    v12 = *(const char **)(v10 + 16);
    v11 = *(_QWORD *)(v10 + 24);
    v117 = *v119[0] + 16;
    v118 = v4;
    v14 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v14 & 1) != 0)
      goto LABEL_11;
  }
  else
  {
    v11 = *(unsigned __int8 *)(*v119[0] + 39);
    v12 = (const char *)(*v119[0] + 16);
    v117 = (uint64_t)v12;
    v118 = v4;
    v13 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v13 & 1) != 0)
      goto LABEL_11;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&v136);
    sub_223199C58("com.apple.cv3d", (unint64_t)&v136, &xmmword_255788F40);
    if (LOBYTE(v137[1]) && SHIBYTE(v137[0]) < 0)
      operator delete((void *)v136);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_11:
  if (byte_255788F57 >= 0)
    v15 = (const char *)&xmmword_255788F40;
  else
    v15 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v16 = byte_255788F57;
  else
    v16 = *((_QWORD *)&xmmword_255788F40 + 1);
  v17 = v12;
  v136 = (uint64_t)os_log_create(v15, v12);
  v18 = v137;
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v16 >= 0x17)
  {
    v19 = a3;
    v20 = v8;
    v21 = v10;
    v22 = v6;
    v23 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v23 = v16 | 7;
    v24 = v23 + 1;
    v18 = operator new(v23 + 1);
    *((_QWORD *)&v137[0] + 1) = v16;
    *(_QWORD *)&v137[1] = v24 | 0x8000000000000000;
    *(_QWORD *)&v137[0] = v18;
    v6 = v22;
    v10 = v21;
    v8 = v20;
    a3 = v19;
    goto LABEL_24;
  }
  BYTE7(v137[1]) = v16;
  if (v16)
LABEL_24:
    memmove(v18, v15, v16);
  *((_BYTE *)v18 + v16) = 0;
  BYTE8(v137[1]) = 1;
  v25 = &v137[2];
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v26 = v17;
  if (v11 >= 0x17)
  {
    v28 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v28 = v11 | 7;
    v29 = v28 + 1;
    v4 = v118;
    v25 = operator new(v28 + 1);
    *((_QWORD *)&v137[2] + 1) = v11;
    v138 = v29 | 0x8000000000000000;
    *(_QWORD *)&v137[2] = v25;
  }
  else
  {
    HIBYTE(v138) = v11;
    v4 = v118;
    if (!v11)
    {
      LOBYTE(v137[2]) = 0;
      v139 = 1;
      v27 = v136;
      if ((SHIBYTE(v138) & 0x80000000) == 0)
        goto LABEL_29;
      goto LABEL_35;
    }
  }
  memmove(v25, v26, v11);
  *((_BYTE *)v25 + v11) = 0;
  v139 = 1;
  v27 = v136;
  if ((SHIBYTE(v138) & 0x80000000) == 0)
  {
LABEL_29:
    if (!BYTE8(v137[1]))
      goto LABEL_38;
    goto LABEL_36;
  }
LABEL_35:
  operator delete(*(void **)&v137[2]);
  if (!BYTE8(v137[1]))
    goto LABEL_38;
LABEL_36:
  if (SBYTE7(v137[1]) < 0)
    operator delete(*(void **)&v137[0]);
LABEL_38:
  if (v136)
    os_release((void *)v136);
  if (v8 && *(_QWORD *)(v8 + 24))
  {
    v30 = _os_log_pack_size();
    v31 = (std::__shared_weak_count_vtbl *)operator new(v30, (std::align_val_t)8uLL);
    v32 = (std::__shared_weak_count *)operator new();
    v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v32->__shared_owners_ = 0;
    v32->__shared_weak_owners_ = 0;
    v32[1].__vftable = v31;
    *(_QWORD *)&v127 = v31;
    *((_QWORD *)&v127 + 1) = v31;
    v129 = 0;
    v130 = 0;
    v128 = v32;
    v33 = strlen(__s);
    if (v33 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v34 = v33;
    if (v33 >= 0x17)
    {
      v37 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v33 | 7) != 0x17)
        v37 = v33 | 7;
      v38 = v37 + 1;
      v35 = operator new(v37 + 1);
      *(_QWORD *)&__dst[8] = v34;
      *(_QWORD *)&__dst[16] = v38 | 0x8000000000000000;
      *(_QWORD *)__dst = v35;
    }
    else
    {
      __dst[23] = v33;
      v35 = __dst;
      if (!v33)
      {
LABEL_52:
        v35[v34] = 0;
        v39 = strlen(__src);
        if (v39 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v40 = v39;
        if (v39 >= 0x17)
        {
          v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v39 | 7) != 0x17)
            v42 = v39 | 7;
          v43 = v42 + 1;
          v41 = operator new(v42 + 1);
          *(_QWORD *)&v132 = v40;
          *((_QWORD *)&v132 + 1) = v43 | 0x8000000000000000;
          v131 = v41;
        }
        else
        {
          HIBYTE(v132) = v39;
          v41 = &v131;
          if (!v39)
            goto LABEL_60;
        }
        memcpy(v41, __src, v40);
LABEL_60:
        *((_BYTE *)v41 + v40) = 0;
        v137[0] = *(_OWORD *)__dst;
        *(_QWORD *)((char *)v137 + 15) = *(_QWORD *)&__dst[15];
        *((_QWORD *)&v137[1] + 1) = v131;
        *(_QWORD *)&v137[2] = v132;
        *(_QWORD *)((char *)&v137[2] + 7) = *(_QWORD *)((char *)&v132 + 7);
        v136 = (uint64_t)off_24EC580F8;
        BYTE7(v137[1]) = __dst[23];
        HIBYTE(v137[2]) = HIBYTE(v132);
        v44 = (char *)operator new(0x50uLL);
        *((_QWORD *)v44 + 3) = off_24EC580F8;
        *((_QWORD *)v44 + 1) = 0;
        *((_QWORD *)v44 + 2) = 0;
        *(_QWORD *)v44 = &off_24EC580A8;
        *((_OWORD *)v44 + 2) = v137[0];
        *((_QWORD *)v44 + 6) = *(_QWORD *)&v137[1];
        memset(v137, 0, 24);
        *(_OWORD *)(v44 + 56) = *(_OWORD *)((char *)&v137[1] + 8);
        *((_QWORD *)v44 + 9) = *((_QWORD *)&v137[2] + 1);
        memset((char *)&v137[1] + 8, 0, 24);
        v45 = v130;
        v129 = v44 + 24;
        v130 = (std::__shared_weak_count *)v44;
        if (v45)
        {
          p_shared_owners = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(p_shared_owners);
          while (__stlxr(v47 - 1, p_shared_owners));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        if (SHIBYTE(v137[2]) < 0)
        {
          operator delete(*((void **)&v137[1] + 1));
          if ((SBYTE7(v137[1]) & 0x80000000) == 0)
          {
LABEL_67:
            *(_OWORD *)v140 = v127;
            v49 = v128;
            v48 = v129;
            *(_QWORD *)&v140[16] = v128;
            if (!v128)
              goto LABEL_73;
            goto LABEL_71;
          }
        }
        else if ((SBYTE7(v137[1]) & 0x80000000) == 0)
        {
          goto LABEL_67;
        }
        operator delete(*(void **)&v137[0]);
        *(_OWORD *)v140 = v127;
        v49 = v128;
        v48 = v129;
        *(_QWORD *)&v140[16] = v128;
        if (!v128)
        {
LABEL_73:
          v52 = v130;
          *(_QWORD *)&v141 = v48;
          *((_QWORD *)&v141 + 1) = v130;
          if (v130)
          {
            v53 = (unint64_t *)&v130->__shared_owners_;
            do
              v54 = __ldxr(v53);
            while (__stxr(v54 + 1, v53));
            v142 = v48;
            do
              v55 = __ldaxr(v53);
            while (__stlxr(v55 - 1, v53));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
          else
          {
            v142 = v48;
          }
          v56 = v128;
          if (v128)
          {
            v57 = (unint64_t *)&v128->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          v59 = *(_QWORD *)v140;
          if (v142[31] >= 0)
            v60 = v142 + 8;
          else
            v60 = (char *)*((_QWORD *)v142 + 1);
          if (v142[55] >= 0)
            v61 = v142 + 32;
          else
            v61 = (char *)*((_QWORD *)v142 + 4);
          v62 = _os_log_pack_fill();
          *(_DWORD *)v62 = 68158722;
          *(_DWORD *)(v62 + 4) = 13;
          *(_WORD *)(v62 + 8) = 2080;
          *(_QWORD *)(v62 + 10) = v60;
          *(_WORD *)(v62 + 18) = 1024;
          *(_DWORD *)(v62 + 20) = a3;
          *(_WORD *)(v62 + 24) = 1040;
          *(_DWORD *)(v62 + 26) = 13;
          *(_WORD *)(v62 + 30) = 2080;
          *(_QWORD *)(v62 + 32) = v61;
          v63 = (char *)operator new();
          v64 = *(unsigned __int8 *)(v10 + 39);
          v65 = v117;
          if ((v64 & 0x80u) != 0)
          {
            v65 = *(_QWORD *)(v10 + 16);
            v64 = *(_QWORD *)(v10 + 24);
          }
          *(_QWORD *)v63 = v59;
          *(_OWORD *)(v63 + 8) = *(_OWORD *)&v140[8];
          *(_QWORD *)&v140[8] = 0;
          *(_QWORD *)&v140[16] = 0;
          *(_OWORD *)(v63 + 24) = v141;
          v141 = 0uLL;
          *((_QWORD *)v63 + 5) = v65;
          *((_QWORD *)v63 + 6) = v64;
          v63[56] = 1;
          *(_QWORD *)&v127 = 0;
          v136 = (uint64_t)v63;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), &v136);
          v66 = v136;
          v136 = 0;
          if (v66)
          {
            v67 = *(std::__shared_weak_count **)(v66 + 32);
            if (v67)
            {
              v68 = (unint64_t *)&v67->__shared_owners_;
              do
                v69 = __ldaxr(v68);
              while (__stlxr(v69 - 1, v68));
              if (!v69)
              {
                ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                std::__shared_weak_count::__release_weak(v67);
              }
            }
            v70 = *(std::__shared_weak_count **)(v66 + 16);
            if (v70)
            {
              v71 = (unint64_t *)&v70->__shared_owners_;
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 - 1, v71));
              if (!v72)
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
            }
            MEMORY[0x227684CE8](v66, 0x10F0C40B62ED6C6);
            v73 = v127;
            *(_QWORD *)&v127 = 0;
            if (v73)
            {
              v74 = *(std::__shared_weak_count **)(v73 + 32);
              if (v74)
              {
                v75 = (unint64_t *)&v74->__shared_owners_;
                do
                  v76 = __ldaxr(v75);
                while (__stlxr(v76 - 1, v75));
                if (!v76)
                {
                  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                  std::__shared_weak_count::__release_weak(v74);
                }
              }
              v77 = *(std::__shared_weak_count **)(v73 + 16);
              if (v77)
              {
                v78 = (unint64_t *)&v77->__shared_owners_;
                do
                  v79 = __ldaxr(v78);
                while (__stlxr(v79 - 1, v78));
                if (!v79)
                {
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                }
              }
              MEMORY[0x227684CE8](v73, 0x10F0C40B62ED6C6);
            }
          }
          v80 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
          if (*((_QWORD *)&v141 + 1))
          {
            v81 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
          v83 = *(std::__shared_weak_count **)&v140[16];
          if (*(_QWORD *)&v140[16])
          {
            v84 = (unint64_t *)(*(_QWORD *)&v140[16] + 8);
            do
              v85 = __ldaxr(v84);
            while (__stlxr(v85 - 1, v84));
            if (!v85)
            {
              ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
              std::__shared_weak_count::__release_weak(v83);
            }
          }
          goto LABEL_127;
        }
LABEL_71:
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
        goto LABEL_73;
      }
    }
    memcpy(v35, __s, v34);
    goto LABEL_52;
  }
  os_log_type_enabled(v27, OS_LOG_TYPE_INFO);
  v136 = 0xD04100502;
  LOWORD(v137[0]) = 2080;
  *(_QWORD *)((char *)v137 + 2) = __s;
  WORD5(v137[0]) = 1024;
  HIDWORD(v137[0]) = a3;
  LOWORD(v137[1]) = 1040;
  *(_DWORD *)((char *)&v137[1] + 2) = 13;
  WORD3(v137[1]) = 2080;
  *((_QWORD *)&v137[1] + 1) = __src;
  v36 = (void *)_os_log_send_and_compose_impl();
  if (v36)
    free(v36);
LABEL_127:
  if (v6)
  {
    sub_2245664AC((unsigned __int8 *)(*(_QWORD *)(v4 + 208) + 424 * a3), &v136);
    sub_2245664AC((unsigned __int8 *)v4, v140);
    sub_22322C138((uint64_t)v119, "Removing KeyframePlane %.13s (ID=%u) from KeyframePlaneSegmentation %.13s", (const char *)&v136, a3, v140);
    sub_223182C08((uint64_t)v119);
  }
  sub_223182C08((uint64_t)v119);
  v86 = v125;
  if (v125)
  {
    v87 = (unint64_t *)&v125->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
      v89 = *(_QWORD *)(v4 + 208);
      v90 = *(_QWORD *)(v4 + 216);
      v91 = v89 + 424 * a3;
      v92 = v91 + 424;
      if (v91 + 424 == v90)
        goto LABEL_160;
      goto LABEL_134;
    }
  }
LABEL_133:
  v89 = *(_QWORD *)(v4 + 208);
  v90 = *(_QWORD *)(v4 + 216);
  v91 = v89 + 424 * a3;
  v92 = v91 + 424;
  if (v91 + 424 == v90)
    goto LABEL_160;
LABEL_134:
  v93 = 424 * a3;
  v94 = -v89;
  do
  {
    v95 = v89 + v93;
    *(_OWORD *)v95 = *(_OWORD *)(v89 + v93 + 424);
    v96 = *(_OWORD *)(v89 + v93 + 528);
    *(_OWORD *)(v95 + 120) = *(_OWORD *)(v89 + v93 + 544);
    *(_OWORD *)(v95 + 104) = v96;
    v97 = *(_OWORD *)(v89 + v93 + 496);
    *(_OWORD *)(v95 + 88) = *(_OWORD *)(v89 + v93 + 512);
    *(_OWORD *)(v95 + 72) = v97;
    v98 = *(_OWORD *)(v89 + v93 + 592);
    *(_OWORD *)(v95 + 184) = *(_OWORD *)(v89 + v93 + 608);
    *(_OWORD *)(v95 + 168) = v98;
    v99 = *(_OWORD *)(v89 + v93 + 560);
    *(_OWORD *)(v95 + 152) = *(_OWORD *)(v89 + v93 + 576);
    *(_OWORD *)(v95 + 136) = v99;
    v100 = *(_OWORD *)(v89 + v93 + 656);
    *(_OWORD *)(v95 + 248) = *(_OWORD *)(v89 + v93 + 672);
    *(_OWORD *)(v95 + 232) = v100;
    v101 = *(_OWORD *)(v89 + v93 + 624);
    *(_OWORD *)(v95 + 216) = *(_OWORD *)(v89 + v93 + 640);
    *(_OWORD *)(v95 + 200) = v101;
    v102 = *(_OWORD *)(v89 + v93 + 480);
    *(_OWORD *)(v95 + 40) = *(_OWORD *)(v89 + v93 + 464);
    *(_QWORD *)(v95 + 16) = *(_QWORD *)(v89 + v93 + 440);
    *(_DWORD *)(v95 + 24) = *(_DWORD *)(v89 + v93 + 448);
    *(_DWORD *)(v95 + 36) = *(_DWORD *)(v89 + v93 + 460);
    *(_QWORD *)(v95 + 28) = *(_QWORD *)(v89 + v93 + 452);
    *(_OWORD *)(v95 + 56) = v102;
    v103 = (void **)(v89 + v93 + 264);
    v104 = *v103;
    if (*v103)
    {
      *(_QWORD *)(v95 + 272) = v104;
      operator delete(v104);
      *v103 = 0;
      *(_QWORD *)(v89 + v93 + 272) = 0;
      *(_QWORD *)(v89 + v93 + 280) = 0;
    }
    *v103 = *(void **)(v95 + 688);
    v105 = *(_QWORD *)(v95 + 704);
    *(_QWORD *)(v95 + 272) = *(_QWORD *)(v95 + 696);
    *(_QWORD *)(v95 + 280) = v105;
    *(_QWORD *)(v95 + 688) = 0;
    *(_QWORD *)(v95 + 696) = 0;
    *(_QWORD *)(v95 + 704) = 0;
    *(_DWORD *)(v95 + 288) = *(_DWORD *)(v95 + 712);
    v106 = (_QWORD *)(v95 + 296);
    v107 = *(void **)(v95 + 296);
    if (v107)
    {
      *(_QWORD *)(v89 + v93 + 304) = v107;
      operator delete(v107);
      *v106 = 0;
      *(_QWORD *)(v95 + 304) = 0;
      *(_QWORD *)(v95 + 312) = 0;
    }
    *v106 = *(_QWORD *)(v95 + 720);
    v108 = v89 + v93;
    *(_OWORD *)(v108 + 304) = *(_OWORD *)(v89 + v93 + 728);
    *(_QWORD *)(v95 + 720) = 0;
    *(_QWORD *)(v95 + 728) = 0;
    *(_QWORD *)(v95 + 736) = 0;
    *(_QWORD *)(v108 + 320) = *(_QWORD *)(v89 + v93 + 744);
    *(_DWORD *)(v108 + 328) = *(_DWORD *)(v89 + v93 + 752);
    *(_DWORD *)(v108 + 332) = *(_DWORD *)(v89 + v93 + 756);
    if (*(unsigned __int8 *)(v89 + v93 + 344) == *(unsigned __int8 *)(v89 + v93 + 768))
    {
      if (*(_BYTE *)(v89 + v93 + 344))
        *(_QWORD *)(v108 + 336) = *(_QWORD *)(v108 + 760);
    }
    else if (*(_BYTE *)(v89 + v93 + 344))
    {
      *(_BYTE *)(v108 + 344) = 0;
    }
    else
    {
      *(_QWORD *)(v108 + 336) = *(_QWORD *)(v108 + 760);
      *(_BYTE *)(v108 + 344) = 1;
    }
    v109 = v89 + v93;
    *(_DWORD *)(v89 + v93 + 352) = *(_DWORD *)(v89 + v93 + 776);
    v110 = (void **)(v89 + v93 + 360);
    v111 = (void **)(v89 + v93 + 784);
    if (*(unsigned __int8 *)(v89 + v93 + 384) == *(unsigned __int8 *)(v89 + v93 + 808))
    {
      if (*(_BYTE *)(v89 + v93 + 384))
      {
        v112 = *v110;
        if (*v110)
        {
          *(_QWORD *)(v89 + v93 + 368) = v112;
          operator delete(v112);
          *v110 = 0;
          *(_QWORD *)(v89 + v93 + 368) = 0;
          *(_QWORD *)(v89 + v93 + 376) = 0;
        }
        *v110 = *v111;
        v113 = v89 + v93;
        v114 = *(_QWORD *)(v89 + v93 + 800);
        *(_QWORD *)(v113 + 368) = *(_QWORD *)(v89 + v93 + 792);
        *(_QWORD *)(v113 + 376) = v114;
        *v111 = 0;
        *(_QWORD *)(v89 + v93 + 792) = 0;
        *(_QWORD *)(v89 + v93 + 800) = 0;
      }
    }
    else if (*(_BYTE *)(v89 + v93 + 384))
    {
      v115 = *v110;
      if (*v110)
      {
        *(_QWORD *)(v89 + v93 + 368) = v115;
        operator delete(v115);
      }
      *(_BYTE *)(v109 + 384) = 0;
    }
    else
    {
      v116 = v89 + v93;
      *(_QWORD *)(v116 + 368) = 0;
      *(_QWORD *)(v116 + 376) = 0;
      *(_OWORD *)v110 = *(_OWORD *)v111;
      *(_QWORD *)(v116 + 376) = *(_QWORD *)(v89 + v93 + 800);
      *v111 = 0;
      *(_QWORD *)(v89 + v93 + 792) = 0;
      *(_QWORD *)(v89 + v93 + 800) = 0;
      *(_BYTE *)(v109 + 384) = 1;
    }
    sub_2236ADA84((char **)(v89 + v93 + 392), v89 + v93 + 816);
    v89 += 424;
    v94 -= 424;
  }
  while (v89 + v93 + 424 != v90);
  v92 = *(_QWORD *)(v4 + 216);
  v91 = 424 * a3 - v94;
LABEL_160:
  while (v92 != v91)
  {
    v92 -= 424;
    sub_2236EA79C(v92);
  }
  *(_QWORD *)(v4 + 216) = v91;
}

void sub_22371B280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  if (*(_BYTE *)(v7 - 216))
  {
    if (*(char *)(v7 - 217) < 0)
      operator delete(*(void **)(v7 - 240));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22371B2C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 217) < 0)
  {
    operator delete(*(void **)(v1 - 240));
    __cxa_guard_abort(&qword_2540CC438);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC438);
  _Unwind_Resume(a1);
}

void sub_22371B318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  sub_22319A054((uint64_t *)(v7 - 240));
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8(v7 - 160);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22371B34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  sub_223720DC8(v39 - 240);
  sub_223199DE8((uint64_t)&a25);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_22371B3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22371B3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  void *v9;
  va_list va;

  va_start(va, a7);
  if (*(_BYTE *)(v7 - 208) && *(char *)(v7 - 209) < 0)
    operator delete(*(void **)(v7 - 232));
  v9 = *(void **)(v7 - 240);
  if (v9)
    os_release(v9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22371B430(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

float32x2_t *sub_22371B448(float32x2_t *result, float32x2_t *a2, unsigned __int8 **a3, double a4, int32x4_t a5, int32x4_t a6)
{
  float32x4_t v6;
  float32x2_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x2_t v10;
  int32x4_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  float32x2_t v14;
  int32x4_t v15;
  int32x4_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x2_t v25;
  float32x2_t v26;
  uint64_t v27;
  float32x2_t *v28;
  float32x4_t v29;
  float32x2_t v30;
  float v31;
  float v32;
  float32x4_t v33;
  float32x2_t v34;
  int32x4_t v35;
  float v36;
  float v37;
  int8x16_t v38;
  float32x2_t v39;
  float32x4_t v40;
  float32x4_t v41;

  v12 = *a3;
  v13 = a3[1];
  if (*a3 != v13)
  {
    result[3] = *a2;
    *(float32x2_t *)a5.i8 = result[18];
    *(float32x2_t *)a6.i8 = result[20];
    v14 = (float32x2_t)vzip1_s32(*(int32x2_t *)a5.i8, *(int32x2_t *)a6.i8);
    v15 = a5;
    v15.i32[2] = result[19].i32[0];
    v16 = a6;
    v16.i32[2] = result[21].i32[0];
    v17 = result[22];
    a6.i32[0] = result[23].i32[0];
    v18 = (float32x2_t)vtrn2q_s32(v15, v16).u64[0];
    v19 = (float32x2_t)vzip2q_s32(v15, v16).u64[0];
    v20 = (int8x16_t)vdupq_lane_s32((int32x2_t)v18, 1);
    v21 = (int8x16_t)vdupq_lane_s32((int32x2_t)v18, 0);
    *(float32x2_t *)v6.f32 = result[24];
    v6.i32[2] = result[25].i32[0];
    v22 = (int8x16_t)vnegq_f32(v6);
    *(float32x2_t *)v24.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v14, *(float *)v22.i32), v18, *(float32x2_t *)v6.f32, 1), v19, v6, 2);
    v23 = (float32x2_t)vdup_lane_s32((int32x2_t)v17, 1);
    *(float32x2_t *)&v24.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(v17, *(float32x2_t *)v22.i8), v23, *(float32x2_t *)v6.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), *(float32x2_t *)a6.i8);
    v25 = (float32x2_t)vextq_s8(v21, v20, 0xCuLL).u64[0];
    while (1)
    {
      v26 = result[26];
      if (*(_BYTE *)(*(_QWORD *)&v26 + 424 * *v12 + 344))
        break;
LABEL_3:
      if (++v12 == v13)
        return result;
    }
    v27 = *(_QWORD *)&v26 + 424 * *v12;
    v28 = (float32x2_t *)(v27 + 16);
    v7.i32[0] = *(_DWORD *)(v27 + 36);
    v9.i64[0] = *(_QWORD *)(v27 + 28);
    v29 = (float32x4_t)v9;
    v29.i32[2] = v7.i32[0];
    v30 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1);
    v31 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8), v30, *(float32x2_t *)v9.i8, 1), v7, v7).f32[0];
    if (v31 == 1.0)
      goto LABEL_14;
    v32 = v31 + -1.0;
    if (v31 < 1.0)
      v32 = 1.0 - v31;
    if (v32 <= 0.000001)
    {
LABEL_14:
      *(float32x2_t *)v8.f32 = *v28;
      v9.i32[0] = *(_DWORD *)(v27 + 24);
      v7.f32[0] = -vmla_f32(vmla_lane_f32(vmul_f32(*v28, *(float32x2_t *)v29.f32), v30, *v28, 1), v7, *(float32x2_t *)v9.i8).f32[0];
    }
    else
    {
      v10.f32[0] = 1.0 / sqrtf(v31);
      v33 = vmulq_n_f32(v29, v10.f32[0]);
      *(float32x2_t *)v8.f32 = *v28;
      v8.i32[2] = *(_DWORD *)(v27 + 24);
      v34 = vmul_lane_f32(v10, *(float32x2_t *)v9.i8, 1);
      *(float32x2_t *)v11.i8 = vmul_f32(v7, v10);
      v35.i64[0] = v33.i64[0];
      v35.u64[1] = (unint64_t)v34;
      v29 = (float32x4_t)vuzp1q_s32(v35, v11);
      *(int32x2_t *)v9.i8 = vdup_lane_s32(*(int32x2_t *)v33.f32, 1);
      v7 = (float32x2_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u64[0];
      v36 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32), v34, *(float32x2_t *)v33.f32, 1), v7, *(float32x2_t *)v11.i8).f32[0];
      if (v36 == 1.0)
        goto LABEL_18;
      v37 = v36 + -1.0;
      if (v36 < 1.0)
        v37 = 1.0 - v36;
      if (v37 <= 0.000001)
      {
LABEL_18:
        v7.f32[0] = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v33.f32), *(float32x2_t *)v9.i8, *(float32x2_t *)v8.f32, 1), v7, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL)).f32[0];
LABEL_16:
        v8.f32[0] = (float)(*(float *)(v27 + 336) * result[10].f32[0]) + result[11].f32[0];
        *(float *)v9.i32 = (float)(*(float *)(v27 + 340) * result[10].f32[1]) + result[11].f32[1];
        *(float32x2_t *)v40.f32 = vadd_f32(v19, vmla_n_f32(vmul_n_f32(v14, v8.f32[0]), v25, *(float *)v9.i32));
        *(float32x2_t *)&v40.u32[2] = vadd_f32(*(float32x2_t *)a6.i8, vmla_f32(vmul_f32(v17, *(float32x2_t *)v8.f32), *(float32x2_t *)v9.i8, v23));
        v8 = vsubq_f32(vaddq_f32(v24, v40), v24);
        v9 = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL);
        v10 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v8.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.f32, 1), *(float32x2_t *)v29.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL), *(float32x2_t *)v9.i8);
        if (fabsf(v10.f32[0]) >= 0.00000011921)
        {
          v7.f32[0] = -v7.f32[0];
          v11 = (int32x4_t)vmlsq_lane_f32(v24, v33, v7, 0);
          v41 = vmlaq_n_f32(v24, v8, (float)-vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v11.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.f32, 1), *(float32x2_t *)v11.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), *(float32x2_t *)v9.i8).f32[0]/ v10.f32[0]);
          *(_DWORD *)(v27 + 24) = v41.i32[2];
          *v28 = *(float32x2_t *)v41.f32;
        }
        goto LABEL_3;
      }
      v29.f32[0] = sqrtf(v36);
      v38 = (int8x16_t)vmulq_n_f32(v33, 1.0 / v29.f32[0]);
      v9.i64[0] = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
      v39 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v38.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.i8, 1), *(float32x2_t *)v8.f32, 1);
      v7 = (float32x2_t)vextq_s8(v38, v38, 8uLL).u64[0];
      v7.f32[0] = -vmla_f32(v39, v7, *(float32x2_t *)v9.i8).f32[0];
      v29 = vdivq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 0));
    }
    v33 = v29;
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_22371B6CC(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned __int8 *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t result;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  __int128 v24;
  uint64_t v25;

  *(_QWORD *)(a1 + 24) = *a2;
  v7 = *(_QWORD *)(a1 + 208);
  v8 = v7 + 424 * a3 + 264;
  if (*(_QWORD *)(v7 + 424 * a3 + 272) == *(_QWORD *)v8)
    return 0;
  v9 = *(__int16 *)(v7 + 424 * a3 + 328);
  if (v9 < 0 || (v10 = *(__int16 *)(v7 + 424 * a3 + 330), v10 < 0))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/RLRegion.hpp", 180, (uint64_t)"(bounding_box_.min_corner.e() >= T{0}).all()", 44, (uint64_t)"Cannot create arr::IndexRange2 from region with negative row/column indices", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    LOWORD(v9) = *(_WORD *)(v8 + 64);
    LOWORD(v10) = *(_WORD *)(v8 + 66);
  }
  if (*(_WORD *)(v8 + 68) - (_WORD)v9 == 0xFFFF || (unsigned __int16)~(*(_WORD *)(v8 + 70) - v10) == 0)
    return 0;
  v13 = ((__int16)v9 + (__int16)(*(_WORD *)(v8 + 68) - v9)) | ((unint64_t)((__int16)v10 + (__int16)(*(_WORD *)(v8 + 70) - v10)) << 32);
  result = 0;
  if ((__int16)v9 <= ((__int16)v9 + (__int16)(*(_WORD *)(v8 + 68) - v9)))
  {
    v14 = (__int16)v9 + (__int16)(*(_WORD *)(v8 + 68) - v9) + 1 - (__int16)v9;
    if (v14)
    {
      result = 0;
      v15 = HIDWORD(v13);
      if ((__int16)v10 <= v15)
      {
        v16 = v15 + 1 - (__int16)v10;
        if (v16)
        {
          if (v14 >= v16)
            v17 = v16;
          else
            v17 = v14;
          if (v14 <= v16)
            v18 = v16;
          else
            v18 = v14;
          if ((float)((float)v17 / (float)v18) >= 0.0625
            && ((v19 = *(_QWORD *)(v7 + 424 * a3 + 320), (float)((float)v19 / (float)(v16 * v14)) >= 0.2)
              ? (v20 = v19 >= (unint64_t)(float)((float)((float)*(unsigned int *)(a1 + 136) * 0.0078125)
                                                      * (float)*(unsigned int *)(a1 + 140)))
              : (v20 = 0),
                v20))
          {
            v21 = v7 + 424 * a3;
            if (*(unsigned __int8 *)(v21 + 384) | *a4)
            {
              v22 = v21 + 360;
              sub_223ECE884((unsigned __int16 **)v8, (int8x16_t **)&v24);
              if (*(_BYTE *)(v22 + 24))
              {
                v23 = *(void **)v22;
                if (*(_QWORD *)v22)
                {
                  *(_QWORD *)(v22 + 8) = v23;
                  operator delete(v23);
                }
                *(_OWORD *)v22 = v24;
                *(_QWORD *)(v22 + 16) = v25;
              }
              else
              {
                *(_OWORD *)v22 = v24;
                *(_QWORD *)(v22 + 16) = v25;
                *(_BYTE *)(v22 + 24) = 1;
              }
            }
            if (*(_BYTE *)(v7 + 424 * a3 + 416) || *((_DWORD *)a4 + 1))
              sub_223705EA8((uint64_t)a4, a1, a3);
            return 1;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

void sub_22371B950(float32x2_t *a1, const void **a2, uint64_t a3, uint64_t a4)
{
  float32x2_t *v5;
  unsigned __int8 v6;
  float32x2_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int16 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  __int16 *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  unsigned __int16 v32;
  unsigned int v33;
  unint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  int32x2_t v51;
  _QWORD *v52;
  float32x2_t v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  const void **v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  int v69;
  size_t v70;
  unint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  const void *v75;
  int v76;
  const std::string::value_type *v77;
  std::string::size_type v78;
  std::string *v79;
  __int128 v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  std::mutex *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  void **v96;
  void *v97;
  void *v98;
  int v99;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  std::mutex *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  size_t v109;
  unint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  const void *v114;
  int v115;
  const std::string::value_type *v116;
  std::string::size_type v117;
  std::string *v118;
  __int128 v119;
  uint64_t v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t *v123;
  float32x2_t v124;
  float32x2_t v125;
  uint64_t v126;
  unint64_t v127;
  float32x2_t v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x2_t v131;
  float32x2_t v132;
  float32x2_t v133;
  __int128 v134;
  float32x2_t v135;
  float32x2_t v136;
  float32x2_t i;
  uint64_t v138;
  float32x4_t v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  float32x2_t *v161;
  int v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t v167;
  _BYTE *v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  int v175;
  uint64_t v176;
  int v177;
  float32x2_t *v178;
  _BYTE *v179;
  float32x4_t v180;
  _BYTE *v181;
  float *v182;
  int v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  uint64_t v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::string::size_type v199;
  std::string::size_type size;
  void *v201;
  void *v202;
  void *v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  uint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  std::mutex *v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  size_t v239;
  unint64_t v240;
  _BYTE *v241;
  uint64_t v242;
  uint64_t v243;
  const void *v244;
  int v245;
  const std::string::value_type *v246;
  std::string::size_type v247;
  std::string *v248;
  __int128 v249;
  uint64_t v250;
  _BYTE *v251;
  uint64_t v252;
  uint64_t *v253;
  float32x2_t v254;
  float32x2_t v255;
  const __int16 *v256;
  const __int16 *v257;
  uint64_t v258;
  uint64_t *v259;
  uint64_t *v260;
  const __int16 *v261;
  unint64_t v262;
  uint64_t v263;
  double *v264;
  int32x4_t v265;
  float64x2_t v266;
  int32x4_t v267;
  int32x4_t v268;
  double *v269;
  float64x2_t v270;
  double *v271;
  double *v272;
  float32x4_t v273;
  double v274;
  double v275;
  double v276;
  double v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  void *v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  unint64_t *v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  std::mutex *v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  size_t v316;
  unint64_t v317;
  _BYTE *v318;
  uint64_t v319;
  uint64_t v320;
  const void *v321;
  int v322;
  const std::string::value_type *v323;
  std::string::size_type v324;
  std::string *v325;
  __int128 v326;
  uint64_t v327;
  _BYTE *v328;
  uint64_t v329;
  uint64_t *v330;
  float32x2_t v331;
  float32x2_t j;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  __int128 v343;
  __int128 v344;
  uint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  unint64_t v349;
  uint64_t v350;
  float32x4_t v351;
  double v352;
  double v353;
  double v354;
  double v355;
  unsigned __int8 v356;
  __int16 v357;
  unint64_t *v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t *v361;
  unint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  uint64_t *v369;
  uint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  uint64_t v374;
  void *v375;
  unint64_t *v376;
  unint64_t v377;
  unint64_t *v378;
  unint64_t v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  unint64_t *v389;
  unint64_t v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  float32x2_t *v400;
  const void **v403;
  float32x2_t v405;
  unsigned __int8 v406;
  float32x2_t v407;
  signed __int16 v408;
  float v409;
  float v410;
  uint64_t v411;
  int v412;
  float v413;
  uint64_t v414;
  uint64_t *v415;
  unsigned __int16 *v416;
  float32x2_t v417;
  uint64_t *v418;
  uint64_t *v419;
  void *v420[2];
  __int128 v421;
  int v422;
  uint64_t (**v423)();
  uint64_t v424;
  std::__shared_weak_count *v425;
  __int128 v426;
  _BYTE v427[36];
  uint64_t v428;
  int v429;
  uint64_t v430;
  int v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  int v435;
  __int16 v436;
  uint64_t (**v437)();
  __int16 v438;
  std::__shared_weak_count *v439;
  __int16 v440;
  __int128 v441;
  std::__shared_weak_count *v442;
  _BYTE __dst[32];
  int v444;
  int v445;
  int v446;
  unsigned int v447;
  unsigned int v448;
  int v449[4];
  char v450;
  char v451;
  std::string v452;
  void *v453[2];
  std::__shared_weak_count *v454;
  uint64_t v455;
  uint64_t v456;
  std::string v457;
  __int128 v458;
  _QWORD v459[2];
  _BYTE __p[40];
  __int128 v461;
  __int128 v462;
  __int16 v463;
  unsigned int v464;
  unsigned int v465;
  char v466;
  char v467;
  _OWORD __src[64];
  uint64_t v469;
  int16x8x2_t v470;
  float64x2x2_t v471;
  float64x2x2_t v472;
  float64x2x2_t v473;

  v469 = *MEMORY[0x24BDAC8D0];
  v5 = a1 + 17;
  v407 = a1[26];
  v405 = a1[27];
  *(float32x2_t *)__dst = a1[17];
  LOWORD(__src[0]) = 128;
  BYTE2(__src[0]) = 0;
  v437 = &off_24EC21B18;
  sub_2231C5C38(__dst, &v438);
  sub_22370325C((uint64_t)&v437, (__int16 *)__src);
  v423 = &off_24EC232F0;
  sub_223416D28((uint64_t)&v437, &v424);
  v403 = a2;
  LOWORD(__src[0]) = 128;
  BYTE2(__src[0]) = 0;
  sub_2237039AC((uint64_t)&v423, (__int16 *)__src);
  v400 = v5;
  if (*(_QWORD *)&v407 != *(_QWORD *)&v405)
  {
    v6 = 0;
    v7 = (float32x2_t)vdup_n_s32(0x3E924745u);
    do
    {
      *(_QWORD *)__p = &off_24EC232F0;
      v8 = v424;
      v9 = v425;
      if (v425)
      {
        p_shared_owners = (unint64_t *)&v425->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v12 = *(_WORD *)&v427[32];
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
        *(_OWORD *)&__p[24] = v426;
        v461 = *(_OWORD *)v427;
        v462 = *(_OWORD *)&v427[16];
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        *(_QWORD *)&__p[8] = v8;
        *(_QWORD *)&__p[16] = v9;
        v463 = v12;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      else
      {
        *(_QWORD *)&__p[8] = v424;
        *(_QWORD *)&__p[16] = 0;
        *(_OWORD *)&__p[24] = v426;
        v461 = *(_OWORD *)v427;
        v462 = *(_OWORD *)&v427[16];
        v463 = *(_WORD *)&v427[32];
      }
      v17 = atomic_load((unsigned __int8 *)&qword_255795018);
      if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_255795018))
      {
        bzero(__src, 0x3FCuLL);
        v50 = 0;
        v51 = (int32x2_t)0x100000000;
        do
        {
          v52 = &__src[v50];
          v53 = vmul_f32(vcvt_f32_s32(v51), v7);
          v409 = v53.f32[0];
          v417 = vmul_f32(vcvt_f32_s32(vadd_s32(v51, (int32x2_t)0x200000002)), v7);
          v413 = fmodf(v53.f32[1], 1.0);
          *(float *)&v54 = fmodf(v409, 1.0);
          *((float *)&v54 + 1) = v413;
          v414 = v54;
          v410 = fmodf(v417.f32[1], 1.0);
          *(float *)&v55 = fmodf(v417.f32[0], 1.0);
          *((float *)&v55 + 1) = v410;
          *v52 = v414;
          v52[1] = v55;
          v51 = vadd_s32(v51, (int32x2_t)0x400000004);
          ++v50;
        }
        while (v50 != 63);
        *(_QWORD *)&__src[63] = 0x3E906F003F7F1400;
        DWORD2(__src[63]) = 1058102016;
        memcpy(dword_255794C18, __src, 0x3FCuLL);
        __cxa_guard_release(&qword_255795018);
      }
      v406 = v6 + 1;
      if (((v6 + 1) & 0x100) != 0)
      {
        v18 = 128;
        v19 = 128;
        v20 = 128;
        v21 = *(__int16 **)(*(_QWORD *)&v407 + 264);
        v416 = *(unsigned __int16 **)(*(_QWORD *)&v407 + 272);
        if (v21 != (__int16 *)v416)
          goto LABEL_24;
      }
      else
      {
        v18 = vcvts_n_s32_f32(*(float *)&dword_255794C18[v6], 8uLL);
        v19 = vcvts_n_s32_f32(*(float *)&dword_255794C18[(unsigned __int16)(2 * v6+ 85- 255* ((unsigned __int16)((1029 * (2 * v6 + 85)) >> 16) >> 2))], 8uLL);
        v20 = vcvts_n_s32_f32(*(float *)&dword_255794C18[(unsigned __int16)(3 * v6+ 170- 255* ((unsigned __int16)((2057 * (3 * v6 + 170)) >> 16) >> 3))], 8uLL);
        v21 = *(__int16 **)(*(_QWORD *)&v407 + 264);
        v416 = *(unsigned __int16 **)(*(_QWORD *)&v407 + 272);
        if (v21 != (__int16 *)v416)
        {
LABEL_24:
          v22 = (v19 << 8) | (v20 << 16) | v18;
          v412 = SWORD2(v462);
          v408 = v462 - 1;
          do
          {
            if ((*v21 & 0x80000000) == 0 && v412 > (unsigned __int16)*v21)
            {
              v23 = v21[1] & ~(v21[1] >> 31);
              v24 = v21[2] >= v408 ? v408 : v21[2];
              if (v23 <= v24)
              {
                v25 = HIDWORD(*(_QWORD *)((char *)&v461 + 4));
                v26 = *(_QWORD *)&__p[24] + HIDWORD(v462) * (unsigned __int16)*v21;
                if (*(_QWORD *)&__p[24])
                {
                  v27 = (__int16)(v24 + 1);
                  v28 = (__int16)(v23 + 1);
                  if (v27 <= v28)
                    v29 = v23 + 1;
                  else
                    v29 = v24 + 1;
                  v30 = (unsigned __int16)(v29 + ~(_WORD)v23);
                  if (!v30)
                    goto LABEL_584;
                  if (v27 <= v28)
                    LOWORD(v27) = v23 + 1;
                  v31 = v27 - 1;
                  v32 = v27 - 1 - v23;
                  v33 = *(uint64_t *)((char *)&v461 + 4) >= 0 ? DWORD2(v461) : -DWORD2(v461);
                  v34 = v33 * (unint64_t)v32;
                  if (v23 > v31)
                    goto LABEL_584;
                  if (v34 > ((*(uint64_t *)((char *)&v461 + 4) >> 63) ^ ~((unsigned __int16)(v21[1] & ~(v21[1] >> 15)) * DWORD2(v461))))
                    goto LABEL_584;
                  if ((v34 & 0xFFFFFFFF00000000) != 0)
                    goto LABEL_584;
                  v35 = 0;
                  v36 = v30 + 1;
                  v37 = (v30 + 1) & 0x1FFFE;
                  do
                  {
                    v38 = v26 + (v25 * (__int16)(v23 + v35));
                    v39 = v26 + (v25 * (__int16)(v23 + v35 + 1));
                    *(_BYTE *)(v38 + 2) = BYTE2(v22);
                    *(_WORD *)v38 = v22;
                    *(_BYTE *)(v39 + 2) = BYTE2(v22);
                    *(_WORD *)v39 = v22;
                    v35 += 2;
                  }
                  while (v37 != v35);
                  LOWORD(v23) = v23 + v37;
                  if (v36 != v37)
                  {
LABEL_584:
                    do
                    {
                      v40 = v26 + (v25 * (__int16)v23);
                      *(_BYTE *)(v40 + 2) = BYTE2(v22);
                      *(_WORD *)v40 = v22;
                      v23 = (__int16)(v23 + 1);
                    }
                    while (v23 <= (__int16)v24);
                  }
                }
                else
                {
                  do
                  {
                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2245AAA31, 0, (void (*)(void **))sub_22457406C);
                    v41 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (byte_255795670)
                      _ZF = byte_255795678 == 0;
                    else
                      _ZF = 0;
                    if (!_ZF)
                    {
                      v43 = qword_255795648;
                      v44 = qword_255795650;
                      while (v43 != v44)
                      {
                        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v43)(*(_QWORD *)(v43 + 8), "ptr != nullptr || size == 0", 27, &unk_2245AAA31, 0);
                        v43 += 16;
                      }
                    }
                    v45 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670)
                      abort();
                    qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, &unk_2245AAA31, 0);
                    v46 = v26 + (v25 * (__int16)v23);
                    *(_BYTE *)(v46 + 2) = BYTE2(v22);
                    *(_WORD *)v46 = v22;
                    v23 = (__int16)(v23 + 1);
                  }
                  while (v23 <= (__int16)v24);
                }
              }
            }
            v21 += 4;
          }
          while (v21 != (__int16 *)v416);
        }
      }
      v47 = *(std::__shared_weak_count **)&__p[16];
      if (*(_QWORD *)&__p[16])
      {
        v48 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v6 = v406;
      *(_QWORD *)&v407 += 424;
    }
    while (*(_QWORD *)&v407 != *(_QWORD *)&v405);
  }
  v56 = v425;
  v57 = v403;
  if (v425)
  {
    v58 = (unint64_t *)&v425->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
      if (*(_BYTE *)(a4 + 80))
        goto LABEL_80;
LABEL_99:
      BYTE4(v426) = 0;
      v424 = 0;
      v425 = 0;
      v423 = &off_24EC21B18;
      LOBYTE(v426) = 0;
      *((_QWORD *)&v426 + 1) = 0;
      *(_QWORD *)v427 = 3;
      *(_DWORD *)&v427[8] = 0;
      *(_QWORD *)&v427[12] = 1;
      *(_QWORD *)&v427[28] = 0;
      *(_QWORD *)&v427[20] = 0;
      v429 = 0;
      v428 = 0;
      LODWORD(__src[0]) = 1;
      *(_QWORD *)((char *)__src + 4) = 0;
      v430 = 3;
      v432 = 1;
      v434 = 0;
      v433 = 0;
      v431 = 0;
      v435 = 0;
      sub_22449BF00(&v424, (uint64_t)&v438);
      v436 = v440;
      goto LABEL_100;
    }
  }
  if (!*(_BYTE *)(a4 + 80))
    goto LABEL_99;
LABEL_80:
  if (!*(_DWORD *)(a4 + 56) || !*(_DWORD *)(a4 + 60))
    goto LABEL_99;
  *(_QWORD *)__p = &off_24EC57DE8;
  sub_223704620((uint64_t)&v437, (uint64_t *)&__p[8]);
  if (!*(_BYTE *)(a4 + 80))
    sub_22324A974();
  sub_223CC60BC(a4, (uint64_t)__src);
  *(_QWORD *)__dst = &off_24EC57DE8;
  sub_223704620((uint64_t)__src, (uint64_t *)&__dst[8]);
  sub_224002AA4((uint64_t)__p, (uint64_t)__dst, (uint64_t)&v423, 0.5);
  v60 = *(std::__shared_weak_count **)&__dst[16];
  if (*(_QWORD *)&__dst[16])
  {
    v61 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = *(std::__shared_weak_count **)&__src[1];
  if (*(_QWORD *)&__src[1])
  {
    v64 = (unint64_t *)(*(_QWORD *)&__src[1] + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = *(std::__shared_weak_count **)&__p[16];
  if (*(_QWORD *)&__p[16])
  {
    v67 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
LABEL_100:
  v69 = *((char *)v403 + 23);
  if (v69 >= 0)
    v70 = *((unsigned __int8 *)v403 + 23);
  else
    v70 = (size_t)v403[1];
  v71 = v70 + 9;
  if (v70 + 9 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v71 >= 0x17)
  {
    v73 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v71 | 7) != 0x17)
      v73 = v71 | 7;
    v74 = v73 + 1;
    v72 = operator new(v73 + 1);
    *(_QWORD *)&__dst[8] = v70 + 9;
    *(_QWORD *)&__dst[16] = v74 | 0x8000000000000000;
    *(_QWORD *)__dst = v72;
  }
  else
  {
    memset(__dst, 0, 24);
    v72 = __dst;
    __dst[23] = v70 + 9;
    if (!v70)
      goto LABEL_114;
  }
  if (v69 >= 0)
    v75 = v403;
  else
    v75 = *v403;
  memmove(v72, v75, v70);
LABEL_114:
  strcpy(&v72[v70], ".keyframe");
  v76 = *(char *)(a3 + 23);
  if (v76 >= 0)
    v77 = (const std::string::value_type *)a3;
  else
    v77 = *(const std::string::value_type **)a3;
  if (v76 >= 0)
    v78 = *(unsigned __int8 *)(a3 + 23);
  else
    v78 = *(_QWORD *)(a3 + 8);
  v79 = std::string::append((std::string *)__dst, v77, v78);
  v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v79->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v80;
  v79->__r_.__value_.__l.__size_ = 0;
  v79->__r_.__value_.__r.__words[2] = 0;
  v79->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)&__src[0] = "cv3d.recon.";
  *((_QWORD *)&__src[0] + 1) = 11;
  v81 = __p[23];
  v82 = __p;
  if (__p[23] < 0)
  {
    v82 = *(_BYTE **)__p;
    v81 = *(_QWORD *)&__p[8];
  }
  *(_QWORD *)&__src[1] = v82;
  *((_QWORD *)&__src[1] + 1) = v81;
  sub_2231A9820((uint64_t)__src, (uint64_t)&__src[2], 0, 0, (std::string *)v420);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_124;
LABEL_170:
    operator delete(*(void **)__dst);
    goto LABEL_124;
  }
  if ((__dst[23] & 0x80000000) != 0)
    goto LABEL_170;
LABEL_124:
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v83 = sub_2241471F8();
    v84 = v83[2];
    if (!v84)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v84 = v83[2];
    }
    v85 = *(_QWORD *)(v84 + 64);
    v86 = (std::mutex *)(v85 + 32);
    std::mutex::lock((std::mutex *)(v85 + 32));
    v88 = *(_QWORD *)(v85 + 96);
    v87 = *(_QWORD *)(v85 + 104);
    std::mutex::unlock(v86);
    if (v88 != v87)
    {
      sub_2241471F8();
      v89 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v89 + 24))(v89))
      {
        memset(__src, 0, 32);
        LODWORD(__src[2]) = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v89 + 24))(v89))
        {
          v453[0] = (void *)(uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v453[1] = (void *)2;
          v90 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v89 + 24))(v89))
          {
            v91 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 56))(v89);
            *(_QWORD *)__p = 0x736C6562616CLL;
            *(_WORD *)&__p[23] = 262;
            sub_223704840((uint64_t)&v423, (__int128 *)__p, (__int128 *)v453, __dst);
            sub_2231AA5A4((uint64_t)v90, v91, (uint64_t)__dst);
            v92 = *(std::__shared_weak_count **)&__dst[16];
            if (*(_QWORD *)&__dst[16])
            {
              v93 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 - 1, v93));
              if (!v94)
              {
                ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                std::__shared_weak_count::__release_weak(v92);
              }
            }
            if (__p[24] && (__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
        }
        kdebug_trace();
      }
    }
  }
  memset(__src, 0, 32);
  LODWORD(__src[2]) = 728325624;
  kdebug_trace();
  v95 = BYTE7(v421);
  if (SBYTE7(v421) < 0)
    v95 = (unint64_t)v420[1];
  if (v95 >= 0x11)
  {
    v96 = v420;
    if (SBYTE7(v421) < 0)
      v96 = (void **)v420[0];
    v97 = *v96;
    v98 = v96[1];
    v99 = *((unsigned __int8 *)v96 + 16);
    if (v97 == (void *)0x6365722E64337663 && v98 == (void *)0x73746174532E6E6FLL && v99 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if (SBYTE7(v421) < 0)
    operator delete(v420[0]);
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_338;
  v102 = sub_2241471F8();
  v103 = v102[2];
  if (!v103)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_574;
    }
    v103 = v102[2];
  }
  v104 = *(_QWORD *)(v103 + 64);
  v105 = (std::mutex *)(v104 + 32);
  std::mutex::lock((std::mutex *)(v104 + 32));
  v107 = *(_QWORD *)(v104 + 96);
  v106 = *(_QWORD *)(v104 + 104);
  std::mutex::unlock(v105);
  if (v107 == v106)
    goto LABEL_338;
  v108 = *((char *)v403 + 23);
  if (v108 >= 0)
    v109 = *((unsigned __int8 *)v403 + 23);
  else
    v109 = (size_t)v403[1];
  v110 = v109 + 9;
  if (v109 + 9 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v110 >= 0x17)
  {
    v112 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v110 | 7) != 0x17)
      v112 = v110 | 7;
    v113 = v112 + 1;
    v111 = operator new(v112 + 1);
    *(_QWORD *)&__dst[8] = v109 + 9;
    *(_QWORD *)&__dst[16] = v113 | 0x8000000000000000;
    *(_QWORD *)__dst = v111;
  }
  else
  {
    memset(__dst, 0, 24);
    v111 = __dst;
    __dst[23] = v109 + 9;
    if (!v109)
      goto LABEL_178;
  }
  if (v108 >= 0)
    v114 = v403;
  else
    v114 = *v403;
  memmove(v111, v114, v109);
LABEL_178:
  strcpy(&v111[v109], ".keyframe");
  v115 = *(char *)(a3 + 23);
  if (v115 >= 0)
    v116 = (const std::string::value_type *)a3;
  else
    v116 = *(const std::string::value_type **)a3;
  if (v115 >= 0)
    v117 = *(unsigned __int8 *)(a3 + 23);
  else
    v117 = *(_QWORD *)(a3 + 8);
  v118 = std::string::append((std::string *)__dst, v116, v117);
  v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v118->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v119;
  v118->__r_.__value_.__l.__size_ = 0;
  v118->__r_.__value_.__r.__words[2] = 0;
  v118->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)&__src[0] = "cv3d.recon.";
  *((_QWORD *)&__src[0] + 1) = 11;
  v120 = __p[23];
  v121 = __p;
  if (__p[23] < 0)
  {
    v121 = *(_BYTE **)__p;
    v120 = *(_QWORD *)&__p[8];
  }
  *(_QWORD *)&__src[1] = v121;
  *((_QWORD *)&__src[1] + 1) = v120;
  sub_2231A9820((uint64_t)__src, (uint64_t)&__src[2], 0, 0, &v457);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_188;
LABEL_197:
    operator delete(*(void **)__dst);
    goto LABEL_188;
  }
  if ((__dst[23] & 0x80000000) != 0)
    goto LABEL_197;
LABEL_188:
  sub_2241471F8();
  v122 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v122 + 24))(v122))
  {
    *(_OWORD *)v420 = 0u;
    v421 = 0u;
    v422 = 728325616;
    kdebug_trace();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v122 + 24))(v122))
    {
      *(_QWORD *)&v458 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
      *((_QWORD *)&v458 + 1) = 2;
      v123 = sub_2241471F8();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v122 + 24))(v122))
      {
        v124 = a1[26];
        v125 = a1[27];
        memset(__src, 0, 24);
        v126 = *(_QWORD *)&v125 - *(_QWORD *)&v124;
        if (*(_QWORD *)&v125 == *(_QWORD *)&v124)
        {
          v134 = 0uLL;
          v135 = v124;
        }
        else
        {
          v127 = 0x21CFB2B78C13521DLL * (v126 >> 3);
          if (v127 >= 0x1555555555555556)
            sub_22316E078();
          *(_QWORD *)&__src[0] = operator new(0x95BC609A90E7D95CLL * (v126 >> 3));
          *((_QWORD *)&__src[0] + 1) = *(_QWORD *)&__src[0];
          *(_QWORD *)&__src[1] = *(_QWORD *)&__src[0] + 12 * v127;
          v452.__r_.__value_.__r.__words[0] = (std::string::size_type)__src;
          do
          {
            v132 = *(float32x2_t *)(*(_QWORD *)&v124 + 28);
            v128.i32[0] = *(_DWORD *)(*(_QWORD *)&v124 + 36);
            v129.i32[0] = a1[19].i32[0];
            v130.i32[0] = a1[21].i32[0];
            v131.i32[0] = a1[23].i32[0];
            v133 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(a1[18], v132.f32[0]), a1[20], v132, 1), a1[22], v128.f32[0]);
            *(_DWORD *)&__dst[8] = vmla_f32(vmla_lane_f32(vmul_f32(v129, v132), v130, v132, 1), v128, v131).u32[0];
            *(float32x2_t *)__dst = v133;
            sub_22339DC14((char ***)&v452, (uint64_t *)__dst);
            *(_QWORD *)&v124 += 424;
          }
          while (*(_QWORD *)&v124 != *(_QWORD *)&v125);
          v134 = __src[0];
          v126 = *(_QWORD *)&__src[1];
          v124 = a1[26];
          v135 = a1[27];
        }
        *(_OWORD *)v453 = v134;
        v454 = (std::__shared_weak_count *)v126;
        memset(__dst, 0, 24);
        sub_223720F0C((uint64_t)__dst, 0x21CFB2B78C13521DLL * ((uint64_t)(*(_QWORD *)&v135 - *(_QWORD *)&v124) >> 3));
        v136 = a1[26];
        for (i = a1[27]; *(_QWORD *)&v136 != *(_QWORD *)&i; *(_QWORD *)&v136 += 424)
        {
          sub_2236EA2D0((uint64_t)__src, *(_QWORD *)&v136 + 264);
          v138 = *(_QWORD *)&__dst[8];
          if (*(_QWORD *)&__dst[8] >= *(_QWORD *)&__dst[16])
          {
            *(_QWORD *)&__dst[8] = sub_223721094((void **)__dst, (uint64_t)__src);
            if (*(_QWORD *)&__src[2])
            {
              *((_QWORD *)&__src[2] + 1) = *(_QWORD *)&__src[2];
              operator delete(*(void **)&__src[2]);
            }
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)&__dst[8] + 8) = 0;
            *(_QWORD *)(v138 + 16) = 0;
            *(_QWORD *)v138 = 0;
            *(_OWORD *)v138 = __src[0];
            *(_QWORD *)(v138 + 16) = *(_QWORD *)&__src[1];
            memset(__src, 0, 24);
            *(_DWORD *)(v138 + 24) = DWORD2(__src[1]);
            *(_QWORD *)(v138 + 40) = 0;
            *(_QWORD *)(v138 + 48) = 0;
            *(_QWORD *)(v138 + 32) = 0;
            *(_OWORD *)(v138 + 32) = __src[2];
            *(_QWORD *)(v138 + 48) = *(_QWORD *)&__src[3];
            memset(&__src[2], 0, 24);
            *(_QWORD *)(v138 + 56) = *((_QWORD *)&__src[3] + 1);
            *(_QWORD *)(v138 + 64) = *(_QWORD *)&__src[4];
            *(_BYTE *)(v138 + 72) = 0;
            *(_BYTE *)(v138 + 80) = 0;
            if (LOBYTE(__src[5]))
            {
              *(_QWORD *)(v138 + 72) = *((_QWORD *)&__src[4] + 1);
              *(_BYTE *)(v138 + 80) = 1;
            }
            *(_QWORD *)&__dst[8] = v138 + 88;
          }
          if (*(_QWORD *)&__src[0])
          {
            *((_QWORD *)&__src[0] + 1) = *(_QWORD *)&__src[0];
            operator delete(*(void **)&__src[0]);
          }
        }
        v452 = *(std::string *)__dst;
        sub_2237925CC((__int16 ***)&v452, (uint64_t *)v453, v400, (uint64_t)__src);
        *(_QWORD *)__dst = &off_24EC21DF8;
        sub_2237212D0((uint64_t)__src, (uint64_t *)&__dst[8]);
        *(_QWORD *)__p = &off_24EC21B18;
        sub_2231C5C38(v449, &__p[8]);
        v141 = *(_QWORD *)&__dst[8];
        if (!*(_QWORD *)&__dst[8])
          goto LABEL_226;
        v142 = *(std::__shared_weak_count **)&__dst[16];
        if (*(_QWORD *)&__dst[16])
        {
          v143 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
          do
            v144 = __ldxr(v143);
          while (__stxr(v144 + 1, v143));
          do
            v145 = __ldaxr(v143);
          while (__stlxr(v145 - 1, v143));
          if (!v145)
          {
            ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
            std::__shared_weak_count::__release_weak(v142);
          }
          v141 = *(_QWORD *)&__dst[8];
          v146 = *(std::__shared_weak_count **)&__dst[16];
          if (*(_QWORD *)&__dst[16])
          {
            v147 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
            do
              v148 = __ldxr(v147);
            while (__stxr(v148 + 1, v147));
            do
              v149 = __ldaxr(v147);
            while (__stlxr(v149 - 1, v147));
            if (!v149)
            {
              ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
              std::__shared_weak_count::__release_weak(v146);
            }
          }
        }
        if (v451)
          (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v141 + 96))(&v456, v141, 0);
        else
LABEL_226:
          v456 = 0;
        v150 = *(_QWORD *)&__p[8];
        v151 = *(std::__shared_weak_count **)&__p[16];
        if (*(_QWORD *)&__p[16])
        {
          v152 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
          do
            v153 = __ldxr(v152);
          while (__stxr(v153 + 1, v152));
          do
            v154 = __ldaxr(v152);
          while (__stlxr(v154 - 1, v152));
          if (!v154)
          {
            ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
            std::__shared_weak_count::__release_weak(v151);
          }
        }
        if (v150 && v467)
          (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)&__p[8] + 96))(&v455, *(_QWORD *)&__p[8], 1);
        else
          v455 = 0;
        if (v444)
        {
          v155 = v445;
          if (v445)
          {
            v156 = v446;
            if (v446)
            {
              v157 = v447;
              v158 = v448;
              v159 = v464;
              v160 = v465;
              v161 = *(float32x2_t **)&__dst[24];
              v415 = v123;
              if (v450 && *(_QWORD *)&__dst[24])
              {
                v411 = v447;
                v162 = v446;
                v163 = *(_QWORD *)&__dst[8];
                v164 = *(std::__shared_weak_count **)&__dst[16];
                if (*(_QWORD *)&__dst[16])
                {
                  v165 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
                  do
                    v166 = __ldxr(v165);
                  while (__stxr(v166 + 1, v165));
                  do
                    v167 = __ldaxr(v165);
                  while (__stlxr(v167 - 1, v165));
                  if (!v167)
                  {
                    ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                    std::__shared_weak_count::__release_weak(v164);
                  }
                }
                (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v163 + 88))(v163, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                v156 = v162;
                v123 = v415;
                v161 = *(float32x2_t **)&__dst[24];
                v157 = v411;
              }
              v168 = *(_BYTE **)&__p[32];
              if (v466 && *(_QWORD *)&__p[32])
              {
                v169 = v157;
                (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)&__p[8] + 88))(*(_QWORD *)&__p[8], 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
                v168 = *(_BYTE **)&__p[32];
                v157 = v169;
                v123 = v415;
              }
              v170 = v155 - 1;
              v171 = 4 * v157;
              __asm { FMOV            V0.2S, #1.0 }
              v175 = v156 - 1;
              if (v156 != 1)
              {
                v176 = 4 * v158;
                if (v155 == 1)
                {
                  v186 = (float32x4_t)vdupq_n_s32(0x42FF0000u);
                  do
                  {
                    *(float32x2_t *)v140.f32 = vsub_f32(*(float32x2_t *)_Q0.f32, *v161);
                    v140.f32[2] = 1.0 - v161[1].f32[0];
                    v187 = vmulq_f32(v140, v186);
                    *v168 = (int)v187.f32[0];
                    v168[1] = (int)v187.f32[1];
                    v168[2] = (int)v187.f32[2];
                    v168 += v160;
                    v161 = (float32x2_t *)((char *)v161 + v176);
                    --v175;
                  }
                  while (v175);
                }
                else
                {
                  v177 = 0;
                  v178 = v161 + 1;
                  v179 = v168 + 1;
                  v180 = (float32x4_t)vdupq_n_s32(0x42FF0000u);
                  do
                  {
                    v181 = v179;
                    v182 = (float *)v178;
                    v183 = v155 - 1;
                    do
                    {
                      *(float32x2_t *)v140.f32 = vsub_f32(*(float32x2_t *)_Q0.f32, *(float32x2_t *)(v182 - 2));
                      v140.f32[2] = 1.0 - *v182;
                      v184 = vmulq_f32(v140, v180);
                      *(v181 - 1) = (int)v184.f32[0];
                      *v181 = (int)v184.f32[1];
                      v181[1] = (int)v184.f32[2];
                      v182 = (float *)((char *)v182 + v171);
                      v181 += v159;
                      --v183;
                    }
                    while (v183);
                    *(float32x2_t *)v140.f32 = vsub_f32(*(float32x2_t *)_Q0.f32, *(float32x2_t *)(v182 - 2));
                    v140.f32[2] = 1.0 - *v182;
                    v185 = vmulq_f32(v140, v180);
                    *(v181 - 1) = (int)v185.f32[0];
                    *v181 = (int)v185.f32[1];
                    v181[1] = (int)v185.f32[2];
                    v161 = (float32x2_t *)((char *)v161 + 4 * v158);
                    v168 += v160;
                    ++v177;
                    v178 = (float32x2_t *)((char *)v178 + v176);
                    v179 += v160;
                  }
                  while (v177 != v175);
                }
              }
              if (v155 == 1)
              {
                v57 = v403;
              }
              else
              {
                v188 = (float32x4_t)vdupq_n_s32(0x42FF0000u);
                v57 = v403;
                do
                {
                  *(float32x2_t *)v140.f32 = vsub_f32(*(float32x2_t *)_Q0.f32, *v161);
                  v140.f32[2] = 1.0 - v161[1].f32[0];
                  v189 = vmulq_f32(v140, v188);
                  *v168 = (int)v189.f32[0];
                  v168[1] = (int)v189.f32[1];
                  v168[2] = (int)v189.f32[2];
                  v168 += v159;
                  v161 = (float32x2_t *)((char *)v161 + v171);
                  --v170;
                }
                while (v170);
              }
              *(float32x2_t *)_Q0.f32 = vsub_f32(*(float32x2_t *)_Q0.f32, *v161);
              _Q0.f32[2] = 1.0 - v161[1].f32[0];
              v190 = vmulq_f32(_Q0, (float32x4_t)vdupq_n_s32(0x42FF0000u));
              *v168 = (int)v190.f32[0];
              v168[1] = (int)v190.f32[1];
              v168[2] = (int)v190.f32[2];
            }
          }
        }
        v191 = v455;
        v455 = 0;
        if (v191)
          (*(void (**)(uint64_t))(*(_QWORD *)v191 + 8))(v191);
        v192 = v456;
        v456 = 0;
        if (v192)
          (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
        v193 = *(std::__shared_weak_count **)&__dst[16];
        if (*(_QWORD *)&__dst[16])
        {
          v194 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
          do
            v195 = __ldaxr(v194);
          while (__stlxr(v195 - 1, v194));
          if (!v195)
          {
            ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
            std::__shared_weak_count::__release_weak(v193);
          }
        }
        v196 = *(std::__shared_weak_count **)&__src[1];
        if (*(_QWORD *)&__src[1])
        {
          v197 = (unint64_t *)(*(_QWORD *)&__src[1] + 8);
          do
            v198 = __ldaxr(v197);
          while (__stlxr(v198 - 1, v197));
          if (!v198)
          {
            ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
            std::__shared_weak_count::__release_weak(v196);
          }
        }
        v199 = v452.__r_.__value_.__r.__words[0];
        if (v452.__r_.__value_.__r.__words[0])
        {
          size = v452.__r_.__value_.__l.__size_;
          v201 = (void *)v452.__r_.__value_.__r.__words[0];
          if (v452.__r_.__value_.__l.__size_ != v452.__r_.__value_.__r.__words[0])
          {
            do
            {
              v202 = *(void **)(size - 56);
              if (v202)
              {
                *(_QWORD *)(size - 48) = v202;
                operator delete(v202);
              }
              v203 = *(void **)(size - 88);
              if (v203)
              {
                *(_QWORD *)(size - 80) = v203;
                operator delete(v203);
              }
              size -= 88;
            }
            while (size != v199);
            v201 = (void *)v452.__r_.__value_.__r.__words[0];
          }
          v452.__r_.__value_.__l.__size_ = v199;
          operator delete(v201);
        }
        if (v453[0])
        {
          v453[1] = v453[0];
          operator delete(v453[0]);
        }
        strcpy(__dst, "normals");
        *(_QWORD *)&__dst[8] = v459[0];
        *(_QWORD *)&__dst[15] = *(_QWORD *)((char *)v459 + 7);
        *(_WORD *)&__dst[23] = 263;
        memset(v459, 0, 15);
        sub_2231C6C30(__p, (__int128 *)__dst, &v458, &v441);
        if (__dst[24] && (__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        v204 = *(std::__shared_weak_count **)&__p[16];
        if (*(_QWORD *)&__p[16])
        {
          v205 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
          do
            v206 = __ldaxr(v205);
          while (__stlxr(v206 - 1, v205));
          if (!v206)
          {
            ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
            std::__shared_weak_count::__release_weak(v204);
          }
        }
        v207 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 56))(v122);
        v208 = *v207;
        v209 = (std::__shared_weak_count *)v207[1];
        if (v209)
        {
          v210 = (unint64_t *)&v209->__shared_owners_;
          do
            v211 = __ldxr(v210);
          while (__stxr(v211 + 1, v210));
        }
        v213 = *((_QWORD *)&v441 + 1);
        v212 = v442;
        *(_QWORD *)__p = &off_24EC6A3B8;
        *(_QWORD *)&__p[8] = *((_QWORD *)&v441 + 1);
        *(_QWORD *)&__p[16] = v442;
        *((_QWORD *)&v441 + 1) = 0;
        v442 = 0;
        *(_QWORD *)&__src[0] = v208;
        *((_QWORD *)&__src[0] + 1) = v209;
        if (v209)
        {
          v214 = (unint64_t *)&v209->__shared_owners_;
          do
            v215 = __ldxr(v214);
          while (__stxr(v215 + 1, v214));
        }
        *(_QWORD *)&__src[1] = &off_24EC6A3B8;
        *((_QWORD *)&__src[1] + 1) = v213;
        *(_QWORD *)&__src[2] = v212;
        if (v212)
        {
          v216 = (unint64_t *)&v212->__shared_owners_;
          do
            v217 = __ldxr(v216);
          while (__stxr(v217 + 1, v216));
        }
        (*(void (**)(uint64_t *, _OWORD *))(*v123 + 16))(v123, __src);
        v218 = *(std::__shared_weak_count **)&__src[2];
        if (*(_QWORD *)&__src[2])
        {
          v219 = (unint64_t *)(*(_QWORD *)&__src[2] + 8);
          do
            v220 = __ldaxr(v219);
          while (__stlxr(v220 - 1, v219));
          if (!v220)
          {
            ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
            std::__shared_weak_count::__release_weak(v218);
          }
        }
        v221 = (std::__shared_weak_count *)*((_QWORD *)&__src[0] + 1);
        if (*((_QWORD *)&__src[0] + 1))
        {
          v222 = (unint64_t *)(*((_QWORD *)&__src[0] + 1) + 8);
          do
            v223 = __ldaxr(v222);
          while (__stlxr(v223 - 1, v222));
          if (!v223)
          {
            ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
            std::__shared_weak_count::__release_weak(v221);
          }
        }
        v224 = *(std::__shared_weak_count **)&__p[16];
        if (*(_QWORD *)&__p[16])
        {
          v225 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
          do
            v226 = __ldaxr(v225);
          while (__stlxr(v226 - 1, v225));
          if (!v226)
          {
            ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
            std::__shared_weak_count::__release_weak(v224);
          }
        }
        if (v209)
        {
          v227 = (unint64_t *)&v209->__shared_owners_;
          do
            v228 = __ldaxr(v227);
          while (__stlxr(v228 - 1, v227));
          if (!v228)
          {
            ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
            std::__shared_weak_count::__release_weak(v209);
          }
        }
        v229 = v442;
        if (v442)
        {
          v230 = (unint64_t *)&v442->__shared_owners_;
          do
            v231 = __ldaxr(v230);
          while (__stlxr(v231 - 1, v230));
          if (!v231)
          {
            ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
            std::__shared_weak_count::__release_weak(v229);
          }
        }
      }
    }
    kdebug_trace();
  }
  if (SHIBYTE(v457.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v457.__r_.__value_.__l.__data_);
LABEL_338:
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v232 = sub_2241471F8();
    v233 = v232[2];
    if (!v233)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_574;
      }
      v233 = v232[2];
    }
    v234 = *(_QWORD *)(v233 + 64);
    v235 = (std::mutex *)(v234 + 32);
    std::mutex::lock((std::mutex *)(v234 + 32));
    v237 = *(_QWORD *)(v234 + 96);
    v236 = *(_QWORD *)(v234 + 104);
    std::mutex::unlock(v235);
    if (v237 != v236)
    {
      v238 = *((char *)v57 + 23);
      if (v238 >= 0)
        v239 = *((unsigned __int8 *)v57 + 23);
      else
        v239 = (size_t)v57[1];
      v240 = v239 + 9;
      if (v239 + 9 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v240 >= 0x17)
      {
        v242 = (v240 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v240 | 7) != 0x17)
          v242 = v240 | 7;
        v243 = v242 + 1;
        v241 = operator new(v242 + 1);
        *(_QWORD *)&__dst[8] = v239 + 9;
        *(_QWORD *)&__dst[16] = v243 | 0x8000000000000000;
        *(_QWORD *)__dst = v241;
      }
      else
      {
        memset(__dst, 0, 24);
        v241 = __dst;
        __dst[23] = v239 + 9;
        if (!v239)
          goto LABEL_357;
      }
      if (v238 >= 0)
        v244 = v57;
      else
        v244 = *v57;
      memmove(v241, v244, v239);
LABEL_357:
      strcpy(&v241[v239], ".keyframe");
      v245 = *(char *)(a3 + 23);
      if (v245 >= 0)
        v246 = (const std::string::value_type *)a3;
      else
        v246 = *(const std::string::value_type **)a3;
      if (v245 >= 0)
        v247 = *(unsigned __int8 *)(a3 + 23);
      else
        v247 = *(_QWORD *)(a3 + 8);
      v248 = std::string::append((std::string *)__dst, v246, v247);
      v249 = *(_OWORD *)&v248->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v248->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v249;
      v248->__r_.__value_.__l.__size_ = 0;
      v248->__r_.__value_.__r.__words[2] = 0;
      v248->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)&__src[0] = "cv3d.recon.";
      *((_QWORD *)&__src[0] + 1) = 11;
      v250 = __p[23];
      v251 = __p;
      if (__p[23] < 0)
      {
        v251 = *(_BYTE **)__p;
        v250 = *(_QWORD *)&__p[8];
      }
      *(_QWORD *)&__src[1] = v251;
      *((_QWORD *)&__src[1] + 1) = v250;
      sub_2231A9820((uint64_t)__src, (uint64_t)&__src[2], 0, 0, &v452);
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        if ((__dst[23] & 0x80000000) == 0)
          goto LABEL_367;
      }
      else if ((__dst[23] & 0x80000000) == 0)
      {
LABEL_367:
        sub_2241471F8();
        v252 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v252 + 24))(v252))
        {
          memset(__dst, 0, sizeof(__dst));
          v444 = 728325616;
          kdebug_trace();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v252 + 24))(v252))
          {
            qmemcpy(v459, "ull", 3);
            *(_QWORD *)&v441 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            *((_QWORD *)&v441 + 1) = 2;
            v253 = sub_2241471F8();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v252 + 24))(v252))
            {
              v418 = v253;
              BYTE12(__src[1]) = 0;
              *(_QWORD *)&__src[1] = 0;
              *(_QWORD *)&__src[0] = &off_24EC21B18;
              *((_QWORD *)&__src[0] + 1) = 0;
              BYTE8(__src[1]) = 0;
              *(_QWORD *)&__src[2] = 0;
              *((_QWORD *)&__src[2] + 1) = 3;
              *(_QWORD *)((char *)&__src[3] + 4) = 1;
              *(_OWORD *)((char *)&__src[4] + 4) = 0uLL;
              *(_QWORD *)((char *)&__src[3] + 12) = 0;
              LODWORD(__src[3]) = 0;
              DWORD1(__src[5]) = 0;
              *(_DWORD *)__p = 1;
              *(_QWORD *)&__p[4] = 0;
              *((_QWORD *)&__src[5] + 1) = 3;
              *(_QWORD *)((char *)&__src[6] + 4) = 1;
              *(_QWORD *)((char *)&__src[7] + 4) = 0;
              *(_QWORD *)((char *)&__src[6] + 12) = 0;
              LODWORD(__src[6]) = 0;
              HIDWORD(__src[7]) = 0;
              sub_22449BF00((_QWORD *)__src + 1, (uint64_t)&v424);
              LOWORD(__src[8]) = v436;
              v255 = a1[26];
              v254 = a1[27];
              if (*(_QWORD *)&v255 != *(_QWORD *)&v254)
              {
                while (!*(_BYTE *)(*(_QWORD *)&v255 + 384))
                {
LABEL_373:
                  *(_QWORD *)&v255 += 424;
                  if (*(_QWORD *)&v255 == *(_QWORD *)&v254)
                    goto LABEL_395;
                }
                v256 = *(const __int16 **)(*(_QWORD *)&v255 + 360);
                v257 = *(const __int16 **)(*(_QWORD *)&v255 + 368);
                v420[1] = 0;
                *(_QWORD *)&v421 = 0;
                v420[0] = 0;
                v258 = (char *)v257 - (char *)v256;
                if (v257 == v256)
                {
                  v260 = 0;
                  goto LABEL_385;
                }
                if ((unint64_t)v258 >= 0x3FFFFFFFFFFFFFFDLL)
                  sub_22316E078();
                v259 = (uint64_t *)operator new(4 * v258);
                v260 = v259;
                v420[0] = v259;
                *(_QWORD *)&v421 = &v259[2 * (v258 >> 2)];
                if ((unint64_t)(v258 - 4) >= 0x1C)
                {
                  v262 = ((unint64_t)(v258 - 4) >> 2) + 1;
                  v261 = &v256[2 * (v262 & 0x7FFFFFFFFFFFFFF8)];
                  v258 = (uint64_t)&v259[2 * (v262 & 0x7FFFFFFFFFFFFFF8)];
                  v263 = v262 & 0x7FFFFFFFFFFFFFF8;
                  v264 = (double *)v259;
                  do
                  {
                    v470 = vld2q_s16(v256);
                    v256 += 16;
                    v265 = vmovl_high_s16(v470.val[0]);
                    *(_QWORD *)&v266.f64[0] = v265.i32[2];
                    *(_QWORD *)&v266.f64[1] = v265.i32[3];
                    v471.val[0] = v266;
                    v267 = vmovl_high_s16(v470.val[1]);
                    *(_QWORD *)&v266.f64[0] = v267.i32[2];
                    *(_QWORD *)&v266.f64[1] = v267.i32[3];
                    v471.val[1] = v266;
                    *(_QWORD *)&v266.f64[0] = v265.i32[0];
                    *(_QWORD *)&v266.f64[1] = v265.i32[1];
                    v472.val[0] = v266;
                    *(_QWORD *)&v266.f64[0] = v267.i32[0];
                    *(_QWORD *)&v266.f64[1] = v267.i32[1];
                    v472.val[1] = v266;
                    v268 = vmovl_s16(*(int16x4_t *)v470.val[0].i8);
                    v470.val[0] = (int16x8_t)vmovl_s16(*(int16x4_t *)v470.val[1].i8);
                    *(_QWORD *)&v266.f64[0] = v268.i32[0];
                    *(_QWORD *)&v266.f64[1] = v268.i32[1];
                    v473.val[0] = v266;
                    *(_QWORD *)&v266.f64[0] = v470.val[0].i32[0];
                    *(_QWORD *)&v266.f64[1] = v470.val[0].i32[1];
                    v473.val[1] = v266;
                    v269 = v264;
                    vst2q_f64(v269, v473);
                    v269 += 4;
                    *(_QWORD *)&v266.f64[0] = v268.i32[2];
                    *(_QWORD *)&v266.f64[1] = v268.i32[3];
                    v470.val[1] = (int16x8_t)v266;
                    *(_QWORD *)&v266.f64[0] = v470.val[0].i32[2];
                    *(_QWORD *)&v266.f64[1] = v470.val[0].i32[3];
                    v270 = v266;
                    vst2q_f64(v269, *(float64x2x2_t *)((char *)&v470 + 16));
                    v271 = v264 + 8;
                    vst2q_f64(v271, v472);
                    v272 = v264 + 12;
                    v264 += 16;
                    vst2q_f64(v272, v471);
                    v263 -= 8;
                  }
                  while (v263);
                  if (v262 == (v262 & 0x7FFFFFFFFFFFFFF8))
                    goto LABEL_384;
                }
                else
                {
                  v261 = v256;
                  v258 = (uint64_t)v259;
                }
                do
                {
                  *(_QWORD *)v258 = *v261;
                  *(_QWORD *)(v258 + 8) = v261[1];
                  v258 += 16;
                  v261 += 2;
                }
                while (v261 != v257);
LABEL_384:
                v420[1] = (void *)v258;
LABEL_385:
                *(_QWORD *)__p = &off_24EC232F0;
                sub_223416D28((uint64_t)__src, (uint64_t *)&__p[8]);
                v457.__r_.__value_.__r.__words[0] = 0;
                LODWORD(v457.__r_.__value_.__r.__words[1]) = 0;
                sub_223738D80((uint64_t)__p, (v258 - (uint64_t)v260) >> 4, v260, (uint64_t)&v457, v273, v274, v275, v276, v277);
                v278 = *(std::__shared_weak_count **)&__p[16];
                if (*(_QWORD *)&__p[16])
                {
                  v279 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
                  do
                    v280 = __ldaxr(v279);
                  while (__stlxr(v280 - 1, v279));
                  if (!v280)
                  {
                    ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
                    std::__shared_weak_count::__release_weak(v278);
                  }
                }
                if (v420[0])
                  operator delete(v420[0]);
                v57 = v403;
                goto LABEL_373;
              }
LABEL_395:
              *(_QWORD *)__p = 0x68207865766E6F63;
              *(_WORD *)&__p[8] = v459[0];
              *(_WORD *)&__p[10] = BYTE2(v459[0]);
              *(_QWORD *)&__p[12] = v458;
              *(_DWORD *)&__p[19] = *(_DWORD *)((char *)&v458 + 7);
              *(_WORD *)&__p[23] = 267;
              LOWORD(v459[0]) = 0;
              BYTE2(v459[0]) = 0;
              *(_QWORD *)&v458 = 0;
              *(_DWORD *)((char *)&v458 + 7) = 0;
              sub_2231C6C30(__src, (__int128 *)__p, &v441, v453);
              if (__p[24] && (__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
              v281 = *(std::__shared_weak_count **)&__src[1];
              if (*(_QWORD *)&__src[1])
              {
                v282 = (unint64_t *)(*(_QWORD *)&__src[1] + 8);
                do
                  v283 = __ldaxr(v282);
                while (__stlxr(v283 - 1, v282));
                if (!v283)
                {
                  ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                  std::__shared_weak_count::__release_weak(v281);
                }
              }
              v284 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v252 + 56))(v252);
              v285 = *v284;
              v286 = (std::__shared_weak_count *)v284[1];
              if (v286)
              {
                v287 = (unint64_t *)&v286->__shared_owners_;
                do
                  v288 = __ldxr(v287);
                while (__stxr(v288 + 1, v287));
              }
              v289 = v453[1];
              v290 = v454;
              v420[0] = &off_24EC6A3B8;
              v420[1] = v453[1];
              *(_QWORD *)&v421 = v454;
              v454 = 0;
              v453[1] = 0;
              *(_QWORD *)&__src[0] = v285;
              *((_QWORD *)&__src[0] + 1) = v286;
              if (v286)
              {
                v291 = (unint64_t *)&v286->__shared_owners_;
                do
                  v292 = __ldxr(v291);
                while (__stxr(v292 + 1, v291));
              }
              *(_QWORD *)&__src[1] = &off_24EC6A3B8;
              *((_QWORD *)&__src[1] + 1) = v289;
              *(_QWORD *)&__src[2] = v290;
              if (v290)
              {
                v293 = (unint64_t *)&v290->__shared_owners_;
                do
                  v294 = __ldxr(v293);
                while (__stxr(v294 + 1, v293));
              }
              (*(void (**)(uint64_t *, _OWORD *))(*v418 + 16))(v418, __src);
              v295 = *(std::__shared_weak_count **)&__src[2];
              if (*(_QWORD *)&__src[2])
              {
                v296 = (unint64_t *)(*(_QWORD *)&__src[2] + 8);
                do
                  v297 = __ldaxr(v296);
                while (__stlxr(v297 - 1, v296));
                if (!v297)
                {
                  ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
                  std::__shared_weak_count::__release_weak(v295);
                }
              }
              v298 = (std::__shared_weak_count *)*((_QWORD *)&__src[0] + 1);
              if (*((_QWORD *)&__src[0] + 1))
              {
                v299 = (unint64_t *)(*((_QWORD *)&__src[0] + 1) + 8);
                do
                  v300 = __ldaxr(v299);
                while (__stlxr(v300 - 1, v299));
                if (!v300)
                {
                  ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
                  std::__shared_weak_count::__release_weak(v298);
                }
              }
              v301 = (std::__shared_weak_count *)v421;
              if ((_QWORD)v421)
              {
                v302 = (unint64_t *)(v421 + 8);
                do
                  v303 = __ldaxr(v302);
                while (__stlxr(v303 - 1, v302));
                if (!v303)
                {
                  ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                  std::__shared_weak_count::__release_weak(v301);
                }
              }
              if (v286)
              {
                v304 = (unint64_t *)&v286->__shared_owners_;
                do
                  v305 = __ldaxr(v304);
                while (__stlxr(v305 - 1, v304));
                if (!v305)
                {
                  ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
                  std::__shared_weak_count::__release_weak(v286);
                }
              }
              v306 = v454;
              if (v454)
              {
                v307 = (unint64_t *)&v454->__shared_owners_;
                do
                  v308 = __ldaxr(v307);
                while (__stlxr(v308 - 1, v307));
                if (!v308)
                {
                  ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
                  std::__shared_weak_count::__release_weak(v306);
                }
              }
            }
          }
          kdebug_trace();
        }
        if (SHIBYTE(v452.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v452.__r_.__value_.__l.__data_);
        goto LABEL_440;
      }
      operator delete(*(void **)__dst);
      goto LABEL_367;
    }
  }
LABEL_440:
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_561;
  v309 = sub_2241471F8();
  v310 = v309[2];
  if (!v310)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      v310 = v309[2];
      goto LABEL_444;
    }
LABEL_574:
    abort();
  }
LABEL_444:
  v311 = *(_QWORD *)(v310 + 64);
  v312 = (std::mutex *)(v311 + 32);
  std::mutex::lock((std::mutex *)(v311 + 32));
  v314 = *(_QWORD *)(v311 + 96);
  v313 = *(_QWORD *)(v311 + 104);
  std::mutex::unlock(v312);
  if (v314 == v313)
    goto LABEL_561;
  v315 = *((char *)v57 + 23);
  if (v315 >= 0)
    v316 = *((unsigned __int8 *)v57 + 23);
  else
    v316 = (size_t)v57[1];
  v317 = v316 + 9;
  if (v316 + 9 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v317 >= 0x17)
  {
    v319 = (v317 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v317 | 7) != 0x17)
      v319 = v317 | 7;
    v320 = v319 + 1;
    v318 = operator new(v319 + 1);
    *(_QWORD *)&__dst[8] = v316 + 9;
    *(_QWORD *)&__dst[16] = v320 | 0x8000000000000000;
    *(_QWORD *)__dst = v318;
  }
  else
  {
    memset(__dst, 0, 24);
    v318 = __dst;
    __dst[23] = v316 + 9;
    if (!v316)
      goto LABEL_459;
  }
  if (v315 >= 0)
    v321 = v57;
  else
    v321 = *v57;
  memmove(v318, v321, v316);
LABEL_459:
  strcpy(&v318[v316], ".keyframe");
  v322 = *(char *)(a3 + 23);
  if (v322 >= 0)
    v323 = (const std::string::value_type *)a3;
  else
    v323 = *(const std::string::value_type **)a3;
  if (v322 >= 0)
    v324 = *(unsigned __int8 *)(a3 + 23);
  else
    v324 = *(_QWORD *)(a3 + 8);
  v325 = std::string::append((std::string *)__dst, v323, v324);
  v326 = *(_OWORD *)&v325->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v325->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v326;
  v325->__r_.__value_.__l.__size_ = 0;
  v325->__r_.__value_.__r.__words[2] = 0;
  v325->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)&__src[0] = "cv3d.recon.";
  *((_QWORD *)&__src[0] + 1) = 11;
  v327 = __p[23];
  v328 = __p;
  if (__p[23] < 0)
  {
    v328 = *(_BYTE **)__p;
    v327 = *(_QWORD *)&__p[8];
  }
  *(_QWORD *)&__src[1] = v328;
  *((_QWORD *)&__src[1] + 1) = v327;
  sub_2231A9820((uint64_t)__src, (uint64_t)&__src[2], 0, 0, &v452);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_469;
LABEL_514:
    operator delete(*(void **)__dst);
    goto LABEL_469;
  }
  if ((__dst[23] & 0x80000000) != 0)
    goto LABEL_514;
LABEL_469:
  sub_2241471F8();
  v329 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v329 + 24))(v329))
  {
    memset(__dst, 0, sizeof(__dst));
    v444 = 728325616;
    kdebug_trace();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v329 + 24))(v329))
    {
      *(_QWORD *)&v441 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
      *((_QWORD *)&v441 + 1) = 2;
      v330 = sub_2241471F8();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v329 + 24))(v329))
      {
        v419 = v330;
        BYTE12(__src[1]) = 0;
        *(_QWORD *)&__src[1] = 0;
        *(_QWORD *)&__src[0] = &off_24EC21B18;
        *((_QWORD *)&__src[0] + 1) = 0;
        BYTE8(__src[1]) = 0;
        *(_QWORD *)&__src[2] = 0;
        *((_QWORD *)&__src[2] + 1) = 3;
        *(_OWORD *)((char *)&__src[3] + 4) = 1uLL;
        *(_OWORD *)((char *)&__src[4] + 4) = 0uLL;
        LODWORD(__src[3]) = 0;
        DWORD1(__src[5]) = 0;
        *(_DWORD *)__p = 1;
        *(_QWORD *)&__p[4] = 0;
        *((_QWORD *)&__src[5] + 1) = 3;
        *(_QWORD *)((char *)&__src[6] + 4) = 1;
        *(_QWORD *)((char *)&__src[7] + 4) = 0;
        *(_QWORD *)((char *)&__src[6] + 12) = 0;
        LODWORD(__src[6]) = 0;
        HIDWORD(__src[7]) = 0;
        sub_22449BF00((_QWORD *)__src + 1, (uint64_t)&v424);
        LOWORD(__src[8]) = v436;
        v331 = a1[26];
        for (j = a1[27]; *(_QWORD *)&v331 != *(_QWORD *)&j; *(_QWORD *)&v331 += 424)
        {
          if (*(_BYTE *)(*(_QWORD *)&v331 + 416))
          {
            v334 = *(_QWORD *)(*(_QWORD *)&v331 + 392);
            v333 = *(_QWORD *)(*(_QWORD *)&v331 + 400);
            while (v334 != v333)
            {
              *(_QWORD *)__p = &off_24EC232F0;
              v335 = *((_QWORD *)&__src[0] + 1);
              v336 = *(std::__shared_weak_count **)&__src[1];
              if (*(_QWORD *)&__src[1])
              {
                v337 = (unint64_t *)(*(_QWORD *)&__src[1] + 8);
                do
                  v338 = __ldxr(v337);
                while (__stxr(v338 + 1, v337));
                do
                  v339 = __ldxr(v337);
                while (__stxr(v339 + 1, v337));
                do
                  v340 = __ldxr(v337);
                while (__stxr(v340 + 1, v337));
                *(_QWORD *)&__p[8] = v335;
                *(_QWORD *)&__p[16] = v336;
                do
                  v341 = __ldxr(v337);
                while (__stxr(v341 + 1, v337));
                do
                  v342 = __ldaxr(v337);
                while (__stlxr(v342 - 1, v337));
                if (!v342)
                {
                  ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
                  std::__shared_weak_count::__release_weak(v336);
                }
              }
              else
              {
                *(_QWORD *)&__p[8] = *((_QWORD *)&__src[0] + 1);
                *(_QWORD *)&__p[16] = 0;
              }
              (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v335 + 64))(v453, v335, 21);
              v344 = *((_OWORD *)v453[0] + 1);
              v343 = *((_OWORD *)v453[0] + 2);
              *(_OWORD *)&__p[24] = *(_OWORD *)v453[0];
              v461 = v344;
              v462 = v343;
              v453[0] = 0;
              MEMORY[0x227684CE8]();
              v345 = *(_QWORD *)&__p[8];
              v346 = *(std::__shared_weak_count **)&__p[16];
              if (*(_QWORD *)&__p[16])
              {
                v347 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
                do
                  v348 = __ldxr(v347);
                while (__stxr(v348 + 1, v347));
                do
                  v349 = __ldaxr(v347);
                while (__stlxr(v349 - 1, v347));
                if (!v349)
                {
                  ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
                  std::__shared_weak_count::__release_weak(v346);
                }
              }
              v350 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v345 + 104))(v345);
              v356 = v350;
              if ((v350 & 0xFFFFFF) <= 0x10000)
                v356 = 0;
              v357 = v350 & 0xFF00;
              if ((v350 & 0xFF0000) == 0)
                v357 = 0;
              v463 = v357 & 0xFF00 | v356;
              if (v336)
              {
                v358 = (unint64_t *)&v336->__shared_owners_;
                do
                  v359 = __ldaxr(v358);
                while (__stlxr(v359 - 1, v358));
                if (!v359)
                {
                  ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
                  std::__shared_weak_count::__release_weak(v336);
                }
                do
                  v360 = __ldaxr(v358);
                while (__stlxr(v360 - 1, v358));
                if (!v360)
                {
                  ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
                  std::__shared_weak_count::__release_weak(v336);
                }
              }
              v361 = *(uint64_t **)v334;
              v362 = (uint64_t)(*(_QWORD *)(v334 + 8) - *(_QWORD *)v334) >> 4;
              v453[0] = 0;
              LODWORD(v453[1]) = 0;
              sub_223738D80((uint64_t)__p, v362, v361, (uint64_t)v453, v351, v352, v353, v354, v355);
              v363 = *(std::__shared_weak_count **)&__p[16];
              if (*(_QWORD *)&__p[16])
              {
                v364 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
                do
                  v365 = __ldaxr(v364);
                while (__stlxr(v365 - 1, v364));
                if (!v365)
                {
                  ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
                  std::__shared_weak_count::__release_weak(v363);
                }
              }
              v334 += 24;
            }
          }
        }
        strcpy(__p, "polygons");
        *(_QWORD *)&__p[9] = v457.__r_.__value_.__r.__words[0];
        *(_QWORD *)&__p[15] = *(std::string::size_type *)((char *)v457.__r_.__value_.__r.__words + 6);
        *(_WORD *)&__p[23] = 264;
        v457.__r_.__value_.__r.__words[0] = 0;
        *(std::string::size_type *)((char *)v457.__r_.__value_.__r.__words + 6) = 0;
        sub_2231C6C30(__src, (__int128 *)__p, &v441, v420);
        if (__p[24] && (__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        v366 = *(std::__shared_weak_count **)&__src[1];
        if (*(_QWORD *)&__src[1])
        {
          v367 = (unint64_t *)(*(_QWORD *)&__src[1] + 8);
          do
            v368 = __ldaxr(v367);
          while (__stlxr(v368 - 1, v367));
          if (!v368)
          {
            ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
            std::__shared_weak_count::__release_weak(v366);
          }
        }
        v369 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v329 + 56))(v329);
        v370 = *v369;
        v371 = (std::__shared_weak_count *)v369[1];
        if (v371)
        {
          v372 = (unint64_t *)&v371->__shared_owners_;
          do
            v373 = __ldxr(v372);
          while (__stxr(v373 + 1, v372));
        }
        v375 = v420[1];
        v374 = v421;
        v453[0] = &off_24EC6A3B8;
        v453[1] = v420[1];
        v454 = (std::__shared_weak_count *)v421;
        v420[1] = 0;
        *(_QWORD *)&v421 = 0;
        *(_QWORD *)&__src[0] = v370;
        *((_QWORD *)&__src[0] + 1) = v371;
        if (v371)
        {
          v376 = (unint64_t *)&v371->__shared_owners_;
          do
            v377 = __ldxr(v376);
          while (__stxr(v377 + 1, v376));
        }
        *(_QWORD *)&__src[1] = &off_24EC6A3B8;
        *((_QWORD *)&__src[1] + 1) = v375;
        *(_QWORD *)&__src[2] = v374;
        if (v374)
        {
          v378 = (unint64_t *)(v374 + 8);
          do
            v379 = __ldxr(v378);
          while (__stxr(v379 + 1, v378));
        }
        (*(void (**)(uint64_t *, _OWORD *))(*v419 + 16))(v419, __src);
        v380 = *(std::__shared_weak_count **)&__src[2];
        if (*(_QWORD *)&__src[2])
        {
          v381 = (unint64_t *)(*(_QWORD *)&__src[2] + 8);
          do
            v382 = __ldaxr(v381);
          while (__stlxr(v382 - 1, v381));
          if (!v382)
          {
            ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
            std::__shared_weak_count::__release_weak(v380);
          }
        }
        v383 = (std::__shared_weak_count *)*((_QWORD *)&__src[0] + 1);
        if (*((_QWORD *)&__src[0] + 1))
        {
          v384 = (unint64_t *)(*((_QWORD *)&__src[0] + 1) + 8);
          do
            v385 = __ldaxr(v384);
          while (__stlxr(v385 - 1, v384));
          if (!v385)
          {
            ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
            std::__shared_weak_count::__release_weak(v383);
          }
        }
        v386 = v454;
        if (v454)
        {
          v387 = (unint64_t *)&v454->__shared_owners_;
          do
            v388 = __ldaxr(v387);
          while (__stlxr(v388 - 1, v387));
          if (!v388)
          {
            ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
            std::__shared_weak_count::__release_weak(v386);
          }
        }
        if (v371)
        {
          v389 = (unint64_t *)&v371->__shared_owners_;
          do
            v390 = __ldaxr(v389);
          while (__stlxr(v390 - 1, v389));
          if (!v390)
          {
            ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
            std::__shared_weak_count::__release_weak(v371);
          }
        }
        v391 = (std::__shared_weak_count *)v421;
        if ((_QWORD)v421)
        {
          v392 = (unint64_t *)(v421 + 8);
          do
            v393 = __ldaxr(v392);
          while (__stlxr(v393 - 1, v392));
          if (!v393)
          {
            ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
            std::__shared_weak_count::__release_weak(v391);
          }
        }
      }
    }
    kdebug_trace();
  }
  if (SHIBYTE(v452.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v452.__r_.__value_.__l.__data_);
LABEL_561:
  v394 = v425;
  if (v425)
  {
    v395 = (unint64_t *)&v425->__shared_owners_;
    do
      v396 = __ldaxr(v395);
    while (__stlxr(v396 - 1, v395));
    if (!v396)
    {
      ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
      std::__shared_weak_count::__release_weak(v394);
    }
  }
  v397 = v439;
  if (v439)
  {
    v398 = (unint64_t *)&v439->__shared_owners_;
    do
      v399 = __ldaxr(v398);
    while (__stlxr(v399 - 1, v398));
    if (!v399)
    {
      ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
      std::__shared_weak_count::__release_weak(v397);
    }
  }
}

void sub_22371E51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;

  v72 = STACK[0x270];
  STACK[0x270] = 0;
  if (v72)
    (*(void (**)(unint64_t))(*(_QWORD *)v72 + 8))(v72);
  sub_223167354(a25);
  v73 = (std::__shared_weak_count *)a71;
  if (a71)
  {
    v74 = (unint64_t *)(a71 + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  sub_223167354((uint64_t)&STACK[0x348]);
  v76 = STACK[0x230];
  if (STACK[0x230])
  {
    v77 = STACK[0x238];
    v78 = (void *)STACK[0x230];
    if (STACK[0x238] != v76)
    {
      do
      {
        v79 = *(void **)(v77 - 56);
        if (v79)
        {
          *(_QWORD *)(v77 - 48) = v79;
          operator delete(v79);
        }
        v80 = *(void **)(v77 - 88);
        if (v80)
        {
          *(_QWORD *)(v77 - 80) = v80;
          operator delete(v80);
        }
        v77 -= 88;
      }
      while (v77 != v76);
      v78 = (void *)STACK[0x230];
    }
    STACK[0x238] = v76;
    operator delete(v78);
  }
  v81 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v81;
    operator delete(v81);
  }
  sub_2231874DC((uint64_t)&a27);
  if (SLOBYTE(STACK[0x28F]) < 0)
    operator delete((void *)STACK[0x278]);
  sub_223167354((uint64_t)&a33);
  sub_223167354(a11);
  _Unwind_Resume(a1);
}

void sub_22371ECC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_2231E94AC((uint64_t)&STACK[0x2B0]);
  sub_2231E94AC((uint64_t)&a32);
  sub_223167354(a11);
  _Unwind_Resume(a1);
}

void sub_22371ECF0(uint64_t a1, const void **a2, uint64_t a3, unsigned __int8 a4, uint64_t *a5, uint64_t a6, char a7, double a8, float32x4_t a9)
{
  uint64_t v9;
  uint64_t *v10;
  float32x2_t v11;
  float32x4_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  float32x4_t v23;
  float32x4_t v24;
  unint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  int32x2_t v28;
  simd_float3 *v29;
  float32x2_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  int v34;
  int v35;
  int v36;
  int v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  void *v42;
  float32x2_t v43;
  int64x2_t *v44;
  int64x2_t *v45;
  uint64_t v46;
  float32x2_t *v47;
  float32x2_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  float32x2_t *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  float32x2_t *v61;
  float32x2_t v62;
  float32x2_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  float32x2_t *v68;
  uint64_t v69;
  __int128 v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  float32x2_t *v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t *v78;
  int8x16_t v79;
  int8x16_t v80;
  float32x2_t v81;
  uint64_t v82;
  uint64_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  int8x16_t v88;
  simd_float3x3 v89;
  float32x2_t *v90;
  void *v91;
  simd_float3 *v92;
  simd_float3 v93;
  double v94;
  uint64_t v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  void *v103;
  void *v104;
  char *v105;
  char *v106;
  void *v107;
  char *v108;
  void *v109;
  void *v110;
  __n128 v111;
  int16x4_t v112;
  float32x2_t v113;
  float32x2_t v114;
  uint64_t v115;
  float32x2_t v116;
  float32x2_t v117;
  simd_float3 *v118;
  double v119;
  simd_float3 v120;
  uint64_t v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  simd_float3 *v128;
  simd_float3 v129;
  uint64_t v130;
  int32x2_t v131;
  simd_float3 *v132;
  float32x2_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 *v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float v141;
  float v142;
  float32x4_t v143;
  float v144;
  float v145;
  float v146;
  uint64_t v147;
  float32x4_t v148;
  float v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  float32x2_t v160;
  void *v161;
  float32x4_t v162;
  double v163;
  float32x2_t v164;
  void **v165;
  __int128 v166;
  _BYTE v167[32];
  float32x4_t v168;
  float32x4_t v169;
  float32x2_t v170;
  char *v171;
  uint64_t v172;
  int v173;
  float32x4_t v174[4];
  void *v175;
  __int128 v176;
  simd_float3 __p[64];
  uint64_t v178;

  v178 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a1 + 208);
  v155 = *(_QWORD *)(a1 + 216);
  if (v9 != v155)
  {
    v10 = a5;
    v154 = a4;
    v136 = (__int128 *)(a1 + 96);
    v151 = (_QWORD *)(a3 + 80);
    v11 = (float32x2_t)vdup_n_s32(0x3E924745u);
    v12 = (float32x4_t)xmmword_2245C4640;
    do
    {
      if (*((_BYTE *)v10 + 16))
      {
        v14 = *v10;
        v13 = v10[1];
        if (!*v10)
          goto LABEL_3;
        v15 = 16 * v14;
        v16 = (_QWORD *)v10[1];
        while (1)
        {
          v17 = *v16 == *(_QWORD *)v9 && v16[1] == *(_QWORD *)(v9 + 8);
          if (v17)
            break;
          v16 += 2;
          v15 -= 16;
          if (!v15)
          {
            v16 = (_QWORD *)(v13 + 16 * v14);
            break;
          }
        }
        if (v14 == ((uint64_t)v16 - v13) >> 4)
          goto LABEL_3;
      }
      v12.f32[0] = fabsf(*(float *)(v9 + 36));
      if (v12.f32[0] <= 0.052336)
        v18 = 2;
      else
        v18 = 4;
      a9.i32[0] = 1065330231;
      if (v12.f32[0] >= 0.99863)
        v19 = 1;
      else
        v19 = v18;
      sub_223F2B7AC(v9 + 16, v19, v174, v12, a9);
      v20 = 44;
      do
      {
        v21 = *(_DWORD *)(v9 + v20);
        if (v21)
          break;
        v17 = v20 == 208;
        v20 += 4;
      }
      while (!v17);
      if (v21)
      {
        v156 = ((unint64_t)sub_22372619C((unsigned int *)(v9 + 44)) - v9 - 44) >> 2;
        v172 = 0;
        v173 = 0;
        if (!v154)
          goto LABEL_35;
      }
      else
      {
        LOBYTE(v156) = 0;
        v172 = 0;
        v173 = 0;
        if (!v154)
        {
LABEL_35:
          v25 = sub_22456636C((unsigned __int8 *)v9);
          v33 = atomic_load((unsigned __int8 *)&qword_255795018);
          if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_255795018))
          {
            bzero(__p, 0x3FCuLL);
            v130 = 0;
            v131 = (int32x2_t)0x100000000;
            do
            {
              v132 = &__p[v130];
              v133 = vmul_f32(vcvt_f32_s32(v131), v11);
              v144 = v133.f32[0];
              v164 = vmul_f32(vcvt_f32_s32(vadd_s32(v131, (int32x2_t)0x200000002)), v11);
              v149 = fmodf(v133.f32[1], 1.0);
              *(float *)&v134 = fmodf(v144, 1.0);
              *((float *)&v134 + 1) = v149;
              v150 = v134;
              v145 = fmodf(v164.f32[1], 1.0);
              *(float *)&v135 = fmodf(v164.f32[0], 1.0);
              *((float *)&v135 + 1) = v145;
              v132->i64[0] = v150;
              v132->i64[1] = v135;
              v131 = vadd_s32(v131, (int32x2_t)0x400000004);
              ++v130;
            }
            while (v130 != 63);
LABEL_130:
            __p[63].i64[0] = 0x3E906F003F7F1400;
            __p[63].i32[2] = 1058102016;
            memcpy(dword_255794C18, __p, 0x3FCuLL);
            __cxa_guard_release(&qword_255795018);
          }
LABEL_36:
          v34 = dword_255794C18[(unsigned __int16)(3 * (v25 % 0xFF)
                                                 + 170
                                                 - 255
                                                 * ((unsigned __int16)((2057
                                                                      * (unsigned __int16)(3 * (v25 % 0xFF) + 170)) >> 16) >> 3))];
          v35 = dword_255794C18[(unsigned __int16)(2 * (v25 % 0xFF)
                                                 + 85
                                                 - 255
                                                 * ((unsigned __int16)((1029
                                                                      * (unsigned __int16)(2 * (v25 % 0xFF) + 85)) >> 16) >> 2))];
          LODWORD(v172) = dword_255794C18[v25 % 0xFF];
          HIDWORD(v172) = v35;
          v173 = v34;
          goto LABEL_37;
        }
      }
      v22 = sub_223340F28(v151, v9);
      if (v22)
      {
        v25 = sub_22456636C((unsigned __int8 *)v22[4]);
        v26 = atomic_load((unsigned __int8 *)&qword_255795018);
        if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_255795018))
        {
          bzero(__p, 0x3FCuLL);
          v27 = 0;
          v28 = (int32x2_t)0x100000000;
          do
          {
            v29 = &__p[v27];
            v30 = vmul_f32(vcvt_f32_s32(v28), v11);
            v141 = v30.f32[0];
            v160 = vmul_f32(vcvt_f32_s32(vadd_s32(v28, (int32x2_t)0x200000002)), v11);
            v146 = fmodf(v30.f32[1], 1.0);
            *(float *)&v31 = fmodf(v141, 1.0);
            *((float *)&v31 + 1) = v146;
            v147 = v31;
            v142 = fmodf(v160.f32[1], 1.0);
            *(float *)&v32 = fmodf(v160.f32[0], 1.0);
            *((float *)&v32 + 1) = v142;
            v29->i64[0] = v147;
            v29->i64[1] = v32;
            v28 = vadd_s32(v28, (int32x2_t)0x400000004);
            ++v27;
          }
          while (v27 != 63);
          goto LABEL_130;
        }
        goto LABEL_36;
      }
LABEL_37:
      if (*(_BYTE *)(v9 + 416) && *(_QWORD *)(v9 + 392) != *(_QWORD *)(v9 + 400))
      {
        v23.f32[0] = fabsf(*(float *)(v9 + 36));
        if (v23.f32[0] <= 0.052336)
          v36 = 2;
        else
          v36 = 4;
        v24.i32[0] = 1065330231;
        if (v23.f32[0] >= 0.99863)
          v37 = 1;
        else
          v37 = v36;
        sub_223F2B7AC(v9 + 16, v37, (float32x4_t *)v167, v23, v24);
        v38 = *(float32x4_t *)(a1 + 144);
        v39 = *(float32x4_t *)(a1 + 160);
        v40 = *(float32x4_t *)(a1 + 176);
        v41 = *(float32x4_t *)(a1 + 192);
        __p[0] = (simd_float3)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38, *(float *)v167), v39, *(float32x2_t *)v167, 1), v40, *(float32x4_t *)v167, 2), v41, *(float32x4_t *)v167, 3);
        __p[1] = (simd_float3)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38, *(float *)&v167[16]), v39, *(float32x2_t *)&v167[16], 1), v40, *(float32x4_t *)&v167[16], 2), v41, *(float32x4_t *)&v167[16], 3);
        __p[2] = (simd_float3)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38, v168.f32[0]), v39, *(float32x2_t *)v168.f32, 1), v40, v168, 2), v41, v168, 3);
        __p[3] = (simd_float3)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38, v169.f32[0]), v39, *(float32x2_t *)v169.f32, 1), v40, v169, 2), v41, v169, 3);
        sub_2237650E0(v136, __p, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v9 + 400) - *(_QWORD *)(v9 + 392)) >> 3), *(uint64_t **)(v9 + 392), (uint64_t)&v170, 1024.0);
        v176 = 0uLL;
        v175 = 0;
        sub_2236ADBC8((uint64_t)&v175, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v171[-*(_QWORD *)&v170] >> 3));
        v43 = v170;
        v42 = v171;
        v161 = v171;
        while ((void *)v43 != v42)
        {
          v45 = **(int64x2_t ***)&v43;
          v44 = *(int64x2_t **)(*(_QWORD *)&v43 + 8);
          memset(__p, 0, 24);
          v46 = (char *)v44 - (char *)v45;
          if (v44 != v45)
          {
            if (v46 < 0)
              sub_22316E078();
            v47 = (float32x2_t *)operator new((unint64_t)v46 >> 1);
            __p[0].i64[0] = (uint64_t)v47;
            __p[0].i64[1] = (uint64_t)v47;
            __p[1].i64[0] = (uint64_t)&v47[v46 >> 4];
            while (1)
            {
              while (1)
              {
                v48 = vmul_f32(vcvt_f32_f64(vcvtq_f64_s64(*v45)), (float32x2_t)vdup_n_s32(0x3A800000u));
                if ((unint64_t)v47 >= __p[1].i64[0])
                  break;
                *v47++ = v48;
                __p[0].i64[1] = (uint64_t)v47;
                if (++v45 == v44)
                  goto LABEL_83;
              }
              v49 = __p[0].i64[0];
              v50 = (char *)v47 - __p[0].i64[0];
              v51 = ((uint64_t)v47 - __p[0].i64[0]) >> 3;
              v52 = v51 + 1;
              if ((unint64_t)(v51 + 1) >> 61)
                sub_22316E078();
              v53 = __p[1].i64[0] - __p[0].i64[0];
              if ((__p[1].i64[0] - __p[0].i64[0]) >> 2 > v52)
                v52 = v53 >> 2;
              if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
                v54 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v54 = v52;
              if (v54)
              {
                if (v54 >> 61)
                  sub_223174E94();
                v55 = operator new(8 * v54);
                v56 = (float32x2_t *)((char *)v55 + 8 * v51);
                v57 = (uint64_t)v55 + 8 * v54;
                *v56 = v48;
                v58 = (uint64_t)&v56[1];
                v59 = (char *)v47 - v49;
                if (v47 == (float32x2_t *)v49)
                {
LABEL_70:
                  __p[0].i64[0] = (uint64_t)v56;
                  __p[0].i64[1] = v58;
                  __p[1].i64[0] = v57;
                  goto LABEL_71;
                }
              }
              else
              {
                v55 = 0;
                v56 = (float32x2_t *)(8 * v51);
                v57 = 0;
                v63 = (float32x2_t *)(8 * v51);
                *v63 = v48;
                v58 = (uint64_t)&v63[1];
                v59 = (char *)v47 - v49;
                if (v47 == (float32x2_t *)v49)
                  goto LABEL_70;
              }
              v60 = (unint64_t)(v59 - 8);
              if (v60 >= 0x168)
              {
                v64 = ((unint64_t)&v47[-1] - v49) & 0xFFFFFFFFFFFFFFF8;
                if (&v50[(_QWORD)v55 - 8 - v64] > &v50[(_QWORD)v55 - 8])
                {
                  v61 = v47;
                }
                else if ((float32x2_t *)((char *)&v47[-1] - v64) > &v47[-1])
                {
                  v61 = v47;
                }
                else if ((unint64_t)((char *)v47 - &v50[(_QWORD)v55]) >= 0x20)
                {
                  v65 = (v60 >> 3) + 1;
                  v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
                  v61 = &v47[v66 / 0xFFFFFFFFFFFFFFF8];
                  v56 = (float32x2_t *)((char *)v56 - v66);
                  v67 = &v50[(_QWORD)v55 - 16];
                  v68 = v47 - 2;
                  v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v70 = *(_OWORD *)v68->f32;
                    *((_OWORD *)v67 - 1) = *(_OWORD *)v68[-2].f32;
                    *(_OWORD *)v67 = v70;
                    v67 -= 32;
                    v68 -= 4;
                    v69 -= 4;
                  }
                  while (v69);
                  if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_66;
                }
                else
                {
                  v61 = v47;
                }
              }
              else
              {
                v61 = v47;
              }
              do
              {
                v62 = v61[-1];
                --v61;
                v56[-1] = v62;
                --v56;
              }
              while (v61 != (float32x2_t *)v49);
LABEL_66:
              v47 = (float32x2_t *)__p[0].i64[0];
              __p[0].i64[0] = (uint64_t)v56;
              __p[0].i64[1] = v58;
              __p[1].i64[0] = v57;
              if (v47)
              {
LABEL_71:
                operator delete(v47);
                v47 = (float32x2_t *)v58;
                __p[0].i64[1] = v58;
                if (++v45 == v44)
                {
LABEL_83:
                  *(_QWORD *)v167 = __p[0].i64[0];
                  *(_QWORD *)&v167[8] = v47;
                  *(_QWORD *)&v167[16] = __p[1].i64[0];
                  v71 = (_QWORD *)v176;
                  if ((unint64_t)v176 >= *((_QWORD *)&v176 + 1))
                    goto LABEL_86;
LABEL_46:
                  *v71 = 0;
                  v71[1] = 0;
                  v71[2] = 0;
                  *(_OWORD *)v71 = *(_OWORD *)v167;
                  v71[2] = *(_QWORD *)&v167[16];
                  *(_QWORD *)&v176 = v71 + 3;
                  goto LABEL_47;
                }
              }
              else
              {
                v47 = (float32x2_t *)v58;
                __p[0].i64[1] = v58;
                if (++v45 == v44)
                  goto LABEL_83;
              }
            }
          }
          memset(v167, 0, 24);
          v71 = (_QWORD *)v176;
          if ((unint64_t)v176 < *((_QWORD *)&v176 + 1))
            goto LABEL_46;
LABEL_86:
          *(_QWORD *)&v176 = sub_2236ADCEC((char **)&v175, (uint64_t)v167);
          if (*(_QWORD *)v167)
          {
            *(_QWORD *)&v167[8] = *(_QWORD *)v167;
            operator delete(*(void **)v167);
          }
LABEL_47:
          *(_QWORD *)&v43 += 24;
          v42 = v161;
        }
        v91 = v175;
        v165 = (void **)v175;
        v163 = *(double *)&v176;
        v166 = v176;
        sub_2245664AC((unsigned __int8 *)v9, __p);
        v92 = (simd_float3 *)operator new(0x28uLL);
        *(_QWORD *)v167 = v92;
        *(_OWORD *)&v167[8] = xmmword_2245C4640;
        v93 = __p[1];
        *v92 = __p[0];
        v92[1] = v93;
        v92[2].i32[0] = __p[2].i32[0];
        v92[2].i8[4] = 0;
        v94 = v163;
        sub_223739E78(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v163 - (_QWORD)v91) >> 3), (uint64_t)v91, (float32x2_t *)v174, (uint64_t)v167, v156, (uint64_t)&v172, a2, v95, v163, *(double *)v93.i64, v96, v97, v98, v99, v100, v101, *(double *)&a6, a7);
        if ((v167[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v167);
          if (v91)
            goto LABEL_96;
        }
        else if (v91)
        {
LABEL_96:
          if (*(void **)&v163 != v91)
          {
            v102 = v163;
            do
            {
              v104 = *(void **)(*(_QWORD *)&v102 - 24);
              *(_QWORD *)&v102 -= 24;
              v103 = v104;
              if (v104)
              {
                *(_QWORD *)(*(_QWORD *)&v94 - 16) = v103;
                operator delete(v103);
              }
              v94 = v102;
            }
            while (*(void **)&v102 != v91);
          }
          operator delete(v91);
          v105 = (char *)v170;
          if (!*(_QWORD *)&v170)
            goto LABEL_125;
LABEL_105:
          v106 = v171;
          v107 = v105;
          if (v171 != v105)
          {
            v108 = v171;
            do
            {
              v110 = (void *)*((_QWORD *)v108 - 3);
              v108 -= 24;
              v109 = v110;
              if (v110)
              {
                *((_QWORD *)v106 - 2) = v109;
                operator delete(v109);
              }
              v106 = v108;
            }
            while (v108 != v105);
            v107 = (void *)v170;
          }
          v171 = v105;
          goto LABEL_124;
        }
        v105 = (char *)v170;
        if (!*(_QWORD *)&v170)
          goto LABEL_125;
        goto LABEL_105;
      }
      if (*(_BYTE *)(v9 + 384))
      {
        v72 = *(_QWORD *)(v9 + 360);
        v73 = *(_QWORD *)(v9 + 368);
        if (v72 != v73)
        {
          v140 = *(float32x4_t *)(a1 + 144);
          v143 = *(float32x4_t *)(a1 + 160);
          v148 = *(float32x4_t *)(a1 + 176);
          v162 = *(float32x4_t *)(a1 + 192);
          v137 = v174[0];
          v138 = v174[1];
          v139 = v174[3];
          v74 = v73 - v72;
          v175 = 0;
          v176 = 0uLL;
          if ((unint64_t)(v73 - v72) >= 0x7FFFFFFFFFFFFFFDLL)
            sub_22316E078();
          v75 = (float32x2_t *)operator new(2 * v74);
          v78 = v75;
          v175 = v75;
          *(_QWORD *)&v176 = v75;
          *((_QWORD *)&v176 + 1) = &v75[v74 >> 2];
          if (!*(_BYTE *)(v9 + 384))
            sub_22324A974();
          v89.columns[1].i64[1] = v148.i64[1];
          v79 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v140, v137.f32[0]), v143, *(float32x2_t *)v137.f32, 1), v148, v137, 2), v162, v137, 3);
          v80 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v140, v138.f32[0]), v143, *(float32x2_t *)v138.f32, 1), v148, v138, 2), v162, v138, 3);
          v81.i32[1] = v139.i32[1];
          v89.columns[2] = (simd_float3)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v140, v139.f32[0]), v143, *(float32x2_t *)v139.f32, 1), v148, v139, 2), v162, v139, 3);
          v82 = *(_QWORD *)(v9 + 360);
          v83 = *(_QWORD *)(v9 + 368);
          v84 = *(float32x2_t *)(a1 + 96);
          v81.i32[0] = *(_DWORD *)(a1 + 104);
          v85 = *(float32x2_t *)(a1 + 108);
          v76.i32[0] = *(_DWORD *)(a1 + 116);
          v86 = *(float32x2_t *)(a1 + 120);
          v77.i32[0] = *(_DWORD *)(a1 + 128);
          v87 = (float32x2_t)vextq_s8(v79, v79, 8uLL).u64[0];
          *(float32x2_t *)v89.columns[0].f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v84, *(float *)v79.i32), v85, *(float32x2_t *)v79.i8, 1), v86, (float32x4_t)v79, 2);
          *(float32x2_t *)v89.columns[1].f32 = vmla_lane_f32(vmul_f32(v81, *(float32x2_t *)v79.i8), v76, *(float32x2_t *)v79.i8, 1);
          *(float32x2_t *)v79.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v84, *(float *)v80.i32), v85, *(float32x2_t *)v80.i8, 1), v86, (float32x4_t)v80, 2);
          v79.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(v81, *(float32x2_t *)v80.i8), v76, *(float32x2_t *)v80.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v80, v80, 8uLL), v77);
          *(float32x2_t *)v80.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v84, v89.columns[2].f32[0]), v85, *(float32x2_t *)v89.columns[2].f32, 1), v86, (float32x4_t)v89.columns[2], 2);
          v80.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(v81, *(float32x2_t *)v89.columns[2].f32), v76, *(float32x2_t *)v89.columns[2].f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v89.columns[2], (int8x16_t)v89.columns[2], 8uLL), v77);
          *(float32x2_t *)v89.columns[1].f32 = vmla_f32(*(float32x2_t *)v89.columns[1].f32, v87, v77);
          __p[0].i64[0] = v89.columns[0].i64[0];
          __p[0].i32[2] = v89.columns[1].i32[0];
          __p[1].i32[1] = v79.i32[2];
          *(uint64_t *)((char *)&__p[0].i64[1] + 4) = v79.i64[0];
          __p[2].i32[0] = v80.i32[2];
          __p[1].i64[1] = v80.i64[0];
          v89.columns[2] = (simd_float3)vextq_s8(vextq_s8(v79, v79, 0xCuLL), v79, 8uLL);
          v88 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)v89.columns[2], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v80, (int32x4_t)v80), v80, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79), v79, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v80, v80, 0xCuLL), v80, 8uLL));
          *(float32x2_t *)v89.columns[2].f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v89.columns[0].f32, *(float32x2_t *)v88.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v88.i8, 1), *(float32x2_t *)v89.columns[0].f32, 1);
          v89.columns[0] = (simd_float3)vextq_s8(v88, v88, 8uLL);
          *(float32x2_t *)v89.columns[2].f32 = vmla_f32(*(float32x2_t *)v89.columns[2].f32, *(float32x2_t *)v89.columns[0].f32, *(float32x2_t *)v89.columns[1].f32);
          if (v89.columns[2].f32[0] == 0.0)
          {
            v90 = v75;
          }
          else
          {
            v89.columns[0].f32[0] = 0.0 - v89.columns[2].f32[0];
            if (v89.columns[2].f32[0] >= 0.0)
              v89.columns[0].f32[0] = v89.columns[2].f32[0];
            v89.columns[1].i32[0] = 897988541;
            v90 = v75;
            if (v89.columns[0].f32[0] > 0.000001)
            {
              v111 = sub_22322BB84((uint64_t)__p, (uint64_t)v167, v89);
              if (v83 != v82)
              {
                v115 = 4 * ((v83 - v82) >> 2);
                do
                {
                  v111.n128_u16[0] = *(_WORD *)(v82 + v115 - 4);
                  v116 = (float32x2_t)vmovl_s16((int16x4_t)v111.n128_u64[0]).u64[0];
                  v116.f32[0] = (float)v116.i32[0];
                  v112.i16[0] = *(_WORD *)(v82 + v115 - 2);
                  v117 = (float32x2_t)vmovl_s16(v112).u64[0];
                  v117.f32[0] = (float)v117.i32[0];
                  v113.i32[0] = *(_DWORD *)&v167[20];
                  v114.i32[0] = v168.i32[0];
                  v170 = vdiv_f32(vadd_f32(*(float32x2_t *)&v167[24], vmla_n_f32(vmul_n_f32(*(float32x2_t *)v167, v116.f32[0]), *(float32x2_t *)&v167[12], v117.f32[0])), (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32(v114, vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v167, *(int8x16_t *)v167, 8uLL), v116), v117, v113)), 0));
                  v165 = &v175;
                  sub_2232EA538(&v165, &v170);
                  v115 -= 4;
                }
                while (v115);
              }
              v90 = (float32x2_t *)v175;
              v78 = (float32x2_t *)v176;
            }
          }
          sub_2245664AC((unsigned __int8 *)v9, __p);
          v118 = (simd_float3 *)operator new(0x28uLL);
          *(_QWORD *)v167 = v118;
          *(_OWORD *)&v167[8] = xmmword_2245C4640;
          v119 = *(double *)__p[0].i64;
          v120 = __p[1];
          *v118 = __p[0];
          v118[1] = v120;
          v118[2].i32[0] = __p[2].i32[0];
          v118[2].i8[4] = 0;
          sub_223739844(v78 - v90, v90, (float32x2_t *)v174, (uint64_t)v167, v156, &v172, a2, v121, v119, *(double *)v120.i64, v122, v123, v124, v125, v126, v127, *(double *)&a6, a7);
          if ((v167[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)v167);
            v107 = v175;
            if (!v175)
              goto LABEL_125;
LABEL_123:
            *(_QWORD *)&v176 = v107;
LABEL_124:
            operator delete(v107);
            goto LABEL_125;
          }
          v107 = v175;
          if (v175)
            goto LABEL_123;
        }
      }
LABEL_125:
      sub_2245664AC((unsigned __int8 *)v9, __p);
      v128 = (simd_float3 *)operator new(0x28uLL);
      *(_QWORD *)v167 = v128;
      *(_OWORD *)&v167[8] = xmmword_2245C4640;
      v129 = __p[1];
      *v128 = __p[0];
      v128[1] = v129;
      v128[2].i32[0] = __p[2].i32[0];
      v128[2].i8[4] = 0;
      sub_22373A3E0((float32x2_t *)v174, (uint64_t)v167, a2, a6, a7);
      v10 = a5;
      if ((v167[23] & 0x80000000) != 0)
        operator delete(*(void **)v167);
LABEL_3:
      v9 += 424;
    }
    while (v9 != v155);
  }
}

void sub_22371FA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;

  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22371FB00()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x22371FB1CLL);
  JUMPOUT(0x22371FB20);
}

void sub_22371FB38(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t (**v10)();
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  v13 = a1;
  *a4 = &off_24EC24788;
  sub_2236B4564(&v13, (void **)&unk_22464C600, a4 + 1);
  v10 = &off_24EC22138;
  sub_2236B487C((uint64_t)a4, &v11);
  sub_22371FC3C((uint64_t)&v10, a2, a3);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_22371FC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_2231DE1B4((uint64_t)&a9);
  sub_223167354(v9);
  _Unwind_Resume(a1);
}

void sub_22371FC28(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_22371FC3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int16 *v18;
  unsigned __int16 *v19;
  __int16 v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  __int16 v27;
  int v28;
  unint64_t v29;
  int v30;
  int v31;
  int v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;

  if (a2)
  {
    v3 = a3;
    v5 = 0;
    v35 = a3 + 424 * a2;
    do
    {
      v6 = *(std::__shared_weak_count **)(a1 + 16);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        v10 = *(_QWORD *)(a1 + 24);
        v11 = *(_DWORD *)(a1 + 32);
        v12 = *(_DWORD *)(a1 + 36);
        v13 = *(_DWORD *)(a1 + 40);
        v14 = *(_DWORD *)(a1 + 44);
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      else
      {
        v10 = *(_QWORD *)(a1 + 24);
        v11 = *(_DWORD *)(a1 + 32);
        v12 = *(_DWORD *)(a1 + 36);
        v13 = *(_DWORD *)(a1 + 40);
        v14 = *(_DWORD *)(a1 + 44);
      }
      v18 = *(__int16 **)(v3 + 264);
      v19 = *(unsigned __int16 **)(v3 + 272);
      if (v18 != (__int16 *)v19)
      {
        v20 = v11 - 1;
        if (v13 >= 0)
          v21 = v13;
        else
          v21 = -v13;
        do
        {
          if ((*v18 & 0x80000000) == 0 && (__int16)v12 > (int)(unsigned __int16)*v18)
          {
            v22 = v18[1] & ~(v18[1] >> 31);
            v23 = v18[2];
            if (v23 >= v20)
              v23 = v20;
            if (v22 <= v23)
            {
              v24 = v10 + v14 * (unsigned __int16)*v18;
              v25 = (__int16)(v23 + 1);
              v26 = (__int16)(v22 + 1);
              v27 = v25 <= v26 ? v22 + 1 : v23 + 1;
              v28 = (unsigned __int16)(v27 + ~(_WORD)v22);
              if (!v28)
                goto LABEL_48;
              if (v25 <= v26)
                LOWORD(v25) = v22 + 1;
              v29 = v21 * (unint64_t)(unsigned __int16)(v25 - 1 - v22);
              if (v22 > (__int16)(v25 - 1))
                goto LABEL_48;
              if (v29 > ((v13 * (unsigned __int16)(v18[1] & ~(v18[1] >> 15))) ^ (~v13 >> 31)))
                goto LABEL_48;
              if ((v29 & 0xFFFFFFFF00000000) != 0)
                goto LABEL_48;
              v30 = 0;
              v31 = v28 + 1;
              v32 = v31 & 0x1FFFE;
              do
              {
                *(_BYTE *)(v24 + (v13 * (__int16)(v22 + v30))) = v5;
                *(_BYTE *)(v24 + (v13 * (__int16)(v22 + v30 + 1))) = v5;
                v30 += 2;
              }
              while (v32 != v30);
              LOWORD(v22) = v22 + v32;
              if (v31 != v32)
              {
LABEL_48:
                do
                {
                  *(_BYTE *)(v24 + (v13 * (__int16)v22)) = v5;
                  v22 = (__int16)(v22 + 1);
                }
                while (v22 <= (__int16)v23);
              }
            }
          }
          v18 += 4;
        }
        while (v18 != (__int16 *)v19);
      }
      if (v6)
      {
        v33 = (unint64_t *)&v6->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v3 += 424;
      ++v5;
    }
    while (v3 != v35);
  }
}

void sub_22371FEDC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  unsigned __int8 v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unsigned __int8 v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  size_t v25;
  const char *v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  const char *v29;
  size_t v30;
  const char *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  size_t v39;
  std::__shared_weak_count_vtbl *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  int v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  void *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  unint64_t v113;
  _QWORD v114[3];
  __int128 v115;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v116;
  __int16 v117;
  std::string v118;
  void *__p[2];
  std::string::size_type v120;
  uint64_t (**v121)();
  __int128 v122;
  __int128 v123;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v125;
  const char *v126;
  int v127;
  const char *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  uint64_t v131;
  void (**v132)(void ***);
  __int128 v133;
  char v134;
  char v135;
  CVPixelBufferPoolRef *v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  uint64_t v139;
  _BYTE v140[40];
  void *v141[2];
  unint64_t v142;
  char v143;
  uint64_t v144;

  v144 = *MEMORY[0x24BDAC8D0];
  sub_2245664AC((unsigned __int8 *)a1, v140);
  v4 = operator new(0x28uLL);
  v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  *(_OWORD *)&v118.__r_.__value_.__r.__words[1] = xmmword_2245C4640;
  v5 = *(_OWORD *)&v140[16];
  *v4 = *(_OWORD *)v140;
  v4[1] = v5;
  *((_DWORD *)v4 + 8) = *(_DWORD *)&v140[32];
  *((_BYTE *)v4 + 36) = 0;
  v6 = std::string::insert(&v118, 0, "KeyframePlaneSegmentation_", 0x1AuLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v120 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = atomic_load((unsigned __int8 *)&qword_2540CC428);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC428))
  {
    qword_2540CC460 = 0;
    qword_2540CC458 = 0;
    qword_2540CC450 = (uint64_t)&qword_2540CC458;
    __cxa_atexit((void (*)(void *))sub_2232B5FA0, &qword_2540CC450, &dword_22314D000);
    __cxa_guard_release(&qword_2540CC428);
  }
  sub_223C8536C((uint64_t **)&qword_2540CC450, *(_QWORD *)(a1 + 136), 0x4C303038u, 1u, (std::__shared_weak_count_vtbl ***)&v136);
  sub_2242A7370(v136, (uint64_t)&v132);
  if (!v135)
  {
    v20 = atomic_load((unsigned __int8 *)&qword_2540CC448);
    if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC448))
    {
      sub_22455F53C(&v123);
      sub_223174DE4(v140, "cv3dapi.recon3d.kfplanes");
      sub_2232300E0((uint64_t **)&v123, (uint64_t)v140, &qword_2540CC440);
      if ((v140[23] & 0x80000000) != 0)
        operator delete(*(void **)v140);
      __cxa_guard_release(&qword_2540CC448);
    }
    v131 = qword_2540CC440;
    if (**(int **)(qword_2540CC440 + 56) > 5
      || (v21 = *(unsigned __int8 *)(qword_2540CC440 + 72),
          v22 = sub_22322F254(qword_2540CC440, "OSLogSurrogateAppender", 1, 0),
          v23 = v22,
          !v21)
      && !v22)
    {
LABEL_115:
      v122 = 0uLL;
      v121 = &off_24EC715B8;
      if (!v135)
        goto LABEL_116;
      goto LABEL_19;
    }
    v112 = v21;
    *(_QWORD *)&v123 = &v131;
    *((std::chrono::steady_clock::time_point *)&v123 + 1) = std::chrono::steady_clock::now();
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v125 = 5;
    v126 = "unknown file";
    v127 = 337;
    v129 = 0;
    v130 = 0;
    v128 = "unknown function";
    v24 = *(_QWORD *)v123;
    v110 = *(_QWORD *)v123;
    if (*(char *)(*(_QWORD *)v123 + 39) < 0)
    {
      v26 = *(const char **)(v24 + 16);
      v25 = *(_QWORD *)(v24 + 24);
      v113 = v23;
      v111 = *(_QWORD *)v123 + 16;
      v28 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v28 & 1) != 0)
        goto LABEL_33;
    }
    else
    {
      v25 = *(unsigned __int8 *)(*(_QWORD *)v123 + 39);
      v26 = (const char *)(*(_QWORD *)v123 + 16);
      v113 = v23;
      v111 = (uint64_t)v26;
      v27 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v27 & 1) != 0)
        goto LABEL_33;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v140);
      sub_223199C58("com.apple.cv3d", (unint64_t)v140, &xmmword_255788F40);
      if (v140[24] && (v140[23] & 0x80000000) != 0)
        operator delete(*(void **)v140);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_33:
    if (byte_255788F57 >= 0)
      v29 = (const char *)&xmmword_255788F40;
    else
      v29 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v30 = byte_255788F57;
    else
      v30 = *((_QWORD *)&xmmword_255788F40 + 1);
    v31 = v26;
    *(_QWORD *)v140 = os_log_create(v29, v26);
    v32 = &v140[8];
    if (v30 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v30 >= 0x17)
    {
      v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v33 = v30 | 7;
      v34 = v33 + 1;
      v32 = operator new(v33 + 1);
      *(_QWORD *)&v140[16] = v30;
      *(_QWORD *)&v140[24] = v34 | 0x8000000000000000;
      *(_QWORD *)&v140[8] = v32;
    }
    else
    {
      v140[31] = v30;
      if (!v30)
      {
LABEL_47:
        v32[v30] = 0;
        v140[32] = 1;
        v35 = v141;
        if (v25 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v25 >= 0x17)
        {
          v36 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v25 | 7) != 0x17)
            v36 = v25 | 7;
          v37 = v36 + 1;
          v35 = (void **)operator new(v36 + 1);
          v141[1] = (void *)v25;
          v142 = v37 | 0x8000000000000000;
          v141[0] = v35;
        }
        else
        {
          HIBYTE(v142) = v25;
          if (!v25)
            goto LABEL_55;
        }
        memmove(v35, v31, v25);
LABEL_55:
        *((_BYTE *)v35 + v25) = 0;
        v143 = 1;
        v38 = *(NSObject **)v140;
        if (SHIBYTE(v142) < 0)
          operator delete(v141[0]);
        if (v140[32] && (v140[31] & 0x80000000) != 0)
          operator delete(*(void **)&v140[8]);
        if (*(_QWORD *)v140)
          os_release(*(void **)v140);
        if (v113 && *(_QWORD *)(v113 + 24))
        {
          v39 = _os_log_pack_size();
          v40 = (std::__shared_weak_count_vtbl *)operator new(v39, (std::align_val_t)8uLL);
          v41 = (std::__shared_weak_count *)operator new();
          v42 = v41;
          v41->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v41->__shared_owners_;
          v41->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v41->__shared_weak_owners_ = 0;
          v41[1].__vftable = v40;
          *(_QWORD *)v140 = v40;
          *(_QWORD *)&v140[8] = v40;
          *(_QWORD *)&v140[16] = v41;
          do
            v44 = __ldxr(p_shared_owners);
          while (__stxr(v44 + 1, p_shared_owners));
          *(_QWORD *)&v140[24] = 0;
          *(_QWORD *)&v140[32] = 0;
          v141[0] = 0;
          do
            v45 = __ldaxr(p_shared_owners);
          while (__stlxr(v45 - 1, p_shared_owners));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v42);
          }
          v46 = *(_QWORD *)v140;
          *(_WORD *)_os_log_pack_fill() = 0;
          v47 = operator new();
          v48 = *(unsigned __int8 *)(v110 + 39);
          v49 = *(_QWORD *)(v110 + 16);
          v50 = *(_QWORD *)(v110 + 24);
          v51 = *(_OWORD *)&v140[24];
          *(_OWORD *)(v47 + 8) = *(_OWORD *)&v140[8];
          if ((v48 & 0x80u) != 0)
            v48 = v50;
          else
            v49 = v111;
          *(_QWORD *)v47 = v46;
          *(_QWORD *)&v140[8] = 0;
          *(_QWORD *)&v140[16] = 0;
          *(_OWORD *)(v47 + 24) = v51;
          *(_QWORD *)&v140[24] = 0;
          *(_QWORD *)&v140[32] = 0;
          *(_QWORD *)(v47 + 40) = v49;
          *(_QWORD *)(v47 + 48) = v48;
          *(_BYTE *)(v47 + 56) = 16;
          v138 = 0;
          v139 = v47;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v113 + 24) + 40))(*(_QWORD *)(v113 + 24), &v139);
          v52 = v139;
          v139 = 0;
          if (v52)
          {
            v53 = *(std::__shared_weak_count **)(v52 + 32);
            if (v53)
            {
              v54 = (unint64_t *)&v53->__shared_owners_;
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
            v56 = *(std::__shared_weak_count **)(v52 + 16);
            if (v56)
            {
              v57 = (unint64_t *)&v56->__shared_owners_;
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
            MEMORY[0x227684CE8](v52, 0x10F0C40B62ED6C6);
            v59 = v138;
            v138 = 0;
            if (v59)
            {
              v60 = *(std::__shared_weak_count **)(v59 + 32);
              if (v60)
              {
                v61 = (unint64_t *)&v60->__shared_owners_;
                do
                  v62 = __ldaxr(v61);
                while (__stlxr(v62 - 1, v61));
                if (!v62)
                {
                  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                  std::__shared_weak_count::__release_weak(v60);
                }
              }
              v63 = *(std::__shared_weak_count **)(v59 + 16);
              if (v63)
              {
                v64 = (unint64_t *)&v63->__shared_owners_;
                do
                  v65 = __ldaxr(v64);
                while (__stlxr(v65 - 1, v64));
                if (!v65)
                {
                  ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                  std::__shared_weak_count::__release_weak(v63);
                }
              }
              MEMORY[0x227684CE8](v59, 0x10F0C40B62ED6C6);
            }
          }
          v66 = *(std::__shared_weak_count **)&v140[32];
          v67 = v112;
          if (*(_QWORD *)&v140[32])
          {
            v68 = (unint64_t *)(*(_QWORD *)&v140[32] + 8);
            do
              v69 = __ldaxr(v68);
            while (__stlxr(v69 - 1, v68));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          v70 = *(std::__shared_weak_count **)&v140[16];
          if (*(_QWORD *)&v140[16])
          {
            v71 = (unint64_t *)(*(_QWORD *)&v140[16] + 8);
            do
              v72 = __ldaxr(v71);
            while (__stlxr(v72 - 1, v71));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
        }
        else
        {
          os_log_type_enabled(v38, OS_LOG_TYPE_ERROR);
          *(_WORD *)v140 = 0;
          v73 = (void *)_os_log_send_and_compose_impl();
          v67 = v112;
          if (v73)
            free(v73);
        }
        if (v67)
        {
          sub_22322C138((uint64_t)&v123, "Failed to create pixel buffer");
          sub_223182C08((uint64_t)&v123);
        }
        sub_223182C08((uint64_t)&v123);
        v74 = v130;
        if (v130)
        {
          v75 = (unint64_t *)&v130->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        goto LABEL_115;
      }
    }
    memmove(v32, v29, v30);
    goto LABEL_47;
  }
  sub_2242AA1D0((uint64_t)&v132, v140);
  if (*(_QWORD *)&v140[8])
  {
    v10 = **(_QWORD **)&v140[8];
    v9 = *(std::__shared_weak_count **)(*(_QWORD *)&v140[8] + 8);
    if (!v9)
      goto LABEL_9;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (v10)
        goto LABEL_11;
    }
    else
    {
LABEL_9:
      if (v10)
        goto LABEL_11;
    }
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/KeyframePlaneSegmentation.cpp", 342, (uint64_t)"buffer_iosurface", 16, (uint64_t)"Expect IOSurface backed pixel buffer", 36, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_11:
  sub_2244E116C((uint64_t)v140, (uint64_t *)__p);
  v121 = &off_24EC715B8;
  v122 = v133;
  if (*((_QWORD *)&v133 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_QWORD *)v140 = &off_24EC76F28;
  v16 = *(std::__shared_weak_count **)&v140[16];
  if (*(_QWORD *)&v140[16])
  {
    v17 = (unint64_t *)(*(_QWORD *)&v140[16] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      if (!v135)
        goto LABEL_116;
LABEL_19:
      (*v132)((void ***)&v132);
      v19 = v137;
      if (!v137)
        goto LABEL_121;
      goto LABEL_118;
    }
  }
  if (v135)
    goto LABEL_19;
LABEL_116:
  if (v134 < 0)
  {
    operator delete((void *)v133);
    v19 = v137;
    if (!v137)
      goto LABEL_121;
  }
  else
  {
    v19 = v137;
    if (!v137)
      goto LABEL_121;
  }
LABEL_118:
  v77 = (unint64_t *)&v19->__shared_owners_;
  do
    v78 = __ldaxr(v77);
  while (__stlxr(v78 - 1, v77));
  if (v78)
  {
LABEL_121:
    if ((SHIBYTE(v120) & 0x80000000) == 0)
      goto LABEL_122;
    goto LABEL_126;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if ((SHIBYTE(v120) & 0x80000000) == 0)
  {
LABEL_122:
    if ((SHIBYTE(v118.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_123;
    goto LABEL_127;
  }
LABEL_126:
  operator delete(__p[0]);
  if ((SHIBYTE(v118.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_123:
    v79 = v122;
    if (!(_QWORD)v122)
      goto LABEL_171;
    goto LABEL_128;
  }
LABEL_127:
  operator delete(v118.__r_.__value_.__l.__data_);
  v79 = v122;
  if (!(_QWORD)v122)
    goto LABEL_171;
LABEL_128:
  v80 = *(std::__shared_weak_count **)(v79 + 8);
  if (!v80)
    goto LABEL_133;
  v81 = (unint64_t *)&v80->__shared_owners_;
  do
    v82 = __ldxr(v81);
  while (__stxr(v82 + 1, v81));
  do
    v83 = __ldaxr(v81);
  while (__stlxr(v83 - 1, v81));
  if (!v83)
  {
    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
    std::__shared_weak_count::__release_weak(v80);
    v84 = (uint64_t *)v122;
    if (!(_QWORD)v122)
      goto LABEL_171;
  }
  else
  {
LABEL_133:
    v84 = (uint64_t *)v122;
    if (!(_QWORD)v122)
      goto LABEL_171;
  }
  v86 = *v84;
  v85 = (std::__shared_weak_count *)v84[1];
  if (v85)
  {
    v87 = (unint64_t *)&v85->__shared_owners_;
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
    do
      v89 = __ldaxr(v87);
    while (__stlxr(v89 - 1, v87));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
      if (v86)
        goto LABEL_140;
LABEL_171:
      a2[1] = 0;
      a2[2] = 0;
      *a2 = &off_24EC715B8;
      goto LABEL_172;
    }
  }
  if (!v86)
    goto LABEL_171;
LABEL_140:
  v90 = (uint64_t *)v122;
  *(_OWORD *)&v140[8] = v122;
  if (*((_QWORD *)&v122 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v122 + 1) + 8);
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 1, v91));
  }
  *(_QWORD *)v140 = &off_24EC71548;
  if (v90)
  {
    v94 = *v90;
    v93 = (std::__shared_weak_count *)v90[1];
    if (v93)
    {
      v95 = (unint64_t *)&v93->__shared_owners_;
      do
        v96 = __ldxr(v95);
      while (__stxr(v96 + 1, v95));
      do
        v97 = __ldaxr(v95);
      while (__stlxr(v97 - 1, v95));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v94)
      sub_2242AE8BC(*(uint64_t *)&v140[8]);
  }
  sub_2242A773C((uint64_t)v140, (uint64_t *)&v123);
  v132 = (void (**)(void ***))&v123;
  *(_QWORD *)&v133 = &unk_22464C600;
  sub_223316AD0((void ***)&v132);
  v115 = v123;
  v116 = rep;
  v114[1] = 0;
  v114[2] = 0;
  v114[0] = &off_24EC22138;
  v117 = 0;
  sub_22371FC3C((uint64_t)v114, 0x21CFB2B78C13521DLL * ((uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 3), *(_QWORD *)(a1 + 208));
  v98 = *(uint64_t **)&v140[8];
  *a2 = &off_24EC715B8;
  *(_OWORD *)(a2 + 1) = v122;
  v122 = 0uLL;
  if (v98)
  {
    v100 = *v98;
    v99 = (std::__shared_weak_count *)v98[1];
    if (v99)
    {
      v101 = (unint64_t *)&v99->__shared_owners_;
      do
        v102 = __ldxr(v101);
      while (__stxr(v102 + 1, v101));
      do
        v103 = __ldaxr(v101);
      while (__stlxr(v103 - 1, v101));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    if (v100)
      sub_2242AEA98(*(uint64_t *)&v140[8]);
  }
  *(_QWORD *)v140 = &off_24EC715B8;
  v104 = *(std::__shared_weak_count **)&v140[16];
  if (*(_QWORD *)&v140[16])
  {
    v105 = (unint64_t *)(*(_QWORD *)&v140[16] + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
LABEL_172:
  v121 = &off_24EC715B8;
  v107 = (std::__shared_weak_count *)*((_QWORD *)&v122 + 1);
  if (*((_QWORD *)&v122 + 1))
  {
    v108 = (unint64_t *)(*((_QWORD *)&v122 + 1) + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
}

void sub_223720BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;

  if (*(_BYTE *)(v38 - 152) && *(char *)(v38 - 153) < 0)
    operator delete(*(void **)(v38 - 176));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a38);
  sub_2232B6080(v38 - 248);
  sub_223167354(v38 - 208);
  if (a33 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223720DC8(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_223720E20(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC580A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223720E30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC580A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223720E60(uint64_t a1)
{
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*(void **)(a1 + 32));
    return;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_5;
}

void sub_223720EB0(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x227684CE8);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_6;
}

void sub_223720F0C(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v2 = *(char **)a1;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8BBLL)
      sub_22316E078();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 88 * a2;
    v6 = (char *)operator new(88 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        *(_OWORD *)(v10 - 88) = *(_OWORD *)&v4[v9 - 88];
        *((_QWORD *)v10 - 9) = *(_QWORD *)&v4[v9 - 72];
        *((_QWORD *)v11 - 11) = 0;
        *((_QWORD *)v11 - 10) = 0;
        *((_QWORD *)v11 - 9) = 0;
        *((_DWORD *)v10 - 16) = *(_DWORD *)&v4[v9 - 64];
        *(_OWORD *)(v10 - 56) = *(_OWORD *)&v4[v9 - 56];
        v12 = *(_QWORD *)&v4[v9 - 32];
        *((_QWORD *)v10 - 5) = *(_QWORD *)&v4[v9 - 40];
        *((_QWORD *)v11 - 7) = 0;
        *((_QWORD *)v11 - 6) = 0;
        *((_QWORD *)v11 - 5) = 0;
        *((_QWORD *)v10 - 4) = v12;
        *((_DWORD *)v10 - 6) = *(_DWORD *)&v4[v9 - 24];
        *((_DWORD *)v10 - 5) = *(_DWORD *)&v4[v9 - 20];
        *(v10 - 16) = 0;
        *(v10 - 8) = 0;
        if (v4[v9 - 8])
        {
          *((_QWORD *)v10 - 2) = *((_QWORD *)v11 - 2);
          *(v10 - 8) = 1;
        }
        v9 -= 88;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v13 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v13 != v2)
      {
        v14 = (void *)*((_QWORD *)v13 - 7);
        if (v14)
        {
          *((_QWORD *)v13 - 6) = v14;
          operator delete(v14);
        }
        v15 = (void *)*((_QWORD *)v13 - 11);
        if (v15)
        {
          *((_QWORD *)v13 - 10) = v15;
          operator delete(v15);
        }
        v13 -= 88;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

char *sub_223721094(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  void *v21;

  v3 = 0x2E8BA2E8BA2E8BA3 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_22316E078();
  if (0x5D1745D1745D1746 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5D1745D1745D1746 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x1745D1745D1745DLL)
    v6 = 0x2E8BA2E8BA2E8BALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x2E8BA2E8BA2E8BALL)
      sub_223174E94();
    v7 = (char *)operator new(88 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[88 * v3];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *((_DWORD *)v8 + 6) = *(_DWORD *)(a2 + 24);
  *((_OWORD *)v8 + 2) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 48) = 0;
  *((_QWORD *)v8 + 6) = v9;
  *((_QWORD *)v8 + 7) = v10;
  *((_QWORD *)v8 + 8) = *(_QWORD *)(a2 + 64);
  v8[72] = 0;
  v8[80] = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    *((_QWORD *)v8 + 9) = *(_QWORD *)(a2 + 72);
    v8[80] = 1;
  }
  v11 = &v7[88 * v6];
  v12 = v8 + 88;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v8;
    a1[1] = v12;
    a1[2] = v11;
  }
  else
  {
    v15 = 0;
    do
    {
      v16 = &v8[v15];
      v17 = &v14[v15];
      *((_QWORD *)v16 - 10) = 0;
      *((_QWORD *)v16 - 9) = 0;
      *(_OWORD *)(v16 - 88) = *(_OWORD *)&v14[v15 - 88];
      *((_QWORD *)v16 - 9) = *(_QWORD *)&v14[v15 - 72];
      *((_QWORD *)v17 - 10) = 0;
      *((_QWORD *)v17 - 9) = 0;
      *((_QWORD *)v17 - 11) = 0;
      *((_DWORD *)v16 - 16) = *(_DWORD *)&v14[v15 - 64];
      *((_QWORD *)v16 - 6) = 0;
      *((_QWORD *)v16 - 5) = 0;
      *(_OWORD *)(v16 - 56) = *(_OWORD *)&v14[v15 - 56];
      v18 = *(_QWORD *)&v14[v15 - 32];
      *((_QWORD *)v16 - 5) = *(_QWORD *)&v14[v15 - 40];
      *((_QWORD *)v17 - 7) = 0;
      *((_QWORD *)v17 - 6) = 0;
      *((_QWORD *)v17 - 5) = 0;
      *((_QWORD *)v16 - 4) = v18;
      *((_DWORD *)v16 - 6) = *(_DWORD *)&v14[v15 - 24];
      *((_DWORD *)v16 - 5) = *(_DWORD *)&v14[v15 - 20];
      *(v16 - 16) = 0;
      *(v16 - 8) = 0;
      if (v14[v15 - 8])
      {
        *((_QWORD *)v16 - 2) = *((_QWORD *)v17 - 2);
        *(v16 - 8) = 1;
      }
      v15 -= 88;
    }
    while (&v14[v15] != v13);
    v14 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = &v8[v15];
    a1[1] = v12;
    a1[2] = v11;
    while (v19 != v14)
    {
      v20 = (void *)*((_QWORD *)v19 - 7);
      if (v20)
      {
        *((_QWORD *)v19 - 6) = v20;
        operator delete(v20);
      }
      v21 = (void *)*((_QWORD *)v19 - 11);
      if (v21)
      {
        *((_QWORD *)v19 - 10) = v21;
        operator delete(v21);
      }
      v19 -= 88;
    }
  }
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2237212D0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v17 = v4;
    v18 = v5;
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 8);
    v18 = 0;
    v15 = v4;
    v16 = 0;
  }
  sub_2237213DC(a2, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2237213C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_2237213DC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 72))(&v20, v3, 32);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_22372152C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223721540(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  const char *v17;
  unsigned __int8 v18;
  const char *v19;
  size_t v20;
  const char *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  size_t v29;
  std::__shared_weak_count_vtbl *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  int v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  size_t v77;
  unint64_t v78;
  unint64_t v79;
  char **v80;
  char **v81;
  char *v82;
  char *v83;
  uint64_t v84;
  _OWORD *v85;
  __int128 v86;
  _OWORD *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  _OWORD *v94;
  _QWORD *v95;
  unint64_t v96;
  void *v97;
  void *v98;
  _BYTE *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  const void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  void *v112;
  void *v113;
  char *v114;
  void *v115;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t v117;
  int v118;
  const char *v119;
  int v120;
  const char *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  __int128 v124;
  unint64_t v125;
  __int128 v126;
  _BYTE object[48];
  size_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  __int128 __dst;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  _BYTE v144[24];
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  v143 = 0;
  v141 = 0u;
  v142 = 0u;
  v139 = 0u;
  v140 = 0u;
  v137 = 0u;
  v138 = 0u;
  v135 = 0u;
  v136 = 0u;
  __dst = 0u;
  v134 = 0u;
  v9 = a2 + 48;
  v8 = *(const void **)(a2 + 48);
  v10 = *(_QWORD *)(v9 + 8) - (_QWORD)v8;
  if ((unint64_t)v10 >= 0xA9)
  {
    v11 = atomic_load((unsigned __int8 *)&qword_2540CC470);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC470))
    {
      sub_22455F53C(&v115);
      sub_223174DE4(object, "cv3dapi.recon3d.kfplanes");
      sub_2232300E0((uint64_t **)&v115, (uint64_t)object, &qword_2540CC468);
      if ((object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_guard_release(&qword_2540CC470);
    }
    *(_QWORD *)&v110 = qword_2540CC468;
    if (**(int **)(qword_2540CC468 + 56) > 4)
      goto LABEL_99;
    v12 = *(unsigned __int8 *)(qword_2540CC468 + 72);
    v13 = sub_22322F254(qword_2540CC468, "OSLogSurrogateAppender", 1, 0);
    v14 = v13;
    if (!v12 && !v13)
      goto LABEL_99;
    v108 = a1;
    v115 = &v110;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v117 = std::chrono::system_clock::now().__d_.__rep_;
    v118 = 4;
    v119 = "unknown file";
    v120 = 125;
    v122 = 0;
    v123 = 0;
    v121 = "unknown function";
    v15 = *(_QWORD *)v115;
    v101 = *(_QWORD *)v115;
    if (*(char *)(*(_QWORD *)v115 + 39) < 0)
    {
      v17 = *(const char **)(v15 + 16);
      v16 = *(_QWORD *)(v15 + 24);
    }
    else
    {
      v16 = *(unsigned __int8 *)(*(_QWORD *)v115 + 39);
      v17 = (const char *)(*(_QWORD *)v115 + 16);
    }
    v102 = *(_QWORD *)v115 + 16;
    v103 = v12;
    v106 = *(_QWORD *)(a2 + 56);
    v104 = a4;
    v105 = *(_QWORD *)(a2 + 48);
    v18 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v19 = (const char *)&xmmword_255788F40;
    else
      v19 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v20 = byte_255788F57;
    else
      v20 = *((_QWORD *)&xmmword_255788F40 + 1);
    v21 = v17;
    *(_QWORD *)object = os_log_create(v19, v17);
    v22 = &object[8];
    if (v20 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v20 >= 0x17)
    {
      v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v23 = v20 | 7;
      v24 = v23 + 1;
      v22 = operator new(v23 + 1);
      *(_QWORD *)&object[16] = v20;
      *(_QWORD *)&object[24] = v24 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v22;
    }
    else
    {
      object[31] = v20;
      if (!v20)
      {
LABEL_24:
        v22[v20] = 0;
        object[32] = 1;
        v25 = &object[40];
        if (v16 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v16 >= 0x17)
        {
          v26 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17)
            v26 = v16 | 7;
          v27 = v26 + 1;
          v25 = operator new(v26 + 1);
          v128 = v16;
          v129 = v27 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v25;
        }
        else
        {
          HIBYTE(v129) = v16;
          if (!v16)
          {
LABEL_32:
            v25[v16] = 0;
            LOBYTE(v130) = 1;
            v28 = *(NSObject **)object;
            if (SHIBYTE(v129) < 0)
              operator delete(*(void **)&object[40]);
            a1 = v108;
            if (object[32] && (object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v14 && *(_QWORD *)(v14 + 24))
            {
              v29 = _os_log_pack_size();
              v30 = (std::__shared_weak_count_vtbl *)operator new(v29, (std::align_val_t)8uLL);
              v31 = (std::__shared_weak_count *)operator new();
              v32 = v31;
              v31->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v31->__shared_owners_;
              v31->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v31->__shared_weak_owners_ = 0;
              v31[1].__vftable = v30;
              *(_QWORD *)object = v30;
              *(_QWORD *)&object[8] = v30;
              *(_QWORD *)&object[16] = v31;
              do
                v34 = __ldxr(p_shared_owners);
              while (__stxr(v34 + 1, p_shared_owners));
              memset(&object[24], 0, 24);
              do
                v35 = __ldaxr(p_shared_owners);
              while (__stlxr(v35 - 1, p_shared_owners));
              if (!v35)
              {
                ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                std::__shared_weak_count::__release_weak(v32);
              }
              v36 = *(_QWORD *)object;
              v37 = _os_log_pack_fill();
              *(_DWORD *)v37 = 134283777;
              *(_QWORD *)(v37 + 4) = (v106 - v105) >> 2;
              *(_WORD *)(v37 + 12) = 1025;
              *(_DWORD *)(v37 + 14) = 42;
              v38 = operator new();
              v39 = *(unsigned __int8 *)(v101 + 39);
              v40 = v102;
              if ((v39 & 0x80u) != 0)
              {
                v40 = *(_QWORD *)(v101 + 16);
                v39 = *(_QWORD *)(v101 + 24);
              }
              *(_QWORD *)v38 = v36;
              *(_OWORD *)(v38 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v38 + 24) = *(_OWORD *)&object[24];
              *(_QWORD *)&object[24] = 0;
              *(_QWORD *)&object[32] = 0;
              *(_QWORD *)(v38 + 40) = v40;
              *(_QWORD *)(v38 + 48) = v39;
              *(_BYTE *)(v38 + 56) = 16;
              *(_QWORD *)&v124 = 0;
              *(_QWORD *)v144 = v38;
              (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v14 + 24) + 40))(*(_QWORD *)(v14 + 24), v144);
              v41 = *(_QWORD *)v144;
              *(_QWORD *)v144 = 0;
              a4 = v104;
              if (v41)
              {
                v42 = *(std::__shared_weak_count **)(v41 + 32);
                if (v42)
                {
                  v43 = (unint64_t *)&v42->__shared_owners_;
                  do
                    v44 = __ldaxr(v43);
                  while (__stlxr(v44 - 1, v43));
                  if (!v44)
                  {
                    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                    std::__shared_weak_count::__release_weak(v42);
                  }
                }
                v45 = *(std::__shared_weak_count **)(v41 + 16);
                if (v45)
                {
                  v46 = (unint64_t *)&v45->__shared_owners_;
                  do
                    v47 = __ldaxr(v46);
                  while (__stlxr(v47 - 1, v46));
                  if (!v47)
                  {
                    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                    std::__shared_weak_count::__release_weak(v45);
                  }
                }
                MEMORY[0x227684CE8](v41, 0x10F0C40B62ED6C6);
                v48 = v124;
                *(_QWORD *)&v124 = 0;
                if (v48)
                {
                  v49 = *(std::__shared_weak_count **)(v48 + 32);
                  if (v49)
                  {
                    v50 = (unint64_t *)&v49->__shared_owners_;
                    do
                      v51 = __ldaxr(v50);
                    while (__stlxr(v51 - 1, v50));
                    if (!v51)
                    {
                      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                      std::__shared_weak_count::__release_weak(v49);
                    }
                  }
                  v52 = *(std::__shared_weak_count **)(v48 + 16);
                  if (v52)
                  {
                    v53 = (unint64_t *)&v52->__shared_owners_;
                    do
                      v54 = __ldaxr(v53);
                    while (__stlxr(v54 - 1, v53));
                    if (!v54)
                    {
                      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                      std::__shared_weak_count::__release_weak(v52);
                    }
                  }
                  MEMORY[0x227684CE8](v48, 0x10F0C40B62ED6C6);
                }
              }
              if (v103)
              {
                *(_DWORD *)v144 = 134283777;
                *(_QWORD *)&v144[4] = (v106 - v105) >> 2;
                *(_WORD *)&v144[12] = 1025;
                *(_DWORD *)&v144[14] = 42;
                v100 = 18;
                v99 = v144;
                v55 = (void *)_os_log_send_and_compose_impl();
              }
              else
              {
                v55 = 0;
              }
              v56 = *(std::__shared_weak_count **)&object[32];
              if (*(_QWORD *)&object[32])
              {
                v57 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                do
                  v58 = __ldaxr(v57);
                while (__stlxr(v58 - 1, v57));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                  std::__shared_weak_count::__release_weak(v56);
                }
              }
              v59 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v60 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v61 = __ldaxr(v60);
                while (__stlxr(v61 - 1, v60));
                if (!v61)
                {
                  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                  std::__shared_weak_count::__release_weak(v59);
                }
              }
              a1 = v108;
              if (!v103)
              {
LABEL_92:
                if (!v55)
                {
LABEL_94:
                  sub_223182C08((uint64_t)&v115);
                  v62 = v123;
                  if (v123)
                  {
                    v63 = (unint64_t *)&v123->__shared_owners_;
                    do
                      v64 = __ldaxr(v63);
                    while (__stlxr(v64 - 1, v63));
                    if (!v64)
                    {
                      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                      std::__shared_weak_count::__release_weak(v62);
                    }
                  }
LABEL_99:
                  v8 = *(const void **)(a2 + 48);
                  v10 = *(_QWORD *)(a2 + 56) - (_QWORD)v8;
                  goto LABEL_100;
                }
LABEL_93:
                free(v55);
                goto LABEL_94;
              }
              sub_22322C138((uint64_t)&v115, (char *)v55, v99, v100);
            }
            else
            {
              os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
              if (!v103)
              {
                *(_DWORD *)object = 134283777;
                *(_QWORD *)&object[4] = (v106 - v105) >> 2;
                *(_WORD *)&object[12] = 1025;
                *(_DWORD *)&object[14] = 42;
                v55 = (void *)_os_log_send_and_compose_impl();
                a4 = v104;
                if (!v55)
                  goto LABEL_94;
                goto LABEL_93;
              }
              *(_DWORD *)object = 134283777;
              *(_QWORD *)&object[4] = (v106 - v105) >> 2;
              *(_WORD *)&object[12] = 1025;
              *(_DWORD *)&object[14] = 42;
              v55 = (void *)_os_log_send_and_compose_impl();
              a4 = v104;
              sub_22322C138((uint64_t)&v115, (char *)v55, object, 18);
            }
            sub_223182C08((uint64_t)&v115);
            goto LABEL_92;
          }
        }
        memmove(v25, v21, v16);
        goto LABEL_32;
      }
    }
    memmove(v22, v19, v20);
    goto LABEL_24;
  }
LABEL_100:
  v65 = v10 >> 2;
  if (v65 >= 0x2A)
    v65 = 42;
  if (v65)
    memcpy(&__dst, v8, 4 * v65);
  v113 = 0;
  v114 = 0;
  v112 = 0;
  if (a3)
  {
    if (a3 < 0)
      sub_2236EA0B4();
    v66 = (char *)operator new(8 * a3);
    v67 = &v66[8 * a3];
    v112 = v66;
    v114 = v67;
    memcpy(v66, a4, 8 * a3 - 2);
    v113 = v67;
  }
  sub_223ECB71C((__int16 **)object, (uint64_t)&v112);
  if (v112)
  {
    v113 = v112;
    operator delete(v112);
  }
  sub_223ECE884((unsigned __int16 **)object, (int8x16_t **)&v110);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v68 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = v68;
  v69 = v139;
  *(_OWORD *)(a1 + 156) = v140;
  v70 = v142;
  *(_OWORD *)(a1 + 172) = v141;
  *(_OWORD *)(a1 + 188) = v70;
  v71 = v135;
  *(_OWORD *)(a1 + 92) = v136;
  v72 = v138;
  *(_OWORD *)(a1 + 108) = v137;
  *(_OWORD *)(a1 + 124) = v72;
  *(_OWORD *)(a1 + 140) = v69;
  v73 = v134;
  *(_OWORD *)(a1 + 44) = __dst;
  v74 = *(_QWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 28) = v74;
  *(_QWORD *)(a1 + 204) = v143;
  *(_OWORD *)(a1 + 60) = v73;
  *(_OWORD *)(a1 + 76) = v71;
  v75 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 224) = v75;
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  if (*(_BYTE *)(a2 + 120))
  {
    v76 = *(unsigned __int8 *)(a2 + 112);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 248) = v76;
    *(_BYTE *)(a1 + 256) = 1;
  }
  *(_OWORD *)(a1 + 264) = *(_OWORD *)object;
  *(_QWORD *)(a1 + 280) = *(_QWORD *)&object[16];
  *(_QWORD *)object = 0;
  *(_QWORD *)&object[8] = 0;
  *(_DWORD *)(a1 + 288) = *(_DWORD *)&object[24];
  *(_OWORD *)(a1 + 296) = *(_OWORD *)&object[32];
  *(_QWORD *)&object[16] = 0;
  *(_QWORD *)&object[32] = 0;
  *(_QWORD *)&object[40] = 0;
  v77 = v128;
  v78 = v129;
  v128 = 0;
  *(_QWORD *)(a1 + 312) = v77;
  *(_QWORD *)(a1 + 320) = v78;
  *(_QWORD *)(a1 + 328) = v130;
  *(_BYTE *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  if (v132)
  {
    *(_QWORD *)(a1 + 336) = v131;
    *(_BYTE *)(a1 + 344) = 1;
  }
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 360) = v110;
  *(_QWORD *)(a1 + 376) = v111;
  v110 = 0uLL;
  v111 = 0;
  *(_BYTE *)(a1 + 384) = 1;
  if (*(_BYTE *)(a2 + 184))
  {
    v107 = a1 + 264;
    v109 = a1;
    v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160)) >> 3);
    v125 = 0;
    v124 = 0uLL;
    sub_2232EA6AC((uint64_t)&v124, v79);
    v80 = *(char ***)(a2 + 160);
    v81 = *(char ***)(a2 + 168);
    if (v80 != v81)
    {
      while (1)
      {
        v82 = *v80;
        v83 = v80[1];
        v115 = 0;
        rep = 0;
        v117 = 0;
        v84 = v83 - v82;
        if (v83 != v82)
          break;
        memset(v144, 0, sizeof(v144));
        v95 = (_QWORD *)*((_QWORD *)&v124 + 1);
        if (*((_QWORD *)&v124 + 1) < v125)
          goto LABEL_116;
LABEL_143:
        *((_QWORD *)&v124 + 1) = sub_2232EA89C((char **)&v124, (uint64_t)v144);
        if (*(_QWORD *)v144)
        {
          *(_QWORD *)&v144[8] = *(_QWORD *)v144;
          operator delete(*(void **)v144);
        }
LABEL_117:
        v80 += 3;
        if (v80 == v81)
          goto LABEL_145;
      }
      if (v84 < 0)
        sub_22316E078();
      v85 = operator new(v83 - v82);
      v115 = v85;
      rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v85;
      v117 = (unint64_t)&v85[v84 >> 4];
      while (1)
      {
        while (1)
        {
          while (1)
          {
            v126 = *(_OWORD *)v82;
            if ((unint64_t)v85 >= v117)
              break;
            v86 = *(_OWORD *)v82;
            v82 += 16;
            *v85++ = v86;
            rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v85;
            if (v82 == v83)
              goto LABEL_140;
          }
          v87 = v115;
          v88 = ((char *)v85 - (_BYTE *)v115) >> 4;
          v89 = v88 + 1;
          if ((unint64_t)(v88 + 1) >> 60)
            sub_22316E078();
          v90 = v117 - (_QWORD)v115;
          if ((uint64_t)(v117 - (_QWORD)v115) >> 3 > v89)
            v89 = v90 >> 3;
          v91 = (unint64_t)v90 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v89;
          if (v91)
          {
            if (v91 >> 60)
              sub_223174E94();
            v92 = (char *)operator new(16 * v91);
          }
          else
          {
            v92 = 0;
          }
          v93 = &v92[16 * v88];
          *(_OWORD *)v93 = v126;
          v94 = v93 + 16;
          if (v85 != v87)
            break;
          v115 = v93;
          rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)(v93 + 16);
          v117 = (unint64_t)&v92[16 * v91];
LABEL_139:
          operator delete(v85);
          v85 = v94;
          rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v94;
          v82 += 16;
          if (v82 == v83)
          {
LABEL_140:
            *(_QWORD *)v144 = v115;
            *(_QWORD *)&v144[8] = v85;
            *(_QWORD *)&v144[16] = v117;
            v95 = (_QWORD *)*((_QWORD *)&v124 + 1);
            if (*((_QWORD *)&v124 + 1) >= v125)
              goto LABEL_143;
LABEL_116:
            *v95 = 0;
            v95[1] = 0;
            v95[2] = 0;
            *(_OWORD *)v95 = *(_OWORD *)v144;
            v95[2] = *(_QWORD *)&v144[16];
            *((_QWORD *)&v124 + 1) = v95 + 3;
            goto LABEL_117;
          }
        }
        do
        {
          *((_OWORD *)v93 - 1) = *(v85 - 1);
          v93 -= 16;
          --v85;
        }
        while (v85 != v87);
        v85 = v115;
        v115 = v93;
        rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v94;
        v117 = (unint64_t)&v92[16 * v91];
        if (v85)
          goto LABEL_139;
        v85 = v94;
        rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v94;
        v82 += 16;
        if (v82 == v83)
          goto LABEL_140;
      }
    }
LABEL_145:
    v96 = v125;
    *(_OWORD *)(v107 + 128) = v124;
    v97 = (void *)v110;
    *(_QWORD *)(v109 + 408) = v96;
    *(_BYTE *)(v109 + 416) = 1;
    if (v97)
    {
      *((_QWORD *)&v110 + 1) = v97;
      operator delete(v97);
    }
    v98 = *(void **)&object[32];
    if (*(_QWORD *)&object[32])
      goto LABEL_148;
  }
  else
  {
    *(_BYTE *)(a1 + 392) = 0;
    *(_BYTE *)(a1 + 416) = 0;
    v98 = *(void **)&object[32];
    if (*(_QWORD *)&object[32])
    {
LABEL_148:
      *(_QWORD *)&object[40] = v98;
      operator delete(v98);
    }
  }
  if (*(_QWORD *)object)
  {
    *(_QWORD *)&object[8] = *(_QWORD *)object;
    operator delete(*(void **)object);
  }
}

void sub_223722264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47)
{
  if (a47)
  {
    if (a46 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_2237222A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC470);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC470);
  _Unwind_Resume(a1);
}

void sub_2237222E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  sub_22319A054((uint64_t *)(v41 - 128));
  sub_22319A054(&a35);
  sub_223199DE8((uint64_t)&a41);
  sub_223182DAC((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_22372231C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  MEMORY[0x227684CE8](v26, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_223722348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_223182DAC((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_22372235C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *object,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2237224B8(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  void *v10;
  char *v11;
  void *v12;
  void *v13;
  float **v14;
  float **v15;
  float *v16;
  float *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t *v28;
  char *v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  float **v33;
  void *v34;
  void *v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  void *v39;
  char *v40;
  void *v41;
  void *v42;
  float *v43;
  float *v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 v69;
  _QWORD *v70;
  _QWORD *v71;
  void *v72;
  void *v73;
  char *v74;
  _QWORD *v75;
  void *v76;
  char *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  float **v81;
  char *v82;
  char *v83;
  uint64_t v84;
  float **v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  void *v91;
  void *v92;
  float **v93;
  void *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t v103;
  int64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  void *v109;
  void *v110;
  void *v111;
  _QWORD *v112;
  char *v113;
  char *v114;
  void *v115;
  void *v116;
  float **v118;
  float **v119;
  float **v120;
  char *v121;
  char *v122;
  __int128 v123;
  char *v124;
  char *v125;
  char *v126;
  __int128 v127;
  void *v128[2];
  char *v129;
  void *v130[2];
  void *__p[4];
  __int128 v132;
  char *v133;
  __int128 v134;
  char *v135;

  v3 = (a1[1] - *a1) >> 4;
  v133 = 0;
  v132 = 0uLL;
  sub_223725824((uint64_t)&v132, 0xAAAAAAAAAAAAAAABLL * v3);
  v5 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      *(_OWORD *)v130 = 0u;
      memset(__p, 0, sizeof(__p));
      sub_223EBA33C((void ***)v5, (uint64_t)&v134);
      *(_OWORD *)v130 = v134;
      __p[0] = v135;
      sub_223EBA204((void ****)(v5 + 24), (uint64_t)&v134);
      *(_OWORD *)&__p[1] = v134;
      __p[3] = v135;
      v6 = *((_QWORD *)&v132 + 1);
      if (*((_QWORD *)&v132 + 1) >= (unint64_t)v133)
      {
        v7 = sub_2237259A4((void **)&v132, (uint64_t)v130);
        v8 = (char *)__p[1];
        *((_QWORD *)&v132 + 1) = v7;
        if (__p[1])
        {
          v9 = __p[2];
          v10 = __p[1];
          if (__p[2] != __p[1])
          {
            v11 = (char *)__p[2];
            do
            {
              v13 = (void *)*((_QWORD *)v11 - 3);
              v11 -= 24;
              v12 = v13;
              if (v13)
              {
                *(v9 - 2) = v12;
                operator delete(v12);
              }
              v9 = v11;
            }
            while (v11 != v8);
            v10 = __p[1];
          }
          __p[2] = v8;
          operator delete(v10);
        }
      }
      else
      {
        *(_QWORD *)(*((_QWORD *)&v132 + 1) + 16) = 0;
        *(_QWORD *)(v6 + 24) = 0;
        *(_QWORD *)v6 = 0;
        *(_QWORD *)(v6 + 8) = 0;
        *(_OWORD *)v6 = *(_OWORD *)v130;
        *(void **)(v6 + 16) = __p[0];
        v130[0] = 0;
        v130[1] = 0;
        __p[0] = 0;
        *(_QWORD *)(v6 + 32) = 0;
        *(_QWORD *)(v6 + 40) = 0;
        *(_OWORD *)(v6 + 24) = *(_OWORD *)&__p[1];
        *(void **)(v6 + 40) = __p[3];
        memset(&__p[1], 0, 24);
        *((_QWORD *)&v132 + 1) = v6 + 48;
      }
      if (v130[0])
      {
        v130[1] = v130[0];
        operator delete(v130[0]);
      }
      v5 += 48;
    }
    while (v5 != v4);
  }
  v14 = (float **)v132;
  v123 = v132;
  v15 = (float **)*((_QWORD *)&v132 + 1);
  v126 = 0;
  v127 = 0uLL;
  sub_2232EA6AC((uint64_t)&v126, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v132 + 1) - v132) >> 4));
  if (v14 != v15)
  {
    v118 = v15;
    while (1)
    {
      v119 = v14;
      *(_OWORD *)v130 = 0u;
      memset(__p, 0, sizeof(__p));
      v16 = *v14;
      v17 = v14[1];
      v134 = 0uLL;
      v135 = 0;
      v18 = (char *)v17 - (char *)v16;
      if (v17 == v16)
      {
        v31 = 0;
        v19 = 0;
        goto LABEL_45;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF9)
        sub_22316E078();
      v19 = (char *)operator new(2 * v18);
      *(_QWORD *)&v134 = v19;
      *((_QWORD *)&v134 + 1) = v19;
      v135 = &v19[16 * (v18 >> 3)];
      do
      {
        while (1)
        {
          while (1)
          {
            v20 = llroundf(*v16);
            v21 = llroundf(v16[1]);
            if (v19 >= v135)
              break;
            *(_QWORD *)v19 = v20;
            *((_QWORD *)v19 + 1) = v21;
            v19 += 16;
            *((_QWORD *)&v134 + 1) = v19;
            v16 += 2;
            if (v16 == v17)
              goto LABEL_42;
          }
          v22 = (char *)v134;
          v23 = (uint64_t)&v19[-v134] >> 4;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 60)
            sub_22316E078();
          v25 = (uint64_t)&v135[-v134];
          if ((uint64_t)&v135[-v134] >> 3 > v24)
            v24 = v25 >> 3;
          v26 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v24;
          if (v26)
          {
            if (v26 >> 60)
              sub_223174E94();
            v27 = (char *)operator new(16 * v26);
            v28 = (unint64_t *)&v27[16 * v23];
            v29 = &v27[16 * v26];
            *v28 = v20;
            v28[1] = v21;
            v30 = (uint64_t)(v28 + 2);
            if (v19 == v22)
            {
LABEL_40:
              *(_QWORD *)&v134 = v28;
              *((_QWORD *)&v134 + 1) = v30;
              v135 = v29;
              break;
            }
          }
          else
          {
            v28 = (unint64_t *)(16 * v23);
            v29 = 0;
            *v28 = v20;
            v28[1] = v21;
            v30 = 16 * v23 + 16;
            if (v19 == v22)
              goto LABEL_40;
          }
          do
          {
            *((_OWORD *)v28 - 1) = *((_OWORD *)v19 - 1);
            v28 -= 2;
            v19 -= 16;
          }
          while (v19 != v22);
          v19 = (char *)v134;
          *(_QWORD *)&v134 = v28;
          *((_QWORD *)&v134 + 1) = v30;
          v135 = v29;
          if (v19)
            break;
          v19 = (char *)v30;
          *((_QWORD *)&v134 + 1) = v30;
          v16 += 2;
          if (v16 == v17)
            goto LABEL_42;
        }
        operator delete(v19);
        v19 = (char *)v30;
        *((_QWORD *)&v134 + 1) = v30;
        v16 += 2;
      }
      while (v16 != v17);
LABEL_42:
      v31 = (void *)v134;
      v18 = (uint64_t)v135;
      if (v130[0])
      {
        v130[1] = v130[0];
        operator delete(v130[0]);
      }
LABEL_45:
      v130[0] = v31;
      v130[1] = v19;
      __p[0] = (void *)v18;
      v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v119[4] - (char *)v119[3]) >> 3);
      v133 = 0;
      v132 = 0uLL;
      sub_2232EA6AC((uint64_t)&v132, v32);
      v33 = (float **)v119[3];
      v120 = (float **)v119[4];
      if (v33 != v120)
      {
LABEL_55:
        v43 = *v33;
        v44 = v33[1];
        v134 = 0uLL;
        v135 = 0;
        v45 = (char *)v44 - (char *)v43;
        if (v44 == v43)
        {
          v59 = 0;
          v46 = 0;
          v58 = 0;
          v61 = (_QWORD *)*((_QWORD *)&v132 + 1);
          v60 = v133;
          if (*((_QWORD *)&v132 + 1) >= (unint64_t)v133)
            goto LABEL_80;
LABEL_53:
          *v61 = v58;
          v61[1] = v46;
          v34 = v61 + 3;
          v61[2] = v59;
          goto LABEL_54;
        }
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF9)
          sub_22316E078();
        v46 = (char *)operator new(2 * v45);
        *(_QWORD *)&v134 = v46;
        *((_QWORD *)&v134 + 1) = v46;
        v135 = &v46[16 * (v45 >> 3)];
        while (1)
        {
          while (1)
          {
            v47 = llroundf(*v43);
            v48 = llroundf(v43[1]);
            if (v46 >= v135)
              break;
            *(_QWORD *)v46 = v47;
            *((_QWORD *)v46 + 1) = v48;
            v46 += 16;
            *((_QWORD *)&v134 + 1) = v46;
            v43 += 2;
            if (v43 == v44)
              goto LABEL_77;
          }
          v49 = (char *)v134;
          v50 = (uint64_t)&v46[-v134] >> 4;
          v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 60)
            sub_22316E078();
          v52 = (uint64_t)&v135[-v134];
          if ((uint64_t)&v135[-v134] >> 3 > v51)
            v51 = v52 >> 3;
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0)
            v53 = 0xFFFFFFFFFFFFFFFLL;
          else
            v53 = v51;
          if (v53)
          {
            if (v53 >> 60)
              sub_223174E94();
            v54 = (char *)operator new(16 * v53);
            v55 = (unint64_t *)&v54[16 * v50];
            v56 = &v54[16 * v53];
            *v55 = v47;
            v55[1] = v48;
            v57 = (uint64_t)(v55 + 2);
            if (v46 == v49)
            {
LABEL_75:
              *(_QWORD *)&v134 = v55;
              *((_QWORD *)&v134 + 1) = v57;
              v135 = v56;
              goto LABEL_76;
            }
          }
          else
          {
            v55 = (unint64_t *)(16 * v50);
            v56 = 0;
            *v55 = v47;
            v55[1] = v48;
            v57 = 16 * v50 + 16;
            if (v46 == v49)
              goto LABEL_75;
          }
          do
          {
            *((_OWORD *)v55 - 1) = *((_OWORD *)v46 - 1);
            v55 -= 2;
            v46 -= 16;
          }
          while (v46 != v49);
          v46 = (char *)v134;
          *(_QWORD *)&v134 = v55;
          *((_QWORD *)&v134 + 1) = v57;
          v135 = v56;
          if (!v46)
          {
            v46 = (char *)v57;
            *((_QWORD *)&v134 + 1) = v57;
            v43 += 2;
            if (v43 == v44)
              goto LABEL_77;
            continue;
          }
LABEL_76:
          operator delete(v46);
          v46 = (char *)v57;
          *((_QWORD *)&v134 + 1) = v57;
          v43 += 2;
          if (v43 == v44)
          {
LABEL_77:
            v58 = v134;
            v59 = v135;
            v61 = (_QWORD *)*((_QWORD *)&v132 + 1);
            v60 = v133;
            if (*((_QWORD *)&v132 + 1) < (unint64_t)v133)
              goto LABEL_53;
LABEL_80:
            v62 = (_QWORD *)v132;
            v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v61 - v132) >> 3) + 1;
            if (v63 > 0xAAAAAAAAAAAAAAALL)
              sub_22316E078();
            v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v60[-v132] >> 3);
            if (2 * v64 > v63)
              v63 = 2 * v64;
            if (v64 >= 0x555555555555555)
              v65 = 0xAAAAAAAAAAAAAAALL;
            else
              v65 = v63;
            if (v65)
            {
              if (v65 > 0xAAAAAAAAAAAAAAALL)
                sub_223174E94();
              v66 = (char *)operator new(24 * v65);
            }
            else
            {
              v66 = 0;
            }
            v67 = &v66[8 * (v61 - v62)];
            *(_QWORD *)v67 = v58;
            *((_QWORD *)v67 + 1) = v46;
            *((_QWORD *)v67 + 2) = v59;
            v34 = v67 + 24;
            if (v61 == v62)
            {
              *(_QWORD *)&v132 = &v66[8 * (v61 - v62)];
              *((_QWORD *)&v132 + 1) = v67 + 24;
              v133 = &v66[24 * v65];
            }
            else
            {
              do
              {
                v68 = v67;
                *((_QWORD *)v67 - 2) = 0;
                *((_QWORD *)v67 - 1) = 0;
                v69 = *(_OWORD *)(v61 - 3);
                v61 -= 3;
                *(_OWORD *)(v67 - 24) = v69;
                v67 -= 24;
                *((_QWORD *)v68 - 1) = v61[2];
                *v61 = 0;
                v61[1] = 0;
                v61[2] = 0;
              }
              while (v61 != v62);
              v70 = (_QWORD *)*((_QWORD *)&v132 + 1);
              v61 = (_QWORD *)v132;
              *(_QWORD *)&v132 = v67;
              *((_QWORD *)&v132 + 1) = v34;
              v133 = &v66[24 * v65];
              if (v70 != v61)
              {
                v71 = v70;
                do
                {
                  v73 = (void *)*(v71 - 3);
                  v71 -= 3;
                  v72 = v73;
                  if (v73)
                  {
                    *(v70 - 2) = v72;
                    operator delete(v72);
                  }
                  v70 = v71;
                }
                while (v71 != v61);
              }
            }
            if (v61)
              operator delete(v61);
LABEL_54:
            *((_QWORD *)&v132 + 1) = v34;
            v33 += 3;
            if (v33 == v120)
              goto LABEL_47;
            goto LABEL_55;
          }
        }
      }
      v34 = (void *)*((_QWORD *)&v132 + 1);
LABEL_47:
      v35 = (void *)v132;
      v36 = v133;
      v37 = (char *)__p[1];
      if (__p[1])
      {
        v38 = __p[2];
        v39 = __p[1];
        if (__p[2] != __p[1])
        {
          v40 = (char *)__p[2];
          do
          {
            v42 = (void *)*((_QWORD *)v40 - 3);
            v40 -= 24;
            v41 = v42;
            if (v42)
            {
              *(v38 - 2) = v41;
              operator delete(v41);
            }
            v38 = v40;
          }
          while (v40 != v37);
          v39 = __p[1];
        }
        __p[2] = v37;
        operator delete(v39);
      }
      __p[1] = v35;
      __p[2] = v34;
      __p[3] = v36;
      sub_223EC5D30((uint64_t)v130, 0, (char **)&v134);
      *(_OWORD *)v128 = v134;
      v129 = v135;
      v74 = (char *)__p[1];
      if (__p[1])
      {
        v75 = __p[2];
        v76 = __p[1];
        if (__p[2] != __p[1])
        {
          v77 = (char *)__p[2];
          do
          {
            v79 = (void *)*((_QWORD *)v77 - 3);
            v77 -= 24;
            v78 = v79;
            if (v79)
            {
              *(v75 - 2) = v78;
              operator delete(v78);
            }
            v75 = v77;
          }
          while (v77 != v74);
          v76 = __p[1];
        }
        __p[2] = v74;
        operator delete(v76);
      }
      if (v130[0])
      {
        v130[1] = v130[0];
        operator delete(v130[0]);
      }
      v80 = v127;
      if ((unint64_t)v127 < *((_QWORD *)&v127 + 1))
      {
        *(_OWORD *)v127 = 0uLL;
        *(_QWORD *)(v80 + 16) = 0;
        *(_OWORD *)v80 = *(_OWORD *)v128;
        *(_QWORD *)(v80 + 16) = v129;
        *(_QWORD *)&v127 = v80 + 24;
      }
      else
      {
        *(_QWORD *)&v127 = sub_2232EA89C(&v126, (uint64_t)v128);
        if (v128[0])
        {
          v128[1] = v128[0];
          operator delete(v128[0]);
        }
      }
      v14 = v119 + 6;
      if (v119 + 6 == v118)
      {
        v81 = (float **)v123;
        v82 = v126;
        v124 = v126;
        v83 = (char *)v127;
        v125 = (char *)v127;
        if (!(_QWORD)v123)
          goto LABEL_120;
LABEL_118:
        v121 = v83;
        v84 = *((_QWORD *)&v123 + 1);
        v85 = v81;
        if (*((float ***)&v123 + 1) != v81)
        {
          do
          {
            v87 = *(_QWORD *)(v84 - 24);
            if (v87)
            {
              v88 = *(_QWORD *)(v84 - 16);
              v89 = *(void **)(v84 - 24);
              if (v88 != v87)
              {
                v90 = *(_QWORD *)(v84 - 16);
                do
                {
                  v92 = *(void **)(v90 - 24);
                  v90 -= 24;
                  v91 = v92;
                  if (v92)
                  {
                    *(_QWORD *)(v88 - 16) = v91;
                    operator delete(v91);
                  }
                  v88 = v90;
                }
                while (v90 != v87);
                v89 = *(void **)(v84 - 24);
              }
              *(_QWORD *)(v84 - 16) = v87;
              operator delete(v89);
            }
            v93 = (float **)(v84 - 48);
            v94 = *(void **)(v84 - 48);
            if (v94)
            {
              *(_QWORD *)(v84 - 40) = v94;
              operator delete(v94);
            }
            v84 -= 48;
          }
          while (v93 != v85);
        }
        operator delete(v85);
        v83 = v121;
        goto LABEL_120;
      }
    }
  }
  v81 = v14;
  v82 = v126;
  v124 = v126;
  v83 = (char *)v127;
  v125 = (char *)v127;
  if (v81)
    goto LABEL_118;
LABEL_120:
  v86 = v83;
  v132 = 0uLL;
  v133 = 0;
  sub_2232EA6AC((uint64_t)&v132, 0xAAAAAAAAAAAAAAABLL * ((v83 - v82) >> 3));
  if (v82 == v86)
    goto LABEL_163;
  v122 = v86;
  do
  {
    v95 = *(char **)v82;
    v96 = (char *)*((_QWORD *)v82 + 1);
    v130[0] = 0;
    v130[1] = 0;
    __p[0] = 0;
    v97 = v96 - v95;
    if (v96 != v95)
    {
      if (v97 < 0)
        sub_22316E078();
      v98 = operator new(v96 - v95);
      v130[0] = v98;
      v130[1] = v98;
      __p[0] = &v98[2 * (v97 >> 4)];
      while (1)
      {
        while (1)
        {
          v100 = *(_QWORD *)v95;
          v99 = *((_QWORD *)v95 + 1);
          if (v98 >= __p[0])
            break;
          *v98 = v100;
          v98[1] = v99;
          v98 += 2;
          v130[1] = v98;
          v95 += 16;
          if (v95 == v96)
            goto LABEL_157;
        }
        v101 = v130[0];
        v102 = ((char *)v98 - (char *)v130[0]) >> 4;
        v103 = v102 + 1;
        if ((unint64_t)(v102 + 1) >> 60)
          sub_22316E078();
        v104 = (char *)__p[0] - (char *)v130[0];
        if (((char *)__p[0] - (char *)v130[0]) >> 3 > v103)
          v103 = v104 >> 3;
        if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF0)
          v105 = 0xFFFFFFFFFFFFFFFLL;
        else
          v105 = v103;
        if (v105)
        {
          if (v105 >> 60)
            sub_223174E94();
          v106 = (char *)operator new(16 * v105);
          v107 = &v106[16 * v102];
          v108 = &v106[16 * v105];
          *(_QWORD *)v107 = v100;
          *((_QWORD *)v107 + 1) = v99;
          v109 = v107 + 16;
          if (v98 == v101)
            goto LABEL_155;
          do
          {
LABEL_151:
            *((_OWORD *)v107 - 1) = *((_OWORD *)v98 - 1);
            v107 -= 16;
            v98 -= 2;
          }
          while (v98 != v101);
          v98 = v130[0];
          v130[0] = v107;
          v130[1] = v109;
          __p[0] = v108;
          if (v98)
            goto LABEL_156;
          v98 = v109;
          v130[1] = v109;
          v95 += 16;
          if (v95 == v96)
            goto LABEL_157;
        }
        else
        {
          v107 = (char *)(16 * v102);
          v108 = 0;
          *(_QWORD *)v107 = v100;
          *((_QWORD *)v107 + 1) = v99;
          v109 = (void *)(16 * v102 + 16);
          if (v98 != v101)
            goto LABEL_151;
LABEL_155:
          v130[0] = v107;
          v130[1] = v109;
          __p[0] = v108;
LABEL_156:
          operator delete(v98);
          v98 = v109;
          v130[1] = v109;
          v95 += 16;
          if (v95 == v96)
          {
LABEL_157:
            v110 = v130[0];
            v111 = __p[0];
            v86 = v122;
            *(void **)&v134 = v130[0];
            *((_QWORD *)&v134 + 1) = v98;
            v135 = (char *)__p[0];
            v112 = (_QWORD *)*((_QWORD *)&v132 + 1);
            if (*((_QWORD *)&v132 + 1) >= (unint64_t)v133)
              goto LABEL_160;
LABEL_133:
            *v112 = v110;
            v112[1] = v98;
            v112[2] = v111;
            *((_QWORD *)&v132 + 1) = v112 + 3;
            goto LABEL_134;
          }
        }
      }
    }
    v111 = 0;
    v98 = 0;
    v110 = 0;
    v134 = 0uLL;
    v135 = 0;
    v112 = (_QWORD *)*((_QWORD *)&v132 + 1);
    if (*((_QWORD *)&v132 + 1) < (unint64_t)v133)
      goto LABEL_133;
LABEL_160:
    *((_QWORD *)&v132 + 1) = sub_2232EA89C((char **)&v132, (uint64_t)&v134);
    if ((_QWORD)v134)
      operator delete((void *)v134);
LABEL_134:
    v82 += 24;
  }
  while (v82 != v86);
  v82 = v124;
LABEL_163:
  *(_OWORD *)a2 = v132;
  *(_QWORD *)(a2 + 16) = v133;
  if (v82)
  {
    v113 = v125;
    if (v125 != v82)
    {
      v114 = v125;
      do
      {
        v116 = (void *)*((_QWORD *)v114 - 3);
        v114 -= 24;
        v115 = v116;
        if (v116)
        {
          *((_QWORD *)v113 - 2) = v115;
          operator delete(v115);
        }
        v113 = v114;
      }
      while (v114 != v82);
    }
    operator delete(v82);
  }
}

void sub_223723018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  uint64_t v33;

  sub_22317C838((void **)(v33 - 160));
  sub_22317C838(&a19);
  _Unwind_Resume(a1);
}

void sub_223723114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;

  if (a29)
  {
    a30 = a29;
    JUMPOUT(0x223723124);
  }
  sub_22317C838(v30 - 160);
  sub_22317C838(&a19);
  _Unwind_Resume(a1);
}

void sub_223723148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = *(_QWORD *)(v0 - 160);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 - 152);
    if (v2 != v1)
    {
      v3 = *(_QWORD *)(v0 - 152);
      do
      {
        v5 = *(void **)(v3 - 24);
        v3 -= 24;
        v4 = v5;
        if (v5)
        {
          *(_QWORD *)(v2 - 16) = v4;
          operator delete(v4);
        }
        v2 = v3;
      }
      while (v3 != v1);
    }
    *(_QWORD *)(v0 - 152) = v1;
    JUMPOUT(0x22372329CLL);
  }
  JUMPOUT(0x2237232A0);
}

void sub_22372318C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_223295A74((uint64_t)&a29);
  JUMPOUT(0x22372319CLL);
}

void sub_2237231AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,char *a32,char *a33)
{
  void *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  void *v46;
  void *v47;

  if (v33)
    operator delete(v33);
  v36 = *(_QWORD *)(v34 - 160);
  if (v36)
  {
    v37 = *(_QWORD *)(v34 - 152);
    v38 = *(void **)(v34 - 160);
    if (v37 != v36)
    {
      v39 = *(_QWORD *)(v34 - 152);
      do
      {
        v41 = *(void **)(v39 - 24);
        v39 -= 24;
        v40 = v41;
        if (v41)
        {
          *(_QWORD *)(v37 - 16) = v40;
          operator delete(v40);
        }
        v37 = v39;
      }
      while (v39 != v36);
      v38 = *(void **)(v34 - 160);
    }
    *(_QWORD *)(v34 - 152) = v36;
    operator delete(v38);
  }
  v42 = a32;
  if (a32)
  {
    v43 = a33;
    v44 = a32;
    if (a33 != a32)
    {
      v45 = a33;
      do
      {
        v47 = (void *)*((_QWORD *)v45 - 3);
        v45 -= 24;
        v46 = v47;
        if (v47)
        {
          *((_QWORD *)v43 - 2) = v46;
          operator delete(v46);
        }
        v43 = v45;
      }
      while (v45 != v42);
      v44 = a32;
    }
    a33 = v42;
    operator delete(v44);
  }
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  sub_22317C838((void **)&a22);
  sub_223723314((void **)&a16);
  _Unwind_Resume(a1);
}

void sub_2237231EC()
{
  JUMPOUT(0x2237231F4);
}

void sub_223723204()
{
  JUMPOUT(0x22372320CLL);
}

void sub_223723234()
{
  uint64_t v0;
  uint64_t v1;

  if (v0)
  {
    *(_QWORD *)(v1 - 120) = v0;
    JUMPOUT(0x223723250);
  }
  JUMPOUT(0x223723254);
}

void **sub_223723314(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char *v11;
  void *v12;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 3);
        if (v5)
        {
          v6 = *((_QWORD *)v3 - 2);
          v7 = (void *)*((_QWORD *)v3 - 3);
          if (v6 != v5)
          {
            v8 = *((_QWORD *)v3 - 2);
            do
            {
              v10 = *(void **)(v8 - 24);
              v8 -= 24;
              v9 = v10;
              if (v10)
              {
                *(_QWORD *)(v6 - 16) = v9;
                operator delete(v9);
              }
              v6 = v8;
            }
            while (v8 != v5);
            v7 = (void *)*((_QWORD *)v3 - 3);
          }
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v7);
        }
        v11 = v3 - 48;
        v12 = (void *)*((_QWORD *)v3 - 6);
        if (v12)
        {
          *((_QWORD *)v3 - 5) = v12;
          operator delete(v12);
        }
        v3 -= 48;
      }
      while (v11 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

__n128 sub_2237233DC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 *v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  __int128 v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  __int128 *v23;
  char *v24;
  char *v25;
  unsigned __int8 v26;
  unint64_t v27;
  char **v28;
  char *v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  __int128 v64;
  char *v65;
  char *v66;
  void *v67;
  void *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  __int128 v73;
  char *v74;
  char *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  char *v97;
  _QWORD *v98;
  void *v99;
  char *v100;
  void *v101;
  void *v102;
  int64x2_t v103;
  __n128 result;
  __int128 *v107;
  int v108;
  __int128 *v109;
  char **v110;
  int64x2_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  void *__p;
  _QWORD *v117;
  char *v118;
  __int128 v119;
  _BYTE v120[28];
  void *v121[2];
  char *v122;
  __int128 v123;
  __int128 v124;
  _BYTE v125[28];
  __int128 v126;
  char *v127;
  void *v128[2];
  char *v129;
  char v130;
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  v2 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 136);
  v3 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 56) = v3;
  v4 = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a2 + 88) = v4;
  *(_DWORD *)(a2 + 104) = 0;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  v5 = *(__int128 **)(a1 + 208);
  v112 = 0;
  v111 = 0uLL;
  v107 = *(__int128 **)(a1 + 216);
  v6 = (char *)v107 - (char *)v5;
  if (v107 == v5)
  {
    v8 = 0;
    if (v107 != v5)
      goto LABEL_6;
    goto LABEL_114;
  }
  v7 = 0x21CFB2B78C13521DLL * (v6 >> 3);
  if (v7 > 0x155555555555555)
    sub_22316E078();
  v8 = operator new(0x5BC609A90E7D95C0 * (v6 >> 3));
  v6 = (uint64_t)v8 + 192 * v7;
  v111.i64[0] = (uint64_t)v8;
  v111.i64[1] = (uint64_t)v8;
  v112 = v6;
  if (v107 == v5)
  {
LABEL_114:
    v103 = vdupq_n_s64((unint64_t)v8);
    goto LABEL_115;
  }
  do
  {
LABEL_6:
    v9 = v5[1];
    v119 = *v5;
    *(_OWORD *)v120 = v9;
    *(_QWORD *)&v120[16] = *((_QWORD *)v5 + 4);
    *(_DWORD *)&v120[24] = *((_DWORD *)v5 + 10);
    v121[1] = 0;
    v122 = 0;
    v121[0] = 0;
    v10 = (char *)operator new(0xA8uLL);
    v121[0] = v10;
    v122 = v10 + 168;
    v11 = *(__int128 *)((char *)v5 + 76);
    v12 = *(__int128 *)((char *)v5 + 60);
    *(_OWORD *)v10 = *(__int128 *)((char *)v5 + 44);
    *((_OWORD *)v10 + 1) = v12;
    *((_OWORD *)v10 + 2) = v11;
    v13 = *(__int128 *)((char *)v5 + 108);
    v14 = *(__int128 *)((char *)v5 + 140);
    v15 = *(__int128 *)((char *)v5 + 92);
    *((_OWORD *)v10 + 5) = *(__int128 *)((char *)v5 + 124);
    *((_OWORD *)v10 + 6) = v14;
    *((_OWORD *)v10 + 3) = v15;
    *((_OWORD *)v10 + 4) = v13;
    v16 = *(__int128 *)((char *)v5 + 172);
    v17 = *(__int128 *)((char *)v5 + 188);
    v18 = *(__int128 *)((char *)v5 + 156);
    *((_QWORD *)v10 + 20) = *(_QWORD *)((char *)v5 + 204);
    *((_OWORD *)v10 + 8) = v16;
    *((_OWORD *)v10 + 9) = v17;
    *((_OWORD *)v10 + 7) = v18;
    v19 = *((_QWORD *)v5 + 27);
    v121[1] = v10 + 168;
    *((_QWORD *)&v123 + 1) = v19;
    LOBYTE(v124) = *((_BYTE *)v5 + 224);
    DWORD2(v124) = *((_DWORD *)v5 + 58);
    v125[0] = 0;
    v125[16] = 0;
    if (*((_BYTE *)v5 + 256))
    {
      *(_QWORD *)v125 = *((_QWORD *)v5 + 30);
      v125[8] = *((_BYTE *)v5 + 248);
      v125[16] = 1;
    }
    *(_DWORD *)&v125[24] = *((_DWORD *)v5 + 88);
    v127 = 0;
    v126 = 0uLL;
    v21 = (_BYTE *)*((_QWORD *)v5 + 33);
    v20 = (_BYTE *)*((_QWORD *)v5 + 34);
    v22 = v20 - v21;
    if (v20 == v21)
    {
      v26 = *((_BYTE *)v5 + 416);
      v108 = v26;
      v109 = v5;
      if (v26)
        goto LABEL_11;
    }
    else
    {
      if (v22 < 0)
        sub_2236EA0B4();
      v23 = v5;
      v24 = (char *)operator new(v20 - v21);
      v25 = &v24[8 * (v22 >> 3)];
      *(_QWORD *)&v126 = v24;
      v127 = v25;
      memcpy(v24, v21, v22 - 2);
      *((_QWORD *)&v126 + 1) = v25;
      v5 = v23;
      v26 = *((_BYTE *)v23 + 416);
      v108 = v26;
      v109 = v23;
      if (v26)
      {
LABEL_11:
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v5 + 50) - *((_QWORD *)v5 + 49)) >> 3);
        v114 = 0;
        v115 = 0;
        v113 = 0;
        sub_2232EA6AC((uint64_t)&v113, v27);
        v28 = (char **)*((_QWORD *)v5 + 49);
        v110 = (char **)*((_QWORD *)v5 + 50);
        if (v28 == v110)
        {
          v29 = v114;
LABEL_13:
          v128[0] = v113;
          v128[1] = v29;
          v129 = v115;
          v130 = 1;
          v31 = (char *)v111.i64[1];
          v30 = v112;
          if (v111.i64[1] < v112)
            goto LABEL_14;
          goto LABEL_63;
        }
LABEL_19:
        v39 = *v28;
        v38 = v28[1];
        __p = 0;
        v117 = 0;
        v118 = 0;
        v40 = v38 - v39;
        if (v38 == v39)
        {
          v54 = 0;
          v41 = 0;
          v53 = 0;
          v56 = v114;
          v55 = v115;
          if (v114 >= v115)
            goto LABEL_44;
LABEL_17:
          *(_QWORD *)v56 = v53;
          *((_QWORD *)v56 + 1) = v41;
          v29 = v56 + 24;
          *((_QWORD *)v56 + 2) = v54;
          goto LABEL_18;
        }
        if (v40 < 0)
          sub_22316E078();
        v41 = (char *)operator new(v38 - v39);
        __p = v41;
        v117 = v41;
        v118 = &v41[16 * (v40 >> 4)];
        while (1)
        {
          while (1)
          {
            v43 = *(_QWORD *)v39;
            v42 = *((_QWORD *)v39 + 1);
            if (v41 >= v118)
              break;
            *(_QWORD *)v41 = v43;
            *((_QWORD *)v41 + 1) = v42;
            v41 += 16;
            v117 = v41;
            v39 += 16;
            if (v39 == v38)
              goto LABEL_41;
          }
          v44 = (char *)__p;
          v45 = (v41 - (_BYTE *)__p) >> 4;
          v46 = v45 + 1;
          if ((unint64_t)(v45 + 1) >> 60)
            sub_22316E078();
          v47 = v118 - (_BYTE *)__p;
          if ((v118 - (_BYTE *)__p) >> 3 > v46)
            v46 = v47 >> 3;
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
            v48 = 0xFFFFFFFFFFFFFFFLL;
          else
            v48 = v46;
          if (v48)
          {
            if (v48 >> 60)
              sub_223174E94();
            v49 = (char *)operator new(16 * v48);
            v50 = &v49[16 * v45];
            v51 = &v49[16 * v48];
            *(_QWORD *)v50 = v43;
            *((_QWORD *)v50 + 1) = v42;
            v52 = (uint64_t)(v50 + 16);
            if (v41 == v44)
              goto LABEL_39;
            do
            {
LABEL_35:
              *((_OWORD *)v50 - 1) = *((_OWORD *)v41 - 1);
              v50 -= 16;
              v41 -= 16;
            }
            while (v41 != v44);
            v41 = (char *)__p;
            __p = v50;
            v117 = (_QWORD *)v52;
            v118 = v51;
            if (v41)
              goto LABEL_40;
            v41 = (char *)v52;
            v117 = (_QWORD *)v52;
            v39 += 16;
            if (v39 == v38)
              goto LABEL_41;
          }
          else
          {
            v50 = (char *)(16 * v45);
            v51 = 0;
            *(_QWORD *)v50 = v43;
            *((_QWORD *)v50 + 1) = v42;
            v52 = 16 * v45 + 16;
            if (v41 != v44)
              goto LABEL_35;
LABEL_39:
            __p = v50;
            v117 = (_QWORD *)v52;
            v118 = v51;
LABEL_40:
            operator delete(v41);
            v41 = (char *)v52;
            v117 = (_QWORD *)v52;
            v39 += 16;
            if (v39 == v38)
            {
LABEL_41:
              v53 = __p;
              v54 = v118;
              v56 = v114;
              v55 = v115;
              if (v114 < v115)
                goto LABEL_17;
LABEL_44:
              v57 = v113;
              v58 = 0xAAAAAAAAAAAAAAABLL * ((v56 - v113) >> 3);
              v59 = v58 + 1;
              if (v58 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_22316E078();
              v60 = 0xAAAAAAAAAAAAAAABLL * ((v55 - v113) >> 3);
              if (2 * v60 > v59)
                v59 = 2 * v60;
              if (v60 >= 0x555555555555555)
                v61 = 0xAAAAAAAAAAAAAAALL;
              else
                v61 = v59;
              if (v61 > 0xAAAAAAAAAAAAAAALL)
                sub_223174E94();
              v62 = (char *)operator new(24 * v61);
              v63 = &v62[24 * v58];
              *(_QWORD *)v63 = v53;
              *((_QWORD *)v63 + 1) = v41;
              *((_QWORD *)v63 + 2) = v54;
              v29 = v63 + 24;
              if (v56 == v57)
              {
                v113 = v63;
                v114 = v63 + 24;
                v115 = &v62[24 * v61];
              }
              else
              {
                do
                {
                  v64 = *(_OWORD *)(v56 - 24);
                  v56 -= 24;
                  *(_OWORD *)(v63 - 24) = v64;
                  v63 -= 24;
                  *((_QWORD *)v63 + 2) = *((_QWORD *)v56 + 2);
                  *(_QWORD *)v56 = 0;
                  *((_QWORD *)v56 + 1) = 0;
                  *((_QWORD *)v56 + 2) = 0;
                }
                while (v56 != v57);
                v56 = v113;
                v65 = v114;
                v113 = v63;
                v114 = v29;
                v115 = &v62[24 * v61];
                if (v65 != v56)
                {
                  v66 = v65;
                  do
                  {
                    v68 = (void *)*((_QWORD *)v66 - 3);
                    v66 -= 24;
                    v67 = v68;
                    if (v68)
                    {
                      *((_QWORD *)v65 - 2) = v67;
                      operator delete(v67);
                    }
                    v65 = v66;
                  }
                  while (v66 != v56);
                }
              }
              if (v56)
                operator delete(v56);
LABEL_18:
              v114 = v29;
              v28 += 3;
              if (v28 == v110)
                goto LABEL_13;
              goto LABEL_19;
            }
          }
        }
      }
    }
    LOBYTE(v128[0]) = 0;
    v130 = v26;
    v31 = (char *)v111.i64[1];
    v30 = v112;
    if (v111.i64[1] < v112)
    {
LABEL_14:
      v32 = v119;
      v33 = *(_OWORD *)v120;
      *(_OWORD *)(v31 + 28) = *(_OWORD *)&v120[12];
      *(_OWORD *)v31 = v32;
      *((_OWORD *)v31 + 1) = v33;
      *((_QWORD *)v31 + 7) = 0;
      *((_QWORD *)v31 + 8) = 0;
      *((_QWORD *)v31 + 6) = 0;
      *((_OWORD *)v31 + 3) = *(_OWORD *)v121;
      *((_QWORD *)v31 + 8) = v122;
      v121[0] = 0;
      v121[1] = 0;
      v122 = 0;
      v34 = v123;
      v35 = v124;
      v36 = *(_OWORD *)v125;
      *(_OWORD *)(v31 + 116) = *(_OWORD *)&v125[12];
      *(_OWORD *)(v31 + 104) = v36;
      *(_OWORD *)(v31 + 88) = v35;
      *(_OWORD *)(v31 + 72) = v34;
      *((_QWORD *)v31 + 17) = 0;
      *((_QWORD *)v31 + 18) = 0;
      *((_QWORD *)v31 + 19) = 0;
      *(_OWORD *)(v31 + 136) = v126;
      *((_QWORD *)v31 + 19) = v127;
      v126 = 0uLL;
      v127 = 0;
      v31[160] = 0;
      v31[184] = 0;
      if (v130)
      {
        *((_QWORD *)v31 + 20) = 0;
        *((_QWORD *)v31 + 21) = 0;
        *((_QWORD *)v31 + 22) = 0;
        *((_OWORD *)v31 + 10) = *(_OWORD *)v128;
        *((_QWORD *)v31 + 22) = v129;
        v128[0] = 0;
        v128[1] = 0;
        v129 = 0;
        v31[184] = 1;
      }
      v37 = v31 + 192;
      goto LABEL_99;
    }
LABEL_63:
    v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v31[-v111.i64[0]] >> 6) + 1;
    if (v69 > 0x155555555555555)
      sub_22316E078();
    v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - v111.i64[0]) >> 6);
    if (2 * v70 > v69)
      v69 = 2 * v70;
    if (v70 >= 0xAAAAAAAAAAAAAALL)
      v71 = 0x155555555555555;
    else
      v71 = v69;
    if (v71)
    {
      if (v71 > 0x155555555555555)
        sub_223174E94();
      v72 = operator new(192 * v71);
    }
    else
    {
      v72 = 0;
    }
    v73 = *(_OWORD *)v120;
    v74 = (char *)&v72[8 * ((uint64_t)&v31[-v111.i64[0]] >> 6)];
    *(_OWORD *)v74 = v119;
    *((_OWORD *)v74 + 1) = v73;
    *(_OWORD *)(v74 + 28) = *(_OWORD *)&v120[12];
    *((_OWORD *)v74 + 3) = *(_OWORD *)v121;
    v75 = v127;
    *((_QWORD *)v74 + 8) = v122;
    v121[1] = 0;
    v122 = 0;
    v121[0] = 0;
    v76 = v123;
    v77 = v124;
    v78 = *(_OWORD *)v125;
    *(_OWORD *)(v74 + 116) = *(_OWORD *)&v125[12];
    *(_OWORD *)(v74 + 104) = v78;
    *(_OWORD *)(v74 + 88) = v77;
    *(_OWORD *)(v74 + 72) = v76;
    *((_QWORD *)v74 + 18) = 0;
    *((_QWORD *)v74 + 19) = 0;
    *(_OWORD *)(v74 + 136) = v126;
    *((_QWORD *)v74 + 19) = v75;
    v126 = 0uLL;
    v127 = 0;
    v74[160] = 0;
    v74[184] = 0;
    if (v108)
    {
      *((_QWORD *)v74 + 22) = 0;
      *((_OWORD *)v74 + 10) = *(_OWORD *)v128;
      v72[8 * ((uint64_t)&v31[-v111.i64[0]] >> 6) + 22] = v129;
      v128[1] = 0;
      v129 = 0;
      v128[0] = 0;
      v74[184] = 1;
    }
    v79 = (char *)&v72[24 * v71];
    v37 = v74 + 192;
    if (v31 == (char *)v111.i64[0])
    {
      v111.i64[0] = (uint64_t)&v72[8 * ((uint64_t)&v31[-v111.i64[0]] >> 6)];
      v112 = (unint64_t)v79;
    }
    else
    {
      v80 = 0;
      do
      {
        v81 = &v74[v80];
        v82 = &v31[v80];
        v83 = *(_OWORD *)&v31[v80 - 192];
        v84 = *(_OWORD *)&v31[v80 - 176];
        *(_OWORD *)(v81 - 164) = *(_OWORD *)&v31[v80 - 164];
        *((_OWORD *)v81 - 12) = v83;
        *((_OWORD *)v81 - 11) = v84;
        *((_QWORD *)v81 - 17) = 0;
        *((_QWORD *)v81 - 16) = 0;
        *((_OWORD *)v81 - 9) = *(_OWORD *)&v31[v80 - 144];
        *((_QWORD *)v81 - 16) = *(_QWORD *)&v31[v80 - 128];
        *((_QWORD *)v82 - 18) = 0;
        *((_QWORD *)v82 - 17) = 0;
        *((_QWORD *)v82 - 16) = 0;
        v85 = *(_OWORD *)&v31[v80 - 120];
        v86 = *(_OWORD *)&v31[v80 - 104];
        v87 = *(_OWORD *)&v31[v80 - 88];
        *(_OWORD *)(v81 - 76) = *(_OWORD *)&v31[v80 - 76];
        *(_OWORD *)(v81 - 88) = v87;
        *(_OWORD *)(v81 - 104) = v86;
        *(_OWORD *)(v81 - 120) = v85;
        *((_QWORD *)v81 - 6) = 0;
        *((_QWORD *)v81 - 5) = 0;
        *(_OWORD *)(v81 - 56) = *(_OWORD *)&v31[v80 - 56];
        *((_QWORD *)v81 - 5) = *(_QWORD *)&v31[v80 - 40];
        *((_QWORD *)v82 - 7) = 0;
        *((_QWORD *)v82 - 6) = 0;
        *((_QWORD *)v82 - 5) = 0;
        *(v81 - 32) = 0;
        *(v81 - 8) = 0;
        if (v31[v80 - 8])
        {
          *((_QWORD *)v81 - 3) = 0;
          *((_QWORD *)v81 - 2) = 0;
          *((_OWORD *)v81 - 2) = *((_OWORD *)v82 - 2);
          *((_QWORD *)v81 - 2) = *((_QWORD *)v82 - 2);
          *((_QWORD *)v82 - 4) = 0;
          *((_QWORD *)v82 - 3) = 0;
          *((_QWORD *)v82 - 2) = 0;
          *(v81 - 8) = 1;
        }
        v80 -= 192;
      }
      while (&v31[v80] != (char *)v111.i64[0]);
      v88 = (char *)v111.i64[1];
      v31 = (char *)v111.i64[0];
      v111.i64[0] = (uint64_t)&v74[v80];
      v112 = (unint64_t)v79;
      while (v88 != v31)
      {
        if (*(v88 - 8))
        {
          v89 = *((_QWORD *)v88 - 4);
          if (v89)
          {
            v90 = *((_QWORD *)v88 - 3);
            v91 = (void *)*((_QWORD *)v88 - 4);
            if (v90 != v89)
            {
              v92 = *((_QWORD *)v88 - 3);
              do
              {
                v94 = *(void **)(v92 - 24);
                v92 -= 24;
                v93 = v94;
                if (v94)
                {
                  *(_QWORD *)(v90 - 16) = v93;
                  operator delete(v93);
                }
                v90 = v92;
              }
              while (v92 != v89);
              v91 = (void *)*((_QWORD *)v88 - 4);
            }
            *((_QWORD *)v88 - 3) = v89;
            operator delete(v91);
          }
        }
        v95 = (void *)*((_QWORD *)v88 - 7);
        if (v95)
        {
          *((_QWORD *)v88 - 6) = v95;
          operator delete(v95);
        }
        v96 = (void *)*((_QWORD *)v88 - 18);
        if (v96)
        {
          *((_QWORD *)v88 - 17) = v96;
          operator delete(v96);
        }
        v88 -= 192;
      }
    }
    if (v31)
      operator delete(v31);
LABEL_99:
    v111.i64[1] = (uint64_t)v37;
    if (v130)
    {
      v97 = (char *)v128[0];
      if (v128[0])
      {
        v98 = v128[1];
        v99 = v128[0];
        if (v128[1] != v128[0])
        {
          v100 = (char *)v128[1];
          do
          {
            v102 = (void *)*((_QWORD *)v100 - 3);
            v100 -= 24;
            v101 = v102;
            if (v102)
            {
              *(v98 - 2) = v101;
              operator delete(v101);
            }
            v98 = v100;
          }
          while (v100 != v97);
          v99 = v128[0];
        }
        v128[1] = v97;
        operator delete(v99);
      }
    }
    if ((_QWORD)v126)
    {
      *((_QWORD *)&v126 + 1) = v126;
      operator delete((void *)v126);
    }
    if (v121[0])
    {
      v121[1] = v121[0];
      operator delete(v121[0]);
    }
    v5 = (__int128 *)((char *)v109 + 424);
  }
  while ((__int128 *)((char *)v109 + 424) != v107);
  v103 = v111;
  v6 = v112;
LABEL_115:
  *(int64x2_t *)(a2 + 160) = v103;
  *(_QWORD *)(a2 + 176) = v6;
  result = *(__n128 *)(a1 + 232);
  *(__n128 *)(a2 + 184) = result;
  return result;
}

void sub_223723E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49)
{
  sub_223723F10(&a21);
  sub_223693AFC(a10);
  _Unwind_Resume(a1);
}

void sub_223723E7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  void *v48;

  if (v48)
    operator delete(v48);
  sub_22317C838(&a25);
  JUMPOUT(0x223723ED8);
}

uint64_t *sub_223723F10(uint64_t *a1)
{
  if (*a1)
  {
    sub_2237149D0((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

_QWORD *sub_223723F48(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = a1[26];
  if (v2)
  {
    v3 = a1[27];
    v4 = (void *)a1[26];
    if (v3 != v2)
    {
      do
      {
        v3 -= 424;
        sub_2236EA79C(v3);
      }
      while (v3 != v2);
      v4 = (void *)a1[26];
    }
    a1[27] = v2;
    operator delete(v4);
  }
  a1[6] = &off_24EC20828;
  return a1;
}

void sub_223723FB4(uint64_t a1@<X0>, unint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v7;
  __int128 v8;
  size_t v9;
  __int128 v10;
  size_t v11;
  char **v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  sub_2237233DC(a1, a4 + 8);
  v10 = 0uLL;
  v11 = 0;
  if (a2)
  {
    if (a2 >> 60)
      sub_22316E078();
    v7 = 16 * a2;
    *(_QWORD *)&v10 = operator new(v7);
    *((_QWORD *)&v10 + 1) = v10;
    v11 = v10 + v7;
    v12 = (char **)&v10;
    do
    {
      v13 = *a3;
      sub_2232E9564(&v12, &v13);
      ++a3;
      v7 -= 16;
    }
    while (v7);
    v8 = v10;
    v9 = v11;
  }
  else
  {
    v9 = 0;
    v8 = 0uLL;
  }
  *(_OWORD *)(a4 + 208) = v8;
  *(_QWORD *)(a4 + 224) = v9;
}

void sub_22372409C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  _QWORD *v10;

  if (__p)
    operator delete(__p);
  sub_2237240C4(v10);
  _Unwind_Resume(a1);
}

_QWORD *sub_2237240C4(_QWORD *a1)
{
  uint64_t v2;
  void **v3;
  void *v4;
  void *v5;

  v3 = (void **)(a1 + 20);
  v2 = a1[20];
  if (v2)
  {
    sub_2237149D0((uint64_t)(a1 + 20), v2);
    operator delete(*v3);
  }
  v4 = (void *)a1[17];
  if (v4)
  {
    a1[18] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[14];
  if (v5)
  {
    a1[15] = v5;
    operator delete(v5);
  }
  return a1;
}

double sub_223724120@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t i;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  unsigned int v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  void **v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  size_t v59;
  uint64_t *v60;
  char *v61;
  char *v62;
  __int128 v63;
  char *v64;
  uint64_t *v65;
  void *v66;
  void *v67;
  unint64_t v68;
  unsigned __int8 *v69;
  char *v70;
  size_t v71;
  char *v72;
  unsigned __int16 *v73;
  uint64_t *v74;
  uint64_t **v75;
  uint64_t **v76;
  unint64_t v77;
  uint64_t *v78;
  int v79;
  uint64_t *v80;
  unsigned int v81;
  uint64_t *v82;
  char **v83;
  char *v84;
  char *v85;
  uint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  char *v90;
  unsigned __int16 v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t *v95;
  char *v96;
  char **v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  int v102;
  __int16 v103;
  unsigned __int16 v104;
  unsigned __int16 v105;
  char *v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  unint64_t v113;
  char *v114;
  _BYTE *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  unint64_t v121;
  char *v122;
  char *v123;
  int v124;
  __int16 v125;
  char *v126;
  char *v127;
  int v128;
  __int16 v129;
  int v130;
  char *v131;
  unsigned __int16 v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  int v141;
  __int16 v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  int v151;
  __int16 v152;
  _QWORD *v153;
  unint64_t v154;
  unint64_t v155;
  _QWORD *v156;
  _BYTE *v157;
  BOOL v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  const void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  void *v182;
  void *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t *v190;
  void *v191;
  void *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  char *v196;
  unint64_t v197;
  char *v198;
  char *v199;
  unint64_t v200;
  BOOL v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  _OWORD *v205;
  __int128 *v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  double result;
  uint64_t v220;
  int v221;
  unsigned __int16 v222;
  unsigned __int16 v223;
  unsigned __int8 *v224;
  unsigned __int8 *v225;
  uint64_t *v226;
  _QWORD *v227;
  unsigned __int16 v228;
  unsigned __int16 v229;
  unsigned __int8 *v230;
  char *v231;
  unsigned int v232;
  unsigned __int8 *v233;
  int v234;
  uint64_t v235;
  void *v236[2];
  uint64_t *v237;
  uint64_t *v238;
  void *v239[2];
  uint64_t *v240;
  uint64_t *v241;
  __int128 v242;
  __int128 v243;
  unint64_t v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  int v252;
  uint64_t v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  unint64_t v259;
  __int128 v260;
  _BYTE v261[24];
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  uint64_t v278;
  int v279;
  __int128 v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  int v284;
  uint64_t v285;
  char v286;
  int v287;
  __int128 v288;
  uint64_t v289;
  char v290;
  __int128 __p;
  uint64_t v292;
  char v293;
  uint64_t v294;

  v2 = a1;
  v294 = *MEMORY[0x24BDAC8D0];
  v242 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)v261 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)&v243 = 0;
  sub_22371A2C8((uint64_t)&v245, v261, &v243);
  v220 = a2;
  if (!BYTE8(v247))
    BYTE8(v247) = 1;
  *(_QWORD *)&v247 = *((_QWORD *)&v246 + 1);
  v4 = *(_QWORD *)(v2 + 40);
  sub_223207E58(v261, (int *)&v242);
  v250 = v263;
  v251 = v264;
  v252 = v265;
  v249 = v262;
  v248 = *(_OWORD *)&v261[8];
  v253 = v4;
  v5 = *(_OWORD *)(v2 + 48);
  v6 = *(_OWORD *)(v2 + 64);
  v7 = *(_OWORD *)(v2 + 80);
  v257 = *(_OWORD *)(v2 + 96);
  v256 = v7;
  v255 = v6;
  v254 = v5;
  v235 = v2;
  v232 = *(_DWORD *)(v2 + 112);
  if (v232)
  {
    v240 = 0;
    v241 = 0;
    *(_QWORD *)&v261[8] = 0;
    *(_QWORD *)&v261[16] = 0;
    *(_QWORD *)v261 = &v261[8];
    v9 = *(unsigned __int8 **)(v2 + 120);
    v8 = *(unsigned __int8 **)(v2 + 128);
    v10 = *(unsigned __int8 **)(v2 + 144);
    v11 = *(unsigned __int8 **)(v2 + 152);
    if (v9 == v8 && v10 == v11)
    {
      v12 = 0;
      v13 = 0;
      goto LABEL_181;
    }
    v45 = 0;
    v12 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 255;
    v224 = *(unsigned __int8 **)(v2 + 152);
    v225 = *(unsigned __int8 **)(v2 + 128);
    while (1)
    {
      while (1)
      {
        v237 = v46;
        v49 = v47 + *v9;
        v50 = *v10;
        if ((_DWORD)v50 != 255)
          break;
        v48 = 255;
        ++v9;
        ++v10;
        v47 = v49;
        if (v9 == v8)
        {
LABEL_46:
          v47 = v49;
          if (v10 == v11)
          {
            v240 = v12;
            v241 = v46;
            v153 = *(_QWORD **)v261;
            v13 = v46;
            v154 = 0xAAAAAAAAAAAAAAABLL * (v46 - v12);
            *(_QWORD *)&v243 = *(_QWORD *)v261;
            *((_QWORD *)&v243 + 1) = v12;
            v244 = v154;
            if (*(_BYTE **)v261 != &v261[8])
            {
              do
              {
                v155 = v153[4];
                if (v154 <= v155)
                  sub_22457354C(&v244, v155);
                sub_223ECBE34(&v12[3 * v155]);
                v156 = (_QWORD *)v153[1];
                if (v156)
                {
                  do
                  {
                    v157 = v156;
                    v156 = (_QWORD *)*v156;
                  }
                  while (v156);
                }
                else
                {
                  do
                  {
                    v157 = (_BYTE *)v153[2];
                    v158 = *(_QWORD *)v157 == (_QWORD)v153;
                    v153 = v157;
                  }
                  while (!v158);
                }
                *(_QWORD *)&v243 = v157;
                v153 = v157;
              }
              while (v157 != &v261[8]);
              v13 = v241;
              v2 = v235;
            }
LABEL_181:
            sub_223198030((uint64_t)v261, *(_QWORD **)&v261[8]);
            v238 = v13;
            v160 = *(_QWORD *)(v2 + 168);
            v159 = *(_QWORD *)(v2 + 176);
            if (0xAAAAAAAAAAAAAAABLL * (v13 - v12) != 0xAAAAAAAAAAAAAAABLL * ((v159 - v160) >> 6))
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/KeyframePlaneSegmentationIO.cpp", 344, (uint64_t)"recovered_rl_regions.size() == keyframe_planes.size()", 53, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              v160 = *(_QWORD *)(v2 + 168);
              v159 = *(_QWORD *)(v2 + 176);
            }
            v243 = 0uLL;
            v244 = 0;
            sub_2236E9F74((char **)&v243, 0x5555555555555555 * ((v160 - v159) >> 6));
            if (v160 != v159 || v12 != v13)
            {
              v161 = v12;
              do
              {
                v163 = (const void *)*v161;
                v162 = v161[1];
                if (*(_QWORD *)(v160 + 136) != *(_QWORD *)(v160 + 144)
                  && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/KeyframePlaneSegmentationIO.cpp", 84, (uint64_t)"this->rl_region.empty()", 23, (uint64_t)"Region runlengths were provided from external, but the sample already contains runlengths.", 90, (void (*)(void **))sub_22457406C))
                {
                  abort();
                }
                sub_223721540((uint64_t)v261, v160, (v162 - (uint64_t)v163) >> 3, v163);
                v164 = *((_QWORD *)&v243 + 1);
                if (*((_QWORD *)&v243 + 1) >= v244)
                {
                  v177 = sub_22370CA60(&v243, (uint64_t)v261);
                }
                else
                {
                  **((_OWORD **)&v243 + 1) = *(_OWORD *)v261;
                  v165 = *(_QWORD *)&v261[16];
                  *(_DWORD *)(v164 + 24) = v262;
                  *(_QWORD *)(v164 + 16) = v165;
                  v166 = *(_QWORD *)((char *)&v262 + 4);
                  *(_DWORD *)(v164 + 36) = HIDWORD(v262);
                  *(_QWORD *)(v164 + 28) = v166;
                  v167 = v264;
                  *(_OWORD *)(v164 + 40) = v263;
                  *(_OWORD *)(v164 + 56) = v167;
                  v168 = v265;
                  v169 = v266;
                  v170 = v267;
                  *(_OWORD *)(v164 + 120) = v268;
                  *(_OWORD *)(v164 + 104) = v170;
                  *(_OWORD *)(v164 + 88) = v169;
                  *(_OWORD *)(v164 + 72) = v168;
                  v171 = v269;
                  v172 = v270;
                  v173 = v271;
                  *(_OWORD *)(v164 + 184) = v272;
                  *(_OWORD *)(v164 + 168) = v173;
                  *(_OWORD *)(v164 + 152) = v172;
                  *(_OWORD *)(v164 + 136) = v171;
                  v174 = v273;
                  v175 = v274;
                  v176 = v275;
                  *(_OWORD *)(v164 + 248) = v276;
                  *(_OWORD *)(v164 + 232) = v176;
                  *(_OWORD *)(v164 + 216) = v175;
                  *(_OWORD *)(v164 + 200) = v174;
                  *(_QWORD *)(v164 + 272) = 0;
                  *(_QWORD *)(v164 + 280) = 0;
                  *(_QWORD *)(v164 + 264) = 0;
                  *(_OWORD *)(v164 + 264) = v277;
                  *(_QWORD *)(v164 + 280) = v278;
                  v277 = 0uLL;
                  v278 = 0;
                  *(_DWORD *)(v164 + 288) = v279;
                  *(_QWORD *)(v164 + 304) = 0;
                  *(_QWORD *)(v164 + 312) = 0;
                  *(_QWORD *)(v164 + 296) = 0;
                  *(_OWORD *)(v164 + 296) = v280;
                  *(_QWORD *)(v164 + 312) = v281;
                  v280 = 0uLL;
                  v281 = 0;
                  *(_QWORD *)(v164 + 320) = v282;
                  *(_DWORD *)(v164 + 328) = v283;
                  *(_DWORD *)(v164 + 332) = v284;
                  *(_BYTE *)(v164 + 336) = 0;
                  *(_BYTE *)(v164 + 344) = 0;
                  if (v286)
                  {
                    *(_QWORD *)(v164 + 336) = v285;
                    *(_BYTE *)(v164 + 344) = 1;
                  }
                  *(_DWORD *)(v164 + 352) = v287;
                  *(_BYTE *)(v164 + 360) = 0;
                  *(_BYTE *)(v164 + 384) = 0;
                  if (v290)
                  {
                    *(_QWORD *)(v164 + 360) = 0;
                    *(_QWORD *)(v164 + 368) = 0;
                    *(_QWORD *)(v164 + 376) = 0;
                    *(_OWORD *)(v164 + 360) = v288;
                    *(_QWORD *)(v164 + 376) = v289;
                    v288 = 0uLL;
                    v289 = 0;
                    *(_BYTE *)(v164 + 384) = 1;
                  }
                  *(_BYTE *)(v164 + 392) = 0;
                  *(_BYTE *)(v164 + 416) = 0;
                  if (v293)
                  {
                    *(_QWORD *)(v164 + 392) = 0;
                    *(_QWORD *)(v164 + 400) = 0;
                    *(_QWORD *)(v164 + 408) = 0;
                    *(_OWORD *)(v164 + 392) = __p;
                    *(_QWORD *)(v164 + 408) = v292;
                    __p = 0uLL;
                    v292 = 0;
                    *(_BYTE *)(v164 + 416) = 1;
                  }
                  v177 = v164 + 424;
                }
                *((_QWORD *)&v243 + 1) = v177;
                if (v293)
                {
                  v178 = __p;
                  if ((_QWORD)__p)
                  {
                    v179 = *((_QWORD *)&__p + 1);
                    v180 = (void *)__p;
                    if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
                    {
                      v181 = *((_QWORD *)&__p + 1);
                      do
                      {
                        v183 = *(void **)(v181 - 24);
                        v181 -= 24;
                        v182 = v183;
                        if (v183)
                        {
                          *(_QWORD *)(v179 - 16) = v182;
                          operator delete(v182);
                        }
                        v179 = v181;
                      }
                      while (v181 != v178);
                      v180 = (void *)__p;
                    }
                    *((_QWORD *)&__p + 1) = v178;
                    operator delete(v180);
                  }
                }
                if (v290 && (_QWORD)v288)
                {
                  *((_QWORD *)&v288 + 1) = v288;
                  operator delete((void *)v288);
                }
                if ((_QWORD)v280)
                {
                  *((_QWORD *)&v280 + 1) = v280;
                  operator delete((void *)v280);
                }
                if ((_QWORD)v277)
                {
                  *((_QWORD *)&v277 + 1) = v277;
                  operator delete((void *)v277);
                }
                v160 += 192;
                v161 += 3;
              }
              while (v160 != v159 || v161 != v238);
            }
            v184 = v244;
            v185 = v258;
            if ((_QWORD)v258)
            {
              *(_OWORD *)v239 = v243;
              v186 = *((_QWORD *)&v258 + 1);
              v187 = (void *)v258;
              v188 = v12;
              if (*((_QWORD *)&v258 + 1) != (_QWORD)v258)
              {
                do
                {
                  v186 -= 424;
                  sub_2236EA79C(v186);
                }
                while (v186 != v185);
                v187 = (void *)v258;
                v188 = v240;
              }
              *((_QWORD *)&v258 + 1) = v185;
              operator delete(v187);
              v258 = *(_OWORD *)v239;
              v259 = v184;
              v44 = v235;
              if (!v188)
                goto LABEL_229;
            }
            else
            {
              v188 = v12;
              v258 = v243;
              v259 = v244;
              v44 = v235;
              if (!v12)
                goto LABEL_229;
            }
            v189 = v241;
            if (v241 != v188)
            {
              v190 = v241;
              do
              {
                v192 = (void *)*(v190 - 3);
                v190 -= 3;
                v191 = v192;
                if (v192)
                {
                  *(v189 - 2) = (uint64_t)v191;
                  operator delete(v191);
                }
                v189 = v190;
              }
              while (v190 != v188);
            }
            operator delete(v188);
            goto LABEL_229;
          }
        }
      }
      v51 = 0xAAAAAAAAAAAAAAABLL * (v46 - v12);
      v234 = v47 + *v9;
      v230 = v9;
      v233 = v10;
      if (v51 <= v50)
      {
        v54 = v50 + 1;
        v55 = v50 + 1 - v51;
        if (0xAAAAAAAAAAAAAAABLL * ((v45 - (char *)v237) >> 3) >= v55)
        {
          if (v54 != v51)
          {
            v68 = (24 * v55 - 24) / 0x18;
            v69 = v10;
            v70 = v45;
            v71 = 24 * v68 + 24;
            bzero(v237, v71);
            v72 = (char *)v237 + v71;
            v45 = v70;
            v10 = v69;
            v237 = (uint64_t *)v72;
          }
        }
        else
        {
          if (0x5555555555555556 * ((v45 - (char *)v12) >> 3) > v54)
            v54 = 0x5555555555555556 * ((v45 - (char *)v12) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v45 - (char *)v12) >> 3) >= 0x555555555555555)
            v56 = 0xAAAAAAAAAAAAAAALL;
          else
            v56 = v54;
          if (v56 > 0xAAAAAAAAAAAAAAALL)
            sub_223174E94();
          v57 = (char *)operator new(24 * v56);
          v58 = &v57[24 * v51];
          v59 = 24 * ((24 * v55 - 24) / 0x18) + 24;
          bzero(v58, v59);
          v60 = v237;
          v61 = v58;
          if (v237 != v12)
          {
            do
            {
              v62 = v61;
              *((_QWORD *)v61 - 2) = 0;
              *((_QWORD *)v61 - 1) = 0;
              v63 = *(_OWORD *)(v60 - 3);
              v60 -= 3;
              *(_OWORD *)(v61 - 24) = v63;
              v61 -= 24;
              *((_QWORD *)v62 - 1) = v60[2];
              *v60 = 0;
              v60[1] = 0;
              v60[2] = 0;
            }
            while (v60 != v12);
            v64 = (char *)v237;
            v65 = v237;
            do
            {
              v67 = (void *)*(v65 - 3);
              v65 -= 3;
              v66 = v67;
              if (v67)
              {
                *((_QWORD *)v64 - 2) = v66;
                operator delete(v66);
              }
              v64 = (char *)v65;
            }
            while (v65 != v12);
            v2 = v235;
          }
          v45 = &v57[24 * v56];
          v237 = (uint64_t *)&v58[v59];
          if (v12)
            operator delete(v12);
          v12 = (uint64_t *)v61;
          v10 = v233;
        }
        v231 = v45;
        v50 = *v10;
        v52 = (void **)&v12[3 * v50];
        v53 = v47 / v232;
        if ((_DWORD)v50 != v48)
          goto LABEL_83;
      }
      else
      {
        v231 = v45;
        v52 = (void **)&v12[3 * *v10];
        v53 = v47 / v232;
        if ((_DWORD)v50 != v48)
          goto LABEL_83;
      }
      v73 = (unsigned __int16 *)v12[3 * v50 + 1];
      if (*v52 != v73 && *(v73 - 4) == (unsigned __int16)v53)
      {
        v74 = *(uint64_t **)&v261[8];
        v75 = (uint64_t **)&v261[8];
LABEL_75:
        v76 = v75;
        if (v74)
        {
          do
          {
            v75 = (uint64_t **)v74;
            v77 = v74[4];
            if (v77 > v50)
            {
              v74 = *v75;
              goto LABEL_75;
            }
            if (v77 >= v50)
              goto LABEL_83;
            v74 = v75[1];
          }
          while (v74);
          v76 = v75 + 1;
        }
        v78 = (uint64_t *)operator new(0x28uLL);
        v78[4] = v50;
        *v78 = 0;
        v78[1] = 0;
        v78[2] = (uint64_t)v75;
        *v76 = v78;
        if (**(_QWORD **)v261)
        {
          *(_QWORD *)v261 = **(_QWORD **)v261;
          v78 = *v76;
        }
        sub_2231A9A8C(*(uint64_t **)&v261[8], v78);
        ++*(_QWORD *)&v261[16];
      }
LABEL_83:
      v79 = v47 - v53 * v232;
      v80 = v12;
      v81 = (v234 - 1) / v232;
      v82 = &v80[3 * v50];
      v85 = (char *)v82[1];
      v83 = (char **)(v82 + 1);
      v84 = v85;
      if ((unsigned __int16)v53 != (unsigned __int16)v81)
      {
        v223 = (v234 - 1) % v232;
        v91 = v53;
        v92 = (char *)*v52;
        v93 = (v84 - (_BYTE *)*v52) >> 3;
        v226 = v80;
        v228 = v91;
        v94 = v93 - (__int16)v91 + (__int16)v81 + 1;
        v95 = &v80[3 * v50];
        v98 = (char *)v95[2];
        v97 = (char **)(v95 + 2);
        v96 = v98;
        if (v94 <= (v98 - (_BYTE *)*v52) >> 3)
        {
          v100 = v84;
          v104 = *(_WORD *)(v2 + 112) - 1;
          if (v84 < v96)
            goto LABEL_94;
        }
        else
        {
          v221 = v79;
          if (v94 >> 61)
            sub_2236EA0B4();
          v99 = (char *)operator new(8 * v94);
          v100 = &v99[8 * v93];
          v101 = v100;
          v79 = v221;
          if (v84 != v92)
          {
            v101 = &v99[8 * v93];
            do
            {
              v102 = *((_DWORD *)v84 - 2);
              v84 -= 8;
              v103 = *((_WORD *)v84 + 2);
              *((_DWORD *)v101 - 2) = v102;
              v101 -= 8;
              *((_WORD *)v101 + 2) = v103;
            }
            while (v84 != v92);
          }
          *v52 = v101;
          v96 = &v99[8 * v94];
          *v83 = v100;
          *v97 = v96;
          if (v92)
          {
            operator delete(v92);
            v79 = v221;
            v100 = *v83;
            v96 = *v97;
          }
          v104 = *(_WORD *)(v2 + 112) - 1;
          if (v100 < v96)
          {
LABEL_94:
            v105 = v228;
            *(_QWORD *)v100 = (v79 << 16) | ((unint64_t)v104 << 32) | v228;
            v106 = v100 + 8;
LABEL_126:
            *v83 = v106;
            v130 = (__int16)(v105 + 1);
            if (v130 >= (__int16)v81)
            {
              v131 = v106;
LABEL_128:
              if (v131 < *v97)
              {
                *(_QWORD *)v131 = (unsigned __int16)((v234 - 1) / v232) | ((unint64_t)v223 << 32);
                v90 = v131 + 8;
                v12 = v226;
                goto LABEL_168;
              }
              v143 = (char *)*v52;
              v144 = (v131 - (_BYTE *)*v52) >> 3;
              v145 = v144 + 1;
              if ((unint64_t)(v144 + 1) >> 61)
                sub_2236EA0B4();
              v146 = *v97 - v143;
              if (v146 >> 2 > v145)
                v145 = v146 >> 2;
              if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFF8)
                v147 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v147 = v145;
              if (v147)
              {
                if (v147 >> 61)
                  sub_223174E94();
                v148 = (char *)operator new(8 * v147);
              }
              else
              {
                v148 = 0;
              }
              v149 = &v148[8 * v144];
              v150 = &v148[8 * v147];
              *(_QWORD *)v149 = (unsigned __int16)((v234 - 1) / v232) | ((unint64_t)v223 << 32);
              v90 = v149 + 8;
              if (v131 == v143)
              {
                *v52 = v149;
                *v83 = v90;
                *v97 = v150;
                v2 = v235;
                v12 = v226;
              }
              else
              {
                v2 = v235;
                v12 = v226;
                do
                {
                  v151 = *((_DWORD *)v131 - 2);
                  v131 -= 8;
                  v152 = *((_WORD *)v131 + 2);
                  *((_DWORD *)v149 - 2) = v151;
                  v149 -= 8;
                  *((_WORD *)v149 + 2) = v152;
                }
                while (v131 != v143);
                v131 = (char *)*v52;
                *v52 = v149;
                *v83 = v90;
                *v97 = v150;
                if (!v131)
                  goto LABEL_168;
              }
              v126 = v131;
LABEL_167:
              operator delete(v126);
              goto LABEL_168;
            }
            while (2)
            {
              v132 = *(_WORD *)(v2 + 112) - 1;
              if (v106 < *v97)
              {
                *(_QWORD *)v106 = (unsigned __int16)v130 | ((unint64_t)(unsigned __int16)(*(_WORD *)(v2 + 112) - 1) << 32);
                v131 = v106 + 8;
                goto LABEL_131;
              }
              v133 = (char *)*v52;
              v134 = (v106 - (_BYTE *)*v52) >> 3;
              v135 = v134 + 1;
              if ((unint64_t)(v134 + 1) >> 61)
                sub_2236EA0B4();
              v136 = *v97 - v133;
              if (v136 >> 2 > v135)
                v135 = v136 >> 2;
              if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8)
                v137 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v137 = v135;
              if (v137)
              {
                if (v137 >> 61)
                  sub_223174E94();
                v138 = (char *)operator new(8 * v137);
              }
              else
              {
                v138 = 0;
              }
              v139 = &v138[8 * v134];
              v140 = &v138[8 * v137];
              *(_QWORD *)v139 = (unsigned __int16)v130 | ((unint64_t)v132 << 32);
              v131 = v139 + 8;
              if (v106 == v133)
              {
                *v52 = v139;
                *v83 = v131;
                *v97 = v140;
                v2 = v235;
              }
              else
              {
                v2 = v235;
                do
                {
                  v141 = *((_DWORD *)v106 - 2);
                  v106 -= 8;
                  v142 = *((_WORD *)v106 + 2);
                  *((_DWORD *)v139 - 2) = v141;
                  v139 -= 8;
                  *((_WORD *)v139 + 2) = v142;
                }
                while (v106 != v133);
                v106 = (char *)*v52;
                *v52 = v139;
                *v83 = v131;
                *v97 = v140;
                if (!v106)
                {
LABEL_131:
                  *v83 = v131;
                  v130 = (__int16)(v130 + 1);
                  v106 = v131;
                  if (v130 >= (__int16)v81)
                    goto LABEL_128;
                  continue;
                }
              }
              break;
            }
            operator delete(v106);
            goto LABEL_131;
          }
        }
        v115 = *v52;
        v116 = (v100 - (_BYTE *)*v52) >> 3;
        v117 = v116 + 1;
        if ((unint64_t)(v116 + 1) >> 61)
          sub_2236EA0B4();
        v118 = v96 - v115;
        if (v118 >> 2 > v117)
          v117 = v118 >> 2;
        if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8)
          v119 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v119 = v117;
        if (v119)
        {
          v222 = v104;
          if (v119 >> 61)
            sub_223174E94();
          v120 = v79;
          v121 = v119;
          v122 = (char *)operator new(8 * v119);
          v79 = v120;
          v119 = v121;
          v104 = v222;
        }
        else
        {
          v122 = 0;
        }
        v127 = &v122[8 * v116];
        v105 = v228;
        *(_QWORD *)v127 = (v79 << 16) | ((unint64_t)v104 << 32) | v228;
        v106 = v127 + 8;
        if (v100 != v115)
        {
          do
          {
            v128 = *((_DWORD *)v100 - 2);
            v100 -= 8;
            v129 = *((_WORD *)v100 + 2);
            *((_DWORD *)v127 - 2) = v128;
            v127 -= 8;
            *((_WORD *)v127 + 2) = v129;
          }
          while (v100 != v115);
          v100 = (char *)*v52;
        }
        *v52 = v127;
        *v83 = v106;
        *v97 = &v122[8 * v119];
        if (v100)
          operator delete(v100);
        goto LABEL_126;
      }
      v86 = &v80[3 * v50];
      v89 = v86[2];
      v88 = v86 + 2;
      v87 = v89;
      v12 = v80;
      if ((unint64_t)v84 >= v89)
      {
        v229 = v53;
        v107 = (char *)*v52;
        v108 = (v84 - (_BYTE *)*v52) >> 3;
        v109 = v108 + 1;
        if ((unint64_t)(v108 + 1) >> 61)
          sub_2236EA0B4();
        v110 = v87 - (_QWORD)v107;
        if (v110 >> 2 > v109)
          v109 = v110 >> 2;
        if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8)
          v111 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v111 = v109;
        if (v111)
        {
          v227 = v88;
          if (v111 >> 61)
            sub_223174E94();
          v112 = v79;
          v113 = v111;
          v114 = (char *)operator new(8 * v111);
          v79 = v112;
          v111 = v113;
          v88 = v227;
        }
        else
        {
          v114 = 0;
        }
        v123 = &v114[8 * v108];
        *(_QWORD *)v123 = (v79 << 16) | ((unint64_t)(unsigned __int16)((v234 - 1) % v232) << 32) | v229;
        v90 = v123 + 8;
        if (v84 != v107)
        {
          do
          {
            v124 = *((_DWORD *)v84 - 2);
            v84 -= 8;
            v125 = *((_WORD *)v84 + 2);
            *((_DWORD *)v123 - 2) = v124;
            v123 -= 8;
            *((_WORD *)v123 + 2) = v125;
          }
          while (v84 != v107);
          v84 = (char *)*v52;
        }
        *v52 = v123;
        *v83 = v90;
        *v88 = &v114[8 * v111];
        if (!v84)
          goto LABEL_168;
        v126 = v84;
        goto LABEL_167;
      }
      *(_QWORD *)v84 = (v79 << 16) | ((unint64_t)(unsigned __int16)((v234 - 1) % v232) << 32) | (unsigned __int16)v53;
      v90 = v84 + 8;
LABEL_168:
      v45 = v231;
      v11 = v224;
      v8 = v225;
      *v83 = v90;
      v10 = v233 + 1;
      v48 = *v233;
      v46 = v237;
      v49 = v234;
      v9 = v230 + 1;
      v47 = v234;
      if (v230 + 1 == v225)
        goto LABEL_46;
    }
  }
  v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v2 + 176) - *(_QWORD *)(v2 + 168)) >> 6);
  v244 = 0;
  v243 = 0uLL;
  sub_2236E9F74((char **)&v243, v14);
  v16 = *(_QWORD *)(v2 + 168);
  for (i = *(_QWORD *)(v2 + 176); v16 != i; v16 += 192)
  {
    v17 = *(_BYTE **)(v16 + 136);
    v18 = *(_BYTE **)(v16 + 144);
    if (v17 == v18)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/KeyframePlaneSegmentationIO.cpp", 77, (uint64_t)"!rl_region.empty()", 18, (uint64_t)"Region runlengths are empty but no runlengths were provided from external. When deserializing from sample versions <= 3 the runlengths must be provided.", 152, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v17 = *(_BYTE **)(v16 + 136);
      v18 = *(_BYTE **)(v16 + 144);
    }
    sub_223721540((uint64_t)v261, v16, (v18 - v17) >> 3, v17);
    v19 = *((_QWORD *)&v243 + 1);
    if (*((_QWORD *)&v243 + 1) >= v244)
    {
      v32 = sub_22370CA60(&v243, (uint64_t)v261);
    }
    else
    {
      **((_OWORD **)&v243 + 1) = *(_OWORD *)v261;
      v20 = *(_QWORD *)&v261[16];
      *(_DWORD *)(v19 + 24) = v262;
      *(_QWORD *)(v19 + 16) = v20;
      v21 = *(_QWORD *)((char *)&v262 + 4);
      *(_DWORD *)(v19 + 36) = HIDWORD(v262);
      *(_QWORD *)(v19 + 28) = v21;
      v22 = v264;
      *(_OWORD *)(v19 + 40) = v263;
      *(_OWORD *)(v19 + 56) = v22;
      v23 = v265;
      v24 = v266;
      v25 = v267;
      *(_OWORD *)(v19 + 120) = v268;
      *(_OWORD *)(v19 + 104) = v25;
      *(_OWORD *)(v19 + 88) = v24;
      *(_OWORD *)(v19 + 72) = v23;
      v26 = v269;
      v27 = v270;
      v28 = v271;
      *(_OWORD *)(v19 + 184) = v272;
      *(_OWORD *)(v19 + 168) = v28;
      *(_OWORD *)(v19 + 152) = v27;
      *(_OWORD *)(v19 + 136) = v26;
      v29 = v273;
      v30 = v274;
      v31 = v275;
      *(_OWORD *)(v19 + 248) = v276;
      *(_OWORD *)(v19 + 232) = v31;
      *(_OWORD *)(v19 + 216) = v30;
      *(_OWORD *)(v19 + 200) = v29;
      *(_QWORD *)(v19 + 272) = 0;
      *(_QWORD *)(v19 + 280) = 0;
      *(_QWORD *)(v19 + 264) = 0;
      *(_OWORD *)(v19 + 264) = v277;
      *(_QWORD *)(v19 + 280) = v278;
      v277 = 0uLL;
      v278 = 0;
      *(_DWORD *)(v19 + 288) = v279;
      *(_QWORD *)(v19 + 304) = 0;
      *(_QWORD *)(v19 + 312) = 0;
      *(_QWORD *)(v19 + 296) = 0;
      *(_OWORD *)(v19 + 296) = v280;
      *(_QWORD *)(v19 + 312) = v281;
      v280 = 0uLL;
      v281 = 0;
      *(_QWORD *)(v19 + 320) = v282;
      *(_DWORD *)(v19 + 328) = v283;
      *(_DWORD *)(v19 + 332) = v284;
      *(_BYTE *)(v19 + 336) = 0;
      *(_BYTE *)(v19 + 344) = 0;
      if (v286)
      {
        *(_QWORD *)(v19 + 336) = v285;
        *(_BYTE *)(v19 + 344) = 1;
      }
      *(_DWORD *)(v19 + 352) = v287;
      *(_BYTE *)(v19 + 360) = 0;
      *(_BYTE *)(v19 + 384) = 0;
      if (v290)
      {
        *(_QWORD *)(v19 + 360) = 0;
        *(_QWORD *)(v19 + 368) = 0;
        *(_QWORD *)(v19 + 376) = 0;
        *(_OWORD *)(v19 + 360) = v288;
        *(_QWORD *)(v19 + 376) = v289;
        v288 = 0uLL;
        v289 = 0;
        *(_BYTE *)(v19 + 384) = 1;
      }
      *(_BYTE *)(v19 + 392) = 0;
      *(_BYTE *)(v19 + 416) = 0;
      if (v293)
      {
        *(_QWORD *)(v19 + 392) = 0;
        *(_QWORD *)(v19 + 400) = 0;
        *(_QWORD *)(v19 + 408) = 0;
        *(_OWORD *)(v19 + 392) = __p;
        *(_QWORD *)(v19 + 408) = v292;
        __p = 0uLL;
        v292 = 0;
        *(_BYTE *)(v19 + 416) = 1;
      }
      v32 = v19 + 424;
    }
    *((_QWORD *)&v243 + 1) = v32;
    if (v293)
    {
      v33 = __p;
      if ((_QWORD)__p)
      {
        v34 = *((_QWORD *)&__p + 1);
        v35 = (void *)__p;
        if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
        {
          v36 = *((_QWORD *)&__p + 1);
          do
          {
            v38 = *(void **)(v36 - 24);
            v36 -= 24;
            v37 = v38;
            if (v38)
            {
              *(_QWORD *)(v34 - 16) = v37;
              operator delete(v37);
            }
            v34 = v36;
          }
          while (v36 != v33);
          v35 = (void *)__p;
        }
        *((_QWORD *)&__p + 1) = v33;
        operator delete(v35);
      }
    }
    if (v290 && (_QWORD)v288)
    {
      *((_QWORD *)&v288 + 1) = v288;
      operator delete((void *)v288);
    }
    if ((_QWORD)v280)
    {
      *((_QWORD *)&v280 + 1) = v280;
      operator delete((void *)v280);
    }
    if ((_QWORD)v277)
    {
      *((_QWORD *)&v277 + 1) = v277;
      operator delete((void *)v277);
    }
  }
  v39 = v243;
  v40 = v244;
  v41 = v258;
  if ((_QWORD)v258)
  {
    *(_OWORD *)v236 = v243;
    v42 = *((_QWORD *)&v258 + 1);
    v43 = (void *)v258;
    if (*((_QWORD *)&v258 + 1) != (_QWORD)v258)
    {
      do
      {
        v42 -= 424;
        sub_2236EA79C(v42);
      }
      while (v42 != v41);
      v43 = (void *)v258;
    }
    *((_QWORD *)&v258 + 1) = v41;
    operator delete(v43);
    v39 = *(_OWORD *)v236;
  }
  v258 = v39;
  v259 = v40;
  v44 = v2;
LABEL_229:
  v260 = *(_OWORD *)(v44 + 192);
  v194 = *(char **)(v44 + 208);
  v193 = *(char **)(v44 + 216);
  memset(v261, 0, sizeof(v261));
  v195 = v193 - v194;
  if (v193 != v194)
  {
    if (v195 < 0)
      sub_22316E078();
    v196 = (char *)operator new(v193 - v194);
    v197 = v195 - 16;
    if ((unint64_t)(v195 - 16) >= 0x90)
    {
      v200 = (v197 & 0xFFFFFFFFFFFFFFF0) + 16;
      v201 = v196 >= &v194[v200] || v194 >= &v196[v200];
      v198 = v196;
      if (v201)
      {
        v202 = (v197 >> 4) + 1;
        v203 = 16 * (v202 & 0x1FFFFFFFFFFFFFFCLL);
        v204 = &v194[v203];
        v198 = &v196[v203];
        v205 = v196 + 32;
        v206 = (__int128 *)(v194 + 32);
        v207 = v202 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v209 = *(v206 - 2);
          v208 = *(v206 - 1);
          v211 = *v206;
          v210 = v206[1];
          v206 += 4;
          *(v205 - 2) = v209;
          *(v205 - 1) = v208;
          *v205 = v211;
          v205[1] = v210;
          v205 += 4;
          v207 -= 4;
        }
        while (v207);
        v194 = v204;
        if (v202 == (v202 & 0x1FFFFFFFFFFFFFFCLL))
          goto LABEL_243;
      }
    }
    else
    {
      v198 = v196;
    }
    do
    {
      v212 = *(_OWORD *)v194;
      v194 += 16;
      *(_OWORD *)v198 = v212;
      v198 += 16;
    }
    while (v194 != v193);
LABEL_243:
    v199 = &v196[16 * (v195 >> 4)];
    goto LABEL_244;
  }
  v199 = 0;
  v198 = 0;
  v196 = 0;
LABEL_244:
  v213 = v246;
  *(_OWORD *)v220 = v245;
  *(_OWORD *)(v220 + 16) = v213;
  v214 = v248;
  *(_OWORD *)(v220 + 32) = v247;
  v215 = v249;
  *(_OWORD *)(v220 + 64) = v214;
  *(_OWORD *)(v220 + 80) = v215;
  v216 = v251;
  *(_OWORD *)(v220 + 96) = v250;
  *(_OWORD *)(v220 + 112) = v216;
  *(_DWORD *)(v220 + 128) = v252;
  *(_QWORD *)(v220 + 136) = v253;
  *(_QWORD *)(v220 + 48) = &off_24EC207B8;
  *(_QWORD *)(v220 + 56) = &off_24EC20868;
  v217 = v257;
  *(_OWORD *)(v220 + 176) = v256;
  *(_OWORD *)(v220 + 192) = v217;
  v218 = v255;
  *(_OWORD *)(v220 + 144) = v254;
  *(_OWORD *)(v220 + 160) = v218;
  *(_OWORD *)(v220 + 208) = v258;
  *(_QWORD *)(v220 + 224) = v259;
  result = *(double *)&v260;
  *(_OWORD *)(v220 + 232) = v260;
  *(_QWORD *)(v220 + 248) = v196;
  *(_QWORD *)(v220 + 256) = v198;
  *(_QWORD *)(v220 + 264) = v199;
  return result;
}

void sub_2237255D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  sub_2236E9A70(&a31);
  sub_223723F48(&a34);
  _Unwind_Resume(a1);
}

void sub_223725824(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  char *v19;
  void *v20;

  v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      sub_22316E078();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 48 * a2;
    v6 = (char *)operator new(48 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_8:
        operator delete(v2);
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        *((_OWORD *)v10 - 3) = *(_OWORD *)&v4[v9 - 48];
        *((_QWORD *)v10 - 4) = *(_QWORD *)&v4[v9 - 32];
        *((_QWORD *)v11 - 6) = 0;
        *((_QWORD *)v11 - 5) = 0;
        *((_QWORD *)v11 - 4) = 0;
        *(_OWORD *)(v10 - 24) = *(_OWORD *)&v4[v9 - 24];
        *((_QWORD *)v10 - 1) = *(_QWORD *)&v4[v9 - 8];
        *((_QWORD *)v11 - 3) = 0;
        *((_QWORD *)v11 - 2) = 0;
        *((_QWORD *)v11 - 1) = 0;
        v9 -= 48;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v12 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v12 != v2)
      {
        do
        {
          v13 = *((_QWORD *)v12 - 3);
          if (v13)
          {
            v14 = *((_QWORD *)v12 - 2);
            v15 = (void *)*((_QWORD *)v12 - 3);
            if (v14 != v13)
            {
              v16 = *((_QWORD *)v12 - 2);
              do
              {
                v18 = *(void **)(v16 - 24);
                v16 -= 24;
                v17 = v18;
                if (v18)
                {
                  *(_QWORD *)(v14 - 16) = v17;
                  operator delete(v17);
                }
                v14 = v16;
              }
              while (v16 != v13);
              v15 = (void *)*((_QWORD *)v12 - 3);
            }
            *((_QWORD *)v12 - 2) = v13;
            operator delete(v15);
          }
          v19 = v12 - 48;
          v20 = (void *)*((_QWORD *)v12 - 6);
          if (v20)
          {
            *((_QWORD *)v12 - 5) = v20;
            operator delete(v20);
          }
          v12 -= 48;
        }
        while (v19 != v2);
      }
      if (v2)
        goto LABEL_8;
    }
  }
}

char *sub_2237259A4(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  char *v24;
  void *v25;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v5 = 0x555555555555555;
  else
    v5 = v4;
  if (v5 > 0x555555555555555)
    sub_223174E94();
  v7 = 48 * v5;
  v8 = (char *)operator new(48 * v5);
  v9 = &v8[48 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  v10 = &v8[v7];
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v9 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = v9 + 48;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = &v9[v14];
      v16 = &v13[v14];
      *((_OWORD *)v15 - 3) = *(_OWORD *)&v13[v14 - 48];
      *((_QWORD *)v15 - 4) = *(_QWORD *)&v13[v14 - 32];
      *((_QWORD *)v16 - 6) = 0;
      *((_QWORD *)v16 - 5) = 0;
      *((_QWORD *)v16 - 4) = 0;
      *(_OWORD *)(v15 - 24) = *(_OWORD *)&v13[v14 - 24];
      *((_QWORD *)v15 - 1) = *(_QWORD *)&v13[v14 - 8];
      *((_QWORD *)v16 - 3) = 0;
      *((_QWORD *)v16 - 2) = 0;
      *((_QWORD *)v16 - 1) = 0;
      v14 -= 48;
    }
    while (&v13[v14] != v12);
    v13 = (char *)*a1;
    v17 = (char *)a1[1];
    *a1 = &v9[v14];
    a1[1] = v11;
    a1[2] = v10;
    if (v17 != v13)
    {
      do
      {
        v18 = *((_QWORD *)v17 - 3);
        if (v18)
        {
          v19 = *((_QWORD *)v17 - 2);
          v20 = (void *)*((_QWORD *)v17 - 3);
          if (v19 != v18)
          {
            v21 = *((_QWORD *)v17 - 2);
            do
            {
              v23 = *(void **)(v21 - 24);
              v21 -= 24;
              v22 = v23;
              if (v23)
              {
                *(_QWORD *)(v19 - 16) = v22;
                operator delete(v22);
              }
              v19 = v21;
            }
            while (v21 != v18);
            v20 = (void *)*((_QWORD *)v17 - 3);
          }
          *((_QWORD *)v17 - 2) = v18;
          operator delete(v20);
        }
        v24 = v17 - 48;
        v25 = (void *)*((_QWORD *)v17 - 6);
        if (v25)
        {
          *((_QWORD *)v17 - 5) = v25;
          operator delete(v25);
        }
        v17 -= 48;
      }
      while (v24 != v13);
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

uint64_t sub_223725B88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  if (*(_BYTE *)(a1 + 184))
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 168);
      v4 = *(void **)(a1 + 160);
      if (v3 != v2)
      {
        v5 = *(_QWORD *)(a1 + 168);
        do
        {
          v7 = *(void **)(v5 - 24);
          v5 -= 24;
          v6 = v7;
          if (v7)
          {
            *(_QWORD *)(v3 - 16) = v6;
            operator delete(v6);
          }
          v3 = v5;
        }
        while (v5 != v2);
        v4 = *(void **)(a1 + 160);
      }
      *(_QWORD *)(a1 + 168) = v2;
      operator delete(v4);
    }
  }
  v8 = *(void **)(a1 + 136);
  if (v8)
  {
    *(_QWORD *)(a1 + 144) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 48);
  if (v9)
  {
    *(_QWORD *)(a1 + 56) = v9;
    operator delete(v9);
  }
  return a1;
}

__n128 sub_223725C24(uint64_t a1, uint64_t a2)
{
  __n128 result;
  uint64_t v3;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  float32x4_t v15;
  float v16;
  float v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned __int16 *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint32x4_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  uint32x4_t v58;
  uint32x4_t v59;
  uint32x4_t v60;
  uint32x4_t v61;
  uint32x4_t v62;
  uint32x4_t v63;
  uint32x4_t v64;
  uint32x4_t v65;
  uint32x2_t v66;

  result.n128_u64[0] = 0;
  *(_OWORD *)(a1 + 44) = 0u;
  v3 = a1 + 44;
  *(_QWORD *)(a1 + 204) = 0;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  if (*(_DWORD *)(a2 + 56) && *(_DWORD *)(a2 + 60))
  {
    if (*(_QWORD *)(a1 + 272) == *(_QWORD *)(a1 + 264))
    {
      v11 = 0;
      v7 = -1;
    }
    else
    {
      v6 = *(__int16 *)(a1 + 328);
      if (v6 < 0 || (v7 = *(__int16 *)(a1 + 330), (v7 & 0x80000000) != 0))
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/RLRegion.hpp", 180, (uint64_t)"(bounding_box_.min_corner.e() >= T{0}).all()", 44, (uint64_t)"Cannot create arr::IndexRange2 from region with negative row/column indices", 75, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        LOWORD(v6) = *(_WORD *)(a1 + 328);
        LOWORD(v7) = *(_WORD *)(a1 + 330);
      }
      v8 = (unsigned __int16)~(*(_WORD *)(a1 + 332) - v6);
      v7 = (__int16)v7;
      v9 = (__int16)v7 + (__int16)(*(_WORD *)(a1 + 334) - v7);
      if (*(_WORD *)(a1 + 334) - (_WORD)v7 == 0xFFFF)
      {
        v9 = 0;
        v7 = -1;
      }
      v10 = v8 == 0;
      if (v8)
        v11 = v9;
      else
        v11 = 0;
      if (v10)
        v7 = -1;
    }
    v12 = v11 >= v7;
    v13 = v11 - v7;
    if (v12)
      v14 = v13 + 1;
    else
      v14 = 0;
    v66 = 0;
    v15 = 0uLL;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v16 = (float)v14;
    result.n128_f32[0] = fmaxf((float)v14 * 0.0625, 1.0);
    v17 = result.n128_f32[0] * 0.5;
    v18 = 0uLL;
    v19 = 0uLL;
    v20 = 0uLL;
    v21 = 0uLL;
    if ((float)(result.n128_f32[0] * 0.5) < (float)v14)
    {
      v22 = (float)v7;
      v23 = *(__int16 *)(a1 + 288);
      v24 = *(_QWORD *)(a1 + 296);
      v25 = (*(_QWORD *)(a1 + 304) - v24) >> 4;
      v26 = *(_QWORD *)(a1 + 264);
      v27 = *(_DWORD *)(a2 + 48);
      v28 = *(_DWORD *)(a2 + 68);
      v29 = *(_QWORD *)(a2 + 24);
      while (1)
      {
        v30 = (int)(float)(v17 + v22);
        v31 = (v30 - v23);
        if (v30 - v23 >= 0 && v25 > v31)
        {
          v32 = (uint64_t *)(v24 + 16 * v31);
          v33 = *v32;
          v34 = v32[1];
          if (v33 != v34)
            break;
        }
LABEL_22:
        v17 = result.n128_f32[0] + v17;
        if (v17 >= v16)
        {
          v15 = vcvtq_f32_u32(v56);
          v18 = vcvtq_f32_u32(v57);
          v19 = vcvtq_f32_u32(v58);
          v20 = vcvtq_f32_u32(v59);
          v21 = vcvtq_f32_u32(v60);
          goto LABEL_41;
        }
      }
      v35 = v26 + 8 * v34;
      v36 = v29 + 2 * (v28 * v30);
      v37 = v26 + 8 * v33;
      while (1)
      {
        v38 = *(unsigned __int16 *)(v37 + 4);
        v39 = *(unsigned __int16 *)(v37 + 2);
        if (v39 != (unsigned __int16)(v38 + 1))
          break;
LABEL_27:
        v37 += 8;
        if (v37 == v35)
          goto LABEL_22;
      }
      while (1)
      {
        v40 = (unsigned __int16 *)(v36 + 2 * (v27 * (__int16)v39));
        v41 = *v40;
        if ((v41 >> 8) <= 0x29)
        {
          v56.i32[v41 >> 8] += v41;
          v42 = v40[1];
          v43 = v42 >> 8;
          if ((v42 >> 8) > 0x29)
          {
LABEL_33:
            v44 = v40[2];
            v45 = v44 >> 8;
            if ((v44 >> 8) > 0x29)
              goto LABEL_34;
            goto LABEL_38;
          }
        }
        else
        {
          v42 = v40[1];
          v43 = v42 >> 8;
          if ((v42 >> 8) > 0x29)
            goto LABEL_33;
        }
        v56.i32[v43] += v42;
        v44 = v40[2];
        v45 = v44 >> 8;
        if ((v44 >> 8) > 0x29)
        {
LABEL_34:
          v46 = v40[3];
          v47 = v46 >> 8;
          if ((v46 >> 8) <= 0x29)
            goto LABEL_39;
          goto LABEL_30;
        }
LABEL_38:
        v56.i32[v45] += v44;
        v46 = v40[3];
        v47 = v46 >> 8;
        if ((v46 >> 8) <= 0x29)
LABEL_39:
          v56.i32[v47] += v46;
LABEL_30:
        v10 = v38 == (unsigned __int16)v39;
        LOWORD(v39) = v39 + 1;
        if (v10)
          goto LABEL_27;
      }
    }
LABEL_41:
    v56 = vcvtq_u32_f32(vmulq_n_f32(v15, result.n128_f32[0]));
    v57 = vcvtq_u32_f32(vmulq_n_f32(v18, result.n128_f32[0]));
    v58 = vcvtq_u32_f32(vmulq_n_f32(v19, result.n128_f32[0]));
    v59 = vcvtq_u32_f32(vmulq_n_f32(v20, result.n128_f32[0]));
    v60 = vcvtq_u32_f32(vmulq_n_f32(v21, result.n128_f32[0]));
    v48 = v60;
    v61 = vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32(v61), result.n128_f32[0]));
    v49 = v61;
    v62 = vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32(v62), result.n128_f32[0]));
    v50 = v62;
    v63 = vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32(v63), result.n128_f32[0]));
    v51 = v63;
    v64 = vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32(v64), result.n128_f32[0]));
    v52 = v64;
    v65 = vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32(v65), result.n128_f32[0]));
    v66 = vcvt_u32_f32(vmul_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)result.n128_u64[0], 0), vcvt_f32_u32(v66)));
    v53 = v57;
    *(uint32x4_t *)v3 = v56;
    *(uint32x4_t *)(v3 + 16) = v53;
    v54 = v58;
    v55 = v59;
    *(uint32x4_t *)(v3 + 64) = v48;
    *(uint32x4_t *)(v3 + 80) = v49;
    *(uint32x4_t *)(v3 + 32) = v54;
    *(uint32x4_t *)(v3 + 48) = v55;
    result = (__n128)v65;
    *(uint32x2_t *)(v3 + 160) = v66;
    *(uint32x4_t *)(v3 + 128) = v52;
    *(__n128 *)(v3 + 144) = result;
    *(uint32x4_t *)(v3 + 96) = v50;
    *(uint32x4_t *)(v3 + 112) = v51;
  }
  return result;
}

uint64_t sub_223725FE8(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t ***v12;
  uint64_t **v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;

  if (*(_QWORD *)(result + 208) != *(_QWORD *)(result + 216) && a3[3])
  {
    v5 = result;
    kdebug_trace();
    v6 = *(_QWORD *)(v5 + 208);
    v7 = *(_QWORD *)(v5 + 216);
    if (v6 != v7)
    {
      v8 = a3[1];
      if (v8)
      {
        v9 = 0;
LABEL_6:
        v10 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          v11 = v9;
          if (v8 <= v9)
            v11 = v9 % v8;
        }
        else
        {
          v11 = v9 & (v8 + 255);
        }
        v12 = *(uint64_t ****)(*a3 + 8 * v11);
        if (v12)
        {
          v13 = *v12;
          if (v13)
          {
            if (v10.u32[0] < 2uLL)
            {
              v14 = v8 - 1;
              while (1)
              {
                v16 = v13[1];
                if (v16 == (uint64_t *)v9)
                {
                  if (*((unsigned __int8 *)v13 + 16) == v9)
                    goto LABEL_26;
                }
                else if (((unint64_t)v16 & v14) != v11)
                {
                  goto LABEL_27;
                }
                v13 = (uint64_t **)*v13;
                if (!v13)
                  goto LABEL_27;
              }
            }
            do
            {
              v15 = (unint64_t)v13[1];
              if (v15 == v9)
              {
                if (*((unsigned __int8 *)v13 + 16) == v9)
                {
LABEL_26:
                  sub_223725C24(v6, a2);
                  break;
                }
              }
              else
              {
                if (v15 >= v8)
                  v15 %= v8;
                if (v15 != v11)
                  break;
              }
              v13 = (uint64_t **)*v13;
            }
            while (v13);
          }
        }
LABEL_27:
        while (1)
        {
          v6 += 424;
          if (v6 == v7)
            break;
          ++v9;
          v8 = a3[1];
          if (v8)
            goto LABEL_6;
        }
      }
    }
    return kdebug_trace();
  }
  return result;
}

unsigned int *sub_22372619C(unsigned int *a1)
{
  unsigned int v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  BOOL v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  BOOL v33;
  unsigned int v34;
  BOOL v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  BOOL v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v42;
  BOOL v43;
  unsigned int v44;
  BOOL v45;
  unsigned int v46;
  BOOL v47;
  unsigned int v48;
  BOOL v49;
  unsigned int v50;
  BOOL v51;
  unsigned int v52;
  BOOL v53;
  unsigned int v54;
  BOOL v55;
  unsigned int v56;
  BOOL v57;
  unsigned int v58;
  BOOL v59;
  unsigned int v60;
  BOOL v61;
  unsigned int v62;
  BOOL v63;
  unsigned int v64;
  BOOL v65;
  unsigned int v66;
  BOOL v67;
  unsigned int v68;
  BOOL v69;
  unsigned int v70;
  BOOL v71;
  unsigned int v72;
  BOOL v73;
  unsigned int v74;
  BOOL v75;
  unsigned int v76;
  BOOL v77;
  unsigned int v78;
  BOOL v79;
  unsigned int v80;
  BOOL v81;
  unsigned int *result;
  unsigned int v83;

  v1 = *a1;
  v2 = a1 + 1;
  v3 = a1[1];
  if (*a1 <= v3)
    v1 = a1[1];
  if (*a1 >= v3)
    v2 = a1;
  v4 = a1[2];
  v5 = v1 >= v4;
  if (v1 <= v4)
    v1 = a1[2];
  if (!v5)
    v2 = a1 + 2;
  v6 = a1[3];
  v7 = v1 >= v6;
  if (v1 <= v6)
    v1 = a1[3];
  if (!v7)
    v2 = a1 + 3;
  v8 = a1[4];
  v9 = v1 >= v8;
  if (v1 <= v8)
    v1 = a1[4];
  if (!v9)
    v2 = a1 + 4;
  v10 = a1[5];
  v11 = v1 >= v10;
  if (v1 <= v10)
    v1 = a1[5];
  if (!v11)
    v2 = a1 + 5;
  v12 = a1[6];
  v13 = v1 >= v12;
  if (v1 <= v12)
    v1 = a1[6];
  if (!v13)
    v2 = a1 + 6;
  v14 = a1[7];
  v15 = v1 >= v14;
  if (v1 <= v14)
    v1 = a1[7];
  if (!v15)
    v2 = a1 + 7;
  v16 = a1[8];
  v17 = v1 >= v16;
  if (v1 <= v16)
    v1 = a1[8];
  if (!v17)
    v2 = a1 + 8;
  v18 = a1[9];
  v19 = v1 >= v18;
  if (v1 <= v18)
    v1 = a1[9];
  if (!v19)
    v2 = a1 + 9;
  v20 = a1[10];
  v21 = v1 >= v20;
  if (v1 <= v20)
    v1 = a1[10];
  if (!v21)
    v2 = a1 + 10;
  v22 = a1[11];
  v23 = v1 >= v22;
  if (v1 <= v22)
    v1 = a1[11];
  if (!v23)
    v2 = a1 + 11;
  v24 = a1[12];
  v25 = v1 >= v24;
  if (v1 <= v24)
    v1 = a1[12];
  if (!v25)
    v2 = a1 + 12;
  v26 = a1[13];
  v27 = v1 >= v26;
  if (v1 <= v26)
    v1 = a1[13];
  if (!v27)
    v2 = a1 + 13;
  v28 = a1[14];
  v29 = v1 >= v28;
  if (v1 <= v28)
    v1 = a1[14];
  if (!v29)
    v2 = a1 + 14;
  v30 = a1[15];
  v31 = v1 >= v30;
  if (v1 <= v30)
    v1 = a1[15];
  if (!v31)
    v2 = a1 + 15;
  v32 = a1[16];
  v33 = v1 >= v32;
  if (v1 <= v32)
    v1 = a1[16];
  if (!v33)
    v2 = a1 + 16;
  v34 = a1[17];
  v35 = v1 >= v34;
  if (v1 <= v34)
    v1 = a1[17];
  if (!v35)
    v2 = a1 + 17;
  v36 = a1[18];
  v37 = v1 >= v36;
  if (v1 <= v36)
    v1 = a1[18];
  if (!v37)
    v2 = a1 + 18;
  v38 = a1[19];
  v39 = v1 >= v38;
  if (v1 <= v38)
    v1 = a1[19];
  if (!v39)
    v2 = a1 + 19;
  v40 = a1[20];
  v41 = v1 >= v40;
  if (v1 <= v40)
    v1 = a1[20];
  if (!v41)
    v2 = a1 + 20;
  v42 = a1[21];
  v43 = v1 >= v42;
  if (v1 <= v42)
    v1 = a1[21];
  if (!v43)
    v2 = a1 + 21;
  v44 = a1[22];
  v45 = v1 >= v44;
  if (v1 <= v44)
    v1 = a1[22];
  if (!v45)
    v2 = a1 + 22;
  v46 = a1[23];
  v47 = v1 >= v46;
  if (v1 <= v46)
    v1 = a1[23];
  if (!v47)
    v2 = a1 + 23;
  v48 = a1[24];
  v49 = v1 >= v48;
  if (v1 <= v48)
    v1 = a1[24];
  if (!v49)
    v2 = a1 + 24;
  v50 = a1[25];
  v51 = v1 >= v50;
  if (v1 <= v50)
    v1 = a1[25];
  if (!v51)
    v2 = a1 + 25;
  v52 = a1[26];
  v53 = v1 >= v52;
  if (v1 <= v52)
    v1 = a1[26];
  if (!v53)
    v2 = a1 + 26;
  v54 = a1[27];
  v55 = v1 >= v54;
  if (v1 <= v54)
    v1 = a1[27];
  if (!v55)
    v2 = a1 + 27;
  v56 = a1[28];
  v57 = v1 >= v56;
  if (v1 <= v56)
    v1 = a1[28];
  if (!v57)
    v2 = a1 + 28;
  v58 = a1[29];
  v59 = v1 >= v58;
  if (v1 <= v58)
    v1 = a1[29];
  if (!v59)
    v2 = a1 + 29;
  v60 = a1[30];
  v61 = v1 >= v60;
  if (v1 <= v60)
    v1 = a1[30];
  if (!v61)
    v2 = a1 + 30;
  v62 = a1[31];
  v63 = v1 >= v62;
  if (v1 <= v62)
    v1 = a1[31];
  if (!v63)
    v2 = a1 + 31;
  v64 = a1[32];
  v65 = v1 >= v64;
  if (v1 <= v64)
    v1 = a1[32];
  if (!v65)
    v2 = a1 + 32;
  v66 = a1[33];
  v67 = v1 >= v66;
  if (v1 <= v66)
    v1 = a1[33];
  if (!v67)
    v2 = a1 + 33;
  v68 = a1[34];
  v69 = v1 >= v68;
  if (v1 <= v68)
    v1 = a1[34];
  if (!v69)
    v2 = a1 + 34;
  v70 = a1[35];
  v71 = v1 >= v70;
  if (v1 <= v70)
    v1 = a1[35];
  if (!v71)
    v2 = a1 + 35;
  v72 = a1[36];
  v73 = v1 >= v72;
  if (v1 <= v72)
    v1 = a1[36];
  if (!v73)
    v2 = a1 + 36;
  v74 = a1[37];
  v75 = v1 >= v74;
  if (v1 <= v74)
    v1 = a1[37];
  if (!v75)
    v2 = a1 + 37;
  v76 = a1[38];
  v77 = v1 >= v76;
  if (v1 <= v76)
    v1 = a1[38];
  if (!v77)
    v2 = a1 + 38;
  v78 = a1[39];
  v79 = v1 >= v78;
  if (v1 <= v78)
    v1 = a1[39];
  if (!v79)
    v2 = a1 + 39;
  v80 = a1[40];
  v81 = v1 >= v80;
  if (v1 <= v80)
    v1 = a1[40];
  if (!v81)
    v2 = a1 + 40;
  v83 = a1[41];
  result = a1 + 41;
  if (v1 >= v83)
    return v2;
  return result;
}

uint64_t sub_2237264D0(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  v4 = (_QWORD *)operator new();
  v6 = *a2;
  v5 = a2[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *v4 = v6;
  v4[1] = v5;
  *(_QWORD *)(a1 + 120) = v4;
  return a1;
}

void sub_223726570(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = v2;
  v6 = *(_QWORD **)(v1 + 96);
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = *v3;
  *v3 = 0;
  if (v8)
    operator delete(v8);
  v9 = *(_QWORD **)(v1 + 56);
  if (v9)
  {
    do
    {
      v12 = (_QWORD *)*v9;
      v13 = v9[4];
      v9[4] = 0;
      if (v13)
        sub_2236C86D0((uint64_t)(v9 + 4), v13);
      operator delete(v9);
      v9 = v12;
    }
    while (v12);
  }
  v10 = *v4;
  *v4 = 0;
  if (v10)
  {
    operator delete(v10);
    sub_223737B8C(v1, *(_QWORD **)(v1 + 16));
    v11 = *(void **)v1;
    *(_QWORD *)v1 = 0;
    if (!v11)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else
  {
    sub_223737B8C(v1, *(_QWORD **)(v1 + 16));
    v11 = *(void **)v1;
    *(_QWORD *)v1 = 0;
    if (!v11)
      goto LABEL_8;
  }
  operator delete(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_223726628(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  _QWORD *v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x227684CE8](v2, 0x20C40A4A59CD2);
  }
  v6 = *(_QWORD **)(a1 + 96);
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v8)
    operator delete(v8);
  v9 = *(_QWORD **)(a1 + 56);
  if (v9)
  {
    do
    {
      v13 = (_QWORD *)*v9;
      v14 = v9[4];
      v9[4] = 0;
      if (v14)
        sub_2236C86D0((uint64_t)(v9 + 4), v14);
      operator delete(v9);
      v9 = v13;
    }
    while (v13);
  }
  v10 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v10)
    operator delete(v10);
  sub_223737B8C(a1, *(_QWORD **)(a1 + 16));
  v11 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v11)
    operator delete(v11);
  return a1;
}

void sub_223726734(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  int v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  void *__p;
  _BYTE *v14;

  v6 = sub_22342DA5C(a1, (uint64_t)a2);
  if (v6)
  {
    *(_QWORD *)a3 = v6[4];
    *(_QWORD *)(a3 + 8) = 1;
LABEL_3:
    *(_BYTE *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    return;
  }
  sub_223726880((uint64_t)a1, a2, (uint64_t)&v12);
  v7 = BYTE8(v12);
  v8 = __p;
  if (BYTE8(v12))
  {
    *(_OWORD *)a3 = v12;
    *(_BYTE *)(a3 + 16) = 1;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    v9 = v14 - v8;
    if (v14 != v8)
    {
      if (v9 < 0)
        sub_22316E078();
      v10 = (char *)operator new(v14 - v8);
      *(_QWORD *)(a3 + 24) = v10;
      v11 = &v10[16 * (v9 >> 4)];
      *(_QWORD *)(a3 + 40) = v11;
      memcpy(v10, v8, v9);
      *(_QWORD *)(a3 + 32) = v11;
    }
  }
  if (v8)
  {
    v14 = v8;
    operator delete(v8);
  }
  if (!v7)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 0;
    goto LABEL_3;
  }
}

void sub_223726844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  void **v14;
  void *v16;
  void *v17;

  v16 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v13 + 32) = v16;
    operator delete(v16);
    v17 = __p;
    if (!__p)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v17 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

void sub_223726880(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v9;
  const char *v10;
  size_t v11;
  unsigned __int8 *v12;
  unsigned __int8 v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v18;
  uint64_t v19;
  size_t v20;
  const char *v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  const char *v24;
  size_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  size_t v33;
  void *v34;
  _QWORD *v35;
  size_t v36;
  size_t v37;
  _QWORD *p_dst;
  void *v39;
  unsigned __int8 v40;
  const char *v41;
  size_t v42;
  _BYTE *v43;
  unint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  int v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  size_t v55;
  void *v56;
  _QWORD *v57;
  size_t v58;
  size_t v59;
  _QWORD *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char v65;
  _QWORD *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  _OWORD *v115;
  _OWORD *v116;
  unsigned __int8 *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  int v121;
  BOOL v122;
  _QWORD *v123;
  uint64_t v124;
  unsigned __int8 v125;
  const void *v126;
  size_t v127;
  unsigned __int8 *v128;
  unsigned __int8 *v129;
  char *v130;
  char *v131;
  int v132;
  unint64_t v133;
  unint64_t v134;
  void *v135;
  const char *v136;
  size_t v137;
  unsigned __int8 v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  unsigned __int8 v147;
  const char *v148;
  size_t v149;
  _BYTE *v150;
  unsigned __int8 *v151;
  uint64_t v152;
  uint64_t v153;
  _BYTE *v154;
  NSObject *v155;
  uint64_t v156;
  uint64_t v157;
  size_t v158;
  std::__shared_weak_count_vtbl *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  char *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unsigned __int8 *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  const char *v178;
  int v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  void *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  int64_t v204;
  char *v205;
  char *v206;
  _OWORD *v207;
  unsigned __int8 *v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  char v215;
  _QWORD *v216;
  uint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  _QWORD *v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  const char *v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  unsigned __int8 *v265;
  const char *v266;
  _OWORD *v267;
  int v268;
  _QWORD *v269;
  const char *__srca;
  unsigned __int8 *v272;
  const char *v273;
  uint64_t v274;
  void *v275;
  char *v276;
  char *v277;
  unsigned __int8 *v278;
  void **v279;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v281;
  int v282;
  const char *v283;
  int v284;
  const char *v285;
  uint64_t v286;
  std::__shared_weak_count *v287;
  unsigned __int8 *v288;
  void *v289;
  _OWORD *v290;
  _BYTE v291[30];
  _QWORD *__dst;
  __int128 v293;
  _BYTE object[24];
  _BYTE v295[24];
  size_t v296;
  unint64_t v297;
  char v298;
  _BYTE v299[24];
  __int128 v300;
  char *v301;
  char __s[8];
  std::__shared_weak_count_vtbl *v303;
  std::__shared_weak_count *v304;
  char *v305;
  char *v306;
  uint64_t v307;

  v3 = a2;
  v307 = *MEMORY[0x24BDAC8D0];
  sub_2237131F4(*(uint64_t **)(a1 + 120), a2, (uint64_t)&v288);
  if (v288)
  {
    sub_223729BE0(&v275);
    v262 = a3;
    if (**((int **)v275 + 7) > 3)
      goto LABEL_164;
    v5 = *((unsigned __int8 *)v275 + 72);
    v6 = sub_22322F254((uint64_t)v275, "OSLogSurrogateAppender", 1, 0);
    v7 = v6;
    if (!v5 && v6 == 0)
      goto LABEL_164;
    v279 = &v275;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v281 = std::chrono::system_clock::now().__d_.__rep_;
    v282 = 3;
    v283 = "unknown file";
    v284 = 326;
    v286 = 0;
    v287 = 0;
    v285 = "unknown function";
    sub_2245664AC(v3, __s);
    v9 = (unsigned __int8 *)*v279;
    v10 = (char *)*v279 + 16;
    v266 = v10;
    if (*((char *)*v279 + 39) < 0)
    {
      v10 = (const char *)*((_QWORD *)v9 + 2);
      v11 = *((_QWORD *)v9 + 3);
      v12 = v3;
      v23 = atomic_load((unsigned __int8 *)&qword_255788F58);
      v268 = v5;
      if ((v23 & 1) != 0)
        goto LABEL_19;
    }
    else
    {
      v11 = *((unsigned __int8 *)*v279 + 39);
      v12 = v3;
      v13 = atomic_load((unsigned __int8 *)&qword_255788F58);
      v268 = v5;
      if ((v13 & 1) != 0)
        goto LABEL_19;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
      if (v295[0] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
      v5 = v268;
    }
LABEL_19:
    if (byte_255788F57 >= 0)
      v24 = (const char *)&xmmword_255788F40;
    else
      v24 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v25 = byte_255788F57;
    else
      v25 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)object = os_log_create(v24, v10);
    v26 = &object[8];
    if (v25 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v25 >= 0x17)
    {
      v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17)
        v27 = v25 | 7;
      v28 = v27 + 1;
      v26 = operator new(v27 + 1);
      *(_QWORD *)&object[16] = v25;
      *(_QWORD *)v295 = v28 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v26;
      v5 = v268;
    }
    else
    {
      v295[7] = v25;
      if (!v25)
      {
LABEL_33:
        v26[v25] = 0;
        v295[8] = 1;
        v29 = &v295[16];
        if (v11 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v3 = v12;
        if (v11 >= 0x17)
        {
          v30 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v11 | 7) != 0x17)
            v30 = v11 | 7;
          v31 = v30 + 1;
          v29 = operator new(v30 + 1);
          v296 = v11;
          v297 = v31 | 0x8000000000000000;
          *(_QWORD *)&v295[16] = v29;
          v5 = v268;
        }
        else
        {
          HIBYTE(v297) = v11;
          if (!v11)
          {
LABEL_41:
            v29[v11] = 0;
            v298 = 1;
            v32 = *(NSObject **)object;
            if (SHIBYTE(v297) < 0)
              operator delete(*(void **)&v295[16]);
            if (v295[8] && (v295[7] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (!v7 || !*(_QWORD *)(v7 + 24))
            {
              os_log_type_enabled(v32, OS_LOG_TYPE_INFO);
              *(_QWORD *)object = 0xD04100202;
              *(_WORD *)&object[8] = 2080;
              *(_QWORD *)&object[10] = __s;
              v39 = (void *)_os_log_send_and_compose_impl();
              if (v39)
                free(v39);
              goto LABEL_157;
            }
            v33 = _os_log_pack_size();
            v34 = operator new(v33, (std::align_val_t)8uLL);
            v35 = (_QWORD *)operator new();
            *v35 = &off_24EC1F7F0;
            v35[1] = 0;
            v35[2] = 0;
            v35[3] = v34;
            *(_QWORD *)v299 = v34;
            *(_QWORD *)&v299[8] = v34;
            v300 = 0uLL;
            *(_QWORD *)&v299[16] = v35;
            v36 = strlen(__s);
            if (v36 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v37 = v36;
            if (v36 >= 0x17)
            {
              v62 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v36 | 7) != 0x17)
                v62 = v36 | 7;
              v63 = v62 + 1;
              p_dst = operator new(v62 + 1);
              *(_QWORD *)&v293 = v37;
              *((_QWORD *)&v293 + 1) = v63 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v293) = v36;
              p_dst = &__dst;
              if (!v36)
              {
LABEL_98:
                *((_BYTE *)p_dst + v37) = 0;
                v64 = __dst;
                *(_QWORD *)v291 = v293;
                *(_QWORD *)&v291[7] = *(_QWORD *)((char *)&v293 + 7);
                v65 = HIBYTE(v293);
                v66 = operator new(0x38uLL);
                v66[1] = 0;
                v66[2] = 0;
                v66[3] = off_24EC1FA48;
                *v66 = &off_24EC1F9F8;
                v67 = *(_QWORD *)v291;
                v66[4] = v64;
                v66[5] = v67;
                *(_QWORD *)((char *)v66 + 47) = *(_QWORD *)&v291[7];
                *((_BYTE *)v66 + 55) = v65;
                *(_QWORD *)v291 = 0;
                *(_QWORD *)&v291[7] = 0;
                v68 = (std::__shared_weak_count *)*((_QWORD *)&v300 + 1);
                *(_QWORD *)&v300 = v66 + 3;
                *((_QWORD *)&v300 + 1) = v66;
                if (v68)
                {
                  p_shared_owners = (unint64_t *)&v68->__shared_owners_;
                  do
                    v70 = __ldaxr(p_shared_owners);
                  while (__stlxr(v70 - 1, p_shared_owners));
                  if (!v70)
                  {
                    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                    std::__shared_weak_count::__release_weak(v68);
                  }
                }
                *(_OWORD *)object = *(_OWORD *)v299;
                v71 = v300;
                *(_QWORD *)&object[16] = *(_QWORD *)&v299[16];
                if (*(_QWORD *)&v299[16])
                {
                  v72 = (unint64_t *)(*(_QWORD *)&v299[16] + 8);
                  do
                    v73 = __ldxr(v72);
                  while (__stxr(v73 + 1, v72));
                }
                v74 = (std::__shared_weak_count *)*((_QWORD *)&v300 + 1);
                *(_QWORD *)v295 = v71;
                *(_QWORD *)&v295[8] = *((_QWORD *)&v300 + 1);
                if (*((_QWORD *)&v300 + 1))
                {
                  v75 = (unint64_t *)(*((_QWORD *)&v300 + 1) + 8);
                  do
                    v76 = __ldxr(v75);
                  while (__stxr(v76 + 1, v75));
                  *(_QWORD *)&v295[16] = v71;
                  do
                    v77 = __ldaxr(v75);
                  while (__stlxr(v77 - 1, v75));
                  if (!v77)
                  {
                    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                    std::__shared_weak_count::__release_weak(v74);
                  }
                }
                else
                {
                  *(_QWORD *)&v295[16] = v71;
                }
                v78 = *(std::__shared_weak_count **)&v299[16];
                if (*(_QWORD *)&v299[16])
                {
                  v79 = (unint64_t *)(*(_QWORD *)&v299[16] + 8);
                  do
                    v80 = __ldaxr(v79);
                  while (__stlxr(v80 - 1, v79));
                  if (!v80)
                  {
                    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                    std::__shared_weak_count::__release_weak(v78);
                  }
                }
                v81 = *(_QWORD *)object;
                if (*(char *)(*(_QWORD *)&v295[16] + 31) >= 0)
                  v82 = *(_QWORD *)&v295[16] + 8;
                else
                  v82 = *(_QWORD *)(*(_QWORD *)&v295[16] + 8);
                v83 = _os_log_pack_fill();
                *(_DWORD *)v83 = 68157954;
                *(_DWORD *)(v83 + 4) = 13;
                *(_WORD *)(v83 + 8) = 2080;
                *(_QWORD *)(v83 + 10) = v82;
                v84 = operator new();
                v85 = v9[39];
                v86 = v266;
                if ((v85 & 0x80u) != 0)
                {
                  v86 = (const char *)*((_QWORD *)v9 + 2);
                  v85 = *((_QWORD *)v9 + 3);
                }
                *(_QWORD *)v84 = v81;
                *(_OWORD *)(v84 + 8) = *(_OWORD *)&object[8];
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                *(_OWORD *)(v84 + 24) = *(_OWORD *)v295;
                *(_QWORD *)v295 = 0;
                *(_QWORD *)&v295[8] = 0;
                *(_QWORD *)(v84 + 40) = v86;
                *(_QWORD *)(v84 + 48) = v85;
                *(_BYTE *)(v84 + 56) = 1;
                __dst = 0;
                *(_QWORD *)v299 = v84;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), v299);
                v5 = v268;
                v87 = *(_QWORD *)v299;
                *(_QWORD *)v299 = 0;
                if (v87)
                {
                  v88 = *(std::__shared_weak_count **)(v87 + 32);
                  if (v88)
                  {
                    v89 = (unint64_t *)&v88->__shared_owners_;
                    do
                      v90 = __ldaxr(v89);
                    while (__stlxr(v90 - 1, v89));
                    if (!v90)
                    {
                      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                      std::__shared_weak_count::__release_weak(v88);
                    }
                  }
                  v91 = *(std::__shared_weak_count **)(v87 + 16);
                  if (v91)
                  {
                    v92 = (unint64_t *)&v91->__shared_owners_;
                    do
                      v93 = __ldaxr(v92);
                    while (__stlxr(v93 - 1, v92));
                    if (!v93)
                    {
                      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                      std::__shared_weak_count::__release_weak(v91);
                    }
                  }
                  MEMORY[0x227684CE8](v87, 0x10F0C40B62ED6C6);
                  v94 = __dst;
                  __dst = 0;
                  if (v94)
                  {
                    v95 = (std::__shared_weak_count *)v94[4];
                    if (v95)
                    {
                      v96 = (unint64_t *)&v95->__shared_owners_;
                      do
                        v97 = __ldaxr(v96);
                      while (__stlxr(v97 - 1, v96));
                      if (!v97)
                      {
                        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                        std::__shared_weak_count::__release_weak(v95);
                      }
                    }
                    v98 = (std::__shared_weak_count *)v94[2];
                    if (v98)
                    {
                      v99 = (unint64_t *)&v98->__shared_owners_;
                      do
                        v100 = __ldaxr(v99);
                      while (__stlxr(v100 - 1, v99));
                      if (!v100)
                      {
                        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                        std::__shared_weak_count::__release_weak(v98);
                      }
                    }
                    MEMORY[0x227684CE8](v94, 0x10F0C40B62ED6C6);
                  }
                }
                v101 = *(std::__shared_weak_count **)&v295[8];
                if (*(_QWORD *)&v295[8])
                {
                  v102 = (unint64_t *)(*(_QWORD *)&v295[8] + 8);
                  do
                    v103 = __ldaxr(v102);
                  while (__stlxr(v103 - 1, v102));
                  if (!v103)
                  {
                    ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                    std::__shared_weak_count::__release_weak(v101);
                  }
                }
                v104 = *(std::__shared_weak_count **)&object[16];
                if (*(_QWORD *)&object[16])
                {
                  v105 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                  do
                    v106 = __ldaxr(v105);
                  while (__stlxr(v106 - 1, v105));
                  if (!v106)
                  {
                    ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                    std::__shared_weak_count::__release_weak(v104);
                  }
                }
LABEL_157:
                if (v5)
                {
                  sub_2245664AC(v12, object);
                  sub_22322C138((uint64_t)&v279, "KeyframePlaneStorage: Restoring KeyframePlaneSegmentation %.13s", object);
                  sub_223182C08((uint64_t)&v279);
                }
                sub_223182C08((uint64_t)&v279);
                v107 = v287;
                if (v287)
                {
                  v108 = (unint64_t *)&v287->__shared_owners_;
                  do
                    v109 = __ldaxr(v108);
                  while (__stlxr(v109 - 1, v108));
                  if (!v109)
                  {
                    ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                    std::__shared_weak_count::__release_weak(v107);
                  }
                }
LABEL_164:
                v110 = v288;
                v288 = 0;
                v278 = v110;
                v269 = (_QWORD *)sub_223728B84((uint64_t *)a1, &v278);
                v111 = v278;
                v278 = 0;
                if (v111)
                {
                  v112 = *((_QWORD *)v111 + 26);
                  if (v112)
                  {
                    v113 = *((_QWORD *)v111 + 27);
                    v114 = (void *)*((_QWORD *)v111 + 26);
                    if (v113 != v112)
                    {
                      do
                      {
                        v113 -= 424;
                        sub_2236EA79C(v113);
                      }
                      while (v113 != v112);
                      v114 = (void *)*((_QWORD *)v111 + 26);
                    }
                    *((_QWORD *)v111 + 27) = v112;
                    operator delete(v114);
                  }
                  *((_QWORD *)v111 + 6) = &off_24EC20828;
                  MEMORY[0x227684CE8](v111, 0x10A0C4047C2BC0BLL);
                }
                v116 = v289;
                v115 = v290;
                v117 = (unsigned __int8 *)v269[26];
                v265 = (unsigned __int8 *)v269[27];
                if (0x21CFB2B78C13521DLL * ((v265 - v117) >> 3) != ((char *)v290 - (_BYTE *)v289) >> 4)
                {
                  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/KeyframePlaneStorage.cpp", 331, (uint64_t)"gp_uuids.size() == kf_seg_ref.get().planes.size()", 49, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                  {
                    abort();
                  }
                  v116 = v289;
                  v115 = v290;
                  v117 = (unsigned __int8 *)v269[26];
                  v265 = (unsigned __int8 *)v269[27];
                }
                v275 = 0;
                v276 = 0;
                v277 = 0;
                if (v116 != v115 || (v118 = 0, v119 = 0, v117 != v265))
                {
                  v267 = v115;
                  while (1)
                  {
                    v120 = 0;
                    do
                    {
                      v121 = *((unsigned __int8 *)v116 + v120);
                      if (*((_BYTE *)v116 + v120))
                        v122 = 1;
                      else
                        v122 = v120 == 15;
                      ++v120;
                    }
                    while (!v122);
                    if (!v121)
                    {
                      v125 = atomic_load((unsigned __int8 *)&qword_2557892F0);
                      if ((v125 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
                      {
                        __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
                        __cxa_guard_release(&qword_2557892F0);
                      }
                      sub_223729BE0(object);
                      if (*(char *)(*(_QWORD *)object + 39) < 0)
                      {
                        v126 = *(const void **)(*(_QWORD *)object + 16);
                        v127 = *(_QWORD *)(*(_QWORD *)object + 24);
                      }
                      else
                      {
                        v126 = (const void *)(*(_QWORD *)object + 16);
                        v127 = *(unsigned __int8 *)(*(_QWORD *)object + 39);
                      }
                      sub_223195728((uint64_t)&stru_255789280, v126, v127, "KPStorage: UUID of GP linked to KP %.13s in restored KFS %.13s is Null.", 0x47uLL);
                      sub_22372F598(&v274);
                      if (**(int **)(v274 + 56) > 5)
                        goto LABEL_215;
                      v132 = *(unsigned __int8 *)(v274 + 72);
                      v133 = sub_22322F254(v274, "OSLogSurrogateAppender", 1, 0);
                      v134 = v133;
                      if (!v132 && !v133)
                        goto LABEL_215;
                      v279 = (void **)&v274;
                      rep = std::chrono::steady_clock::now().__d_.__rep_;
                      v281 = std::chrono::system_clock::now().__d_.__rep_;
                      v282 = 5;
                      v283 = "unknown file";
                      v284 = 338;
                      v285 = "unknown function";
                      v286 = 0;
                      v287 = 0;
                      sub_2245664AC(v117, &__dst);
                      sub_2245664AC(v3, v291);
                      v273 = v291;
                      v135 = *v279;
                      v136 = (char *)*v279 + 16;
                      v260 = v136;
                      v261 = *v279;
                      if (*((char *)*v279 + 39) < 0)
                      {
                        v136 = (const char *)*((_QWORD *)v135 + 2);
                        v137 = *((_QWORD *)v135 + 3);
                        v147 = atomic_load((unsigned __int8 *)&qword_255788F58);
                        if ((v147 & 1) == 0)
                        {
LABEL_318:
                          if (__cxa_guard_acquire(&qword_255788F58))
                          {
                            sub_224568628((uint64_t)v299);
                            sub_223199C58("com.apple.cv3d", (unint64_t)v299, &xmmword_255788F40);
                            if ((_BYTE)v300 && (v299[23] & 0x80000000) != 0)
                              operator delete(*(void **)v299);
                            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                            __cxa_guard_release(&qword_255788F58);
                            v115 = v267;
                          }
                        }
                      }
                      else
                      {
                        v137 = *((unsigned __int8 *)*v279 + 39);
                        v138 = atomic_load((unsigned __int8 *)&qword_255788F58);
                        if ((v138 & 1) == 0)
                          goto LABEL_318;
                      }
                      if (byte_255788F57 >= 0)
                        v148 = (const char *)&xmmword_255788F40;
                      else
                        v148 = (const char *)xmmword_255788F40;
                      if (byte_255788F57 >= 0)
                        v149 = byte_255788F57;
                      else
                        v149 = *((_QWORD *)&xmmword_255788F40 + 1);
                      *(_QWORD *)object = os_log_create(v148, v136);
                      if (v149 > 0x7FFFFFFFFFFFFFF7)
                        sub_22316DBC0();
                      v264 = v132;
                      if (v149 >= 0x17)
                      {
                        v151 = v3;
                        v152 = (v149 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v149 | 7) != 0x17)
                          v152 = v149 | 7;
                        v153 = v152 + 1;
                        v150 = operator new(v152 + 1);
                        *(_QWORD *)&object[16] = v149;
                        *(_QWORD *)v295 = v153 | 0x8000000000000000;
                        *(_QWORD *)&object[8] = v150;
                        v3 = v151;
                        v115 = v267;
                      }
                      else
                      {
                        v295[7] = v149;
                        v150 = &object[8];
                        if (!v149)
                        {
LABEL_236:
                          v150[v149] = 0;
                          v295[8] = 1;
                          if (v137 > 0x7FFFFFFFFFFFFFF7)
                            sub_22316DBC0();
                          if (v137 >= 0x17)
                          {
                            v156 = (v137 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v137 | 7) != 0x17)
                              v156 = v137 | 7;
                            v157 = v156 + 1;
                            v154 = operator new(v156 + 1);
                            v296 = v137;
                            v297 = v157 | 0x8000000000000000;
                            *(_QWORD *)&v295[16] = v154;
                          }
                          else
                          {
                            HIBYTE(v297) = v137;
                            v154 = &v295[16];
                            if (!v137)
                            {
                              v295[16] = 0;
                              v298 = 1;
                              v155 = *(NSObject **)object;
                              if ((SHIBYTE(v297) & 0x80000000) == 0)
                                goto LABEL_240;
LABEL_246:
                              operator delete(*(void **)&v295[16]);
                              if (v295[8])
                                goto LABEL_247;
                              goto LABEL_249;
                            }
                          }
                          memmove(v154, v136, v137);
                          v154[v137] = 0;
                          v298 = 1;
                          v155 = *(NSObject **)object;
                          if (SHIBYTE(v297) < 0)
                            goto LABEL_246;
LABEL_240:
                          if (v295[8])
                          {
LABEL_247:
                            if ((v295[7] & 0x80000000) != 0)
                              operator delete(*(void **)&object[8]);
                          }
LABEL_249:
                          if (*(_QWORD *)object)
                            os_release(*(void **)object);
                          if (v134 && *(_QWORD *)(v134 + 24))
                          {
                            v158 = _os_log_pack_size();
                            v159 = (std::__shared_weak_count_vtbl *)operator new(v158, (std::align_val_t)8uLL);
                            v160 = (std::__shared_weak_count *)operator new();
                            v160->__shared_owners_ = 0;
                            v161 = (unint64_t *)&v160->__shared_owners_;
                            v160->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                            v160->__shared_weak_owners_ = 0;
                            v160[1].__vftable = v159;
                            *(_QWORD *)__s = v159;
                            v303 = v159;
                            v304 = v160;
                            v305 = 0;
                            v306 = 0;
                            sub_223738130((uint64_t)object, (char *)&__dst, &v273);
                            v162 = (char *)operator new(0x50uLL);
                            v163 = (std::__shared_weak_count *)v162;
                            *((_QWORD *)v162 + 1) = 0;
                            v164 = (unint64_t *)(v162 + 8);
                            *((_QWORD *)v162 + 2) = 0;
                            *(_QWORD *)v162 = &off_24EC20730;
                            *((_QWORD *)v162 + 3) = off_24EC20780;
                            *((_OWORD *)v162 + 2) = *(_OWORD *)&object[8];
                            *((_QWORD *)v162 + 6) = *(_QWORD *)v295;
                            *(_OWORD *)(v162 + 56) = *(_OWORD *)&v295[8];
                            *((_QWORD *)v162 + 9) = v296;
                            v305 = v162 + 24;
                            v306 = v162;
                            *(_QWORD *)v299 = v159;
                            *(_QWORD *)&v299[8] = v159;
                            *(_QWORD *)&v299[16] = v160;
                            do
                              v165 = __ldxr(v161);
                            while (__stxr(v165 + 1, v161));
                            *(_QWORD *)&v300 = v162 + 24;
                            *((_QWORD *)&v300 + 1) = v162;
                            do
                              v166 = __ldxr(v164);
                            while (__stxr(v166 + 1, v164));
                            v301 = v162 + 24;
                            do
                              v167 = __ldaxr(v164);
                            while (__stlxr(v167 - 1, v164));
                            if (!v167)
                            {
                              (*(void (**)(char *))(*(_QWORD *)v162 + 16))(v162);
                              std::__shared_weak_count::__release_weak(v163);
                            }
                            v168 = v3;
                            v169 = v304;
                            if (v304)
                            {
                              v170 = (unint64_t *)&v304->__shared_owners_;
                              do
                                v171 = __ldaxr(v170);
                              while (__stlxr(v171 - 1, v170));
                              if (!v171)
                              {
                                ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                                std::__shared_weak_count::__release_weak(v169);
                              }
                            }
                            v172 = *(_QWORD *)v299;
                            if (v301[31] >= 0)
                              v173 = v301 + 8;
                            else
                              v173 = (char *)*((_QWORD *)v301 + 1);
                            if (v301[55] >= 0)
                              v174 = v301 + 32;
                            else
                              v174 = (char *)*((_QWORD *)v301 + 4);
                            v175 = _os_log_pack_fill();
                            *(_DWORD *)v175 = 68158466;
                            *(_DWORD *)(v175 + 4) = 13;
                            *(_WORD *)(v175 + 8) = 2080;
                            *(_QWORD *)(v175 + 10) = v173;
                            *(_WORD *)(v175 + 18) = 1040;
                            *(_DWORD *)(v175 + 20) = 13;
                            *(_WORD *)(v175 + 24) = 2080;
                            *(_QWORD *)(v175 + 26) = v174;
                            v176 = operator new();
                            v177 = *((unsigned __int8 *)v261 + 39);
                            v178 = v260;
                            if ((v177 & 0x80u) != 0)
                            {
                              v178 = (const char *)v261[2];
                              v177 = v261[3];
                            }
                            *(_QWORD *)v176 = v172;
                            *(_OWORD *)(v176 + 8) = *(_OWORD *)&v299[8];
                            *(_QWORD *)&v299[8] = 0;
                            *(_QWORD *)&v299[16] = 0;
                            *(_OWORD *)(v176 + 24) = v300;
                            v300 = 0uLL;
                            *(_QWORD *)(v176 + 40) = v178;
                            *(_QWORD *)(v176 + 48) = v177;
                            *(_BYTE *)(v176 + 56) = 16;
                            *(_QWORD *)__s = 0;
                            *(_QWORD *)object = v176;
                            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v134 + 24) + 40))(*(_QWORD *)(v134 + 24), object);
                            v179 = v264;
                            v3 = v168;
                            v180 = *(_QWORD *)object;
                            *(_QWORD *)object = 0;
                            v115 = v267;
                            if (v180)
                            {
                              v181 = *(std::__shared_weak_count **)(v180 + 32);
                              if (v181)
                              {
                                v182 = (unint64_t *)&v181->__shared_owners_;
                                do
                                  v183 = __ldaxr(v182);
                                while (__stlxr(v183 - 1, v182));
                                if (!v183)
                                {
                                  ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                                  std::__shared_weak_count::__release_weak(v181);
                                }
                              }
                              v184 = *(std::__shared_weak_count **)(v180 + 16);
                              if (v184)
                              {
                                v185 = (unint64_t *)&v184->__shared_owners_;
                                do
                                  v186 = __ldaxr(v185);
                                while (__stlxr(v186 - 1, v185));
                                if (!v186)
                                {
                                  ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                                  std::__shared_weak_count::__release_weak(v184);
                                }
                              }
                              MEMORY[0x227684CE8](v180, 0x10F0C40B62ED6C6);
                              v187 = *(_QWORD *)__s;
                              *(_QWORD *)__s = 0;
                              if (v187)
                              {
                                v188 = *(std::__shared_weak_count **)(v187 + 32);
                                if (v188)
                                {
                                  v189 = (unint64_t *)&v188->__shared_owners_;
                                  do
                                    v190 = __ldaxr(v189);
                                  while (__stlxr(v190 - 1, v189));
                                  if (!v190)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                                    std::__shared_weak_count::__release_weak(v188);
                                  }
                                }
                                v191 = *(std::__shared_weak_count **)(v187 + 16);
                                if (v191)
                                {
                                  v192 = (unint64_t *)&v191->__shared_owners_;
                                  do
                                    v193 = __ldaxr(v192);
                                  while (__stlxr(v193 - 1, v192));
                                  if (!v193)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                                    std::__shared_weak_count::__release_weak(v191);
                                  }
                                }
                                MEMORY[0x227684CE8](v187, 0x10F0C40B62ED6C6);
                              }
                            }
                            v194 = (std::__shared_weak_count *)*((_QWORD *)&v300 + 1);
                            if (*((_QWORD *)&v300 + 1))
                            {
                              v195 = (unint64_t *)(*((_QWORD *)&v300 + 1) + 8);
                              do
                                v196 = __ldaxr(v195);
                              while (__stlxr(v196 - 1, v195));
                              if (!v196)
                              {
                                ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                                std::__shared_weak_count::__release_weak(v194);
                              }
                            }
                            v197 = *(std::__shared_weak_count **)&v299[16];
                            if (*(_QWORD *)&v299[16])
                            {
                              v198 = (unint64_t *)(*(_QWORD *)&v299[16] + 8);
                              do
                                v199 = __ldaxr(v198);
                              while (__stlxr(v199 - 1, v198));
                              if (!v199)
                              {
                                ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                                std::__shared_weak_count::__release_weak(v197);
                              }
                            }
                          }
                          else
                          {
                            os_log_type_enabled(v155, OS_LOG_TYPE_ERROR);
                            *(_QWORD *)object = 0xD04100402;
                            *(_WORD *)&object[8] = 2080;
                            *(_QWORD *)&object[10] = &__dst;
                            *(_WORD *)&object[18] = 1040;
                            *(_DWORD *)&object[20] = 13;
                            *(_WORD *)v295 = 2080;
                            *(_QWORD *)&v295[2] = v273;
                            v200 = (void *)_os_log_send_and_compose_impl();
                            v179 = v264;
                            if (v200)
                              free(v200);
                          }
                          if (v179)
                          {
                            sub_2245664AC(v117, object);
                            sub_2245664AC(v3, v299);
                            sub_22322C138((uint64_t)&v279, "KPStorage: UUID of GP linked to KP %.13s in restored KFS %.13s is Null.", object, v299);
                            sub_223182C08((uint64_t)&v279);
                          }
                          sub_223182C08((uint64_t)&v279);
                          v201 = v287;
                          if (v287)
                          {
                            v202 = (unint64_t *)&v287->__shared_owners_;
                            do
                              v203 = __ldaxr(v202);
                            while (__stlxr(v203 - 1, v202));
                            if (!v203)
                            {
                              ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
                              std::__shared_weak_count::__release_weak(v201);
                            }
                          }
                          goto LABEL_215;
                        }
                      }
                      memmove(v150, v148, v149);
                      goto LABEL_236;
                    }
                    v123 = sub_22342DA5C((_QWORD *)(a1 + 40), (uint64_t)v116);
                    if (!v123)
                      break;
                    v124 = v123[4];
                    v115 = v267;
LABEL_214:
                    *(_QWORD *)object = v124;
                    *(_QWORD *)&object[8] = v269;
                    sub_223731730(a1, (uint64_t)v117, (unsigned __int8 **)object);
LABEL_215:
                    ++v116;
                    v117 += 424;
                    if (v116 == v115 && v117 == v265)
                    {
                      v119 = (char *)v275;
                      v118 = v276;
                      goto LABEL_323;
                    }
                  }
                  v115 = v267;
                  v128 = (unsigned __int8 *)operator new();
                  sub_22369F940((uint64_t)v128, v116, v269 + 3);
                  v272 = v128;
                  v124 = sub_223729D64(a1, &v272);
                  v129 = v272;
                  v272 = 0;
                  if (v129)
                    sub_2236C86D0((uint64_t)&v272, (uint64_t)v129);
                  v130 = v276;
                  if (v276 < v277)
                  {
                    *(_OWORD *)v276 = *v116;
                    v131 = v130 + 16;
LABEL_213:
                    v276 = v131;
                    goto LABEL_214;
                  }
                  v139 = (char *)v275;
                  v140 = (v276 - (_BYTE *)v275) >> 4;
                  v141 = v140 + 1;
                  if ((unint64_t)(v140 + 1) >> 60)
                    sub_22316E078();
                  v142 = v277 - (_BYTE *)v275;
                  if ((v277 - (_BYTE *)v275) >> 3 > v141)
                    v141 = v142 >> 3;
                  if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF0)
                    v143 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v143 = v141;
                  if (v143)
                  {
                    if (v143 >> 60)
                      sub_223174E94();
                    v144 = (char *)operator new(16 * v143);
                    v145 = &v144[16 * v140];
                    *(_OWORD *)v145 = *v116;
                    v146 = v145;
                    if (v130 != v139)
                    {
LABEL_209:
                      v115 = v267;
                      do
                      {
                        *((_OWORD *)v146 - 1) = *((_OWORD *)v130 - 1);
                        v146 -= 16;
                        v130 -= 16;
                      }
                      while (v130 != v139);
                      v130 = (char *)v275;
                      v131 = v145 + 16;
                      v275 = v146;
                      v277 = &v144[16 * v143];
                      if (!v130)
                        goto LABEL_213;
LABEL_212:
                      operator delete(v130);
                      goto LABEL_213;
                    }
                  }
                  else
                  {
                    v144 = 0;
                    v145 = (char *)(16 * v140);
                    *(_OWORD *)(16 * v140) = *v116;
                    v146 = (char *)(16 * v140);
                    if (v130 != v139)
                      goto LABEL_209;
                  }
                  v115 = v267;
                  v131 = v145 + 16;
                  v275 = v146;
                  v277 = &v144[16 * v143];
                  if (!v130)
                    goto LABEL_213;
                  goto LABEL_212;
                }
LABEL_323:
                *(_QWORD *)v262 = v269;
                *(_BYTE *)(v262 + 8) = 1;
                *(_QWORD *)(v262 + 16) = 0;
                *(_QWORD *)(v262 + 24) = 0;
                *(_QWORD *)(v262 + 32) = 0;
                v204 = v118 - v119;
                if (v118 != v119)
                {
                  if (v204 < 0)
                    sub_22316E078();
                  v205 = (char *)operator new(v118 - v119);
                  *(_QWORD *)(v262 + 16) = v205;
                  v206 = &v205[16 * (v204 >> 4)];
                  *(_QWORD *)(v262 + 32) = v206;
                  memcpy(v205, v119, v204);
                  *(_QWORD *)(v262 + 24) = v206;
                }
                if (v119)
                  operator delete(v119);
                v207 = v289;
                if (v289)
                  goto LABEL_329;
                goto LABEL_330;
              }
            }
            memcpy(p_dst, __s, v37);
            goto LABEL_98;
          }
        }
        memmove(v29, v10, v11);
        goto LABEL_41;
      }
    }
    memmove(v26, v24, v25);
    goto LABEL_33;
  }
  sub_223729BE0(&v275);
  if (**((int **)v275 + 7) <= 3)
  {
    v14 = *((unsigned __int8 *)v275 + 72);
    v15 = sub_22322F254((uint64_t)v275, "OSLogSurrogateAppender", 1, 0);
    v16 = v15;
    if (v14 || v15 != 0)
    {
      v279 = &v275;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v281 = std::chrono::system_clock::now().__d_.__rep_;
      v282 = 3;
      v283 = "unknown file";
      v284 = 321;
      v286 = 0;
      v287 = 0;
      v285 = "unknown function";
      sub_2245664AC(v3, __s);
      v18 = (unsigned __int8 *)*v279;
      v19 = (uint64_t)*v279 + 16;
      if (*((char *)*v279 + 39) < 0)
      {
        v21 = (const char *)*((_QWORD *)v18 + 2);
        v20 = *((_QWORD *)v18 + 3);
        v263 = a3;
        v40 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v40 & 1) != 0)
          goto LABEL_57;
      }
      else
      {
        v20 = *((unsigned __int8 *)*v279 + 39);
        v21 = (char *)*v279 + 16;
        v263 = a3;
        v22 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v22 & 1) != 0)
          goto LABEL_57;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if (v295[0] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_57:
      if (byte_255788F57 >= 0)
        v41 = (const char *)&xmmword_255788F40;
      else
        v41 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v42 = byte_255788F57;
      else
        v42 = *((_QWORD *)&xmmword_255788F40 + 1);
      __srca = v21;
      *(_QWORD *)object = os_log_create(v41, v21);
      v43 = &object[8];
      if (v42 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v42 >= 0x17)
      {
        v44 = v16;
        v45 = v18;
        v46 = v19;
        v47 = v14;
        v48 = v3;
        v49 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v42 | 7) != 0x17)
          v49 = v42 | 7;
        v50 = v49 + 1;
        v43 = operator new(v49 + 1);
        *(_QWORD *)&object[16] = v42;
        *(_QWORD *)v295 = v50 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v43;
        v3 = v48;
        v14 = v47;
        v19 = v46;
        v18 = v45;
        v16 = v44;
      }
      else
      {
        v295[7] = v42;
        if (!v42)
        {
LABEL_71:
          v43[v42] = 0;
          v295[8] = 1;
          v51 = &v295[16];
          if (v20 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v20 >= 0x17)
          {
            v52 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v20 | 7) != 0x17)
              v52 = v20 | 7;
            v53 = v52 + 1;
            v51 = operator new(v52 + 1);
            v296 = v20;
            v297 = v53 | 0x8000000000000000;
            *(_QWORD *)&v295[16] = v51;
            a3 = v263;
          }
          else
          {
            HIBYTE(v297) = v20;
            a3 = v263;
            if (!v20)
            {
LABEL_79:
              v51[v20] = 0;
              v298 = 1;
              v54 = *(NSObject **)object;
              if (SHIBYTE(v297) < 0)
                operator delete(*(void **)&v295[16]);
              if (v295[8] && (v295[7] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (!v16 || !*(_QWORD *)(v16 + 24))
              {
                os_log_type_enabled(v54, OS_LOG_TYPE_INFO);
                *(_QWORD *)object = 0xD04100202;
                *(_WORD *)&object[8] = 2080;
                *(_QWORD *)&object[10] = __s;
                v61 = (void *)_os_log_send_and_compose_impl();
                if (v61)
                  free(v61);
                goto LABEL_404;
              }
              v55 = _os_log_pack_size();
              v56 = operator new(v55, (std::align_val_t)8uLL);
              v57 = (_QWORD *)operator new();
              *v57 = &off_24EC1F7F0;
              v57[1] = 0;
              v57[2] = 0;
              v57[3] = v56;
              *(_QWORD *)v299 = v56;
              *(_QWORD *)&v299[8] = v56;
              v300 = 0uLL;
              *(_QWORD *)&v299[16] = v57;
              v58 = strlen(__s);
              if (v58 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v59 = v58;
              if (v58 >= 0x17)
              {
                v212 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v58 | 7) != 0x17)
                  v212 = v58 | 7;
                v213 = v212 + 1;
                v60 = operator new(v212 + 1);
                *(_QWORD *)&v293 = v59;
                *((_QWORD *)&v293 + 1) = v213 | 0x8000000000000000;
                __dst = v60;
                a3 = v263;
              }
              else
              {
                HIBYTE(v293) = v58;
                v60 = &__dst;
                if (!v58)
                {
LABEL_342:
                  *((_BYTE *)v60 + v59) = 0;
                  v214 = __dst;
                  *(_QWORD *)v291 = v293;
                  *(_QWORD *)&v291[7] = *(_QWORD *)((char *)&v293 + 7);
                  v215 = HIBYTE(v293);
                  v216 = operator new(0x38uLL);
                  v216[1] = 0;
                  v216[2] = 0;
                  v216[3] = off_24EC1FA48;
                  *v216 = &off_24EC1F9F8;
                  v217 = *(_QWORD *)v291;
                  v216[4] = v214;
                  v216[5] = v217;
                  *(_QWORD *)((char *)v216 + 47) = *(_QWORD *)&v291[7];
                  *((_BYTE *)v216 + 55) = v215;
                  *(_QWORD *)v291 = 0;
                  *(_QWORD *)&v291[7] = 0;
                  v218 = (std::__shared_weak_count *)*((_QWORD *)&v300 + 1);
                  *(_QWORD *)&v300 = v216 + 3;
                  *((_QWORD *)&v300 + 1) = v216;
                  if (v218)
                  {
                    v219 = (unint64_t *)&v218->__shared_owners_;
                    do
                      v220 = __ldaxr(v219);
                    while (__stlxr(v220 - 1, v219));
                    if (!v220)
                    {
                      ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
                      std::__shared_weak_count::__release_weak(v218);
                    }
                  }
                  *(_OWORD *)object = *(_OWORD *)v299;
                  v221 = v300;
                  *(_QWORD *)&object[16] = *(_QWORD *)&v299[16];
                  if (*(_QWORD *)&v299[16])
                  {
                    v222 = (unint64_t *)(*(_QWORD *)&v299[16] + 8);
                    do
                      v223 = __ldxr(v222);
                    while (__stxr(v223 + 1, v222));
                  }
                  v224 = (std::__shared_weak_count *)*((_QWORD *)&v300 + 1);
                  *(_QWORD *)v295 = v221;
                  *(_QWORD *)&v295[8] = *((_QWORD *)&v300 + 1);
                  if (*((_QWORD *)&v300 + 1))
                  {
                    v225 = (unint64_t *)(*((_QWORD *)&v300 + 1) + 8);
                    do
                      v226 = __ldxr(v225);
                    while (__stxr(v226 + 1, v225));
                    *(_QWORD *)&v295[16] = v221;
                    do
                      v227 = __ldaxr(v225);
                    while (__stlxr(v227 - 1, v225));
                    if (!v227)
                    {
                      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                      std::__shared_weak_count::__release_weak(v224);
                    }
                  }
                  else
                  {
                    *(_QWORD *)&v295[16] = v221;
                  }
                  v228 = *(std::__shared_weak_count **)&v299[16];
                  if (*(_QWORD *)&v299[16])
                  {
                    v229 = (unint64_t *)(*(_QWORD *)&v299[16] + 8);
                    do
                      v230 = __ldaxr(v229);
                    while (__stlxr(v230 - 1, v229));
                    if (!v230)
                    {
                      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                      std::__shared_weak_count::__release_weak(v228);
                    }
                  }
                  v231 = *(_QWORD *)object;
                  if (*(char *)(*(_QWORD *)&v295[16] + 31) >= 0)
                    v232 = *(_QWORD *)&v295[16] + 8;
                  else
                    v232 = *(_QWORD *)(*(_QWORD *)&v295[16] + 8);
                  v233 = _os_log_pack_fill();
                  *(_DWORD *)v233 = 68157954;
                  *(_DWORD *)(v233 + 4) = 13;
                  *(_WORD *)(v233 + 8) = 2080;
                  *(_QWORD *)(v233 + 10) = v232;
                  v234 = operator new();
                  v235 = v18[39];
                  if ((v235 & 0x80u) == 0)
                    v236 = v19;
                  else
                    v236 = *((_QWORD *)v18 + 2);
                  if ((v235 & 0x80u) != 0)
                    v235 = *((_QWORD *)v18 + 3);
                  *(_QWORD *)v234 = v231;
                  *(_OWORD *)(v234 + 8) = *(_OWORD *)&object[8];
                  *(_QWORD *)&object[8] = 0;
                  *(_QWORD *)&object[16] = 0;
                  *(_OWORD *)(v234 + 24) = *(_OWORD *)v295;
                  *(_QWORD *)v295 = 0;
                  *(_QWORD *)&v295[8] = 0;
                  *(_QWORD *)(v234 + 40) = v236;
                  *(_QWORD *)(v234 + 48) = v235;
                  *(_BYTE *)(v234 + 56) = 1;
                  __dst = 0;
                  *(_QWORD *)v299 = v234;
                  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v16 + 24) + 40))(*(_QWORD *)(v16 + 24), v299);
                  v237 = *(_QWORD *)v299;
                  *(_QWORD *)v299 = 0;
                  if (v237)
                  {
                    v238 = *(std::__shared_weak_count **)(v237 + 32);
                    if (v238)
                    {
                      v239 = (unint64_t *)&v238->__shared_owners_;
                      do
                        v240 = __ldaxr(v239);
                      while (__stlxr(v240 - 1, v239));
                      if (!v240)
                      {
                        ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
                        std::__shared_weak_count::__release_weak(v238);
                      }
                    }
                    v241 = *(std::__shared_weak_count **)(v237 + 16);
                    if (v241)
                    {
                      v242 = (unint64_t *)&v241->__shared_owners_;
                      do
                        v243 = __ldaxr(v242);
                      while (__stlxr(v243 - 1, v242));
                      if (!v243)
                      {
                        ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
                        std::__shared_weak_count::__release_weak(v241);
                      }
                    }
                    MEMORY[0x227684CE8](v237, 0x10F0C40B62ED6C6);
                    v244 = __dst;
                    __dst = 0;
                    if (v244)
                    {
                      v245 = (std::__shared_weak_count *)v244[4];
                      if (v245)
                      {
                        v246 = (unint64_t *)&v245->__shared_owners_;
                        do
                          v247 = __ldaxr(v246);
                        while (__stlxr(v247 - 1, v246));
                        if (!v247)
                        {
                          ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                          std::__shared_weak_count::__release_weak(v245);
                        }
                      }
                      v248 = (std::__shared_weak_count *)v244[2];
                      if (v248)
                      {
                        v249 = (unint64_t *)&v248->__shared_owners_;
                        do
                          v250 = __ldaxr(v249);
                        while (__stlxr(v250 - 1, v249));
                        if (!v250)
                        {
                          ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                          std::__shared_weak_count::__release_weak(v248);
                        }
                      }
                      MEMORY[0x227684CE8](v244, 0x10F0C40B62ED6C6);
                    }
                  }
                  v251 = *(std::__shared_weak_count **)&v295[8];
                  if (*(_QWORD *)&v295[8])
                  {
                    v252 = (unint64_t *)(*(_QWORD *)&v295[8] + 8);
                    do
                      v253 = __ldaxr(v252);
                    while (__stlxr(v253 - 1, v252));
                    if (!v253)
                    {
                      ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
                      std::__shared_weak_count::__release_weak(v251);
                    }
                  }
                  v254 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                  {
                    v255 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                    do
                      v256 = __ldaxr(v255);
                    while (__stlxr(v256 - 1, v255));
                    if (!v256)
                    {
                      ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                      std::__shared_weak_count::__release_weak(v254);
                    }
                  }
LABEL_404:
                  if (v14)
                  {
                    sub_2245664AC(v3, object);
                    sub_22322C138((uint64_t)&v279, "KeyframePlaneStorage: Failed to restore KeyframePlaneSegmentation %.13s", object);
                    sub_223182C08((uint64_t)&v279);
                  }
                  sub_223182C08((uint64_t)&v279);
                  v257 = v287;
                  if (v287)
                  {
                    v258 = (unint64_t *)&v287->__shared_owners_;
                    do
                      v259 = __ldaxr(v258);
                    while (__stlxr(v259 - 1, v258));
                    if (!v259)
                    {
                      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
                      std::__shared_weak_count::__release_weak(v257);
                    }
                  }
                  goto LABEL_411;
                }
              }
              memcpy(v60, __s, v59);
              goto LABEL_342;
            }
          }
          memmove(v51, __srca, v20);
          goto LABEL_79;
        }
      }
      memmove(v43, v41, v42);
      goto LABEL_71;
    }
  }
LABEL_411:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v207 = v289;
  if (v289)
  {
LABEL_329:
    v290 = v207;
    operator delete(v207);
  }
LABEL_330:
  v208 = v288;
  v288 = 0;
  if (v208)
  {
    v209 = *((_QWORD *)v208 + 26);
    if (v209)
    {
      v210 = *((_QWORD *)v208 + 27);
      v211 = (void *)*((_QWORD *)v208 + 26);
      if (v210 != v209)
      {
        do
        {
          v210 -= 424;
          sub_2236EA79C(v210);
        }
        while (v210 != v209);
        v211 = (void *)*((_QWORD *)v208 + 26);
      }
      *((_QWORD *)v208 + 27) = v209;
      operator delete(v211);
    }
    *((_QWORD *)v208 + 6) = &off_24EC20828;
    MEMORY[0x227684CE8](v208, 0x10A0C4047C2BC0BLL);
  }
}

void sub_223728768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  char a66;
  char a67;

  if (a67)
  {
    if (a66 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a38);
  sub_2237148C0(&a47);
  _Unwind_Resume(a1);
}

void sub_2237287B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,uint64_t a37,__int16 a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;

  if (*(_BYTE *)(v47 - 168) && *(char *)(v47 - 169) < 0)
    operator delete(*(void **)(v47 - 192));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a38);
  if (__p)
    operator delete(__p);
  sub_2237148C0(&a47);
  _Unwind_Resume(a1);
}

uint64_t sub_223728B84(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t v2;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v9;
  size_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  const char *v14;
  size_t v15;
  const char *v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  size_t v26;
  size_t v27;
  _QWORD *p_dst;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unsigned __int8 *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint8x8_t v80;
  _QWORD **v81;
  _QWORD *v82;
  unint64_t v84;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  float v89;
  float v90;
  uint64_t v91;
  _QWORD *v92;
  _BOOL8 v93;
  unint64_t v94;
  unint64_t v95;
  size_t prime;
  void *v97;
  void *v98;
  uint64_t v99;
  _QWORD *v100;
  size_t v101;
  size_t v102;
  size_t v103;
  _QWORD *i;
  size_t v105;
  uint64_t v106;
  unint64_t v107;
  uint8x8_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  size_t v112;
  uint64_t v113;
  void *v114;
  unint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v121;
  uint64_t v122;
  unsigned __int8 **v123;
  _QWORD v124[3];
  int v125;
  const char *v126;
  int v127;
  const char *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  uint64_t v131;
  __int128 v132;
  std::__shared_weak_count *v133;
  char *v134;
  std::__shared_weak_count *v135;
  _QWORD *__dst;
  __int128 v137;
  char __s[37];
  _BYTE v139[24];
  __int128 v140;
  void *v141[2];
  unint64_t v142;
  char v143;
  _QWORD v144[5];

  v144[2] = *MEMORY[0x24BDAC8D0];
  sub_223729BE0(&v131);
  if (**(int **)(v131 + 56) > 3)
    goto LABEL_117;
  v5 = *(unsigned __int8 *)(v131 + 72);
  v6 = sub_22322F254(v131, "OSLogSurrogateAppender", 1, 0);
  v7 = v6;
  if (!v5 && v6 == 0)
    goto LABEL_117;
  v124[0] = &v131;
  v124[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v124[2] = std::chrono::system_clock::now().__d_.__rep_;
  v125 = 3;
  v126 = "unknown file";
  v127 = 171;
  v129 = 0;
  v130 = 0;
  v128 = "unknown function";
  sub_2245664AC(*a2, __s);
  v9 = (const char *)(v131 + 16);
  v121 = v131 + 16;
  v122 = v131;
  if (*(char *)(v131 + 39) < 0)
  {
    v9 = *(const char **)(v131 + 16);
    v10 = *(_QWORD *)(v131 + 24);
    v123 = a2;
    v11 = v7;
    v13 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v13 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v10 = *(unsigned __int8 *)(v131 + 39);
    v123 = a2;
    v11 = v7;
    v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v12 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v139);
    sub_223199C58("com.apple.cv3d", (unint64_t)v139, &xmmword_255788F40);
    if ((_BYTE)v140 && (v139[23] & 0x80000000) != 0)
      operator delete(*(void **)v139);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F57 >= 0)
    v14 = (const char *)&xmmword_255788F40;
  else
    v14 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v15 = byte_255788F57;
  else
    v15 = *((_QWORD *)&xmmword_255788F40 + 1);
  v16 = v9;
  *(_QWORD *)v139 = os_log_create(v14, v9);
  v17 = &v139[8];
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v15 >= 0x17)
  {
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    v17 = operator new(v19 + 1);
    v18 = v11;
    *(_QWORD *)&v139[16] = v15;
    *(_QWORD *)&v140 = v20 | 0x8000000000000000;
    *(_QWORD *)&v139[8] = v17;
    goto LABEL_23;
  }
  BYTE7(v140) = v15;
  v18 = v11;
  if (v15)
LABEL_23:
    memmove(v17, v14, v15);
  v17[v15] = 0;
  BYTE8(v140) = 1;
  v21 = v141;
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v10 >= 0x17)
  {
    v22 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v22 = v10 | 7;
    v23 = v22 + 1;
    v21 = (void **)operator new(v22 + 1);
    v141[1] = (void *)v10;
    v142 = v23 | 0x8000000000000000;
    v141[0] = v21;
  }
  else
  {
    HIBYTE(v142) = v10;
    if (!v10)
    {
      LOBYTE(v141[0]) = 0;
      v143 = 1;
      v2 = *(_QWORD *)v139;
      if ((SHIBYTE(v142) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v21, v16, v10);
  *((_BYTE *)v21 + v10) = 0;
  v143 = 1;
  v2 = *(_QWORD *)v139;
  if ((SHIBYTE(v142) & 0x80000000) == 0)
  {
LABEL_28:
    a2 = v123;
    if (!BYTE8(v140))
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v141[0]);
  a2 = v123;
  if (!BYTE8(v140))
    goto LABEL_37;
LABEL_35:
  if (SBYTE7(v140) < 0)
    operator delete(*(void **)&v139[8]);
LABEL_37:
  if (*(_QWORD *)v139)
    os_release(*(void **)v139);
  if (!v18 || !*(_QWORD *)(v18 + 24))
  {
    os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_INFO);
    *(_QWORD *)v139 = 0xD04100202;
    *(_WORD *)&v139[8] = 2080;
    *(_QWORD *)&v139[10] = __s;
    v29 = (void *)_os_log_send_and_compose_impl();
    if (v29)
      free(v29);
    goto LABEL_110;
  }
  v2 = _os_log_pack_size();
  v24 = (std::__shared_weak_count_vtbl *)operator new(v2, (std::align_val_t)8uLL);
  v25 = (std::__shared_weak_count *)operator new();
  v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v25->__shared_owners_ = 0;
  v25->__shared_weak_owners_ = 0;
  v25[1].__vftable = v24;
  *(_QWORD *)&v132 = v24;
  *((_QWORD *)&v132 + 1) = v24;
  v134 = 0;
  v135 = 0;
  v133 = v25;
  v26 = strlen(__s);
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v27 = v26;
  if (v26 >= 0x17)
  {
    v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v30 = v26 | 7;
    v31 = v30 + 1;
    p_dst = operator new(v30 + 1);
    *(_QWORD *)&v137 = v27;
    *((_QWORD *)&v137 + 1) = v31 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_50;
  }
  HIBYTE(v137) = v26;
  p_dst = &__dst;
  if (v26)
LABEL_50:
    memcpy(p_dst, __s, v27);
  *((_BYTE *)p_dst + v27) = 0;
  v32 = __dst;
  v144[0] = v137;
  *(_QWORD *)((char *)v144 + 7) = *(_QWORD *)((char *)&v137 + 7);
  v33 = HIBYTE(v137);
  v34 = operator new(0x38uLL);
  v34[1] = 0;
  v34[2] = 0;
  v34[3] = off_24EC1FA48;
  *v34 = &off_24EC1F9F8;
  v35 = v144[0];
  v34[4] = v32;
  v34[5] = v35;
  *(_QWORD *)((char *)v34 + 47) = *(_QWORD *)((char *)v144 + 7);
  *((_BYTE *)v34 + 55) = v33;
  v144[0] = 0;
  *(_QWORD *)((char *)v144 + 7) = 0;
  v36 = v135;
  v134 = (char *)(v34 + 3);
  v135 = (std::__shared_weak_count *)v34;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  *(_OWORD *)v139 = v132;
  v39 = v134;
  *(_QWORD *)&v139[16] = v133;
  if (v133)
  {
    v40 = (unint64_t *)&v133->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v42 = v135;
  *(_QWORD *)&v140 = v39;
  *((_QWORD *)&v140 + 1) = v135;
  if (v135)
  {
    v43 = (unint64_t *)&v135->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
    v141[0] = v39;
    do
      v45 = __ldaxr(v43);
    while (__stlxr(v45 - 1, v43));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  else
  {
    v141[0] = v39;
  }
  v46 = v133;
  if (v133)
  {
    v47 = (unint64_t *)&v133->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = *(_QWORD *)v139;
  if (*((char *)v141[0] + 31) >= 0)
    v50 = (char *)v141[0] + 8;
  else
    v50 = (char *)*((_QWORD *)v141[0] + 1);
  v51 = _os_log_pack_fill();
  *(_DWORD *)v51 = 68157954;
  *(_DWORD *)(v51 + 4) = 13;
  *(_WORD *)(v51 + 8) = 2080;
  *(_QWORD *)(v51 + 10) = v50;
  v52 = operator new();
  v53 = *(unsigned __int8 *)(v122 + 39);
  v54 = v121;
  if ((v53 & 0x80u) != 0)
  {
    v54 = *(_QWORD *)(v122 + 16);
    v53 = *(_QWORD *)(v122 + 24);
  }
  *(_QWORD *)v52 = v49;
  *(_OWORD *)(v52 + 8) = *(_OWORD *)&v139[8];
  *(_QWORD *)&v139[8] = 0;
  *(_QWORD *)&v139[16] = 0;
  *(_OWORD *)(v52 + 24) = v140;
  v140 = 0uLL;
  *(_QWORD *)(v52 + 40) = v54;
  *(_QWORD *)(v52 + 48) = v53;
  *(_BYTE *)(v52 + 56) = 1;
  __dst = 0;
  *(_QWORD *)&v132 = v52;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v18 + 24) + 40))(*(_QWORD *)(v18 + 24), &v132);
  v55 = v132;
  *(_QWORD *)&v132 = 0;
  if (v55)
  {
    v56 = *(std::__shared_weak_count **)(v55 + 32);
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    v2 = *(_QWORD *)(v55 + 16);
    if (v2)
    {
      v59 = (unint64_t *)(v2 + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v2);
      }
    }
    MEMORY[0x227684CE8](v55, 0x10F0C40B62ED6C6);
    v61 = __dst;
    __dst = 0;
    if (v61)
    {
      v62 = (std::__shared_weak_count *)v61[4];
      if (v62)
      {
        v63 = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      v2 = v61[2];
      if (v2)
      {
        v65 = (unint64_t *)(v2 + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v2);
        }
      }
      MEMORY[0x227684CE8](v61, 0x10F0C40B62ED6C6);
    }
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *(std::__shared_weak_count **)&v139[16];
  if (*(_QWORD *)&v139[16])
  {
    v71 = (unint64_t *)(*(_QWORD *)&v139[16] + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
LABEL_110:
  if (v5)
  {
    sub_2245664AC(*a2, v139);
    sub_22322C138((uint64_t)v124, "KeyframePlaneStorage: inserting KeyframePlaneSegmentation %.13s", v139);
    sub_223182C08((uint64_t)v124);
  }
  sub_223182C08((uint64_t)v124);
  v73 = v130;
  if (v130)
  {
    v74 = (unint64_t *)&v130->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
LABEL_117:
  v76 = *a2;
  *a2 = 0;
  *(_OWORD *)v139 = *(_OWORD *)v76;
  *(_QWORD *)&v139[16] = v76;
  v77 = sub_22456636C(v139);
  v78 = v77;
  v79 = a1[1];
  if (v79)
  {
    v80 = (uint8x8_t)vcnt_s8((int8x8_t)v79);
    v80.i16[0] = vaddlv_u8(v80);
    if (v80.u32[0] > 1uLL)
    {
      v2 = v77;
      if (v77 >= v79)
        v2 = v77 % v79;
    }
    else
    {
      v2 = (v79 - 1) & v77;
    }
    v81 = *(_QWORD ***)(*a1 + 8 * v2);
    if (v81)
    {
      v82 = *v81;
      if (*v81)
      {
        if (v80.u32[0] < 2uLL)
        {
          while (1)
          {
            v86 = v82[1];
            if (v86 == v77)
            {
              if (v82[2] == *(_QWORD *)v139 && v82[3] == *(_QWORD *)&v139[8])
                goto LABEL_215;
            }
            else if ((v86 & (v79 - 1)) != v2)
            {
              goto LABEL_144;
            }
            v82 = (_QWORD *)*v82;
            if (!v82)
              goto LABEL_144;
          }
        }
        do
        {
          v84 = v82[1];
          if (v84 == v77)
          {
            if (v82[2] == *(_QWORD *)v139 && v82[3] == *(_QWORD *)&v139[8])
              goto LABEL_215;
          }
          else
          {
            if (v84 >= v79)
              v84 %= v79;
            if (v84 != v2)
              break;
          }
          v82 = (_QWORD *)*v82;
        }
        while (v82);
      }
    }
  }
LABEL_144:
  v82 = operator new(0x28uLL);
  v87 = a1 + 2;
  *v82 = 0;
  v82[1] = v78;
  *((_OWORD *)v82 + 1) = *(_OWORD *)v139;
  v88 = *(_QWORD *)&v139[16];
  *(_QWORD *)&v139[16] = 0;
  v82[4] = v88;
  v89 = (float)(unint64_t)(a1[3] + 1);
  v90 = *((float *)a1 + 8);
  if (!v79 || (float)(v90 * (float)v79) < v89)
  {
    v93 = 1;
    if (v79 >= 3)
      v93 = (v79 & (v79 - 1)) != 0;
    v94 = v93 | (2 * v79);
    v95 = vcvtps_u32_f32(v89 / v90);
    if (v94 <= v95)
      prime = v95;
    else
      prime = v94;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v79 = a1[1];
    }
    if (prime > v79)
    {
LABEL_158:
      if (prime >> 61)
        sub_223174E94();
      v97 = operator new(8 * prime);
      v98 = (void *)*a1;
      *a1 = (uint64_t)v97;
      if (v98)
        operator delete(v98);
      v99 = 0;
      a1[1] = prime;
      do
        *(_QWORD *)(*a1 + 8 * v99++) = 0;
      while (prime != v99);
      v100 = (_QWORD *)*v87;
      if (!*v87)
        goto LABEL_190;
      v101 = v100[1];
      v102 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v103 = v101 & v102;
        *(_QWORD *)(*a1 + 8 * v103) = v87;
        for (i = (_QWORD *)*v100; *v100; i = (_QWORD *)*v100)
        {
          v105 = i[1] & v102;
          if (v105 == v103)
          {
            v100 = i;
          }
          else if (*(_QWORD *)(*a1 + 8 * v105))
          {
            *v100 = *i;
            v106 = 8 * v105;
            *i = **(_QWORD **)(*a1 + v106);
            **(_QWORD **)(*a1 + v106) = i;
          }
          else
          {
            *(_QWORD *)(*a1 + 8 * v105) = v100;
            v100 = i;
            v103 = v105;
          }
        }
        goto LABEL_190;
      }
      if (v101 >= prime)
        v101 %= prime;
      *(_QWORD *)(*a1 + 8 * v101) = v87;
      v110 = (_QWORD *)*v100;
      if (!*v100)
      {
LABEL_190:
        v79 = prime;
        v113 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_191;
        goto LABEL_206;
      }
      while (1)
      {
        v112 = v110[1];
        if (v112 >= prime)
          v112 %= prime;
        if (v112 == v101)
          goto LABEL_184;
        if (*(_QWORD *)(*a1 + 8 * v112))
        {
          *v100 = *v110;
          v111 = 8 * v112;
          *v110 = **(_QWORD **)(*a1 + v111);
          **(_QWORD **)(*a1 + v111) = v110;
          v110 = v100;
LABEL_184:
          v100 = v110;
          v110 = (_QWORD *)*v110;
          if (!v110)
            goto LABEL_190;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v112) = v100;
          v100 = v110;
          v110 = (_QWORD *)*v110;
          v101 = v112;
          if (!v110)
            goto LABEL_190;
        }
      }
    }
    if (prime < v79)
    {
      v107 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v79 < 3 || (v108 = (uint8x8_t)vcnt_s8((int8x8_t)v79), v108.i16[0] = vaddlv_u8(v108), v108.u32[0] > 1uLL))
      {
        v107 = std::__next_prime(v107);
      }
      else
      {
        v109 = 1 << -(char)__clz(v107 - 1);
        if (v107 >= 2)
          v107 = v109;
      }
      if (prime <= v107)
        prime = v107;
      if (prime < v79)
      {
        if (!prime)
        {
          v114 = (void *)*a1;
          *a1 = 0;
          if (v114)
            operator delete(v114);
          v79 = 0;
          a1[1] = 0;
          v113 = -1;
          goto LABEL_206;
        }
        goto LABEL_158;
      }
      v79 = a1[1];
    }
    v113 = v79 - 1;
    if ((v79 & (v79 - 1)) != 0)
    {
LABEL_191:
      if (v78 >= v79)
      {
        v2 = v78 % v79;
        v91 = *a1;
        v92 = *(_QWORD **)(*a1 + 8 * (v78 % v79));
        if (v92)
          goto LABEL_147;
      }
      else
      {
        v2 = v78;
        v91 = *a1;
        v92 = *(_QWORD **)(*a1 + 8 * v78);
        if (v92)
          goto LABEL_147;
      }
      goto LABEL_207;
    }
LABEL_206:
    v2 = v113 & v78;
    v91 = *a1;
    v92 = *(_QWORD **)(*a1 + 8 * (v113 & v78));
    if (v92)
      goto LABEL_147;
    goto LABEL_207;
  }
  v91 = *a1;
  v92 = *(_QWORD **)(*a1 + 8 * v2);
  if (v92)
  {
LABEL_147:
    *v82 = *v92;
LABEL_213:
    *v92 = v82;
    goto LABEL_214;
  }
LABEL_207:
  *v82 = *v87;
  *v87 = v82;
  *(_QWORD *)(v91 + 8 * v2) = v87;
  if (*v82)
  {
    v115 = *(_QWORD *)(*v82 + 8);
    if ((v79 & (v79 - 1)) != 0)
    {
      if (v115 >= v79)
        v115 %= v79;
    }
    else
    {
      v115 &= v79 - 1;
    }
    v92 = (_QWORD *)(*a1 + 8 * v115);
    goto LABEL_213;
  }
LABEL_214:
  ++a1[3];
LABEL_215:
  v116 = *(_QWORD **)&v139[16];
  *(_QWORD *)&v139[16] = 0;
  if (v116)
  {
    v117 = v116[26];
    if (v117)
    {
      v118 = v116[27];
      v119 = (void *)v116[26];
      if (v118 != v117)
      {
        do
        {
          v118 -= 424;
          sub_2236EA79C(v118);
        }
        while (v118 != v117);
        v119 = (void *)v116[26];
      }
      v116[27] = v117;
      operator delete(v119);
    }
    v116[6] = &off_24EC20828;
    MEMORY[0x227684CE8](v116, 0x10A0C4047C2BC0BLL);
  }
  return v82[4];
}

void sub_223729A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  if (*(_BYTE *)(v7 - 168))
  {
    if (*(char *)(v7 - 169) < 0)
      operator delete(*(void **)(v7 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223729A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  sub_22319A054(&a25);
  sub_22319A054(&a31);
  sub_223199DE8(v31 - 192);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_223729A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_223199DE8(v7 - 192);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223729A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  int v26;

  if (v26 < 0)
  {
    operator delete(v25);
    sub_223199DE8((uint64_t)&a25);
    sub_223182DAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a25);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_223729AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223729B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223729BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_223737CD0(v6 - 192);
  sub_223729CD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223729BE0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC480);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC480))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC478);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC480);
  }
  *a1 = qword_2540CC478;
}

void sub_223729C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC480);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC480);
  _Unwind_Resume(a1);
}

_QWORD *sub_223729CD4(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = v2[26];
    if (v3)
    {
      v4 = v2[27];
      v5 = (void *)v2[26];
      if (v4 != v3)
      {
        do
        {
          v4 -= 424;
          sub_2236EA79C(v4);
        }
        while (v4 != v3);
        v5 = (void *)v2[26];
      }
      v2[27] = v3;
      operator delete(v5);
    }
    v2[6] = &off_24EC20828;
    MEMORY[0x227684CE8](v2, 0x10A0C4047C2BC0BLL);
  }
  return a1;
}

uint64_t sub_223729D64(uint64_t a1, unsigned __int8 **a2)
{
  unint64_t v2;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  size_t v10;
  const char *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  const char *v14;
  size_t v15;
  const char *v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  size_t v30;
  size_t v31;
  _QWORD *p_dst;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unsigned __int8 *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint8x8_t v85;
  _QWORD **v86;
  _QWORD *v87;
  unint64_t v89;
  uint64_t v91;
  _QWORD *v92;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v93;
  float v94;
  float v95;
  uint64_t v96;
  _QWORD *v97;
  _BOOL8 v98;
  unint64_t v99;
  unint64_t v100;
  size_t prime;
  void *v102;
  void *v103;
  uint64_t v104;
  _QWORD *v105;
  size_t v106;
  size_t v107;
  size_t v108;
  _QWORD *i;
  size_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint8x8_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  size_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v127;
  unsigned __int8 **v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  std::__shared_weak_count *v132;
  char *v133;
  std::__shared_weak_count *v134;
  _QWORD *__dst;
  __int128 v136;
  char __s[37];
  __int128 v138;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v140;
  const char *v141;
  int v142;
  const char *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  _BYTE v146[24];
  __int128 v147;
  void *v148[2];
  unint64_t v149;
  char v150;
  _QWORD v151[5];

  v151[2] = *MEMORY[0x24BDAC8D0];
  sub_223729BE0(&v130);
  if (**(int **)(v130 + 56) > 3)
    goto LABEL_117;
  v5 = *(unsigned __int8 *)(v130 + 72);
  v6 = sub_22322F254(v130, "OSLogSurrogateAppender", 1, 0);
  v7 = v6;
  if (!v5 && v6 == 0)
    goto LABEL_117;
  *(_QWORD *)&v138 = &v130;
  *((std::chrono::steady_clock::time_point *)&v138 + 1) = std::chrono::steady_clock::now();
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v140 = 3;
  v141 = "unknown file";
  v142 = 178;
  v144 = 0;
  v145 = 0;
  v143 = "unknown function";
  sub_2245664AC(*a2, __s);
  v9 = *(_QWORD *)v138;
  if (*(char *)(*(_QWORD *)v138 + 39) < 0)
  {
    v11 = *(const char **)(v9 + 16);
    v10 = *(_QWORD *)(v9 + 24);
    v127 = *(_QWORD *)v138 + 16;
    v128 = a2;
    v13 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v13 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v10 = *(unsigned __int8 *)(*(_QWORD *)v138 + 39);
    v11 = (const char *)(*(_QWORD *)v138 + 16);
    v127 = (uint64_t)v11;
    v128 = a2;
    v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v12 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v146);
    sub_223199C58("com.apple.cv3d", (unint64_t)v146, &xmmword_255788F40);
    if ((_BYTE)v147 && (v146[23] & 0x80000000) != 0)
      operator delete(*(void **)v146);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F57 >= 0)
    v14 = (const char *)&xmmword_255788F40;
  else
    v14 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v15 = byte_255788F57;
  else
    v15 = *((_QWORD *)&xmmword_255788F40 + 1);
  v16 = v11;
  *(_QWORD *)v146 = os_log_create(v14, v11);
  v17 = &v146[8];
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v15 >= 0x17)
  {
    v18 = v7;
    v19 = v9;
    v20 = v5;
    v21 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v21 = v15 | 7;
    v22 = v21 + 1;
    v17 = operator new(v21 + 1);
    *(_QWORD *)&v146[16] = v15;
    *(_QWORD *)&v147 = v22 | 0x8000000000000000;
    *(_QWORD *)&v146[8] = v17;
    v5 = v20;
    v9 = v19;
    v7 = v18;
    goto LABEL_23;
  }
  BYTE7(v147) = v15;
  if (v15)
LABEL_23:
    memmove(v17, v14, v15);
  v17[v15] = 0;
  BYTE8(v147) = 1;
  v23 = v148;
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v2 = (unint64_t)v16;
  if (v10 >= 0x17)
  {
    v25 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v25 = v10 | 7;
    v26 = v25 + 1;
    a2 = v128;
    v23 = (void **)operator new(v25 + 1);
    v148[1] = (void *)v10;
    v149 = v26 | 0x8000000000000000;
    v148[0] = v23;
  }
  else
  {
    HIBYTE(v149) = v10;
    a2 = v128;
    if (!v10)
    {
      LOBYTE(v148[0]) = 0;
      v150 = 1;
      v24 = *(NSObject **)v146;
      if ((SHIBYTE(v149) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v23, (const void *)v2, v10);
  *((_BYTE *)v23 + v10) = 0;
  v150 = 1;
  v24 = *(NSObject **)v146;
  if ((SHIBYTE(v149) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v147))
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v148[0]);
  if (!BYTE8(v147))
    goto LABEL_37;
LABEL_35:
  if (SBYTE7(v147) < 0)
    operator delete(*(void **)&v146[8]);
LABEL_37:
  if (*(_QWORD *)v146)
    os_release(*(void **)v146);
  if (!v7 || !*(_QWORD *)(v7 + 24))
  {
    os_log_type_enabled(v24, OS_LOG_TYPE_INFO);
    *(_QWORD *)v146 = 0xD04100202;
    *(_WORD *)&v146[8] = 2080;
    *(_QWORD *)&v146[10] = __s;
    v33 = (void *)_os_log_send_and_compose_impl();
    if (v33)
      free(v33);
    goto LABEL_110;
  }
  v27 = _os_log_pack_size();
  v28 = (std::__shared_weak_count_vtbl *)operator new(v27, (std::align_val_t)8uLL);
  v29 = (std::__shared_weak_count *)operator new();
  v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v29->__shared_owners_ = 0;
  v29->__shared_weak_owners_ = 0;
  v29[1].__vftable = v28;
  *(_QWORD *)&v131 = v28;
  *((_QWORD *)&v131 + 1) = v28;
  v133 = 0;
  v134 = 0;
  v132 = v29;
  v30 = strlen(__s);
  if (v30 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v31 = v30;
  if (v30 >= 0x17)
  {
    v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v34 = v30 | 7;
    v35 = v34 + 1;
    p_dst = operator new(v34 + 1);
    *(_QWORD *)&v136 = v31;
    *((_QWORD *)&v136 + 1) = v35 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_50;
  }
  HIBYTE(v136) = v30;
  p_dst = &__dst;
  if (v30)
LABEL_50:
    memcpy(p_dst, __s, v31);
  *((_BYTE *)p_dst + v31) = 0;
  v36 = __dst;
  v151[0] = v136;
  *(_QWORD *)((char *)v151 + 7) = *(_QWORD *)((char *)&v136 + 7);
  v37 = HIBYTE(v136);
  v38 = operator new(0x38uLL);
  v38[1] = 0;
  v38[2] = 0;
  v38[3] = off_24EC1FA48;
  *v38 = &off_24EC1F9F8;
  v39 = v151[0];
  v38[4] = v36;
  v38[5] = v39;
  *(_QWORD *)((char *)v38 + 47) = *(_QWORD *)((char *)v151 + 7);
  *((_BYTE *)v38 + 55) = v37;
  v151[0] = 0;
  *(_QWORD *)((char *)v151 + 7) = 0;
  v40 = v134;
  v133 = (char *)(v38 + 3);
  v134 = (std::__shared_weak_count *)v38;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  *(_OWORD *)v146 = v131;
  v43 = v133;
  *(_QWORD *)&v146[16] = v132;
  if (v132)
  {
    v44 = (unint64_t *)&v132->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v46 = v134;
  *(_QWORD *)&v147 = v43;
  *((_QWORD *)&v147 + 1) = v134;
  if (v134)
  {
    v47 = (unint64_t *)&v134->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
    v148[0] = v43;
    do
      v49 = __ldaxr(v47);
    while (__stlxr(v49 - 1, v47));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  else
  {
    v148[0] = v43;
  }
  v50 = v132;
  if (v132)
  {
    v51 = (unint64_t *)&v132->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v2 = *(_QWORD *)v146;
  if (*((char *)v148[0] + 31) >= 0)
    v53 = (char *)v148[0] + 8;
  else
    v53 = (char *)*((_QWORD *)v148[0] + 1);
  v54 = _os_log_pack_fill();
  *(_DWORD *)v54 = 68157954;
  *(_DWORD *)(v54 + 4) = 13;
  *(_WORD *)(v54 + 8) = 2080;
  *(_QWORD *)(v54 + 10) = v53;
  v55 = operator new();
  v56 = *(unsigned __int8 *)(v9 + 39);
  v57 = v127;
  if ((v56 & 0x80u) != 0)
  {
    v57 = *(_QWORD *)(v9 + 16);
    v56 = *(_QWORD *)(v9 + 24);
  }
  *(_QWORD *)v55 = v2;
  *(_OWORD *)(v55 + 8) = *(_OWORD *)&v146[8];
  *(_QWORD *)&v146[8] = 0;
  *(_QWORD *)&v146[16] = 0;
  *(_OWORD *)(v55 + 24) = v147;
  v147 = 0uLL;
  *(_QWORD *)(v55 + 40) = v57;
  *(_QWORD *)(v55 + 48) = v56;
  *(_BYTE *)(v55 + 56) = 1;
  __dst = 0;
  *(_QWORD *)&v131 = v55;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), &v131);
  v58 = v131;
  *(_QWORD *)&v131 = 0;
  if (v58)
  {
    v59 = *(std::__shared_weak_count **)(v58 + 32);
    if (v59)
    {
      v60 = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v62 = *(std::__shared_weak_count **)(v58 + 16);
    if (v62)
    {
      v63 = (unint64_t *)&v62->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    MEMORY[0x227684CE8](v58, 0x10F0C40B62ED6C6);
    v65 = __dst;
    __dst = 0;
    if (v65)
    {
      v66 = (std::__shared_weak_count *)v65[4];
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      v69 = (std::__shared_weak_count *)v65[2];
      if (v69)
      {
        v70 = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      MEMORY[0x227684CE8](v65, 0x10F0C40B62ED6C6);
    }
  }
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
  if (*((_QWORD *)&v147 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = *(std::__shared_weak_count **)&v146[16];
  if (*(_QWORD *)&v146[16])
  {
    v76 = (unint64_t *)(*(_QWORD *)&v146[16] + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
LABEL_110:
  if (v5)
  {
    sub_2245664AC(*a2, v146);
    sub_22322C138((uint64_t)&v138, "KeyframePlaneStorage: inserting GlobalPlane %.13s", v146);
    sub_223182C08((uint64_t)&v138);
  }
  sub_223182C08((uint64_t)&v138);
  v78 = v145;
  if (v145)
  {
    v79 = (unint64_t *)&v145->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
LABEL_117:
  v81 = *a2;
  *a2 = 0;
  v138 = *(_OWORD *)v81;
  v129 = 0;
  rep = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v81;
  v82 = sub_22456636C((unsigned __int8 *)&v138);
  v83 = v82;
  v84 = *(_QWORD *)(a1 + 48);
  if (v84)
  {
    v85 = (uint8x8_t)vcnt_s8((int8x8_t)v84);
    v85.i16[0] = vaddlv_u8(v85);
    if (v85.u32[0] > 1uLL)
    {
      v2 = v82;
      if (v82 >= v84)
        v2 = v82 % v84;
    }
    else
    {
      v2 = (v84 - 1) & v82;
    }
    v86 = *(_QWORD ***)(*(_QWORD *)(a1 + 40) + 8 * v2);
    if (v86)
    {
      v87 = *v86;
      if (*v86)
      {
        if (v85.u32[0] < 2uLL)
        {
          while (1)
          {
            v91 = v87[1];
            if (v91 == v82)
            {
              if (v87[2] == (_QWORD)v138 && v87[3] == *((_QWORD *)&v138 + 1))
                goto LABEL_215;
            }
            else if ((v91 & (v84 - 1)) != v2)
            {
              goto LABEL_144;
            }
            v87 = (_QWORD *)*v87;
            if (!v87)
              goto LABEL_144;
          }
        }
        do
        {
          v89 = v87[1];
          if (v89 == v82)
          {
            if (v87[2] == (_QWORD)v138 && v87[3] == *((_QWORD *)&v138 + 1))
              goto LABEL_215;
          }
          else
          {
            if (v89 >= v84)
              v89 %= v84;
            if (v89 != v2)
              break;
          }
          v87 = (_QWORD *)*v87;
        }
        while (v87);
      }
    }
  }
LABEL_144:
  v87 = operator new(0x28uLL);
  v92 = (_QWORD *)(a1 + 56);
  *(_QWORD *)v146 = v87;
  *(_QWORD *)&v146[8] = a1 + 56;
  *v87 = 0;
  v87[1] = v83;
  *((_OWORD *)v87 + 1) = v138;
  v93 = rep;
  rep = 0;
  v87[4] = v93;
  v146[16] = 1;
  v94 = (float)(unint64_t)(*(_QWORD *)(a1 + 64) + 1);
  v95 = *(float *)(a1 + 72);
  if (!v84 || (float)(v95 * (float)v84) < v94)
  {
    v98 = 1;
    if (v84 >= 3)
      v98 = (v84 & (v84 - 1)) != 0;
    v99 = v98 | (2 * v84);
    v100 = vcvtps_u32_f32(v94 / v95);
    if (v99 <= v100)
      prime = v100;
    else
      prime = v99;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v84 = *(_QWORD *)(a1 + 48);
    }
    if (prime > v84)
    {
LABEL_158:
      if (prime >> 61)
        sub_223174E94();
      v102 = operator new(8 * prime);
      v103 = *(void **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v102;
      if (v103)
        operator delete(v103);
      v104 = 0;
      *(_QWORD *)(a1 + 48) = prime;
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v104++) = 0;
      while (prime != v104);
      v105 = (_QWORD *)*v92;
      if (!*v92)
        goto LABEL_190;
      v106 = v105[1];
      v107 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v108 = v106 & v107;
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v108) = v92;
        for (i = (_QWORD *)*v105; *v105; i = (_QWORD *)*v105)
        {
          v110 = i[1] & v107;
          if (v110 == v108)
          {
            v105 = i;
          }
          else
          {
            v111 = *(_QWORD *)(a1 + 40);
            if (*(_QWORD *)(v111 + 8 * v110))
            {
              *v105 = *i;
              v112 = 8 * v110;
              *i = **(_QWORD **)(*(_QWORD *)(a1 + 40) + v112);
              **(_QWORD **)(*(_QWORD *)(a1 + 40) + v112) = i;
            }
            else
            {
              *(_QWORD *)(v111 + 8 * v110) = v105;
              v105 = i;
              v108 = v110;
            }
          }
        }
        goto LABEL_190;
      }
      if (v106 >= prime)
        v106 %= prime;
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v106) = v92;
      v116 = (_QWORD *)*v105;
      if (!*v105)
      {
LABEL_190:
        v84 = prime;
        v120 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_191;
        goto LABEL_206;
      }
      while (1)
      {
        v118 = v116[1];
        if (v118 >= prime)
          v118 %= prime;
        if (v118 == v106)
          goto LABEL_184;
        v119 = *(_QWORD *)(a1 + 40);
        if (*(_QWORD *)(v119 + 8 * v118))
        {
          *v105 = *v116;
          v117 = 8 * v118;
          *v116 = **(_QWORD **)(*(_QWORD *)(a1 + 40) + v117);
          **(_QWORD **)(*(_QWORD *)(a1 + 40) + v117) = v116;
          v116 = v105;
LABEL_184:
          v105 = v116;
          v116 = (_QWORD *)*v116;
          if (!v116)
            goto LABEL_190;
        }
        else
        {
          *(_QWORD *)(v119 + 8 * v118) = v105;
          v105 = v116;
          v116 = (_QWORD *)*v116;
          v106 = v118;
          if (!v116)
            goto LABEL_190;
        }
      }
    }
    if (prime < v84)
    {
      v113 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 64) / *(float *)(a1 + 72));
      if (v84 < 3 || (v114 = (uint8x8_t)vcnt_s8((int8x8_t)v84), v114.i16[0] = vaddlv_u8(v114), v114.u32[0] > 1uLL))
      {
        v113 = std::__next_prime(v113);
      }
      else
      {
        v115 = 1 << -(char)__clz(v113 - 1);
        if (v113 >= 2)
          v113 = v115;
      }
      if (prime <= v113)
        prime = v113;
      if (prime < v84)
      {
        if (!prime)
        {
          v121 = *(void **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = 0;
          if (v121)
            operator delete(v121);
          v84 = 0;
          *(_QWORD *)(a1 + 48) = 0;
          v120 = -1;
          goto LABEL_206;
        }
        goto LABEL_158;
      }
      v84 = *(_QWORD *)(a1 + 48);
    }
    v120 = v84 - 1;
    if ((v84 & (v84 - 1)) != 0)
    {
LABEL_191:
      if (v83 >= v84)
      {
        v2 = v83 % v84;
        v96 = *(_QWORD *)(a1 + 40);
        v97 = *(_QWORD **)(v96 + 8 * (v83 % v84));
        if (v97)
          goto LABEL_147;
      }
      else
      {
        v2 = v83;
        v96 = *(_QWORD *)(a1 + 40);
        v97 = *(_QWORD **)(v96 + 8 * v83);
        if (v97)
          goto LABEL_147;
      }
      goto LABEL_207;
    }
LABEL_206:
    v2 = v120 & v83;
    v96 = *(_QWORD *)(a1 + 40);
    v97 = *(_QWORD **)(v96 + 8 * (v120 & v83));
    if (v97)
      goto LABEL_147;
    goto LABEL_207;
  }
  v96 = *(_QWORD *)(a1 + 40);
  v97 = *(_QWORD **)(v96 + 8 * v2);
  if (v97)
  {
LABEL_147:
    *v87 = *v97;
LABEL_213:
    *v97 = v87;
    goto LABEL_214;
  }
LABEL_207:
  *v87 = *v92;
  *v92 = v87;
  *(_QWORD *)(v96 + 8 * v2) = v92;
  if (*v87)
  {
    v122 = *(_QWORD *)(*v87 + 8);
    if ((v84 & (v84 - 1)) != 0)
    {
      if (v122 >= v84)
        v122 %= v84;
    }
    else
    {
      v122 &= v84 - 1;
    }
    v97 = (_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v122);
    goto LABEL_213;
  }
LABEL_214:
  ++*(_QWORD *)(a1 + 64);
LABEL_215:
  v123 = rep;
  rep = 0;
  if (v123)
    sub_2236C86D0((uint64_t)&rep, v123);
  v124 = v87[4];
  v125 = v129;
  v129 = 0;
  if (v125)
    sub_2236C86D0((uint64_t)&v129, v125);
  return v124;
}

void sub_22372AB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (*(_BYTE *)(v29 - 168))
  {
    if (*(char *)(v29 - 169) < 0)
      operator delete(*(void **)(v29 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_22372AB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  sub_22319A054(&a15);
  sub_22319A054(&a21);
  sub_223199DE8(v29 - 192);
  sub_223182DAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_22372ABC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  sub_223199DE8(v29 - 192);
  sub_223182DAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_22372ABDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  int v30;

  if (v30 < 0)
  {
    operator delete(v29);
    sub_223199DE8((uint64_t)&a15);
    sub_223182DAC((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a15);
  sub_223182DAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_22372AC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_223182DAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_22372AC60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_22372AD34(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  size_t v11;
  const char *v12;
  unsigned __int8 v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  const char *v18;
  size_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  const char *v22;
  size_t v23;
  _BYTE *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  size_t v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  size_t v36;
  size_t v37;
  _QWORD *v38;
  void *v39;
  unsigned __int8 v40;
  const char *v41;
  size_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  size_t v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count *v52;
  size_t v53;
  size_t v54;
  _QWORD *p_dst;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  char *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  _QWORD *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  int8x8_t v108;
  unint64_t v109;
  uint8x8_t v110;
  _QWORD *v111;
  _QWORD *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  char v124;
  _QWORD *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *p_shared_owners;
  unint64_t v129;
  char *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  _QWORD *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *__src;
  const char *__srca;
  uint64_t *v174;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v176;
  int v177;
  const char *v178;
  int v179;
  const char *v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  uint64_t v183;
  __int128 v184;
  std::__shared_weak_count *v185;
  char *v186;
  std::__shared_weak_count *v187;
  _QWORD *__dst;
  __int128 v189;
  char __s[37];
  _QWORD v191[2];
  _BYTE v192[24];
  __int128 v193;
  char *v194;
  size_t v195;
  unint64_t v196;
  char v197;
  _QWORD v198[5];

  v198[2] = *MEMORY[0x24BDAC8D0];
  v191[0] = a2;
  v191[1] = a3;
  v6 = sub_22342DA5C(a1, (uint64_t)v191);
  if (!v6)
  {
    sub_223729BE0(&v183);
    if (**(int **)(v183 + 56) > 3
      || ((v14 = *(unsigned __int8 *)(v183 + 72),
           v15 = sub_22322F254(v183, "OSLogSurrogateAppender", 1, 0),
           v16 = v15,
           !v14)
        ? (v17 = v15 == 0)
        : (v17 = 0),
          v17))
    {
LABEL_273:
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)a4 = a4 + 8;
      return;
    }
    v174 = &v183;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v176 = std::chrono::system_clock::now().__d_.__rep_;
    v177 = 3;
    v178 = "unknown file";
    v179 = 194;
    v181 = 0;
    v182 = 0;
    v180 = "unknown function";
    sub_2245664AC((unsigned __int8 *)v191, __s);
    v18 = (const char *)(v183 + 16);
    v171 = v183;
    __src = (void *)(v183 + 16);
    if (*(char *)(v183 + 39) < 0)
    {
      v18 = *(const char **)(v183 + 16);
      v19 = *(_QWORD *)(v183 + 24);
      v40 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v40 & 1) != 0)
        goto LABEL_57;
    }
    else
    {
      v19 = *(unsigned __int8 *)(v183 + 39);
      v20 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v20 & 1) != 0)
        goto LABEL_57;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v192);
      sub_223199C58("com.apple.cv3d", (unint64_t)v192, &xmmword_255788F40);
      if ((_BYTE)v193 && (v192[23] & 0x80000000) != 0)
        operator delete(*(void **)v192);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_57:
    if (byte_255788F57 >= 0)
      v41 = (const char *)&xmmword_255788F40;
    else
      v41 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v42 = byte_255788F57;
    else
      v42 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)v192 = os_log_create(v41, v18);
    v43 = &v192[8];
    if (v42 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v42 >= 0x17)
    {
      v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v42 | 7) != 0x17)
        v44 = v42 | 7;
      v45 = v44 + 1;
      v43 = operator new(v44 + 1);
      *(_QWORD *)&v192[16] = v42;
      *(_QWORD *)&v193 = v45 | 0x8000000000000000;
      *(_QWORD *)&v192[8] = v43;
    }
    else
    {
      BYTE7(v193) = v42;
      if (!v42)
      {
LABEL_71:
        v43[v42] = 0;
        BYTE8(v193) = 1;
        v46 = (char *)&v194;
        if (v19 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v19 >= 0x17)
        {
          v47 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v47 = v19 | 7;
          v48 = v47 + 1;
          v46 = (char *)operator new(v47 + 1);
          v195 = v19;
          v196 = v48 | 0x8000000000000000;
          v194 = v46;
        }
        else
        {
          HIBYTE(v196) = v19;
          if (!v19)
          {
LABEL_79:
            v46[v19] = 0;
            v197 = 1;
            v49 = *(NSObject **)v192;
            if (SHIBYTE(v196) < 0)
              operator delete(v194);
            if (BYTE8(v193) && SBYTE7(v193) < 0)
              operator delete(*(void **)&v192[8]);
            if (*(_QWORD *)v192)
              os_release(*(void **)v192);
            if (!v16 || !*(_QWORD *)(v16 + 24))
            {
              os_log_type_enabled(v49, OS_LOG_TYPE_INFO);
              *(_QWORD *)v192 = 0xD04100202;
              *(_WORD *)&v192[8] = 2080;
              *(_QWORD *)&v192[10] = __s;
              v56 = (void *)_os_log_send_and_compose_impl();
              if (v56)
                free(v56);
              goto LABEL_266;
            }
            v50 = _os_log_pack_size();
            v51 = (std::__shared_weak_count_vtbl *)operator new(v50, (std::align_val_t)8uLL);
            v52 = (std::__shared_weak_count *)operator new();
            v52->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v52->__shared_owners_ = 0;
            v52->__shared_weak_owners_ = 0;
            v52[1].__vftable = v51;
            *(_QWORD *)&v184 = v51;
            *((_QWORD *)&v184 + 1) = v51;
            v186 = 0;
            v187 = 0;
            v185 = v52;
            v53 = strlen(__s);
            if (v53 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v54 = v53;
            if (v53 >= 0x17)
            {
              v121 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v53 | 7) != 0x17)
                v121 = v53 | 7;
              v122 = v121 + 1;
              p_dst = operator new(v121 + 1);
              *(_QWORD *)&v189 = v54;
              *((_QWORD *)&v189 + 1) = v122 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v189) = v53;
              p_dst = &__dst;
              if (!v53)
              {
LABEL_207:
                *((_BYTE *)p_dst + v54) = 0;
                v123 = __dst;
                v198[0] = v189;
                *(_QWORD *)((char *)v198 + 7) = *(_QWORD *)((char *)&v189 + 7);
                v124 = HIBYTE(v189);
                v125 = operator new(0x38uLL);
                v125[1] = 0;
                v125[2] = 0;
                v125[3] = off_24EC1FA48;
                *v125 = &off_24EC1F9F8;
                v126 = v198[0];
                v125[4] = v123;
                v125[5] = v126;
                *(_QWORD *)((char *)v125 + 47) = *(_QWORD *)((char *)v198 + 7);
                *((_BYTE *)v125 + 55) = v124;
                v198[0] = 0;
                *(_QWORD *)((char *)v198 + 7) = 0;
                v127 = v187;
                v186 = (char *)(v125 + 3);
                v187 = (std::__shared_weak_count *)v125;
                if (v127)
                {
                  p_shared_owners = (unint64_t *)&v127->__shared_owners_;
                  do
                    v129 = __ldaxr(p_shared_owners);
                  while (__stlxr(v129 - 1, p_shared_owners));
                  if (!v129)
                  {
                    ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                    std::__shared_weak_count::__release_weak(v127);
                  }
                }
                *(_OWORD *)v192 = v184;
                v130 = v186;
                *(_QWORD *)&v192[16] = v185;
                if (v185)
                {
                  v131 = (unint64_t *)&v185->__shared_owners_;
                  do
                    v132 = __ldxr(v131);
                  while (__stxr(v132 + 1, v131));
                }
                v133 = v187;
                *(_QWORD *)&v193 = v130;
                *((_QWORD *)&v193 + 1) = v187;
                if (v187)
                {
                  v134 = (unint64_t *)&v187->__shared_owners_;
                  do
                    v135 = __ldxr(v134);
                  while (__stxr(v135 + 1, v134));
                  v194 = v130;
                  do
                    v136 = __ldaxr(v134);
                  while (__stlxr(v136 - 1, v134));
                  if (!v136)
                  {
                    ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                    std::__shared_weak_count::__release_weak(v133);
                  }
                }
                else
                {
                  v194 = v130;
                }
                v137 = v185;
                if (v185)
                {
                  v138 = (unint64_t *)&v185->__shared_owners_;
                  do
                    v139 = __ldaxr(v138);
                  while (__stlxr(v139 - 1, v138));
                  if (!v139)
                  {
                    ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                    std::__shared_weak_count::__release_weak(v137);
                  }
                }
                v140 = *(_QWORD *)v192;
                if (v194[31] >= 0)
                  v141 = v194 + 8;
                else
                  v141 = (char *)*((_QWORD *)v194 + 1);
                v142 = _os_log_pack_fill();
                *(_DWORD *)v142 = 68157954;
                *(_DWORD *)(v142 + 4) = 13;
                *(_WORD *)(v142 + 8) = 2080;
                *(_QWORD *)(v142 + 10) = v141;
                v143 = operator new();
                v144 = *(unsigned __int8 *)(v171 + 39);
                v145 = __src;
                if ((v144 & 0x80u) != 0)
                {
                  v145 = *(void **)(v171 + 16);
                  v144 = *(_QWORD *)(v171 + 24);
                }
                *(_QWORD *)v143 = v140;
                *(_OWORD *)(v143 + 8) = *(_OWORD *)&v192[8];
                *(_QWORD *)&v192[8] = 0;
                *(_QWORD *)&v192[16] = 0;
                *(_OWORD *)(v143 + 24) = v193;
                v193 = 0uLL;
                *(_QWORD *)(v143 + 40) = v145;
                *(_QWORD *)(v143 + 48) = v144;
                *(_BYTE *)(v143 + 56) = 1;
                __dst = 0;
                *(_QWORD *)&v184 = v143;
                (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v16 + 24) + 40))(*(_QWORD *)(v16 + 24), &v184);
                v146 = v184;
                *(_QWORD *)&v184 = 0;
                if (v146)
                {
                  v147 = *(std::__shared_weak_count **)(v146 + 32);
                  if (v147)
                  {
                    v148 = (unint64_t *)&v147->__shared_owners_;
                    do
                      v149 = __ldaxr(v148);
                    while (__stlxr(v149 - 1, v148));
                    if (!v149)
                    {
                      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                      std::__shared_weak_count::__release_weak(v147);
                    }
                  }
                  v150 = *(std::__shared_weak_count **)(v146 + 16);
                  if (v150)
                  {
                    v151 = (unint64_t *)&v150->__shared_owners_;
                    do
                      v152 = __ldaxr(v151);
                    while (__stlxr(v152 - 1, v151));
                    if (!v152)
                    {
                      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                      std::__shared_weak_count::__release_weak(v150);
                    }
                  }
                  MEMORY[0x227684CE8](v146, 0x10F0C40B62ED6C6);
                  v153 = __dst;
                  __dst = 0;
                  if (v153)
                  {
                    v154 = (std::__shared_weak_count *)v153[4];
                    if (v154)
                    {
                      v155 = (unint64_t *)&v154->__shared_owners_;
                      do
                        v156 = __ldaxr(v155);
                      while (__stlxr(v156 - 1, v155));
                      if (!v156)
                      {
                        ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                        std::__shared_weak_count::__release_weak(v154);
                      }
                    }
                    v157 = (std::__shared_weak_count *)v153[2];
                    if (v157)
                    {
                      v158 = (unint64_t *)&v157->__shared_owners_;
                      do
                        v159 = __ldaxr(v158);
                      while (__stlxr(v159 - 1, v158));
                      if (!v159)
                      {
                        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                        std::__shared_weak_count::__release_weak(v157);
                      }
                    }
                    MEMORY[0x227684CE8](v153, 0x10F0C40B62ED6C6);
                  }
                }
                v160 = (std::__shared_weak_count *)*((_QWORD *)&v193 + 1);
                if (*((_QWORD *)&v193 + 1))
                {
                  v161 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
                  do
                    v162 = __ldaxr(v161);
                  while (__stlxr(v162 - 1, v161));
                  if (!v162)
                  {
                    ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                    std::__shared_weak_count::__release_weak(v160);
                  }
                }
                v163 = *(std::__shared_weak_count **)&v192[16];
                if (*(_QWORD *)&v192[16])
                {
                  v164 = (unint64_t *)(*(_QWORD *)&v192[16] + 8);
                  do
                    v165 = __ldaxr(v164);
                  while (__stlxr(v165 - 1, v164));
                  if (!v165)
                  {
                    ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                    std::__shared_weak_count::__release_weak(v163);
                  }
                }
LABEL_266:
                if (v14)
                {
                  sub_2245664AC((unsigned __int8 *)v191, v192);
                  sub_22322C138((uint64_t)&v174, "KeyframePlaneStorage: Cannot remove global plane %.13s from memory because it doesn't exist", v192);
                  sub_223182C08((uint64_t)&v174);
                }
                sub_223182C08((uint64_t)&v174);
                v166 = v182;
                if (v182)
                {
                  v167 = (unint64_t *)&v182->__shared_owners_;
                  do
                    v168 = __ldaxr(v167);
                  while (__stlxr(v168 - 1, v167));
                  if (!v168)
                  {
                    ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                    std::__shared_weak_count::__release_weak(v166);
                  }
                }
                goto LABEL_273;
              }
            }
            memcpy(p_dst, __s, v54);
            goto LABEL_207;
          }
        }
        memmove(v46, v18, v19);
        goto LABEL_79;
      }
    }
    memmove(v43, v41, v42);
    goto LABEL_71;
  }
  sub_223729BE0(&v183);
  if (**(int **)(v183 + 56) <= 3)
  {
    v7 = *(unsigned __int8 *)(v183 + 72);
    v8 = sub_22322F254(v183, "OSLogSurrogateAppender", 1, 0);
    v9 = v8;
    if (v7 || v8 != 0)
    {
      v174 = &v183;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v176 = std::chrono::system_clock::now().__d_.__rep_;
      v177 = 3;
      v178 = "unknown file";
      v179 = 199;
      v181 = 0;
      v182 = 0;
      v180 = "unknown function";
      sub_2245664AC((unsigned __int8 *)v191, __s);
      v170 = v183;
      if (*(char *)(v183 + 39) < 0)
      {
        v12 = *(const char **)(v183 + 16);
        v11 = *(_QWORD *)(v183 + 24);
        v169 = v183 + 16;
        v21 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v21 & 1) != 0)
          goto LABEL_19;
      }
      else
      {
        v11 = *(unsigned __int8 *)(v183 + 39);
        v12 = (const char *)(v183 + 16);
        v169 = v183 + 16;
        v13 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v13 & 1) != 0)
          goto LABEL_19;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v192);
        sub_223199C58("com.apple.cv3d", (unint64_t)v192, &xmmword_255788F40);
        if ((_BYTE)v193 && (v192[23] & 0x80000000) != 0)
          operator delete(*(void **)v192);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_19:
      if (byte_255788F57 >= 0)
        v22 = (const char *)&xmmword_255788F40;
      else
        v22 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v23 = byte_255788F57;
      else
        v23 = *((_QWORD *)&xmmword_255788F40 + 1);
      __srca = v12;
      *(_QWORD *)v192 = os_log_create(v22, v12);
      v24 = &v192[8];
      if (v23 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v23 >= 0x17)
      {
        v25 = v9;
        v26 = v7;
        v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v23 | 7) != 0x17)
          v27 = v23 | 7;
        v28 = v27 + 1;
        v24 = operator new(v27 + 1);
        *(_QWORD *)&v192[16] = v23;
        *(_QWORD *)&v193 = v28 | 0x8000000000000000;
        *(_QWORD *)&v192[8] = v24;
        v7 = v26;
        v9 = v25;
      }
      else
      {
        BYTE7(v193) = v23;
        if (!v23)
        {
LABEL_33:
          v24[v23] = 0;
          BYTE8(v193) = 1;
          v29 = (char *)&v194;
          if (v11 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v11 >= 0x17)
          {
            v30 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v11 | 7) != 0x17)
              v30 = v11 | 7;
            v31 = v30 + 1;
            v29 = (char *)operator new(v30 + 1);
            v195 = v11;
            v196 = v31 | 0x8000000000000000;
            v194 = v29;
          }
          else
          {
            HIBYTE(v196) = v11;
            if (!v11)
            {
LABEL_41:
              v29[v11] = 0;
              v197 = 1;
              v32 = *(NSObject **)v192;
              if (SHIBYTE(v196) < 0)
                operator delete(v194);
              if (BYTE8(v193) && SBYTE7(v193) < 0)
                operator delete(*(void **)&v192[8]);
              if (*(_QWORD *)v192)
                os_release(*(void **)v192);
              if (!v9 || !*(_QWORD *)(v9 + 24))
              {
                os_log_type_enabled(v32, OS_LOG_TYPE_INFO);
                *(_QWORD *)v192 = 0xD04100202;
                *(_WORD *)&v192[8] = 2080;
                *(_QWORD *)&v192[10] = __s;
                v39 = (void *)_os_log_send_and_compose_impl();
                if (v39)
                  free(v39);
                goto LABEL_157;
              }
              v33 = _os_log_pack_size();
              v34 = (std::__shared_weak_count_vtbl *)operator new(v33, (std::align_val_t)8uLL);
              v35 = (std::__shared_weak_count *)operator new();
              v35->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v35->__shared_owners_ = 0;
              v35->__shared_weak_owners_ = 0;
              v35[1].__vftable = v34;
              *(_QWORD *)&v184 = v34;
              *((_QWORD *)&v184 + 1) = v34;
              v186 = 0;
              v187 = 0;
              v185 = v35;
              v36 = strlen(__s);
              if (v36 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v37 = v36;
              if (v36 >= 0x17)
              {
                v57 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v36 | 7) != 0x17)
                  v57 = v36 | 7;
                v58 = v57 + 1;
                v38 = operator new(v57 + 1);
                *(_QWORD *)&v189 = v37;
                *((_QWORD *)&v189 + 1) = v58 | 0x8000000000000000;
                __dst = v38;
              }
              else
              {
                HIBYTE(v189) = v36;
                v38 = &__dst;
                if (!v36)
                {
LABEL_98:
                  *((_BYTE *)v38 + v37) = 0;
                  v59 = __dst;
                  v198[0] = v189;
                  *(_QWORD *)((char *)v198 + 7) = *(_QWORD *)((char *)&v189 + 7);
                  v60 = HIBYTE(v189);
                  v61 = operator new(0x38uLL);
                  v61[1] = 0;
                  v61[2] = 0;
                  v61[3] = off_24EC1FA48;
                  *v61 = &off_24EC1F9F8;
                  v62 = v198[0];
                  v61[4] = v59;
                  v61[5] = v62;
                  *(_QWORD *)((char *)v61 + 47) = *(_QWORD *)((char *)v198 + 7);
                  *((_BYTE *)v61 + 55) = v60;
                  v198[0] = 0;
                  *(_QWORD *)((char *)v198 + 7) = 0;
                  v63 = v187;
                  v186 = (char *)(v61 + 3);
                  v187 = (std::__shared_weak_count *)v61;
                  if (v63)
                  {
                    v64 = (unint64_t *)&v63->__shared_owners_;
                    do
                      v65 = __ldaxr(v64);
                    while (__stlxr(v65 - 1, v64));
                    if (!v65)
                    {
                      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                      std::__shared_weak_count::__release_weak(v63);
                    }
                  }
                  *(_OWORD *)v192 = v184;
                  v66 = v186;
                  *(_QWORD *)&v192[16] = v185;
                  if (v185)
                  {
                    v67 = (unint64_t *)&v185->__shared_owners_;
                    do
                      v68 = __ldxr(v67);
                    while (__stxr(v68 + 1, v67));
                  }
                  v69 = v187;
                  *(_QWORD *)&v193 = v66;
                  *((_QWORD *)&v193 + 1) = v187;
                  if (v187)
                  {
                    v70 = (unint64_t *)&v187->__shared_owners_;
                    do
                      v71 = __ldxr(v70);
                    while (__stxr(v71 + 1, v70));
                    v194 = v66;
                    do
                      v72 = __ldaxr(v70);
                    while (__stlxr(v72 - 1, v70));
                    if (!v72)
                    {
                      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                      std::__shared_weak_count::__release_weak(v69);
                    }
                  }
                  else
                  {
                    v194 = v66;
                  }
                  v73 = v185;
                  if (v185)
                  {
                    v74 = (unint64_t *)&v185->__shared_owners_;
                    do
                      v75 = __ldaxr(v74);
                    while (__stlxr(v75 - 1, v74));
                    if (!v75)
                    {
                      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                      std::__shared_weak_count::__release_weak(v73);
                    }
                  }
                  v76 = *(_QWORD *)v192;
                  if (v194[31] >= 0)
                    v77 = v194 + 8;
                  else
                    v77 = (char *)*((_QWORD *)v194 + 1);
                  v78 = _os_log_pack_fill();
                  *(_DWORD *)v78 = 68157954;
                  *(_DWORD *)(v78 + 4) = 13;
                  *(_WORD *)(v78 + 8) = 2080;
                  *(_QWORD *)(v78 + 10) = v77;
                  v79 = operator new();
                  v80 = *(unsigned __int8 *)(v170 + 39);
                  v81 = v169;
                  if ((v80 & 0x80u) != 0)
                  {
                    v81 = *(_QWORD *)(v170 + 16);
                    v80 = *(_QWORD *)(v170 + 24);
                  }
                  *(_QWORD *)v79 = v76;
                  *(_OWORD *)(v79 + 8) = *(_OWORD *)&v192[8];
                  *(_QWORD *)&v192[8] = 0;
                  *(_QWORD *)&v192[16] = 0;
                  *(_OWORD *)(v79 + 24) = v193;
                  v193 = 0uLL;
                  *(_QWORD *)(v79 + 40) = v81;
                  *(_QWORD *)(v79 + 48) = v80;
                  *(_BYTE *)(v79 + 56) = 1;
                  __dst = 0;
                  *(_QWORD *)&v184 = v79;
                  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), &v184);
                  v82 = v184;
                  *(_QWORD *)&v184 = 0;
                  if (v82)
                  {
                    v83 = *(std::__shared_weak_count **)(v82 + 32);
                    if (v83)
                    {
                      v84 = (unint64_t *)&v83->__shared_owners_;
                      do
                        v85 = __ldaxr(v84);
                      while (__stlxr(v85 - 1, v84));
                      if (!v85)
                      {
                        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                        std::__shared_weak_count::__release_weak(v83);
                      }
                    }
                    v86 = *(std::__shared_weak_count **)(v82 + 16);
                    if (v86)
                    {
                      v87 = (unint64_t *)&v86->__shared_owners_;
                      do
                        v88 = __ldaxr(v87);
                      while (__stlxr(v88 - 1, v87));
                      if (!v88)
                      {
                        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                        std::__shared_weak_count::__release_weak(v86);
                      }
                    }
                    MEMORY[0x227684CE8](v82, 0x10F0C40B62ED6C6);
                    v89 = __dst;
                    __dst = 0;
                    if (v89)
                    {
                      v90 = (std::__shared_weak_count *)v89[4];
                      if (v90)
                      {
                        v91 = (unint64_t *)&v90->__shared_owners_;
                        do
                          v92 = __ldaxr(v91);
                        while (__stlxr(v92 - 1, v91));
                        if (!v92)
                        {
                          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                          std::__shared_weak_count::__release_weak(v90);
                        }
                      }
                      v93 = (std::__shared_weak_count *)v89[2];
                      if (v93)
                      {
                        v94 = (unint64_t *)&v93->__shared_owners_;
                        do
                          v95 = __ldaxr(v94);
                        while (__stlxr(v95 - 1, v94));
                        if (!v95)
                        {
                          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                          std::__shared_weak_count::__release_weak(v93);
                        }
                      }
                      MEMORY[0x227684CE8](v89, 0x10F0C40B62ED6C6);
                    }
                  }
                  v96 = (std::__shared_weak_count *)*((_QWORD *)&v193 + 1);
                  if (*((_QWORD *)&v193 + 1))
                  {
                    v97 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
                    do
                      v98 = __ldaxr(v97);
                    while (__stlxr(v98 - 1, v97));
                    if (!v98)
                    {
                      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                      std::__shared_weak_count::__release_weak(v96);
                    }
                  }
                  v99 = *(std::__shared_weak_count **)&v192[16];
                  if (*(_QWORD *)&v192[16])
                  {
                    v100 = (unint64_t *)(*(_QWORD *)&v192[16] + 8);
                    do
                      v101 = __ldaxr(v100);
                    while (__stlxr(v101 - 1, v100));
                    if (!v101)
                    {
                      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                      std::__shared_weak_count::__release_weak(v99);
                    }
                  }
LABEL_157:
                  if (v7)
                  {
                    sub_2245664AC((unsigned __int8 *)v191, v192);
                    sub_22322C138((uint64_t)&v174, "KeyframePlaneStorage: Removing KeyframePlaneSegmentation %.13s", v192);
                    sub_223182C08((uint64_t)&v174);
                  }
                  sub_223182C08((uint64_t)&v174);
                  v102 = v182;
                  if (v182)
                  {
                    v103 = (unint64_t *)&v182->__shared_owners_;
                    do
                      v104 = __ldaxr(v103);
                    while (__stlxr(v104 - 1, v103));
                    if (!v104)
                    {
                      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                      std::__shared_weak_count::__release_weak(v102);
                    }
                  }
                  goto LABEL_164;
                }
              }
              memcpy(v38, __s, v37);
              goto LABEL_98;
            }
          }
          memmove(v29, __srca, v11);
          goto LABEL_41;
        }
      }
      memmove(v24, v22, v23);
      goto LABEL_33;
    }
  }
LABEL_164:
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = a4 + 8;
  v105 = v6[4];
  v106 = *(unsigned __int8 **)(v105 + 208);
  v107 = *(unsigned __int8 **)(v105 + 216);
  while (v106 != v107)
  {
    sub_22372C314((uint64_t)a1, v106, (uint64_t)v192);
    if (BYTE8(v193))
      sub_2231A9984((uint64_t **)a4, *(unsigned __int8 **)&v192[16], *(_OWORD **)&v192[16]);
    v106 += 424;
  }
  v108 = (int8x8_t)a1[1];
  v109 = v6[1];
  v110 = (uint8x8_t)vcnt_s8(v108);
  v110.i16[0] = vaddlv_u8(v110);
  if (v110.u32[0] > 1uLL)
  {
    if (v109 >= *(_QWORD *)&v108)
      v109 %= *(_QWORD *)&v108;
  }
  else
  {
    v109 &= *(_QWORD *)&v108 - 1;
  }
  v111 = *(_QWORD **)(*a1 + 8 * v109);
  do
  {
    v112 = v111;
    v111 = (_QWORD *)*v111;
  }
  while (v111 != v6);
  if (v112 == a1 + 2)
    goto LABEL_186;
  v113 = v112[1];
  if (v110.u32[0] > 1uLL)
  {
    if (v113 >= *(_QWORD *)&v108)
      v113 %= *(_QWORD *)&v108;
  }
  else
  {
    v113 &= *(_QWORD *)&v108 - 1;
  }
  if (v113 != v109)
  {
LABEL_186:
    if (!*v6)
      goto LABEL_187;
    v114 = *(_QWORD *)(*v6 + 8);
    if (v110.u32[0] > 1uLL)
    {
      if (v114 >= *(_QWORD *)&v108)
        v114 %= *(_QWORD *)&v108;
    }
    else
    {
      v114 &= *(_QWORD *)&v108 - 1;
    }
    if (v114 != v109)
LABEL_187:
      *(_QWORD *)(*a1 + 8 * v109) = 0;
  }
  v115 = *v6;
  if (*v6)
  {
    v116 = *(_QWORD *)(v115 + 8);
    if (v110.u32[0] > 1uLL)
    {
      if (v116 >= *(_QWORD *)&v108)
        v116 %= *(_QWORD *)&v108;
    }
    else
    {
      v116 &= *(_QWORD *)&v108 - 1;
    }
    if (v116 != v109)
    {
      *(_QWORD *)(*a1 + 8 * v116) = v112;
      v115 = *v6;
    }
  }
  *v112 = v115;
  *v6 = 0;
  --a1[3];
  v117 = (_QWORD *)v6[4];
  v6[4] = 0;
  if (v117)
  {
    v118 = v117[26];
    if (v118)
    {
      v119 = v117[27];
      v120 = (void *)v117[26];
      if (v119 != v118)
      {
        do
        {
          v119 -= 424;
          sub_2236EA79C(v119);
        }
        while (v119 != v118);
        v120 = (void *)v117[26];
      }
      v117[27] = v118;
      operator delete(v120);
    }
    v117[6] = &off_24EC20828;
    MEMORY[0x227684CE8](v117, 0x10A0C4047C2BC0BLL);
  }
  operator delete(v6);
}

void sub_22372C0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  if (*(_BYTE *)(v7 - 168))
  {
    if (*(char *)(v7 - 169) < 0)
      operator delete(*(void **)(v7 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22372C0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  sub_22319A054(&a25);
  sub_22319A054(&a31);
  sub_223199DE8(v31 - 192);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_22372C180()
{
  int v0;

  if (v0 < 0)
    JUMPOUT(0x22372C18CLL);
  JUMPOUT(0x22372C1D8);
}

void sub_22372C1A8()
{
  JUMPOUT(0x22372C1B0);
}

void sub_22372C1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22372C20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22372C220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22372C234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  void *v9;
  va_list va;

  va_start(va, a7);
  if (*(_BYTE *)(v7 - 160) && *(char *)(v7 - 161) < 0)
    operator delete(*(void **)(v7 - 184));
  v9 = *(void **)(v7 - 192);
  if (v9)
    os_release(v9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22372C2DC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_22372C2EC()
{
  JUMPOUT(0x22372C2F4);
}

void sub_22372C2FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223198030(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_22372C314(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  int v9;
  unint64_t v10;
  const char *v12;
  size_t v13;
  unsigned __int8 v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  const char *v20;
  size_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  const char *v24;
  size_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  size_t v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  char *v38;
  std::__shared_weak_count *v39;
  size_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  __int128 v81;
  unsigned __int8 v82;
  const char *v83;
  size_t v84;
  _BYTE *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  size_t v93;
  void *v94;
  _QWORD *v95;
  size_t v96;
  size_t v97;
  _QWORD *p_dst;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  char v103;
  _QWORD *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *p_shared_owners;
  unint64_t v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  _QWORD *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  unint64_t v153;
  uint64_t v154;
  const char *v156;
  void *v157;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v159;
  int v160;
  const char *v161;
  int v162;
  const char *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  uint64_t v166;
  _BYTE v167[30];
  _QWORD *__dst;
  __int128 v169;
  _BYTE object[48];
  size_t v171;
  unint64_t v172;
  char v173;
  _BYTE v174[24];
  __int128 v175;
  char *v176;
  char __s[8];
  std::__shared_weak_count_vtbl *v178;
  std::__shared_weak_count *v179;
  char *v180;
  char *v181;
  uint64_t v182;

  v182 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a1 + 80);
  v5 = sub_22342DA5C((_QWORD *)(a1 + 80), (uint64_t)a2);
  if (!v5)
  {
    sub_223729BE0(&v166);
    if (**(int **)(v166 + 56) > 3
      || ((v15 = *(unsigned __int8 *)(v166 + 72),
           v16 = sub_22322F254(v166, "OSLogSurrogateAppender", 1, 0),
           v17 = v16,
           !v15)
        ? (v18 = v16 == 0)
        : (v18 = 0),
          v18))
    {
LABEL_227:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 32) = 0;
      return;
    }
    v157 = &v166;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v159 = std::chrono::system_clock::now().__d_.__rep_;
    v160 = 3;
    v161 = "unknown file";
    v162 = 440;
    v164 = 0;
    v165 = 0;
    v163 = "unknown function";
    sub_2245664AC(a2, __s);
    v19 = v166;
    v20 = (const char *)(v166 + 16);
    v154 = v166 + 16;
    if (*(char *)(v166 + 39) < 0)
    {
      v20 = *(const char **)(v166 + 16);
      v21 = *(_QWORD *)(v166 + 24);
      v82 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v82 & 1) != 0)
        goto LABEL_119;
    }
    else
    {
      v21 = *(unsigned __int8 *)(v166 + 39);
      v22 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v22 & 1) != 0)
        goto LABEL_119;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_119:
    if (byte_255788F57 >= 0)
      v83 = (const char *)&xmmword_255788F40;
    else
      v83 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v84 = byte_255788F57;
    else
      v84 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)object = os_log_create(v83, v20);
    v85 = &object[8];
    if (v84 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v84 >= 0x17)
    {
      v86 = v15;
      v87 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v84 | 7) != 0x17)
        v87 = v84 | 7;
      v88 = v87 + 1;
      v85 = operator new(v87 + 1);
      *(_QWORD *)&object[16] = v84;
      *(_QWORD *)&object[24] = v88 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v85;
      v15 = v86;
    }
    else
    {
      object[31] = v84;
      if (!v84)
      {
LABEL_133:
        v85[v84] = 0;
        object[32] = 1;
        v89 = &object[40];
        if (v21 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v21 >= 0x17)
        {
          v90 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v21 | 7) != 0x17)
            v90 = v21 | 7;
          v91 = v90 + 1;
          v89 = operator new(v90 + 1);
          v171 = v21;
          v172 = v91 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v89;
        }
        else
        {
          HIBYTE(v172) = v21;
          if (!v21)
          {
LABEL_141:
            v89[v21] = 0;
            v173 = 1;
            v92 = *(NSObject **)object;
            if (SHIBYTE(v172) < 0)
              operator delete(*(void **)&object[40]);
            if (object[32] && (object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (!v17 || !*(_QWORD *)(v17 + 24))
            {
              os_log_type_enabled(v92, OS_LOG_TYPE_INFO);
              *(_QWORD *)object = 0xD04100202;
              *(_WORD *)&object[8] = 2080;
              *(_QWORD *)&object[10] = __s;
              v99 = (void *)_os_log_send_and_compose_impl();
              if (v99)
                free(v99);
              goto LABEL_220;
            }
            v93 = _os_log_pack_size();
            v94 = operator new(v93, (std::align_val_t)8uLL);
            v95 = (_QWORD *)operator new();
            *v95 = &off_24EC1F7F0;
            v95[1] = 0;
            v95[2] = 0;
            v95[3] = v94;
            *(_QWORD *)v174 = v94;
            *(_QWORD *)&v174[8] = v94;
            v175 = 0uLL;
            *(_QWORD *)&v174[16] = v95;
            v96 = strlen(__s);
            if (v96 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v97 = v96;
            if (v96 >= 0x17)
            {
              v100 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v96 | 7) != 0x17)
                v100 = v96 | 7;
              v101 = v100 + 1;
              p_dst = operator new(v100 + 1);
              *(_QWORD *)&v169 = v97;
              *((_QWORD *)&v169 + 1) = v101 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v169) = v96;
              p_dst = &__dst;
              if (!v96)
              {
LABEL_160:
                *((_BYTE *)p_dst + v97) = 0;
                v102 = __dst;
                *(_QWORD *)v167 = v169;
                *(_QWORD *)&v167[7] = *(_QWORD *)((char *)&v169 + 7);
                v103 = HIBYTE(v169);
                v104 = operator new(0x38uLL);
                v104[1] = 0;
                v104[2] = 0;
                v104[3] = off_24EC1FA48;
                *v104 = &off_24EC1F9F8;
                v105 = *(_QWORD *)v167;
                v104[4] = v102;
                v104[5] = v105;
                *(_QWORD *)((char *)v104 + 47) = *(_QWORD *)&v167[7];
                *((_BYTE *)v104 + 55) = v103;
                *(_QWORD *)v167 = 0;
                *(_QWORD *)&v167[7] = 0;
                v106 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
                *(_QWORD *)&v175 = v104 + 3;
                *((_QWORD *)&v175 + 1) = v104;
                if (v106)
                {
                  p_shared_owners = (unint64_t *)&v106->__shared_owners_;
                  do
                    v108 = __ldaxr(p_shared_owners);
                  while (__stlxr(v108 - 1, p_shared_owners));
                  if (!v108)
                  {
                    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                    std::__shared_weak_count::__release_weak(v106);
                  }
                }
                *(_OWORD *)object = *(_OWORD *)v174;
                v109 = v175;
                *(_QWORD *)&object[16] = *(_QWORD *)&v174[16];
                if (*(_QWORD *)&v174[16])
                {
                  v110 = (unint64_t *)(*(_QWORD *)&v174[16] + 8);
                  do
                    v111 = __ldxr(v110);
                  while (__stxr(v111 + 1, v110));
                }
                v112 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
                *(_QWORD *)&object[24] = v109;
                *(_QWORD *)&object[32] = *((_QWORD *)&v175 + 1);
                if (*((_QWORD *)&v175 + 1))
                {
                  v113 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
                  do
                    v114 = __ldxr(v113);
                  while (__stxr(v114 + 1, v113));
                  *(_QWORD *)&object[40] = v109;
                  do
                    v115 = __ldaxr(v113);
                  while (__stlxr(v115 - 1, v113));
                  if (!v115)
                  {
                    ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                    std::__shared_weak_count::__release_weak(v112);
                  }
                }
                else
                {
                  *(_QWORD *)&object[40] = v109;
                }
                v116 = *(std::__shared_weak_count **)&v174[16];
                if (*(_QWORD *)&v174[16])
                {
                  v117 = (unint64_t *)(*(_QWORD *)&v174[16] + 8);
                  do
                    v118 = __ldaxr(v117);
                  while (__stlxr(v118 - 1, v117));
                  if (!v118)
                  {
                    ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                    std::__shared_weak_count::__release_weak(v116);
                  }
                }
                v119 = *(_QWORD *)object;
                if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
                  v120 = *(_QWORD *)&object[40] + 8;
                else
                  v120 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
                v121 = _os_log_pack_fill();
                *(_DWORD *)v121 = 68157954;
                *(_DWORD *)(v121 + 4) = 13;
                *(_WORD *)(v121 + 8) = 2080;
                *(_QWORD *)(v121 + 10) = v120;
                v122 = operator new();
                v123 = *(unsigned __int8 *)(v19 + 39);
                v124 = *(_QWORD *)(v19 + 16);
                v125 = *(_QWORD *)(v19 + 24);
                v126 = *(_OWORD *)&object[24];
                *(_OWORD *)(v122 + 8) = *(_OWORD *)&object[8];
                if ((v123 & 0x80u) != 0)
                  v123 = v125;
                else
                  v124 = v154;
                *(_QWORD *)v122 = v119;
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                *(_OWORD *)(v122 + 24) = v126;
                *(_QWORD *)&object[24] = 0;
                *(_QWORD *)&object[32] = 0;
                *(_QWORD *)(v122 + 40) = v124;
                *(_QWORD *)(v122 + 48) = v123;
                *(_BYTE *)(v122 + 56) = 1;
                __dst = 0;
                *(_QWORD *)v174 = v122;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v17 + 24) + 40))(*(_QWORD *)(v17 + 24), v174);
                v127 = *(_QWORD *)v174;
                *(_QWORD *)v174 = 0;
                if (v127)
                {
                  v128 = *(std::__shared_weak_count **)(v127 + 32);
                  if (v128)
                  {
                    v129 = (unint64_t *)&v128->__shared_owners_;
                    do
                      v130 = __ldaxr(v129);
                    while (__stlxr(v130 - 1, v129));
                    if (!v130)
                    {
                      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                      std::__shared_weak_count::__release_weak(v128);
                    }
                  }
                  v131 = *(std::__shared_weak_count **)(v127 + 16);
                  if (v131)
                  {
                    v132 = (unint64_t *)&v131->__shared_owners_;
                    do
                      v133 = __ldaxr(v132);
                    while (__stlxr(v133 - 1, v132));
                    if (!v133)
                    {
                      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                      std::__shared_weak_count::__release_weak(v131);
                    }
                  }
                  MEMORY[0x227684CE8](v127, 0x10F0C40B62ED6C6);
                  v134 = __dst;
                  __dst = 0;
                  if (v134)
                  {
                    v135 = (std::__shared_weak_count *)v134[4];
                    if (v135)
                    {
                      v136 = (unint64_t *)&v135->__shared_owners_;
                      do
                        v137 = __ldaxr(v136);
                      while (__stlxr(v137 - 1, v136));
                      if (!v137)
                      {
                        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                        std::__shared_weak_count::__release_weak(v135);
                      }
                    }
                    v138 = (std::__shared_weak_count *)v134[2];
                    if (v138)
                    {
                      v139 = (unint64_t *)&v138->__shared_owners_;
                      do
                        v140 = __ldaxr(v139);
                      while (__stlxr(v140 - 1, v139));
                      if (!v140)
                      {
                        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                        std::__shared_weak_count::__release_weak(v138);
                      }
                    }
                    MEMORY[0x227684CE8](v134, 0x10F0C40B62ED6C6);
                  }
                }
                v141 = *(std::__shared_weak_count **)&object[32];
                if (*(_QWORD *)&object[32])
                {
                  v142 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                  do
                    v143 = __ldaxr(v142);
                  while (__stlxr(v143 - 1, v142));
                  if (!v143)
                  {
                    ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                    std::__shared_weak_count::__release_weak(v141);
                  }
                }
                v144 = *(std::__shared_weak_count **)&object[16];
                if (*(_QWORD *)&object[16])
                {
                  v145 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                  do
                    v146 = __ldaxr(v145);
                  while (__stlxr(v146 - 1, v145));
                  if (!v146)
                  {
                    ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                    std::__shared_weak_count::__release_weak(v144);
                  }
                }
LABEL_220:
                if (v15)
                {
                  sub_2245664AC(a2, object);
                  sub_22322C138((uint64_t)&v157, "KeyframePlaneStorage: Cannot erase link %.13s. Link doesn't exist.", object);
                  sub_223182C08((uint64_t)&v157);
                }
                sub_223182C08((uint64_t)&v157);
                v147 = v165;
                if (v165)
                {
                  v148 = (unint64_t *)&v165->__shared_owners_;
                  do
                    v149 = __ldaxr(v148);
                  while (__stlxr(v149 - 1, v148));
                  if (!v149)
                  {
                    ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                    std::__shared_weak_count::__release_weak(v147);
                  }
                }
                goto LABEL_227;
              }
            }
            memcpy(p_dst, __s, v97);
            goto LABEL_160;
          }
        }
        memmove(v89, v20, v21);
        goto LABEL_141;
      }
    }
    memmove(v85, v83, v84);
    goto LABEL_133;
  }
  v6 = v5;
  v7 = (unsigned __int8 **)(v5 + 4);
  sub_2236A10AC(v5[4], (uint64_t)a2);
  sub_223729BE0(&v166);
  v8 = (unsigned __int8 *)(v7 - 2);
  if (**(int **)(v166 + 56) <= 3)
  {
    v9 = *(unsigned __int8 *)(v166 + 72);
    v10 = sub_22322F254(v166, "OSLogSurrogateAppender", 1, 0);
    if (v9 || v10 != 0)
    {
      v153 = v10;
      v157 = &v166;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v159 = std::chrono::system_clock::now().__d_.__rep_;
      v160 = 3;
      v161 = "unknown file";
      v162 = 449;
      v164 = 0;
      v165 = 0;
      v163 = "unknown function";
      sub_2245664AC((unsigned __int8 *)v7 - 16, &__dst);
      sub_2245664AC(*v7, v167);
      v156 = v167;
      v12 = (const char *)(v166 + 16);
      v150 = v166;
      v151 = v166 + 16;
      if (*(char *)(v166 + 39) < 0)
      {
        v12 = *(const char **)(v166 + 16);
        v13 = *(_QWORD *)(v166 + 24);
        v152 = v9;
        v23 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v23 & 1) != 0)
          goto LABEL_19;
      }
      else
      {
        v13 = *(unsigned __int8 *)(v166 + 39);
        v152 = v9;
        v14 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v14 & 1) != 0)
          goto LABEL_19;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_19:
      if (byte_255788F57 >= 0)
        v24 = (const char *)&xmmword_255788F40;
      else
        v24 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v25 = byte_255788F57;
      else
        v25 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v24, v12);
      v26 = &object[8];
      if (v25 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v25 >= 0x17)
      {
        v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v25 | 7) != 0x17)
          v27 = v25 | 7;
        v28 = v27 + 1;
        v26 = operator new(v27 + 1);
        *(_QWORD *)&object[16] = v25;
        *(_QWORD *)&object[24] = v28 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v26;
      }
      else
      {
        object[31] = v25;
        if (!v25)
        {
LABEL_33:
          v26[v25] = 0;
          object[32] = 1;
          v29 = &object[40];
          if (v13 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v30 = v152;
          if (v13 >= 0x17)
          {
            v31 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v13 | 7) != 0x17)
              v31 = v13 | 7;
            v32 = v31 + 1;
            v29 = operator new(v31 + 1);
            v171 = v13;
            v172 = v32 | 0x8000000000000000;
            *(_QWORD *)&object[40] = v29;
          }
          else
          {
            HIBYTE(v172) = v13;
            if (!v13)
              goto LABEL_41;
          }
          memmove(v29, v12, v13);
LABEL_41:
          v29[v13] = 0;
          v173 = 1;
          v33 = *(NSObject **)object;
          if (SHIBYTE(v172) < 0)
            operator delete(*(void **)&object[40]);
          if (object[32] && (object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v153 && *(_QWORD *)(v153 + 24))
          {
            v34 = _os_log_pack_size();
            v35 = (std::__shared_weak_count_vtbl *)operator new(v34, (std::align_val_t)8uLL);
            v36 = (std::__shared_weak_count *)operator new();
            v36->__shared_owners_ = 0;
            v37 = (unint64_t *)&v36->__shared_owners_;
            v36->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v36->__shared_weak_owners_ = 0;
            v36[1].__vftable = v35;
            *(_QWORD *)__s = v35;
            v178 = v35;
            v180 = 0;
            v181 = 0;
            v179 = v36;
            sub_223738130((uint64_t)object, (char *)&__dst, &v156);
            v38 = (char *)operator new(0x50uLL);
            v39 = (std::__shared_weak_count *)v38;
            *(_QWORD *)v38 = &off_24EC20730;
            *((_QWORD *)v38 + 3) = off_24EC20780;
            v40 = v171;
            *((_QWORD *)v38 + 6) = *(_QWORD *)&object[24];
            *((_QWORD *)v38 + 1) = 0;
            v41 = (unint64_t *)(v38 + 8);
            *((_QWORD *)v38 + 2) = 0;
            *((_OWORD *)v38 + 2) = *(_OWORD *)&object[8];
            *(_OWORD *)(v38 + 56) = *(_OWORD *)&object[32];
            *((_QWORD *)v38 + 9) = v40;
            v180 = v38 + 24;
            v181 = v38;
            *(_QWORD *)v174 = v35;
            *(_QWORD *)&v174[8] = v35;
            *(_QWORD *)&v174[16] = v36;
            do
              v42 = __ldxr(v37);
            while (__stxr(v42 + 1, v37));
            *(_QWORD *)&v175 = v38 + 24;
            *((_QWORD *)&v175 + 1) = v38;
            do
              v43 = __ldxr(v41);
            while (__stxr(v43 + 1, v41));
            v176 = v38 + 24;
            do
              v44 = __ldaxr(v41);
            while (__stlxr(v44 - 1, v41));
            if (!v44)
            {
              (*(void (**)(char *))(*(_QWORD *)v38 + 16))(v38);
              std::__shared_weak_count::__release_weak(v39);
            }
            v45 = v179;
            if (v179)
            {
              v46 = (unint64_t *)&v179->__shared_owners_;
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }
            v48 = *(_QWORD *)v174;
            if (v176[31] >= 0)
              v49 = v176 + 8;
            else
              v49 = (char *)*((_QWORD *)v176 + 1);
            if (v176[55] >= 0)
              v50 = v176 + 32;
            else
              v50 = (char *)*((_QWORD *)v176 + 4);
            v51 = _os_log_pack_fill();
            *(_DWORD *)v51 = 68158466;
            *(_DWORD *)(v51 + 4) = 13;
            *(_WORD *)(v51 + 8) = 2080;
            *(_QWORD *)(v51 + 10) = v49;
            *(_WORD *)(v51 + 18) = 1040;
            *(_DWORD *)(v51 + 20) = 13;
            *(_WORD *)(v51 + 24) = 2080;
            *(_QWORD *)(v51 + 26) = v50;
            v52 = operator new();
            v53 = *(unsigned __int8 *)(v150 + 39);
            v54 = *(_QWORD *)(v150 + 16);
            v55 = *(_QWORD *)(v150 + 24);
            v56 = v175;
            *(_OWORD *)(v52 + 8) = *(_OWORD *)&v174[8];
            if ((v53 & 0x80u) != 0)
              v53 = v55;
            else
              v54 = v151;
            *(_QWORD *)v52 = v48;
            *(_QWORD *)&v174[8] = 0;
            *(_QWORD *)&v174[16] = 0;
            *(_OWORD *)(v52 + 24) = v56;
            v175 = 0uLL;
            *(_QWORD *)(v52 + 40) = v54;
            *(_QWORD *)(v52 + 48) = v53;
            *(_BYTE *)(v52 + 56) = 1;
            *(_QWORD *)__s = 0;
            *(_QWORD *)object = v52;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v153 + 24) + 40))(*(_QWORD *)(v153 + 24), object);
            v57 = *(_QWORD *)object;
            *(_QWORD *)object = 0;
            v8 = (unsigned __int8 *)(v7 - 2);
            if (v57)
            {
              v58 = *(std::__shared_weak_count **)(v57 + 32);
              if (v58)
              {
                v59 = (unint64_t *)&v58->__shared_owners_;
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                }
              }
              v61 = *(std::__shared_weak_count **)(v57 + 16);
              if (v61)
              {
                v62 = (unint64_t *)&v61->__shared_owners_;
                do
                  v63 = __ldaxr(v62);
                while (__stlxr(v63 - 1, v62));
                if (!v63)
                {
                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                  std::__shared_weak_count::__release_weak(v61);
                }
              }
              MEMORY[0x227684CE8](v57, 0x10F0C40B62ED6C6);
              v64 = *(_QWORD *)__s;
              *(_QWORD *)__s = 0;
              if (v64)
              {
                v65 = *(std::__shared_weak_count **)(v64 + 32);
                if (v65)
                {
                  v66 = (unint64_t *)&v65->__shared_owners_;
                  do
                    v67 = __ldaxr(v66);
                  while (__stlxr(v67 - 1, v66));
                  if (!v67)
                  {
                    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                    std::__shared_weak_count::__release_weak(v65);
                  }
                }
                v68 = *(std::__shared_weak_count **)(v64 + 16);
                if (v68)
                {
                  v69 = (unint64_t *)&v68->__shared_owners_;
                  do
                    v70 = __ldaxr(v69);
                  while (__stlxr(v70 - 1, v69));
                  if (!v70)
                  {
                    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                    std::__shared_weak_count::__release_weak(v68);
                  }
                }
                MEMORY[0x227684CE8](v64, 0x10F0C40B62ED6C6);
              }
            }
            v71 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
            if (*((_QWORD *)&v175 + 1))
            {
              v72 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
              do
                v73 = __ldaxr(v72);
              while (__stlxr(v73 - 1, v72));
              if (!v73)
              {
                ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                std::__shared_weak_count::__release_weak(v71);
              }
            }
            v74 = *(std::__shared_weak_count **)&v174[16];
            if (*(_QWORD *)&v174[16])
            {
              v75 = (unint64_t *)(*(_QWORD *)&v174[16] + 8);
              do
                v76 = __ldaxr(v75);
              while (__stlxr(v76 - 1, v75));
              if (!v76)
              {
                ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                std::__shared_weak_count::__release_weak(v74);
              }
            }
            v30 = v152;
          }
          else
          {
            os_log_type_enabled(v33, OS_LOG_TYPE_INFO);
            *(_QWORD *)object = 0xD04100402;
            *(_WORD *)&object[8] = 2080;
            *(_QWORD *)&object[10] = &__dst;
            *(_WORD *)&object[18] = 1040;
            *(_DWORD *)&object[20] = 13;
            *(_WORD *)&object[24] = 2080;
            *(_QWORD *)&object[26] = v156;
            v77 = (void *)_os_log_send_and_compose_impl();
            v8 = (unsigned __int8 *)(v7 - 2);
            if (v77)
              free(v77);
          }
          if (v30)
          {
            sub_2245664AC(v8, object);
            sub_2245664AC(*v7, v174);
            sub_22322C138((uint64_t)&v157, "KeyframePlaneStorage: Removing link: keyframe plane %.13s -> global plane %.13s", object, v174);
            sub_223182C08((uint64_t)&v157);
            v8 = (unsigned __int8 *)(v7 - 2);
          }
          sub_223182C08((uint64_t)&v157);
          v78 = v165;
          if (v165)
          {
            v79 = (unint64_t *)&v165->__shared_owners_;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          goto LABEL_115;
        }
      }
      memmove(v26, v24, v25);
      goto LABEL_33;
    }
  }
LABEL_115:
  *(_OWORD *)object = *(_OWORD *)v8;
  *(_OWORD *)&object[16] = *(_OWORD *)v7;
  sub_2237382CC((uint64_t)&v157, v4, v6);
  if (v157)
    operator delete(v157);
  v81 = *(_OWORD *)&object[16];
  *(_OWORD *)a3 = *(_OWORD *)object;
  *(_OWORD *)(a3 + 16) = v81;
  *(_BYTE *)(a3 + 32) = 1;
}

void sub_22372D490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  if (a45)
  {
    if (a44 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_22372D4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  sub_22319A054((uint64_t *)(v39 - 192));
  sub_22319A054(&a34);
  sub_223199DE8((uint64_t)&a39);
  sub_223182DAC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_22372D504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_223199DE8((uint64_t)&a39);
  sub_223182DAC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_22372D520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  void *v19;
  int v20;
  uint64_t v21;

  if (v20 < 0)
  {
    operator delete(v19);
    sub_223199DE8(v21 - 192);
    sub_223182DAC((uint64_t)&a19);
    _Unwind_Resume(a1);
  }
  sub_223199DE8(v21 - 192);
  sub_223182DAC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_22372D578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;

  sub_22319A054(&a39);
  sub_22319A054((uint64_t *)(v39 - 144));
  sub_223199DE8(v39 - 192);
  sub_223182DAC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_22372D5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_223199DE8(v11 - 192);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22372D5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  sub_2231A87A4((uint64_t)&a39);
  sub_223199DE8(v39 - 144);
  sub_223182DAC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_22372D5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_223199DE8(v11 - 144);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22372D600()
{
  JUMPOUT(0x22372D608);
}

void sub_22372D644(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *object,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  if (a46 && a45 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  JUMPOUT(0x22372D690);
}

void sub_22372D68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22372D6A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *object,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  if (a46 && a45 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  JUMPOUT(0x22372D690);
}

void sub_22372D6D4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_22372D6F4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  const char *v11;
  unsigned __int8 v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  const char *v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  const char *v23;
  size_t v24;
  _BYTE *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  size_t v34;
  void *v35;
  _QWORD *v36;
  size_t v37;
  size_t v38;
  _QWORD *v39;
  void *v40;
  unsigned __int8 v41;
  const char *v42;
  size_t v43;
  _BYTE *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  size_t v53;
  void *v54;
  _QWORD *v55;
  size_t v56;
  size_t v57;
  _QWORD *p_dst;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  char v63;
  _QWORD *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  _QWORD *v110;
  unsigned __int8 *v111;
  _QWORD *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  int v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v121;
  size_t v122;
  const char *v123;
  unsigned __int8 v124;
  unsigned __int8 v125;
  const char *v126;
  size_t v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  _BYTE *v131;
  NSObject *v132;
  uint64_t v133;
  uint64_t v134;
  size_t v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  char *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  void *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  unsigned __int8 *v181;
  int8x8_t v182;
  unint64_t v183;
  uint8x8_t v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  char v196;
  _QWORD *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *p_shared_owners;
  unint64_t v201;
  uint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  __int128 v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  _QWORD *v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  _QWORD *v245;
  const char *v247;
  uint64_t *v248;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v250;
  int v251;
  const char *v252;
  int v253;
  const char *v254;
  uint64_t v255;
  std::__shared_weak_count *v256;
  uint64_t v257;
  _BYTE v258[30];
  _QWORD *__dst;
  __int128 v260;
  uint64_t v261;
  uint64_t v262;
  _BYTE object[24];
  _BYTE v264[24];
  size_t v265;
  unint64_t v266;
  char v267;
  _BYTE v268[24];
  __int128 v269;
  char *v270;
  char __s[8];
  std::__shared_weak_count_vtbl *v272;
  std::__shared_weak_count *v273;
  char *v274;
  char *v275;
  uint64_t v276;

  v276 = *MEMORY[0x24BDAC8D0];
  v261 = a2;
  v262 = a3;
  v243 = a1 + 5;
  v3 = sub_22342DA5C(a1 + 5, (uint64_t)&v261);
  if (!v3)
  {
    sub_223729BE0(&v257);
    if (**(int **)(v257 + 56) > 3)
      return;
    v13 = *(unsigned __int8 *)(v257 + 72);
    v14 = sub_22322F254(v257, "OSLogSurrogateAppender", 1, 0);
    v15 = v14;
    if (!v13 && v14 == 0)
      return;
    v248 = &v257;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v250 = std::chrono::system_clock::now().__d_.__rep_;
    v251 = 3;
    v252 = "unknown file";
    v253 = 230;
    v255 = 0;
    v256 = 0;
    v254 = "unknown function";
    sub_2245664AC((unsigned __int8 *)&v261, __s);
    v17 = v257;
    v18 = v257 + 16;
    if (*(char *)(v257 + 39) < 0)
    {
      v20 = *(const char **)(v257 + 16);
      v19 = *(_QWORD *)(v257 + 24);
      v41 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v41 & 1) != 0)
        goto LABEL_57;
    }
    else
    {
      v19 = *(unsigned __int8 *)(v257 + 39);
      v20 = (const char *)(*v248 + 16);
      v21 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v21 & 1) != 0)
        goto LABEL_57;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
      if (v264[0] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_57:
    if (byte_255788F57 >= 0)
      v42 = (const char *)&xmmword_255788F40;
    else
      v42 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v43 = byte_255788F57;
    else
      v43 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)object = os_log_create(v42, v20);
    v44 = &object[8];
    if (v43 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v43 >= 0x17)
    {
      v45 = v13;
      v46 = v18;
      v47 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17)
        v47 = v43 | 7;
      v48 = v47 + 1;
      v44 = operator new(v47 + 1);
      *(_QWORD *)&object[16] = v43;
      *(_QWORD *)v264 = v48 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v44;
      v18 = v46;
      v13 = v45;
    }
    else
    {
      v264[7] = v43;
      if (!v43)
      {
LABEL_71:
        v44[v43] = 0;
        v264[8] = 1;
        v49 = &v264[16];
        if (v19 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v19 >= 0x17)
        {
          v50 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v50 = v19 | 7;
          v51 = v50 + 1;
          v49 = operator new(v50 + 1);
          v265 = v19;
          v266 = v51 | 0x8000000000000000;
          *(_QWORD *)&v264[16] = v49;
        }
        else
        {
          HIBYTE(v266) = v19;
          if (!v19)
          {
LABEL_79:
            v49[v19] = 0;
            v267 = 1;
            v52 = *(NSObject **)object;
            if (SHIBYTE(v266) < 0)
              operator delete(*(void **)&v264[16]);
            if (v264[8] && (v264[7] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (!v15 || !*(_QWORD *)(v15 + 24))
            {
              os_log_type_enabled(v52, OS_LOG_TYPE_INFO);
              *(_QWORD *)object = 0xD04100202;
              *(_WORD *)&object[8] = 2080;
              *(_QWORD *)&object[10] = __s;
              v59 = (void *)_os_log_send_and_compose_impl();
              if (v59)
                free(v59);
              goto LABEL_380;
            }
            v53 = _os_log_pack_size();
            v54 = operator new(v53, (std::align_val_t)8uLL);
            v55 = (_QWORD *)operator new();
            *v55 = &off_24EC1F7F0;
            v55[1] = 0;
            v55[2] = 0;
            v55[3] = v54;
            *(_QWORD *)v268 = v54;
            *(_QWORD *)&v268[8] = v54;
            v269 = 0uLL;
            *(_QWORD *)&v268[16] = v55;
            v56 = strlen(__s);
            if (v56 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v57 = v56;
            if (v56 >= 0x17)
            {
              v193 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v56 | 7) != 0x17)
                v193 = v56 | 7;
              v194 = v193 + 1;
              p_dst = operator new(v193 + 1);
              *(_QWORD *)&v260 = v57;
              *((_QWORD *)&v260 + 1) = v194 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v260) = v56;
              p_dst = &__dst;
              if (!v56)
              {
LABEL_320:
                *((_BYTE *)p_dst + v57) = 0;
                v195 = __dst;
                *(_QWORD *)v258 = v260;
                *(_QWORD *)&v258[7] = *(_QWORD *)((char *)&v260 + 7);
                v196 = HIBYTE(v260);
                v197 = operator new(0x38uLL);
                v197[1] = 0;
                v197[2] = 0;
                v197[3] = off_24EC1FA48;
                *v197 = &off_24EC1F9F8;
                v198 = *(_QWORD *)v258;
                v197[4] = v195;
                v197[5] = v198;
                *(_QWORD *)((char *)v197 + 47) = *(_QWORD *)&v258[7];
                *((_BYTE *)v197 + 55) = v196;
                *(_QWORD *)v258 = 0;
                *(_QWORD *)&v258[7] = 0;
                v199 = (std::__shared_weak_count *)*((_QWORD *)&v269 + 1);
                *(_QWORD *)&v269 = v197 + 3;
                *((_QWORD *)&v269 + 1) = v197;
                if (v199)
                {
                  p_shared_owners = (unint64_t *)&v199->__shared_owners_;
                  do
                    v201 = __ldaxr(p_shared_owners);
                  while (__stlxr(v201 - 1, p_shared_owners));
                  if (!v201)
                  {
                    ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                    std::__shared_weak_count::__release_weak(v199);
                  }
                }
                *(_OWORD *)object = *(_OWORD *)v268;
                v202 = v269;
                *(_QWORD *)&object[16] = *(_QWORD *)&v268[16];
                if (*(_QWORD *)&v268[16])
                {
                  v203 = (unint64_t *)(*(_QWORD *)&v268[16] + 8);
                  do
                    v204 = __ldxr(v203);
                  while (__stxr(v204 + 1, v203));
                }
                v205 = (std::__shared_weak_count *)*((_QWORD *)&v269 + 1);
                *(_QWORD *)v264 = v202;
                *(_QWORD *)&v264[8] = *((_QWORD *)&v269 + 1);
                if (*((_QWORD *)&v269 + 1))
                {
                  v206 = (unint64_t *)(*((_QWORD *)&v269 + 1) + 8);
                  do
                    v207 = __ldxr(v206);
                  while (__stxr(v207 + 1, v206));
                  *(_QWORD *)&v264[16] = v202;
                  do
                    v208 = __ldaxr(v206);
                  while (__stlxr(v208 - 1, v206));
                  if (!v208)
                  {
                    ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                    std::__shared_weak_count::__release_weak(v205);
                  }
                }
                else
                {
                  *(_QWORD *)&v264[16] = v202;
                }
                v209 = *(std::__shared_weak_count **)&v268[16];
                if (*(_QWORD *)&v268[16])
                {
                  v210 = (unint64_t *)(*(_QWORD *)&v268[16] + 8);
                  do
                    v211 = __ldaxr(v210);
                  while (__stlxr(v211 - 1, v210));
                  if (!v211)
                  {
                    ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
                    std::__shared_weak_count::__release_weak(v209);
                  }
                }
                v212 = *(_QWORD *)object;
                if (*(char *)(*(_QWORD *)&v264[16] + 31) >= 0)
                  v213 = *(_QWORD *)&v264[16] + 8;
                else
                  v213 = *(_QWORD *)(*(_QWORD *)&v264[16] + 8);
                v214 = _os_log_pack_fill();
                *(_DWORD *)v214 = 68157954;
                *(_DWORD *)(v214 + 4) = 13;
                *(_WORD *)(v214 + 8) = 2080;
                *(_QWORD *)(v214 + 10) = v213;
                v215 = operator new();
                v216 = *(unsigned __int8 *)(v17 + 39);
                v217 = *(_QWORD *)(v17 + 16);
                v218 = *(_QWORD *)(v17 + 24);
                v219 = *(_OWORD *)v264;
                *(_OWORD *)(v215 + 8) = *(_OWORD *)&object[8];
                if ((v216 & 0x80u) != 0)
                  v216 = v218;
                else
                  v217 = v18;
                *(_QWORD *)v215 = v212;
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                *(_OWORD *)(v215 + 24) = v219;
                *(_QWORD *)v264 = 0;
                *(_QWORD *)&v264[8] = 0;
                *(_QWORD *)(v215 + 40) = v217;
                *(_QWORD *)(v215 + 48) = v216;
                *(_BYTE *)(v215 + 56) = 1;
                __dst = 0;
                *(_QWORD *)v268 = v215;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v15 + 24) + 40))(*(_QWORD *)(v15 + 24), v268);
                v220 = *(_QWORD *)v268;
                *(_QWORD *)v268 = 0;
                if (v220)
                {
                  v221 = *(std::__shared_weak_count **)(v220 + 32);
                  if (v221)
                  {
                    v222 = (unint64_t *)&v221->__shared_owners_;
                    do
                      v223 = __ldaxr(v222);
                    while (__stlxr(v223 - 1, v222));
                    if (!v223)
                    {
                      ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                      std::__shared_weak_count::__release_weak(v221);
                    }
                  }
                  v224 = *(std::__shared_weak_count **)(v220 + 16);
                  if (v224)
                  {
                    v225 = (unint64_t *)&v224->__shared_owners_;
                    do
                      v226 = __ldaxr(v225);
                    while (__stlxr(v226 - 1, v225));
                    if (!v226)
                    {
                      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                      std::__shared_weak_count::__release_weak(v224);
                    }
                  }
                  MEMORY[0x227684CE8](v220, 0x10F0C40B62ED6C6);
                  v227 = __dst;
                  __dst = 0;
                  if (v227)
                  {
                    v228 = (std::__shared_weak_count *)v227[4];
                    if (v228)
                    {
                      v229 = (unint64_t *)&v228->__shared_owners_;
                      do
                        v230 = __ldaxr(v229);
                      while (__stlxr(v230 - 1, v229));
                      if (!v230)
                      {
                        ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                        std::__shared_weak_count::__release_weak(v228);
                      }
                    }
                    v231 = (std::__shared_weak_count *)v227[2];
                    if (v231)
                    {
                      v232 = (unint64_t *)&v231->__shared_owners_;
                      do
                        v233 = __ldaxr(v232);
                      while (__stlxr(v233 - 1, v232));
                      if (!v233)
                      {
                        ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                        std::__shared_weak_count::__release_weak(v231);
                      }
                    }
                    MEMORY[0x227684CE8](v227, 0x10F0C40B62ED6C6);
                  }
                }
                v234 = *(std::__shared_weak_count **)&v264[8];
                if (*(_QWORD *)&v264[8])
                {
                  v235 = (unint64_t *)(*(_QWORD *)&v264[8] + 8);
                  do
                    v236 = __ldaxr(v235);
                  while (__stlxr(v236 - 1, v235));
                  if (!v236)
                  {
                    ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                    std::__shared_weak_count::__release_weak(v234);
                  }
                }
                v237 = *(std::__shared_weak_count **)&object[16];
                if (*(_QWORD *)&object[16])
                {
                  v238 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                  do
                    v239 = __ldaxr(v238);
                  while (__stlxr(v239 - 1, v238));
                  if (!v239)
                  {
                    ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                    std::__shared_weak_count::__release_weak(v237);
                  }
                }
LABEL_380:
                if (v13)
                {
                  sub_2245664AC((unsigned __int8 *)&v261, object);
                  sub_22322C138((uint64_t)&v248, "KPStorage: Cannot remove global plane %.13s from memory because it doesn't exist", object);
                  sub_223182C08((uint64_t)&v248);
                }
                sub_223182C08((uint64_t)&v248);
                v240 = v256;
                if (v256)
                {
                  v241 = (unint64_t *)&v256->__shared_owners_;
                  do
                    v242 = __ldaxr(v241);
                  while (__stlxr(v242 - 1, v241));
                  if (!v242)
                  {
                    ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                    std::__shared_weak_count::__release_weak(v240);
                  }
                }
                return;
              }
            }
            memcpy(p_dst, __s, v57);
            goto LABEL_320;
          }
        }
        memmove(v49, v20, v19);
        goto LABEL_79;
      }
    }
    memmove(v44, v42, v43);
    goto LABEL_71;
  }
  sub_223729BE0(&v257);
  v245 = v3;
  if (**(int **)(v257 + 56) <= 3)
  {
    v4 = *(unsigned __int8 *)(v257 + 72);
    v5 = sub_22322F254(v257, "OSLogSurrogateAppender", 1, 0);
    v6 = v5;
    if (v4 || v5 != 0)
    {
      v248 = &v257;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v250 = std::chrono::system_clock::now().__d_.__rep_;
      v251 = 3;
      v252 = "unknown file";
      v253 = 235;
      v255 = 0;
      v256 = 0;
      v254 = "unknown function";
      sub_2245664AC((unsigned __int8 *)&v261, __s);
      v8 = v257;
      v9 = v257 + 16;
      if (*(char *)(v257 + 39) < 0)
      {
        v11 = *(const char **)(v257 + 16);
        v10 = *(_QWORD *)(v257 + 24);
        v22 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v22 & 1) != 0)
          goto LABEL_19;
      }
      else
      {
        v10 = *(unsigned __int8 *)(v257 + 39);
        v11 = (const char *)(*v248 + 16);
        v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v12 & 1) != 0)
          goto LABEL_19;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if (v264[0] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_19:
      if (byte_255788F57 >= 0)
        v23 = (const char *)&xmmword_255788F40;
      else
        v23 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v24 = byte_255788F57;
      else
        v24 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v23, v11);
      v25 = &object[8];
      if (v24 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v24 >= 0x17)
      {
        v26 = v4;
        v27 = v9;
        v28 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v24 | 7) != 0x17)
          v28 = v24 | 7;
        v29 = v28 + 1;
        v25 = operator new(v28 + 1);
        *(_QWORD *)&object[16] = v24;
        *(_QWORD *)v264 = v29 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v25;
        v9 = v27;
        v4 = v26;
      }
      else
      {
        v264[7] = v24;
        if (!v24)
        {
LABEL_33:
          v25[v24] = 0;
          v264[8] = 1;
          v30 = &v264[16];
          if (v10 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v10 >= 0x17)
          {
            v31 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v10 | 7) != 0x17)
              v31 = v10 | 7;
            v32 = v31 + 1;
            v30 = operator new(v31 + 1);
            v265 = v10;
            v266 = v32 | 0x8000000000000000;
            *(_QWORD *)&v264[16] = v30;
          }
          else
          {
            HIBYTE(v266) = v10;
            if (!v10)
            {
LABEL_41:
              v30[v10] = 0;
              v267 = 1;
              v33 = *(NSObject **)object;
              if (SHIBYTE(v266) < 0)
                operator delete(*(void **)&v264[16]);
              if (v264[8] && (v264[7] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (!v6 || !*(_QWORD *)(v6 + 24))
              {
                os_log_type_enabled(v33, OS_LOG_TYPE_INFO);
                *(_QWORD *)object = 0xD04100202;
                *(_WORD *)&object[8] = 2080;
                *(_QWORD *)&object[10] = __s;
                v40 = (void *)_os_log_send_and_compose_impl();
                if (v40)
                  free(v40);
                goto LABEL_158;
              }
              v34 = _os_log_pack_size();
              v35 = operator new(v34, (std::align_val_t)8uLL);
              v36 = (_QWORD *)operator new();
              *v36 = &off_24EC1F7F0;
              v36[1] = 0;
              v36[2] = 0;
              v36[3] = v35;
              *(_QWORD *)v268 = v35;
              *(_QWORD *)&v268[8] = v35;
              v269 = 0uLL;
              *(_QWORD *)&v268[16] = v36;
              v37 = strlen(__s);
              if (v37 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v38 = v37;
              if (v37 >= 0x17)
              {
                v60 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v37 | 7) != 0x17)
                  v60 = v37 | 7;
                v61 = v60 + 1;
                v39 = operator new(v60 + 1);
                *(_QWORD *)&v260 = v38;
                *((_QWORD *)&v260 + 1) = v61 | 0x8000000000000000;
                __dst = v39;
              }
              else
              {
                HIBYTE(v260) = v37;
                v39 = &__dst;
                if (!v37)
                {
LABEL_98:
                  *((_BYTE *)v39 + v38) = 0;
                  v62 = __dst;
                  *(_QWORD *)v258 = v260;
                  *(_QWORD *)&v258[7] = *(_QWORD *)((char *)&v260 + 7);
                  v63 = HIBYTE(v260);
                  v64 = operator new(0x38uLL);
                  v64[1] = 0;
                  v64[2] = 0;
                  v64[3] = off_24EC1FA48;
                  *v64 = &off_24EC1F9F8;
                  v65 = *(_QWORD *)v258;
                  v64[4] = v62;
                  v64[5] = v65;
                  *(_QWORD *)((char *)v64 + 47) = *(_QWORD *)&v258[7];
                  *((_BYTE *)v64 + 55) = v63;
                  *(_QWORD *)v258 = 0;
                  *(_QWORD *)&v258[7] = 0;
                  v66 = (std::__shared_weak_count *)*((_QWORD *)&v269 + 1);
                  *(_QWORD *)&v269 = v64 + 3;
                  *((_QWORD *)&v269 + 1) = v64;
                  if (v66)
                  {
                    v67 = (unint64_t *)&v66->__shared_owners_;
                    do
                      v68 = __ldaxr(v67);
                    while (__stlxr(v68 - 1, v67));
                    if (!v68)
                    {
                      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                      std::__shared_weak_count::__release_weak(v66);
                    }
                  }
                  *(_OWORD *)object = *(_OWORD *)v268;
                  v69 = v269;
                  *(_QWORD *)&object[16] = *(_QWORD *)&v268[16];
                  if (*(_QWORD *)&v268[16])
                  {
                    v70 = (unint64_t *)(*(_QWORD *)&v268[16] + 8);
                    do
                      v71 = __ldxr(v70);
                    while (__stxr(v71 + 1, v70));
                  }
                  v72 = (std::__shared_weak_count *)*((_QWORD *)&v269 + 1);
                  *(_QWORD *)v264 = v69;
                  *(_QWORD *)&v264[8] = *((_QWORD *)&v269 + 1);
                  if (*((_QWORD *)&v269 + 1))
                  {
                    v73 = (unint64_t *)(*((_QWORD *)&v269 + 1) + 8);
                    do
                      v74 = __ldxr(v73);
                    while (__stxr(v74 + 1, v73));
                    *(_QWORD *)&v264[16] = v69;
                    do
                      v75 = __ldaxr(v73);
                    while (__stlxr(v75 - 1, v73));
                    if (!v75)
                    {
                      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                      std::__shared_weak_count::__release_weak(v72);
                    }
                  }
                  else
                  {
                    *(_QWORD *)&v264[16] = v69;
                  }
                  v76 = *(std::__shared_weak_count **)&v268[16];
                  if (*(_QWORD *)&v268[16])
                  {
                    v77 = (unint64_t *)(*(_QWORD *)&v268[16] + 8);
                    do
                      v78 = __ldaxr(v77);
                    while (__stlxr(v78 - 1, v77));
                    if (!v78)
                    {
                      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                      std::__shared_weak_count::__release_weak(v76);
                    }
                  }
                  v79 = *(_QWORD *)object;
                  if (*(char *)(*(_QWORD *)&v264[16] + 31) >= 0)
                    v80 = *(_QWORD *)&v264[16] + 8;
                  else
                    v80 = *(_QWORD *)(*(_QWORD *)&v264[16] + 8);
                  v81 = _os_log_pack_fill();
                  *(_DWORD *)v81 = 68157954;
                  *(_DWORD *)(v81 + 4) = 13;
                  *(_WORD *)(v81 + 8) = 2080;
                  *(_QWORD *)(v81 + 10) = v80;
                  v82 = operator new();
                  v83 = *(unsigned __int8 *)(v8 + 39);
                  v84 = *(_QWORD *)(v8 + 16);
                  v85 = *(_QWORD *)(v8 + 24);
                  v86 = *(_OWORD *)v264;
                  *(_OWORD *)(v82 + 8) = *(_OWORD *)&object[8];
                  if ((v83 & 0x80u) != 0)
                    v83 = v85;
                  else
                    v84 = v9;
                  *(_QWORD *)v82 = v79;
                  *(_QWORD *)&object[8] = 0;
                  *(_QWORD *)&object[16] = 0;
                  *(_OWORD *)(v82 + 24) = v86;
                  *(_QWORD *)v264 = 0;
                  *(_QWORD *)&v264[8] = 0;
                  *(_QWORD *)(v82 + 40) = v84;
                  *(_QWORD *)(v82 + 48) = v83;
                  *(_BYTE *)(v82 + 56) = 1;
                  __dst = 0;
                  *(_QWORD *)v268 = v82;
                  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), v268);
                  v87 = *(_QWORD *)v268;
                  *(_QWORD *)v268 = 0;
                  if (v87)
                  {
                    v88 = *(std::__shared_weak_count **)(v87 + 32);
                    if (v88)
                    {
                      v89 = (unint64_t *)&v88->__shared_owners_;
                      do
                        v90 = __ldaxr(v89);
                      while (__stlxr(v90 - 1, v89));
                      if (!v90)
                      {
                        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                        std::__shared_weak_count::__release_weak(v88);
                      }
                    }
                    v91 = *(std::__shared_weak_count **)(v87 + 16);
                    if (v91)
                    {
                      v92 = (unint64_t *)&v91->__shared_owners_;
                      do
                        v93 = __ldaxr(v92);
                      while (__stlxr(v93 - 1, v92));
                      if (!v93)
                      {
                        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                        std::__shared_weak_count::__release_weak(v91);
                      }
                    }
                    MEMORY[0x227684CE8](v87, 0x10F0C40B62ED6C6);
                    v94 = __dst;
                    __dst = 0;
                    if (v94)
                    {
                      v95 = (std::__shared_weak_count *)v94[4];
                      if (v95)
                      {
                        v96 = (unint64_t *)&v95->__shared_owners_;
                        do
                          v97 = __ldaxr(v96);
                        while (__stlxr(v97 - 1, v96));
                        if (!v97)
                        {
                          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                          std::__shared_weak_count::__release_weak(v95);
                        }
                      }
                      v98 = (std::__shared_weak_count *)v94[2];
                      if (v98)
                      {
                        v99 = (unint64_t *)&v98->__shared_owners_;
                        do
                          v100 = __ldaxr(v99);
                        while (__stlxr(v100 - 1, v99));
                        if (!v100)
                        {
                          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                          std::__shared_weak_count::__release_weak(v98);
                        }
                      }
                      MEMORY[0x227684CE8](v94, 0x10F0C40B62ED6C6);
                    }
                  }
                  v101 = *(std::__shared_weak_count **)&v264[8];
                  if (*(_QWORD *)&v264[8])
                  {
                    v102 = (unint64_t *)(*(_QWORD *)&v264[8] + 8);
                    do
                      v103 = __ldaxr(v102);
                    while (__stlxr(v103 - 1, v102));
                    if (!v103)
                    {
                      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                      std::__shared_weak_count::__release_weak(v101);
                    }
                  }
                  v104 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                  {
                    v105 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                    do
                      v106 = __ldaxr(v105);
                    while (__stlxr(v106 - 1, v105));
                    if (!v106)
                    {
                      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                      std::__shared_weak_count::__release_weak(v104);
                    }
                  }
LABEL_158:
                  if (v4)
                  {
                    sub_2245664AC((unsigned __int8 *)&v261, object);
                    sub_22322C138((uint64_t)&v248, "KPStorage: Removing GlobalPlane %.13s from memory", object);
                    sub_223182C08((uint64_t)&v248);
                  }
                  sub_223182C08((uint64_t)&v248);
                  v107 = v256;
                  if (v256)
                  {
                    v108 = (unint64_t *)&v256->__shared_owners_;
                    do
                      v109 = __ldaxr(v108);
                    while (__stlxr(v109 - 1, v108));
                    if (!v109)
                    {
                      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                      std::__shared_weak_count::__release_weak(v107);
                    }
                  }
                  goto LABEL_165;
                }
              }
              memcpy(v39, __s, v38);
              goto LABEL_98;
            }
          }
          memmove(v30, v11, v10);
          goto LABEL_41;
        }
      }
      memmove(v25, v23, v24);
      goto LABEL_33;
    }
  }
LABEL_165:
  v110 = v245;
  v111 = (unsigned __int8 *)a1[12];
  if (v111)
  {
    v112 = a1 + 10;
    do
    {
      while (1)
      {
        v113 = (uint64_t *)*((_QWORD *)v111 + 4);
        v115 = *v113;
        v114 = v113[1];
        if (v115 == v261 && v114 == v262)
          break;
        v111 = *(unsigned __int8 **)v111;
        if (!v111)
          goto LABEL_286;
      }
      sub_22372F598(&v257);
      if (**(int **)(v257 + 56) > 4)
        goto LABEL_277;
      v117 = *(unsigned __int8 *)(v257 + 72);
      v118 = sub_22322F254(v257, "OSLogSurrogateAppender", 1, 0);
      v119 = v118;
      if (!v117 && v118 == 0)
        goto LABEL_277;
      v248 = &v257;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v250 = std::chrono::system_clock::now().__d_.__rep_;
      v251 = 4;
      v252 = "unknown file";
      v253 = 243;
      v254 = "unknown function";
      v255 = 0;
      v256 = 0;
      sub_2245664AC((unsigned __int8 *)&v261, &__dst);
      sub_2245664AC(v111 + 16, v258);
      v247 = v258;
      v121 = *v248;
      if (*(char *)(*v248 + 39) < 0)
      {
        v123 = *(const char **)(v121 + 16);
        v122 = *(_QWORD *)(v121 + 24);
        v244 = *v248 + 16;
        v125 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v125 & 1) != 0)
          goto LABEL_182;
      }
      else
      {
        v122 = *(unsigned __int8 *)(*v248 + 39);
        v123 = (const char *)(*v248 + 16);
        v244 = (uint64_t)v123;
        v124 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v124 & 1) != 0)
          goto LABEL_182;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v268);
        sub_223199C58("com.apple.cv3d", (unint64_t)v268, &xmmword_255788F40);
        if ((_BYTE)v269 && (v268[23] & 0x80000000) != 0)
          operator delete(*(void **)v268);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
        v110 = v245;
      }
LABEL_182:
      if (byte_255788F57 >= 0)
        v126 = (const char *)&xmmword_255788F40;
      else
        v126 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v127 = byte_255788F57;
      else
        v127 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v126, v123);
      if (v127 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v127 >= 0x17)
      {
        v129 = (v127 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v127 | 7) != 0x17)
          v129 = v127 | 7;
        v130 = v129 + 1;
        v128 = operator new(v129 + 1);
        *(_QWORD *)&object[16] = v127;
        *(_QWORD *)v264 = v130 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v128;
        v110 = v245;
LABEL_195:
        memmove(v128, v126, v127);
        goto LABEL_196;
      }
      v264[7] = v127;
      v128 = &object[8];
      if (v127)
        goto LABEL_195;
LABEL_196:
      v128[v127] = 0;
      v264[8] = 1;
      if (v122 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v112 = a1 + 10;
      if (v122 >= 0x17)
      {
        v133 = (v122 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v122 | 7) != 0x17)
          v133 = v122 | 7;
        v134 = v133 + 1;
        v131 = operator new(v133 + 1);
        v265 = v122;
        v266 = v134 | 0x8000000000000000;
        *(_QWORD *)&v264[16] = v131;
        v110 = v245;
      }
      else
      {
        HIBYTE(v266) = v122;
        v131 = &v264[16];
        if (!v122)
        {
          v264[16] = 0;
          v267 = 1;
          v132 = *(NSObject **)object;
          if ((SHIBYTE(v266) & 0x80000000) == 0)
            goto LABEL_200;
          goto LABEL_206;
        }
      }
      memmove(v131, v123, v122);
      v131[v122] = 0;
      v267 = 1;
      v132 = *(NSObject **)object;
      if ((SHIBYTE(v266) & 0x80000000) == 0)
      {
LABEL_200:
        if (v264[8])
          goto LABEL_207;
        goto LABEL_209;
      }
LABEL_206:
      operator delete(*(void **)&v264[16]);
      if (v264[8])
      {
LABEL_207:
        if ((v264[7] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
      }
LABEL_209:
      if (*(_QWORD *)object)
        os_release(*(void **)object);
      if (v119 && *(_QWORD *)(v119 + 24))
      {
        v135 = _os_log_pack_size();
        v136 = (std::__shared_weak_count_vtbl *)operator new(v135, (std::align_val_t)8uLL);
        v137 = (std::__shared_weak_count *)operator new();
        v137->__shared_owners_ = 0;
        v138 = (unint64_t *)&v137->__shared_owners_;
        v137->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
        v137->__shared_weak_owners_ = 0;
        v137[1].__vftable = v136;
        *(_QWORD *)__s = v136;
        v272 = v136;
        v273 = v137;
        v274 = 0;
        v275 = 0;
        sub_223738130((uint64_t)object, (char *)&__dst, &v247);
        v139 = (char *)operator new(0x50uLL);
        v140 = (std::__shared_weak_count *)v139;
        *((_QWORD *)v139 + 1) = 0;
        v141 = (unint64_t *)(v139 + 8);
        *((_QWORD *)v139 + 2) = 0;
        *(_QWORD *)v139 = &off_24EC20730;
        *((_QWORD *)v139 + 3) = off_24EC20780;
        *((_OWORD *)v139 + 2) = *(_OWORD *)&object[8];
        *((_QWORD *)v139 + 6) = *(_QWORD *)v264;
        *(_OWORD *)(v139 + 56) = *(_OWORD *)&v264[8];
        *((_QWORD *)v139 + 9) = v265;
        v274 = v139 + 24;
        v275 = v139;
        *(_QWORD *)v268 = v136;
        *(_QWORD *)&v268[8] = v136;
        *(_QWORD *)&v268[16] = v137;
        do
          v142 = __ldxr(v138);
        while (__stxr(v142 + 1, v138));
        *(_QWORD *)&v269 = v139 + 24;
        *((_QWORD *)&v269 + 1) = v139;
        do
          v143 = __ldxr(v141);
        while (__stxr(v143 + 1, v141));
        v270 = v139 + 24;
        do
          v144 = __ldaxr(v141);
        while (__stlxr(v144 - 1, v141));
        if (!v144)
        {
          (*(void (**)(char *))(*(_QWORD *)v139 + 16))(v139);
          std::__shared_weak_count::__release_weak(v140);
        }
        v145 = v273;
        if (v273)
        {
          v146 = (unint64_t *)&v273->__shared_owners_;
          do
            v147 = __ldaxr(v146);
          while (__stlxr(v147 - 1, v146));
          if (!v147)
          {
            ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
            std::__shared_weak_count::__release_weak(v145);
          }
        }
        v148 = *(_QWORD *)v268;
        if (v270[31] >= 0)
          v149 = v270 + 8;
        else
          v149 = (char *)*((_QWORD *)v270 + 1);
        if (v270[55] >= 0)
          v150 = v270 + 32;
        else
          v150 = (char *)*((_QWORD *)v270 + 4);
        v151 = _os_log_pack_fill();
        *(_DWORD *)v151 = 68158466;
        *(_DWORD *)(v151 + 4) = 13;
        *(_WORD *)(v151 + 8) = 2080;
        *(_QWORD *)(v151 + 10) = v149;
        *(_WORD *)(v151 + 18) = 1040;
        *(_DWORD *)(v151 + 20) = 13;
        *(_WORD *)(v151 + 24) = 2080;
        *(_QWORD *)(v151 + 26) = v150;
        v152 = operator new();
        v153 = *(unsigned __int8 *)(v121 + 39);
        v154 = *(_QWORD *)(v121 + 16);
        v155 = *(_QWORD *)(v121 + 24);
        v156 = v269;
        *(_OWORD *)(v152 + 8) = *(_OWORD *)&v268[8];
        if ((v153 & 0x80u) != 0)
          v153 = v155;
        else
          v154 = v244;
        *(_QWORD *)v152 = v148;
        *(_QWORD *)&v268[8] = 0;
        *(_QWORD *)&v268[16] = 0;
        *(_OWORD *)(v152 + 24) = v156;
        v269 = 0uLL;
        *(_QWORD *)(v152 + 40) = v154;
        *(_QWORD *)(v152 + 48) = v153;
        *(_BYTE *)(v152 + 56) = 16;
        *(_QWORD *)__s = 0;
        *(_QWORD *)object = v152;
        (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v119 + 24) + 40))(*(_QWORD *)(v119 + 24), object);
        v110 = v245;
        v157 = *(_QWORD *)object;
        *(_QWORD *)object = 0;
        if (v157)
        {
          v158 = *(std::__shared_weak_count **)(v157 + 32);
          if (v158)
          {
            v159 = (unint64_t *)&v158->__shared_owners_;
            do
              v160 = __ldaxr(v159);
            while (__stlxr(v160 - 1, v159));
            if (!v160)
            {
              ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
              std::__shared_weak_count::__release_weak(v158);
            }
          }
          v161 = *(std::__shared_weak_count **)(v157 + 16);
          if (v161)
          {
            v162 = (unint64_t *)&v161->__shared_owners_;
            do
              v163 = __ldaxr(v162);
            while (__stlxr(v163 - 1, v162));
            if (!v163)
            {
              ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
              std::__shared_weak_count::__release_weak(v161);
            }
          }
          MEMORY[0x227684CE8](v157, 0x10F0C40B62ED6C6);
          v164 = *(_QWORD *)__s;
          *(_QWORD *)__s = 0;
          if (v164)
          {
            v165 = *(std::__shared_weak_count **)(v164 + 32);
            if (v165)
            {
              v166 = (unint64_t *)&v165->__shared_owners_;
              do
                v167 = __ldaxr(v166);
              while (__stlxr(v167 - 1, v166));
              if (!v167)
              {
                ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                std::__shared_weak_count::__release_weak(v165);
              }
            }
            v168 = *(std::__shared_weak_count **)(v164 + 16);
            if (v168)
            {
              v169 = (unint64_t *)&v168->__shared_owners_;
              do
                v170 = __ldaxr(v169);
              while (__stlxr(v170 - 1, v169));
              if (!v170)
              {
                ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                std::__shared_weak_count::__release_weak(v168);
              }
            }
            MEMORY[0x227684CE8](v164, 0x10F0C40B62ED6C6);
          }
        }
        v171 = (std::__shared_weak_count *)*((_QWORD *)&v269 + 1);
        if (*((_QWORD *)&v269 + 1))
        {
          v172 = (unint64_t *)(*((_QWORD *)&v269 + 1) + 8);
          do
            v173 = __ldaxr(v172);
          while (__stlxr(v173 - 1, v172));
          if (!v173)
          {
            ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
            std::__shared_weak_count::__release_weak(v171);
          }
        }
        v174 = *(std::__shared_weak_count **)&v268[16];
        if (*(_QWORD *)&v268[16])
        {
          v175 = (unint64_t *)(*(_QWORD *)&v268[16] + 8);
          do
            v176 = __ldaxr(v175);
          while (__stlxr(v176 - 1, v175));
          if (!v176)
          {
            ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
            std::__shared_weak_count::__release_weak(v174);
          }
        }
      }
      else
      {
        os_log_type_enabled(v132, OS_LOG_TYPE_ERROR);
        *(_QWORD *)object = 0xD04100402;
        *(_WORD *)&object[8] = 2080;
        *(_QWORD *)&object[10] = &__dst;
        *(_WORD *)&object[18] = 1040;
        *(_DWORD *)&object[20] = 13;
        *(_WORD *)v264 = 2080;
        *(_QWORD *)&v264[2] = v247;
        v177 = (void *)_os_log_send_and_compose_impl();
        if (v177)
          free(v177);
      }
      if (v117)
      {
        sub_2245664AC((unsigned __int8 *)&v261, object);
        sub_2245664AC(v111 + 16, v268);
        sub_22322C138((uint64_t)&v248, "KPStorage: To be removed GP %.13s has link to KP %.13s, which will be removed", object, v268);
        sub_223182C08((uint64_t)&v248);
      }
      sub_223182C08((uint64_t)&v248);
      v178 = v256;
      if (v256)
      {
        v179 = (unint64_t *)&v256->__shared_owners_;
        do
          v180 = __ldaxr(v179);
        while (__stlxr(v180 - 1, v179));
        if (!v180)
        {
          ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
          std::__shared_weak_count::__release_weak(v178);
        }
      }
LABEL_277:
      v181 = *(unsigned __int8 **)v111;
      sub_2237382CC((uint64_t)object, v112, v111);
      if (*(_QWORD *)object)
        operator delete(*(void **)object);
      v111 = v181;
    }
    while (v181);
  }
LABEL_286:
  v182 = (int8x8_t)a1[6];
  v183 = v110[1];
  v184 = (uint8x8_t)vcnt_s8(v182);
  v184.i16[0] = vaddlv_u8(v184);
  if (v184.u32[0] > 1uLL)
  {
    v185 = v243;
    if (v183 >= *(_QWORD *)&v182)
      v183 %= *(_QWORD *)&v182;
  }
  else
  {
    v183 &= *(_QWORD *)&v182 - 1;
    v185 = v243;
  }
  v186 = *(_QWORD **)(*v185 + 8 * v183);
  do
  {
    v187 = v186;
    v186 = (_QWORD *)*v186;
  }
  while (v186 != v110);
  if (v187 == a1 + 7)
    goto LABEL_303;
  v188 = v187[1];
  if (v184.u32[0] > 1uLL)
  {
    if (v188 >= *(_QWORD *)&v182)
      v188 %= *(_QWORD *)&v182;
  }
  else
  {
    v188 &= *(_QWORD *)&v182 - 1;
  }
  if (v188 != v183)
  {
LABEL_303:
    if (!*v110)
      goto LABEL_304;
    v189 = *(_QWORD *)(*v110 + 8);
    if (v184.u32[0] > 1uLL)
    {
      if (v189 >= *(_QWORD *)&v182)
        v189 %= *(_QWORD *)&v182;
    }
    else
    {
      v189 &= *(_QWORD *)&v182 - 1;
    }
    if (v189 != v183)
LABEL_304:
      *(_QWORD *)(*v185 + 8 * v183) = 0;
  }
  v190 = *v110;
  if (*v110)
  {
    v191 = *(_QWORD *)(v190 + 8);
    if (v184.u32[0] > 1uLL)
    {
      if (v191 >= *(_QWORD *)&v182)
        v191 %= *(_QWORD *)&v182;
    }
    else
    {
      v191 &= *(_QWORD *)&v182 - 1;
    }
    if (v191 != v183)
    {
      *(_QWORD *)(*v185 + 8 * v191) = v187;
      v190 = *v110;
    }
  }
  *v187 = v190;
  *v110 = 0;
  --a1[8];
  v192 = v110[4];
  v110[4] = 0;
  if (v192)
    sub_2236C86D0((uint64_t)(v110 + 4), v192);
  operator delete(v110);
}

void sub_22372F280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55)
{
  if (a55)
  {
    if (a54 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_22372F2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  sub_22319A054((uint64_t *)(v49 - 192));
  sub_22319A054(&a42);
  sub_223199DE8((uint64_t)&a49);
  sub_223182DAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_22372F360()
{
  int v0;

  if (v0 < 0)
    JUMPOUT(0x22372F36CLL);
  JUMPOUT(0x22372F398);
}

void sub_22372F388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;

  MEMORY[0x227684CE8](v27, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_22372F3C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *object,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56)
{
  if (a56 && a55 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  JUMPOUT(0x22372F578);
}

void sub_22372F40C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *object,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56)
{
  if (a56 && a55 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  JUMPOUT(0x22372F578);
}

void sub_22372F448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v49;

  sub_22319A054(&a49);
  sub_22319A054((uint64_t *)(v49 - 144));
  sub_223199DE8(v49 - 192);
  sub_223182DAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_22372F474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_223199DE8(v27 - 192);
  sub_223182DAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_22372F490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  sub_2231A87A4((uint64_t)&a49);
  sub_223199DE8(v49 - 144);
  sub_223182DAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_22372F4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_223199DE8(v27 - 144);
  sub_223182DAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_22372F4D0()
{
  JUMPOUT(0x22372F4D8);
}

void sub_22372F4FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *object,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56)
{
  if (a55 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  JUMPOUT(0x22372F578);
}

void sub_22372F55C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_22372F574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_223182DAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_22372F598(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC490);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC490))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC488);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC490);
  }
  *a1 = qword_2540CC488;
}

void sub_22372F634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC490);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC490);
  _Unwind_Resume(a1);
}

uint64_t sub_22372F68C(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v9;
  const char *v10;
  size_t v11;
  unsigned __int8 v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v17;
  uint64_t v18;
  size_t v19;
  const char *v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  const char *v23;
  size_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  size_t v32;
  void *v33;
  _QWORD *v34;
  size_t v35;
  size_t v36;
  _QWORD *v37;
  void *v38;
  unsigned __int8 v39;
  const char *v40;
  size_t v41;
  _BYTE *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  size_t v51;
  void *v52;
  _QWORD *v53;
  size_t v54;
  size_t v55;
  _QWORD *p_dst;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char v61;
  _QWORD *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  char v77;
  _QWORD *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  _QWORD *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unsigned __int8 *v129;
  char *v130;
  _QWORD *i;
  char *v132;
  _OWORD *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  _QWORD *v143;
  char *v144;
  _QWORD *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  unsigned __int8 v153;
  const void *v154;
  size_t v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  char *v159;
  void *v160;
  const char *v161;
  size_t v162;
  unsigned __int8 v163;
  unsigned __int8 v164;
  const char *v165;
  size_t v166;
  _BYTE *v167;
  uint64_t v168;
  uint64_t v169;
  _BYTE *v170;
  NSObject *v171;
  uint64_t v172;
  uint64_t v173;
  size_t v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  char *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  const char *v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  void *v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  _QWORD *v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  _QWORD *v258;
  const char *v259;
  _QWORD *v260;
  _QWORD *v261;
  const char *v263;
  unsigned __int8 *v264;
  const char *v265;
  uint64_t v266;
  void *v267;
  char *v268;
  char *v269;
  void **v270;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v272;
  int v273;
  const char *v274;
  int v275;
  const char *v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  _BYTE v279[30];
  _QWORD *__dst;
  __int128 v281;
  _BYTE object[24];
  _BYTE v283[24];
  size_t v284;
  unint64_t v285;
  char v286;
  _BYTE v287[24];
  __int128 v288;
  char *v289;
  char __s[8];
  std::__shared_weak_count_vtbl *v291;
  std::__shared_weak_count *v292;
  char *v293;
  char *v294;
  uint64_t v295;

  v295 = *MEMORY[0x24BDAC8D0];
  v3 = sub_22342DA5C(a1, (uint64_t)a2);
  if (!v3)
  {
    sub_223729BE0(&v267);
    if (**((int **)v267 + 7) > 3)
      return 0;
    v13 = *((unsigned __int8 *)v267 + 72);
    v14 = sub_22322F254((uint64_t)v267, "OSLogSurrogateAppender", 1, 0);
    v15 = v14;
    if (!v13 && v14 == 0)
      return 0;
    v270 = &v267;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v272 = std::chrono::system_clock::now().__d_.__rep_;
    v273 = 3;
    v274 = "unknown file";
    v275 = 272;
    v277 = 0;
    v278 = 0;
    v276 = "unknown function";
    sub_2245664AC(a2, __s);
    v17 = (unsigned __int8 *)*v270;
    v18 = (uint64_t)*v270 + 16;
    if (*((char *)*v270 + 39) < 0)
    {
      v20 = (const char *)*((_QWORD *)v17 + 2);
      v19 = *((_QWORD *)v17 + 3);
      v39 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v39 & 1) != 0)
        goto LABEL_59;
    }
    else
    {
      v19 = *((unsigned __int8 *)*v270 + 39);
      v20 = (char *)*v270 + 16;
      v21 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v21 & 1) != 0)
        goto LABEL_59;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
      if (v283[0] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_59:
    if (byte_255788F57 >= 0)
      v40 = (const char *)&xmmword_255788F40;
    else
      v40 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v41 = byte_255788F57;
    else
      v41 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)object = os_log_create(v40, v20);
    v42 = &object[8];
    if (v41 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v41 >= 0x17)
    {
      v43 = v13;
      v44 = v18;
      v45 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v41 | 7) != 0x17)
        v45 = v41 | 7;
      v46 = v45 + 1;
      v42 = operator new(v45 + 1);
      *(_QWORD *)&object[16] = v41;
      *(_QWORD *)v283 = v46 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v42;
      v18 = v44;
      v13 = v43;
    }
    else
    {
      v283[7] = v41;
      if (!v41)
      {
LABEL_73:
        v42[v41] = 0;
        v283[8] = 1;
        v47 = &v283[16];
        if (v19 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v19 >= 0x17)
        {
          v48 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v48 = v19 | 7;
          v49 = v48 + 1;
          v47 = operator new(v48 + 1);
          v284 = v19;
          v285 = v49 | 0x8000000000000000;
          *(_QWORD *)&v283[16] = v47;
        }
        else
        {
          HIBYTE(v285) = v19;
          if (!v19)
          {
LABEL_81:
            v47[v19] = 0;
            v286 = 1;
            v50 = *(NSObject **)object;
            if (SHIBYTE(v285) < 0)
              operator delete(*(void **)&v283[16]);
            if (v283[8] && (v283[7] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (!v15 || !*(_QWORD *)(v15 + 24))
            {
              os_log_type_enabled(v50, OS_LOG_TYPE_INFO);
              *(_QWORD *)object = 0xD04100202;
              *(_WORD *)&object[8] = 2080;
              *(_QWORD *)&object[10] = __s;
              v57 = (void *)_os_log_send_and_compose_impl();
              if (v57)
                free(v57);
              goto LABEL_395;
            }
            v51 = _os_log_pack_size();
            v52 = operator new(v51, (std::align_val_t)8uLL);
            v53 = (_QWORD *)operator new();
            *v53 = &off_24EC1F7F0;
            v53[1] = 0;
            v53[2] = 0;
            v53[3] = v52;
            *(_QWORD *)v287 = v52;
            *(_QWORD *)&v287[8] = v52;
            v288 = 0uLL;
            *(_QWORD *)&v287[16] = v53;
            v54 = strlen(__s);
            if (v54 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v55 = v54;
            if (v54 >= 0x17)
            {
              v74 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v54 | 7) != 0x17)
                v74 = v54 | 7;
              v75 = v74 + 1;
              p_dst = operator new(v74 + 1);
              *(_QWORD *)&v281 = v55;
              *((_QWORD *)&v281 + 1) = v75 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v281) = v54;
              p_dst = &__dst;
              if (!v54)
              {
LABEL_119:
                *((_BYTE *)p_dst + v55) = 0;
                v76 = __dst;
                *(_QWORD *)v279 = v281;
                *(_QWORD *)&v279[7] = *(_QWORD *)((char *)&v281 + 7);
                v77 = HIBYTE(v281);
                v78 = operator new(0x38uLL);
                v78[1] = 0;
                v78[2] = 0;
                v78[3] = off_24EC1FA48;
                *v78 = &off_24EC1F9F8;
                v79 = *(_QWORD *)v279;
                v78[4] = v76;
                v78[5] = v79;
                *(_QWORD *)((char *)v78 + 47) = *(_QWORD *)&v279[7];
                *((_BYTE *)v78 + 55) = v77;
                *(_QWORD *)v279 = 0;
                *(_QWORD *)&v279[7] = 0;
                v80 = (std::__shared_weak_count *)*((_QWORD *)&v288 + 1);
                *(_QWORD *)&v288 = v78 + 3;
                *((_QWORD *)&v288 + 1) = v78;
                if (v80)
                {
                  p_shared_owners = (unint64_t *)&v80->__shared_owners_;
                  do
                    v82 = __ldaxr(p_shared_owners);
                  while (__stlxr(v82 - 1, p_shared_owners));
                  if (!v82)
                  {
                    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                    std::__shared_weak_count::__release_weak(v80);
                  }
                }
                *(_OWORD *)object = *(_OWORD *)v287;
                v83 = v288;
                *(_QWORD *)&object[16] = *(_QWORD *)&v287[16];
                if (*(_QWORD *)&v287[16])
                {
                  v84 = (unint64_t *)(*(_QWORD *)&v287[16] + 8);
                  do
                    v85 = __ldxr(v84);
                  while (__stxr(v85 + 1, v84));
                }
                v86 = (std::__shared_weak_count *)*((_QWORD *)&v288 + 1);
                *(_QWORD *)v283 = v83;
                *(_QWORD *)&v283[8] = *((_QWORD *)&v288 + 1);
                if (*((_QWORD *)&v288 + 1))
                {
                  v87 = (unint64_t *)(*((_QWORD *)&v288 + 1) + 8);
                  do
                    v88 = __ldxr(v87);
                  while (__stxr(v88 + 1, v87));
                  *(_QWORD *)&v283[16] = v83;
                  do
                    v89 = __ldaxr(v87);
                  while (__stlxr(v89 - 1, v87));
                  if (!v89)
                  {
                    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                    std::__shared_weak_count::__release_weak(v86);
                  }
                }
                else
                {
                  *(_QWORD *)&v283[16] = v83;
                }
                v223 = *(std::__shared_weak_count **)&v287[16];
                if (*(_QWORD *)&v287[16])
                {
                  v224 = (unint64_t *)(*(_QWORD *)&v287[16] + 8);
                  do
                    v225 = __ldaxr(v224);
                  while (__stlxr(v225 - 1, v224));
                  if (!v225)
                  {
                    ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                    std::__shared_weak_count::__release_weak(v223);
                  }
                }
                v226 = *(_QWORD *)object;
                if (*(char *)(*(_QWORD *)&v283[16] + 31) >= 0)
                  v227 = *(_QWORD *)&v283[16] + 8;
                else
                  v227 = *(_QWORD *)(*(_QWORD *)&v283[16] + 8);
                v228 = _os_log_pack_fill();
                *(_DWORD *)v228 = 68157954;
                *(_DWORD *)(v228 + 4) = 13;
                *(_WORD *)(v228 + 8) = 2080;
                *(_QWORD *)(v228 + 10) = v227;
                v229 = operator new();
                v230 = v17[39];
                v231 = *((_QWORD *)v17 + 2);
                v232 = *((_QWORD *)v17 + 3);
                v233 = *(_OWORD *)v283;
                *(_OWORD *)(v229 + 8) = *(_OWORD *)&object[8];
                if ((v230 & 0x80u) != 0)
                  v230 = v232;
                else
                  v231 = v18;
                *(_QWORD *)v229 = v226;
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                *(_OWORD *)(v229 + 24) = v233;
                *(_QWORD *)v283 = 0;
                *(_QWORD *)&v283[8] = 0;
                *(_QWORD *)(v229 + 40) = v231;
                *(_QWORD *)(v229 + 48) = v230;
                *(_BYTE *)(v229 + 56) = 1;
                __dst = 0;
                *(_QWORD *)v287 = v229;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v15 + 24) + 40))(*(_QWORD *)(v15 + 24), v287);
                v234 = *(_QWORD *)v287;
                *(_QWORD *)v287 = 0;
                if (v234)
                {
                  v235 = *(std::__shared_weak_count **)(v234 + 32);
                  if (v235)
                  {
                    v236 = (unint64_t *)&v235->__shared_owners_;
                    do
                      v237 = __ldaxr(v236);
                    while (__stlxr(v237 - 1, v236));
                    if (!v237)
                    {
                      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
                      std::__shared_weak_count::__release_weak(v235);
                    }
                  }
                  v238 = *(std::__shared_weak_count **)(v234 + 16);
                  if (v238)
                  {
                    v239 = (unint64_t *)&v238->__shared_owners_;
                    do
                      v240 = __ldaxr(v239);
                    while (__stlxr(v240 - 1, v239));
                    if (!v240)
                    {
                      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
                      std::__shared_weak_count::__release_weak(v238);
                    }
                  }
                  MEMORY[0x227684CE8](v234, 0x10F0C40B62ED6C6);
                  v241 = __dst;
                  __dst = 0;
                  if (v241)
                  {
                    v242 = (std::__shared_weak_count *)v241[4];
                    if (v242)
                    {
                      v243 = (unint64_t *)&v242->__shared_owners_;
                      do
                        v244 = __ldaxr(v243);
                      while (__stlxr(v244 - 1, v243));
                      if (!v244)
                      {
                        ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                        std::__shared_weak_count::__release_weak(v242);
                      }
                    }
                    v245 = (std::__shared_weak_count *)v241[2];
                    if (v245)
                    {
                      v246 = (unint64_t *)&v245->__shared_owners_;
                      do
                        v247 = __ldaxr(v246);
                      while (__stlxr(v247 - 1, v246));
                      if (!v247)
                      {
                        ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                        std::__shared_weak_count::__release_weak(v245);
                      }
                    }
                    MEMORY[0x227684CE8](v241, 0x10F0C40B62ED6C6);
                  }
                }
                v248 = *(std::__shared_weak_count **)&v283[8];
                if (*(_QWORD *)&v283[8])
                {
                  v249 = (unint64_t *)(*(_QWORD *)&v283[8] + 8);
                  do
                    v250 = __ldaxr(v249);
                  while (__stlxr(v250 - 1, v249));
                  if (!v250)
                  {
                    ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                    std::__shared_weak_count::__release_weak(v248);
                  }
                }
                v251 = *(std::__shared_weak_count **)&object[16];
                if (*(_QWORD *)&object[16])
                {
                  v252 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                  do
                    v253 = __ldaxr(v252);
                  while (__stlxr(v253 - 1, v252));
                  if (!v253)
                  {
                    ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
                    std::__shared_weak_count::__release_weak(v251);
                  }
                }
LABEL_395:
                if (v13)
                {
                  sub_2245664AC(a2, object);
                  sub_22322C138((uint64_t)&v270, "KeyframePlaneStorage: Cannot persist KeyframePlaneSegmentation %.13s because it is not in memory", object);
                  sub_223182C08((uint64_t)&v270);
                }
                sub_223182C08((uint64_t)&v270);
                v254 = v278;
                if (v278)
                {
                  v255 = (unint64_t *)&v278->__shared_owners_;
                  do
                    v256 = __ldaxr(v255);
                  while (__stlxr(v256 - 1, v255));
                  if (!v256)
                  {
                    ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                    std::__shared_weak_count::__release_weak(v254);
                  }
                }
                return 0;
              }
            }
            memcpy(p_dst, __s, v55);
            goto LABEL_119;
          }
        }
        memmove(v47, v20, v19);
        goto LABEL_81;
      }
    }
    memmove(v42, v40, v41);
    goto LABEL_73;
  }
  v261 = v3;
  v4 = v3[4];
  if (*(_BYTE *)(v4 + 40) && *(_QWORD *)(v4 + 32) >= *(_QWORD *)(v4 + 24))
    return 0;
  v260 = a1;
  sub_223729BE0(&v267);
  if (**((int **)v267 + 7) <= 3)
  {
    v5 = *((unsigned __int8 *)v267 + 72);
    v6 = sub_22322F254((uint64_t)v267, "OSLogSurrogateAppender", 1, 0);
    v7 = v6;
    if (v5 || v6 != 0)
    {
      v270 = &v267;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v272 = std::chrono::system_clock::now().__d_.__rep_;
      v273 = 3;
      v274 = "unknown file";
      v275 = 284;
      v277 = 0;
      v278 = 0;
      v276 = "unknown function";
      sub_2245664AC(a2, __s);
      v9 = (unsigned __int8 *)*v270;
      v10 = (char *)*v270 + 16;
      v263 = v10;
      if (*((char *)*v270 + 39) < 0)
      {
        v10 = (const char *)*((_QWORD *)v9 + 2);
        v11 = *((_QWORD *)v9 + 3);
        v22 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v22 & 1) != 0)
          goto LABEL_21;
      }
      else
      {
        v11 = *((unsigned __int8 *)*v270 + 39);
        v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v12 & 1) != 0)
          goto LABEL_21;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if (v283[0] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_21:
      if (byte_255788F57 >= 0)
        v23 = (const char *)&xmmword_255788F40;
      else
        v23 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v24 = byte_255788F57;
      else
        v24 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v23, v10);
      v25 = &object[8];
      if (v24 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v24 >= 0x17)
      {
        v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v24 | 7) != 0x17)
          v26 = v24 | 7;
        v27 = v26 + 1;
        v25 = operator new(v26 + 1);
        *(_QWORD *)&object[16] = v24;
        *(_QWORD *)v283 = v27 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v25;
      }
      else
      {
        v283[7] = v24;
        if (!v24)
        {
LABEL_35:
          v25[v24] = 0;
          v283[8] = 1;
          v28 = &v283[16];
          if (v11 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v11 >= 0x17)
          {
            v29 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v11 | 7) != 0x17)
              v29 = v11 | 7;
            v30 = v29 + 1;
            v28 = operator new(v29 + 1);
            v284 = v11;
            v285 = v30 | 0x8000000000000000;
            *(_QWORD *)&v283[16] = v28;
          }
          else
          {
            HIBYTE(v285) = v11;
            if (!v11)
            {
LABEL_43:
              v28[v11] = 0;
              v286 = 1;
              v31 = *(NSObject **)object;
              if (SHIBYTE(v285) < 0)
                operator delete(*(void **)&v283[16]);
              if (v283[8] && (v283[7] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (!v7 || !*(_QWORD *)(v7 + 24))
              {
                os_log_type_enabled(v31, OS_LOG_TYPE_INFO);
                *(_QWORD *)object = 0xD04100202;
                *(_WORD *)&object[8] = 2080;
                *(_QWORD *)&object[10] = __s;
                v38 = (void *)_os_log_send_and_compose_impl();
                if (v38)
                  free(v38);
                goto LABEL_179;
              }
              v32 = _os_log_pack_size();
              v33 = operator new(v32, (std::align_val_t)8uLL);
              v34 = (_QWORD *)operator new();
              *v34 = &off_24EC1F7F0;
              v34[1] = 0;
              v34[2] = 0;
              v34[3] = v33;
              *(_QWORD *)v287 = v33;
              *(_QWORD *)&v287[8] = v33;
              v288 = 0uLL;
              *(_QWORD *)&v287[16] = v34;
              v35 = strlen(__s);
              if (v35 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v36 = v35;
              if (v35 >= 0x17)
              {
                v58 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v35 | 7) != 0x17)
                  v58 = v35 | 7;
                v59 = v58 + 1;
                v37 = operator new(v58 + 1);
                *(_QWORD *)&v281 = v36;
                *((_QWORD *)&v281 + 1) = v59 | 0x8000000000000000;
                __dst = v37;
              }
              else
              {
                HIBYTE(v281) = v35;
                v37 = &__dst;
                if (!v35)
                {
LABEL_100:
                  *((_BYTE *)v37 + v36) = 0;
                  v60 = __dst;
                  *(_QWORD *)v279 = v281;
                  *(_QWORD *)&v279[7] = *(_QWORD *)((char *)&v281 + 7);
                  v61 = HIBYTE(v281);
                  v62 = operator new(0x38uLL);
                  v62[1] = 0;
                  v62[2] = 0;
                  v62[3] = off_24EC1FA48;
                  *v62 = &off_24EC1F9F8;
                  v63 = *(_QWORD *)v279;
                  v62[4] = v60;
                  v62[5] = v63;
                  *(_QWORD *)((char *)v62 + 47) = *(_QWORD *)&v279[7];
                  *((_BYTE *)v62 + 55) = v61;
                  *(_QWORD *)v279 = 0;
                  *(_QWORD *)&v279[7] = 0;
                  v64 = (std::__shared_weak_count *)*((_QWORD *)&v288 + 1);
                  *(_QWORD *)&v288 = v62 + 3;
                  *((_QWORD *)&v288 + 1) = v62;
                  if (v64)
                  {
                    v65 = (unint64_t *)&v64->__shared_owners_;
                    do
                      v66 = __ldaxr(v65);
                    while (__stlxr(v66 - 1, v65));
                    if (!v66)
                    {
                      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                      std::__shared_weak_count::__release_weak(v64);
                    }
                  }
                  *(_OWORD *)object = *(_OWORD *)v287;
                  v67 = v288;
                  *(_QWORD *)&object[16] = *(_QWORD *)&v287[16];
                  if (*(_QWORD *)&v287[16])
                  {
                    v68 = (unint64_t *)(*(_QWORD *)&v287[16] + 8);
                    do
                      v69 = __ldxr(v68);
                    while (__stxr(v69 + 1, v68));
                  }
                  v70 = (std::__shared_weak_count *)*((_QWORD *)&v288 + 1);
                  *(_QWORD *)v283 = v67;
                  *(_QWORD *)&v283[8] = *((_QWORD *)&v288 + 1);
                  if (*((_QWORD *)&v288 + 1))
                  {
                    v71 = (unint64_t *)(*((_QWORD *)&v288 + 1) + 8);
                    do
                      v72 = __ldxr(v71);
                    while (__stxr(v72 + 1, v71));
                    *(_QWORD *)&v283[16] = v67;
                    do
                      v73 = __ldaxr(v71);
                    while (__stlxr(v73 - 1, v71));
                    if (!v73)
                    {
                      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                      std::__shared_weak_count::__release_weak(v70);
                    }
                  }
                  else
                  {
                    *(_QWORD *)&v283[16] = v67;
                  }
                  v90 = *(std::__shared_weak_count **)&v287[16];
                  if (*(_QWORD *)&v287[16])
                  {
                    v91 = (unint64_t *)(*(_QWORD *)&v287[16] + 8);
                    do
                      v92 = __ldaxr(v91);
                    while (__stlxr(v92 - 1, v91));
                    if (!v92)
                    {
                      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                      std::__shared_weak_count::__release_weak(v90);
                    }
                  }
                  v93 = *(_QWORD *)object;
                  if (*(char *)(*(_QWORD *)&v283[16] + 31) >= 0)
                    v94 = *(_QWORD *)&v283[16] + 8;
                  else
                    v94 = *(_QWORD *)(*(_QWORD *)&v283[16] + 8);
                  v95 = _os_log_pack_fill();
                  *(_DWORD *)v95 = 68157954;
                  *(_DWORD *)(v95 + 4) = 13;
                  *(_WORD *)(v95 + 8) = 2080;
                  *(_QWORD *)(v95 + 10) = v94;
                  v96 = operator new();
                  v97 = v9[39];
                  v98 = (const char *)*((_QWORD *)v9 + 2);
                  v99 = *((_QWORD *)v9 + 3);
                  v100 = *(_OWORD *)v283;
                  *(_OWORD *)(v96 + 8) = *(_OWORD *)&object[8];
                  if ((v97 & 0x80u) != 0)
                    v97 = v99;
                  else
                    v98 = v263;
                  *(_QWORD *)v96 = v93;
                  *(_QWORD *)&object[8] = 0;
                  *(_QWORD *)&object[16] = 0;
                  *(_OWORD *)(v96 + 24) = v100;
                  *(_QWORD *)v283 = 0;
                  *(_QWORD *)&v283[8] = 0;
                  *(_QWORD *)(v96 + 40) = v98;
                  *(_QWORD *)(v96 + 48) = v97;
                  *(_BYTE *)(v96 + 56) = 1;
                  __dst = 0;
                  *(_QWORD *)v287 = v96;
                  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), v287);
                  v101 = *(_QWORD *)v287;
                  *(_QWORD *)v287 = 0;
                  if (v101)
                  {
                    v102 = *(std::__shared_weak_count **)(v101 + 32);
                    if (v102)
                    {
                      v103 = (unint64_t *)&v102->__shared_owners_;
                      do
                        v104 = __ldaxr(v103);
                      while (__stlxr(v104 - 1, v103));
                      if (!v104)
                      {
                        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                        std::__shared_weak_count::__release_weak(v102);
                      }
                    }
                    v105 = *(std::__shared_weak_count **)(v101 + 16);
                    if (v105)
                    {
                      v106 = (unint64_t *)&v105->__shared_owners_;
                      do
                        v107 = __ldaxr(v106);
                      while (__stlxr(v107 - 1, v106));
                      if (!v107)
                      {
                        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                        std::__shared_weak_count::__release_weak(v105);
                      }
                    }
                    MEMORY[0x227684CE8](v101, 0x10F0C40B62ED6C6);
                    v108 = __dst;
                    __dst = 0;
                    if (v108)
                    {
                      v109 = (std::__shared_weak_count *)v108[4];
                      if (v109)
                      {
                        v110 = (unint64_t *)&v109->__shared_owners_;
                        do
                          v111 = __ldaxr(v110);
                        while (__stlxr(v111 - 1, v110));
                        if (!v111)
                        {
                          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                          std::__shared_weak_count::__release_weak(v109);
                        }
                      }
                      v112 = (std::__shared_weak_count *)v108[2];
                      if (v112)
                      {
                        v113 = (unint64_t *)&v112->__shared_owners_;
                        do
                          v114 = __ldaxr(v113);
                        while (__stlxr(v114 - 1, v113));
                        if (!v114)
                        {
                          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                          std::__shared_weak_count::__release_weak(v112);
                        }
                      }
                      MEMORY[0x227684CE8](v108, 0x10F0C40B62ED6C6);
                    }
                  }
                  v115 = *(std::__shared_weak_count **)&v283[8];
                  if (*(_QWORD *)&v283[8])
                  {
                    v116 = (unint64_t *)(*(_QWORD *)&v283[8] + 8);
                    do
                      v117 = __ldaxr(v116);
                    while (__stlxr(v117 - 1, v116));
                    if (!v117)
                    {
                      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                      std::__shared_weak_count::__release_weak(v115);
                    }
                  }
                  v118 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                  {
                    v119 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                    do
                      v120 = __ldaxr(v119);
                    while (__stlxr(v120 - 1, v119));
                    if (!v120)
                    {
                      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                      std::__shared_weak_count::__release_weak(v118);
                    }
                  }
LABEL_179:
                  if (v5)
                  {
                    sub_2245664AC(a2, object);
                    sub_22322C138((uint64_t)&v270, "KeyframePlaneStorage: Persisting KeyframeSegmentation %.13s", object);
                    sub_223182C08((uint64_t)&v270);
                  }
                  sub_223182C08((uint64_t)&v270);
                  v121 = v278;
                  if (v278)
                  {
                    v122 = (unint64_t *)&v278->__shared_owners_;
                    do
                      v123 = __ldaxr(v122);
                    while (__stlxr(v123 - 1, v122));
                    if (!v123)
                    {
                      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                      std::__shared_weak_count::__release_weak(v121);
                    }
                  }
                  goto LABEL_186;
                }
              }
              memcpy(v37, __s, v36);
              goto LABEL_100;
            }
          }
          memmove(v28, v10, v11);
          goto LABEL_43;
        }
      }
      memmove(v25, v23, v24);
      goto LABEL_35;
    }
  }
LABEL_186:
  v124 = v261[4];
  v126 = *(_QWORD *)(v124 + 208);
  v125 = *(_QWORD *)(v124 + 216);
  v268 = 0;
  v269 = 0;
  v267 = 0;
  v127 = v125 - v126;
  if (v127)
  {
    v128 = 0x21CFB2B78C13521DLL * (v127 >> 3);
    if (v128 >> 60)
      sub_22316E078();
    v267 = operator new(0x1CFB2B78C13521D0 * (v127 >> 3));
    v268 = (char *)v267;
    v269 = (char *)v267 + 16 * v128;
    v124 = v261[4];
    v129 = *(unsigned __int8 **)(v124 + 208);
    v264 = *(unsigned __int8 **)(v124 + 216);
    if (v129 != v264)
    {
      v130 = "KPStorage: KP %.13s (part of KFS %.13s) is not linked to a GP.";
      for (i = sub_22342DA5C(v260 + 10, (uint64_t)v129); ; i = sub_22342DA5C(v260 + 10, (uint64_t)v129))
      {
        if (i)
        {
          v133 = (_OWORD *)i[4];
          v134 = v268;
          if (v268 < v269)
          {
            *(_OWORD *)v268 = *v133;
            v132 = v134 + 16;
            goto LABEL_191;
          }
          v135 = (char *)v267;
          v136 = (v268 - (_BYTE *)v267) >> 4;
          v137 = v136 + 1;
          if ((unint64_t)(v136 + 1) >> 60)
            sub_22316E078();
          v138 = v269 - (_BYTE *)v267;
          if ((v269 - (_BYTE *)v267) >> 3 > v137)
            v137 = v138 >> 3;
          if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF0)
            v139 = 0xFFFFFFFFFFFFFFFLL;
          else
            v139 = v137;
          if (v139)
          {
            if (v139 >> 60)
              sub_223174E94();
            v140 = (char *)operator new(16 * v139);
            v141 = &v140[16 * v136];
            *(_OWORD *)v141 = *v133;
            v142 = v141;
            if (v134 == v135)
            {
LABEL_222:
              v132 = v141 + 16;
              v267 = v142;
              v268 = v141 + 16;
              v269 = &v140[16 * v139];
              if (v134)
                goto LABEL_223;
              goto LABEL_191;
            }
          }
          else
          {
            v140 = 0;
            v141 = (char *)(16 * v136);
            *(_OWORD *)(16 * v136) = *v133;
            v142 = (char *)(16 * v136);
            if (v134 == v135)
              goto LABEL_222;
          }
          do
          {
            *((_OWORD *)v142 - 1) = *((_OWORD *)v134 - 1);
            v142 -= 16;
            v134 -= 16;
          }
          while (v134 != v135);
          v134 = (char *)v267;
          v132 = v141 + 16;
          v267 = v142;
          v268 = v141 + 16;
          v269 = &v140[16 * v139];
          if (v134)
LABEL_223:
            operator delete(v134);
LABEL_191:
          v268 = v132;
          goto LABEL_192;
        }
        v143 = v268;
        if (v268 < v269)
        {
          *(_QWORD *)v268 = 0;
          v143[1] = 0;
          v144 = (char *)(v143 + 2);
          goto LABEL_230;
        }
        v145 = v267;
        v146 = (v268 - (_BYTE *)v267) >> 4;
        v147 = v146 + 1;
        if ((unint64_t)(v146 + 1) >> 60)
          sub_22316E078();
        v148 = v269 - (_BYTE *)v267;
        if ((v269 - (_BYTE *)v267) >> 3 > v147)
          v147 = v148 >> 3;
        if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFF0)
          v149 = 0xFFFFFFFFFFFFFFFLL;
        else
          v149 = v147;
        if (v149)
        {
          if (v149 >> 60)
            sub_223174E94();
          v150 = (char *)operator new(16 * v149);
          v151 = &v150[16 * v146];
          *(_QWORD *)v151 = 0;
          *((_QWORD *)v151 + 1) = 0;
          v152 = v151;
          if (v143 == v145)
          {
LABEL_228:
            v144 = v151 + 16;
            v267 = v152;
            v268 = v151 + 16;
            v269 = &v150[16 * v149];
            if (v143)
              goto LABEL_229;
            goto LABEL_230;
          }
        }
        else
        {
          v150 = 0;
          v151 = (char *)(16 * v146);
          *(_QWORD *)v151 = 0;
          *((_QWORD *)v151 + 1) = 0;
          v152 = (char *)(16 * v146);
          if (v143 == v145)
            goto LABEL_228;
        }
        do
        {
          *((_OWORD *)v152 - 1) = *((_OWORD *)v143 - 1);
          v152 -= 16;
          v143 -= 2;
        }
        while (v143 != v145);
        v143 = v267;
        v144 = v151 + 16;
        v267 = v152;
        v268 = v151 + 16;
        v269 = &v150[16 * v149];
        if (v143)
LABEL_229:
          operator delete(v143);
LABEL_230:
        v268 = v144;
        v153 = atomic_load((unsigned __int8 *)&qword_2557892F0);
        if ((v153 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
        {
          __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
          __cxa_guard_release(&qword_2557892F0);
        }
        sub_223729BE0(object);
        if (*(char *)(*(_QWORD *)object + 39) < 0)
        {
          v154 = *(const void **)(*(_QWORD *)object + 16);
          v155 = *(_QWORD *)(*(_QWORD *)object + 24);
        }
        else
        {
          v154 = (const void *)(*(_QWORD *)object + 16);
          v155 = *(unsigned __int8 *)(*(_QWORD *)object + 39);
        }
        sub_223195728((uint64_t)&stru_255789280, v154, v155, v130, 0x3EuLL);
        sub_22372F598(&v266);
        if (**(int **)(v266 + 56) <= 5)
        {
          v156 = *(unsigned __int8 *)(v266 + 72);
          v157 = sub_22322F254(v266, "OSLogSurrogateAppender", 1, 0);
          v158 = v157;
          if (v156 || v157)
          {
            v159 = v130;
            v270 = (void **)&v266;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v272 = std::chrono::system_clock::now().__d_.__rep_;
            v273 = 5;
            v274 = "unknown file";
            v275 = 296;
            v276 = "unknown function";
            v277 = 0;
            v278 = 0;
            sub_2245664AC(v129, &__dst);
            sub_2245664AC(a2, v279);
            v265 = v279;
            v160 = *v270;
            v161 = (char *)*v270 + 16;
            v259 = v161;
            if (*((char *)*v270 + 39) < 0)
            {
              v161 = (const char *)*((_QWORD *)v160 + 2);
              v162 = *((_QWORD *)v160 + 3);
              v258 = *v270;
              v164 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v164 & 1) == 0)
              {
LABEL_338:
                if (__cxa_guard_acquire(&qword_255788F58))
                {
                  sub_224568628((uint64_t)v287);
                  sub_223199C58("com.apple.cv3d", (unint64_t)v287, &xmmword_255788F40);
                  if ((_BYTE)v288 && (v287[23] & 0x80000000) != 0)
                    operator delete(*(void **)v287);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                  __cxa_guard_release(&qword_255788F58);
                }
              }
            }
            else
            {
              v162 = *((unsigned __int8 *)*v270 + 39);
              v258 = *v270;
              v163 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v163 & 1) == 0)
                goto LABEL_338;
            }
            if (byte_255788F57 >= 0)
              v165 = (const char *)&xmmword_255788F40;
            else
              v165 = (const char *)xmmword_255788F40;
            if (byte_255788F57 >= 0)
              v166 = byte_255788F57;
            else
              v166 = *((_QWORD *)&xmmword_255788F40 + 1);
            *(_QWORD *)object = os_log_create(v165, v161);
            if (v166 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v166 >= 0x17)
            {
              v168 = (v166 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v166 | 7) != 0x17)
                v168 = v166 | 7;
              v169 = v168 + 1;
              v167 = operator new(v168 + 1);
              *(_QWORD *)&object[16] = v166;
              *(_QWORD *)v283 = v169 | 0x8000000000000000;
              *(_QWORD *)&object[8] = v167;
            }
            else
            {
              v283[7] = v166;
              v167 = &object[8];
              if (!v166)
              {
LABEL_255:
                v167[v166] = 0;
                v283[8] = 1;
                if (v162 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                if (v162 >= 0x17)
                {
                  v172 = (v162 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v162 | 7) != 0x17)
                    v172 = v162 | 7;
                  v173 = v172 + 1;
                  v170 = operator new(v172 + 1);
                  v284 = v162;
                  v285 = v173 | 0x8000000000000000;
                  *(_QWORD *)&v283[16] = v170;
                }
                else
                {
                  HIBYTE(v285) = v162;
                  v170 = &v283[16];
                  if (!v162)
                  {
                    v283[16] = 0;
                    v286 = 1;
                    v171 = *(NSObject **)object;
                    if ((SHIBYTE(v285) & 0x80000000) == 0)
                      goto LABEL_259;
LABEL_265:
                    operator delete(*(void **)&v283[16]);
                    v130 = v159;
                    if (v283[8])
                      goto LABEL_266;
                    goto LABEL_268;
                  }
                }
                memmove(v170, v161, v162);
                v170[v162] = 0;
                v286 = 1;
                v171 = *(NSObject **)object;
                if (SHIBYTE(v285) < 0)
                  goto LABEL_265;
LABEL_259:
                v130 = v159;
                if (v283[8])
                {
LABEL_266:
                  if ((v283[7] & 0x80000000) != 0)
                    operator delete(*(void **)&object[8]);
                }
LABEL_268:
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (v158 && *(_QWORD *)(v158 + 24))
                {
                  v174 = _os_log_pack_size();
                  v175 = (std::__shared_weak_count_vtbl *)operator new(v174, (std::align_val_t)8uLL);
                  v176 = (std::__shared_weak_count *)operator new();
                  v176->__shared_owners_ = 0;
                  v177 = (unint64_t *)&v176->__shared_owners_;
                  v176->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                  v176->__shared_weak_owners_ = 0;
                  v176[1].__vftable = v175;
                  *(_QWORD *)__s = v175;
                  v291 = v175;
                  v292 = v176;
                  v293 = 0;
                  v294 = 0;
                  sub_223738130((uint64_t)object, (char *)&__dst, &v265);
                  v178 = (char *)operator new(0x50uLL);
                  v179 = (std::__shared_weak_count *)v178;
                  *((_QWORD *)v178 + 1) = 0;
                  v180 = (unint64_t *)(v178 + 8);
                  *((_QWORD *)v178 + 2) = 0;
                  *(_QWORD *)v178 = &off_24EC20730;
                  *((_QWORD *)v178 + 3) = off_24EC20780;
                  *((_OWORD *)v178 + 2) = *(_OWORD *)&object[8];
                  *((_QWORD *)v178 + 6) = *(_QWORD *)v283;
                  *(_OWORD *)(v178 + 56) = *(_OWORD *)&v283[8];
                  *((_QWORD *)v178 + 9) = v284;
                  v293 = v178 + 24;
                  v294 = v178;
                  *(_QWORD *)v287 = v175;
                  *(_QWORD *)&v287[8] = v175;
                  *(_QWORD *)&v287[16] = v176;
                  do
                    v181 = __ldxr(v177);
                  while (__stxr(v181 + 1, v177));
                  *(_QWORD *)&v288 = v178 + 24;
                  *((_QWORD *)&v288 + 1) = v178;
                  v130 = v159;
                  do
                    v182 = __ldxr(v180);
                  while (__stxr(v182 + 1, v180));
                  v289 = v178 + 24;
                  do
                    v183 = __ldaxr(v180);
                  while (__stlxr(v183 - 1, v180));
                  if (!v183)
                  {
                    (*(void (**)(char *))(*(_QWORD *)v178 + 16))(v178);
                    std::__shared_weak_count::__release_weak(v179);
                  }
                  v184 = v292;
                  if (v292)
                  {
                    v185 = (unint64_t *)&v292->__shared_owners_;
                    do
                      v186 = __ldaxr(v185);
                    while (__stlxr(v186 - 1, v185));
                    if (!v186)
                    {
                      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                      std::__shared_weak_count::__release_weak(v184);
                    }
                  }
                  v187 = *(_QWORD *)v287;
                  if (v289[31] >= 0)
                    v188 = v289 + 8;
                  else
                    v188 = (char *)*((_QWORD *)v289 + 1);
                  if (v289[55] >= 0)
                    v189 = v289 + 32;
                  else
                    v189 = (char *)*((_QWORD *)v289 + 4);
                  v190 = _os_log_pack_fill();
                  *(_DWORD *)v190 = 68158466;
                  *(_DWORD *)(v190 + 4) = 13;
                  *(_WORD *)(v190 + 8) = 2080;
                  *(_QWORD *)(v190 + 10) = v188;
                  *(_WORD *)(v190 + 18) = 1040;
                  *(_DWORD *)(v190 + 20) = 13;
                  *(_WORD *)(v190 + 24) = 2080;
                  *(_QWORD *)(v190 + 26) = v189;
                  v191 = operator new();
                  v192 = *((unsigned __int8 *)v258 + 39);
                  v193 = (const char *)v258[2];
                  v194 = v258[3];
                  v195 = v288;
                  *(_OWORD *)(v191 + 8) = *(_OWORD *)&v287[8];
                  if ((v192 & 0x80u) != 0)
                    v192 = v194;
                  else
                    v193 = v259;
                  *(_QWORD *)v191 = v187;
                  *(_QWORD *)&v287[8] = 0;
                  *(_QWORD *)&v287[16] = 0;
                  *(_OWORD *)(v191 + 24) = v195;
                  v288 = 0uLL;
                  *(_QWORD *)(v191 + 40) = v193;
                  *(_QWORD *)(v191 + 48) = v192;
                  *(_BYTE *)(v191 + 56) = 16;
                  *(_QWORD *)__s = 0;
                  *(_QWORD *)object = v191;
                  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v158 + 24) + 40))(*(_QWORD *)(v158 + 24), object);
                  v196 = *(_QWORD *)object;
                  *(_QWORD *)object = 0;
                  if (v196)
                  {
                    v197 = *(std::__shared_weak_count **)(v196 + 32);
                    if (v197)
                    {
                      v198 = (unint64_t *)&v197->__shared_owners_;
                      do
                        v199 = __ldaxr(v198);
                      while (__stlxr(v199 - 1, v198));
                      if (!v199)
                      {
                        ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                        std::__shared_weak_count::__release_weak(v197);
                      }
                    }
                    v200 = *(std::__shared_weak_count **)(v196 + 16);
                    if (v200)
                    {
                      v201 = (unint64_t *)&v200->__shared_owners_;
                      do
                        v202 = __ldaxr(v201);
                      while (__stlxr(v202 - 1, v201));
                      if (!v202)
                      {
                        ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                        std::__shared_weak_count::__release_weak(v200);
                      }
                    }
                    MEMORY[0x227684CE8](v196, 0x10F0C40B62ED6C6);
                    v203 = *(_QWORD *)__s;
                    *(_QWORD *)__s = 0;
                    if (v203)
                    {
                      v204 = *(std::__shared_weak_count **)(v203 + 32);
                      if (v204)
                      {
                        v205 = (unint64_t *)&v204->__shared_owners_;
                        do
                          v206 = __ldaxr(v205);
                        while (__stlxr(v206 - 1, v205));
                        if (!v206)
                        {
                          ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                          std::__shared_weak_count::__release_weak(v204);
                        }
                      }
                      v207 = *(std::__shared_weak_count **)(v203 + 16);
                      if (v207)
                      {
                        v208 = (unint64_t *)&v207->__shared_owners_;
                        do
                          v209 = __ldaxr(v208);
                        while (__stlxr(v209 - 1, v208));
                        if (!v209)
                        {
                          ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                          std::__shared_weak_count::__release_weak(v207);
                        }
                      }
                      MEMORY[0x227684CE8](v203, 0x10F0C40B62ED6C6);
                    }
                  }
                  v210 = (std::__shared_weak_count *)*((_QWORD *)&v288 + 1);
                  if (*((_QWORD *)&v288 + 1))
                  {
                    v211 = (unint64_t *)(*((_QWORD *)&v288 + 1) + 8);
                    do
                      v212 = __ldaxr(v211);
                    while (__stlxr(v212 - 1, v211));
                    if (!v212)
                    {
                      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                      std::__shared_weak_count::__release_weak(v210);
                    }
                  }
                  v213 = *(std::__shared_weak_count **)&v287[16];
                  if (*(_QWORD *)&v287[16])
                  {
                    v214 = (unint64_t *)(*(_QWORD *)&v287[16] + 8);
                    do
                      v215 = __ldaxr(v214);
                    while (__stlxr(v215 - 1, v214));
                    if (!v215)
                    {
                      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                      std::__shared_weak_count::__release_weak(v213);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v171, OS_LOG_TYPE_ERROR);
                  *(_QWORD *)object = 0xD04100402;
                  *(_WORD *)&object[8] = 2080;
                  *(_QWORD *)&object[10] = &__dst;
                  *(_WORD *)&object[18] = 1040;
                  *(_DWORD *)&object[20] = 13;
                  *(_WORD *)v283 = 2080;
                  *(_QWORD *)&v283[2] = v265;
                  v216 = (void *)_os_log_send_and_compose_impl();
                  if (v216)
                    free(v216);
                }
                if (v156)
                {
                  sub_2245664AC(v129, object);
                  sub_2245664AC(a2, v287);
                  sub_22322C138((uint64_t)&v270, v130, object, v287);
                  sub_223182C08((uint64_t)&v270);
                }
                sub_223182C08((uint64_t)&v270);
                v217 = v278;
                if (v278)
                {
                  v218 = (unint64_t *)&v278->__shared_owners_;
                  do
                    v219 = __ldaxr(v218);
                  while (__stlxr(v219 - 1, v218));
                  if (!v219)
                  {
                    ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
                    std::__shared_weak_count::__release_weak(v217);
                  }
                }
                goto LABEL_192;
              }
            }
            memmove(v167, v165, v166);
            goto LABEL_255;
          }
        }
LABEL_192:
        v129 += 424;
        if (v129 == v264)
        {
          v124 = v261[4];
          break;
        }
      }
    }
  }
  v220 = sub_223710B30((uint64_t *)v260[15], (unsigned __int8 *)v124, (uint64_t)&v267);
  if ((_DWORD)v220)
  {
    v221 = v261[4];
    v222 = *(_QWORD *)(v221 + 24);
    if (!*(_BYTE *)(v221 + 40))
      *(_BYTE *)(v221 + 40) = 1;
    *(_QWORD *)(v221 + 32) = v222;
  }
  if (v267)
  {
    v268 = (char *)v267;
    operator delete(v267);
  }
  return v220;
}

void sub_2237313EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,char a57)
{
  if (a57)
  {
    if (a56 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void sub_223731434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *object,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58)
{
  uint64_t v58;

  if (*(_BYTE *)(v58 - 168) && *(char *)(v58 - 169) < 0)
    operator delete(*(void **)(v58 - 192));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a32);
  if (!__p)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

char *sub_223731730(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  const char *v10;
  size_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  const char *v14;
  size_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  char *v27;
  std::__shared_weak_count *v28;
  size_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint8x8_t v73;
  void **v74;
  _QWORD *v75;
  unint64_t v77;
  uint64_t v79;
  __int128 v80;
  float v81;
  float v82;
  _BOOL8 v83;
  unint64_t v84;
  unint64_t v85;
  size_t prime;
  void *v87;
  void *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  size_t v92;
  size_t v93;
  size_t v94;
  _QWORD *i;
  size_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint8x8_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  size_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v113;
  uint64_t v114;
  size_t v115;
  const char *v116;
  void *v117;
  unint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  unsigned __int8 v124;
  const char *v125;
  size_t v126;
  _BYTE *v127;
  unint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE *v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  size_t v137;
  void *v138;
  _QWORD *v139;
  size_t v140;
  size_t v141;
  _QWORD *p_dst;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  char v147;
  _QWORD *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  _QWORD *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned __int8 **v196;
  uint64_t v197;
  unsigned int __src;
  const char *__srca;
  const char *v200;
  uint64_t *v201;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v203;
  int v204;
  const char *v205;
  int v206;
  const char *v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  uint64_t v210;
  _BYTE v211[30];
  _QWORD *__dst;
  __int128 v213;
  _BYTE object[24];
  _BYTE v215[24];
  size_t v216;
  unint64_t v217;
  char v218;
  _BYTE v219[24];
  __int128 v220;
  char *v221;
  char __s[8];
  std::__shared_weak_count_vtbl *v223;
  std::__shared_weak_count *v224;
  char *v225;
  char *v226;
  uint64_t v227;

  v227 = *MEMORY[0x24BDAC8D0];
  sub_223729BE0(&v210);
  if (**(int **)(v210 + 56) > 3)
    goto LABEL_105;
  v3 = *(unsigned __int8 *)(v210 + 72);
  v7 = sub_22322F254(v210, "OSLogSurrogateAppender", 1, 0);
  v8 = v7;
  if (!(_DWORD)v3 && v7 == 0)
    goto LABEL_105;
  v201 = &v210;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v203 = std::chrono::system_clock::now().__d_.__rep_;
  v204 = 3;
  v205 = "unknown file";
  v206 = 412;
  v208 = 0;
  v209 = 0;
  v207 = "unknown function";
  sub_2245664AC((unsigned __int8 *)a2, &__dst);
  __src = v3;
  sub_2245664AC(*a3, v211);
  v200 = v211;
  v10 = (const char *)(v210 + 16);
  v194 = v210;
  v195 = v210 + 16;
  if (*(char *)(v210 + 39) < 0)
  {
    v10 = *(const char **)(v210 + 16);
    v11 = *(_QWORD *)(v210 + 24);
    v196 = a3;
    v13 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v13 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v11 = *(unsigned __int8 *)(v210 + 39);
    v196 = a3;
    v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v12 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
    if (v215[0] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F57 >= 0)
    v14 = (const char *)&xmmword_255788F40;
  else
    v14 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v15 = byte_255788F57;
  else
    v15 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)object = os_log_create(v14, v10);
  v16 = &object[8];
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v15 >= 0x17)
  {
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v17 = v15 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    *(_QWORD *)&object[16] = v15;
    *(_QWORD *)v215 = v18 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v16;
    goto LABEL_23;
  }
  v215[7] = v15;
  if (v15)
LABEL_23:
    memmove(v16, v14, v15);
  v16[v15] = 0;
  v215[8] = 1;
  v19 = &v215[16];
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  a3 = v196;
  if (v11 >= 0x17)
  {
    v21 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v21 = v11 | 7;
    v22 = v21 + 1;
    v19 = operator new(v21 + 1);
    v216 = v11;
    v217 = v22 | 0x8000000000000000;
    *(_QWORD *)&v215[16] = v19;
  }
  else
  {
    HIBYTE(v217) = v11;
    if (!v11)
    {
      v215[16] = 0;
      v218 = 1;
      v20 = *(NSObject **)object;
      if ((SHIBYTE(v217) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v19, v10, v11);
  v19[v11] = 0;
  v218 = 1;
  v20 = *(NSObject **)object;
  if ((SHIBYTE(v217) & 0x80000000) == 0)
  {
LABEL_28:
    v3 = v3;
    if (!v215[8])
      goto LABEL_37;
LABEL_35:
    if ((v215[7] & 0x80000000) != 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(*(void **)&v215[16]);
  v3 = v3;
  if (v215[8])
    goto LABEL_35;
LABEL_37:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v8 && *(_QWORD *)(v8 + 24))
  {
    v23 = _os_log_pack_size();
    v24 = (std::__shared_weak_count_vtbl *)operator new(v23, (std::align_val_t)8uLL);
    v25 = (std::__shared_weak_count *)operator new();
    v25->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v25->__shared_weak_owners_ = 0;
    v25[1].__vftable = v24;
    *(_QWORD *)__s = v24;
    v223 = v24;
    v225 = 0;
    v226 = 0;
    v224 = v25;
    sub_223738130((uint64_t)object, (char *)&__dst, &v200);
    v27 = (char *)operator new(0x50uLL);
    v28 = (std::__shared_weak_count *)v27;
    *(_QWORD *)v27 = &off_24EC20730;
    *((_QWORD *)v27 + 3) = off_24EC20780;
    v29 = v216;
    *((_QWORD *)v27 + 6) = *(_QWORD *)v215;
    *((_QWORD *)v27 + 1) = 0;
    v30 = (unint64_t *)(v27 + 8);
    *((_QWORD *)v27 + 2) = 0;
    *((_OWORD *)v27 + 2) = *(_OWORD *)&object[8];
    *(_OWORD *)(v27 + 56) = *(_OWORD *)&v215[8];
    *((_QWORD *)v27 + 9) = v29;
    v225 = v27 + 24;
    v226 = v27;
    *(_QWORD *)v219 = v24;
    *(_QWORD *)&v219[8] = v24;
    *(_QWORD *)&v219[16] = v25;
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
    *(_QWORD *)&v220 = v27 + 24;
    *((_QWORD *)&v220 + 1) = v27;
    do
      v32 = __ldxr(v30);
    while (__stxr(v32 + 1, v30));
    v221 = v27 + 24;
    do
      v33 = __ldaxr(v30);
    while (__stlxr(v33 - 1, v30));
    if (!v33)
    {
      (*(void (**)(char *))(*(_QWORD *)v27 + 16))(v27);
      std::__shared_weak_count::__release_weak(v28);
    }
    v34 = v224;
    if (v224)
    {
      v35 = (unint64_t *)&v224->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = *(_QWORD *)v219;
    if (v221[31] >= 0)
      v38 = v221 + 8;
    else
      v38 = (char *)*((_QWORD *)v221 + 1);
    if (v221[55] >= 0)
      v39 = v221 + 32;
    else
      v39 = (char *)*((_QWORD *)v221 + 4);
    v40 = _os_log_pack_fill();
    *(_DWORD *)v40 = 68158466;
    *(_DWORD *)(v40 + 4) = 13;
    *(_WORD *)(v40 + 8) = 2080;
    *(_QWORD *)(v40 + 10) = v38;
    *(_WORD *)(v40 + 18) = 1040;
    *(_DWORD *)(v40 + 20) = 13;
    *(_WORD *)(v40 + 24) = 2080;
    *(_QWORD *)(v40 + 26) = v39;
    v41 = operator new();
    v42 = *(unsigned __int8 *)(v194 + 39);
    v43 = *(_QWORD *)(v194 + 16);
    v44 = *(_QWORD *)(v194 + 24);
    v45 = v220;
    *(_OWORD *)(v41 + 8) = *(_OWORD *)&v219[8];
    if ((v42 & 0x80u) != 0)
      v42 = v44;
    else
      v43 = v195;
    *(_QWORD *)v41 = v37;
    *(_QWORD *)&v219[8] = 0;
    *(_QWORD *)&v219[16] = 0;
    *(_OWORD *)(v41 + 24) = v45;
    v220 = 0uLL;
    *(_QWORD *)(v41 + 40) = v43;
    *(_QWORD *)(v41 + 48) = v42;
    *(_BYTE *)(v41 + 56) = 1;
    *(_QWORD *)__s = 0;
    *(_QWORD *)object = v41;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), object);
    v46 = *(_QWORD *)object;
    *(_QWORD *)object = 0;
    a3 = v196;
    v3 = __src;
    if (v46)
    {
      v47 = *(std::__shared_weak_count **)(v46 + 32);
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v50 = *(std::__shared_weak_count **)(v46 + 16);
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      MEMORY[0x227684CE8](v46, 0x10F0C40B62ED6C6);
      v53 = *(_QWORD *)__s;
      *(_QWORD *)__s = 0;
      if (v53)
      {
        v54 = *(std::__shared_weak_count **)(v53 + 32);
        if (v54)
        {
          v55 = (unint64_t *)&v54->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)(v53 + 16);
        if (v57)
        {
          v58 = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        MEMORY[0x227684CE8](v53, 0x10F0C40B62ED6C6);
      }
    }
    v60 = (std::__shared_weak_count *)*((_QWORD *)&v220 + 1);
    if (*((_QWORD *)&v220 + 1))
    {
      v61 = (unint64_t *)(*((_QWORD *)&v220 + 1) + 8);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v63 = *(std::__shared_weak_count **)&v219[16];
    if (*(_QWORD *)&v219[16])
    {
      v64 = (unint64_t *)(*(_QWORD *)&v219[16] + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
  }
  else
  {
    os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
    *(_QWORD *)object = 0xD04100402;
    *(_WORD *)&object[8] = 2080;
    *(_QWORD *)&object[10] = &__dst;
    *(_WORD *)&object[18] = 1040;
    *(_DWORD *)&object[20] = 13;
    *(_WORD *)v215 = 2080;
    *(_QWORD *)&v215[2] = v200;
    v66 = (void *)_os_log_send_and_compose_impl();
    if (v66)
      free(v66);
  }
  if ((_DWORD)v3)
  {
    sub_2245664AC((unsigned __int8 *)a2, object);
    sub_2245664AC(*a3, v219);
    sub_22322C138((uint64_t)&v201, "KeyframePlaneStorage: Adding link: KF plane %.13s -> global plane %.13s", object, v219);
    sub_223182C08((uint64_t)&v201);
  }
  sub_223182C08((uint64_t)&v201);
  v67 = v209;
  if (v209)
  {
    v68 = (unint64_t *)&v209->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
LABEL_105:
  v70 = sub_22456636C((unsigned __int8 *)a2);
  v71 = v70;
  v72 = *(_QWORD *)(a1 + 88);
  if (!v72)
    goto LABEL_132;
  v73 = (uint8x8_t)vcnt_s8((int8x8_t)v72);
  v73.i16[0] = vaddlv_u8(v73);
  if (v73.u32[0] > 1uLL)
  {
    v3 = v70;
    if (v70 >= v72)
      v3 = v70 % v72;
  }
  else
  {
    v3 = (v72 - 1) & v70;
  }
  v74 = *(void ***)(*(_QWORD *)(a1 + 80) + 8 * v3);
  if (!v74 || (v75 = *v74) == 0)
  {
LABEL_132:
    v75 = operator new(0x30uLL);
    *v75 = 0;
    v75[1] = v71;
    v80 = *(_OWORD *)a3;
    v81 = (float)(unint64_t)(*(_QWORD *)(a1 + 104) + 1);
    *((_OWORD *)v75 + 1) = *(_OWORD *)a2;
    *((_OWORD *)v75 + 2) = v80;
    v82 = *(float *)(a1 + 112);
    if ((((float)(v82 * (float)v72) >= v81) & ~(v72 == 0)) != 0)
      goto LABEL_178;
    v83 = 1;
    if (v72 >= 3)
      v83 = (v72 & (v72 - 1)) != 0;
    v84 = v83 | (2 * v72);
    v85 = vcvtps_u32_f32(v81 / v82);
    if (v84 <= v85)
      prime = v85;
    else
      prime = v84;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v72 = *(_QWORD *)(a1 + 88);
    }
    if (prime > v72)
    {
LABEL_143:
      if (prime >> 61)
        sub_223174E94();
      v87 = operator new(8 * prime);
      v88 = *(void **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = v87;
      if (v88)
        operator delete(v88);
      v89 = 0;
      *(_QWORD *)(a1 + 88) = prime;
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v89++) = 0;
      while (prime != v89);
      v91 = a1 + 96;
      v90 = *(_QWORD **)(a1 + 96);
      if (!v90)
        goto LABEL_175;
      v92 = v90[1];
      v93 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v94 = v92 & v93;
        *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v94) = v91;
        for (i = (_QWORD *)*v90; *v90; i = (_QWORD *)*v90)
        {
          v96 = i[1] & v93;
          if (v96 == v94)
          {
            v90 = i;
          }
          else
          {
            v97 = *(_QWORD *)(a1 + 80);
            if (*(_QWORD *)(v97 + 8 * v96))
            {
              *v90 = *i;
              v98 = 8 * v96;
              *i = **(_QWORD **)(*(_QWORD *)(a1 + 80) + v98);
              **(_QWORD **)(*(_QWORD *)(a1 + 80) + v98) = i;
            }
            else
            {
              *(_QWORD *)(v97 + 8 * v96) = v90;
              v90 = i;
              v94 = v96;
            }
          }
        }
        goto LABEL_175;
      }
      if (v92 >= prime)
        v92 %= prime;
      *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v92) = v91;
      v102 = (_QWORD *)*v90;
      if (!*v90)
      {
LABEL_175:
        v72 = prime;
        v106 = prime - 1;
        if ((prime & (prime - 1)) != 0)
        {
LABEL_176:
          if (v71 >= v72)
          {
            v3 = v71 % v72;
            v107 = *(_QWORD *)(a1 + 80);
            v108 = *(_QWORD **)(v107 + 8 * (v71 % v72));
            if (v108)
              goto LABEL_179;
            goto LABEL_200;
          }
          v3 = v71;
LABEL_178:
          v107 = *(_QWORD *)(a1 + 80);
          v108 = *(_QWORD **)(v107 + 8 * v3);
          if (v108)
          {
LABEL_179:
            *v75 = *v108;
            goto LABEL_206;
          }
LABEL_200:
          *v75 = *(_QWORD *)(a1 + 96);
          *(_QWORD *)(a1 + 96) = v75;
          *(_QWORD *)(v107 + 8 * v3) = a1 + 96;
          if (!*v75)
          {
LABEL_207:
            ++*(_QWORD *)(a1 + 104);
            goto LABEL_208;
          }
          v118 = *(_QWORD *)(*v75 + 8);
          if ((v72 & (v72 - 1)) != 0)
          {
            if (v118 >= v72)
              v118 %= v72;
          }
          else
          {
            v118 &= v72 - 1;
          }
          v108 = (_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v118);
LABEL_206:
          *v108 = v75;
          goto LABEL_207;
        }
LABEL_199:
        v3 = v106 & v71;
        v107 = *(_QWORD *)(a1 + 80);
        v108 = *(_QWORD **)(v107 + 8 * (v106 & v71));
        if (v108)
          goto LABEL_179;
        goto LABEL_200;
      }
      while (1)
      {
        v104 = v102[1];
        if (v104 >= prime)
          v104 %= prime;
        if (v104 == v92)
          goto LABEL_169;
        v105 = *(_QWORD *)(a1 + 80);
        if (*(_QWORD *)(v105 + 8 * v104))
        {
          *v90 = *v102;
          v103 = 8 * v104;
          *v102 = **(_QWORD **)(*(_QWORD *)(a1 + 80) + v103);
          **(_QWORD **)(*(_QWORD *)(a1 + 80) + v103) = v102;
          v102 = v90;
LABEL_169:
          v90 = v102;
          v102 = (_QWORD *)*v102;
          if (!v102)
            goto LABEL_175;
        }
        else
        {
          *(_QWORD *)(v105 + 8 * v104) = v90;
          v90 = v102;
          v102 = (_QWORD *)*v102;
          v92 = v104;
          if (!v102)
            goto LABEL_175;
        }
      }
    }
    if (prime < v72)
    {
      v99 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 104) / *(float *)(a1 + 112));
      if (v72 < 3 || (v100 = (uint8x8_t)vcnt_s8((int8x8_t)v72), v100.i16[0] = vaddlv_u8(v100), v100.u32[0] > 1uLL))
      {
        v99 = std::__next_prime(v99);
      }
      else
      {
        v101 = 1 << -(char)__clz(v99 - 1);
        if (v99 >= 2)
          v99 = v101;
      }
      if (prime <= v99)
        prime = v99;
      if (prime < v72)
      {
        if (!prime)
        {
          v117 = *(void **)(a1 + 80);
          *(_QWORD *)(a1 + 80) = 0;
          if (v117)
            operator delete(v117);
          v72 = 0;
          *(_QWORD *)(a1 + 88) = 0;
          v106 = -1;
          goto LABEL_199;
        }
        goto LABEL_143;
      }
      v72 = *(_QWORD *)(a1 + 88);
    }
    v106 = v72 - 1;
    if ((v72 & (v72 - 1)) != 0)
      goto LABEL_176;
    goto LABEL_199;
  }
  if (v73.u32[0] < 2uLL)
  {
    while (1)
    {
      v79 = v75[1];
      if (v79 == v70)
      {
        if (v75[2] == *(_QWORD *)a2 && v75[3] == *(_QWORD *)(a2 + 8))
          goto LABEL_182;
      }
      else if ((v79 & (v72 - 1)) != v3)
      {
        goto LABEL_132;
      }
      v75 = (_QWORD *)*v75;
      if (!v75)
        goto LABEL_132;
    }
  }
  while (1)
  {
    v77 = v75[1];
    if (v77 == v70)
      break;
    if (v77 >= v72)
      v77 %= v72;
    if (v77 != v3)
      goto LABEL_132;
LABEL_119:
    v75 = (_QWORD *)*v75;
    if (!v75)
      goto LABEL_132;
  }
  if (v75[2] != *(_QWORD *)a2 || v75[3] != *(_QWORD *)(a2 + 8))
    goto LABEL_119;
LABEL_182:
  *((_OWORD *)v75 + 2) = *(_OWORD *)a3;
  sub_22372F598(&v210);
  if (**(int **)(v210 + 56) > 4)
    goto LABEL_208;
  v109 = *(unsigned __int8 *)(v210 + 72);
  v110 = sub_22322F254(v210, "OSLogSurrogateAppender", 1, 0);
  v111 = v110;
  if (!v109 && v110 == 0)
    goto LABEL_208;
  v201 = &v210;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v203 = std::chrono::system_clock::now().__d_.__rep_;
  v204 = 4;
  v205 = "unknown file";
  v206 = 423;
  v208 = 0;
  v209 = 0;
  v207 = "unknown function";
  sub_2245664AC((unsigned __int8 *)a2, __s);
  v113 = *v201;
  v114 = *v201 + 16;
  v197 = *v201;
  if (*(char *)(*v201 + 39) < 0)
  {
    v116 = *(const char **)(v113 + 16);
    v115 = *(_QWORD *)(v113 + 24);
  }
  else
  {
    v115 = *(unsigned __int8 *)(*v201 + 39);
    v116 = (const char *)(*v201 + 16);
  }
  v124 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v124 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
    if (v215[0] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v125 = (const char *)&xmmword_255788F40;
  else
    v125 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v126 = byte_255788F57;
  else
    v126 = *((_QWORD *)&xmmword_255788F40 + 1);
  __srca = v116;
  *(_QWORD *)object = os_log_create(v125, v116);
  v127 = &object[8];
  if (v126 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v126 >= 0x17)
  {
    v128 = v111;
    v129 = v114;
    v130 = v109;
    v131 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v126 | 7) != 0x17)
      v131 = v126 | 7;
    v132 = v131 + 1;
    v127 = operator new(v131 + 1);
    *(_QWORD *)&object[16] = v126;
    *(_QWORD *)v215 = v132 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v127;
    v109 = v130;
    v114 = v129;
    v111 = v128;
    goto LABEL_233;
  }
  v215[7] = v126;
  if (v126)
LABEL_233:
    memmove(v127, v125, v126);
  v127[v126] = 0;
  v215[8] = 1;
  v133 = &v215[16];
  if (v115 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v115 >= 0x17)
  {
    v134 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v115 | 7) != 0x17)
      v134 = v115 | 7;
    v135 = v134 + 1;
    v133 = operator new(v134 + 1);
    v216 = v115;
    v217 = v135 | 0x8000000000000000;
    *(_QWORD *)&v215[16] = v133;
    goto LABEL_241;
  }
  HIBYTE(v217) = v115;
  if (v115)
LABEL_241:
    memmove(v133, __srca, v115);
  v133[v115] = 0;
  v218 = 1;
  v136 = *(NSObject **)object;
  if (SHIBYTE(v217) < 0)
    operator delete(*(void **)&v215[16]);
  if (v215[8] && (v215[7] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v111 && *(_QWORD *)(v111 + 24))
  {
    v137 = _os_log_pack_size();
    v138 = operator new(v137, (std::align_val_t)8uLL);
    v139 = (_QWORD *)operator new();
    *v139 = &off_24EC1F7F0;
    v139[1] = 0;
    v139[2] = 0;
    v139[3] = v138;
    *(_QWORD *)v219 = v138;
    *(_QWORD *)&v219[8] = v138;
    v220 = 0uLL;
    *(_QWORD *)&v219[16] = v139;
    v140 = strlen(__s);
    if (v140 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v141 = v140;
    if (v140 >= 0x17)
    {
      v144 = (v140 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v140 | 7) != 0x17)
        v144 = v140 | 7;
      v145 = v144 + 1;
      p_dst = operator new(v144 + 1);
      *(_QWORD *)&v213 = v141;
      *((_QWORD *)&v213 + 1) = v145 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v213) = v140;
      p_dst = &__dst;
      if (!v140)
        goto LABEL_261;
    }
    memcpy(p_dst, __s, v141);
LABEL_261:
    *((_BYTE *)p_dst + v141) = 0;
    v146 = __dst;
    *(_QWORD *)v211 = v213;
    *(_QWORD *)&v211[7] = *(_QWORD *)((char *)&v213 + 7);
    v147 = HIBYTE(v213);
    v148 = operator new(0x38uLL);
    v148[1] = 0;
    v148[2] = 0;
    v148[3] = off_24EC1FA48;
    *v148 = &off_24EC1F9F8;
    v149 = *(_QWORD *)v211;
    v148[4] = v146;
    v148[5] = v149;
    *(_QWORD *)((char *)v148 + 47) = *(_QWORD *)&v211[7];
    *((_BYTE *)v148 + 55) = v147;
    *(_QWORD *)v211 = 0;
    *(_QWORD *)&v211[7] = 0;
    v150 = (std::__shared_weak_count *)*((_QWORD *)&v220 + 1);
    *(_QWORD *)&v220 = v148 + 3;
    *((_QWORD *)&v220 + 1) = v148;
    if (v150)
    {
      v151 = (unint64_t *)&v150->__shared_owners_;
      do
        v152 = __ldaxr(v151);
      while (__stlxr(v152 - 1, v151));
      if (!v152)
      {
        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
        std::__shared_weak_count::__release_weak(v150);
      }
    }
    *(_OWORD *)object = *(_OWORD *)v219;
    v153 = v220;
    *(_QWORD *)&object[16] = *(_QWORD *)&v219[16];
    if (*(_QWORD *)&v219[16])
    {
      v154 = (unint64_t *)(*(_QWORD *)&v219[16] + 8);
      do
        v155 = __ldxr(v154);
      while (__stxr(v155 + 1, v154));
    }
    v156 = (std::__shared_weak_count *)*((_QWORD *)&v220 + 1);
    *(_QWORD *)v215 = v153;
    *(_QWORD *)&v215[8] = *((_QWORD *)&v220 + 1);
    if (*((_QWORD *)&v220 + 1))
    {
      v157 = (unint64_t *)(*((_QWORD *)&v220 + 1) + 8);
      do
        v158 = __ldxr(v157);
      while (__stxr(v158 + 1, v157));
      *(_QWORD *)&v215[16] = v153;
      do
        v159 = __ldaxr(v157);
      while (__stlxr(v159 - 1, v157));
      if (!v159)
      {
        ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
        std::__shared_weak_count::__release_weak(v156);
      }
    }
    else
    {
      *(_QWORD *)&v215[16] = v153;
    }
    v160 = *(std::__shared_weak_count **)&v219[16];
    if (*(_QWORD *)&v219[16])
    {
      v161 = (unint64_t *)(*(_QWORD *)&v219[16] + 8);
      do
        v162 = __ldaxr(v161);
      while (__stlxr(v162 - 1, v161));
      if (!v162)
      {
        ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
        std::__shared_weak_count::__release_weak(v160);
      }
    }
    v163 = *(_QWORD *)object;
    if (*(char *)(*(_QWORD *)&v215[16] + 31) >= 0)
      v164 = *(_QWORD *)&v215[16] + 8;
    else
      v164 = *(_QWORD *)(*(_QWORD *)&v215[16] + 8);
    v165 = _os_log_pack_fill();
    *(_DWORD *)v165 = 68157954;
    *(_DWORD *)(v165 + 4) = 13;
    *(_WORD *)(v165 + 8) = 2080;
    *(_QWORD *)(v165 + 10) = v164;
    v166 = operator new();
    v167 = *(unsigned __int8 *)(v197 + 39);
    v168 = *(_QWORD *)(v197 + 16);
    v169 = *(_QWORD *)(v197 + 24);
    v170 = *(_OWORD *)v215;
    *(_OWORD *)(v166 + 8) = *(_OWORD *)&object[8];
    if ((v167 & 0x80u) != 0)
      v167 = v169;
    else
      v168 = v114;
    *(_QWORD *)v166 = v163;
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v166 + 24) = v170;
    *(_QWORD *)v215 = 0;
    *(_QWORD *)&v215[8] = 0;
    *(_QWORD *)(v166 + 40) = v168;
    *(_QWORD *)(v166 + 48) = v167;
    *(_BYTE *)(v166 + 56) = 16;
    __dst = 0;
    *(_QWORD *)v219 = v166;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v111 + 24) + 40))(*(_QWORD *)(v111 + 24), v219);
    v171 = *(_QWORD *)v219;
    *(_QWORD *)v219 = 0;
    if (v171)
    {
      v172 = *(std::__shared_weak_count **)(v171 + 32);
      if (v172)
      {
        v173 = (unint64_t *)&v172->__shared_owners_;
        do
          v174 = __ldaxr(v173);
        while (__stlxr(v174 - 1, v173));
        if (!v174)
        {
          ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
          std::__shared_weak_count::__release_weak(v172);
        }
      }
      v175 = *(std::__shared_weak_count **)(v171 + 16);
      if (v175)
      {
        v176 = (unint64_t *)&v175->__shared_owners_;
        do
          v177 = __ldaxr(v176);
        while (__stlxr(v177 - 1, v176));
        if (!v177)
        {
          ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
          std::__shared_weak_count::__release_weak(v175);
        }
      }
      MEMORY[0x227684CE8](v171, 0x10F0C40B62ED6C6);
      v178 = __dst;
      __dst = 0;
      if (v178)
      {
        v179 = (std::__shared_weak_count *)v178[4];
        if (v179)
        {
          v180 = (unint64_t *)&v179->__shared_owners_;
          do
            v181 = __ldaxr(v180);
          while (__stlxr(v181 - 1, v180));
          if (!v181)
          {
            ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
            std::__shared_weak_count::__release_weak(v179);
          }
        }
        v182 = (std::__shared_weak_count *)v178[2];
        if (v182)
        {
          v183 = (unint64_t *)&v182->__shared_owners_;
          do
            v184 = __ldaxr(v183);
          while (__stlxr(v184 - 1, v183));
          if (!v184)
          {
            ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
            std::__shared_weak_count::__release_weak(v182);
          }
        }
        MEMORY[0x227684CE8](v178, 0x10F0C40B62ED6C6);
      }
    }
    v185 = *(std::__shared_weak_count **)&v215[8];
    if (*(_QWORD *)&v215[8])
    {
      v186 = (unint64_t *)(*(_QWORD *)&v215[8] + 8);
      do
        v187 = __ldaxr(v186);
      while (__stlxr(v187 - 1, v186));
      if (!v187)
      {
        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
        std::__shared_weak_count::__release_weak(v185);
      }
    }
    v188 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v189 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v190 = __ldaxr(v189);
      while (__stlxr(v190 - 1, v189));
      if (!v190)
      {
        ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
        std::__shared_weak_count::__release_weak(v188);
      }
    }
  }
  else
  {
    os_log_type_enabled(v136, OS_LOG_TYPE_ERROR);
    *(_QWORD *)object = 0xD04100202;
    *(_WORD *)&object[8] = 2080;
    *(_QWORD *)&object[10] = __s;
    v143 = (void *)_os_log_send_and_compose_impl();
    if (v143)
      free(v143);
  }
  if (v109)
  {
    sub_2245664AC((unsigned __int8 *)a2, object);
    sub_22322C138((uint64_t)&v201, "KPStorage: Inserted link to KP %.13s was already present. Existing link overwritten", object);
    sub_223182C08((uint64_t)&v201);
  }
  sub_223182C08((uint64_t)&v201);
  v191 = v209;
  if (v209)
  {
    v192 = (unint64_t *)&v209->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
LABEL_208:
  v119 = v75[4];
  v120 = *(_QWORD **)(v119 + 240);
  v121 = *(_QWORD **)(v119 + 248);
  if (v120 != v121)
  {
    while (*v120 != *(_QWORD *)a2 || v120[1] != *(_QWORD *)(a2 + 8))
    {
      v120 += 2;
      if (v120 == v121)
      {
        v120 = *(_QWORD **)(v119 + 248);
        break;
      }
    }
  }
  if (v120 == v121)
    sub_22369FA8C(v119, a2);
  return (char *)(v75 + 2);
}

void sub_223732D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  if (a43)
  {
    if (a42 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_223732D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  sub_22319A054((uint64_t *)(v37 - 192));
  sub_22319A054(&a32);
  sub_223199DE8((uint64_t)&a37);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_223732D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_223199DE8((uint64_t)&a37);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_223732DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;
  int v18;
  uint64_t v19;

  if (v18 < 0)
  {
    operator delete(v17);
    sub_223199DE8(v19 - 192);
    sub_223182DAC((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  sub_223199DE8(v19 - 192);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_223732DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223732E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223732E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223732E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *object,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  if (a44 && a43 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_223732E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;

  sub_22319A054(&a37);
  sub_22319A054((uint64_t *)(v37 - 144));
  sub_223199DE8(v37 - 192);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_223732EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_223199DE8(v9 - 192);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223732EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  sub_2231A87A4((uint64_t)&a37);
  sub_223199DE8(v37 - 144);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_223732EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_223199DE8(v9 - 144);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223732F00()
{
  JUMPOUT(0x223732F08);
}

void sub_223732F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223732F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223732F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223732F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223732F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223732F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *object,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  if (a44 && a43 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_223732FD8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22373300C(_QWORD *a1, int a2, _QWORD *a3, double a4)
{
  unsigned __int8 *v7;
  uint64_t v8;
  double v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  const char *v24;
  size_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  const char *v28;
  size_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  size_t v40;
  size_t v41;
  uint64_t *v42;
  int v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  char *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  const char *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v97;
  const char *v98;
  size_t v99;
  unsigned __int8 v100;
  unsigned __int8 v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  const char *v106;
  size_t v107;
  unsigned __int8 v108;
  const char *v109;
  size_t v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  NSObject *v115;
  uint64_t v116;
  uint64_t v117;
  size_t v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  const char *v129;
  void *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  void *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned __int8 v157;
  const char *v158;
  size_t v159;
  _BYTE *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  NSObject *v166;
  size_t v167;
  std::__shared_weak_count_vtbl *v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  const char *v178;
  void *v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  void *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  const char *v205;
  uint64_t v206;
  _QWORD *v207;
  int v208;
  int v209;
  const char *v210;
  int v211;
  uint64_t v212;
  const char *v213;
  uint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v219;
  int v220;
  const char *v221;
  int v222;
  const char *v223;
  uint64_t v224;
  std::__shared_weak_count *v225;
  uint64_t v226;
  void *__p[2];
  std::__shared_weak_count *v228;
  char *v229;
  std::__shared_weak_count *v230;
  uint64_t *v231;
  __int128 v232;
  char __s[40];
  _BYTE v234[24];
  __int128 v235;
  char *v236;
  size_t v237;
  unint64_t v238;
  char v239;
  _QWORD v240[5];

  v240[2] = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v7 = (unsigned __int8 *)a1[2];
  v207 = a1;
  v8 = 0;
  if (!v7)
    goto LABEL_145;
  v9 = a4 * 1000000000.0;
  v10 = 1;
  v208 = a2;
  do
  {
    v12 = *((_QWORD *)v7 + 4);
    if (a2)
    {
      if (a2 == 1)
      {
        v13 = (double)(uint64_t)(*a3 - *(_QWORD *)(v12 + 16));
        if (*(_BYTE *)(v12 + 40))
        {
          v16 = v12 + 24;
          v14 = *(_QWORD *)(v12 + 24);
          v15 = *(_QWORD *)(v16 + 8);
          if (v9 < v13 && v14 > v15 && v9 < (double)(*a3 - v15))
          {
LABEL_3:
            v11 = sub_22372F68C(a1, v7 + 16);
            v10 &= v11;
            v8 += v11;
            goto LABEL_4;
          }
        }
        else if (v9 < v13)
        {
          goto LABEL_3;
        }
      }
    }
    else if (!*(_BYTE *)(v12 + 40) || *(_QWORD *)(v12 + 24) > *(_QWORD *)(v12 + 32))
    {
      goto LABEL_3;
    }
    sub_223729BE0(&v226);
    if (**(int **)(v226 + 56) <= 2)
    {
      v19 = *(unsigned __int8 *)(v226 + 72);
      v20 = sub_22322F254(v226, "OSLogSurrogateAppender", 1, 0);
      v21 = v20;
      if (v19 || v20 != 0)
      {
        v217 = &v226;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v219 = std::chrono::system_clock::now().__d_.__rep_;
        v220 = 2;
        v221 = "unknown file";
        v222 = 378;
        v223 = "unknown function";
        v224 = 0;
        v225 = 0;
        sub_2245664AC(v7 + 16, __s);
        v211 = v10;
        v23 = *v217;
        v24 = (const char *)(*v217 + 16);
        v205 = v24;
        if (*(char *)(*v217 + 39) < 0)
        {
          v24 = *(const char **)(v23 + 16);
          v25 = *(_QWORD *)(v23 + 24);
        }
        else
        {
          v25 = *(unsigned __int8 *)(*v217 + 39);
        }
        v206 = *v217;
        v26 = v8;
        v27 = atomic_load((unsigned __int8 *)&qword_255788F58);
        v209 = v19;
        if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)__p);
          sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
          if ((_BYTE)v229 && SHIBYTE(v228) < 0)
            operator delete(__p[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F57 >= 0)
          v28 = (const char *)&xmmword_255788F40;
        else
          v28 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v29 = byte_255788F57;
        else
          v29 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)v234 = os_log_create(v28, v24);
        if (v29 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v29 >= 0x17)
        {
          v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v29 | 7) != 0x17)
            v31 = v29 | 7;
          v32 = v31 + 1;
          v30 = operator new(v31 + 1);
          *(_QWORD *)&v234[16] = v29;
          *(_QWORD *)&v235 = v32 | 0x8000000000000000;
          *(_QWORD *)&v234[8] = v30;
        }
        else
        {
          BYTE7(v235) = v29;
          v30 = &v234[8];
          if (!v29)
          {
LABEL_43:
            v30[v29] = 0;
            BYTE8(v235) = 1;
            if (v25 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v8 = v26;
            if (v25 >= 0x17)
            {
              v35 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v25 | 7) != 0x17)
                v35 = v25 | 7;
              v36 = v35 + 1;
              a1 = v207;
              v33 = (char *)operator new(v35 + 1);
              v237 = v25;
              v238 = v36 | 0x8000000000000000;
              v236 = v33;
            }
            else
            {
              HIBYTE(v238) = v25;
              v33 = (char *)&v236;
              a1 = v207;
              if (!v25)
              {
                LOBYTE(v236) = 0;
                v239 = 1;
                v34 = *(NSObject **)v234;
                if ((SHIBYTE(v238) & 0x80000000) == 0)
                  goto LABEL_47;
                goto LABEL_53;
              }
            }
            memmove(v33, v24, v25);
            v33[v25] = 0;
            v239 = 1;
            v34 = *(NSObject **)v234;
            if ((SHIBYTE(v238) & 0x80000000) == 0)
            {
LABEL_47:
              a2 = v208;
              v10 = v211;
              if (!BYTE8(v235))
                goto LABEL_56;
              goto LABEL_54;
            }
LABEL_53:
            operator delete(v236);
            a2 = v208;
            v10 = v211;
            if (!BYTE8(v235))
              goto LABEL_56;
LABEL_54:
            if (SBYTE7(v235) < 0)
              operator delete(*(void **)&v234[8]);
LABEL_56:
            if (*(_QWORD *)v234)
              os_release(*(void **)v234);
            if (!v21 || !*(_QWORD *)(v21 + 24))
            {
              os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG);
              *(_QWORD *)v234 = 0xD04100202;
              v43 = v209;
              *(_WORD *)&v234[8] = 2080;
              *(_QWORD *)&v234[10] = __s;
              v44 = (void *)_os_log_send_and_compose_impl();
              if (v44)
              {
                free(v44);
                if (!v209)
                  goto LABEL_130;
                goto LABEL_129;
              }
              goto LABEL_128;
            }
            v37 = _os_log_pack_size();
            v38 = (std::__shared_weak_count_vtbl *)operator new(v37, (std::align_val_t)8uLL);
            v39 = (std::__shared_weak_count *)operator new();
            v39->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v39->__shared_owners_ = 0;
            v39->__shared_weak_owners_ = 0;
            v39[1].__vftable = v38;
            __p[0] = v38;
            __p[1] = v38;
            v228 = v39;
            v229 = 0;
            v230 = 0;
            v40 = strlen(__s);
            if (v40 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v41 = v40;
            if (v40 >= 0x17)
            {
              v45 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v40 | 7) != 0x17)
                v45 = v40 | 7;
              v46 = v45 + 1;
              v42 = (uint64_t *)operator new(v45 + 1);
              *(_QWORD *)&v232 = v41;
              *((_QWORD *)&v232 + 1) = v46 | 0x8000000000000000;
              v231 = v42;
            }
            else
            {
              HIBYTE(v232) = v40;
              v42 = (uint64_t *)&v231;
              if (!v40)
                goto LABEL_71;
            }
            memcpy(v42, __s, v41);
LABEL_71:
            *((_BYTE *)v42 + v41) = 0;
            v47 = (uint64_t)v231;
            v240[0] = v232;
            *(_QWORD *)((char *)v240 + 7) = *(_QWORD *)((char *)&v232 + 7);
            v48 = HIBYTE(v232);
            v49 = operator new(0x38uLL);
            v49[1] = 0;
            v49[2] = 0;
            v49[3] = off_24EC1FA48;
            *v49 = &off_24EC1F9F8;
            v50 = v240[0];
            v49[4] = v47;
            v49[5] = v50;
            *(_QWORD *)((char *)v49 + 47) = *(_QWORD *)((char *)v240 + 7);
            *((_BYTE *)v49 + 55) = v48;
            v240[0] = 0;
            *(_QWORD *)((char *)v240 + 7) = 0;
            v51 = v230;
            v229 = (char *)(v49 + 3);
            v230 = (std::__shared_weak_count *)v49;
            if (v51)
            {
              p_shared_owners = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(p_shared_owners);
              while (__stlxr(v53 - 1, p_shared_owners));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            *(_OWORD *)v234 = *(_OWORD *)__p;
            v54 = v229;
            *(_QWORD *)&v234[16] = v228;
            if (v228)
            {
              v55 = (unint64_t *)&v228->__shared_owners_;
              do
                v56 = __ldxr(v55);
              while (__stxr(v56 + 1, v55));
            }
            v57 = v230;
            *(_QWORD *)&v235 = v54;
            *((_QWORD *)&v235 + 1) = v230;
            if (v230)
            {
              v58 = (unint64_t *)&v230->__shared_owners_;
              do
                v59 = __ldxr(v58);
              while (__stxr(v59 + 1, v58));
              v236 = v54;
              do
                v60 = __ldaxr(v58);
              while (__stlxr(v60 - 1, v58));
              if (!v60)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
            else
            {
              v236 = v54;
            }
            v61 = v228;
            if (v228)
            {
              v62 = (unint64_t *)&v228->__shared_owners_;
              do
                v63 = __ldaxr(v62);
              while (__stlxr(v63 - 1, v62));
              if (!v63)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
            }
            v64 = *(_QWORD *)v234;
            if (v236[31] >= 0)
              v65 = v236 + 8;
            else
              v65 = (char *)*((_QWORD *)v236 + 1);
            v66 = _os_log_pack_fill();
            *(_DWORD *)v66 = 68157954;
            *(_DWORD *)(v66 + 4) = 13;
            *(_WORD *)(v66 + 8) = 2080;
            *(_QWORD *)(v66 + 10) = v65;
            v67 = (char *)operator new();
            v68 = *(unsigned __int8 *)(v206 + 39);
            v69 = v205;
            if ((v68 & 0x80u) != 0)
            {
              v69 = *(const char **)(v206 + 16);
              v68 = *(_QWORD *)(v206 + 24);
            }
            *(_QWORD *)v67 = v64;
            *(_OWORD *)(v67 + 8) = *(_OWORD *)&v234[8];
            *(_QWORD *)&v234[8] = 0;
            *(_QWORD *)&v234[16] = 0;
            *(_OWORD *)(v67 + 24) = v235;
            v235 = 0uLL;
            *((_QWORD *)v67 + 5) = v69;
            *((_QWORD *)v67 + 6) = v68;
            v67[56] = 2;
            v231 = 0;
            __p[0] = v67;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v21 + 24) + 40))(*(_QWORD *)(v21 + 24), __p);
            v43 = v209;
            v70 = __p[0];
            __p[0] = 0;
            a2 = v208;
            v10 = v211;
            if (v70)
            {
              v71 = (std::__shared_weak_count *)*((_QWORD *)v70 + 4);
              if (v71)
              {
                v72 = (unint64_t *)&v71->__shared_owners_;
                do
                  v73 = __ldaxr(v72);
                while (__stlxr(v73 - 1, v72));
                if (!v73)
                {
                  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                  std::__shared_weak_count::__release_weak(v71);
                }
              }
              v74 = (std::__shared_weak_count *)*((_QWORD *)v70 + 2);
              if (v74)
              {
                v75 = (unint64_t *)&v74->__shared_owners_;
                do
                  v76 = __ldaxr(v75);
                while (__stlxr(v76 - 1, v75));
                if (!v76)
                {
                  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                  std::__shared_weak_count::__release_weak(v74);
                }
              }
              MEMORY[0x227684CE8](v70, 0x10F0C40B62ED6C6);
              v77 = (uint64_t)v231;
              v231 = 0;
              if (v77)
              {
                v78 = *(std::__shared_weak_count **)(v77 + 32);
                if (v78)
                {
                  v79 = (unint64_t *)&v78->__shared_owners_;
                  do
                    v80 = __ldaxr(v79);
                  while (__stlxr(v80 - 1, v79));
                  if (!v80)
                  {
                    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                    std::__shared_weak_count::__release_weak(v78);
                  }
                }
                v81 = *(std::__shared_weak_count **)(v77 + 16);
                if (v81)
                {
                  v82 = (unint64_t *)&v81->__shared_owners_;
                  do
                    v83 = __ldaxr(v82);
                  while (__stlxr(v83 - 1, v82));
                  if (!v83)
                  {
                    ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                    std::__shared_weak_count::__release_weak(v81);
                  }
                }
                MEMORY[0x227684CE8](v77, 0x10F0C40B62ED6C6);
              }
            }
            v84 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
            if (!*((_QWORD *)&v235 + 1))
              goto LABEL_124;
            v85 = (unint64_t *)(*((_QWORD *)&v235 + 1) + 8);
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
              v87 = *(std::__shared_weak_count **)&v234[16];
              if (!*(_QWORD *)&v234[16])
                goto LABEL_128;
            }
            else
            {
LABEL_124:
              v87 = *(std::__shared_weak_count **)&v234[16];
              if (!*(_QWORD *)&v234[16])
                goto LABEL_128;
            }
            v88 = (unint64_t *)&v87->__shared_owners_;
            do
              v89 = __ldaxr(v88);
            while (__stlxr(v89 - 1, v88));
            if (!v89)
            {
              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
              std::__shared_weak_count::__release_weak(v87);
              if (!v209)
                goto LABEL_130;
              goto LABEL_129;
            }
LABEL_128:
            if (!v43)
            {
LABEL_130:
              sub_223182C08((uint64_t)&v217);
              v90 = v225;
              if (v225)
              {
                v91 = (unint64_t *)&v225->__shared_owners_;
                do
                  v92 = __ldaxr(v91);
                while (__stlxr(v92 - 1, v91));
                if (!v92)
                {
                  ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                  std::__shared_weak_count::__release_weak(v90);
                }
              }
              goto LABEL_4;
            }
LABEL_129:
            sub_2245664AC(v7 + 16, v234);
            sub_22322C138((uint64_t)&v217, "KeyframePlaneStorage: KeyframePlaneSegmentation %.13s not included in snapshot because it is up-to-date.", v234);
            sub_223182C08((uint64_t)&v217);
            goto LABEL_130;
          }
        }
        memmove(v30, v28, v29);
        goto LABEL_43;
      }
    }
LABEL_4:
    v7 = *(unsigned __int8 **)v7;
  }
  while (v7);
  if ((v10 & 1) == 0)
  {
    v101 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v101 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223195728((uint64_t)&stru_255789280, "cv3d.recon.kfplanes_pers", 0x18uLL, "KPStorage: Snapshot save failed. %zu / %zu KFS(s) written.", 0x3AuLL);
    sub_22372F598(&v231);
    if (*(int *)v231[7] > 5)
      goto LABEL_325;
    v102 = *((unsigned __int8 *)v231 + 72);
    v103 = sub_22322F254((uint64_t)v231, "OSLogSurrogateAppender", 1, 0);
    v104 = v103;
    if (!v102 && !v103)
      goto LABEL_325;
    v216 = v8;
    v217 = (uint64_t *)&v231;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v219 = std::chrono::system_clock::now().__d_.__rep_;
    v220 = 5;
    v221 = "unknown file";
    v222 = 391;
    v224 = 0;
    v225 = 0;
    v223 = "unknown function";
    v105 = *v217;
    v106 = (const char *)(*v217 + 16);
    v213 = v106;
    if (*(char *)(*v217 + 39) < 0)
    {
      v106 = *(const char **)(v105 + 16);
      v107 = *(_QWORD *)(v105 + 24);
    }
    else
    {
      v107 = *(unsigned __int8 *)(*v217 + 39);
    }
    v156 = v207[3];
    v157 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v157 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v234);
      sub_223199C58("com.apple.cv3d", (unint64_t)v234, &xmmword_255788F40);
      if ((_BYTE)v235 && (v234[23] & 0x80000000) != 0)
        operator delete(*(void **)v234);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v158 = (const char *)&xmmword_255788F40;
    else
      v158 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v159 = byte_255788F57;
    else
      v159 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)v234 = os_log_create(v158, v106);
    v160 = &v234[8];
    if (v159 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v159 >= 0x17)
    {
      v161 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v159 | 7) != 0x17)
        v161 = v159 | 7;
      v162 = v161 + 1;
      v160 = operator new(v161 + 1);
      *(_QWORD *)&v234[16] = v159;
      *(_QWORD *)&v235 = v162 | 0x8000000000000000;
      *(_QWORD *)&v234[8] = v160;
    }
    else
    {
      BYTE7(v235) = v159;
      if (!v159)
      {
LABEL_258:
        v160[v159] = 0;
        BYTE8(v235) = 1;
        v163 = (char *)&v236;
        if (v107 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v107 >= 0x17)
        {
          v164 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v107 | 7) != 0x17)
            v164 = v107 | 7;
          v165 = v164 + 1;
          v163 = (char *)operator new(v164 + 1);
          v237 = v107;
          v238 = v165 | 0x8000000000000000;
          v236 = v163;
        }
        else
        {
          HIBYTE(v238) = v107;
          if (!v107)
            goto LABEL_266;
        }
        memmove(v163, v106, v107);
LABEL_266:
        v163[v107] = 0;
        v239 = 1;
        v166 = *(NSObject **)v234;
        if (SHIBYTE(v238) < 0)
          operator delete(v236);
        if (BYTE8(v235) && SBYTE7(v235) < 0)
          operator delete(*(void **)&v234[8]);
        if (*(_QWORD *)v234)
          os_release(*(void **)v234);
        if (v104 && *(_QWORD *)(v104 + 24))
        {
          v167 = _os_log_pack_size();
          v168 = (std::__shared_weak_count_vtbl *)operator new(v167, (std::align_val_t)8uLL);
          v169 = (std::__shared_weak_count *)operator new();
          v170 = v169;
          v169->__shared_owners_ = 0;
          v171 = (unint64_t *)&v169->__shared_owners_;
          v169->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v169->__shared_weak_owners_ = 0;
          v169[1].__vftable = v168;
          *(_QWORD *)v234 = v168;
          *(_QWORD *)&v234[8] = v168;
          *(_QWORD *)&v234[16] = v169;
          do
            v172 = __ldxr(v171);
          while (__stxr(v172 + 1, v171));
          v235 = 0uLL;
          v236 = 0;
          do
            v173 = __ldaxr(v171);
          while (__stlxr(v173 - 1, v171));
          if (!v173)
          {
            ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
            std::__shared_weak_count::__release_weak(v170);
          }
          v174 = *(_QWORD *)v234;
          v175 = _os_log_pack_fill();
          *(_DWORD *)v175 = 134218240;
          *(_QWORD *)(v175 + 4) = v216;
          *(_WORD *)(v175 + 12) = 2048;
          *(_QWORD *)(v175 + 14) = v156;
          v176 = (char *)operator new();
          v177 = *(unsigned __int8 *)(v105 + 39);
          v178 = v213;
          if ((v177 & 0x80u) != 0)
          {
            v178 = *(const char **)(v105 + 16);
            v177 = *(_QWORD *)(v105 + 24);
          }
          *(_QWORD *)v176 = v174;
          *(_OWORD *)(v176 + 8) = *(_OWORD *)&v234[8];
          *(_QWORD *)&v234[8] = 0;
          *(_QWORD *)&v234[16] = 0;
          *(_OWORD *)(v176 + 24) = v235;
          v235 = 0uLL;
          *((_QWORD *)v176 + 5) = v178;
          *((_QWORD *)v176 + 6) = v177;
          v176[56] = 16;
          *(_QWORD *)__s = 0;
          __p[0] = v176;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v104 + 24) + 40))(*(_QWORD *)(v104 + 24), __p);
          v179 = __p[0];
          __p[0] = 0;
          v180 = v216;
          if (v179)
          {
            v181 = (std::__shared_weak_count *)*((_QWORD *)v179 + 4);
            if (v181)
            {
              v182 = (unint64_t *)&v181->__shared_owners_;
              do
                v183 = __ldaxr(v182);
              while (__stlxr(v183 - 1, v182));
              if (!v183)
              {
                ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                std::__shared_weak_count::__release_weak(v181);
              }
            }
            v184 = (std::__shared_weak_count *)*((_QWORD *)v179 + 2);
            if (v184)
            {
              v185 = (unint64_t *)&v184->__shared_owners_;
              do
                v186 = __ldaxr(v185);
              while (__stlxr(v186 - 1, v185));
              if (!v186)
              {
                ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                std::__shared_weak_count::__release_weak(v184);
              }
            }
            MEMORY[0x227684CE8](v179, 0x10F0C40B62ED6C6);
            v187 = *(_QWORD *)__s;
            *(_QWORD *)__s = 0;
            if (v187)
            {
              v188 = *(std::__shared_weak_count **)(v187 + 32);
              if (v188)
              {
                v189 = (unint64_t *)&v188->__shared_owners_;
                do
                  v190 = __ldaxr(v189);
                while (__stlxr(v190 - 1, v189));
                if (!v190)
                {
                  ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                  std::__shared_weak_count::__release_weak(v188);
                }
              }
              v191 = *(std::__shared_weak_count **)(v187 + 16);
              if (v191)
              {
                v192 = (unint64_t *)&v191->__shared_owners_;
                do
                  v193 = __ldaxr(v192);
                while (__stlxr(v193 - 1, v192));
                if (!v193)
                {
                  ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                  std::__shared_weak_count::__release_weak(v191);
                }
              }
              MEMORY[0x227684CE8](v187, 0x10F0C40B62ED6C6);
            }
          }
          v194 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
          if (*((_QWORD *)&v235 + 1))
          {
            v195 = (unint64_t *)(*((_QWORD *)&v235 + 1) + 8);
            do
              v196 = __ldaxr(v195);
            while (__stlxr(v196 - 1, v195));
            if (!v196)
            {
              ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
              std::__shared_weak_count::__release_weak(v194);
            }
          }
          v197 = *(std::__shared_weak_count **)&v234[16];
          if (*(_QWORD *)&v234[16])
          {
            v198 = (unint64_t *)(*(_QWORD *)&v234[16] + 8);
            do
              v199 = __ldaxr(v198);
            while (__stlxr(v199 - 1, v198));
            if (!v199)
            {
              ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
              std::__shared_weak_count::__release_weak(v197);
            }
          }
        }
        else
        {
          os_log_type_enabled(v166, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v234 = 134218240;
          v180 = v216;
          *(_QWORD *)&v234[4] = v216;
          *(_WORD *)&v234[12] = 2048;
          *(_QWORD *)&v234[14] = v156;
          v200 = (void *)_os_log_send_and_compose_impl();
          if (v200)
            free(v200);
        }
        if (v102)
        {
          sub_22322C138((uint64_t)&v217, "KPStorage: Snapshot save failed. %zu / %zu KFS(s) written.", v180, v207[3]);
          sub_223182C08((uint64_t)&v217);
        }
        sub_223182C08((uint64_t)&v217);
        v201 = v225;
        if (v225)
        {
          v202 = (unint64_t *)&v225->__shared_owners_;
          do
            v203 = __ldaxr(v202);
          while (__stlxr(v203 - 1, v202));
          if (!v203)
          {
            ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
            std::__shared_weak_count::__release_weak(v201);
          }
        }
LABEL_325:
        v155 = 0;
        goto LABEL_326;
      }
    }
    memmove(v160, v158, v159);
    goto LABEL_258;
  }
LABEL_145:
  sub_223729BE0(&v231);
  if (*(int *)v231[7] > 3)
    goto LABEL_241;
  v93 = *((unsigned __int8 *)v231 + 72);
  v94 = sub_22322F254((uint64_t)v231, "OSLogSurrogateAppender", 1, 0);
  v95 = v94;
  if (!v93 && v94 == 0)
    goto LABEL_241;
  v215 = v8;
  v217 = (uint64_t *)&v231;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v219 = std::chrono::system_clock::now().__d_.__rep_;
  v220 = 3;
  v221 = "unknown file";
  v222 = 386;
  v224 = 0;
  v225 = 0;
  v223 = "unknown function";
  v97 = *v217;
  v98 = (const char *)(*v217 + 16);
  v210 = v98;
  if (*(char *)(*v217 + 39) < 0)
  {
    v98 = *(const char **)(v97 + 16);
    v99 = *(_QWORD *)(v97 + 24);
    v212 = a1[3];
    v108 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v108 & 1) == 0)
    {
LABEL_332:
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v234);
        sub_223199C58("com.apple.cv3d", (unint64_t)v234, &xmmword_255788F40);
        if ((_BYTE)v235 && (v234[23] & 0x80000000) != 0)
          operator delete(*(void **)v234);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
    }
  }
  else
  {
    v99 = *(unsigned __int8 *)(*v217 + 39);
    v212 = a1[3];
    v100 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v100 & 1) == 0)
      goto LABEL_332;
  }
  if (byte_255788F57 >= 0)
    v109 = (const char *)&xmmword_255788F40;
  else
    v109 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v110 = byte_255788F57;
  else
    v110 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)v234 = os_log_create(v109, v98);
  v111 = &v234[8];
  if (v110 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v110 >= 0x17)
  {
    v112 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v110 | 7) != 0x17)
      v112 = v110 | 7;
    v113 = v112 + 1;
    v111 = operator new(v112 + 1);
    *(_QWORD *)&v234[16] = v110;
    *(_QWORD *)&v235 = v113 | 0x8000000000000000;
    *(_QWORD *)&v234[8] = v111;
    goto LABEL_173;
  }
  BYTE7(v235) = v110;
  if (v110)
LABEL_173:
    memmove(v111, v109, v110);
  v111[v110] = 0;
  BYTE8(v235) = 1;
  v114 = (char *)&v236;
  if (v99 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v99 >= 0x17)
  {
    v116 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v99 | 7) != 0x17)
      v116 = v99 | 7;
    v117 = v116 + 1;
    v114 = (char *)operator new(v116 + 1);
    v237 = v99;
    v238 = v117 | 0x8000000000000000;
    v236 = v114;
  }
  else
  {
    HIBYTE(v238) = v99;
    if (!v99)
    {
      LOBYTE(v236) = 0;
      v239 = 1;
      v115 = *(NSObject **)v234;
      if ((SHIBYTE(v238) & 0x80000000) == 0)
        goto LABEL_178;
LABEL_184:
      operator delete(v236);
      if (BYTE8(v235))
        goto LABEL_185;
      goto LABEL_187;
    }
  }
  memmove(v114, v98, v99);
  v114[v99] = 0;
  v239 = 1;
  v115 = *(NSObject **)v234;
  if (SHIBYTE(v238) < 0)
    goto LABEL_184;
LABEL_178:
  if (BYTE8(v235))
  {
LABEL_185:
    if (SBYTE7(v235) < 0)
      operator delete(*(void **)&v234[8]);
  }
LABEL_187:
  if (*(_QWORD *)v234)
    os_release(*(void **)v234);
  if (v95 && *(_QWORD *)(v95 + 24))
  {
    v118 = _os_log_pack_size();
    v119 = (std::__shared_weak_count_vtbl *)operator new(v118, (std::align_val_t)8uLL);
    v120 = (std::__shared_weak_count *)operator new();
    v121 = v120;
    v120->__shared_owners_ = 0;
    v122 = (unint64_t *)&v120->__shared_owners_;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v119;
    *(_QWORD *)v234 = v119;
    *(_QWORD *)&v234[8] = v119;
    *(_QWORD *)&v234[16] = v120;
    do
      v123 = __ldxr(v122);
    while (__stxr(v123 + 1, v122));
    v235 = 0uLL;
    v236 = 0;
    do
      v124 = __ldaxr(v122);
    while (__stlxr(v124 - 1, v122));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v121);
    }
    v125 = *(_QWORD *)v234;
    v126 = _os_log_pack_fill();
    *(_DWORD *)v126 = 134218240;
    *(_QWORD *)(v126 + 4) = v215;
    *(_WORD *)(v126 + 12) = 2048;
    *(_QWORD *)(v126 + 14) = v212;
    v127 = (char *)operator new();
    v128 = *(unsigned __int8 *)(v97 + 39);
    v129 = v210;
    if ((v128 & 0x80u) != 0)
    {
      v129 = *(const char **)(v97 + 16);
      v128 = *(_QWORD *)(v97 + 24);
    }
    *(_QWORD *)v127 = v125;
    *(_OWORD *)(v127 + 8) = *(_OWORD *)&v234[8];
    *(_QWORD *)&v234[8] = 0;
    *(_QWORD *)&v234[16] = 0;
    *(_OWORD *)(v127 + 24) = v235;
    v235 = 0uLL;
    *((_QWORD *)v127 + 5) = v129;
    *((_QWORD *)v127 + 6) = v128;
    v127[56] = 1;
    *(_QWORD *)__s = 0;
    __p[0] = v127;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v95 + 24) + 40))(*(_QWORD *)(v95 + 24), __p);
    v130 = __p[0];
    __p[0] = 0;
    v131 = v215;
    if (v130)
    {
      v132 = (std::__shared_weak_count *)*((_QWORD *)v130 + 4);
      if (v132)
      {
        v133 = (unint64_t *)&v132->__shared_owners_;
        do
          v134 = __ldaxr(v133);
        while (__stlxr(v134 - 1, v133));
        if (!v134)
        {
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v132);
        }
      }
      v135 = (std::__shared_weak_count *)*((_QWORD *)v130 + 2);
      if (v135)
      {
        v136 = (unint64_t *)&v135->__shared_owners_;
        do
          v137 = __ldaxr(v136);
        while (__stlxr(v137 - 1, v136));
        if (!v137)
        {
          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
          std::__shared_weak_count::__release_weak(v135);
        }
      }
      MEMORY[0x227684CE8](v130, 0x10F0C40B62ED6C6);
      v138 = *(_QWORD *)__s;
      *(_QWORD *)__s = 0;
      if (v138)
      {
        v139 = *(std::__shared_weak_count **)(v138 + 32);
        if (v139)
        {
          v140 = (unint64_t *)&v139->__shared_owners_;
          do
            v141 = __ldaxr(v140);
          while (__stlxr(v141 - 1, v140));
          if (!v141)
          {
            ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
            std::__shared_weak_count::__release_weak(v139);
          }
        }
        v142 = *(std::__shared_weak_count **)(v138 + 16);
        if (v142)
        {
          v143 = (unint64_t *)&v142->__shared_owners_;
          do
            v144 = __ldaxr(v143);
          while (__stlxr(v144 - 1, v143));
          if (!v144)
          {
            ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
            std::__shared_weak_count::__release_weak(v142);
          }
        }
        MEMORY[0x227684CE8](v138, 0x10F0C40B62ED6C6);
      }
    }
    v145 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
    if (*((_QWORD *)&v235 + 1))
    {
      v146 = (unint64_t *)(*((_QWORD *)&v235 + 1) + 8);
      do
        v147 = __ldaxr(v146);
      while (__stlxr(v147 - 1, v146));
      if (!v147)
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
      }
    }
    v148 = *(std::__shared_weak_count **)&v234[16];
    if (*(_QWORD *)&v234[16])
    {
      v149 = (unint64_t *)(*(_QWORD *)&v234[16] + 8);
      do
        v150 = __ldaxr(v149);
      while (__stlxr(v150 - 1, v149));
      if (!v150)
      {
        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
        std::__shared_weak_count::__release_weak(v148);
      }
    }
  }
  else
  {
    os_log_type_enabled(v115, OS_LOG_TYPE_INFO);
    *(_DWORD *)v234 = 134218240;
    v131 = v215;
    *(_QWORD *)&v234[4] = v215;
    *(_WORD *)&v234[12] = 2048;
    *(_QWORD *)&v234[14] = v212;
    v151 = (void *)_os_log_send_and_compose_impl();
    if (v151)
      free(v151);
  }
  if (v93)
  {
    sub_22322C138((uint64_t)&v217, "KeyframePlaneStorage: KeyframePlaneDetector: Snapshot saved. %zu / %zu Keyframe Segmentations written.", v131, v207[3]);
    sub_223182C08((uint64_t)&v217);
  }
  sub_223182C08((uint64_t)&v217);
  v152 = v225;
  if (v225)
  {
    v153 = (unint64_t *)&v225->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
LABEL_241:
  v155 = 1;
LABEL_326:
  kdebug_trace();
  return v155;
}

void sub_2237348A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  if (*(_BYTE *)(v27 - 184))
  {
    if (*(char *)(v27 - 185) < 0)
      operator delete(*(void **)(v27 - 208));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_223734908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;

  sub_22319A054(&a37);
  sub_22319A054((uint64_t *)(v37 - 248));
  sub_223199DE8(v37 - 208);
  sub_223182DAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_223734980()
{
  uint64_t v0;
  void *v1;

  if (*(_BYTE *)(v0 - 176) && *(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x223734B50);
}

void sub_2237349C4()
{
  uint64_t v0;
  void *v1;

  if (*(_BYTE *)(v0 - 176) && *(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x223734B50);
}

void sub_223734A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_223199DE8((uint64_t)&a37);
  sub_223182DAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_223734A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_223199DE8((uint64_t)&a37);
  sub_223182DAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_223734A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  uint64_t v43;

  sub_22319A054(&a37);
  sub_22319A054(&a43);
  sub_223199DE8(v43 - 208);
  sub_223182DAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_223734A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_223199DE8(v27 - 208);
  sub_223182DAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_223734A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;
  int v38;

  if (v38 < 0)
    operator delete(v37);
  sub_223199DE8((uint64_t)&a37);
  sub_223182DAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_223734AB0()
{
  JUMPOUT(0x223734AB8);
}

void sub_223734ADC()
{
  uint64_t v0;
  void *v1;

  if (*(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x223734B50);
}

void sub_223734B38(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223734B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_223182DAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_223734B70(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = *(_QWORD **)(a1 + 120);
  kdebug_trace();
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 48))(*v3, a2);
  return kdebug_trace();
}

void sub_223734BF0(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_223734C20(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  _QWORD *v4;
  uint64_t v5;
  uint64_t j;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t k;
  _QWORD *v11;
  uint64_t v12;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_223737B8C(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)(a1 + 64))
  {
    v4 = *(_QWORD **)(a1 + 56);
    if (v4)
    {
      do
      {
        v11 = (_QWORD *)*v4;
        v12 = v4[4];
        v4[4] = 0;
        if (v12)
          sub_2236C86D0((uint64_t)(v4 + 4), v12);
        operator delete(v4);
        v4 = v11;
      }
      while (v11);
    }
    *(_QWORD *)(a1 + 56) = 0;
    v5 = *(_QWORD *)(a1 + 48);
    if (v5)
    {
      for (j = 0; j != v5; ++j)
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * j) = 0;
    }
    *(_QWORD *)(a1 + 64) = 0;
  }
  if (*(_QWORD *)(a1 + 104))
  {
    v7 = *(_QWORD **)(a1 + 96);
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        operator delete(v7);
        v7 = v8;
      }
      while (v8);
    }
    *(_QWORD *)(a1 + 96) = 0;
    v9 = *(_QWORD *)(a1 + 88);
    if (v9)
    {
      for (k = 0; k != v9; ++k)
        *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * k) = 0;
    }
    *(_QWORD *)(a1 + 104) = 0;
  }
}

uint64_t sub_223734D2C(_QWORD *a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  const char *v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  const char *v15;
  size_t v16;
  _BYTE *v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  std::__shared_weak_count_vtbl *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  int v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v67;
  int v68;
  uint64_t v69;
  _QWORD v70[3];
  int v71;
  const char *v72;
  int v73;
  const char *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE object[48];
  size_t v81;
  unint64_t v82;
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  v3 = a1[8];
  v4 = a1[3];
  v5 = a1[13];
  sub_22372F598(&v77);
  if (**(int **)(v77 + 56) > 3)
    return kdebug_trace();
  v6 = *(unsigned __int8 *)(v77 + 72);
  v7 = sub_22322F254(v77, "OSLogSurrogateAppender", 1, 0);
  if (!v6 && v7 == 0)
    return kdebug_trace();
  v9 = v7;
  v68 = v6;
  v70[0] = &v77;
  v70[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v70[2] = std::chrono::system_clock::now().__d_.__rep_;
  v71 = 3;
  v72 = "unknown file";
  v73 = 599;
  v75 = 0;
  v76 = 0;
  v74 = "unknown function";
  v10 = v77;
  if (*(char *)(v77 + 39) < 0)
  {
    v12 = *(const char **)(v77 + 16);
    v11 = *(_QWORD *)(v77 + 24);
    v67 = *(_QWORD *)v70[0] + 16;
    v69 = v5;
    v14 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v14 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v11 = *(unsigned __int8 *)(v77 + 39);
    v12 = (const char *)(*(_QWORD *)v70[0] + 16);
    v67 = (uint64_t)v12;
    v69 = v5;
    v13 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v13 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F57 >= 0)
    v15 = (const char *)&xmmword_255788F40;
  else
    v15 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v16 = byte_255788F57;
  else
    v16 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)object = os_log_create(v15, v12);
  v17 = &object[8];
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v16 >= 0x17)
  {
    v18 = v9;
    v19 = v12;
    v20 = v10;
    v21 = v4;
    v22 = v3;
    v23 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v23 = v16 | 7;
    v24 = v23 + 1;
    v17 = operator new(v23 + 1);
    *(_QWORD *)&object[16] = v16;
    *(_QWORD *)&object[24] = v24 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v17;
    v3 = v22;
    v4 = v21;
    v10 = v20;
    v12 = v19;
    v9 = v18;
    goto LABEL_23;
  }
  object[31] = v16;
  if (v16)
LABEL_23:
    memmove(v17, v15, v16);
  v17[v16] = 0;
  object[32] = 1;
  v25 = &object[40];
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v11 >= 0x17)
  {
    v27 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v27 = v11 | 7;
    v28 = v27 + 1;
    v25 = operator new(v27 + 1);
    v81 = v11;
    v82 = v28 | 0x8000000000000000;
    *(_QWORD *)&object[40] = v25;
  }
  else
  {
    HIBYTE(v82) = v11;
    if (!v11)
    {
      object[40] = 0;
      v83 = 1;
      v26 = *(NSObject **)object;
      if ((SHIBYTE(v82) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v25, v12, v11);
  v25[v11] = 0;
  v83 = 1;
  v26 = *(NSObject **)object;
  if ((SHIBYTE(v82) & 0x80000000) == 0)
  {
LABEL_28:
    if (!object[32])
      goto LABEL_37;
LABEL_35:
    if ((object[31] & 0x80000000) != 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(*(void **)&object[40]);
  if (object[32])
    goto LABEL_35;
LABEL_37:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v9 && *(_QWORD *)(v9 + 24))
  {
    v29 = _os_log_pack_size();
    v30 = (std::__shared_weak_count_vtbl *)operator new(v29, (std::align_val_t)8uLL);
    v31 = (std::__shared_weak_count *)operator new();
    v32 = v31;
    v31->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    v31->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v31->__shared_weak_owners_ = 0;
    v31[1].__vftable = v30;
    *(_QWORD *)object = v30;
    *(_QWORD *)&object[8] = v30;
    *(_QWORD *)&object[16] = v31;
    do
      v34 = __ldxr(p_shared_owners);
    while (__stxr(v34 + 1, p_shared_owners));
    memset(&object[24], 0, 24);
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v32);
    }
    v36 = *(_QWORD *)object;
    v37 = _os_log_pack_fill();
    *(_DWORD *)v37 = 134218752;
    *(double *)(v37 + 4) = a2;
    *(_WORD *)(v37 + 12) = 2048;
    *(_QWORD *)(v37 + 14) = v3;
    *(_WORD *)(v37 + 22) = 2048;
    *(_QWORD *)(v37 + 24) = v4;
    *(_WORD *)(v37 + 32) = 2048;
    *(_QWORD *)(v37 + 34) = v69;
    v38 = operator new();
    v39 = *(unsigned __int8 *)(v10 + 39);
    v40 = v67;
    if ((v39 & 0x80u) != 0)
    {
      v40 = *(_QWORD *)(v10 + 16);
      v39 = *(_QWORD *)(v10 + 24);
    }
    *(_QWORD *)v38 = v36;
    *(_OWORD *)(v38 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v38 + 24) = *(_OWORD *)&object[24];
    *(_OWORD *)&object[24] = 0uLL;
    *(_QWORD *)(v38 + 40) = v40;
    *(_QWORD *)(v38 + 48) = v39;
    *(_BYTE *)(v38 + 56) = 1;
    v78 = 0;
    v79 = v38;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), &v79);
    v41 = v79;
    v79 = 0;
    if (v41)
    {
      v42 = *(std::__shared_weak_count **)(v41 + 32);
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = *(std::__shared_weak_count **)(v41 + 16);
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      MEMORY[0x227684CE8](v41, 0x10F0C40B62ED6C6);
      v48 = v78;
      v78 = 0;
      if (v48)
      {
        v49 = *(std::__shared_weak_count **)(v48 + 32);
        if (v49)
        {
          v50 = (unint64_t *)&v49->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        v52 = *(std::__shared_weak_count **)(v48 + 16);
        if (v52)
        {
          v53 = (unint64_t *)&v52->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        MEMORY[0x227684CE8](v48, 0x10F0C40B62ED6C6);
      }
    }
    v55 = *(std::__shared_weak_count **)&object[32];
    v56 = v68;
    if (*(_QWORD *)&object[32])
    {
      v57 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v59 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v60 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
  }
  else
  {
    os_log_type_enabled(v26, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 134218752;
    *(double *)&object[4] = a2;
    *(_WORD *)&object[12] = 2048;
    *(_QWORD *)&object[14] = v3;
    *(_WORD *)&object[22] = 2048;
    *(_QWORD *)&object[24] = v4;
    *(_WORD *)&object[32] = 2048;
    *(_QWORD *)&object[34] = v69;
    v62 = (void *)_os_log_send_and_compose_impl();
    v56 = v68;
    if (v62)
      free(v62);
  }
  if (v56)
  {
    sub_22322C138((uint64_t)v70, "KFPStorage: In memory at ts %f GP: %zu KFS: %zu L: %zu", a2, v3, v4, v69);
    sub_223182C08((uint64_t)v70);
  }
  sub_223182C08((uint64_t)v70);
  v63 = v76;
  if (v76)
  {
    v64 = (unint64_t *)&v76->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  return kdebug_trace();
}

void sub_2237354F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a35)
  {
    if (a34 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_223735530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_22319A054(&a28);
  sub_22319A054(&a27);
  sub_223199DE8((uint64_t)&a29);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_223735564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  MEMORY[0x227684CE8](v9, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223735590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237355A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223735620(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v9;
  char *v10;
  unsigned __int8 *v11;
  _QWORD *v12;
  _QWORD *v13;
  _OWORD *v14;
  unint64_t v15;
  _OWORD *v16;
  __int128 v17;
  _OWORD *v18;
  unsigned __int8 v19;
  char *v20;
  size_t v21;
  _OWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  const char *v36;
  size_t v37;
  unsigned __int8 v38;
  __int128 v39;
  __int128 v40;
  unsigned __int8 v41;
  const char *v42;
  size_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  NSObject *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  size_t v52;
  std::__shared_weak_count_vtbl *v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  char *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *on_zero_shared_weak;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *on_zero_shared;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  void *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unsigned __int8 *v98;
  uint64_t v99;
  const char *v100;
  int v101;
  _QWORD *v102;
  char *v103;
  _QWORD v104[3];
  int v105;
  const char *v106;
  int v107;
  const char *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  char *v115;
  char *v116;
  char v117[37];
  char __s[37];
  uint64_t v119;
  __int128 v120;
  _BYTE v121[24];
  size_t v122;
  unint64_t v123;
  char v124;
  std::__shared_weak_count_vtbl *v125;
  __int128 v126;
  __int128 v127;
  char *v128;
  uint64_t v129;

  v129 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned __int8 **)(a2 + 240);
  v4 = *(_QWORD *)(a2 + 248);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v6 = v4 - (_QWORD)v5;
  if (v6)
  {
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF1)
      sub_22316E078();
    v7 = (unsigned __int8 *)a2;
    v9 = v6 >> 4;
    v10 = (char *)operator new(2 * v6);
    v11 = &v5[16 * v9];
    v12 = (_QWORD *)(a1 + 80);
    *a3 = (uint64_t)v10;
    a3[1] = (uint64_t)v10;
    a3[2] = (uint64_t)&v10[32 * v9];
    v98 = v7;
    v102 = (_QWORD *)(a1 + 80);
    while (1)
    {
      while (1)
      {
        v13 = sub_223340F28(v12, (uint64_t)v5);
        v14 = v13 ? v13 + 2 : 0;
        if (!v13)
          break;
        v16 = (_OWORD *)a3[1];
        v15 = a3[2];
        if ((unint64_t)v16 >= v15)
        {
          v22 = (_OWORD *)*a3;
          v23 = ((uint64_t)v16 - *a3) >> 5;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 59)
            sub_22316E078();
          v25 = v15 - (_QWORD)v22;
          if (v25 >> 4 > v24)
            v24 = v25 >> 4;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0)
            v26 = 0x7FFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
          {
            if (v26 >> 59)
              sub_223174E94();
            v27 = (char *)operator new(32 * v26);
            v28 = v14[1];
            v29 = &v27[32 * v23];
            *(_OWORD *)v29 = *v14;
            *((_OWORD *)v29 + 1) = v28;
            v30 = (uint64_t)v29;
            if (v16 != v22)
            {
              do
              {
LABEL_35:
                v40 = *(v16 - 1);
                *(_OWORD *)(v30 - 32) = *(v16 - 2);
                *(_OWORD *)(v30 - 16) = v40;
                v30 -= 32;
                v16 -= 2;
              }
              while (v16 != v22);
              v16 = v22;
              v18 = v29 + 32;
              *a3 = v30;
              a3[1] = (uint64_t)(v29 + 32);
              a3[2] = (uint64_t)&v27[32 * v26];
              if (!v16)
                goto LABEL_25;
LABEL_24:
              operator delete(v16);
              goto LABEL_25;
            }
          }
          else
          {
            v27 = 0;
            v39 = v14[1];
            v29 = (char *)(32 * v23);
            *(_OWORD *)v29 = *v14;
            *((_OWORD *)v29 + 1) = v39;
            v30 = 32 * v23;
            if (v16 != v22)
              goto LABEL_35;
          }
          v18 = v29 + 32;
          *a3 = v30;
          a3[1] = (uint64_t)(v29 + 32);
          a3[2] = (uint64_t)&v27[32 * v26];
          if (v16)
            goto LABEL_24;
        }
        else
        {
          v17 = v14[1];
          *v16 = *v14;
          v16[1] = v17;
          v18 = v16 + 2;
        }
LABEL_25:
        a3[1] = (uint64_t)v18;
        v5 += 16;
        if (v5 == v11)
          return;
      }
      v19 = atomic_load((unsigned __int8 *)&qword_2557892F0);
      if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
      {
        __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
        __cxa_guard_release(&qword_2557892F0);
      }
      sub_223729BE0(&v119);
      if (*(char *)(v119 + 39) < 0)
      {
        v20 = *(char **)(v119 + 16);
        v21 = *(_QWORD *)(v119 + 24);
      }
      else
      {
        v20 = (char *)(v119 + 16);
        v21 = *(unsigned __int8 *)(v119 + 39);
      }
      sub_223195728((uint64_t)&stru_255789280, v20, v21, "GetGPLinks: Stale KP %.13s in GP %.13s", 0x26uLL);
      v31 = v11;
      sub_22372F598(&v111);
      if (**(int **)(v111 + 56) <= 5)
      {
        v32 = *(unsigned __int8 *)(v111 + 72);
        v33 = sub_22322F254(v111, "OSLogSurrogateAppender", 1, 0);
        v34 = v33;
        if (v32 || v33)
          break;
      }
LABEL_4:
      v11 = v31;
      v12 = v102;
      v5 += 16;
      if (v5 == v31)
        return;
    }
    v104[0] = &v111;
    v104[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v104[2] = std::chrono::system_clock::now().__d_.__rep_;
    v105 = 5;
    v106 = "unknown file";
    v107 = 615;
    v108 = "unknown function";
    v109 = 0;
    v110 = 0;
    sub_2245664AC(v5, __s);
    v101 = v32;
    sub_2245664AC(v7, v117);
    v103 = v117;
    v35 = *(_QWORD *)v104[0];
    v36 = (const char *)(*(_QWORD *)v104[0] + 16);
    v99 = *(_QWORD *)v104[0];
    v100 = v36;
    if (*(char *)(*(_QWORD *)v104[0] + 39) < 0)
    {
      v36 = *(const char **)(v35 + 16);
      v37 = *(_QWORD *)(v35 + 24);
      v41 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v41 & 1) != 0)
        goto LABEL_39;
    }
    else
    {
      v37 = *(unsigned __int8 *)(*(_QWORD *)v104[0] + 39);
      v38 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v38 & 1) != 0)
        goto LABEL_39;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&v125);
      sub_223199C58("com.apple.cv3d", (unint64_t)&v125, &xmmword_255788F40);
      if ((_BYTE)v127 && SHIBYTE(v126) < 0)
        operator delete(v125);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_39:
    if (byte_255788F57 >= 0)
      v42 = (const char *)&xmmword_255788F40;
    else
      v42 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v43 = byte_255788F57;
    else
      v43 = *((_QWORD *)&xmmword_255788F40 + 1);
    v119 = (uint64_t)os_log_create(v42, v36);
    if (v43 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v43 >= 0x17)
    {
      v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17)
        v45 = v43 | 7;
      v46 = v45 + 1;
      v44 = (__int128 *)operator new(v45 + 1);
      *((_QWORD *)&v120 + 1) = v43;
      *(_QWORD *)v121 = v46 | 0x8000000000000000;
      *(_QWORD *)&v120 = v44;
    }
    else
    {
      v121[7] = v43;
      v44 = &v120;
      if (!v43)
      {
LABEL_53:
        *((_BYTE *)v44 + v43) = 0;
        v121[8] = 1;
        if (v37 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v7 = v98;
        if (v37 >= 0x17)
        {
          v50 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v37 | 7) != 0x17)
            v50 = v37 | 7;
          v51 = v50 + 1;
          v47 = operator new(v50 + 1);
          v122 = v37;
          v123 = v51 | 0x8000000000000000;
          *(_QWORD *)&v121[16] = v47;
        }
        else
        {
          HIBYTE(v123) = v37;
          v47 = &v121[16];
          if (!v37)
          {
            v121[16] = 0;
            v124 = 1;
            v48 = v119;
            if ((SHIBYTE(v123) & 0x80000000) == 0)
              goto LABEL_57;
            goto LABEL_63;
          }
        }
        memmove(v47, v36, v37);
        v47[v37] = 0;
        v124 = 1;
        v48 = v119;
        if ((SHIBYTE(v123) & 0x80000000) == 0)
        {
LABEL_57:
          v49 = v101;
          if (!v121[8])
            goto LABEL_66;
          goto LABEL_64;
        }
LABEL_63:
        operator delete(*(void **)&v121[16]);
        v49 = v101;
        if (!v121[8])
        {
LABEL_66:
          if (v119)
            os_release((void *)v119);
          if (v34 && *(_QWORD *)(v34 + 24))
          {
            v52 = _os_log_pack_size();
            v53 = (std::__shared_weak_count_vtbl *)operator new(v52, (std::align_val_t)8uLL);
            v54 = (std::__shared_weak_count *)operator new();
            v54->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v54->__shared_owners_;
            v54->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v54->__shared_weak_owners_ = 0;
            v54[1].__vftable = v53;
            v112 = v53;
            v113 = v53;
            v114 = v54;
            v115 = 0;
            v116 = 0;
            sub_223738130((uint64_t)&v119, __s, (const char **)&v103);
            v56 = (char *)operator new(0x50uLL);
            v57 = (std::__shared_weak_count *)v56;
            *((_QWORD *)v56 + 1) = 0;
            v58 = (unint64_t *)(v56 + 8);
            *((_QWORD *)v56 + 2) = 0;
            *(_QWORD *)v56 = &off_24EC20730;
            *((_QWORD *)v56 + 3) = off_24EC20780;
            *((_OWORD *)v56 + 2) = v120;
            *((_QWORD *)v56 + 6) = *(_QWORD *)v121;
            *(_OWORD *)(v56 + 56) = *(_OWORD *)&v121[8];
            *((_QWORD *)v56 + 9) = v122;
            v115 = v56 + 24;
            v116 = v56;
            v125 = v53;
            *(_QWORD *)&v126 = v53;
            *((_QWORD *)&v126 + 1) = v54;
            do
              v59 = __ldxr(p_shared_owners);
            while (__stxr(v59 + 1, p_shared_owners));
            *(_QWORD *)&v127 = v56 + 24;
            *((_QWORD *)&v127 + 1) = v56;
            do
              v60 = __ldxr(v58);
            while (__stxr(v60 + 1, v58));
            v128 = v56 + 24;
            do
              v61 = __ldaxr(v58);
            while (__stlxr(v61 - 1, v58));
            if (!v61)
            {
              (*(void (**)(char *))(*(_QWORD *)v56 + 16))(v56);
              std::__shared_weak_count::__release_weak(v57);
            }
            v62 = v114;
            if (v114)
            {
              v63 = (unint64_t *)&v114->__shared_owners_;
              do
                v64 = __ldaxr(v63);
              while (__stlxr(v64 - 1, v63));
              if (!v64)
              {
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
              }
            }
            v65 = v125;
            if (v128[31] >= 0)
              v66 = v128 + 8;
            else
              v66 = (char *)*((_QWORD *)v128 + 1);
            if (v128[55] >= 0)
              v67 = v128 + 32;
            else
              v67 = (char *)*((_QWORD *)v128 + 4);
            v68 = _os_log_pack_fill();
            *(_DWORD *)v68 = 68158466;
            *(_DWORD *)(v68 + 4) = 13;
            *(_WORD *)(v68 + 8) = 2080;
            *(_QWORD *)(v68 + 10) = v66;
            *(_WORD *)(v68 + 18) = 1040;
            *(_DWORD *)(v68 + 20) = 13;
            *(_WORD *)(v68 + 24) = 2080;
            *(_QWORD *)(v68 + 26) = v67;
            v69 = (char *)operator new();
            v70 = *(unsigned __int8 *)(v99 + 39);
            v71 = *(const char **)(v99 + 16);
            v72 = *(_QWORD *)(v99 + 24);
            v73 = v127;
            *(_OWORD *)(v69 + 8) = v126;
            if ((v70 & 0x80u) != 0)
              v70 = v72;
            else
              v71 = v100;
            *(_QWORD *)v69 = v65;
            v126 = 0uLL;
            *(_OWORD *)(v69 + 24) = v73;
            v127 = 0uLL;
            *((_QWORD *)v69 + 5) = v71;
            *((_QWORD *)v69 + 6) = v70;
            v69[56] = 16;
            v112 = 0;
            v119 = (uint64_t)v69;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v34 + 24) + 40))(*(_QWORD *)(v34 + 24), &v119);
            v49 = v101;
            v74 = v119;
            v119 = 0;
            if (v74)
            {
              v75 = *(std::__shared_weak_count **)(v74 + 32);
              if (v75)
              {
                v76 = (unint64_t *)&v75->__shared_owners_;
                do
                  v77 = __ldaxr(v76);
                while (__stlxr(v77 - 1, v76));
                if (!v77)
                {
                  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                  std::__shared_weak_count::__release_weak(v75);
                }
              }
              v78 = *(std::__shared_weak_count **)(v74 + 16);
              if (v78)
              {
                v79 = (unint64_t *)&v78->__shared_owners_;
                do
                  v80 = __ldaxr(v79);
                while (__stlxr(v80 - 1, v79));
                if (!v80)
                {
                  ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                  std::__shared_weak_count::__release_weak(v78);
                }
              }
              MEMORY[0x227684CE8](v74, 0x10F0C40B62ED6C6);
              v81 = v112;
              v112 = 0;
              if (v81)
              {
                on_zero_shared_weak = (std::__shared_weak_count *)v81->__on_zero_shared_weak;
                if (on_zero_shared_weak)
                {
                  v83 = (unint64_t *)&on_zero_shared_weak->__shared_owners_;
                  do
                    v84 = __ldaxr(v83);
                  while (__stlxr(v84 - 1, v83));
                  if (!v84)
                  {
                    ((void (*)(std::__shared_weak_count *))on_zero_shared_weak->__on_zero_shared)(on_zero_shared_weak);
                    std::__shared_weak_count::__release_weak(on_zero_shared_weak);
                  }
                }
                on_zero_shared = (std::__shared_weak_count *)v81->__on_zero_shared;
                if (on_zero_shared)
                {
                  v86 = (unint64_t *)&on_zero_shared->__shared_owners_;
                  do
                    v87 = __ldaxr(v86);
                  while (__stlxr(v87 - 1, v86));
                  if (!v87)
                  {
                    ((void (*)(std::__shared_weak_count *))on_zero_shared->__on_zero_shared)(on_zero_shared);
                    std::__shared_weak_count::__release_weak(on_zero_shared);
                  }
                }
                MEMORY[0x227684CE8](v81, 0x10F0C40B62ED6C6);
              }
            }
            v88 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
            if (*((_QWORD *)&v127 + 1))
            {
              v89 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
              do
                v90 = __ldaxr(v89);
              while (__stlxr(v90 - 1, v89));
              if (!v90)
              {
                ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                std::__shared_weak_count::__release_weak(v88);
              }
            }
            v91 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
            if (*((_QWORD *)&v126 + 1))
            {
              v92 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
              do
                v93 = __ldaxr(v92);
              while (__stlxr(v93 - 1, v92));
              if (!v93)
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v91);
              }
            }
          }
          else
          {
            os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
            v119 = 0xD04100402;
            LOWORD(v120) = 2080;
            *(_QWORD *)((char *)&v120 + 2) = __s;
            WORD5(v120) = 1040;
            HIDWORD(v120) = 13;
            *(_WORD *)v121 = 2080;
            *(_QWORD *)&v121[2] = v103;
            v94 = (void *)_os_log_send_and_compose_impl();
            if (v94)
              free(v94);
          }
          if (v49)
          {
            sub_2245664AC(v5, &v119);
            sub_2245664AC(v98, &v125);
            sub_22322C138((uint64_t)v104, "GetGPLinks: Stale KP %.13s in GP %.13s", (const char *)&v119, (const char *)&v125);
            sub_223182C08((uint64_t)v104);
          }
          sub_223182C08((uint64_t)v104);
          v95 = v110;
          if (v110)
          {
            v96 = (unint64_t *)&v110->__shared_owners_;
            do
              v97 = __ldaxr(v96);
            while (__stlxr(v97 - 1, v96));
            if (!v97)
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
          }
          goto LABEL_4;
        }
LABEL_64:
        if ((v121[7] & 0x80000000) != 0)
          operator delete((void *)v120);
        goto LABEL_66;
      }
    }
    memmove(v44, v42, v43);
    goto LABEL_53;
  }
}

void sub_22373612C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  void *v29;

  if (*(_BYTE *)(v27 - 128) && *(char *)(v27 - 129) < 0)
    operator delete(*(void **)(v27 - 152));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a26);
  v29 = *(void **)v26;
  if (*(_QWORD *)v26)
  {
    *(_QWORD *)(v26 + 8) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void sub_223736280(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, void **a4@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  _QWORD *i;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unsigned __int8 v15;
  char *v16;
  size_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  unsigned __int8 *v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  const char *v33;
  size_t v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  const char *v37;
  size_t v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _BYTE *v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  std::__shared_weak_count_vtbl *v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  char *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count_vtbl *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *on_zero_shared_weak;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *on_zero_shared;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  const char *v94;
  int v96;
  _QWORD *v99;
  char *v100;
  _QWORD v101[3];
  int v102;
  const char *v103;
  int v104;
  const char *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  uint64_t v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  char *v112;
  char *v113;
  char v114[37];
  char __s[37];
  uint64_t v116;
  __int128 v117;
  _BYTE v118[24];
  size_t v119;
  unint64_t v120;
  char v121;
  std::__shared_weak_count_vtbl *v122;
  __int128 v123;
  __int128 v124;
  char *v125;
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = *(unsigned __int8 **)(a2 + 240);
  v6 = *(unsigned __int8 **)(a2 + 248);
  if (v6 != v5)
  {
    v99 = a1 + 10;
    for (i = sub_22342DA5C(a1 + 10, (uint64_t)v5); ; i = sub_22342DA5C(v99, (uint64_t)v5))
    {
      if (i)
        v8 = i + 2;
      else
        v8 = 0;
      if (!i)
      {
        v15 = atomic_load((unsigned __int8 *)&qword_2557892F0);
        if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
        {
          __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
          __cxa_guard_release(&qword_2557892F0);
        }
        sub_223729BE0(&v116);
        if (*(char *)(v116 + 39) < 0)
        {
          v16 = *(char **)(v116 + 16);
          v17 = *(_QWORD *)(v116 + 24);
        }
        else
        {
          v16 = (char *)(v116 + 16);
          v17 = *(unsigned __int8 *)(v116 + 39);
        }
        sub_223195728((uint64_t)&stru_255789280, v16, v17, "GetKPLinkedToGP: Stale KP %.13s in GP %.13s", 0x2BuLL);
        v28 = v6;
        sub_22372F598(&v108);
        if (**(int **)(v108 + 56) > 5)
          goto LABEL_3;
        v29 = *(unsigned __int8 *)(v108 + 72);
        v30 = sub_22322F254(v108, "OSLogSurrogateAppender", 1, 0);
        v31 = v30;
        if (!v29 && !v30)
          goto LABEL_3;
        v101[0] = &v108;
        v101[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v101[2] = std::chrono::system_clock::now().__d_.__rep_;
        v102 = 5;
        v103 = "unknown file";
        v104 = 641;
        v105 = "unknown function";
        v106 = 0;
        v107 = 0;
        sub_2245664AC(v5, __s);
        sub_2245664AC((unsigned __int8 *)a2, v114);
        v100 = v114;
        v32 = *(_QWORD *)v101[0];
        v33 = (const char *)(*(_QWORD *)v101[0] + 16);
        v94 = v33;
        if (*(char *)(*(_QWORD *)v101[0] + 39) < 0)
        {
          v33 = *(const char **)(v32 + 16);
          v34 = *(_QWORD *)(v32 + 24);
          v93 = *(_QWORD *)v101[0];
          v36 = atomic_load((unsigned __int8 *)&qword_255788F58);
          v96 = v29;
          if ((v36 & 1) == 0)
          {
LABEL_138:
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)&v122);
              sub_223199C58("com.apple.cv3d", (unint64_t)&v122, &xmmword_255788F40);
              if ((_BYTE)v124 && SHIBYTE(v123) < 0)
                operator delete(v122);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
          }
        }
        else
        {
          v34 = *(unsigned __int8 *)(*(_QWORD *)v101[0] + 39);
          v93 = *(_QWORD *)v101[0];
          v35 = atomic_load((unsigned __int8 *)&qword_255788F58);
          v96 = v29;
          if ((v35 & 1) == 0)
            goto LABEL_138;
        }
        if (byte_255788F57 >= 0)
          v37 = (const char *)&xmmword_255788F40;
        else
          v37 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v38 = byte_255788F57;
        else
          v38 = *((_QWORD *)&xmmword_255788F40 + 1);
        v116 = (uint64_t)os_log_create(v37, v33);
        if (v38 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v38 >= 0x17)
        {
          v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v38 | 7) != 0x17)
            v40 = v38 | 7;
          v41 = v40 + 1;
          v39 = (__int128 *)operator new(v40 + 1);
          *((_QWORD *)&v117 + 1) = v38;
          *(_QWORD *)v118 = v41 | 0x8000000000000000;
          *(_QWORD *)&v117 = v39;
        }
        else
        {
          v118[7] = v38;
          v39 = &v117;
          if (!v38)
          {
LABEL_55:
            *((_BYTE *)v39 + v38) = 0;
            v118[8] = 1;
            if (v34 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v42 = v96;
            if (v34 >= 0x17)
            {
              v45 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v34 | 7) != 0x17)
                v45 = v34 | 7;
              v46 = v45 + 1;
              v43 = operator new(v45 + 1);
              v119 = v34;
              v120 = v46 | 0x8000000000000000;
              *(_QWORD *)&v118[16] = v43;
            }
            else
            {
              HIBYTE(v120) = v34;
              v43 = &v118[16];
              if (!v34)
              {
                v118[16] = 0;
                v121 = 1;
                v44 = v116;
                if ((SHIBYTE(v120) & 0x80000000) == 0)
                  goto LABEL_59;
LABEL_65:
                operator delete(*(void **)&v118[16]);
                if (v118[8])
                  goto LABEL_66;
                goto LABEL_68;
              }
            }
            memmove(v43, v33, v34);
            v43[v34] = 0;
            v121 = 1;
            v44 = v116;
            if (SHIBYTE(v120) < 0)
              goto LABEL_65;
LABEL_59:
            if (v118[8])
            {
LABEL_66:
              if ((v118[7] & 0x80000000) != 0)
                operator delete((void *)v117);
            }
LABEL_68:
            if (v116)
              os_release((void *)v116);
            if (v31 && *(_QWORD *)(v31 + 24))
            {
              v47 = _os_log_pack_size();
              v48 = (std::__shared_weak_count_vtbl *)operator new(v47, (std::align_val_t)8uLL);
              v49 = (std::__shared_weak_count *)operator new();
              v49->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v49->__shared_owners_;
              v49->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v49->__shared_weak_owners_ = 0;
              v49[1].__vftable = v48;
              v109 = v48;
              v110 = v48;
              v111 = v49;
              v112 = 0;
              v113 = 0;
              sub_223738130((uint64_t)&v116, __s, (const char **)&v100);
              v51 = (char *)operator new(0x50uLL);
              v52 = (std::__shared_weak_count *)v51;
              *((_QWORD *)v51 + 1) = 0;
              v53 = (unint64_t *)(v51 + 8);
              *((_QWORD *)v51 + 2) = 0;
              *(_QWORD *)v51 = &off_24EC20730;
              *((_QWORD *)v51 + 3) = off_24EC20780;
              *((_OWORD *)v51 + 2) = v117;
              *((_QWORD *)v51 + 6) = *(_QWORD *)v118;
              *(_OWORD *)(v51 + 56) = *(_OWORD *)&v118[8];
              *((_QWORD *)v51 + 9) = v119;
              v112 = v51 + 24;
              v113 = v51;
              v122 = v48;
              *(_QWORD *)&v123 = v48;
              *((_QWORD *)&v123 + 1) = v49;
              do
                v54 = __ldxr(p_shared_owners);
              while (__stxr(v54 + 1, p_shared_owners));
              *(_QWORD *)&v124 = v51 + 24;
              *((_QWORD *)&v124 + 1) = v51;
              do
                v55 = __ldxr(v53);
              while (__stxr(v55 + 1, v53));
              v125 = v51 + 24;
              do
                v56 = __ldaxr(v53);
              while (__stlxr(v56 - 1, v53));
              if (!v56)
              {
                (*(void (**)(char *))(*(_QWORD *)v51 + 16))(v51);
                std::__shared_weak_count::__release_weak(v52);
              }
              v57 = v111;
              if (v111)
              {
                v58 = (unint64_t *)&v111->__shared_owners_;
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
              v60 = v122;
              if (v125[31] >= 0)
                v61 = v125 + 8;
              else
                v61 = (char *)*((_QWORD *)v125 + 1);
              if (v125[55] >= 0)
                v62 = v125 + 32;
              else
                v62 = (char *)*((_QWORD *)v125 + 4);
              v63 = _os_log_pack_fill();
              *(_DWORD *)v63 = 68158466;
              *(_DWORD *)(v63 + 4) = 13;
              *(_WORD *)(v63 + 8) = 2080;
              *(_QWORD *)(v63 + 10) = v61;
              *(_WORD *)(v63 + 18) = 1040;
              *(_DWORD *)(v63 + 20) = 13;
              *(_WORD *)(v63 + 24) = 2080;
              *(_QWORD *)(v63 + 26) = v62;
              v64 = (char *)operator new();
              v65 = *(unsigned __int8 *)(v93 + 39);
              v66 = *(const char **)(v93 + 16);
              v67 = *(_QWORD *)(v93 + 24);
              v68 = v124;
              *(_OWORD *)(v64 + 8) = v123;
              if ((v65 & 0x80u) != 0)
                v65 = v67;
              else
                v66 = v94;
              *(_QWORD *)v64 = v60;
              v123 = 0uLL;
              *(_OWORD *)(v64 + 24) = v68;
              v124 = 0uLL;
              *((_QWORD *)v64 + 5) = v66;
              *((_QWORD *)v64 + 6) = v65;
              v64[56] = 16;
              v109 = 0;
              v116 = (uint64_t)v64;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v31 + 24) + 40))(*(_QWORD *)(v31 + 24), &v116);
              v42 = v96;
              v69 = v116;
              v116 = 0;
              if (v69)
              {
                v70 = *(std::__shared_weak_count **)(v69 + 32);
                if (v70)
                {
                  v71 = (unint64_t *)&v70->__shared_owners_;
                  do
                    v72 = __ldaxr(v71);
                  while (__stlxr(v72 - 1, v71));
                  if (!v72)
                  {
                    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                    std::__shared_weak_count::__release_weak(v70);
                  }
                }
                v73 = *(std::__shared_weak_count **)(v69 + 16);
                if (v73)
                {
                  v74 = (unint64_t *)&v73->__shared_owners_;
                  do
                    v75 = __ldaxr(v74);
                  while (__stlxr(v75 - 1, v74));
                  if (!v75)
                  {
                    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                    std::__shared_weak_count::__release_weak(v73);
                  }
                }
                MEMORY[0x227684CE8](v69, 0x10F0C40B62ED6C6);
                v76 = v109;
                v109 = 0;
                if (v76)
                {
                  on_zero_shared_weak = (std::__shared_weak_count *)v76->__on_zero_shared_weak;
                  if (on_zero_shared_weak)
                  {
                    v78 = (unint64_t *)&on_zero_shared_weak->__shared_owners_;
                    do
                      v79 = __ldaxr(v78);
                    while (__stlxr(v79 - 1, v78));
                    if (!v79)
                    {
                      ((void (*)(std::__shared_weak_count *))on_zero_shared_weak->__on_zero_shared)(on_zero_shared_weak);
                      std::__shared_weak_count::__release_weak(on_zero_shared_weak);
                    }
                  }
                  on_zero_shared = (std::__shared_weak_count *)v76->__on_zero_shared;
                  if (on_zero_shared)
                  {
                    v81 = (unint64_t *)&on_zero_shared->__shared_owners_;
                    do
                      v82 = __ldaxr(v81);
                    while (__stlxr(v82 - 1, v81));
                    if (!v82)
                    {
                      ((void (*)(std::__shared_weak_count *))on_zero_shared->__on_zero_shared)(on_zero_shared);
                      std::__shared_weak_count::__release_weak(on_zero_shared);
                    }
                  }
                  MEMORY[0x227684CE8](v76, 0x10F0C40B62ED6C6);
                }
              }
              v83 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
              if (*((_QWORD *)&v124 + 1))
              {
                v84 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
                do
                  v85 = __ldaxr(v84);
                while (__stlxr(v85 - 1, v84));
                if (!v85)
                {
                  ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                  std::__shared_weak_count::__release_weak(v83);
                }
              }
              v86 = (std::__shared_weak_count *)*((_QWORD *)&v123 + 1);
              if (*((_QWORD *)&v123 + 1))
              {
                v87 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
                do
                  v88 = __ldaxr(v87);
                while (__stlxr(v88 - 1, v87));
                if (!v88)
                {
                  ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                  std::__shared_weak_count::__release_weak(v86);
                }
              }
            }
            else
            {
              os_log_type_enabled(v44, OS_LOG_TYPE_ERROR);
              v116 = 0xD04100402;
              LOWORD(v117) = 2080;
              *(_QWORD *)((char *)&v117 + 2) = __s;
              WORD5(v117) = 1040;
              HIDWORD(v117) = 13;
              *(_WORD *)v118 = 2080;
              *(_QWORD *)&v118[2] = v100;
              v89 = (void *)_os_log_send_and_compose_impl();
              if (v89)
                free(v89);
            }
            if (v42)
            {
              sub_2245664AC(v5, &v116);
              sub_2245664AC((unsigned __int8 *)a2, &v122);
              sub_22322C138((uint64_t)v101, "GetKPLinkedToGP: Stale KP %.13s in GP %.13s", (const char *)&v116, (const char *)&v122);
              sub_223182C08((uint64_t)v101);
            }
            sub_223182C08((uint64_t)v101);
            v90 = v107;
            if (v107)
            {
              v91 = (unint64_t *)&v107->__shared_owners_;
              do
                v92 = __ldaxr(v91);
              while (__stlxr(v92 - 1, v91));
              if (!v92)
              {
                ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                std::__shared_weak_count::__release_weak(v90);
              }
            }
LABEL_3:
            v6 = v28;
            goto LABEL_4;
          }
        }
        memmove(v39, v37, v38);
        goto LABEL_55;
      }
      v9 = v8[3];
      if (sub_223340F28(a3, v9))
        break;
LABEL_4:
      v5 += 16;
      if (v5 == v6)
        return;
    }
    v10 = sub_22342DA5C(a1, v9);
    if (v10)
    {
      v11 = v10[4];
      v13 = (char *)a4[1];
      v12 = (char *)a4[2];
      if (v13 < v12)
      {
LABEL_13:
        *(_OWORD *)v13 = *(_OWORD *)v8;
        *((_QWORD *)v13 + 2) = v11;
        v14 = v13 + 24;
        goto LABEL_30;
      }
    }
    else
    {
      v11 = 0;
      v13 = (char *)a4[1];
      v12 = (char *)a4[2];
      if (v13 < v12)
        goto LABEL_13;
    }
    v18 = (char *)*a4;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (_BYTE *)*a4) >> 3);
    v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_2236B43DC();
    v21 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v18) >> 3);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0x555555555555555)
      v22 = 0xAAAAAAAAAAAAAAALL;
    else
      v22 = v20;
    if (v22 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v23 = (char *)operator new(24 * v22);
    v24 = &v23[24 * v19];
    *(_OWORD *)v24 = *(_OWORD *)v8;
    *((_QWORD *)v24 + 2) = v11;
    if (v13 == v18)
    {
      v14 = v24 + 24;
      *a4 = v24;
      a4[1] = v24 + 24;
      a4[2] = &v23[24 * v22];
      if (!v18)
        goto LABEL_30;
    }
    else
    {
      v25 = &v23[24 * v19];
      do
      {
        v26 = v25 - 24;
        v27 = *(_OWORD *)(v13 - 24);
        *((_QWORD *)v25 - 1) = *((_QWORD *)v13 - 1);
        *(_OWORD *)(v25 - 24) = v27;
        v13 -= 24;
        v25 -= 24;
      }
      while (v13 != v18);
      v14 = v24 + 24;
      *a4 = v26;
      a4[1] = v24 + 24;
      a4[2] = &v23[24 * v22];
      if (!v18)
        goto LABEL_30;
    }
    operator delete(v18);
LABEL_30:
    a4[1] = v14;
    goto LABEL_4;
  }
}

void sub_223736DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  uint64_t v29;
  void *v31;

  if (*(_BYTE *)(v29 - 128) && *(char *)(v29 - 129) < 0)
    operator delete(*(void **)(v29 - 152));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a28);
  v31 = *(void **)v28;
  if (*(_QWORD *)v28)
  {
    *(_QWORD *)(v28 + 8) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void sub_223736F20(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, void **a4@<X8>)
{
  unsigned __int8 *v5;
  _QWORD *i;
  char *v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  unsigned __int8 v21;
  char *v22;
  size_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  size_t v28;
  const char *v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  const char *v32;
  size_t v33;
  __int128 *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  std::__shared_weak_count_vtbl *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  char *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count_vtbl *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count_vtbl *v70;
  std::__shared_weak_count *on_zero_shared_weak;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *on_zero_shared;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v91;
  unsigned __int8 *v92;
  char *v93;
  _QWORD v94[3];
  int v95;
  const char *v96;
  int v97;
  const char *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  uint64_t v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  char *v105;
  char *v106;
  char v107[37];
  char __s[37];
  uint64_t v109;
  __int128 v110;
  _BYTE v111[24];
  size_t v112;
  unint64_t v113;
  char v114;
  std::__shared_weak_count_vtbl *v115;
  __int128 v116;
  __int128 v117;
  char *v118;
  uint64_t v119;

  v119 = *MEMORY[0x24BDAC8D0];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = *(unsigned __int8 **)(a2 + 240);
  v92 = *(unsigned __int8 **)(a2 + 248);
  if (v92 != v5)
  {
    v91 = (_QWORD *)(a1 + 80);
    for (i = sub_223340F28((_QWORD *)(a1 + 80), (uint64_t)v5); ; i = sub_223340F28(v91, (uint64_t)v5))
    {
      if (i)
        v8 = i + 2;
      else
        v8 = 0;
      if (i)
      {
        if (sub_223340F28(a3, v8[3]))
        {
          v10 = (char *)a4[1];
          v9 = (char *)a4[2];
          if (v10 < v9)
          {
            *(_OWORD *)v10 = *(_OWORD *)v8;
            *((_QWORD *)v10 + 2) = v8[3];
            v7 = v10 + 24;
          }
          else
          {
            v11 = (char *)*a4;
            v12 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (_BYTE *)*a4) >> 3);
            v13 = v12 + 1;
            if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_22316E078();
            v14 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v11) >> 3);
            if (2 * v14 > v13)
              v13 = 2 * v14;
            if (v14 >= 0x555555555555555)
              v15 = 0xAAAAAAAAAAAAAAALL;
            else
              v15 = v13;
            if (v15 > 0xAAAAAAAAAAAAAAALL)
              sub_223174E94();
            v16 = (char *)operator new(24 * v15);
            v17 = &v16[24 * v12];
            *(_OWORD *)v17 = *(_OWORD *)v8;
            *((_QWORD *)v17 + 2) = v8[3];
            if (v10 == v11)
            {
              v7 = v17 + 24;
              *a4 = v17;
              a4[1] = v17 + 24;
              a4[2] = &v16[24 * v15];
              if (v11)
                goto LABEL_36;
            }
            else
            {
              v18 = &v16[24 * v12];
              do
              {
                v19 = v18 - 24;
                v20 = *(_OWORD *)(v10 - 24);
                *((_QWORD *)v18 - 1) = *((_QWORD *)v10 - 1);
                *(_OWORD *)(v18 - 24) = v20;
                v10 -= 24;
                v18 -= 24;
              }
              while (v10 != v11);
              v7 = v17 + 24;
              *a4 = v19;
              a4[1] = v17 + 24;
              a4[2] = &v16[24 * v15];
              if (!v11)
                goto LABEL_4;
LABEL_36:
              operator delete(v11);
            }
          }
LABEL_4:
          a4[1] = v7;
        }
      }
      else
      {
        v21 = atomic_load((unsigned __int8 *)&qword_2557892F0);
        if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
        {
          __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
          __cxa_guard_release(&qword_2557892F0);
        }
        sub_223729BE0(&v109);
        if (*(char *)(v109 + 39) < 0)
        {
          v22 = *(char **)(v109 + 16);
          v23 = *(_QWORD *)(v109 + 24);
        }
        else
        {
          v22 = (char *)(v109 + 16);
          v23 = *(unsigned __int8 *)(v109 + 39);
        }
        sub_223195728((uint64_t)&stru_255789280, v22, v23, "GetKPLinkedToGP: Stale KP %.13s in GP %.13s", 0x2BuLL);
        sub_22372F598(&v101);
        if (**(int **)(v101 + 56) <= 5)
        {
          v24 = *(unsigned __int8 *)(v101 + 72);
          v25 = sub_22322F254(v101, "OSLogSurrogateAppender", 1, 0);
          v26 = v25;
          if (v24 || v25)
          {
            v94[0] = &v101;
            v94[1] = std::chrono::steady_clock::now().__d_.__rep_;
            v94[2] = std::chrono::system_clock::now().__d_.__rep_;
            v95 = 5;
            v96 = "unknown file";
            v97 = 641;
            v98 = "unknown function";
            v99 = 0;
            v100 = 0;
            sub_2245664AC(v5, __s);
            sub_2245664AC((unsigned __int8 *)a2, v107);
            v93 = v107;
            v27 = *(_QWORD *)v94[0];
            v87 = *(_QWORD *)v94[0];
            if (*(char *)(*(_QWORD *)v94[0] + 39) < 0)
            {
              v29 = *(const char **)(v27 + 16);
              v28 = *(_QWORD *)(v27 + 24);
              v88 = *(_QWORD *)v94[0] + 16;
              v31 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v31 & 1) == 0)
              {
LABEL_135:
                if (__cxa_guard_acquire(&qword_255788F58))
                {
                  sub_224568628((uint64_t)&v115);
                  sub_223199C58("com.apple.cv3d", (unint64_t)&v115, &xmmword_255788F40);
                  if ((_BYTE)v117 && SHIBYTE(v116) < 0)
                    operator delete(v115);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                  __cxa_guard_release(&qword_255788F58);
                }
              }
            }
            else
            {
              v28 = *(unsigned __int8 *)(*(_QWORD *)v94[0] + 39);
              v29 = (const char *)(*(_QWORD *)v94[0] + 16);
              v88 = (uint64_t)v29;
              v30 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v30 & 1) == 0)
                goto LABEL_135;
            }
            if (byte_255788F57 >= 0)
              v32 = (const char *)&xmmword_255788F40;
            else
              v32 = (const char *)xmmword_255788F40;
            if (byte_255788F57 >= 0)
              v33 = byte_255788F57;
            else
              v33 = *((_QWORD *)&xmmword_255788F40 + 1);
            v109 = (uint64_t)os_log_create(v32, v29);
            if (v33 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v33 >= 0x17)
            {
              v35 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v33 | 7) != 0x17)
                v35 = v33 | 7;
              v36 = v35 + 1;
              v34 = (__int128 *)operator new(v35 + 1);
              *((_QWORD *)&v110 + 1) = v33;
              *(_QWORD *)v111 = v36 | 0x8000000000000000;
              *(_QWORD *)&v110 = v34;
            }
            else
            {
              v111[7] = v33;
              v34 = &v110;
              if (!v33)
              {
LABEL_52:
                *((_BYTE *)v34 + v33) = 0;
                v111[8] = 1;
                if (v28 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                if (v28 >= 0x17)
                {
                  v39 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v28 | 7) != 0x17)
                    v39 = v28 | 7;
                  v40 = v39 + 1;
                  v37 = operator new(v39 + 1);
                  v112 = v28;
                  v113 = v40 | 0x8000000000000000;
                  *(_QWORD *)&v111[16] = v37;
                }
                else
                {
                  HIBYTE(v113) = v28;
                  v37 = &v111[16];
                  if (!v28)
                  {
                    v111[16] = 0;
                    v114 = 1;
                    v38 = v109;
                    if ((SHIBYTE(v113) & 0x80000000) == 0)
                      goto LABEL_56;
LABEL_62:
                    operator delete(*(void **)&v111[16]);
                    if (v111[8])
                      goto LABEL_63;
                    goto LABEL_65;
                  }
                }
                memmove(v37, v29, v28);
                v37[v28] = 0;
                v114 = 1;
                v38 = v109;
                if (SHIBYTE(v113) < 0)
                  goto LABEL_62;
LABEL_56:
                if (v111[8])
                {
LABEL_63:
                  if ((v111[7] & 0x80000000) != 0)
                    operator delete((void *)v110);
                }
LABEL_65:
                if (v109)
                  os_release((void *)v109);
                if (v26 && *(_QWORD *)(v26 + 24))
                {
                  v41 = _os_log_pack_size();
                  v42 = (std::__shared_weak_count_vtbl *)operator new(v41, (std::align_val_t)8uLL);
                  v43 = (std::__shared_weak_count *)operator new();
                  v43->__shared_owners_ = 0;
                  p_shared_owners = (unint64_t *)&v43->__shared_owners_;
                  v43->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                  v43->__shared_weak_owners_ = 0;
                  v43[1].__vftable = v42;
                  v102 = v42;
                  v103 = v42;
                  v104 = v43;
                  v105 = 0;
                  v106 = 0;
                  sub_223738130((uint64_t)&v109, __s, (const char **)&v93);
                  v45 = (char *)operator new(0x50uLL);
                  v46 = (std::__shared_weak_count *)v45;
                  *((_QWORD *)v45 + 1) = 0;
                  v47 = (unint64_t *)(v45 + 8);
                  *((_QWORD *)v45 + 2) = 0;
                  *(_QWORD *)v45 = &off_24EC20730;
                  *((_QWORD *)v45 + 3) = off_24EC20780;
                  *((_OWORD *)v45 + 2) = v110;
                  *((_QWORD *)v45 + 6) = *(_QWORD *)v111;
                  *(_OWORD *)(v45 + 56) = *(_OWORD *)&v111[8];
                  *((_QWORD *)v45 + 9) = v112;
                  v105 = v45 + 24;
                  v106 = v45;
                  v115 = v42;
                  *(_QWORD *)&v116 = v42;
                  *((_QWORD *)&v116 + 1) = v43;
                  do
                    v48 = __ldxr(p_shared_owners);
                  while (__stxr(v48 + 1, p_shared_owners));
                  *(_QWORD *)&v117 = v45 + 24;
                  *((_QWORD *)&v117 + 1) = v45;
                  do
                    v49 = __ldxr(v47);
                  while (__stxr(v49 + 1, v47));
                  v118 = v45 + 24;
                  do
                    v50 = __ldaxr(v47);
                  while (__stlxr(v50 - 1, v47));
                  if (!v50)
                  {
                    (*(void (**)(char *))(*(_QWORD *)v45 + 16))(v45);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                  v51 = v104;
                  if (v104)
                  {
                    v52 = (unint64_t *)&v104->__shared_owners_;
                    do
                      v53 = __ldaxr(v52);
                    while (__stlxr(v53 - 1, v52));
                    if (!v53)
                    {
                      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                      std::__shared_weak_count::__release_weak(v51);
                    }
                  }
                  v54 = v115;
                  if (v118[31] >= 0)
                    v55 = v118 + 8;
                  else
                    v55 = (char *)*((_QWORD *)v118 + 1);
                  if (v118[55] >= 0)
                    v56 = v118 + 32;
                  else
                    v56 = (char *)*((_QWORD *)v118 + 4);
                  v57 = _os_log_pack_fill();
                  *(_DWORD *)v57 = 68158466;
                  *(_DWORD *)(v57 + 4) = 13;
                  *(_WORD *)(v57 + 8) = 2080;
                  *(_QWORD *)(v57 + 10) = v55;
                  *(_WORD *)(v57 + 18) = 1040;
                  *(_DWORD *)(v57 + 20) = 13;
                  *(_WORD *)(v57 + 24) = 2080;
                  *(_QWORD *)(v57 + 26) = v56;
                  v58 = (char *)operator new();
                  v59 = *(unsigned __int8 *)(v87 + 39);
                  v60 = *(_QWORD *)(v87 + 16);
                  v61 = *(_QWORD *)(v87 + 24);
                  v62 = v117;
                  *(_OWORD *)(v58 + 8) = v116;
                  if ((v59 & 0x80u) != 0)
                    v59 = v61;
                  else
                    v60 = v88;
                  *(_QWORD *)v58 = v54;
                  v116 = 0uLL;
                  *(_OWORD *)(v58 + 24) = v62;
                  v117 = 0uLL;
                  *((_QWORD *)v58 + 5) = v60;
                  *((_QWORD *)v58 + 6) = v59;
                  v58[56] = 16;
                  v102 = 0;
                  v109 = (uint64_t)v58;
                  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v26 + 24) + 40))(*(_QWORD *)(v26 + 24), &v109);
                  v63 = v109;
                  v109 = 0;
                  if (v63)
                  {
                    v64 = *(std::__shared_weak_count **)(v63 + 32);
                    if (v64)
                    {
                      v65 = (unint64_t *)&v64->__shared_owners_;
                      do
                        v66 = __ldaxr(v65);
                      while (__stlxr(v66 - 1, v65));
                      if (!v66)
                      {
                        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                        std::__shared_weak_count::__release_weak(v64);
                      }
                    }
                    v67 = *(std::__shared_weak_count **)(v63 + 16);
                    if (v67)
                    {
                      v68 = (unint64_t *)&v67->__shared_owners_;
                      do
                        v69 = __ldaxr(v68);
                      while (__stlxr(v69 - 1, v68));
                      if (!v69)
                      {
                        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                        std::__shared_weak_count::__release_weak(v67);
                      }
                    }
                    MEMORY[0x227684CE8](v63, 0x10F0C40B62ED6C6);
                    v70 = v102;
                    v102 = 0;
                    if (v70)
                    {
                      on_zero_shared_weak = (std::__shared_weak_count *)v70->__on_zero_shared_weak;
                      if (on_zero_shared_weak)
                      {
                        v72 = (unint64_t *)&on_zero_shared_weak->__shared_owners_;
                        do
                          v73 = __ldaxr(v72);
                        while (__stlxr(v73 - 1, v72));
                        if (!v73)
                        {
                          ((void (*)(std::__shared_weak_count *))on_zero_shared_weak->__on_zero_shared)(on_zero_shared_weak);
                          std::__shared_weak_count::__release_weak(on_zero_shared_weak);
                        }
                      }
                      on_zero_shared = (std::__shared_weak_count *)v70->__on_zero_shared;
                      if (on_zero_shared)
                      {
                        v75 = (unint64_t *)&on_zero_shared->__shared_owners_;
                        do
                          v76 = __ldaxr(v75);
                        while (__stlxr(v76 - 1, v75));
                        if (!v76)
                        {
                          ((void (*)(std::__shared_weak_count *))on_zero_shared->__on_zero_shared)(on_zero_shared);
                          std::__shared_weak_count::__release_weak(on_zero_shared);
                        }
                      }
                      MEMORY[0x227684CE8](v70, 0x10F0C40B62ED6C6);
                    }
                  }
                  v77 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
                  if (*((_QWORD *)&v117 + 1))
                  {
                    v78 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
                    do
                      v79 = __ldaxr(v78);
                    while (__stlxr(v79 - 1, v78));
                    if (!v79)
                    {
                      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                      std::__shared_weak_count::__release_weak(v77);
                    }
                  }
                  v80 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
                  if (*((_QWORD *)&v116 + 1))
                  {
                    v81 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
                    do
                      v82 = __ldaxr(v81);
                    while (__stlxr(v82 - 1, v81));
                    if (!v82)
                    {
                      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                      std::__shared_weak_count::__release_weak(v80);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v38, OS_LOG_TYPE_ERROR);
                  v109 = 0xD04100402;
                  LOWORD(v110) = 2080;
                  *(_QWORD *)((char *)&v110 + 2) = __s;
                  WORD5(v110) = 1040;
                  HIDWORD(v110) = 13;
                  *(_WORD *)v111 = 2080;
                  *(_QWORD *)&v111[2] = v93;
                  v83 = (void *)_os_log_send_and_compose_impl();
                  if (v83)
                    free(v83);
                }
                if (v24)
                {
                  sub_2245664AC(v5, &v109);
                  sub_2245664AC((unsigned __int8 *)a2, &v115);
                  sub_22322C138((uint64_t)v94, "GetKPLinkedToGP: Stale KP %.13s in GP %.13s", (const char *)&v109, (const char *)&v115);
                  sub_223182C08((uint64_t)v94);
                }
                sub_223182C08((uint64_t)v94);
                v84 = v100;
                if (v100)
                {
                  v85 = (unint64_t *)&v100->__shared_owners_;
                  do
                    v86 = __ldaxr(v85);
                  while (__stlxr(v86 - 1, v85));
                  if (!v86)
                  {
                    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                    std::__shared_weak_count::__release_weak(v84);
                  }
                }
                goto LABEL_5;
              }
            }
            memmove(v34, v32, v33);
            goto LABEL_52;
          }
        }
      }
LABEL_5:
      v5 += 16;
      if (v5 == v92)
        return;
    }
  }
}

void sub_223737A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  uint64_t v29;
  void *v31;

  if (*(_BYTE *)(v29 - 128) && *(char *)(v29 - 129) < 0)
    operator delete(*(void **)(v29 - 152));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a28);
  v31 = *(void **)v28;
  if (*(_QWORD *)v28)
  {
    *(_QWORD *)(v28 + 8) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void sub_223737B8C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  if (a2)
  {
    v2 = a2;
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = (_QWORD *)v2[4];
      v2[4] = 0;
      if (v5)
      {
        v6 = v5[26];
        if (v6)
        {
          v7 = v5[27];
          v3 = (void *)v5[26];
          if (v7 != v6)
          {
            do
            {
              if (*(_BYTE *)(v7 - 8))
              {
                v8 = *(_QWORD *)(v7 - 32);
                if (v8)
                {
                  v9 = *(_QWORD *)(v7 - 24);
                  v10 = *(void **)(v7 - 32);
                  if (v9 != v8)
                  {
                    v11 = *(_QWORD *)(v7 - 24);
                    do
                    {
                      v13 = *(void **)(v11 - 24);
                      v11 -= 24;
                      v12 = v13;
                      if (v13)
                      {
                        *(_QWORD *)(v9 - 16) = v12;
                        operator delete(v12);
                      }
                      v9 = v11;
                    }
                    while (v11 != v8);
                    v10 = *(void **)(v7 - 32);
                  }
                  *(_QWORD *)(v7 - 24) = v8;
                  operator delete(v10);
                }
              }
              if (*(_BYTE *)(v7 - 40))
              {
                v14 = *(void **)(v7 - 64);
                if (v14)
                {
                  *(_QWORD *)(v7 - 56) = v14;
                  operator delete(v14);
                }
              }
              v15 = *(void **)(v7 - 128);
              if (v15)
              {
                *(_QWORD *)(v7 - 120) = v15;
                operator delete(v15);
              }
              v16 = *(void **)(v7 - 160);
              if (v16)
              {
                *(_QWORD *)(v7 - 152) = v16;
                operator delete(v16);
              }
              v7 -= 424;
            }
            while (v7 != v6);
            v3 = (void *)v5[26];
          }
          v5[27] = v6;
          operator delete(v3);
        }
        v5[6] = &off_24EC20828;
        MEMORY[0x227684CE8](v5, 0x10A0C4047C2BC0BLL);
      }
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
}

uint64_t sub_223737CD0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = v2[26];
    if (v3)
    {
      v4 = v2[27];
      v5 = (void *)v2[26];
      if (v4 != v3)
      {
        do
        {
          v4 -= 424;
          sub_2236EA79C(v4);
        }
        while (v4 != v3);
        v5 = (void *)v2[26];
      }
      v2[27] = v3;
      operator delete(v5);
    }
    v2[6] = &off_24EC20828;
    MEMORY[0x227684CE8](v2, 0x10A0C4047C2BC0BLL);
  }
  return a1;
}

char *sub_223737D60@<X0>(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  unint64_t v4;
  char *result;
  char *v6;
  _QWORD *v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a1 + 24);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_22316E078();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD **)(a1 + 16);
    v12 = &v9;
    if (v7)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD **)(a1 + 16);
  v12 = &v9;
  if (!v7)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = v7[4];
    result = (char *)sub_2232EA538((void ***)&v12, &v11);
    v7 = (_QWORD *)*v7;
  }
  while (v7);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a2 = v8;
  a2[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_223737E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_223737E44@<X0>(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  unint64_t v4;
  char *result;
  char *v6;
  _QWORD *v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a1 + 24);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_22316E078();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD **)(a1 + 16);
    v12 = &v9;
    if (v7)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD **)(a1 + 16);
  v12 = &v9;
  if (!v7)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = v7[4];
    result = (char *)sub_2232EA538((void ***)&v12, &v11);
    v7 = (_QWORD *)*v7;
  }
  while (v7);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a2 = v8;
  a2[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_223737F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_223737F28@<X0>(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t *v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  int64x2_t *v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 24);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 60)
      sub_22316E078();
    result = (char *)operator new(16 * v4);
    v6 = &result[16 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v7 = *(uint64_t **)(a1 + 16);
    v10 = v6;
    v11 = &v9;
    if (v7)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(uint64_t **)(a1 + 16);
  v11 = &v9;
  if (!v7)
    goto LABEL_7;
  do
  {
LABEL_4:
    v12 = *((_OWORD *)v7 + 1);
    result = (char *)sub_2232E9564((char ***)&v11, &v12);
    v7 = (uint64_t *)*v7;
  }
  while (v7);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a2 = v8;
  a2[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_223738014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223738034(char a1, _QWORD *__p)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (!a1)
    goto LABEL_9;
  v3 = (_QWORD *)__p[4];
  __p[4] = 0;
  if (v3)
  {
    v4 = v3[26];
    if (v4)
    {
      v5 = v3[27];
      v6 = (void *)v3[26];
      if (v5 != v4)
      {
        do
        {
          v5 -= 424;
          sub_2236EA79C(v5);
        }
        while (v5 != v4);
        v6 = (void *)v3[26];
      }
      v3[27] = v4;
      operator delete(v6);
    }
    v3[6] = &off_24EC20828;
    MEMORY[0x227684CE8](v3, 0x10A0C4047C2BC0BLL);
LABEL_9:
    if (!__p)
      return;
  }
  operator delete(__p);
}

uint64_t sub_2237380E0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[4];
      v2[4] = 0;
      if (v3)
        sub_2236C86D0((uint64_t)(v2 + 4), v3);
    }
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_223738130(uint64_t a1, char *__s, const char **a3)
{
  size_t v6;
  size_t v7;
  _QWORD *p_dst;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t result;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  _QWORD *__dst;
  __int128 v25;

  v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = operator new(v9 + 1);
    *(_QWORD *)&v25 = v7;
    *((_QWORD *)&v25 + 1) = v10 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v25) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_8:
    memcpy(p_dst, __s, v7);
  *((_BYTE *)p_dst + v7) = 0;
  v11 = *a3;
  result = strlen(*a3);
  if (result > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v13 = result;
  if (result >= 0x17)
  {
    v15 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v15 = result | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v16 | 0x8000000000000000;
    v22 = v14;
  }
  else
  {
    HIBYTE(v23) = result;
    v14 = &v22;
    if (!result)
      goto LABEL_17;
  }
  result = (unint64_t)memcpy(v14, v11, v13);
LABEL_17:
  *((_BYTE *)v14 + v13) = 0;
  v17 = HIBYTE(v25);
  v18 = HIBYTE(v23);
  v19 = __dst;
  v20 = v25;
  *(_QWORD *)a1 = off_24EC20780;
  *(_QWORD *)(a1 + 8) = v19;
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)&v25 + 7);
  *(_BYTE *)(a1 + 31) = v17;
  v21 = v23;
  *(_QWORD *)(a1 + 32) = v22;
  *(_QWORD *)(a1 + 40) = v21;
  *(_QWORD *)(a1 + 47) = *(_QWORD *)((char *)&v23 + 7);
  *(_BYTE *)(a1 + 55) = v18;
  return result;
}

void sub_2237382B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2237382CC(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)a2[1];
  v4 = a3[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*a2 + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*a2 + 8 * v4) = 0;
  }
  v10 = *a3;
  if (*a3)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*a2 + 8 * v11) = v7;
      v10 = *a3;
    }
  }
  *v7 = v10;
  *a3 = 0;
  --a2[3];
  *(_QWORD *)result = a3;
  *(_QWORD *)(result + 8) = a2 + 2;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

uint64_t sub_223738400(int a1)
{
  unsigned __int8 v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  int v6;
  uint64_t v7;
  int32x2_t v8;
  float32x2_t v9;
  _QWORD *v10;
  float32x2_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  float32x2_t v19;
  _BYTE __src[1020];

  v1 = atomic_load((unsigned __int8 *)&qword_255795018);
  if ((v1 & 1) == 0)
  {
    v14 = a1;
    v6 = __cxa_guard_acquire(&qword_255795018);
    a1 = v14;
    if (v6)
    {
      bzero(__src, 0x3FCuLL);
      v7 = 0;
      v8 = (int32x2_t)0x100000000;
      v9 = (float32x2_t)vdup_n_s32(0x3E924745u);
      do
      {
        v10 = &__src[v7];
        v11 = vmul_f32(vcvt_f32_s32(v8), v9);
        v15 = v11.f32[0];
        v19 = vmul_f32(vcvt_f32_s32(vadd_s32(v8, (int32x2_t)0x200000002)), v9);
        v17 = fmodf(v11.f32[1], 1.0);
        *(float *)&v12 = fmodf(v15, 1.0);
        *((float *)&v12 + 1) = v17;
        v18 = v12;
        v16 = fmodf(v19.f32[1], 1.0);
        *(float *)&v13 = fmodf(v19.f32[0], 1.0);
        *((float *)&v13 + 1) = v16;
        *v10 = v18;
        v10[1] = v13;
        v8 = vadd_s32(v8, (int32x2_t)0x400000004);
        v7 += 16;
      }
      while (v7 != 1008);
      *(_QWORD *)&__src[1008] = 0x3E906F003F7F1400;
      *(_DWORD *)&__src[1016] = 1058102016;
      memcpy(dword_255794C18, __src, 0x3FCuLL);
      __cxa_guard_release(&qword_255795018);
      a1 = v14;
    }
  }
  if (a1 == 255)
  {
    v2 = 128;
    v3 = 128;
    v4 = 128;
  }
  else
  {
    v2 = vcvts_n_s32_f32(*(float *)&dword_255794C18[a1], 8uLL);
    v3 = vcvts_n_s32_f32(*(float *)&dword_255794C18[(unsigned __int16)(2 * a1+ 85- 255* ((unsigned __int16)((1029 * (2 * a1 + 85)) >> 16) >> 2))], 8uLL);
    v4 = vcvts_n_s32_f32(*(float *)&dword_255794C18[(unsigned __int16)(3 * a1+ 170- 255* ((unsigned __int16)((2057 * (3 * a1 + 170)) >> 16) >> 3))], 8uLL);
  }
  return (v3 << 8) | (v4 << 16) | v2;
}

int32x2_t *sub_2237385F0(uint64_t a1, unsigned int *a2, uint64_t a3, float32x4_t a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  int32x2_t v14;
  BOOL v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  int32x2_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int32x2_t v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  __int16 v36;
  char v37;
  int32x2_t v38[2];
  int32x2_t v39[4];

  v14 = *(int32x2_t *)(a1 + 24);
  if (*(_BYTE *)(a1 + 72))
    v15 = *(_QWORD *)&v14 == 0;
  else
    v15 = 1;
  if (!v15)
  {
    v16 = *(_QWORD *)(a1 + 8);
    v17 = *(std::__shared_weak_count **)(a1 + 16);
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v16 + 88))(v16, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v14 = *(int32x2_t *)(a1 + 24);
  }
  v21 = *(int32x2_t *)(a1 + 56);
  v22 = ((unint64_t)*(unsigned int *)(a1 + 52) << 32) | 3;
  v39[0] = 0;
  v39[1] = v21;
  v39[2] = (int32x2_t)v22;
  v39[3] = v14;
  v23 = *a2;
  v24 = a2[1];
  v25 = (int32x2_t)(v23 | (v24 << 32));
  v26 = a2[2];
  v27 = a2[3];
  v28 = v26 >= v23;
  v29 = v26 - v23;
  if (v28)
    v30 = (v29 + 1);
  else
    v30 = 0;
  v28 = v27 >= v24;
  v31 = v27 - v24;
  if (v28)
    v32 = (v31 + 1);
  else
    v32 = 0;
  v38[0] = v25;
  v38[1] = (int32x2_t)(v30 | (v32 << 32));
  a4.i64[0] = *(_QWORD *)a3;
  a4.i32[2] = *(_DWORD *)(a3 + 8);
  v33 = (float32x4_t)vdupq_n_s32(0x437F0000u);
  v34 = vmulq_f32(a4, v33);
  v33.i32[0] = v34.i32[1];
  LOBYTE(v36) = (int)v34.f32[0];
  HIBYTE(v36) = (int)v34.f32[1];
  v34.i32[0] = v34.i32[2];
  v37 = (int)v34.f32[2];
  return sub_22373872C(v39, v38, &v36, *(double *)v34.i64, *(double *)v33.i64, a6, a7, a8, a9, a10, a11);
}

int32x2_t *sub_22373872C(int32x2_t *result, int32x2_t *a2, __int16 *a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  int8x8_t v11;
  int8x8_t v12;
  uint64_t v13;
  int32x2_t v14;
  int8x8_t v15;
  uint32x2_t v16;
  __int32 v17;
  uint32x2_t v18;
  uint64_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  uint64_t v23;
  float32x2_t v24;
  double v25;
  float v26;
  double v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  double v33;
  BOOL v34;
  float v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  int32x2_t v40;
  int8x8_t v41;
  uint64_t v42;
  uint32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  uint64_t v47;
  uint64_t v48;
  float32x2_t v49;
  double v50;
  float v51;
  double v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  double v58;
  float v59;
  double v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  __int16 v64;
  unsigned __int32 v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  float32x2_t v71;
  float32x2_t v72;
  BOOL v73;
  float32x2_t v74;
  double v75;
  double v76;
  float v77;
  double v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  double v84;
  float v85;
  double v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  __int16 v90;
  int32x2_t v91;
  unsigned __int8 v92;
  int8x8_t v93;
  uint64_t v94;
  uint32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  uint64_t v99;
  uint64_t v100;
  float32x2_t v101;
  double v102;
  float v103;
  double v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  double v108;
  uint64_t v109;
  double v110;
  float v111;
  double v112;
  uint64_t v113;
  double v114;
  uint64_t v115;
  __int16 v116;

  v11 = (int8x8_t)*a2;
  v12 = (int8x8_t)vadd_s32(vadd_s32(*a2, a2[1]), (int32x2_t)-1);
  LODWORD(v13) = HIDWORD(*(unint64_t *)a2);
  v14 = result[1];
  v15 = (int8x8_t)vadd_s32(v14, (int32x2_t)-1);
  v16.i32[0] = (__int32)*a2;
  v16.i32[1] = v12.i32[1];
  v17 = vcgt_u32(*(uint32x2_t *)&v14, *(uint32x2_t *)a2).i32[1];
  v18 = (uint32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)v14, v16), (int8x8_t)v16, v15);
  if ((v17 & 1) != 0)
    v19 = v13;
  else
    v19 = v15.u32[1];
  v20 = vcvt_f32_u32(v18);
  v21.i32[0] = v20.i32[0];
  v21.f32[1] = (float)v19;
  v22 = vabd_f32(v20, v21);
  if (v22.f32[0] >= v22.f32[1])
    *(float *)&a11 = v22.f32[0];
  else
    *(float *)&a11 = v22.f32[1];
  if (*(float *)&a11 < 1.0)
    *(float *)&a11 = 1.0;
  v23 = v18.u32[0];
  v24 = vdiv_f32(vsub_f32(v20, v21), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a11, 0));
  LODWORD(v25) = 0;
  HIDWORD(a11) = 0;
  v26 = vmuls_lane_f32(0.5, v24, 1);
  if (v22.f32[0] > v22.f32[1])
  {
    *((float *)&v25 + 1) = v26 + 0.0;
    v27 = v25;
  }
  else
  {
    *(float *)&a11 = (float)(0.5 * v24.f32[0]) + 0.0;
    v27 = a11;
  }
  v28 = *(_QWORD *)&result[3] + *(_QWORD *)result + (result[2].i32[0] * v23 + result[2].i32[1] * v19);
  if ((__int16 *)v28 != a3)
  {
    v29 = *a3;
    *(_BYTE *)(v28 + 2) = *((_BYTE *)a3 + 2);
    *(_WORD *)v28 = v29;
  }
  if ((_DWORD)v19 != v18.i32[1])
  {
    v30 = v23;
    do
    {
      v27 = COERCE_DOUBLE(vadd_f32(v24, *(float32x2_t *)&v27));
      HIDWORD(v31) = HIDWORD(v27);
      v32 = v30 - 1;
      if (*(float *)&v27 <= -1.0)
      {
        *(float *)&v31 = *(float *)&v27 + 1.0;
        v33 = v31;
      }
      else
      {
        v33 = v27;
      }
      if (*(float *)&v27 > -1.0)
        v32 = v30;
      v34 = *(float *)&v27 < 1.0;
      *(float *)&v27 = *(float *)&v27 + -1.0;
      if (v34)
      {
        v27 = v33;
        v30 = v32;
      }
      else
      {
        ++v30;
      }
      v35 = *((float *)&v27 + 1);
      LODWORD(v36) = LODWORD(v27);
      v37 = v19 - 1;
      if (*((float *)&v27 + 1) <= -1.0)
      {
        *((float *)&v36 + 1) = *((float *)&v27 + 1) + 1.0;
        a11 = v36;
      }
      else
      {
        a11 = v27;
      }
      if (*((float *)&v27 + 1) > -1.0)
        v37 = v19;
      *((float *)&v27 + 1) = *((float *)&v27 + 1) + -1.0;
      if (v35 >= 1.0)
      {
        ++v19;
      }
      else
      {
        v27 = a11;
        v19 = v37;
      }
      v38 = *(_QWORD *)&result[3] + *(_QWORD *)result + (result[2].i32[0] * v30 + result[2].i32[1] * v19);
      if ((__int16 *)v38 != a3)
      {
        v39 = *a3;
        *(_BYTE *)(v38 + 2) = *((_BYTE *)a3 + 2);
        *(_WORD *)v38 = v39;
      }
    }
    while (v30 != v23 || v19 != v18.u32[1]);
  }
  v40 = result[1];
  v41 = (int8x8_t)vadd_s32(v40, (int32x2_t)-1);
  if ((vcgt_u32((uint32x2_t)v40, (uint32x2_t)v11).u8[0] & 1) != 0)
    v42 = v11.u32[0];
  else
    v42 = v41.u32[0];
  v43 = (uint32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)v40, (uint32x2_t)v12), v12, v41);
  v44 = vcvt_f32_u32(v43);
  v45.i32[1] = v44.i32[1];
  v45.f32[0] = (float)v42;
  v46 = vabd_f32(v44, v45);
  if (v46.f32[0] >= v46.f32[1])
    *(float *)&a11 = v46.f32[0];
  else
    *(float *)&a11 = v46.f32[1];
  if (*(float *)&a11 < 1.0)
    *(float *)&a11 = 1.0;
  v47 = v43.u32[1];
  v48 = v43.u32[0];
  v49 = vdiv_f32(vsub_f32(v44, v45), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a11, 0));
  LODWORD(v50) = 0;
  HIDWORD(a11) = 0;
  v51 = vmuls_lane_f32(0.5, v49, 1);
  if (v46.f32[0] > v46.f32[1])
  {
    *((float *)&v50 + 1) = v51 + 0.0;
    v52 = v50;
  }
  else
  {
    *(float *)&a11 = (float)(0.5 * v49.f32[0]) + 0.0;
    v52 = a11;
  }
  v53 = *(_QWORD *)&result[3] + *(_QWORD *)result + (result[2].i32[0] * v42 + result[2].i32[1] * v47);
  if ((__int16 *)v53 != a3)
  {
    v54 = *a3;
    *(_BYTE *)(v53 + 2) = *((_BYTE *)a3 + 2);
    *(_WORD *)v53 = v54;
  }
  if ((_DWORD)v42 != (_DWORD)v48)
  {
    v55 = v47;
    do
    {
      v52 = COERCE_DOUBLE(vadd_f32(v49, *(float32x2_t *)&v52));
      HIDWORD(v56) = HIDWORD(v52);
      v57 = v42 - 1;
      if (*(float *)&v52 <= -1.0)
      {
        *(float *)&v56 = *(float *)&v52 + 1.0;
        v58 = v56;
      }
      else
      {
        v58 = v52;
      }
      if (*(float *)&v52 > -1.0)
        v57 = v42;
      v34 = *(float *)&v52 < 1.0;
      *(float *)&v52 = *(float *)&v52 + -1.0;
      if (v34)
      {
        v52 = v58;
        v42 = v57;
      }
      else
      {
        ++v42;
      }
      v59 = *((float *)&v52 + 1);
      LODWORD(v60) = LODWORD(v52);
      v61 = v55 - 1;
      if (*((float *)&v52 + 1) <= -1.0)
      {
        *((float *)&v60 + 1) = *((float *)&v52 + 1) + 1.0;
        v62 = v60;
      }
      else
      {
        v62 = v52;
      }
      if (*((float *)&v52 + 1) > -1.0)
        v61 = v55;
      *((float *)&v52 + 1) = *((float *)&v52 + 1) + -1.0;
      if (v59 >= 1.0)
      {
        ++v55;
      }
      else
      {
        v52 = v62;
        v55 = v61;
      }
      v63 = *(_QWORD *)&result[3] + *(_QWORD *)result + (result[2].i32[0] * v42 + result[2].i32[1] * v55);
      if ((__int16 *)v63 != a3)
      {
        v64 = *a3;
        *(_BYTE *)(v63 + 2) = *((_BYTE *)a3 + 2);
        *(_WORD *)v63 = v64;
      }
    }
    while (v42 != v48 || v55 != v47);
  }
  v65 = v12.i32[0];
  v66 = result[1].u32[0];
  v67 = result[1].u32[1];
  if (v12.i32[0] >= v66)
    v68 = v66 - 1;
  else
    v68 = v12.u32[0];
  v69 = v67 - 1;
  if (v12.i32[1] >= v67)
    v70 = v69;
  else
    v70 = v12.u32[1];
  if (v13 >= v67)
    v13 = v69;
  else
    v13 = v13;
  v71.f32[0] = (float)v68 - (float)v68;
  v71.f32[1] = (float)v13 - (float)v70;
  v72 = vabs_f32(v71);
  if (v72.f32[0] >= v72.f32[1])
    *(float *)&v52 = v72.f32[0];
  else
    *(float *)&v52 = v72.f32[1];
  if (*(float *)&v52 < 1.0)
    *(float *)&v52 = 1.0;
  v73 = v72.f32[0] <= v72.f32[1];
  v74 = vdiv_f32(v71, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v52, 0));
  LODWORD(v75) = 0;
  HIDWORD(v76) = 0;
  v77 = vmuls_lane_f32(0.5, v74, 1);
  if (v73)
  {
    *(float *)&v76 = (float)(0.5 * v74.f32[0]) + 0.0;
    v78 = v76;
  }
  else
  {
    *((float *)&v75 + 1) = v77 + 0.0;
    v78 = v75;
  }
  v79 = *(_QWORD *)&result[3] + *(_QWORD *)result + (result[2].i32[0] * v68 + result[2].i32[1] * v70);
  if ((__int16 *)v79 != a3)
  {
    v80 = *a3;
    *(_BYTE *)(v79 + 2) = *((_BYTE *)a3 + 2);
    *(_WORD *)v79 = v80;
  }
  if ((_DWORD)v70 != (_DWORD)v13)
  {
    v81 = v68;
    do
    {
      v78 = COERCE_DOUBLE(vadd_f32(v74, *(float32x2_t *)&v78));
      HIDWORD(v82) = HIDWORD(v78);
      v83 = v81 - 1;
      if (*(float *)&v78 <= -1.0)
      {
        *(float *)&v82 = *(float *)&v78 + 1.0;
        v84 = v82;
      }
      else
      {
        v84 = v78;
      }
      if (*(float *)&v78 > -1.0)
        v83 = v81;
      v34 = *(float *)&v78 < 1.0;
      *(float *)&v78 = *(float *)&v78 + -1.0;
      if (v34)
      {
        v78 = v84;
        v81 = v83;
      }
      else
      {
        ++v81;
      }
      v85 = *((float *)&v78 + 1);
      LODWORD(v86) = LODWORD(v78);
      v87 = v70 - 1;
      if (*((float *)&v78 + 1) <= -1.0)
      {
        *((float *)&v86 + 1) = *((float *)&v78 + 1) + 1.0;
        v88 = v86;
      }
      else
      {
        v88 = v78;
      }
      if (*((float *)&v78 + 1) > -1.0)
        v87 = v70;
      *((float *)&v78 + 1) = *((float *)&v78 + 1) + -1.0;
      if (v85 >= 1.0)
      {
        ++v70;
      }
      else
      {
        v78 = v88;
        v70 = v87;
      }
      v89 = *(_QWORD *)&result[3] + *(_QWORD *)result + (result[2].i32[0] * v81 + result[2].i32[1] * v70);
      if ((__int16 *)v89 != a3)
      {
        v90 = *a3;
        *(_BYTE *)(v89 + 2) = *((_BYTE *)a3 + 2);
        *(_WORD *)v89 = v90;
      }
    }
    while (v81 != v68 || v70 != v13);
  }
  v91 = result[1];
  v92 = vcgt_u32((uint32x2_t)v91, (uint32x2_t)v12).u8[0];
  v93 = (int8x8_t)vadd_s32(v91, (int32x2_t)-1);
  if ((v92 & 1) != 0)
    v94 = v65;
  else
    v94 = v93.u32[0];
  v95 = (uint32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)v91, (uint32x2_t)v11), v11, v93);
  v96 = vcvt_f32_u32(v95);
  v97.i32[1] = v96.i32[1];
  v97.f32[0] = (float)v94;
  v98 = vabd_f32(v96, v97);
  if (v98.f32[0] >= v98.f32[1])
    *(float *)&v78 = v98.f32[0];
  else
    *(float *)&v78 = v98.f32[1];
  if (*(float *)&v78 < 1.0)
    *(float *)&v78 = 1.0;
  v99 = v95.u32[1];
  v100 = v95.u32[0];
  v101 = vdiv_f32(vsub_f32(v96, v97), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v78, 0));
  LODWORD(v102) = 0;
  HIDWORD(v78) = 0;
  v103 = vmuls_lane_f32(0.5, v101, 1);
  if (v98.f32[0] > v98.f32[1])
  {
    *((float *)&v102 + 1) = v103 + 0.0;
    v104 = v102;
  }
  else
  {
    *(float *)&v78 = (float)(0.5 * v101.f32[0]) + 0.0;
    v104 = v78;
  }
  v105 = *(_QWORD *)&result[3] + *(_QWORD *)result + (result[2].i32[0] * v94 + result[2].i32[1] * v99);
  if ((__int16 *)v105 != a3)
  {
    v106 = *a3;
    *(_BYTE *)(v105 + 2) = *((_BYTE *)a3 + 2);
    *(_WORD *)v105 = v106;
  }
  if ((_DWORD)v94 != (_DWORD)v100)
  {
    v107 = v99;
    do
    {
      v104 = COERCE_DOUBLE(vadd_f32(v101, *(float32x2_t *)&v104));
      HIDWORD(v108) = HIDWORD(v104);
      v109 = v94 - 1;
      if (*(float *)&v104 <= -1.0)
      {
        *(float *)&v108 = *(float *)&v104 + 1.0;
        v110 = v108;
      }
      else
      {
        v110 = v104;
      }
      if (*(float *)&v104 > -1.0)
        v109 = v94;
      v34 = *(float *)&v104 < 1.0;
      *(float *)&v104 = *(float *)&v104 + -1.0;
      if (v34)
      {
        v104 = v110;
        v94 = v109;
      }
      else
      {
        ++v94;
      }
      v111 = *((float *)&v104 + 1);
      LODWORD(v112) = LODWORD(v104);
      v113 = v107 - 1;
      if (*((float *)&v104 + 1) <= -1.0)
      {
        *((float *)&v112 + 1) = *((float *)&v104 + 1) + 1.0;
        v114 = v112;
      }
      else
      {
        v114 = v104;
      }
      if (*((float *)&v104 + 1) > -1.0)
        v113 = v107;
      *((float *)&v104 + 1) = *((float *)&v104 + 1) + -1.0;
      if (v111 >= 1.0)
      {
        ++v107;
      }
      else
      {
        v104 = v114;
        v107 = v113;
      }
      v115 = *(_QWORD *)&result[3]
           + *(_QWORD *)result
           + (result[2].i32[0] * v94 + result[2].i32[1] * v107);
      if ((__int16 *)v115 != a3)
      {
        v116 = *a3;
        *(_BYTE *)(v115 + 2) = *((_BYTE *)a3 + 2);
        *(_WORD *)v115 = v116;
      }
    }
    while (v94 != v100 || v107 != v99);
  }
  return result;
}

uint64_t sub_223738D80(uint64_t result, unint64_t a2, uint64_t *a3, uint64_t a4, float32x4_t a5, double a6, double a7, double a8, double a9)
{
  int32x2_t v9;
  uint32x2_t *v12;
  float32x4_t v13;
  float v14;
  float v15;
  uint32x2_t v16;
  BOOL v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  int v26;
  uint32x2_t v27;
  uint32x2_t v28;
  __int32 v29;
  unint64_t v30;
  uint64_t v31;
  int8x8_t v32;
  unint64_t v33;
  int64x2_t v34;
  float32x2_t v35;
  int64x2_t v36;
  float32x2_t v37;
  uint64x2_t v38;
  uint64x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  double v42;
  float32x2_t v43;
  float v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  double v52;
  uint64_t v53;
  double v54;
  BOOL v55;
  BOOL v56;
  float v57;
  double v58;
  uint64_t v59;
  double v60;
  _BYTE *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  double v73;
  double v74;
  float v75;
  _BYTE *v76;
  double v77;
  double v78;
  unint64_t v79;
  double v80;
  BOOL v81;
  float v82;
  double v83;
  unint64_t v84;
  double v85;
  _BYTE *v86;
  __int32 v87;

  if (a2 >= 2)
  {
    v12 = (uint32x2_t *)result;
    a5.i64[0] = *(_QWORD *)a4;
    a5.i32[2] = *(_DWORD *)(a4 + 8);
    v13 = vmulq_f32(a5, (float32x4_t)vdupq_n_s32(0x437F0000u));
    v14 = v13.f32[1];
    v15 = v13.f32[2];
    v16 = *(uint32x2_t *)(result + 24);
    if (*(_BYTE *)(result + 72))
      v17 = *(_QWORD *)&v16 == 0;
    else
      v17 = 1;
    if (!v17)
    {
      v87 = v13.i32[0];
      v18 = *(_QWORD *)(result + 8);
      v19 = *(std::__shared_weak_count **)(result + 16);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v18 + 88))(v18, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v16 = v12[3];
      v13.i32[0] = v87;
    }
    v23 = 0;
    v24 = (int)v13.f32[0];
    v25 = (int)v14;
    v26 = (int)v15;
    v27 = v12[7];
    v28 = v27;
    v29 = v12[6].i32[1];
    v30 = a2 - 1;
    v31 = HIDWORD(*(_QWORD *)&v27);
    v32 = (int8x8_t)vcvt_f32_u32((uint32x2_t)vadd_s32((int32x2_t)v27, (int32x2_t)-1));
    do
    {
      if (v23 < v30)
        v33 = v23 + 1;
      else
        v33 = 0;
      v34 = *(int64x2_t *)&a3[2 * v23];
      v35 = vcvt_f32_f64(vcvtq_f64_s64(v34));
      v36 = *(int64x2_t *)&a3[2 * v33];
      v37 = vcvt_f32_f64(vcvtq_f64_s64(v36));
      v38 = (uint64x2_t)vandq_s8((int8x16_t)vcgezq_s64(v34), (int8x16_t)vcvtq_u64_f64(vcvtq_f64_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_u32(v27, vcvt_u32_f32(v35)), (int8x8_t)v35, v32))));
      v39 = (uint64x2_t)vandq_s8((int8x16_t)vcgezq_s64(v36), (int8x16_t)vcvtq_u64_f64(vcvtq_f64_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_u32(v27, vcvt_u32_f32(v37)), (int8x8_t)v37, v32))));
      v40 = vcvt_f32_f64(vcvtq_f64_u64(v39));
      v41 = vcvt_f32_f64(vcvtq_f64_u64(v38));
      v42 = COERCE_DOUBLE(vabd_f32(v40, v41));
      if (*(float *)&v42 >= *((float *)&v42 + 1))
        v9.i32[0] = SLODWORD(v42);
      else
        v9.i32[0] = SHIDWORD(v42);
      if (*(float *)v9.i32 < 1.0)
        *(float *)v9.i32 = 1.0;
      v56 = *(float *)&v42 <= *((float *)&v42 + 1);
      v43 = vdiv_f32(vsub_f32(v40, v41), (float32x2_t)vdup_lane_s32(v9, 0));
      HIDWORD(v42) = 0;
      v44 = vmuls_lane_f32(0.5, v43, 1);
      LODWORD(v45) = 0;
      if (v56)
      {
        *(float *)&v42 = (float)(0.5 * v43.f32[0]) + 0.0;
        v46 = v42;
      }
      else
      {
        *((float *)&v45 + 1) = v44 + 0.0;
        v46 = v45;
      }
      v47 = v38.i64[1];
      v48 = v38.i64[0];
      v49 = (_BYTE *)(*(_QWORD *)&v16 + (3 * v38.i32[0] + v29 * v38.i32[2]));
      *v49 = v24;
      v49[1] = v25;
      v49[2] = v26;
      v50 = v39.i64[0];
      if (v38.i64[0] != v39.i64[0] || v38.i64[1] != v39.i64[1])
      {
        do
        {
          v46 = COERCE_DOUBLE(vadd_f32(v43, *(float32x2_t *)&v46));
          HIDWORD(v52) = HIDWORD(v46);
          v53 = v48 - 1;
          if (*(float *)&v46 <= -1.0)
          {
            *(float *)&v52 = *(float *)&v46 + 1.0;
            v54 = v52;
          }
          else
          {
            v54 = v46;
          }
          if (*(float *)&v46 > -1.0)
            v53 = v48;
          v55 = *(float *)&v46 < 1.0;
          v56 = *(float *)&v46 < 1.0;
          *(float *)&v46 = *(float *)&v46 + -1.0;
          if (v55)
            v46 = v54;
          v57 = *((float *)&v46 + 1);
          LODWORD(v58) = LODWORD(v46);
          if (v56)
            v48 = v53;
          else
            ++v48;
          v59 = v47 - 1;
          if (*((float *)&v46 + 1) <= -1.0)
          {
            *((float *)&v58 + 1) = *((float *)&v46 + 1) + 1.0;
            v60 = v58;
          }
          else
          {
            v60 = v46;
          }
          if (*((float *)&v46 + 1) > -1.0)
            v59 = v47;
          *((float *)&v46 + 1) = *((float *)&v46 + 1) + -1.0;
          if (v57 >= 1.0)
            ++v47;
          else
            v47 = v59;
          v61 = (_BYTE *)(*(_QWORD *)&v16 + (3 * v48 + v29 * v47));
          *v61 = v24;
          if (v57 < 1.0)
            v46 = v60;
          v61[1] = v25;
          v61[2] = v26;
        }
        while (v48 != v50 || v47 != v39.i64[1]);
      }
      ++v23;
    }
    while (v23 != a2);
    v62 = &a3[2 * v30];
    v63 = *v62;
    v64 = v62[1];
    if (v27.i32[0] <= *v62)
      v65 = (v27.i32[0] - 1);
    else
      v65 = *v62;
    if (v63 < 0)
      v65 = 0;
    if (v27.i32[1] <= v64)
      v66 = (v27.i32[1] - 1);
    else
      v66 = v64;
    if (v64 < 0)
      v66 = 0;
    v67 = (v27.i32[0] - 1);
    result = *a3;
    v68 = a3[1];
    if (v28.i32[0] > *a3)
      v67 = *a3;
    if (result < 0)
      v67 = 0;
    v69 = (v31 - 1);
    if (v28.i32[1] > v68)
      v69 = a3[1];
    if (v68 < 0)
      v69 = 0;
    v70.f32[0] = (float)v67 - (float)v65;
    v70.f32[1] = (float)v69 - (float)v66;
    v71 = vabs_f32(v70);
    if (v71.f32[0] >= v71.f32[1])
      *(float *)&a9 = v71.f32[0];
    else
      *(float *)&a9 = v71.f32[1];
    if (*(float *)&a9 < 1.0)
      *(float *)&a9 = 1.0;
    v56 = v71.f32[0] <= v71.f32[1];
    v72 = vdiv_f32(v70, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0));
    LODWORD(v73) = 0;
    HIDWORD(v74) = 0;
    v75 = vmuls_lane_f32(0.5, v72, 1);
    v76 = (_BYTE *)(*(_QWORD *)&v16 + (3 * v65 + v29 * v66));
    *v76 = v24;
    if (v56)
    {
      *(float *)&v74 = (float)(0.5 * v72.f32[0]) + 0.0;
      v77 = v74;
    }
    else
    {
      *((float *)&v73 + 1) = v75 + 0.0;
      v77 = v73;
    }
    v76[1] = v25;
    for (v76[2] = v26; v65 != v67 || v66 != v69; v86[2] = v26)
    {
      v77 = COERCE_DOUBLE(vadd_f32(v72, *(float32x2_t *)&v77));
      HIDWORD(v78) = HIDWORD(v77);
      v79 = v65 - 1;
      if (*(float *)&v77 <= -1.0)
      {
        *(float *)&v78 = *(float *)&v77 + 1.0;
        v80 = v78;
      }
      else
      {
        v80 = v77;
      }
      if (*(float *)&v77 > -1.0)
        v79 = v65;
      v55 = *(float *)&v77 < 1.0;
      v81 = *(float *)&v77 < 1.0;
      *(float *)&v77 = *(float *)&v77 + -1.0;
      if (v55)
        v77 = v80;
      v82 = *((float *)&v77 + 1);
      LODWORD(v83) = LODWORD(v77);
      if (v81)
        v65 = v79;
      else
        ++v65;
      v84 = v66 - 1;
      if (*((float *)&v77 + 1) <= -1.0)
      {
        *((float *)&v83 + 1) = *((float *)&v77 + 1) + 1.0;
        v85 = v83;
      }
      else
      {
        v85 = v77;
      }
      if (*((float *)&v77 + 1) > -1.0)
        v84 = v66;
      *((float *)&v77 + 1) = *((float *)&v77 + 1) + -1.0;
      if (v82 >= 1.0)
        ++v66;
      else
        v66 = v84;
      v86 = (_BYTE *)(*(_QWORD *)&v16 + (3 * v65 + v29 * v66));
      *v86 = v24;
      if (v82 < 1.0)
        v77 = v85;
      v86[1] = v25;
    }
  }
  return result;
}

void sub_2237391D4(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, __n128 a6, __n128 a7, __n128 a8, double a9, double a10, double a11)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __int16 v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  const __int16 *v24;
  const __int16 *v25;
  uint64_t v26;
  double *v27;
  const __int16 *v28;
  double *v29;
  __int16 v30;
  __int128 v31;
  int32x2_t v32;
  uint64x2_t v33;
  int64x2_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __int16 v42;
  unint64_t v43;
  __int128 v44;
  float32x4_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int32x4_t v51;
  float64x2_t v52;
  int32x4_t v53;
  int32x4_t v54;
  double *v55;
  double *v56;
  double *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  __int16 v62;
  unint64_t v63;
  __int128 v64;
  float32x4_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  __int16 v69;
  __int128 v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  __int16 v74;
  __int128 v75;
  int v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t (**v84)();
  uint64_t v85;
  std::__shared_weak_count *v86;
  __int128 v87;
  __int128 v88;
  float32x4_t v89;
  __int16 v90;
  uint64_t (**v91)();
  uint64_t v92;
  std::__shared_weak_count *v93;
  __int128 v94;
  __int128 v95;
  float32x4_t v96;
  __int16 v97;
  void *__p;
  char *v99;
  double *v100;
  uint64_t (**v101)();
  uint64_t v102;
  std::__shared_weak_count *v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int16 v107;
  int16x8x2_t v108;
  float64x2x2_t v109;
  float64x2x2_t v110;

  if (*(_BYTE *)(a2 + 416))
  {
    v101 = &off_24EC232F0;
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(std::__shared_weak_count **)(a1 + 16);
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
      v18 = *(_WORD *)(a1 + 72);
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
      v20 = *(_OWORD *)(a1 + 40);
      v104 = *(_OWORD *)(a1 + 24);
      v105 = v20;
      v106 = *(_OWORD *)(a1 + 56);
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
      v102 = v14;
      v103 = v15;
      v107 = v18;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    else
    {
      v30 = *(_WORD *)(a1 + 72);
      v102 = *(_QWORD *)(a1 + 8);
      v103 = 0;
      v31 = *(_OWORD *)(a1 + 40);
      v104 = *(_OWORD *)(a1 + 24);
      v105 = v31;
      v106 = *(_OWORD *)(a1 + 56);
      v107 = v30;
    }
    v32 = vcvt_s32_f32(vmul_f32(*(float32x2_t *)(a3 + 4), (float32x2_t)vdup_n_s32(0x437F0000u)));
    v33.i64[0] = v32.u32[0];
    v33.i64[1] = v32.u32[1];
    v34 = (int64x2_t)vshlq_u64(v33, (uint64x2_t)xmmword_22464C740);
    sub_223ECF84C((uint64_t)&v101, a2 + 264, vorrq_s8((int8x16_t)vdupq_laneq_s64(v34, 1), (int8x16_t)v34).u32[0] | (int)(float)(*(float *)a3 * 255.0));
    v35 = v103;
    if (v103)
    {
      v36 = (unint64_t *)&v103->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    return;
  }
  if (*(_BYTE *)(a2 + 384))
  {
    v25 = *(const __int16 **)(a2 + 360);
    v24 = *(const __int16 **)(a2 + 368);
    v99 = 0;
    v100 = 0;
    __p = 0;
    v26 = (char *)v24 - (char *)v25;
    if (v24 == v25)
    {
LABEL_46:
      v91 = &off_24EC232F0;
      v58 = *(_QWORD *)(a1 + 8);
      v59 = *(std::__shared_weak_count **)(a1 + 16);
      if (v59)
      {
        v60 = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
        v62 = *(_WORD *)(a1 + 72);
        do
          v63 = __ldxr(v60);
        while (__stxr(v63 + 1, v60));
        v64 = *(_OWORD *)(a1 + 40);
        v94 = *(_OWORD *)(a1 + 24);
        v95 = v64;
        v65 = *(float32x4_t *)(a1 + 56);
        v96 = v65;
        do
          v66 = __ldxr(v60);
        while (__stxr(v66 + 1, v60));
        v92 = v58;
        v93 = v59;
        v97 = v62;
        do
          v67 = __ldaxr(v60);
        while (__stlxr(v67 - 1, v60));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
        do
          v68 = __ldaxr(v60);
        while (__stlxr(v68 - 1, v60));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      else
      {
        v69 = *(_WORD *)(a1 + 72);
        v92 = *(_QWORD *)(a1 + 8);
        v93 = 0;
        v64 = *(_OWORD *)(a1 + 24);
        v70 = *(_OWORD *)(a1 + 40);
        v94 = v64;
        v95 = v70;
        v65 = *(float32x4_t *)(a1 + 56);
        v96 = v65;
        v97 = v69;
      }
      sub_223738D80((uint64_t)&v91, (v99 - (_BYTE *)__p) >> 4, (uint64_t *)__p, a3, v65, *(double *)&v64, a6.n128_f64[0], a7.n128_f64[0], a8.n128_f64[0]);
      v71 = v93;
      if (v93)
      {
        v72 = (unint64_t *)&v93->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      if (__p)
        operator delete(__p);
      return;
    }
    if ((unint64_t)v26 >= 0x3FFFFFFFFFFFFFFDLL)
      sub_22316E078();
    v27 = (double *)operator new(4 * v26);
    __p = v27;
    v100 = &v27[2 * (v26 >> 2)];
    if ((unint64_t)(v26 - 4) >= 0x1C)
    {
      v49 = ((unint64_t)(v26 - 4) >> 2) + 1;
      v28 = &v25[2 * (v49 & 0x7FFFFFFFFFFFFFF8)];
      v29 = &v27[2 * (v49 & 0x7FFFFFFFFFFFFFF8)];
      v50 = v49 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v108 = vld2q_s16(v25);
        v25 += 16;
        v51 = vmovl_high_s16(v108.val[0]);
        *(_QWORD *)&v52.f64[0] = v51.i32[2];
        *(_QWORD *)&v52.f64[1] = v51.i32[3];
        a7 = (__n128)v52;
        v53 = vmovl_high_s16(v108.val[1]);
        *(_QWORD *)&v52.f64[0] = v53.i32[2];
        *(_QWORD *)&v52.f64[1] = v53.i32[3];
        a8 = (__n128)v52;
        *(_QWORD *)&v52.f64[0] = v51.i32[0];
        *(_QWORD *)&v52.f64[1] = v51.i32[1];
        v109.val[0] = v52;
        *(_QWORD *)&v52.f64[0] = v53.i32[0];
        *(_QWORD *)&v52.f64[1] = v53.i32[1];
        v109.val[1] = v52;
        v54 = vmovl_s16(*(int16x4_t *)v108.val[0].i8);
        v108.val[0] = (int16x8_t)vmovl_s16(*(int16x4_t *)v108.val[1].i8);
        *(_QWORD *)&v52.f64[0] = v54.i32[0];
        *(_QWORD *)&v52.f64[1] = v54.i32[1];
        v110.val[0] = v52;
        *(_QWORD *)&v52.f64[0] = v108.val[0].i32[0];
        *(_QWORD *)&v52.f64[1] = v108.val[0].i32[1];
        v110.val[1] = v52;
        v55 = v27;
        vst2q_f64(v55, v110);
        v55 += 4;
        *(_QWORD *)&v52.f64[0] = v54.i32[2];
        *(_QWORD *)&v52.f64[1] = v54.i32[3];
        v108.val[1] = (int16x8_t)v52;
        *(_QWORD *)&v52.f64[0] = v108.val[0].i32[2];
        *(_QWORD *)&v52.f64[1] = v108.val[0].i32[3];
        a6 = (__n128)v52;
        vst2q_f64(v55, *(float64x2x2_t *)(&a6 - 1));
        v56 = v27 + 8;
        vst2q_f64(v56, v109);
        v57 = v27 + 12;
        v27 += 16;
        vst2q_f64(v57, *(float64x2x2_t *)a7.n128_u64);
        v50 -= 8;
      }
      while (v50);
      if (v49 == (v49 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_45;
    }
    else
    {
      v28 = v25;
      v29 = v27;
    }
    do
    {
      *(_QWORD *)v29 = *v28;
      *((_QWORD *)v29 + 1) = v28[1];
      v29 += 2;
      v28 += 2;
    }
    while (v28 != v24);
LABEL_45:
    v99 = (char *)v29;
    goto LABEL_46;
  }
  v84 = &off_24EC232F0;
  v38 = *(_QWORD *)(a1 + 8);
  v39 = *(std::__shared_weak_count **)(a1 + 16);
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    v42 = *(_WORD *)(a1 + 72);
    do
      v43 = __ldxr(v40);
    while (__stxr(v43 + 1, v40));
    v44 = *(_OWORD *)(a1 + 40);
    v87 = *(_OWORD *)(a1 + 24);
    v88 = v44;
    v45 = *(float32x4_t *)(a1 + 56);
    v89 = v45;
    do
      v46 = __ldxr(v40);
    while (__stxr(v46 + 1, v40));
    v85 = v38;
    v86 = v39;
    v90 = v42;
    do
      v47 = __ldaxr(v40);
    while (__stlxr(v47 - 1, v40));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
    do
      v48 = __ldaxr(v40);
    while (__stlxr(v48 - 1, v40));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  else
  {
    v74 = *(_WORD *)(a1 + 72);
    v85 = *(_QWORD *)(a1 + 8);
    v86 = 0;
    v44 = *(_OWORD *)(a1 + 24);
    v75 = *(_OWORD *)(a1 + 40);
    v87 = v44;
    v88 = v75;
    v45 = *(float32x4_t *)(a1 + 56);
    v89 = v45;
    v90 = v74;
  }
  if (*(_QWORD *)(a2 + 272) == *(_QWORD *)(a2 + 264))
  {
    v78 = 0;
    v79 = 0xFFFFFFFF00000000;
    v80 = 0xFFFFFFFFLL;
  }
  else
  {
    v76 = *(__int16 *)(a2 + 328);
    if (v76 < 0 || (v77 = *(__int16 *)(a2 + 330), v77 < 0))
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/RLRegion.hpp", 180, (uint64_t)"(bounding_box_.min_corner.e() >= T{0}).all()", 44, (uint64_t)"Cannot create arr::IndexRange2 from region with negative row/column indices", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      LOWORD(v76) = *(_WORD *)(a2 + 328);
      LOWORD(v77) = *(_WORD *)(a2 + 330);
    }
    v78 = 0;
    v79 = 0xFFFFFFFF00000000;
    v80 = 0xFFFFFFFFLL;
    if (*(_WORD *)(a2 + 332) - (_WORD)v76 != 0xFFFF && *(_WORD *)(a2 + 334) - (_WORD)v77 != 0xFFFF)
    {
      v80 = (__int16)v76;
      v79 = (uint64_t)(__int16)v77 << 32;
      v78 = (v80 + (__int16)(*(_WORD *)(a2 + 332) - v76)) | ((unint64_t)((__int16)(*(_WORD *)(a2 + 334) - v77) + (__int16)v77) << 32);
    }
  }
  __p = (void *)(v80 | v79);
  v99 = (char *)v78;
  sub_2237385F0((uint64_t)&v84, (unsigned int *)&__p, a3, v45, *(double *)&v44, a6.n128_f64[0], a7.n128_f64[0], a8.n128_f64[0], a9, a10, a11);
  v81 = v86;
  if (v86)
  {
    v82 = (unint64_t *)&v86->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
}

void sub_2237397E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231E94AC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237397FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  va_list va;

  va_start(va, a12);
  sub_2231E94AC((uint64_t)va);
  if (v12)
    operator delete(v12);
  _Unwind_Resume(a1);
}

void sub_223739830(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2231E94AC(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_223739844(unint64_t a1, float32x2_t *a2, float32x2_t *a3, uint64_t a4, __int16 a5, uint64_t *a6, const void **a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, char a18)
{
  int v10;
  size_t v11;
  unint64_t v12;
  uint64_t *v14;
  __int16 v15;
  float32x2_t *v16;
  float32x2_t *v17;
  unint64_t v18;
  std::string *p_dst;
  uint64_t v20;
  uint64_t v25;
  unint64_t v26;
  const void *v27;
  std::string *v28;
  __int128 v29;
  uint64_t v30;
  void **v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  std::mutex *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x16_t v39;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v43;
  std::string::size_type v44;
  int v45;
  int8x16_t v48;
  uint64_t v51;
  int v52;
  char v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57[2];
  __int128 v58;
  int v59;
  std::string __dst;
  std::string __p;
  uint64_t v62[4];
  _QWORD v63[46];

  v63[44] = *MEMORY[0x24BDAC8D0];
  v10 = *((char *)a7 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)a7 + 23);
  else
    v11 = (size_t)a7[1];
  v12 = v11 + 1;
  if (v11 + 1 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v14 = a6;
  v15 = a5;
  v16 = a3;
  v17 = a2;
  v18 = a1;
  if (v12 >= 0x17)
  {
    v20 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v20 = v12 | 7;
    v25 = v20 + 1;
    p_dst = (std::string *)operator new(v20 + 1);
    v26 = v25 | 0x8000000000000000;
    v16 = a3;
    v17 = a2;
    v18 = a1;
    v15 = a5;
    v14 = a6;
    __dst.__r_.__value_.__l.__size_ = v11 + 1;
    __dst.__r_.__value_.__r.__words[2] = v26;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 1;
    if (!v11)
      goto LABEL_15;
  }
  if (v10 >= 0)
    v27 = a7;
  else
    v27 = *a7;
  memmove(p_dst, v27, v11);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v11) = 46;
  v28 = std::string::append(&__dst, "Planes", 6uLL);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  *(_QWORD *)&v58 = *((_QWORD *)&v28->__r_.__value_.__l + 2);
  *(_OWORD *)v57 = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v62[0] = (uint64_t)"cv3d.recon.";
  v62[1] = 11;
  v30 = BYTE7(v58);
  v31 = v57;
  if (SBYTE7(v58) < 0)
  {
    v31 = (void **)v57[0];
    v30 = (uint64_t)v57[1];
  }
  v62[2] = (uint64_t)v31;
  v62[3] = v30;
  sub_2231A9820((uint64_t)v62, (uint64_t)v63, 0, 0, &__p);
  if (SBYTE7(v58) < 0)
  {
    operator delete(v57[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_19;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_19:
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v32 = sub_2241471F8();
    v33 = v32[2];
    if (!v33)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v33 = v32[2];
    }
    v34 = *(_QWORD *)(v33 + 64);
    v35 = (std::mutex *)(v34 + 32);
    std::mutex::lock((std::mutex *)(v34 + 32));
    v37 = *(_QWORD *)(v34 + 96);
    v36 = *(_QWORD *)(v34 + 104);
    std::mutex::unlock(v35);
    if (v37 != v36)
    {
      sub_2241471F8();
      v38 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38))
      {
        *(_OWORD *)v57 = 0u;
        v58 = 0u;
        v59 = 728325608;
        kdebug_trace();
        v54 = *v14;
        v55 = *((_DWORD *)v14 + 2);
        v56 = 1;
        sub_224003F18(v18, v17, v16, 1, (uint64_t)&v54, v15 | 0x100, (uint64_t)v62, v39);
        if (!a18)
          a17 = NAN;
        sub_223739D78(v38, (uint64_t)v62, a4, a17);
        sub_22316F8F4(v62);
        kdebug_trace();
      }
    }
  }
  *(_OWORD *)v57 = 0u;
  v58 = 0u;
  v59 = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v43 = p_p->__r_.__value_.__r.__words[0];
    v44 = p_p->__r_.__value_.__l.__size_;
    v45 = p_p->__r_.__value_.__s.__data_[16];
    if (v43 == 0x6365722E64337663 && v44 == 0x73746174532E6E6FLL && v45 == 46)
    {
      sub_223187510();
      v51 = *v14;
      v52 = *((_DWORD *)v14 + 2);
      v53 = 1;
      sub_224003F18(v18, v17, v16, 1, (uint64_t)&v51, v15 | 0x100, (uint64_t)v62, v48);
      sub_22316F8F4(v62);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223739CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223739D78(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t *v8;
  __int128 v9;
  void *__p[2];
  uint64_t v11;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_223197FA4(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a3;
      v11 = *(_QWORD *)(a3 + 16);
    }
    *(_QWORD *)&v9 = (uint64_t)(a4 * 1000000000.0);
    *((_QWORD *)&v9 + 1) = 2;
    v8 = sub_2241471F8();
    sub_223452794((uint64_t)v8, a1, a2, (uint64_t)__p, &v9);
    if (SHIBYTE(v11) < 0)
      operator delete(__p[0]);
  }
}

void sub_223739E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223739E78(uint64_t a1, uint64_t a2, float32x2_t *a3, uint64_t a4, __int16 a5, uint64_t a6, const void **a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, char a18)
{
  int v10;
  size_t v11;
  unint64_t v12;
  uint64_t v14;
  __int16 v15;
  float32x2_t *v16;
  uint64_t v18;
  std::string *p_dst;
  uint64_t v20;
  uint64_t v24;
  unint64_t v25;
  const void *v26;
  std::string *v27;
  __int128 v28;
  uint64_t v29;
  void **v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  std::mutex *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v42;
  std::string::size_type v43;
  int v44;
  uint64_t v47;
  void *v50[2];
  __int128 v51;
  int v52;
  std::string __dst;
  std::string __p;
  uint64_t v55[4];
  _QWORD v56[46];

  v56[44] = *MEMORY[0x24BDAC8D0];
  v10 = *((char *)a7 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)a7 + 23);
  else
    v11 = (size_t)a7[1];
  v12 = v11 + 1;
  if (v11 + 1 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v14 = a6;
  v15 = a5;
  v16 = a3;
  v18 = a1;
  if (v12 >= 0x17)
  {
    v20 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v20 = v12 | 7;
    v24 = v20 + 1;
    p_dst = (std::string *)operator new(v20 + 1);
    v25 = v24 | 0x8000000000000000;
    v14 = a6;
    v15 = a5;
    v18 = a1;
    v16 = a3;
    __dst.__r_.__value_.__l.__size_ = v11 + 1;
    __dst.__r_.__value_.__r.__words[2] = v25;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 1;
    if (!v11)
      goto LABEL_15;
  }
  if (v10 >= 0)
    v26 = a7;
  else
    v26 = *a7;
  memmove(p_dst, v26, v11);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v11) = 46;
  v27 = std::string::append(&__dst, "Planes", 6uLL);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  *(_QWORD *)&v51 = *((_QWORD *)&v27->__r_.__value_.__l + 2);
  *(_OWORD *)v50 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v55[0] = (uint64_t)"cv3d.recon.";
  v55[1] = 11;
  v29 = BYTE7(v51);
  v30 = v50;
  if (SBYTE7(v51) < 0)
  {
    v30 = (void **)v50[0];
    v29 = (uint64_t)v50[1];
  }
  v55[2] = (uint64_t)v30;
  v55[3] = v29;
  sub_2231A9820((uint64_t)v55, (uint64_t)v56, 0, 0, &__p);
  if (SBYTE7(v51) < 0)
  {
    operator delete(v50[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_19;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_19:
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v31 = sub_2241471F8();
    v32 = v31[2];
    if (!v32)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v32 = v31[2];
    }
    v33 = *(_QWORD *)(v32 + 64);
    v34 = (std::mutex *)(v33 + 32);
    std::mutex::lock((std::mutex *)(v33 + 32));
    v36 = *(_QWORD *)(v33 + 96);
    v35 = *(_QWORD *)(v33 + 104);
    std::mutex::unlock(v34);
    if (v36 != v35)
    {
      sub_2241471F8();
      v37 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37))
      {
        *(_OWORD *)v50 = 0u;
        v51 = 0u;
        v52 = 728325608;
        kdebug_trace();
        sub_2241498F4((uint64_t)v55, 0);
        if (v18)
        {
          v38 = a2;
          do
          {
            sub_223744DD8((unint64_t *)v55, (uint64_t)(*(_QWORD *)(v38 + 8) - *(_QWORD *)v38) >> 3, *(int32x4_t **)v38, v16);
            v38 += 24;
          }
          while (v38 != a2 + 24 * v18);
        }
        sub_2237415E8((unint64_t)v55, v16, v14, v15 | 0x100);
        if (!a18)
          a17 = NAN;
        sub_223739D78(v37, (uint64_t)v55, a4, a17);
        sub_22316F8F4(v55);
        kdebug_trace();
      }
    }
  }
  *(_OWORD *)v50 = 0u;
  v51 = 0u;
  v52 = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v42 = p_p->__r_.__value_.__r.__words[0];
    v43 = p_p->__r_.__value_.__l.__size_;
    v44 = p_p->__r_.__value_.__s.__data_[16];
    if (v42 == 0x6365722E64337663 && v43 == 0x73746174532E6E6FLL && v44 == 46)
    {
      sub_223187510();
      sub_2241498F4((uint64_t)v55, 0);
      if (v18)
      {
        v47 = a2 + 24 * v18;
        do
        {
          sub_223744DD8((unint64_t *)v55, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3, *(int32x4_t **)a2, v16);
          a2 += 24;
        }
        while (a2 != v47);
      }
      sub_2237415E8((unint64_t)v55, v16, v14, v15 | 0x100);
      sub_22316F8F4(v55);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22373A33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_22373A3E0(float32x2_t *a1, uint64_t a2, const void **a3, uint64_t a4, char a5)
{
  int v5;
  size_t v6;
  unint64_t v7;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  void **v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  std::mutex *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  std::string::size_type size;
  std::string *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  int v31;
  void *__p[2];
  __int128 v35;
  int v36;
  std::string v37;
  uint64_t v38[4];
  _QWORD v39[46];

  v39[44] = *MEMORY[0x24BDAC8D0];
  v5 = *((char *)a3 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a3 + 23);
  else
    v6 = (size_t)a3[1];
  v7 = v6 + 8;
  if (v6 + 8 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v7 >= 0x17)
  {
    v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v14 = v7 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    __p[1] = (void *)(v6 + 8);
    *(_QWORD *)&v35 = v15 | 0x8000000000000000;
    __p[0] = v13;
  }
  else
  {
    __p[1] = 0;
    *(_QWORD *)&v35 = 0;
    __p[0] = 0;
    v13 = __p;
    BYTE7(v35) = v6 + 8;
    if (!v6)
      goto LABEL_15;
  }
  if (v5 >= 0)
    v16 = a3;
  else
    v16 = *a3;
  memmove(v13, v16, v6);
LABEL_15:
  strcpy((char *)v13 + v6, ".Origins");
  v38[0] = (uint64_t)"cv3d.recon.";
  v38[1] = 11;
  v17 = BYTE7(v35);
  v18 = __p;
  if (SBYTE7(v35) < 0)
  {
    v18 = (void **)__p[0];
    v17 = (uint64_t)__p[1];
  }
  v38[2] = (uint64_t)v18;
  v38[3] = v17;
  sub_2231A9820((uint64_t)v38, (uint64_t)v39, 0, 0, &v37);
  if (SBYTE7(v35) < 0)
    operator delete(__p[0]);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v19 = sub_2241471F8();
    v20 = v19[2];
    if (!v20)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v20 = v19[2];
    }
    v21 = *(_QWORD *)(v20 + 64);
    v22 = (std::mutex *)(v21 + 32);
    std::mutex::lock((std::mutex *)(v21 + 32));
    v24 = *(_QWORD *)(v21 + 96);
    v23 = *(_QWORD *)(v21 + 104);
    std::mutex::unlock(v22);
    if (v24 != v23)
    {
      sub_2241471F8();
      v25 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25))
      {
        *(_OWORD *)__p = 0u;
        v35 = 0u;
        v36 = 728325608;
        kdebug_trace();
        sub_224003D34(a1, 0, (uint64_t)v38);
        v26 = *(double *)&a4;
        if (!a5)
          v26 = NAN;
        sub_223739D78(v25, (uint64_t)v38, a2, v26);
        sub_22316F8F4(v38);
        kdebug_trace();
      }
    }
  }
  *(_OWORD *)__p = 0u;
  v35 = 0u;
  v36 = 728325624;
  kdebug_trace();
  size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v37.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    v28 = &v37;
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v28 = (std::string *)v37.__r_.__value_.__r.__words[0];
    v29 = v28->__r_.__value_.__r.__words[0];
    v30 = v28->__r_.__value_.__l.__size_;
    v31 = v28->__r_.__value_.__s.__data_[16];
    if (v29 == 0x6365722E64337663 && v30 == 0x73746174532E6E6FLL && v31 == 46)
    {
      sub_223187510();
      sub_224003D34(a1, 0, (uint64_t)v38);
      sub_22316F8F4(v38);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
}

void sub_22373A7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_22373A83C(_QWORD *a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::mutex *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15)();
  uint64_t (**v16)();
  uint64_t v17;
  uint64_t *v18;
  float32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x2_t *v26;
  float32x2_t *v27;
  float32x4_t v28;
  float32x4_t v29;
  const char **v30;
  const char *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t (**v35)();
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::string v55;
  __int128 v56;
  void *__dst[2];
  uint64_t v58;
  void *__p[2];
  uint64_t v60;
  char v61;
  uint64_t (**v62)();
  uint64_t (**v63)();
  std::__shared_weak_count *v64;
  int v65;
  uint64_t v66;
  uint64_t (**v67)();
  std::__shared_weak_count *v68;
  const char *v69;
  uint64_t v70;
  uint64_t (**v71)();
  uint64_t (**v72)();
  _QWORD v73[45];

  v73[44] = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v8 = sub_2241471F8();
    v9 = v8[2];
    if (!v9)
    {
      v10 = v8;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v9 = v10[2];
    }
    v11 = *(_QWORD *)(v9 + 64);
    v12 = (std::mutex *)(v11 + 32);
    std::mutex::lock((std::mutex *)(v11 + 32));
    v14 = *(_QWORD *)(v11 + 96);
    v13 = *(_QWORD *)(v11 + 104);
    std::mutex::unlock(v12);
    if (v14 != v13)
    {
      v69 = "cv3d.recon.";
      v70 = 11;
      v15 = (uint64_t (**)())*(unsigned __int8 *)(a4 + 23);
      if ((char)v15 >= 0)
        v16 = (uint64_t (**)())a4;
      else
        v16 = *(uint64_t (***)())a4;
      if ((char)v15 < 0)
        v15 = *(uint64_t (***)())(a4 + 8);
      v71 = v16;
      v72 = v15;
      sub_2231A9820((uint64_t)&v69, (uint64_t)v73, 0, 0, &v55);
      sub_2241471F8();
      v17 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17))
      {
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17))
        {
          if (*(char *)(a3 + 23) < 0)
          {
            sub_223197FA4(__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
          }
          else
          {
            *(_OWORD *)__dst = *(_OWORD *)a3;
            v58 = *(_QWORD *)(a3 + 16);
          }
          *(_QWORD *)&v56 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v56 + 1) = 2;
          v18 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17))
          {
            __p[0] = (void *)vdup_n_s32(0x3F666666u);
            LODWORD(__p[1]) = 1063675494;
            sub_2241498F4((uint64_t)&v62, 0);
            v65 = 1;
            if (*a1)
            {
              v23 = a1[1];
              v24 = v23 + 24 * *a1;
              do
              {
                v25 = v23 + 12;
                sub_2240030D0(v23, v23 + 12, (uint64_t *)__p, 8u, (uint64_t)&v69, 0.01);
                sub_22414E9E0((uint64_t)&v62, (uint64_t)&v69);
                sub_22316F8F4((uint64_t *)&v69);
                v23 = v25 + 12;
              }
              while (v25 + 12 != v24);
            }
            v26 = (float32x2_t *)v62;
            v27 = (float32x2_t *)v63;
            if (v62 != v63)
            {
              do
              {
                v19.i32[0] = a2[1].i32[0];
                v20.i32[0] = a2[3].i32[0];
                v21.i32[0] = a2[5].i32[0];
                v22.i32[0] = v26[1].i32[0];
                *(float32x2_t *)v28.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a2, COERCE_FLOAT(*v26)), a2[2], *v26, 1), a2[4], v22.f32[0]);
                *(float32x2_t *)&v28.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v19.f32, *v26), v20, *v26, 1), v22, v21);
                *(float32x2_t *)v19.f32 = a2[6];
                v19.i32[2] = a2[7].i32[0];
                v29 = vaddq_f32(v28, v19);
                v26[1].i32[0] = v29.i32[2];
                *v26 = *(float32x2_t *)v29.f32;
                v26 = (float32x2_t *)((char *)v26 + 12);
              }
              while (v26 != v27);
            }
            *(_OWORD *)__p = *(_OWORD *)__dst;
            v60 = v58;
            __dst[0] = 0;
            __dst[1] = 0;
            v58 = 0;
            v61 = 1;
            sub_22329F414((uint64_t)&v62, (__int128 *)__p, &v56, &v66);
            if (v61 && SHIBYTE(v60) < 0)
              operator delete(__p[0]);
            sub_22316F8F4((uint64_t *)&v62);
            v30 = (const char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 56))(v17);
            v31 = *v30;
            v32 = (std::__shared_weak_count *)v30[1];
            if (v32)
            {
              p_shared_owners = (unint64_t *)&v32->__shared_owners_;
              do
                v34 = __ldxr(p_shared_owners);
              while (__stxr(v34 + 1, p_shared_owners));
            }
            v35 = v67;
            v36 = v68;
            v62 = &off_24EC6A3B8;
            v63 = v67;
            v64 = v68;
            v68 = 0;
            v67 = 0;
            v69 = v31;
            v70 = (uint64_t)v32;
            if (v32)
            {
              v37 = (unint64_t *)&v32->__shared_owners_;
              do
                v38 = __ldxr(v37);
              while (__stxr(v38 + 1, v37));
            }
            v71 = &off_24EC6A3B8;
            v72 = v35;
            v73[0] = v36;
            if (v36)
            {
              v39 = (unint64_t *)&v36->__shared_owners_;
              do
                v40 = __ldxr(v39);
              while (__stxr(v40 + 1, v39));
            }
            (*(void (**)(uint64_t *, const char **))(*v18 + 16))(v18, &v69);
            v41 = (std::__shared_weak_count *)v73[0];
            if (v73[0])
            {
              v42 = (unint64_t *)(v73[0] + 8);
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
            v44 = (std::__shared_weak_count *)v70;
            if (v70)
            {
              v45 = (unint64_t *)(v70 + 8);
              do
                v46 = __ldaxr(v45);
              while (__stlxr(v46 - 1, v45));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                std::__shared_weak_count::__release_weak(v44);
              }
            }
            v47 = v64;
            if (v64)
            {
              v48 = (unint64_t *)&v64->__shared_owners_;
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
            if (v32)
            {
              v50 = (unint64_t *)&v32->__shared_owners_;
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
              }
            }
            v52 = v68;
            if (v68)
            {
              v53 = (unint64_t *)&v68->__shared_owners_;
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
          }
          if (SHIBYTE(v58) < 0)
            operator delete(__dst[0]);
        }
        kdebug_trace();
      }
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22373ADD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,__int16 a33)
{
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;

  sub_2241231D8(v34);
  v36 = (std::__shared_weak_count *)STACK[0x230];
  if (STACK[0x230])
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  sub_2241231D8((uint64_t)&a33);
  if (v33)
  {
    v39 = (unint64_t *)&v33->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  sub_2241231D8((uint64_t)&STACK[0x210]);
  if (a27 < 0)
    operator delete(__p);
  sub_2231874DC((uint64_t)&a9);
  if (a19 < 0)
    operator delete(a14);
  _Unwind_Resume(a1);
}

void sub_22373AF04(uint64_t a1, const void **a2)
{
  int v2;
  size_t v3;
  unint64_t v4;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  std::string *v10;
  __int128 v11;
  void *v12;
  void **v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  std::mutex *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v23;
  std::string::size_type v24;
  int v25;
  int v28;
  size_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  void *v35;
  void **v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  std::mutex *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type v46;
  std::string::size_type v47;
  int v48;
  void *v52[2];
  __int128 v53;
  int v54;
  std::string __dst;
  std::string __p;
  const char *v57;
  uint64_t v58;
  void **v59;
  void *v60;
  _QWORD v61[46];

  v61[44] = *MEMORY[0x24BDAC8D0];
  v2 = *((char *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (size_t)a2[1];
  v4 = v3 + 1;
  if (v3 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v3 + 1;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v3 + 1;
    if (!v3)
      goto LABEL_15;
  }
  if (v2 >= 0)
    v9 = a2;
  else
    v9 = *a2;
  memmove(p_dst, v9, v3);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v3) = 46;
  v10 = std::string::append(&__dst, "Planes", 6uLL);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  *(_QWORD *)&v53 = *((_QWORD *)&v10->__r_.__value_.__l + 2);
  *(_OWORD *)v52 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v57 = "cv3d.recon.";
  v58 = 11;
  v12 = (void *)BYTE7(v53);
  v13 = v52;
  if (SBYTE7(v53) < 0)
  {
    v13 = (void **)v52[0];
    v12 = v52[1];
  }
  v59 = v13;
  v60 = v12;
  sub_2231A9820((uint64_t)&v57, (uint64_t)v61, 0, 0, &__p);
  if (SBYTE7(v53) < 0)
  {
    operator delete(v52[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_19;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_19:
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v14 = sub_2241471F8();
    v15 = v14[2];
    if (!v15)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v15 = v14[2];
    }
    v16 = *(_QWORD *)(v15 + 64);
    v17 = (std::mutex *)(v16 + 32);
    std::mutex::lock((std::mutex *)(v16 + 32));
    v19 = *(_QWORD *)(v16 + 96);
    v18 = *(_QWORD *)(v16 + 104);
    std::mutex::unlock(v17);
    if (v19 != v18)
    {
      sub_2241471F8();
      v20 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20))
      {
        *(_OWORD *)v52 = 0u;
        v53 = 0u;
        v54 = 728325608;
        kdebug_trace();
        sub_2241498F4((uint64_t)&v57, 0);
        sub_2234526A8((double *)&qword_255788F20, v20, (uint64_t)&v57, a1);
        sub_22316F8F4((uint64_t *)&v57);
        kdebug_trace();
      }
    }
  }
  *(_OWORD *)v52 = 0u;
  v53 = 0u;
  v54 = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v23 = p_p->__r_.__value_.__r.__words[0];
    v24 = p_p->__r_.__value_.__l.__size_;
    v25 = p_p->__r_.__value_.__s.__data_[16];
    if (v23 == 0x6365722E64337663 && v24 == 0x73746174532E6E6FLL && v25 == 46)
    {
      sub_223187510();
      sub_2241498F4((uint64_t)&v57, 0);
      sub_22316F8F4((uint64_t *)&v57);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v28 = *((char *)a2 + 23);
  if (v28 >= 0)
    v29 = *((unsigned __int8 *)a2 + 23);
  else
    v29 = (size_t)a2[1];
  v30 = v29 + 8;
  if (v29 + 8 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v30 >= 0x17)
  {
    v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v32 = v30 | 7;
    v33 = v32 + 1;
    v31 = operator new(v32 + 1);
    v52[1] = (void *)(v29 + 8);
    *(_QWORD *)&v53 = v33 | 0x8000000000000000;
    v52[0] = v31;
  }
  else
  {
    v52[1] = 0;
    *(_QWORD *)&v53 = 0;
    v52[0] = 0;
    v31 = v52;
    BYTE7(v53) = v29 + 8;
    if (!v29)
      goto LABEL_56;
  }
  if (v28 >= 0)
    v34 = a2;
  else
    v34 = *a2;
  memmove(v31, v34, v29);
LABEL_56:
  strcpy((char *)v31 + v29, ".Origins");
  v57 = "cv3d.recon.";
  v58 = 11;
  v35 = (void *)BYTE7(v53);
  v36 = v52;
  if (SBYTE7(v53) < 0)
  {
    v36 = (void **)v52[0];
    v35 = v52[1];
  }
  v59 = v36;
  v60 = v35;
  sub_2231A9820((uint64_t)&v57, (uint64_t)v61, 0, 0, &__p);
  if (SBYTE7(v53) < 0)
    operator delete(v52[0]);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v37 = sub_2241471F8();
    v38 = v37[2];
    if (!v38)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v38 = v37[2];
    }
    v39 = *(_QWORD *)(v38 + 64);
    v40 = (std::mutex *)(v39 + 32);
    std::mutex::lock((std::mutex *)(v39 + 32));
    v42 = *(_QWORD *)(v39 + 96);
    v41 = *(_QWORD *)(v39 + 104);
    std::mutex::unlock(v40);
    if (v42 != v41)
    {
      sub_2241471F8();
      v43 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43))
      {
        *(_OWORD *)v52 = 0u;
        v53 = 0u;
        v54 = 728325608;
        kdebug_trace();
        sub_2241498F4((uint64_t)&v57, 0);
        sub_2234526A8((double *)&qword_255788F20, v43, (uint64_t)&v57, a1);
        sub_22316F8F4((uint64_t *)&v57);
        kdebug_trace();
      }
    }
  }
  *(_OWORD *)v52 = 0u;
  v53 = 0u;
  v54 = 728325624;
  kdebug_trace();
  v44 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v44 = __p.__r_.__value_.__l.__size_;
  if (v44 >= 0x11)
  {
    v45 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v46 = v45->__r_.__value_.__r.__words[0];
    v47 = v45->__r_.__value_.__l.__size_;
    v48 = v45->__r_.__value_.__s.__data_[16];
    if (v46 == 0x6365722E64337663 && v47 == 0x73746174532E6E6FLL && v48 == 46)
    {
      sub_223187510();
      sub_2241498F4((uint64_t)&v57, 0);
      sub_22316F8F4((uint64_t *)&v57);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22373B61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_22373B6EC(_OWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::mutex *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned __int8 v20;
  std::string::size_type v21;
  std::string::size_type v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::string::size_type size;
  std::string *v31;
  std::string::size_type v32;
  std::string::size_type v33;
  int v34;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  std::mutex *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  _DWORD *v49;
  uint64_t v50;
  void *v51;
  std::string::size_type v52;
  std::string *p_info;
  std::string::size_type v54;
  std::string::size_type v55;
  int v56;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  void *v70;
  char v71;
  void *v72[2];
  uint64_t v73;
  char v74;
  void *__dst[2];
  uint64_t v76;
  char v77;
  __int128 v78;
  __int128 v79;
  int v80;
  std::string v81;
  void *__p[4];
  _QWORD v83[2];
  std::__shared_weak_count *v84;
  std::string info;
  _QWORD v86[2];
  void *v87[2];
  _BYTE v88[23];
  char v89;
  __int128 v90;
  uint64_t v91;
  char v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v87[0] = "cv3d.recon.";
  v87[1] = (void *)11;
  v8 = *((unsigned __int8 *)a3 + 23);
  if ((v8 & 0x80u) == 0)
    v9 = a3;
  else
    v9 = (uint64_t *)*a3;
  if ((v8 & 0x80u) != 0)
    v8 = a3[1];
  *(_QWORD *)v88 = v9;
  *(_QWORD *)&v88[8] = v8;
  sub_2231A9820((uint64_t)v87, (uint64_t)&v88[16], 0, 0, &v81);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v10 = sub_2241471F8();
    v11 = v10[2];
    if (!v11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v11 = v10[2];
    }
    v12 = *(_QWORD *)(v11 + 64);
    v13 = (std::mutex *)(v12 + 32);
    std::mutex::lock((std::mutex *)(v12 + 32));
    v15 = *(_QWORD *)(v12 + 96);
    v14 = *(_QWORD *)(v12 + 104);
    std::mutex::unlock(v13);
    if (v15 != v14)
    {
      sub_2241471F8();
      v16 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16))
      {
        v78 = 0u;
        v79 = 0u;
        v80 = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16))
        {
          if (*(char *)(a4 + 23) < 0)
          {
            sub_223197FA4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
          }
          else
          {
            *(_OWORD *)__p = *(_OWORD *)a4;
            __p[2] = *(void **)(a4 + 16);
          }
          v17 = *(double *)&qword_255788F20;
          v18 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16))
          {
            v69 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 56))(v16);
            v68 = (uint64_t)v18;
            v70 = __p[0];
            v86[0] = __p[1];
            *(void **)((char *)v86 + 7) = *(void **)((char *)&__p[1] + 7);
            v71 = HIBYTE(__p[2]);
            memset(__p, 0, 24);
            v19 = mach_continuous_time();
            v20 = atomic_load((unsigned __int8 *)&qword_255795560);
            if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
            {
              mach_timebase_info((mach_timebase_info_t)&info);
              LODWORD(v67) = HIDWORD(info.__r_.__value_.__r.__words[0]);
              LODWORD(v66) = info.__r_.__value_.__l.__data_;
              *(double *)&qword_255795558 = (double)v66 / (double)v67;
              __cxa_guard_release(&qword_255795560);
            }
            v87[0] = (void *)llround(*(double *)&qword_255795558 * (double)v19);
            v87[1] = (void *)2;
            *(_QWORD *)v88 = v70;
            *(_QWORD *)&v88[8] = v86[0];
            *(_QWORD *)&v88[15] = *(_QWORD *)((char *)v86 + 7);
            v89 = v71;
            v86[0] = 0;
            *(_QWORD *)((char *)v86 + 7) = 0;
            LOBYTE(v90) = 1;
            BYTE8(v90) = 0;
            v93 = 0;
            v94 = (uint64_t)(v17 * 1000000000.0);
            v95 = 2;
            v96 = 1;
            v97 = 0;
            v98 = 0;
            v99 = 0;
            v100 = 0;
            v21 = *(_QWORD *)(a2 + 8);
            v22 = *(_QWORD *)(a2 + 16);
            info.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6D000;
            info.__r_.__value_.__l.__size_ = v21;
            info.__r_.__value_.__r.__words[2] = v22;
            if (v22)
            {
              v23 = (unint64_t *)(v22 + 8);
              do
                v24 = __ldxr(v23);
              while (__stxr(v24 + 1, v23));
            }
            v25 = (std::__shared_weak_count_vtbl *)operator new();
            v25->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_24EC282C8;
            v25->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_24EC6D000;
            v25->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v21;
            v25->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v22;
            *(_OWORD *)&info.__r_.__value_.__r.__words[1] = 0uLL;
            sub_2231AB0FC((uint64_t)&v25->__on_zero_shared_weak, (uint64_t)v87);
            v25->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_24EC28248;
            v83[0] = &off_24EC6A3B8;
            v83[1] = v25;
            v26 = (std::__shared_weak_count *)operator new();
            v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6A4B0;
            v26->__shared_owners_ = 0;
            v26->__shared_weak_owners_ = 0;
            v26[1].__vftable = v25;
            v84 = v26;
            sub_2231AD66C((uint64_t)v87);
            sub_2231AA5A4(v68, v69, (uint64_t)v83);
            v27 = v84;
            if (v84)
            {
              p_shared_owners = (unint64_t *)&v84->__shared_owners_;
              do
                v29 = __ldaxr(p_shared_owners);
              while (__stlxr(v29 - 1, p_shared_owners));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }
          }
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
        }
        kdebug_trace();
      }
    }
  }
  *(_OWORD *)v87 = 0u;
  *(_OWORD *)v88 = 0u;
  *(_DWORD *)&v88[16] = 728325624;
  kdebug_trace();
  size = HIBYTE(v81.__r_.__value_.__r.__words[2]);
  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v81.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    v31 = &v81;
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v31 = (std::string *)v81.__r_.__value_.__r.__words[0];
    v32 = v31->__r_.__value_.__r.__words[0];
    v33 = v31->__r_.__value_.__l.__size_;
    v34 = v31->__r_.__value_.__s.__data_[16];
    if (v32 == 0x6365722E64337663 && v33 == 0x73746174532E6E6FLL && v34 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  v87[0] = "cv3d.recon.";
  v87[1] = (void *)11;
  v37 = *((unsigned __int8 *)a3 + 23);
  if ((v37 & 0x80u) == 0)
    v38 = a3;
  else
    v38 = (uint64_t *)*a3;
  if ((v37 & 0x80u) != 0)
    v37 = a3[1];
  *(_QWORD *)v88 = v38;
  *(_QWORD *)&v88[8] = v37;
  sub_2231A9820((uint64_t)v87, (uint64_t)&v88[16], 0, 0, &info);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v39 = sub_2241471F8();
    v40 = v39[2];
    if (!v40)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v40 = v39[2];
    }
    v41 = *(_QWORD *)(v40 + 64);
    v42 = (std::mutex *)(v41 + 32);
    std::mutex::lock((std::mutex *)(v41 + 32));
    v44 = *(_QWORD *)(v41 + 96);
    v43 = *(_QWORD *)(v41 + 104);
    std::mutex::unlock(v42);
    if (v44 != v43)
    {
      sub_2241471F8();
      v45 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45))
      {
        v78 = 0u;
        v79 = 0u;
        v80 = 728325608;
        kdebug_trace();
        v46 = operator new();
        v47 = a1[1];
        *(_OWORD *)v46 = *a1;
        *(_OWORD *)(v46 + 16) = v47;
        v48 = a1[3];
        *(_OWORD *)(v46 + 32) = a1[2];
        *(_OWORD *)(v46 + 48) = v48;
        *(_DWORD *)(v46 + 128) = 0;
        *(_BYTE *)(v46 + 136) = 4;
        if (*(char *)(a4 + 23) < 0)
        {
          sub_223197FA4(__dst, *(void **)a4, *(_QWORD *)(a4 + 8));
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)a4;
          v76 = *(_QWORD *)(a4 + 16);
        }
        v77 = 1;
        v49 = (_DWORD *)operator new();
        *(_BYTE *)v49 = 0;
        v49[32] = -1;
        v50 = *(unsigned int *)(v46 + 128);
        if ((_DWORD)v50 != -1)
        {
          ((void (*)(_QWORD *, _DWORD *, uint64_t))off_24EC6BD10[v50])(v83, v49, v46);
          v49[32] = v50;
        }
        *((_BYTE *)v49 + 136) = *(_BYTE *)(v46 + 136);
        v87[0] = v49;
        LOBYTE(v87[1]) = 0;
        v88[16] = 0;
        LOBYTE(v90) = 0;
        v92 = 0;
        if (v77)
        {
          v90 = *(_OWORD *)__dst;
          v91 = v76;
          __dst[1] = 0;
          v76 = 0;
          __dst[0] = 0;
          v92 = 1;
        }
        sub_22352DE04((double *)&qword_255788F20, v45, (uint64_t)v87, a4);
        if (v92 && SHIBYTE(v91) < 0)
          operator delete((void *)v90);
        if (v88[16] && (v88[15] & 0x80000000) != 0)
          operator delete(v87[1]);
        v51 = v87[0];
        v87[0] = 0;
        if (v51)
          MEMORY[0x227684CE8](v51, 0x1000C4072FAA15ELL);
        if (v77 && SHIBYTE(v76) < 0)
          operator delete(__dst[0]);
        MEMORY[0x227684CE8](v46, 0x1000C4072FAA15ELL);
        kdebug_trace();
      }
    }
  }
  *(_OWORD *)v87 = 0u;
  *(_OWORD *)v88 = 0u;
  *(_DWORD *)&v88[16] = 728325624;
  kdebug_trace();
  v52 = HIBYTE(info.__r_.__value_.__r.__words[2]);
  if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v52 = info.__r_.__value_.__l.__size_;
  if (v52 >= 0x11)
  {
    p_info = &info;
    if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_info = (std::string *)info.__r_.__value_.__r.__words[0];
    v54 = p_info->__r_.__value_.__r.__words[0];
    v55 = p_info->__r_.__value_.__l.__size_;
    v56 = p_info->__r_.__value_.__s.__data_[16];
    if (v54 == 0x6365722E64337663 && v55 == 0x73746174532E6E6FLL && v56 == 46)
    {
      sub_223187510();
      v59 = operator new();
      v60 = a1[1];
      *(_OWORD *)v59 = *a1;
      *(_OWORD *)(v59 + 16) = v60;
      v61 = a1[3];
      *(_OWORD *)(v59 + 32) = a1[2];
      *(_OWORD *)(v59 + 48) = v61;
      *(_DWORD *)(v59 + 128) = 0;
      *(_BYTE *)(v59 + 136) = 4;
      if (*(char *)(a4 + 23) < 0)
      {
        sub_223197FA4(v72, *(void **)a4, *(_QWORD *)(a4 + 8));
      }
      else
      {
        *(_OWORD *)v72 = *(_OWORD *)a4;
        v73 = *(_QWORD *)(a4 + 16);
      }
      v74 = 1;
      v62 = operator new();
      *(_BYTE *)v62 = 0;
      *(_DWORD *)(v62 + 128) = -1;
      v63 = *(unsigned int *)(v59 + 128);
      if ((_DWORD)v63 != -1)
      {
        ((void (*)(__int128 *, uint64_t, uint64_t))off_24EC6BD10[v63])(&v78, v62, v59);
        *(_DWORD *)(v62 + 128) = v63;
      }
      *(_BYTE *)(v62 + 136) = *(_BYTE *)(v59 + 136);
      if (v74)
      {
        v64 = v72[0];
        v65 = SHIBYTE(v73);
        v72[1] = 0;
        v73 = 0;
        v72[0] = 0;
        if (v65 < 0)
          operator delete(v64);
      }
      MEMORY[0x227684CE8](v62, 0x1000C4072FAA15ELL);
      if (v74 && SHIBYTE(v73) < 0)
        operator delete(v72[0]);
      MEMORY[0x227684CE8](v59, 0x1000C4072FAA15ELL);
    }
  }
  kdebug_trace();
  if (SHIBYTE(info.__r_.__value_.__r.__words[2]) < 0)
    operator delete(info.__r_.__value_.__l.__data_);
}

void sub_22373C128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, int a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,char a60)
{
  __cxa_guard_abort(&qword_255795560);
  if (a13 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  sub_2231874DC((uint64_t)&a29);
  if (a41 < 0)
    operator delete(a36);
  _Unwind_Resume(a1);
}

void sub_22373C358(float32x2_t *a1, const void **a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  std::mutex *v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  void *v12;
  uint64_t v13;
  char v14;
  char v15;
  unsigned __int8 v16;
  unint64_t v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  uint64_t v21;
  float32x2_t v22;
  _OWORD *v23;
  double v24;
  __int128 v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float32x2_t *v33;
  float32x2_t v34;
  double v35;
  __int128 v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  _OWORD *v44;
  __int128 v45;
  uint64_t v46;
  int32x2_t v47;
  float32x2_t v48;
  _QWORD *v49;
  float32x2_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  float32x2_t v57;
  uint64_t v58;
  int v59;
  std::string __p;
  _OWORD __src[64];
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v4 = sub_2241471F8();
    v5 = v4[2];
    if (!v5)
    {
      v6 = v4;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v5 = v6[2];
    }
    v7 = *(_QWORD *)(v5 + 64);
    v8 = (std::mutex *)(v7 + 32);
    std::mutex::lock((std::mutex *)(v7 + 32));
    v10 = *(_QWORD *)(v7 + 96);
    v9 = *(_QWORD *)(v7 + 104);
    std::mutex::unlock(v8);
    if (v10 != v9)
    {
      *(_QWORD *)&__src[0] = "cv3d.recon.";
      *((_QWORD *)&__src[0] + 1) = 11;
      v11 = (const void *)*((unsigned __int8 *)a2 + 23);
      if ((char)v11 >= 0)
        v12 = a2;
      else
        v12 = (void *)*a2;
      if ((char)v11 < 0)
        v11 = a2[1];
      *(_QWORD *)&__src[1] = v12;
      *((_QWORD *)&__src[1] + 1) = v11;
      sub_2231A9820((uint64_t)__src, (uint64_t)&__src[2], 0, 0, &__p);
      sub_2241471F8();
      v13 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      v15 = v14;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((v15 & 1) == 0)
          return;
      }
      else if ((v14 & 1) == 0)
      {
        return;
      }
      if (a1[57].i8[1])
        v16 = a1[57].u8[0];
      else
        v16 = -1;
      v17 = sub_22456636C((unsigned __int8 *)a1) % 0xFFuLL;
      v18 = atomic_load((unsigned __int8 *)&qword_255795018);
      if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_255795018))
      {
        bzero(__src, 0x3FCuLL);
        v46 = 0;
        v47 = (int32x2_t)0x100000000;
        v48 = (float32x2_t)vdup_n_s32(0x3E924745u);
        do
        {
          v49 = &__src[v46];
          v50 = vmul_f32(vcvt_f32_s32(v47), v48);
          v53 = v50.f32[0];
          v57 = vmul_f32(vcvt_f32_s32(vadd_s32(v47, (int32x2_t)0x200000002)), v48);
          v55 = fmodf(v50.f32[1], 1.0);
          *(float *)&v51 = fmodf(v53, 1.0);
          *((float *)&v51 + 1) = v55;
          v56 = v51;
          v54 = fmodf(v57.f32[1], 1.0);
          *(float *)&v52 = fmodf(v57.f32[0], 1.0);
          *((float *)&v52 + 1) = v54;
          *v49 = v56;
          v49[1] = v52;
          v47 = vadd_s32(v47, (int32x2_t)0x400000004);
          ++v46;
        }
        while (v46 != 63);
        *(_QWORD *)&__src[63] = 0x3E906F003F7F1400;
        DWORD2(__src[63]) = 1058102016;
        memcpy(dword_255794C18, __src, 0x3FCuLL);
        __cxa_guard_release(&qword_255795018);
      }
      v19 = dword_255794C18[(unsigned __int16)(2 * v17 + 85) % 0xFFu];
      v20 = dword_255794C18[(unsigned __int16)(3 * v17 + 170) % 0xFFu];
      LODWORD(v58) = dword_255794C18[v17];
      HIDWORD(v58) = v19;
      v59 = v20;
      if (a1[56].i8[0])
      {
        v21 = (uint64_t)a1[53];
        v22 = a1[54];
        sub_2245664AC((unsigned __int8 *)a1, __src);
        v23 = operator new(0x28uLL);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_2245C4640;
        v24 = *(double *)__src;
        v25 = __src[1];
        *v23 = __src[0];
        v23[1] = v25;
        *((_DWORD *)v23 + 8) = __src[2];
        *((_BYTE *)v23 + 36) = 0;
        sub_223739E78(0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)&v22 - v21) >> 3), v21, a1 + 5, (uint64_t)&__p, v16, (uint64_t)&v58, a2, v26, v24, *(double *)&v25, v27, v28, v29, v30, v31, v32, 0.0, 0);
      }
      else
      {
        if (!a1[48].i8[0])
        {
LABEL_24:
          sub_2245664AC((unsigned __int8 *)a1, __src);
          v44 = operator new(0x28uLL);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_2245C4640;
          v45 = __src[1];
          *v44 = __src[0];
          v44[1] = v45;
          *((_DWORD *)v44 + 8) = __src[2];
          *((_BYTE *)v44 + 36) = 0;
          sub_22373A3E0(a1 + 5, (uint64_t)&__p, a2, 0, 0);
          operator delete(v44);
          return;
        }
        v33 = (float32x2_t *)a1[45];
        v34 = a1[46];
        sub_2245664AC((unsigned __int8 *)a1, __src);
        v23 = operator new(0x28uLL);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_2245C4640;
        v35 = *(double *)__src;
        v36 = __src[1];
        *v23 = __src[0];
        v23[1] = v36;
        *((_DWORD *)v23 + 8) = __src[2];
        *((_BYTE *)v23 + 36) = 0;
        sub_223739844((uint64_t)(*(_QWORD *)&v34 - (_QWORD)v33) >> 3, v33, a1 + 5, (uint64_t)&__p, v16, &v58, a2, v37, v35, *(double *)&v36, v38, v39, v40, v41, v42, v43, 0.0, 0);
      }
      operator delete(v23);
      goto LABEL_24;
    }
  }
}

void sub_22373C824(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22373C838(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22373C84C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22373C860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_22373C888(unsigned __int8 ***a1, uint64_t *a2, uint64_t a3, float32x2_t *a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  std::mutex *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  int8x16_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x2_t v23;
  double v24;
  float32x2_t v25;
  double v26;
  double v27;
  unsigned __int8 **v28;
  float32x2_t v29;
  float32x2_t *v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 v33;
  int v34;
  int v35;
  float32x2_t *v36;
  unint64_t v37;
  float32x2_t v38;
  float32x2_t v39;
  uint64_t v40;
  const void *v41;
  int64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  int32x4_t *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  char *v66;
  void *v67;
  float32x2_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int32x2_t v73;
  _QWORD *v74;
  float32x2_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  float32x2_t *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  float v103;
  float v104;
  float v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  unint64_t v109;
  unsigned __int8 **v110;
  __int16 v111;
  float32x2_t v112;
  std::string v114;
  __int128 v115;
  void *__dst[2];
  char *v117;
  float32x2_t *v118[2];
  std::__shared_weak_count *v119;
  uint64_t v120;
  float32x2_t *v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  int v124;
  char v125;
  uint64_t v126;
  int v127;
  char *v128;
  char *v129;
  unint64_t v130;
  void *v131[2];
  char *v132;
  __int128 __p;
  uint64_t v134;
  _OWORD __src[64];
  uint64_t v136;

  v136 = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v9 = sub_2241471F8();
    v10 = v9[2];
    if (!v10)
    {
      v11 = v9;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v10 = v11[2];
    }
    v12 = *(_QWORD *)(v10 + 64);
    v13 = (std::mutex *)(v12 + 32);
    std::mutex::lock((std::mutex *)(v12 + 32));
    v15 = *(_QWORD *)(v12 + 96);
    v14 = *(_QWORD *)(v12 + 104);
    std::mutex::unlock(v13);
    if (v15 != v14)
    {
      *(_QWORD *)&__src[0] = "cv3d.recon.";
      *((_QWORD *)&__src[0] + 1) = 11;
      v16 = *((unsigned __int8 *)a2 + 23);
      if ((v16 & 0x80u) == 0)
        v17 = a2;
      else
        v17 = (uint64_t *)*a2;
      if ((v16 & 0x80u) != 0)
        v16 = a2[1];
      *(_QWORD *)&__src[1] = v17;
      *((_QWORD *)&__src[1] + 1) = v16;
      sub_2231A9820((uint64_t)__src, (uint64_t)&__src[2], 0, 0, &v114);
      sub_2241471F8();
      v18 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18))
      {
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18))
        {
          if (*(char *)(a3 + 23) < 0)
          {
            sub_223197FA4(__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
          }
          else
          {
            *(_OWORD *)__dst = *(_OWORD *)a3;
            v117 = *(char **)(a3 + 16);
          }
          *(_QWORD *)&v115 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v115 + 1) = 2;
          v19 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18))
          {
            v107 = v19;
            v108 = v18;
            sub_2241498F4((uint64_t)v118, 0);
            v28 = *a1;
            v110 = a1[1];
            if (*a1 != v110)
            {
              v29 = (float32x2_t)vdup_n_s32(0x3E924745u);
              do
              {
                v30 = (float32x2_t *)*v28;
                if ((*v28)[457])
                  v31 = v30[57].u8[0];
                else
                  v31 = 255;
                v32 = sub_22456636C(*v28);
                v33 = atomic_load((unsigned __int8 *)&qword_255795018);
                if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_255795018))
                {
                  v71 = v31;
                  bzero(__src, 0x3FCuLL);
                  v72 = 0;
                  v73 = (int32x2_t)0x100000000;
                  do
                  {
                    v74 = &__src[v72];
                    v75 = vmul_f32(vcvt_f32_s32(v73), v29);
                    v103 = v75.f32[0];
                    v112 = vmul_f32(vcvt_f32_s32(vadd_s32(v73, (int32x2_t)0x200000002)), v29);
                    v105 = fmodf(v75.f32[1], 1.0);
                    *(float *)&v76 = fmodf(v103, 1.0);
                    *((float *)&v76 + 1) = v105;
                    v106 = v76;
                    v104 = fmodf(v112.f32[1], 1.0);
                    *(float *)&v77 = fmodf(v112.f32[0], 1.0);
                    *((float *)&v77 + 1) = v104;
                    *v74 = v106;
                    v74[1] = v77;
                    v73 = vadd_s32(v73, (int32x2_t)0x400000004);
                    ++v72;
                  }
                  while (v72 != 63);
                  *(_QWORD *)&__src[63] = 0x3E906F003F7F1400;
                  DWORD2(__src[63]) = 1058102016;
                  memcpy(dword_255794C18, __src, 0x3FCuLL);
                  __cxa_guard_release(&qword_255795018);
                  v31 = v71;
                }
                v34 = dword_255794C18[(unsigned __int16)(2 * (v32 % 0xFF) + 85) % 0xFFu];
                v35 = dword_255794C18[(unsigned __int16)(3 * (v32 % 0xFF) + 170) % 0xFFu];
                LODWORD(v126) = dword_255794C18[v32 % 0xFF];
                HIDWORD(v126) = v34;
                v127 = v35;
                v36 = v30 + 5;
                sub_224003D34(v30 + 5, 0, (uint64_t)__src);
                sub_22414E9E0((uint64_t)v118, (uint64_t)__src);
                sub_22316F8F4((uint64_t *)__src);
                if (v30[56].i8[0])
                {
                  v111 = v31;
                  v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v30[54] - *(_QWORD *)&v30[53]) >> 3);
                  v130 = 0;
                  v128 = 0;
                  v129 = 0;
                  sub_223725824((uint64_t)&v128, v37);
                  v39 = v30[53];
                  v38 = v30[54];
                  while (*(_QWORD *)&v39 != *(_QWORD *)&v38)
                  {
                    memset(__src, 0, 48);
                    if (__src == *(_OWORD **)&v39)
                    {
                      v44 = 0;
                      v45 = 0;
                      v43 = 0;
                    }
                    else
                    {
                      v41 = **(const void ***)&v39;
                      v40 = *(_QWORD *)(*(_QWORD *)&v39 + 8);
                      v42 = v40 - **(_QWORD **)&v39;
                      if (v40 == **(_QWORD **)&v39)
                      {
                        v44 = 0;
                        v43 = 0;
                      }
                      else
                      {
                        if (v42 < 0)
                          sub_22316E078();
                        v43 = (char *)operator new(v40 - **(_QWORD **)&v39);
                        *(_QWORD *)&__src[0] = v43;
                        *((_QWORD *)&__src[0] + 1) = v43;
                        v44 = &v43[8 * (v42 >> 3)];
                        *(_QWORD *)&__src[1] = v44;
                        v42 &= 0xFFFFFFFFFFFFFFF8;
                        memcpy(v43, v41, v42);
                      }
                      v45 = &v43[v42];
                    }
                    v131[0] = v43;
                    v131[1] = v45;
                    v132 = v44;
                    v134 = 0;
                    __p = 0uLL;
                    v46 = v129;
                    if ((unint64_t)v129 >= v130)
                    {
                      v47 = sub_2237259A4((void **)&v128, (uint64_t)v131);
                      v48 = __p;
                      v129 = v47;
                      if ((_QWORD)__p)
                      {
                        v49 = *((_QWORD *)&__p + 1);
                        v50 = (void *)__p;
                        if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
                        {
                          v51 = *((_QWORD *)&__p + 1);
                          do
                          {
                            v53 = *(void **)(v51 - 24);
                            v51 -= 24;
                            v52 = v53;
                            if (v53)
                            {
                              *(_QWORD *)(v49 - 16) = v52;
                              operator delete(v52);
                            }
                            v49 = v51;
                          }
                          while (v51 != v48);
                          v50 = (void *)__p;
                        }
                        *((_QWORD *)&__p + 1) = v48;
                        operator delete(v50);
                      }
                    }
                    else
                    {
                      *((_QWORD *)v129 + 2) = 0;
                      *((_QWORD *)v46 + 3) = 0;
                      *(_QWORD *)v46 = 0;
                      *((_QWORD *)v46 + 1) = 0;
                      *(_OWORD *)v46 = *(_OWORD *)v131;
                      *((_QWORD *)v46 + 2) = v132;
                      v131[1] = 0;
                      v131[0] = 0;
                      v132 = 0;
                      *((_QWORD *)v46 + 4) = 0;
                      *((_QWORD *)v46 + 5) = 0;
                      *(_OWORD *)(v46 + 24) = __p;
                      *((_QWORD *)v46 + 5) = v134;
                      __p = 0uLL;
                      v134 = 0;
                      v129 = v46 + 48;
                    }
                    if (v131[0])
                    {
                      v131[1] = v131[0];
                      operator delete(v131[0]);
                    }
                    *(_QWORD *)&v39 += 24;
                  }
                  v54 = v128;
                  v55 = v129;
                  sub_2241498F4((uint64_t)__src, 0);
                  if (v55 != v54)
                  {
                    v56 = 48 * ((v55 - v54) / 48);
                    v57 = (uint64_t)v54;
                    do
                    {
                      sub_223EC3B7C(v57, 0, (unint64_t *)v131);
                      v58 = (int32x4_t *)v131[0];
                      v59 = v131[1];
                      v132 = 0;
                      v131[0] = 0;
                      v131[1] = 0;
                      sub_223744DD8((unint64_t *)__src, (v59 - (_BYTE *)v58) >> 3, v58, v36);
                      if (v58)
                        operator delete(v58);
                      if (v131[0])
                      {
                        v131[1] = v131[0];
                        operator delete(v131[0]);
                      }
                      v57 += 48;
                      v56 -= 48;
                    }
                    while (v56);
                  }
                  sub_2237415E8((unint64_t)__src, v36, (uint64_t)&v126, v111 | 0x100);
                  sub_22414E9E0((uint64_t)v118, (uint64_t)__src);
                  sub_22316F8F4((uint64_t *)__src);
                  if (v54)
                  {
                    if (v55 != v54)
                    {
                      do
                      {
                        v60 = *((_QWORD *)v55 - 3);
                        if (v60)
                        {
                          v61 = *((_QWORD *)v55 - 2);
                          v62 = (void *)*((_QWORD *)v55 - 3);
                          if (v61 != v60)
                          {
                            v63 = *((_QWORD *)v55 - 2);
                            do
                            {
                              v65 = *(void **)(v63 - 24);
                              v63 -= 24;
                              v64 = v65;
                              if (v65)
                              {
                                *(_QWORD *)(v61 - 16) = v64;
                                operator delete(v64);
                              }
                              v61 = v63;
                            }
                            while (v63 != v60);
                            v62 = (void *)*((_QWORD *)v55 - 3);
                          }
                          *((_QWORD *)v55 - 2) = v60;
                          operator delete(v62);
                        }
                        v66 = v55 - 48;
                        v67 = (void *)*((_QWORD *)v55 - 6);
                        if (v67)
                        {
                          *((_QWORD *)v55 - 5) = v67;
                          operator delete(v67);
                        }
                        v55 -= 48;
                      }
                      while (v66 != v54);
                    }
                    operator delete(v54);
                  }
                }
                else if (v30[48].i8[0])
                {
                  v68 = (float32x2_t *)v30[45];
                  v69 = (uint64_t)(*(_QWORD *)&v30[46] - (_QWORD)v68) >> 3;
                  v123 = v126;
                  v124 = v127;
                  v125 = 1;
                  v70 = v109 & 0xFFFFFFFFFFFF0000 | v31 | 0x100;
                  sub_224003F18(v69, v68, v30 + 5, 1, (uint64_t)&v123, v70, (uint64_t)__src, v20);
                  v109 = v70;
                  sub_22414E9E0((uint64_t)v118, (uint64_t)__src);
                  sub_22316F8F4((uint64_t *)__src);
                }
                ++v28;
              }
              while (v28 != v110);
            }
            if (a5)
              sub_22414F498(v118, a4, (float32x4_t)v20, v21, v22, v23, v24, v25, v26, v27);
            *(_OWORD *)v131 = *(_OWORD *)__dst;
            v132 = v117;
            __dst[0] = 0;
            __dst[1] = 0;
            v117 = 0;
            LOBYTE(__p) = 1;
            sub_22329F414((uint64_t)v118, (__int128 *)v131, &v115, &v120);
            if ((_BYTE)__p && SHIBYTE(v132) < 0)
              operator delete(v131[0]);
            sub_22316F8F4((uint64_t *)v118);
            v78 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v108 + 56))(v108);
            v79 = *v78;
            v80 = (std::__shared_weak_count *)v78[1];
            if (v80)
            {
              p_shared_owners = (unint64_t *)&v80->__shared_owners_;
              do
                v82 = __ldxr(p_shared_owners);
              while (__stxr(v82 + 1, p_shared_owners));
            }
            v83 = v121;
            v84 = v122;
            v118[0] = (float32x2_t *)&off_24EC6A3B8;
            v118[1] = v121;
            v119 = v122;
            v122 = 0;
            v121 = 0;
            *(_QWORD *)&__src[0] = v79;
            *((_QWORD *)&__src[0] + 1) = v80;
            if (v80)
            {
              v85 = (unint64_t *)&v80->__shared_owners_;
              do
                v86 = __ldxr(v85);
              while (__stxr(v86 + 1, v85));
            }
            *(_QWORD *)&__src[1] = &off_24EC6A3B8;
            *((_QWORD *)&__src[1] + 1) = v83;
            *(_QWORD *)&__src[2] = v84;
            if (v84)
            {
              v87 = (unint64_t *)&v84->__shared_owners_;
              do
                v88 = __ldxr(v87);
              while (__stxr(v88 + 1, v87));
            }
            (*(void (**)(uint64_t *, _OWORD *))(*v107 + 16))(v107, __src);
            v89 = *(std::__shared_weak_count **)&__src[2];
            if (*(_QWORD *)&__src[2])
            {
              v90 = (unint64_t *)(*(_QWORD *)&__src[2] + 8);
              do
                v91 = __ldaxr(v90);
              while (__stlxr(v91 - 1, v90));
              if (!v91)
              {
                ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                std::__shared_weak_count::__release_weak(v89);
              }
            }
            v92 = (std::__shared_weak_count *)*((_QWORD *)&__src[0] + 1);
            if (*((_QWORD *)&__src[0] + 1))
            {
              v93 = (unint64_t *)(*((_QWORD *)&__src[0] + 1) + 8);
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 - 1, v93));
              if (!v94)
              {
                ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                std::__shared_weak_count::__release_weak(v92);
              }
            }
            v95 = v119;
            if (v119)
            {
              v96 = (unint64_t *)&v119->__shared_owners_;
              do
                v97 = __ldaxr(v96);
              while (__stlxr(v97 - 1, v96));
              if (!v97)
              {
                ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                std::__shared_weak_count::__release_weak(v95);
              }
            }
            if (v80)
            {
              v98 = (unint64_t *)&v80->__shared_owners_;
              do
                v99 = __ldaxr(v98);
              while (__stlxr(v99 - 1, v98));
              if (!v99)
              {
                ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                std::__shared_weak_count::__release_weak(v80);
              }
            }
            v100 = v122;
            if (v122)
            {
              v101 = (unint64_t *)&v122->__shared_owners_;
              do
                v102 = __ldaxr(v101);
              while (__stlxr(v102 - 1, v101));
              if (!v102)
              {
                ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                std::__shared_weak_count::__release_weak(v100);
              }
            }
          }
          if (SHIBYTE(v117) < 0)
            operator delete(__dst[0]);
        }
        kdebug_trace();
      }
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v114.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22373D32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char a43)
{
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;

  sub_2241231D8(v44);
  v46 = (std::__shared_weak_count *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  sub_2241231D8((uint64_t)&a43);
  if (v43)
  {
    v49 = (unint64_t *)&v43->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  sub_2241231D8((uint64_t)&STACK[0x260]);
  if (a41 < 0)
    operator delete(__p);
  sub_2231874DC((uint64_t)&a23);
  if (a33 < 0)
  {
    operator delete(a28);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_22373D744@<X0>(uint64_t *a1@<X0>, __int16 a2@<W1>, unint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  v5 = *a1;
  v6 = a1[1];
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  v11 = 0u;
  v10 = 1065353216;
  LODWORD(v12) = 1065353216;
  DWORD1(v13) = 1065353216;
  v15 = 1065353216;
  v8 = 0;
  v9 = 0;
  sub_2241498F4((uint64_t)a3, 0);
  for (; v5 != v6; v5 += 24)
    sub_223744DD8(a3, (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3, *(int32x4_t **)v5, (float32x2_t *)&v10);
  return sub_2237415E8((unint64_t)a3, (float32x2_t *)&v10, (uint64_t)&v8, a2);
}

void sub_22373D7F4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_22373D808(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_22373D81C(uint64_t a1, uint64_t a2, __int16 **a3, float32x2_t *a4, float32x2_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::mutex *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (**v22)();
  uint64_t v23;
  uint64_t *v24;
  const char **v25;
  const char *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::string v50;
  __int128 v51;
  void *__dst[2];
  uint64_t v53;
  uint64_t (**v54)();
  uint64_t v55;
  std::__shared_weak_count *v56;
  void *__p[2];
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  const char *v63;
  uint64_t v64;
  uint64_t (**v65)();
  uint64_t v66;
  _QWORD v67[46];

  v67[44] = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v14 = sub_2241471F8();
    v15 = v14[2];
    if (!v15)
    {
      v16 = v14;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v15 = v16[2];
    }
    v17 = *(_QWORD *)(v15 + 64);
    v18 = (std::mutex *)(v17 + 32);
    std::mutex::lock((std::mutex *)(v17 + 32));
    v20 = *(_QWORD *)(v17 + 96);
    v19 = *(_QWORD *)(v17 + 104);
    std::mutex::unlock(v18);
    if (v20 != v19)
    {
      v63 = "cv3d.recon.";
      v64 = 11;
      v21 = *(unsigned __int8 *)(a6 + 23);
      if ((v21 & 0x80u) == 0)
        v22 = (uint64_t (**)())a6;
      else
        v22 = *(uint64_t (***)())a6;
      if ((v21 & 0x80u) != 0)
        v21 = *(_QWORD *)(a6 + 8);
      v65 = v22;
      v66 = v21;
      sub_2231A9820((uint64_t)&v63, (uint64_t)v67, 0, 0, &v50);
      sub_2241471F8();
      v23 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23))
      {
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23))
        {
          if (*(char *)(a7 + 23) < 0)
          {
            sub_223197FA4(__dst, *(void **)a7, *(_QWORD *)(a7 + 8));
          }
          else
          {
            *(_OWORD *)__dst = *(_OWORD *)a7;
            v53 = *(_QWORD *)(a7 + 16);
          }
          *(_QWORD *)&v51 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v51 + 1) = 2;
          v24 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23))
          {
            sub_22373DE00(a1, a2, a3, a4, a5, 0x808080uLL, (uint64_t)&v63);
            *(_OWORD *)__p = *(_OWORD *)__dst;
            v58 = v53;
            __dst[1] = 0;
            v53 = 0;
            __dst[0] = 0;
            v59 = 1;
            sub_22329F414((uint64_t)&v63, (__int128 *)__p, &v51, &v60);
            if (v59 && SHIBYTE(v58) < 0)
              operator delete(__p[0]);
            sub_22316F8F4((uint64_t *)&v63);
            v25 = (const char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 56))(v23);
            v26 = *v25;
            v27 = (std::__shared_weak_count *)v25[1];
            if (v27)
            {
              p_shared_owners = (unint64_t *)&v27->__shared_owners_;
              do
                v29 = __ldxr(p_shared_owners);
              while (__stxr(v29 + 1, p_shared_owners));
            }
            v31 = v61;
            v30 = v62;
            v54 = &off_24EC6A3B8;
            v55 = v61;
            v56 = v62;
            v61 = 0;
            v62 = 0;
            v63 = v26;
            v64 = (uint64_t)v27;
            if (v27)
            {
              v32 = (unint64_t *)&v27->__shared_owners_;
              do
                v33 = __ldxr(v32);
              while (__stxr(v33 + 1, v32));
            }
            v65 = &off_24EC6A3B8;
            v66 = v31;
            v67[0] = v30;
            if (v30)
            {
              v34 = (unint64_t *)&v30->__shared_owners_;
              do
                v35 = __ldxr(v34);
              while (__stxr(v35 + 1, v34));
            }
            (*(void (**)(uint64_t *, const char **))(*v24 + 16))(v24, &v63);
            v36 = (std::__shared_weak_count *)v67[0];
            if (v67[0])
            {
              v37 = (unint64_t *)(v67[0] + 8);
              do
                v38 = __ldaxr(v37);
              while (__stlxr(v38 - 1, v37));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v36);
              }
            }
            v39 = (std::__shared_weak_count *)v64;
            if (v64)
            {
              v40 = (unint64_t *)(v64 + 8);
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
            v42 = v56;
            if (v56)
            {
              v43 = (unint64_t *)&v56->__shared_owners_;
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
            if (v27)
            {
              v45 = (unint64_t *)&v27->__shared_owners_;
              do
                v46 = __ldaxr(v45);
              while (__stlxr(v46 - 1, v45));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }
            v47 = v62;
            if (v62)
            {
              v48 = (unint64_t *)&v62->__shared_owners_;
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
          }
          if (SHIBYTE(v53) < 0)
            operator delete(__dst[0]);
        }
        kdebug_trace();
      }
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22373DCE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char a42,std::__shared_weak_count *a43)
{
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;

  sub_2241231D8(v44);
  v46 = a43;
  if (a43)
  {
    p_shared_owners = (unint64_t *)&a43->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  sub_2241231D8((uint64_t)&a28);
  if (v43)
  {
    v49 = (unint64_t *)&v43->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  sub_2241231D8((uint64_t)&a39);
  if (a27 < 0)
    operator delete(__p);
  sub_2231874DC((uint64_t)&a9);
  if (a19 < 0)
    operator delete(a14);
  _Unwind_Resume(a1);
}

void sub_22373DE00(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 **a3@<X2>, float32x2_t *a4@<X3>, float32x2_t *a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  float32x4_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _WORD *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  int8x8_t v37;
  uint64_t v38;
  float32x2_t v39;
  unint64_t v40;
  float32x2_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  __int16 **v45;
  uint64_t v46;
  __int16 **v47;
  int v48;
  uint64_t v49;
  float32x2_t v50;
  unsigned __int8 v51;
  __int16 *v52;
  __int16 *v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int v57;
  float *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  float *v62;
  unint64_t v63;
  float *v64;
  float *v65;
  unint64_t v66;
  int v67;
  int32x2_t v68;
  uint64_t i;
  float32x2_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  int v75;
  _WORD *v76;
  float32x2_t v78;
  int8x16_t v83;
  float32x2_t v84;
  float32x4_t v85;
  float32x4_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  __int16 **v106;
  __int16 **v107;
  _WORD *v108;
  uint64_t v109;
  uint64_t v110;
  float v111;
  float v112;
  int v113;
  float v114;
  uint64_t v115;
  _WORD *v116;
  uint64_t *v117;
  float32x4_t v118;
  float32x2_t v119;
  float v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t __src[129];

  sub_2241498F4(a7, 0);
  sub_22339E3C8(a7, (*(_DWORD *)(a1 + 36) * *(_DWORD *)(a1 + 32)));
  v18 = *(_QWORD *)(a1 + 8);
  v106 = a3;
  if (v18)
  {
    v19 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v19)
      goto LABEL_87;
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    v18 = *(_QWORD *)(a1 + 8);
    v23 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v23)
      goto LABEL_87;
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    do
      v26 = __ldaxr(v24);
    while (__stlxr(v26 - 1, v24));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if (*(_BYTE *)(a1 + 49))
      {
LABEL_14:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v18 + 96))(&v121, v18, 0);
        v104 = a6;
        v105 = a2;
        v28 = *(_WORD **)(a1 + 24);
        v27 = *(_QWORD *)(a1 + 32);
        v29 = HIDWORD(v27);
        if (!*(_BYTE *)(a1 + 48))
          goto LABEL_26;
        goto LABEL_18;
      }
    }
    else
    {
LABEL_87:
      if (*(_BYTE *)(a1 + 49))
        goto LABEL_14;
    }
  }
  v121 = 0;
  v104 = a6;
  v105 = a2;
  v28 = *(_WORD **)(a1 + 24);
  v27 = *(_QWORD *)(a1 + 32);
  v29 = HIDWORD(v27);
  if (!*(_BYTE *)(a1 + 48))
    goto LABEL_26;
LABEL_18:
  if (v28)
  {
    v30 = *(_QWORD *)(a1 + 8);
    v31 = *(std::__shared_weak_count **)(a1 + 16);
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      do
        v34 = __ldaxr(v32);
      while (__stlxr(v34 - 1, v32));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v30 + 88))(v30, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v28 = *(_WORD **)(a1 + 24);
    LODWORD(v29) = *(_DWORD *)(a1 + 36);
  }
LABEL_26:
  v103 = a1;
  v109 = *(unsigned int *)(a1 + 44);
  v35 = v109 * v29;
  if (v35)
    _ZF = v27 == 0;
  else
    _ZF = 1;
  if (!_ZF)
  {
    v73 = 0;
    v108 = &v28[v35];
    v74 = *(_QWORD *)(a7 + 8);
    do
    {
      v75 = 0;
      v76 = &v28[v27];
      v113 = v73;
      v120 = (float)v73;
      v116 = v28;
      do
      {
        while (1)
        {
          _H0 = *v28;
          v14.f32[0] = (float)v75;
          v14.f32[1] = v120;
          v78 = a4[4];
          *(float32x2_t *)v14.f32 = vadd_f32(vmul_f32(v78, *(float32x2_t *)v14.f32), a4[5]);
          v14.i32[2] = 1.0;
          __asm { FCVT            S0, H0 }
          v83 = (int8x16_t)vmulq_n_f32(v14, _S0);
          v78.i32[0] = a5[1].i32[0];
          v15 = a5[2];
          v16.i32[0] = a5[3].i32[0];
          v17.i32[0] = a5[5].i32[0];
          *(float32x2_t *)v14.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*a5, *(float *)v83.i32), v15, *(float32x2_t *)v83.i8, 1), a5[4], (float32x4_t)v83, 2);
          v84 = vmla_lane_f32(vmul_f32(v78, *(float32x2_t *)v83.i8), v16, *(float32x2_t *)v83.i8, 1);
          v85 = (float32x4_t)vextq_s8(v83, v83, 8uLL);
          *(float32x2_t *)&v14.u32[2] = vmla_f32(v84, *(float32x2_t *)v85.f32, v17);
          *(float32x2_t *)v85.f32 = a5[6];
          v85.i32[2] = a5[7].i32[0];
          v86 = vaddq_f32(v85, v14);
          v87 = *(_QWORD *)(a7 + 16);
          if (v74 >= v87)
            break;
          *(_DWORD *)(v74 + 8) = v86.i32[2];
          *(_QWORD *)v74 = v86.i64[0];
          v74 += 12;
          *(_QWORD *)(a7 + 8) = v74;
          ++v28;
          ++v75;
          if (v28 == v76)
            goto LABEL_60;
        }
        v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74 - *(_QWORD *)a7) >> 2);
        v89 = v88 + 1;
        if (v88 + 1 > 0x1555555555555555)
          sub_22316E078();
        v90 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v87 - *(_QWORD *)a7) >> 2);
        if (2 * v90 > v89)
          v89 = 2 * v90;
        if (v90 >= 0xAAAAAAAAAAAAAAALL)
          v91 = 0x1555555555555555;
        else
          v91 = v89;
        if (v91)
        {
          v118 = v86;
          LODWORD(v122) = v91;
          v92 = *(unsigned int *)(a7 + 28);
          if ((_DWORD)v92 == -1)
            sub_22316DD70();
          __src[0] = (uint64_t)&v122;
          v93 = ((uint64_t (*)(uint64_t *, uint64_t))off_24EC58150[v92])(__src, a7 + 24);
          v86 = v118;
        }
        else
        {
          v93 = 0;
          v94 = 0;
        }
        v95 = v93 + 12 * v88;
        *(_QWORD *)v95 = v86.i64[0];
        *(_DWORD *)(v95 + 8) = v86.i32[2];
        v97 = *(_QWORD *)a7;
        v96 = *(_QWORD *)(a7 + 8);
        v98 = v95;
        if (v96 != *(_QWORD *)a7)
        {
          do
          {
            v99 = *(_QWORD *)(v96 - 12);
            v96 -= 12;
            v100 = *(_DWORD *)(v96 + 8);
            *(_QWORD *)(v98 - 12) = v99;
            v98 -= 12;
            *(_DWORD *)(v98 + 8) = v100;
          }
          while (v96 != v97);
          v96 = *(_QWORD *)a7;
        }
        v74 = v95 + 12;
        *(_QWORD *)a7 = v98;
        *(_QWORD *)(a7 + 8) = v95 + 12;
        v101 = *(_QWORD *)(a7 + 16);
        *(_QWORD *)(a7 + 16) = v93 + 12 * v94;
        if (v96)
        {
          __src[0] = v96;
          LODWORD(__src[1]) = -1431655765 * ((unint64_t)(v101 - v96) >> 2);
          v102 = *(unsigned int *)(a7 + 28);
          if ((_DWORD)v102 == -1)
            sub_22316DD70();
          v122 = __src;
          ((void (*)(uint64_t **, uint64_t))off_24EC58160[v102])(&v122, a7 + 24);
        }
        *(_QWORD *)(a7 + 8) = v74;
        ++v28;
        ++v75;
      }
      while (v28 != v76);
LABEL_60:
      v28 = &v116[v109];
      v73 = v113 + 1;
    }
    while (v28 != v108);
  }
  v37 = (int8x8_t)vmovn_s64((int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v104), (uint64x2_t)xmmword_22464C750));
  v38 = v121;
  v121 = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = (float32x2_t)vdup_n_s32(0x437F0000u);
  *(_DWORD *)(a7 + 64) = 1;
  v40 = (*(_DWORD *)(v103 + 36) * *(_DWORD *)(v103 + 32));
  v41 = vcvt_f32_u32((uint32x2_t)vand_s8(v37, (int8x8_t)0xFF000000FFLL));
  *(float *)__src = (float)v104 / 255.0;
  *(float32x2_t *)((char *)__src + 4) = vdiv_f32(v41, v39);
  v42 = *(_QWORD *)(a7 + 32);
  v43 = (_QWORD *)(a7 + 32);
  v44 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a7 + 40) - v42) >> 2);
  v45 = v106;
  if (v40 <= v44)
  {
    if (v40 < v44)
      *(_QWORD *)(a7 + 40) = v42 + 12 * v40;
  }
  else
  {
    sub_2235341F4(a7 + 32, v40 - v44, __src);
  }
  if (v105)
  {
    v46 = 0;
    v47 = &v106[11 * v105];
    v48 = *(__int16 *)(v103 + 32);
    v49 = 0x100000000;
    v50 = (float32x2_t)vdup_n_s32(0x3E924745u);
    while (1)
    {
      v51 = atomic_load((unsigned __int8 *)&qword_255795018);
      if ((v51 & 1) == 0)
      {
        v110 = v49;
        v67 = __cxa_guard_acquire(&qword_255795018);
        v49 = v110;
        if (v67)
        {
          v107 = v45;
          v68 = (int32x2_t)v110;
          bzero(__src, 0x3FCuLL);
          for (i = 0; i != 126; i += 2)
          {
            v117 = &__src[i];
            v70 = vmul_f32(vcvt_f32_s32(v68), v50);
            v111 = v70.f32[0];
            v119 = vmul_f32(vcvt_f32_s32(vadd_s32(v68, (int32x2_t)0x200000002)), v50);
            v114 = fmodf(v70.f32[1], 1.0);
            *(float *)&v71 = fmodf(v111, 1.0);
            *((float *)&v71 + 1) = v114;
            v115 = v71;
            v112 = fmodf(v119.f32[1], 1.0);
            *(float *)&v72 = fmodf(v119.f32[0], 1.0);
            *((float *)&v72 + 1) = v112;
            *v117 = v115;
            v117[1] = v72;
            v68 = vadd_s32(v68, (int32x2_t)0x400000004);
          }
          __src[126] = 0x3E906F003F7F1400;
          LODWORD(__src[127]) = 1058102016;
          memcpy(dword_255794C18, __src, 0x3FCuLL);
          __cxa_guard_release(&qword_255795018);
          v49 = v110;
          v45 = v107;
        }
      }
      v39.i32[0] = 0.5;
      v41.i32[0] = 0.5;
      v15.i32[0] = 0.5;
      if (v46 != 255)
      {
        v39.i32[0] = dword_255794C18[v46];
        v41.i32[0] = dword_255794C18[(unsigned __int16)(2 * v46 + 85) % 0xFFu];
        v15.i32[0] = dword_255794C18[(unsigned __int16)(3 * v46 + 170) % 0xFFu];
      }
      v52 = *v45;
      v53 = v45[1];
      if (*v45 != v53)
        break;
LABEL_39:
      v45 += 11;
      v46 = (v46 + 1);
      if (v45 == v47)
        return;
    }
    v54 = vdupq_lane_s32((int32x2_t)v39, 0);
    v55 = vdupq_lane_s32((int32x2_t)v41, 0);
    v56 = vdupq_lane_s32((int32x2_t)v15, 0);
    while (1)
    {
      v57 = v48 * *v52;
      v58 = (float *)(*v43 + 12 * (v57 + v52[1]));
      v59 = *v43 + 12 * (v57 + v52[2] + 1) - (_QWORD)v58;
      if ((uint64_t)v59 >= 1)
      {
        v60 = v59 / 0xC;
        v61 = v59 / 0xC - (v59 > 0xB) + 1;
        if (v61 >= 8)
        {
          v60 -= v61 & 0xFFFFFFFFFFFFFFF8;
          v62 = &v58[3 * (v61 & 0xFFFFFFFFFFFFFFF8)];
          v63 = v61 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v64 = v58 + 24;
            vst3q_f32(v58, *(float32x4x3_t *)v54.i8);
            v65 = v58 + 12;
            vst3q_f32(v65, *(float32x4x3_t *)v54.i8);
            v58 = v64;
            v63 -= 8;
          }
          while (v63);
          if (v61 == (v61 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_45;
        }
        else
        {
          v62 = v58;
        }
        v66 = v60 + 1;
        do
        {
          *v62 = v39.f32[0];
          v62[1] = v41.f32[0];
          v62[2] = v15.f32[0];
          --v66;
          v62 += 3;
        }
        while (v66 > 1);
      }
LABEL_45:
      v52 += 4;
      if (v52 == v53)
        goto LABEL_39;
    }
  }
}

void sub_22373E5E4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_22373E604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t *v26;

  if (a26)
    (*(void (**)(uint64_t))(*(_QWORD *)a26 + 8))(a26);
  sub_22316F8F4(v26);
  _Unwind_Resume(a1);
}

void sub_22373E638(uint64_t **a1, void **a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  std::mutex *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  float32x2_t v17;
  unsigned __int8 *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  __int16 v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  char *v43;
  char *v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  __int16 v51;
  __int16 v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned __int8 v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int v61;
  __int16 *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  __int16 v70;
  int v71;
  unint64_t v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unsigned __int8 v80;
  unsigned __int8 *v81;
  BOOL v82;
  uint64_t v83;
  uint64_t i;
  unsigned __int8 v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  char *v89;
  BOOL v90;
  char v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  int32x2_t v103;
  void **v104;
  float32x2_t v105;
  void *v106;
  void *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  void *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  void *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  unsigned int v150;
  float v151;
  float v152;
  uint64_t v153;
  char *__p;
  __int16 *v155;
  int v156;
  uint64_t v157;
  __int16 v158;
  float v159;
  void *v160;
  int v161;
  int32x2_t v162;
  __int16 *v163;
  __int16 *v164;
  float32x2_t v165;
  std::string v166;
  __int128 v167;
  uint64_t (**v168)();
  uint64_t v169;
  std::__shared_weak_count *v170;
  uint64_t v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  uint64_t (**v174)();
  uint64_t v175;
  std::__shared_weak_count *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int16 v180;
  __int128 v181;
  std::__shared_weak_count *v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int16 v186;
  _QWORD v187[2];
  void *__src[131];

  __src[128] = *(void **)MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v4 = sub_2241471F8();
    v5 = v4[2];
    if (!v5)
    {
      v6 = v4;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v5 = v6[2];
    }
    v7 = *(_QWORD *)(v5 + 64);
    v8 = (std::mutex *)(v7 + 32);
    std::mutex::lock((std::mutex *)(v7 + 32));
    v10 = *(_QWORD *)(v7 + 96);
    v9 = *(_QWORD *)(v7 + 104);
    std::mutex::unlock(v8);
    if (v10 != v9)
    {
      __src[0] = "cv3d.recon.";
      __src[1] = (void *)11;
      v11 = (void *)*((unsigned __int8 *)a2 + 23);
      if ((char)v11 >= 0)
        v12 = a2;
      else
        v12 = *a2;
      if ((char)v11 < 0)
        v11 = a2[1];
      __src[2] = v12;
      __src[3] = v11;
      sub_2231A9820((uint64_t)__src, (uint64_t)&__src[4], 0, 0, &v166);
      sub_2241471F8();
      v13 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13))
      {
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13))
        {
          *(_QWORD *)&v167 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v167 + 1) = 2;
          v142 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13))
          {
            v14 = a1[1];
            if (*a1 == v14)
            {
              __src[0] = (void *)0x100000001;
              LOBYTE(v181) = 0;
              v168 = &off_24EC21B18;
              sub_2233B32D0(__src, &v181, &v169);
            }
            else
            {
              sub_22374585C(*a1, v14, 126 - 2 * __clz(v14 - *a1), 1);
              LODWORD(v15) = vcvtpd_u64_f64(sqrt((double)(unint64_t)(a1[1] - *a1)));
              v145 = v15;
              v146 = *(_QWORD *)(**a1 + 136);
              LODWORD(__src[0]) = v15 * v146;
              HIDWORD(__src[0]) = v15 * HIDWORD(v146);
              LOBYTE(v181) = 10;
              v168 = &off_24EC21B18;
              sub_2233B32D0(__src, &v181, &v169);
              v148 = *a1;
              v144 = a1[1];
              if (*a1 != v144)
              {
                v16 = 0;
                v17 = (float32x2_t)vdup_n_s32(0x3E924745u);
                v18 = (unsigned __int8 *)&qword_255795680;
                v143 = v13;
                do
                {
                  v187[0] = ((v16 % v145) * v146) | (v16
                                                                               / v145
                                                                               * (v146 & 0xFFFFFFFF00000000));
                  v187[1] = v146;
                  __src[0] = &off_24EC232F0;
                  sub_223416D28((uint64_t)&v168, (uint64_t *)&__src[1]);
                  v147 = v16;
                  *(_QWORD *)&v181 = &off_24EC232F0;
                  sub_2237467C8((uint64_t)__src, v187, (uint64_t)&v181 + 8);
                  v19 = (std::__shared_weak_count *)__src[2];
                  if (!__src[2])
                    goto LABEL_22;
                  v20 = (unint64_t *)((char *)__src[2] + 8);
                  do
                    v21 = __ldaxr(v20);
                  while (__stlxr(v21 - 1, v20));
                  if (!v21)
                  {
                    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                    std::__shared_weak_count::__release_weak(v19);
                    v174 = &off_24EC232F0;
                    v22 = *((_QWORD *)&v181 + 1);
                    v23 = v182;
                    if (!v182)
                    {
LABEL_37:
                      v175 = v22;
                      v176 = 0;
                      v177 = v183;
                      v178 = v184;
                      v179 = v185;
                      v180 = v186;
                      goto LABEL_38;
                    }
                  }
                  else
                  {
LABEL_22:
                    v174 = &off_24EC232F0;
                    v22 = *((_QWORD *)&v181 + 1);
                    v23 = v182;
                    if (!v182)
                      goto LABEL_37;
                  }
                  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
                  do
                    v25 = __ldxr(p_shared_owners);
                  while (__stxr(v25 + 1, p_shared_owners));
                  v26 = v186;
                  do
                    v27 = __ldxr(p_shared_owners);
                  while (__stxr(v27 + 1, p_shared_owners));
                  v177 = v183;
                  v178 = v184;
                  v179 = v185;
                  do
                    v28 = __ldxr(p_shared_owners);
                  while (__stxr(v28 + 1, p_shared_owners));
                  v175 = v22;
                  v176 = v23;
                  v180 = v26;
                  do
                    v29 = __ldaxr(p_shared_owners);
                  while (__stlxr(v29 - 1, p_shared_owners));
                  if (!v29)
                  {
                    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                    std::__shared_weak_count::__release_weak(v23);
                  }
                  do
                    v30 = __ldaxr(p_shared_owners);
                  while (__stlxr(v30 - 1, p_shared_owners));
                  if (!v30)
                  {
                    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                    std::__shared_weak_count::__release_weak(v23);
                  }
LABEL_38:
                  v31 = *(_QWORD *)(*v148 + 208);
                  v32 = *(_QWORD *)(*v148 + 216);
                  LOWORD(__src[0]) = 128;
                  BYTE2(__src[0]) = 0;
                  sub_2237039AC((uint64_t)&v174, (__int16 *)__src);
                  if (v31 != v32)
                  {
                    v33 = 0;
                    v149 = v32;
                    while (1)
                    {
                      memset(__src, 0, 24);
                      v35 = *(_BYTE **)(v31 + 264);
                      v34 = *(_BYTE **)(v31 + 272);
                      v36 = v34 - v35;
                      if (v34 == v35)
                      {
                        v163 = 0;
                        v155 = 0;
                      }
                      else
                      {
                        if (v36 < 0)
                          sub_2236EA0B4();
                        __src[0] = operator new(v34 - v35);
                        __src[1] = __src[0];
                        v37 = (char *)__src[0] + 8 * (v36 >> 3);
                        __src[2] = v37;
                        v155 = (__int16 *)__src[0];
                        memcpy(__src[0], v35, v36 - 2);
                        v163 = (__int16 *)v37;
                        __src[1] = v37;
                      }
                      LODWORD(__src[3]) = *(_DWORD *)(v31 + 288);
                      memset(&__src[4], 0, 24);
                      v39 = *(char **)(v31 + 296);
                      v38 = *(char **)(v31 + 304);
                      v40 = v38 - v39;
                      if (v38 != v39)
                        break;
                      __p = 0;
                      v46 = v176;
                      if (!v176)
                      {
LABEL_63:
                        v157 = v177;
                        v50 = *(_QWORD *)((char *)&v178 + 4);
                        v51 = v179;
                        v52 = WORD2(v179);
                        v156 = HIDWORD(v179);
                        goto LABEL_64;
                      }
LABEL_51:
                      v47 = (unint64_t *)&v46->__shared_owners_;
                      do
                        v48 = __ldxr(v47);
                      while (__stxr(v48 + 1, v47));
                      do
                        v49 = __ldxr(v47);
                      while (__stxr(v49 + 1, v47));
                      v157 = v177;
                      v50 = *(_QWORD *)((char *)&v178 + 4);
                      v51 = v179;
                      v52 = WORD2(v179);
                      v156 = HIDWORD(v179);
                      do
                        v53 = __ldxr(v47);
                      while (__stxr(v53 + 1, v47));
                      do
                        v54 = __ldaxr(v47);
                      while (__stlxr(v54 - 1, v47));
                      if (!v54)
                      {
                        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                        std::__shared_weak_count::__release_weak(v46);
                      }
                      do
                        v55 = __ldaxr(v47);
                      while (__stlxr(v55 - 1, v47));
                      if (!v55)
                      {
                        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                        std::__shared_weak_count::__release_weak(v46);
                      }
LABEL_64:
                      v56 = atomic_load((unsigned __int8 *)&qword_255795018);
                      if ((v56 & 1) == 0 && __cxa_guard_acquire(&qword_255795018))
                      {
                        bzero(__src, 0x3FCuLL);
                        v102 = 0;
                        v103 = (int32x2_t)0x100000000;
                        do
                        {
                          v162 = v103;
                          v104 = &__src[v102];
                          v105 = vmul_f32(vcvt_f32_s32(v103), v17);
                          v151 = v105.f32[0];
                          v165 = vmul_f32(vcvt_f32_s32(vadd_s32(v103, (int32x2_t)0x200000002)), v17);
                          v159 = fmodf(v105.f32[1], 1.0);
                          *(float *)&v106 = fmodf(v151, 1.0);
                          *((float *)&v106 + 1) = v159;
                          v160 = v106;
                          v152 = fmodf(v165.f32[1], 1.0);
                          *(float *)&v107 = fmodf(v165.f32[0], 1.0);
                          *((float *)&v107 + 1) = v152;
                          *v104 = v160;
                          v104[1] = v107;
                          v103 = vadd_s32(v162, (int32x2_t)0x400000004);
                          v102 += 2;
                        }
                        while (v102 != 126);
                        __src[126] = (void *)0x3E906F003F7F1400;
                        LODWORD(__src[127]) = 1058102016;
                        memcpy(dword_255794C18, __src, 0x3FCuLL);
                        __cxa_guard_release(&qword_255795018);
                      }
                      v153 = v31;
                      if (((v33 + 1) & 0x100) != 0)
                      {
                        v57 = 128;
                        v58 = 128;
                        v59 = 128;
                        if (v155 == v163)
                          goto LABEL_110;
                      }
                      else
                      {
                        v57 = vcvts_n_s32_f32(*(float *)&dword_255794C18[v33], 8uLL);
                        v58 = vcvts_n_s32_f32(*(float *)&dword_255794C18[(unsigned __int16)(2 * v33+ 85- 255* ((unsigned __int16)((1029* (2 * v33+ 85)) >> 16) >> 2))], 8uLL);
                        v59 = vcvts_n_s32_f32(*(float *)&dword_255794C18[(unsigned __int16)(3 * v33+ 170- 255* ((unsigned __int16)((2057* (3 * v33+ 170)) >> 16) >> 3))], 8uLL);
                        if (v155 == v163)
                          goto LABEL_110;
                      }
                      v60 = (v58 << 8) | (v59 << 16) | v57;
                      v161 = v52;
                      v158 = v51 - 1;
                      if (v50 >= 0)
                        v61 = HIDWORD(v50);
                      else
                        v61 = -HIDWORD(v50);
                      v150 = v61;
                      v62 = v155;
                      do
                      {
                        v164 = v62;
                        if ((*v62 & 0x80000000) == 0)
                        {
                          v63 = (unsigned __int16)*v62;
                          if (v161 > v63)
                          {
                            v64 = v62[1] & ~(v62[1] >> 31);
                            v65 = v62[2];
                            v66 = v65 >= v158 ? v158 : v65;
                            if (v64 <= v66)
                            {
                              v67 = v157 + (v156 * v63);
                              if (v157)
                              {
                                v68 = (__int16)(v66 + 1);
                                v69 = (__int16)(v64 + 1);
                                if (v68 <= v69)
                                  v70 = v64 + 1;
                                else
                                  v70 = v66 + 1;
                                v71 = (unsigned __int16)(v70 + ~(_WORD)v64);
                                if (!v71)
                                  goto LABEL_204;
                                if (v68 <= v69)
                                  LOWORD(v68) = v64 + 1;
                                v72 = v150 * (unint64_t)(unsigned __int16)(v68 - 1 - v64);
                                if (v64 > (__int16)(v68 - 1))
                                  goto LABEL_204;
                                if (v72 > ((HIDWORD(v50) * (unsigned __int16)v64) ^ ~(v50 >> 63)))
                                  goto LABEL_204;
                                if ((v72 & 0xFFFFFFFF00000000) != 0)
                                  goto LABEL_204;
                                v73 = 0;
                                v74 = v71 + 1;
                                v75 = v74 & 0x1FFFE;
                                do
                                {
                                  v76 = v67 + (HIDWORD(v50) * (__int16)(v64 + v73));
                                  v77 = v67 + (HIDWORD(v50) * (__int16)(v64 + v73 + 1));
                                  *(_BYTE *)(v76 + 2) = BYTE2(v60);
                                  *(_WORD *)v76 = v60;
                                  *(_BYTE *)(v77 + 2) = BYTE2(v60);
                                  *(_WORD *)v77 = v60;
                                  v73 += 2;
                                }
                                while (v75 != v73);
                                LOWORD(v64) = v64 + v75;
                                if (v74 != v75)
                                {
LABEL_204:
                                  do
                                  {
                                    v78 = v67 + (HIDWORD(v50) * (__int16)v64);
                                    *(_BYTE *)(v78 + 2) = BYTE2(v60);
                                    *(_WORD *)v78 = v60;
                                    v64 = (__int16)(v64 + 1);
                                  }
                                  while (v64 <= (__int16)v66);
                                }
                              }
                              else
                              {
                                do
                                {
                                  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2245AAA31, 0, (void (*)(void **))sub_22457406C);
                                  v79 = v46;
                                  v80 = atomic_load(v18);
                                  if ((v80 & 1) == 0 && __cxa_guard_acquire((__guard *)v18))
                                  {
                                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                                    __cxa_guard_release((__guard *)v18);
                                  }
                                  v81 = v18;
                                  if (byte_255795670)
                                    v82 = byte_255795678 == 0;
                                  else
                                    v82 = 0;
                                  if (!v82)
                                  {
                                    v83 = qword_255795648;
                                    for (i = qword_255795650; v83 != i; v83 += 16)
                                      (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v83)(*(_QWORD *)(v83 + 8), "ptr != nullptr || size == 0", 27, &unk_2245AAA31, 0);
                                  }
                                  v18 = v81;
                                  v85 = atomic_load(v81);
                                  if ((v85 & 1) == 0 && __cxa_guard_acquire((__guard *)v81))
                                  {
                                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                                    __cxa_guard_release((__guard *)v81);
                                  }
                                  v46 = v79;
                                  if (!byte_255795670)
                                    abort();
                                  qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, &unk_2245AAA31, 0);
                                  v86 = v67 + (HIDWORD(v50) * (__int16)v64);
                                  *(_BYTE *)(v86 + 2) = BYTE2(v60);
                                  *(_WORD *)v86 = v60;
                                  v64 = (__int16)(v64 + 1);
                                }
                                while (v64 <= (__int16)v66);
                              }
                            }
                          }
                        }
                        v62 = v164 + 4;
                      }
                      while (v164 + 4 != v163);
LABEL_110:
                      if (v46)
                      {
                        v87 = (unint64_t *)&v46->__shared_owners_;
                        do
                          v88 = __ldaxr(v87);
                        while (__stlxr(v88 - 1, v87));
                        if (!v88)
                        {
                          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                          std::__shared_weak_count::__release_weak(v46);
                          v89 = __p;
                          if (!__p)
                            goto LABEL_116;
LABEL_115:
                          operator delete(v89);
                          goto LABEL_116;
                        }
                      }
                      v89 = __p;
                      if (__p)
                        goto LABEL_115;
LABEL_116:
                      if (v155)
                        operator delete(v155);
                      v31 = v153 + 424;
                      ++v33;
                      if (v153 + 424 == v149)
                        goto LABEL_140;
                    }
                    if (v40 < 0)
                      sub_2236EA0B4();
                    v41 = (char *)operator new(v38 - v39);
                    __src[4] = v41;
                    __src[6] = &v41[16 * (v40 >> 4)];
                    v42 = v40 - 16;
                    if ((unint64_t)(v40 - 16) < 0xD0
                      || (v41 + 8 < &v39[(v42 & 0xFFFFFFFFFFFFFFF0) + 16]
                        ? (v90 = v39 + 8 >= &v41[(v42 & 0xFFFFFFFFFFFFFFF0) + 16])
                        : (v90 = 1),
                          v90 ? (v91 = 0) : (v91 = 1),
                          v39 < &v41[(v42 & 0xFFFFFFFFFFFFFFF0) + 8]
                        ? (v92 = v41 >= &v39[(v42 & 0xFFFFFFFFFFFFFFF0) + 8])
                        : (v92 = 1),
                          !v92))
                    {
                      v43 = v41;
                      v44 = v41;
                      goto LABEL_49;
                    }
                    v43 = v41;
                    v44 = v41;
                    if ((v91 & 1) != 0)
                      goto LABEL_205;
                    v93 = 0;
                    v94 = (v42 >> 4) + 1;
                    v95 = 16 * (v94 & 0x1FFFFFFFFFFFFFFCLL);
                    v96 = &v39[v95];
                    v44 = &v41[v95];
                    v97 = v94 & 0x1FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v98 = &v41[v93];
                      v99 = *(_OWORD *)&v39[v93 + 16];
                      v101 = *(_OWORD *)&v39[v93 + 32];
                      v100 = *(_OWORD *)&v39[v93 + 48];
                      *(_OWORD *)v98 = *(_OWORD *)&v39[v93];
                      *((_OWORD *)v98 + 1) = v99;
                      *((_OWORD *)v98 + 2) = v101;
                      *((_OWORD *)v98 + 3) = v100;
                      v93 += 64;
                      v97 -= 4;
                    }
                    while (v97);
                    v39 = v96;
                    if (v94 != (v94 & 0x1FFFFFFFFFFFFFFCLL))
                    {
LABEL_205:
                      do
                      {
LABEL_49:
                        v45 = *(_OWORD *)v39;
                        v39 += 16;
                        *(_OWORD *)v44 = v45;
                        v44 += 16;
                      }
                      while (v39 != v38);
                    }
                    __p = v43;
                    v46 = v176;
                    if (!v176)
                      goto LABEL_63;
                    goto LABEL_51;
                  }
LABEL_140:
                  v108 = v176;
                  if (v176)
                  {
                    v109 = (unint64_t *)&v176->__shared_owners_;
                    do
                      v110 = __ldaxr(v109);
                    while (__stlxr(v110 - 1, v109));
                    if (!v110)
                    {
                      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                      std::__shared_weak_count::__release_weak(v108);
                    }
                  }
                  v111 = v182;
                  if (v182)
                  {
                    v112 = (unint64_t *)&v182->__shared_owners_;
                    do
                      v113 = __ldaxr(v112);
                    while (__stlxr(v113 - 1, v112));
                    if (!v113)
                    {
                      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                      std::__shared_weak_count::__release_weak(v111);
                    }
                  }
                  v16 = v147 + 1;
                  ++v148;
                  v13 = v143;
                }
                while (v148 != v144);
              }
            }
            LOBYTE(v181) = 0;
            LOBYTE(v183) = 0;
            sub_2231C6C30(&v168, &v181, &v167, &v171);
            if ((_BYTE)v183 && SHIBYTE(v182) < 0)
              operator delete((void *)v181);
            v114 = v170;
            if (v170)
            {
              v115 = (unint64_t *)&v170->__shared_owners_;
              do
                v116 = __ldaxr(v115);
              while (__stlxr(v116 - 1, v115));
              if (!v116)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
            }
            v117 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 56))(v13);
            v118 = *(void **)v117;
            v119 = *(std::__shared_weak_count **)(v117 + 8);
            if (v119)
            {
              v120 = (unint64_t *)&v119->__shared_owners_;
              do
                v121 = __ldxr(v120);
              while (__stxr(v121 + 1, v120));
            }
            v123 = (void *)v172;
            v122 = (unint64_t *)v173;
            v168 = &off_24EC6A3B8;
            v169 = v172;
            v170 = v173;
            v172 = 0;
            v173 = 0;
            __src[0] = v118;
            __src[1] = v119;
            if (v119)
            {
              v124 = (unint64_t *)&v119->__shared_owners_;
              do
                v125 = __ldxr(v124);
              while (__stxr(v125 + 1, v124));
            }
            __src[2] = &off_24EC6A3B8;
            __src[3] = v123;
            __src[4] = v122;
            if (v122)
            {
              v126 = v122 + 1;
              do
                v127 = __ldxr(v126);
              while (__stxr(v127 + 1, v126));
            }
            (*(void (**)(uint64_t *, void **))(*v142 + 16))(v142, __src);
            v128 = (std::__shared_weak_count *)__src[4];
            if (__src[4])
            {
              v129 = (unint64_t *)((char *)__src[4] + 8);
              do
                v130 = __ldaxr(v129);
              while (__stlxr(v130 - 1, v129));
              if (!v130)
              {
                ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                std::__shared_weak_count::__release_weak(v128);
              }
            }
            v131 = (std::__shared_weak_count *)__src[1];
            if (__src[1])
            {
              v132 = (unint64_t *)((char *)__src[1] + 8);
              do
                v133 = __ldaxr(v132);
              while (__stlxr(v133 - 1, v132));
              if (!v133)
              {
                ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                std::__shared_weak_count::__release_weak(v131);
              }
            }
            v134 = v170;
            if (v170)
            {
              v135 = (unint64_t *)&v170->__shared_owners_;
              do
                v136 = __ldaxr(v135);
              while (__stlxr(v136 - 1, v135));
              if (!v136)
              {
                ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                std::__shared_weak_count::__release_weak(v134);
              }
            }
            if (v119)
            {
              v137 = (unint64_t *)&v119->__shared_owners_;
              do
                v138 = __ldaxr(v137);
              while (__stlxr(v138 - 1, v137));
              if (!v138)
              {
                ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                std::__shared_weak_count::__release_weak(v119);
              }
            }
            v139 = v173;
            if (v173)
            {
              v140 = (unint64_t *)&v173->__shared_owners_;
              do
                v141 = __ldaxr(v140);
              while (__stlxr(v141 - 1, v140));
              if (!v141)
              {
                ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                std::__shared_weak_count::__release_weak(v139);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v166.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22373F608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  sub_2231874DC((uint64_t)&a39);
  if (a50 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22373F854(int32x2_t ***a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  std::mutex *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (**v20)();
  uint64_t v21;
  double v22;
  uint64_t *v23;
  int32x2_t **i;
  int32x2_t **v25;
  const char **v26;
  const char *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::string v51;
  __int128 v52;
  void *__dst[2];
  uint64_t v54;
  void *__p[2];
  uint64_t v56;
  char v57;
  uint64_t v58[2];
  std::__shared_weak_count *v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  const char *v63;
  uint64_t v64;
  uint64_t (**v65)();
  uint64_t v66;
  _QWORD v67[45];

  v67[44] = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v12 = sub_2241471F8();
    v13 = v12[2];
    if (!v13)
    {
      v14 = v12;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v13 = v14[2];
    }
    v15 = *(_QWORD *)(v13 + 64);
    v16 = (std::mutex *)(v15 + 32);
    std::mutex::lock((std::mutex *)(v15 + 32));
    v18 = *(_QWORD *)(v15 + 96);
    v17 = *(_QWORD *)(v15 + 104);
    std::mutex::unlock(v16);
    if (v18 != v17)
    {
      v63 = "cv3d.recon.";
      v64 = 11;
      v19 = *(unsigned __int8 *)(a2 + 23);
      if ((v19 & 0x80u) == 0)
        v20 = (uint64_t (**)())a2;
      else
        v20 = *(uint64_t (***)())a2;
      if ((v19 & 0x80u) != 0)
        v19 = *(_QWORD *)(a2 + 8);
      v65 = v20;
      v66 = v19;
      sub_2231A9820((uint64_t)&v63, (uint64_t)v67, 0, 0, &v51);
      sub_2241471F8();
      v21 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21))
      {
        kdebug_trace();
        if (a6)
          v22 = *(double *)&a5;
        else
          v22 = NAN;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21))
        {
          if (*(char *)(a3 + 23) < 0)
          {
            sub_223197FA4(__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
          }
          else
          {
            *(_OWORD *)__dst = *(_OWORD *)a3;
            v54 = *(_QWORD *)(a3 + 16);
          }
          *(_QWORD *)&v52 = (uint64_t)(v22 * 1000000000.0);
          *((_QWORD *)&v52 + 1) = 2;
          v23 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21))
          {
            sub_2241498F4((uint64_t)v58, 0);
            v25 = *a1;
            for (i = a1[1]; v25 != i; ++v25)
            {
              sub_224002D14((uint64_t)&(*v25)[6], *v25 + 18, a4, (uint64_t)&v63, 0.1);
              sub_22414E9E0((uint64_t)v58, (uint64_t)&v63);
              sub_22316F8F4((uint64_t *)&v63);
            }
            *(_OWORD *)__p = *(_OWORD *)__dst;
            v56 = v54;
            __dst[1] = 0;
            v54 = 0;
            __dst[0] = 0;
            v57 = 1;
            sub_22329F414((uint64_t)v58, (__int128 *)__p, &v52, &v60);
            if (v57 && SHIBYTE(v56) < 0)
              operator delete(__p[0]);
            sub_22316F8F4(v58);
            v26 = (const char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 56))(v21);
            v27 = *v26;
            v28 = (std::__shared_weak_count *)v26[1];
            if (v28)
            {
              p_shared_owners = (unint64_t *)&v28->__shared_owners_;
              do
                v30 = __ldxr(p_shared_owners);
              while (__stxr(v30 + 1, p_shared_owners));
            }
            v31 = v61;
            v32 = v62;
            v58[0] = (uint64_t)&off_24EC6A3B8;
            v58[1] = v61;
            v59 = v62;
            v62 = 0;
            v61 = 0;
            v63 = v27;
            v64 = (uint64_t)v28;
            if (v28)
            {
              v33 = (unint64_t *)&v28->__shared_owners_;
              do
                v34 = __ldxr(v33);
              while (__stxr(v34 + 1, v33));
            }
            v65 = &off_24EC6A3B8;
            v66 = v31;
            v67[0] = v32;
            if (v32)
            {
              v35 = (unint64_t *)&v32->__shared_owners_;
              do
                v36 = __ldxr(v35);
              while (__stxr(v36 + 1, v35));
            }
            (*(void (**)(uint64_t *, const char **))(*v23 + 16))(v23, &v63);
            v37 = (std::__shared_weak_count *)v67[0];
            if (v67[0])
            {
              v38 = (unint64_t *)(v67[0] + 8);
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
            v40 = (std::__shared_weak_count *)v64;
            if (v64)
            {
              v41 = (unint64_t *)(v64 + 8);
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
            v43 = v59;
            if (v59)
            {
              v44 = (unint64_t *)&v59->__shared_owners_;
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v43);
              }
            }
            if (v28)
            {
              v46 = (unint64_t *)&v28->__shared_owners_;
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
            }
            v48 = v62;
            if (v62)
            {
              v49 = (unint64_t *)&v62->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
          }
          if (SHIBYTE(v54) < 0)
            operator delete(__dst[0]);
        }
        kdebug_trace();
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v51.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22373FD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,__int16 a33)
{
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;

  sub_2241231D8(v34);
  v36 = (std::__shared_weak_count *)STACK[0x230];
  if (STACK[0x230])
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  sub_2241231D8((uint64_t)&a33);
  if (v33)
  {
    v39 = (unint64_t *)&v33->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  sub_2241231D8((uint64_t)&STACK[0x210]);
  if (a27 < 0)
    operator delete(__p);
  sub_2231874DC((uint64_t)&a9);
  if (a19 < 0)
    operator delete(a14);
  _Unwind_Resume(a1);
}

void sub_22373FEC0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::mutex *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  float32x2_t v27;
  __int128 *v28;
  unsigned __int8 v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  float32x4_t v36;
  float32x4_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  int v46;
  int v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x4_t v50;
  int8x16_t v51;
  float32x2_t v52;
  float v53;
  float v54;
  float v55;
  unsigned __int8 v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v62;
  const char *v63;
  size_t v64;
  unsigned __int8 v65;
  unsigned __int8 v66;
  const char *v67;
  size_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  size_t v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  size_t v80;
  size_t v81;
  _BYTE *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  size_t v86;
  size_t v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int8 v92;
  uint64_t v93;
  char v94;
  _QWORD *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  char *v98;
  char *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  unint64_t v104;
  char *v105;
  char *shared_owners;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  int32x2_t v123;
  float32x4_t *v124;
  float32x2_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  void *v129;
  uint64_t *v130;
  void *v131;
  void *v132;
  uint64_t *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *p_shared_owners;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t *v158;
  char *v159;
  int v160;
  std::__shared_weak_count_vtbl *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  uint64_t *v164;
  const char *v165;
  uint64_t v166;
  float v167;
  float v168;
  _QWORD *v169;
  uint64_t v170;
  float v171;
  uint64_t v172;
  uint64_t *v173;
  float32x2_t v174;
  uint64_t v175;
  std::string v176;
  __int128 v177;
  void *v178[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v179;
  uint64_t v180[2];
  std::__shared_weak_count *v181;
  uint64_t v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  void *v185[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v187;
  const char *v188;
  int v189;
  const char *v190;
  uint64_t v191;
  std::__shared_weak_count *v192;
  uint64_t v193;
  unint64_t v194;
  float v195;
  void *v196;
  uint64_t *v197;
  _BYTE v198[24];
  char v199;
  char __src[8];
  float v201;
  char __s[8];
  __int32 v203;
  float32x4_t object[64];
  _QWORD v205[2];
  _QWORD v206[5];

  v206[2] = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v14 = sub_2241471F8();
    v15 = v14[2];
    if (!v15)
    {
      v16 = v14;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v15 = v16[2];
    }
    v17 = *(_QWORD *)(v15 + 64);
    v18 = (std::mutex *)(v17 + 32);
    std::mutex::lock((std::mutex *)(v17 + 32));
    v20 = *(_QWORD *)(v17 + 96);
    v19 = *(_QWORD *)(v17 + 104);
    std::mutex::unlock(v18);
    if (v20 != v19)
    {
      object[0].i64[0] = (uint64_t)"cv3d.recon.";
      object[0].i64[1] = 11;
      v21 = *(unsigned __int8 *)(a4 + 23);
      if ((v21 & 0x80u) == 0)
        v22 = a4;
      else
        v22 = *(_QWORD *)a4;
      if ((v21 & 0x80u) != 0)
        v21 = *(_QWORD *)(a4 + 8);
      object[1].i64[0] = v22;
      object[1].i64[1] = v21;
      sub_2231A9820((uint64_t)object, (uint64_t)&object[2], 0, 0, &v176);
      sub_2241471F8();
      v162 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if (!(*(unsigned int (**)(void))(*(_QWORD *)v162 + 24))())
        goto LABEL_217;
      kdebug_trace();
      if (a7)
        v23 = *(double *)&a6;
      else
        v23 = NAN;
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v162 + 24))(v162))
      {
LABEL_216:
        kdebug_trace();
LABEL_217:
        if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v176.__r_.__value_.__l.__data_);
        return;
      }
      if (*(char *)(a5 + 23) < 0)
      {
        sub_223197FA4(v178, *(void **)a5, *(_QWORD *)(a5 + 8));
      }
      else
      {
        *(_OWORD *)v178 = *(_OWORD *)a5;
        v179 = *(_QWORD *)(a5 + 16);
      }
      *(_QWORD *)&v177 = (uint64_t)(v23 * 1000000000.0);
      *((_QWORD *)&v177 + 1) = 2;
      v158 = sub_2241471F8();
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v162 + 24))(v162))
      {
LABEL_214:
        if (SHIBYTE(v179) < 0)
          operator delete(v178[0]);
        goto LABEL_216;
      }
      sub_2241498F4((uint64_t)v180, 0);
      sub_22370D35C(*a1, &v196);
      v24 = (uint64_t *)v196;
      v164 = v197;
      if (v196 == v197)
      {
LABEL_169:
        if (v24)
        {
          v128 = v197;
          v129 = v24;
          if (v197 != v24)
          {
            v130 = v197;
            do
            {
              v132 = (void *)*(v130 - 3);
              v130 -= 3;
              v131 = v132;
              if (v132)
              {
                *(v128 - 2) = (uint64_t)v131;
                operator delete(v131);
              }
              v128 = v130;
            }
            while (v130 != v24);
            v129 = v196;
          }
          v197 = v24;
          operator delete(v129);
        }
        *(_OWORD *)v185 = *(_OWORD *)v178;
        rep = v179;
        v178[0] = 0;
        v178[1] = 0;
        v179 = 0;
        LOBYTE(v187) = 1;
        sub_22329F414((uint64_t)v180, (__int128 *)v185, &v177, &v182);
        if ((_BYTE)v187 && SHIBYTE(rep) < 0)
          operator delete(v185[0]);
        sub_22316F8F4(v180);
        v133 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v162 + 56))(v162);
        v134 = *v133;
        v135 = (std::__shared_weak_count *)v133[1];
        if (v135)
        {
          p_shared_owners = (unint64_t *)&v135->__shared_owners_;
          do
            v137 = __ldxr(p_shared_owners);
          while (__stxr(v137 + 1, p_shared_owners));
        }
        v138 = v183;
        v139 = (uint64_t)v184;
        v180[0] = (uint64_t)&off_24EC6A3B8;
        v180[1] = v183;
        v181 = v184;
        v184 = 0;
        v183 = 0;
        object[0].i64[0] = v134;
        object[0].i64[1] = (uint64_t)v135;
        if (v135)
        {
          v140 = (unint64_t *)&v135->__shared_owners_;
          do
            v141 = __ldxr(v140);
          while (__stxr(v141 + 1, v140));
        }
        object[1].i64[0] = (uint64_t)&off_24EC6A3B8;
        object[1].i64[1] = v138;
        object[2].i64[0] = v139;
        if (v139)
        {
          v142 = (unint64_t *)(v139 + 8);
          do
            v143 = __ldxr(v142);
          while (__stxr(v143 + 1, v142));
        }
        (*(void (**)(uint64_t *, float32x4_t *))(*v158 + 16))(v158, object);
        v144 = (std::__shared_weak_count *)object[2].i64[0];
        if (object[2].i64[0])
        {
          v145 = (unint64_t *)(object[2].i64[0] + 8);
          do
            v146 = __ldaxr(v145);
          while (__stlxr(v146 - 1, v145));
          if (!v146)
          {
            ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
            std::__shared_weak_count::__release_weak(v144);
          }
        }
        v147 = (std::__shared_weak_count *)object[0].i64[1];
        if (object[0].i64[1])
        {
          v148 = (unint64_t *)(object[0].i64[1] + 8);
          do
            v149 = __ldaxr(v148);
          while (__stlxr(v149 - 1, v148));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
            std::__shared_weak_count::__release_weak(v147);
          }
        }
        v150 = v181;
        if (v181)
        {
          v151 = (unint64_t *)&v181->__shared_owners_;
          do
            v152 = __ldaxr(v151);
          while (__stlxr(v152 - 1, v151));
          if (!v152)
          {
            ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
            std::__shared_weak_count::__release_weak(v150);
          }
        }
        if (v135)
        {
          v153 = (unint64_t *)&v135->__shared_owners_;
          do
            v154 = __ldaxr(v153);
          while (__stlxr(v154 - 1, v153));
          if (!v154)
          {
            ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
            std::__shared_weak_count::__release_weak(v135);
          }
        }
        v155 = v184;
        if (v184)
        {
          v156 = (unint64_t *)&v184->__shared_owners_;
          do
            v157 = __ldaxr(v156);
          while (__stlxr(v157 - 1, v156));
          if (!v157)
          {
            ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
            std::__shared_weak_count::__release_weak(v155);
          }
        }
        goto LABEL_214;
      }
      v25 = 0;
      v26 = (_QWORD *)(a3 + 80);
      v27 = (float32x2_t)vdup_n_s32(0x3E924745u);
      v28 = &xmmword_2540CC000;
      v169 = v26;
      v170 = a2;
      while (1)
      {
        v29 = atomic_load((unsigned __int8 *)&qword_255795018);
        v175 = v25;
        if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_255795018))
        {
          v121 = v24;
          bzero(object, 0x3FCuLL);
          v122 = 0;
          v123 = (int32x2_t)0x100000000;
          do
          {
            v124 = &object[v122];
            v125 = vmul_f32(vcvt_f32_s32(v123), v27);
            v167 = v125.f32[0];
            v174 = vmul_f32(vcvt_f32_s32(vadd_s32(v123, (int32x2_t)0x200000002)), v27);
            v171 = fmodf(v125.f32[1], 1.0);
            *(float *)&v126 = fmodf(v167, 1.0);
            *((float *)&v126 + 1) = v171;
            v172 = v126;
            v168 = fmodf(v174.f32[1], 1.0);
            *(float *)&v127 = fmodf(v174.f32[0], 1.0);
            *((float *)&v127 + 1) = v168;
            v124->i64[0] = v172;
            v124->i64[1] = v127;
            v123 = vadd_s32(v123, (int32x2_t)0x400000004);
            ++v122;
          }
          while (v122 != 63);
          object[63].i64[0] = 0x3E906F003F7F1400;
          object[63].i32[2] = 1058102016;
          memcpy(dword_255794C18, object, 0x3FCuLL);
          __cxa_guard_release(&qword_255795018);
          v26 = v169;
          a2 = v170;
          v24 = v121;
          LOBYTE(v25) = v175;
          v28 = &xmmword_2540CC000;
        }
        v30 = 0.5;
        v31 = 0.5;
        v32 = 0.5;
        if (v25 != 255)
        {
          v30 = *(float *)&dword_255794C18[v25];
          v31 = *(float *)&dword_255794C18[(unsigned __int16)(2 * v25
                                                            + 85
                                                            - 255
                                                            * ((unsigned __int16)((1029
                                                                                 * (2
                                                                                  * v25
                                                                                  + 85)) >> 16) >> 2))];
          v32 = *(float *)&dword_255794C18[(unsigned __int16)(3 * v25
                                                            + 170
                                                            - 255
                                                            * ((unsigned __int16)((2057
                                                                                 * (3
                                                                                  * v25
                                                                                  + 170)) >> 16) >> 3))];
        }
        v194 = __PAIR64__(LODWORD(v31), LODWORD(v30));
        v195 = v32;
        v33 = *v24;
        v34 = v24[1];
        v173 = v24;
        if (*v24 != v34)
          break;
LABEL_23:
        v24 = v173 + 3;
        v25 = v175 + 1;
        if (v173 + 3 == v164)
        {
          v24 = (uint64_t *)v196;
          goto LABEL_169;
        }
      }
      while (1)
      {
        if ((*(_DWORD *)(v33 + 16) - 1) >= 2)
        {
          v35 = sub_223340F28(v26, v33);
          if (v35)
          {
            v38 = v35[5];
            v39 = *(_QWORD *)(v38 + 208);
            v40 = *(_QWORD **)(v38 + 216);
            if ((_QWORD *)v39 != v40)
            {
              while (*(_QWORD *)v39 != *(_QWORD *)v33 || *(_QWORD *)(v39 + 8) != *(_QWORD *)(v33 + 8))
              {
                v39 += 424;
                if ((_QWORD *)v39 == v40)
                {
                  v39 = *(_QWORD *)(v38 + 216);
                  break;
                }
              }
            }
            v42 = v39 & 0xFFFFFFFFFFFFFF00;
            if ((_QWORD *)v39 == v40)
              v39 = 0;
            else
              v39 = v39;
            v43 = v39 | v42;
            v44 = *(void **)(a2 + 48);
            LODWORD(v185[1]) = *(_DWORD *)(a2 + 56);
            v185[0] = v44;
            v45 = v43 + 16;
            v36.f32[0] = fabsf(*(float *)(v43 + 36));
            if (v36.f32[0] <= 0.052336)
              v46 = 2;
            else
              v46 = 4;
            v37.i32[0] = 1065330231;
            if (v36.f32[0] >= 0.99863)
              v47 = 1;
            else
              v47 = v46;
            sub_223F2B7AC(v45, v47, object, v36, v37);
            v203 = object[3].i32[2];
            *(_QWORD *)__s = object[3].i64[0];
            v48.i32[0] = *(_DWORD *)(v38 + 152);
            v49.i32[0] = *(_DWORD *)(v38 + 184);
            v50.i64[0] = *(_QWORD *)(v38 + 192);
            v50.i32[2] = *(_DWORD *)(v38 + 200);
            v51 = (int8x16_t)vnegq_f32(v50);
            v48.i32[1] = *(_DWORD *)(v38 + 168);
            v52 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)(v38 + 144), *(int32x2_t *)(v38 + 160)), *(float *)v51.i32), (float32x2_t)vzip2_s32(*(int32x2_t *)(v38 + 144), *(int32x2_t *)(v38 + 160)), *(float32x2_t *)v50.f32, 1), v48, v50, 2);
            v48.i32[0] = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(v38 + 176), *(float32x2_t *)v51.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(v38 + 176), 1), *(float32x2_t *)v50.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL), v49).u32[0];
            *(float32x2_t *)__src = v52;
            v201 = v48.f32[0];
            sub_2240030D0((uint64_t)v185, (uint64_t)__s, (uint64_t *)&v194, 8u, (uint64_t)object, 0.004);
            sub_22414E9E0((uint64_t)v180, (uint64_t)object);
            sub_22316F8F4((uint64_t *)object);
            if (*(float *)__src != *(float *)v185)
            {
              v53 = *(float *)v185 - *(float *)__src;
              if (*(float *)__src >= *(float *)v185)
                v53 = *(float *)__src - *(float *)v185;
              if (v53 > 0.000001)
                goto LABEL_60;
            }
            if (*(float *)&__src[4] != *((float *)v185 + 1))
            {
              v54 = *((float *)v185 + 1) - *(float *)&__src[4];
              if (*(float *)&__src[4] >= *((float *)v185 + 1))
                v54 = *(float *)&__src[4] - *((float *)v185 + 1);
              if (v54 > 0.000001)
                goto LABEL_60;
            }
            if (v201 != *(float *)&v185[1])
            {
              v55 = *(float *)&v185[1] - v201;
              if (v201 >= *(float *)&v185[1])
                v55 = v201 - *(float *)&v185[1];
              if (v55 > 0.000001)
              {
LABEL_60:
                sub_2240030D0((uint64_t)__s, (uint64_t)__src, (uint64_t *)&v194, 8u, (uint64_t)object, 0.004);
                sub_22414E9E0((uint64_t)v180, (uint64_t)object);
                sub_22316F8F4((uint64_t *)object);
              }
            }
            goto LABEL_29;
          }
          v56 = atomic_load((unsigned __int8 *)&qword_2540CC4A0);
          if ((v56 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC4A0))
          {
            sub_22455F53C(v185);
            object[1].i8[7] = 19;
            strcpy((char *)object, "cv3d.recon.kfplanes");
            sub_2232300E0((uint64_t **)v185, (uint64_t)object, &qword_2540CC498);
            if (object[1].i8[7] < 0)
              operator delete((void *)object[0].i64[0]);
            __cxa_guard_release(&qword_2540CC4A0);
            v26 = v169;
            a2 = v170;
            v28 = &xmmword_2540CC000;
          }
          v57 = *((_QWORD *)v28 + 147);
          v193 = v57;
          if (**(int **)(v57 + 56) <= 4)
          {
            v58 = *(unsigned __int8 *)(v57 + 72);
            v59 = sub_22322F254(v57, "OSLogSurrogateAppender", 1, 0);
            v60 = v59;
            if (v58 || v59 != 0)
              break;
          }
        }
LABEL_29:
        v33 += 36;
        if (v33 == v34)
          goto LABEL_23;
      }
      v185[0] = &v193;
      v185[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v187 = 4;
      v188 = "unknown file";
      v189 = 595;
      v190 = "unknown function";
      v191 = 0;
      v192 = 0;
      sub_2245664AC((unsigned __int8 *)v33, __s);
      sub_2245664AC((unsigned __int8 *)(v33 + 20), __src);
      v62 = *(_QWORD *)v185[0];
      v63 = (const char *)(*(_QWORD *)v185[0] + 16);
      v165 = v63;
      v166 = *(_QWORD *)v185[0];
      if (*(char *)(*(_QWORD *)v185[0] + 39) < 0)
      {
        v63 = *(const char **)(v62 + 16);
        v64 = *(_QWORD *)(v62 + 24);
        v66 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v66 & 1) != 0)
          goto LABEL_71;
      }
      else
      {
        v64 = *(unsigned __int8 *)(*(_QWORD *)v185[0] + 39);
        v65 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v65 & 1) != 0)
          goto LABEL_71;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v198);
        if (v199)
        {
          xmmword_255788F40 = *(_OWORD *)v198;
          unk_255788F50 = *(_QWORD *)&v198[16];
        }
        else
        {
          byte_255788F57 = 14;
          strcpy((char *)&xmmword_255788F40, "com.apple.cv3d");
        }
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_71:
      if (byte_255788F57 >= 0)
        v67 = (const char *)&xmmword_255788F40;
      else
        v67 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v68 = byte_255788F57;
      else
        v68 = *((_QWORD *)&xmmword_255788F40 + 1);
      object[0].i64[0] = (uint64_t)os_log_create(v67, v63);
      if (v68 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v68 >= 0x17)
      {
        v70 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v68 | 7) != 0x17)
          v70 = v68 | 7;
        v71 = v70 + 1;
        v69 = (uint64_t *)operator new(v70 + 1);
        object[1].i64[1] = v71 | 0x8000000000000000;
        object[0].i64[1] = (uint64_t)v69;
        object[1].i64[0] = v68;
      }
      else
      {
        object[1].i8[15] = v68;
        v69 = &object[0].i64[1];
        if (!v68)
        {
LABEL_85:
          *((_BYTE *)v69 + v68) = 0;
          object[2].i8[0] = 1;
          if (v64 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v26 = v169;
          a2 = v170;
          if (v64 >= 0x17)
          {
            v74 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v64 | 7) != 0x17)
              v74 = v64 | 7;
            v75 = v74 + 1;
            v72 = (uint64_t *)operator new(v74 + 1);
            object[3].i64[1] = v75 | 0x8000000000000000;
            object[2].i64[1] = (uint64_t)v72;
            object[3].i64[0] = v64;
          }
          else
          {
            object[3].i8[15] = v64;
            v72 = &object[2].i64[1];
            if (!v64)
            {
              object[2].i8[8] = 0;
              object[4].i8[0] = 1;
              v73 = object[0].i64[0];
              if ((object[3].i8[15] & 0x80000000) == 0)
                goto LABEL_89;
              goto LABEL_95;
            }
          }
          memmove(v72, v63, v64);
          *((_BYTE *)v72 + v64) = 0;
          object[4].i8[0] = 1;
          v73 = object[0].i64[0];
          if ((object[3].i8[15] & 0x80000000) == 0)
          {
LABEL_89:
            v28 = &xmmword_2540CC000;
            if (!object[2].i8[0])
              goto LABEL_98;
            goto LABEL_96;
          }
LABEL_95:
          operator delete((void *)object[2].i64[1]);
          v28 = &xmmword_2540CC000;
          if (!object[2].i8[0])
            goto LABEL_98;
LABEL_96:
          if (object[1].i8[15] < 0)
            operator delete((void *)object[0].i64[1]);
LABEL_98:
          if (object[0].i64[0])
            os_release((void *)object[0].i64[0]);
          if (!v60 || !*(_QWORD *)(v60 + 24))
          {
            os_log_type_enabled(v73, OS_LOG_TYPE_ERROR);
            object[0].i64[0] = 0xD04100402;
            object[0].i16[4] = 2080;
            *(uint64_t *)((char *)&object[0].i64[1] + 2) = (uint64_t)__s;
            object[1].i16[1] = 1040;
            object[1].i32[1] = 13;
            object[1].i16[4] = 2080;
            *(uint64_t *)((char *)&object[1].i64[1] + 2) = (uint64_t)__src;
            v83 = (void *)_os_log_send_and_compose_impl();
            if (v83)
              free(v83);
            goto LABEL_148;
          }
          v76 = _os_log_pack_size();
          v77 = (std::__shared_weak_count_vtbl *)operator new(v76, (std::align_val_t)8uLL);
          v78 = (std::__shared_weak_count *)operator new();
          v78->__shared_owners_ = 0;
          v79 = (unint64_t *)&v78->__shared_owners_;
          v78->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v78->__shared_weak_owners_ = 0;
          v78[1].__vftable = v77;
          v80 = strlen(__s);
          v163 = v78;
          if (v80 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v81 = v80;
          v161 = v77;
          if (v80 >= 0x17)
          {
            v84 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v80 | 7) != 0x17)
              v84 = v80 | 7;
            v85 = v84 + 1;
            v82 = operator new(v84 + 1);
            object[1].i64[0] = v85 | 0x8000000000000000;
            object[0].i64[0] = (uint64_t)v82;
            object[0].i64[1] = v81;
          }
          else
          {
            object[1].i8[7] = v80;
            v82 = object;
            if (!v80)
            {
LABEL_112:
              v82[v81] = 0;
              v86 = strlen(__src);
              if (v86 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v87 = v86;
              v160 = v58;
              if (v86 >= 0x17)
              {
                v89 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v86 | 7) != 0x17)
                  v89 = v86 | 7;
                v90 = v89 + 1;
                v88 = operator new(v89 + 1);
                *(_QWORD *)&v198[16] = v90 | 0x8000000000000000;
                *(_QWORD *)v198 = v88;
                *(_QWORD *)&v198[8] = v87;
              }
              else
              {
                v198[23] = v86;
                v88 = v198;
                if (!v86)
                {
LABEL_120:
                  v88[v87] = 0;
                  v206[0] = object[0].i64[1];
                  v91 = object[0].i64[0];
                  *(_QWORD *)((char *)v206 + 7) = *(uint64_t *)((char *)&object[0].i64[1] + 7);
                  v92 = object[1].i8[7];
                  v205[0] = *(_QWORD *)&v198[8];
                  v93 = *(_QWORD *)v198;
                  *(_QWORD *)((char *)v205 + 7) = *(_QWORD *)&v198[15];
                  v94 = v198[23];
                  v95 = operator new(0x50uLL);
                  v96 = (std::__shared_weak_count *)v95;
                  v95[1] = 0;
                  v97 = v95 + 1;
                  v95[2] = 0;
                  *v95 = &off_24EC20730;
                  v95[3] = off_24EC20780;
                  v159 = (char *)(v95 + 3);
                  v95[4] = v91;
                  v98 = (char *)(v95 + 4);
                  v95[5] = v206[0];
                  *(_QWORD *)((char *)v95 + 47) = *(_QWORD *)((char *)v206 + 7);
                  v95[7] = v93;
                  v99 = (char *)(v95 + 7);
                  *((_BYTE *)v95 + 55) = v92;
                  v95[8] = v205[0];
                  *(_QWORD *)((char *)v95 + 71) = *(_QWORD *)((char *)v205 + 7);
                  *((_BYTE *)v95 + 79) = v94;
                  do
                    v100 = __ldxr(v79);
                  while (__stxr(v100 + 1, v79));
                  do
                    v101 = __ldxr(v97);
                  while (__stxr(v101 + 1, v97));
                  do
                    v102 = __ldaxr(v97);
                  while (__stlxr(v102 - 1, v97));
                  if (!v102)
                  {
                    v103 = (char *)(v95 + 4);
                    (*(void (**)(_QWORD *))(*v95 + 16))(v95);
                    std::__shared_weak_count::__release_weak(v96);
                    v98 = v103;
                  }
                  do
                    v104 = __ldaxr(v79);
                  while (__stlxr(v104 - 1, v79));
                  if (!v104)
                  {
                    v105 = v98;
                    ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                    std::__shared_weak_count::__release_weak(v163);
                    v98 = v105;
                  }
                  if (SHIBYTE(v96[2].__vftable) >= 0)
                    shared_owners = v98;
                  else
                    shared_owners = (char *)v96[1].__shared_owners_;
                  if (SHIBYTE(v96[3].__vftable) < 0)
                    v99 = (char *)v96[2].__shared_owners_;
                  v107 = _os_log_pack_fill();
                  *(_DWORD *)v107 = 68158466;
                  *(_DWORD *)(v107 + 4) = 13;
                  *(_WORD *)(v107 + 8) = 2080;
                  *(_QWORD *)(v107 + 10) = shared_owners;
                  *(_WORD *)(v107 + 18) = 1040;
                  *(_DWORD *)(v107 + 20) = 13;
                  *(_WORD *)(v107 + 24) = 2080;
                  *(_QWORD *)(v107 + 26) = v99;
                  v108 = operator new();
                  v109 = *(unsigned __int8 *)(v166 + 39);
                  v110 = v165;
                  if ((v109 & 0x80u) != 0)
                  {
                    v110 = *(const char **)(v166 + 16);
                    v109 = *(_QWORD *)(v166 + 24);
                  }
                  *(_QWORD *)v108 = v161;
                  *(_QWORD *)(v108 + 8) = v161;
                  *(_QWORD *)(v108 + 16) = v163;
                  *(_QWORD *)(v108 + 24) = v159;
                  *(_QWORD *)(v108 + 32) = v96;
                  *(_QWORD *)(v108 + 40) = v110;
                  *(_QWORD *)(v108 + 48) = v109;
                  *(_BYTE *)(v108 + 56) = 16;
                  object[0].i64[0] = v108;
                  (*(void (**)(_QWORD, float32x4_t *))(**(_QWORD **)(v60 + 24) + 40))(*(_QWORD *)(v60 + 24), object);
                  v28 = &xmmword_2540CC000;
                  v58 = v160;
                  v111 = object[0].i64[0];
                  object[0].i64[0] = 0;
                  v26 = v169;
                  a2 = v170;
                  if (v111)
                  {
                    v112 = *(std::__shared_weak_count **)(v111 + 32);
                    if (v112)
                    {
                      v113 = (unint64_t *)&v112->__shared_owners_;
                      do
                        v114 = __ldaxr(v113);
                      while (__stlxr(v114 - 1, v113));
                      if (!v114)
                      {
                        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                        std::__shared_weak_count::__release_weak(v112);
                      }
                    }
                    v115 = *(std::__shared_weak_count **)(v111 + 16);
                    if (v115)
                    {
                      v116 = (unint64_t *)&v115->__shared_owners_;
                      do
                        v117 = __ldaxr(v116);
                      while (__stlxr(v117 - 1, v116));
                      if (!v117)
                      {
                        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                        std::__shared_weak_count::__release_weak(v115);
                      }
                    }
                    MEMORY[0x227684CE8](v111, 0x10F0C40B62ED6C6);
                    v28 = &xmmword_2540CC000;
                  }
LABEL_148:
                  if (v58)
                  {
                    sub_2245664AC((unsigned __int8 *)v33, object);
                    sub_2245664AC((unsigned __int8 *)(v33 + 20), __s);
                    sub_22322C138((uint64_t)v185, "Observed KF plane %.13s not linked to KF segmentation %.13s", (const char *)object, __s);
                    sub_223182C08((uint64_t)v185);
                  }
                  sub_223182C08((uint64_t)v185);
                  v118 = v192;
                  if (v192)
                  {
                    v119 = (unint64_t *)&v192->__shared_owners_;
                    do
                      v120 = __ldaxr(v119);
                    while (__stlxr(v120 - 1, v119));
                    if (!v120)
                    {
                      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                      std::__shared_weak_count::__release_weak(v118);
                    }
                  }
                  goto LABEL_29;
                }
              }
              memcpy(v88, __src, v87);
              goto LABEL_120;
            }
          }
          memcpy(v82, __s, v81);
          goto LABEL_112;
        }
      }
      memmove(v69, v67, v68);
      goto LABEL_85;
    }
  }
}

void sub_2237411E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56)
{
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  void *v62;
  unint64_t v63;
  void *v64;
  void *v65;

  __cxa_guard_abort(&qword_255788F58);
  sub_223182C08((uint64_t)&STACK[0x2E0]);
  v57 = (std::__shared_weak_count *)STACK[0x320];
  if (STACK[0x320])
  {
    p_shared_owners = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(p_shared_owners);
    while (__stlxr(v59 - 1, p_shared_owners));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = STACK[0x348];
  if (STACK[0x348])
  {
    v61 = STACK[0x350];
    v62 = (void *)STACK[0x348];
    if (STACK[0x350] != v60)
    {
      v63 = STACK[0x350];
      do
      {
        v65 = *(void **)(v63 - 24);
        v63 -= 24;
        v64 = v65;
        if (v65)
        {
          *(_QWORD *)(v61 - 16) = v64;
          operator delete(v64);
        }
        v61 = v63;
      }
      while (v63 != v60);
      v62 = (void *)STACK[0x348];
    }
    STACK[0x350] = v60;
    operator delete(v62);
  }
  sub_22316F8F4(&a56);
  if (a55 < 0)
    operator delete(a50);
  sub_2231874DC((uint64_t)&a37);
  if (a47 < 0)
    operator delete(a42);
  _Unwind_Resume(a1);
}

unint64_t sub_2237415E8(unint64_t result, float32x2_t *a2, uint64_t a3, __int16 a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  float32x2_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;

  v21 = a4;
  v5 = *(_QWORD *)result;
  v6 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result != v6)
  {
    v8 = result;
    *(_DWORD *)(result + 64) = 1;
    sub_22339EBD4((uint64_t)&v18, 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 2), a3);
    v12 = *(_QWORD *)(v8 + 32);
    if (v12)
    {
      *(_QWORD *)(v8 + 40) = v12;
      v13 = -1431655765 * ((unint64_t)(*(_QWORD *)(v8 + 48) - v12) >> 2);
      v22 = v12;
      v23 = v13;
      v14 = *(unsigned int *)(v8 + 60);
      if ((_DWORD)v14 == -1)
        sub_22316DD70();
      v24 = &v22;
      ((void (*)(uint64_t **, unint64_t))off_24EC58160[v14])(&v24, v8 + 56);
    }
    *(_OWORD *)(v8 + 32) = v18;
    v15 = v20;
    *(_QWORD *)(v8 + 48) = v19;
    *(_QWORD *)(v8 + 56) = v15;
    *(_DWORD *)(v8 + 104) = 1;
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
    v9.i32[0] = a2[1].i32[0];
    v10.i32[0] = a2[3].i32[0];
    v11.i32[0] = a2[5].i32[0];
    v17 = vadd_f32(a2[4], vmla_f32(vmul_f32(*a2, 0), 0, a2[2]));
    DWORD2(v18) = vadd_f32(v11, vmla_f32(vmul_f32(v9, 0), 0, v10)).u32[0];
    *(float32x2_t *)&v18 = v17;
    result = sub_22339E688(v8 + 72, v16, (uint64_t *)&v18);
    if ((a4 & 0xFF00) != 0)
    {
      *(_DWORD *)(v8 + 272) = 1;
      return sub_22339E890(v8 + 240, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2), (const char *)&v21);
    }
  }
  return result;
}

void sub_22374175C(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::mutex *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (**v22)();
  uint64_t v23;
  double v24;
  uint64_t *v25;
  float32x4_t v26;
  float32x4_t v27;
  int v28;
  int v29;
  float32x4_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  unint64_t v36;
  unsigned int v37;
  char *v38;
  float32x4_t v39;
  float32x4_t v40;
  int v41;
  int v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float32x2_t *v60;
  int8x16_t v61;
  int8x16_t v62;
  float32x2_t v63;
  uint64_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  int8x16_t v71;
  simd_float3x3 v72;
  float32x2_t *v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  size_t v78;
  const char *v79;
  char *v80;
  _QWORD *v81;
  void *v82;
  char *v83;
  void *v84;
  void *v85;
  float32x2_t v86;
  float32x2_t v87;
  uint64_t v88;
  unsigned __int8 v89;
  const char *v90;
  size_t v91;
  const char *v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  int v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  size_t v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  size_t v105;
  size_t v106;
  void **p_dst;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  void **v111;
  char v112;
  _QWORD *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  char *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  void **v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  const char **v157;
  const char *v158;
  std::__shared_weak_count *v159;
  unint64_t *p_shared_owners;
  unint64_t v161;
  std::__shared_weak_count *v162;
  uint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  uint64_t v186;
  float32x4_t v187;
  uint64_t v188;
  float32x4_t v189;
  unint64_t v190;
  float32x4_t v191;
  int v192;
  std::string v193;
  __int128 v194;
  void *v195[2];
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  _BYTE v200[32];
  float32x4_t v201;
  float32x4_t v202;
  std::__shared_weak_count *v203;
  uint64_t v204;
  uint64_t v205;
  __int32 v206;
  float32x4_t v207[4];
  void *__p[2];
  std::__shared_weak_count *v209;
  char *v210;
  std::__shared_weak_count *v211;
  void **__dst;
  __int128 v213;
  const char *v214;
  uint64_t v215;
  uint64_t (**v216)();
  uint64_t v217;
  std::__shared_weak_count *v218;
  int v219;
  int v220;
  int v221;
  char __s[8];
  _BYTE v223[48];
  float32x4_t v224;
  char v225;
  _QWORD v226[5];

  v226[2] = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v14 = sub_2241471F8();
    v15 = v14[2];
    if (!v15)
    {
      v16 = v14;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v15 = v16[2];
    }
    v17 = *(_QWORD *)(v15 + 64);
    v18 = (std::mutex *)(v17 + 32);
    std::mutex::lock((std::mutex *)(v17 + 32));
    v20 = *(_QWORD *)(v17 + 96);
    v19 = *(_QWORD *)(v17 + 104);
    std::mutex::unlock(v18);
    if (v20 != v19)
    {
      v214 = "cv3d.recon.";
      v215 = 11;
      v21 = *(unsigned __int8 *)(a4 + 23);
      if ((v21 & 0x80u) == 0)
        v22 = (uint64_t (**)())a4;
      else
        v22 = *(uint64_t (***)())a4;
      if ((v21 & 0x80u) != 0)
        v21 = *(_QWORD *)(a4 + 8);
      v216 = v22;
      v217 = v21;
      sub_2231A9820((uint64_t)&v214, (uint64_t)&v218, 0, 0, &v193);
      sub_2241471F8();
      v23 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23))
        goto LABEL_230;
      kdebug_trace();
      if (a7)
        v24 = *(double *)&a6;
      else
        v24 = NAN;
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23))
      {
LABEL_229:
        kdebug_trace();
LABEL_230:
        if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v193.__r_.__value_.__l.__data_);
        return;
      }
      if (*(char *)(a5 + 23) < 0)
      {
        sub_223197FA4(v195, *(void **)a5, *(_QWORD *)(a5 + 8));
      }
      else
      {
        *(_OWORD *)v195 = *(_OWORD *)a5;
        v196 = *(_QWORD *)(a5 + 16);
      }
      *(_QWORD *)&v194 = (uint64_t)(v24 * 1000000000.0);
      *((_QWORD *)&v194 + 1) = 2;
      v25 = sub_2241471F8();
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23))
      {
LABEL_227:
        if (SHIBYTE(v196) < 0)
          operator delete(v195[0]);
        goto LABEL_229;
      }
      v26.f32[0] = fabsf(*(float *)(a1 + 36));
      if (v26.f32[0] <= 0.052336)
        v28 = 2;
      else
        v28 = 4;
      v27.i32[0] = 1065330231;
      if (v26.f32[0] >= 0.99863)
        v29 = 1;
      else
        v29 = v28;
      v30 = sub_223F2B7AC(a1 + 16, v29, v207, v26, v27);
      v33 = 44;
      do
      {
        v34 = *(_DWORD *)(a1 + v33);
        if (v34)
          break;
        v35 = v33 == 208;
        v33 += 4;
      }
      while (!v35);
      if (v34)
      {
        v36 = (unint64_t)sub_22372619C((unsigned int *)(a1 + 44)) - a1 - 44;
        v37 = (v36 >> 2);
        if (v37 > 0x29)
          v38 = &byte_2245C9FE2;
        else
          v38 = &byte_2245C3FE4[3 * (v36 >> 2)];
      }
      else
      {
        LOWORD(v37) = 0;
        v38 = byte_2245C3FE4;
      }
      v30.i8[0] = *v38;
      v30.f32[0] = (float)v30.u32[0];
      LOBYTE(v31) = v38[1];
      LOBYTE(v32) = v38[2];
      v30.f32[1] = (float)v31;
      v30.f32[2] = (float)v32;
      v39 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v40 = vdivq_f32(v30, v39);
      v206 = v40.i32[2];
      v205 = v40.i64[0];
      if (*(_BYTE *)(a1 + 416) && *(_QWORD *)(a1 + 392) != *(_QWORD *)(a1 + 400))
      {
        v40.f32[0] = fabsf(*(float *)(a1 + 36));
        if (v40.f32[0] <= 0.052336)
          v41 = 2;
        else
          v41 = 4;
        v39.i32[0] = 1065330231;
        if (v40.f32[0] >= 0.99863)
          v42 = 1;
        else
          v42 = v41;
        sub_223F2B7AC(a1 + 16, v42, (float32x4_t *)v200, v40, v39);
        v43 = a2[1];
        v44 = a2[2];
        v45 = a2[3];
        v46 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a2, *(float *)&v200[16]), v43, *(float32x2_t *)&v200[16], 1), v44, *(float32x4_t *)&v200[16], 2), v45, *(float32x4_t *)&v200[16], 3);
        v47 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a2, v201.f32[0]), v43, *(float32x2_t *)v201.f32, 1), v44, v201, 2), v45, v201, 3);
        v48 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a2, v202.f32[0]), v43, *(float32x2_t *)v202.f32, 1), v44, v202, 2), v45, v202, 3);
        *(float32x4_t *)v223 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a2, *(float *)v200), v43, *(float32x2_t *)v200, 1), v44, *(float32x4_t *)v200, 2), v45, *(float32x4_t *)v200, 3);
        *(float32x4_t *)&v223[16] = v46;
        *(float32x4_t *)&v223[32] = v47;
        v224 = v48;
        sub_2237650E0((__int128 *)(a3 + 48), (simd_float3 *)v223, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 400) - *(_QWORD *)(a1 + 392)) >> 3), *(uint64_t **)(a1 + 392), (uint64_t)__p, 1024.0);
        sub_2236AB790((void ****)__p, (uint64_t)v223, 0.00097656);
        v50 = *(_QWORD *)&v223[8];
        v49 = *(_QWORD *)v223;
        sub_2241498F4((uint64_t)&v214, 0);
        for (; v49 != v50; v49 += 24)
          sub_223744DD8((unint64_t *)&v214, (uint64_t)(*(_QWORD *)(v49 + 8) - *(_QWORD *)v49) >> 3, *(int32x4_t **)v49, (float32x2_t *)v207);
        sub_2237415E8((unint64_t)&v214, (float32x2_t *)v207, (uint64_t)&v205, v37 | 0x100);
        v51 = *(_QWORD *)v223;
        if (*(_QWORD *)v223)
        {
          v52 = *(_QWORD *)&v223[8];
          v53 = *(void **)v223;
          if (*(_QWORD *)&v223[8] != *(_QWORD *)v223)
          {
            v54 = *(_QWORD *)&v223[8];
            do
            {
              v56 = *(void **)(v54 - 24);
              v54 -= 24;
              v55 = v56;
              if (v56)
              {
                *(_QWORD *)(v52 - 16) = v55;
                operator delete(v55);
              }
              v52 = v54;
            }
            while (v54 != v51);
            v53 = *(void **)v223;
          }
          *(_QWORD *)&v223[8] = v51;
          operator delete(v53);
        }
        v80 = (char *)__p[0];
        if (__p[0])
        {
          v81 = __p[1];
          v82 = __p[0];
          if (__p[1] != __p[0])
          {
            v83 = (char *)__p[1];
            do
            {
              v85 = (void *)*((_QWORD *)v83 - 3);
              v83 -= 24;
              v84 = v85;
              if (v85)
              {
                *(v81 - 2) = v84;
                operator delete(v84);
              }
              v81 = v83;
            }
            while (v83 != v80);
            v82 = __p[0];
          }
          __p[1] = v80;
          operator delete(v82);
        }
        goto LABEL_190;
      }
      if (*(_BYTE *)(a1 + 384))
      {
        v58 = *(_QWORD *)(a1 + 360);
        v57 = *(_QWORD *)(a1 + 368);
        if (v58 != v57)
        {
          v185 = *a2;
          v187 = a2[1];
          v189 = a2[2];
          v191 = a2[3];
          v182 = v207[0];
          v183 = v207[1];
          v184 = v207[3];
          v59 = v57 - v58;
          __p[0] = 0;
          __p[1] = 0;
          v209 = 0;
          if ((unint64_t)(v57 - v58) >= 0x7FFFFFFFFFFFFFFDLL)
            sub_22316E078();
          v60 = (float32x2_t *)operator new(2 * v59);
          v72.columns[1].i64[1] = v189.i64[1];
          v61 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v185, v182.f32[0]), v187, *(float32x2_t *)v182.f32, 1), v189, v182, 2), v191, v182, 3);
          v62 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v185, v183.f32[0]), v187, *(float32x2_t *)v183.f32, 1), v189, v183, 2), v191, v183, 3);
          v63.i32[1] = v184.i32[1];
          v72.columns[2] = (simd_float3)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v185, v184.f32[0]), v187, *(float32x2_t *)v184.f32, 1), v189, v184, 2), v191, v184, 3);
          v64 = v59 >> 2;
          __p[0] = v60;
          __p[1] = v60;
          v209 = (std::__shared_weak_count *)&v60[v64];
          v65 = *(float32x2_t *)(a3 + 48);
          v63.i32[0] = *(_DWORD *)(a3 + 56);
          v66 = *(float32x2_t *)(a3 + 60);
          v67.i32[0] = *(_DWORD *)(a3 + 68);
          v68 = *(float32x2_t *)(a3 + 72);
          v69.i32[0] = *(_DWORD *)(a3 + 80);
          v70 = (float32x2_t)vextq_s8(v61, v61, 8uLL).u64[0];
          *(float32x2_t *)v72.columns[0].f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v65, *(float *)v61.i32), v66, *(float32x2_t *)v61.i8, 1), v68, (float32x4_t)v61, 2);
          *(float32x2_t *)v72.columns[1].f32 = vmla_lane_f32(vmul_f32(v63, *(float32x2_t *)v61.i8), v67, *(float32x2_t *)v61.i8, 1);
          *(float32x2_t *)v61.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v65, *(float *)v62.i32), v66, *(float32x2_t *)v62.i8, 1), v68, (float32x4_t)v62, 2);
          v61.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(v63, *(float32x2_t *)v62.i8), v67, *(float32x2_t *)v62.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL), v69);
          *(float32x2_t *)v62.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v65, v72.columns[2].f32[0]), v66, *(float32x2_t *)v72.columns[2].f32, 1), v68, (float32x4_t)v72.columns[2], 2);
          v62.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(v63, *(float32x2_t *)v72.columns[2].f32), v67, *(float32x2_t *)v72.columns[2].f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v72.columns[2], (int8x16_t)v72.columns[2], 8uLL), v69);
          *(float32x2_t *)v72.columns[1].f32 = vmla_f32(*(float32x2_t *)v72.columns[1].f32, v70, v69);
          *(_QWORD *)v223 = v72.columns[0].i64[0];
          *(_DWORD *)&v223[8] = v72.columns[1].i32[0];
          *(_DWORD *)&v223[20] = v61.i32[2];
          *(_QWORD *)&v223[12] = v61.i64[0];
          *(_DWORD *)&v223[32] = v62.i32[2];
          *(_QWORD *)&v223[24] = v62.i64[0];
          v72.columns[2] = (simd_float3)vextq_s8(vextq_s8(v61, v61, 0xCuLL), v61, 8uLL);
          v71 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)v72.columns[2], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v62, (int32x4_t)v62), v62, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v61, (int32x4_t)v61), v61, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v62, v62, 0xCuLL), v62, 8uLL));
          *(float32x2_t *)v72.columns[2].f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v72.columns[0].f32, *(float32x2_t *)v71.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v71.i8, 1), *(float32x2_t *)v72.columns[0].f32, 1);
          v72.columns[0] = (simd_float3)vextq_s8(v71, v71, 8uLL);
          *(float32x2_t *)v72.columns[2].f32 = vmla_f32(*(float32x2_t *)v72.columns[2].f32, *(float32x2_t *)v72.columns[0].f32, *(float32x2_t *)v72.columns[1].f32);
          if (v72.columns[2].f32[0] == 0.0)
          {
            v73 = v60;
          }
          else
          {
            v72.columns[0].f32[0] = 0.0 - v72.columns[2].f32[0];
            if (v72.columns[2].f32[0] >= 0.0)
              v72.columns[0].f32[0] = v72.columns[2].f32[0];
            v72.columns[1].i32[0] = 897988541;
            v73 = v60;
            if (v72.columns[0].f32[0] > 0.000001)
            {
              v72.columns[0] = (simd_float3)sub_22322BB84((uint64_t)v223, (uint64_t)v200, v72);
              v88 = 4 * v64;
              do
              {
                v72.columns[0].i16[0] = *(_WORD *)(v58 + v88 - 4);
                v72.columns[0].i64[0] = vmovl_s16(*(int16x4_t *)v72.columns[0].f32).u64[0];
                v72.columns[0].f32[0] = (float)v72.columns[0].i32[0];
                v72.columns[1].i16[0] = *(_WORD *)(v58 + v88 - 2);
                v72.columns[1].i64[0] = vmovl_s16(*(int16x4_t *)v72.columns[1].f32).u64[0];
                v72.columns[1].f32[0] = (float)v72.columns[1].i32[0];
                v86.i32[0] = *(_DWORD *)&v200[20];
                v87.i32[0] = v201.i32[0];
                *(float32x2_t *)__s = vdiv_f32(vadd_f32(*(float32x2_t *)&v200[24], vmla_n_f32(vmul_n_f32(*(float32x2_t *)v200, v72.columns[0].f32[0]), *(float32x2_t *)&v200[12], v72.columns[1].f32[0])), (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32(v87, vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v200, *(int8x16_t *)v200, 8uLL), *(float32x2_t *)v72.columns[0].f32), *(float32x2_t *)v72.columns[1].f32, v86)), 0));
                __dst = __p;
                sub_2232EA538(&__dst, __s);
                v88 -= 4;
              }
              while (v88);
              v73 = (float32x2_t *)__p[0];
              v60 = (float32x2_t *)__p[1];
            }
          }
          *(_QWORD *)v223 = v205;
          *(_DWORD *)&v223[8] = v206;
          v223[12] = 1;
          sub_224003F18(v60 - v73, v73, (float32x2_t *)v207, 1, (uint64_t)v223, v37 | 0x100, (uint64_t)&v214, (int8x16_t)v72.columns[0]);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          goto LABEL_190;
        }
      }
      sub_223745768(&v204);
      if (**(int **)(v204 + 56) > 4
        || (v74 = *(unsigned __int8 *)(v204 + 72),
            v75 = sub_22322F254(v204, "OSLogSurrogateAppender", 1, 0),
            v76 = v75,
            !v74)
        && !v75)
      {
LABEL_189:
        sub_2241498F4((uint64_t)&v214, 0);
LABEL_190:
        v219 = 1;
        v220 = 1;
        v221 = 1;
        *(_OWORD *)v223 = *(_OWORD *)v195;
        *(_QWORD *)&v223[16] = v196;
        v195[0] = 0;
        v195[1] = 0;
        v196 = 0;
        v223[24] = 1;
        sub_22329F414((uint64_t)&v214, (__int128 *)v223, &v194, &v197);
        if (v223[24] && (v223[23] & 0x80000000) != 0)
          operator delete(*(void **)v223);
        sub_22316F8F4((uint64_t *)&v214);
        v157 = (const char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 56))(v23);
        v158 = *v157;
        v159 = (std::__shared_weak_count *)v157[1];
        if (v159)
        {
          p_shared_owners = (unint64_t *)&v159->__shared_owners_;
          do
            v161 = __ldxr(p_shared_owners);
          while (__stxr(v161 + 1, p_shared_owners));
        }
        v163 = v198;
        v162 = v199;
        *(_QWORD *)v200 = &off_24EC6A3B8;
        *(_QWORD *)&v200[8] = v198;
        *(_QWORD *)&v200[16] = v199;
        v198 = 0;
        v199 = 0;
        v214 = v158;
        v215 = (uint64_t)v159;
        if (v159)
        {
          v164 = (unint64_t *)&v159->__shared_owners_;
          do
            v165 = __ldxr(v164);
          while (__stxr(v165 + 1, v164));
        }
        v216 = &off_24EC6A3B8;
        v217 = v163;
        v218 = v162;
        if (v162)
        {
          v166 = (unint64_t *)&v162->__shared_owners_;
          do
            v167 = __ldxr(v166);
          while (__stxr(v167 + 1, v166));
        }
        (*(void (**)(uint64_t *, const char **))(*v25 + 16))(v25, &v214);
        v168 = v218;
        if (v218)
        {
          v169 = (unint64_t *)&v218->__shared_owners_;
          do
            v170 = __ldaxr(v169);
          while (__stlxr(v170 - 1, v169));
          if (!v170)
          {
            ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
            std::__shared_weak_count::__release_weak(v168);
          }
        }
        v171 = (std::__shared_weak_count *)v215;
        if (v215)
        {
          v172 = (unint64_t *)(v215 + 8);
          do
            v173 = __ldaxr(v172);
          while (__stlxr(v173 - 1, v172));
          if (!v173)
          {
            ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
            std::__shared_weak_count::__release_weak(v171);
          }
        }
        v174 = *(std::__shared_weak_count **)&v200[16];
        if (*(_QWORD *)&v200[16])
        {
          v175 = (unint64_t *)(*(_QWORD *)&v200[16] + 8);
          do
            v176 = __ldaxr(v175);
          while (__stlxr(v176 - 1, v175));
          if (!v176)
          {
            ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
            std::__shared_weak_count::__release_weak(v174);
          }
        }
        if (v159)
        {
          v177 = (unint64_t *)&v159->__shared_owners_;
          do
            v178 = __ldaxr(v177);
          while (__stlxr(v178 - 1, v177));
          if (!v178)
          {
            ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
            std::__shared_weak_count::__release_weak(v159);
          }
        }
        v179 = v199;
        if (v199)
        {
          v180 = (unint64_t *)&v199->__shared_owners_;
          do
            v181 = __ldaxr(v180);
          while (__stlxr(v181 - 1, v180));
          if (!v181)
          {
            ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
            std::__shared_weak_count::__release_weak(v179);
          }
        }
        goto LABEL_227;
      }
      *(_QWORD *)v200 = &v204;
      *(std::chrono::steady_clock::time_point *)&v200[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v200[16] = std::chrono::system_clock::now();
      *(_DWORD *)&v200[24] = 4;
      v201.i64[0] = (uint64_t)"unknown file";
      v201.i32[2] = 174;
      v202.i64[1] = 0;
      v203 = 0;
      v202.i64[0] = (uint64_t)"unknown function";
      sub_2245664AC((unsigned __int8 *)a1, __s);
      v77 = **(_QWORD **)v200;
      if (*(char *)(**(_QWORD **)v200 + 39) < 0)
      {
        v79 = *(const char **)(v77 + 16);
        v78 = *(_QWORD *)(v77 + 24);
      }
      else
      {
        v78 = *(unsigned __int8 *)(**(_QWORD **)v200 + 39);
        v79 = (const char *)(**(_QWORD **)v200 + 16);
      }
      v186 = **(_QWORD **)v200 + 16;
      v188 = **(_QWORD **)v200;
      v190 = v76;
      v192 = v74;
      v89 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v89 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v223);
        sub_223199C58("com.apple.cv3d", (unint64_t)v223, &xmmword_255788F40);
        if (v223[24] && (v223[23] & 0x80000000) != 0)
          operator delete(*(void **)v223);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v90 = (const char *)&xmmword_255788F40;
      else
        v90 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v91 = byte_255788F57;
      else
        v91 = *((_QWORD *)&xmmword_255788F40 + 1);
      v92 = v79;
      *(_QWORD *)v223 = os_log_create(v90, v79);
      v93 = &v223[8];
      if (v91 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v91 >= 0x17)
      {
        v94 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v91 | 7) != 0x17)
          v94 = v91 | 7;
        v95 = v94 + 1;
        v93 = operator new(v94 + 1);
        *(_QWORD *)&v223[16] = v91;
        *(_QWORD *)&v223[24] = v95 | 0x8000000000000000;
        *(_QWORD *)&v223[8] = v93;
      }
      else
      {
        v223[31] = v91;
        if (!v91)
        {
LABEL_96:
          v93[v91] = 0;
          v223[32] = 1;
          v96 = &v223[40];
          if (v78 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v97 = v192;
          if (v78 >= 0x17)
          {
            v99 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v78 | 7) != 0x17)
              v99 = v78 | 7;
            v100 = v99 + 1;
            v96 = operator new(v99 + 1);
            v224.i64[0] = v78;
            v224.i64[1] = v100 | 0x8000000000000000;
            *(_QWORD *)&v223[40] = v96;
            v98 = v190;
          }
          else
          {
            v224.i8[15] = v78;
            v98 = v190;
            if (!v78)
            {
LABEL_104:
              v96[v78] = 0;
              v225 = 1;
              v101 = *(NSObject **)v223;
              if (v224.i8[15] < 0)
                operator delete(*(void **)&v223[40]);
              if (v223[32] && (v223[31] & 0x80000000) != 0)
                operator delete(*(void **)&v223[8]);
              if (*(_QWORD *)v223)
                os_release(*(void **)v223);
              if (!v98 || !*(_QWORD *)(v98 + 24))
              {
                os_log_type_enabled(v101, OS_LOG_TYPE_ERROR);
                *(_QWORD *)v223 = 0xD04100202;
                *(_WORD *)&v223[8] = 2080;
                *(_QWORD *)&v223[10] = __s;
                v108 = (void *)_os_log_send_and_compose_impl();
                if (v108)
                  free(v108);
                goto LABEL_182;
              }
              v102 = _os_log_pack_size();
              v103 = (std::__shared_weak_count_vtbl *)operator new(v102, (std::align_val_t)8uLL);
              v104 = (std::__shared_weak_count *)operator new();
              v104->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v104->__shared_owners_ = 0;
              v104->__shared_weak_owners_ = 0;
              v104[1].__vftable = v103;
              __p[0] = v103;
              __p[1] = v103;
              v210 = 0;
              v211 = 0;
              v209 = v104;
              v105 = strlen(__s);
              if (v105 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v106 = v105;
              if (v105 >= 0x17)
              {
                v109 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v105 | 7) != 0x17)
                  v109 = v105 | 7;
                v110 = v109 + 1;
                p_dst = (void **)operator new(v109 + 1);
                *(_QWORD *)&v213 = v106;
                *((_QWORD *)&v213 + 1) = v110 | 0x8000000000000000;
                __dst = p_dst;
                v98 = v190;
              }
              else
              {
                HIBYTE(v213) = v105;
                p_dst = (void **)&__dst;
                if (!v105)
                {
LABEL_123:
                  *((_BYTE *)p_dst + v106) = 0;
                  v111 = __dst;
                  v226[0] = v213;
                  *(_QWORD *)((char *)v226 + 7) = *(_QWORD *)((char *)&v213 + 7);
                  v112 = HIBYTE(v213);
                  v113 = operator new(0x38uLL);
                  v113[1] = 0;
                  v113[2] = 0;
                  v113[3] = off_24EC1FA48;
                  *v113 = &off_24EC1F9F8;
                  v114 = v226[0];
                  v113[4] = v111;
                  v113[5] = v114;
                  *(_QWORD *)((char *)v113 + 47) = *(_QWORD *)((char *)v226 + 7);
                  *((_BYTE *)v113 + 55) = v112;
                  v226[0] = 0;
                  *(_QWORD *)((char *)v226 + 7) = 0;
                  v115 = v211;
                  v210 = (char *)(v113 + 3);
                  v211 = (std::__shared_weak_count *)v113;
                  if (v115)
                  {
                    v116 = (unint64_t *)&v115->__shared_owners_;
                    do
                      v117 = __ldaxr(v116);
                    while (__stlxr(v117 - 1, v116));
                    if (!v117)
                    {
                      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                      std::__shared_weak_count::__release_weak(v115);
                    }
                  }
                  *(_OWORD *)v223 = *(_OWORD *)__p;
                  v118 = v210;
                  *(_QWORD *)&v223[16] = v209;
                  if (v209)
                  {
                    v119 = (unint64_t *)&v209->__shared_owners_;
                    do
                      v120 = __ldxr(v119);
                    while (__stxr(v120 + 1, v119));
                  }
                  v121 = v211;
                  *(_QWORD *)&v223[24] = v118;
                  *(_QWORD *)&v223[32] = v211;
                  if (v211)
                  {
                    v122 = (unint64_t *)&v211->__shared_owners_;
                    do
                      v123 = __ldxr(v122);
                    while (__stxr(v123 + 1, v122));
                    *(_QWORD *)&v223[40] = v118;
                    do
                      v124 = __ldaxr(v122);
                    while (__stlxr(v124 - 1, v122));
                    if (!v124)
                    {
                      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                      std::__shared_weak_count::__release_weak(v121);
                    }
                  }
                  else
                  {
                    *(_QWORD *)&v223[40] = v118;
                  }
                  v125 = v209;
                  if (v209)
                  {
                    v126 = (unint64_t *)&v209->__shared_owners_;
                    do
                      v127 = __ldaxr(v126);
                    while (__stlxr(v127 - 1, v126));
                    if (!v127)
                    {
                      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                      std::__shared_weak_count::__release_weak(v125);
                    }
                  }
                  v128 = *(_QWORD *)v223;
                  if (*(char *)(*(_QWORD *)&v223[40] + 31) >= 0)
                    v129 = *(_QWORD *)&v223[40] + 8;
                  else
                    v129 = *(_QWORD *)(*(_QWORD *)&v223[40] + 8);
                  v130 = _os_log_pack_fill();
                  *(_DWORD *)v130 = 68157954;
                  *(_DWORD *)(v130 + 4) = 13;
                  *(_WORD *)(v130 + 8) = 2080;
                  *(_QWORD *)(v130 + 10) = v129;
                  v131 = (char *)operator new();
                  v132 = *(unsigned __int8 *)(v188 + 39);
                  v133 = v186;
                  if ((v132 & 0x80u) != 0)
                  {
                    v133 = *(_QWORD *)(v188 + 16);
                    v132 = *(_QWORD *)(v188 + 24);
                  }
                  *(_QWORD *)v131 = v128;
                  *(_OWORD *)(v131 + 8) = *(_OWORD *)&v223[8];
                  *(_QWORD *)&v223[8] = 0;
                  *(_QWORD *)&v223[16] = 0;
                  *(_OWORD *)(v131 + 24) = *(_OWORD *)&v223[24];
                  *(_QWORD *)&v223[24] = 0;
                  *(_QWORD *)&v223[32] = 0;
                  *((_QWORD *)v131 + 5) = v133;
                  *((_QWORD *)v131 + 6) = v132;
                  v131[56] = 16;
                  __dst = 0;
                  __p[0] = v131;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v98 + 24) + 40))(*(_QWORD *)(v98 + 24), __p);
                  v134 = __p[0];
                  __p[0] = 0;
                  v97 = v192;
                  if (v134)
                  {
                    v135 = (std::__shared_weak_count *)*((_QWORD *)v134 + 4);
                    if (v135)
                    {
                      v136 = (unint64_t *)&v135->__shared_owners_;
                      do
                        v137 = __ldaxr(v136);
                      while (__stlxr(v137 - 1, v136));
                      if (!v137)
                      {
                        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                        std::__shared_weak_count::__release_weak(v135);
                      }
                    }
                    v138 = (std::__shared_weak_count *)*((_QWORD *)v134 + 2);
                    if (v138)
                    {
                      v139 = (unint64_t *)&v138->__shared_owners_;
                      do
                        v140 = __ldaxr(v139);
                      while (__stlxr(v140 - 1, v139));
                      if (!v140)
                      {
                        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                        std::__shared_weak_count::__release_weak(v138);
                      }
                    }
                    MEMORY[0x227684CE8](v134, 0x10F0C40B62ED6C6);
                    v141 = __dst;
                    __dst = 0;
                    if (v141)
                    {
                      v142 = (std::__shared_weak_count *)v141[4];
                      if (v142)
                      {
                        v143 = (unint64_t *)&v142->__shared_owners_;
                        do
                          v144 = __ldaxr(v143);
                        while (__stlxr(v144 - 1, v143));
                        if (!v144)
                        {
                          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                          std::__shared_weak_count::__release_weak(v142);
                        }
                      }
                      v145 = (std::__shared_weak_count *)v141[2];
                      if (v145)
                      {
                        v146 = (unint64_t *)&v145->__shared_owners_;
                        do
                          v147 = __ldaxr(v146);
                        while (__stlxr(v147 - 1, v146));
                        if (!v147)
                        {
                          ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                          std::__shared_weak_count::__release_weak(v145);
                        }
                      }
                      MEMORY[0x227684CE8](v141, 0x10F0C40B62ED6C6);
                    }
                  }
                  v148 = *(std::__shared_weak_count **)&v223[32];
                  if (*(_QWORD *)&v223[32])
                  {
                    v149 = (unint64_t *)(*(_QWORD *)&v223[32] + 8);
                    do
                      v150 = __ldaxr(v149);
                    while (__stlxr(v150 - 1, v149));
                    if (!v150)
                    {
                      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                      std::__shared_weak_count::__release_weak(v148);
                    }
                  }
                  v151 = *(std::__shared_weak_count **)&v223[16];
                  if (*(_QWORD *)&v223[16])
                  {
                    v152 = (unint64_t *)(*(_QWORD *)&v223[16] + 8);
                    do
                      v153 = __ldaxr(v152);
                    while (__stlxr(v153 - 1, v152));
                    if (!v153)
                    {
                      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                      std::__shared_weak_count::__release_weak(v151);
                    }
                  }
LABEL_182:
                  if (v97)
                  {
                    sub_2245664AC((unsigned __int8 *)a1, v223);
                    sub_22322C138((uint64_t)v200, "KFP %.13s has no extents", v223);
                    sub_223182C08((uint64_t)v200);
                  }
                  sub_223182C08((uint64_t)v200);
                  v154 = v203;
                  if (v203)
                  {
                    v155 = (unint64_t *)&v203->__shared_owners_;
                    do
                      v156 = __ldaxr(v155);
                    while (__stlxr(v156 - 1, v155));
                    if (!v156)
                    {
                      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                      std::__shared_weak_count::__release_weak(v154);
                    }
                  }
                  goto LABEL_189;
                }
              }
              memcpy(p_dst, __s, v106);
              goto LABEL_123;
            }
          }
          memmove(v96, v92, v78);
          goto LABEL_104;
        }
      }
      memmove(v93, v90, v91);
      goto LABEL_96;
    }
  }
}

void sub_223742A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;

  if (*(_BYTE *)(v47 - 184) && *(char *)(v47 - 185) < 0)
    operator delete(*(void **)(v47 - 208));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a47);
  if (a43 < 0)
    operator delete(__p);
  sub_2231874DC((uint64_t)&a25);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(a1);
}

void sub_223742C80(unsigned __int8 *a1, void **a2, uint64_t a3, uint64_t a4, float32x2_t *a5, uint64_t a6, uint64_t a7, char a8)
{
  _OWORD *v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  std::mutex *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  void **v29;
  void *v30;
  void *v31;
  int v32;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x4_t v38;
  float32x2_t v39;
  uint64_t v40;
  uint64_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x2_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  std::mutex *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  void **v72;
  void *v73;
  void *v74;
  int v75;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  std::mutex *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  void **v87;
  void *v88;
  void *v89;
  int v90;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  std::mutex *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  unint64_t v101;
  void **v102;
  void *v103;
  void *v104;
  int v105;
  __n128 *v108;
  void **v109;
  size_t v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  std::mutex *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  void *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int16 *v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  std::__shared_weak_count *v157;
  __int16 *v158;
  int v159;
  uint64_t v173;
  void *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  uint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  std::mutex *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  uint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  uint64_t v228;
  void *__p[2];
  __int128 v230;
  int v231;
  __int128 v232;
  char v233;
  __int128 v234;
  _BYTE v235[24];
  uint64_t v236;
  __int128 v237;
  void *v238[2];
  void *v239;
  void *v240[4];
  int v241;
  int v242;
  unsigned int v243;
  unsigned int v244;
  char v245;
  char v246;
  void *__dst[2];
  std::__shared_weak_count *v248;
  __int128 v249;
  std::__shared_weak_count *v250;
  __int128 v251;
  __int128 v252;
  std::__shared_weak_count *v253;
  unsigned int v254;
  unsigned int v255;
  char v256;
  char v257;
  uint64_t v258;

  v258 = *MEMORY[0x24BDAC8D0];
  sub_2245664AC(a1, &v251);
  v11 = operator new(0x28uLL);
  *(_QWORD *)v235 = v11;
  *(_OWORD *)&v235[8] = xmmword_2245C4640;
  v12 = v252;
  *v11 = v251;
  v11[1] = v12;
  *((_DWORD *)v11 + 8) = (_DWORD)v253;
  *((_BYTE *)v11 + 36) = 0;
  sub_22328CE6C("cv3d.recon.", (const char *)off_24EC58120);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v13 = sub_2241471F8();
    v14 = v13[2];
    if (!v14)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v14 = v13[2];
    }
    v15 = *(_QWORD *)(v14 + 64);
    v16 = (std::mutex *)(v15 + 32);
    std::mutex::lock((std::mutex *)(v15 + 32));
    v18 = *(_QWORD *)(v15 + 96);
    v17 = *(_QWORD *)(v15 + 104);
    std::mutex::unlock(v16);
    if (v18 != v17)
    {
      sub_2241471F8();
      v19 = (*(uint64_t (**)(uint64_t *))(qword_2557952E0 + 48))(&qword_2557952E0);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19))
      {
        memset(v240, 0, sizeof(v240));
        v241 = 728325608;
        kdebug_trace();
        sub_22371FB38(*(_QWORD *)(a6 + 88), a3, a4, &v251);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19))
        {
          if ((v235[23] & 0x80000000) != 0)
          {
            sub_223197FA4(__dst, *(void **)v235, *(unint64_t *)&v235[8]);
          }
          else
          {
            *(_OWORD *)__dst = *(_OWORD *)v235;
            v248 = *(std::__shared_weak_count **)&v235[16];
          }
          *(_QWORD *)&v232 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v232 + 1) = 2;
          v20 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19))
          {
            v21 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 56))(v19);
            *(_OWORD *)__p = *(_OWORD *)__dst;
            *(_QWORD *)&v230 = v248;
            __dst[1] = 0;
            v248 = 0;
            __dst[0] = 0;
            BYTE8(v230) = 1;
            sub_2233B3528((uint64_t)&v251, (__int128 *)__p, &v232, &v249);
            sub_2231AA5A4((uint64_t)v20, v21, (uint64_t)&v249);
            v22 = v250;
            if (v250)
            {
              p_shared_owners = (unint64_t *)&v250->__shared_owners_;
              do
                v24 = __ldaxr(p_shared_owners);
              while (__stlxr(v24 - 1, p_shared_owners));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
            }
            if (BYTE8(v230) && SBYTE7(v230) < 0)
              operator delete(__p[0]);
          }
          if (SHIBYTE(v248) < 0)
            operator delete(__dst[0]);
        }
        v25 = (std::__shared_weak_count *)v252;
        if ((_QWORD)v252)
        {
          v26 = (unint64_t *)(v252 + 8);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        kdebug_trace();
      }
    }
  }
  memset(v240, 0, sizeof(v240));
  v241 = 728325624;
  kdebug_trace();
  v28 = HIBYTE(v239);
  if (SHIBYTE(v239) < 0)
    v28 = (unint64_t)v238[1];
  if (v28 >= 0x11)
  {
    v29 = v238;
    if (SHIBYTE(v239) < 0)
      v29 = (void **)v238[0];
    v30 = *v29;
    v31 = v29[1];
    v32 = *((unsigned __int8 *)v29 + 16);
    if (v30 == (void *)0x6365722E64337663 && v31 == (void *)0x73746174532E6E6FLL && v32 == 46)
    {
      sub_223187510();
      sub_22371FB38(*(_QWORD *)(a6 + 88), a3, a4, &v251);
      v67 = (std::__shared_weak_count *)v252;
      if ((_QWORD)v252)
      {
        v68 = (unint64_t *)(v252 + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
    }
  }
  kdebug_trace();
  if (SHIBYTE(v239) < 0)
    operator delete(v238[0]);
  *((_QWORD *)&v251 + 1) = 0;
  *(_QWORD *)&v252 = 0;
  *(_QWORD *)&v251 = (char *)&v251 + 8;
  sub_2245314F4(&v251, v240);
  v234 = *(_OWORD *)v240;
  sub_22323DF84((uint64_t)&v251, *((char **)&v251 + 1));
  if (a3)
  {
    v40 = 0;
    v41 = a4 + 424 * a3;
    while (1)
    {
      v42 = *a5;
      v35.i32[0] = a5[1].i32[0];
      v43 = a5[2];
      v36.i32[0] = a5[3].i32[0];
      v44 = a5[4];
      v37.i32[0] = a5[5].i32[0];
      v38.i64[0] = *(_QWORD *)(a4 + 16);
      v39.i32[0] = *(_DWORD *)(a4 + 24);
      *(float32x2_t *)v45.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a5, v38.f32[0]), v43, *(float32x2_t *)v38.f32, 1), v44, v39.f32[0]);
      *(float32x2_t *)&v45.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v35, *(float32x2_t *)v38.f32), v36, *(float32x2_t *)v38.f32, 1), v39, v37);
      *(_QWORD *)&v249 = v40;
      *((_QWORD *)&v249 + 1) = a4;
      *(float32x2_t *)v38.f32 = a5[6];
      v38.i32[2] = a5[7].i32[0];
      v46 = vaddq_f32(v45, v38);
      v47 = *(float32x2_t *)(a4 + 28);
      v45.i32[0] = *(_DWORD *)(a4 + 36);
      LODWORD(v240[1]) = v46.i32[2];
      v240[0] = (void *)v46.i64[0];
      HIDWORD(v240[2]) = vmla_f32(vmla_lane_f32(vmul_f32(v35, v47), v36, v47, 1), *(float32x2_t *)v45.f32, v37).u32[0];
      *(float32x2_t *)((char *)&v240[1] + 4) = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v42, v47.f32[0]), v43, v47, 1), v44, v45.f32[0]);
      *((_QWORD *)&v251 + 1) = 0;
      *(_QWORD *)&v252 = 0;
      *(_QWORD *)&v251 = (char *)&v251 + 8;
      sub_2245314F4(&v251, __p);
      *(_OWORD *)__dst = *(_OWORD *)__p;
      sub_22323DF84((uint64_t)&v251, *((char **)&v251 + 1));
      BYTE7(v252) = 7;
      strcpy((char *)&v251, "support");
      v238[0] = v240;
      sub_224527BAC((uint64_t)&v251, (CFStringRef *)__p);
      sub_22342669C((uint64_t)__dst, __p[0], (uint64_t *)v238);
      v48 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v49 = (unint64_t *)((char *)__p[1] + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
          break;
      }
      if (SBYTE7(v252) < 0)
        goto LABEL_50;
LABEL_51:
      BYTE7(v252) = 6;
      strcpy((char *)&v251, "normal");
      v238[0] = (void *)((unint64_t)v240 | 0xC);
      sub_224527BAC((uint64_t)&v251, (CFStringRef *)__p);
      sub_22342669C((uint64_t)__dst, __p[0], (uint64_t *)v238);
      v51 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v52 = (unint64_t *)((char *)__p[1] + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
          if ((SBYTE7(v252) & 0x80000000) == 0)
            goto LABEL_57;
LABEL_56:
          operator delete((void *)v251);
          goto LABEL_57;
        }
      }
      if (SBYTE7(v252) < 0)
        goto LABEL_56;
LABEL_57:
      sub_223425184((unint64_t *)&v249);
      sub_224527BAC((uint64_t)&v251, (CFStringRef *)__p);
      sub_223427380((uint64_t)&v234, __p[0], __dst);
      v54 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_61;
      v55 = (unint64_t *)((char *)__p[1] + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
        if ((SBYTE7(v252) & 0x80000000) == 0)
        {
LABEL_62:
          v57 = (std::__shared_weak_count *)__dst[1];
          if (__dst[1])
            goto LABEL_70;
          goto LABEL_44;
        }
      }
      else
      {
LABEL_61:
        if ((SBYTE7(v252) & 0x80000000) == 0)
          goto LABEL_62;
      }
      operator delete((void *)v251);
      v57 = (std::__shared_weak_count *)__dst[1];
      if (__dst[1])
      {
LABEL_70:
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
LABEL_44:
      a4 += 424;
      ++v40;
      if (a4 == v41)
        goto LABEL_74;
    }
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
    if ((SBYTE7(v252) & 0x80000000) == 0)
      goto LABEL_51;
LABEL_50:
    operator delete((void *)v251);
    goto LABEL_51;
  }
LABEL_74:
  sub_22328CE6C("cv3d.recon.", (const char *)off_24EC58128);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v60 = sub_2241471F8();
    v61 = v60[2];
    if (!v61)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v61 = v60[2];
    }
    v62 = *(_QWORD *)(v61 + 64);
    v63 = (std::mutex *)(v62 + 32);
    std::mutex::lock((std::mutex *)(v62 + 32));
    v65 = *(_QWORD *)(v62 + 96);
    v64 = *(_QWORD *)(v62 + 104);
    std::mutex::unlock(v63);
    if (v65 != v64)
    {
      sub_2241471F8();
      v66 = (*(uint64_t (**)(uint64_t *))(qword_2557952E0 + 48))(&qword_2557952E0);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v66 + 24))(v66))
      {
        v251 = 0u;
        v252 = 0u;
        LODWORD(v253) = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v66 + 24))(v66))
        {
          if ((v235[23] & 0x80000000) != 0)
          {
            sub_223197FA4(v240, *(void **)v235, *(unint64_t *)&v235[8]);
          }
          else
          {
            *(_OWORD *)v240 = *(_OWORD *)v235;
            v240[2] = *(void **)&v235[16];
          }
          *(_QWORD *)&v249 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v249 + 1) = 2;
          v70 = sub_2241471F8();
          sub_22356F5A4((uint64_t)v70, v66, (uint64_t)&v234, (uint64_t)v240, &v249);
          if (SHIBYTE(v240[2]) < 0)
            operator delete(v240[0]);
        }
        kdebug_trace();
      }
    }
  }
  v251 = 0u;
  v252 = 0u;
  LODWORD(v253) = 728325624;
  kdebug_trace();
  v71 = BYTE7(v230);
  if (SBYTE7(v230) < 0)
    v71 = (unint64_t)__p[1];
  if (v71 >= 0x11)
  {
    v72 = __p;
    if (SBYTE7(v230) < 0)
      v72 = (void **)__p[0];
    v73 = *v72;
    v74 = v72[1];
    v75 = *((unsigned __int8 *)v72 + 16);
    if (v73 == (void *)0x6365722E64337663 && v74 == (void *)0x73746174532E6E6FLL && v75 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if (SBYTE7(v230) < 0)
    operator delete(__p[0]);
  sub_22328CE6C("cv3d.recon.", (const char *)off_24EC58130);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v78 = sub_2241471F8();
    v79 = v78[2];
    if (!v79)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v79 = v78[2];
    }
    v80 = *(_QWORD *)(v79 + 64);
    v81 = (std::mutex *)(v80 + 32);
    std::mutex::lock((std::mutex *)(v80 + 32));
    v83 = *(_QWORD *)(v80 + 96);
    v82 = *(_QWORD *)(v80 + 104);
    std::mutex::unlock(v81);
    if (v83 != v82)
    {
      sub_2241471F8();
      v84 = (*(uint64_t (**)(uint64_t *))(qword_2557952E0 + 48))(&qword_2557952E0);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v84 + 24))(v84))
      {
        v251 = 0u;
        v252 = 0u;
        LODWORD(v253) = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v84 + 24))(v84))
        {
          if ((v235[23] & 0x80000000) != 0)
          {
            sub_223197FA4(v240, *(void **)v235, *(unint64_t *)&v235[8]);
          }
          else
          {
            *(_OWORD *)v240 = *(_OWORD *)v235;
            v240[2] = *(void **)&v235[16];
          }
          *(_QWORD *)&v249 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v249 + 1) = 2;
          v85 = sub_2241471F8();
          sub_223705218((uint64_t)v85, v84, a6, (uint64_t)v240, &v249);
          if (SHIBYTE(v240[2]) < 0)
            operator delete(v240[0]);
        }
        kdebug_trace();
      }
    }
  }
  v251 = 0u;
  v252 = 0u;
  LODWORD(v253) = 728325624;
  kdebug_trace();
  v86 = BYTE7(v230);
  if (SBYTE7(v230) < 0)
    v86 = (unint64_t)__p[1];
  if (v86 >= 0x11)
  {
    v87 = __p;
    if (SBYTE7(v230) < 0)
      v87 = (void **)__p[0];
    v88 = *v87;
    v89 = v87[1];
    v90 = *((unsigned __int8 *)v87 + 16);
    if (v88 == (void *)0x6365722E64337663 && v89 == (void *)0x73746174532E6E6FLL && v90 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if (SBYTE7(v230) < 0)
    operator delete(__p[0]);
  sub_22328CE6C("cv3d.recon.", (const char *)off_24EC58138);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v93 = sub_2241471F8();
    v94 = v93[2];
    if (!v94)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v94 = v93[2];
    }
    v95 = *(_QWORD *)(v94 + 64);
    v96 = (std::mutex *)(v95 + 32);
    std::mutex::lock((std::mutex *)(v95 + 32));
    v98 = *(_QWORD *)(v95 + 96);
    v97 = *(_QWORD *)(v95 + 104);
    std::mutex::unlock(v96);
    if (v98 != v97)
    {
      sub_2241471F8();
      v99 = (*(uint64_t (**)(uint64_t *))(qword_2557952E0 + 48))(&qword_2557952E0);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v99 + 24))(v99))
      {
        v251 = 0u;
        v252 = 0u;
        LODWORD(v253) = 728325608;
        kdebug_trace();
        __dst[0] = *a2;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v99 + 24))(v99))
        {
          if ((v235[23] & 0x80000000) != 0)
          {
            sub_223197FA4(v240, *(void **)v235, *(unint64_t *)&v235[8]);
          }
          else
          {
            *(_OWORD *)v240 = *(_OWORD *)v235;
            v240[2] = *(void **)&v235[16];
          }
          *(_QWORD *)&v249 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v249 + 1) = 2;
          v100 = sub_2241471F8();
          sub_223663A88((uint64_t)v100, v99, (uint64_t *)__dst, (uint64_t)v240, &v249);
          if (SHIBYTE(v240[2]) < 0)
            operator delete(v240[0]);
        }
        kdebug_trace();
      }
    }
  }
  v251 = 0u;
  v252 = 0u;
  LODWORD(v253) = 728325624;
  kdebug_trace();
  v101 = BYTE7(v230);
  if (SBYTE7(v230) < 0)
    v101 = (unint64_t)__p[1];
  if (v101 >= 0x11)
  {
    v102 = __p;
    if (SBYTE7(v230) < 0)
      v102 = (void **)__p[0];
    v103 = *v102;
    v104 = v102[1];
    v105 = *((unsigned __int8 *)v102 + 16);
    if (v103 == (void *)0x6365722E64337663 && v104 == (void *)0x73746174532E6E6FLL && v105 == 46)
    {
      v108 = sub_223187510();
      if ((SBYTE7(v230) & 0x80u) == 0)
        v109 = __p;
      else
        v109 = (void **)__p[0];
      if ((SBYTE7(v230) & 0x80u) == 0)
        v110 = BYTE7(v230);
      else
        v110 = (size_t)__p[1];
      v240[0] = *a2;
      if (v235[23] >= 0)
        v111 = v235;
      else
        v111 = *(_BYTE **)v235;
      if (v235[23] >= 0)
        v112 = v235[23];
      else
        v112 = *(_QWORD *)&v235[8];
      sub_22365B39C(v108, v109, v110, (uint64_t *)v240, (uint64_t)v111, v112);
    }
  }
  kdebug_trace();
  if (SBYTE7(v230) < 0)
  {
    operator delete(__p[0]);
    if (!a8)
      goto LABEL_324;
  }
  else if (!a8)
  {
    goto LABEL_324;
  }
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v113 = sub_2241471F8();
    v114 = v113[2];
    if (!v114)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_335;
      }
      v114 = v113[2];
    }
    v115 = *(_QWORD *)(v114 + 64);
    v116 = (std::mutex *)(v115 + 32);
    std::mutex::lock((std::mutex *)(v115 + 32));
    v118 = *(_QWORD *)(v115 + 96);
    v117 = *(_QWORD *)(v115 + 104);
    std::mutex::unlock(v116);
    if (v118 != v117)
    {
      sub_22328CE6C("cv3d.recon.", (const char *)off_24EC58140);
      sub_2241471F8();
      v119 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v119 + 24))(v119))
        goto LABEL_278;
      *(_OWORD *)__p = 0u;
      v230 = 0u;
      v231 = 728325616;
      kdebug_trace();
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v119 + 24))(v119))
      {
LABEL_277:
        kdebug_trace();
LABEL_278:
        if (v233 < 0)
          operator delete((void *)v232);
        goto LABEL_280;
      }
      if ((v235[23] & 0x80000000) != 0)
      {
        sub_223197FA4(v238, *(void **)v235, *(unint64_t *)&v235[8]);
      }
      else
      {
        *(_OWORD *)v238 = *(_OWORD *)v235;
        v239 = *(void **)&v235[16];
      }
      *(_QWORD *)&v237 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
      *((_QWORD *)&v237 + 1) = 2;
      v120 = sub_2241471F8();
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v119 + 24))(v119))
      {
LABEL_275:
        if (SHIBYTE(v239) < 0)
          operator delete(v238[0]);
        goto LABEL_277;
      }
      sub_2231D3D90(a7, (uint64_t)v240);
      *(_QWORD *)&v251 = &off_24EC216B8;
      sub_2231FF60C(&v241, (_WORD *)&v251 + 4);
      v121 = v240[1];
      if (!v240[1])
        goto LABEL_207;
      v122 = (std::__shared_weak_count *)v240[2];
      if (v240[2])
      {
        v123 = (unint64_t *)((char *)v240[2] + 8);
        do
          v124 = __ldxr(v123);
        while (__stxr(v124 + 1, v123));
        do
          v125 = __ldaxr(v123);
        while (__stlxr(v125 - 1, v123));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
        v121 = v240[1];
        v126 = (std::__shared_weak_count *)v240[2];
        if (v240[2])
        {
          v127 = (unint64_t *)((char *)v240[2] + 8);
          do
            v128 = __ldxr(v127);
          while (__stxr(v128 + 1, v127));
          do
            v129 = __ldaxr(v127);
          while (__stlxr(v129 - 1, v127));
          if (!v129)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
      }
      if (v246)
        (*(void (**)(void **__return_ptr, void *, _QWORD))(*(_QWORD *)v121 + 96))(__dst, v121, 0);
      else
LABEL_207:
        __dst[0] = 0;
      v130 = *((_QWORD *)&v251 + 1);
      v131 = (std::__shared_weak_count *)v252;
      if ((_QWORD)v252)
      {
        v132 = (unint64_t *)(v252 + 8);
        do
          v133 = __ldxr(v132);
        while (__stxr(v133 + 1, v132));
        do
          v134 = __ldaxr(v132);
        while (__stlxr(v134 - 1, v132));
        if (!v134)
        {
          ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
          std::__shared_weak_count::__release_weak(v131);
        }
      }
      if (v130 && v257)
        (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)&v251 + 1) + 96))(&v236, *((_QWORD *)&v251 + 1), 1);
      else
        v236 = 0;
      v135 = v241;
      if (!v241 || (v136 = v242) == 0)
      {
LABEL_243:
        v173 = v236;
        v236 = 0;
        if (v173)
          (*(void (**)(uint64_t))(*(_QWORD *)v173 + 8))(v173);
        v174 = __dst[0];
        __dst[0] = 0;
        if (v174)
          (*(void (**)(void *))(*(_QWORD *)v174 + 8))(v174);
        v175 = (std::__shared_weak_count *)v240[2];
        if (v240[2])
        {
          v176 = (unint64_t *)((char *)v240[2] + 8);
          do
            v177 = __ldaxr(v176);
          while (__stlxr(v177 - 1, v176));
          if (!v177)
          {
            ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
            std::__shared_weak_count::__release_weak(v175);
          }
        }
        *(_OWORD *)v240 = *(_OWORD *)v238;
        v240[2] = v239;
        v238[0] = 0;
        v238[1] = 0;
        v239 = 0;
        LOBYTE(v240[3]) = 1;
        sub_22321B368(&v251, (__int128 *)v240, &v237, &v249);
        if (LOBYTE(v240[3]) && SHIBYTE(v240[2]) < 0)
          operator delete(v240[0]);
        sub_223167354((uint64_t)&v251 + 8);
        v178 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v119 + 56))(v119);
        v179 = *v178;
        v180 = (std::__shared_weak_count *)v178[1];
        if (v180)
        {
          v181 = (unint64_t *)&v180->__shared_owners_;
          do
            v182 = __ldxr(v181);
          while (__stxr(v182 + 1, v181));
        }
        v184 = *((_QWORD *)&v249 + 1);
        v183 = v250;
        __dst[0] = &off_24EC6A3B8;
        __dst[1] = *((void **)&v249 + 1);
        v248 = v250;
        *((_QWORD *)&v249 + 1) = 0;
        v250 = 0;
        *(_QWORD *)&v251 = v179;
        *((_QWORD *)&v251 + 1) = v180;
        if (v180)
        {
          v185 = (unint64_t *)&v180->__shared_owners_;
          do
            v186 = __ldxr(v185);
          while (__stxr(v186 + 1, v185));
        }
        *(_QWORD *)&v252 = &off_24EC6A3B8;
        *((_QWORD *)&v252 + 1) = v184;
        v253 = v183;
        if (v183)
        {
          v187 = (unint64_t *)&v183->__shared_owners_;
          do
            v188 = __ldxr(v187);
          while (__stxr(v188 + 1, v187));
        }
        (*(void (**)(uint64_t *, __int128 *))(*v120 + 16))(v120, &v251);
        sub_2241231D8((uint64_t)&v252);
        v189 = (std::__shared_weak_count *)*((_QWORD *)&v251 + 1);
        if (*((_QWORD *)&v251 + 1))
        {
          v190 = (unint64_t *)(*((_QWORD *)&v251 + 1) + 8);
          do
            v191 = __ldaxr(v190);
          while (__stlxr(v191 - 1, v190));
          if (!v191)
          {
            ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
            std::__shared_weak_count::__release_weak(v189);
          }
        }
        sub_2241231D8((uint64_t)__dst);
        if (v180)
        {
          v192 = (unint64_t *)&v180->__shared_owners_;
          do
            v193 = __ldaxr(v192);
          while (__stlxr(v193 - 1, v192));
          if (!v193)
          {
            ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
            std::__shared_weak_count::__release_weak(v180);
          }
        }
        sub_2241231D8((uint64_t)&v249);
        goto LABEL_275;
      }
      v137 = v243;
      v138 = v244;
      v140 = v254;
      v139 = v255;
      v141 = (__int16 *)v240[3];
      if (v245 && v240[3])
      {
        v228 = v244;
        v142 = v255;
        v143 = v120;
        v144 = v254;
        v145 = v243;
        v146 = v240[1];
        v147 = (std::__shared_weak_count *)v240[2];
        if (v240[2])
        {
          v148 = (unint64_t *)((char *)v240[2] + 8);
          do
            v149 = __ldxr(v148);
          while (__stxr(v149 + 1, v148));
          do
            v150 = __ldaxr(v148);
          while (__stlxr(v150 - 1, v148));
          if (!v150)
          {
            ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
            std::__shared_weak_count::__release_weak(v147);
          }
        }
        (*(void (**)(void *, _QWORD, const char *))(*(_QWORD *)v146 + 88))(v146, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v137 = v145;
        v140 = v144;
        v120 = v143;
        v139 = v142;
        v138 = v228;
        v141 = (__int16 *)v240[3];
      }
      v151 = v253;
      if (v256 && v253)
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(**((_QWORD **)&v251 + 1) + 88))(*((_QWORD *)&v251 + 1), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v151 = v253;
      }
      v152 = v135 - 1;
      v153 = v136 - 1;
      if (v136 != 1)
      {
        v154 = 2 * v138;
        v155 = 4 * v139;
        if (v135 == 1)
        {
          do
          {
            _H0 = *v141;
            __asm { FCVT            S0, H0 }
            LODWORD(v151->__vftable) = _S0;
            v141 = (__int16 *)((char *)v141 + v154);
            v151 = (std::__shared_weak_count *)((char *)v151 + v155);
            --v153;
          }
          while (v153);
LABEL_242:
          _H0 = *v141;
          __asm { FCVT            S0, H0 }
          LODWORD(v151->__vftable) = _S0;
          goto LABEL_243;
        }
        v156 = 0;
        do
        {
          v157 = v151;
          v158 = v141;
          v159 = v135 - 1;
          do
          {
            _H0 = *v158;
            __asm { FCVT            S0, H0 }
            LODWORD(v157->__vftable) = _S0;
            v158 += v137;
            v157 = (std::__shared_weak_count *)((char *)v157 + 4 * v140);
            --v159;
          }
          while (v159);
          _H0 = *v158;
          __asm { FCVT            S0, H0 }
          LODWORD(v157->__vftable) = _S0;
          v141 = (__int16 *)((char *)v141 + v154);
          v151 = (std::__shared_weak_count *)((char *)v151 + v155);
          ++v156;
        }
        while (v156 != v153);
      }
      if (v135 != 1)
      {
        do
        {
          _H0 = *v141;
          __asm { FCVT            S0, H0 }
          LODWORD(v151->__vftable) = _S0;
          v141 += v137;
          v151 = (std::__shared_weak_count *)((char *)v151 + 4 * v140);
          --v152;
        }
        while (v152);
      }
      goto LABEL_242;
    }
  }
LABEL_280:
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_324;
  v194 = sub_2241471F8();
  v195 = v194[2];
  if (!v195)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      v195 = v194[2];
      goto LABEL_284;
    }
LABEL_335:
    abort();
  }
LABEL_284:
  v196 = *(_QWORD *)(v195 + 64);
  v197 = (std::mutex *)(v196 + 32);
  std::mutex::lock((std::mutex *)(v196 + 32));
  v199 = *(_QWORD *)(v196 + 96);
  v198 = *(_QWORD *)(v196 + 104);
  std::mutex::unlock(v197);
  if (v199 == v198)
    goto LABEL_324;
  sub_22328CE6C("cv3d.recon.", (const char *)&off_24EC58148);
  sub_2241471F8();
  v200 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v200 + 24))(v200))
  {
    *(_OWORD *)__p = 0u;
    v230 = 0u;
    v231 = 728325616;
    kdebug_trace();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v200 + 24))(v200))
    {
      if ((v235[23] & 0x80000000) != 0)
      {
        sub_223197FA4(v238, *(void **)v235, *(unint64_t *)&v235[8]);
      }
      else
      {
        *(_OWORD *)v238 = *(_OWORD *)v235;
        v239 = *(void **)&v235[16];
      }
      *(_QWORD *)&v237 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
      *((_QWORD *)&v237 + 1) = 2;
      v201 = sub_2241471F8();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v200 + 24))(v200))
      {
        sub_2231D48A8(a7, (uint64_t)v240);
        sub_223CC60BC((uint64_t)v240, (uint64_t)&v251);
        v202 = (std::__shared_weak_count *)v240[2];
        if (v240[2])
        {
          v203 = (unint64_t *)((char *)v240[2] + 8);
          do
            v204 = __ldaxr(v203);
          while (__stlxr(v204 - 1, v203));
          if (!v204)
          {
            ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
            std::__shared_weak_count::__release_weak(v202);
          }
        }
        *(_OWORD *)v240 = *(_OWORD *)v238;
        v240[2] = v239;
        v238[0] = 0;
        v238[1] = 0;
        v239 = 0;
        LOBYTE(v240[3]) = 1;
        sub_2231C6C30(&v251, (__int128 *)v240, &v237, &v249);
        if (LOBYTE(v240[3]) && SHIBYTE(v240[2]) < 0)
          operator delete(v240[0]);
        sub_223167354((uint64_t)&v251 + 8);
        v205 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v200 + 56))(v200);
        v206 = *v205;
        v207 = (std::__shared_weak_count *)v205[1];
        if (v207)
        {
          v208 = (unint64_t *)&v207->__shared_owners_;
          do
            v209 = __ldxr(v208);
          while (__stxr(v209 + 1, v208));
        }
        v211 = *((_QWORD *)&v249 + 1);
        v210 = v250;
        __dst[0] = &off_24EC6A3B8;
        __dst[1] = *((void **)&v249 + 1);
        v248 = v250;
        *((_QWORD *)&v249 + 1) = 0;
        v250 = 0;
        *(_QWORD *)&v251 = v206;
        *((_QWORD *)&v251 + 1) = v207;
        if (v207)
        {
          v212 = (unint64_t *)&v207->__shared_owners_;
          do
            v213 = __ldxr(v212);
          while (__stxr(v213 + 1, v212));
        }
        *(_QWORD *)&v252 = &off_24EC6A3B8;
        *((_QWORD *)&v252 + 1) = v211;
        v253 = v210;
        if (v210)
        {
          v214 = (unint64_t *)&v210->__shared_owners_;
          do
            v215 = __ldxr(v214);
          while (__stxr(v215 + 1, v214));
        }
        (*(void (**)(uint64_t *, __int128 *))(*v201 + 16))(v201, &v251);
        sub_2241231D8((uint64_t)&v252);
        v216 = (std::__shared_weak_count *)*((_QWORD *)&v251 + 1);
        if (*((_QWORD *)&v251 + 1))
        {
          v217 = (unint64_t *)(*((_QWORD *)&v251 + 1) + 8);
          do
            v218 = __ldaxr(v217);
          while (__stlxr(v218 - 1, v217));
          if (!v218)
          {
            ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
            std::__shared_weak_count::__release_weak(v216);
          }
        }
        sub_2241231D8((uint64_t)__dst);
        if (v207)
        {
          v219 = (unint64_t *)&v207->__shared_owners_;
          do
            v220 = __ldaxr(v219);
          while (__stlxr(v220 - 1, v219));
          if (!v220)
          {
            ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
            std::__shared_weak_count::__release_weak(v207);
          }
        }
        sub_2241231D8((uint64_t)&v249);
      }
      if (SHIBYTE(v239) < 0)
        operator delete(v238[0]);
    }
    kdebug_trace();
  }
  if ((v233 & 0x80000000) == 0)
  {
LABEL_324:
    v221 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
    if (!*((_QWORD *)&v234 + 1))
      goto LABEL_328;
    goto LABEL_325;
  }
  operator delete((void *)v232);
  v221 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
  if (!*((_QWORD *)&v234 + 1))
    goto LABEL_328;
LABEL_325:
  v222 = (unint64_t *)&v221->__shared_owners_;
  do
    v223 = __ldaxr(v222);
  while (__stlxr(v223 - 1, v222));
  if (v223)
  {
LABEL_328:
    if ((v235[23] & 0x80000000) == 0)
      return;
    goto LABEL_329;
  }
  ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
  std::__shared_weak_count::__release_weak(v221);
  if ((v235[23] & 0x80000000) != 0)
LABEL_329:
    operator delete(*(void **)v235);
}

void sub_2237446E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,std::__shared_weak_count *a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61)
{
  uint64_t v61;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;

  v63 = a55;
  a55 = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  sub_223167354(v61);
  v64 = a47;
  if (a47)
  {
    p_shared_owners = (unint64_t *)&a47->__shared_owners_;
    do
      v66 = __ldaxr(p_shared_owners);
    while (__stlxr(v66 - 1, p_shared_owners));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (a43 < 0)
    operator delete(__p);
  sub_2231874DC((uint64_t)&a13);
  if (a26 < 0)
    operator delete(a21);
  sub_223167354((uint64_t)&a27);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(a1);
}

uint64_t sub_223744B60(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD **v33;
  int v34;
  _QWORD *v35;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(_QWORD *)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - result) >> 2) >= a4)
  {
    v22 = *(_QWORD *)(a1 + 8);
    v20 = (uint64_t *)(a1 + 8);
    v21 = v22;
    v23 = 0xAAAAAAAAAAAAAAABLL * ((v22 - result) >> 2);
    if (v23 >= a4)
    {
      v27 = result;
      if (a2 != a3)
      {
        v28 = result;
        do
        {
          if (v6 != (uint64_t *)v28)
          {
            v29 = *v6;
            *(_DWORD *)(v28 + 8) = *((_DWORD *)v6 + 2);
            *(_QWORD *)v28 = v29;
          }
          v6 = (uint64_t *)((char *)v6 + 12);
          v28 += 12;
          v27 += 12;
        }
        while (v6 != a3);
      }
      v19 = v27 - result;
    }
    else
    {
      v24 = (uint64_t *)((char *)a2 + 12 * v23);
      if (v21 != result)
      {
        v25 = 12 * v23;
        do
        {
          if (v6 != (uint64_t *)result)
          {
            v26 = *v6;
            *(_DWORD *)(result + 8) = *((_DWORD *)v6 + 2);
            *(_QWORD *)result = v26;
          }
          v6 = (uint64_t *)((char *)v6 + 12);
          result += 12;
          v25 -= 12;
        }
        while (v25);
        result = *v20;
      }
      v30 = result;
      if (v24 != a3)
      {
        v30 = result;
        v31 = result;
        do
        {
          v32 = *v24;
          *(_DWORD *)(v31 + 8) = *((_DWORD *)v24 + 2);
          *(_QWORD *)v31 = v32;
          v31 += 12;
          v24 = (uint64_t *)((char *)v24 + 12);
          v30 += 12;
        }
        while (v24 != a3);
      }
      v19 = v30 - result;
    }
  }
  else
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      v33 = (_QWORD **)result;
      v34 = -1431655765 * ((v8 - result) >> 2);
      v10 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v10 == -1)
        sub_22316DD70();
      v35 = &v33;
      ((void (*)(_QWORD **, uint64_t))off_24EC58170[v10])(&v35, a1 + 24);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 > 0x1555555555555555)
      goto LABEL_35;
    v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v12 = 2 * v11;
    if (2 * v11 <= a4)
      v12 = a4;
    v13 = v11 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v12;
    if (v13 > 0x1555555555555555)
LABEL_35:
      sub_22316E078();
    LODWORD(v35) = v13;
    v14 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v14 == -1)
      sub_22316DD70();
    v33 = &v35;
    result = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC58180[v14])(&v33, a1 + 24);
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 16) = result + 12 * v15;
    v16 = result;
    if (v6 != a3)
    {
      v16 = result;
      v17 = result;
      do
      {
        v18 = *v6;
        *(_DWORD *)(v17 + 8) = *((_DWORD *)v6 + 2);
        *(_QWORD *)v17 = v18;
        v17 += 12;
        v6 = (uint64_t *)((char *)v6 + 12);
        v16 += 12;
      }
      while (v6 != a3);
    }
    v19 = v16 - result;
    v20 = (uint64_t *)(a1 + 8);
  }
  *v20 = result + v19;
  return result;
}

void sub_223744DD8(unint64_t *a1, unint64_t a2, int32x4_t *a3, float32x2_t *a4)
{
  unint64_t v8;
  float32x4_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  unint64_t v14;
  int32x4_t *v15;
  uint64_t v16;
  float32x4_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  int8x16_t v23;
  int v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  size_t v28;
  const char *v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  const char *v32;
  size_t v33;
  _BYTE *v34;
  unint64_t v35;
  const char *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  std::__shared_weak_count_vtbl *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD v82[3];
  int v83;
  const char *v84;
  int v85;
  const char *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE object[24];
  __int128 v93;
  void *__p[2];
  unint64_t v95;
  char v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  sub_22339E3C8((uint64_t)a1, v8 + a2);
  if (a2)
  {
    v14 = a1[1];
    v15 = a3;
    do
    {
      v9.i32[0] = v15->i32[0];
      v10.i32[0] = v15->i32[1];
      v11.i32[0] = a4[1].i32[0];
      v12.i32[0] = a4[3].i32[0];
      v13.i32[0] = a4[5].i32[0];
      *(float32x2_t *)v17.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(*a4, *(float *)v15->i32), a4[2], v10.f32[0]), 0, a4[4]);
      *(float32x2_t *)&v17.u32[2] = vmla_f32(vmla_f32(vmul_f32(v11, *(float32x2_t *)v9.f32), v10, v12), 0, v13);
      *(float32x2_t *)v9.f32 = a4[6];
      v9.i32[2] = a4[7].i32[0];
      v9 = vaddq_f32(v17, v9);
      *(_DWORD *)&object[8] = v9.i32[2];
      *(_QWORD *)object = v9.i64[0];
      if (v14 < a1[2])
      {
        v16 = *(_QWORD *)object;
        *(_DWORD *)(v14 + 8) = *(_DWORD *)&object[8];
        *(_QWORD *)v14 = v16;
        v14 += 12;
      }
      else
      {
        v14 = sub_2233B2838(a1, (uint64_t *)object);
      }
      a1[1] = v14;
      v15 = (int32x4_t *)((char *)v15 + 8);
    }
    while (v15 != (int32x4_t *)((char *)a3 + 8 * a2));
    if (a2 >= 3)
    {
      v18 = a1[14];
      v19 = a1[15];
      v20 = (uint64_t)(a1 + 14);
      sub_22339E528(v20, a2 - 0x5555555555555555 * ((uint64_t)(v19 - v18) >> 2) - 2);
      sub_223EBA970(a2, a3, v20, v8, v21, v22, v23);
      return;
    }
  }
  sub_223745768(&v89);
  if (**(int **)(v89 + 56) <= 5)
  {
    v24 = *(unsigned __int8 *)(v89 + 72);
    v25 = *(_BYTE *)(v89 + 72) != 0;
    v26 = sub_22322F254(v89, "OSLogSurrogateAppender", 1, 0);
    if (((v26 == 0) & ~v25) == 0)
    {
      v82[0] = &v89;
      v82[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v82[2] = std::chrono::system_clock::now().__d_.__rep_;
      v83 = 5;
      v84 = "unknown file";
      v85 = 100;
      v87 = 0;
      v88 = 0;
      v86 = "unknown function";
      v27 = v89;
      if (*(char *)(v89 + 39) < 0)
      {
        v29 = *(const char **)(v89 + 16);
        v28 = *(_QWORD *)(v89 + 24);
        v81 = *(_QWORD *)v82[0] + 16;
        v31 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v31 & 1) != 0)
          goto LABEL_15;
      }
      else
      {
        v28 = *(unsigned __int8 *)(v89 + 39);
        v29 = (const char *)(*(_QWORD *)v82[0] + 16);
        v81 = (uint64_t)v29;
        v30 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v30 & 1) != 0)
          goto LABEL_15;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if ((_BYTE)v93 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_15:
      if (byte_255788F57 >= 0)
        v32 = (const char *)&xmmword_255788F40;
      else
        v32 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v33 = byte_255788F57;
      else
        v33 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v32, v29);
      v34 = &object[8];
      if (v33 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v33 >= 0x17)
      {
        v35 = v26;
        v36 = v29;
        v37 = v27;
        v38 = v24;
        v39 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v33 | 7) != 0x17)
          v39 = v33 | 7;
        v40 = v39 + 1;
        v34 = operator new(v39 + 1);
        *(_QWORD *)&object[16] = v33;
        *(_QWORD *)&v93 = v40 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v34;
        v24 = v38;
        v27 = v37;
        v29 = v36;
        v26 = v35;
      }
      else
      {
        BYTE7(v93) = v33;
        if (!v33)
        {
LABEL_29:
          v34[v33] = 0;
          BYTE8(v93) = 1;
          v41 = __p;
          if (v28 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v28 >= 0x17)
          {
            v43 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v28 | 7) != 0x17)
              v43 = v28 | 7;
            v44 = v43 + 1;
            v41 = operator new(v43 + 1);
            __p[1] = (void *)v28;
            v95 = v44 | 0x8000000000000000;
            __p[0] = v41;
          }
          else
          {
            HIBYTE(v95) = v28;
            if (!v28)
            {
              LOBYTE(__p[0]) = 0;
              v96 = 1;
              v42 = *(NSObject **)object;
              if ((SHIBYTE(v95) & 0x80000000) == 0)
                goto LABEL_33;
              goto LABEL_39;
            }
          }
          memmove(v41, v29, v28);
          *((_BYTE *)v41 + v28) = 0;
          v96 = 1;
          v42 = *(NSObject **)object;
          if ((SHIBYTE(v95) & 0x80000000) == 0)
          {
LABEL_33:
            if (!BYTE8(v93))
              goto LABEL_42;
            goto LABEL_40;
          }
LABEL_39:
          operator delete(__p[0]);
          if (!BYTE8(v93))
          {
LABEL_42:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v26 && *(_QWORD *)(v26 + 24))
            {
              v45 = _os_log_pack_size();
              v46 = (std::__shared_weak_count_vtbl *)operator new(v45, (std::align_val_t)8uLL);
              v47 = (std::__shared_weak_count *)operator new();
              v48 = v47;
              v47->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v47->__shared_owners_;
              v47->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v47->__shared_weak_owners_ = 0;
              v47[1].__vftable = v46;
              *(_QWORD *)object = v46;
              *(_QWORD *)&object[8] = v46;
              *(_QWORD *)&object[16] = v47;
              do
                v50 = __ldxr(p_shared_owners);
              while (__stxr(v50 + 1, p_shared_owners));
              v93 = 0uLL;
              __p[0] = 0;
              do
                v51 = __ldaxr(p_shared_owners);
              while (__stlxr(v51 - 1, p_shared_owners));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v48);
              }
              v52 = *(_QWORD *)object;
              v53 = _os_log_pack_fill();
              *(_DWORD *)v53 = 134217984;
              *(_QWORD *)(v53 + 4) = a2;
              v54 = operator new();
              v55 = *(unsigned __int8 *)(v27 + 39);
              v56 = v81;
              if ((v55 & 0x80u) != 0)
              {
                v56 = *(_QWORD *)(v27 + 16);
                v55 = *(_QWORD *)(v27 + 24);
              }
              *(_QWORD *)v54 = v52;
              *(_OWORD *)(v54 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v54 + 24) = v93;
              v93 = 0uLL;
              *(_QWORD *)(v54 + 40) = v56;
              *(_QWORD *)(v54 + 48) = v55;
              *(_BYTE *)(v54 + 56) = 16;
              v90 = 0;
              v91 = v54;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v26 + 24) + 40))(*(_QWORD *)(v26 + 24), &v91);
              v57 = v91;
              v91 = 0;
              if (v57)
              {
                v58 = *(std::__shared_weak_count **)(v57 + 32);
                if (v58)
                {
                  v59 = (unint64_t *)&v58->__shared_owners_;
                  do
                    v60 = __ldaxr(v59);
                  while (__stlxr(v60 - 1, v59));
                  if (!v60)
                  {
                    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                    std::__shared_weak_count::__release_weak(v58);
                  }
                }
                v61 = *(std::__shared_weak_count **)(v57 + 16);
                if (v61)
                {
                  v62 = (unint64_t *)&v61->__shared_owners_;
                  do
                    v63 = __ldaxr(v62);
                  while (__stlxr(v63 - 1, v62));
                  if (!v63)
                  {
                    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                    std::__shared_weak_count::__release_weak(v61);
                  }
                }
                MEMORY[0x227684CE8](v57, 0x10F0C40B62ED6C6);
                v64 = v90;
                v90 = 0;
                if (v64)
                {
                  v65 = *(std::__shared_weak_count **)(v64 + 32);
                  if (v65)
                  {
                    v66 = (unint64_t *)&v65->__shared_owners_;
                    do
                      v67 = __ldaxr(v66);
                    while (__stlxr(v67 - 1, v66));
                    if (!v67)
                    {
                      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                      std::__shared_weak_count::__release_weak(v65);
                    }
                  }
                  v68 = *(std::__shared_weak_count **)(v64 + 16);
                  if (v68)
                  {
                    v69 = (unint64_t *)&v68->__shared_owners_;
                    do
                      v70 = __ldaxr(v69);
                    while (__stlxr(v70 - 1, v69));
                    if (!v70)
                    {
                      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                      std::__shared_weak_count::__release_weak(v68);
                    }
                  }
                  MEMORY[0x227684CE8](v64, 0x10F0C40B62ED6C6);
                }
              }
              v71 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
              if (*((_QWORD *)&v93 + 1))
              {
                v72 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
                do
                  v73 = __ldaxr(v72);
                while (__stlxr(v73 - 1, v72));
                if (!v73)
                {
                  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                  std::__shared_weak_count::__release_weak(v71);
                }
              }
              v74 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v75 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v76 = __ldaxr(v75);
                while (__stlxr(v76 - 1, v75));
                if (!v76)
                {
                  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                  std::__shared_weak_count::__release_weak(v74);
                }
              }
            }
            else
            {
              os_log_type_enabled(v42, OS_LOG_TYPE_ERROR);
              *(_DWORD *)object = 134217984;
              *(_QWORD *)&object[4] = a2;
              v77 = (void *)_os_log_send_and_compose_impl();
              if (v77)
                free(v77);
            }
            if (v24)
            {
              sub_22322C138((uint64_t)v82, "Cannot triangulate polygon with %zu vertices.", a2);
              sub_223182C08((uint64_t)v82);
            }
            sub_223182C08((uint64_t)v82);
            v78 = v88;
            if (v88)
            {
              v79 = (unint64_t *)&v88->__shared_owners_;
              do
                v80 = __ldaxr(v79);
              while (__stlxr(v80 - 1, v79));
              if (!v80)
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
              }
            }
            return;
          }
LABEL_40:
          if (SBYTE7(v93) < 0)
            operator delete(*(void **)&object[8]);
          goto LABEL_42;
        }
      }
      memmove(v34, v32, v33);
      goto LABEL_29;
    }
  }
}

void sub_22374563C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a31)
  {
    if (a30 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_22374567C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;
  uint64_t v19;
  va_list va2;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v17 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v19 = va_arg(va3, _QWORD);
  sub_22319A054((uint64_t *)va2);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va3);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237456B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x227684CE8](v5, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237456DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237456F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *object,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223745768(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC4A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC4A0))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC498);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC4A0);
  }
  *a1 = qword_2540CC498;
}

void sub_223745804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC4A0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC4A0);
  _Unwind_Resume(a1);
}

uint64_t *sub_22374585C(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  BOOL v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  BOOL v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int64_t v98;
  int64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v75 = *(a2 - 1);
        v76 = *v8;
        if (*(_QWORD *)(v75 + 16) < *(_QWORD *)(*v8 + 16))
        {
          *v8 = v75;
          *(a2 - 1) = v76;
        }
        return result;
      case 3:
        v77 = *v8;
        v78 = v8[1];
        v79 = *(_QWORD *)(v78 + 16);
        v80 = *(a2 - 1);
        v81 = *(_QWORD *)(v80 + 16);
        if (v79 >= *(_QWORD *)(*v8 + 16))
        {
          if (v81 < v79)
          {
            v8[1] = v80;
            *(a2 - 1) = v78;
            v122 = *v8;
            v121 = v8[1];
            if (*(_QWORD *)(v121 + 16) < *(_QWORD *)(*v8 + 16))
            {
              *v8 = v121;
              v8[1] = v122;
            }
          }
        }
        else
        {
          if (v81 >= v79)
          {
            *v8 = v78;
            v8[1] = v77;
            v126 = *(a2 - 1);
            if (*(_QWORD *)(v126 + 16) >= *(_QWORD *)(v77 + 16))
              return result;
            v8[1] = v126;
          }
          else
          {
            *v8 = v80;
          }
          *(a2 - 1) = v77;
        }
        return result;
      case 4:
        v82 = v8 + 1;
        v83 = v8[1];
        v84 = v8 + 2;
        v85 = v8[2];
        v86 = *v8;
        v87 = *(_QWORD *)(v83 + 16);
        v88 = *(_QWORD *)(v85 + 16);
        if (v87 >= *(_QWORD *)(*v8 + 16))
        {
          if (v88 >= v87)
            goto LABEL_176;
          *v82 = v85;
          *v84 = v83;
          if (*(_QWORD *)(v85 + 16) >= *(_QWORD *)(v86 + 16))
          {
LABEL_175:
            v85 = v83;
LABEL_176:
            v127 = *(a2 - 1);
            if (*(_QWORD *)(v127 + 16) < *(_QWORD *)(v85 + 16))
            {
              *v84 = v127;
              *(a2 - 1) = v85;
              v128 = *v84;
              v129 = *v82;
              if (*(_QWORD *)(v128 + 16) < *(_QWORD *)(v129 + 16))
              {
                v8[1] = v128;
                v8[2] = v129;
                v130 = *v8;
                if (*(_QWORD *)(v128 + 16) < *(_QWORD *)(*v8 + 16))
                {
                  *v8 = v128;
                  v8[1] = v130;
                }
              }
            }
            return result;
          }
          *v8 = v85;
          v123 = v8 + 1;
        }
        else
        {
          if (v88 >= v87)
          {
            *v8 = v83;
            v8[1] = v86;
            if (*(_QWORD *)(v85 + 16) >= *(_QWORD *)(v86 + 16))
              goto LABEL_176;
            *v82 = v85;
          }
          else
          {
            *v8 = v85;
          }
          v123 = v8 + 2;
          v83 = v86;
        }
        *v123 = v86;
        goto LABEL_175;
      case 5:
        return sub_2237462C4(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 <= 191)
        {
          v89 = v8 + 1;
          v91 = v8 == a2 || v89 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v91)
            {
              v92 = 0;
              v93 = v8;
              do
              {
                v96 = *v93;
                v95 = v93[1];
                v93 = v89;
                if (*(_QWORD *)(v95 + 16) < *(_QWORD *)(v96 + 16))
                {
                  v97 = v92;
                  do
                  {
                    *(uint64_t *)((char *)v8 + v97 + 8) = v96;
                    if (!v97)
                    {
                      v94 = v8;
                      goto LABEL_118;
                    }
                    v96 = *(uint64_t *)((char *)v8 + v97 - 8);
                    v97 -= 8;
                  }
                  while (*(_QWORD *)(v95 + 16) < *(_QWORD *)(v96 + 16));
                  v94 = (uint64_t *)((char *)v8 + v97 + 8);
LABEL_118:
                  *v94 = v95;
                }
                v89 = v93 + 1;
                v92 += 8;
              }
              while (v93 + 1 != a2);
            }
          }
          else if (!v91)
          {
            do
            {
              v125 = *v7;
              v124 = v7[1];
              v7 = v89;
              if (*(_QWORD *)(v124 + 16) < *(_QWORD *)(v125 + 16))
              {
                do
                {
                  *v89 = v125;
                  v125 = *(v89 - 2);
                  --v89;
                }
                while (*(_QWORD *)(v124 + 16) < *(_QWORD *)(v125 + 16));
                *v89 = v124;
              }
              v89 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v98 = (unint64_t)(v10 - 2) >> 1;
            v99 = v98;
            do
            {
              if (v98 >= v99)
              {
                v101 = (2 * v99) | 1;
                v102 = &v8[v101];
                v103 = *v102;
                if (2 * v99 + 2 < v10)
                {
                  result = *(uint64_t **)(v103 + 16);
                  if ((uint64_t)result < *(_QWORD *)(v102[1] + 16))
                  {
                    v103 = v102[1];
                    ++v102;
                    v101 = 2 * v99 + 2;
                  }
                }
                v104 = &v8[v99];
                v105 = *v104;
                if (*(_QWORD *)(v103 + 16) >= *(_QWORD *)(*v104 + 16))
                {
                  v106 = *v102;
                  do
                  {
                    *v104 = v106;
                    v104 = v102;
                    if (v98 < v101)
                      break;
                    v107 = (2 * v101) | 1;
                    v102 = &v8[v107];
                    v108 = 2 * v101 + 2;
                    v106 = *v102;
                    if (v108 < v10 && *(_QWORD *)(v106 + 16) < *(_QWORD *)(v102[1] + 16))
                    {
                      v106 = v102[1];
                      ++v102;
                      v107 = v108;
                    }
                    result = *(uint64_t **)(v106 + 16);
                    v101 = v107;
                  }
                  while ((uint64_t)result >= *(_QWORD *)(v105 + 16));
                  *v104 = v105;
                }
              }
              v100 = v99-- <= 0;
            }
            while (!v100);
            v109 = (unint64_t)v9 >> 3;
            do
            {
              v110 = 0;
              v111 = *v8;
              v112 = v8;
              do
              {
                v113 = &v112[v110 + 1];
                v114 = (2 * v110) | 1;
                v115 = 2 * v110 + 2;
                if (v115 < v109 && *(_QWORD *)(*v113 + 16) < *(_QWORD *)(v113[1] + 16))
                {
                  ++v113;
                  v114 = v115;
                }
                *v112 = *v113;
                v112 = v113;
                v110 = v114;
              }
              while (v114 <= (uint64_t)((unint64_t)(v109 - 2) >> 1));
              if (v113 == --a2)
              {
                *v113 = v111;
              }
              else
              {
                *v113 = *a2;
                *a2 = v111;
                v116 = (char *)v113 - (char *)v8 + 8;
                if (v116 >= 9)
                {
                  v117 = (((unint64_t)v116 >> 3) - 2) >> 1;
                  v118 = &v8[v117];
                  v119 = *v118;
                  v120 = *v113;
                  if (*(_QWORD *)(*v118 + 16) < *(_QWORD *)(*v113 + 16))
                  {
                    do
                    {
                      *v113 = v119;
                      v113 = v118;
                      if (!v117)
                        break;
                      v117 = (v117 - 1) >> 1;
                      v118 = &v8[v117];
                      v119 = *v118;
                    }
                    while (*(_QWORD *)(*v118 + 16) < *(_QWORD *)(v120 + 16));
                    *v113 = v120;
                  }
                }
              }
              v100 = v109-- <= 2;
            }
            while (!v100);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = *(a2 - 1);
        v13 = *(_QWORD *)(v12 + 16);
        if ((unint64_t)v9 < 0x401)
        {
          v17 = *v8;
          v18 = v8[v11];
          v19 = *(_QWORD *)(*v8 + 16);
          if (v19 >= *(_QWORD *)(v18 + 16))
          {
            if (v13 < v19)
            {
              *v8 = v12;
              *(a2 - 1) = v17;
              v22 = v8[v11];
              if (*(_QWORD *)(*v8 + 16) < *(_QWORD *)(v22 + 16))
              {
                v8[v11] = *v8;
                *v8 = v22;
                --a3;
                if ((a4 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_55;
              }
            }
          }
          else
          {
            if (v13 >= v19)
            {
              v8[v11] = v17;
              *v8 = v18;
              v32 = *(a2 - 1);
              if (*(_QWORD *)(v32 + 16) >= *(_QWORD *)(v18 + 16))
                goto LABEL_32;
              *v8 = v32;
            }
            else
            {
              v8[v11] = v12;
            }
            *(a2 - 1) = v18;
          }
LABEL_32:
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_33;
LABEL_55:
          v33 = *v8;
          v34 = *(_QWORD *)(*v8 + 16);
          if (*(_QWORD *)(*(v8 - 1) + 16) < v34)
            goto LABEL_56;
          if (v34 >= *(_QWORD *)(*(a2 - 1) + 16))
          {
            v66 = v8 + 1;
            do
            {
              v8 = v66;
              if (v66 >= a2)
                break;
              ++v66;
            }
            while (v34 >= *(_QWORD *)(*v8 + 16));
          }
          else
          {
            do
            {
              v65 = v8[1];
              ++v8;
            }
            while (v34 >= *(_QWORD *)(v65 + 16));
          }
          v67 = a2;
          if (v8 < a2)
          {
            v67 = a2;
            do
              v68 = *--v67;
            while (v34 < *(_QWORD *)(v68 + 16));
          }
          if (v8 < v67)
          {
            v69 = *v8;
            v70 = *v67;
            do
            {
              *v8 = v70;
              *v67 = v69;
              v71 = *(_QWORD *)(v33 + 16);
              do
              {
                v72 = v8[1];
                ++v8;
                v69 = v72;
              }
              while (v71 >= *(_QWORD *)(v72 + 16));
              do
              {
                v73 = *--v67;
                v70 = v73;
              }
              while (v71 < *(_QWORD *)(v73 + 16));
            }
            while (v8 < v67);
          }
          v74 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v74;
          a4 = 0;
          *v74 = v33;
          continue;
        }
        v14 = v8[v11];
        v15 = *v8;
        v16 = *(_QWORD *)(v14 + 16);
        if (v16 >= *(_QWORD *)(*v8 + 16))
        {
          if (v13 < v16)
          {
            v8[v11] = v12;
            *(a2 - 1) = v14;
            v20 = v8[v11];
            v21 = *v8;
            if (*(_QWORD *)(v20 + 16) < *(_QWORD *)(*v8 + 16))
            {
              *v8 = v20;
              v8[v11] = v21;
            }
          }
        }
        else
        {
          if (v13 < v16)
          {
            *v8 = v12;
            goto LABEL_22;
          }
          *v8 = v14;
          v8[v11] = v15;
          v23 = *(a2 - 1);
          if (*(_QWORD *)(v23 + 16) < *(_QWORD *)(v15 + 16))
          {
            v8[v11] = v23;
LABEL_22:
            *(a2 - 1) = v15;
          }
        }
        v24 = v11 - 1;
        v25 = v8[v11 - 1];
        v26 = v8[1];
        v27 = *(_QWORD *)(v25 + 16);
        v28 = *(a2 - 2);
        v29 = *(_QWORD *)(v28 + 16);
        if (v27 >= *(_QWORD *)(v26 + 16))
        {
          if (v29 < v27)
          {
            v8[v24] = v28;
            *(a2 - 2) = v25;
            v30 = v8[v24];
            v31 = v8[1];
            if (*(_QWORD *)(v30 + 16) < *(_QWORD *)(v31 + 16))
            {
              v8[1] = v30;
              v8[v24] = v31;
            }
          }
        }
        else
        {
          if (v29 < v27)
          {
            v8[1] = v28;
            goto LABEL_36;
          }
          v8[1] = v25;
          v8[v24] = v26;
          v35 = *(a2 - 2);
          if (*(_QWORD *)(v35 + 16) < *(_QWORD *)(v26 + 16))
          {
            v8[v24] = v35;
LABEL_36:
            *(a2 - 2) = v26;
          }
        }
        v36 = v11 + 1;
        v37 = v8[v11 + 1];
        v38 = v8[2];
        v39 = *(_QWORD *)(v37 + 16);
        v40 = *(a2 - 3);
        v41 = *(_QWORD *)(v40 + 16);
        if (v39 >= *(_QWORD *)(v38 + 16))
        {
          if (v41 < v39)
          {
            v8[v36] = v40;
            *(a2 - 3) = v37;
            v42 = v8[v36];
            v43 = v8[2];
            if (*(_QWORD *)(v42 + 16) < *(_QWORD *)(v43 + 16))
            {
              v8[2] = v42;
              v8[v36] = v43;
            }
          }
        }
        else
        {
          if (v41 < v39)
          {
            v8[2] = v40;
            goto LABEL_45;
          }
          v8[2] = v37;
          v8[v36] = v38;
          v44 = *(a2 - 3);
          if (*(_QWORD *)(v44 + 16) < *(_QWORD *)(v38 + 16))
          {
            v8[v36] = v44;
LABEL_45:
            *(a2 - 3) = v38;
          }
        }
        v45 = v8[v11];
        v46 = v8[v24];
        v47 = *(_QWORD *)(v45 + 16);
        v48 = v8[v36];
        v49 = *(_QWORD *)(v48 + 16);
        if (v47 >= *(_QWORD *)(v46 + 16))
        {
          if (v49 < v47)
          {
            v8[v11] = v48;
            v8[v36] = v45;
            v45 = v48;
            if (*(_QWORD *)(v48 + 16) < *(_QWORD *)(v46 + 16))
            {
              v8[v24] = v48;
              v8[v11] = v46;
              v45 = v46;
            }
          }
        }
        else if (v49 >= v47)
        {
          v8[v24] = v45;
          v8[v11] = v46;
          v45 = v46;
          if (*(_QWORD *)(v48 + 16) < *(_QWORD *)(v46 + 16))
          {
            v8[v11] = v48;
            v8[v36] = v46;
            v45 = v48;
          }
        }
        else
        {
          v8[v24] = v48;
          v8[v36] = v46;
        }
        v50 = *v8;
        *v8 = v45;
        v8[v11] = v50;
        --a3;
        if ((a4 & 1) == 0)
          goto LABEL_55;
LABEL_33:
        v33 = *v8;
        v34 = *(_QWORD *)(*v8 + 16);
LABEL_56:
        v51 = 0;
        do
          v52 = v8[++v51];
        while (*(_QWORD *)(v52 + 16) < v34);
        v53 = &v8[v51];
        v54 = a2;
        if (v51 == 1)
        {
          v54 = a2;
          do
          {
            if (v53 >= v54)
              break;
            v56 = *--v54;
          }
          while (*(_QWORD *)(v56 + 16) >= v34);
        }
        else
        {
          do
            v55 = *--v54;
          while (*(_QWORD *)(v55 + 16) >= v34);
        }
        if (v53 >= v54)
        {
          v63 = v53 - 1;
          if (v53 - 1 == v8)
            goto LABEL_74;
LABEL_73:
          *v8 = *v63;
          goto LABEL_74;
        }
        v57 = *v54;
        v58 = &v8[v51];
        v59 = v54;
        do
        {
          *v58 = v57;
          *v59 = v52;
          v60 = *(_QWORD *)(v33 + 16);
          do
          {
            v61 = v58[1];
            ++v58;
            v52 = v61;
          }
          while (*(_QWORD *)(v61 + 16) < v60);
          do
          {
            v62 = *--v59;
            v57 = v62;
          }
          while (*(_QWORD *)(v62 + 16) >= v60);
        }
        while (v58 < v59);
        v63 = v58 - 1;
        if (v58 - 1 != v8)
          goto LABEL_73;
LABEL_74:
        *v63 = v33;
        if (v53 < v54)
        {
LABEL_77:
          result = (uint64_t *)sub_22374585C(v7, v63, a3, a4 & 1);
          a4 = 0;
          v8 = v63 + 1;
          continue;
        }
        v64 = sub_223746464(v8, v63);
        v8 = v63 + 1;
        result = (uint64_t *)sub_223746464(v63 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v64)
            continue;
          goto LABEL_77;
        }
        a2 = v63;
        if (!v64)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_2237462C4(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *a2;
  v6 = *result;
  v7 = *(_QWORD *)(*a2 + 16);
  v8 = *a3;
  v9 = *(_QWORD *)(*a3 + 16);
  if (v7 >= *(_QWORD *)(*result + 16))
  {
    if (v9 >= v7)
    {
      v5 = *a3;
      v11 = *a4;
      if (*(_QWORD *)(*a4 + 16) >= *(_QWORD *)(*a3 + 16))
        goto LABEL_17;
      goto LABEL_14;
    }
    *a2 = v8;
    *a3 = v5;
    v10 = *result;
    if (*(_QWORD *)(*a2 + 16) < *(_QWORD *)(*result + 16))
    {
      *result = *a2;
      *a2 = v10;
      v5 = *a3;
      v11 = *a4;
      if (*(_QWORD *)(*a4 + 16) >= *(_QWORD *)(*a3 + 16))
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    if (v9 >= v7)
    {
      *result = v5;
      *a2 = v6;
      v5 = *a3;
      if (*(_QWORD *)(*a3 + 16) >= *(_QWORD *)(v6 + 16))
        goto LABEL_11;
      *a2 = v5;
    }
    else
    {
      *result = v8;
    }
    *a3 = v6;
    v5 = v6;
  }
LABEL_11:
  v11 = *a4;
  if (*(_QWORD *)(*a4 + 16) >= *(_QWORD *)(v5 + 16))
    goto LABEL_17;
LABEL_14:
  *a3 = v11;
  *a4 = v5;
  v12 = *a2;
  if (*(_QWORD *)(*a3 + 16) < *(_QWORD *)(*a2 + 16))
  {
    *a2 = *a3;
    *a3 = v12;
    v13 = *result;
    if (*(_QWORD *)(*a2 + 16) < *(_QWORD *)(*result + 16))
    {
      *result = *a2;
      *a2 = v13;
    }
  }
LABEL_17:
  v14 = *a4;
  if (*(_QWORD *)(*a5 + 16) < *(_QWORD *)(*a4 + 16))
  {
    *a4 = *a5;
    *a5 = v14;
    v15 = *a3;
    if (*(_QWORD *)(*a4 + 16) < *(_QWORD *)(*a3 + 16))
    {
      *a3 = *a4;
      *a4 = v15;
      v16 = *a2;
      if (*(_QWORD *)(*a3 + 16) < *(_QWORD *)(*a2 + 16))
      {
        *a2 = *a3;
        *a3 = v16;
        v17 = *result;
        if (*(_QWORD *)(*a2 + 16) < *(_QWORD *)(*result + 16))
        {
          *result = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

BOOL sub_223746464(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v10 = *(a2 - 1);
      v11 = *a1;
      if (*(_QWORD *)(v10 + 16) < *(_QWORD *)(*a1 + 16))
      {
        *a1 = v10;
        *(a2 - 1) = v11;
      }
      return 1;
    case 3:
      v12 = *a1;
      v13 = a1[1];
      v14 = *(_QWORD *)(v13 + 16);
      v15 = *(a2 - 1);
      v16 = *(_QWORD *)(v15 + 16);
      if (v14 >= *(_QWORD *)(*a1 + 16))
      {
        if (v16 < v14)
        {
          a1[1] = v15;
          *(a2 - 1) = v13;
          v25 = *a1;
          v24 = a1[1];
          if (*(_QWORD *)(v24 + 16) < *(_QWORD *)(*a1 + 16))
          {
            *a1 = v24;
            a1[1] = v25;
            return 1;
          }
        }
      }
      else
      {
        if (v16 < v14)
        {
          *a1 = v15;
          *(a2 - 1) = v12;
          return 1;
        }
        *a1 = v13;
        a1[1] = v12;
        v33 = *(a2 - 1);
        if (*(_QWORD *)(v33 + 16) < *(_QWORD *)(v12 + 16))
        {
          a1[1] = v33;
          *(a2 - 1) = v12;
          return 1;
        }
      }
      return 1;
    case 4:
      v17 = a1 + 1;
      v18 = a1[1];
      v19 = a1 + 2;
      v20 = a1[2];
      v21 = *a1;
      v22 = *(_QWORD *)(v18 + 16);
      v23 = *(_QWORD *)(v20 + 16);
      if (v22 < *(_QWORD *)(*a1 + 16))
      {
        if (v23 >= v22)
        {
          *a1 = v18;
          a1[1] = v21;
          if (*(_QWORD *)(v20 + 16) >= *(_QWORD *)(v21 + 16))
            goto LABEL_47;
          *v17 = v20;
        }
        else
        {
          *a1 = v20;
        }
        v26 = a1 + 2;
        v18 = v21;
        goto LABEL_45;
      }
      if (v23 >= v22)
        goto LABEL_47;
      *v17 = v20;
      *v19 = v18;
      if (*(_QWORD *)(v20 + 16) < *(_QWORD *)(v21 + 16))
      {
        *a1 = v20;
        v26 = a1 + 1;
LABEL_45:
        *v26 = v21;
      }
      v20 = v18;
LABEL_47:
      v34 = *(a2 - 1);
      if (*(_QWORD *)(v34 + 16) >= *(_QWORD *)(v20 + 16))
        return 1;
      *v19 = v34;
      *(a2 - 1) = v20;
      v35 = *v19;
      v36 = *v17;
      if (*(_QWORD *)(v35 + 16) >= *(_QWORD *)(v36 + 16))
        return 1;
      a1[1] = v35;
      a1[2] = v36;
      v37 = *a1;
      if (*(_QWORD *)(v35 + 16) >= *(_QWORD *)(*a1 + 16))
        return 1;
      *a1 = v35;
      a1[1] = v37;
      return 1;
    case 5:
      sub_2237462C4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v3 = a1 + 2;
      v4 = a1[2];
      v5 = a1 + 1;
      v6 = a1[1];
      v7 = *a1;
      v8 = *(_QWORD *)(v6 + 16);
      v9 = *(_QWORD *)(v4 + 16);
      if (v8 < *(_QWORD *)(*a1 + 16))
      {
        if (v9 >= v8)
        {
          *a1 = v6;
          a1[1] = v7;
          if (*(_QWORD *)(v4 + 16) >= *(_QWORD *)(v7 + 16))
            goto LABEL_29;
          *v5 = v4;
        }
        else
        {
          *a1 = v4;
        }
        v5 = a1 + 2;
        goto LABEL_28;
      }
      if (v9 < v8)
      {
        *v5 = v4;
        *v3 = v6;
        if (*(_QWORD *)(v4 + 16) < *(_QWORD *)(v7 + 16))
        {
          *a1 = v4;
LABEL_28:
          *v5 = v7;
        }
      }
LABEL_29:
      v27 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v28 = 0;
      v29 = 0;
      while (1)
      {
        v30 = *v27;
        v31 = *v3;
        if (*(_QWORD *)(*v27 + 16) < *(_QWORD *)(v31 + 16))
          break;
LABEL_38:
        v3 = v27;
        v28 += 8;
        if (++v27 == a2)
          return 1;
      }
      v32 = v28;
      do
      {
        *(uint64_t *)((char *)a1 + v32 + 24) = v31;
        if (v32 == -16)
        {
          *a1 = v30;
          if (++v29 != 8)
            goto LABEL_38;
          return v27 + 1 == a2;
        }
        v31 = *(uint64_t *)((char *)a1 + v32 + 8);
        v32 -= 8;
      }
      while (*(_QWORD *)(v30 + 16) < *(_QWORD *)(v31 + 16));
      *(uint64_t *)((char *)a1 + v32 + 24) = v30;
      if (++v29 != 8)
        goto LABEL_38;
      return v27 + 1 == a2;
  }
}

void sub_2237467C8(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  __int16 v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  _BYTE v57[12];
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v7)
      goto LABEL_54;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (*(_BYTE *)(a1 + 73))
      {
LABEL_8:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(&v56, v6, 0);
        v12 = *(_QWORD *)(a1 + 8);
        v11 = *(std::__shared_weak_count **)(a1 + 16);
        v54 = v12;
        v55 = v11;
        if (!v11)
          goto LABEL_26;
LABEL_24:
        v20 = (unint64_t *)&v11->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
LABEL_26:
        v22 = *(_DWORD *)(a1 + 64);
        v23 = *(_DWORD *)(a1 + 68);
        v25 = *a2;
        v24 = a2[1];
        v26 = *(_QWORD *)(a1 + 24);
        if (a2[3])
          v27 = a2[2] == 0;
        else
          v27 = 1;
        v28 = *((_QWORD *)a2 + 1);
        if (v27)
          v28 = 0;
        *(_DWORD *)v57 = 3;
        *(_QWORD *)&v57[4] = v28;
        v29 = v28;
        v30 = *(_QWORD *)v57;
        v31 = HIDWORD(v28);
        *(_DWORD *)v57 = 1;
        v32 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)&v57[4] = v32;
        v46 = *(_QWORD *)v57;
        v47 = v30;
        if (HIDWORD(v32) * HIDWORD(v28) == -1)
        {
          v43 = v26;
          v44 = v23;
          v45 = v22;
          v33 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C);
          v23 = v44;
          v22 = v45;
          v26 = v43;
          if (v33)
            abort();
        }
        v34 = v26 + (v25 * v22 + v24 * v23);
        v35 = *(_WORD *)(a1 + 72);
        if (v11)
        {
          v36 = (unint64_t *)&v11->__shared_owners_;
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
          do
            v38 = __ldxr(v36);
          while (__stxr(v38 + 1, v36));
          *(_QWORD *)a3 = v12;
          *(_QWORD *)(a3 + 8) = v11;
          *(_QWORD *)(a3 + 16) = v34;
          *(_QWORD *)(a3 + 24) = v47;
          *(_DWORD *)(a3 + 32) = v31;
          *(_QWORD *)(a3 + 36) = v46;
          *(_DWORD *)(a3 + 44) = HIDWORD(v32);
          *(_QWORD *)(a3 + 48) = v29;
          *(_QWORD *)(a3 + 56) = v32;
          *(_WORD *)(a3 + 64) = v35;
          do
            v39 = __ldaxr(v36);
          while (__stlxr(v39 - 1, v36));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        else
        {
          *(_QWORD *)a3 = v12;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = v34;
          *(_QWORD *)(a3 + 24) = v47;
          *(_DWORD *)(a3 + 32) = v31;
          *(_QWORD *)(a3 + 36) = v46;
          *(_DWORD *)(a3 + 44) = HIDWORD(v32);
          *(_QWORD *)(a3 + 48) = v29;
          *(_QWORD *)(a3 + 56) = v32;
          *(_WORD *)(a3 + 64) = v35;
        }
        if (v55)
        {
          v40 = &v55->__shared_owners_;
          do
            v41 = __ldaxr((unint64_t *)v40);
          while (__stlxr(v41 - 1, (unint64_t *)v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        v42 = v56;
        v56 = 0;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
        return;
      }
    }
    else
    {
LABEL_54:
      if (*(_BYTE *)(a1 + 73))
        goto LABEL_8;
    }
    v56 = 0;
    v12 = *(_QWORD *)(a1 + 8);
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    v54 = v12;
    v55 = v11;
    if (!v11)
      goto LABEL_26;
    goto LABEL_24;
  }
  v54 = 0;
  v55 = 0;
  v13 = *(_QWORD *)(a1 + 24) + (*a2 * *(_DWORD *)(a1 + 64) + a2[1] * *(_DWORD *)(a1 + 68));
  if (a2[3])
    v14 = a2[2] == 0;
  else
    v14 = 1;
  v15 = *((_QWORD *)a2 + 1);
  if (v14)
    v15 = 0;
  *(_QWORD *)&v57[4] = v15;
  *(_DWORD *)v57 = 3;
  v16 = *(_QWORD *)v57;
  *(_DWORD *)v57 = 1;
  *(_QWORD *)&v57[4] = *(_QWORD *)(a1 + 64);
  *(_QWORD *)&v48 = v13;
  *((_QWORD *)&v48 + 1) = v16;
  v49 = HIDWORD(v15);
  v50 = *(_QWORD *)v57;
  v51 = *(_DWORD *)&v57[8];
  v52 = v15;
  v53 = *(_QWORD *)&v57[4];
  if (*(_DWORD *)&v57[8] * HIDWORD(v15) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_22329CF40(a3, &v54, &v48);
  v17 = v55;
  if (v55)
  {
    v18 = &v55->__shared_owners_;
    do
      v19 = __ldaxr((unint64_t *)v18);
    while (__stlxr(v19 - 1, (unint64_t *)v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_223746BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21)
{
  uint64_t v22;

  sub_223167354((uint64_t)&a19);
  v22 = a21;
  a21 = 0;
  if (!v22)
    _Unwind_Resume(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  _Unwind_Resume(a1);
}

void sub_223746C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223746C24(uint64_t a1@<X0>, int32x2_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, float32x2_t *a5@<X4>, float32x4_t *a6@<X5>, int32x2_t *a7@<X6>, uint64_t a8@<X8>, float a9@<S0>)
{
  float32x2_t v9;
  uint64_t v15;
  int32x2_t v16;
  int32x2_t v17;
  uint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  int32x2_t v27;
  int32x2_t v28;
  uint64_t v29;
  int32x2_t v30;
  int32x2_t v31;
  int v32;
  int v33;
  __int16 v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  float32x2_t *v40;
  uint64_t v41;
  float32x4_t v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  int8x16_t v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x4_t v56;
  int8x16_t v57;
  float32x2_t v58;
  float v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int32x2_t v66;
  int32x2_t v67;
  unint64_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x4_t v76;
  float32x2_t v77;
  float32x4_t v78;
  uint64_t v79;
  int8x16_t v80;
  float32x2_t v81;
  float32x2_t v82;
  int8x16_t v83;
  float32x2_t v84;
  float32x4_t v85;
  float v86;
  int8x16_t v87;
  float v88;
  BOOL v89;
  float32x4_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x2_t v96;
  simd_float3x3 v97;
  float32x2_t v98;
  uint32x2_t *v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x2_t v110;
  float32x2_t v111;
  void *v112;
  float32x2_t v113;
  float v114;
  float v115;
  float32x2_t v116;
  float v117;
  int32x2_t v118;
  int32x2_t v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  const char *v127;
  size_t v128;
  unsigned __int8 v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  const char *v134;
  size_t v135;
  unsigned __int8 v136;
  float32x4_t v137;
  float32x2_t v138;
  int8x16_t v139;
  float32x2_t v140;
  float32x4_t v141;
  int8x16_t v142;
  float32x2_t v143;
  float64x2_t v144;
  unint64_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  double v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  double v156;
  float64x2_t v157;
  float64x2_t v158;
  double v159;
  BOOL v160;
  double v162;
  double v163;
  double v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  double v168;
  double v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  double v173;
  double v174;
  unsigned int v175;
  unsigned int v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  double v180;
  int8x16_t v181;
  unint64_t v182;
  double v183;
  unsigned int v184;
  float64x2_t v185;
  float64x2_t v196;
  uint64_t v197;
  unsigned __int8 v198;
  const char *v199;
  size_t v200;
  void **v201;
  uint64_t v202;
  uint64_t v203;
  _BYTE *v204;
  NSObject *v205;
  uint64_t v206;
  uint64_t v207;
  size_t v208;
  std::__shared_weak_count_vtbl *v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  const char *v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  void *v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  void *v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  unsigned __int8 v244;
  const char *v245;
  size_t v246;
  void **v247;
  uint64_t v248;
  uint64_t v249;
  _BYTE *v250;
  NSObject *v251;
  uint64_t v252;
  uint64_t v253;
  size_t v254;
  std::__shared_weak_count_vtbl *v255;
  std::__shared_weak_count *v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t v260;
  void *v261;
  char *v262;
  uint64_t v263;
  const char *v264;
  void *v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  uint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  void *v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  int32x2_t v292;
  int32x2_t v293;
  void **v294;
  double v295;
  float32x4_t v296;
  float32x4_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v301;
  float32x2_t v302;
  float32x2_t v303;
  char *v304;
  __n128 v305;
  int32x2_t *v306;
  float32x2_t *v307;
  float32x2_t v309;
  int8x16_t v310;
  float32x4_t v311;
  int32x2_t v312;
  float32x2_t v314;
  float32x2_t v315;
  float32x2_t v316;
  float v317;
  float32x2_t v318;
  float32x4_t v320;
  __n128 v321;
  int8x16_t v322;
  float32x2_t v323;
  int8x16_t v324;
  const char *v325;
  const char *v326;
  int8x16_t v327;
  int8x16_t v328;
  int v329;
  int v330;
  uint64_t v331;
  std::__shared_weak_count *v332;
  uint64_t v333;
  int32x2_t v334;
  int v335;
  __int128 v336;
  uint64_t v337;
  uint64_t v338;
  _BYTE __p[20];
  unsigned __int32 v340;
  float32x2_t v341;
  unsigned __int32 v342;
  char v343;
  _BYTE v344[20];
  __int32 v345;
  __int128 v346;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v348;
  const char *v349;
  int v350;
  const char *v351;
  uint64_t v352;
  std::__shared_weak_count *v353;
  float32x4_t v354;
  int8x16_t v355;
  int8x16_t v356;
  simd_float3 v357;
  void *v358[2];
  char v359;
  char v360;
  uint64_t v361;
  void *v362[3];
  _BYTE v363[32];
  __int128 v364;
  uint64_t v365;
  __int16 v366;
  uint64_t v367;

  v367 = *MEMORY[0x24BDAC8D0];
  v15 = a1 + 8;
  if (*(_DWORD *)(a1 + 72) == *(_DWORD *)(a3 + 8) && *(_DWORD *)(a1 + 76) == *(_DWORD *)(a3 + 12))
  {
    sub_2231CBB84(v15, (uint64_t)&qword_22464C772);
    v17 = a2[1];
    v16 = a2[2];
    v337 = 0;
    v336 = 0uLL;
    v18 = *(_QWORD *)&v16 - *(_QWORD *)&v17;
    if (!v18)
      goto LABEL_17;
  }
  else
  {
    v362[0] = &off_24EC24788;
    sub_2236B4564((_DWORD *)(a3 + 8), &qword_22464C772, (uint64_t *)&v362[1]);
    v19 = *(_OWORD *)&v362[1];
    v362[1] = 0;
    v362[2] = 0;
    v20 = *(std::__shared_weak_count **)(a1 + 24);
    *(_OWORD *)(a1 + 16) = v19;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = *(_OWORD *)&v363[16];
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v363;
    *(_OWORD *)(a1 + 48) = v23;
    *(_OWORD *)(a1 + 64) = v364;
    v24 = (std::__shared_weak_count *)v362[2];
    *(_QWORD *)(a1 + 80) = v365;
    *(_WORD *)(a1 + 88) = v366;
    if (!v24)
      goto LABEL_14;
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
      v293 = a2[1];
      v292 = a2[2];
      v337 = 0;
      v336 = 0uLL;
      v18 = *(_QWORD *)&v292 - *(_QWORD *)&v293;
      if (!v18)
        goto LABEL_17;
    }
    else
    {
LABEL_14:
      v28 = a2[1];
      v27 = a2[2];
      v337 = 0;
      v336 = 0uLL;
      v18 = *(_QWORD *)&v27 - *(_QWORD *)&v28;
      if (!v18)
        goto LABEL_17;
    }
  }
  v29 = v18 / 24;
  if ((unint64_t)(v18 / 24) >> 61)
    sub_22367C394();
  *(_QWORD *)&v336 = operator new(8 * v29);
  v337 = v336 + 8 * v29;
  bzero((void *)v336, 8 * v29);
  *((_QWORD *)&v336 + 1) = v337;
LABEL_17:
  v307 = a5;
  if (*(_DWORD *)a1)
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/KeyframePlaneWarper.cpp", 190, (uint64_t)"", 0, (uint64_t)"Invalid keyframe plane warping algorithm!", 41, (void (*)(void **))sub_22457406C);
    abort();
  }
  v30 = a2[24];
  v31 = a2[25];
  memset(v362, 0, sizeof(v362));
  v306 = a7;
  v299 = a8;
  if (*(_QWORD *)&v31 == *(_QWORD *)&v30)
  {
    v39 = 0;
  }
  else
  {
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)&v31 - *(_QWORD *)&v30) >> 3)) >> 60)
      sub_22316E078();
    v362[0] = operator new(0xE8BA2E8BA2E8BA30 * ((uint64_t)(*(_QWORD *)&v31 - *(_QWORD *)&v30) >> 3));
    v362[1] = v362[0];
    v362[2] = (char *)v362[0] - 0x1745D1745D1745D0 * ((uint64_t)(*(_QWORD *)&v31 - *(_QWORD *)&v30) >> 3);
    v354.i64[0] = (uint64_t)v362;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)&v30 + 8) == **(_QWORD **)&v30)
        goto LABEL_31;
      v32 = *(__int16 *)(*(_QWORD *)&v30 + 64);
      if (v32 < 0 || (v33 = *(__int16 *)(*(_QWORD *)&v30 + 66), v33 < 0))
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/RLRegion.hpp", 180, (uint64_t)"(bounding_box_.min_corner.e() >= T{0}).all()", 44, (uint64_t)"Cannot create arr::IndexRange2 from region with negative row/column indices", 75, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        LOWORD(v32) = *(_WORD *)(*(_QWORD *)&v30 + 64);
        LOWORD(v33) = *(_WORD *)(*(_QWORD *)&v30 + 66);
      }
      v34 = *(_WORD *)(*(_QWORD *)&v30 + 68) - v32;
      _ZF = v34 == -1 || (unsigned __int16)~(*(_WORD *)(*(_QWORD *)&v30 + 70) - v33) == 0;
      if (_ZF)
      {
LABEL_31:
        v38 = 0;
        v37 = 0xFFFFFFFF00000000;
        v36 = 0xFFFFFFFFLL;
      }
      else
      {
        v36 = (__int16)v32;
        v37 = (uint64_t)(__int16)v33 << 32;
        v38 = (v36 + v34) | ((unint64_t)((__int16)(*(_WORD *)(*(_QWORD *)&v30 + 70)
                                                                                    - v33)
                                                                          + (__int16)v33) << 32);
      }
      *(_QWORD *)&v346 = v36 | v37;
      *((_QWORD *)&v346 + 1) = v38;
      sub_2232E9564((char ***)&v354, &v346);
      *(_QWORD *)&v30 += 88;
    }
    while (*(_QWORD *)&v30 != *(_QWORD *)&v31);
    v39 = (char *)v362[0];
  }
  v298 = v15;
  v304 = v39;
  sub_2236B487C(v15, &v331);
  v40 = v307;
  v41 = a4;
  *(float32x2_t *)v42.f32 = v307[4];
  v43.n128_u32[0] = v307[5].u32[0];
  v44.n128_u32[0] = v307[5].u32[1];
  v45.n128_u32[0] = a6->u32[2];
  v46.n128_u64[0] = a6->i64[0];
  v47.n128_u32[0] = a6[1].u32[2];
  v48.i64[0] = a6[1].i64[0];
  v49.n128_u32[0] = a6[2].u32[2];
  v50.n128_u64[0] = a6[3].u64[0];
  v50.n128_u32[2] = a6[3].u32[2];
  v51.n128_u64[0] = a6[2].u64[0];
  v52.i32[0] = a7[1].i32[0];
  v53 = (float32x2_t)a7[2];
  v54 = (float32x2_t)a7[4];
  v55.i32[0] = a7[5].i32[0];
  *(int32x2_t *)v56.f32 = a7[6];
  v56.i32[2] = a7[7].i32[0];
  v57 = (int8x16_t)vnegq_f32(v56);
  v52.i32[1] = a7[3].i32[0];
  v58 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*a7, (int32x2_t)v53), *(float *)v57.i32), (float32x2_t)vzip2_s32(*a7, (int32x2_t)v53), *(float32x2_t *)v56.f32, 1), v52, v56, 2);
  LODWORD(v59) = vmla_f32(vmls_lane_f32(vmul_f32(v54, *(float32x2_t *)v57.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v54, 1), *(float32x2_t *)v56.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL), v55).u32[0];
  v60 = a6[1];
  v61 = a6[2];
  v62 = a6[3];
  v63 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(*a6, (float32x2_t)*a7, 1), v60, v53, 1), v61, v54, 1), (float32x4_t)0, v62);
  v64 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*a6, v52.f32[0]), v60, v52.f32[1]), v61, v55.f32[0]), (float32x4_t)0, v62);
  v65 = vaddq_f32(v62, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*a6, v58.f32[0]), v60, v58, 1), v61, v59));
  v354 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*a6, COERCE_FLOAT(*a7)), v60, v53.f32[0]), v61, v54.f32[0]), (float32x4_t)0, v62);
  v355 = (int8x16_t)v63;
  v356 = (int8x16_t)v64;
  v357 = (simd_float3)v65;
  v67 = a2[1];
  v66 = a2[2];
  if (*(_QWORD *)&v67 != *(_QWORD *)&v66)
  {
    v68 = 0;
    v69 = (int8x16_t)v46;
    v69.i32[2] = v45.n128_u32[0];
    v70 = v48;
    v70.i32[2] = v47.n128_u32[0];
    v71 = (int8x16_t)v51;
    v71.i32[2] = v49.n128_u32[0];
    v72 = (int8x16_t)vnegq_f32((float32x4_t)v50);
    v73 = vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v46.n128_u64[0], *(int32x2_t *)v48.i8), *(float *)v72.i32);
    v74 = (float32x2_t)vzip2_s32((int32x2_t)v46.n128_u64[0], *(int32x2_t *)v48.i8);
    v75 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v72.i8, 1);
    v45.n128_u32[1] = v47.n128_u32[0];
    *(float32x2_t *)v76.f32 = vmls_laneq_f32(vmls_lane_f32(v73, v74, (float32x2_t)v50.n128_u64[0], 1), (float32x2_t)v45.n128_u64[0], (float32x4_t)v50, 2);
    v77 = (float32x2_t)vextq_s8(v72, v72, 8uLL).u64[0];
    *(float32x2_t *)&v76.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32((float32x2_t)v51.n128_u64[0], *(float32x2_t *)v72.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v51.n128_u64[0], 1), (float32x2_t)v50.n128_u64[0], 1), v77, (float32x2_t)v49.n128_u64[0]);
    v320 = v76;
    v309 = vcvt_f32_u32((uint32x2_t)vadd_s32(v334, (int32x2_t)-1));
    v9.i32[0] = 1.0;
    v316 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v69.i8, *(float32x2_t *)v72.i8), v75, *(float32x2_t *)v69.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL), v77);
    v315 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v72.i8), v75, *(float32x2_t *)v70.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL), v77);
    v314 = vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)v51.n128_u64[0], *(float32x2_t *)v72.i8), v75, (float32x2_t)v51.n128_u64[0], 1), (float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL), v77);
    v78 = (float32x4_t)__PAIR64__(v44.n128_u32[0], v42.u32[1]);
    v42.i32[1] = 0;
    v42.i64[1] = v43.n128_u32[0];
    v296 = v78;
    v297 = v42;
    v312 = a2[2];
    while (1)
    {
      v44.n128_u64[0] = **(_QWORD **)&v67;
      v44.n128_u32[2] = *(_DWORD *)(*(_QWORD *)&v67 + 8);
      v327 = (int8x16_t)v44;
      v80 = (int8x16_t)vsubq_f32(v320, (float32x4_t)v44);
      v81 = (float32x2_t)vextq_s8(v80, v80, 8uLL).u64[0];
      v82 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v80.i8, *(float32x2_t *)v80.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v80.i8, 1), *(float32x2_t *)v80.i8, 1), v81, v81);
      v83 = (int8x16_t)vmulq_n_f32((float32x4_t)v80, 1.0 / sqrtf(v82.f32[0]));
      v82.i32[0] = *(_DWORD *)(*(_QWORD *)&v67 + 20);
      v50.n128_u64[0] = *(_QWORD *)(*(_QWORD *)&v67 + 12);
      v321 = v50;
      v323 = v82;
      v43.n128_f32[0] = acosf(vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)v50.n128_u64[0], *(float32x2_t *)v83.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v83.i8, 1), (float32x2_t)v50.n128_u64[0], 1), (float32x2_t)*(_OWORD *)&vextq_s8(v83, v83, 8uLL), v82).f32[0])* 57.296;
      v44.n128_u32[0] = 1117782016;
      if (v43.n128_f32[0] <= 80.0)
        break;
      v79 = v336;
      if (v68 >= (uint64_t)(*((_QWORD *)&v336 + 1) - v336) >> 3)
        goto LABEL_324;
LABEL_38:
      *(_QWORD *)(v79 + 8 * v68) = 0;
LABEL_39:
      *(_QWORD *)&v67 += 24;
      ++v68;
      if (*(_QWORD *)&v67 == *(_QWORD *)&v66)
        goto LABEL_314;
    }
    v43.n128_u64[0] = (unint64_t)vdup_lane_s32((int32x2_t)v321.n128_u64[0], 1);
    v85 = (float32x4_t)v321;
    v85.i32[2] = v323.i32[0];
    v86 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32), (float32x2_t)v43.n128_u64[0], (float32x2_t)v43.n128_u64[0]), v323, v323).f32[0];
    v87 = (int8x16_t)v85;
    if (v86 != 1.0)
    {
      v88 = v86 + -1.0;
      if (v86 < 1.0)
        v88 = 1.0 - v86;
      v89 = v88 > 0.000001;
      v87 = (int8x16_t)v85;
      if (v89)
        v87 = (int8x16_t)vmulq_n_f32(v85, 1.0 / sqrtf(v86));
    }
    v90 = (float32x4_t)vextq_s8(v327, v327, 8uLL);
    v91 = (float32x2_t)vextq_s8(v87, v87, 8uLL).u64[0];
    v92.i32[1] = v315.i32[1];
    v317 = vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(v316, *(float32x2_t *)v87.i8), v315, *(float32x2_t *)v87.i8, 1), v91, v314), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v327.i8, *(float32x2_t *)v87.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.i8, 1), *(float32x2_t *)v327.i8, 1), v91, *(float32x2_t *)v90.f32)).f32[0];
    if (v317 >= 0.1)
    {
      v50.n128_u64[0] = (unint64_t)*a7;
      v91.i32[0] = a7[1].i32[0];
      v51.n128_u64[0] = (unint64_t)a7[2];
      v92.i32[0] = a7[3].i32[0];
      v93 = (float32x2_t)a7[4];
      v84.i32[0] = a7[5].i32[0];
      *(float32x2_t *)v94.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)*a7, *(float *)v327.i32), (float32x2_t)v51.n128_u64[0], *(float32x2_t *)v327.i8, 1), v93, (float32x4_t)v327, 2);
      *(float32x2_t *)&v94.u32[2] = vmla_f32(vmla_f32(vmul_f32(v91, *(float32x2_t *)v327.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v327.i8, 1), v92), *(float32x2_t *)v90.f32, v84);
      *(int32x2_t *)v90.f32 = a7[6];
      v90.i32[2] = a7[7].i32[0];
      v95 = vaddq_f32(v94, v90);
      v96 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)*a7, v85.f32[0]), (float32x2_t)v51.n128_u64[0], *(float32x2_t *)v85.f32, 1), v93, v85, 2);
      *(_DWORD *)&v344[8] = v95.i32[2];
      *(_QWORD *)v344 = v95.i64[0];
      v345 = vmla_f32(vmla_f32(vmul_f32(v91, (float32x2_t)v321.n128_u64[0]), (float32x2_t)v43.n128_u64[0], v92), v323, v84).u32[0];
      *(float32x2_t *)&v344[12] = v96;
      sub_2237656E8(v40, v41, (uint64_t)v344, (float32x2_t *)&v354, (uint64_t)__p, (int8x16_t)v43, v95, (float32x4_t)v50, (float32x4_t)v51, v92);
      if (v343)
      {
        v324 = v355;
        v328 = (int8x16_t)v354;
        v97.columns[1] = *(simd_float3 *)v344;
        v322 = v356;
        v97.columns[0] = v357;
        v310 = *(int8x16_t *)v344;
        v311 = (float32x4_t)v357;
        v98 = *(float32x2_t *)&v344[12];
        v97.columns[0].i32[0] = v345;
        v318 = *(float32x2_t *)v97.columns[0].f32;
        sub_22322BB84((uint64_t)__p, (uint64_t)v362, v97);
        if (!v343)
          sub_22324A974();
        v99 = (uint32x2_t *)&v39[16 * v68];
        v100 = vcvt_f32_u32(*v99);
        v101 = vcvt_f32_u32(v99[1]);
        v43 = *(__n128 *)__p;
        v49.n128_u32[0] = v340;
        v50.n128_u32[0] = v342;
        v102 = vmul_n_f32(*(float32x2_t *)__p, v100.f32[0]);
        v46 = (__n128)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL);
        v103 = vmul_f32((float32x2_t)v46.n128_u64[0], v100);
        v51.n128_u64[0] = (unint64_t)vdiv_f32(vadd_f32(v341, vmla_lane_f32(v102, *(float32x2_t *)&__p[12], v100, 1)), (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32((float32x2_t)v50.n128_u64[0], vmla_lane_f32(v103, (float32x2_t)v49.n128_u64[0], v100, 1)), 0));
        v43.n128_u64[0] = (unint64_t)vmul_n_f32(*(float32x2_t *)__p, v101.f32[0]);
        v46.n128_u64[0] = (unint64_t)vmul_f32((float32x2_t)v46.n128_u64[0], v101);
        v104 = vdiv_f32(vadd_f32(v341, vmla_lane_f32((float32x2_t)v43.n128_u64[0], *(float32x2_t *)&__p[12], v100, 1)), (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32((float32x2_t)v50.n128_u64[0], vmla_lane_f32((float32x2_t)v46.n128_u64[0], (float32x2_t)v49.n128_u64[0], v100, 1)), 0));
        v46.n128_u64[0] = (unint64_t)vdup_lane_s32((int32x2_t)vadd_f32((float32x2_t)v50.n128_u64[0], vmla_lane_f32((float32x2_t)v46.n128_u64[0], (float32x2_t)v49.n128_u64[0], v101, 1)), 0);
        v43.n128_u64[0] = (unint64_t)vdiv_f32(vadd_f32(v341, vmla_lane_f32((float32x2_t)v43.n128_u64[0], *(float32x2_t *)&__p[12], v101, 1)), (float32x2_t)v46.n128_u64[0]);
        v105 = vdiv_f32(vadd_f32(v341, vmla_lane_f32(v102, *(float32x2_t *)&__p[12], v101, 1)), (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32((float32x2_t)v50.n128_u64[0], vmla_lane_f32(v103, (float32x2_t)v49.n128_u64[0], v101, 1)), 0));
        v106 = vminnm_f32((float32x2_t)v51.n128_u64[0], (float32x2_t)vdup_n_s32(0x7F7FFFFFu));
        v107 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v106, v104), (int8x8_t)v104, (int8x8_t)v106);
        v108 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v107, (float32x2_t)v43.n128_u64[0]), (int8x8_t)v43.n128_u64[0], (int8x8_t)v107);
        v109 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v108, v105), (int8x8_t)v105, (int8x8_t)v108);
        v45.n128_u64[0] = (unint64_t)vcltz_f32(v109);
        v110 = vmaxnm_f32((float32x2_t)v51.n128_u64[0], (float32x2_t)0x80000000800000);
        v111 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v104, v110), (int8x8_t)v104, (int8x8_t)v110);
        v47.n128_u64[0] = (unint64_t)vcgt_f32((float32x2_t)v43.n128_u64[0], v111);
        v43.n128_u64[0] = (unint64_t)vbsl_s8((int8x8_t)v47.n128_u64[0], (int8x8_t)v43.n128_u64[0], (int8x8_t)v111);
        v43.n128_u64[0] = (unint64_t)vbsl_s8((int8x8_t)vcgt_f32(v105, (float32x2_t)v43.n128_u64[0]), (int8x8_t)v105, (int8x8_t)v43.n128_u64[0]);
        v50.n128_u64[0] = (unint64_t)v309;
        v43.n128_u64[0] = (unint64_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v43.n128_u64[0], v309), (int8x8_t)v309, (int8x8_t)v43.n128_u64[0]);
        v44.n128_u64[0] = (unint64_t)vbic_s8((int8x8_t)v109, (int8x8_t)v45.n128_u64[0]);
        v49.n128_u64[0] = (unint64_t)vmvn_s8((int8x8_t)vcge_f32((float32x2_t)v43.n128_u64[0], (float32x2_t)v44.n128_u64[0]));
        if (((v49.n128_u32[0] | v49.n128_u32[1]) & 1) != 0)
          goto LABEL_39;
        v302 = v101;
        v303 = v100;
        v112 = v362[0];
        v113 = *(float32x2_t *)((char *)&v362[1] + 4);
        v114 = *(float *)&v362[1];
        v115 = *((float *)&v362[2] + 1);
        v116 = *(float32x2_t *)v363;
        v117 = *(float *)&v363[8];
        v118 = (int32x2_t)vadd_f32((float32x2_t)v44.n128_u64[0], (float32x2_t)0x3F0000003F000000);
        v43.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)v43.n128_u64[0], (float32x2_t)0x3F0000003F000000);
        v49.n128_u64[0] = (unint64_t)vcvt_s32_f32(vrndm_f32((float32x2_t)vzip1_s32((int32x2_t)v43.n128_u64[0], v118)));
        v43.n128_u64[0] = (unint64_t)vcvt_s32_f32(vrndm_f32((float32x2_t)vzip2_s32((int32x2_t)v43.n128_u64[0], v118)));
        v301 = v49.n128_u64[0];
        v305 = v43;
        v44.n128_u64[0] = -1;
        v44.n128_u64[1] = -1;
        v119 = vcgt_s32(vmin_s32((int32x2_t)v43.n128_u64[0], (int32x2_t)v49.n128_u64[0]), (int32x2_t)-1);
        if ((v119.i32[1] & v119.i32[0] & 1) == 0
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/BoundingBoxUtils.cpp", 38, (uint64_t)"tl.min() >= 0 && br.min() >= 0", 30, (uint64_t)&unk_22458F643, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v43 = v305;
        v120 = v305.n128_u32[1];
        if (v305.n128_u32[1] <= v305.n128_u32[0])
        {
          v121 = 0;
          v43.n128_f64[0] = (double)HIDWORD(v301);
          *(float32x2_t *)v137.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v328.i8, *(float *)v310.i32), *(float32x2_t *)v324.i8, *(float32x2_t *)v310.i8, 1), *(float32x2_t *)v322.i8, (float32x4_t)v310, 2);
          v45 = (__n128)vextq_s8(v328, v328, 8uLL);
          v47 = (__n128)vextq_s8(v324, v324, 8uLL);
          v138 = (float32x2_t)vextq_s8(v322, v322, 8uLL).u64[0];
          *(float32x2_t *)&v137.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)v45.n128_u64[0], *(float32x2_t *)v310.i8), (float32x2_t)v47.n128_u64[0], *(float32x2_t *)v310.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v310, v310, 8uLL), v138);
          v139 = (int8x16_t)vaddq_f32(v137, v311);
          v140 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v328.i8, v98.f32[0]), *(float32x2_t *)v324.i8, v98, 1), *(float32x2_t *)v322.i8, v318.f32[0]);
          v45.n128_u64[0] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)v45.n128_u64[0], v98), (float32x2_t)v47.n128_u64[0], v98, 1), v318, v138);
          v47.n128_u64[0] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(v140, *(float32x2_t *)v139.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v139.i8, 1), v140, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v139, v139, 8uLL), (float32x2_t)v45.n128_u64[0]);
          v141 = (float32x4_t)vdupq_lane_s32((int32x2_t)v47.n128_u64[0], 0);
          v49 = (__n128)vdivq_f32(v296, v141);
          v142 = (int8x16_t)vdivq_f32(v297, v141);
          v46 = (__n128)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL);
          v143 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v142.i8, v140.f32[0]), (float32x2_t)*(_OWORD *)&vextq_s8(v142, (int8x16_t)v49, 0xCuLL), v140, 1), (float32x2_t)v46.n128_u64[0], v45.n128_f32[0]);
          v44 = (__n128)vextq_s8(v142, v142, 8uLL);
          v140.f32[0] = vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)v44.n128_u64[0], v140), (float32x2_t)vdup_lane_s32((int32x2_t)v140, 1), (float32x2_t)v49.n128_u64[0], 1), (float32x2_t)v45.n128_u64[0], vdiv_f32(v9, (float32x2_t)v47.n128_u64[0])).f32[0];
          v44.n128_f64[0] = v143.f32[0];
          v49.n128_f64[0] = v143.f32[1];
          v45.n128_f64[0] = v140.f32[0];
          v50 = (__n128)vcvtq_f64_f32((float32x2_t)v112);
          v47.n128_f64[0] = v114;
          v51 = (__n128)vcvtq_f64_f32(v113);
          v46.n128_f64[0] = v115;
          v144 = vcvtq_f64_f32(v116);
          v145 = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u64[0];
          v146 = vcvtq_f64_f32(vneg_f32(v303));
          v147 = vcvtq_f64_f32(v302);
          v148 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_2245F5CB0, v51.n128_f64[0]), (float64x2_t)xmmword_224649980, (float64x2_t)v51, 1), v146, v115);
          v149.f64[1] = 0.0;
          v150 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_224649990, v51.n128_f64[0]), (float64x2_t)xmmword_2246499A0, (float64x2_t)v51, 1), v147, v115);
          v151 = vaddq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v50, (double)HIDWORD(v301)), (float64x2_t)v51, (double)v305.n128_u32[1]), v144);
          v152 = v114 * (double)HIDWORD(v301) + v46.n128_f64[0] * (double)v305.n128_u32[1] + v117;
          v153 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_2245F5CB0, v151.f64[0]), (float64x2_t)xmmword_224649980, v151, 1), v146, v152);
          v154 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_224649990, v151.f64[0]), (float64x2_t)xmmword_2246499A0, v151, 1), v147, v152);
          v155 = vaddq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v50, (double)v301), (float64x2_t)v51, (double)v305.n128_u32[1]), v144);
          v156 = v114 * (double)v301 + v46.n128_f64[0] * (double)v305.n128_u32[1] + v117;
          v157 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_2245F5CB0, v155.f64[0]), (float64x2_t)xmmword_224649980, v155, 1), v146, v156);
          v158 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_224649990, v155.f64[0]), (float64x2_t)xmmword_2246499A0, v155, 1), v147, v156);
          v159 = (double)(v301 - HIDWORD(v301));
          do
          {
            if (v153.f64[0] >= 0.0 || v157.f64[0] >= 0.0)
            {
              v160 = v154.f64[0] < 0.0;
              if (v158.f64[0] >= 0.0)
                v160 = 0;
              _NF = v157.f64[1] < 0.0 && v153.f64[1] < 0.0;
              if (!_NF && !v160 && (v154.f64[1] >= 0.0 || v158.f64[1] >= 0.0))
              {
                v162 = 0.0;
                v163 = 1.0;
                if (v152 * v156 < 0.0)
                {
                  v164 = v152 / (v152 - v156);
                  if (v152 >= 0.0)
                    v163 = fmin(v164, 1.0);
                  else
                    v162 = fmax(v164, 0.0);
                }
                v165 = vsubq_f64(v153, v157);
                v166 = vdivq_f64(v153, v165);
                v167 = vnegq_f64(v165);
                if (v166.f64[0] >= v163)
                  v168 = v163;
                else
                  v168 = v166.f64[0];
                if (v167.f64[0] >= 0.0)
                  v168 = v163;
                if (v162 >= v166.f64[0])
                  v169 = v162;
                else
                  v169 = v166.f64[0];
                if (v167.f64[0] > 0.0)
                  v162 = v169;
                else
                  v163 = v168;
                if (v167.f64[1] <= 0.0)
                {
                  if (v167.f64[1] < 0.0 && v166.f64[1] < v163)
                    v163 = v166.f64[1];
                }
                else if (v162 < v166.f64[1])
                {
                  v162 = v166.f64[1];
                }
                v170 = vsubq_f64(v154, v158);
                v171 = vdivq_f64(v154, v170);
                v172 = vnegq_f64(v170);
                if (v162 >= v171.f64[0])
                  v173 = v162;
                else
                  v173 = v171.f64[0];
                if (v171.f64[0] >= v163)
                  v174 = v163;
                else
                  v174 = v171.f64[0];
                if (v172.f64[0] >= 0.0)
                  v174 = v163;
                if (v172.f64[0] > 0.0)
                  v162 = v173;
                else
                  v163 = v174;
                if (v172.f64[1] <= 0.0)
                {
                  if (v172.f64[1] < 0.0 && v171.f64[1] < v163)
                    v163 = v171.f64[1];
                }
                else if (v162 < v171.f64[1])
                {
                  v162 = v171.f64[1];
                }
                if (v162 <= v163)
                {
                  v175 = vcvtpd_u64_f64(v162 * v159 + v43.n128_f64[0]);
                  v176 = vcvtmd_u64_f64(v163 * v159 + v43.n128_f64[0]) + 1;
                  if (v176 != v175)
                  {
                    v177 = *(_DWORD *)(a3 + 16);
                    v178 = *(_QWORD *)a3 + 2 * *(_DWORD *)(a3 + 20) * v120;
                    v179 = v333 + v335 * v120;
                    v180 = (float)((float)v175 + -1.0);
                    v181 = (int8x16_t)vaddq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v50, v180), (float64x2_t)v51, (double)v120), v144);
                    v149.f64[0] = v117 + v47.n128_f64[0] * v180 + v46.n128_f64[0] * (double)v120;
                    v182 = vextq_s8(v181, v181, 8uLL).u64[0];
                    v183 = v44.n128_f64[0] * v180 + v49.n128_f64[0] * (double)v120 + v45.n128_f64[0];
                    v184 = v175 * v177;
                    do
                    {
                      v181.i64[1] = v182;
                      *(_QWORD *)&v185.f64[0] = v50.n128_u64[0];
                      *(_QWORD *)&v185.f64[1] = v145;
                      v181 = (int8x16_t)vaddq_f64(v185, (float64x2_t)v181);
                      v182 = vextq_s8(v181, v181, 8uLL).u64[0];
                      v149 = vaddq_f64((float64x2_t)v47, v149);
                      v183 = v183 + v44.n128_f64[0];
                      _H8 = *(_WORD *)(v178 + 2 * v184);
                      __asm { FCVT            S8, H8 }
                      if (_S8 >= 0.00097656)
                      {
                        _S9 = 1.0 / v183;
                        __asm { FCVT            H9, S9 }
                        if (_ZF)
                          _S9 = 0.0;
                        __asm { FCVT            S9, H9 }
                        _S8 = _S8 - _S9;
                        __asm
                        {
                          FCVT            H8, S8
                          FCVT            S8, H8
                        }
                        _S8 = fabsf(_S8);
                        __asm
                        {
                          FCVT            H8, S8
                          FCVT            S8, H8
                        }
                        if (_S8 <= a9)
                        {
                          *(_QWORD *)&v196.f64[0] = v181.i64[0];
                          *(_QWORD *)&v196.f64[1] = v182;
                          *(int32x2_t *)&v196.f64[0] = vmul_s32(a2[16], vmovn_s64((int64x2_t)vcvtq_u64_f64(vrndaq_f64(vdivq_f64(v196, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v149.f64[0], 0))))));
                          v197 = *(unsigned __int8 *)(*(_QWORD *)&a2[14]
                                                    + vadd_s32(vdup_lane_s32(*(int32x2_t *)&v196.f64[0], 1), *(int32x2_t *)&v196.f64[0]).u32[0]);
                          if (v68 == v197 && *(unsigned __int8 *)(v179 + v175) == 255)
                          {
                            *(_BYTE *)(v179 + v175) = v197;
                            ++v121;
                          }
                        }
                      }
                      ++v175;
                      v184 += v177;
                    }
                    while (v176 != v175);
                  }
                }
              }
            }
            ++v120;
            v152 = v152 + v46.n128_f64[0];
            v156 = v156 + v46.n128_f64[0];
            v153 = vaddq_f64(v148, v153);
            v154 = vaddq_f64(v150, v154);
            v157 = vaddq_f64(v148, v157);
            v158 = vaddq_f64(v150, v158);
          }
          while (v120 <= v305.n128_u32[0]);
        }
        else
        {
          v121 = 0;
        }
        v122 = v336;
        if (v68 >= (uint64_t)(*((_QWORD *)&v336 + 1) - v336) >> 3)
LABEL_324:
          sub_2236C5448();
        goto LABEL_303;
      }
      sub_223748B7C(&v338);
      if (**(int **)(v338 + 56) > 3)
        goto LABEL_301;
      v130 = *(unsigned __int8 *)(v338 + 72);
      v131 = sub_22322F254(v338, "OSLogSurrogateAppender", 1, 0);
      v132 = v131;
      if (!v130 && !v131)
        goto LABEL_301;
      *(_QWORD *)&v346 = &v338;
      *((std::chrono::steady_clock::time_point *)&v346 + 1) = std::chrono::steady_clock::now();
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v348 = 3;
      v349 = "unknown file";
      v350 = 93;
      v351 = "unknown function";
      v352 = 0;
      v353 = 0;
      v133 = *(_QWORD *)v346;
      v134 = (const char *)(*(_QWORD *)v346 + 16);
      v326 = v134;
      if (*(char *)(*(_QWORD *)v346 + 39) < 0)
      {
        v134 = *(const char **)(v133 + 16);
        v135 = *(_QWORD *)(v133 + 24);
        v330 = v130;
        v244 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v244 & 1) == 0)
        {
LABEL_309:
          if (__cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)v358);
            sub_223199C58("com.apple.cv3d", (unint64_t)v358, &xmmword_255788F40);
            if (v360 && v359 < 0)
              operator delete(v358[0]);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
        }
      }
      else
      {
        v135 = *(unsigned __int8 *)(*(_QWORD *)v346 + 39);
        v330 = v130;
        v136 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v136 & 1) == 0)
          goto LABEL_309;
      }
      if (byte_255788F57 >= 0)
        v245 = (const char *)&xmmword_255788F40;
      else
        v245 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v246 = byte_255788F57;
      else
        v246 = *((_QWORD *)&xmmword_255788F40 + 1);
      v362[0] = os_log_create(v245, v134);
      if (v246 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v246 >= 0x17)
      {
        v248 = (v246 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v246 | 7) != 0x17)
          v248 = v246 | 7;
        v249 = v248 + 1;
        v247 = (void **)operator new(v248 + 1);
        v362[2] = (void *)v246;
        *(_QWORD *)v363 = v249 | 0x8000000000000000;
        v362[1] = v247;
      }
      else
      {
        v363[7] = v246;
        v247 = &v362[1];
        if (!v246)
        {
LABEL_234:
          *((_BYTE *)v247 + v246) = 0;
          v363[8] = 1;
          if (v135 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v41 = a4;
          if (v135 >= 0x17)
          {
            v252 = (v135 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v135 | 7) != 0x17)
              v252 = v135 | 7;
            v253 = v252 + 1;
            v250 = operator new(v252 + 1);
            *(_QWORD *)&v363[24] = v135;
            *(_QWORD *)&v364 = v253 | 0x8000000000000000;
            *(_QWORD *)&v363[16] = v250;
          }
          else
          {
            BYTE7(v364) = v135;
            v250 = &v363[16];
            if (!v135)
            {
              v363[16] = 0;
              BYTE8(v364) = 1;
              v251 = v362[0];
              if ((SBYTE7(v364) & 0x80000000) == 0)
                goto LABEL_238;
LABEL_244:
              operator delete(*(void **)&v363[16]);
              if (v363[8])
                goto LABEL_245;
              goto LABEL_247;
            }
          }
          memmove(v250, v134, v135);
          v250[v135] = 0;
          BYTE8(v364) = 1;
          v251 = v362[0];
          if (SBYTE7(v364) < 0)
            goto LABEL_244;
LABEL_238:
          if (v363[8])
          {
LABEL_245:
            if ((v363[7] & 0x80000000) != 0)
              operator delete(v362[1]);
          }
LABEL_247:
          if (v362[0])
            os_release(v362[0]);
          if (v132 && *(_QWORD *)(v132 + 24))
          {
            v254 = _os_log_pack_size();
            v255 = (std::__shared_weak_count_vtbl *)operator new(v254, (std::align_val_t)8uLL);
            v256 = (std::__shared_weak_count *)operator new();
            v257 = v256;
            v256->__shared_owners_ = 0;
            v258 = (unint64_t *)&v256->__shared_owners_;
            v256->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v256->__shared_weak_owners_ = 0;
            v256[1].__vftable = v255;
            v362[0] = v255;
            v362[1] = v255;
            v362[2] = v256;
            do
              v259 = __ldxr(v258);
            while (__stxr(v259 + 1, v258));
            memset(v363, 0, 24);
            do
              v260 = __ldaxr(v258);
            while (__stlxr(v260 - 1, v258));
            if (!v260)
            {
              ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
              std::__shared_weak_count::__release_weak(v257);
            }
            v261 = v362[0];
            *(_WORD *)_os_log_pack_fill() = 0;
            v262 = (char *)operator new();
            v263 = *(unsigned __int8 *)(v133 + 39);
            v264 = v326;
            if ((v263 & 0x80u) != 0)
            {
              v264 = *(const char **)(v133 + 16);
              v263 = *(_QWORD *)(v133 + 24);
            }
            *(_QWORD *)v262 = v261;
            *(_OWORD *)(v262 + 8) = *(_OWORD *)&v362[1];
            v362[1] = 0;
            v362[2] = 0;
            *(_OWORD *)(v262 + 24) = *(_OWORD *)v363;
            *(_QWORD *)v363 = 0;
            *(_QWORD *)&v363[8] = 0;
            *((_QWORD *)v262 + 5) = v264;
            *((_QWORD *)v262 + 6) = v263;
            v262[56] = 1;
            v361 = 0;
            v358[0] = v262;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v132 + 24) + 40))(*(_QWORD *)(v132 + 24), v358);
            a7 = v306;
            v265 = v358[0];
            v358[0] = 0;
            v39 = v304;
            v40 = v307;
            if (v265)
            {
              v266 = (std::__shared_weak_count *)*((_QWORD *)v265 + 4);
              if (v266)
              {
                v267 = (unint64_t *)&v266->__shared_owners_;
                do
                  v268 = __ldaxr(v267);
                while (__stlxr(v268 - 1, v267));
                if (!v268)
                {
                  ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
                  std::__shared_weak_count::__release_weak(v266);
                }
              }
              v269 = (std::__shared_weak_count *)*((_QWORD *)v265 + 2);
              if (v269)
              {
                v270 = (unint64_t *)&v269->__shared_owners_;
                do
                  v271 = __ldaxr(v270);
                while (__stlxr(v271 - 1, v270));
                if (!v271)
                {
                  ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
                  std::__shared_weak_count::__release_weak(v269);
                }
              }
              MEMORY[0x227684CE8](v265, 0x10F0C40B62ED6C6);
              v272 = v361;
              v361 = 0;
              if (v272)
              {
                v273 = *(std::__shared_weak_count **)(v272 + 32);
                if (v273)
                {
                  v274 = (unint64_t *)&v273->__shared_owners_;
                  do
                    v275 = __ldaxr(v274);
                  while (__stlxr(v275 - 1, v274));
                  if (!v275)
                  {
                    ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                    std::__shared_weak_count::__release_weak(v273);
                  }
                }
                v276 = *(std::__shared_weak_count **)(v272 + 16);
                if (v276)
                {
                  v277 = (unint64_t *)&v276->__shared_owners_;
                  do
                    v278 = __ldaxr(v277);
                  while (__stlxr(v278 - 1, v277));
                  if (!v278)
                  {
                    ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
                    std::__shared_weak_count::__release_weak(v276);
                  }
                }
                MEMORY[0x227684CE8](v272, 0x10F0C40B62ED6C6);
              }
            }
            v279 = *(std::__shared_weak_count **)&v363[8];
            if (*(_QWORD *)&v363[8])
            {
              v280 = (unint64_t *)(*(_QWORD *)&v363[8] + 8);
              do
                v281 = __ldaxr(v280);
              while (__stlxr(v281 - 1, v280));
              if (!v281)
              {
                ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
                std::__shared_weak_count::__release_weak(v279);
              }
            }
            v282 = (std::__shared_weak_count *)v362[2];
            if (v362[2])
            {
              v283 = (unint64_t *)((char *)v362[2] + 8);
              do
                v284 = __ldaxr(v283);
              while (__stlxr(v284 - 1, v283));
              if (!v284)
              {
                ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
                std::__shared_weak_count::__release_weak(v282);
              }
            }
          }
          else
          {
            os_log_type_enabled(v251, OS_LOG_TYPE_INFO);
            LOWORD(v362[0]) = 0;
            LODWORD(v295) = 2;
            v294 = v362;
            v285 = (void *)_os_log_send_and_compose_impl();
            v39 = v304;
            a7 = v306;
            v40 = v307;
            if (v285)
              free(v285);
          }
          if (v330)
          {
            sub_22322C138((uint64_t)&v346, "WarpHomographyScanlines: Homography is undefined");
            sub_223182C08((uint64_t)&v346);
          }
          sub_223182C08((uint64_t)&v346);
          v286 = v353;
          if (v353)
          {
            v287 = (unint64_t *)&v353->__shared_owners_;
            do
              v288 = __ldaxr(v287);
            while (__stlxr(v288 - 1, v287));
            if (!v288)
            {
              ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
              std::__shared_weak_count::__release_weak(v286);
            }
          }
LABEL_301:
          v122 = v336;
          v66 = v312;
          if (v68 >= (uint64_t)(*((_QWORD *)&v336 + 1) - v336) >> 3)
            goto LABEL_324;
          v121 = 0;
LABEL_303:
          *(_QWORD *)(v122 + 8 * v68) = v121;
          goto LABEL_39;
        }
      }
      memmove(v247, v245, v246);
      goto LABEL_234;
    }
    sub_223748B7C(v344);
    if (**(int **)(*(_QWORD *)v344 + 56) > 3
      || (v123 = *(unsigned __int8 *)(*(_QWORD *)v344 + 72),
          v124 = sub_22322F254(*(uint64_t *)v344, "OSLogSurrogateAppender", 1, 0),
          v125 = v124,
          !v123)
      && !v124)
    {
LABEL_215:
      v79 = v336;
      v66 = v312;
      if (v68 >= (uint64_t)(*((_QWORD *)&v336 + 1) - v336) >> 3)
        goto LABEL_324;
      goto LABEL_38;
    }
    *(_QWORD *)&v346 = v344;
    *((std::chrono::steady_clock::time_point *)&v346 + 1) = std::chrono::steady_clock::now();
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v348 = 3;
    v349 = "unknown file";
    v350 = 83;
    v351 = "unknown function";
    v352 = 0;
    v353 = 0;
    v126 = *(_QWORD *)v346;
    v127 = (const char *)(*(_QWORD *)v346 + 16);
    v325 = v127;
    if (*(char *)(*(_QWORD *)v346 + 39) < 0)
    {
      v127 = *(const char **)(v126 + 16);
      v128 = *(_QWORD *)(v126 + 24);
      v329 = v123;
      v198 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v198 & 1) != 0)
        goto LABEL_135;
    }
    else
    {
      v128 = *(unsigned __int8 *)(*(_QWORD *)v346 + 39);
      v329 = v123;
      v129 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v129 & 1) != 0)
        goto LABEL_135;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)__p);
      sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
      if (v341.i8[0] && SHIBYTE(v340) < 0)
        operator delete(*(void **)__p);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_135:
    if (byte_255788F57 >= 0)
      v199 = (const char *)&xmmword_255788F40;
    else
      v199 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v200 = byte_255788F57;
    else
      v200 = *((_QWORD *)&xmmword_255788F40 + 1);
    v362[0] = os_log_create(v199, v127);
    if (v200 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v200 >= 0x17)
    {
      v202 = (v200 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v200 | 7) != 0x17)
        v202 = v200 | 7;
      v203 = v202 + 1;
      v201 = (void **)operator new(v202 + 1);
      v362[2] = (void *)v200;
      *(_QWORD *)v363 = v203 | 0x8000000000000000;
      v362[1] = v201;
    }
    else
    {
      v363[7] = v200;
      v201 = &v362[1];
      if (!v200)
      {
LABEL_149:
        *((_BYTE *)v201 + v200) = 0;
        v363[8] = 1;
        if (v128 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v41 = a4;
        if (v128 >= 0x17)
        {
          v206 = (v128 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v128 | 7) != 0x17)
            v206 = v128 | 7;
          v207 = v206 + 1;
          v204 = operator new(v206 + 1);
          *(_QWORD *)&v363[24] = v128;
          *(_QWORD *)&v364 = v207 | 0x8000000000000000;
          *(_QWORD *)&v363[16] = v204;
        }
        else
        {
          BYTE7(v364) = v128;
          v204 = &v363[16];
          if (!v128)
          {
            v363[16] = 0;
            BYTE8(v364) = 1;
            v205 = v362[0];
            if ((SBYTE7(v364) & 0x80000000) == 0)
              goto LABEL_153;
            goto LABEL_159;
          }
        }
        memmove(v204, v127, v128);
        v204[v128] = 0;
        BYTE8(v364) = 1;
        v205 = v362[0];
        if ((SBYTE7(v364) & 0x80000000) == 0)
        {
LABEL_153:
          if (!v363[8])
            goto LABEL_162;
          goto LABEL_160;
        }
LABEL_159:
        operator delete(*(void **)&v363[16]);
        if (!v363[8])
          goto LABEL_162;
LABEL_160:
        if ((v363[7] & 0x80000000) != 0)
          operator delete(v362[1]);
LABEL_162:
        if (v362[0])
          os_release(v362[0]);
        if (v125 && *(_QWORD *)(v125 + 24))
        {
          v208 = _os_log_pack_size();
          v209 = (std::__shared_weak_count_vtbl *)operator new(v208, (std::align_val_t)8uLL);
          v210 = (std::__shared_weak_count *)operator new();
          v211 = v210;
          v210->__shared_owners_ = 0;
          v212 = (unint64_t *)&v210->__shared_owners_;
          v210->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v210->__shared_weak_owners_ = 0;
          v210[1].__vftable = v209;
          v362[0] = v209;
          v362[1] = v209;
          v362[2] = v210;
          do
            v213 = __ldxr(v212);
          while (__stxr(v213 + 1, v212));
          memset(v363, 0, 24);
          do
            v214 = __ldaxr(v212);
          while (__stlxr(v214 - 1, v212));
          if (!v214)
          {
            ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
            std::__shared_weak_count::__release_weak(v211);
          }
          v215 = v362[0];
          v216 = _os_log_pack_fill();
          *(_DWORD *)v216 = 134217984;
          *(double *)(v216 + 4) = v317;
          v217 = operator new();
          v218 = *(unsigned __int8 *)(v126 + 39);
          v219 = v325;
          if ((v218 & 0x80u) != 0)
          {
            v219 = *(const char **)(v126 + 16);
            v218 = *(_QWORD *)(v126 + 24);
          }
          *(_QWORD *)v217 = v215;
          *(_OWORD *)(v217 + 8) = *(_OWORD *)&v362[1];
          v362[1] = 0;
          v362[2] = 0;
          *(_OWORD *)(v217 + 24) = *(_OWORD *)v363;
          *(_QWORD *)v363 = 0;
          *(_QWORD *)&v363[8] = 0;
          *(_QWORD *)(v217 + 40) = v219;
          *(_QWORD *)(v217 + 48) = v218;
          *(_BYTE *)(v217 + 56) = 1;
          v358[0] = 0;
          *(_QWORD *)__p = v217;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v125 + 24) + 40))(*(_QWORD *)(v125 + 24), __p);
          a7 = v306;
          v220 = *(_QWORD *)__p;
          *(_QWORD *)__p = 0;
          v39 = v304;
          v40 = v307;
          if (v220)
          {
            v221 = *(std::__shared_weak_count **)(v220 + 32);
            if (v221)
            {
              v222 = (unint64_t *)&v221->__shared_owners_;
              do
                v223 = __ldaxr(v222);
              while (__stlxr(v223 - 1, v222));
              if (!v223)
              {
                ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                std::__shared_weak_count::__release_weak(v221);
              }
            }
            v224 = *(std::__shared_weak_count **)(v220 + 16);
            if (v224)
            {
              v225 = (unint64_t *)&v224->__shared_owners_;
              do
                v226 = __ldaxr(v225);
              while (__stlxr(v226 - 1, v225));
              if (!v226)
              {
                ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                std::__shared_weak_count::__release_weak(v224);
              }
            }
            MEMORY[0x227684CE8](v220, 0x10F0C40B62ED6C6);
            v227 = v358[0];
            v358[0] = 0;
            if (v227)
            {
              v228 = (std::__shared_weak_count *)*((_QWORD *)v227 + 4);
              if (v228)
              {
                v229 = (unint64_t *)&v228->__shared_owners_;
                do
                  v230 = __ldaxr(v229);
                while (__stlxr(v230 - 1, v229));
                if (!v230)
                {
                  ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                  std::__shared_weak_count::__release_weak(v228);
                }
              }
              v231 = (std::__shared_weak_count *)*((_QWORD *)v227 + 2);
              if (v231)
              {
                v232 = (unint64_t *)&v231->__shared_owners_;
                do
                  v233 = __ldaxr(v232);
                while (__stlxr(v233 - 1, v232));
                if (!v233)
                {
                  ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                  std::__shared_weak_count::__release_weak(v231);
                }
              }
              MEMORY[0x227684CE8](v227, 0x10F0C40B62ED6C6);
            }
          }
          v234 = *(std::__shared_weak_count **)&v363[8];
          if (*(_QWORD *)&v363[8])
          {
            v235 = (unint64_t *)(*(_QWORD *)&v363[8] + 8);
            do
              v236 = __ldaxr(v235);
            while (__stlxr(v236 - 1, v235));
            if (!v236)
            {
              ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
              std::__shared_weak_count::__release_weak(v234);
            }
          }
          v237 = (std::__shared_weak_count *)v362[2];
          if (v362[2])
          {
            v238 = (unint64_t *)((char *)v362[2] + 8);
            do
              v239 = __ldaxr(v238);
            while (__stlxr(v239 - 1, v238));
            if (!v239)
            {
              ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
              std::__shared_weak_count::__release_weak(v237);
            }
          }
        }
        else
        {
          os_log_type_enabled(v205, OS_LOG_TYPE_INFO);
          LODWORD(v362[0]) = 134217984;
          *(double *)((char *)v362 + 4) = v317;
          LODWORD(v295) = 12;
          v294 = v362;
          v240 = (void *)_os_log_send_and_compose_impl();
          v39 = v304;
          a7 = v306;
          v40 = v307;
          if (v240)
            free(v240);
        }
        if (v329)
        {
          sub_22322C138((uint64_t)&v346, "WarpHomographyScanlines: Keyframe plane is very close to keyframe: %f", v317);
          sub_223182C08((uint64_t)&v346);
        }
        sub_223182C08((uint64_t)&v346);
        v241 = v353;
        if (v353)
        {
          v242 = (unint64_t *)&v353->__shared_owners_;
          do
            v243 = __ldaxr(v242);
          while (__stlxr(v243 - 1, v242));
          if (!v243)
          {
            ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
            std::__shared_weak_count::__release_weak(v241);
            v79 = v336;
            v66 = v312;
            if (v68 >= (uint64_t)(*((_QWORD *)&v336 + 1) - v336) >> 3)
              goto LABEL_324;
            goto LABEL_38;
          }
        }
        goto LABEL_215;
      }
    }
    memmove(v201, v199, v200);
    goto LABEL_149;
  }
LABEL_314:
  v289 = v332;
  if (v332)
  {
    v290 = (unint64_t *)&v332->__shared_owners_;
    do
      v291 = __ldaxr(v290);
    while (__stlxr(v291 - 1, v290));
    if (!v291)
    {
      ((void (*)(std::__shared_weak_count *, __n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128, double, double))v289->__on_zero_shared)(v289, v43, v44, v49, v45, v50, v47, v51, v46, *(double *)&v294, v295);
      std::__shared_weak_count::__release_weak(v289);
    }
  }
  if (v39)
    operator delete(v39);
  v362[0] = &off_24EC22138;
  sub_2236B487C(v298, (uint64_t *)&v362[1]);
  *(_QWORD *)v299 = &off_24EC22138;
  *(_OWORD *)(v299 + 8) = *(_OWORD *)&v362[1];
  *(_OWORD *)(v299 + 24) = *(_OWORD *)v363;
  *(_OWORD *)(v299 + 34) = *(_OWORD *)&v363[10];
  *(_OWORD *)(v299 + 56) = v336;
  *(_QWORD *)(v299 + 72) = v337;
}

void sub_22374895C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  uint64_t a66;

  if (LOBYTE(STACK[0x2D0]) && SLOBYTE(STACK[0x2CF]) < 0)
    operator delete((void *)STACK[0x2B8]);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x228]);
  sub_2231DE1B4((uint64_t)&a58);
  if (a28)
    operator delete(a28);
  if (!a65)
    _Unwind_Resume(a1);
  a66 = (uint64_t)a65;
  operator delete(a65);
  _Unwind_Resume(a1);
}

void sub_223748B7C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC4B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC4B0))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC4A8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC4B0);
  }
  *a1 = qword_2540CC4A8;
}

void sub_223748C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC4B0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC4B0);
  _Unwind_Resume(a1);
}

void sub_223748C70(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned __int8 *v5;
  int v7;
  unint64_t v8;
  unint64_t v9;
  const char *v11;
  size_t v12;
  unsigned __int8 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unsigned __int8 v20;
  const void *v21;
  size_t v22;
  unsigned __int8 v23;
  const char *v24;
  size_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  size_t v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  size_t v36;
  size_t v37;
  _QWORD *p_dst;
  void *v39;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  size_t v48;
  size_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  char *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *p_shared_owners;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned __int8 v101;
  const char *v102;
  size_t v103;
  const char *v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  size_t v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  int v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  void *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  char *v147;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v149;
  int v150;
  const char *v151;
  int v152;
  const char *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  uint64_t v156;
  __int128 v157;
  std::__shared_weak_count *v158;
  char *v159;
  std::__shared_weak_count *v160;
  _QWORD *v161;
  __int128 v162;
  _QWORD *__dst;
  __int128 v164;
  char __src[37];
  char __s[8];
  _QWORD v167[2];
  _BYTE v168[56];
  unint64_t v169;
  char v170;
  _BYTE v171[24];
  __int128 v172;
  char *v173;
  uint64_t v174;

  v174 = *MEMORY[0x24BDAC8D0];
  v167[0] = a2;
  v167[1] = a3;
  v5 = (unsigned __int8 *)(a4 + 29);
  if (a4[29] != a2 || a4[30] != a3)
  {
    sub_22374A140(&v156);
    if (**(int **)(v156 + 56) > 3)
      goto LABEL_154;
    v7 = *(unsigned __int8 *)(v156 + 72);
    v8 = sub_22322F254(v156, "OSLogSurrogateAppender", 1, 0);
    v9 = v8;
    if (!v7 && v8 == 0)
      goto LABEL_154;
    v147 = (char *)&v156;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v149 = std::chrono::system_clock::now().__d_.__rep_;
    v150 = 3;
    v151 = "unknown file";
    v152 = 140;
    v154 = 0;
    v155 = 0;
    v153 = "unknown function";
    sub_2245664AC(v5, __s);
    v146 = v7;
    sub_2245664AC((unsigned __int8 *)v167, __src);
    v11 = (const char *)(v156 + 16);
    v142 = v156;
    v144 = v156 + 16;
    if (*(char *)(v156 + 39) < 0)
    {
      v11 = *(const char **)(v156 + 16);
      v12 = *(_QWORD *)(v156 + 24);
      v23 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v23 & 1) != 0)
        goto LABEL_26;
    }
    else
    {
      v12 = *(unsigned __int8 *)(v156 + 39);
      v13 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v13 & 1) != 0)
        goto LABEL_26;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v168);
      sub_223199C58("com.apple.cv3d", (unint64_t)v168, &xmmword_255788F40);
      if (v168[24] && (v168[23] & 0x80000000) != 0)
        operator delete(*(void **)v168);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_26:
    if (byte_255788F57 >= 0)
      v24 = (const char *)&xmmword_255788F40;
    else
      v24 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v25 = byte_255788F57;
    else
      v25 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)v168 = os_log_create(v24, v11);
    v26 = &v168[8];
    if (v25 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v25 >= 0x17)
    {
      v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17)
        v27 = v25 | 7;
      v28 = v27 + 1;
      v26 = operator new(v27 + 1);
      *(_QWORD *)&v168[16] = v25;
      *(_QWORD *)&v168[24] = v28 | 0x8000000000000000;
      *(_QWORD *)&v168[8] = v26;
    }
    else
    {
      v168[31] = v25;
      if (!v25)
      {
LABEL_40:
        v26[v25] = 0;
        v168[32] = 1;
        v29 = &v168[40];
        if (v12 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v12 >= 0x17)
        {
          v30 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v12 | 7) != 0x17)
            v30 = v12 | 7;
          v31 = v30 + 1;
          v29 = operator new(v30 + 1);
          *(_QWORD *)&v168[48] = v12;
          v169 = v31 | 0x8000000000000000;
          *(_QWORD *)&v168[40] = v29;
        }
        else
        {
          HIBYTE(v169) = v12;
          if (!v12)
          {
LABEL_48:
            v29[v12] = 0;
            v170 = 1;
            v32 = *(NSObject **)v168;
            if (SHIBYTE(v169) < 0)
              operator delete(*(void **)&v168[40]);
            if (v168[32] && (v168[31] & 0x80000000) != 0)
              operator delete(*(void **)&v168[8]);
            if (*(_QWORD *)v168)
              os_release(*(void **)v168);
            if (!v9 || !*(_QWORD *)(v9 + 24))
            {
              os_log_type_enabled(v32, OS_LOG_TYPE_INFO);
              *(_QWORD *)v168 = 0xD04100402;
              *(_WORD *)&v168[8] = 2080;
              *(_QWORD *)&v168[10] = __s;
              *(_WORD *)&v168[18] = 1040;
              *(_DWORD *)&v168[20] = 13;
              *(_WORD *)&v168[24] = 2080;
              *(_QWORD *)&v168[26] = __src;
              v39 = (void *)_os_log_send_and_compose_impl();
              v40 = v146;
              if (v39)
                free(v39);
LABEL_148:
              if (v40)
              {
                sub_2245664AC(v5, v168);
                sub_2245664AC((unsigned __int8 *)v167, v171);
                sub_22322C138((uint64_t)&v147, "Session uuid %.13s of loaded KFS does not match current session %.13s. Discarding timestamps and update status.", v168, v171);
                sub_223182C08((uint64_t)&v147);
              }
              sub_223182C08((uint64_t)&v147);
              v95 = v155;
              if (!v155)
                goto LABEL_154;
              p_shared_owners = (unint64_t *)&v155->__shared_owners_;
              do
                v97 = __ldaxr(p_shared_owners);
              while (__stlxr(v97 - 1, p_shared_owners));
              if (v97)
                goto LABEL_154;
LABEL_228:
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
              v98 = a4[26];
              v99 = a4[27];
              if (v98 == v99)
                return;
              goto LABEL_155;
            }
            v33 = _os_log_pack_size();
            v34 = (std::__shared_weak_count_vtbl *)operator new(v33, (std::align_val_t)8uLL);
            v35 = (std::__shared_weak_count *)operator new();
            v35->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v35->__shared_owners_ = 0;
            v35->__shared_weak_owners_ = 0;
            v35[1].__vftable = v34;
            *(_QWORD *)&v157 = v34;
            *((_QWORD *)&v157 + 1) = v34;
            v159 = 0;
            v160 = 0;
            v158 = v35;
            v36 = strlen(__s);
            if (v36 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v37 = v36;
            if (v36 >= 0x17)
            {
              v46 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v36 | 7) != 0x17)
                v46 = v36 | 7;
              v47 = v46 + 1;
              p_dst = operator new(v46 + 1);
              *(_QWORD *)&v164 = v37;
              *((_QWORD *)&v164 + 1) = v47 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v164) = v36;
              p_dst = &__dst;
              if (!v36)
              {
LABEL_73:
                *((_BYTE *)p_dst + v37) = 0;
                v48 = strlen(__src);
                if (v48 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v49 = v48;
                if (v48 >= 0x17)
                {
                  v51 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v48 | 7) != 0x17)
                    v51 = v48 | 7;
                  v52 = v51 + 1;
                  v50 = operator new(v51 + 1);
                  *(_QWORD *)&v162 = v49;
                  *((_QWORD *)&v162 + 1) = v52 | 0x8000000000000000;
                  v161 = v50;
                }
                else
                {
                  HIBYTE(v162) = v48;
                  v50 = &v161;
                  if (!v48)
                    goto LABEL_81;
                }
                memcpy(v50, __src, v49);
LABEL_81:
                *((_BYTE *)v50 + v49) = 0;
                *(_QWORD *)&v168[8] = __dst;
                *(_QWORD *)&v168[16] = v164;
                *(_QWORD *)&v168[23] = *(_QWORD *)((char *)&v164 + 7);
                *(_QWORD *)&v168[32] = v161;
                *(_QWORD *)&v168[40] = v162;
                *(_QWORD *)&v168[47] = *(_QWORD *)((char *)&v162 + 7);
                *(_QWORD *)v168 = off_24EC20780;
                v168[31] = HIBYTE(v164);
                v168[55] = HIBYTE(v162);
                v53 = (char *)operator new(0x50uLL);
                *((_QWORD *)v53 + 3) = off_24EC20780;
                *((_QWORD *)v53 + 1) = 0;
                *((_QWORD *)v53 + 2) = 0;
                *(_QWORD *)v53 = &off_24EC20730;
                *((_OWORD *)v53 + 2) = *(_OWORD *)&v168[8];
                *((_QWORD *)v53 + 6) = *(_QWORD *)&v168[24];
                memset(&v168[8], 0, 24);
                *(_OWORD *)(v53 + 56) = *(_OWORD *)&v168[32];
                *((_QWORD *)v53 + 9) = *(_QWORD *)&v168[48];
                memset(&v168[32], 0, 24);
                v54 = v160;
                v159 = v53 + 24;
                v160 = (std::__shared_weak_count *)v53;
                if (v54)
                {
                  v55 = (unint64_t *)&v54->__shared_owners_;
                  do
                    v56 = __ldaxr(v55);
                  while (__stlxr(v56 - 1, v55));
                  if (!v56)
                  {
                    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                    std::__shared_weak_count::__release_weak(v54);
                  }
                }
                if ((v168[55] & 0x80000000) != 0)
                {
                  operator delete(*(void **)&v168[32]);
                  if ((v168[31] & 0x80000000) == 0)
                  {
LABEL_88:
                    *(_OWORD *)v171 = v157;
                    v58 = v158;
                    v57 = v159;
                    *(_QWORD *)&v171[16] = v158;
                    if (!v158)
                      goto LABEL_94;
                    goto LABEL_92;
                  }
                }
                else if ((v168[31] & 0x80000000) == 0)
                {
                  goto LABEL_88;
                }
                operator delete(*(void **)&v168[8]);
                *(_OWORD *)v171 = v157;
                v58 = v158;
                v57 = v159;
                *(_QWORD *)&v171[16] = v158;
                if (!v158)
                {
LABEL_94:
                  v61 = v160;
                  *(_QWORD *)&v172 = v57;
                  *((_QWORD *)&v172 + 1) = v160;
                  if (v160)
                  {
                    v62 = (unint64_t *)&v160->__shared_owners_;
                    do
                      v63 = __ldxr(v62);
                    while (__stxr(v63 + 1, v62));
                    v173 = v57;
                    do
                      v64 = __ldaxr(v62);
                    while (__stlxr(v64 - 1, v62));
                    if (!v64)
                    {
                      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                      std::__shared_weak_count::__release_weak(v61);
                    }
                  }
                  else
                  {
                    v173 = v57;
                  }
                  v65 = v158;
                  if (v158)
                  {
                    v66 = (unint64_t *)&v158->__shared_owners_;
                    do
                      v67 = __ldaxr(v66);
                    while (__stlxr(v67 - 1, v66));
                    if (!v67)
                    {
                      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                      std::__shared_weak_count::__release_weak(v65);
                    }
                  }
                  v68 = *(_QWORD *)v171;
                  if (v173[31] >= 0)
                    v69 = v173 + 8;
                  else
                    v69 = (char *)*((_QWORD *)v173 + 1);
                  if (v173[55] >= 0)
                    v70 = v173 + 32;
                  else
                    v70 = (char *)*((_QWORD *)v173 + 4);
                  v71 = _os_log_pack_fill();
                  *(_DWORD *)v71 = 68158466;
                  *(_DWORD *)(v71 + 4) = 13;
                  *(_WORD *)(v71 + 8) = 2080;
                  *(_QWORD *)(v71 + 10) = v69;
                  *(_WORD *)(v71 + 18) = 1040;
                  *(_DWORD *)(v71 + 20) = 13;
                  *(_WORD *)(v71 + 24) = 2080;
                  *(_QWORD *)(v71 + 26) = v70;
                  v72 = operator new();
                  v73 = *(unsigned __int8 *)(v142 + 39);
                  v74 = v144;
                  if ((v73 & 0x80u) != 0)
                  {
                    v74 = *(_QWORD *)(v142 + 16);
                    v73 = *(_QWORD *)(v142 + 24);
                  }
                  *(_QWORD *)v72 = v68;
                  *(_OWORD *)(v72 + 8) = *(_OWORD *)&v171[8];
                  *(_QWORD *)&v171[8] = 0;
                  *(_QWORD *)&v171[16] = 0;
                  *(_OWORD *)(v72 + 24) = v172;
                  v172 = 0uLL;
                  *(_QWORD *)(v72 + 40) = v74;
                  *(_QWORD *)(v72 + 48) = v73;
                  *(_BYTE *)(v72 + 56) = 1;
                  *(_QWORD *)&v157 = 0;
                  *(_QWORD *)v168 = v72;
                  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), v168);
                  v75 = *(_QWORD *)v168;
                  *(_QWORD *)v168 = 0;
                  v40 = v146;
                  if (v75)
                  {
                    v76 = *(std::__shared_weak_count **)(v75 + 32);
                    if (v76)
                    {
                      v77 = (unint64_t *)&v76->__shared_owners_;
                      do
                        v78 = __ldaxr(v77);
                      while (__stlxr(v78 - 1, v77));
                      if (!v78)
                      {
                        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                        std::__shared_weak_count::__release_weak(v76);
                      }
                    }
                    v79 = *(std::__shared_weak_count **)(v75 + 16);
                    if (v79)
                    {
                      v80 = (unint64_t *)&v79->__shared_owners_;
                      do
                        v81 = __ldaxr(v80);
                      while (__stlxr(v81 - 1, v80));
                      if (!v81)
                      {
                        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                        std::__shared_weak_count::__release_weak(v79);
                      }
                    }
                    MEMORY[0x227684CE8](v75, 0x10F0C40B62ED6C6);
                    v82 = v157;
                    *(_QWORD *)&v157 = 0;
                    if (v82)
                    {
                      v83 = *(std::__shared_weak_count **)(v82 + 32);
                      if (v83)
                      {
                        v84 = (unint64_t *)&v83->__shared_owners_;
                        do
                          v85 = __ldaxr(v84);
                        while (__stlxr(v85 - 1, v84));
                        if (!v85)
                        {
                          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                          std::__shared_weak_count::__release_weak(v83);
                        }
                      }
                      v86 = *(std::__shared_weak_count **)(v82 + 16);
                      if (v86)
                      {
                        v87 = (unint64_t *)&v86->__shared_owners_;
                        do
                          v88 = __ldaxr(v87);
                        while (__stlxr(v88 - 1, v87));
                        if (!v88)
                        {
                          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                          std::__shared_weak_count::__release_weak(v86);
                        }
                      }
                      MEMORY[0x227684CE8](v82, 0x10F0C40B62ED6C6);
                    }
                  }
                  v89 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
                  if (*((_QWORD *)&v172 + 1))
                  {
                    v90 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
                    do
                      v91 = __ldaxr(v90);
                    while (__stlxr(v91 - 1, v90));
                    if (!v91)
                    {
                      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                      std::__shared_weak_count::__release_weak(v89);
                    }
                  }
                  v92 = *(std::__shared_weak_count **)&v171[16];
                  if (*(_QWORD *)&v171[16])
                  {
                    v93 = (unint64_t *)(*(_QWORD *)&v171[16] + 8);
                    do
                      v94 = __ldaxr(v93);
                    while (__stlxr(v94 - 1, v93));
                    if (!v94)
                    {
                      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                      std::__shared_weak_count::__release_weak(v92);
                    }
                  }
                  goto LABEL_148;
                }
LABEL_92:
                v59 = (unint64_t *)&v58->__shared_owners_;
                do
                  v60 = __ldxr(v59);
                while (__stxr(v60 + 1, v59));
                goto LABEL_94;
              }
            }
            memcpy(p_dst, __s, v37);
            goto LABEL_73;
          }
        }
        memmove(v29, v11, v12);
        goto LABEL_48;
      }
    }
    memmove(v26, v24, v25);
    goto LABEL_40;
  }
  v15 = a4[26];
  v16 = a4[27];
  v17 = v15 + 424;
  if (v15 != v16 && v17 != v16)
  {
    do
    {
      if (*(_QWORD *)(v15 + 216) < *(_QWORD *)(v17 + 216))
        v15 = v17;
      v17 += 424;
    }
    while (v17 != v16);
  }
  if (v15 != v16)
  {
    v19 = *(_QWORD *)(v15 + 216);
    if (v19 >= *a1)
    {
      v20 = atomic_load((unsigned __int8 *)&qword_2557892F0);
      if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
      {
        __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
        __cxa_guard_release(&qword_2557892F0);
      }
      sub_22374A140(v168);
      if (*(char *)(*(_QWORD *)v168 + 39) < 0)
      {
        v21 = *(const void **)(*(_QWORD *)v168 + 16);
        v22 = *(_QWORD *)(*(_QWORD *)v168 + 24);
      }
      else
      {
        v21 = (const void *)(*(_QWORD *)v168 + 16);
        v22 = *(unsigned __int8 *)(*(_QWORD *)v168 + 39);
      }
      sub_223195728((uint64_t)&stru_255789280, v21, v22, "Loaded KFP mach timestamp %.3fs is newer than current frame time %.3fs. Is this replay with stale persistence data? Discarding timestamps and update status.", 0x9CuLL);
      sub_22374A234(__s);
      if (**(int **)(*(_QWORD *)__s + 56) > 5)
        goto LABEL_154;
      v41 = *(unsigned __int8 *)(*(_QWORD *)__s + 72);
      v42 = sub_22322F254(*(uint64_t *)__s, "OSLogSurrogateAppender", 1, 0);
      v43 = v42;
      if (!v41 && !v42)
        goto LABEL_154;
      v145 = v41;
      v147 = __s;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v149 = std::chrono::system_clock::now().__d_.__rep_;
      v150 = 5;
      v151 = "unknown file";
      v152 = 161;
      v154 = 0;
      v155 = 0;
      v153 = "unknown function";
      v143 = *(_QWORD *)__s;
      if (*(char *)(*(_QWORD *)__s + 39) < 0)
      {
        v45 = *(const char **)(*(_QWORD *)__s + 16);
        v44 = *(_QWORD *)(*(_QWORD *)__s + 24);
      }
      else
      {
        v44 = *(unsigned __int8 *)(*(_QWORD *)__s + 39);
        v45 = (const char *)(*(_QWORD *)__s + 16);
      }
      v141 = *(_QWORD *)__s + 16;
      v100 = *a1;
      v101 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v101 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v168);
        sub_223199C58("com.apple.cv3d", (unint64_t)v168, &xmmword_255788F40);
        if (v168[24] && (v168[23] & 0x80000000) != 0)
          operator delete(*(void **)v168);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v102 = (const char *)&xmmword_255788F40;
      else
        v102 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v103 = byte_255788F57;
      else
        v103 = *((_QWORD *)&xmmword_255788F40 + 1);
      v104 = v45;
      *(_QWORD *)v168 = os_log_create(v102, v45);
      v105 = &v168[8];
      if (v103 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v103 >= 0x17)
      {
        v106 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v103 | 7) != 0x17)
          v106 = v103 | 7;
        v107 = v106 + 1;
        v105 = operator new(v106 + 1);
        *(_QWORD *)&v168[16] = v103;
        *(_QWORD *)&v168[24] = v107 | 0x8000000000000000;
        *(_QWORD *)&v168[8] = v105;
      }
      else
      {
        v168[31] = v103;
        if (!v103)
        {
LABEL_173:
          v105[v103] = 0;
          v168[32] = 1;
          v108 = &v168[40];
          if (v44 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v44 >= 0x17)
          {
            v109 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v44 | 7) != 0x17)
              v109 = v44 | 7;
            v110 = v109 + 1;
            v108 = operator new(v109 + 1);
            *(_QWORD *)&v168[48] = v44;
            v169 = v110 | 0x8000000000000000;
            *(_QWORD *)&v168[40] = v108;
          }
          else
          {
            HIBYTE(v169) = v44;
            if (!v44)
            {
LABEL_181:
              v108[v44] = 0;
              v170 = 1;
              v111 = *(NSObject **)v168;
              if (SHIBYTE(v169) < 0)
                operator delete(*(void **)&v168[40]);
              if (v168[32] && (v168[31] & 0x80000000) != 0)
                operator delete(*(void **)&v168[8]);
              if (*(_QWORD *)v168)
                os_release(*(void **)v168);
              if (v43 && *(_QWORD *)(v43 + 24))
              {
                v112 = _os_log_pack_size();
                v113 = (std::__shared_weak_count_vtbl *)operator new(v112, (std::align_val_t)8uLL);
                v114 = (std::__shared_weak_count *)operator new();
                v115 = v114;
                v114->__shared_owners_ = 0;
                v116 = (unint64_t *)&v114->__shared_owners_;
                v114->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v114->__shared_weak_owners_ = 0;
                v114[1].__vftable = v113;
                *(_QWORD *)v168 = v113;
                *(_QWORD *)&v168[8] = v113;
                *(_QWORD *)&v168[16] = v114;
                do
                  v117 = __ldxr(v116);
                while (__stxr(v117 + 1, v116));
                memset(&v168[24], 0, 24);
                do
                  v118 = __ldaxr(v116);
                while (__stlxr(v118 - 1, v116));
                if (!v118)
                {
                  ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                  std::__shared_weak_count::__release_weak(v115);
                }
                v119 = *(_QWORD *)v168;
                v120 = _os_log_pack_fill();
                *(_DWORD *)v120 = 134218240;
                *(double *)(v120 + 4) = (double)v19 / 1000000000.0;
                *(_WORD *)(v120 + 12) = 2048;
                *(double *)(v120 + 14) = (double)v100 / 1000000000.0;
                v121 = operator new();
                v122 = *(unsigned __int8 *)(v143 + 39);
                v123 = v141;
                if ((v122 & 0x80u) != 0)
                {
                  v123 = *(_QWORD *)(v143 + 16);
                  v122 = *(_QWORD *)(v143 + 24);
                }
                *(_QWORD *)v121 = v119;
                *(_OWORD *)(v121 + 8) = *(_OWORD *)&v168[8];
                *(_QWORD *)&v168[8] = 0;
                *(_QWORD *)&v168[16] = 0;
                *(_OWORD *)(v121 + 24) = *(_OWORD *)&v168[24];
                *(_QWORD *)&v168[24] = 0;
                *(_QWORD *)&v168[32] = 0;
                *(_QWORD *)(v121 + 40) = v123;
                *(_QWORD *)(v121 + 48) = v122;
                *(_BYTE *)(v121 + 56) = 16;
                *(_QWORD *)&v157 = 0;
                *(_QWORD *)v171 = v121;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v43 + 24) + 40))(*(_QWORD *)(v43 + 24), v171);
                v124 = *(_QWORD *)v171;
                *(_QWORD *)v171 = 0;
                if (v124)
                {
                  v125 = *(std::__shared_weak_count **)(v124 + 32);
                  if (v125)
                  {
                    v126 = (unint64_t *)&v125->__shared_owners_;
                    do
                      v127 = __ldaxr(v126);
                    while (__stlxr(v127 - 1, v126));
                    if (!v127)
                    {
                      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                      std::__shared_weak_count::__release_weak(v125);
                    }
                  }
                  v128 = *(std::__shared_weak_count **)(v124 + 16);
                  if (v128)
                  {
                    v129 = (unint64_t *)&v128->__shared_owners_;
                    do
                      v130 = __ldaxr(v129);
                    while (__stlxr(v130 - 1, v129));
                    if (!v130)
                    {
                      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                      std::__shared_weak_count::__release_weak(v128);
                    }
                  }
                  MEMORY[0x227684CE8](v124, 0x10F0C40B62ED6C6);
                  *(_QWORD *)&v157 = 0;
                }
                v131 = *(std::__shared_weak_count **)&v168[32];
                v132 = v145;
                if (*(_QWORD *)&v168[32])
                {
                  v133 = (unint64_t *)(*(_QWORD *)&v168[32] + 8);
                  do
                    v134 = __ldaxr(v133);
                  while (__stlxr(v134 - 1, v133));
                  if (!v134)
                  {
                    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                    std::__shared_weak_count::__release_weak(v131);
                  }
                }
                v135 = *(std::__shared_weak_count **)&v168[16];
                if (*(_QWORD *)&v168[16])
                {
                  v136 = (unint64_t *)(*(_QWORD *)&v168[16] + 8);
                  do
                    v137 = __ldaxr(v136);
                  while (__stlxr(v137 - 1, v136));
                  if (!v137)
                  {
                    ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                    std::__shared_weak_count::__release_weak(v135);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v111, OS_LOG_TYPE_ERROR);
                *(_DWORD *)v168 = 134218240;
                *(double *)&v168[4] = (double)v19 / 1000000000.0;
                *(_WORD *)&v168[12] = 2048;
                *(double *)&v168[14] = (double)v100 / 1000000000.0;
                v138 = (void *)_os_log_send_and_compose_impl();
                v132 = v145;
                if (v138)
                  free(v138);
              }
              if (v132)
              {
                sub_22322C138((uint64_t)&v147, "Loaded KFP mach timestamp %.3fs is newer than current frame time %.3fs. Is this replay with stale persistence data? Discarding timestamps and update status.", (double)v19 / 1000000000.0, (double)*a1 / 1000000000.0);
                sub_223182C08((uint64_t)&v147);
              }
              sub_223182C08((uint64_t)&v147);
              v95 = v155;
              if (v155)
              {
                v139 = (unint64_t *)&v155->__shared_owners_;
                do
                  v140 = __ldaxr(v139);
                while (__stlxr(v140 - 1, v139));
                if (!v140)
                  goto LABEL_228;
              }
LABEL_154:
              v98 = a4[26];
              v99 = a4[27];
              if (v98 == v99)
                return;
              do
              {
LABEL_155:
                *(_BYTE *)(v98 + 240) = 0;
                *(_BYTE *)(v98 + 256) = 0;
                *(_QWORD *)(v98 + 216) = 0;
                *(_QWORD *)(v98 + 224) = 0;
                *(_DWORD *)(v98 + 232) = 0;
                v98 += 424;
              }
              while (v98 != v99);
              return;
            }
          }
          memmove(v108, v104, v44);
          goto LABEL_181;
        }
      }
      memmove(v105, v102, v103);
      goto LABEL_173;
    }
  }
}

void sub_223749E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  if (*(_BYTE *)(v7 - 232))
  {
    if (*(char *)(v7 - 233) < 0)
      operator delete(*(void **)(v7 - 256));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223749ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  sub_22319A054((uint64_t *)(v7 - 176));
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8(v7 - 256);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223749F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_223199DE8(v7 - 256);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223749F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x227684CE8](v7, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22374A02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0)
  {
    operator delete(__p);
    sub_223199DE8((uint64_t)&a25);
    sub_223182DAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a25);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_22374A074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22374A088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22374A0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22374A0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22374A0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22374A0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  void *v9;
  va_list va;

  va_start(va, a7);
  if (*(_BYTE *)(v7 - 224) && *(char *)(v7 - 225) < 0)
    operator delete(*(void **)(v7 - 248));
  v9 = *(void **)(v7 - 256);
  if (v9)
    os_release(v9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22374A120(void *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  JUMPOUT(0x22374A138);
}

void sub_22374A130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22374A140(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC4C0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC4C0))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC4B8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC4C0);
  }
  *a1 = qword_2540CC4B8;
}

void sub_22374A1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC4C0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC4C0);
  _Unwind_Resume(a1);
}

void sub_22374A234(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC4D0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC4D0))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC4C8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC4D0);
  }
  *a1 = qword_2540CC4C8;
}

void sub_22374A2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC4D0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC4D0);
  _Unwind_Resume(a1);
}

uint64_t sub_22374A328(uint64_t a1, char a2, int a3, float a4, float a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v14;

  v10 = operator new();
  *(_DWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = &off_24EC24788;
  sub_223484C70((uint64_t *)(v10 + 16));
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = sub_22374DA2C;
  v11 = operator new();
  *(_BYTE *)v11 = a2;
  *(_DWORD *)(v11 + 4) = a3;
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = sub_22374DA9C;
  v12 = atomic_load((unsigned __int8 *)&qword_2557950E8);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_2557950E8))
  {
    *(_QWORD *)&xmmword_2557950D8 = sub_223FF0FB0();
    *((_QWORD *)&xmmword_2557950D8 + 1) = v14;
    __cxa_guard_release(&qword_2557950E8);
  }
  *(_OWORD *)(a1 + 32) = xmmword_2557950D8;
  *(float *)(a1 + 48) = a4;
  *(float *)(a1 + 52) = a5;
  return a1;
}

void sub_22374A420(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  __cxa_guard_abort(&qword_2557950E8);
  v3 = v1[2];
  v1[2] = 0;
  if (v3)
    ((void (*)(void))v1[3])();
  v4 = *v1;
  *v1 = 0;
  if (v4)
    ((void (*)(void))v1[1])();
  _Unwind_Resume(a1);
}

uint64_t *sub_22374A490(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x4_t *a4, uint64_t *a5, uint64_t **a6, uint64_t *a7, void **a8)
{
  _QWORD *v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int32x4_t v26;
  int32x4_t v27;
  __int128 v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD **v44;
  float32x2_t v45;
  _QWORD **v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  _QWORD *v56;
  _QWORD **v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t **v70;
  unsigned __int8 *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  char v75;
  char **v76;
  char **v77;
  unsigned __int8 *v78;
  unsigned int v79;
  unsigned int v80;
  _QWORD *v81;
  char *v82;
  __int128 v83;
  uint64_t *v84;
  _QWORD **v85;
  uint64_t *result;
  uint64_t *v87;
  void **v88;
  uint64_t v89;
  __int128 v90;
  uint64_t *v91;
  _QWORD **v92;
  _QWORD *v93[2];
  unsigned __int8 *v94;
  __int128 v95[3];
  float32x2_t v96;
  unsigned __int32 v97;
  int v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  char v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  v16 = sub_22342DA5C(a5, a2);
  if (v16)
    v17 = v16[4];
  else
    v17 = 0;
  v18 = a4[1];
  v19 = a4[2];
  v20 = a4[3];
  v21 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a4, COERCE_FLOAT(*(_OWORD *)(a2 + 32))), v18, *(float32x2_t *)(a2 + 32), 1), v19, *(float32x4_t *)(a2 + 32), 2), v20, *(float32x4_t *)(a2 + 32), 3);
  v22 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a4, COERCE_FLOAT(*(_OWORD *)(a2 + 48))), v18, *(float32x2_t *)(a2 + 48), 1), v19, *(float32x4_t *)(a2 + 48), 2), v20, *(float32x4_t *)(a2 + 48), 3);
  v23 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a4, COERCE_FLOAT(*(_OWORD *)(a2 + 64))), v18, *(float32x2_t *)(a2 + 64), 1), v19, *(float32x4_t *)(a2 + 64), 2), v20, *(float32x4_t *)(a2 + 64), 3);
  v24 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a4, COERCE_FLOAT(*(_OWORD *)(a2 + 80))), v18, *(float32x2_t *)(a2 + 80), 1), v19, *(float32x4_t *)(a2 + 80), 2), v20, *(float32x4_t *)(a2 + 80), 3);
  v18.i64[0] = vzip1q_s32(v21, v22).u64[0];
  v24.i64[0] ^= 0x8000000080000000;
  v18.i64[1] = v23.u32[0];
  v25 = (int8x16_t)vtrn2q_s32(v21, v22);
  v25.i32[2] = v23.i32[1];
  v26 = vzip2q_s32(v21, v22);
  v27 = v26;
  v27.i32[2] = v23.i32[2];
  HIDWORD(v28) = 0;
  LODWORD(v28) = vdupq_lane_s32(*(int32x2_t *)&v25, 0).i32[3];
  *(_QWORD *)((char *)&v28 + 4) = vextq_s8(v25, v24, 4uLL).u64[0];
  v27.i64[1] = vdupq_laneq_s32(v27, 2).u32[0];
  v95[1] = v28;
  v95[2] = (__int128)v27;
  v95[0] = (__int128)v18;
  v96 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v18.f32, *(float *)v24.i32), *(float32x2_t *)v25.i8, *(float32x2_t *)v24.i8, 1), *(float32x2_t *)v26.i8, COERCE_FLOAT(v24.i32[2] ^ 0x80000000));
  v97 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v24.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1), *(float32x2_t *)v23.i8, 1), (float32x2_t)(v24.i64[1] ^ 0xFFFFFFFF80000000), (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)).u32[0];
  v98 = 1065353216;
  if (!v16)
  {
    v29 = (unsigned __int8 *)operator new();
    sub_22371A3A4((uint64_t)v29, a2, v95, a3);
    v94 = v29;
    v17 = sub_223728B84(a5, &v94);
    v30 = v94;
    v94 = 0;
    if (v30)
    {
      v88 = a8;
      v31 = a7;
      v32 = *((_QWORD *)v30 + 26);
      if (v32)
      {
        v33 = *((_QWORD *)v30 + 27);
        v34 = (void *)*((_QWORD *)v30 + 26);
        if (v33 != v32)
        {
          do
          {
            v33 -= 424;
            sub_2236EA79C(v33);
          }
          while (v33 != v32);
          v34 = (void *)*((_QWORD *)v30 + 26);
        }
        *((_QWORD *)v30 + 27) = v32;
        operator delete(v34);
      }
      *((_QWORD *)v30 + 6) = &off_24EC20828;
      MEMORY[0x227684CE8](v30, 0x10A0C4047C2BC0BLL);
      a7 = v31;
      a8 = v88;
    }
    *(_OWORD *)(v17 + 232) = *(_OWORD *)(a1 + 32);
  }
  sub_2231CC34C(*(_QWORD *)(a2 + 16), (uint64_t)&v99);
  v35 = *((_QWORD *)&v100 + 1);
  if (v102 && *((_QWORD *)&v100 + 1))
  {
    v36 = *((_QWORD *)&v99 + 1);
    v37 = (std::__shared_weak_count *)v100;
    if ((_QWORD)v100)
    {
      v38 = (unint64_t *)(v100 + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
      do
        v40 = __ldaxr(v38);
      while (__stlxr(v40 - 1, v38));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v36 + 88))(v36, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1287");
    v35 = *((_QWORD *)&v100 + 1);
  }
  v89 = v35;
  v90 = v101;
  sub_2237078E8(v17, a3, a2, (uint64_t)&v89, *(_QWORD *)a1, *(_QWORD *)(a1 + 16), a8, (float *)(a1 + 48), &v91, a4);
  v41 = (std::__shared_weak_count *)v100;
  if ((_QWORD)v100)
  {
    v42 = (unint64_t *)(v100 + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  sub_22374ACC4(v17, (uint64_t *)&v91, (uint64_t)*a3);
  v44 = v92;
  if (v92 != v93)
  {
    v45 = *a3;
    v46 = v92;
    v47 = *(_QWORD **)(v17 + 208);
    v48 = *(_QWORD **)(v17 + 216);
    do
    {
      v49 = (unint64_t)v47;
      if (v47 != v48)
      {
        v49 = (unint64_t)v47;
        while (1)
        {
          v50 = *(_QWORD **)v49 == *(_QWORD **)((char *)v46 + 28)
             && *(_QWORD *)(v49 + 8) == *(_QWORD *)((char *)v46 + 36);
          if (v50)
            break;
          v49 += 424;
          if ((_QWORD *)v49 == v48)
          {
            v49 = (unint64_t)v48;
            break;
          }
        }
      }
      if ((_QWORD *)v49 == v48)
        v51 = 0;
      else
        v51 = v49;
      v52 = *((_DWORD *)v46 + 11);
      if ((v52 & 1) == 0)
      {
        v53 = v51 | v49 & 0xFFFFFFFFFFFFFF00;
        if ((v52 & 2) != 0)
        {
          if (*(_QWORD *)&v45 <= *(_QWORD *)(v53 + 216))
            v54 = *(_DWORD *)(v53 + 232);
          else
            v54 = 0;
          *(_DWORD *)(v53 + 232) = v54 | 0x10;
          *(float32x2_t *)(v53 + 216) = v45;
          *(_BYTE *)(v53 + 224) = 0;
        }
        if ((v52 & 4) != 0)
        {
          if (*(_QWORD *)&v45 <= *(_QWORD *)(v53 + 216))
            v55 = *(_DWORD *)(v53 + 232);
          else
            v55 = 0;
          *(_DWORD *)(v53 + 232) = v55 | 8;
          *(float32x2_t *)(v53 + 216) = v45;
          *(_BYTE *)(v53 + 224) = 0;
        }
      }
      v56 = v46[1];
      if (v56)
      {
        do
        {
          v57 = (_QWORD **)v56;
          v56 = (_QWORD *)*v56;
        }
        while (v56);
      }
      else
      {
        do
        {
          v57 = (_QWORD **)v46[2];
          v50 = *v57 == v46;
          v46 = v57;
        }
        while (!v50);
      }
      v46 = v57;
    }
    while (v57 != v93);
  }
  v58 = v91;
  v59 = (uint64_t *)v91[1];
  if (v59 != v91)
  {
    v60 = *a7;
    do
    {
      v61 = v59[2];
      v62 = v58[3];
      v63 = *(_DWORD *)(v62 + (v59[3] << 6) + 60);
      if (v63)
        v64 = v59[2];
      else
        v64 = v59[3];
      v65 = v62 + (v64 << 6);
      if (*(_DWORD *)(v65 + 60))
        goto LABEL_118;
      v66 = v65 + 24;
      if (v63)
        v61 = v59[3];
      v67 = *(_OWORD *)v66;
      v68 = *(_OWORD *)(v66 + 16);
      LODWORD(v101) = *(_DWORD *)(v66 + 32);
      v99 = v67;
      v100 = v68;
      v69 = v62 + (v61 << 6);
      if (*(_DWORD *)(v69 + 60) != 1)
LABEL_118:
        sub_22316DD70();
      sub_22370FD80(v60, (__int128 *)((char *)&v100 + 4), &v99, *(_DWORD *)(v69 + 24), v100);
      v59 = (uint64_t *)v59[1];
    }
    while (v59 != v58);
    v44 = v92;
  }
  if (v44 != v93)
  {
    v70 = a6 + 1;
    do
    {
      v71 = (unsigned __int8 *)v44 + 28;
      v72 = a6[1];
      if (*a6 == (uint64_t *)v70)
      {
        v74 = (uint64_t *)(a6 + 1);
      }
      else
      {
        v73 = (uint64_t *)(a6 + 1);
        if (v72)
        {
          do
          {
            v74 = v72;
            v72 = (uint64_t *)v72[1];
          }
          while (v72);
        }
        else
        {
          do
          {
            v74 = (uint64_t *)v73[2];
            v50 = *v74 == (_QWORD)v73;
            v73 = v74;
          }
          while (v50);
        }
        v75 = sub_22319835C((unsigned __int8 *)v74 + 28, (unsigned __int8 *)v44 + 28);
        v72 = *v70;
        if ((v75 & 0x80000000) == 0)
        {
          v76 = (char **)(a6 + 1);
          v77 = (char **)(a6 + 1);
          if (!v72)
            goto LABEL_107;
          v76 = (char **)(a6 + 1);
          while (1)
          {
            while (1)
            {
              v77 = (char **)v72;
              v78 = (unsigned __int8 *)v72 + 28;
              v79 = *((unsigned __int8 *)v72 + 28);
              v80 = *v71;
              if (v80 == v79)
              {
                v80 = *((unsigned __int8 *)v44 + 29);
                v79 = *((unsigned __int8 *)v77 + 29);
                if (v80 == v79)
                {
                  v80 = *((unsigned __int8 *)v44 + 30);
                  v79 = *((unsigned __int8 *)v77 + 30);
                  if (v80 == v79)
                  {
                    v80 = *((unsigned __int8 *)v44 + 31);
                    v79 = *((unsigned __int8 *)v77 + 31);
                    if (v80 == v79)
                    {
                      v80 = *((unsigned __int8 *)v44 + 32);
                      v79 = *((unsigned __int8 *)v77 + 32);
                      if (v80 == v79)
                      {
                        v80 = *((unsigned __int8 *)v44 + 33);
                        v79 = *((unsigned __int8 *)v77 + 33);
                        if (v80 == v79)
                        {
                          v80 = *((unsigned __int8 *)v44 + 34);
                          v79 = *((unsigned __int8 *)v77 + 34);
                          if (v80 == v79)
                          {
                            v80 = *((unsigned __int8 *)v44 + 35);
                            v79 = *((unsigned __int8 *)v77 + 35);
                            if (v80 == v79)
                            {
                              v80 = *((unsigned __int8 *)v44 + 36);
                              v79 = *((unsigned __int8 *)v77 + 36);
                              if (v80 == v79)
                              {
                                v80 = *((unsigned __int8 *)v44 + 37);
                                v79 = *((unsigned __int8 *)v77 + 37);
                                if (v80 == v79)
                                {
                                  v80 = *((unsigned __int8 *)v44 + 38);
                                  v79 = *((unsigned __int8 *)v77 + 38);
                                  if (v80 == v79)
                                  {
                                    v80 = *((unsigned __int8 *)v44 + 39);
                                    v79 = *((unsigned __int8 *)v77 + 39);
                                    if (v80 == v79)
                                    {
                                      v80 = *((unsigned __int8 *)v44 + 40);
                                      v79 = *((unsigned __int8 *)v77 + 40);
                                      if (v80 == v79)
                                      {
                                        v80 = *((unsigned __int8 *)v44 + 41);
                                        v79 = *((unsigned __int8 *)v77 + 41);
                                        if (v80 == v79)
                                        {
                                          v80 = *((unsigned __int8 *)v44 + 42);
                                          v79 = *((unsigned __int8 *)v77 + 42);
                                          if (v80 == v79)
                                          {
                                            v80 = *((unsigned __int8 *)v44 + 43);
                                            v79 = *((unsigned __int8 *)v77 + 43);
                                            if (v80 == v79)
                                              break;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              if (v80 >= v79)
                break;
              v72 = (uint64_t *)*v77;
              v76 = v77;
              if (!*v77)
                goto LABEL_107;
            }
            if (((char)sub_22319835C(v78, (unsigned __int8 *)v44 + 28) & 0x80000000) == 0)
              goto LABEL_104;
            v76 = v77 + 1;
            v72 = (uint64_t *)v77[1];
            if (!v72)
              goto LABEL_107;
          }
        }
      }
      v76 = (char **)(a6 + 1);
      v77 = (char **)(a6 + 1);
      if (!v72)
        goto LABEL_107;
      v76 = (char **)(v74 + 1);
      v77 = (char **)v74;
LABEL_104:
      if (*v76)
      {
        v81 = v44[1];
        if (!v81)
          goto LABEL_112;
        goto LABEL_110;
      }
LABEL_107:
      v82 = (char *)operator new(0x30uLL);
      v83 = *(_OWORD *)v71;
      *((_DWORD *)v82 + 11) = *((_DWORD *)v44 + 11);
      *(_OWORD *)(v82 + 28) = v83;
      *(_QWORD *)v82 = 0;
      *((_QWORD *)v82 + 1) = 0;
      *((_QWORD *)v82 + 2) = v77;
      *v76 = v82;
      v84 = (uint64_t *)**a6;
      if (v84)
      {
        *a6 = v84;
        v82 = *v76;
      }
      sub_2231A9A8C(a6[1], (uint64_t *)v82);
      a6[2] = (uint64_t *)((char *)a6[2] + 1);
      v81 = v44[1];
      if (!v81)
      {
        do
        {
LABEL_112:
          v85 = (_QWORD **)v44[2];
          v50 = *v85 == v44;
          v44 = v85;
        }
        while (!v50);
        goto LABEL_71;
      }
      do
      {
LABEL_110:
        v85 = (_QWORD **)v81;
        v81 = (_QWORD *)*v81;
      }
      while (v81);
LABEL_71:
      v44 = v85;
    }
    while (v85 != v93);
  }
  sub_223198030((uint64_t)&v92, v93[0]);
  result = v91;
  v91 = 0;
  if (result)
  {
    v87 = sub_22370F604(result);
    return (uint64_t *)MEMORY[0x227684CE8](v87, 0x10A0C402FF47DCALL);
  }
  return result;
}

void sub_22374AC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_223729CD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22374AC38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10A0C4047C2BC0BLL);
  _Unwind_Resume(a1);
}

void sub_22374AC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_2231BD974((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_22374AC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_2236FE2F4((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_22374AC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_2236FE2F4((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_22374AC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_2236FE2F4((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_22374ACB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_2236FE2F4((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_22374ACC4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char *v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  void *v16;
  void *v17;
  void *v18;
  void *__p;
  char *v20;

  sub_22370D35C(*a2, &__p);
  v6 = (char *)__p;
  v5 = v20;
  if (__p == v20)
  {
    v18 = __p;
    if (__p)
      goto LABEL_32;
    return;
  }
  v7 = (uint64_t *)__p;
  while (2)
  {
    v8 = *v7;
    v9 = v7[1];
    while (v8 != v9)
    {
      if (!*(_DWORD *)(v8 + 16))
      {
        v10 = *(_QWORD *)(a1 + 208);
        v11 = *(_QWORD **)(a1 + 216);
        if ((_QWORD *)v10 != v11)
        {
          while (*(_QWORD *)v10 != *(_QWORD *)v8 || *(_QWORD *)(v10 + 8) != *(_QWORD *)(v8 + 8))
          {
            v10 += 424;
            if ((_QWORD *)v10 == v11)
            {
              v10 = *(_QWORD *)(a1 + 216);
              break;
            }
          }
        }
        v13 = v10 & 0xFFFFFFFFFFFFFF00;
        if ((_QWORD *)v10 == v11)
          v10 = 0;
        else
          v10 = v10;
        v14 = v10 | v13;
        if (*(_QWORD *)(v14 + 216) >= a3)
        {
          *(_DWORD *)(v14 + 232) |= 2u;
          *(_QWORD *)(v14 + 216) = a3;
          *(_BYTE *)(v14 + 224) = 0;
          if (!*(_BYTE *)(v14 + 256))
            goto LABEL_23;
        }
        else
        {
          *(_DWORD *)(v14 + 232) = 2;
          *(_QWORD *)(v14 + 216) = a3;
          *(_BYTE *)(v14 + 224) = 0;
          if (!*(_BYTE *)(v14 + 256))
LABEL_23:
            *(_BYTE *)(v14 + 256) = 1;
        }
        *(_QWORD *)(v14 + 240) = a3;
        *(_BYTE *)(v14 + 248) = 0;
      }
      v8 += 36;
    }
    v7 += 3;
    if (v7 != (uint64_t *)v5)
      continue;
    break;
  }
  if (v6)
  {
    v15 = v5;
    do
    {
      v17 = (void *)*((_QWORD *)v15 - 3);
      v15 -= 24;
      v16 = v17;
      if (v17)
      {
        *((_QWORD *)v5 - 2) = v16;
        operator delete(v16);
      }
      v5 = v15;
    }
    while (v15 != v6);
    v18 = __p;
LABEL_32:
    v20 = v6;
    operator delete(v18);
  }
}

void sub_22374AE30(uint64_t a1, uint64_t a2, uint64_t *a3, float32x4_t *a4, uint64_t *a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  __int128 v22;
  __int128 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  sub_223707460(a2, a3, a4, (uint64_t *)&v21);
  sub_22374ACC4(a2, (uint64_t *)&v21, *a3);
  v8 = v21;
  v9 = (uint64_t *)v21[1];
  if (v9 == v21)
  {
    v21 = 0;
LABEL_14:
    v20 = sub_22370F604(v8);
    MEMORY[0x227684CE8](v20, 0x10A0C402FF47DCALL);
    return;
  }
  v10 = *a5;
  do
  {
    v11 = v9[2];
    v12 = v8[3];
    v13 = *(_DWORD *)(v12 + (v9[3] << 6) + 60);
    if (v13)
      v14 = v9[2];
    else
      v14 = v9[3];
    v15 = v12 + (v14 << 6);
    if (*(_DWORD *)(v15 + 60))
      goto LABEL_15;
    v16 = v15 + 24;
    if (v13)
      v11 = v9[3];
    v17 = *(_OWORD *)v16;
    v18 = *(_OWORD *)(v16 + 16);
    v24 = *(_DWORD *)(v16 + 32);
    v22 = v17;
    v23 = v18;
    v19 = v12 + (v11 << 6);
    if (*(_DWORD *)(v19 + 60) != 1)
LABEL_15:
      sub_22316DD70();
    sub_22370FD80(v10, (__int128 *)((char *)&v23 + 4), &v22, *(_DWORD *)(v19 + 24), v23);
    v9 = (uint64_t *)v9[1];
  }
  while (v9 != v8);
  v8 = v21;
  v21 = 0;
  if (v8)
    goto LABEL_14;
}

void sub_22374AF80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22370D318((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_22374AF94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22370D318((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_22374AFA8(int32x4_t *a1@<X0>, uint64_t *a2@<X1>, float32x2_t *a3@<X2>, float32x4_t *a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  uint64_t v18;
  uint64_t v19;
  int32x4_t *v20;
  int32x4_t v21;
  double v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x2_t v26;
  float32x4_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int32x4_t v33;
  char *v34;
  char *v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  _QWORD **v42;
  unsigned __int8 *v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  __int128 v47;
  int8x16_t v48;
  int32x4_t v49;
  __int128 v50;
  _OWORD v51[3];
  float32x2_t v52;
  unsigned __int32 v53;
  int v54;
  int32x4_t v55;
  int32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  _QWORD *v59;
  char v60;
  unsigned __int8 v61;
  void *__p;
  unsigned __int8 *v63;
  float *v64[3];

  sub_223726734(a5, (unsigned __int8 *)a3, (uint64_t)&v59);
  if (!v60)
    goto LABEL_27;
  v12 = a4[1];
  v13 = a4[2];
  v14 = a4[3];
  v15 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a4, COERCE_FLOAT(*(_OWORD *)a3[6].f32)), v12, a3[6], 1), v13, *(float32x4_t *)a3[6].f32, 2), v14, *(float32x4_t *)a3[6].f32, 3);
  v16 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a4, COERCE_FLOAT(*(_OWORD *)a3[8].f32)), v12, a3[8], 1), v13, *(float32x4_t *)a3[8].f32, 2), v14, *(float32x4_t *)a3[8].f32, 3);
  v17 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a4, COERCE_FLOAT(*(_OWORD *)a3[10].f32)), v12, a3[10], 1), v13, *(float32x4_t *)a3[10].f32, 2), v14, *(float32x4_t *)a3[10].f32, 3);
  v55 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a4, COERCE_FLOAT(*(_OWORD *)a3[4].f32)), v12, a3[4], 1), v13, *(float32x4_t *)a3[4].f32, 2), v14, *(float32x4_t *)a3[4].f32, 3);
  v56 = (int32x4_t)v15;
  v57 = (int8x16_t)v16;
  v58 = v17;
  if (v61)
    goto LABEL_3;
  v17.i64[0] ^= 0x8000000080000000;
  *(_QWORD *)&v47 = vzip1q_s32(v55, v56).u64[0];
  *((_QWORD *)&v47 + 1) = v57.u32[0];
  v48 = (int8x16_t)vtrn2q_s32(v55, v56);
  v48.i32[2] = v57.i32[1];
  v49 = vzip2q_s32(v55, v56);
  v49.i32[2] = v57.i32[2];
  HIDWORD(v50) = 0;
  LODWORD(v50) = vdupq_lane_s32(*(int32x2_t *)&v48, 0).i32[3];
  *(_QWORD *)((char *)&v50 + 4) = vextq_s8(v48, v17, 4uLL).u64[0];
  v49.i64[1] = vdupq_laneq_s32(v49, 2).u32[0];
  v51[1] = v50;
  v51[2] = v49;
  v51[0] = v47;
  v52 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)&v47, *(float *)v17.i32), *(float32x2_t *)v48.i8, *(float32x2_t *)v17.i8, 1), *(float32x2_t *)v49.i8, COERCE_FLOAT(v17.i32[2] ^ 0x80000000));
  v53 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v57.i8, *(float32x2_t *)v17.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1), *(float32x2_t *)v57.i8, 1), (float32x2_t)(v17.i64[1] ^ 0xFFFFFFFF80000000), (float32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL)).u32[0];
  v54 = 1065353216;
  v64[0] = (float *)v51;
  v64[1] = (float *)(v59 + 18);
  if (sub_2231F73E4(v64))
  {
LABEL_27:
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)a6 = a6 + 8;
    *(_QWORD *)(a6 + 40) = 0;
    *(_QWORD *)(a6 + 48) = 0;
    *(_QWORD *)(a6 + 32) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    *(_QWORD *)(a6 + 24) = a6 + 32;
    *(_QWORD *)(a6 + 56) = 0;
    *(_QWORD *)(a6 + 64) = 0;
    goto LABEL_28;
  }
  if (v61)
  {
LABEL_3:
    v18 = a1[2].i64[0];
    v19 = a1[2].i64[1];
    v20 = a1 + 2;
    sub_223748C70(a2, v18, v19, v59);
    v28 = v59;
    v29 = v59[26];
    v30 = v59[27];
    while (v29 != v30)
    {
      v32 = *a2;
      if (*a2 <= *(_QWORD *)(v29 + 216))
        v31 = *(_DWORD *)(v29 + 232);
      else
        v31 = 0;
      *(_DWORD *)(v29 + 232) = v31 | 1;
      *(_QWORD *)(v29 + 216) = v32;
      *(_BYTE *)(v29 + 224) = 0;
      v29 += 424;
    }
    v33 = *v20;
    *(int32x4_t *)(v28 + 29) = *v20;
  }
  v34 = (char *)__p;
  v35 = (char *)v63;
  if (__p != v63)
  {
    do
    {
      v37 = sub_22342DA5C(a5 + 5, (uint64_t)v34);
      if (v37)
      {
        v38 = v37[4];
        v39 = *a2;
        if (*a2 > *(_QWORD *)(v38 + 192))
          goto LABEL_18;
      }
      else
      {
        v38 = 0;
        v39 = *a2;
        if (*a2 > MEMORY[0xC0])
        {
LABEL_18:
          v36 = 0;
          goto LABEL_13;
        }
      }
      v36 = *(_DWORD *)(v38 + 208);
LABEL_13:
      *(_DWORD *)(v38 + 208) = v36 | 1;
      *(_QWORD *)(v38 + 192) = v39;
      *(_BYTE *)(v38 + 200) = 0;
      *(_QWORD *)(v38 + 24) = *a2;
      v34 += 16;
    }
    while (v34 != v35);
  }
  sub_22374B324((uint64_t **)a6, (uint64_t)v59, a2, (float32x2_t *)&v55, v61, (uint64_t)a5, v33, v21, v22, v23, v24, v25, v26, v27);
  v40 = (unsigned __int8 *)__p;
  v41 = v63;
  if (__p != v63)
  {
    v42 = (_QWORD **)(a6 + 24);
    do
    {
      v43 = sub_223426D4C((_QWORD *)(a6 + 24), (uint64_t *)(a6 + 32), (unsigned __int8 **)v51, (uint64_t *)v64, v40);
      if (!*(_QWORD *)v43)
      {
        v44 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v44 + 25) = *(_OWORD *)v40;
        v45 = *(_QWORD *)&v51[0];
        *(_QWORD *)v44 = 0;
        *((_QWORD *)v44 + 1) = 0;
        *((_QWORD *)v44 + 2) = v45;
        *(_QWORD *)v43 = v44;
        v46 = (_QWORD *)**v42;
        if (v46)
        {
          *v42 = v46;
          v44 = *(char **)v43;
        }
        sub_2231A9A8C(*(uint64_t **)(a6 + 32), (uint64_t *)v44);
        ++*(_QWORD *)(a6 + 40);
      }
      v40 += 16;
    }
    while (v40 != v41);
  }
LABEL_28:
  if (__p)
  {
    v63 = (unsigned __int8 *)__p;
    operator delete(__p);
  }
}

void sub_22374B2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22374B324(uint64_t **a1, uint64_t a2, _QWORD *a3, float32x2_t *a4, int a5, uint64_t a6, int32x4_t a7, int32x4_t a8, double a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, float32x2_t a13, float32x4_t a14)
{
  float32x2_t v14;
  int v16;
  uint64_t **v20;
  __int128 v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  unsigned __int32 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x4_t v38;
  float32x2_t v39;
  float32x4_t v40;
  uint64_t v41;
  __int128 v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int8x16_t v49;
  _QWORD *v50;
  char v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t *v54;
  __int128 *v55;
  __int128 *v56;
  __int128 v57;
  unsigned __int8 v58;
  const void *v59;
  size_t v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  const char *v65;
  size_t v66;
  unsigned __int8 v67;
  unsigned __int8 v68;
  const char *v69;
  size_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  __int8 *v75;
  NSObject *v76;
  uint64_t v77;
  uint64_t v78;
  size_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  size_t v83;
  size_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  _QWORD *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *shared_owners;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  char *v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  const char *v116;
  _QWORD *v117;
  int v118;
  int v119;
  __int128 v121;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v123;
  const char *v124;
  int v125;
  const char *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  uint64_t v129;
  char __s[48];
  _BYTE v131[32];
  int8x16_t v132;
  float32x2_t v133;
  unint64_t v134;
  char v135;
  __int128 v136;
  uint64_t v137;
  char v138;
  uint64_t v139;

  v16 = a5;
  v20 = a1;
  v139 = *MEMORY[0x24BDAC8D0];
  a1[1] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  a1[5] = 0;
  a1[6] = 0;
  a1[4] = 0;
  a1[2] = 0;
  a1[3] = (uint64_t *)(a1 + 4);
  a1[7] = 0;
  a1[8] = 0;
  if ((a5 & 1) != 0)
    goto LABEL_119;
  *(float32x2_t *)a7.i8 = *a4;
  a7.i32[2] = a4[1].i32[0];
  *(float32x2_t *)a8.i8 = a4[2];
  a8.i32[2] = a4[3].i32[0];
  *(_QWORD *)&v21 = vzip1q_s32(a7, a8).u64[0];
  *(float32x2_t *)a12.f32 = a4[6];
  a12.i32[2] = a4[7].i32[0];
  v22 = (int8x16_t)vnegq_f32(a12);
  v23 = (int8x16_t)vtrn2q_s32(a7, a8);
  v23.i32[2] = HIDWORD(*(_QWORD *)&a4[4]);
  v14.i32[0] = a4[5].i32[0];
  v24 = (int8x16_t)vzip2q_s32(a7, a8);
  v24.i32[2] = v14.i32[0];
  *((_QWORD *)&v21 + 1) = *(_QWORD *)&a4[4];
  v25 = vmla_f32(vmls_lane_f32(vmul_f32(a4[4], *(float32x2_t *)v22.i8), (float32x2_t)vdup_lane_s32((int32x2_t)a4[4], 1), *(float32x2_t *)a12.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), v14).u32[0];
  HIDWORD(v26) = 0;
  LODWORD(v26) = vdupq_lane_s32(*(int32x2_t *)&v23, 0).i32[3];
  *(_QWORD *)((char *)&v26 + 4) = vextq_s8(v23, v24, 4uLL).u64[0];
  v24.i64[1] = vdupq_laneq_s32((int32x4_t)v24, 2).u32[0];
  *(_OWORD *)&v131[16] = v26;
  v132 = v24;
  *(_OWORD *)v131 = v21;
  v133 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v21, *(float *)v22.i32), *(float32x2_t *)v23.i8, *(float32x2_t *)a12.f32, 1), *(float32x2_t *)v24.i8, a12, 2);
  v134 = v25 | 0x3F80000000000000;
  *(_DWORD *)__s = 897988541;
  *(_QWORD *)&v121 = __s;
  if ((sub_22370CDB4((float *)(a2 + 144), (float *)v131, (float **)&v121) & 1) == 0)
  {
LABEL_119:
    *(_QWORD *)(a2 + 24) = *a3;
    v28 = *(_QWORD *)(a2 + 208);
    v27 = *(_QWORD *)(a2 + 216);
    if (v28 == v27)
    {
      v41 = *(_QWORD *)(a2 + 208);
    }
    else
    {
      do
      {
        v29 = *(float32x2_t *)(a2 + 144);
        LODWORD(a9) = *(_DWORD *)(a2 + 152);
        v30 = *(float32x2_t *)(a2 + 160);
        a11.i32[0] = *(_DWORD *)(a2 + 168);
        v31 = *(float32x2_t *)(a2 + 176);
        a13.i32[0] = *(_DWORD *)(a2 + 184);
        a14.i64[0] = *(_QWORD *)(v28 + 16);
        v14.i32[0] = *(_DWORD *)(v28 + 24);
        *(float32x2_t *)v32.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v29, a14.f32[0]), v30, *(float32x2_t *)a14.f32, 1), v31, v14.f32[0]);
        *(float32x2_t *)&v32.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&a9, *(float32x2_t *)a14.f32), *(float32x2_t *)a11.f32, *(float32x2_t *)a14.f32, 1), v14, a13);
        a14.i64[0] = *(_QWORD *)(a2 + 192);
        a14.i32[2] = *(_DWORD *)(a2 + 200);
        v33 = (int8x16_t)vaddq_f32(v32, a14);
        v34 = *(float32x2_t *)(v28 + 28);
        v32.i32[0] = *(_DWORD *)(v28 + 36);
        v35 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v29, v34.f32[0]), v30, v34, 1), v31, v32.f32[0]);
        v36 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&a9, v34), *(float32x2_t *)a11.f32, v34, 1), *(float32x2_t *)v32.f32, a13);
        a11.i32[0] = a4[1].i32[0];
        v37 = a4[2];
        a13.i32[0] = a4[3].i32[0];
        v14 = a4[4];
        v32.i32[0] = a4[5].i32[0];
        *(float32x2_t *)v38.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*a4, *(float *)v33.i32), v37, *(float32x2_t *)v33.i8, 1), v14, (float32x4_t)v33, 2);
        v39 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a11.f32, *(float32x2_t *)v33.i8), a13, *(float32x2_t *)v33.i8, 1);
        v40 = (float32x4_t)vextq_s8(v33, v33, 8uLL);
        *(float32x2_t *)&v38.u32[2] = vmla_f32(v39, *(float32x2_t *)v40.f32, *(float32x2_t *)v32.f32);
        *(float32x2_t *)v40.f32 = a4[6];
        v40.i32[2] = a4[7].i32[0];
        a14 = vaddq_f32(v38, v40);
        *(float32x2_t *)a10.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a4, v35.f32[0]), v37, v35, 1), v14, v36.f32[0]);
        *(float32x2_t *)a11.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a11.f32, v35), a13, v35, 1), v36, *(float32x2_t *)v32.f32);
        a10.i64[1] = a11.i64[0];
        *(_DWORD *)(v28 + 24) = a14.i32[2];
        *(_QWORD *)(v28 + 16) = a14.i64[0];
        a9 = COERCE_DOUBLE(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a10.f32, 1), *(float32x2_t *)a10.f32, 1), *(float32x2_t *)a11.f32, *(float32x2_t *)a11.f32));
        a8 = (int32x4_t)vmulq_n_f32(a10, 1.0 / sqrtf(*(float *)&a9));
        *(_DWORD *)(v28 + 36) = a8.i32[2];
        *(_QWORD *)(v28 + 28) = a8.i64[0];
        v28 += 424;
      }
      while (v28 != v27);
      v41 = *(_QWORD *)(a2 + 208);
      v28 = *(_QWORD *)(a2 + 216);
    }
    *(float32x2_t *)a7.i8 = *a4;
    a7.i32[2] = a4[1].i32[0];
    *(float32x2_t *)a8.i8 = a4[2];
    a8.i32[2] = a4[3].i32[0];
    a10.i32[0] = a4[5].i32[0];
    *(float32x2_t *)a11.f32 = a4[6];
    a11.i32[2] = a4[7].i32[0];
    *(_QWORD *)&v42 = vzip1q_s32(a7, a8).u64[0];
    v43 = (int8x16_t)vnegq_f32(a11);
    v44 = (int8x16_t)vtrn2q_s32(a7, a8);
    v44.i32[2] = HIDWORD(*(_QWORD *)&a4[4]);
    v45 = (int8x16_t)vzip2q_s32(a7, a8);
    *(float32x2_t *)&v46 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v42, *(float *)v43.i32), *(float32x2_t *)v44.i8, *(float32x2_t *)a11.f32, 1), *(float32x2_t *)v45.i8, a11, 2);
    v45.i32[2] = a10.i32[0];
    *((_QWORD *)&v46 + 1) = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(a4[4], *(float32x2_t *)v43.i8), (float32x2_t)vdup_lane_s32((int32x2_t)a4[4], 1), *(float32x2_t *)a11.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), *(float32x2_t *)a10.f32).u32[0]);
    HIDWORD(v47) = 0;
    LODWORD(v47) = v44.i32[0];
    v49 = vextq_s8(vextq_s8(v44, v44, 0xCuLL), v45, 8uLL);
    *(_QWORD *)&v48 = v49.i64[1];
    *(_QWORD *)((char *)&v47 + 4) = v49.i64[0];
    *((_QWORD *)&v48 + 1) = vdupq_laneq_s32((int32x4_t)v45, 2).u32[0];
    *((_QWORD *)&v42 + 1) = *(_QWORD *)&a4[4];
    *(_OWORD *)(a2 + 144) = v42;
    *(_OWORD *)(a2 + 160) = v47;
    *(_OWORD *)(a2 + 176) = v48;
    *(_OWORD *)(a2 + 192) = v46;
    if (v41 != v28)
    {
      v50 = (_QWORD *)(a6 + 80);
      v118 = v16;
      v117 = (_QWORD *)(a6 + 80);
      while (1)
      {
        v52 = sub_22342DA5C(v50, v41);
        if (!v52)
          break;
        v53 = v52[4];
        *(_QWORD *)v131 = v53;
        v54 = sub_2231A9C40(v20, (unsigned __int8 *)v53, (uint64_t)&unk_2245BA939, (_OWORD **)v131);
        *((_DWORD *)v54 + 11) |= 0x20u;
        if (v16)
        {
          v55 = (__int128 *)(v53 + 216);
          *(_OWORD *)v131 = *(_OWORD *)(v53 + 216);
          *(_QWORD *)&v131[16] = *(_QWORD *)(v53 + 232);
          v121 = *(_OWORD *)(v41 + 240);
          rep = *(_QWORD *)(v41 + 256);
          if (v131[16])
          {
            if ((_BYTE)rep)
            {
              v56 = &v121;
              if (*(uint64_t *)v131 >= (uint64_t)v121)
                v56 = (__int128 *)v131;
              v57 = *v56;
            }
            else
            {
              v57 = *v55;
            }
            *(_OWORD *)__s = v57;
            v51 = 1;
          }
          else
          {
            *(_OWORD *)__s = *(_OWORD *)(v41 + 240);
            v51 = rep;
          }
          *v55 = *(_OWORD *)__s;
          *(_BYTE *)(v53 + 232) = v51;
        }
LABEL_11:
        v41 += 424;
        if (v41 == v28)
          return;
      }
      v58 = atomic_load((unsigned __int8 *)&qword_2557892F0);
      if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
      {
        __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
        __cxa_guard_release(&qword_2557892F0);
      }
      sub_22374A140(v131);
      if (*(char *)(*(_QWORD *)v131 + 39) < 0)
      {
        v59 = *(const void **)(*(_QWORD *)v131 + 16);
        v60 = *(_QWORD *)(*(_QWORD *)v131 + 24);
      }
      else
      {
        v59 = (const void *)(*(_QWORD *)v131 + 16);
        v60 = *(unsigned __int8 *)(*(_QWORD *)v131 + 39);
      }
      sub_223195728((uint64_t)&stru_255789280, v59, v60, "KP %.13s is not linked to a GP", 0x1EuLL);
      sub_22374A234(&v129);
      if (**(int **)(v129 + 56) > 5)
        goto LABEL_11;
      v61 = *(unsigned __int8 *)(v129 + 72);
      v62 = sub_22322F254(v129, "OSLogSurrogateAppender", 1, 0);
      v63 = v62;
      if (!v61 && !v62)
        goto LABEL_11;
      v119 = v61;
      *(_QWORD *)&v121 = &v129;
      *((std::chrono::steady_clock::time_point *)&v121 + 1) = std::chrono::steady_clock::now();
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v123 = 5;
      v124 = "unknown file";
      v125 = 121;
      v126 = "unknown function";
      v127 = 0;
      v128 = 0;
      sub_2245664AC((unsigned __int8 *)v41, __s);
      v64 = *(_QWORD *)v121;
      v65 = (const char *)(*(_QWORD *)v121 + 16);
      v116 = v65;
      if (*(char *)(*(_QWORD *)v121 + 39) < 0)
      {
        v65 = *(const char **)(v64 + 16);
        v66 = *(_QWORD *)(v64 + 24);
        v68 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v68 & 1) != 0)
          goto LABEL_32;
      }
      else
      {
        v66 = *(unsigned __int8 *)(*(_QWORD *)v121 + 39);
        v67 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v67 & 1) != 0)
          goto LABEL_32;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&v136);
        if (v138)
        {
          xmmword_255788F40 = v136;
          unk_255788F50 = v137;
        }
        else
        {
          byte_255788F57 = 14;
          strcpy((char *)&xmmword_255788F40, "com.apple.cv3d");
        }
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_32:
      if (byte_255788F57 >= 0)
        v69 = (const char *)&xmmword_255788F40;
      else
        v69 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v70 = byte_255788F57;
      else
        v70 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)v131 = os_log_create(v69, v65);
      if (v70 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v70 >= 0x17)
      {
        v72 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v70 | 7) != 0x17)
          v72 = v70 | 7;
        v73 = v72 + 1;
        v71 = operator new(v72 + 1);
        *(_QWORD *)&v131[16] = v70;
        *(_QWORD *)&v131[24] = v73 | 0x8000000000000000;
        *(_QWORD *)&v131[8] = v71;
      }
      else
      {
        v131[31] = v70;
        v71 = &v131[8];
        if (!v70)
        {
LABEL_46:
          v71[v70] = 0;
          v132.i8[0] = 1;
          if (v66 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v20 = a1;
          v74 = v131;
          if (v66 >= 0x17)
          {
            v77 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v66 | 7) != 0x17)
              v77 = v66 | 7;
            v78 = v77 + 1;
            v75 = (__int8 *)operator new(v77 + 1);
            v133 = (float32x2_t)v66;
            v134 = v78 | 0x8000000000000000;
            v132.i64[1] = (uint64_t)v75;
          }
          else
          {
            HIBYTE(v134) = v66;
            v75 = &v132.i8[8];
            if (!v66)
            {
              v132.i8[8] = 0;
              v135 = 1;
              v76 = *(NSObject **)v131;
              if ((SHIBYTE(v134) & 0x80000000) == 0)
                goto LABEL_50;
              goto LABEL_56;
            }
          }
          memmove(v75, v65, v66);
          v75[v66] = 0;
          v135 = 1;
          v76 = *(NSObject **)v131;
          if ((SHIBYTE(v134) & 0x80000000) == 0)
          {
LABEL_50:
            v16 = v118;
            if (!v132.i8[0])
              goto LABEL_59;
            goto LABEL_57;
          }
LABEL_56:
          operator delete((void *)v132.i64[1]);
          v16 = v118;
          if (!v132.i8[0])
            goto LABEL_59;
LABEL_57:
          if ((v131[31] & 0x80000000) != 0)
            operator delete(*(void **)&v131[8]);
LABEL_59:
          if (*(_QWORD *)v131)
            os_release(*(void **)v131);
          if (!v63 || !*(_QWORD *)(v63 + 24))
          {
            os_log_type_enabled(v76, OS_LOG_TYPE_ERROR);
            *(_QWORD *)v131 = 0xD04100202;
            *(_WORD *)&v131[8] = 2080;
            *(_QWORD *)&v131[10] = __s;
            v85 = (void *)_os_log_send_and_compose_impl();
            v50 = v117;
            if (v85)
              free(v85);
            goto LABEL_99;
          }
          v79 = _os_log_pack_size();
          v80 = (std::__shared_weak_count_vtbl *)operator new(v79, (std::align_val_t)8uLL);
          v81 = (std::__shared_weak_count *)operator new();
          v81->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v81->__shared_owners_;
          v81->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v81->__shared_weak_owners_ = 0;
          v81[1].__vftable = v80;
          v83 = strlen(__s);
          v115 = v81;
          if (v83 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v84 = v83;
          if (v83 >= 0x17)
          {
            v86 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v83 | 7) != 0x17)
              v86 = v83 | 7;
            v87 = v86 + 1;
            v74 = operator new(v86 + 1);
            *(_QWORD *)&v131[8] = v84;
            *(_QWORD *)&v131[16] = v87 | 0x8000000000000000;
            *(_QWORD *)v131 = v74;
          }
          else
          {
            v131[23] = v83;
            if (!v83)
            {
LABEL_73:
              v114 = v80;
              v74[v84] = 0;
              *(_QWORD *)&v136 = *(_QWORD *)&v131[8];
              v88 = *(_QWORD *)v131;
              *(_QWORD *)((char *)&v136 + 7) = *(_QWORD *)&v131[15];
              v89 = v131[23];
              v90 = operator new(0x38uLL);
              v91 = (std::__shared_weak_count *)v90;
              v90[1] = 0;
              v92 = v90 + 1;
              v90[2] = 0;
              v90[3] = off_24EC1FA48;
              v113 = (char *)(v90 + 3);
              v90[4] = v88;
              v93 = (char *)(v90 + 4);
              *v90 = &off_24EC1F9F8;
              v90[5] = v136;
              *(_QWORD *)((char *)v90 + 47) = *(_QWORD *)((char *)&v136 + 7);
              *((_BYTE *)v90 + 55) = v89;
              do
                v94 = __ldxr(p_shared_owners);
              while (__stxr(v94 + 1, p_shared_owners));
              do
                v95 = __ldxr(v92);
              while (__stxr(v95 + 1, v92));
              do
                v96 = __ldaxr(v92);
              while (__stlxr(v96 - 1, v92));
              if (!v96)
              {
                (*(void (**)(_QWORD *))(*v90 + 16))(v90);
                std::__shared_weak_count::__release_weak(v91);
              }
              do
                v97 = __ldaxr(p_shared_owners);
              while (__stlxr(v97 - 1, p_shared_owners));
              if (!v97)
              {
                ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                std::__shared_weak_count::__release_weak(v115);
              }
              if (SHIBYTE(v91[2].__vftable) >= 0)
                shared_owners = v93;
              else
                shared_owners = (char *)v91[1].__shared_owners_;
              v99 = _os_log_pack_fill();
              *(_DWORD *)v99 = 68157954;
              *(_DWORD *)(v99 + 4) = 13;
              *(_WORD *)(v99 + 8) = 2080;
              *(_QWORD *)(v99 + 10) = shared_owners;
              v100 = operator new();
              v101 = *(unsigned __int8 *)(v64 + 39);
              v102 = v116;
              if ((v101 & 0x80u) != 0)
              {
                v102 = *(const char **)(v64 + 16);
                v101 = *(_QWORD *)(v64 + 24);
              }
              *(_QWORD *)v100 = v114;
              *(_QWORD *)(v100 + 8) = v114;
              *(_QWORD *)(v100 + 16) = v115;
              *(_QWORD *)(v100 + 24) = v113;
              *(_QWORD *)(v100 + 32) = v91;
              *(_QWORD *)(v100 + 40) = v102;
              *(_QWORD *)(v100 + 48) = v101;
              *(_BYTE *)(v100 + 56) = 16;
              *(_QWORD *)v131 = v100;
              v20 = a1;
              (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v63 + 24) + 40))(*(_QWORD *)(v63 + 24), v131);
              v50 = v117;
              v103 = *(_QWORD *)v131;
              *(_QWORD *)v131 = 0;
              v16 = v118;
              if (v103)
              {
                v104 = *(std::__shared_weak_count **)(v103 + 32);
                if (v104)
                {
                  v105 = (unint64_t *)&v104->__shared_owners_;
                  do
                    v106 = __ldaxr(v105);
                  while (__stlxr(v106 - 1, v105));
                  if (!v106)
                  {
                    ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                    std::__shared_weak_count::__release_weak(v104);
                  }
                }
                v107 = *(std::__shared_weak_count **)(v103 + 16);
                if (v107)
                {
                  v108 = (unint64_t *)&v107->__shared_owners_;
                  do
                    v109 = __ldaxr(v108);
                  while (__stlxr(v109 - 1, v108));
                  if (!v109)
                  {
                    ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                    std::__shared_weak_count::__release_weak(v107);
                  }
                }
                MEMORY[0x227684CE8](v103, 0x10F0C40B62ED6C6);
                v50 = v117;
              }
LABEL_99:
              if (v119)
              {
                sub_2245664AC((unsigned __int8 *)v41, v131);
                sub_22322C138((uint64_t)&v121, "KP %.13s is not linked to a GP", v131);
                sub_223182C08((uint64_t)&v121);
              }
              sub_223182C08((uint64_t)&v121);
              v110 = v128;
              if (v128)
              {
                v111 = (unint64_t *)&v128->__shared_owners_;
                do
                  v112 = __ldaxr(v111);
                while (__stlxr(v112 - 1, v111));
                if (!v112)
                {
                  ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                  std::__shared_weak_count::__release_weak(v110);
                }
              }
              goto LABEL_11;
            }
          }
          memcpy(v74, __s, v84);
          goto LABEL_73;
        }
      }
      memmove(v71, v69, v70);
      goto LABEL_46;
    }
  }
}

void sub_22374BF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35)
{
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;

  __cxa_guard_abort(&qword_255788F58);
  sub_223182C08((uint64_t)&a27);
  v36 = a35;
  if (a35)
  {
    p_shared_owners = (unint64_t *)&a35->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  sub_2236C4000(a26);
  _Unwind_Resume(a1);
}

void sub_22374C1C4(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  size_t v11;
  const char *v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  const char *v15;
  size_t v16;
  const char *v17;
  _BYTE *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  const char *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  std::__shared_weak_count_vtbl *v30;
  std::__shared_weak_count *v31;
  size_t v32;
  size_t v33;
  _QWORD *p_dst;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  void *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  std::__shared_weak_count *v90;
  char *v91;
  std::__shared_weak_count *v92;
  _QWORD *__dst;
  __int128 v94;
  char __s[37];
  uint64_t *v96;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v98;
  int v99;
  const char *v100;
  int v101;
  const char *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  _BYTE v105[24];
  __int128 v106;
  void *v107[2];
  unint64_t v108;
  char v109;
  _QWORD v110[5];

  v110[2] = *MEMORY[0x24BDAC8D0];
  sub_22374A140(&v88);
  if (**(int **)(v88 + 56) > 3)
    goto LABEL_117;
  v6 = *(unsigned __int8 *)(v88 + 72);
  v7 = sub_22322F254(v88, "OSLogSurrogateAppender", 1, 0);
  v8 = v7;
  if (!v6 && v7 == 0)
    goto LABEL_117;
  v96 = &v88;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v98 = std::chrono::system_clock::now().__d_.__rep_;
  v99 = 3;
  v100 = "unknown file";
  v101 = 329;
  v103 = 0;
  v104 = 0;
  v102 = "unknown function";
  sub_2245664AC((unsigned __int8 *)a1, __s);
  v10 = *v96;
  v86 = *v96;
  if (*(char *)(*v96 + 39) < 0)
  {
    v12 = *(const char **)(v10 + 16);
    v11 = *(_QWORD *)(v10 + 24);
    v87 = a1;
    v85 = *v96 + 16;
    v14 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v14 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v11 = *(unsigned __int8 *)(*v96 + 39);
    v12 = (const char *)(*v96 + 16);
    v87 = a1;
    v85 = (uint64_t)v12;
    v13 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v13 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v105);
    sub_223199C58("com.apple.cv3d", (unint64_t)v105, &xmmword_255788F40);
    if ((_BYTE)v106 && (v105[23] & 0x80000000) != 0)
      operator delete(*(void **)v105);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F57 >= 0)
    v15 = (const char *)&xmmword_255788F40;
  else
    v15 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v16 = byte_255788F57;
  else
    v16 = *((_QWORD *)&xmmword_255788F40 + 1);
  v17 = v12;
  *(_QWORD *)v105 = os_log_create(v15, v12);
  v18 = &v105[8];
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v16 >= 0x17)
  {
    v19 = v8;
    v20 = v6;
    v21 = a3;
    v22 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v22 = v16 | 7;
    v23 = v22 + 1;
    v18 = operator new(v22 + 1);
    *(_QWORD *)&v105[16] = v16;
    *(_QWORD *)&v106 = v23 | 0x8000000000000000;
    *(_QWORD *)&v105[8] = v18;
    a3 = v21;
    v6 = v20;
    v8 = v19;
    goto LABEL_23;
  }
  BYTE7(v106) = v16;
  if (v16)
LABEL_23:
    memmove(v18, v15, v16);
  v18[v16] = 0;
  BYTE8(v106) = 1;
  v24 = v107;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v25 = v17;
  if (v11 >= 0x17)
  {
    v27 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v27 = v11 | 7;
    v28 = v27 + 1;
    a1 = v87;
    v24 = (void **)operator new(v27 + 1);
    v107[1] = (void *)v11;
    v108 = v28 | 0x8000000000000000;
    v107[0] = v24;
  }
  else
  {
    HIBYTE(v108) = v11;
    a1 = v87;
    if (!v11)
    {
      LOBYTE(v107[0]) = 0;
      v109 = 1;
      v26 = *(NSObject **)v105;
      if ((SHIBYTE(v108) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v24, v25, v11);
  *((_BYTE *)v24 + v11) = 0;
  v109 = 1;
  v26 = *(NSObject **)v105;
  if ((SHIBYTE(v108) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v106))
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v107[0]);
  if (!BYTE8(v106))
    goto LABEL_37;
LABEL_35:
  if (SBYTE7(v106) < 0)
    operator delete(*(void **)&v105[8]);
LABEL_37:
  if (*(_QWORD *)v105)
    os_release(*(void **)v105);
  if (!v8 || !*(_QWORD *)(v8 + 24))
  {
    os_log_type_enabled(v26, OS_LOG_TYPE_INFO);
    *(_QWORD *)v105 = 0xD04100202;
    *(_WORD *)&v105[8] = 2080;
    *(_QWORD *)&v105[10] = __s;
    v35 = (void *)_os_log_send_and_compose_impl();
    if (v35)
      free(v35);
    goto LABEL_110;
  }
  v29 = _os_log_pack_size();
  v30 = (std::__shared_weak_count_vtbl *)operator new(v29, (std::align_val_t)8uLL);
  v31 = (std::__shared_weak_count *)operator new();
  v31->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v31->__shared_owners_ = 0;
  v31->__shared_weak_owners_ = 0;
  v31[1].__vftable = v30;
  *(_QWORD *)&v89 = v30;
  *((_QWORD *)&v89 + 1) = v30;
  v91 = 0;
  v92 = 0;
  v90 = v31;
  v32 = strlen(__s);
  if (v32 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v33 = v32;
  if (v32 >= 0x17)
  {
    v36 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v36 = v32 | 7;
    v37 = v36 + 1;
    p_dst = operator new(v36 + 1);
    *(_QWORD *)&v94 = v33;
    *((_QWORD *)&v94 + 1) = v37 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_50;
  }
  HIBYTE(v94) = v32;
  p_dst = &__dst;
  if (v32)
LABEL_50:
    memcpy(p_dst, __s, v33);
  *((_BYTE *)p_dst + v33) = 0;
  v38 = __dst;
  v110[0] = v94;
  *(_QWORD *)((char *)v110 + 7) = *(_QWORD *)((char *)&v94 + 7);
  v39 = HIBYTE(v94);
  v40 = operator new(0x38uLL);
  v40[1] = 0;
  v40[2] = 0;
  v40[3] = off_24EC1FA48;
  *v40 = &off_24EC1F9F8;
  v41 = v110[0];
  v40[4] = v38;
  v40[5] = v41;
  *(_QWORD *)((char *)v40 + 47) = *(_QWORD *)((char *)v110 + 7);
  *((_BYTE *)v40 + 55) = v39;
  v110[0] = 0;
  *(_QWORD *)((char *)v110 + 7) = 0;
  v42 = v92;
  v91 = (char *)(v40 + 3);
  v92 = (std::__shared_weak_count *)v40;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  *(_OWORD *)v105 = v89;
  v45 = v91;
  *(_QWORD *)&v105[16] = v90;
  if (v90)
  {
    v46 = (unint64_t *)&v90->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = v92;
  *(_QWORD *)&v106 = v45;
  *((_QWORD *)&v106 + 1) = v92;
  if (v92)
  {
    v49 = (unint64_t *)&v92->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
    v107[0] = v45;
    do
      v51 = __ldaxr(v49);
    while (__stlxr(v51 - 1, v49));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  else
  {
    v107[0] = v45;
  }
  v52 = v90;
  if (v90)
  {
    v53 = (unint64_t *)&v90->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = *(_QWORD *)v105;
  if (*((char *)v107[0] + 31) >= 0)
    v56 = (char *)v107[0] + 8;
  else
    v56 = (char *)*((_QWORD *)v107[0] + 1);
  v57 = _os_log_pack_fill();
  *(_DWORD *)v57 = 68157954;
  *(_DWORD *)(v57 + 4) = 13;
  *(_WORD *)(v57 + 8) = 2080;
  *(_QWORD *)(v57 + 10) = v56;
  v58 = operator new();
  v59 = *(unsigned __int8 *)(v86 + 39);
  v60 = v85;
  if ((v59 & 0x80u) != 0)
  {
    v60 = *(_QWORD *)(v86 + 16);
    v59 = *(_QWORD *)(v86 + 24);
  }
  *(_QWORD *)v58 = v55;
  *(_OWORD *)(v58 + 8) = *(_OWORD *)&v105[8];
  *(_QWORD *)&v105[8] = 0;
  *(_QWORD *)&v105[16] = 0;
  *(_OWORD *)(v58 + 24) = v106;
  v106 = 0uLL;
  *(_QWORD *)(v58 + 40) = v60;
  *(_QWORD *)(v58 + 48) = v59;
  *(_BYTE *)(v58 + 56) = 1;
  __dst = 0;
  *(_QWORD *)&v89 = v58;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), &v89);
  v61 = v89;
  *(_QWORD *)&v89 = 0;
  if (v61)
  {
    v62 = *(std::__shared_weak_count **)(v61 + 32);
    if (v62)
    {
      v63 = (unint64_t *)&v62->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v65 = *(std::__shared_weak_count **)(v61 + 16);
    if (v65)
    {
      v66 = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    MEMORY[0x227684CE8](v61, 0x10F0C40B62ED6C6);
    v68 = __dst;
    __dst = 0;
    if (v68)
    {
      v69 = (std::__shared_weak_count *)v68[4];
      if (v69)
      {
        v70 = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v72 = (std::__shared_weak_count *)v68[2];
      if (v72)
      {
        v73 = (unint64_t *)&v72->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      MEMORY[0x227684CE8](v68, 0x10F0C40B62ED6C6);
    }
  }
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
  if (*((_QWORD *)&v106 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = *(std::__shared_weak_count **)&v105[16];
  if (*(_QWORD *)&v105[16])
  {
    v79 = (unint64_t *)(*(_QWORD *)&v105[16] + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
LABEL_110:
  if (v6)
  {
    sub_2245664AC((unsigned __int8 *)a1, v105);
    sub_22322C138((uint64_t)&v96, "ProcessPoseAndContentDeleted: Keyframe %.13s is being deleted", v105);
    sub_223182C08((uint64_t)&v96);
  }
  sub_223182C08((uint64_t)&v96);
  v81 = v104;
  if (v104)
  {
    v82 = (unint64_t *)&v104->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
LABEL_117:
  v84 = *(_QWORD *)(a1 + 8);
  v96 = *(uint64_t **)a1;
  rep = v84;
  sub_22372AD34((_QWORD *)a2, (uint64_t)v96, v84, (uint64_t)v105);
  sub_223714774(*(uint64_t **)(a2 + 120), (unsigned __int8 *)&v96);
  sub_22374CCB8(a3, v105, (_QWORD *)a2);
  sub_223198030((uint64_t)v105, *(_QWORD **)&v105[8]);
}

void sub_22374CB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  if (*(_BYTE *)(v28 - 168))
  {
    if (*(char *)(v28 - 169) < 0)
      operator delete(*(void **)(v28 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_22374CB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  sub_22319A054(&a15);
  sub_22319A054(&a20);
  sub_223199DE8(v28 - 192);
  sub_223182DAC((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_22374CBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;
  int v29;

  if (v29 < 0)
    operator delete(v28);
  sub_223199DE8((uint64_t)&a15);
  sub_223182DAC((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_22374CC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_223182DAC((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_22374CC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  void *v30;

  if (*(_BYTE *)(v28 - 160) && *(char *)(v28 - 161) < 0)
    operator delete(*(void **)(v28 - 184));
  v30 = *(void **)(v28 - 192);
  if (v30)
    os_release(v30);
  sub_223182DAC((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_22374CC78()
{
  JUMPOUT(0x22374CCB0);
}

void sub_22374CCB8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _OWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _OWORD *v22;
  _QWORD *v23;
  BOOL v24;
  _OWORD *v26;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v3 = (_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v7 = a3 + 5;
    do
    {
      v8 = (_OWORD *)((char *)v5 + 25);
      v9 = sub_22342DA5C(v7, (uint64_t)v5 + 25);
      if (*(_QWORD *)(v9[4] + 240) != *(_QWORD *)(v9[4] + 248))
      {
        v26 = (_OWORD *)((char *)v5 + 25);
        v10 = sub_2231A9C40((uint64_t **)a1, (unsigned __int8 *)v5 + 25, (uint64_t)&unk_2245BA939, &v26);
        *((_DWORD *)v10 + 11) |= 4u;
        v11 = (_QWORD *)v5[1];
        if (v11)
          goto LABEL_22;
        goto LABEL_24;
      }
      sub_22372D6F4(a3, *(_QWORD *)((char *)v5 + 25), *(_QWORD *)((char *)v5 + 33));
      v13 = *(_OWORD **)(a1 + 56);
      v12 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v13 < v12)
      {
        *v13 = *v8;
        *(_QWORD *)(a1 + 56) = v13 + 1;
        v11 = (_QWORD *)v5[1];
        if (v11)
          goto LABEL_22;
        goto LABEL_24;
      }
      v14 = (_OWORD *)*v3;
      v15 = ((uint64_t)v13 - *v3) >> 4;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60)
        sub_22316E078();
      v17 = v12 - (_QWORD)v14;
      if (v17 >> 3 > v16)
        v16 = v17 >> 3;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 60)
          sub_223174E94();
        v19 = (char *)operator new(16 * v18);
        v20 = &v19[16 * v15];
        *(_OWORD *)v20 = *v8;
        v21 = (uint64_t)v20;
        if (v13 == v14)
        {
LABEL_19:
          v22 = v20 + 16;
          *(_QWORD *)(a1 + 48) = v21;
          *(_QWORD *)(a1 + 56) = v20 + 16;
          *(_QWORD *)(a1 + 64) = &v19[16 * v18];
          if (!v13)
            goto LABEL_21;
LABEL_20:
          operator delete(v13);
          goto LABEL_21;
        }
      }
      else
      {
        v19 = 0;
        v20 = (char *)(16 * v15);
        *(_OWORD *)(16 * v15) = *v8;
        v21 = 16 * v15;
        if (v13 == v14)
          goto LABEL_19;
      }
      do
      {
        *(_OWORD *)(v21 - 16) = *(v13 - 1);
        v21 -= 16;
        --v13;
      }
      while (v13 != v14);
      v13 = (_OWORD *)*v3;
      v22 = v20 + 16;
      *(_QWORD *)(a1 + 48) = v21;
      *(_QWORD *)(a1 + 56) = v20 + 16;
      *(_QWORD *)(a1 + 64) = &v19[16 * v18];
      if (v13)
        goto LABEL_20;
LABEL_21:
      *(_QWORD *)(a1 + 56) = v22;
      v11 = (_QWORD *)v5[1];
      if (v11)
      {
        do
        {
LABEL_22:
          v23 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
        goto LABEL_3;
      }
      do
      {
LABEL_24:
        v23 = (_QWORD *)v5[2];
        v24 = *v23 == (_QWORD)v5;
        v5 = v23;
      }
      while (!v24);
LABEL_3:
      v5 = v23;
    }
    while (v23 != v4);
  }
}

void sub_22374CEFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2236C4000(v1);
  _Unwind_Resume(a1);
}

void sub_22374CF10(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2236C4000(v1);
  _Unwind_Resume(a1);
}

void sub_22374CF24(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2236C4000(v1);
  _Unwind_Resume(a1);
}

void sub_22374CF38(unsigned __int8 *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  size_t v11;
  const char *v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  const char *v15;
  size_t v16;
  const char *v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  const char *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  size_t v33;
  size_t v34;
  _QWORD *p_dst;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  void *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  unsigned __int8 *v87;
  uint64_t v88;
  __int128 v89;
  std::__shared_weak_count *v90;
  char *v91;
  std::__shared_weak_count *v92;
  _QWORD *__dst;
  __int128 v94;
  char __s[37];
  __int128 v96;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v98;
  const char *v99;
  int v100;
  const char *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  _BYTE v104[24];
  __int128 v105;
  void *v106[2];
  unint64_t v107;
  char v108;
  _QWORD v109[5];

  v109[2] = *MEMORY[0x24BDAC8D0];
  sub_22374A140(&v88);
  if (**(int **)(v88 + 56) > 3)
    goto LABEL_117;
  v6 = *(unsigned __int8 *)(v88 + 72);
  v7 = sub_22322F254(v88, "OSLogSurrogateAppender", 1, 0);
  v8 = v7;
  if (!v6 && v7 == 0)
    goto LABEL_117;
  *(_QWORD *)&v96 = &v88;
  *((std::chrono::steady_clock::time_point *)&v96 + 1) = std::chrono::steady_clock::now();
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v98 = 3;
  v99 = "unknown file";
  v100 = 342;
  v102 = 0;
  v103 = 0;
  v101 = "unknown function";
  sub_2245664AC(a1, __s);
  v10 = *(_QWORD *)v96;
  if (*(char *)(*(_QWORD *)v96 + 39) < 0)
  {
    v12 = *(const char **)(v10 + 16);
    v11 = *(_QWORD *)(v10 + 24);
    v85 = *(_QWORD *)v96 + 16;
    v86 = a2;
    v87 = a1;
    v14 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v14 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v11 = *(unsigned __int8 *)(*(_QWORD *)v96 + 39);
    v12 = (const char *)(*(_QWORD *)v96 + 16);
    v85 = (uint64_t)v12;
    v86 = a2;
    v87 = a1;
    v13 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v13 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v104);
    sub_223199C58("com.apple.cv3d", (unint64_t)v104, &xmmword_255788F40);
    if ((_BYTE)v105 && (v104[23] & 0x80000000) != 0)
      operator delete(*(void **)v104);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F57 >= 0)
    v15 = (const char *)&xmmword_255788F40;
  else
    v15 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v16 = byte_255788F57;
  else
    v16 = *((_QWORD *)&xmmword_255788F40 + 1);
  v17 = v12;
  *(_QWORD *)v104 = os_log_create(v15, v12);
  v18 = &v104[8];
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v16 >= 0x17)
  {
    v19 = v8;
    v20 = v10;
    v21 = v6;
    v22 = a3;
    v23 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v23 = v16 | 7;
    v24 = v23 + 1;
    v18 = operator new(v23 + 1);
    *(_QWORD *)&v104[16] = v16;
    *(_QWORD *)&v105 = v24 | 0x8000000000000000;
    *(_QWORD *)&v104[8] = v18;
    a3 = v22;
    v6 = v21;
    v10 = v20;
    v8 = v19;
    goto LABEL_23;
  }
  BYTE7(v105) = v16;
  if (v16)
LABEL_23:
    memmove(v18, v15, v16);
  v18[v16] = 0;
  BYTE8(v105) = 1;
  v25 = v106;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v26 = v17;
  if (v11 >= 0x17)
  {
    v28 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v28 = v11 | 7;
    v29 = v28 + 1;
    a2 = v86;
    v25 = (void **)operator new(v28 + 1);
    v106[1] = (void *)v11;
    v107 = v29 | 0x8000000000000000;
    v106[0] = v25;
    a1 = v87;
  }
  else
  {
    HIBYTE(v107) = v11;
    a2 = v86;
    a1 = v87;
    if (!v11)
    {
      LOBYTE(v106[0]) = 0;
      v108 = 1;
      v27 = *(NSObject **)v104;
      if ((SHIBYTE(v107) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v25, v26, v11);
  *((_BYTE *)v25 + v11) = 0;
  v108 = 1;
  v27 = *(NSObject **)v104;
  if ((SHIBYTE(v107) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v105))
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v106[0]);
  if (!BYTE8(v105))
    goto LABEL_37;
LABEL_35:
  if (SBYTE7(v105) < 0)
    operator delete(*(void **)&v104[8]);
LABEL_37:
  if (*(_QWORD *)v104)
    os_release(*(void **)v104);
  if (!v8 || !*(_QWORD *)(v8 + 24))
  {
    os_log_type_enabled(v27, OS_LOG_TYPE_INFO);
    *(_QWORD *)v104 = 0xD04100202;
    *(_WORD *)&v104[8] = 2080;
    *(_QWORD *)&v104[10] = __s;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
    goto LABEL_110;
  }
  v30 = _os_log_pack_size();
  v31 = (std::__shared_weak_count_vtbl *)operator new(v30, (std::align_val_t)8uLL);
  v32 = (std::__shared_weak_count *)operator new();
  v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v32->__shared_owners_ = 0;
  v32->__shared_weak_owners_ = 0;
  v32[1].__vftable = v31;
  *(_QWORD *)&v89 = v31;
  *((_QWORD *)&v89 + 1) = v31;
  v91 = 0;
  v92 = 0;
  v90 = v32;
  v33 = strlen(__s);
  if (v33 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v34 = v33;
  if (v33 >= 0x17)
  {
    v37 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v37 = v33 | 7;
    v38 = v37 + 1;
    p_dst = operator new(v37 + 1);
    *(_QWORD *)&v94 = v34;
    *((_QWORD *)&v94 + 1) = v38 | 0x8000000000000000;
    __dst = p_dst;
    a1 = v87;
    goto LABEL_50;
  }
  HIBYTE(v94) = v33;
  p_dst = &__dst;
  if (v33)
LABEL_50:
    memcpy(p_dst, __s, v34);
  *((_BYTE *)p_dst + v34) = 0;
  v39 = __dst;
  v109[0] = v94;
  *(_QWORD *)((char *)v109 + 7) = *(_QWORD *)((char *)&v94 + 7);
  v40 = HIBYTE(v94);
  v41 = operator new(0x38uLL);
  v41[1] = 0;
  v41[2] = 0;
  v41[3] = off_24EC1FA48;
  *v41 = &off_24EC1F9F8;
  v42 = v109[0];
  v41[4] = v39;
  v41[5] = v42;
  *(_QWORD *)((char *)v41 + 47) = *(_QWORD *)((char *)v109 + 7);
  *((_BYTE *)v41 + 55) = v40;
  v109[0] = 0;
  *(_QWORD *)((char *)v109 + 7) = 0;
  v43 = v92;
  v91 = (char *)(v41 + 3);
  v92 = (std::__shared_weak_count *)v41;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  *(_OWORD *)v104 = v89;
  v46 = v91;
  *(_QWORD *)&v104[16] = v90;
  if (v90)
  {
    v47 = (unint64_t *)&v90->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  v49 = v92;
  *(_QWORD *)&v105 = v46;
  *((_QWORD *)&v105 + 1) = v92;
  if (v92)
  {
    v50 = (unint64_t *)&v92->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
    v106[0] = v46;
    do
      v52 = __ldaxr(v50);
    while (__stlxr(v52 - 1, v50));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  else
  {
    v106[0] = v46;
  }
  v53 = v90;
  if (v90)
  {
    v54 = (unint64_t *)&v90->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = *(_QWORD *)v104;
  if (*((char *)v106[0] + 31) >= 0)
    v57 = (char *)v106[0] + 8;
  else
    v57 = (char *)*((_QWORD *)v106[0] + 1);
  v58 = _os_log_pack_fill();
  *(_DWORD *)v58 = 68157954;
  *(_DWORD *)(v58 + 4) = 13;
  *(_WORD *)(v58 + 8) = 2080;
  *(_QWORD *)(v58 + 10) = v57;
  v59 = operator new();
  v60 = *(unsigned __int8 *)(v10 + 39);
  v61 = v85;
  if ((v60 & 0x80u) != 0)
  {
    v61 = *(_QWORD *)(v10 + 16);
    v60 = *(_QWORD *)(v10 + 24);
  }
  *(_QWORD *)v59 = v56;
  *(_OWORD *)(v59 + 8) = *(_OWORD *)&v104[8];
  *(_QWORD *)&v104[8] = 0;
  *(_QWORD *)&v104[16] = 0;
  *(_OWORD *)(v59 + 24) = v105;
  v105 = 0uLL;
  *(_QWORD *)(v59 + 40) = v61;
  *(_QWORD *)(v59 + 48) = v60;
  *(_BYTE *)(v59 + 56) = 1;
  __dst = 0;
  *(_QWORD *)&v89 = v59;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), &v89);
  v62 = v89;
  *(_QWORD *)&v89 = 0;
  if (v62)
  {
    v63 = *(std::__shared_weak_count **)(v62 + 32);
    if (v63)
    {
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = *(std::__shared_weak_count **)(v62 + 16);
    if (v66)
    {
      v67 = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    MEMORY[0x227684CE8](v62, 0x10F0C40B62ED6C6);
    v69 = __dst;
    __dst = 0;
    if (v69)
    {
      v70 = (std::__shared_weak_count *)v69[4];
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v73 = (std::__shared_weak_count *)v69[2];
      if (v73)
      {
        v74 = (unint64_t *)&v73->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      MEMORY[0x227684CE8](v69, 0x10F0C40B62ED6C6);
    }
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
  if (*((_QWORD *)&v105 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = *(std::__shared_weak_count **)&v104[16];
  if (*(_QWORD *)&v104[16])
  {
    v80 = (unint64_t *)(*(_QWORD *)&v104[16] + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
LABEL_110:
  if (v6)
  {
    sub_2245664AC(a1, v104);
    sub_22322C138((uint64_t)&v96, "ProcessSlamAnchorRemoval: Keyframe %.13s is being removed from slam", v104);
    sub_223182C08((uint64_t)&v96);
  }
  sub_223182C08((uint64_t)&v96);
  v82 = v103;
  if (v103)
  {
    v83 = (unint64_t *)&v103->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
LABEL_117:
  v96 = *(_OWORD *)a1;
  sub_22372F68C(a2, (unsigned __int8 *)&v96);
  sub_22372AD34(a2, v96, *((uint64_t *)&v96 + 1), (uint64_t)v104);
  sub_22374CCB8(a3, v104, a2);
  sub_223198030((uint64_t)v104, *(_QWORD **)&v104[8]);
}

void sub_22374D8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (*(_BYTE *)(v29 - 168))
  {
    if (*(char *)(v29 - 169) < 0)
      operator delete(*(void **)(v29 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_22374D900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  sub_22319A054(&a15);
  sub_22319A054(&a21);
  sub_223199DE8(v29 - 192);
  sub_223182DAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_22374D934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  int v30;

  if (v30 < 0)
    operator delete(v29);
  sub_223199DE8((uint64_t)&a15);
  sub_223182DAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_22374D990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_223182DAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_22374D9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  void *v31;

  if (*(_BYTE *)(v29 - 160) && *(char *)(v29 - 161) < 0)
    operator delete(*(void **)(v29 - 184));
  v31 = *(void **)(v29 - 192);
  if (v31)
    os_release(v31);
  sub_223182DAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_22374DA04()
{
  JUMPOUT(0x22374DA24);
}

uint64_t sub_22374DA2C(uint64_t result)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  if (result)
  {
    v1 = *(std::__shared_weak_count **)(result + 24);
    if (v1)
    {
      p_shared_owners = (unint64_t *)&v1->__shared_owners_;
      do
        v3 = __ldaxr(p_shared_owners);
      while (__stlxr(v3 - 1, p_shared_owners));
      if (!v3)
      {
        ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
        std::__shared_weak_count::__release_weak(v1);
      }
    }
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_22374DA9C(uint64_t result)
{
  if (result)
    JUMPOUT(0x227684CE8);
  return result;
}

_QWORD *sub_22374DAB8(uint64_t a1, std::__fs::filesystem::path *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char **v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t i;
  unsigned __int8 v20;
  std::__fs::filesystem::path *v21;
  std::__fs::filesystem::path *v22;
  char *v23;
  char **v24;
  char **v25;
  const std::__fs::filesystem::path *v26;
  const std::__fs::filesystem::path *v27;
  int v28;
  std::__fs::filesystem::path::__string_view v29;
  int v30;
  std::__fs::filesystem::path::__string_view v31;
  unint64_t v32;
  __n128 v33;
  __n128 *v34;
  __n128 v35;
  __n128 *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  _BYTE *v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  BOOL v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _BYTE *v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  __n128 v58;
  __n128 *v59;
  __n128 v60;
  __n128 *v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  std::__fs::filesystem::path *v65;
  void *v66;
  __n128 *v67;
  __n128 *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  void **v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  unint64_t v89;
  char *v90;
  void *v91;
  void *v92;
  char *v93;
  char *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  void *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  unint64_t v112;
  unint64_t v113;
  _BYTE *v114;
  unint64_t v115;
  char *v116;
  int64_t v117;
  unint64_t v118;
  char *v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  unint64_t v126;
  char *v127;
  unint64_t v128;
  int64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 *v136;
  char *v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int128 *v145;
  _OWORD *v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  unint64_t v150;
  _BYTE *v151;
  unint64_t v152;
  char *v153;
  int64_t v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 *v161;
  _OWORD *v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  unint64_t v168;
  void **v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  _QWORD *v173;
  unint64_t v174;
  uint64_t v175;
  void *v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  void **v181;
  void *v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  unint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  void **v194;
  uint64_t v195;
  _OWORD *v196;
  __int128 v197;
  uint64_t v198;
  char *v199;
  char *v200;
  char *v201;
  void *v202;
  int64_t v203;
  unint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  _OWORD *v214;
  __int128 v215;
  uint64_t v216;
  __n128 *v217;
  __n128 *j;
  void *__dst;
  char *__dsta;
  __n128 *v222;
  uint64_t v223;
  uint64_t v224;
  std::__fs::filesystem::path v225;
  void *__p;
  std::__fs::filesystem::path *v227;
  void *v228;
  __n128 *v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232[9];
  void *v233;
  __n128 v234;
  __n128 v235;
  __int128 v236;
  uint64_t v237;

  v237 = *MEMORY[0x24BDAC8D0];
  v10 = *a3;
  *a3 = 0;
  v231 = v10;
  sub_2236E30B4(a1, a2, &v231);
  v11 = v231;
  v231 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *(_QWORD *)a1 = &off_24EC581A0;
  *(_QWORD *)(a1 + 56) = 0;
  v12 = (char **)(a1 + 56);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  v224 = a1;
  sub_2245036A4("LRUCachedPersistenceFilesystem", 0, 2u, 0, 0, 0, v232);
  v13 = v232[0];
  v234.n128_u64[0] = (unint64_t)&off_24EC77B98;
  v234.n128_u64[1] = v232[0];
  *(_QWORD *)(a1 + 72) = &off_24EC58560;
  v14 = (_QWORD *)operator new();
  *v14 = &off_24EC77B98;
  v14[1] = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_OWORD *)(a1 + 88) = 0u;
  v15 = (_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = a4;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = a1 + 152;
  v16 = a1 + 168;
  v15[9] = 0;
  v15[10] = v16;
  v15[11] = v16;
  v15[12] = 0;
  if (!a4)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/LRUCache.h", 211, (uint64_t)"capacity_ > 0", 13, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    v17 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670 || byte_255795678)
    {
      v18 = qword_255795648;
      for (i = qword_255795650; v18 != i; v18 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v18)(*(_QWORD *)(v18 + 8), "capacity_ > 0", 13, "", 0);
    }
    v20 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "capacity_ > 0", 13, "", 0);
  }
  *(_QWORD *)(v224 + 192) = 0;
  *(_QWORD *)(v224 + 200) = a5;
  *(_QWORD *)(v224 + 208) = a6;
  *(_DWORD *)(v224 + 216) = 0;
  v228 = 0;
  v229 = 0;
  v230 = 0;
  sub_2242B0AE8(v224 + 8, 0x44u, "*", 1uLL, *(_QWORD *)(v224 + 32), (uint64_t *)&__p);
  v22 = (std::__fs::filesystem::path *)__p;
  v21 = v227;
  if (__p != v227)
  {
    do
    {
      if (v22[1].__pn_.__r_.__value_.__s.__data_[0] == 2)
      {
        v23 = *v12;
        v24 = v12;
        v25 = v12;
        if (!*v12)
          goto LABEL_54;
        v24 = v12;
        while (1)
        {
          while (1)
          {
            v25 = (char **)v23;
            v27 = (const std::__fs::filesystem::path *)(v23 + 32);
            v26 = (const std::__fs::filesystem::path *)*((_QWORD *)v23 + 4);
            v28 = SHIBYTE(v27->__pn_.__r_.__value_.__r.__words[2]);
            v29.__data_ = (const std::string_view::value_type *)(v28 >= 0 ? v27 : v26);
            v29.__size_ = v28 >= 0
                        ? HIBYTE(v27->__pn_.__r_.__value_.__r.__words[2])
                        : v27->__pn_.__r_.__value_.__l.__size_;
            if ((std::__fs::filesystem::path::__compare(v22, v29) & 0x80000000) == 0)
              break;
            v23 = *v25;
            v24 = v25;
            if (!*v25)
              goto LABEL_54;
          }
          v30 = SHIBYTE(v22->__pn_.__r_.__value_.__r.__words[2]);
          v31.__data_ = v30 >= 0
                      ? (const std::string_view::value_type *)v22
                      : (const std::string_view::value_type *)v22->__pn_.__r_.__value_.__r.__words[0];
          v31.__size_ = v30 >= 0
                      ? HIBYTE(v22->__pn_.__r_.__value_.__r.__words[2])
                      : v22->__pn_.__r_.__value_.__l.__size_;
          if ((std::__fs::filesystem::path::__compare(v27, v31) & 0x80000000) == 0)
            break;
          v24 = v25 + 1;
          v23 = v25[1];
          if (!v23)
            goto LABEL_54;
        }
        if (!*v24)
        {
LABEL_54:
          v41 = (char *)operator new(0x38uLL);
          v42 = v41 + 32;
          if (SHIBYTE(v22->__pn_.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_223197FA4(v42, v22->__pn_.__r_.__value_.__l.__data_, v22->__pn_.__r_.__value_.__l.__size_);
          }
          else
          {
            v43 = *(_OWORD *)&v22->__pn_.__r_.__value_.__l.__data_;
            *((_QWORD *)v41 + 6) = *((_QWORD *)&v22->__pn_.__r_.__value_.__l + 2);
            *(_OWORD *)v42 = v43;
          }
          *(_QWORD *)v41 = 0;
          *((_QWORD *)v41 + 1) = 0;
          *((_QWORD *)v41 + 2) = v25;
          *v24 = v41;
          v44 = **(_QWORD **)(v224 + 48);
          if (v44)
          {
            *(_QWORD *)(v224 + 48) = v44;
            v41 = *v24;
          }
          v45 = *v12;
          v46 = v41 == *v12;
          v41[24] = v46;
          if (!v46)
          {
            do
            {
              v47 = *((_QWORD *)v41 + 2);
              if (*(_BYTE *)(v47 + 24))
                break;
              v48 = *(char **)(v47 + 16);
              v49 = *(_QWORD *)v48;
              if (*(_QWORD *)v48 == v47)
              {
                v52 = *((_QWORD *)v48 + 1);
                if (!v52 || (v53 = *(unsigned __int8 *)(v52 + 24), v50 = (_BYTE *)(v52 + 24), v53))
                {
                  if (*(char **)v47 == v41)
                  {
                    *(_BYTE *)(v47 + 24) = 1;
                    v48[24] = 0;
                    v56 = *(_QWORD *)(v47 + 8);
                    *(_QWORD *)v48 = v56;
                    if (v56)
                      goto LABEL_74;
                  }
                  else
                  {
                    v54 = *(uint64_t **)(v47 + 8);
                    v55 = *v54;
                    *(_QWORD *)(v47 + 8) = *v54;
                    if (v55)
                    {
                      *(_QWORD *)(v55 + 16) = v47;
                      v48 = *(char **)(v47 + 16);
                    }
                    v54[2] = (uint64_t)v48;
                    *(_QWORD *)(*(_QWORD *)(v47 + 16) + 8 * (**(_QWORD **)(v47 + 16) != v47)) = v54;
                    *v54 = v47;
                    *(_QWORD *)(v47 + 16) = v54;
                    v48 = (char *)v54[2];
                    v47 = *(_QWORD *)v48;
                    *((_BYTE *)v54 + 24) = 1;
                    v48[24] = 0;
                    v56 = *(_QWORD *)(v47 + 8);
                    *(_QWORD *)v48 = v56;
                    if (v56)
LABEL_74:
                      *(_QWORD *)(v56 + 16) = v48;
                  }
                  *(_QWORD *)(v47 + 16) = *((_QWORD *)v48 + 2);
                  *(_QWORD *)(*((_QWORD *)v48 + 2) + 8 * (**((_QWORD **)v48 + 2) != (_QWORD)v48)) = v47;
                  *(_QWORD *)(v47 + 8) = v48;
LABEL_16:
                  *((_QWORD *)v48 + 2) = v47;
                  break;
                }
              }
              else if (!v49 || (v51 = *(unsigned __int8 *)(v49 + 24), v50 = (_BYTE *)(v49 + 24), v51))
              {
                if (*(char **)v47 == v41)
                {
                  v63 = *((_QWORD *)v41 + 1);
                  *(_QWORD *)v47 = v63;
                  if (v63)
                  {
                    *(_QWORD *)(v63 + 16) = v47;
                    v48 = *(char **)(v47 + 16);
                  }
                  *((_QWORD *)v41 + 2) = v48;
                  *(_QWORD *)(*(_QWORD *)(v47 + 16) + 8 * (**(_QWORD **)(v47 + 16) != v47)) = v41;
                  *((_QWORD *)v41 + 1) = v47;
                  *(_QWORD *)(v47 + 16) = v41;
                  v48 = (char *)*((_QWORD *)v41 + 2);
                  v41[24] = 1;
                  v48[24] = 0;
                  v47 = *((_QWORD *)v48 + 1);
                  v62 = *(char **)v47;
                  *((_QWORD *)v48 + 1) = *(_QWORD *)v47;
                  if (!v62)
                    goto LABEL_15;
                }
                else
                {
                  *(_BYTE *)(v47 + 24) = 1;
                  v48[24] = 0;
                  v47 = *((_QWORD *)v48 + 1);
                  v62 = *(char **)v47;
                  *((_QWORD *)v48 + 1) = *(_QWORD *)v47;
                  if (!v62)
                    goto LABEL_15;
                }
                *((_QWORD *)v62 + 2) = v48;
LABEL_15:
                *(_QWORD *)(v47 + 16) = *((_QWORD *)v48 + 2);
                *(_QWORD *)(*((_QWORD *)v48 + 2) + 8 * (**((_QWORD **)v48 + 2) != (_QWORD)v48)) = v47;
                *(_QWORD *)v47 = v48;
                goto LABEL_16;
              }
              *(_BYTE *)(v47 + 24) = 1;
              v41 = v48;
              v48[24] = v48 == v45;
              *v50 = 1;
            }
            while (v48 != v45);
          }
          ++*(_QWORD *)(v224 + 64);
        }
      }
      else
      {
        v234.n128_u64[0] = (*(uint64_t (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v224 + 32)
                                                                                            + 208))(*(_QWORD *)(v224 + 32), v22);
        v234.n128_u64[1] = v32;
        if (SHIBYTE(v22->__pn_.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_223197FA4(&v235, v22->__pn_.__r_.__value_.__l.__data_, v22->__pn_.__r_.__value_.__l.__size_);
        }
        else
        {
          v33 = *(__n128 *)&v22->__pn_.__r_.__value_.__l.__data_;
          *(_QWORD *)&v236 = *((_QWORD *)&v22->__pn_.__r_.__value_.__l + 2);
          v235 = v33;
        }
        v34 = v229;
        if ((unint64_t)v229 >= v230)
        {
          v36 = (__n128 *)v228;
          v37 = 0xAAAAAAAAAAAAAAABLL * (((char *)v229 - (_BYTE *)v228) >> 4);
          v38 = v37 + 1;
          if (v37 + 1 > 0x555555555555555)
            sub_22316E078();
          if (0x5555555555555556 * ((uint64_t)(v230 - (_QWORD)v228) >> 4) > v38)
            v38 = 0x5555555555555556 * ((uint64_t)(v230 - (_QWORD)v228) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v230 - (_QWORD)v228) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v39 = 0x555555555555555;
          else
            v39 = v38;
          if (v39)
          {
            if (v39 > 0x555555555555555)
              sub_223174E94();
            v40 = (char *)operator new(48 * v39);
          }
          else
          {
            v40 = 0;
          }
          v57 = &v40[48 * v37];
          v58 = v235;
          *(__n128 *)v57 = v234;
          *((__n128 *)v57 + 1) = v58;
          *((_QWORD *)v57 + 4) = v236;
          v235 = 0uLL;
          *(_QWORD *)&v236 = 0;
          if (v34 == v36)
          {
            v228 = &v40[48 * v37];
            v230 = (unint64_t)&v40[48 * v39];
          }
          else
          {
            v59 = (__n128 *)&v40[48 * v37];
            do
            {
              v59[-3] = v34[-3];
              v60 = v34[-2];
              v59[-1].n128_u64[0] = v34[-1].n128_u64[0];
              v59[-2] = v60;
              v59 -= 3;
              v34[-2].n128_u64[1] = 0;
              v34[-1].n128_u64[0] = 0;
              v34[-2].n128_u64[0] = 0;
              v34 -= 3;
            }
            while (v34 != v36);
            v34 = (__n128 *)v228;
            v61 = v229;
            v228 = v59;
            v230 = (unint64_t)&v40[48 * v39];
            while (v61 != v34)
            {
              if (v61[-1].n128_i8[7] < 0)
                operator delete((void *)v61[-2].n128_u64[0]);
              v61 -= 3;
            }
          }
          if (v34)
            operator delete(v34);
          v229 = (__n128 *)(v57 + 48);
          if (SBYTE7(v236) < 0)
            operator delete((void *)v235.n128_u64[0]);
        }
        else
        {
          *v229 = v234;
          v35 = v235;
          v34[2].n128_u64[0] = v236;
          v34[1] = v35;
          v229 = v34 + 3;
        }
      }
      v22 = (std::__fs::filesystem::path *)((char *)v22 + 32);
    }
    while (v22 != v21);
    v22 = (std::__fs::filesystem::path *)__p;
  }
  v64 = (_QWORD *)v224;
  if (v22)
  {
    v65 = v227;
    v66 = v22;
    if (v227 != v22)
    {
      do
      {
        if (v65[-1].__pn_.__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v65[-2].__pn_.__r_.__value_.__r.__words[2]);
        v65 = (std::__fs::filesystem::path *)((char *)v65 - 32);
      }
      while (v65 != v22);
      v66 = __p;
    }
    v227 = v22;
    operator delete(v66);
  }
  v68 = (__n128 *)v228;
  v67 = v229;
  v69 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v229 - (_BYTE *)v228) >> 4));
  if (v229 == v228)
    v70 = 0;
  else
    v70 = v69;
  sub_223758478((__n128 *)v228, v229, v70, 1);
  v235 = 0u;
  v236 = 0u;
  v234 = 0u;
  v222 = v67;
  if (v67 == v68)
  {
    v71 = 0;
    v72 = 0;
    __dst = 0;
    v223 = 0;
    v73 = 0;
    v74 = 0;
    v76 = *(void ***)(v224 + 96);
    v75 = *(_QWORD *)(v224 + 104);
    if ((void **)v75 != v76)
      goto LABEL_219;
LABEL_115:
    v76 = (void **)v75;
    v64[16] = 0;
    v77 = 0;
    goto LABEL_233;
  }
  do
  {
    sub_2236E5318((std::__fs::filesystem::path *)&v68[1], (uint64_t)v64, &v225);
    v74 = v234.n128_u64[1];
    v73 = (char *)v235.n128_u64[0];
    v85 = v235.n128_u64[0] - v234.n128_u64[1];
    v86 = (uint64_t)(v235.n128_u64[0] - v234.n128_u64[1]) >> 3;
    if (v235.n128_u64[0] == v234.n128_u64[1])
      v87 = 0;
    else
      v87 = 170 * v86 - 1;
    v81 = *((_QWORD *)&v236 + 1);
    v72 = v236;
    v82 = *((_QWORD *)&v236 + 1) + v236;
    if (v87 == *((_QWORD *)&v236 + 1) + (_QWORD)v236)
    {
      if ((unint64_t)v236 < 0xAA)
      {
        __dsta = (char *)v234.n128_u64[1];
        v88 = (void *)v234.n128_u64[0];
        if (v86 < (unint64_t)((uint64_t)(v235.n128_u64[1] - v234.n128_u64[0]) >> 3))
        {
          if (v235.n128_u64[1] != v235.n128_u64[0])
          {
            v233 = operator new(0xFF0uLL);
            sub_22323CCA0((char **)&v234, &v233);
            v80 = (char *)v235.n128_u64[0];
LABEL_217:
            v64 = (_QWORD *)v224;
            goto LABEL_118;
          }
          v233 = operator new(0xFF0uLL);
          sub_22323CE2C((void **)&v234, &v233);
          v104 = v234.n128_u64[1];
          v103 = (char *)v235.n128_u64[0];
          v106 = (char *)(v234.n128_u64[1] + 8);
          v105 = *(_QWORD *)v234.n128_u64[1];
          v234.n128_u64[1] += 8;
          if (v235.n128_u64[0] != v235.n128_u64[1])
          {
LABEL_216:
            *(_QWORD *)v103 = v105;
            v80 = (char *)(v235.n128_u64[0] + 8);
            v235.n128_u64[0] += 8;
            goto LABEL_217;
          }
          v107 = (void *)v234.n128_u64[0];
          if ((unint64_t)v106 > v234.n128_u64[0])
          {
            v108 = (uint64_t)&v106[-v234.n128_u64[0]] >> 3;
            if (v108 >= -1)
              v109 = v108 + 1;
            else
              v109 = v108 + 2;
            v110 = v109 >> 1;
            v111 = &v106[-8 * v110];
            v112 = v235.n128_u64[0] - (_QWORD)v106;
            if ((char *)v235.n128_u64[0] != v106)
              memmove(&v106[-8 * v110], v106, v235.n128_u64[0] - (_QWORD)v106);
            v103 = &v111[v112];
            v234.n128_u64[1] = (unint64_t)v111;
            v235.n128_u64[0] = (unint64_t)&v111[v112];
            goto LABEL_216;
          }
          if (v235.n128_u64[0] == v234.n128_u64[0])
            v150 = 1;
          else
            v150 = (uint64_t)(v235.n128_u64[0] - v234.n128_u64[0]) >> 2;
          if (v150 >> 61)
            goto LABEL_288;
          v151 = operator new(8 * v150);
          v152 = v150 >> 2;
          v153 = &v151[8 * (v150 >> 2)];
          v154 = v103 - v106;
          v46 = v103 == v106;
          v103 = v153;
          if (!v46)
          {
            v103 = &v153[v154 & 0xFFFFFFFFFFFFFFF8];
            v155 = v154 - 8;
            if (v155 < 0x38)
            {
              v156 = &v151[8 * (v150 >> 2)];
              do
              {
LABEL_213:
                v165 = *(_QWORD *)v106;
                v106 += 8;
                *(_QWORD *)v156 = v165;
                v156 += 8;
              }
              while (v156 != v103);
              goto LABEL_214;
            }
            v157 = 8 * v152;
            v158 = &v151[8 * v152] - v106;
            v156 = &v151[8 * (v150 >> 2)];
            if (v158 < 0x20)
              goto LABEL_213;
            v159 = (v155 >> 3) + 1;
            v160 = 8 * (v159 & 0x3FFFFFFFFFFFFFFCLL);
            v156 = &v153[v160];
            v106 += v160;
            v161 = (__int128 *)(v104 + 24);
            v162 = &v151[v157 + 16];
            v163 = v159 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v164 = *v161;
              *(v162 - 1) = *(v161 - 1);
              *v162 = v164;
              v161 += 2;
              v162 += 2;
              v163 -= 4;
            }
            while (v163);
            if (v159 != (v159 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_213;
          }
LABEL_214:
          v234.n128_u64[0] = (unint64_t)v151;
          v234.n128_u64[1] = (unint64_t)&v151[8 * (v150 >> 2)];
          v235.n128_u64[0] = (unint64_t)v103;
          v235.n128_u64[1] = (unint64_t)&v151[8 * v150];
          if (v107)
            operator delete(v107);
          goto LABEL_216;
        }
        if (v235.n128_u64[1] == v234.n128_u64[0])
          v89 = 1;
        else
          v89 = (uint64_t)(v235.n128_u64[1] - v234.n128_u64[0]) >> 2;
        if (v89 >> 61)
          goto LABEL_288;
        v90 = (char *)operator new(8 * v89);
        v91 = operator new(0xFF0uLL);
        v92 = v91;
        v93 = &v90[8 * v86];
        v94 = &v90[8 * v89];
        if (v86 != v89)
        {
          *(_QWORD *)v93 = v91;
          v80 = v93 + 8;
          if (v73 == __dsta)
            goto LABEL_167;
          do
          {
LABEL_171:
            if (v93 == v90)
            {
              if (v80 >= v94)
              {
                if (v94 == v93)
                  v126 = 1;
                else
                  v126 = (v94 - v93) >> 2;
                if (v126 >> 61)
                  sub_223174E94();
                v127 = (char *)operator new(8 * v126);
                v90 = v127;
                v128 = (v126 + 3) >> 2;
                v121 = &v127[8 * v128];
                v129 = v80 - v93;
                v46 = v80 == v93;
                v80 = v121;
                if (!v46)
                {
                  v80 = &v121[v129 & 0xFFFFFFFFFFFFFFF8];
                  v130 = v129 - 8;
                  v131 = &v127[8 * v128];
                  v132 = v93;
                  if (v130 < 0x38)
                    goto LABEL_299;
                  v133 = 8 * v128;
                  v131 = &v127[8 * v128];
                  v132 = v93;
                  if ((unint64_t)(v131 - v93) < 0x20)
                    goto LABEL_299;
                  v134 = (v130 >> 3) + 1;
                  v135 = 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
                  v131 = &v121[v135];
                  v132 = &v93[v135];
                  v136 = (__int128 *)(v93 + 16);
                  v137 = &v127[v133 + 16];
                  v138 = v134 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v139 = *v136;
                    *((_OWORD *)v137 - 1) = *(v136 - 1);
                    *(_OWORD *)v137 = v139;
                    v136 += 2;
                    v137 += 32;
                    v138 -= 4;
                  }
                  while (v138);
                  if (v134 != (v134 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_299:
                    do
                    {
                      v140 = *(_QWORD *)v132;
                      v132 += 8;
                      *(_QWORD *)v131 = v140;
                      v131 += 8;
                    }
                    while (v131 != v80);
                  }
                }
                v94 = &v127[8 * v126];
                operator delete(v93);
              }
              else
              {
                v123 = (v94 - v80) >> 3;
                if (v123 >= -1)
                  v124 = v123 + 1;
                else
                  v124 = v123 + 2;
                v125 = &v80[8 * (v124 >> 1)];
                v121 = &v93[8 * (v124 >> 1)];
                if (v80 == v93)
                {
                  v90 = v80;
                }
                else
                {
                  memmove(&v93[8 * (v124 >> 1)], v93, v80 - v93);
                  v90 = v93;
                }
                v80 = v125;
              }
            }
            else
            {
              v121 = v93;
            }
            v122 = *((_QWORD *)v73 - 1);
            v73 -= 8;
            *((_QWORD *)v121 - 1) = v122;
            v93 = v121 - 8;
          }
          while (v73 != (char *)v234.n128_u64[1]);
          v88 = (void *)v234.n128_u64[0];
          v234.n128_u64[0] = (unint64_t)v90;
          v234.n128_u64[1] = (unint64_t)v93;
          v235.n128_u64[0] = (unint64_t)v80;
          v235.n128_u64[1] = (unint64_t)v94;
          if (!v88)
            goto LABEL_217;
LABEL_193:
          operator delete(v88);
          goto LABEL_217;
        }
        if (v85 < 1)
        {
          if (v73 == __dsta)
            v120 = 1;
          else
            v120 = v85 >> 2;
          if (v120 >> 61)
            sub_223174E94();
          v93 = (char *)operator new(8 * v120);
          v94 = &v93[8 * v120];
          operator delete(v90);
          v90 = v93;
          *(_QWORD *)v93 = v92;
          v80 = v93 + 8;
          if (v73 != __dsta)
            goto LABEL_171;
        }
        else
        {
          v102 = v86 + 2;
          if (v86 >= -1)
            v102 = v86 + 1;
          v93 -= 8 * (v102 >> 1);
          *(_QWORD *)v93 = v91;
          v80 = v93 + 8;
          if (v73 != __dsta)
            goto LABEL_171;
        }
LABEL_167:
        v234.n128_u64[0] = (unint64_t)v90;
        v234.n128_u64[1] = (unint64_t)v93;
        v235.n128_u64[0] = (unint64_t)v80;
        v235.n128_u64[1] = (unint64_t)v94;
        if (!v88)
          goto LABEL_217;
        goto LABEL_193;
      }
      *(_QWORD *)&v236 = v236 - 170;
      v79 = (char *)(v234.n128_u64[1] + 8);
      v78 = *(_QWORD *)v234.n128_u64[1];
      v234.n128_u64[1] += 8;
      if (v235.n128_u64[0] != v235.n128_u64[1])
      {
LABEL_117:
        *(_QWORD *)v73 = v78;
        v80 = (char *)(v235.n128_u64[0] + 8);
        v235.n128_u64[0] += 8;
LABEL_118:
        v74 = v234.n128_u64[1];
        v81 = *((_QWORD *)&v236 + 1);
        v72 = v236;
        v82 = *((_QWORD *)&v236 + 1) + v236;
        v73 = v80;
        goto LABEL_119;
      }
      v95 = (void *)v234.n128_u64[0];
      if ((unint64_t)v79 > v234.n128_u64[0])
      {
        v96 = (uint64_t)&v79[-v234.n128_u64[0]] >> 3;
        if (v96 >= -1)
          v97 = v96 + 1;
        else
          v97 = v96 + 2;
        v98 = v97 >> 1;
        v99 = &v79[-8 * (v97 >> 1)];
        v100 = v235.n128_u64[0] - (_QWORD)v79;
        if ((char *)v235.n128_u64[0] != v79)
        {
          memmove(&v79[-8 * (v97 >> 1)], v79, v235.n128_u64[0] - (_QWORD)v79);
          v73 = v79;
        }
        v101 = &v73[-8 * v98];
        v73 = &v99[v100];
        v234.n128_u64[1] = (unint64_t)v101;
        v235.n128_u64[0] = (unint64_t)&v99[v100];
        goto LABEL_117;
      }
      if (v235.n128_u64[0] == v234.n128_u64[0])
        v113 = 1;
      else
        v113 = (uint64_t)(v235.n128_u64[0] - v234.n128_u64[0]) >> 2;
      if (v113 >> 61)
LABEL_288:
        sub_223174E94();
      v114 = operator new(8 * v113);
      v115 = v113 >> 2;
      v116 = &v114[8 * (v113 >> 2)];
      v117 = v73 - v79;
      v46 = v73 == v79;
      v73 = v116;
      if (!v46)
      {
        v73 = &v116[v117 & 0xFFFFFFFFFFFFFFF8];
        v118 = v117 - 8;
        if (v118 >= 0x38)
        {
          v141 = 8 * v115;
          v142 = &v114[8 * v115] - v79;
          v119 = &v114[8 * (v113 >> 2)];
          if (v142 >= 0x20)
          {
            v143 = (v118 >> 3) + 1;
            v144 = 8 * (v143 & 0x3FFFFFFFFFFFFFFCLL);
            v119 = &v116[v144];
            v79 += v144;
            v145 = (__int128 *)(v74 + 24);
            v146 = &v114[v141 + 16];
            v147 = v143 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v148 = *v145;
              *(v146 - 1) = *(v145 - 1);
              *v146 = v148;
              v145 += 2;
              v146 += 2;
              v147 -= 4;
            }
            while (v147);
            if (v143 == (v143 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_199;
          }
        }
        else
        {
          v119 = &v114[8 * (v113 >> 2)];
        }
        do
        {
          v149 = *(_QWORD *)v79;
          v79 += 8;
          *(_QWORD *)v119 = v149;
          v119 += 8;
        }
        while (v119 != v73);
      }
LABEL_199:
      v234.n128_u64[0] = (unint64_t)v114;
      v234.n128_u64[1] = (unint64_t)&v114[8 * (v113 >> 2)];
      v235.n128_u64[0] = (unint64_t)v73;
      v235.n128_u64[1] = (unint64_t)&v114[8 * v113];
      if (v95)
        operator delete(v95);
      v64 = (_QWORD *)v224;
      goto LABEL_117;
    }
LABEL_119:
    v83 = *(_QWORD *)(v74 + 8 * (v82 / 0xAA)) + 24 * (v82 % 0xAA);
    v84 = *(_OWORD *)&v225.__pn_.__r_.__value_.__l.__data_;
    *(_QWORD *)(v83 + 16) = *((_QWORD *)&v225.__pn_.__r_.__value_.__l + 2);
    *(_OWORD *)v83 = v84;
    v71 = v81 + 1;
    *((_QWORD *)&v236 + 1) = v81 + 1;
    v68 += 3;
  }
  while (v68 != v222);
  __dst = (void *)v234.n128_u64[0];
  v223 = v235.n128_i64[1];
  v76 = (void **)v64[12];
  v75 = v64[13];
  if ((void **)v75 == v76)
    goto LABEL_115;
LABEL_219:
  v167 = v64[16];
  v166 = v64 + 16;
  v168 = *(v166 - 1);
  v169 = &v76[v168 / 0xAA];
  v170 = (unint64_t)*v169;
  v171 = (unint64_t)*v169 + 24 * (v168 % 0xAA);
  v172 = (unint64_t)v76[(v167 + v168) / 0xAA] + 24 * ((v167 + v168) % 0xAA);
  if (v171 == v172)
  {
    *v166 = 0;
    v77 = v75 - (_QWORD)v76;
    if ((unint64_t)(v75 - (_QWORD)v76) < 0x11)
      goto LABEL_233;
LABEL_221:
    v173 = (_QWORD *)v224;
    do
    {
      operator delete(*v76);
      v75 = *(_QWORD *)(v224 + 104);
      v76 = (void **)(*(_QWORD *)(v224 + 96) + 8);
      *(_QWORD *)(v224 + 96) = v76;
    }
    while ((unint64_t)(v75 - (_QWORD)v76) > 0x10);
    v174 = (unint64_t)(v75 - (_QWORD)v76) >> 3;
    if (v174 != 1)
      goto LABEL_224;
LABEL_234:
    v175 = 85;
LABEL_235:
    v173[15] = v175;
    goto LABEL_236;
  }
  while (2)
  {
    if (*(char *)(v171 + 23) < 0)
    {
      v176 = *(void **)v171;
      v171 += 24;
      operator delete(v176);
      v170 = (unint64_t)*v169;
      if (v171 - (_QWORD)*v169 == 4080)
        goto LABEL_231;
    }
    else
    {
      v171 += 24;
      if (v171 - v170 == 4080)
      {
LABEL_231:
        v177 = (unint64_t)v169[1];
        ++v169;
        v170 = v177;
        v171 = v177;
      }
    }
    if (v171 != v172)
      continue;
    break;
  }
  v76 = *(void ***)(v224 + 96);
  v75 = *(_QWORD *)(v224 + 104);
  *v166 = 0;
  v77 = v75 - (_QWORD)v76;
  if ((unint64_t)(v75 - (_QWORD)v76) >= 0x11)
    goto LABEL_221;
LABEL_233:
  v173 = (_QWORD *)v224;
  v174 = v77 >> 3;
  if (v174 == 1)
    goto LABEL_234;
LABEL_224:
  if (v174 == 2)
  {
    v175 = 170;
    goto LABEL_235;
  }
LABEL_236:
  v178 = v173[16];
  if (v178)
  {
    v179 = v173[15];
    if (v179 >= 0xAA)
    {
      operator delete(*v76);
      v75 = v173[13];
      v76 = (void **)(v173[12] + 8);
      v173[12] = v76;
      v178 = v173[16];
      v179 = v173[15] - 170;
      v173[15] = v179;
    }
    v180 = 170 * ((v75 - (uint64_t)v76) >> 3) - 1;
    if ((void **)v75 == v76)
      v180 = 0;
    if (v180 - (v179 + v178) >= 0xAA)
    {
      operator delete(*(void **)(v75 - 8));
      v76 = (void **)v173[12];
      v75 = v173[13] - 8;
      v173[13] = v75;
    }
  }
  else
  {
    if ((void **)v75 != v76)
    {
      v76 = (void **)v75;
      do
      {
        operator delete(*(v76 - 1));
        v181 = (void **)v173[12];
        v76 = (void **)(v173[13] - 8);
        v173[13] = v76;
      }
      while (v76 != v181);
    }
    v173[15] = 0;
    v75 = (uint64_t)v76;
  }
  v182 = (void *)v173[11];
  v183 = v173[14] - (_QWORD)v182;
  v184 = v173;
  v185 = v75 - (_QWORD)v76;
  v186 = (v75 - (uint64_t)v76) >> 3;
  if (v186 < v183 >> 3)
  {
    if ((void **)v75 == v76)
    {
      v187 = 0;
      v188 = 8 * v186;
      v189 = (_QWORD *)v224;
    }
    else
    {
      if (v185 < 0)
        sub_223174E94();
      v187 = operator new(v75 - (_QWORD)v76);
      v188 = (uint64_t)&v187[v186];
      if ((unint64_t)(v185 - 8) < 0x18)
      {
        v193 = v187;
        v194 = v76;
        v189 = (_QWORD *)v224;
      }
      else
      {
        v189 = (_QWORD *)v224;
        if ((unint64_t)((char *)v187 - (char *)v76) < 0x20)
        {
          v193 = v187;
          v194 = v76;
        }
        else
        {
          v190 = 0;
          v191 = ((unint64_t)(v185 - 8) >> 3) + 1;
          v192 = v191 & 0x3FFFFFFFFFFFFFFCLL;
          v193 = &v187[v192];
          v194 = &v76[v192];
          v195 = v191 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v196 = &v187[v190];
            v197 = *(_OWORD *)&v76[v190 + 2];
            *v196 = *(_OWORD *)&v76[v190];
            v196[1] = v197;
            v190 += 4;
            v195 -= 4;
          }
          while (v195);
          if (v191 == (v191 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_260;
        }
      }
      do
      {
        v198 = (uint64_t)*v194++;
        *v193++ = v198;
      }
      while (v193 != (_QWORD *)v188);
    }
LABEL_260:
    v189[11] = v187;
    v189[12] = v187;
    v189[13] = v188;
    v189[14] = v188;
    v184 = v189;
    if (v182)
      operator delete(v182);
  }
  v200 = (char *)v184[12];
  v199 = (char *)v184[13];
  if (v199 == v200)
  {
    v201 = (char *)v184[12];
  }
  else
  {
    v201 = &v199[(v200 - v199 + 7) & 0xFFFFFFFFFFFFFFF8];
    v184[13] = v201;
  }
  v202 = (void *)v184[11];
  v203 = v201 - v200;
  v204 = (v201 - v200) >> 3;
  if (v204 < (uint64_t)(v184[14] - (_QWORD)v202) >> 3)
  {
    if (v201 == v200)
    {
      v205 = 0;
      v206 = 8 * v204;
      v208 = (_QWORD *)v224;
    }
    else
    {
      if (v203 < 0)
        sub_223174E94();
      v205 = operator new(v201 - v200);
      v206 = (uint64_t)&v205[v204];
      if ((unint64_t)(v203 - 8) < 0x18)
      {
        v207 = v205;
        v208 = (_QWORD *)v224;
      }
      else
      {
        v207 = v205;
        v208 = (_QWORD *)v224;
        if ((unint64_t)((char *)v205 - v200) >= 0x20)
        {
          v209 = 0;
          v210 = ((unint64_t)(v203 - 8) >> 3) + 1;
          v211 = v210 & 0x3FFFFFFFFFFFFFFCLL;
          v207 = &v205[v211];
          v212 = &v200[v211 * 8];
          v213 = v210 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v214 = &v205[v209];
            v215 = *(_OWORD *)&v200[v209 * 8 + 16];
            *v214 = *(_OWORD *)&v200[v209 * 8];
            v214[1] = v215;
            v209 += 4;
            v213 -= 4;
          }
          while (v213);
          v200 = v212;
          if (v210 == (v210 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_277;
        }
      }
      do
      {
        v216 = *(_QWORD *)v200;
        v200 += 8;
        *v207++ = v216;
      }
      while (v207 != (_QWORD *)v206);
    }
LABEL_277:
    v208[11] = v205;
    v208[12] = v205;
    v208[13] = v206;
    v208[14] = v206;
    v184 = v208;
    if (v202)
      operator delete(v202);
  }
  v184[11] = __dst;
  v184[12] = v74;
  v184[13] = v73;
  v184[14] = v223;
  v184[15] = v72;
  v184[16] = v71;
  v217 = (__n128 *)v228;
  if (v228)
  {
    for (j = v229; j != v217; j -= 3)
    {
      if (j[-1].n128_i8[7] < 0)
        operator delete((void *)j[-2].n128_u64[0]);
    }
    operator delete(v217);
  }
  return v184;
}

