void sub_223F6E344(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223F6E358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      v8 = a1 + v6;
      v9 = *(_QWORD *)(a1 + v6);
      *(_DWORD *)(v7 + 8) = *(_DWORD *)(a1 + v6 + 8);
      *(_QWORD *)v7 = v9;
      v10 = *(_QWORD *)(a1 + v6 + 12);
      *(_DWORD *)(v7 + 20) = *(_DWORD *)(a1 + v6 + 20);
      *(_QWORD *)(v7 + 12) = v10;
      *(_BYTE *)(v7 + 24) = *(_BYTE *)(a1 + v6 + 24);
      sub_2233309B8((_QWORD *)(a3 + v6 + 32), (uint64_t *)(a1 + v6 + 32));
      v6 += 56;
    }
    while (v8 + 56 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_223F6E3EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;

  if (v3)
  {
    do
    {
      v6 = *(_QWORD *)(v2 - 24);
      if (v6)
      {
        v7 = *(_QWORD *)(v2 - 16);
        v5 = *(void **)(v2 - 24);
        if (v7 != v6)
        {
          do
          {
            if (*(_BYTE *)(v7 - 8))
            {
              v8 = *(_QWORD **)(v7 - 40);
              if (v8)
              {
                do
                {
                  v9 = (_QWORD *)*v8;
                  operator delete(v8);
                  v8 = v9;
                }
                while (v9);
              }
              v10 = *(void **)(v7 - 56);
              *(_QWORD *)(v7 - 56) = 0;
              if (v10)
                operator delete(v10);
            }
            v7 -= 80;
          }
          while (v7 != v6);
          v5 = *(void **)(v2 - 24);
        }
        *(_QWORD *)(v2 - 16) = v6;
        operator delete(v5);
      }
      v2 -= 56;
    }
    while (v2 != v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F6E470(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  int64_t v24;
  char *v25;

  *(_QWORD *)a1 = &off_24EC64998;
  *(_QWORD *)(a1 + 8) = &off_24EC64920;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 76) = *(_QWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v4 = *(_OWORD *)(a2 + 168);
  v5 = *(_OWORD *)(a2 + 184);
  v6 = *(_OWORD *)(a2 + 200);
  v7 = *(_OWORD *)(a2 + 216);
  v8 = *(_OWORD *)(a2 + 104);
  v9 = *(_OWORD *)(a2 + 120);
  v10 = *(_OWORD *)(a2 + 136);
  v11 = *(_OWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 104) = v8;
  *(_OWORD *)(a1 + 120) = v9;
  *(_OWORD *)(a1 + 200) = v6;
  *(_OWORD *)(a1 + 216) = v7;
  *(_OWORD *)(a1 + 168) = v4;
  *(_OWORD *)(a1 + 184) = v5;
  *(_BYTE *)(a1 + 280) = 0;
  if (*(_BYTE *)(a2 + 280))
  {
    sub_223340284((_QWORD *)(a1 + 232), a2 + 232);
    *(_BYTE *)(a1 + 280) = 1;
  }
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 336) = 0;
  if (*(_BYTE *)(a2 + 336))
  {
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    v12 = *(_QWORD *)(a2 + 288);
    v13 = *(_QWORD *)(a2 + 296);
    v14 = v13 - v12;
    if (v13 != v12)
    {
      v15 = 0xAAAAAAAAAAAAAAABLL * (v14 >> 3);
      if (v15 >= 0xAAAAAAAAAAAAAABLL)
        sub_223323BA8();
      v16 = (char *)operator new(v14);
      v17 = 0;
      *(_QWORD *)(a1 + 288) = v16;
      *(_QWORD *)(a1 + 296) = v16;
      *(_QWORD *)(a1 + 304) = &v16[24 * v15];
      do
      {
        v18 = v12 + v17;
        v19 = &v16[v17];
        v20 = *(_QWORD *)(v12 + v17);
        *((_DWORD *)v19 + 2) = *(_DWORD *)(v12 + v17 + 8);
        *(_QWORD *)v19 = v20;
        v21 = *(_QWORD *)(v12 + v17 + 12);
        *((_DWORD *)v19 + 5) = *(_DWORD *)(v12 + v17 + 20);
        *(_QWORD *)(v19 + 12) = v21;
        v17 += 24;
      }
      while (v18 + 24 != v13);
      *(_QWORD *)(a1 + 296) = &v16[v17];
    }
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 328) = 0;
    v23 = *(_BYTE **)(a2 + 312);
    v22 = *(_BYTE **)(a2 + 320);
    v24 = v22 - v23;
    if (v22 != v23)
    {
      if (0x8E38E38E38E38E39 * (v24 >> 2) >= 0x71C71C71C71C71DLL)
        sub_22316E078();
      v25 = (char *)operator new(v24);
      *(_QWORD *)(a1 + 312) = v25;
      *(_QWORD *)(a1 + 320) = v25;
      *(_QWORD *)(a1 + 328) = &v25[4 * (v24 >> 2)];
      memcpy(v25, v23, 36 * ((v24 - 36) / 0x24uLL) + 36);
      *(_QWORD *)(a1 + 320) = &v25[36 * ((v24 - 36) / 0x24uLL) + 36];
    }
    *(_BYTE *)(a1 + 336) = 1;
  }
  return a1;
}

void sub_223F6E6C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void *v5;
  void *v6;

  if (*(_BYTE *)(v1 + 280))
  {
    v5 = *(void **)(v1 + 256);
    if (v5)
    {
      *(_QWORD *)(v1 + 264) = v5;
      operator delete(v5);
    }
    v6 = *v2;
    if (*v2)
    {
      *(_QWORD *)(v1 + 240) = v6;
      operator delete(v6);
      *(_QWORD *)v1 = v3;
      _Unwind_Resume(exception_object);
    }
  }
  *(_QWORD *)v1 = v3;
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F6E760(uint64_t result, _QWORD **a2, _BYTE *a3)
{
  unsigned int v3;
  _QWORD *v4;
  unsigned int i;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  int8x8_t v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  uint64_t ***v19;
  uint64_t **v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;

  v3 = *(_DWORD *)(result + 4);
  v4 = *a2;
  if (v3)
  {
    if (v4[1])
    {
      for (i = 0; i < v3; ++i)
      {
        v6 = (int8x8_t)v4[1];
        if (v6)
        {
          v7 = *a3;
          v8 = (uint8x8_t)vcnt_s8(v6);
          v8.i16[0] = vaddlv_u8(v8);
          if (v8.u32[0] > 1uLL)
          {
            v9 = *a3;
            if (*(_QWORD *)&v6 <= v7)
              v9 = v7 % *(_QWORD *)&v6;
          }
          else
          {
            v9 = (v6.i32[0] - 1) & v7;
          }
          v10 = *(uint64_t ****)(*v4 + 8 * v9);
          if (v10)
          {
            v11 = *v10;
            if (v11)
            {
              if (v8.u32[0] < 2uLL)
              {
                v12 = *(_QWORD *)&v6 - 1;
                while (1)
                {
                  v14 = v11[1];
                  if (v14 == (uint64_t *)v7)
                  {
                    if (*((unsigned __int8 *)v11 + 16) == (_DWORD)v7)
                      goto LABEL_4;
                  }
                  else if (((unint64_t)v14 & v12) != v9)
                  {
                    goto LABEL_5;
                  }
                  v11 = (uint64_t **)*v11;
                  if (!v11)
                    goto LABEL_5;
                }
              }
              do
              {
                v13 = (unint64_t)v11[1];
                if (v13 == v7)
                {
                  if (*((unsigned __int8 *)v11 + 16) == (_DWORD)v7)
                  {
LABEL_4:
                    *a3 = -1;
                    v3 = *(_DWORD *)(result + 4);
                    v4 = *a2;
                    break;
                  }
                }
                else
                {
                  if (v13 >= *(_QWORD *)&v6)
                    v13 %= *(_QWORD *)&v6;
                  if (v13 != v9)
                    break;
                }
                v11 = (uint64_t **)*v11;
              }
              while (v11);
            }
          }
        }
LABEL_5:
        a3 += *(unsigned int *)(result + 8);
      }
    }
    else
    {
      a3 += *(unsigned int *)(result + 8) * (unint64_t)v3;
    }
  }
  v15 = (int8x8_t)v4[1];
  if (v15)
  {
    v16 = *a3;
    v17 = (uint8x8_t)vcnt_s8(v15);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      v18 = *a3;
      if (*(_QWORD *)&v15 <= v16)
        v18 = v16 % *(_QWORD *)&v15;
    }
    else
    {
      v18 = (v15.i32[0] - 1) & v16;
    }
    v19 = *(uint64_t ****)(*v4 + 8 * v18);
    if (v19)
    {
      v20 = *v19;
      if (v20)
      {
        if (v17.u32[0] < 2uLL)
        {
          v21 = *(_QWORD *)&v15 - 1;
          while (1)
          {
            v23 = v20[1];
            if (v23 == (uint64_t *)v16)
            {
              if (*((unsigned __int8 *)v20 + 16) == (_DWORD)v16)
                goto LABEL_49;
            }
            else if (((unint64_t)v23 & v21) != v18)
            {
              return result;
            }
            v20 = (uint64_t **)*v20;
            if (!v20)
              return result;
          }
        }
        do
        {
          v22 = (unint64_t)v20[1];
          if (v22 == v16)
          {
            if (*((unsigned __int8 *)v20 + 16) == (_DWORD)v16)
            {
LABEL_49:
              *a3 = -1;
              return result;
            }
          }
          else
          {
            if (v22 >= *(_QWORD *)&v15)
              v22 %= *(_QWORD *)&v15;
            if (v22 != v18)
              return result;
          }
          v20 = (uint64_t **)*v20;
        }
        while (v20);
      }
    }
  }
  return result;
}

void sub_223F6E95C(char **a1, uint64_t a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  __int128 *v6;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;

  if (a5 < 1)
    return;
  v6 = a3;
  v9 = *a1;
  v8 = (unint64_t)a1[1];
  v10 = (a2 - (uint64_t)*a1) / 200;
  v11 = (uint64_t)&(*a1)[200 * v10];
  v12 = a1[2];
  if ((uint64_t)(0x8F5C28F5C28F5C29 * ((uint64_t)&v12[-v8] >> 3)) < a5)
  {
    v13 = a5 - 0x70A3D70A3D70A3D7 * ((uint64_t)(v8 - (_QWORD)v9) >> 3);
    if (v13 > 0x147AE147AE147AELL)
      sub_22316E078();
    v14 = 0x8F5C28F5C28F5C29 * ((v12 - v9) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0xA3D70A3D70A3D7)
      v15 = 0x147AE147AE147AELL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 > 0x147AE147AE147AELL)
        sub_223174E94();
      v16 = (char *)operator new(200 * v15);
    }
    else
    {
      v16 = 0;
    }
    v30 = 0;
    v31 = &v16[200 * v10];
    v32 = &v31[200 * a5];
    do
    {
      v33 = (char *)v6 + v30;
      v34 = &v31[v30];
      v35 = *(__int128 *)((char *)v6 + v30);
      v36 = *(__int128 *)((char *)v6 + v30 + 16);
      v37 = *(__int128 *)((char *)v6 + v30 + 48);
      *((_OWORD *)v34 + 2) = *(__int128 *)((char *)v6 + v30 + 32);
      *((_OWORD *)v34 + 3) = v37;
      *(_OWORD *)v34 = v35;
      *((_OWORD *)v34 + 1) = v36;
      v38 = *(__int128 *)((char *)v6 + v30 + 64);
      v39 = *(__int128 *)((char *)v6 + v30 + 80);
      v40 = *(__int128 *)((char *)v6 + v30 + 112);
      *((_OWORD *)v34 + 6) = *(__int128 *)((char *)v6 + v30 + 96);
      *((_OWORD *)v34 + 7) = v40;
      *((_OWORD *)v34 + 4) = v38;
      *((_OWORD *)v34 + 5) = v39;
      *((_DWORD *)v34 + 32) = *(_DWORD *)((char *)v6 + v30 + 128);
      *((_QWORD *)v34 + 18) = 0;
      *((_QWORD *)v34 + 19) = 0;
      *(_OWORD *)(v34 + 136) = *(__int128 *)((char *)v6 + v30 + 136);
      *((_QWORD *)v34 + 19) = *(_QWORD *)((char *)v6 + v30 + 152);
      *((_QWORD *)v33 + 17) = 0;
      *((_QWORD *)v33 + 18) = 0;
      *((_QWORD *)v33 + 19) = 0;
      v34[160] = 0;
      v34[184] = 0;
      if (*((_BYTE *)v6 + v30 + 184))
      {
        *((_QWORD *)v34 + 21) = 0;
        *((_QWORD *)v34 + 22) = 0;
        *((_OWORD *)v34 + 10) = *((_OWORD *)v33 + 10);
        *((_QWORD *)v34 + 22) = *((_QWORD *)v33 + 22);
        *((_QWORD *)v33 + 20) = 0;
        *((_QWORD *)v33 + 21) = 0;
        *((_QWORD *)v33 + 22) = 0;
        v34[184] = 1;
      }
      v34[192] = v33[192];
      v30 += 200;
    }
    while (200 * a5 != v30);
    v41 = *a1;
    if (*a1 != (char *)v11)
    {
      v42 = 200 * v10;
      v43 = v9;
      v44 = v16;
      do
      {
        v45 = &v44[v42];
        v46 = &v43[v42];
        v47 = *(_OWORD *)&v43[v42 - 200];
        v48 = *(_OWORD *)&v43[v42 - 184];
        v49 = *(_OWORD *)&v43[v42 - 168];
        *(_OWORD *)(v45 - 152) = *(_OWORD *)&v43[v42 - 152];
        *(_OWORD *)(v45 - 168) = v49;
        *(_OWORD *)(v45 - 184) = v48;
        *(_OWORD *)(v45 - 200) = v47;
        v50 = *(_OWORD *)&v43[v42 - 136];
        v51 = *(_OWORD *)&v43[v42 - 120];
        v52 = *(_OWORD *)&v43[v42 - 104];
        *(_OWORD *)(v45 - 88) = *(_OWORD *)&v43[v42 - 88];
        *(_OWORD *)(v45 - 104) = v52;
        *(_OWORD *)(v45 - 120) = v51;
        *(_OWORD *)(v45 - 136) = v50;
        *((_DWORD *)v45 - 18) = *(_DWORD *)&v43[v42 - 72];
        *((_OWORD *)v45 - 4) = *(_OWORD *)&v43[v42 - 64];
        *((_QWORD *)v45 - 6) = *(_QWORD *)&v43[v42 - 48];
        *((_QWORD *)v46 - 8) = 0;
        *((_QWORD *)v46 - 7) = 0;
        *((_QWORD *)v46 - 6) = 0;
        *(v45 - 40) = 0;
        *(v45 - 16) = 0;
        if (v43[v42 - 16])
        {
          *(_OWORD *)(v45 - 40) = *(_OWORD *)(v46 - 40);
          *((_QWORD *)v45 - 3) = *((_QWORD *)v46 - 3);
          *((_QWORD *)v46 - 5) = 0;
          *((_QWORD *)v46 - 4) = 0;
          *((_QWORD *)v46 - 3) = 0;
          *(v45 - 16) = 1;
        }
        *(v45 - 8) = *(v46 - 8);
        v44 -= 200;
        v43 -= 200;
      }
      while (&v43[v42] != v41);
      v31 = &v44[200 * v10];
    }
    v53 = a1[1];
    if (v53 != (char *)v11)
    {
      v54 = 200 * v10;
      v55 = &v16[200 * a5];
      do
      {
        v56 = &v55[v54];
        v57 = &v9[v54];
        v58 = *(_OWORD *)&v9[200 * v10];
        v59 = *(_OWORD *)&v9[v54 + 16];
        v60 = *(_OWORD *)&v9[v54 + 48];
        *((_OWORD *)v56 + 2) = *(_OWORD *)&v9[v54 + 32];
        *((_OWORD *)v56 + 3) = v60;
        *(_OWORD *)v56 = v58;
        *((_OWORD *)v56 + 1) = v59;
        v61 = *(_OWORD *)&v9[v54 + 64];
        v62 = *(_OWORD *)&v9[v54 + 80];
        v63 = *(_OWORD *)&v9[v54 + 112];
        *((_OWORD *)v56 + 6) = *(_OWORD *)&v9[v54 + 96];
        *((_OWORD *)v56 + 7) = v63;
        *((_OWORD *)v56 + 4) = v61;
        *((_OWORD *)v56 + 5) = v62;
        *((_DWORD *)v56 + 32) = *(_DWORD *)&v9[v54 + 128];
        *(_OWORD *)(v56 + 136) = *(_OWORD *)&v9[v54 + 136];
        *((_QWORD *)v56 + 19) = *(_QWORD *)&v9[v54 + 152];
        *((_QWORD *)v57 + 17) = 0;
        *((_QWORD *)v57 + 18) = 0;
        *((_QWORD *)v57 + 19) = 0;
        v56[160] = 0;
        v56[184] = 0;
        if (v9[v54 + 184])
        {
          *((_OWORD *)v56 + 10) = *((_OWORD *)v57 + 10);
          *((_QWORD *)v56 + 22) = *((_QWORD *)v57 + 22);
          *((_QWORD *)v57 + 20) = 0;
          *((_QWORD *)v57 + 21) = 0;
          *((_QWORD *)v57 + 22) = 0;
          v56[184] = 1;
        }
        v56[192] = v57[192];
        v55 += 200;
        v9 += 200;
      }
      while (v57 + 200 != v53);
      v11 = (uint64_t)a1[1];
      v32 = &v55[200 * v10];
    }
    v64 = *a1;
    *a1 = v31;
    a1[1] = v32;
    a1[2] = &v16[200 * v15];
    while ((char *)v11 != v64)
    {
      if (*(_BYTE *)(v11 - 16))
      {
        v66 = *(void **)(v11 - 40);
        if (v66)
        {
          *(_QWORD *)(v11 - 32) = v66;
          operator delete(v66);
        }
      }
      v67 = *(_QWORD *)(v11 - 64);
      if (v67)
      {
        v68 = *(_QWORD *)(v11 - 56);
        v65 = *(void **)(v11 - 64);
        if (v68 != v67)
        {
          v69 = *(_QWORD *)(v11 - 56);
          do
          {
            v71 = *(void **)(v69 - 24);
            v69 -= 24;
            v70 = v71;
            if (v71)
            {
              *(_QWORD *)(v68 - 16) = v70;
              operator delete(v70);
            }
            v68 = v69;
          }
          while (v69 != v67);
          v65 = *(void **)(v11 - 64);
        }
        *(_QWORD *)(v11 - 56) = v67;
        operator delete(v65);
      }
      v11 -= 200;
    }
    if (v64)
      operator delete(v64);
    return;
  }
  v17 = v8 - v11;
  if ((uint64_t)(0x8F5C28F5C28F5C29 * ((uint64_t)(v8 - v11) >> 3)) >= a5)
  {
    v18 = (__int128 *)((char *)a3 + 200 * a5);
    v29 = a1[1];
    goto LABEL_55;
  }
  v18 = (__int128 *)((char *)a3 + 8 * ((uint64_t)(v8 - v11) >> 3));
  if (v18 == a4)
  {
    v29 = a1[1];
    a1[1] = (char *)v8;
    if (v17 < 1)
      return;
    goto LABEL_55;
  }
  v19 = 0;
  do
  {
    v20 = v8 + v19;
    v21 = (char *)v18 + v19;
    v22 = *(__int128 *)((char *)v18 + v19);
    v23 = *(__int128 *)((char *)v18 + v19 + 16);
    v24 = *(__int128 *)((char *)v18 + v19 + 48);
    *(_OWORD *)(v20 + 32) = *(__int128 *)((char *)v18 + v19 + 32);
    *(_OWORD *)(v20 + 48) = v24;
    *(_OWORD *)v20 = v22;
    *(_OWORD *)(v20 + 16) = v23;
    v25 = *(__int128 *)((char *)v18 + v19 + 64);
    v26 = *(__int128 *)((char *)v18 + v19 + 80);
    v27 = *(__int128 *)((char *)v18 + v19 + 112);
    *(_OWORD *)(v20 + 96) = *(__int128 *)((char *)v18 + v19 + 96);
    *(_OWORD *)(v20 + 112) = v27;
    *(_OWORD *)(v20 + 64) = v25;
    *(_OWORD *)(v20 + 80) = v26;
    *(_DWORD *)(v20 + 128) = *(_DWORD *)((char *)v18 + v19 + 128);
    *(_QWORD *)(v20 + 144) = 0;
    *(_QWORD *)(v20 + 152) = 0;
    *(_QWORD *)(v20 + 136) = 0;
    *(_OWORD *)(v20 + 136) = *(__int128 *)((char *)v18 + v19 + 136);
    *(_QWORD *)(v20 + 152) = *(_QWORD *)((char *)v18 + v19 + 152);
    *((_QWORD *)v21 + 17) = 0;
    *((_QWORD *)v21 + 18) = 0;
    *((_QWORD *)v21 + 19) = 0;
    *(_BYTE *)(v8 + v19 + 160) = 0;
    v28 = (_QWORD *)(v8 + v19 + 160);
    *(_BYTE *)(v20 + 184) = 0;
    if (*((_BYTE *)v18 + v19 + 184))
    {
      *v28 = 0;
      *(_QWORD *)(v8 + v19 + 168) = 0;
      *(_QWORD *)(v8 + v19 + 176) = 0;
      *(_OWORD *)v28 = *((_OWORD *)v21 + 10);
      *(_QWORD *)(v20 + 176) = *((_QWORD *)v21 + 22);
      *((_QWORD *)v21 + 20) = 0;
      *((_QWORD *)v21 + 21) = 0;
      *((_QWORD *)v21 + 22) = 0;
      *(_BYTE *)(v20 + 184) = 1;
    }
    *(_BYTE *)(v20 + 192) = v21[192];
    v19 += 200;
  }
  while (v21 + 200 != (char *)a4);
  v29 = (char *)(v8 + v19);
  a1[1] = v29;
  if (v17 >= 1)
  {
LABEL_55:
    v72 = v11 + 200 * a5;
    v73 = (unint64_t)&v29[-200 * a5];
    v74 = v29;
    if (v73 < v8)
    {
      v75 = 0;
      v76 = &v9[200 * v10 + 8 * ((uint64_t)&v29[-v72] >> 3)];
      do
      {
        v77 = &v29[v75];
        v78 = v73 + v75;
        v79 = *(_OWORD *)(v73 + v75);
        v80 = *(_OWORD *)(v73 + v75 + 16);
        v81 = *(_OWORD *)(v73 + v75 + 48);
        *((_OWORD *)v77 + 2) = *(_OWORD *)(v73 + v75 + 32);
        *((_OWORD *)v77 + 3) = v81;
        *(_OWORD *)v77 = v79;
        *((_OWORD *)v77 + 1) = v80;
        v82 = *(_OWORD *)(v73 + v75 + 64);
        v83 = *(_OWORD *)(v73 + v75 + 80);
        v84 = *(_OWORD *)(v73 + v75 + 112);
        *((_OWORD *)v77 + 6) = *(_OWORD *)(v73 + v75 + 96);
        *((_OWORD *)v77 + 7) = v84;
        *((_OWORD *)v77 + 4) = v82;
        *((_OWORD *)v77 + 5) = v83;
        *((_DWORD *)v77 + 32) = *(_DWORD *)(v73 + v75 + 128);
        *((_QWORD *)v77 + 18) = 0;
        *((_QWORD *)v77 + 19) = 0;
        *((_QWORD *)v77 + 17) = 0;
        *(_OWORD *)(v77 + 136) = *(_OWORD *)(v73 + v75 + 136);
        *((_QWORD *)v77 + 19) = *(_QWORD *)(v73 + v75 + 152);
        *(_QWORD *)(v78 + 136) = 0;
        *(_QWORD *)(v78 + 144) = 0;
        *(_QWORD *)(v78 + 152) = 0;
        v29[v75 + 160] = 0;
        v85 = &v29[v75 + 160];
        v77[184] = 0;
        if (*(_BYTE *)(v73 + v75 + 184))
        {
          v86 = &v76[v75];
          *(_QWORD *)v85 = 0;
          *(_QWORD *)&v29[v75 + 168] = 0;
          *(_QWORD *)&v29[v75 + 176] = 0;
          *(_OWORD *)v85 = *(_OWORD *)&v76[v75 + 160];
          *((_QWORD *)v77 + 22) = *(_QWORD *)(v78 + 176);
          *((_QWORD *)v86 + 20) = 0;
          *((_QWORD *)v86 + 21) = 0;
          *((_QWORD *)v86 + 22) = 0;
          v77[184] = 1;
        }
        v77[192] = *(_BYTE *)(v78 + 192);
        v75 += 200;
      }
      while (v78 + 200 < v8);
      v74 = &v29[v75];
    }
    a1[1] = v74;
    if (v29 != (char *)v72)
    {
      v87 = (uint64_t)(v29 - 200);
      v88 = 8 * ((uint64_t)&v29[-v72] >> 3);
      do
      {
        v87 = sub_223F6EFD4(v87, (__int128 *)&v9[200 * v10 - 200 + v88]) - 200;
        v88 -= 200;
      }
      while (v88);
    }
    for (; v6 != v18; v11 += 200)
    {
      sub_223F6EFD4(v11, v6);
      v6 = (__int128 *)((char *)v6 + 200);
    }
  }
}

uint64_t sub_223F6EFD4(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void **v18;
  _QWORD *v19;
  void *v20;
  void *v21;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(_DWORD *)(a1 + 128) = *((_DWORD *)a2 + 32);
  v10 = a1 + 136;
  v11 = *(_QWORD *)(a1 + 136);
  v12 = (_QWORD *)a2 + 17;
  if (v11)
  {
    v13 = *(_QWORD *)(a1 + 144);
    v14 = *(void **)(a1 + 136);
    if (v13 != v11)
    {
      v15 = *(_QWORD *)(a1 + 144);
      do
      {
        v17 = *(void **)(v15 - 24);
        v15 -= 24;
        v16 = v17;
        if (v17)
        {
          *(_QWORD *)(v13 - 16) = v16;
          operator delete(v16);
        }
        v13 = v15;
      }
      while (v15 != v11);
      v14 = *(void **)v10;
    }
    *(_QWORD *)(a1 + 144) = v11;
    operator delete(v14);
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(__int128 *)((char *)a2 + 136);
  *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
  *v12 = 0;
  v12[1] = 0;
  v12[2] = 0;
  v18 = (void **)(a1 + 160);
  v19 = a2 + 10;
  if (*(unsigned __int8 *)(a1 + 184) == *((unsigned __int8 *)a2 + 184))
  {
    if (*(_BYTE *)(a1 + 184))
    {
      v20 = *v18;
      if (*v18)
      {
        *(_QWORD *)(a1 + 168) = v20;
        operator delete(v20);
        *v18 = 0;
        *(_QWORD *)(a1 + 168) = 0;
        *(_QWORD *)(a1 + 176) = 0;
      }
      *(_OWORD *)(a1 + 160) = a2[10];
      *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
      *v19 = 0;
      *((_QWORD *)a2 + 21) = 0;
      *((_QWORD *)a2 + 22) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 184))
  {
    v21 = *v18;
    if (*v18)
    {
      *(_QWORD *)(a1 + 168) = v21;
      operator delete(v21);
    }
    *(_BYTE *)(a1 + 184) = 0;
  }
  else
  {
    *v18 = 0;
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_OWORD *)(a1 + 160) = a2[10];
    *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
    *v19 = 0;
    *((_QWORD *)a2 + 21) = 0;
    *((_QWORD *)a2 + 22) = 0;
    *(_BYTE *)(a1 + 184) = 1;
  }
  *(_BYTE *)(a1 + 192) = *((_BYTE *)a2 + 192);
  return a1;
}

size_t *sub_223F6F140(size_t *a1, size_t a2, void **a3, char a4, uint64_t a5)
{
  void *v7;
  int v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  int v16;
  void *v17;
  unint64_t v18;
  BOOL v19;
  void *memptr[3];
  size_t v22[2];

  if (a4)
  {
    v7 = *a3;
    v8 = *(_DWORD *)(a2 + 12);
  }
  else
  {
    LODWORD(v9) = *(_DWORD *)(a2 + 8);
    v8 = *(_DWORD *)(a2 + 12);
    v10 = (_DWORD)v9 != 0;
    if (v8)
      v9 = v9;
    else
      v9 = 0;
    v7 = (void *)(v10 | (v9 << 32));
  }
  v11 = (v8 * HIDWORD(v7));
  v12 = (a5 - 1) | ((unint64_t)(a5 - 1) >> 1) | (((a5 - 1) | ((unint64_t)(a5 - 1) >> 1)) >> 2);
  v13 = v12 | (v12 >> 4) | ((v12 | (v12 >> 4)) >> 8);
  v14 = v13 | (v13 >> 16) | ((v13 | (v13 >> 16)) >> 32);
  if (v14 + 1 > 8)
    v15 = v14 + 1;
  else
    v15 = 8;
  *a1 = v11;
  a1[1] = 0;
  a1[2] = v15;
  if (!(_DWORD)v11)
  {
    v17 = 0;
    v18 = *(_QWORD *)(a2 + 8);
    a1[3] = v18;
    a1[4] = (size_t)v7;
    if (!*(_DWORD *)(a2 + 8))
      return a1;
    goto LABEL_15;
  }
  memptr[0] = 0;
  v16 = malloc_type_posix_memalign(memptr, v15, v11, 0x1F88E90uLL);
  if (v16)
    sub_2244E2E20(v16, a1[2], v11);
  v17 = memptr[0];
  a1[1] = (size_t)memptr[0];
  v18 = *(_QWORD *)(a2 + 8);
  a1[3] = v18;
  a1[4] = (size_t)v7;
  if (*(_DWORD *)(a2 + 8))
  {
LABEL_15:
    if (*(_DWORD *)(a2 + 12))
    {
      if ((_DWORD)v18)
        v19 = HIDWORD(v18) == 0;
      else
        v19 = 1;
      if (v19)
        v18 = 0;
      memptr[0] = v17;
      memptr[1] = (void *)v18;
      memptr[2] = v7;
      if (HIDWORD(v18) * HIDWORD(v7) == -1
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v22[0] = a2;
      v22[1] = (size_t)memptr;
      sub_22330C664(v22);
    }
  }
  return a1;
}

void sub_223F6F2BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223F6F2D8(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = a1[12];
  if (v3)
  {
    v4 = a1[13];
    v5 = (void *)a1[12];
    if (v4 != v3)
    {
      v6 = a1[13];
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)a1[12];
    }
    a1[13] = v3;
    operator delete(v5);
  }
  return a1;
}

void sub_223F6F35C(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v3 - 6);
        if (v6)
        {
          *((_QWORD *)v3 - 5) = v6;
          operator delete(v6);
        }
        v7 = *((_QWORD *)v3 - 9);
        if (v7)
        {
          v8 = *((_QWORD *)v3 - 8);
          v5 = (void *)*((_QWORD *)v3 - 9);
          if (v8 != v7)
          {
            v9 = *((_QWORD *)v3 - 8);
            do
            {
              v11 = *(void **)(v9 - 24);
              v9 -= 24;
              v10 = v11;
              if (v11)
              {
                *(_QWORD *)(v8 - 16) = v10;
                operator delete(v10);
              }
              v8 = v9;
            }
            while (v9 != v7);
            v5 = (void *)*((_QWORD *)v3 - 9);
          }
          *((_QWORD *)v3 - 8) = v7;
          operator delete(v5);
        }
        v3 -= 168;
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_223F6F420(uint64_t a1)
{
  void *v2;
  BOOL v3;
  int v4;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 60) || *(_DWORD *)(a1 + 56) == 0;
    v4 = v3 ? 0 : *(_DWORD *)(a1 + 60);
    if (v4 * (*(_QWORD *)(a1 + 64) >> 33) != -1)
      goto LABEL_11;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = *(void **)(a1 + 40);
    if (v2)
LABEL_11:
      free(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
  return a1;
}

unint64_t *sub_223F6F4BC(unint64_t *a1, _DWORD *a2, unint64_t *a3, char a4, _WORD *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  _WORD *v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _WORD *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _WORD *v38;
  int v39;
  void *memptr;

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v13 << 32);
  }
  v14 = v12 * HIDWORD(v11);
  v15 = 2 * v14;
  v16 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  *a1 = v15;
  a1[1] = 0;
  a1[2] = v19;
  if (v14)
  {
    memptr = 0;
    v20 = malloc_type_posix_memalign(&memptr, v19, 2 * v14, 0x1F88E90uLL);
    if (v20)
      sub_2244E2E20(v20, a1[2], v15);
    v21 = memptr;
    a1[1] = (unint64_t)memptr;
    v22 = *(_QWORD *)a2;
    a1[3] = *(_QWORD *)a2;
    a1[4] = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
    if (v21)
    {
      if ((_DWORD)v22)
        v23 = HIDWORD(v22) == 0;
      else
        v23 = 1;
      if (v23)
        v24 = 0;
      else
        v24 = v22;
      v25 = HIDWORD(v24) * ((v11 >> 31) >> 1);
      if (a6)
      {
        if (v25 == -1
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        if ((_DWORD)v24 && HIDWORD(v24))
        {
          v26 = v24 - 1;
          v27 = HIDWORD(v24) - 1;
          if (HIDWORD(v24) != 1)
          {
            v28 = HIDWORD(v11) & 0x7FFFFFFF;
            if ((_DWORD)v24 == 1)
            {
              do
              {
                *v21 = *a5;
                v21 += v28;
                --v27;
              }
              while (v27);
            }
            else
            {
              v29 = 0;
              v30 = 2 * v28;
              do
              {
                v31 = v21;
                v32 = v24 - 1;
                do
                {
                  *v31 = *a5;
                  v31 += v11 & 0x7FFFFFFF;
                  --v32;
                }
                while (v32);
                *v31 = *a5;
                v21 = (_WORD *)((char *)v21 + v30);
                ++v29;
              }
              while (v29 != v27);
            }
          }
          if ((_DWORD)v24 != 1)
          {
            do
            {
              *v21 = *a5;
              v21 += v11 & 0x7FFFFFFF;
              --v26;
            }
            while (v26);
          }
          *v21 = *a5;
        }
      }
      else
      {
        if (v25 == -1
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        if ((_DWORD)v24 && HIDWORD(v24))
        {
          v33 = v24 - 1;
          v34 = HIDWORD(v24) - 1;
          if (HIDWORD(v24) != 1)
          {
            v35 = HIDWORD(v11) & 0x7FFFFFFF;
            if ((_DWORD)v24 == 1)
            {
              do
              {
                *v21 = 0;
                v21 += v35;
                --v34;
              }
              while (v34);
            }
            else
            {
              v36 = 0;
              v37 = 2 * v35;
              do
              {
                v38 = v21;
                v39 = v24 - 1;
                do
                {
                  *v38 = 0;
                  v38 += v11 & 0x7FFFFFFF;
                  --v39;
                }
                while (v39);
                *v38 = 0;
                v21 = (_WORD *)((char *)v21 + v37);
                ++v36;
              }
              while (v36 != v34);
            }
          }
          if ((_DWORD)v24 != 1)
          {
            do
            {
              *v21 = 0;
              v21 += v11 & 0x7FFFFFFF;
              --v33;
            }
            while (v33);
          }
          *v21 = 0;
        }
      }
    }
  }
  else
  {
    a1[3] = *(_QWORD *)a2;
    a1[4] = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
  }
  return a1;
}

void sub_223F6F7B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223F6F7D8(v1);
  _Unwind_Resume(a1);
}

void sub_223F6F7C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223F6F7D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223F6F7D8(uint64_t a1)
{
  void *v2;
  BOOL v3;
  int v4;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 28) || *(_DWORD *)(a1 + 24) == 0;
    v4 = v3 ? 0 : *(_DWORD *)(a1 + 28);
    if (v4 * (*(_QWORD *)(a1 + 32) >> 33) != -1)
      goto LABEL_11;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = *(void **)(a1 + 8);
    if (v2)
LABEL_11:
      free(v2);
  }
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_223F6F874(uint64_t a1, unsigned int *a2, uint64_t *a3, char a4, _WORD *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  int v24;
  void *v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  BOOL v29;
  char v30;
  unint64_t v31;
  int v32;
  BOOL v33;
  char v34;
  BOOL v35;
  BOOL v36;
  char v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  char v41;
  _WORD *v43;
  void *memptr;
  unint64_t v45;
  int v46;
  uint64_t v47;
  int v48;

  if (a4)
  {
    v11 = *a3;
    v12 = *((_DWORD *)a3 + 2);
    v13 = a2[2];
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    if (v15)
      v16 = v14;
    else
      v16 = 0;
    v17 = v15 * v14;
    v13 = a2[2];
    if (v13)
      v12 = v17;
    else
      v12 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v16 << 32);
  }
  v18 = v12 * v13;
  v19 = 2 * v18;
  v20 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
  v22 = v21 | (v21 >> 16) | ((v21 | (v21 >> 16)) >> 32);
  if (v22 + 1 > 8)
    v23 = v22 + 1;
  else
    v23 = 8;
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v23;
  if (v18)
  {
    memptr = 0;
    v24 = malloc_type_posix_memalign(&memptr, v23, 2 * v18, 0x1F88E90uLL);
    if (v24)
      sub_2244E2E20(v24, *(_QWORD *)(a1 + 16), v19);
    v25 = memptr;
    *(_QWORD *)(a1 + 8) = memptr;
  }
  else
  {
    v25 = 0;
  }
  v26 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 24) = v26;
  *(_QWORD *)(a1 + 36) = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a1 + 44) = 2 * v12;
  if (v25)
  {
    v27 = v12 & 0x7FFFFFFF;
    if (a6)
    {
      if (*(_DWORD *)(a1 + 24))
        v28 = *(_DWORD *)(a1 + 28) == 0;
      else
        v28 = 1;
      v29 = v28 || *(_DWORD *)(a1 + 32) == 0;
      v30 = v29;
      if (v29)
        v31 = 0;
      else
        v31 = *(_QWORD *)(a1 + 24);
      if (v29)
        v32 = 0;
      else
        v32 = *(_DWORD *)(a1 + 32);
      memptr = v25;
      v45 = v31;
      v46 = v32;
      v47 = v11 & 0x7FFFFFFF7FFFFFFFLL;
      v48 = v12 & 0x7FFFFFFF;
      if (v32 * v27 == -1
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v43 = a5;
      if (HIDWORD(v31))
        v33 = (_DWORD)v31 == 0;
      else
        v33 = 1;
      if (v33)
        v34 = 1;
      else
        v34 = v30;
      if ((v34 & 1) == 0)
        sub_223F6FBE4(&v43, (uint64_t)&memptr);
    }
    else
    {
      if (*(_DWORD *)(a1 + 24))
        v35 = *(_DWORD *)(a1 + 28) == 0;
      else
        v35 = 1;
      v36 = v35 || *(_DWORD *)(a1 + 32) == 0;
      v37 = v36;
      if (v36)
        v38 = 0;
      else
        v38 = *(_QWORD *)(a1 + 24);
      if (v36)
        v39 = 0;
      else
        v39 = *(_DWORD *)(a1 + 32);
      memptr = v25;
      v45 = v38;
      v46 = v39;
      v47 = v11 & 0x7FFFFFFF7FFFFFFFLL;
      v48 = v12 & 0x7FFFFFFF;
      if (v39 * v27 == -1
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      if (HIDWORD(v38))
        v40 = (_DWORD)v38 == 0;
      else
        v40 = 1;
      if (v40)
        v41 = 1;
      else
        v41 = v37;
      if ((v41 & 1) == 0)
        sub_223F6FE10((uint64_t)&v43, (uint64_t)&memptr);
    }
  }
  return a1;
}

void sub_223F6FAF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223F6FB40(v1);
  _Unwind_Resume(a1);
}

void sub_223F6FB04(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223F6FB40(v1);
  _Unwind_Resume(a1);
}

void sub_223F6FB18(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223F6FB40(v1);
  _Unwind_Resume(a1);
}

void sub_223F6FB2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223F6FB40(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223F6FB40(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 32) || *(_DWORD *)(a1 + 28) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 24) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 32);
    if (v5 * (*(_DWORD *)(a1 + 44) >> 1) != -1)
      goto LABEL_14;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = *(void **)(a1 + 8);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

_WORD **sub_223F6FBE4(_WORD **result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  BOOL v5;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  int v19;
  _WORD *v20;
  _WORD *v21;
  _WORD *v22;
  _WORD *v23;
  int v24;
  int v25;
  int v26;
  _WORD *v27;
  int v28;
  uint64_t v29;
  _WORD *v30;
  int v31;
  int v32;
  uint64_t v33;
  _WORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v2 - 1;
    v8 = v3 - 1;
    v9 = *(unsigned int *)(a2 + 20);
    v10 = *(unsigned int *)(a2 + 24);
    v11 = *(_WORD **)a2;
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a2 + 28);
      if (v8)
      {
        v14 = 0;
        v15 = 2 * v13;
        v16 = v10;
        if (v7)
        {
          v17 = 2 * v9;
          v18 = &v11[v16];
          do
          {
            v19 = 0;
            v20 = v18;
            v21 = v11;
            do
            {
              v22 = v20;
              v23 = v21;
              v24 = v7;
              do
              {
                *v23 = **result;
                v23 = (_WORD *)((char *)v23 + v17);
                --v24;
              }
              while (v24);
              *v23 = **result;
              v21 = (_WORD *)((char *)v21 + v16 * 2);
              ++v19;
              v20 = &v22[v16];
            }
            while (v19 != v8);
            v25 = v7;
            do
            {
              *v22 = **result;
              v22 = (_WORD *)((char *)v22 + v17);
              --v25;
            }
            while (v25);
            *v22 = **result;
            v11 = (_WORD *)((char *)v11 + v15);
            ++v14;
            v18 = (_WORD *)((char *)v18 + v15);
          }
          while (v14 != v12);
        }
        else
        {
          do
          {
            v26 = v8;
            v27 = v11;
            do
            {
              *v27 = **result;
              v27 = (_WORD *)((char *)v27 + v16 * 2);
              --v26;
            }
            while (v26);
            *v27 = **result;
            v11 = (_WORD *)((char *)v11 + v15);
            ++v14;
          }
          while (v14 != v12);
        }
      }
      else if (v7)
      {
        v28 = 0;
        v29 = 2 * v13;
        do
        {
          v30 = v11;
          v31 = v7;
          do
          {
            *v30 = **result;
            v30 += v9;
            --v31;
          }
          while (v31);
          *v30 = **result;
          v11 = (_WORD *)((char *)v11 + v29);
          ++v28;
        }
        while (v28 != v12);
      }
      else
      {
        do
        {
          *v11 = **result;
          v11 += v13;
          --v12;
        }
        while (v12);
      }
    }
    if (v8)
    {
      if (v7)
      {
        v32 = 0;
        v33 = 2 * v10;
        do
        {
          v34 = v11;
          v35 = v7;
          do
          {
            *v34 = **result;
            v34 += v9;
            --v35;
          }
          while (v35);
          *v34 = **result;
          v11 = (_WORD *)((char *)v11 + v33);
          ++v32;
        }
        while (v32 != v8);
      }
      else
      {
        v36 = 2 * v10;
        do
        {
          *v11 = **result;
          v11 = (_WORD *)((char *)v11 + v36);
          --v8;
        }
        while (v8);
      }
    }
    if (v7)
    {
      v37 = 2 * v9;
      do
      {
        *v11 = **result;
        v11 = (_WORD *)((char *)v11 + v37);
        --v7;
      }
      while (v7);
    }
    *v11 = **result;
  }
  return result;
}

void sub_223F6FE10(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  BOOL v5;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  int v19;
  _WORD *v20;
  _WORD *v21;
  _WORD *v22;
  _WORD *v23;
  int v24;
  int v25;
  int v26;
  _WORD *v27;
  int v28;
  uint64_t v29;
  _WORD *v30;
  int v31;
  int v32;
  uint64_t v33;
  _WORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v2 - 1;
    v8 = v3 - 1;
    v9 = *(unsigned int *)(a2 + 20);
    v10 = *(unsigned int *)(a2 + 24);
    v11 = *(_WORD **)a2;
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a2 + 28);
      if (v8)
      {
        v14 = 0;
        v15 = 2 * v13;
        v16 = v10;
        if (v7)
        {
          v17 = 2 * v9;
          v18 = &v11[v16];
          do
          {
            v19 = 0;
            v20 = v18;
            v21 = v11;
            do
            {
              v22 = v20;
              v23 = v21;
              v24 = v7;
              do
              {
                *v23 = 0;
                v23 = (_WORD *)((char *)v23 + v17);
                --v24;
              }
              while (v24);
              *v23 = 0;
              v21 = (_WORD *)((char *)v21 + v16 * 2);
              ++v19;
              v20 = &v22[v16];
            }
            while (v19 != v8);
            v25 = v7;
            do
            {
              *v22 = 0;
              v22 = (_WORD *)((char *)v22 + v17);
              --v25;
            }
            while (v25);
            *v22 = 0;
            v11 = (_WORD *)((char *)v11 + v15);
            ++v14;
            v18 = (_WORD *)((char *)v18 + v15);
          }
          while (v14 != v12);
        }
        else
        {
          do
          {
            v26 = v8;
            v27 = v11;
            do
            {
              *v27 = 0;
              v27 = (_WORD *)((char *)v27 + v16 * 2);
              --v26;
            }
            while (v26);
            *v27 = 0;
            v11 = (_WORD *)((char *)v11 + v15);
            ++v14;
          }
          while (v14 != v12);
        }
      }
      else if (v7)
      {
        v28 = 0;
        v29 = 2 * v13;
        do
        {
          v30 = v11;
          v31 = v7;
          do
          {
            *v30 = 0;
            v30 += v9;
            --v31;
          }
          while (v31);
          *v30 = 0;
          v11 = (_WORD *)((char *)v11 + v29);
          ++v28;
        }
        while (v28 != v12);
      }
      else
      {
        do
        {
          *v11 = 0;
          v11 += v13;
          --v12;
        }
        while (v12);
      }
    }
    if (v8)
    {
      if (v7)
      {
        v32 = 0;
        v33 = 2 * v10;
        do
        {
          v34 = v11;
          v35 = v7;
          do
          {
            *v34 = 0;
            v34 += v9;
            --v35;
          }
          while (v35);
          *v34 = 0;
          v11 = (_WORD *)((char *)v11 + v33);
          ++v32;
        }
        while (v32 != v8);
      }
      else
      {
        v36 = 2 * v10;
        do
        {
          *v11 = 0;
          v11 = (_WORD *)((char *)v11 + v36);
          --v8;
        }
        while (v8);
      }
    }
    if (v7)
    {
      v37 = 2 * v9;
      do
      {
        *v11 = 0;
        v11 = (_WORD *)((char *)v11 + v37);
        --v7;
      }
      while (v7);
    }
    *v11 = 0;
  }
}

void sub_223F6FFCC(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x227684CE8](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_223F7035C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va2);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223F70380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223F70394(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_223F703B8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x227684CE8](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_223F70748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va2);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223F7076C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223F70780(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_223F707A8()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_223F707BC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24EC64530;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_223F707F4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC64530;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_223F70814()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;

  kdebug_trace();
  sub_223F6598C(&v2);
  if (**(int **)(v2 + 56) <= 1)
  {
    v0 = atomic_load((unsigned __int8 *)&qword_2540CE2E8);
    if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE2E8))
    {
      qword_2540CE2E0 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_AddPoseUpdates");
      __cxa_guard_release(&qword_2540CE2E8);
    }
    v1 = qword_2540CE2E0;
    if (*(_BYTE *)(qword_2540CE2E0 + 16))
    {
      *(_QWORD *)(v1 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v1;
      *(_BYTE *)(v1 + 16) = 0;
    }
  }
}

void sub_223F708DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CE2E8);
  _Unwind_Resume(a1);
}

uint64_t sub_223F708F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3acv16surfacedetection15SurfaceDetector23addPoseG"
                     "raphPlaneUpdateENS3_3mapINS0_6random4UUIDEN3cva15SE3GroupStorageIdNSB_6MatrixIdLj4ELj4ELb1EEEEENS3_"
                     "4lessISA_EENS3_9allocatorINS3_4pairIKSA_SF_EEEEEEE3$_0JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3acv16surfacedetection15SurfaceDetecto"
                                "r23addPoseGraphPlaneUpdateENS3_3mapINS0_6random4UUIDEN3cva15SE3GroupStorageIdNSB_6Matrix"
                                "IdLj4ELj4ELb1EEEEENS3_4lessISA_EENS3_9allocatorINS3_4pairIKSA_SF_EEEEEEE3$_0JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3acv16surfacedetection15SurfaceDetector23addPoseGraphPlaneUpdateENS3_3mapINS0_6random4UUIDEN3cva15SE3GroupStorageIdNSB_6MatrixIdLj4ELj4ELb1EEEEENS3_4lessISA_EENS3_9allocatorINS3_4pairIKSA_SF_EEEEEEE3$_0JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3acv16surfacedetection15SurfaceDetector23addPoseGraphPlaneUpdateENS3_3mapINS0_6random4UUIDEN3cva15SE3GroupStorageIdNSB_6MatrixIdLj4ELj4ELb1EEEEENS3_4lessISA_EENS3_9allocatorINS3_4pairIKSA_SF_EEEEEEE3$_0JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223F70964()
{
  return &unk_24EC64590;
}

void sub_223F70974()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_223F70988(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24EC645B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_223F709C0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC645B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_223F709E0(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t v2;
  void *__p[3];

  sub_223F901C8(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112), (char **)__p);
  kdebug_trace();
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_223F6598C(__p);
  if (**((int **)__p[0] + 7) <= 1)
  {
    v1 = atomic_load((unsigned __int8 *)&qword_2540CE2F8);
    if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE2F8))
    {
      qword_2540CE2F0 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_Erase");
      __cxa_guard_release(&qword_2540CE2F8);
    }
    v2 = qword_2540CE2F0;
    if (*(_BYTE *)(qword_2540CE2F0 + 16))
    {
      *(_QWORD *)(v2 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v2;
      *(_BYTE *)(v2 + 16) = 0;
    }
  }
}

void sub_223F70ACC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CE2F8);
  _Unwind_Resume(a1);
}

uint64_t sub_223F70AE8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3acv16surfacedetection15SurfaceDetector14removeSu"
                     "rfacesERKNS3_6vectorINS0_6random4UUIDENS3_9allocatorISA_EEEEE3$_0JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3acv16surfacedetection15SurfaceDetecto"
                                "r14removeSurfacesERKNS3_6vectorINS0_6random4UUIDENS3_9allocatorISA_EEEEE3$_0JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3acv16surfacedetection15SurfaceDetector14removeSurfacesERKNS3_6vectorINS0_6random4UUIDENS3_9allocatorISA_EEEEE3$_0JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3acv16surfacedetection15SurfaceDetector14removeSurfacesERKNS3_6vectorINS0_6random4UUIDENS3_9allocatorISA_EEEEE3$_0JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223F70B54()
{
  return &unk_24EC64610;
}

void sub_223F70B60(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unint64_t v3;
  int8x16_t v4;
  float64x2_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int8x16_t *v9;
  uint64_t v10;
  unint64_t v11;
  int8x16_t *v12;
  int8x16_t *v13;
  int8x16_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int8x16_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int8x16_t *v26;
  unsigned __int8 v27;
  BOOL v28;
  uint64_t v29;
  uint64_t i;
  unsigned __int8 v31;
  uint64_t **v32;
  double v33;
  double v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  float64x2_t v47;
  int8x16_t v48;
  unint64_t v49;
  int8x16_t v50;
  unint64_t v51;
  int8x16_t v52;
  unint64_t v53;
  int8x16_t v54;
  unint64_t v55;
  int8x16_t v56;
  unint64_t v57;
  int8x16_t *v58;
  int8x16_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  int8x16_t *v64;
  int8x16_t *v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t *v69;
  int8x16_t *v70;
  uint64_t *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  float64x2_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  unint64_t v103;
  _OWORD v104[8];
  int v105;
  int8x16_t __p;
  uint64_t v107;
  int8x16_t v108;
  int8x16_t *v109;
  char v110;
  char v111;
  int8x16_t *v112;
  int8x16_t *v113;
  int8x16_t *v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  uint64_t v121;

  v2 = a1;
  v121 = *MEMORY[0x24BDAC8D0];
  v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[7] - a1[6]) >> 3);
  v103 = 0;
  v102 = 0uLL;
  sub_223F73250((uint64_t)&v102, v3);
  v6 = v2[6];
  v88 = v2[7];
  if (v6 != v88)
  {
    v87 = v2;
    do
    {
      v89 = v6;
      v9 = *(int8x16_t **)(v6 + 32);
      v8 = *(_QWORD *)(v6 + 40);
      v112 = 0;
      v113 = 0;
      v114 = 0;
      v10 = v8 - (_QWORD)v9;
      if (!v10)
      {
        v21 = 0;
        v12 = 0;
        v69 = 0;
        v26 = 0;
        v70 = 0;
        goto LABEL_75;
      }
      v11 = 0xCCCCCCCCCCCCCCCDLL * (v10 >> 4);
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        sub_223323BA8();
      v12 = (int8x16_t *)operator new(0x3333333333333338 * (v10 >> 4));
      v112 = v12;
      v113 = v12;
      v114 = (int8x16_t *)((char *)v12 + 24 * v11);
      v13 = &v9[5 * v11];
      do
      {
        while (1)
        {
          v115 = *(float64x2_t *)v9;
          *(_QWORD *)&v116.f64[0] = v9[1].i64[0];
          if (v12 >= v114)
            break;
          v4 = *v9;
          v12[1].i64[0] = v9[1].i64[0];
          *v12 = v4;
          v12 = (int8x16_t *)((char *)v12 + 24);
          v113 = v12;
          v9 += 5;
          if (v9 == v13)
            goto LABEL_28;
        }
        v14 = v112;
        v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v112) >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_223323BA8();
        if (0x5555555555555556 * (((char *)v114 - (char *)v112) >> 3) > v16)
          v16 = 0x5555555555555556 * (((char *)v114 - (char *)v112) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v114 - (char *)v112) >> 3) >= 0x555555555555555)
          v17 = 0xAAAAAAAAAAAAAAALL;
        else
          v17 = v16;
        if (v17)
        {
          if (v17 > 0xAAAAAAAAAAAAAAALL)
            sub_223174E94();
          v18 = (char *)operator new(24 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[24 * v15];
        *(float64x2_t *)v19 = v115;
        *((_QWORD *)v19 + 2) = *(_QWORD *)&v116.f64[0];
        v20 = (int8x16_t *)(v19 + 24);
        if (v12 == v14)
        {
          v112 = (int8x16_t *)v19;
          v113 = (int8x16_t *)(v19 + 24);
          v114 = (int8x16_t *)&v18[24 * v17];
LABEL_26:
          operator delete(v12);
          goto LABEL_27;
        }
        do
        {
          v4 = *(int8x16_t *)((char *)v12 - 24);
          *((_QWORD *)v19 - 1) = v12[-1].i64[1];
          *(int8x16_t *)(v19 - 24) = v4;
          v19 -= 24;
          v12 = (int8x16_t *)((char *)v12 - 24);
        }
        while (v12 != v14);
        v12 = v112;
        v112 = (int8x16_t *)v19;
        v113 = v20;
        v114 = (int8x16_t *)&v18[24 * v17];
        if (v12)
          goto LABEL_26;
LABEL_27:
        v12 = v20;
        v113 = v20;
        v9 += 5;
      }
      while (v9 != v13);
LABEL_28:
      v21 = (uint64_t *)v112;
      v22 = *(_QWORD *)(v89 + 32);
      v23 = *(_QWORD *)(v89 + 40) - v22;
      if (v23 && *(_BYTE *)(v22 + 72))
      {
        v24 = 0xCCCCCCCCCCCCCCCDLL * (v23 >> 4);
        v112 = 0;
        v113 = 0;
        v114 = 0;
        if (v24 > 0x2AAAAAAAAAAAAAALL)
          sub_22316E078();
        v86 = v21;
        v112 = (int8x16_t *)operator new(0xCCCCCCCCCCCCCCE0 * (v23 >> 4));
        v113 = v112;
        v114 = &v112[6 * v24];
        v25 = v22 + 80 * v24;
        do
        {
          while (1)
          {
            if (!*(_QWORD *)(v22 + 64) || !*(_QWORD *)(v22 + 48))
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/SingleShot/DensifierResult.cpp", 46, (uint64_t)"numPixels > 0 && !labelCount.empty()", 36, (uint64_t)&unk_2245AB53A, 0, (void (*)(void **))sub_22457406C);
              v27 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (byte_255795670)
                v28 = byte_255795678 == 0;
              else
                v28 = 0;
              if (!v28)
              {
                v29 = qword_255795648;
                for (i = qword_255795650; v29 != i; v29 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v29)(*(_QWORD *)(v29 + 8), "numPixels > 0 && !labelCount.empty()", 36, &unk_2245AB53A, 0);
              }
              v31 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                abort();
              qword_255795660(*(_QWORD *)algn_255795668, "numPixels > 0 && !labelCount.empty()", 36, &unk_2245AB53A, 0);
            }
            v119 = 0u;
            v120 = 0u;
            v117 = 0u;
            v118 = 0u;
            v115 = 0u;
            v116 = 0u;
            v32 = *(uint64_t ***)(v22 + 40);
            if (v32)
            {
              v33 = (double)*(unint64_t *)(v22 + 64);
              do
              {
                v115.f64[*((unsigned int *)v32 + 4)] = (double)(unint64_t)v32[3] / v33;
                v32 = (uint64_t **)*v32;
              }
              while (v32);
              v34 = v115.f64[0]
                  + v115.f64[1]
                  + v116.f64[0]
                  + v116.f64[1]
                  + v117.f64[0]
                  + v117.f64[1]
                  + v118.f64[0]
                  + v118.f64[1]
                  + v119.f64[0]
                  + v119.f64[1]
                  + v120.f64[0]
                  + v120.f64[1];
              v36 = v119;
              v35 = v120;
              v38 = v117;
              v37 = v118;
              v40 = v115;
              v39 = v116;
              v41 = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
              v42 = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
              v43 = vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
              v44 = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
              v45 = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
              v46 = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
            }
            else
            {
              v40.f64[0] = 0.0;
              v46 = 0;
              v39.f64[0] = 0.0;
              v45 = 0;
              v38.f64[0] = 0.0;
              v44 = 0;
              v37.f64[0] = 0.0;
              v43 = 0;
              v36.f64[0] = 0.0;
              v42 = 0;
              v35.f64[0] = 0.0;
              v41 = 0;
              v34 = 0.0;
            }
            v47 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v34, 0);
            *(_QWORD *)&v40.f64[1] = v46;
            v48 = (int8x16_t)vdivq_f64(v40, v47);
            v49 = vextq_s8(v48, v48, 8uLL).u64[0];
            *(_QWORD *)&v39.f64[1] = v45;
            v50 = (int8x16_t)vdivq_f64(v39, v47);
            *(_QWORD *)&v38.f64[1] = v44;
            v51 = vextq_s8(v50, v50, 8uLL).u64[0];
            v52 = (int8x16_t)vdivq_f64(v38, v47);
            v53 = vextq_s8(v52, v52, 8uLL).u64[0];
            *(_QWORD *)&v37.f64[1] = v43;
            v54 = (int8x16_t)vdivq_f64(v37, v47);
            v55 = vextq_s8(v54, v54, 8uLL).u64[0];
            *(_QWORD *)&v36.f64[1] = v42;
            v56 = (int8x16_t)vdivq_f64(v36, v47);
            *(_QWORD *)&v35.f64[1] = v41;
            v5 = (float64x2_t)vextq_s8(v56, v56, 8uLL);
            v4 = (int8x16_t)vdivq_f64(v35, v47);
            v57 = vextq_s8(v4, v4, 8uLL).u64[0];
            v58 = v113;
            if (v113 >= v114)
              break;
            v48.i64[1] = v49;
            v50.i64[1] = v51;
            v52.i64[1] = v53;
            *v113 = v48;
            v58[1] = v50;
            v54.i64[1] = v55;
            v56.i64[1] = *(_QWORD *)&v5.f64[0];
            v58[2] = v52;
            v58[3] = v54;
            v4.i64[1] = v57;
            v58[4] = v56;
            v58[5] = v4;
            v26 = v58 + 6;
            v113 = v58 + 6;
            v22 += 80;
            if (v22 == v25)
              goto LABEL_74;
          }
          v59 = v112;
          v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v113 - (char *)v112) >> 5);
          v61 = v60 + 1;
          if (v60 + 1 > 0x2AAAAAAAAAAAAAALL)
            sub_22316E078();
          if (0x5555555555555556 * (((char *)v114 - (char *)v112) >> 5) > v61)
            v61 = 0x5555555555555556 * (((char *)v114 - (char *)v112) >> 5);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v114 - (char *)v112) >> 5) >= 0x155555555555555)
            v62 = 0x2AAAAAAAAAAAAAALL;
          else
            v62 = v61;
          if (v62)
          {
            v90 = v51;
            v91 = v49;
            v92 = v5;
            v93 = v53;
            v94 = v55;
            v95 = v57;
            v96 = v4.i64[0];
            v97 = v50.i64[0];
            v98 = v54.i64[0];
            v99 = v56.i64[0];
            v100 = v48.i64[0];
            v101 = v52.i64[0];
            if (v62 > 0x2AAAAAAAAAAAAAALL)
              sub_223174E94();
            v63 = (char *)operator new(96 * v62);
            v48.i64[0] = v100;
            v52.i64[0] = v101;
            v54.i64[0] = v98;
            v56.i64[0] = v99;
            v4.i64[0] = v96;
            v50.i64[0] = v97;
            v55 = v94;
            v57 = v95;
            v5 = v92;
            v53 = v93;
            v51 = v90;
            v49 = v91;
          }
          else
          {
            v63 = 0;
          }
          v48.i64[1] = v49;
          v64 = (int8x16_t *)&v63[96 * v60];
          v50.i64[1] = v51;
          v52.i64[1] = v53;
          *v64 = v48;
          v64[1] = v50;
          v54.i64[1] = v55;
          v56.i64[1] = *(_QWORD *)&v5.f64[0];
          v64[2] = v52;
          v64[3] = v54;
          v4.i64[1] = v57;
          v64[4] = v56;
          v64[5] = v4;
          v65 = v64;
          if (v58 != v59)
          {
            do
            {
              v66 = v58[-5];
              v65[-6] = v58[-6];
              v65[-5] = v66;
              v4 = v58[-4];
              v67 = v58[-3];
              v68 = v58[-1];
              v65[-2] = v58[-2];
              v65[-1] = v68;
              v65[-4] = v4;
              v65[-3] = v67;
              v65 -= 6;
              v58 -= 6;
            }
            while (v58 != v59);
            v58 = v59;
          }
          v26 = v64 + 6;
          v112 = v65;
          v113 = v64 + 6;
          v114 = (int8x16_t *)&v63[96 * v62];
          if (v58)
            operator delete(v58);
          v113 = v26;
          v22 += 80;
        }
        while (v22 != v25);
LABEL_74:
        v70 = v112;
        v69 = v114;
        v2 = v87;
        v21 = v86;
      }
      else
      {
        v69 = 0;
        v26 = 0;
        v70 = 0;
        v2 = v87;
      }
LABEL_75:
      v71 = v21;
      sub_223F8C768(v89, 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v21) >> 3), v21, *v2, 0x8E38E38E38E38E39 * ((v2[4] - v2[3]) >> 2), v2[3], (uint64_t)v104, (float32x4_t)v4, v5);
      if (v70 != v26)
      {
        if (v110)
        {
          if (v108.i64[0])
          {
            v108.i64[1] = v108.i64[0];
            operator delete((void *)v108.i64[0]);
          }
          v108.i64[0] = (uint64_t)v70;
          v108.i64[1] = (uint64_t)v26;
          v109 = v69;
          if (!v71)
            goto LABEL_85;
        }
        else
        {
          v108.i64[0] = (uint64_t)v70;
          v108.i64[1] = (uint64_t)v26;
          v109 = v69;
          v110 = 1;
          if (!v71)
            goto LABEL_85;
        }
LABEL_84:
        operator delete(v71);
        goto LABEL_85;
      }
      if (v26)
        operator delete(v26);
      if (v71)
        goto LABEL_84;
LABEL_85:
      v72 = *((_QWORD *)&v102 + 1);
      if (*((_QWORD *)&v102 + 1) >= v103)
      {
        v79 = sub_223F4A4D8((void **)&v102, (uint64_t)v104);
      }
      else
      {
        v73 = v104[0];
        v74 = v104[1];
        v75 = v104[3];
        *(_OWORD *)(*((_QWORD *)&v102 + 1) + 32) = v104[2];
        *(_OWORD *)(v72 + 48) = v75;
        *(_OWORD *)v72 = v73;
        *(_OWORD *)(v72 + 16) = v74;
        v76 = v104[4];
        v77 = v104[5];
        v78 = v104[7];
        *(_OWORD *)(v72 + 96) = v104[6];
        *(_OWORD *)(v72 + 112) = v78;
        *(_OWORD *)(v72 + 64) = v76;
        *(_OWORD *)(v72 + 80) = v77;
        *(_DWORD *)(v72 + 128) = v105;
        *(_QWORD *)(v72 + 136) = 0;
        *(_QWORD *)(v72 + 144) = 0;
        *(_QWORD *)(v72 + 152) = 0;
        v4 = __p;
        *(int8x16_t *)(v72 + 136) = __p;
        *(_QWORD *)(v72 + 152) = v107;
        __p = 0uLL;
        v107 = 0;
        *(_BYTE *)(v72 + 160) = 0;
        *(_BYTE *)(v72 + 184) = 0;
        if (v110)
        {
          *(_QWORD *)(v72 + 160) = 0;
          *(_QWORD *)(v72 + 168) = 0;
          *(_QWORD *)(v72 + 176) = 0;
          v4 = v108;
          *(int8x16_t *)(v72 + 160) = v108;
          *(_QWORD *)(v72 + 176) = v109;
          v108 = 0uLL;
          v109 = 0;
          *(_BYTE *)(v72 + 184) = 1;
        }
        *(_BYTE *)(v72 + 192) = v111;
        v79 = (char *)(v72 + 200);
      }
      *((_QWORD *)&v102 + 1) = v79;
      if (v110 && v108.i64[0])
      {
        v108.i64[1] = v108.i64[0];
        operator delete((void *)v108.i64[0]);
      }
      v80 = __p.i64[0];
      if (__p.i64[0])
      {
        v81 = __p.i64[1];
        v7 = (void *)__p.i64[0];
        if (__p.i64[1] != __p.i64[0])
        {
          v82 = __p.i64[1];
          do
          {
            v84 = *(void **)(v82 - 24);
            v82 -= 24;
            v83 = v84;
            if (v84)
            {
              *(_QWORD *)(v81 - 16) = v83;
              operator delete(v83);
            }
            v81 = v82;
          }
          while (v82 != v80);
          v7 = (void *)__p.i64[0];
        }
        __p.i64[1] = v80;
        operator delete(v7);
      }
      v6 = v89 + 56;
    }
    while (v89 + 56 != v88);
  }
  *(_OWORD *)a2 = v102;
  *(_QWORD *)(a2 + 16) = v103;
  v103 = 0;
  v102 = 0uLL;
  *(_QWORD *)&v104[0] = &v102;
  sub_223F3A870((void ***)v104);
}

void sub_223F7151C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void **a44)
{
  sub_223F3A870(&a44);
  _Unwind_Resume(a1);
}

void sub_223F71534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;
  uint64_t v42;
  void *v44;

  v44 = *(void **)(v42 - 240);
  if (v44)
  {
    *(_QWORD *)(v42 - 232) = v44;
    operator delete(v44);
  }
  if (v41)
    operator delete(v41);
  *(_QWORD *)(v42 - 216) = &a41;
  sub_223F3A870((void ***)(v42 - 216));
  _Unwind_Resume(a1);
}

void sub_223F71678(unsigned __int8 **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  int v14;
  uint64_t v15;
  float *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  float *v21;
  int v22;
  unsigned __int8 *v23;
  unint64_t v24;
  float v25;
  unint64_t v26;
  float v27;
  uint64_t v28;
  unint64_t v29;
  float v30;
  unint64_t v31;
  float v32;
  int8x16_t *v33;
  uint64_t v34;
  int8x16_t *v35;
  float v36;
  unsigned __int8 *v37;
  float64x2_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  int8x16_t *v54;
  char *v55;
  int8x16_t *v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  uint64_t v61;
  BOOL v62;
  float64_t v63;
  _BOOL8 v64;
  unint64_t v65;
  uint64_t v66;
  int8x16_t *v67;
  char *v68;
  int64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *i8;
  char *v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  uint64_t v79;
  unint64_t v80;
  float v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *__p;
  char *v96;
  char *v97;
  __int128 v98;
  char v99;
  char v100;
  size_t v101;
  void *v102;
  uint64_t v103;
  __int32 v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  int8x16_t *v111;
  int8x16_t *v112;
  int8x16_t *v113;
  char *v114;
  char *v115;
  char *v116;

  v6 = *((_DWORD *)a1 + 2);
  if (v6 != *(_DWORD *)(a2 + 8) || (v7 = *((_DWORD *)a1 + 3), v7 != *(_DWORD *)(a2 + 12)))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/SurfaceDetectorImpl.cpp", 87, (uint64_t)"labelAndNormals.image().Shape() == probabilitiesImage.Shape()", 61, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *((_DWORD *)a1 + 2);
    v7 = *((_DWORD *)a1 + 3);
  }
  v8 = (unint64_t)a1[3];
  v9 = *a1;
  v10 = *((unsigned int *)a1 + 4);
  v11 = *((unsigned int *)a1 + 5);
  v114 = 0;
  v115 = 0;
  v116 = 0;
  v82 = a3;
  if (v8)
  {
    if (v8 >> 61)
      sub_22367C394();
    v12 = (char *)operator new(8 * v8);
    v114 = v12;
    v116 = &v12[8 * v8];
    bzero(v12, 8 * v8);
    v115 = v116;
    v13 = operator new(4 * v8);
    bzero(v13, 4 * v8);
    if (!v6)
      goto LABEL_28;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    if (!v6)
      goto LABEL_28;
  }
  if (!v7)
    goto LABEL_28;
  v14 = v6 - 1;
  v15 = *(unsigned int *)(a2 + 16);
  v16 = *(float **)a2;
  v17 = v7 - 1;
  if (v7 == 1)
    goto LABEL_21;
  v18 = *(unsigned int *)(a2 + 20);
  if (v6 != 1)
  {
    v19 = 0;
    v20 = 4 * v18;
    do
    {
      v21 = v16;
      v22 = v6 - 1;
      v23 = v9;
      do
      {
        v24 = *v23;
        if (v8 > v24)
        {
          v25 = *v21;
          ++*(_QWORD *)&v12[8 * v24];
          *((float *)v13 + v24) = v25 + *((float *)v13 + v24);
        }
        v23 += v10;
        v21 += v15;
        --v22;
      }
      while (v22);
      v26 = *v23;
      if (v8 > v26)
      {
        v27 = *v21;
        ++*(_QWORD *)&v12[8 * v26];
        *((float *)v13 + v26) = v27 + *((float *)v13 + v26);
      }
      v9 += v11;
      v16 = (float *)((char *)v16 + v20);
      ++v19;
    }
    while (v19 != v17);
LABEL_21:
    if (v6 != 1)
    {
      v28 = 4 * v15;
      do
      {
        v29 = *v9;
        if (v8 > v29)
        {
          v30 = *v16;
          ++*(_QWORD *)&v12[8 * v29];
          *((float *)v13 + v29) = v30 + *((float *)v13 + v29);
        }
        v9 += v10;
        v16 = (float *)((char *)v16 + v28);
        --v14;
      }
      while (v14);
    }
    goto LABEL_26;
  }
  do
  {
    v80 = *v9;
    if (v8 > v80)
    {
      v81 = *v16;
      ++*(_QWORD *)&v12[8 * v80];
      *((float *)v13 + v80) = v81 + *((float *)v13 + v80);
    }
    v9 += v11;
    v16 += v18;
    --v17;
  }
  while (v17);
LABEL_26:
  v31 = *v9;
  if (v8 > v31)
  {
    v32 = *v16;
    ++*(_QWORD *)&v12[8 * v31];
    *((float *)v13 + v31) = v32 + *((float *)v13 + v31);
    v111 = 0;
    v112 = 0;
    v113 = 0;
LABEL_29:
    if (v8 > 0x249249249249249)
      sub_22316E078();
    v33 = (int8x16_t *)operator new(112 * v8);
    v34 = 0;
    v111 = v33;
    v112 = v33;
    v113 = &v33[7 * v8];
    v35 = v33;
    while (1)
    {
      while (1)
      {
        v36 = *((float *)v13 + v34) / (float)*(unint64_t *)&v12[8 * v34];
        v105.f64[0] = (float)((float)(1.0 - v36) / 11.0);
        v105.f64[1] = v105.f64[0];
        v106.f64[0] = v105.f64[0];
        v106.f64[1] = v105.f64[0];
        v107.f64[0] = v105.f64[0];
        v107.f64[1] = v105.f64[0];
        v108.f64[0] = v105.f64[0];
        v108.f64[1] = v105.f64[0];
        v109.f64[0] = v105.f64[0];
        v109.f64[1] = v105.f64[0];
        v110.f64[0] = v105.f64[0];
        v110.f64[1] = v105.f64[0];
        v37 = &a1[4][16 * v34];
        v105.f64[*v37] = v36;
        v38 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v105.f64[0]+ v105.f64[1]+ v106.f64[0]+ v106.f64[1]+ v107.f64[0]+ v107.f64[1]+ v108.f64[0]+ v108.f64[1]+ v109.f64[0]+ v109.f64[1]+ v110.f64[0]+ v110.f64[1]), 0);
        v39 = (int8x16_t)vdivq_f64(v110, v38);
        v40 = (int8x16_t)vdivq_f64(v109, v38);
        v41 = (int8x16_t)vdivq_f64(v108, v38);
        v42 = (int8x16_t)vdivq_f64(v107, v38);
        v43 = (int8x16_t)vdivq_f64(v106, v38);
        v44 = (int8x16_t)vdivq_f64(v105, v38);
        v45 = vextq_s8(v39, v39, 8uLL).u64[0];
        v46 = vextq_s8(v40, v40, 8uLL).u64[0];
        v47 = vextq_s8(v41, v41, 8uLL).u64[0];
        v48 = vextq_s8(v42, v42, 8uLL).u64[0];
        v49 = vextq_s8(v43, v43, 8uLL).u64[0];
        v50 = vextq_s8(v44, v44, 8uLL).u64[0];
        v103 = *(_QWORD *)(v37 + 4);
        v104 = *((_DWORD *)v37 + 3);
        if (v35 >= v113)
          break;
        v44.i64[1] = v50;
        v43.i64[1] = v49;
        *v35 = v44;
        v35[1] = v43;
        v42.i64[1] = v48;
        v41.i64[1] = v47;
        v35[2] = v42;
        v35[3] = v41;
        v40.i64[1] = v46;
        v39.i64[1] = v45;
        v35[4] = v40;
        v35[5] = v39;
        v35[6].i64[0] = v103;
        v35[6].i32[2] = v104;
        v112 = v35 + 7;
        ++v34;
        v35 += 7;
        if (v34 == v8)
          goto LABEL_50;
      }
      v51 = 0x6DB6DB6DB6DB6DB7 * (v35 - v33) + 1;
      if (v51 > 0x249249249249249)
        sub_22316E078();
      if (0xDB6DB6DB6DB6DB6ELL * (v113 - v33) > v51)
        v51 = 0xDB6DB6DB6DB6DB6ELL * (v113 - v33);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v113 - v33)) >= 0x124924924924924)
        v52 = 0x249249249249249;
      else
        v52 = v51;
      if (v52)
      {
        v83 = v50;
        v84 = v49;
        v85 = v44.i64[0];
        v86 = v48;
        v87 = v43.i64[0];
        v88 = v47;
        v89 = v42.i64[0];
        v90 = v46;
        v91 = v41.i64[0];
        v92 = v45;
        v93 = v40.i64[0];
        v94 = v39.i64[0];
        if (v52 > 0x249249249249249)
          sub_223174E94();
        v53 = (char *)operator new(112 * v52);
        v40.i64[0] = v93;
        v39.i64[0] = v94;
        v41.i64[0] = v91;
        v45 = v92;
        v42.i64[0] = v89;
        v46 = v90;
        v43.i64[0] = v87;
        v47 = v88;
        v44.i64[0] = v85;
        v48 = v86;
        v50 = v83;
        v49 = v84;
      }
      else
      {
        v53 = 0;
      }
      v54 = (int8x16_t *)&v53[16 * (v35 - v33)];
      v55 = &v53[112 * v52];
      v44.i64[1] = v50;
      v43.i64[1] = v49;
      *v54 = v44;
      v54[1] = v43;
      v42.i64[1] = v48;
      v41.i64[1] = v47;
      v54[2] = v42;
      v54[3] = v41;
      v40.i64[1] = v46;
      v39.i64[1] = v45;
      v54[4] = v40;
      v54[5] = v39;
      v54[6].i64[0] = v103;
      v54[6].i32[2] = v104;
      v56 = v54 + 7;
      if (v35 == v33)
      {
        v111 = (int8x16_t *)&v53[16 * (v35 - v33)];
        v113 = (int8x16_t *)v55;
      }
      else
      {
        do
        {
          v57 = v35[-6];
          v54[-7] = v35[-7];
          v54[-6] = v57;
          v58 = v35[-5];
          v59 = v35[-4];
          v60 = v35[-2];
          v54[-3] = v35[-3];
          v54[-2] = v60;
          v54[-5] = v58;
          v54[-4] = v59;
          v61 = v35[-1].i64[0];
          v54[-1].i32[2] = v35[-1].i32[2];
          v54[-1].i64[0] = v61;
          v54 -= 7;
          v35 -= 7;
        }
        while (v35 != v33);
        v111 = v54;
        v113 = (int8x16_t *)v55;
        if (!v33)
          goto LABEL_49;
      }
      operator delete(v33);
LABEL_49:
      v33 = v54;
      v112 = v56;
      ++v34;
      v35 = v56;
      if (v34 == v8)
        goto LABEL_50;
    }
  }
LABEL_28:
  v111 = 0;
  v112 = 0;
  v113 = 0;
  if (v8)
    goto LABEL_29;
LABEL_50:
  v105 = *(float64x2_t *)a1;
  *(_QWORD *)&v106.f64[0] = a1[2];
  if (HIDWORD(v105.f64[1]))
    v62 = LODWORD(v105.f64[1]) == 0;
  else
    v62 = 1;
  v63 = v105.f64[1];
  if (v62)
    v63 = 0.0;
  v64 = LODWORD(v63) != 0;
  v65 = *(_QWORD *)&v63 << 32;
  if (!HIDWORD(*(_QWORD *)&v63))
    v65 = 0;
  *(float64_t *)&v98 = v63;
  *((_QWORD *)&v98 + 1) = v65 | v64;
  v99 = 0;
  v100 = 0;
  v103 = v65 | v64;
  if ((HIDWORD(v65) & (HIDWORD(v65) - 1)) != 0)
    v66 = 1;
  else
    v66 = HIDWORD(v65);
  sub_223F4A7B4(&v101, (size_t)&v105, (void **)&v103, 1, v66);
  v96 = 0;
  v97 = 0;
  __p = 0;
  v67 = v111;
  v68 = (char *)v112;
  v69 = (char *)v112 - (char *)v111;
  if (v112 != v111)
  {
    v70 = 0x6DB6DB6DB6DB6DB7 * (v69 >> 4);
    if (v70 > 0x249249249249249)
      sub_22316E078();
    v71 = (char *)operator new(v69);
    v72 = 0;
    __p = v71;
    v97 = &v71[112 * v70];
    do
    {
      i8 = v67[v72].i8;
      v74 = &v71[v72 * 16];
      v75 = v67[v72 + 1];
      *(int8x16_t *)v74 = v67[v72];
      *((int8x16_t *)v74 + 1) = v75;
      v76 = v67[v72 + 2];
      v77 = v67[v72 + 3];
      v78 = v67[v72 + 5];
      *((int8x16_t *)v74 + 4) = v67[v72 + 4];
      *((int8x16_t *)v74 + 5) = v78;
      *((int8x16_t *)v74 + 2) = v76;
      *((int8x16_t *)v74 + 3) = v77;
      v79 = v67[v72 + 6].i64[0];
      *((_DWORD *)v74 + 26) = v67[v72 + 6].i32[2];
      *((_QWORD *)v74 + 12) = v79;
      v72 += 7;
    }
    while (i8 + 112 != v68);
    v96 = &v71[v72 * 16];
  }
  sub_223F5C3B0(v82, &v98, (uint64_t)&__p);
  if (__p)
  {
    v96 = (char *)__p;
    operator delete(__p);
  }
  if (v102)
    free(v102);
  v102 = 0;
  if (v111)
  {
    v112 = v111;
    operator delete(v111);
  }
  if (v13)
    operator delete(v13);
  if (v12)
    operator delete(v12);
}

void sub_223F71E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  void *v43;

  operator delete(v43);
  _Unwind_Resume(a1);
}

void sub_223F71EDC(uint64_t *a1@<X0>, char a2@<W1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  float v38;
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  _OWORD *v76;
  __int128 *v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  char v86;
  uint64_t v87;
  _OWORD *v89;
  __int128 v90;
  uint64_t v91;
  _BYTE v92[12];
  float v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  uint64_t v98;
  char v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  char v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  __int128 v116;
  __int128 v117;
  char v118;
  __int128 v119;
  uint64_t v120;
  char v121;
  __int128 v122;
  char *v123;
  char v124;
  __int128 v125;
  uint64_t v126;
  char v127;
  __int16 v128;
  uint64_t v129;

  v129 = *MEMORY[0x24BDAC8D0];
  v11 = *a1;
  v10 = a1[1];
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)a6 = 0;
  v83 = a6;
  sub_22365835C((char **)a6, (v10 - v11) >> 4);
  v12 = *a1;
  v87 = a1[1];
  if (*a1 != v87)
  {
    v84 = a5;
    v86 = a2;
    while (1)
    {
      v14 = *(_OWORD **)v12;
      v13 = *(_QWORD *)(v12 + 8);
      v93 = 1.0;
      v99 = 0;
      v106 = 0;
      *((_QWORD *)&v107 + 1) = 0;
      LOBYTE(v108) = 0;
      DWORD2(v108) = 0;
      LOBYTE(v109) = 0;
      LOBYTE(v110) = 0;
      v115 = 0;
      LOBYTE(v116) = 0;
      v118 = 0;
      LOBYTE(v119) = 0;
      v121 = 0;
      LOBYTE(v122) = 0;
      v124 = 0;
      LOBYTE(v125) = 0;
      v127 = 0;
      v128 = 0;
      v111 = 0uLL;
      LOBYTE(v113) = 0;
      v112 = 0;
      *(_DWORD *)&v92[8] = 0;
      v91 = 0;
      *(_QWORD *)v92 = 0;
      v90 = *v14;
      v15 = *(float64x2_t *)(v13 + 16);
      v17 = *(float64x2_t *)(v13 + 32);
      v16 = *(float64x2_t *)(v13 + 48);
      v19 = *(float64x2_t *)(v13 + 64);
      v18 = *(float64x2_t *)(v13 + 80);
      v21 = *(float64x2_t *)(v13 + 96);
      v20 = *(float64x2_t *)(v13 + 112);
      v23 = *(float64x2_t *)(v13 + 128);
      v22 = *(float64x2_t *)(v13 + 144);
      v25 = *(float64x2_t *)(v13 + 160);
      v24 = *(float64x2_t *)(v13 + 176);
      v27 = *(float64x2_t *)(v13 + 192);
      v26 = *(float64x2_t *)(v13 + 208);
      v29 = *(float64x2_t *)(v13 + 224);
      v28 = *(float64x2_t *)(v13 + 240);
      v30 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v13, v23.f64[0]), v17, v23, 1), v19, v22.f64[0]), v21, v22, 1);
      v31 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15, v23.f64[0]), v16, v23, 1), v18, v22.f64[0]), v20, v22, 1);
      v32 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v13, v25.f64[0]), v17, v25, 1), v19, v24.f64[0]), v21, v24, 1);
      v33 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15, v25.f64[0]), v16, v25, 1), v18, v24.f64[0]), v20, v24, 1);
      v34 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v13, v27.f64[0]), v17, v27, 1), v19, v26.f64[0]), v21, v26, 1);
      v35 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v13, v29.f64[0]), v17, v29, 1), v19, v28.f64[0]), v21, v28, 1);
      v94 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v30), v31);
      v95 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v32), v33);
      v96 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v34), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15, v27.f64[0]), v16, v27, 1), v18, v26.f64[0]), v20, v26, 1));
      v97 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v35), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15, v29.f64[0]), v16, v29, 1), v18, v28.f64[0]), v20, v28, 1));
      v91 = v97.i64[0];
      *(_DWORD *)v92 = v97.i32[2];
      *(_QWORD *)&v92[4] = v96.i64[0];
      v93 = v96.f32[2];
      v36 = atomic_load((unsigned __int8 *)&qword_25578F140);
      if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_25578F140))
      {
        dword_25578F138 = 1065098332;
        __cxa_guard_release(&qword_25578F140);
      }
      v37 = atomic_load((unsigned __int8 *)&qword_25578F150);
      if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_25578F150))
      {
        dword_25578F148 = 1043452119;
        __cxa_guard_release(&qword_25578F150);
      }
      v38 = fabsf(v93);
      if (v38 <= *(float *)&dword_25578F148)
        v39 = 2;
      else
        v39 = 4;
      if (v38 >= *(float *)&dword_25578F138)
        v39 = 1;
      LOBYTE(v98) = v39;
      HIDWORD(v98) = *(_DWORD *)(v13 + 256);
      if (v106 == *(_BYTE *)(v13 + 368))
        break;
      if (v106)
      {
        v106 = 0;
LABEL_18:
        if ((a2 & 1) == 0)
          goto LABEL_14;
        goto LABEL_19;
      }
      v99 = *(_BYTE *)(v13 + 264);
      v43 = *(_OWORD *)(v13 + 320);
      v102 = *(_OWORD *)(v13 + 304);
      v103 = v43;
      v44 = *(_OWORD *)(v13 + 352);
      v104 = *(_OWORD *)(v13 + 336);
      v105 = v44;
      v45 = *(_OWORD *)(v13 + 288);
      v100 = *(_OWORD *)(v13 + 272);
      v101 = v45;
      v106 = 1;
      if ((a2 & 1) == 0)
      {
LABEL_14:
        if ((a2 & 2) == 0)
          goto LABEL_26;
        goto LABEL_25;
      }
LABEL_19:
      v113 = *(_QWORD *)(v13 + 376);
      if (v115)
      {
        v114 = *(_QWORD *)(v13 + 384);
        if ((a2 & 2) == 0)
          goto LABEL_26;
      }
      else
      {
        v115 = 1;
        v114 = *(_QWORD *)(v13 + 384);
        if ((a2 & 2) == 0)
          goto LABEL_26;
      }
LABEL_25:
      v116 = *(_OWORD *)(v13 + 392);
      v117 = *(_OWORD *)(v13 + 408);
      if (v118)
      {
LABEL_26:
        if ((a2 & 4) == 0)
          goto LABEL_28;
LABEL_27:
        sub_2236AB0C4((uint64_t)&v119, (char **)(v13 + 424));
        goto LABEL_28;
      }
      v118 = 1;
      if ((a2 & 4) != 0)
        goto LABEL_27;
LABEL_28:
      if ((a2 & 8) == 0)
        goto LABEL_32;
      if (v124)
      {
        if (&v122 != (__int128 *)(v13 + 448))
          sub_22333251C((char **)&v122, *(_QWORD *)(v13 + 448), *(char **)(v13 + 456), (uint64_t)(*(_QWORD *)(v13 + 456) - *(_QWORD *)(v13 + 448)) >> 4);
LABEL_32:
        if (&v111 != (__int128 *)(v13 + 480))
          goto LABEL_33;
        goto LABEL_34;
      }
      v122 = 0uLL;
      v123 = 0;
      v68 = *(char **)(v13 + 448);
      v67 = *(char **)(v13 + 456);
      v69 = v67 - v68;
      if (v67 != v68)
      {
        if (v69 < 0)
          sub_22324A284();
        v70 = (char *)operator new(v67 - v68);
        *(_QWORD *)&v122 = v70;
        *((_QWORD *)&v122 + 1) = v70;
        v123 = &v70[16 * (v69 >> 4)];
        v71 = v69 - 16;
        if ((unint64_t)(v69 - 16) < 0x70
          || v70 < &v68[(v71 & 0xFFFFFFFFFFFFFFF0) + 16] && v68 < &v70[(v71 & 0xFFFFFFFFFFFFFFF0) + 16])
        {
          goto LABEL_92;
        }
        v72 = (v71 >> 4) + 1;
        v73 = 16 * (v72 & 0x1FFFFFFFFFFFFFFCLL);
        v74 = &v68[v73];
        v75 = &v70[v73];
        v76 = v70 + 32;
        v77 = (__int128 *)(v68 + 32);
        v78 = v72 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v80 = *(v77 - 2);
          v79 = *(v77 - 1);
          v82 = *v77;
          v81 = v77[1];
          v77 += 4;
          *(v76 - 2) = v80;
          *(v76 - 1) = v79;
          *v76 = v82;
          v76[1] = v81;
          v76 += 4;
          v78 -= 4;
        }
        while (v78);
        v68 = v74;
        v70 = v75;
        if (v72 != (v72 & 0x1FFFFFFFFFFFFFFCLL))
        {
LABEL_92:
          do
          {
            *(_QWORD *)v70 = *(_QWORD *)v68;
            *((_QWORD *)v70 + 1) = *((_QWORD *)v68 + 1);
            v70 += 16;
            v68 += 16;
          }
          while (v68 != v67);
          v75 = v70;
        }
        *((_QWORD *)&v122 + 1) = v75;
      }
      v124 = 1;
      a6 = v83;
      a5 = v84;
      if (&v111 != (__int128 *)(v13 + 480))
LABEL_33:
        sub_2231984D0(&v111, *(char **)(v13 + 480), *(char **)(v13 + 488), (uint64_t)(*(_QWORD *)(v13 + 488) - *(_QWORD *)(v13 + 480)) >> 4);
LABEL_34:
      v89 = v14;
      v46 = sub_2238F1DD0(a5, (uint64_t)v14, (uint64_t)&unk_2245BA939, &v89);
      if ((a3 & 1) != 0 || *(_DWORD *)(v13 + 476) == a4)
      {
        *((_DWORD *)v46 + 8) = 0;
        LODWORD(v107) = 0;
        v47 = *(_QWORD *)(a6 + 8);
        if (v47 < *(_QWORD *)(a6 + 16))
          goto LABEL_37;
      }
      else
      {
        v60 = *((_DWORD *)v46 + 8) + 1;
        *((_DWORD *)v46 + 8) = v60;
        LODWORD(v107) = v60;
        v47 = *(_QWORD *)(a6 + 8);
        if (v47 < *(_QWORD *)(a6 + 16))
        {
LABEL_37:
          *(_OWORD *)v47 = v90;
          v48 = v91;
          *(_DWORD *)(v47 + 24) = *(_DWORD *)v92;
          *(_QWORD *)(v47 + 16) = v48;
          v49 = *(_QWORD *)&v92[4];
          *(float *)(v47 + 36) = v93;
          *(_QWORD *)(v47 + 28) = v49;
          v50 = v94;
          v51 = v95;
          v52 = v96;
          *(float32x4_t *)(v47 + 88) = v97;
          *(float32x4_t *)(v47 + 72) = v52;
          *(float32x4_t *)(v47 + 56) = v51;
          *(float32x4_t *)(v47 + 40) = v50;
          *(_QWORD *)(v47 + 104) = v98;
          *(_BYTE *)(v47 + 112) = 0;
          *(_BYTE *)(v47 + 216) = 0;
          if (v106)
          {
            *(_BYTE *)(v47 + 112) = v99;
            v53 = v100;
            *(_OWORD *)(v47 + 136) = v101;
            *(_OWORD *)(v47 + 120) = v53;
            v54 = v102;
            v55 = v103;
            v56 = v104;
            *(_OWORD *)(v47 + 200) = v105;
            *(_OWORD *)(v47 + 184) = v56;
            *(_OWORD *)(v47 + 168) = v55;
            *(_OWORD *)(v47 + 152) = v54;
            *(_BYTE *)(v47 + 216) = 1;
          }
          v57 = v107;
          v58 = v108;
          v59 = v109;
          *(_QWORD *)(v47 + 272) = v110;
          *(_OWORD *)(v47 + 240) = v58;
          *(_OWORD *)(v47 + 256) = v59;
          *(_OWORD *)(v47 + 224) = v57;
          *(_QWORD *)(v47 + 288) = 0;
          *(_QWORD *)(v47 + 296) = 0;
          *(_QWORD *)(v47 + 280) = 0;
          *(_OWORD *)(v47 + 280) = v111;
          *(_QWORD *)(v47 + 296) = v112;
          v111 = 0uLL;
          v112 = 0;
          *(_BYTE *)(v47 + 304) = 0;
          *(_BYTE *)(v47 + 320) = 0;
          if (v115)
          {
            *(_QWORD *)(v47 + 304) = v113;
            *(_QWORD *)(v47 + 312) = v114;
            *(_BYTE *)(v47 + 320) = 1;
          }
          *(_BYTE *)(v47 + 324) = 0;
          *(_BYTE *)(v47 + 356) = 0;
          if (v118)
          {
            *(_OWORD *)(v47 + 324) = v116;
            *(_OWORD *)(v47 + 340) = v117;
            *(_BYTE *)(v47 + 356) = 1;
          }
          *(_BYTE *)(v47 + 360) = 0;
          *(_BYTE *)(v47 + 384) = 0;
          if (v121)
          {
            *(_QWORD *)(v47 + 360) = 0;
            *(_QWORD *)(v47 + 368) = 0;
            *(_QWORD *)(v47 + 376) = 0;
            *(_OWORD *)(v47 + 360) = v119;
            *(_QWORD *)(v47 + 376) = v120;
            v119 = 0uLL;
            v120 = 0;
            *(_BYTE *)(v47 + 384) = 1;
          }
          *(_BYTE *)(v47 + 392) = 0;
          *(_BYTE *)(v47 + 416) = 0;
          if (v124)
          {
            *(_QWORD *)(v47 + 392) = 0;
            *(_QWORD *)(v47 + 400) = 0;
            *(_QWORD *)(v47 + 408) = 0;
            *(_OWORD *)(v47 + 392) = v122;
            *(_QWORD *)(v47 + 408) = v123;
            v122 = 0uLL;
            v123 = 0;
            *(_BYTE *)(v47 + 416) = 1;
          }
          *(_BYTE *)(v47 + 424) = 0;
          *(_BYTE *)(v47 + 448) = 0;
          if (v127)
          {
            *(_QWORD *)(v47 + 424) = 0;
            *(_QWORD *)(v47 + 432) = 0;
            *(_QWORD *)(v47 + 440) = 0;
            *(_OWORD *)(v47 + 424) = v125;
            *(_QWORD *)(v47 + 440) = v126;
            v125 = 0uLL;
            v126 = 0;
            *(_BYTE *)(v47 + 448) = 1;
          }
          *(_WORD *)(v47 + 456) = v128;
          *(_QWORD *)(a6 + 8) = v47 + 464;
          if (!v127)
            goto LABEL_61;
LABEL_53:
          v61 = v125;
          if ((_QWORD)v125)
          {
            v62 = *((_QWORD *)&v125 + 1);
            v63 = (void *)v125;
            if (*((_QWORD *)&v125 + 1) != (_QWORD)v125)
            {
              v64 = *((_QWORD *)&v125 + 1);
              do
              {
                v66 = *(void **)(v64 - 24);
                v64 -= 24;
                v65 = v66;
                if (v66)
                {
                  *(_QWORD *)(v62 - 16) = v65;
                  operator delete(v65);
                }
                v62 = v64;
              }
              while (v64 != v61);
              v63 = (void *)v125;
              a5 = v84;
            }
            *((_QWORD *)&v125 + 1) = v61;
            operator delete(v63);
          }
          goto LABEL_61;
        }
      }
      *(_QWORD *)(a6 + 8) = sub_22365849C((_QWORD *)a6, (uint64_t)&v90);
      if (v127)
        goto LABEL_53;
LABEL_61:
      if (v124 && (_QWORD)v122)
      {
        *((_QWORD *)&v122 + 1) = v122;
        operator delete((void *)v122);
      }
      a2 = v86;
      if (v121 && (_QWORD)v119)
      {
        *((_QWORD *)&v119 + 1) = v119;
        operator delete((void *)v119);
      }
      if ((_QWORD)v111)
      {
        *((_QWORD *)&v111 + 1) = v111;
        operator delete((void *)v111);
      }
      v12 += 16;
      if (v12 == v87)
        return;
    }
    if (v106)
    {
      v99 = *(_BYTE *)(v13 + 264);
      v40 = *(_OWORD *)(v13 + 320);
      v102 = *(_OWORD *)(v13 + 304);
      v103 = v40;
      v41 = *(_OWORD *)(v13 + 352);
      v104 = *(_OWORD *)(v13 + 336);
      v105 = v41;
      v42 = *(_OWORD *)(v13 + 288);
      v100 = *(_OWORD *)(v13 + 272);
      v101 = v42;
      if ((a2 & 1) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
    goto LABEL_18;
  }
}

void sub_223F72750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2)
  {
    sub_223248E48(a10);
    sub_22316DC48(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_223F727C4(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, float32x2_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int128 *a7@<X6>, _QWORD *a8@<X8>)
{
  __int128 *v8;
  unint64_t v9;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _QWORD *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  float64x2_t *v24;
  float64x2_t **v25;
  float64x2_t *v26;
  float64x2_t **v27;
  unsigned __int8 *v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t *v31;
  float64x2_t v32;
  float64x2_t v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 **v44;
  unsigned __int8 *v45;
  unsigned __int8 **v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  int v49;
  int v50;
  BOOL v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  _DWORD *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *i;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  size_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  _OWORD *v86;
  __int128 *v87;
  unint64_t v88;
  __int128 v89;
  char *v90;
  uint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  char v95;
  int v96;
  int v97;
  __int128 v98;
  void *v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  __int128 *v110;
  float32x4_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  uint64_t v117;
  _OWORD v118[2];
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;

  if (!*(_QWORD *)(a6 + 24) || (v8 = a7, (v9 = *((_QWORD *)a7 + 3)) == 0))
  {
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
    return;
  }
  if (v9 > 0x924924924924924)
    sub_22316E078();
  v117 = *((_QWORD *)a7 + 3);
  v11 = 28 * v9;
  v12 = (char *)operator new(28 * v9);
  v13 = 0;
  v14 = &v12[v11];
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v15 = v12;
  v110 = v8;
  do
  {
    v16 = *(_QWORD *)(a1 + 8);
    v19 = *(_QWORD *)(v16 + 8);
    v18 = (_QWORD *)(v16 + 8);
    v17 = v19;
    if (!v19)
      goto LABEL_140;
    v20 = (unsigned __int8 *)(*((_QWORD *)v8 + 4) + 16 * v13);
    while (1)
    {
      while (1)
      {
        v21 = (_QWORD *)v17;
        v22 = (unsigned __int8 *)(v17 + 32);
        if (((char)sub_22319835C(v20, (unsigned __int8 *)(v17 + 32)) & 0x80000000) == 0)
          break;
        v17 = *v21;
        v18 = v21;
        if (!*v21)
          goto LABEL_140;
      }
      if (((char)sub_22319835C(v22, v20) & 0x80000000) == 0)
        break;
      v17 = v21[1];
      v18 = v21 + 1;
      if (!v17)
        goto LABEL_140;
    }
    if (!*v18)
LABEL_140:
      sub_223198218("map::at:  key not found");
    if (!*(_BYTE *)(*v18 + 856))
    {
      if (v12 < v14)
        goto LABEL_5;
      v39 = 0x6DB6DB6DB6DB6DB7 * ((v12 - v15) >> 2) + 1;
      if (v39 > 0x924924924924924)
        sub_22316E078();
      if (0xDB6DB6DB6DB6DB6ELL * ((v14 - v15) >> 2) > v39)
        v39 = 0xDB6DB6DB6DB6DB6ELL * ((v14 - v15) >> 2);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v14 - v15) >> 2)) >= 0x492492492492492)
        v40 = 0x924924924924924;
      else
        v40 = v39;
      if (v40)
      {
        if (v40 > 0x924924924924924)
          sub_223174E94();
        v41 = (char *)operator new(28 * v40);
      }
      else
      {
        v41 = 0;
      }
      v75 = &v41[4 * ((v12 - v15) >> 2)];
      *((_QWORD *)v75 + 1) = 0;
      *((_QWORD *)v75 + 2) = 0;
      *(_QWORD *)v75 = 0;
      v14 = &v41[28 * v40];
      *(_QWORD *)(v75 + 20) = 1065353216;
      v76 = v75 + 28;
      if (v12 == v15)
        goto LABEL_110;
      do
      {
        v77 = *(_QWORD *)(v12 - 28);
        v12 -= 28;
        v78 = *((_DWORD *)v12 + 2);
        *(_QWORD *)(v75 - 28) = v77;
        v75 -= 28;
        *((_DWORD *)v75 + 2) = v78;
        v79 = *(_QWORD *)(v12 + 12);
        *((_DWORD *)v75 + 5) = *((_DWORD *)v12 + 5);
        *(_QWORD *)(v75 + 12) = v79;
        v75[24] = v12[24];
      }
      while (v12 != v15);
LABEL_108:
      if (!v15)
        goto LABEL_112;
      goto LABEL_111;
    }
    v23 = *(_QWORD *)(a1 + 8);
    v26 = *(float64x2_t **)(v23 + 8);
    v25 = (float64x2_t **)(v23 + 8);
    v24 = v26;
    if (!v26)
      goto LABEL_141;
    while (1)
    {
      while (1)
      {
        v27 = (float64x2_t **)v24;
        v28 = (unsigned __int8 *)&v24[2];
        if (((char)sub_22319835C(v20, (unsigned __int8 *)&v24[2]) & 0x80000000) == 0)
          break;
        v24 = *v27;
        v25 = v27;
        if (!*v27)
          goto LABEL_141;
      }
      if (((char)sub_22319835C(v28, v20) & 0x80000000) == 0)
        break;
      v24 = v27[1];
      v25 = v27 + 1;
      if (!v24)
        goto LABEL_141;
    }
    v31 = *v25;
    if (!*v25)
LABEL_141:
      sub_223198218("map::at:  key not found");
    v30.f64[0] = v31[10].f64[0];
    v32 = v31[9];
    v29.f64[0] = v31[8].f64[0];
    v33 = v31[7];
    v34 = atomic_load((unsigned __int8 *)&qword_25578F140);
    if ((v34 & 1) == 0)
    {
      v112 = v32;
      v115 = v30;
      v100 = v33;
      v102 = v29;
      v96 = __cxa_guard_acquire(&qword_25578F140);
      v33 = v100;
      v29 = v102;
      v32 = v112;
      v30 = v115;
      if (v96)
      {
        dword_25578F138 = 1065098332;
        __cxa_guard_release(&qword_25578F140);
        v33 = v100;
        v29 = v102;
        v32 = v112;
        v30 = v115;
      }
    }
    v35 = atomic_load((unsigned __int8 *)&qword_25578F150);
    if ((v35 & 1) == 0)
    {
      v113 = v32;
      v116 = v30;
      v101 = v33;
      v103 = v29;
      v97 = __cxa_guard_acquire(&qword_25578F150);
      v33 = v101;
      v29 = v103;
      v32 = v113;
      v30 = v116;
      if (v97)
      {
        dword_25578F148 = 1043452119;
        __cxa_guard_release(&qword_25578F150);
        v33 = v101;
        v29 = v103;
        v32 = v113;
        v30 = v116;
      }
    }
    v114 = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v33), v29);
    if (fabsf(*(float *)&v114.f64[1]) < *(float *)&dword_25578F138)
    {
      if (v12 < v14)
        goto LABEL_5;
      v36 = 0x6DB6DB6DB6DB6DB7 * ((v12 - v15) >> 2) + 1;
      if (v36 > 0x924924924924924)
        sub_22316E078();
      if (0xDB6DB6DB6DB6DB6ELL * ((v14 - v15) >> 2) > v36)
        v36 = 0xDB6DB6DB6DB6DB6ELL * ((v14 - v15) >> 2);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v14 - v15) >> 2)) >= 0x492492492492492)
        v37 = 0x924924924924924;
      else
        v37 = v36;
      if (v37)
      {
        if (v37 > 0x924924924924924)
          sub_223174E94();
        v38 = (char *)operator new(28 * v37);
      }
      else
      {
        v38 = 0;
      }
      v75 = &v38[4 * ((v12 - v15) >> 2)];
      *((_QWORD *)v75 + 1) = 0;
      *((_QWORD *)v75 + 2) = 0;
      *(_QWORD *)v75 = 0;
      v14 = &v38[28 * v37];
      *(_QWORD *)(v75 + 20) = 1065353216;
      v76 = v75 + 28;
      if (v12 != v15)
      {
        do
        {
          v80 = *(_QWORD *)(v12 - 28);
          v12 -= 28;
          v81 = *((_DWORD *)v12 + 2);
          *(_QWORD *)(v75 - 28) = v80;
          v75 -= 28;
          *((_DWORD *)v75 + 2) = v81;
          v82 = *(_QWORD *)(v12 + 12);
          *((_DWORD *)v75 + 5) = *((_DWORD *)v12 + 5);
          *(_QWORD *)(v75 + 12) = v82;
          v75[24] = v12[24];
        }
        while (v12 != v15);
        goto LABEL_108;
      }
LABEL_110:
      v15 = v12;
LABEL_111:
      operator delete(v15);
LABEL_112:
      v12 = v76;
      v15 = v75;
      goto LABEL_6;
    }
    v42 = *(_QWORD *)(a1 + 8);
    v45 = *(unsigned __int8 **)(v42 + 8);
    v44 = (unsigned __int8 **)(v42 + 8);
    v43 = v45;
    if (!v45)
      goto LABEL_142;
    v111 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v32), v30);
    while (1)
    {
      while (1)
      {
        v46 = (unsigned __int8 **)v43;
        v47 = v43 + 32;
        if (((char)sub_22319835C(v20, v43 + 32) & 0x80000000) == 0)
          break;
        v43 = *v46;
        v44 = v46;
        if (!*v46)
          goto LABEL_142;
      }
      if (((char)sub_22319835C(v47, v20) & 0x80000000) == 0)
        break;
      v43 = v46[1];
      v44 = v46 + 1;
      if (!v43)
        goto LABEL_142;
    }
    v48 = *v44;
    if (!*v44)
LABEL_142:
      sub_223198218("map::at:  key not found");
    if (!v48[856])
      sub_22324A974();
    v49 = v48[720];
    v50 = v48[616];
    if (v49)
      v51 = v50 == 2;
    else
      v51 = 0;
    if (!v51)
    {
      if (v12 < v14)
      {
LABEL_5:
        *((_QWORD *)v12 + 1) = 0;
        *((_QWORD *)v12 + 2) = 0;
        *(_QWORD *)v12 = 0;
        *(_QWORD *)(v12 + 20) = 1065353216;
        v12 += 28;
        goto LABEL_6;
      }
      v52 = 0x6DB6DB6DB6DB6DB7 * ((v12 - v15) >> 2) + 1;
      if (v52 > 0x924924924924924)
        sub_22316E078();
      if (0xDB6DB6DB6DB6DB6ELL * ((v14 - v15) >> 2) > v52)
        v52 = 0xDB6DB6DB6DB6DB6ELL * ((v14 - v15) >> 2);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v14 - v15) >> 2)) >= 0x492492492492492)
        v53 = 0x924924924924924;
      else
        v53 = v52;
      if (v53)
      {
        if (v53 > 0x924924924924924)
          sub_223174E94();
        v54 = (char *)operator new(28 * v53);
      }
      else
      {
        v54 = 0;
      }
      v75 = &v54[4 * ((v12 - v15) >> 2)];
      *((_QWORD *)v75 + 1) = 0;
      *((_QWORD *)v75 + 2) = 0;
      *(_QWORD *)v75 = 0;
      v14 = &v54[28 * v53];
      *(_QWORD *)(v75 + 20) = 1065353216;
      v76 = v75 + 28;
      if (v12 == v15)
        goto LABEL_110;
      do
      {
        v83 = *(_QWORD *)(v12 - 28);
        v12 -= 28;
        v84 = *((_DWORD *)v12 + 2);
        *(_QWORD *)(v75 - 28) = v83;
        v75 -= 28;
        *((_DWORD *)v75 + 2) = v84;
        v85 = *(_QWORD *)(v12 + 12);
        *((_DWORD *)v75 + 5) = *((_DWORD *)v12 + 5);
        *(_QWORD *)(v75 + 12) = v85;
        v75[24] = v12[24];
      }
      while (v12 != v15);
      goto LABEL_108;
    }
    if (v12 >= v14)
    {
      v59 = 0x6DB6DB6DB6DB6DB7 * ((v12 - v15) >> 2) + 1;
      if (v59 > 0x924924924924924)
        sub_22316E078();
      if (0xDB6DB6DB6DB6DB6ELL * ((v14 - v15) >> 2) > v59)
        v59 = 0xDB6DB6DB6DB6DB6ELL * ((v14 - v15) >> 2);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v14 - v15) >> 2)) >= 0x492492492492492)
        v60 = 0x924924924924924;
      else
        v60 = v59;
      if (v60 > 0x924924924924924)
        sub_223174E94();
      v61 = (char *)operator new(28 * v60);
      v62 = &v61[4 * ((v12 - v15) >> 2)];
      *(_QWORD *)v62 = v111.i64[0];
      *((_DWORD *)v62 + 2) = v111.i32[2];
      *(float64_t *)(v62 + 12) = v114.f64[0];
      *((_DWORD *)v62 + 5) = LODWORD(v114.f64[1]);
      v62[24] = 2;
      for (i = v62; v12 != v15; i[24] = v12[24])
      {
        v64 = *(_QWORD *)(v12 - 28);
        v12 -= 28;
        v65 = *((_DWORD *)v12 + 2);
        *(_QWORD *)(i - 28) = v64;
        i -= 28;
        *((_DWORD *)i + 2) = v65;
        v66 = *(_QWORD *)(v12 + 12);
        *((_DWORD *)i + 5) = *((_DWORD *)v12 + 5);
        *(_QWORD *)(i + 12) = v66;
      }
      v14 = &v61[28 * v60];
      v12 = v62 + 28;
      if (v15)
        operator delete(v15);
      v15 = i;
      v57 = v127;
      v56 = v128;
      if (v127 < v128)
      {
LABEL_72:
        *v57 = v13;
        v58 = (uint64_t)(v57 + 1);
        goto LABEL_116;
      }
    }
    else
    {
      *((_DWORD *)v12 + 2) = v111.i32[2];
      *(_QWORD *)v12 = v111.i64[0];
      v55 = v12 + 20;
      *(float64_t *)(v12 + 12) = v114.f64[0];
      v12[24] = 2;
      v12 += 28;
      *v55 = LODWORD(v114.f64[1]);
      v57 = v127;
      v56 = v128;
      if (v127 < v128)
        goto LABEL_72;
    }
    v67 = v126;
    v68 = (unint64_t)&v57[-v126];
    v69 = (uint64_t)&v57[-v126 + 1];
    if (v69 < 0)
      sub_22316E078();
    v70 = (unint64_t)&v56[-v126];
    if (2 * v70 > v69)
      v69 = 2 * v70;
    if (v70 >= 0x3FFFFFFFFFFFFFFFLL)
      v71 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v71 = v69;
    if (!v71)
    {
      v72 = 0;
      v73 = (uint64_t)&v57[-v126];
      *(_BYTE *)v68 = v13;
      v58 = v68 + 1;
      if (v57 == (char *)v67)
        goto LABEL_114;
LABEL_93:
      if (v68 < 8 || (unint64_t)(v67 - v72) < 0x20)
        goto LABEL_126;
      if (v68 >= 0x20)
      {
        v74 = v68 & 0xFFFFFFFFFFFFFFE0;
        v86 = (_OWORD *)(v72 + v68 - 16);
        v87 = (__int128 *)(v57 - 16);
        v88 = v68 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v89 = *v87;
          *(v86 - 1) = *(v87 - 1);
          *v86 = v89;
          v86 -= 2;
          v87 -= 2;
          v88 -= 32;
        }
        while (v88);
        if (v68 == v74)
        {
LABEL_128:
          v57 = (char *)v126;
          v126 = v72;
          v128 = (char *)(v72 + v71);
          if (!v57)
            goto LABEL_116;
LABEL_115:
          operator delete(v57);
          goto LABEL_116;
        }
        if ((v68 & 0x18) == 0)
        {
          v73 -= v74;
          v57 -= v74;
          goto LABEL_126;
        }
      }
      else
      {
        v74 = 0;
      }
      v73 -= v68 & 0xFFFFFFFFFFFFFFF8;
      v90 = &v57[-v74 - v67 - 8 + v72];
      v91 = (uint64_t *)&v57[-v74 - 8];
      v92 = v74 - (v68 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v93 = *v91--;
        *(_QWORD *)v90 = v93;
        v90 -= 8;
        v92 += 8;
      }
      while (v92);
      v57 -= v68 & 0xFFFFFFFFFFFFFFF8;
      if (v68 == (v68 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_128;
LABEL_126:
      v94 = (_BYTE *)(v73 - 1);
      do
      {
        v95 = *--v57;
        *v94-- = v95;
      }
      while (v57 != (char *)v67);
      goto LABEL_128;
    }
    v72 = (uint64_t)operator new(v71);
    v73 = v72 + v68;
    *(_BYTE *)(v72 + v68) = v13;
    v58 = v72 + v68 + 1;
    if (v57 != (char *)v67)
      goto LABEL_93;
LABEL_114:
    v126 = v73;
    v128 = (char *)(v72 + v71);
    if (v57)
      goto LABEL_115;
LABEL_116:
    v127 = (char *)v58;
    v8 = v110;
LABEL_6:
    ++v13;
  }
  while (v13 != v117);
  v122 = *v8;
  v123 = *((_QWORD *)v8 + 2);
  v124 = 0x6DB6DB6DB6DB6DB7 * ((v12 - v15) >> 2);
  v125 = v15;
  v120 = *(_OWORD *)a5;
  v121 = *(_QWORD *)(a5 + 16);
  v98 = *(_OWORD *)(a6 + 16);
  v118[0] = *(_OWORD *)a6;
  v118[1] = v98;
  v99 = (void *)v126;
  v119 = *(_QWORD *)(a6 + 32);
  sub_223F5745C(a2, (unsigned __int8 **)&v122, &v120, (unsigned __int8 **)v118, a3, a4, (unint64_t)&v127[-v126], v126, a8);
  if (v99)
    operator delete(v99);
  if (v15)
    operator delete(v15);
}

void sub_223F731DC(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)(v2 - 112);
  if (v4)
  {
    *(_QWORD *)(v2 - 104) = v4;
    operator delete(v4);
    if (!v1)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v1)
  {
    goto LABEL_3;
  }
  operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_223F73250(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;

  v2 = *(char **)a1;
  if (0x8F5C28F5C28F5C29 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0x147AE147AE147AFLL)
      sub_22316E078();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 200 * a2;
    v6 = (char *)operator new(200 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        v12 = *(_OWORD *)&v4[v9 - 200];
        v13 = *(_OWORD *)&v4[v9 - 184];
        v14 = *(_OWORD *)&v4[v9 - 168];
        *(_OWORD *)(v10 - 152) = *(_OWORD *)&v4[v9 - 152];
        *(_OWORD *)(v10 - 168) = v14;
        *(_OWORD *)(v10 - 184) = v13;
        *(_OWORD *)(v10 - 200) = v12;
        v15 = *(_OWORD *)&v4[v9 - 136];
        v16 = *(_OWORD *)&v4[v9 - 120];
        v17 = *(_OWORD *)&v4[v9 - 104];
        *(_OWORD *)(v10 - 88) = *(_OWORD *)&v4[v9 - 88];
        *(_OWORD *)(v10 - 104) = v17;
        *(_OWORD *)(v10 - 120) = v16;
        *(_OWORD *)(v10 - 136) = v15;
        *((_DWORD *)v10 - 18) = *(_DWORD *)&v4[v9 - 72];
        *((_OWORD *)v10 - 4) = *(_OWORD *)&v4[v9 - 64];
        *((_QWORD *)v10 - 6) = *(_QWORD *)&v4[v9 - 48];
        *((_QWORD *)v11 - 8) = 0;
        *((_QWORD *)v11 - 7) = 0;
        *((_QWORD *)v11 - 6) = 0;
        *(v10 - 40) = 0;
        *(v10 - 16) = 0;
        if (v4[v9 - 16])
        {
          *(_OWORD *)(v10 - 40) = *(_OWORD *)(v11 - 40);
          *((_QWORD *)v10 - 3) = *((_QWORD *)v11 - 3);
          *((_QWORD *)v11 - 5) = 0;
          *((_QWORD *)v11 - 4) = 0;
          *((_QWORD *)v11 - 3) = 0;
          *(v10 - 16) = 1;
        }
        *(v10 - 8) = *(v11 - 8);
        v9 -= 200;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v18 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v18 != v2)
      {
        if (*(v18 - 16))
        {
          v20 = (void *)*((_QWORD *)v18 - 5);
          if (v20)
          {
            *((_QWORD *)v18 - 4) = v20;
            operator delete(v20);
          }
        }
        v21 = *((_QWORD *)v18 - 8);
        if (v21)
        {
          v22 = *((_QWORD *)v18 - 7);
          v19 = (void *)*((_QWORD *)v18 - 8);
          if (v22 != v21)
          {
            v23 = *((_QWORD *)v18 - 7);
            do
            {
              v25 = *(void **)(v23 - 24);
              v23 -= 24;
              v24 = v25;
              if (v25)
              {
                *(_QWORD *)(v22 - 16) = v24;
                operator delete(v24);
              }
              v22 = v23;
            }
            while (v23 != v21);
            v19 = (void *)*((_QWORD *)v18 - 8);
          }
          *((_QWORD *)v18 - 7) = v21;
          operator delete(v19);
        }
        v18 -= 200;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

void sub_223F73444(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned __int8 v20;
  int v21;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  int32x4_t *v27;
  uint64_t v28;
  int32x4_t *v29;
  uint64_t v30;
  size_t v31;
  int32x4_t *v32;
  uint64_t v33;
  int32x4_t *v34;
  uint64_t v35;
  unint64_t v36;
  int32x4_t v37;
  int32x4_t *v38;
  int32x4_t v39;
  int32x4_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void *v44;
  char *v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float32x2_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float32x2_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float32x2_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v71;
  uint64_t v72;
  float32x2_t v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  BOOL v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float32x2_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  BOOL v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  float32x2_t v104;
  uint64_t v105;
  unint64_t v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  BOOL v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  float32x2_t v119;
  unint64_t v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  BOOL v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v134;
  uint64_t v135;
  float32x2_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  float32x2_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  float32x2_t v144;
  int v145;
  uint64_t v146;
  int v147;
  int v148;
  uint64_t v149;
  unsigned int v150;
  int v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  size_t v155;
  char *v156;
  char *v157;
  unsigned int *v158;
  unsigned int *v159;
  unint64_t v160;
  int32x4_t v161;
  int32x4_t *v162;
  int32x4_t v163;
  int32x4_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  int v168;
  int v169;
  void *v170;
  char *v171;
  unsigned int v172;
  int v173;
  unsigned int v174;
  uint64_t v175;
  int v176;
  int v177;
  unsigned int v178;
  uint64_t v179;
  int v180;
  int v181;
  int v182;
  unsigned int v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  float32x2_t v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  float32x2_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  float32x2_t v199;
  int v200;
  char *v201;
  int v202;
  int v203;
  unsigned int v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v210;
  uint64_t v211;
  float32x2_t v212;
  unint64_t v213;
  unsigned int v214;
  unsigned int v215;
  uint64_t v216;
  unsigned int v217;
  unsigned int v218;
  BOOL v219;
  unsigned int v220;
  unsigned int v221;
  uint64_t v222;
  _BYTE *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  float32x2_t v227;
  unint64_t v228;
  unsigned int v229;
  unsigned int v230;
  uint64_t v231;
  unsigned int v232;
  unsigned int v233;
  BOOL v234;
  unsigned int v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  float32x2_t v241;
  unint64_t v242;
  unsigned int v243;
  unsigned int v244;
  uint64_t v245;
  unsigned int v246;
  unsigned int v247;
  BOOL v248;
  unsigned int v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  float32x2_t v255;
  unint64_t v256;
  unsigned int v257;
  unsigned int v258;
  uint64_t v259;
  unsigned int v260;
  unsigned int v261;
  BOOL v262;
  unsigned int v263;
  unsigned int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v271;
  uint64_t v272;
  float32x2_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  float32x2_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  float32x2_t v281;
  unsigned int *v282;
  uint64_t v283;
  uint64_t v284;
  int64x2_t *v285;
  uint64_t *v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t *v289;
  int64x2_t v290;
  int64x2_t *v291;
  int64x2_t v292;
  int64x2_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t v297;
  void *v298;
  unint64_t v299;
  uint64_t v300;
  unsigned int v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned int *v305;
  unsigned int *v306;
  uint64_t v307;
  BOOL v308;
  unint64_t v309;
  unint64_t v310;
  BOOL v311;
  uint64_t v312;
  float32x4_t v313;
  float32x4_t v314;
  char *v315;
  char *v316;
  char *v317;
  unint64_t v318;
  _QWORD *v319;
  _QWORD *v320;
  unint64_t v321;
  _BYTE *v322;
  BOOL v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  float32x4_t v331;
  int v332;
  _BYTE *v333;
  uint64_t v334;
  char *v335;
  void *v336;
  char *v337;
  BOOL v338;
  void *v339;
  char *v340;
  char *v341;
  char *v342;
  float32x4_t v343;
  char *v344;
  unsigned __int8 v345;
  uint64_t v346;
  int v347;
  int v348;
  uint64_t v349;
  int v350;
  int v351;
  uint64_t v352;
  int v353;
  int v354;
  int v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  uint64_t v360;
  int v361;
  int v362;
  int v363;
  unint64_t v364;
  int v365;
  uint64_t v366;
  int v367;
  int v368;
  uint64_t v369;
  int v370;
  int v371;
  unsigned int v372;
  uint64_t v373;
  int v374;
  uint64_t v375;
  int v376;
  int v377;
  uint64_t v378;
  uint64_t v379;
  char *v380;
  unsigned int v381;
  unint64_t v382;
  int v383;
  int v384;
  uint64_t v385;
  int v386;
  int v387;
  uint64_t v388;
  int v389;
  _DWORD *v390;
  unsigned int v391;
  _DWORD *v392;
  char *v393;
  uint64_t v394;
  unsigned int v395;
  char *v396;
  int v397;
  unsigned int v398;
  int v399;
  _BYTE *v400;
  _QWORD *v401[5];
  uint64_t v402;
  void *v403;
  uint64_t v404;
  unint64_t v405;
  void *v406;
  char *v407;
  char *v408;
  void *v409;
  char *v410;
  char *v411;
  void *v412[4];
  __int128 __p;
  unint64_t v414;
  __int128 v415;
  void *v416;
  unsigned int *v417;
  char *v418;
  unsigned int v419;
  _BYTE v420[28];
  int v421;
  __int128 v422;
  unint64_t v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  uint64_t v428;

  v428 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  sub_223F75B80(v412);
  v352 = a5;
  if (**((int **)v412[0] + 7) <= 1)
  {
    v12 = atomic_load((unsigned __int8 *)&qword_2540CE310);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE310))
    {
      qword_2540CE308 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_SemanticSurfaceSegment");
      __cxa_guard_release(&qword_2540CE310);
    }
    v13 = qword_2540CE308;
    *(_BYTE *)(qword_2540CE308 + 16) = 0;
    *(_QWORD *)(v13 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v13 = std::chrono::steady_clock::now();
    *(_BYTE *)(v13 + 16) = 1;
  }
  v14 = *(_QWORD *)(a1 + 8);
  v400 = *(_BYTE **)a1;
  v15 = *(_DWORD *)(a1 + 16);
  v383 = *(_DWORD *)(a1 + 20);
  v394 = *a2;
  v17 = *((_DWORD *)a2 + 2);
  v16 = *((_DWORD *)a2 + 3);
  v18 = *((_DWORD *)a2 + 4);
  v386 = *((_DWORD *)a2 + 5);
  v388 = *(_QWORD *)a3;
  v19 = *(_DWORD *)(a3 + 20);
  v397 = *(_DWORD *)(a3 + 24);
  v398 = v18;
  v373 = *(unsigned int *)(a3 + 28);
  v20 = atomic_load((unsigned __int8 *)&qword_2540CE338);
  if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE338))
  {
    dword_2540CE300 = cosf(a6 * 0.017453);
    __cxa_guard_release(&qword_2540CE338);
  }
  v21 = v14 - 2;
  v382 = HIDWORD(v14);
  v23 = v14 > 2 && HIDWORD(v14) > 2;
  v364 = v14;
  v351 = v19;
  if (v17 && v16)
  {
    if (v23
      || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/include/ACV/SurfaceDetection/SurfaceSegmentation.h", 429, (uint64_t)"width >= 3u && height >= 3u", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      v24 = (HIDWORD(v14) * v14);
      memset(v412, 0, 24);
      v25 = v388;
      v349 = v24;
      if (!(_DWORD)v24)
      {
        LODWORD(v412[3]) = 0;
        v414 = 0;
        __p = 0uLL;
        v35 = (v14 - 1);
        if ((_DWORD)v14 == 1)
          goto LABEL_158;
LABEL_171:
        v182 = 0;
        v183 = 0;
        v184 = 1;
        v185 = v398;
        do
        {
          v186 = v400[v15 + v182];
          if (!*(_BYTE *)(a4 + v186)
            && *(float *)(v394 + 4 * v185) >= 0.5
            && (_DWORD)v186 == v400[v182])
          {
            v187 = v25 + 4 * v183;
            v188 = v25 + 4 * (v397 + v183);
            v189 = vmul_f32(*(float32x2_t *)(v187 + 4), *(float32x2_t *)(v188 + 4));
            if (fabsf(v189.f32[1] + (float)(v189.f32[0] + (float)(*(float *)v187 * *(float *)v188))) >= *(float *)&dword_2540CE300)
              sub_223ED4414((uint64_t)v412, v184, (v184 - 1));
          }
          v184 = (v184 + 1);
          v183 += v397;
          v182 += v15;
          v185 += v398;
        }
        while ((_DWORD)v364 != (_DWORD)v184);
LABEL_158:
        v168 = v364;
        v169 = v383;
        if ((_DWORD)v382 != 1)
        {
          v190 = 0;
          v372 = 0;
          v361 = v35 * v15;
          v393 = (char *)(v35 - 1);
          v354 = v398 * v35;
          v369 = (2 * v15);
          v362 = v373 + v397;
          v353 = v21 * v15;
          v191 = 1;
          v350 = v398 * v21;
          v347 = v397 * v21;
          v348 = v397 * v35;
          v367 = v383;
          v381 = v364;
          v355 = v35;
          do
          {
            v378 = v191;
            v363 = v191 - 1;
            v365 = (v191 - 1) * v169;
            v192 = v400[v365];
            if (!*(_BYTE *)(a4 + v192)
              && *(float *)(v394 + 4 * (v363 * v386)) >= 0.5
              && v400[(v383 * v191)] == (_DWORD)v192)
            {
              v193 = v388 + 4 * (v363 * v373);
              v194 = v388 + 4 * (v373 * v191);
              v195 = vmul_f32(*(float32x2_t *)(v193 + 4), *(float32x2_t *)(v194 + 4));
              if (fabsf(v195.f32[1] + (float)(v195.f32[0] + (float)(*(float *)v193 * *(float *)v194))) >= *(float *)&dword_2540CE300)
                sub_223ED4414((uint64_t)v412, v381, v381 - v168);
            }
            v196 = v400[v365 + v15];
            if (!*(_BYTE *)(a4 + v196)
              && *(float *)(v394 + 4 * (v398 + v363 * v386)) >= 0.5
              && v400[(v383 * v378)] == (_DWORD)v196)
            {
              v197 = v388 + 4 * (v397 + v363 * v373);
              v198 = v388 + 4 * (v373 * v378);
              v199 = vmul_f32(*(float32x2_t *)(v197 + 4), *(float32x2_t *)(v198 + 4));
              if (fabsf(v199.f32[1] + (float)(v199.f32[0] + (float)(*(float *)v197 * *(float *)v198))) >= *(float *)&dword_2540CE300)
                sub_223ED4414((uint64_t)v412, v381, v381 - v168 + 1);
            }
            if (v35 < 2)
            {
              v266 = v381 + 1;
            }
            else
            {
              v200 = v190;
              v201 = 0;
              v360 = v381 - v364;
              v359 = v200;
              v202 = v367;
              v203 = v369;
              v204 = HIDWORD(v369);
              v205 = v372;
              do
              {
                v206 = (v15 + v202);
                v207 = v400[v206];
                if (!*(_BYTE *)(a4 + v207) && *(float *)(v394 + 4 * (v386 + v398 + v205)) >= 0.5)
                {
                  v375 = (uint64_t)&v201[v381];
                  v385 = v375 + 1;
                  v208 = v400[v200];
                  if (!*(_BYTE *)(a4 + v208) && (_DWORD)v207 == (_DWORD)v208 && *(float *)(v394 + 4 * v205) >= 0.5)
                  {
                    v210 = v388 + 4 * v204;
                    v211 = v388 + 4 * (v362 + v204);
                    v212 = vmul_f32(*(float32x2_t *)(v210 + 4), *(float32x2_t *)(v211 + 4));
                    if (fabsf(v212.f32[1] + (float)(v212.f32[0] + (float)(*(float *)v210 * *(float *)v211))) >= *(float *)&dword_2540CE300)
                    {
                      v356 = (uint64_t)&v201[v360];
                      v213 = (unint64_t)((char *)v412[1] - (char *)v412[0]) >> 2;
                      if ((v385 >= v213 || v356 >= v213)
                        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/Common/include/ACV/Types/UnionFind.h", 310, (uint64_t)"idx1 < numElements && idx2 < numElements", 40, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                      {
LABEL_301:
                        abort();
                      }
                      v214 = sub_223ED44F8((uint64_t *)v412, v385);
                      v215 = sub_223ED44F8((uint64_t *)v412, v356);
                      if (v214 != v215)
                      {
                        v216 = __p;
                        v217 = *(_DWORD *)(__p + 4 * v214);
                        v218 = *(_DWORD *)(__p + 4 * v215);
                        v219 = v217 >= v218;
                        if (v217 >= v218)
                          v220 = v214;
                        else
                          v220 = v215;
                        if (v219)
                          v221 = v215;
                        else
                          v221 = v214;
                        v222 = 4 * v221;
                        *(_DWORD *)((char *)v412[0] + v222) = v220;
                        *(_DWORD *)(v216 + 4 * v220) += *(_DWORD *)(v216 + v222);
                        --LODWORD(v412[3]);
                      }
                    }
                  }
                  v223 = v400;
                  v224 = v400[v15 + v200];
                  if (!*(_BYTE *)(a4 + v224)
                    && *(float *)(v394 + 4 * (v398 + v205)) >= 0.5
                    && v400[v206] == (_DWORD)v224)
                  {
                    v225 = v388 + 4 * (v397 + v204);
                    v226 = v388 + 4 * (v362 + v204);
                    v227 = vmul_f32(*(float32x2_t *)(v225 + 4), *(float32x2_t *)(v226 + 4));
                    if (fabsf(v227.f32[1] + (float)(v227.f32[0] + (float)(*(float *)v225 * *(float *)v226))) >= *(float *)&dword_2540CE300)
                    {
                      v357 = (uint64_t)&v201[v360 + 1];
                      v228 = (unint64_t)((char *)v412[1] - (char *)v412[0]) >> 2;
                      if ((v385 >= v228 || v357 >= v228)
                        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/Common/include/ACV/Types/UnionFind.h", 310, (uint64_t)"idx1 < numElements && idx2 < numElements", 40, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                      {
                        goto LABEL_301;
                      }
                      v229 = sub_223ED44F8((uint64_t *)v412, v385);
                      v230 = sub_223ED44F8((uint64_t *)v412, v357);
                      v223 = v400;
                      if (v229 != v230)
                      {
                        v231 = __p;
                        v232 = *(_DWORD *)(__p + 4 * v229);
                        v233 = *(_DWORD *)(__p + 4 * v230);
                        v234 = v232 >= v233;
                        if (v232 >= v233)
                          v235 = v229;
                        else
                          v235 = v230;
                        if (v234)
                          v236 = v230;
                        else
                          v236 = v229;
                        v237 = 4 * v236;
                        *(_DWORD *)((char *)v412[0] + v237) = v235;
                        *(_DWORD *)(v231 + 4 * v235) += *(_DWORD *)(v231 + v237);
                        --LODWORD(v412[3]);
                      }
                    }
                  }
                  v238 = v223[v203];
                  if (!*(_BYTE *)(a4 + v238)
                    && *(float *)(v394 + 4 * (2 * v398 + v205)) >= 0.5
                    && v223[v206] == (_DWORD)v238)
                  {
                    v239 = v388 + 4 * (2 * v397 + v204);
                    v240 = v388 + 4 * (v362 + v204);
                    v241 = vmul_f32(*(float32x2_t *)(v239 + 4), *(float32x2_t *)(v240 + 4));
                    if (fabsf(v241.f32[1] + (float)(v241.f32[0] + (float)(*(float *)v239 * *(float *)v240))) >= *(float *)&dword_2540CE300)
                    {
                      v358 = (uint64_t)&v201[v360 + 2];
                      v242 = (unint64_t)((char *)v412[1] - (char *)v412[0]) >> 2;
                      if ((v385 >= v242 || v358 >= v242)
                        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/Common/include/ACV/Types/UnionFind.h", 310, (uint64_t)"idx1 < numElements && idx2 < numElements", 40, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                      {
                        goto LABEL_301;
                      }
                      v243 = sub_223ED44F8((uint64_t *)v412, v385);
                      v244 = sub_223ED44F8((uint64_t *)v412, v358);
                      v223 = v400;
                      if (v243 != v244)
                      {
                        v245 = __p;
                        v246 = *(_DWORD *)(__p + 4 * v243);
                        v247 = *(_DWORD *)(__p + 4 * v244);
                        v248 = v246 >= v247;
                        if (v246 >= v247)
                          v249 = v243;
                        else
                          v249 = v244;
                        if (v248)
                          v250 = v244;
                        else
                          v250 = v243;
                        v251 = 4 * v250;
                        *(_DWORD *)((char *)v412[0] + v251) = v249;
                        *(_DWORD *)(v245 + 4 * v249) += *(_DWORD *)(v245 + v251);
                        --LODWORD(v412[3]);
                      }
                    }
                  }
                  v252 = v223[v202];
                  if (!*(_BYTE *)(a4 + v252)
                    && *(float *)(v394 + 4 * (v386 + v205)) >= 0.5
                    && v400[v206] == (_DWORD)v252)
                  {
                    v253 = v388 + 4 * (v373 + v204);
                    v254 = v388 + 4 * (v362 + v204);
                    v255 = vmul_f32(*(float32x2_t *)(v253 + 4), *(float32x2_t *)(v254 + 4));
                    if (fabsf(v255.f32[1] + (float)(v255.f32[0] + (float)(*(float *)v253 * *(float *)v254))) >= *(float *)&dword_2540CE300)
                    {
                      v256 = (unint64_t)((char *)v412[1] - (char *)v412[0]) >> 2;
                      if ((v385 >= v256 || v375 >= v256)
                        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/Common/include/ACV/Types/UnionFind.h", 310, (uint64_t)"idx1 < numElements && idx2 < numElements", 40, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                      {
                        goto LABEL_301;
                      }
                      v257 = sub_223ED44F8((uint64_t *)v412, v385);
                      v258 = sub_223ED44F8((uint64_t *)v412, v375);
                      if (v257 != v258)
                      {
                        v259 = __p;
                        v260 = *(_DWORD *)(__p + 4 * v257);
                        v261 = *(_DWORD *)(__p + 4 * v258);
                        v262 = v260 >= v261;
                        if (v260 >= v261)
                          v263 = v257;
                        else
                          v263 = v258;
                        if (v262)
                          v264 = v258;
                        else
                          v264 = v257;
                        v265 = 4 * v264;
                        *(_DWORD *)((char *)v412[0] + v265) = v263;
                        *(_DWORD *)(v259 + 4 * v263) += *(_DWORD *)(v259 + v265);
                        --LODWORD(v412[3]);
                      }
                    }
                  }
                }
                ++v201;
                v204 += v397;
                v205 += v398;
                v203 += v15;
                v202 += v15;
                v200 += v15;
              }
              while (v393 != v201);
              v381 += v201;
              v266 = v381 + 1;
              v168 = v364;
              LODWORD(v35) = v355;
              v190 = v359;
            }
            v267 = (v383 * v378 + v361);
            v268 = v400[v267];
            if (!*(_BYTE *)(a4 + v268) && *(float *)(v394 + 4 * (v386 * v378 + v354)) >= 0.5)
            {
              v269 = v400[v365 + v353];
              if (!*(_BYTE *)(a4 + v269)
                && (_DWORD)v268 == (_DWORD)v269
                && *(float *)(v394 + 4 * (v350 + v363 * v386)) >= 0.5)
              {
                v271 = v388 + 4 * (v347 + v363 * v373);
                v272 = v388 + 4 * (v348 + v373 * v378);
                v273 = vmul_f32(*(float32x2_t *)(v271 + 4), *(float32x2_t *)(v272 + 4));
                if (fabsf(v273.f32[1] + (float)(v273.f32[0] + (float)(*(float *)v271 * *(float *)v272))) >= *(float *)&dword_2540CE300)
                  sub_223ED4414((uint64_t)v412, v266, v381 - v168);
              }
              v274 = v400[v365 + v361];
              if (!*(_BYTE *)(a4 + v274)
                && *(float *)(v394 + 4 * (v354 + v363 * v386)) >= 0.5
                && v400[v267] == (_DWORD)v274)
              {
                v275 = v388 + 4 * (v348 + v363 * v373);
                v276 = v388 + 4 * (v348 + v373 * v378);
                v277 = vmul_f32(*(float32x2_t *)(v275 + 4), *(float32x2_t *)(v276 + 4));
                if (fabsf(v277.f32[1] + (float)(v277.f32[0] + (float)(*(float *)v275 * *(float *)v276))) >= *(float *)&dword_2540CE300)
                  sub_223ED4414((uint64_t)v412, v266, (v266 - v168));
              }
              v278 = v400[(v383 * v378 + v353)];
              if (!*(_BYTE *)(a4 + v278)
                && *(float *)(v394 + 4 * (v386 * v378 + v350)) >= 0.5
                && v400[v267] == (_DWORD)v278)
              {
                v279 = v388 + 4 * (v373 * v378 + v347);
                v280 = v388 + 4 * (v373 * v378 + v348);
                v281 = vmul_f32(*(float32x2_t *)(v279 + 4), *(float32x2_t *)(v280 + 4));
                if (fabsf(v281.f32[1] + (float)(v281.f32[0] + (float)(*(float *)v279 * *(float *)v280))) >= *(float *)&dword_2540CE300)
                  sub_223ED4414((uint64_t)v412, v266, v381);
              }
            }
            v381 += 2;
            v191 = v378 + 1;
            HIDWORD(v369) += v373;
            v372 += v386;
            v169 = v383;
            LODWORD(v369) = v369 + v383;
            v367 += v383;
            v190 += v383;
          }
          while ((_DWORD)v378 + 1 != (_DWORD)v382);
        }
        if ((_DWORD)v349)
        {
          v170 = operator new(4 * v349);
          memset(v170, 255, 4 * v349);
          v392 = v170;
          v171 = (char *)operator new(4 * v349);
          memset(v171, 255, 4 * v349);
          v390 = v171;
          v380 = &v171[4 * v349];
          v172 = 0;
          if (v168)
            goto LABEL_161;
        }
        else
        {
          v390 = 0;
          v392 = 0;
          v380 = 0;
          v172 = 0;
          if (v168)
          {
LABEL_161:
            v153 = v382;
            if ((_DWORD)v382)
            {
              v173 = 0;
              v174 = 0;
              v175 = 0;
              v176 = 0;
              v172 = 0;
              do
              {
                v177 = v173;
                v178 = v174;
                v179 = v364;
                do
                {
                  if (!*(_BYTE *)(a4 + v400[v177]) && *(float *)(v394 + 4 * v178) >= 0.5)
                  {
                    v180 = sub_223ED44F8((uint64_t *)v412, v175);
                    v181 = v392[v180];
                    if (v181 == -1)
                    {
                      v392[v180] = v172;
                      v181 = v172++;
                    }
                    v390[v175] = v181;
                  }
                  v175 = (v175 + 1);
                  v178 += v398;
                  v177 += v15;
                  --v179;
                }
                while (v179);
                ++v176;
                v174 += v386;
                v173 += v383;
                v153 = v382;
              }
              while (v176 != (_DWORD)v382);
            }
LABEL_280:
            v416 = v390;
            v417 = (unsigned int *)v380;
            v418 = v380;
            v419 = v172;
            if (v392)
              operator delete(v392);
            if ((_QWORD)__p)
            {
              *((_QWORD *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
            if (v412[0])
            {
              v412[1] = v412[0];
              operator delete(v412[0]);
            }
            v152 = v364;
            v154 = v419;
            memset(v420, 0, 24);
            v155 = 4 * v419;
            if (!v419)
              goto LABEL_287;
LABEL_151:
            v156 = (char *)operator new(v155);
            v157 = &v156[4 * v154];
            *(_QWORD *)v420 = v156;
            *(_QWORD *)&v420[16] = v157;
            bzero(v156, v155);
            *(_QWORD *)&v420[8] = v157;
            v158 = (unsigned int *)v416;
            v159 = v417;
            if (v416 == v417)
              goto LABEL_292;
            goto LABEL_288;
          }
        }
        v153 = v382;
        goto LABEL_280;
      }
      v26 = 4 * (HIDWORD(v14) * v14);
      v27 = (int32x4_t *)operator new(v26);
      v412[0] = v27;
      v412[2] = &v27->i8[v26];
      bzero(v27, v26);
      v412[1] = &v27->i8[v26];
      LODWORD(v412[3]) = HIDWORD(v14) * v14;
      if (v26 - 4 >= 0x1C)
      {
        v160 = ((v26 - 4) >> 2) + 1;
        v28 = v160 & 0x7FFFFFFFFFFFFFF8;
        v29 = (int32x4_t *)((char *)v27 + 4 * (v160 & 0x7FFFFFFFFFFFFFF8));
        v161 = (int32x4_t)xmmword_2246499B0;
        v162 = v27 + 1;
        v163.i64[0] = 0x400000004;
        v163.i64[1] = 0x400000004;
        v164.i64[0] = 0x800000008;
        v164.i64[1] = 0x800000008;
        v165 = v160 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v162[-1] = v161;
          *v162 = vaddq_s32(v161, v163);
          v161 = vaddq_s32(v161, v164);
          v162 += 2;
          v165 -= 8;
        }
        while (v165);
        if (v160 == v28)
        {
LABEL_157:
          v166 = (char *)operator new(4 * (HIDWORD(v14) * v14));
          v167 = &v166[4 * v24];
          *(_QWORD *)&__p = v166;
          v414 = (unint64_t)v167;
          memset_pattern16(v166, &unk_224690430, 4 * (HIDWORD(v14) * v14));
          *((_QWORD *)&__p + 1) = v167;
          v25 = v388;
          v35 = (v14 - 1);
          if ((_DWORD)v14 == 1)
            goto LABEL_158;
          goto LABEL_171;
        }
      }
      else
      {
        LODWORD(v28) = 0;
        v29 = v27;
      }
      do
      {
        v29->i32[0] = v28;
        v29 = (int32x4_t *)((char *)v29 + 4);
        LODWORD(v28) = v28 + 1;
      }
      while (v29 != (int32x4_t *)&v27->i8[v26]);
      goto LABEL_157;
    }
LABEL_307:
    abort();
  }
  if (!v23
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/include/ACV/SurfaceDetection/SurfaceSegmentation.h", 429, (uint64_t)"width >= 3u && height >= 3u", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_307;
  }
  v30 = (HIDWORD(v14) * v14);
  memset(v412, 0, 24);
  v366 = v30;
  if ((_DWORD)v30)
  {
    v31 = 4 * (HIDWORD(v14) * v14);
    v32 = (int32x4_t *)operator new(v31);
    v412[0] = v32;
    v412[2] = &v32->i8[v31];
    bzero(v32, v31);
    v412[1] = &v32->i8[v31];
    LODWORD(v412[3]) = HIDWORD(v14) * v14;
    if (v31 - 4 >= 0x1C)
    {
      v36 = ((v31 - 4) >> 2) + 1;
      v33 = v36 & 0x7FFFFFFFFFFFFFF8;
      v34 = (int32x4_t *)((char *)v32 + 4 * (v36 & 0x7FFFFFFFFFFFFFF8));
      v37 = (int32x4_t)xmmword_2246499B0;
      v38 = v32 + 1;
      v39.i64[0] = 0x400000004;
      v39.i64[1] = 0x400000004;
      v40.i64[0] = 0x800000008;
      v40.i64[1] = 0x800000008;
      v41 = v36 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v38[-1] = v37;
        *v38 = vaddq_s32(v37, v39);
        v37 = vaddq_s32(v37, v40);
        v38 += 2;
        v41 -= 8;
      }
      while (v41);
      if (v36 == v33)
      {
LABEL_31:
        v42 = (char *)operator new(4 * (HIDWORD(v14) * v14));
        v43 = &v42[4 * v30];
        *(_QWORD *)&__p = v42;
        v414 = (unint64_t)v43;
        memset_pattern16(v42, &unk_224690430, v31);
        *((_QWORD *)&__p + 1) = v43;
        v395 = v14 - 1;
        if ((_DWORD)v14 == 1)
          goto LABEL_32;
        goto LABEL_36;
      }
    }
    else
    {
      LODWORD(v33) = 0;
      v34 = v32;
    }
    do
    {
      v34->i32[0] = v33;
      v34 = (int32x4_t *)((char *)v34 + 4);
      LODWORD(v33) = v33 + 1;
    }
    while (v34 != (int32x4_t *)&v32->i8[v31]);
    goto LABEL_31;
  }
  LODWORD(v412[3]) = 0;
  v414 = 0;
  __p = 0uLL;
  v395 = v14 - 1;
  if ((_DWORD)v14 == 1)
    goto LABEL_32;
LABEL_36:
  v47 = 0;
  v48 = 0;
  v49 = 1;
  do
  {
    v50 = v400[v15 + v47];
    if (!*(_BYTE *)(a4 + v50) && (_DWORD)v50 == v400[v47])
    {
      v51 = v388 + 4 * v48;
      v52 = v388 + 4 * (v397 + v48);
      v53 = vmul_f32(*(float32x2_t *)(v51 + 4), *(float32x2_t *)(v52 + 4));
      if (fabsf(v53.f32[1] + (float)(v53.f32[0] + (float)(*(float *)v51 * *(float *)v52))) >= *(float *)&dword_2540CE300)
        sub_223ED4414((uint64_t)v412, v49, (v49 - 1));
    }
    v49 = (v49 + 1);
    v48 += v397;
    v47 += v15;
  }
  while ((_DWORD)v14 != (_DWORD)v49);
LABEL_32:
  if (HIDWORD(v14) != 1)
  {
    v374 = v395 * v15;
    v377 = -(int)v14;
    v54 = 1;
    v371 = v21 * v15;
    v55 = v14;
    v368 = v397 * v21;
    v370 = v397 * v395;
    do
    {
      v376 = v54 - 1;
      v56 = (v54 - 1) * v383;
      v57 = v400[v56];
      v379 = v54;
      v399 = v383 * v54;
      if (!*(_BYTE *)(a4 + v57) && v400[v399] == (_DWORD)v57)
      {
        v58 = v388 + 4 * (v376 * v373);
        v59 = v388 + 4 * (v373 * v54);
        v60 = vmul_f32(*(float32x2_t *)(v58 + 4), *(float32x2_t *)(v59 + 4));
        if (fabsf(v60.f32[1] + (float)(v60.f32[0] + (float)(*(float *)v58 * *(float *)v59))) >= *(float *)&dword_2540CE300)
          sub_223ED4414((uint64_t)v412, v55, (v55 - v14));
      }
      v61 = v400[v56 + v15];
      if (!*(_BYTE *)(a4 + v61) && v400[v399] == (_DWORD)v61)
      {
        v62 = v388 + 4 * (v397 + v376 * v373);
        v63 = v388 + 4 * (v373 * v379);
        v64 = vmul_f32(*(float32x2_t *)(v62 + 4), *(float32x2_t *)(v63 + 4));
        if (fabsf(v64.f32[1] + (float)(v64.f32[0] + (float)(*(float *)v62 * *(float *)v63))) >= *(float *)&dword_2540CE300)
          sub_223ED4414((uint64_t)v412, v55, (v55 - v14 + 1));
      }
      if (v395 < 2)
      {
        v130 = (v55 + 1);
      }
      else
      {
        v384 = v376 * v373;
        v65 = 1;
        v387 = v373 * v379;
        do
        {
          v67 = (v65 * v15 + v399);
          v68 = v400[v67];
          if (*(_BYTE *)(a4 + v68))
          {
            v66 = v65 + 1;
          }
          else
          {
            v391 = v55 + 1;
            v389 = v65 - 1;
            v69 = (v65 - 1) * v15;
            if ((_DWORD)v68 == v400[v69 + v56]
              && *(_BYTE *)(a4 + v400[v69 + v56]) == 0)
            {
              v71 = v388 + 4 * (v384 + v389 * v397);
              v72 = v388 + 4 * (v387 + v65 * v397);
              v73 = vmul_f32(*(float32x2_t *)(v71 + 4), *(float32x2_t *)(v72 + 4));
              if (fabsf(v73.f32[1] + (float)(v73.f32[0] + (float)(*(float *)v71 * *(float *)v72))) >= *(float *)&dword_2540CE300)
              {
                v74 = (v377 + v55);
                v75 = (unint64_t)((char *)v412[1] - (char *)v412[0]) >> 2;
                if ((v391 >= v75 || v74 >= v75)
                  && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/Common/include/ACV/Types/UnionFind.h", 310, (uint64_t)"idx1 < numElements && idx2 < numElements", 40, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                {
LABEL_300:
                  abort();
                }
                v76 = sub_223ED44F8((uint64_t *)v412, v391);
                v77 = sub_223ED44F8((uint64_t *)v412, v74);
                if (v76 != v77)
                {
                  v78 = __p;
                  v79 = *(_DWORD *)(__p + 4 * v76);
                  v80 = *(_DWORD *)(__p + 4 * v77);
                  v81 = v79 >= v80;
                  if (v79 >= v80)
                    v82 = v76;
                  else
                    v82 = v77;
                  if (v81)
                    v83 = v77;
                  else
                    v83 = v76;
                  v84 = 4 * v83;
                  *(_DWORD *)((char *)v412[0] + v84) = v82;
                  *(_DWORD *)(v78 + 4 * v82) += *(_DWORD *)(v78 + v84);
                  --LODWORD(v412[3]);
                }
              }
            }
            v85 = v400;
            v86 = v400[v65 * v15 + v56];
            if (!*(_BYTE *)(a4 + v86) && v400[v67] == (_DWORD)v86)
            {
              v87 = v388 + 4 * (v65 * v397 + v384);
              v88 = v388 + 4 * (v65 * v397 + v387);
              v89 = vmul_f32(*(float32x2_t *)(v87 + 4), *(float32x2_t *)(v88 + 4));
              if (fabsf(v89.f32[1] + (float)(v89.f32[0] + (float)(*(float *)v87 * *(float *)v88))) >= *(float *)&dword_2540CE300)
              {
                v90 = (v377 + v55 + 1);
                v91 = (unint64_t)((char *)v412[1] - (char *)v412[0]) >> 2;
                if ((v391 >= v91 || v90 >= v91)
                  && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/Common/include/ACV/Types/UnionFind.h", 310, (uint64_t)"idx1 < numElements && idx2 < numElements", 40, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                {
                  goto LABEL_300;
                }
                v92 = sub_223ED44F8((uint64_t *)v412, v391);
                v93 = sub_223ED44F8((uint64_t *)v412, v90);
                v85 = v400;
                if (v92 != v93)
                {
                  v94 = __p;
                  v95 = *(_DWORD *)(__p + 4 * v92);
                  v96 = *(_DWORD *)(__p + 4 * v93);
                  v97 = v95 >= v96;
                  if (v95 >= v96)
                    v98 = v92;
                  else
                    v98 = v93;
                  if (v97)
                    v99 = v93;
                  else
                    v99 = v92;
                  v100 = 4 * v99;
                  *(_DWORD *)((char *)v412[0] + v100) = v98;
                  *(_DWORD *)(v94 + 4 * v98) += *(_DWORD *)(v94 + v100);
                  --LODWORD(v412[3]);
                }
              }
            }
            v66 = v65 + 1;
            v101 = v85[v56 + (v65 + 1) * v15];
            if (!*(_BYTE *)(a4 + v101) && v85[v67] == (_DWORD)v101)
            {
              v102 = v388 + 4 * (v384 + v66 * v397);
              v103 = v388 + 4 * (v387 + v65 * v397);
              v104 = vmul_f32(*(float32x2_t *)(v102 + 4), *(float32x2_t *)(v103 + 4));
              if (fabsf(v104.f32[1] + (float)(v104.f32[0] + (float)(*(float *)v102 * *(float *)v103))) >= *(float *)&dword_2540CE300)
              {
                v105 = (v377 + v55 + 2);
                v106 = (unint64_t)((char *)v412[1] - (char *)v412[0]) >> 2;
                if ((v391 >= v106 || v105 >= v106)
                  && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/Common/include/ACV/Types/UnionFind.h", 310, (uint64_t)"idx1 < numElements && idx2 < numElements", 40, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                {
                  goto LABEL_300;
                }
                v107 = sub_223ED44F8((uint64_t *)v412, v391);
                v108 = sub_223ED44F8((uint64_t *)v412, v105);
                v85 = v400;
                if (v107 != v108)
                {
                  v109 = __p;
                  v110 = *(_DWORD *)(__p + 4 * v107);
                  v111 = *(_DWORD *)(__p + 4 * v108);
                  v112 = v110 >= v111;
                  if (v110 >= v111)
                    v113 = v107;
                  else
                    v113 = v108;
                  if (v112)
                    v114 = v108;
                  else
                    v114 = v107;
                  v115 = 4 * v114;
                  *(_DWORD *)((char *)v412[0] + v115) = v113;
                  *(_DWORD *)(v109 + 4 * v113) += *(_DWORD *)(v109 + v115);
                  --LODWORD(v412[3]);
                }
              }
            }
            v116 = v85[v69 + v399];
            if (!*(_BYTE *)(a4 + v116) && v85[v67] == (_DWORD)v116)
            {
              v117 = v388 + 4 * (v387 + v389 * v397);
              v118 = v388 + 4 * (v387 + v65 * v397);
              v119 = vmul_f32(*(float32x2_t *)(v117 + 4), *(float32x2_t *)(v118 + 4));
              if (fabsf(v119.f32[1] + (float)(v119.f32[0] + (float)(*(float *)v117 * *(float *)v118))) >= *(float *)&dword_2540CE300)
              {
                v120 = (unint64_t)((char *)v412[1] - (char *)v412[0]) >> 2;
                if ((v391 >= v120 || v55 >= v120)
                  && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/Common/include/ACV/Types/UnionFind.h", 310, (uint64_t)"idx1 < numElements && idx2 < numElements", 40, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                {
                  goto LABEL_300;
                }
                v121 = sub_223ED44F8((uint64_t *)v412, v391);
                v122 = sub_223ED44F8((uint64_t *)v412, v55);
                if (v121 != v122)
                {
                  v123 = __p;
                  v124 = *(_DWORD *)(__p + 4 * v121);
                  v125 = *(_DWORD *)(__p + 4 * v122);
                  v126 = v124 >= v125;
                  if (v124 >= v125)
                    v127 = v121;
                  else
                    v127 = v122;
                  if (v126)
                    v128 = v122;
                  else
                    v128 = v121;
                  v129 = 4 * v128;
                  *(_DWORD *)((char *)v412[0] + v129) = v127;
                  *(_DWORD *)(v123 + 4 * v127) += *(_DWORD *)(v123 + v129);
                  --LODWORD(v412[3]);
                }
              }
            }
          }
          v55 = (v55 + 1);
          v65 = v66;
        }
        while (v66 != v395);
        v130 = (v55 + 1);
        LODWORD(v14) = v364;
      }
      v131 = (v399 + v374);
      v132 = v400[v131];
      if (!*(_BYTE *)(a4 + v132))
      {
        if ((_DWORD)v132 == v400[v56 + v371]
          && *(_BYTE *)(a4 + v400[v56 + v371]) == 0)
        {
          v134 = v388 + 4 * (v368 + v376 * v373);
          v135 = v388 + 4 * (v370 + v373 * v379);
          v136 = vmul_f32(*(float32x2_t *)(v134 + 4), *(float32x2_t *)(v135 + 4));
          if (fabsf(v136.f32[1] + (float)(v136.f32[0] + (float)(*(float *)v134 * *(float *)v135))) >= *(float *)&dword_2540CE300)
            sub_223ED4414((uint64_t)v412, v130, (v55 - v14));
        }
        v137 = v400[v56 + v374];
        if (!*(_BYTE *)(a4 + v137) && v400[v131] == (_DWORD)v137)
        {
          v138 = v388 + 4 * (v370 + v376 * v373);
          v139 = v388 + 4 * (v370 + v373 * v379);
          v140 = vmul_f32(*(float32x2_t *)(v138 + 4), *(float32x2_t *)(v139 + 4));
          if (fabsf(v140.f32[1] + (float)(v140.f32[0] + (float)(*(float *)v138 * *(float *)v139))) >= *(float *)&dword_2540CE300)
            sub_223ED4414((uint64_t)v412, v130, (v130 - v14));
        }
        v141 = v400[v399 + v371];
        if (!*(_BYTE *)(a4 + v141) && v400[v131] == (_DWORD)v141)
        {
          v142 = v388 + 4 * (v373 * v379 + v368);
          v143 = v388 + 4 * (v373 * v379 + v370);
          v144 = vmul_f32(*(float32x2_t *)(v142 + 4), *(float32x2_t *)(v143 + 4));
          if (fabsf(v144.f32[1] + (float)(v144.f32[0] + (float)(*(float *)v142 * *(float *)v143))) >= *(float *)&dword_2540CE300)
            sub_223ED4414((uint64_t)v412, v130, v55);
        }
      }
      v55 = (v55 + 2);
      v54 = v379 + 1;
    }
    while ((_DWORD)v379 + 1 != (_DWORD)v382);
  }
  if ((_DWORD)v366)
  {
    v44 = operator new(4 * v366);
    memset(v44, 255, 4 * v366);
    v45 = (char *)operator new(4 * v366);
    memset(v45, 255, 4 * v366);
    v396 = &v45[4 * v366];
    v46 = 0;
    if (!(_DWORD)v382)
      goto LABEL_144;
  }
  else
  {
    v44 = 0;
    v45 = 0;
    v396 = 0;
    v46 = 0;
    if (!(_DWORD)v382)
      goto LABEL_144;
  }
  if ((_DWORD)v14)
  {
    v145 = 0;
    v146 = 0;
    v147 = 0;
    v46 = 0;
    do
    {
      v148 = v145;
      v149 = v364;
      do
      {
        if (!*(_BYTE *)(a4 + v400[v148]))
        {
          v150 = sub_223ED44F8((uint64_t *)v412, v146);
          v151 = *((_DWORD *)v44 + v150);
          if (v151 == -1)
          {
            *((_DWORD *)v44 + v150) = v46;
            v151 = v46++;
          }
          *(_DWORD *)&v45[4 * v146] = v151;
        }
        v146 = (v146 + 1);
        v148 += v15;
        --v149;
      }
      while (v149);
      ++v147;
      v145 += v383;
    }
    while (v147 != (_DWORD)v382);
  }
LABEL_144:
  v416 = v45;
  v417 = (unsigned int *)v396;
  v418 = v396;
  v419 = v46;
  if (v44)
    operator delete(v44);
  v152 = v364;
  v153 = v382;
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (v412[0])
  {
    v412[1] = v412[0];
    operator delete(v412[0]);
  }
  v154 = v419;
  memset(v420, 0, 24);
  v155 = 4 * v419;
  if (v419)
    goto LABEL_151;
LABEL_287:
  v157 = 0;
  v156 = 0;
  v158 = (unsigned int *)v416;
  v159 = v417;
  if (v416 == v417)
    goto LABEL_292;
LABEL_288:
  v282 = v158;
  do
  {
    v283 = *v282;
    if ((_DWORD)v283 != -1)
      ++*(_DWORD *)&v156[4 * v283];
    ++v282;
  }
  while (v282 != v159);
LABEL_292:
  memset(v412, 0, 24);
  v284 = v157 - v156;
  if (v284)
  {
    if ((unint64_t)v284 >= 0x7FFFFFFFFFFFFFFDLL)
      sub_22367C394();
    v285 = (int64x2_t *)operator new(2 * v284);
    v286 = (uint64_t *)v285;
    v287 = v284 >> 2;
    if ((unint64_t)v284 >= 0x10)
    {
      v288 = v287 & 0xFFFFFFFFFFFFFFFCLL;
      v289 = &v285->i64[v287 & 0xFFFFFFFFFFFFFFFCLL];
      v290 = (int64x2_t)xmmword_2245F5410;
      v291 = v285 + 1;
      v292 = vdupq_n_s64(2uLL);
      v293 = vdupq_n_s64(4uLL);
      v294 = v287 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v291[-1] = v290;
        *v291 = vaddq_s64(v290, v292);
        v290 = vaddq_s64(v290, v293);
        v291 += 2;
        v294 -= 4;
      }
      while (v294);
      goto LABEL_418;
    }
    v288 = 0;
    v289 = (uint64_t *)v285;
    do
    {
      *v289++ = v288++;
LABEL_418:
      ;
    }
    while (v287 != v288);
  }
  else
  {
    v289 = 0;
    v286 = 0;
  }
  v295 = v289 - v286;
  v296 = 126 - 2 * __clz(v295);
  *(_QWORD *)&v425 = v420;
  *((_QWORD *)&v425 + 1) = v401;
  if (v289 == v286)
    v297 = 0;
  else
    v297 = v296;
  sub_223F75C74((unint64_t)v286, v289, (uint64_t **)&v425, v297, 1);
  if ((_DWORD)v154)
  {
    v298 = operator new(v155);
    memset(v298, 255, v155);
    if (v154 >= 0xFF)
      v299 = 255;
    else
      v299 = v154;
    if (v295 < v299
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 379, (uint64_t)"count <= size()", 15, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
  }
  else
  {
    v298 = 0;
    v299 = 0;
  }
  if ((_DWORD)v299)
  {
    v300 = 0;
    v301 = vcvtms_u32_f32((float)(unint64_t)(v159 - v158) * 0.01);
    v302 = *(_QWORD *)v420;
    v303 = 8 * v299;
    do
    {
      v304 = v286[v300];
      if (*(_DWORD *)(v302 + 4 * v304) <= v301)
        break;
      *((_DWORD *)v298 + v304) = v300++;
      v303 -= 8;
    }
    while (v303);
  }
  else
  {
    LODWORD(v300) = 0;
  }
  v305 = (unsigned int *)v416;
  v306 = v417;
  while (v305 != v306)
  {
    v307 = *v305;
    if ((_DWORD)v307 != -1)
      *v305 = *((_DWORD *)v298 + v307);
    ++v305;
  }
  if (v298)
    operator delete(v298);
  if (v286)
    operator delete(v286);
  if (*(_QWORD *)v420)
  {
    *(_QWORD *)&v420[8] = *(_QWORD *)v420;
    operator delete(*(void **)v420);
  }
  if ((_DWORD)v153)
    v308 = (_DWORD)v152 == 0;
  else
    v308 = 1;
  if (v308)
    v309 = 0;
  else
    v309 = v152;
  v310 = v309 << 32;
  if (!HIDWORD(v309))
    v310 = 0;
  if ((_DWORD)v309)
    v311 = HIDWORD(v309) == 0;
  else
    v311 = 1;
  v412[0] = (void *)v309;
  v412[1] = (void *)(v310 | (v309 != 0));
  LOBYTE(v412[2]) = 0;
  LOBYTE(v412[3]) = 0;
  *(void **)v420 = v412[1];
  if (v311)
    v309 = 0;
  *(_QWORD *)&v425 = v309;
  if ((HIDWORD(v310) & (HIDWORD(v310) - 1)) != 0)
    v312 = 1;
  else
    v312 = HIDWORD(v310);
  sub_223316930((size_t *)&__p, &v425, (void **)v420, 1, (void **)&unk_224691E44, 1, v312);
  v409 = 0;
  v410 = 0;
  v411 = 0;
  if ((_DWORD)v300)
  {
    v315 = (char *)operator new(12 * v300);
    v316 = &v315[12 * v300];
    v409 = v315;
    v411 = v316;
    bzero(v315, 12 * ((12 * (unint64_t)v300 - 12) / 0xC) + 12);
    v410 = v316;
    v317 = (char *)operator new(16 * v300);
    v406 = v317;
    v408 = &v317[16 * v300];
    bzero(v317, 16 * v300);
    v407 = &v317[16 * v300];
    v318 = ((unint64_t)v300 - 1) >> 6;
    v319 = operator new(8 * (v318 + 1));
    v320 = v319;
    v404 = v300;
    v405 = v318 + 1;
    v403 = v319;
    if (v300 >= 0x41)
      v321 = ((unint64_t)v300 - 1) >> 6;
    else
      v321 = 0;
    v319[v321] = 0;
    if (v300 >= 0x40)
      bzero(v319, 8 * ((unint64_t)v300 >> 6));
    if ((v300 & 0x3F) != 0)
      v320[(unint64_t)v300 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v300 & 0x3F));
  }
  else
  {
    v406 = 0;
    v407 = 0;
    v408 = 0;
    v403 = 0;
    v404 = 0;
    v405 = 0;
  }
  v322 = (_BYTE *)*((_QWORD *)&__p + 1);
  if ((_DWORD)v152)
    v323 = v153 == 0;
  else
    v323 = 1;
  if (v323)
    v324 = 0;
  else
    v324 = v152;
  *(_DWORD *)v420 = 1;
  *(_QWORD *)&v420[4] = v324;
  *(_QWORD *)&v425 = *(_QWORD *)v420;
  DWORD2(v425) = HIDWORD(v324);
  if (*(_QWORD *)((char *)&v425 + 4) <= 0x100000000uLL)
    v325 = 0x100000000;
  else
    v325 = *(_QWORD *)((char *)&v425 + 4);
  *(_DWORD *)v420 = 1;
  *(_DWORD *)&v420[4] = DWORD1(v425);
  v326 = *(_QWORD *)v420;
  v327 = HIDWORD(*(_QWORD *)((char *)&v425 + 4));
  *(_DWORD *)v420 = 1;
  *(_QWORD *)&v420[4] = (DWORD1(v425) != 0) | (unint64_t)(v325 << 32);
  v328 = *(_QWORD *)v420;
  if (DWORD2(v425) * (_DWORD)v325 == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *(_DWORD *)v420 = 1;
  *(_QWORD *)&v420[4] = v324;
  *(_QWORD *)&v425 = *(_QWORD *)v420;
  DWORD2(v425) = HIDWORD(v324);
  if (*(_QWORD *)((char *)&v425 + 4) <= 0x100000000uLL)
    v329 = 0x100000000;
  else
    v329 = *(_QWORD *)((char *)&v425 + 4);
  *(_DWORD *)v420 = 1;
  *(_QWORD *)&v420[4] = (DWORD1(v425) != 0) | (unint64_t)(v329 << 32);
  v330 = *(_QWORD *)v420;
  if (DWORD2(v425) * (_DWORD)v329 == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v401[0] = &v416;
  v401[1] = &v402;
  v401[2] = &v403;
  v401[3] = &v406;
  v401[4] = &v409;
  v402 = 0;
  if ((_DWORD)v327 && (_DWORD)v326 && HIDWORD(v326))
  {
    *(_QWORD *)v420 = 0;
    *(_DWORD *)&v420[8] = 0;
    *(_DWORD *)&v420[12] = v326 - 1;
    *(_QWORD *)&v420[16] = v328 | ((unint64_t)v330 << 32);
    *(_DWORD *)&v420[24] = v351;
    v421 = HIDWORD(v326) - 1;
    *(_QWORD *)&v422 = v330 & 0xFFFFFFFF00000000 | HIDWORD(v328);
    v423 = v325 | ((unint64_t)v329 << 32);
    LODWORD(v424) = v373;
    v331 = 0uLL;
    v426 = 0u;
    v427 = 0u;
    v425 = 0u;
    v332 = v327 - 1;
    DWORD2(v422) = v397;
    HIDWORD(v422) = v327 - 1;
    if ((_DWORD)v327 == 1)
    {
      v333 = v400;
      v334 = v388;
    }
    else
    {
      v333 = v400;
      v334 = v388;
      do
      {
        sub_223F76C7C(v420, (uint64_t)&v425, v401, v322, v333, v334, v331, v313);
        v322 += v325;
        v333 += v329;
        v334 += 4 * v373;
        --v332;
      }
      while (v332);
    }
    sub_223F76C7C(v420, (uint64_t)&v425, v401, v322, v333, v334, v331, v313);
  }
  v336 = v406;
  v335 = v407;
  v337 = v410;
  v338 = v406 == v407 && v409 == v410;
  v339 = v406;
  if (!v338)
  {
    v340 = (char *)v409 + 12;
    v341 = (char *)v406 + 16;
    do
    {
      do
      {
        v342 = v340;
        v313.i32[0] = *((_DWORD *)v340 - 1);
        v314.i64[0] = *(_QWORD *)(v340 - 12);
        v343 = v314;
        v343.i32[2] = v313.i32[0];
        v344 = v341;
        v313 = vmulq_n_f32(v343, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v343.f32, *(float32x2_t *)v343.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v314.f32, 1), *(float32x2_t *)v314.f32, 1), *(float32x2_t *)v313.f32, *(float32x2_t *)v313.f32).f32[0]));
        *((_DWORD *)v341 - 1) = v313.i32[2];
        *(_QWORD *)(v341 - 12) = v313.i64[0];
        v340 += 12;
        v341 += 16;
      }
      while (v344 != v335);
    }
    while (v342 != v337);
    v339 = v406;
    v336 = v407;
  }
  *(_OWORD *)v420 = *(_OWORD *)v412;
  *(_OWORD *)&v420[12] = *(_OWORD *)((char *)&v412[1] + 4);
  v422 = __p;
  v423 = v414;
  __p = 0uLL;
  v424 = v415;
  *(_QWORD *)&v425 = v339;
  *((_QWORD *)&v425 + 1) = v336;
  *(_QWORD *)&v426 = v408;
  v406 = 0;
  v407 = 0;
  v408 = 0;
  sub_223F5C258(v352, (__int128 *)v420, (uint64_t)&v425);
  if ((_QWORD)v425)
  {
    *((_QWORD *)&v425 + 1) = v425;
    operator delete((void *)v425);
  }
  if (*((_QWORD *)&v422 + 1))
    free(*((void **)&v422 + 1));
  *((_QWORD *)&v422 + 1) = 0;
  if (v403)
    operator delete(v403);
  if (v406)
  {
    v407 = (char *)v406;
    operator delete(v406);
  }
  if (v409)
  {
    v410 = (char *)v409;
    operator delete(v409);
  }
  if (*((_QWORD *)&__p + 1))
    free(*((void **)&__p + 1));
  if (v416)
  {
    v417 = (unsigned int *)v416;
    operator delete(v416);
  }
  kdebug_trace();
  sub_223F75B80(v412);
  if (**((int **)v412[0] + 7) <= 1)
  {
    v345 = atomic_load((unsigned __int8 *)&qword_2540CE320);
    if ((v345 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE320))
    {
      qword_2540CE318 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_SemanticSurfaceSegment");
      __cxa_guard_release(&qword_2540CE320);
    }
    v346 = qword_2540CE318;
    if (*(_BYTE *)(qword_2540CE318 + 16))
    {
      *(_QWORD *)(v346 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v346;
      *(_BYTE *)(v346 + 16) = 0;
    }
  }
}

void sub_223F75B80(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CE330);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE330))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.acv.trace");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CE328);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CE330);
  }
  *a1 = qword_2540CE328;
}

void sub_223F75C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CE330);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CE330);
  _Unwind_Resume(a1);
}

unint64_t sub_223F75C74(unint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t *v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t *v103;
  uint64_t **v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  int64_t v115;
  uint64_t *v116;
  int64_t v117;
  BOOL v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v85 = *(a2 - 1);
        v86 = *v10;
        if (*(_DWORD *)(**a3 + 4 * v85) > *(_DWORD *)(**a3 + 4 * *v10))
        {
          *v10 = v85;
          *(a2 - 1) = v86;
        }
        return result;
      case 3:
        v87 = *v10;
        v88 = v10[1];
        v89 = **a3;
        v90 = *(_DWORD *)(v89 + 4 * v88);
        v91 = *(_DWORD *)(v89 + 4 * *v10);
        v92 = *(a2 - 1);
        v93 = *(_DWORD *)(v89 + 4 * v92);
        if (v90 <= v91)
        {
          if (v93 > v90)
          {
            v10[1] = v92;
            *(a2 - 1) = v88;
            v148 = *v10;
            v147 = v10[1];
            if (*(_DWORD *)(v89 + 4 * v147) > *(_DWORD *)(v89 + 4 * *v10))
            {
              *v10 = v147;
              v10[1] = v148;
            }
          }
        }
        else
        {
          if (v93 <= v90)
          {
            *v10 = v88;
            v10[1] = v87;
            v160 = *(a2 - 1);
            if (*(_DWORD *)(v89 + 4 * v160) <= v91)
              return result;
            v10[1] = v160;
          }
          else
          {
            *v10 = v92;
          }
          *(a2 - 1) = v87;
        }
        return result;
      case 4:
        v94 = v10 + 1;
        v95 = v10[1];
        v96 = v10 + 2;
        v97 = v10[2];
        v98 = **a3;
        v99 = *(_DWORD *)(v98 + 4 * v95);
        v100 = (uint64_t *)*v10;
        v101 = *(_DWORD *)(v98 + 4 * *v10);
        v102 = *(_DWORD *)(v98 + 4 * v97);
        if (v99 <= v101)
        {
          if (v102 <= v99)
          {
LABEL_172:
            v95 = v97;
            v149 = *(a2 - 1);
            if (*(_DWORD *)(v98 + 4 * v149) <= *(_DWORD *)(v98 + 4 * v95))
              return result;
LABEL_173:
            *v96 = v149;
            *(a2 - 1) = v95;
            v156 = *v96;
            v157 = *v94;
            v158 = *(_DWORD *)(v98 + 4 * v156);
            if (v158 > *(_DWORD *)(v98 + 4 * v157))
            {
              v10[1] = v156;
              v10[2] = v157;
              v159 = *v10;
              if (v158 > *(_DWORD *)(v98 + 4 * *v10))
              {
                *v10 = v156;
                v10[1] = v159;
              }
            }
            return result;
          }
          *v94 = v97;
          *v96 = v95;
          v103 = v10;
          v104 = (uint64_t **)(v10 + 1);
          result = v95;
          if (v102 <= v101)
          {
LABEL_162:
            v149 = *(a2 - 1);
            if (*(_DWORD *)(v98 + 4 * v149) <= *(_DWORD *)(v98 + 4 * v95))
              return result;
            goto LABEL_173;
          }
        }
        else
        {
          v103 = v10;
          v104 = (uint64_t **)(v10 + 2);
          result = *v10;
          if (v102 <= v99)
          {
            *v10 = v95;
            v10[1] = (uint64_t)v100;
            v103 = v10 + 1;
            v104 = (uint64_t **)(v10 + 2);
            result = (unint64_t)v100;
            if (v102 <= v101)
              goto LABEL_172;
          }
        }
        *v103 = v97;
        *v104 = v100;
        v95 = result;
        goto LABEL_162;
      case 5:
        return (unint64_t)sub_223F76AE0(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, **a3);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 == a2)
              return result;
            v115 = (unint64_t)(v12 - 2) >> 1;
            v116 = *a3;
            v117 = v115;
            while (1)
            {
              if (v115 >= v117)
              {
                v119 = (2 * v117) | 1;
                v120 = &v10[v119];
                v121 = *v120;
                if (2 * v117 + 2 < v12)
                {
                  v122 = *v116;
                  if (*(_DWORD *)(*v116 + 4 * v121) > *(_DWORD *)(*v116 + 4 * v120[1]))
                  {
                    v121 = v120[1];
                    ++v120;
                    v119 = 2 * v117 + 2;
                  }
                  v123 = &v10[v117];
                  v124 = *v123;
                  result = *(unsigned int *)(v122 + 4 * *v123);
                  if (*(_DWORD *)(v122 + 4 * v121) > result)
                    goto LABEL_126;
                  do
                  {
LABEL_136:
                    v125 = v120;
                    *v123 = v121;
                    if (v115 < v119)
                      break;
                    v126 = (2 * v119) | 1;
                    v120 = &v10[v126];
                    v127 = 2 * v119 + 2;
                    v121 = *v120;
                    if (v127 < v12 && *(_DWORD *)(v122 + 4 * v121) > *(_DWORD *)(v122 + 4 * v120[1]))
                    {
                      v121 = v120[1];
                      ++v120;
                      v126 = v127;
                    }
                    v123 = v125;
                    v119 = v126;
                  }
                  while (*(_DWORD *)(v122 + 4 * v121) <= result);
                  *v125 = v124;
                  goto LABEL_126;
                }
                v122 = *v116;
                v123 = &v10[v117];
                v124 = *v123;
                result = *(unsigned int *)(*v116 + 4 * *v123);
                if (*(_DWORD *)(*v116 + 4 * v121) <= result)
                  goto LABEL_136;
              }
LABEL_126:
              v118 = v117-- <= 0;
              if (v118)
              {
                v128 = (unint64_t)v11 >> 3;
                do
                {
                  v129 = 0;
                  v130 = *v10;
                  v131 = *a3;
                  v132 = v10;
                  do
                  {
                    v133 = &v132[v129];
                    v136 = v133[1];
                    v134 = v133 + 1;
                    v135 = v136;
                    v137 = (2 * v129) | 1;
                    v138 = 2 * v129 + 2;
                    if (v138 < v128)
                    {
                      result = v134[1];
                      if (*(_DWORD *)(*v131 + 4 * v135) > *(_DWORD *)(*v131 + 4 * result))
                      {
                        v135 = v134[1];
                        ++v134;
                        v137 = v138;
                      }
                    }
                    *v132 = v135;
                    v132 = v134;
                    v129 = v137;
                  }
                  while (v137 <= (uint64_t)((unint64_t)(v128 - 2) >> 1));
                  if (v134 == --a2)
                  {
                    *v134 = v130;
                  }
                  else
                  {
                    *v134 = *a2;
                    *a2 = v130;
                    v139 = (char *)v134 - (char *)v10 + 8;
                    if (v139 >= 9)
                    {
                      v140 = (((unint64_t)v139 >> 3) - 2) >> 1;
                      v141 = &v10[v140];
                      v142 = *v141;
                      v143 = *v134;
                      v144 = *v131;
                      v145 = *(_DWORD *)(v144 + 4 * *v134);
                      if (*(_DWORD *)(v144 + 4 * *v141) > v145)
                      {
                        do
                        {
                          v146 = v141;
                          *v134 = v142;
                          if (!v140)
                            break;
                          v140 = (v140 - 1) >> 1;
                          v141 = &v10[v140];
                          v142 = *v141;
                          v134 = v146;
                        }
                        while (*(_DWORD *)(v144 + 4 * *v141) > v145);
                        *v146 = v143;
                      }
                    }
                  }
                  v118 = v128-- <= 2;
                }
                while (!v118);
                return result;
              }
            }
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = **a3;
          v16 = *(a2 - 1);
          v17 = *(_DWORD *)(v15 + 4 * v16);
          if ((unint64_t)v11 < 0x401)
          {
            v22 = *v10;
            v23 = *v14;
            v24 = *(_DWORD *)(v15 + 4 * *v10);
            v25 = *(_DWORD *)(v15 + 4 * *v14);
            if (v24 <= v25)
            {
              if (v17 > v24)
              {
                *v10 = v16;
                *(a2 - 1) = v22;
                v27 = *v14;
                if (*(_DWORD *)(v15 + 4 * *v10) > *(_DWORD *)(v15 + 4 * *v14))
                {
                  *v14 = *v10;
                  *v10 = v27;
                  --a4;
                  v28 = v27;
                  if ((a5 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v17 <= v24)
            {
              *v14 = v22;
              *v10 = v23;
              v40 = *(a2 - 1);
              if (*(_DWORD *)(v15 + 4 * v40) <= v25)
                goto LABEL_32;
              *v10 = v40;
            }
            else
            {
              *v14 = v16;
            }
            *(a2 - 1) = v23;
LABEL_32:
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_33;
            goto LABEL_55;
          }
          v18 = *v14;
          v19 = *v10;
          v20 = *(_DWORD *)(v15 + 4 * *v14);
          v21 = *(_DWORD *)(v15 + 4 * *v10);
          if (v20 <= v21)
          {
            if (v17 > v20)
            {
              *v14 = v16;
              *(a2 - 1) = v18;
              v26 = *v10;
              if (*(_DWORD *)(v15 + 4 * *v14) > *(_DWORD *)(v15 + 4 * *v10))
              {
                *v10 = *v14;
                *v14 = v26;
              }
            }
          }
          else
          {
            if (v17 <= v20)
            {
              *v10 = v18;
              *v14 = v19;
              v29 = *(a2 - 1);
              if (*(_DWORD *)(v15 + 4 * v29) <= v21)
                goto LABEL_23;
              *v14 = v29;
            }
            else
            {
              *v10 = v16;
            }
            *(a2 - 1) = v19;
          }
LABEL_23:
          v30 = &v10[v13];
          v33 = *(v30 - 1);
          v31 = v30 - 1;
          v32 = v33;
          v34 = v10[1];
          v35 = *(_DWORD *)(v15 + 4 * v33);
          v36 = *(_DWORD *)(v15 + 4 * v34);
          v37 = *(a2 - 2);
          v38 = *(_DWORD *)(v15 + 4 * v37);
          if (v35 <= v36)
          {
            if (v38 > v35)
            {
              *v31 = v37;
              *(a2 - 2) = v32;
              v39 = v10[1];
              if (*(_DWORD *)(v15 + 4 * *v31) > *(_DWORD *)(v15 + 4 * v39))
              {
                v10[1] = *v31;
                *v31 = v39;
              }
            }
          }
          else
          {
            if (v38 <= v35)
            {
              v10[1] = v32;
              *v31 = v34;
              v42 = *(a2 - 2);
              if (*(_DWORD *)(v15 + 4 * v42) <= v36)
                goto LABEL_37;
              *v31 = v42;
            }
            else
            {
              v10[1] = v37;
            }
            *(a2 - 2) = v34;
          }
LABEL_37:
          v43 = &v10[v13];
          v46 = v43[1];
          v44 = v43 + 1;
          v45 = v46;
          v47 = v10[2];
          v48 = *(_DWORD *)(v15 + 4 * v46);
          v49 = *(_DWORD *)(v15 + 4 * v47);
          v50 = *(a2 - 3);
          v51 = *(_DWORD *)(v15 + 4 * v50);
          if (v48 <= v49)
          {
            if (v51 > v48)
            {
              *v44 = v50;
              *(a2 - 3) = v45;
              v52 = v10[2];
              if (*(_DWORD *)(v15 + 4 * *v44) > *(_DWORD *)(v15 + 4 * v52))
              {
                v10[2] = *v44;
                *v44 = v52;
              }
            }
          }
          else
          {
            if (v51 <= v48)
            {
              v10[2] = v45;
              *v44 = v47;
              v53 = *(a2 - 3);
              if (*(_DWORD *)(v15 + 4 * v53) <= v49)
                goto LABEL_46;
              *v44 = v53;
            }
            else
            {
              v10[2] = v50;
            }
            *(a2 - 3) = v47;
          }
LABEL_46:
          v54 = *v14;
          v55 = *v31;
          v56 = *(_DWORD *)(v15 + 4 * *v14);
          v57 = *(_DWORD *)(v15 + 4 * *v31);
          v58 = *v44;
          v59 = *(_DWORD *)(v15 + 4 * *v44);
          if (v56 > v57)
          {
            if (v59 <= v56)
            {
              *v31 = v54;
              *v14 = v55;
              v31 = v14;
              v54 = v58;
              if (v59 <= v57)
              {
                v60 = *v10;
                *v10 = v55;
                *v14 = v60;
                --a4;
                v28 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v59 <= v56)
            goto LABEL_54;
          *v14 = v58;
          *v44 = v54;
          v44 = v14;
          v54 = v55;
          if (v59 > v57)
          {
LABEL_53:
            *v31 = v58;
            *v44 = v55;
LABEL_54:
            v61 = *v10;
            *v10 = v54;
            *v14 = v61;
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_33;
LABEL_55:
            v41 = *(_DWORD *)(v15 + 4 * v28);
            if (*(_DWORD *)(v15 + 4 * *(v10 - 1)) > v41)
              goto LABEL_56;
            if (v41 <= *(_DWORD *)(v15 + 4 * *(a2 - 1)))
            {
              v77 = v10 + 1;
              do
              {
                v10 = v77;
                if (v77 >= a2)
                  break;
                ++v77;
              }
              while (v41 <= *(_DWORD *)(v15 + 4 * *v10));
            }
            else
            {
              do
              {
                v76 = v10[1];
                ++v10;
              }
              while (v41 <= *(_DWORD *)(v15 + 4 * v76));
            }
            v78 = a2;
            if (v10 < a2)
            {
              v78 = a2;
              do
                v79 = *--v78;
              while (v41 > *(_DWORD *)(v15 + 4 * v79));
            }
            if (v10 < v78)
            {
              v80 = *v10;
              v81 = *v78;
              do
              {
                *v10 = v81;
                *v78 = v80;
                do
                {
                  v82 = v10[1];
                  ++v10;
                  v80 = v82;
                }
                while (v41 <= *(_DWORD *)(v15 + 4 * v82));
                do
                {
                  v83 = *--v78;
                  v81 = v83;
                }
                while (v41 > *(_DWORD *)(v15 + 4 * v83));
              }
              while (v10 < v78);
            }
            v84 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v84;
            a5 = 0;
            *v84 = v28;
            continue;
          }
          v75 = *v10;
          *v10 = v58;
          *v14 = v75;
          --a4;
          v28 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_33:
          v41 = *(_DWORD *)(v15 + 4 * v28);
LABEL_56:
          v62 = 0;
          do
            v63 = v10[++v62];
          while (*(_DWORD *)(v15 + 4 * v63) > v41);
          v64 = &v10[v62];
          v65 = a2;
          if (v62 == 1)
          {
            v65 = a2;
            do
            {
              if (v64 >= v65)
                break;
              v67 = *--v65;
            }
            while (*(_DWORD *)(v15 + 4 * v67) <= v41);
          }
          else
          {
            do
              v66 = *--v65;
            while (*(_DWORD *)(v15 + 4 * v66) <= v41);
          }
          if (v64 >= v65)
          {
            v73 = v64 - 1;
            if (v64 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v73;
            goto LABEL_74;
          }
          v68 = *v65;
          v69 = &v10[v62];
          v70 = v65;
          do
          {
            *v69 = v68;
            *v70 = v63;
            do
            {
              v71 = v69[1];
              ++v69;
              v63 = v71;
            }
            while (*(_DWORD *)(v15 + 4 * v71) > v41);
            do
            {
              v72 = *--v70;
              v68 = v72;
            }
            while (*(_DWORD *)(v15 + 4 * v72) <= v41);
          }
          while (v69 < v70);
          v73 = v69 - 1;
          if (v69 - 1 != v10)
            goto LABEL_73;
LABEL_74:
          *v73 = v28;
          if (v64 < v65)
            goto LABEL_77;
          v74 = sub_223F76764(v10, v73, *a3);
          v10 = v73 + 1;
          result = sub_223F76764(v73 + 1, a2, *a3);
          if (!(_DWORD)result)
          {
            if (v74)
              continue;
LABEL_77:
            result = sub_223F75C74(v9, v73, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v73 + 1;
            continue;
          }
          a2 = v73;
          if (v74)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if (v10 == a2)
            return result;
          v105 = v10 + 1;
          if (v10 + 1 == a2)
            return result;
          v106 = **a3;
          v107 = 8;
          v108 = v10;
          while (1)
          {
            v111 = *v108;
            v110 = v108[1];
            v108 = v105;
            v112 = *(_DWORD *)(v106 + 4 * v110);
            if (v112 > *(_DWORD *)(v106 + 4 * v111))
            {
              v113 = v107;
              do
              {
                *(uint64_t *)((char *)v10 + v113) = v111;
                v114 = v113 - 8;
                if (v113 == 8)
                {
                  v109 = v10;
                  goto LABEL_116;
                }
                v111 = *(uint64_t *)((char *)v10 + v113 - 16);
                v113 -= 8;
              }
              while (v112 > *(_DWORD *)(v106 + 4 * v111));
              v109 = (uint64_t *)((char *)v10 + v114);
LABEL_116:
              *v109 = v110;
            }
            v105 = v108 + 1;
            v107 += 8;
            if (v108 + 1 == a2)
              return result;
          }
        }
        if (v10 != a2)
        {
          v150 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v151 = **a3;
            do
            {
              v153 = *v9;
              v152 = v9[1];
              v9 = v150;
              v154 = *(_DWORD *)(v151 + 4 * v152);
              if (v154 > *(_DWORD *)(v151 + 4 * v153))
              {
                v155 = v9;
                do
                {
                  *v155 = v153;
                  v153 = *(v155 - 2);
                  --v155;
                }
                while (v154 > *(_DWORD *)(v151 + 4 * v153));
                *v155 = v152;
              }
              v150 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

BOOL sub_223F76764(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v14 = *(a2 - 1);
      v15 = *a1;
      if (*(_DWORD *)(*a3 + 4 * v14) <= *(_DWORD *)(*a3 + 4 * *a1))
        return 1;
      *a1 = v14;
      *(a2 - 1) = v15;
      return 1;
    case 3:
      v16 = *a1;
      v17 = a1[1];
      v18 = *a3;
      v19 = *(_DWORD *)(*a3 + 4 * v17);
      v20 = *(_DWORD *)(*a3 + 4 * *a1);
      v21 = *(a2 - 1);
      v22 = *(_DWORD *)(*a3 + 4 * v21);
      if (v19 <= v20)
      {
        if (v22 <= v19)
          return 1;
        a1[1] = v21;
        *(a2 - 1) = v17;
        v44 = *a1;
        v43 = a1[1];
        if (*(_DWORD *)(v18 + 4 * v43) <= *(_DWORD *)(v18 + 4 * *a1))
          return 1;
        *a1 = v43;
        a1[1] = v44;
        return 1;
      }
      else if (v22 <= v19)
      {
        *a1 = v17;
        a1[1] = v16;
        v50 = *(a2 - 1);
        if (*(_DWORD *)(v18 + 4 * v50) <= v20)
          return 1;
        a1[1] = v50;
        *(a2 - 1) = v16;
        return 1;
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v16;
        return 1;
      }
    case 4:
      v23 = a1 + 1;
      v24 = a1[1];
      v25 = a1 + 2;
      v26 = a1[2];
      v27 = *a3;
      v28 = *(_DWORD *)(*a3 + 4 * v24);
      v29 = *a1;
      v30 = *(_DWORD *)(*a3 + 4 * *a1);
      v31 = *(_DWORD *)(*a3 + 4 * v26);
      if (v28 > v30)
      {
        v32 = a1;
        v33 = a1 + 2;
        v34 = *a1;
        if (v31 <= v28)
        {
          *a1 = v24;
          a1[1] = v29;
          v32 = a1 + 1;
          v33 = a1 + 2;
          v34 = v29;
          if (v31 <= v30)
            goto LABEL_38;
        }
LABEL_35:
        *v32 = v26;
        *v33 = v29;
        v24 = v34;
LABEL_36:
        v45 = *(a2 - 1);
        if (*(_DWORD *)(v27 + 4 * v45) <= *(_DWORD *)(v27 + 4 * v24))
          return 1;
        goto LABEL_39;
      }
      if (v31 > v28)
      {
        *v23 = v26;
        *v25 = v24;
        v32 = a1;
        v33 = a1 + 1;
        v34 = v24;
        if (v31 <= v30)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v24 = v26;
      v45 = *(a2 - 1);
      if (*(_DWORD *)(v27 + 4 * v45) <= *(_DWORD *)(v27 + 4 * v24))
        return 1;
LABEL_39:
      *v25 = v45;
      *(a2 - 1) = v24;
      v46 = *v25;
      v47 = *v23;
      v48 = *(_DWORD *)(v27 + 4 * v46);
      if (v48 <= *(_DWORD *)(v27 + 4 * v47))
        return 1;
      a1[1] = v46;
      a1[2] = v47;
      v49 = *a1;
      if (v48 <= *(_DWORD *)(v27 + 4 * *a1))
        return 1;
      *a1 = v46;
      a1[1] = v49;
      return 1;
    case 5:
      sub_223F76AE0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, *a3);
      return 1;
    default:
      v5 = a1 + 2;
      v4 = a1[2];
      v6 = a1[1];
      v7 = *a3;
      v8 = *(_DWORD *)(*a3 + 4 * v6);
      v9 = *a1;
      v10 = *(_DWORD *)(v7 + 4 * *a1);
      v11 = *(_DWORD *)(v7 + 4 * v4);
      if (v8 <= v10)
      {
        if (v11 <= v8)
          goto LABEL_20;
        a1[1] = v4;
        *v5 = v6;
        v12 = a1;
        v13 = a1 + 1;
      }
      else
      {
        v12 = a1;
        v13 = a1 + 2;
        if (v11 > v8)
          goto LABEL_19;
        *a1 = v6;
        a1[1] = v9;
        v12 = a1 + 1;
        v13 = a1 + 2;
      }
      if (v11 <= v10)
        goto LABEL_20;
LABEL_19:
      *v12 = v4;
      *v13 = v9;
LABEL_20:
      v35 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v36 = 0;
      for (i = 24; ; i += 8)
      {
        v38 = *v35;
        v39 = *v5;
        v40 = *(_DWORD *)(v7 + 4 * *v35);
        if (v40 > *(_DWORD *)(v7 + 4 * v39))
          break;
LABEL_23:
        v5 = v35++;
        if (v35 == a2)
          return 1;
      }
      v41 = i;
      do
      {
        *(uint64_t *)((char *)a1 + v41) = v39;
        v42 = v41 - 8;
        if (v41 == 8)
        {
          *a1 = v38;
          if (++v36 != 8)
            goto LABEL_23;
          return v35 + 1 == a2;
        }
        v39 = *(uint64_t *)((char *)a1 + v41 - 16);
        v41 -= 8;
      }
      while (v40 > *(_DWORD *)(v7 + 4 * v39));
      *(uint64_t *)((char *)a1 + v42) = v38;
      if (++v36 != 8)
        goto LABEL_23;
      return v35 + 1 == a2;
  }
}

uint64_t *sub_223F76AE0(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *a2;
  v7 = *result;
  v8 = *(_DWORD *)(a6 + 4 * *a2);
  v9 = *(_DWORD *)(a6 + 4 * *result);
  v10 = *a3;
  v11 = *(_DWORD *)(a6 + 4 * *a3);
  if (v8 <= v9)
  {
    if (v11 <= v8)
    {
      v6 = *a3;
      v13 = *a4;
      if (*(_DWORD *)(a6 + 4 * *a4) <= *(_DWORD *)(a6 + 4 * v10))
        goto LABEL_17;
      goto LABEL_14;
    }
    *a2 = v10;
    *a3 = v6;
    v12 = *result;
    if (*(_DWORD *)(a6 + 4 * *a2) > *(_DWORD *)(a6 + 4 * *result))
    {
      *result = *a2;
      *a2 = v12;
      v6 = *a3;
      v13 = *a4;
      if (*(_DWORD *)(a6 + 4 * *a4) <= *(_DWORD *)(a6 + 4 * *a3))
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    if (v11 <= v8)
    {
      *result = v6;
      *a2 = v7;
      v6 = *a3;
      if (*(_DWORD *)(a6 + 4 * *a3) <= v9)
        goto LABEL_11;
      *a2 = v6;
    }
    else
    {
      *result = v10;
    }
    *a3 = v7;
    v6 = v7;
  }
LABEL_11:
  v13 = *a4;
  if (*(_DWORD *)(a6 + 4 * *a4) <= *(_DWORD *)(a6 + 4 * v6))
    goto LABEL_17;
LABEL_14:
  *a3 = v13;
  *a4 = v6;
  v14 = *a2;
  if (*(_DWORD *)(a6 + 4 * *a3) > *(_DWORD *)(a6 + 4 * *a2))
  {
    *a2 = *a3;
    *a3 = v14;
    v15 = *result;
    if (*(_DWORD *)(a6 + 4 * *a2) > *(_DWORD *)(a6 + 4 * *result))
    {
      *result = *a2;
      *a2 = v15;
    }
  }
LABEL_17:
  v16 = *a4;
  if (*(_DWORD *)(a6 + 4 * *a5) > *(_DWORD *)(a6 + 4 * *a4))
  {
    *a4 = *a5;
    *a5 = v16;
    v17 = *a3;
    if (*(_DWORD *)(a6 + 4 * *a4) > *(_DWORD *)(a6 + 4 * *a3))
    {
      *a3 = *a4;
      *a4 = v17;
      v18 = *a2;
      if (*(_DWORD *)(a6 + 4 * *a3) > *(_DWORD *)(a6 + 4 * *a2))
      {
        *a2 = *a3;
        *a3 = v18;
        v19 = *result;
        if (*(_DWORD *)(a6 + 4 * *a2) > *(_DWORD *)(a6 + 4 * *result))
        {
          *result = *a2;
          *a2 = v19;
        }
      }
    }
  }
  return result;
}

_DWORD *sub_223F76C7C(_DWORD *result, uint64_t a2, _QWORD **a3, _BYTE *a4, _BYTE *a5, uint64_t a6, float32x4_t a7, float32x4_t a8)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;

  v8 = result[6];
  *(_QWORD *)a2 = a4;
  *(_QWORD *)(a2 + 16) = a5;
  *(_QWORD *)(a2 + 32) = a6;
  *(_DWORD *)(a2 + 40) = v8;
  v9 = result[7];
  if (v9)
  {
    v10 = 0;
    v12 = *a3;
    v11 = a3[1];
    v13 = *v11;
    do
    {
      *(_QWORD *)a2 = a4;
      *(_QWORD *)(a2 + 16) = a5;
      *(_QWORD *)(a2 + 32) = a6;
      v16 = *(unsigned int *)(*v12 + 4 * v13);
      if ((_DWORD)v16 != -1)
      {
        v17 = a4;
        if ((*(_QWORD *)(*a3[2] + 8 * (v16 >> 6)) & (1 << v16)) == 0)
        {
          v18 = *a3[3] + 16 * v16;
          *(_BYTE *)v18 = *a5;
          *(_QWORD *)(v18 + 8) = 0;
          *(_DWORD *)(v18 + 4) = 0;
          *(_QWORD *)(*a3[2] + 8 * (v16 >> 6)) |= 1 << v16;
          v17 = *(_BYTE **)a2;
        }
        *v17 = v16;
        v14 = *(_QWORD *)(a2 + 32);
        v15 = *a3[4] + 12 * v16;
        a7.i64[0] = *(_QWORD *)v15;
        a7.i32[2] = *(_DWORD *)(v15 + 8);
        a8.i64[0] = *(_QWORD *)v14;
        a8.i32[2] = *(_DWORD *)(v14 + 8);
        a7 = vaddq_f32(a7, a8);
        *(_DWORD *)(v15 + 8) = a7.i32[2];
        *(_QWORD *)v15 = a7.i64[0];
        v12 = *a3;
        v11 = a3[1];
        v13 = *v11;
        v9 = result[7];
      }
      *v11 = ++v13;
      a4 += result[8];
      a5 += result[9];
      a6 += 4 * result[10];
      ++v10;
    }
    while (v10 < v9);
  }
  else
  {
    v12 = *a3;
    v11 = a3[1];
    v13 = *v11;
  }
  *(_QWORD *)a2 = a4;
  *(_QWORD *)(a2 + 16) = a5;
  *(_QWORD *)(a2 + 32) = a6;
  v19 = *(unsigned int *)(*v12 + 4 * v13);
  if ((_DWORD)v19 != -1)
  {
    if ((*(_QWORD *)(*a3[2] + 8 * (v19 >> 6)) & (1 << v19)) == 0)
    {
      v20 = *a3[3] + 16 * v19;
      *(_BYTE *)v20 = *a5;
      *(_QWORD *)(v20 + 8) = 0;
      *(_DWORD *)(v20 + 4) = 0;
      *(_QWORD *)(*a3[2] + 8 * (v19 >> 6)) |= 1 << v19;
      a4 = *(_BYTE **)a2;
    }
    *a4 = v19;
    v21 = *(_QWORD *)(a2 + 32);
    v22 = *a3[4] + 12 * v19;
    a7.i64[0] = *(_QWORD *)v22;
    a7.i32[2] = *(_DWORD *)(v22 + 8);
    a8.i64[0] = *(_QWORD *)v21;
    a8.i32[2] = *(_DWORD *)(v21 + 8);
    v23 = vaddq_f32(a7, a8);
    *(_DWORD *)(v22 + 8) = v23.i32[2];
    *(_QWORD *)v22 = v23.i64[0];
    v11 = a3[1];
    v13 = *v11;
  }
  *v11 = v13 + 1;
  return result;
}

_QWORD *sub_223F76E58(uint64_t a1)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  std::chrono::steady_clock::time_point v3;
  _QWORD *v4;
  uint64_t v6[3];
  char v7;
  uint64_t v8;

  v8 = a1;
  v1 = atomic_load((unsigned __int8 *)&qword_255795098);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_255795098))
  {
    xmmword_255795070 = 0u;
    unk_255795080 = 0u;
    dword_255795090 = 1065353216;
    __cxa_atexit((void (*)(void *))sub_223F76FDC, &xmmword_255795070, &dword_22314D000);
    __cxa_guard_release(&qword_255795098);
  }
  v2 = atomic_load((unsigned __int8 *)&qword_2557950A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2557950A0))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_25578F178, &dword_22314D000);
    __cxa_guard_release(&qword_2557950A0);
  }
  std::mutex::lock(&stru_25578F178);
  if (!sub_223F77024(&xmmword_255795070, &v8))
  {
    v3.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v6[0] = v8;
    v6[1] = v3.__d_.__rep_;
    v6[2] = 0;
    v7 = 1;
    sub_223F77138((float *)&xmmword_255795070, v6, (uint64_t)v6);
  }
  v4 = sub_223F77024(&xmmword_255795070, &v8) + 3;
  std::mutex::unlock(&stru_25578F178);
  return v4;
}

void sub_223F76F94(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_25578F178);
  _Unwind_Resume(a1);
}

void sub_223F76FAC(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_25578F178);
  _Unwind_Resume(a1);
}

void sub_223F76FC4(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_25578F178);
  _Unwind_Resume(a1);
}

uint64_t sub_223F76FDC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *sub_223F77024(_QWORD *a1, uint64_t *a2)
{
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = HIDWORD(*a2);
  v5 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v4);
  v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
  v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v6;
    if (v6 >= *(_QWORD *)&v2)
      v8 = v6 % *(_QWORD *)&v2;
  }
  else
  {
    v8 = v6 & (*(_QWORD *)&v2 - 1);
  }
  v9 = *(_QWORD **)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  result = (_QWORD *)*v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      v11 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v13 = result[1];
        if (v13 == v6)
        {
          if (result[2] == v3)
            return result;
        }
        else if ((v13 & v11) != v8)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v12 = result[1];
      if (v12 == v6)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v2)
          v12 %= *(_QWORD *)&v2;
        if (v12 != v8)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

char *sub_223F77138(float *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  char *v17;
  float v18;
  float v19;
  _QWORD *v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  size_t v31;
  size_t v32;
  size_t v33;
  _QWORD *i;
  size_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *((_QWORD *)a1 + 1);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return (char *)v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return (char *)v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v17 = (char *)operator new(0x30uLL);
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = v9;
  *((_QWORD *)v17 + 2) = *(_QWORD *)a3;
  *(_OWORD *)(v17 + 24) = *(_OWORD *)(a3 + 8);
  *((_QWORD *)v17 + 5) = *(_QWORD *)(a3 + 24);
  v18 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v19 = a1[8];
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *((_QWORD *)a1 + 1);
    }
    if (prime > v10)
    {
LABEL_37:
      if (prime >> 61)
        sub_223174E94();
      v26 = operator new(8 * prime);
      v27 = *(_QWORD **)a1;
      *(_QWORD *)a1 = v26;
      if (v27)
        operator delete(v27);
      v28 = 0;
      *((_QWORD *)a1 + 1) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
      while (prime != v28);
      v30 = (uint64_t *)(a1 + 4);
      v29 = (_QWORD *)*((_QWORD *)a1 + 2);
      if (!v29)
        goto LABEL_69;
      v31 = v29[1];
      v32 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v33 = v31 & v32;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v30;
        for (i = (_QWORD *)*v29; *v29; i = (_QWORD *)*v29)
        {
          v35 = i[1] & v32;
          if (v35 == v33)
          {
            v29 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
          {
            *v29 = *i;
            v36 = 8 * v35;
            *i = **(_QWORD **)(*(_QWORD *)a1 + v36);
            **(_QWORD **)(*(_QWORD *)a1 + v36) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v29;
            v29 = i;
            v33 = v35;
          }
        }
        goto LABEL_69;
      }
      if (v31 >= prime)
        v31 %= prime;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v30;
      v40 = (_QWORD *)*v29;
      if (!*v29)
      {
LABEL_69:
        v10 = prime;
        v43 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_70;
        goto LABEL_85;
      }
      while (1)
      {
        v42 = v40[1];
        if (v42 >= prime)
          v42 %= prime;
        if (v42 == v31)
          goto LABEL_63;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v42))
        {
          *v29 = *v40;
          v41 = 8 * v42;
          *v40 = **(_QWORD **)(*(_QWORD *)a1 + v41);
          **(_QWORD **)(*(_QWORD *)a1 + v41) = v40;
          v40 = v29;
LABEL_63:
          v29 = v40;
          v40 = (_QWORD *)*v40;
          if (!v40)
            goto LABEL_69;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v29;
          v29 = v40;
          v40 = (_QWORD *)*v40;
          v31 = v42;
          if (!v40)
            goto LABEL_69;
        }
      }
    }
    if (prime < v10)
    {
      v37 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v10 < 3 || (v38 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime < v10)
      {
        if (!prime)
        {
          v44 = *(_QWORD **)a1;
          *(_QWORD *)a1 = 0;
          if (v44)
            operator delete(v44);
          v10 = 0;
          *((_QWORD *)a1 + 1) = 0;
          v43 = -1;
          goto LABEL_85;
        }
        goto LABEL_37;
      }
      v10 = *((_QWORD *)a1 + 1);
    }
    v43 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
LABEL_70:
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v20 = *(_QWORD **)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v20 = *(_QWORD **)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_26;
      }
      goto LABEL_86;
    }
LABEL_85:
    v3 = v43 & v9;
    v20 = *(_QWORD **)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v43 & v9));
    if (v21)
      goto LABEL_26;
    goto LABEL_86;
  }
  v20 = *(_QWORD **)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
LABEL_26:
    *(_QWORD *)v17 = *v21;
LABEL_92:
    *v21 = v17;
    goto LABEL_93;
  }
LABEL_86:
  *(_QWORD *)v17 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v17;
  v20[v3] = a1 + 4;
  if (*(_QWORD *)v17)
  {
    v45 = *(_QWORD *)(*(_QWORD *)v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v45 >= v10)
        v45 %= v10;
    }
    else
    {
      v45 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v45);
    goto LABEL_92;
  }
LABEL_93:
  ++*((_QWORD *)a1 + 3);
  return v17;
}

void sub_223F77638(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223F7764C(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t v5;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  _QWORD *v24;
  uint64_t *v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  unint64_t *v39;
  __int128 v40;
  __int128 v41;
  unint64_t *v42;
  int64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  char *v49;
  unint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  unint64_t *v57;
  uint64_t v58;
  unint64_t *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  float32x2_t v66;
  float32x2_t v67;
  int v68;
  int v69;
  int *v70;
  int *v71;
  int v72;
  int v73;
  int *v74;
  int v75;
  uint64_t v76;
  BOOL v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  int8x16_t v85;
  float v86;
  uint64_t v87;
  float *v88;
  unint64_t v89;
  _DWORD *v90;
  int v91;
  unsigned int v92;
  unint64_t v93;
  float v94;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  float v99;
  float v100;
  float *v101;
  float *v102;
  float v103;
  float *v104;
  float *v105;
  float v106;
  float v107;
  uint64_t v108;
  int v109;
  unsigned int v110;
  int8x16_t v111;
  float v112;
  uint64_t v113;
  float *v114;
  uint64_t *v115;
  int8x16_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  void *__p;
  float *v123;
  unint64_t *v124;
  _QWORD v125[2];

  v8 = a3[1];
  v9 = a3[2];
  v10 = a3[3];
  v11 = vcvt_f32_f64(*(float64x2_t *)(a1 + 112));
  v12 = vcvt_f32_f64(*(float64x2_t *)(a1 + 96));
  v13 = vcvt_f32_f64(*(float64x2_t *)(a1 + 80));
  v14 = vcvt_f32_f64(*(float64x2_t *)(a1 + 64));
  v15 = vcvt_f32_f64(*(float64x2_t *)(a1 + 48));
  v16 = vcvt_f32_f64(*(float64x2_t *)(a1 + 32));
  v17 = vcvt_f32_f64(*(float64x2_t *)(a1 + 16));
  v18 = vcvt_f32_f64(*(float64x2_t *)a1);
  v19 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*a3, v18.f32[0]), v8, v18, 1), v9, v17.f32[0]), v10, v17, 1);
  v20 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*a3, v16.f32[0]), v8, v16, 1), v9, v15.f32[0]), v10, v15, 1);
  v21 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*a3, v14.f32[0]), v8, v14, 1), v9, v13.f32[0]), v10, v13, 1);
  v22 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*a3, v12.f32[0]), v8, v12, 1), v9, v11.f32[0]);
  v118 = v19;
  v119 = v20;
  v120 = v21;
  v121 = vmlaq_lane_f32(v22, v10, v11, 1);
  v23 = sub_223F358C8((uint64_t)&v118, a2, (uint64_t)&v117, v121, v8.u64[0], v10);
  if (v117.i8[12])
  {
    v24 = (_QWORD *)(*(uint64_t (**)(uint64_t, float32x4_t))(*(_QWORD *)a2 + 16))(a2, v23);
    v25 = *(uint64_t **)(a1 + 136);
    v115 = *(uint64_t **)(a1 + 144);
    if (v25 != v115)
    {
      v26 = (float32x2_t)v24[5];
      v27 = (float32x2_t)v24[6];
      v28 = (float32x2_t)v24[7];
      v29 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v26, v118.f32[0]), v27, *(float32x2_t *)v118.f32, 1), v28, v118, 2);
      v30 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL), vmla_lane_f32(vmul_f32(*(float32x2_t *)v118.f32, 0), 0, *(float32x2_t *)v118.f32, 1));
      v31 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v26, v119.f32[0]), v27, *(float32x2_t *)v119.f32, 1), v28, v119, 2);
      v32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v119, (int8x16_t)v119, 8uLL), vmla_lane_f32(vmul_f32(*(float32x2_t *)v119.f32, 0), 0, *(float32x2_t *)v119.f32, 1));
      v33 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v26, v121.f32[0]), v27, *(float32x2_t *)v121.f32, 1), v28, v121, 2);
      v34 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL), vmla_lane_f32(vmul_f32(*(float32x2_t *)v121.f32, 0), 0, *(float32x2_t *)v121.f32, 1));
      while (1)
      {
        v35 = *v25;
        v36 = v25[1];
        __p = 0;
        v123 = 0;
        v124 = 0;
        v37 = v36 - v35;
        if (v36 != v35)
        {
          if (v37 < 0)
            sub_2236B43DC();
          v38 = v37 >> 3;
          v39 = (unint64_t *)operator new(v37);
          __p = v39;
          v123 = (float *)v39;
          v124 = &v39[v38];
          while (1)
          {
            while (1)
            {
              LODWORD(v40) = *(_DWORD *)v35;
              LODWORD(v41) = *(_DWORD *)(v35 + 4);
              *(float32x2_t *)&v40 = vdiv_f32(vadd_f32(v33, vmla_n_f32(vmul_n_f32(v29, *(float *)v35), v31, *(float *)&v41)), (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32(v34, vmla_f32(vmul_f32(v30, *(float32x2_t *)&v40), *(float32x2_t *)&v41, v32)), 0));
              LODWORD(v4) = llroundf(*(float *)&v40);
              LODWORD(v5) = llroundf(*((float *)&v40 + 1));
              if (v39 >= v124)
                break;
              *v39++ = v4 | (v5 << 32);
              v123 = (float *)v39;
              v35 += 8;
              if (v35 == v36)
                goto LABEL_40;
            }
            v42 = (unint64_t *)__p;
            v43 = (char *)v39 - (_BYTE *)__p;
            v44 = ((char *)v39 - (_BYTE *)__p) >> 3;
            v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 61)
              sub_2236B43DC();
            v46 = (char *)v124 - (_BYTE *)__p;
            if (((char *)v124 - (_BYTE *)__p) >> 2 > v45)
              v45 = v46 >> 2;
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
              v47 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v47 = v45;
            if (v47)
            {
              if (v47 >> 61)
                sub_223174E94();
              v48 = operator new(8 * v47);
            }
            else
            {
              v48 = 0;
            }
            v49 = &v48[8 * v44];
            *(_QWORD *)v49 = v4 | (v5 << 32);
            v4 = (unint64_t)(v49 + 8);
            if (v39 == v42)
            {
              __p = &v48[8 * v44];
              v123 = (float *)(v49 + 8);
              v124 = (unint64_t *)&v48[8 * v47];
              goto LABEL_28;
            }
            v50 = (char *)v39 - (char *)v42 - 8;
            if (v50 >= 0x168)
            {
              v53 = ((char *)(v39 - 1) - (char *)v42) & 0xFFFFFFFFFFFFFFF8;
              if (&v48[v43 - 8 - v53] > &v48[v43 - 8])
              {
                v51 = v39;
              }
              else if ((unint64_t *)((char *)v39 - v53 - 8) > v39 - 1)
              {
                v51 = v39;
              }
              else if ((unint64_t)((char *)v39 - v48 - v43) >= 0x20)
              {
                v54 = (v50 >> 3) + 1;
                v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
                v51 = &v39[v55 / 0xFFFFFFFFFFFFFFF8];
                v49 -= v55;
                v56 = &v48[8 * v44 - 16];
                v57 = v39 - 2;
                v58 = v54 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v41 = *((_OWORD *)v57 - 1);
                  v40 = *(_OWORD *)v57;
                  *(v56 - 1) = v41;
                  *v56 = v40;
                  v56 -= 2;
                  v57 -= 4;
                  v58 -= 4;
                }
                while (v58);
                if (v54 == (v54 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_24;
              }
              else
              {
                v51 = v39;
              }
            }
            else
            {
              v51 = v39;
            }
            do
            {
              v52 = *--v51;
              *((_QWORD *)v49 - 1) = v52;
              v49 -= 8;
            }
            while (v51 != v42);
LABEL_24:
            v39 = (unint64_t *)__p;
            __p = v49;
            v123 = (float *)v4;
            v124 = (unint64_t *)&v48[8 * v47];
            if (v39)
            {
LABEL_28:
              operator delete(v39);
              v39 = (unint64_t *)v4;
              v123 = (float *)v4;
              v35 += 8;
              if (v35 == v36)
              {
LABEL_40:
                v59 = (unint64_t *)__p;
                goto LABEL_42;
              }
            }
            else
            {
              v39 = (unint64_t *)v4;
              v123 = (float *)v4;
              v35 += 8;
              if (v35 == v36)
                goto LABEL_40;
            }
          }
        }
        v39 = 0;
        v59 = 0;
LABEL_42:
        v60 = *a4;
        v4 = a4[1];
        v61 = *((_DWORD *)a4 + 5);
        __p = 0;
        v123 = 0;
        v124 = 0;
        v62 = (char *)v39 - (char *)v59;
        if (v39 != v59)
          break;
LABEL_93:
        if (v59)
          operator delete(v59);
        v25 += 3;
        if (v25 == v115)
          return;
      }
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF9)
        sub_2236B43DC();
      v63 = v62 >> 3;
      __p = operator new(2 * v62);
      v123 = (float *)__p;
      v124 = (unint64_t *)((char *)__p + 16 * (v62 >> 3));
      v125[0] = 0;
      sub_2236B5220(v62 >> 3, (uint64_t)v59, (_DWORD *)v125 + 1, v125, (char **)&__p);
      v64 = 126 - 2 * __clz(((char *)v123 - (_BYTE *)__p) >> 4);
      if (v123 == __p)
        v65 = 0;
      else
        v65 = v64;
      sub_223F789CC((float *)__p, v123, v65, 1);
      v68 = v125[0];
      v69 = HIDWORD(v125[0]);
      if (HIDWORD(v125[0]) != LODWORD(v125[0]))
      {
        if (HIDWORD(v125[0]) != LODWORD(v125[0]) + 1)
        {
          v89 = 0;
          v90 = __p;
          v91 = v4 - 1;
          v92 = v61 * HIDWORD(v125[0]);
          v93 = 1;
          do
          {
            if (v89 <= v93)
              v96 = v93;
            else
              v96 = v89;
            if (v90[4 * v89 + 1] == v69 && v69 < SLODWORD(v125[0]))
              v89 = v96 + 1;
            if (v89 <= v93)
              v97 = v93;
            else
              v97 = v89;
            if (v90[4 * v93 + 1] == v69 && v69 < SLODWORD(v125[0]))
              v98 = v97 + 1;
            else
              v98 = v93;
            v99 = *(float *)&v90[4 * v89 + 2];
            v100 = *(float *)&v90[4 * v98 + 2];
            if (v99 <= v100)
              v93 = v98;
            else
              v93 = v89;
            if (v99 > v100)
              v89 = v98;
            v101 = (float *)&v90[4 * v89];
            v103 = v101[2];
            v102 = v101 + 2;
            v94 = v103;
            v104 = (float *)&v90[4 * v93];
            v106 = v104[2];
            v105 = v104 + 2;
            v107 = v106;
            if ((v69 & 0x80000000) == 0 && v69 < SHIDWORD(v4))
            {
              LODWORD(v108) = llroundf(v107);
              if ((v108 & 0x80000000) == 0)
              {
                v109 = llroundf(v94);
                if ((int)v4 > v109)
                {
                  v110 = v109 & ~(v109 >> 31);
                  v108 = v91 >= (int)v108 ? v108 : v91;
                  if (v110 != (_DWORD)v108 + 1)
                  {
                    v111 = v117;
                    v66.f32[0] = (float)(int)v110;
                    v67.f32[0] = (float)v69;
                    v66 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v117.i8, v66), v67, *(float32x2_t *)v117.i8, 1);
                    LODWORD(v112) = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v111, v111, 8uLL), v66).u32[0];
                    v113 = v108 - v110 + 1;
                    v114 = (float *)(v60 + 4 * v92 + 4 * v110);
                    do
                    {
                      if (v112 > *v114)
                      {
                        *v114 = v112;
                        v111.i32[0] = v117.i32[0];
                      }
                      v112 = v112 + *(float *)v111.i32;
                      ++v114;
                      --v113;
                    }
                    while (v113);
                    v94 = *v102;
                  }
                }
              }
            }
            *v102 = v94 + *(float *)&v90[4 * v89 + 3];
            *v105 = *(float *)&v90[4 * v93 + 3] + *v105;
            v92 += v61;
          }
          while (v69++ != v68);
        }
        goto LABEL_91;
      }
      v70 = (int *)v59;
      v71 = (int *)v59;
      if ((unint64_t)v62 < 0x10)
        goto LABEL_77;
      v71 = (int *)(v59 + 1);
      v72 = *((_DWORD *)v59 + 2);
      v73 = *(_DWORD *)v59;
      if (v72 >= *(_DWORD *)v59)
        v70 = (int *)v59;
      else
        v70 = (int *)(v59 + 1);
      if (v72 < v73)
        v71 = (int *)v59;
      if (v62 == 16)
      {
LABEL_77:
        if (&v59[v63] == (unint64_t *)v70)
          goto LABEL_91;
      }
      else
      {
        v74 = (int *)(v59 + 2);
        if (v72 <= v73)
          v75 = *(_DWORD *)v59;
        else
          v75 = *((_DWORD *)v59 + 2);
        if (v72 < v73)
          v73 = *((_DWORD *)v59 + 2);
        v76 = 8 * v63 - 24;
        while (v76)
        {
          v78 = v74[2];
          v79 = *v74;
          if (v78 >= *v74)
          {
            if (v79 < v73)
            {
              v73 = *v74;
              v70 = v74;
            }
            v77 = v78 < v75;
            if (v78 > v75)
              v75 = v74[2];
            if (!v77)
              v71 = v74 + 2;
            v74 += 4;
            v76 -= 16;
            if (v76 == -8)
              goto LABEL_77;
          }
          else
          {
            v73 = *v70;
            if (v78 < *v70)
            {
              v73 = v74[2];
              v70 = v74 + 2;
            }
            v75 = *v71;
            if (v79 > *v71)
              v75 = *v74;
            if (v79 >= *v71)
              v71 = v74;
            v74 += 4;
            v76 -= 16;
            if (v76 == -8)
              goto LABEL_77;
          }
        }
        if (*v74 >= *v70)
        {
          if (*v74 >= *v71)
            v71 = v74;
          if (&v59[v63] == (unint64_t *)v70)
            goto LABEL_91;
        }
        else
        {
          v70 = v74;
          if (&v59[v63] == (unint64_t *)v74)
          {
LABEL_91:
            if (__p)
            {
              v123 = (float *)__p;
              operator delete(__p);
            }
            goto LABEL_93;
          }
        }
      }
      v80 = v70[1];
      if ((v80 & 0x80000000) == 0 && v80 < SHIDWORD(v4))
      {
        v81 = *v71;
        if ((*v71 & 0x80000000) == 0)
        {
          v82 = *v70;
          if (v82 < (int)v4)
          {
            v83 = v82 & ~(v82 >> 31);
            LODWORD(v84) = v4 - 1;
            v84 = (int)v4 - 1 >= v81 ? v81 : v84;
            if (v83 != (_DWORD)v84 + 1)
            {
              v85 = v117;
              v66.f32[0] = (float)(int)v83;
              v67.f32[0] = (float)v80;
              LODWORD(v86) = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL), vmla_lane_f32(vmul_f32(*(float32x2_t *)v117.i8, v66), v67, *(float32x2_t *)v117.i8, 1)).u32[0];
              v87 = v84 - v83 + 1;
              v88 = (float *)(v60 + 4 * (v80 * v61) + 4 * v83);
              do
              {
                if (v86 > *v88)
                {
                  *v88 = v86;
                  v85.i32[0] = v117.i32[0];
                }
                v86 = v86 + *(float *)v85.i32;
                ++v88;
                --v87;
              }
              while (v87);
            }
          }
        }
      }
      goto LABEL_91;
    }
  }
}

void sub_223F77DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;

  if (__p)
    operator delete(__p);
  if (v23)
    operator delete(v23);
  _Unwind_Resume(exception_object);
}

void sub_223F77E50(uint64_t a1@<X0>, uint64_t a2@<X1>, float32x2_t *a3@<X2>, float32x4_t *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  void *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  _BOOL8 v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  float32x2_t v41;
  int8x16_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x4_t v45;
  int32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x4_t v51;
  _QWORD *v52;
  void *v53;
  _BYTE *v54;
  unint64_t v55;
  unsigned __int16 *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int16 *v67;
  float v68;
  int v69;
  int v70;
  float *v71;
  float *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unsigned __int16 *v78;
  float *v79;
  float *v80;
  int i;
  float v82;
  float v84;
  BOOL v85;
  float v86;
  float v88;
  BOOL v89;
  int j;
  float v91;
  float v93;
  BOOL v94;
  float v95;
  _QWORD *v97;
  size_t v98;
  unint64_t v99;
  _QWORD *v100;
  char *v101;
  uint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  char *v105;
  char *v106;
  _QWORD *v107;
  void *v108;
  float v109;
  BOOL v110;
  unint64_t v111;
  unsigned int v112;
  _QWORD *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  int32x4_t v117;
  int v118;
  int32x4_t v119;
  int v120;
  float32x4_t v121;
  int v122;
  int8x16_t v123;
  unsigned __int16 *v124;
  _QWORD v125[3];
  unsigned __int16 *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  _OWORD v131[2];
  unint64_t v132;
  void *v133;
  uint64_t v134;
  __int128 v135;
  void *v136;
  _BYTE *v137;
  uint64_t v138;
  char v139;
  unint64_t v140;
  void *v141;
  char v142;
  char v143;
  unint64_t v144;
  void *v145;
  _QWORD v146[4];
  void *__p;
  _BYTE *v148;
  uint64_t v149;
  _BYTE v150[28];
  unint64_t v151;
  void *v152;
  uint64_t v153;
  __int128 v154;
  _BYTE v155[16];
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  __int16 v160;
  _QWORD v161[2];
  unint64_t v162[28];
  float32x4_t *v163;
  __int128 v164;
  _QWORD *v165;
  void *v166[2];
  __int128 v167;
  char *v168;
  _BYTE v169[28];
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _OWORD v173[9];
  _QWORD v174[17];
  int v175;
  int v176;

  v10 = a3[11].u32[0];
  v11 = a3[11].u32[1];
  if ((_DWORD)v11)
    v12 = v10 == 0;
  else
    v12 = 1;
  LODWORD(v174[0]) = 0;
  v13 = v10 | (v11 << 32);
  if (v12)
    v13 = 0;
  v14 = v13 << 32;
  if (!HIDWORD(v13))
    v14 = 0;
  if ((_DWORD)v13)
    v15 = HIDWORD(v13) == 0;
  else
    v15 = 1;
  v140 = v13;
  v141 = (void *)(v14 | (v13 != 0));
  v142 = 0;
  v143 = 0;
  v166[0] = v141;
  if (v15)
    v13 = 0;
  v161[0] = v13;
  if (((v14 >> 30) & ((v14 >> 30) - 1)) != 0)
    v16 = 4;
  else
    v16 = v14 >> 30;
  sub_22346A424(&v144, v161, (unint64_t *)v166, 1, v174, 1, v16);
  if (HIDWORD(v140))
    v17 = (_DWORD)v140 == 0;
  else
    v17 = 1;
  if (v17)
    v18 = 0;
  else
    v18 = v140;
  v19 = v145;
  if (HIDWORD(v18) * HIDWORD(v141) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v125[0] = v19;
  v125[1] = v18;
  v125[2] = v141;
  v20 = *a4;
  v21 = a4[1];
  v22 = a4[2];
  v23 = a4[3];
  v160 = -1;
  v24 = vcvt_f32_f64(*(float64x2_t *)(a2 + 112));
  v25 = vcvt_f32_f64(*(float64x2_t *)(a2 + 96));
  v26 = vcvt_f32_f64(*(float64x2_t *)(a2 + 80));
  v27 = vcvt_f32_f64(*(float64x2_t *)(a2 + 64));
  v28 = vcvt_f32_f64(*(float64x2_t *)(a2 + 48));
  v29 = vcvt_f32_f64(*(float64x2_t *)(a2 + 32));
  v30 = vcvt_f32_f64(*(float64x2_t *)(a2 + 16));
  v31 = vcvt_f32_f64(*(float64x2_t *)a2);
  v156 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v31.f32[0]), v21, v31, 1), v22, v30.f32[0]), v23, v30, 1);
  v157 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v29.f32[0]), v21, v29, 1), v22, v28.f32[0]), v23, v28, 1);
  v158 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v27.f32[0]), v21, v27, 1), v22, v26.f32[0]), v23, v26, 1);
  v159 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v25.f32[0]), v21, v25, 1), v22, v24.f32[0]), v23, v24, 1);
  sub_223F358C8((uint64_t)&v156, (uint64_t)a3, (uint64_t)v155, v159, v21.u64[0], v23);
  if (v155[12])
  {
    v32 = a3[11].u32[0];
    v33 = a3[11].u32[1];
    if ((_DWORD)v33)
      v34 = v32 == 0;
    else
      v34 = 1;
    v35 = v32 | (v33 << 32);
    if (v34)
      v35 = 0;
    v36 = v35 << 32;
    if (!HIDWORD(v35))
      v36 = 0;
    v37 = v35 != 0;
    if ((_DWORD)v35)
      v38 = HIDWORD(v35) == 0;
    else
      v38 = 1;
    *(_QWORD *)v150 = v35;
    *(_QWORD *)&v150[8] = v36 | v37;
    v150[16] = 0;
    v150[24] = 0;
    v166[0] = (void *)(v36 | v37);
    if (v38)
      v35 = 0;
    v161[0] = v35;
    if (((v36 >> 31) & ((v36 >> 31) - 1)) != 0)
      v39 = 2;
    else
      v39 = v36 >> 31;
    sub_223F79614(&v151, v161, (unint64_t *)v166, 1, &v160, 1, v39);
    __p = 0;
    v148 = 0;
    v149 = 0;
    v146[0] = &__p;
    v146[1] = v150;
    v146[2] = v125;
    v146[3] = v155;
    v164 = *(_OWORD *)((*(uint64_t (**)(float32x2_t *))(*(_QWORD *)a3 + 16))(a3) + 8);
    v163 = &v156;
    v165 = v146;
    v117 = (int32x4_t)v157;
    v119 = (int32x4_t)v156;
    v121 = v159;
    v123 = (int8x16_t)v158;
    sub_223F08E58((uint64_t)v166, a3, 0.0, 10.0);
    v40 = 0;
    v41 = (float32x2_t)vextq_s8(v123, v123, 8uLL).u64[0];
    v42 = (int8x16_t)vnegq_f32(v121);
    v43 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v123.i8, 1);
    v44 = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v123.i8, *(float32x2_t *)v42.i8), v43, *(float32x2_t *)v121.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL), v41);
    v47.i64[1] = v119.i64[1];
    v45.i64[0] = vtrn2q_s32(v119, v117).u64[0];
    v46 = vzip2q_s32(v119, v117);
    *(int32x2_t *)v47.f32 = vzip1_s32(*(int32x2_t *)v119.i8, *(int32x2_t *)v117.i8);
    *(float32x2_t *)v48.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v47.f32, *(float *)v42.i32), *(float32x2_t *)v45.f32, *(float32x2_t *)v121.f32, 1), *(float32x2_t *)v46.i8, v121, 2);
    *(float32x2_t *)&v48.u32[2] = v44;
    v174[0] = 0;
    v174[1] = 0;
    v174[2] = 0x3F80000000000000;
    v174[3] = 0;
    v174[4] = 0;
    v174[5] = 0x3F80000000000000;
    v49 = (float32x2_t)vextq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1), 0xCuLL).u64[0];
    v174[6] = 0;
    v174[7] = 0;
    v174[8] = 0x3F80000000000000;
    v174[9] = 0;
    v174[10] = 0;
    v174[11] = 0x3F80000000000000;
    v174[12] = 0;
    v174[13] = 0;
    v174[14] = 0x3F80000000000000;
    v174[15] = 0;
    v174[16] = 0;
    v175 = 0;
    v176 = 1065353216;
    do
    {
      v45.i32[0] = *(_DWORD *)((char *)v173 + v40 * 8 + 8);
      v50 = *(float32x2_t *)((char *)v173 + v40 * 8);
      *(float32x2_t *)v51.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v47.f32, v50.f32[0]), v49, v50, 1), *(float32x2_t *)v46.i8, v45.f32[0]);
      *(float32x2_t *)&v51.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v123.i8, v50), v43, v50, 1), *(float32x2_t *)v45.f32, v41);
      v45 = vaddq_f32(v48, v51);
      v50.i32[0] = *(_DWORD *)((char *)&v173[1] + v40 * 8 + 4);
      v51.i64[0] = *(_QWORD *)((char *)v173 + v40 * 8 + 12);
      v52 = &v174[v40];
      LODWORD(v174[v40 + 1]) = v45.i32[2];
      *v52 = v45.i64[0];
      *(float32x2_t *)((char *)v52 + 12) = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v47.f32, v51.f32[0]), v49, *(float32x2_t *)v51.f32, 1), *(float32x2_t *)v46.i8, v50.f32[0]);
      *((_DWORD *)v52 + 5) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v123.i8, *(float32x2_t *)v51.f32), v43, *(float32x2_t *)v51.f32, 1), v50, v41).u32[0];
      v40 += 3;
    }
    while (v40 != 18);
    sub_223F09724((uint64_t)v161, (uint64_t)v174, *(double *)&v41, *(double *)&v43, v46, v47, *(double *)v48.i64, *(double *)&v49);
    v53 = *(void **)(a2 + 160);
    v166[0] = *(void **)(a2 + 152);
    v166[1] = v53;
    if (v53)
      (*(void (**)(void *))(*(_QWORD *)v53 + 24))(v53);
    sub_223F79A04(v166, (uint64_t)v161, (uint64_t)&v163);
    if (v53)
      (*(void (**)(void *))(*(_QWORD *)v53 + 40))(v53);
    v54 = v148;
    if ((unint64_t)(v148 - (_BYTE *)__p) >= 0xFFFF0)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Tracker/FreeSpaceViolationCheck.cpp", 105, (uint64_t)"boxes.size() < static_cast<size_t>(u16max)", 42, (uint64_t)"Tracked plane has more visible leaf cells to handle", 51, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v54 = v148;
      v114 = (char *)__p;
    }
    else
    {
      v114 = (char *)__p;
    }
    *(_OWORD *)v169 = *(_OWORD *)v150;
    *(_OWORD *)&v169[12] = *(_OWORD *)&v150[12];
    v55 = v151;
    v56 = (unsigned __int16 *)v152;
    v57 = v153;
    v151 = 0;
    v152 = 0;
    v173[0] = v154;
    v58 = v149;
    v148 = 0;
    v149 = 0;
    __p = 0;
    v172 = v153;
    if (*(_DWORD *)&v150[4])
      v59 = *(_DWORD *)v150 == 0;
    else
      v59 = 1;
    if (v59)
      v60 = 0;
    else
      v60 = *(void **)v169;
    v61 = *(_QWORD *)&v169[8];
    if (HIDWORD(v60) * *(_DWORD *)&v169[12] == -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v166[0] = v56;
    v166[1] = v60;
    *(_QWORD *)&v167 = v61;
    v62 = (v54 - v114) >> 4;
    *((_QWORD *)&v167 + 1) = v62;
    v168 = v114;
    v170 = 0;
    v171 = 0;
    memset(&v173[1], 0, 24);
    v131[0] = *(_OWORD *)v169;
    *(_OWORD *)((char *)v131 + 12) = *(_OWORD *)&v169[12];
    v132 = v55;
    v133 = v56;
    v134 = v57;
    v135 = v173[0];
    v136 = v114;
    v137 = v54;
    v138 = v58;
    if (*(_DWORD *)&v169[4])
      v63 = *(_DWORD *)v169 == 0;
    else
      v63 = 1;
    v64 = *((_QWORD *)&v131[0] + 1);
    if (v63)
      v65 = 0;
    else
      v65 = *(_QWORD *)&v131[0];
    v66 = HIDWORD(v131[0]);
    if (HIDWORD(v65) * HIDWORD(v131[0]) == -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v126 = v56;
    v127 = v65;
    v128 = v64;
    v129 = v62;
    v130 = v114;
    v139 = 1;
    if (__p)
    {
      v148 = __p;
      operator delete(__p);
    }
    if (v152)
      free(v152);
    v67 = v126;
    if (*(float *)(a2 + 288) >= 0.2)
      v68 = *(float *)(a2 + 288);
    else
      v68 = 0.2;
    *(_OWORD *)v166 = 0u;
    v167 = 0u;
    LODWORD(v168) = 1065353216;
    v69 = *(_DWORD *)(a1 + 8);
    if (v69 && (v70 = *(_DWORD *)(a1 + 12)) != 0)
    {
      v111 = v62;
      v112 = v64;
      v113 = a5;
      v120 = v69 - 1;
      v71 = *(float **)a1;
      v72 = (float *)v145;
      v73 = a1;
      v74 = 4 * *(unsigned int *)(a1 + 16);
      v75 = 4 * v141;
      v118 = v70 - 1;
      if (v70 != 1)
      {
        v76 = 0;
        v115 = 4 * HIDWORD(v141);
        v116 = 4 * *(unsigned int *)(v73 + 20);
        v77 = 2 * v64;
        do
        {
          v122 = v76;
          v124 = v67;
          v78 = v67;
          v79 = v72;
          v80 = v71;
          for (i = v120; i; --i)
          {
            v86 = fabsf(*v80);
            if (*v80 != 0.0 && v86 > 0.000001)
            {
              v88 = fabsf(*v79);
              v89 = *v79 != 0.0 && v88 > 0.000001;
              if (v89 && (float)(v68 + (float)(1.0 / *v79)) <= *v80)
                sub_223F7B4F8((uint64_t)v166, *v78, *v78);
            }
            v80 = (float *)((char *)v80 + v74);
            v79 = (float *)((char *)v79 + v75);
            v78 = (unsigned __int16 *)((char *)v78 + v77);
          }
          v82 = fabsf(*v80);
          if (*v80 != 0.0 && v82 > 0.000001)
          {
            v84 = fabsf(*v79);
            v85 = *v79 != 0.0 && v84 > 0.000001;
            if (v85 && (float)(v68 + (float)(1.0 / *v79)) <= *v80)
              sub_223F7B4F8((uint64_t)v166, *v78, *v78);
          }
          v71 = (float *)((char *)v71 + v116);
          v72 = (float *)((char *)v72 + v115);
          v67 = &v124[v66];
          v76 = v122 + 1;
        }
        while (v122 + 1 != v118);
      }
      for (j = v120; j; --j)
      {
        v91 = fabsf(*v71);
        if (*v71 != 0.0 && v91 > 0.000001)
        {
          v93 = fabsf(*v72);
          v94 = *v72 != 0.0 && v93 > 0.000001;
          if (v94 && (float)(v68 + (float)(1.0 / *v72)) <= *v71)
            sub_223F7B4F8((uint64_t)v166, *v67, *v67);
        }
        v71 = (float *)((char *)v71 + v74);
        v72 = (float *)((char *)v72 + v75);
        v67 += v112;
      }
      v95 = fabsf(*v71);
      if (*v71 != 0.0 && v95 > 0.000001)
      {
        v109 = fabsf(*v72);
        v110 = *v72 != 0.0 && v109 > 0.000001;
        if (v110 && (float)(v68 + (float)(1.0 / *v72)) <= *v71)
          sub_223F7B4F8((uint64_t)v166, *v67, *v67);
      }
      v97 = (_QWORD *)v167;
      v113[1] = 0;
      v113[2] = 0;
      *v113 = 0;
      if (v97)
      {
        v98 = 0;
        v99 = -1;
        v100 = v97;
        do
        {
          v100 = (_QWORD *)*v100;
          ++v99;
          v98 += 16;
        }
        while (v100);
        if (v99 >= 0xFFFFFFFFFFFFFFFLL)
          sub_22324A284();
        v101 = (char *)operator new(v98);
        v102 = 0;
        *v113 = v101;
        v113[1] = v101;
        v113[2] = &v101[v98];
        v161[0] = v97;
        v161[1] = v114;
        v103 = v97;
        v162[0] = v111;
        do
        {
          v104 = v103[2];
          if (v111 <= v104)
            sub_22457354C(v162, v104);
          v105 = &v101[v102];
          v106 = &v114[16 * v104];
          *(_QWORD *)v105 = *(_QWORD *)v106;
          *((_QWORD *)v105 + 1) = *((_QWORD *)v106 + 1);
          v103 = (_QWORD *)*v103;
          v161[0] = v103;
          v102 += 16;
        }
        while (v103);
        v113[1] = &v101[v102];
        do
        {
          v107 = (_QWORD *)*v97;
          operator delete(v97);
          v97 = v107;
        }
        while (v107);
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
    }
    v108 = v166[0];
    v166[0] = 0;
    if (v108)
      operator delete(v108);
    if (v139)
    {
      if (v136)
        operator delete(v136);
      if (v133)
        free(v133);
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  if (v145)
    free(v145);
}

void sub_223F78854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51)
{
  sub_22322E828((uint64_t)&STACK[0x360]);
  sub_223F78984((uint64_t)&a28);
  if (a51)
  {
    free(a51);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223F78984(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 136))
  {
    v2 = *(void **)(a1 + 112);
    if (v2)
    {
      *(_QWORD *)(a1 + 120) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 80);
    if (v3)
      free(v3);
    *(_QWORD *)(a1 + 80) = 0;
  }
  return a1;
}

void sub_223F789CC(float *a1, float *a2, uint64_t a3, char a4)
{
  float *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  float *v14;
  float v15;
  int v16;
  float v17;
  int v18;
  float *v19;
  float v20;
  float v21;
  float *i;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v28;
  float *v29;
  unint64_t v30;
  int v31;
  float v32;
  float *v34;
  unint64_t v35;
  float *v37;
  int v38;
  BOOL v39;
  float *v41;
  int v42;
  float v43;
  int v45;
  uint64_t v46;
  float *v47;
  float v48;
  float v49;
  int v51;
  BOOL v52;
  BOOL v54;
  float *v55;
  float v56;
  float v57;
  float *v59;
  int v60;
  BOOL v61;
  __int128 *v62;
  __int128 *v63;
  float *v64;
  int v65;
  int v66;
  BOOL v67;
  __int128 v68;
  int v69;
  int v70;
  __int128 v71;
  int v72;
  float *v73;
  BOOL v75;
  uint64_t v76;
  float *v77;
  float *v78;
  float *v79;
  int v80;
  float v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  float *v85;
  int v86;
  int64_t v88;
  int64_t v89;
  int64_t v90;
  uint64_t v91;
  float *v92;
  int v93;
  BOOL v94;
  float *v95;
  int v96;
  float v97;
  uint64_t v99;
  float *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  uint64_t v106;
  uint64_t v108;
  float *v109;
  float *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  BOOL v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  float *v118;
  int v119;
  float v120;
  BOOL v121;
  uint64_t v122;
  unint64_t v123;
  float *v124;
  float *v126;
  int v127;
  float v128;
  BOOL v129;
  uint64_t v130;
  float *j;
  int v132;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;

BOOL sub_223F79328(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float *v6;
  float *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  float v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  float *v18;
  int v19;
  BOOL v20;
  __int128 v21;
  __int128 *v22;
  __int128 *v23;
  float *v24;
  int v25;
  int v26;
  __int128 v27;
  int v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v18 = a2 - 4;
      v19 = *((_DWORD *)a2 - 4);
      if (v19 < *(_DWORD *)a1 || (v19 == *(_DWORD *)a1 ? (v20 = *(a2 - 1) < a1[3]) : (v20 = 0), v20))
      {
        v21 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v18;
        *(_OWORD *)v18 = v21;
      }
      return result;
    case 3:
      sub_2236B6494(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      v22 = (__int128 *)(a1 + 4);
      v23 = (__int128 *)(a1 + 8);
      sub_2236B6494(a1, a1 + 4, a1 + 8);
      v24 = a2 - 4;
      v25 = *((_DWORD *)a2 - 4);
      v26 = *((_DWORD *)a1 + 8);
      if (v25 < v26 || (result = 1, v25 == v26) && *(a2 - 1) < a1[11])
      {
        v27 = *v23;
        *v23 = *(_OWORD *)v24;
        *(_OWORD *)v24 = v27;
        v28 = *((_DWORD *)a1 + 8);
        v29 = *((_DWORD *)a1 + 4);
        if (v28 < v29 || (result = 1, v28 == v29) && a1[11] < a1[7])
        {
          v30 = *v22;
          *v22 = *v23;
          *v23 = v30;
          v31 = *((_DWORD *)a1 + 4);
          if (v31 < *(_DWORD *)a1 || (result = 1, v31 == *(_DWORD *)a1) && a1[7] < a1[3])
          {
            v32 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v22;
            *v22 = v32;
            return 1;
          }
        }
      }
      return result;
    case 5:
      sub_2236B62E8((uint64_t)a1, a1 + 4, a1 + 8, (uint64_t)(a1 + 12), (uint64_t)(a2 - 4));
      return 1;
    default:
      v6 = a1 + 8;
      sub_2236B6494(a1, a1 + 4, a1 + 8);
      v7 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v11 = *(_DWORD *)v7;
    v12 = v7[3];
    if (*(_DWORD *)v7 < *(_DWORD *)v6 || (v11 == *(_DWORD *)v6 ? (v13 = v12 < v6[3]) : (v13 = 0), v13))
    {
      v14 = *(_QWORD *)(v7 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v6;
      v10 = (uint64_t)a1;
      if (v6 != a1)
      {
        v15 = v8;
        while (1)
        {
          v16 = *(_DWORD *)((char *)a1 + v15 + 16);
          if (v11 >= v16 && (v11 != v16 || v12 >= *(float *)((char *)a1 + v15 + 28)))
            break;
          *(_OWORD *)((char *)a1 + v15 + 32) = *(_OWORD *)((char *)a1 + v15 + 16);
          v15 -= 16;
          if (v15 == -32)
          {
            v10 = (uint64_t)a1;
            goto LABEL_6;
          }
        }
        v10 = (uint64_t)a1 + v15 + 32;
      }
LABEL_6:
      *(_DWORD *)v10 = v11;
      *(_QWORD *)(v10 + 4) = v14;
      *(float *)(v10 + 12) = v12;
      if (++v9 == 8)
        return v7 + 4 == a2;
    }
    v6 = v7;
    v8 += 16;
    v7 += 4;
    if (v7 == a2)
      return 1;
  }
}

unint64_t *sub_223F79614(unint64_t *a1, _DWORD *a2, unint64_t *a3, char a4, _WORD *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  _WORD *v21;
  unint64_t v22;
  BOOL v23;
  void *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _WORD *v31;
  int v32;
  uint64_t v33;
  void *memptr[3];
  _QWORD v36[2];

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v13 << 32);
  }
  v14 = v12 * HIDWORD(v11);
  v15 = 2 * v14;
  v16 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  *a1 = v15;
  a1[1] = 0;
  a1[2] = v19;
  if (v14)
  {
    memptr[0] = 0;
    v20 = malloc_type_posix_memalign(memptr, v19, 2 * v14, 0x1F88E90uLL);
    if (v20)
      sub_2244E2E20(v20, a1[2], v15);
    v21 = memptr[0];
    a1[1] = (unint64_t)memptr[0];
    v22 = *(_QWORD *)a2;
    a1[3] = *(_QWORD *)a2;
    a1[4] = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
    if (v21 && a6)
    {
      if ((_DWORD)v22)
        v23 = HIDWORD(v22) == 0;
      else
        v23 = 1;
      if (v23)
        v24 = 0;
      else
        v24 = (void *)v22;
      memptr[0] = v21;
      memptr[1] = v24;
      memptr[2] = (void *)(v11 & 0x7FFFFFFF7FFFFFFFLL);
      if (HIDWORD(v24) * ((v11 >> 31) >> 1) == -1
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v36[0] = memptr;
      v36[1] = a5;
      v25 = v11 & 0x7FFFFFFF;
      if (v25 == 1)
      {
        sub_223F79874((uint64_t)v36);
        return a1;
      }
      if ((_DWORD)v24 && HIDWORD(v24))
      {
        v26 = (_DWORD)v24 - 1;
        v27 = HIDWORD(v24) - 1;
        if (HIDWORD(v24) != 1)
        {
          v28 = HIDWORD(v11) & 0x7FFFFFFF;
          if ((_DWORD)v24 == 1)
          {
            do
            {
              *v21 = *a5;
              v21 += v28;
              --v27;
            }
            while (v27);
LABEL_39:
            *v21 = *a5;
            return a1;
          }
          v29 = 0;
          v30 = 2 * v28;
          do
          {
            v31 = v21;
            v32 = (_DWORD)v24 - 1;
            do
            {
              *v31 = *a5;
              v31 += v25;
              --v32;
            }
            while (v32);
            *v31 = *a5;
            v21 = (_WORD *)((char *)v21 + v30);
            ++v29;
          }
          while (v29 != v27);
        }
        if ((_DWORD)v24 != 1)
        {
          v33 = 2 * v25;
          do
          {
            *v21 = *a5;
            v21 = (_WORD *)((char *)v21 + v33);
            --v26;
          }
          while (v26);
        }
        goto LABEL_39;
      }
    }
  }
  else
  {
    a1[3] = *(_QWORD *)a2;
    a1[4] = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
  }
  return a1;
}

void sub_223F79858(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F79874(uint64_t result)
{
  uint64_t v1;
  const __int16 *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int16 *v14;
  unint64_t v15;
  int16x8_t v16;
  int16x8_t *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v21[3];
  _DWORD v22[5];
  _QWORD v23[2];

  v1 = *(_QWORD *)result;
  v2 = *(const __int16 **)(result + 8);
  v3 = *(unsigned int *)(*(_QWORD *)result + 8);
  v5 = *(_DWORD *)(*(_QWORD *)result + 16);
  v4 = *(_DWORD *)(*(_QWORD *)result + 20);
  if (v4 == v5 * (_DWORD)v3)
  {
    v6 = (*(_DWORD *)(v1 + 12) * v3);
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
        abort();
    }
    else if (!(_DWORD)v6)
    {
      return result;
    }
    v12 = v6 - ((_DWORD)v6 != 0) + 1;
    if (v12 < 0x10)
      goto LABEL_19;
    v13 = 2 * v6;
    if (!(_DWORD)v6)
      v13 = 2;
    if (v7 < (unint64_t)(v2 + 1) && v7 + v13 > (unint64_t)v2)
    {
LABEL_19:
      v14 = (__int16 *)v7;
LABEL_20:
      v15 = v6 + 1;
      do
      {
        *v14++ = *v2;
        --v15;
      }
      while (v15 > 1);
      return result;
    }
    v14 = (__int16 *)(v7 + 2 * (v12 & 0xFFFFFFFFFFFFFFF0));
    v6 -= v12 & 0xFFFFFFFFFFFFFFF0;
    v16 = vld1q_dup_s16(v2);
    v17 = (int16x8_t *)(v7 + 16);
    v18 = v12 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v17[-1] = v16;
      *v17 = v16;
      v17 += 2;
      v18 -= 16;
    }
    while (v18);
    if (v12 != (v12 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_20;
  }
  else
  {
    v20 = 0;
    v19 = v3;
    v21[0] = &v20;
    v21[1] = &v19;
    v21[2] = v2;
    v9 = *(_DWORD *)(v1 + 12);
    if ((_DWORD)v3)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      v22[0] = 0;
      v22[1] = v3 - 1;
      v22[2] = v5;
      v22[3] = v9 - 1;
      v22[4] = v4;
      v11 = *(_QWORD *)v1;
      v23[0] = 0;
      v23[1] = 0;
      return sub_223CD3698((uint64_t)v22, (uint64_t)v23, (uint64_t)v21, v11);
    }
  }
  return result;
}

void sub_223F79A04(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int8x16_t v7;
  double v8;
  double v9;
  float32x4_t v10;
  float32x4_t v11;
  double v12;
  float32x4_t v13;
  float32x2_t v14;
  uint64_t v15;
  float32x2_t *v16;
  float32x2_t *v17;
  float32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  float *v24;
  float *v25;
  float *v26;
  float *v27;
  float *v28;
  float *v29;
  float *v30;
  float32x2_t ***v31;
  float32x2_t *v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x4_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x2_t v46;
  float32x2_t v47;
  int32x4_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int32x4_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int32x4_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  int *v67;
  void **v68;
  float32x2_t *v69;
  float32x2_t *v70;
  uint64_t v71;
  unint64_t v72;
  float32x2_t *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  float32x2_t *v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float32x2_t *v83;
  float32x2_t *v84;
  const double *v85;
  double *v86;
  uint64_t v87;
  const double *v88;
  double *v89;
  float32x2_t v90;
  float32x2_t **v91;
  float32x2_t **v92;
  float32x2_t *v93;
  float32x2_t *v94;
  int v95;
  float32x2_t *v96;
  unint64_t v97;
  uint64_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  int v102;
  __int32 v103;
  int v104;
  int v105;
  int *v106;
  int *v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int *v112;
  int *v113;
  int v114;
  int *v115;
  int *v116;
  int *v117;
  int v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float32x2_t v124;
  uint64_t v125;
  unint64_t v126;
  _DWORD *v127;
  signed int v128;
  unsigned int v129;
  unint64_t v130;
  float v131;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  float v136;
  float v137;
  float *v138;
  float *v139;
  float v140;
  float *v141;
  float *v142;
  float v143;
  float v144;
  signed int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  float32x2_t v150;
  uint64_t v151;
  float32x2_t v152;
  int8x16_t v153;
  float32x4_t v154;
  float32x4_t v155;
  void *v156;
  float *v157;
  void *__p;
  float *v159;
  char *v160;
  float *v161;
  void *v162;
  float *v163;
  void *v164;
  float *v165;
  int32x2_t v166;
  void **v167[2];
  float64x2x2_t v168;
  float64x2x2_t v169;

  v4 = a1[1];
  if (v4)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4))
    {
      v15 = **(_QWORD **)(*a1 + 8) + 232 * *(_QWORD *)*a1;
      v16 = (float32x2_t *)(v15 + 80);
      v17 = (float32x2_t *)(v15 + 88);
      if (sub_223F7A584(a2, (unint64_t *)(v15 + 80), (_DWORD *)(v15 + 88), v7, v8, v9, v10, v11, v12, v13, v14))
      {
        v19 = *(_QWORD *)(v15 + 24);
        if (v19 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 48))(v19)
          || (v20 = *(_QWORD *)(v15 + 40)) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20)
          || (v21 = *(_QWORD *)(v15 + 56)) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 48))(v21)
          || (v22 = *(_QWORD *)(v15 + 72)) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 48))(v22))
        {
          __p = *(void **)(v15 + 16);
          v23 = *(float **)(v15 + 24);
          v159 = v23;
          if (v23)
            (*(void (**)(float *))(*(_QWORD *)v23 + 24))(v23);
          v160 = *(char **)(v15 + 32);
          v24 = *(float **)(v15 + 40);
          v161 = v24;
          if (v24)
            (*(void (**)(float *))(*(_QWORD *)v24 + 24))(v24);
          v162 = *(void **)(v15 + 48);
          v25 = *(float **)(v15 + 56);
          v163 = v25;
          if (v25)
            (*(void (**)(float *))(*(_QWORD *)v25 + 24))(v25);
          v164 = *(void **)(v15 + 64);
          v26 = *(float **)(v15 + 72);
          v165 = v26;
          if (v26)
            (*(void (**)(float *))(*(_QWORD *)v26 + 24))(v26);
          v27 = v159;
          v156 = __p;
          v157 = v159;
          if (v159)
            (*(void (**)(float *))(*(_QWORD *)v159 + 24))(v159);
          sub_223F79A04(&v156, a2, a3);
          if (v27)
            (*(void (**)(float *))(*(_QWORD *)v27 + 40))(v27);
          v28 = v161;
          v156 = v160;
          v157 = v161;
          if (v161)
            (*(void (**)(float *))(*(_QWORD *)v161 + 24))(v161);
          sub_223F79A04(&v156, a2, a3);
          if (v28)
            (*(void (**)(float *))(*(_QWORD *)v28 + 40))(v28);
          v29 = v163;
          v156 = v162;
          v157 = v163;
          if (v163)
            (*(void (**)(float *))(*(_QWORD *)v163 + 24))(v163);
          sub_223F79A04(&v156, a2, a3);
          if (v29)
            (*(void (**)(float *))(*(_QWORD *)v29 + 40))(v29);
          v30 = v165;
          v156 = v164;
          v157 = v165;
          if (v165)
            (*(void (**)(float *))(*(_QWORD *)v165 + 24))(v165);
          sub_223F79A04(&v156, a2, a3);
          if (v30)
            (*(void (**)(float *))(*(_QWORD *)v30 + 40))(v30);
          if (v165)
            (*(void (**)(float *))(*(_QWORD *)v165 + 40))(v165);
          if (v163)
            (*(void (**)(float *))(*(_QWORD *)v163 + 40))(v163);
          if (v161)
            (*(void (**)(float *))(*(_QWORD *)v161 + 40))(v161);
          if (v159)
            (*(void (**)(float *))(*(_QWORD *)v159 + 40))(v159);
        }
        else
        {
          v31 = *(float32x2_t ****)(a3 + 24);
          *(float32x2_t *)v18.f32 = vmul_f32(vadd_f32(*v16, *v17), (float32x2_t)0x3F0000003F000000);
          v152 = vsub_f32(*(float32x2_t *)v18.f32, *v17);
          v154 = v18;
          v32 = *(float32x2_t **)a3;
          v33 = *(float32x2_t *)(a3 + 8);
          v34 = *(float32x2_t *)(a3 + 16);
          __p = operator new(0x20uLL);
          v159 = (float *)__p;
          v160 = (char *)__p + 32;
          v167[0] = &__p;
          v35.i32[3] = v154.i32[3];
          v36 = vadd_f32(*(float32x2_t *)v154.f32, v152);
          v37.i32[0] = v32[1].i32[0];
          v38.i32[0] = v32[3].i32[0];
          v39.i32[0] = v32[5].i32[0];
          *(float32x2_t *)v40.f32 = vmla_f32(vmla_lane_f32(vmul_n_f32(*v32, v36.f32[0]), v32[2], v36, 1), 0, v32[4]);
          *(float32x2_t *)&v40.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v37, v36), v38, v36, 1), 0, v39);
          *(float32x2_t *)v35.f32 = v32[6];
          v35.i32[2] = v32[7].i32[0];
          v41 = (int32x4_t)vaddq_f32(v40, v35);
          v166 = vcvt_s32_f32(vrnda_f32(vadd_f32(v34, vmul_f32(v33, vdiv_f32(*(float32x2_t *)v41.i8, (float32x2_t)vdup_laneq_s32(v41, 2))))));
          sub_2236B43F0(v167, &v166);
          *(float32x2_t *)v43.f32 = v152;
          v42.i64[0] = v154.i64[0];
          v42.i64[1] = v154.i64[0];
          *(float32x2_t *)&v43.u32[2] = v152;
          v44 = vsubq_f32(v42, v43);
          v45 = vaddq_f32(v42, v43);
          v43.i32[0] = v32[1].i32[0];
          v46.i32[0] = v32[3].i32[0];
          v47.i32[0] = v32[5].i32[0];
          *(float32x2_t *)v42.f32 = vmla_f32(vmla_lane_f32(vmul_n_f32(*v32, v44.f32[0]), v32[2], *(float32x2_t *)v45.f32, 1), 0, v32[4]);
          v153 = (int8x16_t)v45;
          v155 = v44;
          *(float32x2_t *)&v42.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v44.f32), v46, *(float32x2_t *)v45.f32, 1), 0, v47);
          *(float32x2_t *)v43.f32 = v32[6];
          v43.i32[2] = v32[7].i32[0];
          v48 = (int32x4_t)vaddq_f32(v42, v43);
          v166 = vcvt_s32_f32(vrnda_f32(vadd_f32(v34, vmul_f32(v33, vdiv_f32(*(float32x2_t *)v48.i8, (float32x2_t)vdup_laneq_s32(v48, 2))))));
          sub_2236B43F0(v167, &v166);
          v49.i32[0] = v32[1].i32[0];
          v50.i32[0] = v32[3].i32[0];
          v51.i32[0] = v32[5].i32[0];
          *(float32x2_t *)v52.f32 = vmla_f32(vmla_laneq_f32(vmul_laneq_f32(*v32, (float32x4_t)v153, 2), v32[2], v155, 3), 0, v32[4]);
          *(float32x2_t *)&v52.u32[2] = vmla_f32(vmla_laneq_f32(vmul_f32(v49, (float32x2_t)*(_OWORD *)&vextq_s8(v153, v153, 8uLL)), v50, v155, 3), 0, v51);
          *(float32x2_t *)v53.f32 = v32[6];
          v53.i32[2] = v32[7].i32[0];
          v54 = (int32x4_t)vaddq_f32(v52, v53);
          v166 = vcvt_s32_f32(vrnda_f32(vadd_f32(v34, vmul_f32(v33, vdiv_f32(*(float32x2_t *)v54.i8, (float32x2_t)vdup_laneq_s32(v54, 2))))));
          sub_2236B43F0(v167, &v166);
          v55.i32[0] = v32[1].i32[0];
          v56.i32[0] = v32[3].i32[0];
          v57.i32[0] = v32[5].i32[0];
          *(float32x2_t *)v58.f32 = vmla_f32(vmla_laneq_f32(vmul_n_f32(*v32, v155.f32[0]), v32[2], v155, 3), 0, v32[4]);
          *(float32x2_t *)&v58.u32[2] = vmla_f32(vmla_laneq_f32(vmul_f32(v55, *(float32x2_t *)v155.f32), v56, v155, 3), 0, v57);
          *(float32x2_t *)v59.f32 = v32[6];
          v59.i32[2] = v32[7].i32[0];
          v60 = (int32x4_t)vaddq_f32(v58, v59);
          v166 = vcvt_s32_f32(vrnda_f32(vadd_f32(v34, vmul_f32(v33, vdiv_f32(*(float32x2_t *)v60.i8, (float32x2_t)vdup_laneq_s32(v60, 2))))));
          sub_2236B43F0(v167, &v166);
          v61 = __p;
          v62 = *(_QWORD *)__p;
          v63 = *((_QWORD *)__p + 1);
          v64 = *((_QWORD *)__p + 2);
          v65 = *((_QWORD *)__p + 3);
          v66 = operator new(0x20uLL);
          *v66 = v62;
          v66[1] = v63;
          v66[2] = v65;
          v67 = (int *)(v66 + 2);
          v66[3] = v64;
          operator delete(v61);
          v68 = (void **)*v31;
          v69 = **v31;
          v70 = (*v31)[1];
          v71 = (char *)v70 - (char *)v69;
          v72 = (unint64_t)(*v31)[2];
          if ((unint64_t)v70 >= v72)
          {
            v74 = (v71 >> 4) + 1;
            if (v74 >> 60)
              sub_22324A284();
            v75 = v72 - (_QWORD)v69;
            if (v75 >> 3 > v74)
              v74 = v75 >> 3;
            if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF0)
              v76 = 0xFFFFFFFFFFFFFFFLL;
            else
              v76 = v74;
            if (v76 >> 60)
              sub_223174E94();
            v77 = (char *)operator new(16 * v76);
            v78 = (float32x2_t *)&v77[16 * (v71 >> 4)];
            v79 = &v77[16 * v76];
            *v78 = *v16;
            v78[1] = *v17;
            v73 = v78 + 2;
            if (v70 == v69)
            {
              v84 = (float32x2_t *)&v77[16 * (v71 >> 4)];
              v67 = (int *)(v66 + 2);
            }
            else
            {
              v80 = (char *)v70 - (char *)v69 - 16;
              v67 = (int *)(v66 + 2);
              if (v80 < 0xD0
                || &v77[(v71 & 0xFFFFFFFFFFFFFFF0) - (v80 & 0xFFFFFFFFFFFFFFF0) - 16] < (char *)v70
                && (float32x2_t *)((char *)&v70[-2] - (v80 & 0xFFFFFFFFFFFFFFF0)) < v78)
              {
                goto LABEL_60;
              }
              v81 = (v80 >> 4) + 1;
              v82 = 16 * (v81 & 0x1FFFFFFFFFFFFFFCLL);
              v83 = &v70[v82 / 0xFFFFFFFFFFFFFFF8];
              v84 = &v78[v82 / 0xFFFFFFFFFFFFFFF8];
              v85 = (const double *)&v70[-4];
              v86 = (double *)&v78[-4];
              v87 = v81 & 0x1FFFFFFFFFFFFFFCLL;
              do
              {
                v168 = vld2q_f64(v85);
                v88 = v85 - 4;
                v169 = vld2q_f64(v88);
                vst2q_f64(v86, v168);
                v89 = v86 - 4;
                vst2q_f64(v89, v169);
                v86 -= 8;
                v85 -= 8;
                v87 -= 4;
              }
              while (v87);
              v70 = v83;
              v78 = v84;
              if (v81 != (v81 & 0x1FFFFFFFFFFFFFFCLL))
              {
LABEL_60:
                v84 = v78;
                do
                {
                  v90 = v70[-2];
                  v70 -= 2;
                  v84[-2] = v90;
                  v84 -= 2;
                  v84[1] = v70[1];
                }
                while (v70 != v69);
              }
            }
            *v68 = v84;
            v68[1] = v73;
            v68[2] = v79;
            if (v69)
              operator delete(v69);
          }
          else
          {
            *v70 = *v16;
            v70[1] = *v17;
            v73 = v70 + 2;
          }
          v68[1] = v73;
          v92 = v31[1];
          v91 = v31[2];
          v93 = *v91;
          v94 = v91[1];
          v95 = *((_DWORD *)v91 + 5);
          v96 = (float32x2_t *)v31[3];
          __p = 0;
          v159 = 0;
          v160 = 0;
          __p = operator new(0x40uLL);
          v159 = (float *)__p;
          v160 = (char *)__p + 64;
          LODWORD(v167[0]) = 0;
          v166.i32[0] = 0;
          sub_2236B5220(4, (uint64_t)v66, v167, &v166, (char **)&__p);
          v97 = 126 - 2 * __clz(((char *)v159 - (_BYTE *)__p) >> 4);
          if (v159 == __p)
            v98 = 0;
          else
            v98 = v97;
          sub_223F7A8B0((float *)__p, v159, v98, 1);
          v102 = (int)v167[0];
          v103 = v166.i32[0];
          if (LODWORD(v167[0]) == v166.i32[0])
          {
            v104 = *((_DWORD *)v66 + 2);
            v105 = *(_DWORD *)v66;
            v106 = (int *)(v66 + 1);
            if (v104 >= *(_DWORD *)v66)
              v107 = (int *)v66;
            else
              v107 = (int *)(v66 + 1);
            if (v104 < v105)
              v106 = (int *)v66;
            v108 = *((_DWORD *)v66 + 6);
            v109 = *((_DWORD *)v66 + 4);
            if (v104 >= v105)
              v110 = *(_DWORD *)v66;
            else
              v110 = *((_DWORD *)v66 + 2);
            if (v104 <= v105)
              v111 = *(_DWORD *)v66;
            else
              v111 = *((_DWORD *)v66 + 2);
            if (v109 >= v110)
              v112 = v107;
            else
              v112 = v67;
            if (v108 >= v111)
              v113 = (int *)(v66 + 3);
            else
              v113 = v106;
            if (v104 <= v105)
              v114 = *(_DWORD *)v66;
            else
              v114 = *((_DWORD *)v66 + 2);
            if (v104 >= v105)
              v104 = *(_DWORD *)v66;
            if (v108 >= v104)
              v115 = v107;
            else
              v115 = (int *)(v66 + 3);
            if (v109 >= v114)
              v116 = v67;
            else
              v116 = v106;
            if (v108 < v109)
              v117 = v115;
            else
              v117 = v112;
            if (v108 >= v109)
              v116 = v113;
            v118 = v117[1];
            if ((v118 & 0x80000000) == 0 && v118 < SHIDWORD(v94))
            {
              v119 = *v116;
              if ((v119 & 0x80000000) == 0)
              {
                v120 = *v117;
                if (v120 < (int)v94)
                {
                  v121 = v120 & ~(v120 >> 31);
                  LODWORD(v122) = (_DWORD)v94 - 1;
                  v122 = (int)v94 - 1 >= v119 ? v119 : v122;
                  if ((_DWORD)v121 != (_DWORD)v122 + 1)
                  {
                    v123 = (uint64_t)v93 + 4 * (v118 * v95);
                    v124 = *v96;
                    v99.f32[0] = (float)(int)v121;
                    v100.f32[0] = (float)v118;
                    v101.i32[0] = v96[1].i32[0];
                    v99.i32[0] = vadd_f32(v101, vmla_lane_f32(vmul_f32(*v96, v99), v100, *v96, 1)).u32[0];
                    v125 = v122 + 1;
                    do
                    {
                      if (v99.f32[0] > *(float *)(v123 + 4 * v121))
                      {
                        *(_DWORD *)(v123 + 4 * v121) = v99.i32[0];
                        v92[5]->i16[(*((_DWORD *)v92 + 2) * v121 + *((_DWORD *)v92 + 3) * v118)] = (unint64_t)v71 >> 4;
                        v124.i32[0] = v96->i32[0];
                      }
                      v99.f32[0] = v99.f32[0] + v124.f32[0];
                      ++v121;
                    }
                    while (v125 != v121);
                  }
                }
              }
            }
          }
          else if (LODWORD(v167[0]) != v166.i32[0] + 1)
          {
            v126 = 0;
            v127 = __p;
            v128 = (_DWORD)v94 - 1;
            v129 = v95 * LODWORD(v167[0]);
            v130 = 1;
            do
            {
              if (v126 <= v130)
                v133 = v130;
              else
                v133 = v126;
              if (v127[4 * v126 + 1] == v102 && v102 < v166.i32[0])
                v126 = v133 + 1;
              if (v126 <= v130)
                v134 = v130;
              else
                v134 = v126;
              if (v127[4 * v130 + 1] == v102 && v102 < v166.i32[0])
                v135 = v134 + 1;
              else
                v135 = v130;
              v136 = *(float *)&v127[4 * v126 + 2];
              v137 = *(float *)&v127[4 * v135 + 2];
              if (v136 <= v137)
                v130 = v135;
              else
                v130 = v126;
              if (v136 > v137)
                v126 = v135;
              v138 = (float *)&v127[4 * v126];
              v140 = v138[2];
              v139 = v138 + 2;
              v131 = v140;
              v141 = (float *)&v127[4 * v130];
              v143 = v141[2];
              v142 = v141 + 2;
              v144 = v143;
              if ((v102 & 0x80000000) == 0 && v102 < SHIDWORD(v94))
              {
                v145 = llroundf(v144);
                if ((v145 & 0x80000000) == 0)
                {
                  v146 = llroundf(v131);
                  if ((int)v94 > v146)
                  {
                    v147 = v146 & ~(v146 >> 31);
                    v148 = v128 >= v145 ? v145 : v128;
                    if ((_DWORD)v147 != (_DWORD)v148 + 1)
                    {
                      v149 = (uint64_t)v93 + 4 * v129;
                      v150 = *v96;
                      v99.i32[0] = v96[1].i32[0];
                      v100.f32[0] = (float)(int)v147;
                      v101.f32[0] = (float)v102;
                      v100 = vmla_lane_f32(vmul_f32(*v96, v100), v101, *v96, 1);
                      v99 = vadd_f32(v99, v100);
                      v151 = v148 + 1;
                      do
                      {
                        if (v99.f32[0] > *(float *)(v149 + 4 * v147))
                        {
                          *(_DWORD *)(v149 + 4 * v147) = v99.i32[0];
                          v92[5]->i16[(*((_DWORD *)v92 + 2) * v147 + *((_DWORD *)v92 + 3) * v102)] = (unint64_t)v71 >> 4;
                          v150.i32[0] = v96->i32[0];
                        }
                        v99.f32[0] = v99.f32[0] + v150.f32[0];
                        ++v147;
                      }
                      while (v151 != v147);
                      v131 = *v139;
                    }
                  }
                }
              }
              *v139 = v131 + *(float *)&v127[4 * v126 + 3];
              *v142 = *(float *)&v127[4 * v130 + 3] + *v142;
              v129 += v95;
            }
            while (v102++ != v103);
          }
          if (__p)
          {
            v159 = (float *)__p;
            operator delete(__p);
          }
          operator delete(v66);
        }
      }
    }
  }
}

void sub_223F7A430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v19;

  if (__p)
  {
    operator delete(__p);
    operator delete(v19);
    _Unwind_Resume(a1);
  }
  operator delete(v19);
  _Unwind_Resume(a1);
}

void sub_223F7A480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223F7A510(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[7];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = a1[5];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = a1[3];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v5 = a1[1];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  return a1;
}

BOOL sub_223F7A584(uint64_t a1, unint64_t *a2, _DWORD *a3, int8x16_t a4, double a5, double a6, float32x4_t a7, float32x4_t a8, double a9, float32x4_t a10, float32x2_t a11)
{
  int8x16_t v11;
  float32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  float v17;
  float32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x2_t v24;
  float32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x2_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x2_t v36;
  float32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  float32x2_t v41;
  float32x4_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  float v48;

  a4.i64[0] = *a2;
  v11 = a4;
  v11.i32[2] = 0;
  v12 = (float32x4_t)v11;
  v12.i32[0] = *a3;
  a7.i32[0] = 0;
  a10.i32[0] = *(_DWORD *)(a1 + 4);
  v14 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(a7, a10)), 0);
  v13 = vbslq_s8((int8x16_t)v14, v11, (int8x16_t)v12);
  v12.i32[0] = *(_DWORD *)(a1 + 8);
  v14.i32[0] = *(_DWORD *)(a1 + 12);
  v15 = v13;
  v15.i32[1] = a3[1];
  v16 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(a7, v12)), 0), v13, v15);
  v17 = *(float *)a1
      + vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a1 + 4), *(float32x2_t *)v16.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 1), *(float32x2_t *)(a1 + 4), 1), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), *(float32x2_t *)v14.f32).f32[0];
  if (v17 > 0.0)
  {
    if (v17 < 0.0)
      v17 = 0.0 - v17;
    if (v17 > 0.000001)
      return 0;
  }
  v19 = (float32x4_t)__PAIR64__(a4.u32[1], *a3);
  a8.i32[0] = *(_DWORD *)(a1 + 20);
  v22 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(a7, a8)), 0), a4, (int8x16_t)__PAIR64__(a4.u32[1], *a3));
  v14.i32[0] = *(_DWORD *)(a1 + 24);
  a11.i32[0] = *(_DWORD *)(a1 + 28);
  v20 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(a7, v14)), 0);
  v23 = v22;
  v23.i32[1] = a3[1];
  v21 = vbslq_s8(v20, (int8x16_t)v22, (int8x16_t)v23);
  v22.i64[0] = *(_QWORD *)(a1 + 20);
  *(int32x2_t *)v23.f32 = vdup_lane_s32(*(int32x2_t *)v21.i8, 1);
  v24 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v21.i8), *(float32x2_t *)v23.f32, *(float32x2_t *)v22.f32, 1);
  v25 = (float32x4_t)vextq_s8(v21, v21, 8uLL);
  v25.f32[0] = *(float *)(a1 + 16) + vmla_f32(v24, *(float32x2_t *)v25.f32, a11).f32[0];
  if (v25.f32[0] > 0.0)
  {
    if (v25.f32[0] < 0.0)
      v25.f32[0] = 0.0 - v25.f32[0];
    if (v25.f32[0] > 0.000001)
      return 0;
  }
  v25.i32[0] = 0;
  v22.i32[0] = *(_DWORD *)(a1 + 36);
  v26 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v25, v22)), 0), a4, (int8x16_t)__PAIR64__(a4.u32[1], *a3));
  v23.i32[0] = *(_DWORD *)(a1 + 40);
  a11.i32[0] = *(_DWORD *)(a1 + 44);
  v29 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v25, v23)), 0);
  v27 = v26;
  v27.i32[1] = a3[1];
  v28 = vbslq_s8((int8x16_t)v29, v26, v27);
  v29.i64[0] = *(_QWORD *)(a1 + 36);
  v30 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v28.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 1), *(float32x2_t *)v29.f32, 1);
  v31 = (float32x4_t)vextq_s8(v28, v28, 8uLL);
  v31.f32[0] = *(float *)(a1 + 32) + vmla_f32(v30, *(float32x2_t *)v31.f32, a11).f32[0];
  if (v31.f32[0] > 0.0)
  {
    if (v31.f32[0] < 0.0)
      v31.f32[0] = 0.0 - v31.f32[0];
    if (v31.f32[0] > 0.000001)
      return 0;
  }
  v31.i32[0] = *(_DWORD *)(a1 + 52);
  v34 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v25, v31)), 0), a4, (int8x16_t)__PAIR64__(a4.u32[1], *a3));
  v29.i32[0] = *(_DWORD *)(a1 + 56);
  a11.i32[0] = *(_DWORD *)(a1 + 60);
  v32 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v25, v29)), 0);
  v35 = v34;
  v35.i32[1] = a3[1];
  v33 = vbslq_s8(v32, (int8x16_t)v34, (int8x16_t)v35);
  v34.i64[0] = *(_QWORD *)(a1 + 52);
  *(int32x2_t *)v35.f32 = vdup_lane_s32(*(int32x2_t *)v33.i8, 1);
  v36 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v33.i8), *(float32x2_t *)v35.f32, *(float32x2_t *)v34.f32, 1);
  v37 = (float32x4_t)vextq_s8(v33, v33, 8uLL);
  v37.f32[0] = *(float *)(a1 + 48) + vmla_f32(v36, *(float32x2_t *)v37.f32, a11).f32[0];
  if (v37.f32[0] > 0.0)
  {
    if (v37.f32[0] < 0.0)
      v37.f32[0] = 0.0 - v37.f32[0];
    if (v37.f32[0] > 0.000001)
      return 0;
  }
  v37.i32[0] = 0;
  v34.i32[0] = *(_DWORD *)(a1 + 68);
  v38 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v37, v34)), 0), a4, (int8x16_t)__PAIR64__(a4.u32[1], *a3));
  v35.i32[0] = *(_DWORD *)(a1 + 72);
  a11.i32[0] = *(_DWORD *)(a1 + 76);
  v39 = v38;
  v39.i32[1] = a3[1];
  v40 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v37, v35)), 0), v38, v39);
  v41 = vmla_lane_f32(vmul_f32(*(float32x2_t *)(a1 + 68), *(float32x2_t *)v40.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.i8, 1), *(float32x2_t *)(a1 + 68), 1);
  v42 = (float32x4_t)vextq_s8(v40, v40, 8uLL);
  v42.f32[0] = *(float *)(a1 + 64) + vmla_f32(v41, *(float32x2_t *)v42.f32, a11).f32[0];
  if (v42.f32[0] > 0.0)
  {
    if (v42.f32[0] < 0.0)
      v42.f32[0] = 0.0 - v42.f32[0];
    if (v42.f32[0] > 0.000001)
      return 0;
  }
  v42.i32[0] = *(_DWORD *)(a1 + 84);
  v43 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v37, v42)), 0);
  v44 = vbslq_s8(v43, a4, (int8x16_t)__PAIR64__(a4.u32[1], *a3));
  v19.i32[0] = *(_DWORD *)(a1 + 88);
  v43.i32[0] = *(_DWORD *)(a1 + 92);
  v45 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v37, v19)), 0);
  v46 = v44;
  v46.i32[1] = a3[1];
  v47 = vbslq_s8(v45, v44, v46);
  v48 = *(float *)(a1 + 80)
      + vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a1 + 84), *(float32x2_t *)v47.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1), *(float32x2_t *)(a1 + 84), 1), (float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL), *(float32x2_t *)v43.i8).f32[0];
  if (v48 <= 0.0)
    return 1;
  if (v48 < 0.0)
    v48 = 0.0 - v48;
  return v48 <= 0.000001;
}

void sub_223F7A8B0(float *a1, float *a2, uint64_t a3, char a4)
{
  float *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  float *v14;
  float v15;
  int v16;
  float v17;
  int v18;
  float *v19;
  float v20;
  float v21;
  float *i;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v28;
  float *v29;
  unint64_t v30;
  int v31;
  float v32;
  float *v34;
  unint64_t v35;
  float *v37;
  int v38;
  BOOL v39;
  float *v41;
  int v42;
  float v43;
  int v45;
  uint64_t v46;
  float *v47;
  float v48;
  float v49;
  int v51;
  BOOL v52;
  BOOL v54;
  float *v55;
  float v56;
  float v57;
  float *v59;
  int v60;
  BOOL v61;
  __int128 *v62;
  __int128 *v63;
  float *v64;
  int v65;
  int v66;
  BOOL v67;
  __int128 v68;
  int v69;
  int v70;
  __int128 v71;
  int v72;
  float *v73;
  BOOL v75;
  uint64_t v76;
  float *v77;
  float *v78;
  float *v79;
  int v80;
  float v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  float *v85;
  int v86;
  int64_t v88;
  int64_t v89;
  int64_t v90;
  uint64_t v91;
  float *v92;
  int v93;
  BOOL v94;
  float *v95;
  int v96;
  float v97;
  uint64_t v99;
  float *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  uint64_t v106;
  uint64_t v108;
  float *v109;
  float *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  BOOL v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  float *v118;
  int v119;
  float v120;
  BOOL v121;
  uint64_t v122;
  unint64_t v123;
  float *v124;
  float *v126;
  int v127;
  float v128;
  BOOL v129;
  uint64_t v130;
  float *j;
  int v132;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;

BOOL sub_223F7B20C(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float *v6;
  float *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  float v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  float *v18;
  int v19;
  BOOL v20;
  __int128 v21;
  __int128 *v22;
  __int128 *v23;
  float *v24;
  int v25;
  int v26;
  __int128 v27;
  int v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v18 = a2 - 4;
      v19 = *((_DWORD *)a2 - 4);
      if (v19 < *(_DWORD *)a1 || (v19 == *(_DWORD *)a1 ? (v20 = *(a2 - 1) < a1[3]) : (v20 = 0), v20))
      {
        v21 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v18;
        *(_OWORD *)v18 = v21;
      }
      return result;
    case 3:
      sub_2236B6494(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      v22 = (__int128 *)(a1 + 4);
      v23 = (__int128 *)(a1 + 8);
      sub_2236B6494(a1, a1 + 4, a1 + 8);
      v24 = a2 - 4;
      v25 = *((_DWORD *)a2 - 4);
      v26 = *((_DWORD *)a1 + 8);
      if (v25 < v26 || (result = 1, v25 == v26) && *(a2 - 1) < a1[11])
      {
        v27 = *v23;
        *v23 = *(_OWORD *)v24;
        *(_OWORD *)v24 = v27;
        v28 = *((_DWORD *)a1 + 8);
        v29 = *((_DWORD *)a1 + 4);
        if (v28 < v29 || (result = 1, v28 == v29) && a1[11] < a1[7])
        {
          v30 = *v22;
          *v22 = *v23;
          *v23 = v30;
          v31 = *((_DWORD *)a1 + 4);
          if (v31 < *(_DWORD *)a1 || (result = 1, v31 == *(_DWORD *)a1) && a1[7] < a1[3])
          {
            v32 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v22;
            *v22 = v32;
            return 1;
          }
        }
      }
      return result;
    case 5:
      sub_2236B62E8((uint64_t)a1, a1 + 4, a1 + 8, (uint64_t)(a1 + 12), (uint64_t)(a2 - 4));
      return 1;
    default:
      v6 = a1 + 8;
      sub_2236B6494(a1, a1 + 4, a1 + 8);
      v7 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v11 = *(_DWORD *)v7;
    v12 = v7[3];
    if (*(_DWORD *)v7 < *(_DWORD *)v6 || (v11 == *(_DWORD *)v6 ? (v13 = v12 < v6[3]) : (v13 = 0), v13))
    {
      v14 = *(_QWORD *)(v7 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v6;
      v10 = (uint64_t)a1;
      if (v6 != a1)
      {
        v15 = v8;
        while (1)
        {
          v16 = *(_DWORD *)((char *)a1 + v15 + 16);
          if (v11 >= v16 && (v11 != v16 || v12 >= *(float *)((char *)a1 + v15 + 28)))
            break;
          *(_OWORD *)((char *)a1 + v15 + 32) = *(_OWORD *)((char *)a1 + v15 + 16);
          v15 -= 16;
          if (v15 == -32)
          {
            v10 = (uint64_t)a1;
            goto LABEL_6;
          }
        }
        v10 = (uint64_t)a1 + v15 + 32;
      }
LABEL_6:
      *(_DWORD *)v10 = v11;
      *(_QWORD *)(v10 + 4) = v14;
      *(float *)(v10 + 12) = v12;
      if (++v9 == 8)
        return v7 + 4 == a2;
    }
    v6 = v7;
    v8 += 16;
    v7 += 4;
    if (v7 == a2)
      return 1;
  }
}

void sub_223F7B4F8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v5;
  v13[2] = a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        sub_2231B0668(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v24)
  {
    *v13 = *v24;
LABEL_58:
    *v24 = v13;
    goto LABEL_59;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v23 + 8 * v5) = a1 + 16;
  if (*v13)
  {
    v25 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_223F7B7B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_223F7B7C8(uint64_t *a1, float32x2_t *a2, uint64_t a3)
{
  uint64_t v5;
  float32x2_t v7;
  int32x2_t v8;
  uint64_t v9;
  int32x2_t v10;
  int32x2_t v11;
  uint64_t *result;
  int32x2_t v13;
  int32x2_t *v14;

  v5 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Tracker/ObservationCache.cpp", 48, (uint64_t)"m_grid != nullptr", 17, (uint64_t)&unk_2245AC21E, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = *a1;
  }
  v7 = vld1_dup_f32((const float *)v5);
  v8 = vcvt_s32_f32(vrndm_f32(vdiv_f32(*a2, v7)));
  v13 = v8;
  LODWORD(v9) = v8.i32[1];
  if (!*(_QWORD *)(v5 + 48))
  {
    if ((int32x2_t *)(v5 + 4) != &v13)
    {
      v10 = v13;
      *(int32x2_t *)(v5 + 4) = v13;
      v9 = HIDWORD(*(_QWORD *)&v10);
    }
    if ((int32x2_t *)(v5 + 12) != &v13)
    {
      v11 = v13;
      *(int32x2_t *)(v5 + 12) = v13;
      v9 = HIDWORD(*(_QWORD *)&v11);
    }
  }
  v8.i32[1] = v9;
  *(int32x2_t *)(v5 + 4) = vmin_s32(v8, *(int32x2_t *)(v5 + 4));
  *(int32x2_t *)(v5 + 12) = vmax_s32(*(int32x2_t *)(v5 + 12), v8);
  v14 = &v13;
  result = sub_223F7C7EC(v5 + 24, (int *)&v13, (uint64_t)&unk_2245BA939, (_QWORD **)&v14);
  *((_BYTE *)result + 35) = 1;
  result[3] += a3;
  *(_WORD *)((char *)result + 33) = 256;
  return result;
}

void sub_223F7B8F4(int8x8_t **a1@<X0>, _QWORD *a2@<X1>, __n128 **a3@<X8>, __n128 a4@<Q0>)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int32x2_t *v9;
  __n128 *v10;
  __n128 *v11;
  __int8 v12;
  __int8 v13;
  float32x2_t v14;
  int8x16_t v15;
  float32x2_t v16;
  int16x4_t v17;
  int8x16_t v18;
  unint64_t v19;
  __n128 *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  __n128 *v26;
  unint64_t v27;
  __n128 *v28;
  __n128 *v29;
  unint64_t v30;
  __n128 *v31;
  int64_t v32;
  unint64_t v33;
  __int8 *v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  const double *n128_f64;
  double *v53;
  uint64_t v54;
  const double *v55;
  double *v56;
  unsigned __int32 *v57;
  int v58;
  unsigned __int32 *v59;
  int8x8_t v60;
  unint64_t v61;
  uint8x8_t v62;
  unsigned __int32 *v63;
  uint64_t v64;
  unsigned __int32 *v65;
  unsigned __int32 *v66;
  unint64_t v67;
  unsigned __int32 *v68;
  unint64_t v69;
  unint64_t v70;
  __n128 v71;
  float64x2x2_t v72;

  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (!v6)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v9 = (int32x2_t *)(*a1)[5];
    if (v9)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v9 = (int32x2_t *)(*a1)[5];
    if (v9)
    {
LABEL_6:
      v10 = 0;
      while (1)
      {
        if (v9[4].i8[2])
        {
          v12 = v9[4].i8[0];
          if (v9[4].i8[3])
            v13 = v12 + 1;
          else
            v13 = v12 - 1;
          v9[4].i8[0] = v13;
          if (*((unsigned __int8 *)a1 + 24) > v13)
            goto LABEL_9;
        }
        else
        {
          ++v9[4].i8[1];
          if (*((unsigned __int8 *)a1 + 24) > v9[4].i8[0])
            goto LABEL_9;
        }
        if ((unint64_t)a1[2] > *(_QWORD *)&v9[3])
          goto LABEL_9;
        a4.n128_u32[0] = (*a1)->i32[0];
        v14 = (float32x2_t)vdup_lane_s32((int32x2_t)a4.n128_u64[0], 0);
        *(float32x2_t *)v15.i8 = vmul_n_f32(vcvt_f32_s32(v9[2]), a4.n128_f32[0]);
        v16 = vadd_f32(v14, *(float32x2_t *)v15.i8);
        v17 = (int16x4_t)vcgt_f32(*(float32x2_t *)v15.i8, v16);
        *(float32x2_t *)v18.i8 = v16;
        v18.i64[1] = v15.i64[0];
        v15.u64[1] = (unint64_t)v16;
        a4 = (__n128)vbslq_s8((int8x16_t)vmovl_s16(vuzp1_s16(v17, v17)), v18, v15);
        v19 = (unint64_t)a3[2];
        if ((unint64_t)v10 < v19)
        {
          *v10 = a4;
          v11 = v10 + 1;
        }
        else
        {
          v20 = *a3;
          v21 = (char *)v10 - (char *)*a3;
          v22 = (v21 >> 4) + 1;
          if (v22 >> 60)
            sub_22324A284();
          v71 = a4;
          v23 = v19 - (_QWORD)v20;
          if (v23 >> 3 > v22)
            v22 = v23 >> 3;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
            v24 = 0xFFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24 >> 60)
            sub_223174E94();
          v25 = (char *)operator new(16 * v24);
          v26 = (__n128 *)&v25[16 * (v21 >> 4)];
          a4.n128_u32[1] = v71.n128_u32[1];
          *v26 = v71;
          v11 = v26 + 1;
          if (v10 != v20)
          {
            v27 = (char *)v10 - (char *)v20 - 16;
            if (v27 < 0x3F0)
              goto LABEL_28;
            v31 = v10 - 1;
            v32 = (char *)&v10[-1] - (char *)v20;
            v33 = v32 & 0xFFFFFFFFFFFFFFF0;
            if (&v25[v21 - 16 - (v32 & 0xFFFFFFFFFFFFFFF0)] > &v25[v21 - 16])
              goto LABEL_28;
            if (&v25[v21 - 8 - v33] > &v25[v21 - 8])
              goto LABEL_28;
            if ((__n128 *)((char *)v31 - v33) > v31)
              goto LABEL_28;
            v34 = &v10[-1].n128_i8[8];
            if (&v10[-1].n128_i8[-v33 + 8] > &v10[-1].n128_i8[8])
              goto LABEL_28;
            v35 = v32 & 0xFFFFFFFFFFFFFFF0;
            v36 = (unint64_t)&v25[v21 - v35 - 16];
            v37 = &v25[v21 - 8];
            v38 = (unint64_t)&v25[v21 - v35 - 8];
            v39 = (unint64_t)v31->n128_u64 - v35;
            v40 = (unint64_t)&v34[-v35];
            v41 = v36 >= (unint64_t)v34 || v39 >= (unint64_t)v37;
            v42 = !v41;
            v43 = v36 >= (unint64_t)v10 || v40 >= (unint64_t)v37;
            v44 = !v43;
            v45 = v38 >= (unint64_t)v34 || v39 >= (unint64_t)v26;
            v46 = !v45;
            v47 = v38 >= (unint64_t)v10 || v40 >= (unint64_t)v26;
            v48 = !v47;
            v49 = v38 >= (unint64_t)v37 || v36 >= (unint64_t)v26;
            if (!v49 || v42 || v44 || v46 || v48)
            {
LABEL_28:
              v28 = v10;
              v29 = v26;
            }
            else
            {
              v50 = (v27 >> 4) + 1;
              v51 = 16 * (v50 & 0x1FFFFFFFFFFFFFFCLL);
              v28 = &v10[v51 / 0xFFFFFFFFFFFFFFF0];
              v29 = &v26[v51 / 0xFFFFFFFFFFFFFFF0];
              n128_f64 = v10[-2].n128_f64;
              v53 = v26[-2].n128_f64;
              v54 = v50 & 0x1FFFFFFFFFFFFFFCLL;
              do
              {
                *(float64x2x2_t *)a4.n128_u64 = vld2q_f64(n128_f64);
                v55 = n128_f64 - 4;
                v72 = vld2q_f64(v55);
                vst2q_f64(v53, *(float64x2x2_t *)a4.n128_u64);
                v56 = v53 - 4;
                vst2q_f64(v56, v72);
                v53 -= 8;
                n128_f64 -= 8;
                v54 -= 4;
              }
              while (v54);
              if (v50 == (v50 & 0x1FFFFFFFFFFFFFFCLL))
              {
LABEL_30:
                *a3 = v29;
                a3[1] = v11;
                a3[2] = (__n128 *)&v25[16 * v24];
                if (!v20)
                  goto LABEL_8;
LABEL_33:
                operator delete(v20);
                goto LABEL_8;
              }
            }
            do
            {
              v30 = v28[-1].n128_u64[0];
              --v28;
              v29[-1].n128_u64[0] = v30;
              --v29;
              v29->n128_u64[1] = v28->n128_u64[1];
            }
            while (v28 != v20);
            goto LABEL_30;
          }
          *a3 = v26;
          a3[1] = v11;
          a3[2] = (__n128 *)&v25[16 * v24];
          if (v20)
            goto LABEL_33;
        }
LABEL_8:
        a3[1] = v11;
        v10 = v11;
LABEL_9:
        v9 = (int32x2_t *)*v9;
        if (!v9)
        {
          v57 = (unsigned __int32 *)(*a1)[5];
          if (!v57)
            return;
          while (2)
          {
            while (1)
            {
              v58 = *((char *)v57 + 32);
              if (v58 >= *((unsigned __int8 *)a1 + 24) && (unint64_t)a1[2] <= *((_QWORD *)v57 + 3))
                break;
              if (v58 < 0 || *((unsigned __int8 *)v57 + 33) >= *((unsigned __int8 *)a1 + 25))
                break;
              v57 = *(unsigned __int32 **)v57;
              if (!v57)
                return;
            }
            v59 = (unsigned __int32 *)*a1;
            v60 = (*a1)[4];
            v61 = *((_QWORD *)v57 + 1);
            v62 = (uint8x8_t)vcnt_s8(v60);
            v62.i16[0] = vaddlv_u8(v62);
            if (v62.u32[0] > 1uLL)
            {
              if (v61 >= *(_QWORD *)&v60)
                v61 %= *(_QWORD *)&v60;
            }
            else
            {
              v61 &= *(_QWORD *)&v60 - 1;
            }
            v63 = *(unsigned __int32 **)v57;
            v64 = *((_QWORD *)v59 + 3);
            v65 = *(unsigned __int32 **)(v64 + 8 * v61);
            do
            {
              v66 = v65;
              v65 = *(unsigned __int32 **)v65;
            }
            while (v65 != v57);
            if (v66 == v59 + 10)
              goto LABEL_116;
            v67 = *((_QWORD *)v66 + 1);
            if (v62.u32[0] > 1uLL)
            {
              if (v67 >= *(_QWORD *)&v60)
                v67 %= *(_QWORD *)&v60;
            }
            else
            {
              v67 &= *(_QWORD *)&v60 - 1;
            }
            v68 = *(unsigned __int32 **)v57;
            if (v67 == v61)
            {
LABEL_103:
              if (v68)
                goto LABEL_104;
            }
            else
            {
LABEL_116:
              if (!v63)
                goto LABEL_102;
              v69 = *((_QWORD *)v63 + 1);
              if (v62.u32[0] > 1uLL)
              {
                if (v69 >= *(_QWORD *)&v60)
                  v69 %= *(_QWORD *)&v60;
              }
              else
              {
                v69 &= *(_QWORD *)&v60 - 1;
              }
              v68 = *(unsigned __int32 **)v57;
              if (v69 != v61)
              {
LABEL_102:
                *(_QWORD *)(v64 + 8 * v61) = 0;
                v68 = *(unsigned __int32 **)v57;
                goto LABEL_103;
              }
LABEL_104:
              v70 = *((_QWORD *)v68 + 1);
              if (v62.u32[0] > 1uLL)
              {
                if (v70 >= *(_QWORD *)&v60)
                  v70 %= *(_QWORD *)&v60;
              }
              else
              {
                v70 &= *(_QWORD *)&v60 - 1;
              }
              if (v70 != v61)
              {
                *(_QWORD *)(*((_QWORD *)v59 + 3) + 8 * v70) = v66;
                v68 = *(unsigned __int32 **)v57;
              }
            }
            *(_QWORD *)v66 = v68;
            *(_QWORD *)v57 = 0;
            --*((_QWORD *)v59 + 6);
            operator delete(v57);
            v57 = v63;
            if (!v63)
              return;
            continue;
          }
        }
      }
    }
  }
}

void sub_223F7BDDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_223F7BE08(uint64_t *a1, _DWORD **a2, float32x2_t *a3, double a4)
{
  unint64_t v4;
  uint64_t v6;
  int32x2_t *i;
  unint64_t v8;
  int8x8_t v9;
  uint64_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  int32x2_t v14;
  __int8 v15;
  unsigned int v16;
  int8x8_t v17;
  unsigned int v18;
  int8x8_t v19;
  int8x8_t v20;
  int8x8_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  uint64_t v32;
  float32x2_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  unint64_t v38;
  int32x2_t **v39;
  int32x2_t *v40;
  int32x2_t v41;
  int32x2_t v42;
  int32x2_t v43;
  int32x2_t v44;
  _QWORD *v45;
  int8x8_t v46;
  uint8x8_t v47;
  unint64_t v48;
  int32x2_t **v49;
  int32x2_t *v50;
  uint64_t v51;
  int32x2_t v52;
  int32x2_t v53;
  int32x2_t v54;
  int32x2_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t **v62;
  uint64_t *v63;
  unint64_t v65;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _BOOL8 v71;
  unint64_t v72;
  unint64_t v73;
  size_t prime;
  void *v75;
  void *v76;
  uint64_t v77;
  _QWORD **v78;
  size_t v79;
  size_t v80;
  size_t v81;
  _QWORD *j;
  size_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  void *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  size_t v92;
  _QWORD *v93;
  _QWORD *v94;
  _DWORD *v95;
  void *__p[2];
  void *v99[2];
  float v100;
  float32x2_t v101;
  float32x4_t v102;
  float32x2_t v103;
  double v104;
  double *v105;

  v6 = a1[1];
  if ((!v6 || *(_QWORD *)(v6 + 8) || (v95 = a2[1]) == 0 || *((_QWORD *)v95 + 1))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Tracker/ObservationCache.cpp", 190, (uint64_t)"m_grid.use_count() == 1 && otherCache.m_grid.use_count() == 1", 61, (uint64_t)&unk_2245AC21E, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  for (i = (int32x2_t *)*((_QWORD *)*a2 + 5); i; i = (int32x2_t *)*i)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    LODWORD(a4) = **a2;
    v11 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a4, 0);
    v12 = vmul_n_f32(vcvt_f32_s32(i[2]), *(float *)&a4);
    v13 = vadd_f32(v11, v12);
    v14 = vcgt_f32(v12, v13);
    v15 = v14.i8[4];
    if ((v14.i8[0] & 1) != 0)
      v16 = -1;
    else
      v16 = 0;
    v17 = (int8x8_t)vdup_n_s32(v16);
    if ((v15 & 1) != 0)
      v18 = -1;
    else
      v18 = 0;
    v19 = (int8x8_t)vdup_n_s32(v18);
    v20.i32[0] = vbsl_s8(v17, (int8x8_t)v13, (int8x8_t)v12).u32[0];
    v21.i32[0] = vbsl_s8(v17, (int8x8_t)v12, (int8x8_t)v13).u32[0];
    v20.i32[1] = v13.i32[1];
    v21.i32[1] = v12.i32[1];
    v22 = (float32x2_t)vbsl_s8(v19, v21, (int8x8_t)__PAIR64__(v13.u32[1], v21.u32[0]));
    *(float32x2_t *)v23.f32 = vmul_f32(vadd_f32((float32x2_t)vbsl_s8(v19, v20, (int8x8_t)__PAIR64__(v12.u32[1], v20.u32[0])), v22), (float32x2_t)0x3F0000003F000000);
    *(float32x2_t *)v24.f32 = vsub_f32(*(float32x2_t *)v23.f32, v22);
    v25 = vadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v24.f32);
    v26 = vsub_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v24.f32);
    v23.i64[1] = v23.i64[0];
    v24.i64[1] = v24.i64[0];
    v27 = vsubq_f32(v23, v24);
    v28 = vaddq_f32(v23, v24);
    v28.i32[0] = v27.i32[0];
    v28.i32[3] = v27.i32[3];
    v102 = v28;
    *(float32x2_t *)v28.f32 = *a3;
    *(float32x2_t *)v24.f32 = a3[1];
    *(float32x2_t *)v27.f32 = vmla_lane_f32(vmul_n_f32(*a3, v25.f32[0]), *(float32x2_t *)v24.f32, v25, 1);
    v29 = a3[2];
    v30 = vadd_f32(*(float32x2_t *)v27.f32, v29);
    *(float32x2_t *)v27.f32 = vadd_f32(v29, vmla_lane_f32(vmul_n_f32(*a3, v102.f32[0]), *(float32x2_t *)v24.f32, *(float32x2_t *)v102.f32, 1));
    v31 = vadd_f32(v29, vmla_lane_f32(vmul_n_f32(*a3, v102.f32[2]), *(float32x2_t *)v24.f32, *(float32x2_t *)&v102.u32[2], 1));
    v101 = v30;
    v102.i64[0] = v27.i64[0];
    *(float32x2_t *)&v102.u32[2] = v31;
    v103 = vadd_f32(v29, vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v28.f32, v26.f32[0]), *(float32x2_t *)v24.f32, v26, 1));
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v99 = 0u;
    v100 = 1.0;
    do
    {
      v32 = *a1;
      v33 = vld1_dup_f32((const float *)v32);
      a4 = COERCE_DOUBLE(vcvt_s32_f32(vrndm_f32(vdiv_f32(*(&v101 + v10), v33))));
      v34 = LODWORD(a4);
      v35 = HIDWORD(a4);
      v36 = (SHIDWORD(a4)
           + 2654435769
           + ((unint64_t)(SLODWORD(a4) + 2654435769) >> 2)
           + ((SLODWORD(a4) + 2654435769) << 6)) ^ (SLODWORD(a4) + 2654435769);
      if (v9)
      {
        v37 = (uint8x8_t)vcnt_s8(v9);
        v37.i16[0] = vaddlv_u8(v37);
        if (v37.u32[0] > 1uLL)
        {
          v38 = (SHIDWORD(a4)
               + 2654435769
               + ((unint64_t)(SLODWORD(a4) + 2654435769) >> 2)
               + ((SLODWORD(a4) + 2654435769) << 6)) ^ (SLODWORD(a4) + 2654435769);
          if (v36 >= *(_QWORD *)&v9)
            v38 = v36 % *(_QWORD *)&v9;
        }
        else
        {
          v38 = v36 & (*(_QWORD *)&v9 - 1);
        }
        v39 = (int32x2_t **)*((_QWORD *)__p[0] + v38);
        if (v39)
        {
          v40 = *v39;
          if (v40)
          {
            if (v37.u32[0] < 2uLL)
            {
              while (1)
              {
                v44 = v40[1];
                if (*(_QWORD *)&v44 == v36)
                {
                  v43 = vceq_s32(v40[2], *(int32x2_t *)&a4);
                  if ((v43.i32[0] & v43.i32[1] & 1) != 0)
                    goto LABEL_172;
                }
                else if ((*(_QWORD *)&v44 & (*(_QWORD *)&v9 - 1)) != v38)
                {
                  goto LABEL_34;
                }
                v40 = (int32x2_t *)*v40;
                if (!v40)
                  goto LABEL_34;
              }
            }
            do
            {
              v42 = v40[1];
              if (*(_QWORD *)&v42 == v36)
              {
                v41 = vceq_s32(v40[2], *(int32x2_t *)&a4);
                if ((v41.i32[0] & v41.i32[1] & 1) != 0)
                  goto LABEL_172;
              }
              else
              {
                if (*(_QWORD *)&v42 >= *(_QWORD *)&v9)
                  *(_QWORD *)&v42 %= *(_QWORD *)&v9;
                if (*(_QWORD *)&v42 != v38)
                  break;
              }
              v40 = (int32x2_t *)*v40;
            }
            while (v40);
          }
        }
      }
LABEL_34:
      v45 = (_QWORD *)(v32 + 24);
      v46 = *(int8x8_t *)(v32 + 32);
      if (v46)
      {
        v47 = (uint8x8_t)vcnt_s8(v46);
        v47.i16[0] = vaddlv_u8(v47);
        if (v47.u32[0] > 1uLL)
        {
          v48 = (SHIDWORD(a4)
               + 2654435769
               + ((unint64_t)(SLODWORD(a4) + 2654435769) >> 2)
               + ((SLODWORD(a4) + 2654435769) << 6)) ^ (SLODWORD(a4) + 2654435769);
          if (v36 >= *(_QWORD *)&v46)
            v48 = v36 % *(_QWORD *)&v46;
        }
        else
        {
          v48 = (*(_QWORD *)&v46 - 1) & v36;
        }
        v49 = *(int32x2_t ***)(*v45 + 8 * v48);
        if (v49)
        {
          v50 = *v49;
          if (v50)
          {
            if (v47.u32[0] < 2uLL)
            {
              v51 = *(_QWORD *)&v46 - 1;
              while (1)
              {
                v53 = v50[1];
                if (*(_QWORD *)&v53 == v36)
                {
                  v52 = vceq_s32(v50[2], *(int32x2_t *)&a4);
                  if ((v52.i32[0] & v52.i32[1] & 1) != 0)
                    goto LABEL_64;
                }
                else if ((*(_QWORD *)&v53 & v51) != v48)
                {
                  goto LABEL_54;
                }
                v50 = (int32x2_t *)*v50;
                if (!v50)
                  goto LABEL_54;
              }
            }
            do
            {
              v55 = v50[1];
              if (*(_QWORD *)&v55 == v36)
              {
                v54 = vceq_s32(v50[2], *(int32x2_t *)&a4);
                if ((v54.i32[0] & v54.i32[1] & 1) != 0)
                  goto LABEL_64;
              }
              else
              {
                if (*(_QWORD *)&v55 >= *(_QWORD *)&v46)
                  *(_QWORD *)&v55 %= *(_QWORD *)&v46;
                if (*(_QWORD *)&v55 != v48)
                  break;
              }
              v50 = (int32x2_t *)*v50;
            }
            while (v50);
          }
        }
      }
LABEL_54:
      v104 = a4;
      if (!*(_QWORD *)(v32 + 48))
      {
        if ((double *)(v32 + 4) != &v104)
          *(double *)(v32 + 4) = v104;
        if ((double *)(v32 + 12) != &v104)
          *(double *)(v32 + 12) = v104;
      }
      v56 = *(_DWORD *)(v32 + 4);
      v57 = *(_DWORD *)(v32 + 8);
      if (SLODWORD(a4) < v56)
        v56 = LODWORD(a4);
      *(_DWORD *)(v32 + 4) = v56;
      v58 = HIDWORD(v104);
      if (SHIDWORD(v104) < v57)
        v57 = HIDWORD(v104);
      *(_DWORD *)(v32 + 8) = v57;
      HIDWORD(a4) = v58;
      *(int32x2_t *)(v32 + 12) = vmax_s32(*(int32x2_t *)(v32 + 12), *(int32x2_t *)&a4);
      v105 = &v104;
      v50 = (int32x2_t *)sub_223F7C7EC((uint64_t)v45, (int *)&v104, (uint64_t)&unk_2245BA939, (_QWORD **)&v105);
      v8 = (unint64_t)__p[1];
LABEL_64:
      v59 = v50[4].i8[0];
      if (v59 <= i[4].i8[0])
        LOBYTE(v59) = i[4].i8[0];
      if (v50[4].i8[2])
        v60 = 0x10000;
      else
        v60 = i[4].u8[2] << 16;
      if (v50[4].i8[3])
        v61 = 0x1000000;
      else
        v61 = i[4].u8[3] << 24;
      *(_QWORD *)&v50[3] += *(_QWORD *)&i[3];
      v50[4].i32[0] = v60 & 0xFFFFFF00 | v59 | v61;
      if (v8)
      {
        a4 = COERCE_DOUBLE(vcnt_s8((int8x8_t)v8));
        LOWORD(a4) = vaddlv_u8(*(uint8x8_t *)&a4);
        if (LODWORD(a4) > 1uLL)
        {
          v4 = v36;
          if (v36 >= v8)
            v4 = v36 % v8;
        }
        else
        {
          v4 = (v8 - 1) & v36;
        }
        v62 = (uint64_t **)*((_QWORD *)__p[0] + v4);
        if (v62)
        {
          v63 = *v62;
          if (v63)
          {
            if (LODWORD(a4) < 2uLL)
            {
              while (1)
              {
                v67 = v63[1];
                if (v67 == v36)
                {
                  if (*((_DWORD *)v63 + 4) == (_DWORD)v34 && *((_DWORD *)v63 + 5) == (_DWORD)v35)
                    goto LABEL_171;
                }
                else if ((v67 & (v8 - 1)) != v4)
                {
                  goto LABEL_98;
                }
                v63 = (uint64_t *)*v63;
                if (!v63)
                  goto LABEL_98;
              }
            }
            do
            {
              v65 = v63[1];
              if (v65 == v36)
              {
                if (*((_DWORD *)v63 + 4) == (_DWORD)v34 && *((_DWORD *)v63 + 5) == (_DWORD)v35)
                  goto LABEL_171;
              }
              else
              {
                if (v65 >= v8)
                  v65 %= v8;
                if (v65 != v4)
                  break;
              }
              v63 = (uint64_t *)*v63;
            }
            while (v63);
          }
        }
      }
LABEL_98:
      v68 = operator new(0x18uLL);
      *v68 = 0;
      v68[1] = v36;
      v68[2] = v34 | (v35 << 32);
      *(float *)&a4 = (float)((unint64_t)v99[1] + 1);
      if (!v8 || (float)(v100 * (float)v8) < *(float *)&a4)
      {
        v71 = (v8 & (v8 - 1)) != 0;
        if (v8 < 3)
          v71 = 1;
        v72 = v71 | (2 * v8);
        v73 = vcvtps_u32_f32(*(float *)&a4 / v100);
        if (v72 <= v73)
          prime = v73;
        else
          prime = v72;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v8 = (unint64_t)__p[1];
        }
        if (prime <= v8)
        {
          if (prime >= v8)
            goto LABEL_148;
          v85 = vcvtps_u32_f32((float)(unint64_t)v99[1] / v100);
          if (v8 < 3
            || (a4 = COERCE_DOUBLE(vcnt_s8((int8x8_t)v8)), LOWORD(a4) = vaddlv_u8(*(uint8x8_t *)&a4), LODWORD(a4) > 1uLL))
          {
            v85 = std::__next_prime(v85);
          }
          else
          {
            v86 = 1 << -(char)__clz(v85 - 1);
            if (v85 >= 2)
              v85 = v86;
          }
          if (prime <= v85)
            prime = v85;
          if (prime >= v8)
          {
            v8 = (unint64_t)__p[1];
            v89 = (uint64_t)__p[1] - 1;
            if (((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0)
              goto LABEL_161;
          }
          else
          {
            if (prime)
              goto LABEL_112;
            v88 = __p[0];
            __p[0] = 0;
            if (v88)
              operator delete(v88);
            v8 = 0;
            __p[1] = 0;
            v89 = -1;
          }
LABEL_149:
          v4 = v89 & v36;
          v69 = __p[0];
          v70 = (_QWORD *)*((_QWORD *)__p[0] + (v89 & v36));
          if (!v70)
            goto LABEL_150;
          goto LABEL_101;
        }
LABEL_112:
        if (prime >> 61)
          sub_223174E94();
        v75 = operator new(8 * prime);
        v76 = __p[0];
        __p[0] = v75;
        if (v76)
          operator delete(v76);
        v77 = 0;
        __p[1] = (void *)prime;
        do
          *((_QWORD *)__p[0] + v77++) = 0;
        while (prime != v77);
        v78 = (_QWORD **)v99[0];
        if (!v99[0])
        {
LABEL_160:
          v8 = prime;
          v89 = prime - 1;
          if ((prime & (prime - 1)) == 0)
            goto LABEL_149;
          goto LABEL_161;
        }
        v79 = *((_QWORD *)v99[0] + 1);
        v80 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v81 = v79 & v80;
          *((_QWORD *)__p[0] + v81) = v99;
          for (j = *v78; *v78; j = *v78)
          {
            v83 = j[1] & v80;
            if (v83 == v81)
            {
              v78 = (_QWORD **)j;
            }
            else if (*((_QWORD *)__p[0] + v83))
            {
              *v78 = (_QWORD *)*j;
              v84 = 8 * v83;
              *j = **(_QWORD **)((char *)__p[0] + v84);
              **(_QWORD **)((char *)__p[0] + v84) = j;
            }
            else
            {
              *((_QWORD *)__p[0] + v83) = v78;
              v78 = (_QWORD **)j;
              v81 = v83;
            }
          }
          goto LABEL_160;
        }
        if (v79 < prime)
        {
          *((_QWORD *)__p[0] + v79) = v99;
          v87 = *v78;
          if (*v78)
            goto LABEL_155;
LABEL_147:
          v8 = prime;
LABEL_148:
          v89 = v8 - 1;
          if ((v8 & (v8 - 1)) == 0)
            goto LABEL_149;
LABEL_161:
          if (v36 >= v8)
          {
            v4 = v36 % v8;
            v69 = __p[0];
            v70 = (_QWORD *)*((_QWORD *)__p[0] + v36 % v8);
            if (!v70)
              goto LABEL_150;
          }
          else
          {
            v4 = v36;
            v69 = __p[0];
            v70 = (_QWORD *)*((_QWORD *)__p[0] + v36);
            if (!v70)
              goto LABEL_150;
          }
LABEL_101:
          *v68 = *v70;
          goto LABEL_169;
        }
        v79 %= prime;
        *((_QWORD *)__p[0] + v79) = v99;
        v87 = *v78;
        if (!*v78)
          goto LABEL_147;
        while (1)
        {
LABEL_155:
          v92 = v87[1];
          if (v92 >= prime)
            v92 %= prime;
          if (v92 == v79)
            goto LABEL_154;
          if (*((_QWORD *)__p[0] + v92))
            break;
          *((_QWORD *)__p[0] + v92) = v78;
          v78 = (_QWORD **)v87;
          v87 = (_QWORD *)*v87;
          v79 = v92;
          if (!v87)
            goto LABEL_160;
        }
        *v78 = (_QWORD *)*v87;
        v91 = 8 * v92;
        *v87 = **(_QWORD **)((char *)__p[0] + v91);
        **(_QWORD **)((char *)__p[0] + v91) = v87;
        v87 = v78;
LABEL_154:
        v78 = (_QWORD **)v87;
        v87 = (_QWORD *)*v87;
        if (!v87)
          goto LABEL_160;
        goto LABEL_155;
      }
      v69 = __p[0];
      v70 = (_QWORD *)*((_QWORD *)__p[0] + v4);
      if (v70)
        goto LABEL_101;
LABEL_150:
      *v68 = v99[0];
      v99[0] = v68;
      v69[v4] = v99;
      if (!*v68)
        goto LABEL_170;
      v90 = *(_QWORD *)(*v68 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v90 >= v8)
          v90 %= v8;
      }
      else
      {
        v90 &= v8 - 1;
      }
      v70 = (char *)__p[0] + 8 * v90;
LABEL_169:
      *v70 = v68;
LABEL_170:
      ++v99[1];
LABEL_171:
      v9 = (int8x8_t)v8;
LABEL_172:
      ++v10;
    }
    while (v10 != 4);
    v93 = v99[0];
    if (v99[0])
    {
      do
      {
        v94 = (_QWORD *)*v93;
        operator delete(v93);
        v93 = v94;
      }
      while (v94);
    }
    if (__p[0])
      operator delete(__p[0]);
  }
}

void sub_223F7C7A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  operator delete(v13);
  sub_22322E828((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_223F7C7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22322E828((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223F7C7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22322E828((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_223F7C7EC(uint64_t a1, int *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v19;
  float v20;
  float v21;
  uint64_t v22;
  _QWORD *v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;

  v7 = *a2;
  v8 = a2[1];
  v9 = (v8 + ((unint64_t)(v7 + 2654435769) >> 2) + ((v7 + 2654435769) << 6) + 2654435769u) ^ (v7 + 2654435769);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = (v8 + ((unint64_t)(v7 + 2654435769) >> 2) + ((v7 + 2654435769) << 6) + 2654435769u) ^ (v7 + 2654435769);
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 4) == (_DWORD)v7 && *((_DWORD *)v13 + 5) == (_DWORD)v8)
                return v13;
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            v13 = (uint64_t *)*v13;
            if (!v13)
              goto LABEL_31;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == (_DWORD)v7 && *((_DWORD *)v13 + 5) == (_DWORD)v8)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v4)
              break;
          }
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  v19 = operator new(0x28uLL);
  *v19 = 0;
  v19[1] = v9;
  v19[2] = **a4;
  v19[3] = 0;
  v19[4] = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    v22 = *(_QWORD *)a1;
    v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v23)
    {
LABEL_34:
      *v19 = *v23;
LABEL_69:
      *v23 = v19;
      goto LABEL_70;
    }
  }
  else
  {
    v24 = 1;
    if (v10 >= 3)
      v24 = (v10 & (v10 - 1)) != 0;
    v25 = v24 | (2 * v10);
    v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_45;
    if (prime < v10)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (prime <= v28)
        prime = v28;
      if (prime < v10)
LABEL_45:
        sub_2231B0668(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v4 = v9 % v10;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v23)
          goto LABEL_34;
      }
      else
      {
        v4 = v9;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v23)
          goto LABEL_34;
      }
    }
    else
    {
      v4 = v31 & v9;
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v31 & v9));
      if (v23)
        goto LABEL_34;
    }
  }
  *v19 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v19;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*v19)
  {
    v32 = *(_QWORD *)(*v19 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10)
        v32 %= v10;
    }
    else
    {
      v32 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(_QWORD *)(a1 + 24);
  return v19;
}

void sub_223F7CB24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223F7CB38(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC64630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223F7CB48(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC64630;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223F7CB78(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 64);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v4)
    operator delete(v4);
}

uint64_t sub_223F7CBC8(uint64_t a1, float *a2)
{
  float v3;
  void *__p;
  void *v6;
  uint64_t v7;

  v3 = *a2;
  __p = 0;
  v6 = 0;
  v7 = 0;
  *(float *)a1 = v3;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 56) = 1065353216;
  if (v3 <= 0.0
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/include_private/ACV/SurfaceDetection/Geometry/CellGrid.h", 249, (uint64_t)"cellSize > 0.f", 14, (uint64_t)&unk_2245AC21E, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223F7CCDC((uint64_t *)a1, (float32x2_t **)&__p);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_223F7CC88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void **v12;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;

  v14 = *(_QWORD **)(v11 + 40);
  if (v14)
  {
    do
    {
      v15 = (_QWORD *)*v14;
      operator delete(v14);
      v14 = v15;
    }
    while (v15);
  }
  v16 = *v12;
  *v12 = 0;
  if (v16)
  {
    operator delete(v16);
    v17 = __p;
    if (!__p)
LABEL_5:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v17 = __p;
    if (!__p)
      goto LABEL_5;
  }
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223F7CCDC(uint64_t *result, float32x2_t **a2)
{
  float32x2_t *v2;
  float32x2_t *v3;
  uint64_t *v4;
  int32x2_t *v5;
  uint64_t v6;
  __int32 v7;
  int v8;
  __int32 v9;
  __int32 v10;
  int v11;
  float32x2_t v12;
  int32x2_t v13;
  int v14;
  __int32 v15;
  __int32 v16;
  float32x2_t v17;
  int32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  __int32 v21;
  int v22;
  __int32 v23;
  float32x2_t v24;
  int32x2_t v25;
  int32x2_t v26;
  int32x2_t *v27;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = result;
    v5 = (int32x2_t *)((char *)result + 12);
    v6 = (uint64_t)(result + 3);
    if ((int32x2_t *)((char *)result + 4) == &v26)
    {
      if (v5 == &v26)
      {
        do
        {
          v19 = *v2++;
          v20 = vld1_dup_f32((const float *)v4);
          v26 = vcvt_s32_f32(vrndm_f32(vdiv_f32(v19, v20)));
          v27 = &v26;
          result = sub_223F7C7EC(v6, (int *)&v26, (uint64_t)&unk_2245BA939, (_QWORD **)&v27);
        }
        while (v2 != v3);
      }
      else
      {
        do
        {
          v24 = vld1_dup_f32((const float *)v4);
          v25 = vcvt_s32_f32(vrndm_f32(vdiv_f32(*v2, v24)));
          v26 = v25;
          if (v4[6])
          {
            v22 = *((_DWORD *)v4 + 3);
            v21 = *((_DWORD *)v4 + 4);
            v23 = v25.i32[1];
          }
          else
          {
            v22 = v26.i32[0];
            v21 = v26.i32[1];
            v23 = v26.i32[1];
          }
          v26.i32[0] = v25.i32[0];
          if (v22 <= v25.i32[0])
            v22 = v25.i32[0];
          if (v21 <= v23)
            v21 = v23;
          *((_DWORD *)v4 + 3) = v22;
          *((_DWORD *)v4 + 4) = v21;
          v27 = &v26;
          result = sub_223F7C7EC(v6, (int *)&v26, (uint64_t)&unk_2245BA939, (_QWORD **)&v27);
          ++v2;
        }
        while (v2 != v3);
      }
    }
    else if (v5 == &v26)
    {
      do
      {
        v17 = vld1_dup_f32((const float *)v4);
        v18 = vcvt_s32_f32(vrndm_f32(vdiv_f32(*v2, v17)));
        v26 = v18;
        if (v4[6])
        {
          v14 = *((_DWORD *)v4 + 1);
          v15 = *((_DWORD *)v4 + 2);
          v16 = v18.i32[1];
        }
        else
        {
          v14 = v26.i32[0];
          v15 = v26.i32[1];
          v16 = v26.i32[1];
        }
        if (v18.i32[0] < v14)
          v14 = v18.i32[0];
        if (v16 < v15)
          v15 = v16;
        *((_DWORD *)v4 + 1) = v14;
        *((_DWORD *)v4 + 2) = v15;
        v26.i32[0] = v18.i32[0];
        v27 = &v26;
        result = sub_223F7C7EC(v6, (int *)&v26, (uint64_t)&unk_2245BA939, (_QWORD **)&v27);
        ++v2;
      }
      while (v2 != v3);
    }
    else
    {
      do
      {
        v12 = vld1_dup_f32((const float *)v4);
        v13 = vcvt_s32_f32(vrndm_f32(vdiv_f32(*v2, v12)));
        v26 = v13;
        if (v4[6])
        {
          v11 = *((_DWORD *)v4 + 1);
          v9 = *((_DWORD *)v4 + 2);
          v8 = *((_DWORD *)v4 + 3);
          v7 = *((_DWORD *)v4 + 4);
          v10 = v13.i32[1];
        }
        else
        {
          v8 = v26.i32[0];
          v7 = v26.i32[1];
          v9 = v26.i32[1];
          v10 = v26.i32[1];
          v11 = v26.i32[0];
        }
        if (v13.i32[0] < v11)
          v11 = v13.i32[0];
        if (v10 < v9)
          v9 = v10;
        *((_DWORD *)v4 + 1) = v11;
        *((_DWORD *)v4 + 2) = v9;
        if (v8 <= v13.i32[0])
          v8 = v13.i32[0];
        if (v7 <= v10)
          v7 = v10;
        *((_DWORD *)v4 + 3) = v8;
        *((_DWORD *)v4 + 4) = v7;
        v27 = &v26;
        result = sub_223F7C7EC(v6, (int *)&v26, (uint64_t)&unk_2245BA939, (_QWORD **)&v27);
        ++v2;
      }
      while (v2 != v3);
    }
  }
  return result;
}

uint64_t sub_223F7CF14(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_2231B0668(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    sub_223F7D054(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_223F7D02C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22322E828(v1);
  _Unwind_Resume(a1);
}

void sub_223F7D040(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22322E828(v1);
  _Unwind_Resume(a1);
}

char *sub_223F7D054(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  char *v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v6 = *a2;
  v7 = a2[1];
  v8 = (v7 + ((unint64_t)(v6 + 2654435769) >> 2) + ((v6 + 2654435769) << 6) + 2654435769u) ^ (v6 + 2654435769);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = (v7 + ((unint64_t)(v6 + 2654435769) >> 2) + ((v6 + 2654435769) << 6) + 2654435769u) ^ (v6 + 2654435769);
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v12[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 4) == (_DWORD)v6 && *((_DWORD *)v12 + 5) == (_DWORD)v7)
                return (char *)v12;
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_31;
            }
            v12 = (uint64_t *)*v12;
            if (!v12)
              goto LABEL_31;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v6 && *((_DWORD *)v12 + 5) == (_DWORD)v7)
              return (char *)v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_31:
  v18 = (char *)operator new(0x28uLL);
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v8;
  *((_QWORD *)v18 + 2) = *(_QWORD *)a3;
  *(_OWORD *)(v18 + 24) = *(_OWORD *)(a3 + 8);
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v9 && (float)(v20 * (float)v9) >= v19)
  {
    v21 = *(_QWORD *)a1;
    v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v22)
    {
LABEL_34:
      *(_QWORD *)v18 = *v22;
LABEL_69:
      *v22 = v18;
      goto LABEL_70;
    }
  }
  else
  {
    v23 = 1;
    if (v9 >= 3)
      v23 = (v9 & (v9 - 1)) != 0;
    v24 = v23 | (2 * v9);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_45;
    if (prime < v9)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (prime <= v27)
        prime = v27;
      if (prime < v9)
LABEL_45:
        sub_2231B0668(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v30 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v3 = v8 % v9;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v22)
          goto LABEL_34;
      }
      else
      {
        v3 = v8;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v22)
          goto LABEL_34;
      }
    }
    else
    {
      v3 = v30 & v8;
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 & v8));
      if (v22)
        goto LABEL_34;
    }
  }
  *(_QWORD *)v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v18)
  {
    v31 = *(_QWORD *)(*(_QWORD *)v18 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v31 >= v9)
        v31 %= v9;
    }
    else
    {
      v31 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_69;
  }
LABEL_70:
  ++*(_QWORD *)(a1 + 24);
  return v18;
}

void sub_223F7D38C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223F7D3A0(uint64_t a1, int a2, unint64_t a3, float32x2_t *a4, _OWORD *a5, char a6, int a7, double a8)
{
  float32x2_t *v8;
  float *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  float v20;
  float v21;
  float *v22;
  float v23;
  unint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  char *v34;
  char *v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  BOOL v39;
  unsigned int v40;
  float32x2_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char **v72;
  uint64_t v73;
  char v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  void *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  float v104;
  char *v105;
  uint64_t v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  int v112;
  _OWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  _QWORD *v119;
  char *v120;
  uint64_t v121;
  __int16 v122;
  const void *v123;
  uint64_t v124;
  char *v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  _BYTE *v135;
  uint64_t v136;
  char *v137;
  size_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void **v157;
  void *v158;
  double v159;
  double v160;
  __n128 v161;
  char v162;
  void *v163;
  uint64_t v164;
  __int128 v165;
  BOOL v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  void *v179;
  char *v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  int64_t v186;
  char *v187;
  char *v188;
  float *v189;
  float v190;
  uint64_t v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  char *v200;
  char *v201;
  uint64_t v202;
  void *v203;
  char *v204;
  float v205;
  BOOL v206;
  float v207;
  float v208;
  unint64_t v209;
  char *v210;
  void *v211;
  void *v212;
  char *v213;
  char *v214;
  char *v215;
  unint64_t v216;
  unint64_t v217;
  _BYTE *v218;
  unint64_t v219;
  char *v220;
  BOOL v221;
  int64_t v222;
  unint64_t v223;
  char *v224;
  void *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  int64_t v237;
  unint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  char *v243;
  unint64_t v244;
  char *v245;
  unint64_t v246;
  int64_t v247;
  unint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  __int128 *v254;
  char *v255;
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  unint64_t v259;
  _BYTE *v260;
  unint64_t v261;
  char *v262;
  unint64_t v263;
  uint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  __int128 *v272;
  _OWORD *v273;
  uint64_t v274;
  __int128 v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  unint64_t v281;
  char *v282;
  unint64_t v283;
  char *v284;
  char *v285;
  unint64_t v286;
  char *v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  __int128 *v292;
  char *v293;
  uint64_t v294;
  __int128 v295;
  uint64_t v296;
  char *v297;
  char *v298;
  uint64_t v299;
  void *v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  char *v305;
  unint64_t v306;
  _BYTE *v307;
  unint64_t v308;
  char *v309;
  int64_t v310;
  unint64_t v311;
  char *v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  __int128 *v318;
  _OWORD *v319;
  uint64_t v320;
  __int128 v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  __int128 *v325;
  _OWORD *v326;
  uint64_t v327;
  __int128 v328;
  _QWORD *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  uint64_t v336;
  char *v337;
  char *v338;
  uint64_t v339;
  unint64_t v340;
  void *v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t **v344;
  uint64_t **v345;
  void **v346;
  unint64_t v347;
  void *v348;
  void *v349;
  _QWORD *v350;
  _QWORD *v351;
  void *v352;
  uint64_t *v353;
  uint64_t *v354;
  uint64_t v355;
  char *v356;
  float v357;
  char *v358;
  uint64_t v359;
  float v360;
  float v361;
  float v362;
  float v363;
  int v364;
  _OWORD *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  char *v375;
  uint64_t v376;
  float *v377;
  uint64_t v378;
  __int128 v379;
  unint64_t v380;
  char *__srca;
  char *v383;
  char *v384;
  char *v385;
  uint64_t *v386;
  uint64_t *v387;
  void *v388;
  _QWORD *v389;
  _QWORD *v390;
  void *__p;
  __int128 v392;
  _BYTE v393[24];
  __int128 v394;
  __int128 v395;
  __int128 v396;
  void *v397[2];
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  unsigned __int8 v402;
  _QWORD v403[3];
  __int128 v404;
  char *v405;
  char *v406;
  __int128 v407;
  __int128 v408;
  void *v409;
  char *v410;
  __int128 v411;
  uint64_t v412;

  v8 = a4;
  v412 = *MEMORY[0x24BDAC8D0];
  v10 = (float *)(a1 + 16);
  if (a3 == 3)
  {
    *(float *)&a8 = *v10;
    if (sub_223F35794(3uLL, a4, *(int32x2_t *)&a8))
    {
      sub_223F85D34((uint64_t *)&v408, (uint64_t)v10, v8, *(int32x2_t *)&v11);
      v388 = 0;
      v389 = 0;
      v390 = 0;
      *(_QWORD *)&v396 = &v388;
      BYTE8(v396) = 0;
      v16 = operator new(0x10uLL);
      v388 = v16;
      v389 = v16;
      v17 = v16 + 2;
      v390 = v16 + 2;
      v18 = *((_QWORD *)&v408 + 1);
      *v16 = v408;
      v16[1] = v18;
      if (v18)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        v389 = v17;
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
      }
      else
      {
        v389 = v16 + 2;
      }
      goto LABEL_138;
    }
    LODWORD(v13) = v8->i32[0];
    v37 = v8->f32[1];
    LODWORD(v14) = v8[1].i32[0];
    LODWORD(v12) = v8[1].i32[1];
    *(float *)&v15 = vabds_f32((float)(v8->f32[0] - v8[2].f32[0]) * (float)(*(float *)&v12 - v37), (float)(v8->f32[0] - *(float *)&v14) * (float)(v8[2].f32[1] - v37))* 0.5;
    if (*(float *)&v15 == 0.0)
      goto LABEL_20;
    if (*(float *)&v15 < 0.0)
      *(float *)&v15 = 0.0 - *(float *)&v15;
    if (*(float *)&v15 <= 0.000001)
    {
LABEL_20:
      *(float *)&v15 = *v10;
      v40 = vcvtms_s32_f32(*(float *)&v13 / *v10);
      *(float *)&v13 = *(float *)&v14 / *v10;
      if (v40 == vcvtms_s32_f32(*(float *)&v13)
        && vcvtms_s32_f32(v37 / *(float *)&v15) == vcvtms_s32_f32(*(float *)&v12 / *(float *)&v15))
      {
        v41 = v8[2];
        *(float32x2_t *)&v396 = *v8;
        *((float32x2_t *)&v396 + 1) = v41;
        *(float *)&v11 = *(float *)&v12 / *(float *)&v15;
        sub_223F8AD58((uint64_t)&v388, (uint64_t)v10, (float32x2_t *)&v396, v11, v12, v13, v14, v15);
      }
      else
      {
        v396 = *(_OWORD *)v8->f32;
        sub_223F8AD58((uint64_t)&v388, (uint64_t)v10, (float32x2_t *)&v396, *(double *)&v396, v12, v13, v14, v15);
      }
    }
    else
    {
      v38 = *(_QWORD *)(a1 + 32);
      if (v38)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v38 + 24))(*(_QWORD *)(a1 + 32));
        v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38) == 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
      }
      else
      {
        v39 = 1;
      }
      v396 = *(_OWORD *)v8->f32;
      v397[0] = (void *)v8[2];
      sub_223F86A28((uint64_t)v10, 3, (uint64_t *)&v396, *(double *)&v396, v12, v13, v14, v15);
      v389 = 0;
      v390 = 0;
      v388 = 0;
      __p = 0;
      v392 = 0uLL;
      v45 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)&v404 = *(_QWORD *)(a1 + 24);
      *((_QWORD *)&v404 + 1) = v45;
      if (v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45);
      LOWORD(v405) = !v39;
      v396 = 0u;
      *(_OWORD *)v397 = 0u;
      v398 = 0u;
      sub_223F88FBC((uint64_t)&v396, (uint64_t)&v404);
      v408 = v396;
      v409 = v397[0];
      v410 = (char *)v397[1];
      v396 = 0u;
      *(_OWORD *)v397 = 0u;
      v411 = v398;
      v398 = 0uLL;
      sub_223F89748((uint64_t)&v396);
      if (v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
      if (*((_QWORD *)&v411 + 1))
      {
        v376 = (uint64_t)v10;
        do
        {
          v46 = v411;
          v47 = *(_QWORD *)(*((_QWORD *)&v408 + 1) + 8 * ((unint64_t)v411 / 0xAA));
          v48 = (unint64_t)v411 % 0xAA;
          v49 = (uint64_t *)(v47 + 24 * ((unint64_t)v411 % 0xAA));
          v51 = *v49;
          v50 = v49[1];
          if (v50)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 24))(v49[1]);
            v46 = v411;
            v52 = (unint64_t)v411 % 0xAA;
            v53 = *(_QWORD *)(*((_QWORD *)&v408 + 1) + 8 * ((unint64_t)v411 / 0xAA));
          }
          else
          {
            v53 = *(_QWORD *)(*((_QWORD *)&v408 + 1) + 8 * ((unint64_t)v411 / 0xAA));
            v52 = (unint64_t)v411 % 0xAA;
          }
          v54 = *(unsigned __int8 *)(v47 + 24 * v48 + 16);
          v55 = *(_QWORD *)(v53 + 24 * v52 + 8);
          if (v55)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v55 + 40))(v55);
            v46 = v411;
          }
          *(_QWORD *)&v411 = v46 + 1;
          --*((_QWORD *)&v411 + 1);
          if ((unint64_t)(v46 + 1) >= 0x154)
          {
            operator delete(**((void ***)&v408 + 1));
            *((_QWORD *)&v408 + 1) += 8;
            *(_QWORD *)&v411 = v411 - 170;
          }
          v56 = (_QWORD *)(**(_QWORD **)(v51 + 8) + 232 * *(_QWORD *)v51);
          v57 = v56[3];
          if (v57 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 48))(v57)
            || (v58 = v56[5]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 48))(v58)
            || (v59 = v56[7]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 48))(v59)
            || (v60 = v56[9]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 48))(v60)
            || !v54
            && (v61 = **(_QWORD **)(v51 + 8) + 232 * *(_QWORD *)v51,
                (float)(*(float *)(v61 + 88) - *(float *)(v61 + 80)) >= (float)(*v10 * 1.25)))
          {
            v64 = **(_QWORD **)(v51 + 8) + 232 * *(_QWORD *)v51;
            v66 = *(_QWORD *)(v64 + 16);
            v65 = v64 + 16;
            *(_QWORD *)&v396 = v66;
            v67 = *(_QWORD *)(v65 + 8);
            *((_QWORD *)&v396 + 1) = v67;
            if (v67)
              (*(void (**)(uint64_t))(*(_QWORD *)v67 + 24))(v67);
            v397[0] = *(void **)(v65 + 16);
            v68 = *(void **)(v65 + 24);
            v397[1] = v68;
            if (v68)
              (*(void (**)(void *))(*(_QWORD *)v68 + 24))(v68);
            *(_QWORD *)&v398 = *(_QWORD *)(v65 + 32);
            v69 = *(_QWORD *)(v65 + 40);
            *((_QWORD *)&v398 + 1) = v69;
            if (v69)
              (*(void (**)(uint64_t))(*(_QWORD *)v69 + 24))(v69);
            *(_QWORD *)&v399 = *(_QWORD *)(v65 + 48);
            v70 = *(_QWORD *)(v65 + 56);
            *((_QWORD *)&v399 + 1) = v70;
            if (v70)
              (*(void (**)(uint64_t))(*(_QWORD *)v70 + 24))(v70);
            v71 = 0;
            v72 = (char **)&v396 + 1;
            do
            {
              if (*v72 && (*(uint64_t (**)(char *))(*(_QWORD *)*v72 + 48))(*v72))
              {
                v404 = *(_OWORD *)(**((_QWORD **)*(v72 - 1) + 1) + 232 * *(_QWORD *)*(v72 - 1) + 80);
                v74 = 1;
              }
              else
              {
                sub_223F35620((float32x2_t *)(**(_QWORD **)(v51 + 8) + 232 * *(_QWORD *)v51 + 80), v71, (float32x2_t *)&v404);
                v74 = 0;
              }
              if (sub_223F8BA1C(v8, (float32x2_t *)&v404))
              {
                if ((v74 & 1) == 0)
                {
                  *(_QWORD *)&v395 = v51;
                  *((_QWORD *)&v395 + 1) = v50;
                  if (v50)
                    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
                  sub_223F87878((uint64_t)&v383, v376, (uint64_t **)&v395, &v404, v71);
                  v76 = v383;
                  v75 = v384;
                  if (v384)
                    (*(void (**)(char *))(*(_QWORD *)v384 + 24))(v384);
                  v77 = *v72;
                  *(v72 - 1) = v76;
                  *v72 = v75;
                  if (v77)
                    (*(void (**)(char *))(*(_QWORD *)v77 + 40))(v77);
                  if (v75)
                    (*(void (**)(char *))(*(_QWORD *)v75 + 40))(v75);
                  if (v50)
                    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 40))(v50);
                }
                v79 = (uint64_t)*(v72 - 1);
                v78 = *v72;
                if (*v72)
                  (*(void (**)(char *))(*(_QWORD *)v78 + 24))(*v72);
                v80 = *((_QWORD *)&v408 + 1);
                if (v409 == *((void **)&v408 + 1))
                  v81 = 0;
                else
                  v81 = 170 * (((uint64_t)v409 - *((_QWORD *)&v408 + 1)) >> 3) - 1;
                v82 = *((_QWORD *)&v411 + 1) + v411;
                if (v81 == *((_QWORD *)&v411 + 1) + (_QWORD)v411)
                {
                  sub_223F89B7C((uint64_t)&v408);
                  v80 = *((_QWORD *)&v408 + 1);
                  v82 = *((_QWORD *)&v411 + 1) + v411;
                }
                v83 = *(_QWORD *)(v80 + 8 * (v82 / 0xAA));
                v84 = v82 % 0xAA;
                v85 = (_QWORD *)(v83 + 24 * (v82 % 0xAA));
                *v85 = v79;
                v85[1] = v78;
                if (v78)
                {
                  (*(void (**)(char *))(*(_QWORD *)v78 + 24))(v78);
                  v8 = a4;
                  v86 = v83 + 24 * v84;
                  *(_BYTE *)(v86 + 16) = v74;
                  *(_BYTE *)(v86 + 17) = 0;
                  ++*((_QWORD *)&v411 + 1);
                  (*(void (**)(char *))(*(_QWORD *)v78 + 40))(v78);
                }
                else
                {
                  v73 = v83 + 24 * v84;
                  *(_BYTE *)(v73 + 16) = v74;
                  *(_BYTE *)(v73 + 17) = 0;
                  ++*((_QWORD *)&v411 + 1);
                  v8 = a4;
                }
              }
              ++v71;
              v72 += 2;
            }
            while (v71 != 4);
            v87 = (_QWORD *)(**(_QWORD **)(v51 + 8) + 232 * *(_QWORD *)v51);
            v88 = v87[3];
            v10 = (float *)v376;
            if (!v88 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v88 + 48))(v88))
            {
              v89 = v87[5];
              if (!v89 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 48))(v89))
              {
                v90 = v87[7];
                if (!v90 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 48))(v90))
                {
                  v91 = v87[9];
                  if (!v91 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 48))(v91))
                  {
                    v92 = v392;
                    if ((unint64_t)v392 >= *((_QWORD *)&v392 + 1))
                    {
                      v93 = sub_223F898DC((char **)&__p, v51, v50);
                    }
                    else
                    {
                      *(_QWORD *)v392 = v51;
                      *(_QWORD *)(v92 + 8) = v50;
                      if (v50)
                        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
                      v93 = (char *)(v92 + 16);
                    }
                    *(_QWORD *)&v392 = v93;
                  }
                }
              }
            }
            if (*((_QWORD *)&v399 + 1))
              (*(void (**)(_QWORD))(**((_QWORD **)&v399 + 1) + 40))(*((_QWORD *)&v399 + 1));
            if (*((_QWORD *)&v398 + 1))
              (*(void (**)(_QWORD))(**((_QWORD **)&v398 + 1) + 40))(*((_QWORD *)&v398 + 1));
            if (v397[1])
              (*(void (**)(void *))(*(_QWORD *)v397[1] + 40))(v397[1]);
            if (*((_QWORD *)&v396 + 1))
              (*(void (**)(_QWORD))(**((_QWORD **)&v396 + 1) + 40))(*((_QWORD *)&v396 + 1));
            if (!v50)
              continue;
          }
          else
          {
            v62 = v389;
            if (v389 >= v390)
            {
              v63 = sub_223F898DC((char **)&v388, v51, v50);
            }
            else
            {
              *v389 = v51;
              v62[1] = v50;
              if (v50)
                (*(void (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
              v63 = (char *)(v62 + 2);
            }
            v389 = v63;
            if (!v50)
              continue;
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v50 + 40))(v50);
        }
        while (*((_QWORD *)&v411 + 1));
      }
      v94 = (unint64_t *)__p;
      v95 = (unint64_t *)v392;
      while (v94 != v95)
      {
        v97 = *v94;
        v96 = v94[1];
        if (v96)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v96 + 24))(v94[1]);
          *(_QWORD *)&v396 = v97;
          *((_QWORD *)&v396 + 1) = v96;
          (*(void (**)(unint64_t))(*(_QWORD *)v96 + 24))(v96);
        }
        else
        {
          v396 = v97;
        }
        sub_223F858E4((uint64_t)v10, (uint64_t **)&v396);
        if (v96)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v96 + 40))(v96);
          (*(void (**)(unint64_t))(*(_QWORD *)v96 + 40))(v96);
        }
        v94 += 2;
      }
      sub_223F89748((uint64_t)&v408);
      v98 = (char *)__p;
      if (__p)
      {
        v99 = (char *)v392;
        v100 = __p;
        if ((void *)v392 != __p)
        {
          do
          {
            v101 = *((_QWORD *)v99 - 1);
            if (v101)
              (*(void (**)(uint64_t))(*(_QWORD *)v101 + 40))(v101);
            v99 -= 16;
          }
          while (v99 != v98);
          v100 = __p;
        }
        *(_QWORD *)&v392 = v98;
        operator delete(v100);
      }
    }
LABEL_138:
    v103 = (char *)v388;
    v102 = (char *)v389;
    if (v388 == v389)
    {
      if (!v388)
        goto LABEL_501;
    }
    else
    {
      v104 = *v10 * *v10;
      v105 = (char *)v388;
      do
      {
        v106 = **(_QWORD **)(*(_QWORD *)v105 + 8) + 232 * **(_QWORD **)v105;
        if (sub_223F8BA1C(v8, (float32x2_t *)(v106 + 80)))
          v107 = 1.0;
        else
          v107 = 0.0;
        v108 = v107
             * (float)((float)((float)(*(float *)(v106 + 88) - *(float *)(v106 + 80))
                             * (float)(*(float *)(v106 + 92) - *(float *)(v106 + 84)))
                     / v104);
        if (v108 >= 0.1)
        {
          v109 = v108 * (float)a7;
          v110 = fmaxf(fabsf(v109), 1.0);
          v111 = v109 >= 0.0 ? v110 : -v110;
          v112 = llroundf(v111);
          if (v112)
          {
            v113 = (_OWORD *)(v106 + 96);
            v114 = (v106 + 96) & 0xF8;
            if (!*(_BYTE *)(v106 + 216))
              v114 = 0;
            sub_223F83B84((uint64_t)&v396, a2, v114 | (v106 + 96) & 0xFFFFFFFFFFFFFF00, *(_BYTE *)(v106 + 216), v112, a5, a6);
            if (*(_BYTE *)(v106 + 216))
            {
              if (*(unsigned __int8 *)(v106 + 192) == v402)
              {
                if (*(_BYTE *)(v106 + 192))
                {
                  *(_OWORD *)(v106 + 128) = v398;
                  *(_OWORD *)(v106 + 144) = v399;
                  *(_OWORD *)(v106 + 160) = v400;
                  *(_OWORD *)(v106 + 176) = v401;
                  *v113 = v396;
                  *(_OWORD *)(v106 + 112) = *(_OWORD *)v397;
                }
              }
              else if (*(_BYTE *)(v106 + 192))
              {
                *(_BYTE *)(v106 + 192) = 0;
              }
              else
              {
                *(_OWORD *)(v106 + 128) = v398;
                *(_OWORD *)(v106 + 144) = v399;
                *(_OWORD *)(v106 + 160) = v400;
                *(_OWORD *)(v106 + 176) = v401;
                *v113 = v396;
                *(_OWORD *)(v106 + 112) = *(_OWORD *)v397;
                *(_BYTE *)(v106 + 192) = 1;
              }
              *(_QWORD *)(v106 + 200) = v403[0];
              *(_QWORD *)(v106 + 205) = *(_QWORD *)((char *)v403 + 5);
            }
            else
            {
              *(_BYTE *)(v106 + 96) = 0;
              *(_BYTE *)(v106 + 192) = 0;
              if (v402)
              {
                *(_OWORD *)(v106 + 128) = v398;
                *(_OWORD *)(v106 + 144) = v399;
                *(_OWORD *)(v106 + 160) = v400;
                *(_OWORD *)(v106 + 176) = v401;
                *v113 = v396;
                *(_OWORD *)(v106 + 112) = *(_OWORD *)v397;
                *(_BYTE *)(v106 + 192) = 1;
              }
              *(_QWORD *)(v106 + 200) = v403[0];
              *(_QWORD *)(v106 + 205) = *(_QWORD *)((char *)v403 + 5);
              *(_BYTE *)(v106 + 216) = 1;
            }
            *(_BYTE *)(v106 + 212) = 0;
            v8 = a4;
          }
        }
        if (!*(_BYTE *)(v106 + 216))
        {
          *(_QWORD *)&v408 = *(_QWORD *)v105;
          v115 = *((_QWORD *)v105 + 1);
          *((_QWORD *)&v408 + 1) = v115;
          if (v115)
            (*(void (**)(uint64_t))(*(_QWORD *)v115 + 24))(v115);
          sub_223F858E4((uint64_t)v10, (uint64_t **)&v408);
          if (v115)
            (*(void (**)(uint64_t))(*(_QWORD *)v115 + 40))(v115);
        }
        v105 += 16;
      }
      while (v105 != v102);
      if (!v103)
        goto LABEL_501;
      do
      {
        v116 = *((_QWORD *)v102 - 1);
        if (v116)
          (*(void (**)(uint64_t))(*(_QWORD *)v116 + 40))(v116);
        v102 -= 16;
      }
      while (v102 != v103);
    }
    goto LABEL_500;
  }
  if (a3)
  {
    *(float *)&a8 = *v10;
    v20 = (float)(*(float *)&a8 * *(float *)&a8) * 0.1;
    v21 = 0.0;
    if (a3 >= 3)
    {
      v22 = (float *)&a4[1] + 1;
      v23 = 0.0;
      v24 = a3 - 1;
      v25 = a4->f32[1];
      v26 = a4->f32[0];
      do
      {
        v27 = *v22;
        v28 = v23 - (float)(v26 * *v22);
        v26 = *(v22 - 1);
        v23 = v28 + (float)(v25 * v26);
        v22 += 2;
        v25 = v27;
        --v24;
      }
      while (v24);
      v21 = (float)((float)(v23 - (float)(a4->f32[1] * a4[a3 - 1].f32[0])) + (float)(a4->f32[0] * a4[a3 - 1].f32[1]))
          * 0.5;
    }
    if (fabsf(v21) >= v20)
    {
      if (sub_223F35794(a3, a4, *(int32x2_t *)&a8))
      {
        sub_223F85D34((uint64_t *)&v408, (uint64_t)v10, v8, *(int32x2_t *)&v29);
        v383 = 0;
        v384 = 0;
        v385 = 0;
        *(_QWORD *)&v396 = &v383;
        BYTE8(v396) = 0;
        v34 = (char *)operator new(0x10uLL);
        v383 = v34;
        v384 = v34;
        v35 = v34 + 16;
        v385 = v34 + 16;
        v36 = *((_QWORD *)&v408 + 1);
        *(_QWORD *)v34 = v408;
        *((_QWORD *)v34 + 1) = v36;
        if (v36)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
          v384 = v35;
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
        }
        else
        {
          v384 = v34 + 16;
        }
        goto LABEL_467;
      }
      if (a3 == 2)
      {
        v396 = *(_OWORD *)v8->f32;
        sub_223F8AD58((uint64_t)&v383, (uint64_t)v10, (float32x2_t *)&v396, *(double *)&v396, v30, v31, v32, v33);
        goto LABEL_467;
      }
      v42 = *(_QWORD *)(a1 + 32);
      v43 = a1;
      if (v42)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v42 + 24))(*(_QWORD *)(a1 + 32));
        v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 48))(v42) == 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
      }
      else
      {
        v44 = 1;
      }
      sub_223F86A28((uint64_t)v10, a3, (uint64_t *)v8, v29, v30, v31, v32, v33);
      v383 = 0;
      v384 = 0;
      v385 = 0;
      v388 = 0;
      v389 = 0;
      v390 = 0;
      v117 = *(_QWORD *)(v43 + 32);
      *(_QWORD *)&v396 = *(_QWORD *)(v43 + 24);
      *((_QWORD *)&v396 + 1) = v117;
      if (v117)
        (*(void (**)(uint64_t))(*(_QWORD *)v117 + 24))(v117);
      LOWORD(v397[0]) = !v44;
      v398 = 0uLL;
      v397[1] = 0;
      if (((8 * a3) & 0x8000000000000000) != 0)
        sub_22316E078();
      v397[1] = operator new(8 * a3);
      *((_QWORD *)&v398 + 1) = (char *)v397[1] + 8 * ((uint64_t)(8 * a3) >> 3);
      memcpy(v397[1], v8, 8 * a3);
      *(_QWORD *)&v398 = (char *)v397[1] + 8 * a3;
      v118 = (char *)operator new(8uLL);
      v377 = v10;
      v119 = operator new(0xFF0uLL);
      __srca = v118;
      *(_QWORD *)v118 = v119;
      v120 = v118 + 8;
      v121 = *((_QWORD *)&v396 + 1);
      *v119 = v396;
      v119[1] = v121;
      if (v121)
        (*(void (**)(uint64_t))(*(_QWORD *)v121 + 24))(v121);
      v122 = (__int16)v397[0];
      v119[3] = 0;
      *((_WORD *)v119 + 8) = v122;
      v119[4] = 0;
      v119[5] = 0;
      v123 = v397[1];
      v124 = v398 - (unint64_t)v397[1];
      if ((void *)v398 != v397[1])
      {
        if (v124 < 0)
          sub_22316E078();
        v125 = (char *)operator new(v398 - (unint64_t)v397[1]);
        v119[3] = v125;
        v119[4] = v125;
        v119[5] = &v125[8 * (v124 >> 3)];
        memcpy(v125, v123, v124 & 0xFFFFFFFFFFFFFFF8);
        v119[4] = &v125[v124 & 0xFFFFFFFFFFFFFFF8];
      }
      *(_QWORD *)&v404 = __srca;
      *((_QWORD *)&v404 + 1) = __srca;
      v405 = v120;
      v406 = v120;
      v407 = xmmword_2245F5410;
      if (v397[1])
      {
        *(void **)&v398 = v397[1];
        operator delete(v397[1]);
      }
      v375 = v120;
      if (*((_QWORD *)&v396 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v396 + 1) + 40))(*((_QWORD *)&v396 + 1));
      v126 = 0;
      v127 = 1;
      v128 = v375;
LABEL_190:
      v129 = *(_QWORD *)&__srca[8 * (v126 / 0x55)];
      v130 = (uint64_t *)(v129 + 48 * (v126 % 0x55));
      v131 = *v130;
      *(_QWORD *)&v408 = *v130;
      v132 = v130[1];
      *((_QWORD *)&v408 + 1) = v132;
      if (v132)
        (*(void (**)(uint64_t))(*(_QWORD *)v132 + 24))(v132);
      v133 = v129 + 48 * (v126 % 0x55);
      LOWORD(v409) = *(_WORD *)(v133 + 16);
      v411 = 0uLL;
      v410 = 0;
      v135 = *(_BYTE **)(v133 + 24);
      v134 = *(_BYTE **)(v133 + 32);
      v136 = v134 - v135;
      if (v134 != v135)
      {
        if (v136 < 0)
          sub_22316E078();
        v137 = (char *)operator new(v134 - v135);
        v410 = v137;
        *((_QWORD *)&v411 + 1) = &v137[8 * (v136 >> 3)];
        v138 = v136 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v137, v135, v138);
        *(_QWORD *)&v411 = &v137[v138];
      }
      v139 = (_QWORD *)(**(_QWORD **)(v131 + 8) + 232 * *(_QWORD *)v131);
      v140 = v139[3];
      if (!v140 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v140 + 48))(v140))
      {
        v141 = v139[5];
        if (!v141 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v141 + 48))(v141))
        {
          v142 = v139[7];
          if (!v142 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v142 + 48))(v142))
          {
            v143 = v139[9];
            if (!v143 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v143 + 48))(v143))
            {
              v144 = v408;
              if ((_BYTE)v409
                || (v145 = **(_QWORD **)(v408 + 8) + 232 * *(_QWORD *)v408,
                    (float)(*(float *)(v145 + 88) - *(float *)(v145 + 80)) < (float)(*v377 * 1.25)))
              {
                v146 = v384;
                if (v384 >= v385)
                {
                  v148 = sub_223F898DC(&v383, v408, *((uint64_t *)&v408 + 1));
                }
                else
                {
                  *(_QWORD *)v384 = v408;
                  v147 = *((_QWORD *)&v408 + 1);
                  *((_QWORD *)v146 + 1) = *((_QWORD *)&v408 + 1);
                  if (v147)
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v147 + 24))(v147, v144);
                  v148 = v146 + 16;
                }
                v384 = v148;
                v338 = v410;
                if (v410)
                  goto LABEL_433;
                goto LABEL_434;
              }
            }
          }
        }
      }
      v149 = **(_QWORD **)(v408 + 8) + 232 * *(_QWORD *)v408;
      v151 = *(_QWORD *)(v149 + 16);
      v150 = v149 + 16;
      *(_QWORD *)&v396 = v151;
      v152 = *(_QWORD *)(v150 + 8);
      *((_QWORD *)&v396 + 1) = v152;
      if (v152)
        (*(void (**)(uint64_t))(*(_QWORD *)v152 + 24))(v152);
      v397[0] = *(void **)(v150 + 16);
      v153 = *(void **)(v150 + 24);
      v397[1] = v153;
      if (v153)
        (*(void (**)(void *))(*(_QWORD *)v153 + 24))(v153);
      *(_QWORD *)&v398 = *(_QWORD *)(v150 + 32);
      v154 = *(_QWORD *)(v150 + 40);
      *((_QWORD *)&v398 + 1) = v154;
      if (v154)
        (*(void (**)(uint64_t))(*(_QWORD *)v154 + 24))(v154);
      *(_QWORD *)&v399 = *(_QWORD *)(v150 + 48);
      v155 = *(_QWORD *)(v150 + 56);
      *((_QWORD *)&v399 + 1) = v155;
      if (v155)
        (*(void (**)(uint64_t))(*(_QWORD *)v155 + 24))(v155);
      v156 = 0;
      v157 = (void **)&v396;
      while (1)
      {
        v158 = v157[1];
        if (v158 && (*(uint64_t (**)(void *))(*(_QWORD *)v158 + 48))(v158))
        {
          v395 = *(_OWORD *)(**((_QWORD **)*v157 + 1) + 232 * *(_QWORD *)*v157 + 80);
          v162 = 1;
          if (BYTE1(v409))
            goto LABEL_227;
        }
        else
        {
          sub_223F35620((float32x2_t *)(**(_QWORD **)(v408 + 8) + 232 * *(_QWORD *)v408 + 80), v156, (float32x2_t *)&v395);
          v162 = 0;
          if (BYTE1(v409))
          {
LABEL_227:
            v380 = v126;
            v164 = v127;
            v163 = 0;
            v165 = 0uLL;
            goto LABEL_228;
          }
        }
        sub_223F274F4((uint64_t)(v411 - (_QWORD)v410) >> 3, v410, (float32x2_t *)&v395, (uint64_t *)&__p, v159, v160, v161);
        v163 = __p;
        if ((_QWORD)v392 - (_QWORD)__p >= 0x18uLL)
        {
          v165 = v392;
          v189 = (float *)((char *)__p + 12);
          v190 = 0.0;
          v191 = ((uint64_t)(v392 - (_QWORD)__p) >> 3) - 1;
          v192 = *((float *)__p + 1);
          v193 = *(float *)__p;
          do
          {
            v194 = *v189;
            v195 = v190 - (float)(v193 * *v189);
            v193 = *(v189 - 1);
            v190 = v195 + (float)(v192 * v193);
            v189 += 2;
            v192 = v194;
            --v191;
          }
          while (v191);
          v196 = (float)((float)(v190
                               - (float)(*((float *)__p + 1)
                                       * *((float *)__p + 2 * ((uint64_t)(v392 - (_QWORD)__p) >> 3) - 2)))
                       + (float)(*(float *)__p * *((float *)__p + 2 * ((uint64_t)(v392 - (_QWORD)__p) >> 3) - 1)))
               * 0.5;
          v197 = fabsf(v196);
          if (v196 != 0.0 && v197 > 0.000001 && v197 >= v20)
          {
            v380 = v126;
            v164 = v127;
            v205 = (float)(*((float *)&v395 + 2) - *(float *)&v395)
                 * (float)(*((float *)&v395 + 3) - *((float *)&v395 + 1));
            v206 = v205 < v197;
            if (v205 != v197)
            {
              v207 = v205 - v197;
              v208 = v197 - v205;
              if (!v206)
                v208 = v207;
              v166 = v208 <= 0.000001;
LABEL_229:
              v379 = v165;
              if (BYTE1(v409) == (v163 != (void *)v165)
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/include_private/ACV/SurfaceDetection/Geometry/QuadTree.h", 815, (uint64_t)"!intersection.empty() ^ fullyContained", 38, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              if ((v162 & 1) == 0)
              {
                v167 = *((_QWORD *)&v408 + 1);
                v394 = v408;
                if (*((_QWORD *)&v408 + 1))
                  (*(void (**)(_QWORD))(**((_QWORD **)&v408 + 1) + 24))(*((_QWORD *)&v408 + 1));
                v168 = v156;
                sub_223F87878((uint64_t)&__p, (uint64_t)v377, (uint64_t **)&v394, &v395, v156);
                v170 = __p;
                v169 = (void *)v392;
                if ((_QWORD)v392)
                  (*(void (**)(_QWORD))(*(_QWORD *)v392 + 24))(v392);
                v171 = v157[1];
                *v157 = v170;
                v157[1] = v169;
                if (v171)
                  (*(void (**)(void *))(*(_QWORD *)v171 + 40))(v171);
                if (v169)
                  (*(void (**)(void *))(*(_QWORD *)v169 + 40))(v169);
                if (v167)
                  (*(void (**)(uint64_t))(*(_QWORD *)v167 + 40))(v167);
                v156 = v168;
              }
              v378 = v156;
              v173 = *v157;
              v172 = v157[1];
              __p = *v157;
              *(_QWORD *)&v392 = v172;
              if (v172)
                (*(void (**)(void *))(*(_QWORD *)v172 + 24))(v172);
              v174 = v128 - __srca;
              v175 = (v128 - __srca) >> 3;
              BYTE8(v392) = v162;
              BYTE9(v392) = v166;
              *(_QWORD *)v393 = v163;
              *(_OWORD *)&v393[8] = v379;
              if (v128 == __srca)
                v176 = 0;
              else
                v176 = 85 * v175 - 1;
              v177 = v164;
              v126 = v380;
              v178 = v380 + v177;
              if (v176 != v380 + v177)
              {
                v188 = __srca;
                goto LABEL_365;
              }
              if (v380 >= 0x55)
              {
                *(_QWORD *)&v407 = v380 - 85;
                v180 = __srca + 8;
                v179 = *(void **)__srca;
                *((_QWORD *)&v404 + 1) = __srca + 8;
                if (v128 != v406)
                  goto LABEL_362;
                v181 = (void *)v404;
                if ((unint64_t)v180 > (unint64_t)v404)
                {
                  v182 = (uint64_t)&v180[-v404] >> 3;
                  if (v182 >= -1)
                    v183 = v182 + 1;
                  else
                    v183 = v182 + 2;
                  v184 = v183 >> 1;
                  v185 = &v180[-8 * (v183 >> 1)];
                  v186 = v128 - v180;
                  if (v128 != v180)
                  {
                    memmove(&v180[-8 * (v183 >> 1)], __srca + 8, v128 - v180);
                    v128 = (char *)*((_QWORD *)&v404 + 1);
                  }
                  v187 = &v128[-8 * v184];
                  v128 = &v185[v186];
                  *((_QWORD *)&v404 + 1) = v187;
                  v405 = &v185[v186];
                  goto LABEL_362;
                }
                if (v128 == (char *)v404)
                  v217 = 1;
                else
                  v217 = (uint64_t)&v128[-v404] >> 2;
                if (v217 >> 61)
                  goto LABEL_508;
                v218 = operator new(8 * v217);
                v219 = v217 >> 2;
                v220 = &v218[8 * (v217 >> 2)];
                v222 = v128 - v180;
                v221 = v128 == v180;
                v128 = v220;
                if (!v221)
                {
                  v128 = &v220[v222 & 0xFFFFFFFFFFFFFFF8];
                  v223 = v222 - 8;
                  if (v223 < 0x38)
                  {
                    v224 = &v218[8 * (v217 >> 2)];
                    goto LABEL_359;
                  }
                  v268 = 8 * v219;
                  v269 = &v218[8 * v219] - v180;
                  v224 = &v218[8 * (v217 >> 2)];
                  if (v269 < 0x20)
                    goto LABEL_516;
                  v270 = (v223 >> 3) + 1;
                  v271 = 8 * (v270 & 0x3FFFFFFFFFFFFFFCLL);
                  v224 = &v220[v271];
                  v180 += v271;
                  v272 = (__int128 *)(__srca + 24);
                  v273 = &v218[v268 + 16];
                  v274 = v270 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v275 = *v272;
                    *(v273 - 1) = *(v272 - 1);
                    *v273 = v275;
                    v272 += 2;
                    v273 += 2;
                    v274 -= 4;
                  }
                  while (v274);
                  if (v270 != (v270 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_516:
                    do
                    {
LABEL_359:
                      v276 = *(_QWORD *)v180;
                      v180 += 8;
                      *(_QWORD *)v224 = v276;
                      v224 += 8;
                    }
                    while (v224 != v128);
                  }
                }
                *(_QWORD *)&v404 = v218;
                *((_QWORD *)&v404 + 1) = &v218[8 * (v217 >> 2)];
                v405 = v128;
                v406 = &v218[8 * v217];
                if (v181)
                  operator delete(v181);
LABEL_362:
                *(_QWORD *)v128 = v179;
LABEL_363:
                v128 = v405 + 8;
                v405 += 8;
LABEL_364:
                v188 = (char *)*((_QWORD *)&v404 + 1);
                v177 = *((_QWORD *)&v407 + 1);
                v126 = v407;
                v178 = *((_QWORD *)&v407 + 1) + v407;
                v173 = __p;
                v172 = (void *)v392;
                v375 = v128;
LABEL_365:
                __srca = v188;
                v277 = *(_QWORD *)&v188[8 * (v178 / 0x55)];
                v278 = v178 % 0x55;
                v279 = (_QWORD *)(v277 + 48 * (v178 % 0x55));
                *v279 = v173;
                v279[1] = v172;
                if (v172)
                  (*(void (**)(void *))(*(_QWORD *)v172 + 24))(v172);
                v280 = v277 + 48 * v278;
                *(_WORD *)(v280 + 16) = WORD4(v392);
                *(_QWORD *)(v280 + 32) = 0;
                *(_QWORD *)(v280 + 40) = 0;
                *(_OWORD *)(v280 + 24) = *(_OWORD *)v393;
                *(_QWORD *)(v280 + 40) = *(_QWORD *)&v393[16];
                memset(v393, 0, sizeof(v393));
                v127 = v177 + 1;
                *((_QWORD *)&v407 + 1) = v127;
                if (v172)
                  (*(void (**)(void *))(*(_QWORD *)v172 + 40))(v172);
                v156 = v378;
                goto LABEL_219;
              }
              v200 = v406;
              v201 = (char *)v404;
              v202 = (uint64_t)&v406[-v404];
              if (v175 < (unint64_t)((uint64_t)&v406[-v404] >> 3))
              {
                if (v406 != v128)
                {
                  v203 = operator new(0xFF0uLL);
                  v204 = v375;
                  if (v375 != v200)
                  {
LABEL_273:
                    *(_QWORD *)v204 = v203;
                    goto LABEL_363;
                  }
                  v232 = __srca;
                  if (__srca > v201)
                  {
                    v233 = (__srca - v201) >> 3;
                    if (v233 >= -1)
                      v234 = v233 + 1;
                    else
                      v234 = v233 + 2;
                    v235 = v234 >> 1;
                    v236 = &__srca[-8 * (v234 >> 1)];
                    v237 = v200 - __srca;
                    if (v375 != __srca)
                    {
                      memmove(&__srca[-8 * (v234 >> 1)], __srca, v200 - __srca);
                      v232 = (char *)*((_QWORD *)&v404 + 1);
                    }
                    *((_QWORD *)&v404 + 1) = &v232[-8 * v235];
                    v405 = &v236[v237];
                    *(_QWORD *)&v236[v237] = v203;
                    goto LABEL_363;
                  }
                  if (v375 == v201)
                    v259 = 1;
                  else
                    v259 = v202 >> 2;
                  if (v259 >> 61)
                    goto LABEL_511;
                  v260 = operator new(8 * v259);
                  v261 = v259 >> 2;
                  v262 = &v260[8 * (v259 >> 2)];
                  v204 = v262;
                  if (v375 != __srca)
                  {
                    v204 = &v262[(v200 - __srca) & 0xFFFFFFFFFFFFFFF8];
                    v263 = v200 - __srca - 8;
                    if (v263 < 0x38 || (v264 = 8 * v261, (unint64_t)(&v260[8 * v261] - __srca) < 0x20))
                    {
                      v265 = &v260[8 * (v259 >> 2)];
                      v266 = __srca;
                      goto LABEL_352;
                    }
                    v323 = (v263 >> 3) + 1;
                    v324 = 8 * (v323 & 0x3FFFFFFFFFFFFFFCLL);
                    v265 = &v262[v324];
                    v266 = &__srca[v324];
                    v325 = (__int128 *)(__srca + 16);
                    v326 = &v260[v264 + 16];
                    v327 = v323 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v328 = *v325;
                      *(v326 - 1) = *(v325 - 1);
                      *v326 = v328;
                      v325 += 2;
                      v326 += 2;
                      v327 -= 4;
                    }
                    while (v327);
                    if (v323 != (v323 & 0x3FFFFFFFFFFFFFFCLL))
                    {
                      do
                      {
LABEL_352:
                        v267 = *(_QWORD *)v266;
                        v266 += 8;
                        *(_QWORD *)v265 = v267;
                        v265 += 8;
                      }
                      while (v265 != v204);
                    }
                  }
                  *(_QWORD *)&v404 = v260;
                  *((_QWORD *)&v404 + 1) = &v260[8 * (v259 >> 2)];
                  v405 = v204;
                  v406 = &v260[8 * v259];
                  if (v201)
                    operator delete(v201);
                  goto LABEL_273;
                }
                v225 = operator new(0xFF0uLL);
                v226 = __srca;
                if (__srca == v201)
                {
                  if (v375 >= v128)
                  {
                    if (v128 == __srca)
                      v281 = 1;
                    else
                      v281 = v202 >> 2;
                    if (v281 >> 61)
LABEL_511:
                      sub_223174E94();
                    v282 = (char *)operator new(8 * v281);
                    v283 = (v281 + 3) >> 2;
                    v226 = &v282[8 * v283];
                    v284 = v226;
                    v285 = __srca;
                    if (v375 != __srca)
                    {
                      v284 = &v226[(v375 - v201) & 0xFFFFFFFFFFFFFFF8];
                      v286 = v375 - v201 - 8;
                      v287 = &v282[8 * v283];
                      v288 = __srca;
                      if (v286 < 0x38)
                        goto LABEL_517;
                      v289 = 8 * v283;
                      v287 = &v282[8 * v283];
                      v288 = __srca;
                      if ((unint64_t)(v287 - __srca) < 0x20)
                        goto LABEL_517;
                      v290 = (v286 >> 3) + 1;
                      v291 = 8 * (v290 & 0x3FFFFFFFFFFFFFFCLL);
                      v287 = &v226[v291];
                      v288 = &__srca[v291];
                      v292 = (__int128 *)(__srca + 16);
                      v293 = &v282[v289 + 16];
                      v294 = v290 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v295 = *v292;
                        *((_OWORD *)v293 - 1) = *(v292 - 1);
                        *(_OWORD *)v293 = v295;
                        v292 += 2;
                        v293 += 32;
                        v294 -= 4;
                      }
                      while (v294);
                      if (v290 != (v290 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_517:
                        do
                        {
                          v296 = *(_QWORD *)v288;
                          v288 += 8;
                          *(_QWORD *)v287 = v296;
                          v287 += 8;
                        }
                        while (v287 != v284);
                        v285 = __srca;
                      }
                    }
                    *(_QWORD *)&v404 = v282;
                    *((_QWORD *)&v404 + 1) = v226;
                    v405 = v284;
                    v406 = &v282[8 * v281];
                    if (v285)
                      operator delete(v285);
                  }
                  else
                  {
                    v227 = (v200 - v375) >> 3;
                    if (v227 >= -1)
                      v228 = v227 + 1;
                    else
                      v228 = v227 + 2;
                    v229 = v228 >> 1;
                    v230 = &v375[8 * (v228 >> 1)];
                    v226 = &v230[-(v375 - v201)];
                    v231 = __srca;
                    if (v375 != __srca)
                    {
                      memmove(&v230[-(v375 - v201)], __srca, v375 - v201);
                      v231 = v405;
                    }
                    *((_QWORD *)&v404 + 1) = v226;
                    v405 = &v231[8 * v229];
                  }
                }
                *((_QWORD *)v226 - 1) = v225;
                v297 = (char *)*((_QWORD *)&v404 + 1);
                v298 = v405;
                v299 = *(_QWORD *)(*((_QWORD *)&v404 + 1) - 8);
                if (v405 != v406)
                {
LABEL_384:
                  *(_QWORD *)v298 = v299;
                  goto LABEL_363;
                }
                v300 = (void *)v404;
                if (*((_QWORD *)&v404 + 1) > (unint64_t)v404)
                {
                  v301 = (uint64_t)(*((_QWORD *)&v404 + 1) - v404) >> 3;
                  if (v301 >= -1)
                    v302 = v301 + 1;
                  else
                    v302 = v301 + 2;
                  v303 = v302 >> 1;
                  v304 = *((_QWORD *)&v404 + 1) - 8 * v303;
                  v305 = &v405[-*((_QWORD *)&v404 + 1)];
                  if (v405 != *((char **)&v404 + 1))
                    memmove((void *)(*((_QWORD *)&v404 + 1) - 8 * v303), *((const void **)&v404 + 1), (size_t)&v405[-*((_QWORD *)&v404 + 1)]);
                  *((_QWORD *)&v404 + 1) = v304;
                  v405 = &v305[v304];
                  *(_QWORD *)&v305[v304] = v299;
                  goto LABEL_363;
                }
                if (v405 == (char *)v404)
                  v306 = 1;
                else
                  v306 = (uint64_t)&v405[-v404] >> 2;
                if (v306 >> 61)
                  goto LABEL_508;
                v307 = operator new(8 * v306);
                v308 = v306 >> 2;
                v309 = &v307[8 * (v306 >> 2)];
                v310 = v298 - v297;
                v221 = v298 == v297;
                v298 = v309;
                if (!v221)
                {
                  v298 = &v309[v310 & 0xFFFFFFFFFFFFFFF8];
                  v311 = v310 - 8;
                  if (v311 < 0x38)
                  {
                    v312 = &v307[8 * (v306 >> 2)];
                    goto LABEL_403;
                  }
                  v313 = 8 * v308;
                  v314 = &v307[8 * v308] - v297;
                  v312 = &v307[8 * (v306 >> 2)];
                  if (v314 < 0x20)
                    goto LABEL_518;
                  v315 = (v311 >> 3) + 1;
                  v316 = 8 * (v315 & 0x3FFFFFFFFFFFFFFCLL);
                  v312 = &v309[v316];
                  v317 = &v297[v316];
                  v318 = (__int128 *)(v297 + 16);
                  v319 = &v307[v313 + 16];
                  v320 = v315 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v321 = *v318;
                    *(v319 - 1) = *(v318 - 1);
                    *v319 = v321;
                    v318 += 2;
                    v319 += 2;
                    v320 -= 4;
                  }
                  while (v320);
                  v297 = v317;
                  if (v315 != (v315 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_518:
                    do
                    {
LABEL_403:
                      v322 = *(_QWORD *)v297;
                      v297 += 8;
                      *(_QWORD *)v312 = v322;
                      v312 += 8;
                    }
                    while (v312 != v298);
                  }
                }
                *(_QWORD *)&v404 = v307;
                *((_QWORD *)&v404 + 1) = &v307[8 * (v306 >> 2)];
                v405 = v298;
                v406 = &v307[8 * v306];
                if (v300)
                  operator delete(v300);
                goto LABEL_384;
              }
              if (v406 == (char *)v404)
                v209 = 1;
              else
                v209 = v202 >> 2;
              if (v209 >> 61)
LABEL_508:
                sub_223174E94();
              v210 = (char *)operator new(8 * v209);
              v211 = operator new(0xFF0uLL);
              v212 = v211;
              v213 = &v210[8 * v175];
              v214 = &v210[8 * v209];
              if (v175 == v209)
              {
                if (v174 < 1)
                {
                  if (v128 == __srca)
                    v238 = 1;
                  else
                    v238 = v174 >> 2;
                  if (v238 >> 61)
                    sub_223174E94();
                  v213 = (char *)operator new(8 * v238);
                  v214 = &v213[8 * v238];
                  operator delete(v210);
                  v210 = v213;
                  *(_QWORD *)v213 = v212;
                  v215 = v213 + 8;
                  if (v128 == __srca)
                    goto LABEL_317;
                }
                else
                {
                  v216 = v175 + 2;
                  if (v175 >= -1)
                    v216 = v175 + 1;
                  v213 -= 8 * (v216 >> 1);
                  *(_QWORD *)v213 = v211;
                  v215 = v213 + 8;
                  if (v128 == __srca)
                    goto LABEL_317;
                }
              }
              else
              {
                *(_QWORD *)v213 = v211;
                v215 = v213 + 8;
                if (v128 == __srca)
                {
LABEL_317:
                  *(_QWORD *)&v404 = v210;
                  *((_QWORD *)&v404 + 1) = v213;
                  v128 = v215;
                  v405 = v215;
                  v406 = v214;
                  if (!v201)
                    goto LABEL_364;
                  goto LABEL_343;
                }
              }
              do
              {
                if (v213 == v210)
                {
                  if (v215 >= v214)
                  {
                    if (v214 == v213)
                      v244 = 1;
                    else
                      v244 = (v214 - v213) >> 2;
                    if (v244 >> 61)
                      sub_223174E94();
                    v245 = (char *)operator new(8 * v244);
                    v210 = v245;
                    v246 = (v244 + 3) >> 2;
                    v239 = &v245[8 * v246];
                    v247 = v215 - v213;
                    v221 = v215 == v213;
                    v215 = v239;
                    if (!v221)
                    {
                      v215 = &v239[v247 & 0xFFFFFFFFFFFFFFF8];
                      v248 = v247 - 8;
                      v249 = &v245[8 * v246];
                      v250 = v213;
                      if (v248 < 0x38)
                        goto LABEL_519;
                      v251 = 8 * v246;
                      v249 = &v245[8 * v246];
                      v250 = v213;
                      if ((unint64_t)(v249 - v213) < 0x20)
                        goto LABEL_519;
                      v252 = (v248 >> 3) + 1;
                      v253 = 8 * (v252 & 0x3FFFFFFFFFFFFFFCLL);
                      v249 = &v239[v253];
                      v250 = &v213[v253];
                      v254 = (__int128 *)(v213 + 16);
                      v255 = &v245[v251 + 16];
                      v256 = v252 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v257 = *v254;
                        *((_OWORD *)v255 - 1) = *(v254 - 1);
                        *(_OWORD *)v255 = v257;
                        v254 += 2;
                        v255 += 32;
                        v256 -= 4;
                      }
                      while (v256);
                      if (v252 != (v252 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_519:
                        do
                        {
                          v258 = *(_QWORD *)v250;
                          v250 += 8;
                          *(_QWORD *)v249 = v258;
                          v249 += 8;
                        }
                        while (v249 != v215);
                      }
                    }
                    v214 = &v245[8 * v244];
                    operator delete(v213);
                  }
                  else
                  {
                    v241 = (v214 - v215) >> 3;
                    if (v241 >= -1)
                      v242 = v241 + 1;
                    else
                      v242 = v241 + 2;
                    v243 = &v215[8 * (v242 >> 1)];
                    v239 = &v213[8 * (v242 >> 1)];
                    if (v215 == v213)
                    {
                      v210 = v215;
                    }
                    else
                    {
                      memmove(&v213[8 * (v242 >> 1)], v213, v215 - v213);
                      v210 = v213;
                    }
                    v215 = v243;
                  }
                }
                else
                {
                  v239 = v213;
                }
                v240 = *((_QWORD *)v128 - 1);
                v128 -= 8;
                *((_QWORD *)v239 - 1) = v240;
                v213 = v239 - 8;
              }
              while (v128 != *((char **)&v404 + 1));
              v201 = (char *)v404;
              *(_QWORD *)&v404 = v210;
              *((_QWORD *)&v404 + 1) = v239 - 8;
              v128 = v215;
              v405 = v215;
              v406 = v214;
              if (!v201)
                goto LABEL_364;
LABEL_343:
              operator delete(v201);
              goto LABEL_364;
            }
LABEL_228:
            v166 = 1;
            goto LABEL_229;
          }
        }
        else if (!__p)
        {
          goto LABEL_219;
        }
        operator delete(__p);
LABEL_219:
        ++v156;
        v157 = &v397[2 * v156 - 2];
        if (v156 == 4)
        {
          v329 = (_QWORD *)(**(_QWORD **)(v408 + 8) + 232 * *(_QWORD *)v408);
          v330 = v329[3];
          if (!v330 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v330 + 48))(v330))
          {
            v331 = v329[5];
            if (!v331 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v331 + 48))(v331))
            {
              v332 = v329[7];
              if (!v332 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v332 + 48))(v332))
              {
                v333 = v329[9];
                if (!v333 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v333 + 48))(v333))
                {
                  v334 = v389;
                  v335 = v408;
                  if (v389 >= v390)
                  {
                    v337 = sub_223F898DC((char **)&v388, v408, *((uint64_t *)&v408 + 1));
                  }
                  else
                  {
                    *v389 = v408;
                    v336 = *((_QWORD *)&v408 + 1);
                    v334[1] = *((_QWORD *)&v408 + 1);
                    if (v336)
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v336 + 24))(v336, v335);
                    v337 = (char *)(v334 + 2);
                  }
                  v389 = v337;
                }
              }
            }
          }
          if (*((_QWORD *)&v399 + 1))
            (*(void (**)(_QWORD))(**((_QWORD **)&v399 + 1) + 40))(*((_QWORD *)&v399 + 1));
          if (*((_QWORD *)&v398 + 1))
            (*(void (**)(_QWORD))(**((_QWORD **)&v398 + 1) + 40))(*((_QWORD *)&v398 + 1));
          if (v397[1])
            (*(void (**)(void *))(*(_QWORD *)v397[1] + 40))(v397[1]);
          if (*((_QWORD *)&v396 + 1))
            (*(void (**)(_QWORD))(**((_QWORD **)&v396 + 1) + 40))(*((_QWORD *)&v396 + 1));
          v338 = v410;
          if (v410)
          {
LABEL_433:
            *(_QWORD *)&v411 = v338;
            operator delete(v338);
          }
LABEL_434:
          if (*((_QWORD *)&v408 + 1))
            (*(void (**)(_QWORD))(**((_QWORD **)&v408 + 1) + 40))(*((_QWORD *)&v408 + 1));
          v339 = *(_QWORD *)&__srca[8 * (v126 / 0x55)];
          v340 = v126 % 0x55;
          v341 = *(void **)(v339 + 48 * (v126 % 0x55) + 24);
          if (v341)
          {
            *(_QWORD *)(v339 + 48 * v340 + 32) = v341;
            operator delete(v341);
          }
          v342 = *(_QWORD *)(v339 + 48 * v340 + 8);
          if (v342)
            (*(void (**)(uint64_t))(*(_QWORD *)v342 + 40))(v342);
          --v127;
          v343 = v126 + 1;
          *(_QWORD *)&v407 = v126 + 1;
          *((_QWORD *)&v407 + 1) = v127;
          if (v126 + 1 >= 0xAA)
          {
            operator delete(*(void **)__srca);
            v343 = v126 - 84;
            __srca += 8;
            *((_QWORD *)&v404 + 1) = __srca;
            *(_QWORD *)&v407 = v126 - 84;
          }
          v126 = v343;
          if (v127)
            goto LABEL_190;
          v344 = (uint64_t **)v388;
          v345 = (uint64_t **)v389;
          v10 = v377;
          v346 = (void **)__srca;
          if (v388 != v389)
          {
            do
            {
              v354 = *v344;
              v353 = v344[1];
              if (v353)
              {
                (*(void (**)(uint64_t *))(*v353 + 24))(v344[1]);
                v386 = v354;
                v387 = v353;
                (*(void (**)(uint64_t *))(*v353 + 24))(v353);
              }
              else
              {
                v386 = *v344;
                v387 = 0;
              }
              sub_223F858E4((uint64_t)v377, &v386);
              if (v353)
              {
                (*(void (**)(uint64_t *))(*v353 + 40))(v353);
                (*(void (**)(uint64_t *))(*v353 + 40))(v353);
              }
              v344 += 2;
            }
            while (v344 != v345);
          }
          sub_223F871AC((uint64_t)v377);
          v347 = v128 - __srca;
          if ((unint64_t)(v128 - __srca) >= 0x11)
          {
            do
            {
              v348 = *v346++;
              operator delete(v348);
              *((_QWORD *)&v404 + 1) = v346;
              v347 -= 8;
            }
            while (v347 > 0x10);
          }
          while (v346 != (void **)v128)
          {
            v349 = *v346++;
            operator delete(v349);
          }
          if ((_QWORD)v404)
            operator delete((void *)v404);
          v350 = v388;
          if (v388)
          {
            v351 = v389;
            v352 = v388;
            if (v389 != v388)
            {
              do
              {
                v355 = *(v351 - 1);
                if (v355)
                  (*(void (**)(uint64_t))(*(_QWORD *)v355 + 40))(v355);
                v351 -= 2;
              }
              while (v351 != v350);
              v352 = v388;
            }
            v389 = v350;
            operator delete(v352);
          }
LABEL_467:
          v103 = v383;
          v356 = v384;
          if (v383 == v384)
          {
            if (!v384)
              break;
          }
          else
          {
            v357 = *v10 * *v10;
            v358 = v383;
            do
            {
              v359 = **(_QWORD **)(*(_QWORD *)v358 + 8) + 232 * **(_QWORD **)v358;
              v360 = (float)((float)(*(float *)(v359 + 88) - *(float *)(v359 + 80))
                           * (float)(*(float *)(v359 + 92) - *(float *)(v359 + 84)))
                   / v357;
              if (v360 >= 0.1)
              {
                v361 = v360 * (float)a7;
                v362 = fmaxf(fabsf(v361), 1.0);
                v363 = v361 >= 0.0 ? v362 : -v362;
                v364 = llroundf(v363);
                if (v364)
                {
                  v365 = (_OWORD *)(v359 + 96);
                  v366 = (v359 + 96) & 0xF8;
                  if (!*(_BYTE *)(v359 + 216))
                    v366 = 0;
                  sub_223F83B84((uint64_t)&v396, a2, v366 | (v359 + 96) & 0xFFFFFFFFFFFFFF00, *(_BYTE *)(v359 + 216), v364, a5, a6);
                  if (*(_BYTE *)(v359 + 216))
                  {
                    if (*(unsigned __int8 *)(v359 + 192) == v402)
                    {
                      if (*(_BYTE *)(v359 + 192))
                      {
                        *(_OWORD *)(v359 + 128) = v398;
                        *(_OWORD *)(v359 + 144) = v399;
                        *(_OWORD *)(v359 + 160) = v400;
                        *(_OWORD *)(v359 + 176) = v401;
                        *v365 = v396;
                        *(_OWORD *)(v359 + 112) = *(_OWORD *)v397;
                      }
                    }
                    else if (*(_BYTE *)(v359 + 192))
                    {
                      *(_BYTE *)(v359 + 192) = 0;
                    }
                    else
                    {
                      *(_OWORD *)(v359 + 128) = v398;
                      *(_OWORD *)(v359 + 144) = v399;
                      *(_OWORD *)(v359 + 160) = v400;
                      *(_OWORD *)(v359 + 176) = v401;
                      *v365 = v396;
                      *(_OWORD *)(v359 + 112) = *(_OWORD *)v397;
                      *(_BYTE *)(v359 + 192) = 1;
                    }
                    *(_QWORD *)(v359 + 200) = v403[0];
                    *(_QWORD *)(v359 + 205) = *(_QWORD *)((char *)v403 + 5);
                  }
                  else
                  {
                    *(_BYTE *)(v359 + 96) = 0;
                    *(_BYTE *)(v359 + 192) = 0;
                    if (v402)
                    {
                      *(_OWORD *)(v359 + 128) = v398;
                      *(_OWORD *)(v359 + 144) = v399;
                      *(_OWORD *)(v359 + 160) = v400;
                      *(_OWORD *)(v359 + 176) = v401;
                      *v365 = v396;
                      *(_OWORD *)(v359 + 112) = *(_OWORD *)v397;
                      *(_BYTE *)(v359 + 192) = 1;
                    }
                    *(_QWORD *)(v359 + 200) = v403[0];
                    *(_QWORD *)(v359 + 205) = *(_QWORD *)((char *)v403 + 5);
                    *(_BYTE *)(v359 + 216) = 1;
                  }
                  *(_BYTE *)(v359 + 212) = 0;
                }
              }
              if (!*(_BYTE *)(v359 + 216))
              {
                *(_QWORD *)&v408 = *(_QWORD *)v358;
                v367 = *((_QWORD *)v358 + 1);
                *((_QWORD *)&v408 + 1) = v367;
                if (v367)
                  (*(void (**)(uint64_t))(*(_QWORD *)v367 + 24))(v367);
                sub_223F858E4((uint64_t)v10, (uint64_t **)&v408);
                if (v367)
                  (*(void (**)(uint64_t))(*(_QWORD *)v367 + 40))(v367);
              }
              v358 += 16;
            }
            while (v358 != v356);
            if (!v103)
              break;
            do
            {
              v368 = *((_QWORD *)v356 - 1);
              if (v368)
                (*(void (**)(uint64_t))(*(_QWORD *)v368 + 40))(v368);
              v356 -= 16;
            }
            while (v356 != v103);
          }
LABEL_500:
          operator delete(v103);
          break;
        }
      }
    }
  }
LABEL_501:
  if (*(_DWORD *)(a1 + 144) == a2)
  {
    v369 = *(_DWORD *)(a1 + 148);
    if (v369 <= a7)
      v369 = a7;
  }
  else
  {
    *(_DWORD *)(a1 + 152) += *(_DWORD *)(a1 + 148);
    *(_DWORD *)(a1 + 144) = a2;
    v369 = a7;
  }
  *(_DWORD *)(a1 + 148) = v369;
}

void sub_223F7F660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;
  void **v46;
  void *v48;
  uint64_t v49;

  v48 = *v46;
  if (*v46)
  {
    *(_QWORD *)(v45 + 32) = v48;
    operator delete(v48);
  }
  v49 = *(_QWORD *)(v45 + 8);
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 40))(v49);
  operator delete(__p);
  sub_223F8BE68(&a45);
  sub_223F8586C(&a32);
  sub_223F8586C(&a27);
  _Unwind_Resume(a1);
}

void sub_223F7F6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  sub_223F8586C(&a32);
  sub_223F8586C(&a27);
  _Unwind_Resume(a1);
}

void sub_223F7F6C4()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
  JUMPOUT(0x223F7FD68);
}

void sub_223F7F6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35)
{
  sub_223F8586C(&a35);
  sub_223F8586C(&a32);
  _Unwind_Resume(a1);
}

void sub_223F7F704()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
  JUMPOUT(0x223F7FD68);
}

void sub_223F7F720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35)
{
  uint64_t v35;
  uint64_t v36;

  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
  sub_223F89748(v36 - 176);
  sub_223F8586C(&a35);
  sub_223F8586C(&a32);
  _Unwind_Resume(a1);
}

void sub_223F7F72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;
  uint64_t v46;

  sub_223F8461C(&a45);
  (*(void (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
  sub_223F89748(v46 - 176);
  sub_223F8586C(&a35);
  sub_223F8586C(&a32);
  _Unwind_Resume(a1);
}

void sub_223F7F73C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  JUMPOUT(0x223F7FD68);
}

void sub_223F7F758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  void *v45;

  __cxa_end_catch();
  operator delete(v45);
  sub_223F8BE68(&a45);
  sub_223F8586C(&a32);
  sub_223F8586C(&a27);
  _Unwind_Resume(a1);
}

void sub_223F7F794()
{
  uint64_t v0;

  sub_223F8BE68((_QWORD *)(v0 - 176));
  JUMPOUT(0x223F7FD00);
}

void sub_223F7F7A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  void *v48;

  if (a47 == a46)
  {
    v48 = __p;
    if (!__p)
      goto LABEL_3;
  }
  else
  {
    v48 = __p;
    if (!__p)
    {
LABEL_3:
      if (!v47)
LABEL_8:
        JUMPOUT(0x223F7FD48);
LABEL_7:
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 40))(v47);
      goto LABEL_8;
    }
  }
  operator delete(v48);
  if (!v47)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_223F7F7FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  sub_223F8461C(&a45);
  JUMPOUT(0x223F7FCF8);
}

void sub_223F7F80C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  uint64_t v49;

  sub_223F88F20(&a45);
  (*(void (**)(uint64_t))(*(_QWORD *)v49 + 40))(v49);
  JUMPOUT(0x223F7FD68);
}

void sub_223F7F898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void **a45)
{
  uint64_t v45;

  sub_223F88F20(&a45);
  (*(void (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
  JUMPOUT(0x223F7FD68);
}

void sub_223F7F8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;

  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
  sub_223F8BEB0(v33 - 224);
  sub_223F8586C(&a32);
  sub_223F8586C(&a27);
  _Unwind_Resume(a1);
}

void sub_223F7F8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;
  uint64_t v46;
  uint64_t v49;

  while (1)
  {
    v49 = *((_QWORD *)a23 - 1);
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 40))(v49);
    a23 -= 16;
    if (a23 == &a45)
    {
      if (v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
      sub_223F89748(v46 - 176);
      sub_223F8586C(&a35);
      sub_223F8586C(&a32);
      _Unwind_Resume(a1);
    }
  }
}

void sub_223F7F964()
{
  JUMPOUT(0x223F7FD40);
}

void sub_223F7F988()
{
  void *v0;
  void *v1;

  operator delete(v1);
  operator delete(v0);
  JUMPOUT(0x223F7FCD8);
}

void sub_223F7F9A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;
  uint64_t v47;

  while (1)
  {
    v47 = *((_QWORD *)a9 - 1);
    if (v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 40))(v47);
    a9 -= 16;
    if (a9 == &a45)
    {
      sub_223F8BE68(v45 - 176);
      JUMPOUT(0x223F7FD00);
    }
  }
}

void sub_223F7FA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;

  if (v32)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
    JUMPOUT(0x223F7FA18);
  }
  sub_223F8BEB0(v33 - 224);
  sub_223F8586C(&a32);
  sub_223F8586C(&a27);
  _Unwind_Resume(a1);
}

void sub_223F7FA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  uint64_t v32;
  uint64_t v34;

  v34 = *(_QWORD *)(v32 - 168);
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 40))(v34);
  sub_223F8BEB0(v32 - 224);
  sub_223F8586C(&a32);
  sub_223F8586C(&a27);
  _Unwind_Resume(a1);
}

void sub_223F7FA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  uint64_t v32;

  sub_223F8BEB0(v32 - 224);
  sub_223F8586C(&a32);
  sub_223F8586C(&a27);
  _Unwind_Resume(a1);
}

void sub_223F7FA80()
{
  uint64_t v0;

  if (v0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
    JUMPOUT(0x223F7FA98);
  }
  JUMPOUT(0x223F7FD40);
}

void sub_223F7FAB4(_Unwind_Exception *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;

  if (!v2)
    JUMPOUT(0x223F7FD68);
  while (1)
  {
    v4 = *((_QWORD *)v1 - 1);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    v1 -= 16;
    if (v1 == v2)
    {
      operator delete(v2);
      _Unwind_Resume(a1);
    }
  }
}

void sub_223F7FB30()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x223F7FCD8);
}

void sub_223F7FB38()
{
  uint64_t v0;

  if (v0)
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
  JUMPOUT(0x223F7FC28);
}

void sub_223F7FB5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;
  uint64_t v46;

  (*(void (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
  if (!v46)
  {
    sub_223F8461C(&a45);
    JUMPOUT(0x223F7FD40);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
  sub_223F8461C(&a45);
  JUMPOUT(0x223F7FD30);
}

void sub_223F7FBC4()
{
  uint64_t v0;

  if (v0)
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
  JUMPOUT(0x223F7FD24);
}

void sub_223F7FC24(_Unwind_Exception *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;

  if (!v2)
    JUMPOUT(0x223F7FD68);
  while (1)
  {
    v4 = *((_QWORD *)v1 - 1);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    v1 -= 16;
    if (v1 == v2)
    {
      operator delete(v2);
      _Unwind_Resume(a1);
    }
  }
}

void sub_223F7FC68()
{
  JUMPOUT(0x223F7FC74);
}

void sub_223F7FCA0()
{
  JUMPOUT(0x223F7FCE4);
}

void sub_223F7FCA8()
{
  JUMPOUT(0x223F7FCE4);
}

void sub_223F7FCB8()
{
  JUMPOUT(0x223F7FCE4);
}

void sub_223F7FCCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  sub_223F8461C(&a45);
  JUMPOUT(0x223F7FCF8);
}

void sub_223F7FCD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  sub_223F8BE68(&a35);
  sub_223F8461C(&a45);
  JUMPOUT(0x223F7FCF8);
}

void sub_223F7FD20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;

  sub_223F8461C(&a45);
  if (v45)
    JUMPOUT(0x223F7FD30);
  JUMPOUT(0x223F7FD40);
}

void sub_223F7FD60(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

void sub_223F7FD78(uint64_t a1, int a2, uint64_t a3, uint64_t a4, float32x2_t *a5, int a6)
{
  _QWORD *v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  unsigned __int32 v26;
  float32x2_t v27;
  __n128 v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  float v38;
  uint64_t *i;
  float64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  float v45;
  _BYTE *v46;
  unsigned int v47;
  unint64_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float64_t v52;
  unint64_t *v53;
  unint64_t v54;
  __n128 *v55;
  __n128 *v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  int v64;
  int v65;
  _OWORD v66[6];
  __n128 *v67;
  __n128 *v68;
  _BYTE v69[20];
  __int32 v70;
  float32x2_t v71;
  __int32 v72;
  float64x2_t v73[2];
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  simd_float3x3 v78;

  if (!*(_BYTE *)(a1 + 136) || *(unsigned __int8 *)(a1 + 96) != a6)
  {
    LODWORD(v73[0].f64[0]) = *(_DWORD *)(a1 + 4);
    v12 = operator new(0x58uLL);
    v12[1] = 0;
    v12[2] = 0;
    *v12 = &off_24EC64630;
    sub_223F7CBC8((uint64_t)(v12 + 3), (float *)v73);
    v13 = *(unsigned __int8 *)(a1 + 136);
    *(_BYTE *)(a1 + 96) = a6;
    *(_QWORD *)(a1 + 104) = v12 + 3;
    if (v13)
    {
      v14 = *(std::__shared_weak_count **)(a1 + 112);
      *(_QWORD *)(a1 + 112) = v12;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      *(_QWORD *)(a1 + 120) = 20;
      *(_WORD *)(a1 + 128) = 2565;
    }
    else
    {
      *(_QWORD *)(a1 + 112) = v12;
      *(_OWORD *)(a1 + 120) = xmmword_224691EE0;
      *(_BYTE *)(a1 + 136) = 1;
    }
  }
  v17 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
  v18 = (float32x2_t)v17[5];
  v19 = (float32x2_t)v17[6];
  v78.columns[2].i64[0] = v17[7];
  v20.i32[0] = a5[1].i32[0];
  v21 = a5[2];
  v22.i32[0] = a5[3].i32[0];
  v23 = a5[6];
  v24.i32[0] = a5[7].i32[0];
  v25 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v18, COERCE_FLOAT(*a5)), v19, *a5, 1), *(float32x2_t *)v78.columns[2].f32, v20.f32[0]);
  v26 = vadd_f32(v20, vmla_lane_f32(vmul_f32(*a5, 0), 0, *a5, 1)).u32[0];
  v27 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v18, v21.f32[0]), v19, v21, 1), *(float32x2_t *)v78.columns[2].f32, v22.f32[0]);
  *(float32x2_t *)v78.columns[0].f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v18, v23.f32[0]), v19, v23, 1), *(float32x2_t *)v78.columns[2].f32, v24.f32[0]);
  *(float32x2_t *)&v73[0].f64[0] = v25;
  *(float32x2_t *)((char *)&v73[0].f64[1] + 4) = v27;
  *(float32x2_t *)v78.columns[1].f32 = vadd_f32(v24, vmla_lane_f32(vmul_f32(v23, 0), 0, v23, 1));
  LODWORD(v73[0].f64[1]) = v26;
  HIDWORD(v73[1].f64[0]) = vadd_f32(v22, vmla_lane_f32(vmul_f32(v21, 0), 0, v21, 1)).u32[0];
  *(_QWORD *)&v73[1].f64[1] = v78.columns[0].i64[0];
  LODWORD(v74.f64[0]) = v78.columns[1].i32[0];
  v28 = sub_22322BB84((uint64_t)v73, (uint64_t)v69, v78);
  v33 = *(double *)(a1 + 104);
  v34 = *(_QWORD *)(a1 + 112);
  v35 = *(_BYTE **)a3;
  v36 = *(_QWORD *)(a3 + 8);
  v37 = *(_QWORD *)(a3 + 16);
  v38 = **(float **)&v33;
  if (!v34 || *(_QWORD *)(v34 + 8))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Tracker/ObservationCache.cpp", 85, (uint64_t)"m_grid.use_count() == 1", 23, (uint64_t)&unk_2245AC21E, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v33 = *(double *)(a1 + 104);
  }
  for (i = *(uint64_t **)(*(_QWORD *)&v33 + 40); i; i = (uint64_t *)*i)
    *((_WORD *)i + 17) = 0;
  v40 = *(double *)(a1 + 112);
  if (v40 != 0.0)
  {
    v41 = (unint64_t *)(*(_QWORD *)&v40 + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v73[0].f64[0] = v33;
  v73[0].f64[1] = v40;
  v43 = (HIDWORD(v37) * HIDWORD(v36));
  if ((_DWORD)v43)
  {
    v44 = 0;
    v28.n128_f32[0] = v38 + v38;
    v45 = v28.n128_f32[0] * v28.n128_f32[0];
    v46 = &v35[v43];
    do
    {
      if (*v35)
      {
        v28 = *(__n128 *)v69;
        v29.i32[0] = v70;
        v30.i32[0] = v72;
        v31.f32[0] = (float)v44;
        v32.f32[0] = (float)HIDWORD(v44);
        v49 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)v69, (float)v44), *(float32x2_t *)&v69[12], (float)HIDWORD(v44));
        v50 = (float32x2_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
        v51 = (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32(v30, vmla_f32(vmul_f32(v50, v31), v32, v29)), 0);
        v32 = vadd_f32(v71, v49);
        v31 = vdiv_f32(v32, v51);
        *(float32x2_t *)&v66[0] = v31;
        v47 = v44 + 1;
        v32.f32[0] = (float)(v44 + 1);
        v49.f32[0] = (float)(HIDWORD(v44) + 1);
        v28.n128_u64[0] = (unint64_t)vsub_f32(v31, vdiv_f32(vadd_f32(v71, vmla_n_f32(vmul_n_f32(*(float32x2_t *)v69, v32.f32[0]), *(float32x2_t *)&v69[12], v49.f32[0])), (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32(v30, vmla_f32(vmul_f32(v50, v32), v49, v29)), 0)));
        v29 = vmla_lane_f32(vmul_f32((float32x2_t)v28.n128_u64[0], (float32x2_t)v28.n128_u64[0]), (float32x2_t)vdup_lane_s32((int32x2_t)v28.n128_u64[0], 1), (float32x2_t)v28.n128_u64[0], 1);
        if (v29.f32[0] <= v45)
          sub_223F7B7C8((uint64_t *)v73, (float32x2_t *)v66, 1);
      }
      else
      {
        v47 = v44 + 1;
      }
      if (v47 == (_DWORD)v36)
        v44 = (v44 & 0xFFFFFFFF00000000) + 0x100000000;
      else
        v44 = v44 & 0xFFFFFFFF00000000 | v47;
      if (v47 == (_DWORD)v36)
        v48 = HIDWORD(v37) + v37 - v47 * v37;
      else
        v48 = v37;
      v35 += v48;
    }
    while (v35 != v46);
  }
  sub_223F7B8F4((int8x8_t **)(a1 + 104), v73, &v67, v28);
  v52 = v73[0].f64[1];
  if (!*(_QWORD *)&v73[0].f64[1])
    goto LABEL_37;
  v53 = (unint64_t *)(*(_QWORD *)&v73[0].f64[1] + 8);
  do
    v54 = __ldaxr(v53);
  while (__stlxr(v54 - 1, v53));
  if (!v54)
  {
    (*(void (**)(float64_t))(**(_QWORD **)&v52 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v52));
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v52);
    v55 = v67;
    v56 = v68;
    if (v67 == v68)
      goto LABEL_45;
  }
  else
  {
LABEL_37:
    v55 = v67;
    v56 = v68;
    if (v67 == v68)
      goto LABEL_45;
  }
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  memset(v73, 0, sizeof(v73));
  v73[0].f64[a6] = 1.0;
  v57 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v73[0].f64[0]+ v73[0].f64[1]+ v73[1].f64[0]+ v73[1].f64[1]+ v74.f64[0]+ v74.f64[1]+ v75.f64[0]+ v75.f64[1]+ v76.f64[0]+ v76.f64[1]+ v77.f64[0]+ v77.f64[1]), 0);
  v58 = vdivq_f64(v73[0], v57);
  v59 = vdivq_f64(v73[1], v57);
  v60 = vdivq_f64(v74, v57);
  v61 = vdivq_f64(v75, v57);
  v62 = vdivq_f64(v76, v57);
  v63 = vdivq_f64(v77, v57);
  v66[5] = v63;
  v66[4] = v62;
  v66[3] = v61;
  v66[2] = v60;
  v66[1] = v59;
  v66[0] = v58;
  v64 = *(_DWORD *)(a1 + 8);
  do
  {
    while (1)
    {
      sub_223F84690(a2, (_DWORD *)(a1 + 16), (float *)v55, v64, v66, 1, v63.f64[0]);
      if (*(_DWORD *)(a1 + 144) == a2)
        break;
      *(_DWORD *)(a1 + 152) += *(_DWORD *)(a1 + 148);
      *(_DWORD *)(a1 + 144) = a2;
      *(_DWORD *)(a1 + 148) = v64;
      if (++v55 == v56)
        goto LABEL_44;
    }
    v65 = *(_DWORD *)(a1 + 148);
    if (v65 <= v64)
      v65 = v64;
    *(_DWORD *)(a1 + 148) = v65;
    ++v55;
  }
  while (v55 != v56);
LABEL_44:
  v55 = v67;
LABEL_45:
  if (v55)
  {
    v68 = v55;
    operator delete(v55);
  }
}

void sub_223F8027C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__shared_weak_count *v33;
  void *v35;

  std::__shared_weak_count::~__shared_weak_count(v33);
  operator delete(v35);
  _Unwind_Resume(a1);
}

uint64_t sub_223F802D0(uint64_t a1, unsigned int a2, float *a3, int a4)
{
  uint64_t v4;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  _QWORD *v15;
  _QWORD *v16;
  char v17;
  float *v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  float v45;
  float v46;
  unint64_t v48;
  int v49;
  int v50;
  char v51;
  char v52;
  int v53;
  unsigned int v54;
  int v55;
  char v56;
  float v57;
  int v58;
  float v59;
  float v60;
  BOOL v61;
  int v62;
  int v63;
  int v64;
  float v65;
  int v66;
  int v67;
  int v68;
  int v69;
  unint64_t v70;
  char v71;
  int v72;
  int v73;
  int v74;
  char v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  BOOL v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t *v87;
  int v88;
  _QWORD *v89;
  uint64_t v90;
  int v92;
  _QWORD *v93;
  _QWORD *v94;
  __int128 v95;
  __n128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  char *v139;
  int v140;
  uint64_t *v141[2];
  void *__p;
  _QWORD *v143;
  unint64_t v144;
  _OWORD v145[3];
  __int128 v146;
  _BYTE v147[32];
  __int128 v148;
  _OWORD v149[2];
  uint64_t v150;

  v150 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    return 0;
  v140 = *(_DWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4))
  {
    v11 = **(_QWORD **)(v9 + 8);
    v12 = v11 + 232 * *(_QWORD *)v9;
    v10.n128_f32[0] = *a3;
    if (*a3 <= *(float *)(v12 + 88))
    {
      v10.n128_f32[0] = a3[1];
      if (v10.n128_f32[0] <= *(float *)(v11 + 232 * *(_QWORD *)v9 + 92))
      {
        v10.n128_f32[0] = a3[2];
        v14 = *(float *)(v12 + 80);
        v13 = v12 + 80;
        if (v10.n128_f32[0] >= v14)
        {
          v10.n128_f32[0] = a3[3];
          if (v10.n128_f32[0] >= *(float *)(v13 + 4))
          {
            __p = 0;
            v143 = 0;
            v144 = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
            v145[2] = 0u;
            v93 = operator new(8uLL);
            v94 = operator new(0x1000uLL);
            *v93 = v94;
            *(_QWORD *)&v145[0] = v93;
            *((_QWORD *)&v145[0] + 1) = v93;
            *(_QWORD *)&v145[1] = v93 + 1;
            *((_QWORD *)&v145[1] + 1) = v93 + 1;
            *v94 = v9;
            v94[1] = v4;
            (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
            v146 = v145[0];
            *(_QWORD *)v147 = *(_QWORD *)&v145[1];
            v95 = *(_OWORD *)((char *)&v145[1] + 8);
            memset(v145, 0, sizeof(v145));
            *(_OWORD *)&v147[8] = v95;
            *(_QWORD *)&v147[24] = *((_QWORD *)&v145[2] + 1);
            sub_223F8C050((uint64_t)v145);
            (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
            if (!*(_QWORD *)&v147[24])
            {
LABEL_230:
              sub_223F8C050((uint64_t)&v146);
              goto LABEL_8;
            }
            while (1)
            {
              v97 = *(_QWORD *)&v147[16];
              v98 = *(_QWORD *)(*((_QWORD *)&v146 + 1) + ((*(_QWORD *)&v147[16] >> 5) & 0x7FFFFFFFFFFFFF8));
              v99 = (uint64_t *)(v98 + 16 * v147[16]);
              v101 = *v99;
              v100 = v99[1];
              if (v100)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v100 + 24))(v99[1]);
                v97 = *(_QWORD *)&v147[16];
                v102 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v146 + 1)
                                             + ((*(_QWORD *)&v147[16] >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * v147[16]
                                 + 8);
                if (v102)
                  goto LABEL_161;
              }
              else
              {
                v102 = *(_QWORD *)(v98 + 16 * v147[16] + 8);
                if (v102)
                {
LABEL_161:
                  (*(void (**)(uint64_t))(*(_QWORD *)v102 + 40))(v102);
                  v103 = *(_QWORD *)&v147[16] + 1;
                  *(_OWORD *)&v147[16] = __PAIR128__(*(unint64_t *)&v147[24], *(_QWORD *)&v147[16] + 1)
                                       + __PAIR128__(-1, 0);
                  if (v103 < 0x200)
                    goto LABEL_166;
LABEL_165:
                  operator delete(**((void ***)&v146 + 1));
                  *((_QWORD *)&v146 + 1) += 8;
                  *(_QWORD *)&v147[16] -= 256;
                  goto LABEL_166;
                }
              }
              v104 = v97 + 1;
              *(_OWORD *)&v147[16] = __PAIR128__(*(unint64_t *)&v147[24], v104) + __PAIR128__(-1, 0);
              if (v104 >= 0x200)
                goto LABEL_165;
LABEL_166:
              v105 = (_QWORD *)(**(_QWORD **)(v101 + 8) + 232 * *(_QWORD *)v101);
              v106 = v105[3];
              if (v106 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v106 + 48))(v106)
                || (v107 = v105[5]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v107 + 48))(v107)
                || (v108 = v105[7]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v108 + 48))(v108)
                || (v109 = v105[9]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v109 + 48))(v109))
              {
                sub_223F35620((float32x2_t *)(**(_QWORD **)(v101 + 8) + 232 * *(_QWORD *)v101 + 80), 0, (float32x2_t *)v145);
                if (*a3 <= *((float *)v145 + 2)
                  && a3[1] <= *((float *)v145 + 3)
                  && a3[2] >= *(float *)v145
                  && a3[3] >= *((float *)v145 + 1))
                {
                  v110 = **(_QWORD **)(v101 + 8) + 232 * *(_QWORD *)v101;
                  v111 = *(_QWORD *)(v110 + 24);
                  if (v111)
                  {
                    v112 = *(_QWORD *)(v110 + 16);
                    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 24))(v111);
                    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v111 + 48))(v111))
                    {
                      v113 = *((_QWORD *)&v146 + 1);
                      v114 = 32 * (*(_QWORD *)v147 - *((_QWORD *)&v146 + 1)) - 1;
                      if (*(_QWORD *)v147 == *((_QWORD *)&v146 + 1))
                        v114 = 0;
                      v115 = *(_QWORD *)&v147[24] + *(_QWORD *)&v147[16];
                      if (v114 == *(_QWORD *)&v147[24] + *(_QWORD *)&v147[16])
                      {
                        sub_223F8C1C8((uint64_t)&v146);
                        v113 = *((_QWORD *)&v146 + 1);
                        v115 = *(_QWORD *)&v147[24] + *(_QWORD *)&v147[16];
                      }
                      v116 = (_QWORD *)(*(_QWORD *)(v113 + ((v115 >> 5) & 0x7FFFFFFFFFFFFF8))
                                      + 16 * v115);
                      *v116 = v112;
                      v116[1] = v111;
                      (*(void (**)(uint64_t))(*(_QWORD *)v111 + 24))(v111);
                      ++*(_QWORD *)&v147[24];
                    }
                    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 40))(v111);
                  }
                }
                sub_223F35620((float32x2_t *)(**(_QWORD **)(v101 + 8) + 232 * *(_QWORD *)v101 + 80), 1, (float32x2_t *)v145);
                if (*a3 <= *((float *)v145 + 2)
                  && a3[1] <= *((float *)v145 + 3)
                  && a3[2] >= *(float *)v145
                  && a3[3] >= *((float *)v145 + 1))
                {
                  v117 = **(_QWORD **)(v101 + 8) + 232 * *(_QWORD *)v101;
                  v118 = *(_QWORD *)(v117 + 40);
                  if (v118)
                  {
                    v119 = *(_QWORD *)(v117 + 32);
                    (*(void (**)(uint64_t))(*(_QWORD *)v118 + 24))(v118);
                    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v118 + 48))(v118))
                    {
                      v120 = *((_QWORD *)&v146 + 1);
                      v121 = 32 * (*(_QWORD *)v147 - *((_QWORD *)&v146 + 1)) - 1;
                      if (*(_QWORD *)v147 == *((_QWORD *)&v146 + 1))
                        v121 = 0;
                      v122 = *(_QWORD *)&v147[24] + *(_QWORD *)&v147[16];
                      if (v121 == *(_QWORD *)&v147[24] + *(_QWORD *)&v147[16])
                      {
                        sub_223F8C1C8((uint64_t)&v146);
                        v120 = *((_QWORD *)&v146 + 1);
                        v122 = *(_QWORD *)&v147[24] + *(_QWORD *)&v147[16];
                      }
                      v123 = (_QWORD *)(*(_QWORD *)(v120 + ((v122 >> 5) & 0x7FFFFFFFFFFFFF8))
                                      + 16 * v122);
                      *v123 = v119;
                      v123[1] = v118;
                      (*(void (**)(uint64_t))(*(_QWORD *)v118 + 24))(v118);
                      ++*(_QWORD *)&v147[24];
                    }
                    (*(void (**)(uint64_t))(*(_QWORD *)v118 + 40))(v118);
                  }
                }
                sub_223F35620((float32x2_t *)(**(_QWORD **)(v101 + 8) + 232 * *(_QWORD *)v101 + 80), 2, (float32x2_t *)v145);
                if (*a3 <= *((float *)v145 + 2)
                  && a3[1] <= *((float *)v145 + 3)
                  && a3[2] >= *(float *)v145
                  && a3[3] >= *((float *)v145 + 1))
                {
                  v124 = **(_QWORD **)(v101 + 8) + 232 * *(_QWORD *)v101;
                  v125 = *(_QWORD *)(v124 + 56);
                  if (v125)
                  {
                    v126 = *(_QWORD *)(v124 + 48);
                    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 24))(v125);
                    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v125 + 48))(v125))
                    {
                      v127 = *((_QWORD *)&v146 + 1);
                      v128 = 32 * (*(_QWORD *)v147 - *((_QWORD *)&v146 + 1)) - 1;
                      if (*(_QWORD *)v147 == *((_QWORD *)&v146 + 1))
                        v128 = 0;
                      v129 = *(_QWORD *)&v147[24] + *(_QWORD *)&v147[16];
                      if (v128 == *(_QWORD *)&v147[24] + *(_QWORD *)&v147[16])
                      {
                        sub_223F8C1C8((uint64_t)&v146);
                        v127 = *((_QWORD *)&v146 + 1);
                        v129 = *(_QWORD *)&v147[24] + *(_QWORD *)&v147[16];
                      }
                      v130 = (_QWORD *)(*(_QWORD *)(v127 + ((v129 >> 5) & 0x7FFFFFFFFFFFFF8))
                                      + 16 * v129);
                      *v130 = v126;
                      v130[1] = v125;
                      (*(void (**)(uint64_t))(*(_QWORD *)v125 + 24))(v125);
                      ++*(_QWORD *)&v147[24];
                    }
                    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 40))(v125);
                  }
                }
                sub_223F35620((float32x2_t *)(**(_QWORD **)(v101 + 8) + 232 * *(_QWORD *)v101 + 80), 3, (float32x2_t *)v145);
                v96.n128_f32[0] = *a3;
                if (*a3 <= *((float *)v145 + 2))
                {
                  v96.n128_f32[0] = a3[1];
                  if (v96.n128_f32[0] <= *((float *)v145 + 3))
                  {
                    v96.n128_f32[0] = a3[2];
                    if (v96.n128_f32[0] >= *(float *)v145)
                    {
                      v96.n128_f32[0] = a3[3];
                      if (v96.n128_f32[0] >= *((float *)v145 + 1))
                      {
                        v131 = **(_QWORD **)(v101 + 8) + 232 * *(_QWORD *)v101;
                        v132 = *(_QWORD *)(v131 + 72);
                        if (v132)
                        {
                          v133 = *(_QWORD *)(v131 + 64);
                          (*(void (**)(uint64_t))(*(_QWORD *)v132 + 24))(v132);
                          if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v132 + 48))(v132))
                          {
                            v134 = *((_QWORD *)&v146 + 1);
                            v135 = 32 * (*(_QWORD *)v147 - *((_QWORD *)&v146 + 1)) - 1;
                            if (*(_QWORD *)v147 == *((_QWORD *)&v146 + 1))
                              v135 = 0;
                            v136 = *(_QWORD *)&v147[24] + *(_QWORD *)&v147[16];
                            if (v135 == *(_QWORD *)&v147[24] + *(_QWORD *)&v147[16])
                            {
                              sub_223F8C1C8((uint64_t)&v146);
                              v134 = *((_QWORD *)&v146 + 1);
                              v136 = *(_QWORD *)&v147[24] + *(_QWORD *)&v147[16];
                            }
                            v137 = (_QWORD *)(*(_QWORD *)(v134 + ((v136 >> 5) & 0x7FFFFFFFFFFFFF8))
                                            + 16 * v136);
                            *v137 = v133;
                            v137[1] = v132;
                            (*(void (**)(uint64_t))(*(_QWORD *)v132 + 24))(v132);
                            ++*(_QWORD *)&v147[24];
                          }
                          (*(void (**)(uint64_t))(*(_QWORD *)v132 + 40))(v132);
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                v138 = v143;
                if ((unint64_t)v143 >= v144)
                {
                  v139 = sub_223F898DC((char **)&__p, v101, v100);
                }
                else
                {
                  *v143 = v101;
                  v138[1] = v100;
                  if (v100)
                    (*(void (**)(uint64_t))(*(_QWORD *)v100 + 24))(v100);
                  v139 = (char *)(v138 + 2);
                }
                v143 = v139;
              }
              if (v100)
                (*(void (**)(uint64_t, __n128))(*(_QWORD *)v100 + 40))(v100, v96);
              if (!*(_QWORD *)&v147[24])
                goto LABEL_230;
            }
          }
        }
      }
    }
  }
  __p = 0;
  v143 = 0;
  v144 = 0;
LABEL_8:
  (*(void (**)(uint64_t, __n128))(*(_QWORD *)v4 + 40))(v4, v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v16 = __p;
  v15 = v143;
  if (__p == v143)
  {
    v17 = 0;
    if (v143)
      goto LABEL_145;
LABEL_11:
    if ((v17 & 1) != 0)
      goto LABEL_147;
    return 0;
  }
  v17 = 0;
  v18 = (float *)(a1 + 16);
  v19 = *(float *)(a1 + 16);
  v20 = v19 * v19;
  v21 = (float)v140;
  v22 = v19 * 1.25;
  do
  {
    v23 = **(_QWORD **)(*v16 + 8) + 232 * *(_QWORD *)*v16;
    v24 = a3[2];
    v25 = *(float *)(v23 + 80);
    v26 = *(float *)(v23 + 84);
    v27 = 0.0;
    if (v25 <= v24)
    {
      v28 = a3[3];
      if (v26 <= v28)
      {
        v29 = *(float *)(v23 + 88);
        if (v29 >= *a3)
        {
          v30 = *(float *)(v23 + 92);
          v31 = a3[1];
          if (v30 >= v31)
          {
            if (v25 >= *a3)
              v32 = *(float *)(v23 + 80);
            else
              v32 = *a3;
            if (v26 >= v31)
              v33 = *(float *)(v23 + 84);
            else
              v33 = a3[1];
            if (v24 >= v29)
              v24 = *(float *)(v23 + 88);
            if (v28 >= v30)
              v28 = *(float *)(v23 + 92);
            if (v32 <= v24)
              v34 = v24;
            else
              v34 = v32;
            if (v32 > v24)
              v32 = v24;
            if (v33 <= v28)
              v35 = v28;
            else
              v35 = v33;
            if (v33 <= v28)
              v28 = v33;
            v27 = (float)(v34 - v32) * (float)(v35 - v28);
          }
        }
      }
    }
    v36 = *(float *)(v23 + 88) - v25;
    v37 = (float)((float)(v36 * (float)(*(float *)(v23 + 92) - v26)) / v20)
        * (float)(v27 / (float)(v36 * (float)(*(float *)(v23 + 92) - v26)));
    if (v37 < 0.1)
      goto LABEL_16;
    v38 = v37 * (float)-a4;
    v39 = fmaxf(fabsf(v38), 1.0);
    v40 = v38 >= 0.0 ? v39 : -v39;
    v41 = llroundf(v40);
    if (!v41)
      goto LABEL_16;
    v42 = v23 + 96;
    v43 = *(_DWORD *)(v23 + 200);
    if (v43 == a2)
    {
      v44 = *(_DWORD *)(v23 + 204);
      if (v44 < 1)
      {
        if (v44 < 0 && v41 << (*(_BYTE *)(v23 + 212) - 1) < v41)
          v41 <<= *(_BYTE *)(v23 + 212) - 1;
      }
      else
      {
        v45 = *v18;
        v46 = *v18 * 1.25;
        if (v41 > -2 || v36 < v46)
        {
          if (v36 < v46)
          {
            if (!*(_BYTE *)(v23 + 216))
            {
              *(_BYTE *)(v23 + 96) = 0;
              *(_BYTE *)(v23 + 192) = 0;
              *(_DWORD *)(v23 + 200) = a2;
              *(_QWORD *)(v23 + 204) = 0;
              *(_BYTE *)(v23 + 212) = 0;
              *(_BYTE *)(v23 + 216) = 1;
              goto LABEL_15;
            }
            v48 = v42 & 0xFFFFFFFFFFFFFFF8;
            if (*(_DWORD *)(v48 + 104) == a2)
            {
              v49 = *(_DWORD *)(v48 + 108);
              v50 = *(_DWORD *)(v48 + 112);
              v51 = *(_BYTE *)(v48 + 96);
              if (v51)
              {
                v51 = *(_BYTE *)v48;
                *(_OWORD *)&v147[16] = *(_OWORD *)(v48 + 33);
                v148 = *(_OWORD *)(v48 + 49);
                v149[0] = *(_OWORD *)(v48 + 65);
                *(_OWORD *)((char *)v149 + 15) = *(_OWORD *)(v48 + 80);
                v146 = *(_OWORD *)(v48 + 1);
                *(_OWORD *)v147 = *(_OWORD *)(v48 + 17);
                v52 = *(_BYTE *)(v48 + 116);
                v53 = *(unsigned __int8 *)(v23 + 192);
                if (v53 != 1)
                  goto LABEL_60;
              }
              else
              {
                v52 = *(_BYTE *)(v48 + 116);
                v53 = *(unsigned __int8 *)(v23 + 192);
                if (*(_BYTE *)(v23 + 192))
                  goto LABEL_60;
              }
LABEL_142:
              if (v53)
              {
                *(_BYTE *)(v23 + 96) = v51;
                *(_OWORD *)(v23 + 129) = *(_OWORD *)&v147[16];
                *(_OWORD *)(v23 + 145) = v148;
                *(_OWORD *)(v23 + 161) = v149[0];
                *(_OWORD *)(v23 + 176) = *(_OWORD *)((char *)v149 + 15);
                *(_OWORD *)(v23 + 97) = v146;
                *(_OWORD *)(v23 + 113) = *(_OWORD *)v147;
              }
            }
            else
            {
              if (*(_BYTE *)(v48 + 96))
              {
                v51 = *(_BYTE *)v48;
                *(_OWORD *)&v147[16] = *(_OWORD *)(v48 + 33);
                v148 = *(_OWORD *)(v48 + 49);
                v149[0] = *(_OWORD *)(v48 + 65);
                *(_OWORD *)((char *)v149 + 15) = *(_OWORD *)(v48 + 80);
                v146 = *(_OWORD *)(v48 + 1);
                *(_OWORD *)v147 = *(_OWORD *)(v48 + 17);
                v88 = 1;
              }
              else
              {
                v51 = 0;
                v88 = 0;
              }
              v49 = 0;
              v50 = *(_DWORD *)(v48 + 112) + *(_DWORD *)(v48 + 108);
              v52 = *(_BYTE *)(v48 + 116);
              v53 = *(unsigned __int8 *)(v23 + 192);
              if (v53 == v88)
                goto LABEL_142;
LABEL_60:
              if (v53)
              {
                *(_BYTE *)(v23 + 192) = 0;
              }
              else
              {
                *(_BYTE *)(v23 + 96) = v51;
                *(_OWORD *)(v23 + 129) = *(_OWORD *)&v147[16];
                *(_OWORD *)(v23 + 145) = v148;
                *(_OWORD *)(v23 + 161) = v149[0];
                *(_OWORD *)(v23 + 176) = *(_OWORD *)((char *)v149 + 15);
                *(_OWORD *)(v23 + 97) = v146;
                *(_OWORD *)(v23 + 113) = *(_OWORD *)v147;
                *(_BYTE *)(v23 + 192) = 1;
              }
            }
            *(_DWORD *)(v23 + 200) = a2;
            *(_DWORD *)(v23 + 204) = v49;
            *(_DWORD *)(v23 + 208) = v50;
            *(_BYTE *)(v23 + 212) = v52;
LABEL_15:
            v17 = 1;
            goto LABEL_16;
          }
        }
        else
        {
          v57 = roundf((float)(v36 + (float)(v45 * 0.25)) / v45);
          v58 = (int)(float)((float)(v57 * v57) * v21);
          v59 = roundf((float)((float)(v36 + v36) + (float)(v45 * 0.25)) / v45);
          v60 = (float)(v59 * v59) * v21;
          v61 = __OFSUB__(v58, (int)v60);
          v62 = v58 - (int)v60;
          if (v62 < 0 != v61)
            v62 += 3;
          v41 = v62 >> 2;
        }
      }
    }
    else
    {
      if (v43 + 2 < a2 || *(char *)(v23 + 212) < 1)
      {
        v56 = 1;
      }
      else
      {
        v54 = *(unsigned __int8 *)(v23 + 212);
        v41 <<= v54;
        v55 = (char)(v54 + 1);
        if (v55 >= 10)
          LOBYTE(v55) = 10;
        if (v54 <= 0x7D)
          v56 = v55;
        else
          v56 = 10;
      }
      *(_BYTE *)(v23 + 212) = v56;
    }
    if (v43 == a2)
      v63 = 0;
    else
      v63 = *(_DWORD *)(v23 + 204);
    v64 = v63 + *(_DWORD *)(v23 + 208);
    v65 = roundf((float)(v36 + (float)(*v18 * 0.25)) / *v18);
    v66 = (int)(float)((float)(v65 * v65) * v21) - 4;
    if (v66 - v64 <= -v64)
      v67 = -v64;
    else
      v67 = v66 - v64;
    if (v66 <= v64)
      v68 = v67;
    else
      v68 = 0;
    if (v41 <= v68)
      v41 = v68;
    v69 = *(unsigned __int8 *)(v23 + 216);
    if (!*(_BYTE *)(v23 + 216))
    {
      *(_BYTE *)(v23 + 96) = 0;
      *(_BYTE *)(v23 + 192) = 0;
      *(_DWORD *)(v23 + 200) = a2;
      *(_DWORD *)(v23 + 204) = v41;
      *(_DWORD *)(v23 + 208) = 0;
      *(_BYTE *)(v23 + 212) = 0;
      *(_BYTE *)(v23 + 216) = 1;
      v17 = 1;
      if (v64 >= v140)
        goto LABEL_16;
      goto LABEL_127;
    }
    v70 = v42 & 0xFFFFFFFFFFFFFFF8;
    if (v41 <= 0)
    {
      if (*(_DWORD *)(v70 + 104) == a2)
      {
        v73 = *(_DWORD *)(v70 + 108);
        v74 = (v73 + v41) & ~((v73 + v41) >> 31);
        if (!v73)
          v74 = v41;
        if (v73 < v41)
          v41 = *(_DWORD *)(v70 + 108);
        if (v73 >= 0)
          v41 = v74;
        v71 = *(_BYTE *)(v70 + 96);
        if (v71)
        {
          v71 = *(_BYTE *)v70;
          *(_OWORD *)&v147[16] = *(_OWORD *)(v70 + 33);
          v148 = *(_OWORD *)(v70 + 49);
          v149[0] = *(_OWORD *)(v70 + 65);
          *(_OWORD *)((char *)v149 + 15) = *(_OWORD *)(v70 + 80);
          v146 = *(_OWORD *)(v70 + 1);
          *(_OWORD *)v147 = *(_OWORD *)(v70 + 17);
          v69 = *(_DWORD *)(v70 + 112);
          v75 = *(_BYTE *)(v70 + 116);
          v76 = *(unsigned __int8 *)(v23 + 192);
          if (v76 != 1)
            goto LABEL_123;
        }
        else
        {
          v69 = *(_DWORD *)(v70 + 112);
          v75 = *(_BYTE *)(v70 + 116);
          v76 = *(unsigned __int8 *)(v23 + 192);
          if (*(_BYTE *)(v23 + 192))
            goto LABEL_123;
        }
      }
      else
      {
        v71 = *(_BYTE *)(v70 + 96);
        if (v71)
        {
          v71 = *(_BYTE *)v70;
          *(_OWORD *)&v147[16] = *(_OWORD *)(v70 + 33);
          v148 = *(_OWORD *)(v70 + 49);
          v149[0] = *(_OWORD *)(v70 + 65);
          *(_OWORD *)((char *)v149 + 15) = *(_OWORD *)(v70 + 80);
          v146 = *(_OWORD *)(v70 + 1);
          *(_OWORD *)v147 = *(_OWORD *)(v70 + 17);
          v82 = *(_DWORD *)(v70 + 108);
          v83 = *(_DWORD *)(v70 + 112);
          v75 = *(_BYTE *)(v70 + 116);
          v69 = v83 + v82;
          v76 = *(unsigned __int8 *)(v23 + 192);
          if (v76 != 1)
            goto LABEL_123;
        }
        else
        {
          v84 = *(_DWORD *)(v70 + 108);
          v85 = *(_DWORD *)(v70 + 112);
          v75 = *(_BYTE *)(v70 + 116);
          v69 = v85 + v84;
          v76 = *(unsigned __int8 *)(v23 + 192);
          if (*(_BYTE *)(v23 + 192))
            goto LABEL_123;
        }
      }
    }
    else
    {
      v71 = *(_BYTE *)(v70 + 96);
      if (v71)
      {
        v71 = *(_BYTE *)v70;
        *(_OWORD *)&v147[16] = *(_OWORD *)(v70 + 33);
        v148 = *(_OWORD *)(v70 + 49);
        v149[0] = *(_OWORD *)(v70 + 65);
        *(_OWORD *)((char *)v149 + 15) = *(_OWORD *)(v70 + 80);
        v146 = *(_OWORD *)(v70 + 1);
        *(_OWORD *)v147 = *(_OWORD *)(v70 + 17);
        v72 = 1;
      }
      else
      {
        v72 = 0;
      }
      v77 = *(_DWORD *)(v70 + 104);
      v78 = *(_DWORD *)(v70 + 108);
      v79 = *(_DWORD *)(v70 + 112);
      v75 = *(_BYTE *)(v70 + 116);
      v80 = v79 + v78;
      if (v78 <= v41)
        v78 = v41;
      v81 = v77 == a2;
      if (v77 == a2)
        v69 = v79;
      else
        v69 = v80;
      if (v81)
        v41 = v78;
      v76 = *(unsigned __int8 *)(v23 + 192);
      if (v76 != v72)
      {
LABEL_123:
        if (v76)
        {
          *(_BYTE *)(v23 + 192) = 0;
        }
        else
        {
          *(_BYTE *)(v23 + 96) = v71;
          *(_OWORD *)(v23 + 129) = *(_OWORD *)&v147[16];
          *(_OWORD *)(v23 + 145) = v148;
          *(_OWORD *)(v23 + 161) = v149[0];
          *(_OWORD *)(v23 + 176) = *(_OWORD *)((char *)v149 + 15);
          *(_OWORD *)(v23 + 97) = v146;
          *(_OWORD *)(v23 + 113) = *(_OWORD *)v147;
          *(_BYTE *)(v23 + 192) = 1;
        }
        goto LABEL_126;
      }
    }
    if (v76)
    {
      *(_BYTE *)(v23 + 96) = v71;
      *(_OWORD *)(v23 + 129) = *(_OWORD *)&v147[16];
      *(_OWORD *)(v23 + 145) = v148;
      *(_OWORD *)(v23 + 161) = v149[0];
      *(_OWORD *)(v23 + 176) = *(_OWORD *)((char *)v149 + 15);
      *(_OWORD *)(v23 + 97) = v146;
      *(_OWORD *)(v23 + 113) = *(_OWORD *)v147;
    }
LABEL_126:
    *(_DWORD *)(v23 + 200) = a2;
    *(_DWORD *)(v23 + 204) = v41;
    *(_DWORD *)(v23 + 208) = v69;
    *(_BYTE *)(v23 + 212) = v75;
    v17 = 1;
    if (v64 >= v140)
      goto LABEL_16;
LABEL_127:
    if (v69 + v41 <= 0 && v36 < v22)
    {
      v87 = (uint64_t *)v16[1];
      v141[0] = *(uint64_t **)v16;
      v141[1] = v87;
      if (v87)
        (*(void (**)(uint64_t *))(*v87 + 24))(v87);
      sub_223F858E4(a1 + 16, v141);
      if (v87)
        (*(void (**)(uint64_t *))(*v87 + 40))(v87);
      goto LABEL_15;
    }
LABEL_16:
    v16 += 2;
  }
  while (v16 != v15);
  v15 = __p;
  if (!__p)
    goto LABEL_11;
LABEL_145:
  v89 = v143;
  if (v143 == v15)
  {
    v143 = v15;
    operator delete(v15);
    if ((v17 & 1) != 0)
      goto LABEL_147;
    return 0;
  }
  else
  {
    do
    {
      v90 = *(v89 - 1);
      if (v90)
        (*(void (**)(uint64_t))(*(_QWORD *)v90 + 40))(v90);
      v89 -= 2;
    }
    while (v89 != v15);
    v143 = v15;
    operator delete(__p);
    if ((v17 & 1) == 0)
      return 0;
LABEL_147:
    if (*(_DWORD *)(a1 + 144) == a2)
    {
      *(_DWORD *)(a1 + 148) &= ~(*(int *)(a1 + 148) >> 31);
    }
    else
    {
      v92 = *(_DWORD *)(a1 + 148) + *(_DWORD *)(a1 + 152);
      *(_DWORD *)(a1 + 148) = 0;
      *(_DWORD *)(a1 + 152) = v92;
      *(_DWORD *)(a1 + 144) = a2;
    }
    return 1;
  }
}

void sub_223F812B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
  sub_223F8C050((uint64_t)&a21);
  sub_223F8586C(&a12);
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
  _Unwind_Resume(a1);
}

void sub_223F81470(uint64_t a1, int a2, uint64_t a3, float32x2_t *a4, int8x16_t a5)
{
  float32x2_t **v9;
  float32x2_t *v10;
  float32x2_t *v11;
  float v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  unint64_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x2_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x4_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  char v44;
  _QWORD *v45;
  int v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  int v50;
  int8x16_t v51;
  int8x16_t v52;
  float32x2_t v53;
  float32x4_t v54;
  float32x2_t v55;
  uint64_t v56;
  float32x2_t *v57;
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t *v60;
  _QWORD v61[3];
  _QWORD *v62;
  uint64_t *v63;
  _QWORD v64[3];
  _QWORD *v65;
  float32x2_t *v66;
  _QWORD v67[3];
  _QWORD *v68;
  float32x4_t *v69;
  _QWORD v70[3];
  _QWORD *v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  a5.i32[0] = *(_DWORD *)(a3 + 16);
  v9 = *(float32x2_t ***)(a3 + 40);
  v10 = *v9;
  v11 = v9[1];
  if (*v9 != v11)
  {
    while (!v10[28].i8[0])
    {
      v10 += 29;
      if (v10 == v11)
        goto LABEL_68;
    }
  }
  if (v10 != v11)
  {
    v12 = *(float *)a5.i32 * *(float *)a5.i32;
LABEL_7:
    v13 = v10[3];
    if (*(_QWORD *)&v13 && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v13 + 48))(v13)
      || (v14 = v10[5], *(_QWORD *)&v14) && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v14 + 48))(v14)
      || (v15 = v10[7], *(_QWORD *)&v15) && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v15 + 48))(v15)
      || (v16 = v10[9], *(_QWORD *)&v16) && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v16 + 48))(v16))
    {
      while (1)
      {
        v10 += 29;
        if (v10 == v11)
          goto LABEL_68;
        if (v10[28].i8[0])
        {
          if (v10 != v11)
            goto LABEL_7;
          goto LABEL_68;
        }
      }
    }
    if (v10 == v11)
      goto LABEL_68;
LABEL_20:
    if (!v10[27].i8[0])
      sub_22324A974();
    v17 = (unint64_t)&v10[12];
    v18 = v10[11];
    *(float32x2_t *)v19.f32 = vmul_f32(vadd_f32(v10[10], v18), (float32x2_t)0x3F0000003F000000);
    *(float32x2_t *)v20.f32 = vsub_f32(*(float32x2_t *)v19.f32, v18);
    v53 = vadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v20.f32);
    v21 = vsub_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v20.f32);
    v19.i64[1] = v19.i64[0];
    v20.i64[1] = v20.i64[0];
    v22 = vsubq_f32(v19, v20);
    v23 = vaddq_f32(v19, v20);
    v23.i32[0] = v22.i32[0];
    v23.i32[3] = v22.i32[3];
    v54 = v23;
    v55 = v21;
    v57 = &v53;
    v58[0] = &off_24EC64680;
    v58[1] = a4;
    v59 = v58;
    v60 = &v56;
    v61[0] = &off_24EC64680;
    v61[1] = a4;
    v62 = v61;
    v63 = &v56;
    v71 = v70;
    v70[0] = &off_24EC64680;
    v70[1] = a4;
    *(float32x2_t *)v24.i8 = vadd_f32(vmla_lane_f32(vmul_n_f32(*a4, v53.f32[0]), a4[1], v53, 1), a4[2]);
    v66 = &v53;
    v67[0] = &off_24EC64680;
    v67[1] = a4;
    v68 = v67;
    v69 = &v54;
    v64[0] = &off_24EC64680;
    v64[1] = a4;
    v65 = v64;
    v24.i64[1] = v24.i64[0];
    do
    {
      v51 = v24;
      if (!v68)
        sub_223198474();
      (*(void (**)(uint64_t *__return_ptr))(*v68 + 48))(&v56);
      v25.i64[0] = v56;
      v26.i64[0] = v56;
      v26.i64[1] = v56;
      v27.i64[0] = v51.i64[0];
      v27.i64[1] = v56;
      v25.i64[1] = vextq_s8(v51, v51, 8uLL).u64[0];
      a5 = (int8x16_t)vcgtq_f32(v27, v25);
      v24 = vbslq_s8(a5, v26, v51);
      ++v66;
    }
    while (v66 != (float32x2_t *)v63);
    v52 = v24;
    v28 = v65;
    if (v65 == v64)
    {
      v28 = v64;
      v29 = 4;
    }
    else
    {
      if (!v65)
        goto LABEL_29;
      v29 = 5;
    }
    (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_29:
    v30 = v68;
    if (v68 == v67)
    {
      v30 = v67;
      v31 = 4;
    }
    else
    {
      if (!v68)
        goto LABEL_34;
      v31 = 5;
    }
    (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_34:
    v32 = v71;
    if (v71 == v70)
    {
      v32 = v70;
      v33 = 4;
    }
    else
    {
      if (!v71)
        goto LABEL_39;
      v33 = 5;
    }
    (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_39:
    v34 = v62;
    if (v62 == v61)
    {
      v34 = v61;
      v35 = 4;
    }
    else
    {
      if (!v62)
        goto LABEL_44;
      v35 = 5;
    }
    (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_44:
    v36 = v59;
    if (v59 == v58)
    {
      v36 = v58;
      v37 = 4;
    }
    else
    {
      if (!v59)
      {
LABEL_49:
        *(float *)a5.i32 = (float)(v10[25].i32[1] + v10[26].i32[0])
                         / (float)((float)((float)(v10[11].f32[0] - v10[10].f32[0])
                                         * (float)(v10[11].f32[1] - v10[10].f32[1]))
                                 / v12);
        v38 = llroundf(*(float *)a5.i32);
        if (v38)
        {
          v39 = v17 & 0xF8;
          if (!v10[24].i8[0])
            v39 = 0;
          sub_223F84690(a2, (_DWORD *)(a1 + 16), (float *)v52.i32, v38, (_OWORD *)(v39 | v17 & 0xFFFFFFFFFFFFFF00), v10[24].i8[0], *(double *)a5.i64);
        }
        while (1)
        {
          v10 += 29;
          if (v10 == v11)
            goto LABEL_68;
          if (v10[28].i8[0])
          {
LABEL_58:
            if (v10 == v11)
              goto LABEL_68;
            v40 = v10[3];
            if (*(_QWORD *)&v40 && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v40 + 48))(v40)
              || (v41 = v10[5], *(_QWORD *)&v41)
              && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v41 + 48))(v41)
              || (v42 = v10[7], *(_QWORD *)&v42)
              && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v42 + 48))(v42)
              || (v43 = v10[9], *(_QWORD *)&v43)
              && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v43 + 48))(v43))
            {
              while (1)
              {
                v10 += 29;
                if (v10 == v11)
                  break;
                if (v10[28].i8[0])
                  goto LABEL_58;
              }
            }
            else if (v10 != v11)
            {
              goto LABEL_20;
            }
            goto LABEL_68;
          }
        }
      }
      v37 = 5;
    }
    (*(void (**)(void))(*v36 + 8 * v37))();
    goto LABEL_49;
  }
LABEL_68:
  if (!*(_BYTE *)(a3 + 136))
    goto LABEL_79;
  if (*(_BYTE *)(a1 + 136))
  {
LABEL_77:
    if (*(unsigned __int8 *)(a1 + 96) != *(unsigned __int8 *)(a3 + 96))
      goto LABEL_79;
    goto LABEL_78;
  }
  v44 = *(_BYTE *)(a3 + 96);
  LODWORD(v57) = *(_DWORD *)(a1 + 4);
  v45 = operator new(0x58uLL);
  v45[1] = 0;
  v45[2] = 0;
  *v45 = &off_24EC64630;
  sub_223F7CBC8((uint64_t)(v45 + 3), (float *)&v57);
  v46 = *(unsigned __int8 *)(a1 + 136);
  *(_BYTE *)(a1 + 96) = v44;
  *(_QWORD *)(a1 + 104) = v45 + 3;
  if (v46)
  {
    v47 = *(std::__shared_weak_count **)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v45;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldaxr(p_shared_owners);
      while (__stlxr(v49 - 1, p_shared_owners));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    *(_QWORD *)(a1 + 120) = 20;
    *(_WORD *)(a1 + 128) = 2565;
    goto LABEL_77;
  }
  *(_QWORD *)(a1 + 112) = v45;
  a5.i64[0] = 20;
  *(_OWORD *)(a1 + 120) = xmmword_224691EE0;
  *(_BYTE *)(a1 + 136) = 1;
  if (*(unsigned __int8 *)(a1 + 96) == *(unsigned __int8 *)(a3 + 96))
LABEL_78:
    sub_223F7BE08((uint64_t *)(a1 + 104), (_DWORD **)(a3 + 104), a4, *(double *)a5.i64);
LABEL_79:
  v50 = *(_DWORD *)(a3 + 148) + *(_DWORD *)(a3 + 152);
  if (*(_DWORD *)(a1 + 144) == a2)
  {
    if (*(_DWORD *)(a1 + 148) > v50)
      v50 = *(_DWORD *)(a1 + 148);
  }
  else
  {
    *(_DWORD *)(a1 + 152) += *(_DWORD *)(a1 + 148);
    *(_DWORD *)(a1 + 144) = a2;
  }
  *(_DWORD *)(a1 + 148) = v50;
}

void sub_223F81A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

uint64_t sub_223F81B08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD v10[2];

  v4 = *(unsigned int *)(a1 + 8);
  v5 = (float *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  v10[0] = *(_QWORD *)(a1 + 24);
  v10[1] = v6;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = sub_223F81BEC(a2, v5, v10, v4);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  if ((_DWORD)v7)
  {
    if (*(_DWORD *)(a1 + 144) == (_DWORD)a2)
    {
      *(_DWORD *)(a1 + 148) &= ~(*(int *)(a1 + 148) >> 31);
    }
    else
    {
      v8 = *(_DWORD *)(a1 + 148) + *(_DWORD *)(a1 + 152);
      *(_DWORD *)(a1 + 148) = 0;
      *(_DWORD *)(a1 + 152) = v8;
      *(_DWORD *)(a1 + 144) = a2;
    }
  }
  return v7;
}

void sub_223F81BC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F81BEC(uint64_t a1, float *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  int v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;
  int v66;
  __int128 v67;
  __int128 v68;
  int v69;
  char v71;
  uint64_t v72;
  uint64_t v73;
  float v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  _BYTE *v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _OWORD *v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  _QWORD *v141;
  _QWORD v142[2];
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  _BYTE v165[32];
  unsigned __int8 v166;
  _QWORD v167[5];

  v167[2] = *MEMORY[0x24BDAC8D0];
  v5 = a3[1];
  if (!v5 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5))
    return 0;
  v9 = (_QWORD *)(**(_QWORD **)(*a3 + 8) + 232 * *(_QWORD *)*a3);
  v10 = v9[3];
  if (v10 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10)
    || (v11 = v9[5]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11)
    || (v12 = v9[7]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12)
    || (v13 = v9[9]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13))
  {
    v14 = **(_QWORD **)(*a3 + 8) + 232 * *(_QWORD *)*a3;
    v16 = *(_QWORD *)(v14 + 16);
    v15 = (_QWORD *)(v14 + 16);
    v153 = v16;
    v17 = v15[1];
    v154 = v17;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
    v155 = v15[2];
    v18 = v15[3];
    v156 = v18;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
    v157 = v15[4];
    v19 = v15[5];
    v158 = v19;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    v159 = v15[6];
    v20 = v15[7];
    v160 = v20;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
    v21 = v154;
    v151 = v153;
    v152 = v154;
    if (v154)
      (*(void (**)(uint64_t))(*(_QWORD *)v154 + 24))(v154);
    v22 = sub_223F81BEC(a1, a2, &v151, a4);
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
    v23 = v156;
    v151 = v155;
    v152 = v156;
    if (v156)
      (*(void (**)(uint64_t))(*(_QWORD *)v156 + 24))(v156);
    v24 = sub_223F81BEC(a1, a2, &v151, a4);
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
    v25 = v158;
    v151 = v157;
    v152 = v158;
    if (v158)
      (*(void (**)(uint64_t))(*(_QWORD *)v158 + 24))(v158);
    v26 = sub_223F81BEC(a1, a2, &v151, a4);
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
    v27 = v160;
    v151 = v159;
    v152 = v160;
    if (v160)
      (*(void (**)(uint64_t))(*(_QWORD *)v160 + 24))(v160);
    v28 = sub_223F81BEC(a1, a2, &v151, a4);
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
    v29 = v22 | v24 | v26 | v28;
    v30 = **(_QWORD **)(*a3 + 8) + 232 * *(_QWORD *)*a3;
    v31 = roundf((float)((float)(*(float *)(v30 + 88) - *(float *)(v30 + 80)) + (float)(*a2 * 0.25)) / *a2);
    v32 = (int)(float)((float)(v31 * v31) * (float)(int)a4);
    if (v32 >= 0)
      v33 = v32;
    else
      v33 = v32 + 3;
    if (v154)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v154 + 48))(v154))
      {
        v34 = (_QWORD *)(**(_QWORD **)(v153 + 8) + 232 * *(_QWORD *)v153);
        v35 = v34[3];
        if (!v35 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 48))(v35))
        {
          v36 = v34[5];
          if (!v36 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 48))(v36))
          {
            v37 = v34[7];
            if (!v37 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 48))(v37))
            {
              v38 = v34[9];
              if (!v38 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38))
              {
                v39 = v33 >> 2;
                v40 = *(_DWORD *)(**(_QWORD **)(v153 + 8) + 232 * *(_QWORD *)v153 + 204)
                    + *(_DWORD *)(**(_QWORD **)(v153 + 8) + 232 * *(_QWORD *)v153 + 208);
                if (v40 >= v39)
                {
                  if (v156)
                  {
                    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v156 + 48))(v156))
                    {
                      v41 = (_QWORD *)(**(_QWORD **)(v155 + 8) + 232 * *(_QWORD *)v155);
                      v42 = v41[3];
                      if (!v42 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 48))(v42))
                      {
                        v43 = v41[5];
                        if (!v43 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 48))(v43))
                        {
                          v44 = v41[7];
                          if (!v44 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 48))(v44))
                          {
                            v45 = v41[9];
                            if (!v45 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 48))(v45))
                            {
                              v46 = *(_DWORD *)(**(_QWORD **)(v155 + 8) + 232 * *(_QWORD *)v155 + 204)
                                  + *(_DWORD *)(**(_QWORD **)(v155 + 8) + 232 * *(_QWORD *)v155 + 208);
                              if (v46 >= v39)
                              {
                                if (v158)
                                {
                                  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v158 + 48))(v158))
                                  {
                                    v47 = (_QWORD *)(**(_QWORD **)(v157 + 8) + 232 * *(_QWORD *)v157);
                                    v48 = v47[3];
                                    if (!v48 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 48))(v48))
                                    {
                                      v49 = v47[5];
                                      if (!v49 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 48))(v49))
                                      {
                                        v50 = v47[7];
                                        if (!v50 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 48))(v50))
                                        {
                                          v51 = v47[9];
                                          if (!v51
                                            || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 48))(v51))
                                          {
                                            v52 = *(_DWORD *)(**(_QWORD **)(v157 + 8) + 232 * *(_QWORD *)v157 + 204)
                                                + *(_DWORD *)(**(_QWORD **)(v157 + 8) + 232 * *(_QWORD *)v157 + 208);
                                            if (v52 >= v39)
                                            {
                                              if (!v160)
                                              {
LABEL_73:
                                                if (v158)
                                                  (*(void (**)(uint64_t))(*(_QWORD *)v158 + 40))(v158);
                                                if (v156)
                                                  (*(void (**)(uint64_t))(*(_QWORD *)v156 + 40))(v156);
                                                if (v154)
                                                  (*(void (**)(uint64_t))(*(_QWORD *)v154 + 40))(v154);
                                                return v29;
                                              }
                                              if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v160 + 48))(v160))
                                              {
                                                v141 = (_QWORD *)(**(_QWORD **)(v159 + 8) + 232 * *(_QWORD *)v159);
                                                v118 = v141[3];
                                                if (!v118
                                                  || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v118 + 48))(v118))
                                                {
                                                  v119 = v141[5];
                                                  if (!v119
                                                    || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v119 + 48))(v119))
                                                  {
                                                    v120 = v141[7];
                                                    if (!v120
                                                      || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v120 + 48))(v120))
                                                    {
                                                      v121 = v141[9];
                                                      if (!v121
                                                        || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v121 + 48))(v121))
                                                      {
                                                        v122 = *(_DWORD *)(**(_QWORD **)(v159 + 8)
                                                                         + 232 * *(_QWORD *)v159
                                                                         + 204)
                                                             + *(_DWORD *)(**(_QWORD **)(v159 + 8)
                                                                         + 232 * *(_QWORD *)v159
                                                                         + 208);
                                                        if (v122 >= v39 && v46 + v40 + v52 + v122 >= v32)
                                                        {
                                                          v143 = *(_QWORD *)(v30 + 16);
                                                          v124 = *(_QWORD *)(v30 + 24);
                                                          v144 = v124;
                                                          if (v124)
                                                            (*(void (**)(uint64_t))(*(_QWORD *)v124 + 24))(v124);
                                                          v145 = *(_QWORD *)(v30 + 32);
                                                          v125 = *(_QWORD *)(v30 + 40);
                                                          v146 = v125;
                                                          if (v125)
                                                            (*(void (**)(uint64_t))(*(_QWORD *)v125 + 24))(v125);
                                                          v147 = *(_QWORD *)(v30 + 48);
                                                          v126 = *(_QWORD *)(v30 + 56);
                                                          v148 = v126;
                                                          if (v126)
                                                            (*(void (**)(uint64_t))(*(_QWORD *)v126 + 24))(v126);
                                                          v149 = *(_QWORD *)(v30 + 64);
                                                          v127 = *(_QWORD *)(v30 + 72);
                                                          v150 = v127;
                                                          if (v127)
                                                            (*(void (**)(uint64_t))(*(_QWORD *)v127 + 24))(v127);
                                                          sub_223F83E98((uint64_t)&v161, a1, (uint64_t)&v143);
                                                          v128 = (_OWORD *)(v30 + 96);
                                                          if (*(_BYTE *)(v30 + 216))
                                                          {
                                                            if (*(unsigned __int8 *)(v30 + 192) == v166)
                                                            {
                                                              if (*(_BYTE *)(v30 + 192))
                                                              {
                                                                v129 = v164;
                                                                *(_OWORD *)(v30 + 128) = v163;
                                                                *(_OWORD *)(v30 + 144) = v129;
                                                                v130 = *(_OWORD *)&v165[16];
                                                                *(_OWORD *)(v30 + 160) = *(_OWORD *)v165;
                                                                *(_OWORD *)(v30 + 176) = v130;
                                                                v131 = v162;
                                                                *v128 = v161;
                                                                *(_OWORD *)(v30 + 112) = v131;
                                                              }
                                                            }
                                                            else if (*(_BYTE *)(v30 + 192))
                                                            {
                                                              *(_BYTE *)(v30 + 192) = 0;
                                                            }
                                                            else
                                                            {
                                                              v135 = v164;
                                                              *(_OWORD *)(v30 + 128) = v163;
                                                              *(_OWORD *)(v30 + 144) = v135;
                                                              v136 = *(_OWORD *)&v165[16];
                                                              *(_OWORD *)(v30 + 160) = *(_OWORD *)v165;
                                                              *(_OWORD *)(v30 + 176) = v136;
                                                              v137 = v162;
                                                              *v128 = v161;
                                                              *(_OWORD *)(v30 + 112) = v137;
                                                              *(_BYTE *)(v30 + 192) = 1;
                                                            }
                                                            *(_QWORD *)(v30 + 200) = v167[0];
                                                            *(_QWORD *)(v30 + 205) = *(_QWORD *)((char *)v167 + 5);
                                                          }
                                                          else
                                                          {
                                                            *(_BYTE *)(v30 + 96) = 0;
                                                            *(_BYTE *)(v30 + 192) = 0;
                                                            if (v166)
                                                            {
                                                              v132 = v164;
                                                              *(_OWORD *)(v30 + 128) = v163;
                                                              *(_OWORD *)(v30 + 144) = v132;
                                                              v133 = *(_OWORD *)&v165[16];
                                                              *(_OWORD *)(v30 + 160) = *(_OWORD *)v165;
                                                              *(_OWORD *)(v30 + 176) = v133;
                                                              v134 = v162;
                                                              *v128 = v161;
                                                              *(_OWORD *)(v30 + 112) = v134;
                                                              *(_BYTE *)(v30 + 192) = 1;
                                                            }
                                                            *(_QWORD *)(v30 + 200) = v167[0];
                                                            *(_QWORD *)(v30 + 205) = *(_QWORD *)((char *)v167 + 5);
                                                            *(_BYTE *)(v30 + 216) = 1;
                                                          }
                                                          if (v150)
                                                            (*(void (**)(uint64_t))(*(_QWORD *)v150 + 40))(v150);
                                                          if (v148)
                                                            (*(void (**)(uint64_t))(*(_QWORD *)v148 + 40))(v148);
                                                          if (v146)
                                                            (*(void (**)(uint64_t))(*(_QWORD *)v146 + 40))(v146);
                                                          if (v144)
                                                            (*(void (**)(uint64_t))(*(_QWORD *)v144 + 40))(v144);
                                                          v138 = *a3;
                                                          v139 = a3[1];
                                                          v142[0] = v138;
                                                          v142[1] = v139;
                                                          if (v139)
                                                            (*(void (**)(uint64_t))(*(_QWORD *)v139 + 24))(v139);
                                                          sub_223F8A3E8((uint64_t)a2, v142);
                                                          if (v139)
                                                            (*(void (**)(uint64_t))(*(_QWORD *)v139 + 40))(v139);
                                                          v29 = 1;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (v160)
      (*(void (**)(uint64_t))(*(_QWORD *)v160 + 40))(v160);
    goto LABEL_73;
  }
  v53 = a3[1];
  if (!v53)
    return 0;
  v54 = *a3;
  (*(void (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53);
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 48))(v53))
    goto LABEL_95;
  v55 = (_QWORD *)(**(_QWORD **)(v54 + 8) + 232 * *(_QWORD *)v54);
  v56 = v55[3];
  if (v56)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 48))(v56))
      goto LABEL_95;
  }
  v57 = v55[5];
  if (v57)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 48))(v57))
      goto LABEL_95;
  }
  if ((v58 = v55[7]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 48))(v58)
    || (v59 = v55[9]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 48))(v59)
    || (v60 = **(_QWORD **)(v54 + 8) + 232 * *(_QWORD *)v54,
        v61 = *(float *)(v60 + 88) - *(float *)(v60 + 80),
        v62 = *a2,
        *a2 * 1.25 > v61)
    || (v63 = (float)(int)a4,
        v64 = roundf((float)(v61 + (float)(v62 * 0.25)) / v62),
        *(_DWORD *)(v60 + 204) + *(_DWORD *)(v60 + 208) >= (int)(float)((float)(v64 * v64) * (float)(int)a4)))
  {
LABEL_95:
    v29 = 0;
  }
  else
  {
    v153 = v54;
    v154 = v53;
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53);
    sub_223F8A4F0((uint64_t)a2, &v153);
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 40))(v53);
    v65 = **(_QWORD **)(v54 + 8) + 232 * *(_QWORD *)v54;
    v66 = *(unsigned __int8 *)(v65 + 192);
    if (*(_BYTE *)(v65 + 192))
    {
      v140 = *(_BYTE *)(v65 + 96);
      v67 = *(_OWORD *)(v65 + 145);
      v163 = *(_OWORD *)(v65 + 129);
      v164 = v67;
      *(_OWORD *)v165 = *(_OWORD *)(v65 + 161);
      *(_OWORD *)&v165[15] = *(_OWORD *)(v65 + 176);
      v68 = *(_OWORD *)(v65 + 113);
      v69 = 1;
      v161 = *(_OWORD *)(v65 + 97);
      v162 = v68;
    }
    else
    {
      v140 = 0;
      v69 = 0;
    }
    v71 = *(_BYTE *)(v65 + 212);
    v73 = *(_QWORD *)(v65 + 16);
    v72 = *(_QWORD *)(v65 + 24);
    if (v72)
      (*(void (**)(_QWORD))(*(_QWORD *)v72 + 24))(*(_QWORD *)(v65 + 24));
    v74 = roundf((float)((float)(v62 * 0.25) + (float)(v61 * 0.5)) / v62);
    v75 = (int)(float)((float)(v74 * v74) * v63);
    v76 = **(_QWORD **)(v73 + 8) + 232 * *(_QWORD *)v73;
    v77 = v76 + 96;
    if (*(_BYTE *)(v76 + 216))
    {
      v78 = *(unsigned __int8 *)(v76 + 192);
      if (v78 == v69)
      {
        if (v78)
        {
          *(_BYTE *)v77 = v140;
          v79 = v164;
          *(_OWORD *)(v77 + 33) = v163;
          *(_OWORD *)(v77 + 49) = v79;
          *(_OWORD *)(v77 + 65) = *(_OWORD *)v165;
          *(_OWORD *)(v77 + 80) = *(_OWORD *)&v165[15];
          v80 = v162;
          *(_OWORD *)(v77 + 1) = v161;
          *(_OWORD *)(v77 + 17) = v80;
        }
      }
      else if (v78)
      {
        *(_BYTE *)(v77 + 96) = 0;
      }
      else
      {
        v83 = v164;
        *(_OWORD *)(v77 + 33) = v163;
        *(_OWORD *)(v77 + 49) = v83;
        *(_OWORD *)(v77 + 65) = *(_OWORD *)v165;
        *(_OWORD *)(v77 + 80) = *(_OWORD *)&v165[15];
        v84 = v162;
        *(_OWORD *)(v77 + 1) = v161;
        *(_BYTE *)v77 = v140;
        *(_OWORD *)(v77 + 17) = v84;
        *(_BYTE *)(v77 + 96) = 1;
      }
      *(_DWORD *)(v77 + 104) = a1;
      *(_DWORD *)(v77 + 108) = 0;
      *(_DWORD *)(v77 + 112) = v75;
      *(_BYTE *)(v77 + 116) = v71;
    }
    else
    {
      *(_BYTE *)v77 = 0;
      *(_BYTE *)(v76 + 192) = 0;
      if (v66)
      {
        v81 = v164;
        *(_OWORD *)(v76 + 129) = v163;
        *(_OWORD *)(v76 + 145) = v81;
        *(_OWORD *)(v76 + 161) = *(_OWORD *)v165;
        *(_OWORD *)(v76 + 176) = *(_OWORD *)&v165[15];
        v82 = v162;
        *(_OWORD *)(v76 + 97) = v161;
        *(_BYTE *)v77 = v140;
        *(_OWORD *)(v76 + 113) = v82;
        *(_BYTE *)(v76 + 192) = 1;
      }
      *(_DWORD *)(v76 + 200) = a1;
      *(_DWORD *)(v76 + 204) = 0;
      *(_DWORD *)(v76 + 208) = v75;
      *(_BYTE *)(v76 + 212) = v71;
      *(_BYTE *)(v76 + 216) = 1;
    }
    if (v72)
      (*(void (**)(uint64_t))(*(_QWORD *)v72 + 40))(v72);
    v86 = *(_QWORD *)(v65 + 32);
    v85 = *(_QWORD *)(v65 + 40);
    if (v85)
      (*(void (**)(_QWORD))(*(_QWORD *)v85 + 24))(*(_QWORD *)(v65 + 40));
    v87 = **(_QWORD **)(v86 + 8) + 232 * *(_QWORD *)v86;
    v88 = (_BYTE *)(v87 + 96);
    if (*(_BYTE *)(v87 + 216))
    {
      if (*(unsigned __int8 *)(v87 + 192) == v69)
      {
        if (*(_BYTE *)(v87 + 192))
        {
          *v88 = v140;
          v89 = v164;
          *(_OWORD *)(v87 + 129) = v163;
          *(_OWORD *)(v87 + 145) = v89;
          *(_OWORD *)(v87 + 161) = *(_OWORD *)v165;
          *(_OWORD *)(v87 + 176) = *(_OWORD *)&v165[15];
          v90 = v162;
          *(_OWORD *)(v87 + 97) = v161;
          *(_OWORD *)(v87 + 113) = v90;
        }
      }
      else if (*(_BYTE *)(v87 + 192))
      {
        *(_BYTE *)(v87 + 192) = 0;
      }
      else
      {
        v93 = v164;
        *(_OWORD *)(v87 + 129) = v163;
        *(_OWORD *)(v87 + 145) = v93;
        *(_OWORD *)(v87 + 161) = *(_OWORD *)v165;
        *(_OWORD *)(v87 + 176) = *(_OWORD *)&v165[15];
        v94 = v162;
        *(_OWORD *)(v87 + 97) = v161;
        *v88 = v140;
        *(_OWORD *)(v87 + 113) = v94;
        *(_BYTE *)(v87 + 192) = 1;
      }
      *(_DWORD *)(v87 + 200) = a1;
      *(_DWORD *)(v87 + 204) = 0;
      *(_DWORD *)(v87 + 208) = v75;
      *(_BYTE *)(v87 + 212) = v71;
    }
    else
    {
      *v88 = 0;
      *(_BYTE *)(v87 + 192) = 0;
      if (v66)
      {
        v91 = v164;
        *(_OWORD *)(v87 + 129) = v163;
        *(_OWORD *)(v87 + 145) = v91;
        *(_OWORD *)(v87 + 161) = *(_OWORD *)v165;
        *(_OWORD *)(v87 + 176) = *(_OWORD *)&v165[15];
        v92 = v162;
        *(_OWORD *)(v87 + 97) = v161;
        *v88 = v140;
        *(_OWORD *)(v87 + 113) = v92;
        *(_BYTE *)(v87 + 192) = 1;
      }
      *(_DWORD *)(v87 + 200) = a1;
      *(_DWORD *)(v87 + 204) = 0;
      *(_DWORD *)(v87 + 208) = v75;
      *(_BYTE *)(v87 + 212) = v71;
      *(_BYTE *)(v87 + 216) = 1;
    }
    if (v85)
      (*(void (**)(uint64_t))(*(_QWORD *)v85 + 40))(v85);
    v96 = *(_QWORD *)(v65 + 48);
    v95 = *(_QWORD *)(v65 + 56);
    if (v95)
      (*(void (**)(_QWORD))(*(_QWORD *)v95 + 24))(*(_QWORD *)(v65 + 56));
    v97 = **(_QWORD **)(v96 + 8) + 232 * *(_QWORD *)v96;
    v98 = (_BYTE *)(v97 + 96);
    if (*(_BYTE *)(v97 + 216))
    {
      if (*(unsigned __int8 *)(v97 + 192) == v69)
      {
        if (*(_BYTE *)(v97 + 192))
        {
          *v98 = v140;
          v99 = v164;
          *(_OWORD *)(v97 + 129) = v163;
          *(_OWORD *)(v97 + 145) = v99;
          *(_OWORD *)(v97 + 161) = *(_OWORD *)v165;
          *(_OWORD *)(v97 + 176) = *(_OWORD *)&v165[15];
          v100 = v162;
          *(_OWORD *)(v97 + 97) = v161;
          *(_OWORD *)(v97 + 113) = v100;
        }
      }
      else if (*(_BYTE *)(v97 + 192))
      {
        *(_BYTE *)(v97 + 192) = 0;
      }
      else
      {
        v103 = v164;
        *(_OWORD *)(v97 + 129) = v163;
        *(_OWORD *)(v97 + 145) = v103;
        *(_OWORD *)(v97 + 161) = *(_OWORD *)v165;
        *(_OWORD *)(v97 + 176) = *(_OWORD *)&v165[15];
        v104 = v162;
        *(_OWORD *)(v97 + 97) = v161;
        *v98 = v140;
        *(_OWORD *)(v97 + 113) = v104;
        *(_BYTE *)(v97 + 192) = 1;
      }
      *(_DWORD *)(v97 + 200) = a1;
      *(_DWORD *)(v97 + 204) = 0;
      *(_DWORD *)(v97 + 208) = v75;
      *(_BYTE *)(v97 + 212) = v71;
    }
    else
    {
      *v98 = 0;
      *(_BYTE *)(v97 + 192) = 0;
      if (v66)
      {
        v101 = v164;
        *(_OWORD *)(v97 + 129) = v163;
        *(_OWORD *)(v97 + 145) = v101;
        *(_OWORD *)(v97 + 161) = *(_OWORD *)v165;
        *(_OWORD *)(v97 + 176) = *(_OWORD *)&v165[15];
        v102 = v162;
        *(_OWORD *)(v97 + 97) = v161;
        *v98 = v140;
        *(_OWORD *)(v97 + 113) = v102;
        *(_BYTE *)(v97 + 192) = 1;
      }
      *(_DWORD *)(v97 + 200) = a1;
      *(_DWORD *)(v97 + 204) = 0;
      *(_DWORD *)(v97 + 208) = v75;
      *(_BYTE *)(v97 + 212) = v71;
      *(_BYTE *)(v97 + 216) = 1;
    }
    if (v95)
      (*(void (**)(uint64_t))(*(_QWORD *)v95 + 40))(v95);
    v106 = *(_QWORD *)(v65 + 64);
    v105 = *(_QWORD *)(v65 + 72);
    if (v105)
      (*(void (**)(_QWORD))(*(_QWORD *)v105 + 24))(*(_QWORD *)(v65 + 72));
    v107 = **(_QWORD **)(v106 + 8) + 232 * *(_QWORD *)v106;
    v108 = (_BYTE *)(v107 + 96);
    if (*(_BYTE *)(v107 + 216))
    {
      if (*(unsigned __int8 *)(v107 + 192) == v69)
      {
        if (*(_BYTE *)(v107 + 192))
        {
          *v108 = v140;
          v109 = v164;
          *(_OWORD *)(v107 + 129) = v163;
          *(_OWORD *)(v107 + 145) = v109;
          *(_OWORD *)(v107 + 161) = *(_OWORD *)v165;
          *(_OWORD *)(v107 + 176) = *(_OWORD *)&v165[15];
          v110 = v162;
          *(_OWORD *)(v107 + 97) = v161;
          *(_OWORD *)(v107 + 113) = v110;
        }
      }
      else if (*(_BYTE *)(v107 + 192))
      {
        *(_BYTE *)(v107 + 192) = 0;
      }
      else
      {
        v113 = v164;
        *(_OWORD *)(v107 + 129) = v163;
        *(_OWORD *)(v107 + 145) = v113;
        *(_OWORD *)(v107 + 161) = *(_OWORD *)v165;
        *(_OWORD *)(v107 + 176) = *(_OWORD *)&v165[15];
        v114 = v162;
        *(_OWORD *)(v107 + 97) = v161;
        *v108 = v140;
        *(_OWORD *)(v107 + 113) = v114;
        *(_BYTE *)(v107 + 192) = 1;
      }
      *(_DWORD *)(v107 + 200) = a1;
      *(_DWORD *)(v107 + 204) = 0;
      *(_DWORD *)(v107 + 208) = v75;
      *(_BYTE *)(v107 + 212) = v71;
    }
    else
    {
      *v108 = 0;
      *(_BYTE *)(v107 + 192) = 0;
      if (v66)
      {
        v111 = v164;
        *(_OWORD *)(v107 + 129) = v163;
        *(_OWORD *)(v107 + 145) = v111;
        *(_OWORD *)(v107 + 161) = *(_OWORD *)v165;
        *(_OWORD *)(v107 + 176) = *(_OWORD *)&v165[15];
        v112 = v162;
        *(_OWORD *)(v107 + 97) = v161;
        *v108 = v140;
        *(_OWORD *)(v107 + 113) = v112;
        *(_BYTE *)(v107 + 192) = 1;
      }
      *(_DWORD *)(v107 + 200) = a1;
      *(_DWORD *)(v107 + 204) = 0;
      *(_DWORD *)(v107 + 208) = v75;
      *(_BYTE *)(v107 + 212) = v71;
      *(_BYTE *)(v107 + 216) = 1;
    }
    if (v105)
      (*(void (**)(uint64_t))(*(_QWORD *)v105 + 40))(v105);
    v115 = **(_QWORD **)(v54 + 8) + 232 * *(_QWORD *)v54;
    v117 = *(unsigned __int8 *)(v115 + 216);
    v116 = (_BYTE *)(v115 + 216);
    if (v117)
      *v116 = 0;
    v29 = 1;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v53 + 40))(v53);
  return v29;
}

void sub_223F82B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

void sub_223F82CF8(float64x2_t *a1, unint64_t a2, _OWORD *a3, uint64_t a4, double *a5)
{
  uint64_t v7;
  char *v8;
  char *v9;
  _OWORD *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  float64x2_t v29;
  unint64_t v30;
  uint64_t v31;
  float64x2_t v32;
  char *v33;
  unint64_t v34;
  float64x2_t v35;
  unint64_t v36;
  float64x2_t v37;
  unint64_t v38;
  float64x2_t v39;
  unint64_t v40;
  float64x2_t v41;
  unint64_t v42;
  double v43;
  uint64_t v44;
  char *v45;
  double v46;
  int8x16_t v47;
  float64x2_t v48;
  double v49;
  int8x16_t v50;
  double v51;
  int8x16_t v52;
  double v53;
  int8x16_t v54;
  double v55;
  int8x16_t v56;
  double v57;
  int8x16_t v58;
  double v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t *v68;

  if (!a2)
  {
    v11 = 0;
    v47.i64[0] = 0;
    v49 = 0.0;
    v50.i64[0] = 0;
    v51 = 0.0;
    v52.i64[0] = 0;
    v53 = 0.0;
    v54.i64[0] = 0;
    v55 = 0.0;
    v56.i64[0] = 0;
    v57 = 0.0;
    v58.i64[0] = 0;
    v59 = 0.0;
    goto LABEL_34;
  }
  v68 = a1;
  if (a2 > 0x2AAAAAAAAAAAAAALL)
    sub_22316E078();
  v7 = 6 * a2;
  v8 = (char *)operator new(96 * a2);
  v9 = &v8[v7 * 16];
  v10 = &a3[v7];
  v11 = v8;
  do
  {
    while (v8 < v9)
    {
      v12 = a3[1];
      *(_OWORD *)v8 = *a3;
      *((_OWORD *)v8 + 1) = v12;
      v13 = a3[2];
      v14 = a3[3];
      v15 = a3[5];
      *((_OWORD *)v8 + 4) = a3[4];
      *((_OWORD *)v8 + 5) = v15;
      *((_OWORD *)v8 + 2) = v13;
      *((_OWORD *)v8 + 3) = v14;
      v8 += 96;
      a3 += 6;
      if (a3 == v10)
        goto LABEL_23;
    }
    v16 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v11) >> 5) + 1;
    if (v16 > 0x2AAAAAAAAAAAAAALL)
      sub_22316E078();
    if (0x5555555555555556 * ((v9 - v11) >> 5) > v16)
      v16 = 0x5555555555555556 * ((v9 - v11) >> 5);
    if (0xAAAAAAAAAAAAAAABLL * ((v9 - v11) >> 5) >= 0x155555555555555)
      v17 = 0x2AAAAAAAAAAAAAALL;
    else
      v17 = v16;
    if (v17)
    {
      if (v17 > 0x2AAAAAAAAAAAAAALL)
        sub_223174E94();
      v18 = (char *)operator new(96 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = &v18[32 * ((v8 - v11) >> 5)];
    v9 = &v18[96 * v17];
    v20 = a3[1];
    *(_OWORD *)v19 = *a3;
    *((_OWORD *)v19 + 1) = v20;
    v21 = a3[2];
    v22 = a3[3];
    v23 = a3[5];
    *((_OWORD *)v19 + 4) = a3[4];
    *((_OWORD *)v19 + 5) = v23;
    *((_OWORD *)v19 + 2) = v21;
    *((_OWORD *)v19 + 3) = v22;
    v24 = v19 + 96;
    if (v8 == v11)
    {
      v11 = v8;
LABEL_21:
      operator delete(v11);
      goto LABEL_22;
    }
    do
    {
      v25 = *((_OWORD *)v8 - 5);
      *((_OWORD *)v19 - 6) = *((_OWORD *)v8 - 6);
      *((_OWORD *)v19 - 5) = v25;
      v26 = *((_OWORD *)v8 - 4);
      v27 = *((_OWORD *)v8 - 3);
      v28 = *((_OWORD *)v8 - 1);
      *((_OWORD *)v19 - 2) = *((_OWORD *)v8 - 2);
      *((_OWORD *)v19 - 1) = v28;
      *((_OWORD *)v19 - 4) = v26;
      *((_OWORD *)v19 - 3) = v27;
      v19 -= 96;
      v8 -= 96;
    }
    while (v8 != v11);
    if (v11)
      goto LABEL_21;
LABEL_22:
    v11 = v19;
    v8 = v24;
    a3 += 6;
  }
  while (a3 != v10);
LABEL_23:
  if (v11 == v8)
  {
    v47.i64[0] = 0;
  }
  else
  {
    v29.f64[0] = 0.0;
    v30 = 0;
    v31 = 8 * a4 - 8;
    v32.f64[0] = 0.0;
    v33 = v11 + 96;
    v34 = 0;
    v35.f64[0] = 0.0;
    v36 = 0;
    v37.f64[0] = 0.0;
    v38 = 0;
    v39.f64[0] = 0.0;
    v40 = 0;
    v41.f64[0] = 0.0;
    v42 = 0;
    v43 = 0.0;
    do
    {
      do
      {
        v44 = v31;
        v45 = v33;
        v46 = *a5++;
        *(_QWORD *)&v29.f64[1] = v30;
        v29 = vaddq_f64(v29, vmulq_n_f64(*((float64x2_t *)v33 - 6), v46));
        v30 = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
        *(_QWORD *)&v32.f64[1] = v34;
        v32 = vaddq_f64(v32, vmulq_n_f64(*((float64x2_t *)v33 - 5), v46));
        v34 = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
        *(_QWORD *)&v35.f64[1] = v36;
        v35 = vaddq_f64(v35, vmulq_n_f64(*((float64x2_t *)v33 - 4), v46));
        v36 = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
        *(_QWORD *)&v37.f64[1] = v38;
        v37 = vaddq_f64(v37, vmulq_n_f64(*((float64x2_t *)v33 - 3), v46));
        v38 = vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
        *(_QWORD *)&v39.f64[1] = v40;
        v39 = vaddq_f64(v39, vmulq_n_f64(*((float64x2_t *)v33 - 2), v46));
        v40 = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
        *(_QWORD *)&v41.f64[1] = v42;
        v41 = vaddq_f64(v41, vmulq_n_f64(*((float64x2_t *)v33 - 1), v46));
        v42 = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
        v43 = v43 + v46;
        v31 -= 8;
        v33 += 96;
      }
      while (v45 != v8);
    }
    while (v44);
    v47.i64[0] = 0;
    if (v43 != 0.0 && fabs(v43) > 0.00000001)
    {
      v48 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v43, 0);
      *(_QWORD *)&v29.f64[1] = v30;
      v47 = (int8x16_t)vdivq_f64(v29, v48);
      *(_QWORD *)&v49 = vextq_s8(v47, v47, 8uLL).u64[0];
      *(_QWORD *)&v32.f64[1] = v34;
      v50 = (int8x16_t)vdivq_f64(v32, v48);
      *(_QWORD *)&v51 = vextq_s8(v50, v50, 8uLL).u64[0];
      *(_QWORD *)&v35.f64[1] = v36;
      v52 = (int8x16_t)vdivq_f64(v35, v48);
      *(_QWORD *)&v53 = vextq_s8(v52, v52, 8uLL).u64[0];
      *(_QWORD *)&v37.f64[1] = v38;
      v54 = (int8x16_t)vdivq_f64(v37, v48);
      *(_QWORD *)&v55 = vextq_s8(v54, v54, 8uLL).u64[0];
      *(_QWORD *)&v39.f64[1] = v40;
      v56 = (int8x16_t)vdivq_f64(v39, v48);
      *(_QWORD *)&v57 = vextq_s8(v56, v56, 8uLL).u64[0];
      *(_QWORD *)&v41.f64[1] = v42;
      v58 = (int8x16_t)vdivq_f64(v41, v48);
      *(_QWORD *)&v59 = vextq_s8(v58, v58, 8uLL).u64[0];
      goto LABEL_33;
    }
  }
  v49 = 0.0;
  v50.i64[0] = 0;
  v51 = 0.0;
  v52.i64[0] = 0;
  v53 = 0.0;
  v54.i64[0] = 0;
  v55 = 0.0;
  v56.i64[0] = 0;
  v57 = 0.0;
  v58.i64[0] = 0;
  v59 = 0.0;
LABEL_33:
  a1 = v68;
LABEL_34:
  *(_QWORD *)&v60.f64[0] = v58.i64[0];
  v60.f64[1] = v59;
  *(_QWORD *)&v61.f64[0] = v56.i64[0];
  v61.f64[1] = v57;
  *(_QWORD *)&v62.f64[0] = v54.i64[0];
  v62.f64[1] = v55;
  *(_QWORD *)&v63.f64[0] = v52.i64[0];
  v63.f64[1] = v53;
  *(_QWORD *)&v64.f64[0] = v50.i64[0];
  v64.f64[1] = v51;
  *(_QWORD *)&v65.f64[0] = v47.i64[0];
  v65.f64[1] = v49;
  v66 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v59+ *(double *)v58.i64+ v57+ *(double *)v56.i64+ v55+ *(double *)v54.i64+ v53+ *(double *)v52.i64+ v51+ *(double *)v50.i64+ *(double *)v47.i64+ v49), 0);
  a1[4] = vdivq_f64(v61, v66);
  a1[5] = vdivq_f64(v60, v66);
  a1[2] = vdivq_f64(v63, v66);
  a1[3] = vdivq_f64(v62, v66);
  *a1 = vdivq_f64(v65, v66);
  a1[1] = vdivq_f64(v64, v66);
  if (v11)
    operator delete(v11);
}

void sub_223F83118(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

float sub_223F83134(uint64_t a1, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  float *v6;
  float *v7;
  float v8;
  uint64_t v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float *v15;
  BOOL v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  float *v26;
  _BYTE v27[24];
  _BYTE *v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[24];
  _BYTE *v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[24];
  _BYTE *v36;
  __int128 v37;
  float *v38;
  _BYTE v39[24];
  _BYTE *v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  sub_223F8A798((uint64_t)&v34, **(_QWORD **)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2);
  v30 = v34;
  v2 = v31;
  v3 = (uint64_t)v36;
  if (!v36)
    goto LABEL_4;
  if (v36 != v35)
  {
    v3 = (*(uint64_t (**)(void))(*(_QWORD *)v36 + 16))();
LABEL_4:
    v32 = (_BYTE *)v3;
    goto LABEL_6;
  }
  v32 = v31;
  (*(void (**)(void))(*(_QWORD *)v36 + 24))();
LABEL_6:
  v33 = v37;
  v26 = v38;
  v4 = v27;
  v5 = (uint64_t)v40;
  if (!v40)
  {
LABEL_9:
    v28 = (_BYTE *)v5;
    goto LABEL_11;
  }
  if (v40 != v39)
  {
    v5 = (*(uint64_t (**)(void))(*(_QWORD *)v40 + 16))();
    goto LABEL_9;
  }
  v28 = v27;
  (*(void (**)(void))(*(_QWORD *)v40 + 24))();
LABEL_11:
  v29 = v41;
  v6 = (float *)v30;
  v7 = v26;
  v8 = 0.0;
  if ((float *)v30 != v26)
  {
    do
    {
      v11 = v6[22];
      v12 = v6[23];
      v14 = v6[20];
      v13 = v6[21];
      *(_QWORD *)&v30 = v6 + 58;
      v10 = (float *)*((_QWORD *)&v30 + 1);
      if (v6 + 58 == *((float **)&v30 + 1))
      {
        v10 = v6 + 58;
LABEL_25:
        if (v10 != (float *)v33)
          goto LABEL_31;
      }
      else
      {
        v15 = v6 + 116;
        while (!*((_BYTE *)v15 - 8))
        {
          *(_QWORD *)&v30 = v15;
          v16 = v15 == *((float **)&v30 + 1);
          v15 += 58;
          if (v16)
            goto LABEL_25;
        }
        v10 = v15 - 58;
        if (v15 - 58 != (float *)v33)
        {
          while (1)
          {
LABEL_31:
            if (!v32)
              sub_223198474();
            v17 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v32 + 48))(v32);
            v18 = v30;
            if ((v17 & 1) != 0)
              break;
            *(_QWORD *)&v30 = v30 + 232;
            v10 = (float *)*((_QWORD *)&v30 + 1);
            if (v18 + 232 == *((_QWORD *)&v30 + 1))
            {
              v10 = (float *)(v18 + 232);
            }
            else
            {
              v19 = v18 + 464;
              while (!*(_BYTE *)(v19 - 8))
              {
                *(_QWORD *)&v30 = v19;
                v16 = v19 == *((_QWORD *)&v30 + 1);
                v19 += 232;
                if (v16)
                  goto LABEL_30;
              }
              v10 = (float *)(v19 - 232);
            }
LABEL_30:
            if (v10 == (float *)v33)
              goto LABEL_16;
          }
          v10 = (float *)v30;
LABEL_16:
          v7 = v26;
        }
      }
      v8 = v8 + (float)((float)(v11 - v14) * (float)(v12 - v13));
      v6 = v10;
    }
    while (v10 != v7);
  }
  if (v28 == v27)
  {
    v9 = 4;
  }
  else
  {
    if (!v28)
      goto LABEL_42;
    v9 = 5;
    v4 = v28;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v9))(v4);
LABEL_42:
  if (v32 == v31)
  {
    v20 = 4;
  }
  else
  {
    if (!v32)
      goto LABEL_47;
    v20 = 5;
    v2 = v32;
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v20))(v2);
LABEL_47:
  v21 = v40;
  if (v40 == v39)
  {
    v22 = 4;
    v21 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_52;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_52:
  v23 = v36;
  if (v36 == v35)
  {
    v24 = 4;
    v23 = v35;
    goto LABEL_56;
  }
  if (v36)
  {
    v24 = 5;
LABEL_56:
    (*(void (**)(void))(*v23 + 8 * v24))();
  }
  return v8;
}

void sub_223F83444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  _QWORD *v26;
  uint64_t v28;

  if (a22 == v26)
  {
    v28 = 4;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v28 = 5;
    v26 = a22;
  }
  (*(void (**)(_QWORD *))(*v26 + 8 * v28))(v26);
LABEL_6:
  sub_223F834DC(&a26);
  _Unwind_Resume(a1);
}

_QWORD *sub_223F834DC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 10;
  v3 = (_QWORD *)a1[13];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[5];
  if (v5 == a1 + 2)
  {
    v6 = 4;
    v5 = a1 + 2;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

float sub_223F8355C(uint64_t a1, int a2, _DWORD *a3, float32x2_t *a4)
{
  float32x2_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x2_t *i;
  float v10;
  float32x2_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x2_t *v49;
  float32x2_t *v50;
  float32x2_t *v51;
  BOOL v52;
  char v53;
  float32x2_t *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v64;
  __int32 v65;
  float32x2_t v66;
  float32x4_t v67;
  float32x2_t v68;
  __int128 v69;
  _BYTE v70[24];
  _BYTE *v71;
  __int128 v72;
  __int128 v73;
  _BYTE v74[24];
  _BYTE *v75;
  __int128 v76;
  __int128 v77;
  _BYTE v78[24];
  _BYTE *v79;
  __int128 v80;
  __int128 v81;
  _BYTE v82[24];
  _BYTE *v83;
  __int128 v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  sub_223F8A798((uint64_t)&v77, **(_QWORD **)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2);
  v73 = v77;
  v7 = (uint64_t)v79;
  if (!v79)
    goto LABEL_4;
  if (v79 != v78)
  {
    v7 = (*(uint64_t (**)(void))(*(_QWORD *)v79 + 16))();
LABEL_4:
    v75 = (_BYTE *)v7;
    goto LABEL_6;
  }
  v75 = v74;
  (*(void (**)(void))(*(_QWORD *)v79 + 24))();
LABEL_6:
  v76 = v80;
  v69 = v81;
  v8 = (uint64_t)v83;
  if (!v83)
  {
LABEL_9:
    v71 = (_BYTE *)v8;
    goto LABEL_11;
  }
  if (v83 != v82)
  {
    v8 = (*(uint64_t (**)(void))(*(_QWORD *)v83 + 16))();
    goto LABEL_9;
  }
  v71 = v70;
  (*(void (**)(void))(*(_QWORD *)v83 + 24))();
LABEL_11:
  v72 = v84;
  i = (float32x2_t *)v73;
  if ((_QWORD)v73 != (_QWORD)v69)
  {
    v10 = 0.0;
    while (1)
    {
      v11 = i[11];
      *(float32x2_t *)v12.f32 = vmul_f32(vadd_f32(i[10], v11), (float32x2_t)0x3F0000003F000000);
      *(float32x2_t *)v13.f32 = vsub_f32(*(float32x2_t *)v12.f32, v11);
      v14 = vadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.f32);
      v15 = vsub_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.f32);
      v12.i64[1] = v12.i64[0];
      v13.i64[1] = v13.i64[0];
      v16 = vsubq_f32(v12, v13);
      v17 = vaddq_f32(v12, v13);
      v17.i32[0] = v16.i32[0];
      v17.i32[3] = v16.i32[3];
      v66 = v14;
      v67 = v17;
      v13.i32[0] = v14.i32[1];
      v17.i32[0] = v14.i32[0];
      v16.i32[0] = a4[1].i32[0];
      v18 = a4[2];
      v6.i32[0] = a4[3].i32[0];
      v19 = vmla_n_f32(vmul_n_f32(*a4, v14.f32[0]), v18, v14.f32[1]);
      v18.i32[0] = a4[5].i32[0];
      *(float32x2_t *)v20.f32 = vmla_f32(v19, 0, a4[4]);
      *(float32x2_t *)&v20.u32[2] = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v17.f32), *(float32x2_t *)v13.f32, v6), 0, v18);
      v68 = v15;
      *(float32x2_t *)v17.f32 = a4[6];
      v17.i32[2] = a4[7].i32[0];
      v21 = vaddq_f32(v20, v17);
      v65 = v21.i32[2];
      v64 = v21.i64[0];
      v22 = (*(uint64_t (**)(_DWORD *, uint64_t *, float32x2_t *))(*(_QWORD *)a3 + 64))(a3, &v64, &v66);
      v24.i32[0] = v67.i32[1];
      v23.i32[0] = v67.i32[0];
      v25.i32[0] = a4[1].i32[0];
      v26.i32[0] = a4[3].i32[0];
      v27.i32[0] = a4[5].i32[0];
      *(float32x2_t *)v28.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(*a4, v67.f32[0]), a4[2], v67.f32[1]), 0, a4[4]);
      *(float32x2_t *)&v28.u32[2] = vmla_f32(vmla_f32(vmul_f32(v25, v23), v24, v26), 0, v27);
      *(float32x2_t *)v29.f32 = a4[6];
      v29.i32[2] = a4[7].i32[0];
      v30 = vaddq_f32(v28, v29);
      v65 = v30.i32[2];
      v64 = v30.i64[0];
      v31 = (*(uint64_t (**)(_DWORD *, uint64_t *, float32x4_t *))(*(_QWORD *)a3 + 64))(a3, &v64, &v67);
      v33.i32[0] = v67.i32[3];
      v32.i32[0] = v67.i32[2];
      v34.i32[0] = a4[1].i32[0];
      v35.i32[0] = a4[3].i32[0];
      v36.i32[0] = a4[5].i32[0];
      *(float32x2_t *)v37.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(*a4, v67.f32[2]), a4[2], v67.f32[3]), 0, a4[4]);
      *(float32x2_t *)&v37.u32[2] = vmla_f32(vmla_f32(vmul_f32(v34, v32), v33, v35), 0, v36);
      *(float32x2_t *)v38.f32 = a4[6];
      v38.i32[2] = a4[7].i32[0];
      v39 = vaddq_f32(v37, v38);
      v65 = v39.i32[2];
      v64 = v39.i64[0];
      v40 = (*(uint64_t (**)(_DWORD *, uint64_t *, __int8 *))(*(_QWORD *)a3 + 64))(a3, &v64, &v67.i8[8]);
      v42.i32[0] = v68.i32[1];
      v41.i32[0] = v68.i32[0];
      v43.i32[0] = a4[1].i32[0];
      v44.i32[0] = a4[3].i32[0];
      v45.i32[0] = a4[5].i32[0];
      *(float32x2_t *)v46.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(*a4, v68.f32[0]), a4[2], v68.f32[1]), 0, a4[4]);
      *(float32x2_t *)&v46.u32[2] = vmla_f32(vmla_f32(vmul_f32(v43, v41), v42, v44), 0, v45);
      *(float32x2_t *)v47.f32 = a4[6];
      v47.i32[2] = a4[7].i32[0];
      v48 = vaddq_f32(v46, v47);
      v65 = v48.i32[2];
      v64 = v48.i64[0];
      if ((((*(unsigned int (**)(_DWORD *, uint64_t *, float32x2_t *))(*(_QWORD *)a3 + 64))(a3, &v64, &v68) | v40 | v31 | v22) & 1) != 0)
        v10 = v10
            + (float)((float)(vabds_f32((float)(v66.f32[0] - v67.f32[2]) * (float)(v67.f32[1] - v66.f32[1]), (float)(v66.f32[0] - v67.f32[0]) * (float)(v67.f32[3] - v66.f32[1]))* 0.5)+ (float)(vabds_f32((float)(v67.f32[3] - v67.f32[1]) * (float)(v67.f32[0] - v68.f32[0]), (float)(v67.f32[0] - v67.f32[2]) * (float)(v68.f32[1] - v67.f32[1]))* 0.5));
      i = (float32x2_t *)*((_QWORD *)&v73 + 1);
      v49 = (float32x2_t *)v73;
      v50 = (float32x2_t *)(v73 + 232);
      *(_QWORD *)&v73 = v50;
      if (v50 == *((float32x2_t **)&v73 + 1))
      {
        i = v50;
        goto LABEL_26;
      }
      v51 = v49 + 58;
      while (!v51[-1].i8[0])
      {
        *(_QWORD *)&v73 = v51;
        v52 = v51 == *((float32x2_t **)&v73 + 1);
        v51 += 29;
        if (v52)
          goto LABEL_26;
      }
LABEL_24:
      for (i = v51 - 29; ; i = v54 + 29)
      {
LABEL_26:
        if (i == (float32x2_t *)v76)
          goto LABEL_14;
        if (!v75)
          sub_223198474();
        v53 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v75 + 48))(v75);
        v54 = (float32x2_t *)v73;
        if ((v53 & 1) != 0)
          break;
        *(_QWORD *)&v73 = v73 + 232;
        i = (float32x2_t *)*((_QWORD *)&v73 + 1);
        if (&v54[29] != *((float32x2_t **)&v73 + 1))
        {
          v51 = v54 + 58;
          while (!v51[-1].i8[0])
          {
            *(_QWORD *)&v73 = v51;
            v52 = v51 == *((float32x2_t **)&v73 + 1);
            v51 += 29;
            if (v52)
              goto LABEL_26;
          }
          goto LABEL_24;
        }
      }
      i = (float32x2_t *)v73;
LABEL_14:
      if (i == (float32x2_t *)v69)
        goto LABEL_36;
    }
  }
  v10 = 0.0;
LABEL_36:
  v55 = v70;
  if (v71 == v70)
  {
    v57 = 4;
    v56 = v74;
  }
  else
  {
    v56 = v74;
    if (!v71)
      goto LABEL_41;
    v57 = 5;
    v55 = v71;
  }
  (*(void (**)(void))(*v55 + 8 * v57))();
LABEL_41:
  if (v75 == v74)
  {
    v58 = 4;
  }
  else
  {
    if (!v75)
      goto LABEL_46;
    v58 = 5;
    v56 = v75;
  }
  (*(void (**)(_QWORD *))(*v56 + 8 * v58))(v56);
LABEL_46:
  v59 = v83;
  if (v83 == v82)
  {
    v60 = 4;
    v59 = v82;
  }
  else
  {
    if (!v83)
      goto LABEL_51;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_51:
  v61 = v79;
  if (v79 == v78)
  {
    v62 = 4;
    v61 = v78;
    goto LABEL_55;
  }
  if (v79)
  {
    v62 = 5;
LABEL_55:
    (*(void (**)(void))(*v61 + 8 * v62))();
  }
  return v10 / (float)(a3[22] * a3[23]);
}

void sub_223F83AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,_QWORD *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  _QWORD *v34;
  uint64_t v36;

  if (a30 == v34)
  {
    v36 = 4;
  }
  else
  {
    if (!a30)
      goto LABEL_6;
    v36 = 5;
    v34 = a30;
  }
  (*(void (**)(_QWORD *))(*v34 + 8 * v36))(v34);
LABEL_6:
  sub_223F834DC(&a34);
  _Unwind_Resume(a1);
}

void sub_223F83B84(uint64_t a1, int a2, uint64_t a3, char a4, int a5, _OWORD *a6, char a7)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _DWORD *v13;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  uint64_t *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  float64x2_t v53[6];
  float64x2_t v54;
  _OWORD v55[12];
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    if (a5 > 0)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 96) = 0;
      if (*(_BYTE *)(a3 + 96))
      {
        v10 = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(a1 + 48) = v10;
        v11 = *(_OWORD *)(a3 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a3 + 64);
        *(_OWORD *)(a1 + 80) = v11;
        v12 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a3;
        *(_OWORD *)(a1 + 16) = v12;
        *(_BYTE *)(a1 + 96) = 1;
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a3 + 104);
        v13 = (_DWORD *)(a1 + 104);
        *(_QWORD *)(a1 + 109) = *(_QWORD *)(a3 + 109);
        if (a7)
        {
          v54.f64[0] = (double)(*(_DWORD *)(a3 + 108) + *(_DWORD *)(a3 + 112));
          v54.f64[1] = (double)a5;
          _D2 = (double)a5;
          __asm { FMLA            D1, D2, V0.D[1] }
          v54 = vmulq_n_f64(v54, 1.0 / sqrt(_D1));
          v20 = *(_OWORD *)(a3 + 16);
          v55[0] = *(_OWORD *)a3;
          v55[1] = v20;
          v21 = *(_OWORD *)(a3 + 32);
          v22 = *(_OWORD *)(a3 + 48);
          v23 = *(_OWORD *)(a3 + 80);
          v55[4] = *(_OWORD *)(a3 + 64);
          v55[5] = v23;
          v55[2] = v21;
          v55[3] = v22;
          v24 = a6[5];
          v26 = a6[2];
          v25 = a6[3];
          v55[10] = a6[4];
          v55[11] = v24;
          v55[8] = v26;
          v55[9] = v25;
          v27 = a6[1];
          v55[6] = *a6;
          v55[7] = v27;
          sub_223F82CF8(v53, 2uLL, v55, 2, v54.f64);
          v28 = v53[3];
          *(float64x2_t *)(a1 + 32) = v53[2];
          *(float64x2_t *)(a1 + 48) = v28;
          v29 = v53[5];
          *(float64x2_t *)(a1 + 64) = v53[4];
          *(float64x2_t *)(a1 + 80) = v29;
          v30 = v53[1];
          *(float64x2_t *)a1 = v53[0];
          *(float64x2_t *)(a1 + 16) = v30;
        }
      }
      else
      {
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a3 + 104);
        v13 = (_DWORD *)(a1 + 104);
        *(_QWORD *)(a1 + 109) = *(_QWORD *)(a3 + 109);
        if (a7)
        {
          v44 = a6[3];
          *(_OWORD *)(a1 + 32) = a6[2];
          *(_OWORD *)(a1 + 48) = v44;
          v45 = a6[5];
          *(_OWORD *)(a1 + 64) = a6[4];
          *(_OWORD *)(a1 + 80) = v45;
          v46 = a6[1];
          *(_OWORD *)a1 = *a6;
          *(_OWORD *)(a1 + 16) = v46;
          *(_BYTE *)(a1 + 96) = 1;
        }
      }
      if (*v13 == a2)
      {
LABEL_23:
        v47 = *(_DWORD *)(a1 + 108);
        if (v47 <= a5)
          v47 = a5;
        *(_DWORD *)(a1 + 108) = v47;
        return;
      }
LABEL_31:
      v52 = *(_DWORD *)(a1 + 108) + *(_DWORD *)(a1 + 112);
      *(_DWORD *)(a1 + 108) = a5;
      *(_DWORD *)(a1 + 112) = v52;
      *(_DWORD *)(a1 + 104) = a2;
      return;
    }
    v35 = (uint64_t *)(a3 + 104);
    if (*(_DWORD *)(a3 + 104) != a2)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 96) = 0;
      if (*(_BYTE *)(a3 + 96))
      {
        v48 = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(a1 + 48) = v48;
        v49 = *(_OWORD *)(a3 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a3 + 64);
        *(_OWORD *)(a1 + 80) = v49;
        v50 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a3;
        *(_OWORD *)(a1 + 16) = v50;
        *(_BYTE *)(a1 + 96) = 1;
      }
      v51 = *v35;
      *(_QWORD *)(a1 + 104) = *v35;
      *(_QWORD *)(a1 + 109) = *(_QWORD *)(a3 + 109);
      if ((_DWORD)v51 == a2)
        goto LABEL_23;
      goto LABEL_31;
    }
    v37 = *(_DWORD *)(a3 + 108);
    v36 = *(_DWORD *)(a3 + 112);
    v38 = (v37 + a5) & ~((v37 + a5) >> 31);
    if (!v37)
      v38 = a5;
    if (v37 >= a5)
      v39 = a5;
    else
      v39 = *(_DWORD *)(a3 + 108);
    if (v37 < 0)
      v40 = v39;
    else
      v40 = v38;
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 96) = 0;
    if (*(_BYTE *)(a3 + 96))
    {
      v41 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a1 + 48) = v41;
      v42 = *(_OWORD *)(a3 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a1 + 80) = v42;
      v43 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v43;
      *(_BYTE *)(a1 + 96) = 1;
    }
    *(_DWORD *)(a1 + 104) = a2;
    *(_DWORD *)(a1 + 108) = v40;
    *(_DWORD *)(a1 + 112) = v36;
    *(_BYTE *)(a1 + 116) = *(_BYTE *)(a3 + 116);
  }
  else
  {
    if (a7)
    {
      v31 = a6[3];
      *(_OWORD *)(a1 + 32) = a6[2];
      *(_OWORD *)(a1 + 48) = v31;
      v32 = a6[5];
      *(_OWORD *)(a1 + 64) = a6[4];
      *(_OWORD *)(a1 + 80) = v32;
      v33 = a6[1];
      v34 = 1;
      *(_OWORD *)a1 = *a6;
      *(_OWORD *)(a1 + 16) = v33;
    }
    else
    {
      v34 = 0;
      *(_BYTE *)a1 = 0;
    }
    *(_BYTE *)(a1 + 96) = v34;
    *(_DWORD *)(a1 + 104) = a2;
    *(_DWORD *)(a1 + 108) = a5;
    *(_DWORD *)(a1 + 112) = 0;
    *(_BYTE *)(a1 + 116) = 0;
  }
}

void sub_223F83E98(uint64_t a1, int a2, uint64_t a3)
{
  char *v3;
  char *v4;
  double *v5;
  int v6;
  uint64_t v7;
  double *v8;
  double *v9;
  char *v10;
  double *v11;
  uint64_t v12;
  _OWORD *v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  double *v40;
  int64_t v41;
  unint64_t v42;
  double *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  double *v49;
  uint64_t v50;
  __int128 v51;
  unint64_t v52;
  double v53;
  double *v54;
  unint64_t v55;
  unint64_t v56;
  float64x2_t *v57;
  uint64_t v58;
  float64x2_t v59;
  float64x2_t v60;
  double v61;
  double *v62;
  double *v63;
  double v64;
  unint64_t v65;
  double *v66;
  double *v67;
  unint64_t v68;
  uint64_t v69;
  float64x2_t *v70;
  float64x2_t *v71;
  uint64_t v72;
  float64x2_t v73;
  double v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  int v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  float64x2_t v85[6];
  double *v86;
  uint64_t v87;
  double *v88;
  char *v89;
  char *v90;
  char *v91;

  v3 = (char *)operator new(0x180uLL);
  v4 = v3 + 384;
  v89 = v3;
  v91 = v3 + 384;
  v5 = (double *)operator new(0x20uLL);
  v6 = 0;
  v7 = 0;
  v8 = v5 + 4;
  v86 = v5;
  v88 = v5 + 4;
  v9 = v5;
  v10 = v3;
  v83 = (uint64_t)v5;
  v11 = v5;
  do
  {
    v12 = **(_QWORD **)(*(_QWORD *)(a3 + 16 * v7) + 8) + 232 * **(_QWORD **)(a3 + 16 * v7);
    if (!*(_BYTE *)(v12 + 216))
    {
      v90 = v3;
      sub_22324A974();
    }
    v13 = (_OWORD *)(v12 + 96);
    v14 = *(_DWORD *)(v12 + 204) + *(_DWORD *)(v12 + 208);
    if (*(_BYTE *)(v12 + 192))
    {
      if (v3 < v4)
      {
        v15 = *(_OWORD *)(v12 + 112);
        *(_OWORD *)v3 = *v13;
        *((_OWORD *)v3 + 1) = v15;
        v16 = *(_OWORD *)(v12 + 128);
        v17 = *(_OWORD *)(v12 + 144);
        v18 = *(_OWORD *)(v12 + 176);
        *((_OWORD *)v3 + 4) = *(_OWORD *)(v12 + 160);
        *((_OWORD *)v3 + 5) = v18;
        *((_OWORD *)v3 + 2) = v16;
        *((_OWORD *)v3 + 3) = v17;
        v3 += 96;
        v19 = (double)v14;
        if (v9 < v8)
          goto LABEL_2;
        goto LABEL_25;
      }
      v20 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v10) >> 5);
      v21 = v20 + 1;
      if (v20 + 1 > 0x2AAAAAAAAAAAAAALL)
      {
        v90 = v3;
        v87 = v83;
        sub_22316E078();
      }
      v81 = (unint64_t)v8;
      if (0x5555555555555556 * ((v4 - v10) >> 5) > v21)
        v21 = 0x5555555555555556 * ((v4 - v10) >> 5);
      if (0xAAAAAAAAAAAAAAABLL * ((v4 - v10) >> 5) >= 0x155555555555555)
        v22 = 0x2AAAAAAAAAAAAAALL;
      else
        v22 = v21;
      if (v22)
      {
        if (v22 > 0x2AAAAAAAAAAAAAALL)
        {
          v90 = v3;
          v87 = v83;
          sub_223174E94();
        }
        v23 = v14;
        v24 = (char *)operator new(96 * v22);
      }
      else
      {
        v23 = v14;
        v24 = 0;
      }
      v25 = &v24[32 * ((v3 - v10) >> 5)];
      v26 = v13[1];
      *(_OWORD *)v25 = *v13;
      *((_OWORD *)v25 + 1) = v26;
      v27 = v13[2];
      v28 = v13[3];
      v29 = v13[5];
      *((_OWORD *)v25 + 4) = v13[4];
      *((_OWORD *)v25 + 5) = v29;
      *((_OWORD *)v25 + 2) = v27;
      *((_OWORD *)v25 + 3) = v28;
      if (v3 == v10)
      {
        v31 = &v24[32 * ((v3 - v10) >> 5)];
        v4 = &v24[96 * v22];
        v3 = v25 + 96;
        v89 = &v24[96 * v20];
        v91 = v4;
        if (v10)
LABEL_23:
          operator delete(v10);
      }
      else
      {
        v30 = &v24[32 * ((v3 - v10) >> 5)];
        do
        {
          v31 = v30 - 96;
          v32 = *((_OWORD *)v3 - 5);
          *((_OWORD *)v30 - 6) = *((_OWORD *)v3 - 6);
          *((_OWORD *)v30 - 5) = v32;
          v33 = *((_OWORD *)v3 - 4);
          v34 = *((_OWORD *)v3 - 3);
          v35 = *((_OWORD *)v3 - 1);
          *((_OWORD *)v30 - 2) = *((_OWORD *)v3 - 2);
          *((_OWORD *)v30 - 1) = v35;
          *((_OWORD *)v30 - 4) = v33;
          *((_OWORD *)v30 - 3) = v34;
          v3 -= 96;
          v30 -= 96;
        }
        while (v3 != v10);
        v4 = &v24[96 * v22];
        v3 = v25 + 96;
        v89 = v31;
        v91 = v4;
        if (v10)
          goto LABEL_23;
      }
      v10 = v31;
      v14 = v23;
      v8 = (double *)v81;
      v19 = (double)v14;
      if ((unint64_t)v9 < v81)
      {
LABEL_2:
        *v9++ = v19;
        v83 = (uint64_t)v9;
        goto LABEL_3;
      }
LABEL_25:
      v36 = v9 - v11;
      v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 61)
      {
        v90 = v3;
        v87 = v83;
        sub_22316E078();
      }
      if (((char *)v8 - (char *)v11) >> 2 > v37)
        v37 = ((char *)v8 - (char *)v11) >> 2;
      if ((unint64_t)((char *)v8 - (char *)v11) >= 0x7FFFFFFFFFFFFFF8)
        v38 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v38 = v37;
      v82 = v4;
      v80 = v14;
      if (v38)
      {
        if (v38 >> 61)
        {
          v90 = v3;
          v87 = v83;
          sub_223174E94();
        }
        v39 = operator new(8 * v38);
        v40 = (double *)&v39[8 * v36];
        *v40 = v19;
        v83 = (uint64_t)(v40 + 1);
        v41 = (char *)v9 - (char *)v11;
        if (v9 == v11)
          goto LABEL_39;
      }
      else
      {
        v39 = 0;
        v40 = (double *)(8 * v36);
        *(double *)(8 * v36) = v19;
        v83 = 8 * v36 + 8;
        v41 = (char *)v9 - (char *)v11;
        if (v9 == v11)
          goto LABEL_39;
      }
      v42 = v41 - 8;
      if (v42 >= 0x168)
      {
        v45 = ((char *)(v9 - 1) - (char *)v11) & 0xFFFFFFFFFFFFFFF8;
        if (&v39[(char *)v9 - (char *)v11 - 8 - v45] > &v39[(char *)v9 - (char *)v11 - 8])
        {
          v43 = v9;
        }
        else if ((double *)((char *)v9 - v45 - 8) > v9 - 1)
        {
          v43 = v9;
        }
        else if ((unint64_t)((char *)v11 - v39) >= 0x20)
        {
          v46 = (v42 >> 3) + 1;
          v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
          v43 = &v9[v47 / 0xFFFFFFFFFFFFFFF8];
          v40 = (double *)((char *)v40 - v47);
          v48 = &v39[8 * v36 - 16];
          v49 = v9 - 2;
          v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v51 = *(_OWORD *)v49;
            *(v48 - 1) = *((_OWORD *)v49 - 1);
            *v48 = v51;
            v48 -= 2;
            v49 -= 4;
            v50 -= 4;
          }
          while (v50);
          if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_39;
        }
        else
        {
          v43 = v9;
        }
      }
      else
      {
        v43 = v9;
      }
      do
      {
        v44 = *((_QWORD *)v43-- - 1);
        *((_QWORD *)v40-- - 1) = v44;
      }
      while (v43 != v11);
LABEL_39:
      v8 = (double *)&v39[8 * v38];
      v86 = v40;
      v88 = v8;
      if (v11)
        operator delete(v11);
      v11 = v40;
      v4 = v82;
      v9 = (double *)v83;
      v14 = v80;
    }
LABEL_3:
    v6 += v14;
    ++v7;
  }
  while (v7 != 4);
  v90 = v3;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = a2;
  *(_DWORD *)(a1 + 108) = v6;
  *(_DWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 116) = 0;
  if (v10 != v3)
  {
    v52 = (unint64_t)((char *)v9 - (char *)v11) >> 3;
    if ((_DWORD)v52)
    {
      v53 = *v11 * *v11;
      if ((_DWORD)v52 != 1)
      {
        v54 = v11 + 1;
        v55 = (v52 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
        if (v55 < 3)
          goto LABEL_84;
        v56 = v55 + 1;
        v54 += v56 & 0x3FFFFFFFFFFFFFFCLL;
        v57 = (float64x2_t *)(v11 + 3);
        v58 = v56 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v59 = vmulq_f64(v57[-1], v57[-1]);
          v60 = vmulq_f64(*v57, *v57);
          v53 = v53 + v59.f64[0] + v59.f64[1] + v60.f64[0] + v60.f64[1];
          v57 += 2;
          v58 -= 4;
        }
        while (v58);
        if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_84:
          do
          {
            v61 = *v54++;
            v53 = v53 + v61 * v61;
          }
          while (v54 != &v11[v52]);
        }
      }
    }
    else
    {
      v53 = 0.0;
    }
    v62 = (double *)operator new((8 * v52 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    v63 = v62;
    if ((_DWORD)v52)
    {
      v64 = 1.0 / sqrt(v53);
      v65 = (v52 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v66 = v62;
      v67 = v11;
      if (v65 < 3)
        goto LABEL_85;
      v66 = v62;
      v67 = v11;
      if ((unint64_t)((char *)v62 - (char *)v11) < 0x20)
        goto LABEL_85;
      v68 = v65 + 1;
      v69 = v68 & 0x3FFFFFFFFFFFFFFCLL;
      v66 = &v62[v69];
      v67 = &v11[v69];
      v70 = (float64x2_t *)(v11 + 2);
      v71 = (float64x2_t *)(v62 + 2);
      v72 = v68 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v73 = vmulq_n_f64(*v70, v64);
        v71[-1] = vmulq_n_f64(v70[-1], v64);
        *v71 = v73;
        v70 += 2;
        v71 += 2;
        v72 -= 4;
      }
      while (v72);
      if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_85:
        do
        {
          v74 = *v67++;
          *v66++ = v64 * v74;
        }
        while (v66 != &v62[v52]);
      }
    }
    sub_223F82CF8(v85, 0xAAAAAAAAAAAAAAABLL * ((v3 - v10) >> 5), v10, ((unint64_t)((char *)v9 - (char *)v11) >> 3), v62);
    v75 = v85[3];
    *(float64x2_t *)(a1 + 32) = v85[2];
    *(float64x2_t *)(a1 + 48) = v75;
    v76 = v85[5];
    *(float64x2_t *)(a1 + 64) = v85[4];
    *(float64x2_t *)(a1 + 80) = v76;
    v77 = v85[1];
    *(float64x2_t *)a1 = v85[0];
    *(float64x2_t *)(a1 + 16) = v77;
    *(_BYTE *)(a1 + 96) = 1;
    MEMORY[0x227684CB8](v63, 0x1000C8000313F17);
  }
  if (v11)
    operator delete(v11);
  if (v10)
    operator delete(v10);
}

void sub_223F844F8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;

  MEMORY[0x227684CB8](v2, 0x1000C8000313F17);
  if (v1)
  {
    operator delete(v1);
    v5 = *(void **)(v3 - 128);
    if (!v5)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v5 = *(void **)(v3 - 128);
    if (!v5)
      goto LABEL_3;
  }
  *(_QWORD *)(v3 - 120) = v5;
  operator delete(v5);
  _Unwind_Resume(a1);
}

_QWORD *sub_223F84590(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[9];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = a1[7];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = a1[5];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v5 = a1[3];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  v6 = a1[1];
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  return a1;
}

_QWORD *sub_223F8461C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[7];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = a1[5];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = a1[3];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v5 = a1[1];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  return a1;
}

void sub_223F84690(int a1, _DWORD *a2, float *a3, int a4, _OWORD *a5, char a6, double a7)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float32x2_t *v12;
  uint64_t v13;
  float32x2_t v14;
  float32x2_t v15;
  double v16;
  double v17;
  double v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  BOOL v76;
  float v78;
  BOOL v79;
  float v80;
  float v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  char *v88;
  unint64_t *v89;
  unint64_t *v90;
  _QWORD *v91;
  _QWORD *v92;
  void *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _BOOL4 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  char *v101;
  float v102;
  char *v103;
  float v104;
  char *v105;
  uint64_t v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  int v123;
  _OWORD *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  int v128;
  _BOOL4 v129;
  float32x2_t *v134;
  int v135;
  uint64_t *v136[2];
  char *v137;
  __int128 v138;
  char *v139;
  __int128 v140;
  uint64_t *v141[2];
  uint64_t *v142[2];
  uint64_t v143;
  uint64_t v144;
  void *__p;
  _QWORD *v146;
  unint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  unsigned __int8 v154;
  _QWORD v155[2];
  __int128 v156;
  BOOL v157;
  char v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;

  v162 = *MEMORY[0x24BDAC8D0];
  LODWORD(a7) = *a2;
  v7 = (float)(*(float *)&a7 * *(float *)&a7) * 0.1;
  v8 = a3[3];
  v9 = a3[1];
  v10 = a3[2] - *a3;
  v139 = 0;
  v140 = 0uLL;
  if ((float)(v10 * (float)(v8 - v9)) < v7)
    return;
  v12 = (float32x2_t *)a3;
  v13 = (uint64_t)a2;
  v15 = *(float32x2_t *)a3;
  v14 = *(float32x2_t *)(a3 + 2);
  *(_QWORD *)&v148 = *(_QWORD *)a3;
  *((float32x2_t *)&v148 + 1) = v14;
  if (sub_223F35794(2uLL, (float32x2_t *)&v148, *(int32x2_t *)&a7))
  {
    __p = (void *)vmul_f32(vadd_f32(*v12, v12[1]), (float32x2_t)0x3F0000003F000000);
    sub_223F85D34((uint64_t *)&v159, v13, (float32x2_t *)&__p, (int32x2_t)__p);
    v137 = 0;
    v138 = 0uLL;
    *(_QWORD *)&v148 = &v137;
    BYTE8(v148) = 0;
    v19 = (char *)operator new(0x10uLL);
    v137 = v19;
    *(_QWORD *)&v138 = v19;
    v20 = v19 + 16;
    *((_QWORD *)&v138 + 1) = v19 + 16;
    v21 = *((_QWORD *)&v159 + 1);
    *(_QWORD *)v19 = v159;
    *((_QWORD *)v19 + 1) = v21;
    if (v21)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
      *(_QWORD *)&v138 = v20;
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
    }
    else
    {
      *(_QWORD *)&v138 = v19 + 16;
    }
    goto LABEL_162;
  }
  v22 = *(_QWORD *)(v13 + 16);
  if (v22)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v22 + 24))(*(_QWORD *)(v13 + 16));
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 48))(v22) == 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
  }
  else
  {
    v23 = 1;
  }
  *(float32x2_t *)&v148 = vadd_f32(v15, (float32x2_t)vdup_n_s32(0x358637BDu));
  *((float32x2_t *)&v148 + 1) = vadd_f32(v14, (float32x2_t)vdup_n_s32(0xB58637BD));
  sub_223F86A28(v13, 2, (uint64_t *)&v148, *(double *)&v148, *((double *)&v148 + 1), v16, v17, v18);
  v138 = 0uLL;
  v137 = 0;
  __p = 0;
  v146 = 0;
  v147 = 0;
  v24 = *(_QWORD *)(v13 + 16);
  *(_QWORD *)&v156 = *(_QWORD *)(v13 + 8);
  *((_QWORD *)&v156 + 1) = v24;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
  v157 = !v23;
  v158 = 0;
  v148 = 0u;
  v149 = 0u;
  v150 = 0u;
  sub_223F88FBC((uint64_t)&v148, (uint64_t)&v156);
  v129 = v23;
  v159 = v148;
  v160 = v149;
  v148 = 0u;
  v149 = 0u;
  v161 = v150;
  v150 = 0uLL;
  sub_223F89748((uint64_t)&v148);
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
  v128 = a4;
  if (*((_QWORD *)&v161 + 1))
  {
    v134 = v12;
    do
    {
      v25 = v161;
      v26 = *(_QWORD *)(*((_QWORD *)&v159 + 1) + 8 * ((unint64_t)v161 / 0xAA));
      v27 = (unint64_t)v161 % 0xAA;
      v28 = (uint64_t *)(v26 + 24 * ((unint64_t)v161 % 0xAA));
      v30 = *v28;
      v29 = (uint64_t *)v28[1];
      if (v29)
      {
        (*(void (**)(uint64_t))(*v29 + 24))(v28[1]);
        v25 = v161;
        v31 = (unint64_t)v161 % 0xAA;
        v32 = *(_QWORD *)(*((_QWORD *)&v159 + 1) + 8 * ((unint64_t)v161 / 0xAA));
      }
      else
      {
        v32 = *(_QWORD *)(*((_QWORD *)&v159 + 1) + 8 * ((unint64_t)v161 / 0xAA));
        v31 = (unint64_t)v161 % 0xAA;
      }
      v33 = v26 + 24 * v27;
      v34 = *(unsigned __int8 *)(v33 + 16);
      v135 = *(unsigned __int8 *)(v33 + 17);
      v35 = *(_QWORD *)(v32 + 24 * v31 + 8);
      if (v35)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
        v25 = v161;
      }
      *(_QWORD *)&v161 = v25 + 1;
      --*((_QWORD *)&v161 + 1);
      if ((unint64_t)(v25 + 1) >= 0x154)
      {
        operator delete(**((void ***)&v159 + 1));
        *((_QWORD *)&v159 + 1) += 8;
        *(_QWORD *)&v161 = v161 - 170;
      }
      v36 = (_QWORD *)(**(_QWORD **)(v30 + 8) + 232 * *(_QWORD *)v30);
      v37 = v36[3];
      if (!v37 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 48))(v37))
      {
        v38 = v36[5];
        if (!v38 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38))
        {
          v39 = v36[7];
          if (!v39 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 48))(v39))
          {
            v40 = v36[9];
            if (!v40 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 48))(v40))
            {
              if (v34
                || (v41 = **(_QWORD **)(v30 + 8) + 232 * *(_QWORD *)v30,
                    (float)(*(float *)(v41 + 88) - *(float *)(v41 + 80)) < (float)(*(float *)v13 * 1.25)))
              {
                v42 = v138;
                if ((unint64_t)v138 >= *((_QWORD *)&v138 + 1))
                {
                  v43 = sub_223F898DC(&v137, v30, (uint64_t)v29);
                }
                else
                {
                  *(_QWORD *)v138 = v30;
                  *(_QWORD *)(v42 + 8) = v29;
                  if (v29)
                    (*(void (**)(uint64_t *))(*v29 + 24))(v29);
                  v43 = (char *)(v42 + 16);
                }
                *(_QWORD *)&v138 = v43;
                if (v29)
                  goto LABEL_131;
                continue;
              }
            }
          }
        }
      }
      v44 = **(_QWORD **)(v30 + 8) + 232 * *(_QWORD *)v30;
      v46 = *(_QWORD *)(v44 + 16);
      v45 = (_QWORD *)(v44 + 16);
      *(_QWORD *)&v148 = v46;
      v47 = v45[1];
      *((_QWORD *)&v148 + 1) = v47;
      if (v47)
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
      *(_QWORD *)&v149 = v45[2];
      v48 = v45[3];
      *((_QWORD *)&v149 + 1) = v48;
      if (v48)
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
      *(_QWORD *)&v150 = v45[4];
      v49 = v45[5];
      *((_QWORD *)&v150 + 1) = v49;
      if (v49)
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49);
      *(_QWORD *)&v151 = v45[6];
      v50 = v45[7];
      *((_QWORD *)&v151 + 1) = v50;
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
      v51 = 0;
      v52 = (_QWORD *)&v148 + 1;
      do
      {
        if (*v52 && (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v52 + 48))(*v52))
        {
          v156 = *(_OWORD *)(**(_QWORD **)(*(v52 - 1) + 8) + 232 * *(_QWORD *)*(v52 - 1) + 80);
          v54 = 1;
          if (v135)
            goto LABEL_52;
        }
        else
        {
          sub_223F35620((float32x2_t *)(**(_QWORD **)(v30 + 8) + 232 * *(_QWORD *)v30 + 80), v51, (float32x2_t *)&v156);
          v54 = 0;
          if (v135)
            goto LABEL_52;
        }
        v68 = v12->f32[0];
        if (v12->f32[0] <= *((float *)&v156 + 2))
        {
          v69 = v12->f32[1];
          if (v69 <= *((float *)&v156 + 3))
          {
            v70 = v12[1].f32[0];
            if (v70 >= *(float *)&v156)
            {
              v71 = v12[1].f32[1];
              if (v71 >= *((float *)&v156 + 1))
              {
                if (v68 < *(float *)&v156)
                  v68 = *(float *)&v156;
                if (v69 < *((float *)&v156 + 1))
                  v69 = *((float *)&v156 + 1);
                if (*((float *)&v156 + 2) < v70)
                  v70 = *((float *)&v156 + 2);
                if (*((float *)&v156 + 3) < v71)
                  v71 = *((float *)&v156 + 3);
                if (v68 <= v70)
                  v72 = v70;
                else
                  v72 = v68;
                if (v68 > v70)
                  v68 = v70;
                if (v69 <= v71)
                  v73 = v71;
                else
                  v73 = v69;
                if (v69 > v71)
                  v69 = v71;
                v74 = (float)(v72 - v68) * (float)(v73 - v69);
                v75 = fabsf(v74);
                v76 = v74 == 0.0 || v74 < v7;
                if (!v76 && v75 > 0.000001)
                {
                  v78 = (float)(*((float *)&v156 + 2) - *(float *)&v156)
                      * (float)(*((float *)&v156 + 3) - *((float *)&v156 + 1));
                  v79 = v78 < v74;
                  if (v78 == v74)
                  {
LABEL_52:
                    v55 = 1;
                    if ((v54 & 1) == 0)
                      goto LABEL_53;
                  }
                  else
                  {
                    v80 = v78 - v74;
                    v81 = v74 - v78;
                    if (!v79)
                      v81 = v80;
                    v55 = v81 <= 0.000001;
                    if ((v54 & 1) != 0)
                      goto LABEL_63;
LABEL_53:
                    v142[0] = (uint64_t *)v30;
                    v142[1] = v29;
                    if (v29)
                      (*(void (**)(uint64_t *))(*v29 + 24))(v29);
                    sub_223F87878((uint64_t)&v143, (uint64_t)a2, v142, &v156, v51);
                    v56 = v143;
                    v57 = v144;
                    if (v144)
                      (*(void (**)(uint64_t))(*(_QWORD *)v144 + 24))(v144);
                    v58 = *v52;
                    *(v52 - 1) = v56;
                    *v52 = v57;
                    if (v58)
                      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 40))(v58);
                    if (v57)
                      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
                    if (v29)
                      (*(void (**)(uint64_t *))(*v29 + 40))(v29);
                  }
LABEL_63:
                  v59 = *(v52 - 1);
                  v60 = *v52;
                  if (*v52)
                    (*(void (**)(_QWORD))(*(_QWORD *)v60 + 24))(*v52);
                  v61 = *((_QWORD *)&v159 + 1);
                  if ((_QWORD)v160 == *((_QWORD *)&v159 + 1))
                    v62 = 0;
                  else
                    v62 = 170 * ((uint64_t)(v160 - *((_QWORD *)&v159 + 1)) >> 3) - 1;
                  v63 = *((_QWORD *)&v161 + 1) + v161;
                  if (v62 == *((_QWORD *)&v161 + 1) + (_QWORD)v161)
                  {
                    sub_223F89B7C((uint64_t)&v159);
                    v61 = *((_QWORD *)&v159 + 1);
                    v63 = *((_QWORD *)&v161 + 1) + v161;
                  }
                  v64 = *(_QWORD *)(v61 + 8 * (v63 / 0xAA));
                  v65 = v63 % 0xAA;
                  v66 = (_QWORD *)(v64 + 24 * (v63 % 0xAA));
                  *v66 = v59;
                  v66[1] = v60;
                  if (v60)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 24))(v60);
                    v67 = v64 + 24 * v65;
                    *(_BYTE *)(v67 + 16) = v54;
                    *(_BYTE *)(v67 + 17) = v55;
                    ++*((_QWORD *)&v161 + 1);
                    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 40))(v60);
                  }
                  else
                  {
                    v53 = v64 + 24 * v65;
                    *(_BYTE *)(v53 + 16) = v54;
                    *(_BYTE *)(v53 + 17) = v55;
                    ++*((_QWORD *)&v161 + 1);
                  }
                  v12 = v134;
                }
              }
            }
          }
        }
        ++v51;
        v52 += 2;
      }
      while (v51 != 4);
      v82 = (_QWORD *)(**(_QWORD **)(v30 + 8) + 232 * *(_QWORD *)v30);
      v83 = v82[3];
      v13 = (uint64_t)a2;
      if (!v83 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 48))(v83))
      {
        v84 = v82[5];
        if (!v84 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 48))(v84))
        {
          v85 = v82[7];
          if (!v85 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 48))(v85))
          {
            v86 = v82[9];
            if (!v86 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v86 + 48))(v86))
            {
              v87 = v146;
              if ((unint64_t)v146 >= v147)
              {
                v88 = sub_223F898DC((char **)&__p, v30, (uint64_t)v29);
              }
              else
              {
                *v146 = v30;
                v87[1] = v29;
                if (v29)
                  (*(void (**)(uint64_t *))(*v29 + 24))(v29);
                v88 = (char *)(v87 + 2);
              }
              v146 = v88;
            }
          }
        }
      }
      if (*((_QWORD *)&v151 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v151 + 1) + 40))(*((_QWORD *)&v151 + 1));
      if (*((_QWORD *)&v150 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v150 + 1) + 40))(*((_QWORD *)&v150 + 1));
      if (*((_QWORD *)&v149 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v149 + 1) + 40))(*((_QWORD *)&v149 + 1));
      if (*((_QWORD *)&v148 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v148 + 1) + 40))(*((_QWORD *)&v148 + 1));
      if (v29)
LABEL_131:
        (*(void (**)(uint64_t *))(*v29 + 40))(v29);
    }
    while (*((_QWORD *)&v161 + 1));
  }
  v89 = (unint64_t *)__p;
  v90 = v146;
  if (__p != v146)
  {
    do
    {
      v94 = *v89;
      v95 = v89[1];
      if (v95)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v95 + 24))(v89[1]);
        *(_QWORD *)&v148 = v94;
        *((_QWORD *)&v148 + 1) = v95;
        (*(void (**)(unint64_t))(*(_QWORD *)v95 + 24))(v95);
      }
      else
      {
        v148 = *v89;
      }
      sub_223F858E4(v13, (uint64_t **)&v148);
      if (v95)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v95 + 40))(v95);
        (*(void (**)(unint64_t))(*(_QWORD *)v95 + 40))(v95);
      }
      v89 += 2;
    }
    while (v89 != v90);
  }
  sub_223F89748((uint64_t)&v159);
  v91 = __p;
  if (__p)
  {
    v92 = v146;
    v93 = __p;
    if (v146 != __p)
    {
      do
      {
        v96 = *(v92 - 1);
        if (v96)
          (*(void (**)(uint64_t))(*(_QWORD *)v96 + 40))(v96);
        v92 -= 2;
      }
      while (v92 != v91);
      v93 = __p;
    }
    v146 = v91;
    operator delete(v93);
  }
  v97 = v137 == (char *)v138 && v129;
  a4 = v128;
  if (v97)
  {
    v98 = *(_QWORD *)(v13 + 16);
    if (v98)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v98 + 24))(*(_QWORD *)(v13 + 16));
      v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 48))(v98);
      (*(void (**)(uint64_t))(*(_QWORD *)v98 + 40))(v98);
      if (v99)
      {
        v100 = *(uint64_t **)(v13 + 16);
        v141[0] = *(uint64_t **)(v13 + 8);
        v141[1] = v100;
        if (v100)
          (*(void (**)(uint64_t *))(*v100 + 24))(v100);
        sub_223F858E4(v13, v141);
        if (v100)
          (*(void (**)(uint64_t *))(*v100 + 40))(v100);
      }
    }
  }
  sub_223F871AC(v13);
LABEL_162:
  v101 = v137;
  v102 = *(float *)v13;
  v139 = v137;
  v140 = v138;
  v103 = (char *)v138;
  if (v137 == (char *)v138)
  {
    if (!(_QWORD)v138)
      return;
    goto LABEL_220;
  }
  v104 = v102 * v102;
  v105 = v137;
  do
  {
    v106 = **(_QWORD **)(*(_QWORD *)v105 + 8) + 232 * **(_QWORD **)v105;
    v107 = v12[1].f32[0];
    v108 = *(float *)(v106 + 80);
    v109 = *(float *)(v106 + 84);
    v110 = 0.0;
    if (v108 <= v107)
    {
      v111 = v12[1].f32[1];
      if (v109 <= v111)
      {
        v112 = *(float *)(v106 + 88);
        if (v112 >= v12->f32[0])
        {
          v113 = *(float *)(v106 + 92);
          v114 = v12->f32[1];
          if (v113 >= v114)
          {
            if (v108 >= v12->f32[0])
              v115 = *(float *)(v106 + 80);
            else
              v115 = v12->f32[0];
            if (v109 >= v114)
              v116 = *(float *)(v106 + 84);
            else
              v116 = v12->f32[1];
            if (v107 >= v112)
              v107 = *(float *)(v106 + 88);
            if (v111 >= v113)
              v111 = *(float *)(v106 + 92);
            if (v115 <= v107)
              v117 = v107;
            else
              v117 = v115;
            if (v115 > v107)
              v115 = v107;
            if (v116 <= v111)
              v118 = v111;
            else
              v118 = v116;
            if (v116 <= v111)
              v111 = v116;
            v110 = (float)(v117 - v115) * (float)(v118 - v111);
          }
        }
      }
    }
    v119 = (float)((float)((float)(*(float *)(v106 + 88) - v108) * (float)(*(float *)(v106 + 92) - v109)) / v104)
         * (float)(v110 / (float)((float)(*(float *)(v106 + 88) - v108) * (float)(*(float *)(v106 + 92) - v109)));
    if (v119 >= 0.1)
    {
      v120 = v119 * (float)a4;
      v121 = fmaxf(fabsf(v120), 1.0);
      v122 = v120 >= 0.0 ? v121 : -v121;
      v123 = llroundf(v122);
      if (v123)
      {
        v124 = (_OWORD *)(v106 + 96);
        v125 = (v106 + 96) & 0xF8;
        if (!*(_BYTE *)(v106 + 216))
          v125 = 0;
        sub_223F83B84((uint64_t)&v148, a1, v125 | (v106 + 96) & 0xFFFFFFFFFFFFFF00, *(_BYTE *)(v106 + 216), v123, a5, a6);
        if (*(_BYTE *)(v106 + 216))
        {
          if (*(unsigned __int8 *)(v106 + 192) == v154)
          {
            if (*(_BYTE *)(v106 + 192))
            {
              *(_OWORD *)(v106 + 128) = v150;
              *(_OWORD *)(v106 + 144) = v151;
              *(_OWORD *)(v106 + 160) = v152;
              *(_OWORD *)(v106 + 176) = v153;
              *v124 = v148;
              *(_OWORD *)(v106 + 112) = v149;
            }
          }
          else if (*(_BYTE *)(v106 + 192))
          {
            *(_BYTE *)(v106 + 192) = 0;
          }
          else
          {
            *(_OWORD *)(v106 + 128) = v150;
            *(_OWORD *)(v106 + 144) = v151;
            *(_OWORD *)(v106 + 160) = v152;
            *(_OWORD *)(v106 + 176) = v153;
            *v124 = v148;
            *(_OWORD *)(v106 + 112) = v149;
            *(_BYTE *)(v106 + 192) = 1;
          }
          *(_QWORD *)(v106 + 200) = v155[0];
          *(_QWORD *)(v106 + 205) = *(_QWORD *)((char *)v155 + 5);
        }
        else
        {
          *(_BYTE *)(v106 + 96) = 0;
          *(_BYTE *)(v106 + 192) = 0;
          if (v154)
          {
            *(_OWORD *)(v106 + 128) = v150;
            *(_OWORD *)(v106 + 144) = v151;
            *(_OWORD *)(v106 + 160) = v152;
            *(_OWORD *)(v106 + 176) = v153;
            *v124 = v148;
            *(_OWORD *)(v106 + 112) = v149;
            *(_BYTE *)(v106 + 192) = 1;
          }
          *(_QWORD *)(v106 + 200) = v155[0];
          *(_QWORD *)(v106 + 205) = *(_QWORD *)((char *)v155 + 5);
          *(_BYTE *)(v106 + 216) = 1;
        }
        *(_BYTE *)(v106 + 212) = 0;
      }
    }
    if (!*(_BYTE *)(v106 + 216))
    {
      v126 = (uint64_t *)*((_QWORD *)v105 + 1);
      v136[0] = *(uint64_t **)v105;
      v136[1] = v126;
      if (v126)
        (*(void (**)(uint64_t *))(*v126 + 24))(v126);
      sub_223F858E4((uint64_t)a2, v136);
      if (v126)
        (*(void (**)(uint64_t *))(*v126 + 40))(v126);
    }
    v105 += 16;
  }
  while (v105 != v103);
  if (v101)
  {
    do
    {
      v127 = *((_QWORD *)v103 - 1);
      if (v127)
        (*(void (**)(uint64_t))(*(_QWORD *)v127 + 40))(v127);
      v103 -= 16;
    }
    while (v103 != v101);
LABEL_220:
    operator delete(v101);
  }
}

void sub_223F8541C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

void sub_223F8576C()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223F85780(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC64680;
  result[1] = v3;
  return result;
}

uint64_t sub_223F857B4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC64680;
  a2[1] = v2;
  return result;
}

float32x2_t sub_223F857D0@<D0>(uint64_t a1@<X0>, float32x2_t *a2@<X1>, float32x2_t *a3@<X8>)
{
  float32x2_t result;

  result = vadd_f32(vmla_lane_f32(vmul_n_f32(**(float32x2_t **)(a1 + 8), COERCE_FLOAT(*a2)), *(float32x2_t *)(*(_QWORD *)(a1 + 8) + 8), *a2, 1), *(float32x2_t *)(*(_QWORD *)(a1 + 8) + 16));
  *a3 = result;
  return result;
}

uint64_t sub_223F857F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3acv16surfacedetection12_GLOBAL__N_114mergeQuadTreesERNS1_8QuadTreeINSt3__18optionalINS1_12P"
                     "lanarRegion8CellDataEEEEERKS9_RKN3cva6AffineIfEEjE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3acv16surfacedetection12_GLOBAL__N_114mergeQuadTreesERNS1_8QuadTreeINSt3__18optio"
                                "nalINS1_12PlanarRegion8CellDataEEEEERKS9_RKN3cva6AffineIfEEjE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3acv16surfacedetection12_GLOBAL__N_114mergeQuadTreesERNS1_8QuadTreeINSt3__18optionalINS1_12PlanarRegion8CellDataEEEEERKS9_RKN3cva6AffineIfEEjE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3acv16surfacedetection12_GLOBAL__N_114mergeQuadTreesERNS1_8QuadTreeINSt3__18optionalINS1_12PlanarRegion8CellDataEEEEERKS9_RKN3cva6AffineIfEEjE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223F85860()
{
  return &unk_24EC646E0;
}

void **sub_223F8586C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 1);
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_223F858E4(uint64_t a1, uint64_t **a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  result = (uint64_t)a2[1];
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
    if (result)
    {
      v5 = (_QWORD *)(*(_QWORD *)(*a2)[1] + 232 * **a2);
      v6 = v5[3];
      if (v6 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6)
        || (v7 = v5[5]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7)
        || (v8 = v5[7]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8)
        || (v9 = v5[9]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9))
      {
        v10 = *(_QWORD *)(*a2)[1] + 232 * **a2;
        v12 = *(uint64_t **)(v10 + 16);
        v11 = *(_QWORD *)(v10 + 24);
        v13 = (_QWORD *)(v10 + 16);
        v29 = v12;
        v30 = v11;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
        sub_223F8A338(a1, &v29);
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
        v14 = v13[3];
        v29 = (uint64_t *)v13[2];
        v30 = v14;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
        sub_223F8A338(a1, &v29);
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
        v15 = v13[5];
        v29 = (uint64_t *)v13[4];
        v30 = v15;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
        sub_223F8A338(a1, &v29);
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
        v16 = v13[7];
        v29 = (uint64_t *)v13[6];
        v30 = v16;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
        sub_223F8A338(a1, &v29);
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
      }
      v17 = *(_QWORD *)(*(_QWORD *)(*a2)[1] + 232 * **a2 + 8);
      if (v17 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17))
      {
        v19 = *a2;
        v18 = a2[1];
        if (v18)
          (*(void (**)(uint64_t *))(*v18 + 24))(a2[1]);
        while (1)
        {
          if (v18)
            (*(void (**)(uint64_t *))(*v18 + 24))(v18);
          v20 = (uint64_t *)(*(_QWORD *)v19[1] + 232 * *v19);
          v22 = *v20;
          v21 = (uint64_t *)v20[1];
          if (v21)
          {
            (*(void (**)(uint64_t *))(*v21 + 24))(v21);
            (*(void (**)(uint64_t *))(*v21 + 24))(v21);
          }
          if (v18)
            (*(void (**)(uint64_t *))(*v18 + 40))(v18);
          if (v21)
            (*(void (**)(uint64_t *))(*v21 + 40))(v21);
          sub_223F8A11C(a1 + 24, *v19);
          if (v18)
            (*(void (**)(uint64_t *))(*v18 + 40))(v18);
          if (!v21)
            break;
          if (!(*(uint64_t (**)(uint64_t *))(*v21 + 48))(v21))
            break;
          v19 = (uint64_t *)v22;
          v23 = (_QWORD *)(**(_QWORD **)(v22 + 8) + 232 * *(_QWORD *)v22);
          v24 = v23[3];
          if (v24)
          {
            if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 48))(v24))
              break;
          }
          v25 = v23[5];
          if (v25)
          {
            if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 48))(v25))
              break;
          }
          v26 = v23[7];
          if (v26)
          {
            if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 48))(v26))
              break;
          }
          v27 = v23[9];
          v18 = v21;
          if (v27)
          {
            v18 = v21;
            if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 48))(v27))
              break;
          }
        }
        result = sub_223F871AC(a1);
        if (v21)
          return (*(uint64_t (**)(uint64_t *))(*v21 + 40))(v21);
      }
      else
      {
        v28 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
        return sub_223F8A11C(a1 + 24, **a2);
      }
    }
  }
  return result;
}

void sub_223F85C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F85D34(uint64_t *a1, uint64_t a2, float32x2_t *a3, int32x2_t a4)
{
  uint64_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  int32x2_t v11;
  __int8 v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  void **v24;
  unint64_t v25;
  void *v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  BOOL v49;
  void *v51;
  int v52;
  float v53;
  float v54;
  float v55;
  int v56;
  int v57;
  float32x2_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  float v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  int v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t result;
  float32x2_t v85;
  __int32 v86;
  uint64_t v87;
  __int32 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  char v94;
  unint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t *v98[2];
  void *__p[2];
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  unint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  __int128 v108;
  __int128 *v109;
  char v110;
  __int128 v111;
  __int128 v112;

  v7 = *(_QWORD *)(a2 + 16);
  if (!v7 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7))
  {
    a4.i32[0] = *(_DWORD *)a2;
    v8 = (float32x2_t)vdup_lane_s32(a4, 0);
    v9 = vmul_n_f32(vcvt_f32_s32(vcvt_s32_f32(vrndm_f32(vdiv_f32(*a3, v8)))), *(float *)a2);
    v10 = vadd_f32(v8, v9);
    v11 = vcgt_f32(v9, v10);
    v12 = v11.i8[4];
    v13 = (v11.i8[0] & 1) == 0;
    if ((v11.i8[0] & 1) != 0)
      v14 = -1;
    else
      v14 = 0;
    LODWORD(v15) = vbsl_s8((int8x8_t)vdup_n_s32(v14), (int8x8_t)v9, (int8x8_t)v10).u32[0];
    HIDWORD(v15) = v10.i32[1];
    if (v13)
      v16 = (unint64_t)v9;
    else
      v16 = v10.u32[0] | ((unint64_t)v9.u32[1] << 32);
    if ((v12 & 1) != 0)
    {
      v16 = v16 | ((unint64_t)v10.u32[1] << 32);
      HIDWORD(v15) = v9.i32[1];
    }
    v17 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) != v17)
    {
      v18 = *(_QWORD *)(v17 - 8);
      *(_QWORD *)(a2 + 40) = v17 - 8;
      v102 = 0u;
      v103 = 0u;
      v100 = 0u;
      v101 = 0u;
      *(_OWORD *)__p = 0u;
      v104 = v16;
      v105 = v15;
      v106 = 0;
      v107 = 0;
      sub_223F87F80(**(_QWORD **)(a2 + 24) + 232 * v18, (uint64_t)__p);
      if (*((_QWORD *)&v103 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v103 + 1) + 40))(*((_QWORD *)&v103 + 1));
      if (*((_QWORD *)&v102 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v102 + 1) + 40))(*((_QWORD *)&v102 + 1));
      if (*((_QWORD *)&v101 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v101 + 1) + 40))(*((_QWORD *)&v101 + 1));
      if (*((_QWORD *)&v100 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v100 + 1) + 40))(*((_QWORD *)&v100 + 1));
      if (__p[1])
        (*(void (**)(void *))(*(_QWORD *)__p[1] + 40))(__p[1]);
      v19 = *(_QWORD *)(a2 + 24);
      v20 = (_QWORD *)operator new();
      *v20 = v18;
      v20[1] = v19;
      v21 = operator new();
      *(_QWORD *)v21 = &off_24EC64700;
      *(int64x2_t *)(v21 + 8) = vdupq_n_s64(1uLL);
      *(_QWORD *)(v21 + 24) = v20;
      v22 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v18);
      v23 = (void *)v22[1];
      *v22 = v20;
      v22[1] = v21;
      if (!v23)
        goto LABEL_46;
      goto LABEL_45;
    }
    v24 = *(void ***)(a2 + 24);
    v26 = *v24;
    v25 = (unint64_t)v24[1];
    v18 = 0x34F72C234F72C235 * ((uint64_t)(v25 - (_QWORD)*v24) >> 3);
    v27 = (unint64_t)v24[2];
    if (v25 >= v27)
    {
      v29 = v18 + 1;
      if ((unint64_t)(v18 + 1) > 0x11A7B9611A7B961)
        sub_22316E078();
      if (0x69EE58469EE5846ALL * ((uint64_t)(v27 - (_QWORD)v26) >> 3) > v29)
        v29 = 0x69EE58469EE5846ALL * ((uint64_t)(v27 - (_QWORD)v26) >> 3);
      if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v27 - (_QWORD)v26) >> 3)) >= 0x8D3DCB08D3DCB0)
        v30 = 0x11A7B9611A7B961;
      else
        v30 = v29;
      *(_QWORD *)&v101 = v24 + 2;
      if (v30)
      {
        v95 = v27;
        v96 = v15;
        if (v30 > 0x11A7B9611A7B961)
          sub_223174E94();
        v31 = (char *)operator new(232 * v30);
        v15 = v96;
        v27 = v95;
      }
      else
      {
        v31 = 0;
      }
      v32 = &v31[232 * v18];
      __p[0] = v31;
      __p[1] = v32;
      *(_OWORD *)v32 = 0u;
      *((_OWORD *)v32 + 1) = 0u;
      v33 = &v31[232 * v30];
      *((_OWORD *)v32 + 2) = 0u;
      *((_OWORD *)v32 + 3) = 0u;
      *((_OWORD *)v32 + 4) = 0u;
      *((_QWORD *)v32 + 10) = v16;
      *((_QWORD *)v32 + 11) = v15;
      v32[96] = 0;
      v32[216] = 0;
      v32[224] = 1;
      v28 = v32 + 232;
      *(_QWORD *)&v100 = v32 + 232;
      *((_QWORD *)&v100 + 1) = v33;
      *(_QWORD *)&v112 = v32;
      *((_QWORD *)&v112 + 1) = v32;
      v111 = v112;
      *(_QWORD *)&v108 = v24 + 2;
      *((_QWORD *)&v108 + 1) = &v111;
      v109 = &v112;
      v110 = 0;
      if ((void *)v25 == v26)
      {
        v34 = (void *)v25;
      }
      else
      {
        do
        {
          v25 -= 232;
          sub_223F88160(v32 - 232, v25);
          v32 = (char *)(*((_QWORD *)&v112 + 1) - 232);
          *((_QWORD *)&v112 + 1) -= 232;
        }
        while ((void *)v25 != v26);
        v34 = *v24;
        v25 = (unint64_t)v24[1];
        v27 = (unint64_t)v24[2];
        v33 = (char *)*((_QWORD *)&v100 + 1);
        v28 = (char *)v100;
      }
      *v24 = v32;
      __p[0] = v34;
      __p[1] = v34;
      v24[1] = v28;
      *(_QWORD *)&v100 = v25;
      v24[2] = v33;
      *((_QWORD *)&v100 + 1) = v27;
      sub_223F88444(__p, (uint64_t)v34);
      if (__p[0])
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)(v25 + 48) = 0u;
      *(_OWORD *)(v25 + 64) = 0u;
      *(_OWORD *)(v25 + 16) = 0u;
      *(_OWORD *)(v25 + 32) = 0u;
      *(_OWORD *)v25 = 0u;
      *(_QWORD *)(v25 + 80) = v16;
      *(_QWORD *)(v25 + 88) = v15;
      *(_BYTE *)(v25 + 96) = 0;
      *(_BYTE *)(v25 + 216) = 0;
      v28 = (char *)(v25 + 232);
      *(_BYTE *)(v25 + 224) = 1;
    }
    v24[1] = v28;
    v35 = *(_QWORD *)(a2 + 24);
    v36 = (_QWORD *)operator new();
    *v36 = v18;
    v36[1] = v35;
    __p[0] = v36;
    v37 = (char *)operator new();
    *(_QWORD *)v37 = &off_24EC64700;
    *(int64x2_t *)(v37 + 8) = vdupq_n_s64(1uLL);
    *((_QWORD *)v37 + 3) = v36;
    __p[1] = v37;
    v38 = *(_QWORD **)(a2 + 64);
    if ((unint64_t)v38 >= *(_QWORD *)(a2 + 72))
    {
      v39 = sub_223F88508((void **)(a2 + 56), (uint64_t)__p);
      v23 = __p[1];
      *(_QWORD *)(a2 + 64) = v39;
      if (v23)
LABEL_45:
        (*(void (**)(void *))(*(_QWORD *)v23 + 32))(v23);
    }
    else
    {
      *v38 = v36;
      v38[1] = v37;
      *(_QWORD *)(a2 + 64) = v38 + 2;
    }
LABEL_46:
    v97 = *(_OWORD *)(*(_QWORD *)(a2 + 56) + 16 * v18);
    v40 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v18 + 8);
    (*(void (**)(uint64_t))(**((_QWORD **)&v97 + 1) + 24))(v40);
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40);
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40);
    v41 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(a2 + 8) = v97;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41);
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
  }
  v42 = **(_QWORD **)(*(_QWORD *)(a2 + 8) + 8) + 232 * **(_QWORD **)(a2 + 8);
  __p[0] = *(void **)(v42 + 80);
  __p[1] = *(void **)(v42 + 88);
  v44 = *((float *)__p + 1);
  v43 = *(float *)__p;
  v46 = *((float *)&__p[1] + 1);
  v45 = *(float *)&__p[1];
  while (1)
  {
    v47 = a3->f32[0];
    if (v43 <= a3->f32[0])
    {
      v48 = a3->f32[1];
      v49 = v44 > v48 || v45 <= v47;
      if (!v49 && v46 > v48)
        break;
    }
    v51 = __p[0];
    if (v47 >= *(float *)__p)
    {
      if (v47 >= *(float *)&__p[1])
      {
        v52 = 1;
        v53 = *((float *)&__p[1] + 1);
        v54 = a3->f32[1];
        v55 = *((float *)__p + 1);
        if (v54 < *((float *)__p + 1))
        {
LABEL_68:
          v56 = 0;
          v57 = -1;
          v58 = vsub_f32((float32x2_t)__p[1], (float32x2_t)__p[0]);
          if (v52 != 1)
            goto LABEL_69;
          goto LABEL_76;
        }
      }
      else
      {
        v52 = 0;
        v53 = *((float *)&__p[1] + 1);
        v54 = a3->f32[1];
        v55 = *((float *)__p + 1);
        if (v54 < *((float *)__p + 1))
          goto LABEL_68;
      }
    }
    else
    {
      v52 = -1;
      v53 = *((float *)&__p[1] + 1);
      v54 = a3->f32[1];
      v55 = *((float *)__p + 1);
      if (v54 < *((float *)__p + 1))
        goto LABEL_68;
    }
    if (v54 >= v53)
    {
      v56 = 1;
      v57 = 1;
      v58 = vsub_f32((float32x2_t)__p[1], (float32x2_t)__p[0]);
      if (v52 != 1)
      {
LABEL_69:
        if (v52)
        {
          if ((v57 + 1) <= 1)
            goto LABEL_74;
          if (v56)
          {
            LODWORD(v59) = vsub_f32((float32x2_t)__p[0], v58).u32[0];
            HIDWORD(v59) = HIDWORD(__p[0]);
            LODWORD(v60) = __p[1];
            HIDWORD(v60) = vadd_f32(*(float32x2_t *)(__p + 8), v58).i32[1];
            v51 = v59;
            v61 = 1;
            goto LABEL_79;
          }
        }
        else if (v54 < v55)
        {
LABEL_74:
          v51 = (void *)vsub_f32((float32x2_t)__p[0], v58);
          v60 = __p[1];
          v61 = 3;
          goto LABEL_79;
        }
        goto LABEL_78;
      }
    }
    else
    {
      v56 = 0;
      v57 = 0;
      v58 = vsub_f32((float32x2_t)__p[1], (float32x2_t)__p[0]);
      if (v52 != 1)
        goto LABEL_69;
    }
LABEL_76:
    if (v54 < v55)
    {
      LODWORD(v60) = vadd_f32((float32x2_t)__p[1], v58).u32[0];
      HIDWORD(v60) = HIDWORD(__p[1]);
      HIDWORD(v51) = vsub_f32(*(float32x2_t *)__p, v58).i32[1];
      v61 = 2;
      goto LABEL_79;
    }
LABEL_78:
    v61 = 0;
    v60 = (void *)vadd_f32((float32x2_t)__p[1], v58);
LABEL_79:
    __p[0] = v51;
    v43 = *(float *)&v51;
    if ((vcgt_f32((float32x2_t)v51, (float32x2_t)__p[1]).u8[0] & 1) != 0)
    {
      LODWORD(__p[0]) = __p[1];
      v43 = *(float *)&__p[1];
      v44 = *((float *)&v51 + 1);
      if (v53 >= *((float *)&v51 + 1))
      {
LABEL_81:
        __p[1] = v60;
        if (v43 > *(float *)&v60)
          goto LABEL_82;
        goto LABEL_86;
      }
    }
    else
    {
      v44 = *((float *)&v51 + 1);
      if (v53 >= *((float *)&v51 + 1))
        goto LABEL_81;
    }
    *((float *)__p + 1) = v53;
    v44 = v53;
    __p[1] = v60;
    if (v43 > *(float *)&v60)
    {
LABEL_82:
      LODWORD(__p[0]) = (_DWORD)v60;
      *(float *)&__p[1] = v43;
      v45 = v43;
      v62 = *((float *)&v60 + 1);
      v43 = *(float *)&v60;
      if (v44 <= *((float *)&v60 + 1))
        goto LABEL_83;
      goto LABEL_87;
    }
LABEL_86:
    v62 = *((float *)&v60 + 1);
    v45 = *(float *)&v60;
    if (v44 <= *((float *)&v60 + 1))
    {
LABEL_83:
      v46 = *((float *)&v60 + 1);
      goto LABEL_88;
    }
LABEL_87:
    HIDWORD(__p[0]) = HIDWORD(v60);
    *((float *)&__p[1] + 1) = v44;
    v46 = v44;
    v44 = v62;
LABEL_88:
    sub_223F87AC8(&v108, (uint64_t **)(a2 + 24), (__int128 *)__p);
    v63 = *(uint64_t **)(a2 + 8);
    v64 = *v63;
    v65 = *(_QWORD *)v63[1];
    v66 = v108;
    if (*((_QWORD *)&v108 + 1))
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v108 + 1) + 24))(*((_QWORD *)&v108 + 1));
      (*(void (**)(_QWORD))(**((_QWORD **)&v66 + 1) + 24))(*((_QWORD *)&v66 + 1));
    }
    v67 = v65 + 232 * v64;
    v68 = *(_QWORD *)(v67 + 8);
    *(_OWORD *)v67 = v66;
    if (v68)
      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 40))(v68);
    if (*((_QWORD *)&v66 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v66 + 1) + 40))(*((_QWORD *)&v66 + 1));
    v69 = *(_QWORD *)v66;
    v70 = **(_QWORD **)(v66 + 8);
    v72 = *(_QWORD *)(a2 + 8);
    v71 = *(_QWORD *)(a2 + 16);
    if (v71)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v71 + 24))(*(_QWORD *)(a2 + 16));
      (*(void (**)(uint64_t))(*(_QWORD *)v71 + 24))(v71);
    }
    v73 = v70 + 232 * v69 + 16 * v61;
    v74 = *(_QWORD *)(v73 + 24);
    *(_QWORD *)(v73 + 16) = v72;
    *(_QWORD *)(v73 + 24) = v71;
    if (v74)
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 40))(v74);
    if (v71)
      (*(void (**)(uint64_t))(*(_QWORD *)v71 + 40))(v71);
    if (*((_QWORD *)&v66 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v66 + 1) + 24))(*((_QWORD *)&v66 + 1));
    v75 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(a2 + 8) = v66;
    if (v75)
      (*(void (**)(uint64_t))(*(_QWORD *)v75 + 40))(v75);
    if (*((_QWORD *)&v66 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v66 + 1) + 40))(*((_QWORD *)&v66 + 1));
  }
  v77 = *(_QWORD *)(a2 + 8);
  v76 = *(_QWORD *)(a2 + 16);
  v78 = *(__n128 *)(**(_QWORD **)(v77 + 8) + 232 * *(_QWORD *)v77 + 80);
  *(__n128 *)__p = v78;
  *a1 = v77;
  a1[1] = v76;
  if (v76)
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 24))(v76);
  v79 = 1;
  while (2)
  {
    v80 = (_QWORD *)(**(_QWORD **)(v77 + 8) + 232 * *(_QWORD *)v77);
    v81 = v80[3];
    if (v81 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 48))(v81)
      || (v82 = v80[5]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 48))(v82)
      || (v83 = v80[7]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 48))(v83)
      || (result = v80[9]) != 0
      && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result)) != 0
      || !v79 && (float)(*(float *)&__p[1] - *(float *)__p) >= (float)(*(float *)a2 * 1.25))
    {
      v78.n128_u32[1] = HIDWORD(__p[0]);
      v85 = vmul_f32(vadd_f32((float32x2_t)__p[0], (float32x2_t)__p[1]), (float32x2_t)0x3F0000003F000000);
      v86 = v85.i32[0];
      if (a3->f32[0] < v85.f32[0])
      {
        v87 = 0;
        LODWORD(__p[1]) = v85.i32[0];
        if ((vcgt_f32((float32x2_t)__p[0], v85).u32[0] & 1) != 0)
        {
          v88 = v85.i32[0];
          v86 = (__int32)__p[0];
          goto LABEL_124;
        }
        goto LABEL_125;
      }
      LODWORD(__p[0]) = v85.i32[0];
      if ((vcgt_f32(v85, (float32x2_t)__p[1]).u32[0] & 1) != 0)
      {
        v88 = (__int32)__p[1];
        v87 = 1;
LABEL_124:
        LODWORD(__p[0]) = v88;
        LODWORD(__p[1]) = v86;
LABEL_125:
        v85.i32[0] = v85.i32[1];
        if (a3->f32[1] < v85.f32[1])
        {
LABEL_126:
          v78.n128_u32[0] = HIDWORD(__p[0]);
          HIDWORD(__p[1]) = v85.i32[0];
          if (*((float *)__p + 1) > v85.f32[0])
          {
            HIDWORD(__p[0]) = v85.i32[0];
            HIDWORD(__p[1]) = v78.n128_u32[1];
          }
          v89 = **(_QWORD **)(v77 + 8) + 232 * *(_QWORD *)v77 + 16 * v87;
          v90 = *(_QWORD *)(v89 + 24);
          if (!v90)
            goto LABEL_136;
LABEL_134:
          v91 = *(_QWORD *)(v89 + 16);
          (*(void (**)(uint64_t, __n128))(*(_QWORD *)v90 + 24))(v90, v78);
          if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 48))(v90))
            goto LABEL_136;
          v79 = 1;
          v77 = v91;
LABEL_148:
          (*(void (**)(uint64_t))(*(_QWORD *)v90 + 24))(v90);
          v94 = 0;
          v92 = (uint64_t *)a1[1];
          *a1 = v77;
          a1[1] = v90;
          if (!v92)
            goto LABEL_152;
          goto LABEL_151;
        }
      }
      else
      {
        v87 = 1;
        v85.i32[0] = v85.i32[1];
        if (a3->f32[1] < v85.f32[1])
          goto LABEL_126;
      }
      v78.n128_u32[0] = HIDWORD(__p[1]);
      HIDWORD(__p[0]) = v85.i32[0];
      if (v85.f32[0] > *((float *)&__p[1] + 1))
      {
        HIDWORD(__p[0]) = HIDWORD(__p[1]);
        HIDWORD(__p[1]) = v85.i32[0];
      }
      v87 |= 2uLL;
      v89 = **(_QWORD **)(v77 + 8) + 232 * *(_QWORD *)v77 + 16 * v87;
      v90 = *(_QWORD *)(v89 + 24);
      if (v90)
        goto LABEL_134;
LABEL_136:
      v92 = (uint64_t *)a1[1];
      v98[0] = (uint64_t *)v77;
      v98[1] = v92;
      if (v92)
        (*(void (**)(uint64_t *, __n128))(*v92 + 24))(v92, v78);
      sub_223F87878((uint64_t)&v108, a2, v98, (__int128 *)__p, v87);
      v93 = *((_QWORD *)&v108 + 1);
      v77 = v108;
      if (*((_QWORD *)&v108 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v108 + 1) + 24))(*((_QWORD *)&v108 + 1));
      if (v90)
        (*(void (**)(uint64_t))(*(_QWORD *)v90 + 40))(v90);
      if (v93)
        (*(void (**)(uint64_t))(*(_QWORD *)v93 + 40))(v93);
      if (v92)
        (*(void (**)(uint64_t *))(*v92 + 40))(v92);
      v79 = 0;
      if (v93)
      {
        v90 = v93;
        goto LABEL_148;
      }
      v90 = 0;
      v94 = 1;
      *a1 = v77;
      a1[1] = 0;
      if (!v92)
      {
LABEL_152:
        if ((v94 & 1) == 0)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v90 + 40))(v90);
          v77 = *a1;
        }
        continue;
      }
LABEL_151:
      (*(void (**)(uint64_t *))(*v92 + 40))(v92);
      goto LABEL_152;
    }
    return result;
  }
}

void sub_223F86860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 32))(a16);
  _Unwind_Resume(exception_object);
}

void sub_223F86A28(uint64_t a1, uint64_t a2, uint64_t *a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v11;
  __int128 v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x2_t *v18;
  float32x2_t *v19;
  float v20;
  BOOL v21;
  float32x2_t v22;
  float32x2_t v23;
  float v24;
  int v25;
  float32x2_t v26;
  float32x2_t v27;
  float v28;
  float v29;
  int v30;
  int v31;
  float32x2_t v32;
  uint64_t v33;
  float v34;
  float v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  float32x2_t v52;
  uint64_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float v57;
  int32x2_t v58;
  float32x2_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void *v66;
  float v67;
  __int128 v68;
  float32x2_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 __p;
  __int128 v75;
  __int128 v76;

  if (!a2)
    return;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11))
  {
    LODWORD(a8) = *(_DWORD *)a1;
    v52 = (float32x2_t)*a3;
    v53 = 8 * a2;
    v54 = (float32x2_t)*a3;
    do
    {
      v55 = (float32x2_t)*a3++;
      v52 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v52, v55), (int8x8_t)v55, (int8x8_t)v52);
      v54 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v55, v54), (int8x8_t)v55, (int8x8_t)v54);
      v53 -= 8;
    }
    while (v53);
    v67 = *(float *)a1;
    v69 = vmul_n_f32(vcvt_f32_s32(vcvt_s32_f32(vrndm_f32(vdiv_f32(v52, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0))))), *(float *)&a8);
    v56 = vsub_f32(v54, v69);
    if (v56.f32[0] < v56.f32[1])
      v56.f32[0] = v56.f32[1];
    v57 = log2f(floorf(v56.f32[0] / *(float *)&a8) + 1.0);
    *(float *)v58.i32 = v67 * exp2f(ceilf(v57));
    v59 = vadd_f32(v69, (float32x2_t)vdup_lane_s32(v58, 0));
    *(float32x2_t *)&__p = v69;
    *((float32x2_t *)&__p + 1) = v59;
    if (v69.f32[0] > v59.f32[0])
    {
      LODWORD(__p) = v59.i32[0];
      DWORD2(__p) = v69.i32[0];
      if (v69.f32[1] <= v59.f32[1])
      {
LABEL_74:
        sub_223F88A68(&v71, (uint64_t **)(a1 + 24), &__p);
        v60 = *((_QWORD *)&v71 + 1);
        v61 = v71;
        if (!*((_QWORD *)&v71 + 1))
          goto LABEL_79;
        goto LABEL_78;
      }
    }
    else if (v69.f32[1] <= v59.f32[1])
    {
      goto LABEL_74;
    }
    DWORD1(__p) = v59.i32[1];
    HIDWORD(__p) = v69.i32[1];
    sub_223F88A68(&v71, (uint64_t **)(a1 + 24), &__p);
    v60 = *((_QWORD *)&v71 + 1);
    v61 = v71;
    if (!*((_QWORD *)&v71 + 1))
    {
LABEL_79:
      v62 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v61;
      *(_QWORD *)(a1 + 16) = v60;
      if (v62)
        (*(void (**)(uint64_t))(*(_QWORD *)v62 + 40))(v62);
      if (v60)
        (*(void (**)(uint64_t))(*(_QWORD *)v60 + 40))(v60);
      return;
    }
LABEL_78:
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 24))(v60);
    goto LABEL_79;
  }
  v72 = 0u;
  v73 = 0u;
  v71 = 0u;
  sub_223EE33E0(&v71, a3, (8 * a2) >> 3);
  v13 = (void **)*((_QWORD *)&v71 + 1);
  __p = v71;
  v14 = (void **)v72;
  v75 = v72;
  v15 = *((_QWORD *)&v73 + 1);
  v76 = v73;
  if (!*((_QWORD *)&v73 + 1))
    goto LABEL_84;
  do
  {
    *(_QWORD *)&v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&__p + 1)
                                            + (((unint64_t)v76 >> 6) & 0x3FFFFFFFFFFFFF8))
                                + 8 * (v76 & 0x1FF));
    v68 = v12;
    *(_QWORD *)&v76 = v76 + 1;
    *((_QWORD *)&v76 + 1) = v15 - 1;
    if ((unint64_t)v76 >= 0x400)
    {
      operator delete(**((void ***)&__p + 1));
      *((_QWORD *)&__p + 1) += 8;
      *(_QWORD *)&v76 = v76 - 512;
    }
    v16 = **(_QWORD **)(a1 + 8);
    v17 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
    v18 = (float32x2_t *)(v17 + 232 * v16);
    v20 = v18[10].f32[0];
    v19 = v18 + 10;
    if (v20 > *(float *)&v68
      || (v19->f32[1] <= *((float *)&v68 + 1) ? (v21 = *(float *)(v17 + 232 * v16 + 88) <= *(float *)&v68) : (v21 = 1),
          v21 || *(float *)(v17 + 232 * v16 + 92) <= *((float *)&v68 + 1)))
    {
      v22 = *v19;
      v23 = *(float32x2_t *)(v17 + 232 * v16 + 88);
      v24 = v22.f32[0];
      if (*(float *)&v68 >= v22.f32[0])
      {
        if (*(float *)&v68 >= v23.f32[0])
        {
          v25 = 1;
          v26 = v22;
          v27 = v23;
          v28 = v23.f32[1];
          v29 = v22.f32[1];
          if (v22.f32[1] > *((float *)&v68 + 1))
            goto LABEL_24;
        }
        else
        {
          v25 = 0;
          v26 = v22;
          v27 = v23;
          v28 = v23.f32[1];
          v29 = v22.f32[1];
          if (v22.f32[1] > *((float *)&v68 + 1))
            goto LABEL_24;
        }
      }
      else
      {
        v25 = -1;
        v26 = v22;
        v27 = v23;
        v28 = v23.f32[1];
        v29 = v22.f32[1];
        if (v22.f32[1] > *((float *)&v68 + 1))
        {
LABEL_24:
          v30 = 0;
          v31 = -1;
          v32 = vsub_f32(v27, v26);
          if (v25 != 1)
            goto LABEL_25;
          goto LABEL_31;
        }
      }
      if (v28 <= *((float *)&v68 + 1))
      {
        v30 = 1;
        v31 = 1;
        v32 = vsub_f32(v27, v26);
        if (v25 != 1)
          goto LABEL_25;
      }
      else
      {
        v30 = 0;
        v31 = 0;
        v32 = vsub_f32(v27, v26);
        if (v25 != 1)
        {
LABEL_25:
          if (v25)
          {
            if ((v31 + 1) > 1)
            {
              if (v30)
              {
                v26.f32[0] = v24 - v32.f32[0];
                v27.i32[1] = vadd_f32(v32, v27).i32[1];
                v33 = 1;
                *(float32x2_t *)&v71 = v26;
                v34 = v24 - v32.f32[0];
                if ((float)(v24 - v32.f32[0]) <= v23.f32[0])
                  goto LABEL_39;
LABEL_38:
                LODWORD(v71) = v23.i32[0];
                v34 = v23.f32[0];
                goto LABEL_39;
              }
LABEL_37:
              v33 = 0;
              v27 = vadd_f32(v32, v27);
              *(float32x2_t *)&v71 = v26;
              v34 = v26.f32[0];
              if (v26.f32[0] <= v23.f32[0])
                goto LABEL_39;
              goto LABEL_38;
            }
          }
          else if (v29 <= *((float *)&v68 + 1))
          {
            goto LABEL_37;
          }
          v26 = vsub_f32(v26, v32);
          v33 = 3;
          *(float32x2_t *)&v71 = v26;
          v34 = v26.f32[0];
          if (v26.f32[0] > v23.f32[0])
            goto LABEL_38;
LABEL_39:
          v35 = v26.f32[1];
          if (v28 < v26.f32[1])
          {
            *((float *)&v71 + 1) = v28;
            v35 = v28;
            *((float32x2_t *)&v71 + 1) = v27;
            if (v34 <= v27.f32[0])
            {
LABEL_41:
              if (v35 <= v27.f32[1])
              {
LABEL_43:
                sub_223F87AC8(&v70, (uint64_t **)(a1 + 24), &v71);
                v36 = *(uint64_t **)(a1 + 8);
                v37 = *v36;
                v38 = *(_QWORD *)v36[1];
                v39 = v70;
                if (*((_QWORD *)&v70 + 1))
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v70 + 1) + 24))(*((_QWORD *)&v70 + 1));
                  (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 24))(*((_QWORD *)&v39 + 1));
                }
                v40 = v38 + 232 * v37;
                v41 = *(_QWORD *)(v40 + 8);
                *(_OWORD *)v40 = v39;
                if (v41)
                  (*(void (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41);
                if (*((_QWORD *)&v39 + 1))
                  (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 40))(*((_QWORD *)&v39 + 1));
                v42 = *(_QWORD *)v39;
                v43 = **(_QWORD **)(v39 + 8);
                v45 = *(_QWORD *)(a1 + 8);
                v44 = *(_QWORD *)(a1 + 16);
                if (v44)
                {
                  (*(void (**)(_QWORD))(*(_QWORD *)v44 + 24))(*(_QWORD *)(a1 + 16));
                  (*(void (**)(uint64_t))(*(_QWORD *)v44 + 24))(v44);
                }
                v46 = v43 + 232 * v42 + 16 * v33;
                v47 = *(_QWORD *)(v46 + 24);
                *(_QWORD *)(v46 + 16) = v45;
                *(_QWORD *)(v46 + 24) = v44;
                if (v47)
                  (*(void (**)(uint64_t))(*(_QWORD *)v47 + 40))(v47);
                if (v44)
                  (*(void (**)(uint64_t))(*(_QWORD *)v44 + 40))(v44);
                if (*((_QWORD *)&v39 + 1))
                  (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 24))(*((_QWORD *)&v39 + 1));
                v48 = *(_QWORD *)(a1 + 16);
                *(_OWORD *)(a1 + 8) = v39;
                if (v48)
                  (*(void (**)(uint64_t))(*(_QWORD *)v48 + 40))(v48);
                v49 = *((_QWORD *)&__p + 1);
                v50 = (((_QWORD)v75 - *((_QWORD *)&__p + 1)) << 6) - 1;
                if ((_QWORD)v75 == *((_QWORD *)&__p + 1))
                  v50 = 0;
                v51 = *((_QWORD *)&v76 + 1) + v76;
                if (v50 == *((_QWORD *)&v76 + 1) + (_QWORD)v76)
                {
                  sub_223EE3EF8((uint64_t)&__p);
                  v49 = *((_QWORD *)&__p + 1);
                  v51 = *((_QWORD *)&v76 + 1) + v76;
                }
                *((_QWORD *)&v12 + 1) = *((_QWORD *)&v68 + 1);
                *(_QWORD *)(*(_QWORD *)(v49 + ((v51 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v51 & 0x1FF)) = v68;
                ++*((_QWORD *)&v76 + 1);
                if (*((_QWORD *)&v39 + 1))
                  (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 40))(*((_QWORD *)&v39 + 1));
                goto LABEL_6;
              }
LABEL_42:
              DWORD1(v71) = v27.i32[1];
              *((float *)&v71 + 3) = v35;
              goto LABEL_43;
            }
          }
          else
          {
            *((float32x2_t *)&v71 + 1) = v27;
            if (v34 <= v27.f32[0])
              goto LABEL_41;
          }
          LODWORD(v71) = v27.i32[0];
          *((float *)&v71 + 2) = v34;
          if (v35 <= v27.f32[1])
            goto LABEL_43;
          goto LABEL_42;
        }
      }
LABEL_31:
      if (v29 <= *((float *)&v68 + 1))
        goto LABEL_37;
      v27.f32[0] = v32.f32[0] + v23.f32[0];
      v26.i32[1] = vsub_f32(v26, v32).i32[1];
      v33 = 2;
      *(float32x2_t *)&v71 = v26;
      v34 = v26.f32[0];
      if (v26.f32[0] > v23.f32[0])
        goto LABEL_38;
      goto LABEL_39;
    }
LABEL_6:
    v15 = *((_QWORD *)&v76 + 1);
  }
  while (*((_QWORD *)&v76 + 1));
  v13 = (void **)*((_QWORD *)&__p + 1);
  v14 = (void **)v75;
LABEL_84:
  *((_QWORD *)&v76 + 1) = 0;
  v63 = (char *)v14 - (char *)v13;
  if ((unint64_t)((char *)v14 - (char *)v13) >= 0x11)
  {
    do
    {
      operator delete(*v13);
      v14 = (void **)v75;
      v13 = (void **)(*((_QWORD *)&__p + 1) + 8);
      *((_QWORD *)&__p + 1) = v13;
      v63 = v75 - (_QWORD)v13;
    }
    while ((_QWORD)v75 - (_QWORD)v13 > 0x10uLL);
  }
  v64 = v63 >> 3;
  if (v64 == 1)
  {
    v65 = 256;
LABEL_90:
    *(_QWORD *)&v76 = v65;
  }
  else if (v64 == 2)
  {
    v65 = 512;
    goto LABEL_90;
  }
  if (v13 != v14)
  {
    do
    {
      v66 = *v13++;
      operator delete(v66);
    }
    while (v13 != v14);
    if ((_QWORD)v75 != *((_QWORD *)&__p + 1))
      *(_QWORD *)&v75 = v75 + ((*((_QWORD *)&__p + 1) - v75 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if ((_QWORD)__p)
    operator delete((void *)__p);
}

void sub_223F870BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
  _Unwind_Resume(a1);
}

void sub_223F87120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
  sub_22323FBC0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223F871AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v2 = a1 + 24;
  if (0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) - **(_QWORD **)(a1 + 24)) >> 3) != (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3)
  {
    while (1)
    {
      v4 = (_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 232 * **(_QWORD **)(a1 + 8));
      v5 = v4[3];
      if (!v5 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5))
      {
        v6 = v4[5];
        if (!v6 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6))
        {
          v7 = v4[7];
          if (!v7 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7))
          {
            result = v4[9];
            if (!result)
              return result;
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
            if (!result)
              return result;
          }
        }
      }
      v9 = *(_QWORD *)(a1 + 8);
      v8 = *(_QWORD *)(a1 + 16);
      if (v8)
        (*(void (**)(_QWORD))(*(_QWORD *)v8 + 24))(*(_QWORD *)(a1 + 16));
      v10 = (_QWORD *)(**(_QWORD **)(v9 + 8) + 232 * *(_QWORD *)v9);
      v11 = v10[3];
      v35 = v11;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
      v12 = v10[5];
      v38 = v12;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      v13 = v10[7];
      v41 = v13;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      v14 = v10[9];
      v44 = v14;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
      if (v35)
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 48))(v35);
        v16 = v15 == 0;
        v17 = v15 != 0;
        v18 = v38;
        if (!v38)
          goto LABEL_33;
      }
      else
      {
        v17 = 0;
        v16 = 1;
        v18 = v38;
        if (!v38)
          goto LABEL_33;
      }
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18);
      if (v19)
        v20 = v16;
      else
        v20 = 1;
      if (v19)
        v17 = 1;
      if (v20 != 1)
      {
LABEL_40:
        if (v44)
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 40))(v44);
        if (v41)
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41);
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
        result = v35;
        if (v35)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
        v22 = 1;
        if (v8)
          goto LABEL_58;
        goto LABEL_59;
      }
LABEL_33:
      if (v41 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 48))(v41))
      {
        if (v17)
          goto LABEL_40;
        v17 = 1;
      }
      if (v44)
      {
        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 48))(v44);
        if (v17 && v21)
          goto LABEL_40;
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 40))(v44);
      }
      if (v41)
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41);
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
      result = v35;
      if (v35)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
      v22 = 0;
      if (v8)
LABEL_58:
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
LABEL_59:
      if ((v22 & 1) != 0)
        return result;
      v23 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 232 * **(_QWORD **)(a1 + 8);
      v25 = *(_QWORD *)(v23 + 16);
      v24 = (_QWORD *)(v23 + 16);
      v34 = v25;
      v26 = v24[1];
      v36 = v26;
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
      v37 = v24[2];
      v27 = v24[3];
      v39 = v27;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
      v40 = v24[4];
      v28 = v24[5];
      v42 = v28;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
      v43 = v24[6];
      v29 = v24[7];
      v45 = v29;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
      if (v36
        && (v30 = v34,
            (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36),
            (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 48))(v36)))
      {
        v31 = v36;
      }
      else
      {
        v30 = v37;
        v31 = v39;
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
        if (!v39 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 48))(v39))
        {
          v30 = v40;
          if (v42)
            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
          if (v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39);
          if (v42 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 48))(v42))
          {
            v31 = v42;
          }
          else
          {
            v30 = v43;
            v31 = v45;
            if (v45)
              (*(void (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45);
            if (v42)
              (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
          }
        }
      }
      v32 = *(_QWORD *)(**(_QWORD **)(v30 + 8) + 232 * *(_QWORD *)v30 + 8);
      if (v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
      }
      sub_223F8A11C(v2, **(_QWORD **)(a1 + 8));
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
      v33 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v30;
      *(_QWORD *)(a1 + 16) = v31;
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 40))(v33);
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
      if (v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
      if (v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39);
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    }
  }
  result = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_223F87744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  sub_223F8461C(&a9);
  _Unwind_Resume(a1);
}

void sub_223F87848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223F7A510(&a9);
  JUMPOUT(0x223F87854);
}

uint64_t sub_223F87878(uint64_t a1, uint64_t a2, uint64_t **a3, __int128 *a4, unsigned int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t **v25;

  v9 = a5;
  v10 = *(_QWORD *)(*(_QWORD *)(*a3)[1] + 232 * **a3 + 16 * a5 + 24);
  if (v10
    && ((*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10),
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10),
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10),
        v11))
  {
    v12 = *(_QWORD *)(*a3)[1] + 232 * **a3 + 16 * v9;
    result = *(_QWORD *)(v12 + 24);
    *(_QWORD *)a1 = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(a1 + 8) = result;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  else
  {
    sub_223F88A68((_OWORD *)a1, (uint64_t **)(a2 + 24), a4);
    v14 = **a3;
    v15 = *(_QWORD *)(*a3)[1];
    v17 = *(_QWORD **)a1;
    v16 = *(_QWORD *)(a1 + 8);
    if (v16)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
    }
    v18 = v15 + 232 * v14 + 16 * v9;
    v19 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v18 + 16) = v17;
    *(_QWORD *)(v18 + 24) = v16;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
    v21 = v17;
    v20 = *v17;
    v22 = *(_QWORD *)v21[1];
    v24 = *a3;
    v23 = a3[1];
    if (v23)
    {
      (*(void (**)(uint64_t *))(*v23 + 24))(v23);
      (*(void (**)(uint64_t *))(*v23 + 24))(v23);
    }
    v25 = (uint64_t **)(v22 + 232 * v20);
    result = (uint64_t)v25[1];
    *v25 = v24;
    v25[1] = v23;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    if (v23)
      return (*(uint64_t (**)(uint64_t *))(*v23 + 40))(v23);
  }
  return result;
}

void sub_223F87A40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223F87AC8(_OWORD *a1, uint64_t **a2, __int128 *a3)
{
  uint64_t *v5;
  uint64_t v6;
  __int128 v7;
  void **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  void **v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t *v17;
  char *v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  void *v25;
  void **v26;
  _QWORD *v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  __int128 v33;
  __int128 v34;
  void *__p[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;
  char v42;
  unint64_t *v43;
  __int128 *v44;
  __int128 *v45;
  char v46;
  __int128 v47;
  __int128 v48;

  v5 = a2[2];
  if (a2[1] == v5)
  {
    v13 = (void **)*a2;
    v15 = **a2;
    v14 = (*a2)[1];
    v6 = 0x34F72C234F72C235 * ((uint64_t)(v14 - v15) >> 3);
    v17 = (unint64_t *)(*a2 + 2);
    v16 = (void *)*v17;
    if (v14 >= *v17)
    {
      v19 = v6 + 1;
      if ((unint64_t)(v6 + 1) > 0x11A7B9611A7B961)
        sub_22316E078();
      v20 = *a3;
      if (0x69EE58469EE5846ALL * (((uint64_t)v16 - v15) >> 3) > v19)
        v19 = 0x69EE58469EE5846ALL * (((uint64_t)v16 - v15) >> 3);
      if ((unint64_t)(0x34F72C234F72C235 * (((uint64_t)v16 - v15) >> 3)) >= 0x8D3DCB08D3DCB0)
        v21 = 0x11A7B9611A7B961;
      else
        v21 = v19;
      *(_QWORD *)&v37 = *a2 + 2;
      if (v21)
      {
        v33 = v20;
        if (v21 > 0x11A7B9611A7B961)
          sub_223174E94();
        v22 = (char *)operator new(232 * v21);
        v20 = v33;
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[8 * ((uint64_t)(v14 - v15) >> 3)];
      __p[0] = v22;
      __p[1] = v23;
      *(_OWORD *)v23 = 0u;
      *((_OWORD *)v23 + 1) = 0u;
      v24 = &v22[232 * v21];
      *((_OWORD *)v23 + 2) = 0u;
      *((_OWORD *)v23 + 3) = 0u;
      *((_OWORD *)v23 + 4) = 0u;
      *((_OWORD *)v23 + 5) = v20;
      v23[96] = 0;
      v23[216] = 0;
      v23[224] = 1;
      v18 = v23 + 232;
      *(_QWORD *)&v36 = v23 + 232;
      *((_QWORD *)&v36 + 1) = v24;
      *(_QWORD *)&v48 = v23;
      *((_QWORD *)&v48 + 1) = v23;
      v47 = v48;
      v43 = v17;
      v44 = &v47;
      v45 = &v48;
      v46 = 0;
      if (v14 == v15)
      {
        v25 = (void *)v14;
      }
      else
      {
        do
        {
          v14 -= 232;
          sub_223F88160(v23 - 232, v14);
          v23 = (char *)(*((_QWORD *)&v48 + 1) - 232);
          *((_QWORD *)&v48 + 1) -= 232;
        }
        while (v14 != v15);
        v25 = *v13;
        v14 = (unint64_t)v13[1];
        v16 = v13[2];
        v24 = (char *)*((_QWORD *)&v36 + 1);
        v18 = (char *)v36;
      }
      *v13 = v23;
      __p[0] = v25;
      __p[1] = v25;
      v13[1] = v18;
      *(_QWORD *)&v36 = v14;
      v13[2] = v24;
      *((_QWORD *)&v36 + 1) = v16;
      sub_223F88444(__p, (uint64_t)v25);
      if (__p[0])
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)(v14 + 48) = 0u;
      *(_OWORD *)(v14 + 64) = 0u;
      *(_OWORD *)(v14 + 16) = 0u;
      *(_OWORD *)(v14 + 32) = 0u;
      *(_OWORD *)v14 = 0u;
      *(_QWORD *)(v14 + 80) = *(_QWORD *)a3;
      *(_QWORD *)(v14 + 88) = *((_QWORD *)a3 + 1);
      *(_BYTE *)(v14 + 96) = 0;
      *(_BYTE *)(v14 + 216) = 0;
      *(_BYTE *)(v14 + 224) = 1;
      v18 = (char *)(v14 + 232);
    }
    v13[1] = v18;
    v26 = (void **)*a2;
    v27 = (_QWORD *)operator new();
    *v27 = v6;
    v27[1] = v26;
    __p[0] = v27;
    v28 = (char *)operator new();
    *(_QWORD *)v28 = &off_24EC64700;
    *(int64x2_t *)(v28 + 8) = vdupq_n_s64(1uLL);
    *((_QWORD *)v28 + 3) = v27;
    __p[1] = v28;
    v29 = a2[5];
    if (v29 >= a2[6])
    {
      v30 = sub_223F88508((void **)a2 + 4, (uint64_t)__p);
      v12 = __p[1];
      a2[5] = (uint64_t *)v30;
      if (v12)
LABEL_35:
        (*(void (**)(void *))(*(_QWORD *)v12 + 32))(v12);
    }
    else
    {
      *v29 = (uint64_t)v27;
      v29[1] = (uint64_t)v28;
      a2[5] = v29 + 2;
    }
  }
  else
  {
    v6 = *(v5 - 1);
    a2[2] = v5 - 1;
    v37 = 0u;
    v38 = 0u;
    *(_OWORD *)__p = 0u;
    v36 = 0u;
    v7 = *a3;
    v39 = 0u;
    v40 = v7;
    v41 = 0;
    v42 = 0;
    sub_223F87F80(**a2 + 232 * v6, (uint64_t)__p);
    if (*((_QWORD *)&v39 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 40))(*((_QWORD *)&v39 + 1));
    if (*((_QWORD *)&v38 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v38 + 1) + 40))(*((_QWORD *)&v38 + 1));
    if (*((_QWORD *)&v37 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v37 + 1) + 40))(*((_QWORD *)&v37 + 1));
    if (*((_QWORD *)&v36 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v36 + 1) + 40))(*((_QWORD *)&v36 + 1));
    if (__p[1])
      (*(void (**)(void *))(*(_QWORD *)__p[1] + 40))(__p[1]);
    v8 = (void **)*a2;
    v9 = (_QWORD *)operator new();
    *v9 = v6;
    v9[1] = v8;
    v10 = operator new();
    *(_QWORD *)v10 = &off_24EC64700;
    *(int64x2_t *)(v10 + 8) = vdupq_n_s64(1uLL);
    *(_QWORD *)(v10 + 24) = v9;
    v11 = &a2[4][2 * v6];
    v12 = (void *)v11[1];
    *v11 = (uint64_t)v9;
    v11[1] = v10;
    if (v12)
      goto LABEL_35;
  }
  v34 = *(_OWORD *)&a2[4][2 * v6];
  v31 = a2[4][2 * v6 + 1];
  (*(void (**)(_QWORD))(**((_QWORD **)&v34 + 1) + 24))(*((_QWORD *)&v34 + 1));
  *a1 = v34;
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
}

void sub_223F87EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12);
  _Unwind_Resume(exception_object);
}

void sub_223F87F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (!*(_BYTE *)(v3 - 120))
    sub_223F88398((_QWORD *)(v3 - 144));
  sub_223F8812C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223F87F80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  if (!*(_BYTE *)(a1 + 224))
  {
    sub_223F888F4(a1, a2);
    *(_BYTE *)(a1 + 224) = 1;
    return a1;
  }
  v5 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
    (*(void (**)(_QWORD))(*(_QWORD *)v4 + 24))(*(_QWORD *)(a2 + 8));
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v4;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  sub_223F88804((_QWORD *)(a1 + 16), (uint64_t *)(a2 + 16));
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v7 = (_OWORD *)(a1 + 96);
  v8 = (_OWORD *)(a2 + 96);
  if (*(unsigned __int8 *)(a1 + 216) == *(unsigned __int8 *)(a2 + 216))
  {
    if (*(_BYTE *)(a1 + 216))
    {
      if (*(unsigned __int8 *)(a1 + 192) == *(unsigned __int8 *)(a2 + 192))
      {
        if (*(_BYTE *)(a1 + 192))
        {
          v9 = *(_OWORD *)(a2 + 112);
          *v7 = *v8;
          *(_OWORD *)(a1 + 112) = v9;
          v10 = *(_OWORD *)(a2 + 128);
          v11 = *(_OWORD *)(a2 + 144);
          v12 = *(_OWORD *)(a2 + 176);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
          *(_OWORD *)(a1 + 176) = v12;
          *(_OWORD *)(a1 + 128) = v10;
          *(_OWORD *)(a1 + 144) = v11;
        }
      }
      else if (*(_BYTE *)(a1 + 192))
      {
        *(_BYTE *)(a1 + 192) = 0;
      }
      else
      {
        v19 = *(_OWORD *)(a2 + 112);
        *v7 = *v8;
        *(_OWORD *)(a1 + 112) = v19;
        v20 = *(_OWORD *)(a2 + 128);
        v21 = *(_OWORD *)(a2 + 144);
        v22 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v22;
        *(_OWORD *)(a1 + 128) = v20;
        *(_OWORD *)(a1 + 144) = v21;
        *(_BYTE *)(a1 + 192) = 1;
      }
      v23 = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 205) = *(_QWORD *)(a2 + 205);
      *(_QWORD *)(a1 + 200) = v23;
      return a1;
    }
    return a1;
  }
  if (*(_BYTE *)(a1 + 216))
  {
    *(_BYTE *)(a1 + 216) = 0;
    return a1;
  }
  else
  {
    *(_BYTE *)(a1 + 96) = 0;
    *(_BYTE *)(a1 + 192) = 0;
    if (*(_BYTE *)(a2 + 192))
    {
      v14 = *(_OWORD *)(a2 + 112);
      *v7 = *v8;
      *(_OWORD *)(a1 + 112) = v14;
      v15 = *(_OWORD *)(a2 + 128);
      v16 = *(_OWORD *)(a2 + 144);
      v17 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v17;
      *(_OWORD *)(a1 + 128) = v15;
      *(_OWORD *)(a1 + 144) = v16;
      *(_BYTE *)(a1 + 192) = 1;
    }
    v18 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 205) = *(_QWORD *)(a2 + 205);
    *(_QWORD *)(a1 + 200) = v18;
    *(_BYTE *)(a1 + 216) = 1;
    return a1;
  }
}

void **sub_223F8812C(void **a1)
{
  sub_223F88444(a1, (uint64_t)a1[1]);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_BYTE *sub_223F88160(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[224] = 0;
  if (*(_BYTE *)(a2 + 224))
  {
    sub_223F88224((uint64_t)a1, a2);
    a1[224] = 1;
  }
  return a1;
}

void sub_223F881A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(v1 + 224))
  {
    v3 = *(_QWORD *)(v1 + 72);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    v4 = *(_QWORD *)(v1 + 56);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    v5 = *(_QWORD *)(v1 + 40);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v6 = *(_QWORD *)(v1 + 24);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    v7 = *(_QWORD *)(v1 + 8);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F88224(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = v9;
  *(_BYTE *)(a1 + 216) = 0;
  if (*(_BYTE *)(a2 + 216))
  {
    *(_BYTE *)(a1 + 192) = 0;
    if (*(_BYTE *)(a2 + 192))
    {
      v10 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v10;
      v11 = *(_OWORD *)(a2 + 128);
      v12 = *(_OWORD *)(a2 + 144);
      v13 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v13;
      *(_OWORD *)(a1 + 128) = v11;
      *(_OWORD *)(a1 + 144) = v12;
      *(_BYTE *)(a1 + 192) = 1;
    }
    v14 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 205) = *(_QWORD *)(a2 + 205);
    *(_QWORD *)(a1 + 200) = v14;
    *(_BYTE *)(a1 + 216) = 1;
  }
  return a1;
}

void sub_223F88344(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  _Unwind_Resume(exception_object);
}

void sub_223F88368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  while (1)
  {
    v2 = *(_QWORD *)(v1 - 8);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    v1 -= 16;
    if (v1 == v0)
      JUMPOUT(0x223F88348);
  }
}

_QWORD *sub_223F88398(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  while (v1 != v2)
  {
    if (*(_BYTE *)(v1 + 224))
    {
      v3 = *(_QWORD *)(v1 + 72);
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
      v4 = *(_QWORD *)(v1 + 56);
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      v5 = *(_QWORD *)(v1 + 40);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      v6 = *(_QWORD *)(v1 + 24);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      result = *(_QWORD **)(v1 + 8);
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
    }
    v1 += 232;
  }
  return result;
}

_QWORD *sub_223F88444(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = result[2];
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v4[2] = v2 - 232;
      if (*(_BYTE *)(v2 - 8))
      {
        v5 = *(_QWORD *)(v2 - 160);
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        v6 = *(_QWORD *)(v2 - 176);
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
        v7 = *(_QWORD *)(v2 - 192);
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
        v8 = *(_QWORD *)(v2 - 208);
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        result = *(_QWORD **)(v2 - 224);
        if (result)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
      }
      v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

char *sub_223F88508(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_22316E078();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 3 > v4)
    v4 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 60)
    sub_223174E94();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v3];
  v12 = &v10[v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v13 = v11 + 16;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v15 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v11[v16];
      *((_QWORD *)v17 - 2) = *(_QWORD *)&v14[v16 - 16];
      v18 = *(_QWORD *)&v14[v16 - 8];
      *((_QWORD *)v17 - 1) = v18;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
      v16 -= 16;
    }
    while (&v14[v16] != v15);
    v14 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = &v11[v16];
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v14)
    {
      v20 = *((_QWORD *)v19 - 1);
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
      v19 -= 16;
    }
  }
  if (v14)
    operator delete(v14);
  return v11 + 16;
}

uint64_t sub_223F886C4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    while (1)
    {
      v4 = i - 16;
      *(_QWORD *)(a1 + 16) = i - 16;
      v5 = *(_QWORD *)(i - 8);
      if (v5)
        break;
      i -= 16;
      if (v4 == v3)
        goto LABEL_6;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_223F8873C()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223F88750(uint64_t result)
{
  ++*(_QWORD *)(result + 8);
  return result;
}

uint64_t sub_223F88760(uint64_t result)
{
  ++*(_QWORD *)(result + 16);
  return result;
}

uint64_t sub_223F88770(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 8) - 1;
  *(_QWORD *)(result + 8) = v1;
  if (!v1)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
      MEMORY[0x227684CE8](v3, 0x1020C405730B0C9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  }
  return result;
}

_QWORD *sub_223F887D0(_QWORD *result)
{
  uint64_t v1;

  v1 = result[2] - 1;
  result[2] = v1;
  if (result)
  {
    if (!v1)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

uint64_t sub_223F887F4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_223F887FC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

_QWORD *sub_223F88804(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *a2;
  v4 = a2[1];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(a2[1]);
  v6 = a1[1];
  *a1 = v5;
  a1[1] = v4;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  v8 = a2[2];
  v7 = a2[3];
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(a2[3]);
  v9 = a1[3];
  a1[2] = v8;
  a1[3] = v7;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  v11 = a2[4];
  v10 = a2[5];
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(a2[5]);
  v12 = a1[5];
  a1[4] = v11;
  a1[5] = v10;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
  v14 = a2[6];
  v13 = a2[7];
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  v15 = a1[7];
  a1[6] = v14;
  a1[7] = v13;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  return a1;
}

uint64_t sub_223F888F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = v9;
  *(_BYTE *)(a1 + 216) = 0;
  if (*(_BYTE *)(a2 + 216))
  {
    *(_BYTE *)(a1 + 192) = 0;
    if (*(_BYTE *)(a2 + 192))
    {
      v10 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v10;
      v11 = *(_OWORD *)(a2 + 128);
      v12 = *(_OWORD *)(a2 + 144);
      v13 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v13;
      *(_OWORD *)(a1 + 128) = v11;
      *(_OWORD *)(a1 + 144) = v12;
      *(_BYTE *)(a1 + 192) = 1;
    }
    v14 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 205) = *(_QWORD *)(a2 + 205);
    *(_QWORD *)(a1 + 200) = v14;
    *(_BYTE *)(a1 + 216) = 1;
  }
  return a1;
}

void sub_223F88A14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  _Unwind_Resume(exception_object);
}

void sub_223F88A38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  while (1)
  {
    v2 = *(_QWORD *)(v1 - 8);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    v1 -= 16;
    if (v1 == v0)
      JUMPOUT(0x223F88A18);
  }
}

uint64_t sub_223F88A68(_OWORD *a1, uint64_t **a2, __int128 *a3)
{
  uint64_t *v5;
  uint64_t v6;
  __int128 v7;
  void **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  void **v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t *v17;
  char *v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  void *v25;
  void **v26;
  _QWORD *v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  __int128 v33;
  __int128 v34;
  void *__p[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;
  char v42;
  unint64_t *v43;
  __int128 *v44;
  __int128 *v45;
  char v46;
  __int128 v47;
  __int128 v48;

  v5 = a2[2];
  if (a2[1] == v5)
  {
    v13 = (void **)*a2;
    v15 = **a2;
    v14 = (*a2)[1];
    v6 = 0x34F72C234F72C235 * ((uint64_t)(v14 - v15) >> 3);
    v17 = (unint64_t *)(*a2 + 2);
    v16 = (void *)*v17;
    if (v14 >= *v17)
    {
      v19 = v6 + 1;
      if ((unint64_t)(v6 + 1) > 0x11A7B9611A7B961)
        sub_22316E078();
      v20 = *a3;
      if (0x69EE58469EE5846ALL * (((uint64_t)v16 - v15) >> 3) > v19)
        v19 = 0x69EE58469EE5846ALL * (((uint64_t)v16 - v15) >> 3);
      if ((unint64_t)(0x34F72C234F72C235 * (((uint64_t)v16 - v15) >> 3)) >= 0x8D3DCB08D3DCB0)
        v21 = 0x11A7B9611A7B961;
      else
        v21 = v19;
      *(_QWORD *)&v37 = *a2 + 2;
      if (v21)
      {
        v33 = v20;
        if (v21 > 0x11A7B9611A7B961)
          sub_223174E94();
        v22 = (char *)operator new(232 * v21);
        v20 = v33;
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[8 * ((uint64_t)(v14 - v15) >> 3)];
      __p[0] = v22;
      __p[1] = v23;
      *(_OWORD *)v23 = 0u;
      *((_OWORD *)v23 + 1) = 0u;
      v24 = &v22[232 * v21];
      *((_OWORD *)v23 + 2) = 0u;
      *((_OWORD *)v23 + 3) = 0u;
      *((_OWORD *)v23 + 4) = 0u;
      *((_OWORD *)v23 + 5) = v20;
      v23[96] = 0;
      v23[216] = 0;
      v23[224] = 1;
      v18 = v23 + 232;
      *(_QWORD *)&v36 = v23 + 232;
      *((_QWORD *)&v36 + 1) = v24;
      *(_QWORD *)&v48 = v23;
      *((_QWORD *)&v48 + 1) = v23;
      v47 = v48;
      v43 = v17;
      v44 = &v47;
      v45 = &v48;
      v46 = 0;
      if (v14 == v15)
      {
        v25 = (void *)v14;
      }
      else
      {
        do
        {
          v14 -= 232;
          sub_223F88160(v23 - 232, v14);
          v23 = (char *)(*((_QWORD *)&v48 + 1) - 232);
          *((_QWORD *)&v48 + 1) -= 232;
        }
        while (v14 != v15);
        v25 = *v13;
        v14 = (unint64_t)v13[1];
        v16 = v13[2];
        v24 = (char *)*((_QWORD *)&v36 + 1);
        v18 = (char *)v36;
      }
      *v13 = v23;
      __p[0] = v25;
      __p[1] = v25;
      v13[1] = v18;
      *(_QWORD *)&v36 = v14;
      v13[2] = v24;
      *((_QWORD *)&v36 + 1) = v16;
      sub_223F88444(__p, (uint64_t)v25);
      if (__p[0])
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)(v14 + 48) = 0u;
      *(_OWORD *)(v14 + 64) = 0u;
      *(_OWORD *)(v14 + 16) = 0u;
      *(_OWORD *)(v14 + 32) = 0u;
      *(_OWORD *)v14 = 0u;
      *(_QWORD *)(v14 + 80) = *(_QWORD *)a3;
      *(_QWORD *)(v14 + 88) = *((_QWORD *)a3 + 1);
      *(_BYTE *)(v14 + 96) = 0;
      *(_BYTE *)(v14 + 216) = 0;
      *(_BYTE *)(v14 + 224) = 1;
      v18 = (char *)(v14 + 232);
    }
    v13[1] = v18;
    v26 = (void **)*a2;
    v27 = (_QWORD *)operator new();
    *v27 = v6;
    v27[1] = v26;
    __p[0] = v27;
    v28 = (char *)operator new();
    *(_QWORD *)v28 = &off_24EC64700;
    *(int64x2_t *)(v28 + 8) = vdupq_n_s64(1uLL);
    *((_QWORD *)v28 + 3) = v27;
    __p[1] = v28;
    v29 = a2[5];
    if (v29 >= a2[6])
    {
      v30 = sub_223F88508((void **)a2 + 4, (uint64_t)__p);
      v12 = __p[1];
      a2[5] = (uint64_t *)v30;
      if (v12)
LABEL_35:
        (*(void (**)(void *))(*(_QWORD *)v12 + 32))(v12);
    }
    else
    {
      *v29 = (uint64_t)v27;
      v29[1] = (uint64_t)v28;
      a2[5] = v29 + 2;
    }
  }
  else
  {
    v6 = *(v5 - 1);
    a2[2] = v5 - 1;
    v37 = 0u;
    v38 = 0u;
    *(_OWORD *)__p = 0u;
    v36 = 0u;
    v7 = *a3;
    v39 = 0u;
    v40 = v7;
    v41 = 0;
    v42 = 0;
    sub_223F87F80(**a2 + 232 * v6, (uint64_t)__p);
    if (*((_QWORD *)&v39 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 40))(*((_QWORD *)&v39 + 1));
    if (*((_QWORD *)&v38 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v38 + 1) + 40))(*((_QWORD *)&v38 + 1));
    if (*((_QWORD *)&v37 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v37 + 1) + 40))(*((_QWORD *)&v37 + 1));
    if (*((_QWORD *)&v36 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v36 + 1) + 40))(*((_QWORD *)&v36 + 1));
    if (__p[1])
      (*(void (**)(void *))(*(_QWORD *)__p[1] + 40))(__p[1]);
    v8 = (void **)*a2;
    v9 = (_QWORD *)operator new();
    *v9 = v6;
    v9[1] = v8;
    v10 = operator new();
    *(_QWORD *)v10 = &off_24EC64700;
    *(int64x2_t *)(v10 + 8) = vdupq_n_s64(1uLL);
    *(_QWORD *)(v10 + 24) = v9;
    v11 = &a2[4][2 * v6];
    v12 = (void *)v11[1];
    *v11 = (uint64_t)v9;
    v11[1] = v10;
    if (v12)
      goto LABEL_35;
  }
  v34 = *(_OWORD *)&a2[4][2 * v6];
  v31 = a2[4][2 * v6 + 1];
  (*(void (**)(_QWORD))(**((_QWORD **)&v34 + 1) + 24))(*((_QWORD *)&v34 + 1));
  *a1 = v34;
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
}

void sub_223F88E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12);
  _Unwind_Resume(exception_object);
}

void sub_223F88EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (!*(_BYTE *)(v3 - 120))
    sub_223F88398((_QWORD *)(v3 - 144));
  sub_223F8812C((void **)va);
  _Unwind_Resume(a1);
}

void ***sub_223F88F20(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  uint64_t v6;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = *((_QWORD *)v4 - 1);
          if (v6)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
          v4 -= 16;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_223F88FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  char *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  BOOL v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  unint64_t v62;
  int64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 *v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  _OWORD *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  int64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  void *v118;

  v3 = a1;
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  v6 = (v4 - v5) >> 3;
  v7 = v5;
  if (v4 == v5)
    v8 = 0;
  else
    v8 = 170 * v6 - 1;
  v10 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v11 = v9 + v10;
  if (v8 != v9 + v10)
    goto LABEL_88;
  if (v10 <= 0xA9)
    v12 = 0;
  else
    v12 = -1;
  if (v10 >= 0xAA)
  {
    *(_QWORD *)(a1 + 32) = v10 - 170;
    v17 = v5 + 8;
    v18 = *(_QWORD *)v5;
    *(_QWORD *)(a1 + 8) = v5 + 8;
    if (v4 != *(char **)(a1 + 24))
    {
LABEL_85:
      *(_QWORD *)v4 = v18;
LABEL_86:
      *(_QWORD *)(v3 + 16) += 8;
      goto LABEL_87;
    }
    v19 = *(char **)a1;
    if ((unint64_t)v17 > *(_QWORD *)a1)
    {
      v20 = (uint64_t)&v17[-*(_QWORD *)a1] >> 3;
      if (v20 >= -1)
        v21 = v20 + 1;
      else
        v21 = v20 + 2;
      v22 = v21 >> 1;
      v23 = -v22;
      v24 = &v17[-8 * v22];
      v25 = v4 - v17;
      if (v4 != v17)
      {
        memmove(&v17[-8 * v22], v17, v4 - v17);
        v4 = *(char **)(v3 + 8);
      }
      v26 = &v4[8 * v23];
      v4 = &v24[v25];
      goto LABEL_24;
    }
    v33 = (v4 - v19) >> 2;
    if (v4 == v19)
      v33 = 1;
    if (v33 >> 61)
      goto LABEL_123;
    v34 = v33 >> 2;
    v35 = 8 * v33;
    v36 = (char *)operator new(8 * v33);
    v37 = &v36[8 * v34];
    v39 = v4 - v17;
    v38 = v4 == v17;
    v4 = v37;
    if (!v38)
    {
      v4 = &v37[v39 & 0xFFFFFFFFFFFFFFF8];
      v40 = v39 - 8;
      if ((unint64_t)(v39 - 8) < 0x38)
      {
        v41 = &v36[8 * v34];
        do
        {
LABEL_82:
          v82 = *(_QWORD *)v17;
          v17 += 8;
          *(_QWORD *)v41 = v82;
          v41 += 8;
        }
        while (v41 != v4);
        goto LABEL_83;
      }
      v75 = &v36[8 * v34];
      v41 = v75;
      if ((unint64_t)(v75 - v17) < 0x20)
        goto LABEL_82;
      v76 = (v40 >> 3) + 1;
      v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
      v41 = &v37[v77];
      v17 += v77;
      v78 = (__int128 *)(v5 + 24);
      v79 = v75 + 16;
      v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v81 = *v78;
        *(v79 - 1) = *(v78 - 1);
        *v79 = v81;
        v78 += 2;
        v79 += 2;
        v80 -= 4;
      }
      while (v80);
      if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_82;
    }
LABEL_83:
    *(_QWORD *)v3 = v36;
    *(_QWORD *)(v3 + 8) = v37;
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)(v3 + 24) = &v36[v35];
    if (v19)
    {
      operator delete(v19);
      v4 = *(char **)(v3 + 16);
    }
    goto LABEL_85;
  }
  v13 = *(char **)(a1 + 24);
  v14 = (uint64_t)&v13[-*(_QWORD *)a1];
  if (v6 == v14 >> 3)
  {
    if (v14 >> 2 <= (unint64_t)(v6 + 1))
      v15 = v6 + 1;
    else
      v15 = v14 >> 2;
    if (!v15)
    {
      v16 = 0;
LABEL_28:
      v27 = operator new(0xFF0uLL);
      v28 = v27;
      v29 = v6 + v12;
      v30 = &v16[8 * v15];
      if (v29 == v15)
      {
        if (v15)
        {
          v31 = &v30[-((4 * v15 + 4) & 0xFFFFFFFFFFFFFFF8)];
          *(_QWORD *)v31 = v27;
          v32 = v31 + 8;
          if (v4 == v7)
            goto LABEL_53;
        }
        else
        {
          v31 = (char *)operator new(8uLL);
          v30 = v31 + 8;
          if (v16)
          {
            operator delete(v16);
            v7 = *(char **)(v3 + 8);
            v4 = *(char **)(v3 + 16);
          }
          v16 = v31;
          *(_QWORD *)v31 = v28;
          v32 = v31 + 8;
          if (v4 == v7)
            goto LABEL_53;
        }
      }
      else
      {
        v31 = &v16[8 * v29];
        *(_QWORD *)v31 = v27;
        v32 = v31 + 8;
        if (v4 == v7)
        {
LABEL_53:
          v53 = *(void **)v3;
          *(_QWORD *)v3 = v16;
          *(_QWORD *)(v3 + 8) = v31;
          *(_QWORD *)(v3 + 16) = v32;
          *(_QWORD *)(v3 + 24) = v30;
          if (v53)
            operator delete(v53);
          goto LABEL_87;
        }
      }
      do
      {
        if (v31 == v16)
        {
          if (v32 >= v30)
          {
            if (v30 == v16)
              v59 = 1;
            else
              v59 = (v30 - v16) >> 2;
            if (v59 >> 61)
              sub_223174E94();
            v60 = (char *)operator new(8 * v59);
            v61 = v60;
            v62 = (v59 + 3) >> 2;
            v31 = &v60[8 * v62];
            v63 = v32 - v16;
            v38 = v32 == v16;
            v32 = v31;
            if (!v38)
            {
              v32 = &v31[v63 & 0xFFFFFFFFFFFFFFF8];
              v64 = v63 - 8;
              v65 = &v60[8 * v62];
              v66 = v16;
              if (v64 < 0x38)
                goto LABEL_126;
              v67 = 8 * v62;
              v65 = &v60[8 * v62];
              v66 = v16;
              if ((unint64_t)(v65 - v16) < 0x20)
                goto LABEL_126;
              v68 = (v64 >> 3) + 1;
              v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
              v65 = &v31[v69];
              v66 = &v16[v69];
              v70 = (__int128 *)(v16 + 16);
              v71 = &v60[v67 + 16];
              v72 = v68 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v73 = *v70;
                *((_OWORD *)v71 - 1) = *(v70 - 1);
                *(_OWORD *)v71 = v73;
                v70 += 2;
                v71 += 32;
                v72 -= 4;
              }
              while (v72);
              if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_126:
                do
                {
                  v74 = *(_QWORD *)v66;
                  v66 += 8;
                  *(_QWORD *)v65 = v74;
                  v65 += 8;
                }
                while (v65 != v32);
              }
            }
            v30 = &v60[8 * v59];
            if (v16)
              operator delete(v16);
            v16 = v61;
          }
          else
          {
            v55 = (v30 - v32) >> 3;
            if (v55 >= -1)
              v56 = v55 + 1;
            else
              v56 = v55 + 2;
            v57 = v56 >> 1;
            v31 = &v16[8 * (v56 >> 1)];
            v58 = v16;
            if (v32 != v16)
            {
              memmove(v31, v16, v32 - v16);
              v58 = v32;
            }
            v32 = (char *)v58 + 8 * v57;
          }
        }
        v54 = *((_QWORD *)v4 - 1);
        v4 -= 8;
        *((_QWORD *)v31 - 1) = v54;
        v31 -= 8;
      }
      while (v4 != *(char **)(v3 + 8));
      goto LABEL_53;
    }
    if (!(v15 >> 61))
    {
      v16 = (char *)operator new(8 * v15);
      goto LABEL_28;
    }
LABEL_123:
    sub_223174E94();
  }
  if (v13 == v4)
  {
    v118 = operator new(0xFF0uLL);
    sub_22323CE2C((void **)v3, &v118);
    v42 = *(_QWORD **)(v3 + 8);
    v4 = *(char **)(v3 + 16);
    v43 = 169;
    if (v4 - (char *)v42 != 8)
      v43 = 170;
    v44 = *(char **)(v3 + 24);
    *(_QWORD *)(v3 + 32) = *(_QWORD *)(v3 + 32) + v43 - 170;
    v45 = (char *)(v42 + 1);
    v18 = *v42;
    *(_QWORD *)(v3 + 8) = v42 + 1;
    if (v4 != v44)
      goto LABEL_85;
    v46 = *(char **)v3;
    if ((unint64_t)v45 > *(_QWORD *)v3)
    {
      v47 = (uint64_t)&v45[-*(_QWORD *)v3] >> 3;
      if (v47 >= -1)
        v48 = v47 + 1;
      else
        v48 = v47 + 2;
      v49 = v48 >> 1;
      v50 = -v49;
      v51 = &v45[-8 * v49];
      v52 = v4 - v45;
      if (v4 != v45)
      {
        memmove(&v45[-8 * v49], v42 + 1, v4 - v45);
        v4 = *(char **)(v3 + 8);
      }
      v26 = &v4[8 * v50];
      v4 = &v51[v52];
LABEL_24:
      *(_QWORD *)(v3 + 8) = v26;
      *(_QWORD *)(v3 + 16) = v4;
      goto LABEL_85;
    }
    v101 = (v4 - v46) >> 2;
    if (v4 == v46)
      v101 = 1;
    if (v101 >> 61)
      goto LABEL_123;
    v102 = v101 >> 2;
    v103 = 8 * v101;
    v104 = (char *)operator new(8 * v101);
    v105 = &v104[8 * v102];
    v106 = v105;
    v107 = v4 - v45;
    if (v4 != v45)
    {
      v106 = &v105[v107 & 0xFFFFFFFFFFFFFFF8];
      v108 = v107 - 8;
      if ((unint64_t)(v107 - 8) >= 0x38)
      {
        v110 = &v104[8 * v102];
        v109 = v110;
        if ((unint64_t)(v110 - v45) >= 0x20)
        {
          v111 = (v108 >> 3) + 1;
          v112 = 8 * (v111 & 0x3FFFFFFFFFFFFFFCLL);
          v109 = &v105[v112];
          v45 += v112;
          v113 = (__int128 *)(v42 + 3);
          v114 = v110 + 16;
          v115 = v111 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v116 = *v113;
            *(v114 - 1) = *(v113 - 1);
            *v114 = v116;
            v113 += 2;
            v114 += 2;
            v115 -= 4;
          }
          while (v115);
          if (v111 == (v111 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_119;
        }
      }
      else
      {
        v109 = &v104[8 * v102];
      }
      do
      {
        v117 = *(_QWORD *)v45;
        v45 += 8;
        *(_QWORD *)v109 = v117;
        v109 += 8;
      }
      while (v109 != v106);
    }
LABEL_119:
    *(_QWORD *)v3 = v104;
    *(_QWORD *)(v3 + 8) = v105;
    *(_QWORD *)(v3 + 16) = v106;
    *(_QWORD *)(v3 + 24) = &v104[v103];
    if (v46)
    {
      operator delete(v46);
      v106 = *(char **)(v3 + 16);
    }
    *(_QWORD *)v106 = v18;
    goto LABEL_86;
  }
  v118 = operator new(0xFF0uLL);
  sub_22323CCA0((char **)v3, &v118);
LABEL_87:
  v9 = *(_QWORD *)(v3 + 40);
  v7 = *(char **)(v3 + 8);
  v4 = *(char **)(v3 + 16);
  v11 = *(_QWORD *)(v3 + 32) + v9;
LABEL_88:
  v83 = &v7[8 * (v11 / 0xAA)];
  v84 = *(_QWORD *)v83;
  v85 = *(_QWORD *)v83 + 24 * (v11 % 0xAA);
  if (v4 == v7)
    v86 = 0;
  else
    v86 = v85;
  v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86 - v84) >> 3);
  if ((uint64_t)(v86 - v84) < -23)
  {
    v91 = 168 - v87;
    v89 = &v83[-8 * (v91 / 0xAA)];
    v90 = *(_QWORD *)v89 + 24 * (170 * (v91 / 0xAA) - v91) + 4056;
    if (v86 == v90)
      return;
  }
  else
  {
    v88 = v87 + 1;
    v89 = &v83[8 * (v88 / 0xAA)];
    v90 = *(_QWORD *)v89 + 24 * (v88 % 0xAA);
    if (v86 == v90)
      return;
  }
  do
  {
    v92 = v84 + 4080;
    if (v83 == v89)
      v93 = v90;
    else
      v93 = v92;
    if (v86 == v93)
    {
      v93 = v86;
    }
    else
    {
      v94 = v3;
      v95 = 0;
      do
      {
        v97 = a2 + v95;
        v98 = v86 + v95;
        *(_QWORD *)v98 = *(_QWORD *)(a2 + v95);
        v99 = *(_QWORD *)(a2 + v95 + 8);
        *(_QWORD *)(v98 + 8) = v99;
        if (v99)
          (*(void (**)(uint64_t))(*(_QWORD *)v99 + 24))(v99);
        v96 = *(_WORD *)(v97 + 16);
        *(_BYTE *)(v98 + 18) = *(_BYTE *)(v97 + 18);
        *(_WORD *)(v98 + 16) = v96;
        v95 += 24;
      }
      while (v98 + 24 != v93);
      v3 = v94;
      v9 = *(_QWORD *)(v94 + 40);
      a2 += v95;
    }
    v9 -= 0x5555555555555555 * ((uint64_t)(v93 - v86) >> 3);
    *(_QWORD *)(v3 + 40) = v9;
    if (v83 == v89)
      break;
    v100 = *((_QWORD *)v83 + 1);
    v83 += 8;
    v84 = v100;
    v86 = v100;
  }
  while (v100 != v90);
}

void sub_223F896F0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_223F89700(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_end_catch();
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223F8972C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 40) -= 0x5555555555555555 * (v2 >> 3);
  _Unwind_Resume(a1);
}

uint64_t sub_223F89748(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v11 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 / 0xAA];
    v6 = (unint64_t)*v5;
    v7 = (unint64_t)*v5 + 24 * (v4 % 0xAA);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 40) + v4) % 0xAA);
    if (v7 != v8)
    {
      do
      {
        v9 = *(_QWORD *)(v7 + 8);
        if (v9)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
          v6 = (unint64_t)*v5;
        }
        v7 += 24;
        if (v7 - v6 == 4080)
        {
          v10 = (unint64_t)v5[1];
          ++v5;
          v6 = v10;
          v7 = v10;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
    *(_QWORD *)(a1 + 40) = 0;
    v11 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v3 = *(void ***)(a1 + 16);
        v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
        *(_QWORD *)(a1 + 8) = v2;
        v11 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 85;
    goto LABEL_17;
  }
  if (v12 == 2)
  {
    v13 = 170;
LABEL_17:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_223F898DC(char **a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  char *v22;
  char *v23;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_22316E078();
  v10 = a1[2] - v3;
  if (v10 >> 3 > v6)
    v6 = v10 >> 3;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
    v11 = 0xFFFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  if (v11)
  {
    if (v11 >> 60)
      sub_223174E94();
    v12 = (char *)operator new(16 * v11);
    v13 = &v12[16 * v5];
    v14 = &v12[16 * v11];
    v23 = v14;
    *(_QWORD *)v13 = a2;
    *((_QWORD *)v13 + 1) = a3;
    if (!a3)
    {
LABEL_10:
      v15 = v13 + 16;
      v22 = v13 + 16;
      if (v4 != v3)
        goto LABEL_11;
LABEL_18:
      v19 = v3;
      goto LABEL_19;
    }
  }
  else
  {
    v13 = (char *)(16 * v5);
    v14 = 0;
    v23 = 0;
    *(_QWORD *)v13 = a2;
    *((_QWORD *)v13 + 1) = a3;
    if (!a3)
      goto LABEL_10;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  v3 = *a1;
  v4 = a1[1];
  v15 = v13 + 16;
  v22 = v13 + 16;
  if (v4 == *a1)
    goto LABEL_18;
LABEL_11:
  v16 = 0;
  do
  {
    v17 = &v13[v16];
    *((_QWORD *)v17 - 2) = *(_QWORD *)&v4[v16 - 16];
    v18 = *(_QWORD *)&v4[v16 - 8];
    *((_QWORD *)v17 - 1) = v18;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
    v16 -= 16;
  }
  while (&v4[v16] != v3);
  v19 = *a1;
  v3 = a1[1];
  v13 += v16;
  v15 = v22;
  v14 = v23;
LABEL_19:
  *a1 = v13;
  a1[1] = v15;
  a1[2] = v14;
  if (v3 == v19)
  {
    if (v3)
LABEL_21:
      operator delete(v3);
  }
  else
  {
    do
    {
      v21 = *((_QWORD *)v3 - 1);
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
      v3 -= 16;
    }
    while (v3 != v19);
    v3 = v19;
    if (v19)
      goto LABEL_21;
  }
  return v15;
}

void sub_223F89AA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223F89B08((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223F89AC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;

  va_start(va, a2);
  for (; v3; v3 += 16)
  {
    v6 = *(_QWORD *)(v2 + 16 * v4 + 8 + v3);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  }
  sub_223F89B08((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223F89B08(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    while (1)
    {
      v4 = i - 16;
      *(_QWORD *)(a1 + 16) = i - 16;
      v5 = *(_QWORD *)(i - 8);
      if (v5)
        break;
      i -= 16;
      if (v4 == v3)
        goto LABEL_6;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_223F89B7C(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  BOOL v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v35 = (v5 - v9) >> 2;
      if (v5 == v9)
        v35 = 1;
      if (!(v35 >> 61))
      {
        v36 = v35 >> 2;
        v37 = 8 * v35;
        v38 = (char *)operator new(8 * v35);
        v39 = &v38[8 * v36];
        v40 = &v38[v37];
        v42 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v42 & 0xFFFFFFFFFFFFFFF8];
          v43 = v42 - 8;
          if ((unint64_t)(v42 - 8) >= 0x38)
          {
            v73 = &v38[8 * v36];
            v44 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v43 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v44 = &v39[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v44 = &v38[8 * v36];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v44 = v80;
            v44 += 8;
          }
          while (v44 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      sub_223174E94();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0xFF0uLL);
      sub_22323CCA0((char **)a1, &v89);
      return;
    }
    v89 = operator new(0xFF0uLL);
    sub_22323CE2C((void **)a1, &v89);
    v45 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v45 + 1);
    v8 = *v45;
    *(_QWORD *)(a1 + 8) = v45 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v46 = (v5 - v9) >> 2;
      if (v5 == v9)
        v46 = 1;
      if (!(v46 >> 61))
      {
        v47 = v46 >> 2;
        v48 = 8 * v46;
        v38 = (char *)operator new(8 * v46);
        v39 = &v38[8 * v47];
        v40 = &v38[v48];
        v49 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v49 & 0xFFFFFFFFFFFFFFF8];
          v50 = v49 - 8;
          if ((unint64_t)(v49 - 8) >= 0x38)
          {
            v81 = &v38[8 * v47];
            v51 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v50 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v51 = &v39[v83];
              v7 += v83;
              v84 = (__int128 *)(v45 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v51 = &v38[8 * v47];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v51 = v88;
            v51 += 8;
          }
          while (v51 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v38;
        *(_QWORD *)(a1 + 8) = v39;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v40;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFF0uLL);
  v27 = v26;
  v28 = &v25[8 * v21];
  v29 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19)
        v52 = 1;
      else
        v52 = v20 >> 2;
      if (v52 >> 61)
        sub_223174E94();
      v28 = (char *)operator new(8 * v52);
      v29 = &v28[8 * v52];
      operator delete(v25);
      v53 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v28;
      *(_QWORD *)v28 = v27;
      v31 = v28 + 8;
      if (v18 == v53)
        goto LABEL_24;
      do
      {
LABEL_49:
        if (v28 == v25)
        {
          if (v31 >= v29)
          {
            if (v29 == v28)
              v58 = 1;
            else
              v58 = (v29 - v28) >> 2;
            if (v58 >> 61)
              sub_223174E94();
            v59 = (char *)operator new(8 * v58);
            v25 = v59;
            v60 = (v58 + 3) >> 2;
            v54 = &v59[8 * v60];
            v33 = v54;
            v61 = v31 - v28;
            if (v31 != v28)
            {
              v33 = &v54[v61 & 0xFFFFFFFFFFFFFFF8];
              v62 = v61 - 8;
              v63 = &v59[8 * v60];
              v64 = v28;
              if (v62 < 0x38)
                goto LABEL_89;
              v65 = 8 * v60;
              v63 = &v59[8 * v60];
              v64 = v28;
              if ((unint64_t)(v63 - v28) < 0x20)
                goto LABEL_89;
              v66 = (v62 >> 3) + 1;
              v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              v63 = &v54[v67];
              v64 = &v28[v67];
              v68 = (__int128 *)(v28 + 16);
              v69 = &v59[v65 + 16];
              v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *v68;
                *((_OWORD *)v69 - 1) = *(v68 - 1);
                *(_OWORD *)v69 = v71;
                v68 += 2;
                v69 += 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_89:
                do
                {
                  v72 = *(_QWORD *)v64;
                  v64 += 8;
                  *(_QWORD *)v63 = v72;
                  v63 += 8;
                }
                while (v63 != v33);
              }
            }
            v29 = &v59[8 * v58];
            operator delete(v28);
          }
          else
          {
            v56 = (v29 - v31) >> 3;
            if (v56 >= -1)
              v57 = v56 + 1;
            else
              v57 = v56 + 2;
            v33 = &v31[8 * (v57 >> 1)];
            v54 = &v28[8 * (v57 >> 1)];
            if (v31 == v28)
            {
              v25 = v31;
            }
            else
            {
              memmove(&v28[8 * (v57 >> 1)], v28, v31 - v28);
              v25 = v28;
            }
          }
        }
        else
        {
          v54 = v28;
          v33 = v31;
        }
        v55 = *(_QWORD *)(v18 - 8);
        v18 -= 8;
        *((_QWORD *)v54 - 1) = v55;
        v32 = v54 - 8;
        v31 = v33;
        v28 = v32;
      }
      while (v18 != *(_QWORD *)(a1 + 8));
      goto LABEL_25;
    }
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v28 -= 8 * (v30 >> 1);
  }
  *(_QWORD *)v28 = v26;
  v31 = v28 + 8;
  if (v18 != v19)
    goto LABEL_49;
LABEL_24:
  v32 = v28;
  v33 = v31;
LABEL_25:
  v34 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 24) = v29;
  if (v34)
    operator delete(v34);
}

void sub_223F8A0BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223F8A0D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223F8A0EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223F8A104(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223F8A11C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *(char **)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  v8 = *(char **)(a1 + 8);
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    sub_22367C394();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      sub_223174E94();
    v13 = operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = (uint64_t)(v14 + 1);
    v16 = v5 - v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (_QWORD *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = a2;
  v7 = 8 * v9 + 8;
  v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    v17 = v16 - 8;
    if (v17 < 0x58)
      goto LABEL_41;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_41;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 = (_QWORD *)((char *)v14 - v19);
    v20 = &v13[8 * v9 - 16];
    v21 = v5 - 16;
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  *(_QWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v15;
  if (v8)
    operator delete(v8);
LABEL_22:
  *(_QWORD *)(a1 + 16) = v7;
  v25 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * a2);
  result = v25[1];
  *v25 = 0;
  v25[1] = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  v27 = **(_QWORD **)a1 + 232 * a2;
  if (*(_BYTE *)(v27 + 224))
  {
    v28 = *(_QWORD *)(v27 + 72);
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
    v29 = *(_QWORD *)(v27 + 56);
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
    v30 = *(_QWORD *)(v27 + 40);
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
    v31 = *(_QWORD *)(v27 + 24);
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
    result = *(_QWORD *)(v27 + 8);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_BYTE *)(v27 + 224) = 0;
  }
  return result;
}

uint64_t sub_223F8A338(uint64_t a1, uint64_t **a2)
{
  uint64_t result;
  uint64_t v5;

  result = (uint64_t)a2[1];
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
    if (result)
    {
      v5 = *(_QWORD *)(*a2)[1] + 232 * **a2;
      sub_223F8A338(a1, v5 + 16);
      sub_223F8A338(a1, v5 + 32);
      sub_223F8A338(a1, v5 + 48);
      sub_223F8A338(a1, v5 + 64);
      sub_223F8A11C(a1 + 24, **a2);
      result = (uint64_t)a2[1];
      *a2 = 0;
      a2[1] = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    }
  }
  return result;
}

uint64_t sub_223F8A3E8(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;

  result = a2[1];
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
    if (result)
    {
      if ((v5 = (_QWORD *)(**(_QWORD **)(*a2 + 8) + 232 * *(_QWORD *)*a2), (v6 = v5[3]) != 0)
        && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6)
        || (v7 = v5[5]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7)
        || (v8 = v5[7]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8)
        || (result = v5[9]) != 0
        && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result)) != 0)
      {
        v9 = (uint64_t **)(**(_QWORD **)(*a2 + 8) + 232 * *(_QWORD *)*a2);
        sub_223F8A338(a1, v9 + 2);
        sub_223F8A338(a1, v9 + 4);
        sub_223F8A338(a1, v9 + 6);
        return sub_223F8A338(a1, v9 + 8);
      }
    }
  }
  return result;
}

uint64_t sub_223F8A4F0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x2_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _BYTE v17[8];
  uint64_t v18;
  __int128 v19;
  float32x2_t v20[2];

  v4 = (_QWORD *)(**(_QWORD **)(*a2 + 8) + 232 * *(_QWORD *)*a2);
  v5 = v4[3];
  if (!v5 || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5)) == 0)
  {
    v7 = v4[5];
    if (!v7 || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7)) == 0)
    {
      v8 = v4[7];
      if (!v8 || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8)) == 0)
      {
        v9 = v4[9];
        if (!v9 || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9)) == 0)
        {
          v10 = (float32x2_t *)(**(_QWORD **)(*a2 + 8) + 232 * *(_QWORD *)*a2);
          v20[0] = v10[10];
          v20[1] = v10[11];
          sub_223F35620(v20, 0, (float32x2_t *)&v19);
          v11 = a2[1];
          v15 = (uint64_t *)*a2;
          v16 = v11;
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
          sub_223F87878((uint64_t)v17, a1, &v15, &v19, 0);
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
          sub_223F35620(v20, 1, (float32x2_t *)&v19);
          v12 = a2[1];
          v15 = (uint64_t *)*a2;
          v16 = v12;
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
          sub_223F87878((uint64_t)v17, a1, &v15, &v19, 1u);
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
          sub_223F35620(v20, 2, (float32x2_t *)&v19);
          v13 = a2[1];
          v15 = (uint64_t *)*a2;
          v16 = v13;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
          sub_223F87878((uint64_t)v17, a1, &v15, &v19, 2u);
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
          sub_223F35620(v20, 3, (float32x2_t *)&v19);
          v14 = a2[1];
          v15 = (uint64_t *)*a2;
          v16 = v14;
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
          sub_223F87878((uint64_t)v17, a1, &v15, &v19, 3u);
          result = v18;
          if (v18)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
          if (v14)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
        }
      }
    }
  }
  return result;
}

void sub_223F8A770(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F8A798(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t (***v7)();
  uint64_t (***v8)();
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t (***v13)();
  uint64_t (***v14)();
  uint64_t (****v15)();
  uint64_t (**v16)();
  uint64_t (***v17)();
  uint64_t v18;
  uint64_t (****v19)();
  uint64_t v20;
  __int128 v21;
  uint64_t (***v22)();
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  _QWORD v27[3];
  uint64_t (***v28)();
  __int128 v29;
  __int128 v30;
  _QWORD v31[3];
  uint64_t (***v32)();
  __int128 v33;
  __int128 v34;
  uint64_t (**v35)();
  int v36;
  uint64_t (***v37)();
  __int128 v38;
  __int128 v39;
  uint64_t (**v40)();
  int v41;
  uint64_t (***v42)();
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (a2 != a3)
  {
    while (!*(_BYTE *)(a2 + 224))
    {
      a2 += 232;
      if (a2 == a3)
      {
        a2 = a3;
        break;
      }
    }
  }
  *(_QWORD *)&v39 = a2;
  *((_QWORD *)&v39 + 1) = a3;
  v7 = &v40;
  v40 = &off_24EC64768;
  v41 = a4;
  v42 = &v40;
  *(_QWORD *)&v43 = a3;
  v8 = &v40;
  *((_QWORD *)&v43 + 1) = a3;
  if (a2 != a3)
  {
    do
    {
      if (!v42)
        sub_223198474();
      if ((((uint64_t (*)(uint64_t (***)()))(*v42)[6])(v42) & 1) != 0)
        break;
      v9 = *((_QWORD *)&v39 + 1);
      v10 = v39;
      *(_QWORD *)&v39 = v39 + 232;
      if ((_QWORD)v39 == *((_QWORD *)&v39 + 1))
      {
        v9 = v10 + 232;
      }
      else
      {
        v11 = v10 + 464;
        while (!*(_BYTE *)(v11 - 8))
        {
          *(_QWORD *)&v39 = v11;
          v12 = v11 == *((_QWORD *)&v39 + 1);
          v11 += 232;
          if (v12)
            goto LABEL_8;
        }
        v9 = v11 - 232;
      }
LABEL_8:
      ;
    }
    while (v9 != (_QWORD)v43);
    v8 = v42;
  }
  *(_QWORD *)&v34 = a3;
  *((_QWORD *)&v34 + 1) = a3;
  v13 = &v35;
  v35 = &off_24EC64768;
  v36 = a4;
  v37 = &v35;
  *(_QWORD *)&v38 = a3;
  *((_QWORD *)&v38 + 1) = a3;
  v26 = v39;
  v14 = (uint64_t (***)())v27;
  if (!v8)
  {
    v15 = &v28;
    goto LABEL_23;
  }
  if (v8 != &v40)
  {
    v15 = &v42;
    v28 = v8;
LABEL_23:
    *v15 = 0;
    v29 = v43;
    v30 = v34;
    v16 = &off_24EC64768;
    goto LABEL_24;
  }
  v28 = (uint64_t (***)())v27;
  ((void (*)(uint64_t, uint64_t))v40[3])((uint64_t)&v40, (uint64_t)v27);
  v29 = v43;
  v30 = v34;
  if (!v37)
  {
    v19 = &v32;
LABEL_31:
    *v19 = 0;
    v33 = v38;
    v17 = v37;
    if (v37 != &v35)
      goto LABEL_25;
LABEL_32:
    v18 = 4;
    goto LABEL_33;
  }
  if (v37 != &v35)
  {
    v19 = &v37;
    v32 = v37;
    goto LABEL_31;
  }
  v16 = v35;
LABEL_24:
  v32 = (uint64_t (***)())v31;
  ((void (*)(uint64_t, uint64_t))v16[3])((uint64_t)&v35, (uint64_t)v31);
  v33 = v38;
  v17 = v37;
  if (v37 == &v35)
    goto LABEL_32;
LABEL_25:
  if (!v17)
    goto LABEL_34;
  v18 = 5;
  v13 = v17;
LABEL_33:
  ((void (*)(uint64_t (***)()))(*v13)[v18])(v13);
LABEL_34:
  if (v42 == &v40)
  {
    v20 = 4;
  }
  else
  {
    if (!v42)
      goto LABEL_39;
    v20 = 5;
    v7 = v42;
  }
  ((void (*)(uint64_t (***)()))(*v7)[v20])(v7);
LABEL_39:
  *(_OWORD *)a1 = v26;
  if (v28)
  {
    if (v28 == v27)
    {
      *(_QWORD *)(a1 + 40) = a1 + 16;
      (*(void (**)(_QWORD *))(v27[0] + 24))(v27);
    }
    else
    {
      *(_QWORD *)(a1 + 40) = v28;
      v28 = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 40) = 0;
  }
  v21 = v30;
  *(_OWORD *)(a1 + 48) = v29;
  *(_OWORD *)(a1 + 64) = v21;
  if (v32)
  {
    if (v32 == v31)
    {
      *(_QWORD *)(a1 + 104) = a1 + 80;
      (*(void (**)(void))(v31[0] + 24))();
    }
    else
    {
      *(_QWORD *)(a1 + 104) = v32;
      v32 = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 104) = 0;
  }
  *(_OWORD *)(a1 + 112) = v33;
  v22 = v32;
  if (v32 == v31)
  {
    v23 = 4;
    v22 = (uint64_t (***)())v31;
  }
  else
  {
    if (!v32)
      goto LABEL_54;
    v23 = 5;
  }
  (*v22)[v23]();
LABEL_54:
  if (v28 == v27)
  {
    v24 = 4;
    goto LABEL_58;
  }
  if (v28)
  {
    v24 = 5;
    v14 = v28;
LABEL_58:
    ((void (*)(uint64_t (***)()))(*v14)[v24])(v14);
  }
  return a1;
}

void sub_223F8AB3C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223F8AB9C()
{
  JUMPOUT(0x227684CE8);
}

_DWORD *sub_223F8ABB0(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24EC64768;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_223F8ABE8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24EC64768;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL sub_223F8AC08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4))
    return 0;
  v6 = *(_QWORD *)(a2 + 40);
  if (v6 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6))
    return 0;
  v7 = *(_QWORD *)(a2 + 56);
  if (v7 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7))
    return 0;
  v8 = *(_QWORD *)(a2 + 72);
  return (!v8 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8))
      && *(_DWORD *)(a2 + 204) + *(_DWORD *)(a2 + 208) >= *(_DWORD *)(a1 + 8);
}

uint64_t sub_223F8ACE0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3acv16surfacedetection17reliableLeafCellsERKNS1_8QuadTreeINSt3__18optionalINS1_12PlanarRegio"
                     "n8CellDataEEEEEjEUlRKT_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3acv16surfacedetection17reliableLeafCellsERKNS1_8QuadTreeINSt3__18optionalINS1_12"
                                "PlanarRegion8CellDataEEEEEjEUlRKT_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3acv16surfacedetection17reliableLeafCellsERKNS1_8QuadTreeINSt3__18optionalINS1_12PlanarRegion8CellDataEEEEEjEUlRKT_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3acv16surfacedetection17reliableLeafCellsERKNS1_8QuadTreeINSt3__18optionalINS1_12PlanarRegion8CellDataEEEEEjEUlRKT_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223F8AD4C()
{
  return &unk_24EC647D8;
}

void sub_223F8AD58(uint64_t a1, uint64_t a2, float32x2_t *a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v9;
  double v10;
  float32x2_t v11;
  int32x2_t v12;
  int32x2_t v13;
  int32x2_t v14;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  float32x2_t v56;
  float32x2_t v57;
  char v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  int8x8_t v62;
  int8x8_t v63;
  BOOL v64;
  BOOL v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  void *v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97[2];
  uint64_t v98;
  uint64_t v99;
  void *__p;
  _QWORD *v101;
  unint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  BOOL v109;
  char v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;

  v9 = a2;
  v114 = *MEMORY[0x24BDAC8D0];
  v10 = *(double *)&a3[1];
  v11 = vld1_dup_f32((const float *)a2);
  v12 = vcvt_s32_f32(vrndm_f32(vdiv_f32(*a3, v11)));
  v13 = vcvt_s32_f32(vrndm_f32(vdiv_f32(*(float32x2_t *)&v10, v11)));
  v14 = vceq_s32(v12, v13);
  if ((v14.i32[0] & v14.i32[1] & 1) != 0)
  {
    sub_223F85D34((uint64_t *)&v111, a2, a3, v14);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)&v103 = a1;
    BYTE8(v103) = 0;
    v16 = operator new(0x10uLL);
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v16;
    v17 = v16 + 2;
    *(_QWORD *)(a1 + 16) = v16 + 2;
    v18 = *((_QWORD *)&v111 + 1);
    *v16 = v111;
    v16[1] = v18;
    if (v18)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
      *(_QWORD *)(a1 + 8) = v17;
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
    }
    else
    {
      *(_QWORD *)(a1 + 8) = v17;
    }
    return;
  }
  v19 = *(_QWORD *)(a2 + 16);
  if (v19)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v19 + 24))(*(_QWORD *)(a2 + 16));
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 48))(v19) == 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
  }
  else
  {
    v20 = 1;
  }
  v103 = *(_OWORD *)a3->f32;
  sub_223F86A28(v9, 2, (uint64_t *)&v103, *(double *)&v103, *(double *)&v13, v10, a7, a8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  __p = 0;
  v101 = 0;
  v102 = 0;
  v21 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)&v108 = *(_QWORD *)(v9 + 8);
  *((_QWORD *)&v108 + 1) = v21;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
  v109 = !v20;
  v110 = 0;
  v103 = 0u;
  v104 = 0u;
  v105 = 0u;
  sub_223F88FBC((uint64_t)&v103, (uint64_t)&v108);
  v111 = v103;
  v112 = v104;
  v103 = 0u;
  v104 = 0u;
  v113 = v105;
  v105 = 0uLL;
  sub_223F89748((uint64_t)&v103);
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
  if (*((_QWORD *)&v113 + 1))
  {
    v95 = v9;
    __asm { FMOV            V9.2S, #1.0 }
    do
    {
      v27 = v113;
      v28 = *(_QWORD *)(*((_QWORD *)&v111 + 1) + 8 * ((unint64_t)v113 / 0xAA));
      v29 = (unint64_t)v113 % 0xAA;
      v30 = (uint64_t *)(v28 + 24 * ((unint64_t)v113 % 0xAA));
      v31 = *v30;
      v32 = (uint64_t *)v30[1];
      if (v32)
      {
        (*(void (**)(uint64_t))(*v32 + 24))(v30[1]);
        v27 = v113;
        v33 = (unint64_t)v113 % 0xAA;
        v34 = *(_QWORD *)(*((_QWORD *)&v111 + 1) + 8 * ((unint64_t)v113 / 0xAA));
      }
      else
      {
        v34 = *(_QWORD *)(*((_QWORD *)&v111 + 1) + 8 * ((unint64_t)v113 / 0xAA));
        v33 = (unint64_t)v113 % 0xAA;
      }
      v35 = *(unsigned __int8 *)(v28 + 24 * v29 + 16);
      v36 = *(_QWORD *)(v34 + 24 * v33 + 8);
      if (v36)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
        v27 = v113;
      }
      *(_QWORD *)&v113 = v27 + 1;
      --*((_QWORD *)&v113 + 1);
      if ((unint64_t)(v27 + 1) >= 0x154)
      {
        operator delete(**((void ***)&v111 + 1));
        *((_QWORD *)&v111 + 1) += 8;
        *(_QWORD *)&v113 = v113 - 170;
      }
      v37 = (_QWORD *)(**(_QWORD **)(v31 + 8) + 232 * *(_QWORD *)v31);
      v38 = v37[3];
      if (v38 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38)
        || (v39 = v37[5]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 48))(v39)
        || (v40 = v37[7]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 48))(v40)
        || (v41 = v37[9]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 48))(v41)
        || !v35
        && (v42 = **(_QWORD **)(v31 + 8) + 232 * *(_QWORD *)v31,
            (float)(*(float *)(v42 + 88) - *(float *)(v42 + 80)) >= (float)(*(float *)v9 * 1.25)))
      {
        v46 = **(_QWORD **)(v31 + 8) + 232 * *(_QWORD *)v31;
        v48 = *(_QWORD *)(v46 + 16);
        v47 = (_QWORD *)(v46 + 16);
        *(_QWORD *)&v103 = v48;
        v49 = v47[1];
        *((_QWORD *)&v103 + 1) = v49;
        if (v49)
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49);
        *(_QWORD *)&v104 = v47[2];
        v50 = v47[3];
        *((_QWORD *)&v104 + 1) = v50;
        v96 = v32;
        if (v50)
          (*(void (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
        *(_QWORD *)&v105 = v47[4];
        v51 = v47[5];
        *((_QWORD *)&v105 + 1) = v51;
        if (v51)
          (*(void (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51);
        v106 = v47[6];
        v52 = v47[7];
        v107 = v52;
        if (v52)
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 24))(v52);
        v53 = 0;
        v54 = (_QWORD *)&v103 + 1;
        do
        {
          if (*v54 && (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v54 + 48))(*v54))
          {
            v108 = *(_OWORD *)(**(_QWORD **)(*(v54 - 1) + 8) + 232 * *(_QWORD *)*(v54 - 1) + 80);
            v57 = *(float32x2_t *)((char *)&v108 + 8);
            v56 = (float32x2_t)v108;
            v58 = 1;
          }
          else
          {
            sub_223F35620((float32x2_t *)(**(_QWORD **)(v31 + 8) + 232 * *(_QWORD *)v31 + 80), v53, (float32x2_t *)&v108);
            v58 = 0;
            v57 = *(float32x2_t *)((char *)&v108 + 8);
            v56 = (float32x2_t)v108;
          }
          v59 = vdiv_f32(_D9, vsub_f32(a3[1], *a3));
          v60 = vmul_f32(vsub_f32(v56, *a3), v59);
          v61 = vmul_f32(vsub_f32(v57, *a3), v59);
          v62 = vbsl_s8((int8x8_t)vcgt_f32(v60, v61), (int8x8_t)v61, (int8x8_t)v60);
          if (*(float *)v62.i32 < *(float *)&v62.i32[1])
            v62.i32[0] = v62.i32[1];
          v63 = vbsl_s8((int8x8_t)vcgt_f32(v61, v60), (int8x8_t)v61, (int8x8_t)v60);
          if (*(float *)&v63.i32[1] < *(float *)v63.i32)
            v63.i32[0] = v63.i32[1];
          if (*(float *)v62.i32 <= *(float *)v63.i32)
          {
            v64 = *(float *)v62.i32 < 0.0 || *(float *)v62.i32 > 1.0;
            if (!v64
              || (*(float *)v63.i32 >= 0.0 ? (v65 = *(float *)v63.i32 > 1.0) : (v65 = 1),
                  !v65 || (*(float *)v62.i32 <= 0.0 ? (v66 = *(float *)v63.i32 < 1.0) : (v66 = 1), !v66)))
            {
              if ((v58 & 1) == 0)
              {
                v97[0] = (uint64_t *)v31;
                v97[1] = v32;
                if (v32)
                  (*(void (**)(uint64_t *))(*v32 + 24))(v32);
                sub_223F87878((uint64_t)&v98, v95, v97, &v108, v53);
                v67 = v98;
                v68 = v99;
                if (v99)
                  (*(void (**)(uint64_t))(*(_QWORD *)v99 + 24))(v99);
                v69 = *v54;
                *(v54 - 1) = v67;
                *v54 = v68;
                if (v69)
                  (*(void (**)(uint64_t))(*(_QWORD *)v69 + 40))(v69);
                if (v68)
                  (*(void (**)(uint64_t))(*(_QWORD *)v68 + 40))(v68);
                if (v32)
                  (*(void (**)(uint64_t *))(*v32 + 40))(v32);
              }
              v70 = *(v54 - 1);
              v71 = *v54;
              if (*v54)
                (*(void (**)(_QWORD))(*(_QWORD *)v71 + 24))(*v54);
              v72 = *((_QWORD *)&v111 + 1);
              if ((_QWORD)v112 == *((_QWORD *)&v111 + 1))
                v73 = 0;
              else
                v73 = 170 * ((uint64_t)(v112 - *((_QWORD *)&v111 + 1)) >> 3) - 1;
              v74 = *((_QWORD *)&v113 + 1) + v113;
              if (v73 == *((_QWORD *)&v113 + 1) + (_QWORD)v113)
              {
                sub_223F89B7C((uint64_t)&v111);
                v72 = *((_QWORD *)&v111 + 1);
                v74 = *((_QWORD *)&v113 + 1) + v113;
              }
              v75 = *(_QWORD *)(v72 + 8 * (v74 / 0xAA));
              v76 = v74 % 0xAA;
              v77 = (_QWORD *)(v75 + 24 * (v74 % 0xAA));
              *v77 = v70;
              v77[1] = v71;
              if (v71)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v71 + 24))(v71);
                v78 = v75 + 24 * v76;
                *(_BYTE *)(v78 + 16) = v58;
                *(_BYTE *)(v78 + 17) = 0;
                ++*((_QWORD *)&v113 + 1);
                (*(void (**)(uint64_t))(*(_QWORD *)v71 + 40))(v71);
              }
              else
              {
                v55 = v75 + 24 * v76;
                *(_BYTE *)(v55 + 16) = v58;
                *(_BYTE *)(v55 + 17) = 0;
                ++*((_QWORD *)&v113 + 1);
              }
              v32 = v96;
            }
          }
          ++v53;
          v54 += 2;
        }
        while (v53 != 4);
        v79 = (_QWORD *)(**(_QWORD **)(v31 + 8) + 232 * *(_QWORD *)v31);
        v80 = v79[3];
        v9 = v95;
        if (!v80 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 48))(v80))
        {
          v81 = v79[5];
          if (!v81 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 48))(v81))
          {
            v82 = v79[7];
            if (!v82 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 48))(v82))
            {
              v83 = v79[9];
              if (!v83 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 48))(v83))
              {
                v84 = v101;
                if ((unint64_t)v101 >= v102)
                {
                  v85 = sub_223F898DC((char **)&__p, v31, (uint64_t)v32);
                }
                else
                {
                  *v101 = v31;
                  v84[1] = v32;
                  if (v32)
                    (*(void (**)(uint64_t *))(*v32 + 24))(v32);
                  v85 = (char *)(v84 + 2);
                }
                v101 = v85;
              }
            }
          }
        }
        if (v107)
          (*(void (**)(uint64_t))(*(_QWORD *)v107 + 40))(v107);
        if (*((_QWORD *)&v105 + 1))
          (*(void (**)(_QWORD))(**((_QWORD **)&v105 + 1) + 40))(*((_QWORD *)&v105 + 1));
        if (*((_QWORD *)&v104 + 1))
          (*(void (**)(_QWORD))(**((_QWORD **)&v104 + 1) + 40))(*((_QWORD *)&v104 + 1));
        if (*((_QWORD *)&v103 + 1))
          (*(void (**)(_QWORD))(**((_QWORD **)&v103 + 1) + 40))(*((_QWORD *)&v103 + 1));
        if (!v32)
          continue;
      }
      else
      {
        v43 = *(uint64_t **)(a1 + 8);
        if ((unint64_t)v43 >= *(_QWORD *)(a1 + 16))
        {
          v44 = sub_223F898DC((char **)a1, v31, (uint64_t)v32);
          v45 = a1;
        }
        else
        {
          *v43 = v31;
          v43[1] = (uint64_t)v32;
          if (v32)
            (*(void (**)(uint64_t *))(*v32 + 24))(v32);
          v44 = (char *)(v43 + 2);
          v45 = a1;
          *(_QWORD *)(a1 + 8) = v43 + 2;
        }
        *(_QWORD *)(v45 + 8) = v44;
        if (!v32)
          continue;
      }
      (*(void (**)(uint64_t *))(*v32 + 40))(v32);
    }
    while (*((_QWORD *)&v113 + 1));
  }
  v86 = (unint64_t *)__p;
  v87 = v101;
  while (v86 != v87)
  {
    v89 = *v86;
    v88 = v86[1];
    if (v88)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v88 + 24))(v86[1]);
      *(_QWORD *)&v103 = v89;
      *((_QWORD *)&v103 + 1) = v88;
      (*(void (**)(unint64_t))(*(_QWORD *)v88 + 24))(v88);
    }
    else
    {
      v103 = v89;
    }
    sub_223F858E4(v9, (uint64_t **)&v103);
    if (v88)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v88 + 40))(v88);
      (*(void (**)(unint64_t))(*(_QWORD *)v88 + 40))(v88);
    }
    v86 += 2;
  }
  sub_223F89748((uint64_t)&v111);
  v90 = __p;
  if (__p)
  {
    v91 = v101;
    v92 = __p;
    if (v101 != __p)
    {
      do
      {
        v93 = *(v91 - 1);
        if (v93)
          (*(void (**)(uint64_t))(*(_QWORD *)v93 + 40))(v93);
        v91 -= 2;
      }
      while (v91 != v90);
      v92 = __p;
    }
    v101 = v90;
    operator delete(v92);
  }
}

void sub_223F8B6A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

BOOL sub_223F8B984(float32x2_t *a1, float32x2_t *a2)
{
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  int8x8_t v10;
  int8x8_t v11;

  __asm { FMOV            V2.2S, #1.0 }
  v7 = vdiv_f32(_D2, vsub_f32(a2[1], *a2));
  v8 = vmul_f32(v7, vsub_f32(*a1, *a2));
  v9 = vmul_f32(v7, vsub_f32(a1[1], *a2));
  v10 = vbsl_s8((int8x8_t)vcgt_f32(v8, v9), (int8x8_t)v9, (int8x8_t)v8);
  if (*(float *)v10.i32 < *(float *)&v10.i32[1])
    v10.i32[0] = v10.i32[1];
  v11 = vbsl_s8((int8x8_t)vcgt_f32(v9, v8), (int8x8_t)v9, (int8x8_t)v8);
  if (*(float *)&v11.i32[1] < *(float *)v11.i32)
    v11.i32[0] = v11.i32[1];
  if (*(float *)v10.i32 > *(float *)v11.i32)
    return 0;
  if (*(float *)v10.i32 >= 0.0 && *(float *)v10.i32 <= 1.0)
    return 1;
  if (*(float *)v11.i32 >= 0.0 && *(float *)v11.i32 <= 1.0)
    return 1;
  if (*(float *)v11.i32 >= 1.0)
    return *(float *)v10.i32 <= 0.0;
  return 0;
}

BOOL sub_223F8BA1C(float32x2_t *a1, float32x2_t *a2)
{
  float32x4_t v4;
  float v5;
  float v6;
  int32x2_t v7;
  float32x2_t v8;
  _BOOL4 v9;
  float32x4_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float v13;
  float32x2_t v18;
  int8x8_t v19;
  int8x8_t v20;
  float32x4_t v22;
  int16x4_t v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  float32x4_t v27;
  int v28;
  float32x2_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x2_t v37;
  int32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  int32x2_t v44;
  float32x2_t v45[2];
  __int128 v46;
  __int128 v47;
  float32x2_t v48;
  float32x4_t v49;
  float32x2_t v50;

  *(float32x2_t *)v4.f32 = *a1;
  v5 = a1[1].f32[0];
  v6 = a1[1].f32[1];
  v7 = (int32x2_t)a1[2];
  v8 = vmul_f32(vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)*a1, 0), (float32x2_t)__PAIR64__(LODWORD(v5), v7.u32[0])), vsub_f32((float32x2_t)__PAIR64__(v7.u32[1], LODWORD(v6)), (float32x2_t)vdup_lane_s32((int32x2_t)*a1, 1)));
  v8.f32[0] = fabsf(vsub_f32(v8, (float32x2_t)vdup_lane_s32((int32x2_t)v8, 1)).f32[0]) * 0.5;
  v9 = v8.f32[0] == 0.0;
  if (v8.f32[0] <= 0.000001)
    v9 = 1;
  v11 = *a2;
  *(float32x2_t *)v10.f32 = a2[1];
  v12 = vsub_f32(*(float32x2_t *)v10.f32, *a2);
  v13 = vmul_lane_f32(v12, v12, 1).f32[0];
  if (v13 == 0.0)
  {
    if (!v9)
    {
LABEL_31:
      v39 = vmul_f32(vadd_f32(*a2, a2[1]), (float32x2_t)0x3F0000003F000000);
      v40 = *a1;
      v41 = vsub_f32(v39, *a1);
      v42 = (float32x2_t)vrev64_s32((int32x2_t)*a1);
      v43.i32[1] = v42.i32[1];
      v43.i32[0] = a1[1].i32[0];
      v40.i32[0] = a1[1].i32[1];
      v42.i32[1] = HIDWORD(*(_QWORD *)&a1[2]);
      v44 = vcgtz_f32(vsub_f32(vmul_lane_f32(vsub_f32(v43, (float32x2_t)vzip1_s32((int32x2_t)*a1, v7)), v41, 1), vmul_n_f32(vsub_f32(v40, v42), v41.f32[0])));
      if (v44.i32[0] == v44.i32[1])
        return (v44.i8[0] ^ ((float)((float)((float)(*(float *)v7.i32 - v5) * (float)(v39.f32[1] - v6))
                                   - (float)((float)(*(float *)&v7.i32[1] - v6) * (float)(v39.f32[0] - v5))) <= 0.0)) & 1;
      else
        return 0;
    }
LABEL_7:
    __asm { FMOV            V1.2S, #3.0 }
    v18 = vdiv_f32(vadd_f32(vadd_f32(*a1, a1[1]), a1[2]), _D1);
    v19 = (int8x8_t)vcge_f32(v18, v11);
    v20 = (int8x8_t)vcge_f32(*(float32x2_t *)v10.f32, v18);
    return vand_s8(v19, v20).u8[0] & v19.i8[4] & v20.i8[4] & 1;
  }
  if (v9)
    goto LABEL_7;
  if (fabsf(v13) <= 0.000001)
    goto LABEL_31;
  *(float32x2_t *)&v4.u32[2] = *a1;
  *(float32x2_t *)v22.f32 = a2[1];
  *(float32x2_t *)&v22.u32[2] = *a2;
  v23.i32[0] = vmovn_s32(vcgeq_f32(v22, v4)).u32[0];
  v23.i32[1] = vmovn_s32(vcgeq_f32(v4, v22)).i32[1];
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(v23, 0xFuLL))) & 1) != 0)
    return 1;
  v24 = v6 > v10.f32[1] || v6 < v11.f32[1];
  v25 = v24 || v5 < v11.f32[0];
  v26 = v25 || v5 > v10.f32[0];
  *(float32x2_t *)&v10.u32[2] = a1[2];
  v27.i64[0] = v10.i64[1];
  *(float32x2_t *)&v27.u32[2] = *a2;
  v28 = ~vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vcgeq_f32(v10, v27), 0x1FuLL)), (int8x16_t)xmmword_2246496A0)) & 0xF;
  if (!v26 || v28 == 0)
    return 1;
  v30 = a2[1];
  *(float32x2_t *)v31.f32 = vmul_f32(vadd_f32(*a2, v30), (float32x2_t)0x3F0000003F000000);
  *(float32x2_t *)v32.f32 = vsub_f32(*(float32x2_t *)v31.f32, v30);
  v33 = vadd_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v32.f32);
  v34 = vsub_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v32.f32);
  v31.i64[1] = v31.i64[0];
  v32.i64[1] = v32.i64[0];
  v35 = vsubq_f32(v31, v32);
  v36 = vaddq_f32(v31, v32);
  v36.i32[0] = v35.i32[0];
  v36.i32[3] = v35.i32[3];
  v48 = v33;
  v49 = v36;
  v50 = v34;
  *(float32x2_t *)v36.f32 = *a1;
  *(float32x2_t *)v31.f32 = vsub_f32(v33, *a1);
  v37 = (float32x2_t)vrev64_s32((int32x2_t)*a1);
  v35.i64[0] = __PAIR64__(v37.u32[1], LODWORD(v5));
  v36.f32[0] = v6;
  v37.i32[1] = v7.i32[1];
  v38 = vcgtz_f32(vsub_f32(vmul_lane_f32(vsub_f32(*(float32x2_t *)v35.f32, (float32x2_t)vzip1_s32((int32x2_t)*a1, v7)), *(float32x2_t *)v31.f32, 1), vmul_n_f32(vsub_f32(*(float32x2_t *)v36.f32, v37), v31.f32[0])));
  if (v38.i32[0] == v38.i32[1]
    && ((((float)((float)((float)(*(float *)v7.i32 - v5) * (float)(v33.f32[1] - v6))
                - (float)((float)(*(float *)&v7.i32[1] - v6) * (float)(v33.f32[0] - v5))) <= 0.0) ^ v38.i32[0]) & 1) != 0)
  {
    return 1;
  }
  if ((sub_223F8BDD4((float32x2_t *)&v49, a1) & 1) != 0)
    return 1;
  if ((sub_223F8BDD4((float32x2_t *)&v49.u32[2], a1) & 1) != 0)
    return 1;
  if ((sub_223F8BDD4(&v50, a1) & 1) != 0)
    return 1;
  v47 = *(_OWORD *)a1->f32;
  if (sub_223F8B984(a2, (float32x2_t *)&v47))
    return 1;
  v46 = *(_OWORD *)a1[1].f32;
  if (sub_223F8B984(a2, (float32x2_t *)&v46))
    return 1;
  v45[0] = a1[2];
  v45[1] = *a1;
  return sub_223F8B984(a2, v45);
}

uint64_t sub_223F8BDD4(float32x2_t *a1, float32x2_t *a2)
{
  float32x2_t v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  int32x2_t v7;

  v2 = *a2;
  v3 = vsub_f32(*a1, *a2);
  v4 = (float32x2_t)vrev64_s32((int32x2_t)*a2);
  v5.i32[1] = v4.i32[1];
  v5.i32[0] = a2[1].i32[0];
  v6.i32[0] = (__int32)*a2;
  v6.i32[1] = a2[2].i32[0];
  v2.i32[0] = a2[1].i32[1];
  v4.i32[1] = a2[2].i32[1];
  v7 = vcgtz_f32(vsub_f32(vmul_lane_f32(vsub_f32(v5, v6), v3, 1), vmul_n_f32(vsub_f32(v2, v4), v3.f32[0])));
  if (v7.i32[0] == v7.i32[1])
    return (v7.i32[0] ^ ((float)((float)((float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)a1)) - a2[1].f32[1])
                                       * (float)(a2[2].f32[0] - a2[1].f32[0]))
                               - (float)((float)(COERCE_FLOAT(*a1) - a2[1].f32[0]) * (float)(a2[2].f32[1] - a2[1].f32[1]))) <= 0.0)) & 1;
  else
    return 0;
}

_QWORD *sub_223F8BE68(_QWORD *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return a1;
}

uint64_t sub_223F8BEB0(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v11 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 / 0x55];
    v6 = (char *)*v5 + 48 * (v4 % 0x55);
    v7 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0x55] + 48 * ((*(_QWORD *)(a1 + 40) + v4) % 0x55);
    if (v6 != (char *)v7)
    {
      do
      {
        v8 = (void *)*((_QWORD *)v6 + 3);
        if (v8)
        {
          *((_QWORD *)v6 + 4) = v8;
          operator delete(v8);
        }
        v9 = *((_QWORD *)v6 + 1);
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
        v6 += 48;
        if (v6 - (_BYTE *)*v5 == 4080)
        {
          v10 = (char *)v5[1];
          ++v5;
          v6 = v10;
        }
      }
      while (v6 != (char *)v7);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
    *(_QWORD *)(a1 + 40) = 0;
    v11 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v3 = *(void ***)(a1 + 16);
        v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
        *(_QWORD *)(a1 + 8) = v2;
        v11 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 42;
    goto LABEL_19;
  }
  if (v12 == 2)
  {
    v13 = 85;
LABEL_19:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_223F8C050(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v11 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 >> 8];
    v6 = (uint64_t)*v5;
    v7 = (uint64_t)*v5 + 16 * v4;
    v8 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v4) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(_BYTE *)(a1 + 40) + v4);
    if (v7 != v8)
    {
      do
      {
        v9 = *(_QWORD *)(v7 + 8);
        if (v9)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
          v6 = (uint64_t)*v5;
        }
        v7 += 16;
        if (v7 - v6 == 4096)
        {
          v10 = (uint64_t)v5[1];
          ++v5;
          v6 = v10;
          v7 = v10;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
    *(_QWORD *)(a1 + 40) = 0;
    v11 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v3 = *(void ***)(a1 + 16);
        v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
        *(_QWORD *)(a1 + 8) = v2;
        v11 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 128;
    goto LABEL_17;
  }
  if (v12 == 2)
  {
    v13 = 256;
LABEL_17:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_223F8C1C8(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  BOOL v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v35 = (v5 - v9) >> 2;
      if (v5 == v9)
        v35 = 1;
      if (!(v35 >> 61))
      {
        v36 = v35 >> 2;
        v37 = 8 * v35;
        v38 = (char *)operator new(8 * v35);
        v39 = &v38[8 * v36];
        v40 = &v38[v37];
        v42 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v42 & 0xFFFFFFFFFFFFFFF8];
          v43 = v42 - 8;
          if ((unint64_t)(v42 - 8) >= 0x38)
          {
            v73 = &v38[8 * v36];
            v44 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v43 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v44 = &v39[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v44 = &v38[8 * v36];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v44 = v80;
            v44 += 8;
          }
          while (v44 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      sub_223174E94();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0x1000uLL);
      sub_22323CCA0((char **)a1, &v89);
      return;
    }
    v89 = operator new(0x1000uLL);
    sub_22323CE2C((void **)a1, &v89);
    v45 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v45 + 1);
    v8 = *v45;
    *(_QWORD *)(a1 + 8) = v45 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v46 = (v5 - v9) >> 2;
      if (v5 == v9)
        v46 = 1;
      if (!(v46 >> 61))
      {
        v47 = v46 >> 2;
        v48 = 8 * v46;
        v38 = (char *)operator new(8 * v46);
        v39 = &v38[8 * v47];
        v40 = &v38[v48];
        v49 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v49 & 0xFFFFFFFFFFFFFFF8];
          v50 = v49 - 8;
          if ((unint64_t)(v49 - 8) >= 0x38)
          {
            v81 = &v38[8 * v47];
            v51 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v50 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v51 = &v39[v83];
              v7 += v83;
              v84 = (__int128 *)(v45 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v51 = &v38[8 * v47];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v51 = v88;
            v51 += 8;
          }
          while (v51 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v38;
        *(_QWORD *)(a1 + 8) = v39;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v40;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = v26;
  v28 = &v25[8 * v21];
  v29 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19)
        v52 = 1;
      else
        v52 = v20 >> 2;
      if (v52 >> 61)
        sub_223174E94();
      v28 = (char *)operator new(8 * v52);
      v29 = &v28[8 * v52];
      operator delete(v25);
      v53 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v28;
      *(_QWORD *)v28 = v27;
      v31 = v28 + 8;
      if (v18 == v53)
        goto LABEL_24;
      do
      {
LABEL_49:
        if (v28 == v25)
        {
          if (v31 >= v29)
          {
            if (v29 == v28)
              v58 = 1;
            else
              v58 = (v29 - v28) >> 2;
            if (v58 >> 61)
              sub_223174E94();
            v59 = (char *)operator new(8 * v58);
            v25 = v59;
            v60 = (v58 + 3) >> 2;
            v54 = &v59[8 * v60];
            v33 = v54;
            v61 = v31 - v28;
            if (v31 != v28)
            {
              v33 = &v54[v61 & 0xFFFFFFFFFFFFFFF8];
              v62 = v61 - 8;
              v63 = &v59[8 * v60];
              v64 = v28;
              if (v62 < 0x38)
                goto LABEL_89;
              v65 = 8 * v60;
              v63 = &v59[8 * v60];
              v64 = v28;
              if ((unint64_t)(v63 - v28) < 0x20)
                goto LABEL_89;
              v66 = (v62 >> 3) + 1;
              v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              v63 = &v54[v67];
              v64 = &v28[v67];
              v68 = (__int128 *)(v28 + 16);
              v69 = &v59[v65 + 16];
              v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *v68;
                *((_OWORD *)v69 - 1) = *(v68 - 1);
                *(_OWORD *)v69 = v71;
                v68 += 2;
                v69 += 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_89:
                do
                {
                  v72 = *(_QWORD *)v64;
                  v64 += 8;
                  *(_QWORD *)v63 = v72;
                  v63 += 8;
                }
                while (v63 != v33);
              }
            }
            v29 = &v59[8 * v58];
            operator delete(v28);
          }
          else
          {
            v56 = (v29 - v31) >> 3;
            if (v56 >= -1)
              v57 = v56 + 1;
            else
              v57 = v56 + 2;
            v33 = &v31[8 * (v57 >> 1)];
            v54 = &v28[8 * (v57 >> 1)];
            if (v31 == v28)
            {
              v25 = v31;
            }
            else
            {
              memmove(&v28[8 * (v57 >> 1)], v28, v31 - v28);
              v25 = v28;
            }
          }
        }
        else
        {
          v54 = v28;
          v33 = v31;
        }
        v55 = *(_QWORD *)(v18 - 8);
        v18 -= 8;
        *((_QWORD *)v54 - 1) = v55;
        v32 = v54 - 8;
        v31 = v33;
        v28 = v32;
      }
      while (v18 != *(_QWORD *)(a1 + 8));
      goto LABEL_25;
    }
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v28 -= 8 * (v30 >> 1);
  }
  *(_QWORD *)v28 = v26;
  v31 = v28 + 8;
  if (v18 != v19)
    goto LABEL_49;
LABEL_24:
  v32 = v28;
  v33 = v31;
LABEL_25:
  v34 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 24) = v29;
  if (v34)
    operator delete(v34);
}

void sub_223F8C708(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223F8C724(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223F8C738(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223F8C750(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223F8C768(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>, float32x4_t a8@<Q0>, float64x2_t a9@<Q4>)
{
  float64x2_t v15;
  float64x2_t v16;
  unsigned __int8 v17;
  float64x2_t v18;
  unsigned __int8 v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v23;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v34;
  float64x2_t v36;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v48;
  float64x2_t v50;
  double v51;
  unint64_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  int8x16_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  _QWORD *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  size_t v79;
  _QWORD *v80;
  __int128 v81;
  _QWORD *v82;
  _QWORD *v83;
  void *v84;
  void *v85;
  _QWORD *v86;
  size_t v87;
  unint64_t v88;
  _QWORD *v89;
  _BYTE *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  unint64_t *v99;
  float v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  void *v131;
  __int128 v132;
  __int128 v133;
  float v134;
  __int128 v135;
  int v136;
  int v137;
  unint64_t v138;
  double v139;
  float64_t v140;
  uint64_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v148;
  unint64_t v149;
  int8x16_t v150;
  int8x16_t v151;
  float64_t v152;
  int8x16_t v153;
  uint64_t v154;
  uint64_t *v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  _BYTE *__src;
  float64x2_t v160;
  float64x2_t v161;
  float32x4_t v162;
  float64x2_t v163;
  _BYTE v164[24];
  void *__p;
  void *v166;
  char *v167;
  void *v168[2];
  void *v169[2];
  int v170;
  __int128 v171;
  __int128 v172;
  _BYTE *v173;
  _OWORD *v174;
  __int128 v175;
  uint64_t v176;
  _QWORD v177[3];
  _QWORD *v178;
  __int128 v179;
  uint64_t v180;
  _QWORD v181[3];
  _QWORD *v182;
  __int128 v183;
  unint64_t v184;
  _QWORD v185[3];
  _QWORD *v186;
  __int128 v187;
  uint64_t v188;
  _QWORD v189[3];
  _QWORD *v190;
  __int128 v191;
  unint64_t v192;
  _QWORD v193[3];
  _QWORD *v194;
  __int128 v195;
  uint64_t v196;
  _QWORD v197[3];
  _QWORD *v198;
  __int128 v199;
  unint64_t v200;
  _QWORD v201[3];
  _QWORD *v202;
  uint64_t v203;

  v203 = *MEMORY[0x24BDAC8D0];
  a8.i64[0] = *(_QWORD *)a1;
  a8.i32[2] = *(_DWORD *)(a1 + 8);
  v162 = a8;
  a8.i64[0] = *(_QWORD *)(a1 + 12);
  a8.i32[2] = *(_DWORD *)(a1 + 20);
  v15 = vcvt_hight_f64_f32(a8);
  v16 = vcvtq_f64_f32(*(float32x2_t *)a8.f32);
  v17 = atomic_load((unsigned __int8 *)&qword_25578F160);
  v143 = v16;
  v144 = v15;
  if ((v17 & 1) == 0)
  {
    v136 = __cxa_guard_acquire(&qword_25578F160);
    v16 = v143;
    v15 = v144;
    if (v136)
    {
      qword_25578F158 = 0x3FEF838B8C811C17;
      __cxa_guard_release(&qword_25578F160);
      v16 = v143;
      v15 = v144;
    }
  }
  v18 = (float64x2_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL);
  v19 = atomic_load((unsigned __int8 *)&qword_25578F170);
  v142 = v18;
  if ((v19 & 1) == 0)
  {
    v137 = __cxa_guard_acquire(&qword_25578F170);
    v18 = v142;
    v16 = v143;
    v15 = v144;
    if (v137)
    {
      qword_25578F168 = 0x3FC63A1A7E0B738CLL;
      __cxa_guard_release(&qword_25578F170);
      v18 = v142;
      v16 = v143;
      v15 = v144;
    }
  }
  if (fabs(v15.f64[0]) >= *(double *)&qword_25578F158)
  {
    v36.f64[0] = v16.f64[0];
    v36.f64[1] = v18.f64[0];
    _Q3 = (int64x2_t)vmulq_f64(v36, (float64x2_t)0);
    v38.f64[0] = v15.f64[0];
    *(_QWORD *)&v38.f64[1] = _Q3.i64[0];
    v39 = vmulq_f64(v36, (float64x2_t)xmmword_2245F5CB0);
    v40 = (float64x2_t)vextq_s8((int8x16_t)v39, (int8x16_t)vmulq_f64(v15, (float64x2_t)0), 8uLL);
    v41 = vsubq_f64((float64x2_t)vdupq_laneq_s64(_Q3, 1), v39);
    _Q1 = vsubq_f64(v38, v40);
    _Q2 = vmulq_f64(_Q1, _Q1);
    _Q3.i64[0] = *(_QWORD *)&_Q1.f64[1];
    __asm { FMLA            D2, D3, V1.D[1] }
    _Q2.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q2.f64[0], v41.f64[0], v41.f64[0]));
    v44 = vmulq_n_f64(_Q1, _Q2.f64[0]);
    v45 = vmulq_f64(v41, _Q2);
    v41.f64[0] = v18.f64[0];
    v41.f64[1] = v15.f64[0];
    _Q1.f64[0] = v15.f64[0];
    _Q1.f64[1] = v16.f64[0];
    _Q2 = (float64x2_t)vextq_s8((int8x16_t)v44, (int8x16_t)v45, 8uLL);
    v152 = v45.f64[0];
    v153.i64[0] = *(_QWORD *)&v44.f64[0];
    v45.f64[1] = v44.f64[0];
    _Q0 = vmlsq_f64(vmulq_f64(v41, v45), _Q1, _Q2);
    v48 = vmlsq_f64(vmulq_laneq_f64(v16, v44, 1), v18, v44);
    _Q1 = vmulq_f64(_Q0, _Q0);
    _Q2.f64[0] = _Q0.f64[1];
    __asm { FMLA            D1, D2, V0.D[1] }
    _Q1.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q1.f64[0], v48.f64[0], v48.f64[0]));
    v151 = (int8x16_t)vmulq_n_f64(_Q0, _Q1.f64[0]);
    v150 = vextq_s8(v151, (int8x16_t)vmulq_f64(v48, _Q1), 8uLL);
    v148 = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u64[0];
    v149 = vextq_s8(v150, v150, 8uLL).u64[0];
  }
  else
  {
    v20.f64[0] = v18.f64[0];
    v20.f64[1] = v15.f64[0];
    v21.f64[0] = v15.f64[0];
    v21.f64[1] = v16.f64[0];
    a9.f64[0] = -0.0;
    _Q5 = vmlaq_f64(vmulq_f64(v21, (float64x2_t)xmmword_2245D2420), v20, (float64x2_t)xmmword_2245F5CB0);
    v23 = vmlaq_f64(vmulq_f64(v18, a9), v16, (float64x2_t)0);
    _Q2 = vmulq_f64(_Q5, _Q5);
    _D3 = _Q5.f64[1];
    __asm { FMLA            D2, D3, V5.D[1] }
    _Q2.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q2.f64[0], v23.f64[0], v23.f64[0]));
    _Q4 = vmulq_f64(v23, _Q2);
    v31 = vmulq_n_f64(_Q5, _Q2.f64[0]);
    v32 = (float64x2_t)vextq_s8((int8x16_t)v31, (int8x16_t)_Q4, 8uLL);
    _Q4.f64[1] = v31.f64[0];
    _Q1 = vmlsq_f64(vmulq_f64(v21, v32), v20, _Q4);
    v34 = vmlsq_laneq_f64(vmulq_f64(v18, v31), v16, v31, 1);
    _Q0 = vmulq_f64(_Q1, _Q1);
    _Q4.f64[0] = _Q1.f64[1];
    __asm { FMLA            D0, D4, V1.D[1] }
    _Q0.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q0.f64[0], v34.f64[0], v34.f64[0]));
    v151.i64[0] = *(_QWORD *)&v31.f64[0];
    *(_QWORD *)&v152 = *(_OWORD *)&vmulq_f64(v34, _Q0);
    v153 = (int8x16_t)vmulq_n_f64(_Q1, _Q0.f64[0]);
    v150.i64[0] = *(_QWORD *)&v32.f64[0];
    v148 = vextq_s8(v153, v153, 8uLL).u64[0];
    v149 = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
  }
  memset(v164, 0, sizeof(v164));
  sub_2236ADBC8((uint64_t)v164, a2);
  v145 = a6;
  v146 = a5;
  v141 = a7;
  v50 = vcvtq_f64_f32(*(float32x2_t *)v162.f32);
  *(_QWORD *)&v51 = *(_OWORD *)&vcvt_hight_f64_f32(v162);
  v52 = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u64[0];
  v139 = v51;
  v140 = v50.f64[0];
  v138 = v52;
  if (!a2)
  {
    v94 = 0;
    v92 = 0;
    *(_OWORD *)v168 = 0u;
    *(_OWORD *)v169 = 0u;
    v170 = 1065353216;
    __p = 0;
    v166 = 0;
    v167 = 0;
LABEL_53:
    v90 = (_BYTE *)a1;
    goto LABEL_54;
  }
  *(_QWORD *)&v50.f64[1] = v52;
  *(_QWORD *)&v53.f64[0] = v153.i64[0];
  *(_QWORD *)&v54.f64[0] = v153.i64[0];
  *(_QWORD *)&v54.f64[1] = v151.i64[0];
  *(_QWORD *)&v55.f64[0] = v148;
  *(_QWORD *)&v55.f64[1] = v150.i64[0];
  v56.f64[0] = v152;
  *(_QWORD *)&v56.f64[1] = v149;
  v161 = v56;
  v163 = v55;
  v57 = (int8x16_t)vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v54, vnegq_f64(v50).f64[0]), v55, v50, 1), v56, v51, 0);
  v58 = &a3[3 * a2];
  v155 = v58;
  *(_QWORD *)&v53.f64[1] = v151.i64[0];
  v160 = v53;
  v59 = vextq_s8(v57, v57, 8uLL).u64[0];
  *(_QWORD *)&v56.f64[0] = v57.i64[0];
  *(_QWORD *)&v56.f64[1] = v59;
  v158 = v56;
  *(_QWORD *)&v56.f64[0] = v57.i64[0];
  *(_QWORD *)&v56.f64[1] = v59;
  v57.i64[1] = v59;
  v156 = (float64x2_t)v57;
  v157 = v56;
  v60 = a3;
  v154 = a4;
  do
  {
    v62 = *v60;
    v61 = v60[1];
    v63 = v60[2];
    *(_QWORD *)&v171 = operator new(0x18uLL);
    *((_QWORD *)&v171 + 1) = v171;
    *(_QWORD *)&v172 = v171 + 24;
    *(_QWORD *)&v199 = &v171;
    *(float32x2_t *)&v195 = vcvt_f32_f64(vaddq_f64(v158, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v160, *(float *)(a4 + 12 * v62)), v163, *(float *)(a4 + 12 * v62 + 4)), v161, *(float *)(a4 + 12 * v62 + 8))));
    sub_2232EA538((void ***)&v199, &v195);
    *(float32x2_t *)&v195 = vcvt_f32_f64(vaddq_f64(v157, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v160, *(float *)(a4 + 12 * v61)), v163, *(float *)(a4 + 12 * v61 + 4)), v161, *(float *)(a4 + 12 * v61 + 8))));
    sub_2232EA538((void ***)&v199, &v195);
    *(float32x2_t *)&v195 = vcvt_f32_f64(vaddq_f64(v156, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v160, *(float *)(a4 + 12 * v63)), v163, *(float *)(a4 + 12 * v63 + 4)), v161, *(float *)(a4 + 12 * v63 + 8))));
    sub_2232EA538((void ***)&v199, &v195);
    v64 = (_BYTE *)*((_QWORD *)&v171 + 1);
    v65 = (_BYTE *)v171;
    v66 = *(_QWORD **)&v164[8];
    if (*(_QWORD *)&v164[8] >= *(_QWORD *)&v164[16])
    {
      __src = (_BYTE *)v171;
      v70 = *(_QWORD **)v164;
      v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v164[8] - *(_QWORD *)v164) >> 3);
      v72 = v71 + 1;
      if (v71 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_22324A284();
      if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v164[16] - *(_QWORD *)v164) >> 3) > v72)
        v72 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v164[16] - *(_QWORD *)v164) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v164[16] - *(_QWORD *)v164) >> 3) >= 0x555555555555555)
        v73 = 0xAAAAAAAAAAAAAAALL;
      else
        v73 = v72;
      v173 = &v164[16];
      if (v73)
      {
        if (v73 > 0xAAAAAAAAAAAAAAALL)
          sub_223174E94();
        v74 = (char *)operator new(24 * v73);
      }
      else
      {
        v74 = 0;
      }
      *(_QWORD *)&v171 = v74;
      *((_QWORD *)&v171 + 1) = &v74[24 * v71];
      v76 = &v74[24 * v73];
      v75 = (_QWORD *)*((_QWORD *)&v171 + 1);
      *(_QWORD *)(*((_QWORD *)&v171 + 1) + 8) = 0;
      *(_QWORD *)&v172 = &v74[24 * v71];
      *((_QWORD *)&v172 + 1) = v76;
      v75[2] = 0;
      *v75 = 0;
      v77 = v64 - __src;
      if (v64 != __src)
      {
        if (v77 < 0)
          sub_22316E078();
        v78 = (char *)operator new(v64 - __src);
        *v75 = v78;
        v75[2] = &v78[8 * (v77 >> 3)];
        v79 = v77 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v78, __src, v79);
        v75[1] = &v78[v79];
      }
      v69 = v75 + 3;
      *(_QWORD *)&v172 = v75 + 3;
      if (v66 == v70)
      {
        *(_QWORD *)v164 = v75;
        *(_QWORD *)&v164[8] = v75 + 3;
        *(_QWORD *)&v164[16] = v76;
        a4 = v154;
        v58 = v155;
        v65 = __src;
        goto LABEL_36;
      }
      v58 = v155;
      do
      {
        v80 = v75;
        *(v75 - 2) = 0;
        *(v75 - 1) = 0;
        v81 = *(_OWORD *)(v66 - 3);
        v66 -= 3;
        *(_OWORD *)(v75 - 3) = v81;
        v75 -= 3;
        *(v80 - 1) = v66[2];
        *v66 = 0;
        v66[1] = 0;
        v66[2] = 0;
      }
      while (v66 != v70);
      v82 = *(_QWORD **)&v164[8];
      v66 = *(_QWORD **)v164;
      *(_QWORD *)v164 = v75;
      *(_OWORD *)&v164[8] = v172;
      v69 = (_QWORD *)v172;
      a4 = v154;
      v65 = __src;
      if (v82 != v66)
      {
        v83 = v82;
        do
        {
          v85 = (void *)*(v83 - 3);
          v83 -= 3;
          v84 = v85;
          if (v85)
          {
            *(v82 - 2) = v84;
            operator delete(v84);
          }
          v82 = v83;
        }
        while (v83 != v66);
LABEL_36:
        if (!v66)
          goto LABEL_38;
LABEL_37:
        operator delete(v66);
        goto LABEL_38;
      }
      if (v66)
        goto LABEL_37;
    }
    else
    {
      **(_QWORD **)&v164[8] = 0;
      v66[1] = 0;
      v66[2] = 0;
      v67 = v64 - v65;
      if (v64 != v65)
      {
        if (v67 < 0)
          sub_22316E078();
        v68 = (char *)operator new(v64 - v65);
        *v66 = v68;
        v66[1] = v68;
        v66[2] = &v68[8 * (v67 >> 3)];
        memcpy(v68, v65, v67 & 0xFFFFFFFFFFFFFFF8);
        v66[1] = &v68[v67 & 0xFFFFFFFFFFFFFFF8];
      }
      v69 = v66 + 3;
    }
LABEL_38:
    *(_QWORD *)&v164[8] = v69;
    if (v65)
      operator delete(v65);
    v60 += 3;
  }
  while (v60 != v58);
  *(_OWORD *)v168 = 0u;
  *(_OWORD *)v169 = 0u;
  v170 = 1065353216;
  do
  {
    *(_QWORD *)&v171 = *a3;
    sub_223F061DC((uint64_t)v168, (unint64_t *)&v171, &v171);
    *(_QWORD *)&v171 = a3[1];
    sub_223F061DC((uint64_t)v168, (unint64_t *)&v171, &v171);
    *(_QWORD *)&v171 = a3[2];
    sub_223F061DC((uint64_t)v168, (unint64_t *)&v171, &v171);
    a3 += 3;
  }
  while (a3 != v58);
  v86 = v169[0];
  __p = 0;
  v166 = 0;
  v167 = 0;
  if (!v169[0])
  {
    v94 = 0;
    v92 = 0;
    goto LABEL_53;
  }
  v87 = 0;
  v88 = -1;
  v89 = v169[0];
  v90 = (_BYTE *)a1;
  do
  {
    v89 = (_QWORD *)*v89;
    ++v88;
    v87 += 8;
  }
  while (v89);
  if (v88 >= 0x1FFFFFFFFFFFFFFFLL)
    sub_22367C394();
  v91 = (char *)operator new(v87);
  v92 = v91;
  v93 = 0;
  __p = v91;
  v167 = &v91[v87];
  do
  {
    *(_QWORD *)&v91[v93] = v86[2];
    v86 = (_QWORD *)*v86;
    v93 += 8;
  }
  while (v86);
  v94 = &v91[v93];
  v166 = v94;
LABEL_54:
  *(_QWORD *)&v171 = v92;
  *((_QWORD *)&v171 + 1) = v145;
  v95 = (_QWORD *)&v172 + 1;
  *(_QWORD *)&v172 = v146;
  *((_QWORD *)&v172 + 1) = &off_24EC647F8;
  v174 = (__int128 *)((char *)&v172 + 8);
  v173 = v90;
  *(_QWORD *)&v175 = v94;
  *((_QWORD *)&v175 + 1) = v145;
  v96 = v177;
  v176 = v146;
  v177[0] = &off_24EC647F8;
  v178 = v177;
  v177[1] = v90;
  if (v92 == v94)
  {
    v103 = 0;
    goto LABEL_132;
  }
  v199 = v171;
  v97 = v201;
  v200 = v172;
  v201[0] = &off_24EC647F8;
  v202 = v201;
  v201[1] = v90;
  v195 = v175;
  v98 = v197;
  v196 = v176;
  v197[0] = &off_24EC647F8;
  v198 = v197;
  v197[1] = v90;
  v99 = (unint64_t *)v171;
  v100 = 0.0;
  do
  {
    v101 = *v99;
    if (v200 <= *v99)
      sub_22457354C(&v200, v101);
    if (!v202)
      sub_223198474();
    v100 = v100
         + (*(float (**)(_QWORD *, unint64_t))(*v202 + 48))(v202, *((_QWORD *)&v199 + 1) + 36 * v101);
    v99 = (unint64_t *)(v199 + 8);
    *(_QWORD *)&v199 = v99;
  }
  while (v99 != (unint64_t *)v195);
  if (v198 == v197)
  {
    v102 = 4;
LABEL_64:
    (*(void (**)(_QWORD *))(*v98 + 8 * v102))(v98);
  }
  else if (v198)
  {
    v102 = 5;
    v98 = v198;
    goto LABEL_64;
  }
  if (v202 == v201)
  {
    v104 = 4;
LABEL_69:
    (*(void (**)(_QWORD *))(*v97 + 8 * v104))(v97);
  }
  else if (v202)
  {
    v104 = 5;
    v97 = v202;
    goto LABEL_69;
  }
  v183 = v171;
  v105 = (uint64_t)v174;
  v184 = v172;
  v106 = v185;
  if (v174)
  {
    if (v174 != (__int128 *)((char *)&v172 + 8))
    {
      v105 = (*(uint64_t (**)(void))(*(_QWORD *)v174 + 16))();
      goto LABEL_73;
    }
    v186 = v185;
    (*(void (**)(char *, _QWORD *))(*((_QWORD *)&v172 + 1) + 24))((char *)&v172 + 8, v185);
  }
  else
  {
LABEL_73:
    v186 = (_QWORD *)v105;
  }
  v179 = v175;
  v180 = v176;
  v107 = v181;
  v108 = (uint64_t)v178;
  if (v178)
  {
    if (v178 != v177)
    {
      v108 = (*(uint64_t (**)(void))(*v178 + 16))();
      goto LABEL_78;
    }
    v182 = v181;
    (*(void (**)(uint64_t, _QWORD *))(v177[0] + 24))((uint64_t)v177, v181);
  }
  else
  {
LABEL_78:
    v182 = (_QWORD *)v108;
  }
  v191 = v183;
  v109 = (uint64_t)v186;
  v192 = v184;
  v110 = v193;
  if (v186)
  {
    if (v186 != v185)
    {
      v109 = (*(uint64_t (**)(void))(*v186 + 16))();
      goto LABEL_83;
    }
    v194 = v193;
    (*(void (**)(_QWORD *, _QWORD *))(v185[0] + 24))(v185, v193);
  }
  else
  {
LABEL_83:
    v194 = (_QWORD *)v109;
  }
  v187 = v179;
  v111 = (uint64_t)v182;
  v188 = v180;
  v112 = v189;
  if (v182)
  {
    if (v182 != v181)
    {
      v111 = (*(uint64_t (**)(void))(*v182 + 16))();
      goto LABEL_88;
    }
    v190 = v189;
    (*(void (**)(_QWORD *, _QWORD *))(v181[0] + 24))(v181, v189);
  }
  else
  {
LABEL_88:
    v190 = (_QWORD *)v111;
  }
  v199 = v191;
  v113 = (uint64_t)v194;
  v200 = v192;
  v114 = v201;
  if (v194)
  {
    if (v194 != v193)
    {
      v113 = (*(uint64_t (**)(void))(*v194 + 16))();
      goto LABEL_93;
    }
    v202 = v201;
    (*(void (**)(_QWORD *, _QWORD *))(v193[0] + 24))(v193, v201);
  }
  else
  {
LABEL_93:
    v202 = (_QWORD *)v113;
  }
  v195 = v187;
  v196 = v188;
  if (!v190)
  {
    v198 = 0;
    v117 = v199;
    v118 = v195;
    goto LABEL_101;
  }
  v115 = v197;
  if (v190 == v189)
  {
    v198 = v197;
    (*(void (**)(_QWORD *, _QWORD *))(v189[0] + 24))(v189, v197);
    v116 = v198;
    v117 = v199;
    v118 = v195;
    if (v198 == v197)
      goto LABEL_105;
LABEL_98:
    if (v116)
    {
      v119 = 5;
      v115 = v116;
      goto LABEL_106;
    }
LABEL_101:
    v120 = v202;
    if (v202 == v201)
      goto LABEL_107;
    goto LABEL_102;
  }
  v116 = (_QWORD *)(*(uint64_t (**)(void))(*v190 + 16))();
  v198 = v116;
  v117 = v199;
  v118 = v195;
  if (v116 != v197)
    goto LABEL_98;
LABEL_105:
  v119 = 4;
LABEL_106:
  (*(void (**)(_QWORD *))(*v115 + 8 * v119))(v115);
  v120 = v202;
  if (v202 == v201)
  {
LABEL_107:
    v121 = 4;
LABEL_108:
    (*(void (**)(_QWORD *))(*v114 + 8 * v121))(v114);
    goto LABEL_109;
  }
LABEL_102:
  if (v120)
  {
    v121 = 5;
    v114 = v120;
    goto LABEL_108;
  }
LABEL_109:
  if (v190 == v189)
  {
    v122 = 4;
LABEL_113:
    (*(void (**)(_QWORD *))(*v112 + 8 * v122))(v112);
  }
  else if (v190)
  {
    v122 = 5;
    v112 = v190;
    goto LABEL_113;
  }
  if (v194 == v193)
  {
    v123 = 4;
LABEL_118:
    (*(void (**)(_QWORD *))(*v110 + 8 * v123))(v110);
  }
  else if (v194)
  {
    v123 = 5;
    v110 = v194;
    goto LABEL_118;
  }
  if (v182 == v181)
  {
    v124 = 4;
LABEL_123:
    (*(void (**)(_QWORD *))(*v107 + 8 * v124))(v107);
  }
  else if (v182)
  {
    v124 = 5;
    v107 = v182;
    goto LABEL_123;
  }
  if (v186 == v185)
  {
    v125 = 4;
LABEL_128:
    (*(void (**)(_QWORD *))(*v106 + 8 * v125))(v106);
  }
  else if (v186)
  {
    v125 = 5;
    v106 = v186;
    goto LABEL_128;
  }
  v103 = COERCE_UNSIGNED_INT(v100 / (float)(unint64_t)((v118 - v117) >> 3)) | 0x100000000;
  if (v178 != v177)
  {
    v126 = v141;
    if (v178)
    {
      v127 = 5;
      v96 = v178;
      goto LABEL_133;
    }
    goto LABEL_134;
  }
LABEL_132:
  v127 = 4;
  v126 = v141;
LABEL_133:
  (*(void (**)(_QWORD *))(*v96 + 8 * v127))(v96);
LABEL_134:
  if (v174 == (__int128 *)((char *)&v172 + 8))
  {
    v128 = 4;
LABEL_138:
    (*(void (**)(_QWORD *))(*v95 + 8 * v128))(v95);
  }
  else if (v174)
  {
    v128 = 5;
    v95 = v174;
    goto LABEL_138;
  }
  if (__p)
  {
    v166 = __p;
    operator delete(__p);
  }
  v129 = v169[0];
  if (v169[0])
  {
    do
    {
      v130 = (_QWORD *)*v129;
      operator delete(v129);
      v129 = v130;
    }
    while (v130);
  }
  v131 = v168[0];
  v168[0] = 0;
  if (v131)
    operator delete(v131);
  *(_QWORD *)&v132 = v151.i64[0];
  *((_QWORD *)&v132 + 1) = v150.i64[0];
  *(_QWORD *)&v133 = v153.i64[0];
  *((_QWORD *)&v133 + 1) = v148;
  v134 = *(float *)&v103;
  if ((v103 & 0x100000000) == 0)
    v134 = 0.0;
  *(_OWORD *)v126 = v133;
  *(float64_t *)(v126 + 16) = v152;
  *(_QWORD *)(v126 + 24) = 0;
  *(_OWORD *)(v126 + 32) = v132;
  *(_QWORD *)(v126 + 48) = v149;
  *(_QWORD *)(v126 + 56) = 0;
  *(float64_t *)&v135 = v143.f64[0];
  *((_QWORD *)&v135 + 1) = *(_QWORD *)&v142.f64[0];
  *(_OWORD *)(v126 + 64) = v135;
  *(float64_t *)(v126 + 80) = v144.f64[0];
  *(_QWORD *)(v126 + 88) = 0;
  *(float64_t *)&v135 = v140;
  *((_QWORD *)&v135 + 1) = v138;
  *(_OWORD *)(v126 + 96) = v135;
  *(double *)(v126 + 112) = v139;
  *(_QWORD *)(v126 + 120) = 0x3FF0000000000000;
  *(float *)(v126 + 128) = v134;
  *(_OWORD *)(v126 + 136) = *(_OWORD *)v164;
  *(_QWORD *)(v126 + 152) = *(_QWORD *)&v164[16];
  *(_BYTE *)(v126 + 160) = 0;
  *(_BYTE *)(v126 + 184) = 0;
  *(_BYTE *)(v126 + 192) = 0;
}

void sub_223F8D5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t a69;
  _QWORD *v69;
  _QWORD *v70;
  void *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v77 = *(_QWORD **)(v75 - 144);
  if (v77 == v74)
  {
    v78 = 4;
  }
  else
  {
    if (!v77)
      goto LABEL_6;
    v78 = 5;
    v74 = *(_QWORD **)(v75 - 144);
  }
  (*(void (**)(_QWORD *))(*v74 + 8 * v78))(v74);
LABEL_6:
  if ((_QWORD *)STACK[0x300] == v73)
  {
    v79 = 4;
  }
  else
  {
    if (!STACK[0x300])
      goto LABEL_11;
    v79 = 5;
    v73 = (_QWORD *)STACK[0x300];
  }
  (*(void (**)(_QWORD *))(*v73 + 8 * v79))(v73);
LABEL_11:
  if ((_QWORD *)STACK[0x340] == v72)
  {
    v80 = 4;
  }
  else
  {
    if (!STACK[0x340])
      goto LABEL_16;
    v80 = 5;
    v72 = (_QWORD *)STACK[0x340];
  }
  (*(void (**)(_QWORD *))(*v72 + 8 * v80))(v72);
LABEL_16:
  if ((_QWORD *)STACK[0x280] == v69)
  {
    v81 = 4;
  }
  else
  {
    if (!STACK[0x280])
      goto LABEL_21;
    v81 = 5;
    v69 = (_QWORD *)STACK[0x280];
  }
  (*(void (**)(_QWORD *))(*v69 + 8 * v81))(v69);
LABEL_21:
  if ((_QWORD *)STACK[0x2C0] == v70)
  {
    v82 = 4;
  }
  else
  {
    if (!STACK[0x2C0])
      goto LABEL_26;
    v82 = 5;
    v70 = (_QWORD *)STACK[0x2C0];
  }
  (*(void (**)(_QWORD *))(*v70 + 8 * v82))(v70);
LABEL_26:
  sub_223F8D818(&a69);
  if (v71)
  {
    a61 = (uint64_t)v71;
    operator delete(v71);
    sub_22322E828((uint64_t)&a63);
    sub_22317C838(&a57);
    _Unwind_Resume(a1);
  }
  sub_22322E828((uint64_t)&a63);
  sub_22317C838(&a57);
  _Unwind_Resume(a1);
}

void sub_223F8D7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;

  if (a69)
    JUMPOUT(0x223F8D804);
  JUMPOUT(0x223F8D808);
}

_QWORD *sub_223F8D818(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 10;
  v3 = (_QWORD *)a1[13];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[6];
  if (v5 == a1 + 3)
  {
    v6 = 4;
    v5 = a1 + 3;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_223F8D89C()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223F8D8B0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC647F8;
  result[1] = v3;
  return result;
}

uint64_t sub_223F8D8E4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC647F8;
  a2[1] = v2;
  return result;
}

float sub_223F8D900(uint64_t a1, uint64_t a2, double a3, float32x2_t a4, double a5, float32x2_t a6, double a7, float32x2_t a8, double a9, double a10)
{
  uint64_t v10;
  float32x2_t v11;
  float32x2_t v12;

  v10 = *(_QWORD *)(a1 + 8);
  a4.i32[0] = *(_DWORD *)(a2 + 8);
  a6.i32[0] = *(_DWORD *)(a2 + 20);
  a8.i32[0] = *(_DWORD *)(a2 + 32);
  v11 = *(float32x2_t *)(v10 + 12);
  LODWORD(a10) = *(_DWORD *)(v10 + 20);
  v12 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a2, v11.f32[0]), *(float32x2_t *)(a2 + 12), v11, 1), *(float32x2_t *)(a2 + 24), *(float *)&a10);
  return sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(v11, v12), (float32x2_t)vdup_lane_s32((int32x2_t)v12, 1), v11, 1), vmla_f32(vmla_lane_f32(vmul_f32(a4, v11), a6, v11, 1), *(float32x2_t *)&a10, a8), *(float32x2_t *)&a10).f32[0]);
}

uint64_t sub_223F8D95C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3acv16surfacedetection12_GLOBAL__N_123computePlaneUncertaintyERKNS0_8geometry5PlaneIfEENS_3e"
                     "sn4spanIKNS3_15IndexedTriangleImEELm18446744073709551615EEENS9_IKN3cva6MatrixIfLj3ELj3ELb1EEELm1844"
                     "6744073709551615EEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3acv16surfacedetection12_GLOBAL__N_123computePlaneUncertaintyERKNS0_8geometry5Pla"
                                "neIfEENS_3esn4spanIKNS3_15IndexedTriangleImEELm18446744073709551615EEENS9_IKN3cva6Matrix"
                                "IfLj3ELj3ELb1EEELm18446744073709551615EEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3acv16surfacedetection12_GLOBAL__N_123computePlaneUncertaintyERKNS0_8geometry5PlaneIfEENS_3esn4spanIKNS3_15IndexedTriangleImEELm18446744073709551615EEENS9_IKN3cva6MatrixIfLj3ELj3ELb1EEELm18446744073709551615EEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3acv16surfacedetection12_GLOBAL__N_123computePlaneUncertaintyERKNS0_8geometry5PlaneIfEENS_3esn4spanIKNS3_15IndexedTriangleImEELm18446744073709551615EEENS9_IKN3cva6MatrixIfLj3ELj3ELb1EEELm18446744073709551615EEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223F8D9C8()
{
  return &unk_24EC64868;
}

void sub_223F8D9D4(unsigned __int8 **a1@<X0>, unsigned __int8 **a2@<X1>, char **a3@<X8>, float32x2_t a4@<D1>, float32x2_t a5@<D3>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  unsigned __int8 v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  char *v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  int8x8_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint64_t ***v27;
  uint64_t **v28;
  unint64_t v30;
  uint64_t *v32;
  float v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  void *v38;
  void *v39;
  uint64_t v40;
  _QWORD **v41;
  size_t v42;
  size_t v43;
  size_t v44;
  _QWORD *v45;
  size_t v46;
  uint64_t v47;
  unint64_t v48;
  uint8x8_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  size_t v53;
  unint64_t v54;
  uint8x8_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  void *v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  uint32x4_t *v62;
  uint32x4_t *v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  int v79;
  uint8x8_t v80;
  unint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t ***v88;
  uint64_t **v89;
  uint64_t *v91;
  unint64_t v93;
  int v94;
  unint64_t v95;
  int v96;
  unint64_t v97;
  int v98;
  unint64_t v99;
  int v100;
  unint64_t v101;
  uint64_t v103;
  uint64_t v105;
  float *v106;
  float *v107;
  uint64_t v108;
  uint64_t v109;
  float *v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  uint32x4_t *v117;
  unsigned int v118;
  int32x4_t *v119;
  int32x4_t v120;
  int32x4_t v121;
  uint64_t v122;
  __int32 v123;
  uint64_t v124;
  float *v125;
  unsigned int *v126;
  unsigned int v127;
  uint64_t v128;
  _BYTE *v129;
  _BYTE *v130;
  uint64_t v131;
  uint64_t v132;
  BOOL *v133;
  float *v134;
  float v135;
  uint64_t v136;
  BOOL *v137;
  float *v138;
  unsigned int *v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  float *v147;
  float *v148;
  unint64_t v149;
  uint64_t v150;
  float *v151;
  uint64_t v152;
  unsigned int v153;
  int v154;
  unint64_t v155;
  uint64_t v156;
  float *v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int *v160;
  unsigned int v161;
  uint32x4_t *v162;
  uint32x4_t v163;
  uint64_t v164;
  uint32x4_t v165;
  unsigned int v166;
  unsigned int v167;
  unint64_t v168;
  uint32x4_t *v169;
  float32x4_t *v170;
  uint64_t v171;
  float32x4_t v172;
  unsigned int *v173;
  unsigned int v174;
  unsigned int *v175;
  float *v176;
  uint64_t v177;
  float v178;
  float v179;
  unsigned int v180;
  char *v181;
  char *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _BYTE *v187;
  _BYTE *v188;
  int v189;
  unsigned int v190;
  int v191;
  uint64_t v192;
  int v193;
  __int32 *v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  _BYTE *v201;
  _DWORD *v202;
  unint64_t v203;
  char *v204;
  unint64_t v205;
  uint64_t v206;
  char *v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _OWORD *v211;
  char *v212;
  uint64_t v213;
  __int128 v214;
  unsigned int v215;
  int v216;
  unint64_t v217;
  uint64_t v218;
  float *v219;
  unsigned int *v220;
  unsigned int v221;
  uint32x4_t *v222;
  unsigned int v223;
  int32x4_t *v224;
  int32x4_t v225;
  int32x4_t v226;
  uint64_t v227;
  __int32 v228;
  uint64_t v229;
  char *v230;
  char *v231;
  char *v232;
  __int16 v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _BYTE *v238;
  char *v239;
  uint64_t v240;
  int64_t v241;
  unint64_t v242;
  char *v243;
  __int16 v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  _OWORD *v248;
  char *v249;
  unint64_t v250;
  __int128 v251;
  float *v252;
  float *v253;
  int v254;
  char *v256;
  uint64_t v258;
  char **v259;
  unint64_t v260;
  unsigned __int8 *v261;
  _BYTE *v262;
  unsigned __int8 *v263;
  uint64_t v264;
  uint32x4_t *v265;
  char *v266;
  char *v267;
  char *v268;
  void *v269[2];
  void *__p[2];
  float v271;

  v5 = a1[3];
  v6 = a1[4];
  v7 = a2[3];
  v8 = a2[4];
  LOWORD(v266) = 1026;
  *(_OWORD *)v269 = 0u;
  *(_OWORD *)__p = 0u;
  v271 = 1.0;
  if (v7)
    v9 = v5 == 0;
  else
    v9 = 1;
  if (v9)
    goto LABEL_6;
  v259 = a3;
  v13 = 0;
  v261 = v6;
  v263 = &v8[16 * (_QWORD)v7];
  v14 = &v6[16 * (_QWORD)v5];
  do
  {
    v15 = *v8;
    if (v266 == v15)
    {
      v16 = 0;
    }
    else
    {
      v17 = (char *)&v266 + 2;
      if (BYTE1(v266) != v15)
        goto LABEL_17;
      v16 = 1;
    }
    v17 = (char *)((unint64_t)&v266 | v16);
LABEL_17:
    if (v17 - (char *)&v266 != 2)
    {
      v18 = 0;
      v19 = v261;
      while (1)
      {
        if (*v19 == *v8)
        {
          a4.i32[0] = *((_DWORD *)v19 + 3);
          a5.i32[0] = *((_DWORD *)v8 + 3);
          if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(v19 + 4), *(float32x2_t *)(v8 + 4)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(v8 + 4), 1), *(float32x2_t *)(v19 + 4), 1), a5, a4).f32[0] >= 0.86603)break;
        }
LABEL_22:
        v19 += 16;
        ++v18;
        if (v19 == v14)
          goto LABEL_11;
      }
      v21 = operator new(0x18uLL);
      v22 = v21;
      *((_BYTE *)v21 + 16) = v18;
      *((_BYTE *)v21 + 17) = v13;
      v20 = v13 + 2654435769;
      v23 = (v20 + (((unint64_t)v18 + 2654435769u) >> 2) + ((v18 + 2654435769) << 6)) ^ (v18 + 2654435769);
      *v21 = 0;
      v21[1] = v23;
      v24 = (int8x8_t)v269[1];
      if (v269[1])
      {
        v25 = (uint8x8_t)vcnt_s8((int8x8_t)v269[1]);
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.u32[0] > 1uLL)
        {
          v26 = (v20 + (((unint64_t)v18 + 2654435769u) >> 2) + ((v18 + 2654435769) << 6)) ^ (v18 + 2654435769);
          if (v269[1] <= (void *)v23)
            v26 = v23 % (unint64_t)v269[1];
        }
        else
        {
          v26 = ((unint64_t)v269[1] - 1) & v23;
        }
        v27 = (uint64_t ***)*((_QWORD *)v269[0] + v26);
        if (v27)
        {
          v28 = *v27;
          if (v28)
          {
            if (v25.u32[0] < 2uLL)
            {
              while (1)
              {
                v32 = v28[1];
                if (v32 == (uint64_t *)v23)
                {
                  if (*((unsigned __int8 *)v28 + 16) == v18 && *((unsigned __int8 *)v28 + 17) == v13)
                    goto LABEL_106;
                }
                else if (((unint64_t)v32 & ((unint64_t)v269[1] - 1)) != v26)
                {
                  goto LABEL_51;
                }
                v28 = (uint64_t **)*v28;
                if (!v28)
                  goto LABEL_51;
              }
            }
            do
            {
              v30 = (unint64_t)v28[1];
              if (v30 == v23)
              {
                if (*((unsigned __int8 *)v28 + 16) == v18 && *((unsigned __int8 *)v28 + 17) == v13)
                {
LABEL_106:
                  operator delete(v21);
                  goto LABEL_22;
                }
              }
              else
              {
                if ((void *)v30 >= v269[1])
                  v30 %= (unint64_t)v269[1];
                if (v30 != v26)
                  break;
              }
              v28 = (uint64_t **)*v28;
            }
            while (v28);
          }
        }
      }
LABEL_51:
      v33 = (float)((unint64_t)__p[1] + 1);
      if (!v269[1] || (float)(v271 * (float)(unint64_t)v269[1]) < v33)
      {
        v34 = ((unint64_t)v269[1] & ((unint64_t)v269[1] - 1)) != 0;
        if (v269[1] < (void *)3)
          v34 = 1;
        v35 = v34 | (2 * (uint64_t)v269[1]);
        v36 = vcvtps_u32_f32(v33 / v271);
        if (v35 <= v36)
          prime = v36;
        else
          prime = v35;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v24 = (int8x8_t)v269[1];
        }
        if (prime > *(_QWORD *)&v24)
        {
LABEL_63:
          if (prime >> 61)
            sub_223174E94();
          v38 = operator new(8 * prime);
          v39 = v269[0];
          v269[0] = v38;
          if (v39)
            operator delete(v39);
          v40 = 0;
          v269[1] = (void *)prime;
          do
            *((_QWORD *)v269[0] + v40++) = 0;
          while (prime != v40);
          v41 = (_QWORD **)__p[0];
          if (!__p[0])
            goto LABEL_94;
          v42 = *((_QWORD *)__p[0] + 1);
          v43 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            v44 = v42 & v43;
            *((_QWORD *)v269[0] + v44) = __p;
            while (1)
            {
              v45 = *v41;
              if (!*v41)
                break;
              v46 = v45[1] & v43;
              if (v46 == v44)
              {
                v41 = (_QWORD **)*v41;
              }
              else if (*((_QWORD *)v269[0] + v46))
              {
                *v41 = (_QWORD *)*v45;
                v47 = 8 * v46;
                *v45 = **(_QWORD **)((char *)v269[0] + v47);
                **(_QWORD **)((char *)v269[0] + v47) = v45;
              }
              else
              {
                *((_QWORD *)v269[0] + v46) = v41;
                v41 = (_QWORD **)v45;
                v44 = v46;
              }
            }
            goto LABEL_94;
          }
          if (v42 >= prime)
            v42 %= prime;
          *((_QWORD *)v269[0] + v42) = __p;
          v51 = *v41;
          if (!*v41)
          {
LABEL_94:
            v24 = (int8x8_t)prime;
            goto LABEL_95;
          }
          while (1)
          {
LABEL_89:
            v53 = v51[1];
            if (v53 >= prime)
              v53 %= prime;
            if (v53 == v42)
              goto LABEL_88;
            if (*((_QWORD *)v269[0] + v53))
              break;
            *((_QWORD *)v269[0] + v53) = v41;
            v41 = (_QWORD **)v51;
            v51 = (_QWORD *)*v51;
            v42 = v53;
            if (!v51)
              goto LABEL_94;
          }
          *v41 = (_QWORD *)*v51;
          v52 = 8 * v53;
          *v51 = **(_QWORD **)((char *)v269[0] + v52);
          **(_QWORD **)((char *)v269[0] + v52) = v51;
          v51 = v41;
LABEL_88:
          v41 = (_QWORD **)v51;
          v51 = (_QWORD *)*v51;
          if (!v51)
            goto LABEL_94;
          goto LABEL_89;
        }
        if (prime < *(_QWORD *)&v24)
        {
          v48 = vcvtps_u32_f32((float)(unint64_t)__p[1] / v271);
          if (*(_QWORD *)&v24 < 3uLL || (v49 = (uint8x8_t)vcnt_s8(v24), v49.i16[0] = vaddlv_u8(v49), v49.u32[0] > 1uLL))
          {
            v48 = std::__next_prime(v48);
          }
          else
          {
            v50 = 1 << -(char)__clz(v48 - 1);
            if (v48 >= 2)
              v48 = v50;
          }
          if (prime <= v48)
            prime = v48;
          if (prime >= *(_QWORD *)&v24)
          {
            v24 = (int8x8_t)v269[1];
          }
          else
          {
            if (prime)
              goto LABEL_63;
            v59 = v269[0];
            v269[0] = 0;
            if (v59)
              operator delete(v59);
            v24 = 0;
            v269[1] = 0;
          }
        }
      }
LABEL_95:
      v54 = v22[1];
      v55 = (uint8x8_t)vcnt_s8(v24);
      v55.i16[0] = vaddlv_u8(v55);
      if (v55.u32[0] > 1uLL)
      {
        if (v54 >= *(_QWORD *)&v24)
          v54 %= *(_QWORD *)&v24;
      }
      else
      {
        v54 &= *(_QWORD *)&v24 - 1;
      }
      v56 = v269[0];
      v57 = (_QWORD *)*((_QWORD *)v269[0] + v54);
      if (!v57)
      {
        *v22 = __p[0];
        __p[0] = v22;
        v56[v54] = __p;
        if (*v22)
        {
          v58 = *(_QWORD *)(*v22 + 8);
          if (v55.u32[0] > 1uLL)
          {
            if (v58 >= *(_QWORD *)&v24)
              v58 %= *(_QWORD *)&v24;
          }
          else
          {
            v58 &= *(_QWORD *)&v24 - 1;
          }
          v57 = (char *)v269[0] + 8 * v58;
LABEL_20:
          *v57 = v22;
        }
        ++__p[1];
        goto LABEL_22;
      }
      *v22 = *v57;
      goto LABEL_20;
    }
LABEL_11:
    v8 += 16;
    ++v13;
  }
  while (v8 != v263);
  a3 = v259;
  if (__p[1])
  {
    v60 = a1[3];
    v61 = a2[3];
    v62 = (uint32x4_t *)operator new((4 * ((_DWORD)v60 * (_DWORD)v61) + 31) & 0x7FFFFFFE0, (std::align_val_t)0x20uLL);
    v63 = v62;
    v64 = ((_DWORD)v61 * (_DWORD)v60);
    if ((_DWORD)v64)
      bzero(v62, 4 * ((_DWORD)v61 * (_DWORD)v60));
    v65 = a1[1];
    v66 = a2[1];
    v67 = (((unint64_t)a1[2] >> 32) * HIDWORD(v65));
    v68 = (((unint64_t)a2[2] >> 32) * HIDWORD(v66));
    if (v67 | v68)
    {
      v69 = *a1;
      v70 = *a2;
      v71 = &(*a1)[v67];
      v72 = &(*a2)[v68];
      v73 = (unint64_t)v269[1];
      v74 = a1[2];
      v75 = a2[2];
      v76 = v74 - a1[2] * v65 + ((unint64_t)a1[2] >> 32);
      v77 = v75 - a2[2] * v66 + ((unint64_t)a2[2] >> 32);
      v78 = 0;
      if (v269[1])
      {
        v79 = 0;
        v80 = (uint8x8_t)vcnt_s8((int8x8_t)v269[1]);
        v80.i16[0] = vaddlv_u8(v80);
        v81 = (unint64_t)v269[1] + 0x7FFFFFFFFFFFFFFFLL;
        v82 = v269[0];
        v83 = (unint64_t)v269[1] - 1;
        do
        {
          v84 = *v69;
          v85 = *v70;
          v86 = (v85 + 2654435769 + ((unint64_t)(v84 + 2654435769) >> 2) + ((v84 + 2654435769) << 6)) ^ (v84 + 2654435769);
          if (v80.u32[0] > 1uLL)
          {
            v87 = (v85 + 2654435769 + ((unint64_t)(v84 + 2654435769) >> 2) + ((v84 + 2654435769) << 6)) ^ (v84 + 2654435769);
            if (v86 >= v73)
              v87 = v86 % v73;
          }
          else
          {
            v87 = v86 & v81;
          }
          v88 = (uint64_t ***)v82[v87];
          if (v88)
          {
            v89 = *v88;
            if (*v88)
            {
              if (v80.u32[0] < 2uLL)
              {
                while (1)
                {
                  v91 = v89[1];
                  if ((uint64_t *)v86 == v91)
                  {
                    if (*((unsigned __int8 *)v89 + 16) == (_DWORD)v84 && *((unsigned __int8 *)v89 + 17) == (_DWORD)v85)
                      goto LABEL_148;
                  }
                  else if (((unint64_t)v91 & v83) != v87)
                  {
                    goto LABEL_149;
                  }
                  v89 = (uint64_t **)*v89;
                  if (!v89)
                    goto LABEL_149;
                }
              }
              do
              {
                v93 = (unint64_t)v89[1];
                if (v86 == v93)
                {
                  if (*((unsigned __int8 *)v89 + 16) == (_DWORD)v84 && *((unsigned __int8 *)v89 + 17) == (_DWORD)v85)
                  {
LABEL_148:
                    ++v63->i32[(v84 + (_DWORD)v60 * v85)];
                    break;
                  }
                }
                else
                {
                  if (v93 >= v73)
                    v93 %= v73;
                  if (v93 != v87)
                    break;
                }
                v89 = (uint64_t **)*v89;
              }
              while (v89);
            }
          }
LABEL_149:
          v94 = v79 + 1;
          if (v79 + 1 == (_DWORD)v65)
            v79 = 0;
          else
            ++v79;
          if (v94 == (_DWORD)v65)
            v95 = v76;
          else
            v95 = v74;
          v69 += v95;
          v96 = v78 + 1;
          if (v78 + 1 == (_DWORD)v66)
            v78 = 0;
          else
            ++v78;
          if (v96 == (_DWORD)v66)
            v97 = v77;
          else
            v97 = v75;
          v70 += v97;
        }
        while (v69 != v71 || v70 != v72);
      }
      else
      {
        do
        {
          v98 = v78 + 1;
          if (v78 + 1 == (_DWORD)v65)
            v78 = 0;
          else
            ++v78;
          if (v98 == (_DWORD)v65)
            v99 = a1[2]
                - (unint64_t)(a1[2] * v65)
                + ((unint64_t)a1[2] >> 32);
          else
            v99 = a1[2];
          v69 += v99;
          v100 = v73 + 1;
          if ((_DWORD)v73 + 1 == (_DWORD)v66)
            LODWORD(v73) = 0;
          else
            LODWORD(v73) = v73 + 1;
          if (v100 == (_DWORD)v66)
            v101 = a2[2]
                 - (unint64_t)(a2[2] * v66)
                 + ((unint64_t)a2[2] >> 32);
          else
            v101 = a2[2];
          v70 += v101;
        }
        while (v69 != v71 || v70 != v72);
      }
    }
    if (!(_DWORD)v61 || !(_DWORD)v60)
    {
LABEL_200:
      *v259 = 0;
      v259[1] = 0;
      v259[2] = 0;
      goto LABEL_201;
    }
    if ((_DWORD)v60 == 1)
    {
      if (!v63->i32[0])
      {
        v103 = 1;
        while (v61 != v103)
        {
          if (v63->i32[v103++])
            goto LABEL_188;
        }
        goto LABEL_200;
      }
    }
    else
    {
      v111 = 0;
      v112 = 0;
      v113 = (v60 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
      v114 = (v113 + 1) & 0x7FFFFFFFFFFFFFF8;
      while (1)
      {
        v115 = (unsigned int *)v63 + (v112 * (_DWORD)v60);
        v118 = *v115;
        v117 = (uint32x4_t *)(v115 + 1);
        v116 = v118;
        if (v113 < 7)
          goto LABEL_341;
        v119 = (int32x4_t *)((char *)v63[1].i64 + 4 * v111 + 4);
        v117 = (uint32x4_t *)((char *)v117 + 4 * v114);
        v120 = 0uLL;
        v121 = (int32x4_t)v116;
        v122 = (v113 + 1) & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v121 = vaddq_s32(v119[-1], v121);
          v120 = vaddq_s32(*v119, v120);
          v119 += 2;
          v122 -= 8;
        }
        while (v122);
        v116 = vaddvq_s32(vaddq_s32(v120, v121));
        if (v113 + 1 != v114)
        {
LABEL_341:
          do
          {
            v123 = v117->i32[0];
            v117 = (uint32x4_t *)((char *)v117 + 4);
            v116 += v123;
          }
          while (v117 != (uint32x4_t *)((char *)v63 + 4 * (v112 * (_DWORD)v60) + 4 * v60));
        }
        if (v116)
          break;
        ++v112;
        v111 += v60;
        if (v112 == v61)
          goto LABEL_200;
      }
    }
LABEL_188:
    v105 = 4 * v60;
    v265 = v63;
    v106 = (float *)operator new((v105 + 31) & 0x7FFFFFFE0, (std::align_val_t)0x20uLL);
    v107 = v106;
    if ((_DWORD)v64 == (_DWORD)v60)
    {
      v108 = 0;
      v109 = 4 * v60;
      v110 = v106;
      do
      {
        *v110++ = (float)v63->u32[v108];
        v108 = (v108 + 1);
        v109 -= 4;
      }
      while (v109);
    }
    else
    {
      v124 = 0;
      v125 = v106;
      do
      {
        v126 = (unsigned int *)v63 + v124;
        v127 = *v126;
        v128 = 4 * v60;
        do
        {
          if (v127 <= *(unsigned int *)((char *)v126 + v128))
            v127 = *(unsigned int *)((char *)v126 + v128);
          v128 += v105;
        }
        while (4 * v64 != v128);
        *v125++ = (float)v127;
        v124 = (v124 + 1);
      }
      while (v125 != &v106[v60]);
    }
    v129 = operator new((v60 + 31) & 0x1FFFFFFE0, (std::align_val_t)0x20uLL);
    v130 = v129;
    v262 = v129;
    if ((_DWORD)v64 == (_DWORD)v60)
    {
      v131 = 0;
      v132 = v60;
      v133 = v129;
      v134 = v107;
      do
      {
        v135 = *v134++;
        *v133++ = (float)(v135 / (float)v63->u32[v131]) >= 0.5;
        v131 = (v131 + 1);
        --v132;
      }
      while (v132);
    }
    else
    {
      v136 = 0;
      v137 = v129;
      v138 = v107;
      do
      {
        v139 = (unsigned int *)v63 + v136;
        v140 = *v139;
        v141 = 4 * v60;
        do
        {
          v140 += *(unsigned int *)((char *)v139 + v141);
          v141 += v105;
        }
        while (4 * v64 != v141);
        *v137++ = (float)(*v138++ / (float)v140) >= 0.5;
        v136 = (v136 + 1);
      }
      while (v137 != &v129[v60]);
    }
    v142 = 0;
    while (!v129[v142])
    {
      if (v60 == ++v142)
      {
        v143 = 0;
        v144 = 0;
        v266 = 0;
        v267 = 0;
        v268 = 0;
        goto LABEL_295;
      }
    }
    v256 = &v129[v60];
    v258 = v60;
    v145 = v61;
    v146 = 4 * v61;
    v147 = (float *)operator new((v146 + 31) & 0x7FFFFFFE0, (std::align_val_t)0x20uLL);
    v148 = &v147[v145];
    if ((_DWORD)v60 == 1)
    {
      v149 = (v145 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v149 < 7)
      {
        v150 = 0;
        v151 = v147;
        v152 = v60;
        goto LABEL_237;
      }
      v168 = v149 + 1;
      v150 = (v149 + 1) & 0x7FFFFFFFFFFFFFF8;
      v151 = &v147[v150];
      v169 = v63 + 1;
      v170 = (float32x4_t *)(v147 + 4);
      v171 = v150;
      do
      {
        v172 = vcvtq_f32_u32(*v169);
        v170[-1] = vcvtq_f32_u32(v169[-1]);
        *v170 = v172;
        v169 += 2;
        v170 += 2;
        v171 -= 8;
      }
      while (v171);
      v152 = v60;
      if (v168 != v150)
      {
LABEL_237:
        v173 = (unsigned int *)v63 + v150;
        do
        {
          v174 = *v173++;
          *v151++ = (float)v174;
        }
        while (v151 != v148);
      }
    }
    else
    {
      v153 = 0;
      v154 = 0;
      v152 = v60;
      v155 = (v60 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
      v156 = (v155 + 1) & 0x7FFFFFFFFFFFFFF8;
      v157 = v147;
      do
      {
        v158 = (unsigned int *)v63 + (v154 * (_DWORD)v60);
        v161 = *v158;
        v160 = v158 + 1;
        v159 = v161;
        if (v155 < 7)
          goto LABEL_232;
        v162 = (uint32x4_t *)((char *)v63 + 4 * v153 + 20);
        v160 += v156;
        v163 = (uint32x4_t)vdupq_n_s32(v159);
        v164 = (v155 + 1) & 0x7FFFFFFFFFFFFFF8;
        v165 = v163;
        do
        {
          v163 = vmaxq_u32(v163, v162[-1]);
          v165 = vmaxq_u32(v165, *v162);
          v162 += 2;
          v164 -= 8;
        }
        while (v164);
        v159 = vmaxvq_u32(vmaxq_u32(v163, v165));
        if (v155 + 1 != v156)
        {
LABEL_232:
          do
          {
            v167 = *v160++;
            v166 = v167;
            if (v159 <= v167)
              v159 = v166;
          }
          while (v160 != (unsigned int *)((char *)v63 + 4 * v154 * (_DWORD)v60 + 4 * v60));
        }
        *v157++ = (float)v159;
        ++v154;
        v153 += v60;
      }
      while (v157 != v148);
    }
    v253 = v147;
    if ((_DWORD)v60 == 1)
    {
      if ((float)(*v147 / (float)v63->u32[0]) < 0.7)
      {
        v175 = &v63->u32[1];
        v176 = v147 + 1;
        v177 = v146 - 4;
        while (v177)
        {
          v178 = *v176++;
          v179 = v178;
          v180 = *v175++;
          v177 -= 4;
          if ((float)(v179 / (float)v180) >= 0.7)
            goto LABEL_244;
        }
LABEL_293:
        v143 = 0;
        v144 = 0;
        v266 = 0;
        v267 = 0;
        v268 = 0;
LABEL_294:
        MEMORY[0x227684CB8](v253, 0x1000C8052888210);
LABEL_295:
        MEMORY[0x227684CB8](v262, 0x1000C8077774924);
        MEMORY[0x227684CB8](v107, 0x1000C8052888210);
        v229 = v143 - v144;
        if (v143 == v144)
        {
          *v259 = 0;
          v259[1] = 0;
          v259[2] = 0;
          v63 = v265;
          if (!v143)
            goto LABEL_201;
          goto LABEL_332;
        }
        if (v229 < 0)
          sub_22316E078();
        v230 = (char *)operator new((unint64_t)v229 >> 2);
        v231 = &v230[2 * (v229 >> 3)];
        v232 = v230;
        while (2)
        {
          while (1)
          {
            v233 = *v144 | (unsigned __int16)(*((_WORD *)v144 + 2) << 8);
            if (v232 >= v231)
              break;
            *(_WORD *)v232 = v233;
            v232 += 2;
            v144 += 8;
            if (v144 == v143)
              goto LABEL_329;
          }
          v234 = v232 - v230;
          if (v232 - v230 <= -3)
            sub_22316E078();
          v235 = v234 >> 1;
          if (v231 - v230 <= (unint64_t)((v234 >> 1) + 1))
            v236 = v235 + 1;
          else
            v236 = v231 - v230;
          if ((unint64_t)(v231 - v230) >= 0x7FFFFFFFFFFFFFFELL)
            v237 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v237 = v236;
          if (v237)
          {
            if (v237 < 0)
              sub_223174E94();
            v238 = operator new(2 * v237);
            v239 = &v238[2 * v235];
            v231 = &v238[2 * v237];
            *(_WORD *)v239 = v233;
            v240 = (uint64_t)(v239 + 2);
            v241 = v232 - v230;
            if (v232 == v230)
            {
LABEL_316:
              operator delete(v230);
              goto LABEL_317;
            }
          }
          else
          {
            v238 = 0;
            v239 = (char *)(2 * v235);
            v231 = 0;
            *(_WORD *)(2 * v235) = v233;
            v240 = 2 * v235 + 2;
            v241 = v232 - v230;
            if (v232 == v230)
              goto LABEL_316;
          }
          v242 = v241 - 2;
          if (v242 < 0x5E)
          {
            v243 = v232;
            goto LABEL_314;
          }
          v245 = (v232 - 2 - v230) & 0xFFFFFFFFFFFFFFFELL;
          if (&v238[(v234 & 0xFFFFFFFFFFFFFFFELL) - 2 - v245] > &v238[(v234 & 0xFFFFFFFFFFFFFFFELL) - 2])
          {
            v243 = v232;
            goto LABEL_314;
          }
          if (&v232[-v245 - 2] > v232 - 2)
          {
            v243 = v232;
            goto LABEL_314;
          }
          if (v232 - v238 - (v234 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
          {
            v243 = v232;
            goto LABEL_314;
          }
          v246 = (v242 >> 1) + 1;
          v247 = 2 * (v246 & 0xFFFFFFFFFFFFFFF0);
          v243 = &v232[-v247];
          v239 -= v247;
          v248 = &v238[2 * v235 - 16];
          v249 = v232 - 16;
          v250 = v246 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v251 = *(_OWORD *)v249;
            *(v248 - 1) = *((_OWORD *)v249 - 1);
            *v248 = v251;
            v248 -= 2;
            v249 -= 32;
            v250 -= 16;
          }
          while (v250);
          if (v246 != (v246 & 0xFFFFFFFFFFFFFFF0))
          {
            do
            {
LABEL_314:
              v244 = *((_WORD *)v243 - 1);
              v243 -= 2;
              *((_WORD *)v239 - 1) = v244;
              v239 -= 2;
            }
            while (v243 != v230);
          }
          if (v230)
            goto LABEL_316;
LABEL_317:
          v230 = v239;
          v232 = (char *)v240;
          v144 += 8;
          if (v144 == v143)
          {
LABEL_329:
            *v259 = v230;
            v259[1] = v232;
            v259[2] = v231;
            v63 = v265;
            v143 = v266;
            if (!v266)
            {
LABEL_201:
              MEMORY[0x227684CB8](v63, 0x1000C8052888210);
              v10 = __p[0];
              if (!__p[0])
                goto LABEL_8;
              goto LABEL_7;
            }
LABEL_332:
            v267 = v143;
            operator delete(v143);
            goto LABEL_201;
          }
          continue;
        }
      }
    }
    else
    {
      v215 = 0;
      v216 = 0;
      v217 = (v152 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
      v218 = (v217 + 1) & 0x7FFFFFFFFFFFFFF8;
      v219 = v147;
      while (1)
      {
        v220 = (unsigned int *)v63 + (v216 * (_DWORD)v60);
        v223 = *v220;
        v222 = (uint32x4_t *)(v220 + 1);
        v221 = v223;
        if (v217 < 7)
          goto LABEL_342;
        v224 = (int32x4_t *)((char *)v63[1].i64 + 4 * v215 + 4);
        v222 = (uint32x4_t *)((char *)v222 + 4 * v218);
        v225 = 0uLL;
        v226 = (int32x4_t)v221;
        v227 = (v217 + 1) & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v226 = vaddq_s32(v224[-1], v226);
          v225 = vaddq_s32(*v224, v225);
          v224 += 2;
          v227 -= 8;
        }
        while (v227);
        v221 = vaddvq_s32(vaddq_s32(v225, v226));
        if (v217 + 1 != v218)
        {
LABEL_342:
          do
          {
            v228 = v222->i32[0];
            v222 = (uint32x4_t *)((char *)v222 + 4);
            v221 += v228;
          }
          while (v222 != (uint32x4_t *)((char *)v63 + 4 * (v216 * (_DWORD)v60) + 4 * v152));
        }
        if ((float)(*v219 / (float)v221) >= 0.7)
          break;
        ++v219;
        ++v216;
        v215 += v60;
        if (v219 == v148)
          goto LABEL_293;
      }
    }
LABEL_244:
    v252 = v107;
    v181 = 0;
    v143 = 0;
    v144 = 0;
    v182 = 0;
    v183 = 0;
    v184 = 0;
    v266 = 0;
    v267 = 0;
    v268 = 0;
    v264 = v64;
    v185 = 4 * v64;
    v186 = v105 - 4;
    v187 = v130;
    v188 = v256;
    v254 = (int)v60;
    while (2)
    {
      if (*v187)
      {
        if (v152 == v264)
        {
          v189 = 0;
        }
        else
        {
          v189 = 0;
          v190 = v265->u32[v184];
          v191 = 1;
          v192 = v105;
          do
          {
            if (*(__int32 *)((char *)&v265->i32[v184] + v192) > v190)
            {
              v189 = v191;
              v190 = *(unsigned __int32 *)((char *)&v265->u32[v184] + v192);
            }
            ++v191;
            v192 += v105;
          }
          while (v185 != v192);
        }
        if ((_DWORD)v60 == 1)
        {
          v193 = 0;
        }
        else
        {
          v193 = 0;
          v194 = &v265->i32[v189 * (_DWORD)v60];
          v195 = *v194;
          v196 = 1;
          v197 = v186;
          do
          {
            if (v194[v196] > v195)
            {
              v193 = v196;
              v195 = v194[v196];
            }
            ++v196;
            v197 -= 4;
          }
          while (v197);
        }
        if (v184 == v193)
        {
          if ((unint64_t)v143 < v183)
          {
            *(_DWORD *)v143 = v184;
            *((_DWORD *)v143 + 1) = v189;
            v143 += 8;
          }
          else
          {
            v198 = (v143 - v182) >> 3;
            v199 = v198 + 1;
            if ((unint64_t)(v198 + 1) >> 61)
            {
              v266 = v144;
              v267 = v143;
              v268 = v181;
              sub_22316E078();
            }
            v200 = v183 - (_QWORD)v182;
            if (v200 >> 2 > v199)
              v199 = v200 >> 2;
            if ((unint64_t)v200 >= 0x7FFFFFFFFFFFFFF8)
              v199 = 0x1FFFFFFFFFFFFFFFLL;
            if (v199 >> 61)
            {
              v266 = v144;
              v267 = v143;
              v268 = v181;
              sub_223174E94();
            }
            v260 = v199;
            v201 = operator new(8 * v199);
            v202 = &v201[8 * v198];
            *v202 = v184;
            v202[1] = v189;
            if (v143 != v182)
            {
              v203 = v143 - v182 - 8;
              if (v203 < 0x168
                || (v208 = (v143 - 8 - v182) & 0xFFFFFFFFFFFFFFF8,
                    &v201[v143 - v182 - 8 - v208] > &v201[v143 - v182 - 8])
                || &v143[-v208 - 8] > v143 - 8
                || (unint64_t)(v182 - v201) < 0x20)
              {
                v204 = v143;
                v144 = &v201[8 * v198];
                LODWORD(v60) = v254;
                v152 = v258;
                v205 = v260;
              }
              else
              {
                v209 = (v203 >> 3) + 1;
                v210 = 8 * (v209 & 0x3FFFFFFFFFFFFFFCLL);
                v204 = &v143[-v210];
                v144 = (char *)&v202[v210 / 0xFFFFFFFFFFFFFFFCLL];
                v211 = &v201[8 * v198 - 16];
                v212 = v143 - 16;
                v213 = v209 & 0x3FFFFFFFFFFFFFFCLL;
                LODWORD(v60) = v254;
                do
                {
                  v214 = *(_OWORD *)v212;
                  *(v211 - 1) = *((_OWORD *)v212 - 1);
                  *v211 = v214;
                  v211 -= 2;
                  v212 -= 32;
                  v213 -= 4;
                }
                while (v213);
                v152 = v258;
                v205 = v260;
                if (v209 == (v209 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_272:
                  v181 = &v201[8 * v205];
                  v143 = (char *)(v202 + 2);
                  if (v182)
                    goto LABEL_273;
LABEL_275:
                  v182 = v144;
                  v183 = (unint64_t)v181;
                  goto LABEL_276;
                }
              }
              do
              {
                v206 = *((_QWORD *)v204 - 1);
                v204 -= 8;
                *((_QWORD *)v144 - 1) = v206;
                v144 -= 8;
              }
              while (v204 != v182);
              goto LABEL_272;
            }
            v144 = &v201[8 * v198];
            LODWORD(v60) = v254;
            v152 = v258;
            v181 = &v201[8 * v260];
            v143 = (char *)(v202 + 2);
            if (!v182)
              goto LABEL_275;
LABEL_273:
            v207 = v181;
            operator delete(v182);
            v181 = v207;
            v182 = v144;
            v183 = (unint64_t)v207;
LABEL_276:
            v188 = v256;
            v186 = v105 - 4;
          }
        }
      }
      ++v187;
      ++v184;
      if (v187 == v188)
      {
        v266 = v144;
        v267 = v143;
        v268 = v181;
        v107 = v252;
        goto LABEL_294;
      }
      continue;
    }
  }
LABEL_6:
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v10 = __p[0];
  if (!__p[0])
    goto LABEL_8;
  do
  {
LABEL_7:
    v11 = (_QWORD *)*v10;
    operator delete(v10);
    v10 = v11;
  }
  while (v11);
LABEL_8:
  v12 = v269[0];
  v269[0] = 0;
  if (v12)
    operator delete(v12);
}

void sub_223F8EC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  MEMORY[0x227684CB8](a19, 0x1000C8077774924);
  MEMORY[0x227684CB8](v25, 0x1000C8052888210);
  MEMORY[0x227684CB8](a21, 0x1000C8052888210);
  sub_22322E828((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_223F8ED60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;

  operator delete(v25);
  sub_22322E828((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_223F8ED80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_22322E828((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_223F8ED94(int a1, int a2)
{
  _BOOL8 result;
  char v3;
  char v4;

  switch(a1)
  {
    case 0:
      result = a2 != 9;
      break;
    case 1:
      v3 = a2 - 2;
      if ((a2 - 2) <= 9 && ((0x24Du >> v3) & 1) != 0)
        result = qword_224692508[v3] != 5;
      else
        result = &unk_2246924F9 - &unk_2246924F4 != 5;
      break;
    case 2:
      result = a2 == 3;
      break;
    case 3:
      v4 = a2 - 1;
      if ((a2 - 1) <= 0xA && ((0x6F9u >> v4) & 1) != 0)
        result = qword_224692558[v4] != 8;
      else
        result = &unk_224692501 - &unk_2246924F9 != 8;
      break;
    default:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Tracker/PlaneSemanticsUtil.cpp", 66, (uint64_t)&unk_2245AC376, 0, (uint64_t)"Unsupported orientation", 23, (void (*)(void **))sub_22457406C);
      abort();
  }
  return result;
}

uint64_t sub_223F8EEDC(uint64_t a1, double *a2, __int16 a3)
{
  double v3;
  double v4;
  char v5;
  double v6;
  double v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t *v10;
  unsigned __int8 v11;
  double v12;
  double v13;
  int v14;
  int v15;
  unsigned __int8 v16;
  _BOOL4 v17;
  __int16 v19;
  int v20;
  int v21;
  int v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *a2;
  v4 = a2[1];
  v5 = v4 > *a2;
  if (v4 > *a2)
    v3 = a2[1];
  if (a2[2] > v3)
  {
    v3 = a2[2];
    v5 = 2;
  }
  if (a2[3] > v3)
  {
    v3 = a2[3];
    v5 = 3;
  }
  if (a2[4] > v3)
  {
    v3 = a2[4];
    v5 = 4;
  }
  if (a2[5] > v3)
  {
    v3 = a2[5];
    v5 = 5;
  }
  if (a2[6] > v3)
  {
    v3 = a2[6];
    v5 = 6;
  }
  if (a2[7] > v3)
  {
    v3 = a2[7];
    v5 = 7;
  }
  if (a2[8] > v3)
  {
    v3 = a2[8];
    v5 = 8;
  }
  if (a2[9] > v3)
  {
    v3 = a2[9];
    v5 = 9;
  }
  v6 = a2[11];
  if (a2[10] > v3)
  {
    v3 = a2[10];
    v5 = 10;
  }
  if (v6 <= v3)
    v7 = v3;
  else
    v7 = a2[11];
  if (v6 <= v3)
    v8 = v5;
  else
    v8 = 11;
  v9 = atomic_load((unsigned __int8 *)&qword_25578F160);
  v10 = &qword_25578F000;
  if ((v9 & 1) == 0)
  {
    v25 = a1;
    v19 = a3;
    v20 = __cxa_guard_acquire(&qword_25578F160);
    v10 = &qword_25578F000;
    a3 = v19;
    v21 = v20;
    a1 = v25;
    if (v21)
    {
      qword_25578F158 = 0x3FEF838B8C811C17;
      __cxa_guard_release(&qword_25578F160);
      v10 = &qword_25578F000;
      a1 = v25;
      a3 = v19;
    }
  }
  v11 = atomic_load((unsigned __int8 *)&qword_25578F170);
  if ((v11 & 1) == 0)
  {
    v24 = a3;
    v26 = a1;
    v22 = __cxa_guard_acquire(&qword_25578F170);
    v10 = &qword_25578F000;
    v23 = v22;
    a3 = v24;
    a1 = v26;
    if (v23)
    {
      qword_25578F168 = 0x3FC63A1A7E0B738CLL;
      __cxa_guard_release(&qword_25578F170);
      v10 = &qword_25578F000;
      a3 = v24;
      a1 = v26;
    }
  }
  v12 = *(double *)(a1 + 16);
  v13 = fabs(v12);
  if (v13 <= *(double *)&qword_25578F168)
    v14 = 2;
  else
    v14 = 4;
  if (v13 >= *((double *)v10 + 43))
    v14 = 1;
  if (v14 == 4)
  {
    v15 = 0;
  }
  else if (v14 == 2)
  {
    v15 = 3;
  }
  else if (v12 >= 0.0)
  {
    v15 = 1;
  }
  else
  {
    v15 = 2;
  }
  if ((a3 & 0xFF00) != 0)
    v16 = a3;
  else
    v16 = 0;
  if (v7 < 0.6)
    goto LABEL_48;
  v17 = sub_223F8ED94(v15, v8);
  if (v17)
    v16 = v8;
  if (!v17)
  {
LABEL_48:
    if (v7 < 0.4)
      return 0;
  }
  return v16;
}

double sub_223F8F174(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, float64x2_t a9)
{
  float64x2_t v9;
  float64x2_t v10;
  int64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  int64x2_t v28;
  unsigned __int8 v29;
  double v30;
  double v31;
  double result;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  float64_t v39;
  float64_t v40;
  float64x2_t v41;
  double v42;
  float64_t v43;
  float64_t v44;
  double v45;
  double v46;
  float64x2_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  float64_t v54;
  double v55;
  double v62;
  double v65;
  double v71;
  float64_t v72;
  float64_t v73;
  float64x2_t v74;
  float64_t v75;
  float64_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79[2];
  float64x2_t v80[2];
  char v81;
  float64x2_t v82;
  float64_t v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  char v89;

  v9.f64[0] = *(float64_t *)(a3 + 16);
  v10 = *(float64x2_t *)a3;
  v11 = *(int64x2_t *)(a3 + 32);
  v12 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v11);
  v13 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v11);
  v9.f64[1] = *(float64_t *)(a3 + 48);
  v14 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v12, *(double *)a1), v13, *(float64x2_t *)a1, 1), v9, *(double *)(a1 + 16));
  v15 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v12, *(double *)(a1 + 32)), v13, *(float64x2_t *)(a1 + 32), 1), v9, *(double *)(a1 + 48));
  v10.f64[0] = *(float64_t *)(a1 + 112);
  a9.f64[0] = *(float64_t *)(a3 + 112);
  v16 = *(float64x2_t *)(a3 + 96);
  v17 = vsubq_f64(*(float64x2_t *)(a1 + 96), v16);
  v18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v12, v17.f64[0]), v13, v17, 1), v9, vsubq_f64(v10, a9).f64[0]);
  v19 = vaddq_f64(v18, vmlaq_laneq_f64(vmulq_n_f64(v14, *(double *)(a1 + 136)), v15, *(float64x2_t *)(a1 + 136), 1));
  v20 = vaddq_f64(v18, vmlaq_laneq_f64(vmulq_n_f64(v14, *(double *)(a1 + 152)), v15, *(float64x2_t *)(a1 + 152), 1));
  v79[0] = v19;
  v79[1] = v20;
  v21 = *(float64x2_t *)a2;
  v22 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v12, *(double *)a2), v13, *(float64x2_t *)a2, 1), v9, *(double *)(a2 + 16));
  v23 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v12, *(double *)(a2 + 32)), v13, *(float64x2_t *)(a2 + 32), 1), v9, *(double *)(a2 + 48));
  v21.f64[0] = *(float64_t *)(a2 + 112);
  *(_QWORD *)&v21.f64[0] = *(_OWORD *)&vsubq_f64(v21, a9);
  v24 = vsubq_f64(*(float64x2_t *)(a2 + 96), v16);
  v25 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v12, v24.f64[0]), v13, v24, 1), v9, v21.f64[0]);
  v26 = vaddq_f64(v25, vmlaq_laneq_f64(vmulq_n_f64(v22, *(double *)(a2 + 136)), v23, *(float64x2_t *)(a2 + 136), 1));
  v27 = vaddq_f64(v25, vmlaq_laneq_f64(vmulq_n_f64(v22, *(double *)(a2 + 152)), v23, *(float64x2_t *)(a2 + 152), 1));
  v77 = v26;
  v78 = v27;
  v28 = vceqq_f64(v26, v27);
  v29 = vmovn_s64(v28).u8[0];
  v30 = v27.f64[1];
  if ((v29 & 1) == 0)
  {
    v28 = (int64x2_t)vsubq_f64(v26, v27);
    *(_QWORD *)&v31 = *(_OWORD *)&vsubq_f64(v27, v26);
    if ((vmovn_s64(vcgtq_f64(v27, v26)).u8[0] & 1) != 0)
      *(double *)v28.i64 = v31;
    if (*(double *)v28.i64 > 0.00000001)
      goto LABEL_49;
  }
  result = 0.0;
  if (v26.f64[1] != v27.f64[1])
  {
    v33 = v26.f64[1] - v27.f64[1];
    if (v26.f64[1] < v27.f64[1])
      v33 = v27.f64[1] - v26.f64[1];
    if (v33 > 0.00000001)
    {
LABEL_49:
      v34 = v19.f64[1];
      v35 = v20.f64[1];
      if ((v29 & 1) != 0
        || ((*(_QWORD *)&v36 = *(_OWORD *)&vsubq_f64(v26, v27),
             v28 = (int64x2_t)vsubq_f64(v27, v26),
             (vmovn_s64(vcgtq_f64(v27, v26)).u8[0] & 1) == 0)
          ? (v37 = v36)
          : (v37 = *(double *)v28.i64),
            v37 <= 0.00000001))
      {
        v41.f64[0] = v26.f64[0];
        v41.f64[1] = v19.f64[1];
        v19.f64[0] = v26.f64[0];
        v20.f64[0] = v26.f64[0];
      }
      else
      {
        if (v26.f64[1] == v27.f64[1])
          goto LABEL_20;
        v38 = v26.f64[1] - v27.f64[1];
        if (v26.f64[1] < v27.f64[1])
          v38 = v27.f64[1] - v26.f64[1];
        if (v38 <= 0.00000001)
        {
LABEL_20:
          v34 = v26.f64[1];
        }
        else
        {
          v39 = (v27.f64[1] - v26.f64[1]) / *(double *)v28.i64;
          v40 = v26.f64[1] - v26.f64[0] * v39;
          v19.f64[0] = (v39 * v19.f64[1] + v19.f64[0] - v39 * v40) / (v39 * v39 + 1.0);
          v34 = v40 + v39 * v19.f64[0];
        }
        v41.f64[0] = v19.f64[0];
        v41.f64[1] = v34;
        if (v26.f64[1] == v27.f64[1])
          goto LABEL_26;
        v42 = v26.f64[1] - v27.f64[1];
        if (v26.f64[1] < v27.f64[1])
          v42 = v27.f64[1] - v26.f64[1];
        if (v42 <= 0.00000001)
        {
LABEL_26:
          v35 = v26.f64[1];
        }
        else
        {
          v43 = (v27.f64[1] - v26.f64[1]) / *(double *)v28.i64;
          v44 = v26.f64[1] - v26.f64[0] * v43;
          v20.f64[0] = (v43 * v20.f64[1] + v20.f64[0] - v43 * v44) / (v43 * v43 + 1.0);
          v35 = v44 + v43 * v20.f64[0];
        }
      }
      if (v19.f64[0] != v20.f64[0])
      {
        v45 = v19.f64[0] - v20.f64[0];
        if (v19.f64[0] < v20.f64[0])
          v45 = v20.f64[0] - v19.f64[0];
        if (v45 > 0.00000001)
          goto LABEL_35;
      }
      if (v34 != v35)
      {
        v46 = v34 - v35;
        if (v34 < v35)
          v46 = v35 - v34;
        if (v46 > 0.00000001)
        {
LABEL_35:
          v74 = v41;
          v75 = v35;
          v76 = v20.f64[0];
          *(double *)v28.i64 = *(double *)(a1 + 128) + *(double *)(a2 + 128);
          sub_223F290C8(v79, &v77, (uint64_t)&v85, (float64x2_t)v28);
          if (!v89)
            return 0.0;
          v47.f64[0] = v77.f64[0];
          if (v77.f64[0] == v78.f64[0]
            || ((v48 = v78.f64[0] - v77.f64[0], v77.f64[0] >= v78.f64[0])
              ? (v49 = v77.f64[0] - v78.f64[0])
              : (v49 = v78.f64[0] - v77.f64[0]),
                v49 <= 0.00000001))
          {
            v50 = v86;
            v65 = v88;
            v55 = v77.f64[0];
          }
          else
          {
            v50 = v77.f64[1];
            if (v77.f64[1] == v78.f64[1])
              goto LABEL_71;
            v51 = v77.f64[1] - v78.f64[1];
            v52 = v78.f64[1] - v77.f64[1];
            if (v77.f64[1] < v78.f64[1])
              v51 = v78.f64[1] - v77.f64[1];
            if (v51 <= 0.00000001)
            {
LABEL_71:
              v55 = v85;
            }
            else
            {
              v53 = v52 / v48;
              v54 = v77.f64[1] - v77.f64[0] * (v52 / v48);
              v55 = (v53 * v86 + v85 - v53 * v54) / (v53 * v53 + 1.0);
              v50 = v54 + v53 * v55;
            }
            v65 = v77.f64[1];
            if (v77.f64[1] == v78.f64[1])
              goto LABEL_77;
            v71 = v77.f64[1] - v78.f64[1];
            if (v77.f64[1] < v78.f64[1])
              v71 = v78.f64[1] - v77.f64[1];
            if (v71 <= 0.00000001)
            {
LABEL_77:
              v47.f64[0] = v87;
            }
            else
            {
              v72 = (v78.f64[1] - v77.f64[1]) / v48;
              v73 = v77.f64[1] - v77.f64[0] * v72;
              v47.f64[0] = (v72 * v88 + v87 - v72 * v73) / (v72 * v72 + 1.0);
              v65 = v73 + v72 * v47.f64[0];
            }
          }
          v83 = v47.f64[0];
          v84 = v65;
          v82.f64[0] = v55;
          v82.f64[1] = v50;
          sub_223F28BF0(&v82, &v77, (uint64_t)v80, v47);
          if (!v81)
            return 0.0;
          _Q3.f64[0] = v76;
          _Q3.f64[1] = v75;
          _D2 = vsubq_f64(*(v80 + 16), *v80).f64[1];
          __asm { FMLA            D1, D2, V0.D[1] }
          _Q3.f64[0] = vsubq_f64(_Q3, v74).f64[1];
          __asm { FMLA            D2, D3, V1.D[1] }
          return sqrt(_D1) / sqrt(_D2);
        }
      }
      _Q0 = vsubq_f64(v27, v26);
      _D17 = _Q0.f64[1];
      __asm { FMLA            D16, D17, V0.D[1] }
      v62 = ((v26.f64[1] - v34) * _Q0.f64[0] - (v26.f64[0] - v19.f64[0]) * (v27.f64[1] - v26.f64[1])) / sqrt(_D16);
      result = 0.0;
      _ZF = v62 == 0.0;
      if (v62 < 0.0)
        v62 = 0.0 - v62;
      if (_ZF || v62 <= 0.00000001)
      {
        if (v26.f64[0] == v19.f64[0])
        {
          if (v26.f64[1] + -0.00000001 <= v34 && v34 <= v27.f64[1] + 0.00000001)
            return 1.0;
          if (v26.f64[1] + 0.00000001 < v34)
            return result;
        }
        else
        {
          if (v26.f64[0] + -0.00000001 <= v19.f64[0] && v19.f64[0] <= v27.f64[0] + 0.00000001)
            return 1.0;
          v30 = v27.f64[0];
          v34 = v19.f64[0];
          if (v26.f64[0] + 0.00000001 < v19.f64[0])
            return result;
        }
        if (v34 < v30 + -0.00000001)
          return result;
        return 1.0;
      }
    }
  }
  return result;
}

__n128 sub_223F8F6DC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  if (*(_BYTE *)(a1 + 504))
  {
    sub_223F94AFC(a1, (__int128 *)a2);
  }
  else
  {
    v3 = *(_OWORD *)a2;
    v4 = *(_OWORD *)(a2 + 16);
    v5 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v5;
    *(_OWORD *)a1 = v3;
    *(_OWORD *)(a1 + 16) = v4;
    v6 = *(_OWORD *)(a2 + 64);
    v7 = *(_OWORD *)(a2 + 80);
    v8 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v8;
    *(_OWORD *)(a1 + 64) = v6;
    *(_OWORD *)(a1 + 80) = v7;
    v9 = *(_OWORD *)(a2 + 128);
    v10 = *(_OWORD *)(a2 + 144);
    v11 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v11;
    *(_OWORD *)(a1 + 128) = v9;
    *(_OWORD *)(a1 + 144) = v10;
    v12 = *(_OWORD *)(a2 + 192);
    v13 = *(_OWORD *)(a2 + 208);
    v14 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v14;
    *(_OWORD *)(a1 + 192) = v12;
    *(_OWORD *)(a1 + 208) = v13;
    *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
    *(_BYTE *)(a1 + 264) = 0;
    *(_BYTE *)(a1 + 368) = 0;
    if (*(_BYTE *)(a2 + 368))
    {
      *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
      v15 = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 288) = v15;
      v16 = *(_OWORD *)(a2 + 304);
      v17 = *(_OWORD *)(a2 + 320);
      v18 = *(_OWORD *)(a2 + 352);
      *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
      *(_OWORD *)(a1 + 352) = v18;
      *(_OWORD *)(a1 + 304) = v16;
      *(_OWORD *)(a1 + 320) = v17;
      *(_BYTE *)(a1 + 368) = 1;
    }
    *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
    *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 432) = 0;
    *(_QWORD *)(a1 + 440) = 0;
    v19 = *(_QWORD *)(a2 + 432);
    *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
    *(_QWORD *)(a1 + 432) = v19;
    *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
    *(_QWORD *)(a2 + 424) = 0;
    *(_QWORD *)(a2 + 432) = 0;
    *(_QWORD *)(a2 + 440) = 0;
    *(_QWORD *)(a1 + 448) = 0;
    *(_QWORD *)(a1 + 456) = 0;
    *(_QWORD *)(a1 + 464) = 0;
    *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
    *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
    *(_QWORD *)(a2 + 456) = 0;
    *(_QWORD *)(a2 + 464) = 0;
    *(_QWORD *)(a2 + 448) = 0;
    v20 = *(_QWORD *)(a2 + 472);
    *(_QWORD *)(a1 + 488) = 0;
    *(_QWORD *)(a1 + 496) = 0;
    *(_QWORD *)(a1 + 472) = v20;
    *(_QWORD *)(a1 + 480) = 0;
    result = *(__n128 *)(a2 + 480);
    *(__n128 *)(a1 + 480) = result;
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
    *(_QWORD *)(a2 + 480) = 0;
    *(_QWORD *)(a2 + 488) = 0;
    *(_QWORD *)(a2 + 496) = 0;
    *(_BYTE *)(a1 + 504) = 1;
  }
  return result;
}

_QWORD *sub_223F8F834(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[60];
  if (v2)
  {
    a1[61] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[56];
  if (v3)
  {
    a1[57] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[53];
  if (v4)
  {
    a1[54] = v4;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_223F8F884(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t **v19;
  uint64_t *v20;
  _QWORD *v21;
  unsigned int v22;
  uint64_t *v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t *v56;
  _QWORD *v57;
  _QWORD *v58;
  BOOL v59;
  _QWORD *v61;
  _BYTE v62[424];
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *__p;
  void *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  char v85;
  __int128 v86;
  __int128 v87;
  char v88;
  uint64_t v89;
  int v90;
  __int128 v91;
  _OWORD v92[16];
  int v93;
  char v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  char v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  char v113;

  v4 = a1;
  *a1 = *a3;
  v5 = operator new();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)v5 = v5 + 8;
  *(_BYTE *)(v5 + 24) = 0;
  *(_WORD *)(v5 + 40) = 768;
  v4[1] = v5;
  v4[2] = sub_223F94EA4;
  v61 = v4;
  sub_2232D3688();
  *((_DWORD *)v4 + 12) = 0;
  v8 = (_QWORD *)*a2;
  v6 = a2 + 1;
  v7 = v8;
  if (v8 != v6)
  {
    v9 = &v77;
    while (1)
    {
      v10 = *(_DWORD *)v4;
      if (*((float *)v4 + 1) != *((float *)v7 + 44))
        break;
      if (*(_DWORD *)v4 != *((_DWORD *)v7 + 46))
        goto LABEL_9;
LABEL_10:
      v11 = *((_OWORD *)v7 + 8);
      v73 = *((_OWORD *)v7 + 7);
      v74 = v11;
      v12 = *((_OWORD *)v7 + 10);
      v75 = *((_OWORD *)v7 + 9);
      v76 = v12;
      v13 = *((_OWORD *)v7 + 4);
      v69 = *((_OWORD *)v7 + 3);
      v70 = v13;
      v14 = *((_OWORD *)v7 + 6);
      v71 = *((_OWORD *)v7 + 5);
      v72 = v14;
      *v9 = v7[22];
      *((_DWORD *)v9 + 2) = *((_DWORD *)v7 + 46);
      sub_223F93C84((uint64_t)&v78, (uint64_t)(v7 + 24));
      v85 = 0;
      v88 = 0;
      if (*((_BYTE *)v7 + 312))
      {
        v15 = v9;
        v16 = v6;
        v85 = *((_BYTE *)v7 + 272);
        v17 = v7[35];
        v18 = operator new(0x58uLL);
        v18[1] = 0;
        v18[2] = 0;
        *v18 = &off_24EC64630;
        *((_DWORD *)v18 + 6) = *(_DWORD *)v17;
        *(_QWORD *)((char *)v18 + 28) = *(_QWORD *)(v17 + 4);
        *(_QWORD *)((char *)v18 + 36) = *(_QWORD *)(v17 + 12);
        sub_223F7CF14((uint64_t)(v18 + 6), v17 + 24);
        *(_QWORD *)&v86 = v18 + 3;
        *((_QWORD *)&v86 + 1) = v18;
        v87 = *(_OWORD *)(v7 + 37);
        v88 = 1;
        v4 = v61;
        v6 = v16;
        v9 = v15;
      }
      v89 = v7[40];
      v90 = *((_DWORD *)v7 + 82);
      v91 = *((_OWORD *)v7 + 21);
      LOBYTE(v92[0]) = 0;
      v113 = 0;
      if (*((_DWORD *)v7 + 86) + *((_DWORD *)v7 + 87) >= v10 && sub_223F83134((uint64_t)(v7 + 24), v10) >= 0.09)
      {
        sub_223F9F5D8((uint64_t)(v7 + 6), 8, (uint64_t)v62);
        sub_223F8F6DC((uint64_t)v92, (uint64_t)v62);
        if (__p)
        {
          v68 = __p;
          operator delete(__p);
        }
        if (v65)
        {
          v66 = v65;
          operator delete(v65);
        }
        if (v63)
        {
          v64 = v63;
          operator delete(v63);
        }
      }
      v19 = (uint64_t **)v4[1];
      v21 = v19 + 1;
      v20 = v19[1];
      if (!v20)
      {
        v23 = (uint64_t *)(v19 + 1);
        goto LABEL_62;
      }
      v22 = *((unsigned __int8 *)v7 + 32);
      do
      {
        while (1)
        {
          v23 = v20;
          v24 = *((unsigned __int8 *)v20 + 32);
          v25 = v22 >= v24;
          if (v22 == v24)
            break;
          v26 = *((unsigned __int8 *)v7 + 32);
LABEL_56:
          if (v25)
            goto LABEL_58;
LABEL_22:
          v20 = (uint64_t *)*v23;
          v21 = v23;
          if (!*v23)
            goto LABEL_62;
        }
        v26 = *((unsigned __int8 *)v7 + 33);
        v24 = *((unsigned __int8 *)v23 + 33);
        v25 = v26 >= v24;
        if (v26 != v24)
          goto LABEL_56;
        v27 = *((unsigned __int8 *)v7 + 34);
        v28 = *((unsigned __int8 *)v23 + 34);
        if (v27 != v28)
          goto LABEL_39;
        v27 = *((unsigned __int8 *)v7 + 35);
        v28 = *((unsigned __int8 *)v23 + 35);
        if (v27 != v28)
          goto LABEL_39;
        v27 = *((unsigned __int8 *)v7 + 36);
        v28 = *((unsigned __int8 *)v23 + 36);
        if (v27 != v28)
          goto LABEL_39;
        v27 = *((unsigned __int8 *)v7 + 37);
        v28 = *((unsigned __int8 *)v23 + 37);
        if (v27 != v28)
          goto LABEL_39;
        v27 = *((unsigned __int8 *)v7 + 38);
        v28 = *((unsigned __int8 *)v23 + 38);
        if (v27 != v28)
          goto LABEL_39;
        v27 = *((unsigned __int8 *)v7 + 39);
        v28 = *((unsigned __int8 *)v23 + 39);
        if (v27 != v28)
          goto LABEL_39;
        v27 = *((unsigned __int8 *)v7 + 40);
        v28 = *((unsigned __int8 *)v23 + 40);
        if (v27 != v28)
          goto LABEL_39;
        v27 = *((unsigned __int8 *)v7 + 41);
        v28 = *((unsigned __int8 *)v23 + 41);
        if (v27 != v28)
          goto LABEL_39;
        v27 = *((unsigned __int8 *)v7 + 42);
        v28 = *((unsigned __int8 *)v23 + 42);
        if (v27 != v28)
          goto LABEL_39;
        v27 = *((unsigned __int8 *)v7 + 43);
        v28 = *((unsigned __int8 *)v23 + 43);
        if (v27 != v28)
          goto LABEL_39;
        v27 = *((unsigned __int8 *)v7 + 44);
        v28 = *((unsigned __int8 *)v23 + 44);
        if (v27 != v28
          || (v27 = *((unsigned __int8 *)v7 + 45), v28 = *((unsigned __int8 *)v23 + 45), v27 != v28)
          || (v27 = *((unsigned __int8 *)v7 + 46), v28 = *((unsigned __int8 *)v23 + 46), v27 != v28)
          || (v27 = *((unsigned __int8 *)v7 + 47), v28 = *((unsigned __int8 *)v23 + 47), v27 != v28))
        {
LABEL_39:
          if (v27 < v28)
            goto LABEL_22;
        }
        v24 = *((unsigned __int8 *)v23 + 34);
        v26 = *((unsigned __int8 *)v7 + 34);
        if (v24 == v26)
        {
          v24 = *((unsigned __int8 *)v23 + 35);
          v26 = *((unsigned __int8 *)v7 + 35);
          if (v24 == v26)
          {
            v24 = *((unsigned __int8 *)v23 + 36);
            v26 = *((unsigned __int8 *)v7 + 36);
            if (v24 == v26)
            {
              v24 = *((unsigned __int8 *)v23 + 37);
              v26 = *((unsigned __int8 *)v7 + 37);
              if (v24 == v26)
              {
                v24 = *((unsigned __int8 *)v23 + 38);
                v26 = *((unsigned __int8 *)v7 + 38);
                if (v24 == v26)
                {
                  v24 = *((unsigned __int8 *)v23 + 39);
                  v26 = *((unsigned __int8 *)v7 + 39);
                  if (v24 == v26)
                  {
                    v24 = *((unsigned __int8 *)v23 + 40);
                    v26 = *((unsigned __int8 *)v7 + 40);
                    if (v24 == v26)
                    {
                      v24 = *((unsigned __int8 *)v23 + 41);
                      v26 = *((unsigned __int8 *)v7 + 41);
                      if (v24 == v26)
                      {
                        v24 = *((unsigned __int8 *)v23 + 42);
                        v26 = *((unsigned __int8 *)v7 + 42);
                        if (v24 == v26)
                        {
                          v24 = *((unsigned __int8 *)v23 + 43);
                          v26 = *((unsigned __int8 *)v7 + 43);
                          if (v24 == v26)
                          {
                            v24 = *((unsigned __int8 *)v23 + 44);
                            v26 = *((unsigned __int8 *)v7 + 44);
                            if (v24 == v26)
                            {
                              v24 = *((unsigned __int8 *)v23 + 45);
                              v26 = *((unsigned __int8 *)v7 + 45);
                              if (v24 == v26)
                              {
                                v24 = *((unsigned __int8 *)v23 + 46);
                                v26 = *((unsigned __int8 *)v7 + 46);
                                if (v24 == v26)
                                {
                                  v24 = *((unsigned __int8 *)v23 + 47);
                                  v26 = *((unsigned __int8 *)v7 + 47);
                                  if (v24 == v26)
                                    goto LABEL_73;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_58:
        if (v24 >= v26)
          goto LABEL_73;
        v20 = (uint64_t *)v23[1];
      }
      while (v20);
      v21 = v23 + 1;
LABEL_62:
      v29 = operator new(0x360uLL);
      v30 = *((_OWORD *)v7 + 2);
      v31 = v73;
      v32 = v75;
      v33 = v76;
      v29[8] = v74;
      v29[9] = v32;
      v29[10] = v33;
      v34 = v69;
      v35 = v70;
      v29[2] = v30;
      v29[3] = v34;
      v36 = v71;
      v37 = v72;
      v29[4] = v35;
      v29[5] = v36;
      v29[6] = v37;
      v29[7] = v31;
      *((_DWORD *)v29 + 46) = *((_DWORD *)v9 + 2);
      *((_QWORD *)v29 + 22) = *v9;
      *((_DWORD *)v29 + 48) = v78;
      v38 = v80;
      *((_QWORD *)v29 + 25) = v79;
      *((_QWORD *)v29 + 26) = v38;
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
      v39 = v81;
      *(_QWORD *)&v81 = 0;
      *(_OWORD *)((char *)v29 + 216) = v39;
      *(_OWORD *)((char *)v29 + 232) = v82;
      v82 = 0uLL;
      *((_QWORD *)&v81 + 1) = 0;
      *(_OWORD *)((char *)v29 + 248) = v83;
      *((_QWORD *)v29 + 33) = v84;
      v84 = 0;
      v83 = 0uLL;
      *((_BYTE *)v29 + 272) = 0;
      *((_BYTE *)v29 + 312) = 0;
      if (v88)
      {
        *((_BYTE *)v29 + 272) = v85;
        *(_OWORD *)((char *)v29 + 280) = v86;
        v86 = 0uLL;
        *(_OWORD *)((char *)v29 + 296) = v87;
        *((_BYTE *)v29 + 312) = 1;
      }
      *((_QWORD *)v29 + 40) = v89;
      *((_DWORD *)v29 + 82) = v90;
      v29[21] = v91;
      *((_BYTE *)v29 + 352) = 0;
      *((_BYTE *)v29 + 856) = 0;
      if (v113)
      {
        v40 = v92[5];
        v29[26] = v92[4];
        v29[27] = v40;
        v41 = v92[7];
        v29[28] = v92[6];
        v29[29] = v41;
        v42 = v92[1];
        v29[22] = v92[0];
        v29[23] = v42;
        v43 = v92[3];
        v29[24] = v92[2];
        v29[25] = v43;
        v44 = v92[8];
        v45 = v92[9];
        v46 = v92[11];
        v29[32] = v92[10];
        v29[33] = v46;
        v29[30] = v44;
        v29[31] = v45;
        v47 = v92[12];
        v48 = v92[13];
        v49 = v92[15];
        v29[36] = v92[14];
        v29[37] = v49;
        v29[34] = v47;
        v29[35] = v48;
        *((_DWORD *)v29 + 152) = v93;
        *((_BYTE *)v29 + 616) = 0;
        *((_BYTE *)v29 + 720) = 0;
        if (v101)
        {
          *((_BYTE *)v29 + 616) = v94;
          v50 = v98;
          v29[41] = v97;
          v29[42] = v50;
          v51 = v100;
          v29[43] = v99;
          v29[44] = v51;
          v52 = v96;
          v29[39] = v95;
          v29[40] = v52;
          *((_BYTE *)v29 + 720) = 1;
        }
        *((_QWORD *)v29 + 91) = v102;
        v53 = v104;
        v29[46] = v103;
        v29[47] = v53;
        *((_QWORD *)v29 + 96) = v105;
        *((_QWORD *)v29 + 97) = v106;
        v54 = v107;
        v55 = v108;
        v107 = 0uLL;
        v106 = 0;
        v29[49] = v54;
        v29[50] = v55;
        *((_QWORD *)v29 + 102) = v109;
        v108 = 0uLL;
        v109 = 0;
        *((_QWORD *)v29 + 103) = v110;
        v29[52] = v111;
        *((_QWORD *)v29 + 106) = v112;
        v111 = 0uLL;
        v112 = 0;
        *((_BYTE *)v29 + 856) = 1;
      }
      *(_QWORD *)v29 = 0;
      *((_QWORD *)v29 + 1) = 0;
      *((_QWORD *)v29 + 2) = v23;
      *v21 = v29;
      v56 = (uint64_t *)**v19;
      if (v56)
      {
        *v19 = v56;
        v29 = (_OWORD *)*v21;
      }
      sub_2231A9A8C(v19[1], (uint64_t *)v29);
      v19[2] = (uint64_t *)((char *)v19[2] + 1);
LABEL_73:
      sub_223F94CB4((uint64_t)&v69);
      v57 = (_QWORD *)v7[1];
      if (v57)
      {
        do
        {
          v58 = v57;
          v57 = (_QWORD *)*v57;
        }
        while (v57);
      }
      else
      {
        do
        {
          v58 = (_QWORD *)v7[2];
          v59 = *v58 == (_QWORD)v7;
          v7 = v58;
        }
        while (!v59);
      }
      v7 = v58;
      if (v58 == v6)
        return v4;
    }
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Tracker/PlaneTracker.cpp", 68, (uint64_t)"ExactlyEqual(m_params.cellSize, regParams.quadTreeCellSize)", 59, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_80;
    }
    if (*(_DWORD *)v4 == *((_DWORD *)v7 + 46))
      goto LABEL_10;
LABEL_9:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Tracker/PlaneTracker.cpp", 69, (uint64_t)"m_params.minNumFrames == regParams.minNumFrames", 47, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
LABEL_80:
      abort();
    }
    goto LABEL_10;
  }
  return v4;
}

void sub_223F9009C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v18;

  v18 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(v16 + 8) = 0;
  if (v18)
    (*(void (**)(void))(a16 + 16))();
  _Unwind_Resume(exception_object);
}

void sub_223F900C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_223F8F834(va);
  sub_223F94CB4((uint64_t)&STACK[0x270]);
  sub_223F65610(a9);
  _Unwind_Resume(a1);
}

void sub_223F901C8(uint64_t a1@<X0>, char **a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *(_QWORD **)(a1 + 8);
  v5 = (_QWORD *)*v2;
  v3 = v2 + 1;
  v4 = v5;
  if (v5 != v3)
  {
    v7 = 0;
    while (!*((_BYTE *)v4 + 856))
    {
LABEL_20:
      v20 = (_QWORD *)v4[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v4[2];
          v22 = *v21 == (_QWORD)v4;
          v4 = v21;
        }
        while (!v22);
      }
      v4 = v21;
      if (v21 == v3)
        return;
    }
    v8 = v4 + 4;
    v9 = v4 + 44;
    v10 = (unint64_t)a2[2];
    if ((unint64_t)v7 >= v10)
    {
      v11 = *a2;
      v12 = (v7 - *a2) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        sub_223F94D80();
      v14 = v10 - (_QWORD)v11;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15 >> 60)
        sub_223174E94();
      v16 = (char *)operator new(16 * v15);
      v17 = &v16[16 * v12];
      *(_QWORD *)v17 = v8;
      *((_QWORD *)v17 + 1) = v9;
      if (v7 == v11)
      {
        v7 = v17 + 16;
        *a2 = v17;
        a2[1] = v17 + 16;
        a2[2] = &v16[16 * v15];
        if (!v11)
          goto LABEL_19;
      }
      else
      {
        v18 = &v16[16 * v12];
        do
        {
          v19 = v18 - 16;
          *((_OWORD *)v18 - 1) = *((_OWORD *)v7 - 1);
          v7 -= 16;
          v18 -= 16;
        }
        while (v7 != v11);
        v7 = v17 + 16;
        *a2 = v19;
        a2[1] = v17 + 16;
        a2[2] = &v16[16 * v15];
        if (!v11)
          goto LABEL_19;
      }
      operator delete(v11);
    }
    else
    {
      *(_QWORD *)v7 = v8;
      *((_QWORD *)v7 + 1) = v9;
      v7 += 16;
    }
LABEL_19:
    a2[1] = v7;
    goto LABEL_20;
  }
}

void sub_223F9034C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

char *sub_223F9036C@<X0>(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  _QWORD *v3;
  unint64_t v4;
  char *result;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int64x2_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  int64x2_t v15;
  char *v16;
  __int128 v17;
  int64x2_t *v18;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = v3[2];
  v15 = 0uLL;
  v16 = 0;
  if (v4)
  {
    if (v4 >> 60)
      sub_223F94D80();
    result = (char *)operator new(16 * v4);
    v6 = &result[16 * v4];
    v15.i64[0] = (uint64_t)result;
    v15.i64[1] = (uint64_t)result;
    v16 = v6;
    v9 = (_QWORD *)*v3;
    v7 = v3 + 1;
    v8 = v9;
    v18 = &v15;
    if (v9 == v7)
      goto LABEL_6;
  }
  else
  {
    v6 = 0;
    result = 0;
    v10 = (_QWORD *)*v3;
    v7 = v3 + 1;
    v8 = v10;
    v18 = &v15;
    if (v10 == v7)
    {
LABEL_6:
      v11 = vdupq_n_s64((unint64_t)result);
      goto LABEL_15;
    }
  }
  do
  {
    *(_QWORD *)&v17 = v8 + 4;
    *((_QWORD *)&v17 + 1) = v8 + 6;
    result = (char *)sub_223F94D94((char ***)&v18, &v17);
    v12 = (_QWORD *)v8[1];
    if (v12)
    {
      do
      {
        v13 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        v13 = (_QWORD *)v8[2];
        v14 = *v13 == (_QWORD)v8;
        v8 = v13;
      }
      while (!v14);
    }
    v8 = v13;
  }
  while (v13 != v7);
  v11 = v15;
  v6 = v16;
LABEL_15:
  *a2 = v11;
  a2[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_223F90474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223F90494(uint64_t a1)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  std::string::size_type v6;
  std::string::size_type size;
  uint64_t v8;
  const char *v9;
  size_t v10;
  unsigned __int8 v11;
  const char *v12;
  size_t v13;
  _BYTE *v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  std::string::size_type v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  std::string::size_type v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  const char *v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  int v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  uint64_t *v75;
  char *v76;
  int64_t v77;
  size_t v78;
  size_t v79;
  double v80;
  size_t v81;
  size_t v82;
  double v83;
  std::string *p_b;
  uint64_t v85;
  uint64_t v86;
  std::string *v87;
  __int128 v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  const std::string::value_type *v92;
  std::string::size_type v93;
  std::string *v94;
  __int128 v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  uint64_t v103;
  char *v104;
  std::string *v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  char *v109;
  std::string *v110;
  uint64_t v111;
  double v112;
  uint64_t v113;
  char *v114;
  std::string *v115;
  uint64_t v116;
  double v117;
  uint64_t v118;
  char *v119;
  std::string *v120;
  uint64_t v121;
  char v122;
  size_t v123;
  void **v124;
  unint64_t v125;
  void **v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  void **v130;
  uint64_t v131;
  uint64_t v132;
  size_t v133;
  const char *v134;
  unsigned __int8 v135;
  unsigned __int8 v136;
  const char *v137;
  size_t v138;
  std::string::size_type *p_size;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  NSObject *v143;
  uint64_t v144;
  uint64_t v145;
  size_t v146;
  void *v147;
  _QWORD *v148;
  size_t v149;
  size_t v150;
  void *v151;
  void *v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  char v157;
  _QWORD *v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  char *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::string::size_type v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  std::string::size_type v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  void *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  const char *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  const char *v209;
  int v210;
  _QWORD *v211;
  __int128 v212;
  int v213;
  int __s;
  char *__sa;
  std::string::size_type v216;
  unint64_t v217;
  std::string v218;
  int v219;
  const char *v220;
  int v221;
  const char *v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  void *__dst[2];
  int64_t v226;
  uint64_t v227;
  int64x2_t v228;
  std::string __b;
  char *v230;
  std::__shared_weak_count *v231;
  void *v232;
  __int128 v233;
  _BYTE object[24];
  __int128 v235;
  void *__p[2];
  unint64_t v237;
  char v238;
  unint64_t v239;
  void *v240;
  char v241;
  unint64_t v242;
  int v243;
  uint64_t v244;
  std::string v245;
  __int128 v246;
  char *v247;
  const char *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  _QWORD v251[5];

  v251[2] = *MEMORY[0x24BDAC8D0];
  sub_223F920CC(__dst);
  if (**((int **)__dst[0] + 7) > 3)
    goto LABEL_99;
  v2 = *((unsigned __int8 *)__dst[0] + 72);
  v3 = sub_22322F254((uint64_t)__dst[0], "OSLogSurrogateAppender", 1, 0);
  v4 = v3;
  if (!v2 && v3 == 0)
    goto LABEL_99;
  v245.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
  v245.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v245.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v246) = 3;
  *((_QWORD *)&v246 + 1) = "unknown file";
  LODWORD(v247) = 119;
  v249 = 0;
  v250 = 0;
  v248 = "unknown function";
  sub_223F901C8(a1, &v218.__r_.__value_.__l.__data_);
  size = v218.__r_.__value_.__l.__size_;
  v6 = v218.__r_.__value_.__r.__words[0];
  sub_223F9036C(a1, (int64x2_t *)&__b);
  v210 = v2;
  v8 = *(_QWORD *)v245.__r_.__value_.__l.__data_;
  v9 = (const char *)(*(_QWORD *)v245.__r_.__value_.__l.__data_ + 16);
  v209 = v9;
  if (*(char *)(*(_QWORD *)v245.__r_.__value_.__l.__data_ + 39) < 0)
  {
    v9 = *(const char **)(v8 + 16);
    v10 = *(_QWORD *)(v8 + 24);
  }
  else
  {
    v10 = *(unsigned __int8 *)(*(_QWORD *)v245.__r_.__value_.__l.__data_ + 39);
  }
  v216 = v6;
  v212 = *(_OWORD *)&__b.__r_.__value_.__l.__data_;
  v11 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
    if ((_BYTE)v235 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v12 = (const char *)&xmmword_255788F40;
  else
    v12 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v13 = byte_255788F57;
  else
    v13 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)object = os_log_create(v12, v9);
  v14 = &object[8];
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v13 >= 0x17)
  {
    v15 = v4;
    v16 = v9;
    v17 = a1;
    v18 = v8;
    v19 = size;
    v20 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v20 = v13 | 7;
    v21 = v20 + 1;
    v14 = operator new(v20 + 1);
    *(_QWORD *)&object[16] = v13;
    *(_QWORD *)&v235 = v21 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v14;
    size = v19;
    v8 = v18;
    a1 = v17;
    v9 = v16;
    v4 = v15;
    goto LABEL_23;
  }
  BYTE7(v235) = v13;
  if (v13)
LABEL_23:
    memmove(v14, v12, v13);
  v14[v13] = 0;
  BYTE8(v235) = 1;
  v22 = __p;
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v10 >= 0x17)
  {
    v25 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v25 = v10 | 7;
    v26 = v25 + 1;
    v22 = operator new(v25 + 1);
    __p[1] = (void *)v10;
    v237 = v26 | 0x8000000000000000;
    __p[0] = v22;
  }
  else
  {
    HIBYTE(v237) = v10;
    if (!v10)
    {
      LOBYTE(__p[0]) = 0;
      v238 = 1;
      v23 = *(NSObject **)object;
      if ((SHIBYTE(v237) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v22, v9, v10);
  *((_BYTE *)v22 + v10) = 0;
  v238 = 1;
  v23 = *(NSObject **)object;
  if ((SHIBYTE(v237) & 0x80000000) == 0)
  {
LABEL_28:
    v24 = v216;
    if (!BYTE8(v235))
      goto LABEL_37;
LABEL_35:
    if (SBYTE7(v235) < 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(__p[0]);
  v24 = v216;
  if (BYTE8(v235))
    goto LABEL_35;
LABEL_37:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  v27 = (uint64_t)(size - v24) >> 4;
  if (v4 && *(_QWORD *)(v4 + 24))
  {
    v28 = _os_log_pack_size();
    v29 = (std::__shared_weak_count_vtbl *)operator new(v28, (std::align_val_t)8uLL);
    v30 = (std::__shared_weak_count *)operator new();
    v31 = v30;
    v30->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    v30->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v30->__shared_weak_owners_ = 0;
    v30[1].__vftable = v29;
    *(_QWORD *)object = v29;
    *(_QWORD *)&object[8] = v29;
    *(_QWORD *)&object[16] = v30;
    do
      v33 = __ldxr(p_shared_owners);
    while (__stxr(v33 + 1, p_shared_owners));
    v235 = 0uLL;
    __p[0] = 0;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v31);
    }
    v35 = *(_QWORD *)object;
    v36 = _os_log_pack_fill();
    *(_DWORD *)v36 = 134218240;
    *(_QWORD *)(v36 + 4) = v27;
    *(_WORD *)(v36 + 12) = 2048;
    *(_QWORD *)(v36 + 14) = (uint64_t)(*((_QWORD *)&v212 + 1) - v212) >> 4;
    v37 = (char *)operator new();
    v38 = *(unsigned __int8 *)(v8 + 39);
    v39 = v209;
    if ((v38 & 0x80u) != 0)
    {
      v39 = *(const char **)(v8 + 16);
      v38 = *(_QWORD *)(v8 + 24);
    }
    *(_QWORD *)v37 = v35;
    *(_OWORD *)(v37 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v37 + 24) = v235;
    v235 = 0uLL;
    *((_QWORD *)v37 + 5) = v39;
    *((_QWORD *)v37 + 6) = v38;
    v37[56] = 1;
    v228.i64[0] = 0;
    v232 = v37;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v4 + 24) + 40))(*(_QWORD *)(v4 + 24), &v232);
    v40 = v232;
    v232 = 0;
    if (v40)
    {
      v41 = (std::__shared_weak_count *)*((_QWORD *)v40 + 4);
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v44 = (std::__shared_weak_count *)*((_QWORD *)v40 + 2);
      if (v44)
      {
        v45 = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
      v47 = v228.i64[0];
      v228.i64[0] = 0;
      if (v47)
      {
        v48 = *(std::__shared_weak_count **)(v47 + 32);
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        v51 = *(std::__shared_weak_count **)(v47 + 16);
        if (v51)
        {
          v52 = (unint64_t *)&v51->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
      }
    }
    v54 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
    v55 = v210;
    if (*((_QWORD *)&v235 + 1))
    {
      v56 = (unint64_t *)(*((_QWORD *)&v235 + 1) + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v58 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v59 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
  }
  else
  {
    os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 134218240;
    *(_QWORD *)&object[4] = v27;
    *(_WORD *)&object[12] = 2048;
    *(_QWORD *)&object[14] = (uint64_t)(*((_QWORD *)&v212 + 1) - v212) >> 4;
    v61 = (void *)_os_log_send_and_compose_impl();
    v55 = v210;
    if (v61)
      free(v61);
  }
  if (__b.__r_.__value_.__r.__words[0])
    operator delete(__b.__r_.__value_.__l.__data_);
  if (v218.__r_.__value_.__r.__words[0])
    operator delete(v218.__r_.__value_.__l.__data_);
  if (v55)
  {
    sub_223F901C8(a1, (char **)object);
    v62 = *(void **)object;
    v63 = *(_QWORD *)&object[8];
    sub_223F9036C(a1, (int64x2_t *)&v218);
    v64 = (v63 - (uint64_t)v62) >> 4;
    v65 = (void *)v218.__r_.__value_.__r.__words[0];
    sub_22322C138((uint64_t)&v245, "Planes in tracker: %zu %zu", v64, (uint64_t)(v218.__r_.__value_.__l.__size_ - v218.__r_.__value_.__r.__words[0]) >> 4);
    if (v65)
      operator delete(v65);
    if (v62)
      operator delete(v62);
    sub_223182C08((uint64_t)&v245);
  }
  sub_223182C08((uint64_t)&v245);
  v66 = v250;
  if (v250)
  {
    v67 = (unint64_t *)&v250->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
LABEL_99:
  sub_223F9036C(a1, &v228);
  v69 = v228.i64[1];
  v70 = (_QWORD *)v228.i64[0];
  if (v228.i64[0] == v228.i64[1])
    goto LABEL_340;
  v206 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v207 = *MEMORY[0x24BEDB7F0];
  v205 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v204 = MEMORY[0x24BEDB848] + 16;
  v208 = v228.i64[1];
  while (2)
  {
    v71 = v70[1];
    sub_223F920CC(&v227);
    if (**(int **)(v227 + 56) > 3)
      goto LABEL_102;
    v72 = *(unsigned __int8 *)(v227 + 72);
    v73 = sub_22322F254(v227, "OSLogSurrogateAppender", 1, 0);
    if (!v72 && v73 == 0)
      goto LABEL_102;
    v217 = v73;
    v213 = v72;
    sub_223195210((uint64_t)object);
    v75 = sub_2231813E8(&object[16], (uint64_t)"Plane to world:", 15);
    v76 = (char *)v75 + *(_QWORD *)(*v75 - 24);
    __s = *((_DWORD *)v76 + 2);
    v78 = *((_QWORD *)v76 + 2);
    v77 = *((_QWORD *)v76 + 3);
    if (v77)
    {
      if (v77 <= (uint64_t)(v78 + 2))
        v79 = v78 + 2;
      else
        v79 = v77;
      v80 = __exp10((double)-(uint64_t)v78);
      v81 = v79 + ~v78;
      v82 = v81 - 1;
      if (v81 - 1 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v83 = v80;
      if (v82 >= 0x17)
      {
        v85 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v82 | 7) != 0x17)
          v85 = v82 | 7;
        v86 = v85 + 1;
        p_b = (std::string *)operator new(v85 + 1);
        __b.__r_.__value_.__l.__size_ = v81 - 1;
        __b.__r_.__value_.__r.__words[2] = v86 | 0x8000000000000000;
        __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
      }
      else
      {
        *((_BYTE *)&__b.__r_.__value_.__s + 23) = v81 - 1;
        p_b = &__b;
        if (v81 == 1)
        {
          LODWORD(v81) = 1;
          goto LABEL_121;
        }
      }
    }
    else
    {
      v83 = __exp10((double)-(uint64_t)v78);
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
      p_b = &__b;
      LODWORD(v81) = 4;
      v82 = 3;
    }
    memset(p_b, 32, v82);
LABEL_121:
    p_b->__r_.__value_.__s.__data_[v82] = 0;
    v87 = std::string::append(&__b, "0 ", 2uLL);
    v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
    v218.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v88;
    v87->__r_.__value_.__l.__size_ = 0;
    v87->__r_.__value_.__r.__words[2] = 0;
    v87->__r_.__value_.__r.__words[0] = 0;
    if (v78 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v78 >= 0x17)
    {
      v90 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v78 | 7) != 0x17)
        v90 = v78 | 7;
      v91 = v90 + 1;
      v89 = operator new(v90 + 1);
      *(_QWORD *)&v233 = v78;
      *((_QWORD *)&v233 + 1) = v91 | 0x8000000000000000;
      v232 = v89;
      goto LABEL_128;
    }
    HIBYTE(v233) = v78;
    v89 = &v232;
    if (v78)
LABEL_128:
      memset(v89, 32, v78);
    *((_BYTE *)v89 + v78) = 0;
    if (v233 >= 0)
      v92 = (const std::string::value_type *)&v232;
    else
      v92 = (const std::string::value_type *)v232;
    if (v233 >= 0)
      v93 = HIBYTE(v233);
    else
      v93 = v233;
    v94 = std::string::append(&v218, v92, v93);
    v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
    v245.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v245.__r_.__value_.__l.__data_ = v95;
    v94->__r_.__value_.__l.__size_ = 0;
    v94->__r_.__value_.__r.__words[2] = 0;
    v94->__r_.__value_.__r.__words[0] = 0;
    if ((SHIBYTE(v233) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v218.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_137;
LABEL_194:
      operator delete(v218.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_138;
LABEL_195:
      operator delete(__b.__r_.__value_.__l.__data_);
      goto LABEL_138;
    }
    operator delete(v232);
    if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_194;
LABEL_137:
    if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_195;
LABEL_138:
    v211 = v70;
    *(uint64_t *)((char *)v75 + *(_QWORD *)(*v75 - 24) + 24) = 0;
    v218.__r_.__value_.__s.__data_[0] = 91;
    sub_2231813E8(v75, (uint64_t)&v218, 1);
    v96 = 0;
    v97 = v75 + 1;
    v98 = v75 + 2;
    v99 = (int)v81 + (int)v78 + 1;
    v100 = (int)v78 - 3;
    v101 = v71 + 64;
    while (1)
    {
      v102 = *(double *)(v101 + v96 - 64);
      v103 = *v75;
      v104 = (char *)v75 + *(_QWORD *)(*v75 - 24);
      if ((v104[9] & 1) != 0)
      {
        if (v102 != 0.0)
        {
          *((_QWORD *)v104 + 3) = v99;
          *(_DWORD *)((char *)v97 + *(_QWORD *)(v103 - 24)) |= 0x400u;
          *(_QWORD *)((char *)v98 + *(_QWORD *)(v103 - 24)) = v100;
          std::ostream::operator<<();
          goto LABEL_151;
        }
      }
      else if (fabs(v102) >= v83)
      {
        *((_QWORD *)v104 + 3) = v99;
        *(_DWORD *)((char *)v97 + *(_QWORD *)(v103 - 24)) = *(_DWORD *)((_BYTE *)v97 + *(_QWORD *)(v103 - 24)) & 0xFFFFFEFB | 4;
        *(_DWORD *)((char *)v97 + *(_QWORD *)(v103 - 24)) |= 0x400u;
        *(_QWORD *)((char *)v98 + *(_QWORD *)(v103 - 24)) = (int)v78;
        std::ostream::operator<<();
        goto LABEL_151;
      }
      v105 = (v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &v245
           : (std::string *)v245.__r_.__value_.__r.__words[0];
      v106 = (v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? HIBYTE(v245.__r_.__value_.__r.__words[2])
           : v245.__r_.__value_.__l.__size_;
      sub_2231813E8(v75, (uint64_t)v105, v106);
LABEL_151:
      v218.__r_.__value_.__s.__data_[0] = 44;
      sub_2231813E8(v75, (uint64_t)&v218, 1);
      v107 = *(double *)(v101 + v96 - 32);
      v108 = *v75;
      v109 = (char *)v75 + *(_QWORD *)(*v75 - 24);
      if ((v109[9] & 1) != 0)
      {
        if (v107 != 0.0)
        {
          *((_QWORD *)v109 + 3) = v99;
          *(_DWORD *)((char *)v97 + *(_QWORD *)(v108 - 24)) |= 0x400u;
          *(_QWORD *)((char *)v98 + *(_QWORD *)(v108 - 24)) = v100;
          std::ostream::operator<<();
          goto LABEL_163;
        }
      }
      else if (fabs(v107) >= v83)
      {
        *((_QWORD *)v109 + 3) = v99;
        *(_DWORD *)((char *)v97 + *(_QWORD *)(v108 - 24)) = *(_DWORD *)((_BYTE *)v97 + *(_QWORD *)(v108 - 24)) & 0xFFFFFEFB | 4;
        *(_DWORD *)((char *)v97 + *(_QWORD *)(v108 - 24)) |= 0x400u;
        *(_QWORD *)((char *)v98 + *(_QWORD *)(v108 - 24)) = (int)v78;
        std::ostream::operator<<();
        goto LABEL_163;
      }
      v110 = (v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &v245
           : (std::string *)v245.__r_.__value_.__r.__words[0];
      v111 = (v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? HIBYTE(v245.__r_.__value_.__r.__words[2])
           : v245.__r_.__value_.__l.__size_;
      sub_2231813E8(v75, (uint64_t)v110, v111);
LABEL_163:
      v218.__r_.__value_.__s.__data_[0] = 44;
      sub_2231813E8(v75, (uint64_t)&v218, 1);
      v112 = *(double *)(v101 + v96);
      v113 = *v75;
      v114 = (char *)v75 + *(_QWORD *)(*v75 - 24);
      if ((v114[9] & 1) != 0)
      {
        if (v112 != 0.0)
        {
          *((_QWORD *)v114 + 3) = v99;
          *(_DWORD *)((char *)v97 + *(_QWORD *)(v113 - 24)) |= 0x400u;
          *(_QWORD *)((char *)v98 + *(_QWORD *)(v113 - 24)) = v100;
          std::ostream::operator<<();
          goto LABEL_175;
        }
      }
      else if (fabs(v112) >= v83)
      {
        *((_QWORD *)v114 + 3) = v99;
        *(_DWORD *)((char *)v97 + *(_QWORD *)(v113 - 24)) = *(_DWORD *)((_BYTE *)v97 + *(_QWORD *)(v113 - 24)) & 0xFFFFFEFB | 4;
        *(_DWORD *)((char *)v97 + *(_QWORD *)(v113 - 24)) |= 0x400u;
        *(_QWORD *)((char *)v98 + *(_QWORD *)(v113 - 24)) = (int)v78;
        std::ostream::operator<<();
        goto LABEL_175;
      }
      v115 = (v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &v245
           : (std::string *)v245.__r_.__value_.__r.__words[0];
      v116 = (v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? HIBYTE(v245.__r_.__value_.__r.__words[2])
           : v245.__r_.__value_.__l.__size_;
      sub_2231813E8(v75, (uint64_t)v115, v116);
LABEL_175:
      v218.__r_.__value_.__s.__data_[0] = 44;
      sub_2231813E8(v75, (uint64_t)&v218, 1);
      v117 = *(double *)(v101 + v96 + 32);
      v118 = *v75;
      v119 = (char *)v75 + *(_QWORD *)(*v75 - 24);
      if ((v119[9] & 1) != 0)
      {
        if (v117 != 0.0)
        {
          *((_QWORD *)v119 + 3) = v99;
          *(_DWORD *)((char *)v97 + *(_QWORD *)(v118 - 24)) |= 0x400u;
          *(_QWORD *)((char *)v98 + *(_QWORD *)(v118 - 24)) = v100;
          std::ostream::operator<<();
          goto LABEL_187;
        }
      }
      else if (fabs(v117) >= v83)
      {
        *((_QWORD *)v119 + 3) = v99;
        *(_DWORD *)((char *)v97 + *(_QWORD *)(v118 - 24)) = *(_DWORD *)((_BYTE *)v97 + *(_QWORD *)(v118 - 24)) & 0xFFFFFEFB | 4;
        *(_DWORD *)((char *)v97 + *(_QWORD *)(v118 - 24)) |= 0x400u;
        *(_QWORD *)((char *)v98 + *(_QWORD *)(v118 - 24)) = (int)v78;
        std::ostream::operator<<();
        goto LABEL_187;
      }
      v120 = (v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &v245
           : (std::string *)v245.__r_.__value_.__r.__words[0];
      v121 = (v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? HIBYTE(v245.__r_.__value_.__r.__words[2])
           : v245.__r_.__value_.__l.__size_;
      sub_2231813E8(v75, (uint64_t)v120, v121);
LABEL_187:
      if (v96 == 24)
        break;
      sub_2231813E8(v75, (uint64_t)";\n ", 3);
      v96 += 8;
    }
    sub_2231813E8(v75, (uint64_t)"   ]", 4);
    *(_DWORD *)((char *)v75 + *(_QWORD *)(*v75 - 24) + 8) = __s;
    if ((SHIBYTE(v245.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      v122 = v243;
      if ((v243 & 0x10) == 0)
        goto LABEL_191;
LABEL_197:
      v125 = v242;
      v126 = (void **)&v238;
      if (v242 < v239)
      {
        v242 = v239;
        v125 = v239;
        v126 = (void **)&v238;
      }
LABEL_200:
      v127 = *v126;
      v123 = v125 - (_QWORD)*v126;
      if (v123 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v123 >= 0x17)
      {
        v128 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v123 | 7) != 0x17)
          v128 = v123 | 7;
        v129 = v128 + 1;
        v124 = (void **)operator new(v128 + 1);
        __dst[1] = (void *)v123;
        v226 = v129 | 0x8000000000000000;
        __dst[0] = v124;
      }
      else
      {
        HIBYTE(v226) = v125 - *(_BYTE *)v126;
        v124 = __dst;
        if (!v123)
          goto LABEL_208;
      }
      memmove(v124, v127, v123);
      goto LABEL_208;
    }
    operator delete(v245.__r_.__value_.__l.__data_);
    v122 = v243;
    if ((v243 & 0x10) != 0)
      goto LABEL_197;
LABEL_191:
    if ((v122 & 8) != 0)
    {
      v125 = v237;
      v126 = __p;
      goto LABEL_200;
    }
    v123 = 0;
    HIBYTE(v226) = 0;
    v124 = __dst;
LABEL_208:
    *((_BYTE *)v124 + v123) = 0;
    v218.__r_.__value_.__r.__words[0] = (std::string::size_type)&v227;
    v218.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v218.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v219 = 3;
    v220 = "unknown file";
    v221 = 123;
    v222 = "unknown function";
    v223 = 0;
    v224 = 0;
    v130 = __dst;
    if (v226 < 0)
      v130 = (void **)__dst[0];
    __sa = (char *)v130;
    v131 = *(_QWORD *)v218.__r_.__value_.__l.__data_;
    v132 = *(_QWORD *)v218.__r_.__value_.__l.__data_ + 16;
    if (*(char *)(*(_QWORD *)v218.__r_.__value_.__l.__data_ + 39) < 0)
    {
      v134 = *(const char **)(v131 + 16);
      v133 = *(_QWORD *)(v131 + 24);
      v136 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v136 & 1) == 0)
      {
LABEL_334:
        if (__cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)&__b);
          sub_223199C58("com.apple.cv3d", (unint64_t)&__b, &xmmword_255788F40);
          if ((_BYTE)v230 && SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__b.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
      }
    }
    else
    {
      v133 = *(unsigned __int8 *)(*(_QWORD *)v218.__r_.__value_.__l.__data_ + 39);
      v134 = (const char *)(*(_QWORD *)v218.__r_.__value_.__l.__data_ + 16);
      v135 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v135 & 1) == 0)
        goto LABEL_334;
    }
    if (byte_255788F57 >= 0)
      v137 = (const char *)&xmmword_255788F40;
    else
      v137 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v138 = byte_255788F57;
    else
      v138 = *((_QWORD *)&xmmword_255788F40 + 1);
    v245.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v137, v134);
    if (v138 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v138 >= 0x17)
    {
      v140 = (v138 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v138 | 7) != 0x17)
        v140 = v138 | 7;
      v141 = v140 + 1;
      p_size = (std::string::size_type *)operator new(v140 + 1);
      v245.__r_.__value_.__r.__words[2] = v138;
      *(_QWORD *)&v246 = v141 | 0x8000000000000000;
      v245.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
      v70 = v211;
      goto LABEL_227;
    }
    BYTE7(v246) = v138;
    p_size = &v245.__r_.__value_.__l.__size_;
    v70 = v211;
    if (v138)
LABEL_227:
      memmove(p_size, v137, v138);
    *((_BYTE *)p_size + v138) = 0;
    BYTE8(v246) = 1;
    if (v133 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v133 >= 0x17)
    {
      v144 = (v133 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v133 | 7) != 0x17)
        v144 = v133 | 7;
      v145 = v144 + 1;
      v142 = (char *)operator new(v144 + 1);
      v248 = (const char *)v133;
      v249 = v145 | 0x8000000000000000;
      v247 = v142;
    }
    else
    {
      HIBYTE(v249) = v133;
      v142 = (char *)&v247;
      if (!v133)
      {
        LOBYTE(v247) = 0;
        LOBYTE(v250) = 1;
        v143 = v245.__r_.__value_.__r.__words[0];
        if ((SHIBYTE(v249) & 0x80000000) == 0)
          goto LABEL_232;
LABEL_238:
        operator delete(v247);
        if (BYTE8(v246))
          goto LABEL_239;
        goto LABEL_241;
      }
    }
    memmove(v142, v134, v133);
    v142[v133] = 0;
    LOBYTE(v250) = 1;
    v143 = v245.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v249) < 0)
      goto LABEL_238;
LABEL_232:
    if (BYTE8(v246))
    {
LABEL_239:
      if (SBYTE7(v246) < 0)
        operator delete((void *)v245.__r_.__value_.__l.__size_);
    }
LABEL_241:
    if (v245.__r_.__value_.__r.__words[0])
      os_release(v245.__r_.__value_.__l.__data_);
    if (!v217 || !*(_QWORD *)(v217 + 24))
    {
      os_log_type_enabled(v143, OS_LOG_TYPE_INFO);
      LODWORD(v245.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v245.__r_.__value_.__r.__words + 4) = (std::string::size_type)__sa;
      v152 = (void *)_os_log_send_and_compose_impl();
      v153 = v213;
      if (!v152)
        goto LABEL_316;
      free(v152);
      if (!v213)
        goto LABEL_320;
LABEL_317:
      v200 = (const char *)__dst;
      if (v226 < 0)
        v200 = (const char *)__dst[0];
      sub_22322C138((uint64_t)&v218, "%s", v200);
      sub_223182C08((uint64_t)&v218);
      goto LABEL_320;
    }
    v146 = _os_log_pack_size();
    v147 = operator new(v146, (std::align_val_t)8uLL);
    v148 = (_QWORD *)operator new();
    *v148 = &off_24EC1F7F0;
    v148[1] = 0;
    v148[2] = 0;
    v148[3] = v147;
    __b.__r_.__value_.__r.__words[0] = (std::string::size_type)v147;
    __b.__r_.__value_.__l.__size_ = (std::string::size_type)v147;
    __b.__r_.__value_.__r.__words[2] = (std::string::size_type)v148;
    v230 = 0;
    v231 = 0;
    v149 = strlen(__sa);
    if (v149 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v150 = v149;
    if (v149 >= 0x17)
    {
      v154 = (v149 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v149 | 7) != 0x17)
        v154 = v149 | 7;
      v155 = v154 + 1;
      v151 = operator new(v154 + 1);
      *(_QWORD *)&v233 = v150;
      *((_QWORD *)&v233 + 1) = v155 | 0x8000000000000000;
      v232 = v151;
    }
    else
    {
      HIBYTE(v233) = v149;
      v151 = &v232;
      if (!v149)
        goto LABEL_256;
    }
    memcpy(v151, __sa, v150);
LABEL_256:
    *((_BYTE *)v151 + v150) = 0;
    v156 = v232;
    v251[0] = v233;
    *(_QWORD *)((char *)v251 + 7) = *(_QWORD *)((char *)&v233 + 7);
    v157 = HIBYTE(v233);
    v158 = operator new(0x38uLL);
    v158[1] = 0;
    v158[2] = 0;
    v158[3] = off_24EC1FA48;
    *v158 = &off_24EC1F9F8;
    v159 = v251[0];
    v158[4] = v156;
    v158[5] = v159;
    *(_QWORD *)((char *)v158 + 47) = *(_QWORD *)((char *)v251 + 7);
    *((_BYTE *)v158 + 55) = v157;
    v251[0] = 0;
    *(_QWORD *)((char *)v251 + 7) = 0;
    v160 = v231;
    v230 = (char *)(v158 + 3);
    v231 = (std::__shared_weak_count *)v158;
    if (v160)
    {
      v161 = (unint64_t *)&v160->__shared_owners_;
      do
        v162 = __ldaxr(v161);
      while (__stlxr(v162 - 1, v161));
      if (!v162)
      {
        ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
        std::__shared_weak_count::__release_weak(v160);
      }
    }
    v245 = __b;
    v163 = v230;
    if (__b.__r_.__value_.__r.__words[2])
    {
      v164 = (unint64_t *)(__b.__r_.__value_.__r.__words[2] + 8);
      do
        v165 = __ldxr(v164);
      while (__stxr(v165 + 1, v164));
    }
    v166 = v231;
    *(_QWORD *)&v246 = v163;
    *((_QWORD *)&v246 + 1) = v231;
    if (v231)
    {
      v167 = (unint64_t *)&v231->__shared_owners_;
      do
        v168 = __ldxr(v167);
      while (__stxr(v168 + 1, v167));
      v247 = v163;
      do
        v169 = __ldaxr(v167);
      while (__stlxr(v169 - 1, v167));
      if (!v169)
      {
        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
        std::__shared_weak_count::__release_weak(v166);
      }
    }
    else
    {
      v247 = v163;
    }
    v170 = v132;
    v171 = (std::__shared_weak_count *)__b.__r_.__value_.__r.__words[2];
    if (__b.__r_.__value_.__r.__words[2])
    {
      v172 = (unint64_t *)(__b.__r_.__value_.__r.__words[2] + 8);
      do
        v173 = __ldaxr(v172);
      while (__stlxr(v173 - 1, v172));
      if (!v173)
      {
        ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
        std::__shared_weak_count::__release_weak(v171);
      }
    }
    v174 = v245.__r_.__value_.__r.__words[0];
    if (v247[31] >= 0)
      v175 = v247 + 8;
    else
      v175 = (char *)*((_QWORD *)v247 + 1);
    v176 = _os_log_pack_fill();
    *(_DWORD *)v176 = 136315138;
    *(_QWORD *)(v176 + 4) = v175;
    v177 = operator new();
    v178 = *(unsigned __int8 *)(v131 + 39);
    if ((v178 & 0x80u) == 0)
      v179 = v170;
    else
      v179 = *(_QWORD *)(v131 + 16);
    if ((v178 & 0x80u) != 0)
      v178 = *(_QWORD *)(v131 + 24);
    *(_QWORD *)v177 = v174;
    *(_OWORD *)(v177 + 8) = *(_OWORD *)&v245.__r_.__value_.__r.__words[1];
    *(_OWORD *)&v245.__r_.__value_.__r.__words[1] = 0uLL;
    *(_OWORD *)(v177 + 24) = v246;
    v246 = 0uLL;
    *(_QWORD *)(v177 + 40) = v179;
    *(_QWORD *)(v177 + 48) = v178;
    *(_BYTE *)(v177 + 56) = 1;
    v232 = 0;
    __b.__r_.__value_.__r.__words[0] = v177;
    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v217 + 24) + 40))(*(_QWORD *)(v217 + 24), &__b);
    v180 = __b.__r_.__value_.__r.__words[0];
    __b.__r_.__value_.__r.__words[0] = 0;
    v153 = v213;
    if (v180)
    {
      v181 = *(std::__shared_weak_count **)(v180 + 32);
      if (v181)
      {
        v182 = (unint64_t *)&v181->__shared_owners_;
        do
          v183 = __ldaxr(v182);
        while (__stlxr(v183 - 1, v182));
        if (!v183)
        {
          ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
          std::__shared_weak_count::__release_weak(v181);
        }
      }
      v184 = *(std::__shared_weak_count **)(v180 + 16);
      if (v184)
      {
        v185 = (unint64_t *)&v184->__shared_owners_;
        do
          v186 = __ldaxr(v185);
        while (__stlxr(v186 - 1, v185));
        if (!v186)
        {
          ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
          std::__shared_weak_count::__release_weak(v184);
        }
      }
      MEMORY[0x227684CE8](v180, 0x10F0C40B62ED6C6);
      v187 = v232;
      v232 = 0;
      if (v187)
      {
        v188 = (std::__shared_weak_count *)*((_QWORD *)v187 + 4);
        if (v188)
        {
          v189 = (unint64_t *)&v188->__shared_owners_;
          do
            v190 = __ldaxr(v189);
          while (__stlxr(v190 - 1, v189));
          if (!v190)
          {
            ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
            std::__shared_weak_count::__release_weak(v188);
          }
        }
        v191 = (std::__shared_weak_count *)*((_QWORD *)v187 + 2);
        if (v191)
        {
          v192 = (unint64_t *)&v191->__shared_owners_;
          do
            v193 = __ldaxr(v192);
          while (__stlxr(v193 - 1, v192));
          if (!v193)
          {
            ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
            std::__shared_weak_count::__release_weak(v191);
          }
        }
        MEMORY[0x227684CE8](v187, 0x10F0C40B62ED6C6);
      }
    }
    v194 = (std::__shared_weak_count *)*((_QWORD *)&v246 + 1);
    if (*((_QWORD *)&v246 + 1))
    {
      v195 = (unint64_t *)(*((_QWORD *)&v246 + 1) + 8);
      do
        v196 = __ldaxr(v195);
      while (__stlxr(v196 - 1, v195));
      if (!v196)
      {
        ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
        std::__shared_weak_count::__release_weak(v194);
        v197 = (std::__shared_weak_count *)v245.__r_.__value_.__r.__words[2];
        if (v245.__r_.__value_.__r.__words[2])
          goto LABEL_313;
        goto LABEL_316;
      }
    }
    v197 = (std::__shared_weak_count *)v245.__r_.__value_.__r.__words[2];
    if (!v245.__r_.__value_.__r.__words[2])
      goto LABEL_316;
LABEL_313:
    v198 = (unint64_t *)&v197->__shared_owners_;
    do
      v199 = __ldaxr(v198);
    while (__stlxr(v199 - 1, v198));
    if (!v199)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
      if (!v213)
        goto LABEL_320;
      goto LABEL_317;
    }
LABEL_316:
    if (v153)
      goto LABEL_317;
LABEL_320:
    sub_223182C08((uint64_t)&v218);
    v201 = v224;
    if (!v224)
      goto LABEL_324;
    v202 = (unint64_t *)&v224->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
      if (SHIBYTE(v226) < 0)
LABEL_325:
        operator delete(__dst[0]);
    }
    else
    {
LABEL_324:
      if (SHIBYTE(v226) < 0)
        goto LABEL_325;
    }
    *(_QWORD *)object = v207;
    *(_QWORD *)&object[*(_QWORD *)(v207 - 24)] = v206;
    *(_QWORD *)&object[16] = v205;
    *(_QWORD *)&v235 = v204;
    v69 = v208;
    if (v241 < 0)
      operator delete(v240);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](&v244);
LABEL_102:
    v70 += 2;
    if (v70 != (_QWORD *)v69)
      continue;
    break;
  }
  v70 = (_QWORD *)v228.i64[0];
LABEL_340:
  if (v70)
    operator delete(v70);
}

void sub_223F91D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,void *a60,int a61,__int16 a62,char a63)
{
  char a64;
  char a65;
  uint64_t v65;

  if (a65 && a64 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  if (a51)
    operator delete(a51);
  if (a35)
    operator delete(a35);
  sub_223182DAC(v65 - 208);
  _Unwind_Resume(a1);
}

void sub_223F91ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  sub_223199DE8((uint64_t)&a54);
  sub_223182DAC((uint64_t)&a35);
  if (a49 < 0)
    JUMPOUT(0x223F920A4);
  JUMPOUT(0x223F920A8);
}

void sub_223F91F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  MEMORY[0x227684CE8](v49, 0x10D0C40B950D02ALL);
  sub_223182DAC(&a35);
  if (a49 < 0)
    JUMPOUT(0x223F920A4);
  JUMPOUT(0x223F920A8);
}

void sub_223F91F5C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t v65;
  void *v66;

  if (*(char *)(v65 - 177) < 0)
    operator delete(*(void **)(v65 - 200));
  v66 = *(void **)(v65 - 208);
  if (v66)
    os_release(v66);
  sub_223182DAC((uint64_t)&__p);
  if (SHIBYTE(a49) < 0)
    operator delete(a47);
  sub_223195348((uint64_t)&a65);
  if (!a51)
    JUMPOUT(0x223F920B8);
  JUMPOUT(0x223F920C0);
}

void sub_223F91FD8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223F91FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if ((a56 & 0x80000000) == 0)
    JUMPOUT(0x223F920A8);
  JUMPOUT(0x223F92050);
}

void sub_223F91FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if ((a40 & 0x80000000) == 0)
    JUMPOUT(0x223F92004);
  operator delete(a35);
  if (a59 < 0)
    JUMPOUT(0x223F920A4);
  JUMPOUT(0x223F920A8);
}

void sub_223F92018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  char a67;

  if (a67 < 0)
  {
    operator delete(__p);
    if (a40 < 0)
    {
LABEL_7:
      operator delete(a35);
      if (a59 < 0)
LABEL_10:
        JUMPOUT(0x223F920A4);
LABEL_9:
      JUMPOUT(0x223F920A8);
    }
  }
  else if (a40 < 0)
  {
    goto LABEL_7;
  }
  if (a59 < 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_223F92078()
{
  JUMPOUT(0x223F920A8);
}

void sub_223F92080()
{
  JUMPOUT(0x223F920B0);
}

void sub_223F92094()
{
  uint64_t v0;

  if (*(char *)(v0 - 185) < 0)
    JUMPOUT(0x223F920A4);
  JUMPOUT(0x223F920A8);
}

void sub_223F920CC(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CE368);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE368))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.acv.surfacedetection");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CE360);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CE368);
  }
  *a1 = qword_2540CE360;
}

void sub_223F92168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CE368);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CE368);
  _Unwind_Resume(a1);
}

uint64_t sub_223F921C0(uint64_t a1, uint64_t a2, void **a3, char a4, void **a5, char a6)
{
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  char *v14;
  float64x2_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  __n128 v38;
  int8x16_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t (**v56)();
  unsigned __int8 v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unsigned __int8 v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  __int128 *v65;
  __int128 *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint8x8_t v70;
  _QWORD *v71;
  _QWORD *v72;
  BOOL v73;
  unint64_t v74;
  uint64_t v76;
  _QWORD *v77;
  __int128 v78;
  float v79;
  uint64_t v80;
  _QWORD *v81;
  _BOOL8 v82;
  unint64_t v83;
  unint64_t v84;
  size_t prime;
  void *v86;
  void *v87;
  uint64_t v88;
  _QWORD **v89;
  size_t v90;
  size_t v91;
  size_t v92;
  _QWORD *i;
  size_t v94;
  uint64_t v95;
  unint64_t v96;
  uint8x8_t v97;
  uint64_t v98;
  _QWORD *v99;
  void *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  size_t v104;
  char *v105;
  unsigned __int8 *v106;
  unint64_t v107;
  uint8x8_t v108;
  unint64_t v109;
  uint64_t **v110;
  uint64_t *v111;
  unint64_t v113;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  void *v118;
  __int128 *v119;
  __int128 *v120;
  uint64_t v121;
  void *v122;
  int64_t v123;
  char *v124;
  char *v125;
  unsigned __int8 v126;
  uint64_t v127;
  uint64_t *v128;
  int v129;
  int v130;
  uint64_t *v131;
  uint64_t **v132;
  unsigned __int8 v133;
  uint64_t v134;
  unsigned __int8 *v135;
  unsigned __int8 *v136;
  char *v137;
  char *v138;
  char *v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  size_t v142;
  unint64_t v143;
  char *v144;
  unint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  void *v149;
  int64_t v150;
  char *v151;
  char *v152;
  void **v153;
  void *v154;
  void *v155;
  unsigned __int8 v156;
  uint64_t v157;
  int v160;
  uint64_t v165;
  uint64_t **v166;
  void *__p;
  unsigned __int8 *v168;
  void *v169;
  __int128 *v170;
  __int128 v171;
  __int128 v172;
  void *v173;
  unsigned __int8 *v174;
  int8x16_t v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  void *v179;
  char *v180;
  char *v181;
  char **v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;

  v198 = *MEMORY[0x24BDAC8D0];
  v7 = *(unsigned int *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = v7 + 1;
  kdebug_trace();
  sub_223F93B90(&v187);
  if (**(int **)(v187 + 56) <= 1)
  {
    v8 = atomic_load((unsigned __int8 *)&qword_2540CE348);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE348))
    {
      qword_2540CE340 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_Tracker_TrackFrame");
      __cxa_guard_release(&qword_2540CE348);
    }
    v9 = qword_2540CE340;
    *(_BYTE *)(qword_2540CE340 + 16) = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v9 = std::chrono::steady_clock::now();
    *(_BYTE *)(v9 + 16) = 1;
  }
  v11 = *(_QWORD *)a2;
  v10 = *(_QWORD *)(a2 + 8);
  v166 = *(uint64_t ***)(a1 + 8);
  kdebug_trace();
  sub_223F93B90(&v187);
  if (**(int **)(v187 + 56) <= 1)
  {
    v12 = atomic_load((unsigned __int8 *)&qword_2540CE388);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE388))
    {
      qword_2540CE380 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_Tracker_AddDetections");
      __cxa_guard_release(&qword_2540CE388);
    }
    v13 = qword_2540CE380;
    *(_BYTE *)(qword_2540CE380 + 16) = 0;
    *(_QWORD *)(v13 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v13 = std::chrono::steady_clock::now();
    *(_BYTE *)(v13 + 16) = 1;
  }
  v179 = 0;
  v180 = 0;
  v181 = 0;
  if (v11)
  {
    if (v11 >> 60)
      sub_22316E078();
    v14 = (char *)operator new(16 * v11);
    v16 = &v14[16 * v11];
    v179 = v14;
    v180 = v14;
    v181 = v16;
    LODWORD(v184) = *(_DWORD *)(a1 + 4);
    DWORD1(v184) = v184;
    DWORD2(v184) = *(_DWORD *)a1;
    v17 = v10 + 200 * v11;
    v18 = v14;
    while (1)
    {
      while (1)
      {
        sub_223F9A680(v7, v166, v10, (float64_t *)(a1 + 24), (uint64_t)&v184, &v187, v15);
        if ((_BYTE)v188)
          break;
        if (v18 >= v16)
        {
          v26 = (v18 - v14) >> 4;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 60)
            sub_22316E078();
          if ((v16 - v14) >> 3 > v27)
            v27 = (v16 - v14) >> 3;
          if ((unint64_t)(v16 - v14) >= 0x7FFFFFFFFFFFFFF0)
            v21 = 0xFFFFFFFFFFFFFFFLL;
          else
            v21 = v27;
          if (v21)
          {
            if (v21 >> 60)
              sub_223174E94();
            v22 = (char *)operator new(16 * v21);
            v23 = &v22[16 * v26];
            *(_QWORD *)v23 = 0;
            *((_QWORD *)v23 + 1) = 0;
            if (v18 == v14)
            {
LABEL_47:
              v25 = v23;
              v16 = &v22[16 * v21];
              v18 = v23 + 16;
              v179 = v23;
              v181 = v16;
              if (!v14)
                goto LABEL_41;
LABEL_40:
              operator delete(v14);
              goto LABEL_41;
            }
          }
          else
          {
            v22 = 0;
            v23 = (char *)(16 * v26);
            *(_QWORD *)v23 = 0;
            *((_QWORD *)v23 + 1) = 0;
            if (v18 == v14)
              goto LABEL_47;
          }
          v28 = v23;
          do
          {
            v25 = v28 - 16;
            *((_OWORD *)v28 - 1) = *((_OWORD *)v18 - 1);
            v18 -= 16;
            v28 -= 16;
          }
          while (v18 != v14);
LABEL_39:
          v16 = &v22[16 * v21];
          v18 = v23 + 16;
          v179 = v25;
          v181 = v16;
          if (v14)
            goto LABEL_40;
LABEL_41:
          v14 = v25;
          v180 = v18;
          v10 += 200;
          if (v10 == v17)
            goto LABEL_50;
        }
        else
        {
          *(_QWORD *)v18 = 0;
          *((_QWORD *)v18 + 1) = 0;
          v18 += 16;
          v180 = v18;
          v10 += 200;
          if (v10 == v17)
            goto LABEL_50;
        }
      }
      if (v18 >= v16)
      {
        v19 = (v18 - v14) >> 4;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 60)
          sub_22316E078();
        if ((v16 - v14) >> 3 > v20)
          v20 = (v16 - v14) >> 3;
        if ((unint64_t)(v16 - v14) >= 0x7FFFFFFFFFFFFFF0)
          v21 = 0xFFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
        {
          if (v21 >> 60)
            sub_223174E94();
          v22 = (char *)operator new(16 * v21);
          v23 = &v22[16 * v19];
          *(_OWORD *)v23 = v187;
          if (v18 == v14)
          {
LABEL_44:
            v25 = v23;
            v16 = &v22[16 * v21];
            v18 = v23 + 16;
            v179 = v23;
            v181 = v16;
            if (!v14)
              goto LABEL_41;
            goto LABEL_40;
          }
        }
        else
        {
          v22 = 0;
          v23 = (char *)(16 * v19);
          *(_OWORD *)(16 * v19) = v187;
          if (v18 == v14)
            goto LABEL_44;
        }
        v24 = v23;
        do
        {
          v25 = v24 - 16;
          *((_OWORD *)v24 - 1) = *((_OWORD *)v18 - 1);
          v18 -= 16;
          v24 -= 16;
        }
        while (v18 != v14);
        goto LABEL_39;
      }
      *(_OWORD *)v18 = v187;
      v18 += 16;
      v180 = v18;
      v10 += 200;
      if (v10 == v17)
        goto LABEL_50;
    }
  }
  LODWORD(v184) = *(_DWORD *)(a1 + 4);
  DWORD1(v184) = v184;
  DWORD2(v184) = *(_DWORD *)a1;
LABEL_50:
  kdebug_trace();
  sub_223F93B90(&v187);
  if (**(int **)(v187 + 56) <= 1)
  {
    v29 = atomic_load((unsigned __int8 *)&qword_2540CE398);
    if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE398))
    {
      qword_2540CE390 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_Tracker_AddDetections");
      __cxa_guard_release(&qword_2540CE398);
    }
    v30 = qword_2540CE390;
    if (*(_BYTE *)(qword_2540CE390 + 16))
    {
      *(_QWORD *)(v30 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v30;
      *(_BYTE *)(v30 + 16) = 0;
    }
  }
  v31 = a2;
  v160 = *(unsigned __int8 *)(a2 + 192);
  if (*(_BYTE *)(a2 + 192))
  {
    v32 = *(_QWORD *)(a2 + 184);
    v177 = *(_OWORD *)v32;
    v33 = *(_QWORD *)(v32 + 24);
    v178 = *(_QWORD *)(v32 + 16);
    v34 = *(_QWORD *)(v32 + 32);
    v175 = *(int8x16_t *)(v32 + 40);
    v35 = *(_QWORD *)(v32 + 64);
    v176 = *(_QWORD *)(v32 + 56);
    v36 = *(_QWORD *)(v32 + 72);
    kdebug_trace();
    sub_223F93B90(&v187);
    if (**(int **)(v187 + 56) <= 1)
    {
      v40 = atomic_load((unsigned __int8 *)&qword_2540CE3A8);
      if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE3A8))
      {
        qword_2540CE3A0 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_Tracker_AddSurfaceSegments");
        __cxa_guard_release(&qword_2540CE3A8);
      }
      v41 = qword_2540CE3A0;
      *(_BYTE *)(qword_2540CE3A0 + 16) = 0;
      *(_QWORD *)(v41 + 8) = 0;
      *(std::chrono::steady_clock::time_point *)v41 = std::chrono::steady_clock::now();
      *(_BYTE *)(v41 + 16) = 1;
    }
    v187 = v177;
    *(_QWORD *)&v188 = v178;
    *((_QWORD *)&v188 + 1) = v33;
    *(_QWORD *)&v189 = v34;
    v184 = (__int128)v175;
    *(_QWORD *)&v185 = v176;
    *((_QWORD *)&v185 + 1) = v35;
    v186 = v36;
    sub_223F9CC78(v7, (uint64_t)v166, (unsigned __int8 **)&v187, &v184, v32 + 80, (float32x4_t *)(v32 + 184), v175, v37, v38, v39);
    kdebug_trace();
    sub_223F93B90(&v196);
    if (**(int **)(v196 + 56) <= 1)
    {
      v42 = atomic_load((unsigned __int8 *)&qword_2540CE3B8);
      if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE3B8))
      {
        qword_2540CE3B0 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_Tracker_AddSurfaceSegments");
        __cxa_guard_release(&qword_2540CE3B8);
      }
      v43 = qword_2540CE3B0;
      if (*(_BYTE *)(qword_2540CE3B0 + 16))
      {
        *(_QWORD *)(v43 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v43;
        *(_BYTE *)(v43 + 16) = 0;
      }
    }
    v31 = a2;
  }
  v44 = *(_OWORD *)(v31 + 32);
  v171 = *(_OWORD *)(v31 + 48);
  v172 = v44;
  v45 = *(_QWORD *)v31;
  v46 = *(_QWORD *)(v31 + 8);
  v183 = *(_OWORD *)(v31 + 64);
  v47 = *(_QWORD *)(v31 + 80);
  v48 = *(_DWORD *)(v31 + 88);
  v49 = *(_QWORD *)(v31 + 92);
  v51 = *(_QWORD *)(v31 + 104);
  v50 = *(_QWORD *)(v31 + 112);
  v53 = *(_QWORD *)(v31 + 208);
  v52 = *(_QWORD *)(v31 + 216);
  kdebug_trace();
  sub_223F93B90(&v187);
  v165 = v50;
  if (**(int **)(v187 + 56) <= 1)
  {
    v54 = atomic_load((unsigned __int8 *)&qword_2540CE3C8);
    if ((v54 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE3C8))
    {
      qword_2540CE3C0 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_Tracker_Remove");
      __cxa_guard_release(&qword_2540CE3C8);
    }
    v55 = qword_2540CE3C0;
    *(_BYTE *)(qword_2540CE3C0 + 16) = 0;
    *(_QWORD *)(v55 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v55 = std::chrono::steady_clock::now();
    *(_BYTE *)(v55 + 16) = 1;
  }
  v56 = &off_24EC64998;
  *(_QWORD *)&v187 = &off_24EC64998;
  *((_QWORD *)&v187 + 1) = &off_24EC64920;
  v188 = v172;
  v189 = v171;
  v190 = v183;
  v191 = v47;
  v192 = v48;
  v193 = v49;
  v194 = v51;
  v195 = v165;
  sub_223F9D66C(v7, v166, v45, v46, &v187, (float32x4_t *)(a2 + 120), v53, v52, (uint64_t *)&v173);
  *(_QWORD *)&v187 = &off_24EC64998;
  kdebug_trace();
  sub_223F93B90(&v184);
  if (**(int **)(v184 + 56) <= 1)
  {
    v57 = atomic_load((unsigned __int8 *)&qword_2540CE3D8);
    if ((v57 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE3D8))
    {
      qword_2540CE3D0 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_Tracker_Remove");
      __cxa_guard_release(&qword_2540CE3D8);
    }
    v58 = qword_2540CE3D0;
    if (*(_BYTE *)(qword_2540CE3D0 + 16))
    {
      *(_QWORD *)(v58 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v58;
      *(_BYTE *)(v58 + 16) = 0;
    }
  }
  v60 = (unsigned __int8 *)v173;
  v59 = v174;
  if (v173 != v174)
  {
    do
    {
      sub_223F94F24(*(unsigned __int8 ***)(a1 + 8), v60);
      v60 += 16;
    }
    while (v60 != v59);
  }
  kdebug_trace();
  sub_223F93B90(&v187);
  if (**(int **)(v187 + 56) <= 1)
  {
    v61 = atomic_load((unsigned __int8 *)&qword_2540CE3E8);
    if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE3E8))
    {
      qword_2540CE3E0 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_Tracker_Merge");
      __cxa_guard_release(&qword_2540CE3E8);
    }
    v62 = qword_2540CE3E0;
    *(_BYTE *)(qword_2540CE3E0 + 16) = 0;
    *(_QWORD *)(v62 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v62 = std::chrono::steady_clock::now();
    *(_BYTE *)(v62 + 16) = 1;
  }
  sub_223F980B8(v7, v166, (uint64_t *)&v169);
  kdebug_trace();
  sub_223F93B90(&v187);
  if (**(int **)(v187 + 56) <= 1)
  {
    v63 = atomic_load((unsigned __int8 *)&qword_2540CE3F8);
    if ((v63 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE3F8))
    {
      qword_2540CE3F0 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_Tracker_Merge");
      __cxa_guard_release(&qword_2540CE3F8);
    }
    v64 = qword_2540CE3F0;
    if (*(_BYTE *)(qword_2540CE3F0 + 16))
    {
      *(_QWORD *)(v64 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v64;
      *(_BYTE *)(v64 + 16) = 0;
    }
  }
  v65 = (__int128 *)v169;
  v66 = v170;
  v187 = 0u;
  v188 = 0u;
  LODWORD(v189) = 1065353216;
  if (v169 != v170)
  {
    while (1)
    {
      v184 = *v65;
      v185 = v65[1];
      v196 = *v65;
      v197 = v185;
      v67 = sub_22456636C((unsigned __int8 *)&v196);
      v68 = v67;
      v69 = *((_QWORD *)&v187 + 1);
      if (*((_QWORD *)&v187 + 1))
      {
        v70 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v187 + 8));
        v70.i16[0] = vaddlv_u8(v70);
        if (v70.u32[0] > 1uLL)
        {
          v56 = (uint64_t (**)())v67;
          if (v67 >= *((_QWORD *)&v187 + 1))
            v56 = (uint64_t (**)())(v67 % *((_QWORD *)&v187 + 1));
        }
        else
        {
          v56 = (uint64_t (**)())((*((_QWORD *)&v187 + 1) - 1) & v67);
        }
        v71 = *(_QWORD **)(v187 + 8 * (_QWORD)v56);
        if (v71)
        {
          v72 = (_QWORD *)*v71;
          if (v72)
          {
            if (v70.u32[0] < 2uLL)
            {
              while (1)
              {
                v76 = v72[1];
                if (v76 == v67)
                {
                  if (v72[2] == (_QWORD)v196 && v72[3] == *((_QWORD *)&v196 + 1))
                    goto LABEL_179;
                }
                else if ((uint64_t (**)())(v76 & (*((_QWORD *)&v187 + 1) - 1)) != v56)
                {
                  goto LABEL_106;
                }
                v72 = (_QWORD *)*v72;
                if (!v72)
                  goto LABEL_106;
              }
            }
            do
            {
              v74 = v72[1];
              if (v74 == v67)
              {
                v73 = v72[2] == (_QWORD)v196 && v72[3] == *((_QWORD *)&v196 + 1);
                if (v73)
                  goto LABEL_179;
              }
              else
              {
                if (v74 >= *((_QWORD *)&v187 + 1))
                  v74 %= *((_QWORD *)&v187 + 1);
                if ((uint64_t (**)())v74 != v56)
                  break;
              }
              v72 = (_QWORD *)*v72;
            }
            while (v72);
          }
        }
      }
LABEL_106:
      v77 = operator new(0x30uLL);
      *v77 = 0;
      v77[1] = v68;
      v78 = v197;
      *((_OWORD *)v77 + 1) = v196;
      *((_OWORD *)v77 + 2) = v78;
      v79 = (float)(unint64_t)(*((_QWORD *)&v188 + 1) + 1);
      if (!v69 || (float)(*(float *)&v189 * (float)v69) < v79)
        break;
      v80 = v187;
      v81 = *(_QWORD **)(v187 + 8 * (_QWORD)v56);
      if (v81)
        goto LABEL_109;
LABEL_158:
      *v77 = v188;
      *(_QWORD *)&v188 = v77;
      *(_QWORD *)(v80 + 8 * (_QWORD)v56) = &v188;
      if (!*v77)
        goto LABEL_178;
      v102 = *(_QWORD *)(*v77 + 8);
      if ((v69 & (v69 - 1)) != 0)
      {
        if (v102 >= v69)
          v102 %= v69;
      }
      else
      {
        v102 &= v69 - 1;
      }
      v81 = (_QWORD *)(v187 + 8 * v102);
LABEL_177:
      *v81 = v77;
LABEL_178:
      ++*((_QWORD *)&v188 + 1);
LABEL_179:
      v65 += 2;
      if (v65 == v66)
        goto LABEL_180;
    }
    v82 = (v69 & (v69 - 1)) != 0;
    if (v69 < 3)
      v82 = 1;
    v83 = v82 | (2 * v69);
    v84 = vcvtps_u32_f32(v79 / *(float *)&v189);
    if (v83 <= v84)
      prime = v84;
    else
      prime = v83;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v69 = *((_QWORD *)&v187 + 1);
    }
    if (prime <= v69)
    {
      if (prime >= v69)
        goto LABEL_156;
      v96 = vcvtps_u32_f32((float)*((unint64_t *)&v188 + 1) / *(float *)&v189);
      if (v69 < 3 || (v97 = (uint8x8_t)vcnt_s8((int8x8_t)v69), v97.i16[0] = vaddlv_u8(v97), v97.u32[0] > 1uLL))
      {
        v96 = std::__next_prime(v96);
      }
      else
      {
        v98 = 1 << -(char)__clz(v96 - 1);
        if (v96 >= 2)
          v96 = v98;
      }
      if (prime <= v96)
        prime = v96;
      if (prime >= v69)
      {
        v69 = *((_QWORD *)&v187 + 1);
        v101 = *((_QWORD *)&v187 + 1) - 1;
        if ((v69 & (v69 - 1)) != 0)
          goto LABEL_169;
        goto LABEL_157;
      }
      if (!prime)
      {
        v100 = (void *)v187;
        *(_QWORD *)&v187 = 0;
        if (v100)
          operator delete(v100);
        v69 = 0;
        *((_QWORD *)&v187 + 1) = 0;
        v101 = -1;
        goto LABEL_157;
      }
    }
    if (prime >> 61)
      sub_223174E94();
    v86 = operator new(8 * prime);
    v87 = (void *)v187;
    *(_QWORD *)&v187 = v86;
    if (v87)
      operator delete(v87);
    v88 = 0;
    *((_QWORD *)&v187 + 1) = prime;
    do
      *(_QWORD *)(v187 + 8 * v88++) = 0;
    while (prime != v88);
    v89 = (_QWORD **)v188;
    if (!(_QWORD)v188)
    {
LABEL_168:
      v69 = prime;
      v101 = prime - 1;
      if ((prime & (prime - 1)) != 0)
      {
LABEL_169:
        if (v68 >= v69)
        {
          v56 = (uint64_t (**)())(v68 % v69);
          v80 = v187;
          v81 = *(_QWORD **)(v187 + 8 * (v68 % v69));
          if (!v81)
            goto LABEL_158;
        }
        else
        {
          v56 = (uint64_t (**)())v68;
          v80 = v187;
          v81 = *(_QWORD **)(v187 + 8 * v68);
          if (!v81)
            goto LABEL_158;
        }
        goto LABEL_109;
      }
LABEL_157:
      v56 = (uint64_t (**)())(v101 & v68);
      v80 = v187;
      v81 = *(_QWORD **)(v187 + 8 * (v101 & v68));
      if (!v81)
        goto LABEL_158;
LABEL_109:
      *v77 = *v81;
      goto LABEL_177;
    }
    v90 = *(_QWORD *)(v188 + 8);
    v91 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v92 = v90 & v91;
      *(_QWORD *)(v187 + 8 * v92) = &v188;
      for (i = *v89; *v89; i = *v89)
      {
        v94 = i[1] & v91;
        if (v94 == v92)
        {
          v89 = (_QWORD **)i;
        }
        else if (*(_QWORD *)(v187 + 8 * v94))
        {
          *v89 = (_QWORD *)*i;
          v95 = 8 * v94;
          *i = **(_QWORD **)(v187 + v95);
          **(_QWORD **)(v187 + v95) = i;
        }
        else
        {
          *(_QWORD *)(v187 + 8 * v94) = v89;
          v89 = (_QWORD **)i;
          v92 = v94;
        }
      }
      goto LABEL_168;
    }
    if (v90 < prime)
    {
      *(_QWORD *)(v187 + 8 * v90) = &v188;
      v99 = *v89;
      if (*v89)
        goto LABEL_163;
      goto LABEL_155;
    }
    v90 %= prime;
    *(_QWORD *)(v187 + 8 * v90) = &v188;
    v99 = *v89;
    if (!*v89)
    {
LABEL_155:
      v69 = prime;
LABEL_156:
      v101 = v69 - 1;
      if ((v69 & (v69 - 1)) != 0)
        goto LABEL_169;
      goto LABEL_157;
    }
    while (1)
    {
LABEL_163:
      v104 = v99[1];
      if (v104 >= prime)
        v104 %= prime;
      if (v104 == v90)
        goto LABEL_162;
      if (*(_QWORD *)(v187 + 8 * v104))
      {
        *v89 = (_QWORD *)*v99;
        v103 = 8 * v104;
        *v99 = **(_QWORD **)(v187 + v103);
        **(_QWORD **)(v187 + v103) = v99;
        v99 = v89;
LABEL_162:
        v89 = (_QWORD **)v99;
        v99 = (_QWORD *)*v99;
        if (!v99)
          goto LABEL_168;
      }
      else
      {
        *(_QWORD *)(v187 + 8 * v104) = v89;
        v89 = (_QWORD **)v99;
        v99 = (_QWORD *)*v99;
        v90 = v104;
        if (!v99)
          goto LABEL_168;
      }
    }
  }
LABEL_180:
  v106 = (unsigned __int8 *)v179;
  v105 = v180;
  while (v106 != (unsigned __int8 *)v105)
  {
    v107 = sub_22456636C(v106);
    if (*((_QWORD *)&v187 + 1))
    {
      v108 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v187 + 8));
      v108.i16[0] = vaddlv_u8(v108);
      if (v108.u32[0] > 1uLL)
      {
        v109 = v107;
        if (v107 >= *((_QWORD *)&v187 + 1))
          v109 = v107 % *((_QWORD *)&v187 + 1);
      }
      else
      {
        v109 = (*((_QWORD *)&v187 + 1) - 1) & v107;
      }
      v110 = *(uint64_t ***)(v187 + 8 * v109);
      if (v110)
      {
        v111 = *v110;
        if (v111)
        {
          if (v108.u32[0] < 2uLL)
          {
            while (1)
            {
              v115 = v111[1];
              if (v115 == v107)
              {
                if (v111[2] == *(_QWORD *)v106 && v111[3] == *((_QWORD *)v106 + 1))
                  goto LABEL_181;
              }
              else if ((v115 & (*((_QWORD *)&v187 + 1) - 1)) != v109)
              {
                goto LABEL_182;
              }
              v111 = (uint64_t *)*v111;
              if (!v111)
                goto LABEL_182;
            }
          }
          do
          {
            v113 = v111[1];
            if (v113 == v107)
            {
              if (v111[2] == *(_QWORD *)v106 && v111[3] == *((_QWORD *)v106 + 1))
              {
LABEL_181:
                *(_OWORD *)v106 = *((_OWORD *)v111 + 2);
                break;
              }
            }
            else
            {
              if (v113 >= *((_QWORD *)&v187 + 1))
                v113 %= *((_QWORD *)&v187 + 1);
              if (v113 != v109)
                break;
            }
            v111 = (uint64_t *)*v111;
          }
          while (v111);
        }
      }
    }
LABEL_182:
    v106 += 16;
  }
  v116 = (_QWORD *)v188;
  if ((_QWORD)v188)
  {
    do
    {
      v117 = (_QWORD *)*v116;
      operator delete(v116);
      v116 = v117;
    }
    while (v117);
  }
  v118 = (void *)v187;
  *(_QWORD *)&v187 = 0;
  if (v118)
    operator delete(v118);
  v119 = (__int128 *)v169;
  v120 = v170;
  v187 = 0uLL;
  *(_QWORD *)&v188 = 0;
  v121 = (char *)v170 - (_BYTE *)v169;
  if (v170 == v169)
  {
    *(_QWORD *)&v197 = 0;
    v196 = 0uLL;
    goto LABEL_228;
  }
  if (v121 < 0)
    sub_22316E078();
  *(_QWORD *)&v187 = operator new((unint64_t)v121 >> 1);
  *((_QWORD *)&v187 + 1) = v187;
  *(_QWORD *)&v188 = v187 + 16 * (v121 >> 5);
  __p = &v187;
  do
  {
    v184 = *v119;
    sub_2232E9564((char ***)&__p, &v184);
    v119 += 2;
  }
  while (v119 != v120);
  v122 = (void *)v187;
  *(_QWORD *)&v197 = 0;
  v196 = 0uLL;
  v123 = *((_QWORD *)&v187 + 1) - v187;
  if (*((_QWORD *)&v187 + 1) == (_QWORD)v187)
  {
    v125 = 0;
    v124 = 0;
    if (!(_QWORD)v187)
      goto LABEL_227;
  }
  else
  {
    if (v123 < 0)
      sub_22316E078();
    v124 = (char *)operator new(*((_QWORD *)&v187 + 1) - v187);
    v125 = &v124[16 * (v123 >> 4)];
    *(_QWORD *)&v196 = v124;
    *(_QWORD *)&v197 = v125;
    memmove(v124, v122, v123);
    *((_QWORD *)&v196 + 1) = v125;
    if (!v122)
      goto LABEL_227;
  }
  operator delete(v122);
LABEL_227:
  while (v124 != v125)
  {
    sub_223F94F24(*(unsigned __int8 ***)(a1 + 8), (unsigned __int8 *)v124);
    v124 += 16;
  }
LABEL_228:
  kdebug_trace();
  sub_223F93B90(&v187);
  if (**(int **)(v187 + 56) <= 1)
  {
    v126 = atomic_load((unsigned __int8 *)&qword_2540CE408);
    if ((v126 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE408))
    {
      qword_2540CE400 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_Tracker_Optimize");
      __cxa_guard_release(&qword_2540CE408);
    }
    v127 = qword_2540CE400;
    *(_BYTE *)(qword_2540CE400 + 16) = 0;
    *(_QWORD *)(v127 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v127 = std::chrono::steady_clock::now();
    *(_BYTE *)(v127 + 16) = 1;
  }
  v128 = *v166;
  if (*v166 != (uint64_t *)(v166 + 1))
  {
    v129 = 0;
    do
    {
      if (*((_DWORD *)v128 + 85) == (_DWORD)v7)
      {
        v130 = sub_223F81B08((uint64_t)(v128 + 22), v7);
        if (v130)
        {
          if (*((_DWORD *)v128 + 85) == (_DWORD)v7)
          {
            *((_DWORD *)v128 + 86) &= ~(*((int *)v128 + 86) >> 31);
          }
          else
          {
            *((_DWORD *)v128 + 85) = v7;
            *((_DWORD *)v128 + 87) += *((_DWORD *)v128 + 86);
            *((_DWORD *)v128 + 86) = 0;
          }
        }
        v129 |= v130;
      }
      v131 = (uint64_t *)v128[1];
      if (v131)
      {
        do
        {
          v132 = (uint64_t **)v131;
          v131 = (uint64_t *)*v131;
        }
        while (v131);
      }
      else
      {
        do
        {
          v132 = (uint64_t **)v128[2];
          v73 = *v132 == v128;
          v128 = (uint64_t *)v132;
        }
        while (!v73);
      }
      v128 = (uint64_t *)v132;
    }
    while (v132 != v166 + 1);
  }
  kdebug_trace();
  sub_223F93B90(&v187);
  if (**(int **)(v187 + 56) <= 1)
  {
    v133 = atomic_load((unsigned __int8 *)&qword_2540CE418);
    if ((v133 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE418))
    {
      qword_2540CE410 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_Tracker_Optimize");
      __cxa_guard_release(&qword_2540CE418);
    }
    v134 = qword_2540CE410;
    if (*(_BYTE *)(qword_2540CE410 + 16))
    {
      *(_QWORD *)(v134 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v134;
      *(_BYTE *)(v134 + 16) = 0;
    }
  }
  sub_223F9E5CC(v7, v166, (_DWORD *)(a2 + 16), (float32x4_t *)(a2 + 120), *(_DWORD *)(a2 + 200), *(_DWORD *)a1);
  sub_223F9F3E4(v7, v166, 0x1Eu, (uint64_t *)&__p);
  v136 = (unsigned __int8 *)__p;
  v135 = v168;
  if (__p != v168)
  {
    do
    {
      sub_223F94F24(*(unsigned __int8 ***)(a1 + 8), v136);
      v136 += 16;
    }
    while (v136 != v135);
  }
  if (v160)
    sub_223F9A558(*(_QWORD *)(a1 + 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), &v179);
  if (a4 && &v179 != a3)
    sub_2231984D0(a3, (char *)v179, v180, (v180 - (_BYTE *)v179) >> 4);
  if (a6)
  {
    v138 = (char *)*((_QWORD *)&v196 + 1);
    v184 = v196;
    v137 = (char *)v196;
    *(_QWORD *)&v185 = v197;
    v139 = (char *)v197;
    *(_QWORD *)&v197 = 0;
    v196 = 0uLL;
    v140 = (unsigned __int8 *)v173;
    v141 = v174;
    v142 = v174 - (_BYTE *)v173;
    v143 = (v174 - (_BYTE *)v173) >> 4;
    if (v143 <= (v139 - v137) >> 4)
    {
      v146 = v138;
      v147 = v137;
      v182 = (char **)&v184;
      if (v173 != v174)
        goto LABEL_266;
    }
    else
    {
      if ((v142 & 0x8000000000000000) != 0)
        sub_22316E078();
      v144 = (char *)operator new(v142);
      v139 = &v144[16 * v143];
      v145 = (v138 - v137) & 0xFFFFFFFFFFFFFFF0;
      v146 = &v144[v145];
      v147 = &v144[v145];
      if (v138 != v137)
      {
        v148 = &v144[v145];
        do
        {
          v147 = v148 - 16;
          *((_OWORD *)v148 - 1) = *((_OWORD *)v138 - 1);
          v138 -= 16;
          v148 -= 16;
        }
        while (v138 != v137);
      }
      *(_QWORD *)&v184 = v147;
      *((_QWORD *)&v184 + 1) = v146;
      *(_QWORD *)&v185 = v139;
      if (v137)
      {
        operator delete(v137);
        v140 = (unsigned __int8 *)v173;
        v141 = v174;
      }
      v182 = (char **)&v184;
      if (v140 != v141)
      {
        do
        {
LABEL_266:
          sub_2232E9564(&v182, v140);
          v140 += 16;
        }
        while (v140 != v141);
        v146 = (char *)*((_QWORD *)&v184 + 1);
        v147 = (char *)v184;
        v139 = (char *)v185;
        v187 = v184;
        v188 = (unint64_t)v185;
        v189 = 0uLL;
        v149 = __p;
        v150 = v168 - (_BYTE *)__p;
        if (v168 == __p)
        {
LABEL_268:
          v151 = 0;
          v152 = 0;
          v153 = a5;
          v154 = *a5;
          if (!*a5)
            goto LABEL_275;
          goto LABEL_274;
        }
LABEL_272:
        if (v150 < 0)
          sub_22316E078();
        v152 = (char *)operator new(v150);
        v151 = &v152[16 * (v150 >> 4)];
        *((_QWORD *)&v188 + 1) = v152;
        *((_QWORD *)&v189 + 1) = v151;
        memcpy(v152, v149, v150);
        *(_QWORD *)&v189 = v151;
        v153 = a5;
        v154 = *a5;
        if (!*a5)
          goto LABEL_275;
LABEL_274:
        v153[1] = v154;
        operator delete(v154);
        *v153 = 0;
        v153[1] = 0;
        v153[2] = 0;
LABEL_275:
        *v153 = v147;
        v153[1] = v146;
        v153[2] = v139;
        v155 = v153[3];
        if (v155)
        {
          v153[4] = v155;
          operator delete(v155);
          v153[3] = 0;
          v153[4] = 0;
          v153[5] = 0;
        }
        v153[3] = v152;
        v153[4] = v151;
        v153[5] = v151;
        goto LABEL_278;
      }
    }
    *(_QWORD *)&v187 = v147;
    *((_QWORD *)&v187 + 1) = v146;
    v188 = (unint64_t)v139;
    v189 = 0uLL;
    v149 = __p;
    v150 = v168 - (_BYTE *)__p;
    if (v168 == __p)
      goto LABEL_268;
    goto LABEL_272;
  }
LABEL_278:
  if (__p)
  {
    v168 = (unsigned __int8 *)__p;
    operator delete(__p);
  }
  if ((_QWORD)v196)
  {
    *((_QWORD *)&v196 + 1) = v196;
    operator delete((void *)v196);
  }
  if (v169)
  {
    v170 = (__int128 *)v169;
    operator delete(v169);
  }
  if (v173)
  {
    v174 = (unsigned __int8 *)v173;
    operator delete(v173);
  }
  if (v179)
  {
    v180 = (char *)v179;
    operator delete(v179);
  }
  kdebug_trace();
  sub_223F93B90(&v187);
  if (**(int **)(v187 + 56) <= 1)
  {
    v156 = atomic_load((unsigned __int8 *)&qword_2540CE358);
    if ((v156 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE358))
    {
      qword_2540CE350 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_Tracker_TrackFrame");
      __cxa_guard_release(&qword_2540CE358);
    }
    v157 = qword_2540CE350;
    if (*(_BYTE *)(qword_2540CE350 + 16))
    {
      *(_QWORD *)(v157 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v157;
      *(_BYTE *)(v157 + 16) = 0;
    }
  }
  return v7;
}

void sub_223F93868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,_Unwind_Exception *exception_object,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48)
{
  __cxa_guard_abort(&qword_2540CE3B8);
  if (!__p)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223F93B90(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CE378);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE378))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.acv.trace");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CE370);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CE378);
  }
  *a1 = qword_2540CE370;
}

void sub_223F93C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CE378);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CE378);
  _Unwind_Resume(a1);
}

uint64_t sub_223F93C84(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (_QWORD *)operator new();
  *(_QWORD *)(a1 + 24) = v4;
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    v15 = 0;
    v13 = v6;
    v14 = v5;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  }
  else
  {
    v15 = 0;
    v13 = v6;
    v14 = 0;
  }
  sub_223F93EB0((uint64_t)&v15, (_QWORD *)(a1 + 24), &v13, &v11);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
  v8 = v11;
  v7 = v12;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v7;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  return a1;
}

void sub_223F93DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;

  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 40))(a11);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
  sub_223F93E70(v11);
  _Unwind_Resume(a1);
}

void sub_223F93E4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F93E70(uint64_t a1)
{
  uint64_t v2;

  sub_223F9497C(a1 + 24);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  return a1;
}

uint64_t sub_223F93EB0@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X3>, uint64_t **a4@<X8>)
{
  uint64_t result;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  result = a3[1];
  if (result && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result)) != 0)
  {
    v8 = **(_QWORD **)(*a3 + 8) + 232 * *(_QWORD *)*a3;
    result = sub_223F941A8(a2, v8 + 80, v8 + 96, a4);
    for (i = 0; i != 64; i += 16)
    {
      v10 = **(_QWORD **)(*a3 + 8) + 232 * *(_QWORD *)*a3 + i;
      v11 = *(_QWORD *)(v10 + 24);
      if (v11)
      {
        v12 = *(_QWORD *)(v10 + 16);
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11))
        {
          v26 = v12;
          v27 = v11;
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
          sub_223F93EB0(&v28, a1, a1, a2, &v26);
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
          v13 = **a4;
          v14 = *(_QWORD *)(*a4)[1];
          v16 = v28;
          v15 = v29;
          if (v29)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
          }
          v17 = v14 + 232 * v13 + i;
          v18 = *(_QWORD *)(v17 + 24);
          *(_QWORD *)(v17 + 16) = v16;
          *(_QWORD *)(v17 + 24) = v15;
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
          v19 = *v28;
          v20 = *(_QWORD *)v28[1];
          v22 = *a4;
          v21 = a4[1];
          if (v21)
          {
            (*(void (**)(uint64_t *))(*v21 + 24))(a4[1]);
            (*(void (**)(uint64_t *))(*v21 + 24))(v21);
          }
          v23 = (uint64_t **)(v20 + 232 * v19);
          v24 = v23[1];
          *v23 = v22;
          v23[1] = v21;
          if (v24)
            (*(void (**)(uint64_t *))(*v24 + 40))(v24);
          if (v21)
            (*(void (**)(uint64_t *))(*v21 + 40))(v21);
          if (v29)
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
        }
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
      }
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
  return result;
}

void sub_223F940D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 40))(a14);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  v18 = *(_QWORD *)(v14 + 8);
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_223F941A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  char v14;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v35;
  _BYTE v36[13];
  _BYTE v37[13];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[31];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[32];
  char v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[31];
  char v54;
  _QWORD v55[2];
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v6 = a1[2];
  if (a1[1] == v6)
  {
    v11 = *a1;
    v12 = *(_QWORD *)(*a1 + 8);
    v7 = 0x34F72C234F72C235 * ((uint64_t)(v12 - *(_QWORD *)*a1) >> 3);
    if (v12 >= *(_QWORD *)(*a1 + 16))
    {
      v18 = sub_223F9469C((uint64_t *)*a1, (uint64_t)&unk_224691EF0, (__int128 *)a2, (char *)a3);
    }
    else
    {
      v13 = *(unsigned __int8 *)(a3 + 120);
      if (*(_BYTE *)(a3 + 120))
      {
        v14 = *(_BYTE *)(a3 + 96);
        if (v14)
        {
          v14 = *(_BYTE *)a3;
          v15 = *(_OWORD *)(a3 + 49);
          v45 = *(_OWORD *)(a3 + 33);
          v46 = v15;
          *(_OWORD *)v47 = *(_OWORD *)(a3 + 65);
          *(_OWORD *)&v47[15] = *(_OWORD *)(a3 + 80);
          v16 = *(_OWORD *)(a3 + 17);
          v17 = 1;
          v43 = *(_OWORD *)(a3 + 1);
          v44 = v16;
        }
        else
        {
          v17 = 0;
        }
        *(_QWORD *)v37 = *(_QWORD *)(a3 + 104);
        *(_QWORD *)&v37[5] = *(_QWORD *)(a3 + 109);
      }
      else
      {
        v17 = 0;
        v14 = 0;
      }
      *(_OWORD *)(v12 + 48) = 0u;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      *(_OWORD *)(v12 + 32) = 0u;
      *(_OWORD *)v12 = 0u;
      *(_QWORD *)(v12 + 80) = *(_QWORD *)a2;
      *(_QWORD *)(v12 + 88) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(v12 + 96) = 0;
      *(_BYTE *)(v12 + 216) = 0;
      if (v13)
      {
        *(_BYTE *)(v12 + 192) = 0;
        if (v17)
        {
          v25 = v46;
          *(_OWORD *)(v12 + 129) = v45;
          *(_OWORD *)(v12 + 145) = v25;
          *(_OWORD *)(v12 + 161) = *(_OWORD *)v47;
          *(_OWORD *)(v12 + 176) = *(_OWORD *)&v47[15];
          v26 = v44;
          *(_OWORD *)(v12 + 97) = v43;
          *(_BYTE *)(v12 + 96) = v14;
          *(_OWORD *)(v12 + 113) = v26;
          *(_BYTE *)(v12 + 192) = 1;
        }
        *(_QWORD *)(v12 + 200) = *(_QWORD *)v37;
        *(_QWORD *)(v12 + 205) = *(_QWORD *)&v37[5];
        *(_BYTE *)(v12 + 216) = 1;
      }
      *(_BYTE *)(v12 + 224) = 1;
      v18 = v12 + 232;
    }
    *(_QWORD *)(v11 + 8) = v18;
    v27 = (uint64_t *)*a1;
    v28 = (_QWORD *)operator new();
    *v28 = v7;
    v28[1] = v27;
    *(_QWORD *)&v43 = v28;
    v29 = operator new();
    *(_QWORD *)v29 = &off_24EC64700;
    *(int64x2_t *)(v29 + 8) = vdupq_n_s64(1uLL);
    *(_QWORD *)(v29 + 24) = v28;
    *((_QWORD *)&v43 + 1) = v29;
    v30 = (_QWORD *)a1[5];
    if ((unint64_t)v30 >= a1[6])
    {
      v31 = sub_223F88508((void **)a1 + 4, (uint64_t)&v43);
      v32 = *((_QWORD *)&v43 + 1);
      a1[5] = v31;
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
    }
    else
    {
      *v30 = v28;
      v30[1] = v29;
      a1[5] = v30 + 2;
    }
  }
  else
  {
    v7 = *(_QWORD *)(v6 - 8);
    a1[2] = v6 - 8;
    v8 = *(unsigned __int8 *)(a3 + 120);
    if (*(_BYTE *)(a3 + 120))
    {
      v9 = *(_BYTE *)(a3 + 96);
      if (v9)
      {
        v9 = *(_BYTE *)a3;
        v40 = *(_OWORD *)(a3 + 33);
        v41 = *(_OWORD *)(a3 + 49);
        *(_OWORD *)v42 = *(_OWORD *)(a3 + 65);
        *(_OWORD *)&v42[15] = *(_OWORD *)(a3 + 80);
        v10 = 1;
        v38 = *(_OWORD *)(a3 + 1);
        v39 = *(_OWORD *)(a3 + 17);
      }
      else
      {
        v10 = 0;
      }
      *(_QWORD *)v36 = *(_QWORD *)(a3 + 104);
      *(_QWORD *)&v36[5] = *(_QWORD *)(a3 + 109);
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v19 = *(_OWORD *)a2;
    *(_OWORD *)v47 = 0u;
    *(_OWORD *)&v47[16] = v19;
    v48 = 0;
    v56 = 0;
    if (v8)
    {
      v54 = 0;
      if (v10)
      {
        v51 = v40;
        v52 = v41;
        *(_OWORD *)v53 = *(_OWORD *)v42;
        *(_OWORD *)&v53[15] = *(_OWORD *)&v42[15];
        v49 = v38;
        v48 = v9;
        v50 = v39;
        v54 = 1;
      }
      v55[0] = *(_QWORD *)v36;
      *(_QWORD *)((char *)v55 + 5) = *(_QWORD *)&v36[5];
      v56 = 1;
    }
    sub_223F87F80(*(_QWORD *)*a1 + 232 * v7, (uint64_t)&v43);
    if (*(_QWORD *)&v47[8])
      (*(void (**)(_QWORD))(**(_QWORD **)&v47[8] + 40))(*(_QWORD *)&v47[8]);
    if (*((_QWORD *)&v46 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v46 + 1) + 40))(*((_QWORD *)&v46 + 1));
    if (*((_QWORD *)&v45 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v45 + 1) + 40))(*((_QWORD *)&v45 + 1));
    if (*((_QWORD *)&v44 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v44 + 1) + 40))(*((_QWORD *)&v44 + 1));
    if (*((_QWORD *)&v43 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v43 + 1) + 40))(*((_QWORD *)&v43 + 1));
    v20 = (uint64_t *)*a1;
    v21 = (_QWORD *)operator new();
    *v21 = v7;
    v21[1] = v20;
    v22 = operator new();
    *(_QWORD *)v22 = &off_24EC64700;
    *(int64x2_t *)(v22 + 8) = vdupq_n_s64(1uLL);
    *(_QWORD *)(v22 + 24) = v21;
    v23 = (_QWORD *)(a1[4] + 16 * v7);
    v24 = v23[1];
    *v23 = v21;
    v23[1] = v22;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
  }
  v35 = *(_OWORD *)(a1[4] + 16 * v7);
  v33 = *(_QWORD *)(a1[4] + 16 * v7 + 8);
  (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 24))(*((_QWORD *)&v35 + 1));
  *a4 = v35;
  (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 40))(v33);
}

void sub_223F94620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F9469C(uint64_t *a1, uint64_t a2, __int128 *a3, char *a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  int v16;
  char v17;
  __int128 v18;
  __int128 v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int64x2_t v25;
  void *__p;
  int64x2_t v28;
  char *v29;
  _QWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[2];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v5 = a1[1];
  v7 = 0x34F72C234F72C235 * ((uint64_t)(v5 - *a1) >> 3);
  v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) > 0x11A7B9611A7B961)
    sub_22316E078();
  v11 = a1[2];
  if (0x69EE58469EE5846ALL * ((v11 - v6) >> 3) > v8)
    v8 = 0x69EE58469EE5846ALL * ((v11 - v6) >> 3);
  if ((unint64_t)(0x34F72C234F72C235 * ((v11 - v6) >> 3)) >= 0x8D3DCB08D3DCB0)
    v12 = 0x11A7B9611A7B961;
  else
    v12 = v8;
  v30 = a1 + 2;
  if (v12)
  {
    if (v12 > 0x11A7B9611A7B961)
      sub_223174E94();
    v13 = (char *)operator new(232 * v12);
  }
  else
  {
    v13 = 0;
  }
  v14 = (uint64_t)&v13[232 * v7];
  __p = v13;
  v28.i64[0] = v14;
  v15 = &v13[232 * v12];
  v29 = v15;
  v16 = a4[120];
  if (a4[120])
  {
    v17 = a4[96];
    if (v17)
    {
      v17 = *a4;
      v18 = *(_OWORD *)(a4 + 49);
      v35 = *(_OWORD *)(a4 + 33);
      v36 = v18;
      v37[0] = *(_OWORD *)(a4 + 65);
      *(_OWORD *)((char *)v37 + 15) = *((_OWORD *)a4 + 5);
      v19 = *(_OWORD *)(a4 + 17);
      v20 = 1;
      v33 = *(_OWORD *)(a4 + 1);
      v34 = v19;
    }
    else
    {
      v20 = 0;
    }
    *(_QWORD *)&v32 = *((_QWORD *)a4 + 13);
    *(_QWORD *)((char *)&v32 + 5) = *(_QWORD *)(a4 + 109);
  }
  else
  {
    v20 = 0;
    v17 = 0;
  }
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  v21 = *a3;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = v21;
  *(_BYTE *)(v14 + 96) = 0;
  *(_BYTE *)(v14 + 216) = 0;
  if (v16)
  {
    *(_BYTE *)(v14 + 192) = 0;
    if (v20)
    {
      v22 = v36;
      *(_OWORD *)(v14 + 129) = v35;
      *(_OWORD *)(v14 + 145) = v22;
      *(_OWORD *)(v14 + 161) = v37[0];
      *(_OWORD *)(v14 + 176) = *(_OWORD *)((char *)v37 + 15);
      v23 = v34;
      *(_OWORD *)(v14 + 97) = v33;
      *(_BYTE *)(v14 + 96) = v17;
      *(_OWORD *)(v14 + 113) = v23;
      *(_BYTE *)(v14 + 192) = 1;
    }
    *(_QWORD *)(v14 + 200) = v32;
    *(_QWORD *)(v14 + 205) = *(_QWORD *)((char *)&v32 + 5);
    *(_BYTE *)(v14 + 216) = 1;
  }
  *(_BYTE *)(v14 + 224) = 1;
  v24 = v14 + 232;
  v28.i64[1] = v14 + 232;
  *(_QWORD *)&v32 = &v13[232 * v7];
  *((_QWORD *)&v32 + 1) = v32;
  v31 = v32;
  *(_QWORD *)&v33 = a1 + 2;
  *((_QWORD *)&v33 + 1) = &v31;
  *(_QWORD *)&v34 = &v32;
  BYTE8(v34) = 0;
  if (v5 == v6)
  {
    v25 = vdupq_n_s64(v5);
  }
  else
  {
    do
    {
      v5 -= 232;
      sub_223F88160((_BYTE *)(v14 - 232), v5);
      v14 = *((_QWORD *)&v32 + 1) - 232;
      *((_QWORD *)&v32 + 1) -= 232;
    }
    while (v5 != v6);
    v25 = *(int64x2_t *)a1;
    v11 = a1[2];
    v24 = v28.i64[1];
    v15 = v29;
  }
  *a1 = v14;
  a1[1] = v24;
  v28 = v25;
  a1[2] = (uint64_t)v15;
  v29 = (char *)v11;
  __p = (void *)v25.i64[0];
  sub_223F88444(&__p, v25.i64[0]);
  if (__p)
    operator delete(__p);
  return v24;
}

void sub_223F94948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (!a22)
    sub_223F88398(&a19);
  sub_223F8812C(&a10);
  _Unwind_Resume(a1);
}

void sub_223F9496C(void *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  JUMPOUT(0x223F94964);
}

uint64_t sub_223F9497C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(void **)(a1 + 32);
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 8);
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v4);
  }
  v6 = *(void **)(a1 + 8);
  if (v6)
  {
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v6);
  }
  v7 = *(uint64_t **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
  {
    if (*v7)
    {
      sub_223F94A40(v7, *v7);
      operator delete((void *)*v7);
    }
    MEMORY[0x227684CE8](v7, 0x20C40960023A9);
  }
  return a1;
}

_QWORD *sub_223F94A40(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  for (i = result[1]; i != a2; i -= 232)
  {
    if (*(_BYTE *)(i - 8))
    {
      v5 = *(_QWORD *)(i - 160);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      v6 = *(_QWORD *)(i - 176);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      v7 = *(_QWORD *)(i - 192);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
      v8 = *(_QWORD *)(i - 208);
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
      result = *(_QWORD **)(i - 224);
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
    }
  }
  v3[1] = a2;
  return result;
}

uint64_t sub_223F94AFC(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  v10 = a2[15];
  v12 = a2[12];
  v11 = a2[13];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v10;
  *(_OWORD *)(a1 + 192) = v12;
  *(_OWORD *)(a1 + 208) = v11;
  v13 = a2[8];
  v14 = a2[9];
  v15 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v15;
  *(_OWORD *)(a1 + 128) = v13;
  *(_OWORD *)(a1 + 144) = v14;
  *(_DWORD *)(a1 + 256) = *((_DWORD *)a2 + 64);
  if (*(unsigned __int8 *)(a1 + 368) == *((unsigned __int8 *)a2 + 368))
  {
    if (*(_BYTE *)(a1 + 368))
    {
      *(_BYTE *)(a1 + 264) = *((_BYTE *)a2 + 264);
      v16 = a2[18];
      *(_OWORD *)(a1 + 272) = a2[17];
      *(_OWORD *)(a1 + 288) = v16;
      v17 = a2[19];
      v18 = a2[20];
      v19 = a2[22];
      *(_OWORD *)(a1 + 336) = a2[21];
      *(_OWORD *)(a1 + 352) = v19;
      *(_OWORD *)(a1 + 304) = v17;
      *(_OWORD *)(a1 + 320) = v18;
    }
  }
  else if (*(_BYTE *)(a1 + 368))
  {
    *(_BYTE *)(a1 + 368) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 264) = *((_BYTE *)a2 + 264);
    v20 = a2[18];
    *(_OWORD *)(a1 + 272) = a2[17];
    *(_OWORD *)(a1 + 288) = v20;
    v21 = a2[19];
    v22 = a2[20];
    v23 = a2[22];
    *(_OWORD *)(a1 + 336) = a2[21];
    *(_OWORD *)(a1 + 352) = v23;
    *(_OWORD *)(a1 + 304) = v21;
    *(_OWORD *)(a1 + 320) = v22;
    *(_BYTE *)(a1 + 368) = 1;
  }
  *(_QWORD *)(a1 + 376) = *((_QWORD *)a2 + 47);
  *(_QWORD *)(a1 + 384) = *((_QWORD *)a2 + 48);
  *(_QWORD *)(a1 + 392) = *((_QWORD *)a2 + 49);
  *(_QWORD *)(a1 + 400) = *((_QWORD *)a2 + 50);
  *(_QWORD *)(a1 + 408) = *((_QWORD *)a2 + 51);
  *(_QWORD *)(a1 + 416) = *((_QWORD *)a2 + 52);
  v24 = (_QWORD *)a2 + 53;
  v25 = *(void **)(a1 + 424);
  if (v25)
  {
    *(_QWORD *)(a1 + 432) = v25;
    operator delete(v25);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 432) = 0;
    *(_QWORD *)(a1 + 440) = 0;
  }
  v26 = *((_QWORD *)a2 + 54);
  *(_QWORD *)(a1 + 424) = *((_QWORD *)a2 + 53);
  *(_QWORD *)(a1 + 432) = v26;
  *(_QWORD *)(a1 + 440) = *((_QWORD *)a2 + 55);
  *v24 = 0;
  *((_QWORD *)a2 + 54) = 0;
  *((_QWORD *)a2 + 55) = 0;
  v27 = *(void **)(a1 + 448);
  if (v27)
  {
    *(_QWORD *)(a1 + 456) = v27;
    operator delete(v27);
    *(_QWORD *)(a1 + 448) = 0;
    *(_QWORD *)(a1 + 456) = 0;
    *(_QWORD *)(a1 + 464) = 0;
  }
  *(_OWORD *)(a1 + 448) = a2[28];
  *(_QWORD *)(a1 + 464) = *((_QWORD *)a2 + 58);
  *((_QWORD *)a2 + 57) = 0;
  *((_QWORD *)a2 + 58) = 0;
  *((_QWORD *)a2 + 56) = 0;
  *(_QWORD *)(a1 + 472) = *((_QWORD *)a2 + 59);
  v28 = *(void **)(a1 + 480);
  if (v28)
  {
    *(_QWORD *)(a1 + 488) = v28;
    operator delete(v28);
    *(_QWORD *)(a1 + 480) = 0;
    *(_QWORD *)(a1 + 488) = 0;
    *(_QWORD *)(a1 + 496) = 0;
  }
  *(_OWORD *)(a1 + 480) = a2[30];
  *(_QWORD *)(a1 + 496) = *((_QWORD *)a2 + 62);
  *((_QWORD *)a2 + 60) = 0;
  *((_QWORD *)a2 + 61) = 0;
  *((_QWORD *)a2 + 62) = 0;
  return a1;
}

uint64_t sub_223F94CB4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 808))
  {
    v2 = *(void **)(a1 + 784);
    if (v2)
    {
      *(_QWORD *)(a1 + 792) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 752);
    if (v3)
    {
      *(_QWORD *)(a1 + 760) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a1 + 728);
    if (v4)
    {
      *(_QWORD *)(a1 + 736) = v4;
      operator delete(v4);
    }
  }
  if (*(_BYTE *)(a1 + 264))
  {
    v5 = *(std::__shared_weak_count **)(a1 + 240);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        sub_223F9497C(a1 + 168);
        v8 = *(_QWORD *)(a1 + 160);
        if (!v8)
          return a1;
        goto LABEL_14;
      }
    }
  }
  sub_223F9497C(a1 + 168);
  v8 = *(_QWORD *)(a1 + 160);
  if (v8)
LABEL_14:
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  return a1;
}

void sub_223F94D80()
{
  sub_22316DBD4("vector");
}

char ***sub_223F94D94(char ***a1, _OWORD *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *v4;
    v9 = (v6 - *v4) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      sub_223F94D80();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 60)
        sub_223174E94();
      v13 = (char *)operator new(16 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[16 * v9];
    *(_OWORD *)v14 = *a2;
    v7 = v14 + 16;
    if (v6 != v8)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
        v14 -= 16;
        v6 -= 16;
      }
      while (v6 != v8);
      v6 = *v4;
    }
    *v4 = v14;
    v4[1] = v7;
    v4[2] = &v13[16 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_OWORD *)v6 = *a2;
    v7 = v6 + 16;
  }
  v4[1] = v7;
  return a1;
}

uint64_t sub_223F94EA4(uint64_t result)
{
  if (result)
  {
    sub_223F94EE4(*(_QWORD **)(result + 8));
    JUMPOUT(0x227684CE8);
  }
  return result;
}

void sub_223F94EE4(_QWORD *a1)
{
  if (a1)
  {
    sub_223F94EE4(*a1);
    sub_223F94EE4(a1[1]);
    sub_223F94CB4((uint64_t)(a1 + 6));
    operator delete(a1);
  }
}

uint64_t sub_223F94F24(unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v6;
  char v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v12;
  BOOL v13;
  uint64_t *v14;

  v2 = (unsigned __int8 *)(a1 + 1);
  v3 = a1[1];
  if (!v3)
    return 0;
  v6 = (unsigned __int8 *)(a1 + 1);
  do
  {
    v7 = sub_22319835C(v3 + 32, a2);
    if (v7 >= 0)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (v7 >= 0)
      v6 = v3;
    v3 = (unsigned __int8 *)*v8;
  }
  while (*v8);
  if (v6 == v2 || (sub_22319835C(a2, v6 + 32) & 0x80) != 0)
    return 0;
  v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
  if (v9)
  {
    do
    {
      v10 = v9;
      v9 = *(unsigned __int8 **)v9;
    }
    while (v9);
  }
  else
  {
    v12 = v6;
    do
    {
      v10 = (unsigned __int8 *)*((_QWORD *)v12 + 2);
      v13 = *(_QWORD *)v10 == (_QWORD)v12;
      v12 = v10;
    }
    while (!v13);
  }
  if (*a1 == v6)
    *a1 = v10;
  v14 = (uint64_t *)a1[1];
  --a1[2];
  sub_2231AFE60(v14, (uint64_t *)v6);
  sub_223F94CB4((uint64_t)(v6 + 48));
  operator delete(v6);
  return 1;
}

void sub_223F95024(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  float64x2_t v3;
  unsigned __int8 **v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  char v21;
  __int128 v22;
  __int128 v23;
  float v24;
  float32x2_t *v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  int v29;
  int *v30;
  float32x2_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x4_t v36;
  float32x4_t v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  __int128 v47;
  char *v48;
  unint64_t v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t *v57;
  __int128 v58;
  char *v59;
  _OWORD *v60;
  __int128 *v61;
  unint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  char *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  __int128 *v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  void *v107;
  int v108;
  int v109;
  int v110;
  int *v111;
  int *v112;
  int *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  int *v118;
  int *v119;
  uint64_t v120;
  int v121;
  int v122;
  int *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  int *v128;
  uint64_t v129;
  int v130;
  unint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  void *v139;
  float32x4_t v140;
  uint64_t v141;
  uint64_t v142;
  float32x4_t v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  char *v149;
  uint64_t v150;
  char *v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  _QWORD *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  char **v172;
  int v173;
  char v174;
  uint64_t v175;
  unsigned __int8 **v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float32x2_t *v182;
  __int128 v183;
  int64x2_t v184;
  _BYTE v185[49];
  __int128 v186;
  _BYTE v187[31];
  char v188;
  void *v189;
  float32x2_t *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _BYTE v197[32];
  uint64_t v198;
  void *v199;
  int *v200;
  char *v201;
  __int128 __p;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  int v208;
  int v209;
  __int128 v210;
  uint64_t v211;
  __int128 v212;
  uint64_t v213;
  _QWORD **v214;
  _QWORD *v215;
  uint64_t v216;
  float64x2_t v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _OWORD v221[2];
  uint64_t v222;

  v222 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_223F9036C(a1, &v184);
  v175 = v184.i64[1];
  v4 = (unsigned __int8 **)v184.i64[0];
  if (v184.i64[0] == v184.i64[1])
    goto LABEL_238;
  v172 = (char **)a2;
  v171 = a2 + 2;
  while (2)
  {
    v5 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 8);
    if (!v5)
LABEL_241:
      sub_223198218("map::at:  key not found");
    v7 = *v4;
    v6 = (uint64_t)v4[1];
    v8 = **v4;
    v9 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 8);
    while (1)
    {
      v10 = *((unsigned __int8 *)v9 + 32);
      v11 = v8 >= v10;
      if (v8 != v10)
      {
        v12 = **v4;
        goto LABEL_40;
      }
      v12 = v7[1];
      v10 = *((unsigned __int8 *)v9 + 33);
      v11 = v12 >= v10;
      if (v12 == v10)
        break;
LABEL_40:
      if (v11)
      {
LABEL_42:
        if (v10 >= v12)
          goto LABEL_45;
        v9 = (uint64_t *)v9[1];
        if (!v9)
          goto LABEL_241;
      }
      else
      {
LABEL_6:
        v9 = (uint64_t *)*v9;
        if (!v9)
          goto LABEL_241;
      }
    }
    v13 = v7[2];
    v14 = *((unsigned __int8 *)v9 + 34);
    if (v13 != v14)
      goto LABEL_23;
    v13 = v7[3];
    v14 = *((unsigned __int8 *)v9 + 35);
    if (v13 != v14)
      goto LABEL_23;
    v13 = v7[4];
    v14 = *((unsigned __int8 *)v9 + 36);
    if (v13 != v14)
      goto LABEL_23;
    v13 = v7[5];
    v14 = *((unsigned __int8 *)v9 + 37);
    if (v13 != v14)
      goto LABEL_23;
    v13 = v7[6];
    v14 = *((unsigned __int8 *)v9 + 38);
    if (v13 != v14)
      goto LABEL_23;
    v13 = v7[7];
    v14 = *((unsigned __int8 *)v9 + 39);
    if (v13 != v14)
      goto LABEL_23;
    v13 = v7[8];
    v14 = *((unsigned __int8 *)v9 + 40);
    if (v13 != v14)
      goto LABEL_23;
    v13 = v7[9];
    v14 = *((unsigned __int8 *)v9 + 41);
    if (v13 != v14)
      goto LABEL_23;
    v13 = v7[10];
    v14 = *((unsigned __int8 *)v9 + 42);
    if (v13 != v14)
      goto LABEL_23;
    v13 = v7[11];
    v14 = *((unsigned __int8 *)v9 + 43);
    if (v13 != v14)
      goto LABEL_23;
    v13 = v7[12];
    v14 = *((unsigned __int8 *)v9 + 44);
    if (v13 != v14
      || (v13 = v7[13], v14 = *((unsigned __int8 *)v9 + 45), v13 != v14)
      || (v13 = v7[14], v14 = *((unsigned __int8 *)v9 + 46), v13 != v14)
      || (v13 = v7[15], v14 = *((unsigned __int8 *)v9 + 47), v13 != v14))
    {
LABEL_23:
      if (v13 < v14)
        goto LABEL_6;
    }
    v10 = *((unsigned __int8 *)v9 + 34);
    v12 = v7[2];
    if (v10 != v12)
      goto LABEL_42;
    v10 = *((unsigned __int8 *)v9 + 35);
    v12 = v7[3];
    if (v10 != v12)
      goto LABEL_42;
    v10 = *((unsigned __int8 *)v9 + 36);
    v12 = v7[4];
    if (v10 != v12)
      goto LABEL_42;
    v10 = *((unsigned __int8 *)v9 + 37);
    v12 = v7[5];
    if (v10 != v12)
      goto LABEL_42;
    v10 = *((unsigned __int8 *)v9 + 38);
    v12 = v7[6];
    if (v10 != v12)
      goto LABEL_42;
    v10 = *((unsigned __int8 *)v9 + 39);
    v12 = v7[7];
    if (v10 != v12)
      goto LABEL_42;
    v10 = *((unsigned __int8 *)v9 + 40);
    v12 = v7[8];
    if (v10 != v12)
      goto LABEL_42;
    v10 = *((unsigned __int8 *)v9 + 41);
    v12 = v7[9];
    if (v10 != v12)
      goto LABEL_42;
    v10 = *((unsigned __int8 *)v9 + 42);
    v12 = v7[10];
    if (v10 != v12)
      goto LABEL_42;
    v10 = *((unsigned __int8 *)v9 + 43);
    v12 = v7[11];
    if (v10 != v12)
      goto LABEL_42;
    v10 = *((unsigned __int8 *)v9 + 44);
    v12 = v7[12];
    if (v10 != v12)
      goto LABEL_42;
    v10 = *((unsigned __int8 *)v9 + 45);
    v12 = v7[13];
    if (v10 != v12)
      goto LABEL_42;
    v10 = *((unsigned __int8 *)v9 + 46);
    v12 = v7[14];
    if (v10 != v12)
      goto LABEL_42;
    v10 = *((unsigned __int8 *)v9 + 47);
    v12 = v7[15];
    if (v10 != v12)
      goto LABEL_42;
LABEL_45:
    if (!*((_BYTE *)v9 + 856))
      goto LABEL_3;
    while (2)
    {
      while (2)
      {
        v15 = *((unsigned __int8 *)v5 + 32);
        v16 = v8 >= v15;
        if (v8 != v15)
        {
          v17 = **v4;
LABEL_81:
          if (!v16)
            goto LABEL_47;
LABEL_83:
          if (v15 >= v17)
            goto LABEL_86;
          v5 = (uint64_t *)v5[1];
          if (!v5)
LABEL_242:
            sub_223198218("map::at:  key not found");
          continue;
        }
        break;
      }
      v17 = v7[1];
      v15 = *((unsigned __int8 *)v5 + 33);
      v16 = v17 >= v15;
      if (v17 != v15)
        goto LABEL_81;
      v18 = v7[2];
      v19 = *((unsigned __int8 *)v5 + 34);
      if (v18 != v19)
        goto LABEL_64;
      v18 = v7[3];
      v19 = *((unsigned __int8 *)v5 + 35);
      if (v18 != v19)
        goto LABEL_64;
      v18 = v7[4];
      v19 = *((unsigned __int8 *)v5 + 36);
      if (v18 != v19)
        goto LABEL_64;
      v18 = v7[5];
      v19 = *((unsigned __int8 *)v5 + 37);
      if (v18 != v19)
        goto LABEL_64;
      v18 = v7[6];
      v19 = *((unsigned __int8 *)v5 + 38);
      if (v18 != v19)
        goto LABEL_64;
      v18 = v7[7];
      v19 = *((unsigned __int8 *)v5 + 39);
      if (v18 != v19)
        goto LABEL_64;
      v18 = v7[8];
      v19 = *((unsigned __int8 *)v5 + 40);
      if (v18 != v19)
        goto LABEL_64;
      v18 = v7[9];
      v19 = *((unsigned __int8 *)v5 + 41);
      if (v18 != v19)
        goto LABEL_64;
      v18 = v7[10];
      v19 = *((unsigned __int8 *)v5 + 42);
      if (v18 != v19)
        goto LABEL_64;
      v18 = v7[11];
      v19 = *((unsigned __int8 *)v5 + 43);
      if (v18 != v19)
        goto LABEL_64;
      v18 = v7[12];
      v19 = *((unsigned __int8 *)v5 + 44);
      if (v18 != v19
        || (v18 = v7[13], v19 = *((unsigned __int8 *)v5 + 45), v18 != v19)
        || (v18 = v7[14], v19 = *((unsigned __int8 *)v5 + 46), v18 != v19)
        || (v18 = v7[15], v19 = *((unsigned __int8 *)v5 + 47), v18 != v19))
      {
LABEL_64:
        if (v18 < v19)
        {
LABEL_47:
          v5 = (uint64_t *)*v5;
          if (!v5)
            goto LABEL_242;
          continue;
        }
      }
      break;
    }
    v15 = *((unsigned __int8 *)v5 + 34);
    v17 = v7[2];
    if (v15 != v17)
      goto LABEL_83;
    v15 = *((unsigned __int8 *)v5 + 35);
    v17 = v7[3];
    if (v15 != v17)
      goto LABEL_83;
    v15 = *((unsigned __int8 *)v5 + 36);
    v17 = v7[4];
    if (v15 != v17)
      goto LABEL_83;
    v15 = *((unsigned __int8 *)v5 + 37);
    v17 = v7[5];
    if (v15 != v17)
      goto LABEL_83;
    v15 = *((unsigned __int8 *)v5 + 38);
    v17 = v7[6];
    if (v15 != v17)
      goto LABEL_83;
    v15 = *((unsigned __int8 *)v5 + 39);
    v17 = v7[7];
    if (v15 != v17)
      goto LABEL_83;
    v15 = *((unsigned __int8 *)v5 + 40);
    v17 = v7[8];
    if (v15 != v17)
      goto LABEL_83;
    v15 = *((unsigned __int8 *)v5 + 41);
    v17 = v7[9];
    if (v15 != v17)
      goto LABEL_83;
    v15 = *((unsigned __int8 *)v5 + 42);
    v17 = v7[10];
    if (v15 != v17)
      goto LABEL_83;
    v15 = *((unsigned __int8 *)v5 + 43);
    v17 = v7[11];
    if (v15 != v17)
      goto LABEL_83;
    v15 = *((unsigned __int8 *)v5 + 44);
    v17 = v7[12];
    if (v15 != v17)
      goto LABEL_83;
    v15 = *((unsigned __int8 *)v5 + 45);
    v17 = v7[13];
    if (v15 != v17)
      goto LABEL_83;
    v15 = *((unsigned __int8 *)v5 + 46);
    v17 = v7[14];
    if (v15 != v17)
      goto LABEL_83;
    v15 = *((unsigned __int8 *)v5 + 47);
    v17 = v7[15];
    if (v15 != v17)
      goto LABEL_83;
LABEL_86:
    if (!*((_BYTE *)v5 + 856))
      sub_22324A974();
    v20 = *((unsigned __int8 *)v5 + 720);
    if (*((_BYTE *)v5 + 720))
    {
      v21 = *((_BYTE *)v5 + 624);
      *(_OWORD *)((char *)v221 + 15) = *((_OWORD *)v5 + 44);
      v22 = *(_OWORD *)((char *)v5 + 673);
      v219 = *(_OWORD *)((char *)v5 + 657);
      v220 = v22;
      v221[0] = *(_OWORD *)((char *)v5 + 689);
      v3 = *(float64x2_t *)((char *)v5 + 625);
      v23 = *(_OWORD *)((char *)v5 + 641);
      v217 = v3;
      v218 = v23;
    }
    else
    {
      v21 = 0;
    }
    v3.f64[0] = *(float64_t *)(v6 + 112);
    v180 = v3;
    v3.f64[0] = *(float64_t *)(v6 + 80);
    v181 = v3;
    v178 = *(float64x2_t *)(v6 + 96);
    v179 = *(float64x2_t *)(v6 + 64);
    v24 = *(float *)(v6 + 288);
    sub_223FA6A08(v6, 0, 0, 0, 0, &v189);
    v25 = (float32x2_t *)v189;
    __p = 0uLL;
    v203 = 0;
    v182 = v190;
    v26 = (char *)v190 - (_BYTE *)v189;
    v177 = v4;
    v174 = v21;
    if (v190 != v189)
    {
      if (v26 >= 0x7FFFFFFFFFFFFFFDLL)
        sub_22316E078();
      v173 = v20;
      *(_QWORD *)&__p = operator new(2 * v26);
      *((_QWORD *)&__p + 1) = __p;
      v203 = __p + 8 * ((uint64_t)v26 >> 2);
      v27 = v26 >> 3;
      v28 = (char *)operator new(4 * ((v26 >> 3) + (v26 >> 2)));
      v29 = 0;
      v199 = v28;
      v200 = (int *)v28;
      v201 = &v28[12 * v27];
      while (1)
      {
        v31 = v25[1];
        *(float32x2_t *)v32.f32 = vmul_f32(vadd_f32(*v25, v31), (float32x2_t)0x3F0000003F000000);
        *(float32x2_t *)v33.f32 = vsub_f32(*(float32x2_t *)v32.f32, v31);
        v34 = vadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v33.f32);
        v35 = vsub_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v33.f32);
        v32.i64[1] = v32.i64[0];
        v33.i64[1] = v33.i64[0];
        v36 = vsubq_f32(v32, v33);
        v37 = vaddq_f32(v32, v33);
        v37.i32[0] = v36.i32[0];
        v37.i32[3] = v36.i32[3];
        *(float32x4_t *)&v197[8] = v37;
        *(float32x2_t *)v197 = v34;
        *(float32x2_t *)&v197[24] = v35;
        v38 = *((_QWORD *)&__p + 1);
        v39 = (char *)__p;
        v40 = *((_QWORD *)&__p + 1) - __p;
        v41 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3;
        v42 = (char *)(__p + ((*((_QWORD *)&__p + 1) - __p) & 0xFFFFFFFFFFFFFFF8));
        if (v203 - *((_QWORD *)&__p + 1) < 32)
        {
          v43 = v41 + 4;
          if ((unint64_t)(v41 + 4) >> 61)
            sub_22316E078();
          v44 = v203 - __p;
          if ((v203 - (uint64_t)__p) >> 2 > v43)
            v43 = v44 >> 2;
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
            v45 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v45 = v43;
          if (v45)
          {
            if (v45 >> 61)
              sub_223174E94();
            v46 = (char *)operator new(8 * v45);
            v47 = *(_OWORD *)&v197[16];
            v48 = &v46[8 * v41];
            *(_OWORD *)v48 = *(_OWORD *)v197;
            *((_OWORD *)v48 + 1) = v47;
            v49 = v40 - 8;
            if (v40 < 8)
            {
LABEL_105:
              v50 = v48;
              v51 = v48 + 32;
              if ((char *)v38 == v42)
              {
LABEL_156:
                v107 = (void *)__p;
                *(_QWORD *)&__p = v50;
                *((_QWORD *)&__p + 1) = v51;
                v203 = (uint64_t)&v46[8 * v45];
                if (v107)
                  operator delete(v107);
                goto LABEL_158;
              }
LABEL_150:
              v98 = &v39[v40 & 0xFFFFFFFFFFFFFFF8];
              v99 = v38 - (_QWORD)v98 - 8;
              if (v99 < 0x58)
                goto LABEL_255;
              if ((unint64_t)(&v46[v40 & 0xFFFFFFFFFFFFFFF8] - v98 + 32) < 0x20)
                goto LABEL_255;
              v100 = (v99 >> 3) + 1;
              v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
              v42 += v101;
              v51 = (_QWORD *)((char *)v51 + v101);
              v102 = &v46[8 * v41 + 48];
              v103 = &v39[8 * v41 + 16];
              v104 = v100 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v105 = *(_OWORD *)v103;
                *((_OWORD *)v102 - 1) = *((_OWORD *)v103 - 1);
                *(_OWORD *)v102 = v105;
                v102 += 32;
                v103 += 32;
                v104 -= 4;
              }
              while (v104);
              if (v100 != (v100 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_255:
                do
                {
                  v106 = *(_QWORD *)v42;
                  v42 += 8;
                  *v51++ = v106;
                }
                while (v42 != (char *)v38);
              }
              goto LABEL_156;
            }
          }
          else
          {
            v46 = 0;
            v58 = *(_OWORD *)&v197[16];
            v48 = (char *)(8 * v41);
            *(_OWORD *)v48 = *(_OWORD *)v197;
            *((_OWORD *)v48 + 1) = v58;
            v49 = v40 - 8;
            if (v40 < 8)
              goto LABEL_105;
          }
          if (v49 < 0x68)
          {
            v59 = v42;
            v50 = v48;
            goto LABEL_148;
          }
          v59 = v42;
          v50 = v48;
          if ((unint64_t)(&v39[v40 & 0xFFFFFFFFFFFFFFF8] - &v46[v40 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
            goto LABEL_256;
          v91 = (v49 >> 3) + 1;
          v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
          v59 = &v42[-v92];
          v50 = &v48[-v92];
          v93 = &v46[8 * v41 - 16];
          v94 = &v39[8 * v41 - 16];
          v95 = v91 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v96 = *(_OWORD *)v94;
            *((_OWORD *)v93 - 1) = *((_OWORD *)v94 - 1);
            *(_OWORD *)v93 = v96;
            v93 -= 32;
            v94 -= 32;
            v95 -= 4;
          }
          while (v95);
          if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_256:
            do
            {
LABEL_148:
              v97 = *((_QWORD *)v59 - 1);
              v59 -= 8;
              *((_QWORD *)v50 - 1) = v97;
              v50 -= 8;
            }
            while (v59 != v39);
          }
          v38 = *((_QWORD *)&__p + 1);
          v51 = v48 + 32;
          if (*((char **)&__p + 1) == v42)
            goto LABEL_156;
          goto LABEL_150;
        }
        v52 = *((_QWORD *)&__p + 1) - (_QWORD)v42;
        if ((uint64_t)(*((_QWORD *)&__p + 1) - (_QWORD)v42) > 31)
        {
          v56 = (char *)*((_QWORD *)&__p + 1);
          v57 = &v198;
          goto LABEL_121;
        }
        v53 = v52 >> 3;
        v54 = 4 - (v52 >> 3);
        if (v54 >= 8)
        {
          v55 = v52 >> 3;
          v56 = (char *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1) - (_QWORD)v197 - (v52 & 0xFFFFFFFFFFFFFFF8) >= 0x20)
          {
            v55 = v53 + (v54 & 0xFFFFFFFFFFFFFFFCLL);
            v56 = (char *)(*((_QWORD *)&__p + 1) + 8 * (v54 & 0xFFFFFFFFFFFFFFFCLL));
            v60 = (_OWORD *)(*((_QWORD *)&__p + 1) + 16);
            v61 = (__int128 *)&v197[8 * v53 + 16];
            v62 = v54 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v63 = *v61;
              *(v60 - 1) = *(v61 - 1);
              *v60 = v63;
              v60 += 2;
              v61 += 2;
              v62 -= 4;
            }
            while (v62);
            if (v54 == (v54 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_119;
          }
        }
        else
        {
          v55 = v52 >> 3;
          v56 = (char *)*((_QWORD *)&__p + 1);
        }
        do
        {
          *(_QWORD *)v56 = *(_QWORD *)&v197[8 * v55];
          v56 += 8;
          ++v55;
        }
        while (v55 != 4);
LABEL_119:
        *((_QWORD *)&__p + 1) = v56;
        if (v52 < 1)
          goto LABEL_158;
        v57 = (uint64_t *)&v197[8 * v53];
LABEL_121:
        v64 = v56 - (v42 + 32);
        v65 = v64 >> 3;
        v66 = v56 - 32;
        v67 = v56;
        if ((unint64_t)(v56 - 32) < v38)
        {
          v68 = (v40 & 0xFFFFFFFFFFFFFFF8) + v64;
          v69 = (unint64_t)&v39[v68 + 8];
          if (v38 > v69)
            v69 = v38;
          v70 = v69 + ~(unint64_t)v39 - v68;
          v71 = v56 - 32;
          v67 = v56;
          if (v70 < 0x58)
            goto LABEL_257;
          v71 = v56 - 32;
          v67 = v56;
          if ((unint64_t)(v42 + 32 - &v39[v40 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
            goto LABEL_257;
          v72 = (v70 >> 3) + 1;
          v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
          v71 = &v66[v73];
          v67 = &v56[v73];
          v74 = v56 + 16;
          v75 = &v39[8 * v65 + 16 + 8 * v41];
          v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v77 = *(_OWORD *)v75;
            *(v74 - 1) = *((_OWORD *)v75 - 1);
            *v74 = v77;
            v74 += 2;
            v75 += 32;
            v76 -= 4;
          }
          while (v76);
          if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_257:
            do
            {
              v78 = *(_QWORD *)v71;
              v71 += 8;
              *(_QWORD *)v67 = v78;
              v67 += 8;
            }
            while ((unint64_t)v71 < v38);
          }
        }
        *((_QWORD *)&__p + 1) = v67;
        if (v56 == v42 + 32)
          goto LABEL_136;
        if ((unint64_t)(v64 - 8) < 0x78
          || (unint64_t)(&v39[v40 & 0xFFFFFFFFFFFFFFF8] - (v42 + 32)) < 0x20)
        {
          v79 = v56;
LABEL_134:
          v80 = v79 - 8;
          do
          {
            v81 = *((_QWORD *)v66 - 1);
            v66 -= 8;
            *(_QWORD *)v80 = v81;
            v80 -= 8;
          }
          while (v66 != v42);
          goto LABEL_136;
        }
        v131 = ((unint64_t)(v64 - 8) >> 3) + 1;
        v132 = 8 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
        v79 = &v56[-v132];
        v66 -= v132;
        v133 = &v39[8 * v65 - 16 + 8 * v41];
        v134 = v56 - 16;
        v135 = v131 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v136 = *(_OWORD *)v133;
          *((_OWORD *)v134 - 1) = *((_OWORD *)v133 - 1);
          *(_OWORD *)v134 = v136;
          v133 -= 32;
          v134 -= 32;
          v135 -= 4;
        }
        while (v135);
        if (v131 != (v131 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_134;
LABEL_136:
        if (v57 != (uint64_t *)v197)
        {
          v82 = (uint64_t *)v197;
          v83 = (char *)v57 - v197 - 8;
          if (v83 < 0x18)
            goto LABEL_258;
          if ((unint64_t)(v42 - v197) < 0x20)
            goto LABEL_258;
          v84 = (v83 >> 3) + 1;
          v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
          v42 += v85;
          v82 = (uint64_t *)&v197[v85];
          v86 = &v39[8 * v41 + 16];
          v87 = v84 & 0x3FFFFFFFFFFFFFFCLL;
          v88 = (__int128 *)&v197[16];
          do
          {
            v89 = *v88;
            *((_OWORD *)v86 - 1) = *(v88 - 1);
            *(_OWORD *)v86 = v89;
            v88 += 2;
            v86 += 32;
            v87 -= 4;
          }
          while (v87);
          if (v84 != (v84 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_258:
            do
            {
              v90 = *v82++;
              *(_QWORD *)v42 = v90;
              v42 += 8;
            }
            while (v82 != v57);
          }
        }
LABEL_158:
        v108 = 4 * v29;
        v109 = (4 * v29) | 1;
        v110 = (4 * v29) | 2;
        v111 = v200;
        if (v200 >= (int *)v201)
        {
          v113 = (int *)v199;
          v114 = 0xAAAAAAAAAAAAAAABLL * (((char *)v200 - (_BYTE *)v199) >> 2);
          v115 = v114 + 1;
          if (v114 + 1 > 0x1555555555555555)
            sub_22316E078();
          if (0x5555555555555556 * ((v201 - (_BYTE *)v199) >> 2) > v115)
            v115 = 0x5555555555555556 * ((v201 - (_BYTE *)v199) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v201 - (_BYTE *)v199) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v116 = 0x1555555555555555;
          else
            v116 = v115;
          if (v116)
          {
            if (v116 > 0x1555555555555555)
              sub_223174E94();
            v117 = (char *)operator new(12 * v116);
          }
          else
          {
            v117 = 0;
          }
          v118 = (int *)&v117[12 * v114];
          *v118 = v108;
          v118[1] = v109;
          v118[2] = v110;
          v119 = v118;
          if (v111 != v113)
          {
            do
            {
              v120 = *(_QWORD *)(v111 - 3);
              v111 -= 3;
              v121 = v111[2];
              *(_QWORD *)(v119 - 3) = v120;
              v119 -= 3;
              v119[2] = v121;
            }
            while (v111 != v113);
            v111 = (int *)v199;
          }
          v112 = v118 + 3;
          v199 = v119;
          v200 = v118 + 3;
          v201 = &v117[12 * v116];
          if (v111)
            operator delete(v111);
        }
        else
        {
          *v200 = v108;
          v111[1] = v109;
          v112 = v111 + 3;
          v111[2] = v110;
        }
        v200 = v112;
        v122 = v108 | 3;
        if (v112 < (int *)v201)
        {
          *v112 = v109;
          v112[1] = v110;
          v30 = v112 + 3;
          v112[2] = v122;
        }
        else
        {
          v123 = (int *)v199;
          v124 = 0xAAAAAAAAAAAAAAABLL * (((char *)v112 - (_BYTE *)v199) >> 2);
          v125 = v124 + 1;
          if (v124 + 1 > 0x1555555555555555)
            sub_22316E078();
          if (0x5555555555555556 * ((v201 - (_BYTE *)v199) >> 2) > v125)
            v125 = 0x5555555555555556 * ((v201 - (_BYTE *)v199) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v201 - (_BYTE *)v199) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v126 = 0x1555555555555555;
          else
            v126 = v125;
          if (v126)
          {
            if (v126 > 0x1555555555555555)
              sub_223174E94();
            v127 = (char *)operator new(12 * v126);
          }
          else
          {
            v127 = 0;
          }
          v128 = (int *)&v127[12 * v124];
          *v128 = v109;
          v128[1] = v110;
          v128[2] = v122;
          v30 = v128 + 3;
          if (v112 == v123)
          {
            v199 = &v127[12 * v124];
            v200 = v128 + 3;
            v201 = &v127[12 * v126];
          }
          else
          {
            do
            {
              v129 = *(_QWORD *)(v112 - 3);
              v112 -= 3;
              v130 = v112[2];
              *(_QWORD *)(v128 - 3) = v129;
              v128 -= 3;
              v128[2] = v130;
            }
            while (v112 != v123);
            v112 = (int *)v199;
            v199 = v128;
            v200 = v30;
            v201 = &v127[12 * v126];
            if (!v112)
              goto LABEL_94;
          }
          operator delete(v112);
        }
LABEL_94:
        v200 = v30;
        v25 += 2;
        ++v29;
        if (v25 == v182)
        {
          v137 = __p;
          v138 = v203;
          v139 = v199;
          v26 = (unint64_t)v201;
          v25 = (float32x2_t *)v189;
          v20 = v173;
          if (v189)
            goto LABEL_197;
          goto LABEL_198;
        }
      }
    }
    v30 = 0;
    v139 = 0;
    v138 = 0;
    v137 = 0uLL;
    if (v189)
    {
LABEL_197:
      v190 = v25;
      v183 = v137;
      operator delete(v25);
      v137 = v183;
    }
LABEL_198:
    v140 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v178), v180);
    v141 = *(_QWORD *)v7;
    v142 = *((_QWORD *)v7 + 1);
    *(_DWORD *)&v197[8] = v140.i32[2];
    v143 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v179), v181);
    *(_QWORD *)v197 = v140.i64[0];
    *(_DWORD *)&v197[20] = v143.i32[2];
    *(_QWORD *)&v197[12] = v143.i64[0];
    __p = v137;
    v203 = v138;
    v192 = 0;
    v193 = 0;
    v191 = 0;
    v199 = v139;
    v200 = v30;
    v201 = (char *)v26;
    v195 = 0;
    v196 = 0;
    v194 = 0;
    v185[0] = 0;
    v188 = 0;
    if (v20)
    {
      v185[0] = v174;
      *(_OWORD *)&v185[33] = v219;
      v186 = v220;
      *(_OWORD *)v187 = v221[0];
      *(_OWORD *)&v187[15] = *(_OWORD *)((char *)v221 + 15);
      *(float64x2_t *)&v185[1] = v217;
      *(_OWORD *)&v185[17] = v218;
      v188 = 1;
    }
    sub_223FBB6C0((uint64_t)&v204, v141, v142, (uint64_t *)v197, (uint64_t)&__p, (uint64_t)&v199, (uint64_t)v185, v24);
    if (v199)
      operator delete(v199);
    if ((_QWORD)__p)
      operator delete((void *)__p);
    v145 = v172[1];
    v144 = (unint64_t)v172[2];
    if ((unint64_t)v145 >= v144)
    {
      v151 = *v172;
      v152 = 0xEEEEEEEEEEEEEEEFLL * ((v145 - *v172) >> 3);
      v153 = v152 + 1;
      if (v152 + 1 > 0x222222222222222)
        sub_22316E078();
      v154 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v144 - (_QWORD)v151) >> 3);
      if (2 * v154 > v153)
        v153 = 2 * v154;
      if (v154 >= 0x111111111111111)
        v155 = 0x222222222222222;
      else
        v155 = v153;
      *(_QWORD *)&v185[32] = v171;
      if (v155 > 0x222222222222222)
        sub_223174E94();
      v156 = (char *)operator new(120 * v155);
      v157 = &v156[120 * v152];
      *(_QWORD *)v185 = v156;
      *(_QWORD *)&v185[8] = v157;
      v158 = &v156[120 * v155];
      *(_QWORD *)&v185[16] = v157;
      *(_QWORD *)&v185[24] = v158;
      *(_OWORD *)v157 = v204;
      *((_QWORD *)v157 + 2) = v205;
      *((_DWORD *)v157 + 6) = v206;
      *(_QWORD *)(v157 + 28) = v207;
      *((_DWORD *)v157 + 9) = v208;
      *((_DWORD *)v157 + 10) = v209;
      *((_QWORD *)v157 + 7) = 0;
      *((_QWORD *)v157 + 8) = 0;
      *((_OWORD *)v157 + 3) = v210;
      v159 = v213;
      *((_QWORD *)v157 + 8) = v211;
      v211 = 0;
      v210 = 0uLL;
      *(_OWORD *)(v157 + 72) = v212;
      *((_QWORD *)v157 + 11) = v159;
      *((_QWORD *)&v212 + 1) = 0;
      v213 = 0;
      v160 = v215;
      *((_QWORD *)v157 + 12) = v214;
      *(_QWORD *)&v212 = 0;
      *((_QWORD *)v157 + 13) = v160;
      v161 = v157 + 104;
      v162 = v216;
      *((_QWORD *)v157 + 14) = v216;
      if (v162)
      {
        v160[2] = v161;
        v214 = &v215;
        v215 = 0;
        v216 = 0;
        v151 = *v172;
        v145 = v172[1];
        v163 = v157 + 120;
        *(_QWORD *)&v185[16] = v157 + 120;
        if (v145 != v151)
        {
LABEL_216:
          v164 = 0;
          do
          {
            sub_223341808((uint64_t)&v157[v164 - 120], (uint64_t)&v145[v164 - 120]);
            v164 -= 120;
          }
          while (&v145[v164] != v151);
          v151 = *v172;
          v165 = v172[1];
          *v172 = &v157[v164];
          v166 = *(char **)&v185[16];
          *(_OWORD *)(v172 + 1) = *(_OWORD *)&v185[16];
          v163 = v166;
          if (v165 != v151)
          {
            v167 = (uint64_t)(v165 - 24);
            do
            {
              sub_223198030(v167, *(_QWORD **)(v167 + 8));
              v169 = *(void **)(v167 - 24);
              if (v169)
              {
                *(_QWORD *)(v167 - 16) = v169;
                operator delete(v169);
              }
              v170 = *(void **)(v167 - 48);
              if (v170)
              {
                *(_QWORD *)(v167 - 40) = v170;
                operator delete(v170);
              }
              v168 = (char *)(v167 - 96);
              v167 -= 120;
            }
            while (v168 != v151);
          }
          goto LABEL_231;
        }
      }
      else
      {
        *((_QWORD *)v157 + 12) = v161;
        v163 = v157 + 120;
        *(_QWORD *)&v185[16] = v157 + 120;
        if (v145 != v151)
          goto LABEL_216;
      }
      *v172 = v157;
      v172[1] = v163;
      v172[2] = v158;
LABEL_231:
      if (v151)
        operator delete(v151);
      goto LABEL_233;
    }
    *(_OWORD *)v145 = v204;
    v146 = v205;
    *((_DWORD *)v145 + 6) = v206;
    *((_QWORD *)v145 + 2) = v146;
    v147 = v207;
    *((_DWORD *)v145 + 9) = v208;
    *(_QWORD *)(v145 + 28) = v147;
    *((_DWORD *)v145 + 10) = v209;
    *((_QWORD *)v145 + 7) = 0;
    *((_QWORD *)v145 + 8) = 0;
    *((_QWORD *)v145 + 6) = 0;
    *((_OWORD *)v145 + 3) = v210;
    *((_QWORD *)v145 + 8) = v211;
    *((_QWORD *)v145 + 9) = 0;
    v210 = 0uLL;
    v211 = 0;
    *((_QWORD *)v145 + 10) = 0;
    *((_QWORD *)v145 + 11) = 0;
    *(_OWORD *)(v145 + 72) = v212;
    *((_QWORD *)v145 + 11) = v213;
    v212 = 0uLL;
    v213 = 0;
    *((_QWORD *)v145 + 12) = v214;
    v148 = v215;
    *((_QWORD *)v145 + 13) = v215;
    v149 = v145 + 104;
    v150 = v216;
    *((_QWORD *)v145 + 14) = v216;
    if (v150)
    {
      v148[2] = v149;
      v214 = &v215;
      v215 = 0;
      v216 = 0;
    }
    else
    {
      *((_QWORD *)v145 + 12) = v149;
    }
    v163 = v145 + 120;
LABEL_233:
    v172[1] = v163;
    sub_223198030((uint64_t)&v214, v215);
    if ((_QWORD)v212)
    {
      *((_QWORD *)&v212 + 1) = v212;
      operator delete((void *)v212);
    }
    v4 = v177;
    if ((_QWORD)v210)
    {
      *((_QWORD *)&v210 + 1) = v210;
      operator delete((void *)v210);
    }
LABEL_3:
    v4 += 2;
    if (v4 != (unsigned __int8 **)v175)
      continue;
    break;
  }
  v4 = (unsigned __int8 **)v184.i64[0];
LABEL_238:
  if (v4)
    operator delete(v4);
}

void sub_223F96248(_Unwind_Exception *a1)
{
  void **v1;

  sub_22333DD68(v1);
  _Unwind_Resume(a1);
}

void sub_223F9625C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  void **v72;

  sub_223F96408((uint64_t)&a72);
  if (!__p)
  {
    sub_22333DD68(v72);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_22333DD68(v72);
  _Unwind_Resume(a1);
}

uint64_t sub_223F96408(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_223198030(a1 + 96, *(_QWORD **)(a1 + 104));
  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_223F96454(uint64_t **a1@<X0>, int *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float64x2_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  float *v31;
  int8x16_t v32;
  unint64_t v33;
  int8x16_t v34;
  unint64_t v35;
  int8x16_t v36;
  unint64_t v37;
  int8x16_t v38;
  unint64_t v39;
  int8x16_t v40;
  double v41;
  unsigned int v42;
  float *v43;
  float *v44;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  void *v49;
  uint64_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  unint64_t v54;
  unint64_t v55;
  float64x2_t v56;
  float64x2_t v57;
  unint64_t v58;
  int8x16_t v59;
  unint64_t v60;
  float64x2_t v61;
  float64x2_t v62;
  int8x16_t v63;
  unint64_t v64;
  int8x16_t v65;
  unint64_t v66;
  __int128 v67;
  char *v68;
  __int128 v69;
  int v70;
  int v71;
  uint64_t v72;
  float v73;
  double v79;
  double v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  float32x4_t v86;
  __int128 v87;
  __int128 v88;
  int8x16_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  int v93;
  uint64_t *v94;
  uint64_t **v95;
  uint64_t **v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  std::__shared_weak_count *v117;
  unint64_t *p_shared_owners;
  unint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  void *v128;
  void *v129;
  unsigned __int8 v130;
  int v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  const char *v135;
  size_t v136;
  uint64_t *v137;
  uint64_t *v138;
  unsigned __int8 v139;
  const char *v140;
  size_t v141;
  void **v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  void **v146;
  NSObject *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  size_t v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const char *v162;
  float64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  void *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  float64_t v190;
  float64_t v191;
  uint64_t v192;
  float64_t v193;
  float64_t v194;
  float64_t v195;
  float64_t v196;
  float64_t v197;
  float64_t v198;
  float64_t v199;
  float64_t v200;
  float64_t v201;
  float64_t v202;
  uint64_t v203;
  const char *v204;
  uint64_t *v205;
  void *v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  int8x16_t v211;
  int8x16_t v212;
  float32x4_t v213;
  __int128 v214;
  __int128 v215;
  int v216;
  __int128 __p;
  char *v218;
  void *v219;
  char *v220;
  char *v221;
  unsigned __int8 v222;
  char v223;
  uint64_t **v224;
  uint64_t *v225;
  size_t v226;
  _DWORD v227[3];
  _DWORD v228[2];
  int v229;
  float64x2_t v230;
  uint64_t v231;
  float64x2_t v232;
  uint64_t v233;
  __int128 v234;
  char *v235;
  void *object[6];
  int8x16_t v237;
  int8x16_t v238;
  float32x4_t v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  int v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  uint64_t v250;
  char v251;
  __int128 v252;
  __int128 v253;
  unsigned __int8 v254;
  uint64_t v255;
  int v256;
  __int128 v257;
  uint64_t v258;

  v258 = *MEMORY[0x24BDAC8D0];
  v228[0] = a2[1];
  v228[1] = v228[0];
  v229 = *a2;
  v227[0] = 0;
  v227[1] = v229;
  v227[2] = 0;
  v226 = 0;
  v225 = 0;
  v224 = &v225;
  v3 = *a1;
  v205 = a1[1];
  if (*a1 != v205)
  {
    while (1)
    {
      v4 = 0xAAAAAAAAAAAAAAABLL * ((v3[10] - v3[9]) >> 2);
      v235 = 0;
      v234 = 0uLL;
      sub_2236ADBC8((uint64_t)&v234, v4);
      v9 = v3[9];
      v8 = (char *)v3[10];
      while ((char *)v9 != v8)
      {
        v11 = v3[6];
        v12 = *(_QWORD *)(v11 + 8 * *(_QWORD *)v9);
        v13 = *(_QWORD *)(v11 + ((*(_QWORD *)v9 >> 29) & 0x7FFFFFFF8));
        v14 = *(_QWORD *)(v11 + 8 * *(unsigned int *)(v9 + 8));
        v15 = operator new(0x18uLL);
        v16 = v15;
        v17 = (unint64_t)(v15 + 3);
        *v15 = v12;
        v15[1] = v13;
        v15[2] = v14;
        v18 = (_QWORD *)*((_QWORD *)&v234 + 1);
        if (*((_QWORD *)&v234 + 1) < (unint64_t)v235)
        {
          **((_QWORD **)&v234 + 1) = v15;
          v18[1] = v17;
          v10 = v18 + 3;
          v18[2] = v17;
        }
        else
        {
          v19 = (_QWORD *)v234;
          v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v234 + 1) - v234) >> 3);
          v21 = v20 + 1;
          if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_22324A284();
          if (0x5555555555555556 * ((uint64_t)&v235[-v234] >> 3) > v21)
            v21 = 0x5555555555555556 * ((uint64_t)&v235[-v234] >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v235[-v234] >> 3) >= 0x555555555555555)
            v22 = 0xAAAAAAAAAAAAAAALL;
          else
            v22 = v21;
          if (v22 > 0xAAAAAAAAAAAAAAALL)
            sub_223174E94();
          v23 = (char *)operator new(24 * v22);
          v24 = &v23[24 * v20];
          *((_QWORD *)v24 + 1) = 0;
          *((_QWORD *)v24 + 2) = 0;
          *(_QWORD *)v24 = v16;
          v5 = (float32x4_t)vdupq_n_s64(v17);
          *(float32x4_t *)(v24 + 8) = v5;
          v10 = v24 + 24;
          if (v18 == v19)
          {
            *(_QWORD *)&v234 = &v23[24 * v20];
            *((_QWORD *)&v234 + 1) = v24 + 24;
            v235 = &v23[24 * v22];
          }
          else
          {
            do
            {
              v25 = *(_OWORD *)(v18 - 3);
              v18 -= 3;
              v5.i32[3] = HIDWORD(v25);
              *(_OWORD *)(v24 - 24) = v25;
              v24 -= 24;
              *((_QWORD *)v24 + 2) = v18[2];
              *v18 = 0;
              v18[1] = 0;
              v18[2] = 0;
            }
            while (v18 != v19);
            v26 = (_QWORD *)*((_QWORD *)&v234 + 1);
            v18 = (_QWORD *)v234;
            *(_QWORD *)&v234 = v24;
            *((_QWORD *)&v234 + 1) = v10;
            v235 = &v23[24 * v22];
            if (v26 != v18)
            {
              v27 = v26;
              do
              {
                v29 = (void *)*(v27 - 3);
                v27 -= 3;
                v28 = v29;
                if (v29)
                {
                  *(v26 - 2) = v28;
                  operator delete(v28);
                }
                v26 = v27;
              }
              while (v27 != v18);
            }
          }
          if (v18)
            operator delete(v18);
        }
        *((_QWORD *)&v234 + 1) = v10;
        v9 += 12;
      }
      v30 = v3[14];
      if (v30)
      {
        v5.i32[3] = 0;
        v238 = 0u;
        v239 = 0u;
        v237 = 0u;
        memset(object, 0, sizeof(object));
        v31 = (float *)v3[12];
        if (v31 == (float *)(v3 + 13))
        {
          v32.i64[0] = 0;
          *(double *)&v33 = 0.0;
          v34.i64[0] = 0;
          *(double *)&v35 = 0.0;
          v36.i64[0] = 0;
          *(double *)&v37 = 0.0;
          v38.i64[0] = 0;
          *(double *)&v39 = 0.0;
          v40.i64[0] = 0;
          v7.f64[0] = 0.0;
          v5.i64[0] = 0;
          v6.i64[0] = 0;
          v41 = 0.0;
        }
        else
        {
          do
          {
            v42 = *((unsigned __int8 *)v31 + 28);
            if (v42 >= 0xC)
              v42 = 0;
            *(double *)&object[v42] = *(double *)&object[v42] + v31[8];
            v43 = (float *)*((_QWORD *)v31 + 1);
            if (v43)
            {
              do
              {
                v44 = v43;
                v43 = *(float **)v43;
              }
              while (v43);
            }
            else
            {
              do
              {
                v44 = (float *)*((_QWORD *)v31 + 2);
                _ZF = *(_QWORD *)v44 == (_QWORD)v31;
                v31 = v44;
              }
              while (!_ZF);
            }
            v31 = v44;
          }
          while (v44 != (float *)(v3 + 13));
          v41 = *(double *)object
              + *(double *)&object[1]
              + *(double *)&object[2]
              + *(double *)&object[3]
              + *(double *)&object[4]
              + *(double *)&object[5]
              + *(double *)v237.i64
              + *(double *)&v237.i64[1]
              + *(double *)v238.i64
              + *(double *)&v238.i64[1]
              + *(double *)v239.i64
              + *(double *)&v239.i64[1];
          v40 = v238;
          v5 = v239;
          v36 = *(int8x16_t *)&object[4];
          v38 = v237;
          v32 = *(int8x16_t *)object;
          v34 = *(int8x16_t *)&object[2];
          v6 = (float32x4_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL);
          v7 = (float64x2_t)vextq_s8(v40, v40, 8uLL);
          v39 = vextq_s8(v38, v38, 8uLL).u64[0];
          v37 = vextq_s8(v36, v36, 8uLL).u64[0];
          v35 = vextq_s8(v34, v34, 8uLL).u64[0];
          v33 = vextq_s8(v32, v32, 8uLL).u64[0];
        }
        memset(object, 0, 24);
        if (*((_QWORD *)&v234 + 1) == (_QWORD)v234)
        {
          v8 = 0;
          v49 = 0;
        }
        else
        {
          v190 = *(double *)&v33;
          v191 = *(double *)&v35;
          v192 = *(_QWORD *)&v41;
          v193 = *(double *)&v37;
          v194 = *(double *)v32.i64;
          v195 = *(double *)v34.i64;
          v196 = *(double *)&v39;
          v197 = *(double *)v36.i64;
          v198 = v7.f64[0];
          v199 = *(double *)v38.i64;
          v200 = *(double *)v6.i64;
          v201 = *(double *)v40.i64;
          v202 = *(double *)v5.i64;
          v46 = (*((_QWORD *)&v234 + 1) - (_QWORD)v234) / 24;
          if (v46 >= 0x2AAAAAAAAAAAAABLL)
            sub_22316E078();
          v47 = 96 * v46;
          v48 = (char *)operator new(96 * v46);
          v49 = v48;
          v50 = 0;
          v51 = (float64x2_t)vdupq_lane_s64(v192, 0);
          v52.f64[0] = v194;
          v53.f64[0] = v195;
          v52.f64[1] = v190;
          v5 = (float32x4_t)vdivq_f64(v52, v51);
          v54 = vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u64[0];
          v53.f64[1] = v191;
          v6 = (float32x4_t)vdivq_f64(v53, v51);
          v55 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
          v56.f64[0] = v197;
          v56.f64[1] = v193;
          v7 = vdivq_f64(v56, v51);
          v57.f64[0] = v199;
          v57.f64[1] = v196;
          v58 = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
          v59 = (int8x16_t)vdivq_f64(v57, v51);
          v60 = vextq_s8(v59, v59, 8uLL).u64[0];
          v61.f64[0] = v201;
          v62.f64[0] = v202;
          v61.f64[1] = v198;
          v63 = (int8x16_t)vdivq_f64(v61, v51);
          v64 = vextq_s8(v63, v63, 8uLL).u64[0];
          v62.f64[1] = v200;
          v65 = (int8x16_t)vdivq_f64(v62, v51);
          v66 = vextq_s8(v65, v65, 8uLL).u64[0];
          v8 = &v48[v47];
          do
          {
            *(_QWORD *)&v67 = v5.i64[0];
            *((_QWORD *)&v67 + 1) = v54;
            v68 = &v48[v50];
            *(_QWORD *)&v69 = v6.i64[0];
            *((_QWORD *)&v69 + 1) = v55;
            *(_OWORD *)v68 = v67;
            *((_OWORD *)v68 + 1) = v69;
            *(float64_t *)&v67 = v7.f64[0];
            *((_QWORD *)&v67 + 1) = v58;
            *(_QWORD *)&v69 = v59.i64[0];
            *((_QWORD *)&v69 + 1) = v60;
            *((_OWORD *)v68 + 2) = v67;
            *((_OWORD *)v68 + 3) = v69;
            *(_QWORD *)&v67 = v63.i64[0];
            *((_QWORD *)&v67 + 1) = v64;
            *(_QWORD *)&v69 = v65.i64[0];
            *((_QWORD *)&v69 + 1) = v66;
            *((_OWORD *)v68 + 4) = v67;
            *((_OWORD *)v68 + 5) = v69;
            v50 += 96;
          }
          while (v47 != v50);
        }
      }
      else
      {
        v49 = 0;
      }
      v5.i64[0] = v3[2];
      v5.i32[2] = *((_DWORD *)v3 + 6);
      v6.i64[0] = *(uint64_t *)((char *)v3 + 28);
      v6.i32[2] = *((_DWORD *)v3 + 9);
      v230 = vcvtq_f64_f32(*(float32x2_t *)v5.f32);
      v231 = *(_OWORD *)&vcvt_hight_f64_f32(v5);
      v233 = *(_OWORD *)&vcvt_hight_f64_f32(v6);
      v232 = vcvtq_f64_f32(*(float32x2_t *)v6.f32);
      sub_223F2BCA8((uint64_t)&v230, (uint64_t)object, v7);
      v70 = *((_DWORD *)v3 + 10);
      v208 = *(_OWORD *)object;
      v209 = *(_OWORD *)&object[2];
      v212 = v238;
      v213 = v239;
      v214 = v240;
      v215 = v241;
      v210 = *(_OWORD *)&object[4];
      v211 = v237;
      v216 = v70;
      __p = v234;
      v218 = v235;
      LOBYTE(v219) = 0;
      v222 = 0;
      if (v30)
      {
        v219 = v49;
        v220 = v8;
        v221 = v8;
        v71 = 1;
        v222 = 1;
      }
      else
      {
        v71 = 0;
      }
      v72 = 0;
      v223 = 0;
      do
      {
        v73 = *(double *)((char *)&v208 + v72);
        if ((LODWORD(v73) & 0x7FFFFFFFu) > 0x7F7FFFFF)
          break;
        _ZF = v72 == 120;
        v72 += 8;
      }
      while (!_ZF);
      if ((LODWORD(v73) & 0x7FFFFFFFu) < 0x7F800000)
      {
        _V1.D[1] = v212.i64[1];
        _D3 = v212.i64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        v79 = sqrt(_D2 + *(double *)v213.i64 * *(double *)v213.i64);
        _NF = v79 < 1.0;
        if (v79 == 1.0)
          break;
        v81 = v79 + -1.0;
        v82 = 1.0 - v79;
        if (!_NF)
          v82 = v81;
        if (v82 <= 0.001)
          break;
      }
LABEL_123:
      if (v71 && v219)
        operator delete(v219);
      v125 = (char *)__p;
      if ((_QWORD)__p)
      {
        v126 = (char *)*((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
        {
          v127 = (char *)*((_QWORD *)&__p + 1);
          do
          {
            v129 = (void *)*((_QWORD *)v127 - 3);
            v127 -= 24;
            v128 = v129;
            if (v129)
            {
              *((_QWORD *)v126 - 2) = v128;
              operator delete(v128);
            }
            v126 = v127;
          }
          while (v127 != v125);
        }
        operator delete(v125);
      }
      v3 += 15;
      if (v3 == v205)
        goto LABEL_136;
    }
    sub_223FA5A80((uint64_t)object, (uint64_t)&v208, (uint64_t)v227, (uint64_t)v228);
    v83 = *v3;
    v84 = v3[1];
    v85 = (char *)operator new(0x160uLL);
    *(_QWORD *)&v230.f64[0] = v85;
    *(_QWORD *)&v230.f64[1] = &v225;
    LOBYTE(v231) = 0;
    *((_QWORD *)v85 + 4) = v83;
    *((_QWORD *)v85 + 5) = v84;
    v86 = v239;
    *((int8x16_t *)v85 + 7) = v238;
    *((float32x4_t *)v85 + 8) = v86;
    v87 = v241;
    *((_OWORD *)v85 + 9) = v240;
    *((_OWORD *)v85 + 10) = v87;
    v88 = *(_OWORD *)&object[2];
    *((_OWORD *)v85 + 3) = *(_OWORD *)object;
    *((_OWORD *)v85 + 4) = v88;
    v89 = v237;
    *((_OWORD *)v85 + 5) = *(_OWORD *)&object[4];
    *((int8x16_t *)v85 + 6) = v89;
    *((_QWORD *)v85 + 22) = v242;
    *((_DWORD *)v85 + 46) = v243;
    *((_DWORD *)v85 + 48) = v244;
    v90 = v246;
    *((_QWORD *)v85 + 25) = v245;
    *((_QWORD *)v85 + 26) = v90;
    if (v90)
      (*(void (**)(uint64_t))(*(_QWORD *)v90 + 24))(v90);
    *(_OWORD *)(v85 + 216) = v247;
    v247 = 0uLL;
    v91 = v248;
    v248 = 0uLL;
    v92 = v249;
    *(_OWORD *)(v85 + 232) = v91;
    *(_OWORD *)(v85 + 248) = v92;
    *((_QWORD *)v85 + 33) = v250;
    v250 = 0;
    v249 = 0uLL;
    v85[272] = 0;
    v85[312] = 0;
    v93 = v254;
    if (v254)
    {
      v85[272] = v251;
      *(_OWORD *)(v85 + 280) = v252;
      v252 = 0uLL;
      *(_OWORD *)(v85 + 296) = v253;
      v85[312] = 1;
    }
    *((_QWORD *)v85 + 40) = v255;
    *((_DWORD *)v85 + 82) = v256;
    *((_OWORD *)v85 + 21) = v257;
    LOBYTE(v231) = 1;
    v94 = v225;
    v95 = &v225;
    v96 = &v225;
    if (!v225)
    {
LABEL_104:
      *(_QWORD *)v85 = 0;
      *((_QWORD *)v85 + 1) = 0;
      *((_QWORD *)v85 + 2) = v95;
      *v96 = (uint64_t *)v85;
      if (*v224)
      {
        v224 = (uint64_t **)*v224;
        v85 = (char *)*v96;
      }
      sub_2231A9A8C(v225, (uint64_t *)v85);
      ++v226;
      if (v254)
        goto LABEL_116;
      goto LABEL_120;
    }
    v97 = v85[32];
    v98 = v85[33];
    v99 = v85[34];
    v100 = v85[35];
    v101 = v85[36];
    v102 = v85[37];
    v103 = v85[38];
    v104 = v85[39];
    v105 = v85[40];
    v106 = v85[41];
    v107 = v85[42];
    v108 = v85[43];
    v109 = v85[44];
    v110 = v85[45];
    v111 = v85[46];
    v112 = v85[47];
    while (1)
    {
      v95 = (uint64_t **)v94;
      v113 = *((unsigned __int8 *)v94 + 32);
      if (v97 != v113)
        break;
      v113 = *((unsigned __int8 *)v95 + 33);
      if (v98 == v113)
      {
        v114 = *((unsigned __int8 *)v95 + 34);
        v115 = v85[34];
        if (v99 != v114)
          goto LABEL_82;
        v114 = *((unsigned __int8 *)v95 + 35);
        v115 = v85[35];
        if (v100 != v114)
          goto LABEL_82;
        v114 = *((unsigned __int8 *)v95 + 36);
        v115 = v85[36];
        if (v101 != v114)
          goto LABEL_82;
        v114 = *((unsigned __int8 *)v95 + 37);
        v115 = v85[37];
        if (v102 != v114)
          goto LABEL_82;
        v114 = *((unsigned __int8 *)v95 + 38);
        v115 = v85[38];
        if (v103 != v114)
          goto LABEL_82;
        v114 = *((unsigned __int8 *)v95 + 39);
        v115 = v85[39];
        if (v104 != v114)
          goto LABEL_82;
        v114 = *((unsigned __int8 *)v95 + 40);
        v115 = v85[40];
        if (v105 != v114)
          goto LABEL_82;
        v114 = *((unsigned __int8 *)v95 + 41);
        v115 = v85[41];
        if (v106 != v114)
          goto LABEL_82;
        v114 = *((unsigned __int8 *)v95 + 42);
        v115 = v85[42];
        if (v107 != v114)
          goto LABEL_82;
        v114 = *((unsigned __int8 *)v95 + 43);
        v115 = v85[43];
        if (v108 != v114)
          goto LABEL_82;
        v114 = *((unsigned __int8 *)v95 + 44);
        v115 = v85[44];
        if (v109 != v114
          || (v114 = *((unsigned __int8 *)v95 + 45), v115 = v85[45], v110 != v114)
          || (v114 = *((unsigned __int8 *)v95 + 46), v115 = v85[46], v111 != v114)
          || (v114 = *((unsigned __int8 *)v95 + 47), v115 = v85[47], v112 != v114))
        {
LABEL_82:
          if (v115 < v114)
            goto LABEL_65;
        }
        v113 = *((unsigned __int8 *)v95 + 34);
        v116 = v85[34];
        if (v113 == v99)
        {
          v113 = *((unsigned __int8 *)v95 + 35);
          v116 = v85[35];
          if (v113 == v100)
          {
            v113 = *((unsigned __int8 *)v95 + 36);
            v116 = v85[36];
            if (v113 == v101)
            {
              v113 = *((unsigned __int8 *)v95 + 37);
              v116 = v85[37];
              if (v113 == v102)
              {
                v113 = *((unsigned __int8 *)v95 + 38);
                v116 = v85[38];
                if (v113 == v103)
                {
                  v113 = *((unsigned __int8 *)v95 + 39);
                  v116 = v85[39];
                  if (v113 == v104)
                  {
                    v113 = *((unsigned __int8 *)v95 + 40);
                    v116 = v85[40];
                    if (v113 == v105)
                    {
                      v113 = *((unsigned __int8 *)v95 + 41);
                      v116 = v85[41];
                      if (v113 == v106)
                      {
                        v113 = *((unsigned __int8 *)v95 + 42);
                        v116 = v85[42];
                        if (v113 == v107)
                        {
                          v113 = *((unsigned __int8 *)v95 + 43);
                          v116 = v85[43];
                          if (v113 == v108)
                          {
                            v113 = *((unsigned __int8 *)v95 + 44);
                            v116 = v85[44];
                            if (v113 == v109)
                            {
                              v113 = *((unsigned __int8 *)v95 + 45);
                              v116 = v85[45];
                              if (v113 == v110)
                              {
                                v113 = *((unsigned __int8 *)v95 + 46);
                                v116 = v85[46];
                                if (v113 == v111)
                                {
                                  v113 = *((unsigned __int8 *)v95 + 47);
                                  v116 = v85[47];
                                  if (v113 == v112)
                                  {
LABEL_108:
                                    v230.f64[0] = 0.0;
                                    if (!v93)
                                      goto LABEL_113;
                                    v117 = (std::__shared_weak_count *)*((_QWORD *)v85 + 36);
                                    if (!v117)
                                      goto LABEL_113;
                                    p_shared_owners = (unint64_t *)&v117->__shared_owners_;
                                    do
                                      v119 = __ldaxr(p_shared_owners);
                                    while (__stlxr(v119 - 1, p_shared_owners));
                                    if (!v119)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                                      std::__shared_weak_count::__release_weak(v117);
                                      sub_223F9497C((uint64_t)(v85 + 216));
                                      v120 = *((_QWORD *)v85 + 26);
                                      if (v120)
LABEL_114:
                                        (*(void (**)(uint64_t))(*(_QWORD *)v120 + 40))(v120);
                                    }
                                    else
                                    {
LABEL_113:
                                      sub_223F9497C((uint64_t)(v85 + 216));
                                      v120 = *((_QWORD *)v85 + 26);
                                      if (v120)
                                        goto LABEL_114;
                                    }
                                    operator delete(v85);
                                    if (v254)
                                    {
LABEL_116:
                                      v121 = (std::__shared_weak_count *)*((_QWORD *)&v252 + 1);
                                      if (!*((_QWORD *)&v252 + 1))
                                        goto LABEL_120;
                                      v122 = (unint64_t *)(*((_QWORD *)&v252 + 1) + 8);
                                      do
                                        v123 = __ldaxr(v122);
                                      while (__stlxr(v123 - 1, v122));
                                      if (v123)
                                        goto LABEL_120;
                                      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                                      std::__shared_weak_count::__release_weak(v121);
                                      sub_223F9497C((uint64_t)&v247);
                                      v124 = v246;
                                      if (!v246)
                                      {
LABEL_122:
                                        v71 = v222;
                                        goto LABEL_123;
                                      }
LABEL_121:
                                      (*(void (**)(uint64_t))(*(_QWORD *)v124 + 40))(v124);
                                      goto LABEL_122;
                                    }
LABEL_120:
                                    sub_223F9497C((uint64_t)&v247);
                                    v124 = v246;
                                    if (!v246)
                                      goto LABEL_122;
                                    goto LABEL_121;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_101:
        if (v113 >= v116)
          goto LABEL_108;
        v94 = v95[1];
        if (!v94)
        {
          v96 = v95 + 1;
          goto LABEL_104;
        }
      }
      else
      {
        v116 = v85[33];
        if (v98 >= v113)
          goto LABEL_101;
LABEL_65:
        v94 = *v95;
        v96 = v95;
        if (!*v95)
          goto LABEL_104;
      }
    }
    v116 = v85[32];
    if (v97 >= v113)
      goto LABEL_101;
    goto LABEL_65;
  }
LABEL_136:
  v130 = atomic_load((unsigned __int8 *)&qword_2540CE428);
  if ((v130 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE428))
  {
    sub_22455F53C(&v208);
    sub_223174DE4(object, "cv3d.acv.surfacedetection");
    sub_2232300E0((uint64_t **)&v208, (uint64_t)object, &qword_2540CE420);
    if (SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    __cxa_guard_release(&qword_2540CE428);
  }
  v207 = qword_2540CE420;
  if (**(int **)(qword_2540CE420 + 56) <= 3)
  {
    v131 = *(unsigned __int8 *)(qword_2540CE420 + 72);
    v132 = sub_22322F254(qword_2540CE420, "OSLogSurrogateAppender", 1, 0);
    v133 = v132;
    if (v131 || v132)
    {
      *(_QWORD *)&v208 = &v207;
      *((std::chrono::steady_clock::time_point *)&v208 + 1) = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v209 = std::chrono::system_clock::now();
      DWORD2(v209) = 3;
      *(_QWORD *)&v210 = "unknown file";
      DWORD2(v210) = 110;
      v211.i64[1] = 0;
      v212.i64[0] = 0;
      v211.i64[0] = (uint64_t)"unknown function";
      v134 = *(_QWORD *)v208;
      v135 = (const char *)(*(_QWORD *)v208 + 16);
      v204 = v135;
      if (*(char *)(*(_QWORD *)v208 + 39) < 0)
      {
        v135 = *(const char **)(v134 + 16);
        v136 = *(_QWORD *)(v134 + 24);
      }
      else
      {
        v136 = *(unsigned __int8 *)(*(_QWORD *)v208 + 39);
      }
      v203 = *(_QWORD *)v208;
      v138 = *a1;
      v137 = a1[1];
      v206 = (void *)v226;
      v139 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v139 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
          operator delete(object[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v140 = (const char *)&xmmword_255788F40;
      else
        v140 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v141 = byte_255788F57;
      else
        v141 = *((_QWORD *)&xmmword_255788F40 + 1);
      object[0] = os_log_create(v140, v135);
      v142 = &object[1];
      if (v141 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v143 = v131;
      if (v141 >= 0x17)
      {
        v144 = (v141 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v141 | 7) != 0x17)
          v144 = v141 | 7;
        v145 = v144 + 1;
        v142 = (void **)operator new(v144 + 1);
        object[3] = (void *)(v145 | 0x8000000000000000);
        object[1] = v142;
        object[2] = (void *)v141;
        v143 = v131;
      }
      else
      {
        HIBYTE(object[3]) = v141;
        if (!v141)
        {
LABEL_158:
          *((_BYTE *)v142 + v141) = 0;
          LOBYTE(object[4]) = 1;
          v146 = &object[5];
          if (v136 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v136 >= 0x17)
          {
            v148 = (v136 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v136 | 7) != 0x17)
              v148 = v136 | 7;
            v149 = v148 + 1;
            v146 = (void **)operator new(v148 + 1);
            v237.i64[1] = v149 | 0x8000000000000000;
            object[5] = v146;
            v237.i64[0] = v136;
          }
          else
          {
            v237.i8[15] = v136;
            if (!v136)
            {
              LOBYTE(object[5]) = 0;
              v238.i8[0] = 1;
              v147 = object[0];
              if ((v237.i8[15] & 0x80000000) == 0)
                goto LABEL_162;
              goto LABEL_168;
            }
          }
          memmove(v146, v135, v136);
          *((_BYTE *)v146 + v136) = 0;
          v238.i8[0] = 1;
          v147 = object[0];
          if ((v237.i8[15] & 0x80000000) == 0)
          {
LABEL_162:
            if (!LOBYTE(object[4]))
              goto LABEL_171;
            goto LABEL_169;
          }
LABEL_168:
          operator delete(object[5]);
          if (!LOBYTE(object[4]))
          {
LABEL_171:
            if (object[0])
              os_release(object[0]);
            v150 = 0xEEEEEEEEEEEEEEEFLL * (v137 - v138);
            if (v133 && *(_QWORD *)(v133 + 24))
            {
              v151 = _os_log_pack_size();
              v152 = (std::__shared_weak_count_vtbl *)operator new(v151, (std::align_val_t)8uLL);
              v153 = (std::__shared_weak_count *)operator new();
              v154 = v153;
              v153->__shared_owners_ = 0;
              v155 = (unint64_t *)&v153->__shared_owners_;
              v153->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v153->__shared_weak_owners_ = 0;
              v153[1].__vftable = v152;
              object[0] = v152;
              object[1] = v152;
              object[2] = v153;
              do
                v156 = __ldxr(v155);
              while (__stxr(v156 + 1, v155));
              memset(&object[3], 0, 24);
              do
                v157 = __ldaxr(v155);
              while (__stlxr(v157 - 1, v155));
              if (!v157)
              {
                ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                std::__shared_weak_count::__release_weak(v154);
              }
              v158 = object[0];
              v159 = _os_log_pack_fill();
              *(_DWORD *)v159 = 134218240;
              *(_QWORD *)(v159 + 4) = v150;
              *(_WORD *)(v159 + 12) = 2048;
              *(_QWORD *)(v159 + 14) = v206;
              v160 = operator new();
              v161 = *(unsigned __int8 *)(v203 + 39);
              v162 = v204;
              if ((v161 & 0x80u) != 0)
              {
                v162 = *(const char **)(v203 + 16);
                v161 = *(_QWORD *)(v203 + 24);
              }
              *(_QWORD *)v160 = v158;
              *(_OWORD *)(v160 + 8) = *(_OWORD *)&object[1];
              object[1] = 0;
              object[2] = 0;
              *(_OWORD *)(v160 + 24) = *(_OWORD *)&object[3];
              object[3] = 0;
              object[4] = 0;
              *(_QWORD *)(v160 + 40) = v162;
              *(_QWORD *)(v160 + 48) = v161;
              *(_BYTE *)(v160 + 56) = 1;
              *(_QWORD *)&v234 = 0;
              *(_QWORD *)&v230.f64[0] = v160;
              (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)(v133 + 24) + 40))(*(_QWORD *)(v133 + 24), &v230);
              v163 = v230.f64[0];
              v230.f64[0] = 0.0;
              if (v163 != 0.0)
              {
                v164 = *(std::__shared_weak_count **)(*(_QWORD *)&v163 + 32);
                if (v164)
                {
                  v165 = (unint64_t *)&v164->__shared_owners_;
                  do
                    v166 = __ldaxr(v165);
                  while (__stlxr(v166 - 1, v165));
                  if (!v166)
                  {
                    ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                    std::__shared_weak_count::__release_weak(v164);
                  }
                }
                v167 = *(std::__shared_weak_count **)(*(_QWORD *)&v163 + 16);
                if (v167)
                {
                  v168 = (unint64_t *)&v167->__shared_owners_;
                  do
                    v169 = __ldaxr(v168);
                  while (__stlxr(v169 - 1, v168));
                  if (!v169)
                  {
                    ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                    std::__shared_weak_count::__release_weak(v167);
                  }
                }
                MEMORY[0x227684CE8](*(_QWORD *)&v163, 0x10F0C40B62ED6C6);
                v170 = v234;
                *(_QWORD *)&v234 = 0;
                if (v170)
                {
                  v171 = *(std::__shared_weak_count **)(v170 + 32);
                  if (v171)
                  {
                    v172 = (unint64_t *)&v171->__shared_owners_;
                    do
                      v173 = __ldaxr(v172);
                    while (__stlxr(v173 - 1, v172));
                    if (!v173)
                    {
                      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                      std::__shared_weak_count::__release_weak(v171);
                    }
                  }
                  v174 = *(std::__shared_weak_count **)(v170 + 16);
                  if (v174)
                  {
                    v175 = (unint64_t *)&v174->__shared_owners_;
                    do
                      v176 = __ldaxr(v175);
                    while (__stlxr(v176 - 1, v175));
                    if (!v176)
                    {
                      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                      std::__shared_weak_count::__release_weak(v174);
                    }
                  }
                  MEMORY[0x227684CE8](v170, 0x10F0C40B62ED6C6);
                }
              }
              v177 = (std::__shared_weak_count *)object[4];
              if (object[4])
              {
                v178 = (unint64_t *)((char *)object[4] + 8);
                do
                  v179 = __ldaxr(v178);
                while (__stlxr(v179 - 1, v178));
                if (!v179)
                {
                  ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                  std::__shared_weak_count::__release_weak(v177);
                }
              }
              v180 = (std::__shared_weak_count *)object[2];
              if (object[2])
              {
                v181 = (unint64_t *)((char *)object[2] + 8);
                do
                  v182 = __ldaxr(v181);
                while (__stlxr(v182 - 1, v181));
                if (!v182)
                {
                  ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                  std::__shared_weak_count::__release_weak(v180);
                }
              }
            }
            else
            {
              os_log_type_enabled(v147, OS_LOG_TYPE_INFO);
              LODWORD(object[0]) = 134218240;
              *(void **)((char *)object + 4) = (void *)(0xEEEEEEEEEEEEEEEFLL * (v137 - v138));
              WORD2(object[1]) = 2048;
              *(void **)((char *)&object[1] + 6) = v206;
              v183 = (void *)_os_log_send_and_compose_impl();
              if (v183)
                free(v183);
            }
            if (v143)
            {
              sub_22322C138((uint64_t)&v208, "Samples vs Loaded: %zu %zu", 0xEEEEEEEEEEEEEEEFLL * (a1[1] - *a1), v226);
              sub_223182C08((uint64_t)&v208);
            }
            sub_223182C08((uint64_t)&v208);
            v184 = (std::__shared_weak_count *)v212.i64[0];
            if (v212.i64[0])
            {
              v185 = (unint64_t *)(v212.i64[0] + 8);
              do
                v186 = __ldaxr(v185);
              while (__stlxr(v186 - 1, v185));
              if (!v186)
              {
                ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                std::__shared_weak_count::__release_weak(v184);
              }
            }
            goto LABEL_225;
          }
LABEL_169:
          if (SHIBYTE(object[3]) < 0)
            operator delete(object[1]);
          goto LABEL_171;
        }
      }
      memmove(v142, v140, v141);
      goto LABEL_158;
    }
  }
LABEL_225:
  sub_223F8F884(a3, &v224, a2);
  sub_223F97F4C(v225);
}

void sub_223F977EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  if (LOBYTE(STACK[0x2C8]))
  {
    if (SLOBYTE(STACK[0x2C7]) < 0)
      operator delete((void *)STACK[0x2B0]);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a53);
  sub_223F97F4C((_QWORD *)STACK[0x238]);
  _Unwind_Resume(a1);
}

uint64_t sub_223F979A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 264))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 240);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        sub_223F9497C(a1 + 168);
        v5 = *(_QWORD *)(a1 + 160);
        if (!v5)
          return a1;
        goto LABEL_7;
      }
    }
  }
  sub_223F9497C(a1 + 168);
  v5 = *(_QWORD *)(a1 + 160);
  if (v5)
LABEL_7:
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  return a1;
}

char *sub_223F97A34(unint64_t *a1, uint64_t a2, char *a3, char *a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  size_t v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  __int128 *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  char *v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  unint64_t v85;
  uint64_t v86;
  __int128 *v87;
  char *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;

  v5 = *a1;
  v6 = a2 - *a1;
  v7 = (uint64_t *)(*a1 + (v6 & 0xFFFFFFFFFFFFFFF8));
  if (a5 < 1)
    return (char *)v7;
  v11 = v6 >> 3;
  v13 = a1[1];
  v12 = a1[2];
  if (a5 <= (uint64_t)(v12 - v13) >> 3)
  {
    v18 = v13 - (_QWORD)v7;
    v19 = (uint64_t)(v13 - (_QWORD)v7) >> 3;
    if (v19 >= a5)
    {
      v20 = &a3[8 * a5];
      v23 = (char *)a1[1];
      goto LABEL_42;
    }
    v20 = &a3[8 * v19];
    if (v20 == a4)
    {
      v23 = (char *)a1[1];
      goto LABEL_41;
    }
    v21 = a4 - a3 - v18 - 8;
    if (v21 >= 0x38)
    {
      v22 = &a3[8 * v19];
      v23 = (char *)a1[1];
      if ((unint64_t)((char *)v7 - a3) >= 0x20)
      {
        v48 = (v21 >> 3) + 1;
        v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
        v22 = &v20[v49];
        v23 = (char *)(v13 + v49);
        v50 = (_OWORD *)(v13 + 16);
        v51 = &a3[8 * v19 + 16];
        v52 = v48 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v53 = *(_OWORD *)v51;
          *(v50 - 1) = *((_OWORD *)v51 - 1);
          *v50 = v53;
          v50 += 2;
          v51 += 32;
          v52 -= 4;
        }
        while (v52);
        if (v48 == (v48 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_41:
          a1[1] = (unint64_t)v23;
          if (v18 < 1)
            return (char *)v7;
LABEL_42:
          v55 = (char *)&v7[a5];
          v56 = (char *)(v23 - v55);
          v57 = (v23 - v55) >> 3;
          v58 = &v23[-8 * a5];
          v59 = v23;
          if ((unint64_t)v58 < v13)
          {
            v60 = &v56[v6 & 0xFFFFFFFFFFFFFFF8];
            v61 = (unint64_t)&v60[v5 + 8];
            if (v13 > v61)
              v61 = v13;
            v62 = v61 + ~v5 - (_QWORD)v60;
            v63 = (uint64_t *)&v23[-8 * a5];
            v59 = v23;
            if (v62 < 0x58)
              goto LABEL_76;
            v63 = (uint64_t *)&v23[-8 * a5];
            v59 = v23;
            if ((unint64_t)&v55[-(v6 & 0xFFFFFFFFFFFFFFF8) - v5] < 0x20)
              goto LABEL_76;
            v64 = (v62 >> 3) + 1;
            v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
            v63 = (uint64_t *)&v58[v65];
            v59 = &v23[v65];
            v66 = v23 + 16;
            v67 = (__int128 *)(8 * v57 + 8 * v11 + v5 + 16);
            v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v69 = *v67;
              *(v66 - 1) = *(v67 - 1);
              *v66 = v69;
              v66 += 2;
              v67 += 2;
              v68 -= 4;
            }
            while (v68);
            if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_76:
              do
              {
                v70 = *v63++;
                *(_QWORD *)v59 = v70;
                v59 += 8;
              }
              while ((unint64_t)v63 < v13);
            }
          }
          a1[1] = (unint64_t)v59;
          if (v23 != v55)
          {
            if ((unint64_t)(v56 - 8) < 0x78 || (v6 & 0xFFFFFFFFFFFFFFF8) + v5 - (unint64_t)v55 < 0x20)
            {
              v71 = v23;
LABEL_55:
              v72 = v71 - 8;
              do
              {
                v73 = *((_QWORD *)v58 - 1);
                v58 -= 8;
                *(_QWORD *)v72 = v73;
                v72 -= 8;
              }
              while (v58 != (char *)v7);
              goto LABEL_57;
            }
            v85 = ((unint64_t)(v56 - 8) >> 3) + 1;
            v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
            v71 = &v23[-v86];
            v58 -= v86;
            v87 = (__int128 *)(8 * v57 + 8 * v11 + v5 - 16);
            v88 = v23 - 16;
            v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v90 = *v87;
              *((_OWORD *)v88 - 1) = *(v87 - 1);
              *(_OWORD *)v88 = v90;
              v87 -= 2;
              v88 -= 32;
              v89 -= 4;
            }
            while (v89);
            if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_55;
          }
LABEL_57:
          if (v20 != a3)
          {
            v74 = v20 - a3 - 8;
            if (v74 < 0x18 || (unint64_t)((char *)v7 - a3) < 0x20)
            {
              v77 = v7;
              v78 = a3;
            }
            else
            {
              v75 = (v74 >> 3) + 1;
              v76 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              v77 = &v7[v76];
              v78 = &a3[v76 * 8];
              v79 = (__int128 *)(a3 + 16);
              v80 = (_OWORD *)(v5 + 8 * v11 + 16);
              v81 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v82 = *v79;
                *(v80 - 1) = *(v79 - 1);
                *v80 = v82;
                v79 += 2;
                v80 += 2;
                v81 -= 4;
              }
              while (v81);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                return (char *)v7;
            }
            do
            {
              v83 = *(_QWORD *)v78;
              v78 += 8;
              *v77++ = v83;
            }
            while (v78 != v20);
          }
          return (char *)v7;
        }
      }
    }
    else
    {
      v22 = &a3[8 * v19];
      v23 = (char *)a1[1];
    }
    do
    {
      v54 = *(_QWORD *)v22;
      v22 += 8;
      *(_QWORD *)v23 = v54;
      v23 += 8;
    }
    while (v22 != a4);
    goto LABEL_41;
  }
  v14 = a5 + ((uint64_t)(v13 - v5) >> 3);
  if (v14 >> 61)
    sub_22316E078();
  v15 = v12 - v5;
  if (v15 >> 2 > v14)
    v14 = v15 >> 2;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
    v16 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v16 = v14;
  if (v16)
  {
    if (v16 >> 61)
      sub_223174E94();
    v17 = (char *)operator new(8 * v16);
    v11 = v6 >> 3;
  }
  else
  {
    v17 = 0;
  }
  v24 = 8 * a5;
  v91 = v11;
  v25 = &v17[8 * v11];
  memcpy(v25, a3, v24);
  v26 = &v25[v24];
  v27 = v25;
  v28 = v6 - 8;
  if ((unint64_t)v6 >= 8)
  {
    v29 = v7;
    v27 = v25;
    if (v28 < 0x68)
      goto LABEL_77;
    v29 = v7;
    v27 = v25;
    if ((v6 & 0xFFFFFFFFFFFFFFF8) + v5 - (unint64_t)&v17[v6 & 0xFFFFFFFFFFFFFFF8] < 0x20)
      goto LABEL_77;
    v30 = (v28 >> 3) + 1;
    v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
    v29 = &v7[v31 / 0xFFFFFFFFFFFFFFF8];
    v27 = &v25[-v31];
    v32 = 8 * v91 - 16;
    v33 = &v17[v32];
    v34 = (__int128 *)(v5 + v32);
    v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v36 = *v34;
      *((_OWORD *)v33 - 1) = *(v34 - 1);
      *(_OWORD *)v33 = v36;
      v33 -= 32;
      v34 -= 2;
      v35 -= 4;
    }
    while (v35);
    if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_77:
      do
      {
        v37 = *--v29;
        *((_QWORD *)v27 - 1) = v37;
        v27 -= 8;
      }
      while (v29 != (uint64_t *)v5);
    }
    v13 = a1[1];
  }
  if ((uint64_t *)v13 != v7)
  {
    v38 = (char *)((v6 & 0xFFFFFFFFFFFFFFF8) + v5);
    v39 = v13 - (_QWORD)v38 - 8;
    if (v39 < 0x68)
      goto LABEL_78;
    if ((unint64_t)(&v17[(v6 & 0xFFFFFFFFFFFFFFF8) + v24] - v38) < 0x20)
      goto LABEL_78;
    v40 = (v39 >> 3) + 1;
    v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = (uint64_t *)((char *)v7 + v41);
    v26 += v41;
    v42 = &v17[8 * v91 + 16 + v24];
    v43 = (__int128 *)(8 * v91 + v5 + 16);
    v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)v42 = v45;
      v42 += 32;
      v43 += 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_78:
      do
      {
        v46 = *v7++;
        *(_QWORD *)v26 = v46;
        v26 += 8;
      }
      while (v7 != (uint64_t *)v13);
    }
  }
  v47 = (void *)*a1;
  *a1 = (unint64_t)v27;
  a1[1] = (unint64_t)v26;
  a1[2] = (unint64_t)&v17[8 * v16];
  if (v47)
    operator delete(v47);
  return v25;
}

void sub_223F97F4C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;

  if (a1)
  {
    sub_223F97F4C(*a1);
    sub_223F97F4C(a1[1]);
    if (!*((_BYTE *)a1 + 312))
      goto LABEL_7;
    v2 = (std::__shared_weak_count *)a1[36];
    if (!v2)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_223F9497C((uint64_t)(a1 + 27));
      v5 = a1[26];
      if (!v5)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      sub_223F9497C((uint64_t)(a1 + 27));
      v5 = a1[26];
      if (!v5)
      {
LABEL_9:
        operator delete(a1);
        return;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    goto LABEL_9;
  }
}

uint64_t *sub_223F98000(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      if (*(_BYTE *)(v2 + 312))
      {
        v3 = *(std::__shared_weak_count **)(v2 + 288);
        if (v3)
        {
          p_shared_owners = (unint64_t *)&v3->__shared_owners_;
          do
            v5 = __ldaxr(p_shared_owners);
          while (__stlxr(v5 - 1, p_shared_owners));
          if (!v5)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
            sub_223F9497C(v2 + 216);
            v6 = *(_QWORD *)(v2 + 208);
            if (!v6)
              goto LABEL_10;
            goto LABEL_9;
          }
        }
      }
      sub_223F9497C(v2 + 216);
      v6 = *(_QWORD *)(v2 + 208);
      if (v6)
LABEL_9:
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    }
LABEL_10:
    operator delete((void *)v2);
  }
  return a1;
}

void sub_223F980B8(int a1@<W0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  float *v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  char *v12;
  float *v13;
  float *v14;
  size_t v15;
  int32x4_t *v16;
  uint64_t v17;
  int32x4_t *v18;
  unint64_t v19;
  int32x4_t v20;
  int32x4_t *v21;
  int32x4_t v22;
  int32x4_t v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  float *v27;
  float *v28;
  float *v29;
  float *v30;
  float *v31;
  float *v32;
  float *v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float64x2_t v44;
  double v45;
  float64x2_t v46;
  float64x2_t v48;
  double v49;
  double v50;
  __int128 v51;
  double v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  float64x2_t v56;
  __int128 v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float64x2_t v66;
  double v67;
  float64x2_t v68;
  BOOL v69;
  double v70;
  double v71;
  double v72;
  double v73;
  float64x2_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  float64x2_t v79;
  __int128 v80;
  float *v86;
  float *v87;
  float64x2_t v88;
  double v89;
  float64x2_t v90;
  double v91;
  float64x2_t v92;
  double v93;
  double v94;
  float64x2_t v95;
  float64x2_t v96;
  double v97;
  float64x2_t v98;
  double v99;
  float64x2_t v100;
  double v101;
  int32x2_t v102;
  int32x2_t v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x2_t v110;
  float32x2_t v111;
  float32x2_t v112;
  float v113;
  float v114;
  unsigned int v115;
  unsigned __int8 v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  size_t v121;
  const char *v122;
  unsigned __int8 v123;
  uint64_t v124;
  uint64_t v125;
  float32x4_t v126;
  int8x16_t v127;
  float32x2_t v128;
  float32x2_t v129;
  float64_t v130;
  float v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  unsigned __int8 v135;
  const char *v136;
  size_t v137;
  _BYTE *v138;
  uint64_t v139;
  uint64_t v140;
  void **v141;
  NSObject *v142;
  uint64_t v143;
  uint64_t v144;
  size_t v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count *v148;
  unint64_t *p_shared_owners;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  void *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t *v166;
  float v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  float v171;
  float v172;
  float v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  float v178;
  unint64_t v180;
  unsigned int v181;
  int v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  float *v188;
  unint64_t v189;
  _OWORD *v190;
  unsigned int v191;
  unsigned int v192;
  uint64_t *v193;
  uint64_t **v194;
  uint64_t **v195;
  unsigned int v196;
  _DWORD *v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t **v200;
  uint64_t **v201;
  unint64_t v202;
  _QWORD *v203;
  uint64_t *v204;
  _OWORD *v205;
  unint64_t v206;
  _OWORD *v207;
  _OWORD *v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  float64_t v216;
  char *v217;
  char *v218;
  char *v219;
  _QWORD *v220;
  _QWORD *v221;
  unint64_t v222;
  unint64_t v223;
  char *v224;
  char *v225;
  char *v226;
  char *v227;
  __int128 v228;
  char *v229;
  void *v230;
  void *v231;
  _OWORD *v232;
  uint64_t *v233;
  uint64_t *v234;
  uint64_t *v235;
  unsigned __int8 *v236;
  unsigned __int8 *v237;
  float64_t v238;
  float64_t v239;
  int v240;
  unsigned int v241;
  unsigned __int8 *v242;
  unsigned int v243;
  uint64_t *v244;
  float *v245;
  float *v246;
  unsigned int v247;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  uint64_t *v252;
  uint64_t v253;
  unsigned int v254;
  float64x2_t *v255;
  float64x2_t v257;
  float64x2_t v258;
  uint64_t v259;
  uint64_t *v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  uint64_t v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  uint64_t v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  float64x2_t *v281;
  uint64_t v282;
  float64x2_t **v283;
  _OWORD *f64;
  uint64_t *v285;
  unsigned int v286;
  unsigned int v287;
  BOOL v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  float64x2_t *v292;
  unint64_t v293;
  float64x2_t *v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  unint64_t v298;
  char *v299;
  float64x2_t *v300;
  uint64_t v301;
  _OWORD *v302;
  _OWORD *v303;
  uint64_t v304;
  unint64_t v305;
  char *v306;
  char *v307;
  char *v308;
  __int128 v309;
  float64x2_t *v310;
  float64x2_t *v311;
  float64x2_t *v312;
  float64x2_t v313;
  float64x2_t *v314;
  unint64_t v315;
  float64x2_t *v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  unint64_t v320;
  char *v321;
  float64x2_t v322;
  char *v323;
  uint64_t v324;
  float64x2_t v325;
  float64x2_t v326;
  char *v327;
  void *v328;
  char *v329;
  void *v330;
  void *v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t v334;
  const char *__src;
  int v336;
  uint64_t v337;
  unsigned int v338;
  __int128 v339;
  unsigned int v340;
  uint64_t *v341;
  float *v343;
  char *v344;
  char *v345;
  void *v346;
  __int8 *v347;
  __int8 *v348;
  int v349;
  uint64_t **v350;
  uint64_t *v351;
  uint64_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  const char *v356;
  uint64_t v357;
  __int128 v358;
  uint64_t v359;
  uint64_t v360;
  __int128 v361;
  __int128 v362;
  _BYTE object[24];
  unint64_t v364;
  void *__p[2];
  __int128 v366;
  float64x2_t v367;
  float64_t v368;
  uint64_t v369;
  __int128 v370;
  __int128 v371;
  float32x2_t v372;
  _BYTE v373[20];
  uint64_t v374;
  int8x16_t v375;
  float32x2_t v376;
  unsigned __int32 v377;
  __int128 v378;
  uint64_t v379;
  char v380;
  float64x2_t v381;
  float64x2_t v382;
  __int128 v383;
  __int128 v384;
  float64x2_t v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  double v389;
  double v390;
  double v391;
  double v392;
  double v393;
  float64x2_t v394;
  float64x2_t v395;
  __int128 v396;
  __int128 v397;
  float64x2_t v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  double v402;
  double v403;
  double v404;
  float64_t v405;
  double v406;
  uint64_t v407;

  v407 = *MEMORY[0x24BDAC8D0];
  v4 = a2[2];
  if (!v4 || !(_DWORD)v4)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  v337 = a2[2];
  v351 = 0;
  v352 = 0;
  v350 = &v351;
  v6 = (float *)*a2;
  v343 = (float *)(a2 + 1);
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v7 = 0;
    do
    {
      v339 = *((_OWORD *)v6 + 2);
      v8 = &v351;
      v9 = &v351;
      if (v351)
      {
        v10 = v351;
        while (1)
        {
          while (1)
          {
            v8 = (uint64_t **)v10;
            v11 = v10[4];
            if (v7 >= v11)
              break;
            v10 = *v8;
            v9 = v8;
            if (!*v8)
              goto LABEL_13;
          }
          if (v11 >= v7)
            break;
          v10 = v8[1];
          if (!v10)
          {
            v9 = v8 + 1;
            goto LABEL_13;
          }
        }
      }
      else
      {
LABEL_13:
        v12 = (char *)operator new(0x38uLL);
        *((_QWORD *)v12 + 4) = v7;
        *(_OWORD *)(v12 + 40) = v339;
        *(_QWORD *)v12 = 0;
        *((_QWORD *)v12 + 1) = 0;
        *((_QWORD *)v12 + 2) = v8;
        *v9 = (uint64_t *)v12;
        if (*v350)
        {
          v350 = (uint64_t **)*v350;
          v12 = (char *)*v9;
        }
        sub_2231A9A8C(v351, (uint64_t *)v12);
        ++v352;
      }
      v13 = (float *)*((_QWORD *)v6 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(float **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (float *)*((_QWORD *)v6 + 2);
          _ZF = *(_QWORD *)v14 == (_QWORD)v6;
          v6 = v14;
        }
        while (!_ZF);
      }
      ++v7;
      v6 = v14;
    }
    while (v14 != v343);
  }
  v15 = 4 * v337;
  v16 = (int32x4_t *)operator new(v15);
  v346 = v16;
  v348 = &v16->i8[v15];
  bzero(v16, v15);
  v347 = &v16->i8[v15];
  v349 = v337;
  if (v15 - 4 < 0x1C)
  {
    LODWORD(v17) = 0;
    v18 = v16;
    do
    {
LABEL_28:
      v18->i32[0] = v17;
      v18 = (int32x4_t *)((char *)v18 + 4);
      LODWORD(v17) = v17 + 1;
    }
    while (v18 != (int32x4_t *)&v16->i8[v15]);
    goto LABEL_29;
  }
  v19 = ((v15 - 4) >> 2) + 1;
  v17 = v19 & 0x7FFFFFFFFFFFFFF8;
  v18 = (int32x4_t *)((char *)v16 + 4 * (v19 & 0x7FFFFFFFFFFFFFF8));
  v20 = (int32x4_t)xmmword_2246499B0;
  v21 = v16 + 1;
  v22.i64[0] = 0x400000004;
  v22.i64[1] = 0x400000004;
  v23.i64[0] = 0x800000008;
  v23.i64[1] = 0x800000008;
  v24 = v19 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v21[-1] = v20;
    *v21 = vaddq_s32(v20, v22);
    v20 = vaddq_s32(v20, v23);
    v21 += 2;
    v24 -= 8;
  }
  while (v24);
  if (v19 != v17)
    goto LABEL_28;
LABEL_29:
  v25 = 0;
  v26 = (float *)*a2;
  v332 = a3;
  while (1)
  {
    v27 = (float *)*((_QWORD *)v26 + 1);
    v28 = v27;
    v29 = v26;
    if (v27)
    {
      do
      {
        v30 = v28;
        v28 = *(float **)v28;
      }
      while (v28);
    }
    else
    {
      do
      {
        v30 = (float *)*((_QWORD *)v29 + 2);
        _ZF = *(_QWORD *)v30 == (_QWORD)v29;
        v29 = v30;
      }
      while (!_ZF);
    }
    if (v30 == v343)
      break;
    v31 = (float *)*((_QWORD *)v26 + 1);
    v32 = v26;
    if (v27)
    {
      do
      {
        v33 = v31;
        v31 = *(float **)v31;
      }
      while (v31);
    }
    else
    {
      do
      {
        v33 = (float *)*((_QWORD *)v32 + 2);
        _ZF = *(_QWORD *)v33 == (_QWORD)v32;
        v32 = v33;
      }
      while (!_ZF);
    }
    v34 = (v25 + 1);
    if (v33 != v343)
    {
      v338 = v25 + 1;
      v340 = v25;
      while (1)
      {
        v35 = sub_223ED44F8((uint64_t *)&v346, v25);
        if (v35 == sub_223ED44F8((uint64_t *)&v346, v34))
          goto LABEL_74;
        v36 = (uint64_t *)*((_QWORD *)v26 + 25);
        v37 = *((_QWORD *)v26 + 26);
        if (v37)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v37 + 24))(*((_QWORD *)v26 + 26));
          v39 = v36;
          v38 = *v36;
          v40 = *(_QWORD *)v39[1];
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 40))(v37);
          v41 = v40 + 232 * v38;
        }
        else
        {
          v41 = *(_QWORD *)v36[1] + 232 * *v36;
        }
        v42 = *(float32x2_t *)(v41 + 80);
        v43 = *(float32x2_t *)(v41 + 88);
        v44 = vcvtq_f64_f32(v42);
        v45 = v44.f64[1];
        v46 = vcvtq_f64_f32(v43);
        _ZF = (vcgt_f32(v42, v43).u8[0] & 1) == 0;
        v48 = *(float64x2_t *)(v26 + 12);
        if (_ZF)
          v49 = v44.f64[0];
        else
          v49 = v46.f64[0];
        if (_ZF)
          v44.f64[0] = v46.f64[0];
        if (v44.f64[1] <= v46.f64[1])
          v50 = v44.f64[1];
        else
          v50 = v46.f64[1];
        v51 = *((_OWORD *)v26 + 6);
        if (v44.f64[1] <= v46.f64[1])
          v45 = v46.f64[1];
        v52 = fmax(v26[84], 0.025);
        v53 = *((_OWORD *)v26 + 8);
        v54 = *((_OWORD *)v26 + 9);
        v398 = *(float64x2_t *)(v26 + 28);
        v399 = v53;
        v55 = *((_OWORD *)v26 + 10);
        v400 = v54;
        v401 = v55;
        v56 = *(float64x2_t *)(v26 + 16);
        v57 = *((_OWORD *)v26 + 5);
        v394 = v48;
        v395 = v56;
        v396 = v57;
        v397 = v51;
        v402 = v52;
        v403 = v49;
        v404 = v50;
        v405 = v44.f64[0];
        v406 = v45;
        v58 = (uint64_t *)*((_QWORD *)v33 + 25);
        v59 = *((_QWORD *)v33 + 26);
        if (v59)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v59 + 24))(*((_QWORD *)v33 + 26));
          v61 = v58;
          v60 = *v58;
          v62 = *(_QWORD *)v61[1];
          (*(void (**)(uint64_t))(*(_QWORD *)v59 + 40))(v59);
          v63 = v62 + 232 * v60;
        }
        else
        {
          v63 = *(_QWORD *)v58[1] + 232 * *v58;
        }
        v64 = *(float32x2_t *)(v63 + 80);
        v65 = *(float32x2_t *)(v63 + 88);
        v66 = vcvtq_f64_f32(v64);
        v67 = v66.f64[1];
        v68 = vcvtq_f64_f32(v65);
        v64.i8[0] = vcgt_f32(v64, v65).u8[0];
        v69 = (v64.i8[0] & 1) == 0;
        if ((v64.i8[0] & 1) != 0)
          v70 = v68.f64[0];
        else
          v70 = v66.f64[0];
        if (v69)
          v71 = v68.f64[0];
        else
          v71 = v66.f64[0];
        if (v66.f64[1] <= v68.f64[1])
          v72 = v66.f64[1];
        else
          v72 = v68.f64[1];
        if (v66.f64[1] <= v68.f64[1])
          v67 = v68.f64[1];
        v73 = fmax(v33[84], 0.025);
        v74 = *(float64x2_t *)(v33 + 12);
        v75 = *((_OWORD *)v33 + 6);
        v76 = *((_OWORD *)v33 + 8);
        v77 = *((_OWORD *)v33 + 9);
        v385 = *(float64x2_t *)(v33 + 28);
        v386 = v76;
        v78 = *((_OWORD *)v33 + 10);
        v387 = v77;
        v388 = v78;
        v79 = *(float64x2_t *)(v33 + 16);
        v80 = *((_OWORD *)v33 + 5);
        v381 = v74;
        v382 = v79;
        v383 = v80;
        v384 = v75;
        v389 = v73;
        v390 = v70;
        v391 = v72;
        v392 = v71;
        v393 = v67;
        _V1.D[1] = v398.f64[1];
        _D3 = v385.f64[1];
        __asm { FMLA            D4, D3, V1.D[1] }
        if (_D4 + *(double *)&v399 * *(double *)&v386 < 0.984807753)
          goto LABEL_74;
        v369 = *((_QWORD *)&v399 + 1);
        v364 = *(_QWORD *)&v395.f64[1];
        v370 = v400;
        v371 = v401;
        v88.f64[1] = *((float64_t *)&v396 + 1);
        *(_OWORD *)__p = v396;
        v366 = v397;
        *(_QWORD *)&v88.f64[0] = v399;
        v367 = v394;
        v368 = v395.f64[0];
        *(float64x2_t *)object = vnegq_f64(v398);
        *(_QWORD *)&object[16] = *(_OWORD *)&vnegq_f64(v88);
        v89 = sub_223F8F174((uint64_t)&v394, (uint64_t)&v381, (uint64_t)object, *(double *)&object[16], *(double *)object, v395.f64[0], v394.f64[0], _D4, v74);
        v360 = *((_QWORD *)&v399 + 1);
        v357 = *((_QWORD *)&v397 + 1);
        v361 = v400;
        v362 = v401;
        v90.f64[1] = v394.f64[1];
        v353 = v394;
        v354 = v395;
        *(_QWORD *)&v90.f64[0] = v399;
        v358 = v396;
        v359 = v397;
        v355 = vnegq_f64(v398);
        v356 = (const char *)*(_OWORD *)&vnegq_f64(v90);
        v93 = sub_223F8F174((uint64_t)&v394, (uint64_t)&v381, (uint64_t)&v353, *(double *)&v356, v355.f64[0], *(double *)&v397, *(double *)&v396, v91, v92);
        if (v93 >= v89)
          v93 = v89;
        if (v93 < 0.1)
        {
          v369 = *((_QWORD *)&v386 + 1);
          v364 = *(_QWORD *)&v382.f64[1];
          v370 = v387;
          v371 = v388;
          v96.f64[1] = *((float64_t *)&v383 + 1);
          *(_OWORD *)__p = v383;
          v366 = v384;
          *(_QWORD *)&v96.f64[0] = v386;
          v367 = v381;
          v368 = v382.f64[0];
          *(float64x2_t *)object = vnegq_f64(v385);
          *(_QWORD *)&object[16] = *(_OWORD *)&vnegq_f64(v96);
          v97 = sub_223F8F174((uint64_t)&v381, (uint64_t)&v394, (uint64_t)object, *(double *)&object[16], *(double *)object, v382.f64[0], v381.f64[0], v94, v95);
          v360 = *((_QWORD *)&v386 + 1);
          v357 = *((_QWORD *)&v384 + 1);
          v361 = v387;
          v362 = v388;
          v98.f64[1] = v381.f64[1];
          v353 = v381;
          v354 = v382;
          *(_QWORD *)&v98.f64[0] = v386;
          v358 = v383;
          v359 = v384;
          v355 = vnegq_f64(v385);
          v356 = (const char *)*(_OWORD *)&vnegq_f64(v98);
          v101 = sub_223F8F174((uint64_t)&v381, (uint64_t)&v394, (uint64_t)&v353, *(double *)&v356, v355.f64[0], *(double *)&v384, *(double *)&v383, v99, v100);
          if (v101 >= v97)
            v101 = v97;
          if (v101 < 0.1)
            goto LABEL_74;
        }
        v102 = (int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v26 + 20));
        v103 = (int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v26 + 12));
        v104 = vcvt_f32_f64(*(float64x2_t *)(v33 + 20));
        v105 = vcvt_f32_f64(*(float64x2_t *)(v33 + 12));
        v106 = (float32x2_t)vzip1_s32(v103, v102);
        v107 = (float32x2_t)vzip2_s32(v103, v102);
        v108 = (float32x2_t)vzip2q_s32((int32x4_t)vcvt_hight_f32_f64(*(int32x2_t *)(v26 + 16), *(float64x2_t *)(v26 + 16)), (int32x4_t)vcvt_hight_f32_f64(*(int32x2_t *)(v26 + 24), *(float64x2_t *)(v26 + 24))).u64[0];
        v109 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v106, v105.f32[0]), v107, v105, 1), v108, vcvt_f32_f64(*(float64x2_t *)(v33 + 16)).f32[0]);
        v110 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v106, v104.f32[0]), v107, v104, 1), v108, vcvt_f32_f64(*(float64x2_t *)(v33 + 24)).f32[0]);
        v111 = vsub_f32(vcvt_f32_f64(*(float64x2_t *)(v33 + 36)), vcvt_f32_f64(*(float64x2_t *)(v26 + 36)));
        v112 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v106, v111.f32[0]), v107, v111, 1), v108, vsub_f32(vcvt_f32_f64(*(float64x2_t *)(v33 + 40)), vcvt_f32_f64(*(float64x2_t *)(v26 + 40))).f32[0]);
        v372 = v109;
        *(float32x2_t *)v373 = v110;
        *(float32x2_t *)&v373[8] = v112;
        v113 = vmul_lane_f32(v109, v110, 1).f32[0];
        v114 = vmuls_lane_f32(v110.f32[0], v109, 1);
        *(float *)&v373[16] = v113 - v114;
        v115 = *((_DWORD *)v33 + 46) >= *((_DWORD *)v26 + 46) ? *((_DWORD *)v26 + 46) : *((_DWORD *)v33 + 46);
        if (vabds_f32(v113, v114) < 1.0e-15)
          break;
        v124 = *((_QWORD *)v26 + 25);
        v125 = *((_QWORD *)v26 + 26);
        v126.i32[0] = *(_DWORD *)&v373[4];
        v126.f32[1] = -v109.f32[1];
        v126.f32[2] = -v110.f32[0];
        v126.i32[3] = v109.i32[0];
        v127 = (int8x16_t)vdivq_f32(v126, (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)&v373[4], 3));
        v128 = (float32x2_t)vextq_s8(v127, v127, 8uLL).u64[0];
        v129 = vneg_f32(vmla_laneq_f32(vmul_lane_f32(*(float32x2_t *)v127.i8, *(float32x2_t *)&v373[4], 1), v128, *(float32x4_t *)&v373[4], 2));
        v375 = v127;
        *(float32x2_t *)v127.i8 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v128), *(float32x2_t *)v127.i8);
        v376 = v129;
        v377 = vsub_f32(*(float32x2_t *)v127.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v127.i8, 1)).u32[0];
        LODWORD(v378) = 0;
        *(_QWORD *)object = v124;
        *(_QWORD *)&object[8] = v125;
        if (v125)
          (*(void (**)(uint64_t))(*(_QWORD *)v125 + 24))(v125);
        v130 = *((double *)v33 + 26);
        v353.f64[0] = *((float64_t *)v33 + 25);
        v353.f64[1] = v130;
        if (v130 != 0.0)
          (*(void (**)(float64_t))(**(_QWORD **)&v130 + 24))(COERCE_FLOAT64_T(*(_QWORD *)&v130));
        sub_223FA1AA4((uint64_t **)object, &v353, &v372, (uint64_t)&v375, (float *)&v378, v115);
        if (v130 != 0.0)
          (*(void (**)(float64_t))(**(_QWORD **)&v130 + 40))(COERCE_FLOAT64_T(*(_QWORD *)&v130));
        if (v125)
          (*(void (**)(uint64_t))(*(_QWORD *)v125 + 40))(v125);
        v131 = *(float *)&v378;
        v25 = v340;
        v132 = (uint64_t *)*((_QWORD *)v26 + 27);
        v133 = *v132;
        v134 = v132[1];
        if (*v132 != v134)
        {
LABEL_167:
          while (!*(_BYTE *)(v133 + 224))
          {
            v133 += 232;
            if (v133 == v134)
            {
              v167 = 0.0;
              goto LABEL_170;
            }
          }
        }
LABEL_210:
        v167 = 0.0;
LABEL_211:
        if (v133 != v134)
        {
          v184 = *(_QWORD *)(v133 + 24);
          if (!v184 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v184 + 48))(v184))
          {
            v185 = *(_QWORD *)(v133 + 40);
            if (!v185 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v185 + 48))(v185))
            {
              v186 = *(_QWORD *)(v133 + 56);
              if (!v186 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v186 + 48))(v186))
              {
                v187 = *(_QWORD *)(v133 + 72);
                if ((!v187 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v187 + 48))(v187))
                  && *(_BYTE *)(v133 + 216)
                  && *(_DWORD *)(v133 + 204) + *(_DWORD *)(v133 + 208) >= 3)
                {
                  v167 = v167
                       + (float)((float)(*(float *)(v133 + 88) - *(float *)(v133 + 80))
                               * (float)(*(float *)(v133 + 92) - *(float *)(v133 + 84)));
                }
              }
            }
          }
          while (1)
          {
            v133 += 232;
            if (v133 == v134)
              break;
            if (*(_BYTE *)(v133 + 224))
              goto LABEL_211;
          }
        }
LABEL_170:
        v168 = (uint64_t *)*((_QWORD *)v33 + 27);
        v169 = *v168;
        v170 = v168[1];
        if (*v168 != v170)
        {
          while (!*(_BYTE *)(v169 + 224))
          {
            v169 += 232;
            if (v169 == v170)
            {
              v171 = 0.0;
              goto LABEL_174;
            }
          }
        }
        v171 = 0.0;
LABEL_181:
        if (v169 != v170)
        {
          v174 = *(_QWORD *)(v169 + 24);
          if (!v174 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 48))(v174))
          {
            v175 = *(_QWORD *)(v169 + 40);
            if (!v175 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v175 + 48))(v175))
            {
              v176 = *(_QWORD *)(v169 + 56);
              if (!v176 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v176 + 48))(v176))
              {
                v177 = *(_QWORD *)(v169 + 72);
                if ((!v177 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v177 + 48))(v177))
                  && *(_BYTE *)(v169 + 216)
                  && *(_DWORD *)(v169 + 204) + *(_DWORD *)(v169 + 208) >= 3)
                {
                  v171 = v171
                       + (float)((float)(*(float *)(v169 + 88) - *(float *)(v169 + 80))
                               * (float)(*(float *)(v169 + 92) - *(float *)(v169 + 84)));
                }
              }
            }
          }
          while (1)
          {
            v169 += 232;
            if (v169 == v170)
              break;
            if (*(_BYTE *)(v169 + 224))
              goto LABEL_181;
          }
        }
LABEL_174:
        if (v167 >= v171)
          v172 = v171;
        else
          v172 = v167;
        v173 = v131 / v172;
        if (v173 >= 0.25)
        {
          if (v167 >= v171)
            v178 = v167;
          else
            v178 = v171;
          if ((float)(v131 / v178) >= 0.1 || v173 >= 0.5)
          {
LABEL_205:
            v180 = (unint64_t)(v347 - (_BYTE *)v346) >> 2;
            if (v25 < v180 && v34 < v180)
            {
              v181 = sub_223ED44F8((uint64_t *)&v346, v25);
              v182 = sub_223ED44F8((uint64_t *)&v346, v34);
              if (v181 != v182)
              {
                *((_DWORD *)v346 + v181) = v182;
                --v349;
              }
            }
            goto LABEL_74;
          }
        }
        else if (v173 >= 0.5)
        {
          goto LABEL_205;
        }
        if (v131 >= 0.25)
          goto LABEL_205;
LABEL_74:
        v86 = (float *)*((_QWORD *)v33 + 1);
        if (v86)
        {
          do
          {
            v87 = v86;
            v86 = *(float **)v86;
          }
          while (v86);
        }
        else
        {
          do
          {
            v87 = (float *)*((_QWORD *)v33 + 2);
            _ZF = *(_QWORD *)v87 == (_QWORD)v33;
            v33 = v87;
          }
          while (!_ZF);
        }
        v34 = (v34 + 1);
        v33 = v87;
        if (v87 == v343)
        {
          v27 = (float *)*((_QWORD *)v26 + 1);
          v34 = v338;
          goto LABEL_236;
        }
      }
      v377 = 1065353216;
      v376 = 0;
      v375 = 0uLL;
      v116 = atomic_load((unsigned __int8 *)&qword_2540CE438);
      if ((v116 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE438))
      {
        sub_22455F53C(&v353);
        *(_QWORD *)object = operator new(0x20uLL);
        *(_OWORD *)&object[8] = xmmword_2245B8D00;
        strcpy(*(char **)object, "cv3d.acv.surfacedetection");
        sub_2232300E0((uint64_t **)&v353, (uint64_t)object, &qword_2540CE430);
        if ((object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_guard_release(&qword_2540CE438);
        v25 = v340;
      }
      v374 = qword_2540CE430;
      if (**(int **)(qword_2540CE430 + 56) > 4)
        goto LABEL_166;
      v117 = *(unsigned __int8 *)(qword_2540CE430 + 72);
      v118 = sub_22322F254(qword_2540CE430, "OSLogSurrogateAppender", 1, 0);
      v119 = v118;
      if (!v117 && !v118)
        goto LABEL_166;
      v336 = v117;
      *(_QWORD *)&v353.f64[0] = &v374;
      *(std::chrono::steady_clock::time_point *)&v353.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
      *(std::chrono::system_clock::time_point *)&v354.f64[0] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v354.f64[1]) = 4;
      *(_QWORD *)&v355.f64[0] = "unknown file";
      LODWORD(v355.f64[1]) = 512;
      v356 = "unknown function";
      v357 = 0;
      *(_QWORD *)&v358 = 0;
      v120 = **(_QWORD **)&v353.f64[0];
      v334 = **(_QWORD **)&v353.f64[0];
      if (*(char *)(**(_QWORD **)&v353.f64[0] + 39) < 0)
      {
        v122 = *(const char **)(v120 + 16);
        v121 = *(_QWORD *)(v120 + 24);
        v333 = **(_QWORD **)&v353.f64[0] + 16;
        v135 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v135 & 1) == 0)
        {
LABEL_230:
          if (__cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)&v378);
            if (v380)
            {
              xmmword_255788F40 = v378;
              unk_255788F50 = v379;
            }
            else
            {
              byte_255788F57 = 14;
              strcpy((char *)&xmmword_255788F40, "com.apple.cv3d");
            }
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
        }
      }
      else
      {
        v121 = *(unsigned __int8 *)(**(_QWORD **)&v353.f64[0] + 39);
        v122 = (const char *)(**(_QWORD **)&v353.f64[0] + 16);
        v333 = (uint64_t)v122;
        v123 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v123 & 1) == 0)
          goto LABEL_230;
      }
      if (byte_255788F57 >= 0)
        v136 = (const char *)&xmmword_255788F40;
      else
        v136 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v137 = byte_255788F57;
      else
        v137 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v136, v122);
      if (v137 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      __src = v122;
      if (v137 >= 0x17)
      {
        v139 = (v137 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v137 | 7) != 0x17)
          v139 = v137 | 7;
        v140 = v139 + 1;
        v138 = operator new(v139 + 1);
        *(_QWORD *)&object[16] = v137;
        v364 = v140 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v138;
      }
      else
      {
        HIBYTE(v364) = v137;
        v138 = &object[8];
        if (!v137)
        {
LABEL_122:
          v138[v137] = 0;
          LOBYTE(__p[0]) = 1;
          if (v121 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v121 >= 0x17)
          {
            v143 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v121 | 7) != 0x17)
              v143 = v121 | 7;
            v144 = v143 + 1;
            v141 = (void **)operator new(v143 + 1);
            *(_QWORD *)&v366 = v121;
            *((_QWORD *)&v366 + 1) = v144 | 0x8000000000000000;
            __p[1] = v141;
          }
          else
          {
            HIBYTE(v366) = v121;
            v141 = &__p[1];
            if (!v121)
            {
              LOBYTE(__p[1]) = 0;
              LOBYTE(v367.f64[0]) = 1;
              v142 = *(NSObject **)object;
              if ((SHIBYTE(v366) & 0x80000000) == 0)
                goto LABEL_126;
LABEL_132:
              operator delete(__p[1]);
              v25 = v340;
              if (LOBYTE(__p[0]))
                goto LABEL_133;
              goto LABEL_135;
            }
          }
          memmove(v141, __src, v121);
          *((_BYTE *)v141 + v121) = 0;
          LOBYTE(v367.f64[0]) = 1;
          v142 = *(NSObject **)object;
          if (SHIBYTE(v366) < 0)
            goto LABEL_132;
LABEL_126:
          v25 = v340;
          if (LOBYTE(__p[0]))
          {
LABEL_133:
            if (SHIBYTE(v364) < 0)
              operator delete(*(void **)&object[8]);
          }
LABEL_135:
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v119 && *(_QWORD *)(v119 + 24))
          {
            v145 = _os_log_pack_size();
            v146 = (std::__shared_weak_count_vtbl *)operator new(v145, (std::align_val_t)8uLL);
            v147 = (std::__shared_weak_count *)operator new();
            v148 = v147;
            v147->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v147->__shared_owners_;
            v147->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v147->__shared_weak_owners_ = 0;
            v147[1].__vftable = v146;
            do
              v150 = __ldxr(p_shared_owners);
            while (__stxr(v150 + 1, p_shared_owners));
            do
              v151 = __ldaxr(p_shared_owners);
            while (__stlxr(v151 - 1, p_shared_owners));
            if (!v151)
            {
              ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
              std::__shared_weak_count::__release_weak(v148);
            }
            *(_WORD *)_os_log_pack_fill() = 0;
            v152 = operator new();
            v153 = *(unsigned __int8 *)(v334 + 39);
            v154 = v333;
            if ((v153 & 0x80u) != 0)
            {
              v154 = *(_QWORD *)(v334 + 16);
              v153 = *(_QWORD *)(v334 + 24);
            }
            *(_QWORD *)v152 = v146;
            *(_QWORD *)(v152 + 8) = v146;
            *(_QWORD *)(v152 + 16) = v148;
            *(_QWORD *)(v152 + 24) = 0;
            *(_QWORD *)(v152 + 32) = 0;
            *(_QWORD *)(v152 + 40) = v154;
            *(_QWORD *)(v152 + 48) = v153;
            *(_BYTE *)(v152 + 56) = 16;
            *(_QWORD *)object = v152;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v119 + 24) + 40))(*(_QWORD *)(v119 + 24), object);
            v155 = *(_QWORD *)object;
            *(_QWORD *)object = 0;
            v25 = v340;
            if (v155)
            {
              v156 = *(std::__shared_weak_count **)(v155 + 32);
              if (v156)
              {
                v157 = (unint64_t *)&v156->__shared_owners_;
                do
                  v158 = __ldaxr(v157);
                while (__stlxr(v158 - 1, v157));
                if (!v158)
                {
                  ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                  std::__shared_weak_count::__release_weak(v156);
                }
              }
              v159 = *(std::__shared_weak_count **)(v155 + 16);
              if (v159)
              {
                v160 = (unint64_t *)&v159->__shared_owners_;
                do
                  v161 = __ldaxr(v160);
                while (__stlxr(v161 - 1, v160));
                if (!v161)
                {
                  ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                  std::__shared_weak_count::__release_weak(v159);
                }
              }
              MEMORY[0x227684CE8](v155, 0x10F0C40B62ED6C6);
            }
          }
          else
          {
            os_log_type_enabled(v142, OS_LOG_TYPE_ERROR);
            *(_WORD *)object = 0;
            v162 = (void *)_os_log_send_and_compose_impl();
            if (v162)
              free(v162);
          }
          if (v336)
          {
            sub_22322C138((uint64_t)&v353, "Affine transformation from a quad tree to another is not possible.");
            sub_223182C08((uint64_t)&v353);
          }
          sub_223182C08((uint64_t)&v353);
          v163 = (std::__shared_weak_count *)v358;
          if ((_QWORD)v358)
          {
            v164 = (unint64_t *)(v358 + 8);
            do
              v165 = __ldaxr(v164);
            while (__stlxr(v165 - 1, v164));
            if (!v165)
            {
              ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
              std::__shared_weak_count::__release_weak(v163);
              v131 = 0.0;
              v183 = (uint64_t *)*((_QWORD *)v26 + 27);
              v133 = *v183;
              v134 = v183[1];
              if (*v183 != v134)
                goto LABEL_167;
              goto LABEL_210;
            }
          }
LABEL_166:
          v131 = 0.0;
          v166 = (uint64_t *)*((_QWORD *)v26 + 27);
          v133 = *v166;
          v134 = v166[1];
          if (*v166 != v134)
            goto LABEL_167;
          goto LABEL_210;
        }
      }
      memmove(v138, v136, v137);
      goto LABEL_122;
    }
LABEL_236:
    if (v27)
    {
      do
      {
        v26 = v27;
        v27 = *(float **)v27;
      }
      while (v27);
      v25 = v34;
    }
    else
    {
      do
      {
        v188 = v26;
        v26 = (float *)*((_QWORD *)v26 + 2);
      }
      while (*(float **)v26 != v188);
      v25 = v34;
    }
  }
  v189 = 0;
  v395.f64[0] = 0.0;
  v394.f64[1] = 0.0;
  *(_QWORD *)&v394.f64[0] = &v394.f64[1];
  do
  {
    v191 = sub_223ED44F8((uint64_t *)&v346, v189);
    v192 = v191;
    v193 = *(uint64_t **)&v394.f64[1];
    v194 = (uint64_t **)&v394.f64[1];
    v195 = (uint64_t **)&v394.f64[1];
    if (*(_QWORD *)&v394.f64[1])
    {
      while (1)
      {
        while (1)
        {
          v195 = (uint64_t **)v193;
          v196 = *((_DWORD *)v193 + 8);
          if (v191 >= v196)
            break;
          v193 = *v195;
          v194 = v195;
          if (!*v195)
            goto LABEL_251;
        }
        if (v196 >= v191)
          break;
        v193 = v195[1];
        if (!v193)
        {
          v194 = v195 + 1;
          goto LABEL_251;
        }
      }
      v197 = v195;
    }
    else
    {
LABEL_251:
      v197 = operator new(0x40uLL);
      v197[8] = v192;
      *((_QWORD *)v197 + 6) = 0;
      *((_QWORD *)v197 + 7) = 0;
      *((_QWORD *)v197 + 5) = 0;
      *(_QWORD *)v197 = 0;
      *((_QWORD *)v197 + 1) = 0;
      *((_QWORD *)v197 + 2) = v195;
      *v194 = (uint64_t *)v197;
      v198 = (uint64_t *)v197;
      if (**(_QWORD **)&v394.f64[0])
      {
        v394.f64[0] = **(float64_t **)&v394.f64[0];
        v198 = *v194;
      }
      sub_2231A9A8C(*(uint64_t **)&v394.f64[1], v198);
      ++*(_QWORD *)&v395.f64[0];
    }
    v199 = v351;
    v200 = &v351;
LABEL_257:
    v201 = v200;
    if (v199)
    {
      while (1)
      {
        v200 = (uint64_t **)v199;
        v202 = v199[4];
        if (v202 > v189)
        {
          v199 = *v200;
          goto LABEL_257;
        }
        if (v202 >= v189)
          break;
        v199 = v200[1];
        if (!v199)
        {
          v201 = v200 + 1;
          goto LABEL_262;
        }
      }
      v205 = v200 + 5;
      v207 = (_OWORD *)*((_QWORD *)v197 + 6);
      v206 = *((_QWORD *)v197 + 7);
      if ((unint64_t)v207 < v206)
      {
LABEL_242:
        *v207 = *v205;
        v190 = v207 + 1;
        goto LABEL_243;
      }
    }
    else
    {
LABEL_262:
      v203 = operator new(0x38uLL);
      v203[5] = 0;
      v203[6] = 0;
      v203[4] = v189;
      *v203 = 0;
      v203[1] = 0;
      v203[2] = v200;
      *v201 = v203;
      v204 = v203;
      if (*v350)
      {
        v350 = (uint64_t **)*v350;
        v204 = *v201;
      }
      sub_2231A9A8C(v351, v204);
      ++v352;
      v205 = v203 + 5;
      v207 = (_OWORD *)*((_QWORD *)v197 + 6);
      v206 = *((_QWORD *)v197 + 7);
      if ((unint64_t)v207 < v206)
        goto LABEL_242;
    }
    v208 = (_OWORD *)*((_QWORD *)v197 + 5);
    v209 = v207 - v208;
    v210 = v209 + 1;
    if ((unint64_t)(v209 + 1) >> 60)
      sub_22316E078();
    v211 = v206 - (_QWORD)v208;
    if (v211 >> 3 > v210)
      v210 = v211 >> 3;
    if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFF0)
      v212 = 0xFFFFFFFFFFFFFFFLL;
    else
      v212 = v210;
    if (v212)
    {
      if (v212 >> 60)
        sub_223174E94();
      v213 = (char *)operator new(16 * v212);
      v214 = &v213[16 * v209];
      *(_OWORD *)v214 = *v205;
      v215 = (uint64_t)v214;
      if (v207 == v208)
      {
LABEL_281:
        v190 = v214 + 16;
        *((_QWORD *)v197 + 5) = v215;
        *((_QWORD *)v197 + 6) = v214 + 16;
        *((_QWORD *)v197 + 7) = &v213[16 * v212];
        if (!v207)
          goto LABEL_243;
LABEL_282:
        operator delete(v207);
        goto LABEL_243;
      }
    }
    else
    {
      v213 = 0;
      v214 = (char *)(16 * v209);
      *(_OWORD *)(16 * v209) = *v205;
      v215 = 16 * v209;
      if (v207 == v208)
        goto LABEL_281;
    }
    do
    {
      *(_OWORD *)(v215 - 16) = *(v207 - 1);
      v215 -= 16;
      --v207;
    }
    while (v207 != v208);
    v207 = (_OWORD *)*((_QWORD *)v197 + 5);
    v190 = v214 + 16;
    *((_QWORD *)v197 + 5) = v215;
    *((_QWORD *)v197 + 6) = v214 + 16;
    *((_QWORD *)v197 + 7) = &v213[16 * v212];
    if (v207)
      goto LABEL_282;
LABEL_243:
    *((_QWORD *)v197 + 6) = v190;
    ++v189;
  }
  while ((_DWORD)v189 != (_DWORD)v337);
  v344 = 0;
  v345 = 0;
  v216 = v394.f64[0];
  if (*(float64x2_t **)&v394.f64[0] == (float64x2_t *)&v394.f64[1])
    goto LABEL_312;
  v217 = 0;
  v218 = 0;
  v219 = 0;
  while (2)
  {
    v220 = (_QWORD *)(*(_QWORD *)&v216 + 40);
    if (v219 >= v218)
    {
      v222 = 0xAAAAAAAAAAAAAAABLL * ((v219 - v217) >> 3) + 1;
      if (v222 > 0xAAAAAAAAAAAAAAALL)
        sub_22316E078();
      if (0x5555555555555556 * ((v218 - v217) >> 3) > v222)
        v222 = 0x5555555555555556 * ((v218 - v217) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v218 - v217) >> 3) >= 0x555555555555555)
        v223 = 0xAAAAAAAAAAAAAAALL;
      else
        v223 = v222;
      if (v223 > 0xAAAAAAAAAAAAAAALL)
        sub_223174E94();
      v224 = (char *)operator new(24 * v223);
      v225 = &v224[8 * ((v219 - v217) >> 3)];
      *((_QWORD *)v225 + 1) = 0;
      *((_QWORD *)v225 + 2) = 0;
      *(_OWORD *)v225 = *(_OWORD *)(*(_QWORD *)&v216 + 40);
      *((_QWORD *)v225 + 2) = *(_QWORD *)(*(_QWORD *)&v216 + 56);
      *v220 = 0;
      *(_QWORD *)(*(_QWORD *)&v216 + 48) = 0;
      *(_QWORD *)(*(_QWORD *)&v216 + 56) = 0;
      v226 = v225 + 24;
      if (v219 != v217)
      {
        v227 = v219;
        do
        {
          v228 = *(_OWORD *)(v227 - 24);
          v227 -= 24;
          *(_OWORD *)(v225 - 24) = v228;
          v225 -= 24;
          *((_QWORD *)v225 + 2) = *((_QWORD *)v227 + 2);
          *(_QWORD *)v227 = 0;
          *((_QWORD *)v227 + 1) = 0;
          *((_QWORD *)v227 + 2) = 0;
        }
        while (v227 != v217);
        v229 = v219;
        do
        {
          v231 = (void *)*((_QWORD *)v229 - 3);
          v229 -= 24;
          v230 = v231;
          if (v231)
          {
            *((_QWORD *)v219 - 2) = v230;
            operator delete(v230);
          }
          v219 = v229;
        }
        while (v229 != v217);
      }
      v218 = &v224[24 * v223];
      if (v217)
        operator delete(v217);
      v217 = v225;
      v219 = v226;
      v345 = v226;
      v221 = *(_QWORD **)(*(_QWORD *)&v216 + 8);
      if (v221)
        goto LABEL_306;
      do
      {
LABEL_308:
        v232 = *(_OWORD **)(*(_QWORD *)&v216 + 16);
        _ZF = *(_QWORD *)v232 == *(_QWORD *)&v216;
        v216 = *(double *)&v232;
      }
      while (!_ZF);
    }
    else
    {
      *(_QWORD *)v219 = 0;
      *((_QWORD *)v219 + 1) = 0;
      *((_QWORD *)v219 + 2) = 0;
      *(_OWORD *)v219 = *(_OWORD *)(*(_QWORD *)&v216 + 40);
      *((_QWORD *)v219 + 2) = *(_QWORD *)(*(_QWORD *)&v216 + 56);
      *v220 = 0;
      *(_QWORD *)(*(_QWORD *)&v216 + 48) = 0;
      *(_QWORD *)(*(_QWORD *)&v216 + 56) = 0;
      v219 += 24;
      v345 = v219;
      v221 = *(_QWORD **)(*(_QWORD *)&v216 + 8);
      if (!v221)
        goto LABEL_308;
      do
      {
LABEL_306:
        v232 = v221;
        v221 = (_QWORD *)*v221;
      }
      while (v221);
    }
    v216 = *(double *)&v232;
    if (v232 != (_OWORD *)&v394.f64[1])
      continue;
    break;
  }
  v344 = v217;
LABEL_312:
  sub_22388A7C4(*(_QWORD **)&v394.f64[1]);
  if (v346)
  {
    v347 = (__int8 *)v346;
    operator delete(v346);
  }
  sub_2233FADDC(v351);
  v233 = (uint64_t *)v344;
  v234 = (uint64_t *)v345;
  v235 = v332;
  v332[1] = 0;
  v332[2] = 0;
  *v332 = 0;
  if (v344 == v345)
    goto LABEL_508;
  while (2)
  {
    v237 = (unsigned __int8 *)*v233;
    v236 = (unsigned __int8 *)v233[1];
    if ((unsigned __int8 *)*v233 == v236)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Tracker/PlaneTrackerImpl.cpp", 229, (uint64_t)"!ids.empty()", 12, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v237 = (unsigned __int8 *)*v233;
      v236 = (unsigned __int8 *)v233[1];
      v239 = *(double *)*v233;
      v238 = *(double *)(*v233 + 8);
      if ((unsigned __int8 *)*v233 == v236)
        goto LABEL_366;
    }
    else
    {
      v239 = *(double *)v237;
      v238 = *((double *)v237 + 1);
    }
    if (!*(_QWORD *)v343)
LABEL_517:
      sub_223198218("map::at:  key not found");
    v240 = 0;
    v241 = 0;
    v242 = v237;
    while (2)
    {
      v243 = *v242;
      v244 = *(uint64_t **)v343;
      v245 = v343;
      while (2)
      {
        while (2)
        {
          v246 = v245;
          v245 = (float *)v244;
          v247 = *((unsigned __int8 *)v244 + 32);
          _CF = v243 >= v247;
          if (v243 != v247)
          {
            v249 = *v242;
            goto LABEL_356;
          }
          v249 = v242[1];
          v247 = *((unsigned __int8 *)v245 + 33);
          _CF = v249 >= v247;
          if (v249 != v247)
            goto LABEL_356;
          v249 = v242[2];
          v247 = *((unsigned __int8 *)v245 + 34);
          _CF = v249 >= v247;
          if (v249 != v247)
            goto LABEL_356;
          v249 = v242[3];
          v247 = *((unsigned __int8 *)v245 + 35);
          _CF = v249 >= v247;
          if (v249 != v247
            || (v249 = v242[4], v247 = *((unsigned __int8 *)v245 + 36), _CF = v249 >= v247, v249 != v247)
            || (v249 = v242[5], v247 = *((unsigned __int8 *)v245 + 37), _CF = v249 >= v247, v249 != v247))
          {
LABEL_356:
            if (!_CF)
              goto LABEL_326;
LABEL_358:
            if (v247 >= v249)
              goto LABEL_361;
            v252 = (uint64_t *)*((_QWORD *)v245 + 1);
            v245 += 2;
            v244 = v252;
            if (!v252)
              goto LABEL_517;
            continue;
          }
          break;
        }
        v250 = v242[6];
        v251 = *((unsigned __int8 *)v245 + 38);
        if (v250 != v251)
          goto LABEL_343;
        v250 = v242[7];
        v251 = *((unsigned __int8 *)v245 + 39);
        if (v250 != v251)
          goto LABEL_343;
        v250 = v242[8];
        v251 = *((unsigned __int8 *)v245 + 40);
        if (v250 != v251)
          goto LABEL_343;
        v250 = v242[9];
        v251 = *((unsigned __int8 *)v245 + 41);
        if (v250 != v251)
          goto LABEL_343;
        v250 = v242[10];
        v251 = *((unsigned __int8 *)v245 + 42);
        if (v250 != v251)
          goto LABEL_343;
        v250 = v242[11];
        v251 = *((unsigned __int8 *)v245 + 43);
        if (v250 != v251)
          goto LABEL_343;
        v250 = v242[12];
        v251 = *((unsigned __int8 *)v245 + 44);
        if (v250 != v251
          || (v250 = v242[13], v251 = *((unsigned __int8 *)v245 + 45), v250 != v251)
          || (v250 = v242[14], v251 = *((unsigned __int8 *)v245 + 46), v250 != v251)
          || (v250 = v242[15], v251 = *((unsigned __int8 *)v245 + 47), v250 != v251))
        {
LABEL_343:
          if (v250 < v251)
          {
LABEL_326:
            v244 = *(uint64_t **)v245;
            if (!*(_QWORD *)v245)
              goto LABEL_517;
            continue;
          }
        }
        break;
      }
      v247 = *((unsigned __int8 *)v245 + 38);
      v249 = v242[6];
      if (v247 != v249)
        goto LABEL_358;
      v247 = *((unsigned __int8 *)v245 + 39);
      v249 = v242[7];
      if (v247 != v249)
        goto LABEL_358;
      v247 = *((unsigned __int8 *)v245 + 40);
      v249 = v242[8];
      if (v247 != v249)
        goto LABEL_358;
      v247 = *((unsigned __int8 *)v245 + 41);
      v249 = v242[9];
      if (v247 != v249)
        goto LABEL_358;
      v247 = *((unsigned __int8 *)v245 + 42);
      v249 = v242[10];
      if (v247 != v249)
        goto LABEL_358;
      v247 = *((unsigned __int8 *)v245 + 43);
      v249 = v242[11];
      if (v247 != v249)
        goto LABEL_358;
      v247 = *((unsigned __int8 *)v245 + 44);
      v249 = v242[12];
      if (v247 != v249)
        goto LABEL_358;
      v247 = *((unsigned __int8 *)v245 + 45);
      v249 = v242[13];
      if (v247 != v249)
        goto LABEL_358;
      v247 = *((unsigned __int8 *)v245 + 46);
      v249 = v242[14];
      if (v247 != v249)
        goto LABEL_358;
      v247 = *((unsigned __int8 *)v245 + 47);
      v249 = v242[15];
      if (v247 != v249)
        goto LABEL_358;
LABEL_361:
      v253 = *(_QWORD *)v246;
      if (!*(_QWORD *)v246)
        goto LABEL_517;
      if (*(_BYTE *)(v253 + 856))
      {
        v254 = *(_DWORD *)(v253 + 824);
        if (v240 && v241 <= v254)
        {
          v240 = 1;
        }
        else
        {
          v239 = *(double *)v242;
          v238 = *((double *)v242 + 1);
          v240 = 1;
          v241 = v254;
        }
      }
      v242 += 16;
      if (v242 != v236)
        continue;
      break;
    }
LABEL_366:
    v381.f64[0] = v239;
    v381.f64[1] = v238;
    v255 = (float64x2_t *)v236;
    if (v237 != v236)
    {
      while (*(_QWORD *)v237 != *(_QWORD *)&v381.f64[0] || *((_QWORD *)v237 + 1) != *(_QWORD *)&v381.f64[1])
      {
        v237 += 16;
        if (v237 == v236)
        {
          v255 = (float64x2_t *)v236;
          goto LABEL_374;
        }
      }
      v255 = (float64x2_t *)v237;
    }
LABEL_374:
    v257 = *v255;
    v258 = *((float64x2_t *)v236 - 1);
    *v255 = v258;
    *((float64x2_t *)v236 - 1) = v257;
    v259 = v233[1] - 16;
    v233[1] = v259;
    v260 = *(uint64_t **)v343;
    if (!*(_QWORD *)v343)
LABEL_519:
      sub_223198218("map::at:  key not found");
    v261 = BYTE1(v239);
    v262 = LOBYTE(v239);
    v263 = BYTE2(v239);
    v264 = BYTE3(v239);
    v265 = BYTE4(v239);
    v266 = BYTE5(v239);
    v267 = BYTE6(v239);
    v268 = HIBYTE(*(_QWORD *)&v239);
    v269 = LOBYTE(v238);
    v270 = BYTE1(v238);
    v271 = BYTE2(v238);
    v272 = BYTE3(v238);
    v273 = BYTE4(v238);
    v274 = BYTE5(v238);
    v275 = BYTE6(v238);
    v276 = HIBYTE(*(_QWORD *)&v238);
    while (2)
    {
      while (2)
      {
        v277 = *((unsigned __int8 *)v260 + 32);
        if (v277 != v262)
        {
          v280 = v262;
          if (v277 > v262)
            goto LABEL_376;
LABEL_414:
          if (v277 >= v280)
            goto LABEL_417;
          v260 = (uint64_t *)v260[1];
          if (!v260)
            goto LABEL_519;
          continue;
        }
        break;
      }
      v277 = *((unsigned __int8 *)v260 + 33);
      if (v277 != v261)
      {
        v280 = v261;
        if (v277 > v261)
          goto LABEL_376;
        goto LABEL_414;
      }
      v277 = *((unsigned __int8 *)v260 + 34);
      if (v277 != v263)
      {
        v280 = v263;
        if (v277 > v263)
          goto LABEL_376;
        goto LABEL_414;
      }
      v277 = *((unsigned __int8 *)v260 + 35);
      if (v277 != v264)
      {
        v280 = v264;
        if (v277 > v264)
          goto LABEL_376;
        goto LABEL_414;
      }
      v278 = *((unsigned __int8 *)v260 + 36);
      v279 = v265;
      if (v278 != v265)
        goto LABEL_393;
      v278 = *((unsigned __int8 *)v260 + 37);
      v279 = v266;
      if (v278 != v266)
        goto LABEL_393;
      v278 = *((unsigned __int8 *)v260 + 38);
      v279 = v267;
      if (v278 != v267)
        goto LABEL_393;
      v278 = *((unsigned __int8 *)v260 + 39);
      v279 = v268;
      if (v278 != (_DWORD)v268)
        goto LABEL_393;
      v278 = *((unsigned __int8 *)v260 + 40);
      v279 = v269;
      if (v278 != v269)
        goto LABEL_393;
      v278 = *((unsigned __int8 *)v260 + 41);
      v279 = v270;
      if (v278 != v270)
        goto LABEL_393;
      v278 = *((unsigned __int8 *)v260 + 42);
      v279 = v271;
      if (v278 != v271)
        goto LABEL_393;
      v278 = *((unsigned __int8 *)v260 + 43);
      v279 = v272;
      if (v278 != v272)
        goto LABEL_393;
      v278 = *((unsigned __int8 *)v260 + 44);
      v279 = v273;
      if (v278 != v273
        || (v278 = *((unsigned __int8 *)v260 + 45), v279 = v274, v278 != v274)
        || (v278 = *((unsigned __int8 *)v260 + 46), v279 = v275, v278 != v275)
        || (v278 = *((unsigned __int8 *)v260 + 47), v279 = v276, v278 != (_DWORD)v276))
      {
LABEL_393:
        if (v279 < v278)
        {
LABEL_376:
          v260 = (uint64_t *)*v260;
          if (!v260)
            goto LABEL_519;
          continue;
        }
      }
      break;
    }
    v277 = *((unsigned __int8 *)v260 + 36);
    v280 = v265;
    if (v277 != v265)
      goto LABEL_414;
    v277 = *((unsigned __int8 *)v260 + 37);
    v280 = v266;
    if (v277 != v266)
      goto LABEL_414;
    v277 = *((unsigned __int8 *)v260 + 38);
    v280 = v267;
    if (v277 != v267)
      goto LABEL_414;
    v277 = *((unsigned __int8 *)v260 + 39);
    v280 = v268;
    if (v277 != (_DWORD)v268)
      goto LABEL_414;
    v277 = *((unsigned __int8 *)v260 + 40);
    v280 = v269;
    if (v277 != v269)
      goto LABEL_414;
    v277 = *((unsigned __int8 *)v260 + 41);
    v280 = v270;
    if (v277 != v270)
      goto LABEL_414;
    v277 = *((unsigned __int8 *)v260 + 42);
    v280 = v271;
    if (v277 != v271)
      goto LABEL_414;
    v277 = *((unsigned __int8 *)v260 + 43);
    v280 = v272;
    if (v277 != v272)
      goto LABEL_414;
    v277 = *((unsigned __int8 *)v260 + 44);
    v280 = v273;
    if (v277 != v273)
      goto LABEL_414;
    v277 = *((unsigned __int8 *)v260 + 45);
    v280 = v274;
    if (v277 != v274)
      goto LABEL_414;
    v277 = *((unsigned __int8 *)v260 + 46);
    v280 = v275;
    if (v277 != v275)
      goto LABEL_414;
    v277 = *((unsigned __int8 *)v260 + 47);
    v280 = v276;
    if (v277 != (_DWORD)v276)
      goto LABEL_414;
LABEL_417:
    v341 = v233;
    v281 = (float64x2_t *)*v233;
    v282 = v259;
    if (*v233 == v259)
      goto LABEL_479;
    v283 = (float64x2_t **)(v260 + 104);
    while (2)
    {
      v285 = *(uint64_t **)v343;
      if (!*(_QWORD *)v343)
LABEL_518:
        sub_223198218("map::at:  key not found");
      v286 = LOBYTE(v281->f64[0]);
      while (2)
      {
        while (2)
        {
          v287 = *((unsigned __int8 *)v285 + 32);
          v288 = v286 >= v287;
          if (v286 != v287)
          {
            v289 = LOBYTE(v281->f64[0]);
LABEL_454:
            if (!v288)
              goto LABEL_424;
LABEL_456:
            if (v287 >= v289)
              goto LABEL_459;
            v285 = (uint64_t *)v285[1];
            if (!v285)
              goto LABEL_518;
            continue;
          }
          break;
        }
        v289 = BYTE1(v281->f64[0]);
        v287 = *((unsigned __int8 *)v285 + 33);
        v288 = v289 >= v287;
        if (v289 != v287)
          goto LABEL_454;
        v289 = BYTE2(v281->f64[0]);
        v287 = *((unsigned __int8 *)v285 + 34);
        v288 = v289 >= v287;
        if (v289 != v287)
          goto LABEL_454;
        v289 = BYTE3(v281->f64[0]);
        v287 = *((unsigned __int8 *)v285 + 35);
        v288 = v289 >= v287;
        if (v289 != v287)
          goto LABEL_454;
        v289 = BYTE4(v281->f64[0]);
        v287 = *((unsigned __int8 *)v285 + 36);
        v288 = v289 >= v287;
        if (v289 != v287)
          goto LABEL_454;
        v289 = BYTE5(v281->f64[0]);
        v287 = *((unsigned __int8 *)v285 + 37);
        v288 = v289 >= v287;
        if (v289 != v287)
          goto LABEL_454;
        v290 = BYTE6(v281->f64[0]);
        v291 = *((unsigned __int8 *)v285 + 38);
        if (v290 != v291)
          goto LABEL_441;
        v290 = HIBYTE(v281->f64[0]);
        v291 = *((unsigned __int8 *)v285 + 39);
        if (v290 != v291)
          goto LABEL_441;
        v290 = LOBYTE(v281->f64[1]);
        v291 = *((unsigned __int8 *)v285 + 40);
        if (v290 != v291)
          goto LABEL_441;
        v290 = BYTE1(v281->f64[1]);
        v291 = *((unsigned __int8 *)v285 + 41);
        if (v290 != v291)
          goto LABEL_441;
        v290 = BYTE2(v281->f64[1]);
        v291 = *((unsigned __int8 *)v285 + 42);
        if (v290 != v291)
          goto LABEL_441;
        v290 = BYTE3(v281->f64[1]);
        v291 = *((unsigned __int8 *)v285 + 43);
        if (v290 != v291)
          goto LABEL_441;
        v290 = BYTE4(v281->f64[1]);
        v291 = *((unsigned __int8 *)v285 + 44);
        if (v290 != v291
          || (v290 = BYTE5(v281->f64[1]), v291 = *((unsigned __int8 *)v285 + 45), v290 != v291)
          || (v290 = BYTE6(v281->f64[1]), v291 = *((unsigned __int8 *)v285 + 46), v290 != v291)
          || (v290 = HIBYTE(v281->f64[1]), v291 = *((unsigned __int8 *)v285 + 47), v290 != v291))
        {
LABEL_441:
          if (v290 < v291)
          {
LABEL_424:
            v285 = (uint64_t *)*v285;
            if (!v285)
              goto LABEL_518;
            continue;
          }
        }
        break;
      }
      v287 = *((unsigned __int8 *)v285 + 38);
      v289 = BYTE6(v281->f64[0]);
      if (v287 != v289)
        goto LABEL_456;
      v287 = *((unsigned __int8 *)v285 + 39);
      v289 = HIBYTE(v281->f64[0]);
      if (v287 != v289)
        goto LABEL_456;
      v287 = *((unsigned __int8 *)v285 + 40);
      v289 = LOBYTE(v281->f64[1]);
      if (v287 != v289)
        goto LABEL_456;
      v287 = *((unsigned __int8 *)v285 + 41);
      v289 = BYTE1(v281->f64[1]);
      if (v287 != v289)
        goto LABEL_456;
      v287 = *((unsigned __int8 *)v285 + 42);
      v289 = BYTE2(v281->f64[1]);
      if (v287 != v289)
        goto LABEL_456;
      v287 = *((unsigned __int8 *)v285 + 43);
      v289 = BYTE3(v281->f64[1]);
      if (v287 != v289)
        goto LABEL_456;
      v287 = *((unsigned __int8 *)v285 + 44);
      v289 = BYTE4(v281->f64[1]);
      if (v287 != v289)
        goto LABEL_456;
      v287 = *((unsigned __int8 *)v285 + 45);
      v289 = BYTE5(v281->f64[1]);
      if (v287 != v289)
        goto LABEL_456;
      v287 = *((unsigned __int8 *)v285 + 46);
      v289 = BYTE6(v281->f64[1]);
      if (v287 != v289)
        goto LABEL_456;
      v287 = *((unsigned __int8 *)v285 + 47);
      v289 = HIBYTE(v281->f64[1]);
      if (v287 != v289)
        goto LABEL_456;
LABEL_459:
      sub_223FA639C((float64x2_t *)v260 + 3, a1, (uint64_t)(v285 + 6), v257, v258);
      if (*((_BYTE *)v260 + 856) && *((_BYTE *)v285 + 856))
      {
        v292 = (float64x2_t *)v260[105];
        v293 = v260[106];
        if ((unint64_t)v292 < v293)
        {
          v257 = *v281;
          *v292 = *v281;
          f64 = (_OWORD *)v292[1].f64;
          goto LABEL_420;
        }
        v294 = *v283;
        v295 = v292 - *v283;
        v296 = v295 + 1;
        if ((unint64_t)(v295 + 1) >> 60)
          sub_22316E078();
        v297 = v293 - (_QWORD)v294;
        if (v297 >> 3 > v296)
          v296 = v297 >> 3;
        if ((unint64_t)v297 >= 0x7FFFFFFFFFFFFFF0)
          v298 = 0xFFFFFFFFFFFFFFFLL;
        else
          v298 = v296;
        if (v298)
        {
          if (v298 >> 60)
            sub_223174E94();
          v299 = (char *)operator new(16 * v298);
          v300 = (float64x2_t *)&v299[16 * v295];
          v257 = *v281;
          *v300 = *v281;
          v301 = (uint64_t)v300;
          if (v292 == v294)
          {
LABEL_476:
            v260[104] = v301;
            f64 = (_OWORD *)v300[1].f64;
            v260[105] = (uint64_t)&v300[1];
            v260[106] = (uint64_t)&v299[16 * v298];
            if (v292)
              goto LABEL_477;
            goto LABEL_420;
          }
        }
        else
        {
          v299 = 0;
          v300 = (float64x2_t *)(16 * v295);
          v257 = *v281;
          *(float64x2_t *)(16 * v295) = *v281;
          v301 = 16 * v295;
          if (v292 == v294)
            goto LABEL_476;
        }
        do
        {
          v257 = v292[-1];
          *(float64x2_t *)(v301 - 16) = v257;
          v301 -= 16;
          --v292;
        }
        while (v292 != v294);
        v292 = *v283;
        v260[104] = v301;
        f64 = (_OWORD *)v300[1].f64;
        v260[105] = (uint64_t)&v300[1];
        v260[106] = (uint64_t)&v299[16 * v298];
        if (v292)
LABEL_477:
          operator delete(v292);
LABEL_420:
        v260[105] = (uint64_t)f64;
      }
      if (++v281 != (float64x2_t *)v259)
        continue;
      break;
    }
    v234 = (uint64_t *)v345;
    v259 = *v341;
    v282 = v341[1];
    v235 = v332;
LABEL_479:
    v303 = (_OWORD *)*v235;
    v302 = (_OWORD *)v235[1];
    v304 = ((uint64_t)v302 - *v235) >> 5;
    v305 = v304 + ((v282 - v259) >> 4);
    if (v305 > (v235[2] - *v235) >> 5)
    {
      if (v305 >> 59)
        sub_22316E078();
      v306 = (char *)operator new(32 * v305);
      v307 = &v306[32 * v304];
      if (v302 != v303)
      {
        v308 = &v306[32 * v304];
        do
        {
          v309 = *(v302 - 1);
          v307 = v308 - 32;
          *((_OWORD *)v308 - 2) = *(v302 - 2);
          *((_OWORD *)v308 - 1) = v309;
          v302 -= 2;
          v308 -= 32;
        }
        while (v302 != v303);
      }
      *v235 = (uint64_t)v307;
      v235[1] = (uint64_t)&v306[32 * v304];
      v235[2] = (uint64_t)&v306[32 * v305];
      if (v303)
        operator delete(v303);
    }
    v310 = (float64x2_t *)*v341;
    v311 = (float64x2_t *)v341[1];
    if ((float64x2_t *)*v341 != v311)
    {
      v312 = (float64x2_t *)v235[1];
      do
      {
        v394 = *v310;
        v395 = v381;
        v315 = v235[2];
        if ((unint64_t)v312 < v315)
        {
          v313 = v395;
          *v312 = v394;
          v312[1] = v313;
          v314 = v312 + 2;
        }
        else
        {
          v316 = (float64x2_t *)*v235;
          v317 = ((uint64_t)v312 - *v235) >> 5;
          v318 = v317 + 1;
          if ((unint64_t)(v317 + 1) >> 59)
            sub_22316E078();
          v319 = v315 - (_QWORD)v316;
          if (v319 >> 4 > v318)
            v318 = v319 >> 4;
          if ((unint64_t)v319 >= 0x7FFFFFFFFFFFFFE0)
            v320 = 0x7FFFFFFFFFFFFFFLL;
          else
            v320 = v318;
          if (v320)
          {
            if (v320 >> 59)
              sub_223174E94();
            v321 = (char *)operator new(32 * v320);
            v322 = v395;
            v323 = &v321[32 * v317];
            *(float64x2_t *)v323 = v394;
            *((float64x2_t *)v323 + 1) = v322;
            v324 = (uint64_t)v323;
            if (v312 != v316)
            {
              do
              {
LABEL_502:
                v326 = v312[-1];
                *(float64x2_t *)(v324 - 32) = v312[-2];
                *(float64x2_t *)(v324 - 16) = v326;
                v324 -= 32;
                v312 -= 2;
              }
              while (v312 != v316);
              v312 = v316;
              v314 = (float64x2_t *)(v323 + 32);
              *v235 = v324;
              v235[1] = (uint64_t)(v323 + 32);
              v235[2] = (uint64_t)&v321[32 * v320];
              if (!v316)
                goto LABEL_489;
LABEL_506:
              operator delete(v312);
              goto LABEL_489;
            }
          }
          else
          {
            v321 = 0;
            v325 = v395;
            v323 = (char *)(32 * v317);
            *(float64x2_t *)v323 = v394;
            *((float64x2_t *)v323 + 1) = v325;
            v324 = 32 * v317;
            if (v312 != v316)
              goto LABEL_502;
          }
          v314 = (float64x2_t *)(v323 + 32);
          *v235 = v324;
          v235[1] = (uint64_t)(v323 + 32);
          v235[2] = (uint64_t)&v321[32 * v320];
          if (v312)
            goto LABEL_506;
        }
LABEL_489:
        v235[1] = (uint64_t)v314;
        ++v310;
        v312 = v314;
      }
      while (v310 != v311);
    }
    v233 = v341 + 3;
    if (v341 + 3 != v234)
      continue;
    break;
  }
  v234 = (uint64_t *)v344;
LABEL_508:
  if (v234)
  {
    v327 = v345;
    v328 = v234;
    if (v345 != (char *)v234)
    {
      v329 = v345;
      do
      {
        v331 = (void *)*((_QWORD *)v329 - 3);
        v329 -= 24;
        v330 = v331;
        if (v331)
        {
          *((_QWORD *)v327 - 2) = v330;
          operator delete(v330);
        }
        v327 = v329;
      }
      while (v329 != (char *)v234);
      v328 = v344;
    }
    operator delete(v328);
  }
}

void sub_223F9A1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,_QWORD *a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;

  __cxa_guard_abort(&qword_255788F58);
  sub_223182C08((uint64_t)&a37);
  v46 = (std::__shared_weak_count *)a45;
  if (a45)
  {
    v47 = (unint64_t *)(a45 + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (__p)
    operator delete(__p);
  sub_2233FADDC(a35);
  _Unwind_Resume(a1);
}

void sub_223F9A530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  v29 = *(void **)v27;
  if (*(_QWORD *)v27)
  {
    *(_QWORD *)(v27 + 8) = v29;
    operator delete(v29);
  }
  sub_22317C838(&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_223F9A558(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _BYTE *v5;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  int v34;
  char v35;

  if (a2)
  {
    v4 = 0;
    v5 = (_BYTE *)(a3 + 192);
    while (1)
    {
      if (*(v5 - 8) && *v5 == 1)
      {
        v7 = (double *)*((_QWORD *)v5 - 4);
        v8 = *v7;
        if (v7[1] > *v7)
          v8 = v7[1];
        v9 = v7[2];
        v10 = v7[3];
        v11 = v9 <= v8 ? v8 : v7[2];
        v12 = v10 > v11 ? v7[3] : v11;
        v13 = v7[4];
        v14 = v7[5];
        v15 = v13 > v12 ? v7[4] : v12;
        v16 = v14 > v15 ? v7[5] : v15;
        v17 = v7[6];
        v18 = v7[7];
        v19 = v17 > v16 ? v7[6] : v16;
        v20 = v18 > v19 ? v7[7] : v19;
        v21 = v7[8];
        v22 = v7[9];
        v23 = v21 > v20 ? v7[8] : v20;
        v24 = v22 > v23 ? v7[9] : v23;
        if (v7[10] <= v24)
        {
          v25 = v22 <= v23;
        }
        else
        {
          v24 = v7[10];
          v25 = 0;
        }
        v26 = v25 && v21 <= v20;
        v27 = v26 && v18 <= v19;
        v28 = v27 && v17 <= v16;
        v29 = v28 && v7[11] <= v24;
        v30 = v29 && v13 <= v12;
        v31 = v30 && v14 <= v15;
        v32 = !v31 || v9 <= v8;
        if (!v32 && v10 <= v11)
          break;
      }
      v5 += 200;
      v4 += 16;
      if (!--a2)
        goto LABEL_67;
    }
    v34 = *(unsigned __int8 *)(result + 40);
    *(_OWORD *)(result + 24) = *(_OWORD *)(*a4 + v4);
    if (!v34)
      *(_BYTE *)(result + 40) = 1;
    *(_BYTE *)(result + 41) = 3;
  }
  else
  {
LABEL_67:
    if (!*(_BYTE *)(result + 41) || (v35 = *(_BYTE *)(result + 41) - 1, (*(_BYTE *)(result + 41) = v35) == 0))
    {
      if (*(_BYTE *)(result + 40))
        *(_BYTE *)(result + 40) = 0;
    }
  }
  return result;
}

void sub_223F9A680(int a1@<W0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, float64_t *a4@<X3>, uint64_t a5@<X4>, __int128 *a6@<X8>, float64x2_t a7@<Q7>)
{
  uint64_t **v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  uint64_t *v36;
  _OWORD *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  double v58;
  __int128 v59;
  __int128 v60;
  float64x2_t v61;
  __int128 v62;
  float32x2_t **v63;
  float32x2_t **v64;
  int8x16_t v65;
  int8x16_t v66;
  float32x2_t *v67;
  float32x2_t v68;
  int8x16_t v69;
  uint64_t *v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float64x2_t v82;
  double v83;
  float64x2_t v84;
  double v86;
  double v87;
  double v88;
  double v89;
  float64x2_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  float64x2_t v99;
  double v100;
  float64x2_t v101;
  double v102;
  float64x2_t v103;
  double v104;
  double v105;
  float64x2_t v106;
  float64x2_t v107;
  double v108;
  float64x2_t v109;
  double v110;
  float64x2_t v111;
  double v112;
  _OWORD *v113;
  uint64_t *v114;
  uint64_t **v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  unsigned __int8 *v120;
  unsigned __int8 *v121;
  unsigned __int8 *v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  int32x4_t v129;
  float32x2_t v130;
  float32x2_t v131;
  uint64_t *v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  float32x2_t **v139;
  float32x4_t v140;
  int32x4_t v141;
  int32x2_t v142;
  int32x2_t v143;
  float64x2_t v144;
  double v145;
  float32x2_t v146;
  float32x2_t v147;
  float32x2_t v148;
  float32x2_t v149;
  float32x4_t v150;
  float32x2_t v151;
  float32x2_t *v152;
  float32x2_t *v153;
  size_t v154;
  float32x2_t v155;
  float32x2_t v156;
  uint64_t v157;
  uint64_t v158;
  __int8 v159;
  float v160;
  float v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  double *v173;
  float64_t v174;
  float64_t v175;
  uint64_t v176;
  uint64_t v177;
  float64_t v178;
  float64_t v179;
  float64_t v180;
  uint64_t v181;
  unint64_t v182;
  float64_t *v183;
  float64_t v184;
  float64_t v185;
  float64_t v186;
  uint64_t v187;
  unint64_t v188;
  float64_t *v189;
  uint64_t v190;
  uint64_t v191;
  float64_t v192;
  uint64_t v193;
  unint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  float64_t v198;
  uint64_t v199;
  unint64_t v200;
  _QWORD *v201;
  int v202;
  char v203;
  float64x2_t *v204;
  int64_t v205;
  unint64_t i;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  float v211;
  float64_t v212;
  __n128 v213;
  float v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t **v217;
  uint64_t *v218;
  uint64_t *v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  double v223;
  double v224;
  __n128 v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  float32x2_t *v231;
  float *v232;
  float v233;
  uint64_t v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  int v241;
  float32x2_t v242;
  float v243;
  BOOL v244;
  float v245;
  double *v246;
  float64_t v247;
  float64_t v248;
  uint64_t v249;
  uint64_t v250;
  float64_t v251;
  float64_t v252;
  float64_t v253;
  uint64_t v254;
  unint64_t v255;
  float64_t *v256;
  float64_t v257;
  float64_t v258;
  float64_t v259;
  uint64_t v260;
  unint64_t v261;
  float64_t *v262;
  uint64_t v263;
  uint64_t v264;
  float64_t v265;
  uint64_t v266;
  unint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t v270;
  float64_t v271;
  uint64_t v272;
  unint64_t v273;
  _QWORD *v274;
  int v275;
  __int128 v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t *v280;
  uint64_t *v281;
  uint64_t *v282;
  unsigned __int8 *v283;
  _OWORD *v284;
  __int128 v285;
  int8x16_t v286;
  __int128 v287;
  __int128 v288;
  float64x2_t v289;
  float64x2_t v290;
  __int128 v291;
  __int128 v292;
  uint64_t v293;
  _QWORD *v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  const void *v309;
  uint64_t v310;
  char *v311;
  size_t v312;
  _QWORD *v313;
  _QWORD *v314;
  uint64_t v315;
  _QWORD *v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  _QWORD *v321;
  _QWORD *v322;
  _OWORD *v323;
  __int128 *v324;
  uint64_t v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  const void *v330;
  int64_t v331;
  char *v332;
  char *v333;
  uint64_t *v334;
  float32x2_t v337;
  float32x2_t v338;
  int32x4_t v339;
  float v340;
  float32x4_t v341;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  double v349;
  float32x2_t **v350;
  float64x2_t v351;
  float64x2_t v352;
  __int128 v353;
  __int128 v354;
  int8x16_t v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  double v359;
  int8x16_t v360;
  int8x16_t v361;
  char v362;
  uint64_t v363;
  __int128 v364;
  char v365;
  uint64_t v366;
  int v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  int v385;
  char v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  char v393;
  uint64_t v394;
  __int128 v395;
  __int128 v396;
  uint64_t v397;
  _BYTE *v398;
  _BYTE *v399;
  _QWORD *v400;
  _QWORD *v401;
  uint64_t v402;
  _BYTE *v403;
  _BYTE *v404;
  char v405;
  void *__p;
  unsigned __int8 *v407;
  unsigned __int8 *v408;
  float64x2_t v409;
  float64x2_t v410;
  __int128 v411;
  __int128 v412;
  float64x2_t v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  double v417;
  double v418;
  double v419;
  double v420;
  double v421;
  float64x2_t v422;
  double v423;
  float64_t v424;
  __int128 v425;
  __int128 v426;
  float64x2_t v427;
  float64_t v428;
  uint64_t v429;
  __int128 v430;
  __int128 v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  double v435;
  uint64_t v436;
  __int128 v437;
  uint64_t v438;
  uint64_t v439;
  __int128 v440;
  __int128 v441;
  uint64_t v442;

  v7 = a2;
  v442 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a3 + 192) != 1)
    goto LABEL_105;
  v8 = *(double **)(a3 + 160);
  v9 = *v8;
  if (v8[1] > *v8)
    v9 = v8[1];
  v10 = v8[2];
  v11 = v8[3];
  v12 = v10 <= v9 ? v9 : v8[2];
  v13 = v11 > v12 ? v8[3] : v12;
  v14 = v8[4];
  v15 = v8[5];
  a7.f64[0] = v14 > v13 ? v8[4] : v13;
  v16 = v15 > a7.f64[0] ? v8[5] : a7.f64[0];
  v17 = v8[6];
  v18 = v8[7];
  v19 = v17 > v16 ? v8[6] : v16;
  v20 = v18 > v19 ? v8[7] : v19;
  v21 = v8[8];
  v22 = v8[9];
  v23 = v21 > v20 ? v8[8] : v20;
  v24 = v22 > v23 ? v8[9] : v23;
  v25 = v8[10];
  v26 = v25 > v24 ? v8[10] : v24;
  if (!*((_BYTE *)a2 + 40))
    goto LABEL_105;
  v27 = v25 <= v24 && v22 <= v23;
  v28 = v27 && v21 <= v20;
  v29 = v28 && v8[11] <= v26;
  v30 = v29 && v17 <= v16;
  v31 = v30 && v18 <= v19;
  v32 = v31 && v14 <= v13;
  v33 = v32 && v15 <= a7.f64[0];
  v34 = !v33 || v10 <= v9;
  v35 = !v34 && v11 <= v12;
  if (!v35 || (v36 = a2[1]) == 0)
  {
LABEL_105:
    v407 = 0;
    __p = 0;
    v408 = 0;
    v58 = fmax(*(float *)(a3 + 128), 0.025);
    v59 = *(_OWORD *)(a3 + 80);
    v355 = *(int8x16_t *)(a3 + 64);
    v356 = v59;
    v60 = *(_OWORD *)(a3 + 112);
    v357 = *(_OWORD *)(a3 + 96);
    v358 = v60;
    v61 = *(float64x2_t *)(a3 + 16);
    v351 = *(float64x2_t *)a3;
    v352 = v61;
    v62 = *(_OWORD *)(a3 + 48);
    v353 = *(_OWORD *)(a3 + 32);
    v354 = v62;
    v359 = v58;
    v361 = 0u;
    v360 = 0u;
    v63 = *(float32x2_t ***)(a3 + 136);
    v64 = *(float32x2_t ***)(a3 + 144);
    if (v63 != v64)
    {
      v65 = (int8x16_t)vcvtq_f64_f32(**v63);
      v66 = v65;
      do
      {
        v67 = *v63;
        while (v67 != v63[1])
        {
          v68 = *v67++;
          v69 = (int8x16_t)vcvtq_f64_f32(v68);
          v65 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v65, (float64x2_t)v69), v69, v65);
          v66 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v69, (float64x2_t)v66), v69, v66);
        }
        v63 += 3;
      }
      while (v63 != v64);
      v360 = v65;
      v361 = v66;
    }
    v70 = *v7;
    if (*v7 == (uint64_t *)(v7 + 1))
    {
      v71 = 0;
      v72 = 0;
      goto LABEL_164;
    }
    v71 = 0;
    v72 = 0;
    v73 = 0;
    v349 = *(double *)&v356;
    v346 = vextq_s8(v355, v355, 8uLL).u64[0];
    while (1)
    {
      v75 = (uint64_t *)v70[25];
      v74 = v70[26];
      if (v74)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v74 + 24))(v70[26]);
        v77 = v75;
        v76 = *v75;
        v78 = *(_QWORD *)v77[1];
        (*(void (**)(uint64_t))(*(_QWORD *)v74 + 40))(v74);
        v79 = v78 + 232 * v76;
      }
      else
      {
        v79 = *(_QWORD *)v75[1] + 232 * *v75;
      }
      v80 = *(float32x2_t *)(v79 + 80);
      v81 = *(float32x2_t *)(v79 + 88);
      v82 = vcvtq_f64_f32(v80);
      v83 = v82.f64[1];
      v84 = vcvtq_f64_f32(v81);
      v80.i8[0] = vcgt_f32(v80, v81).u8[0];
      _ZF = (v80.i8[0] & 1) == 0;
      if ((v80.i8[0] & 1) != 0)
        v86 = v84.f64[0];
      else
        v86 = v82.f64[0];
      if (_ZF)
        v87 = v84.f64[0];
      else
        v87 = v82.f64[0];
      if (v82.f64[1] <= v84.f64[1])
        v88 = v82.f64[1];
      else
        v88 = v84.f64[1];
      if (v82.f64[1] <= v84.f64[1])
        v83 = v84.f64[1];
      v89 = fmax(*((float *)v70 + 84), 0.025);
      v90 = *((float64x2_t *)v70 + 3);
      v91 = *((_OWORD *)v70 + 6);
      v92 = *((_OWORD *)v70 + 8);
      v93 = *((_OWORD *)v70 + 9);
      v413 = *((float64x2_t *)v70 + 7);
      v414 = v92;
      v416 = *((_OWORD *)v70 + 10);
      v415 = v93;
      a7 = *((float64x2_t *)v70 + 4);
      v94 = *((_OWORD *)v70 + 5);
      v409 = v90;
      v410 = a7;
      v412 = v91;
      v411 = v94;
      v417 = v89;
      v418 = v86;
      v419 = v88;
      v420 = v87;
      v421 = v83;
      _V1.D[1] = v413.f64[1];
      _D3 = v346;
      __asm { FMLA            D2, D3, V1.D[1] }
      if (_D2 + v349 * *(double *)&v414 < 0.984807753)
        goto LABEL_138;
      v429 = *((_QWORD *)&v356 + 1);
      v424 = v352.f64[1];
      v430 = v357;
      v431 = v358;
      v99.f64[1] = *((float64_t *)&v353 + 1);
      v425 = v353;
      v426 = v354;
      *(_QWORD *)&v99.f64[0] = v356;
      v427 = v351;
      v428 = v352.f64[0];
      v422 = vnegq_f64((float64x2_t)v355);
      *(_QWORD *)&v423 = *(_OWORD *)&vnegq_f64(v99);
      v100 = sub_223F8F174((uint64_t)&v351, (uint64_t)&v409, (uint64_t)&v422, v423, v422.f64[0], v352.f64[0], v351.f64[0], v89, v90);
      v439 = *((_QWORD *)&v356 + 1);
      v436 = *((_QWORD *)&v354 + 1);
      v440 = v357;
      v441 = v358;
      v101.f64[1] = v351.f64[1];
      v432 = v351;
      v433 = v352;
      *(_QWORD *)&v101.f64[0] = v356;
      v437 = v353;
      v438 = v354;
      v434 = vnegq_f64((float64x2_t)v355);
      *(_QWORD *)&v435 = *(_OWORD *)&vnegq_f64(v101);
      v104 = sub_223F8F174((uint64_t)&v351, (uint64_t)&v409, (uint64_t)&v432, v435, v434.f64[0], *(double *)&v354, *(double *)&v353, v102, v103);
      if (v104 >= v100)
        v104 = v100;
      if (v104 < 0.1)
      {
        v429 = *((_QWORD *)&v414 + 1);
        v424 = v410.f64[1];
        v430 = v415;
        v431 = v416;
        v107.f64[1] = *((float64_t *)&v411 + 1);
        v425 = v411;
        v426 = v412;
        *(_QWORD *)&v107.f64[0] = v414;
        v427 = v409;
        v428 = v410.f64[0];
        v422 = vnegq_f64(v413);
        *(_QWORD *)&v423 = *(_OWORD *)&vnegq_f64(v107);
        v108 = sub_223F8F174((uint64_t)&v409, (uint64_t)&v351, (uint64_t)&v422, v423, v422.f64[0], v410.f64[0], v409.f64[0], v105, v106);
        v439 = *((_QWORD *)&v414 + 1);
        v436 = *((_QWORD *)&v412 + 1);
        v440 = v415;
        v441 = v416;
        v109.f64[1] = v409.f64[1];
        v432 = v409;
        v433 = v410;
        *(_QWORD *)&v109.f64[0] = v414;
        v437 = v411;
        v438 = v412;
        v434 = vnegq_f64(v413);
        *(_QWORD *)&v435 = *(_OWORD *)&vnegq_f64(v109);
        v112 = sub_223F8F174((uint64_t)&v409, (uint64_t)&v351, (uint64_t)&v432, v435, v434.f64[0], *(double *)&v412, *(double *)&v411, v110, v111);
        if (v112 >= v108)
          v112 = v108;
        if (v112 < 0.1)
          goto LABEL_138;
      }
      v113 = v70 + 4;
      if (v71 < v73)
      {
        *(_OWORD *)v71 = *v113;
        v71 += 16;
LABEL_138:
        v114 = (uint64_t *)v70[1];
        if (!v114)
          goto LABEL_155;
        goto LABEL_139;
      }
      v116 = (v71 - v72) >> 4;
      v117 = v116 + 1;
      if ((unint64_t)(v116 + 1) >> 60)
      {
        v408 = v73;
        __p = v72;
        v407 = v71;
        sub_22316E078();
      }
      if ((v73 - v72) >> 3 > v117)
        v117 = (v73 - v72) >> 3;
      if ((unint64_t)(v73 - v72) >= 0x7FFFFFFFFFFFFFF0)
        v118 = 0xFFFFFFFFFFFFFFFLL;
      else
        v118 = v117;
      if (v118)
      {
        if (v118 >> 60)
        {
          v408 = v73;
          __p = v72;
          sub_223174E94();
        }
        v119 = (char *)operator new(16 * v118);
        v120 = (unsigned __int8 *)&v119[16 * v116];
        *(_OWORD *)v120 = *v113;
        if (v71 == v72)
        {
LABEL_159:
          v122 = v120;
          v73 = (unsigned __int8 *)&v119[16 * v118];
          v71 = v120 + 16;
          if (v72)
            goto LABEL_153;
          goto LABEL_154;
        }
      }
      else
      {
        v119 = 0;
        v120 = (unsigned __int8 *)(16 * v116);
        *(_OWORD *)(16 * v116) = *v113;
        if (v71 == v72)
          goto LABEL_159;
      }
      v121 = v120;
      do
      {
        v122 = v121 - 16;
        *((_OWORD *)v121 - 1) = *((_OWORD *)v71 - 1);
        v71 -= 16;
        v121 -= 16;
      }
      while (v71 != v72);
      v73 = (unsigned __int8 *)&v119[16 * v118];
      v71 = v120 + 16;
      if (v72)
LABEL_153:
        operator delete(v72);
LABEL_154:
      v72 = v122;
      v114 = (uint64_t *)v70[1];
      if (!v114)
      {
        do
        {
LABEL_155:
          v115 = (uint64_t **)v70[2];
          _ZF = *v115 == v70;
          v70 = (uint64_t *)v115;
        }
        while (!_ZF);
        goto LABEL_114;
      }
      do
      {
LABEL_139:
        v115 = (uint64_t **)v114;
        v114 = (uint64_t *)*v114;
      }
      while (v114);
LABEL_114:
      v70 = (uint64_t *)v115;
      if (v115 == v7 + 1)
      {
        v408 = v73;
        __p = v72;
        goto LABEL_162;
      }
    }
  }
  v37 = a2 + 3;
  v38 = *((unsigned __int8 *)a2 + 24);
  v39 = *((unsigned __int8 *)a2 + 25);
  v40 = *((unsigned __int8 *)a2 + 26);
  v41 = *((unsigned __int8 *)a2 + 27);
  v42 = *((unsigned __int8 *)a2 + 28);
  v43 = *((unsigned __int8 *)a2 + 29);
  v44 = *((unsigned __int8 *)a2 + 30);
  v45 = *((unsigned __int8 *)a2 + 31);
  v46 = *((unsigned __int8 *)a2 + 32);
  v47 = *((unsigned __int8 *)a2 + 33);
  v48 = *((unsigned __int8 *)a2 + 34);
  v49 = *((unsigned __int8 *)v7 + 35);
  v50 = *((unsigned __int8 *)v7 + 36);
  v51 = *((unsigned __int8 *)v7 + 37);
  v52 = *((unsigned __int8 *)v7 + 38);
  v53 = *((unsigned __int8 *)v7 + 39);
  while (1)
  {
    v54 = *((unsigned __int8 *)v36 + 32);
    if (v38 != v54)
    {
      v57 = v38;
      if (v38 < v54)
        goto LABEL_63;
      goto LABEL_103;
    }
    v54 = *((unsigned __int8 *)v36 + 33);
    if (v39 != v54)
    {
      v57 = v39;
      if (v39 < v54)
        goto LABEL_63;
      goto LABEL_103;
    }
    v54 = *((unsigned __int8 *)v36 + 34);
    if (v40 != v54)
    {
      v57 = v40;
      if (v40 < v54)
        goto LABEL_63;
      goto LABEL_103;
    }
    v54 = *((unsigned __int8 *)v36 + 35);
    if (v41 != v54)
    {
      v57 = v41;
      if (v41 < v54)
        goto LABEL_63;
      goto LABEL_103;
    }
    v54 = *((unsigned __int8 *)v36 + 36);
    if (v42 != v54)
    {
      v57 = v42;
      if (v42 < v54)
        goto LABEL_63;
      goto LABEL_103;
    }
    v54 = *((unsigned __int8 *)v36 + 37);
    if (v43 != v54)
    {
      v57 = v43;
      if (v43 < v54)
        goto LABEL_63;
      goto LABEL_103;
    }
    v55 = *((unsigned __int8 *)v36 + 38);
    v56 = v44;
    if (v44 != v55)
      goto LABEL_80;
    v55 = *((unsigned __int8 *)v36 + 39);
    v56 = v45;
    if (v45 != v55)
      goto LABEL_80;
    v55 = *((unsigned __int8 *)v36 + 40);
    v56 = v46;
    if (v46 != v55)
      goto LABEL_80;
    v55 = *((unsigned __int8 *)v36 + 41);
    v56 = v47;
    if (v47 != v55)
      goto LABEL_80;
    v55 = *((unsigned __int8 *)v36 + 42);
    v56 = v48;
    if (v48 != v55)
      goto LABEL_80;
    v55 = *((unsigned __int8 *)v36 + 43);
    v56 = v49;
    if (v49 != v55)
      goto LABEL_80;
    v55 = *((unsigned __int8 *)v36 + 44);
    v56 = v50;
    if (v50 != v55
      || (v55 = *((unsigned __int8 *)v36 + 45), v56 = v51, v51 != v55)
      || (v55 = *((unsigned __int8 *)v36 + 46), v56 = v52, v52 != v55)
      || (v55 = *((unsigned __int8 *)v36 + 47), v56 = v53, v53 != v55))
    {
LABEL_80:
      if (v56 < v55)
        goto LABEL_63;
    }
    v54 = *((unsigned __int8 *)v36 + 38);
    v57 = v44;
    if (v54 == v44)
    {
      v54 = *((unsigned __int8 *)v36 + 39);
      v57 = v45;
      if (v54 == v45)
      {
        v54 = *((unsigned __int8 *)v36 + 40);
        v57 = v46;
        if (v54 == v46)
        {
          v54 = *((unsigned __int8 *)v36 + 41);
          v57 = v47;
          if (v54 == v47)
          {
            v54 = *((unsigned __int8 *)v36 + 42);
            v57 = v48;
            if (v54 == v48)
            {
              v54 = *((unsigned __int8 *)v36 + 43);
              v57 = v49;
              if (v54 == v49)
              {
                v54 = *((unsigned __int8 *)v36 + 44);
                v57 = v50;
                if (v54 == v50)
                {
                  v54 = *((unsigned __int8 *)v36 + 45);
                  v57 = v51;
                  if (v54 == v51)
                  {
                    v54 = *((unsigned __int8 *)v36 + 46);
                    v57 = v52;
                    if (v54 == v52)
                    {
                      v54 = *((unsigned __int8 *)v36 + 47);
                      v57 = v53;
                      if (v54 == v53)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_103:
    if (v54 >= v57)
      break;
    ++v36;
LABEL_63:
    v36 = (uint64_t *)*v36;
    v7 = a2;
    if (!v36)
      goto LABEL_105;
  }
  v72 = (unsigned __int8 *)operator new(0x10uLL);
  v71 = v72 + 16;
  v408 = v72 + 16;
  *(_OWORD *)v72 = *v37;
  __p = v72;
LABEL_162:
  v407 = v71;
  v7 = a2;
LABEL_164:
  v124 = *(float64x2_t *)a3;
  v123 = *(float64x2_t *)(a3 + 16);
  v126 = *(float64x2_t *)(a3 + 32);
  v125 = *(float64x2_t *)(a3 + 48);
  v128 = *(float64x2_t *)(a3 + 96);
  v127 = *(float64x2_t *)(a3 + 112);
  *(_BYTE *)a6 = 0;
  *((_BYTE *)a6 + 16) = 0;
  if (v72 == v71)
    goto LABEL_427;
  v129 = (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v126), v125);
  v339 = (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v124), v123);
  v337 = (float32x2_t)vdup_laneq_s32(v339, 2);
  v338 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v339.i8, 1);
  v130 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v129.i8, 1);
  v340 = *(float *)v129.i32;
  v341 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v128), v127);
  v131 = (float32x2_t)vdup_laneq_s32(v129, 2);
  while (2)
  {
    v132 = v7[1];
    if (!v132)
LABEL_469:
      sub_223198218("map::at:  key not found");
    v133 = *v72;
    while (2)
    {
      while (2)
      {
        v134 = *((unsigned __int8 *)v132 + 32);
        _CF = v133 >= v134;
        if (v133 != v134)
        {
          v136 = *v72;
          goto LABEL_201;
        }
        v136 = v72[1];
        v134 = *((unsigned __int8 *)v132 + 33);
        _CF = v136 >= v134;
        if (v136 != v134
          || (v136 = v72[2], v134 = *((unsigned __int8 *)v132 + 34), _CF = v136 >= v134, v136 != v134)
          || (v136 = v72[3], v134 = *((unsigned __int8 *)v132 + 35), _CF = v136 >= v134, v136 != v134))
        {
LABEL_201:
          if (!_CF)
            goto LABEL_169;
LABEL_203:
          if (v134 >= v136)
            goto LABEL_206;
          v132 = (uint64_t *)v132[1];
          if (!v132)
            goto LABEL_469;
          continue;
        }
        break;
      }
      v137 = v72[4];
      v138 = *((unsigned __int8 *)v132 + 36);
      if (v137 != v138)
        goto LABEL_186;
      v137 = v72[5];
      v138 = *((unsigned __int8 *)v132 + 37);
      if (v137 != v138)
        goto LABEL_186;
      v137 = v72[6];
      v138 = *((unsigned __int8 *)v132 + 38);
      if (v137 != v138)
        goto LABEL_186;
      v137 = v72[7];
      v138 = *((unsigned __int8 *)v132 + 39);
      if (v137 != v138)
        goto LABEL_186;
      v137 = v72[8];
      v138 = *((unsigned __int8 *)v132 + 40);
      if (v137 != v138)
        goto LABEL_186;
      v137 = v72[9];
      v138 = *((unsigned __int8 *)v132 + 41);
      if (v137 != v138)
        goto LABEL_186;
      v137 = v72[10];
      v138 = *((unsigned __int8 *)v132 + 42);
      if (v137 != v138)
        goto LABEL_186;
      v137 = v72[11];
      v138 = *((unsigned __int8 *)v132 + 43);
      if (v137 != v138)
        goto LABEL_186;
      v137 = v72[12];
      v138 = *((unsigned __int8 *)v132 + 44);
      if (v137 != v138
        || (v137 = v72[13], v138 = *((unsigned __int8 *)v132 + 45), v137 != v138)
        || (v137 = v72[14], v138 = *((unsigned __int8 *)v132 + 46), v137 != v138)
        || (v137 = v72[15], v138 = *((unsigned __int8 *)v132 + 47), v137 != v138))
      {
LABEL_186:
        if (v137 < v138)
        {
LABEL_169:
          v132 = (uint64_t *)*v132;
          if (!v132)
            goto LABEL_469;
          continue;
        }
      }
      break;
    }
    v134 = *((unsigned __int8 *)v132 + 36);
    v136 = v72[4];
    if (v134 != v136)
      goto LABEL_203;
    v134 = *((unsigned __int8 *)v132 + 37);
    v136 = v72[5];
    if (v134 != v136)
      goto LABEL_203;
    v134 = *((unsigned __int8 *)v132 + 38);
    v136 = v72[6];
    if (v134 != v136)
      goto LABEL_203;
    v134 = *((unsigned __int8 *)v132 + 39);
    v136 = v72[7];
    if (v134 != v136)
      goto LABEL_203;
    v134 = *((unsigned __int8 *)v132 + 40);
    v136 = v72[8];
    if (v134 != v136)
      goto LABEL_203;
    v134 = *((unsigned __int8 *)v132 + 41);
    v136 = v72[9];
    if (v134 != v136)
      goto LABEL_203;
    v134 = *((unsigned __int8 *)v132 + 42);
    v136 = v72[10];
    if (v134 != v136)
      goto LABEL_203;
    v134 = *((unsigned __int8 *)v132 + 43);
    v136 = v72[11];
    if (v134 != v136)
      goto LABEL_203;
    v134 = *((unsigned __int8 *)v132 + 44);
    v136 = v72[12];
    if (v134 != v136)
      goto LABEL_203;
    v134 = *((unsigned __int8 *)v132 + 45);
    v136 = v72[13];
    if (v134 != v136)
      goto LABEL_203;
    v134 = *((unsigned __int8 *)v132 + 46);
    v136 = v72[14];
    if (v134 != v136)
      goto LABEL_203;
    v134 = *((unsigned __int8 *)v132 + 47);
    v136 = v72[15];
    if (v134 != v136)
      goto LABEL_203;
LABEL_206:
    v139 = *(float32x2_t ***)(a3 + 136);
    v350 = *(float32x2_t ***)(a3 + 144);
    if (v139 == v350)
    {
LABEL_166:
      v72 += 16;
      v7 = a2;
      if (v72 == v71)
        goto LABEL_427;
      continue;
    }
    break;
  }
  v144 = *((float64x2_t *)v132 + 10);
  v140 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*((float64x2_t *)v132 + 9)), v144);
  v141 = (int32x4_t)vcvt_hight_f32_f64((int32x2_t)v132[12], *((float64x2_t *)v132 + 6));
  v142 = (int32x2_t)vcvt_f32_f64(*((float64x2_t *)v132 + 5));
  v143 = (int32x2_t)vcvt_f32_f64(*((float64x2_t *)v132 + 3));
  *(int32x2_t *)&v144.f64[0] = vzip1_s32(v143, v142);
  v145 = *(double *)v339.i64;
  v146 = (float32x2_t)vzip2_s32(v143, v142);
  v147 = (float32x2_t)vzip2q_s32((int32x4_t)vcvt_hight_f32_f64((int32x2_t)v132[8], *((float64x2_t *)v132 + 4)), v141).u64[0];
  v148 = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)&v144.f64[0], *(float *)v339.i32), v338, v146), v337, v147);
  v149 = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)&v144.f64[0], v340), v130, v146), v131, v147);
  v150 = vsubq_f32(v341, v140);
  v151 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)&v144.f64[0], v150.f32[0]), v146, *(float32x2_t *)v150.f32, 1), v147, v150, 2);
LABEL_210:
  v153 = *v139;
  v152 = v139[1];
  v154 = (char *)v152 - (char *)*v139;
  if (v154 != 24)
  {
    v422 = 0uLL;
    v423 = 0.0;
    if (v152 == v153)
    {
      v204 = 0;
LABEL_316:
      LOBYTE(v208) = 0;
      goto LABEL_418;
    }
    if ((v154 & 0x8000000000000000) != 0)
      sub_22316E078();
    v204 = (float64x2_t *)operator new(v154);
    v205 = v154 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v204, v153, v205);
    if (v205)
    {
      for (i = 0; i != v205; i += 8)
      {
        v147 = vmla_lane_f32(vmul_n_f32(v148, COERCE_FLOAT(*(_QWORD *)&v204->f64[i / 8])), v149, *(float32x2_t *)&v204->f64[i / 8], 1);
        *(float32x2_t *)&v204->f64[i / 8] = vadd_f32(v151, v147);
      }
    }
    v207 = v205 >> 3;
    if (!(v205 >> 3))
      goto LABEL_316;
    if (v207 == 2)
    {
      v351 = *v204;
      LOBYTE(v208) = sub_223FA0070(v132[25], v132[26], (float32x2_t *)&v351);
LABEL_208:
      operator delete(v204);
      if ((v208 & 1) != 0)
        goto LABEL_424;
      goto LABEL_209;
    }
    if (v207 == 1)
    {
      v208 = v132[25];
      v209 = v132[26];
      if (v209)
        (*(void (**)(uint64_t))(*(_QWORD *)v209 + 24))(v132[26]);
      LOBYTE(v208) = sub_223FA096C(v208, v209, (float *)v204);
      if (v209)
        (*(void (**)(uint64_t))(*(_QWORD *)v209 + 40))(v209);
      goto LABEL_418;
    }
    v208 = v132[26];
    if (!v208)
      goto LABEL_418;
    v348 = v205 >> 3;
    v211 = *((float *)v132 + 48);
    v212 = *((double *)v132 + 25);
    (*(void (**)(uint64_t))(*(_QWORD *)v208 + 24))(v208);
    v347 = v208;
    if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v208 + 48))(v208))
    {
      LOBYTE(v208) = 0;
      goto LABEL_417;
    }
    v432.f64[0] = v212;
    *(_QWORD *)&v432.f64[1] = v208;
    (*(void (**)(uint64_t))(*(_QWORD *)v208 + 24))(v208);
    v352 = 0u;
    v353 = 0u;
    v351 = 0u;
    sub_223FA0BC8((uint64_t)&v351, (uint64_t)&v432);
    v409 = v351;
    v410 = v352;
    v351 = 0u;
    v352 = 0u;
    v411 = v353;
    v353 = 0uLL;
    sub_223FA138C((uint64_t)&v351);
    (*(void (**)(uint64_t))(*(_QWORD *)v208 + 40))(v208);
    if (!*((_QWORD *)&v411 + 1))
    {
      sub_223FA138C((uint64_t)&v409);
      LOBYTE(v208) = 0;
      goto LABEL_417;
    }
    v213.n128_f32[0] = v211 * v211;
    v214 = (float)(v211 * v211) * 0.0;
    while (1)
    {
      v215 = v411;
      v216 = *(_QWORD *)(*(_QWORD *)&v409.f64[1] + (((unint64_t)v411 >> 5) & 0x7FFFFFFFFFFFFF8));
      v217 = (uint64_t **)(v216 + 16 * v411);
      v218 = *v217;
      v219 = v217[1];
      if (!v219)
        break;
      (*(void (**)(uint64_t *))(*v219 + 24))(v217[1]);
      v215 = v411;
      v220 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v409.f64[1] + (((unint64_t)v411 >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * v411
                       + 8);
      if (v220)
        goto LABEL_326;
LABEL_327:
      --*((_QWORD *)&v411 + 1);
      *(_QWORD *)&v411 = v215 + 1;
      if ((unint64_t)(v215 + 1) >= 0x200)
      {
        operator delete(**(void ***)&v409.f64[1]);
        *(_QWORD *)&v409.f64[1] += 8;
        *(_QWORD *)&v411 = v411 - 256;
      }
      v221 = (_QWORD *)(*(_QWORD *)v218[1] + 232 * *v218);
      v222 = v221[3];
      if (!v222 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v222 + 48))(v222))
      {
        v226 = v221[5];
        if (!v226 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v226 + 48))(v226))
        {
          v227 = v221[7];
          if (!v227 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v227 + 48))(v227))
          {
            v228 = v221[9];
            if (!v228 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v228 + 48))(v228))
            {
LABEL_403:
              v241 = 1;
              if (!v219)
                goto LABEL_405;
LABEL_404:
              (*(void (**)(uint64_t *, __n128))(*v219 + 40))(v219, v213);
              goto LABEL_405;
            }
          }
        }
      }
      v229 = *v218;
      v230 = *(_QWORD *)v218[1];
      v231 = (float32x2_t *)(v230 + 232 * *v218 + 80);
      v213.n128_f64[0] = sub_223F274F4(v348, (char *)v204, v231, (uint64_t *)&v351, v223, v224, v225);
      if (*(_QWORD *)&v351.f64[1] - *(_QWORD *)&v351.f64[0] < 0x18uLL)
      {
        if (*(_QWORD *)&v351.f64[0])
        {
          v351.f64[1] = v351.f64[0];
          operator delete(*(void **)&v351.f64[0]);
        }
LABEL_348:
        v241 = 2;
        if (v219)
          goto LABEL_404;
        goto LABEL_405;
      }
      v232 = (float *)(*(_QWORD *)&v351.f64[0] + 12);
      v233 = 0.0;
      v234 = ((uint64_t)(*(_QWORD *)&v351.f64[1] - *(_QWORD *)&v351.f64[0]) >> 3) - 1;
      v235 = *(float *)(*(_QWORD *)&v351.f64[0] + 4);
      v236 = **(float **)&v351.f64[0];
      do
      {
        v237 = *v232;
        v238 = v233 - (float)(v236 * *v232);
        v236 = *(v232 - 1);
        v233 = v238 + (float)(v235 * v236);
        v232 += 2;
        v235 = v237;
        --v234;
      }
      while (v234);
      v239 = (float)((float)(v233
                           - (float)(*(float *)(*(_QWORD *)&v351.f64[0] + 4)
                                   * *(float *)(*(_QWORD *)&v351.f64[0]
                                              + 8
                                              * (((uint64_t)(*(_QWORD *)&v351.f64[1] - *(_QWORD *)&v351.f64[0]) >> 3) - 1))))
                   + (float)(**(float **)&v351.f64[0]
                           * *(float *)(*(_QWORD *)&v351.f64[0]
                                      + 8 * (((uint64_t)(*(_QWORD *)&v351.f64[1] - *(_QWORD *)&v351.f64[0]) >> 3) - 1)
                                      + 4)))
           * 0.5;
      v351.f64[1] = v351.f64[0];
      operator delete(*(void **)&v351.f64[0]);
      if (v239 == 0.0)
        goto LABEL_348;
      v213.n128_f32[0] = fabsf(v239);
      if (v213.n128_f32[0] <= 0.000001 || v213.n128_f32[0] < v214)
        goto LABEL_348;
      v242 = vsub_f32(*(float32x2_t *)(v230 + 232 * v229 + 88), *v231);
      v243 = vmul_lane_f32(v242, v242, 1).f32[0];
      v244 = v243 < v213.n128_f32[0];
      if (v243 == v213.n128_f32[0])
        goto LABEL_403;
      v245 = v243 - v213.n128_f32[0];
      v213.n128_f32[0] = v213.n128_f32[0] - v243;
      if (!v244)
        v213.n128_f32[0] = v245;
      if (v213.n128_f32[0] <= 0.000001)
        goto LABEL_403;
      v246 = (double *)(*(_QWORD *)v218[1] + 232 * *v218);
      v351.f64[0] = v246[2];
      v247 = v246[3];
      v351.f64[1] = v247;
      if (v247 != 0.0)
        (*(void (**)(float64_t))(**(_QWORD **)&v247 + 24))(COERCE_FLOAT64_T(*(_QWORD *)&v247));
      v352.f64[0] = v246[4];
      v248 = v246[5];
      v352.f64[1] = v248;
      if (v248 != 0.0)
        (*(void (**)(float64_t))(**(_QWORD **)&v248 + 24))(COERCE_FLOAT64_T(*(_QWORD *)&v248));
      *(double *)&v353 = v246[6];
      v249 = *((_QWORD *)v246 + 7);
      *((_QWORD *)&v353 + 1) = v249;
      if (v249)
        (*(void (**)(uint64_t))(*(_QWORD *)v249 + 24))(v249);
      *(double *)&v354 = v246[8];
      v250 = *((_QWORD *)v246 + 9);
      *((_QWORD *)&v354 + 1) = v250;
      if (v250)
        (*(void (**)(uint64_t))(*(_QWORD *)v250 + 24))(v250);
      v251 = v351.f64[1];
      if (*(_QWORD *)&v351.f64[1])
      {
        v252 = v351.f64[0];
        (*(void (**)(_QWORD))(**(_QWORD **)&v351.f64[1] + 24))(*(_QWORD *)&v351.f64[1]);
        if ((*(uint64_t (**)(float64_t))(**(_QWORD **)&v251 + 48))(COERCE_FLOAT64_T(*(_QWORD *)&v251)))
        {
          v253 = v409.f64[1];
          v254 = 32 * (*(_QWORD *)&v410.f64[0] - *(_QWORD *)&v409.f64[1]) - 1;
          if (*(_QWORD *)&v410.f64[0] == *(_QWORD *)&v409.f64[1])
            v254 = 0;
          v255 = *((_QWORD *)&v411 + 1) + v411;
          if (v254 == *((_QWORD *)&v411 + 1) + (_QWORD)v411)
          {
            sub_223FA1504((uint64_t)&v409);
            v253 = v409.f64[1];
            v255 = *((_QWORD *)&v411 + 1) + v411;
          }
          v256 = (float64_t *)(*(_QWORD *)(*(_QWORD *)&v253 + ((v255 >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * v255);
          *v256 = v252;
          v256[1] = v251;
          (*(void (**)(float64_t))(**(_QWORD **)&v251 + 24))(COERCE_FLOAT64_T(*(_QWORD *)&v251));
          ++*((_QWORD *)&v411 + 1);
        }
        (*(void (**)(float64_t))(**(_QWORD **)&v251 + 40))(COERCE_FLOAT64_T(*(_QWORD *)&v251));
      }
      v257 = v352.f64[1];
      if (*(_QWORD *)&v352.f64[1])
      {
        v258 = v352.f64[0];
        (*(void (**)(_QWORD))(**(_QWORD **)&v352.f64[1] + 24))(*(_QWORD *)&v352.f64[1]);
        if ((*(uint64_t (**)(float64_t))(**(_QWORD **)&v257 + 48))(COERCE_FLOAT64_T(*(_QWORD *)&v257)))
        {
          v259 = v409.f64[1];
          v260 = 32 * (*(_QWORD *)&v410.f64[0] - *(_QWORD *)&v409.f64[1]) - 1;
          if (*(_QWORD *)&v410.f64[0] == *(_QWORD *)&v409.f64[1])
            v260 = 0;
          v261 = *((_QWORD *)&v411 + 1) + v411;
          if (v260 == *((_QWORD *)&v411 + 1) + (_QWORD)v411)
          {
            sub_223FA1504((uint64_t)&v409);
            v259 = v409.f64[1];
            v261 = *((_QWORD *)&v411 + 1) + v411;
          }
          v262 = (float64_t *)(*(_QWORD *)(*(_QWORD *)&v259 + ((v261 >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * v261);
          *v262 = v258;
          v262[1] = v257;
          (*(void (**)(float64_t))(**(_QWORD **)&v257 + 24))(COERCE_FLOAT64_T(*(_QWORD *)&v257));
          ++*((_QWORD *)&v411 + 1);
        }
        (*(void (**)(float64_t))(**(_QWORD **)&v257 + 40))(COERCE_FLOAT64_T(*(_QWORD *)&v257));
      }
      v263 = *((_QWORD *)&v353 + 1);
      if (*((_QWORD *)&v353 + 1))
      {
        v264 = v353;
        (*(void (**)(_QWORD))(**((_QWORD **)&v353 + 1) + 24))(*((_QWORD *)&v353 + 1));
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v263 + 48))(v263))
        {
          v265 = v409.f64[1];
          v266 = 32 * (*(_QWORD *)&v410.f64[0] - *(_QWORD *)&v409.f64[1]) - 1;
          if (*(_QWORD *)&v410.f64[0] == *(_QWORD *)&v409.f64[1])
            v266 = 0;
          v267 = *((_QWORD *)&v411 + 1) + v411;
          if (v266 == *((_QWORD *)&v411 + 1) + (_QWORD)v411)
          {
            sub_223FA1504((uint64_t)&v409);
            v265 = v409.f64[1];
            v267 = *((_QWORD *)&v411 + 1) + v411;
          }
          v268 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)&v265 + ((v267 >> 5) & 0x7FFFFFFFFFFFFF8))
                          + 16 * v267);
          *v268 = v264;
          v268[1] = v263;
          (*(void (**)(uint64_t))(*(_QWORD *)v263 + 24))(v263);
          ++*((_QWORD *)&v411 + 1);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v263 + 40))(v263);
      }
      v269 = *((_QWORD *)&v354 + 1);
      if (*((_QWORD *)&v354 + 1))
      {
        v270 = v354;
        (*(void (**)(_QWORD))(**((_QWORD **)&v354 + 1) + 24))(*((_QWORD *)&v354 + 1));
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v269 + 48))(v269))
        {
          v271 = v409.f64[1];
          v272 = 32 * (*(_QWORD *)&v410.f64[0] - *(_QWORD *)&v409.f64[1]) - 1;
          if (*(_QWORD *)&v410.f64[0] == *(_QWORD *)&v409.f64[1])
            v272 = 0;
          v273 = *((_QWORD *)&v411 + 1) + v411;
          if (v272 == *((_QWORD *)&v411 + 1) + (_QWORD)v411)
          {
            sub_223FA1504((uint64_t)&v409);
            v271 = v409.f64[1];
            v273 = *((_QWORD *)&v411 + 1) + v411;
          }
          v274 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)&v271 + ((v273 >> 5) & 0x7FFFFFFFFFFFFF8))
                          + 16 * v273);
          *v274 = v270;
          v274[1] = v269;
          (*(void (**)(uint64_t))(*(_QWORD *)v269 + 24))(v269);
          ++*((_QWORD *)&v411 + 1);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v269 + 40))(v269);
        if (*((_QWORD *)&v354 + 1))
          (*(void (**)(_QWORD))(**((_QWORD **)&v354 + 1) + 40))(*((_QWORD *)&v354 + 1));
      }
      if (*((_QWORD *)&v353 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v353 + 1) + 40))(*((_QWORD *)&v353 + 1));
      if (*(_QWORD *)&v352.f64[1])
        (*(void (**)(_QWORD))(**(_QWORD **)&v352.f64[1] + 40))(*(_QWORD *)&v352.f64[1]);
      if (*(_QWORD *)&v351.f64[1])
        (*(void (**)(_QWORD))(**(_QWORD **)&v351.f64[1] + 40))(*(_QWORD *)&v351.f64[1]);
      v241 = 0;
      if (v219)
        goto LABEL_404;
LABEL_405:
      if ((v241 | 2) != 2)
      {
        LOBYTE(v208) = 1;
LABEL_416:
        sub_223FA138C((uint64_t)&v409);
LABEL_417:
        (*(void (**)(uint64_t))(*(_QWORD *)v347 + 40))(v347);
LABEL_418:
        if (v204)
          goto LABEL_208;
        if ((v208 & 1) != 0)
          goto LABEL_424;
LABEL_209:
        v139 += 3;
        if (v139 == v350)
          goto LABEL_166;
        goto LABEL_210;
      }
      if (!*((_QWORD *)&v411 + 1))
      {
        LOBYTE(v208) = 0;
        goto LABEL_416;
      }
    }
    v220 = *(_QWORD *)(v216 + 16 * v411 + 8);
    if (!v220)
      goto LABEL_327;
LABEL_326:
    (*(void (**)(uint64_t))(*(_QWORD *)v220 + 40))(v220);
    v215 = v411;
    goto LABEL_327;
  }
  v155 = v153[2];
  v156 = vadd_f32(v151, vmla_lane_f32(vmul_n_f32(v148, COERCE_FLOAT(*v153)), v149, *v153, 1));
  v147 = vadd_f32(v151, vmla_lane_f32(vmul_n_f32(v148, COERCE_FLOAT(*(_QWORD *)&v153[1])), v149, v153[1], 1));
  *(float32x2_t *)&v422.f64[0] = v156;
  *(float32x2_t *)&v422.f64[1] = v147;
  *(float32x2_t *)v150.f32 = vadd_f32(v151, vmla_lane_f32(vmul_n_f32(v148, v155.f32[0]), v149, v155, 1));
  v423 = *(double *)v150.i64;
  v157 = v132[25];
  v158 = v132[26];
  *(int32x2_t *)v141.i8 = vceq_f32(v156, v147);
  v159 = v141.i8[0];
  v141.i32[0] = v156.i32[1];
  if ((v159 & 1) != 0)
    goto LABEL_478;
  LODWORD(v160) = vsub_f32(v156, v147).u32[0];
  *(float32x2_t *)v140.f32 = vsub_f32(v147, v156);
  if ((vcgt_f32(v147, v156).u8[0] & 1) != 0)
    v160 = v140.f32[0];
  v140.i32[0] = 897988541;
  if (v160 <= 0.000001)
  {
LABEL_478:
    if (v156.f32[1] == v147.f32[1])
      goto LABEL_314;
    v161 = v147.f32[1] - v156.f32[1];
    if (v156.f32[1] >= v147.f32[1])
      v161 = v156.f32[1] - v147.f32[1];
    v140.i32[0] = 897988541;
    if (v161 <= 0.000001)
    {
LABEL_314:
      *(float32x2_t *)&v351.f64[0] = v156;
      *(_QWORD *)&v351.f64[1] = v150.i64[0];
      v210 = sub_223FA0070(v157, v158, (float32x2_t *)&v351);
      goto LABEL_409;
    }
  }
  *(int32x2_t *)&v144.f64[0] = vceq_f32(*(float32x2_t *)v150.f32, v156);
  if ((LOBYTE(v144.f64[0]) & 1) != 0)
    goto LABEL_479;
  *(float32x2_t *)&v144.f64[0] = vsub_f32(v156, *(float32x2_t *)v150.f32);
  *(float32x2_t *)v140.f32 = vsub_f32(*(float32x2_t *)v150.f32, v156);
  if ((vcgt_f32(*(float32x2_t *)v150.f32, v156).u8[0] & 1) != 0)
    *(float *)v144.f64 = v140.f32[0];
  v140.i32[0] = 897988541;
  if (*(float *)v144.f64 <= 0.000001)
  {
LABEL_479:
    if (v156.f32[1] == v150.f32[1])
      goto LABEL_408;
    *(float *)v144.f64 = v156.f32[1] - v150.f32[1];
    v150.f32[0] = v150.f32[1] - v156.f32[1];
    if (v156.f32[1] >= v150.f32[1])
      v150.f32[0] = v156.f32[1] - v150.f32[1];
    v141.i32[0] = 897988541;
    if (v150.f32[0] <= 0.000001)
    {
LABEL_408:
      *(float32x2_t *)&v351.f64[0] = v156;
      *(float32x2_t *)&v351.f64[1] = v147;
      v210 = sub_223FA0070(v157, v158, (float32x2_t *)&v351);
LABEL_409:
      if ((v210 & 1) != 0)
        goto LABEL_424;
      goto LABEL_209;
    }
  }
  if (!v158)
    goto LABEL_209;
  (*(void (**)(uint64_t))(*(_QWORD *)v158 + 24))(v132[26]);
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v158 + 48))(v158))
  {
    v203 = 0;
    goto LABEL_423;
  }
  *(_QWORD *)&v432.f64[0] = v157;
  *(_QWORD *)&v432.f64[1] = v158;
  (*(void (**)(uint64_t))(*(_QWORD *)v158 + 24))(v158);
  v352 = 0u;
  v353 = 0u;
  v351 = 0u;
  sub_223FA0BC8((uint64_t)&v351, (uint64_t)&v432);
  v409 = v351;
  v410 = v352;
  v351 = 0u;
  v352 = 0u;
  v411 = v353;
  v353 = 0uLL;
  sub_223FA138C((uint64_t)&v351);
  (*(void (**)(uint64_t))(*(_QWORD *)v158 + 40))(v158);
  if (!*((_QWORD *)&v411 + 1))
  {
    sub_223FA138C((uint64_t)&v409);
    v203 = 0;
    goto LABEL_423;
  }
  while (2)
  {
    v162 = v411;
    v163 = *(_QWORD *)(*(_QWORD *)&v409.f64[1] + (((unint64_t)v411 >> 5) & 0x7FFFFFFFFFFFFF8));
    v164 = (uint64_t *)(v163 + 16 * v411);
    v165 = *v164;
    v166 = v164[1];
    if (!v166)
    {
      v167 = *(_QWORD *)(v163 + 16 * v411 + 8);
      if (!v167)
        goto LABEL_235;
      goto LABEL_234;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v166 + 24))(v164[1]);
    v162 = v411;
    v167 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v409.f64[1] + (((unint64_t)v411 >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * v411
                     + 8);
    if (v167)
    {
LABEL_234:
      (*(void (**)(uint64_t))(*(_QWORD *)v167 + 40))(v167);
      v162 = v411;
    }
LABEL_235:
    --*((_QWORD *)&v411 + 1);
    *(_QWORD *)&v411 = v162 + 1;
    if ((unint64_t)(v162 + 1) >= 0x200)
    {
      operator delete(**(void ***)&v409.f64[1]);
      *(_QWORD *)&v409.f64[1] += 8;
      *(_QWORD *)&v411 = v411 - 256;
    }
    v168 = (_QWORD *)(**(_QWORD **)(v165 + 8) + 232 * *(_QWORD *)v165);
    v169 = v168[3];
    if (!v169 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v169 + 48))(v169))
    {
      v170 = v168[5];
      if (!v170 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v170 + 48))(v170))
      {
        v171 = v168[7];
        if (!v171 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v171 + 48))(v171))
        {
          v172 = v168[9];
          if (!v172 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v172 + 48))(v172))
          {
            v202 = 1;
            if (!v166)
              goto LABEL_299;
            goto LABEL_298;
          }
        }
      }
    }
    if (!sub_223F8BA1C((float32x2_t *)&v422, (float32x2_t *)(**(_QWORD **)(v165 + 8) + 232 * *(_QWORD *)v165 + 80)))
    {
      v202 = 2;
      if (!v166)
        goto LABEL_299;
LABEL_298:
      (*(void (**)(uint64_t))(*(_QWORD *)v166 + 40))(v166);
      goto LABEL_299;
    }
    v173 = (double *)(**(_QWORD **)(v165 + 8) + 232 * *(_QWORD *)v165);
    v351.f64[0] = v173[2];
    v174 = v173[3];
    v351.f64[1] = v174;
    if (v174 != 0.0)
      (*(void (**)(float64_t))(**(_QWORD **)&v174 + 24))(COERCE_FLOAT64_T(*(_QWORD *)&v174));
    v352.f64[0] = v173[4];
    v175 = v173[5];
    v352.f64[1] = v175;
    if (v175 != 0.0)
      (*(void (**)(float64_t))(**(_QWORD **)&v175 + 24))(COERCE_FLOAT64_T(*(_QWORD *)&v175));
    *(double *)&v353 = v173[6];
    v176 = *((_QWORD *)v173 + 7);
    *((_QWORD *)&v353 + 1) = v176;
    if (v176)
      (*(void (**)(uint64_t))(*(_QWORD *)v176 + 24))(v176);
    *(double *)&v354 = v173[8];
    v177 = *((_QWORD *)v173 + 9);
    *((_QWORD *)&v354 + 1) = v177;
    if (v177)
      (*(void (**)(uint64_t))(*(_QWORD *)v177 + 24))(v177);
    v178 = v351.f64[1];
    if (*(_QWORD *)&v351.f64[1])
    {
      v179 = v351.f64[0];
      (*(void (**)(_QWORD))(**(_QWORD **)&v351.f64[1] + 24))(*(_QWORD *)&v351.f64[1]);
      if ((*(uint64_t (**)(float64_t))(**(_QWORD **)&v178 + 48))(COERCE_FLOAT64_T(*(_QWORD *)&v178)))
      {
        v180 = v409.f64[1];
        v181 = 32 * (*(_QWORD *)&v410.f64[0] - *(_QWORD *)&v409.f64[1]) - 1;
        if (*(_QWORD *)&v410.f64[0] == *(_QWORD *)&v409.f64[1])
          v181 = 0;
        v182 = *((_QWORD *)&v411 + 1) + v411;
        if (v181 == *((_QWORD *)&v411 + 1) + (_QWORD)v411)
        {
          sub_223FA1504((uint64_t)&v409);
          v180 = v409.f64[1];
          v182 = *((_QWORD *)&v411 + 1) + v411;
        }
        v183 = (float64_t *)(*(_QWORD *)(*(_QWORD *)&v180 + ((v182 >> 5) & 0x7FFFFFFFFFFFFF8))
                           + 16 * v182);
        *v183 = v179;
        v183[1] = v178;
        (*(void (**)(float64_t))(**(_QWORD **)&v178 + 24))(COERCE_FLOAT64_T(*(_QWORD *)&v178));
        ++*((_QWORD *)&v411 + 1);
      }
      (*(void (**)(float64_t))(**(_QWORD **)&v178 + 40))(COERCE_FLOAT64_T(*(_QWORD *)&v178));
    }
    v184 = v352.f64[1];
    if (*(_QWORD *)&v352.f64[1])
    {
      v185 = v352.f64[0];
      (*(void (**)(_QWORD))(**(_QWORD **)&v352.f64[1] + 24))(*(_QWORD *)&v352.f64[1]);
      if ((*(uint64_t (**)(float64_t))(**(_QWORD **)&v184 + 48))(COERCE_FLOAT64_T(*(_QWORD *)&v184)))
      {
        v186 = v409.f64[1];
        v187 = 32 * (*(_QWORD *)&v410.f64[0] - *(_QWORD *)&v409.f64[1]) - 1;
        if (*(_QWORD *)&v410.f64[0] == *(_QWORD *)&v409.f64[1])
          v187 = 0;
        v188 = *((_QWORD *)&v411 + 1) + v411;
        if (v187 == *((_QWORD *)&v411 + 1) + (_QWORD)v411)
        {
          sub_223FA1504((uint64_t)&v409);
          v186 = v409.f64[1];
          v188 = *((_QWORD *)&v411 + 1) + v411;
        }
        v189 = (float64_t *)(*(_QWORD *)(*(_QWORD *)&v186 + ((v188 >> 5) & 0x7FFFFFFFFFFFFF8))
                           + 16 * v188);
        *v189 = v185;
        v189[1] = v184;
        (*(void (**)(float64_t))(**(_QWORD **)&v184 + 24))(COERCE_FLOAT64_T(*(_QWORD *)&v184));
        ++*((_QWORD *)&v411 + 1);
      }
      (*(void (**)(float64_t))(**(_QWORD **)&v184 + 40))(COERCE_FLOAT64_T(*(_QWORD *)&v184));
    }
    v190 = *((_QWORD *)&v353 + 1);
    if (*((_QWORD *)&v353 + 1))
    {
      v191 = v353;
      (*(void (**)(_QWORD))(**((_QWORD **)&v353 + 1) + 24))(*((_QWORD *)&v353 + 1));
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v190 + 48))(v190))
      {
        v192 = v409.f64[1];
        v193 = 32 * (*(_QWORD *)&v410.f64[0] - *(_QWORD *)&v409.f64[1]) - 1;
        if (*(_QWORD *)&v410.f64[0] == *(_QWORD *)&v409.f64[1])
          v193 = 0;
        v194 = *((_QWORD *)&v411 + 1) + v411;
        if (v193 == *((_QWORD *)&v411 + 1) + (_QWORD)v411)
        {
          sub_223FA1504((uint64_t)&v409);
          v192 = v409.f64[1];
          v194 = *((_QWORD *)&v411 + 1) + v411;
        }
        v195 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)&v192 + ((v194 >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * v194);
        *v195 = v191;
        v195[1] = v190;
        (*(void (**)(uint64_t))(*(_QWORD *)v190 + 24))(v190);
        ++*((_QWORD *)&v411 + 1);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v190 + 40))(v190);
    }
    v196 = *((_QWORD *)&v354 + 1);
    if (*((_QWORD *)&v354 + 1))
    {
      v197 = v354;
      (*(void (**)(_QWORD))(**((_QWORD **)&v354 + 1) + 24))(*((_QWORD *)&v354 + 1));
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v196 + 48))(v196))
      {
        v198 = v409.f64[1];
        v199 = 32 * (*(_QWORD *)&v410.f64[0] - *(_QWORD *)&v409.f64[1]) - 1;
        if (*(_QWORD *)&v410.f64[0] == *(_QWORD *)&v409.f64[1])
          v199 = 0;
        v200 = *((_QWORD *)&v411 + 1) + v411;
        if (v199 == *((_QWORD *)&v411 + 1) + (_QWORD)v411)
        {
          sub_223FA1504((uint64_t)&v409);
          v198 = v409.f64[1];
          v200 = *((_QWORD *)&v411 + 1) + v411;
        }
        v201 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)&v198 + ((v200 >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * v200);
        *v201 = v197;
        v201[1] = v196;
        (*(void (**)(uint64_t))(*(_QWORD *)v196 + 24))(v196);
        ++*((_QWORD *)&v411 + 1);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v196 + 40))(v196);
      if (*((_QWORD *)&v354 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v354 + 1) + 40))(*((_QWORD *)&v354 + 1));
    }
    if (*((_QWORD *)&v353 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v353 + 1) + 40))(*((_QWORD *)&v353 + 1));
    if (*(_QWORD *)&v352.f64[1])
      (*(void (**)(_QWORD))(**(_QWORD **)&v352.f64[1] + 40))(*(_QWORD *)&v352.f64[1]);
    if (*(_QWORD *)&v351.f64[1])
      (*(void (**)(_QWORD))(**(_QWORD **)&v351.f64[1] + 40))(*(_QWORD *)&v351.f64[1]);
    v202 = 0;
    if (v166)
      goto LABEL_298;
LABEL_299:
    if ((v202 | 2) == 2)
    {
      if (!*((_QWORD *)&v411 + 1))
      {
        v203 = 0;
        goto LABEL_422;
      }
      continue;
    }
    break;
  }
  v203 = 1;
LABEL_422:
  sub_223FA138C((uint64_t)&v409);
LABEL_423:
  (*(void (**)(uint64_t))(*(_QWORD *)v158 + 40))(v158);
  if ((v203 & 1) == 0)
    goto LABEL_209;
LABEL_424:
  v275 = *((unsigned __int8 *)a6 + 16);
  v276 = *(_OWORD *)v72;
  *a6 = *(_OWORD *)v72;
  v7 = a2;
  if (!v275)
    *((_BYTE *)a6 + 16) = 1;
  sub_223FA5C20((float64x2_t *)v132 + 3, a1, a3, *(double *)&v276, *(double *)&v147, *(double *)v150.i64, *(double *)v141.i64, v144, (float64x2_t)v140, v145, a7);
LABEL_427:
  if (!*((_BYTE *)a6 + 16))
  {
    LODWORD(v409.f64[0]) = a1;
    *(_QWORD *)((char *)v409.f64 + 4) = 1;
    sub_223FA5A80((uint64_t)&v351, a3, (uint64_t)&v409, a5);
    LOBYTE(v369) = 0;
    v405 = 0;
    v277 = v361.i64[1];
    if (v361.i64[1])
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v361.i64[1] + 24))(v361.i64[1]);
      v278 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v277 + 48))(v277);
      (*(void (**)(uint64_t))(*(_QWORD *)v277 + 40))(v277);
      if (v278)
      {
        v422.f64[0] = *a4;
        sub_2232D69F0((unsigned int *)&v409, (uint64_t *)&v422);
        v279 = ((unint64_t)BYTE4(v409.f64[1]) << 32) | ((unint64_t)BYTE5(v409.f64[1]) << 40) | LODWORD(v409.f64[1]) & 0xFFFFFF00 | ((unint64_t)HIDWORD(v409.f64[1]) << 32) & 0xFF00000000000000 | ((unint64_t)BYTE6(v409.f64[1]) << 48) | LOBYTE(v409.f64[1]) & 0x3F | 0x80;
        *(_QWORD *)a6 = (LODWORD(v409.f64[0]) | ((unint64_t)BYTE4(v409.f64[0]) << 32) | ((unint64_t)BYTE5(v409.f64[0]) << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)HIBYTE(v409.f64[0]) << 56) | ((unint64_t)(HIWORD(HIDWORD(v409.f64[0])) & 0xF | 0x40u) << 48);
        *((_QWORD *)a6 + 1) = v279;
        *((_BYTE *)a6 + 16) = 1;
        v281 = (uint64_t *)(v7 + 1);
        v280 = v7[1];
        if (!v280)
        {
          v282 = (uint64_t *)(v7 + 1);
          goto LABEL_439;
        }
        while (1)
        {
          while (1)
          {
            v282 = v280;
            v283 = (unsigned __int8 *)(v280 + 4);
            if (((char)sub_22319835C((unsigned __int8 *)a6, (unsigned __int8 *)v280 + 32) & 0x80000000) == 0)
              break;
            v280 = (uint64_t *)*v282;
            v281 = v282;
            if (!*v282)
              goto LABEL_439;
          }
          if (((char)sub_22319835C(v283, (unsigned __int8 *)a6) & 0x80000000) == 0)
            break;
          v281 = v282 + 1;
          v280 = (uint64_t *)v282[1];
          if (!v280)
            goto LABEL_439;
        }
        if (!*v281)
        {
LABEL_439:
          v284 = operator new(0x360uLL);
          v285 = *a6;
          v286 = v355;
          v287 = v357;
          v288 = v358;
          v284[8] = v356;
          v284[9] = v287;
          v284[10] = v288;
          v289 = v351;
          v290 = v352;
          v284[2] = v285;
          v284[3] = v289;
          v291 = v353;
          v292 = v354;
          v284[4] = v290;
          v284[5] = v291;
          *((_DWORD *)v284 + 46) = v360.i32[0];
          *((double *)v284 + 22) = v359;
          v284[6] = v292;
          v284[7] = v286;
          sub_223F93C84((uint64_t)(v284 + 12), (uint64_t)&v360.i64[1]);
          *((_BYTE *)v284 + 272) = 0;
          *((_BYTE *)v284 + 312) = 0;
          if (v365)
          {
            *((_BYTE *)v284 + 272) = v362;
            v293 = v363;
            v294 = operator new(0x58uLL);
            v294[1] = 0;
            v294[2] = 0;
            *v294 = &off_24EC64630;
            *((_DWORD *)v294 + 6) = *(_DWORD *)v293;
            *(_QWORD *)((char *)v294 + 28) = *(_QWORD *)(v293 + 4);
            *(_QWORD *)((char *)v294 + 36) = *(_QWORD *)(v293 + 12);
            sub_223F7CF14((uint64_t)(v294 + 6), v293 + 24);
            *((_QWORD *)v284 + 35) = v294 + 3;
            *((_QWORD *)v284 + 36) = v294;
            *(_OWORD *)((char *)v284 + 296) = v364;
            *((_BYTE *)v284 + 312) = 1;
          }
          *((_QWORD *)v284 + 40) = v366;
          *((_DWORD *)v284 + 82) = v367;
          v284[21] = v368;
          *((_BYTE *)v284 + 352) = 0;
          *((_BYTE *)v284 + 856) = 0;
          if (v405)
          {
            v295 = v374;
            v284[26] = v373;
            v284[27] = v295;
            v296 = v376;
            v284[28] = v375;
            v284[29] = v296;
            v297 = v370;
            v284[22] = v369;
            v284[23] = v297;
            v298 = v372;
            v284[24] = v371;
            v284[25] = v298;
            v299 = v377;
            v300 = v378;
            v301 = v380;
            v284[32] = v379;
            v284[33] = v301;
            v284[30] = v299;
            v284[31] = v300;
            v302 = v381;
            v303 = v382;
            v304 = v384;
            v284[36] = v383;
            v284[37] = v304;
            v284[34] = v302;
            v284[35] = v303;
            *((_DWORD *)v284 + 152) = v385;
            *((_BYTE *)v284 + 616) = 0;
            *((_BYTE *)v284 + 720) = 0;
            if (v393)
            {
              *((_BYTE *)v284 + 616) = v386;
              v305 = v390;
              v284[41] = v389;
              v284[42] = v305;
              v306 = v392;
              v284[43] = v391;
              v284[44] = v306;
              v307 = v388;
              v284[39] = v387;
              v284[40] = v307;
              *((_BYTE *)v284 + 720) = 1;
            }
            *((_QWORD *)v284 + 91) = v394;
            v308 = v396;
            v284[46] = v395;
            v284[47] = v308;
            *((_QWORD *)v284 + 96) = v397;
            *((_QWORD *)v284 + 97) = 0;
            *((_QWORD *)v284 + 99) = 0;
            *((_QWORD *)v284 + 98) = 0;
            v309 = v398;
            v310 = v399 - v398;
            if (v399 != v398)
            {
              if (v310 < 0)
                sub_22316E078();
              v311 = (char *)operator new(v399 - v398);
              *((_QWORD *)v284 + 97) = v311;
              *((_QWORD *)v284 + 98) = v311;
              *((_QWORD *)v284 + 99) = &v311[8 * (v310 >> 3)];
              v312 = v310 & 0xFFFFFFFFFFFFFFF8;
              memcpy(v311, v309, v312);
              *((_QWORD *)v284 + 98) = &v311[v312];
            }
            *((_QWORD *)v284 + 101) = 0;
            *((_QWORD *)v284 + 100) = 0;
            *((_QWORD *)v284 + 102) = 0;
            v313 = v400;
            v314 = v401;
            v315 = (char *)v401 - (char *)v400;
            if (v401 != v400)
            {
              if (v315 < 0)
                sub_22324A284();
              v316 = operator new((char *)v401 - (char *)v400);
              *((_QWORD *)v284 + 100) = v316;
              *((_QWORD *)v284 + 101) = v316;
              *((_QWORD *)v284 + 102) = &v316[2 * (v315 >> 4)];
              v317 = v315 - 16;
              if ((unint64_t)(v315 - 16) < 0x90)
                goto LABEL_480;
              v318 = (v317 & 0xFFFFFFFFFFFFFFF0) + 16;
              if (v316 < (_QWORD *)((char *)v313 + v318) && v313 < (_QWORD *)((char *)v316 + v318))
                goto LABEL_480;
              v319 = (v317 >> 4) + 1;
              v320 = 2 * (v319 & 0x1FFFFFFFFFFFFFFCLL);
              v321 = &v313[v320];
              v322 = &v316[v320];
              v323 = v316 + 4;
              v324 = (__int128 *)(v313 + 4);
              v325 = v319 & 0x1FFFFFFFFFFFFFFCLL;
              do
              {
                v327 = *(v324 - 2);
                v326 = *(v324 - 1);
                v329 = *v324;
                v328 = v324[1];
                v324 += 4;
                *(v323 - 2) = v327;
                *(v323 - 1) = v326;
                *v323 = v329;
                v323[1] = v328;
                v323 += 4;
                v325 -= 4;
              }
              while (v325);
              v313 = v321;
              v316 = v322;
              if (v319 != (v319 & 0x1FFFFFFFFFFFFFFCLL))
              {
LABEL_480:
                do
                {
                  *v316 = *v313;
                  v316[1] = v313[1];
                  v316 += 2;
                  v313 += 2;
                }
                while (v313 != v314);
                v322 = v316;
              }
              *((_QWORD *)v284 + 101) = v322;
            }
            *((_QWORD *)v284 + 103) = v402;
            *((_QWORD *)v284 + 104) = 0;
            *((_QWORD *)v284 + 106) = 0;
            *((_QWORD *)v284 + 105) = 0;
            v330 = v403;
            v331 = v404 - v403;
            if (v404 != v403)
            {
              if (v331 < 0)
                sub_22316E078();
              v332 = (char *)operator new(v404 - v403);
              *((_QWORD *)v284 + 104) = v332;
              *((_QWORD *)v284 + 105) = v332;
              v333 = &v332[16 * (v331 >> 4)];
              *((_QWORD *)v284 + 106) = v333;
              memcpy(v332, v330, v331);
              *((_QWORD *)v284 + 105) = v333;
            }
            *((_BYTE *)v284 + 856) = 1;
          }
          *(_QWORD *)v284 = 0;
          *((_QWORD *)v284 + 1) = 0;
          *((_QWORD *)v284 + 2) = v282;
          *v281 = (uint64_t)v284;
          v334 = (uint64_t *)**a2;
          if (v334)
          {
            *a2 = v334;
            v284 = (_OWORD *)*v281;
          }
          sub_2231A9A8C(a2[1], (uint64_t *)v284);
          a2[2] = (uint64_t *)((char *)a2[2] + 1);
        }
      }
    }
    sub_223F94CB4((uint64_t)&v351);
  }
  if (__p)
    operator delete(__p);
}

void sub_223F9C808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  std::__shared_weak_count *v33;
  uint64_t v34;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  uint64_t v40;

  std::__shared_weak_count::~__shared_weak_count(v33);
  operator delete(v36);
  if (*(_BYTE *)(v34 + 312))
  {
    v37 = *(std::__shared_weak_count **)(v34 + 288);
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(p_shared_owners);
      while (__stlxr(v39 - 1, p_shared_owners));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  sub_223F9497C(v34 + 216);
  v40 = *(_QWORD *)(v34 + 208);
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
  operator delete((void *)v34);
  sub_223F94CB4((uint64_t)&a33);
  if (STACK[0x3F8])
    operator delete((void *)STACK[0x3F8]);
  _Unwind_Resume(a1);
}

void sub_223F9CC78(int a1, uint64_t a2, unsigned __int8 **a3, __int128 *a4, uint64_t a5, float32x4_t *a6, int8x16_t a7, __n128 a8, __n128 a9, int8x16_t a10)
{
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  char *v14;
  float64x2_t v15;
  unsigned __int8 *v16;
  int8x16_t v17;
  float32x2_t v18;
  float32x2_t v19;
  int8x16_t v20;
  float32x2_t v21;
  uint64_t *v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  __int128 v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  unsigned __int8 *v47;
  void *v48;
  uint64_t *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned int v52;
  unsigned int v53;
  BOOL v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  BOOL v63;
  int v64;
  unsigned __int8 *v65;
  unint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  void *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  char *v79;
  unsigned __int8 *v80;
  char *v81;
  int v82;
  uint64_t v83;
  int v84;
  unint64_t v85;
  BOOL v87;
  unint64_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  int v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  void *__p[2];
  char *__pa;
  __n128 v110;
  int8x16_t v111;
  char *v112;
  __int128 v118;
  unsigned __int8 *v119;
  char *v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  size_t v124;
  void *v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  _OWORD v130[2];
  unsigned __int8 *v131;
  char *v132;
  char *v133;
  char v134;
  _QWORD v135[3];
  _OWORD v136[5];

  v11 = *((_QWORD *)a4 + 3);
  v12 = (unsigned __int8 *)*((_QWORD *)a4 + 4);
  if (v11)
  {
    a9.n128_u32[2] = a6[2].u32[2];
    a9.n128_u64[0] = a6[2].u64[0];
    *(__n128 *)__p = a9;
    a8.n128_u32[2] = a6[1].u32[2];
    a8.n128_u64[0] = a6[1].u64[0];
    v110 = a8;
    a7.i32[2] = a6->i32[2];
    a7.i64[0] = a6->i64[0];
    v111 = a7;
    if (v11 >> 60)
      sub_22316E078();
    v13 = 16 * v11;
    v14 = (char *)operator new(16 * v11);
    v120 = v14;
    v123 = &v14[v13];
    v16 = &v12[v13];
    v17 = (int8x16_t)v110;
    a10 = v111;
    v18 = (float32x2_t)vextq_s8(a10, a10, 8uLL).u64[0];
    v19 = (float32x2_t)vextq_s8(v17, v17, 8uLL).u64[0];
    v20 = *(int8x16_t *)__p;
    v21 = (float32x2_t)vextq_s8(v20, v20, 8uLL).u64[0];
    v106 = v19;
    v107 = v18;
    v105 = v21;
    while (1)
    {
      v22 = *(uint64_t **)(a2 + 8);
      if (!v22)
LABEL_160:
        sub_223198218("map::at:  key not found");
      v23 = *v12;
      while (1)
      {
        v24 = *((unsigned __int8 *)v22 + 32);
        v25 = v23 >= v24;
        if (v23 == v24)
          break;
        v26 = *v12;
LABEL_33:
        if (v25)
        {
LABEL_35:
          if (v24 >= v26)
            goto LABEL_38;
          v22 = (uint64_t *)v22[1];
          if (!v22)
            goto LABEL_160;
        }
        else
        {
LABEL_7:
          v22 = (uint64_t *)*v22;
          if (!v22)
            goto LABEL_160;
        }
      }
      v26 = v12[1];
      v24 = *((unsigned __int8 *)v22 + 33);
      v25 = v26 >= v24;
      if (v26 != v24)
        goto LABEL_33;
      v26 = v12[2];
      v24 = *((unsigned __int8 *)v22 + 34);
      v25 = v26 >= v24;
      if (v26 != v24)
        goto LABEL_33;
      v26 = v12[3];
      v24 = *((unsigned __int8 *)v22 + 35);
      v25 = v26 >= v24;
      if (v26 != v24)
        goto LABEL_33;
      v26 = v12[4];
      v24 = *((unsigned __int8 *)v22 + 36);
      v25 = v26 >= v24;
      if (v26 != v24)
        goto LABEL_33;
      v26 = v12[5];
      v24 = *((unsigned __int8 *)v22 + 37);
      v25 = v26 >= v24;
      if (v26 != v24)
        goto LABEL_33;
      v26 = v12[6];
      v24 = *((unsigned __int8 *)v22 + 38);
      v25 = v26 >= v24;
      if (v26 != v24)
        goto LABEL_33;
      v26 = v12[7];
      v24 = *((unsigned __int8 *)v22 + 39);
      v25 = v26 >= v24;
      if (v26 != v24)
        goto LABEL_33;
      v26 = v12[8];
      v24 = *((unsigned __int8 *)v22 + 40);
      v25 = v26 >= v24;
      if (v26 != v24)
        goto LABEL_33;
      v26 = v12[9];
      v24 = *((unsigned __int8 *)v22 + 41);
      v25 = v26 >= v24;
      if (v26 != v24)
        goto LABEL_33;
      v27 = v12[10];
      v28 = *((unsigned __int8 *)v22 + 42);
      if (v27 != v28)
        goto LABEL_24;
      v27 = v12[11];
      v28 = *((unsigned __int8 *)v22 + 43);
      if (v27 != v28)
        goto LABEL_24;
      v27 = v12[12];
      v28 = *((unsigned __int8 *)v22 + 44);
      if (v27 != v28
        || (v27 = v12[13], v28 = *((unsigned __int8 *)v22 + 45), v27 != v28)
        || (v27 = v12[14], v28 = *((unsigned __int8 *)v22 + 46), v27 != v28)
        || (v27 = v12[15], v28 = *((unsigned __int8 *)v22 + 47), v27 != v28))
      {
LABEL_24:
        if (v27 < v28)
          goto LABEL_7;
      }
      v24 = *((unsigned __int8 *)v22 + 42);
      v26 = v12[10];
      if (v24 != v26)
        goto LABEL_35;
      v24 = *((unsigned __int8 *)v22 + 43);
      v26 = v12[11];
      if (v24 != v26)
        goto LABEL_35;
      v24 = *((unsigned __int8 *)v22 + 44);
      v26 = v12[12];
      if (v24 != v26)
        goto LABEL_35;
      v24 = *((unsigned __int8 *)v22 + 45);
      v26 = v12[13];
      if (v24 != v26)
        goto LABEL_35;
      v24 = *((unsigned __int8 *)v22 + 46);
      v26 = v12[14];
      if (v24 != v26)
        goto LABEL_35;
      v24 = *((unsigned __int8 *)v22 + 47);
      v26 = v12[15];
      if (v24 != v26)
        goto LABEL_35;
LABEL_38:
      if (*((_BYTE *)v22 + 720))
        v29 = *((_BYTE *)v22 + 616);
      else
        v29 = 0;
      *(_QWORD *)&v15.f64[0] = v22[16];
      v30 = vcvt_f32_f64(v15);
      v31 = vcvt_f32_f64(*((float64x2_t *)v22 + 7));
      *(float32x2_t *)&v33 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a10.i8, v31.f32[0]), *(float32x2_t *)v17.i8, v31, 1), *(float32x2_t *)v20.i8, v30.f32[0]);
      v32 = vmla_f32(vmla_lane_f32(vmul_f32(v18, v31), v19, v31, 1), v30, v21);
      *((float32x2_t *)&v33 + 1) = v32;
      if (v14 < v123)
      {
        *v14 = v29;
        *((_DWORD *)v14 + 3) = v32.i32[0];
        *(_QWORD *)(v14 + 4) = v33;
        v14 += 16;
        v12 += 16;
        if (v12 == v16)
          goto LABEL_56;
        continue;
      }
      v34 = v120;
      v35 = (v14 - v120) >> 4;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 60)
        sub_22316E078();
      v118 = v33;
      v37 = v123 - v120;
      if ((v123 - v120) >> 3 > v36)
        v36 = v37 >> 3;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
        v38 = 0xFFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38 >> 60)
        sub_223174E94();
      v39 = (char *)operator new(16 * v38);
      v40 = &v39[16 * v35];
      *v40 = v29;
      v15.f64[1] = *((float64_t *)&v118 + 1);
      *(_QWORD *)(v40 + 4) = v118;
      *((_DWORD *)v40 + 3) = DWORD2(v118);
      v41 = v40 + 16;
      if (v14 == v120)
      {
        v120 = v40;
        v123 = &v39[16 * v38];
        v34 = v14;
LABEL_54:
        operator delete(v34);
        goto LABEL_55;
      }
      do
      {
        v42 = *(v14 - 16);
        v14 -= 16;
        *(v40 - 16) = v42;
        v40 -= 16;
        v43 = *(_QWORD *)(v14 + 4);
        *((_DWORD *)v40 + 3) = *((_DWORD *)v14 + 3);
        *(_QWORD *)(v40 + 4) = v43;
      }
      while (v14 != v120);
      v120 = v40;
      v123 = &v39[16 * v38];
      if (v34)
        goto LABEL_54;
LABEL_55:
      v14 = v41;
      v17.i64[0] = v110.n128_u64[0];
      a10.i64[0] = v111.i64[0];
      v18 = v107;
      v20.i64[0] = (uint64_t)__p[0];
      v21 = v105;
      v19 = v106;
      v12 += 16;
      if (v12 == v16)
      {
LABEL_56:
        v44 = v120;
        goto LABEL_58;
      }
    }
  }
  v14 = 0;
  v44 = 0;
LABEL_58:
  v126 = *a4;
  v45 = *((_OWORD *)a3 + 1);
  v130[0] = *(_OWORD *)a3;
  v131 = a3[4];
  v46 = *((_QWORD *)a4 + 2);
  v130[1] = v45;
  v127 = v46;
  v128 = (v14 - v44) >> 4;
  __pa = v44;
  v129 = v44;
  sub_223F8D9D4((unsigned __int8 **)v130, (unsigned __int8 **)&v126, &v132, *(float32x2_t *)&v45, *(float32x2_t *)a10.i8);
  v47 = (unsigned __int8 *)v132;
  v112 = v133;
  if (v132 == v133)
    goto LABEL_155;
  while (2)
  {
    v49 = *(uint64_t **)(a2 + 8);
    if (!v49)
LABEL_161:
      sub_223198218("map::at:  key not found");
    v50 = *v47;
    v51 = (unsigned __int8 *)(*((_QWORD *)a4 + 4) + 16 * v47[1]);
    v52 = *v51;
    while (1)
    {
      v53 = *((unsigned __int8 *)v49 + 32);
      v54 = v52 >= v53;
      if (v52 == v53)
        break;
      v55 = *v51;
LABEL_97:
      if (v54)
      {
LABEL_99:
        if (v53 >= v55)
          goto LABEL_102;
        v49 = (uint64_t *)v49[1];
        if (!v49)
          goto LABEL_161;
      }
      else
      {
LABEL_65:
        v49 = (uint64_t *)*v49;
        if (!v49)
          goto LABEL_161;
      }
    }
    v55 = v51[1];
    v53 = *((unsigned __int8 *)v49 + 33);
    v54 = v55 >= v53;
    if (v55 != v53)
      goto LABEL_97;
    v55 = v51[2];
    v53 = *((unsigned __int8 *)v49 + 34);
    v54 = v55 >= v53;
    if (v55 != v53)
      goto LABEL_97;
    v55 = v51[3];
    v53 = *((unsigned __int8 *)v49 + 35);
    v54 = v55 >= v53;
    if (v55 != v53)
      goto LABEL_97;
    v56 = v51[4];
    v57 = *((unsigned __int8 *)v49 + 36);
    if (v56 != v57)
      goto LABEL_82;
    v56 = v51[5];
    v57 = *((unsigned __int8 *)v49 + 37);
    if (v56 != v57)
      goto LABEL_82;
    v56 = v51[6];
    v57 = *((unsigned __int8 *)v49 + 38);
    if (v56 != v57)
      goto LABEL_82;
    v56 = v51[7];
    v57 = *((unsigned __int8 *)v49 + 39);
    if (v56 != v57)
      goto LABEL_82;
    v56 = v51[8];
    v57 = *((unsigned __int8 *)v49 + 40);
    if (v56 != v57)
      goto LABEL_82;
    v56 = v51[9];
    v57 = *((unsigned __int8 *)v49 + 41);
    if (v56 != v57)
      goto LABEL_82;
    v56 = v51[10];
    v57 = *((unsigned __int8 *)v49 + 42);
    if (v56 != v57)
      goto LABEL_82;
    v56 = v51[11];
    v57 = *((unsigned __int8 *)v49 + 43);
    if (v56 != v57)
      goto LABEL_82;
    v56 = v51[12];
    v57 = *((unsigned __int8 *)v49 + 44);
    if (v56 != v57
      || (v56 = v51[13], v57 = *((unsigned __int8 *)v49 + 45), v56 != v57)
      || (v56 = v51[14], v57 = *((unsigned __int8 *)v49 + 46), v56 != v57)
      || (v56 = v51[15], v57 = *((unsigned __int8 *)v49 + 47), v56 != v57))
    {
LABEL_82:
      if (v56 < v57)
        goto LABEL_65;
    }
    v53 = *((unsigned __int8 *)v49 + 36);
    v55 = v51[4];
    if (v53 != v55)
      goto LABEL_99;
    v53 = *((unsigned __int8 *)v49 + 37);
    v55 = v51[5];
    if (v53 != v55)
      goto LABEL_99;
    v53 = *((unsigned __int8 *)v49 + 38);
    v55 = v51[6];
    if (v53 != v55)
      goto LABEL_99;
    v53 = *((unsigned __int8 *)v49 + 39);
    v55 = v51[7];
    if (v53 != v55)
      goto LABEL_99;
    v53 = *((unsigned __int8 *)v49 + 40);
    v55 = v51[8];
    if (v53 != v55)
      goto LABEL_99;
    v53 = *((unsigned __int8 *)v49 + 41);
    v55 = v51[9];
    if (v53 != v55)
      goto LABEL_99;
    v53 = *((unsigned __int8 *)v49 + 42);
    v55 = v51[10];
    if (v53 != v55)
      goto LABEL_99;
    v53 = *((unsigned __int8 *)v49 + 43);
    v55 = v51[11];
    if (v53 != v55)
      goto LABEL_99;
    v53 = *((unsigned __int8 *)v49 + 44);
    v55 = v51[12];
    if (v53 != v55)
      goto LABEL_99;
    v53 = *((unsigned __int8 *)v49 + 45);
    v55 = v51[13];
    if (v53 != v55)
      goto LABEL_99;
    v53 = *((unsigned __int8 *)v49 + 46);
    v55 = v51[14];
    if (v53 != v55)
      goto LABEL_99;
    v53 = *((unsigned __int8 *)v49 + 47);
    v55 = v51[15];
    if (v53 != v55)
      goto LABEL_99;
LABEL_102:
    v119 = v47;
    v58 = a2;
    v59 = *((unsigned __int8 *)v49 + 616);
    v61 = *a3;
    v60 = a3[1];
    v62 = a3[2];
    v134 = 0;
    if ((unint64_t)v60 >> 32)
      v63 = (_DWORD)v60 == 0;
    else
      v63 = 1;
    v64 = v63;
    if (v63)
      v65 = 0;
    else
      v65 = v60;
    v66 = (_QWORD)v60 << 32;
    if (v63)
      v66 = 0;
    v121 = (unint64_t)v65;
    v122 = v66 | (v65 != 0);
    *(_QWORD *)&v136[0] = v122;
    if (!(_DWORD)v65)
      v64 = 1;
    if (v64)
      v67 = 0;
    else
      v67 = v65;
    v135[0] = v67;
    if ((HIDWORD(v66) & (HIDWORD(v66) - 1)) != 0)
      v68 = 1;
    else
      v68 = HIDWORD(v66);
    sub_223F3A558(&v124, v135, (void **)v136, 1, (uint64_t)&v134, 1, v68);
    v69 = v121;
    v70 = v122;
    v71 = v125;
    v72 = HIDWORD(v121);
    v73 = HIDWORD(v122);
    v74 = (HIDWORD(v122) * HIDWORD(v121));
    v75 = (HIDWORD(v62) * HIDWORD(v60));
    v76 = v121;
    if (v74 | v75)
    {
      v77 = 0;
      v78 = 0;
      v79 = (char *)v125 + v74;
      v80 = &v61[v75];
      v81 = (char *)v125;
      do
      {
        *v81 = *v61 == v50;
        v82 = v78 + 1;
        if (v78 + 1 == (_DWORD)v121)
          v78 = 0;
        else
          ++v78;
        if (v82 == (_DWORD)v121)
          v83 = v73 + v122 - (v122 * v121);
        else
          v83 = v122;
        v81 += v83;
        v84 = v77 + 1;
        if (v77 + 1 == (_DWORD)v60)
          v77 = 0;
        else
          ++v77;
        if (v84 == (_DWORD)v60)
          v85 = ((unint64_t)v62 >> 32) + v62 - ((_DWORD)v62 * (_DWORD)v60);
        else
          v85 = v62;
        v61 += v85;
      }
      while (v81 != v79 || v61 != v80);
      v76 = v121;
      LODWORD(v72) = HIDWORD(v121);
      v69 = v121;
      v70 = v122;
      v73 = HIDWORD(v122);
    }
    if ((_DWORD)v72)
      v87 = v76 == 0;
    else
      v87 = 1;
    if (v87)
      v88 = 0;
    else
      v88 = v69;
    a2 = v58;
    if (HIDWORD(v88) * (_DWORD)v73 == -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v89 = a6[1];
    v90 = a6[2];
    v91 = a6[3];
    v92 = vcvt_f32_f64(*((float64x2_t *)v49 + 10));
    v93 = vcvt_f32_f64(*((float64x2_t *)v49 + 9));
    v94 = vcvt_f32_f64(*((float64x2_t *)v49 + 8));
    v95 = vcvt_f32_f64(*((float64x2_t *)v49 + 7));
    v96 = vcvt_f32_f64(*((float64x2_t *)v49 + 6));
    v97 = vcvt_f32_f64(*((float64x2_t *)v49 + 5));
    v98 = vcvt_f32_f64(*((float64x2_t *)v49 + 4));
    v99 = vcvt_f32_f64(*((float64x2_t *)v49 + 3));
    v100 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*a6, v99.f32[0]), v89, v99, 1), v90, v98.f32[0]), v91, v98, 1);
    v101 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*a6, v97.f32[0]), v89, v97, 1), v90, v96.f32[0]), v91, v96, 1);
    v102 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*a6, v95.f32[0]), v89, v95, 1), v90, v94.f32[0]), v91, v94, 1);
    v103 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*a6, v93.f32[0]), v89, v93, 1), v90, v92.f32[0]);
    v136[0] = v100;
    v136[1] = v101;
    v136[2] = v102;
    v136[3] = vmlaq_lane_f32(v103, v91, v92, 1);
    v135[0] = v71;
    v135[1] = v88;
    v135[2] = v70;
    sub_223F7FD78((uint64_t)(v49 + 22), a1, (uint64_t)v135, a5, (float32x2_t *)v136, v59);
    if (*((_DWORD *)v49 + 85) != a1)
    {
      *((_DWORD *)v49 + 85) = a1;
      *((_DWORD *)v49 + 87) += *((_DWORD *)v49 + 86);
      *((_DWORD *)v49 + 86) = 1;
      v48 = v125;
      if (!v125)
        goto LABEL_62;
      goto LABEL_61;
    }
    v104 = *((_DWORD *)v49 + 86);
    if (v104 <= 1)
      v104 = 1;
    *((_DWORD *)v49 + 86) = v104;
    v48 = v125;
    if (v125)
LABEL_61:
      free(v48);
LABEL_62:
    v47 = v119 + 2;
    if (v119 + 2 != (unsigned __int8 *)v112)
      continue;
    break;
  }
  v47 = (unsigned __int8 *)v132;
LABEL_155:
  if (v47)
  {
    v133 = (char *)v47;
    operator delete(v47);
  }
  if (__pa)
    operator delete(__pa);
}

void sub_223F9D5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223F9D66C(unsigned int a1@<W0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X4>, float32x4_t *a6@<X5>, uint64_t a7@<X6>, unsigned __int8 a8@<W7>, uint64_t *a9@<X8>)
{
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  float v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  float64x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  float *v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  float *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  float *v55;
  float *v56;
  float *v57;
  int v58;
  float v59;
  float v61;
  unsigned int v63;
  uint64_t v64;
  float v65;
  int v66;
  uint64_t v67;
  float v68;
  unsigned int v69;
  unsigned int v70;
  float *v71;
  float *v72;
  float *v73;
  float v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  float v78;
  float v79;
  float v81;
  uint64_t v83;
  float v84;
  float v86;
  _QWORD *v88;
  float32x2_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  float *v94;
  int v95;
  float64x2_t *v96;
  int64_t v97;
  int v98;
  int v99;
  void *v100;
  void *v101;
  void *v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x2_t v110;
  float32x2_t v111;
  float32x2_t v112;
  float32x2_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  unint64_t v121;
  float64x2_t *v122;
  _OWORD *f64;
  float64x2_t *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  float64x2_t *v130;
  uint64_t v131;
  uint64_t *v132;
  _QWORD *v133;
  _QWORD *v134;
  BOOL v135;
  unint64_t v136;
  unint64_t v137;
  BOOL v138;
  uint64_t v139;
  uint64_t v140;
  BOOL v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  float *v147;
  int v148;
  uint64_t v149;
  int v150;
  float *v151;
  int v152;
  float v153;
  float v155;
  float v157;
  float v159;
  float v161;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  float v168;
  uint64_t v169;
  _QWORD v172[3];
  void *__p[2];
  uint64_t v174[3];
  _BYTE v175[32];
  _BYTE v176[40];
  _BYTE v177[40];
  __int128 v178;
  _BYTE v179[20];
  __int128 v180;
  __int128 v181;
  uint64_t v182;

  v182 = *MEMORY[0x24BDAC8D0];
  v14 = a8;
  if (a8)
  {
    v16 = *(_DWORD *)(a7 + 8);
    v15 = *(_DWORD *)(a7 + 12);
    if ((a5[22] != v16 || a5[23] != v15)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Tracker/PlaneTrackerImpl.cpp", 481, (uint64_t)"width == camera.width() && height == camera.height()", 52, (uint64_t)"Provided depthmap must have the same dimension with input camera.", 65, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    if (v16 >= 0x81)
    {
      v17 = 128.0 / *((float *)a5 + 24);
      *(float32x4_t *)v175 = vmulq_n_f32(*(float32x4_t *)((*(uint64_t (**)(void))(*(_QWORD *)a5 + 16))() + 8), v17);
      sub_223FBAC84((uint64_t)v177, (uint64_t)v175);
      *(_OWORD *)v175 = *(_OWORD *)&v177[8];
      sub_223FBAC84((uint64_t)v177, (uint64_t)v175);
      LODWORD(v18) = vcvtms_u32_f32((float)(128.0 / (float)v16) * (float)v15);
      *(_OWORD *)__p = *(_OWORD *)&v177[8];
      v19 = *(_OWORD *)&v177[24];
      v20 = v178;
      v180 = v178;
      v181 = *(_OWORD *)&v177[24];
      v21 = *(_QWORD *)v179;
      v22 = *(_DWORD *)&v179[8];
      v23 = *(_QWORD *)&v179[12];
      *((_OWORD *)a5 + 1) = *(_OWORD *)&v177[8];
      *((_OWORD *)a5 + 2) = v19;
      *((_OWORD *)a5 + 3) = v20;
      *((_QWORD *)a5 + 8) = v21;
      a5[18] = v22;
      *(_QWORD *)(a5 + 19) = v23;
      *((_QWORD *)a5 + 11) = (v18 << 32) | 0x80;
      a5[24] = 1124073472;
      *((float *)a5 + 25) = (float)v18;
    }
  }
  else if (a5[22] >= 0x81u)
  {
    v168 = 128.0 / *((float *)a5 + 24);
    *(float32x4_t *)v175 = vmulq_n_f32(*(float32x4_t *)((*(uint64_t (**)(void))(*(_QWORD *)a5 + 16))() + 8), v168);
    sub_223FBAC84((uint64_t)v177, (uint64_t)v175);
    v24 = v168 * *((float *)a5 + 25);
    v25 = *(_QWORD *)v179;
    v26 = *(_DWORD *)&v179[8];
    v27 = *(_QWORD *)&v179[12];
    LODWORD(v28) = vcvtas_u32_f32(v24);
    *(_OWORD *)v175 = *(_OWORD *)&v177[8];
    *(_OWORD *)__p = *(_OWORD *)&v177[24];
    v29 = *(_OWORD *)&v177[24];
    v30 = v178;
    v181 = v178;
    *((_OWORD *)a5 + 1) = *(_OWORD *)&v177[8];
    *((_OWORD *)a5 + 2) = v29;
    *((_OWORD *)a5 + 3) = v30;
    *((_QWORD *)a5 + 8) = v25;
    a5[18] = v26;
    *(_QWORD *)(a5 + 19) = v27;
    *((_QWORD *)a5 + 11) = (v28 << 32) | 0x80;
    a5[24] = 1124073472;
    *((float *)a5 + 25) = (float)roundf(v24);
  }
  LODWORD(v181) = 0;
  v177[24] = 0;
  memset(v177, 0, 17);
  *(_QWORD *)v175 = 0;
  __p[0] = 0;
  sub_22346A424((unint64_t *)&v177[32], __p, (unint64_t *)v175, 1, &v181, 1, 0);
  v165 = a3;
  v35 = (float32x2_t *)a5;
  v37 = a5[22];
  v36 = a5[23];
  if (v14)
  {
    v39 = *(float **)a7;
    v38 = *(_QWORD *)(a7 + 8);
    v164 = *(unsigned int *)(a7 + 16);
    v169 = *(unsigned int *)(a7 + 20);
    v40 = *(float **)(a7 + 24);
    v41 = *(unsigned int *)(a7 + 44);
    v163 = *(unsigned int *)(a7 + 40);
    LODWORD(v180) = 0;
    if ((_DWORD)v36)
      v42 = (_DWORD)v37 == 0;
    else
      v42 = 1;
    v166 = v36;
    v43 = v37 | (v36 << 32);
    if (v42)
      v44 = 0;
    else
      v44 = v37 | (v36 << 32);
    v45 = v44 << 32;
    if (!HIDWORD(v44))
      v45 = 0;
    if ((_DWORD)v44)
      v46 = HIDWORD(v44) == 0;
    else
      v46 = 1;
    *(_QWORD *)v175 = v44;
    *(_QWORD *)&v175[8] = v45 | (v44 != 0);
    v175[16] = 0;
    v175[24] = 0;
    __p[0] = *(void **)&v175[8];
    if (v46)
      v44 = 0;
    *(_QWORD *)&v181 = v44;
    if (((v45 >> 30) & ((v45 >> 30) - 1)) != 0)
      v47 = 4;
    else
      v47 = v45 >> 30;
    sub_22346A424((unint64_t *)v176, &v181, (unint64_t *)__p, 1, &v180, 1, v47);
    if (__PAIR64__(v166, v37) != v38)
    {
      if (((_DWORD)v164 != 1 || *(_DWORD *)&v175[8] != 1 || (_DWORD)v163 != 1)
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Tracker/PlaneTrackerImpl.cpp", 131, (uint64_t)"image.ValueStride(0) == 1 && output.ValueStride(0) == 1 && confidences.ValueStride(0) == 1", 90, (uint64_t)"First dimension must not have paddings for the efficiency.", 58, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      if (HIDWORD(v43) && (_DWORD)v43)
      {
        v63 = 0;
        v64 = 0;
        v65 = (float)v38 / (float)v43;
        v66 = *(_DWORD *)&v175[12];
        v67 = *(_QWORD *)&v176[8];
        v68 = 0.0;
        do
        {
          v69 = vcvtms_u32_f32(v68);
          if (HIDWORD(v38) - 1 >= v69)
            v70 = v69;
          else
            v70 = HIDWORD(v38) - 1;
          if (v70 >= HIDWORD(v38))
            break;
          v71 = (float *)(v67 + 4 * v63);
          v72 = &v39[v169 * (float)v70];
          v73 = &v40[v70 * v41];
          v74 = 0.0;
          v75 = v43;
          do
          {
            v76 = vcvtms_u32_f32(v74);
            if ((int)v38 - 1 < v76)
              v76 = v38 - 1;
            if (v76 >= v38)
              break;
            v77 = v76;
            if (v73[v77] > 0.7)
            {
              v78 = v72[v77];
              v79 = fabsf(v78);
              if (v78 != 0.0 && v79 > 0.000001)
                *v71 = v78;
            }
            v74 = v65 + v74;
            ++v71;
            --v75;
          }
          while (v75);
          v68 = v65 + v68;
          ++v64;
          v63 += v66;
        }
        while (v64 != HIDWORD(v43));
      }
      goto LABEL_95;
    }
    if (!*(_DWORD *)v175 || !*(_DWORD *)&v175[4])
    {
LABEL_95:
      *(_OWORD *)v177 = *(_OWORD *)v175;
      *(_OWORD *)&v177[12] = *(_OWORD *)&v175[12];
      v31.f64[1] = *(float64_t *)&v176[32];
      *(_OWORD *)v179 = *(_OWORD *)&v176[24];
      *(_QWORD *)&v177[32] = *(_QWORD *)v176;
      if ((_QWORD)v178)
        free((void *)v178);
      v178 = *(_OWORD *)&v176[8];
      v35 = (float32x2_t *)a5;
      v36 = v166;
      goto LABEL_98;
    }
    v48 = *(_DWORD *)v175 - 1;
    v49 = *(unsigned int *)&v175[8];
    v50 = *(float **)&v176[8];
    v51 = *(_DWORD *)&v175[4] - 1;
    if (*(_DWORD *)&v175[4] == 1)
    {
      v54 = v163;
    }
    else
    {
      if (*(_DWORD *)v175 == 1)
      {
        v83 = 4 * *(unsigned int *)&v175[12];
        do
        {
          v84 = *v39;
          if (fabsf(*v39) > 0.000001 && v84 != 0.0 && *v40 >= 0.7)
            *v50 = v84;
          v50 = (float *)((char *)v50 + v83);
          v39 += v169;
          v40 += v41;
          --v51;
        }
        while (v51);
        goto LABEL_89;
      }
      v52 = 0;
      v53 = 4 * *(unsigned int *)&v175[12];
      v54 = v163;
      do
      {
        v55 = v40;
        v56 = v39;
        v57 = v50;
        v58 = v48;
        do
        {
          v59 = *v56;
          if (fabsf(*v56) > 0.000001 && v59 != 0.0 && *v55 >= 0.7)
            *v57 = v59;
          v57 += v49;
          v56 += v164;
          v55 += v163;
          --v58;
        }
        while (v58);
        v61 = *v56;
        if (fabsf(*v56) > 0.000001 && v61 != 0.0 && *v55 >= 0.7)
          *v57 = v61;
        v50 = (float *)((char *)v50 + v53);
        v39 += v169;
        v40 += v41;
        ++v52;
      }
      while (v52 != v51);
    }
    for (; v48; --v48)
    {
      v81 = *v39;
      if (fabsf(*v39) > 0.000001 && v81 != 0.0 && *v40 >= 0.7)
        *v50 = v81;
      v50 += v49;
      v39 += v164;
      v40 += v54;
    }
LABEL_89:
    v86 = *v39;
    if (fabsf(*v39) > 0.000001 && v86 != 0.0 && *v40 >= 0.7)
      *v50 = v86;
    goto LABEL_95;
  }
LABEL_98:
  if (!*(_DWORD *)v177 || !*(_DWORD *)&v177[4])
  {
    LODWORD(v180) = 0;
    if ((_DWORD)v36)
      v135 = (_DWORD)v37 == 0;
    else
      v135 = 1;
    v136 = v37 | (v36 << 32);
    if (v135)
      v136 = 0;
    v137 = v136 << 32;
    if (!HIDWORD(v136))
      v137 = 0;
    if ((_DWORD)v136)
      v138 = HIDWORD(v136) == 0;
    else
      v138 = 1;
    *(_QWORD *)v175 = v136;
    *(_QWORD *)&v175[8] = v137 | (v136 != 0);
    v175[16] = 0;
    v175[24] = 0;
    __p[0] = *(void **)&v175[8];
    if (v138)
      v136 = 0;
    *(_QWORD *)&v181 = v136;
    if (((v137 >> 30) & ((v137 >> 30) - 1)) != 0)
      v139 = 4;
    else
      v139 = v137 >> 30;
    sub_22346A424((unint64_t *)v176, &v181, (unint64_t *)__p, 1, &v180, 1, v139);
    *(_OWORD *)v177 = *(_OWORD *)v175;
    *(_OWORD *)&v177[12] = *(_OWORD *)&v175[12];
    v31.f64[1] = *(float64_t *)&v176[32];
    *(_OWORD *)v179 = *(_OWORD *)&v176[24];
    *(_QWORD *)&v177[32] = *(_QWORD *)v176;
    if ((_QWORD)v178)
      free((void *)v178);
    v178 = *(_OWORD *)&v176[8];
    if (v165)
    {
      v140 = 200 * v165;
      do
      {
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 144) - *(_QWORD *)(a4 + 136)) >> 3) >= 2)
        {
          if (*(_DWORD *)&v177[4])
            v141 = *(_DWORD *)v177 == 0;
          else
            v141 = 1;
          v142 = *(_QWORD *)&v177[8];
          if (v141)
            v143 = 0;
          else
            v143 = *(_QWORD *)v177;
          v144 = v178;
          if (HIDWORD(v143) * *(_DWORD *)&v177[12] == -1
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v174[0] = v144;
          v174[1] = v143;
          v174[2] = v142;
          sub_223F7764C(a4, (uint64_t)a5, a6, v174);
        }
        a4 += 200;
        v140 -= 200;
      }
      while (v140);
    }
    v35 = (float32x2_t *)a5;
    if (*(_DWORD *)v177)
    {
      if (*(_DWORD *)&v177[4])
      {
        v145 = *(_DWORD *)v177 - 1;
        v146 = *(unsigned int *)&v177[8];
        v147 = (float *)v178;
        v148 = *(_DWORD *)&v177[4] - 1;
        if (*(_DWORD *)&v177[4] != 1)
        {
          v149 = 4 * *(unsigned int *)&v177[12];
          if (*(_DWORD *)v177 == 1)
          {
            do
            {
              v159 = fabsf(*v147);
              if (*v147 != 0.0 && v159 > 0.000001)
                *v147 = 1.0 / *v147;
              v147 = (float *)((char *)v147 + v149);
              --v148;
            }
            while (v148);
            goto LABEL_232;
          }
          v150 = 0;
          do
          {
            v151 = v147;
            v152 = v145;
            do
            {
              v153 = fabsf(*v151);
              if (*v151 != 0.0 && v153 > 0.000001)
                *v151 = 1.0 / *v151;
              v151 += v146;
              --v152;
            }
            while (v152);
            v155 = fabsf(*v151);
            if (*v151 != 0.0 && v155 > 0.000001)
              *v151 = 1.0 / *v151;
            v147 = (float *)((char *)v147 + v149);
            ++v150;
          }
          while (v150 != v148);
        }
        for (; v145; --v145)
        {
          v157 = fabsf(*v147);
          if (*v147 != 0.0 && v157 > 0.000001)
            *v147 = 1.0 / *v147;
          v147 += v146;
        }
LABEL_232:
        v161 = fabsf(*v147);
        if (*v147 != 0.0 && v161 > 0.000001)
          *v147 = 1.0 / *v147;
      }
    }
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  v88 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    while (1)
    {
      v31.f64[0] = (float64_t)v88[16];
      v89 = vcvt_f32_f64(*((float64x2_t *)v88 + 7));
      v32.i32[0] = a6->i32[2];
      v33.i32[0] = a6[1].i32[2];
      v34.i32[0] = a6[2].i32[2];
      v32 = vmla_f32(vmla_lane_f32(vmul_f32(v32, v89), v33, v89, 1), vcvt_f32_f64(v31), v34);
      if (v32.f32[0] <= -0.17365)
        break;
LABEL_155:
      v133 = (_QWORD *)v88[1];
      if (v133)
      {
        do
        {
          v134 = v133;
          v133 = (_QWORD *)*v133;
        }
        while (v133);
      }
      else
      {
        do
        {
          v134 = (_QWORD *)v88[2];
          v42 = *v134 == (_QWORD)v88;
          v88 = v134;
        }
        while (!v42);
      }
      v88 = v134;
      if (v134 == a2 + 1)
        goto LABEL_161;
    }
    if (*(_DWORD *)&v177[4])
      v90 = *(_DWORD *)v177 == 0;
    else
      v90 = 1;
    v91 = *(_QWORD *)&v177[8];
    if (v90)
      v92 = 0;
    else
      v92 = *(_QWORD *)v177;
    v93 = v178;
    if (HIDWORD(v92) * *(_DWORD *)&v177[12] == -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v172[0] = v93;
    v172[1] = v92;
    v172[2] = v91;
    sub_223F77E50((uint64_t)v172, (uint64_t)(v88 + 6), v35, a6, __p);
    v94 = (float *)__p[0];
    if (__p[1] == __p[0])
      goto LABEL_152;
    v95 = 0;
    v96 = (float64x2_t *)(v88 + 4);
    v97 = 16 * (((char *)__p[1] - (char *)__p[0]) >> 4);
    do
    {
      v95 |= sub_223F802D0((uint64_t)(v88 + 22), a1, v94, 1);
      v94 += 4;
      v97 -= 16;
    }
    while (v97);
    if ((v95 & 1) == 0)
    {
LABEL_152:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v35 = (float32x2_t *)a5;
      goto LABEL_155;
    }
    if (*((_DWORD *)v88 + 85) == a1)
    {
      v98 = v88[43] & ~(*((int *)v88 + 86) >> 31);
      *((_DWORD *)v88 + 86) = v98;
      if (!*((_BYTE *)v88 + 856))
        goto LABEL_131;
    }
    else
    {
      v98 = 0;
      *((_DWORD *)v88 + 85) = a1;
      *((_DWORD *)v88 + 87) += *((_DWORD *)v88 + 86);
      *((_DWORD *)v88 + 86) = 0;
      if (!*((_BYTE *)v88 + 856))
        goto LABEL_131;
    }
    v99 = *((_DWORD *)v88 + 46);
    if (v98 + *((_DWORD *)v88 + 87) < v99)
      goto LABEL_121;
    if (sub_223F83134((uint64_t)(v88 + 24), *((_DWORD *)v88 + 46)) < 0.09)
    {
      v103 = a6[1];
      v104 = a6[2];
      v105 = a6[3];
      v106 = vcvt_f32_f64(*((float64x2_t *)v88 + 10));
      v107 = vcvt_f32_f64(*((float64x2_t *)v88 + 9));
      v108 = vcvt_f32_f64(*((float64x2_t *)v88 + 8));
      v109 = vcvt_f32_f64(*((float64x2_t *)v88 + 7));
      v110 = vcvt_f32_f64(*((float64x2_t *)v88 + 6));
      v111 = vcvt_f32_f64(*((float64x2_t *)v88 + 5));
      v112 = vcvt_f32_f64(*((float64x2_t *)v88 + 4));
      v113 = vcvt_f32_f64(*((float64x2_t *)v88 + 3));
      v114 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*a6, v113.f32[0]), v103, v113, 1), v104, v112.f32[0]), v105, v112, 1);
      v115 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*a6, v111.f32[0]), v103, v111, 1), v104, v110.f32[0]), v105, v110, 1);
      v116 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*a6, v109.f32[0]), v103, v109, 1), v104, v108.f32[0]), v105, v108, 1);
      v117 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*a6, v107.f32[0]), v103, v107, 1), v104, v106.f32[0]);
      *(float32x4_t *)v175 = v114;
      *(float32x4_t *)&v175[16] = v115;
      *(float32x4_t *)v176 = v116;
      *(float32x4_t *)&v176[16] = vmlaq_lane_f32(v117, v105, v106, 1);
      if (sub_223F8355C((uint64_t)(v88 + 24), v99, a5, (float32x2_t *)v175) < 0.5)
      {
        if (*((_BYTE *)v88 + 856))
        {
LABEL_121:
          v100 = (void *)v88[104];
          if (v100)
          {
            v88[105] = v100;
            operator delete(v100);
          }
          v101 = (void *)v88[100];
          if (v101)
          {
            v88[101] = v101;
            operator delete(v101);
          }
          v102 = (void *)v88[97];
          if (v102)
          {
            v88[98] = v102;
            operator delete(v102);
          }
          *((_BYTE *)v88 + 856) = 0;
        }
      }
    }
LABEL_131:
    v118 = v88[26];
    if (v118)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v118 + 24))(v88[26]);
      v119 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v118 + 48))(v118);
      (*(void (**)(uint64_t))(*(_QWORD *)v118 + 40))(v118);
      if (v119)
        goto LABEL_152;
    }
    v120 = a9;
    v122 = (float64x2_t *)a9[1];
    v121 = a9[2];
    if ((unint64_t)v122 < v121)
    {
      v31 = *v96;
      *v122 = *v96;
      f64 = (_OWORD *)v122[1].f64;
LABEL_151:
      v120[1] = (uint64_t)f64;
      goto LABEL_152;
    }
    v124 = (float64x2_t *)*a9;
    v125 = ((uint64_t)v122 - *a9) >> 4;
    v126 = v125 + 1;
    if ((unint64_t)(v125 + 1) >> 60)
      sub_22316E078();
    v127 = v121 - (_QWORD)v124;
    if (v127 >> 3 > v126)
      v126 = v127 >> 3;
    if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF0)
      v128 = 0xFFFFFFFFFFFFFFFLL;
    else
      v128 = v126;
    if (v128)
    {
      if (v128 >> 60)
        sub_223174E94();
      v129 = (char *)operator new(16 * v128);
      v130 = (float64x2_t *)&v129[16 * v125];
      v31 = *v96;
      *v130 = *v96;
      v131 = (uint64_t)v130;
      if (v122 == v124)
      {
LABEL_149:
        v132 = a9;
        f64 = (_OWORD *)v130[1].f64;
        *a9 = v131;
        a9[1] = (uint64_t)&v130[1];
        a9[2] = (uint64_t)&v129[16 * v128];
        if (!v122)
        {
LABEL_150:
          v120 = v132;
          goto LABEL_151;
        }
LABEL_148:
        operator delete(v122);
        v120 = a9;
        goto LABEL_151;
      }
    }
    else
    {
      v129 = 0;
      v130 = (float64x2_t *)(16 * v125);
      v31 = *v96;
      *(float64x2_t *)(16 * v125) = *v96;
      v131 = 16 * v125;
      if (v122 == v124)
        goto LABEL_149;
    }
    do
    {
      v31 = v122[-1];
      *(float64x2_t *)(v131 - 16) = v31;
      v131 -= 16;
      --v122;
    }
    while (v122 != v124);
    v132 = a9;
    v122 = (float64x2_t *)*a9;
    f64 = (_OWORD *)v130[1].f64;
    *a9 = v131;
    a9[1] = (uint64_t)&v130[1];
    a9[2] = (uint64_t)&v129[16 * v128];
    if (!v122)
      goto LABEL_150;
    goto LABEL_148;
  }
LABEL_161:
  if ((_QWORD)v178)
    free((void *)v178);
}

void sub_223F9E508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44)
{
  if (a34)
    free(a34);
  if (!a44)
    _Unwind_Resume(exception_object);
  free(a44);
  _Unwind_Resume(exception_object);
}

void sub_223F9E5CC(uint64_t a1, _QWORD *a2, _DWORD *a3, float32x4_t *a4, char a5, int a6)
{
  _QWORD *v6;
  float64x2_t *v7;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float64_t v21;
  float64_t v22;
  BOOL v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  _OWORD v28[4];

  v6 = a2 + 1;
  v7 = (float64x2_t *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      if (HIDWORD(v7[21].f64[0]) == (_DWORD)a1)
      {
        if (LOBYTE(v7[53].f64[1]))
        {
          sub_223F9E7AC((uint64_t)&v7[22], (uint64_t)&v7[3], a5);
        }
        else if (LODWORD(v7[21].f64[1]) + HIDWORD(v7[21].f64[1]) >= a6)
        {
          v25 = *a4;
          v26 = a4[1];
          v24 = a4[2];
          v27 = a4[3];
          if (sub_223F83134((uint64_t)&v7[12], a6) >= 0.09)
            goto LABEL_10;
          v13 = vcvt_f32_f64(v7[10]);
          v14 = vcvt_f32_f64(v7[9]);
          v15 = vcvt_f32_f64(v7[8]);
          v16 = vcvt_f32_f64(v7[7]);
          v17 = vcvt_f32_f64(v7[6]);
          v18 = vcvt_f32_f64(v7[5]);
          v19 = vcvt_f32_f64(v7[4]);
          v20 = vcvt_f32_f64(v7[3]);
          v28[0] = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v25, v20.f32[0]), v26, v20, 1), v24, v19.f32[0]), v27, v19, 1);
          v28[1] = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v25, v18.f32[0]), v26, v18, 1), v24, v17.f32[0]), v27, v17, 1);
          v28[2] = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v25, v16.f32[0]), v26, v16, 1), v24, v15.f32[0]), v27, v15, 1);
          v28[3] = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v25, v14.f32[0]), v26, v14, 1), v24, v13.f32[0]), v27, v13, 1);
          if (sub_223F8355C((uint64_t)&v7[12], a6, a3, (float32x2_t *)v28) >= 0.5)
LABEL_10:
            sub_223F9EB40(a1, (uint64_t)&v7[3], a5);
        }
      }
      v21 = v7->f64[1];
      if (v21 == 0.0)
      {
        do
        {
          v22 = v7[1].f64[0];
          v23 = **(_QWORD **)&v22 == (_QWORD)v7;
          v7 = *(float64x2_t **)&v22;
        }
        while (!v23);
      }
      else
      {
        do
        {
          v22 = v21;
          v21 = **(double **)&v21;
        }
        while (v21 != 0.0);
      }
      v7 = *(float64x2_t **)&v22;
    }
    while (*(_QWORD **)&v22 != v6);
  }
}

void sub_223F9E7AC(uint64_t a1, uint64_t a2, char a3)
{
  float64x2_t v6;
  int64x2_t v7;
  float64x2_t v12;
  int8x16_t v14;
  int64x2_t v15;
  float64x2_t v16;
  uint64_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  __int128 v30;
  __int16 v31;
  char v32;
  int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void **v40;
  void *v41[2];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;
  void *__p[2];
  uint64_t v49;
  char v50;
  _BYTE v51[39];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v6.f64[0] = *(float64_t *)(a1 + 16);
  v7 = *(int64x2_t *)(a1 + 32);
  _D6 = *(_QWORD *)(a1 + 80);
  _Q4 = *(int64x2_t *)(a1 + 64);
  _D7 = *(double *)(a1 + 112);
  _Q5 = *(float64x2_t *)(a1 + 96);
  v12 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a1, v7);
  v6.f64[1] = *(float64_t *)(a1 + 48);
  _Q2 = vzip2q_s64(*(int64x2_t *)a1, v7);
  v14 = vextq_s8((int8x16_t)_Q2, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
  v15 = vzip1q_s64(_Q4, _Q2);
  v16 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v12, vnegq_f64(_Q5).f64[0]), (float64x2_t)_Q2, _Q5, 1), v6, _D7, 0);
  _Q4.i64[0] = *(_QWORD *)(a1 + 72);
  __asm { FMLS            D2, D4, V5.D[1] }
  *(_QWORD *)&_Q5.f64[0] = vdupq_laneq_s64(v15, 1).u64[0];
  __asm { FMLS            D2, D6, V7.D[0] }
  *(_QWORD *)&_Q5.f64[1] = v14.i64[0];
  _Q4.i64[0] = _D6;
  v21 = v14.i64[1];
  _Q2.i64[1] = 1.0;
  v22 = *(float64x2_t *)(a2 + 16);
  v24 = *(float64x2_t *)(a2 + 32);
  v23 = *(float64x2_t *)(a2 + 48);
  v26 = *(float64x2_t *)(a2 + 64);
  v25 = *(float64x2_t *)(a2 + 80);
  v28 = *(float64x2_t *)(a2 + 96);
  v27 = *(float64x2_t *)(a2 + 112);
  v29 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v15.u64[0], *(double *)a2), (float64x2_t)(unint64_t)v21, *(float64x2_t *)a2, 1), (float64x2_t)_Q4.u64[0], v22.f64[0]), (float64x2_t)_Q2, v22, 1);
  *(float64x2_t *)(a1 + 128) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v12, *(double *)a2), _Q5, *(float64x2_t *)a2, 1), v6, v22.f64[0]), v16, v22, 1);
  *(float64x2_t *)(a1 + 144) = v29;
  *(float64x2_t *)(a1 + 160) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v12, v24.f64[0]), _Q5, v24, 1), v6, v23.f64[0]), v16, v23, 1);
  *(float64x2_t *)(a1 + 176) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v15.u64[0], v24.f64[0]), (float64x2_t)(unint64_t)v21, v24, 1), (float64x2_t)_Q4.u64[0], v23.f64[0]), (float64x2_t)_Q2, v23, 1);
  *(float64x2_t *)(a1 + 192) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v12, v26.f64[0]), _Q5, v26, 1), v6, v25.f64[0]), v16, v25, 1);
  *(float64x2_t *)(a1 + 208) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v15.u64[0], v26.f64[0]), (float64x2_t)(unint64_t)v21, v26, 1), (float64x2_t)_Q4.u64[0], v25.f64[0]), (float64x2_t)_Q2, v25, 1);
  *(float64x2_t *)(a1 + 224) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v12, v28.f64[0]), _Q5, v28, 1), v6, v27.f64[0]), v16, v27, 1);
  *(float64x2_t *)(a1 + 240) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v15.u64[0], v28.f64[0]), (float64x2_t)(unint64_t)v21, v28, 1), (float64x2_t)_Q4.u64[0], v27.f64[0]), (float64x2_t)_Q2, v27, 1);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 288);
  sub_223F9FB54(a2 + 128, (uint64_t)v41);
  if (!v47)
  {
    v32 = 0;
    v33 = *(unsigned __int8 *)(a1 + 368);
    if (!*(_BYTE *)(a1 + 368))
      goto LABEL_6;
LABEL_9:
    if (v33)
    {
      *(_BYTE *)(a1 + 368) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 264) = v32;
      v37 = v53;
      *(_OWORD *)(a1 + 304) = v52;
      *(_OWORD *)(a1 + 320) = v37;
      v38 = v55;
      *(_OWORD *)(a1 + 336) = v54;
      *(_OWORD *)(a1 + 352) = v38;
      v39 = *(_OWORD *)&v51[23];
      *(_OWORD *)(a1 + 272) = *(_OWORD *)&v51[7];
      *(_OWORD *)(a1 + 288) = v39;
      *(_BYTE *)(a1 + 368) = 1;
    }
    goto LABEL_12;
  }
  v30 = *(_OWORD *)(a2 + 64);
  v49 = *(_QWORD *)(a2 + 80);
  *(_OWORD *)__p = v30;
  if (*(_BYTE *)(a1 + 368))
    v31 = *(unsigned __int8 *)(a1 + 264) | 0x100;
  else
    v31 = 0;
  v32 = sub_223F8EEDC((uint64_t)__p, (double *)v41, v31);
  v52 = v43;
  v53 = v44;
  v54 = v45;
  v55 = v46;
  *(_OWORD *)&v51[7] = *(_OWORD *)v41;
  *(_OWORD *)&v51[23] = v42;
  v33 = *(unsigned __int8 *)(a1 + 368);
  if (v33 != 1)
    goto LABEL_9;
LABEL_6:
  if (v33)
  {
    *(_BYTE *)(a1 + 264) = v32;
    v34 = v53;
    *(_OWORD *)(a1 + 304) = v52;
    *(_OWORD *)(a1 + 320) = v34;
    v35 = v55;
    *(_OWORD *)(a1 + 336) = v54;
    *(_OWORD *)(a1 + 352) = v35;
    v36 = *(_OWORD *)&v51[23];
    *(_OWORD *)(a1 + 272) = *(_OWORD *)&v51[7];
    *(_OWORD *)(a1 + 288) = v36;
  }
LABEL_12:
  v41[0] = 0;
  v41[1] = 0;
  *(_QWORD *)&v42 = 0;
  v50 = 0;
  sub_223FA6A08(a2, v41, 1, &v50, 1u, (void **)v51);
  if (v50)
    v40 = 0;
  else
    v40 = v41;
  *(_OWORD *)__p = *(_OWORD *)v51;
  v49 = *(_QWORD *)&v51[16];
  memset(v51, 0, 24);
  sub_223F9F76C(a1 + 376, (float32x2_t **)__p, a3, (unint64_t **)v40, v50 == 0);
  if (__p[0])
    operator delete(__p[0]);
  if (*(_QWORD *)v51)
  {
    *(_QWORD *)&v51[8] = *(_QWORD *)v51;
    operator delete(*(void **)v51);
  }
  if (v41[0])
  {
    v41[1] = v41[0];
    operator delete(v41[0]);
  }
  *(_DWORD *)(a1 + 476) = *(_DWORD *)(a2 + 292);
}

void sub_223F9EAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  void *v29;
  void *v30;

  if (__p)
  {
    operator delete(__p);
    v29 = a27;
    if (!a27)
    {
LABEL_3:
      v30 = a10;
      if (!a10)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(v30);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    v29 = a27;
    if (!a27)
      goto LABEL_3;
  }
  operator delete(v29);
  v30 = a10;
  if (!a10)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_223F9EB40(uint64_t a1, uint64_t a2, char a3)
{
  float32x2_t *v6;
  uint64_t v7;
  float32x2_t *v8;
  float32x2_t *v9;
  uint64_t v10;
  __int128 v11;
  float32x2_t v12;
  float32x2_t *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  float32x2_t *v20;
  char *v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  float32x2_t *v25;
  float32x2_t v26;
  float v27;
  float64_t v28;
  float64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  float *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  char *v41;
  __int128 *v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  float32x2_t *v49;
  uint64_t v50;
  uint64_t v51;
  float32x2_t *v52;
  float32x2_t v53;
  uint64_t v54;
  float32x2_t *v55;
  float v56;
  float v57;
  float32x2_t v58;
  BOOL v59;
  float32x2_t *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  void *v71;
  void **v72;
  char *v73;
  char *v74;
  void *v75;
  uint64_t v76;
  __int128 v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  uint64_t v84;
  int v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unsigned int v89;
  char v90;
  void *__p[2];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  char v109;
  __int128 v110;
  __int128 v111;
  unsigned __int8 v112;
  uint64_t v113;
  int v114;
  __int128 v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  float32x2_t *v122;
  float32x2_t *v123;
  float64x2_t v124;
  unint64_t v125;

  sub_223FA6A08(a2, 0, 0, 0, 0, (void **)&v122);
  v6 = v122;
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v92 = 0;
  v7 = (char *)v123 - (char *)v122;
  if (v123 == v122)
  {
    v58 = 0;
    v60 = v122;
    if (v122)
      goto LABEL_71;
    goto LABEL_72;
  }
  if (v7 < 0)
    sub_22316E078();
  v8 = (float32x2_t *)operator new((unint64_t)v7 >> 1);
  v89 = a1;
  v90 = a3;
  __p[0] = v8;
  __p[1] = v8;
  *(_QWORD *)&v92 = &v8[v7 >> 4];
  *(_QWORD *)&v124.f64[0] = operator new((unint64_t)v7 >> 2);
  v124.f64[1] = v124.f64[0];
  v125 = *(_QWORD *)&v124.f64[0] + 4 * (v7 >> 4);
  v9 = &v6[2 * (v7 >> 4)];
  do
  {
    *(float32x2_t *)&v11 = vadd_f32(*v6, v6[1]);
    v12 = vmul_f32(*(float32x2_t *)&v11, (float32x2_t)0x3F0000003F000000);
    if ((unint64_t)v8 < (unint64_t)v92)
    {
      *v8++ = v12;
      goto LABEL_26;
    }
    v13 = (float32x2_t *)__p[0];
    v14 = (char *)v8 - (char *)__p[0];
    v15 = ((char *)v8 - (char *)__p[0]) >> 3;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      sub_22316E078();
    v17 = v92 - (unint64_t)__p[0];
    if ((uint64_t)(v92 - (unint64_t)__p[0]) >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        sub_223174E94();
      v19 = operator new(8 * v18);
      v20 = (float32x2_t *)&v19[8 * v15];
      v21 = &v19[8 * v18];
      *v20 = v12;
      v22 = (uint64_t)&v20[1];
      v23 = (char *)v8 - (char *)v13;
      if (v8 != v13)
      {
LABEL_17:
        v24 = v23 - 8;
        if (v24 >= 0x168)
        {
          v45 = ((char *)&v8[-1] - (char *)v13) & 0xFFFFFFFFFFFFFFF8;
          if (&v19[v14 - 8 - v45] > &v19[v14 - 8])
          {
            v25 = v8;
          }
          else if ((float32x2_t *)((char *)&v8[-1] - v45) > &v8[-1])
          {
            v25 = v8;
          }
          else if ((unint64_t)((char *)v8 - v19 - v14) >= 0x20)
          {
            v46 = (v24 >> 3) + 1;
            v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
            v25 = &v8[v47 / 0xFFFFFFFFFFFFFFF8];
            v20 = (float32x2_t *)((char *)v20 - v47);
            v48 = &v19[8 * v15 - 16];
            v49 = v8 - 2;
            v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v11 = *(_OWORD *)v49->f32;
              *(v48 - 1) = *(_OWORD *)v49[-2].f32;
              *v48 = v11;
              v48 -= 2;
              v49 -= 4;
              v50 -= 4;
            }
            while (v50);
            if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_20:
              v8 = (float32x2_t *)__p[0];
              __p[0] = v20;
              *(_QWORD *)&v92 = v21;
              if (!v8)
                goto LABEL_25;
              goto LABEL_24;
            }
          }
          else
          {
            v25 = v8;
          }
        }
        else
        {
          v25 = v8;
        }
        do
        {
          v26 = v25[-1];
          --v25;
          v20[-1] = v26;
          --v20;
        }
        while (v25 != v13);
        goto LABEL_20;
      }
    }
    else
    {
      v19 = 0;
      v20 = (float32x2_t *)(8 * v15);
      v21 = 0;
      *(float32x2_t *)(8 * v15) = v12;
      v22 = 8 * v15 + 8;
      v23 = (char *)v8 - (char *)v13;
      if (v8 != v13)
        goto LABEL_17;
    }
    __p[0] = v20;
    *(_QWORD *)&v92 = v21;
LABEL_24:
    operator delete(v8);
LABEL_25:
    v8 = (float32x2_t *)v22;
LABEL_26:
    __p[1] = v8;
    v27 = (float)(v6[1].f32[0] - v6->f32[0]) * (float)(v6[1].f32[1] - v6->f32[1]);
    v28 = v124.f64[1];
    if (*(_QWORD *)&v124.f64[1] < v125)
    {
      **(float **)&v124.f64[1] = v27;
      v10 = *(_QWORD *)&v28 + 4;
      goto LABEL_5;
    }
    v29 = v124.f64[0];
    v30 = (uint64_t)(*(_QWORD *)&v124.f64[1] - *(_QWORD *)&v124.f64[0]) >> 2;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 62)
      sub_22316E078();
    v32 = v125 - *(_QWORD *)&v124.f64[0];
    if ((uint64_t)(v125 - *(_QWORD *)&v124.f64[0]) >> 1 > v31)
      v31 = v32 >> 1;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
      v33 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    if (v33)
    {
      if (v33 >> 62)
        sub_223174E94();
      v34 = (char *)operator new(4 * v33);
      v35 = (float *)&v34[4 * v30];
      *v35 = v27;
      v10 = (uint64_t)(v35 + 1);
      v36 = *(_QWORD *)&v28 - *(_QWORD *)&v29;
      if (*(_QWORD *)&v28 == *(_QWORD *)&v29)
        goto LABEL_44;
LABEL_38:
      v37 = v36 - 4;
      if (v37 < 0x2C)
        goto LABEL_135;
      if (*(_QWORD *)&v29 - (_QWORD)v34 < 0x20uLL)
        goto LABEL_135;
      v38 = (v37 >> 2) + 1;
      v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
      *(_QWORD *)&v40 = *(_QWORD *)&v28 - v39;
      v35 = (float *)((char *)v35 - v39);
      v41 = &v34[4 * v30 - 16];
      v42 = (__int128 *)(*(_QWORD *)&v28 - 16);
      v43 = v38 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v11 = *v42;
        *((_OWORD *)v41 - 1) = *(v42 - 1);
        *(_OWORD *)v41 = v11;
        v41 -= 32;
        v42 -= 2;
        v43 -= 8;
      }
      while (v43);
      v28 = v40;
      if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_135:
        do
        {
          v44 = *(_DWORD *)(*(_QWORD *)&v28 - 4);
          *(_QWORD *)&v28 -= 4;
          *((_DWORD *)v35-- - 1) = v44;
        }
        while (*(_QWORD *)&v28 != *(_QWORD *)&v29);
      }
      goto LABEL_44;
    }
    v34 = 0;
    v35 = (float *)(4 * v30);
    *(float *)(4 * v30) = v27;
    v10 = 4 * v30 + 4;
    v36 = *(_QWORD *)&v28 - *(_QWORD *)&v29;
    if (*(_QWORD *)&v28 != *(_QWORD *)&v29)
      goto LABEL_38;
LABEL_44:
    *(_QWORD *)&v124.f64[0] = v35;
    v125 = (unint64_t)&v34[4 * v33];
    if (v29 != 0.0)
      operator delete(*(void **)&v29);
LABEL_5:
    *(_QWORD *)&v124.f64[1] = v10;
    v6 += 2;
  }
  while (v6 != v9);
  if (__p[0] == v8)
  {
    v58 = 0;
    a3 = v90;
    a1 = v89;
    if (*(_QWORD *)&v124.f64[0])
      goto LABEL_67;
  }
  else
  {
    v51 = *(_QWORD *)&v124.f64[0] + 4;
    v52 = (float32x2_t *)((char *)__p[0] + 8);
    LODWORD(v11) = 0;
    v53 = 0;
    do
    {
      do
      {
        v54 = v51;
        v55 = v52;
        v56 = *(float *)(v51 - 4);
        v53 = vadd_f32(v53, vmul_n_f32(v52[-1], v56));
        *(float *)&v11 = *(float *)&v11 + v56;
        v51 += 4;
        ++v52;
      }
      while (v55 != v8);
    }
    while (v54 != v10);
    v57 = fabsf(*(float *)&v11);
    v58 = 0;
    v59 = *(float *)&v11 != 0.0 && v57 > 0.000001;
    a3 = v90;
    if (v59)
      v58 = vdiv_f32(v53, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v11, 0));
    v8 = (float32x2_t *)__p[0];
    a1 = v89;
    if (*(_QWORD *)&v124.f64[0])
LABEL_67:
      operator delete(*(void **)&v124.f64[0]);
  }
  if (v8)
  {
    __p[1] = v8;
    operator delete(v8);
  }
  v60 = v122;
  if (v122)
  {
LABEL_71:
    v123 = v60;
    operator delete(v60);
  }
LABEL_72:
  v124 = vcvtq_f64_f32(vmul_n_f32(vneg_f32(vrnda_f32(vdiv_f32(v58, (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a2 + 128), 0)))), COERCE_FLOAT(*(_QWORD *)(a2 + 128))));
  sub_223FA717C(a1, a2, &v124, (uint64_t)__p);
  v61 = v96;
  *(_OWORD *)(a2 + 64) = v95;
  *(_OWORD *)(a2 + 80) = v61;
  v62 = v98;
  *(_OWORD *)(a2 + 96) = v97;
  *(_OWORD *)(a2 + 112) = v62;
  v63 = v92;
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(_OWORD *)(a2 + 16) = v63;
  v64 = v94;
  *(_OWORD *)(a2 + 32) = v93;
  *(_OWORD *)(a2 + 48) = v64;
  v65 = v99;
  *(_DWORD *)(a2 + 136) = v100;
  *(_QWORD *)(a2 + 128) = v65;
  *(_DWORD *)(a2 + 144) = v101;
  v66 = v102;
  v67 = v103;
  if (v103)
    (*(void (**)(uint64_t))(*(_QWORD *)v103 + 24))(v103);
  v68 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 152) = v66;
  *(_QWORD *)(a2 + 160) = v67;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 40))(v68);
  v69 = v104;
  v104 = 0;
  v70 = *(uint64_t **)(a2 + 168);
  *(_QWORD *)(a2 + 168) = v69;
  if (v70)
  {
    if (*v70)
    {
      sub_223F94A40(v70, *v70);
      operator delete((void *)*v70);
    }
    MEMORY[0x227684CE8](v70, 0x20C40960023A9);
  }
  v71 = *(void **)(a2 + 176);
  if (v71)
  {
    *(_QWORD *)(a2 + 184) = v71;
    operator delete(v71);
    *(_QWORD *)(a2 + 176) = 0;
    *(_QWORD *)(a2 + 184) = 0;
    *(_QWORD *)(a2 + 192) = 0;
  }
  v72 = (void **)(a2 + 200);
  v73 = *(char **)(a2 + 200);
  *(_OWORD *)(a2 + 176) = v105;
  *(_QWORD *)(a2 + 192) = v106;
  v106 = 0;
  v105 = 0uLL;
  if (v73)
  {
    v74 = *(char **)(a2 + 208);
    v75 = v73;
    if (v74 != v73)
    {
      do
      {
        v76 = *((_QWORD *)v74 - 1);
        if (v76)
          (*(void (**)(uint64_t))(*(_QWORD *)v76 + 32))(v76);
        v74 -= 16;
      }
      while (v74 != v73);
      v75 = *v72;
    }
    *(_QWORD *)(a2 + 208) = v73;
    operator delete(v75);
    *v72 = 0;
    *(_QWORD *)(a2 + 208) = 0;
    *(_QWORD *)(a2 + 216) = 0;
  }
  *(_OWORD *)(a2 + 200) = v107;
  *(_QWORD *)(a2 + 216) = v108;
  v108 = 0;
  v107 = 0uLL;
  if (*(unsigned __int8 *)(a2 + 264) != v112)
  {
    if (*(_BYTE *)(a2 + 264))
    {
      v81 = *(std::__shared_weak_count **)(a2 + 240);
      if (v81)
      {
        p_shared_owners = (unint64_t *)&v81->__shared_owners_;
        do
          v83 = __ldaxr(p_shared_owners);
        while (__stlxr(v83 - 1, p_shared_owners));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      *(_BYTE *)(a2 + 264) = 0;
    }
    else
    {
      *(_BYTE *)(a2 + 224) = v109;
      *(_OWORD *)(a2 + 232) = v110;
      v110 = 0uLL;
      *(_OWORD *)(a2 + 248) = v111;
      *(_BYTE *)(a2 + 264) = 1;
    }
LABEL_112:
    v85 = v112;
    *(_QWORD *)(a2 + 272) = v113;
    *(_DWORD *)(a2 + 280) = v114;
    *(_OWORD *)(a2 + 288) = v115;
    if (!v85)
      goto LABEL_117;
    v86 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
    if (!*((_QWORD *)&v110 + 1))
      goto LABEL_117;
    v87 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
      sub_223F9497C((uint64_t)&v104);
      v84 = v103;
      if (!v103)
        goto LABEL_119;
    }
    else
    {
LABEL_117:
      sub_223F9497C((uint64_t)&v104);
      v84 = v103;
      if (!v103)
        goto LABEL_119;
    }
LABEL_118:
    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 40))(v84);
    goto LABEL_119;
  }
  if (*(_BYTE *)(a2 + 264))
  {
    *(_BYTE *)(a2 + 224) = v109;
    v77 = v110;
    v110 = 0uLL;
    v78 = *(std::__shared_weak_count **)(a2 + 240);
    *(_OWORD *)(a2 + 232) = v77;
    if (v78)
    {
      v79 = (unint64_t *)&v78->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    *(_QWORD *)(a2 + 248) = v111;
    *(_WORD *)(a2 + 256) = WORD4(v111);
    goto LABEL_112;
  }
  *(_QWORD *)(a2 + 272) = v113;
  *(_DWORD *)(a2 + 280) = v114;
  *(_OWORD *)(a2 + 288) = v115;
  sub_223F9497C((uint64_t)&v104);
  v84 = v103;
  if (v103)
    goto LABEL_118;
LABEL_119:
  sub_223F9F5D8(a2, a3, (uint64_t)__p);
  sub_223F8F6DC(a2 + 304, (uint64_t)__p);
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }
  if (v118)
  {
    v119 = v118;
    operator delete(v118);
  }
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
}

void sub_223F9F35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223F979A0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223F9F370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  void *v14;

  if (__p)
    operator delete(__p);
  v14 = *(void **)(v12 - 168);
  if (!v14)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v12 - 160) = v14;
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

void sub_223F9F3E4(int a1@<W0>, _QWORD *a2@<X1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _OWORD *v9;
  _OWORD *v10;
  unint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v9 = 0;
    while (*((_BYTE *)v5 + 856) || a1 - *((_DWORD *)v5 + 85) < a3)
    {
LABEL_20:
      v21 = (_QWORD *)v5[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v5[2];
          v23 = *v22 == (_QWORD)v5;
          v5 = v22;
        }
        while (!v23);
      }
      v5 = v22;
      if (v22 == v4)
        return;
    }
    v10 = v5 + 4;
    v11 = a4[2];
    if ((unint64_t)v9 < v11)
    {
      *v9 = *v10;
      v12 = v9 + 1;
LABEL_19:
      a4[1] = (uint64_t)v12;
      v9 = v12;
      goto LABEL_20;
    }
    v13 = (_OWORD *)*a4;
    v14 = ((uint64_t)v9 - *a4) >> 4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 60)
      sub_22316E078();
    v16 = v11 - (_QWORD)v13;
    if (v16 >> 3 > v15)
      v15 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 60)
        sub_223174E94();
      v18 = (char *)operator new(16 * v17);
      v19 = &v18[16 * v14];
      *(_OWORD *)v19 = *v10;
      v20 = (uint64_t)v19;
      if (v9 == v13)
      {
LABEL_17:
        v12 = v19 + 16;
        *a4 = v20;
        a4[1] = (uint64_t)(v19 + 16);
        a4[2] = (uint64_t)&v18[16 * v17];
        if (!v9)
          goto LABEL_19;
LABEL_18:
        operator delete(v9);
        goto LABEL_19;
      }
    }
    else
    {
      v18 = 0;
      v19 = (char *)(16 * v14);
      *(_OWORD *)(16 * v14) = *v10;
      v20 = 16 * v14;
      if (v9 == v13)
        goto LABEL_17;
    }
    do
    {
      *(_OWORD *)(v20 - 16) = *(v9 - 1);
      v20 -= 16;
      --v9;
    }
    while (v9 != v13);
    v9 = (_OWORD *)*a4;
    v12 = v19 + 16;
    *a4 = v20;
    a4[1] = (uint64_t)(v19 + 16);
    a4[2] = (uint64_t)&v18[16 * v17];
    if (!v9)
      goto LABEL_19;
    goto LABEL_18;
  }
}

void sub_223F9F5AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_223F9F5D8(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;
  __int128 v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  void *__p[3];
  __int128 v18;
  uint64_t v19;
  _OWORD v20[6];
  char v21;

  v6 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a3 + 80) = v6;
  v7 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a3 + 112) = v7;
  v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v8;
  v9 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a3 + 48) = v9;
  *(_OWORD *)(a3 + 160) = xmmword_2246925E8;
  *(_OWORD *)(a3 + 176) = unk_2246925F8;
  *(_OWORD *)(a3 + 128) = xmmword_2246925C8;
  *(_OWORD *)(a3 + 144) = unk_2246925D8;
  *(_OWORD *)(a3 + 224) = xmmword_224692628;
  *(_OWORD *)(a3 + 240) = unk_224692638;
  *(_OWORD *)(a3 + 192) = xmmword_224692608;
  *(_OWORD *)(a3 + 208) = unk_224692618;
  *(_DWORD *)(a3 + 256) = *(_DWORD *)(a1 + 288);
  sub_223F9FB54(a1 + 128, (uint64_t)v20);
  v10 = v21;
  if (v21)
  {
    v11 = *(_OWORD *)(a1 + 64);
    v19 = *(_QWORD *)(a1 + 80);
    v18 = v11;
    v12 = sub_223F8EEDC((uint64_t)&v18, (double *)v20, 0);
    v13 = v20[3];
    *(_OWORD *)(a3 + 304) = v20[2];
    *(_OWORD *)(a3 + 320) = v13;
    v14 = v20[5];
    *(_OWORD *)(a3 + 336) = v20[4];
    *(_OWORD *)(a3 + 352) = v14;
    v15 = v20[1];
    v10 = 1;
    *(_OWORD *)(a3 + 272) = v20[0];
    *(_OWORD *)(a3 + 288) = v15;
  }
  else
  {
    v12 = 0;
  }
  *(_BYTE *)(a3 + 264) = v12;
  *(_BYTE *)(a3 + 368) = v10;
  *(_OWORD *)(a3 + 440) = 0u;
  *(_OWORD *)(a3 + 456) = 0u;
  *(_OWORD *)(a3 + 408) = 0u;
  *(_OWORD *)(a3 + 424) = 0u;
  *(_OWORD *)(a3 + 376) = 0u;
  *(_OWORD *)(a3 + 392) = 0u;
  v16 = *(_DWORD *)(a1 + 292);
  *(_DWORD *)(a3 + 472) = v16;
  *(_DWORD *)(a3 + 476) = v16;
  *(_QWORD *)(a3 + 488) = 0;
  *(_QWORD *)(a3 + 496) = 0;
  *(_QWORD *)(a3 + 480) = 0;
  sub_223FA6A08(a1, 0, 0, 0, 0, __p);
  sub_223F9F76C(a3 + 376, (float32x2_t **)__p, a2, 0, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_223F9F734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _QWORD *v11;

  if (__p)
  {
    operator delete(__p);
    sub_223F8F834(v11);
    _Unwind_Resume(a1);
  }
  sub_223F8F834(v11);
  _Unwind_Resume(a1);
}

void sub_223F9F76C(uint64_t a1, float32x2_t **a2, char a3, unint64_t **a4, char a5)
{
  float32x2_t *v8;
  float32x2_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float32x2_t *v15;
  float32x2_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x4_t v21;
  float32x4_t v22;
  __int128 v23;
  uint64_t v24;
  float32x2_t *v25;
  float32x2_t *v26;
  uint64_t v27;
  float32x2_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  void *v39;
  uint64_t *v40;
  uint64_t *v41;
  int8x16_t v42;
  uint64_t v43;
  float32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  __int128 v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  unint64_t *v52;
  float32x2_t *v53;
  uint64_t v54;
  _BYTE v55[32];
  __int128 v56;
  uint64_t v57;

  if (a5)
  {
    v9 = *a2;
    v8 = a2[1];
    v10 = *a4;
    v11 = a4[1];
    v12 = (char *)*a4 - (char *)v11;
    v56 = 0uLL;
    v57 = 0;
    if (v10 == v11)
    {
      v24 = 0;
      v23 = 0uLL;
    }
    else
    {
      v13 = -(v12 >> 1);
      if (v13 >> 61)
        sub_22316E078();
      *(_QWORD *)&v56 = operator new(-8 * (v12 >> 1));
      *((_QWORD *)&v56 + 1) = v56;
      v57 = v56 + 8 * v13;
      v52 = v10;
      v53 = v9;
      v54 = ((char *)v8 - (char *)v9) >> 4;
      do
      {
        v14 = *v10;
        if (((char *)v8 - (char *)v9) >> 4 <= *v10)
          sub_22457354C((unint64_t *)&v54, v14);
        v15 = &v9[2 * v14];
        v16 = v15[1];
        *(float32x2_t *)v17.f32 = vmul_f32(vadd_f32(*v15, v16), (float32x2_t)0x3F0000003F000000);
        *(float32x2_t *)v18.f32 = vsub_f32(*(float32x2_t *)v17.f32, v16);
        v19 = vadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v18.f32);
        v20 = vsub_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v18.f32);
        v17.i64[1] = v17.i64[0];
        v18.i64[1] = v18.i64[0];
        v21 = vsubq_f32(v17, v18);
        v22 = vaddq_f32(v17, v18);
        v22.i32[0] = v21.i32[0];
        *(float32x2_t *)v55 = v19;
        v22.i32[3] = v21.i32[3];
        *(float32x4_t *)&v55[8] = v22;
        *(float32x2_t *)&v55[24] = v20;
        sub_223F97A34((unint64_t *)&v56, *((uint64_t *)&v56 + 1), v55, (char *)&v56, 4);
        v52 = ++v10;
      }
      while (v10 != v11);
      v23 = v56;
      v24 = v57;
    }
    v50 = v23;
    v51 = v24;
    sub_22369E588((unint64_t *)(a1 + 48), (char **)&v50);
    v36 = (void *)v50;
    if ((_QWORD)v50)
    {
      *((_QWORD *)&v50 + 1) = v50;
LABEL_24:
      operator delete(v36);
    }
  }
  else
  {
    v25 = *a2;
    v26 = a2[1];
    v56 = 0uLL;
    v57 = 0;
    v27 = (char *)v26 - (char *)v25;
    if (v26 == v25)
    {
      v35 = 0;
    }
    else
    {
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFDLL)
        sub_22316E078();
      *(_QWORD *)&v56 = operator new(2 * v27);
      *((_QWORD *)&v56 + 1) = v56;
      v57 = v56 + 8 * (v27 >> 2);
      do
      {
        v28 = v25[1];
        *(float32x2_t *)v29.f32 = vmul_f32(vadd_f32(*v25, v28), (float32x2_t)0x3F0000003F000000);
        *(float32x2_t *)v30.f32 = vsub_f32(*(float32x2_t *)v29.f32, v28);
        v31 = vadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v30.f32);
        v32 = vsub_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v30.f32);
        v29.i64[1] = v29.i64[0];
        v30.i64[1] = v30.i64[0];
        v33 = vsubq_f32(v29, v30);
        v34 = vaddq_f32(v29, v30);
        v34.i32[0] = v33.i32[0];
        *(float32x2_t *)v55 = v31;
        v34.i32[3] = v33.i32[3];
        *(float32x4_t *)&v55[8] = v34;
        *(float32x2_t *)&v55[24] = v32;
        sub_223F97A34((unint64_t *)&v56, *((uint64_t *)&v56 + 1), v55, (char *)&v56, 4);
        v25 += 2;
      }
      while (v25 != v26);
      v35 = *((_QWORD *)&v56 + 1);
      v27 = v56;
      if (!(_QWORD)v56)
      {
        if (*((_QWORD *)&v56 + 1))
        {
          v27 = 0;
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
        }
      }
    }
    sub_223FBEADC((v35 - v27) >> 3, (float32x2_t *)v27, (uint64_t)v55);
    v37 = *(_OWORD *)v55;
    v38 = *(_QWORD *)&v55[16];
    v39 = *(void **)(a1 + 48);
    if (v39)
    {
      *(_QWORD *)(a1 + 56) = v39;
      v49 = v37;
      operator delete(v39);
      v37 = v49;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = 0;
    }
    *(_OWORD *)(a1 + 48) = v37;
    *(_QWORD *)(a1 + 64) = v38;
    if (v27)
    {
      v36 = (void *)v27;
      goto LABEL_24;
    }
  }
  if ((a3 & 1) == 0)
  {
    if ((a3 & 2) == 0)
      goto LABEL_27;
LABEL_35:
    sub_22369E650(*(_QWORD *)(a1 + 56), *(float32x2_t **)(a1 + 48), 0, 0, v55);
    v47 = *(_OWORD *)&v55[16];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v55;
    *(_OWORD *)(a1 + 32) = v47;
    if ((a3 & 8) == 0)
      return;
    goto LABEL_36;
  }
  v40 = *(uint64_t **)(a1 + 48);
  v41 = *(uint64_t **)(a1 + 56);
  if (v40 == v41)
  {
    *(_OWORD *)a1 = 0u;
    if ((a3 & 2) != 0)
      goto LABEL_35;
  }
  else
  {
    v42.i64[0] = *v40;
    v42.i64[1] = *v40;
    do
    {
      v43 = *v40++;
      v44.i64[0] = v43;
      v45.i64[0] = v43;
      v45.i64[1] = v43;
      v46.i64[0] = v42.i64[0];
      v46.i64[1] = v43;
      v44.i64[1] = vextq_s8(v42, v42, 8uLL).u64[0];
      v42 = vbslq_s8((int8x16_t)vcgtq_f32(v46, v44), v45, v42);
    }
    while (v40 != v41);
    *(int8x16_t *)a1 = v42;
    if ((a3 & 2) != 0)
      goto LABEL_35;
  }
LABEL_27:
  if ((a3 & 8) == 0)
    return;
LABEL_36:
  v48 = *(void **)(a1 + 72);
  if (v48)
  {
    *(_QWORD *)(a1 + 80) = v48;
    operator delete(v48);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 88) = a2[2];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_223F9FB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  void *v22;

  if (v22)
    operator delete(v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F9FB54@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  int8x16_t v16;
  float64x2_t v17;
  int8x16_t v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  char v50;
  double v51;
  double v52;
  double v53;
  int8x16_t v54;
  double v55;
  double v56;
  int8x16_t v57;
  int8x16_t v58;
  double v59;
  double v60;
  double v61;
  int8x16_t v62;

  v3 = *(uint64_t **)(result + 40);
  v4 = *v3;
  v5 = v3[1];
  if (*v3 != v5)
  {
    while (!*(_BYTE *)(v4 + 224))
    {
      v4 += 232;
      if (v4 == v5)
        goto LABEL_22;
    }
  }
  if (v4 == v5)
  {
LABEL_22:
    v62.i64[0] = 0;
    v59 = 0.0;
    v61 = 0.0;
    v55 = 0.0;
    v60 = 0.0;
    v51 = 0.0;
    v58.i64[0] = 0;
    v56 = 0.0;
    v57.i64[0] = 0;
    v53 = 0.0;
    v54.i64[0] = 0;
    v52 = 0.0;
  }
  else
  {
    v6 = *(float *)(result + 16) * *(float *)(result + 16);
    v62.i64[0] = 0;
    v59 = 0.0;
    v61 = 0.0;
    v55 = 0.0;
    v60 = 0.0;
    v51 = 0.0;
    v58.i64[0] = 0;
    v56 = 0.0;
    v57.i64[0] = 0;
    v53 = 0.0;
    v54.i64[0] = 0;
    v52 = 0.0;
LABEL_7:
    v7 = *(_QWORD *)(v4 + 24);
    if (!v7 || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7)) == 0)
    {
      v8 = *(_QWORD *)(v4 + 40);
      if (!v8 || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8)) == 0)
      {
        v9 = *(_QWORD *)(v4 + 56);
        if (!v9 || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9)) == 0)
        {
          result = *(_QWORD *)(v4 + 72);
          if ((!result || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result)) == 0)
            && *(_BYTE *)(v4 + 216)
            && *(_BYTE *)(v4 + 192))
          {
            v10 = (float)((float)((float)(*(float *)(v4 + 88) - *(float *)(v4 + 80))
                                * (float)(*(float *)(v4 + 92) - *(float *)(v4 + 84)))
                        / v6);
            v11 = vmulq_n_f64(*(float64x2_t *)(v4 + 176), v10);
            v12 = vmulq_n_f64(*(float64x2_t *)(v4 + 160), v10);
            v13 = vmulq_n_f64(*(float64x2_t *)(v4 + 144), v10);
            v14 = vmulq_n_f64(*(float64x2_t *)(v4 + 96), v10);
            v15.f64[0] = v60;
            v15.f64[1] = v51;
            v16 = (int8x16_t)vaddq_f64(v15, vmulq_n_f64(*(float64x2_t *)(v4 + 128), v10));
            v17.f64[0] = v61;
            v17.f64[1] = v55;
            v18 = (int8x16_t)vaddq_f64(v17, vmulq_n_f64(*(float64x2_t *)(v4 + 112), v10));
            *(_QWORD *)&v19.f64[0] = v62.i64[0];
            v19.f64[1] = v59;
            v60 = *(double *)v16.i64;
            *(_QWORD *)&v51 = vextq_s8(v16, v16, 8uLL).u64[0];
            v61 = *(double *)v18.i64;
            *(_QWORD *)&v55 = vextq_s8(v18, v18, 8uLL).u64[0];
            v62 = (int8x16_t)vaddq_f64(v19, v14);
            *(_QWORD *)&v59 = vextq_s8(v62, v62, 8uLL).u64[0];
            *(_QWORD *)&v19.f64[0] = v58.i64[0];
            v19.f64[1] = v56;
            v58 = (int8x16_t)vaddq_f64(v19, v13);
            *(_QWORD *)&v19.f64[0] = v57.i64[0];
            v19.f64[1] = v53;
            *(_QWORD *)&v56 = vextq_s8(v58, v58, 8uLL).u64[0];
            v57 = (int8x16_t)vaddq_f64(v19, v12);
            *(_QWORD *)&v19.f64[0] = v54.i64[0];
            v19.f64[1] = v52;
            *(_QWORD *)&v53 = vextq_s8(v57, v57, 8uLL).u64[0];
            v54 = (int8x16_t)vaddq_f64(v19, v11);
            *(_QWORD *)&v52 = vextq_s8(v54, v54, 8uLL).u64[0];
          }
        }
      }
    }
    while (1)
    {
      v4 += 232;
      if (v4 == v5)
        break;
      if (*(_BYTE *)(v4 + 224))
      {
        if (v4 != v5)
          goto LABEL_7;
        break;
      }
    }
  }
  *(_QWORD *)&v20.f64[0] = v62.i64[0];
  if (*(double *)v62.i64 == 0.0)
    goto LABEL_28;
  v21 = 0.0 - *(double *)v62.i64;
  if (*(double *)v62.i64 >= 0.0)
    v21 = *(double *)v62.i64;
  if (v21 <= 0.00000001)
  {
LABEL_28:
    v24 = v59;
    v23 = v60;
    v22 = v61;
    v26 = *(double *)v57.i64;
    v25 = *(double *)v58.i64;
    v28 = v55;
    v27 = v56;
    v30 = v53;
    v29 = *(double *)v54.i64;
    v32 = v51;
    v31 = v52;
    if (v59 == 0.0)
      goto LABEL_71;
    v33 = 0.0 - v59;
    if (v59 >= 0.0)
      v33 = v59;
    if (v33 <= 0.00000001)
    {
LABEL_71:
      if (v61 == 0.0)
        goto LABEL_77;
      v34 = 0.0 - v61;
      if (v61 >= 0.0)
        v34 = v61;
      if (v34 <= 0.00000001)
      {
LABEL_77:
        if (v55 == 0.0)
          goto LABEL_78;
        v35 = 0.0 - v55;
        if (v55 >= 0.0)
          v35 = v55;
        if (v35 <= 0.00000001)
        {
LABEL_78:
          if (v60 == 0.0)
            goto LABEL_79;
          v36 = 0.0 - v60;
          if (v60 >= 0.0)
            v36 = v60;
          if (v36 <= 0.00000001)
          {
LABEL_79:
            if (v51 == 0.0)
              goto LABEL_80;
            v37 = 0.0 - v51;
            if (v51 >= 0.0)
              v37 = v51;
            if (v37 <= 0.00000001)
            {
LABEL_80:
              if (*(double *)v58.i64 == 0.0)
                goto LABEL_81;
              v38 = 0.0 - *(double *)v58.i64;
              if (*(double *)v58.i64 >= 0.0)
                v38 = *(double *)v58.i64;
              if (v38 <= 0.00000001)
              {
LABEL_81:
                if (v56 == 0.0)
                  goto LABEL_82;
                v39 = 0.0 - v56;
                if (v56 >= 0.0)
                  v39 = v56;
                if (v39 <= 0.00000001)
                {
LABEL_82:
                  if (*(double *)v57.i64 == 0.0)
                    goto LABEL_83;
                  v40 = 0.0 - *(double *)v57.i64;
                  if (*(double *)v57.i64 >= 0.0)
                    v40 = *(double *)v57.i64;
                  if (v40 <= 0.00000001)
                  {
LABEL_83:
                    if (v53 == 0.0)
                      goto LABEL_84;
                    v41 = 0.0 - v53;
                    if (v53 >= 0.0)
                      v41 = v53;
                    if (v41 <= 0.00000001)
                    {
LABEL_84:
                      if (*(double *)v54.i64 == 0.0)
                        goto LABEL_85;
                      v42 = 0.0 - *(double *)v54.i64;
                      if (*(double *)v54.i64 >= 0.0)
                        v42 = *(double *)v54.i64;
                      if (v42 <= 0.00000001)
                      {
LABEL_85:
                        if (v52 == 0.0)
                          goto LABEL_74;
                        v43 = 0.0 - v52;
                        if (v52 >= 0.0)
                          v43 = v52;
                        if (v43 <= 0.00000001)
                        {
LABEL_74:
                          v50 = 0;
                          *(_BYTE *)a2 = 0;
                          goto LABEL_73;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v23 = v60;
    v22 = v61;
    v24 = v59;
    v26 = *(double *)v57.i64;
    v25 = *(double *)v58.i64;
    v28 = v55;
    v27 = v56;
    v30 = v53;
    v29 = *(double *)v54.i64;
    v32 = v51;
    v31 = v52;
  }
  v44.f64[0] = v29;
  v44.f64[1] = v31;
  v45.f64[0] = v26;
  v45.f64[1] = v30;
  v46.f64[0] = v25;
  v46.f64[1] = v27;
  v47.f64[0] = v23;
  v47.f64[1] = v32;
  v48.f64[0] = v22;
  v48.f64[1] = v28;
  v20.f64[1] = v24;
  v49 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v31 + v29+ v30+ v26+ v27+ v25+ v32+ v23+ v28+ v22+ *(double *)v62.i64+ v24), 0);
  *(float64x2_t *)(a2 + 64) = vdivq_f64(v45, v49);
  *(float64x2_t *)(a2 + 80) = vdivq_f64(v44, v49);
  *(float64x2_t *)(a2 + 32) = vdivq_f64(v47, v49);
  *(float64x2_t *)(a2 + 48) = vdivq_f64(v46, v49);
  *(float64x2_t *)a2 = vdivq_f64(v20, v49);
  *(float64x2_t *)(a2 + 16) = vdivq_f64(v48, v49);
  v50 = 1;
LABEL_73:
  *(_BYTE *)(a2 + 96) = v50;
  return result;
}

uint64_t sub_223FA0070(uint64_t a1, uint64_t a2, float32x2_t *a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v13;
  float v14;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float32x2_t *v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  int8x8_t v37;
  int8x8_t v38;
  int v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  __int128 v74;
  __int128 v75;
  unsigned __int128 v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  unsigned __int128 v81;
  _QWORD v82[3];

  v82[2] = *MEMORY[0x24BDAC8D0];
  v6 = a3->f32[0];
  v7 = a3[1].f32[0];
  if (a3->f32[0] == v7)
    goto LABEL_8;
  v8 = v6 - v7;
  v9 = v7 - v6;
  if (a3->f32[0] >= v7)
    v9 = v8;
  if (v9 <= 0.000001)
  {
LABEL_8:
    v10 = a3->f32[1];
    v11 = a3[1].f32[1];
    _NF = v10 < v11;
    if (v10 == v11)
      goto LABEL_103;
    v13 = v10 - v11;
    v14 = v11 - v10;
    if (!_NF)
      v14 = v13;
    if (v14 <= 0.000001)
    {
LABEL_103:
      if (a2)
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      v72 = sub_223FA096C(a1, a2, (float *)a3);
      if (a2)
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      return v72;
    }
  }
  if (!a2)
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2))
  {
    v72 = 0;
    goto LABEL_112;
  }
  v82[0] = a1;
  v82[1] = a2;
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v75 = 0u;
  v76 = 0u;
  v74 = 0u;
  sub_223FA0BC8((uint64_t)&v74, (uint64_t)v82);
  v79 = v74;
  v80 = v75;
  v74 = 0u;
  v75 = 0u;
  v81 = v76;
  v76 = 0uLL;
  sub_223FA138C((uint64_t)&v74);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  if (!*((_QWORD *)&v81 + 1))
  {
    sub_223FA138C((uint64_t)&v79);
    v72 = 0;
    goto LABEL_112;
  }
  __asm { FMOV            V8.2S, #1.0 }
  while (1)
  {
    v19 = v81;
    v20 = *(_QWORD *)(*((_QWORD *)&v79 + 1) + (((unint64_t)v81 >> 5) & 0x7FFFFFFFFFFFFF8));
    v21 = (uint64_t *)(v20 + 16 * v81);
    v23 = *v21;
    v22 = v21[1];
    if (v22)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v21[1]);
      v19 = v81;
      v24 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v79 + 1) + (((unint64_t)v81 >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * v81
                      + 8);
      if (!v24)
        goto LABEL_18;
    }
    else
    {
      v24 = *(_QWORD *)(v20 + 16 * v81 + 8);
      if (!v24)
      {
LABEL_18:
        v26 = v19 + 1;
        v81 = __PAIR128__(*((unint64_t *)&v81 + 1), v26) + __PAIR128__(-1, 0);
        if (v26 < 0x200)
          goto LABEL_20;
LABEL_19:
        operator delete(**((void ***)&v79 + 1));
        *((_QWORD *)&v79 + 1) += 8;
        *(_QWORD *)&v81 = v81 - 256;
        goto LABEL_20;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
    v25 = v81 + 1;
    v81 = __PAIR128__(*((unint64_t *)&v81 + 1), (uint64_t)v81 + 1) + __PAIR128__(-1, 0);
    if (v25 >= 0x200)
      goto LABEL_19;
LABEL_20:
    v27 = (_QWORD *)(**(_QWORD **)(v23 + 8) + 232 * *(_QWORD *)v23);
    v28 = v27[3];
    if (!v28 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 48))(v28))
    {
      v29 = v27[5];
      if (!v29 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 48))(v29))
      {
        v30 = v27[7];
        if (!v30 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 48))(v30))
        {
          v31 = v27[9];
          if (!v31 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 48))(v31))
          {
            v39 = 1;
            if (!v22)
              goto LABEL_100;
LABEL_99:
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
            goto LABEL_100;
          }
        }
      }
    }
    v32 = **(_QWORD **)(v23 + 8);
    v33 = (float32x2_t *)(v32 + 232 * *(_QWORD *)v23);
    v34 = vdiv_f32(_D8, vsub_f32(a3[1], *a3));
    v35 = vmul_f32(v34, vsub_f32(v33[10], *a3));
    v36 = vmul_f32(v34, vsub_f32(v33[11], *a3));
    v37 = vbsl_s8((int8x8_t)vcgt_f32(v35, v36), (int8x8_t)v36, (int8x8_t)v35);
    if (*(float *)v37.i32 < *(float *)&v37.i32[1])
      v37.i32[0] = v37.i32[1];
    v38 = vbsl_s8((int8x8_t)vcgt_f32(v36, v35), (int8x8_t)v36, (int8x8_t)v35);
    if (*(float *)&v38.i32[1] < *(float *)v38.i32)
      v38.i32[0] = v38.i32[1];
    if (*(float *)v37.i32 > *(float *)v38.i32
      || (*(float *)v37.i32 >= 0.0 ? (v40 = *(float *)v37.i32 > 1.0) : (v40 = 1),
          v40
       && (*(float *)v38.i32 >= 0.0 ? (v41 = *(float *)v38.i32 > 1.0) : (v41 = 1),
           v41 && (*(float *)v37.i32 <= 0.0 ? (v42 = *(float *)v38.i32 < 1.0) : (v42 = 1), v42))))
    {
      v39 = 2;
      if (v22)
        goto LABEL_99;
    }
    else
    {
      v43 = (_QWORD *)(v32 + 232 * *(_QWORD *)v23);
      *(_QWORD *)&v74 = v43[2];
      v44 = v43[3];
      *((_QWORD *)&v74 + 1) = v44;
      if (v44)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 24))(v44);
      *(_QWORD *)&v75 = v43[4];
      v45 = v43[5];
      *((_QWORD *)&v75 + 1) = v45;
      if (v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45);
      *(_QWORD *)&v76 = v43[6];
      v46 = v43[7];
      *((_QWORD *)&v76 + 1) = v46;
      if (v46)
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 24))(v46);
      v77 = v43[8];
      v47 = v43[9];
      v78 = v47;
      if (v47)
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
      v48 = *((_QWORD *)&v74 + 1);
      if (*((_QWORD *)&v74 + 1))
      {
        v49 = v74;
        (*(void (**)(_QWORD))(**((_QWORD **)&v74 + 1) + 24))(*((_QWORD *)&v74 + 1));
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 48))(v48))
        {
          v50 = *((_QWORD *)&v79 + 1);
          v51 = 32 * (v80 - *((_QWORD *)&v79 + 1)) - 1;
          if ((_QWORD)v80 == *((_QWORD *)&v79 + 1))
            v51 = 0;
          v52 = *((_QWORD *)&v81 + 1) + v81;
          if (v51 == *((_QWORD *)&v81 + 1) + (_QWORD)v81)
          {
            sub_223FA1504((uint64_t)&v79);
            v50 = *((_QWORD *)&v79 + 1);
            v52 = *((_QWORD *)&v81 + 1) + v81;
          }
          v53 = (_QWORD *)(*(_QWORD *)(v50 + ((v52 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v52);
          *v53 = v49;
          v53[1] = v48;
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
          ++*((_QWORD *)&v81 + 1);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 40))(v48);
      }
      v54 = *((_QWORD *)&v75 + 1);
      if (*((_QWORD *)&v75 + 1))
      {
        v55 = v75;
        (*(void (**)(_QWORD))(**((_QWORD **)&v75 + 1) + 24))(*((_QWORD *)&v75 + 1));
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 48))(v54))
        {
          v56 = *((_QWORD *)&v79 + 1);
          v57 = 32 * (v80 - *((_QWORD *)&v79 + 1)) - 1;
          if ((_QWORD)v80 == *((_QWORD *)&v79 + 1))
            v57 = 0;
          v58 = *((_QWORD *)&v81 + 1) + v81;
          if (v57 == *((_QWORD *)&v81 + 1) + (_QWORD)v81)
          {
            sub_223FA1504((uint64_t)&v79);
            v56 = *((_QWORD *)&v79 + 1);
            v58 = *((_QWORD *)&v81 + 1) + v81;
          }
          v59 = (_QWORD *)(*(_QWORD *)(v56 + ((v58 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v58);
          *v59 = v55;
          v59[1] = v54;
          (*(void (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54);
          ++*((_QWORD *)&v81 + 1);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v54 + 40))(v54);
      }
      v60 = *((_QWORD *)&v76 + 1);
      if (*((_QWORD *)&v76 + 1))
      {
        v61 = v76;
        (*(void (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 24))(*((_QWORD *)&v76 + 1));
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 48))(v60))
        {
          v62 = *((_QWORD *)&v79 + 1);
          v63 = 32 * (v80 - *((_QWORD *)&v79 + 1)) - 1;
          if ((_QWORD)v80 == *((_QWORD *)&v79 + 1))
            v63 = 0;
          v64 = *((_QWORD *)&v81 + 1) + v81;
          if (v63 == *((_QWORD *)&v81 + 1) + (_QWORD)v81)
          {
            sub_223FA1504((uint64_t)&v79);
            v62 = *((_QWORD *)&v79 + 1);
            v64 = *((_QWORD *)&v81 + 1) + v81;
          }
          v65 = (_QWORD *)(*(_QWORD *)(v62 + ((v64 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v64);
          *v65 = v61;
          v65[1] = v60;
          (*(void (**)(uint64_t))(*(_QWORD *)v60 + 24))(v60);
          ++*((_QWORD *)&v81 + 1);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v60 + 40))(v60);
      }
      v66 = v78;
      if (v78)
      {
        v67 = v77;
        (*(void (**)(uint64_t))(*(_QWORD *)v78 + 24))(v78);
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 48))(v66))
        {
          v68 = *((_QWORD *)&v79 + 1);
          v69 = 32 * (v80 - *((_QWORD *)&v79 + 1)) - 1;
          if ((_QWORD)v80 == *((_QWORD *)&v79 + 1))
            v69 = 0;
          v70 = *((_QWORD *)&v81 + 1) + v81;
          if (v69 == *((_QWORD *)&v81 + 1) + (_QWORD)v81)
          {
            sub_223FA1504((uint64_t)&v79);
            v68 = *((_QWORD *)&v79 + 1);
            v70 = *((_QWORD *)&v81 + 1) + v81;
          }
          v71 = (_QWORD *)(*(_QWORD *)(v68 + ((v70 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v70);
          *v71 = v67;
          v71[1] = v66;
          (*(void (**)(uint64_t))(*(_QWORD *)v66 + 24))(v66);
          ++*((_QWORD *)&v81 + 1);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v66 + 40))(v66);
        if (v78)
          (*(void (**)(uint64_t))(*(_QWORD *)v78 + 40))(v78);
      }
      if (*((_QWORD *)&v76 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 40))(*((_QWORD *)&v76 + 1));
      if (*((_QWORD *)&v75 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v75 + 1) + 40))(*((_QWORD *)&v75 + 1));
      if (*((_QWORD *)&v74 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v74 + 1) + 40))(*((_QWORD *)&v74 + 1));
      v39 = 0;
      if (v22)
        goto LABEL_99;
    }
LABEL_100:
    if ((v39 | 2) != 2)
      break;
    if (!*((_QWORD *)&v81 + 1))
    {
      v72 = 0;
      goto LABEL_111;
    }
  }
  v72 = 1;
LABEL_111:
  sub_223FA138C((uint64_t)&v79);
LABEL_112:
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  return v72;
}

void sub_223FA0828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

uint64_t sub_223FA096C(uint64_t a1, uint64_t a2, float *a3)
{
  float32x2_t v3;
  float32x2_t *v6;
  float v7;
  BOOL v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  uint64_t v14;
  float32x2_t *v15;
  float32x2_t v16;
  float32x2_t v17;

  v3 = (float32x2_t)a2;
  if (a2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    while (1)
    {
      if (!(*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v3 + 48))(v3)
        || (v6 = (float32x2_t *)(**(_QWORD **)(a1 + 8) + 232 * *(_QWORD *)a1), v6[10].f32[0] > *a3)
        || ((v7 = a3[1], v6[10].f32[1] <= v7) ? (v8 = v6[11].f32[0] <= *a3) : (v8 = 1), v8 || v6[11].f32[1] <= v7))
      {
        v17 = 0;
        goto LABEL_25;
      }
      v9 = v6[3];
      if (!*(_QWORD *)&v9 || !(*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v9 + 48))(v9))
      {
        v10 = v6[5];
        if (!*(_QWORD *)&v10 || !(*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v10 + 48))(v10))
        {
          v11 = v6[7];
          if (!*(_QWORD *)&v11 || !(*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v11 + 48))(v11))
          {
            v12 = v6[9];
            if (!*(_QWORD *)&v12 || !(*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v12 + 48))(v12))
              break;
          }
        }
      }
      v13 = vmul_f32(vadd_f32(v6[10], v6[11]), (float32x2_t)0x3F0000003F000000);
      v14 = *a3 >= v13.f32[0];
      if (a3[1] >= v13.f32[1])
        v14 |= 2uLL;
      v15 = &v6[2 * v14];
      a1 = (uint64_t)v15[2];
      v16 = v15[3];
      if (v16)
      {
        (*(void (**)(float32x2_t))(**(_QWORD **)&v16 + 24))(v16);
        (*(void (**)(float32x2_t))(**(_QWORD **)&v16 + 24))(v16);
      }
      (*(void (**)(float32x2_t))(**(_QWORD **)&v3 + 40))(v3);
      if (!*(_QWORD *)&v16)
        return 0;
      (*(void (**)(float32x2_t))(**(_QWORD **)&v16 + 40))(v16);
      v3 = v16;
    }
    (*(void (**)(float32x2_t))(**(_QWORD **)&v3 + 24))(v3);
    v17 = v3;
LABEL_25:
    (*(void (**)(float32x2_t))(**(_QWORD **)&v3 + 40))(v3);
    if (v17)
    {
      v3 = (float32x2_t)((*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v17 + 48))(v17) != 0);
      (*(void (**)(float32x2_t))(**(_QWORD **)&v17 + 40))(v17);
      return (uint64_t)v3;
    }
    return 0;
  }
  return (uint64_t)v3;
}

void sub_223FA0B58(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(a1);
}

void sub_223FA0BC8(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  BOOL v49;
  int64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 *v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  void *v60;
  void *v61;
  char *v62;
  char *v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int64_t v70;
  unint64_t v71;
  char *v72;
  _BOOL8 v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  unint64_t v81;
  char *v82;
  char *v83;
  unint64_t v84;
  int64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  __int128 *v100;
  _OWORD *v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;

  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  v6 = v4 - v5;
  v7 = v5;
  if (v4 == v5)
    v8 = 0;
  else
    v8 = 32 * (v4 - v5) - 1;
  v10 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v11 = v9 + v10;
  if (v8 != v9 + v10)
    goto LABEL_108;
  v12 = v10 > 0xFF;
  v13 = v10 < 0x100;
  if (v10 >= 0x100)
  {
    *(_QWORD *)(a1 + 32) = v10 - 256;
    v19 = v5 + 8;
    v20 = *(_QWORD *)v5;
    *(_QWORD *)(a1 + 8) = v5 + 8;
    if (v4 != *(char **)(a1 + 24))
    {
LABEL_106:
      *(_QWORD *)v4 = v20;
      v4 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v4;
      goto LABEL_107;
    }
    v21 = *(char **)a1;
    if ((unint64_t)v19 > *(_QWORD *)a1)
    {
      v22 = (uint64_t)&v19[-*(_QWORD *)a1] >> 3;
      if (v22 >= -1)
        v23 = v22 + 1;
      else
        v23 = v22 + 2;
      v24 = v23 >> 1;
      v25 = -v24;
      v26 = &v19[-8 * v24];
      v27 = v4 - v19;
      if (v4 != v19)
      {
        memmove(&v19[-8 * v24], v19, v4 - v19);
        v4 = *(char **)(a1 + 8);
      }
      v28 = &v4[8 * v25];
      v4 = &v26[v27];
      *(_QWORD *)(a1 + 8) = v28;
      *(_QWORD *)(a1 + 16) = &v26[v27];
      goto LABEL_106;
    }
    v65 = (v4 - v21) >> 2;
    if (v4 == v21)
      v65 = 1;
    if (v65 >> 61)
      goto LABEL_128;
    v66 = v65 >> 2;
    v67 = 8 * v65;
    v68 = (char *)operator new(8 * v65);
    v69 = &v68[8 * v66];
    v70 = v4 - v19;
    v49 = v4 == v19;
    v4 = v69;
    if (!v49)
    {
      v4 = &v69[v70 & 0xFFFFFFFFFFFFFFF8];
      v71 = v70 - 8;
      if ((unint64_t)(v70 - 8) < 0x38)
      {
        v72 = &v68[8 * v66];
        do
        {
LABEL_103:
          v104 = *(_QWORD *)v19;
          v19 += 8;
          *(_QWORD *)v72 = v104;
          v72 += 8;
        }
        while (v72 != v4);
        goto LABEL_104;
      }
      v97 = &v68[8 * v66];
      v72 = v97;
      if ((unint64_t)(v97 - v19) < 0x20)
        goto LABEL_103;
      v98 = (v71 >> 3) + 1;
      v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
      v72 = &v69[v99];
      v19 += v99;
      v100 = (__int128 *)(v5 + 24);
      v101 = v97 + 16;
      v102 = v98 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v103 = *v100;
        *(v101 - 1) = *(v100 - 1);
        *v101 = v103;
        v100 += 2;
        v101 += 2;
        v102 -= 4;
      }
      while (v102);
      if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_103;
    }
LABEL_104:
    *(_QWORD *)a1 = v68;
    *(_QWORD *)(a1 + 8) = v69;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = &v68[v67];
    if (v21)
    {
      operator delete(v21);
      v4 = *(char **)(a1 + 16);
    }
    goto LABEL_106;
  }
  v14 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
  v15 = v6 >> 3;
  if (__PAIR128__((v14 >> 3) - (v6 >> 3), v10) < 0x100)
  {
    v16 = v15 + v13;
    if (v14 >> 2 <= v16)
      v17 = v16;
    else
      v17 = v14 >> 2;
    if (!v17)
    {
      v18 = 0;
LABEL_59:
      v60 = operator new(0x1000uLL);
      v61 = v60;
      v62 = &v18[8 * (v15 - v12)];
      if (v15 - v12 == v17)
      {
        if (v17)
        {
          v63 = &v62[-((4 * v17 + 4) & 0xFFFFFFFFFFFFFFF8)];
          *(_QWORD *)v63 = v60;
          v64 = v63 + 8;
          if (v4 == v7)
            goto LABEL_74;
        }
        else
        {
          v73 = v15 == v12;
          v74 = (char *)operator new(8 * v73);
          v63 = &v74[8 * ((unint64_t)v73 >> 2)];
          v62 = &v74[8 * v73];
          if (v18)
          {
            operator delete(v18);
            v7 = *(char **)(a1 + 8);
            v4 = *(char **)(a1 + 16);
          }
          v18 = v74;
          *(_QWORD *)v63 = v61;
          v64 = v63 + 8;
          if (v4 == v7)
            goto LABEL_74;
        }
      }
      else
      {
        v63 = &v18[8 * (v15 - v12)];
        v62 = &v18[8 * v17];
        *(_QWORD *)v63 = v60;
        v64 = v63 + 8;
        if (v4 == v7)
        {
LABEL_74:
          v75 = *(char **)a1;
          *(_QWORD *)a1 = v18;
          *(_QWORD *)(a1 + 8) = v63;
          v4 = v64;
          *(_QWORD *)(a1 + 16) = v64;
          *(_QWORD *)(a1 + 24) = v62;
          if (v75)
          {
            operator delete(v75);
            v4 = *(char **)(a1 + 16);
          }
          goto LABEL_107;
        }
      }
      do
      {
        if (v63 == v18)
        {
          if (v64 >= v62)
          {
            if (v62 == v18)
              v81 = 1;
            else
              v81 = (v62 - v18) >> 2;
            if (v81 >> 61)
              sub_223174E94();
            v82 = (char *)operator new(8 * v81);
            v83 = v82;
            v84 = (v81 + 3) >> 2;
            v63 = &v82[8 * v84];
            v85 = v64 - v18;
            v49 = v64 == v18;
            v64 = v63;
            if (!v49)
            {
              v64 = &v63[v85 & 0xFFFFFFFFFFFFFFF8];
              v86 = v85 - 8;
              v87 = &v82[8 * v84];
              v88 = v18;
              if (v86 < 0x38)
                goto LABEL_132;
              v89 = 8 * v84;
              v87 = &v82[8 * v84];
              v88 = v18;
              if ((unint64_t)(v87 - v18) < 0x20)
                goto LABEL_132;
              v90 = (v86 >> 3) + 1;
              v91 = 8 * (v90 & 0x3FFFFFFFFFFFFFFCLL);
              v87 = &v63[v91];
              v88 = &v18[v91];
              v92 = (__int128 *)(v18 + 16);
              v93 = &v82[v89 + 16];
              v94 = v90 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v95 = *v92;
                *((_OWORD *)v93 - 1) = *(v92 - 1);
                *(_OWORD *)v93 = v95;
                v92 += 2;
                v93 += 32;
                v94 -= 4;
              }
              while (v94);
              if (v90 != (v90 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_132:
                do
                {
                  v96 = *(_QWORD *)v88;
                  v88 += 8;
                  *(_QWORD *)v87 = v96;
                  v87 += 8;
                }
                while (v87 != v64);
              }
            }
            v62 = &v82[8 * v81];
            if (v18)
              operator delete(v18);
            v18 = v83;
          }
          else
          {
            v77 = (v62 - v64) >> 3;
            if (v77 >= -1)
              v78 = v77 + 1;
            else
              v78 = v77 + 2;
            v79 = v78 >> 1;
            v63 = &v18[8 * (v78 >> 1)];
            v80 = v18;
            if (v64 != v18)
            {
              memmove(v63, v18, v64 - v18);
              v80 = v64;
            }
            v64 = (char *)v80 + 8 * v79;
          }
        }
        v76 = *((_QWORD *)v4 - 1);
        v4 -= 8;
        *((_QWORD *)v63 - 1) = v76;
        v63 -= 8;
      }
      while (v4 != *(char **)(a1 + 8));
      goto LABEL_74;
    }
    if (!(v17 >> 61))
    {
      v18 = (char *)operator new(8 * v17);
      goto LABEL_59;
    }
LABEL_128:
    sub_223174E94();
  }
  v29 = -v13;
  while (1)
  {
    v4 = *(char **)(a1 + 24);
    if (v4 == *(char **)(a1 + 16))
      break;
    v120 = operator new(0x1000uLL);
    sub_22323CCA0((char **)a1, &v120);
    if (__CFADD__(v29++, 1))
    {
      v4 = *(char **)(a1 + 16);
LABEL_34:
      *(_QWORD *)(a1 + 32) -= v12 << 8;
      if (v12)
        goto LABEL_38;
      goto LABEL_107;
    }
  }
  if (!v29)
    goto LABEL_34;
  v31 = 0;
  do
  {
    v120 = operator new(0x1000uLL);
    sub_22323CE2C((void **)a1, &v120);
    v4 = *(char **)(a1 + 16);
    if (&v4[-*(_QWORD *)(a1 + 8)] == (char *)8)
      v32 = 255;
    else
      v32 = 256;
    v33 = v32 + *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v33;
    ++v31;
  }
  while (-v29 != v31);
  v12 -= v29;
  for (*(_QWORD *)(a1 + 32) = v33 - (v12 << 8); v12; --v12)
  {
LABEL_38:
    v35 = *(_QWORD **)(a1 + 8);
    v36 = (char *)(v35 + 1);
    v37 = *v35;
    *(_QWORD *)(a1 + 8) = v35 + 1;
    if (v4 == *(char **)(a1 + 24))
    {
      v38 = *(char **)a1;
      if ((unint64_t)v36 <= *(_QWORD *)a1)
      {
        v44 = (v4 - v38) >> 2;
        if (v4 == v38)
          v44 = 1;
        if (v44 >> 61)
          goto LABEL_128;
        v45 = v44 >> 2;
        v46 = 8 * v44;
        v47 = (char *)operator new(8 * v44);
        v48 = &v47[8 * v45];
        v50 = v4 - v36;
        v49 = v4 == v36;
        v4 = v48;
        if (!v49)
        {
          v4 = &v48[v50 & 0xFFFFFFFFFFFFFFF8];
          v51 = v50 - 8;
          if ((unint64_t)(v50 - 8) < 0x38)
          {
            v52 = &v47[8 * v45];
            goto LABEL_55;
          }
          v52 = &v47[8 * v45];
          if ((unint64_t)(v52 - v36) < 0x20)
            goto LABEL_133;
          v53 = (v51 >> 3) + 1;
          v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
          v52 = &v48[v54];
          v36 += v54;
          v55 = (__int128 *)(v35 + 3);
          v56 = &v47[8 * v45 + 16];
          v57 = v53 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v58 = *v55;
            *((_OWORD *)v56 - 1) = *(v55 - 1);
            *(_OWORD *)v56 = v58;
            v55 += 2;
            v56 += 32;
            v57 -= 4;
          }
          while (v57);
          if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_133:
            do
            {
LABEL_55:
              v59 = *(_QWORD *)v36;
              v36 += 8;
              *(_QWORD *)v52 = v59;
              v52 += 8;
            }
            while (v52 != v4);
          }
        }
        *(_QWORD *)a1 = v47;
        *(_QWORD *)(a1 + 8) = v48;
        *(_QWORD *)(a1 + 16) = v4;
        *(_QWORD *)(a1 + 24) = &v47[v46];
        if (v38)
        {
          operator delete(v38);
          v4 = *(char **)(a1 + 16);
        }
        goto LABEL_37;
      }
      v39 = (uint64_t)&v36[-*(_QWORD *)a1] >> 3;
      if (v39 >= -1)
        v40 = v39 + 1;
      else
        v40 = v39 + 2;
      v41 = v40 >> 1;
      v42 = &v36[-8 * (v40 >> 1)];
      v43 = v4 - v36;
      if (v4 != v36)
      {
        memmove(&v36[-8 * (v40 >> 1)], v36, v4 - v36);
        v4 = *(char **)(a1 + 8);
      }
      v34 = &v4[-8 * v41];
      v4 = &v42[v43];
      *(_QWORD *)(a1 + 8) = v34;
      *(_QWORD *)(a1 + 16) = &v42[v43];
    }
LABEL_37:
    *(_QWORD *)v4 = v37;
    v4 = (char *)(*(_QWORD *)(a1 + 16) + 8);
    *(_QWORD *)(a1 + 16) = v4;
  }
LABEL_107:
  v9 = *(_QWORD *)(a1 + 40);
  v7 = *(char **)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 32) + v9;
LABEL_108:
  v105 = &v7[8 * (v11 >> 8)];
  v106 = *(_QWORD *)v105;
  v107 = *(_QWORD *)v105 + 16 * v11;
  if (v4 == v7)
    v108 = 0;
  else
    v108 = v107;
  v109 = (v108 - v106) >> 4;
  if (v108 - v106 < -15)
  {
    v113 = 254 - v109;
    v111 = &v105[-8 * (v113 >> 8)];
    v112 = *(_QWORD *)v111 + 16 * ~(_BYTE)v113;
    if (v108 != v112)
    {
      do
      {
LABEL_115:
        v114 = (_QWORD *)(v106 + 4096);
        if (v105 == v111)
          v115 = (_QWORD *)v112;
        else
          v115 = v114;
        if ((_QWORD *)v108 == v115)
        {
          *(_QWORD *)(a1 + 40) = v9;
          if (v105 == v111)
            return;
        }
        else
        {
          v116 = 0;
          do
          {
            v117 = (_QWORD *)(v108 + v116);
            *v117 = *(_QWORD *)(a2 + v116);
            v118 = *(_QWORD *)(a2 + v116 + 8);
            v117[1] = v118;
            if (v118)
              (*(void (**)(uint64_t))(*(_QWORD *)v118 + 24))(v118);
            v116 += 16;
          }
          while (v117 + 2 != v115);
          a2 += v116;
          v9 = *(_QWORD *)(a1 + 40) + (((uint64_t)v115 - v108) >> 4);
          *(_QWORD *)(a1 + 40) = v9;
          if (v105 == v111)
            return;
        }
        v119 = *((_QWORD *)v105 + 1);
        v105 += 8;
        v106 = v119;
        v108 = v119;
      }
      while (v119 != v112);
    }
  }
  else
  {
    v110 = v109 + 1;
    v111 = &v105[8 * (v110 >> 8)];
    v112 = *(_QWORD *)v111 + 16 * v110;
    if (v108 != v112)
      goto LABEL_115;
  }
}

void sub_223FA1340()
{
  __break(1u);
}

void sub_223FA1350(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_end_catch();
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223FA137C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 40) += v2 >> 4;
  _Unwind_Resume(a1);
}

uint64_t sub_223FA138C(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v11 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 >> 8];
    v6 = (uint64_t)*v5;
    v7 = (uint64_t)*v5 + 16 * v4;
    v8 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v4) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(_BYTE *)(a1 + 40) + v4);
    if (v7 != v8)
    {
      do
      {
        v9 = *(_QWORD *)(v7 + 8);
        if (v9)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
          v6 = (uint64_t)*v5;
        }
        v7 += 16;
        if (v7 - v6 == 4096)
        {
          v10 = (uint64_t)v5[1];
          ++v5;
          v6 = v10;
          v7 = v10;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
    *(_QWORD *)(a1 + 40) = 0;
    v11 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v3 = *(void ***)(a1 + 16);
        v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
        *(_QWORD *)(a1 + 8) = v2;
        v11 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 128;
    goto LABEL_17;
  }
  if (v12 == 2)
  {
    v13 = 256;
LABEL_17:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_223FA1504(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  BOOL v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v35 = (v5 - v9) >> 2;
      if (v5 == v9)
        v35 = 1;
      if (!(v35 >> 61))
      {
        v36 = v35 >> 2;
        v37 = 8 * v35;
        v38 = (char *)operator new(8 * v35);
        v39 = &v38[8 * v36];
        v40 = &v38[v37];
        v42 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v42 & 0xFFFFFFFFFFFFFFF8];
          v43 = v42 - 8;
          if ((unint64_t)(v42 - 8) >= 0x38)
          {
            v73 = &v38[8 * v36];
            v44 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v43 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v44 = &v39[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v44 = &v38[8 * v36];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v44 = v80;
            v44 += 8;
          }
          while (v44 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      sub_223174E94();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0x1000uLL);
      sub_22323CCA0((char **)a1, &v89);
      return;
    }
    v89 = operator new(0x1000uLL);
    sub_22323CE2C((void **)a1, &v89);
    v45 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v45 + 1);
    v8 = *v45;
    *(_QWORD *)(a1 + 8) = v45 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v46 = (v5 - v9) >> 2;
      if (v5 == v9)
        v46 = 1;
      if (!(v46 >> 61))
      {
        v47 = v46 >> 2;
        v48 = 8 * v46;
        v38 = (char *)operator new(8 * v46);
        v39 = &v38[8 * v47];
        v40 = &v38[v48];
        v49 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v49 & 0xFFFFFFFFFFFFFFF8];
          v50 = v49 - 8;
          if ((unint64_t)(v49 - 8) >= 0x38)
          {
            v81 = &v38[8 * v47];
            v51 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v50 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v51 = &v39[v83];
              v7 += v83;
              v84 = (__int128 *)(v45 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v51 = &v38[8 * v47];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v51 = v88;
            v51 += 8;
          }
          while (v51 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v38;
        *(_QWORD *)(a1 + 8) = v39;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v40;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = v26;
  v28 = &v25[8 * v21];
  v29 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19)
        v52 = 1;
      else
        v52 = v20 >> 2;
      if (v52 >> 61)
        sub_223174E94();
      v28 = (char *)operator new(8 * v52);
      v29 = &v28[8 * v52];
      operator delete(v25);
      v53 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v28;
      *(_QWORD *)v28 = v27;
      v31 = v28 + 8;
      if (v18 == v53)
        goto LABEL_24;
      do
      {
LABEL_49:
        if (v28 == v25)
        {
          if (v31 >= v29)
          {
            if (v29 == v28)
              v58 = 1;
            else
              v58 = (v29 - v28) >> 2;
            if (v58 >> 61)
              sub_223174E94();
            v59 = (char *)operator new(8 * v58);
            v25 = v59;
            v60 = (v58 + 3) >> 2;
            v54 = &v59[8 * v60];
            v33 = v54;
            v61 = v31 - v28;
            if (v31 != v28)
            {
              v33 = &v54[v61 & 0xFFFFFFFFFFFFFFF8];
              v62 = v61 - 8;
              v63 = &v59[8 * v60];
              v64 = v28;
              if (v62 < 0x38)
                goto LABEL_89;
              v65 = 8 * v60;
              v63 = &v59[8 * v60];
              v64 = v28;
              if ((unint64_t)(v63 - v28) < 0x20)
                goto LABEL_89;
              v66 = (v62 >> 3) + 1;
              v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              v63 = &v54[v67];
              v64 = &v28[v67];
              v68 = (__int128 *)(v28 + 16);
              v69 = &v59[v65 + 16];
              v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *v68;
                *((_OWORD *)v69 - 1) = *(v68 - 1);
                *(_OWORD *)v69 = v71;
                v68 += 2;
                v69 += 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_89:
                do
                {
                  v72 = *(_QWORD *)v64;
                  v64 += 8;
                  *(_QWORD *)v63 = v72;
                  v63 += 8;
                }
                while (v63 != v33);
              }
            }
            v29 = &v59[8 * v58];
            operator delete(v28);
          }
          else
          {
            v56 = (v29 - v31) >> 3;
            if (v56 >= -1)
              v57 = v56 + 1;
            else
              v57 = v56 + 2;
            v33 = &v31[8 * (v57 >> 1)];
            v54 = &v28[8 * (v57 >> 1)];
            if (v31 == v28)
            {
              v25 = v31;
            }
            else
            {
              memmove(&v28[8 * (v57 >> 1)], v28, v31 - v28);
              v25 = v28;
            }
          }
        }
        else
        {
          v54 = v28;
          v33 = v31;
        }
        v55 = *(_QWORD *)(v18 - 8);
        v18 -= 8;
        *((_QWORD *)v54 - 1) = v55;
        v32 = v54 - 8;
        v31 = v33;
        v28 = v32;
      }
      while (v18 != *(_QWORD *)(a1 + 8));
      goto LABEL_25;
    }
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v28 -= 8 * (v30 >> 1);
  }
  *(_QWORD *)v28 = v26;
  v31 = v28 + 8;
  if (v18 != v19)
    goto LABEL_49;
LABEL_24:
  v32 = v28;
  v33 = v31;
LABEL_25:
  v34 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 24) = v29;
  if (v34)
    operator delete(v34);
}

void sub_223FA1A44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223FA1A60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223FA1A74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223FA1A8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223FA1AA4(uint64_t **a1, _QWORD *a2, float32x2_t *a3, uint64_t a4, float *a5, unsigned int a6)
{
  uint64_t *v7;
  uint64_t v13;
  float32x2_t *v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float v19;
  float v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x4_t v25;
  float32x2_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t i;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BOOL4 v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  _BOOL4 v78;
  uint64_t *v79;
  float v80;
  float32x2_t *v81;
  int8x16_t v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  float *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int8x16_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD v106[2];
  _QWORD v107[2];
  int8x16_t v108[2];

  v7 = a1[1];
  if (v7)
  {
    if ((*(uint64_t (**)(uint64_t *))(*v7 + 48))(v7))
    {
      v13 = a2[1];
      if (v13)
      {
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13))
        {
          v14 = (float32x2_t *)(**(_QWORD **)(*a2 + 8) + 232 * *(_QWORD *)*a2);
          v15 = v14[11];
          v16 = vmul_f32(vadd_f32(v14[10], v15), (float32x2_t)0x3F0000003F000000);
          v17 = vsub_f32(v16, v15);
          v18 = vadd_f32(v16, v17);
          LODWORD(v19) = vsub_f32(v16, v17).u32[0];
          v20 = v16.f32[1] + v17.f32[1];
          v16.f32[0] = v16.f32[1] - v17.f32[1];
          v21 = a3[1];
          v22 = vmul_n_f32(*a3, v18.f32[0]);
          v23 = vmla_lane_f32(v22, v21, v18, 1);
          v24 = a3[2];
          *(float32x2_t *)v25.f32 = vadd_f32(v24, v23);
          v26 = vmul_n_f32(*a3, v19);
          *(float32x2_t *)v27.i8 = vadd_f32(v24, vmla_n_f32(v26, v21, v20));
          *(float32x2_t *)v28.f32 = vadd_f32(v24, vmla_n_f32(v22, v21, v16.f32[0]));
          *(float32x2_t *)v29.f32 = vadd_f32(v24, vmla_n_f32(v26, v21, v16.f32[0]));
          v30.i64[0] = v25.i64[0];
          v30.i64[1] = v25.i64[0];
          v31.i64[0] = v27.i64[0];
          v31.i64[1] = v25.i64[0];
          v25.i64[1] = v27.i64[0];
          v27.i64[1] = v27.i64[0];
          v32.i64[0] = v28.i64[0];
          v32.i64[1] = v28.i64[0];
          v33.i64[0] = v29.i64[0];
          v33.i64[1] = v29.i64[0];
          v34 = vbslq_s8((int8x16_t)vcgtq_f32(v25, v31), v27, v30);
          v27.i64[0] = v34.i64[0];
          v27.i64[1] = v28.i64[0];
          v28.i64[1] = vextq_s8(v34, v34, 8uLL).u64[0];
          v35 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v27, v28), v32, v34);
          v27.i64[0] = v35.i64[0];
          v27.i64[1] = v29.i64[0];
          v29.i64[1] = vextq_s8(v35, v35, 8uLL).u64[0];
          v36 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v27, v29), v33, v35);
          v108[0] = v36;
          v37 = **a1;
          v38 = *(_QWORD *)(*a1)[1];
          v39 = v38 + 232 * v37;
          v41 = *(float *)(v39 + 80);
          v40 = v39 + 80;
          if (v41 <= *(float *)&v36.i32[2]
            && *(float *)(v40 + 4) <= *(float *)&v36.i32[3]
            && *(float *)(v38 + 232 * v37 + 88) >= *(float *)v36.i32
            && *(float *)(v38 + 232 * v37 + 92) >= *(float *)&v36.i32[1])
          {
            v42 = v14[3];
            if (*(_QWORD *)&v42 && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v42 + 48))(v42)
              || (v43 = v14[5], *(_QWORD *)&v43)
              && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v43 + 48))(v43)
              || (v44 = v14[7], *(_QWORD *)&v44)
              && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v44 + 48))(v44)
              || (v45 = v14[9], *(_QWORD *)&v45)
              && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v45 + 48))(v45))
            {
              v46 = (_QWORD *)(*(_QWORD *)(*a1)[1] + 232 * **a1);
              v47 = v46[3];
              if (v47 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 48))(v47)
                || (v48 = v46[5]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 48))(v48)
                || (v49 = v46[7]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 48))(v49)
                || (v50 = v46[9]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 48))(v50))
              {
                v86 = a5;
                v51 = (_QWORD *)(*(_QWORD *)(*a1)[1] + 232 * **a1);
                v99.i64[0] = v51[2];
                v52 = v51[3];
                v99.i64[1] = v52;
                if (v52)
                  (*(void (**)(uint64_t))(*(_QWORD *)v52 + 24))(v52);
                v100 = v51[4];
                v53 = v51[5];
                v101 = v53;
                if (v53)
                  (*(void (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53);
                v102 = v51[6];
                v54 = v51[7];
                v103 = v54;
                if (v54)
                  (*(void (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54);
                v104 = v51[8];
                v55 = v51[9];
                v105 = v55;
                if (v55)
                  (*(void (**)(uint64_t))(*(_QWORD *)v55 + 24))(v55);
                for (i = 0; i != 8; i += 2)
                {
                  v57 = (_QWORD *)(**(_QWORD **)(*a2 + 8) + 232 * *(_QWORD *)*a2);
                  v91 = v57[2];
                  v58 = v57[3];
                  v92 = v58;
                  if (v58)
                    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 24))(v58);
                  v93 = v57[4];
                  v59 = v57[5];
                  v94 = v59;
                  if (v59)
                    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
                  v95 = v57[6];
                  v60 = v57[7];
                  v96 = v60;
                  if (v60)
                    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 24))(v60);
                  v97 = v57[8];
                  v61 = v57[9];
                  v98 = v61;
                  if (v61)
                    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 24))(v61);
                  v62 = &v99.i64[i];
                  v63 = v99.i64[i + 1];
                  v89 = v99.i64[i];
                  v90 = v63;
                  if (v63)
                    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 24))(v63);
                  v64 = v92;
                  v87 = v91;
                  v88 = v92;
                  if (v92)
                    (*(void (**)(uint64_t))(*(_QWORD *)v92 + 24))(v92);
                  sub_223FA1AA4(&v89, &v87, a3, a4, v86, a6);
                  if (v64)
                    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
                  if (v63)
                    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 40))(v63);
                  v65 = v62[1];
                  v89 = *v62;
                  v90 = v65;
                  if (v65)
                    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 24))(v65);
                  v66 = v94;
                  v87 = v93;
                  v88 = v94;
                  if (v94)
                    (*(void (**)(uint64_t))(*(_QWORD *)v94 + 24))(v94);
                  sub_223FA1AA4(&v89, &v87, a3, a4, v86, a6);
                  if (v66)
                    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 40))(v66);
                  if (v65)
                    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 40))(v65);
                  v67 = v62[1];
                  v89 = *v62;
                  v90 = v67;
                  if (v67)
                    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 24))(v67);
                  v68 = v96;
                  v87 = v95;
                  v88 = v96;
                  if (v96)
                    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 24))(v96);
                  sub_223FA1AA4(&v89, &v87, a3, a4, v86, a6);
                  if (v68)
                    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 40))(v68);
                  if (v67)
                    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
                  v69 = v62[1];
                  v89 = *v62;
                  v90 = v69;
                  if (v69)
                    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 24))(v69);
                  v70 = v98;
                  v87 = v97;
                  v88 = v98;
                  if (v98)
                    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 24))(v98);
                  sub_223FA1AA4(&v89, &v87, a3, a4, v86, a6);
                  if (v70)
                    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
                  if (v69)
                    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 40))(v69);
                  if (v98)
                    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 40))(v98);
                  if (v96)
                    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 40))(v96);
                  if (v94)
                    (*(void (**)(uint64_t))(*(_QWORD *)v94 + 40))(v94);
                  if (v92)
                    (*(void (**)(uint64_t))(*(_QWORD *)v92 + 40))(v92);
                }
                if (v105)
                  (*(void (**)(uint64_t))(*(_QWORD *)v105 + 40))(v105);
                if (v103)
                  (*(void (**)(uint64_t))(*(_QWORD *)v103 + 40))(v103);
                if (v101)
                  (*(void (**)(uint64_t))(*(_QWORD *)v101 + 40))(v101);
                if (v99.i64[1])
                  (*(void (**)(uint64_t))(*(_QWORD *)v99.i64[1] + 40))(v99.i64[1]);
              }
              else
              {
                v75 = *a1;
                v76 = a1[1];
                if (v76)
                  (*(void (**)(uint64_t *))(*v76 + 24))(a1[1]);
                v77 = *(_QWORD *)v75[1] + 232 * *v75;
                if (*(_BYTE *)(v77 + 216))
                  v78 = *(_DWORD *)(v77 + 204) + *(_DWORD *)(v77 + 208) >= (int)a6;
                else
                  v78 = 0;
                if (v76)
                  (*(void (**)(uint64_t *))(*v76 + 40))(v76);
                if (v78)
                {
                  v81 = (float32x2_t *)(*(_QWORD *)(*a1)[1] + 232 * **a1);
                  v82 = sub_223FA2454(&v99, v81[10], v81[11], *(int8x16_t *)a4, *(float32x2_t *)(a4 + 16));
                  v83 = *a2;
                  v84 = a2[1];
                  v106[0] = v83;
                  v106[1] = v84;
                  if (v84)
                    (*(void (**)(uint64_t, int8x16_t))(*(_QWORD *)v84 + 24))(v84, v82);
                  v85 = sub_223FA2518(v106, (float *)v99.i32, a5, a6);
                  if (v84)
                    (*(void (**)(uint64_t, float))(*(_QWORD *)v84 + 40))(v84, v85);
                }
              }
            }
            else
            {
              v71 = *a2;
              v72 = a2[1];
              if (v72)
                (*(void (**)(uint64_t))(*(_QWORD *)v72 + 24))(v72);
              v73 = **(_QWORD **)(v71 + 8) + 232 * *(_QWORD *)v71;
              if (*(_BYTE *)(v73 + 216))
                v74 = *(_DWORD *)(v73 + 204) + *(_DWORD *)(v73 + 208) >= (int)a6;
              else
                v74 = 0;
              if (v72)
                (*(void (**)(uint64_t))(*(_QWORD *)v72 + 40))(v72);
              if (v74)
              {
                v79 = a1[1];
                v107[0] = *a1;
                v107[1] = v79;
                if (v79)
                  (*(void (**)(uint64_t *))(*v79 + 24))(v79);
                v80 = sub_223FA2518(v107, (float *)v108[0].i32, a5, a6);
                if (v79)
                  (*(void (**)(uint64_t *, float))(*v79 + 40))(v79, v80);
              }
            }
          }
        }
      }
    }
  }
}

void sub_223FA22FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(exception_object);
}

void sub_223FA2350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  char *v25;
  uint64_t v26;

  while (1)
  {
    v26 = *((_QWORD *)v25 - 1);
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
    v25 -= 16;
    if (v25 == &a25)
      JUMPOUT(0x223FA2334);
  }
}

void sub_223FA2388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  while (1)
  {
    v11 = *(v9 - 1);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    v9 -= 2;
    if (v9 == (uint64_t *)va)
    {
      sub_223F7A510((uint64_t *)va1);
      _Unwind_Resume(a1);
    }
  }
}

int8x16_t sub_223FA2454(int8x16_t *a1, float32x2_t a2, float32x2_t a3, int8x16_t a4, float32x2_t a5)
{
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float v8;
  float v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x4_t v12;
  float32x2_t v13;
  int8x16_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x2_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t result;

  v5 = vmul_f32(vadd_f32(a2, a3), (float32x2_t)0x3F0000003F000000);
  v6 = vsub_f32(v5, a3);
  v7 = vadd_f32(v5, v6);
  LODWORD(v8) = vsub_f32(v5, v6).u32[0];
  v9 = v5.f32[1] + v6.f32[1];
  v5.f32[0] = v5.f32[1] - v6.f32[1];
  v10 = (float32x2_t)vextq_s8(a4, a4, 8uLL).u64[0];
  v11 = vmul_n_f32(*(float32x2_t *)a4.i8, v7.f32[0]);
  *(float32x2_t *)v12.f32 = vadd_f32(vmla_lane_f32(v11, v10, v7, 1), a5);
  v13 = vmul_n_f32(*(float32x2_t *)a4.i8, v8);
  *(float32x2_t *)v14.i8 = vadd_f32(vmla_n_f32(v13, v10, v9), a5);
  *(float32x2_t *)v15.f32 = vadd_f32(vmla_n_f32(v11, v10, v5.f32[0]), a5);
  v16.i64[0] = v12.i64[0];
  v16.i64[1] = v12.i64[0];
  v17 = vmla_n_f32(v13, v10, v5.f32[0]);
  v18.i64[0] = v14.i64[0];
  v18.i64[1] = v12.i64[0];
  v12.i64[1] = v14.i64[0];
  v14.i64[1] = v14.i64[0];
  v19.i64[0] = v15.i64[0];
  v19.i64[1] = v15.i64[0];
  *(float32x2_t *)v20.f32 = vadd_f32(v17, a5);
  v21.i64[0] = v20.i64[0];
  v21.i64[1] = v20.i64[0];
  v22 = vbslq_s8((int8x16_t)vcgtq_f32(v12, v18), v14, v16);
  v14.i64[0] = v22.i64[0];
  v14.i64[1] = v15.i64[0];
  v15.i64[1] = vextq_s8(v22, v22, 8uLL).u64[0];
  v23 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v14, v15), v19, v22);
  v19.i64[0] = v23.i64[0];
  v19.i64[1] = v20.i64[0];
  v20.i64[1] = vextq_s8(v23, v23, 8uLL).u64[0];
  result = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v19, v20), v21, v23);
  *a1 = result;
  return result;
}

float sub_223FA2518(_QWORD *a1, float *a2, float *a3, unsigned int a4)
{
  uint64_t v5;
  float result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v5 = a1[1];
  if (v5)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5))
    {
      v10 = **(_QWORD **)(*a1 + 8) + 232 * *(_QWORD *)*a1;
      result = *(float *)(v10 + 80);
      if (result <= a2[2])
      {
        result = *(float *)(v10 + 84);
        if (result <= a2[3])
        {
          result = *(float *)(v10 + 88);
          if (result >= *a2)
          {
            result = *(float *)(v10 + 92);
            if (result >= a2[1])
            {
              v11 = *(_QWORD *)(v10 + 24);
              if (v11 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11)
                || (v12 = *(_QWORD *)(v10 + 40)) != 0
                && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12)
                || (v13 = *(_QWORD *)(v10 + 56)) != 0
                && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13)
                || (v14 = *(_QWORD *)(v10 + 72)) != 0
                && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14))
              {
                v15 = (_QWORD *)(**(_QWORD **)(*a1 + 8) + 232 * *(_QWORD *)*a1);
                v30 = v15[2];
                v16 = v15[3];
                v31 = v16;
                if (v16)
                  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
                v32 = v15[4];
                v17 = v15[5];
                v33 = v17;
                if (v17)
                  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
                v34 = v15[6];
                v18 = v15[7];
                v35 = v18;
                if (v18)
                  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
                v36 = v15[8];
                v19 = v15[9];
                v37 = v19;
                if (v19)
                  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
                v20 = v31;
                v28 = v30;
                v29 = v31;
                if (v31)
                  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
                sub_223FA2518(&v28, a2, a3, a4);
                if (v20)
                  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
                v21 = v33;
                v28 = v32;
                v29 = v33;
                if (v33)
                  (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
                sub_223FA2518(&v28, a2, a3, a4);
                if (v21)
                  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
                v22 = v35;
                v28 = v34;
                v29 = v35;
                if (v35)
                  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
                sub_223FA2518(&v28, a2, a3, a4);
                if (v22)
                  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
                v23 = v37;
                v28 = v36;
                v29 = v37;
                if (v37)
                  (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
                sub_223FA2518(&v28, a2, a3, a4);
                if (v23)
                  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
                if (v37)
                  (*(void (**)(uint64_t))(*(_QWORD *)v37 + 40))(v37);
                if (v35)
                  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
                if (v33)
                  (*(void (**)(uint64_t))(*(_QWORD *)v33 + 40))(v33);
                if (v31)
                  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
              }
              else
              {
                v25 = *a1;
                v24 = a1[1];
                if (v24)
                  (*(void (**)(_QWORD))(*(_QWORD *)v24 + 24))(a1[1]);
                v26 = **(_QWORD **)(v25 + 8) + 232 * *(_QWORD *)v25;
                if (*(_BYTE *)(v26 + 216))
                  v27 = *(_DWORD *)(v26 + 204) + *(_DWORD *)(v26 + 208) >= (int)a4;
                else
                  v27 = 0;
                if (v24)
                  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
                if (v27)
                {
                  result = sub_223F268DC((float *)(**(_QWORD **)(*a1 + 8) + 232 * *(_QWORD *)*a1 + 80), a2) + *a3;
                  *a3 = result;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_223FA2900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  char *v11;
  uint64_t v13;

  while (1)
  {
    v13 = *((_QWORD *)v11 - 1);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
    v11 -= 16;
    if (v11 == &a11)
      _Unwind_Resume(exception_object);
  }
}

void sub_223FA2944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223F7A510((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223FA2958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  char v4;
  va_list va;

  va_start(va, a3);
  if ((v4 & 1) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  sub_223F7A510((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223FA2984(uint64_t a1@<X0>, float32x2_t *a2@<X1>, float32x4_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 **v7;
  __int128 **v8;
  uint64_t v9;
  unsigned __int8 *v10;
  const void *v11;
  int64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float v62;
  int8x16_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float v69;
  int8x16_t v70;
  float v71;
  uint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  uint64_t v75;
  float32x2_t v76;
  int8x16_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x4_t v80;
  int32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x4_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unsigned __int8 v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v104;
  const char *v105;
  size_t v106;
  unsigned __int8 v107;
  const char *v108;
  size_t v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  uint64_t v117;
  size_t v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count *v121;
  unint64_t *p_shared_owners;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  void *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unsigned __int8 v154;
  uint64_t v155;
  int32x4_t v159;
  const char *v160;
  int32x4_t v161;
  int v162;
  float32x4_t v163;
  unsigned __int8 *v164;
  int8x16_t v165;
  int8x16_t v166;
  char *v167;
  unsigned __int8 *v168;
  _QWORD v169[3];
  _QWORD v170[3];
  char v171;
  unsigned __int8 v172;
  unint64_t v173;
  uint64_t v174;
  char v175;
  char v176;
  unint64_t v177;
  void *v178;
  __int128 v179;
  unint64_t v180;
  _BYTE v181[28];
  __int128 v182;
  size_t v183;
  __int128 v184;
  _QWORD v185[3];
  uint64_t v186;
  __int32 v187;
  float32x4_t v188;
  float32x4_t v189;
  int8x16_t v190;
  int8x16_t v191;
  __int128 __p;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v194;
  const char *v195;
  int v196;
  const char *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  float32x4_t *v200;
  __int128 v201;
  _QWORD *v202;
  _BYTE object[48];
  size_t v204;
  __int128 v205;
  _BYTE v206[144];
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  int v228;
  uint64_t v229;

  v229 = *MEMORY[0x24BDAC8D0];
  sub_223F901C8(a1, (char **)&__p);
  v8 = (__int128 **)*((_QWORD *)&__p + 1);
  v7 = (__int128 **)__p;
  memset(object, 0, 24);
  v9 = *((_QWORD *)&__p + 1) - __p;
  if (*((_QWORD *)&__p + 1) == (_QWORD)__p)
  {
    v10 = 0;
    if ((_QWORD)__p)
    {
LABEL_6:
      *((_QWORD *)&__p + 1) = v7;
      v164 = v10;
      operator delete(v7);
      v10 = v164;
    }
  }
  else
  {
    if (v9 < 0)
      sub_22316E078();
    *(_QWORD *)object = operator new(*((_QWORD *)&__p + 1) - __p);
    *(_QWORD *)&object[8] = *(_QWORD *)object;
    *(_QWORD *)&object[16] = *(_QWORD *)object + 16 * (v9 >> 4);
    *(_QWORD *)v181 = object;
    do
    {
      v207 = **v7;
      sub_2232E9564((char ***)v181, &v207);
      v7 += 2;
    }
    while (v7 != v8);
    v9 = *(_QWORD *)object;
    v10 = *(unsigned __int8 **)&object[8];
    v7 = (__int128 **)__p;
    if ((_QWORD)__p)
      goto LABEL_6;
  }
  if (*(_BYTE *)(a4 + 24))
  {
    v167 = 0;
    v168 = 0;
    v11 = *(const void **)a4;
    v12 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
    if (v12)
    {
      if (v12 < 0)
        sub_22316E078();
      v167 = (char *)operator new(v12);
      memcpy(v167, v11, v12);
      v168 = (unsigned __int8 *)&v167[16 * (v12 >> 4)];
      if (!v9)
        goto LABEL_16;
    }
    else if (!v9)
    {
      goto LABEL_16;
    }
    operator delete((void *)v9);
  }
  else
  {
    v167 = (char *)v9;
    v168 = v10;
  }
LABEL_16:
  kdebug_trace();
  sub_223FA3F10(object);
  if (**(int **)(*(_QWORD *)object + 56) <= 1)
  {
    v13 = atomic_load((unsigned __int8 *)&qword_2540CE448);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE448))
    {
      qword_2540CE440 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_TrackerRender");
      __cxa_guard_release(&qword_2540CE448);
    }
    v14 = qword_2540CE440;
    *(_BYTE *)(qword_2540CE440 + 16) = 0;
    *(_QWORD *)(v14 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v14 = std::chrono::steady_clock::now();
    *(_BYTE *)(v14 + 16) = 1;
  }
  v15 = a2[11].u32[0];
  v16 = a2[11].u32[1];
  if ((_DWORD)v16)
    v17 = v15 == 0;
  else
    v17 = 1;
  LOBYTE(v207) = -1;
  v18 = v15 | (v16 << 32);
  if (v17)
    v18 = 0;
  v19 = v18 << 32;
  if (!HIDWORD(v18))
    v19 = 0;
  if ((_DWORD)v18)
    v20 = HIDWORD(v18) == 0;
  else
    v20 = 1;
  *(_QWORD *)v181 = v18;
  *(_QWORD *)&v181[8] = v19 | (v18 != 0);
  v181[16] = 0;
  v181[24] = 0;
  *(_QWORD *)object = *(_QWORD *)&v181[8];
  if (v20)
    v18 = 0;
  *(_QWORD *)&__p = v18;
  if ((HIDWORD(v19) & (HIDWORD(v19) - 1)) != 0)
    v21 = 1;
  else
    v21 = HIDWORD(v19);
  sub_223316930((size_t *)&v182, &__p, (void **)object, 1, (void **)&v207, 1, v21);
  v22 = (unsigned __int8 *)v167;
  v180 = 0;
  v179 = 0uLL;
  v23 = v168 - (unsigned __int8 *)v167;
  if (v168 != (unsigned __int8 *)v167)
  {
    if (v23 < 0)
      sub_22316E078();
    *(_QWORD *)&v179 = operator new(v168 - (unsigned __int8 *)v167);
    *((_QWORD *)&v179 + 1) = v179;
    v180 = v179 + 16 * (v23 >> 4);
  }
  v24 = a2[11].u32[0];
  v25 = a2[11].u32[1];
  if ((_DWORD)v25)
    v26 = v24 == 0;
  else
    v26 = 1;
  LODWORD(v207) = 0;
  v27 = v24 | (v25 << 32);
  if (v26)
    v27 = 0;
  v28 = v27 << 32;
  if (!HIDWORD(v27))
    v28 = 0;
  if ((_DWORD)v27)
    v29 = HIDWORD(v27) == 0;
  else
    v29 = 1;
  v173 = v27;
  v174 = v28 | (v27 != 0);
  v175 = 0;
  v176 = 0;
  *(_QWORD *)object = v174;
  if (v29)
    v27 = 0;
  *(_QWORD *)&__p = v27;
  if (((v28 >> 30) & ((v28 >> 30) - 1)) != 0)
    v30 = 4;
  else
    v30 = v28 >> 30;
  sub_22346A424(&v177, &__p, (unint64_t *)object, 1, &v207, 1, v30);
  if (v168 == (unsigned __int8 *)v167)
    goto LABEL_203;
  v31 = 0;
  while (1)
  {
    v33 = *(_QWORD *)(a1 + 8);
    v36 = *(_QWORD *)(v33 + 8);
    v35 = (uint64_t *)(v33 + 8);
    v34 = v36;
    if (!v36)
      goto LABEL_220;
    while (1)
    {
      while (1)
      {
        v37 = (uint64_t *)v34;
        v38 = (unsigned __int8 *)(v34 + 32);
        if (((char)sub_22319835C(v22, (unsigned __int8 *)(v34 + 32)) & 0x80000000) == 0)
          break;
        v34 = *v37;
        v35 = v37;
        if (!*v37)
          goto LABEL_220;
      }
      if (((char)sub_22319835C(v38, v22) & 0x80000000) == 0)
        break;
      v34 = v37[1];
      v35 = v37 + 1;
      if (!v34)
        goto LABEL_220;
    }
    v39 = *v35;
    if (!*v35)
LABEL_220:
      sub_223198218("map::at:  key not found");
    v172 = (DWORD2(v179) - v179) >> 4;
    v171 = 0;
    v170[0] = v181;
    v170[1] = &v172;
    v170[2] = &v171;
    if (HIDWORD(v173))
      v40 = (_DWORD)v173 == 0;
    else
      v40 = 1;
    v41 = v174;
    if (v40)
      v42 = 0;
    else
      v42 = v173;
    v43 = v178;
    if (HIDWORD(v42) * HIDWORD(v174) == -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v169[0] = v43;
    v169[1] = v42;
    v169[2] = v41;
    v44 = vcvt_f32_f64(*(float64x2_t *)(v39 + 160));
    v45 = vcvt_f32_f64(*(float64x2_t *)(v39 + 144));
    v46 = vcvt_f32_f64(*(float64x2_t *)(v39 + 128));
    v47 = vcvt_f32_f64(*(float64x2_t *)(v39 + 112));
    v48 = vcvt_f32_f64(*(float64x2_t *)(v39 + 96));
    v49 = vcvt_f32_f64(*(float64x2_t *)(v39 + 80));
    v50 = vcvt_f32_f64(*(float64x2_t *)(v39 + 64));
    v51 = vcvt_f32_f64(*(float64x2_t *)(v39 + 48));
    v52 = a3[1];
    v53 = a3[2];
    v54 = a3[3];
    v55 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*a3, v51.f32[0]), v52, v51, 1), v53, v50.f32[0]), v54, v50, 1);
    v56 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*a3, v49.f32[0]), v52, v49, 1), v53, v48.f32[0]), v54, v48, 1);
    v57 = (int8x16_t)vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*a3, v47.f32[0]), v52, v47, 1), v53, v46.f32[0]), v54, v46, 1);
    v58 = (int8x16_t)vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*a3, v45.f32[0]), v52, v45, 1), v53, v44.f32[0]), v54, v44, 1);
    v188 = v55;
    v189 = v56;
    v190 = v57;
    v191 = v58;
    v59 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.i8, 1);
    v60 = (float32x2_t)vextq_s8(v57, v57, 8uLL).u64[0];
    v61 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v57.i8, *(float32x2_t *)v57.i8), v59, *(float32x2_t *)v57.i8, 1), v60, v60);
    v163 = (float32x4_t)v58;
    if (v61.f32[0] == 1.0)
      goto LABEL_82;
    v62 = v61.f32[0] + -1.0;
    if (v61.f32[0] < 1.0)
      v62 = 1.0 - v61.f32[0];
    if (v62 <= 0.000001)
    {
LABEL_82:
      v61.i32[0] = v58.i32[0];
      v165 = v57;
      v71 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v57.i8, v61), v59, *(float32x2_t *)v58.i8, 1), v60, (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)).f32[0];
    }
    else
    {
      v61.f32[0] = 1.0 / sqrtf(v61.f32[0]);
      v63 = (int8x16_t)vmulq_n_f32((float32x4_t)v57, v61.f32[0]);
      v64 = vmul_lane_f32(v61, *(float32x2_t *)v57.i8, 1);
      v65 = vmul_f32(v60, v61);
      v66 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v63.i8, 1);
      v67 = (float32x2_t)vextq_s8(v63, v63, 8uLL).u64[0];
      v68 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v63.i8), v64, *(float32x2_t *)v63.i8, 1), v67, v65);
      if (v68.f32[0] == 1.0)
        goto LABEL_101;
      v69 = v68.f32[0] + -1.0;
      if (v68.f32[0] < 1.0)
        v69 = 1.0 - v68.f32[0];
      if (v69 <= 0.000001)
      {
LABEL_101:
        v68.i32[0] = v58.i32[0];
        v71 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v63.i8, v68), v66, *(float32x2_t *)v58.i8, 1), v67, (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)).f32[0];
      }
      else
      {
        v67.f32[0] = sqrtf(v68.f32[0]);
        v70 = (int8x16_t)vmulq_n_f32((float32x4_t)v63, 1.0 / v67.f32[0]);
        v68.i32[0] = v58.i32[0];
        v71 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v70.i8, v68), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.i8, 1), *(float32x2_t *)v58.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)).f32[0];
        v63 = (int8x16_t)vdivq_f32((float32x4_t)v63, (float32x4_t)vdupq_lane_s32((int32x2_t)v67, 0));
      }
      v165 = v63;
    }
    v72 = (*(uint64_t (**)(float32x2_t *))(*(_QWORD *)a2 + 16))(a2);
    *(float32x2_t *)v73.f32 = vmul_f32(*(float32x2_t *)v165.i8, *(float32x2_t *)(v72 + 24));
    *(float32x2_t *)&v73.u32[2] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v165, v165, 8uLL), vmla_lane_f32(vmul_f32(*(float32x2_t *)v165.i8, *(float32x2_t *)(v72 + 32)), *(float32x2_t *)(v72 + 36), *(float32x2_t *)v165.i8, 1));
    v74 = vmulq_n_f32(v73, -1.0 / v71);
    v187 = v74.i32[2];
    v186 = v74.i64[0];
    v185[0] = v169;
    v185[1] = &v186;
    v185[2] = v170;
    v201 = *(_OWORD *)((*(uint64_t (**)(float32x2_t *))(*(_QWORD *)a2 + 16))(a2) + 8);
    v200 = &v188;
    v202 = v185;
    v159 = (int32x4_t)v189;
    v161 = (int32x4_t)v188;
    v166 = v190;
    sub_223F08E58((uint64_t)object, a2, 0.0, 10.0);
    v75 = 0;
    v76 = (float32x2_t)vextq_s8(v166, v166, 8uLL).u64[0];
    v77 = (int8x16_t)vnegq_f32(v163);
    v78 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v166.i8, 1);
    v79 = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v166.i8, *(float32x2_t *)v77.i8), v78, *(float32x2_t *)v163.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL), v76);
    v82.i64[1] = v161.i64[1];
    v80.i64[0] = vtrn2q_s32(v161, v159).u64[0];
    v81 = vzip2q_s32(v161, v159);
    *(int32x2_t *)v82.f32 = vzip1_s32(*(int32x2_t *)v161.i8, *(int32x2_t *)v159.i8);
    *(float32x2_t *)v83.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v82.f32, *(float *)v77.i32), *(float32x2_t *)v80.f32, *(float32x2_t *)v163.f32, 1), *(float32x2_t *)v81.i8, v163, 2);
    *(float32x2_t *)&v83.u32[2] = v79;
    v207 = 0uLL;
    v208 = 0x3F80000000000000;
    v209 = 0;
    v210 = 0;
    v211 = 0;
    v84 = (float32x2_t)vextq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v80.f32, 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v80.f32, 1), 0xCuLL).u64[0];
    v213 = 0;
    v214 = 0;
    v215 = 0;
    v212 = 1065353216;
    v216 = 1065353216;
    v217 = 0;
    v218 = 0;
    v219 = 0;
    v221 = 0;
    v222 = 0;
    v223 = 0;
    v220 = 1065353216;
    v224 = 1065353216;
    v227 = 0;
    v225 = 0;
    v226 = 0;
    v228 = 1065353216;
    do
    {
      v80.i32[0] = *(_DWORD *)&v206[v75 + 8];
      v85 = *(float32x2_t *)&v206[v75];
      *(float32x2_t *)v86.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v82.f32, v85.f32[0]), v84, v85, 1), *(float32x2_t *)v81.i8, v80.f32[0]);
      *(float32x2_t *)&v86.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v166.i8, v85), v78, v85, 1), *(float32x2_t *)v80.f32, v76);
      v80 = vaddq_f32(v83, v86);
      v85.i32[0] = *(_DWORD *)&v206[v75 + 20];
      v86.i64[0] = *(_QWORD *)&v206[v75 + 12];
      v87 = (char *)&v207 + v75;
      *(_DWORD *)((char *)&v207 + v75 + 8) = v80.i32[2];
      *(_QWORD *)v87 = v80.i64[0];
      *(float32x2_t *)(v87 + 12) = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v82.f32, v86.f32[0]), v84, *(float32x2_t *)v86.f32, 1), *(float32x2_t *)v81.i8, v85.f32[0]);
      *((_DWORD *)v87 + 5) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v166.i8, *(float32x2_t *)v86.f32), v78, *(float32x2_t *)v86.f32, 1), v85, v76).u32[0];
      v75 += 24;
    }
    while (v75 != 144);
    sub_223F09724((uint64_t)&__p, (uint64_t)&v207, *(double *)&v76, *(double *)&v78, v81, v82, *(double *)v83.i64, *(double *)&v84);
    v88 = *(_QWORD *)(v39 + 200);
    v89 = *(_QWORD *)(v39 + 208);
    *(_QWORD *)object = v88;
    *(_QWORD *)&object[8] = v89;
    if (v89)
      (*(void (**)(uint64_t))(*(_QWORD *)v89 + 24))(v89);
    sub_223FA4004(object, (uint64_t)&__p, (uint64_t)&v200);
    if (v89)
      (*(void (**)(uint64_t))(*(_QWORD *)v89 + 40))(v89);
    if (!v171)
      goto LABEL_56;
    v90 = (char *)*((_QWORD *)&v179 + 1);
    if (*((_QWORD *)&v179 + 1) < v180)
    {
      **((_OWORD **)&v179 + 1) = *(_OWORD *)v22;
      v32 = v90 + 16;
      goto LABEL_55;
    }
    v91 = (char *)v179;
    v92 = (uint64_t)(*((_QWORD *)&v179 + 1) - v179) >> 4;
    v93 = v92 + 1;
    if ((unint64_t)(v92 + 1) >> 60)
      sub_22316E078();
    v94 = v180 - v179;
    if ((uint64_t)(v180 - v179) >> 3 > v93)
      v93 = v94 >> 3;
    v95 = (unint64_t)v94 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v93;
    if (v95)
    {
      if (v95 >> 60)
        sub_223174E94();
      v96 = (char *)operator new(16 * v95);
      v97 = &v96[16 * v92];
      *(_OWORD *)v97 = *(_OWORD *)v22;
      v98 = (uint64_t)v97;
      if (v90 == v91)
      {
LABEL_107:
        v32 = v97 + 16;
        *(_QWORD *)&v179 = v98;
        *((_QWORD *)&v179 + 1) = v97 + 16;
        v180 = (unint64_t)&v96[16 * v95];
        if (!v90)
          goto LABEL_55;
LABEL_108:
        operator delete(v90);
        goto LABEL_55;
      }
    }
    else
    {
      v96 = 0;
      v97 = (char *)(16 * v92);
      *(_OWORD *)(16 * v92) = *(_OWORD *)v22;
      v98 = 16 * v92;
      if (v90 == v91)
        goto LABEL_107;
    }
    do
    {
      *(_OWORD *)(v98 - 16) = *((_OWORD *)v90 - 1);
      v98 -= 16;
      v90 -= 16;
    }
    while (v90 != v91);
    v90 = (char *)v179;
    v32 = v97 + 16;
    *(_QWORD *)&v179 = v98;
    *((_QWORD *)&v179 + 1) = v97 + 16;
    v180 = (unint64_t)&v96[16 * v95];
    if (v90)
      goto LABEL_108;
LABEL_55:
    *((_QWORD *)&v179 + 1) = v32;
    if (v172 >= 0xFEu)
      break;
LABEL_56:
    v22 += 16;
    ++v31;
    if (v22 == v168)
      goto LABEL_203;
  }
  v99 = atomic_load((unsigned __int8 *)&qword_2540CE478);
  if ((v99 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE478))
  {
    sub_22455F53C(&__p);
    sub_223174DE4(object, "cv3d.acv.surfacedetection");
    sub_2232300E0((uint64_t **)&__p, (uint64_t)object, &qword_2540CE470);
    if ((object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_guard_release(&qword_2540CE478);
  }
  v200 = (float32x4_t *)qword_2540CE470;
  if (**(int **)(qword_2540CE470 + 56) <= 4)
  {
    v100 = *(unsigned __int8 *)(qword_2540CE470 + 72);
    v101 = sub_22322F254(qword_2540CE470, "OSLogSurrogateAppender", 1, 0);
    v102 = v101;
    if (v100 || v101 != 0)
    {
      *(_QWORD *)&__p = &v200;
      *((std::chrono::steady_clock::time_point *)&__p + 1) = std::chrono::steady_clock::now();
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v194 = 4;
      v195 = "unknown file";
      v196 = 100;
      v199 = 0;
      v197 = "unknown function";
      v198 = 0;
      v104 = *(_QWORD *)__p;
      v105 = (const char *)(*(_QWORD *)__p + 16);
      v160 = v105;
      if (*(char *)(*(_QWORD *)__p + 39) < 0)
      {
        v105 = *(const char **)(v104 + 16);
        v106 = *(_QWORD *)(v104 + 24);
      }
      else
      {
        v106 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
      }
      v162 = v100;
      v107 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v107 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v108 = (const char *)&xmmword_255788F40;
      else
        v108 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v109 = byte_255788F57;
      else
        v109 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v108, v105);
      v110 = &object[8];
      if (v109 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v109 >= 0x17)
      {
        v111 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v109 | 7) != 0x17)
          v111 = v109 | 7;
        v112 = v111 + 1;
        v110 = operator new(v111 + 1);
        *(_QWORD *)&object[24] = v112 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v110;
        *(_QWORD *)&object[16] = v109;
      }
      else
      {
        object[31] = v109;
        if (!v109)
        {
LABEL_136:
          v110[v109] = 0;
          object[32] = 1;
          v113 = &object[40];
          if (v106 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v106 >= 0x17)
          {
            v114 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v106 | 7) != 0x17)
              v114 = v106 | 7;
            v115 = v114 + 1;
            v113 = operator new(v114 + 1);
            *(_QWORD *)&v205 = v115 | 0x8000000000000000;
            *(_QWORD *)&object[40] = v113;
            v204 = v106;
          }
          else
          {
            BYTE7(v205) = v106;
            if (!v106)
            {
LABEL_144:
              v113[v106] = 0;
              BYTE8(v205) = 1;
              v116 = *(NSObject **)object;
              if (SBYTE7(v205) < 0)
                operator delete(*(void **)&object[40]);
              if (object[32] && (object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              v117 = ~v31;
              if (v102 && *(_QWORD *)(v102 + 24))
              {
                v118 = _os_log_pack_size();
                v119 = (std::__shared_weak_count_vtbl *)operator new(v118, (std::align_val_t)8uLL);
                v120 = (std::__shared_weak_count *)operator new();
                v121 = v120;
                v120->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v120->__shared_owners_;
                v120->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v120->__shared_weak_owners_ = 0;
                v120[1].__vftable = v119;
                *(_QWORD *)object = v119;
                *(_QWORD *)&object[8] = v119;
                *(_QWORD *)&object[16] = v120;
                do
                  v123 = __ldxr(p_shared_owners);
                while (__stxr(v123 + 1, p_shared_owners));
                memset(&object[24], 0, 24);
                do
                  v124 = __ldaxr(p_shared_owners);
                while (__stlxr(v124 - 1, p_shared_owners));
                if (!v124)
                {
                  ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                  std::__shared_weak_count::__release_weak(v121);
                }
                v125 = *(_QWORD *)object;
                v126 = _os_log_pack_fill();
                *(_DWORD *)v126 = 134217984;
                *(_QWORD *)(v126 + 4) = v117 + ((v168 - (unsigned __int8 *)v167) >> 4);
                v127 = operator new();
                v128 = *(unsigned __int8 *)(v104 + 39);
                v129 = v160;
                if ((v128 & 0x80u) != 0)
                {
                  v129 = *(const char **)(v104 + 16);
                  v128 = *(_QWORD *)(v104 + 24);
                }
                *(_QWORD *)v127 = v125;
                *(_OWORD *)(v127 + 8) = *(_OWORD *)&object[8];
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                *(_OWORD *)(v127 + 24) = *(_OWORD *)&object[24];
                *(_QWORD *)&object[24] = 0;
                *(_QWORD *)&object[32] = 0;
                *(_QWORD *)(v127 + 40) = v129;
                *(_QWORD *)(v127 + 48) = v128;
                *(_BYTE *)(v127 + 56) = 16;
                v188.i64[0] = 0;
                *(_QWORD *)&v207 = v127;
                (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v102 + 24) + 40))(*(_QWORD *)(v102 + 24), &v207);
                v130 = v207;
                *(_QWORD *)&v207 = 0;
                if (v130)
                {
                  v131 = *(std::__shared_weak_count **)(v130 + 32);
                  if (v131)
                  {
                    v132 = (unint64_t *)&v131->__shared_owners_;
                    do
                      v133 = __ldaxr(v132);
                    while (__stlxr(v133 - 1, v132));
                    if (!v133)
                    {
                      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                      std::__shared_weak_count::__release_weak(v131);
                    }
                  }
                  v134 = *(std::__shared_weak_count **)(v130 + 16);
                  if (v134)
                  {
                    v135 = (unint64_t *)&v134->__shared_owners_;
                    do
                      v136 = __ldaxr(v135);
                    while (__stlxr(v136 - 1, v135));
                    if (!v136)
                    {
                      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                      std::__shared_weak_count::__release_weak(v134);
                    }
                  }
                  MEMORY[0x227684CE8](v130, 0x10F0C40B62ED6C6);
                  v137 = v188.i64[0];
                  v188.i64[0] = 0;
                  if (v137)
                  {
                    v138 = *(std::__shared_weak_count **)(v137 + 32);
                    if (v138)
                    {
                      v139 = (unint64_t *)&v138->__shared_owners_;
                      do
                        v140 = __ldaxr(v139);
                      while (__stlxr(v140 - 1, v139));
                      if (!v140)
                      {
                        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                        std::__shared_weak_count::__release_weak(v138);
                      }
                    }
                    v141 = *(std::__shared_weak_count **)(v137 + 16);
                    if (v141)
                    {
                      v142 = (unint64_t *)&v141->__shared_owners_;
                      do
                        v143 = __ldaxr(v142);
                      while (__stlxr(v143 - 1, v142));
                      if (!v143)
                      {
                        ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                        std::__shared_weak_count::__release_weak(v141);
                      }
                    }
                    MEMORY[0x227684CE8](v137, 0x10F0C40B62ED6C6);
                  }
                }
                v144 = *(std::__shared_weak_count **)&object[32];
                if (*(_QWORD *)&object[32])
                {
                  v145 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                  do
                    v146 = __ldaxr(v145);
                  while (__stlxr(v146 - 1, v145));
                  if (!v146)
                  {
                    ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                    std::__shared_weak_count::__release_weak(v144);
                  }
                }
                v147 = *(std::__shared_weak_count **)&object[16];
                if (*(_QWORD *)&object[16])
                {
                  v148 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                  do
                    v149 = __ldaxr(v148);
                  while (__stlxr(v149 - 1, v148));
                  if (!v149)
                  {
                    ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                    std::__shared_weak_count::__release_weak(v147);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v116, OS_LOG_TYPE_ERROR);
                *(_DWORD *)object = 134217984;
                *(_QWORD *)&object[4] = v117 + ((v168 - (unsigned __int8 *)v167) >> 4);
                v150 = (void *)_os_log_send_and_compose_impl();
                if (v150)
                  free(v150);
              }
              if (v162)
              {
                sub_22322C138((uint64_t)&__p, "Found more than 254 planes during rendering of tracked planes. Skipping '%ld' planes and returning to prevent overflow.", v117 + ((v168 - (unsigned __int8 *)v167) >> 4));
                sub_223182C08((uint64_t)&__p);
              }
              sub_223182C08((uint64_t)&__p);
              v151 = v199;
              if (v199)
              {
                v152 = (unint64_t *)&v199->__shared_owners_;
                do
                  v153 = __ldaxr(v152);
                while (__stlxr(v153 - 1, v152));
                if (!v153)
                {
                  ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                  std::__shared_weak_count::__release_weak(v151);
                }
              }
              goto LABEL_203;
            }
          }
          memmove(v113, v105, v106);
          goto LABEL_144;
        }
      }
      memmove(v110, v108, v109);
      goto LABEL_136;
    }
  }
LABEL_203:
  *(_OWORD *)object = *(_OWORD *)v181;
  *(_OWORD *)&object[12] = *(_OWORD *)&v181[12];
  *(_OWORD *)&object[32] = v182;
  v204 = v183;
  v182 = 0uLL;
  v205 = v184;
  __p = v179;
  rep = v180;
  v180 = 0;
  v179 = 0uLL;
  sub_223FA55D8(a5, (__int128 *)object, (uint64_t)&__p);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (*(_QWORD *)&object[40])
    free(*(void **)&object[40]);
  *(_QWORD *)&object[40] = 0;
  if (v178)
    free(v178);
  if ((_QWORD)v179)
  {
    *((_QWORD *)&v179 + 1) = v179;
    operator delete((void *)v179);
  }
  if (*((_QWORD *)&v182 + 1))
    free(*((void **)&v182 + 1));
  kdebug_trace();
  sub_223FA3F10(object);
  if (**(int **)(*(_QWORD *)object + 56) <= 1)
  {
    v154 = atomic_load((unsigned __int8 *)&qword_2540CE458);
    if ((v154 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE458))
    {
      qword_2540CE450 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_TrackerRender");
      __cxa_guard_release(&qword_2540CE458);
    }
    v155 = qword_2540CE450;
    if (*(_BYTE *)(qword_2540CE450 + 16))
    {
      *(_QWORD *)(v155 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v155;
      *(_BYTE *)(v155 + 16) = 0;
    }
  }
  if (v167)
    operator delete(v167);
}

void sub_223FA3C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,_Unwind_Exception *exception_object,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  _Unwind_Exception *v59;
  void *v60;
  void *v61;

  if (LOBYTE(STACK[0x338]))
  {
    if (SLOBYTE(STACK[0x337]) < 0)
      operator delete((void *)STACK[0x320]);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x210]);
  if (a45)
  {
    free(a45);
    v59 = exception_object;
    if (!exception_object)
    {
LABEL_6:
      v60 = a58;
      if (!a58)
        goto LABEL_7;
      goto LABEL_11;
    }
  }
  else
  {
    v59 = exception_object;
    if (!exception_object)
      goto LABEL_6;
  }
  operator delete(v59);
  v60 = a58;
  if (!a58)
  {
LABEL_7:
    v61 = a30;
    if (!a30)
      goto LABEL_8;
    goto LABEL_12;
  }
LABEL_11:
  free(v60);
  v61 = a30;
  if (!a30)
LABEL_8:
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(v61);
  _Unwind_Resume(a1);
}

void sub_223FA3F10(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CE468);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE468))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.acv.trace");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CE460);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CE468);
  }
  *a1 = qword_2540CE460;
}

void sub_223FA3FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CE468);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CE468);
  _Unwind_Resume(a1);
}

void sub_223FA4004(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int8x16_t v7;
  double v8;
  double v9;
  float32x4_t v10;
  float32x4_t v11;
  double v12;
  float32x4_t v13;
  float32x2_t v14;
  float32x2_t *v15;
  float32x2_t *v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float *v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float *v26;
  float *v27;
  float *v28;
  float *v29;
  uint64_t **v30;
  float32x2_t *v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x4_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x4_t v39;
  int32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x2_t v45;
  float32x2_t v46;
  int32x4_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int32x4_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int32x4_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  float32x2_t *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  int v76;
  __int32 v77;
  int v78;
  int v79;
  int *v80;
  int *v81;
  int v82;
  int v83;
  int v84;
  int *v85;
  unint64_t v86;
  _DWORD *v87;
  int v88;
  unsigned int v89;
  unint64_t v90;
  float v91;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  float v96;
  float v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  float32x2_t v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  float32x2_t v111;
  uint64_t v112;
  float32x2_t v113;
  int8x16_t v114;
  float32x4_t v115;
  float32x4_t v116;
  void *v117;
  float *v118;
  void *__p;
  float *v120;
  char *v121;
  float *v122;
  void *v123;
  float *v124;
  void *v125;
  float *v126;
  int32x2_t v127;
  void **v128[2];

  v4 = a1[1];
  if (v4)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4))
    {
      v15 = (float32x2_t *)(**(_QWORD **)(*a1 + 8) + 232 * *(_QWORD *)*a1);
      v16 = v15 + 11;
      if (sub_223F7A584(a2, (unint64_t *)&v15[10], &v15[11], v7, v8, v9, v10, v11, v12, v13, v14))
      {
        v18 = v15[3];
        if (*(_QWORD *)&v18 && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v18 + 48))(v18)
          || (v19 = v15[5], *(_QWORD *)&v19) && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v19 + 48))(v19)
          || (v20 = v15[7], *(_QWORD *)&v20) && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v20 + 48))(v20)
          || (v21 = v15[9], *(_QWORD *)&v21) && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v21 + 48))(v21))
        {
          __p = (void *)v15[2];
          v22 = (float *)v15[3];
          v120 = v22;
          if (v22)
            (*(void (**)(float *))(*(_QWORD *)v22 + 24))(v22);
          v121 = (char *)v15[4];
          v23 = v15[5];
          v122 = (float *)v23;
          if (v23)
            (*(void (**)(float32x2_t))(**(_QWORD **)&v23 + 24))(v23);
          v123 = (void *)v15[6];
          v24 = v15[7];
          v124 = (float *)v24;
          if (v24)
            (*(void (**)(float32x2_t))(**(_QWORD **)&v24 + 24))(v24);
          v125 = (void *)v15[8];
          v25 = v15[9];
          v126 = (float *)v25;
          if (v25)
            (*(void (**)(float32x2_t))(**(_QWORD **)&v25 + 24))(v25);
          v26 = v120;
          v117 = __p;
          v118 = v120;
          if (v120)
            (*(void (**)(float *))(*(_QWORD *)v120 + 24))(v120);
          sub_223FA4004(&v117, a2, a3);
          if (v26)
            (*(void (**)(float *))(*(_QWORD *)v26 + 40))(v26);
          v27 = v122;
          v117 = v121;
          v118 = v122;
          if (v122)
            (*(void (**)(float *))(*(_QWORD *)v122 + 24))(v122);
          sub_223FA4004(&v117, a2, a3);
          if (v27)
            (*(void (**)(float *))(*(_QWORD *)v27 + 40))(v27);
          v28 = v124;
          v117 = v123;
          v118 = v124;
          if (v124)
            (*(void (**)(float *))(*(_QWORD *)v124 + 24))(v124);
          sub_223FA4004(&v117, a2, a3);
          if (v28)
            (*(void (**)(float *))(*(_QWORD *)v28 + 40))(v28);
          v29 = v126;
          v117 = v125;
          v118 = v126;
          if (v126)
            (*(void (**)(float *))(*(_QWORD *)v126 + 24))(v126);
          sub_223FA4004(&v117, a2, a3);
          if (v29)
            (*(void (**)(float *))(*(_QWORD *)v29 + 40))(v29);
          if (v126)
            (*(void (**)(float *))(*(_QWORD *)v126 + 40))(v126);
          if (v124)
            (*(void (**)(float *))(*(_QWORD *)v124 + 40))(v124);
          if (v122)
            (*(void (**)(float *))(*(_QWORD *)v122 + 40))(v122);
          if (v120)
            (*(void (**)(float *))(*(_QWORD *)v120 + 40))(v120);
        }
        else
        {
          v30 = *(uint64_t ***)(a3 + 24);
          *(float32x2_t *)v17.f32 = vmul_f32(vadd_f32(v15[10], *v16), (float32x2_t)0x3F0000003F000000);
          v113 = vsub_f32(*(float32x2_t *)v17.f32, *v16);
          v115 = v17;
          v31 = *(float32x2_t **)a3;
          v32 = *(float32x2_t *)(a3 + 8);
          v33 = *(float32x2_t *)(a3 + 16);
          __p = operator new(0x20uLL);
          v120 = (float *)__p;
          v121 = (char *)__p + 32;
          v128[0] = &__p;
          v34.i32[3] = v115.i32[3];
          v35 = vadd_f32(*(float32x2_t *)v115.f32, v113);
          v36.i32[0] = v31[1].i32[0];
          v37.i32[0] = v31[3].i32[0];
          v38.i32[0] = v31[5].i32[0];
          *(float32x2_t *)v39.f32 = vmla_f32(vmla_lane_f32(vmul_n_f32(*v31, v35.f32[0]), v31[2], v35, 1), 0, v31[4]);
          *(float32x2_t *)&v39.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v36, v35), v37, v35, 1), 0, v38);
          *(float32x2_t *)v34.f32 = v31[6];
          v34.i32[2] = v31[7].i32[0];
          v40 = (int32x4_t)vaddq_f32(v39, v34);
          v127 = vcvt_s32_f32(vrnda_f32(vadd_f32(v33, vmul_f32(v32, vdiv_f32(*(float32x2_t *)v40.i8, (float32x2_t)vdup_laneq_s32(v40, 2))))));
          sub_2236B43F0(v128, &v127);
          *(float32x2_t *)v42.f32 = v113;
          v41.i64[0] = v115.i64[0];
          v41.i64[1] = v115.i64[0];
          *(float32x2_t *)&v42.u32[2] = v113;
          v43 = vsubq_f32(v41, v42);
          v44 = vaddq_f32(v41, v42);
          v42.i32[0] = v31[1].i32[0];
          v45.i32[0] = v31[3].i32[0];
          v46.i32[0] = v31[5].i32[0];
          *(float32x2_t *)v41.f32 = vmla_f32(vmla_lane_f32(vmul_n_f32(*v31, v43.f32[0]), v31[2], *(float32x2_t *)v44.f32, 1), 0, v31[4]);
          v114 = (int8x16_t)v44;
          v116 = v43;
          *(float32x2_t *)&v41.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v43.f32), v45, *(float32x2_t *)v44.f32, 1), 0, v46);
          *(float32x2_t *)v42.f32 = v31[6];
          v42.i32[2] = v31[7].i32[0];
          v47 = (int32x4_t)vaddq_f32(v41, v42);
          v127 = vcvt_s32_f32(vrnda_f32(vadd_f32(v33, vmul_f32(v32, vdiv_f32(*(float32x2_t *)v47.i8, (float32x2_t)vdup_laneq_s32(v47, 2))))));
          sub_2236B43F0(v128, &v127);
          v48.i32[0] = v31[1].i32[0];
          v49.i32[0] = v31[3].i32[0];
          v50.i32[0] = v31[5].i32[0];
          *(float32x2_t *)v51.f32 = vmla_f32(vmla_laneq_f32(vmul_laneq_f32(*v31, (float32x4_t)v114, 2), v31[2], v116, 3), 0, v31[4]);
          *(float32x2_t *)&v51.u32[2] = vmla_f32(vmla_laneq_f32(vmul_f32(v48, (float32x2_t)*(_OWORD *)&vextq_s8(v114, v114, 8uLL)), v49, v116, 3), 0, v50);
          *(float32x2_t *)v52.f32 = v31[6];
          v52.i32[2] = v31[7].i32[0];
          v53 = (int32x4_t)vaddq_f32(v51, v52);
          v127 = vcvt_s32_f32(vrnda_f32(vadd_f32(v33, vmul_f32(v32, vdiv_f32(*(float32x2_t *)v53.i8, (float32x2_t)vdup_laneq_s32(v53, 2))))));
          sub_2236B43F0(v128, &v127);
          v54.i32[0] = v31[1].i32[0];
          v55.i32[0] = v31[3].i32[0];
          v56.i32[0] = v31[5].i32[0];
          *(float32x2_t *)v57.f32 = vmla_f32(vmla_laneq_f32(vmul_n_f32(*v31, v116.f32[0]), v31[2], v116, 3), 0, v31[4]);
          *(float32x2_t *)&v57.u32[2] = vmla_f32(vmla_laneq_f32(vmul_f32(v54, *(float32x2_t *)v116.f32), v55, v116, 3), 0, v56);
          *(float32x2_t *)v58.f32 = v31[6];
          v58.i32[2] = v31[7].i32[0];
          v59 = (int32x4_t)vaddq_f32(v57, v58);
          v127 = vcvt_s32_f32(vrnda_f32(vadd_f32(v33, vmul_f32(v32, vdiv_f32(*(float32x2_t *)v59.i8, (float32x2_t)vdup_laneq_s32(v59, 2))))));
          sub_2236B43F0(v128, &v127);
          v60 = __p;
          v62 = *(_QWORD *)__p;
          v61 = *((_QWORD *)__p + 1);
          v63 = *((_QWORD *)__p + 2);
          v64 = *((_QWORD *)__p + 3);
          v65 = operator new(0x20uLL);
          *v65 = v62;
          v65[1] = v61;
          v65[2] = v64;
          v65[3] = v63;
          operator delete(v60);
          v66 = (float32x2_t *)v30[1];
          v67 = **v30;
          v68 = (*v30)[1];
          v69 = *((_DWORD *)*v30 + 5);
          v70 = v30[2];
          __p = 0;
          v120 = 0;
          v121 = 0;
          __p = operator new(0x40uLL);
          v120 = (float *)__p;
          v121 = (char *)__p + 64;
          LODWORD(v128[0]) = 0;
          v127.i32[0] = 0;
          sub_2236B5220(4, (uint64_t)v65, v128, &v127, (char **)&__p);
          v71 = 126 - 2 * __clz(((char *)v120 - (_BYTE *)__p) >> 4);
          if (v120 == __p)
            v72 = 0;
          else
            v72 = v71;
          sub_223FA4990((float *)__p, v120, v72, 1);
          v76 = (int)v128[0];
          v77 = v127.i32[0];
          if (LODWORD(v128[0]) == v127.i32[0])
          {
            v78 = *((_DWORD *)v65 + 2);
            v79 = *(_DWORD *)v65;
            if (v78 >= *(_DWORD *)v65)
              v80 = (int *)v65;
            else
              v80 = (int *)(v65 + 1);
            if (v78 >= v79)
              v81 = (int *)(v65 + 1);
            else
              v81 = (int *)v65;
            v82 = *((_DWORD *)v65 + 6);
            v83 = *((_DWORD *)v65 + 4);
            if (v82 >= v83)
            {
              if (v78 >= v79)
                v104 = *(_DWORD *)v65;
              else
                v104 = *((_DWORD *)v65 + 2);
              if (v78 <= v79)
                v78 = *(_DWORD *)v65;
              if (v83 < v104)
                v80 = (int *)(v65 + 2);
              if (v82 >= v78)
                v85 = (int *)(v65 + 3);
              else
                v85 = v81;
            }
            else
            {
              if (v78 <= v79)
                v84 = *(_DWORD *)v65;
              else
                v84 = *((_DWORD *)v65 + 2);
              if (v78 >= v79)
                v78 = *(_DWORD *)v65;
              if (v82 < v78)
                v80 = (int *)(v65 + 3);
              if (v83 >= v84)
                v85 = (int *)(v65 + 2);
              else
                v85 = v81;
            }
            v105 = v80[1];
            if ((v105 & 0x80000000) == 0 && v105 < SHIDWORD(v68))
            {
              v106 = *v85;
              if ((v106 & 0x80000000) == 0)
              {
                v107 = *v80;
                if (v107 < (int)v68)
                {
                  v108 = v107 & ~(v107 >> 31);
                  LODWORD(v109) = v68 - 1;
                  v109 = (int)v68 - 1 >= v106 ? v106 : v109;
                  if ((_DWORD)v108 != (_DWORD)v109 + 1)
                  {
                    v110 = v67 + 4 * (v105 * v69);
                    v111 = *v66;
                    v73.f32[0] = (float)(int)v108;
                    v74.f32[0] = (float)v105;
                    v75.i32[0] = v66[1].i32[0];
                    v73.i32[0] = vadd_f32(v75, vmla_lane_f32(vmul_f32(*v66, v73), v74, *v66, 1)).u32[0];
                    v112 = v109 + 1;
                    do
                    {
                      if (v73.f32[0] > *(float *)(v110 + 4 * v108))
                      {
                        *(_DWORD *)(v110 + 4 * v108) = v73.i32[0];
                        *(_BYTE *)(*(_QWORD *)(*v70 + 40)
                                 + (*(_DWORD *)(*v70 + 8) * v108 + *(_DWORD *)(*v70 + 12) * v105)) = *(_BYTE *)v70[1];
                        *(_BYTE *)v70[2] = 1;
                        v111.i32[0] = v66->i32[0];
                      }
                      v73.f32[0] = v73.f32[0] + v111.f32[0];
                      ++v108;
                    }
                    while (v112 != v108);
                  }
                }
              }
            }
          }
          else if (LODWORD(v128[0]) != v127.i32[0] + 1)
          {
            v86 = 0;
            v87 = __p;
            v88 = v68 - 1;
            v89 = v69 * LODWORD(v128[0]);
            v90 = 1;
            do
            {
              if (v86 <= v90)
                v93 = v90;
              else
                v93 = v86;
              if (v87[4 * v86 + 1] == v76 && v76 < v127.i32[0])
                v86 = v93 + 1;
              if (v86 <= v90)
                v94 = v90;
              else
                v94 = v86;
              if (v87[4 * v90 + 1] == v76 && v76 < v127.i32[0])
                v95 = v94 + 1;
              else
                v95 = v90;
              v96 = *(float *)&v87[4 * v86 + 2];
              v97 = *(float *)&v87[4 * v95 + 2];
              if (v96 <= v97)
                v90 = v95;
              else
                v90 = v86;
              if (v96 > v97)
                v86 = v95;
              v91 = *(float *)&v87[4 * v86 + 2];
              if ((v76 & 0x80000000) == 0 && v76 < SHIDWORD(v68))
              {
                LODWORD(v98) = llroundf(*(float *)&v87[4 * v90 + 2]);
                if ((v98 & 0x80000000) == 0)
                {
                  v99 = llroundf(v91);
                  if ((int)v68 > v99)
                  {
                    v100 = v99 & ~(v99 >> 31);
                    v98 = v88 >= (int)v98 ? v98 : v88;
                    if ((_DWORD)v100 != (_DWORD)v98 + 1)
                    {
                      v101 = v67 + 4 * v89;
                      v102 = *v66;
                      v73.i32[0] = v66[1].i32[0];
                      v74.f32[0] = (float)(int)v100;
                      v75.f32[0] = (float)v76;
                      v74 = vmla_lane_f32(vmul_f32(*v66, v74), v75, *v66, 1);
                      v73 = vadd_f32(v73, v74);
                      v103 = v98 + 1;
                      do
                      {
                        if (v73.f32[0] > *(float *)(v101 + 4 * v100))
                        {
                          *(_DWORD *)(v101 + 4 * v100) = v73.i32[0];
                          *(_BYTE *)(*(_QWORD *)(*v70 + 40)
                                   + (*(_DWORD *)(*v70 + 8) * v100 + *(_DWORD *)(*v70 + 12) * v76)) = *(_BYTE *)v70[1];
                          *(_BYTE *)v70[2] = 1;
                          v102.i32[0] = v66->i32[0];
                        }
                        v73.f32[0] = v73.f32[0] + v102.f32[0];
                        ++v100;
                      }
                      while (v103 != v100);
                      v87 = __p;
                      v91 = *((float *)__p + 4 * v86 + 2);
                    }
                  }
                }
              }
              *(float *)&v87[4 * v86 + 2] = v91 + *(float *)&v87[4 * v86 + 3];
              *(float *)&v87[4 * v90 + 2] = *(float *)&v87[4 * v90 + 3] + *(float *)&v87[4 * v90 + 2];
              v89 += v69;
            }
            while (v76++ != v77);
          }
          if (__p)
          {
            v120 = (float *)__p;
            operator delete(__p);
          }
          operator delete(v65);
        }
      }
    }
  }
}

void sub_223FA48B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;

  if (__p)
  {
    operator delete(__p);
    operator delete(v17);
    _Unwind_Resume(a1);
  }
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_223FA48EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223FA4900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_223FA4990(float *a1, float *a2, uint64_t a3, char a4)
{
  float *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  float *v14;
  float v15;
  int v16;
  float v17;
  int v18;
  float *v19;
  float v20;
  float v21;
  float *i;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v28;
  float *v29;
  unint64_t v30;
  int v31;
  float v32;
  float *v34;
  unint64_t v35;
  float *v37;
  int v38;
  BOOL v39;
  float *v41;
  int v42;
  float v43;
  int v45;
  uint64_t v46;
  float *v47;
  float v48;
  float v49;
  int v51;
  BOOL v52;
  BOOL v54;
  float *v55;
  float v56;
  float v57;
  float *v59;
  int v60;
  BOOL v61;
  __int128 *v62;
  __int128 *v63;
  float *v64;
  int v65;
  int v66;
  BOOL v67;
  __int128 v68;
  int v69;
  int v70;
  __int128 v71;
  int v72;
  float *v73;
  BOOL v75;
  uint64_t v76;
  float *v77;
  float *v78;
  float *v79;
  int v80;
  float v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  float *v85;
  int v86;
  int64_t v88;
  int64_t v89;
  int64_t v90;
  uint64_t v91;
  float *v92;
  int v93;
  BOOL v94;
  float *v95;
  int v96;
  float v97;
  uint64_t v99;
  float *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  uint64_t v106;
  uint64_t v108;
  float *v109;
  float *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  BOOL v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  float *v118;
  int v119;
  float v120;
  BOOL v121;
  uint64_t v122;
  unint64_t v123;
  float *v124;
  float *v126;
  int v127;
  float v128;
  BOOL v129;
  uint64_t v130;
  float *j;
  int v132;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;

BOOL sub_223FA52EC(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float *v6;
  float *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  float v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  float *v18;
  int v19;
  BOOL v20;
  __int128 v21;
  __int128 *v22;
  __int128 *v23;
  float *v24;
  int v25;
  int v26;
  __int128 v27;
  int v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v18 = a2 - 4;
      v19 = *((_DWORD *)a2 - 4);
      if (v19 < *(_DWORD *)a1 || (v19 == *(_DWORD *)a1 ? (v20 = *(a2 - 1) < a1[3]) : (v20 = 0), v20))
      {
        v21 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v18;
        *(_OWORD *)v18 = v21;
      }
      return result;
    case 3:
      sub_2236B6494(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      v22 = (__int128 *)(a1 + 4);
      v23 = (__int128 *)(a1 + 8);
      sub_2236B6494(a1, a1 + 4, a1 + 8);
      v24 = a2 - 4;
      v25 = *((_DWORD *)a2 - 4);
      v26 = *((_DWORD *)a1 + 8);
      if (v25 < v26 || (result = 1, v25 == v26) && *(a2 - 1) < a1[11])
      {
        v27 = *v23;
        *v23 = *(_OWORD *)v24;
        *(_OWORD *)v24 = v27;
        v28 = *((_DWORD *)a1 + 8);
        v29 = *((_DWORD *)a1 + 4);
        if (v28 < v29 || (result = 1, v28 == v29) && a1[11] < a1[7])
        {
          v30 = *v22;
          *v22 = *v23;
          *v23 = v30;
          v31 = *((_DWORD *)a1 + 4);
          if (v31 < *(_DWORD *)a1 || (result = 1, v31 == *(_DWORD *)a1) && a1[7] < a1[3])
          {
            v32 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v22;
            *v22 = v32;
            return 1;
          }
        }
      }
      return result;
    case 5:
      sub_2236B62E8((uint64_t)a1, a1 + 4, a1 + 8, (uint64_t)(a1 + 12), (uint64_t)(a2 - 4));
      return 1;
    default:
      v6 = a1 + 8;
      sub_2236B6494(a1, a1 + 4, a1 + 8);
      v7 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v11 = *(_DWORD *)v7;
    v12 = v7[3];
    if (*(_DWORD *)v7 < *(_DWORD *)v6 || (v11 == *(_DWORD *)v6 ? (v13 = v12 < v6[3]) : (v13 = 0), v13))
    {
      v14 = *(_QWORD *)(v7 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v6;
      v10 = (uint64_t)a1;
      if (v6 != a1)
      {
        v15 = v8;
        while (1)
        {
          v16 = *(_DWORD *)((char *)a1 + v15 + 16);
          if (v11 >= v16 && (v11 != v16 || v12 >= *(float *)((char *)a1 + v15 + 28)))
            break;
          *(_OWORD *)((char *)a1 + v15 + 32) = *(_OWORD *)((char *)a1 + v15 + 16);
          v15 -= 16;
          if (v15 == -32)
          {
            v10 = (uint64_t)a1;
            goto LABEL_6;
          }
        }
        v10 = (uint64_t)a1 + v15 + 32;
      }
LABEL_6:
      *(_DWORD *)v10 = v11;
      *(_QWORD *)(v10 + 4) = v14;
      *(float *)(v10 + 12) = v12;
      if (++v9 == 8)
        return v7 + 4 == a2;
    }
    v6 = v7;
    v8 += 16;
    v7 += 4;
    if (v7 == a2)
      return 1;
  }
}

uint64_t sub_223FA55D8(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = *a2;
  *(_OWORD *)(a1 + 52) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 72) = a2[2];
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  v5 = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = *(_QWORD *)(a1 + 80);
  if (*(_DWORD *)(a1 + 44))
    v7 = *(_DWORD *)(a1 + 40) == 0;
  else
    v7 = 1;
  if (v7)
    v8 = 0;
  else
    v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  if (HIDWORD(v8) * HIDWORD(v9) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v8;
  v10 = *(_QWORD *)(a1 + 112);
  v11 = (*(_QWORD *)(a1 + 120) - v10) >> 4;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v10;
  return a1;
}

void sub_223FA56EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 120) = v5;
    operator delete(v5);
    v6 = *(void **)(v1 + 80);
    if (!v6)
    {
LABEL_3:
      *(_QWORD *)(v1 + 80) = 0;
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    v6 = *(void **)(v1 + 80);
    if (!v6)
      goto LABEL_3;
  }
  free(v6);
  *(_QWORD *)(v1 + 80) = 0;
  _Unwind_Resume(exception_object);
}

void sub_223FA5730(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, double a6)
{
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  float32x2_t *v16;
  size_t v17;
  unint64_t v18;
  float32x2_t v19;
  float32x2_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  float32x2_t *v28;
  size_t v29;
  unint64_t v30;
  float32x2_t v31;
  float32x2_t v32;
  uint64_t v33;
  _OWORD *v35;

  if (!*(_BYTE *)(a3 + 184))
  {
    v23 = *(_QWORD *)(a3 + 136);
    v24 = *(_QWORD *)(a3 + 144);
    if (v23 == v24)
      return;
    while (1)
    {
      v26 = *(const void **)v23;
      v25 = *(_QWORD *)(v23 + 8);
      v27 = v25 - *(_QWORD *)v23;
      if (v25 == *(_QWORD *)v23)
        break;
      if (v27 < 0)
        sub_22316E078();
      v28 = (float32x2_t *)operator new(v25 - *(_QWORD *)v23);
      v29 = v27 & 0xFFFFFFFFFFFFFFF8;
      memcpy(v28, v26, v29);
      if (v29)
      {
        v30 = 0;
        a6 = *(double *)a5;
        v31 = *(float32x2_t *)(a5 + 8);
        v32 = *(float32x2_t *)(a5 + 16);
        do
        {
          v28[v30 / 8] = vadd_f32(v32, vmla_lane_f32(vmul_n_f32(*(float32x2_t *)&a6, COERCE_FLOAT(*(_QWORD *)&v28[v30 / 8])), v31, v28[v30 / 8], 1));
          v30 += 8;
        }
        while (v29 != v30);
      }
      v33 = v29;
      if (v29 != 24)
        goto LABEL_41;
      *(float *)&a6 = vabds_f32((float)(v28->f32[0] - v28[2].f32[0]) * (float)(v28[1].f32[1] - v28->f32[1]), (float)(v28->f32[0] - v28[1].f32[0]) * (float)(v28[2].f32[1] - v28->f32[1]))* 0.5;
      if (*(float *)&a6 != 0.0 && *(float *)&a6 > 0.000001)
        goto LABEL_41;
LABEL_26:
      operator delete(v28);
LABEL_27:
      v23 += 24;
      if (v23 == v24)
        return;
    }
    v28 = 0;
    v33 = 0;
LABEL_41:
    sub_223F7D3A0(a2, a1, v33 >> 3, v28, 0, 0, a4, a6);
    if (!v28)
      goto LABEL_27;
    goto LABEL_26;
  }
  v9 = *(_QWORD *)(a3 + 136);
  v10 = *(_QWORD *)(a3 + 144);
  v11 = *(_OWORD **)(a3 + 160);
  v35 = *(_OWORD **)(a3 + 168);
  if (v9 != v10 || v11 != *(_OWORD **)(a3 + 168))
  {
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(_QWORD *)(v9 + 8);
      v15 = v13 - *(_QWORD *)v9;
      if (v13 == *(_QWORD *)v9)
        break;
      if (v15 < 0)
        sub_22316E078();
      v16 = (float32x2_t *)operator new(v13 - *(_QWORD *)v9);
      v17 = v15 & 0xFFFFFFFFFFFFFFF8;
      memcpy(v16, v14, v17);
      if (v17)
      {
        v18 = 0;
        a6 = *(double *)a5;
        v19 = *(float32x2_t *)(a5 + 8);
        v20 = *(float32x2_t *)(a5 + 16);
        do
        {
          v16[v18 / 8] = vadd_f32(v20, vmla_lane_f32(vmul_n_f32(*(float32x2_t *)&a6, COERCE_FLOAT(*(_QWORD *)&v16[v18 / 8])), v19, v16[v18 / 8], 1));
          v18 += 8;
        }
        while (v17 != v18);
      }
      v21 = v17;
      if (v17 != 24)
        goto LABEL_19;
      *(float *)&a6 = vabds_f32((float)(v16->f32[0] - v16[2].f32[0]) * (float)(v16[1].f32[1] - v16->f32[1]), (float)(v16->f32[0] - v16[1].f32[0]) * (float)(v16[2].f32[1] - v16->f32[1]))* 0.5;
      if (*(float *)&a6 != 0.0 && *(float *)&a6 > 0.000001)
        goto LABEL_19;
LABEL_20:
      operator delete(v16);
LABEL_21:
      v9 += 24;
      v11 += 6;
      if (v9 == v10 && v11 == v35)
        return;
    }
    v16 = 0;
    v21 = 0;
LABEL_19:
    sub_223F7D3A0(a2, a1, v21 >> 3, v16, v11, 1, a4, a6);
    if (!v16)
      goto LABEL_21;
    goto LABEL_20;
  }
}

void sub_223FA5A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223FA5A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  int v17;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;

  v7 = *(_OWORD *)a2;
  v8 = *(_OWORD *)(a2 + 16);
  v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)a1 = v7;
  *(_OWORD *)(a1 + 16) = v8;
  v10 = *(_OWORD *)(a2 + 64);
  v11 = *(_OWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v12;
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 80) = v11;
  v13 = *(_DWORD *)(a4 + 8);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)a4;
  v14 = a1 + 128;
  *(_DWORD *)(a1 + 136) = v13;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v15 = (_QWORD *)operator new();
  *(_QWORD *)(a1 + 168) = v15;
  *v15 = 0;
  v15[1] = 0;
  v15[2] = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_BYTE *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 128);
  v16 = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 292) = *(_QWORD *)a3;
  *(_DWORD *)(a1 + 300) = v16;
  LODWORD(v15) = *(_DWORD *)a3;
  v17 = *(_DWORD *)(a3 + 4) + *(_DWORD *)(a3 + 8);
  v19 = 1065353216;
  v20 = 0;
  v21 = 1065353216;
  v22 = 0;
  v23 = 1065353216;
  sub_223FA5730((int)v15, v14, a2, v17, (uint64_t)&v19, 0.0);
  return a1;
}

void sub_223FA5B94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(v1 + 264))
  {
    v4 = *(std::__shared_weak_count **)(v1 + 240);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  sub_223F9497C(v2);
  v7 = *(_QWORD *)(v1 + 160);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  _Unwind_Resume(a1);
}

void sub_223FA5C20(float64x2_t *a1, int a2, uint64_t a3, double a4, double a5, double a6, double a7, float64x2_t a8, float64x2_t a9, double a10, float64x2_t a11)
{
  int8x16_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  double v18;
  int8x16_t v19;
  int8x16_t v20;
  double v21;
  int8x16_t v22;
  int8x16_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  int v34;
  float v35;
  float v36;
  float v37;
  double v38;
  float32x2_t v39;
  double v40;
  float64x2_t v41;
  float64x2_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  BOOL v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  int8x16_t v55;
  double v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  double v63;
  uint64_t v64;
  float64x2_t v65;
  int8x16_t v72;
  double v73;
  double v75;
  double v76;
  float64x2_t v77;
  double v78;
  double v80;
  double v82;
  double v84;
  float64x2_t v86;
  double v88;
  float64x2_t v89;
  double v91;
  double v93;
  double v97;
  float64x2_t v101;
  float64x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  int32x2_t v108;
  int32x2_t v109;
  float32x2_t v110;
  float32x2_t v111;
  float32x2_t v112;
  float32x2_t v113;
  int32x2_t v114;
  float32x2_t v115;
  float32x2_t v116;
  float32x2_t v117;
  double v118;
  float v119;
  float v120;
  int v121;
  int8x16_t v122;
  int8x16_t v123;
  double v124;
  double v125;
  int8x16_t v126;
  int8x16_t v127;
  float64x2_t v128;
  float v129;
  float64x2_t v130;
  float v131;
  float64x2_t v132;
  unint64_t v133;
  float64x2_t v134;
  uint64_t v135;
  float64x2_t v136;
  double v137;
  int8x16_t v138;
  float64_t v139;
  float64x2_t v140;
  float64_t v141;
  float64x2_t v142;
  double v143;
  int8x16_t v144;
  float64_t v145;

  if (*(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
  {
    v18 = a1[7].f64[0];
    v19 = (int8x16_t)a1[6];
    v13.f64[0] = a1[5].f64[0];
    v20 = (int8x16_t)a1[4];
    v143 = v18;
    v142 = (float64x2_t)v19;
    v145 = v13.f64[0];
    v144 = v20;
    v21 = *(double *)(a3 + 112);
    v22 = *(int8x16_t *)(a3 + 96);
    v14.f64[0] = *(float64_t *)(a3 + 80);
    v23 = *(int8x16_t *)(a3 + 64);
    v24 = *(_QWORD *)&a1[10].f64[0];
    if (!v24)
      goto LABEL_15;
    v122 = v19;
    v123 = *(int8x16_t *)(a3 + 96);
    v124 = *(double *)(a3 + 112);
    v125 = v18;
    v126 = *(int8x16_t *)(a3 + 64);
    v127 = v20;
    v128 = v14;
    v130 = v13;
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 48))(v24);
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
    v14 = v128;
    v13 = v130;
    v23 = v126;
    v20 = v127;
    v21 = v124;
    v18 = v125;
    v19 = v122;
    v22 = v123;
    if (v25)
    {
      v26 = *(float *)(a3 + 128);
      v27 = *(float *)a1[18].f64;
      v28 = v27 * 100.0;
      if (v27 < 0.01)
        v28 = 1.0;
      v29 = (float)(LODWORD(a1[18].f64[1]) + HIDWORD(a1[18].f64[1])) / v28;
      if (v26 >= 0.01)
        v30 = 1.0 / (float)(v26 * 100.0);
      else
        v30 = 1.0;
      v31 = v29 / (float)(v30 + v29);
      if (v31 < 0.5)
        v31 = 0.5;
      if (v31 <= 0.95)
        v32 = v31;
      else
        v32 = 0.95;
      v33 = 1.0 - v32;
    }
    else
    {
LABEL_15:
      v34 = LODWORD(a1[18].f64[1]) + HIDWORD(a1[18].f64[1]);
      v35 = *(float *)a1[18].f64;
      if (v34 <= 1)
        v34 = 1;
      if (v34 >= 0x32)
        v34 = 50;
      if (v35 < 0.01)
        v35 = 0.01;
      v32 = (float)v34 / v35;
      v36 = *(float *)(a3 + 128);
      v37 = 1.0 / v36;
      _NF = v36 < 0.01;
      v33 = 100.0;
      if (!_NF)
        v33 = v37;
    }
    v38 = *(double *)vextq_s8(v20, v20, 8uLL).i64;
    v129 = v33;
    v131 = v32;
    v39 = (float32x2_t)__PAIR64__(LODWORD(v33), LODWORD(v32));
    *(_QWORD *)&v40 = vextq_s8(v23, v23, 8uLL).u64[0];
    v41 = vcvtq_f64_f32(v39);
    v138 = (int8x16_t)v142;
    v139 = v143;
    *(_QWORD *)&v42.f64[0] = v20.i64[0];
    v42.f64[1] = v38;
    v43 = vmulq_f64(v42, v42).f64[0] + v38 * v38 + v13.f64[0] * v13.f64[0];
    *(_QWORD *)&a9.f64[0] = v20.i64[0];
    v44 = v38;
    v45 = v13.f64[0];
    if (v43 != 1.0)
    {
      v46 = v43 + -1.0;
      if (v43 < 1.0)
        v46 = 1.0 - v43;
      v47 = v46 > 0.00000001;
      *(_QWORD *)&a9.f64[0] = v20.i64[0];
      v44 = v38;
      v45 = v13.f64[0];
      if (v47)
      {
        a8.f64[0] = 1.0 / sqrt(v43);
        *(_QWORD *)&v45 = *(_OWORD *)&vmulq_f64(v13, a8);
        *(_QWORD *)&v48.f64[0] = v20.i64[0];
        v48.f64[1] = v38;
        a9 = vmulq_n_f64(v48, a8.f64[0]);
        *(_QWORD *)&v44 = vextq_s8((int8x16_t)a9, (int8x16_t)a9, 8uLL).u64[0];
      }
    }
    *(_QWORD *)&v49.f64[0] = v23.i64[0];
    v49.f64[1] = v40;
    v50 = vmulq_f64(v49, v49);
    v50.f64[0] = v50.f64[0] + v40 * v40 + v14.f64[0] * v14.f64[0];
    v11.i64[0] = v23.i64[0];
    v51 = v40;
    v52 = v14.f64[0];
    if (v50.f64[0] != 1.0)
    {
      v53 = v50.f64[0] + -1.0;
      if (v50.f64[0] < 1.0)
        v53 = 1.0 - v50.f64[0];
      v47 = v53 > 0.00000001;
      v11.i64[0] = v23.i64[0];
      v51 = v40;
      v52 = v14.f64[0];
      if (v47)
      {
        a11.f64[0] = 1.0 / sqrt(v50.f64[0]);
        *(_QWORD *)&v52 = *(_OWORD *)&vmulq_f64(v14, a11);
        *(_QWORD *)&v50.f64[0] = v23.i64[0];
        v50.f64[1] = v40;
        v11 = (int8x16_t)vmulq_n_f64(v50, a11.f64[0]);
        *(_QWORD *)&v51 = vextq_s8(v11, v11, 8uLL).u64[0];
      }
    }
    v54 = 0.0;
    v50.f64[0] = v41.f64[1] + v41.f64[0] + 0.0;
    if (v50.f64[0] == 0.0)
    {
      v55.i64[0] = 0;
      v56 = 0.0;
      v12.f64[0] = 0.0;
    }
    else
    {
      v55.i64[0] = 0;
      v56 = 0.0;
      v12.f64[0] = 0.0;
      if (fabs(v50.f64[0]) > 0.00000001)
      {
        a9 = vmulq_f64((float64x2_t)v19, a9);
        v54 = (0.0
             - v41.f64[0] * (a9.f64[0] + *(double *)vextq_s8(v19, v19, 8uLL).i64 * v44 + v18 * v45)
             - v41.f64[1]
             * (vmulq_f64((float64x2_t)v22, (float64x2_t)v11).f64[0]
              + *(double *)vextq_s8(v22, v22, 8uLL).i64 * v51
              + v21 * v52))
            / v50.f64[0];
        *(_QWORD *)&v57.f64[0] = v20.i64[0];
        v57.f64[1] = v38;
        v58 = vmlaq_n_f64((float64x2_t)0, v57, v41.f64[0]);
        *(_QWORD *)&v57.f64[0] = v23.i64[0];
        v57.f64[1] = v40;
        v55 = (int8x16_t)vdivq_f64(vmlaq_laneq_f64(v58, v57, v41, 1), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v50.f64[0], 0));
        *(_QWORD *)&v56 = vextq_s8(v55, v55, 8uLL).u64[0];
        v12 = vdivq_f64(vmlaq_laneq_f64(vmlaq_f64((float64x2_t)0, v13, v41), v14, v41, 1), v50);
      }
    }
    *(double *)&v55.i64[1] = v56;
    v59 = vmulq_f64((float64x2_t)v55, (float64x2_t)v55);
    v59.f64[0] = 1.0 / sqrt(v59.f64[0] + v56 * v56 + v12.f64[0] * v12.f64[0]);
    v60 = vmulq_n_f64((float64x2_t)v55, v59.f64[0]);
    v61 = vmulq_f64(v12, v59);
    v140 = v60;
    v141 = v61.f64[0];
    v62 = vabsq_f64(v60);
    *(_QWORD *)&v63 = *(_OWORD *)&vabsq_f64(v61);
    v64 = v62.f64[1] > v62.f64[0];
    if (v62.f64[1] > v62.f64[0])
      v62.f64[0] = v62.f64[1];
    if (v63 > v62.f64[0])
      v64 = 2;
    v132 = 0uLL;
    v133 = 0;
    v132.f64[v64] = -v54 / v140.f64[v64];
    v62.f64[0] = v139;
    *(_QWORD *)&a9.f64[0] = v133;
    v65 = vsubq_f64(v62, a9);
    _Q6 = vsubq_f64((float64x2_t)v138, v132);
    _Q7 = vmulq_f64(_Q6, v60);
    _D16 = v60.f64[1];
    __asm { FMLA            D7, D16, V6.D[1] }
    _Q7.f64[0] = vmlad_n_f64(_Q7.f64[0], v61.f64[0], v65.f64[0]);
    *(_QWORD *)&v62.f64[0] = *(_OWORD *)&vmlsq_f64(v62, v61, _Q7);
    v72 = (int8x16_t)vmlsq_lane_f64((float64x2_t)v138, v60, _Q7.f64[0], 0);
    v138 = v72;
    v139 = v62.f64[0];
    if (*(double *)v20.i64 != *(double *)v23.i64)
    {
      v73 = *(double *)v20.i64 - *(double *)v23.i64;
      if (*(double *)v20.i64 < *(double *)v23.i64)
        v73 = *(double *)v23.i64 - *(double *)v20.i64;
      if (v73 > 0.00000001)
        goto LABEL_55;
    }
    _NF = *(double *)&v20.i64[1] < v40;
    if (*(double *)&v20.i64[1] != v40)
    {
      v75 = *(double *)&v20.i64[1] - v40;
      v76 = v40 - *(double *)&v20.i64[1];
      if (!_NF)
        v76 = v75;
      if (v76 > 0.00000001)
        goto LABEL_55;
    }
    v77 = (float64x2_t)vextq_s8(v72, v72, 8uLL);
    if (v13.f64[0] != v14.f64[0])
    {
      v78 = v13.f64[0] - v14.f64[0];
      if (v13.f64[0] < v14.f64[0])
        v78 = v14.f64[0] - v13.f64[0];
      if (v78 > 0.00000001)
      {
LABEL_55:
        sub_223FC3A04((uint64_t)&v144, &v140, (uint64_t)&v132, v65);
        _D2 = v135;
        v80 = a1[1].f64[0];
        _Q7 = *a1;
        v82 = a1[3].f64[0];
        _Q17 = a1[2];
        v84 = a1[5].f64[0];
        _Q19 = a1[4];
        v86 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v132, a1->f64[0]), v134, *a1, 1), v136, v80);
        __asm { FMLA            D21, D2, V7.D[1] }
        v88 = _D21 + v137 * v80;
        v89 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v132, _Q17.f64[0]), v134, _Q17, 1), v136, v82);
        __asm { FMLA            D21, D2, V17.D[1] }
        v91 = _D21 + v137 * v82;
        v62 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v132, _Q19.f64[0]), v134, _Q19, 1), v136, v84);
        __asm { FMLA            D0, D2, V19.D[1] }
        v93 = _D0 + v137 * v84;
        *a1 = v86;
        a1[1].f64[0] = v88;
        a1[2] = v89;
        a1[3].f64[0] = v91;
        a1[4] = v62;
        a1[5].f64[0] = v93;
        v62.f64[0] = v139;
        v72 = v138;
        v77 = (float64x2_t)vextq_s8(v72, v72, 8uLL);
      }
    }
    a1[7].f64[0] = v62.f64[0];
    v72.i64[1] = *(_QWORD *)&v77.f64[0];
    a1[6] = (float64x2_t)v72;
    _Q1 = a1[4];
    _D3 = a1[4].f64[1];
    __asm { FMLA            D2, D3, V1.D[1] }
    v77.f64[0] = sqrt(_D2 + a1[5].f64[0] * a1[5].f64[0]);
    if (v77.f64[0] != 1.0)
    {
      v97 = v77.f64[0] <= 1.0 ? 1.0 - v77.f64[0] : v77.f64[0] + -1.0;
      if (v97 > 0.00000001)
      {
        _Q1.f64[0] = a1[1].f64[0];
        _Q2 = *a1;
        _Q3 = vmulq_f64(_Q2, _Q2);
        _D4 = a1->f64[1];
        __asm { FMLA            D3, D4, V2.D[1] }
        _Q3.f64[0] = sqrt(_Q3.f64[0] + _Q1.f64[0] * _Q1.f64[0]);
        v101 = vdivq_f64(_Q1, _Q3);
        *a1 = vdivq_f64(*a1, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0));
        a1[1].f64[0] = v101.f64[0];
        v101.f64[0] = a1[3].f64[0];
        _Q2 = a1[2];
        _Q3 = vmulq_f64(_Q2, _Q2);
        _D4 = a1[2].f64[1];
        __asm { FMLA            D3, D4, V2.D[1] }
        _Q3.f64[0] = sqrt(_Q3.f64[0] + v101.f64[0] * v101.f64[0]);
        v105 = vdivq_f64(v101, _Q3);
        a1[2] = vdivq_f64(_Q2, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0));
        a1[3].f64[0] = v105.f64[0];
        v105.f64[0] = a1[5].f64[0];
        a1[4] = vdivq_f64(a1[4], (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v77.f64[0], 0));
        *(_QWORD *)&a1[5].f64[0] = *(_OWORD *)&vdivq_f64(v105, v77);
      }
    }
    v106 = vcvt_f32_f64(*(float64x2_t *)(a3 + 32));
    v107 = vcvt_f32_f64(*(float64x2_t *)a3);
    v108 = (int32x2_t)vcvt_f32_f64(a1[2]);
    v109 = (int32x2_t)vcvt_f32_f64(*a1);
    v110 = (float32x2_t)vzip1_s32(v109, v108);
    v111 = (float32x2_t)vzip2_s32(v109, v108);
    v112 = vmla_lane_f32(vmul_n_f32(v110, v107.f32[0]), v111, v107, 1);
    v113 = (float32x2_t)vzip2q_s32((int32x4_t)vcvt_hight_f32_f64(*(int32x2_t *)&a1[1].f64[0], a1[1]), (int32x4_t)vcvt_hight_f32_f64(*(int32x2_t *)&a1[3].f64[0], a1[3])).u64[0];
    v114 = (int32x2_t)vmla_n_f32(vmla_lane_f32(vmul_n_f32(v110, v106.f32[0]), v111, v106, 1), v113, vcvt_f32_f64(*(float64x2_t *)(a3 + 48)).f32[0]);
    v115 = vsub_f32(vcvt_f32_f64(*(float64x2_t *)(a3 + 96)), vcvt_f32_f64(a1[6]));
    v116 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v110, v115.f32[0]), v111, v115, 1), v113, vsub_f32(vcvt_f32_f64(*(float64x2_t *)(a3 + 112)), vcvt_f32_f64(a1[7])).f32[0]);
    *(float32x2_t *)&v132.f64[0] = vmla_n_f32(v112, v113, vcvt_f32_f64(*(float64x2_t *)(a3 + 16)).f32[0]);
    *(int32x2_t *)&v132.f64[1] = v114;
    v133 = (unint64_t)v116;
    v117 = vmul_f32((float32x2_t)vrev64_s32(v114), *(float32x2_t *)&v132.f64[0]);
    v118 = COERCE_DOUBLE(vsub_f32(v117, (float32x2_t)vdup_lane_s32((int32x2_t)v117, 1)));
    LODWORD(v134.f64[0]) = LODWORD(v118);
    sub_223FA5730(a2, (uint64_t)&a1[8], a3, 1, (uint64_t)&v132, v118);
    v119 = 0.0;
    v120 = (float)(v131 + 0.0) + v129;
    if (v120 != 0.0 && fabsf(v120) > 0.000001)
      v119 = (float)((float)(v129 * *(float *)(a3 + 128)) + (float)((float)(v131 * *(float *)a1[18].f64) + 0.0)) / v120;
    *(float *)a1[18].f64 = v119;
    if (HIDWORD(a1[18].f64[0]) == a2)
    {
      v121 = LODWORD(a1[18].f64[1]);
      if (v121 <= 1)
        v121 = 1;
    }
    else
    {
      HIDWORD(a1[18].f64[0]) = a2;
      HIDWORD(a1[18].f64[1]) += LODWORD(a1[18].f64[1]);
      v121 = 1;
    }
    LODWORD(a1[18].f64[1]) = v121;
  }
}

void sub_223FA637C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(a1);
}

void sub_223FA639C(float64x2_t *a1, int a2, uint64_t a3, float64x2_t a4, float64x2_t a5)
{
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  int32x2_t v12;
  int32x2_t v13;
  int32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float v18;
  float v19;
  float v20;
  double v22;
  int8x16_t v23;
  float64_t v25;
  double v26;
  int8x16_t v27;
  int8x16_t v28;
  double v29;
  float64x2_t v30;
  double v35;
  double v36;
  BOOL v38;
  float64x2_t v39;
  double v40;
  int8x16_t v41;
  float64x2_t v42;
  float64x2_t v43;
  double v44;
  double v45;
  double v46;
  int8x16_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  float64x2_t v52;
  float64x2_t v53;
  BOOL v54;
  float64x2_t v55;
  int8x16_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  uint64_t v62;
  int8x16_t v66;
  double v68;
  double v69;
  BOOL v70;
  double v71;
  unint64_t v72;
  BOOL v73;
  double v74;
  double v75;
  double v77;
  double v79;
  double v81;
  float64x2_t v83;
  double v85;
  float64x2_t v86;
  double v88;
  double v93;
  float64x2_t v97;
  float64x2_t v101;
  int8x16_t v102;
  int32x2_t v103;
  int32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x2_t v109;
  int32x2_t v110;
  float32x2_t v111;
  float32x2_t v112;
  int v113;
  float64x2_t v114;
  float32x2_t v115;
  float64x2_t v116;
  uint64_t v117;
  float64x2_t v118;
  double v119;
  float64x2_t v120;
  double v121;
  float64x2_t v122;
  float64_t v123;
  int8x16_t v124;
  double v125;
  int8x16_t v126;
  unint64_t v127;

  v12.i32[0] = LODWORD(a1[18].f64[1]);
  v12.i32[1] = *(_DWORD *)(a3 + 296);
  v13.i32[0] = HIDWORD(a1[18].f64[1]);
  v13.i32[1] = *(_DWORD *)(a3 + 300);
  v14 = (int32x2_t)vmin_u32((uint32x2_t)vmax_s32(vadd_s32(v12, v13), (int32x2_t)0x100000001), (uint32x2_t)0x3200000032);
  v13.i32[0] = LODWORD(a1[18].f64[0]);
  v13.i32[1] = *(_DWORD *)(a3 + 288);
  v15 = (float32x2_t)vdup_n_s32(0x3C23D70Au);
  v16 = vdiv_f32(vcvt_f32_s32(v14), (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v15, (float32x2_t)v13), (int8x8_t)v15, (int8x8_t)v13));
  v17 = vmul_n_f32(v16, 1.0 / sqrtf(vmla_lane_f32(vmul_f32(v16, v16), (float32x2_t)vdup_lane_s32((int32x2_t)v16, 1), v16, 1).f32[0]));
  v18 = 0.0;
  v19 = v17.f32[1] + (float)(v17.f32[0] + 0.0);
  v20 = fabsf(v19);
  if (v19 != 0.0 && v20 > 0.000001)
    v18 = (float)((float)(*(float *)(a3 + 288) * v17.f32[1]) + (float)((float)(*(float *)a1[18].f64 * v17.f32[0]) + 0.0))
        / v19;
  *(float *)a1[18].f64 = v18;
  v22 = a1[7].f64[0];
  v23 = (int8x16_t)a1[6];
  a4.f64[0] = a1[5].f64[0];
  _Q2 = (int8x16_t)a1[4];
  *(_QWORD *)&v25 = vextq_s8(_Q2, _Q2, 8uLL).u64[0];
  v125 = v22;
  v124 = v23;
  v127 = *(_QWORD *)&a4.f64[0];
  v126 = _Q2;
  v26 = *(double *)(a3 + 112);
  v27 = *(int8x16_t *)(a3 + 96);
  a5.f64[0] = *(float64_t *)(a3 + 80);
  v28 = *(int8x16_t *)(a3 + 64);
  *(_QWORD *)&v29 = vextq_s8(v28, v28, 8uLL).u64[0];
  v30 = vcvtq_f64_f32(v17);
  v120 = (float64x2_t)v23;
  v121 = v22;
  _D4 = _Q2.i64[1];
  _Q20 = vmulq_f64((float64x2_t)_Q2, (float64x2_t)_Q2);
  __asm { FMLA            D20, D4, V2.D[1] }
  v35 = _Q20.f64[0] + a4.f64[0] * a4.f64[0];
  *(_QWORD *)&v6.f64[0] = _Q2.i64[0];
  v36 = v25;
  _Q20.f64[0] = a4.f64[0];
  if (v35 != 1.0)
  {
    _Q20.f64[0] = v35 + -1.0;
    if (v35 < 1.0)
      _Q20.f64[0] = 1.0 - v35;
    v38 = _Q20.f64[0] > 0.00000001;
    _Q20.f64[0] = 1.0 / sqrt(v35);
    *(_QWORD *)&v39.f64[0] = _Q2.i64[0];
    v39.f64[1] = v25;
    *(_QWORD *)&v40 = *(_OWORD *)&vmulq_f64(a4, _Q20);
    v41 = (int8x16_t)vmulq_n_f64(v39, _Q20.f64[0]);
    *(_QWORD *)&v36 = vextq_s8(v41, v41, 8uLL).u64[0];
    if (v38)
      v6.f64[0] = *(double *)v41.i64;
    else
      v6.f64[0] = *(double *)_Q2.i64;
    if (v38)
    {
      _Q20.f64[0] = v40;
    }
    else
    {
      v36 = v25;
      _Q20.f64[0] = a4.f64[0];
    }
  }
  *(_QWORD *)&v42.f64[0] = v28.i64[0];
  v42.f64[1] = v29;
  v43 = vmulq_f64(v42, v42);
  v43.f64[0] = v43.f64[0] + v29 * v29 + a5.f64[0] * a5.f64[0];
  *(_QWORD *)&v7.f64[0] = v28.i64[0];
  v44 = v29;
  v45 = a5.f64[0];
  if (v43.f64[0] != 1.0)
  {
    v5.f64[0] = v43.f64[0] + -1.0;
    if (v43.f64[0] < 1.0)
      v5.f64[0] = 1.0 - v43.f64[0];
    v54 = v5.f64[0] > 0.00000001;
    v5.f64[0] = 1.0 / sqrt(v43.f64[0]);
    *(_QWORD *)&v55.f64[0] = v28.i64[0];
    v55.f64[1] = v29;
    *(_QWORD *)&v45 = *(_OWORD *)&vmulq_f64(a5, v5);
    v56 = (int8x16_t)vmulq_n_f64(v55, v5.f64[0]);
    v43 = (float64x2_t)vextq_s8(v56, v56, 8uLL);
    if (v54)
      v7.f64[0] = *(double *)v56.i64;
    else
      v7.f64[0] = *(double *)v28.i64;
    if (v54)
      v44 = v43.f64[0];
    else
      v44 = v29;
    if (!v54)
      v45 = a5.f64[0];
    v46 = 0.0;
    v43.f64[0] = v30.f64[1] + v30.f64[0] + 0.0;
    if (v43.f64[0] != 0.0)
      goto LABEL_18;
LABEL_31:
    v47.i64[0] = 0;
    v48 = 0.0;
    v8.f64[0] = 0.0;
    goto LABEL_32;
  }
  v46 = 0.0;
  v43.f64[0] = v30.f64[1] + v30.f64[0] + 0.0;
  if (v43.f64[0] == 0.0)
    goto LABEL_31;
LABEL_18:
  v47.i64[0] = 0;
  v48 = 0.0;
  v8.f64[0] = 0.0;
  if (fabs(v43.f64[0]) > 0.00000001)
  {
    v49 = *(double *)vextq_s8(v23, v23, 8uLL).i64;
    v50 = vmulq_f64((float64x2_t)v23, v6).f64[0];
    v51 = *(double *)vextq_s8(v27, v27, 8uLL).i64;
    v27 = (int8x16_t)vmulq_f64((float64x2_t)v27, v7);
    v46 = (0.0
         - v30.f64[0] * (v50 + v49 * v36 + v22 * _Q20.f64[0])
         - v30.f64[1] * (*(double *)v27.i64 + v51 * v44 + v26 * v45))
        / v43.f64[0];
    *(_QWORD *)&v52.f64[0] = _Q2.i64[0];
    v52.f64[1] = v25;
    v53 = vmlaq_n_f64((float64x2_t)0, v52, v30.f64[0]);
    *(_QWORD *)&v52.f64[0] = v28.i64[0];
    v52.f64[1] = v29;
    v47 = (int8x16_t)vdivq_f64(vmlaq_laneq_f64(v53, v52, v30, 1), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v43.f64[0], 0));
    *(_QWORD *)&v48 = vextq_s8(v47, v47, 8uLL).u64[0];
    v8 = vdivq_f64(vmlaq_laneq_f64(vmlaq_f64((float64x2_t)0, v30, a4), a5, v30, 1), v43);
  }
LABEL_32:
  *(double *)&v47.i64[1] = v48;
  v57 = vmulq_f64((float64x2_t)v47, (float64x2_t)v47);
  v57.f64[0] = 1.0 / sqrt(v57.f64[0] + v48 * v48 + v8.f64[0] * v8.f64[0]);
  v58 = vmulq_n_f64((float64x2_t)v47, v57.f64[0]);
  v59 = vmulq_f64(v8, v57);
  v122 = v58;
  v123 = v59.f64[0];
  v60 = vabsq_f64(v58);
  v61 = vabsq_f64(v59);
  v62 = v60.f64[1] > v60.f64[0];
  if (v60.f64[1] > v60.f64[0])
    v60.f64[0] = v60.f64[1];
  if (v61.f64[0] > v60.f64[0])
    v62 = 2;
  v114 = 0uLL;
  v115 = 0;
  v114.f64[v62] = -v46 / v122.f64[v62];
  v61.f64[0] = v121;
  *(float32x2_t *)v27.i8 = v115;
  _Q19 = vsubq_f64(v120, v114);
  _Q20 = vmulq_f64(_Q19, v58);
  _D21 = v58.f64[1];
  __asm { FMLA            D20, D21, V19.D[1] }
  _Q20.f64[0] = vmlad_n_f64(_Q20.f64[0], v59.f64[0], vsubq_f64(v61, (float64x2_t)v27).f64[0]);
  *(_QWORD *)&v61.f64[0] = *(_OWORD *)&vmlsq_f64(v61, v59, _Q20);
  v66 = (int8x16_t)vmlsq_lane_f64(v120, v58, _Q20.f64[0], 0);
  v120 = (float64x2_t)v66;
  v121 = v61.f64[0];
  _NF = *(double *)_Q2.i64 < *(double *)v28.i64;
  if (*(double *)_Q2.i64 != *(double *)v28.i64)
  {
    v68 = *(double *)_Q2.i64 - *(double *)v28.i64;
    v69 = *(double *)v28.i64 - *(double *)_Q2.i64;
    if (!_NF)
      v69 = v68;
    v28.i64[0] = 0x3E45798EE2308C3ALL;
    if (v69 > 0.00000001)
      goto LABEL_48;
  }
  v70 = *(double *)&_Q2.i64[1] < v29;
  if (*(double *)&_Q2.i64[1] != v29)
  {
    *(double *)_Q2.i64 = *(double *)&_Q2.i64[1] - v29;
    v71 = v29 - *(double *)&_Q2.i64[1];
    if (v70)
      *(double *)_Q2.i64 = v71;
    if (*(double *)_Q2.i64 > 0.00000001)
      goto LABEL_48;
  }
  v72 = vextq_s8(v66, v66, 8uLL).u64[0];
  v73 = a4.f64[0] < a5.f64[0];
  if (a4.f64[0] != a5.f64[0])
  {
    v74 = a4.f64[0] - a5.f64[0];
    v75 = a5.f64[0] - a4.f64[0];
    if (!v73)
      v75 = v74;
    if (v75 > 0.00000001)
    {
LABEL_48:
      sub_223FC3A04((uint64_t)&v126, &v122, (uint64_t)&v114, (float64x2_t)v28);
      _D2 = v117;
      v77 = a1[1].f64[0];
      _Q7 = *a1;
      v79 = a1[3].f64[0];
      _Q17 = a1[2];
      v81 = a1[5].f64[0];
      _Q19 = a1[4];
      v83 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v114, a1->f64[0]), v116, *a1, 1), v118, v77);
      __asm { FMLA            D21, D2, V7.D[1] }
      v85 = _D21 + v119 * v77;
      v86 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v114, _Q17.f64[0]), v116, _Q17, 1), v118, v79);
      __asm { FMLA            D21, D2, V17.D[1] }
      v88 = _D21 + v119 * v79;
      _Q1 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v114, _Q19.f64[0]), v116, _Q19, 1), v118, v81);
      __asm { FMLA            D0, D2, V19.D[1] }
      _Q0.f64[0] = _Q0.f64[0] + v119 * v81;
      *a1 = v83;
      a1[1].f64[0] = v85;
      a1[2] = v86;
      a1[3].f64[0] = v88;
      a1[4] = _Q1;
      a1[5].f64[0] = _Q0.f64[0];
      _D3 = _Q1.f64[1];
      __asm { FMLA            D2, D3, V1.D[1] }
      _Q0.f64[0] = sqrt(_D2 + _Q0.f64[0] * _Q0.f64[0]);
      if (_Q0.f64[0] != 1.0)
      {
        v93 = _Q0.f64[0] <= 1.0 ? 1.0 - _Q0.f64[0] : _Q0.f64[0] + -1.0;
        if (v93 > 0.00000001)
        {
          _Q1.f64[0] = a1[1].f64[0];
          _Q2 = *a1;
          _Q3 = vmulq_f64(_Q2, _Q2);
          _D4 = a1->f64[1];
          __asm { FMLA            D3, D4, V2.D[1] }
          _Q3.f64[0] = sqrt(_Q3.f64[0] + _Q1.f64[0] * _Q1.f64[0]);
          v97 = vdivq_f64(_Q1, _Q3);
          *a1 = vdivq_f64(*a1, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0));
          a1[1].f64[0] = v97.f64[0];
          v97.f64[0] = a1[3].f64[0];
          _Q2 = a1[2];
          _Q3 = vmulq_f64(_Q2, _Q2);
          _D4 = a1[2].f64[1];
          __asm { FMLA            D3, D4, V2.D[1] }
          _Q3.f64[0] = sqrt(_Q3.f64[0] + v97.f64[0] * v97.f64[0]);
          v101 = vdivq_f64(v97, _Q3);
          a1[2] = vdivq_f64(_Q2, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0));
          a1[3].f64[0] = v101.f64[0];
          v101.f64[0] = a1[5].f64[0];
          a1[4] = vdivq_f64(a1[4], (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q0.f64[0], 0));
          *(_QWORD *)&a1[5].f64[0] = *(_OWORD *)&vdivq_f64(v101, _Q0);
        }
      }
      v61.f64[0] = v121;
      v66 = (int8x16_t)v120;
      v72 = vextq_s8(v66, v66, 8uLL).u64[0];
    }
  }
  a1[7].f64[0] = v61.f64[0];
  v66.i64[1] = v72;
  a1[6] = (float64x2_t)v66;
  v102 = (int8x16_t)a1[7];
  v103 = (int32x2_t)vcvt_f32_f64(a1[2]);
  v104 = (int32x2_t)vcvt_f32_f64(*a1);
  v105 = vcvt_f32_f64(*(float64x2_t *)(a3 + 32));
  v106 = vcvt_f32_f64(*(float64x2_t *)a3);
  v107 = (float32x2_t)vzip1_s32(v104, v103);
  v108 = (float32x2_t)vzip2_s32(v104, v103);
  v109 = (float32x2_t)vzip2q_s32((int32x4_t)vcvt_hight_f32_f64(*(int32x2_t *)&a1[1].f64[0], a1[1]), (int32x4_t)vcvt_hight_f32_f64(*(int32x2_t *)&a1[3].f64[0], a1[3])).u64[0];
  v110 = (int32x2_t)vmla_n_f32(vmla_lane_f32(vmul_n_f32(v107, v105.f32[0]), v108, v105, 1), v109, vcvt_f32_f64(*(float64x2_t *)(a3 + 48)).f32[0]);
  v111 = vsub_f32(vcvt_f32_f64(*(float64x2_t *)(a3 + 96)), vcvt_f32_f64((float64x2_t)v66));
  v112 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v107, v111.f32[0]), v108, v111, 1), v109, vsub_f32(vcvt_f32_f64(*(float64x2_t *)(a3 + 112)), vcvt_f32_f64((float64x2_t)v102)).f32[0]);
  *(float32x2_t *)&v114.f64[0] = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v107, v106.f32[0]), v108, v106, 1), v109, vcvt_f32_f64(*(float64x2_t *)(a3 + 16)).f32[0]);
  *(int32x2_t *)&v114.f64[1] = v110;
  v115 = v112;
  *(float32x2_t *)v102.i8 = vmul_f32((float32x2_t)vrev64_s32(v110), *(float32x2_t *)&v114.f64[0]);
  *(float32x2_t *)v102.i8 = vsub_f32(*(float32x2_t *)v102.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v102.i8, 1));
  LODWORD(v116.f64[0]) = v102.i32[0];
  sub_223F81470((uint64_t)&a1[8], a2, a3 + 128, (float32x2_t *)&v114, v102);
  v113 = *(_DWORD *)(a3 + 296) + *(_DWORD *)(a3 + 300);
  if (HIDWORD(a1[18].f64[0]) == a2)
  {
    if (SLODWORD(a1[18].f64[1]) > v113)
      v113 = LODWORD(a1[18].f64[1]);
    LODWORD(a1[18].f64[1]) = v113;
  }
  else
  {
    HIDWORD(a1[18].f64[0]) = a2;
    HIDWORD(a1[18].f64[1]) += LODWORD(a1[18].f64[1]);
    LODWORD(a1[18].f64[1]) = v113;
  }
}

void sub_223FA6A08(uint64_t a1@<X0>, _QWORD *a2@<X1>, char a3@<W2>, _BYTE *a4@<X3>, unsigned __int8 a5@<W4>, void **a6@<X8>)
{
  uint64_t v8;
  uint64_t v11;
  __int32 v12;
  float32x2_t **v13;
  float32x2_t *v14;
  float32x2_t *v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  uint64_t v20;
  int8x16_t *v21;
  __int32 v22;
  __int32 v23;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x2_t v30;
  int8x16_t v31;
  unint64_t v32;
  float v33;
  float32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x4_t v37;
  _BYTE *v38;
  _QWORD *v39;
  int8x16_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int8x16_t *v44;
  char *v45;
  int8x16_t *v46;
  int8x16_t v47;
  float v48;
  float v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  float32x4_t v53;
  int8x16_t *v54;
  unint64_t v55;
  int8x16_t *v56;
  int8x16_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  _BYTE *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _BYTE *v78;
  _QWORD *v79;
  int64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  BOOL v86;
  BOOL v87;
  BOOL v88;
  BOOL v89;
  BOOL v90;
  BOOL v91;
  BOOL v92;
  BOOL v93;
  uint64_t v95;
  uint64_t v96;
  const double *i64;
  double *v98;
  uint64_t v99;
  const double *v100;
  double *v101;
  BOOL v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  _OWORD *v107;
  char *v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  int8x16_t *v113;
  float32x2_t v114;
  float32x2_t v115;
  float32x2_t v116;
  float32x2_t v117;
  unint64_t v118;
  __int32 v119;
  float v120;
  int8x16_t v121;
  uint64_t v122;
  int8x16_t *v123;
  int8x16_t v124;
  _QWORD *v125;
  unsigned int v126;
  unsigned int v127;
  __int32 v128;
  __int32 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  float64x2x2_t v134;
  float64x2x2_t v135;

  LOBYTE(v8) = a3;
  v11 = *(unsigned int *)(a1 + 272);
  v12 = *(_DWORD *)(a1 + 136);
  v13 = *(float32x2_t ***)(a1 + 168);
  v15 = *v13;
  v14 = v13[1];
  if (*v13 != v14)
  {
    while (!v15[28].i8[0])
    {
      v15 += 29;
      if (v15 == v14)
        goto LABEL_16;
    }
  }
LABEL_15:
  if (v15 == v14)
    goto LABEL_16;
  v16 = v15[3];
  if (*(_QWORD *)&v16 && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v16 + 48))(v16)
    || (v17 = v15[5], *(_QWORD *)&v17) && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v17 + 48))(v17)
    || (v18 = v15[7], *(_QWORD *)&v18) && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v18 + 48))(v18)
    || (v19 = v15[9], *(_QWORD *)&v19) && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v19 + 48))(v19))
  {
    while (1)
    {
      v15 += 29;
      if (v15 == v14)
        break;
      if (v15[28].i8[0])
        goto LABEL_15;
    }
LABEL_16:
    v15 = v14;
  }
  v20 = a5;
  if (a5)
    *a4 = 0;
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (v15 == v14)
    return;
  v21 = 0;
  v133 = 0;
  v8 = v8;
LABEL_21:
  v22 = v15[26].i32[0];
  v23 = v15[25].i32[0];
  if (v15[25].i32[1] + v22 >= v12)
  {
    v25 = v15[11];
    v26 = vmul_f32(vadd_f32(v15[10], v25), (float32x2_t)0x3F0000003F000000);
    v27 = vsub_f32(v26, v25);
    *(float32x2_t *)v28.f32 = vadd_f32(v26, v27);
    v29.i64[0] = v28.i64[0];
    v29.i64[1] = v28.i64[0];
    v30 = vsub_f32(v26, v27);
    *(float32x2_t *)v31.i8 = v30;
    v31.u64[1] = (unint64_t)v30;
    v32 = (unint64_t)a6[2];
    v132 = v20;
    if ((unint64_t)v21 < v32)
    {
      if (v30.f32[0] >= v28.f32[0])
        v33 = v28.f32[0];
      else
        v33 = v30.f32[0];
      if (v28.f32[0] >= v30.f32[0])
        v30.f32[0] = v28.f32[0];
      v34.i64[0] = v29.i64[0];
      v34.i64[1] = __PAIR64__(v28.u32[1], v30.u32[0]);
      v28.i64[1] = v29.i64[0];
      v28.f32[0] = v33;
      v35.i64[0] = __PAIR64__(v28.u32[1], LODWORD(v33));
      v35.i64[1] = __PAIR64__(v28.u32[1], v30.u32[0]);
      v36 = vbslq_s8((int8x16_t)vcgtq_f32(v28, v34), v29, v35);
      v37.i64[0] = v31.i64[0];
      v37.i64[1] = v36.i64[1];
      v35.i64[0] = v36.i64[0];
      v35.i64[1] = v31.i64[0];
      *v21++ = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v35, v37), v31, v36);
      a6[1] = v21;
      if (!v8)
        goto LABEL_134;
LABEL_70:
      if ((_DWORD)v11 != v23 || v22 >= v12)
        goto LABEL_134;
      v68 = (char *)a2[1];
      v67 = a2[2];
      if ((unint64_t)v68 < v67)
      {
        *(_QWORD *)v68 = v133;
        v69 = (uint64_t)(v68 + 8);
LABEL_133:
        a2[1] = v69;
        v20 = v132;
LABEL_134:
        ++v133;
        goto LABEL_135;
      }
      v131 = v8;
      v127 = v11;
      v129 = v12;
      v70 = a4;
      v125 = a2;
      v71 = (char *)*a2;
      v72 = (uint64_t)&v68[-*a2];
      v73 = v72 >> 3;
      v74 = (v72 >> 3) + 1;
      if (v74 >> 61)
        sub_22367C394();
      v75 = v67 - (_QWORD)v71;
      if (v75 >> 2 > v74)
        v74 = v75 >> 2;
      if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
        v76 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v76 = v74;
      v123 = v21;
      if (v76)
      {
        if (v76 >> 61)
          sub_223174E94();
        v77 = v76;
        v78 = operator new(8 * v76);
        v76 = v77;
        v79 = &v78[8 * v73];
        *v79 = v133;
        v69 = (uint64_t)(v79 + 1);
        v80 = v68 - v71;
        if (v68 != v71)
          goto LABEL_83;
      }
      else
      {
        v78 = 0;
        v79 = (_QWORD *)(8 * v73);
        *(_QWORD *)(8 * v73) = v133;
        v69 = 8 * v73 + 8;
        v80 = v68 - v71;
        if (v68 != v71)
        {
LABEL_83:
          v81 = v80 - 8;
          if (v81 >= 0x58)
          {
            v103 = v68 - &v78[v72];
            a4 = v70;
            v11 = v127;
            v12 = v129;
            if (v103 >= 0x20)
            {
              v104 = (v81 >> 3) + 1;
              v105 = 8 * (v104 & 0x3FFFFFFFFFFFFFFCLL);
              v106 = &v68[-v105];
              v79 = (_QWORD *)((char *)v79 - v105);
              v107 = &v78[8 * v73 - 16];
              v108 = v68 - 16;
              v109 = v104 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v110 = *(_OWORD *)v108;
                *(v107 - 1) = *((_OWORD *)v108 - 1);
                *v107 = v110;
                v107 -= 2;
                v108 -= 32;
                v109 -= 4;
              }
              while (v109);
              v68 = v106;
              if (v104 == (v104 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_130;
            }
          }
          else
          {
            a4 = v70;
            v11 = v127;
            v12 = v129;
          }
          do
          {
            v111 = *((_QWORD *)v68 - 1);
            v68 -= 8;
            *--v79 = v111;
          }
          while (v68 != v71);
LABEL_130:
          a2 = v125;
          *v125 = v79;
          v125[1] = v69;
          v125[2] = &v78[8 * v76];
          if (v71)
            operator delete(v71);
          v8 = v131;
          v21 = v123;
          goto LABEL_133;
        }
      }
      a4 = v70;
      v11 = v127;
      v12 = v129;
      goto LABEL_130;
    }
    v130 = v8;
    v126 = v11;
    v128 = v12;
    v38 = a4;
    v39 = a2;
    v40 = (int8x16_t *)*a6;
    v41 = (char *)v21 - (_BYTE *)*a6;
    v42 = (v41 >> 4) + 1;
    if (v42 >> 60)
      sub_22324A284();
    v120 = v30.f32[0];
    v121 = v29;
    v122 = v28.i64[0];
    v124 = v31;
    v119 = v15[25].i32[0];
    v43 = v32 - (_QWORD)v40;
    if (v43 >> 3 > v42)
      v42 = v43 >> 3;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
      v42 = 0xFFFFFFFFFFFFFFFLL;
    if (v42 >> 60)
      sub_223174E94();
    v44 = v21;
    v118 = v42;
    v45 = (char *)operator new(16 * v42);
    v46 = (int8x16_t *)&v45[16 * (v41 >> 4)];
    v47.i32[1] = HIDWORD(v122);
    v48 = v120;
    if (v120 >= *(float *)&v122)
      v49 = *(float *)&v122;
    else
      v49 = v120;
    if (v120 <= *(float *)&v122)
      v48 = *(float *)&v122;
    v50.i64[0] = v121.i64[0];
    v50.i64[1] = __PAIR64__(HIDWORD(v122), LODWORD(v48));
    v51.i64[1] = v121.i64[1];
    v51.i64[0] = __PAIR64__(HIDWORD(v122), LODWORD(v49));
    *(float *)v47.i32 = v49;
    v47.i64[1] = __PAIR64__(HIDWORD(v122), LODWORD(v48));
    v52 = vbslq_s8((int8x16_t)vcgtq_f32(v51, v50), v121, v47);
    v53.i64[0] = v124.i64[0];
    v53.i64[1] = v52.i64[1];
    v50.i64[0] = v52.i64[0];
    v50.i64[1] = v124.i64[0];
    *v46 = vbslq_s8((int8x16_t)vcgtq_f32(v50, v53), v124, v52);
    v54 = v46 + 1;
    if (v44 == v40)
    {
      v57 = (int8x16_t *)&v45[16 * (v41 >> 4)];
      a2 = v39;
      a4 = v38;
      v11 = v126;
      v12 = v128;
      v58 = v118;
      goto LABEL_67;
    }
    v55 = (char *)v44 - (char *)v40 - 16;
    if (v55 < 0x3F0)
      goto LABEL_49;
    v59 = ((char *)&v44[-1] - (char *)v40) & 0xFFFFFFFFFFFFFFF0;
    v60 = (unint64_t)&v44[-1] - v59;
    v61 = (unint64_t)&v44[-1].u64[1];
    v62 = (unint64_t)&v44[-1].u64[1] - v59;
    if (&v45[v41 - 16 - v59] > &v45[v41 - 16]
      || &v45[v41 - 8 - v59] > &v45[v41 - 8]
      || v60 > (unint64_t)&v44[-1]
      || v62 > v61)
    {
      v56 = v44;
      goto LABEL_63;
    }
    v82 = v41 - v59;
    v83 = (unint64_t)&v45[v82 - 16];
    v84 = &v45[v41 - 8];
    v85 = &v45[v82 - 8];
    v86 = v83 >= v61 || v60 >= (unint64_t)v84;
    v87 = !v86;
    v88 = v83 >= (unint64_t)v44 || v62 >= (unint64_t)v84;
    v89 = !v88;
    v90 = (unint64_t)v85 >= v61 || v60 >= (unint64_t)v46;
    v91 = !v90;
    v92 = v85 >= (char *)v44 || v62 >= (unint64_t)v46;
    v93 = !v92;
    if (v85 < v84 && v83 < (unint64_t)v46)
    {
LABEL_49:
      v56 = v44;
LABEL_63:
      v57 = (int8x16_t *)&v45[16 * (v41 >> 4)];
      a2 = v39;
LABEL_64:
      a4 = v38;
LABEL_65:
      v11 = v126;
      v12 = v128;
      v58 = v118;
      goto LABEL_66;
    }
    a2 = v39;
    if (v87)
    {
      v56 = v44;
      v57 = v46;
      goto LABEL_64;
    }
    a4 = v38;
    if (v89)
    {
      v56 = v44;
      v57 = v46;
      goto LABEL_65;
    }
    if (v91)
    {
      v56 = v44;
      v57 = v46;
      v12 = v128;
    }
    else
    {
      v12 = v128;
      if (!v93)
      {
        v95 = (v55 >> 4) + 1;
        v96 = 16 * (v95 & 0x1FFFFFFFFFFFFFFCLL);
        v56 = &v44[v96 / 0xFFFFFFFFFFFFFFF0];
        v57 = &v46[v96 / 0xFFFFFFFFFFFFFFF0];
        i64 = (const double *)v44[-2].i64;
        v98 = (double *)v46[-2].i64;
        v99 = v95 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v134 = vld2q_f64(i64);
          v100 = i64 - 4;
          v135 = vld2q_f64(v100);
          vst2q_f64(v98, v134);
          v101 = v98 - 4;
          vst2q_f64(v101, v135);
          v98 -= 8;
          i64 -= 8;
          v99 -= 4;
        }
        while (v99);
        v102 = v95 == (v95 & 0x1FFFFFFFFFFFFFFCLL);
        v11 = v126;
        v58 = v118;
        if (v102)
        {
LABEL_67:
          *a6 = v57;
          a6[1] = v54;
          a6[2] = &v45[16 * v58];
          if (v40)
            operator delete(v40);
          v21 = v54;
          v8 = v130;
          v20 = v132;
          v23 = v119;
          a6[1] = v21;
          if (!v130)
            goto LABEL_134;
          goto LABEL_70;
        }
        do
        {
LABEL_66:
          v66 = v56[-1].i64[0];
          --v56;
          v57[-1].i64[0] = v66;
          --v57;
          v57->i64[1] = v56->i64[1];
        }
        while (v56 != v40);
        goto LABEL_67;
      }
      v56 = v44;
      v57 = v46;
    }
    v11 = v126;
    v58 = v118;
    goto LABEL_66;
  }
  if (v20)
  {
    if ((_DWORD)v11 == v23 && v22 >= v12)
      *a4 = 1;
  }
LABEL_135:
  while (1)
  {
    v15 += 29;
    if (v15 == v14)
      break;
    if (v15[28].i8[0])
    {
      while (v15 != v14)
      {
        v112 = v11;
        v113 = v21;
        v114 = v15[3];
        if (!*(_QWORD *)&v114 || !(*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v114 + 48))(v114))
        {
          v115 = v15[5];
          if (!*(_QWORD *)&v115 || !(*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v115 + 48))(v115))
          {
            v116 = v15[7];
            if (!*(_QWORD *)&v116 || !(*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v116 + 48))(v116))
            {
              v117 = v15[9];
              if (!*(_QWORD *)&v117 || !(*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v117 + 48))(v117))
              {
                v21 = v113;
                v11 = v112;
                if (v15 != v14)
                  goto LABEL_21;
                return;
              }
            }
          }
        }
        v15 += 29;
        if (v15 == v14)
          return;
        v21 = v113;
        v11 = v112;
        while (!v15[28].i8[0])
        {
          v15 += 29;
          if (v15 == v14)
            return;
        }
      }
      return;
    }
  }
}

void sub_223FA714C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223FA717C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float64x2_t *a3@<X2>, uint64_t a4@<X8>)
{
  double v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  uint64_t result;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  _OWORD v29[8];
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;

  *(_QWORD *)&v7 = *(_OWORD *)&vnegq_f64(*a3);
  v8 = *(float64x2_t *)(a2 + 16);
  v10 = *(float64x2_t *)(a2 + 32);
  v9 = *(float64x2_t *)(a2 + 48);
  v12 = *(float64x2_t *)(a2 + 64);
  v11 = *(float64x2_t *)(a2 + 80);
  v14 = *(float64x2_t *)(a2 + 96);
  v13 = *(float64x2_t *)(a2 + 112);
  v15 = vmulq_f64(*(float64x2_t *)a2, (float64x2_t)0);
  v16 = vmlaq_f64(vmlaq_f64(vmlaq_f64(*(float64x2_t *)a2, (float64x2_t)0, v10), (float64x2_t)0, v12), (float64x2_t)0, v14);
  v17 = vmulq_f64(v8, (float64x2_t)0);
  v18 = vmlaq_f64(vmlaq_f64(vaddq_f64(v10, v15), (float64x2_t)0, v12), (float64x2_t)0, v14);
  v19 = vmlaq_f64(vaddq_f64(v12, vmlaq_f64(v15, (float64x2_t)0, v10)), (float64x2_t)0, v14);
  v20 = vaddq_f64(v14, vmlaq_f64(vmlsq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a2, v7), v10, *a3, 1), (float64x2_t)0, v12));
  v21 = vmlsq_laneq_f64(vmulq_n_f64(v8, v7), v9, *a3, 1);
  v29[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(v8, (float64x2_t)0, v9), (float64x2_t)0, v11), (float64x2_t)0, v13);
  v29[0] = v16;
  v29[3] = vmlaq_f64(vmlaq_f64(vaddq_f64(v9, v17), (float64x2_t)0, v11), (float64x2_t)0, v13);
  v29[2] = v18;
  v29[5] = vmlaq_f64(vaddq_f64(v11, vmlaq_f64(v17, (float64x2_t)0, v9)), (float64x2_t)0, v13);
  v29[4] = v19;
  v29[7] = vaddq_f64(v13, vmlaq_f64(v21, (float64x2_t)0, v11));
  v29[6] = v20;
  v30 = *(_DWORD *)(a2 + 288);
  v35 = 0;
  v36 = 0;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  v34 = 0;
  v28 = 1;
  v25 = *(_QWORD *)(a2 + 128);
  v26 = *(_DWORD *)(a2 + 136);
  v27 = a1;
  sub_223FA5A80(a4, (uint64_t)v29, (uint64_t)&v27, (uint64_t)&v25);
  sub_223FA639C((float64x2_t *)a4, a1, a2, v22, v23);
  result = sub_223F81B08(a4 + 128, a1);
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a4 + 292) == (_DWORD)a1)
    {
      *(_DWORD *)(a4 + 296) &= ~(*(int *)(a4 + 296) >> 31);
    }
    else
    {
      *(_DWORD *)(a4 + 292) = a1;
      *(_DWORD *)(a4 + 300) += *(_DWORD *)(a4 + 296);
      *(_DWORD *)(a4 + 296) = 0;
    }
  }
  return result;
}

void sub_223FA730C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223F3A354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FA7320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_223F979A0(v4);
  sub_223F3A354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FA733C(uint64_t a1@<X0>, unint64_t a2@<X1>, float32x2_t *a3@<X2>, unint64_t a4@<X3>, float32x2_t *a5@<X4>, float32x2_t *a6@<X5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  float32x2_t *v12;
  unint64_t v13;
  _BOOL4 v14;
  int8x16_t v15;
  __n128 v16;
  int8x16_t v17;
  int8x16_t v18;
  int32x4_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t *v67;
  uint64_t *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  char *v80;
  int64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  char *v89;
  uint64_t v90;
  __int128 v91;
  char *v92;
  char *v93;
  unsigned int *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  size_t v103;
  unint64_t v104;
  _QWORD *v105;
  char *v106;
  int8x16_t v107;
  int8x16_t v108;
  uint64_t v109;
  char *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int *v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  char *v128;
  char *v129;
  _QWORD *v130;
  unint64_t v131;
  float32x2_t v132;
  uint64_t v133;
  __int128 v134;
  _QWORD *v135;
  size_t v136;
  unint64_t v137;
  _QWORD *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  unint64_t v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  float32x4_t v155;
  float32x2_t v156;
  BOOL v157;
  unsigned int v159;
  float32x2_t v160;
  float32x2_t v161;
  float32x2_t *v162;
  float32x2_t v163;
  float32x2_t *v164;
  float32x2_t *v165;
  float32x2_t *v166;
  _BYTE *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  _BYTE *v174;
  char *v175;
  int64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  int8x16_t *v181;
  int8x16_t *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  unint64_t v186;
  unsigned int *v187;
  unsigned int v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  char *v200;
  int64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  int64_t v208;
  char *v209;
  int64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  char *v215;
  char *v216;
  int64_t v217;
  char *v218;
  int64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  char *v224;
  char *v225;
  int64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  int8x16_t *v231;
  int8x16_t *v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  int8x16_t *v239;
  int8x16_t *v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  int8x16_t *v247;
  int8x16_t *v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  char *v253;
  char *v254;
  int64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  char *v260;
  char *v261;
  int64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  int8x16_t *v267;
  int8x16_t *v268;
  uint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  _QWORD *v272;
  void *v273;
  char *v274;
  char *v275;
  void *v276;
  void *v277;
  uint64_t v278;
  uint64_t v279;
  void *v280;
  void *v281;
  void *v282;
  char *v283;
  char *v284;
  void *v285;
  void *v286;
  char *i;
  void *v288;
  int v289;
  unint64_t v290;
  _QWORD *v291;
  _QWORD *v292;
  _QWORD *v293;
  char *v294;
  unsigned int *v295;
  int v296;
  unint64_t v297;
  uint8x8_t v298;
  uint64_t v299;
  uint64_t v300;
  __int128 **v301;
  __int128 *v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  _QWORD *v306;
  char *v307;
  unint64_t v308;
  _QWORD *v309;
  char *v310;
  int8x16_t v311;
  float32x2_t v312;
  float32x2_t v313;
  uint64_t v314;
  _QWORD *v315;
  unint64_t v316;
  unint64_t v317;
  float v318;
  float v319;
  float32x2_t *v320;
  float32x2_t v321;
  float32x2_t v322;
  float32x2_t v323;
  char *v324;
  uint64_t v325;
  char *v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  unint64_t v330;
  _BYTE *v331;
  char *v332;
  int64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  char *v337;
  int8x16_t *v338;
  int8x16_t *v339;
  uint64_t v340;
  uint64_t v341;
  char *v342;
  unsigned int *v343;
  unint64_t v344;
  unsigned int v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  char *v349;
  uint64_t v350;
  char *v351;
  char *v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  unint64_t v356;
  unint64_t v357;
  _BYTE *v358;
  unint64_t *v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  char *v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  unint64_t v367;
  unint64_t v368;
  _BYTE *v369;
  unint64_t *v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  char *v375;
  int8x16_t *v376;
  int8x16_t *v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  char *v382;
  int8x16_t *v383;
  int8x16_t *v384;
  uint64_t v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  char *v391;
  uint64_t v392;
  char *v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t v397;
  unint64_t v398;
  _BYTE *v399;
  unint64_t *v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  char *v404;
  uint64_t v405;
  unint64_t v406;
  uint64_t v407;
  unint64_t v408;
  _BYTE *v409;
  unint64_t *v410;
  int64_t v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t v414;
  char *v415;
  int8x16_t *v416;
  int8x16_t *v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  char *v422;
  int8x16_t *v423;
  int8x16_t *v424;
  uint64_t v425;
  unint64_t v426;
  uint64_t v427;
  __int128 *v428;
  __int128 *v429;
  __int128 *v430;
  unint64_t v431;
  unint64_t v432;
  unint64_t v433;
  char *v434;
  char *v435;
  _QWORD *v436;
  unint64_t *v437;
  unint64_t v438;
  float32x2_t v439;
  uint64_t v440;
  __int128 v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  __int128 v445;
  __int128 v446;
  _QWORD *v447;
  _QWORD *v448;
  void *v449;
  char *v450;
  char *v451;
  void *v452;
  void *v453;
  unint64_t v454;
  float32x2_t *v455;
  int8x16_t v457;
  unint64_t v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v463;
  uint64_t v464;
  void *v465;
  __int128 v466;
  void *v467;
  __int128 v468;
  char *v469;
  __int128 v470;
  void *v471;
  unsigned int *v472;
  _BYTE v473[24];
  __int128 v474;
  __int128 v475;
  int v476;
  void *__p[2];
  char *v478;
  void *v479;
  char *v480;
  char *v481;
  __int128 v482;
  __int128 v483;
  int v484;
  char *v485;
  __int128 v486;
  char *v487;
  char *v488;
  char *v489;
  char *v490;
  char *v491;
  unint64_t v492;
  _QWORD *v493;
  unint64_t v494;
  unint64_t v495;

  if (a2 != a4)
  {
    v12 = a3;
    v13 = a2;
    v14 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Vision/ConnSACPlaneDetector.cpp", 254, (uint64_t)"points2d.size() == points3d.size()", 34, (uint64_t)"The number of 2D points and 3D points must be matched.", 54, (void (*)(void **))sub_22457406C);
    a2 = v13;
    a3 = v12;
    if (v14)
      abort();
  }
  v454 = a2;
  v455 = a3;
  sub_223F24E90(a2, a3, (uint64_t)&v471);
  v469 = 0;
  v470 = 0uLL;
  if (a7)
  {
    sub_223FAB7B0((unsigned int **)&v471, a4, a5, a6, (uint64_t *)v473, *(float *)a1, *(float *)(a1 + 4), (float32x4_t)v18, v19);
  }
  else
  {
    v15.i32[0] = *(_DWORD *)(a1 + 4);
    sub_223FAA188((unsigned int **)&v471, a4, (uint64_t)a5, (uint64_t *)v473, *(float *)a1, v15, v16, v17, v18);
  }
  v20 = *(_QWORD *)v473;
  v469 = *(char **)v473;
  v470 = *(_OWORD *)&v473[8];
  v21 = *(char **)&v473[8];
  if (*(_QWORD *)v473 == *(_QWORD *)&v473[8])
  {
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
    if (v21)
      goto LABEL_345;
    goto LABEL_351;
  }
  v467 = 0;
  v468 = 0uLL;
  v22 = *(unsigned __int8 *)(a1 + 8);
  if (v22 == 2)
  {
    v56 = *(float *)(a1 + 16);
    v57 = *(float *)(a1 + 20);
    sub_223FAC870(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)&v473[8] - *(_QWORD *)v473) >> 3), *(uint64_t **)v473, a4, (uint64_t *)a5, (double **)v473, *(float *)(a1 + 12));
    sub_223FAC3D4(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)&v473[8] - *(_QWORD *)v473) >> 3), *(uint64_t *)v473, (uint64_t *)&v482);
    v58 = *(_QWORD *)v473;
    if (*(_QWORD *)v473)
    {
      v59 = *(_QWORD *)&v473[8];
      v60 = *(void **)v473;
      if (*(_QWORD *)&v473[8] != *(_QWORD *)v473)
      {
        do
        {
          v61 = *(void **)(v59 - 32);
          if (v61)
          {
            *(_QWORD *)(v59 - 24) = v61;
            operator delete(v61);
          }
          v62 = *(void **)(v59 - 64);
          if (v62)
          {
            *(_QWORD *)(v59 - 56) = v62;
            operator delete(v62);
          }
          v59 -= 88;
        }
        while (v59 != v58);
        v60 = *(void **)v473;
      }
      *(_QWORD *)&v473[8] = v58;
      operator delete(v60);
    }
    *(_OWORD *)v473 = v482;
    *(_QWORD *)&v473[16] = v483;
    sub_223FAD264((uint64_t **)v473, a4, (float *)a5, a8, v56, v57);
    v278 = *(_QWORD *)v473;
    if (*(_QWORD *)v473)
    {
      v279 = *(_QWORD *)&v473[8];
      v280 = *(void **)v473;
      if (*(_QWORD *)&v473[8] != *(_QWORD *)v473)
      {
        do
        {
          v281 = *(void **)(v279 - 32);
          if (v281)
          {
            *(_QWORD *)(v279 - 24) = v281;
            operator delete(v281);
          }
          v282 = *(void **)(v279 - 64);
          if (v282)
          {
            *(_QWORD *)(v279 - 56) = v282;
            operator delete(v282);
          }
          v279 -= 88;
        }
        while (v279 != v278);
        v280 = *(void **)v473;
      }
      *(_QWORD *)&v473[8] = v278;
      operator delete(v280);
      v283 = (char *)v467;
      if (v467)
        goto LABEL_337;
      goto LABEL_344;
    }
LABEL_336:
    v283 = (char *)v467;
    if (!v467)
      goto LABEL_344;
    goto LABEL_337;
  }
  v463 = *(_QWORD *)v473;
  if (v22 == 1)
  {
    v494 = 0;
    v495 = 0;
    v493 = 0;
    v33 = 0x8E38E38E38E38E39 * (((char *)v472 - (_BYTE *)v471) >> 2);
    if (v472 != v471)
    {
      if ((char *)v472 - (_BYTE *)v471 < 0)
        sub_2233DCD38();
      v34 = (v33 - 1) >> 6;
      v35 = operator new(8 * (v34 + 1));
      v36 = v35;
      v494 = v33;
      v495 = v34 + 1;
      v493 = v35;
      if (v33 >= 0x41)
        v37 = (v33 - 1) >> 6;
      else
        v37 = 0;
      v35[v37] = 0;
      if (v33 >= 0x40)
        bzero(v35, 8 * (v33 >> 6));
      if ((v33 & 0x3F) != 0)
        v36[v33 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v33 & 0x3F));
    }
    v490 = 0;
    v491 = 0;
    v492 = 0;
    sub_2239996F4((uint64_t)&v490, v33);
    v38 = (unsigned int *)v471;
    v39 = v472;
    if (v471 != v472)
    {
      do
      {
        v40 = v38[3];
        if (v40 == -1
          || (v41 = v38[7], v41 == -1)
          || (v42 = (unsigned int *)((char *)v471 + 36 * v40), v43 = v42[7], (_DWORD)v43 == -1)
          || (v44 = *((_DWORD *)v471 + 9 * v41 + 3), v44 == -1)
          || *((_DWORD *)v471 + 9 * v44) != (_DWORD)v43)
        {
          v48 = 0;
          v49 = 0;
          v50 = (unint64_t)v491;
          v51 = v492;
          if (v491 != (char *)(v492 << 6))
            goto LABEL_54;
        }
        else
        {
          v45 = *v38;
          v46 = *v42;
          v47 = *((unsigned int *)v471 + 9 * v41);
          v48 = operator new(0x20uLL);
          v49 = v48 + 4;
          *v48 = v45;
          v48[1] = v46;
          v48[2] = v47;
          v48[3] = v43;
          v50 = (unint64_t)v491;
          v51 = v492;
          if (v491 != (char *)(v492 << 6))
            goto LABEL_54;
        }
        if ((uint64_t)(v50 + 1) < 0)
          sub_2233DCD38();
        v52 = v51 << 7;
        if (v52 <= (v50 & 0xFFFFFFFFFFFFFFC0) + 64)
          v52 = (v50 & 0xFFFFFFFFFFFFFFC0) + 64;
        if (v50 <= 0x3FFFFFFFFFFFFFFELL)
          v53 = v52;
        else
          v53 = 0x7FFFFFFFFFFFFFFFLL;
        sub_2239996F4((uint64_t)&v490, v53);
        v50 = (unint64_t)v491;
LABEL_54:
        v491 = (char *)(v50 + 1);
        v54 = v50 >> 6;
        v55 = 1 << v50;
        if (v48 != v49)
        {
          *(_QWORD *)&v490[8 * v54] &= ~v55;
          if (!v48)
            goto LABEL_38;
LABEL_37:
          operator delete(v48);
          goto LABEL_38;
        }
        *(_QWORD *)&v490[8 * v54] |= v55;
        if (v48)
          goto LABEL_37;
LABEL_38:
        v38 += 9;
      }
      while (v38 != v39);
    }
    v465 = 0;
    v466 = 0uLL;
    v460 = v463 + 8 * ((uint64_t)&v21[-v463] >> 3);
    __asm { FMOV            V0.4S, #1.0 }
    v457 = _Q0;
    while (1)
    {
      sub_223CE1F0C(&v487, (uint64_t)&v490);
      v485 = 0;
      v486 = 0uLL;
      v67 = *(uint64_t **)(v463 + 64);
      v68 = *(uint64_t **)(v463 + 72);
      if (v67 == v68)
      {
        v482 = 0u;
        v483 = 0u;
        v484 = 1065353216;
        goto LABEL_129;
      }
      v69 = 0;
      do
      {
        v71 = *v67;
        v72 = (unint64_t)*v67 >> 6;
        v73 = 1 << *v67;
        if ((v73 & *(_QWORD *)&v487[8 * v72]) == 0 && (v493[v72] & v73) == 0)
        {
          if ((unint64_t)v69 < *((_QWORD *)&v486 + 1))
          {
            *(_QWORD *)v69 = v71;
            v70 = (uint64_t)(v69 + 8);
          }
          else
          {
            v74 = v485;
            v75 = (v69 - v485) >> 3;
            v76 = v75 + 1;
            if ((unint64_t)(v75 + 1) >> 61)
              sub_22367C394();
            v77 = *((_QWORD *)&v486 + 1) - (_QWORD)v485;
            if ((uint64_t)(*((_QWORD *)&v486 + 1) - (_QWORD)v485) >> 2 > v76)
              v76 = v77 >> 2;
            if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
              v78 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v78 = v76;
            if (v78)
            {
              if (v78 >> 61)
                sub_223174E94();
              v79 = operator new(8 * v78);
              v80 = &v79[8 * v75];
              *(_QWORD *)v80 = v71;
              v70 = (uint64_t)(v80 + 8);
              v81 = v69 - v74;
              if (v69 == v74)
                goto LABEL_89;
            }
            else
            {
              v79 = 0;
              v80 = (char *)(8 * v75);
              *(_QWORD *)(8 * v75) = v71;
              v70 = 8 * v75 + 8;
              v81 = v69 - v74;
              if (v69 == v74)
                goto LABEL_89;
            }
            v82 = v81 - 8;
            if (v82 >= 0x168)
            {
              v85 = (v69 - 8 - v74) & 0xFFFFFFFFFFFFFFF8;
              if (&v79[v69 - v74 - 8 - v85] > &v79[v69 - v74 - 8])
              {
                v83 = v69;
              }
              else if (&v69[-v85 - 8] > v69 - 8)
              {
                v83 = v69;
              }
              else if ((unint64_t)(v74 - v79) >= 0x20)
              {
                v86 = (v82 >> 3) + 1;
                v87 = 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
                v83 = &v69[-v87];
                v80 -= v87;
                v88 = &v79[8 * v75 - 16];
                v89 = v69 - 16;
                v90 = v86 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v91 = *(_OWORD *)v89;
                  *(v88 - 1) = *((_OWORD *)v89 - 1);
                  *v88 = v91;
                  v88 -= 2;
                  v89 -= 32;
                  v90 -= 4;
                }
                while (v90);
                if (v86 == (v86 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_89;
              }
              else
              {
                v83 = v69;
              }
            }
            else
            {
              v83 = v69;
            }
            do
            {
              v84 = *((_QWORD *)v83 - 1);
              v83 -= 8;
              *((_QWORD *)v80 - 1) = v84;
              v80 -= 8;
            }
            while (v83 != v74);
LABEL_89:
            v485 = v80;
            *(_QWORD *)&v486 = v70;
            *((_QWORD *)&v486 + 1) = &v79[8 * v78];
            if (v74)
              operator delete(v74);
          }
          *(_QWORD *)&v486 = v70;
          v69 = (char *)v70;
        }
        ++v67;
      }
      while (v67 != v68);
      v92 = v485;
      v482 = 0u;
      v483 = 0u;
      v484 = 1065353216;
      if (v485 == v69)
      {
LABEL_129:
        v479 = 0;
        v480 = 0;
        v481 = 0;
        goto LABEL_130;
      }
      do
      {
        v93 = (char *)v471 + 36 * *(_QWORD *)v92;
        v95 = *((_DWORD *)v93 + 1);
        v94 = (unsigned int *)(v93 + 4);
        v96 = *(_QWORD *)v92 >> 6;
        v97 = 1 << *(_QWORD *)v92;
        if (v95 != -1)
        {
          *(_QWORD *)v473 = 0;
          *(_QWORD *)v473 = *v94;
          v98 = *(_QWORD *)&v487[8 * (*(_QWORD *)v473 >> 6)];
          if (((1 << v473[0]) & v98) == 0 && (v493[v96] & v97) == 0)
          {
            *(_QWORD *)&v487[8 * (*(_QWORD *)v473 >> 6)] = v98 | (1 << v473[0]);
            sub_223F061DC((uint64_t)&v482, (unint64_t *)v473, v473);
          }
        }
        if (v94[2] != -1)
        {
          *(_QWORD *)v473 = 0;
          *(_QWORD *)v473 = v94[2];
          v99 = *(_QWORD *)&v487[8 * (*(_QWORD *)v473 >> 6)];
          if (((1 << v473[0]) & v99) == 0 && (v493[v96] & v97) == 0)
          {
            *(_QWORD *)&v487[8 * (*(_QWORD *)v473 >> 6)] = v99 | (1 << v473[0]);
            sub_223F061DC((uint64_t)&v482, (unint64_t *)v473, v473);
          }
        }
        if (v94[4] != -1)
        {
          *(_QWORD *)v473 = 0;
          *(_QWORD *)v473 = v94[4];
          v100 = *(_QWORD *)&v487[8 * (*(_QWORD *)v473 >> 6)];
          if (((1 << v473[0]) & v100) == 0 && (v493[v96] & v97) == 0)
          {
            *(_QWORD *)&v487[8 * (*(_QWORD *)v473 >> 6)] = v100 | (1 << v473[0]);
            sub_223F061DC((uint64_t)&v482, (unint64_t *)v473, v473);
          }
        }
        if (v94[6] != -1)
        {
          *(_QWORD *)v473 = 0;
          *(_QWORD *)v473 = v94[6];
          v101 = *(_QWORD *)&v487[8 * (*(_QWORD *)v473 >> 6)];
          if (((1 << v473[0]) & v101) == 0 && (v493[v96] & v97) == 0)
          {
            *(_QWORD *)&v487[8 * (*(_QWORD *)v473 >> 6)] = v101 | (1 << v473[0]);
            sub_223F061DC((uint64_t)&v482, (unint64_t *)v473, v473);
          }
        }
        v92 += 8;
      }
      while (v92 != v69);
      v102 = (_QWORD *)v483;
      v479 = 0;
      v480 = 0;
      v481 = 0;
      if ((_QWORD)v483)
      {
        v103 = 0;
        v104 = -1;
        v105 = (_QWORD *)v483;
        do
        {
          v105 = (_QWORD *)*v105;
          ++v104;
          v103 += 8;
        }
        while (v105);
        if (v104 >= 0x1FFFFFFFFFFFFFFFLL)
          sub_22367C394();
        v106 = (char *)operator new(v103);
        v109 = 0;
        v479 = v106;
        v481 = &v106[v103];
        do
        {
          *(_QWORD *)&v106[v109] = v102[2];
          v102 = (_QWORD *)*v102;
          v109 += 8;
        }
        while (v102);
        v110 = &v106[v109];
        v480 = &v106[v109];
        if (v109)
        {
          v111 = v493;
          while (1)
          {
            v147 = *((_QWORD *)v110 - 1);
            v480 = v110 - 8;
            if (((*(_QWORD *)((char *)v111 + ((v147 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v147) & 1) != 0)
              goto LABEL_161;
            v148 = (unsigned int *)((char *)v471 + 36 * v147);
            v149 = v148[3];
            if (v149 != -1)
            {
              v150 = *((_DWORD *)v471 + 9 * v147 + 7);
              if (v150 != -1)
              {
                v151 = (unsigned int *)((char *)v471 + 36 * v149);
                v152 = v151[7];
                if (v152 != -1)
                {
                  v153 = *((_DWORD *)v471 + 9 * v150 + 3);
                  if (v153 != -1 && *((_DWORD *)v471 + 9 * v153) == v152)
                  {
                    v154 = *v148;
                    v107.i32[0] = *(_DWORD *)(v463 + 20);
                    v108.i64[0] = *(_QWORD *)(v463 + 12);
                    v155 = (float32x4_t)v108;
                    v156 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v155.f32, *(float32x2_t *)v155.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v108.i8, 1), *(float32x2_t *)v108.i8, 1), *(float32x2_t *)v107.i8, *(float32x2_t *)v107.i8);
                    *(float *)v107.i32 = v156.f32[0] + -1.0;
                    if (v156.f32[0] < 1.0)
                      *(float *)v107.i32 = 1.0 - v156.f32[0];
                    v157 = *(float *)v107.i32 > 0.000001;
                    *(float *)v107.i32 = 1.0 / sqrtf(v156.f32[0]);
                    v107 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v107.i8, 0);
                    _ZF = !v157 || v156.f32[0] == 1.0;
                    v159 = _ZF ? -1 : 0;
                    v163.i32[1] = v457.i32[1];
                    v155.i32[2] = *(_DWORD *)(v463 + 20);
                    v108 = (int8x16_t)vmulq_f32(v155, (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v159), v457, v107));
                    v160 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v108.i8, 1);
                    v161 = (float32x2_t)vextq_s8(v108, v108, 8uLL).u64[0];
                    v156.i32[0] = *(_DWORD *)(v463 + 8);
                    *(float32x2_t *)v107.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v463, *(float32x2_t *)v108.i8), v160, *(float32x2_t *)v463, 1), v161, v156);
                    v162 = (float32x2_t *)((char *)a5 + 12 * v154);
                    v163.i32[0] = v162[1].i32[0];
                    if (fabsf(vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*v162, *(float32x2_t *)v108.i8), v160, *v162, 1), v161, v163), *(float32x2_t *)v107.i8).f32[0]) >= 0.05)goto LABEL_161;
                    v164 = (float32x2_t *)((char *)a5 + 12 * *v151);
                    v163.i32[0] = v164[1].i32[0];
                    if (fabsf(vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*v164, *(float32x2_t *)v108.i8), v160, *v164, 1), v161, v163), *(float32x2_t *)v107.i8).f32[0]) >= 0.05)goto LABEL_161;
                    v165 = (float32x2_t *)((char *)a5 + 12 * *((unsigned int *)v471 + 9 * v150));
                    v163.i32[0] = v165[1].i32[0];
                    if (fabsf(vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*v165, *(float32x2_t *)v108.i8), v160, *v165, 1), v161, v163), *(float32x2_t *)v107.i8).f32[0]) >= 0.05)goto LABEL_161;
                    v166 = (float32x2_t *)((char *)a5 + 12 * v152);
                    v163.i32[0] = v166[1].i32[0];
                    *(float32x2_t *)v107.i8 = vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*v166, *(float32x2_t *)v108.i8), v160, *v166, 1), v161, v163), *(float32x2_t *)v107.i8);
                    if (fabsf(*(float *)v107.i32) >= 0.05)
                      goto LABEL_161;
                  }
                }
              }
            }
            v167 = (_BYTE *)v486;
            if ((unint64_t)v486 < *((_QWORD *)&v486 + 1))
            {
              *(_QWORD *)v486 = v147;
              v168 = (uint64_t)(v167 + 8);
              goto LABEL_201;
            }
            v169 = v485;
            v170 = (uint64_t)(v486 - (_QWORD)v485) >> 3;
            v171 = v170 + 1;
            if ((unint64_t)(v170 + 1) >> 61)
              sub_22367C394();
            v172 = *((_QWORD *)&v486 + 1) - (_QWORD)v485;
            if ((uint64_t)(*((_QWORD *)&v486 + 1) - (_QWORD)v485) >> 2 > v171)
              v171 = v172 >> 2;
            v173 = (unint64_t)v172 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v171;
            if (v173)
              break;
            v174 = 0;
            v175 = (char *)(8 * v170);
            *(_QWORD *)(8 * v170) = v147;
            v168 = 8 * v170 + 8;
            v176 = v167 - v169;
            if (v167 != v169)
              goto LABEL_193;
LABEL_199:
            v485 = v175;
            *(_QWORD *)&v486 = v168;
            *((_QWORD *)&v486 + 1) = &v174[8 * v173];
            if (v169)
              operator delete(v169);
LABEL_201:
            *(_QWORD *)&v486 = v168;
            v185 = (char *)v471 + 36 * v147;
            v188 = *((_DWORD *)v185 + 1);
            v187 = (unsigned int *)(v185 + 4);
            v186 = v188;
            if (v188 == -1 || (v189 = *(_QWORD *)&v487[8 * (v186 >> 6)], (v189 & (1 << v186)) != 0))
            {
              v190 = v187[2];
              if ((_DWORD)v190 == -1)
                goto LABEL_205;
              goto LABEL_204;
            }
            *(_QWORD *)&v487[8 * (v186 >> 6)] = v189 | (1 << v186);
            v196 = v480;
            if (v480 < v481)
            {
              *(_QWORD *)v480 = v186;
              v197 = (uint64_t)(v196 + 8);
              goto LABEL_252;
            }
            v200 = (char *)v479;
            v201 = v480 - (_BYTE *)v479;
            v202 = (v480 - (_BYTE *)v479) >> 3;
            v203 = v202 + 1;
            if ((unint64_t)(v202 + 1) >> 61)
              goto LABEL_606;
            v204 = v481 - (_BYTE *)v479;
            if ((v481 - (_BYTE *)v479) >> 2 > v203)
              v203 = v204 >> 2;
            if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFF8)
              v205 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v205 = v203;
            if (v205)
            {
              if (v205 >> 61)
                goto LABEL_611;
              v206 = (char *)operator new(8 * v205);
              v207 = &v206[8 * v202];
              *(_QWORD *)v207 = v186;
              v197 = (uint64_t)(v207 + 8);
              v208 = v196 - v200;
              if (v196 == v200)
                goto LABEL_250;
LABEL_244:
              v227 = v208 - 8;
              if (v227 < 0x58)
                goto LABEL_621;
              if ((unint64_t)(v196 - &v206[v201]) < 0x20)
                goto LABEL_621;
              v228 = (v227 >> 3) + 1;
              v229 = 8 * (v228 & 0x3FFFFFFFFFFFFFFCLL);
              v230 = &v196[-v229];
              v207 -= v229;
              v231 = (int8x16_t *)&v206[8 * v202 - 16];
              v232 = (int8x16_t *)(v196 - 16);
              v233 = v228 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v108 = v232[-1];
                v107 = *v232;
                v231[-1] = v108;
                *v231 = v107;
                v231 -= 2;
                v232 -= 2;
                v233 -= 4;
              }
              while (v233);
              v196 = v230;
              if (v228 != (v228 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_621:
                do
                {
                  v234 = *((_QWORD *)v196 - 1);
                  v196 -= 8;
                  *((_QWORD *)v207 - 1) = v234;
                  v207 -= 8;
                }
                while (v196 != v200);
              }
              goto LABEL_250;
            }
            v206 = 0;
            v207 = (char *)(8 * v202);
            *(_QWORD *)(8 * v202) = v186;
            v197 = 8 * v202 + 8;
            v208 = v196 - v200;
            if (v196 != v200)
              goto LABEL_244;
LABEL_250:
            v479 = v207;
            v480 = (char *)v197;
            v481 = &v206[8 * v205];
            if (v200)
              operator delete(v200);
LABEL_252:
            v480 = (char *)v197;
            v190 = v187[2];
            if ((_DWORD)v190 == -1)
            {
LABEL_205:
              v192 = v187[4];
              if ((_DWORD)v192 == -1)
                goto LABEL_275;
              goto LABEL_206;
            }
LABEL_204:
            v191 = *(_QWORD *)&v487[8 * (v190 >> 6)];
            if ((v191 & (1 << v190)) != 0)
              goto LABEL_205;
            *(_QWORD *)&v487[8 * (v190 >> 6)] = v191 | (1 << v190);
            v198 = v480;
            if (v480 < v481)
            {
              *(_QWORD *)v480 = v190;
              v199 = (uint64_t)(v198 + 8);
              goto LABEL_263;
            }
            v209 = (char *)v479;
            v210 = v480 - (_BYTE *)v479;
            v211 = (v480 - (_BYTE *)v479) >> 3;
            v212 = v211 + 1;
            if ((unint64_t)(v211 + 1) >> 61)
              goto LABEL_606;
            v213 = v481 - (_BYTE *)v479;
            if ((v481 - (_BYTE *)v479) >> 2 > v212)
              v212 = v213 >> 2;
            if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFF8)
              v214 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v214 = v212;
            if (v214)
            {
              if (v214 >> 61)
                goto LABEL_611;
              v215 = (char *)operator new(8 * v214);
              v216 = &v215[8 * v211];
              *(_QWORD *)v216 = v190;
              v199 = (uint64_t)(v216 + 8);
              v217 = v198 - v209;
              if (v198 == v209)
                goto LABEL_261;
LABEL_255:
              v235 = v217 - 8;
              if (v235 < 0x58)
                goto LABEL_622;
              if ((unint64_t)(v198 - v215 - v210) < 0x20)
                goto LABEL_622;
              v236 = (v235 >> 3) + 1;
              v237 = 8 * (v236 & 0x3FFFFFFFFFFFFFFCLL);
              v238 = &v198[-v237];
              v216 -= v237;
              v239 = (int8x16_t *)&v215[8 * v211 - 16];
              v240 = (int8x16_t *)(v198 - 16);
              v241 = v236 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v108 = v240[-1];
                v107 = *v240;
                v239[-1] = v108;
                *v239 = v107;
                v239 -= 2;
                v240 -= 2;
                v241 -= 4;
              }
              while (v241);
              v198 = v238;
              if (v236 != (v236 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_622:
                do
                {
                  v242 = *((_QWORD *)v198 - 1);
                  v198 -= 8;
                  *((_QWORD *)v216 - 1) = v242;
                  v216 -= 8;
                }
                while (v198 != v209);
              }
              goto LABEL_261;
            }
            v215 = 0;
            v216 = (char *)(8 * v211);
            *(_QWORD *)(8 * v211) = v190;
            v199 = 8 * v211 + 8;
            v217 = v198 - v209;
            if (v198 != v209)
              goto LABEL_255;
LABEL_261:
            v479 = v216;
            v480 = (char *)v199;
            v481 = &v215[8 * v214];
            if (v209)
              operator delete(v209);
LABEL_263:
            v480 = (char *)v199;
            v192 = v187[4];
            if ((_DWORD)v192 == -1)
              goto LABEL_275;
LABEL_206:
            v193 = *(_QWORD *)&v487[8 * (v192 >> 6)];
            if ((v193 & (1 << v192)) == 0)
            {
              *(_QWORD *)&v487[8 * (v192 >> 6)] = v193 | (1 << v192);
              v194 = v480;
              if (v480 < v481)
              {
                *(_QWORD *)v480 = v192;
                v195 = (uint64_t)(v194 + 8);
LABEL_274:
                v480 = (char *)v195;
                goto LABEL_275;
              }
              v218 = (char *)v479;
              v219 = v480 - (_BYTE *)v479;
              v220 = (v480 - (_BYTE *)v479) >> 3;
              v221 = v220 + 1;
              if ((unint64_t)(v220 + 1) >> 61)
                goto LABEL_606;
              v222 = v481 - (_BYTE *)v479;
              if ((v481 - (_BYTE *)v479) >> 2 > v221)
                v221 = v222 >> 2;
              if ((unint64_t)v222 >= 0x7FFFFFFFFFFFFFF8)
                v223 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v223 = v221;
              if (v223)
              {
                if (v223 >> 61)
                  goto LABEL_611;
                v224 = (char *)operator new(8 * v223);
                v225 = &v224[8 * v220];
                *(_QWORD *)v225 = v192;
                v195 = (uint64_t)(v225 + 8);
                v226 = v194 - v218;
                if (v194 == v218)
                  goto LABEL_272;
LABEL_266:
                v243 = v226 - 8;
                if (v243 < 0x58)
                  goto LABEL_623;
                if ((unint64_t)(v194 - &v224[v219]) < 0x20)
                  goto LABEL_623;
                v244 = (v243 >> 3) + 1;
                v245 = 8 * (v244 & 0x3FFFFFFFFFFFFFFCLL);
                v246 = &v194[-v245];
                v225 -= v245;
                v247 = (int8x16_t *)&v224[8 * v220 - 16];
                v248 = (int8x16_t *)(v194 - 16);
                v249 = v244 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v108 = v248[-1];
                  v107 = *v248;
                  v247[-1] = v108;
                  *v247 = v107;
                  v247 -= 2;
                  v248 -= 2;
                  v249 -= 4;
                }
                while (v249);
                v194 = v246;
                if (v244 != (v244 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_623:
                  do
                  {
                    v250 = *((_QWORD *)v194 - 1);
                    v194 -= 8;
                    *((_QWORD *)v225 - 1) = v250;
                    v225 -= 8;
                  }
                  while (v194 != v218);
                }
              }
              else
              {
                v224 = 0;
                v225 = (char *)(8 * v220);
                *(_QWORD *)(8 * v220) = v192;
                v195 = 8 * v220 + 8;
                v226 = v194 - v218;
                if (v194 != v218)
                  goto LABEL_266;
              }
LABEL_272:
              v479 = v225;
              v480 = (char *)v195;
              v481 = &v224[8 * v223];
              if (v218)
                operator delete(v218);
              goto LABEL_274;
            }
LABEL_275:
            v251 = v187[6];
            if ((_DWORD)v251 == -1)
              goto LABEL_161;
            v252 = *(_QWORD *)&v487[8 * (v251 >> 6)];
            if ((v252 & (1 << v251)) != 0)
              goto LABEL_161;
            *(_QWORD *)&v487[8 * (v251 >> 6)] = v252 | (1 << v251);
            v253 = v480;
            if (v480 >= v481)
            {
              v254 = (char *)v479;
              v255 = v480 - (_BYTE *)v479;
              v256 = (v480 - (_BYTE *)v479) >> 3;
              v257 = v256 + 1;
              if ((unint64_t)(v256 + 1) >> 61)
LABEL_606:
                sub_22367C394();
              v258 = v481 - (_BYTE *)v479;
              if ((v481 - (_BYTE *)v479) >> 2 > v257)
                v257 = v258 >> 2;
              if ((unint64_t)v258 >= 0x7FFFFFFFFFFFFFF8)
                v259 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v259 = v257;
              if (v259)
              {
                if (v259 >> 61)
LABEL_611:
                  sub_223174E94();
                v260 = (char *)operator new(8 * v259);
                v261 = &v260[8 * v256];
                *(_QWORD *)v261 = v251;
                v146 = (uint64_t)(v261 + 8);
                v262 = v253 - v254;
                if (v253 == v254)
                  goto LABEL_295;
LABEL_289:
                v263 = v262 - 8;
                if (v263 < 0x58)
                  goto LABEL_624;
                if ((unint64_t)(v253 - &v260[v255]) < 0x20)
                  goto LABEL_624;
                v264 = (v263 >> 3) + 1;
                v265 = 8 * (v264 & 0x3FFFFFFFFFFFFFFCLL);
                v266 = &v253[-v265];
                v261 -= v265;
                v267 = (int8x16_t *)&v260[8 * v256 - 16];
                v268 = (int8x16_t *)(v253 - 16);
                v269 = v264 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v108 = v268[-1];
                  v107 = *v268;
                  v267[-1] = v108;
                  *v267 = v107;
                  v267 -= 2;
                  v268 -= 2;
                  v269 -= 4;
                }
                while (v269);
                v253 = v266;
                if (v264 != (v264 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_624:
                  do
                  {
                    v270 = *((_QWORD *)v253 - 1);
                    v253 -= 8;
                    *((_QWORD *)v261 - 1) = v270;
                    v261 -= 8;
                  }
                  while (v253 != v254);
                }
              }
              else
              {
                v260 = 0;
                v261 = (char *)(8 * v256);
                *(_QWORD *)(8 * v256) = v251;
                v146 = 8 * v256 + 8;
                v262 = v253 - v254;
                if (v253 != v254)
                  goto LABEL_289;
              }
LABEL_295:
              v479 = v261;
              v480 = (char *)v146;
              v481 = &v260[8 * v259];
              if (v254)
                operator delete(v254);
              goto LABEL_160;
            }
            *(_QWORD *)v480 = v251;
            v146 = (uint64_t)(v253 + 8);
LABEL_160:
            v480 = (char *)v146;
LABEL_161:
            v110 = v480;
            if (v479 == v480)
              goto LABEL_130;
          }
          if (v173 >> 61)
            sub_223174E94();
          v174 = operator new(8 * v173);
          v175 = &v174[8 * v170];
          *(_QWORD *)v175 = v147;
          v168 = (uint64_t)(v175 + 8);
          v176 = v167 - v169;
          if (v167 == v169)
            goto LABEL_199;
LABEL_193:
          v177 = v176 - 8;
          if (v177 < 0x58)
            goto LABEL_625;
          if ((unint64_t)(v169 - v174) < 0x20)
            goto LABEL_625;
          v178 = (v177 >> 3) + 1;
          v179 = 8 * (v178 & 0x3FFFFFFFFFFFFFFCLL);
          v180 = &v167[-v179];
          v175 -= v179;
          v181 = (int8x16_t *)&v174[8 * v170 - 16];
          v182 = (int8x16_t *)(v167 - 16);
          v183 = v178 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v108 = v182[-1];
            v107 = *v182;
            v181[-1] = v108;
            *v181 = v107;
            v181 -= 2;
            v182 -= 2;
            v183 -= 4;
          }
          while (v183);
          v167 = v180;
          if (v178 != (v178 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_625:
            do
            {
              v184 = *((_QWORD *)v167 - 1);
              v167 -= 8;
              *((_QWORD *)v175 - 1) = v184;
              v175 -= 8;
            }
            while (v167 != v169);
          }
          goto LABEL_199;
        }
      }
LABEL_130:
      if (*((_QWORD *)&v483 + 1))
      {
        v112 = (_QWORD *)v483;
        if ((_QWORD)v483)
        {
          do
          {
            v113 = (_QWORD *)*v112;
            operator delete(v112);
            v112 = v113;
          }
          while (v113);
        }
        *(_QWORD *)&v483 = 0;
        v114 = *((_QWORD *)&v482 + 1);
        if (*((_QWORD *)&v482 + 1))
        {
          v115 = 0;
          do
            *(_QWORD *)(v482 + 8 * v115++) = 0;
          while (v114 != v115);
        }
        *((_QWORD *)&v483 + 1) = 0;
      }
      v116 = v485;
      v117 = (char *)v486;
      if (v485 != (char *)v486)
      {
        do
        {
          v118 = (unsigned int *)((char *)v471 + 36 * *(_QWORD *)v116);
          v119 = v118[3];
          if (v119 != -1)
          {
            v120 = *((_DWORD *)v471 + 9 * *(_QWORD *)v116 + 7);
            if (v120 != -1)
            {
              v121 = (unsigned int *)((char *)v471 + 36 * v119);
              v122 = v121[7];
              if ((_DWORD)v122 != -1)
              {
                v123 = *((_DWORD *)v471 + 9 * v120 + 3);
                if (v123 != -1 && *((_DWORD *)v471 + 9 * v123) == (_DWORD)v122)
                {
                  v124 = *v118;
                  v125 = *v121;
                  v126 = *((unsigned int *)v471 + 9 * v120);
                  v127 = operator new(0x20uLL);
                  *v127 = v124;
                  v127[1] = v125;
                  v127[2] = v126;
                  v127[3] = v122;
                  *(_QWORD *)v473 = v124;
                  sub_223F061DC((uint64_t)&v482, (unint64_t *)v473, v473);
                  *(_QWORD *)v473 = v127[1];
                  sub_223F061DC((uint64_t)&v482, (unint64_t *)v473, v473);
                  *(_QWORD *)v473 = v127[2];
                  sub_223F061DC((uint64_t)&v482, (unint64_t *)v473, v473);
                  *(_QWORD *)v473 = v127[3];
                  sub_223F061DC((uint64_t)&v482, (unint64_t *)v473, v473);
                  operator delete(v127);
                }
              }
            }
          }
          v116 += 8;
        }
        while (v116 != v117);
        if (*((_QWORD *)&v483 + 1) >= 6uLL)
        {
          v128 = v485;
          v129 = (char *)v486;
          if (v485 != (char *)v486)
          {
            v130 = v493;
            do
            {
              v131 = *(_QWORD *)v128;
              v128 += 8;
              *(_QWORD *)((char *)v130 + ((v131 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v131;
            }
            while (v128 != v129);
          }
          v132 = *(float32x2_t *)v463;
          *(_DWORD *)&v473[8] = *(_DWORD *)(v463 + 8);
          *(float32x2_t *)v473 = v132;
          v133 = *(_QWORD *)(v463 + 12);
          *(_DWORD *)&v473[20] = *(_DWORD *)(v463 + 20);
          *(_QWORD *)&v473[12] = v133;
          LODWORD(v133) = *(_DWORD *)(v463 + 56);
          v134 = *(_OWORD *)(v463 + 40);
          v474 = *(_OWORD *)(v463 + 24);
          v475 = v134;
          v476 = v133;
          v135 = (_QWORD *)v483;
          __p[1] = 0;
          v478 = 0;
          __p[0] = 0;
          if ((_QWORD)v483)
          {
            v136 = 0;
            v137 = -1;
            v138 = (_QWORD *)v483;
            do
            {
              v138 = (_QWORD *)*v138;
              ++v137;
              v136 += 8;
            }
            while (v138);
            if (v137 >= 0x1FFFFFFFFFFFFFFFLL)
              sub_22367C394();
            v139 = (char *)operator new(v136);
            v140 = 0;
            __p[0] = v139;
            v478 = &v139[v136];
            do
            {
              *(_QWORD *)&v139[v140] = v135[2];
              v135 = (_QWORD *)*v135;
              v140 += 8;
            }
            while (v135);
            __p[1] = &v139[v140];
          }
          v141 = v466;
          if ((unint64_t)v466 >= *((_QWORD *)&v466 + 1))
          {
            *(_QWORD *)&v466 = sub_223FA9CD0((uint64_t *)&v465, (uint64_t)v473);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v142 = *(_QWORD *)v473;
            *(_DWORD *)(v466 + 8) = *(_DWORD *)&v473[8];
            *(_QWORD *)v141 = v142;
            v143 = *(_QWORD *)&v473[12];
            *(_DWORD *)(v141 + 20) = *(_DWORD *)&v473[20];
            *(_QWORD *)(v141 + 12) = v143;
            v144 = v474;
            v145 = v475;
            *(_DWORD *)(v141 + 56) = v476;
            *(_OWORD *)(v141 + 40) = v145;
            *(_OWORD *)(v141 + 24) = v144;
            *(_QWORD *)(v141 + 64) = 0;
            *(_QWORD *)(v141 + 72) = 0;
            *(_QWORD *)(v141 + 80) = 0;
            *(_OWORD *)(v141 + 64) = *(_OWORD *)__p;
            *(_QWORD *)(v141 + 80) = v478;
            *(_QWORD *)&v466 = v141 + 88;
          }
        }
      }
      if (v479)
      {
        v480 = (char *)v479;
        operator delete(v479);
      }
      v271 = (_QWORD *)v483;
      if ((_QWORD)v483)
      {
        do
        {
          v272 = (_QWORD *)*v271;
          operator delete(v271);
          v271 = v272;
        }
        while (v272);
      }
      v273 = (void *)v482;
      *(_QWORD *)&v482 = 0;
      if (v273)
        operator delete(v273);
      if (v485)
      {
        *(_QWORD *)&v486 = v485;
        operator delete(v485);
      }
      if (v487)
        operator delete(v487);
      v463 += 88;
      if (v463 == v460)
      {
        if (v490)
          operator delete(v490);
        if (v493)
          operator delete(v493);
        v274 = (char *)v467;
        if (v467)
        {
          v275 = (char *)v468;
          v276 = v467;
          if ((void *)v468 != v467)
          {
            do
            {
              v277 = (void *)*((_QWORD *)v275 - 3);
              if (v277)
              {
                *((_QWORD *)v275 - 2) = v277;
                operator delete(v277);
              }
              v275 -= 88;
            }
            while (v275 != v274);
            v276 = v467;
          }
          *(_QWORD *)&v468 = v274;
          operator delete(v276);
        }
        v467 = v465;
        v468 = v466;
        if (v465 == (void *)v466)
          goto LABEL_599;
LABEL_335:
        sub_223FADEC8((size_t)&v471, &v467, v454, v455, (uint64_t)a8);
        goto LABEL_336;
      }
    }
  }
  if (*(_BYTE *)(a1 + 8))
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Vision/ConnSACPlaneDetector.cpp", 283, (uint64_t)"", 0, (uint64_t)"Unknown inlier collection method.", 33, (void (*)(void **))sub_22457406C);
    abort();
  }
  v494 = 0;
  v495 = 0;
  v493 = 0;
  v23 = (char *)v472 - (_BYTE *)v471;
  if (v472 == v471)
  {
    v32 = 0;
    v24 = 0;
  }
  else
  {
    if (v23 < 0)
      sub_2233DCD38();
    v24 = 0x8E38E38E38E38E39 * (v23 >> 2);
    v25 = (v24 - 1) >> 6;
    v26 = 8 * (v25 + 1);
    v27 = operator new(v26);
    v28 = v27;
    v494 = v24;
    v495 = v25 + 1;
    v493 = v27;
    if (v24 < 0x41)
      v25 = 0;
    v27[v25] = 0;
    v29 = v24 >> 6;
    if (v24 >= 0x40)
      bzero(v27, 8 * (v24 >> 6));
    v30 = v24 & 0x3F;
    if ((v24 & 0x3F) != 0)
      v28[v29] &= ~(0xFFFFFFFFFFFFFFFFLL >> -v30);
    v31 = operator new(v26);
    v32 = v31;
    v31[v25] = 0;
    if (v24 >= 0x40)
      bzero(v31, 8 * (v24 >> 6));
    if ((v24 & 0x3F) != 0)
      v32[v29] &= ~(0xFFFFFFFFFFFFFFFFLL >> -v30);
    v20 = v463;
  }
  v485 = 0;
  v486 = 0uLL;
  v461 = v24;
  v459 = v20 + 8 * ((uint64_t)&v21[-v20] >> 3);
  v458 = v24 + 1;
  while (2)
  {
    if ((uint64_t)v24 >= 1)
    {
      v289 = 0;
      v290 = v458;
      v291 = v32;
      do
      {
        *v291 &= ~(1 << v289);
        v291 += v289 == 63;
        if (v289 == 63)
          v289 = 0;
        else
          ++v289;
        --v290;
      }
      while (v290 > 1);
    }
    v490 = 0;
    v491 = 0;
    v492 = 0;
    v482 = 0u;
    v483 = 0u;
    v484 = 1065353216;
    v292 = *(_QWORD **)(v20 + 64);
    v293 = *(_QWORD **)(v20 + 72);
    if (v292 == v293)
      goto LABEL_396;
    do
    {
      v294 = (char *)v471 + 36 * *v292;
      v296 = *((_DWORD *)v294 + 1);
      v295 = (unsigned int *)(v294 + 4);
      if (v296 != -1)
      {
        *(_QWORD *)v473 = 0;
        *(_QWORD *)v473 = *v295;
        *(_QWORD *)((char *)v32 + ((*(_QWORD *)v473 >> 3) & 0x1FFFFFF8)) |= 1 << v473[0];
        sub_223F061DC((uint64_t)&v482, (unint64_t *)v473, v473);
      }
      if (v295[2] != -1)
      {
        *(_QWORD *)v473 = 0;
        *(_QWORD *)v473 = v295[2];
        *(_QWORD *)((char *)v32 + ((*(_QWORD *)v473 >> 3) & 0x1FFFFFF8)) |= 1 << v473[0];
        sub_223F061DC((uint64_t)&v482, (unint64_t *)v473, v473);
      }
      if (v295[4] != -1)
      {
        *(_QWORD *)v473 = 0;
        *(_QWORD *)v473 = v295[4];
        *(_QWORD *)((char *)v32 + ((*(_QWORD *)v473 >> 3) & 0x1FFFFFF8)) |= 1 << v473[0];
        sub_223F061DC((uint64_t)&v482, (unint64_t *)v473, v473);
      }
      if (v295[6] != -1)
      {
        *(_QWORD *)v473 = 0;
        *(_QWORD *)v473 = v295[6];
        *(_QWORD *)((char *)v32 + ((*(_QWORD *)v473 >> 3) & 0x1FFFFFF8)) |= 1 << v473[0];
        sub_223F061DC((uint64_t)&v482, (unint64_t *)v473, v473);
      }
      ++v292;
    }
    while (v292 != v293);
    v297 = *((_QWORD *)&v482 + 1);
    if (!*((_QWORD *)&v482 + 1))
      goto LABEL_396;
    v298 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v482 + 8));
    v298.i16[0] = vaddlv_u8(v298);
    if (v298.u32[0] > 1uLL)
    {
      if (HIDWORD(*((_QWORD *)&v482 + 1)))
      {
        v299 = 0xFFFFFFFFLL;
        v300 = v482;
        v301 = *(__int128 ***)(v482 + 0x7FFFFFFF8);
        if (!v301)
        {
LABEL_396:
          v306 = (_QWORD *)v483;
          v488 = 0;
          v489 = 0;
          v487 = 0;
          v307 = 0;
          if (!(_QWORD)v483)
            goto LABEL_569;
          goto LABEL_397;
        }
      }
      else
      {
        v299 = ~(0xFFFFFFFF / DWORD2(v482) * DWORD2(v482));
        v300 = v482;
        v301 = *(__int128 ***)(v482 + 8 * v299);
        if (!v301)
          goto LABEL_396;
      }
    }
    else
    {
      v299 = (DWORD2(v482) - 1);
      v300 = v482;
      v301 = *(__int128 ***)(v482 + 8 * v299);
      if (!v301)
        goto LABEL_396;
    }
    v302 = *v301;
    if (!*v301)
      goto LABEL_396;
    v303 = *((_QWORD *)&v482 + 1) - 1;
    if (v298.u32[0] < 2uLL)
    {
      while (1)
      {
        v304 = *((_QWORD *)v302 + 1);
        if (v304 == 0xFFFFFFFFLL)
        {
          if (*((_QWORD *)v302 + 2) == 0xFFFFFFFFLL)
            goto LABEL_540;
        }
        else if ((v304 & v303) != v299)
        {
          goto LABEL_396;
        }
        v302 = *(__int128 **)v302;
        if (!v302)
          goto LABEL_396;
      }
    }
    while (1)
    {
      v305 = *((_QWORD *)v302 + 1);
      if (v305 == 0xFFFFFFFF)
        break;
      if (v305 >= *((_QWORD *)&v482 + 1))
        v305 %= *((_QWORD *)&v482 + 1);
      if (v305 != v299)
        goto LABEL_396;
LABEL_391:
      v302 = *(__int128 **)v302;
      if (!v302)
        goto LABEL_396;
    }
    if (*((_QWORD *)v302 + 2) != 0xFFFFFFFFLL)
      goto LABEL_391;
LABEL_540:
    if (v298.u32[0] > 1uLL)
    {
      if (HIDWORD(*((_QWORD *)&v482 + 1)))
        v427 = 0xFFFFFFFFLL;
      else
        v427 = ~(0xFFFFFFFF / DWORD2(v482) * DWORD2(v482));
    }
    else
    {
      v427 = (DWORD2(v482) - 1);
    }
    v428 = *(__int128 **)v302;
    v429 = *(__int128 **)(v300 + 8 * v427);
    do
    {
      v430 = v429;
      v429 = *(__int128 **)v429;
    }
    while (v429 != v302);
    if (v430 == &v483)
      goto LABEL_558;
    v431 = *((_QWORD *)v430 + 1);
    if (v298.u32[0] > 1uLL)
    {
      if (v431 >= *((_QWORD *)&v482 + 1))
        v431 %= *((_QWORD *)&v482 + 1);
    }
    else
    {
      v431 &= v303;
    }
    if (v431 == v427)
    {
LABEL_560:
      if (v428)
      {
        v432 = *((_QWORD *)v428 + 1);
        goto LABEL_562;
      }
    }
    else
    {
LABEL_558:
      if (!v428)
        goto LABEL_559;
      v432 = *((_QWORD *)v428 + 1);
      if (v298.u32[0] > 1uLL)
      {
        v433 = *((_QWORD *)v428 + 1);
        if (v432 >= *((_QWORD *)&v482 + 1))
          v433 = v432 % *((_QWORD *)&v482 + 1);
      }
      else
      {
        v433 = v432 & v303;
      }
      if (v433 != v427)
      {
LABEL_559:
        *(_QWORD *)(v300 + 8 * v427) = 0;
        v428 = *(__int128 **)v302;
        goto LABEL_560;
      }
LABEL_562:
      if (v298.u32[0] > 1uLL)
      {
        if (v432 >= v297)
          v432 %= v297;
      }
      else
      {
        v432 &= v303;
      }
      if (v432 != v427)
      {
        *(_QWORD *)(v482 + 8 * v432) = v430;
        v428 = *(__int128 **)v302;
      }
    }
    *(_QWORD *)v430 = v428;
    *(_QWORD *)v302 = 0;
    --*((_QWORD *)&v483 + 1);
    operator delete(v302);
    v306 = (_QWORD *)v483;
    v488 = 0;
    v489 = 0;
    v487 = 0;
    v307 = 0;
    if ((_QWORD)v483)
    {
LABEL_397:
      v308 = -1;
      v309 = v306;
      do
      {
        v309 = (_QWORD *)*v309;
        ++v308;
        v307 += 8;
      }
      while (v309);
      if (v308 >= 0x1FFFFFFFFFFFFFFFLL)
        sub_22367C394();
      v310 = (char *)operator new((size_t)v307);
      v314 = 0;
      v487 = v310;
      v489 = &v307[(_QWORD)v310];
      do
      {
        *(_QWORD *)&v310[v314] = v306[2];
        v306 = (_QWORD *)*v306;
        v314 += 8;
      }
      while (v306);
      v307 = &v310[v314];
      v488 = &v310[v314];
      if (!v314)
        goto LABEL_569;
      v315 = v493;
      v464 = v20;
      while (1)
      {
        v317 = *((_QWORD *)v307 - 1);
        v307 -= 8;
        v316 = v317;
        v488 = v307;
        if (((*(_QWORD *)((char *)v315 + ((v317 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v317) & 1) != 0)
          goto LABEL_406;
        v312.i32[0] = *(_DWORD *)(v20 + 20);
        v311.i64[0] = *(_QWORD *)(v20 + 12);
        v311.i32[2] = v312.i32[0];
        v318 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v311.i8, *(float32x2_t *)v311.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v311.i8, 1), *(float32x2_t *)v311.i8, 1), v312, v312).f32[0];
        if (v318 != 1.0)
        {
          v319 = v318 + -1.0;
          if (v318 < 1.0)
            v319 = 1.0 - v318;
          if (v319 > 0.000001)
            v311 = (int8x16_t)vmulq_n_f32((float32x4_t)v311, 1.0 / sqrtf(v318));
        }
        v320 = (float32x2_t *)((char *)a5 + 12 * v316);
        v312.i32[0] = *(_DWORD *)(v20 + 8);
        v321 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v311.i8, 1);
        v322 = (float32x2_t)vextq_s8(v311, v311, 8uLL).u64[0];
        v323 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v20, *(float32x2_t *)v311.i8), v321, *(float32x2_t *)v20, 1), v322, v312);
        v312 = *v320;
        v313.i32[0] = v320[1].i32[0];
        if (fabsf(vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*v320, *(float32x2_t *)v311.i8), v321, *v320, 1), v322, v313), v323).f32[0]) > 0.05)goto LABEL_406;
        v324 = v491;
        if ((unint64_t)v491 < v492)
        {
          *(_QWORD *)v491 = v316;
          v325 = (uint64_t)(v324 + 8);
          goto LABEL_435;
        }
        v326 = v490;
        v327 = (v491 - v490) >> 3;
        v328 = v327 + 1;
        if ((unint64_t)(v327 + 1) >> 61)
          sub_22367C394();
        v329 = v492 - (_QWORD)v490;
        if ((uint64_t)(v492 - (_QWORD)v490) >> 2 > v328)
          v328 = v329 >> 2;
        v330 = (unint64_t)v329 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v328;
        if (v330)
          break;
        v331 = 0;
        v332 = (char *)(8 * v327);
        *(_QWORD *)(8 * v327) = v316;
        v325 = 8 * v327 + 8;
        v333 = v324 - v326;
        if (v324 != v326)
          goto LABEL_427;
LABEL_433:
        v490 = v332;
        v492 = (unint64_t)&v331[8 * v330];
        if (v326)
          operator delete(v326);
LABEL_435:
        v491 = (char *)v325;
        v342 = (char *)v471 + 36 * v316;
        v345 = *((_DWORD *)v342 + 1);
        v343 = (unsigned int *)(v342 + 4);
        v344 = v345;
        if (v345 == -1 || (v346 = v32[v344 >> 6], (v346 & (1 << v344)) != 0))
        {
          v347 = v343[2];
          if ((_DWORD)v347 == -1)
            goto LABEL_487;
        }
        else
        {
          v32[v344 >> 6] = v346 | (1 << v344);
          v351 = v488;
          if (v488 >= v489)
          {
            v352 = v487;
            v353 = (v488 - v487) >> 3;
            v354 = v353 + 1;
            if ((unint64_t)(v353 + 1) >> 61)
              goto LABEL_603;
            v355 = v489 - v487;
            if ((v489 - v487) >> 2 > v354)
              v354 = v355 >> 2;
            if ((unint64_t)v355 >= 0x7FFFFFFFFFFFFFF8)
              v356 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v356 = v354;
            if (v356)
            {
              if (v356 >> 61)
                goto LABEL_608;
              v357 = v356;
              v358 = operator new(8 * v356);
              v356 = v357;
              v359 = (unint64_t *)&v358[8 * v353];
              *v359 = v344;
              v360 = (uint64_t)(v359 + 1);
              v361 = v351 - v352;
              if (v351 != v352)
              {
LABEL_453:
                v362 = v361 - 8;
                if (v362 < 0x58)
                  goto LABEL_626;
                if ((unint64_t)(v352 - v358) < 0x20)
                  goto LABEL_626;
                v373 = (v362 >> 3) + 1;
                v374 = 8 * (v373 & 0x3FFFFFFFFFFFFFFCLL);
                v375 = &v351[-v374];
                v359 = (unint64_t *)((char *)v359 - v374);
                v376 = (int8x16_t *)&v358[8 * v353 - 16];
                v377 = (int8x16_t *)(v351 - 16);
                v378 = v373 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v311 = *v377;
                  v376[-1] = v377[-1];
                  *v376 = v311;
                  v376 -= 2;
                  v377 -= 2;
                  v378 -= 4;
                }
                while (v378);
                v351 = v375;
                if (v373 != (v373 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_626:
                  do
                  {
                    v379 = *((_QWORD *)v351 - 1);
                    v351 -= 8;
                    *--v359 = v379;
                  }
                  while (v351 != v352);
                }
              }
            }
            else
            {
              v358 = 0;
              v359 = (unint64_t *)(8 * v353);
              *(_QWORD *)(8 * v353) = v344;
              v360 = 8 * v353 + 8;
              v361 = v351 - v352;
              if (v351 != v352)
                goto LABEL_453;
            }
            v487 = (char *)v359;
            v488 = (char *)v360;
            v489 = &v358[8 * v356];
            if (v352)
              operator delete(v352);
            v488 = (char *)v360;
            v347 = v343[2];
            if ((_DWORD)v347 == -1)
              goto LABEL_487;
            goto LABEL_438;
          }
          *(_QWORD *)v488 = v344;
          v488 = v351 + 8;
          v347 = v343[2];
          if ((_DWORD)v347 == -1)
            goto LABEL_487;
        }
LABEL_438:
        v348 = v32[v347 >> 6];
        if ((v348 & (1 << v347)) == 0)
        {
          v32[v347 >> 6] = v348 | (1 << v347);
          v349 = v488;
          if (v488 < v489)
          {
            *(_QWORD *)v488 = v347;
            v350 = (uint64_t)(v349 + 8);
LABEL_486:
            v488 = (char *)v350;
            goto LABEL_487;
          }
          v363 = v487;
          v364 = (v488 - v487) >> 3;
          v365 = v364 + 1;
          if ((unint64_t)(v364 + 1) >> 61)
            goto LABEL_603;
          v366 = v489 - v487;
          if ((v489 - v487) >> 2 > v365)
            v365 = v366 >> 2;
          if ((unint64_t)v366 >= 0x7FFFFFFFFFFFFFF8)
            v367 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v367 = v365;
          if (v367)
          {
            if (v367 >> 61)
              goto LABEL_608;
            v368 = v367;
            v369 = operator new(8 * v367);
            v367 = v368;
            v370 = (unint64_t *)&v369[8 * v364];
            *v370 = v347;
            v350 = (uint64_t)(v370 + 1);
            v371 = v349 - v363;
            if (v349 != v363)
            {
LABEL_464:
              v372 = v371 - 8;
              if (v372 < 0x58)
                goto LABEL_627;
              if ((unint64_t)(v363 - v369) < 0x20)
                goto LABEL_627;
              v380 = (v372 >> 3) + 1;
              v381 = 8 * (v380 & 0x3FFFFFFFFFFFFFFCLL);
              v382 = &v349[-v381];
              v370 = (unint64_t *)((char *)v370 - v381);
              v383 = (int8x16_t *)&v369[8 * v364 - 16];
              v384 = (int8x16_t *)(v349 - 16);
              v385 = v380 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v311 = *v384;
                v383[-1] = v384[-1];
                *v383 = v311;
                v383 -= 2;
                v384 -= 2;
                v385 -= 4;
              }
              while (v385);
              v349 = v382;
              if (v380 != (v380 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_627:
                do
                {
                  v386 = *((_QWORD *)v349 - 1);
                  v349 -= 8;
                  *--v370 = v386;
                }
                while (v349 != v363);
              }
            }
          }
          else
          {
            v369 = 0;
            v370 = (unint64_t *)(8 * v364);
            *(_QWORD *)(8 * v364) = v347;
            v350 = 8 * v364 + 8;
            v371 = v349 - v363;
            if (v349 != v363)
              goto LABEL_464;
          }
          v487 = (char *)v370;
          v488 = (char *)v350;
          v489 = &v369[8 * v367];
          if (v363)
            operator delete(v363);
          goto LABEL_486;
        }
LABEL_487:
        v387 = v343[4];
        if ((_DWORD)v387 == -1 || (v388 = v32[v387 >> 6], (v388 & (1 << v387)) != 0))
        {
          v389 = v343[6];
          if ((_DWORD)v389 == -1)
            goto LABEL_404;
          goto LABEL_490;
        }
        v32[v387 >> 6] = v388 | (1 << v387);
        v391 = v488;
        if (v488 < v489)
        {
          *(_QWORD *)v488 = v387;
          v488 = v391 + 8;
          v389 = v343[6];
          if ((_DWORD)v389 == -1)
            goto LABEL_404;
          goto LABEL_490;
        }
        v393 = v487;
        v394 = (v488 - v487) >> 3;
        v395 = v394 + 1;
        if ((unint64_t)(v394 + 1) >> 61)
          goto LABEL_603;
        v396 = v489 - v487;
        if ((v489 - v487) >> 2 > v395)
          v395 = v396 >> 2;
        if ((unint64_t)v396 >= 0x7FFFFFFFFFFFFFF8)
          v397 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v397 = v395;
        if (!v397)
        {
          v399 = 0;
          v400 = (unint64_t *)(8 * v394);
          *(_QWORD *)(8 * v394) = v387;
          v401 = 8 * v394 + 8;
          v402 = v391 - v393;
          if (v391 == v393)
            goto LABEL_528;
LABEL_506:
          v403 = v402 - 8;
          if (v403 < 0x58)
            goto LABEL_628;
          if ((unint64_t)(v393 - v399) < 0x20)
            goto LABEL_628;
          v413 = (v403 >> 3) + 1;
          v414 = 8 * (v413 & 0x3FFFFFFFFFFFFFFCLL);
          v415 = &v391[-v414];
          v400 = (unint64_t *)((char *)v400 - v414);
          v416 = (int8x16_t *)&v399[8 * v394 - 16];
          v417 = (int8x16_t *)(v391 - 16);
          v418 = v413 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v311 = *v417;
            v416[-1] = v417[-1];
            *v416 = v311;
            v416 -= 2;
            v417 -= 2;
            v418 -= 4;
          }
          while (v418);
          v391 = v415;
          if (v413 != (v413 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_628:
            do
            {
              v419 = *((_QWORD *)v391 - 1);
              v391 -= 8;
              *--v400 = v419;
            }
            while (v391 != v393);
          }
          goto LABEL_528;
        }
        if (v397 >> 61)
          goto LABEL_608;
        v398 = v397;
        v399 = operator new(8 * v397);
        v397 = v398;
        v400 = (unint64_t *)&v399[8 * v394];
        *v400 = v387;
        v401 = (uint64_t)(v400 + 1);
        v402 = v391 - v393;
        if (v391 != v393)
          goto LABEL_506;
LABEL_528:
        v487 = (char *)v400;
        v488 = (char *)v401;
        v489 = &v399[8 * v397];
        if (v393)
          operator delete(v393);
        v488 = (char *)v401;
        v389 = v343[6];
        if ((_DWORD)v389 == -1)
        {
LABEL_404:
          v307 = v488;
          v20 = v464;
          goto LABEL_405;
        }
LABEL_490:
        v390 = v32[v389 >> 6];
        v307 = v488;
        if ((v390 & (1 << v389)) == 0)
        {
          v32[v389 >> 6] = v390 | (1 << v389);
          if (v307 < v489)
          {
            *(_QWORD *)v307 = v389;
            v392 = (uint64_t)(v307 + 8);
            v20 = v464;
LABEL_539:
            v488 = (char *)v392;
            v307 = (char *)v392;
            goto LABEL_405;
          }
          v404 = v487;
          v405 = (v307 - v487) >> 3;
          v406 = v405 + 1;
          if ((unint64_t)(v405 + 1) >> 61)
LABEL_603:
            sub_22367C394();
          v407 = v489 - v487;
          if ((v489 - v487) >> 2 > v406)
            v406 = v407 >> 2;
          if ((unint64_t)v407 >= 0x7FFFFFFFFFFFFFF8)
            v408 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v408 = v406;
          if (v408)
          {
            if (v408 >> 61)
LABEL_608:
              sub_223174E94();
            v409 = operator new(8 * v408);
            v410 = (unint64_t *)&v409[8 * v405];
            *v410 = v389;
            v392 = (uint64_t)(v410 + 1);
            v411 = v307 - v404;
            if (v307 != v404)
            {
LABEL_517:
              v412 = v411 - 8;
              v20 = v464;
              if (v412 < 0x58)
                goto LABEL_629;
              if ((unint64_t)(v404 - v409) < 0x20)
                goto LABEL_629;
              v420 = (v412 >> 3) + 1;
              v421 = 8 * (v420 & 0x3FFFFFFFFFFFFFFCLL);
              v422 = &v307[-v421];
              v410 = (unint64_t *)((char *)v410 - v421);
              v423 = (int8x16_t *)&v409[8 * v405 - 16];
              v424 = (int8x16_t *)(v307 - 16);
              v425 = v420 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v311 = *v424;
                v423[-1] = v424[-1];
                *v423 = v311;
                v423 -= 2;
                v424 -= 2;
                v425 -= 4;
              }
              while (v425);
              v307 = v422;
              if (v420 != (v420 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_629:
                do
                {
                  v426 = *((_QWORD *)v307 - 1);
                  v307 -= 8;
                  *--v410 = v426;
                }
                while (v307 != v404);
              }
              goto LABEL_537;
            }
          }
          else
          {
            v409 = 0;
            v410 = (unint64_t *)(8 * v405);
            *(_QWORD *)(8 * v405) = v389;
            v392 = 8 * v405 + 8;
            v411 = v307 - v404;
            if (v307 != v404)
              goto LABEL_517;
          }
          v20 = v464;
LABEL_537:
          v487 = (char *)v410;
          v488 = (char *)v392;
          v489 = &v409[8 * v408];
          if (v404)
            operator delete(v404);
          goto LABEL_539;
        }
        v20 = v464;
LABEL_405:
        v310 = v487;
LABEL_406:
        if (v310 == v307)
          goto LABEL_569;
      }
      if (v330 >> 61)
        sub_223174E94();
      v331 = operator new(8 * v330);
      v332 = &v331[8 * v327];
      *(_QWORD *)v332 = v316;
      v325 = (uint64_t)(v332 + 8);
      v333 = v324 - v326;
      if (v324 == v326)
        goto LABEL_433;
LABEL_427:
      v334 = v333 - 8;
      if (v334 < 0x58)
        goto LABEL_630;
      if ((unint64_t)(v326 - v331) < 0x20)
        goto LABEL_630;
      v335 = (v334 >> 3) + 1;
      v336 = 8 * (v335 & 0x3FFFFFFFFFFFFFFCLL);
      v337 = &v324[-v336];
      v332 -= v336;
      v338 = (int8x16_t *)&v331[8 * v327 - 16];
      v339 = (int8x16_t *)(v324 - 16);
      v340 = v335 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v311 = *v339;
        v338[-1] = v339[-1];
        *v338 = v311;
        v338 -= 2;
        v339 -= 2;
        v340 -= 4;
      }
      while (v340);
      v324 = v337;
      if (v335 != (v335 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_630:
        do
        {
          v341 = *((_QWORD *)v324 - 1);
          v324 -= 8;
          *((_QWORD *)v332 - 1) = v341;
          v332 -= 8;
        }
        while (v324 != v326);
      }
      goto LABEL_433;
    }
LABEL_569:
    v435 = v490;
    v434 = v491;
    v24 = v461;
    if ((unint64_t)(v491 - v490) >= 0x30)
    {
      if (v490 != v491)
      {
        v436 = v493;
        v437 = (unint64_t *)v490;
        do
        {
          v438 = *v437++;
          *(_QWORD *)((char *)v436 + ((v438 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v438;
        }
        while (v437 != (unint64_t *)v434);
      }
      v439 = *(float32x2_t *)v20;
      *(_DWORD *)&v473[8] = *(_DWORD *)(v20 + 8);
      *(float32x2_t *)v473 = v439;
      v440 = *(_QWORD *)(v20 + 12);
      *(_DWORD *)&v473[20] = *(_DWORD *)(v20 + 20);
      *(_QWORD *)&v473[12] = v440;
      LODWORD(v440) = *(_DWORD *)(v20 + 56);
      v441 = *(_OWORD *)(v20 + 40);
      v474 = *(_OWORD *)(v20 + 24);
      v475 = v441;
      v476 = v440;
      __p[0] = v435;
      __p[1] = v434;
      v478 = (char *)v492;
      v490 = 0;
      v491 = 0;
      v492 = 0;
      v442 = v486;
      if ((unint64_t)v486 >= *((_QWORD *)&v486 + 1))
      {
        *(_QWORD *)&v486 = sub_223FA9CD0((uint64_t *)&v485, (uint64_t)v473);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      else
      {
        v443 = *(_QWORD *)v473;
        *(_DWORD *)(v486 + 8) = *(_DWORD *)&v473[8];
        *(_QWORD *)v442 = v443;
        v444 = *(_QWORD *)&v473[12];
        *(_DWORD *)(v442 + 20) = *(_DWORD *)&v473[20];
        *(_QWORD *)(v442 + 12) = v444;
        v445 = v474;
        v446 = v475;
        *(_DWORD *)(v442 + 56) = v476;
        *(_OWORD *)(v442 + 40) = v446;
        *(_OWORD *)(v442 + 24) = v445;
        *(_QWORD *)(v442 + 64) = 0;
        *(_QWORD *)(v442 + 72) = 0;
        *(_QWORD *)(v442 + 80) = 0;
        *(_OWORD *)(v442 + 64) = *(_OWORD *)__p;
        *(_QWORD *)(v442 + 80) = v478;
        *(_QWORD *)&v486 = v442 + 88;
      }
      v307 = v487;
    }
    if (v307)
    {
      v488 = v307;
      operator delete(v307);
    }
    v447 = (_QWORD *)v483;
    if ((_QWORD)v483)
    {
      do
      {
        v448 = (_QWORD *)*v447;
        operator delete(v447);
        v447 = v448;
      }
      while (v448);
    }
    v449 = (void *)v482;
    *(_QWORD *)&v482 = 0;
    if (v449)
      operator delete(v449);
    if (v490)
      operator delete(v490);
    v20 += 88;
    if (v20 != v459)
      continue;
    break;
  }
  if (v32)
    operator delete(v32);
  if (v493)
    operator delete(v493);
  v450 = (char *)v467;
  if (v467)
  {
    v451 = (char *)v468;
    v452 = v467;
    if ((void *)v468 != v467)
    {
      do
      {
        v453 = (void *)*((_QWORD *)v451 - 3);
        if (v453)
        {
          *((_QWORD *)v451 - 2) = v453;
          operator delete(v453);
        }
        v451 -= 88;
      }
      while (v451 != v450);
      v452 = v467;
    }
    *(_QWORD *)&v468 = v450;
    operator delete(v452);
  }
  v467 = v485;
  v468 = v486;
  if (v485 != (char *)v486)
    goto LABEL_335;
LABEL_599:
  *a8 = 0;
  a8[1] = 0;
  a8[2] = 0;
  v283 = (char *)v467;
  if (!v467)
    goto LABEL_344;
LABEL_337:
  v284 = (char *)v468;
  v285 = v283;
  if ((char *)v468 != v283)
  {
    do
    {
      v286 = (void *)*((_QWORD *)v284 - 3);
      if (v286)
      {
        *((_QWORD *)v284 - 2) = v286;
        operator delete(v286);
      }
      v284 -= 88;
    }
    while (v284 != v283);
    v285 = v467;
  }
  *(_QWORD *)&v468 = v283;
  operator delete(v285);
LABEL_344:
  v21 = v469;
  if (v469)
  {
LABEL_345:
    for (i = (char *)v470; i != v21; i -= 88)
    {
      v288 = (void *)*((_QWORD *)i - 3);
      if (v288)
      {
        *((_QWORD *)i - 2) = v288;
        operator delete(v288);
      }
    }
    *(_QWORD *)&v470 = v21;
    operator delete(v21);
  }
LABEL_351:
  if (v471)
  {
    v472 = (unsigned int *)v471;
    operator delete(v471);
  }
}

void sub_223FA99E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47)
{
  uint64_t v47;
  void *v49;

  v49 = *(void **)(v47 - 128);
  if (v49)
    operator delete(v49);
  sub_223EDC8F4(&a24);
  sub_223EDC8F4(&a27);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_223FA9BA8()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x223FA9AF0);
  JUMPOUT(0x223FA9AF4);
}

void sub_223FA9BC8()
{
  void *v0;
  uint64_t v1;
  void *v2;

  sub_22322E828(v1 - 240);
  v2 = *(void **)(v1 - 152);
  if (v2)
  {
    *(_QWORD *)(v1 - 144) = v2;
    operator delete(v2);
    sub_223EDC8F4((void **)(v1 - 200));
    if (v0)
    {
      operator delete(v0);
      if (*(_QWORD *)(v1 - 128))
        JUMPOUT(0x223FA9B68);
      JUMPOUT(0x223FA9B6CLL);
    }
    JUMPOUT(0x223FA9B60);
  }
  JUMPOUT(0x223FA9B54);
}

void sub_223FA9BE8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 - 200))
    JUMPOUT(0x223FA9A98);
  JUMPOUT(0x223FA9A78);
}

void sub_223FA9BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (!a21)
    JUMPOUT(0x223FA9AF4);
  JUMPOUT(0x223FA9AB4);
}

void sub_223FA9C10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47)
{
  uint64_t v47;

  if (__p)
  {
    operator delete(__p);
    if (!*(_QWORD *)(v47 - 224))
      JUMPOUT(0x223FA9A64);
    JUMPOUT(0x223FA9A54);
  }
  JUMPOUT(0x223FA9A4CLL);
}

void sub_223FA9C24()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 - 176))
    JUMPOUT(0x223FA9C30);
  JUMPOUT(0x223FA9B44);
}

void sub_223FA9C4C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 - 200))
    JUMPOUT(0x223FA9A98);
  JUMPOUT(0x223FA9A78);
}

void sub_223FA9C5C()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 224))
    JUMPOUT(0x223FA9A64);
  JUMPOUT(0x223FA9A54);
}

void sub_223FA9C6C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  void *v46;

  operator delete(v46);
  if (a46)
    JUMPOUT(0x223FA9C80);
  JUMPOUT(0x223FA9A4CLL);
}

void sub_223FA9C94()
{
  uint64_t v0;

  sub_22322E828(v0 - 240);
  if (*(_QWORD *)(v0 - 152))
    JUMPOUT(0x223FA9CA8);
  JUMPOUT(0x223FA9B54);
}

uint64_t sub_223FA9CD0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void *v11;
  void *v13;
  uint64_t v14;

  v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_22316E078();
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL)
    v5 = 0x2E8BA2E8BA2E8BALL;
  else
    v5 = v4;
  if (v5 > 0x2E8BA2E8BA2E8BALL)
    sub_223174E94();
  v7 = 88 * v5;
  v13 = operator new(88 * v5);
  v14 = (uint64_t)v13 + 88 * v3;
  *(_QWORD *)v14 = *(_QWORD *)a2;
  *(_DWORD *)(v14 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(v14 + 12) = *(_QWORD *)(a2 + 12);
  *(_DWORD *)(v14 + 20) = *(_DWORD *)(a2 + 20);
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(v14 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(v14 + 72) = 0;
  *(_QWORD *)(v14 + 80) = 0;
  *(_OWORD *)(v14 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(v14 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  sub_223FA9EE4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, v14, v14);
  v8 = (char *)*a1;
  v9 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v14 + 88;
  a1[2] = (uint64_t)v13 + v7;
  while (v9 != v8)
  {
    v11 = (void *)*((_QWORD *)v9 - 3);
    if (v11)
    {
      *((_QWORD *)v9 - 2) = v11;
      operator delete(v11);
    }
    v9 -= 88;
  }
  if (v8)
    operator delete(v8);
  return v14 + 88;
}

void sub_223FA9E64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223FA9E78((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223FA9E78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 88;
        *(_QWORD *)(a1 + 16) = v2 - 88;
        v5 = *(void **)(v2 - 24);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 88;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_223FA9EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int64_t v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;

  v7 = a7;
  v21 = a6;
  v22 = a7;
  if (a3 != a5)
  {
    v9 = a3;
    do
    {
      v11 = *(_QWORD *)(v9 - 88);
      v9 -= 88;
      *(_DWORD *)(v7 - 80) = *(_DWORD *)(v9 + 8);
      *(_QWORD *)(v7 - 88) = v11;
      v12 = *(_QWORD *)(v9 + 12);
      *(_DWORD *)(v7 - 68) = *(_DWORD *)(v9 + 20);
      *(_QWORD *)(v7 - 76) = v12;
      v13 = *(_OWORD *)(v9 + 24);
      v14 = *(_OWORD *)(v9 + 40);
      LODWORD(v12) = *(_DWORD *)(v9 + 56);
      *(_QWORD *)(v7 - 24) = 0;
      v15 = v7 - 24;
      *(_DWORD *)(v7 - 32) = v12;
      *(_OWORD *)(v7 - 48) = v14;
      *(_OWORD *)(v7 - 64) = v13;
      *(_QWORD *)(v15 + 8) = 0;
      *(_QWORD *)(v15 + 16) = 0;
      v17 = *(_BYTE **)(v9 + 64);
      v16 = *(_BYTE **)(v9 + 72);
      v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0)
          sub_22367C394();
        v19 = (char *)operator new(v16 - v17);
        *(_QWORD *)(v7 - 24) = v19;
        *(_QWORD *)(v7 - 16) = v19;
        v10 = &v19[8 * (v18 >> 3)];
        *(_QWORD *)(v7 - 8) = v10;
        memcpy(v19, v17, v18);
        *(_QWORD *)(v7 - 16) = v10;
      }
      v7 = v22 - 88;
      v22 -= 88;
    }
    while (v9 != a5);
    return v21;
  }
  return a6;
}

void sub_223FA9FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;
  void *v12;

  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v9 - 16) = v12;
    operator delete(v12);
  }
  sub_223FAA020((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223FAA020(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 + 64);
      if (v5)
      {
        *(_QWORD *)(v3 + 72) = v5;
        operator delete(v5);
      }
      v3 += 88;
    }
  }
  return a1;
}

void ***sub_223FAA080@<X0>(void ***result@<X0>, float32x2_t *a2@<X1>, float32x2_t *a3@<X2>, uint64_t a4@<X8>)
{
  float32x2_t v5;
  float32x2_t v6;
  void ***v7;
  float32x2_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  float32x2_t v15;
  void **v16;

  v5 = a3[2];
  v6 = a3[3];
  v13 = 0uLL;
  v14 = 0;
  if (result)
  {
    v7 = result;
    if ((unint64_t)result >> 61)
      sub_22316E078();
    *(_QWORD *)&v13 = operator new(8 * (_QWORD)result);
    *((_QWORD *)&v13 + 1) = v13;
    v14 = v13 + 8 * (_QWORD)v7;
    v16 = (void **)&v13;
    v10 = 12 * (_QWORD)v7;
    do
    {
      v9.i32[0] = a2[1].i32[0];
      v9.f32[0] = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*a2, *a2), (float32x2_t)vdup_lane_s32((int32x2_t)*a2, 1), *a2, 1), v9, v9).f32[0]);
      v15 = vadd_f32(v6, vdiv_f32(vmul_f32(v5, *a2), (float32x2_t)vdup_lane_s32((int32x2_t)v9, 0)));
      result = sub_2232EA538(&v16, &v15);
      a2 = (float32x2_t *)((char *)a2 + 12);
      v10 -= 12;
    }
    while (v10);
    v11 = v13;
    v12 = v14;
  }
  else
  {
    v12 = 0;
    v11 = 0uLL;
  }
  *(_OWORD *)a4 = v11;
  *(_QWORD *)(a4 + 16) = v12;
  return result;
}

void sub_223FAA168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223FAA188(unsigned int **a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, float a5@<S0>, int8x16_t _Q1@<Q1>, __n128 a7@<Q2>, int8x16_t a8@<Q3>, int8x16_t a9@<Q6>)
{
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  float32x4_t v12;
  int8x16_t v13;
  __int128 v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  size_t v34;
  unint64_t *v35;
  float32x4_t v36;
  unint64_t v37;
  uint64_t v38;
  int8x16_t v39;
  __int32 v40;
  __int32 v41;
  unint64_t *v42;
  float32x4_t v43;
  __int32 v44;
  __int32 v45;
  unsigned __int32 v46;
  unsigned __int32 v47;
  float32x2_t *v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  float32x2_t v52;
  float32x4_t v53;
  float32x2_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x4_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int64x2_t v61;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  __int128 v73;
  float32x2_t v74;
  float32x4_t v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  int8x16_t v84;
  float v85;
  float v86;
  int8x16_t v87;
  int8x16_t v88;
  float v89;
  float v91;
  float32x4_t v92;
  unsigned int v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float32x4_t v98;
  float32x4_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  int8x16_t v107;
  int8x16_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  float32x4_t v113;
  int32x2_t v114;
  int32x2_t v115;
  float v116;
  int32x2_t v117;
  uint64_t v118;
  float v119;
  _BYTE *v120;
  int8x16_t v121;
  uint64_t v122;
  uint64_t v123;
  int8x16_t v124;
  int8x16_t v125;
  float32x2_t v126;
  float v127;
  int8x16_t v128;
  float v129;
  unsigned int v130;
  float v131;
  int8x16_t v132;
  float v133;
  __int32 v134;
  uint64_t *v135;
  int8x16_t v136;
  float32x2_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float v141;
  int v142;
  unsigned int v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float32x4_t v149;
  float v150;
  float v151;
  float32x4_t v152;
  float v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  float32x4_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  float32x2_t v165;
  float32x2_t v166;
  float32x2_t v167;
  int32x2_t v168;
  int8x16_t v169;
  float v170;
  int32x2_t v171;
  uint64_t v172;
  float v173;
  _BYTE *v174;
  int8x16_t v175;
  float32x4_t v176;
  int8x16_t v177;
  float32x2_t v178;
  float32x4_t v179;
  int8x16_t v180;
  float32x2_t v181;
  float32x2_t v182;
  float32x2_t v183;
  int32x2_t v184;
  int32x2_t v185;
  float v186;
  int32x2_t v187;
  uint64_t v188;
  float v189;
  _BYTE *v190;
  int8x16_t v191;
  float v192;
  float v193;
  __int8 *v194;
  float32x4_t v195;
  char v196;
  float v197;
  int8x16_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  __int128 v202;
  uint64_t v203;
  float32x4_t v204;
  float32x4_t v205;
  int8x16_t v206;
  float32x4_t v207;
  int8x16_t v208;
  int8x16_t v209;
  int8x16_t v210;
  float32x4_t v211;
  float32x2_t v212;
  float32x4_t v213;
  int8x16_t v214;
  float32x2_t v215;
  float32x2_t v216;
  float32x2_t v217;
  float v218;
  int32x2_t v219;
  uint64_t v220;
  float v221;
  _BYTE *v222;
  float v223;
  float32x4_t v224;
  int8x16_t v225;
  float32x2_t v226;
  float32x2_t v227;
  float32x2_t v228;
  float32x2_t v229;
  float32x2_t v230;
  float32x2_t v231;
  float32x2_t v232;
  int32x2_t v233;
  int32x2_t v234;
  float v235;
  int32x2_t v236;
  uint64_t v237;
  float v238;
  float *v239;
  _BYTE *v240;
  int8x16_t v241;
  float32x4_t v242;
  float32x4_t v243;
  int8x16_t v244;
  int8x16_t v245;
  int8x16_t v246;
  int8x16_t v247;
  int8x16_t v248;
  int8x16_t v249;
  int8x16_t v250;
  float32x2_t v251;
  float32x2_t v252;
  float32x2_t v253;
  float32x2_t v254;
  int32x2_t v255;
  int32x2_t v256;
  int32x2_t v257;
  uint64_t v258;
  float v259;
  _BYTE *v260;
  float v261;
  float32x4_t v262;
  int8x16_t v263;
  float32x2_t v264;
  float32x4_t v265;
  float32x2_t v266;
  float32x2_t v267;
  float32x2_t v268;
  float32x2_t v269;
  float32x2_t v270;
  float32x4_t v271;
  float32x2_t v272;
  int32x2_t v273;
  int32x2_t v274;
  float v275;
  int32x2_t v276;
  uint64_t v277;
  float v278;
  float *v279;
  _BYTE *v280;
  int8x16_t v281;
  float32x4_t v282;
  int8x16_t v283;
  int8x16_t v284;
  float v285;
  __int128 v287;
  int8x16_t v288;
  float32x4_t v289;
  int8x16_t v290;
  float32x2_t v291;
  float32x4_t v292;
  float32x4_t v293;
  int8x16_t v294;
  int8x16_t v295;
  int8x16_t v296;
  int8x16_t v298;
  int8x16_t v299;
  __n128 v300;
  __int128 v301;
  int8x16_t v302;
  int8x16_t v303;
  __n128 v304;
  __int128 v305;
  int8x16_t v306;
  int8x16_t v307;
  __n128 v308;
  __int128 v309;
  int8x16_t v310;
  int8x16_t v311;
  __n128 v312;
  __int128 v313;
  int8x16_t v314;
  int8x16_t v315;
  int8x16_t v316;
  __int128 v317;
  int8x16_t v318;
  int8x16_t v319;
  int8x16_t v320;
  __int128 v321;
  int8x16_t v322;
  int8x16_t v323;
  int8x16_t v324;
  __int128 v325;
  int8x16_t v326;
  int8x16_t v327;
  int8x16_t v328;
  __int128 v329;
  int8x16_t v330;
  int8x16_t v331;
  int8x16_t v332;
  __int128 v333;
  uint64_t v334;
  __int32 v335;
  uint64_t v336;
  __int32 v337;
  _BYTE v338[32];
  __int32 v339;
  void *__p[2];
  uint64_t v341;
  char v342;
  float v343;
  float v344;
  float v345;
  int8x16_t v346;
  __n128 v347;
  int v348;
  int32x2_t v349;
  float v350;
  _BYTE v351[32];
  __int32 v352;

  v285 = *(float *)_Q1.i32;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v16 = *a1;
  v15 = a1[1];
  if (*a1 != v15)
  {
    while (1)
    {
      v20 = v16[3];
      if (v20 != -1)
      {
        v21 = v16[7];
        if (v21 != -1)
          break;
      }
      v31 = 0;
LABEL_126:
      if (v31)
        operator delete(v31);
      v16 += 9;
      if (v16 == v15)
        return;
    }
    v22 = *a1;
    v23 = &(*a1)[9 * v20];
    v24 = v23[7];
    if ((_DWORD)v24 == -1 || (v25 = v22[9 * v21 + 3], v25 == -1) || v22[9 * v25] != (_DWORD)v24)
    {
      v31 = 0;
      v32 = 0;
    }
    else
    {
      v26 = v15;
      v27 = v16;
      v28 = *v16;
      v29 = *v23;
      v30 = v22[9 * v21];
      v31 = (char *)operator new(0x20uLL);
      v32 = v31 + 32;
      *(_QWORD *)v31 = v28;
      *((_QWORD *)v31 + 1) = v29;
      *((_QWORD *)v31 + 2) = v30;
      *((_QWORD *)v31 + 3) = v24;
      v15 = v26;
      v16 = v27;
    }
    if (v32 - v31 != 32)
      goto LABEL_126;
    v33 = v31;
    if (v31 == v32)
      goto LABEL_125;
    v34 = (v32 - v31) >> 3;
    v35 = (unint64_t *)v31;
    *(_QWORD *)v351 = v31;
    *(_QWORD *)&v351[8] = a3;
    v36 = 0uLL;
    *(_QWORD *)&v351[16] = a2;
    do
    {
      v37 = *v35;
      if (a2 <= *v35)
LABEL_129:
        sub_22457354C((unint64_t *)&v351[16], v37);
      v38 = a3 + 12 * v37;
      _Q1.i64[0] = *(_QWORD *)v38;
      _Q1.i32[2] = *(_DWORD *)(v38 + 8);
      v36 = vaddq_f32(v36, (float32x4_t)_Q1);
      *(_QWORD *)v351 = ++v35;
    }
    while (v35 != (unint64_t *)v32);
    *(float *)a8.i32 = (float)(unint64_t)-((v31 - v32) >> 3);
    v43 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.i8, 0);
    v39 = (int8x16_t)vdivq_f32(v36, v43);
    v36.i32[0] = 0;
    v40 = 0;
    v41 = 0;
    v42 = (unint64_t *)v31;
    *(_QWORD *)v351 = v31;
    *(_QWORD *)&v351[8] = a3;
    *(_QWORD *)&v351[16] = a2;
    v43.i32[0] = 0;
    v44 = 0;
    v45 = 0;
    a7.n128_u32[0] = 0;
    v46 = 0;
    v47 = 0;
    do
    {
      v37 = *v42;
      if (a2 <= *v42)
        goto LABEL_129;
      v48 = (float32x2_t *)(a3 + 12 * v37);
      v9.i32[0] = v48[1].i32[0];
      *(float32x2_t *)v10.i8 = *v48;
      v10.i32[2] = v9.i32[0];
      *(float32x2_t *)v49.f32 = vmul_n_f32(*(float32x2_t *)v10.i8, *(float *)v10.i32);
      *(float32x2_t *)&v49.u32[2] = vmul_f32(*(float32x2_t *)v9.i8, *v48);
      *(float32x2_t *)v50.f32 = vmul_lane_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8, 1);
      *(float32x2_t *)&v50.u32[2] = vmul_lane_f32(*(float32x2_t *)v9.i8, *v48, 1);
      *(float32x2_t *)v9.i8 = vmul_n_f32(*v48, *(float *)v9.i32);
      v10 = (int8x16_t)vdupq_laneq_s32((int32x4_t)vmulq_f32((float32x4_t)v10, (float32x4_t)v10), 2);
      v9.i32[2] = v10.i32[0];
      v36.i32[1] = v40;
      v36.i32[2] = v41;
      v43.i32[1] = v44;
      v43.i32[2] = v45;
      a7.n128_u32[1] = v46;
      a7.n128_u32[2] = v47;
      v36 = vaddq_f32(v36, v49);
      v41 = v36.i32[2];
      v40 = v36.i32[1];
      v43 = vaddq_f32(v43, v50);
      v45 = v43.i32[2];
      v44 = v43.i32[1];
      a7 = (__n128)vaddq_f32((float32x4_t)a7, (float32x4_t)v9);
      v47 = a7.n128_u32[2];
      v46 = a7.n128_u32[1];
      *(_QWORD *)v351 = ++v42;
    }
    while (v42 != (unint64_t *)v32);
    *(float *)a8.i32 = sqrtf(*(float *)a8.i32);
    v51 = (int8x16_t)vmulq_n_f32((float32x4_t)v39, *(float *)a8.i32);
    v52 = vmul_lane_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)v39.i8, 1);
    *(float32x2_t *)v53.f32 = vmul_n_f32(*(float32x2_t *)v51.i8, *(float *)v51.i32);
    v54 = (float32x2_t)vextq_s8(v51, v51, 8uLL).u64[0];
    *(float32x2_t *)&v53.u32[2] = vmul_f32(v54, *(float32x2_t *)v51.i8);
    *(float32x2_t *)v55.f32 = vmul_n_f32(*(float32x2_t *)v51.i8, v52.f32[0]);
    *(float32x2_t *)a9.i8 = vmul_f32(v54, v52);
    v55.i64[1] = a9.i64[0];
    v56 = vmul_f32(*(float32x2_t *)a8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL));
    *(float32x2_t *)v51.i8 = vmul_n_f32(*(float32x2_t *)v51.i8, v56.f32[0]);
    v51.u64[1] = (unint64_t)vmul_f32(v54, v56);
    v57 = vsubq_f32(v36, v53);
    v58 = (int8x16_t)vsubq_f32(v43, v55);
    v13.i32[0] = v58.i32[1];
    v59 = (int8x16_t)vsubq_f32((float32x4_t)a7, (float32x4_t)v51);
    v11.i32[0] = v59.i32[2];
    LODWORD(v14) = v59.i32[1];
    v60 = (int8x16_t)v57;
    v60.i32[3] = v58.i32[0];
    _Q1 = vextq_s8(v58, v58, 0xCuLL);
    v61 = (int64x2_t)vextq_s8(_Q1, v59, 8uLL);
    if (*(float *)&v59.i32[1] == 0.0 && *(float *)v58.i32 == 0.0 && *(float *)&v61.i32[2] == 0.0)
    {
      v343 = v57.f32[0];
      v344 = *(float *)&v58.i32[1];
      v345 = *(float *)&v59.i32[2];
      v346.i32[3] = 0;
      *(unint64_t *)((char *)v347.n128_u64 + 4) = 0;
      v347.n128_u32[3] = 0;
      *(uint64_t *)((char *)v346.i64 + 4) = 0;
      v346.i32[0] = 1065353216;
      v347.n128_u32[0] = 1065353216;
      v348 = 1065353216;
      if (*(float *)&v58.i32[1] >= v57.f32[0])
      {
        a8.i64[0] = 0x3F80000000000000;
        a7.n128_u64[0] = 0;
        _Q1.i32[0] = v57.i32[0];
        if (*(float *)&v58.i32[1] <= *(float *)&v59.i32[2])
        {
LABEL_25:
          v11.i32[0] = v13.i32[0];
          if (*(float *)_Q1.i32 <= *(float *)v13.i32)
            goto LABEL_89;
LABEL_32:
          a8.i32[0] = vdupq_laneq_s32((int32x4_t)v346, 3).u32[0];
          *(uint64_t *)((char *)a8.i64 + 4) = v347.n128_u64[0];
          a8.i32[3] = v346.i32[0];
          v343 = *(float *)v11.i32;
          v344 = *(float *)_Q1.i32;
          a7.n128_u64[1] = vextq_s8((int8x16_t)v347, (int8x16_t)v347, 8uLL).u64[0];
          v346 = a8;
          v347 = a7;
          v89 = v345;
          _NF = v345 < 0.0;
          if (v345 != 0.0)
            goto LABEL_90;
          goto LABEL_125;
        }
      }
      else
      {
        __asm { FMOV            V1.4S, #1.0 }
        _Q1.i32[0] = *(_DWORD *)((unint64_t)&v346 | 0xC);
        v343 = *(float *)&v58.i32[1];
        a7 = v347;
        v65 = 0;
        v66 = 0;
        v67 = 0;
        v68 = 0;
        v69 = 0;
        v70 = 0;
        v71 = 0;
        v72 = 0;
        a8.i64[1] = v347.n128_i64[1];
        *(uint64_t *)((char *)_Q1.i64 + 4) = v347.n128_u64[0];
        v344 = v57.f32[0];
        v346 = _Q1;
        v347 = (__n128)a8;
        a8.i64[0] = 1065353216;
        _Q1.i32[0] = v58.i32[1];
        v13.i32[0] = v57.i32[0];
        if (v57.f32[0] <= *(float *)&v59.i32[2])
          goto LABEL_25;
      }
      v344 = *(float *)&v59.i32[2];
      v345 = *(float *)v13.i32;
      v60.i32[0] = v348;
      v87 = v346;
      a7 = (__n128)vextq_s8(v87, v87, 8uLL);
      a7.n128_u64[0] = (unint64_t)vext_s8(*(int8x8_t *)v346.i8, (int8x8_t)a7.n128_u64[0], 4uLL);
      v87.i32[3] = v347.n128_i32[2];
      v88.i64[0] = vextq_s8((int8x16_t)v347, v60, 0xCuLL).u64[0];
      v88.i64[1] = a8.i64[0];
      v348 = 0;
      v346 = v87;
      v347 = (__n128)v88;
      if (*(float *)_Q1.i32 <= *(float *)&v59.i32[2])
        goto LABEL_89;
      goto LABEL_32;
    }
    *((_QWORD *)&v73 + 1) = v61.i64[0];
    *(_QWORD *)&v73 = v60.i64[1];
    v74 = (float32x2_t)(v73 >> 32);
    v75.i64[0] = vdupq_laneq_s64(v61, 1).u64[0];
    v75.i64[1] = vdupq_laneq_s32((int32x4_t)v59, 2).u32[0];
    *(float *)v61.i32 = *(float *)&v59.i32[2] + (float)(*(float *)&v58.i32[1] + v57.f32[0]);
    v76 = (float)((float)((float)((float)(*(float *)&v59.i32[2] * v57.f32[0])
                                + (float)((float)(*(float *)&v58.i32[1] * *(float *)&v59.i32[2])
                                        + (float)(*(float *)&v58.i32[1] * v57.f32[0])))
                        - (float)(*(float *)v58.i32 * *(float *)v58.i32))
                - (float)(*(float *)&v61.i32[2] * *(float *)&v61.i32[2]))
        - (float)(*(float *)&v59.i32[1] * *(float *)&v59.i32[1]);
    v77 = (float)(*(float *)v61.i32 * *(float *)v61.i32) + (float)(v76 * -3.0);
    v78 = (float)((float)((float)((float)((float)(*(float *)&v59.i32[2] * *(float *)v58.i32) * *(float *)v58.i32)
                                + (float)((float)((float)(*(float *)&v58.i32[1] * *(float *)&v61.i32[2])
                                                * *(float *)&v61.i32[2])
                                        + (float)((float)(*(float *)&v59.i32[1]
                                                        * (float)(*(float *)&v59.i32[1] * v57.f32[0]))
                                                - (float)(*(float *)&v59.i32[2]
                                                        * (float)(*(float *)&v58.i32[1] * v57.f32[0])))))
                        - (float)(*(float *)&v59.i32[1]
                                * (float)((float)(*(float *)v58.i32 + *(float *)v58.i32) * *(float *)&v61.i32[2])))
                * 27.0)
        - (float)(*(float *)v61.i32
                * (float)((float)((float)(*(float *)v61.i32 * *(float *)v61.i32)
                                + (float)(*(float *)v61.i32 * *(float *)v61.i32))
                        - (float)(v76 * 9.0)));
    *(float *)_Q1.i32 = v77 / 9.0;
    *(float *)v60.i32 = v78 / 54.0;
    v79 = *(float *)v61.i32 / -3.0;
    v12.i32[0] = v75.i32[2];
    if ((float)((float)((float)(v78 * v78) * 729.0) + (float)((float)(v77 * (float)(v77 * v77)) * -2916.0)) >= 0.0)
    {
      if (*(float *)_Q1.i32 < 0.0)
        *(float *)_Q1.i32 = 0.0;
      *(float *)_Q1.i32 = sqrtf(*(float *)_Q1.i32);
      v84.i64[0] = 0x8000000080000000;
      v84.i64[1] = 0x8000000080000000;
      _Q1.i64[0] = vbslq_s8(v84, _Q1, v60).u64[0];
      *(float *)v84.i32 = *(float *)_Q1.i32 - v79;
      v343 = (float)(*(float *)_Q1.i32 * -2.0) - v79;
      v344 = *(float *)_Q1.i32 - v79;
      v345 = *(float *)_Q1.i32 - v79;
      v91 = *(float *)_Q1.i32 - v79;
      if (v343 > (float)(*(float *)_Q1.i32 - v79))
      {
        v343 = *(float *)_Q1.i32 - v79;
        v345 = (float)(*(float *)_Q1.i32 * -2.0) - v79;
        v91 = v345;
      }
      v92.i32[0] = v74.i32[1];
      _Q1.i32[0] = v75.i32[1];
      v93 = 2 * (v91 > *(float *)v84.i32);
LABEL_52:
      v84.i32[0] = v75.i32[0];
      a9.i32[0] = *(__int32 *)(&v343 + v93);
      v98.i64[0] = __PAIR64__(v74.u32[0], v57.u32[0]);
      v98.i64[1] = __PAIR64__(v74.u32[0], v75.u32[0]);
      v99.i64[0] = __PAIR64__(_Q1.u32[0], v92.u32[0]);
      v99.i64[1] = __PAIR64__(_Q1.u32[0], v75.u32[0]);
      v100 = (int8x16_t)vsubq_f32(v98, (float32x4_t)a9.u32[0]);
      v101 = (int8x16_t)vsubq_f32(v99, (float32x4_t)a9.u32[0]);
      v102 = vextq_s8(v100, v101, 0xCuLL);
      v103 = (float32x4_t)vextq_s8(vextq_s8(v100, v100, 0xCuLL), v100, 8uLL);
      v104 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v102, (int32x4_t)v102), v102, 0xCuLL);
      v105 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v100, (int32x4_t)v100), v100, 0xCuLL);
      v106 = (float32x4_t)vextq_s8(vextq_s8(v102, v102, 0xCuLL), v102, 8uLL);
      v107 = (int8x16_t)vmlsq_f32(vmulq_f32(v103, v104), v105, v106);
      v108 = vextq_s8(v101, (int8x16_t)vsubq_f32(v12, (float32x4_t)a9), 8uLL);
      v109 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v108, (int32x4_t)v108), v108, 0xCuLL);
      v110 = (float32x4_t)vextq_s8(vextq_s8(v108, v108, 0xCuLL), v108, 8uLL);
      v111 = (int8x16_t)vsubq_f32(vmulq_f32(v106, v109), vmulq_f32(v104, v110));
      v112 = (int8x16_t)vsubq_f32(vmulq_f32(v105, v110), vmulq_f32(v103, v109));
      v103.i64[0] = vextq_s8(v107, v107, 8uLL).u64[0];
      v107.i32[3] = v111.i32[0];
      v352 = v112.i32[2];
      v113 = (float32x4_t)vextq_s8(vextq_s8(v111, v111, 0xCuLL), v112, 8uLL);
      *(int8x16_t *)v351 = v107;
      *(float32x4_t *)&v351[16] = v113;
      v114 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v107.i8, *(float32x2_t *)v107.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v107.i8, 1), *(float32x2_t *)v107.i8, 1), *(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32);
      v105.i64[0] = vextq_s8(v111, v111, 8uLL).u64[0];
      v115 = (int32x2_t)vmla_f32(vmla_lane_f32((float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v111.i8, *(float32x2_t *)v111.i8), 0), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v111.i8, 1), *(float32x2_t *)v111.i8, 1), *(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32);
      v105.i64[0] = vextq_s8(v112, v112, 8uLL).u64[0];
      LODWORD(v116) = vmla_f32(vmla_lane_f32((float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v112.i8, *(float32x2_t *)v112.i8), 0), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v112.i8, 1), *(float32x2_t *)v112.i8, 1), *(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32).u32[0];
      v117 = vzip1_s32(v114, v115);
      v350 = v116;
      v349 = v117;
      v118 = *(float *)v115.i32 > *(float *)v114.i32;
      if (*(float *)v115.i32 <= *(float *)v114.i32)
        v119 = *(float *)v114.i32;
      else
        v119 = *(float *)v115.i32;
      if (v116 > v119)
        v118 = 2;
      *(float *)v117.i32 = sqrtf(*(float *)((unint64_t)&v349 | (4 * v118)));
      v120 = &v351[12 * v118];
      v113.i64[0] = *(_QWORD *)v120;
      v113.i32[2] = *((_DWORD *)v120 + 2);
      v128 = (int8x16_t)vdivq_f32(v113, (float32x4_t)vdupq_lane_s32(v117, 0));
      v121.i64[0] = v57.i64[0];
      v122 = 3 * v93;
      v121.i64[1] = __PAIR64__(v58.u32[0], v57.u32[2]);
      v13.i32[1] = v58.i32[2];
      v13.i64[1] = __PAIR64__(v14, v59.u32[0]);
      v330 = v121;
      v331 = v13;
      v332 = v11;
      v330.i32[v122] = v128.i32[0];
      v328 = v332;
      v329 = v333;
      v326 = v330;
      v327 = v331;
      v326.i32[((_BYTE)v122 + 1) & 0xF] = v128.i32[1];
      v125 = v328;
      v126.i32[1] = DWORD1(v329);
      v123 = v122 + 2;
      v324 = v328;
      v325 = v329;
      v322 = v326;
      v323 = v327;
      v322.i32[(v122 + 2) & 0xF] = v128.i32[2];
      v124.i32[3] = v322.i32[3];
      v125.i32[0] = v324.i32[0];
      v348 = v324.i32[0];
      v346 = v322;
      v347 = (__n128)v323;
      v126.i32[0] = v346.i32[3 * v93];
      v127 = *(float *)&v346.i32[3 * v93 + 1];
      v128.i32[0] = v346.i32[3 * v93 + 2];
      if (fabsf(v126.f32[0]) <= fabsf(v127))
      {
        v126.f32[0] = v127 * v127;
        v133 = sqrtf(vmla_f32(v126, *(float32x2_t *)v128.i8, *(float32x2_t *)v128.i8).f32[0]);
        *(float *)&v134 = *(float *)v128.i32 / v133;
        v131 = (float)-v127 / v133;
        v132.i32[0] = 0;
        v132.i32[3] = 0;
        v132.i32[1] = v134;
      }
      else
      {
        v129 = sqrtf((float)(v126.f32[0] * v126.f32[0]) + (float)(*(float *)v128.i32 * *(float *)v128.i32));
        *(float *)&v130 = (float)-*(float *)v128.i32 / v129;
        v131 = v126.f32[0] / v129;
        v132.i32[3] = 0;
        v132.i64[0] = v130;
      }
      *(float *)&v132.i32[2] = v131;
      v135 = (uint64_t *)((char *)v346.i64 + 12 * v93);
      v128.i64[0] = *v135;
      v128.i32[2] = v346.i32[v123];
      v9 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v128, (int32x4_t)v128), v128, 0xCuLL);
      v136 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v132, (int32x4_t)v132), v132, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v128, v128, 0xCuLL), v128, 8uLL)), (float32x4_t)vextq_s8(vextq_s8(v132, v132, 0xCuLL), v132, 8uLL), (float32x4_t)v9);
      v74.i32[1] = v92.i32[0];
      v75.i32[1] = _Q1.i32[0];
      v137 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(v74.u32[0], v57.u32[0]), *(float *)v132.i32), v74, *(float32x2_t *)v132.i8, 1), *(float32x2_t *)v75.f32, (float32x4_t)v132, 2);
      v138 = (float32x2_t)vextq_s8(v132, v132, 8uLL).u64[0];
      *(float32x2_t *)v9.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v84.i8, *(float32x2_t *)v132.i8), *(float32x2_t *)_Q1.i8, *(float32x2_t *)v132.i8, 1), v138, *(float32x2_t *)v12.f32);
      v139 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(v74.u32[0], v57.u32[0]), *(float *)v136.i32), v74, *(float32x2_t *)v136.i8, 1), *(float32x2_t *)v75.f32, (float32x4_t)v136, 2);
      v10 = vextq_s8(v136, v136, 8uLL);
      v140 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v84.i8, *(float32x2_t *)v136.i8), *(float32x2_t *)_Q1.i8, *(float32x2_t *)v136.i8, 1), *(float32x2_t *)v10.i8, *(float32x2_t *)v12.f32);
      LODWORD(v141) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v132.i8, v137), (float32x2_t)vdup_lane_s32((int32x2_t)v137, 1), *(float32x2_t *)v132.i8, 1), *(float32x2_t *)v9.i8, v138).u32[0];
      if (v93 > 1)
        v142 = -2;
      else
        v142 = 1;
      v143 = v142 + v93;
      v144 = *(&v343 + v143);
      *(int32x2_t *)v9.i8 = vdup_lane_s32((int32x2_t)v139, 1);
      LODWORD(v145) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v136.i8, v139), *(float32x2_t *)v9.i8, *(float32x2_t *)v136.i8, 1), v140, *(float32x2_t *)v10.i8).u32[0];
      v146 = vabds_f32(v141, v144);
      v147 = vabds_f32(v145, v144);
      if (v146 >= v147)
      {
        v148 = v141 - v144;
        v149 = (float32x4_t)v136;
        v136 = v132;
      }
      else
      {
        v148 = v145 - v144;
        v149 = (float32x4_t)v132;
        v146 = v147;
      }
      LODWORD(v150) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v132.i8, v139), *(float32x2_t *)v9.i8, *(float32x2_t *)v132.i8, 1), v140, v138).u32[0];
      v151 = fabsf(v150);
      if ((float)(v151 + v146) > 0.0)
      {
        if (v146 >= v151)
        {
          v152 = v149;
          v149 = (float32x4_t)v136;
          v153 = v148;
          v148 = v150;
        }
        else
        {
          v152 = (float32x4_t)v136;
          v153 = v150;
        }
        v192 = v148 / v153;
        v193 = 1.0 / sqrtf((float)(v192 * v192) + 1.0);
        v136 = (int8x16_t)vsubq_f32(vmulq_n_f32(v149, v192 * v193), vmulq_n_f32(v152, v193));
      }
      v318 = v322;
      v319 = v323;
      v320 = v125;
      v318.i32[(3 * (_BYTE)v143) & 0xF] = v136.i32[0];
      v316 = v320;
      v317 = v321;
      v314 = v318;
      v315 = v319;
      v314.i32[(3 * (_BYTE)v143 + 1) & 0xF] = v136.i32[1];
      v312 = (__n128)v316;
      v313 = v317;
      v310 = v314;
      v311 = v315;
      v310.i32[(3 * (_BYTE)v143 + 2) & 0xF] = v136.i32[2];
      v346 = v310;
      v347 = (__n128)v311;
      v348 = v312.n128_u32[0];
      v124.i64[0] = *v135;
      v194 = &v346.i8[12 * v143];
      v125.i64[0] = *(_QWORD *)v194;
      v124.i32[2] = v346.i32[v123];
      v125.i32[2] = *((_DWORD *)v194 + 2);
      a9 = (int8x16_t)vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v124, v124, 0xCuLL), v124, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v125, (int32x4_t)v125), v125, 0xCuLL));
      v195 = vsubq_f32((float32x4_t)a9, vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v124, (int32x4_t)v124), v124, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v125, v125, 0xCuLL), v125, 8uLL)));
      if (v93)
        v196 = 3 * v93 - 3;
      else
        v196 = 6;
      v308 = v312;
      v309 = v313;
      v306 = v310;
      v307 = v311;
      v306.i32[v196 & 0xF] = v195.i32[0];
      v304 = v308;
      v305 = v309;
      v302 = v306;
      v303 = v307;
      v302.i32[(v196 + 1) & 0xF] = v195.i32[1];
      a7 = v304;
      a8.i32[1] = DWORD1(v305);
      v300 = v304;
      v301 = v305;
      v298 = v302;
      v299 = v303;
      v298.i32[(v196 + 2) & 0xF] = v195.i32[2];
      _Q1.i32[3] = v299.i32[3];
      v348 = v300.n128_u32[0];
      v346 = v298;
      v347 = (__n128)v299;
LABEL_89:
      v89 = v345;
      _NF = v345 < 0.0;
      if (v345 != 0.0)
      {
LABEL_90:
        v197 = 0.0 - v89;
        if (!_NF)
          v197 = v89;
        if (v197 > 0.000001 && (float)(v344 / v89) >= a5 && (float)(v343 / v344) <= v285)
        {
          a7.n128_u32[0] = 0;
          v198 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v346, 2), (float32x4_t)a7), 0), (int8x16_t)vnegq_f32((float32x4_t)v346), v346);
          v335 = v39.i32[2];
          v337 = v198.i32[2];
          v336 = v198.i64[0];
          *(_DWORD *)&v338[8] = v57.i32[2];
          v334 = v39.i64[0];
          *(_QWORD *)v338 = v57.i64[0];
          *(_DWORD *)&v338[20] = v58.i32[2];
          v339 = v59.i32[2];
          *(_QWORD *)&v338[12] = v58.i64[0];
          *(_QWORD *)&v338[24] = v59.i64[0];
          __p[1] = 0;
          v341 = 0;
          __p[0] = 0;
          v342 = 1;
          sub_223FAF0D4(__p, v33, v32, v34);
          v199 = a4[1];
          if (v199 >= a4[2])
          {
            v203 = sub_223FA9CD0(a4, (uint64_t)&v334);
          }
          else
          {
            v200 = v334;
            *(_DWORD *)(v199 + 8) = v335;
            *(_QWORD *)v199 = v200;
            v201 = *(_QWORD *)((unint64_t)&v334 | 0xC);
            *(_DWORD *)(v199 + 20) = *(_DWORD *)(((unint64_t)&v334 | 0xC) + 8);
            *(_QWORD *)(v199 + 12) = v201;
            v202 = *(_OWORD *)v338;
            _Q1 = *(int8x16_t *)&v338[16];
            *(_DWORD *)(v199 + 56) = v339;
            *(int8x16_t *)(v199 + 40) = _Q1;
            *(_OWORD *)(v199 + 24) = v202;
            *(_QWORD *)(v199 + 64) = 0;
            *(_QWORD *)(v199 + 72) = 0;
            *(_QWORD *)(v199 + 80) = 0;
            *(_OWORD *)(v199 + 64) = *(_OWORD *)__p;
            *(_QWORD *)(v199 + 80) = v341;
            __p[0] = 0;
            __p[1] = 0;
            v341 = 0;
            v203 = v199 + 88;
          }
          a4[1] = v203;
          if (v342)
          {
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
        }
      }
LABEL_125:
      v31 = v33;
      goto LABEL_126;
    }
    v287 = v14;
    v288 = v13;
    v289 = v12;
    v290 = v11;
    v291 = v74;
    v292 = v75;
    v293 = v57;
    v294 = v59;
    v295 = v58;
    v296 = v39;
    v80 = sqrtf(*(float *)_Q1.i32);
    v81 = acosf(fmaxf(fminf(*(float *)v60.i32 / (float)(*(float *)_Q1.i32 * v80), 1.0), -1.0));
    v82 = cosf(v81 / 3.0);
    *(float *)_Q1.i32 = sqrtf(fmaxf(1.0 - (float)(v82 * v82), 0.0)) * 1.7321;
    *(float *)v84.i32 = v82 + *(float *)_Q1.i32;
    v83 = v82 - *(float *)_Q1.i32;
    *(float *)_Q1.i32 = (float)((float)(v80 * -2.0) * v82) - v79;
    *(float *)v84.i32 = (float)(v80 * *(float *)v84.i32) - v79;
    v343 = *(float *)_Q1.i32;
    v344 = *(float *)v84.i32;
    v85 = (float)(v80 * v83) - v79;
    v345 = v85;
    if (*(float *)_Q1.i32 <= *(float *)v84.i32)
    {
      v86 = *(float *)_Q1.i32;
      _Q1.i32[0] = v84.i32[0];
    }
    else
    {
      v343 = *(float *)v84.i32;
      v344 = *(float *)_Q1.i32;
      v86 = *(float *)v84.i32;
    }
    v58 = v295;
    v39 = v296;
    v57 = v293;
    v59 = v294;
    v74.i32[0] = v291.i32[0];
    v75.i32[0] = v292.i32[0];
    v12 = v289;
    v11 = v290;
    v14 = v287;
    v13 = v288;
    if (*(float *)_Q1.i32 <= v85)
    {
      v94 = v85;
      v85 = *(float *)_Q1.i32;
      if (v86 <= *(float *)_Q1.i32)
        goto LABEL_42;
    }
    else
    {
      v344 = v85;
      v345 = *(float *)_Q1.i32;
      v94 = *(float *)_Q1.i32;
      if (v86 <= v85)
      {
LABEL_42:
        v95 = v86;
        v86 = v85;
        goto LABEL_45;
      }
    }
    v343 = v85;
    v344 = v86;
    v95 = v85;
LABEL_45:
    v92.i32[0] = v291.i32[1];
    _Q1.i32[0] = v292.i32[1];
    v96 = v94 - v86;
    v93 = (float)(v94 - v95) < (float)(v94 - v86);
    if ((float)(v94 - v95) < (float)(v94 - v86))
      v96 = v94 - v95;
    if ((float)(v86 - v95) < v96)
    {
      v93 = 2;
      v96 = v86 - v95;
    }
    v97 = 0.0001;
    if (v94 > 1.0)
      v97 = v94 * 0.0001;
    if (v96 > v97)
    {
      v154.i32[1] = 0;
      v154.i64[1] = 0;
      if (v93 == 1)
      {
        v154.f32[0] = v86;
        v204.i64[0] = 0;
        v204.i64[1] = LODWORD(v86);
        v205.i64[0] = __PAIR64__(v291.u32[0], v293.u32[0]);
        v205.i64[1] = __PAIR64__(v291.u32[1], v292.u32[0]);
        v207.i64[0] = __PAIR64__(v291.u32[0], v293.u32[0]);
        v206 = (int8x16_t)vsubq_f32(v205, v154);
        v207.i64[1] = __PAIR64__(v291.u32[0], v292.u32[0]);
        v208 = (int8x16_t)vsubq_f32(v207, v154);
        v92.i32[1] = v292.i32[1];
        v92.i32[2] = v291.i32[1];
        v92.i32[3] = v291.i32[1];
        v209 = (int8x16_t)vsubq_f32(v92, v154);
        v210 = (int8x16_t)vsubq_f32(v292, v204);
        v211.i64[0] = 0;
        v211.i64[1] = LODWORD(v94);
        v10 = (int8x16_t)vsubq_f32(v205, (float32x4_t)LODWORD(v94));
        v212 = (float32x2_t)vsubq_f32(v92, (float32x4_t)LODWORD(v94)).u64[0];
        v213 = vsubq_f32(v207, (float32x4_t)LODWORD(v94));
        v214 = (int8x16_t)vsubq_f32(v292, v211);
        v11 = vextq_s8(v208, v209, 0xCuLL);
        v12 = (float32x4_t)vextq_s8(v10, v10, 8uLL);
        *(float32x2_t *)v211.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v206.i8, *(float *)v10.i32), *(float32x2_t *)v11.i8, *(float32x2_t *)v10.i8, 1), *(float32x2_t *)v210.i8, (float32x4_t)v10, 2);
        v215 = (float32x2_t)vextq_s8(v206, v206, 8uLL).u64[0];
        v216 = (float32x2_t)vextq_s8(v210, v210, 8uLL).u64[0];
        *(float32x2_t *)v10.i8 = vmla_f32(vmla_lane_f32(vmul_f32(v215, *(float32x2_t *)v10.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1), *(float32x2_t *)v209.i8, 1), *(float32x2_t *)v12.f32, v216);
        *(float32x2_t *)v12.f32 = vmla_lane_f32(vmla_n_f32(vmul_laneq_f32(*(float32x2_t *)v206.i8, v213, 3), *(float32x2_t *)v11.i8, v212.f32[0]), *(float32x2_t *)v210.i8, v212, 1);
        *(float32x2_t *)v213.f32 = vmla_lane_f32(vmla_lane_f32(vmul_laneq_f32(v215, v213, 3), v212, *(float32x2_t *)v209.i8, 1), v216, v212, 1);
        v217 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v206.i8, *(float *)v214.i32), *(float32x2_t *)v11.i8, *(float32x2_t *)v214.i8, 1), *(float32x2_t *)v210.i8, (float32x4_t)v214, 2);
        *(float32x2_t *)v11.i8 = vmla_f32(vmla_lane_f32(vmul_f32(v215, *(float32x2_t *)v214.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v214.i8, 1), *(float32x2_t *)v209.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v214, v214, 8uLL), v216);
        *(_QWORD *)v351 = v211.i64[0];
        *(_DWORD *)&v351[8] = v10.i32[0];
        *(_DWORD *)&v351[20] = v213.i32[0];
        *(_QWORD *)&v351[12] = v12.i64[0];
        v352 = v11.i32[0];
        *(float32x2_t *)&v351[24] = v217;
        *(float32x2_t *)v13.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v211.f32, *(float32x2_t *)v211.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v211.f32, 1), *(float32x2_t *)v211.f32, 1), *(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8);
        *(float32x2_t *)v10.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.f32, 1), *(float32x2_t *)v12.f32, 1), *(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32);
        LODWORD(v218) = vmla_f32(vmla_lane_f32(vmul_f32(v217, v217), (float32x2_t)vdup_lane_s32((int32x2_t)v217, 1), v217, 1), *(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8).u32[0];
        v219 = vzip1_s32(*(int32x2_t *)v13.i8, *(int32x2_t *)v10.i8);
        v350 = v218;
        v349 = v219;
        v220 = *(float *)v10.i32 > *(float *)v13.i32;
        if (*(float *)v10.i32 <= *(float *)v13.i32)
          v221 = *(float *)v13.i32;
        else
          v221 = *(float *)v10.i32;
        if (v218 > v221)
          v220 = 2;
        *(float *)v219.i32 = sqrtf(*(float *)((unint64_t)&v349 | (4 * v220)));
        v222 = &v351[12 * v220];
        v10.i64[0] = *(_QWORD *)v222;
        v10.i32[2] = *((_DWORD *)v222 + 2);
        v223 = v95;
        v224.i64[0] = 0;
        v224.i64[1] = LODWORD(v95);
        a7 = (__n128)vdivq_f32((float32x4_t)v10, (float32x4_t)vdupq_lane_s32(v219, 0));
        a9 = (int8x16_t)vsubq_f32(v205, (float32x4_t)LODWORD(v223));
        v225 = (int8x16_t)vsubq_f32(v92, (float32x4_t)LODWORD(v223));
        v9 = (int8x16_t)vsubq_f32(v292, v224);
        v226 = (float32x2_t)vextq_s8((int8x16_t)vsubq_f32(v207, (float32x4_t)LODWORD(v223)), v225, 0xCuLL).u64[0];
        v227 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a9.i8, *(float *)v206.i32), v226, *(float32x2_t *)v206.i8, 1), *(float32x2_t *)v9.i8, (float32x4_t)v206, 2);
        v224.i64[0] = vextq_s8(a9, a9, 8uLL).u64[0];
        v228 = (float32x2_t)vextq_s8(v9, v9, 8uLL).u64[0];
        v229 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v224.f32, *(float32x2_t *)v206.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v206.i8, 1), *(float32x2_t *)v225.i8, 1), v215, v228);
        v230 = vmla_lane_f32(vmla_n_f32(vmul_laneq_f32(*(float32x2_t *)a9.i8, (float32x4_t)v208, 3), v226, *(float *)v209.i32), *(float32x2_t *)v9.i8, *(float32x2_t *)v209.i8, 1);
        v231 = vmla_lane_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)v224.f32, (float32x4_t)v208, 3), *(float32x2_t *)v209.i8, *(float32x2_t *)v225.i8, 1), v228, *(float32x2_t *)v209.i8, 1);
        *(float32x2_t *)a9.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a9.i8, *(float *)v210.i32), v226, *(float32x2_t *)v210.i8, 1), *(float32x2_t *)v9.i8, (float32x4_t)v210, 2);
        v232 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v224.f32, *(float32x2_t *)v210.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v210.i8, 1), *(float32x2_t *)v225.i8, 1), v216, v228);
        *(float32x2_t *)v351 = v227;
        *(_DWORD *)&v351[8] = v229.i32[0];
        *(_DWORD *)&v351[20] = v231.i32[0];
        *(float32x2_t *)&v351[12] = v230;
        v352 = v232.i32[0];
        *(_QWORD *)&v351[24] = a9.i64[0];
        v233 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(v227, v227), (float32x2_t)vdup_lane_s32((int32x2_t)v227, 1), v227, 1), v229, v229);
        v234 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(v230, v230), (float32x2_t)vdup_lane_s32((int32x2_t)v230, 1), v230, 1), v231, v231);
        LODWORD(v235) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a9.i8, *(float32x2_t *)a9.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a9.i8, 1), *(float32x2_t *)a9.i8, 1), v232, v232).u32[0];
        v236 = vzip1_s32(v233, v234);
        v350 = v235;
        v349 = v236;
        v237 = *(float *)v234.i32 > *(float *)v233.i32;
        if (*(float *)v234.i32 <= *(float *)v233.i32)
          v238 = *(float *)v233.i32;
        else
          v238 = *(float *)v234.i32;
        if (v235 > v238)
          v237 = 2;
        v239 = (float *)((unint64_t)&v349 | (4 * v237));
        v240 = &v351[12 * v237];
        v210.i64[0] = *(_QWORD *)v240;
        v210.i32[2] = *((_DWORD *)v240 + 2);
        *(float *)v236.i32 = sqrtf(*v239);
        v241 = (int8x16_t)vdivq_f32((float32x4_t)v210, (float32x4_t)vdupq_lane_s32(v236, 0));
        _Q1 = (int8x16_t)vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v241, v241, 0xCuLL), v241, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a7, (int32x4_t)a7), (int8x16_t)a7, 0xCuLL)), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v241, (int32x4_t)v241), v241, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a7, (int8x16_t)a7, 0xCuLL), (int8x16_t)a7, 8uLL)));
        a8 = vextq_s8(_Q1, _Q1, 0xCuLL);
        a7.n128_u32[3] = _Q1.i32[0];
        v348 = v241.i32[2];
        v346 = (int8x16_t)a7;
        v347 = (__n128)vextq_s8(a8, v241, 8uLL);
        v89 = v345;
        _NF = v345 < 0.0;
        if (v345 == 0.0)
          goto LABEL_125;
      }
      else if (v93)
      {
        v154.f32[0] = v86;
        v242.i64[0] = 0;
        v242.i64[1] = LODWORD(v86);
        v243.i64[0] = __PAIR64__(v291.u32[0], v293.u32[0]);
        v243.i64[1] = __PAIR64__(v291.u32[1], v292.u32[0]);
        v92.i32[1] = v292.i32[1];
        v10 = (int8x16_t)vsubq_f32(v243, v154);
        v92.i32[2] = v291.i32[1];
        v92.i32[3] = v291.i32[1];
        v244.i64[0] = __PAIR64__(v291.u32[0], v293.u32[0]);
        v244.i64[1] = __PAIR64__(v291.u32[0], v292.u32[0]);
        v245 = (int8x16_t)vsubq_f32(v92, v154);
        v246 = (int8x16_t)vsubq_f32(v292, v242);
        v242.i64[0] = 0;
        v242.i64[1] = LODWORD(v94);
        v247 = (int8x16_t)vsubq_f32(v243, (float32x4_t)LODWORD(v94));
        v248 = (int8x16_t)vsubq_f32(v92, (float32x4_t)LODWORD(v94));
        v249 = (int8x16_t)vsubq_f32((float32x4_t)v244, (float32x4_t)LODWORD(v94));
        v250 = (int8x16_t)vsubq_f32(v292, v242);
        v251 = (float32x2_t)vextq_s8(v244, v245, 0xCuLL).u64[0];
        a9 = vextq_s8(v247, v247, 8uLL);
        v252 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v10.i8, *(float *)v247.i32), v251, *(float32x2_t *)v247.i8, 1), *(float32x2_t *)v246.i8, (float32x4_t)v247, 2);
        v11 = vextq_s8(v10, v10, 8uLL);
        v253 = (float32x2_t)vextq_s8(v246, v246, 8uLL).u64[0];
        *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v247.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v247.i8, 1), *(float32x2_t *)v245.i8, 1), *(float32x2_t *)a9.i8, v253);
        *(float32x2_t *)v13.i8 = vmla_lane_f32(vmla_n_f32(vmul_laneq_f32(*(float32x2_t *)v10.i8, (float32x4_t)v249, 3), v251, *(float *)v248.i32), *(float32x2_t *)v246.i8, *(float32x2_t *)v248.i8, 1);
        *(float32x2_t *)&v14 = vmla_lane_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)v11.i8, (float32x4_t)v249, 3), *(float32x2_t *)v248.i8, *(float32x2_t *)v245.i8, 1), v253, *(float32x2_t *)v248.i8, 1);
        *(float32x2_t *)v10.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v10.i8, *(float *)v250.i32), v251, *(float32x2_t *)v250.i8, 1), *(float32x2_t *)v246.i8, (float32x4_t)v250, 2);
        v254 = (float32x2_t)vextq_s8(v250, v250, 8uLL).u64[0];
        *(float32x2_t *)v246.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v250.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v250.i8, 1), *(float32x2_t *)v245.i8, 1), v254, v253);
        *(float32x2_t *)v351 = v252;
        *(_DWORD *)&v351[8] = v12.i32[0];
        *(_DWORD *)&v351[20] = v14;
        *(_QWORD *)&v351[12] = v13.i64[0];
        v352 = v246.i32[0];
        *(_QWORD *)&v351[24] = v10.i64[0];
        v255 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(v252, v252), (float32x2_t)vdup_lane_s32((int32x2_t)v252, 1), v252, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
        v256 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1), *(float32x2_t *)v13.i8, 1), *(float32x2_t *)&v14, *(float32x2_t *)&v14);
        *(float32x2_t *)v11.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1), *(float32x2_t *)v10.i8, 1), *(float32x2_t *)v246.i8, *(float32x2_t *)v246.i8);
        v257 = vzip1_s32(v255, v256);
        v350 = *(float *)v11.i32;
        v349 = v257;
        v258 = *(float *)v256.i32 > *(float *)v255.i32;
        if (*(float *)v256.i32 <= *(float *)v255.i32)
          v259 = *(float *)v255.i32;
        else
          v259 = *(float *)v256.i32;
        if (*(float *)v11.i32 > v259)
          v258 = 2;
        *(float *)v257.i32 = sqrtf(*(float *)((unint64_t)&v349 | (4 * v258)));
        v260 = &v351[12 * v258];
        v10.i64[0] = *(_QWORD *)v260;
        v10.i32[2] = *((_DWORD *)v260 + 2);
        v261 = v95;
        v262.i64[0] = 0;
        v262.i64[1] = LODWORD(v95);
        a7 = (__n128)vdivq_f32((float32x4_t)v10, (float32x4_t)vdupq_lane_s32(v257, 0));
        v263 = (int8x16_t)vsubq_f32(v243, (float32x4_t)LODWORD(v261));
        v264 = (float32x2_t)vsubq_f32(v92, (float32x4_t)LODWORD(v261)).u64[0];
        v265 = vsubq_f32((float32x4_t)v244, (float32x4_t)LODWORD(v261));
        v9 = (int8x16_t)vsubq_f32(v292, v262);
        v266 = (float32x2_t)vextq_s8(v249, v248, 0xCuLL).u64[0];
        v267 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v247.i8, *(float *)v263.i32), v266, *(float32x2_t *)v263.i8, 1), *(float32x2_t *)v250.i8, (float32x4_t)v263, 2);
        *(float32x2_t *)v263.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a9.i8, *(float32x2_t *)v263.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v263.i8, 1), *(float32x2_t *)v248.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v263, v263, 8uLL), v254);
        v268 = vmla_lane_f32(vmla_n_f32(vmul_laneq_f32(*(float32x2_t *)v247.i8, v265, 3), v266, v264.f32[0]), *(float32x2_t *)v250.i8, v264, 1);
        *(float32x2_t *)v265.f32 = vmla_lane_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)a9.i8, v265, 3), v264, *(float32x2_t *)v248.i8, 1), v254, v264, 1);
        v269 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v247.i8, *(float *)v9.i32), v266, *(float32x2_t *)v9.i8, 1), *(float32x2_t *)v250.i8, (float32x4_t)v9, 2);
        v270 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a9.i8, *(float32x2_t *)v9.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1), *(float32x2_t *)v248.i8, 1);
        v271 = (float32x4_t)vextq_s8(v9, v9, 8uLL);
        v272 = vmla_f32(v270, *(float32x2_t *)v271.f32, v254);
        *(float32x2_t *)v351 = v267;
        *(_DWORD *)&v351[8] = v263.i32[0];
        *(_DWORD *)&v351[20] = v265.i32[0];
        *(float32x2_t *)&v351[12] = v268;
        v352 = v272.i32[0];
        *(float32x2_t *)&v351[24] = v269;
        v273 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(v267, v267), (float32x2_t)vdup_lane_s32((int32x2_t)v267, 1), v267, 1), *(float32x2_t *)v263.i8, *(float32x2_t *)v263.i8);
        v274 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(v268, v268), (float32x2_t)vdup_lane_s32((int32x2_t)v268, 1), v268, 1), *(float32x2_t *)v265.f32, *(float32x2_t *)v265.f32);
        LODWORD(v275) = vmla_f32(vmla_lane_f32(vmul_f32(v269, v269), (float32x2_t)vdup_lane_s32((int32x2_t)v269, 1), v269, 1), v272, v272).u32[0];
        v276 = vzip1_s32(v273, v274);
        v350 = v275;
        v349 = v276;
        v277 = *(float *)v274.i32 > *(float *)v273.i32;
        if (*(float *)v274.i32 <= *(float *)v273.i32)
          v278 = *(float *)v273.i32;
        else
          v278 = *(float *)v274.i32;
        if (v275 > v278)
          v277 = 2;
        v279 = (float *)((unint64_t)&v349 | (4 * v277));
        v280 = &v351[12 * v277];
        v271.i64[0] = *(_QWORD *)v280;
        v271.i32[2] = *((_DWORD *)v280 + 2);
        *(float *)v276.i32 = sqrtf(*v279);
        v281 = (int8x16_t)vdivq_f32(v271, (float32x4_t)vdupq_lane_s32(v276, 0));
        v282 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a7, (int8x16_t)a7, 0xCuLL), (int8x16_t)a7, 8uLL);
        a8 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a7, (int32x4_t)a7), (int8x16_t)a7, 0xCuLL);
        a7.n128_u32[3] = v281.i32[0];
        v283 = vextq_s8(v281, v281, 0xCuLL);
        _Q1 = (int8x16_t)vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v281, (int32x4_t)v281), v281, 0xCuLL), v282);
        v284 = (int8x16_t)vsubq_f32((float32x4_t)_Q1, vmulq_f32((float32x4_t)vextq_s8(v283, v281, 8uLL), (float32x4_t)a8));
        v348 = v284.i32[2];
        v346 = (int8x16_t)a7;
        v347 = (__n128)vextq_s8(v283, v284, 8uLL);
        v89 = v345;
        _NF = v345 < 0.0;
        if (v345 == 0.0)
          goto LABEL_125;
      }
      else
      {
        v154.f32[0] = v94;
        v155.i64[0] = 0;
        v155.i64[1] = LODWORD(v94);
        v156.i64[0] = __PAIR64__(v291.u32[0], v293.u32[0]);
        v156.i64[1] = __PAIR64__(v291.u32[1], v292.u32[0]);
        v92.i32[1] = v292.i32[1];
        v157 = (int8x16_t)vsubq_f32(v156, v154);
        v92.i32[2] = v291.i32[1];
        v92.i32[3] = v291.i32[1];
        v158.i64[0] = __PAIR64__(v291.u32[0], v293.u32[0]);
        v158.i64[1] = __PAIR64__(v291.u32[0], v292.u32[0]);
        v169 = (int8x16_t)vsubq_f32(v92, v154);
        v159 = (int8x16_t)vsubq_f32(v292, v155);
        v160.i64[0] = 0;
        v160.i64[1] = LODWORD(v95);
        v161 = (int8x16_t)vsubq_f32(v156, (float32x4_t)LODWORD(v95));
        v162 = (int8x16_t)vsubq_f32(v92, (float32x4_t)LODWORD(v95));
        v163 = (int8x16_t)vsubq_f32((float32x4_t)v158, (float32x4_t)LODWORD(v95));
        v164 = (int8x16_t)vsubq_f32(v292, v160);
        v165 = (float32x2_t)vextq_s8(v158, v169, 0xCuLL).u64[0];
        a9 = vextq_s8(v161, v161, 8uLL);
        *(float32x2_t *)v160.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v157.i8, *(float *)v161.i32), v165, *(float32x2_t *)v161.i8, 1), *(float32x2_t *)v159.i8, (float32x4_t)v161, 2);
        v11 = vextq_s8(v157, v157, 8uLL);
        v166 = (float32x2_t)vextq_s8(v159, v159, 8uLL).u64[0];
        *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v161.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v161.i8, 1), *(float32x2_t *)v169.i8, 1), *(float32x2_t *)a9.i8, v166);
        *(float32x2_t *)v13.i8 = vmla_lane_f32(vmla_n_f32(vmul_laneq_f32(*(float32x2_t *)v157.i8, (float32x4_t)v163, 3), v165, *(float *)v162.i32), *(float32x2_t *)v159.i8, *(float32x2_t *)v162.i8, 1);
        *(float32x2_t *)&v14 = vmla_lane_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)v11.i8, (float32x4_t)v163, 3), *(float32x2_t *)v162.i8, *(float32x2_t *)v169.i8, 1), v166, *(float32x2_t *)v162.i8, 1);
        v167 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v157.i8, *(float *)v164.i32), v165, *(float32x2_t *)v164.i8, 1), *(float32x2_t *)v159.i8, (float32x4_t)v164, 2);
        v9 = vextq_s8(v164, v164, 8uLL);
        *(float32x2_t *)v159.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v164.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v164.i8, 1), *(float32x2_t *)v169.i8, 1), *(float32x2_t *)v9.i8, v166);
        *(_QWORD *)v351 = v160.i64[0];
        *(_DWORD *)&v351[8] = v12.i32[0];
        *(_DWORD *)&v351[20] = v14;
        *(_QWORD *)&v351[12] = v13.i64[0];
        v352 = v159.i32[0];
        *(float32x2_t *)&v351[24] = v167;
        v168 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v160.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v160.f32, 1), *(float32x2_t *)v160.f32, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
        *(float32x2_t *)v169.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1), *(float32x2_t *)v13.i8, 1), *(float32x2_t *)&v14, *(float32x2_t *)&v14);
        LODWORD(v170) = vmla_f32(vmla_lane_f32(vmul_f32(v167, v167), (float32x2_t)vdup_lane_s32((int32x2_t)v167, 1), v167, 1), *(float32x2_t *)v159.i8, *(float32x2_t *)v159.i8).u32[0];
        v171 = vzip1_s32(v168, *(int32x2_t *)v169.i8);
        v350 = v170;
        v349 = v171;
        v172 = *(float *)v169.i32 > *(float *)v168.i32;
        if (*(float *)v169.i32 <= *(float *)v168.i32)
          v173 = *(float *)v168.i32;
        else
          v173 = *(float *)v169.i32;
        if (v170 > v173)
          v172 = 2;
        *(float *)v171.i32 = sqrtf(*(float *)((unint64_t)&v349 | (4 * v172)));
        v174 = &v351[12 * v172];
        v169.i64[0] = *(_QWORD *)v174;
        v10.i32[2] = *((_DWORD *)v174 + 2);
        v175 = (int8x16_t)vdivq_f32((float32x4_t)v10, (float32x4_t)vdupq_lane_s32(v171, 0));
        v10.i8[12] = 0;
        v10.i8[13] = 0;
        v10.i8[14] = 0;
        v10.i8[15] = 0;
        *(float *)v10.i32 = v86;
        v176.i64[0] = 0;
        v176.i64[1] = LODWORD(v86);
        v177 = (int8x16_t)vsubq_f32(v156, (float32x4_t)LODWORD(v86));
        v178 = (float32x2_t)vsubq_f32(v92, (float32x4_t)v10.u32[0]).u64[0];
        v179 = vsubq_f32((float32x4_t)v158, (float32x4_t)v10.u32[0]);
        v180 = (int8x16_t)vsubq_f32(v292, v176);
        v181 = (float32x2_t)vextq_s8(v163, v162, 0xCuLL).u64[0];
        *(float32x2_t *)v10.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v161.i8, *(float *)v177.i32), v181, *(float32x2_t *)v177.i8, 1), *(float32x2_t *)v164.i8, (float32x4_t)v177, 2);
        *(float32x2_t *)v177.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a9.i8, *(float32x2_t *)v177.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v177.i8, 1), *(float32x2_t *)v162.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v177, v177, 8uLL), *(float32x2_t *)v9.i8);
        *(float32x2_t *)v176.f32 = vmla_lane_f32(vmla_n_f32(vmul_laneq_f32(*(float32x2_t *)v161.i8, v179, 3), v181, v178.f32[0]), *(float32x2_t *)v164.i8, v178, 1);
        *(float32x2_t *)v179.f32 = vmla_lane_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)a9.i8, v179, 3), v178, *(float32x2_t *)v162.i8, 1), *(float32x2_t *)v9.i8, v178, 1);
        v182 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v161.i8, *(float *)v180.i32), v181, *(float32x2_t *)v180.i8, 1), *(float32x2_t *)v164.i8, (float32x4_t)v180, 2);
        v183 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a9.i8, *(float32x2_t *)v180.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v180.i8, 1), *(float32x2_t *)v162.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v180, v180, 8uLL), *(float32x2_t *)v9.i8);
        *(_QWORD *)v351 = v10.i64[0];
        *(_DWORD *)&v351[8] = v177.i32[0];
        *(_DWORD *)&v351[20] = v179.i32[0];
        *(_QWORD *)&v351[12] = v176.i64[0];
        v352 = v183.i32[0];
        *(float32x2_t *)&v351[24] = v182;
        v184 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1), *(float32x2_t *)v10.i8, 1), *(float32x2_t *)v177.i8, *(float32x2_t *)v177.i8);
        v185 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v176.f32, *(float32x2_t *)v176.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v176.f32, 1), *(float32x2_t *)v176.f32, 1), *(float32x2_t *)v179.f32, *(float32x2_t *)v179.f32);
        LODWORD(v186) = vmla_f32(vmla_lane_f32(vmul_f32(v182, v182), (float32x2_t)vdup_lane_s32((int32x2_t)v182, 1), v182, 1), v183, v183).u32[0];
        v187 = vzip1_s32(v184, v185);
        v350 = v186;
        v349 = v187;
        v188 = *(float *)v185.i32 > *(float *)v184.i32;
        if (*(float *)v185.i32 <= *(float *)v184.i32)
          v189 = *(float *)v184.i32;
        else
          v189 = *(float *)v185.i32;
        if (v186 > v189)
          v188 = 2;
        *(float *)v187.i32 = sqrtf(*(float *)((unint64_t)&v349 | (4 * v188)));
        v190 = &v351[12 * v188];
        v162.i64[0] = *(_QWORD *)v190;
        v162.i32[2] = *((_DWORD *)v190 + 2);
        v191 = (int8x16_t)vdivq_f32((float32x4_t)v162, (float32x4_t)vdupq_lane_s32(v187, 0));
        _Q1 = vextq_s8(v175, v175, 0xCuLL);
        a8 = (int8x16_t)vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v175, (int32x4_t)v175), v175, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v191, v191, 0xCuLL), v191, 8uLL));
        a7 = (__n128)vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(_Q1, v175, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v191, (int32x4_t)v191), v191, 0xCuLL)), (float32x4_t)a8);
        a7.n128_u32[3] = v175.i32[0];
        v348 = v191.i32[2];
        v346 = (int8x16_t)a7;
        v347 = (__n128)vextq_s8(_Q1, v191, 8uLL);
        v89 = v345;
        _NF = v345 < 0.0;
        if (v345 == 0.0)
          goto LABEL_125;
      }
      goto LABEL_90;
    }
    goto LABEL_52;
  }
}

void sub_223FAB75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  void *v15;
  void *v17;

  if (LOBYTE(STACK[0x388]))
  {
    v17 = (void *)STACK[0x370];
    if (STACK[0x370])
    {
      STACK[0x378] = (unint64_t)v17;
      operator delete(v17);
    }
  }
  if (v15)
    operator delete(v15);
  sub_223EDC8F4(a15);
  _Unwind_Resume(a1);
}

void sub_223FAB7B0(unsigned int **a1@<X0>, unint64_t a2@<X1>, float32x2_t *a3@<X2>, float32x2_t *a4@<X3>, uint64_t *a5@<X8>, float a6@<S0>, float a7@<S1>, float32x4_t a8@<Q6>, int32x4_t a9@<Q7>)
{
  float32x2_t v9;
  int8x16_t v10;
  unsigned int **v13;
  float32x4_t v15;
  int32x4_t v16;
  int8x16_t v17;
  float32x2_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  int8x16_t v27;
  int32x4_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  unint64_t *v35;
  unsigned int *v36;
  unsigned int *v37;
  unint64_t v38;
  float v39;
  float v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int32x2_t v55;
  unint64_t *v56;
  unint64_t *v57;
  float32x4_t v58;
  unint64_t *v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  float32x4_t v63;
  __int32 v64;
  __int32 v65;
  unint64_t *v66;
  float32x4_t v67;
  float32x4_t v68;
  __int32 v69;
  __int32 v70;
  char *v71;
  int8x16_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  int8x16_t v80;
  float v81;
  float v82;
  unsigned __int8 v83;
  unsigned __int8 v84;
  float v85;
  int v86;
  unint64_t *v87;
  int8x16_t v88;
  float32x4_t v89;
  float32x2_t *v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  unint64_t v94;
  float32x4_t v95;
  unint64_t *v96;
  char *v97;
  int8x16_t v98;
  float v99;
  int8x16_t v100;
  float32x4_t v101;
  int8x16_t v102;
  float32x2_t v103;
  float v104;
  float32x2_t v105;
  float v106;
  float v107;
  float v108;
  int8x16_t v109;
  float v110;
  float v111;
  int32x4_t v112;
  float32x2_t v113;
  float32x2_t v114;
  float v115;
  float32x2_t v116;
  int32x2_t v117;
  float v118;
  int8x16_t v120;
  float32x2_t v121;
  float32x2_t v122;
  unsigned int v123;
  int8x16_t v127;
  float32x2_t v129;
  float32x2_t v130;
  unint64_t *v131;
  unint64_t v132;
  float32x2_t *v133;
  unsigned __int8 v134;
  unsigned __int8 v135;
  float v136;
  BOOL v137;
  float32x2_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  int8x16_t v142;
  float32x2_t v143;
  int8x16_t v144;
  _OWORD *v145;
  __int128 v146;
  unint64_t v147;
  unint64_t *v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  void *v153;
  int v154;
  int v155;
  float32x2_t v156;
  float32x4_t v157;
  float v158;
  float v159;
  int8x16_t v161;
  __int32 v162;
  unsigned int **v163;
  __int32 v164;
  float32x2_t v165;
  int32x4_t v166;
  float32x2_t v167;
  uint64_t *v168;
  int32x4_t v169;
  float32x2_t v170;
  unsigned int *v171;
  float32x4_t v172;
  int8x16_t v173;
  int32x2_t v174;
  float32x2_t v175;
  int32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  char **v179;
  unint64_t *v180;
  _OWORD v181[3];
  int v182;
  __int128 v183;
  _BYTE v184[12];
  char v185;
  _OWORD v186[2];
  unsigned __int32 v187;

  v13 = a1;
  *(float32x2_t *)a8.f32 = *a4;
  v15 = a8;
  v15.i32[2] = a4[1].i32[0];
  *(float32x2_t *)a9.i8 = a4[2];
  v16 = a9;
  v16.i32[2] = a4[3].i32[0];
  v9.i32[0] = a4[5].i32[0];
  *(float32x2_t *)v10.i8 = a4[4];
  v17 = v10;
  v17.i32[2] = v9.i32[0];
  v18 = (float32x2_t)vzip1q_s32((int32x4_t)v15, v16).u64[0];
  v19 = vtrn2q_s32((int32x4_t)v15, v16);
  v20 = vzip2q_s32((int32x4_t)v15, v16);
  *(float32x2_t *)v15.f32 = a4[6];
  v15.i32[2] = a4[7].i32[0];
  v21 = (int8x16_t)vnegq_f32(v15);
  v173 = v17;
  v176 = v20;
  *(float32x2_t *)v22.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v18, *(float *)v21.i32), *(float32x2_t *)v19.i8, *(float32x2_t *)v15.f32, 1), *(float32x2_t *)v20.i8, v15, 2);
  v22.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v21.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1), *(float32x2_t *)v15.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), v9).u32[0]);
  v172 = v22;
  v180 = 0;
  v181[0] = 0uLL;
  if (!a2)
  {
    v34 = 0;
    v35 = 0;
    *a5 = 0;
    a5[1] = 0;
    v168 = a5;
    a5[2] = 0;
    v37 = *a1;
    v36 = a1[1];
    if (*a1 == v36)
      goto LABEL_102;
    goto LABEL_8;
  }
  v161 = (int8x16_t)v19;
  v162 = v10.i32[1];
  v164 = v9.i32[0];
  v166 = a9;
  v169 = (int32x4_t)a8;
  if (a2 >= 0x1555555555555556)
    sub_22316E078();
  v24 = 12 * a2;
  v25 = (unint64_t *)operator new(12 * a2);
  v26 = vzip1q_s32(v169, v166).u64[0];
  v27 = v161;
  v27.i32[2] = v162;
  v28 = v176;
  v28.i32[2] = v164;
  v29 = (float32x2_t)vextq_s8(v27, (int8x16_t)vdupq_laneq_s32(v28, 2), 4uLL).u64[0];
  v30.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v161, 0).i32[3];
  v30.i32[1] = v29.i32[0];
  v167 = v30;
  v170 = (float32x2_t)v26;
  v180 = v25;
  *(_QWORD *)&v181[0] = v25;
  *((_QWORD *)&v181[0] + 1) = (char *)v25 + v24;
  v179 = (char **)&v180;
  v31 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v173.i8, 1);
  v165 = (float32x2_t)vextq_s8(v173, v173, 8uLL).u64[0];
  do
  {
    v29.i32[0] = a3[1].i32[0];
    *(float32x2_t *)v32.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v170, COERCE_FLOAT(*a3)), v167, *a3, 1), *(float32x2_t *)v176.i8, v29.f32[0]);
    *(float32x2_t *)&v32.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v173.i8, *a3), v31, *a3, 1), v29, v165);
    v33 = vaddq_f32(v172, v32);
    DWORD2(v186[0]) = v33.i32[2];
    *(_QWORD *)&v186[0] = v33.i64[0];
    sub_22339DC14(&v179, (uint64_t *)v186);
    a3 = (float32x2_t *)((char *)a3 + 12);
    v24 -= 12;
  }
  while (v24);
  v35 = v180;
  v34 = *(_QWORD *)&v181[0];
  *a5 = 0;
  a5[1] = 0;
  v168 = a5;
  a5[2] = 0;
  v37 = *v13;
  v36 = v13[1];
  if (*v13 != v36)
  {
LABEL_8:
    v38 = 0xAAAAAAAAAAAAAAABLL * ((v34 - (uint64_t)v35) >> 2);
    v163 = v13;
    v39 = 0.25;
    v40 = 0.5;
    v171 = v36;
    do
    {
      v41 = v37[3];
      if (v41 == -1
        || (v42 = v37[7], v42 == -1)
        || (v43 = *v13, v44 = &(*v13)[9 * v41], v45 = v44[7], (_DWORD)v45 == -1)
        || (v46 = v43[9 * v42 + 3], v46 == -1)
        || v43[9 * v46] != (_DWORD)v45)
      {
        v56 = 0;
      }
      else
      {
        v47 = *v37;
        v48 = *v44;
        v49 = v43[9 * v42];
        v50 = (unint64_t *)operator new(0x20uLL);
        v56 = v50;
        v57 = v50 + 4;
        *v50 = v47;
        v50[1] = v48;
        v50[2] = v49;
        v50[3] = v45;
        v13 = v163;
        v36 = v171;
        if (v50 == v57)
          goto LABEL_26;
        v180 = v50;
        *(_QWORD *)&v181[0] = v35;
        v58 = 0uLL;
        v59 = v50;
        *((_QWORD *)&v181[0] + 1) = v38;
        do
        {
          v60 = *v59;
          if (v38 <= *v59)
            goto LABEL_105;
          v61 = (char *)v35 + 12 * v60;
          v51.i64[0] = *(_QWORD *)v61;
          v51.i32[2] = *((_DWORD *)v61 + 2);
          v58 = vaddq_f32(v58, v51);
          v180 = ++v59;
        }
        while (v59 != v57);
        v62 = 0;
        *(float *)v55.i32 = (float)4uLL;
        v67 = (float32x4_t)vdupq_lane_s32(v55, 0);
        v177 = v67;
        v63 = vdivq_f32(v58, v67);
        v58.i32[0] = 0;
        v64 = 0;
        v65 = 0;
        v180 = v50;
        *(_QWORD *)&v181[0] = v35;
        *((_QWORD *)&v181[0] + 1) = v38;
        v66 = v50;
        v67.i32[0] = 0;
        v68.i32[0] = 0;
        v69 = 0;
        v52.i32[0] = 0;
        v70 = 0;
        v53.i32[0] = 0;
        do
        {
          v60 = *v66;
          if (v38 <= *v66)
            goto LABEL_105;
          v71 = (char *)v35 + 12 * v60;
          v54.i64[0] = *(_QWORD *)v71;
          v54.i32[2] = *((_DWORD *)v71 + 2);
          v72 = (int8x16_t)vsubq_f32(v54, v63);
          *(float32x2_t *)v73.f32 = vmul_n_f32(*(float32x2_t *)v72.i8, *(float *)v72.i32);
          v74 = (float32x4_t)vextq_s8(v72, v72, 8uLL);
          *(float32x2_t *)&v73.u32[2] = vmul_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v72.i8);
          *(float32x2_t *)v75.f32 = vmul_lane_f32(*(float32x2_t *)v72.i8, *(float32x2_t *)v72.i8, 1);
          *(float32x2_t *)&v75.u32[2] = vmul_lane_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v72.i8, 1);
          *(float32x2_t *)v74.f32 = vmul_laneq_f32(*(float32x2_t *)v72.i8, (float32x4_t)v72, 2);
          v54 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32((float32x4_t)v72, (float32x4_t)v72), 2);
          v74.i32[2] = v54.i32[0];
          v58.i32[1] = v64;
          v58.i32[2] = v65;
          v67.i32[1] = v68.i32[0];
          v67.i32[2] = v69;
          v52.i32[1] = v70;
          v52.i32[2] = v53.i32[0];
          v58 = vaddq_f32(v58, v73);
          v67 = vaddq_f32(v67, v75);
          v52 = vaddq_f32(v52, v74);
          v69 = v67.i32[2];
          v68.i32[0] = v67.i32[1];
          v65 = v58.i32[2];
          v64 = v58.i32[1];
          v53.i32[0] = v52.i32[2];
          v70 = v52.i32[1];
          ++v62;
          v180 = ++v66;
        }
        while (v66 != v57);
        v174 = v55;
        v63.f32[0] = (float)v62;
        v76 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 0);
        v68.i32[1] = v67.i32[2];
        v68.i64[1] = v52.i64[0];
        v58.i64[1] = __PAIR64__(v67.u32[0], v58.u32[2]);
        v185 = 0;
        *(_QWORD *)&v184[4] = 0x300000003;
        v186[0] = vdivq_f32(v58, v76);
        v186[1] = vdivq_f32(v68, v76);
        v187 = vdivq_f32(v53, v63).u32[0];
        sub_223CD406C((uint64_t)&v180);
        if (!v185 || *((float *)&v183 + 2) == 0.0)
          goto LABEL_26;
        v81 = 0.0 - *((float *)&v183 + 2);
        if (*((float *)&v183 + 2) >= 0.0)
          v81 = *((float *)&v183 + 2);
        if (v81 <= 0.000001)
          goto LABEL_26;
        if (*((float *)&v183 + 3) == 0.0)
          goto LABEL_26;
        if (fabsf(*((float *)&v183 + 3)) <= 0.000001)
          goto LABEL_26;
        if ((float)(*((float *)&v183 + 3) / *((float *)&v183 + 2)) < a6)
          goto LABEL_26;
        v82 = *((float *)&v183 + 1);
        if (*(float *)v184 > 0.0 && (float)(*(float *)v184 / *((float *)&v183 + 3)) > a7)
          goto LABEL_26;
        v83 = atomic_load((unsigned __int8 *)&qword_25578F140);
        if ((v83 & 1) == 0)
        {
          v158 = *((float *)&v183 + 1);
          v154 = __cxa_guard_acquire(&qword_25578F140);
          v82 = v158;
          if (v154)
          {
            dword_25578F138 = 1065098332;
            __cxa_guard_release(&qword_25578F140);
            v82 = v158;
          }
        }
        v84 = atomic_load((unsigned __int8 *)&qword_25578F150);
        if ((v84 & 1) == 0)
        {
          v159 = v82;
          v155 = __cxa_guard_acquire(&qword_25578F150);
          v82 = v159;
          if (v155)
          {
            dword_25578F148 = 1043452119;
            __cxa_guard_release(&qword_25578F150);
            v82 = v159;
          }
        }
        v85 = fabsf(v82);
        if (v85 <= *(float *)&dword_25578F148)
          v86 = 2;
        else
          v86 = 4;
        if (v85 >= *(float *)&dword_25578F138)
          v86 = 1;
        if (v86 == 1)
        {
          v180 = v56;
          *(_QWORD *)&v181[0] = v35;
          v95 = 0uLL;
          v96 = v56;
          *((_QWORD *)&v181[0] + 1) = v38;
          do
          {
            v60 = *v96;
            if (v38 <= *v96)
              goto LABEL_105;
            v97 = (char *)v35 + 12 * v60;
            v77.i64[0] = *(_QWORD *)v97;
            v77.i32[2] = *((_DWORD *)v97 + 2);
            v95 = vaddq_f32(v95, v77);
            v180 = ++v96;
          }
          while (v96 != v57);
          v98 = (int8x16_t)vdivq_f32(v95, v177);
          if (v82 >= 0.0)
            v99 = 1.0;
          else
            v99 = -1.0;
          v100.i64[0] = 0;
          v100.i64[1] = LODWORD(v99);
          goto LABEL_69;
        }
        if (v86 == 2)
        {
          v180 = v56;
          *(_QWORD *)&v181[0] = v35;
          *((_QWORD *)&v181[0] + 1) = v38;
          v60 = *v56;
          if (v38 <= *v56)
LABEL_105:
            sub_22457354C((unint64_t *)v181 + 1, v60);
          v87 = v56 + 1;
          v88 = 0uLL;
          v89 = 0uLL;
          while (1)
          {
            v90 = (float32x2_t *)((char *)v35 + 12 * v60);
            *(float32x2_t *)v78.f32 = *v90;
            v78.i32[2] = v90[1].i32[0];
            v89 = vaddq_f32(v89, v78);
            v91 = *v90;
            v92 = (float32x2_t)vextq_s8(v88, v88, 8uLL).u64[0];
            *(float32x2_t *)v88.i8 = vmla_n_f32(*(float32x2_t *)v88.i8, v91, v91.f32[0]);
            v93 = vmla_lane_f32(v92, v91, v91, 1);
            v88.u64[1] = (unint64_t)v93;
            v180 = v87;
            if (v87 == v57)
              break;
            v94 = *v87++;
            v60 = v94;
            if (v38 <= v94)
              goto LABEL_105;
          }
          v101 = vdivq_f32(v89, v177);
          v102 = (int8x16_t)vdivq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s32(v174, 0));
          v103 = (float32x2_t)vextq_s8(v102, v102, 8uLL).u64[0];
          v104 = vmls_f32(*(float32x2_t *)v102.i8, *(float32x2_t *)v101.f32, *(float32x2_t *)v101.f32).f32[0];
          v98 = (int8x16_t)v101;
          v105 = vmls_lane_f32(v103, *(float32x2_t *)v101.f32, *(float32x2_t *)v101.f32, 1);
          *(float *)v79.i32 = v104 + v105.f32[1];
          v106 = vmuls_lane_f32(v104, v105, 1);
          v107 = v106 - vmul_f32(v105, v105).f32[0];
          *(float *)v80.i32 = (float)((float)(*(float *)v79.i32 * *(float *)v79.i32) * v39) - v107;
          if (*(float *)v80.i32 > 0.0)
          {
            *(float *)v80.i32 = sqrtf(*(float *)v80.i32);
            v108 = *(float *)v79.i32 * v40;
            v109.i64[0] = 0x8000000080000000;
            v109.i64[1] = 0x8000000080000000;
            v79.i64[0] = vbslq_s8(v109, v80, v79).u64[0];
            v110 = v108 + *(float *)v79.i32;
            *(float *)v79.i32 = v107 / v110;
            if (v110 > (float)(v107 / v110))
            {
              v111 = v110;
              if ((float)(v106 - v107) > (float)(v107 * 0.00000011921))
                goto LABEL_60;
LABEL_65:
              if (v104 <= v105.f32[1])
                v100 = (int8x16_t)xmmword_224649660;
              else
                v100 = (int8x16_t)xmmword_224657E50;
LABEL_68:
              v100.i32[2] = 0;
LABEL_69:
              v180 = v56;
              *(_QWORD *)&v181[0] = v35;
              *((_QWORD *)&v181[0] + 1) = v38;
              v114 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v100.i8, 1);
              v115 = *(float *)&v100.i32[2];
              v116 = (float32x2_t)vextq_s8(v100, v100, 8uLL).u64[0];
              v117 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v100.i8), v114, *(float32x2_t *)v100.i8, 1), v116, v116);
              v118 = *(float *)v117.i32 + -1.0;
              if (*(float *)v117.i32 < 1.0)
                v118 = 1.0 - *(float *)v117.i32;
              _ZF = v118 <= 0.000001 || *(float *)v117.i32 == 1.0;
              *(float *)v117.i32 = 1.0 / sqrtf(*(float *)v117.i32);
              v120 = (int8x16_t)vdupq_lane_s32(v117, 0);
              v121 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v98.i8, 1);
              v122 = (float32x2_t)vextq_s8(v98, v98, 8uLL).u64[0];
              if (_ZF)
                v123 = -1;
              else
                v123 = 0;
              __asm { FMOV            V2.4S, #1.0 }
              v127 = (int8x16_t)vmulq_f32((float32x4_t)v100, (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v123), _Q2, v120));
              *(int32x2_t *)_Q2.i8 = vdup_lane_s32(*(int32x2_t *)v127.i8, 1);
              v175 = v122;
              v178 = (float32x4_t)v98;
              v129 = (float32x2_t)vextq_s8(v127, v127, 8uLL).u64[0];
              v130 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v98.i8, *(float32x2_t *)v127.i8), *(float32x2_t *)_Q2.i8, *(float32x2_t *)v98.i8, 1), v129, v122);
              v131 = v56;
              do
              {
                v132 = *v131;
                if (v38 <= *v131)
                  sub_22457354C((unint64_t *)v181 + 1, v132);
                v133 = (float32x2_t *)((char *)v35 + 12 * v132);
                v79.i32[0] = v133[1].i32[0];
                if (vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*v133, *(float32x2_t *)v127.i8), *(float32x2_t *)_Q2.i8, *v133, 1), v129, *(float32x2_t *)v79.i8), v130).f32[0] > 0.01)
                {
                  v39 = 0.25;
                  v40 = 0.5;
                  goto LABEL_26;
                }
                v180 = ++v131;
              }
              while (v131 != v57);
              v134 = atomic_load((unsigned __int8 *)&qword_25578F140);
              v156 = v116;
              v157 = (float32x4_t)v100;
              if ((v134 & 1) == 0 && __cxa_guard_acquire(&qword_25578F140))
              {
                dword_25578F138 = 1065098332;
                __cxa_guard_release(&qword_25578F140);
              }
              v135 = atomic_load((unsigned __int8 *)&qword_25578F150);
              if ((v135 & 1) == 0 && __cxa_guard_acquire(&qword_25578F150))
              {
                dword_25578F148 = 1043452119;
                __cxa_guard_release(&qword_25578F150);
              }
              v136 = fabsf(v115);
              v137 = v136 < *(float *)&dword_25578F138 && v136 > *(float *)&dword_25578F148;
              if (v137
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Vision/ConnSACPlaneDetectorImpl.cpp", 224, (uint64_t)"orientation != PlaneOrientation::Other", 38, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              v130.i32[0] = a4[1].i32[0];
              *(float32x2_t *)_Q2.i8 = a4[2];
              v129.i32[0] = a4[3].i32[0];
              v138 = a4[4];
              v79.i32[0] = a4[5].i32[0];
              *(float32x2_t *)v139.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*a4, v178.f32[0]), *(float32x2_t *)_Q2.i8, *(float32x2_t *)v178.f32, 1), v138, v178, 2);
              *(float32x2_t *)&v139.u32[2] = vmla_f32(vmla_f32(vmul_f32(v130, *(float32x2_t *)v178.f32), v121, v129), v175, *(float32x2_t *)v79.i8);
              *(float32x2_t *)v100.i8 = a4[6];
              v100.i32[2] = a4[7].i32[0];
              v140 = vaddq_f32(v139, (float32x4_t)v100);
              *(float32x2_t *)v141.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*a4, v157.f32[0]), *(float32x2_t *)_Q2.i8, *(float32x2_t *)v157.f32, 1), v138, v157, 2);
              *(float32x2_t *)&v141.u32[2] = vmla_f32(vmla_f32(vmul_f32(v130, *(float32x2_t *)v157.f32), v114, v129), v156, *(float32x2_t *)v79.i8);
              v142 = (int8x16_t)vsubq_f32(v172, v178);
              *(int32x2_t *)_Q2.i8 = vdup_lane_s32(*(int32x2_t *)v142.i8, 1);
              v143 = (float32x2_t)vextq_s8(v142, v142, 8uLL).u64[0];
              *(float *)_Q2.i32 = 1.0
                                / sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v142.i8, *(float32x2_t *)v142.i8), *(float32x2_t *)_Q2.i8, *(float32x2_t *)v142.i8, 1), v143, v143).f32[0]);
              *(float32x2_t *)v142.i8 = vmla_f32(vmla_f32(vmul_f32(vmul_f32(*(float32x2_t *)v142.i8, *(float32x2_t *)_Q2.i8), *(float32x2_t *)v157.f32), v114, vmul_lane_f32(*(float32x2_t *)_Q2.i8, *(float32x2_t *)v142.i8, 1)), v156, vmul_f32(v143, *(float32x2_t *)_Q2.i8));
              _Q2.i32[0] = 0;
              LODWORD(v181[0]) = v140.i32[2];
              v144 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32((float32x4_t)_Q2, (float32x4_t)v142), 0), (int8x16_t)vnegq_f32(v141), (int8x16_t)v141);
              v180 = (unint64_t *)v140.i64[0];
              HIDWORD(v181[0]) = v144.i32[2];
              *(_QWORD *)((char *)v181 + 4) = v144.i64[0];
              v145 = operator new(0x20uLL);
              *((_QWORD *)&v183 + 1) = v145 + 2;
              *(_QWORD *)v184 = v145 + 2;
              v146 = *((_OWORD *)v56 + 1);
              *v145 = *(_OWORD *)v56;
              v145[1] = v146;
              *(_QWORD *)&v183 = v145;
              v147 = v168[1];
              v39 = 0.25;
              v40 = 0.5;
              if (v147 >= v168[2])
              {
                v152 = sub_223FA9CD0(v168, (uint64_t)&v180);
                v153 = (void *)v183;
                v168[1] = v152;
                if (v153)
                {
                  *((_QWORD *)&v183 + 1) = v153;
                  operator delete(v153);
                }
              }
              else
              {
                v148 = v180;
                *(_DWORD *)(v147 + 8) = v181[0];
                *(_QWORD *)v147 = v148;
                v149 = *(_QWORD *)((unint64_t)&v180 | 0xC);
                *(_DWORD *)(v147 + 20) = *(_DWORD *)(((unint64_t)&v180 | 0xC) + 8);
                *(_QWORD *)(v147 + 12) = v149;
                v150 = v181[1];
                v151 = v181[2];
                *(_DWORD *)(v147 + 56) = v182;
                *(_OWORD *)(v147 + 40) = v151;
                *(_OWORD *)(v147 + 24) = v150;
                *(_QWORD *)(v147 + 64) = 0;
                *(_QWORD *)(v147 + 72) = 0;
                *(_QWORD *)(v147 + 80) = 0;
                *(_OWORD *)(v147 + 64) = v183;
                *(_QWORD *)(v147 + 80) = *(_QWORD *)v184;
                v168[1] = v147 + 88;
              }
              goto LABEL_26;
            }
            v111 = v107 / v110;
            *(float *)v79.i32 = v110;
            if ((float)(v106 - v107) <= (float)(v107 * 0.00000011921))
              goto LABEL_65;
LABEL_60:
            v93.f32[0] = *(float *)v79.i32 - v105.f32[1];
            v101.f32[0] = v111 - v105.f32[1];
            v112 = vdupq_lane_s32(*(int32x2_t *)v101.f32, 0);
            v112.i32[3] = v105.i32[0];
            v113 = (float32x2_t)vzip1_s32((int32x2_t)v93, (int32x2_t)v105);
            v93.f32[0] = v93.f32[0] * v93.f32[0];
            *(float32x2_t *)v100.i8 = vmul_n_f32(v113, 1.0 / sqrtf(vmla_f32(v93, v105, v105).f32[0]));
            v113.i32[0] = v112.i32[2];
            v100.u64[1] = (unint64_t)vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v112.u64[1], (int32x2_t)v105), 1.0 / sqrtf(vmla_f32(vmul_f32(v113, v113), v105, v105).f32[0]));
            goto LABEL_68;
          }
          if (*(float *)v80.i32 >= 0.0)
          {
            v111 = *(float *)v79.i32 * v40;
            *(float *)v79.i32 = *(float *)v79.i32 * v40;
            if ((float)(v106 - v107) <= (float)(v107 * 0.00000011921))
              goto LABEL_65;
            goto LABEL_60;
          }
        }
      }
LABEL_26:
      if (v56)
        operator delete(v56);
      v37 += 9;
    }
    while (v37 != v36);
  }
LABEL_102:
  if (v35)
    operator delete(v35);
}

void sub_223FAC350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  void *v44;
  void *v45;

  if (v45)
    operator delete(v45);
  sub_223EDC8F4(a23);
  if (v44)
    operator delete(v44);
  _Unwind_Resume(a1);
}

void sub_223FAC3D4(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  float32x4_t v6;
  int8x16_t v7;
  uint64_t v8;
  uint64_t v13;
  char **v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float v20;
  int8x16_t v22;
  unsigned int v23;
  int8x16_t v24;
  int8x16_t v25;
  char v26;
  float32x2_t v27;
  float32x2_t v28;
  float v29;
  float v30;
  float32x2_t v31;
  uint64_t v32;
  int8x16_t v33;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_223FAC6B8((uint64_t)a3, a1);
  if (a1)
  {
    v8 = 0;
    __asm { FMOV            V0.4S, #1.0 }
    v33 = _Q0;
    do
    {
      v13 = a2 + 88 * v8;
      v14 = (char **)(v13 + 24);
      v15 = *(_QWORD *)(v13 + 32) - *(_QWORD *)(v13 + 24);
      if (v15 >= 0x50)
      {
        v16 = *a3;
        v17 = a3[1];
        if (*a3 != v17)
        {
          _Q0.i32[0] = *(_DWORD *)(v13 + 20);
          v6.i64[0] = *(_QWORD *)(v13 + 12);
          v18 = v6;
          v19 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.f32, 1);
          v20 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32), v19, *(float32x2_t *)v6.f32, 1), *(float32x2_t *)_Q0.i8, *(float32x2_t *)_Q0.i8).f32[0];
          v6.f32[0] = v20 + -1.0;
          if (v20 < 1.0)
            v6.f32[0] = 1.0 - v20;
          _ZF = v6.f32[0] <= 0.000001 || v20 == 1.0;
          v6.f32[0] = 1.0 / sqrtf(v20);
          v22 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 0);
          if (_ZF)
            v23 = -1;
          else
            v23 = 0;
          v6 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v23), v33, v22);
          v18.i32[2] = *(_DWORD *)(v13 + 20);
          v24 = (int8x16_t)vmulq_f32(v18, v6);
          v25 = vextq_s8(v24, v24, 8uLL);
          v7.i32[0] = *(_DWORD *)(v13 + 8);
          *(float32x2_t *)v6.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13, *(float32x2_t *)v24.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1), *(float32x2_t *)v13, 1), *(float32x2_t *)v25.i8, *(float32x2_t *)v7.i8);
          v26 = 1;
          do
          {
            while (1)
            {
              v7.i32[0] = *(_DWORD *)(v16 + 20);
              v25.i64[0] = *(_QWORD *)(v16 + 12);
              if (fabsf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v18.f32), v19, *(float32x2_t *)v25.i8, 1), *(float32x2_t *)_Q0.i8, *(float32x2_t *)v7.i8).f32[0]) <= 0.99027)break;
              v28 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25.i8, 1);
              v25.i32[2] = *(_DWORD *)(v16 + 20);
              v29 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8), v28, v28), *(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8).f32[0];
              if (v29 != 1.0)
              {
                v30 = v29 + -1.0;
                if (v29 < 1.0)
                  v30 = 1.0 - v29;
                if (v30 > 0.000001)
                  v25 = (int8x16_t)vmulq_n_f32((float32x4_t)v25, 1.0 / sqrtf(v29));
              }
              v7.i64[0] = *(_QWORD *)v16;
              v7.i32[2] = *(_DWORD *)(v16 + 8);
              v27 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v16, *(float32x2_t *)v25.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25.i8, 1), *(float32x2_t *)v16, 1);
              v25 = vextq_s8(v25, v25, 8uLL);
              if (fabsf(vsub_f32(*(float32x2_t *)v6.f32, vmla_f32(v27, *(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL))).f32[0]) > 0.05)break;
              if (*(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24) < v15)
              {
                v31 = *(float32x2_t *)v13;
                *(_DWORD *)(v16 + 8) = *(_DWORD *)(v13 + 8);
                *(float32x2_t *)v16 = v31;
                v32 = *(_QWORD *)(v13 + 12);
                *(_DWORD *)(v16 + 20) = *(_DWORD *)(v13 + 20);
                *(_QWORD *)(v16 + 12) = v32;
                if ((char **)(v16 + 24) != v14)
                  sub_223FAF0D4((_QWORD *)(v16 + 24), *v14, *(char **)(v13 + 32), (uint64_t)(*(_QWORD *)(v13 + 32) - (_QWORD)*v14) >> 3);
                goto LABEL_3;
              }
              v26 = 0;
              v16 += 88;
              if (v16 == v17)
                goto LABEL_3;
            }
            v16 += 88;
          }
          while (v16 != v17);
          if ((v26 & 1) == 0)
            goto LABEL_3;
        }
        if (v17 >= a3[2])
        {
          a3[1] = sub_223FAF28C(a3, (uint64_t *)v13);
        }
        else
        {
          sub_223F3A420(a3[1], (uint64_t *)v13);
          a3[1] = v17 + 88;
          a3[1] = v17 + 88;
        }
      }
LABEL_3:
      ++v8;
    }
    while (v8 != a1);
  }
}

void sub_223FAC684(_Unwind_Exception *a1)
{
  void **v1;

  sub_223F3A2D4(v1);
  _Unwind_Resume(a1);
}

void sub_223FAC6A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  sub_223F3A2D4((void **)v1);
  _Unwind_Resume(a1);
}

void sub_223FAC6B8(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  __int128 v12;

  v2 = *(char **)a1;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8BBLL)
      sub_22316E078();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 88 * a2;
    v6 = (char *)operator new(88 * a2);
    v7 = &v6[88 * ((v4 - v2) / 88)];
    *(_QWORD *)&v12 = v7;
    *((_QWORD *)&v12 + 1) = &v6[v5];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = &v6[v5];
    }
    else
    {
      v8 = 0;
      do
      {
        sub_223F3A420((uint64_t)&v7[v8 - 88], (uint64_t *)&v4[v8 - 88]);
        v8 -= 88;
      }
      while (&v4[v8] != v2);
      v2 = *(char **)a1;
      v9 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v7[v8];
      *(_OWORD *)(a1 + 8) = v12;
      while (v9 != v2)
      {
        v10 = (void *)*((_QWORD *)v9 - 4);
        if (v10)
        {
          *((_QWORD *)v9 - 3) = v10;
          operator delete(v10);
        }
        v11 = (void *)*((_QWORD *)v9 - 8);
        if (v11)
        {
          *((_QWORD *)v9 - 7) = v11;
          operator delete(v11);
        }
        v9 -= 88;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

void sub_223FAC870(unint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, double **a5@<X8>, double a6@<D0>)
{
  double **v6;
  unint64_t v7;
  size_t v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  size_t v25;
  int8x16_t v26;
  float32x4_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  float32x2_t v35;
  float v36;
  float v37;
  float32x2_t v38;
  int32x2_t v39;
  float *v40;
  float *v41;
  float32x4_t *v42;
  uint64_t v43;
  float32x4_t v44;
  float *v45;
  double *v46;
  double *v47;
  double *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  double *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  char **v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  double *v61;
  char **v62;
  _BYTE *v63;
  _BYTE *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  __int128 *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  double *v82;
  unint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  _BYTE *v94;
  _QWORD *v95;
  int64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  _OWORD *v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t __sz;
  unint64_t v110;
  unint64_t v111;
  uint64_t *v112;
  int v113;
  double **v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _QWORD v119[2];
  unsigned int v120;
  int v121;
  _QWORD v122[2];
  int v123;
  __int128 v124;
  double *v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 __p;
  __int128 v131;
  uint64_t v132;

  v6 = a5;
  v132 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  v7 = a3;
  if (!a3)
  {
    v124 = 0uLL;
    v125 = 0;
    sub_223FAC6B8((uint64_t)&v124, a1);
    v106 = 88 * a1;
    do
    {
      v126 = *a2;
      v127 = *(_OWORD *)(a2 + 1);
      v128 = 0u;
      v129 = 0u;
      __p = 0u;
      v131 = 0u;
      v107 = *((_QWORD *)&v124 + 1);
      if (*((_QWORD *)&v124 + 1) >= (unint64_t)v125)
      {
        *((_QWORD *)&v124 + 1) = sub_223FAFC18((char **)&v124, (uint64_t)&v126);
        if ((_QWORD)__p)
          operator delete((void *)__p);
      }
      else
      {
        v108 = *a2;
        *(_DWORD *)(*((_QWORD *)&v124 + 1) + 8) = *((_DWORD *)a2 + 2);
        *(_QWORD *)v107 = v108;
        *(_QWORD *)(v107 + 12) = *(_QWORD *)((char *)&v127 + 4);
        *(_DWORD *)(v107 + 20) = HIDWORD(v127);
        *(_QWORD *)(v107 + 32) = 0;
        *(_QWORD *)(v107 + 40) = 0;
        *(_QWORD *)(v107 + 24) = 0;
        *(_QWORD *)&v129 = 0;
        v128 = 0uLL;
        *(_OWORD *)(v107 + 48) = 0uLL;
        *(_OWORD *)(v107 + 64) = 0uLL;
        *(_QWORD *)(v107 + 80) = 0;
        *((_QWORD *)&v124 + 1) = v107 + 88;
      }
      if ((_QWORD)v128)
        operator delete((void *)v128);
      a2 += 11;
      v106 -= 88;
    }
    while (v106);
    *(_OWORD *)v6 = v124;
    v6[2] = v125;
    return;
  }
  v12 = (4 * (3 * a1) + 31) & 0x7FFFFFFE0;
  *((_QWORD *)&v124 + 1) = v12 >> 2;
  v13 = operator new(v12, (std::align_val_t)0x20uLL);
  *(_QWORD *)&v124 = v13;
  LODWORD(v125) = a1;
  if ((_DWORD)a1)
    bzero(v13, 4 * (3 * a1));
  v14 = 0;
  v15 = (uint64_t *)((char *)a2 + 12);
  v16 = a1;
  do
  {
    v17 = v124 + 4 * v14;
    v18 = *v15;
    *(_DWORD *)(v17 + 8) = *((_DWORD *)v15 + 2);
    *(_QWORD *)v17 = v18;
    v14 += 3;
    v15 += 11;
    --v16;
  }
  while (v16);
  v19 = (4 * (3 * v7) + 31) & 0x7FFFFFFE0;
  v122[1] = v19 >> 2;
  v20 = (char *)operator new(v19, (std::align_val_t)0x20uLL);
  v21 = 0;
  v122[0] = v20;
  v123 = v7;
  do
  {
    v22 = &v20[4 * v21];
    v23 = *a4;
    v24 = *((_DWORD *)a4 + 2);
    *(_DWORD *)v22 = *a4;
    *(_DWORD *)&v22[4 * v7] = HIDWORD(v23);
    *(_DWORD *)&v22[8 * v7] = v24;
    ++v21;
    a4 = (uint64_t *)((char *)a4 + 12);
  }
  while (v7 != v21);
  v25 = (4 * ((_DWORD)v125 * v7) + 31) & 0x7FFFFFFE0;
  v119[1] = v25 >> 2;
  v119[0] = operator new(v25, (std::align_val_t)0x20uLL);
  v120 = v7;
  v121 = (int)v125;
  *(_QWORD *)&v127 = v122;
  *((_QWORD *)&v127 + 1) = &v124;
  LODWORD(v128) = 1065353216;
  sub_223FAFE5C((uint64_t)v119, (uint64_t)&v126);
  v28 = v120;
  if (v7 != v120
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Vision/ConnSACPlaneDetectorImpl.cpp", 361, (uint64_t)"modelMatrix.rows() == numPoints", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| a1 != v121&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Vision/ConnSACPlaneDetectorImpl.cpp", 362, (uint64_t)"modelMatrix.columns() == numPlaneCandidates", 43, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v29 = 0;
  v30 = 0;
  v31 = (v28 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  v32 = (v31 + 1) & 0x7FFFFFFFFFFFFFF8;
  v117 = v119[0];
  v33 = v119[0] + 16;
  do
  {
    v34 = &a2[11 * v30];
    v27.i32[0] = *((_DWORD *)v34 + 5);
    v26.i64[0] = *(uint64_t *)((char *)v34 + 12);
    v35 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1);
    v26.i32[2] = v27.i32[0];
    v36 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), v35, *(float32x2_t *)v26.i8, 1), *(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32).f32[0];
    if (v36 != 1.0)
    {
      v37 = v36 + -1.0;
      if (v36 < 1.0)
        v37 = 1.0 - v36;
      if (v37 > 0.000001)
        v26 = (int8x16_t)vmulq_n_f32((float32x4_t)v26, 1.0 / sqrtf(v36));
    }
    if ((_DWORD)v28)
    {
      v27.i64[0] = *v34;
      v35.i32[0] = *((_DWORD *)v34 + 2);
      v38 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v34, *(float32x2_t *)v26.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1), *(float32x2_t *)v34, 1);
      v26 = vextq_s8(v26, v26, 8uLL);
      v39 = (int32x2_t)vmla_f32(v38, *(float32x2_t *)v26.i8, v35);
      v40 = (float *)(v117 + 4 * (v28 * v30));
      v41 = v40;
      if (v31 < 7)
        goto LABEL_25;
      v42 = (float32x4_t *)(v33 + 4 * v29);
      v41 = &v40[v32];
      v26 = (int8x16_t)vdupq_lane_s32(v39, 0);
      v43 = (v31 + 1) & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v27 = vsubq_f32(v42[-1], (float32x4_t)v26);
        v44 = vsubq_f32(*v42, (float32x4_t)v26);
        v42[-1] = v27;
        *v42 = v44;
        v42 += 2;
        v43 -= 8;
      }
      while (v43);
      if (v31 + 1 != v32)
      {
LABEL_25:
        v45 = &v40[v28];
        do
        {
          *v41 = *v41 - *(float *)v39.i32;
          ++v41;
        }
        while (v41 != v45);
      }
    }
    ++v30;
    v29 += v28;
  }
  while (v30 != a1);
  *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  if (a1 >= 0x2E8BA2E8BA2E8BBLL)
    sub_22316E078();
  v46 = (double *)operator new(88 * a1);
  v113 = v28;
  *v6 = v46;
  v6[1] = v46;
  v47 = &v46[11 * a1];
  v6[2] = v47;
  v48 = v46;
  v49 = v117;
  do
  {
    *v48 = 0.0;
    v48[1] = 0.0;
    v48[2] = 0.0078125;
    *(_OWORD *)(v48 + 3) = 0uLL;
    *(_OWORD *)(v48 + 5) = 0uLL;
    *(_OWORD *)(v48 + 7) = 0uLL;
    *(_OWORD *)(v48 + 9) = 0uLL;
    v48 += 11;
  }
  while (v48 != v47);
  v50 = 0;
  v6[1] = v47;
  __sz = 8 * v7;
  v110 = v7 >> 61;
  v114 = v6;
  v111 = a1;
  v112 = a2;
  v118 = v7;
  while (2)
  {
    v51 = &a2[11 * v50];
    v52 = &v46[11 * v50];
    v53 = *v51;
    *((_DWORD *)v52 + 2) = *((_DWORD *)v51 + 2);
    *(_QWORD *)v52 = v53;
    v54 = *(uint64_t *)((char *)v51 + 12);
    *((_DWORD *)v52 + 5) = *((_DWORD *)v51 + 5);
    *(_QWORD *)((char *)v52 + 12) = v54;
    v55 = v7;
    v57 = (char **)(v52 + 3);
    v56 = (_BYTE *)*((_QWORD *)v52 + 3);
    v59 = *((_QWORD *)v52 + 5);
    v58 = v52 + 5;
    v60 = v50;
    v116 = v50;
    if (v55 <= (v59 - (uint64_t)v56) >> 3)
      goto LABEL_45;
    if (v110)
      sub_22367C394();
    v61 = &v46[11 * v50];
    v64 = (_BYTE *)*((_QWORD *)v61 + 4);
    v62 = (char **)(v61 + 4);
    v63 = v64;
    v65 = (char *)operator new(__sz);
    v66 = v64 - v56;
    v67 = &v65[(v64 - v56) & 0xFFFFFFFFFFFFFFF8];
    v68 = v67;
    if (v64 != v56)
    {
      if ((unint64_t)(v66 - 8) < 0x58)
      {
        v68 = &v65[(v63 - v56) & 0xFFFFFFFFFFFFFFF8];
        do
        {
LABEL_42:
          v77 = *((_QWORD *)v63 - 1);
          v63 -= 8;
          *((_QWORD *)v68 - 1) = v77;
          v68 -= 8;
        }
        while (v63 != v56);
        goto LABEL_43;
      }
      v68 = &v65[(v63 - v56) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v63 - &v65[v66 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
        goto LABEL_42;
      v69 = v66 >> 3;
      v70 = ((unint64_t)(v66 - 8) >> 3) + 1;
      v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
      v72 = &v63[-v71];
      v68 = &v67[-v71];
      v73 = &v65[8 * v69 - 16];
      v74 = (__int128 *)(v63 - 16);
      v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v76 = *v74;
        *((_OWORD *)v73 - 1) = *(v74 - 1);
        *(_OWORD *)v73 = v76;
        v73 -= 32;
        v74 -= 2;
        v75 -= 4;
      }
      while (v75);
      v63 = v72;
      if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_42;
    }
LABEL_43:
    *v57 = v68;
    *v62 = v67;
    *v58 = &v65[8 * v118];
    v60 = v116;
    v49 = v117;
    if (v56)
    {
      operator delete(v56);
      v49 = v117;
    }
LABEL_45:
    v78 = 0;
    v79 = v113 * v60;
    v7 = v118;
    v115 = v113 * v60;
    do
    {
      v81 = (v79 + v78);
      if (fabsf(*(float *)(v49 + 4 * v81)) < a6)
      {
        v82 = &v46[11 * v60];
        v85 = *((_QWORD *)v82 + 5);
        v84 = v82 + 5;
        v83 = v85;
        v86 = v84 - 1;
        v87 = (char *)*(v84 - 1);
        if ((unint64_t)v87 < v85)
        {
          *(_QWORD *)v87 = v78;
          v80 = (uint64_t)(v87 + 8);
LABEL_47:
          *v86 = v80;
          v46 = *v6;
          (*v6)[11 * v60 + 10] = (*v6)[11 * v60 + 10] + fabsf(*(float *)(v49 + 4 * v81));
          goto LABEL_48;
        }
        v88 = (char *)*(v84 - 2);
        v89 = (v87 - v88) >> 3;
        v90 = v89 + 1;
        if ((unint64_t)(v89 + 1) >> 61)
          sub_22367C394();
        v91 = v83 - (_QWORD)v88;
        if (v91 >> 2 > v90)
          v90 = v91 >> 2;
        if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
          v92 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v92 = v90;
        if (v92)
        {
          if (v92 >> 61)
            sub_223174E94();
          v93 = v92;
          v94 = operator new(8 * v92);
          v92 = v93;
          v95 = &v94[8 * v89];
          *v95 = v78;
          v80 = (uint64_t)(v95 + 1);
          v96 = v87 - v88;
          if (v87 != v88)
            goto LABEL_60;
        }
        else
        {
          v94 = 0;
          v95 = (_QWORD *)(8 * v89);
          *(_QWORD *)(8 * v89) = v78;
          v80 = 8 * v89 + 8;
          v96 = v87 - v88;
          if (v87 != v88)
          {
LABEL_60:
            v97 = v96 - 8;
            if (v97 >= 0x58)
            {
              v60 = v116;
              if ((unint64_t)(v88 - v94) >= 0x20)
              {
                v98 = (v97 >> 3) + 1;
                v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
                v100 = &v87[-v99];
                v95 = (_QWORD *)((char *)v95 - v99);
                v101 = &v94[8 * v89 - 16];
                v102 = v87 - 16;
                v103 = v98 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v104 = *(_OWORD *)v102;
                  *(v101 - 1) = *((_OWORD *)v102 - 1);
                  *v101 = v104;
                  v101 -= 2;
                  v102 -= 32;
                  v103 -= 4;
                }
                while (v103);
                v87 = v100;
                if (v98 == (v98 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_69;
              }
            }
            else
            {
              v60 = v116;
            }
            do
            {
              v105 = *((_QWORD *)v87 - 1);
              v87 -= 8;
              *--v95 = v105;
            }
            while (v87 != v88);
LABEL_69:
            *(v84 - 2) = v95;
            *v86 = v80;
            *v84 = &v94[8 * v92];
            if (v88)
              operator delete(v88);
            v6 = v114;
            v49 = v117;
            v7 = v118;
            v79 = v115;
            goto LABEL_47;
          }
        }
        v60 = v116;
        goto LABEL_69;
      }
LABEL_48:
      ++v78;
    }
    while (v78 != v7);
    v46[11 * v60 + 10] = v46[11 * v60 + 10]
                       / (double)(unint64_t)((uint64_t)(*(_QWORD *)&v46[11 * v60 + 4]
                                                            - *(_QWORD *)&v46[11 * v60 + 3]) >> 3);
    v50 = v60 + 1;
    a2 = v112;
    if (v60 + 1 != v111)
      continue;
    break;
  }
  MEMORY[0x227684CB8]();
  if (v122[0])
    MEMORY[0x227684CB8](v122[0], 0x1000C8052888210);
  if ((_QWORD)v124)
    MEMORY[0x227684CB8](v124, 0x1000C8052888210);
}

void sub_223FAD140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_223F3A2D4((void **)va);
  _Unwind_Resume(a1);
}

void sub_223FAD154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p)
{
  uint64_t v36;
  uint64_t v37;

  if (a19)
  {
    MEMORY[0x227684CB8](a19, 0x1000C8052888210);
    v36 = a22;
    if (!a22)
    {
LABEL_3:
      v37 = a25;
      if (!a25)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v36 = a22;
    if (!a22)
      goto LABEL_3;
  }
  MEMORY[0x227684CB8](v36, 0x1000C8052888210);
  v37 = a25;
  if (!a25)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  MEMORY[0x227684CB8](v37, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

void sub_223FAD264(uint64_t **a1@<X0>, uint64_t a2@<X1>, float *a3@<X2>, uint64_t *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t *v11;
  float64x2_t v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  uint64_t v16;
  float *v17;
  float32x4_t v18;
  float32x4_t v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  int8x16_t v29;
  float32x2_t v30;
  float v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  float v39;
  int v40;
  uint64_t v41;
  double v42;
  char *v43;
  char *v44;
  float v45;
  unsigned int v46;
  int v47;
  int v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  _BYTE *v55;
  char *v56;
  char *v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  __int128 *v68;
  uint64_t v69;
  __int128 v70;
  float64x2_t v71;
  _QWORD *v72;
  double v73;
  int8x16_t v74;
  int8x16_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  int8x16_t v80;
  int8x16_t v81;
  float64x2_t v82;
  float64x2_t v83;
  int64x2_t v84;
  float64x2_t v85;
  _QWORD *v86;
  uint64_t v87;
  float32x2_t *v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float32x2_t v92;
  float32x2_t *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _BYTE *v98;
  float32x2_t *v99;
  float32x2_t *v100;
  uint64_t v101;
  int64_t v102;
  unint64_t v103;
  float32x2_t *v104;
  float32x2_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _OWORD *v109;
  float32x2_t *v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  double v114;
  float64x2_t v115;
  int8x16_t v116;
  double v117;
  int8x16_t v118;
  double v119;
  uint64_t *v120;
  float *v121;
  float32x2_t *v122;
  unint64_t v123;
  float *v124;
  double v125;
  uint64_t v126;
  _BOOL4 v127;
  void *v129;
  unint64_t v130;
  uint64_t v131;
  int8x16_t v133;
  uint64_t *v134;
  uint64_t *v135;
  uint64_t *v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  char *v143;
  float64x2_t v144;
  uint64_t v145;
  float v146;
  float32x2_t v147;
  void *__p;
  __int128 v149;
  void *v150;
  void *v151;
  __int128 v152;
  uint64_t v153;
  float32x2_t *v154;
  float32x2_t *v155;
  float32x2_t *v156;
  _OWORD v157[3];

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_223FAC6B8((uint64_t)a4, 0x2E8BA2E8BA2E8BA3 * (a1[1] - *a1));
  v11 = *a1;
  v135 = a1[1];
  if (*a1 != v135)
  {
    v12.f64[0] = NAN;
    v12.f64[1] = NAN;
    v133 = (int8x16_t)vnegq_f64(v12);
    v134 = a4;
    do
    {
      sub_223F3A420((uint64_t)&v145, v11);
      v136 = v11;
      v14 = __p;
      v13 = (_QWORD *)v149;
      v15 = v149 - (_QWORD)__p;
      v16 = (uint64_t)(v149 - (_QWORD)__p) >> 3;
      v17 = (float *)operator new(((((((_QWORD)v149 - (_QWORD)__p) >> 1) * v16) & 0x3FFFFFFFCLL) + 31) & 0x7FFFFFFE0, (std::align_val_t)0x20uLL);
      v20 = v17;
      if ((_DWORD)v16 * (_DWORD)v16)
        bzero(v17, 4 * (v16 * v16));
      if (v15 >= 0x10)
      {
        v21 = 0;
        v22 = 0;
        v23 = 1;
        do
        {
          v24 = v14[v22];
          v22 = v23;
          v25 = &a3[3 * v24];
          v18.i64[0] = *(_QWORD *)v25;
          v18.f32[2] = v25[2];
          v26 = v21;
          v27 = v22;
          do
          {
            v28 = &a3[3 * v14[v27]];
            v19.i64[0] = *(_QWORD *)v28;
            v19.f32[2] = v28[2];
            v29 = (int8x16_t)vsubq_f32(v18, v19);
            v30 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1), *(float32x2_t *)v29.i8, 1);
            v19 = (float32x4_t)vextq_s8(v29, v29, 8uLL);
            v26 += v16;
            LODWORD(v20[v26]) = vmla_f32(v30, *(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32).u32[0];
            ++v27;
          }
          while (v16 != v27);
          v23 = v22 + 1;
          v21 += v16 + 1;
        }
        while (v22 + 1 != v16);
      }
      if ((_DWORD)v16 * (_DWORD)v16)
      {
        v31 = *v20;
        v32 = 0x100000000;
        if ((int)v16 > 1)
          v32 = 1;
        if (__PAIR64__(v16, 0) != v32)
        {
          do
          {
            v39 = 0.0;
            if (v32 <= HIDWORD(v32))
              v39 = v20[(v32 + HIDWORD(v32) * v16)];
            v31 = v31 + v39;
            v35 = (v32 + 1);
            v36 = v32 & 0xFFFFFFFF00000000;
            v37 = v36 | v35;
            v32 = v36 + 0x100000000;
            if ((int)v35 < (int)v16)
              v32 = v37;
            if ((_DWORD)v32)
              v38 = 0;
            else
              v38 = (_DWORD)v16 == HIDWORD(v32);
          }
          while (!v38);
        }
        memset(v157, 0, 24);
        if (v13 == v14)
        {
LABEL_28:
          v34 = 0;
          v33 = 0;
          if (v13 == v14)
            goto LABEL_70;
LABEL_29:
          v40 = 0;
          v41 = 0;
          v42 = (float)(v31 / (float)((unint64_t)((v16 - 1) * v16) >> 1))
              * a5
              * (double)(unint64_t)(v16 - 1);
          v43 = v33;
          v44 = v33;
          while (2)
          {
            if ((_DWORD)v16)
            {
              v45 = v20[(v41 * v16)];
              if ((_DWORD)v16 != 1)
              {
                v46 = 1;
                v47 = v41;
                do
                {
                  v48 = v40 + v46;
                  v47 += v16;
                  if (v46 >= v41)
                    v48 = v47;
                  v45 = v45 + v20[v48];
                  ++v46;
                }
                while ((_DWORD)v16 != v46);
              }
              if (v42 > v45)
              {
LABEL_41:
                if (v44 < v34)
                {
                  *(_QWORD *)v44 = v14[v41];
                  v44 += 8;
                  v33 = v44;
                  goto LABEL_31;
                }
                v49 = (char *)(v44 - v43);
                v50 = (v44 - v43) >> 3;
                v51 = v50 + 1;
                if ((unint64_t)(v50 + 1) >> 61)
                {
                  *((_QWORD *)&v157[0] + 1) = v33;
                  *(_QWORD *)&v157[1] = v34;
                  *(_QWORD *)&v157[0] = v43;
                  sub_22367C394();
                }
                if ((v34 - v43) >> 2 > v51)
                  v51 = (v34 - v43) >> 2;
                if ((unint64_t)(v34 - v43) >= 0x7FFFFFFFFFFFFFF8)
                  v52 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v52 = v51;
                if (v52)
                {
                  v143 = (char *)(v44 - v43);
                  if (v52 >> 61)
                  {
                    *(_QWORD *)&v157[0] = v43;
                    *((_QWORD *)&v157[0] + 1) = v33;
                    *(_QWORD *)&v157[1] = v34;
                    sub_223174E94();
                  }
                  v53 = v44;
                  v54 = v52;
                  v55 = operator new(8 * v52);
                  v44 = v53;
                  v52 = v54;
                  v49 = v143;
                  v56 = &v55[8 * v50];
                  *(_QWORD *)v56 = v14[v41];
                  v33 = v56 + 8;
                  v57 = (char *)(v44 - v43);
                  if (v44 == v43)
                  {
LABEL_56:
                    v34 = &v55[8 * v52];
                    if (v43)
                    {
                      v61 = v43;
                      v62 = v33;
                      v63 = v34;
                      operator delete(v61);
                      v34 = v63;
                      v33 = v62;
                    }
                    v43 = v56;
                    v44 = v33;
                    goto LABEL_31;
                  }
                }
                else
                {
                  v55 = 0;
                  v56 = (char *)(8 * v50);
                  *(_QWORD *)(8 * v50) = v14[v41];
                  v33 = (char *)(8 * v50 + 8);
                  v57 = (char *)(v44 - v43);
                  if (v44 == v43)
                    goto LABEL_56;
                }
                v58 = (unint64_t)(v57 - 8);
                if (v58 >= 0x168)
                {
                  v64 = (v44 - 8 - v43) & 0xFFFFFFFFFFFFFFF8;
                  if (&v49[(_QWORD)v55 - 8 - v64] > &v49[(_QWORD)v55 - 8])
                  {
                    v59 = v44;
                  }
                  else if (&v44[-v64 - 8] > v44 - 8)
                  {
                    v59 = v44;
                  }
                  else if ((unint64_t)(v44 - v55 - (_QWORD)v49) >= 0x20)
                  {
                    v65 = (v58 >> 3) + 1;
                    v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
                    v59 = &v44[-v66];
                    v56 -= v66;
                    v67 = &v55[8 * v50 - 16];
                    v68 = (__int128 *)(v44 - 16);
                    v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v70 = *v68;
                      *(v67 - 1) = *(v68 - 1);
                      *v67 = v70;
                      v67 -= 2;
                      v68 -= 2;
                      v69 -= 4;
                    }
                    while (v69);
                    if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_56;
                  }
                  else
                  {
                    v59 = v44;
                  }
                }
                else
                {
                  v59 = v44;
                }
                do
                {
                  v60 = *((_QWORD *)v59 - 1);
                  v59 -= 8;
                  *((_QWORD *)v56 - 1) = v60;
                  v56 -= 8;
                }
                while (v59 != v43);
                goto LABEL_56;
              }
            }
            else if (v42 > 0.0)
            {
              goto LABEL_41;
            }
LABEL_31:
            ++v41;
            v40 += v16;
            if (v41 == v16)
            {
              *((_QWORD *)&v157[0] + 1) = v33;
              *(_QWORD *)&v157[1] = v34;
              *(_QWORD *)&v157[0] = v43;
              goto LABEL_70;
            }
            continue;
          }
        }
      }
      else
      {
        v31 = 0.0;
        memset(v157, 0, 24);
        if (v13 == v14)
          goto LABEL_28;
      }
      if ((v15 & 0x8000000000000000) != 0)
        sub_22367C394();
      v33 = (char *)operator new(v15);
      v34 = &v33[8 * v16];
      *(_QWORD *)&v157[0] = v33;
      *((_QWORD *)&v157[0] + 1) = v33;
      *(_QWORD *)&v157[1] = v34;
      if (v13 != v14)
        goto LABEL_29;
LABEL_70:
      MEMORY[0x227684CB8](v20, 0x1000C8052888210);
      if (__p)
      {
        *(_QWORD *)&v149 = __p;
        operator delete(__p);
      }
      v72 = *(_QWORD **)&v157[0];
      __p = *(void **)&v157[0];
      v149 = *(_OWORD *)((char *)v157 + 8);
      v73 = v146;
      v74 = (int8x16_t)vcvtq_f64_f32(v147);
      v75 = (int8x16_t)vdupq_lane_s64(v74.i64[0], 0);
      *(double *)v75.i64 = v146;
      v76 = 0uLL;
      v141 = (float64x2_t)xmmword_224649980;
      v142 = (float64x2_t)xmmword_2245F5CB0;
      v144 = 0u;
      if (vmaxnmvq_f64(vabsq_f64((float64x2_t)v75)) > 0.0000999999975)
      {
        v77 = (float64x2_t)vextq_s8(v75, v75, 8uLL);
        v78.f64[0] = -*(double *)v74.i64;
        v78.f64[1] = v146;
        *(_QWORD *)&v79.f64[0] = vextq_s8(v74, v74, 8uLL).u64[0];
        v71.f64[0] = 1.0 / sqrt(vmuld_n_f64(*(double *)v74.i64, *(double *)v74.i64) + v73 * v73);
        v80 = (int8x16_t)vmulq_n_f64(v78, v71.f64[0]);
        v81 = (int8x16_t)vmulq_f64(v71, (float64x2_t)0);
        v82 = (float64x2_t)vextq_s8(v80, v81, 8uLL);
        v81.i64[1] = v80.i64[0];
        v83 = vmulq_f64((float64x2_t)v80, v77);
        v77.f64[1] = v79.f64[0];
        v79.f64[1] = v146;
        v84 = (int64x2_t)vmlsq_f64(vmulq_f64(v82, v79), (float64x2_t)v81, v77);
        *(_QWORD *)&v83.f64[0] = *(_OWORD *)&vmlsq_laneq_f64(v83, (float64x2_t)v75, (float64x2_t)v80, 1);
        *(_QWORD *)&v85.f64[0] = vdupq_laneq_s64(v84, 1).u64[0];
        *(double *)&v84.i64[1] = -(*(double *)v74.i64 * v71.f64[0]);
        v85.f64[1] = v71.f64[0] * v73;
        v141 = v85;
        v142 = (float64x2_t)v84;
        v83.f64[1] = v71.f64[0] * 0.0;
        v144 = v83;
      }
      v154 = 0;
      v155 = 0;
      v156 = 0;
      v86 = (_QWORD *)*((_QWORD *)&v157[0] + 1);
      v87 = *((_QWORD *)&v157[0] + 1) - *(_QWORD *)&v157[0];
      if (*((_QWORD *)&v157[0] + 1) != *(_QWORD *)&v157[0])
      {
        if (v87 < 0)
          sub_22316E078();
        v88 = (float32x2_t *)operator new(*((_QWORD *)&v157[0] + 1) - *(_QWORD *)&v157[0]);
        v154 = v88;
        v155 = v88;
        v156 = &v88[v87 >> 3];
        v89 = 0uLL;
        v76 = 0uLL;
        v90 = 0uLL;
        while (1)
        {
          v91 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v142, a3[3 * *v72]), v141, a3[3 * *v72 + 1]), v144, a3[3 * *v72 + 2]);
          v92 = vcvt_f32_f64(v91);
          if (v88 >= v156)
            break;
          *v88++ = v92;
LABEL_78:
          v155 = v88;
          v89 = vaddq_f64(v89, v91);
          v76 = vmlaq_n_f64(v76, v91, v91.f64[0]);
          v90 = vmlaq_laneq_f64(v90, v91, v91, 1);
          if (++v72 == v86)
          {
            v86 = __p;
            v113 = v149;
            goto LABEL_110;
          }
        }
        v93 = v154;
        v94 = v88 - v154;
        v95 = v94 + 1;
        if ((unint64_t)(v94 + 1) >> 61)
          sub_22316E078();
        v96 = (char *)v156 - (char *)v154;
        if (((char *)v156 - (char *)v154) >> 2 > v95)
          v95 = v96 >> 2;
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8)
          v97 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v97 = v95;
        v139 = v90;
        v140 = v76;
        v137 = v91;
        v138 = v89;
        if (v97)
        {
          if (v97 >> 61)
            sub_223174E94();
          v98 = operator new(8 * v97);
          v90 = v139;
          v76 = v140;
          v91 = v137;
          v89 = v138;
          v99 = (float32x2_t *)&v98[8 * v94];
          v100 = (float32x2_t *)&v98[8 * v97];
          *v99 = v92;
          v101 = (uint64_t)&v99[1];
          v102 = (char *)v88 - (char *)v93;
          if (v88 != v93)
          {
LABEL_89:
            v103 = v102 - 8;
            if (v103 < 0x168)
            {
              v104 = v88;
              goto LABEL_91;
            }
            v106 = ((char *)&v88[-1] - (char *)v93) & 0xFFFFFFFFFFFFFFF8;
            if (&v98[(char *)v88 - (char *)v93 - 8 - v106] > &v98[(char *)v88 - (char *)v93 - 8])
            {
              v104 = v88;
              goto LABEL_91;
            }
            if ((float32x2_t *)((char *)&v88[-1] - v106) > &v88[-1])
            {
              v104 = v88;
              goto LABEL_91;
            }
            if ((unint64_t)((char *)v93 - v98) < 0x20)
            {
              v104 = v88;
              goto LABEL_91;
            }
            v107 = (v103 >> 3) + 1;
            v108 = 8 * (v107 & 0x3FFFFFFFFFFFFFFCLL);
            v104 = &v88[v108 / 0xFFFFFFFFFFFFFFF8];
            v99 = (float32x2_t *)((char *)v99 - v108);
            v109 = &v98[8 * v94 - 16];
            v110 = v88 - 2;
            v111 = v107 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v112 = *(_OWORD *)v110->f32;
              *(v109 - 1) = *(_OWORD *)v110[-2].f32;
              *v109 = v112;
              v109 -= 2;
              v110 -= 4;
              v111 -= 4;
            }
            while (v111);
            if (v107 != (v107 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_91:
                v105 = v104[-1];
                --v104;
                v99[-1] = v105;
                --v99;
              }
              while (v104 != v93);
            }
            v88 = v154;
            v154 = v99;
            v156 = v100;
            if (!v88)
            {
LABEL_97:
              v88 = (float32x2_t *)v101;
              goto LABEL_78;
            }
LABEL_96:
            operator delete(v88);
            v91 = v137;
            v89 = v138;
            v90 = v139;
            v76 = v140;
            goto LABEL_97;
          }
        }
        else
        {
          v98 = 0;
          v99 = (float32x2_t *)(8 * v94);
          v100 = 0;
          *(float32x2_t *)(8 * v94) = v92;
          v101 = 8 * v94 + 8;
          v102 = (char *)v88 - (char *)v93;
          if (v88 != v93)
            goto LABEL_89;
        }
        v154 = v99;
        v156 = v100;
        goto LABEL_96;
      }
      v88 = 0;
      v113 = *((_QWORD *)&v157[0] + 1);
      v89 = 0uLL;
      v90 = 0uLL;
LABEL_110:
      v116 = (int8x16_t)vdivq_f64(v89, (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt((double)(unint64_t)((v113 - (uint64_t)v86) >> 3))), 0));
      v114 = vmlsq_f64(v76, (float64x2_t)v116, (float64x2_t)v116).f64[0];
      v115 = vmlsq_laneq_f64(v90, (float64x2_t)v116, (float64x2_t)v116, 1);
      *(double *)v116.i64 = v114 + v115.f64[1];
      v118 = (int8x16_t)vmulq_f64(v115, v115);
      v117 = vmuld_lane_f64(v114, v115, 1) - *(double *)v118.i64;
      *(double *)v118.i64 = *(double *)v116.i64 * *(double *)v116.i64 * 0.25 - v117;
      if (*(double *)v118.i64 <= 0.0)
      {
        v120 = v134;
        v121 = &a3[3 * a2];
        if (*(double *)v118.i64 < 0.0 || *(double *)v116.i64 * 0.5 < *(double *)v116.i64 * 0.5 * 0.100000001)
        {
LABEL_129:
          v127 = 0;
          goto LABEL_132;
        }
      }
      else
      {
        *(double *)v118.i64 = sqrt(*(double *)v118.i64);
        v119 = *(double *)v116.i64 * 0.5 + *(double *)vbslq_s8(v133, v118, v116).i64;
        v120 = v134;
        v121 = &a3[3 * a2];
        if (v119 <= v117 / v119)
        {
          if (v119 < v117 / v119 * 0.100000001)
            goto LABEL_129;
        }
        else if (v117 / v119 < v119 * 0.100000001)
        {
          goto LABEL_129;
        }
      }
      v122 = v154;
      if (v88
        && !v154
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      sub_223FBEADC(v88 - v122, v122, (uint64_t)v157);
      v152 = v157[0];
      v153 = *(_QWORD *)&v157[1];
      if (a2)
      {
        v123 = 0;
        v124 = a3;
        do
        {
          *(float32x2_t *)&v157[0] = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v142, *v124), v141, v124[1]), v144, v124[2]));
          v123 += sub_223FBC2C4((float32x2_t **)&v152, (float *)v157, 0, 0.000001);
          v125 = (double)v123 * a6;
          v126 = (uint64_t)(v149 - (_QWORD)__p) >> 3;
          v127 = v125 < (double)(unint64_t)v126;
          v124 += 3;
        }
        while (v125 < (double)(unint64_t)v126 && v124 != v121);
        v129 = (void *)v152;
        if (!(_QWORD)v152)
          goto LABEL_132;
LABEL_131:
        *((_QWORD *)&v152 + 1) = v129;
        operator delete(v129);
        goto LABEL_132;
      }
      v129 = *(void **)&v157[0];
      v127 = 1;
      if (*(_QWORD *)&v157[0])
        goto LABEL_131;
LABEL_132:
      if (v154)
      {
        v155 = v154;
        operator delete(v154);
      }
      if (v127)
      {
        v130 = v120[1];
        if (v130 >= v120[2])
        {
          v131 = sub_223FAF28C(v120, &v145);
        }
        else
        {
          sub_223F3A420(v120[1], &v145);
          v131 = v130 + 88;
          v120[1] = v130 + 88;
        }
        v120[1] = v131;
      }
      if (v150)
      {
        v151 = v150;
        operator delete(v150);
      }
      if (__p)
      {
        *(_QWORD *)&v149 = __p;
        operator delete(__p);
      }
      v11 = v136 + 11;
    }
    while (v136 + 11 != v135);
  }
}

void sub_223FADD6C(_Unwind_Exception *a1)
{
  void **v1;

  sub_223F3A2D4(v1);
  _Unwind_Resume(a1);
}

void sub_223FADD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  void *v40;

  v40 = *(void **)(v38 - 216);
  if (v40)
  {
    *(_QWORD *)(v38 - 208) = v40;
    operator delete(v40);
  }
  sub_223F3A3E0(&a38);
  sub_223F3A2D4(a20);
  _Unwind_Resume(a1);
}

void sub_223FADEC8(size_t a1@<X0>, _QWORD *a2@<X1>, unint64_t a3@<X2>, float32x2_t *a4@<X3>, uint64_t a5@<X8>)
{
  size_t v9;
  float *v10;
  float *v11;
  __int128 *v12;
  uint64_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  uint64_t v18;
  float32x2_t v19;
  float *v20;
  float v21;
  size_t v22;
  float *v23;
  float v24;
  float v25;
  float *v26;
  float *v27;
  float v28;
  size_t v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  char *v35;
  char *v36;
  uint64_t v37;
  float v38;
  float v39;
  float *v40;
  float v41;
  float v42;
  float *v43;
  float v44;
  float v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  char *v52;
  int v53;
  int v54;
  char *v55;
  int v56;
  int v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  void **v67;
  void **v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  void *v74;
  unint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  char *v80;
  int *v81;
  unint64_t v82;
  unsigned int v83;
  uint64_t v84;
  char *v85;
  int *v86;
  unint64_t v87;
  unsigned int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  unsigned int v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  void *v109;
  _QWORD *v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  unsigned int *v116;
  uint64_t v117;
  unsigned int *v118;
  int64_t v119;
  uint64_t v120;
  unint64_t v121;
  int64_t v122;
  unint64_t v123;
  _BYTE *v124;
  _QWORD *v125;
  char *v126;
  void *v127;
  int64_t v128;
  unint64_t v129;
  unsigned int *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _OWORD *v135;
  unsigned int *v136;
  uint64_t v137;
  __int128 v138;
  char *v139;
  uint64_t v140;
  char v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  uint32x4_t v148;
  uint32x4_t v149;
  const float *v150;
  unint64_t v151;
  uint32x4_t v152;
  uint32x4_t v153;
  uint32x4_t v154;
  uint32x4_t v155;
  uint32x4_t v156;
  uint32x4_t v157;
  const float *v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  uint64_t v163;
  char v164;
  size_t v165;
  char *v166;
  char *v167;
  char v168;
  _DWORD *v169;
  unint64_t v170;
  uint64_t v171;
  void *v172;
  _BYTE *v173;
  _BYTE *v174;
  int64_t v175;
  char *v176;
  unint64_t v177;
  void *v178;
  uint64_t v179;
  char *v180;
  void *v181;
  _QWORD *v182;
  uint64_t v183;
  float *v185;
  char *v186;
  _QWORD *v187;
  char *v188;
  void *__p[6];
  char *v190;
  void *v191[2];
  char *v192;
  uint64_t v193;
  void *v194;
  char *v195;
  char *v196;
  _QWORD *v197;
  _QWORD *v198;
  char *v199;
  char *v200;
  char *v201;
  __int128 v202;
  float *v203;
  float *v204;
  float *v205;
  float32x4x2_t v206;
  float32x4x2_t v207;

  v203 = 0;
  v204 = 0;
  v205 = 0;
  if (a3 >> 62)
    sub_22316E078();
  v9 = 4 * a3;
  v10 = (float *)operator new(4 * a3);
  v182 = a2;
  v203 = v10;
  v205 = &v10[a3];
  bzero(v10, v9);
  v204 = &v10[v9 / 4];
  v11 = (float *)operator new(v9);
  v12 = (__int128 *)(a1 + 24);
  bzero(v11, v9);
  v13 = 0;
  v14 = *(float32x2_t *)(a1 + 24);
  v15 = *(float32x2_t *)(a1 + 32);
  v16 = (float32x2_t)vdup_lane_s32((int32x2_t)v14, 1);
  v17 = (float32x2_t)vdup_lane_s32((int32x2_t)v15, 1);
  v18 = 8 * a3;
  do
  {
    v19 = *a4++;
    LODWORD(v10[v13]) = vmla_lane_f32(vmul_f32(v19, v14), v16, v19, 1).u32[0];
    LODWORD(v11[v13++]) = vmla_lane_f32(vmul_f32(v19, v15), v17, v19, 1).u32[0];
    v18 -= 8;
  }
  while (v18);
  v20 = v10 + 1;
  if (v10 + 1 != &v10[v9 / 4])
  {
    v21 = *v10;
    v22 = v9 - 4;
    v23 = v10 + 1;
    do
    {
      v24 = *v23++;
      v25 = v24;
      if (v24 < v21)
      {
        v21 = v25;
        v10 = v20;
      }
      v20 = v23;
      v22 -= 4;
    }
    while (v22);
  }
  v26 = v11 + 1;
  v27 = v11;
  if (v11 + 1 != &v11[v9 / 4])
  {
    v28 = *v11;
    v29 = v9 - 4;
    v27 = v11;
    v30 = v11 + 1;
    do
    {
      v31 = *v30++;
      v32 = v31;
      if (v31 < v28)
      {
        v28 = v32;
        v27 = v26;
      }
      v26 = v30;
      v29 -= 4;
    }
    while (v29);
  }
  v33 = *v10;
  v34 = *v27;
  v36 = *(char **)a1;
  v35 = *(char **)(a1 + 8);
  v185 = v11;
  if (*(char **)a1 == v35)
  {
    v47 = 0;
    v199 = 0;
    v200 = 0;
    v201 = 0;
    v202 = *v12;
    v39 = 3.4028e38;
    v38 = 3.4028e38;
  }
  else
  {
    v37 = 0;
    v38 = 3.4028e38;
    v39 = 3.4028e38;
    do
    {
      v40 = (float *)&v36[v37];
      if (*(_DWORD *)&v36[v37 + 12] != -1)
      {
        v41 = fabsf(v40[4]);
        if (v41 < v38)
          v38 = v41;
      }
      if (*((_DWORD *)v40 + 1) != -1)
      {
        v42 = fabsf(*(float *)&v36[v37 + 8]);
        if (v42 < v38)
          v38 = v42;
      }
      v43 = (float *)&v36[v37];
      if (*(_DWORD *)&v36[v37 + 28] != -1)
      {
        v44 = fabsf(v43[8]);
        if (v44 < v39)
          v39 = v44;
      }
      if (*((_DWORD *)v43 + 5) != -1)
      {
        v45 = fabsf(*(float *)&v36[v37 + 24]);
        if (v45 < v39)
          v39 = v45;
      }
      v37 += 36;
    }
    while (&v36[v37] != v35);
    v199 = 0;
    v200 = 0;
    v201 = 0;
    a1 = v35 - v36;
    v46 = 0x8E38E38E38E38E39 * ((v35 - v36) >> 2);
    if (v46 >= 0x71C71C71C71C71DLL)
      sub_22316E078();
    v47 = (char *)operator new(a1);
    v48 = 36 * v46;
    v199 = v47;
    v201 = &v47[v48];
    memcpy(v47, v36, a1);
    v49 = 0;
    v200 = &v47[v48];
    v202 = *v12;
    v50 = v38 * 1.5;
    v51 = v39 * 1.5;
    do
    {
      v52 = &v47[v49];
      v53 = *(_DWORD *)&v47[v49 + 20];
      if (v53 != -1 && fabsf(*((float *)v52 + 6)) > v51)
      {
        *(_DWORD *)&v47[36 * v53 + 28] = -1;
        *((_DWORD *)v52 + 5) = -1;
      }
      v54 = *((_DWORD *)v52 + 7);
      if (v54 != -1 && fabsf(*(float *)&v47[v49 + 32]) > v51)
      {
        *(_DWORD *)&v47[36 * v54 + 20] = -1;
        *((_DWORD *)v52 + 7) = -1;
      }
      v55 = &v47[v49];
      v56 = *(_DWORD *)&v47[v49 + 4];
      if (v56 != -1 && fabsf(*((float *)v55 + 2)) > v50)
      {
        *(_DWORD *)&v47[36 * v56 + 12] = -1;
        *((_DWORD *)v55 + 1) = -1;
      }
      v57 = *((_DWORD *)v55 + 3);
      if (v57 != -1 && fabsf(*(float *)&v47[v49 + 16]) > v50)
      {
        *(_DWORD *)&v47[36 * v57 + 4] = -1;
        *((_DWORD *)v55 + 3) = -1;
      }
      v49 += 36;
    }
    while (v48 != v49);
  }
  v194 = 0;
  v195 = 0;
  v196 = 0;
  if (a3 >> 61)
    sub_22316E078();
  v188 = (char *)operator new(8 * a3);
  v194 = v188;
  v195 = &v188[8 * a3];
  v196 = v195;
  v58 = operator new(8 * ((a3 - 1) >> 6) + 8);
  v59 = v58;
  if (a3 >= 0x41)
    v60 = (a3 - 1) >> 6;
  else
    v60 = 0;
  v58[v60] = 0;
  v61 = 8 * (a3 >> 6);
  if (a3 >= 0x40)
    bzero(v58, 8 * (a3 >> 6));
  if ((a3 & 0x3F) != 0)
    *(_QWORD *)((char *)v59 + v61) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(a3 & 0x3F));
  sub_223F28A94((uint64_t *)&v203, (uint64_t *)&v197);
  v63 = v197;
  v62 = v198;
  if (v197 != v198)
  {
    while (1)
    {
      v64 = *v63;
      if (((v59[*v63 >> 6] >> *v63) & 1) == 0)
        break;
LABEL_57:
      if (++v63 == v62)
      {
        v63 = v197;
        goto LABEL_111;
      }
    }
    LODWORD(a1) = llroundf((float)((float)(v38 * 0.25) + (float)(v203[v64] - v33)) / v38);
    if ((a1 & 0x80000000) != 0
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Vision/ConnSACPlaneDetectorImpl.cpp", 589, (uint64_t)"horizIdxInt >= 0", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    LODWORD(v61) = llroundf((float)((float)(v39 * 0.25) + (float)(v11[v64] - v34)) / v39);
    if ((v61 & 0x80000000) != 0
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Vision/ConnSACPlaneDetectorImpl.cpp", 595, (uint64_t)"vertIdxInt >= 0", 15, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v187 = v63;
    memset(__p, 0, sizeof(__p));
    sub_223FAF48C(__p);
    v65 = (char *)__p[5];
    v66 = (unint64_t)__p[4];
    v67 = (void **)__p[1];
    v68 = (void **)__p[2];
    v69 = (((unint64_t)__p[4] + (unint64_t)__p[5]) * (unsigned __int128)0x8060180601806019) >> 64;
    v70 = (v69 + (((unint64_t)__p[4] + (unint64_t)__p[5] - v69) >> 1)) >> 8;
    v71 = *((_QWORD *)__p[1] + v70) + 12 * (uint64_t)((uint64_t)__p[4] + (unint64_t)__p[5] + -341 * v70);
    *(_DWORD *)v71 = v64;
    *(_QWORD *)(v71 + 4) = a1 | (v61 << 32);
    v72 = v65 + 1;
    if (v65 == (char *)-1)
    {
LABEL_64:
      v73 = (char *)v68 - (char *)v67;
      if ((unint64_t)((char *)v68 - (char *)v67) < 0x11)
      {
        v11 = v185;
        v63 = v187;
      }
      else
      {
        v11 = v185;
        v63 = v187;
        do
        {
          v74 = *v67++;
          operator delete(v74);
          __p[1] = v67;
          v73 -= 8;
        }
        while (v73 > 0x10);
      }
      while (v67 != v68)
      {
        v109 = *v67++;
        operator delete(v109);
      }
      if (__p[0])
        operator delete(__p[0]);
      v62 = v198;
      goto LABEL_57;
    }
    v61 = (uint64_t)v188;
    while (1)
    {
      v76 = (unsigned int *)((char *)v67[v66 / 0x155] + 12 * (v66 % 0x155));
      v77 = *v76;
      a1 = *(_QWORD *)(v76 + 1);
      --v72;
      v78 = v66 + 1;
      __p[4] = (void *)(v66 + 1);
      __p[5] = v72;
      if (v66 + 1 >= 0x2AA)
      {
        v79 = *v67++;
        operator delete(v79);
        v78 = v66 - 340;
        __p[1] = v67;
        __p[4] = (void *)(v66 - 340);
      }
      *(_QWORD *)(v61 + 8 * v77) = a1;
      v80 = &v47[36 * v77];
      v83 = *((_DWORD *)v80 + 5);
      v81 = (int *)(v80 + 20);
      v82 = v83;
      if (v83 == -1)
        break;
      v84 = v59[v82 >> 6];
      if ((v84 & (1 << v82)) != 0)
        break;
      v59[v82 >> 6] = v84 | (1 << v82);
      *(_QWORD *)(v61 + 8 * v82) = a1 + 0x100000000;
      v94 = *v81;
      if (v68 == v67)
        v95 = 0;
      else
        v95 = 341 * (v68 - v67) - 1;
      v96 = (unint64_t)&v72[v78];
      if ((char *)v95 == &v72[v78])
      {
        sub_223FAF48C(__p);
        v67 = (void **)__p[1];
        v68 = (void **)__p[2];
        v72 = (char *)__p[5];
        v78 = (unint64_t)__p[4];
        v96 = (unint64_t)__p[5] + (unint64_t)__p[4];
      }
      v97 = (unint64_t)v67[v96 / 0x155] + 12 * (v96 % 0x155);
      *(_DWORD *)v97 = v94;
      *(_QWORD *)(v97 + 4) = a1 + 0x100000000;
      __p[5] = ++v72;
      v61 = (uint64_t)v188;
      v98 = &v47[36 * v77];
      v99 = *((_DWORD *)v98 + 7);
      v86 = (int *)(v98 + 28);
      v87 = v99;
      if (v99 != -1)
        goto LABEL_76;
LABEL_89:
      v100 = *(unsigned int *)&v47[36 * v77 + 12];
      if ((_DWORD)v100 != -1)
      {
        v101 = v59[v100 >> 6];
        if ((v101 & (1 << v100)) == 0)
        {
          v59[v100 >> 6] = v101 | (1 << v100);
          if (v68 == v67)
            v106 = 0;
          else
            v106 = 341 * (v68 - v67) - 1;
          v107 = (unint64_t)&v72[v78];
          if ((char *)v106 == &v72[v78])
          {
            sub_223FAF48C(__p);
            v67 = (void **)__p[1];
            v68 = (void **)__p[2];
            v72 = (char *)__p[5];
            v78 = (unint64_t)__p[4];
            v107 = (unint64_t)__p[5] + (unint64_t)__p[4];
          }
          v108 = (unint64_t)v67[v107 / 0x155] + 12 * (v107 % 0x155);
          *(_DWORD *)v108 = v100;
          *(_QWORD *)(v108 + 4) = (a1 + 1) | a1 & 0xFFFFFFFF00000000;
          __p[5] = ++v72;
          v102 = *(unsigned int *)&v47[36 * v77 + 4];
          if ((_DWORD)v102 == -1)
            goto LABEL_70;
LABEL_92:
          v103 = v59[v102 >> 6];
          if ((v103 & (1 << v102)) == 0)
          {
            v59[v102 >> 6] = v103 | (1 << v102);
            if (v68 == v67)
              v104 = 0;
            else
              v104 = 341 * (v68 - v67) - 1;
            v105 = (unint64_t)&v72[v78];
            if ((char *)v104 == &v72[v78])
            {
              sub_223FAF48C(__p);
              v67 = (void **)__p[1];
              v68 = (void **)__p[2];
              v72 = (char *)__p[5];
              v78 = (unint64_t)__p[4];
              v105 = (unint64_t)__p[5] + (unint64_t)__p[4];
            }
            v75 = (unint64_t)v67[v105 / 0x155] + 12 * (v105 % 0x155);
            *(_DWORD *)v75 = v102;
            *(_QWORD *)(v75 + 4) = (a1 - 1) | a1 & 0xFFFFFFFF00000000;
            __p[5] = ++v72;
          }
          goto LABEL_70;
        }
      }
      v102 = *(unsigned int *)&v47[36 * v77 + 4];
      if ((_DWORD)v102 != -1)
        goto LABEL_92;
LABEL_70:
      v66 = v78;
      if (!v72)
        goto LABEL_64;
    }
    v85 = &v47[36 * v77];
    v88 = *((_DWORD *)v85 + 7);
    v86 = (int *)(v85 + 28);
    v87 = v88;
    if (v88 == -1)
      goto LABEL_89;
LABEL_76:
    v89 = v59[v87 >> 6];
    if ((v89 & (1 << v87)) == 0)
    {
      v59[v87 >> 6] = v89 | (1 << v87);
      *(_QWORD *)(v61 + 8 * v87) = a1 - 0x100000000;
      v90 = *v86;
      if (v68 == v67)
        v91 = 0;
      else
        v91 = 341 * (v68 - v67) - 1;
      v92 = (unint64_t)&v72[v78];
      if ((char *)v91 == &v72[v78])
      {
        sub_223FAF48C(__p);
        v67 = (void **)__p[1];
        v68 = (void **)__p[2];
        v72 = (char *)__p[5];
        v78 = (unint64_t)__p[4];
        v92 = (unint64_t)__p[5] + (unint64_t)__p[4];
      }
      v93 = (unint64_t)v67[v92 / 0x155] + 12 * (v92 % 0x155);
      *(_DWORD *)v93 = v90;
      *(_QWORD *)(v93 + 4) = a1 - 0x100000000;
      __p[5] = ++v72;
      v61 = (uint64_t)v188;
    }
    goto LABEL_89;
  }
LABEL_111:
  if (v63)
  {
    v198 = v63;
    operator delete(v63);
  }
  operator delete(v59);
  if (v47)
  {
    v200 = v47;
    operator delete(v47);
  }
  operator delete(v11);
  v110 = v182;
  if (v203)
  {
    v204 = v203;
    operator delete(v203);
  }
  v111 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v182[1] - *v182) >> 3);
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  sub_223FAC6B8(a5, v111);
  v112 = *v182;
  v183 = v182[1];
  if (*v110 != v183)
  {
    do
    {
      v114 = *(char **)(v112 + 64);
      v113 = *(char **)(v112 + 72);
      memset(__p, 0, 24);
      v115 = v113 - v114;
      if (v113 == v114)
      {
        v140 = 0;
        v139 = 0;
        v116 = 0;
LABEL_158:
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Vision/ConnSACPlaneDetectorImpl.cpp", 60, (uint64_t)"!points.empty()", 15, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v145 = *v116;
        v144 = v116[1];
        v141 = 1;
        v146 = v140 - 1;
        if ((unint64_t)(v140 - 1) >= 8)
          goto LABEL_162;
        goto LABEL_160;
      }
      if (v115 < 0)
        sub_22316E078();
      v116 = (unsigned int *)operator new(v113 - v114);
      __p[0] = v116;
      __p[1] = v116;
      __p[2] = &v116[2 * (v115 >> 3)];
      do
      {
        while (1)
        {
          while (1)
          {
            v117 = *((_QWORD *)v194 + *(_QWORD *)v114);
            if (v116 >= __p[2])
              break;
            *(_QWORD *)v116 = v117;
            v116 += 2;
            __p[1] = v116;
            v114 += 8;
            if (v114 == v113)
              goto LABEL_154;
          }
          v118 = (unsigned int *)__p[0];
          v119 = (char *)v116 - (char *)__p[0];
          v120 = ((char *)v116 - (char *)__p[0]) >> 3;
          v121 = v120 + 1;
          if ((unint64_t)(v120 + 1) >> 61)
            sub_22316E078();
          v122 = (char *)__p[2] - (char *)__p[0];
          if (((char *)__p[2] - (char *)__p[0]) >> 2 > v121)
            v121 = v122 >> 2;
          v123 = (unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v121;
          if (!v123)
            break;
          if (v123 >> 61)
            sub_223174E94();
          v124 = operator new(8 * v123);
          v125 = &v124[8 * v120];
          v126 = &v124[8 * v123];
          *v125 = v117;
          v127 = v125 + 1;
          v128 = (char *)v116 - (char *)v118;
          if (v116 == v118)
            goto LABEL_141;
LABEL_134:
          v129 = v128 - 8;
          if (v129 < 0x168)
          {
            v130 = v116;
            goto LABEL_136;
          }
          v132 = ((char *)(v116 - 2) - (char *)v118) & 0xFFFFFFFFFFFFFFF8;
          if (&v124[v119 - 8 - v132] > &v124[v119 - 8])
          {
            v130 = v116;
            do
            {
LABEL_136:
              v131 = *((_QWORD *)v130 - 1);
              v130 -= 2;
              *--v125 = v131;
            }
            while (v130 != v118);
            goto LABEL_137;
          }
          if ((unsigned int *)((char *)v116 - v132 - 8) > v116 - 2)
          {
            v130 = v116;
            goto LABEL_136;
          }
          if ((unint64_t)((char *)v116 - &v124[v119]) < 0x20)
          {
            v130 = v116;
            goto LABEL_136;
          }
          v133 = (v129 >> 3) + 1;
          v134 = 8 * (v133 & 0x3FFFFFFFFFFFFFFCLL);
          v130 = &v116[v134 / 0xFFFFFFFFFFFFFFFCLL];
          v125 = (_QWORD *)((char *)v125 - v134);
          v135 = &v124[8 * v120 - 16];
          v136 = v116 - 4;
          v137 = v133 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v138 = *(_OWORD *)v136;
            *(v135 - 1) = *((_OWORD *)v136 - 1);
            *v135 = v138;
            v135 -= 2;
            v136 -= 8;
            v137 -= 4;
          }
          while (v137);
          if (v133 != (v133 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_136;
LABEL_137:
          v116 = (unsigned int *)__p[0];
          __p[0] = v125;
          __p[1] = v127;
          __p[2] = v126;
          if (v116)
            goto LABEL_142;
          v116 = (unsigned int *)v127;
          __p[1] = v127;
          v114 += 8;
          if (v114 == v113)
            goto LABEL_154;
        }
        v124 = 0;
        v125 = (_QWORD *)(8 * v120);
        v126 = 0;
        *(_QWORD *)(8 * v120) = v117;
        v127 = (void *)(8 * v120 + 8);
        v128 = (char *)v116 - (char *)v118;
        if (v116 != v118)
          goto LABEL_134;
LABEL_141:
        __p[0] = v125;
        __p[1] = v127;
        __p[2] = v126;
LABEL_142:
        operator delete(v116);
        v116 = (unsigned int *)v127;
        __p[1] = v127;
        v114 += 8;
      }
      while (v114 != v113);
LABEL_154:
      v139 = (char *)__p[0];
      v114 = *(char **)(v112 + 64);
      v140 = ((char *)v116 - (char *)__p[0]) >> 3;
      if (v116 == __p[0])
        goto LABEL_158;
      v141 = 0;
      v143 = *(_DWORD *)__p[0];
      v142 = *((_DWORD *)__p[0] + 1);
      if ((unsigned int *)((char *)v116 - (char *)__p[0]) == (unsigned int *)8)
      {
        v140 = 1;
        v144 = *((_DWORD *)__p[0] + 1);
        v145 = *(_DWORD *)__p[0];
        goto LABEL_175;
      }
      v144 = *((_DWORD *)__p[0] + 1);
      v145 = *(_DWORD *)__p[0];
      v146 = v140 - 1;
      if ((unint64_t)(v140 - 1) >= 8)
      {
LABEL_162:
        v147 = v146 & 0xFFFFFFFFFFFFFFF8 | 1;
        v148 = (uint32x4_t)vdupq_n_s32(v145);
        v149 = (uint32x4_t)vdupq_n_s32(v144);
        v150 = (const float *)(v139 + 40);
        v151 = v146 & 0xFFFFFFFFFFFFFFF8;
        v152 = v148;
        v153 = v149;
        v154 = v148;
        v155 = v148;
        v156 = v149;
        v157 = v149;
        do
        {
          v158 = v150 - 8;
          v206 = vld2q_f32(v158);
          v207 = vld2q_f32(v150);
          v148 = vminq_u32((uint32x4_t)v206.val[0], v148);
          v152 = vminq_u32((uint32x4_t)v207.val[0], v152);
          v149 = vminq_u32((uint32x4_t)v206.val[1], v149);
          v153 = vminq_u32((uint32x4_t)v207.val[1], v153);
          v154 = vmaxq_u32(v154, (uint32x4_t)v206.val[0]);
          v155 = vmaxq_u32(v155, (uint32x4_t)v207.val[0]);
          v156 = vmaxq_u32(v156, (uint32x4_t)v206.val[1]);
          v157 = vmaxq_u32(v157, (uint32x4_t)v207.val[1]);
          v150 += 16;
          v151 -= 8;
        }
        while (v151);
        v142 = vmaxvq_u32(vmaxq_u32(v156, v157));
        v143 = vmaxvq_u32(vmaxq_u32(v154, v155));
        v144 = vminvq_u32(vminq_u32(v149, v153));
        v145 = vminvq_u32(vminq_u32(v148, v152));
        if (v146 != (v146 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_165;
        goto LABEL_175;
      }
LABEL_160:
      v143 = v145;
      v142 = v144;
      v147 = 1;
LABEL_165:
      v159 = (unsigned int *)&v139[8 * v147 + 4];
      do
      {
        v160 = *(v159 - 1);
        v161 = *v159;
        if (v160 < v145)
          v145 = *(v159 - 1);
        if (v161 < v144)
          v144 = *v159;
        if (v143 <= v160)
          v143 = *(v159 - 1);
        if (v142 <= v161)
          v142 = *v159;
        ++v147;
        v159 += 2;
      }
      while (v140 != v147);
LABEL_175:
      v162 = v143 - v145 + 1;
      LODWORD(v199) = v162;
      HIDWORD(v199) = v142 - v144 + 1;
      v163 = (v162 * HIDWORD(v199));
      v201 = 0;
      *(_QWORD *)&v202 = 0;
      v200 = 0;
      if ((_DWORD)v163)
      {
        v186 = v139;
        v164 = v141;
        v165 = 8 * (v162 * HIDWORD(v199));
        v166 = (char *)operator new(v165);
        v167 = &v166[8 * v163];
        v200 = v166;
        *(_QWORD *)&v202 = v167;
        memset(v166, 255, v165);
        v201 = v167;
        v168 = v164;
        v139 = v186;
        if ((v168 & 1) != 0)
          goto LABEL_182;
      }
      else
      {
        v167 = 0;
        v166 = 0;
        if ((v141 & 1) != 0)
          goto LABEL_182;
      }
      v169 = v139 + 4;
      do
      {
        v170 = *(v169 - 1) - v145 + (*v169 - v144) * v162;
        if ((v167 - v166) >> 3 <= v170)
          sub_2236C5448();
        v169 += 2;
        v171 = *(_QWORD *)v114;
        v114 += 8;
        *(_QWORD *)&v166[8 * v170] = v171;
        --v140;
      }
      while (v140);
LABEL_182:
      v172 = *(void **)v112;
      LODWORD(__p[1]) = *(_DWORD *)(v112 + 8);
      __p[0] = v172;
      LODWORD(v172) = *(_DWORD *)(v112 + 20);
      *(void **)((char *)&__p[1] + 4) = *(void **)(v112 + 12);
      HIDWORD(__p[2]) = (_DWORD)v172;
      memset(&__p[3], 0, 24);
      v174 = *(_BYTE **)(v112 + 64);
      v173 = *(_BYTE **)(v112 + 72);
      v175 = v173 - v174;
      if (v173 != v174)
      {
        if (v175 < 0)
          sub_22367C394();
        __p[3] = operator new(v173 - v174);
        __p[4] = __p[3];
        v176 = (char *)__p[3] + 8 * (v175 >> 3);
        __p[5] = v176;
        memcpy(__p[3], v174, v175);
        __p[4] = v176;
      }
      v190 = v199;
      v191[0] = v166;
      v191[1] = v167;
      v192 = v167;
      v193 = 0;
      v177 = *(_QWORD *)(a5 + 8);
      if (v177 >= *(_QWORD *)(a5 + 16))
      {
        v180 = sub_223FAFC18((char **)a5, (uint64_t)__p);
        v181 = v191[0];
        *(_QWORD *)(a5 + 8) = v180;
        if (v181)
        {
          v191[1] = v181;
          operator delete(v181);
        }
      }
      else
      {
        v178 = __p[0];
        *(_DWORD *)(v177 + 8) = __p[1];
        *(_QWORD *)v177 = v178;
        v179 = *(uint64_t *)((char *)&__p[1] + 4);
        *(_DWORD *)(v177 + 20) = HIDWORD(__p[2]);
        *(_QWORD *)(v177 + 12) = v179;
        *(_QWORD *)(v177 + 32) = 0;
        *(_QWORD *)(v177 + 40) = 0;
        *(_QWORD *)(v177 + 24) = 0;
        *(_OWORD *)(v177 + 24) = *(_OWORD *)&__p[3];
        *(void **)(v177 + 40) = __p[5];
        memset(&__p[3], 0, 24);
        *(_QWORD *)(v177 + 48) = v190;
        *(_QWORD *)(v177 + 56) = 0;
        *(_QWORD *)(v177 + 64) = 0;
        *(_QWORD *)(v177 + 72) = 0;
        *(_OWORD *)(v177 + 56) = *(_OWORD *)v191;
        *(_QWORD *)(v177 + 72) = v192;
        v191[0] = 0;
        v191[1] = 0;
        v192 = 0;
        *(_QWORD *)(v177 + 80) = v193;
        *(_QWORD *)(a5 + 8) = v177 + 88;
      }
      if (__p[3])
      {
        __p[4] = __p[3];
        operator delete(__p[3]);
      }
      operator delete(v139);
      v112 += 88;
    }
    while (v112 != v183);
  }
  if (v194)
    operator delete(v194);
}

void sub_223FAEF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  void **v37;

  sub_223F3A2D4(v37);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_223FAF0D4(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61)
      goto LABEL_22;
    v10 = v8 >> 2;
    if (v8 >> 2 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_22:
      sub_22367C394();
    v13 = v12;
    result = operator new(8 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

uint64_t sub_223FAF218(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;
    v4 = *(void **)(i - 32);
    if (v4)
    {
      *(_QWORD *)(i - 24) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(i - 64);
    if (v5)
    {
      *(_QWORD *)(i - 56) = v5;
      operator delete(v5);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_223FAF28C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  uint64_t v16;
  __int128 v17;

  v2 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_22316E078();
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL)
    v6 = 0x2E8BA2E8BA2E8BALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2E8BA2E8BA2E8BALL)
      sub_223174E94();
    v7 = (char *)operator new(88 * v6);
  }
  else
  {
    v7 = 0;
  }
  v16 = (uint64_t)&v7[88 * v2];
  *((_QWORD *)&v17 + 1) = &v7[88 * v6];
  sub_223F3A420(v16, a2);
  v8 = v16 + 88;
  v10 = (char *)*a1;
  v9 = (char *)a1[1];
  if (v9 == (char *)*a1)
  {
    *a1 = v16;
    a1[1] = v8;
    a1[2] = *((_QWORD *)&v17 + 1);
  }
  else
  {
    v11 = 0;
    do
    {
      sub_223F3A420(v16 + v11 - 88, (uint64_t *)&v9[v11 - 88]);
      v11 -= 88;
    }
    while (&v9[v11] != v10);
    v9 = (char *)*a1;
    v12 = (char *)a1[1];
    *a1 = v16 + v11;
    *(_QWORD *)&v17 = v16 + 88;
    *(_OWORD *)(a1 + 1) = v17;
    v8 = v16 + 88;
    while (v12 != v9)
    {
      v13 = (void *)*((_QWORD *)v12 - 4);
      if (v13)
      {
        *((_QWORD *)v12 - 3) = v13;
        operator delete(v13);
      }
      v14 = (void *)*((_QWORD *)v12 - 8);
      if (v14)
      {
        *((_QWORD *)v12 - 7) = v14;
        operator delete(v14);
      }
      v12 -= 88;
    }
  }
  if (v9)
    operator delete(v9);
  return v8;
}

void sub_223FAF42C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223FAF218((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FAF440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a2);
  for (; v2; v2 += 88)
  {
    v5 = v3 + v2;
    v6 = *(void **)(v3 + v2 + 56);
    if (v6)
    {
      *(_QWORD *)(v5 + 64) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(v5 + 24);
    if (v7)
    {
      *(_QWORD *)(v3 + v2 + 32) = v7;
      operator delete(v7);
    }
  }
  sub_223FAF218((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FAF48C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  void *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = a1[4];
  v3 = v2 >= 0x155;
  v4 = v2 - 341;
  if (v3)
  {
    a1[4] = v4;
    v6 = (_QWORD *)a1[1];
    v5 = (char *)a1[2];
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_92:
      *(_QWORD *)v5 = v8;
      goto LABEL_93;
    }
    v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1)
        v11 = v10 + 1;
      else
        v11 = v10 + 2;
      v12 = v11 >> 1;
      v13 = -v12;
      v14 = &v7[-8 * v12];
      v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        v7 = (char *)a1[1];
      }
      v5 = &v14[v15];
      v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    v38 = (v5 - v9) >> 2;
    if (v5 == v9)
      v38 = 1;
    if (v38 >> 61)
      goto LABEL_109;
    v39 = v38 >> 2;
    v40 = 8 * v38;
    v41 = (char *)operator new(8 * v38);
    v42 = &v41[8 * v39];
    v44 = v5 - v7;
    v43 = v5 == v7;
    v5 = v42;
    if (!v43)
    {
      v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        v92 = &v41[8 * v39];
        v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          v93 = (v45 >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v42[v94];
          v7 += v94;
          v95 = (__int128 *)(v6 + 3);
          v96 = v92 + 16;
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_89;
        }
      }
      else
      {
        v46 = &v41[8 * v39];
      }
      do
      {
        v99 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_89:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9)
      goto LABEL_92;
    v100 = v9;
LABEL_91:
    operator delete(v100);
    v5 = (char *)a1[2];
    goto LABEL_92;
  }
  v18 = (char *)a1[2];
  v17 = (char *)a1[3];
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0xFFCuLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_93:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      v69 = (v17 - v19) >> 2;
      if (v18 == v19)
        v69 = 1;
      if (v69 >> 61)
        goto LABEL_109;
      v70 = (v69 + 3) >> 2;
      v71 = 8 * v69;
      v72 = (char *)operator new(8 * v69);
      v47 = &v72[8 * v70];
      v73 = v47;
      if (v18 != v19)
      {
        v73 = &v47[8 * v22];
        v74 = &v72[8 * v70];
        v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38)
          goto LABEL_113;
        v76 = &v72[8 * v70];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20)
          goto LABEL_113;
        v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v47[v78];
        v75 = &v19[v78];
        v79 = (__int128 *)(v19 + 16);
        v80 = v76 + 16;
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            v83 = *(_QWORD *)v75;
            v75 += 8;
            *(_QWORD *)v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        v47 = (char *)a1[1];
      }
    }
    else
    {
      v47 = v19;
    }
    *((_QWORD *)v47 - 1) = v25;
    v84 = (char *)a1[1];
    v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    v8 = *((_QWORD *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3])
      goto LABEL_92;
    v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1)
        v87 = v86 + 1;
      else
        v87 = v86 + 2;
      v88 = v87 >> 1;
      v89 = -v88;
      v90 = &v84[-8 * v88];
      v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        v84 = (char *)a1[1];
      }
      v5 = &v90[v91];
      v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_92;
    }
    v101 = (v5 - v85) >> 2;
    if (v5 == v85)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v84;
      v43 = v5 == v84;
      v5 = v105;
      if (!v43)
      {
        v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          v109 = &v104[8 * v102];
          v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            v110 = (v107 >> 3) + 1;
            v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = &v105[v111];
            v112 = &v84[v111];
            v113 = (__int128 *)(v84 + 16);
            v114 = v109 + 16;
            v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
          }
        }
        else
        {
          v108 = &v104[8 * v102];
        }
        do
        {
          v117 = *(_QWORD *)v84;
          v84 += 8;
          *(_QWORD *)v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_106:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85)
        goto LABEL_92;
      v100 = v85;
      goto LABEL_91;
    }
LABEL_109:
    sub_223174E94();
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_109;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0xFFCuLL);
  v30 = v29;
  v31 = &v28[8 * v22];
  v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v21 >> 2;
      if (v48 >> 61)
        sub_223174E94();
      v31 = (char *)operator new(8 * v48);
      v32 = &v31[8 * v48];
      operator delete(v28);
      v49 = (char *)a1[1];
      v18 = (char *)a1[2];
      v28 = v31;
      *(_QWORD *)v31 = v30;
      v34 = v31 + 8;
      if (v18 == v49)
        goto LABEL_25;
      do
      {
LABEL_44:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31)
              v54 = 1;
            else
              v54 = (v32 - v31) >> 2;
            if (v54 >> 61)
              sub_223174E94();
            v55 = (char *)operator new(8 * v54);
            v28 = v55;
            v56 = (v54 + 3) >> 2;
            v50 = &v55[8 * v56];
            v36 = v50;
            v57 = v34 - v31;
            if (v34 != v31)
            {
              v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              v58 = v57 - 8;
              v59 = &v55[8 * v56];
              v60 = v31;
              if (v58 < 0x38)
                goto LABEL_114;
              v61 = 8 * v56;
              v59 = &v55[8 * v56];
              v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20)
                goto LABEL_114;
              v62 = (v58 >> 3) + 1;
              v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              v59 = &v50[v63];
              v60 = &v31[v63];
              v64 = (__int128 *)(v31 + 16);
              v65 = &v55[v61 + 16];
              v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_114:
                do
                {
                  v68 = *(_QWORD *)v60;
                  v60 += 8;
                  *(_QWORD *)v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            v52 = (v32 - v34) >> 3;
            if (v52 >= -1)
              v53 = v52 + 1;
            else
              v53 = v52 + 2;
            v36 = &v34[8 * (v53 >> 1)];
            v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              v28 = v31;
            }
          }
        }
        else
        {
          v50 = v31;
          v36 = v34;
        }
        v51 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v50 - 1) = v51;
        v35 = v50 - 8;
        v34 = v36;
        v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    v33 = v22 + 2;
    if (v22 >= -1)
      v33 = v22 + 1;
    v31 -= 8 * (v33 >> 1);
  }
  *(_QWORD *)v31 = v29;
  v34 = v31 + 8;
  if (v18 != v19)
    goto LABEL_44;
LABEL_25:
  v35 = v31;
  v36 = v34;
LABEL_26:
  v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
    operator delete(v37);
}

void sub_223FAFAF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223FAFB10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223FAFB24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223FAFB3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223FAFB54(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 170;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 341;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_223FAFC18(char **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void *v18;
  void *v19;
  __int128 v21;

  v2 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_22316E078();
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL)
    v5 = 0x2E8BA2E8BA2E8BALL;
  else
    v5 = v3;
  if (v5 > 0x2E8BA2E8BA2E8BALL)
    sub_223174E94();
  v7 = 88 * v5;
  v8 = (char *)operator new(88 * v5);
  v9 = &v8[88 * v2];
  v10 = &v8[v7];
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(v9 + 12) = *(_QWORD *)(a2 + 12);
  *((_DWORD *)v9 + 5) = *(_DWORD *)(a2 + 20);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *((_QWORD *)v9 + 5) = v11;
  *((_QWORD *)v9 + 6) = v12;
  *((_QWORD *)v9 + 8) = 0;
  *((_QWORD *)v9 + 9) = 0;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *((_QWORD *)v9 + 10) = *(_QWORD *)(a2 + 80);
  v13 = v9 + 88;
  *(_QWORD *)&v21 = v9 + 88;
  *((_QWORD *)&v21 + 1) = v10;
  v15 = *a1;
  v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      sub_223F3A420((uint64_t)&v9[v16 - 88], (uint64_t *)&v14[v16 - 88]);
      v16 -= 88;
    }
    while (&v14[v16] != v15);
    v14 = *a1;
    v17 = a1[1];
    *a1 = &v9[v16];
    *(_OWORD *)(a1 + 1) = v21;
    v13 = (char *)v21;
    while (v17 != v14)
    {
      v18 = (void *)*((_QWORD *)v17 - 4);
      if (v18)
      {
        *((_QWORD *)v17 - 3) = v18;
        operator delete(v18);
      }
      v19 = (void *)*((_QWORD *)v17 - 8);
      if (v19)
      {
        *((_QWORD *)v17 - 7) = v19;
        operator delete(v19);
      }
      v17 -= 88;
    }
  }
  if (v14)
    operator delete(v14);
  return v13;
}

void sub_223FAFE5C(uint64_t a1, uint64_t a2)
{
  float *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  size_t v11;
  float *v12;
  size_t v13;
  int v14;
  void *v15;
  size_t v16;
  unint64_t v17;

  v4 = *(float **)a1;
  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  if (*(float **)v6 == v4 || *(float **)v5 == v4)
  {
    v9 = *(_DWORD *)(v6 + 16);
    v10 = *(_DWORD *)(v5 + 16);
    v11 = (4 * v10 * v9 + 31) & 0x7FFFFFFE0;
    v16 = v11 >> 2;
    v15 = operator new(v11, (std::align_val_t)0x20uLL);
    v17 = __PAIR64__(v10, v9);
    sub_223FAFE5C(&v15, a2);
    v12 = *(float **)a1;
    v13 = v16;
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v17;
    if (v12)
      MEMORY[0x227684CB8](v12, 0x1000C8052888210);
  }
  else
  {
    v7 = *(_DWORD *)(v6 + 16);
    if (v7 && (v8 = *(_DWORD *)(v5 + 16)) != 0)
    {
      sub_22322BCB0(0, 0, v7, v8, 3, *(const float **)v6, v7, *(float **)v5, *(float *)(a2 + 24), 0.0, 3, v4, *(_DWORD *)(a1 + 16));
    }
    else
    {
      v14 = *(_DWORD *)(a1 + 20);
      if (v14 * *(_DWORD *)(a1 + 16))
        bzero(v4, 4 * (v14 * *(_DWORD *)(a1 + 16)));
    }
  }
}

void sub_223FAFF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x227684CB8](a12, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

void sub_223FAFFB4(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char **a5@<X8>)
{
  uint64_t *i;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 v15;
  int v16;
  unsigned int j;
  uint64_t k;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint64_t ***v28;
  uint64_t **v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  void *v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  unint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  unint64_t v56;
  uint8x8_t v57;
  uint8x8_t v58;
  uint64_t ***v59;
  uint64_t **v60;
  unint64_t v61;
  uint64_t *v62;
  _QWORD *v63;
  float v64;
  _QWORD *v65;
  _QWORD *v66;
  _BOOL8 v67;
  unint64_t v68;
  unint64_t v69;
  size_t prime;
  _QWORD **v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  float v75;
  _QWORD *v76;
  _QWORD *v77;
  _BOOL8 v78;
  unint64_t v79;
  unint64_t v80;
  size_t v81;
  unint64_t v82;
  uint8x8_t v83;
  uint64_t v84;
  unint64_t v85;
  uint8x8_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  _BYTE *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  size_t v97;
  size_t v98;
  char *v99;
  char *v100;
  unint64_t v101;
  char *v102;
  __int128 *v103;
  unint64_t v104;
  __int128 v105;
  char *v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  char v111;
  uint64_t v112;
  char **v113;
  uint64_t v114;
  uint64_t m;
  char **v116;
  char *v117;
  _QWORD *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  size_t v122;
  char *v123;
  char *v124;
  _QWORD *v125;
  void *v126;
  _QWORD *v127;
  void *v128;
  char *v129;
  char *v130;
  int v133;
  char **v134;
  int v135;
  unint64_t v136;
  _QWORD v137[3];
  __int128 v138;
  uint64_t v139;
  void *__p[2];
  void *v141[2];
  float v142;
  unint64_t v143;
  void *v144;
  char v145;
  char v146;
  size_t v147;
  void *v148;
  _OWORD v149[2];
  char v150;
  __int128 v151;
  uint64_t v152;

  v150 = -1;
  memset(v149, 0, sizeof(v149));
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
    *(_QWORD *)((char *)v149 + (((unint64_t)*((unsigned __int8 *)i + 16) >> 3) & 0x18)) |= 1 << *((_BYTE *)i + 16);
  v8 = a1[1];
  v9 = HIDWORD(v8);
  v10 = v8;
  if (HIDWORD(v8))
    v11 = v8 == 0;
  else
    v11 = 1;
  if (v11)
    v8 = 0;
  v12 = v8 << 32;
  if (!HIDWORD(v8))
    v12 = 0;
  if ((_DWORD)v8)
    v13 = HIDWORD(v8) == 0;
  else
    v13 = 1;
  v143 = v8;
  v144 = (void *)(v12 | (v8 != 0));
  v145 = 0;
  v146 = 0;
  __p[0] = v144;
  if (v13)
    v8 = 0;
  *(_QWORD *)&v151 = v8;
  if ((HIDWORD(v12) & (HIDWORD(v12) - 1)) != 0)
    v14 = 1;
  else
    v14 = HIDWORD(v12);
  sub_223316930(&v147, &v151, __p, 1, (void **)&v150, 1, v14);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v141 = 0u;
  v142 = 1.0;
  v134 = a5;
  v133 = v9;
  if ((_DWORD)v9 && v10)
  {
    v15 = 0;
    v16 = 0;
    for (j = 0; j != v133; ++j)
    {
      for (k = 0; k != v10; ++k)
      {
        v24 = (unint64_t)v148;
        v25 = *((unsigned __int8 *)v148 + (_DWORD)v144 * (_DWORD)k + HIDWORD(v144) * j);
        if (v25 == 255)
        {
          v19 = *((_DWORD *)a1 + 4);
          v20 = *((_DWORD *)a1 + 5);
          v21 = v20 * j;
          v22 = *a1;
          v23 = *(unsigned __int8 *)(*a1 + v20 * j + v19 * (_DWORD)k);
          if (((*(_QWORD *)((char *)v149 + ((v23 >> 3) & 0x18)) >> v23) & 1) != 0)
            continue;
          v135 = v16;
          if (!k
            || (v32 = v19 * (k - 1), *(unsigned __int8 *)(v22 + (v21 + v32)) != (_DWORD)v23)
            && (!j
             || (v33 = v20 * (j - 1), *(unsigned __int8 *)(v22 + (v33 + v32)) != (_DWORD)v23)
             && *(unsigned __int8 *)(v22 + (v33 + v19 * k)) != (_DWORD)v23
             && (k + 1 >= v10 || *(unsigned __int8 *)(v22 + (v33 + v19 * (k + 1))) != (_DWORD)v23)))
          {
            v34 = 1;
LABEL_58:
            v138 = *(_OWORD *)a1;
            v139 = a1[2];
            if (HIDWORD(v143))
              v35 = (_DWORD)v143 == 0;
            else
              v35 = 1;
            v36 = v144;
            if (v35)
              v37 = 0;
            else
              v37 = v143;
            if (HIDWORD(v37) * HIDWORD(v144) == -1
              && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v137[0] = v24;
            v137[1] = v37;
            v137[2] = v36;
            v136 = __PAIR64__(j, k);
            v38 = v135;
            sub_223FB16F8(&v138, (uint64_t)v137, v135, &v136, v34, (char **)&v151);
            v40 = (unint64_t)a5[1];
            v39 = (unint64_t)a5[2];
            if (v40 < v39)
            {
              *(_QWORD *)v40 = 0;
              *(_QWORD *)(v40 + 8) = 0;
              *(_QWORD *)(v40 + 16) = 0;
              *(_OWORD *)v40 = v151;
              *(_QWORD *)(v40 + 16) = v152;
              a5[1] = (char *)(v40 + 24);
              goto LABEL_86;
            }
            v41 = *a5;
            v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - (_QWORD)*a5) >> 3);
            v43 = v42 + 1;
            if (v42 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_22316E078();
            v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - (_QWORD)v41) >> 3);
            if (2 * v44 > v43)
              v43 = 2 * v44;
            if (v44 >= 0x555555555555555)
              v45 = 0xAAAAAAAAAAAAAAALL;
            else
              v45 = v43;
            if (v45 > 0xAAAAAAAAAAAAAAALL)
              sub_223174E94();
            v46 = (char *)operator new(24 * v45);
            v47 = &v46[24 * v42];
            *(_OWORD *)v47 = v151;
            *((_QWORD *)v47 + 2) = v152;
            v48 = &v46[24 * v45];
            v151 = 0uLL;
            v152 = 0;
            v49 = v47 + 24;
            if ((char *)v40 == v41)
            {
              v24 = (unint64_t)v134;
              *v134 = v47;
              v134[1] = v49;
              v134[2] = v48;
              if (v40)
                goto LABEL_83;
            }
            else
            {
              v50 = (char *)v40;
              do
              {
                v51 = *(_OWORD *)(v50 - 24);
                v50 -= 24;
                *(_OWORD *)(v47 - 24) = v51;
                v47 -= 24;
                *((_QWORD *)v47 + 2) = *((_QWORD *)v50 + 2);
                *(_QWORD *)v50 = 0;
                *((_QWORD *)v50 + 1) = 0;
                *((_QWORD *)v50 + 2) = 0;
              }
              while (v50 != v41);
              *v134 = v47;
              v134[1] = v49;
              v52 = v40;
              v134[2] = v48;
              do
              {
                v54 = *(void **)(v52 - 24);
                v52 -= 24;
                v53 = v54;
                if (v54)
                {
                  *(_QWORD *)(v40 - 16) = v53;
                  operator delete(v53);
                }
                v40 = v52;
              }
              while ((char *)v52 != v41);
              v40 = (unint64_t)v41;
              v24 = (unint64_t)v134;
              if (v40)
LABEL_83:
                operator delete((void *)v40);
            }
            v55 = (void *)v151;
            *(_QWORD *)(v24 + 8) = v49;
            v38 = v135;
            if (v55)
            {
              *((_QWORD *)&v151 + 1) = v55;
              operator delete(v55);
            }
LABEL_86:
            v56 = (unint64_t)__p[1];
            if (v34)
            {
              if (__p[1])
              {
                v57 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
                v57.i16[0] = vaddlv_u8(v57);
                if (v57.u32[0] > 1uLL)
                {
                  v24 = v38;
                  if (__p[1] <= (void *)v38)
                    v24 = v38 % (unint64_t)__p[1];
                }
                else
                {
                  v24 = (LODWORD(__p[1]) - 1) & v38;
                }
                v59 = (uint64_t ***)*((_QWORD *)__p[0] + v24);
                if (v59)
                {
                  v60 = *v59;
                  if (v60)
                  {
                    if (v57.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v62 = v60[1];
                        if (v62 == (uint64_t *)v38)
                        {
                          if (*((unsigned __int8 *)v60 + 16) == v38)
                            goto LABEL_240;
                        }
                        else if (((unint64_t)v62 & ((unint64_t)__p[1] - 1)) != v24)
                        {
                          goto LABEL_112;
                        }
                        v60 = (uint64_t **)*v60;
                        if (!v60)
                          goto LABEL_112;
                      }
                    }
                    do
                    {
                      v61 = (unint64_t)v60[1];
                      if (v61 == v38)
                      {
                        if (*((unsigned __int8 *)v60 + 16) == v38)
                          goto LABEL_240;
                      }
                      else
                      {
                        if ((void *)v61 >= __p[1])
                          v61 %= (unint64_t)__p[1];
                        if (v61 != v24)
                          break;
                      }
                      v60 = (uint64_t **)*v60;
                    }
                    while (v60);
                  }
                }
              }
LABEL_112:
              v63 = operator new(0x30uLL);
              *(_QWORD *)&v151 = v63;
              *((_QWORD *)&v151 + 1) = v141;
              *v63 = 0;
              v63[1] = v38;
              *((_BYTE *)v63 + 16) = v38;
              v63[4] = 0;
              v63[5] = 0;
              v63[3] = 0;
              LOBYTE(v152) = 1;
              v64 = (float)((unint64_t)v141[1] + 1);
              if (v56 && (float)(v142 * (float)v56) >= v64)
              {
                v65 = __p[0];
                v66 = (_QWORD *)*((_QWORD *)__p[0] + v24);
                if (v66)
                  goto LABEL_115;
LABEL_177:
                *v63 = v141[0];
                v141[0] = v63;
                v65[v24] = v141;
                if (*v63)
                {
                  v88 = *(_QWORD *)(*v63 + 8);
                  if ((v56 & (v56 - 1)) != 0)
                  {
                    if (v88 >= v56)
                      v88 %= v56;
                  }
                  else
                  {
                    v88 &= v56 - 1;
                  }
                  v66 = (char *)__p[0] + 8 * v88;
                  goto LABEL_188;
                }
              }
              else
              {
                v67 = (v56 & (v56 - 1)) != 0;
                if (v56 < 3)
                  v67 = 1;
                v68 = v67 | (2 * v56);
                v69 = vcvtps_u32_f32(v64 / v142);
                if (v68 <= v69)
                  prime = v69;
                else
                  prime = v68;
                if (prime == 1)
                {
                  prime = 2;
                }
                else if ((prime & (prime - 1)) != 0)
                {
                  prime = std::__next_prime(prime);
                  v56 = (unint64_t)__p[1];
                }
                if (prime > v56)
                  goto LABEL_154;
                if (prime < v56)
                {
                  v82 = vcvtps_u32_f32((float)(unint64_t)v141[1] / v142);
                  if (v56 < 3
                    || (v83 = (uint8x8_t)vcnt_s8((int8x8_t)v56), v83.i16[0] = vaddlv_u8(v83), v83.u32[0] > 1uLL))
                  {
                    v82 = std::__next_prime(v82);
                  }
                  else
                  {
                    v84 = 1 << -(char)__clz(v82 - 1);
                    if (v82 >= 2)
                      v82 = v84;
                  }
                  if (prime <= v82)
                    prime = v82;
                  if (prime < v56)
LABEL_154:
                    sub_2231B0668((uint64_t)__p, prime);
                }
                v56 = (unint64_t)__p[1];
                if (((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0)
                {
                  if (__p[1] <= (void *)v38)
                  {
                    v24 = v38 % (unint64_t)__p[1];
                    v65 = __p[0];
                    v66 = (_QWORD *)*((_QWORD *)__p[0] + v24);
                    if (!v66)
                      goto LABEL_177;
                  }
                  else
                  {
                    v24 = v38;
                    v65 = __p[0];
                    v66 = (_QWORD *)*((_QWORD *)__p[0] + v38);
                    if (!v66)
                      goto LABEL_177;
                  }
                }
                else
                {
                  v24 = (LODWORD(__p[1]) - 1) & v38;
                  v65 = __p[0];
                  v66 = (_QWORD *)*((_QWORD *)__p[0] + v24);
                  if (!v66)
                    goto LABEL_177;
                }
LABEL_115:
                *v63 = *v66;
LABEL_188:
                *v66 = v63;
              }
              ++v141[1];
LABEL_240:
              v15 = v38;
              v16 = v38 + 1;
              a5 = v134;
              continue;
            }
            if (__p[1])
            {
              v58 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
              v58.i16[0] = vaddlv_u8(v58);
              if (v58.u32[0] > 1uLL)
              {
                v40 = v15;
                if (__p[1] <= (void *)v15)
                  v40 = v15 % (unint64_t)__p[1];
              }
              else
              {
                v40 = (LODWORD(__p[1]) - 1) & v15;
              }
              v71 = (_QWORD **)*((_QWORD *)__p[0] + v40);
              if (v71)
              {
                v72 = *v71;
                if (*v71)
                {
                  if (v58.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v74 = v72[1];
                      if (v74 == v15)
                      {
                        if (*((unsigned __int8 *)v72 + 16) == v15)
                          goto LABEL_209;
                      }
                      else if ((v74 & ((uint64_t)__p[1] - 1)) != v40)
                      {
                        goto LABEL_140;
                      }
                      v72 = (_QWORD *)*v72;
                      if (!v72)
                        goto LABEL_140;
                    }
                  }
                  do
                  {
                    v73 = v72[1];
                    if (v73 == v15)
                    {
                      if (*((unsigned __int8 *)v72 + 16) == v15)
                        goto LABEL_209;
                    }
                    else
                    {
                      if ((void *)v73 >= __p[1])
                        v73 %= (unint64_t)__p[1];
                      if (v73 != v40)
                        break;
                    }
                    v72 = (_QWORD *)*v72;
                  }
                  while (v72);
                }
              }
            }
LABEL_140:
            v72 = operator new(0x30uLL);
            *(_QWORD *)&v151 = v72;
            *((_QWORD *)&v151 + 1) = v141;
            *v72 = 0;
            v72[1] = v15;
            *((_BYTE *)v72 + 16) = v15;
            v72[4] = 0;
            v72[5] = 0;
            v72[3] = 0;
            LOBYTE(v152) = 1;
            v75 = (float)((unint64_t)v141[1] + 1);
            if (v56 && (float)(v142 * (float)v56) >= v75)
            {
              v76 = __p[0];
              v77 = (_QWORD *)*((_QWORD *)__p[0] + v40);
              if (v77)
                goto LABEL_143;
LABEL_196:
              *v72 = v141[0];
              v141[0] = v72;
              v76[v40] = v141;
              if (*v72)
              {
                v89 = *(_QWORD *)(*v72 + 8);
                if ((v56 & (v56 - 1)) != 0)
                {
                  if (v89 >= v56)
                    v89 %= v56;
                }
                else
                {
                  v89 &= v56 - 1;
                }
                v77 = (char *)__p[0] + 8 * v89;
                goto LABEL_207;
              }
            }
            else
            {
              v78 = (v56 & (v56 - 1)) != 0;
              if (v56 < 3)
                v78 = 1;
              v79 = v78 | (2 * v56);
              v80 = vcvtps_u32_f32(v75 / v142);
              if (v79 <= v80)
                v81 = v80;
              else
                v81 = v79;
              if (v81 == 1)
              {
                v81 = 2;
              }
              else if ((v81 & (v81 - 1)) != 0)
              {
                v81 = std::__next_prime(v81);
                v56 = (unint64_t)__p[1];
              }
              if (v81 > v56)
                goto LABEL_158;
              if (v81 < v56)
              {
                v85 = vcvtps_u32_f32((float)(unint64_t)v141[1] / v142);
                if (v56 < 3
                  || (v86 = (uint8x8_t)vcnt_s8((int8x8_t)v56), v86.i16[0] = vaddlv_u8(v86), v86.u32[0] > 1uLL))
                {
                  v85 = std::__next_prime(v85);
                }
                else
                {
                  v87 = 1 << -(char)__clz(v85 - 1);
                  if (v85 >= 2)
                    v85 = v87;
                }
                if (v81 <= v85)
                  v81 = v85;
                if (v81 < v56)
LABEL_158:
                  sub_2231B0668((uint64_t)__p, v81);
              }
              v56 = (unint64_t)__p[1];
              if (((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0)
              {
                if (__p[1] <= (void *)v15)
                {
                  v40 = v15 % (unint64_t)__p[1];
                  v76 = __p[0];
                  v77 = (_QWORD *)*((_QWORD *)__p[0] + v40);
                  if (!v77)
                    goto LABEL_196;
                }
                else
                {
                  v40 = v15;
                  v76 = __p[0];
                  v77 = (_QWORD *)*((_QWORD *)__p[0] + v15);
                  if (!v77)
                    goto LABEL_196;
                }
              }
              else
              {
                v40 = (LODWORD(__p[1]) - 1) & v15;
                v76 = __p[0];
                v77 = (_QWORD *)*((_QWORD *)__p[0] + v40);
                if (!v77)
                  goto LABEL_196;
              }
LABEL_143:
              *v72 = *v77;
LABEL_207:
              *v77 = v72;
            }
            ++v141[1];
LABEL_209:
            v91 = (_BYTE *)v72[4];
            v90 = v72[5];
            if ((unint64_t)v91 < v90)
            {
              *v91 = v38;
              v92 = (uint64_t)(v91 + 1);
LABEL_239:
              v72[4] = v92;
              v38 = v135;
              goto LABEL_240;
            }
            v93 = (_BYTE *)v72[3];
            v94 = v91 - v93;
            v95 = v91 - v93 + 1;
            if (v95 < 0)
              sub_22316E078();
            v96 = v90 - (_QWORD)v93;
            if (2 * v96 > v95)
              v95 = 2 * v96;
            if (v96 >= 0x3FFFFFFFFFFFFFFFLL)
              v97 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v97 = v95;
            if (v97)
            {
              v98 = v97;
              v99 = (char *)operator new(v97);
              v97 = v98;
              v100 = &v99[v94];
              v99[v94] = v135;
              v92 = (uint64_t)&v99[v94 + 1];
              if (v91 == v93)
              {
LABEL_237:
                v72[3] = v100;
                v72[4] = v92;
                v72[5] = &v99[v97];
                if (v91)
                  operator delete(v91);
                goto LABEL_239;
              }
            }
            else
            {
              v99 = 0;
              v100 = (char *)(v91 - v93);
              *(_BYTE *)v94 = v135;
              v92 = v94 + 1;
              if (v91 == v93)
                goto LABEL_237;
            }
            if (v94 >= 8 && (unint64_t)(v93 - v99) >= 0x20)
            {
              if (v94 >= 0x20)
              {
                v101 = v94 & 0xFFFFFFFFFFFFFFE0;
                v102 = &v99[v94 - 16];
                v103 = (__int128 *)(v91 - 16);
                v104 = v94 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v105 = *v103;
                  *((_OWORD *)v102 - 1) = *(v103 - 1);
                  *(_OWORD *)v102 = v105;
                  v102 -= 32;
                  v103 -= 2;
                  v104 -= 32;
                }
                while (v104);
                if (v94 == v101)
                  goto LABEL_236;
                if ((v94 & 0x18) != 0)
                  goto LABEL_229;
                v100 -= v101;
                v91 -= v101;
              }
              else
              {
                v101 = 0;
LABEL_229:
                v100 -= v94 & 0xFFFFFFFFFFFFFFF8;
                v106 = &v99[&v91[-v101] - v93 - 8];
                v107 = (uint64_t *)&v91[-v101 - 8];
                v108 = v101 - (v94 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v109 = *v107--;
                  *(_QWORD *)v106 = v109;
                  v106 -= 8;
                  v108 += 8;
                }
                while (v108);
                v91 -= v94 & 0xFFFFFFFFFFFFFFF8;
                if (v94 == (v94 & 0xFFFFFFFFFFFFFFF8))
                {
LABEL_236:
                  v91 = (_BYTE *)v72[3];
                  v100 = v99;
                  goto LABEL_237;
                }
              }
            }
            v110 = v100 - 1;
            do
            {
              v111 = *--v91;
              *v110-- = v111;
            }
            while (v91 != v93);
            goto LABEL_236;
          }
          if (k + 1 < v10 && (_DWORD)v23 != *(unsigned __int8 *)(v22 + (v21 + v19 * (k + 1))))
          {
            v34 = 0;
            goto LABEL_58;
          }
        }
        else if (__p[1])
        {
          v26 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
          v26.i16[0] = vaddlv_u8(v26);
          if (v26.u32[0] > 1uLL)
          {
            v27 = *((unsigned __int8 *)v148 + (_DWORD)v144 * (_DWORD)k + HIDWORD(v144) * j);
            if (__p[1] <= (void *)v25)
              v27 = v25 % (unint64_t)__p[1];
          }
          else
          {
            v27 = (LODWORD(__p[1]) - 1) & v25;
          }
          v28 = (uint64_t ***)*((_QWORD *)__p[0] + v27);
          if (v28)
          {
            v29 = *v28;
            if (v29)
            {
              if (v26.u32[0] < 2uLL)
              {
                while (1)
                {
                  v31 = (unint64_t)v29[1];
                  if (v31 == v25)
                  {
                    if (*((unsigned __int8 *)v29 + 16) == (_DWORD)v25)
                      goto LABEL_46;
                  }
                  else if ((v31 & ((unint64_t)__p[1] - 1)) != v27)
                  {
                    goto LABEL_24;
                  }
                  v29 = (uint64_t **)*v29;
                  if (!v29)
                    goto LABEL_24;
                }
              }
              do
              {
                v30 = (unint64_t)v29[1];
                if (v30 == v25)
                {
                  if (*((unsigned __int8 *)v29 + 16) == (_DWORD)v25)
                  {
LABEL_46:
                    v15 = *((_BYTE *)v148 + (_DWORD)v144 * (_DWORD)k + HIDWORD(v144) * j);
                    break;
                  }
                }
                else
                {
                  if ((void *)v30 >= __p[1])
                    v30 %= (unint64_t)__p[1];
                  if (v30 != v27)
                    break;
                }
                v29 = (uint64_t **)*v29;
              }
              while (v29);
            }
          }
        }
LABEL_24:
        ;
      }
    }
  }
  v112 = a3;
  if (a4 && __p != (void **)a3)
  {
    *(float *)(a3 + 32) = v142;
    v113 = (char **)v141[0];
    v114 = *(_QWORD *)(a3 + 8);
    if (!v114)
      goto LABEL_251;
    for (m = 0; m != v114; ++m)
      *(_QWORD *)(*(_QWORD *)a3 + 8 * m) = 0;
    v116 = *(char ***)(a3 + 16);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    if (v116)
    {
      while (v113)
      {
        *((_BYTE *)v116 + 16) = *((_BYTE *)v113 + 16);
        if (v116 != v113)
          sub_2235621B0(v116 + 3, v113[3], v113[4], v113[4] - v113[3]);
        v117 = *v116;
        sub_223FB0EF4(a3, (uint64_t)v116);
        v113 = (char **)*v113;
        v116 = (char **)v117;
        if (!v117)
          goto LABEL_251;
      }
      do
      {
        v129 = *v116;
        v130 = v116[3];
        if (v130)
        {
          v116[4] = v130;
          operator delete(v130);
        }
        operator delete(v116);
        v116 = (char **)v129;
      }
      while (v129);
    }
    else
    {
LABEL_251:
      while (v113)
      {
        v118 = operator new(0x30uLL);
        *(_QWORD *)&v151 = v118;
        *((_QWORD *)&v151 + 1) = a3 + 16;
        LOBYTE(v152) = 0;
        *v118 = 0;
        v118[1] = 0;
        v119 = *((unsigned __int8 *)v113 + 16);
        v118[3] = 0;
        *((_BYTE *)v118 + 16) = v119;
        v118[4] = 0;
        v118[5] = 0;
        v121 = v113[3];
        v120 = v113[4];
        v122 = v120 - v121;
        if (v120 != v121)
        {
          if ((v122 & 0x8000000000000000) != 0)
            sub_22316E078();
          v123 = (char *)operator new(v120 - v121);
          v118[3] = v123;
          v118[4] = v123;
          v124 = &v123[v122];
          v118[5] = &v123[v122];
          memcpy(v123, v121, v122);
          v118[4] = v124;
          v112 = a3;
        }
        v118[1] = v119;
        sub_223FB0EF4(v112, (uint64_t)v118);
        v113 = (char **)*v113;
      }
    }
  }
  v125 = v141[0];
  if (v141[0])
  {
    do
    {
      v127 = (_QWORD *)*v125;
      v128 = (void *)v125[3];
      if (v128)
      {
        v125[4] = v128;
        operator delete(v128);
      }
      operator delete(v125);
      v125 = v127;
    }
    while (v127);
  }
  v126 = __p[0];
  __p[0] = 0;
  if (v126)
    operator delete(v126);
  if (v148)
    free(v148);
}

void sub_223FB0DD0(void *a1)
{
  void **v1;

  __cxa_begin_catch(a1);
  sub_223FB0EAC(v1);
  __cxa_rethrow();
}

void sub_223FB0DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  __cxa_end_catch();
  sub_223EB8208((uint64_t)&a25);
  sub_22317C838(a15);
  if (a35)
    free(a35);
  _Unwind_Resume(a1);
}

void sub_223FB0EAC(void **__p)
{
  void **v2;
  void *v3;

  do
  {
    v2 = (void **)*__p;
    v3 = __p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
    operator delete(__p);
    __p = v2;
  }
  while (v2);
}

void sub_223FB0EF4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  int8x8_t prime;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  size_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint64_t *i;
  uint8x8_t v31;
  unint64_t v32;
  uint64_t *v33;
  unsigned __int8 v34;
  int v35;
  int v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  size_t v45;
  void *v46;
  uint8x8_t v47;
  uint8x8_t v48;
  uint64_t v49;
  uint64_t *v50;
  char v51;
  int v52;
  char v53;
  uint64_t v54;
  unint64_t v55;

  v4 = *(unsigned __int8 *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v7 = *(float *)(a1 + 32);
  if (v5 && (float)(v7 * (float)v5) >= v6)
    goto LABEL_76;
  v8 = 1;
  if (v5 >= 3)
    v8 = (v5 & (v5 - 1)) != 0;
  v9 = v8 | (2 * v5);
  v10 = vcvtps_u32_f32(v6 / v7);
  if (v9 <= v10)
    prime = (int8x8_t)v10;
  else
    prime = (int8x8_t)v9;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v5 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime <= v5)
  {
    if (*(_QWORD *)&prime >= v5)
      goto LABEL_76;
    v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v45 = std::__next_prime(v25);
      if (*(_QWORD *)&prime <= v45)
        prime = (int8x8_t)v45;
      if (*(_QWORD *)&prime >= v5)
      {
LABEL_38:
        v5 = *(_QWORD *)(a1 + 8);
        v28 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
        v28.i16[0] = vaddlv_u8(v28);
        v29 = v28.u32[0];
        if (v28.u32[0] >= 2uLL)
          goto LABEL_44;
        goto LABEL_77;
      }
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v5)
        goto LABEL_38;
    }
    if (!*(_QWORD *)&prime)
    {
      v46 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v46)
        operator delete(v46);
      v5 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      v47 = (uint8x8_t)vcnt_s8(0);
      v47.i16[0] = vaddlv_u8(v47);
      v29 = v47.u32[0];
      if (v47.u32[0] >= 2uLL)
        goto LABEL_44;
      goto LABEL_77;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    sub_223174E94();
  v12 = operator new(8 * *(_QWORD *)&prime);
  v13 = *(void **)a1;
  *(_QWORD *)a1 = v12;
  if (v13)
    operator delete(v13);
  v14 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14++) = 0;
  while (*(_QWORD *)&prime != v14);
  v16 = a1 + 16;
  v15 = *(uint64_t ***)(a1 + 16);
  if (v15)
  {
    v17 = (unint64_t)v15[1];
    v18 = *(_QWORD *)&prime - 1;
    if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) == 0)
    {
      v19 = v17 & v18;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v16;
      v20 = *v15;
      if (!*v15)
        goto LABEL_43;
      do
      {
        v21 = v20[1] & v18;
        if (v21 == v19)
        {
          v15 = (uint64_t **)v20;
        }
        else
        {
          v22 = v20;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v21))
          {
            do
            {
              v23 = v22;
              v22 = (uint64_t *)*v22;
            }
            while (v22 && *((unsigned __int8 *)v20 + 16) == *((unsigned __int8 *)v22 + 16));
            *v15 = v22;
            v24 = 8 * v21;
            *v23 = **(_QWORD **)(*(_QWORD *)a1 + v24);
            **(_QWORD **)(*(_QWORD *)a1 + v24) = v20;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v15;
            v15 = (uint64_t **)v20;
            v19 = v21;
          }
        }
        v20 = *v15;
      }
      while (*v15);
      v5 = (unint64_t)prime;
LABEL_76:
      v48 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
      v48.i16[0] = vaddlv_u8(v48);
      v29 = v48.u32[0];
      if (v48.u32[0] >= 2uLL)
        goto LABEL_44;
      goto LABEL_77;
    }
    if (v17 >= *(_QWORD *)&prime)
      v17 %= *(_QWORD *)&prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = v16;
    for (i = *v15; *v15; i = *v15)
    {
      v40 = i[1];
      if (v40 >= *(_QWORD *)&prime)
        v40 %= *(_QWORD *)&prime;
      if (v40 == v17)
      {
        v15 = (uint64_t **)i;
      }
      else
      {
        v41 = i;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v40))
        {
          do
          {
            v42 = v41;
            v41 = (uint64_t *)*v41;
          }
          while (v41 && *((unsigned __int8 *)i + 16) == *((unsigned __int8 *)v41 + 16));
          *v15 = v41;
          v43 = 8 * v40;
          *v42 = **(_QWORD **)(*(_QWORD *)a1 + v43);
          **(_QWORD **)(*(_QWORD *)a1 + v43) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v15;
          v15 = (uint64_t **)i;
          v17 = v40;
        }
      }
    }
  }
LABEL_43:
  v5 = (unint64_t)prime;
  v31 = (uint8x8_t)vcnt_s8(prime);
  v31.i16[0] = vaddlv_u8(v31);
  v29 = v31.u32[0];
  if (v31.u32[0] >= 2uLL)
  {
LABEL_44:
    v32 = v4;
    if (v5 <= v4)
      v32 = v4 % v5;
    v33 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v32);
    if (!v33)
    {
      v37 = 0;
      v44 = *(_QWORD *)(a2 + 8);
      goto LABEL_85;
    }
    v34 = 0;
    v35 = *(unsigned __int8 *)(a2 + 16);
    while (1)
    {
      v37 = v33;
      v33 = (uint64_t *)*v33;
      if (!v33)
        goto LABEL_84;
      v38 = v33[1];
      v39 = v38;
      if (v38 >= v5)
        v39 = v38 % v5;
      if (v39 != v32)
        goto LABEL_84;
      if (v38 == v4)
      {
        v36 = v34 & (*((unsigned __int8 *)v33 + 16) != v35);
        v34 |= *((unsigned __int8 *)v33 + 16) == v35;
        if (v36 == 1)
          goto LABEL_84;
      }
      else if ((v34 & 1) == 1)
      {
        goto LABEL_84;
      }
    }
  }
LABEL_77:
  v49 = (v5 - 1) & v4;
  v50 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v49);
  if (!v50)
  {
    v37 = 0;
    v44 = *(_QWORD *)(a2 + 8);
LABEL_96:
    v44 &= v5 - 1;
    if (v37)
      goto LABEL_88;
LABEL_97:
    *(_QWORD *)a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = a1 + 16;
    if (!*(_QWORD *)a2)
      goto LABEL_103;
    v55 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v29 > 1)
    {
      if (v55 >= v5)
        v55 %= v5;
    }
    else
    {
      v55 &= v5 - 1;
    }
LABEL_102:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v55) = a2;
    goto LABEL_103;
  }
  v51 = 0;
  v52 = *(unsigned __int8 *)(a2 + 16);
  while (1)
  {
    v37 = v50;
    v50 = (uint64_t *)*v50;
    if (!v50)
      break;
    v54 = v50[1];
    if ((v54 & (v5 - 1)) != v49)
      break;
    if (v54 == v4)
    {
      v53 = v51 & (*((unsigned __int8 *)v50 + 16) != v52);
      v51 |= *((unsigned __int8 *)v50 + 16) == v52;
      if ((v53 & 1) != 0)
        break;
    }
    else if ((v51 & 1) != 0)
    {
      break;
    }
  }
LABEL_84:
  v44 = *(_QWORD *)(a2 + 8);
  if (v29 <= 1)
    goto LABEL_96;
LABEL_85:
  if (v44 >= v5)
    v44 %= v5;
  if (!v37)
    goto LABEL_97;
LABEL_88:
  *(_QWORD *)a2 = *v37;
  *v37 = a2;
  if (*(_QWORD *)a2)
  {
    v55 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v29 > 1)
    {
      if (v55 >= v5)
        v55 %= v5;
    }
    else
    {
      v55 &= v5 - 1;
    }
    if (v55 != v44)
      goto LABEL_102;
  }
LABEL_103:
  ++*(_QWORD *)(a1 + 24);
}

unint64_t sub_223FB1454@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  unint64_t result;
  char *v15;
  int v16;
  int v17;
  unsigned int v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  BOOL v25;
  int v26;
  int v27;
  char v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *((_DWORD *)a1 + 3);
  v7 = *a2;
  v6 = a2[1];
  v8 = *((_DWORD *)a1 + 4);
  v9 = *((_DWORD *)a1 + 5);
  v10 = *a1;
  v11 = *(unsigned __int8 *)(*a1 + (v8 * *a2 + v9 * v6));
  v12 = *a3;
  v13 = 2 * v12;
  result = (unint64_t)&unk_224692670;
  v15 = (char *)&unk_224692670 + 4 * *a3;
  v16 = *a2 + *v15;
  if (v16 < 0
    || v16 >= v4
    || (v17 = v6 + v15[1], v17 < 0)
    || v17 >= v5
    || *(unsigned __int8 *)(v10 + (v16 * v8 + v17 * v9)) != v11)
  {
    v18 = v13 & 6 | 1;
    v19 = (char *)&unk_224692670 + 2 * v18;
    v16 = v7 + *v19;
    if (v16 < 0
      || v16 >= v4
      || (v17 = v6 + v19[1], v17 < 0)
      || v17 >= v5
      || *(unsigned __int8 *)(v10 + (v16 * v8 + v17 * v9)) != v11)
    {
      v18 = ((_BYTE)v13 + 2) & 6;
      v20 = (char *)&unk_224692670 + 2 * ((v13 + 2) & 6);
      v16 = v7 + *v20;
      if (v16 < 0
        || v16 >= v4
        || (v17 = v6 + v20[1], v17 < 0)
        || v17 >= v5
        || *(unsigned __int8 *)(v10 + (v16 * v8 + v17 * v9)) != v11)
      {
        v18 |= 1u;
        v21 = (char *)&unk_224692670 + 2 * v18;
        v16 = v7 + *v21;
        if (v16 < 0
          || v16 >= v4
          || (v17 = v6 + v21[1], v17 < 0)
          || v17 >= v5
          || *(unsigned __int8 *)(v10 + (v16 * v8 + v17 * v9)) != v11)
        {
          v18 = ((_BYTE)v13 + 4) & 6;
          v22 = (char *)&unk_224692670 + 2 * ((v13 + 4) & 6);
          v16 = v7 + *v22;
          if (v16 < 0
            || v16 >= v4
            || (v17 = v6 + v22[1], v17 < 0)
            || v17 >= v5
            || *(unsigned __int8 *)(v10 + (v16 * v8 + v17 * v9)) != v11)
          {
            v18 |= 1u;
            v23 = (char *)&unk_224692670 + 2 * v18;
            v16 = v7 + *v23;
            if (v16 < 0
              || v16 >= v4
              || (v17 = v6 + v23[1], v17 < 0)
              || v17 >= v5
              || *(unsigned __int8 *)(v10 + (v16 * v8 + v17 * v9)) != v11)
            {
              v18 = ((_BYTE)v13 + 6) & 6;
              v24 = (char *)&unk_224692670 + 2 * ((v13 + 6) & 6);
              v16 = v7 + *v24;
              if (v16 < 0
                || v16 >= v4
                || (v17 = v6 + v24[1], v17 < 0)
                || v17 >= v5
                || *(unsigned __int8 *)(v10 + (v16 * v8 + v17 * v9)) != v11)
              {
                v18 |= 1u;
                result = (unint64_t)&unk_224692670 + 2 * v18;
                v16 = v7 + *(char *)result;
                if (v16 < 0
                  || v16 >= v4
                  || (result = *(char *)(result + 1), v17 = v6 + result, v6 + (_DWORD)result < 0)
                  || v17 >= v5
                  || *(unsigned __int8 *)(v10 + (v16 * v8 + v17 * v9)) != v11)
                {
                  *(_QWORD *)a4 = *(_QWORD *)a2;
                  return result;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v18 = 2 * v12;
  }
  v25 = __OFSUB__(v18, v13);
  v26 = v18 - v13;
  if (v26 < 0 != v25)
    v26 += 8;
  v27 = dword_224692680[v26] + v12;
  v28 = v27 & 3;
  v30 = -v27;
  v29 = v30 < 0;
  v31 = v30 & 3;
  if (v29)
    LOBYTE(v32) = v28;
  else
    v32 = -v31;
  *a3 = v32;
  *(_DWORD *)a4 = v16;
  *(_DWORD *)(a4 + 4) = v17;
  return result;
}

unint64_t sub_223FB16F8@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X3>, char a5@<W4>, char **a6@<X8>)
{
  _QWORD *v6;
  char v7;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t result;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;

  v6 = a4;
  v7 = a3;
  v11 = 0;
  v12 = 0;
  v42 = a5 ^ 1;
  v41 = *a4;
  v13 = v41;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  v14 = HIDWORD(v13);
  while (1)
  {
    *(_BYTE *)(*(_QWORD *)a2 + (*(_DWORD *)(a2 + 16) * v13 + *(_DWORD *)(a2 + 20) * v14)) = v7;
    if ((unint64_t)v12 < v11)
    {
      *(_QWORD *)v12 = v13;
      v12 += 8;
      goto LABEL_17;
    }
    v15 = *a6;
    v16 = v12 - *a6;
    v17 = v16 >> 3;
    v18 = (v16 >> 3) + 1;
    if (v18 >> 61)
      sub_22316E078();
    v19 = v11 - (_QWORD)v15;
    if (v19 >> 2 > v18)
      v18 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 61)
        sub_223174E94();
      v21 = operator new(8 * v20);
      v22 = &v21[8 * v17];
      *(_QWORD *)v22 = v13;
      v23 = (uint64_t)(v22 + 8);
      v24 = (char *)(v12 - v15);
      if (v12 == v15)
        goto LABEL_14;
LABEL_20:
      v26 = (unint64_t)(v24 - 8);
      if (v26 >= 0x168)
      {
        v29 = (v12 - 8 - v15) & 0xFFFFFFFFFFFFFFF8;
        if (&v21[v16 - 8 - v29] > &v21[v16 - 8])
        {
          v27 = v12;
        }
        else if (&v12[-v29 - 8] > v12 - 8)
        {
          v27 = v12;
        }
        else if ((unint64_t)(v12 - v21 - v16) >= 0x20)
        {
          v30 = (v26 >> 3) + 1;
          v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
          v27 = &v12[-v31];
          v22 -= v31;
          v32 = &v21[8 * v17 - 16];
          v33 = v12 - 16;
          v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v35 = *(_OWORD *)v33;
            *(v32 - 1) = *((_OWORD *)v33 - 1);
            *v32 = v35;
            v32 -= 2;
            v33 -= 32;
            v34 -= 4;
          }
          while (v34);
          if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_23:
            v12 = *a6;
            *a6 = v22;
            a6[1] = (char *)v23;
            a6[2] = &v21[8 * v20];
            if (!v12)
              goto LABEL_16;
LABEL_15:
            operator delete(v12);
            goto LABEL_16;
          }
        }
        else
        {
          v27 = v12;
        }
      }
      else
      {
        v27 = v12;
      }
      do
      {
        v28 = *((_QWORD *)v27 - 1);
        v27 -= 8;
        *((_QWORD *)v22 - 1) = v28;
        v22 -= 8;
      }
      while (v27 != v15);
      goto LABEL_23;
    }
    v21 = 0;
    v22 = (char *)(8 * v17);
    *(_QWORD *)(8 * v17) = v13;
    v23 = 8 * v17 + 8;
    v24 = (char *)(v12 - v15);
    if (v12 != v15)
      goto LABEL_20;
LABEL_14:
    *a6 = v22;
    a6[1] = (char *)v23;
    a6[2] = &v21[8 * v20];
    if (v12)
      goto LABEL_15;
LABEL_16:
    v12 = (char *)v23;
    v6 = a4;
    v7 = a3;
LABEL_17:
    a6[1] = v12;
    v38 = *a1;
    v39 = *((_QWORD *)a1 + 2);
    result = sub_223FB1454((uint64_t *)&v38, (int *)&v41, &v42, (uint64_t)&v40);
    v13 = v40;
    v41 = v40;
    v14 = HIDWORD(v40);
    if (*v6 == v40)
      return result;
    v11 = (unint64_t)a6[2];
  }
}

void sub_223FB197C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_223FB19A8(unsigned __int8 **a1, int a2, unsigned int a3, unsigned __int8 **a4)
{
  int v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  BOOL v14;
  unsigned __int8 *v15;
  unint64_t v16;
  _BOOL8 v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  unsigned int *v55;
  unsigned __int8 *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  _BYTE *v63;
  unsigned int *v64;
  int v65;
  _BYTE *v66;
  _BYTE *v67;
  int v69;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int i;
  unsigned int *v80;
  int v81;
  _BYTE *v82;
  _BYTE *v83;
  unsigned int v85;
  _BYTE *v86;
  int v88;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  int v93;
  unsigned __int8 *v94;
  uint64_t v95;

  v8 = *((_DWORD *)a4 + 2);
  if (v8
    && (v9 = *((_DWORD *)a4 + 3)) != 0
    && (v8 != *((_DWORD *)a1 + 2) || v9 != *((_DWORD *)a1 + 3))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Vision/Dilate.cpp", 96, (uint64_t)"mask.Empty() || mask.Shape() == image.Shape()", 45, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| (v11 = *a1, v10 = a1[1], v12 = *((_DWORD *)a1 + 4), v13 = *((_DWORD *)a1 + 5), HIDWORD(v10) + (_DWORD)v10 == -1)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Vision/Dilate.cpp", 55, (uint64_t)"width + height < std::numeric_limits<uint32_t>::max()", 53, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v93 = 0;
  if (HIDWORD(v10))
    v14 = (_DWORD)v10 == 0;
  else
    v14 = 1;
  if (v14)
    v15 = 0;
  else
    v15 = v10;
  v16 = (_QWORD)v15 << 32;
  if (!((unint64_t)v15 >> 32))
    v16 = 0;
  v17 = v15 != 0;
  if ((_DWORD)v15)
    v18 = (unint64_t)v15 >> 32 == 0;
  else
    v18 = 1;
  v90 = v16 | v17;
  if (v18)
    v15 = 0;
  v94 = v15;
  v95 = v16 | v17;
  if (((v16 >> 30) & ((v16 >> 30) - 1)) != 0)
    v19 = 4;
  else
    v19 = v16 >> 30;
  sub_223F3BD1C(&v91, &v94, (unint64_t *)&v95, 1, &v93, 1, v19);
  if (HIDWORD(v10) && (_DWORD)v10)
  {
    v20 = 0;
    v21 = v92;
    v22 = v10 - 1;
    v23 = v12;
    while (1)
    {
      if (!v20)
      {
        if (*v11 == a2)
          v25 = 0;
        else
          v25 = HIDWORD(v10) + (_DWORD)v10;
        *v21 = v25;
        if ((_DWORD)v10 != 1)
        {
          v26 = 0;
          v27 = v12;
          do
          {
            while (v11[v27] == a2)
            {
              v21[(v90 * ++v26)] = 0;
              v27 += v12;
              if (v22 == v26)
                goto LABEL_27;
            }
            v28 = v21[(v90 * v26)];
            if (v28 + 1 < (HIDWORD(v10) + (_DWORD)v10))
              v29 = v28 + 1;
            else
              v29 = HIDWORD(v10) + (_DWORD)v10;
            v21[(v90 * ++v26)] = v29;
            v27 += v12;
          }
          while (v22 != v26);
        }
        goto LABEL_27;
      }
      v24 = v20 - 1;
      if (v11[(v13 * v20)] == a2)
      {
        v21[(HIDWORD(v90) * v20)] = 0;
        if ((_DWORD)v10 != 1)
          goto LABEL_45;
      }
      else
      {
        v21[(HIDWORD(v90) * v20)] = v21[HIDWORD(v90) * v24] + 1;
        if ((_DWORD)v10 != 1)
        {
LABEL_45:
          v30 = 0;
          v31 = v23;
          do
          {
            v34 = v90 + v90 * v30;
            v35 = HIDWORD(v90) * v20;
            if (v11[v31] == a2)
            {
              v33 = 0;
            }
            else
            {
              v32 = v21[v34 + HIDWORD(v90) * v24];
              if (v21[(v35 + v90 * v30)] + 1 >= (v32 + 1))
                v33 = v32 + 1;
              else
                v33 = v21[(v35 + v90 * v30)] + 1;
            }
            v21[v35 + v34] = v33;
            ++v30;
            v31 += v12;
          }
          while (v22 != v30);
        }
      }
LABEL_27:
      ++v20;
      v23 += v13;
      if (v20 == (unint64_t)v10 >> 32)
      {
        v36 = (unint64_t)v10 >> 32;
        do
        {
          v37 = v36 - 1;
          v38 = v10;
          if (v36 >= HIDWORD(v10))
          {
            do
            {
              v40 = v38 - 1;
              if (v38 < v10)
              {
                v41 = v21[HIDWORD(v90) * v37 + v90 * v38];
                if ((v41 + 1) < v21[HIDWORD(v90) * v37 + v90 * v40])
                  v42 = v41 + 1;
                else
                  v42 = v21[HIDWORD(v90) * v37 + v90 * v40];
                v21[HIDWORD(v90) * v37 + v90 * v40] = v42;
              }
              v38 = v40;
            }
            while (v40);
          }
          else
          {
            v39 = v10;
            do
            {
              v43 = v39 - 1;
              v44 = v90 * (v39 - 1) + HIDWORD(v90) * v37;
              v45 = v21[v90 * (v39 - 1) + HIDWORD(v90) * (_DWORD)v36];
              if ((v45 + 1) < v21[v44])
                v46 = v45 + 1;
              else
                v46 = v21[v90 * (v39 - 1) + HIDWORD(v90) * v37];
              v21[v90 * v43 + HIDWORD(v90) * v37] = v46;
              if (v39 < v10)
              {
                v47 = v21[v90 * v39 + HIDWORD(v90) * v37];
                if (v47 + 1 < v46)
                  v48 = v47 + 1;
                else
                  v48 = v46;
                v21[v44] = v48;
              }
              v39 = v43;
            }
            while (v43);
          }
          LODWORD(v36) = v37;
        }
        while (v37);
        break;
      }
    }
  }
  if (*((_DWORD *)a4 + 2) && *((_DWORD *)a4 + 3))
  {
    v49 = *((_DWORD *)a1 + 2);
    if (v49)
    {
      v50 = *((_DWORD *)a1 + 3);
      if (v50)
      {
        v51 = v49 - 1;
        v52 = *((unsigned int *)a1 + 4);
        v53 = *((unsigned int *)a4 + 4);
        v54 = *a1;
        v55 = (unsigned int *)v92;
        v56 = *a4;
        v57 = 4 * v90;
        v58 = v50 - 1;
        if (v50 != 1)
        {
          v59 = *((unsigned int *)a4 + 5);
          v60 = *((unsigned int *)a1 + 5);
          v61 = v59 + v59 * (unint64_t)(v50 - 2);
          if (v49 == 1)
          {
            v83 = *a4;
            do
            {
              if (*v55 <= a3 && *v83 != 0)
                *v54 = a2;
              v54 += v60;
              v83 += v59;
              v55 += HIDWORD(v90);
              --v58;
            }
            while (v58);
          }
          else
          {
            v62 = 0;
            v63 = *a4;
            do
            {
              v64 = v55;
              v65 = v49 - 1;
              v66 = v63;
              v67 = v54;
              do
              {
                if (*v64 <= a3 && *v66 != 0)
                  *v67 = a2;
                v67 += v52;
                v66 += v53;
                v64 = (unsigned int *)((char *)v64 + v57);
                --v65;
              }
              while (v65);
              v69 = *v66;
              if (*v64 <= a3 && v69 != 0)
                *v67 = a2;
              v54 += v60;
              v55 += HIDWORD(v90);
              v63 += v59;
              ++v62;
            }
            while (v62 != v58);
          }
          v56 += v61;
        }
        if (v49 != 1)
        {
          v85 = v49 - 2;
          v86 = v56;
          do
          {
            if (*v55 <= a3 && *v86 != 0)
              *v54 = a2;
            v54 += v52;
            v86 += v53;
            v55 = (unsigned int *)((char *)v55 + v57);
            --v51;
          }
          while (v51);
          v56 += v53 + v53 * (unint64_t)v85;
        }
        v88 = *v56;
        if (*v55 <= a3 && v88 != 0)
LABEL_109:
          *v54 = a2;
      }
    }
  }
  else
  {
    v71 = *((_DWORD *)a1 + 2);
    if (v71)
    {
      v72 = *((_DWORD *)a1 + 3);
      if (v72)
      {
        v73 = v71 - 1;
        v74 = *((unsigned int *)a1 + 4);
        v54 = *a1;
        v75 = (unsigned int *)v92;
        v76 = 4 * v90;
        v77 = v72 - 1;
        if (v77)
        {
          v78 = *((unsigned int *)a1 + 5);
          if (v73)
          {
            for (i = 0; i != v77; ++i)
            {
              v80 = v75;
              v81 = v73;
              v82 = v54;
              do
              {
                if (*v80 <= a3)
                  *v82 = a2;
                v82 += v74;
                v80 = (unsigned int *)((char *)v80 + v76);
                --v81;
              }
              while (v81);
              if (*v80 <= a3)
                *v82 = a2;
              v54 += v78;
              v75 += HIDWORD(v90);
            }
          }
          else
          {
            do
            {
              if (*v75 <= a3)
                *v54 = a2;
              v54 += v78;
              v75 += HIDWORD(v90);
              --v77;
            }
            while (v77);
          }
        }
        for (; v73; --v73)
        {
          if (*v75 <= a3)
            *v54 = a2;
          v54 += v74;
          v75 = (unsigned int *)((char *)v75 + v76);
        }
        if (*v75 <= a3)
          goto LABEL_109;
      }
    }
  }
  if (v92)
    free(v92);
}

uint64_t sub_223FB1FEC(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t i;
  int v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v5 = a2[1];
  v4 = a2[2];
  v6 = *a2;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)a1 = v6;
  sub_223FB21B8((_QWORD *)(a1 + 56), vcvtps_u32_f32(180.0 / *(float *)a1));
  sub_223FB21B8((_QWORD *)(a1 + 80), vcvtps_u32_f32(180.0 / *(float *)a1));
  *(float *)(a1 + 104) = *(float *)a2 * 0.017453;
  *(float32x2_t *)(a1 + 108) = vmul_f32(*(float32x2_t *)((char *)a2 + 24), *(float32x2_t *)((char *)a2 + 24));
  *(float *)(a1 + 116) = *((float *)a2 + 9) * *((float *)a2 + 9);
  v7 = 5489;
  *(_DWORD *)(a1 + 120) = 5489;
  v8 = 1;
  for (i = 31; i != 654; ++i)
  {
    v10 = 1812433253 * (v7 ^ (v7 >> 30));
    v7 = v10 + v8;
    *(_DWORD *)(a1 + 4 * i) = i + v10 - 30;
    ++v8;
  }
  *(_QWORD *)(a1 + 2616) = 0;
  v11 = (std::__shared_weak_count *)operator new(0x28uLL);
  v12 = v11;
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC7A710;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24EC7A760;
  LODWORD(v11[1].__shared_owners_) = 5489;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  *(_QWORD *)(a1 + 2624) = &off_24EC7A6B0;
  *(_QWORD *)(a1 + 2632) = v11 + 1;
  *(_QWORD *)(a1 + 2640) = v11;
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v12);
  }
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return a1;
}

_QWORD *sub_223FB21B8(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_223FB4974();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_223FB2260(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_223FB22B8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, double a5, double a6, float32x4_t a7, double a8, float32x4_t a9)
{
  _QWORD *v10;
  float v11;
  float v12;
  float v13;
  signed int v14;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unsigned int *v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  _OWORD *v36;
  unsigned int *v37;
  uint64_t v38;
  __int128 v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t *v42;
  unsigned int *v43;
  unint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  unsigned int *v52;
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  _OWORD *v59;
  unsigned int *v60;
  uint64_t v61;
  __int128 v62;
  unsigned int v63;
  int v64;
  signed int v65;
  signed int v66;
  _QWORD *v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  float32x2_t v71;
  uint64_t v72;

  v10 = (_QWORD *)a1;
  v71 = 0;
  v72 = 0;
  sub_223FB4988((int32x2_t *)a2, (int32x2_t *)a3, (unint64_t *)(a2 + 8), (uint64_t *)(a3 + 8), &v72, &v71, (float32x2_t)*(unsigned int *)(a1 + 104), *(float32_t *)(a1 + 4), a7, a8, a9);
  v11 = sqrtf(v71.f32[0]);
  v12 = 3.0;
  if (v11 <= 3.0)
    v12 = v11;
  v13 = sqrtf(v71.f32[1]);
  v14 = llroundf(*(float *)&v72 - v12);
  if (v13 > 2.0)
    v13 = 2.0;
  v65 = llroundf(*(float *)&v72 + v12);
  if (v14 <= v65 && a4 != 0)
  {
    v68 = llroundf(*((float *)&v72 + 1) + v13);
    v69 = llroundf(*((float *)&v72 + 1) - v13);
    v64 = -1431655765 * ((v10[8] - v10[7]) >> 3);
    v67 = v10;
    do
    {
      v16 = 0;
      v66 = v14;
      v17 = (v14 + v64) % v64;
      v70 = v17;
      do
      {
        while (1)
        {
          v18 = v10[7] + 24 * v17;
          v19 = (uint64_t *)(v18 + 8);
          v20 = *(unsigned int **)(v18 + 8);
          v21 = *(_QWORD *)(v18 + 16);
          if ((unint64_t)v20 < v21)
          {
            *v20 = v69;
            v22 = (uint64_t)(v20 + 1);
            goto LABEL_36;
          }
          v23 = *(unsigned int **)v18;
          v24 = (uint64_t)v20 - *(_QWORD *)v18;
          v25 = v24 >> 2;
          v26 = (v24 >> 2) + 1;
          if (v26 >> 62)
            sub_22352449C();
          v27 = v21 - (_QWORD)v23;
          if (v27 >> 1 > v26)
            v26 = v27 >> 1;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
            v28 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v28 = v26;
          if (v28)
          {
            if (v28 >> 62)
              goto LABEL_58;
            v29 = operator new(4 * v28);
            v30 = (unsigned int *)&v29[4 * v25];
            *v30 = v69;
            v22 = (uint64_t)(v30 + 1);
            v31 = (char *)v20 - (char *)v23;
            if (v20 == v23)
              goto LABEL_33;
LABEL_27:
            v32 = v31 - 4;
            if (v32 < 0x2C)
              goto LABEL_63;
            if ((unint64_t)((char *)v20 - v29 - v24) < 0x20)
              goto LABEL_63;
            v33 = (v32 >> 2) + 1;
            v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
            v35 = &v20[v34 / 0xFFFFFFFFFFFFFFFCLL];
            v30 = (unsigned int *)((char *)v30 - v34);
            v36 = &v29[4 * v25 - 16];
            v37 = v20 - 4;
            v38 = v33 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v39 = *(_OWORD *)v37;
              *(v36 - 1) = *((_OWORD *)v37 - 1);
              *v36 = v39;
              v36 -= 2;
              v37 -= 8;
              v38 -= 8;
            }
            while (v38);
            v20 = v35;
            if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_63:
              do
              {
                v40 = *--v20;
                *--v30 = v40;
              }
              while (v20 != v23);
            }
            goto LABEL_33;
          }
          v29 = 0;
          v30 = (unsigned int *)(4 * v25);
          *(_DWORD *)(4 * v25) = v69;
          v22 = 4 * v25 + 4;
          v31 = (char *)v20 - (char *)v23;
          if (v20 != v23)
            goto LABEL_27;
LABEL_33:
          *(_QWORD *)v18 = v30;
          *v19 = v22;
          *(_QWORD *)(v18 + 16) = &v29[4 * v28];
          if (v23)
            operator delete(v23);
          v10 = v67;
          v17 = v70;
LABEL_36:
          *v19 = v22;
          v41 = v10[10] + 24 * v17;
          v42 = (uint64_t *)(v41 + 8);
          v43 = *(unsigned int **)(v41 + 8);
          v44 = *(_QWORD *)(v41 + 16);
          if ((unint64_t)v43 >= v44)
            break;
          *v43 = v68;
          *v42 = (uint64_t)(v43 + 1);
          if (++v16 >= a4)
            goto LABEL_11;
        }
        v45 = *(unsigned int **)v41;
        v46 = (uint64_t)v43 - *(_QWORD *)v41;
        v47 = v46 >> 2;
        v48 = (v46 >> 2) + 1;
        if (v48 >> 62)
          sub_22352449C();
        v49 = v44 - (_QWORD)v45;
        if (v49 >> 1 > v48)
          v48 = v49 >> 1;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
          v50 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (!v50)
        {
          v51 = 0;
          v52 = (unsigned int *)(4 * v47);
          *(_DWORD *)(4 * v47) = v68;
          v53 = 4 * v47 + 4;
          v54 = (char *)v43 - (char *)v45;
          if (v43 == v45)
            goto LABEL_54;
LABEL_48:
          v55 = v54 - 4;
          if (v55 < 0x2C)
            goto LABEL_64;
          if ((unint64_t)((char *)v43 - &v51[v46]) < 0x20)
            goto LABEL_64;
          v56 = (v55 >> 2) + 1;
          v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
          v58 = &v43[v57 / 0xFFFFFFFFFFFFFFFCLL];
          v52 = (unsigned int *)((char *)v52 - v57);
          v59 = &v51[4 * v47 - 16];
          v60 = v43 - 4;
          v61 = v56 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v62 = *(_OWORD *)v60;
            *(v59 - 1) = *((_OWORD *)v60 - 1);
            *v59 = v62;
            v59 -= 2;
            v60 -= 8;
            v61 -= 8;
          }
          while (v61);
          v43 = v58;
          if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_64:
            do
            {
              v63 = *--v43;
              *--v52 = v63;
            }
            while (v43 != v45);
          }
          goto LABEL_54;
        }
        if (v50 >> 62)
LABEL_58:
          sub_223174E94();
        v51 = operator new(4 * v50);
        v52 = (unsigned int *)&v51[4 * v47];
        *v52 = v68;
        v53 = (uint64_t)(v52 + 1);
        v54 = (char *)v43 - (char *)v45;
        if (v43 != v45)
          goto LABEL_48;
LABEL_54:
        *(_QWORD *)v41 = v52;
        *v42 = v53;
        *(_QWORD *)(v41 + 16) = &v51[4 * v50];
        if (v45)
          operator delete(v45);
        v10 = v67;
        v17 = v70;
        *v42 = v53;
        ++v16;
      }
      while (v16 < a4);
LABEL_11:
      v14 = v66 + 1;
    }
    while (v66 != v65);
  }
}

void sub_223FB26DC(uint64_t a1@<X0>, char **a2@<X1>, _QWORD *a3@<X2>, char **a4@<X8>)
{
  __int128 v7;
  __int128 v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float32x2_t v33;
  float v34;
  float v35;
  BOOL v36;
  __int128 *v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  float32x4_t v43;
  float32x2_t v44;
  uint64_t v45;
  unsigned int v46;
  char *v47;
  float32x2_t v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  float *v88;
  int64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  char **v95;
  float v96;
  float v97;
  float v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  unsigned __int16 v107;
  unsigned int v108;
  size_t v109;
  int *v110;
  unsigned __int16 v111;
  unsigned __int16 v112;
  int *v113;
  int *v114;
  unsigned int v115;
  unsigned int v116;
  __int16 v117;
  unsigned int *v118;
  unsigned int *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int *v123;
  int64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  _BYTE *v129;
  int *v130;
  char *v131;
  uint64_t v132;
  int64_t v133;
  unint64_t v134;
  int *v135;
  int v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _OWORD *v140;
  int *v141;
  uint64_t v142;
  int *v143;
  float32x2_t *v144;
  float32x2_t *v145;
  uint64_t v146;
  uint64_t v147;
  float v148;
  BOOL v149;
  uint64_t v151;
  char *v152;
  char *v153;
  float *v154;
  unint64_t v155;
  uint64_t *v156;
  _QWORD *v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  float v163;
  uint64_t v164;
  _QWORD *v165;
  int32x2_t v166;
  float32x2_t v167;
  float32x2_t v168;
  int32x2_t v169;
  float **v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  float v174;
  unint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  BOOL v178;
  unint64_t v179;
  int v180;
  float v181;
  unsigned __int8 v182;
  float v183;
  float v184;
  float v185;
  float32x2_t v186;
  float32x2_t v187;
  float v188;
  float32x2_t v190;
  float32x2_t v191;
  float v192;
  float v193;
  float *v194;
  float *v195;
  float v196;
  float v197;
  unint64_t v198;
  unsigned __int16 v199;
  float *v200;
  float *v201;
  _WORD *v202;
  unint64_t v203;
  float32x4_t v204;
  float32x4_t v205;
  int8x16_t v206;
  __int32 *v207;
  int64x2_t v208;
  uint64_t v209;
  int64x2_t v210;
  int64x2_t v211;
  int64x2_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  int8x16_t v226;
  int8x16_t v227;
  float32x4_t v228;
  float32x4_t v229;
  int32x4_t v230;
  int8x16_t v231;
  int8x16_t v232;
  int8x16_t v233;
  int64x2_t v234;
  int32x4_t v235;
  int64x2_t v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float *v243;
  float *v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  unint64_t v251;
  unint64_t v252;
  char *v253;
  float *v254;
  float *v255;
  uint64_t v256;
  int v257;
  char *v258;
  char *v259;
  int v260;
  unint64_t v261;
  char *v262;
  float v263;
  float v264;
  unint64_t v265;
  char *v266;
  char *v267;
  uint64_t v268;
  char *v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  _BYTE *v275;
  uint64_t v276;
  char *v277;
  char *v278;
  unint64_t v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  char *v283;
  uint64_t v284;
  char *v285;
  unint64_t v286;
  unint64_t v287;
  _QWORD *v288;
  _QWORD *v289;
  unint64_t v290;
  char *v291;
  char *v292;
  char *v293;
  unint64_t v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  unint64_t v298;
  _QWORD *v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  float v303;
  float v304;
  BOOL v305;
  float v306;
  float v307;
  uint64_t v308;
  char *v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  char *v313;
  unint64_t v314;
  _BYTE *v315;
  char *v316;
  char *v317;
  unint64_t v318;
  char *v319;
  uint64_t v320;
  char *v321;
  char *v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  _OWORD *v326;
  char *v327;
  uint64_t v328;
  __int128 v329;
  unsigned __int8 v330;
  uint64_t v331;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  _QWORD *v336;
  unint64_t v337;
  unint64_t v338;
  char **v339;
  _QWORD *v340;
  float v341;
  char *v342;
  _BYTE *v343;
  uint64_t v344;
  float *v345;
  char *v346;
  float32x4_t v347;
  unsigned int v348;
  float *v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  unsigned int v353;
  unsigned int v354;
  void *v355;
  unsigned int *v356;
  uint64_t v357;
  void *__p;
  unint64_t v359;
  int *v360;

  kdebug_trace();
  sub_223FB46D4(&__p);
  v339 = a2;
  v340 = a3;
  v351 = a1;
  if (**((int **)__p + 7) <= 1)
  {
    v12 = atomic_load((unsigned __int8 *)&qword_2540CE488);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE488))
    {
      qword_2540CE480[0] = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_HoughLineDetect");
      __cxa_guard_release(&qword_2540CE488);
    }
    v13 = qword_2540CE480[0];
    *(_BYTE *)(qword_2540CE480[0] + 16) = 0;
    *(_QWORD *)(v13 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v13 = std::chrono::steady_clock::now();
    *(_BYTE *)(v13 + 16) = 1;
  }
  v15 = *(char **)(a1 + 56);
  v14 = *(char **)(a1 + 64);
  if (v15 != v14)
  {
    v16 = v14 - v15 - 24;
    v17 = *(char **)(a1 + 56);
    if (v16 < 0x18)
      goto LABEL_398;
    v18 = v16 / 0x18 + 1;
    v17 = &v15[24 * (v18 & 0x1FFFFFFFFFFFFFFELL)];
    v19 = (uint64_t *)(v15 + 24);
    v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v21 = *v19;
      *(v19 - 2) = *(v19 - 3);
      v19[1] = v21;
      v19 += 6;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_398:
      do
      {
        *((_QWORD *)v17 + 1) = *(_QWORD *)v17;
        v17 += 24;
      }
      while (v17 != v14);
    }
  }
  v23 = *(char **)(a1 + 80);
  v22 = *(char **)(a1 + 88);
  if (v23 != v22)
  {
    v24 = v22 - v23 - 24;
    v25 = *(char **)(a1 + 80);
    if (v24 < 0x18)
      goto LABEL_399;
    v26 = v24 / 0x18 + 1;
    v25 = &v23[24 * (v26 & 0x1FFFFFFFFFFFFFFELL)];
    v27 = (uint64_t *)(v23 + 24);
    v28 = v26 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v29 = *v27;
      *(v27 - 2) = *(v27 - 3);
      v27[1] = v29;
      v27 += 6;
      v28 -= 2;
    }
    while (v28);
    if (v26 != (v26 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_399:
      do
      {
        *((_QWORD *)v25 + 1) = *(_QWORD *)v25;
        v25 += 24;
      }
      while (v25 != v22);
    }
  }
  v31 = *a3;
  v30 = a3[1];
  if (*a3 == v30)
    goto LABEL_103;
  v32 = *(float *)(a1 + 108);
  v344 = a3[1];
  do
  {
    v33 = *(float32x2_t *)v31;
    *(float32x2_t *)&v7 = vsub_f32(*(float32x2_t *)(v31 + 8), *(float32x2_t *)v31);
    *(int32x2_t *)v9.f32 = vdup_lane_s32(*(int32x2_t *)&v7, 1);
    *(float32x2_t *)&v8 = vmla_lane_f32(vmul_f32(*(float32x2_t *)&v7, *(float32x2_t *)&v7), *(float32x2_t *)v9.f32, *(float32x2_t *)&v7, 1);
    if (*(float *)&v8 >= v32)
      goto LABEL_19;
    v34 = sqrtf(*(float *)&v8);
    v35 = fabsf(v34);
    v36 = v34 != 0.0 && v35 > 0.000001;
    if (v36)
    {
      v9 = *(float32x4_t *)(v31 + 16);
      v10 = *(float32x4_t *)(v31 + 32);
      v42 = *(unsigned __int16 *)(v31 + 48);
      v359 = 0;
      v360 = 0;
      __p = 0;
      if (v42)
      {
        v43.i64[0] = 0x3F0000003F000000;
        v43.i64[1] = 0x3F0000003F000000;
        v347 = vmulq_f32(vaddq_f32(v9, v10), v43);
        v341 = v34 / (float)v42;
        v44 = vmul_n_f32(*(float32x2_t *)&v7, 1.0 / v34);
        v45 = 24 * v42;
        v39 = (char *)operator new(24 * v42);
        v46 = 0;
        v47 = &v39[v45];
        v48 = vmul_n_f32(v44, v341);
        v49 = v39;
        do
        {
          while (v49 < v47)
          {
            *(float32x2_t *)v49 = v33;
            DWORD1(v7) = v347.i32[1];
            *(float32x4_t *)(v49 + 8) = v347;
            v40 = v49 + 24;
            v33 = vadd_f32(v48, v33);
            ++v46;
            v49 += 24;
            if (v46 >= *(unsigned __int16 *)(v31 + 48))
              goto LABEL_45;
          }
          v50 = 0xAAAAAAAAAAAAAAABLL * ((v49 - v39) >> 3) + 1;
          if (v50 > 0xAAAAAAAAAAAAAAALL)
          {
            v359 = (unint64_t)v49;
            v360 = (int *)v47;
            __p = v39;
            sub_22316E078();
          }
          if (0x5555555555555556 * ((v47 - v39) >> 3) > v50)
            v50 = 0x5555555555555556 * ((v47 - v39) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v47 - v39) >> 3) >= 0x555555555555555)
            v51 = 0xAAAAAAAAAAAAAAALL;
          else
            v51 = v50;
          if (v51 > 0xAAAAAAAAAAAAAAALL)
          {
            v360 = (int *)v47;
            __p = v39;
            sub_223174E94();
          }
          v52 = (char *)operator new(24 * v51);
          v53 = &v52[8 * ((v49 - v39) >> 3)];
          v47 = &v52[24 * v51];
          *(float32x2_t *)v53 = v33;
          *(float32x4_t *)(v53 + 8) = v347;
          v40 = v53 + 24;
          if (v49 == v39)
            goto LABEL_43;
          do
          {
            v54 = *((_QWORD *)v49 - 3);
            v49 -= 24;
            *((_QWORD *)v53 - 3) = v54;
            v53 -= 24;
            v7 = *(_OWORD *)(v49 + 8);
            *(_OWORD *)(v53 + 8) = v7;
          }
          while (v49 != v39);
          if (v39)
LABEL_43:
            operator delete(v39);
          v39 = v53;
          a3 = v340;
          v33 = vadd_f32(v48, v33);
          ++v46;
          v49 = v40;
        }
        while (v46 < *(unsigned __int16 *)(v31 + 48));
LABEL_45:
        if (v40 - v39 < 1)
          goto LABEL_88;
        v55 = 0xAAAAAAAAAAAAAAABLL * ((v40 - v39) >> 3);
        v57 = *v339;
        v56 = (unint64_t)v339[1];
        v58 = (uint64_t)(v56 - (_QWORD)*v339) / 24;
        v59 = (uint64_t)&(*v339)[24 * v58];
        v60 = v339[2];
        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v60[-v56] >> 3)) < v55)
        {
          v61 = v58 - 0x5555555555555555 * ((v40 - v39) >> 3);
          if (v61 > 0xAAAAAAAAAAAAAAALL)
            sub_22316E078();
          v62 = 0xAAAAAAAAAAAAAAABLL * ((v60 - v57) >> 3);
          if (2 * v62 > v61)
            v61 = 2 * v62;
          if (v62 >= 0x555555555555555)
            v63 = 0xAAAAAAAAAAAAAAALL;
          else
            v63 = v61;
          if (v63)
          {
            if (v63 > 0xAAAAAAAAAAAAAAALL)
              sub_223174E94();
            v64 = (char *)operator new(24 * v63);
          }
          else
          {
            v64 = 0;
          }
          v75 = &v64[24 * v58];
          v76 = &v75[24 * v55];
          v77 = v75;
          v78 = v39;
          do
          {
            *(_QWORD *)v77 = *(_QWORD *)v78;
            v7 = *(_OWORD *)(v78 + 8);
            *(_OWORD *)(v77 + 8) = v7;
            v77 += 24;
            v78 += 24;
          }
          while (v77 != v76);
          v79 = *v339;
          if (*v339 != (char *)v59)
          {
            v80 = 24 * v58;
            v81 = v64;
            do
            {
              v82 = &v81[v80];
              *((_QWORD *)v82 - 3) = *(_QWORD *)&v57[v80 - 24];
              v7 = *(_OWORD *)&v57[v80 - 16];
              *((_OWORD *)v82 - 1) = v7;
              v57 -= 24;
              v81 -= 24;
            }
            while (&v57[v80] != v79);
            v75 = &v81[24 * v58];
          }
          v83 = v339[1];
          if (v83 == (char *)v59)
          {
            a3 = v340;
          }
          else
          {
            a3 = v340;
            do
            {
              *(_QWORD *)v76 = *(_QWORD *)v59;
              v7 = *(_OWORD *)(v59 + 8);
              *(_OWORD *)(v76 + 8) = v7;
              v76 += 24;
              v59 += 24;
            }
            while ((char *)v59 != v83);
          }
          v84 = *v339;
          *v339 = v75;
          v339[1] = v76;
          v339[2] = &v64[24 * v63];
          if (v84)
            operator delete(v84);
          goto LABEL_88;
        }
        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - v59) >> 3)) >= v55)
        {
          v65 = &v39[8 * ((v40 - v39) >> 3)];
          v66 = v339[1];
          a3 = v340;
          v69 = 8 * ((v40 - v39) >> 3);
          v70 = v56 - v69;
          v71 = v66;
          if (v56 - v69 >= v56)
          {
LABEL_65:
            v339[1] = v71;
            if (v66 != (char *)(v59 + v69))
            {
              v72 = v66 - 24;
              v73 = 8 * ((uint64_t)&v66[-v59 - v69] >> 3);
              do
              {
                *(_QWORD *)v72 = *(_QWORD *)(v59 + v73 - 24);
                v7 = *(_OWORD *)(v59 + v73 - 16);
                *(_OWORD *)(v72 + 8) = v7;
                v72 -= 24;
                v73 -= 24;
              }
              while (v73);
            }
            if (v65 != v39)
            {
              v74 = v39;
              do
              {
                *(_QWORD *)v59 = *(_QWORD *)v74;
                v7 = *(_OWORD *)(v74 + 8);
                *(_OWORD *)(v59 + 8) = v7;
                v74 += 24;
                v59 += 24;
              }
              while (v74 != v65);
            }
            goto LABEL_88;
          }
        }
        else
        {
          v65 = &v39[8 * ((uint64_t)(v56 - v59) >> 3)];
          a3 = v340;
          v66 = v339[1];
          if (v65 != v40)
          {
            v67 = &v39[8 * ((uint64_t)(v56 - v59) >> 3)];
            v68 = v339[1];
            do
            {
              *(_QWORD *)v68 = *(_QWORD *)v67;
              v7 = *(_OWORD *)(v67 + 8);
              *(_OWORD *)(v68 + 8) = v7;
              v66 += 24;
              v67 += 24;
              v68 += 24;
            }
            while (v67 != v40);
          }
          v339[1] = v66;
          if ((uint64_t)(v56 - v59) < 1)
            goto LABEL_88;
          v69 = 8 * ((v40 - v39) >> 3);
          v70 = (unint64_t)&v66[-v69];
          v71 = v66;
          if ((unint64_t)&v66[-v69] >= v56)
            goto LABEL_65;
        }
        do
        {
          *(_QWORD *)v71 = *(_QWORD *)v70;
          v7 = *(_OWORD *)(v70 + 8);
          *(_OWORD *)(v71 + 8) = v7;
          v71 += 24;
          v70 += 24;
        }
        while (v70 < v56);
        goto LABEL_65;
      }
    }
    else if (*(_WORD *)(v31 + 48))
    {
      v37 = (__int128 *)(v31 + 16);
      v38 = 24 * *(unsigned __int16 *)(v31 + 48);
      v39 = (char *)operator new(v38);
      __p = v39;
      v359 = (unint64_t)v39;
      v40 = &v39[v38];
      v41 = v39;
      do
      {
        *(float32x2_t *)v41 = v33;
        v7 = *v37;
        *(_OWORD *)(v41 + 8) = *v37;
        v41 += 24;
      }
      while (v41 != v40);
      goto LABEL_45;
    }
    v39 = 0;
LABEL_88:
    if (v39)
      operator delete(v39);
    v30 = v344;
LABEL_19:
    v31 += 52;
  }
  while (v31 != v30);
  v31 = *a3;
  v85 = a3[1];
  if (*a3 != v85)
  {
    while (1)
    {
      *(float32x2_t *)&v7 = vsub_f32(*(float32x2_t *)(v31 + 8), *(float32x2_t *)v31);
      *(int32x2_t *)&v8 = vdup_lane_s32(*(int32x2_t *)&v7, 1);
      *(float32x2_t *)v9.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)&v7, *(float32x2_t *)&v7), *(float32x2_t *)&v8, *(float32x2_t *)&v7, 1);
      if (v9.f32[0] < v32)
        break;
      v31 += 52;
      if (v31 == v85)
        goto LABEL_102;
    }
    if (v31 == v85 || (v86 = v31 + 52, v31 + 52 == v85))
    {
      if (v31 != v85)
      {
LABEL_97:
        a3[1] = v31;
        goto LABEL_103;
      }
    }
    else
    {
      do
      {
        *(_QWORD *)&v7 = *(_QWORD *)v86;
        *(float32x2_t *)&v8 = vsub_f32(*(float32x2_t *)(v86 + 8), *(float32x2_t *)v86);
        *(int32x2_t *)v9.f32 = vdup_lane_s32(*(int32x2_t *)&v8, 1);
        *(float32x2_t *)v10.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)&v8, *(float32x2_t *)&v8), *(float32x2_t *)v9.f32, *(float32x2_t *)&v8, 1);
        if (v10.f32[0] >= v32)
        {
          *(_QWORD *)v31 = v7;
          *(_QWORD *)(v31 + 8) = *(_QWORD *)(v86 + 8);
          *(_OWORD *)(v31 + 16) = *(_OWORD *)(v86 + 16);
          v7 = *(_OWORD *)(v86 + 32);
          *(_OWORD *)(v31 + 32) = v7;
          *(_WORD *)(v31 + 48) = *(_WORD *)(v86 + 48);
          v31 += 52;
        }
        v86 += 52;
      }
      while (v86 != v85);
      v85 = a3[1];
      if (v31 != v85)
        goto LABEL_97;
    }
LABEL_102:
    v31 = v85;
  }
LABEL_103:
  v88 = (float *)*v339;
  v87 = (uint64_t *)v339[1];
  v89 = (char *)v87 - *v339;
  v90 = 0xAAAAAAAAAAAAAAABLL * (v89 >> 3);
  if (v90 <= 1 && v31 == *v340)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_366;
  }
  if (v88 != (float *)v87)
  {
    v91 = ((v90 - 1) * v90) >> 1;
    if (*(_DWORD *)(a1 + 32) < v91)
      LODWORD(v91) = *(_DWORD *)(a1 + 32);
    v348 = v91;
    if (v90 > 0xAAAAAAAAAAAAAAALL)
      sub_223FB4974();
    v92 = (char *)operator new(v89);
    v93 = &v92[24 * v90];
    v94 = v92;
    v95 = v339;
    do
    {
      while (1)
      {
        v96 = sqrtf(v88[2] + v88[2]);
        v97 = 0.0;
        if (v96 != 0.0 && v96 > 0.000001)
          v97 = (float)(v88[4] + v88[4]) / v96;
        v99 = sqrtf((float)(v88[5] + v88[5]) - (float)(v97 * v97));
        v100 = *(_QWORD *)v88;
        if (v94 >= v93)
          break;
        *(_QWORD *)v94 = v100;
        *((float *)v94 + 2) = v96;
        *((float *)v94 + 3) = v97;
        *((_DWORD *)v94 + 4) = 0;
        *((float *)v94 + 5) = v99;
        v88 += 6;
        v94 += 24;
        if (v88 == (float *)v87)
          goto LABEL_130;
      }
      v101 = 0xAAAAAAAAAAAAAAABLL * ((v94 - v92) >> 3) + 1;
      if (v101 > 0xAAAAAAAAAAAAAAALL)
        sub_223FB4974();
      if (0x5555555555555556 * ((v93 - v92) >> 3) > v101)
        v101 = 0x5555555555555556 * ((v93 - v92) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v93 - v92) >> 3) >= 0x555555555555555)
        v102 = 0xAAAAAAAAAAAAAAALL;
      else
        v102 = v101;
      if (v102 > 0xAAAAAAAAAAAAAAALL)
        sub_223174E94();
      v103 = (char *)operator new(24 * v102);
      v104 = &v103[8 * ((v94 - v92) >> 3)];
      *(_QWORD *)v104 = v100;
      *((float *)v104 + 2) = v96;
      *((float *)v104 + 3) = v97;
      v93 = &v103[24 * v102];
      *((_DWORD *)v104 + 4) = 0;
      *((float *)v104 + 5) = v99;
      v105 = v104 + 24;
      if (v94 == v92)
        goto LABEL_128;
      do
      {
        v106 = *((_QWORD *)v94 - 3);
        v94 -= 24;
        *((_QWORD *)v104 - 3) = v106;
        v104 -= 24;
        v7 = *(_OWORD *)(v94 + 8);
        *(_OWORD *)(v104 + 8) = v7;
      }
      while (v94 != v92);
      if (v92)
LABEL_128:
        operator delete(v92);
      v92 = v104;
      v95 = v339;
      v88 += 6;
      v94 = v105;
    }
    while (v88 != (float *)v87);
LABEL_130:
    v107 = -21845 * ((v95[1] - *v95) >> 3);
    if (v107 > 0x12CuLL)
    {
      if ((unsigned __int16)(-21845 * ((v95[1] - *v95) >> 3)) >= 2u && v348)
      {
        v109 = 4 * v348;
        v110 = (int *)operator new(v109);
        v111 = v107 - 1;
        v112 = v107 - 2;
        bzero(v110, v109);
        v113 = &v110[v109 / 4];
        v114 = v110;
        do
        {
          v115 = sub_223FB47C8(a1 + 120, 0, v111);
          v116 = sub_223FB47C8(a1 + 120, 0, v112);
          if (v116 < v115)
            v117 = v116;
          else
            v117 = v116 + 1;
          *(_WORD *)v114 = v115;
          *((_WORD *)v114++ + 1) = v117;
        }
        while (v114 != v113);
        goto LABEL_185;
      }
    }
    else
    {
      v354 = v348;
      if (!v107)
      {
        v110 = 0;
        v113 = 0;
        goto LABEL_185;
      }
      v108 = (v107 - 1) * v107;
      v353 = v108 >> 1;
      if (v108 >> 1 < v348
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Random/include/Essentials/Random/Sample.h", 195, (uint64_t)"T{0} <= k && k <= n", 19, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      if (v108 > 1)
      {
        if (v348)
          sub_223CCFE58(a1 + 120, &v353, &v354, (int32x4_t **)&v355);
        else
          sub_223CD005C(a1 + 120, &v353, &v354, (uint64_t)&v355);
      }
      else
      {
        v355 = 0;
        v356 = 0;
        v357 = 0;
      }
      v119 = (unsigned int *)v355;
      v118 = v356;
      __p = 0;
      v359 = 0;
      v360 = 0;
      v120 = (char *)v356 - (_BYTE *)v355;
      if (v356 != v355)
      {
        if (v120 < 0)
          sub_22316E078();
        v113 = (int *)operator new((char *)v356 - (_BYTE *)v355);
        __p = v113;
        v359 = (unint64_t)v113;
        v360 = &v113[v120 >> 2];
        while (1)
        {
          while (1)
          {
            v121 = *v119;
            *(double *)&v7 = (sqrt((double)((8 * v121) | 1uLL)) + 1.0) * 0.5;
            v122 = (unsigned __int16)(unint64_t)*(double *)&v7 | ((unsigned __int16)(v121
                                                                                          - ((((unint64_t)*(double *)&v7
                                                                                             - 1)
                                                                                            * (unint64_t)*(double *)&v7) >> 1)) << 16);
            if (v113 >= v360)
              break;
            *v113++ = v122;
            v359 = (unint64_t)v113;
            if (++v119 == v118)
              goto LABEL_183;
          }
          v123 = (int *)__p;
          v124 = (char *)v113 - (_BYTE *)__p;
          v125 = ((char *)v113 - (_BYTE *)__p) >> 2;
          v126 = v125 + 1;
          if ((unint64_t)(v125 + 1) >> 62)
            sub_22316E078();
          v127 = (char *)v360 - (_BYTE *)__p;
          if (((char *)v360 - (_BYTE *)__p) >> 1 > v126)
            v126 = v127 >> 1;
          if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFFCLL)
            v128 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v128 = v126;
          if (v128)
          {
            if (v128 >> 62)
              sub_223174E94();
            v129 = operator new(4 * v128);
            v130 = (int *)&v129[4 * v125];
            v131 = &v129[4 * v128];
            *v130 = v122;
            v132 = (uint64_t)(v130 + 1);
            v133 = (char *)v113 - (char *)v123;
            if (v113 == v123)
            {
LABEL_170:
              __p = v130;
              v360 = (int *)v131;
              goto LABEL_171;
            }
          }
          else
          {
            v129 = 0;
            v130 = (int *)(4 * v125);
            v131 = 0;
            *(_DWORD *)(4 * v125) = v122;
            v132 = 4 * v125 + 4;
            v133 = (char *)v113 - (char *)v123;
            if (v113 == v123)
              goto LABEL_170;
          }
          v134 = v133 - 4;
          if (v134 >= 0xBC)
          {
            v137 = ((char *)(v113 - 1) - (char *)v123) & 0xFFFFFFFFFFFFFFFCLL;
            if (&v129[v124 - 4 - v137] > &v129[v124 - 4])
            {
              v135 = v113;
            }
            else if ((int *)((char *)v113 - v137 - 4) > v113 - 1)
            {
              v135 = v113;
            }
            else if ((unint64_t)((char *)v113 - v129 - v124) >= 0x20)
            {
              v138 = (v134 >> 2) + 1;
              v139 = 4 * (v138 & 0x7FFFFFFFFFFFFFF8);
              v135 = &v113[v139 / 0xFFFFFFFFFFFFFFFCLL];
              v130 = (int *)((char *)v130 - v139);
              v140 = &v129[4 * v125 - 16];
              v141 = v113 - 4;
              v142 = v138 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v8 = *((_OWORD *)v141 - 1);
                v7 = *(_OWORD *)v141;
                *(v140 - 1) = v8;
                *v140 = v7;
                v140 -= 2;
                v141 -= 8;
                v142 -= 8;
              }
              while (v142);
              if (v138 == (v138 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_166;
            }
            else
            {
              v135 = v113;
            }
          }
          else
          {
            v135 = v113;
          }
          do
          {
            v136 = *--v135;
            *--v130 = v136;
          }
          while (v135 != v123);
LABEL_166:
          v113 = (int *)__p;
          __p = v130;
          v360 = (int *)v131;
          if (v113)
          {
LABEL_171:
            operator delete(v113);
            v113 = (int *)v132;
            v359 = v132;
            if (++v119 == v118)
            {
LABEL_183:
              v110 = (int *)__p;
              v119 = (unsigned int *)v355;
              if (v355)
                goto LABEL_184;
              goto LABEL_185;
            }
          }
          else
          {
            v113 = (int *)v132;
            v359 = v132;
            if (++v119 == v118)
              goto LABEL_183;
          }
        }
      }
      v113 = 0;
      v110 = 0;
      if (v355)
      {
LABEL_184:
        v356 = v119;
        operator delete(v119);
      }
LABEL_185:
      if (v110 != v113)
      {
        v143 = v110;
        do
        {
          v144 = (float32x2_t *)&v92[24 * *(unsigned __int16 *)v143];
          v145 = (float32x2_t *)&v92[24 * *((unsigned __int16 *)v143 + 1)];
          *(float32x2_t *)&v8 = vsub_f32(*v144, *v145);
          *(int32x2_t *)v9.f32 = vdup_lane_s32(*(int32x2_t *)&v8, 1);
          *(float32x2_t *)&v7 = vmla_lane_f32(vmul_f32(*(float32x2_t *)&v8, *(float32x2_t *)&v8), *(float32x2_t *)v9.f32, *(float32x2_t *)&v8, 1);
          if (*(float *)&v7 >= *(float *)(a1 + 108))
          {
            LODWORD(v8) = *(_DWORD *)(a1 + 112);
            if (*(float *)&v7 <= *(float *)&v8)
              sub_223FB22B8(a1, (uint64_t)v144, (uint64_t)v145, 1u, *(double *)&v7, *(double *)&v8, v9, *(double *)v10.i64, v11);
          }
          ++v143;
        }
        while (v143 != v113);
      }
      if (v110)
        operator delete(v110);
    }
    if (v92)
      operator delete(v92);
  }
  v146 = *v340;
  v147 = v340[1];
  if (*v340 != v147)
  {
    do
    {
      *(float *)&v8 = sqrtf(*(float *)(v146 + 16) + *(float *)(v146 + 16));
      LODWORD(v7) = 0;
      v149 = *(float *)&v8 != 0.0 && *(float *)&v8 > 0.000001;
      v9.i32[0] = 0;
      if (v149)
        v9.f32[0] = (float)(*(float *)(v146 + 24) + *(float *)(v146 + 24)) / *(float *)&v8;
      v10.f32[0] = sqrtf(*(float *)(v146 + 32) + *(float *)(v146 + 32));
      if (v10.f32[0] != 0.0 && v10.f32[0] > 0.000001)
        *(float *)&v7 = (float)(*(float *)(v146 + 40) + *(float *)(v146 + 40)) / v10.f32[0];
      v11.f32[0] = sqrtf((float)(*(float *)(v146 + 28) + *(float *)(v146 + 28)) - (float)(v9.f32[0] * v9.f32[0]));
      v148 = sqrtf((float)(*(float *)(v146 + 44) + *(float *)(v146 + 44)) - (float)(*(float *)&v7 * *(float *)&v7));
      __p = *(void **)v146;
      v359 = __PAIR64__(v9.u32[0], v8);
      LODWORD(v360) = 0;
      HIDWORD(v360) = v11.i32[0];
      v355 = *(void **)(v146 + 8);
      v356 = (unsigned int *)__PAIR64__(v7, v10.u32[0]);
      LODWORD(v357) = 0;
      *((float *)&v357 + 1) = v148;
      sub_223FB22B8(a1, (uint64_t)&__p, (uint64_t)&v355, *(unsigned __int16 *)(v146 + 48), *(double *)&v7, *(double *)&v8, v9, *(double *)v10.i64, v11);
      v146 += 52;
    }
    while (v146 != v147);
  }
  v151 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 64) == v151)
  {
    v152 = 0;
    v275 = 0;
    v285 = 0;
    v263 = *(float *)(a1 + 40);
    v264 = *(float *)(a1 + 44);
    v265 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v152 = 0;
    v342 = 0;
    v153 = 0;
    v154 = 0;
    v155 = 0;
    v156 = v340;
    do
    {
      v157 = (_QWORD *)(v151 + 24 * v155);
      v158 = *v157;
      v336 = v157;
      v160 = v157[1];
      v159 = v157 + 1;
      v333 = v155;
      if (v158 != v160)
      {
        v161 = a1;
        v162 = v153;
        v163 = *(float *)v161;
        v164 = *(_QWORD *)(v161 + 80);
        std::__sort<std::__less<int,int> &,int *>();
        v165 = (_QWORD *)(v164 + 24 * v155);
        std::__sort<std::__less<int,int> &,int *>();
        v170 = (float **)v339;
        if (*v159 != *v336)
        {
          v171 = 0;
          v172 = 0;
          v173 = 0;
          v174 = v163 * (float)v155;
          v175 = (uint64_t)(*v159 - *v336) >> 2;
          v176 = &qword_2540CE480[(unint64_t)v174];
          v345 = (float *)v176 + 15;
          v349 = (float *)(v176 + 7);
          v153 = v162;
          a1 = v351;
          v334 = v175;
          v335 = 0;
          while (v172 < v175)
          {
            v177 = *(unsigned __int16 *)(a1 + 8);
            if (*(_DWORD *)(*v336 + 4 * v172) > *(_DWORD *)(*v165 + 4 * v171))
              goto LABEL_226;
            v178 = ++v173 == v177;
            v179 = v335;
            if (v178)
              v179 = v172;
            v335 = v179;
            if (++v172 == v175)
            {
LABEL_217:
              if (v173 < *(unsigned __int16 *)(a1 + 8))
                goto LABEL_213;
            }
LABEL_218:
            if (v171 >= v175)
              goto LABEL_213;
          }
          v177 = *(unsigned __int16 *)(a1 + 8);
LABEL_226:
          v337 = v173;
          v338 = v172;
          if (v173 != v177 || (v180 = *(_DWORD *)(*v336 + 4 * v335), v180 > *(_DWORD *)(*v165 + 4 * v171)))
          {
LABEL_228:
            v172 = v338;
            v173 = v337 - 1;
            ++v171;
            v175 = v334;
            if (v338 == v334)
              goto LABEL_217;
            goto LABEL_218;
          }
          while (2)
          {
            v181 = *(float *)(a1 + 4);
            v182 = atomic_load((unsigned __int8 *)&qword_2540CE4A0);
            if ((v182 & 1) == 0)
            {
              v259 = v153;
              v260 = __cxa_guard_acquire(&qword_2540CE4A0);
              v153 = v259;
              if (v260)
              {
                bzero(&dword_2540CE4B8, 0x5A0uLL);
                v261 = 0;
                v262 = (char *)&unk_2540CE4BC;
                do
                {
                  *(__float2 *)(v262 - 4) = __sincosf_stret((float)v261++ * 0.017453);
                  v262 += 8;
                }
                while (v261 != 180);
                __cxa_guard_release(&qword_2540CE4A0);
                v170 = (float **)v339;
                v156 = v340;
                v153 = v259;
              }
            }
            v183 = v181 * (float)v180;
            v184 = *v345;
            *(float *)v166.i32 = v183 * *v345;
            v185 = *v349;
            v167.f32[0] = v183 * *v349;
            v186.i32[0] = v166.i32[0];
            v186.f32[1] = v167.f32[0];
            v168.f32[0] = *(float *)v166.i32 * *(float *)v166.i32;
            v187 = vmul_n_f32(v186, 1.0 / sqrtf(vmla_f32(v168, v167, v167).f32[0]));
            v188 = fabsf(v183);
            if (v183 != 0.0 && v188 > 0.000001)
            {
              v184 = v187.f32[0];
              v185 = v187.f32[1];
            }
            v190.f32[0] = -v185;
            v190.f32[1] = v184;
            v191 = vadd_f32(v186, v190);
            v192 = v167.f32[0] * v167.f32[0];
            v193 = *(float *)v166.i32 * v167.f32[0];
            v195 = *v170;
            v194 = v170[1];
            if (*v170 == v194)
            {
              v199 = 0;
              a1 = v351;
              v202 = (_WORD *)*v156;
              v201 = (float *)v156[1];
              if ((float *)*v156 != v201)
                goto LABEL_253;
            }
            else
            {
              v196 = v191.f32[0] - *(float *)v166.i32;
              v197 = v191.f32[1] - v167.f32[0];
              a1 = v351;
              v169.i32[0] = *(_DWORD *)(v351 + 116);
              v198 = (char *)v194 - (char *)v195 - 24;
              if (v198 >= 0xA8)
              {
                v203 = v198 / 0x18 + 1;
                v200 = &v195[6 * (v203 & 0x1FFFFFFFFFFFFFF8)];
                v204 = (float32x4_t)vdupq_lane_s32((int32x2_t)v167, 0);
                v205 = (float32x4_t)vdupq_lane_s32(v166, 0);
                v206 = (int8x16_t)vdupq_lane_s32(v169, 0);
                v207 = (__int32 *)(v195 + 24);
                v208 = 0uLL;
                v209 = v203 & 0x1FFFFFFFFFFFFFF8;
                v210 = 0uLL;
                v211 = 0uLL;
                v212 = 0uLL;
                do
                {
                  v213.i32[0] = *(v207 - 24);
                  v214.i32[0] = *(v207 - 23);
                  v214.i32[1] = *(v207 - 17);
                  v214.i32[2] = *(v207 - 11);
                  v215.i32[0] = *v207;
                  v216.i32[0] = v207[1];
                  v216.i32[1] = v207[7];
                  v216.i32[2] = v207[13];
                  v213.i32[1] = *(v207 - 18);
                  v215.i32[1] = v207[6];
                  v213.i32[2] = *(v207 - 12);
                  v215.i32[2] = v207[12];
                  v214.i32[3] = *(v207 - 5);
                  v216.i32[3] = v207[19];
                  v217.i32[0] = *(v207 - 22);
                  v218.i32[0] = *(v207 - 21);
                  v217.i32[1] = *(v207 - 16);
                  v213.i32[3] = *(v207 - 6);
                  v217.i32[2] = *(v207 - 10);
                  v219.i32[0] = v207[2];
                  v220.i32[0] = v207[3];
                  v217.i32[3] = *(v207 - 4);
                  v219.i32[1] = v207[8];
                  v219.i32[2] = v207[14];
                  v219.i32[3] = v207[20];
                  v221.i32[0] = *(v207 - 20);
                  v222.i32[0] = *(v207 - 19);
                  v221.i32[1] = *(v207 - 14);
                  v221.i32[2] = *(v207 - 8);
                  v221.i32[3] = *(v207 - 2);
                  v223.i32[0] = v207[4];
                  v224.i32[0] = v207[5];
                  v223.i32[1] = v207[10];
                  v223.i32[2] = v207[16];
                  v223.i32[3] = v207[22];
                  v215.i32[3] = v207[18];
                  v218.i32[1] = *(v207 - 15);
                  v218.i32[2] = *(v207 - 9);
                  v218.i32[3] = *(v207 - 3);
                  v220.i32[1] = v207[9];
                  v220.i32[2] = v207[15];
                  v220.i32[3] = v207[21];
                  v225 = vsubq_f32(vmulq_n_f32(vsubq_f32(v204, v214), v196), vmulq_n_f32(vsubq_f32(v205, v213), v197));
                  v222.i32[1] = *(v207 - 13);
                  v222.i32[2] = *(v207 - 7);
                  v222.i32[3] = *(v207 - 1);
                  v224.i32[1] = v207[11];
                  v224.i32[2] = v207[17];
                  v226 = (int8x16_t)vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v217, v168.f32[0]), vmulq_n_f32(v221, v193)), vmulq_n_f32(v218, v193)), vmulq_n_f32(v222, v192));
                  v224.i32[3] = v207[23];
                  v227 = (int8x16_t)vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v219, v168.f32[0]), vmulq_n_f32(v223, v193)), vmulq_n_f32(v220, v193)), vmulq_n_f32(v224, v192));
                  v228 = vsubq_f32(vmulq_n_f32(vsubq_f32(v204, v216), v196), vmulq_n_f32(vsubq_f32(v205, v215), v197));
                  v229 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v206, (float32x4_t)v227), v206, v227);
                  v230 = vcgeq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v206, (float32x4_t)v226), v206, v226), vmulq_f32(v225, v225));
                  v231.i64[0] = v230.u32[0];
                  v231.i64[1] = v230.u32[1];
                  v232 = v231;
                  v233 = (int8x16_t)vdupq_n_s64(1uLL);
                  v231.i64[0] = v230.u32[2];
                  v231.i64[1] = v230.u32[3];
                  v234 = (int64x2_t)vandq_s8(v231, v233);
                  v235 = vcgeq_f32(v229, vmulq_f32(v228, v228));
                  v231.i64[0] = v235.u32[0];
                  v231.i64[1] = v235.u32[1];
                  v236 = (int64x2_t)vandq_s8(v231, v233);
                  v231.i64[0] = v235.u32[2];
                  v231.i64[1] = v235.u32[3];
                  v210 = vaddq_s64(v210, v234);
                  v208 = vaddq_s64(v208, (int64x2_t)vandq_s8(v232, v233));
                  v212 = vaddq_s64(v212, (int64x2_t)vandq_s8(v231, v233));
                  v211 = vaddq_s64(v211, v236);
                  v207 += 48;
                  v209 -= 8;
                }
                while (v209);
                v199 = vaddvq_s64(vaddq_s64(vaddq_s64(v211, v208), vaddq_s64(v212, v210)));
                a1 = v351;
                if (v203 != (v203 & 0x1FFFFFFFFFFFFFF8))
                  goto LABEL_247;
              }
              else
              {
                v199 = 0;
                v200 = *v170;
                do
                {
LABEL_247:
                  v237 = (float)(v196 * (float)(v167.f32[0] - v200[1]))
                       - (float)(v197 * (float)(*(float *)v166.i32 - *v200));
                  v238 = (float)((float)((float)(v168.f32[0] * v200[2]) + (float)(v193 * v200[4]))
                               + (float)(v193 * v200[3]))
                       + (float)(v192 * v200[5]);
                  v239 = v237 * v237;
                  if (v238 < *(float *)v169.i32)
                    v238 = *(float *)(v351 + 116);
                  if (v239 <= v238)
                    ++v199;
                  v200 += 6;
                }
                while (v200 != v194);
              }
              v202 = (_WORD *)*v156;
              v201 = (float *)v156[1];
              if ((float *)*v156 != v201)
              {
LABEL_253:
                v240 = v191.f32[0] - *(float *)v166.i32;
                v241 = v191.f32[1] - v167.f32[0];
                v242 = *(float *)(a1 + 116);
                v243 = (float *)(v202 + 24);
                do
                {
                  v244 = v243 - 12;
                  v245 = (float)(v240 * (float)(v167.f32[0] - *(v243 - 11)))
                       - (float)(v241 * (float)(*(float *)v166.i32 - *(v243 - 12)));
                  v246 = (float)(v192 * *(v243 - 5))
                       + (float)((float)(v193 * *(v243 - 7))
                               + (float)((float)(v168.f32[0] * *(v243 - 8)) + (float)(v193 * *(v243 - 6))));
                  v247 = v245 * v245;
                  if (v246 < v242)
                    v246 = *(float *)(a1 + 116);
                  if (v247 <= v246)
                  {
                    v248 = (float)(v240 * (float)(v167.f32[0] - *(v243 - 9)))
                         - (float)(v241 * (float)(*(float *)v166.i32 - *(v243 - 10)));
                    v249 = (float)(v192 * *(v243 - 1))
                         + (float)((float)(v193 * *(v243 - 3))
                                 + (float)((float)(v168.f32[0] * *(v243 - 4)) + (float)(v193 * *(v243 - 2))));
                    v250 = v248 * v248;
                    if (v249 < v242)
                      v249 = *(float *)(a1 + 116);
                    if (v250 <= v249)
                      v199 += *(_WORD *)v243;
                  }
                  v243 += 13;
                }
                while (v244 + 13 != v201);
              }
            }
            if (*(_QWORD *)(a1 + 16) <= (unint64_t)v199)
            {
              if (v154 < (float *)v153)
              {
                *v154 = v174;
                v154[1] = v183;
                *((_WORD *)v154 + 4) = v199;
                v154 += 3;
                v342 = (char *)v154;
              }
              else
              {
                v251 = 0xAAAAAAAAAAAAAAABLL * (((char *)v154 - v152) >> 2) + 1;
                if (v251 > 0x1555555555555555)
                  sub_223FB4974();
                if (0x5555555555555556 * ((v153 - v152) >> 2) > v251)
                  v251 = 0x5555555555555556 * ((v153 - v152) >> 2);
                if (0xAAAAAAAAAAAAAAABLL * ((v153 - v152) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                  v252 = 0x1555555555555555;
                else
                  v252 = v251;
                if (v252 > 0x1555555555555555)
                  sub_223174E94();
                v253 = (char *)operator new(12 * v252);
                v254 = (float *)&v253[4 * (((char *)v154 - v152) >> 2)];
                *v254 = v174;
                v254[1] = v183;
                *((_WORD *)v254 + 4) = v199;
                v255 = v254;
                if (v154 == (float *)v152)
                {
                  v170 = (float **)v339;
                  v153 = &v253[12 * v252];
                  v154 = v254 + 3;
                  v342 = (char *)(v254 + 3);
                  if (v152)
                    goto LABEL_275;
                }
                else
                {
                  v170 = (float **)v339;
                  do
                  {
                    v256 = *(_QWORD *)(v154 - 3);
                    v154 -= 3;
                    v257 = *((_DWORD *)v154 + 2);
                    *(_QWORD *)(v255 - 3) = v256;
                    v255 -= 3;
                    *((_DWORD *)v255 + 2) = v257;
                  }
                  while (v154 != (float *)v152);
                  v153 = &v253[12 * v252];
                  v154 = v254 + 3;
                  v342 = (char *)(v254 + 3);
                  if (v152)
                  {
LABEL_275:
                    v258 = v153;
                    operator delete(v152);
                    v153 = v258;
                    a1 = v351;
                  }
                }
                v152 = (char *)v255;
                v156 = v340;
              }
            }
            v36 = v180++ < *(_DWORD *)(*v165 + 4 * v171);
            if (!v36)
              goto LABEL_228;
            continue;
          }
        }
        v153 = v162;
        a1 = v351;
      }
LABEL_213:
      v155 = v333 + 1;
      v151 = *(_QWORD *)(a1 + 56);
    }
    while (v333 + 1 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 64) - v151) >> 3));
    v263 = *(float *)(a1 + 40);
    v264 = *(float *)(a1 + 44);
    v265 = *(_QWORD *)(a1 + 48);
    if (v152 == v342)
    {
      v275 = 0;
      v285 = 0;
    }
    else
    {
      v266 = v152 + 12;
      v267 = v152;
      if (v152 + 12 != v342)
      {
        v267 = v152;
        do
        {
          if (*((unsigned __int16 *)v267 + 4) < *((unsigned __int16 *)v266 + 4))
            v267 = v266;
          v266 += 12;
        }
        while (v266 != v342);
      }
      v268 = 8 * *((unsigned __int16 *)v267 + 4);
      v269 = (char *)operator new(v268 + 8);
      bzero(v269, v268 + 8);
      v270 = v152;
      do
      {
        ++*(_QWORD *)&v269[8 * *((unsigned __int16 *)v270 + 4)];
        v270 += 12;
      }
      while (v270 != v342);
      v271 = 0;
      v272 = 0;
      do
      {
        v273 = *(_QWORD *)&v269[v271];
        *(_QWORD *)&v269[v271] = v272;
        v272 += v273;
        v271 += 8;
      }
      while (v268 + 8 != v271);
      if (0xAAAAAAAAAAAAAAABLL * ((v342 - v152) >> 2) > 0x1555555555555555)
        sub_223FB4974();
      v274 = (char *)operator new(v342 - v152);
      v275 = v274;
      v276 = 0;
      do
      {
        v277 = &v152[v276];
        v278 = &v274[v276];
        *(_QWORD *)v278 = *(_QWORD *)&v152[v276];
        *((_WORD *)v278 + 4) = *(_WORD *)&v152[v276 + 8];
        v276 += 12;
      }
      while (v277 + 12 != v342);
      v279 = 0xAAAAAAAAAAAAAAABLL * (v276 >> 2);
      v280 = v152;
      do
      {
        v281 = *((unsigned __int16 *)v280 + 4);
        v282 = *(_QWORD *)&v269[8 * v281];
        v283 = &v274[12 * v282];
        v284 = *(_QWORD *)v280;
        v280 += 12;
        *(_QWORD *)v283 = v284;
        *((_WORD *)v283 + 4) = v281;
        *(_QWORD *)&v269[8 * v281] = v282 + 1;
      }
      while (v280 != v342);
      v285 = &v274[12 * v279];
      operator delete(v269);
    }
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (0xAAAAAAAAAAAAAAABLL * ((v285 - v275) >> 2) >= v265)
    v286 = v265;
  else
    v286 = 0xAAAAAAAAAAAAAAABLL * ((v285 - v275) >> 2);
  __p = 0;
  v359 = 0;
  v360 = 0;
  if (!v286)
    goto LABEL_362;
  if ((v286 & 0x8000000000000000) != 0)
    sub_2233DCD38();
  v287 = (v286 - 1) >> 6;
  v288 = operator new(8 * (v287 + 1));
  v289 = v288;
  v359 = v286;
  v360 = (int *)(v287 + 1);
  __p = v288;
  if (v286 >= 0x41)
    v290 = (v286 - 1) >> 6;
  else
    v290 = 0;
  v288[v290] = 0;
  if (v286 >= 0x40)
    bzero(v288, 8 * (v286 >> 6));
  if ((v286 & 0x3F) != 0)
    v289[v286 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v286 & 0x3F));
  if (4 * v286 == 16 * v286)
  {
    operator delete(v289);
    if (!v275)
      goto LABEL_364;
    goto LABEL_363;
  }
  v343 = v275;
  v291 = 0;
  v292 = 0;
  v293 = 0;
  v294 = 0;
  v295 = -(uint64_t)v286;
  v296 = &v285[-12 * v286];
  v297 = 12 - 12 * v286;
  v346 = v296;
  v350 = -(uint64_t)v286;
  while (1)
  {
LABEL_317:
    v298 = v294 + 1;
    v299 = __p;
    if (~v294 != v295)
    {
      v300 = 0;
      v301 = v294 + 1;
      do
      {
        v302 = v299[v301 >> 6];
        if ((v302 & (1 << v301)) == 0
          && (float)(90.0 - fabsf(vabds_f32(*((float *)v285 - 3), *(float *)&v285[v300 - 24]) + -90.0)) <= v263)
        {
          v303 = *((float *)v285 - 2);
          v304 = *(float *)&v285[v300 - 20];
          v305 = v303 < v304;
          if (v303 == v304)
            goto LABEL_319;
          v306 = v303 - v304;
          v307 = v304 - v303;
          if (!v305)
            v307 = v306;
          if (v307 <= v264)
LABEL_319:
            v299[v301 >> 6] = v302 | (1 << v301);
        }
        ++v301;
        v300 -= 12;
      }
      while (v297 != v300);
    }
    v285 -= 12;
    if (((*(_QWORD *)((char *)v299 + ((v294 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v294) & 1) == 0)
      break;
    v297 += 12;
    ++v294;
    if (v285 == v296)
      goto LABEL_359;
  }
  if (v293 < v292)
  {
    *(_QWORD *)v293 = *(_QWORD *)v285;
    v308 = (uint64_t)(v293 + 8);
    goto LABEL_347;
  }
  v309 = (char *)(v293 - v291);
  v310 = (v293 - v291) >> 3;
  v311 = v310 + 1;
  if ((unint64_t)(v310 + 1) >> 61)
    sub_223FB4974();
  if ((v292 - v291) >> 2 > v311)
    v311 = (v292 - v291) >> 2;
  v312 = (unint64_t)(v292 - v291) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v311;
  v352 = v298;
  if (v312)
  {
    if (v312 >> 61)
      sub_223174E94();
    v313 = v293;
    v314 = v312;
    v315 = operator new(8 * v312);
    v293 = v313;
    v312 = v314;
    v316 = &v315[8 * v310];
    *(_QWORD *)v316 = *(_QWORD *)v285;
    v308 = (uint64_t)(v316 + 8);
    v317 = (char *)(v293 - v291);
    if (v293 == v291)
      goto LABEL_344;
LABEL_341:
    v318 = (unint64_t)(v317 - 8);
    if (v318 < 0x168)
    {
      v319 = v293;
      goto LABEL_343;
    }
    v323 = (v293 - 8 - v291) & 0xFFFFFFFFFFFFFFF8;
    if (&v309[(_QWORD)v315 - 8 - v323] > &v309[(_QWORD)v315 - 8])
    {
      v319 = v293;
      goto LABEL_343;
    }
    if (&v293[-v323 - 8] > v293 - 8)
    {
      v319 = v293;
      goto LABEL_343;
    }
    if ((unint64_t)(v293 - v315 - (_QWORD)v309) < 0x20)
    {
      v319 = v293;
      goto LABEL_343;
    }
    v324 = (v318 >> 3) + 1;
    v325 = 8 * (v324 & 0x3FFFFFFFFFFFFFFCLL);
    v319 = &v293[-v325];
    v316 -= v325;
    v326 = &v315[8 * v310 - 16];
    v327 = v293 - 16;
    v328 = v324 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v329 = *(_OWORD *)v327;
      *(v326 - 1) = *((_OWORD *)v327 - 1);
      *v326 = v329;
      v326 -= 2;
      v327 -= 32;
      v328 -= 4;
    }
    while (v328);
    if (v324 != (v324 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_343:
        v320 = *((_QWORD *)v319 - 1);
        v319 -= 8;
        *((_QWORD *)v316 - 1) = v320;
        v316 -= 8;
      }
      while (v319 != v291);
    }
  }
  else
  {
    v315 = 0;
    v316 = (char *)(8 * v310);
    *(_QWORD *)(8 * v310) = *(_QWORD *)v285;
    v308 = 8 * v310 + 8;
    v317 = (char *)(v293 - v291);
    if (v293 != v291)
      goto LABEL_341;
  }
LABEL_344:
  v292 = &v315[8 * v312];
  *a4 = v316;
  a4[1] = (char *)v308;
  a4[2] = v292;
  if (v291)
  {
    v321 = v291;
    v322 = v292;
    operator delete(v321);
    v292 = v322;
  }
  v291 = v316;
  v296 = v346;
  v295 = v350;
  v298 = v352;
LABEL_347:
  a4[1] = (char *)v308;
  v293 = (char *)v308;
  v297 += 12;
  v294 = v298;
  if (v285 != v296)
    goto LABEL_317;
LABEL_359:
  v275 = v343;
  if (!__p)
  {
LABEL_362:
    if (v275)
      goto LABEL_363;
    goto LABEL_364;
  }
  operator delete(__p);
  if (!v343)
    goto LABEL_364;
LABEL_363:
  operator delete(v275);
LABEL_364:
  if (v152)
    operator delete(v152);
LABEL_366:
  kdebug_trace();
  sub_223FB46D4(&__p);
  if (**((int **)__p + 7) <= 1)
  {
    v330 = atomic_load((unsigned __int8 *)&qword_2540CE498);
    if ((v330 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE498))
    {
      qword_2540CE490 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_HoughLineDetect");
      __cxa_guard_release(&qword_2540CE498);
    }
    v331 = qword_2540CE490;
    if (*(_BYTE *)(qword_2540CE490 + 16))
    {
      *(_QWORD *)(v331 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v331;
      *(_BYTE *)(v331 + 16) = 0;
    }
  }
}

void sub_223FB451C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33)
{
  void *v34;

  __cxa_guard_abort(&qword_2540CE498);
  v34 = *(void **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)(a10 + 8) = v34;
    operator delete(v34);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223FB46D4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CE4B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE4B0))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.acv.trace");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CE4A8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CE4B0);
  }
  *a1 = qword_2540CE4A8;
}

void sub_223FB4770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CE4B0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CE4B0);
  _Unwind_Resume(a1);
}

uint64_t sub_223FB47C8(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;

  if (a3 == a2)
    return a3;
  v3 = a3 - a2 + 1;
  if (a3 - a2 != -1)
  {
    v4 = __clz(v3);
    v5 = 31;
    if (((v3 << v4) & 0x7FFFFFFF) != 0)
      v5 = 32;
    v6 = v5 - v4;
    v7 = v6 >> 5;
    if ((v6 & 0x1F) != 0)
      ++v7;
    if (v7 <= v6)
      v8 = 0xFFFFFFFF >> -(v6 / v7);
    else
      v8 = 0;
    v9 = *(_QWORD *)(a1 + 2496);
    do
    {
      v10 = 4 * v9;
      v11 = v9 + 397;
      v9 = (v9 + 1) % 0x270;
      v12 = *(_DWORD *)(a1 + 4 * (v11 % 0x270)) ^ ((*(_DWORD *)(a1 + 4 * v9) & 0x7FFFFFFE | *(_DWORD *)(a1 + v10) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v9) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(a1 + v10) = v12;
      v13 = ((v12 ^ (v12 >> 11)) << 7) & 0x9D2C5680 ^ v12 ^ (v12 >> 11);
      v14 = ((v13 << 15) & 0xEFC60000 ^ v13 ^ (((v13 << 15) & 0xEFC60000 ^ v13) >> 18)) & v8;
    }
    while (v14 >= v3);
    *(_QWORD *)(a1 + 2496) = v9;
    return (unsigned __int16)(v14 + a2);
  }
  v16 = *(_QWORD *)(a1 + 2496);
  v17 = (v16 + 1) % 0x270uLL;
  v18 = *(_DWORD *)(a1 + 4 * ((v16 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a1 + 4 * v17) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v16) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v17) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a1 + 4 * v16) = v18;
  *(_QWORD *)(a1 + 2496) = v17;
  v19 = ((v18 ^ (v18 >> 11)) << 7) & 0x9D2C5680 ^ v18 ^ (v18 >> 11);
  return (((unsigned __int16)v18 ^ (unsigned __int16)(v18 >> 11)) << 7) & 0x5680 ^ (unsigned __int16)(v18 ^ (v18 >> 11)) ^ (((v19 << 15) & 0xEFC40000 ^ v19) >> 18);
}

void sub_223FB4974()
{
  sub_22316DBD4("vector");
}

float32x2_t sub_223FB4988(int32x2_t *a1, int32x2_t *a2, unint64_t *a3, uint64_t *a4, _QWORD *a5, float32x2_t *a6, float32x2_t a7, float32_t a8, float32x4_t a9, double a10, float32x4_t a11)
{
  float32x4_t v11;
  float32x4_t v12;
  unint64_t v13;
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x2_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  unsigned __int128 v51;
  float32x4_t v52;
  float32x4_t v53;
  unsigned __int128 v54;
  int8x16_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;
  int8x16_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  int32x4_t v91;
  int8x16_t v92;
  int8x16_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  int8x16_t v98;
  int8x16_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  int8x16_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  int8x16_t v107;
  float32x2_t result;

  v12.i64[0] = 0;
  a9.i64[0] = *a3;
  a11.i64[0] = a3[1];
  v13 = vnegq_f32(a9).u64[0];
  v14 = vnegq_f32(a11);
  v15 = v14.i64[0];
  v16.i64[0] = 0;
  v14.i64[0] = *a4;
  v11.i64[0] = a4[1];
  v16.i64[1] = *a4;
  v17.i64[0] = 0;
  v17.i64[1] = vnegq_f32(v14).u64[0];
  v18.i64[0] = 0;
  v12.i64[1] = v11.i64[0];
  v18.i64[1] = vnegq_f32(v11).u64[0];
  v19 = (float32x4_t)vdupq_lane_s32(*a1, 0);
  v20 = vaddq_f32(a9, v19);
  v21 = vaddq_f32((float32x4_t)v13, v19);
  v22 = (float32x4_t)vdupq_lane_s32(*a1, 1);
  v23 = vaddq_f32(a11, v22);
  v24 = (float32x4_t)vdupq_lane_s32(*a2, 0);
  v25 = vaddq_f32((float32x4_t)(unint64_t)v15, v22);
  v26 = (float32x4_t)vdupq_lane_s32(*a2, 1);
  a7.f32[1] = a8;
  __asm { FMOV            V1.2S, #1.0 }
  v32 = vdiv_f32(_D1, a7);
  v33 = vsubq_f32(v21, vaddq_f32(v17, v24));
  v34 = vsubq_f32(v20, vaddq_f32(v16, v24));
  v35 = vsubq_f32(v25, vaddq_f32(v18, v26));
  v36 = vsubq_f32(v23, vaddq_f32(v12, v26));
  __asm { FMOV            V19.4S, #1.0 }
  v38 = vdivq_f32(_Q19, vsqrtq_f32(vaddq_f32(vmulq_f32(v33, v33), vmulq_f32(v35, v35))));
  v39 = vdivq_f32(_Q19, vsqrtq_f32(vaddq_f32(vmulq_f32(v34, v34), vmulq_f32(v36, v36))));
  v40 = vmulq_f32(v34, v39);
  v41 = vmulq_f32(v33, v38);
  v42 = vmulq_f32(v36, v39);
  v43 = vmulq_f32(v35, v38);
  v44 = (int8x16_t)vcltzq_f32(v41);
  v45 = (int8x16_t)vcltzq_f32(v40);
  v46 = (float32x4_t)vbslq_s8(v45, (int8x16_t)v42, (int8x16_t)vnegq_f32(v42));
  v47 = (float32x4_t)vbslq_s8(v44, (int8x16_t)v43, (int8x16_t)vnegq_f32(v43));
  v48 = (float32x4_t)vbslq_s8(v44, (int8x16_t)vnegq_f32(v41), (int8x16_t)v41);
  v49 = (float32x4_t)vbslq_s8(v45, (int8x16_t)vnegq_f32(v40), (int8x16_t)v40);
  v50 = vmulq_f32(v23, v49);
  v51 = *(_OWORD *)&v49 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
  v52 = vmulq_f32(v25, v48);
  v53 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v54 = *(_OWORD *)&v48 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
  v55 = (int8x16_t)vcgeq_f32((float32x4_t)v54, v53);
  v56 = (float32x4_t)vandq_s8((int8x16_t)v51, (int8x16_t)vcgeq_f32((float32x4_t)v51, v53));
  v57 = (float32x4_t)vandq_s8((int8x16_t)v54, v55);
  v40.i64[0] = 0x3F0000003F000000;
  v40.i64[1] = 0x3F0000003F000000;
  v58 = (int8x16_t)vcgtq_f32((float32x4_t)v54, v40);
  v59 = (int8x16_t)vcgtq_f32((float32x4_t)v51, v40);
  v60.i64[0] = 0xBF000000BF000000;
  v60.i64[1] = 0xBF000000BF000000;
  v61.i64[0] = 0x3F0000003F000000;
  v61.i64[1] = 0x3F0000003F000000;
  v62 = vmlaq_f32(v61, v60, (float32x4_t)v54);
  v63 = vmlaq_f32(v40, v60, (float32x4_t)v51);
  v64 = (float32x4_t)vbslq_s8(v59, (int8x16_t)v63, (int8x16_t)vmulq_f32(v56, v56));
  v65 = (float32x4_t)vbslq_s8(v58, (int8x16_t)v62, (int8x16_t)vmulq_f32(v57, v57));
  v66 = vsqrtq_f32(v63);
  v67 = vsqrtq_f32(v62);
  v68 = (float32x4_t)vdupq_n_s32(0x3D2CB352u);
  v69 = (float32x4_t)vdupq_n_s32(0x3CC617E3u);
  v70 = vmlaq_f32(v69, v68, v65);
  v71 = vmlaq_f32(v69, v68, v64);
  v72 = (float32x4_t)vdupq_n_s32(0x3D3A3EC7u);
  v73 = vmlaq_f32(v72, v71, v64);
  v74 = (float32x4_t)vdupq_n_s32(0x3D9980F6u);
  v75 = vmlaq_f32(v74, vmlaq_f32(v72, v70, v65), v65);
  v76 = (float32x4_t)vdupq_n_s32(0x3E2AAAE4u);
  v77 = vmulq_f32(vmlaq_f32(v76, v75, v65), v65);
  v78 = vmulq_f32(vmlaq_f32(v76, vmlaq_f32(v74, v73, v64), v64), v64);
  v79 = (float32x4_t)vdupq_n_s32(0x3FC90FDBu);
  v74.i64[0] = 0xC0000000C0000000;
  v74.i64[1] = 0xC0000000C0000000;
  v80 = (float32x4_t)vbslq_s8(v59, (int8x16_t)vmlaq_f32(v79, v74, vmlaq_f32(v66, v66, v78)), (int8x16_t)vmlaq_f32((float32x4_t)v51, (float32x4_t)v51, v78));
  v81 = (float32x4_t)vbslq_s8(v58, (int8x16_t)vmlaq_f32(v79, v74, vmlaq_f32(v67, v67, v77)), (int8x16_t)vmlaq_f32((float32x4_t)v54, (float32x4_t)v54, v77));
  v82 = (float32x4_t)vdupq_n_s32(0x40490FDBu);
  v83 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v46), (int8x16_t)vsubq_f32(v82, v80), (int8x16_t)v80);
  v84 = vmulq_f32(v20, v46);
  v85 = vaddq_f32(vmulq_f32(v21, v47), v52);
  v86 = vaddq_f32(v84, v50);
  v87 = vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v47), (int8x16_t)vsubq_f32(v82, v81), (int8x16_t)v81), v32.f32[0]);
  v88 = vmulq_n_f32(v83, v32.f32[0]);
  v89 = vmulq_lane_f32(v86, v32, 1);
  v90 = vmulq_lane_f32(v85, v32, 1);
  v91 = vdupq_n_s32((int)(v32.f32[0] * 3.14159265));
  v92 = (int8x16_t)vceqq_s32(v91, vcvtq_s32_f32(vrndaq_f32(v87)));
  v93 = (int8x16_t)vceqq_s32(v91, vcvtq_s32_f32(vrndaq_f32(v88)));
  v94 = (float32x4_t)vbicq_s8((int8x16_t)v88, v93);
  v95 = (float32x4_t)vbicq_s8((int8x16_t)v87, v92);
  v96 = (float32x4_t)vbslq_s8(v93, (int8x16_t)vnegq_f32(v89), (int8x16_t)v89);
  v97 = (float32x4_t)vbslq_s8(v92, (int8x16_t)vnegq_f32(v90), (int8x16_t)v90);
  v98 = (int8x16_t)vaddq_f32(v94, v95);
  *(float32x2_t *)v98.i8 = vadd_f32(*(float32x2_t *)v98.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v98, v98, 8uLL));
  v99 = (int8x16_t)vaddq_f32(v96, v97);
  *(float32x2_t *)v99.i8 = vadd_f32(*(float32x2_t *)v99.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v99, v99, 8uLL));
  *(float32x2_t *)v98.i8 = vmul_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v98.i8, *(int32x2_t *)v99.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v98.i8, *(int32x2_t *)v99.i8)), (float32x2_t)0x3E0000003E000000);
  v100 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.i8, 0);
  v101 = vsubq_f32(v94, v100);
  v102 = vsubq_f32(v95, v100);
  v103 = (int8x16_t)vaddq_f32(vmulq_f32(v101, v101), vmulq_f32(v102, v102));
  *(float32x2_t *)v103.i8 = vadd_f32(*(float32x2_t *)v103.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v103, v103, 8uLL));
  v104 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.i8, 1);
  v105 = vsubq_f32(v96, v104);
  v106 = vsubq_f32(v97, v104);
  v107 = (int8x16_t)vaddq_f32(vmulq_f32(v105, v105), vmulq_f32(v106, v106));
  *(float32x2_t *)v107.i8 = vadd_f32(*(float32x2_t *)v107.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v107, v107, 8uLL));
  *a5 = v98.i64[0];
  result = vmul_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v103.i8, *(int32x2_t *)v107.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v103.i8, *(int32x2_t *)v107.i8)), (float32x2_t)0x3E0000003E000000);
  *a6 = result;
  return result;
}

void sub_223FB4CA8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float32x2_t *v6;
  char *v7;
  char *v8;
  void *v9;
  void *v10;
  void *__p;
  char *v12;
  float32x2_t *v13[3];

  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 <= 0xFuLL)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return;
  }
  sub_223FB4DF0(a1, (unint64_t **)a2, (uint64_t)v13);
  v6 = v13[0];
  if (v13[0] == v13[1])
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    goto LABEL_17;
  }
  sub_223FB50E8(a1, (char **)a2, v13, (char **)&__p);
  v7 = (char *)__p;
  if (__p == v12)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (!v7)
      goto LABEL_17;
LABEL_10:
    v8 = v12;
    v9 = v7;
    if (v12 != v7)
    {
      do
      {
        v10 = (void *)*((_QWORD *)v8 - 4);
        if (v10)
          operator delete(v10);
        v8 -= 48;
      }
      while (v8 != v7);
      v9 = __p;
    }
    v12 = v7;
    operator delete(v9);
    goto LABEL_17;
  }
  sub_223FB5C4C(a1, (uint64_t *)a2, (uint64_t *)&__p, (void **)a3);
  v7 = (char *)__p;
  if (__p)
    goto LABEL_10;
LABEL_17:
  if (v6)
    operator delete(v6);
}

void sub_223FB4DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  sub_223FB67BC(&a9);
  if (v9)
    operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_223FB4DF0(uint64_t a1@<X0>, unint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  float *v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  __float2 v22;
  float v23;
  uint64_t v24;
  void *__p;
  void *v26;
  uint64_t v27;
  void *v28;
  char *v29;
  char *v30;
  void *v31;
  float *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  char **v36;
  float v37;
  char **v38;

  v5 = *a2;
  v6 = a2[1];
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v7 = (char *)v6 - (char *)v5;
  if (v6 == v5)
  {
    v9 = 0;
    v11 = *(_QWORD *)(a1 + 64);
    v29 = 0;
    v30 = 0;
    v28 = 0;
  }
  else
  {
    if ((unint64_t)v7 >= 0x5555555555555551)
      sub_22316E078();
    v8 = v7 >> 3;
    v31 = operator new(24 * (v7 >> 3));
    v32 = (float *)v31;
    v33 = (char *)v31 + 24 * v8;
    v36 = (char **)&v31;
    do
    {
      v34 = *v5;
      v35 = 0;
      sub_223F622F4(&v36, (uint64_t)&v34);
      ++v5;
    }
    while (v5 != v6);
    v9 = (char *)v31;
    v10 = (char *)v32;
    v11 = *(_QWORD *)(a1 + 64);
    v29 = 0;
    v30 = 0;
    v28 = 0;
    v12 = (char *)v32 - (_BYTE *)v31;
    if (v32 != v31)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 3);
      if (v13 >= 0xAAAAAAAAAAAAAABLL)
        sub_22316E078();
      v14 = (char *)operator new(v12);
      v15 = 0;
      v28 = v14;
      v29 = v14;
      v30 = &v14[24 * v13];
      do
      {
        v16 = &v9[v15];
        v17 = &v14[v15];
        *(_QWORD *)v17 = *(_QWORD *)&v9[v15];
        *(_OWORD *)(v17 + 8) = *(_OWORD *)&v9[v15 + 8];
        v15 += 24;
      }
      while (v16 + 24 != v10);
      v29 = &v14[v15];
    }
  }
  __p = 0;
  v26 = 0;
  v27 = 0;
  sub_223FB26DC(v11, (char **)&v28, &__p, (char **)&v31);
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  if (v28)
  {
    v29 = (char *)v28;
    operator delete(v28);
  }
  v19 = (float *)v31;
  v18 = v32;
  v35 = 0;
  v34 = 0uLL;
  v20 = (char *)v32 - (_BYTE *)v31;
  if (v32 == v31)
  {
    *(_OWORD *)a3 = 0u;
    *(_QWORD *)(a3 + 16) = v20;
    if (v18)
    {
LABEL_20:
      v32 = v18;
      operator delete(v18);
    }
  }
  else
  {
    if (v20 < 0)
      sub_22316E078();
    v21 = v20 >> 3;
    *(_QWORD *)&v34 = operator new(12 * (v20 >> 3));
    *((_QWORD *)&v34 + 1) = v34;
    v35 = v34 + 12 * v21;
    v38 = (char **)&v34;
    do
    {
      v22 = __sincosf_stret(*v19 * 0.017453);
      v23 = -v19[1];
      v36 = (char **)__PAIR64__(LODWORD(v22.__sinval), LODWORD(v22.__cosval));
      v37 = v23;
      sub_22339DC14(&v38, (uint64_t *)&v36);
      v19 += 2;
    }
    while (v19 != v18);
    v24 = v35;
    v18 = (float *)v31;
    *(_OWORD *)a3 = v34;
    *(_QWORD *)(a3 + 16) = v24;
    if (v18)
      goto LABEL_20;
  }
  if (v9)
    operator delete(v9);
}

void sub_223FB505C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  void *v20;

  if (__p)
    operator delete(__p);
  if (v20)
    operator delete(v20);
  _Unwind_Resume(exception_object);
}

float32x2_t *sub_223FB50E8@<X0>(uint64_t a1@<X0>, char **a2@<X1>, float32x2_t **a3@<X2>, char **a4@<X8>)
{
  char **v4;
  float32x2_t *result;
  char **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  char *v13;
  unint64_t v14;
  float32x2_t v15;
  unint64_t *v16;
  unint64_t v17;
  float32x2_t v18;
  unint64_t v19;
  float32x2_t v20;
  float32x2_t v21;
  int8x16_t v22;
  unint64_t *v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float v28;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  char *v58;
  unint64_t v59;
  uint64_t **v60;
  uint64_t **v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  char *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  float32x2_t *v72;
  float32x2_t v73;
  unint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  int v77;
  int v78;
  int v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  float32x2_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  float32x2_t *v89;
  float32x2_t *v90;
  unint64_t *v91;
  float32x2_t *v92;
  char *v93;
  unint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  int v97;
  int v98;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  float32x2_t *v104;
  float32x2_t v105;
  __int32 v106;
  char *v107;
  float32x2_t *v108;
  char *v109;
  char *v110;
  void *v111;
  void *v112;
  uint64_t **v113;
  uint64_t **v114;
  uint64_t **v115;
  uint64_t *v116;
  void *v117;
  char **v118;
  float32x2_t *v119;
  _QWORD *v122;
  uint64_t **v123;
  float32x2_t *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t __sz;
  float32x2_t *v129;
  uint64_t v130;
  char *v131;
  unint64_t v132;
  uint64_t **v133;
  uint64_t v134;
  char *v135;
  char *v136;
  unint64_t v137;
  void *__p;
  uint64_t v139;
  unint64_t v140;
  void *v141[2];
  float32x2_t v142;
  float v143;
  char v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  _QWORD *v151;
  uint64_t v152;
  char v153;

  v4 = a4;
  v135 = *a2;
  v136 = a2[1];
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = *a3;
  v119 = a3[1];
  if (*a3 == v119)
    return result;
  v6 = a2;
  v7 = (v136 - v135) >> 3;
  v8 = (v7 - 1) >> 6;
  v127 = v8 + 1;
  __sz = 8 * (v8 + 1);
  v122 = v4 + 2;
  v118 = v4;
  if ((unint64_t)(v136 - v135) < 0x208)
    v8 = 0;
  v126 = v8;
  v137 = v136 - v135;
  v130 = v7 >> 6;
  v125 = ((unint64_t)(v136 - v135) >> 3) & 0x3F;
  while (2)
  {
    v129 = result;
    sub_223F27E50(result, v6, &v145, *(float *)(a1 + 36));
    v9 = (unint64_t *)v145;
    v10 = (unint64_t *)v146;
    v11 = (v145 - v146) >> 3;
    if ((unint64_t)(v11 + 1) < 2 || v145 == v146)
      goto LABEL_154;
    v13 = *v6;
    v14 = (v6[1] - *v6) >> 3;
    v147 = v145;
    v148 = v13;
    v149 = (char *)v14;
    v15 = 0;
    v16 = (unint64_t *)v145;
    do
    {
      v17 = *v16;
      if (v14 <= *v16)
LABEL_157:
        sub_22457354C((unint64_t *)&v149, v17);
      v18 = *(float32x2_t *)&v13[8 * v17];
      v15 = vadd_f32(v15, v18);
      v147 = (char *)++v16;
    }
    while (v16 != (unint64_t *)v146);
    v19 = 0;
    v18.f32[0] = (float)(unint64_t)-v11;
    v20 = (float32x2_t)vdup_lane_s32((int32x2_t)v18, 0);
    v21 = vdiv_f32(v15, v20);
    v147 = v145;
    v148 = v13;
    v149 = (char *)v14;
    v22 = 0uLL;
    v23 = (unint64_t *)v145;
    do
    {
      v17 = *v23;
      if (v14 <= *v23)
        goto LABEL_157;
      v24 = vsub_f32(*(float32x2_t *)&v13[8 * v17], v21);
      v25 = (float32x2_t)vextq_s8(v22, v22, 8uLL).u64[0];
      *(float32x2_t *)v22.i8 = vmla_n_f32(*(float32x2_t *)v22.i8, v24, v24.f32[0]);
      v22.u64[1] = (unint64_t)vmla_lane_f32(v25, v24, v24, 1);
      ++v19;
      v147 = (char *)++v23;
    }
    while (v23 != (unint64_t *)v146);
    v21.f32[0] = (float)v19;
    v153 = 0;
    v152 = 0x200000002;
    *(float32x4_t *)v141 = vdivq_f32((float32x4_t)v22, (float32x4_t)vdupq_lane_s32((int32x2_t)v21, 0));
    sub_223FB7CA0((uint64_t)&v147);
    if (!v153)
      goto LABEL_154;
    v28 = fabsf(*(float *)&v151);
    if (*(float *)&v151 == 0.0 || v28 <= 0.000001)
      goto LABEL_154;
    v26.i32[0] = HIDWORD(v149);
    v27.i32[0] = HIDWORD(v150);
    v147 = (char *)v9;
    v148 = v13;
    v30 = 0;
    v149 = (char *)v14;
    do
    {
      v17 = *v9;
      if (v14 <= *v9)
        goto LABEL_157;
      v30 = vadd_f32(v30, *(float32x2_t *)&v13[8 * v17]);
      v147 = (char *)++v9;
    }
    while (v9 != v10);
    v31 = vdiv_f32(v30, v20);
    v32 = vmla_f32(vmul_f32(v26, v26), v27, v27);
    v32.f32[0] = 1.0 / sqrtf(v32.f32[0]);
    v142 = vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v26, (int32x2_t)v27), v32.f32[0]);
    v143 = -vmla_lane_f32(vmul_f32(vmul_f32(v26, v32), v31), vmul_f32(v27, v32), v31, 1).f32[0];
    v144 = 1;
    v33 = v145;
    v34 = v146;
    v147 = 0;
    v148 = 0;
    v149 = 0;
    v35 = v146 - v145;
    if (v146 == v145)
    {
      v59 = 0;
      v36 = 0;
      v58 = 0;
      goto LABEL_61;
    }
    if (v35 < 0)
      sub_22316E078();
    v36 = (char *)operator new(v146 - v145);
    v147 = v36;
    v148 = v36;
    v149 = &v36[8 * (v35 >> 3)];
    do
    {
      while (1)
      {
        while (1)
        {
          v37 = *(_QWORD *)&(*v6)[8 * *(_QWORD *)v33];
          if (v36 >= v149)
            break;
          *(_QWORD *)v36 = v37;
          v36 += 8;
          v148 = v36;
          v33 += 8;
          if (v33 == v34)
            goto LABEL_59;
        }
        v38 = v147;
        v39 = (v36 - v147) >> 3;
        v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 61)
          sub_22316E078();
        v41 = v149 - v147;
        if ((v149 - v147) >> 2 > v40)
          v40 = v41 >> 2;
        v42 = (unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v40;
        if (!v42)
          break;
        if (v42 >> 61)
          sub_223174E94();
        v43 = (char *)operator new(8 * v42);
        v44 = &v43[8 * v39];
        v45 = (unint64_t)&v43[8 * v42];
        *(_QWORD *)v44 = v37;
        v46 = (uint64_t)(v44 + 8);
        v47 = (char *)(v36 - v38);
        if (v36 == v38)
          goto LABEL_46;
LABEL_39:
        v48 = (unint64_t)(v47 - 8);
        if (v48 < 0x168)
        {
          v49 = v36;
          goto LABEL_41;
        }
        v51 = (v36 - 8 - v38) & 0xFFFFFFFFFFFFFFF8;
        if (&v43[v36 - v38 - 8 - v51] > &v43[v36 - v38 - 8])
        {
          v49 = v36;
          do
          {
LABEL_41:
            v50 = *((_QWORD *)v49 - 1);
            v49 -= 8;
            *((_QWORD *)v44 - 1) = v50;
            v44 -= 8;
          }
          while (v49 != v38);
          goto LABEL_42;
        }
        if (&v36[-v51 - 8] > v36 - 8)
        {
          v49 = v36;
          goto LABEL_41;
        }
        if ((unint64_t)(v38 - v43) < 0x20)
        {
          v49 = v36;
          goto LABEL_41;
        }
        v52 = (v48 >> 3) + 1;
        v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
        v49 = &v36[-v53];
        v44 -= v53;
        v54 = &v43[8 * v39 - 16];
        v55 = v36 - 16;
        v56 = v52 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v57 = *(_OWORD *)v55;
          *((_OWORD *)v54 - 1) = *((_OWORD *)v55 - 1);
          *(_OWORD *)v54 = v57;
          v54 -= 32;
          v55 -= 32;
          v56 -= 4;
        }
        while (v56);
        if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_41;
LABEL_42:
        v36 = v147;
        v147 = v44;
        v148 = (char *)v46;
        v149 = (char *)v45;
        if (v36)
          goto LABEL_47;
        v36 = (char *)v46;
        v148 = (char *)v46;
        v33 += 8;
        if (v33 == v34)
          goto LABEL_59;
      }
      v43 = 0;
      v44 = (char *)(8 * v39);
      v45 = 0;
      *(_QWORD *)(8 * v39) = v37;
      v46 = 8 * v39 + 8;
      v47 = (char *)(v36 - v38);
      if (v36 != v38)
        goto LABEL_39;
LABEL_46:
      v147 = v44;
      v148 = (char *)v46;
      v149 = (char *)v45;
LABEL_47:
      operator delete(v36);
      v36 = (char *)v46;
      v148 = (char *)v46;
      v33 += 8;
    }
    while (v33 != v34);
LABEL_59:
    v58 = v147;
    v59 = (unint64_t)v149;
LABEL_61:
    __p = v58;
    v139 = (uint64_t)v36;
    v140 = v59;
    sub_223F283E0(&v142, (uint64_t *)&__p, (char **)v141, *(float *)(a1 + 56));
    if (__p)
    {
      v139 = (uint64_t)__p;
      operator delete(__p);
    }
    v61 = (uint64_t **)v141[0];
    v60 = (uint64_t **)v141[1];
    v123 = (uint64_t **)v141[1];
    if (v141[0] == v141[1])
    {
      if (v141[0])
        goto LABEL_147;
      goto LABEL_154;
    }
    while (2)
    {
      __p = 0;
      v139 = 0;
      v140 = 0;
      if (v136 == v135)
      {
        v64 = 0;
        v63 = 0;
        v65 = *v61;
        v66 = v61[1];
        if (*v61 == v66)
          goto LABEL_79;
        goto LABEL_77;
      }
      if ((v137 & 0x8000000000000000) != 0)
        sub_2233DCD38();
      v62 = operator new(__sz);
      v63 = v62;
      __p = v62;
      v139 = (v136 - v135) >> 3;
      v140 = v127;
      v62[v126] = 0;
      if (v137 >= 0x200)
        bzero(v62, v130 * 8);
      if (v125)
        v63[v130] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v125);
      v64 = (v136 - v135) >> 3;
      v65 = *v61;
      v66 = v61[1];
      if (*v61 != v66)
      {
LABEL_77:
        v67 = v145;
        v68 = v65;
        do
        {
          v69 = *v68++;
          *(_QWORD *)((char *)v63 + ((*(_QWORD *)&v67[8 * v69] >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_QWORD *)&v67[8 * v69];
        }
        while (v68 != v66);
      }
LABEL_79:
      v70 = v66 - v65;
      v72 = (float32x2_t *)v4[1];
      v71 = (unint64_t)v4[2];
      if ((unint64_t)v72 < v71)
      {
        __p = 0;
        v139 = 0;
        v140 = 0;
        v73 = v142;
        v72[1].f32[0] = v143;
        *v72 = v73;
        v72[2] = 0;
        v72[3] = 0;
        v72[4] = 0;
        if (v64)
        {
          if ((v64 & 0x8000000000000000) != 0)
            sub_2233DCD38();
          v74 = (v64 - 1) >> 6;
          v75 = operator new(8 * (v74 + 1));
          v72[3] = (float32x2_t)v64;
          v72[4] = (float32x2_t)(v74 + 1);
          v72[2] = (float32x2_t)v75;
          if (v64 >= 0x41)
            v76 = (v64 - 1) >> 6;
          else
            v76 = 0;
          v75[v76] = 0;
          if (v64 > 0x3F || (v64 & 0x3F) != 0)
          {
            v77 = 0;
            v78 = 0;
            v79 = 0;
            v80 = v63;
            do
            {
              v81 = 1 << v77;
              if (((*v80 >> v79) & 1) != 0)
                v82 = *v75 | v81;
              else
                v82 = *v75 & ~v81;
              *v75 = v82;
              ++v79;
              v80 += v78 == 63;
              if (v78 == 63)
                v79 = 0;
              v75 += v77 == 63;
              if (v77 == 63)
                v77 = 0;
              else
                ++v77;
              v78 = v79;
            }
            while (v80 != &v63[v64 >> 6] || (v64 & 0x3F) != v79);
          }
        }
        v72[5] = (float32x2_t)v70;
        if (v63)
          operator delete(v63);
        v4[1] = (char *)&v72[6];
        goto LABEL_67;
      }
      v134 = v70;
      v83 = (float32x2_t *)*v4;
      v84 = 0xAAAAAAAAAAAAAAABLL * (((char *)v72 - *v4) >> 4);
      v85 = v84 + 1;
      if (v84 + 1 > 0x555555555555555)
        sub_22316E078();
      v86 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - (_QWORD)v83) >> 4);
      if (2 * v86 > v85)
        v85 = 2 * v86;
      if (v86 >= 0x2AAAAAAAAAAAAAALL)
        v87 = 0x555555555555555;
      else
        v87 = v85;
      v151 = v122;
      v133 = v61;
      if (v87)
      {
        if (v87 > 0x555555555555555)
          sub_223174E94();
        v88 = (char *)operator new(48 * v87);
      }
      else
      {
        v88 = 0;
      }
      v89 = (float32x2_t *)&v88[48 * v84];
      v147 = v88;
      v148 = (char *)v89;
      v149 = (char *)v89;
      v150 = &v88[48 * v87];
      v131 = v150;
      v132 = v84;
      v139 = 0;
      v140 = 0;
      __p = 0;
      *v89 = v142;
      v89[1].f32[0] = v143;
      v89[2] = 0;
      v90 = v89 + 2;
      v89[3] = 0;
      v91 = (unint64_t *)&v89[3];
      v89[4] = 0;
      v92 = v89 + 4;
      if (v64)
      {
        v124 = v89;
        if ((v64 & 0x8000000000000000) != 0)
          sub_2233DCD38();
        v93 = v88;
        v94 = (v64 - 1) >> 6;
        v95 = operator new(8 * (v94 + 1));
        *v90 = (float32x2_t)v95;
        *v92 = (float32x2_t)(v94 + 1);
        *v91 = v64;
        if (v64 >= 0x41)
          v96 = (v64 - 1) >> 6;
        else
          v96 = 0;
        v95[v96] = 0;
        v4 = v118;
        v88 = v93;
        v89 = v124;
        if (v64 > 0x3F || (v64 & 0x3F) != 0)
        {
          v97 = 0;
          v98 = 0;
          v99 = 0;
          v100 = v63;
          do
          {
            v101 = 1 << v97;
            if (((*v100 >> v99) & 1) != 0)
              v102 = *v95 | v101;
            else
              v102 = *v95 & ~v101;
            *v95 = v102;
            ++v99;
            v100 += v98 == 63;
            if (v98 == 63)
              v99 = 0;
            v95 += v97 == 63;
            if (v97 == 63)
              v97 = 0;
            else
              ++v97;
            v98 = v99;
          }
          while (v100 != &v63[v64 >> 6] || (v64 & 0x3F) != v99);
        }
      }
      *(_QWORD *)&v88[48 * v132 + 40] = v134;
      if (v63)
      {
        operator delete(v63);
        v83 = (float32x2_t *)*v4;
        v72 = (float32x2_t *)v4[1];
      }
      v6 = a2;
      v60 = v123;
      v103 = v131;
      if (v72 == v83)
      {
        v107 = (char *)v83;
        v104 = v89;
      }
      else
      {
        v104 = v89;
        do
        {
          v105 = v72[-6];
          v72 -= 6;
          v106 = v72[1].i32[0];
          v104[-6] = v105;
          v104 -= 6;
          v104[1].i32[0] = v106;
          v104[2] = v72[2];
          v104[3] = v72[3];
          v104[4] = v72[4];
          v72[2] = 0;
          v72[3] = 0;
          v72[4] = 0;
          v104[5] = v72[5];
        }
        while (v72 != v83);
        v107 = *v4;
        v83 = (float32x2_t *)v4[1];
        v103 = v150;
      }
      v108 = v89 + 6;
      *v4 = (char *)v104;
      v4[1] = (char *)&v89[6];
      v109 = v4[2];
      v4[2] = v103;
      v149 = (char *)v83;
      v150 = v109;
      v147 = v107;
      v148 = v107;
      if (v83 == (float32x2_t *)v107)
      {
        v61 = v133;
        if (v83)
          goto LABEL_141;
      }
      else
      {
        v61 = v133;
        do
        {
          v110 = (char *)&v83[-6];
          v149 = (char *)&v83[-6];
          v111 = (void *)v83[-4];
          if (v111)
            operator delete(v111);
          v83 -= 6;
        }
        while (v110 != v107);
        v83 = (float32x2_t *)v107;
        if (v107)
LABEL_141:
          operator delete(v83);
      }
      v112 = __p;
      v4[1] = (char *)v108;
      if (v112)
        operator delete(v112);
LABEL_67:
      v61 += 3;
      if (v61 != v60)
        continue;
      break;
    }
    v61 = (uint64_t **)v141[0];
    if (v141[0])
    {
LABEL_147:
      v113 = (uint64_t **)v141[1];
      v114 = v61;
      if (v141[1] != v61)
      {
        v115 = (uint64_t **)v141[1];
        do
        {
          v117 = *(v115 - 3);
          v115 -= 3;
          v116 = v117;
          if (v117)
          {
            *(v113 - 2) = (uint64_t *)v116;
            operator delete(v116);
          }
          v113 = v115;
        }
        while (v115 != v61);
        v114 = (uint64_t **)v141[0];
      }
      v141[1] = v61;
      operator delete(v114);
    }
LABEL_154:
    if (v145)
    {
      v146 = v145;
      operator delete(v145);
    }
    result = (float32x2_t *)((char *)v129 + 12);
    if (&v129[1].i32[1] != (__int32 *)v119)
      continue;
    return result;
  }
}

void sub_223FB5B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)(v10 - 200);
  if (v12)
  {
    *(_QWORD *)(v10 - 192) = v12;
    operator delete(v12);
  }
  sub_223FB67BC(a10);
  _Unwind_Resume(a1);
}

void sub_223FB5C4C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void **a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t *v28;
  char *v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  __int128 v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  _QWORD *v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  void *v75;
  int64_t v76;
  void **v77;
  float32x2_t *v78;
  int64_t v79;
  float32x2_t *v80;
  float32x2_t v81;
  float32x2_t *v82;
  float32x2_t v83;
  int32x2_t v84;
  uint64_t v85;
  float32x2_t v86;
  float32x2_t v87;
  int8x16_t v88;
  float32x2_t *v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float v95;
  int v97;
  unint64_t v98;
  char *v99;
  _OWORD *v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  const double *v116;
  double *v117;
  uint64_t v118;
  const double *v119;
  double *v120;
  uint64_t v121;
  float32x2_t v122;
  float32x2_t *v123;
  float32x2_t v124;
  float32x2_t v125;
  float32x2_t v126;
  _OWORD *v127;
  void *v128;
  void **v129;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  unint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  float32x2_t v139;
  float v140;
  char v141;
  void *v142;
  uint64_t v143;
  char *v144;
  void *__p;
  void *v146;
  unint64_t v147;
  unint64_t v148;
  __int128 v149;
  uint64_t *v150;
  __int32 v151;
  float v152;
  uint64_t v153;
  char v154;
  float32x4_t v155;
  float64x2x2_t v156;
  float64x2x2_t v157;

  v6 = *a3;
  v5 = a3[1];
  v146 = 0;
  v147 = 0;
  v148 = 0;
  v132 = v5;
  v131 = v6;
  v7 = v5 - v6;
  v8 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 4);
  if (v7)
  {
    if (v7 < 0)
      sub_2233DCD38();
    v9 = (v8 - 1) >> 6;
    v10 = operator new(8 * (v9 + 1));
    v11 = v10;
    v147 = v8;
    v148 = v9 + 1;
    v146 = v10;
    if (v8 >= 0x41)
      v12 = (v8 - 1) >> 6;
    else
      v12 = 0;
    v10[v12] = 0;
    if (v8 >= 0x40)
      bzero(v10, 8 * (v8 >> 6));
    if ((v8 & 0x3F) != 0)
      v11[v8 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v8 & 0x3F));
  }
  v13 = 0;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v129 = a4;
  v134 = v8;
  while (1)
  {
    sub_223CE1F0C(&__p, (uint64_t)&v146);
    v149 = 0uLL;
    v150 = 0;
    if (v132 != v131)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      while (1)
      {
        if (((*(_QWORD *)((char *)__p + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
        {
          if (v15 >= v16)
          {
            v19 = (char *)v15 - (char *)v18;
            v20 = v18;
            v21 = v15 - v18;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 61)
            {
              *((_QWORD *)&v149 + 1) = v14;
              v150 = v16;
              *(_QWORD *)&v149 = v20;
              sub_22367C394();
            }
            v23 = v20;
            v24 = (char *)v16 - (char *)v20;
            v25 = ((char *)v16 - (char *)v20) >> 2;
            if (v25 > v22)
              v22 = v25;
            if (v24 >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v22;
            if (v26)
            {
              if (v26 >> 61)
              {
                v150 = v16;
                *(_QWORD *)&v149 = v23;
                sub_223174E94();
              }
              v27 = operator new(8 * v26);
              v28 = (uint64_t *)&v27[8 * v21];
              *v28 = v17;
              v14 = (uint64_t)(v28 + 1);
              v29 = (char *)((char *)v15 - (char *)v23);
              if (v15 != v23)
              {
LABEL_27:
                v30 = (unint64_t)(v29 - 8);
                if (v30 < 0x168
                  || (v34 = ((char *)(v15 - 1) - (char *)v23) & 0xFFFFFFFFFFFFFFF8, &v27[v19 - 8 - v34] > &v27[v19 - 8])
                  || (uint64_t *)((char *)v15 - v34 - 8) > v15 - 1
                  || (unint64_t)((char *)v15 - &v27[v19]) < 0x20)
                {
                  v31 = v15;
                  v32 = v23;
                }
                else
                {
                  v35 = (v30 >> 3) + 1;
                  v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
                  v31 = &v15[v36 / 0xFFFFFFFFFFFFFFF8];
                  v28 = (uint64_t *)((char *)v28 - v36);
                  v37 = &v27[8 * v21 - 16];
                  v38 = v15 - 2;
                  v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v40 = *(_OWORD *)v38;
                    *(v37 - 1) = *((_OWORD *)v38 - 1);
                    *v37 = v40;
                    v37 -= 2;
                    v38 -= 4;
                    v39 -= 4;
                  }
                  while (v39);
                  v32 = v23;
                  if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_30:
                    v16 = (uint64_t *)&v27[8 * v26];
                    v8 = v134;
                    if (v32)
                      goto LABEL_31;
                    goto LABEL_32;
                  }
                }
                do
                {
                  v33 = *--v31;
                  *--v28 = v33;
                }
                while (v31 != v32);
                goto LABEL_30;
              }
            }
            else
            {
              v27 = 0;
              v28 = (uint64_t *)(8 * v21);
              *(_QWORD *)(8 * v21) = v17;
              v14 = 8 * v21 + 8;
              v29 = (char *)((char *)v15 - (char *)v23);
              if (v15 != v23)
                goto LABEL_27;
            }
            v32 = v23;
            v16 = (uint64_t *)&v27[8 * v26];
            v8 = v134;
            if (v32)
LABEL_31:
              operator delete(v32);
LABEL_32:
            v15 = (uint64_t *)v14;
            v18 = v28;
            goto LABEL_15;
          }
          *v15++ = v17;
          v14 = (uint64_t)v15;
        }
LABEL_15:
        if (++v17 == v8)
          goto LABEL_44;
      }
    }
    v15 = 0;
    v18 = 0;
LABEL_44:
    if (v13)
      operator delete(v13);
    if (__p)
      operator delete(__p);
    if (v18 == v15)
      break;
    *(_QWORD *)&v149 = a3;
    sub_223FB6B6C(v18, v15, (uint64_t **)&v149, 126 - 2 * __clz(v15 - v18), 1);
    v41 = *v18;
    v42 = *a3;
    if (*(_QWORD *)(*a3 + 48 * *v18 + 40) < *(_QWORD *)(a1 + 16))
    {
      v15 = v18;
      goto LABEL_146;
    }
    *(_QWORD *)((char *)v146 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41;
    v142 = 0;
    v143 = 0;
    v144 = 0;
    v43 = a2[1] - *a2;
    if (!v43)
    {
      v78 = 0;
      v77 = v129;
      goto LABEL_103;
    }
    v133 = v18;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = v43 >> 3;
    v49 = (_QWORD *)(v42 + 48 * v41 + 16);
    v135 = v49;
    v136 = v43 >> 3;
    do
    {
      v50 = v47 >> 6;
      v51 = 1 << v47;
      if ((*(_QWORD *)(*v49 + 8 * (v47 >> 6)) & (1 << v47)) != 0)
      {
        v52 = *a2;
        if (v46 < v45)
        {
          *(_QWORD *)v46 = *(_QWORD *)(v52 + 8 * v47);
          v53 = (uint64_t)(v46 + 8);
          v143 = (uint64_t)(v46 + 8);
          v54 = *a3;
          v55 = a3[1] - *a3;
          if (!v55)
            goto LABEL_52;
          goto LABEL_73;
        }
        v56 = (v46 - v44) >> 3;
        v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 61)
          sub_22316E078();
        if ((v45 - v44) >> 2 > v57)
          v57 = (v45 - v44) >> 2;
        if ((unint64_t)(v45 - v44) >= 0x7FFFFFFFFFFFFFF8)
          v58 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v58 = v57;
        if (v58)
        {
          if (v58 >> 61)
            sub_223174E94();
          v59 = operator new(8 * v58);
          v60 = &v59[8 * v56];
          *v60 = *(_QWORD *)(v52 + 8 * v47);
          v53 = (uint64_t)(v60 + 1);
          v61 = v46 - v44;
          if (v46 != v44)
          {
LABEL_67:
            v62 = v61 - 8;
            if (v62 < 0x168
              || (v68 = (v46 - 8 - v44) & 0xFFFFFFFFFFFFFFF8, &v59[v46 - v44 - 8 - v68] > &v59[v46 - v44 - 8])
              || &v46[-v68 - 8] > v46 - 8
              || (unint64_t)(v44 - v59) < 0x20)
            {
              v63 = v46;
            }
            else
            {
              v69 = (v62 >> 3) + 1;
              v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
              v63 = &v46[-v70];
              v60 = (_QWORD *)((char *)v60 - v70);
              v71 = &v59[8 * v56 - 16];
              v72 = v46 - 16;
              v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v74 = *(_OWORD *)v72;
                *(v71 - 1) = *((_OWORD *)v72 - 1);
                *v71 = v74;
                v71 -= 2;
                v72 -= 32;
                v73 -= 4;
              }
              while (v73);
              if (v69 == (v69 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_70:
                v45 = &v59[8 * v58];
                v142 = v60;
                v144 = v45;
                if (v44)
                  goto LABEL_71;
                goto LABEL_72;
              }
            }
            do
            {
              v64 = *((_QWORD *)v63 - 1);
              v63 -= 8;
              *--v60 = v64;
            }
            while (v63 != v44);
            goto LABEL_70;
          }
        }
        else
        {
          v59 = 0;
          v60 = (_QWORD *)(8 * v56);
          *(_QWORD *)(8 * v56) = *(_QWORD *)(v52 + 8 * v47);
          v53 = 8 * v56 + 8;
          v61 = v46 - v44;
          if (v46 != v44)
            goto LABEL_67;
        }
        v45 = &v59[8 * v58];
        v142 = v60;
        v144 = v45;
        if (v44)
LABEL_71:
          operator delete(v44);
LABEL_72:
        v44 = (char *)v60;
        v49 = v135;
        v48 = v136;
        v143 = v53;
        v54 = *a3;
        v55 = a3[1] - *a3;
        if (!v55)
        {
LABEL_52:
          v46 = (char *)v53;
          goto LABEL_53;
        }
LABEL_73:
        v65 = v55 / 48;
        v66 = (_QWORD *)(v54 + 40);
        do
        {
          v67 = *(v66 - 3);
          if ((*(_QWORD *)(v67 + 8 * v50) & v51) != 0)
          {
            --*v66;
            *(_QWORD *)(v67 + 8 * v50) &= ~v51;
          }
          v66 += 6;
          --v65;
        }
        while (v65);
        goto LABEL_52;
      }
LABEL_53:
      ++v47;
    }
    while (v47 != v48);
    v75 = v142;
    v76 = v46 - (_BYTE *)v142;
    if (v46 == v142)
    {
      v78 = 0;
      v77 = v129;
      v18 = v133;
      v8 = v134;
      goto LABEL_103;
    }
    v77 = v129;
    v8 = v134;
    if (v76 < 0)
      sub_22316E078();
    v18 = v133;
    v78 = (float32x2_t *)operator new(v46 - (_BYTE *)v142);
    v79 = v76 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v78, v75, v79);
    v80 = (float32x2_t *)((char *)v78 + v79);
    if ((unint64_t)v79 <= 0xF)
      goto LABEL_103;
    if (v78 == v80)
      goto LABEL_103;
    v81 = 0;
    v82 = v78;
    do
    {
      v83 = *v82++;
      v84.i32[1] = v83.i32[1];
      v81 = vadd_f32(v81, v83);
    }
    while (v82 != v80);
    v85 = 0;
    *(float *)v84.i32 = (float)(unint64_t)(v79 >> 3);
    v86 = (float32x2_t)vdup_lane_s32(v84, 0);
    v87 = vdiv_f32(v81, v86);
    v88 = 0uLL;
    v89 = v78;
    do
    {
      v90 = *v89++;
      v91 = vsub_f32(v90, v87);
      v92 = (float32x2_t)vextq_s8(v88, v88, 8uLL).u64[0];
      *(float32x2_t *)v88.i8 = vmla_n_f32(*(float32x2_t *)v88.i8, v91, v91.f32[0]);
      v88.u64[1] = (unint64_t)vmla_lane_f32(v92, v91, v91, 1);
      --v85;
    }
    while (v89 != v80);
    v87.f32[0] = (float)(unint64_t)-v85;
    v154 = 0;
    v153 = 0x200000002;
    v155 = vdivq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s32((int32x2_t)v87, 0));
    sub_223FB7CA0((uint64_t)&v149);
    if (!v154)
      goto LABEL_103;
    v95 = fabsf(v152);
    if (v152 != 0.0 && v95 > 0.000001)
    {
      v93.i32[0] = HIDWORD(v150);
      v94.i32[0] = v151;
      v122 = 0;
      v123 = v78;
      do
      {
        v124 = *v123++;
        v122 = vadd_f32(v122, v124);
      }
      while (v123 != v80);
      v125 = vdiv_f32(v122, v86);
      v126 = vmla_f32(vmul_f32(v93, v93), v94, v94);
      v126.f32[0] = 1.0 / sqrtf(v126.f32[0]);
      v139 = vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v93, (int32x2_t)v94), v126.f32[0]);
      v140 = -vmla_lane_f32(vmul_f32(vmul_f32(v93, v126), v125), vmul_f32(v94, v126), v125, 1).f32[0];
      v97 = 1;
      v141 = 1;
      if (v78)
LABEL_104:
        operator delete(v78);
    }
    else
    {
LABEL_103:
      v97 = 0;
      v139.i8[0] = 0;
      v141 = 0;
      if (v78)
        goto LABEL_104;
    }
    if (v97
      && (v139.f32[0] != 0.0 && fabsf(v139.f32[0]) > 0.000001 || v139.f32[1] != 0.0 && fabsf(v139.f32[1]) > 0.000001))
    {
      sub_223FB6828((float32x2_t *)&v149, &v139, (uint64_t *)&v142);
      v99 = (char *)v77[1];
      v98 = (unint64_t)v77[2];
      if ((unint64_t)v99 < v98)
      {
        *(_OWORD *)v99 = v149;
        v100 = v99 + 16;
        goto LABEL_138;
      }
      v101 = *v77;
      v102 = v99 - (_BYTE *)*v77;
      v103 = v102 >> 4;
      v104 = (v102 >> 4) + 1;
      if (v104 >> 60)
        sub_22316E078();
      v105 = v98 - (_QWORD)v101;
      if (v105 >> 3 > v104)
        v104 = v105 >> 3;
      if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF0)
        v106 = 0xFFFFFFFFFFFFFFFLL;
      else
        v106 = v104;
      if (v106)
      {
        if (v106 >> 60)
          sub_223174E94();
        v107 = (char *)operator new(16 * v106);
        v108 = &v107[16 * v103];
        *(_OWORD *)v108 = v149;
        v100 = v108 + 16;
        v109 = (char *)(v99 - v101);
        if (v99 != v101)
        {
LABEL_121:
          v110 = (unint64_t)(v109 - 16);
          if (v110 < 0xB0)
            goto LABEL_127;
          v111 = (v99 - 16 - v101) & 0xFFFFFFFFFFFFFFF0;
          if (&v107[v102 - v111 - 16] < v99 && &v99[-v111 - 16] < v108)
            goto LABEL_127;
          v112 = (v110 >> 4) + 1;
          v113 = 16 * (v112 & 0x1FFFFFFFFFFFFFFCLL);
          v114 = &v99[-v113];
          v115 = &v108[-v113];
          v116 = (const double *)(v99 - 32);
          v117 = (double *)(v108 - 32);
          v118 = v112 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v156 = vld2q_f64(v116);
            v119 = v116 - 4;
            v157 = vld2q_f64(v119);
            vst2q_f64(v117, v156);
            v120 = v117 - 4;
            vst2q_f64(v120, v157);
            v117 -= 8;
            v116 -= 8;
            v118 -= 4;
          }
          while (v118);
          v99 = v114;
          v108 = v115;
          if (v112 != (v112 & 0x1FFFFFFFFFFFFFFCLL))
          {
LABEL_127:
            v115 = v108;
            do
            {
              v121 = *((_QWORD *)v99 - 2);
              v99 -= 16;
              *((_QWORD *)v115 - 2) = v121;
              v115 -= 16;
              *((_QWORD *)v115 + 1) = *((_QWORD *)v99 + 1);
            }
            while (v99 != v101);
          }
          v99 = (char *)*v77;
          *v77 = v115;
          v77[1] = v100;
          v77[2] = &v107[16 * v106];
          if (!v99)
          {
LABEL_138:
            v77[1] = v100;
            goto LABEL_139;
          }
LABEL_137:
          operator delete(v99);
          goto LABEL_138;
        }
      }
      else
      {
        v107 = 0;
        v108 = (char *)(16 * v103);
        v127 = (_OWORD *)(16 * v103);
        *v127 = v149;
        v100 = v127 + 1;
        v109 = (char *)(v99 - v101);
        if (v99 != v101)
          goto LABEL_121;
      }
      *v77 = v108;
      v77[1] = v100;
      v77[2] = &v107[16 * v106];
      if (!v99)
        goto LABEL_138;
      goto LABEL_137;
    }
LABEL_139:
    if (v142)
    {
      v143 = (uint64_t)v142;
      operator delete(v142);
    }
    v13 = v18;
  }
  if (!v15)
  {
    v128 = v146;
    if (v146)
      goto LABEL_143;
    return;
  }
LABEL_146:
  operator delete(v15);
  v128 = v146;
  if (v146)
LABEL_143:
    operator delete(v128);
}

void sub_223FB66B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  void *v35;
  void *v37;
  void *v38;

  if (__p)
    operator delete(__p);
  if (v35)
  {
    operator delete(v35);
    v37 = *(void **)a9;
    if (!*(_QWORD *)a9)
    {
LABEL_5:
      v38 = a30;
      if (!a30)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else
  {
    v37 = *(void **)a9;
    if (!*(_QWORD *)a9)
      goto LABEL_5;
  }
  *(_QWORD *)(a9 + 8) = v37;
  operator delete(v37);
  v38 = a30;
  if (!a30)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

void **sub_223FB67BC(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 4);
        if (v5)
          operator delete(v5);
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_223FB6828(float32x2_t *a1, float32x2_t *a2, uint64_t *a3)
{
  float v6;
  int8x16_t v8;
  float32x2_t v9;
  float v10;
  float v11;
  float32x2_t v13;
  float *v14;
  BOOL v15;
  float *v16;
  float *v17;
  int32x4_t v18;
  int8x16_t v19;
  float32x2_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int32x4_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int32x4_t v26;
  float32x2_t v27;
  int32x2_t v28;
  unsigned int v29;
  int8x8_t v30;
  int8x8_t v31;
  float v32;
  float *v33;
  float *v34;
  float *v35;
  float *v36;
  float v37;
  float v38;
  float *v39;
  float *v40;
  float32x2_t v41;

  v6 = fabsf(a2->f32[0]);
  if (a2->f32[0] != 0.0 && v6 > 0.000001)
  {
    v10 = a2->f32[1];
    v11 = fabsf(v10);
    if (v10 != 0.0 && v11 > 0.000001)
    {
      v13 = vdiv_f32((float32x2_t)0x3F800000BF800000, *a2);
      v41 = vmul_n_f32(v13, 1.0/ sqrtf(vmla_lane_f32(vmul_f32(v13, v13), (float32x2_t)vdup_lane_s32((int32x2_t)v13, 1), v13, 1).f32[0]));
      sub_223F27D68(a3, &v41, (uint64_t)&v39);
    }
    else
    {
      sub_223F27C9C(a3, (uint64_t)&v39);
    }
  }
  else
  {
    sub_223F27BD0(a3, (uint64_t)&v39);
  }
  v14 = v39;
  v15 = v39 == v40 || v39 + 1 == v40;
  v16 = v39;
  v17 = v39;
  if (!v15)
  {
    v32 = v39[1];
    v16 = v32 >= *v39 ? v39 : v39 + 1;
    v17 = v32 >= *v39 ? v39 + 1 : v39;
    v33 = v39 + 2;
    if (v39 + 2 != v40)
    {
      if (v32 >= *v39)
        v32 = *v39;
      v34 = v39;
      while (1)
      {
        v35 = v33;
        v36 = v33 + 1;
        if (v36 == v40)
          break;
        v38 = *v35;
        v37 = v35[1];
        if (v37 >= *v35)
        {
          if (v38 < v32)
          {
            v32 = *v35;
            v16 = v35;
          }
          if (v37 >= *v17)
            v17 = v34 + 3;
          v33 = v35 + 2;
          v34 = v35;
          if (v35 + 2 == v40)
            goto LABEL_17;
        }
        else
        {
          v32 = *v16;
          if (v37 < *v16)
          {
            v32 = v35[1];
            v16 = v36;
          }
          if (v38 >= *v17)
            v17 = v35;
          v33 = v35 + 2;
          v34 = v35;
          if (v35 + 2 == v40)
            goto LABEL_17;
        }
      }
      if (*v35 >= *v16)
      {
        if (*v35 >= *v17)
          v17 = v35;
      }
      else
      {
        v16 = v35;
      }
    }
  }
LABEL_17:
  v9.i32[0] = a2->i32[1];
  v18.i32[3] = 0;
  v18.i32[0] = v9.i32[0];
  *(float *)v8.i32 = -a2->f32[0];
  v19 = (int8x16_t)v9.u32[0];
  v19.i32[1] = v8.i32[0];
  v20 = *(float32x2_t *)(*a3 + 2 * ((char *)v16 - (char *)v39));
  *(float *)&v19.i32[2] = -vmla_lane_f32(vmul_f32(v9, v20), *(float32x2_t *)v8.i8, v20, 1).f32[0];
  *(float32x2_t *)v8.i8 = *a2;
  v20.f32[0] = -COERCE_FLOAT(*a2);
  v8.i32[2] = a2[1].i32[0];
  v21 = (float32x4_t)vextq_s8(vextq_s8(v8, v8, 0xCuLL), v8, 8uLL);
  v22 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), v8, 0xCuLL);
  v23 = (int32x4_t)vsubq_f32(vmulq_f32(v21, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), v19, 0xCuLL)), vmulq_f32(v22, (float32x4_t)vextq_s8(vextq_s8(v19, v19, 0xCuLL), v19, 8uLL)));
  *(float *)&v18.i32[1] = v20.f32[0];
  v24 = *(float32x2_t *)(*a3 + 2 * ((char *)v17 - (char *)v39));
  v25 = vdiv_f32(*(float32x2_t *)v23.i8, (float32x2_t)vdup_laneq_s32(v23, 2));
  *(float *)&v18.i32[2] = -vmla_lane_f32(vmul_f32(v9, v24), v20, v24, 1).f32[0];
  v26 = (int32x4_t)vsubq_f32(vmulq_f32(v21, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v18, v18), (int8x16_t)v18, 0xCuLL)), vmulq_f32(v22, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v18, (int8x16_t)v18, 0xCuLL), (int8x16_t)v18, 8uLL)));
  v27 = vdiv_f32(*(float32x2_t *)v26.i8, (float32x2_t)vdup_laneq_s32(v26, 2));
  v28 = vcgt_f32(v27, v25);
  if ((v28.i8[0] & 1) == 0)
  {
    if (((vceq_f32(v25, v27).u8[0] | (vsub_f32(v25, v27).f32[0] <= 0.000001)) & v28.i8[4] & 1) != 0)
      v29 = -1;
    else
      v29 = 0;
    v30 = (int8x8_t)vdup_n_s32(v29);
    v31 = vbsl_s8(v30, (int8x8_t)v25, (int8x8_t)v27);
    v27 = (float32x2_t)vbsl_s8(v30, (int8x8_t)v27, (int8x8_t)v25);
    v25 = (float32x2_t)v31;
  }
  *a1 = v25;
  a1[1] = v27;
  if (v14)
  {
    v40 = v14;
    operator delete(v14);
  }
}

uint64_t sub_223FB6B04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 48;
        *(_QWORD *)(a1 + 16) = v2 - 48;
        v5 = *(void **)(v2 - 32);
        if (!v5)
          break;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 48;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_223FB6B6C(uint64_t *result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int64_t v144;
  uint64_t *v145;
  int64_t v146;
  BOOL v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  int64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  unint64_t v188;
  uint64_t *v189;
  uint64_t v190;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v108 = *(a2 - 1);
        v109 = *v10;
        if (*(_QWORD *)(**a3 + 48 * v108 + 40) > *(_QWORD *)(**a3 + 48 * *v10 + 40))
        {
          *v10 = v108;
          goto LABEL_173;
        }
        return result;
      case 3:
        v110 = **a3;
        v109 = *v10;
        v111 = v10[1];
        v112 = *(_QWORD *)(v110 + 48 * v111 + 40);
        v113 = v110 + 48 * *v10;
        v115 = *(_QWORD *)(v113 + 40);
        v114 = (_QWORD *)(v113 + 40);
        v116 = *(a2 - 1);
        v117 = *(_QWORD *)(v110 + 48 * v116 + 40);
        if (v112 <= v115)
        {
          if (v117 > v112)
          {
            v10[1] = v116;
            *(a2 - 1) = v111;
            v181 = *v10;
            v180 = v10[1];
            if (*(_QWORD *)(v110 + 48 * v180 + 40) > *(_QWORD *)(v110 + 48 * *v10 + 40))
            {
              *v10 = v180;
              v10[1] = v181;
            }
          }
        }
        else
        {
          if (v117 <= v112)
          {
            *v10 = v111;
            v10[1] = v109;
            v190 = *(a2 - 1);
            if (*(_QWORD *)(v110 + 48 * v190 + 40) <= *v114)
              return result;
            v10[1] = v190;
          }
          else
          {
            *v10 = v116;
          }
LABEL_173:
          *(a2 - 1) = v109;
        }
        return result;
      case 4:
        return sub_223FB7B60(v10, v10 + 1, v10 + 2, a2 - 1, **a3);
      case 5:
        v118 = v10 + 1;
        v119 = v10 + 2;
        v120 = v10 + 3;
        result = sub_223FB7B60(v9, v9 + 1, v9 + 2, v9 + 3, **a3);
        v121 = *(a2 - 1);
        v122 = v9[3];
        v123 = **a3;
        if (*(_QWORD *)(v123 + 48 * v121 + 40) > *(_QWORD *)(v123 + 48 * v122 + 40))
        {
          *v120 = v121;
          *(a2 - 1) = v122;
          v124 = *v120;
          v125 = *v119;
          v126 = v123 + 48 * *v120;
          v128 = *(_QWORD *)(v126 + 40);
          v127 = (_QWORD *)(v126 + 40);
          if (v128 > *(_QWORD *)(v123 + 48 * *v119 + 40))
          {
            *v119 = v124;
            *v120 = v125;
            v129 = *v118;
            if (*v127 > *(_QWORD *)(v123 + 48 * *v118 + 40))
            {
              v9[1] = v124;
              v9[2] = v129;
              v130 = *v9;
              if (*v127 > *(_QWORD *)(v123 + 48 * *v9 + 40))
              {
                *v9 = v124;
                v9[1] = v130;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != a2)
            {
              v144 = (unint64_t)(v12 - 2) >> 1;
              v145 = *a3;
              v146 = v144;
              do
              {
                if (v144 >= v146)
                {
                  v148 = (2 * v146) | 1;
                  v149 = &v10[v148];
                  v150 = *v149;
                  if (2 * v146 + 2 >= v12)
                  {
                    v151 = *v145;
                  }
                  else
                  {
                    v151 = *v145;
                    if (*(_QWORD *)(*v145 + 48 * v150 + 40) > *(_QWORD *)(*v145 + 48 * v149[1] + 40))
                    {
                      v150 = v149[1];
                      ++v149;
                      v148 = 2 * v146 + 2;
                    }
                  }
                  v152 = &v10[v146];
                  v153 = *v152;
                  v154 = v151 + 48 * *v152;
                  v156 = *(_QWORD *)(v154 + 40);
                  v155 = (_QWORD *)(v154 + 40);
                  if (*(_QWORD *)(v151 + 48 * v150 + 40) <= v156)
                  {
                    while (1)
                    {
                      v157 = v149;
                      *v152 = v150;
                      if (v144 < v148)
                        break;
                      v158 = (2 * v148) | 1;
                      v149 = &v10[v158];
                      v148 = 2 * v148 + 2;
                      v150 = *v149;
                      if (v148 < v12)
                      {
                        if (*(_QWORD *)(v151 + 48 * v150 + 40) <= *(_QWORD *)(v151 + 48 * v149[1] + 40))
                        {
                          v148 = v158;
                        }
                        else
                        {
                          v150 = v149[1];
                          ++v149;
                        }
                        v152 = v157;
                        if (*(_QWORD *)(v151 + 48 * v150 + 40) > *v155)
                          break;
                      }
                      else
                      {
                        v148 = v158;
                        v152 = v157;
                        if (*(_QWORD *)(v151 + 48 * v150 + 40) > *v155)
                          break;
                      }
                    }
                    *v157 = v153;
                    v145 = *a3;
                  }
                }
                v147 = v146-- <= 0;
              }
              while (!v147);
              v159 = (unint64_t)v11 >> 3;
              do
              {
                v160 = 0;
                v161 = *v10;
                v162 = *a3;
                v163 = (unint64_t)(v159 - 2) >> 1;
                v164 = v10;
                do
                {
                  while (1)
                  {
                    v167 = &v164[v160];
                    v168 = v167[1];
                    v166 = v167 + 1;
                    v165 = v168;
                    result = (uint64_t *)(2 * v160);
                    v169 = (2 * v160) | 1;
                    v160 = 2 * v160 + 2;
                    if (v160 < v159)
                      break;
                    v160 = v169;
                    *v164 = v165;
                    v164 = v166;
                    if (v169 > v163)
                      goto LABEL_154;
                  }
                  result = v166 + 1;
                  if (*(_QWORD *)(*v162 + 48 * v165 + 40) <= *(_QWORD *)(*v162 + 48 * v166[1] + 40))
                  {
                    v160 = v169;
                  }
                  else
                  {
                    v165 = v166[1];
                    ++v166;
                  }
                  *v164 = v165;
                  v164 = v166;
                }
                while (v160 <= v163);
LABEL_154:
                if (v166 == --a2)
                {
                  *v166 = v161;
                }
                else
                {
                  *v166 = *a2;
                  *a2 = v161;
                  v170 = (char *)v166 - (char *)v10 + 8;
                  if (v170 >= 9)
                  {
                    v171 = (((unint64_t)v170 >> 3) - 2) >> 1;
                    v172 = &v10[v171];
                    v173 = *v172;
                    v174 = *v166;
                    v175 = **a3;
                    v176 = v175 + 48 * *v166;
                    v178 = *(uint64_t **)(v176 + 40);
                    v177 = (_QWORD *)(v176 + 40);
                    result = v178;
                    if (*(_QWORD *)(v175 + 48 * *v172 + 40) > (unint64_t)v178)
                    {
                      do
                      {
                        v179 = v172;
                        *v166 = v173;
                        if (!v171)
                          break;
                        v171 = (v171 - 1) >> 1;
                        v172 = &v10[v171];
                        v173 = *v172;
                        result = *(uint64_t **)(v175 + 48 * *v172 + 40);
                        v166 = v179;
                      }
                      while ((unint64_t)result > *v177);
                      *v179 = v174;
                    }
                  }
                }
                v147 = v159-- <= 2;
              }
              while (!v147);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = **a3;
          v16 = *(a2 - 1);
          v17 = *(_QWORD *)(v15 + 48 * v16 + 40);
          if ((unint64_t)v11 < 0x401)
          {
            v24 = *v10;
            v25 = *v14;
            v26 = *(_QWORD *)(v15 + 48 * *v10 + 40);
            v27 = v15 + 48 * *v14;
            v29 = *(_QWORD *)(v27 + 40);
            v28 = (_QWORD *)(v27 + 40);
            if (v26 <= v29)
            {
              if (v17 > v26)
              {
                *v10 = v16;
                *(a2 - 1) = v24;
                v31 = *v14;
                if (*(_QWORD *)(v15 + 48 * *v10 + 40) > *(_QWORD *)(v15 + 48 * *v14 + 40))
                {
                  *v14 = *v10;
                  *v10 = v31;
                  --a4;
                  v32 = v31;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v17 <= v26)
            {
              *v14 = v24;
              *v10 = v25;
              v46 = *(a2 - 1);
              if (*(_QWORD *)(v15 + 48 * v46 + 40) <= *v28)
                goto LABEL_32;
              *v10 = v46;
            }
            else
            {
              *v14 = v16;
            }
            *(a2 - 1) = v25;
LABEL_32:
            --a4;
            v32 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = *v14;
          v19 = *v10;
          v20 = *(_QWORD *)(v15 + 48 * *v14 + 40);
          v21 = v15 + 48 * *v10;
          v23 = *(_QWORD *)(v21 + 40);
          v22 = (_QWORD *)(v21 + 40);
          if (v20 <= v23)
          {
            if (v17 > v20)
            {
              *v14 = v16;
              *(a2 - 1) = v18;
              v30 = *v10;
              if (*(_QWORD *)(v15 + 48 * *v14 + 40) > *(_QWORD *)(v15 + 48 * *v10 + 40))
              {
                *v10 = *v14;
                *v14 = v30;
              }
            }
          }
          else
          {
            if (v17 <= v20)
            {
              *v10 = v18;
              *v14 = v19;
              v33 = *(a2 - 1);
              if (*(_QWORD *)(v15 + 48 * v33 + 40) <= *v22)
                goto LABEL_23;
              *v14 = v33;
            }
            else
            {
              *v10 = v16;
            }
            *(a2 - 1) = v19;
          }
LABEL_23:
          v34 = &v10[v13];
          v37 = *(v34 - 1);
          v35 = v34 - 1;
          v36 = v37;
          v38 = v10[1];
          v39 = *(_QWORD *)(v15 + 48 * v37 + 40);
          v40 = v15 + 48 * v38;
          v42 = *(_QWORD *)(v40 + 40);
          v41 = (_QWORD *)(v40 + 40);
          v43 = *(a2 - 2);
          v44 = *(_QWORD *)(v15 + 48 * v43 + 40);
          if (v39 <= v42)
          {
            if (v44 > v39)
            {
              *v35 = v43;
              *(a2 - 2) = v36;
              v45 = v10[1];
              if (*(_QWORD *)(v15 + 48 * *v35 + 40) > *(_QWORD *)(v15 + 48 * v45 + 40))
              {
                v10[1] = *v35;
                *v35 = v45;
              }
            }
          }
          else
          {
            if (v44 <= v39)
            {
              v10[1] = v36;
              *v35 = v38;
              v47 = *(a2 - 2);
              if (*(_QWORD *)(v15 + 48 * v47 + 40) <= *v41)
                goto LABEL_37;
              *v35 = v47;
            }
            else
            {
              v10[1] = v43;
            }
            *(a2 - 2) = v38;
          }
LABEL_37:
          v48 = &v10[v13];
          v51 = v48[1];
          v49 = v48 + 1;
          v50 = v51;
          v52 = v10[2];
          v53 = *(_QWORD *)(v15 + 48 * v51 + 40);
          v54 = v15 + 48 * v52;
          v56 = *(_QWORD *)(v54 + 40);
          v55 = (_QWORD *)(v54 + 40);
          v57 = *(a2 - 3);
          v58 = *(_QWORD *)(v15 + 48 * v57 + 40);
          if (v53 <= v56)
          {
            if (v58 > v53)
            {
              *v49 = v57;
              *(a2 - 3) = v50;
              v59 = v10[2];
              if (*(_QWORD *)(v15 + 48 * *v49 + 40) > *(_QWORD *)(v15 + 48 * v59 + 40))
              {
                v10[2] = *v49;
                *v49 = v59;
              }
            }
          }
          else
          {
            if (v58 <= v53)
            {
              v10[2] = v50;
              *v49 = v52;
              v60 = *(a2 - 3);
              if (*(_QWORD *)(v15 + 48 * v60 + 40) <= *v55)
                goto LABEL_46;
              *v49 = v60;
            }
            else
            {
              v10[2] = v57;
            }
            *(a2 - 3) = v52;
          }
LABEL_46:
          v61 = *v14;
          v62 = *v35;
          v63 = v15 + 48 * *v35;
          v66 = *(_QWORD *)(v63 + 40);
          v65 = (_QWORD *)(v63 + 40);
          v64 = v66;
          v67 = *(_QWORD *)(v15 + 48 * *v14 + 40);
          v68 = *v49;
          v69 = v15 + 48 * *v49;
          v71 = *(uint64_t **)(v69 + 40);
          v70 = (_QWORD *)(v69 + 40);
          result = v71;
          if (v67 > v64)
          {
            if ((unint64_t)result <= v67)
            {
              *v35 = v61;
              *v14 = v62;
              v35 = v14;
              v61 = v68;
              if (*v70 <= *v65)
              {
                v72 = *v10;
                *v10 = v62;
                *v14 = v72;
                --a4;
                v32 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if ((unint64_t)result <= v67)
            goto LABEL_54;
          *v14 = v68;
          *v49 = v61;
          v49 = v14;
          v61 = v62;
          if (*v70 > *v65)
          {
LABEL_53:
            *v35 = v68;
            *v49 = v62;
LABEL_54:
            v73 = *v10;
            *v10 = v61;
            *v14 = v73;
            --a4;
            v32 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            v74 = v15 + 48 * v32;
            v77 = *(_QWORD *)(v74 + 40);
            v75 = (unint64_t *)(v74 + 40);
            v76 = v77;
            if (*(_QWORD *)(v15 + 48 * *(v10 - 1) + 40) > v77)
              goto LABEL_56;
            if (v76 <= *(_QWORD *)(v15 + 48 * *(a2 - 1) + 40))
            {
              v99 = v10 + 1;
              do
              {
                v10 = v99;
                if (v99 >= a2)
                  break;
                ++v99;
              }
              while (v76 <= *(_QWORD *)(v15 + 48 * *v10 + 40));
            }
            else
            {
              do
              {
                v98 = v10[1];
                ++v10;
              }
              while (v76 <= *(_QWORD *)(v15 + 48 * v98 + 40));
            }
            v100 = a2;
            if (v10 < a2)
            {
              v100 = a2;
              do
                v101 = *--v100;
              while (v76 > *(_QWORD *)(v15 + 48 * v101 + 40));
            }
            if (v10 < v100)
            {
              v102 = *v10;
              v103 = *v100;
              do
              {
                *v10 = v103;
                *v100 = v102;
                v104 = *v75;
                do
                {
                  v105 = v10[1];
                  ++v10;
                  v102 = v105;
                }
                while (v104 <= *(_QWORD *)(v15 + 48 * v105 + 40));
                do
                {
                  v106 = *--v100;
                  v103 = v106;
                }
                while (v104 > *(_QWORD *)(v15 + 48 * v106 + 40));
              }
              while (v10 < v100);
            }
            v107 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v107;
            a5 = 0;
            *v107 = v32;
            continue;
          }
          v97 = *v10;
          *v10 = v68;
          *v14 = v97;
          --a4;
          v32 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v78 = 0;
          v79 = **a3;
          v80 = v79 + 48 * v32;
          v83 = *(_QWORD *)(v80 + 40);
          v81 = (unint64_t *)(v80 + 40);
          v82 = v83;
          do
            v84 = v10[++v78];
          while (*(_QWORD *)(v79 + 48 * v84 + 40) > v82);
          v85 = &v10[v78];
          v86 = a2;
          if (v78 == 1)
          {
            v86 = a2;
            do
            {
              if (v85 >= v86)
                break;
              v88 = *--v86;
            }
            while (*(_QWORD *)(v79 + 48 * v88 + 40) <= v82);
          }
          else
          {
            do
              v87 = *--v86;
            while (*(_QWORD *)(v79 + 48 * v87 + 40) <= v82);
          }
          if (v85 >= v86)
          {
            v95 = v85 - 1;
            if (v85 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v89 = *v86;
            v90 = &v10[v78];
            v91 = v86;
            do
            {
              *v90 = v89;
              *v91 = v84;
              v92 = *v81;
              do
              {
                v93 = v90[1];
                ++v90;
                v84 = v93;
              }
              while (*(_QWORD *)(v79 + 48 * v93 + 40) > v92);
              do
              {
                v94 = *--v91;
                v89 = v94;
              }
              while (*(_QWORD *)(v79 + 48 * v94 + 40) <= v92);
            }
            while (v90 < v91);
            v95 = v90 - 1;
            if (v90 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v95;
          }
LABEL_74:
          *v95 = v32;
          if (v85 < v86)
            goto LABEL_77;
          v96 = sub_223FB775C(v10, v95, a3);
          v10 = v95 + 1;
          result = (uint64_t *)sub_223FB775C(v95 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v96)
              continue;
LABEL_77:
            result = (uint64_t *)sub_223FB6B6C(v9, v95, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v95 + 1;
            continue;
          }
          a2 = v95;
          if (v96)
            return result;
          goto LABEL_2;
        }
        v131 = *a3;
        if ((a5 & 1) != 0)
        {
          if (v10 != a2)
          {
            v132 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v133 = *v131;
              v134 = 8;
              v135 = v10;
              do
              {
                v138 = *v135;
                v137 = v135[1];
                v135 = v132;
                v139 = v133 + 48 * v137;
                v141 = *(_QWORD *)(v139 + 40);
                v140 = (_QWORD *)(v139 + 40);
                if (v141 > *(_QWORD *)(v133 + 48 * v138 + 40))
                {
                  v142 = v134;
                  do
                  {
                    *(uint64_t *)((char *)v10 + v142) = v138;
                    v143 = v142 - 8;
                    if (v142 == 8)
                    {
                      v136 = v10;
                      goto LABEL_117;
                    }
                    v138 = *(uint64_t *)((char *)v10 + v142 - 16);
                    result = *(uint64_t **)(v133 + 48 * v138 + 40);
                    v142 -= 8;
                  }
                  while (*v140 > (unint64_t)result);
                  v136 = (uint64_t *)((char *)v10 + v143);
LABEL_117:
                  *v136 = v137;
                }
                v132 = v135 + 1;
                v134 += 8;
              }
              while (v135 + 1 != a2);
            }
          }
        }
        else if (v10 != a2)
        {
          v182 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v183 = *v131;
            do
            {
              v185 = *v9;
              v184 = v9[1];
              v9 = v182;
              v186 = v183 + 48 * v184;
              v188 = *(_QWORD *)(v186 + 40);
              v187 = (_QWORD *)(v186 + 40);
              if (v188 > *(_QWORD *)(v183 + 48 * v185 + 40))
              {
                v189 = v9;
                do
                {
                  *v189 = v185;
                  v185 = *(v189 - 2);
                  --v189;
                }
                while (*v187 > *(_QWORD *)(v183 + 48 * v185 + 40));
                *v189 = v184;
              }
              v182 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

BOOL sub_223FB775C(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(_QWORD *)(**a3 + 48 * v8 + 40) > *(_QWORD *)(**a3 + 48 * *a1 + 40))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      v10 = **a3;
      v11 = *a1;
      v12 = a1[1];
      v13 = *(_QWORD *)(v10 + 48 * v12 + 40);
      v14 = v10 + 48 * *a1;
      v16 = *(_QWORD *)(v14 + 40);
      v15 = (_QWORD *)(v14 + 40);
      v17 = *(a2 - 1);
      v18 = *(_QWORD *)(v10 + 48 * v17 + 40);
      if (v13 <= v16)
      {
        if (v18 > v13)
        {
          a1[1] = v17;
          *(a2 - 1) = v12;
          v51 = *a1;
          v50 = a1[1];
          if (*(_QWORD *)(v10 + 48 * v50 + 40) > *(_QWORD *)(v10 + 48 * *a1 + 40))
          {
            *a1 = v50;
            a1[1] = v51;
          }
        }
      }
      else if (v18 <= v13)
      {
        *a1 = v12;
        a1[1] = v11;
        v62 = *(a2 - 1);
        if (*(_QWORD *)(v10 + 48 * v62 + 40) > *v15)
        {
          a1[1] = v62;
          *(a2 - 1) = v11;
        }
      }
      else
      {
        *a1 = v17;
        *(a2 - 1) = v11;
      }
      return result;
    case 4:
      sub_223FB7B60(a1, a1 + 1, a1 + 2, a2 - 1, **a3);
      return 1;
    case 5:
      v37 = a1 + 1;
      v38 = a1 + 2;
      v39 = a1 + 3;
      sub_223FB7B60(a1, a1 + 1, a1 + 2, a1 + 3, **a3);
      v40 = *(a2 - 1);
      v41 = a1[3];
      v42 = **a3;
      if (*(_QWORD *)(v42 + 48 * v40 + 40) <= *(_QWORD *)(v42 + 48 * v41 + 40))
        return 1;
      *v39 = v40;
      *(a2 - 1) = v41;
      v43 = *v39;
      v44 = *v38;
      v45 = v42 + 48 * *v39;
      v47 = *(_QWORD *)(v45 + 40);
      v46 = (_QWORD *)(v45 + 40);
      if (v47 <= *(_QWORD *)(v42 + 48 * *v38 + 40))
        return 1;
      *v38 = v43;
      *v39 = v44;
      v48 = *v37;
      if (*v46 <= *(_QWORD *)(v42 + 48 * *v37 + 40))
        return 1;
      a1[1] = v43;
      a1[2] = v48;
      v49 = *a1;
      if (*v46 <= *(_QWORD *)(v42 + 48 * *a1 + 40))
        return 1;
      *a1 = v43;
      a1[1] = v49;
      return 1;
    default:
      v20 = a1 + 2;
      v19 = a1[2];
      v21 = a1[1];
      v22 = **a3;
      v23 = *a1;
      v24 = *(_QWORD *)(v22 + 48 * v21 + 40);
      v25 = v22 + 48 * *a1;
      v28 = *(_QWORD *)(v25 + 40);
      v26 = (unint64_t *)(v25 + 40);
      v27 = v28;
      v29 = v22 + 48 * v19;
      v32 = *(_QWORD *)(v29 + 40);
      v31 = (unint64_t *)(v29 + 40);
      v30 = v32;
      if (v24 <= v27)
      {
        if (v30 <= v24)
          goto LABEL_25;
        a1[1] = v19;
        *v20 = v21;
        v35 = *v31;
        v36 = *v26;
        v33 = a1;
        v34 = a1 + 1;
      }
      else
      {
        v33 = a1;
        v34 = a1 + 2;
        if (v30 > v24)
          goto LABEL_24;
        *a1 = v21;
        a1[1] = v23;
        v35 = *v31;
        v36 = *v26;
        v33 = a1 + 1;
        v34 = a1 + 2;
      }
      if (v35 <= v36)
        goto LABEL_25;
LABEL_24:
      *v33 = v19;
      *v34 = v23;
LABEL_25:
      v52 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v53 = 0;
      v54 = 24;
      break;
  }
  while (1)
  {
    v55 = *v52;
    v56 = *v20;
    v57 = v22 + 48 * *v52;
    v59 = *(_QWORD *)(v57 + 40);
    v58 = (_QWORD *)(v57 + 40);
    if (v59 > *(_QWORD *)(v22 + 48 * v56 + 40))
      break;
LABEL_34:
    v20 = v52;
    v54 += 8;
    if (++v52 == a2)
      return 1;
  }
  v60 = v54;
  do
  {
    *(uint64_t *)((char *)a1 + v60) = v56;
    v61 = v60 - 8;
    if (v60 == 8)
    {
      *a1 = v55;
      if (++v53 != 8)
        goto LABEL_34;
      return v52 + 1 == a2;
    }
    v56 = *(uint64_t *)((char *)a1 + v60 - 16);
    v60 -= 8;
  }
  while (*v58 > *(_QWORD *)(v22 + 48 * v56 + 40));
  *(uint64_t *)((char *)a1 + v61) = v55;
  if (++v53 != 8)
    goto LABEL_34;
  return v52 + 1 == a2;
}

uint64_t *sub_223FB7B60(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *a2;
  v6 = *result;
  v7 = *(_QWORD *)(a5 + 48 * *a2 + 40);
  v8 = a5 + 48 * *result;
  v10 = *(_QWORD *)(v8 + 40);
  v9 = (_QWORD *)(v8 + 40);
  v11 = *a3;
  v12 = *(_QWORD *)(a5 + 48 * *a3 + 40);
  if (v7 <= v10)
  {
    if (v12 <= v7)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v11;
      *a3 = v5;
      v13 = *result;
      if (*(_QWORD *)(a5 + 48 * *a2 + 40) > *(_QWORD *)(a5 + 48 * *result + 40))
      {
        *result = *a2;
        *a2 = v13;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v12 > v7)
    {
      *result = v11;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*(_QWORD *)(a5 + 48 * *a3 + 40) > *v9)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(_QWORD *)(a5 + 48 * *a4 + 40) > *(_QWORD *)(a5 + 48 * v5 + 40))
  {
    *a3 = *a4;
    *a4 = v5;
    v14 = *a2;
    if (*(_QWORD *)(a5 + 48 * *a3 + 40) > *(_QWORD *)(a5 + 48 * *a2 + 40))
    {
      *a2 = *a3;
      *a3 = v14;
      v15 = *result;
      if (*(_QWORD *)(a5 + 48 * *a2 + 40) > *(_QWORD *)(a5 + 48 * *result + 40))
      {
        *result = *a2;
        *a2 = v15;
      }
    }
  }
  return result;
}

uint64_t sub_223FB7CA0(uint64_t a1)
{
  uint64_t result;
  void *v3;

  sub_22322BD7C();
  v3 = operator new((4 * 0.0 + 31) & 0x7FFFFFFE0, (std::align_val_t)0x20uLL);
  sub_22322BD7C();
  result = MEMORY[0x227684CB8](v3, 0x1000C8052888210);
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

void sub_223FB7DD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CB8](v1, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

uint64_t sub_223FB7DF4(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  float *v18;
  float v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  float *v27;
  float v28;
  int v29;
  unsigned int v30;
  int v31;
  float v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  float v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  float *v48;
  float v49;
  int v50;
  unsigned int v51;
  float v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  float v57;
  uint64_t v58;
  unsigned int v59;

  v3 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a2 + 32))
  {
    v4 = HIDWORD(*(_QWORD *)(a2 + 32));
    v5 = a3 >> 1;
    v6 = *(_DWORD *)(result + 44);
    v7 = *(_QWORD *)(result + 24);
    v8 = *(_QWORD *)(a2 + 24);
    v9 = v5 + 1;
    v10 = *(_DWORD *)(a2 + 40);
    v11 = *(_DWORD *)(a2 + 44);
    v12 = v4 + ~(_DWORD)v5;
    v13 = v4 - 1;
    if ((_DWORD)v5 + 1 == v12)
    {
      if (a3 > 1)
      {
        v43 = 0;
        v44 = v11 + v11 * v5;
        v45 = ~v5 + v4;
        v46 = *(_DWORD *)(a2 + 44);
        do
        {
          v47 = *(_DWORD *)(result + 40);
          v48 = (float *)(v7 + 4 * (v6 * v43));
          v49 = 0.0;
          v50 = -(int)v5;
          v51 = a3;
          do
          {
            v49 = v49 + v48[(v50 & ~(v50 >> 31)) * v47];
            ++v50;
            --v51;
          }
          while (v51);
          *(float *)(v8 + 4 * (v10 * v43)) = v49;
          v52 = *v48;
          v53 = v9 * v47;
          v54 = v46;
          v55 = a3 >> 1;
          do
          {
            v49 = v49 + (float)(v48[v53] - v52);
            *(float *)(v8 + 4 * v54) = v49;
            v54 += v11;
            v53 += v47;
            --v55;
          }
          while (v55);
          v56 = 0;
          v57 = v48[v47 * v13];
          v58 = v45;
          v59 = v44;
          do
          {
            v49 = v49 + (float)(v57 - v48[v56]);
            *(float *)(v8 + 4 * v59) = v49;
            v59 += v11;
            v56 += v47;
            --v58;
          }
          while (v58);
          ++v43;
          v46 += v10;
          v44 += v10;
        }
        while (v43 != v3);
      }
      else
      {
        v14 = v11 * v9;
        v15 = 0;
        v16 = 0;
        if (a3)
        {
          do
          {
            v17 = *(_DWORD *)(result + 40);
            v18 = (float *)(v7 + 4 * v15);
            v19 = *v18 + 0.0;
            *(float *)(v8 + 4 * v16) = v19;
            *(float *)(v8 + 4 * (v14 + v16)) = v19 + (float)(v18[v17 * v13] - *v18);
            v16 += v10;
            v15 += v6;
            --v3;
          }
          while (v3);
        }
        else
        {
          do
          {
            v20 = *(_DWORD *)(result + 40);
            *(_DWORD *)(v8 + 4 * v16) = 0;
            *(float *)(v8 + 4 * (v14 + v16)) = (float)(*(float *)(v7 + 4 * v15 + 4 * (v20 * v13))
                                                       - *(float *)(v7 + 4 * v15))
                                               + 0.0;
            v16 += v10;
            v15 += v6;
            --v3;
          }
          while (v3);
        }
      }
    }
    else
    {
      v21 = 0;
      v22 = ~v5 + v12;
      v23 = v11 * v12;
      v24 = v4 - 2 * v5 - 2;
      v25 = *(_DWORD *)(a2 + 44);
      do
      {
        v26 = *(_DWORD *)(result + 40);
        v27 = (float *)(v7 + 4 * (v6 * v21));
        if (a3)
        {
          v28 = 0.0;
          v29 = -(int)v5;
          v30 = a3;
          do
          {
            v28 = v28 + v27[(v29 & ~(v29 >> 31)) * v26];
            ++v29;
            --v30;
          }
          while (v30);
          v31 = v10 * v21;
          *(float *)(v8 + 4 * (v10 * v21)) = v28;
          if (a3 >= 2)
          {
            v32 = *v27;
            v33 = v9 * v26;
            v34 = v25;
            v35 = a3 >> 1;
            do
            {
              v28 = v28 + (float)(v27[v33] - v32);
              *(float *)(v8 + 4 * v34) = v28;
              v34 += v11;
              v33 += v26;
              --v35;
            }
            while (v35);
          }
        }
        else
        {
          v31 = v10 * v21;
          *(_DWORD *)(v8 + 4 * (v10 * v21)) = 0;
          v28 = 0.0;
        }
        v36 = 0;
        v37 = v11 * v9 + v31;
        v38 = v22;
        do
        {
          v28 = v28 + (float)(v27[((v9 + v5) * v26 + v36)] - v27[v36]);
          *(float *)(v8 + 4 * v37) = v28;
          v37 += v11;
          v36 += v26;
          --v38;
        }
        while (v38);
        v39 = v27[v26 * v13];
        v40 = v23 + v31;
        v41 = v24 * v26;
        v42 = v5 + 1;
        do
        {
          v28 = v28 + (float)(v39 - v27[v41]);
          *(float *)(v8 + 4 * v40) = v28;
          v40 += v11;
          v41 += v26;
          --v42;
        }
        while (v42);
        ++v21;
        v25 += v10;
      }
      while (v21 != v3);
    }
  }
  return result;
}

void sub_223FB80F4(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, uint64_t *a10)
{
  uint64_t v14;
  size_t v15;
  float32x4_t *v16;
  float32x4_t *v17;
  float v18;
  float v19;
  uint64_t v20;
  float32x4_t v21;
  int32x4_t v22;
  float32x4_t *v23;
  int32x4_t v24;
  int32x4_t v25;
  uint64_t v26;
  __n128 v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  float v32;
  uint64_t v33;
  float v34;
  float v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  float *v50;
  float v51;
  int v52;
  float *v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  int v58;
  int v59;
  float v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  float v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  float v70;
  float v71;
  float v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  float v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  size_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  __int16 v85;
  unint64_t v86;
  float32x4_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  __int16 v92;
  float32x4_t *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  __int16 v100;
  unint64_t v101;
  float32x4_t *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  __int16 v106;
  float32x4_t *v107;
  float *v108;
  int32x2_t v109;
  float *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  float v115;
  float v116;
  float32x4_t *v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  unsigned int v130;
  float *v131;
  float v132;
  int v133;
  float *v134;
  uint64_t v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  float v144;
  int v145;
  unsigned int v146;
  int v147;
  float v148;
  float v149;
  float v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  float v154;
  unsigned int v155;
  unint64_t v156;
  unint64_t v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  int v161;
  int v162;
  uint64_t v163;
  int v164;
  int v165;
  int v166;
  unsigned int v167;
  uint64_t v168;
  float v169;
  unsigned int v170;
  int v171;
  float v172;
  float v173;
  float v174;
  std::__shared_weak_count *v175;
  uint64_t *v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  __int16 v184;
  unint64_t v185;
  float32x4_t *v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  __int16 v191;
  float32x4_t *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t v198;
  _DWORD *v199;
  unint64_t v200;
  unsigned int v201;
  int v202;
  unint64_t v203;
  unint64_t v204;
  _DWORD *v205;
  unsigned int v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unsigned int v213;
  int v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unsigned int v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  int v225;
  int v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  int v231;
  float v232;
  __n128 v233;
  int32x4_t v234;
  int32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x2_t v238;
  float32x2_t v239;
  float32x2_t v240;
  _DWORD *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  float32x4_t v246;
  int8x16_t v247;
  int8x16_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  unint64_t v253;
  int v254;
  unsigned int v255;
  unsigned int v256;
  uint64_t v257;
  uint64_t v258;
  int8x16_t v259;
  int8x16_t v260;
  float32x2_t v261;
  float32x2_t v262;
  float32x4_t v263;
  _DWORD *v264;
  unint64_t *v265;
  unint64_t v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  _DWORD *v271;
  unsigned int v272;
  uint64_t v273;
  unsigned int v274;
  BOOL v275;
  uint64_t v276;
  unint64_t v277;
  __int8 *v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  BOOL v282;
  BOOL v283;
  BOOL v284;
  BOOL v285;
  BOOL v286;
  BOOL v287;
  uint64_t v289;
  float32x4_t v290;
  unsigned int v291;
  unint64_t v292;
  float32x4_t *v293;
  _OWORD *v294;
  float32x4_t v295;
  float32x4_t v296;
  uint64_t __n;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  float32x4_t *__src;
  uint64_t v304;
  unsigned int v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  std::__shared_weak_count *v310;
  unsigned int v311;
  __n128 v312;
  float *__dst;
  _DWORD *__dsta;
  std::__shared_weak_count *v316;
  unsigned int v317;
  std::__shared_weak_count *v318;
  uint64_t (**v319)();
  uint64_t v320;
  std::__shared_weak_count *v321;
  float32x4_t *v322;
  __int128 v323;
  __int16 v324;

  if ((a3 < 2 || (a3 & 1) == 0)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Vision/NormalEstimation.cpp", 555, (uint64_t)"kernelSize > 1 && kernelSize % 2 == 1", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v309 = a3 >> 1;
  a9.n128_f32[0] = (float)v309;
  v312 = a9;
  v14 = a3;
  v15 = 4 * a3;
  v16 = (float32x4_t *)operator new((v15 + 31) & 0x7FFFFFFE0, (std::align_val_t)0x20uLL);
  v17 = v16;
  v317 = a3;
  if (a3)
  {
    bzero(v16, v15);
    v18 = v312.n128_f32[0];
    v19 = 1.0 / (float)((float)(v312.n128_f32[0] * (float)(v309 + 1)) / 3.0);
    if (a3 < 8)
    {
      v20 = 0;
      do
      {
LABEL_10:
        v17->f32[v20] = v19 * (float)((float)v20 - v18);
        ++v20;
      }
      while (a3 != v20);
      goto LABEL_11;
    }
    v20 = a3 & 0xFFFFFFF8;
    v21 = (float32x4_t)vdupq_lane_s32((int32x2_t)v312.n128_u64[0], 0);
    v22 = (int32x4_t)xmmword_2246499B0;
    v23 = v17 + 1;
    v24.i64[0] = 0x400000004;
    v24.i64[1] = 0x400000004;
    v25.i64[0] = 0x800000008;
    v25.i64[1] = 0x800000008;
    v26 = v20;
    do
    {
      v23[-1] = vmulq_n_f32(vsubq_f32(vcvtq_f32_u32((uint32x4_t)v22), v21), v19);
      *v23 = vmulq_n_f32(vsubq_f32(vcvtq_f32_u32((uint32x4_t)vaddq_s32(v22, v24)), v21), v19);
      v22 = vaddq_s32(v22, v25);
      v23 += 2;
      v26 -= 8;
    }
    while (v26);
    v18 = v312.n128_f32[0];
    if (v20 != a3)
      goto LABEL_10;
  }
LABEL_11:
  __src = v17;
  __dst = (float *)operator new((v15 + 31) & 0x7FFFFFFE0, (std::align_val_t)0x20uLL);
  if (((v15 + 31) & 0x7FFFFFFE0) >> 2 < a3)
  {
    MEMORY[0x227684CB8](__dst, 0x1000C8052888210);
    __dst = (float *)operator new((v15 + 31) & 0x7FFFFFFE0, (std::align_val_t)0x20uLL);
  }
  v300 = a7;
  __n = 4 * a3;
  v298 = a8;
  v304 = a6;
  v299 = (v15 + 31) & 0x7FFFFFFE0;
  if (a3)
  {
    memcpy(__dst, v17, v15);
    v27.n128_f32[0] = *__dst;
  }
  v28 = a3;
  v29 = a1[1];
  v30 = HIDWORD(v29);
  v31 = v309 + 1;
  v32 = (float)(v309 + 1);
  if (HIDWORD(v29))
  {
    v33 = 0;
    v27.n128_f32[0] = __dst[1] - v27.n128_f32[0];
    v34 = v27.n128_f32[0] * v312.n128_f32[0];
    v35 = v27.n128_f32[0] * v32;
    v36 = *((_DWORD *)a1 + 5);
    v37 = *a1;
    v38 = *(_QWORD *)(a4 + 24);
    v39 = *(_QWORD *)(a5 + 24);
    v40 = *(_DWORD *)(a4 + 40);
    v41 = *(_DWORD *)(a4 + 44);
    v42 = *(_DWORD *)(a5 + 40);
    v43 = *(_DWORD *)(a5 + 44);
    v44 = v29 + ~(_DWORD)v309;
    v45 = v29 - 1;
    v46 = v29 - 2 * v309 - 2;
    v47 = v41;
    v48 = v43;
    while (1)
    {
      v49 = *((_DWORD *)a1 + 4);
      v50 = (float *)(v37 + 4 * (v36 * v33));
      if (v28)
        break;
      v58 = v40 * v33;
      *(_DWORD *)(v38 + 4 * (v40 * v33)) = 0;
      v59 = v42 * v33;
      *(_DWORD *)(v39 + 4 * (v42 * v33)) = 0;
      v55 = 0.0;
      v51 = 0.0;
      if (v31 != v44)
        goto LABEL_26;
LABEL_28:
      v72 = 1.0 / v50[v49 * v45];
      v73 = v43 * v44 + v59;
      v74 = v41 * v44 + v58;
      v75 = v46 * v49;
      v76 = v309 + 1;
      do
      {
        v77 = 1.0 / v50[v75];
        v51 = v51 + (float)((float)(v34 * v72) + (float)((float)(v35 * v77) - (float)(v27.n128_f32[0] * v55)));
        v55 = v55 + (float)(v72 - v77);
        *(float *)(v38 + 4 * v74) = v51;
        *(float *)(v39 + 4 * v73) = v55;
        v73 += v43;
        v74 += v41;
        v75 += v49;
        --v76;
      }
      while (v76);
      ++v33;
      v48 += v42;
      v47 += v40;
      v28 = v317;
      if (v33 == v30)
        goto LABEL_31;
    }
    v51 = 0.0;
    v52 = -(int)v309;
    v53 = __dst;
    v54 = v14;
    v55 = 0.0;
    do
    {
      v56 = *v53++;
      v57 = 1.0 / v50[(v52 & ~(v52 >> 31)) * v49];
      v51 = v51 + (float)(v56 * v57);
      v55 = v55 + v57;
      ++v52;
      --v54;
    }
    while (v54);
    v58 = v40 * v33;
    *(float *)(v38 + 4 * (v40 * v33)) = v51;
    v59 = v42 * v33;
    *(float *)(v39 + 4 * (v42 * v33)) = v55;
    if (v28 >= 2)
    {
      v60 = 1.0 / *v50;
      v61 = v31 * v49;
      v62 = v47;
      v63 = v48;
      v64 = v309;
      do
      {
        v65 = 1.0 / v50[v61];
        v51 = v51 + (float)((float)((float)(v35 * v60) - (float)(v27.n128_f32[0] * v55)) + (float)(v34 * v65));
        v55 = v55 + (float)(v65 - v60);
        *(float *)(v38 + 4 * v62) = v51;
        *(float *)(v39 + 4 * v63) = v55;
        v63 += v43;
        v62 += v41;
        v61 += v49;
        --v64;
      }
      while (v64);
    }
    if (v31 == v44)
      goto LABEL_28;
LABEL_26:
    v66 = 0;
    v67 = v43 * v31 + v59;
    v68 = v41 * v31 + v58;
    v69 = v46;
    do
    {
      v70 = 1.0 / v50[v66];
      v71 = 1.0 / v50[((2 * (_DWORD)v309) | 1) * v49 + v66];
      v51 = v51 + (float)((float)((float)(v35 * v70) - (float)(v27.n128_f32[0] * v55)) + (float)(v34 * v71));
      v55 = v55 + (float)(v71 - v70);
      *(float *)(v38 + 4 * v68) = v51;
      *(float *)(v39 + 4 * v67) = v55;
      v67 += v43;
      v68 += v41;
      v66 += v49;
      --v69;
    }
    while (v69);
    goto LABEL_28;
  }
LABEL_31:
  MEMORY[0x227684CB8](__dst, 0x1000C8052888210, v27);
  v319 = &off_24EC21230;
  v78 = *(_QWORD *)(a4 + 8);
  v79 = *(std::__shared_weak_count **)(a4 + 16);
  if (v79)
  {
    p_shared_owners = (unint64_t *)&v79->__shared_owners_;
    v81 = v299;
    v82 = v300;
    v83 = a5;
    do
      v84 = __ldxr(p_shared_owners);
    while (__stxr(v84 + 1, p_shared_owners));
    v85 = *(_WORD *)(a4 + 48);
    do
      v86 = __ldxr(p_shared_owners);
    while (__stxr(v86 + 1, p_shared_owners));
    v87 = *(float32x4_t **)(a4 + 24);
    v323 = *(_OWORD *)(a4 + 32);
    do
      v88 = __ldxr(p_shared_owners);
    while (__stxr(v88 + 1, p_shared_owners));
    v320 = v78;
    v321 = v79;
    v322 = v87;
    v324 = v85;
    do
      v89 = __ldaxr(p_shared_owners);
    while (__stlxr(v89 - 1, p_shared_owners));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
    do
      v90 = __ldaxr(p_shared_owners);
    while (__stlxr(v90 - 1, p_shared_owners));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
    sub_223FB7DF4((uint64_t)&v319, v304, v28);
    v91 = v321;
    if (!v321)
      goto LABEL_51;
  }
  else
  {
    v92 = *(_WORD *)(a4 + 48);
    v93 = *(float32x4_t **)(a4 + 24);
    v320 = *(_QWORD *)(a4 + 8);
    v321 = 0;
    v322 = v93;
    v323 = *(_OWORD *)(a4 + 32);
    v324 = v92;
    v81 = v299;
    v82 = v300;
    v83 = a5;
    sub_223FB7DF4((uint64_t)&v319, v304, v28);
    v91 = v321;
    if (!v321)
      goto LABEL_51;
  }
  v94 = (unint64_t *)&v91->__shared_owners_;
  do
    v95 = __ldaxr(v94);
  while (__stlxr(v95 - 1, v94));
  if (!v95)
  {
    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
    std::__shared_weak_count::__release_weak(v91);
    v319 = &off_24EC21230;
    v96 = *(_QWORD *)(v83 + 8);
    v97 = *(std::__shared_weak_count **)(v83 + 16);
    if (v97)
    {
LABEL_52:
      v98 = (unint64_t *)&v97->__shared_owners_;
      do
        v99 = __ldxr(v98);
      while (__stxr(v99 + 1, v98));
      v100 = *(_WORD *)(v83 + 48);
      do
        v101 = __ldxr(v98);
      while (__stxr(v101 + 1, v98));
      v102 = *(float32x4_t **)(v83 + 24);
      v323 = *(_OWORD *)(v83 + 32);
      do
        v103 = __ldxr(v98);
      while (__stxr(v103 + 1, v98));
      v320 = v96;
      v321 = v97;
      v322 = v102;
      v324 = v100;
      do
        v104 = __ldaxr(v98);
      while (__stlxr(v104 - 1, v98));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
      do
        v105 = __ldaxr(v98);
      while (__stlxr(v105 - 1, v98));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
LABEL_67:
      v108 = (float *)operator new(v81, (std::align_val_t)0x20uLL);
      v110 = v108;
      if (v28)
      {
        memcpy(v108, __src, __n);
        *(float *)v109.i32 = v110[1] - *v110;
        v111 = v309;
        v112 = *(_QWORD *)(v82 + 32);
        v113 = v112;
        if (!(_DWORD)v112)
          goto LABEL_95;
      }
      else
      {
        v111 = v309;
        v112 = *(_QWORD *)(v82 + 32);
        v113 = v112;
        if (!(_DWORD)v112)
          goto LABEL_95;
      }
      v114 = HIDWORD(v112);
      v115 = *(float *)v109.i32 * v312.n128_f32[0];
      v116 = *(float *)v109.i32 * v32;
      v117 = v322;
      v118 = *(_QWORD *)(v82 + 24);
      v119 = *(_DWORD *)(v82 + 40);
      v120 = *(_DWORD *)(v82 + 44);
      v121 = HIDWORD(v112) + ~(_DWORD)v111;
      v123 = DWORD2(v323);
      v122 = HIDWORD(v323);
      v124 = (DWORD2(v323) * (HIDWORD(v112) - 1));
      if (v317)
      {
        v125 = 0;
        v126 = v114 - 2 * v111 - 2;
        v127 = v120 * v31;
        v128 = DWORD2(v323) * ((2 * v111) | 1);
        v129 = v120 * v121;
        v130 = *(_DWORD *)(v82 + 44);
        do
        {
          v131 = &v117->f32[(v122 * v125)];
          v132 = 0.0;
          v133 = -(int)v111;
          v134 = v110;
          v135 = v14;
          v136 = 0.0;
          do
          {
            v137 = v131[(v133 & ~(v133 >> 31)) * v123];
            v138 = *v134++;
            v132 = v132 + (float)(v137 * v138);
            v136 = v136 + v137;
            ++v133;
            --v135;
          }
          while (v135);
          *(float *)(v118 + 4 * (v119 * v125)) = v132;
          if (v317 >= 2)
          {
            v139 = *v131;
            v140 = v116 * *v131;
            v141 = v123 * v31;
            v142 = v130;
            v143 = v111;
            do
            {
              v144 = v131[v141];
              v132 = v132 + (float)((float)(v140 - (float)(*(float *)v109.i32 * v136)) + (float)(v115 * v144));
              v136 = v136 + (float)(v144 - v139);
              *(float *)(v118 + 4 * v142) = v132;
              v142 += v120;
              v141 += v123;
              --v143;
            }
            while (v143);
          }
          if (v31 != v121)
          {
            v145 = 0;
            v146 = v127;
            v147 = v126;
            do
            {
              v148 = v131[v145];
              v149 = v131[v128 + v145];
              v132 = v132
                   + (float)((float)((float)(v116 * v148) - (float)(*(float *)v109.i32 * v136)) + (float)(v115 * v149));
              v136 = v136 + (float)(v149 - v148);
              *(float *)(v118 + 4 * v146) = v132;
              v146 += v120;
              v145 += v123;
              --v147;
            }
            while (v147);
          }
          v150 = v131[v124];
          v151 = v123 * v126;
          v152 = v129;
          v153 = v309 + 1;
          do
          {
            v154 = v131[v151];
            v132 = v132
                 + (float)((float)(v115 * v150) + (float)((float)(v116 * v154) - (float)(*(float *)v109.i32 * v136)));
            v136 = v136 + (float)(v150 - v154);
            *(float *)(v118 + 4 * v152) = v132;
            v152 += v120;
            v151 += v123;
            --v153;
          }
          while (v153);
          ++v125;
          v130 += v119;
          v127 += v119;
          v129 += v119;
        }
        while (v125 != v113);
      }
      else
      {
        if (v31 == v121)
        {
          *(float *)v109.i32 = *(float *)v109.i32 * 0.0;
          v155 = v120 * v31;
          if (v113 >= 0x18)
          {
            v156 = 0;
            v275 = __CFADD__(v155, v113 - 1);
            if (v119 == 1 && HIDWORD(v323) == 1 && !v275 && !((v113 - 1) >> 32))
            {
              v156 = 0;
              v276 = v118 + 4 * v155;
              v277 = v276 - (_QWORD)v322;
              if ((unint64_t)(v276 - (_QWORD)v322) >= 0x10)
              {
                v278 = &v322->i8[4 * v124];
                v279 = v276 - (_QWORD)v278;
                v280 = (unint64_t)v322 - v118;
                v281 = (unint64_t)&v278[-v118];
                v282 = v279 >= 0x10 && v280 >= 0x10;
                v283 = v282 && v281 >= 0x10;
                v284 = v283 && v155 >= 4;
                v285 = v284 && v281 >= 0x10;
                v286 = v285 && v280 >= 0x10;
                v287 = v286 && v279 >= 0x10;
                if (v287 && v277 >= 0x10)
                {
                  v289 = v112 & 3;
                  v290 = (float32x4_t)vdupq_lane_s32(v109, 0);
                  v156 = v113 - v289;
                  v291 = v155;
                  v292 = v113 - v289;
                  v293 = v322;
                  v294 = *(_OWORD **)(v82 + 24);
                  do
                  {
                    *v294++ = 0uLL;
                    v295 = vmulq_n_f32(*(float32x4_t *)((char *)v293 + 4 * v124), v115);
                    v296 = *v293++;
                    *(float32x4_t *)(v118 + 4 * v291) = vaddq_f32(vaddq_f32(v295, vsubq_f32(vmulq_n_f32(v296, v116), v290)), (float32x4_t)0);
                    v291 += 4;
                    v292 -= 4;
                  }
                  while (v292);
                  if (!v289)
                    goto LABEL_95;
                }
              }
            }
          }
          else
          {
            v156 = 0;
          }
          v157 = v113 - v156;
          v158 = v119 * v156;
          v159 = v122 * v156;
          do
          {
            *(_DWORD *)(v118 + 4 * v158) = 0;
            *(float *)(v118 + 4 * (v155 + v158)) = (float)((float)(v115 * v117->f32[v159 + v124])
                                                           + (float)((float)(v116 * v117->f32[v159]) - *(float *)v109.i32))
                                                   + 0.0;
            v158 += v119;
            v159 += v122;
            --v157;
          }
          while (v157);
          goto LABEL_95;
        }
        v160 = 0;
        v161 = v121 + ~(_DWORD)v111;
        v162 = v120 * v121;
        v163 = (DWORD2(v323) * v161);
        v164 = v114 - 2 * v111 - 2;
        v165 = v120 * v31;
        v166 = DWORD2(v323) * ((2 * v111) | 1);
        do
        {
          v167 = 0;
          v168 = (uint64_t)v117->i64 + 4 * (v122 * v160);
          *(_DWORD *)(v118 + 4 * (v119 * v160)) = 0;
          v169 = 0.0;
          v170 = v165;
          v171 = v164;
          v172 = 0.0;
          do
          {
            v173 = *(float *)(v168 + 4 * v167);
            v174 = *(float *)(v168 + 4 * (v166 + v167));
            v169 = v169
                 + (float)((float)((float)(v116 * v173) - (float)(*(float *)v109.i32 * v172)) + (float)(v115 * v174));
            v172 = v172 + (float)(v174 - v173);
            *(float *)(v118 + 4 * v170) = v169;
            v170 += v120;
            v167 += v123;
            --v171;
          }
          while (v171);
          *(float *)(v118 + 4 * (v119 * v160++ + v162)) = v169
                                                                        + (float)((float)(v115
                                                                                        * *(float *)(v168 + 4 * v124))
                                                                                + (float)((float)(v116
                                                                                                * *(float *)(v168 + 4 * v163))
                                                                                        - (float)(*(float *)v109.i32
                                                                                                * v172)));
          v165 += v119;
        }
        while (v160 != v113);
      }
LABEL_95:
      MEMORY[0x227684CB8](v110, 0x1000C8052888210);
      v175 = v321;
      v176 = a10;
      if (!v321)
        goto LABEL_99;
      v177 = (unint64_t *)&v321->__shared_owners_;
      do
        v178 = __ldaxr(v177);
      while (__stlxr(v178 - 1, v177));
      if (!v178)
      {
        ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
        std::__shared_weak_count::__release_weak(v175);
        v319 = &off_24EC21230;
        v179 = a5;
        v180 = *(_QWORD *)(a5 + 8);
        v181 = *(std::__shared_weak_count **)(a5 + 16);
        if (v181)
          goto LABEL_100;
      }
      else
      {
LABEL_99:
        v319 = &off_24EC21230;
        v179 = a5;
        v180 = *(_QWORD *)(a5 + 8);
        v181 = *(std::__shared_weak_count **)(a5 + 16);
        if (v181)
        {
LABEL_100:
          v182 = (unint64_t *)&v181->__shared_owners_;
          do
            v183 = __ldxr(v182);
          while (__stxr(v183 + 1, v182));
          v184 = *(_WORD *)(a5 + 48);
          do
            v185 = __ldxr(v182);
          while (__stxr(v185 + 1, v182));
          v186 = *(float32x4_t **)(a5 + 24);
          v323 = *(_OWORD *)(a5 + 32);
          do
            v187 = __ldxr(v182);
          while (__stxr(v187 + 1, v182));
          v320 = v180;
          v321 = v181;
          v322 = v186;
          v324 = v184;
          do
            v188 = __ldaxr(v182);
          while (__stlxr(v188 - 1, v182));
          if (!v188)
          {
            ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
            std::__shared_weak_count::__release_weak(v181);
          }
          do
            v189 = __ldaxr(v182);
          while (__stlxr(v189 - 1, v182));
          if (!v189)
          {
            ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
            std::__shared_weak_count::__release_weak(v181);
          }
          sub_223FB7DF4((uint64_t)&v319, v298, v317);
          v190 = v321;
          if (!v321)
            goto LABEL_120;
          goto LABEL_117;
        }
      }
      v191 = *(_WORD *)(v179 + 48);
      v192 = *(float32x4_t **)(v179 + 24);
      v320 = v180;
      v321 = 0;
      v322 = v192;
      v323 = *(_OWORD *)(v179 + 32);
      v324 = v191;
      sub_223FB7DF4((uint64_t)&v319, v298, v317);
      v190 = v321;
      if (!v321)
        goto LABEL_120;
LABEL_117:
      v193 = (unint64_t *)&v190->__shared_owners_;
      do
        v194 = __ldaxr(v193);
      while (__stlxr(v194 - 1, v193));
      if (!v194)
      {
        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
        std::__shared_weak_count::__release_weak(v190);
        v195 = *(std::__shared_weak_count **)(v304 + 16);
        if (v195)
        {
LABEL_121:
          v196 = (unint64_t *)&v195->__shared_owners_;
          do
            v197 = __ldxr(v196);
          while (__stxr(v197 + 1, v196));
          do
            v198 = __ldxr(v196);
          while (__stxr(v198 + 1, v196));
          v199 = *(_DWORD **)(v304 + 24);
          v200 = *(_QWORD *)(v304 + 32);
          v202 = *(_DWORD *)(v304 + 40);
          v201 = *(_DWORD *)(v304 + 44);
          do
            v203 = __ldxr(v196);
          while (__stxr(v203 + 1, v196));
          do
            v204 = __ldaxr(v196);
          while (__stlxr(v204 - 1, v196));
          v307 = v200;
          if (!v204)
          {
            v205 = v199;
            v206 = v201;
            ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
            std::__shared_weak_count::__release_weak(v195);
            v201 = v206;
            v199 = v205;
          }
          do
            v207 = __ldaxr(v196);
          while (__stlxr(v207 - 1, v196));
          if (v207)
          {
            v311 = v201;
            __dsta = v199;
            v208 = *(std::__shared_weak_count **)(v82 + 16);
            if (v208)
              goto LABEL_132;
LABEL_156:
            v214 = *(_DWORD *)(v82 + 40);
            v220 = *(std::__shared_weak_count **)(v298 + 16);
            v316 = v195;
            v318 = v220;
            v308 = *(_QWORD *)(v82 + 24);
            v310 = v208;
            v306 = *(_DWORD *)(v82 + 44);
            if (!v220)
              goto LABEL_157;
            goto LABEL_143;
          }
          v271 = v199;
          v272 = v201;
          ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
          std::__shared_weak_count::__release_weak(v195);
          v311 = v272;
          __dsta = v271;
          v208 = *(std::__shared_weak_count **)(v82 + 16);
          if (!v208)
            goto LABEL_156;
LABEL_132:
          v209 = (unint64_t *)&v208->__shared_owners_;
          do
            v210 = __ldxr(v209);
          while (__stxr(v210 + 1, v209));
          do
            v211 = __ldxr(v209);
          while (__stxr(v211 + 1, v209));
          v212 = *(_QWORD *)(v82 + 24);
          v214 = *(_DWORD *)(v82 + 40);
          v213 = *(_DWORD *)(v82 + 44);
          do
            v215 = __ldxr(v209);
          while (__stxr(v215 + 1, v209));
          do
            v216 = __ldaxr(v209);
          while (__stlxr(v216 - 1, v209));
          if (!v216)
          {
            v217 = v212;
            v218 = v213;
            ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
            std::__shared_weak_count::__release_weak(v208);
            v213 = v218;
            v212 = v217;
          }
          do
            v219 = __ldaxr(v209);
          while (__stlxr(v219 - 1, v209));
          if (v219)
          {
            v220 = *(std::__shared_weak_count **)(v298 + 16);
            v316 = v195;
            v318 = v220;
            v308 = v212;
            v310 = v208;
            v306 = v213;
            if (v220)
              goto LABEL_143;
LABEL_157:
            v224 = *(_QWORD *)(v298 + 24);
            v226 = *(_DWORD *)(v298 + 40);
            v225 = *(_DWORD *)(v298 + 44);
            goto LABEL_158;
          }
          v273 = v212;
          v274 = v213;
          ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
          std::__shared_weak_count::__release_weak(v208);
          v220 = *(std::__shared_weak_count **)(v298 + 16);
          v316 = v195;
          v318 = v220;
          v308 = v273;
          v310 = v208;
          v306 = v274;
          if (!v220)
            goto LABEL_157;
LABEL_143:
          v221 = (unint64_t *)&v220->__shared_owners_;
          do
            v222 = __ldxr(v221);
          while (__stxr(v222 + 1, v221));
          do
            v223 = __ldxr(v221);
          while (__stxr(v223 + 1, v221));
          v224 = *(_QWORD *)(v298 + 24);
          v226 = *(_DWORD *)(v298 + 40);
          v225 = *(_DWORD *)(v298 + 44);
          do
            v227 = __ldxr(v221);
          while (__stxr(v227 + 1, v221));
          do
            v228 = __ldaxr(v221);
          while (__stlxr(v228 - 1, v221));
          if (!v228)
          {
            ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
            v176 = a10;
            std::__shared_weak_count::__release_weak(v318);
          }
          do
            v229 = __ldaxr(v221);
          while (__stlxr(v229 - 1, v221));
          if (!v229)
          {
            ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
            std::__shared_weak_count::__release_weak(v318);
          }
LABEL_158:
          v230 = *v176;
          v231 = *((_DWORD *)v176 + 11);
          v232 = cbrtf(*(float *)a2);
          v233.n128_f32[0] = cbrtf(*(float *)(a2 + 16));
          v241 = __dsta;
          v242 = v311;
          v243 = v308;
          v244 = v306;
          if (HIDWORD(v307) && (_DWORD)v307)
          {
            v245 = 0;
            v234.i64[0] = *(_QWORD *)a2;
            v234.i32[2] = *(_DWORD *)(a2 + 8);
            v235.i64[0] = *(_QWORD *)(a2 + 12);
            v235.i32[2] = *(_DWORD *)(a2 + 20);
            v236.f32[0] = v232 * v233.n128_f32[0];
            v246.i64[0] = vzip1q_s32(v234, v235).u64[0];
            v246.i32[2] = *(_QWORD *)(a2 + 24);
            v247 = (int8x16_t)vtrn2q_s32(v234, v235);
            v247.i32[2] = HIDWORD(*(_QWORD *)(a2 + 24));
            v248 = (int8x16_t)vzip2q_s32(v234, v235);
            v248.i32[2] = *(_DWORD *)(a2 + 32);
            v249 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v236.f32, 0);
            v246.i32[3] = v247.i32[0];
            v250 = vnegq_f32((float32x4_t)vextq_s8(vextq_s8(v247, v247, 0xCuLL), v248, 8uLL));
            v251 = vnegq_f32(v246);
            v252 = vnegq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v248, 2));
            v233 = (__n128)vdivq_f32(v251, v249);
            v253 = vdivq_f32(v250, v249).u64[0];
            v236.f32[0] = vdivq_f32(v252, v236).f32[0];
            do
            {
              v254 = 0;
              v255 = 0;
              v256 = 0;
              v257 = 0;
              v258 = v230 + 4 * (v231 * v245);
              v259.i32[3] = v312.n128_i32[3];
              v251.f32[0] = v233.n128_f32[2] - (float)(v236.f32[0] * v312.n128_f32[0]);
              v260 = (int8x16_t)v251;
              *(float *)&v260.i32[1] = *((float *)&v253 + 1)
                                     - (float)(v236.f32[0] * (float)(v312.n128_f32[0] + (float)v245));
              v260.i32[2] = v236.i32[0];
              do
              {
                *(float *)v259.i32 = *(float *)v260.i32 - v236.f32[0];
                v237.i32[0] = __dsta[v311 * v245 + v254];
                v238.f32[0] = (float)(*(float *)v260.i32 - v236.f32[0]) * v237.f32[0];
                v259.i32[1] = v260.i32[1];
                v259.i32[2] = v260.i32[2];
                v239.i32[0] = *(_DWORD *)(v308 + 4 * v306 * v245 + 4 * v255);
                v237.f32[0] = v233.n128_f32[0] * v237.f32[0];
                v240.f32[0] = *(float *)&v253 * v239.f32[0];
                v261 = (float32x2_t)vextq_s8(v260, v260, 8uLL).u64[0];
                v262 = vmla_lane_f32(v238, v239, *(float32x2_t *)v260.i8, 1);
                v260.i32[0] = *(_DWORD *)(v224 + 4 * (v225 * v245) + 4 * v256);
                v239.f32[0] = v237.f32[0] * v237.f32[0];
                v237.i32[1] = v240.i32[0];
                v238 = vmla_f32(v262, *(float32x2_t *)v260.i8, v261);
                v237.i32[2] = v238.i32[0];
                v239 = vmla_f32(vmla_f32(v239, v240, v240), v238, v238);
                v263 = vmulq_n_f32(v237, 1.0 / sqrtf(v239.f32[0]));
                *(_DWORD *)(v258 + 4 * v257) = v263.i32[0];
                *(_DWORD *)(v258 + 4 * (v257 + 1)) = v263.i32[1];
                v264 = (_DWORD *)(v258 + 4 * (v257 + 2));
                v257 += 3;
                v256 += v226;
                *v264 = v263.i32[2];
                v255 += v214;
                v254 += v202;
                v260 = v259;
              }
              while (3 * v307 != v257);
              ++v245;
            }
            while (v245 != HIDWORD(v307));
          }
          if (v318)
          {
            v265 = (unint64_t *)&v318->__shared_owners_;
            do
              v266 = __ldaxr(v265);
            while (__stlxr(v266 - 1, v265));
            if (!v266)
            {
              ((void (*)(std::__shared_weak_count *, _DWORD *, _QWORD, uint64_t, _QWORD, __n128))v318->__on_zero_shared)(v318, __dsta, v311, v308, v306, v233);
              std::__shared_weak_count::__release_weak(v318);
            }
          }
          if (v310)
          {
            v267 = (unint64_t *)&v310->__shared_owners_;
            do
              v268 = __ldaxr(v267);
            while (__stlxr(v268 - 1, v267));
            if (!v268)
            {
              ((void (*)(std::__shared_weak_count *, _DWORD *, uint64_t, uint64_t, uint64_t, __n128))v310->__on_zero_shared)(v310, v241, v242, v243, v244, v233);
              std::__shared_weak_count::__release_weak(v310);
            }
          }
          if (v316)
          {
            v269 = (unint64_t *)&v316->__shared_owners_;
            do
              v270 = __ldaxr(v269);
            while (__stlxr(v270 - 1, v269));
            if (!v270)
            {
              ((void (*)(std::__shared_weak_count *, _DWORD *, uint64_t, uint64_t, uint64_t, __n128))v316->__on_zero_shared)(v316, v241, v242, v243, v244, v233);
              std::__shared_weak_count::__release_weak(v316);
            }
          }
          JUMPOUT(0x227684CB8);
        }
LABEL_155:
        v307 = *(_QWORD *)(v304 + 32);
        v202 = *(_DWORD *)(v304 + 40);
        v311 = *(_DWORD *)(v304 + 44);
        __dsta = *(_DWORD **)(v304 + 24);
        v208 = *(std::__shared_weak_count **)(v82 + 16);
        if (!v208)
          goto LABEL_156;
        goto LABEL_132;
      }
LABEL_120:
      v195 = *(std::__shared_weak_count **)(v304 + 16);
      if (v195)
        goto LABEL_121;
      goto LABEL_155;
    }
LABEL_66:
    v106 = *(_WORD *)(v83 + 48);
    v107 = *(float32x4_t **)(v83 + 24);
    v320 = v96;
    v321 = 0;
    v322 = v107;
    v323 = *(_OWORD *)(v83 + 32);
    v324 = v106;
    goto LABEL_67;
  }
LABEL_51:
  v319 = &off_24EC21230;
  v96 = *(_QWORD *)(v83 + 8);
  v97 = *(std::__shared_weak_count **)(v83 + 16);
  if (v97)
    goto LABEL_52;
  goto LABEL_66;
}

void sub_223FB92B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  MEMORY[0x227684CB8](a17, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void sub_223FB92EC(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BOOL8 v13;
  _BOOL4 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  unint64_t v21;
  int v22;
  _DWORD *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  __int16 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _DWORD *v32;
  _DWORD *v33;
  __int16 *v34;
  int v35;
  unint64_t v43;
  unint64_t v44;
  BOOL v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL4 v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  size_t v65;
  size_t v66;
  int v67;
  _DWORD *v68;
  __n128 v69;
  uint64_t v70;
  BOOL v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t (**v92)();
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  BOOL v108;
  int v109;
  int v110;
  uint64_t (**v111)();
  unsigned int v112;
  uint64_t v113;
  void *v114;
  _BOOL4 v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  _WORD *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  _WORD *v132;
  int *v133;
  uint64_t v134;
  int v135;
  _WORD *v136;
  int *v137;
  _WORD *v138;
  int *v139;
  int *v140;
  _WORD *v141;
  _WORD *v142;
  int *v143;
  int v144;
  int v147;
  int v150;
  uint64_t v151;
  uint64_t v152;
  _WORD *v153;
  int *v154;
  int v155;
  uint64_t v158;
  int v159;
  _WORD *v160;
  int *v161;
  uint64_t v164;
  uint64_t v165;
  int v167;
  uint64_t v168;
  _WORD *v169;
  int *v170;
  int v171;
  uint64_t v174;
  uint64_t v176;
  uint64_t v179;
  unsigned int v180;
  _BOOL8 v181;
  unint64_t v182;
  uint64_t (**v183)();
  int v184;
  _BOOL4 v185;
  void *v186;
  uint64_t (**v187)();
  uint64_t v188;
  std::__shared_weak_count *v189;
  uint64_t (**v190)();
  uint64_t v191;
  std::__shared_weak_count *v192;
  uint64_t (**v193)();
  uint64_t v194;
  std::__shared_weak_count *v195;
  uint64_t (**v196)();
  uint64_t v197;
  std::__shared_weak_count *v198;
  uint64_t v199[3];
  uint64_t (**v200)();
  __int16 v201;
  std::__shared_weak_count *v202;
  uint64_t (**v203)();
  __int16 v204;
  std::__shared_weak_count *v205;
  uint64_t (**v206)();
  __int16 v207;
  std::__shared_weak_count *v208;
  uint64_t (**v209)();
  int v210;
  std::__shared_weak_count *v211;
  void *memptr;
  unsigned int v213;
  std::__shared_weak_count *v214;
  __int128 v215;
  int v216;
  uint64_t v217;
  int v218;
  unint64_t v219;
  uint64_t v220;
  _BYTE v221[12];
  std::__shared_weak_count *v222;
  uint64_t v223;

  v223 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 12))
    _ZF = *(_DWORD *)(a1 + 8) == 0;
  else
    _ZF = 1;
  v9 = *(_QWORD *)(a1 + 8);
  if (_ZF)
    v10 = 0;
  else
    v10 = *(_QWORD *)(a1 + 8);
  v11 = HIDWORD(v10);
  if (HIDWORD(v10))
    v12 = v10 << 32;
  else
    v12 = 0;
  v13 = v10 != 0;
  if ((_DWORD)v10)
    v14 = HIDWORD(v10) == 0;
  else
    v14 = 1;
  if (v14)
    v11 = 0;
  v15 = v11 * (v12 >> 30);
  v16 = 3;
  if (((v12 >> 30) & ((v12 >> 30) - 1)) == 0)
    v16 = (v12 >> 30) - 1;
  v17 = v16 | (v16 >> 1) | ((v16 | (v16 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  v21 = v15 & 0x3FFFFFFFCLL;
  if ((v15 & 0x3FFFFFFFCLL) == 0)
  {
    v23 = 0;
    v24 = HIDWORD(v9);
    v186 = 0;
    v181 = v10 != 0;
    v182 = v12;
    if (!(_DWORD)v9)
      goto LABEL_33;
LABEL_25:
    if (!(_DWORD)v24)
      goto LABEL_33;
    v25 = v9 - 1;
    v26 = *(unsigned int *)(a1 + 16);
    v27 = *(__int16 **)a1;
    v28 = v24 - 1;
    if ((_DWORD)v24 == 1)
    {
      v32 = v23;
      if ((_DWORD)v9 == 1)
      {
LABEL_43:
        _H0 = *v27;
        __asm { FCVT            S0, H0 }
        *v32 = _S0;
        if (v14)
          v43 = 0;
        else
          v43 = v10;
        v44 = HIDWORD(v43);
        if (HIDWORD(v43) * HIDWORD(v12) != -1)
          goto LABEL_48;
        goto LABEL_47;
      }
    }
    else
    {
      v29 = 2 * *(unsigned int *)(a1 + 20);
      v30 = 4 * HIDWORD(v12);
      if ((_DWORD)v9 == 1)
      {
        v32 = v23;
        do
        {
          _H0 = *v27;
          __asm { FCVT            S0, H0 }
          *v32 = _S0;
          v27 = (__int16 *)((char *)v27 + v29);
          v32 = (_DWORD *)((char *)v32 + v30);
          --v28;
        }
        while (v28);
        goto LABEL_43;
      }
      v31 = 0;
      v32 = v23;
      do
      {
        v33 = v32;
        v34 = v27;
        v35 = v9 - 1;
        do
        {
          _H0 = *v34;
          __asm { FCVT            S0, H0 }
          *v33 = _S0;
          v34 += v26;
          v33 += v13;
          --v35;
        }
        while (v35);
        _H0 = *v34;
        __asm { FCVT            S0, H0 }
        *v33 = _S0;
        v27 = (__int16 *)((char *)v27 + v29);
        v32 = (_DWORD *)((char *)v32 + v30);
        ++v31;
      }
      while (v31 != v28);
    }
    do
    {
      _H0 = *v27;
      __asm { FCVT            S0, H0 }
      *v32 = _S0;
      v27 += v26;
      v32 += v13;
      --v25;
    }
    while (v25);
    goto LABEL_43;
  }
  memptr = 0;
  v22 = malloc_type_posix_memalign(&memptr, v20, v15 & 0x3FFFFFFFCLL, 0x1F88E90uLL);
  if (v22)
    sub_2244E2E20(v22, v20, v21);
  v23 = memptr;
  LODWORD(v9) = *(_DWORD *)(a1 + 8);
  LODWORD(v24) = *(_DWORD *)(a1 + 12);
  v186 = memptr;
  v181 = v10 != 0;
  v182 = v12;
  if ((_DWORD)v9)
    goto LABEL_25;
LABEL_33:
  if (v14)
    v43 = 0;
  else
    v43 = v10;
  v44 = HIDWORD(v43);
  if (HIDWORD(v43) * HIDWORD(v12) != -1)
    goto LABEL_48;
LABEL_47:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_210;
  }
LABEL_48:
  if ((a3 < 2 || (a3 & 1) == 0)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Vision/NormalEstimation.cpp", 586, (uint64_t)"kernelSize > 1 && kernelSize % 2 == 1", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_210:
    abort();
  }
  v209 = (uint64_t (**)())__PAIR64__(v43, v44);
  LODWORD(v206) = 0;
  memptr = &off_24EC216B8;
  sub_22321B00C(&v209, &v206, &v213);
  v206 = (uint64_t (**)())__PAIR64__(v43, v44);
  LODWORD(v203) = 0;
  v209 = &off_24EC216B8;
  sub_22321B00C(&v206, &v203, &v210);
  v203 = (uint64_t (**)())__PAIR64__(v44, v43);
  LODWORD(v200) = 0;
  v206 = &off_24EC216B8;
  sub_22321B00C(&v203, &v200, &v207);
  v200 = (uint64_t (**)())__PAIR64__(v44, v43);
  *(_DWORD *)v221 = 0;
  v203 = &off_24EC216B8;
  sub_22321B00C(&v200, v221, &v204);
  v180 = a3;
  *(_DWORD *)v221 = v43;
  *(_DWORD *)&v221[4] = v44;
  LODWORD(v196) = 0;
  v200 = &off_24EC216B8;
  sub_22321B00C(v221, &v196, &v201);
  if ((_DWORD)v44)
    v51 = (_DWORD)v43 == 0;
  else
    v51 = 1;
  if (v51)
    v52 = 0;
  else
    v52 = v43;
  v53 = 3;
  *(_QWORD *)&v221[4] = v52;
  *(_DWORD *)v221 = 3;
  v54 = v52;
  if ((_DWORD)v52)
    v55 = 3;
  else
    v55 = 0;
  v56 = HIDWORD(*(_QWORD *)&v221[4]);
  if (HIDWORD(*(_QWORD *)&v221[4]))
    v57 = (v55 * *(_DWORD *)&v221[4]);
  else
    v57 = 0;
  *(_DWORD *)v221 = 3;
  v179 = HIDWORD(*(_QWORD *)v221);
  v58 = HIDWORD(*(_QWORD *)v221) == 0;
  v183 = *(uint64_t (***)())v221;
  if (!*(_DWORD *)&v221[8])
    v58 = 1;
  v185 = v58;
  if (v58)
    v59 = 0;
  else
    v59 = *(_DWORD *)&v221[8];
  v60 = 4 * v57;
  v184 = v59;
  v61 = v59 * v57;
  if ((v60 & (v60 - 1)) == 0)
    v53 = v60 - 1;
  v62 = v53 | (v53 >> 1) | ((v53 | (v53 >> 1)) >> 2);
  v63 = v62 | (v62 >> 4) | ((v62 | (v62 >> 4)) >> 8);
  v64 = v63 | (v63 >> 16) | ((v63 | (v63 >> 16)) >> 32);
  if (v64 + 1 > 8)
    v65 = v64 + 1;
  else
    v65 = 8;
  if (v61)
  {
    v66 = 4 * v61;
    *(_QWORD *)v221 = 0;
    v67 = malloc_type_posix_memalign((void **)v221, v65, v66, 0x1F88E90uLL);
    if (v67)
      sub_2244E2E20(v67, v65, v66);
    v68 = *(_DWORD **)v221;
  }
  else
  {
    v68 = 0;
  }
  v199[0] = (uint64_t)v186;
  v199[1] = v43;
  v199[2] = v182 | v181;
  *(_QWORD *)v221 = &off_24EC21FE8;
  sub_2231DCF04((uint64_t)&memptr, (uint64_t *)&v221[8]);
  v196 = &off_24EC21FE8;
  sub_2231DCF04((uint64_t)&v209, &v197);
  v193 = &off_24EC21FE8;
  sub_2231DCF04((uint64_t)&v206, &v194);
  v190 = &off_24EC21FE8;
  sub_2231DCF04((uint64_t)&v203, &v191);
  v187 = &off_24EC21FE8;
  sub_2231DCF04((uint64_t)&v200, &v188);
  v70 = v55 | (v57 << 32);
  if ((_DWORD)v56)
    v71 = (_DWORD)v54 == 0;
  else
    v71 = 1;
  if (v71)
    v72 = 0;
  else
    v72 = v54;
  *(_QWORD *)((char *)&v215 + 4) = v72;
  v73 = v72;
  LODWORD(v215) = 3;
  v74 = v215;
  v75 = HIDWORD(v72);
  LODWORD(v215) = 1;
  *(_QWORD *)((char *)&v215 + 4) = v70;
  v76 = v215;
  if ((_DWORD)v57 * HIDWORD(v72) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *(_QWORD *)&v215 = v68;
  *((_QWORD *)&v215 + 1) = v74;
  v217 = v76;
  v216 = v75;
  v218 = v57;
  v219 = v73;
  v220 = v70;
  sub_223FB80F4(v199, a2, v180, (uint64_t)v221, (uint64_t)&v196, (uint64_t)&v193, (uint64_t)&v190, (uint64_t)&v187, v69, (uint64_t *)&v215);
  v77 = v189;
  if (v189)
  {
    p_shared_owners = (unint64_t *)&v189->__shared_owners_;
    do
      v79 = __ldaxr(p_shared_owners);
    while (__stlxr(v79 - 1, p_shared_owners));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = v192;
  if (v192)
  {
    v81 = (unint64_t *)&v192->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = v195;
  if (v195)
  {
    v84 = (unint64_t *)&v195->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = v198;
  if (v198)
  {
    v87 = (unint64_t *)&v198->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v222;
  if (v222)
  {
    v90 = (unint64_t *)&v222->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (v185)
    v92 = 0;
  else
    v92 = v183;
  v93 = v202;
  if (v202)
  {
    v94 = (unint64_t *)&v202->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v205;
  if (v205)
  {
    v97 = (unint64_t *)&v205->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v208;
  if (v208)
  {
    v100 = (unint64_t *)&v208->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v211;
  if (v211)
  {
    v103 = (unint64_t *)&v211->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v214;
  if (v214)
  {
    v106 = (unint64_t *)&v214->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  if ((_DWORD)v92)
    v108 = HIDWORD(v92) == 0;
  else
    v108 = 1;
  v109 = v184;
  v110 = v108 || v185;
  if (v110)
    v111 = 0;
  else
    v111 = v92;
  if (v110)
    v109 = 0;
  v112 = HIDWORD(v111) * (_DWORD)v111;
  if (v110)
    v112 = 0;
  if (HIDWORD(v111))
    v113 = (_QWORD)v111 << 32;
  else
    v113 = 0;
  v114 = (void *)(v113 | ((_DWORD)v111 != 0));
  *(_QWORD *)a4 = v111;
  *(_DWORD *)(a4 + 8) = v109;
  *(_QWORD *)(a4 + 12) = v114;
  *(_DWORD *)(a4 + 20) = v112;
  *(_BYTE *)(a4 + 24) = 0;
  *(_BYTE *)(a4 + 36) = 0;
  memptr = v114;
  v213 = v112;
  if (HIDWORD(v111))
    v115 = (_DWORD)v111 == 0;
  else
    v115 = 1;
  v116 = v115 | v110;
  if (v116)
    v111 = 0;
  v209 = v111;
  if (v116)
    v117 = 0;
  else
    v117 = v109;
  v210 = v117;
  if (((2 * v112) & (2 * v112 - 1)) != 0)
    v118 = 2;
  else
    v118 = 2 * v112;
  sub_223F6F874(a4 + 40, (unsigned int *)&v209, (uint64_t *)&memptr, 1, 0, 0, v118);
  if ((v110 & 1) == 0)
  {
    v119 = (_DWORD)v92 - 1;
    v120 = HIDWORD(v92) - 1;
    v121 = *(unsigned int *)(a4 + 12);
    v122 = *(unsigned int *)(a4 + 16);
    v123 = *(_WORD **)(a4 + 48);
    v124 = v184 - 1;
    if (v184 == 1)
    {
      v133 = v68;
    }
    else
    {
      v125 = (v179 * (_DWORD)v183);
      v126 = *(unsigned int *)(a4 + 20);
      if (HIDWORD(v92) == 1)
      {
        if ((_DWORD)v92 == 1)
        {
          v164 = 4 * v125;
          v165 = 2 * v126;
          v133 = v68;
          do
          {
            _S0 = *v133;
            __asm { FCVT            H0, S0 }
            *v123 = _S0;
            v133 = (int *)((char *)v133 + v164);
            v123 = (_WORD *)((char *)v123 + v165);
            --v124;
          }
          while (v124);
        }
        else
        {
          v150 = 0;
          v151 = 4 * v125;
          v152 = 2 * v126;
          v133 = v68;
          do
          {
            v153 = v123;
            v154 = v133;
            v155 = (_DWORD)v92 - 1;
            do
            {
              _S0 = *v154;
              __asm { FCVT            H0, S0 }
              *v153 = _S0;
              ++v154;
              v153 += v121;
              --v155;
            }
            while (v155);
            _S0 = *v154;
            __asm { FCVT            H0, S0 }
            *v153 = _S0;
            v133 = (int *)((char *)v133 + v151);
            v123 = (_WORD *)((char *)v123 + v152);
            ++v150;
          }
          while (v150 != v124);
        }
      }
      else
      {
        v127 = 0;
        v128 = 4 * v125;
        if ((_DWORD)v92 == 1)
        {
          v158 = 2 * v126;
          v133 = v68;
          do
          {
            v159 = HIDWORD(v92) - 1;
            v160 = v123;
            v161 = v133;
            do
            {
              _S0 = *v161;
              __asm { FCVT            H0, S0 }
              *v160 = _S0;
              v161 += 3;
              v160 += v122;
              --v159;
            }
            while (v159);
            _S0 = *v161;
            __asm { FCVT            H0, S0 }
            *v160 = _S0;
            v133 = (int *)((char *)v133 + v128);
            v123 = (_WORD *)((char *)v123 + v158);
            ++v127;
          }
          while (v127 != v124);
        }
        else
        {
          v129 = 2 * v126;
          v130 = (char *)(v68 + 3);
          v131 = v122;
          v132 = &v123[v122];
          v133 = v68;
          v134 = 2 * v121;
          do
          {
            v135 = 0;
            v136 = v132;
            v137 = (int *)v130;
            v138 = v123;
            v139 = v133;
            do
            {
              v140 = v137;
              v141 = v136;
              v142 = v138;
              v143 = v139;
              v144 = v119;
              do
              {
                _S0 = *v143;
                __asm { FCVT            H0, S0 }
                *v142 = _S0;
                ++v143;
                v142 = (_WORD *)((char *)v142 + v134);
                --v144;
              }
              while (v144);
              _S0 = *v143;
              __asm { FCVT            H0, S0 }
              *v142 = _S0;
              v139 += 3;
              v138 = (_WORD *)((char *)v138 + v131 * 2);
              ++v135;
              v137 = v140 + 3;
              v136 = &v141[v131];
            }
            while (v135 != v120);
            v147 = v119;
            do
            {
              _S0 = *v140;
              __asm { FCVT            H0, S0 }
              *v141 = _S0;
              ++v140;
              v141 = (_WORD *)((char *)v141 + v134);
              --v147;
            }
            while (v147);
            _S0 = *v140;
            __asm { FCVT            H0, S0 }
            *v141 = _S0;
            v133 = (int *)((char *)v133 + v128);
            v123 = (_WORD *)((char *)v123 + v129);
            ++v127;
            v130 += v128;
            v132 = (_WORD *)((char *)v132 + v129);
          }
          while (v127 != v124);
        }
      }
    }
    if (HIDWORD(v92) != 1)
    {
      if (v119)
      {
        v167 = 0;
        v168 = 2 * v122;
        do
        {
          v169 = v123;
          v170 = v133;
          v171 = v119;
          do
          {
            _S0 = *v170;
            __asm { FCVT            H0, S0 }
            *v169 = _S0;
            ++v170;
            v169 += v121;
            --v171;
          }
          while (v171);
          _S0 = *v170;
          __asm { FCVT            H0, S0 }
          *v169 = _S0;
          v133 += 3;
          v123 = (_WORD *)((char *)v123 + v168);
          ++v167;
        }
        while (v167 != v120);
      }
      else
      {
        v174 = 2 * v122;
        do
        {
          _S0 = *v133;
          __asm { FCVT            H0, S0 }
          *v123 = _S0;
          v133 += 3;
          v123 = (_WORD *)((char *)v123 + v174);
          --v120;
        }
        while (v120);
      }
    }
    if (v119)
    {
      v176 = 2 * v121;
      do
      {
        _S0 = *v133;
        __asm { FCVT            H0, S0 }
        *v123 = _S0;
        ++v133;
        v123 = (_WORD *)((char *)v123 + v176);
        --v119;
      }
      while (v119);
    }
    _S0 = *v133;
    __asm { FCVT            H0, S0 }
    *v123 = _S0;
  }
  if (v68)
    free(v68);
  if (v186)
    free(v186);
}

void sub_223FB9EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  void *v45;

  if (v45)
  {
    free(v45);
    if (a23)
    {
LABEL_6:
      free(a23);
      _Unwind_Resume(a1);
    }
  }
  else if (a23)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_223FB9FF4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;

  *a1 = &off_24EC648B0;
  v2 = (std::__shared_weak_count *)a1[61];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[50];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[50];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[39];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[28];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[28];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)a1[17];
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      *a1 = off_24EC64888;
      v17 = (void *)a1[10];
      if (!v17)
        goto LABEL_27;
      goto LABEL_26;
    }
  }
  *a1 = off_24EC64888;
  v17 = (void *)a1[10];
  if (v17)
LABEL_26:
    free(v17);
LABEL_27:
  a1[10] = 0;
  return a1;
}

void sub_223FBA184(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;

  *a1 = &off_24EC648B0;
  v2 = (std::__shared_weak_count *)a1[61];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[50];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[50];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[39];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[28];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[28];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)a1[17];
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    *a1 = off_24EC64888;
    v17 = (void *)a1[10];
    if (!v17)
      goto LABEL_27;
  }
  else
  {
LABEL_25:
    *a1 = off_24EC64888;
    v17 = (void *)a1[10];
    if (!v17)
    {
LABEL_27:
      a1[10] = 0;
      JUMPOUT(0x227684CE8);
    }
  }
  free(v17);
  goto LABEL_27;
}

void sub_223FBA324(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  __n128 v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41[2];
  int v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t (**v47)();
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t (**v50)();
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t (**v53)();
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t (**v56)();
  uint64_t v57;
  std::__shared_weak_count *v58;
  __int128 v59;
  uint64_t v60;
  _BYTE v61[12];
  std::__shared_weak_count *v62;
  _BYTE v63[12];
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v59 = *a2;
  v60 = *((_QWORD *)a2 + 2);
  *(_QWORD *)v61 = &off_24EC21FE8;
  sub_2231DCF04(a1 + 120, (uint64_t *)&v61[8]);
  v56 = &off_24EC21FE8;
  sub_2231DCF04(a1 + 208, &v57);
  v53 = &off_24EC21FE8;
  sub_2231DCF04(a1 + 296, &v54);
  v50 = &off_24EC21FE8;
  sub_2231DCF04(a1 + 384, &v51);
  v47 = &off_24EC21FE8;
  sub_2231DCF04(a1 + 472, &v48);
  v10 = *(_QWORD *)(a1 + 80);
  if (*(_DWORD *)(a1 + 44))
    v11 = *(_DWORD *)(a1 + 40) == 0;
  else
    v11 = 1;
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  if (v11)
    v12 = 0;
  *(_QWORD *)&v63[4] = v12;
  v14 = v12;
  *(_DWORD *)v63 = 3;
  v15 = *(_QWORD *)v63;
  v16 = HIDWORD(v12);
  *(_DWORD *)v63 = 1;
  *(_QWORD *)&v63[4] = v13;
  v17 = *(_QWORD *)v63;
  if (HIDWORD(v13) * HIDWORD(v12) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v41[0] = v10;
  v41[1] = v15;
  v42 = v16;
  v43 = v17;
  v44 = HIDWORD(v13);
  v45 = v14;
  v46 = v13;
  sub_223FB80F4((uint64_t *)&v59, a3, a4, (uint64_t)v61, (uint64_t)&v56, (uint64_t)&v53, (uint64_t)&v50, (uint64_t)&v47, v9, v41);
  v18 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v52;
  if (v52)
  {
    v22 = (unint64_t *)&v52->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v55;
  if (v55)
  {
    v25 = (unint64_t *)&v55->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v58;
  if (v58)
  {
    v28 = (unint64_t *)&v58->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v62;
  if (v62)
  {
    v31 = (unint64_t *)&v62->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = *(_QWORD *)(a1 + 80);
  if (*(_DWORD *)(a1 + 44))
    v34 = *(_DWORD *)(a1 + 40) == 0;
  else
    v34 = 1;
  v35 = *(_QWORD *)(a1 + 40);
  v36 = *(_QWORD *)(a1 + 48);
  if (v34)
    v35 = 0;
  *(_QWORD *)&v61[4] = v35;
  v37 = v35;
  *(_DWORD *)v61 = 3;
  v38 = *(_QWORD *)v61;
  v39 = HIDWORD(v35);
  *(_DWORD *)v61 = 1;
  *(_QWORD *)&v61[4] = v36;
  v40 = *(_QWORD *)v61;
  if (HIDWORD(v36) * HIDWORD(v35) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *(_QWORD *)a5 = v33;
  *(_QWORD *)(a5 + 8) = v38;
  *(_DWORD *)(a5 + 16) = v39;
  *(_QWORD *)(a5 + 20) = v40;
  *(_DWORD *)(a5 + 28) = HIDWORD(v36);
  *(_QWORD *)(a5 + 32) = v37;
  *(_QWORD *)(a5 + 40) = v36;
}

void sub_223FBA6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;

  sub_2231DCE9C((uint64_t)&a24);
  sub_2231DCE9C((uint64_t)&a31);
  sub_2231DCE9C((uint64_t)&a38);
  sub_2231DCE9C(v38 - 176);
  _Unwind_Resume(a1);
}

uint64_t sub_223FBA750(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t StatusReg;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  _BYTE v28[12];
  _BYTE v29[12];
  _BYTE v30[13];
  _QWORD v31[3];
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24EC64888;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  LODWORD(v24) = 0;
  *(_QWORD *)v28 = 1;
  *(_BYTE *)(a1 + 56) = 0;
  v6 = (_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)v28;
  *(_QWORD *)(a1 + 16) = 3;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 28) = v7;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 68) = 0;
  *(_QWORD *)v28 = v7;
  *(_DWORD *)&v28[8] = 0;
  v26 = 0;
  v27 = 0;
  sub_22346985C(a1 + 72, (unsigned int *)&v26, (uint64_t *)v28, 1, (uint64_t)&v24, 1, 0);
  v8 = (a2 << 32) | 3;
  if ((_DWORD)a2)
    v9 = a3 == 0;
  else
    v9 = 1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  if (v9)
  {
    v8 = 0;
    v11 = 0;
  }
  else
  {
    v11 = a3;
  }
  v12 = HIDWORD(v8) * v8;
  if (v9)
    v12 = 0;
  v23 = 0;
  if (HIDWORD(v8))
    v13 = v8 << 32;
  else
    v13 = 0;
  if (HIDWORD(v8))
    v14 = v8 == 0;
  else
    v14 = 1;
  *(_QWORD *)v28 = v8;
  *(_DWORD *)&v28[8] = v11;
  *(_QWORD *)v29 = v13 | ((_DWORD)v8 != 0);
  *(_DWORD *)&v29[8] = v12;
  v30[0] = 0;
  v30[12] = 0;
  v26 = *(_QWORD *)v29;
  v27 = v12;
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), StatusReg);
  if (HIDWORD(v8))
    v15 = v14;
  else
    v15 = 1;
  if (v15)
    v8 = 0;
  v24 = v8;
  if (v15)
    v16 = 0;
  else
    v16 = v11;
  v25 = v16;
  if (((4 * v12) & (4 * v12 - 1)) != 0)
    v17 = 4;
  else
    v17 = 4 * v12;
  sub_22346985C((uint64_t)v31, (unsigned int *)&v24, &v26, 1, (uint64_t)&v23, 1, v17);
  v18 = *(void **)(a1 + 80);
  v19 = *(_QWORD *)&v29[4];
  v20 = v31[0];
  *(_QWORD *)(a1 + 40) = *(_QWORD *)&v28[4];
  *(_QWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 20) = v19;
  *v6 = *(_QWORD *)v30;
  *(_QWORD *)((char *)v6 + 5) = *(_QWORD *)&v30[5];
  *(_OWORD *)(a1 + 96) = v32;
  *(_QWORD *)(a1 + 112) = v33;
  *(_QWORD *)(a1 + 72) = v20;
  if (v18)
    free(v18);
  v21 = v31[2];
  *(_QWORD *)(a1 + 80) = v31[1];
  *(_QWORD *)(a1 + 88) = v21;
  *(_QWORD *)a1 = &off_24EC648B0;
  *(_DWORD *)v28 = a3;
  *(_DWORD *)&v28[4] = a2;
  LODWORD(v26) = 0;
  *(_QWORD *)(a1 + 120) = &off_24EC216B8;
  sub_22321B00C(v28, &v26, (_WORD *)(a1 + 128));
  *(_DWORD *)v28 = a3;
  *(_DWORD *)&v28[4] = a2;
  LODWORD(v26) = 0;
  *(_QWORD *)(a1 + 208) = &off_24EC216B8;
  sub_22321B00C(v28, &v26, (_WORD *)(a1 + 216));
  *(_DWORD *)v28 = a2;
  *(_DWORD *)&v28[4] = a3;
  LODWORD(v26) = 0;
  *(_QWORD *)(a1 + 296) = &off_24EC216B8;
  sub_22321B00C(v28, &v26, (_WORD *)(a1 + 304));
  *(_DWORD *)v28 = a2;
  *(_DWORD *)&v28[4] = a3;
  LODWORD(v26) = 0;
  *(_QWORD *)(a1 + 384) = &off_24EC216B8;
  sub_22321B00C(v28, &v26, (_WORD *)(a1 + 392));
  *(_DWORD *)v28 = a2;
  *(_DWORD *)&v28[4] = a3;
  LODWORD(v26) = 0;
  *(_QWORD *)(a1 + 472) = &off_24EC216B8;
  sub_22321B00C(v28, &v26, (_WORD *)(a1 + 480));
  return a1;
}

void sub_223FBAA6C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v9;

  sub_223167354(v5);
  sub_223167354(v4);
  sub_223167354(v3);
  sub_223167354(v2);
  *v1 = v6;
  v9 = (void *)v1[10];
  if (v9)
    free(v9);
  *v7 = 0;
  _Unwind_Resume(a1);
}

void sub_223FBAACC()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 + 80))
    JUMPOUT(0x223FBAAC0);
  JUMPOUT(0x223FBAABCLL);
}

_QWORD *sub_223FBAAE4(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = *result;
    *v1 = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    JUMPOUT(0x227684CE8);
  }
  return result;
}

float sub_223FBAB34(uint64_t a1, _DWORD *a2, int *a3, _DWORD *a4, _DWORD *a5)
{
  int v7;
  float result;
  int v9;
  _DWORD v10[2];
  _DWORD v11[2];

  v7 = *a3;
  v11[0] = *a2;
  v11[1] = v7;
  if ((*(unsigned int (**)(uint64_t, _DWORD *, _DWORD *))(*(_QWORD *)a1 + 24))(a1, v11, v10))
  {
    result = *(float *)v10;
    v9 = v10[1];
    *a4 = v10[0];
    *a5 = v9;
  }
  return result;
}

float sub_223FBAB8C(uint64_t a1, _DWORD *a2, int *a3, _DWORD *a4, _DWORD *a5)
{
  int v7;
  float result;
  int v9;
  _DWORD v10[2];
  _DWORD v11[2];

  v7 = *a3;
  v11[0] = *a2;
  v11[1] = v7;
  if ((*(unsigned int (**)(uint64_t, _DWORD *, _DWORD *))(*(_QWORD *)a1 + 40))(a1, v11, v10))
  {
    result = *(float *)v10;
    v9 = v10[1];
    *a4 = v10[0];
    *a5 = v9;
  }
  return result;
}

float sub_223FBABE4(uint64_t a1, _DWORD *a2, int *a3, _DWORD *a4, _DWORD *a5, float *a6)
{
  int v9;
  float result;
  int v11;
  _DWORD v12[2];
  float v13;
  _DWORD v14[2];

  v9 = *a3;
  v14[0] = *a2;
  v14[1] = v9;
  if ((*(unsigned int (**)(uint64_t, _DWORD *, _DWORD *))(*(_QWORD *)a1 + 56))(a1, v14, v12))
  {
    v11 = v12[1];
    *a4 = v12[0];
    *a5 = v11;
    result = v13;
    *a6 = v13;
  }
  return result;
}

uint64_t sub_223FBAC50(uint64_t a1, _DWORD *a2, int *a3)
{
  int v3;
  _DWORD v5[2];

  v3 = *a3;
  v5[0] = *a2;
  v5[1] = v3;
  return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a1 + 48))(a1, v5);
}

uint64_t sub_223FBAC84(uint64_t result, uint64_t a2)
{
  float v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  std::logic_error *exception;

  *(_QWORD *)result = &off_24EC64920;
  v2 = *(float *)a2;
  if (fabsf(*(float *)a2) < 0.00000011921 || (v3 = *(float *)(a2 + 4), fabsf(v3) < 0.00000011921))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PinholeCameraModel parameters invalid");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 8);
  v5 = *(float *)(a2 + 12);
  *(float *)(result + 8) = v2;
  *(float *)(result + 12) = v3;
  *(_DWORD *)(result + 16) = v4;
  *(float *)(result + 20) = v5;
  LODWORD(v6) = 0;
  *((float *)&v6 + 1) = v3;
  *((float *)&v4 + 1) = v5;
  *(float *)(result + 24) = 1.0 / v2;
  *(float *)(result + 28) = 1.0 / v3;
  *(float *)(result + 32) = -(float)(*(float *)&v4 * (float)(1.0 / v2));
  *(float *)(result + 36) = -(float)(v5 * (float)(1.0 / v3));
  *(_QWORD *)(result + 40) = LODWORD(v2);
  *(_QWORD *)(result + 48) = v6;
  *(_QWORD *)(result + 56) = v4;
  *(float *)(result + 64) = v2 * v3;
  *(float *)(result + 68) = v2;
  *(float *)(result + 72) = v3;
  return result;
}

void sub_223FBAD60(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223FBAD78()
{
  JUMPOUT(0x227684CE8);
}

BOOL sub_223FBAD8C(float *a1, float *a2, float *a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v16;
  float v17;
  float v18;

  if ((*(unsigned int (**)(float *))(*(_QWORD *)a2 + 96))(a2) != 1)
    return 0;
  v6 = a1[2];
  v7 = a2[2];
  if (v6 != v7)
  {
    v8 = v6 >= v7 ? v6 - v7 : v7 - v6;
    if (v8 > *a3)
      return 0;
  }
  v9 = a1[3];
  v10 = a2[3];
  if (v9 != v10)
  {
    v11 = v9 >= v10 ? v9 - v10 : v10 - v9;
    if (v11 > *a3)
      return 0;
  }
  v12 = a1[4];
  v13 = a2[4];
  if (v12 != v13)
  {
    v14 = v12 >= v13 ? v12 - v13 : v13 - v12;
    if (v14 > *a3)
      return 0;
  }
  v16 = a1[5];
  v17 = a2[5];
  if (v16 == v17)
    return 1;
  if (v16 >= v17)
    v18 = v16 - v17;
  else
    v18 = v17 - v16;
  return v18 <= *a3;
}

BOOL sub_223FBAEA8(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;

  v3 = a2[2];
  v4 = fabsf(v3);
  if (v4 >= 0.000001)
  {
    v5 = 1.0 / v3;
    *a3 = a1[4] + (float)(v5 * (float)(a1[2] * *a2));
    a3[1] = a1[5] + (float)(v5 * (float)(a1[3] * a2[1]));
  }
  return v4 >= 0.000001;
}

float32x2_t sub_223FBAF14(_QWORD *a1, float32x2_t *a2, uint64_t a3, float32x2_t *a4)
{
  float32x2_t result;
  float v8;
  float32x2_t v9;
  float v10;
  float32x2_t v11;

  if ((*(unsigned int (**)(_QWORD *))(*a1 + 72))(a1))
  {
    v8 = 1.0 / a2[1].f32[0];
    v9 = (float32x2_t)a1[1];
    v10 = vmuls_lane_f32(v8, v9, 1);
    v11 = vmul_n_f32(vmul_f32(*a2, vneg_f32(v9)), v8);
    a4->f32[0] = v8 * v9.f32[0];
    a4->i32[1] = 0;
    a4[1].i32[0] = 0;
    result = vmul_n_f32(v11, v8);
    a4[1].f32[1] = v10;
    a4[2] = result;
  }
  return result;
}

uint64_t sub_223FBAF8C(float *a1, float *a2, float *a3)
{
  *a3 = (float)(a1[6] * *a2) + a1[8];
  a3[1] = (float)(a1[7] * a2[1]) + a1[9];
  return 1;
}

uint64_t sub_223FBAFC4(float *a1, float *a2, float *a3)
{
  *a3 = (float)(a1[2] * *a2) + a1[4];
  a3[1] = (float)(a1[3] * a2[1]) + a1[5];
  return 1;
}

uint64_t sub_223FBAFFC(float *a1, float *a2, float32x2_t *a3)
{
  float32x2_t v3;
  float v4;

  a3->f32[0] = (float)(a1[6] * *a2) + a1[8];
  a3->f32[1] = (float)(a1[7] * a2[1]) + a1[9];
  v3 = *a3;
  v4 = 1.0 / sqrtf(vmla_lane_f32(vmul_f32(v3, v3), (float32x2_t)vdup_lane_s32((int32x2_t)*a3, 1), *a3, 1).f32[0] + 1.0);
  if (a1[2] < 0.0)
    v4 = -v4;
  *a3 = vmul_n_f32(v3, v4);
  a3[1].f32[0] = v4;
  return 1;
}

char *sub_223FBB070@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  __int128 v5;
  char *result;

  v4 = operator new(0x68uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24EC64A30;
  v5 = *(_OWORD *)(a1 + 24);
  *((_OWORD *)v4 + 2) = *(_OWORD *)(a1 + 8);
  *((_OWORD *)v4 + 3) = v5;
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a1 + 40);
  v4[10] = *(_QWORD *)(a1 + 56);
  *((_DWORD *)v4 + 22) = *(_DWORD *)(a1 + 64);
  *(_QWORD *)((char *)v4 + 92) = *(_QWORD *)(a1 + 68);
  a2[1] = v4;
  v4[3] = &off_24EC64920;
  result = (char *)(v4 + 3);
  *a2 = result;
  return result;
}

uint64_t sub_223FBB0E8()
{
  return 1;
}

uint64_t sub_223FBB0F0(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6) != 1)
    return 0;
  v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v8, a3);
  if (!(_DWORD)result)
    return result;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 80))(&v10, a2);
  if (a1[22] != (_DWORD)v10)
    return 0;
  return a1[23] == HIDWORD(v10);
}

char *sub_223FBB1D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  __int128 v5;
  char *result;

  v4 = (char *)operator new(0x80uLL);
  v5 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)v4 = &off_24EC64A80;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 4) = &off_24EC64920;
  *(_OWORD *)(v4 + 56) = v5;
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a1 + 48);
  *((_QWORD *)v4 + 11) = *(_QWORD *)(a1 + 64);
  *((_DWORD *)v4 + 24) = *(_DWORD *)(a1 + 72);
  *(_QWORD *)(v4 + 100) = *(_QWORD *)(a1 + 76);
  *((_OWORD *)v4 + 7) = *(_OWORD *)(a1 + 88);
  a2[1] = v4;
  *((_QWORD *)v4 + 3) = &off_24EC64998;
  result = v4 + 24;
  *a2 = result;
  return result;
}

BOOL sub_223FBB260(uint64_t a1, float *a2, float a3)
{
  float v3;

  if ((float)(*a2 - a3) < -0.5)
    return 0;
  v3 = a2[1];
  return (float)(v3 - a3) >= -0.5
      && (float)(*a2 + a3) < (float)(*(float *)(a1 + 96) + -0.5)
      && (float)(v3 + a3) < (float)(*(float *)(a1 + 100) + -0.5);
}

uint64_t sub_223FBB2BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __n128 v7;
  __n128 v8;
  BOOL v9;
  __n128 v10;
  __n128 v11;
  BOOL v12;
  uint64_t v13;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v7.n128_u32[0] = *(_DWORD *)(a2 + 8);
  v8.n128_u32[0] = -1249495107;
  v9 = *(float *)(v6 + 8) >= 0.0 || v7.n128_f32[0] <= -0.000001;
  if (v9
    && ((v11.n128_u32[0] = *(_DWORD *)((*(uint64_t (**)(uint64_t, __n128, __n128))(*(_QWORD *)a1 + 16))(a1, v8, v7)+ 8), v10.n128_u32[0] = *(_DWORD *)(a2 + 8), v9 = v11.n128_f32[0] <= 0.0, v11.n128_u32[0] = 897988541, !v9)? (v12 = v10.n128_f32[0] < 0.000001): (v12 = 0), !v12&& (v13 = (*(uint64_t (**)(uint64_t, __n128, __n128))(*(_QWORD *)a1 + 16))(a1, v11, v10), (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 72))(v13, a2, a3))))
  {
    return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 48))(a1, a3, 0.0);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_223FBB394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 80))(v8, a2, a3, a4);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 48))(a1, a3, 0.0);
  return result;
}

char *sub_223FBB410@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  int v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char *result;
  uint32x2_t v15;
  int32x2_t v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[8];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _DWORD v26[4];
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) + 8);
  v7 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) + 12);
  v8 = *(float *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) + 16)
     - (float)(**a2 + (*a2[1] & ((int)*a2[1] >> 31)));
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = *(int32x2_t *)a2[1];
  v10 = *(float *)(v9 + 20) - (float)((*a2)[1] + (v16.i32[1] & (v16.i32[1] >> 31)));
  v26[0] = v6;
  v26[1] = v7;
  *(float *)&v26[2] = v8;
  *(float *)&v26[3] = v10;
  sub_223FBAC84((uint64_t)v19, (uint64_t)v26);
  v17 = v21;
  v18 = v20;
  v27 = v22;
  v11 = v23;
  v12 = v24;
  v13 = v25;
  result = (char *)operator new(0x80uLL);
  v15 = (uint32x2_t)vabs_s32(v16);
  *(_QWORD *)result = &off_24EC64A80;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 3) = &off_24EC64998;
  *((_QWORD *)result + 2) = 0;
  *((_QWORD *)result + 4) = &off_24EC64920;
  *(_OWORD *)(result + 40) = v18;
  *(_OWORD *)(result + 56) = v17;
  *(_OWORD *)(result + 72) = v27;
  *((_QWORD *)result + 11) = v11;
  *((_DWORD *)result + 24) = v12;
  *(_QWORD *)(result + 100) = v13;
  *((uint32x2_t *)result + 14) = v15;
  *((float32x2_t *)result + 15) = vcvt_f32_u32(v15);
  *a3 = result + 24;
  a3[1] = result;
  return result;
}

_QWORD *sub_223FBB5DC(_QWORD *result)
{
  *result = &off_24EC64998;
  return result;
}

void sub_223FBB5EC(_QWORD *a1)
{
  *a1 = &off_24EC64998;
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FBB60C(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_223FBB614@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 88);
  return result;
}

void sub_223FBB620(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC64A30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223FBB630(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC64A30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FBB660(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_223FBB670(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC64A80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223FBB680(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC64A80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FBB6B0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_223FBB6C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, float a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  _QWORD **v12;
  uint64_t i;
  float v15;
  double v16;
  uint64_t **v17;
  uint64_t **v18;
  uint64_t *v19;
  unsigned int v20;
  _BYTE *v21;
  _QWORD *v22;
  uint64_t *v23;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  v9 = *a4;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a4 + 2);
  *(_QWORD *)(a1 + 16) = v9;
  v10 = *(uint64_t *)((char *)a4 + 12);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a4 + 5);
  *(_QWORD *)(a1 + 28) = v10;
  *(float *)(a1 + 40) = a8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a6;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a6 + 16);
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v11 = (uint64_t **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = a1 + 104;
  v12 = (_QWORD **)(a1 + 96);
  LODWORD(v10) = *(unsigned __int8 *)(a7 + 96);
  *(_QWORD *)(a1 + 112) = 0;
  if ((_DWORD)v10)
  {
    for (i = 0; i != 12; ++i)
    {
      v16 = *(double *)(a7 + 8 * i);
      if (v16 > 0.0)
      {
        v17 = v11;
        v18 = v11;
        if (*v11)
        {
          v19 = *v11;
          while (1)
          {
            while (1)
            {
              v18 = (uint64_t **)v19;
              v20 = *((unsigned __int8 *)v19 + 28);
              if (v20 <= i)
                break;
              v19 = *v18;
              v17 = v18;
              if (!*v18)
                goto LABEL_14;
            }
            if (v20 >= i)
              break;
            v19 = v18[1];
            if (!v19)
            {
              v17 = v18 + 1;
              goto LABEL_14;
            }
          }
          v21 = v18;
        }
        else
        {
LABEL_14:
          v21 = operator new(0x28uLL);
          v21[28] = i;
          *((_DWORD *)v21 + 8) = 0;
          *(_QWORD *)v21 = 0;
          *((_QWORD *)v21 + 1) = 0;
          *((_QWORD *)v21 + 2) = v18;
          *v17 = (uint64_t *)v21;
          v22 = (_QWORD *)**v12;
          v23 = (uint64_t *)v21;
          if (v22)
          {
            *v12 = v22;
            v23 = *v17;
          }
          sub_2231A9A8C(*(uint64_t **)(a1 + 104), v23);
          ++*(_QWORD *)(a1 + 112);
        }
        v15 = v16;
        *((float *)v21 + 8) = v15;
      }
    }
  }
  return a1;
}

void sub_223FBB870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v14;
  void *v15;

  sub_223198030(v10, v11);
  v14 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v12 + 80) = v14;
    operator delete(v14);
    v15 = *a10;
    if (!*a10)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v15 = *a10;
    if (!*a10)
      goto LABEL_3;
  }
  *(_QWORD *)(v12 + 56) = v15;
  operator delete(v15);
  _Unwind_Resume(a1);
}

void ***sub_223FBB8C4@<X0>(void ***result@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  float *v4;
  float *v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  float32x2_t v12;
  void **v13;

  v5 = (float *)*result;
  v4 = (float *)result[1];
  v11 = 0;
  v10 = 0uLL;
  v6 = (char *)v4 - (char *)v5;
  if (v4 == v5)
  {
    v9 = 0;
    v8 = 0uLL;
  }
  else
  {
    if (v6 < 0)
      sub_22316E078();
    *(_QWORD *)&v10 = operator new((char *)v4 - (char *)v5);
    *((_QWORD *)&v10 + 1) = v10;
    v11 = v10 + 8 * (v6 >> 3);
    v13 = (void **)&v10;
    do
    {
      v12 = vadd_f32(vmla_f32(vmla_n_f32(vmul_n_f32(*a2, *v5), a2[2], v5[1]), 0, a2[4]), a2[6]);
      result = sub_2232EA538(&v13, &v12);
      v5 += 2;
    }
    while (v5 != v4);
    v8 = v10;
    v9 = v11;
  }
  *(_OWORD *)a3 = v8;
  *(_QWORD *)(a3 + 16) = v9;
  return result;
}

void sub_223FBB9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223FBB9C8(_QWORD *a1@<X0>, float *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  const void *v4;
  const void *v5;
  size_t v6;
  unint64_t v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  const void *v11;
  int64_t v12;
  char *v14;
  size_t v15;
  float32x2_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  float32x2_t *v31;
  unint64_t v32;
  float32x2_t *v33;
  float32x2_t *v34;
  float32x2_t v35;
  float32x2_t *v36;
  int64_t v37;
  unint64_t v38;
  float32x2_t *v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  BOOL v53;
  uint64_t v55;
  uint64_t v56;
  const double *v57;
  double *v58;
  uint64_t v59;
  const double *v60;
  double *v61;
  float32x2_t *v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32_t v66;
  float32x2_t v67;
  float32x2_t *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  float32x2_t *v78;
  unint64_t v79;
  char *v80;
  float32x2_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _BYTE *v85;
  char *v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD *v94;
  __int128 *v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD *v100;
  __int128 *v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  char *v105;
  char *v106;
  size_t v107;
  uint64_t v110;
  _QWORD *v111;
  char *v112;
  char *v113;
  float32x2_t *__p;
  float32x2_t *v115;
  float32x2_t *v116;
  float64x2x2_t v117;
  float64x2x2_t v118;

  v3 = a1;
  if (*a2 <= 0.000001)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v11 = (const void *)*a1;
    v12 = a1[1] - *a1;
    if (!v12)
      return;
    if (v12 < 0)
      sub_22316E078();
    v8 = a3;
    v14 = (char *)operator new(v12);
    *a3 = v14;
    a3[2] = &v14[8 * (v12 >> 3)];
    v15 = v12 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v14, v11, v15);
    v10 = &v14[v15];
LABEL_8:
    v8[1] = v10;
    return;
  }
  v5 = (const void *)*a1;
  v4 = (const void *)a1[1];
  v6 = (size_t)v4 - *a1;
  v7 = (uint64_t)v6 >> 3;
  if (v6 <= 0xF)
  {
    v8 = a3;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    if (v4 == v5)
      return;
    v9 = (char *)operator new(v6);
    *a3 = v9;
    a3[2] = &v9[8 * v7];
    memcpy(v9, v5, v6 & 0xFFFFFFFFFFFFFFF8);
    v10 = &v9[v6 & 0xFFFFFFFFFFFFFFF8];
    goto LABEL_8;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFF9)
    sub_22316E078();
  v16 = (float32x2_t *)operator new(2 * v6);
  v17 = 0;
  __p = v16;
  v116 = &v16[2 * v7];
  if (v7 <= 1)
    v18 = 1;
  else
    v18 = v7;
  v110 = v18;
  v111 = v3;
  do
  {
    while (1)
    {
      while (1)
      {
        v19 = *v3;
        v20 = v17 + 1;
        v21 = v17 + 1 == v7 ? 0 : v17 + 1;
        if (v16 >= v116)
          break;
        *v16 = *(float32x2_t *)(v19 + 8 * v17);
        v16[1] = *(float32x2_t *)(v19 + 8 * v21);
        v16 += 2;
        v115 = v16;
        ++v17;
        if (v20 == v18)
          goto LABEL_82;
      }
      v22 = v7;
      v23 = (char *)v16 - (char *)__p;
      v24 = ((char *)v16 - (char *)__p) >> 4;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 60)
        sub_22316E078();
      v26 = (char *)v116 - (char *)__p;
      if (v116 - __p > v25)
        v25 = v26 >> 3;
      v27 = (unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v25;
      if (v27)
      {
        if (v27 >> 60)
          sub_223174E94();
        v28 = (char *)operator new(16 * v27);
      }
      else
      {
        v28 = 0;
      }
      v29 = &v28[16 * v24];
      v30 = &v28[16 * v27];
      *(_QWORD *)v29 = *(_QWORD *)(v19 + 8 * v17);
      *((_QWORD *)v29 + 1) = *(_QWORD *)(v19 + 8 * v21);
      v31 = (float32x2_t *)(v29 + 16);
      if (v16 == __p)
        break;
      v32 = (char *)v16 - (char *)__p - 16;
      if (v32 < 0x3F0)
        goto LABEL_31;
      v36 = v16 - 2;
      v37 = (char *)&v16[-2] - (char *)__p;
      v38 = v37 & 0xFFFFFFFFFFFFFFF0;
      if (&v28[v23 - 16 - (v37 & 0xFFFFFFFFFFFFFFF0)] > &v28[v23 - 16])
        goto LABEL_31;
      if (&v28[v23 - 8 - v38] > &v28[v23 - 8])
        goto LABEL_31;
      if ((float32x2_t *)((char *)v36 - v38) > v36)
        goto LABEL_31;
      v39 = v16 - 1;
      if ((float32x2_t *)((char *)&v16[-1] - v38) > &v16[-1])
        goto LABEL_31;
      v40 = v37 & 0xFFFFFFFFFFFFFFF0;
      v41 = (unint64_t)&v28[v23 - v40 - 16];
      v42 = &v28[v23 - 8];
      v43 = (unint64_t)&v28[v23 - v40 - 8];
      v44 = (unint64_t)v36 - v40;
      v45 = (unint64_t)v39 - v40;
      v46 = v41 >= (unint64_t)v39 || v44 >= (unint64_t)v42;
      v47 = !v46;
      v48 = v41 >= (unint64_t)v16 || v45 >= (unint64_t)v42;
      v49 = !v48;
      v50 = v43 >= (unint64_t)v39 || v44 >= (unint64_t)v29;
      v51 = !v50;
      v52 = v43 >= (unint64_t)v16 || v45 >= (unint64_t)v29;
      v53 = !v52;
      if (v43 < (unint64_t)v42 && v41 < (unint64_t)v29)
      {
LABEL_31:
        v33 = v16;
        v34 = (float32x2_t *)v29;
        v7 = v22;
        v3 = v111;
        goto LABEL_32;
      }
      v7 = v22;
      if (v47)
      {
        v33 = v16;
        v34 = (float32x2_t *)v29;
        v3 = v111;
        do
        {
LABEL_32:
          v35 = v33[-2];
          v33 -= 2;
          v34[-2] = v35;
          v34 -= 2;
          v34[1] = v33[1];
        }
        while (v33 != __p);
        goto LABEL_33;
      }
      v3 = v111;
      if (v49 || v51 || v53)
      {
        v33 = v16;
        v34 = (float32x2_t *)v29;
        goto LABEL_32;
      }
      v55 = (v32 >> 4) + 1;
      v56 = 16 * (v55 & 0x1FFFFFFFFFFFFFFCLL);
      v33 = &v16[v56 / 0xFFFFFFFFFFFFFFF8];
      v34 = (float32x2_t *)&v29[-v56];
      v57 = (const double *)&v16[-4];
      v58 = (double *)(v29 - 32);
      v59 = v55 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v117 = vld2q_f64(v57);
        v60 = v57 - 4;
        v118 = vld2q_f64(v60);
        vst2q_f64(v58, v117);
        v61 = v58 - 4;
        vst2q_f64(v61, v118);
        v58 -= 8;
        v57 -= 8;
        v59 -= 4;
      }
      while (v59);
      if (v55 != (v55 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_32;
LABEL_33:
      v16 = __p;
      __p = v34;
      v116 = (float32x2_t *)v30;
      if (v16)
        goto LABEL_37;
      v16 = v31;
      v18 = v110;
      v115 = v31;
      v17 = v20;
      if (v20 == v110)
        goto LABEL_82;
    }
    __p = (float32x2_t *)&v28[16 * v24];
    v116 = (float32x2_t *)&v28[16 * v27];
    v7 = v22;
    v3 = v111;
LABEL_37:
    operator delete(v16);
    v16 = v31;
    v18 = v110;
    v115 = v31;
    v17 = v20;
  }
  while (v20 != v110);
LABEL_82:
  v62 = __p;
  if (__p == v16)
    goto LABEL_148;
  do
  {
    v63 = v62[1];
    v64 = vsub_f32(v63, *v62);
    v65 = vmul_n_f32(v64, 1.0 / sqrtf(vmla_lane_f32(vmul_f32(v64, v64), (float32x2_t)vdup_lane_s32((int32x2_t)v64, 1), v64, 1).f32[0]));
    v66 = -v65.f32[0];
    v65.i32[0] = vdup_lane_s32((int32x2_t)v65, 1).u32[0];
    v65.f32[1] = v66;
    v67 = vmul_n_f32(v65, *a2);
    *v62 = vadd_f32(*v62, v67);
    v62[1] = vadd_f32(v63, v67);
    v62 += 2;
  }
  while (v62 != v16);
  v68 = __p;
  v69 = (char *)v115 - (char *)__p;
  if (v115 == __p)
  {
LABEL_148:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_153;
  }
  if (v69 < 0)
    sub_22316E078();
  v70 = (char *)operator new((char *)v115 - (char *)__p);
  v112 = v70;
  v113 = &v70[8 * (v69 >> 3)];
  while (2)
  {
    if (v70 < v113)
    {
      *(float32x2_t *)v70 = *v68;
      v71 = v113;
      v72 = v70 + 8;
      goto LABEL_109;
    }
    v73 = (v70 - v112) >> 3;
    v74 = v73 + 1;
    if ((unint64_t)(v73 + 1) >> 61)
      goto LABEL_159;
    v75 = v113 - v112;
    if ((v113 - v112) >> 2 > v74)
      v74 = v75 >> 2;
    if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
      v76 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v76 = v74;
    if (v76)
    {
      if (v76 >> 61)
        goto LABEL_161;
      v77 = operator new(8 * v76);
    }
    else
    {
      v77 = 0;
    }
    v78 = (float32x2_t *)&v77[8 * v73];
    v71 = &v77[8 * v76];
    *v78 = *v68;
    v72 = (char *)&v78[1];
    if (v70 == v112)
    {
      v112 = &v77[8 * v73];
      v113 = v71;
LABEL_108:
      operator delete(v70);
      goto LABEL_109;
    }
    v79 = v70 - v112 - 8;
    if (v79 < 0x168)
    {
      v80 = v70;
      goto LABEL_104;
    }
    v90 = (v70 - 8 - v112) & 0xFFFFFFFFFFFFFFF8;
    if (&v77[v70 - v112 - 8 - v90] > &v77[v70 - v112 - 8])
    {
      v80 = v70;
      goto LABEL_104;
    }
    if (&v70[-v90 - 8] > v70 - 8)
    {
      v80 = v70;
      goto LABEL_104;
    }
    if ((unint64_t)(v112 - v77) < 0x20)
    {
      v80 = v70;
      goto LABEL_104;
    }
    v92 = (v79 >> 3) + 1;
    v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
    v80 = &v70[-v93];
    v78 = (float32x2_t *)((char *)v78 - v93);
    v94 = &v77[8 * v73 - 16];
    v95 = (__int128 *)(v70 - 16);
    v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v97 = *v95;
      *(v94 - 1) = *(v95 - 1);
      *v94 = v97;
      v94 -= 2;
      v95 -= 2;
      v96 -= 4;
    }
    while (v96);
    if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_104:
        v81 = *(float32x2_t *)(v80 - 8);
        v80 -= 8;
        v78[-1] = v81;
        --v78;
      }
      while (v80 != v112);
    }
    v70 = v112;
    v112 = (char *)v78;
    v113 = v71;
    if (v70)
      goto LABEL_108;
LABEL_109:
    if (v72 < v71)
    {
      *(float32x2_t *)v72 = v68[1];
      v70 = v72 + 8;
      goto LABEL_88;
    }
    v82 = (v72 - v112) >> 3;
    v83 = v82 + 1;
    if ((unint64_t)(v82 + 1) >> 61)
LABEL_159:
      sub_22316E078();
    if ((v71 - v112) >> 2 > v83)
      v83 = (v71 - v112) >> 2;
    if ((unint64_t)(v71 - v112) >= 0x7FFFFFFFFFFFFFF8)
      v84 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v84 = v83;
    if (v84)
    {
      if (v84 >> 61)
LABEL_161:
        sub_223174E94();
      v85 = operator new(8 * v84);
    }
    else
    {
      v85 = 0;
    }
    v86 = &v85[8 * v82];
    *(float32x2_t *)v86 = v68[1];
    v70 = v86 + 8;
    if (v72 == v112)
    {
      v112 = &v85[8 * v82];
      v113 = &v85[8 * v84];
LABEL_127:
      operator delete(v72);
      goto LABEL_88;
    }
    v87 = v72 - v112 - 8;
    if (v87 < 0x168)
    {
      v88 = v72;
      goto LABEL_123;
    }
    v91 = (v72 - 8 - v112) & 0xFFFFFFFFFFFFFFF8;
    if (&v85[v72 - v112 - 8 - v91] > &v85[v72 - v112 - 8])
    {
      v88 = v72;
      goto LABEL_123;
    }
    if (&v72[-v91 - 8] > v72 - 8)
    {
      v88 = v72;
      goto LABEL_123;
    }
    if ((unint64_t)(v112 - v85) < 0x20)
    {
      v88 = v72;
      goto LABEL_123;
    }
    v98 = (v87 >> 3) + 1;
    v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
    v88 = &v72[-v99];
    v86 -= v99;
    v100 = &v85[8 * v82 - 16];
    v101 = (__int128 *)(v72 - 16);
    v102 = v98 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v103 = *v101;
      *(v100 - 1) = *(v101 - 1);
      *v100 = v103;
      v100 -= 2;
      v101 -= 2;
      v102 -= 4;
    }
    while (v102);
    if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_123:
        v89 = *((_QWORD *)v88 - 1);
        v88 -= 8;
        *((_QWORD *)v86 - 1) = v89;
        v86 -= 8;
      }
      while (v88 != v112);
    }
    v72 = v112;
    v112 = v86;
    v113 = &v85[8 * v84];
    if (v72)
      goto LABEL_127;
LABEL_88:
    v68 += 2;
    if (v68 != v115)
      continue;
    break;
  }
  v104 = v70 - v112;
  if (v70 == v112)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    if (v112)
      goto LABEL_152;
  }
  else
  {
    if (v104 < 0)
      sub_22316E078();
    v105 = (char *)operator new(v70 - v112);
    v106 = &v105[8 * (v104 >> 3)];
    v107 = v104 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v105, v112, v107);
    *a3 = v105;
    a3[1] = &v105[v107];
    a3[2] = v106;
    if (v112)
LABEL_152:
      operator delete(v112);
  }
LABEL_153:
  if (__p)
    operator delete(__p);
}

void sub_223FBC218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  void *v22;
  void *v23;

  if (__p)
  {
    operator delete(__p);
    v22 = a17;
    if (!a17)
    {
LABEL_3:
      v23 = a20;
      if (!a20)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(v23);
      goto LABEL_8;
    }
  }
  else
  {
    v22 = a17;
    if (!a17)
      goto LABEL_3;
  }
  operator delete(v22);
  v23 = a20;
  if (!a20)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_223FBC2C4(float32x2_t **a1, float *a2, char a3, float a4)
{
  float32x2_t *v4;
  float32x2_t *v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  BOOL v13;
  float v14;
  float v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  BOOL v24;
  _BOOL8 result;
  float32x2_t v28;
  uint64_t v29;
  float32x2_t v30;
  uint64_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float v35;
  BOOL v36;
  char v37;
  double v38;
  uint64_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  double v45;
  double v46;
  char v47;

  v4 = *a1;
  v5 = a1[1];
  v6 = v5 - *a1;
  switch(v6)
  {
    case 0:
      return 0;
    case 2:
      if ((a3 & 1) != 0)
        return 0;
      v16 = *v4;
      v17 = v4[1];
      v18 = vsub_f32(v17, *v4);
      LODWORD(v19) = HIDWORD(*(unint64_t *)v4);
      v20 = *a2;
      v21 = a2[1];
      v22 = v17.f32[1];
      v23 = (float)((float)((float)(v19 - v21) * v18.f32[0])
                  - (float)((float)(v17.f32[1] - v19) * (float)(COERCE_FLOAT(*v4) - *a2)))
          / sqrtf(vmla_lane_f32(vmul_f32(v18, v18), (float32x2_t)vdup_lane_s32((int32x2_t)v18, 1), v18, 1).f32[0]);
      v24 = v23 == 0.0;
      if (v23 < 0.0)
        v23 = 0.0 - v23;
      if (!v24 && v23 > a4)
        return 0;
      if (v16.f32[0] == v20)
      {
        if ((float)(v19 - a4) <= v21 && v21 <= (float)(v17.f32[1] + a4))
          return 1;
        v20 = a2[1];
        if ((float)(v19 + a4) < v21)
          return 0;
      }
      else
      {
        v22 = v17.f32[0];
        if ((float)(v16.f32[0] - a4) <= v20 && v20 <= (float)(v17.f32[0] + a4))
          return 1;
        if ((float)(v16.f32[0] + a4) < v20)
          return 0;
      }
      return v20 >= (float)(v22 - a4);
    case 1:
      if ((a3 & 1) == 0)
      {
        v7 = *a2;
        v8 = v4->f32[0];
        if (*a2 == v4->f32[0])
          goto LABEL_9;
        v9 = v7 - v8;
        v10 = v8 - v7;
        if (*a2 >= v4->f32[0])
          v10 = v9;
        if (v10 <= a4)
        {
LABEL_9:
          v11 = a2[1];
          v12 = v4->f32[1];
          v13 = v11 < v12;
          if (v11 == v12)
            return 1;
          v14 = v11 - v12;
          v15 = v12 - v11;
          if (!v13)
            v15 = v14;
          if (v15 <= a4)
            return 1;
        }
      }
      return 0;
  }
  if (v5 == v4)
    return 1;
  v28 = *(float32x2_t *)a2;
  v29 = v5 - *a1;
  v30 = v4[v6 - 1];
  if ((a3 & 1) != 0)
  {
    v31 = v29 - 1;
    do
    {
      v32 = v30;
      v33 = *v4++;
      v30 = v33;
      v34 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)vsub_f32(v32, v28)), vsub_f32(v33, v32));
      LODWORD(v35) = vsub_f32(v34, (float32x2_t)vdup_lane_s32((int32x2_t)v34, 1)).u32[0];
      v36 = v31-- != 0;
      v37 = v36;
      result = v35 < 0.0;
    }
    while (v35 < 0.0 && (v37 & 1) != 0);
  }
  else
  {
    v38 = a4;
    v39 = v29 - 1;
    do
    {
      v40 = v30;
      v41 = *v4++;
      v30 = v41;
      v42 = (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(v40, v28));
      v43 = vsub_f32(v41, v40);
      v44 = vmul_f32(v42, v43);
      v45 = vsub_f32(v44, (float32x2_t)vdup_lane_s32((int32x2_t)v44, 1)).f32[0];
      v46 = v38 * sqrtf(vmla_lane_f32(vmul_f32(v43, v43), (float32x2_t)vdup_lane_s32((int32x2_t)v43, 1), v43, 1).f32[0]);
      v36 = v39-- != 0;
      v47 = v36;
      result = v46 >= v45;
    }
    while (v46 >= v45 && (v47 & 1) != 0);
  }
  return result;
}

void sub_223FBC4C4(float **a1@<X0>, float32x2_t *a2@<X1>, _BYTE *a3@<X8>, float a4@<S0>)
{
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  float *v17;
  float *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  float32x2_t *v22;
  float32x2_t *v23;
  unint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  _QWORD *v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  __int128 *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  int64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  _QWORD *v54;
  int64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _OWORD *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  int64_t v65;
  char *v66;
  int64_t v67;
  char *v68;
  char *v69;
  char *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  float32x2_t v75;
  char *v76;
  char *v77;
  size_t v78;
  char *v79;
  char *v80;
  char *v81;
  size_t v82;
  char *v83;
  char *v84;
  char *v85;
  size_t v86;
  char *v87;
  _BYTE *v88;
  char *v89;
  char *v90;
  size_t v91;
  char *v92;
  float32x2_t *v93;
  _BYTE *v94;
  void *v95;
  char *v96;
  char *v97;
  void *__p;
  float32x2_t *v99;
  float32x2_t *v100;
  _QWORD *v101;
  _QWORD *v102;
  char v103[8];
  char *v104;
  char *v105;

  sub_223FBCD4C((uint64_t)v103, a1, a2, a4);
  v7 = v104;
  if (v105 - v104 != 80)
  {
LABEL_10:
    *a3 = 0;
    a3[48] = 0;
    if (v7)
      goto LABEL_83;
    return;
  }
  v9 = *(_QWORD **)v104;
  v8 = (_QWORD *)*((_QWORD *)v104 + 1);
  if (*(_QWORD **)v104 != v8)
  {
    v10 = (_QWORD *)*((_QWORD *)v104 + 6);
    if (*((_QWORD **)v104 + 5) != v10)
    {
      do
      {
        v11 = (_QWORD *)*((_QWORD *)v104 + 5);
        do
        {
          if (*v9 == *v11)
            goto LABEL_10;
          ++v11;
        }
        while (v11 != v10);
        ++v9;
      }
      while (v9 != v8);
    }
  }
  v12 = *(v8 - 1);
  v13 = **((_QWORD **)v105 - 5);
  v14 = (_QWORD *)*((_QWORD *)v104 + 3);
  v15 = (_QWORD *)*((_QWORD *)v105 - 2);
  v101 = v15;
  v102 = v14;
  if (v12 <= v13)
  {
    v16 = v12;
    v12 = v13;
  }
  else
  {
    v101 = v14;
    v102 = v15;
    v16 = v13;
  }
  v18 = *a1;
  v17 = a1[1];
  v19 = ((char *)v17 - (char *)*a1) >> 3;
  v99 = 0;
  v100 = 0;
  __p = 0;
  v20 = v19 + 1;
  v93 = a2;
  v94 = a3;
  if (v19 != -1)
  {
    if (v20 >> 61)
      sub_22316E078();
    v22 = (float32x2_t *)operator new(8 * v20);
    __p = v22;
    v99 = v22;
    v100 = &v22[v20];
    v21 = (char *)operator new(8 * v20);
    v95 = v21;
    v96 = v21;
    v97 = &v21[8 * v20];
    v23 = v22;
    if (v17 != v18)
      goto LABEL_15;
LABEL_76:
    v65 = (char *)v23 - (char *)v22;
    if ((char *)v23 - (char *)v22 != 16)
      goto LABEL_77;
    goto LABEL_78;
  }
  v21 = 0;
  v22 = 0;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v23 = 0;
  if (v17 == v18)
    goto LABEL_76;
LABEL_15:
  v24 = 0;
  do
  {
    if (v24 > v16)
      goto LABEL_41;
    v25 = v99;
    if (v99 >= v100)
    {
      v27 = __p;
      v28 = (char *)v99 - (_BYTE *)__p;
      v29 = ((char *)v99 - (_BYTE *)__p) >> 3;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 61)
        goto LABEL_111;
      v31 = (char *)v100 - (_BYTE *)__p;
      if (((char *)v100 - (_BYTE *)__p) >> 2 > v30)
        v30 = v31 >> 2;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
        v32 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (v32)
      {
        if (v32 >> 61)
          goto LABEL_110;
        v33 = operator new(8 * v32);
        v34 = &v33[8 * v29];
        *v34 = *(_QWORD *)&v18[2 * v24];
        v26 = (uint64_t)(v34 + 1);
        v35 = v25 - v27;
        if (v25 != v27)
        {
LABEL_29:
          v36 = v35 - 8;
          if (v36 < 0x58)
            goto LABEL_119;
          if ((unint64_t)(v25 - v33 - v28) < 0x20)
            goto LABEL_119;
          v37 = (v36 >> 3) + 1;
          v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
          v39 = &v25[-v38];
          v34 = (_QWORD *)((char *)v34 - v38);
          v40 = &v33[8 * v29 - 16];
          v41 = (__int128 *)(v25 - 16);
          v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v43 = *v41;
            *(v40 - 1) = *(v41 - 1);
            *v40 = v43;
            v40 -= 2;
            v41 -= 2;
            v42 -= 4;
          }
          while (v42);
          v25 = v39;
          if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_119:
            do
            {
              v44 = *((_QWORD *)v25 - 1);
              v25 -= 8;
              *--v34 = v44;
            }
            while (v25 != v27);
          }
          v25 = __p;
          __p = v34;
          v99 = (float32x2_t *)v26;
          v100 = (float32x2_t *)&v33[8 * v32];
          if (!v25)
            goto LABEL_40;
LABEL_39:
          operator delete(v25);
          goto LABEL_40;
        }
      }
      else
      {
        v33 = 0;
        v34 = (_QWORD *)(8 * v29);
        *(_QWORD *)(8 * v29) = *(_QWORD *)&v18[2 * v24];
        v26 = 8 * v29 + 8;
        v35 = v25 - v27;
        if (v25 != v27)
          goto LABEL_29;
      }
      __p = v34;
      v99 = (float32x2_t *)v26;
      v100 = (float32x2_t *)&v33[8 * v32];
      if (v25)
        goto LABEL_39;
    }
    else
    {
      *v99 = *(float32x2_t *)&v18[2 * v24];
      v26 = (uint64_t)(v25 + 8);
    }
LABEL_40:
    v99 = (float32x2_t *)v26;
LABEL_41:
    if (v24 == v16)
    {
      sub_223FBE69C((uint64_t)&__p, (float *)&v102);
      v45 = v96;
      if (v96 < v97)
      {
        *(_QWORD *)v96 = v102;
        v46 = (uint64_t)(v45 + 8);
LABEL_64:
        v96 = (char *)v46;
        goto LABEL_65;
      }
      v47 = v95;
      v48 = v96 - (_BYTE *)v95;
      v49 = (v96 - (_BYTE *)v95) >> 3;
      v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 61)
LABEL_111:
        sub_22316E078();
      v51 = v97 - (_BYTE *)v95;
      if ((v97 - (_BYTE *)v95) >> 2 > v50)
        v50 = v51 >> 2;
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
        v52 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v52 = v50;
      if (v52)
      {
        if (v52 >> 61)
LABEL_110:
          sub_223174E94();
        v53 = operator new(8 * v52);
        v54 = &v53[8 * v49];
        *v54 = v102;
        v46 = (uint64_t)(v54 + 1);
        v55 = v45 - v47;
        if (v45 != v47)
        {
LABEL_53:
          v56 = v55 - 8;
          if (v56 < 0x58)
            goto LABEL_120;
          if ((unint64_t)(v45 - &v53[v48]) < 0x20)
            goto LABEL_120;
          v57 = (v56 >> 3) + 1;
          v58 = 8 * (v57 & 0x3FFFFFFFFFFFFFFCLL);
          v59 = &v45[-v58];
          v54 = (_QWORD *)((char *)v54 - v58);
          v60 = &v53[8 * v49 - 16];
          v61 = (__int128 *)(v45 - 16);
          v62 = v57 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v63 = *v61;
            *(v60 - 1) = *(v61 - 1);
            *v60 = v63;
            v60 -= 2;
            v61 -= 2;
            v62 -= 4;
          }
          while (v62);
          v45 = v59;
          if (v57 != (v57 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_120:
            do
            {
              v64 = *((_QWORD *)v45 - 1);
              v45 -= 8;
              *--v54 = v64;
            }
            while (v45 != v47);
          }
          v45 = v95;
          v95 = v54;
          v96 = (char *)v46;
          v97 = &v53[8 * v52];
          if (!v45)
            goto LABEL_64;
          goto LABEL_63;
        }
      }
      else
      {
        v53 = 0;
        v54 = (_QWORD *)(8 * v49);
        *(_QWORD *)(8 * v49) = v102;
        v46 = 8 * v49 + 8;
        v55 = v45 - v47;
        if (v45 != v47)
          goto LABEL_53;
      }
      v95 = v54;
      v96 = (char *)v46;
      v97 = &v53[8 * v52];
      if (!v45)
        goto LABEL_64;
LABEL_63:
      operator delete(v45);
      goto LABEL_64;
    }
LABEL_65:
    if (v24 > v16 && v24 <= v12)
      sub_223FBE69C((uint64_t)&v95, &(*a1)[2 * v24]);
    if (v24 == v12)
    {
      sub_223FBE69C((uint64_t)&v95, (float *)&v101);
      sub_223FBE69C((uint64_t)&__p, (float *)&v101);
    }
    v18 = *a1;
    if (v24 > v12)
    {
      sub_223FBE69C((uint64_t)&__p, &v18[2 * v24]);
      v18 = *a1;
    }
    ++v24;
  }
  while (v24 < ((char *)a1[1] - (char *)v18) >> 3);
  v22 = (float32x2_t *)__p;
  v23 = v99;
  v21 = (char *)v95;
  v65 = (char *)v99 - (_BYTE *)__p;
  if ((char *)v99 - (_BYTE *)__p == 16)
    goto LABEL_78;
LABEL_77:
  v66 = v96;
  v67 = v96 - v21;
  if (v96 - v21 != 16)
  {
    v73 = v65 >> 3;
    v74 = v67 >> 3;
    v75 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*v93, *v22)), vsub_f32(v93[1], *v93));
    if (vsub_f32(v75, (float32x2_t)vdup_lane_s32((int32x2_t)v75, 1)).f32[0] < 0.0)
    {
      if (v23 == v22)
      {
        v77 = 0;
        v79 = 0;
        v76 = 0;
        if (v96 != v21)
        {
LABEL_95:
          if (v67 < 0)
            sub_22316E078();
          v80 = (char *)operator new(v67);
          v81 = &v80[8 * v74];
          v82 = v67 & 0xFFFFFFFFFFFFFFF8;
          memcpy(v80, v21, v82);
          v83 = &v80[v82];
LABEL_104:
          *(_QWORD *)v94 = v76;
          *((_QWORD *)v94 + 1) = v79;
          *((_QWORD *)v94 + 2) = v77;
          *((_QWORD *)v94 + 3) = v80;
          *((_QWORD *)v94 + 4) = v83;
          *((_QWORD *)v94 + 5) = v81;
          v94[48] = 1;
          if (!v21)
            goto LABEL_80;
          goto LABEL_79;
        }
      }
      else
      {
        if (v65 < 0)
          sub_22316E078();
        v76 = (char *)operator new(v65);
        v77 = &v76[8 * v73];
        v78 = v65 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v76, v22, v78);
        v79 = &v76[v78];
        if (v66 != v21)
          goto LABEL_95;
      }
      v81 = 0;
      v83 = 0;
      v80 = 0;
      goto LABEL_104;
    }
    if (v96 == v21)
    {
      v85 = 0;
      v87 = 0;
      v84 = 0;
      if (v23 != v22)
      {
LABEL_100:
        v88 = v94;
        if (v65 < 0)
          sub_22316E078();
        v89 = (char *)operator new(v65);
        v90 = &v89[8 * v73];
        v91 = v65 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v89, v22, v91);
        v92 = &v89[v91];
LABEL_108:
        *(_QWORD *)v88 = v84;
        *((_QWORD *)v88 + 1) = v87;
        *((_QWORD *)v88 + 2) = v85;
        *((_QWORD *)v88 + 3) = v89;
        *((_QWORD *)v88 + 4) = v92;
        *((_QWORD *)v88 + 5) = v90;
        v88[48] = 1;
        if (!v21)
          goto LABEL_80;
LABEL_79:
        v96 = v21;
        operator delete(v21);
        v22 = (float32x2_t *)__p;
        goto LABEL_80;
      }
    }
    else
    {
      if (v67 < 0)
        sub_22316E078();
      v84 = (char *)operator new(v96 - v21);
      v85 = &v84[8 * v74];
      v86 = v67 & 0xFFFFFFFFFFFFFFF8;
      memcpy(v84, v21, v86);
      v87 = &v84[v86];
      if (v23 != v22)
        goto LABEL_100;
    }
    v90 = 0;
    v92 = 0;
    v89 = 0;
    v88 = v94;
    goto LABEL_108;
  }
LABEL_78:
  *v94 = 0;
  v94[48] = 0;
  if (v21)
    goto LABEL_79;
LABEL_80:
  if (v22)
  {
    v99 = v22;
    operator delete(v22);
  }
  v7 = v104;
  if (v104)
  {
LABEL_83:
    v68 = v105;
    v69 = v7;
    if (v105 != v7)
    {
      v70 = v105;
      do
      {
        v72 = (void *)*((_QWORD *)v70 - 5);
        v70 -= 40;
        v71 = v72;
        if (v72)
        {
          *((_QWORD *)v68 - 4) = v71;
          operator delete(v71);
        }
        v68 = v70;
      }
      while (v70 != v7);
      v69 = v104;
    }
    v105 = v7;
    operator delete(v69);
  }
}

void sub_223FBCC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  void *v28;
  uint64_t v29;
  void *v31;

  if (__p)
    operator delete(__p);
  if (v28)
    operator delete(v28);
  if (a24)
  {
    operator delete(a24);
    v31 = a27;
    if (!a27)
    {
LABEL_7:
      sub_223FBE8D4(v29 - 120);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v31 = a27;
    if (!a27)
      goto LABEL_7;
  }
  operator delete(v31);
  sub_223FBE8D4(v29 - 120);
  _Unwind_Resume(a1);
}

void sub_223FBCD4C(uint64_t a1, float **a2, float32x2_t *a3, float a4)
{
  void **v5;
  float *v6;
  float *v7;
  unint64_t v8;
  float32x2_t *v9;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  BOOL v16;
  float v17;
  float v18;
  char v19;
  int v20;
  float v21;
  BOOL v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  __int128 v28;
  float32x2_t v29;
  float v30;
  float v31;
  BOOL v32;
  float v33;
  float v34;
  float v35;
  float v37;
  float v38;
  float **v39;
  float v40;
  float v41;
  BOOL v42;
  float v43;
  float v44;
  float v45;
  float v46;
  BOOL v47;
  float v48;
  float v49;
  float32x2_t *v50;
  float32x2_t *v51;
  float32x2_t *v52;
  __int128 v53;
  float32x2_t v54;
  unint64_t v55;
  unint64_t v56;
  float32x2_t v57;
  unint64_t v58;
  float32x2_t *v59;
  uint64_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float v64;
  float v65;
  float v66;
  float32x2_t *v67;
  float32x2_t *v68;
  float **v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  void *v77;
  float32x2_t *v78;
  float32x2_t *v79;
  int64_t v80;
  unint64_t v81;
  float32x2_t *v82;
  float32x2_t *v83;
  float32x2_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  float32x2_t *v89;
  uint64_t v90;
  __int128 v91;
  float v92;
  float v93;
  float v94;
  float32x2_t v95;
  BOOL v97;
  float v98;
  float v99;
  float32x2_t v100;
  float v102;
  float32x2_t v104;
  float v106;
  float v107;
  float v108;
  BOOL v109;
  float v110;
  float v111;
  int v112;
  BOOL v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float32x2_t v123;
  float32x2_t v124;
  float32x2_t v125;
  float v126;
  BOOL v127;
  _QWORD *v129;
  float32x2_t v130;
  float v131;
  float32x2_t *v132;
  float v133;
  __int32 v134;
  int v135;
  int v136;
  float v137;
  float v138;
  float v139;
  BOOL v140;
  float v142;
  float32x2_t *v143;
  float32x2_t *v144;
  float32x2_t **v145;
  float32x2_t *v146;
  float32x2_t *v147;
  float32x2_t **v148;
  char *v149;
  void *v150;
  float32x2_t *v151;
  float32x2_t *v152;
  float32x2_t **v153;
  float32x2_t v154;
  uint64_t v155;
  float32x2_t *v156;
  float32x2_t *v157;
  float v158;
  int v159;
  float v160;
  int v161;
  char *v162;
  void *v163;
  float32x2_t *v164;
  float32x2_t *v165;
  char *v166;
  float v167;
  int v168;
  float v169;
  float32x2_t v170;
  float32x2_t v171;
  float32x2_t v172;
  float v173;
  BOOL v174;
  float32x2_t *v176;
  float32x2_t *v177;
  float32x2_t v178;
  char *v179;
  void *v180;
  float32x2_t v181;
  float32x2_t v182;
  float32x2_t *v183;
  float32x2_t *v184;
  float v185;
  int v186;
  float32x2_t *v187;
  float v188;
  __int32 v189;
  float v190;
  int v191;
  float v192;
  int v193;
  void **v194;
  uint64_t v195;
  _BYTE *v196;
  float32x2_t *v197;
  float32x2_t v198;
  uint64_t v199;
  float32x2_t *v200;
  float32x2_t *v201;
  unint64_t v202;
  float32x2_t *v203;
  float *v204;
  float *v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  BOOL v212;
  float v213;
  float v214;
  float32x2_t *v215;
  float32x2_t *v216;
  float32x2_t **v217;
  char *v218;
  void *v219;
  float32x2_t *v220;
  unint64_t v221;
  float32x2_t *v222;
  float32x2_t *v223;
  float *v224;
  float *v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  BOOL v232;
  float v233;
  float v234;
  void *v235;
  float32x2_t *v236;
  uint64_t v237;
  void *v238;
  float32x2_t *v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  void **v244;
  float v245;
  unint64_t v246;
  float32x2_t v247;
  float32x2_t v248;
  float32x2_t *__p;
  __int128 v250;
  float v251;
  void *v252;
  float32x2_t *v253;
  float32x2_t *v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  int v258;
  float32x2_t v259;
  float32x2_t v260;
  __int128 v261;
  float32x2_t *v262;
  float32x2_t v263[4];

  v263[2] = *(float32x2_t *)MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 0x300000003;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v7 = *a2;
  v6 = a2[1];
  v8 = ((char *)v6 - (char *)*a2) >> 3;
  if (!v8)
    return;
  v9 = a3;
  if (v8 == 2)
  {
    v261 = *(_OWORD *)v7;
    if ((sub_22369F3FC((float32x2_t *)&v261, a3, v263, 0) & 1) != 0)
      return;
    v23 = *((float *)&v261 + 1);
    v24 = *((float *)&v261 + 3);
    v26 = v9->f32[0];
    v25 = v9->f32[1];
    v27 = *((float *)&v261 + 3) - *((float *)&v261 + 1);
    v28 = v261;
    v29 = vsub_f32(*(float32x2_t *)((char *)&v261 + 8), *(float32x2_t *)&v261);
    v30 = sqrtf(vmla_lane_f32(vmul_f32(v29, v29), (float32x2_t)vdup_lane_s32((int32x2_t)v29, 1), v29, 1).f32[0]);
    v31 = (float)((float)((float)(*((float *)&v261 + 2) - *(float *)&v261) * (float)(*((float *)&v261 + 1) - v25))
                - (float)((float)(*(float *)&v261 - v9->f32[0]) * (float)(*((float *)&v261 + 3) - *((float *)&v261 + 1))))
        / v30;
    v32 = v31 == 0.0;
    if (v31 >= 0.0)
      v33 = (float)((float)((float)(*((float *)&v261 + 2) - *(float *)&v261) * (float)(*((float *)&v261 + 1) - v25))
                  - (float)((float)(*(float *)&v261 - v9->f32[0])
                          * (float)(*((float *)&v261 + 3) - *((float *)&v261 + 1))))
          / v30;
    else
      v33 = 0.0 - v31;
    v34 = *(float *)&v261;
    v35 = *((float *)&v261 + 3);
    if (!v32 && v33 > a4)
      goto LABEL_187;
    if (*(float *)&v261 == v26)
    {
      if ((float)(*((float *)&v261 + 1) - a4) <= v25 && v25 <= (float)(*((float *)&v261 + 3) + a4))
        goto LABEL_186;
      v37 = *((float *)&v261 + 3);
      v38 = v9->f32[1];
      if ((float)(*((float *)&v261 + 1) + a4) < v25)
        goto LABEL_187;
    }
    else
    {
      if ((float)(*(float *)&v261 - a4) <= v26 && v26 <= (float)(*((float *)&v261 + 2) + a4))
        goto LABEL_186;
      v37 = *((float *)&v261 + 2);
      v38 = v9->f32[0];
      if ((float)(*(float *)&v261 + a4) < v26)
        goto LABEL_187;
    }
    if (v38 >= (float)(v37 - a4))
    {
LABEL_186:
      v135 = 2;
      v136 = 1;
      goto LABEL_188;
    }
LABEL_187:
    v136 = 0;
    v135 = 1;
LABEL_188:
    v138 = v9[1].f32[0];
    v137 = v9[1].f32[1];
    *(_DWORD *)a1 = v135;
    v139 = (float)((float)((float)(v23 - v137) * v29.f32[0]) - (float)(v27 * (float)(*(float *)&v28 - v138))) / v30;
    v140 = v139 == 0.0;
    if (v139 < 0.0)
      v139 = 0.0 - v139;
    if (v140 || v139 <= a4)
    {
      if (*(float *)&v28 == v138)
      {
        if ((float)(v23 - a4) <= v137 && v137 <= (float)(v24 + a4))
          goto LABEL_206;
        v16 = (float)(v23 + a4) < v137;
        v142 = v137;
        if (!v16)
          goto LABEL_205;
      }
      else
      {
        if ((float)(*(float *)&v28 - a4) <= v138 && v138 <= (float)(*((float *)&v28 + 2) + a4))
          goto LABEL_206;
        v35 = *((float *)&v28 + 2);
        v142 = v138;
        if ((float)(*(float *)&v28 + a4) >= v138)
        {
LABEL_205:
          if (v142 >= (float)(v35 - a4))
          {
LABEL_206:
            *(_DWORD *)(a1 + 4) = 2;
            if (v136)
            {
              v146 = (float32x2_t *)operator new(8uLL);
              *v146 = 0;
              v147 = v146 + 1;
              v253 = v146 + 1;
              v254 = v146 + 1;
              v252 = v146;
              v260.i32[0] = 2;
              v259.i32[0] = 2;
              v148 = *(float32x2_t ***)(a1 + 16);
              if ((unint64_t)v148 >= *(_QWORD *)(a1 + 24))
              {
                v162 = sub_223FC22B0(v5, (uint64_t)&v252, (uint64_t *)v9, &v260, &v259);
                v163 = v252;
                *(_QWORD *)(a1 + 16) = v162;
                if (v163)
                  operator delete(v163);
              }
              else
              {
                *v148 = v146;
                v148[1] = v147;
                v148[2] = v147;
                v148[3] = (float32x2_t *)*v9;
                v148[4] = (float32x2_t *)0x200000002;
                *(_QWORD *)(a1 + 16) = v148 + 5;
              }
              v164 = (float32x2_t *)operator new(8uLL);
              *v164 = 0;
              v165 = v164 + 1;
              v253 = v164 + 1;
              v254 = v164 + 1;
              v252 = v164;
              v260.i32[0] = 2;
              v259.i32[0] = 2;
              v153 = *(float32x2_t ***)(a1 + 16);
              if ((unint64_t)v153 < *(_QWORD *)(a1 + 24))
              {
                *v153 = v164;
                v153[1] = v165;
                v153[2] = v165;
                v153[3] = (float32x2_t *)v9[1];
                v155 = 0x200000002;
                goto LABEL_265;
              }
              v166 = sub_223FC22B0(v5, (uint64_t)&v252, (uint64_t *)&v9[1], &v260, &v259);
LABEL_267:
              v179 = v166;
              v180 = v252;
              *(_QWORD *)(a1 + 16) = v179;
              if (v180)
                goto LABEL_370;
              return;
            }
            v156 = (float32x2_t *)operator new(8uLL);
            v252 = v156;
            *v156 = 0;
            v253 = v156 + 1;
            v254 = v156 + 1;
            v260.i32[0] = 1;
            v259.i32[0] = 2;
            sub_223FC1798((uint64_t)v5, (uint64_t)&v252, (uint64_t *)v263, &v260, &v259);
            if (v252)
              operator delete(v252);
            v157 = (float32x2_t *)operator new(8uLL);
            v252 = v157;
            *v157 = 0;
            v253 = v157 + 1;
            v254 = v157 + 1;
            v260.i32[0] = 2;
            v259.i32[0] = 2;
            sub_223FC1798((uint64_t)v5, (uint64_t)&v252, (uint64_t *)&v9[1], &v260, &v259);
LABEL_327:
            v180 = v252;
            if (v252)
              goto LABEL_370;
            return;
          }
          *(_DWORD *)(a1 + 4) = 1;
          if ((v136 & 1) == 0)
          {
LABEL_248:
            v169 = (float)((float)(v138 - v26) * (float)(v25 - *((float *)&v28 + 1)))
                 - (float)((float)(v137 - v25) * (float)(v26 - *(float *)&v28));
            v170 = *v9;
            v171 = v9[1];
            v172 = vsub_f32(v171, *v9);
            v173 = v169
                 / sqrtf(vmla_lane_f32(vmul_f32(v172, v172), (float32x2_t)vdup_lane_s32((int32x2_t)v172, 1), v172, 1).f32[0]);
            v174 = v173 == 0.0;
            if (v173 < 0.0)
              v173 = 0.0 - v173;
            if (!v174 && v173 > a4)
            {
LABEL_263:
              v176 = (float32x2_t *)operator new(8uLL);
              *v176 = 0;
              v177 = v176 + 1;
              v253 = v176 + 1;
              v254 = v176 + 1;
              v252 = v176;
              v260.i32[0] = 1;
              v259.i32[0] = 1;
              v153 = *(float32x2_t ***)(a1 + 16);
              if ((unint64_t)v153 < *(_QWORD *)(a1 + 24))
              {
                *v153 = v176;
                v153[1] = v177;
                v178 = v263[0];
                v153[2] = v177;
                v153[3] = (float32x2_t *)v178;
                v155 = 0x100000001;
                goto LABEL_265;
              }
LABEL_266:
              v166 = sub_223FC22B0(v5, (uint64_t)&v252, (uint64_t *)v263, &v260, &v259);
              goto LABEL_267;
            }
            if ((vceq_f32(v170, *(float32x2_t *)&v28).u8[0] & 1) != 0)
            {
              if ((float)(v25 - a4) <= *((float *)&v28 + 1) && (float)(v137 + a4) >= *((float *)&v28 + 1))
                goto LABEL_269;
              if ((float)(v25 + a4) < *((float *)&v28 + 1))
                goto LABEL_263;
              v171.i32[0] = HIDWORD(*(_QWORD *)&v9[1]);
              v34 = *((float *)&v28 + 1);
            }
            else
            {
              if ((float)(v170.f32[0] - a4) <= *(float *)&v28 && (float)(v171.f32[0] + a4) >= *(float *)&v28)
                goto LABEL_269;
              if ((float)(v170.f32[0] + a4) < *(float *)&v28)
                goto LABEL_263;
            }
            if (v34 < (float)(v171.f32[0] - a4))
              goto LABEL_263;
LABEL_269:
            v181 = vsub_f32(v170, *(float32x2_t *)&v28);
            v182 = vsub_f32(v170, *(float32x2_t *)((char *)&v28 + 8));
            if (vmla_lane_f32(vmul_f32(v181, v181), (float32x2_t)vdup_lane_s32((int32x2_t)v181, 1), v181, 1).f32[0] >= vmla_lane_f32(vmul_f32(v182, v182), (float32x2_t)vdup_lane_s32((int32x2_t)v182, 1), v182, 1).f32[0])
            {
              v200 = (float32x2_t *)operator new(8uLL);
              v252 = v200;
              *v200 = 0;
              v253 = v200 + 1;
              v254 = v200 + 1;
              v260.i32[0] = 1;
              v259.i32[0] = 2;
              sub_223FC1798((uint64_t)v5, (uint64_t)&v252, (uint64_t *)&v261 + 1, &v260, &v259);
              if (v252)
                operator delete(v252);
              v201 = (float32x2_t *)operator new(8uLL);
              v252 = v201;
              *v201 = 0;
              v253 = v201 + 1;
              v254 = v201 + 1;
              v260.i32[0] = 2;
              v259.i32[0] = 1;
              sub_223FC1798((uint64_t)v5, (uint64_t)&v252, (uint64_t *)&v261, &v260, &v259);
            }
            else
            {
              v183 = (float32x2_t *)operator new(8uLL);
              v252 = v183;
              *v183 = 0;
              v253 = v183 + 1;
              v254 = v183 + 1;
              v260.i32[0] = 1;
              v259.i32[0] = 2;
              sub_223FC1798((uint64_t)v5, (uint64_t)&v252, (uint64_t *)&v261, &v260, &v259);
              if (v252)
                operator delete(v252);
              v184 = (float32x2_t *)operator new(8uLL);
              v252 = v184;
              *v184 = 0;
              v253 = v184 + 1;
              v254 = v184 + 1;
              v260.i32[0] = 2;
              v259.i32[0] = 1;
              sub_223FC1798((uint64_t)v5, (uint64_t)&v252, (uint64_t *)&v261 + 1, &v260, &v259);
            }
            goto LABEL_327;
          }
LABEL_200:
          v143 = (float32x2_t *)operator new(8uLL);
          *v143 = 0;
          v144 = v143 + 1;
          v253 = v143 + 1;
          v254 = v143 + 1;
          v252 = v143;
          v260.i32[0] = 2;
          v259.i32[0] = 2;
          v145 = *(float32x2_t ***)(a1 + 16);
          if ((unint64_t)v145 >= *(_QWORD *)(a1 + 24))
          {
            v149 = sub_223FC22B0(v5, (uint64_t)&v252, (uint64_t *)v9, &v260, &v259);
            v150 = v252;
            *(_QWORD *)(a1 + 16) = v149;
            if (v150)
              operator delete(v150);
          }
          else
          {
            *v145 = v143;
            v145[1] = v144;
            v145[2] = v144;
            v145[3] = (float32x2_t *)*v9;
            v145[4] = (float32x2_t *)0x200000002;
            *(_QWORD *)(a1 + 16) = v145 + 5;
          }
          v151 = (float32x2_t *)operator new(8uLL);
          *v151 = 0;
          v152 = v151 + 1;
          v253 = v151 + 1;
          v254 = v151 + 1;
          v252 = v151;
          v260.i32[0] = 2;
          v259.i32[0] = 1;
          v153 = *(float32x2_t ***)(a1 + 16);
          if ((unint64_t)v153 < *(_QWORD *)(a1 + 24))
          {
            *v153 = v151;
            v153[1] = v152;
            v154 = v263[0];
            v153[2] = v152;
            v153[3] = (float32x2_t *)v154;
            v155 = 0x100000002;
LABEL_265:
            v153[4] = (float32x2_t *)v155;
            *(_QWORD *)(a1 + 16) = v153 + 5;
            return;
          }
          goto LABEL_266;
        }
      }
    }
    *(_DWORD *)(a1 + 4) = 1;
    if (!v136)
      goto LABEL_248;
    goto LABEL_200;
  }
  if (v8 == 1)
  {
    v11 = a3->f32[0];
    v12 = *v7;
    if (a3->f32[0] != *v7)
    {
      v13 = v11 - v12;
      if (a3->f32[0] < *v7)
        v13 = v12 - v11;
      if (v13 > a4)
        goto LABEL_12;
    }
    v14 = a3->f32[1];
    v15 = v7[1];
    v16 = v14 < v15;
    if (v14 == v15)
      goto LABEL_131;
    v17 = v14 - v15;
    v18 = v15 - v14;
    if (!v16)
      v18 = v17;
    if (v18 <= a4)
    {
LABEL_131:
      v19 = 0;
      v20 = 2;
      *(_DWORD *)a1 = 2;
      v21 = a3[1].f32[0];
      v22 = v21 < v12;
      if (v21 != v12)
        goto LABEL_132;
    }
    else
    {
LABEL_12:
      v19 = 1;
      v20 = 1;
      *(_DWORD *)a1 = 1;
      v21 = a3[1].f32[0];
      v22 = v21 < v12;
      if (v21 != v12)
      {
LABEL_132:
        v106 = v21 - v12;
        if (v22)
          v106 = v12 - v21;
        if (v106 > a4)
          goto LABEL_139;
      }
    }
    v107 = a3[1].f32[1];
    v108 = v7[1];
    v109 = v107 < v108;
    if (v107 == v108)
      goto LABEL_141;
    v110 = v107 - v108;
    v111 = v108 - v107;
    if (!v109)
      v111 = v110;
    if (v111 <= a4)
    {
LABEL_141:
      v112 = 2;
      *(_DWORD *)(a1 + 4) = 2;
      v113 = v11 < v21;
      if (v11 == v21)
        goto LABEL_146;
      goto LABEL_142;
    }
LABEL_139:
    v112 = 1;
    *(_DWORD *)(a1 + 4) = 1;
    v113 = v11 < v21;
    if (v11 == v21)
      goto LABEL_146;
LABEL_142:
    v114 = v11 - v21;
    v115 = v21 - v11;
    if (v113)
      v114 = v21 - v11;
    if (v114 > a4)
    {
      v116 = a3->f32[1];
      v117 = a3[1].f32[1];
      v118 = v117 - v116;
      goto LABEL_151;
    }
LABEL_146:
    v116 = a3->f32[1];
    v117 = a3[1].f32[1];
    if (v116 == v117)
      goto LABEL_162;
    v119 = v116 - v117;
    v118 = v117 - v116;
    if (v116 < v117)
      v119 = v117 - v116;
    if (v119 <= a4)
    {
LABEL_162:
      if ((v19 & 1) != 0)
        return;
      goto LABEL_163;
    }
    v115 = v21 - v11;
LABEL_151:
    v120 = v7[1];
    v121 = v115 * (float)(v116 - v120);
    v122 = (float)(v11 - v12) * v118;
    v124 = *a3;
    v123 = a3[1];
    v125 = vsub_f32(v123, *a3);
    v126 = (float)(v121 - v122)
         / sqrtf(vmla_lane_f32(vmul_f32(v125, v125), (float32x2_t)vdup_lane_s32((int32x2_t)v125, 1), v125, 1).f32[0]);
    v127 = v126 == 0.0;
    if (v126 < 0.0)
      v126 = 0.0 - v126;
    if (!v127 && v126 > 0.000001)
      return;
    if (v124.f32[0] == v12)
    {
      if ((float)(v116 + -0.000001) <= v120 && v120 <= (float)(v117 + 0.000001))
        goto LABEL_163;
      if ((float)(v116 + 0.000001) < v120)
        return;
      v123.i32[0] = HIDWORD(*(_QWORD *)&a3[1]);
      v12 = v7[1];
    }
    else
    {
      if ((float)(v124.f32[0] + -0.000001) <= v12 && v12 <= (float)(v123.f32[0] + 0.000001))
        goto LABEL_163;
      if ((float)(v124.f32[0] + 0.000001) < v12)
        return;
    }
    if (v12 < (float)(v123.f32[0] + -0.000001))
      return;
LABEL_163:
    v129 = operator new(0x28uLL);
    *v129 = 0;
    v129[1] = 0;
    v129[2] = 0;
    v129[3] = *(_QWORD *)v7;
    *((_DWORD *)v129 + 8) = v20;
    *((_DWORD *)v129 + 9) = v112;
    *(_QWORD *)(a1 + 16) = v129 + 5;
    *(_QWORD *)(a1 + 24) = v129 + 5;
    *(_QWORD *)(a1 + 8) = v129;
    return;
  }
  v39 = a2;
  v40 = a3[1].f32[0];
  v41 = a3->f32[0];
  v42 = a3->f32[0] < v40;
  if (a3->f32[0] == v40)
    goto LABEL_34;
  v43 = v41 - v40;
  v44 = v40 - v41;
  if (!v42)
    v44 = v43;
  if (v44 <= a4)
  {
LABEL_34:
    v45 = a3->f32[1];
    v46 = a3[1].f32[1];
    v47 = v45 < v46;
    if (v45 == v46)
      return;
    v48 = v45 - v46;
    v49 = v46 - v45;
    if (!v47)
      v49 = v48;
    if (v49 <= a4)
      return;
  }
  *(_QWORD *)a1 = 0x100000001;
  v50 = (float32x2_t *)operator new(0x10uLL);
  v51 = v50;
  v241 = (uint64_t *)&v9[1];
  v244 = v5;
  v52 = v50 + 2;
  *(_QWORD *)&v261 = v50;
  *((_QWORD *)&v261 + 1) = v50;
  v262 = v50 + 2;
  *(float32x2_t *)&v53 = v9[1];
  v54 = vsub_f32(*(float32x2_t *)&v53, *v9);
  if (v6 != v7)
  {
    v242 = 0;
    v55 = 0;
    v56 = v8 - 1;
    v57 = (float32x2_t)vrev64_s32((int32x2_t)v54);
    v58 = v8;
    v247 = (float32x2_t)v8;
    v248 = (float32x2_t)v8;
    v59 = v50;
    v245 = 0.0;
    LODWORD(v53) = 1.0;
    v246 = v8;
    while (1)
    {
      v250 = v53;
      v61 = (float32x2_t)v56;
      v56 = v55;
      *(_QWORD *)&v53 = *(_QWORD *)&(*v39)[2 * *(_QWORD *)&v61];
      v62 = vsub_f32(*(float32x2_t *)&(*v39)[2 * v55], *(float32x2_t *)&v53);
      *(float *)&v53 = (float)((float)(v9->f32[1] - *((float *)&v53 + 1)) * v62.f32[0])
                     - vmuls_lane_f32(v9->f32[0] - *(float *)&v53, v62, 1);
      v63 = vmul_f32(v57, v62);
      v64 = vsub_f32(v63, (float32x2_t)vdup_lane_s32((int32x2_t)v63, 1)).f32[0];
      if (v64 == 0.0)
        break;
      v65 = v64 + 0.0;
      if (v64 <= 0.0)
        v65 = -v64;
      if (v65 <= a4)
        break;
      *(float *)&v53 = *(float *)&v53 / (float)-v64;
      if (v64 <= 0.0)
      {
        if (*(float *)&v53 == 1.0)
          goto LABEL_98;
        v92 = *(float *)&v53 + -1.0;
        if (*(float *)&v53 < 1.0)
          v92 = 1.0 - *(float *)&v53;
        if (v92 <= a4)
        {
LABEL_98:
          if (*(_QWORD *)&v248 < v8)
          {
            if (*(float *)&v53 == *(float *)&v250)
              goto LABEL_103;
            v94 = *(float *)&v53 - *(float *)&v250;
            if (*(float *)&v53 < *(float *)&v250)
              v94 = *(float *)&v250 - *(float *)&v53;
            if (v94 <= a4)
            {
LABEL_103:
              v95 = v248;
              if (*(_QWORD *)&v248 - *(_QWORD *)&v61 == 1 && *(_QWORD *)&v248 > *(_QWORD *)&v61)
                v95 = v61;
              v248 = v95;
              LOBYTE(v242) = 1;
              v53 = v250;
              goto LABEL_39;
            }
          }
          if (*(_QWORD *)&v248 == v8 || *(float *)&v53 < *(float *)&v250)
            goto LABEL_102;
        }
        else
        {
          if (*(float *)&v53 < *(float *)&v250)
          {
            if (*(float *)&v53 < v245)
            {
LABEL_180:
              if (v51)
                goto LABEL_369;
              return;
            }
LABEL_102:
            LOBYTE(v242) = 0;
            v248 = v61;
            goto LABEL_39;
          }
          if (*(_QWORD *)&v248 < v8)
          {
            v102 = *(float *)&v53 - *(float *)&v250;
            v32 = *(float *)&v53 == *(float *)&v250;
            v53 = v250;
            if (v32 || v102 <= a4)
            {
              v104 = v248;
              if (*(_QWORD *)&v248 - *(_QWORD *)&v61 == 1 && *(_QWORD *)&v248 > *(_QWORD *)&v61)
                v104 = v61;
              v248 = v104;
              LOBYTE(v242) = 1;
            }
            goto LABEL_39;
          }
        }
        goto LABEL_101;
      }
      if (*(float *)&v53 == 0.0)
        goto LABEL_90;
      v66 = 0.0 - *(float *)&v53;
      if (*(float *)&v53 >= 0.0)
        v66 = *(float *)&v53;
      if (v66 <= a4)
      {
LABEL_90:
        if (*(_QWORD *)&v247 < v8)
        {
          if (*(float *)&v53 == v245)
            goto LABEL_114;
          v93 = *(float *)&v53 - v245;
          if (*(float *)&v53 < v245)
            v93 = v245 - *(float *)&v53;
          if (v93 <= a4)
          {
LABEL_114:
            v100 = v247;
            if (*(_QWORD *)&v247 - *(_QWORD *)&v61 == 1 && *(_QWORD *)&v247 > *(_QWORD *)&v61)
              v100 = v61;
            v247 = v100;
            BYTE4(v242) = 1;
            v53 = v250;
            goto LABEL_39;
          }
        }
        if (*(_QWORD *)&v247 != v8 && *(float *)&v53 <= v245)
          goto LABEL_101;
      }
      else
      {
        if (*(float *)&v53 <= v245)
        {
          if (*(_QWORD *)&v247 < v8)
          {
            v97 = *(float *)&v53 < v245;
            if (*(float *)&v53 == v245)
              goto LABEL_114;
            v98 = *(float *)&v53 - v245;
            v99 = v245 - *(float *)&v53;
            if (!v97)
              v99 = v98;
            if (v99 <= a4)
              goto LABEL_114;
          }
LABEL_101:
          v53 = v250;
          goto LABEL_39;
        }
        if (*(float *)&v53 > *(float *)&v250)
          goto LABEL_180;
      }
      BYTE4(v242) = 0;
      v247 = v61;
      v245 = *(float *)&v53;
      v53 = v250;
LABEL_39:
      v55 = v56 + 1;
      if (v56 + 1 == v58)
        goto LABEL_165;
    }
    if (*(float *)&v53 < 0.0)
      goto LABEL_180;
    if (v59 < v52)
    {
      *v59 = v61;
      v60 = (uint64_t)&v59[1];
      v53 = v250;
LABEL_38:
      *((_QWORD *)&v261 + 1) = v60;
      v59 = (float32x2_t *)v60;
      goto LABEL_39;
    }
    v67 = v51;
    v68 = v9;
    v69 = v39;
    v70 = v8;
    v71 = (char *)((char *)v59 - (char *)v67);
    v72 = v59 - v67;
    v73 = v72 + 1;
    if ((unint64_t)(v72 + 1) >> 61)
      sub_22367C394();
    __p = v67;
    v74 = (char *)v52 - (char *)v67;
    v75 = ((char *)v52 - (char *)v67) >> 2;
    if (v75 > v73)
      v73 = v75;
    if (v74 >= 0x7FFFFFFFFFFFFFF8)
      v76 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v76 = v73;
    if (v76)
    {
      if (v76 >> 61)
        sub_223174E94();
      v77 = operator new(8 * v76);
      v78 = v59;
      v79 = (float32x2_t *)((char *)v77 + 8 * v72);
      *v79 = v61;
      v60 = (uint64_t)&v79[1];
      v80 = (char *)v78 - (char *)__p;
      if (v78 != __p)
      {
LABEL_63:
        v81 = v80 - 8;
        if (v81 < 0x168
          || (v85 = ((char *)&v78[-1] - (char *)__p) & 0xFFFFFFFFFFFFFFF8,
              &v71[(_QWORD)v77 - 8 - v85] > &v71[(_QWORD)v77 - 8])
          || (float32x2_t *)((char *)&v78[-1] - v85) > &v78[-1]
          || (unint64_t)((char *)v78 - &v71[(_QWORD)v77]) < 0x20)
        {
          v82 = v78;
          v8 = v70;
          v39 = v69;
          v9 = v68;
          v83 = __p;
        }
        else
        {
          v86 = (v81 >> 3) + 1;
          v87 = 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
          v82 = &v78[v87 / 0xFFFFFFFFFFFFFFF8];
          v79 = (float32x2_t *)((char *)v79 - v87);
          v88 = (char *)v77 + 8 * v72 - 16;
          v89 = v78 - 2;
          v90 = v86 & 0x3FFFFFFFFFFFFFFCLL;
          v39 = v69;
          do
          {
            v91 = *(_OWORD *)v89->f32;
            *((_OWORD *)v88 - 1) = *(_OWORD *)v89[-2].f32;
            *(_OWORD *)v88 = v91;
            v88 -= 32;
            v89 -= 4;
            v90 -= 4;
          }
          while (v90);
          v8 = v70;
          v9 = v68;
          v83 = __p;
          if (v86 == (v86 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_66:
            v52 = (float32x2_t *)((char *)v77 + 8 * v76);
            *(_QWORD *)&v261 = v79;
            v262 = v52;
            if (!v83)
            {
LABEL_68:
              v51 = v79;
              v53 = v250;
              v58 = v246;
              goto LABEL_38;
            }
LABEL_67:
            operator delete(v83);
            goto LABEL_68;
          }
        }
        do
        {
          v84 = v82[-1];
          --v82;
          v79[-1] = v84;
          --v79;
        }
        while (v82 != v83);
        goto LABEL_66;
      }
    }
    else
    {
      v78 = v59;
      v77 = 0;
      v79 = (float32x2_t *)(8 * v72);
      *(float32x2_t *)(8 * v72) = v61;
      v60 = 8 * v72 + 8;
      v80 = (char *)v78 - (char *)__p;
      if (v78 != __p)
        goto LABEL_63;
    }
    v8 = v70;
    v39 = v69;
    v9 = v68;
    v83 = __p;
    v52 = (float32x2_t *)((char *)v77 + 8 * v76);
    *(_QWORD *)&v261 = v79;
    v262 = v52;
    if (!__p)
      goto LABEL_68;
    goto LABEL_67;
  }
  v242 = 0;
  v245 = 0.0;
  LODWORD(v53) = 1.0;
  v247 = (float32x2_t)v8;
  v248 = (float32x2_t)v8;
  v59 = v50;
LABEL_165:
  if (*(_QWORD *)&v247 >= v8 && *(_QWORD *)&v248 >= v8)
  {
    *(_QWORD *)a1 = 0;
    goto LABEL_367;
  }
  v130 = vadd_f32(vmul_n_f32(v54, v245), *v9);
  v251 = *(float *)&v53;
  v259 = vadd_f32(vmul_n_f32(v54, *(float *)&v53), *v9);
  v260 = v130;
  if (*(_QWORD *)&v247 < v8 && *(_QWORD *)&v248 < v8)
  {
    if (v245 == *(float *)&v53)
      goto LABEL_222;
    v131 = v245 - *(float *)&v53;
    if (v245 < v251)
      v131 = v251 - v245;
    if (v131 <= a4)
    {
LABEL_222:
      v263[0] = v247;
      v263[1] = v248;
      sub_223FC1988(&v252, v263, 2uLL);
      if (v245 == 0.0)
        goto LABEL_227;
      v158 = 0.0 - v245;
      if (v245 >= 0.0)
        v158 = v245;
      if (v158 <= a4)
LABEL_227:
        v159 = 2;
      else
        v159 = 1;
      v258 = v159;
      if (v251 == 1.0 || (v251 >= 1.0 ? (v160 = v251 + -1.0) : (v160 = 1.0 - v251), v160 <= a4))
        v161 = 2;
      else
        v161 = 1;
      v257 = v161;
      sub_223FC1798((uint64_t)v244, (uint64_t)&v252, (uint64_t *)&v260, &v258, &v257);
      if (v252)
      {
        v253 = (float32x2_t *)v252;
        operator delete(v252);
      }
      goto LABEL_367;
    }
  }
  if (*(_QWORD *)&v247 >= v8)
  {
    if (v245 == 0.0)
      goto LABEL_273;
    v167 = 0.0 - v245;
    if (v245 >= 0.0)
      v167 = v245;
    if (v167 <= a4)
LABEL_273:
      v168 = 2;
    else
      v168 = 0;
  }
  else
  {
    v132 = (float32x2_t *)operator new(8uLL);
    v252 = v132;
    *v132 = v247;
    v253 = v132 + 1;
    v254 = v132 + 1;
    if (v245 == 0.0)
      goto LABEL_274;
    v133 = 0.0 - v245;
    if (v245 >= 0.0)
      v133 = v245;
    if (v133 <= a4)
LABEL_274:
      v134 = 2;
    else
      v134 = 1;
    v263[0].i32[0] = v134;
    if (v251 == 1.0 || (v251 >= 1.0 ? (v185 = v251 + -1.0) : (v185 = 1.0 - v251), v185 <= a4))
      v186 = 2;
    else
      v186 = 0;
    v258 = v186;
    sub_223FC1798((uint64_t)v244, (uint64_t)&v252, (uint64_t *)&v260, v263, &v258);
    if (v252)
      operator delete(v252);
    if ((v242 & 0x100000000) != 0)
      sub_223FC1818(*(_QWORD *)(a1 + 16) - 40, (*(_QWORD *)&v247 + 1) % v8);
    v168 = *(_DWORD *)(*(_QWORD *)(a1 + 16) - 8);
  }
  *(_DWORD *)a1 = v168;
  if (*(_QWORD *)&v248 >= v8)
  {
    if (v251 == 1.0 || (v251 >= 1.0 ? (v190 = v251 + -1.0) : (v190 = 1.0 - v251), v190 <= a4))
      v191 = 2;
    else
      v191 = 0;
  }
  else
  {
    v187 = (float32x2_t *)operator new(8uLL);
    v252 = v187;
    *v187 = v248;
    v253 = v187 + 1;
    v254 = v187 + 1;
    if (v245 == 0.0)
      goto LABEL_300;
    v188 = 0.0 - v245;
    if (v245 >= 0.0)
      v188 = v245;
    if (v188 <= a4)
LABEL_300:
      v189 = 2;
    else
      v189 = 0;
    v263[0].i32[0] = v189;
    if (v251 == 1.0 || (v251 >= 1.0 ? (v192 = v251 + -1.0) : (v192 = 1.0 - v251), v192 <= a4))
      v193 = 2;
    else
      v193 = 1;
    v258 = v193;
    sub_223FC1798((uint64_t)v244, (uint64_t)&v252, (uint64_t *)&v259, v263, &v258);
    if (v252)
      operator delete(v252);
    if ((v242 & 1) != 0)
      sub_223FC1818(*(_QWORD *)(a1 + 16) - 40, (*(_QWORD *)&v248 + 1) % v8);
    v191 = *(_DWORD *)(*(_QWORD *)(a1 + 16) - 4);
  }
  *(_DWORD *)(a1 + 4) = v191;
  if (v51 == v59)
    goto LABEL_367;
  v194 = *(void ***)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) - (_QWORD)v194 != 80)
  {
    if (*(_QWORD *)&v247 < v8)
    {
      v202 = (*(_QWORD *)&v247 + 1) % v8;
      v203 = v51;
      while (1)
      {
        v263[0] = 0;
        v263[0] = *v203;
        v204 = &(*v39)[2 * *(_QWORD *)v263];
        v205 = (float *)*v244;
        v206 = *v204;
        v207 = *((float *)*v244 + 6);
        if (*v204 != v207)
        {
          v208 = v206 - v207;
          v209 = v207 - v206;
          if (*v204 >= v207)
            v209 = v208;
          if (v209 > a4)
            goto LABEL_332;
        }
        v210 = v204[1];
        v211 = v205[7];
        v212 = v210 < v211;
        if (v210 != v211)
        {
          v213 = v210 - v211;
          v214 = v211 - v210;
          if (!v212)
            v214 = v213;
          if (v214 > a4)
            goto LABEL_332;
        }
        if (*(_QWORD *)&v247 != (*(_QWORD *)v263 + 1) % v8)
          break;
        *((_DWORD *)v205 + 9) = 2;
        sub_223FC1A18((void **)v205, *(_BYTE **)v205, (char *)v263);
        v215 = (float32x2_t *)operator new(8uLL);
        *v215 = v263[0];
        v216 = v215 + 1;
        v253 = v215 + 1;
        v254 = v215 + 1;
        v252 = v215;
        v257 = 2;
        v258 = 2;
        v217 = *(float32x2_t ***)(a1 + 16);
        if ((unint64_t)v217 >= *(_QWORD *)(a1 + 24))
        {
          v218 = sub_223FC22B0(v244, (uint64_t)&v252, v241, &v258, &v257);
          v219 = v252;
          *(_QWORD *)(a1 + 16) = v218;
          if (!v219)
            goto LABEL_332;
          goto LABEL_347;
        }
        *v217 = v215;
        v217[1] = v216;
        v217[2] = v216;
        v217[3] = (float32x2_t *)*v241;
        v217[4] = (float32x2_t *)0x200000002;
        *(_QWORD *)(a1 + 16) = v217 + 5;
LABEL_332:
        if (++v203 == v59)
          goto LABEL_367;
      }
      if (*(_QWORD *)v263 != v202)
        goto LABEL_332;
      *((_DWORD *)v205 + 9) = 2;
      sub_223FC1818((uint64_t)v205, v202);
      v220 = (float32x2_t *)operator new(8uLL);
      v252 = v220;
      *v220 = v263[0];
      v253 = v220 + 1;
      v254 = v220 + 1;
      v257 = 2;
      v258 = 2;
      sub_223FC1798((uint64_t)v244, (uint64_t)&v252, v241, &v258, &v257);
      v219 = v252;
      if (!v252)
        goto LABEL_332;
LABEL_347:
      operator delete(v219);
      goto LABEL_332;
    }
    if (*(_QWORD *)&v248 >= v8)
      goto LABEL_367;
    v221 = (*(_QWORD *)&v248 + 1) % v8;
    v222 = v51;
    v223 = v59;
    while (1)
    {
      v263[0] = 0;
      v263[0] = *v222;
      v224 = &(*v39)[2 * *(_QWORD *)v263];
      v225 = (float *)*v244;
      v226 = *v224;
      v227 = *((float *)*v244 + 6);
      if (*v224 != v227)
      {
        v228 = v226 - v227;
        v229 = v227 - v226;
        if (*v224 >= v227)
          v229 = v228;
        if (v229 > a4)
          goto LABEL_350;
      }
      v230 = v224[1];
      v231 = v225[7];
      v232 = v230 < v231;
      if (v230 != v231)
      {
        v233 = v230 - v231;
        v234 = v231 - v230;
        if (!v232)
          v234 = v233;
        if (v234 > a4)
          goto LABEL_350;
      }
      if (*(_QWORD *)&v248 == (*(_QWORD *)v263 + 1) % v8)
        break;
      if (*(_QWORD *)v263 == v221)
      {
        *((_DWORD *)v225 + 8) = 2;
        sub_223FC1818((uint64_t)v225, v221);
        v238 = *v244;
        v239 = (float32x2_t *)operator new(8uLL);
        *v239 = v263[0];
        v252 = v239;
        v253 = v239 + 1;
        v240 = (uint64_t)*v9;
        v254 = v239 + 1;
        v255 = v240;
        v256 = 0x200000002;
        sub_223FC1DAC((uint64_t *)v244, (uint64_t)v238, (uint64_t)&v252);
LABEL_363:
        v59 = v223;
        if (v252)
          operator delete(v252);
      }
LABEL_350:
      if (++v222 == v59)
        goto LABEL_367;
    }
    *((_DWORD *)v225 + 8) = 2;
    sub_223FC1A18((void **)v225, *(_BYTE **)v225, (char *)v263);
    v235 = *v244;
    v236 = (float32x2_t *)operator new(8uLL);
    *v236 = v263[0];
    v252 = v236;
    v253 = v236 + 1;
    v237 = (uint64_t)*v9;
    v254 = v236 + 1;
    v255 = v237;
    v256 = 0x200000002;
    sub_223FC1DAC((uint64_t *)v244, (uint64_t)v235, (uint64_t)&v252);
    goto LABEL_363;
  }
  v195 = *(_QWORD *)v194[5];
  v196 = v194[1];
  v197 = v51;
  while (1)
  {
    v198 = *v197;
    if (v195 == *v197)
      break;
    if (*((_QWORD *)v196 - 1) != *(_QWORD *)&v198)
      goto LABEL_316;
LABEL_322:
    if (v195 == (*(_QWORD *)&v198 + 2) % v8)
    {
      v252 = (void *)((*(_QWORD *)&v198 + 1) % v8);
      sub_223FC1818((uint64_t)v194, (uint64_t)v252);
      sub_223FC1A18(v194 + 5, v194[5], (char *)&v252);
      goto LABEL_366;
    }
LABEL_316:
    if (++v197 == v59)
      goto LABEL_367;
  }
  v199 = *((_QWORD *)v196 - 1);
  if ((v195 + 2) % v8 != v199)
  {
    if (v199 != *(_QWORD *)&v198)
      goto LABEL_316;
    goto LABEL_322;
  }
  v252 = (void *)((v195 + 1) % v8);
  sub_223FC1818((uint64_t)(v194 + 5), (uint64_t)v252);
  sub_223FC1A18(v194, *v194, (char *)&v252);
LABEL_366:
  *((_DWORD *)v194 + 18) = 2;
  *((_DWORD *)v194 + 9) = 2;
LABEL_367:
  if (v51)
  {
    *((_QWORD *)&v261 + 1) = v51;
LABEL_369:
    v180 = v51;
LABEL_370:
    operator delete(v180);
  }
}

void sub_223FBE3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  void *v30;

  if (v30)
    operator delete(v30);
  sub_223FBE8D4(a11);
  _Unwind_Resume(a1);
}

void sub_223FBE69C(uint64_t a1, float *a2)
{
  float *v4;
  float v5;
  float v6;
  BOOL v7;
  float v8;
  float v9;
  float v10;
  float v11;
  BOOL v12;
  float v13;
  float v14;
  float *v15;
  float v16;
  BOOL v17;
  float v18;
  float v19;
  float v20;
  float v21;
  BOOL v22;
  float v23;
  float v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  _QWORD *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  _OWORD *v38;
  float *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;

  v4 = *(float **)a1;
  v5 = **(float **)a1;
  v6 = *a2;
  v7 = v5 < *a2;
  if (v5 != *a2)
  {
    v8 = v5 - v6;
    v9 = v6 - v5;
    if (!v7)
      v9 = v8;
    if (v9 > 0.000001)
      goto LABEL_17;
  }
  v10 = v4[1];
  v11 = a2[1];
  v12 = v10 < v11;
  if (v10 != v11)
  {
    v13 = v10 - v11;
    v14 = v11 - v10;
    if (!v12)
      v14 = v13;
    if (v14 > 0.000001)
    {
LABEL_17:
      v15 = *(float **)(a1 + 8);
      v16 = *(v15 - 2);
      v17 = v16 < v6;
      if (v16 != v6)
      {
        v18 = v16 - v6;
        v19 = v6 - v16;
        if (!v17)
          v19 = v18;
        if (v19 > 0.000001)
          goto LABEL_18;
      }
      v20 = *(v15 - 1);
      v21 = a2[1];
      v22 = v20 < v21;
      if (v20 != v21)
      {
        v23 = v20 - v21;
        v24 = v21 - v20;
        if (!v22)
          v24 = v23;
        if (v24 > 0.000001)
        {
LABEL_18:
          v25 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)v15 >= v25)
          {
            v27 = ((char *)v15 - (char *)v4) >> 3;
            v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 61)
              sub_22316E078();
            v29 = v25 - (_QWORD)v4;
            if (v29 >> 2 > v28)
              v28 = v29 >> 2;
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
              v30 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v30 = v28;
            if (v30)
            {
              if (v30 >> 61)
                sub_223174E94();
              v31 = operator new(8 * v30);
            }
            else
            {
              v31 = 0;
            }
            v32 = &v31[8 * v27];
            v33 = &v31[8 * v30];
            *v32 = *(_QWORD *)a2;
            v26 = v32 + 1;
            if (v15 == v4)
            {
              *(_QWORD *)a1 = v32;
              *(_QWORD *)(a1 + 8) = v26;
              *(_QWORD *)(a1 + 16) = v33;
            }
            else
            {
              v34 = (char *)v15 - (char *)v4 - 8;
              if (v34 < 0x58)
                goto LABEL_46;
              if ((unint64_t)((char *)v4 - v31) < 0x20)
                goto LABEL_46;
              v35 = (v34 >> 3) + 1;
              v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
              v37 = &v15[v36 / 0xFFFFFFFFFFFFFFFCLL];
              v32 = (_QWORD *)((char *)v32 - v36);
              v38 = &v31[8 * v27 - 16];
              v39 = v15 - 4;
              v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v41 = *(_OWORD *)v39;
                *(v38 - 1) = *((_OWORD *)v39 - 1);
                *v38 = v41;
                v38 -= 2;
                v39 -= 8;
                v40 -= 4;
              }
              while (v40);
              v15 = v37;
              if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_46:
                do
                {
                  v42 = *((_QWORD *)v15 - 1);
                  v15 -= 2;
                  *--v32 = v42;
                }
                while (v15 != v4);
              }
              v4 = *(float **)a1;
              *(_QWORD *)a1 = v32;
              *(_QWORD *)(a1 + 8) = v26;
              *(_QWORD *)(a1 + 16) = v33;
              if (!v4)
                goto LABEL_41;
            }
            operator delete(v4);
          }
          else
          {
            *(_QWORD *)v15 = *(_QWORD *)a2;
            v26 = v15 + 2;
          }
LABEL_41:
          *(_QWORD *)(a1 + 8) = v26;
        }
      }
    }
  }
}

uint64_t sub_223FBE8D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      v5 = *(_QWORD *)(a1 + 16);
      do
      {
        v7 = *(void **)(v5 - 40);
        v5 -= 40;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 32) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_223FBE948(float **a1@<X0>, float32x2_t *a2@<X1>, float32x2_t *a3@<X8>, float a4@<S0>)
{
  char *v7;
  char *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t *v11;
  void *v12;
  float v13;
  unsigned __int32 v14;
  float v15;
  char *v16;
  void *v17;
  void *v18;
  int v19;
  void *__p;
  char *v21;

  sub_223FBCD4C((uint64_t)&v19, a1, a2, a4);
  v8 = (char *)__p;
  v7 = v21;
  if (__p != v21)
  {
    v9 = *a2;
    v10 = a2[1];
    v11 = (float32x2_t *)__p;
    while (1)
    {
      if (v11[4].i32[0] == 1)
      {
        v9 = v11[3];
        if (v11[4].i32[1] == 1)
LABEL_8:
          v10 = v11[3];
      }
      else if (v11[4].i32[1] == 1)
      {
        goto LABEL_8;
      }
      v11 += 5;
      if (v11 == (float32x2_t *)v21)
        goto LABEL_13;
    }
  }
  if ((v19 & 0xFFFFFFFD) == 1)
  {
    a3->i8[0] = 0;
    a3[2].i8[0] = 0;
    v12 = v8;
    if (!v8)
      return;
LABEL_30:
    v21 = v8;
    operator delete(v12);
    return;
  }
  v9 = *a2;
  v10 = a2[1];
LABEL_13:
  if ((vceq_f32(v9, v10).u8[0] & 1) != 0)
    goto LABEL_20;
  LODWORD(v13) = vsub_f32(v9, v10).u32[0];
  v14 = vsub_f32(v10, v9).u32[0];
  if ((vcgt_f32(v10, v9).u8[0] & 1) != 0)
    v13 = *(float *)&v14;
  if (v13 <= a4)
  {
LABEL_20:
    if (v9.f32[1] == v10.f32[1])
      goto LABEL_23;
    v15 = v10.f32[1] - v9.f32[1];
    if (v9.f32[1] >= v10.f32[1])
      v15 = v9.f32[1] - v10.f32[1];
    if (v15 <= a4)
    {
LABEL_23:
      a3->i8[0] = 0;
      a3[2].i8[0] = 0;
      if (!v8)
        return;
LABEL_24:
      v12 = v8;
      if (v8 != v7)
      {
        v16 = v7;
        do
        {
          v18 = (void *)*((_QWORD *)v16 - 5);
          v16 -= 40;
          v17 = v18;
          if (v18)
          {
            *((_QWORD *)v7 - 4) = v17;
            operator delete(v17);
          }
          v7 = v16;
        }
        while (v16 != v8);
        v12 = __p;
      }
      goto LABEL_30;
    }
  }
  *a3 = v9;
  a3[1] = v10;
  a3[2].i8[0] = 1;
  if (v8)
    goto LABEL_24;
}

void sub_223FBEADC(unint64_t a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  float *v4;
  float32x2_t *v5;
  float32x2_t *v6;
  uint64_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float *v10;
  uint64_t v11;
  float32x2_t *v12;
  float v13;
  float32x2_t *v14;
  float32x2_t *v15;
  float32x2_t *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  BOOL v22;
  float v23;
  float v24;
  float32x2_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  float32x2_t *i;
  float32x2_t v31;
  char *v32;
  float32x2_t v33;
  __int32 v34;
  float32x2_t *v35;
  unint64_t v36;
  uint64_t v37;
  float32x2_t *v38;
  float32x2_t *v39;
  float32x2_t *v40;
  float32x2_t *v41;
  float32x2_t v42;
  float v43;
  float32x2_t v44;
  float32x2_t v45;
  float v46;
  float v47;
  float v48;
  __int32 v49;
  float v50;
  BOOL v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float32x2_t *v56;
  unint64_t v57;
  float32x2_t *v58;
  float32x2_t *v59;
  float32x2_t v60;
  float32x2_t *v61;
  unint64_t v62;
  float32x2_t v63;
  float32x2_t *v64;
  float32x2_t v65;
  float v66;
  float32x2_t v67;
  float32x2_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  float32x2_t *v75;
  uint64_t v76;
  int64_t v77;
  unint64_t v78;
  float32x2_t *v79;
  float32x2_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  float32x2_t *v85;
  uint64_t v86;
  __int128 v87;
  float32x2_t *v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t *v91;
  float32x2_t v92;

  if (!a1)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return;
  }
  v4 = (float *)a2;
  v5 = a2;
  if (a1 != 1)
  {
    v6 = a2 + 1;
    v7 = 8 * a1 - 8;
    v5 = a2;
    do
    {
      v8 = v5;
      v9 = vsub_f32(*v6, *v5);
      if (v9.f32[0] <= 0.0)
      {
        v5 = v6;
        if (v9.f32[0] >= 0.0)
        {
          if (v9.f32[1] >= 0.0)
            v5 = v8;
          else
            v5 = v6;
        }
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
    if (a1 > 0x1555555555555555)
      sub_22316E078();
  }
  v10 = (float *)&a2[a1];
  v92 = *v5;
  v11 = 12 * a1;
  v12 = (float32x2_t *)operator new(12 * a1);
  v13 = v92.f32[0];
  v14 = v12;
  v15 = (float32x2_t *)((char *)v12 + v11);
  v16 = v12;
  v91 = (float32x2_t *)v4;
  do
  {
    while (1)
    {
      v18 = *v4;
      v17 = v4[1];
      if (v13 != *v4)
      {
        v19 = v13 - v18;
        v20 = v18 - v13;
        if (v13 < *v4)
          v19 = v18 - v13;
        if (v19 > 0.000001)
        {
          v21 = v17 - v92.f32[1];
          goto LABEL_24;
        }
      }
      v22 = v92.f32[1] < v17;
      if (v92.f32[1] != v17)
      {
        v23 = v92.f32[1] - v17;
        v21 = v17 - v92.f32[1];
        if (v22)
          v23 = v21;
        if (v23 > 0.000001)
          break;
      }
      v24 = -3.4028e38;
      v25 = *(float32x2_t *)v4;
      if (v16 >= v15)
        goto LABEL_27;
LABEL_13:
      *v16 = v25;
      v16[1].f32[0] = v24;
      v16 = (float32x2_t *)((char *)v16 + 12);
      v4 += 2;
      if (v4 == v10)
        goto LABEL_39;
    }
    v20 = v18 - v13;
LABEL_24:
    v24 = atan2f(v21, v20);
    v13 = v92.f32[0];
    v25 = *(float32x2_t *)v4;
    if (v16 < v15)
      goto LABEL_13;
LABEL_27:
    v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v14) >> 2) + 1;
    if (v26 > 0x1555555555555555)
      sub_22316E078();
    if (0x5555555555555556 * (((char *)v15 - (char *)v14) >> 2) > v26)
      v26 = 0x5555555555555556 * (((char *)v15 - (char *)v14) >> 2);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v14) >> 2) >= 0xAAAAAAAAAAAAAAALL)
      v27 = 0x1555555555555555;
    else
      v27 = v26;
    if (v27 > 0x1555555555555555)
      sub_223174E94();
    v28 = (char *)operator new(12 * v27);
    v29 = &v28[4 * (((char *)v16 - (char *)v14) >> 2)];
    *(float32x2_t *)v29 = v25;
    *((float *)v29 + 2) = v24;
    for (i = (float32x2_t *)v29; v16 != v14; i[1].i32[0] = v16[1].i32[0])
    {
      v31 = *(float32x2_t *)((char *)v16 - 12);
      v16 = (float32x2_t *)((char *)v16 - 12);
      *(float32x2_t *)((char *)i - 12) = v31;
      i = (float32x2_t *)((char *)i - 12);
    }
    v15 = (float32x2_t *)&v28[12 * v27];
    v16 = (float32x2_t *)(v29 + 12);
    if (v14)
      operator delete(v14);
    v14 = i;
    v13 = v92.f32[0];
    v4 += 2;
  }
  while (v4 != v10);
LABEL_39:
  if (v5 != v91)
  {
    v32 = (char *)v14 + 12 * (v5 - v91);
    v33 = *v14;
    v34 = v14[1].i32[0];
    *v14 = *(float32x2_t *)v32;
    v14[1].i32[0] = *((_DWORD *)v32 + 2);
    *(float32x2_t *)v32 = v33;
    *((_DWORD *)v32 + 2) = v34;
  }
  v35 = (float32x2_t *)((char *)v14 + 12);
  v36 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)&v14[1].i32[1]) >> 2));
  if (v16 == (float32x2_t *)&v14[1].i32[1])
    v37 = 0;
  else
    v37 = v36;
  sub_223FC2460((float *)&v14[1] + 1, (float *)v16, v37, 1);
  v38 = v14;
  if (v16 != v35)
  {
    v38 = v14;
    do
    {
      v39 = v35;
      v40 = (float32x2_t *)((char *)v35 + 12);
      if (&v35[1].i32[1] == (__int32 *)v16)
      {
        v35 = v16;
        v47 = v39->f32[0];
        v46 = v39->f32[1];
        v48 = v39->f32[0];
        v49 = v39[1].i32[0];
        v50 = v38->f32[0];
        v51 = v38->f32[0] < v39->f32[0];
        if (v38->f32[0] == v39->f32[0])
          goto LABEL_65;
      }
      else
      {
        v35 = (float32x2_t *)((char *)v35 + 12);
        while ((float)(v35[1].f32[0] - v39[1].f32[0]) <= 0.000004)
        {
          v35 = (float32x2_t *)((char *)v35 + 12);
          if (v35 == v16)
          {
            v35 = v16;
            break;
          }
        }
        if (v39 != v35 && v40 != v35)
        {
          v41 = v40;
          do
          {
            v42 = vsub_f32(*v39, v92);
            v43 = vmla_lane_f32(vmul_f32(v42, v42), (float32x2_t)vdup_lane_s32((int32x2_t)v42, 1), v42, 1).f32[0];
            v44 = *v41;
            v41 = (float32x2_t *)((char *)v41 + 12);
            v45 = vsub_f32(v44, v92);
            if (v43 < vmla_lane_f32(vmul_f32(v45, v45), (float32x2_t)vdup_lane_s32((int32x2_t)v45, 1), v45, 1).f32[0])
              v39 = v40;
            v40 = v41;
          }
          while (v41 != v35);
        }
        v47 = v39->f32[0];
        v46 = v39->f32[1];
        v48 = v39->f32[0];
        v49 = v39[1].i32[0];
        v50 = v38->f32[0];
        v51 = v38->f32[0] < v39->f32[0];
        if (v38->f32[0] == v39->f32[0])
        {
LABEL_65:
          v54 = v38->f32[1];
          if (v54 == v46)
            continue;
          v55 = v46 - v54;
          if (v54 >= v46)
            v55 = v54 - v46;
          if (v55 <= 0.000001)
            continue;
          goto LABEL_46;
        }
      }
      v52 = v50 - v48;
      v53 = v48 - v50;
      if (!v51)
        v53 = v52;
      if (v53 <= 0.000001)
        goto LABEL_65;
LABEL_46:
      v38[1].f32[1] = v47;
      v38[2].f32[0] = v46;
      v38 = (float32x2_t *)((char *)v38 + 12);
      v38[1].i32[0] = v49;
    }
    while (v35 != v16);
  }
  v56 = (float32x2_t *)((char *)v38 + 12);
  if (v56 == v16)
  {
    v56 = v16;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (v16 == v14)
      goto LABEL_118;
  }
  else
  {
    v16 = v56;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (v56 == v14)
      goto LABEL_118;
  }
  v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v56 - (char *)v14) >> 2);
  if (v57 >> 61)
    sub_22316E078();
  v58 = (float32x2_t *)operator new(0x5555555555555558 * (((char *)v56 - (char *)v14) >> 2));
  *(_QWORD *)a3 = v58;
  *(_QWORD *)(a3 + 8) = v58;
  *(_QWORD *)(a3 + 16) = &v58[v57];
  v59 = v14;
  while (1)
  {
LABEL_75:
    v61 = *(float32x2_t **)a3;
    v62 = (unint64_t)v58 - *(_QWORD *)a3;
    if (v62 >= 9)
    {
      v63 = *v59;
      v64 = v58 - 1;
      while (1)
      {
        v65 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)vsub_f32(v63, *v64)), vsub_f32(*v64, v64[-1]));
        v66 = vsub_f32(v65, (float32x2_t)vdup_lane_s32((int32x2_t)v65, 1)).f32[0];
        if (v66 > 0.0)
          break;
        if (v66 < 0.0
          || (v67 = vsub_f32(*v64, v64[-1]),
              v68 = vsub_f32(*v59, *v64),
              vmla_lane_f32(vmul_f32(v67, v68), (float32x2_t)vdup_lane_s32((int32x2_t)v68, 1), v67, 1).f32[0] >= 0.0))
        {
          *(_QWORD *)(a3 + 8) = v64--;
          v62 -= 8;
          --v58;
          if (v62 > 8)
            continue;
        }
        v58 = v64 + 1;
        break;
      }
    }
    v69 = *(_QWORD *)(a3 + 16);
    if ((unint64_t)v58 >= v69)
      break;
    v60 = *v59;
    v59 = (float32x2_t *)((char *)v59 + 12);
    *v58++ = v60;
    *(_QWORD *)(a3 + 8) = v58;
    if (v59 == v16)
      goto LABEL_112;
  }
  v70 = v58 - v61;
  v71 = v70 + 1;
  if ((unint64_t)(v70 + 1) >> 61)
    sub_22316E078();
  v72 = v69 - (_QWORD)v61;
  if (v72 >> 2 > v71)
    v71 = v72 >> 2;
  if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
    v73 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v73 = v71;
  if (v73)
  {
    if (v73 >> 61)
      sub_223174E94();
    v74 = operator new(8 * v73);
    v75 = (float32x2_t *)&v74[8 * v70];
    *v75 = *v59;
    v76 = (uint64_t)&v75[1];
    v77 = (char *)v58 - (char *)v61;
    if (v58 == v61)
    {
LABEL_92:
      *(_QWORD *)a3 = v75;
      *(_QWORD *)(a3 + 8) = v76;
      *(_QWORD *)(a3 + 16) = &v74[8 * v73];
      if (v61)
        goto LABEL_93;
      goto LABEL_94;
    }
  }
  else
  {
    v74 = 0;
    v75 = (float32x2_t *)(8 * v70);
    *(float32x2_t *)(8 * v70) = *v59;
    v76 = 8 * v70 + 8;
    v77 = (char *)v58 - (char *)v61;
    if (v58 == v61)
      goto LABEL_92;
  }
  v78 = v77 - 8;
  if (v78 < 0x168)
  {
    v79 = v58;
    goto LABEL_99;
  }
  v81 = ((char *)&v58[-1] - (char *)v61) & 0xFFFFFFFFFFFFFFF8;
  if (&v74[(char *)v58 - (char *)v61 - 8 - v81] > &v74[(char *)v58 - (char *)v61 - 8])
  {
    v79 = v58;
    goto LABEL_99;
  }
  if ((float32x2_t *)((char *)&v58[-1] - v81) > &v58[-1])
  {
    v79 = v58;
    goto LABEL_99;
  }
  if ((unint64_t)((char *)v61 - v74) < 0x20)
  {
    v79 = v58;
    goto LABEL_99;
  }
  v82 = (v78 >> 3) + 1;
  v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
  v79 = &v58[v83 / 0xFFFFFFFFFFFFFFF8];
  v75 = (float32x2_t *)((char *)v75 - v83);
  v84 = &v74[8 * v70 - 16];
  v85 = v58 - 2;
  v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v87 = *(_OWORD *)v85->f32;
    *(v84 - 1) = *(_OWORD *)v85[-2].f32;
    *v84 = v87;
    v84 -= 2;
    v85 -= 4;
    v86 -= 4;
  }
  while (v86);
  if (v82 != (v82 & 0x3FFFFFFFFFFFFFFCLL))
  {
    do
    {
LABEL_99:
      v80 = v79[-1];
      --v79;
      v75[-1] = v80;
      --v75;
    }
    while (v79 != v61);
  }
  v61 = *(float32x2_t **)a3;
  *(_QWORD *)a3 = v75;
  *(_QWORD *)(a3 + 8) = v76;
  *(_QWORD *)(a3 + 16) = &v74[8 * v73];
  if (v61)
LABEL_93:
    operator delete(v61);
LABEL_94:
  v58 = (float32x2_t *)v76;
  *(_QWORD *)(a3 + 8) = v76;
  v59 = (float32x2_t *)((char *)v59 + 12);
  if (v59 != v16)
    goto LABEL_75;
LABEL_112:
  if ((unint64_t)v58 - *(_QWORD *)a3 > 0x18)
  {
    v89 = v58[-1];
    v88 = v58 - 1;
    v90 = vmul_f32(vsub_f32(v89, v88[-1]), (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(**(float32x2_t **)a3, v89)));
    if (vsub_f32(v90, (float32x2_t)vdup_lane_s32((int32x2_t)v90, 1)).f32[0] <= 0.0)
      *(_QWORD *)(a3 + 8) = v88;
  }
LABEL_118:
  if (v14)
    operator delete(v14);
}

void sub_223FBF2AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;
  void *v4;

  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  if (v2)
    operator delete(v2);
  _Unwind_Resume(exception_object);
}

void sub_223FBF2F8(unint64_t a1@<X0>, float32x2_t *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v5;
  char *v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  const char *v20;
  size_t v21;
  unsigned __int8 v22;
  float32x2_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  unsigned __int8 v34;
  const char *v35;
  size_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  void *p_p;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  std::__shared_weak_count_vtbl *v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  const char *v54;
  void *v55;
  int v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  size_t v86;
  void *v87;
  float32x2_t *v88;
  float32x2_t *v89;
  uint64_t v90;
  float32x2_t v91;
  float32x2_t v92;
  char *v93;
  unint64_t v94;
  unint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  float32x2_t *v100;
  float32x2_t *v101;
  float32x2_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  float32x2_t v106;
  float v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x2_t *v110;
  float32x2_t v111;
  float32x2_t v112;
  float v113;
  int v114;
  uint64_t v115;
  float32x2_t *v116;
  float v117;
  float v118;
  float v119;
  float32x2_t v120;
  float32x2_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x2_t v124;
  unint64_t v125;
  float32x2_t *v126;
  uint64_t v127;
  float32x2_t **v128;
  float32x2_t *v129;
  float32x2_t v130;
  float v131;
  float32x2_t v132;
  float32x2_t v133;
  float32x2_t *v134;
  unint64_t v135;
  float32x2_t *v136;
  unint64_t v137;
  unint64_t v138;
  float32x2_t *v139;
  float32x2_t *v140;
  int64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  _BYTE *v146;
  float32x2_t *v147;
  uint64_t v148;
  float32x2_t *v149;
  float32x2_t v150;
  unint64_t v151;
  void **v152;
  float32x2_t *v153;
  char *v154;
  unint64_t v155;
  float32x2_t *v156;
  float32x2_t v157;
  int v158;
  float32x2_t v159;
  float32x2_t **v160;
  float v161;
  char *v162;
  float32x2_t *v163;
  float32x2_t v164;
  float32x2_t v165;
  float32x2_t v166;
  float32x2_t v167;
  float32x2_t v168;
  float32x2_t *v169;
  char *v170;
  float32x2_t v171;
  float32x2_t **v172;
  uint64_t v173;
  float32x2_t *v174;
  float32x2_t v175;
  float v176;
  float32x2_t v177;
  float32x2_t v178;
  float32x2_t *v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float32x2_t v185;
  float32x2_t v186;
  float32x2_t v187;
  float32x2_t *v188;
  int64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  _BYTE *v194;
  float32x2_t *v195;
  char *v196;
  float32x2_t *v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  _OWORD *v202;
  char *v203;
  uint64_t v204;
  __int128 v205;
  float32x2_t v206;
  char *v207;
  float32x2_t *v208;
  float32x2_t *v209;
  float32x2_t v210;
  int v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v215;
  uint64_t *v216;
  size_t v217;
  const char *v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  void **v222;
  uint64_t v223;
  const char *v224;
  size_t v225;
  unsigned __int8 v226;
  const char *v227;
  size_t v228;
  _BYTE *v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  NSObject *v235;
  size_t v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  size_t v239;
  size_t v240;
  uint64_t *v241;
  void *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  _QWORD *v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  char *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _OWORD *v261;
  __int128 *v262;
  uint64_t v263;
  __int128 v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  uint64_t v268;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  const char *v273;
  uint64_t v274;
  __int128 v275;
  uint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  uint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  void **v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unsigned __int8 v302;
  const char *v303;
  size_t v304;
  _BYTE *v305;
  uint64_t v306;
  uint64_t v307;
  void *v308;
  uint64_t v309;
  uint64_t v310;
  NSObject *v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  uint64_t v315;
  char *v318;
  char *v319;
  char *v320;
  const char *v321;
  float32x2_t *v322;
  uint64_t *v323;
  int v324;
  unint64_t v325;
  float32x2_t **v326;
  char *v327;
  __int128 v328;
  const char *v329;
  void *v330;
  float32x2_t *rep;
  unint64_t v332;
  int v333;
  const char *v334;
  int v335;
  const char *v336;
  uint64_t v337;
  std::__shared_weak_count *v338;
  void *v339[2];
  int64_t v340;
  _BYTE object[24];
  __int128 v342;
  void *__p;
  size_t v344;
  unint64_t v345;
  char v346;
  unint64_t v347;
  void *v348;
  char v349;
  unint64_t v350;
  int v351;
  uint64_t v352;
  uint64_t v353;
  __int128 v354;
  std::__shared_weak_count *v355;
  char *v356;
  std::__shared_weak_count *v357;
  uint64_t *v358;
  __int128 v359;
  _BYTE v360[24];
  __int128 v361;
  char *v362;
  const char *v363;
  unint64_t v364;
  std::__shared_weak_count *v365;
  _QWORD v366[5];

  v366[2] = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    v11 = 0;
    goto LABEL_131;
  }
  v5 = a3;
  if (a3 > 0x555555555555555)
    sub_22316E078();
  v8 = (char *)operator new(48 * a3);
  v10 = 0;
  v325 = v5;
  v327 = &v8[48 * v5];
  v11 = v8;
  v322 = a2;
  v323 = a4;
  do
  {
    if (v10)
    {
      v12 = &a4[v10];
      v13 = *(v12 - 1);
      v14 = *v12;
      if (v13 <= *v12)
        goto LABEL_11;
    }
    else
    {
      v13 = 0;
      v14 = *a4;
      if (*a4 >= 0)
        goto LABEL_11;
    }
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 259, (uint64_t)"p_begin <= p_end", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_503;
    }
LABEL_11:
    if (v14 == v13)
    {
      sub_223FC3524(&v358);
      if (*(int *)v358[7] > 2)
        goto LABEL_4;
      v15 = *((unsigned __int8 *)v358 + 72);
      v16 = sub_22322F254((uint64_t)v358, "OSLogSurrogateAppender", 1, 0);
      v17 = v16;
      v18 = !v15 && v16 == 0;
      if (v18)
        goto LABEL_4;
      v324 = v15;
      *(_QWORD *)v360 = &v358;
      *(std::chrono::steady_clock::time_point *)&v360[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v360[16] = std::chrono::system_clock::now();
      LODWORD(v361) = 2;
      *((_QWORD *)&v361 + 1) = "unknown file";
      LODWORD(v362) = 115;
      v363 = "unknown function";
      v364 = 0;
      v365 = 0;
      v19 = **(_QWORD **)v360;
      v20 = (const char *)(**(_QWORD **)v360 + 16);
      v321 = v20;
      if (*(char *)(**(_QWORD **)v360 + 39) < 0)
      {
        v20 = *(const char **)(v19 + 16);
        v21 = *(_QWORD *)(v19 + 24);
        v34 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v34 & 1) == 0)
        {
LABEL_120:
          if (__cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)&v330);
            sub_223199C58("com.apple.cv3d", (unint64_t)&v330, &xmmword_255788F40);
            if ((_BYTE)v333 && SHIBYTE(v332) < 0)
              operator delete(v330);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
        }
      }
      else
      {
        v21 = *(unsigned __int8 *)(**(_QWORD **)v360 + 39);
        v22 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v22 & 1) == 0)
          goto LABEL_120;
      }
      if (byte_255788F57 >= 0)
        v35 = (const char *)&xmmword_255788F40;
      else
        v35 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v36 = byte_255788F57;
      else
        v36 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v35, v20);
      if (v36 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v36 >= 0x17)
      {
        v318 = v11;
        v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v36 | 7) != 0x17)
          v38 = v36 | 7;
        v39 = v38 + 1;
        v37 = operator new(v38 + 1);
        *(_QWORD *)&object[16] = v36;
        *(_QWORD *)&v342 = v39 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v37;
        v11 = v318;
      }
      else
      {
        BYTE7(v342) = v36;
        v37 = &object[8];
        if (!v36)
        {
LABEL_53:
          v37[v36] = 0;
          BYTE8(v342) = 1;
          if (v21 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          a2 = v322;
          if (v21 >= 0x17)
          {
            v42 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v21 | 7) != 0x17)
              v42 = v21 | 7;
            v43 = v42 + 1;
            p_p = operator new(v42 + 1);
            v344 = v21;
            v345 = v43 | 0x8000000000000000;
            __p = p_p;
            a4 = v323;
          }
          else
          {
            HIBYTE(v345) = v21;
            p_p = &__p;
            a4 = v323;
            if (!v21)
            {
              LOBYTE(__p) = 0;
              v346 = 1;
              v41 = *(NSObject **)object;
              if ((SHIBYTE(v345) & 0x80000000) == 0)
                goto LABEL_57;
LABEL_63:
              operator delete(__p);
              if (BYTE8(v342))
                goto LABEL_64;
              goto LABEL_66;
            }
          }
          memmove(p_p, v20, v21);
          *((_BYTE *)p_p + v21) = 0;
          v346 = 1;
          v41 = *(NSObject **)object;
          if (SHIBYTE(v345) < 0)
            goto LABEL_63;
LABEL_57:
          if (BYTE8(v342))
          {
LABEL_64:
            if (SBYTE7(v342) < 0)
              operator delete(*(void **)&object[8]);
          }
LABEL_66:
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v17 && *(_QWORD *)(v17 + 24))
          {
            v44 = _os_log_pack_size();
            v45 = (std::__shared_weak_count_vtbl *)operator new(v44, (std::align_val_t)8uLL);
            v46 = (std::__shared_weak_count *)operator new();
            v47 = v46;
            v46->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v46->__shared_owners_;
            v46->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v46->__shared_weak_owners_ = 0;
            v46[1].__vftable = v45;
            *(_QWORD *)object = v45;
            *(_QWORD *)&object[8] = v45;
            *(_QWORD *)&object[16] = v46;
            do
              v49 = __ldxr(p_shared_owners);
            while (__stxr(v49 + 1, p_shared_owners));
            v342 = 0uLL;
            __p = 0;
            a4 = v323;
            do
              v50 = __ldaxr(p_shared_owners);
            while (__stlxr(v50 - 1, p_shared_owners));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v47);
            }
            v51 = *(_QWORD *)object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v52 = (char *)operator new();
            v53 = *(unsigned __int8 *)(v19 + 39);
            v54 = v321;
            if ((v53 & 0x80u) != 0)
            {
              v54 = *(const char **)(v19 + 16);
              v53 = *(_QWORD *)(v19 + 24);
            }
            *(_QWORD *)v52 = v51;
            *(_OWORD *)(v52 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v52 + 24) = v342;
            v342 = 0uLL;
            *((_QWORD *)v52 + 5) = v54;
            *((_QWORD *)v52 + 6) = v53;
            v52[56] = 2;
            *(_QWORD *)&v354 = 0;
            v330 = v52;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v17 + 24) + 40))(*(_QWORD *)(v17 + 24), &v330);
            v55 = v330;
            v330 = 0;
            v56 = v324;
            if (v55)
            {
              v57 = (std::__shared_weak_count *)*((_QWORD *)v55 + 4);
              if (v57)
              {
                v58 = (unint64_t *)&v57->__shared_owners_;
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
              v60 = (std::__shared_weak_count *)*((_QWORD *)v55 + 2);
              if (v60)
              {
                v61 = (unint64_t *)&v60->__shared_owners_;
                do
                  v62 = __ldaxr(v61);
                while (__stlxr(v62 - 1, v61));
                if (!v62)
                {
                  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                  std::__shared_weak_count::__release_weak(v60);
                }
              }
              MEMORY[0x227684CE8](v55, 0x10F0C40B62ED6C6);
              v63 = v354;
              *(_QWORD *)&v354 = 0;
              if (v63)
              {
                v64 = *(std::__shared_weak_count **)(v63 + 32);
                if (v64)
                {
                  v65 = (unint64_t *)&v64->__shared_owners_;
                  do
                    v66 = __ldaxr(v65);
                  while (__stlxr(v66 - 1, v65));
                  if (!v66)
                  {
                    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                    std::__shared_weak_count::__release_weak(v64);
                  }
                }
                v67 = *(std::__shared_weak_count **)(v63 + 16);
                if (v67)
                {
                  v68 = (unint64_t *)&v67->__shared_owners_;
                  do
                    v69 = __ldaxr(v68);
                  while (__stlxr(v69 - 1, v68));
                  if (!v69)
                  {
                    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                    std::__shared_weak_count::__release_weak(v67);
                  }
                }
                MEMORY[0x227684CE8](v63, 0x10F0C40B62ED6C6);
              }
            }
            v70 = (std::__shared_weak_count *)*((_QWORD *)&v342 + 1);
            if (*((_QWORD *)&v342 + 1))
            {
              v71 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 - 1, v71));
              if (!v72)
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
            }
            v73 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v74 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
              }
            }
          }
          else
          {
            os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG);
            *(_WORD *)object = 0;
            v76 = (void *)_os_log_send_and_compose_impl();
            v56 = v324;
            if (v76)
              free(v76);
          }
          if (v56)
          {
            sub_22322C138((uint64_t)v360, "Skipping empty convex hull for union computation");
            sub_223182C08((uint64_t)v360);
          }
          sub_223182C08((uint64_t)v360);
          v77 = v365;
          if (v365)
          {
            v78 = (unint64_t *)&v365->__shared_owners_;
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
LABEL_4:
          v5 = v325;
          goto LABEL_5;
        }
      }
      memmove(v37, v35, v36);
      goto LABEL_53;
    }
    v23 = &a2[v13];
    v24 = 8 * v14 - 8 * v13;
    v25 = v24 >> 3;
    if ((unint64_t)v24 <= 0x17)
    {
      sub_223FC3524(&v353);
      if (**(int **)(v353 + 56) > 2)
        goto LABEL_453;
      v83 = *(unsigned __int8 *)(v353 + 72);
      v84 = sub_22322F254(v353, "OSLogSurrogateAppender", 1, 0);
      v85 = v84;
      if (!v83 && !v84)
        goto LABEL_453;
      v319 = v11;
      sub_223195210((uint64_t)object);
      sub_2231813E8(&object[16], (uint64_t)"Falling back to generic convex hull algorithm because the input contains a degenerate convex hull of size ", 106);
      std::ostream::operator<<();
      if ((v351 & 0x10) != 0)
      {
        v151 = v350;
        if (v350 < v347)
        {
          v350 = v347;
          v151 = v347;
        }
        v152 = (void **)&v346;
      }
      else
      {
        if ((v351 & 8) == 0)
        {
          v86 = 0;
          HIBYTE(v340) = 0;
          v87 = v339;
          goto LABEL_327;
        }
        v152 = &__p;
        v151 = v345;
      }
      v219 = *v152;
      v86 = v151 - (_QWORD)*v152;
      if (v86 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v86 >= 0x17)
      {
        v220 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v86 | 7) != 0x17)
          v220 = v86 | 7;
        v221 = v220 + 1;
        v87 = operator new(v220 + 1);
        v339[1] = (void *)v86;
        v340 = v221 | 0x8000000000000000;
        v339[0] = v87;
      }
      else
      {
        HIBYTE(v340) = v151 - *(_BYTE *)v152;
        v87 = v339;
        if (!v86)
        {
LABEL_327:
          *((_BYTE *)v87 + v86) = 0;
          v330 = &v353;
          rep = (float32x2_t *)std::chrono::steady_clock::now().__d_.__rep_;
          v332 = std::chrono::system_clock::now().__d_.__rep_;
          v333 = 2;
          v334 = "unknown file";
          v335 = 124;
          v337 = 0;
          v338 = 0;
          v336 = "unknown function";
          if (v340 >= 0)
            v222 = v339;
          else
            v222 = (void **)v339[0];
          v223 = *(_QWORD *)v330;
          v224 = (const char *)(*(_QWORD *)v330 + 16);
          v329 = v224;
          if (*(char *)(*(_QWORD *)v330 + 39) < 0)
          {
            v224 = *(const char **)(v223 + 16);
            v225 = *(_QWORD *)(v223 + 24);
          }
          else
          {
            v225 = *(unsigned __int8 *)(*(_QWORD *)v330 + 39);
          }
          v226 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v226 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)v360);
            sub_223199C58("com.apple.cv3d", (unint64_t)v360, &xmmword_255788F40);
            if ((_BYTE)v361 && (v360[23] & 0x80000000) != 0)
              operator delete(*(void **)v360);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
          if (byte_255788F57 >= 0)
            v227 = (const char *)&xmmword_255788F40;
          else
            v227 = (const char *)xmmword_255788F40;
          if (byte_255788F57 >= 0)
            v228 = byte_255788F57;
          else
            v228 = *((_QWORD *)&xmmword_255788F40 + 1);
          *(_QWORD *)v360 = os_log_create(v227, v224);
          v229 = &v360[8];
          if (v228 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v228 >= 0x17)
          {
            v230 = (v228 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v228 | 7) != 0x17)
              v230 = v228 | 7;
            v231 = v230 + 1;
            v229 = operator new(v230 + 1);
            *(_QWORD *)&v360[16] = v228;
            *(_QWORD *)&v361 = v231 | 0x8000000000000000;
            *(_QWORD *)&v360[8] = v229;
          }
          else
          {
            BYTE7(v361) = v228;
            if (!v228)
            {
LABEL_348:
              v229[v228] = 0;
              BYTE8(v361) = 1;
              v232 = (char *)&v362;
              if (v225 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v11 = v319;
              if (v225 >= 0x17)
              {
                v233 = (v225 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v225 | 7) != 0x17)
                  v233 = v225 | 7;
                v234 = v233 + 1;
                v232 = (char *)operator new(v233 + 1);
                v363 = (const char *)v225;
                v364 = v234 | 0x8000000000000000;
                v362 = v232;
              }
              else
              {
                HIBYTE(v364) = v225;
                if (!v225)
                {
LABEL_356:
                  v232[v225] = 0;
                  LOBYTE(v365) = 1;
                  v235 = *(NSObject **)v360;
                  if (SHIBYTE(v364) < 0)
                    operator delete(v362);
                  a2 = v322;
                  if (BYTE8(v361) && SBYTE7(v361) < 0)
                    operator delete(*(void **)&v360[8]);
                  if (*(_QWORD *)v360)
                    os_release(*(void **)v360);
                  if (v85 && *(_QWORD *)(v85 + 24))
                  {
                    v236 = _os_log_pack_size();
                    v237 = (std::__shared_weak_count_vtbl *)operator new(v236, (std::align_val_t)8uLL);
                    v238 = (std::__shared_weak_count *)operator new();
                    v238->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                    v238->__shared_owners_ = 0;
                    v238->__shared_weak_owners_ = 0;
                    v238[1].__vftable = v237;
                    *(_QWORD *)&v354 = v237;
                    *((_QWORD *)&v354 + 1) = v237;
                    v357 = 0;
                    v355 = v238;
                    v356 = 0;
                    v239 = strlen((const char *)v222);
                    if (v239 > 0x7FFFFFFFFFFFFFF7)
                      sub_22316DBC0();
                    v240 = v239;
                    if (v239 >= 0x17)
                    {
                      v243 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v239 | 7) != 0x17)
                        v243 = v239 | 7;
                      v244 = v243 + 1;
                      v241 = (uint64_t *)operator new(v243 + 1);
                      *(_QWORD *)&v359 = v240;
                      *((_QWORD *)&v359 + 1) = v244 | 0x8000000000000000;
                      v358 = v241;
                    }
                    else
                    {
                      HIBYTE(v359) = v239;
                      v241 = (uint64_t *)&v358;
                      if (!v239)
                        goto LABEL_375;
                    }
                    memcpy(v241, v222, v240);
LABEL_375:
                    *((_BYTE *)v241 + v240) = 0;
                    v245 = (uint64_t)v358;
                    v366[0] = v359;
                    *(_QWORD *)((char *)v366 + 7) = *(_QWORD *)((char *)&v359 + 7);
                    v246 = HIBYTE(v359);
                    v247 = operator new(0x38uLL);
                    v247[1] = 0;
                    v247[2] = 0;
                    v247[3] = off_24EC1FA48;
                    *v247 = &off_24EC1F9F8;
                    v248 = v366[0];
                    v247[4] = v245;
                    v247[5] = v248;
                    *(_QWORD *)((char *)v247 + 47) = *(_QWORD *)((char *)v366 + 7);
                    *((_BYTE *)v247 + 55) = v246;
                    v366[0] = 0;
                    *(_QWORD *)((char *)v366 + 7) = 0;
                    v249 = v357;
                    v356 = (char *)(v247 + 3);
                    v357 = (std::__shared_weak_count *)v247;
                    a2 = v322;
                    if (v249)
                    {
                      v250 = (unint64_t *)&v249->__shared_owners_;
                      do
                        v251 = __ldaxr(v250);
                      while (__stlxr(v251 - 1, v250));
                      if (!v251)
                      {
                        ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
                        std::__shared_weak_count::__release_weak(v249);
                      }
                    }
                    *(_OWORD *)v360 = v354;
                    v252 = v356;
                    *(_QWORD *)&v360[16] = v355;
                    if (v355)
                    {
                      v253 = (unint64_t *)&v355->__shared_owners_;
                      do
                        v254 = __ldxr(v253);
                      while (__stxr(v254 + 1, v253));
                    }
                    v255 = v357;
                    *(_QWORD *)&v361 = v252;
                    *((_QWORD *)&v361 + 1) = v357;
                    if (v357)
                    {
                      v256 = (unint64_t *)&v357->__shared_owners_;
                      do
                        v257 = __ldxr(v256);
                      while (__stxr(v257 + 1, v256));
                      v362 = v252;
                      do
                        v258 = __ldaxr(v256);
                      while (__stlxr(v258 - 1, v256));
                      if (!v258)
                      {
                        ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                        std::__shared_weak_count::__release_weak(v255);
                      }
                    }
                    else
                    {
                      v362 = v252;
                    }
                    v265 = v355;
                    if (v355)
                    {
                      v266 = (unint64_t *)&v355->__shared_owners_;
                      do
                        v267 = __ldaxr(v266);
                      while (__stlxr(v267 - 1, v266));
                      if (!v267)
                      {
                        ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                        std::__shared_weak_count::__release_weak(v265);
                      }
                    }
                    v268 = *(_QWORD *)v360;
                    if (v362[31] >= 0)
                      v269 = v362 + 8;
                    else
                      v269 = (char *)*((_QWORD *)v362 + 1);
                    v270 = _os_log_pack_fill();
                    *(_DWORD *)v270 = 136315138;
                    *(_QWORD *)(v270 + 4) = v269;
                    v271 = operator new();
                    v272 = *(unsigned __int8 *)(v223 + 39);
                    v273 = *(const char **)(v223 + 16);
                    v274 = *(_QWORD *)(v223 + 24);
                    v275 = v361;
                    *(_OWORD *)(v271 + 8) = *(_OWORD *)&v360[8];
                    if ((v272 & 0x80u) != 0)
                      v272 = v274;
                    else
                      v273 = v329;
                    *(_QWORD *)v271 = v268;
                    *(_QWORD *)&v360[8] = 0;
                    *(_QWORD *)&v360[16] = 0;
                    *(_OWORD *)(v271 + 24) = v275;
                    v361 = 0uLL;
                    *(_QWORD *)(v271 + 40) = v273;
                    *(_QWORD *)(v271 + 48) = v272;
                    *(_BYTE *)(v271 + 56) = 2;
                    v358 = 0;
                    *(_QWORD *)&v354 = v271;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v85 + 24) + 40))(*(_QWORD *)(v85 + 24), &v354);
                    v276 = v354;
                    *(_QWORD *)&v354 = 0;
                    if (v276)
                    {
                      v277 = *(std::__shared_weak_count **)(v276 + 32);
                      if (v277)
                      {
                        v278 = (unint64_t *)&v277->__shared_owners_;
                        do
                          v279 = __ldaxr(v278);
                        while (__stlxr(v279 - 1, v278));
                        if (!v279)
                        {
                          ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                          std::__shared_weak_count::__release_weak(v277);
                        }
                      }
                      v280 = *(std::__shared_weak_count **)(v276 + 16);
                      if (v280)
                      {
                        v281 = (unint64_t *)&v280->__shared_owners_;
                        do
                          v282 = __ldaxr(v281);
                        while (__stlxr(v282 - 1, v281));
                        if (!v282)
                        {
                          ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
                          std::__shared_weak_count::__release_weak(v280);
                        }
                      }
                      MEMORY[0x227684CE8](v276, 0x10F0C40B62ED6C6);
                      v283 = (uint64_t)v358;
                      v358 = 0;
                      if (v283)
                      {
                        v284 = *(std::__shared_weak_count **)(v283 + 32);
                        if (v284)
                        {
                          v285 = (unint64_t *)&v284->__shared_owners_;
                          do
                            v286 = __ldaxr(v285);
                          while (__stlxr(v286 - 1, v285));
                          if (!v286)
                          {
                            ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
                            std::__shared_weak_count::__release_weak(v284);
                          }
                        }
                        v287 = *(std::__shared_weak_count **)(v283 + 16);
                        if (v287)
                        {
                          v288 = (unint64_t *)&v287->__shared_owners_;
                          do
                            v289 = __ldaxr(v288);
                          while (__stlxr(v289 - 1, v288));
                          if (!v289)
                          {
                            ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
                            std::__shared_weak_count::__release_weak(v287);
                          }
                        }
                        MEMORY[0x227684CE8](v283, 0x10F0C40B62ED6C6);
                      }
                    }
                    v290 = (std::__shared_weak_count *)*((_QWORD *)&v361 + 1);
                    if (*((_QWORD *)&v361 + 1))
                    {
                      v291 = (unint64_t *)(*((_QWORD *)&v361 + 1) + 8);
                      do
                        v292 = __ldaxr(v291);
                      while (__stlxr(v292 - 1, v291));
                      if (!v292)
                      {
                        ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
                        std::__shared_weak_count::__release_weak(v290);
                      }
                    }
                    v293 = *(std::__shared_weak_count **)&v360[16];
                    if (*(_QWORD *)&v360[16])
                    {
                      v294 = (unint64_t *)(*(_QWORD *)&v360[16] + 8);
                      do
                        v295 = __ldaxr(v294);
                      while (__stlxr(v295 - 1, v294));
                      if (!v295)
                      {
                        ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
                        std::__shared_weak_count::__release_weak(v293);
                      }
                    }
                  }
                  else
                  {
                    os_log_type_enabled(v235, OS_LOG_TYPE_DEBUG);
                    *(_DWORD *)v360 = 136315138;
                    *(_QWORD *)&v360[4] = v222;
                    v242 = (void *)_os_log_send_and_compose_impl();
                    if (v242)
                      free(v242);
                  }
                  if (v83)
                  {
                    v296 = v339;
                    if (v340 < 0)
                      v296 = (void **)v339[0];
                    sub_22322C138((uint64_t)&v330, "%s", (const char *)v296);
                    sub_223182C08((uint64_t)&v330);
                  }
                  sub_223182C08((uint64_t)&v330);
                  v297 = v338;
                  if (v338)
                  {
                    v298 = (unint64_t *)&v338->__shared_owners_;
                    do
                      v299 = __ldaxr(v298);
                    while (__stlxr(v299 - 1, v298));
                    if (!v299)
                    {
                      ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
                      std::__shared_weak_count::__release_weak(v297);
                    }
                  }
                  if (SHIBYTE(v340) < 0)
                    operator delete(v339[0]);
                  *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
                  v300 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                  *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                  *(_QWORD *)&object[16] = v300;
                  *(_QWORD *)&v342 = MEMORY[0x24BEDB848] + 16;
                  if (v349 < 0)
                    operator delete(v348);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x227684BE0](&v352);
LABEL_453:
                  if (a2
                    || !a1
                    || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                  {
                    sub_223FBEADC(a1, a2, (uint64_t)object);
                    v301 = *(_QWORD *)&object[16];
                    *(_OWORD *)a5 = *(_OWORD *)object;
                    *(_QWORD *)(a5 + 16) = v301;
                    goto LABEL_457;
                  }
LABEL_503:
                  abort();
                }
              }
              memmove(v232, v224, v225);
              goto LABEL_356;
            }
          }
          memmove(v229, v227, v228);
          goto LABEL_348;
        }
      }
      memmove(v87, v219, v86);
      goto LABEL_327;
    }
    if (v8 < v327)
    {
      *(_QWORD *)v8 = v25;
      *((_QWORD *)v8 + 1) = v23;
      *((_QWORD *)v8 + 5) = 0;
      *((_QWORD *)v8 + 2) = 0;
      *((_QWORD *)v8 + 3) = 0;
      v8[32] = 0;
      v8 += 48;
      goto LABEL_5;
    }
    v26 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v11) >> 4) + 1;
    if (v26 > 0x555555555555555)
      sub_22316E078();
    if (0x5555555555555556 * ((v327 - v11) >> 4) > v26)
      v26 = 0x5555555555555556 * ((v327 - v11) >> 4);
    if (0xAAAAAAAAAAAAAAABLL * ((v327 - v11) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v27 = 0x555555555555555;
    else
      v27 = v26;
    if (v27 > 0x555555555555555)
      sub_223174E94();
    v28 = (char *)operator new(48 * v27);
    v29 = &v28[16 * ((v8 - v11) >> 4)];
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v23;
    *((_QWORD *)v29 + 5) = 0;
    *((_QWORD *)v29 + 2) = 0;
    *((_QWORD *)v29 + 3) = 0;
    v29[32] = 0;
    if (v8 == v11)
    {
      v33 = &v28[16 * ((v8 - v11) >> 4)];
      v327 = &v28[48 * v27];
      v8 = v29 + 48;
      if (!v11)
        goto LABEL_35;
    }
    else
    {
      v30 = &v28[16 * ((v8 - v11) >> 4)];
      do
      {
        v31 = *((_OWORD *)v8 - 3);
        v32 = *((_OWORD *)v8 - 1);
        v33 = v30 - 48;
        *((_OWORD *)v30 - 2) = *((_OWORD *)v8 - 2);
        *((_OWORD *)v30 - 1) = v32;
        *((_OWORD *)v30 - 3) = v31;
        v8 -= 48;
        v30 -= 48;
      }
      while (v8 != v11);
      v327 = &v28[48 * v27];
      v8 = v29 + 48;
      if (!v11)
        goto LABEL_35;
    }
    operator delete(v11);
LABEL_35:
    v11 = v33;
LABEL_5:
    ++v10;
  }
  while (v10 != v5);
  if (v11 == v8)
  {
LABEL_131:
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    goto LABEL_457;
  }
  if (v8 - v11 == 48)
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    if (a1)
    {
      if ((a1 & 0x8000000000000000) != 0)
        sub_22316E078();
      v81 = (char *)operator new(8 * a1);
      *(_QWORD *)a5 = v81;
      v82 = &v81[8 * a1];
      *(_QWORD *)(a5 + 16) = v82;
      memcpy(v81, a2, 8 * a1);
      *(_QWORD *)(a5 + 8) = v82;
    }
    goto LABEL_457;
  }
  v330 = 0;
  rep = 0;
  v332 = 0;
  v320 = v11;
  if (a1)
  {
    if (a1 >> 61)
      sub_22316E078();
    v88 = (float32x2_t *)operator new(8 * a1);
    v330 = v88;
    rep = v88;
    v332 = (unint64_t)&v88[a1];
    v89 = a2;
    if (a1 == 1)
      goto LABEL_141;
  }
  else
  {
    v88 = 0;
  }
  v147 = a2 + 1;
  v148 = 8 * a1 - 8;
  v89 = a2;
  do
  {
    v149 = v89;
    v150 = vsub_f32(*v147, *v89);
    if (v150.f32[0] <= 0.0)
    {
      v89 = v147;
      if (v150.f32[0] >= 0.0)
      {
        if (v150.f32[1] >= 0.0)
          v89 = v149;
        else
          v89 = v147;
      }
    }
    ++v147;
    v148 -= 8;
  }
  while (v148);
LABEL_141:
  v90 = 0;
  v91 = *v89;
  v92 = *v89;
  while (1)
  {
    v93 = &v11[v90];
    v94 = *(_QWORD *)&v11[v90 + 8];
    if (v94 <= (unint64_t)v89 && v94 + 8 * *(_QWORD *)&v11[v90] > (unint64_t)v89)
      break;
    v90 += 48;
    if (v93 + 48 == v8)
    {
      v96 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v11) >> 4);
      goto LABEL_149;
    }
  }
  v96 = 0xAAAAAAAAAAAAAAABLL * (v90 >> 4);
LABEL_149:
  v97 = 0;
  v98 = v11;
  while (2)
  {
    while (v97 == v96)
    {
      *((_QWORD *)v98 + 5) = v89;
      v99 = *((_QWORD *)v98 + 1) + 8 * *(_QWORD *)v98 - 8;
      if ((float32x2_t *)v99 == v89)
        v100 = (float32x2_t *)*((_QWORD *)v98 + 1);
      else
        v100 = v89 + 1;
      if ((float32x2_t *)v99 == v100)
        v101 = (float32x2_t *)*((_QWORD *)v98 + 1);
      else
        v101 = v100 + 1;
      *((_QWORD *)v98 + 2) = v100;
      *((_QWORD *)v98 + 3) = v101;
      v98[32] |= v100 == v89;
      v98 += 48;
      ++v97;
      if (v98 == v8)
        goto LABEL_188;
    }
    v103 = *(_QWORD *)v98;
    v102 = (float32x2_t *)*((_QWORD *)v98 + 1);
    if (!*(_QWORD *)v98)
    {
      v110 = 0;
      goto LABEL_185;
    }
    v104 = v103 - 1;
    if (v103 == 1)
      goto LABEL_184;
    if (v103 == 2)
    {
      v105 = (uint64_t)&v102[1];
      v106 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*v102, (float32x2_t)__PAIR64__(v92.u32[1], v91.u32[0]))), vsub_f32(v102[1], *v102));
      v107 = vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v106, 1), v106).f32[0];
      if (v107 <= 0.0)
      {
        if (v107 < 0.0)
          goto LABEL_164;
        v108 = vsub_f32(*v102, v92);
        v109 = vsub_f32(v102[1], *v102);
        v110 = (float32x2_t *)*((_QWORD *)v98 + 1);
        if (vmla_lane_f32(vmul_f32(v108, v109), (float32x2_t)vdup_lane_s32((int32x2_t)v109, 1), v108, 1).f32[0] >= 0.0)
          goto LABEL_164;
        goto LABEL_185;
      }
LABEL_184:
      v110 = (float32x2_t *)*((_QWORD *)v98 + 1);
      goto LABEL_185;
    }
    v111 = *v102;
    v112 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)vsub_f32(v102[v104], (float32x2_t)__PAIR64__(v92.u32[1], v91.u32[0]))), vsub_f32(*v102, v102[v104]));
    v113 = vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v112, 1), v112).f32[0];
    if (v113 <= 0.0)
    {
      if (v113 >= 0.0)
      {
        v122 = v102[v104];
        v123 = vsub_f32(v122, v92);
        v111 = *v102;
        v124 = vsub_f32(*v102, v122);
        if (vmla_lane_f32(vmul_f32(v123, v124), (float32x2_t)vdup_lane_s32((int32x2_t)v124, 1), v123, 1).f32[0] < 0.0)
          v114 = 8;
        else
          v114 = 4;
        v105 = (uint64_t)&v102[v103 - 1];
        if ((float32x2_t *)v105 == v102)
          goto LABEL_184;
      }
      else
      {
        v114 = 2;
        v105 = (uint64_t)&v102[v103 - 1];
        if ((float32x2_t *)v105 == v102)
          goto LABEL_184;
      }
    }
    else
    {
      v114 = 1;
      v105 = (uint64_t)&v102[v103 - 1];
      if ((float32x2_t *)v105 == v102)
        goto LABEL_184;
    }
    v115 = 8 * v103 - 8;
    v110 = (float32x2_t *)*((_QWORD *)v98 + 1);
    v116 = v110;
    do
    {
      v117 = v111.f32[0];
      v111.i32[0] = v116[1].i32[0];
      v118 = v116[1].f32[1];
      ++v116;
      v119 = (float)((float)(v117 - v91.f32[0]) * (float)(v118 - v116[-1].f32[1]))
           - (float)((float)(v116[-1].f32[1] - v92.f32[1]) * (float)(v111.f32[0] - v117));
      if (v119 > 0.0)
      {
        if (v114 != 1)
          goto LABEL_185;
      }
      else if (v119 >= 0.0)
      {
        v111 = v110[1];
        v120 = vsub_f32(*v110, v92);
        v121 = vsub_f32(v111, *v110);
        if (vmla_lane_f32(vmul_f32(v120, v121), (float32x2_t)vdup_lane_s32((int32x2_t)v121, 1), v120, 1).f32[0] < 0.0)
          v114 = 8;
        else
          v114 = 4;
      }
      else
      {
        v114 = 2;
      }
      v110 = v116;
      v115 -= 8;
    }
    while (v115);
LABEL_164:
    v110 = (float32x2_t *)v105;
LABEL_185:
    *((_QWORD *)v98 + 5) = v110;
    if (&v102[v103 - 1] != v110)
      v102 = v110 + 1;
    *((_QWORD *)v98 + 2) = v110;
    *((_QWORD *)v98 + 3) = v102;
    v98 += 48;
    ++v97;
    if (v98 != v8)
      continue;
    break;
  }
LABEL_188:
  v80 = v8 - v11 - 48;
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (v80 >> 4)) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v8 - v11) >> 4) - 1))
    v125 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v11) >> 4) - 1;
  else
    v125 = 0xAAAAAAAAAAAAAAABLL * (v80 >> 4);
  v126 = (float32x2_t *)*((_QWORD *)v11 + 2);
  if (v125)
  {
    v127 = 48 * v125;
    v128 = (float32x2_t **)(v11 + 64);
    do
    {
      v129 = *v128;
      v130 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)vsub_f32(**v128, (float32x2_t)__PAIR64__(v92.u32[1], v91.u32[0]))), vsub_f32(*v126, **v128));
      v131 = vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v130, 1), v130).f32[0];
      if (v131 > 0.0
        || v131 >= 0.0
        && (v132 = vsub_f32(*v129, v92),
            v133 = vsub_f32(*v126, *v129),
            vmla_lane_f32(vmul_f32(v132, v133), (float32x2_t)vdup_lane_s32((int32x2_t)v133, 1), v132, 1).f32[0] < 0.0))
      {
        v126 = *v128;
      }
      v128 += 6;
      v127 -= 48;
    }
    while (v127);
  }
  if ((unint64_t)v88 >= v332)
  {
    v137 = (uint64_t)(v332 - (_QWORD)v88) >> 2;
    if (v137 <= 1)
      v137 = 1;
    if (v332 - (unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
      v138 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v138 = v137;
    if (v138 >> 61)
      goto LABEL_509;
    v139 = (float32x2_t *)operator new(8 * v138);
    *v139 = v91;
    v134 = v139 + 1;
    v330 = v139;
    rep = v139 + 1;
    v332 = (unint64_t)&v139[v138];
    if (v88)
      operator delete(v88);
    rep = v134;
    v135 = v332;
    if ((unint64_t)v134 >= v332)
      goto LABEL_211;
LABEL_201:
    *v134 = *v126;
    v136 = v134 + 1;
    goto LABEL_241;
  }
  *v88 = v91;
  v134 = v88 + 1;
  rep = v88 + 1;
  v135 = v332;
  if ((unint64_t)&v88[1] < v332)
    goto LABEL_201;
LABEL_211:
  v140 = (float32x2_t *)v330;
  v141 = (char *)v134 - (_BYTE *)v330;
  v142 = ((char *)v134 - (_BYTE *)v330) >> 3;
  v143 = v142 + 1;
  if ((unint64_t)(v142 + 1) >> 61)
    sub_22316E078();
  v144 = v135 - (_QWORD)v330;
  if (v144 >> 2 > v143)
    v143 = v144 >> 2;
  if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF8)
    v145 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v145 = v143;
  if (v145)
  {
    if (!(v145 >> 61))
    {
      v146 = operator new(8 * v145);
      goto LABEL_232;
    }
LABEL_509:
    sub_223174E94();
  }
  v146 = 0;
LABEL_232:
  v153 = (float32x2_t *)&v146[8 * v142];
  v154 = &v146[8 * v145];
  *v153 = *v126;
  v136 = v153 + 1;
  if (v134 == v140)
  {
    v330 = &v146[8 * v142];
    rep = v153 + 1;
    v332 = (unint64_t)v154;
    v11 = v320;
LABEL_240:
    operator delete(v134);
    goto LABEL_241;
  }
  v155 = (char *)v134 - (char *)v140 - 8;
  if (v155 < 0x58 || (unint64_t)((char *)v134 - v146 - v141) < 0x20)
  {
    v156 = v134;
    v11 = v320;
    goto LABEL_236;
  }
  v259 = (v155 >> 3) + 1;
  v260 = 8 * (v259 & 0x3FFFFFFFFFFFFFFCLL);
  v156 = &v134[v260 / 0xFFFFFFFFFFFFFFF8];
  v153 = (float32x2_t *)((char *)v153 - v260);
  v261 = &v146[8 * v142 - 16];
  v262 = (__int128 *)&v134[-2];
  v263 = v259 & 0x3FFFFFFFFFFFFFFCLL;
  v11 = v320;
  do
  {
    v264 = *v262;
    *(v261 - 1) = *(v262 - 1);
    *v261 = v264;
    v261 -= 2;
    v262 -= 2;
    v263 -= 4;
  }
  while (v263);
  if (v259 != (v259 & 0x3FFFFFFFFFFFFFFCLL))
  {
    do
    {
LABEL_236:
      v157 = v156[-1];
      --v156;
      v153[-1] = v157;
      --v153;
    }
    while (v156 != v140);
  }
  v134 = (float32x2_t *)v330;
  v330 = v153;
  rep = v136;
  v332 = (unint64_t)v154;
  if (v134)
    goto LABEL_240;
LABEL_241:
  v158 = 0;
  rep = v136;
  v159 = vsub_f32(*(float32x2_t *)((char *)v330 + 8), *(float32x2_t *)v330);
  *(float32x2_t *)&v9 = vmul_n_f32(v159, 1.0/ sqrtf(vmla_lane_f32(vmul_f32(v159, v159), (float32x2_t)vdup_lane_s32((int32x2_t)v159, 1), v159, 1).f32[0]));
  v160 = (float32x2_t **)(v11 + 64);
  v161 = *((float *)&v9 + 1);
  while (1)
  {
    v162 = v11;
    do
    {
      if (!v162[32])
      {
        v163 = (float32x2_t *)*((_QWORD *)v162 + 3);
        v164 = *v126;
        v165 = **((float32x2_t **)v162 + 2);
        do
        {
          v166 = v165;
          v167 = vsub_f32(v165, v164);
          v165 = *v163;
          v168 = vmul_f32(v167, (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*v163, v166)));
          if (vsub_f32(v168, (float32x2_t)vdup_lane_s32((int32x2_t)v168, 1)).f32[0] > 0.0)
            break;
          v169 = (float32x2_t *)(*((_QWORD *)v162 + 1) + 8 * *(_QWORD *)v162 - 8) == v163
               ? (float32x2_t *)*((_QWORD *)v162 + 1)
               : &v163[1];
          *((_QWORD *)v162 + 2) = v163;
          *((_QWORD *)v162 + 3) = v169;
          v18 = v163 == *((float32x2_t **)v162 + 5);
          v162[32] = v18;
          v163 = v169;
        }
        while (!v18);
      }
      v162 += 48;
    }
    while (v162 != v8);
    v170 = v11;
    while (v170[32])
    {
      v170 += 48;
      if (v170 == v8)
        goto LABEL_301;
    }
    if (v125)
    {
      v171 = *v126;
      v172 = v160;
      v173 = 48 * v125;
      v126 = (float32x2_t *)*((_QWORD *)v11 + 2);
      do
      {
        v174 = *v172;
        v175 = vmul_f32(vsub_f32(**v172, v171), (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*v126, **v172)));
        v176 = vsub_f32(v175, (float32x2_t)vdup_lane_s32((int32x2_t)v175, 1)).f32[0];
        if (v176 > 0.0
          || v176 >= 0.0
          && (v177 = vsub_f32(*v174, v171),
              v178 = vsub_f32(*v126, *v174),
              vmla_lane_f32(vmul_f32(v177, v178), (float32x2_t)vdup_lane_s32((int32x2_t)v178, 1), v177, 1).f32[0] < 0.0))
        {
          v126 = *v172;
        }
        v172 += 6;
        v173 -= 48;
      }
      while (v173);
    }
    else
    {
      v126 = (float32x2_t *)*((_QWORD *)v11 + 2);
    }
    v179 = rep;
    v181 = rep[-1].f32[0];
    v180 = rep[-1].f32[1];
    v182 = v126->f32[1] - v180;
    v183 = v126->f32[0] - v181;
    v184 = (float)(*(float *)&v9 * v182) - (float)(v161 * v183);
    if (v158 || v184 <= 0.000001)
      break;
    v158 = 1;
LABEL_274:
    if ((float)((float)(v182 * (float)(v181 - rep[-2].f32[0])) - (float)(v183 * (float)(v180 - rep[-2].f32[1]))) <= 0.0)
    {
      v185 = rep[-2];
      v186 = vsub_f32(v185, *v126);
      v187 = vsub_f32(v185, rep[-1]);
      if (vmla_lane_f32(vmul_f32(v186, v186), (float32x2_t)vdup_lane_s32((int32x2_t)v186, 1), v186, 1).f32[0] > vmla_lane_f32(vmul_f32(v187, v187), (float32x2_t)vdup_lane_s32((int32x2_t)v187, 1), v187, 1).f32[0])
        rep[-1] = *v126;
    }
    else if ((unint64_t)rep >= v332)
    {
      v188 = (float32x2_t *)v330;
      v189 = (char *)rep - (_BYTE *)v330;
      v190 = ((char *)rep - (_BYTE *)v330) >> 3;
      v191 = v190 + 1;
      if ((unint64_t)(v190 + 1) >> 61)
        sub_22316E078();
      v192 = v332 - (_QWORD)v330;
      if ((uint64_t)(v332 - (_QWORD)v330) >> 2 > v191)
        v191 = v192 >> 2;
      if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFF8)
        v193 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v193 = v191;
      v328 = v9;
      v326 = v160;
      if (v193)
      {
        if (v193 >> 61)
          sub_223174E94();
        v194 = operator new(8 * v193);
        v9 = v328;
      }
      else
      {
        v194 = 0;
      }
      v195 = (float32x2_t *)&v194[8 * v190];
      v196 = &v194[8 * v193];
      *v195 = *v126;
      v197 = v195 + 1;
      if (v179 == v188)
      {
        v330 = &v194[8 * v190];
        rep = v195 + 1;
        v332 = (unint64_t)v196;
LABEL_299:
        operator delete(v179);
        v9 = v328;
        goto LABEL_300;
      }
      v198 = (char *)v179 - (char *)v188 - 8;
      if (v198 < 0x58)
        goto LABEL_534;
      if ((unint64_t)((char *)v179 - v194 - v189) < 0x20)
        goto LABEL_534;
      v199 = (v198 >> 3) + 1;
      v200 = 8 * (v199 & 0x3FFFFFFFFFFFFFFCLL);
      v201 = (char *)&v179[v200 / 0xFFFFFFFFFFFFFFF8];
      v195 = (float32x2_t *)((char *)v195 - v200);
      v202 = &v194[8 * v190 - 16];
      v203 = (char *)&v179[-2];
      v204 = v199 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v205 = *(_OWORD *)v203;
        *(v202 - 1) = *((_OWORD *)v203 - 1);
        *v202 = v205;
        v202 -= 2;
        v203 -= 32;
        v204 -= 4;
      }
      while (v204);
      v179 = (float32x2_t *)v201;
      if (v199 != (v199 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_534:
        do
        {
          v206 = v179[-1];
          --v179;
          v195[-1] = v206;
          --v195;
        }
        while (v179 != v188);
      }
      v179 = (float32x2_t *)v330;
      v330 = v195;
      rep = v197;
      v332 = (unint64_t)v196;
      if (v179)
        goto LABEL_299;
LABEL_300:
      v11 = v320;
      v160 = v326;
      rep = v197;
    }
    else
    {
      *rep = *v126;
      rep = v179 + 1;
    }
  }
  if (v158 == 1 && v184 < -0.000001)
  {
    v158 = 2;
    goto LABEL_274;
  }
  if (v158 != 2 || v184 <= 0.000001)
    goto LABEL_274;
LABEL_301:
  v207 = v11;
  v208 = v322;
  while (v207[32])
  {
    v207 += 48;
    if (v207 == v8)
    {
      v209 = rep;
      if ((unint64_t)((char *)rep - (_BYTE *)v330) >= 0x19)
      {
        v210 = vmul_f32(vsub_f32(rep[-1], rep[-2]), (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*(float32x2_t *)v330, rep[-1])));
        if (vsub_f32(v210, (float32x2_t)vdup_lane_s32((int32x2_t)v210, 1)).f32[0] <= 0.0)
        {
          --rep;
          --v209;
        }
      }
      *(_QWORD *)a5 = v330;
      *(_QWORD *)(a5 + 8) = v209;
      *(_QWORD *)(a5 + 16) = v332;
      goto LABEL_457;
    }
  }
  sub_223FC3524(&v354);
  if (**(int **)(v354 + 56) <= 4)
  {
    v211 = *(unsigned __int8 *)(v354 + 72);
    v212 = sub_22322F254(v354, "OSLogSurrogateAppender", 1, 0);
    v213 = v212 ? v212 + 16 : 0;
    if (v211 || v212 != 0)
    {
      *(_QWORD *)v360 = &v354;
      *(std::chrono::steady_clock::time_point *)&v360[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v360[16] = std::chrono::system_clock::now();
      LODWORD(v361) = 4;
      *((_QWORD *)&v361 + 1) = "unknown file";
      LODWORD(v362) = 252;
      v364 = 0;
      v365 = 0;
      v363 = "unknown function";
      v215 = **(_QWORD **)v360;
      v216 = (uint64_t *)(**(_QWORD **)v360 + 16);
      if (*(char *)(**(_QWORD **)v360 + 39) < 0)
      {
        v218 = *(const char **)(v215 + 16);
        v217 = *(_QWORD *)(v215 + 24);
      }
      else
      {
        v217 = *(unsigned __int8 *)(**(_QWORD **)v360 + 39);
        v218 = (const char *)(v215 + 16);
      }
      v302 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v302 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if ((_BYTE)v342 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v303 = (const char *)&xmmword_255788F40;
      else
        v303 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v304 = byte_255788F57;
      else
        v304 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v303, v218);
      v305 = &object[8];
      if (v304 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v304 >= 0x17)
      {
        v306 = (v304 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v304 | 7) != 0x17)
          v306 = v304 | 7;
        v307 = v306 + 1;
        v305 = operator new(v306 + 1);
        *(_QWORD *)&object[16] = v304;
        *(_QWORD *)&v342 = v307 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v305;
      }
      else
      {
        BYTE7(v342) = v304;
        if (!v304)
        {
LABEL_476:
          v305[v304] = 0;
          BYTE8(v342) = 1;
          v308 = &__p;
          if (v217 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v11 = v320;
          if (v217 >= 0x17)
          {
            v309 = (v217 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v217 | 7) != 0x17)
              v309 = v217 | 7;
            v310 = v309 + 1;
            v308 = operator new(v309 + 1);
            v344 = v217;
            v345 = v310 | 0x8000000000000000;
            __p = v308;
          }
          else
          {
            HIBYTE(v345) = v217;
            if (!v217)
            {
LABEL_484:
              *((_BYTE *)v308 + v217) = 0;
              v346 = 1;
              v311 = *(NSObject **)object;
              if (SHIBYTE(v345) < 0)
                operator delete(__p);
              v208 = v322;
              if (BYTE8(v342) && SBYTE7(v342) < 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              sub_223FC3618(v213, v216, v311, OS_LOG_TYPE_ERROR);
              if (v211)
              {
                sub_22322C138((uint64_t)v360, "Convex hull unioning terminated before all input hulls have been fully consumed. Falling back to generic algorithm.");
                sub_223182C08((uint64_t)v360);
              }
              sub_223182C08((uint64_t)v360);
              v312 = v365;
              if (v365)
              {
                v313 = (unint64_t *)&v365->__shared_owners_;
                do
                  v314 = __ldaxr(v313);
                while (__stlxr(v314 - 1, v313));
                if (!v314)
                {
                  ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
                  std::__shared_weak_count::__release_weak(v312);
                }
              }
              goto LABEL_498;
            }
          }
          memmove(v308, v218, v217);
          goto LABEL_484;
        }
      }
      memmove(v305, v303, v304);
      goto LABEL_476;
    }
  }
LABEL_498:
  if (!v208
    && a1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223FBEADC(a1, v208, (uint64_t)object);
  v315 = *(_QWORD *)&object[16];
  *(_OWORD *)a5 = *(_OWORD *)object;
  *(_QWORD *)(a5 + 16) = v315;
  if (v330)
  {
    rep = (float32x2_t *)v330;
    operator delete(v330);
  }
LABEL_457:
  if (v11)
    operator delete(v11);
}

void sub_223FC1460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *__p,void *a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  uint64_t v43;

  if (a43 && a42 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC(v43 - 208);
  if (a25)
    operator delete(a25);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(a1);
}

char *sub_223FC1798(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4, _DWORD *a5)
{
  unint64_t v6;
  char *result;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6 >= *(_QWORD *)(a1 + 16))
  {
    result = sub_223FC22B0((void **)a1, a2, a3, a4, a5);
    *(_QWORD *)(a1 + 8) = result;
  }
  else
  {
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_OWORD *)v6 = *(_OWORD *)a2;
    *(_QWORD *)(v6 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(v6 + 24) = *a3;
    *(_DWORD *)(v6 + 32) = *a4;
    *(_DWORD *)(v6 + 36) = *a5;
    result = (char *)(v6 + 40);
    *(_QWORD *)(a1 + 8) = v6 + 40;
  }
  return result;
}

void sub_223FC1818(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  char *v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  v8 = *(char **)a1;
  v9 = (uint64_t)&v5[-*(_QWORD *)a1];
  v10 = v9 >> 3;
  v11 = (v9 >> 3) + 1;
  if (v11 >> 61)
    sub_22367C394();
  v12 = v4 - (_QWORD)v8;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      sub_223174E94();
    v14 = operator new(8 * v13);
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *v15 = a2;
    v7 = (uint64_t)(v15 + 1);
    v17 = v5 - v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v14 = 0;
  v15 = (_QWORD *)(8 * v10);
  v16 = 0;
  *(_QWORD *)(8 * v10) = a2;
  v7 = 8 * v10 + 8;
  v17 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    v18 = v17 - 8;
    if (v18 < 0x58)
      goto LABEL_27;
    if ((unint64_t)(v5 - v14 - v9) < 0x20)
      goto LABEL_27;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v20];
    v15 = (_QWORD *)((char *)v15 - v20);
    v21 = &v14[8 * v10 - 16];
    v22 = v5 - 16;
    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v25 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v15 = v25;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v16;
  if (v8)
    operator delete(v8);
LABEL_22:
  *(_QWORD *)(a1 + 8) = v7;
}

_QWORD *sub_223FC1988(_QWORD *a1, const void *a2, unint64_t a3)
{
  size_t v5;
  char *v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 61)
      sub_22367C394();
    v5 = 8 * a3;
    v6 = (char *)operator new(8 * a3);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[v5];
    a1[2] = &v6[v5];
    memmove(v6, a2, v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_223FC19FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_223FC1A18(void **a1, _BYTE *a2, char *a3)
{
  char *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  size_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;

  v3 = a3;
  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 3;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_QWORD *)v9 = *(_QWORD *)a3;
      a1[1] = v9 + 8;
      return;
    }
    v11 = v5 - (_QWORD)(v9 + 8);
    v12 = v11 >> 3;
    v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      v17 = a1[1];
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      v15 = v14 + v6 + 8;
      if (v5 > v15)
        v15 = (unint64_t)a1[1];
      v16 = v15 + ~v6 - v14;
      if (v16 >= 0x58)
      {
        v17 = a1[1];
        if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFF8) + 8 - v6] >= 0x20)
        {
          v39 = (v16 >> 3) + 1;
          v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          v13 = (uint64_t *)((char *)v13 + v40);
          v17 = (_QWORD *)(v5 + v40);
          v41 = (_OWORD *)(v5 + 16);
          v42 = (__int128 *)(8 * v12 + 8 * v8 + v6 + 16);
          v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v44 = *v42;
            *(v41 - 1) = *(v42 - 1);
            *v41 = v44;
            v41 += 2;
            v42 += 2;
            v43 -= 4;
          }
          while (v43);
          if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_47;
        }
      }
      else
      {
        v17 = a1[1];
      }
      do
      {
        v45 = *v13++;
        *v17++ = v45;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_47:
    a1[1] = v17;
    if ((char *)v5 != v9 + 8)
      memmove((void *)(v5 - 8 * v12), v9, v11);
    if (v9 <= v3)
      v3 += 8 * (a1[1] > v3);
    *(_QWORD *)v9 = *(_QWORD *)v3;
    return;
  }
  v18 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v18 >> 61)
    sub_22367C394();
  v20 = v10 - v6;
  if (v20 >> 2 > v18)
    v18 = v20 >> 2;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
    v21 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 61)
      sub_223174E94();
    v22 = (char *)operator new(8 * v21);
    v23 = &v22[8 * v8];
    v24 = &v22[8 * v21];
    if (v8 != v21)
      goto LABEL_24;
  }
  else
  {
    v22 = 0;
    v23 = (char *)(8 * v8);
    v24 = 0;
    if (v8)
      goto LABEL_24;
  }
  if (v7 < 1)
  {
    if ((_BYTE *)v6 == a2)
      v37 = 1;
    else
      v37 = v7 >> 2;
    if (v37 >> 61)
      sub_223174E94();
    v23 = (char *)operator new(8 * v37);
    v24 = &v23[8 * v37];
    if (v22)
    {
      operator delete(v22);
      v24 = &v23[8 * v37];
      v26 = (char *)*a1;
      *(_QWORD *)v23 = *(_QWORD *)v3;
      v27 = v23 + 8;
      if (v26 != v9)
        goto LABEL_25;
      goto LABEL_40;
    }
  }
  else
  {
    v25 = v8 + 2;
    if (v8 >= -1)
      v25 = v8 + 1;
    v23 -= 8 * (v25 >> 1);
  }
LABEL_24:
  v26 = (char *)v6;
  *(_QWORD *)v23 = *(_QWORD *)v3;
  v27 = v23 + 8;
  if ((char *)v6 != v9)
  {
LABEL_25:
    v28 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    v29 = v28 - v26 - 8;
    if (v29 >= 0x58 && (unint64_t)(v28 - v23) >= 0x20)
    {
      v46 = (v29 >> 3) + 1;
      v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
      v30 = &v9[-v47];
      v31 = &v23[-v47];
      v48 = v23 - 16;
      v49 = (__int128 *)(v6 + 8 * v8 - 16);
      v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v51 = *v49;
        *((_OWORD *)v48 - 1) = *(v49 - 1);
        *(_OWORD *)v48 = v51;
        v48 -= 32;
        v49 -= 2;
        v50 -= 4;
      }
      while (v50);
      if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        v33 = (char *)a1[1];
        v34 = v33 - v9;
        if (v33 == v9)
          goto LABEL_31;
        goto LABEL_30;
      }
    }
    else
    {
      v30 = v9;
      v31 = v23;
    }
    do
    {
      v32 = *((_QWORD *)v30 - 1);
      v30 -= 8;
      *((_QWORD *)v31 - 1) = v32;
      v31 -= 8;
    }
    while (v30 != v26);
    goto LABEL_29;
  }
LABEL_40:
  v31 = v23;
  v38 = (char *)a1[1];
  v34 = v38 - v9;
  if (v38 != v9)
  {
LABEL_30:
    v35 = v9;
    v36 = v24;
    memmove(v27, v35, v34);
    v24 = v36;
    v26 = (char *)*a1;
  }
LABEL_31:
  *a1 = v31;
  a1[1] = &v27[v34];
  a1[2] = v24;
  if (v26)
    operator delete(v26);
}

void sub_223FC1D94(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_223FC1DAC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void **v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  void *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  char *v42;

  v6 = *a1;
  v5 = a1[1];
  v7 = a2 - *a1;
  v8 = v7 / 40;
  v9 = *a1 + 40 * (v7 / 40);
  v10 = a1[2];
  if (v5 >= v10)
  {
    v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - v6) >> 3) + 1;
    if (v22 > 0x666666666666666)
      sub_22316E078();
    v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - v6) >> 3);
    if (2 * v24 > v22)
      v22 = 2 * v24;
    if (v24 >= 0x333333333333333)
      v25 = 0x666666666666666;
    else
      v25 = v22;
    if (v25)
    {
      if (v25 > 0x666666666666666)
        sub_223174E94();
      v26 = (char *)operator new(40 * v25);
    }
    else
    {
      v26 = 0;
    }
    v28 = &v26[40 * v8];
    v42 = &v26[40 * v25];
    if (v8 == v25)
    {
      if (v7 < 1)
      {
        if (v6 == a2)
          v30 = 1;
        else
          v30 = 2 * v8;
        if (v30 > 0x666666666666666)
          sub_223174E94();
        v31 = (char *)operator new(40 * v30);
        v28 = &v31[40 * (v30 >> 2)];
        v42 = &v31[40 * v30];
        if (v26)
          operator delete(v26);
      }
      else
      {
        v29 = v8 + 2;
        if (v8 >= -1)
          v29 = v8 + 1;
        v28 -= 40 * (v29 >> 1);
      }
    }
    *((_QWORD *)v28 + 2) = 0;
    *(_OWORD *)v28 = *(_OWORD *)a3;
    *((_QWORD *)v28 + 2) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)v28 + 3) = *(_QWORD *)(a3 + 24);
    *((_DWORD *)v28 + 8) = *(_DWORD *)(a3 + 32);
    *((_DWORD *)v28 + 9) = *(_DWORD *)(a3 + 36);
    v32 = v28 + 40;
    v33 = *a1;
    if (*a1 != v9)
    {
      v34 = 0;
      do
      {
        v35 = &v28[v34];
        v36 = v9 + v34;
        *(_OWORD *)(v35 - 40) = *(_OWORD *)(v9 + v34 - 40);
        *((_QWORD *)v35 - 3) = *(_QWORD *)(v9 + v34 - 24);
        *(_QWORD *)(v36 - 40) = 0;
        *(_QWORD *)(v36 - 32) = 0;
        *(_QWORD *)(v36 - 24) = 0;
        *((_QWORD *)v35 - 2) = *(_QWORD *)(v9 + v34 - 16);
        *((_DWORD *)v35 - 2) = *(_DWORD *)(v9 + v34 - 8);
        *((_DWORD *)v35 - 1) = *(_DWORD *)(v9 + v34 - 4);
        v34 -= 40;
      }
      while (v9 + v34 != v33);
      v32 = v28 + 40;
      v28 += v34;
    }
    v37 = a1[1];
    if (v37 != v9)
    {
      do
      {
        *(_QWORD *)v32 = 0;
        *((_QWORD *)v32 + 1) = 0;
        *((_QWORD *)v32 + 2) = 0;
        *(_OWORD *)v32 = *(_OWORD *)v9;
        *((_QWORD *)v32 + 2) = *(_QWORD *)(v9 + 16);
        *(_QWORD *)v9 = 0;
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 16) = 0;
        *((_QWORD *)v32 + 3) = *(_QWORD *)(v9 + 24);
        *((_DWORD *)v32 + 8) = *(_DWORD *)(v9 + 32);
        *((_DWORD *)v32 + 9) = *(_DWORD *)(v9 + 36);
        v32 += 40;
        v9 += 40;
      }
      while (v9 != v37);
      v9 = a1[1];
    }
    v38 = *a1;
    *a1 = (uint64_t)v28;
    a1[1] = (uint64_t)v32;
    a1[2] = (uint64_t)v42;
    if (v9 != v38)
    {
      v39 = v9;
      do
      {
        v41 = *(void **)(v39 - 40);
        v39 -= 40;
        v40 = v41;
        if (v41)
        {
          *(_QWORD *)(v9 - 32) = v40;
          operator delete(v40);
        }
        v9 = v39;
      }
      while (v39 != v38);
      v9 = v38;
    }
    if (v9)
      operator delete((void *)v9);
  }
  else if (v9 == v5)
  {
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = 0;
    *(_OWORD *)v9 = *(_OWORD *)a3;
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(v9 + 24) = *(_QWORD *)(a3 + 24);
    *(_DWORD *)(v9 + 32) = *(_DWORD *)(a3 + 32);
    *(_DWORD *)(v9 + 36) = *(_DWORD *)(a3 + 36);
    a1[1] = v9 + 40;
  }
  else
  {
    v11 = v9 + 40;
    v12 = v5 - 40;
    v13 = a1[1];
    if (v5 >= 0x28)
    {
      do
      {
        *(_QWORD *)v13 = 0;
        *(_QWORD *)(v13 + 8) = 0;
        *(_QWORD *)(v13 + 16) = 0;
        *(_OWORD *)v13 = *(_OWORD *)v12;
        *(_QWORD *)(v13 + 16) = *(_QWORD *)(v12 + 16);
        *(_QWORD *)v12 = 0;
        *(_QWORD *)(v12 + 8) = 0;
        *(_QWORD *)(v12 + 16) = 0;
        *(_QWORD *)(v13 + 24) = *(_QWORD *)(v12 + 24);
        *(_DWORD *)(v13 + 32) = *(_DWORD *)(v12 + 32);
        *(_DWORD *)(v13 + 36) = *(_DWORD *)(v12 + 36);
        v13 += 40;
        v12 += 40;
      }
      while (v12 < v5);
    }
    a1[1] = v13;
    if (v5 != v11)
    {
      v14 = 0;
      v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - v11) >> 3);
      v16 = v6 + 40 * v15 + 40 * v8;
      v17 = -40 * v15;
      do
      {
        v19 = v5 + v14;
        v21 = (void **)(v5 + v14 - 40);
        v20 = *v21;
        if (*v21)
        {
          *(_QWORD *)(v19 - 32) = v20;
          operator delete(v20);
          *v21 = 0;
          *(_QWORD *)(v5 + v14 - 32) = 0;
          *(_QWORD *)(v5 + v14 - 24) = 0;
        }
        v18 = v16 + v14 - 40;
        *(_OWORD *)v21 = *(_OWORD *)v18;
        *(_QWORD *)(v19 - 24) = *(_QWORD *)(v16 + v14 - 24);
        *(_QWORD *)v18 = 0;
        *(_QWORD *)(v18 + 8) = 0;
        *(_QWORD *)(v18 + 16) = 0;
        *(_QWORD *)(v19 - 16) = *(_QWORD *)(v16 + v14 - 16);
        *(_DWORD *)(v19 - 8) = *(_DWORD *)(v16 + v14 - 8);
        *(_DWORD *)(v19 - 4) = *(_DWORD *)(v16 + v14 - 4);
        v14 -= 40;
      }
      while (v17 != v14);
    }
    v27 = *(void **)v9;
    if (*(_QWORD *)v9)
    {
      *(_QWORD *)(v9 + 8) = v27;
      operator delete(v27);
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
    }
    *(_OWORD *)v9 = *(_OWORD *)a3;
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(v9 + 24) = *(_QWORD *)(a3 + 24);
    *(_DWORD *)(v9 + 32) = *(_DWORD *)(a3 + 32);
    *(_DWORD *)(v9 + 36) = *(_DWORD *)(a3 + 36);
  }
}

void sub_223FC2230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223FC2244((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223FC2244(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 40;
        v4 = *(void **)(v2 - 40);
        *(_QWORD *)(a1 + 16) = v2 - 40;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 32) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 40;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_223FC22B0(void **a1, uint64_t a2, uint64_t *a3, _DWORD *a4, _DWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;

  v5 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666)
    sub_22316E078();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v6)
    v6 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x333333333333333)
    v12 = 0x666666666666666;
  else
    v12 = v6;
  if (v12)
  {
    if (v12 > 0x666666666666666)
      sub_223174E94();
    v13 = (char *)operator new(40 * v12);
  }
  else
  {
    v13 = 0;
  }
  v14 = &v13[40 * v5];
  *(_OWORD *)v14 = *(_OWORD *)a2;
  v15 = &v13[40 * v12];
  v16 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v17 = *a3;
  *((_QWORD *)v14 + 2) = v16;
  *((_QWORD *)v14 + 3) = v17;
  LODWORD(v17) = *a5;
  *((_DWORD *)v14 + 8) = *a4;
  *((_DWORD *)v14 + 9) = v17;
  v18 = v14 + 40;
  v19 = (char *)*a1;
  v20 = (char *)a1[1];
  if (v20 == *a1)
  {
    *a1 = v14;
    a1[1] = v18;
    a1[2] = v15;
  }
  else
  {
    v21 = 0;
    do
    {
      v22 = &v14[v21];
      v23 = &v20[v21];
      *((_QWORD *)v22 - 4) = 0;
      *((_QWORD *)v22 - 3) = 0;
      *(_OWORD *)(v22 - 40) = *(_OWORD *)&v20[v21 - 40];
      *((_QWORD *)v22 - 3) = *(_QWORD *)&v20[v21 - 24];
      *((_QWORD *)v23 - 5) = 0;
      *((_QWORD *)v23 - 4) = 0;
      *((_QWORD *)v23 - 3) = 0;
      *((_QWORD *)v22 - 2) = *(_QWORD *)&v20[v21 - 16];
      *((_DWORD *)v22 - 2) = *(_DWORD *)&v20[v21 - 8];
      *((_DWORD *)v22 - 1) = *(_DWORD *)&v20[v21 - 4];
      v21 -= 40;
    }
    while (&v20[v21] != v19);
    v20 = (char *)*a1;
    v24 = (char *)a1[1];
    *a1 = &v14[v21];
    a1[1] = v18;
    a1[2] = v15;
    if (v24 != v20)
    {
      v25 = v24;
      do
      {
        v27 = (void *)*((_QWORD *)v25 - 5);
        v25 -= 40;
        v26 = v27;
        if (v27)
        {
          *((_QWORD *)v24 - 4) = v26;
          operator delete(v26);
        }
        v24 = v25;
      }
      while (v25 != v20);
    }
  }
  if (v20)
    operator delete(v20);
  return v18;
}

float *sub_223FC2460(float *result, float *a2, uint64_t a3, char a4)
{
  float *v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  float *v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float *v39;
  float *v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  float v57;
  float *v58;
  float *v59;
  float *v60;
  float v61;
  float *v62;
  float v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  float v67;
  float v68;
  BOOL v69;
  float *v70;
  float v71;
  float *v72;
  float v73;
  float *v74;
  float *v75;
  float v76;
  uint64_t v77;
  int v78;
  float v79;
  float v80;
  float v81;
  uint64_t v82;
  float v83;
  float v84;
  float v85;
  uint64_t v86;
  float v87;
  float v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  uint64_t v92;
  float v93;
  uint64_t v94;
  float *v95;
  BOOL v97;
  uint64_t v98;
  float *v99;
  uint64_t v100;
  float v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  int64_t v106;
  int64_t v107;
  BOOL v108;
  uint64_t v109;
  float *v110;
  float *v111;
  float v112;
  uint64_t v113;
  float *v114;
  uint64_t v115;
  uint64_t v116;
  int64_t v117;
  uint64_t v118;
  uint64_t v119;
  float v120;
  float *v121;
  float *v122;
  uint64_t v123;
  int64_t v124;
  uint64_t v125;
  unint64_t v126;
  float *v127;
  uint64_t v128;
  float *v129;
  uint64_t v130;
  float v131;
  float v132;
  uint64_t v133;
  float *v134;
  float v135;
  float v136;
  uint64_t v137;
  float *v138;
  float *v139;
  int v140;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * (a2 - v8);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v81 = v8[2];
        if (*(a2 - 1) < v81)
        {
          v82 = *(_QWORD *)v8;
          goto LABEL_104;
        }
        return result;
      case 3:
        v83 = v8[5];
        v81 = v8[2];
        v84 = *(a2 - 1);
        if (v83 < v81)
        {
          v82 = *(_QWORD *)v8;
          if (v84 >= v83)
          {
            *(_QWORD *)v8 = *(_QWORD *)(v8 + 3);
            v8[2] = v83;
            *(_QWORD *)(v8 + 3) = v82;
            v8[5] = v81;
            if (*(a2 - 1) >= v81)
              return result;
            *(_QWORD *)(v8 + 3) = *(_QWORD *)(a2 - 3);
            v8[5] = *(a2 - 1);
          }
          else
          {
LABEL_104:
            *(_QWORD *)v8 = *(_QWORD *)(a2 - 3);
            v8[2] = *(a2 - 1);
          }
          *(_QWORD *)(a2 - 3) = v82;
          *(a2 - 1) = v81;
          return result;
        }
        if (v84 < v83)
        {
          v130 = *(_QWORD *)(v8 + 3);
          *(_QWORD *)(v8 + 3) = *(_QWORD *)(a2 - 3);
          v8[5] = *(a2 - 1);
          *(_QWORD *)(a2 - 3) = v130;
          *(a2 - 1) = v83;
          v131 = v8[5];
          v132 = v8[2];
          if (v131 < v132)
          {
            v133 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)(v8 + 3);
            v8[2] = v131;
            *(_QWORD *)(v8 + 3) = v133;
            v8[5] = v132;
          }
        }
        return result;
      case 4:
        return sub_223FC33D0(v8, v8 + 3, v8 + 6, a2 - 3);
      case 5:
        result = sub_223FC33D0(v8, v8 + 3, v8 + 6, v8 + 9);
        v85 = v8[11];
        if (*(a2 - 1) < v85)
        {
          v86 = *(_QWORD *)(v8 + 9);
          *(_QWORD *)(v8 + 9) = *(_QWORD *)(a2 - 3);
          v8[11] = *(a2 - 1);
          *(_QWORD *)(a2 - 3) = v86;
          *(a2 - 1) = v85;
          v87 = v8[11];
          v88 = v8[8];
          if (v87 < v88)
          {
            v89 = *((_QWORD *)v8 + 3);
            v90 = *(_QWORD *)(v8 + 9);
            *((_QWORD *)v8 + 3) = v90;
            v8[8] = v87;
            *(_QWORD *)(v8 + 9) = v89;
            v8[11] = v88;
            v91 = v8[5];
            if (v87 < v91)
            {
              v92 = *(_QWORD *)(v8 + 3);
              *(_QWORD *)(v8 + 3) = v90;
              v8[5] = v87;
              *((_QWORD *)v8 + 3) = v92;
              v8[8] = v91;
              v93 = v8[2];
              if (v87 < v93)
              {
                v94 = *(_QWORD *)v8;
                *(_QWORD *)v8 = v90;
                v8[2] = v87;
                *(_QWORD *)(v8 + 3) = v94;
                v8[5] = v93;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 287)
        {
          v95 = v8 + 3;
          v97 = v8 == a2 || v95 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v97)
            {
              v98 = 0;
              v99 = v8;
              do
              {
                v101 = v99[5];
                v102 = v99[2];
                v99 = v95;
                if (v101 < v102)
                {
                  v103 = *(_QWORD *)v95;
                  v104 = v98;
                  do
                  {
                    v105 = (char *)v8 + v104;
                    *(_QWORD *)(v105 + 12) = *(_QWORD *)((char *)v8 + v104);
                    *((float *)v105 + 5) = *(float *)((char *)v8 + v104 + 8);
                    if (!v104)
                    {
                      v100 = (uint64_t)v8;
                      goto LABEL_122;
                    }
                    v104 -= 12;
                  }
                  while (v101 < *((float *)v105 - 1));
                  v100 = (uint64_t)v8 + v104 + 12;
LABEL_122:
                  *(_QWORD *)v100 = v103;
                  *(float *)(v100 + 8) = v101;
                }
                v95 = v99 + 3;
                v98 += 12;
              }
              while (v99 + 3 != a2);
            }
          }
          else if (!v97)
          {
            v134 = v8 + 5;
            do
            {
              v135 = v7[5];
              v136 = v7[2];
              v7 = v95;
              if (v135 < v136)
              {
                v137 = *(_QWORD *)v95;
                v138 = v134;
                do
                {
                  v139 = v138;
                  *((_QWORD *)v138 - 1) = *(_QWORD *)(v138 - 5);
                  v140 = *((_DWORD *)v138 - 3);
                  v138 -= 3;
                  *(_DWORD *)v139 = v140;
                }
                while (v135 < *(v139 - 6));
                *((_QWORD *)v138 - 1) = v137;
                *v138 = v135;
              }
              v95 = v7 + 3;
              v134 += 3;
            }
            while (v7 + 3 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 == a2)
            return result;
          v106 = (unint64_t)(v10 - 2) >> 1;
          v107 = v106;
          do
          {
            if (v106 >= v107)
            {
              v109 = (2 * v107) | 1;
              v110 = &v8[3 * v109];
              if (2 * v107 + 2 < v10 && v110[2] < v110[5])
              {
                v110 += 3;
                v109 = 2 * v107 + 2;
              }
              v111 = &v8[3 * v107];
              v112 = v111[2];
              if (v110[2] >= v112)
              {
                v113 = *(_QWORD *)v111;
                do
                {
                  v114 = v111;
                  v111 = v110;
                  *(_QWORD *)v114 = *(_QWORD *)v110;
                  v114[2] = v110[2];
                  if (v106 < v109)
                    break;
                  v115 = 2 * v109;
                  v109 = (2 * v109) | 1;
                  v110 = &v8[3 * v109];
                  v116 = v115 + 2;
                  if (v116 < v10 && v110[2] < v110[5])
                  {
                    v110 += 3;
                    v109 = v116;
                  }
                }
                while (v110[2] >= v112);
                *(_QWORD *)v111 = v113;
                v111[2] = v112;
              }
            }
            v108 = v107-- <= 0;
          }
          while (!v108);
          v117 = v9 / 0xCuLL;
          while (2)
          {
            v118 = 0;
            v119 = *(_QWORD *)v8;
            v120 = v8[2];
            v121 = v8;
            do
            {
              v122 = v121;
              v121 += 3 * v118 + 3;
              v123 = 2 * v118;
              v118 = (2 * v118) | 1;
              v124 = v123 + 2;
              if (v124 < v117 && v121[2] < v121[5])
              {
                v121 += 3;
                v118 = v124;
              }
              *(_QWORD *)v122 = *(_QWORD *)v121;
              v122[2] = v121[2];
            }
            while (v118 <= (uint64_t)((unint64_t)(v117 - 2) >> 1));
            if (v121 != a2 - 3)
            {
              *(_QWORD *)v121 = *(_QWORD *)(a2 - 3);
              v121[2] = *(a2 - 1);
              *(_QWORD *)(a2 - 3) = v119;
              *(a2 - 1) = v120;
              v125 = (char *)v121 - (char *)v8 + 12;
              if (v125 >= 13)
              {
                v126 = (v125 / 0xCuLL - 2) >> 1;
                v127 = &v8[3 * v126];
                v120 = v121[2];
                if (v127[2] < v120)
                {
                  v128 = *(_QWORD *)v121;
                  do
                  {
                    v129 = v121;
                    v121 = v127;
                    *(_QWORD *)v129 = *(_QWORD *)v127;
                    v129[2] = v127[2];
                    if (!v126)
                      break;
                    v126 = (v126 - 1) >> 1;
                    v127 = &v8[3 * v126];
                  }
                  while (v127[2] < v120);
                  *(_QWORD *)v121 = v128;
LABEL_146:
                  v121[2] = v120;
                }
              }
              a2 -= 3;
              v108 = v117-- <= 2;
              if (v108)
                return result;
              continue;
            }
            break;
          }
          *(_QWORD *)v121 = v119;
          goto LABEL_146;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[3 * ((unint64_t)v10 >> 1)];
        v13 = *(a2 - 1);
        if ((unint64_t)v9 < 0x601)
        {
          v17 = v8[2];
          v18 = v12[2];
          if (v17 >= v18)
          {
            if (v13 < v17)
            {
              v24 = *(_QWORD *)v8;
              *(_QWORD *)v8 = *(_QWORD *)(a2 - 3);
              v8[2] = *(a2 - 1);
              *(_QWORD *)(a2 - 3) = v24;
              *(a2 - 1) = v17;
              v25 = v8[2];
              v26 = v12[2];
              if (v25 < v26)
              {
                v27 = *(_QWORD *)v12;
                *(_QWORD *)v12 = *(_QWORD *)v8;
                v12[2] = v25;
                *(_QWORD *)v8 = v27;
                v8[2] = v26;
                --a3;
                if ((a4 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_57;
              }
            }
          }
          else
          {
            v19 = *(_QWORD *)v12;
            if (v13 >= v17)
            {
              *(_QWORD *)v12 = *(_QWORD *)v8;
              v12[2] = v17;
              *(_QWORD *)v8 = v19;
              v8[2] = v18;
              if (*(a2 - 1) >= v18)
                goto LABEL_32;
              *(_QWORD *)v8 = *(_QWORD *)(a2 - 3);
              v8[2] = *(a2 - 1);
            }
            else
            {
              *(_QWORD *)v12 = *(_QWORD *)(a2 - 3);
              v12[2] = *(a2 - 1);
            }
            *(_QWORD *)(a2 - 3) = v19;
            *(a2 - 1) = v18;
          }
LABEL_32:
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_33;
LABEL_57:
          v38 = v8[2];
          v37 = *(_QWORD *)v8;
          if (*(v8 - 1) < v38)
            goto LABEL_58;
          if (v38 >= *(a2 - 1))
          {
            v72 = v8 + 3;
            do
            {
              v8 = v72;
              if (v72 >= a2)
                break;
              v73 = v72[2];
              v72 += 3;
            }
            while (v38 >= v73);
          }
          else
          {
            v70 = v8;
            do
            {
              v8 = v70 + 3;
              v71 = v70[5];
              v70 += 3;
            }
            while (v38 >= v71);
          }
          v74 = a2;
          if (v8 < a2)
          {
            v75 = a2;
            do
            {
              v74 = v75 - 3;
              v76 = *(v75 - 1);
              v75 -= 3;
            }
            while (v38 < v76);
          }
          while (v8 < v74)
          {
            v77 = *(_QWORD *)v8;
            v78 = *((_DWORD *)v8 + 2);
            *(_QWORD *)v8 = *(_QWORD *)v74;
            v8[2] = v74[2];
            *(_QWORD *)v74 = v77;
            *((_DWORD *)v74 + 2) = v78;
            do
            {
              v79 = v8[5];
              v8 += 3;
            }
            while (v38 >= v79);
            do
            {
              v80 = *(v74 - 1);
              v74 -= 3;
            }
            while (v38 < v80);
          }
          if (v8 - 3 != v7)
          {
            *(_QWORD *)v7 = *(_QWORD *)(v8 - 3);
            v7[2] = *(v8 - 1);
          }
          a4 = 0;
          *(_QWORD *)(v8 - 3) = v37;
          *(v8 - 1) = v38;
          continue;
        }
        v14 = v12[2];
        v15 = v8[2];
        if (v14 >= v15)
        {
          if (v13 < v14)
          {
            v20 = *(_QWORD *)v12;
            *(_QWORD *)v12 = *(_QWORD *)(a2 - 3);
            v12[2] = *(a2 - 1);
            *(_QWORD *)(a2 - 3) = v20;
            *(a2 - 1) = v14;
            v21 = v12[2];
            v22 = v8[2];
            if (v21 < v22)
            {
              v23 = *(_QWORD *)v8;
              *(_QWORD *)v8 = *(_QWORD *)v12;
              v8[2] = v21;
              *(_QWORD *)v12 = v23;
              v12[2] = v22;
            }
          }
        }
        else
        {
          v16 = *(_QWORD *)v8;
          if (v13 < v14)
          {
            *(_QWORD *)v8 = *(_QWORD *)(a2 - 3);
            v8[2] = *(a2 - 1);
            goto LABEL_22;
          }
          *(_QWORD *)v8 = *(_QWORD *)v12;
          v8[2] = v14;
          *(_QWORD *)v12 = v16;
          v12[2] = v15;
          if (*(a2 - 1) < v15)
          {
            *(_QWORD *)v12 = *(_QWORD *)(a2 - 3);
            v12[2] = *(a2 - 1);
LABEL_22:
            *(_QWORD *)(a2 - 3) = v16;
            *(a2 - 1) = v15;
          }
        }
        v28 = &v8[3 * v11];
        v29 = v28 - 3;
        v30 = *(v28 - 1);
        v31 = v8[5];
        v32 = *(a2 - 4);
        if (v30 >= v31)
        {
          if (v32 < v30)
          {
            v34 = *(_QWORD *)v29;
            *(_QWORD *)v29 = *((_QWORD *)a2 - 3);
            v29[2] = *(a2 - 4);
            *((_QWORD *)a2 - 3) = v34;
            *(a2 - 4) = v30;
            v35 = v8[5];
            if (v29[2] < v35)
            {
              v36 = *(_QWORD *)(v8 + 3);
              *(_QWORD *)(v8 + 3) = *(_QWORD *)v29;
              v8[5] = v29[2];
              *(_QWORD *)v29 = v36;
              v29[2] = v35;
            }
          }
        }
        else
        {
          v33 = *(_QWORD *)(v8 + 3);
          if (v32 < v30)
          {
            *(_QWORD *)(v8 + 3) = *((_QWORD *)a2 - 3);
            v8[5] = *(a2 - 4);
            goto LABEL_36;
          }
          *(_QWORD *)(v8 + 3) = *(_QWORD *)v29;
          v8[5] = v29[2];
          *(_QWORD *)v29 = v33;
          v29[2] = v31;
          if (*(a2 - 4) < v31)
          {
            *(_QWORD *)v29 = *((_QWORD *)a2 - 3);
            v29[2] = *(a2 - 4);
LABEL_36:
            *((_QWORD *)a2 - 3) = v33;
            *(a2 - 4) = v31;
          }
        }
        v39 = &v8[3 * v11];
        v40 = v39 + 3;
        v41 = v39[5];
        v42 = v8[8];
        v43 = *(a2 - 7);
        if (v41 >= v42)
        {
          if (v43 < v41)
          {
            v45 = *(_QWORD *)v40;
            *(_QWORD *)v40 = *(_QWORD *)(a2 - 9);
            v40[2] = *(a2 - 7);
            *(_QWORD *)(a2 - 9) = v45;
            *(a2 - 7) = v41;
            v46 = v8[8];
            if (v40[2] < v46)
            {
              v47 = *((_QWORD *)v8 + 3);
              *((_QWORD *)v8 + 3) = *(_QWORD *)v40;
              v8[8] = v40[2];
              *(_QWORD *)v40 = v47;
              v40[2] = v46;
            }
          }
        }
        else
        {
          v44 = *((_QWORD *)v8 + 3);
          if (v43 < v41)
          {
            *((_QWORD *)v8 + 3) = *(_QWORD *)(a2 - 9);
            v8[8] = *(a2 - 7);
            goto LABEL_45;
          }
          *((_QWORD *)v8 + 3) = *(_QWORD *)v40;
          v8[8] = v40[2];
          *(_QWORD *)v40 = v44;
          v40[2] = v42;
          if (*(a2 - 7) < v42)
          {
            *(_QWORD *)v40 = *(_QWORD *)(a2 - 9);
            v40[2] = *(a2 - 7);
LABEL_45:
            *(_QWORD *)(a2 - 9) = v44;
            *(a2 - 7) = v42;
          }
        }
        v48 = v12[2];
        v49 = v29[2];
        v50 = v40[2];
        if (v48 >= v49)
        {
          v51 = *(_QWORD *)v12;
          if (v50 >= v48)
          {
            v49 = v12[2];
          }
          else
          {
            v52 = *(_QWORD *)v40;
            *(_QWORD *)v12 = *(_QWORD *)v40;
            v12[2] = v50;
            *(_QWORD *)v40 = v51;
            v40[2] = v48;
            if (v50 >= v49)
            {
              v49 = v50;
              v51 = v52;
            }
            else
            {
              v51 = *(_QWORD *)v29;
              *(_QWORD *)v29 = v52;
              v29[2] = v50;
              *(_QWORD *)v12 = v51;
              v12[2] = v49;
            }
          }
        }
        else
        {
          v51 = *(_QWORD *)v29;
          if (v50 >= v48)
          {
            *(_QWORD *)v29 = *(_QWORD *)v12;
            v29[2] = v48;
            *(_QWORD *)v12 = v51;
            v12[2] = v49;
            if (v50 < v49)
            {
              v53 = *(_QWORD *)v40;
              *(_QWORD *)v12 = *(_QWORD *)v40;
              v12[2] = v50;
              *(_QWORD *)v40 = v51;
              v40[2] = v49;
              v49 = v50;
              v51 = v53;
            }
          }
          else
          {
            *(_QWORD *)v29 = *(_QWORD *)v40;
            v29[2] = v50;
            *(_QWORD *)v40 = v51;
            v40[2] = v49;
            v51 = *(_QWORD *)v12;
            v49 = v48;
          }
        }
        v54 = *(_QWORD *)v8;
        v55 = v8[2];
        *(_QWORD *)v8 = v51;
        v8[2] = v49;
        *(_QWORD *)v12 = v54;
        v8[3 * v11 + 2] = v55;
        --a3;
        if ((a4 & 1) == 0)
          goto LABEL_57;
LABEL_33:
        v37 = *(_QWORD *)v8;
        v38 = v8[2];
LABEL_58:
        v56 = 0;
        do
        {
          v57 = v8[v56 + 5];
          v56 += 3;
        }
        while (v57 < v38);
        v58 = &v8[v56];
        v59 = a2;
        if (v56 == 3)
        {
          v62 = a2;
          while (v58 < v62)
          {
            v60 = v62 - 3;
            v63 = *(v62 - 1);
            v62 -= 3;
            if (v63 < v38)
              goto LABEL_66;
          }
          v60 = v62;
          v8 = v58;
        }
        else
        {
          do
          {
            v60 = v59 - 3;
            v61 = *(v59 - 1);
            v59 -= 3;
          }
          while (v61 >= v38);
LABEL_66:
          v8 = v58;
          if (v58 < v60)
          {
            v64 = (unint64_t)v60;
            do
            {
              v65 = *(_QWORD *)v8;
              v66 = *((_DWORD *)v8 + 2);
              *(_QWORD *)v8 = *(_QWORD *)v64;
              v8[2] = *(float *)(v64 + 8);
              *(_QWORD *)v64 = v65;
              *(_DWORD *)(v64 + 8) = v66;
              do
              {
                v67 = v8[5];
                v8 += 3;
              }
              while (v67 < v38);
              do
              {
                v68 = *(float *)(v64 - 4);
                v64 -= 12;
              }
              while (v68 >= v38);
            }
            while ((unint64_t)v8 < v64);
          }
        }
        if (v8 - 3 != v7)
        {
          *(_QWORD *)v7 = *(_QWORD *)(v8 - 3);
          v7[2] = *(v8 - 1);
        }
        *(_QWORD *)(v8 - 3) = v37;
        *(v8 - 1) = v38;
        if (v58 < v60)
        {
LABEL_77:
          result = (float *)sub_223FC2460(v7, v8 - 3, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v69 = sub_223FC3034(v7, v8 - 3);
        result = (float *)sub_223FC3034(v8, a2);
        if (!(_DWORD)result)
        {
          if (v69)
            continue;
          goto LABEL_77;
        }
        a2 = v8 - 3;
        if (!v69)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_223FC3034(float *a1, float *a2)
{
  unint64_t v4;
  _BOOL8 result;
  float v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float *v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  uint64_t v33;
  int v34;
  float *v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a1[2];
      if (*(a2 - 1) < v6)
      {
        v7 = *(_QWORD *)a1;
        goto LABEL_7;
      }
      return result;
    case 3uLL:
      v8 = a1[5];
      v6 = a1[2];
      v9 = *(a2 - 1);
      if (v8 >= v6)
      {
        if (v9 < v8)
        {
          v25 = *(_QWORD *)(a1 + 3);
          *(_QWORD *)(a1 + 3) = *(_QWORD *)(a2 - 3);
          a1[5] = *(a2 - 1);
          *(_QWORD *)(a2 - 3) = v25;
          *(a2 - 1) = v8;
          v26 = a1[5];
          v27 = a1[2];
          if (v26 < v27)
          {
            v28 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *(_QWORD *)(a1 + 3);
            a1[2] = v26;
            *(_QWORD *)(a1 + 3) = v28;
            a1[5] = v27;
          }
        }
      }
      else
      {
        v7 = *(_QWORD *)a1;
        if (v9 >= v8)
        {
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 3);
          a1[2] = v8;
          *(_QWORD *)(a1 + 3) = v7;
          a1[5] = v6;
          if (*(a2 - 1) < v6)
          {
            *(_QWORD *)(a1 + 3) = *(_QWORD *)(a2 - 3);
            a1[5] = *(a2 - 1);
            *(_QWORD *)(a2 - 3) = v7;
            *(a2 - 1) = v6;
          }
        }
        else
        {
LABEL_7:
          *(_QWORD *)a1 = *(_QWORD *)(a2 - 3);
          a1[2] = *(a2 - 1);
          *(_QWORD *)(a2 - 3) = v7;
          *(a2 - 1) = v6;
        }
      }
      return result;
    case 4uLL:
      sub_223FC33D0(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_223FC33D0(a1, a1 + 3, a1 + 6, a1 + 9);
      v15 = a1[11];
      if (*(a2 - 1) >= v15)
        return 1;
      v16 = *(_QWORD *)(a1 + 9);
      *(_QWORD *)(a1 + 9) = *(_QWORD *)(a2 - 3);
      a1[11] = *(a2 - 1);
      *(_QWORD *)(a2 - 3) = v16;
      *(a2 - 1) = v15;
      v17 = a1[11];
      v18 = a1[8];
      if (v17 >= v18)
        return 1;
      v19 = *((_QWORD *)a1 + 3);
      v20 = *(_QWORD *)(a1 + 9);
      *((_QWORD *)a1 + 3) = v20;
      a1[8] = v17;
      *(_QWORD *)(a1 + 9) = v19;
      a1[11] = v18;
      v21 = a1[5];
      if (v17 >= v21)
        return 1;
      v22 = *(_QWORD *)(a1 + 3);
      *(_QWORD *)(a1 + 3) = v20;
      a1[5] = v17;
      *((_QWORD *)a1 + 3) = v22;
      a1[8] = v21;
      v23 = a1[2];
      if (v17 >= v23)
        return 1;
      v24 = *(_QWORD *)a1;
      *(_QWORD *)a1 = v20;
      a1[2] = v17;
      *(_QWORD *)(a1 + 3) = v24;
      a1[5] = v23;
      return 1;
    default:
      v10 = a1[8];
      v11 = a1 + 5;
      v12 = a1[5];
      v13 = a1[2];
      if (v12 < v13)
      {
        v14 = *(_QWORD *)a1;
        if (v10 >= v12)
        {
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 3);
          a1[2] = v12;
          *(_QWORD *)(a1 + 3) = v14;
          a1[5] = v13;
          if (v10 >= v13)
            goto LABEL_30;
          *(_QWORD *)(a1 + 3) = *((_QWORD *)a1 + 3);
          a1[5] = v10;
        }
        else
        {
          *(_QWORD *)a1 = *((_QWORD *)a1 + 3);
          a1[2] = v10;
        }
        *((_QWORD *)a1 + 3) = v14;
        v11 = a1 + 8;
        goto LABEL_29;
      }
      if (v10 < v12)
      {
        v29 = *(_QWORD *)(a1 + 3);
        v30 = *((_QWORD *)a1 + 3);
        *(_QWORD *)(a1 + 3) = v30;
        a1[5] = v10;
        *((_QWORD *)a1 + 3) = v29;
        a1[8] = v12;
        if (v10 < v13)
        {
          v31 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v30;
          a1[2] = v10;
          *(_QWORD *)(a1 + 3) = v31;
LABEL_29:
          *v11 = v13;
        }
      }
LABEL_30:
      v32 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v33 = 0;
      v34 = 0;
      v35 = a1 + 6;
      while (1)
      {
        v36 = v32[2];
        if (v36 < v35[2])
          break;
LABEL_39:
        v35 = v32;
        v33 += 12;
        v32 += 3;
        if (v32 == a2)
          return 1;
      }
      v37 = *(_QWORD *)v32;
      v38 = v33;
      do
      {
        v39 = (char *)a1 + v38;
        *(_QWORD *)(v39 + 36) = *(_QWORD *)((char *)a1 + v38 + 24);
        *((float *)v39 + 11) = *(float *)((char *)a1 + v38 + 32);
        if (v38 == -24)
        {
          *(_QWORD *)a1 = v37;
          a1[2] = v36;
          if (++v34 != 8)
            goto LABEL_39;
          return v32 + 3 == a2;
        }
        v38 -= 12;
      }
      while (v36 < *((float *)v39 + 5));
      v40 = (char *)a1 + v38;
      *(_QWORD *)(v40 + 36) = v37;
      *((float *)v40 + 11) = v36;
      if (++v34 != 8)
        goto LABEL_39;
      return v32 + 3 == a2;
  }
}

float *sub_223FC33D0(float *result, float *a2, float *a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;

  v4 = a2[2];
  v5 = result[2];
  v6 = a3[2];
  if (v4 >= v5)
  {
    if (v6 < v4)
    {
      v8 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = a3[2];
      *(_QWORD *)a3 = v8;
      a3[2] = v4;
      v9 = result[2];
      v6 = v4;
      if (a2[2] < v9)
      {
        v10 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)a2;
        result[2] = a2[2];
        *(_QWORD *)a2 = v10;
        a2[2] = v9;
        v6 = a3[2];
      }
    }
  }
  else
  {
    v7 = *(_QWORD *)result;
    if (v6 < v4)
    {
      *(_QWORD *)result = *(_QWORD *)a3;
      result[2] = a3[2];
LABEL_9:
      *(_QWORD *)a3 = v7;
      a3[2] = v5;
      v6 = v5;
      goto LABEL_10;
    }
    *(_QWORD *)result = *(_QWORD *)a2;
    result[2] = a2[2];
    *(_QWORD *)a2 = v7;
    a2[2] = v5;
    v6 = a3[2];
    if (v6 < v5)
    {
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = a3[2];
      goto LABEL_9;
    }
  }
LABEL_10:
  if (a4[2] < v6)
  {
    v11 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    a3[2] = a4[2];
    *(_QWORD *)a4 = v11;
    a4[2] = v6;
    v12 = a2[2];
    if (a3[2] < v12)
    {
      v13 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = a3[2];
      *(_QWORD *)a3 = v13;
      a3[2] = v12;
      v14 = result[2];
      if (a2[2] < v14)
      {
        v15 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)a2;
        result[2] = a2[2];
        *(_QWORD *)a2 = v15;
        a2[2] = v14;
      }
    }
  }
  return result;
}

void sub_223FC3524(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CEA60);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEA60))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.acv.geometry");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CEA58);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CEA60);
  }
  *a1 = qword_2540CEA58;
}

void sub_223FC35C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CEA60);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CEA60);
  _Unwind_Resume(a1);
}

void sub_223FC3618(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x227684CE8](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_223FC39A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va2);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FC39CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FC39E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

double sub_223FC3A04@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>, float64x2_t a4@<Q5>)
{
  double v13;
  double v14;
  _BOOL4 v16;
  double v19;
  int8x16_t v20;
  float64x2_t v21;
  double v22;
  float64x2_t v23;
  float64x2_t v25;
  double v26;
  float64x2_t v27;
  float64x2_t v28;
  double v29;
  double v30;
  double v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v42;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v49;

  _D3 = *(_QWORD *)(a1 + 8);
  __asm { FMLA            D2, D3, V1.D[1] }
  v13 = sqrt(_D2 + *(double *)(a1 + 16) * *(double *)(a1 + 16));
  v14 = a2[1].f64[0];
  _Q2 = *a2;
  if (v13 == 0.0 || fabs(v13) <= 0.00000001)
  {
    v49 = *a2;
    v16 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/Math/src/LinearAlgebra.cpp", 659, (uint64_t)"!Near(T{0}, sourceNorm)", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    _Q2 = v49;
    if (v16)
      goto LABEL_28;
  }
  _Q0 = vmulq_f64(_Q2, _Q2);
  _D1 = _Q2.f64[1];
  __asm { FMLA            D0, D1, V2.D[1] }
  v19 = sqrt(_Q0.f64[0] + v14 * v14);
  if ((v19 == 0.0 || fabs(v19) <= 0.00000001)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/Math/src/LinearAlgebra.cpp", 660, (uint64_t)"!Near(T{0}, targetNorm)", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_28:
    abort();
  }
  if (v13 == 1.0)
  {
    _Q0.f64[0] = *(float64_t *)(a1 + 16);
    v20 = *(int8x16_t *)a1;
    v21 = (float64x2_t)vextq_s8(v20, v20, 8uLL);
  }
  else
  {
    if (v13 <= 1.0)
      v22 = 1.0 - v13;
    else
      v22 = v13 + -1.0;
    _Q0.f64[0] = *(float64_t *)(a1 + 16);
    v20 = *(int8x16_t *)a1;
    v21 = (float64x2_t)vextq_s8(v20, v20, 8uLL);
    if (v22 > 0.00000001)
    {
      v20.i64[1] = *(_QWORD *)&v21.f64[0];
      v23 = vmulq_f64((float64x2_t)v20, (float64x2_t)v20);
      v23.f64[0] = 1.0 / sqrt(v23.f64[0] + v21.f64[0] * v21.f64[0] + _Q0.f64[0] * _Q0.f64[0]);
      v20 = (int8x16_t)vmulq_n_f64((float64x2_t)v20, v23.f64[0]);
      v21 = (float64x2_t)vextq_s8(v20, v20, 8uLL);
      *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vmulq_f64(_Q0, v23);
    }
  }
  if (v19 == 1.0)
  {
    a4.f64[0] = a2[1].f64[0];
    _Q6 = *(int8x16_t *)a2;
    v25 = (float64x2_t)vextq_s8(_Q6, _Q6, 8uLL);
  }
  else
  {
    if (v19 <= 1.0)
      v26 = 1.0 - v19;
    else
      v26 = v19 + -1.0;
    a4.f64[0] = a2[1].f64[0];
    _Q6 = *(int8x16_t *)a2;
    v25 = (float64x2_t)vextq_s8(_Q6, _Q6, 8uLL);
    if (v26 > 0.00000001)
    {
      _Q6.i64[1] = *(_QWORD *)&v25.f64[0];
      v27 = vmulq_f64((float64x2_t)_Q6, (float64x2_t)_Q6);
      v27.f64[0] = 1.0 / sqrt(v27.f64[0] + v25.f64[0] * v25.f64[0] + a4.f64[0] * a4.f64[0]);
      _Q6 = (int8x16_t)vmulq_n_f64((float64x2_t)_Q6, v27.f64[0]);
      v25 = (float64x2_t)vextq_s8(_Q6, _Q6, 8uLL);
      *(_QWORD *)&a4.f64[0] = *(_OWORD *)&vmulq_f64(a4, v27);
    }
  }
  v28 = vmulq_f64((float64x2_t)v20, (float64x2_t)_Q6);
  v29 = v28.f64[0] + v21.f64[0] * v25.f64[0] + _Q0.f64[0] * a4.f64[0];
  if (v29 == -1.0 || ((v30 = v29 + 1.0, v29 <= -1.0) ? (v31 = -1.0 - v29) : (v31 = v29 + 1.0), v31 <= 0.00000001))
  {
    _Q0.i64[0] = 0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_QWORD *)a3 = 0xBFF0000000000000;
    *(_QWORD *)(a3 + 32) = 0xBFF0000000000000;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = 0xBFF0000000000000;
  }
  else
  {
    v32.f64[0] = v21.f64[0];
    v32.f64[1] = _Q0.f64[0];
    *(_QWORD *)&_Q0.f64[1] = v20.i64[0];
    v33.f64[0] = v25.f64[0];
    v33.f64[1] = a4.f64[0];
    *(_QWORD *)&a4.f64[1] = _Q6.i64[0];
    _Q0 = (int64x2_t)vsubq_f64(vmulq_f64(v32, a4), vmulq_f64(_Q0, v33));
    v34 = vsubq_f64(vmulq_f64((float64x2_t)v20, v25), vmulq_f64(v21, (float64x2_t)_Q6));
    v33.f64[0] = -*(double *)&_Q0.i64[1];
    v35.f64[0] = 0.0;
    v35.f64[1] = v34.f64[0];
    v36 = vaddq_f64(v33, (float64x2_t)0);
    v33.f64[1] = -v34.f64[0];
    v28.f64[0] = 1.0 / v30;
    *(_QWORD *)&v37.f64[0] = vdupq_laneq_s64(_Q0, 1).u64[0];
    v38 = (float64x2_t)vextq_s8((int8x16_t)v33, (int8x16_t)0, 8uLL);
    v37.f64[1] = -*(double *)_Q0.i64;
    v39 = vaddq_f64(v35, (float64x2_t)xmmword_2245F5CB0);
    v40 = vaddq_f64((float64x2_t)_Q0, (float64x2_t)0);
    __asm { FMOV            V23.2D, #1.0 }
    v42 = vmlsq_lane_f64(vmlaq_n_f64(vmulq_f64(v35, (float64x2_t)0), v38, v34.f64[0]), v37, *(double *)&_Q0.i64[1], 0);
    _D25 = 0;
    __asm { FMLS            D6, D25, V0.D[1] }
    v44 = vmlaq_n_f64(vmlaq_f64(vmulq_n_f64(v35, -v34.f64[0]), (float64x2_t)0, v38), v37, *(double *)_Q0.i64);
    v34.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_lane_f64(v34.f64[0], (float64x2_t)_Q0, 1), 0.0, *(double *)_Q0.i64), 0.0, *(double *)_Q0.i64);
    v45 = vmlaq_f64(vmlsq_lane_f64(vmulq_laneq_f64(v35, (float64x2_t)_Q0, 1), v38, *(double *)_Q0.i64, 0), (float64x2_t)0, v37);
    __asm { FMLS            D19, D0, V0.D[0] }
    *(double *)_Q0.i64 = _D19 + 0.0;
    *(_QWORD *)(a3 + 16) = *(_OWORD *)&vmlaq_f64(v36, v28, (float64x2_t)_Q6);
    *(float64x2_t *)a3 = vmlaq_n_f64(v39, v42, v28.f64[0]);
    *(_QWORD *)(a3 + 40) = *(_OWORD *)&vmlaq_f64(v40, v28, v34);
    *(float64x2_t *)(a3 + 24) = vmlaq_n_f64(vaddq_f64(v38, (float64x2_t)xmmword_224649980), v44, v28.f64[0]);
    *(_QWORD *)(a3 + 64) = *(_OWORD *)&vmlaq_f64(_Q23, v28, (float64x2_t)_Q0);
    *(float64x2_t *)(a3 + 48) = vmlaq_n_f64(vaddq_f64(v37, (float64x2_t)0), v45, v28.f64[0]);
  }
  return *(double *)_Q0.i64;
}

uint64_t sub_223FC3D74(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_223FC3DDC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223FC3E44(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 2;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223FC3FB0(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_223FC3F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223FC3FB0(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_223FC40BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_223FC4100(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 4;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223FC426C(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_223FC4258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223FC426C(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_223FC4378(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_223FC43BC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FC4424()
{
  return 5;
}

uint64_t sub_223FC442C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_223FC4434@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_223FC4448(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_223FC44CC(_QWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v13 = 0;
  v14 = 0;
  if (a2[1])
    v5 = *a2 == 0;
  else
    v5 = 1;
  v6 = *(_QWORD *)a2;
  if (v5)
    v6 = 0;
  v7 = *a3;
  *(_QWORD *)&v11 = *a1;
  *((_QWORD *)&v11 + 1) = v6;
  v12 = v7;
  if (HIDWORD(v6) * HIDWORD(v7) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2231FDD74(a4, &v13, &v11);
  v8 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_223FC45C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FC45D4(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 4;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2238B69C4(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_223FC472C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FC4740(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FC47A8()
{
  return 28;
}

uint64_t sub_223FC47B0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_223FC47B8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_223FC47D0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_223FC4854(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_223BED35C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_223FC4950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223FC497C(unsigned __int8 *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string v4;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_22319B9BC)(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_22316DD70();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC64B00[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC64AD0[v3])(v5, v2);
  return result;
}

void sub_223FC4A68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FC4A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_22319B964((uint64_t)&a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_223FC4AA4(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_223FC4B4C(_Unwind_Exception *exception_object)
{
  void **v1;
  void **v3;
  void **v4;
  void *v5;

  v3 = (void **)*v1;
  if (*v1)
  {
    v4 = (void **)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_223FC4BA0(uint64_t *a1, __int128 *a2, unsigned int a3)
{
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void *__p[2];
  uint64_t v9;
  __int128 __dst;
  uint64_t v11;
  int v12;

  v12 = -1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __dst = *a2;
    v11 = *((_QWORD *)a2 + 2);
  }
  v9 = v11;
  *(_OWORD *)__p = __dst;
  v5 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = a3;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x20;
  if (v9 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if (v9 >= 0)
    v7 = HIBYTE(v9);
  else
    v7 = (uint64_t)__p[1];
  sub_2231813E8(a1, (uint64_t)v6, v7);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
}

void sub_223FC4C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FC4C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

VTPixelTransferSessionRef *sub_223FC4CB0(VTPixelTransferSessionRef *a1)
{
  VTPixelTransferSessionRef pixelTransferSessionOut;

  pixelTransferSessionOut = 0;
  if (VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], &pixelTransferSessionOut)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/VideoToolbox/src/ImageConvertor.cpp", 36, (uint64_t)"status == noErr", 15, (uint64_t)&unk_2245ACDF3, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *a1 = pixelTransferSessionOut;
  return a1;
}

uint64_t sub_223FC4D34(OpaqueVTPixelTransferSession **a1, uint64_t a2, uint64_t a3)
{
  OpaqueVTPixelTransferSession *v5;
  uint64_t v6;
  __CVBuffer *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __CVBuffer *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_QWORD *)(a2 + 8);
    if (v6)
      goto LABEL_3;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/VideoToolbox/src/ImageConvertor.cpp", 54, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245ACDF3, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = *a1;
    v6 = *(_QWORD *)(a2 + 8);
    if (v6)
    {
LABEL_3:
      v7 = *(__CVBuffer **)v6;
      v8 = *(std::__shared_weak_count **)(v6 + 8);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v12 = *(_QWORD *)(a3 + 8);
      if (v12)
        goto LABEL_10;
LABEL_19:
      v13 = 0;
      goto LABEL_20;
    }
  }
  v7 = 0;
  v12 = *(_QWORD *)(a3 + 8);
  if (!v12)
    goto LABEL_19;
LABEL_10:
  v13 = *(__CVBuffer **)v12;
  v14 = *(std::__shared_weak_count **)(v12 + 8);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
LABEL_20:
  v19 = VTPixelTransferSessionTransferImage(v5, v7, v13);
  if (v19 == -12905)
    return 0x100000000;
  v20 = v19;
  v21 = v19;
  if (v19)
  {
    if (v19 != -12218)
    {
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/VideoToolbox/src/ImageConvertor.cpp", 65, (uint64_t)&unk_2245ACDF3, 0, (uint64_t)"Unknown error in VTPixelTransferSessionTransferImage", 52, (void (*)(void **))sub_22457406C);
      abort();
    }
    v20 = 0x100000000;
    v21 = 1;
  }
  return v21 | v20;
}

BOOL sub_223FC4EF0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = a1[1];
  v3 = a2[1];
  v4 = v2 == v3;
  v5 = v2 > v3;
  if (v4)
    return *a1 < *a2;
  else
    return v5;
}

int8x16_t sub_223FC4F10(uint64_t a1, uint64_t a2)
{
  int8x16_t *v2;
  int8x16_t *v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t result;

  v2 = *(int8x16_t **)(a1 + 64);
  v3 = *(int8x16_t **)(a2 + 64);
  if (v2 == v3)
  {
    result = vextq_s8(v2[1], v2[1], 8uLL);
    v2[1] = result;
  }
  else
  {
    if (v2)
    {
      v4 = 3;
      if (v2[1].i64[0] == a1)
        v4 = 2;
      v2->i64[v4] = a2;
    }
    if (v3)
    {
      v5 = 3;
      if (v3[1].i64[0] == a2)
        v5 = 2;
      v3->i64[v5] = a1;
    }
    *(_QWORD *)(a1 + 64) = v3;
    *(_QWORD *)(a2 + 64) = v2;
  }
  return result;
}

void sub_223FC4F74(uint64_t **a1, uint64_t a2, int a3, char a4)
{
  int v4;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;

  v4 = *(_DWORD *)(a2 + 32);
  if ((v4 & 8) == 0)
  {
    *(_DWORD *)(a2 + 32) = v4 | 8;
    v9 = operator new();
    v10 = v9;
    *(_QWORD *)v9 = a2;
    *(_DWORD *)(v9 + 8) = a3;
    *(_BYTE *)(v9 + 12) = a4;
    v12 = a1[1];
    v11 = (unint64_t)a1[2];
    if ((unint64_t)v12 < v11)
    {
      *v12 = v9;
      v13 = (uint64_t)(v12 + 1);
LABEL_28:
      a1[1] = (uint64_t *)v13;
      return;
    }
    v14 = *a1;
    v15 = (char *)v12 - (char *)*a1;
    v16 = v15 >> 3;
    v17 = (v15 >> 3) + 1;
    if (v17 >> 61)
      sub_223FCCF04();
    v18 = v11 - (_QWORD)v14;
    if (v18 >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        sub_223174E94();
      v20 = (char *)operator new(8 * v19);
      v21 = (uint64_t *)&v20[8 * v16];
      v22 = (uint64_t *)&v20[8 * v19];
      *v21 = v10;
      v13 = (uint64_t)(v21 + 1);
      v23 = (char *)((char *)v12 - (char *)v14);
      if (v12 != v14)
        goto LABEL_13;
    }
    else
    {
      v20 = 0;
      v21 = (uint64_t *)(8 * v16);
      v22 = 0;
      *(_QWORD *)(8 * v16) = v10;
      v13 = 8 * v16 + 8;
      v23 = (char *)((char *)v12 - (char *)v14);
      if (v12 != v14)
      {
LABEL_13:
        v24 = (unint64_t)(v23 - 8);
        if (v24 < 0x78
          || (uint64_t *)((char *)v12 - (v24 & 0xFFFFFFFFFFFFFFF8) - 8) < v21
          && &v20[v15 - (v24 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v12)
        {
          goto LABEL_34;
        }
        v25 = (v24 >> 3) + 1;
        v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = (uint64_t *)((char *)v21 - v26);
        v27 = &v12[v26 / 0xFFFFFFFFFFFFFFF8];
        v28 = v12 - 2;
        v29 = &v20[8 * v16 - 16];
        v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v32 = *((_OWORD *)v28 - 1);
          v31 = *(_OWORD *)v28;
          *((_OWORD *)v28 - 1) = 0uLL;
          *(_OWORD *)v28 = 0uLL;
          *((_OWORD *)v29 - 1) = v32;
          *(_OWORD *)v29 = v31;
          v28 -= 4;
          v29 -= 32;
          v30 -= 4;
        }
        while (v30);
        v12 = v27;
        if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_34:
          do
          {
            v33 = *--v12;
            *v12 = 0;
            *--v21 = v33;
          }
          while (v12 != v14);
        }
        v12 = *a1;
        v34 = a1[1];
        *a1 = v21;
        a1[1] = (uint64_t *)v13;
        a1[2] = v22;
        while (v34 != v12)
        {
          v36 = *--v34;
          v35 = v36;
          *v34 = 0;
          if (v36)
            MEMORY[0x227684CE8](v35, 0x1020C4034E03FFCLL);
        }
        goto LABEL_26;
      }
    }
    *a1 = v21;
    a1[1] = (uint64_t *)v13;
    a1[2] = v22;
LABEL_26:
    if (v12)
      operator delete(v12);
    goto LABEL_28;
  }
}

void sub_223FC5180(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x1020C4034E03FFCLL);
  _Unwind_Resume(a1);
}

void sub_223FC51A4(uint64_t a1, int a2, int a3, char **a4, uint64_t **a5)
{
  char *v5;
  const double *v6;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const double *v16;
  int32x4_t v17;
  int32x4_t v18;
  const double *v19;
  const double *v20;
  const double *v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const double *v29;
  const double *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _BYTE *v61;
  uint64_t *v62;
  char *v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _OWORD *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  float64x2x3_t v75;
  float64x2x3_t v76;
  float64x2x3_t v77;
  float64x2x3_t v78;

  v6 = *(const double **)a1;
  v5 = *(char **)(a1 + 8);
  if (*(char **)a1 != v5)
  {
    v11 = v5 - (char *)v6 - 24;
    if (v11 >= 0xC0)
    {
      v13 = v11 / 0x18 + 1;
      v14 = v13 & 7;
      if ((v13 & 7) == 0)
        v14 = 8;
      v15 = v13 - v14;
      v16 = &v6[3 * v15];
      v17 = 0uLL;
      v18 = 0uLL;
      do
      {
        v19 = v6 + 12;
        v20 = v6;
        v75 = vld3q_f64(v20);
        v20 += 6;
        v76 = vld3q_f64(v20);
        v77 = vld3q_f64(v19);
        v21 = v6 + 18;
        v78 = vld3q_f64(v21);
        v17 = vaddq_s32(v17, vshrn_high_n_s64(vshrn_n_s64(vsubq_s64((int64x2_t)v75.val[1], (int64x2_t)v75.val[0]), 4uLL), vsubq_s64((int64x2_t)v76.val[1], (int64x2_t)v76.val[0]), 4uLL));
        v18 = vaddq_s32(v18, vshrn_high_n_s64(vshrn_n_s64(vsubq_s64((int64x2_t)v77.val[1], (int64x2_t)v77.val[0]), 4uLL), vsubq_s64((int64x2_t)v78.val[1], (int64x2_t)v78.val[0]), 4uLL));
        v6 += 24;
        v15 -= 8;
      }
      while (v15);
      v12 = vaddvq_s32(vaddq_s32(v18, v17));
      v6 = v16;
    }
    else
    {
      v12 = 0;
    }
    do
    {
      v22 = *v6;
      v23 = *((_QWORD *)v6 + 1);
      v6 += 3;
      v12 += (unint64_t)(v23 - *(_QWORD *)&v22) >> 4;
    }
    while (v6 != (const double *)v5);
    if (v12)
    {
      v24 = 40 * v12;
      is_mul_ok(v12, 0x28uLL);
      v25 = operator new[]();
      v26 = v25;
      v27 = 0;
      do
      {
        v28 = v25 + v27;
        *(_QWORD *)(v28 + 16) = 0;
        *(_QWORD *)(v28 + 24) = 0;
        *(_DWORD *)(v28 + 32) = 0;
        v27 += 40;
      }
      while (v24 != v27);
      v29 = *(const double **)a1;
      v30 = *(const double **)(a1 + 8);
      if (*(const double **)a1 != v30)
      {
        v31 = v25;
        do
        {
          v33 = *(_QWORD **)v29;
          v34 = (_QWORD *)*((_QWORD *)v29 + 1);
          if (*(_QWORD **)v29 == v34)
          {
LABEL_15:
            v32 = v31;
            goto LABEL_16;
          }
          v35 = 0;
          v36 = 0;
          *(_QWORD *)(v31 + 24) = 0;
          v37 = v31;
          do
          {
            while (1)
            {
              if (!v36)
                goto LABEL_26;
              if (*v36 != *v33 || v36[1] != v33[1])
                break;
              v32 = v37;
              v33 += 2;
              if (v33 == v34)
                goto LABEL_28;
            }
            v36[2] = v37;
LABEL_26:
            *(_QWORD *)(v37 + 24) = v36;
            if (v33 != (_QWORD *)v37)
              *(_OWORD *)v37 = *(_OWORD *)v33;
            *(_DWORD *)(v37 + 32) = 0;
            v32 = v37 + 40;
            ++v35;
            v36 = (_QWORD *)v37;
            v37 += 40;
            v33 += 2;
          }
          while (v33 != v34);
LABEL_28:
          if (!v36[3])
            goto LABEL_15;
          if ((a3 & 1) != 0)
          {
            v36[2] = v31;
            *(_QWORD *)(v31 + 24) = v36;
            if (v35 > 1)
            {
              v38 = v31;
              while (1)
              {
                v38 = *(_QWORD *)(v38 + 16);
                if (v38 == v31)
                  break;
                v39 = *(_QWORD *)(v38 + 8);
                v40 = *(_QWORD *)(v31 + 8);
                if (v39 != v40)
                {
                  if (v39 > v40)
                  {
                    v41 = 0;
                    *(_DWORD *)(v31 + 32) = 5;
                    v42 = *(_QWORD *)(v31 + 16);
                    if (v42 != v31)
                      goto LABEL_47;
                    goto LABEL_55;
                  }
                  break;
                }
              }
              v41 = 1;
              *(_DWORD *)(v31 + 32) = 1;
              sub_223FC4F74(a5, v31, a2, 1);
              v42 = *(_QWORD *)(v31 + 16);
              if (v42 == v31)
                goto LABEL_55;
              goto LABEL_47;
            }
          }
          else
          {
            if (*v36 == *(_QWORD *)v31 && v36[1] == *(_QWORD *)(v31 + 8))
              v36 = (_QWORD *)v36[3];
            v36[2] = v31;
            *(_QWORD *)(v31 + 24) = v36;
            if (v35 >= 3 && v36 != (_QWORD *)v31)
            {
              v43 = *(_QWORD *)(v31 + 8);
              while (1)
              {
                v44 = v36[1];
                if (v44 != v43)
                  break;
                v36 = (_QWORD *)v36[3];
                if (v36 == (_QWORD *)v31)
                  goto LABEL_16;
              }
              v41 = v44 > v43;
              v42 = *(_QWORD *)(v31 + 16);
              if (v42 == v31)
              {
LABEL_55:
                v46 = v31;
                v45 = v41;
              }
              else
              {
LABEL_47:
                v45 = v41;
                v46 = v31;
                do
                {
                  v47 = v46;
                  v46 = v42;
                  v48 = *(_QWORD *)(v42 + 8);
                  v49 = *(_QWORD *)(v47 + 8);
                  if (v48 > v49 && (v45 & 1) != 0)
                  {
                    v45 = 0;
                    *(_DWORD *)(v47 + 32) |= 4u;
                  }
                  else if (!((v48 >= v49) | v45 & 1))
                  {
                    sub_223FC4F74(a5, v47, a2, a3);
                    v45 = 1;
                  }
                  v42 = *(_QWORD *)(v46 + 16);
                }
                while (v42 != v31);
              }
              if (a3)
              {
                v50 = *(_DWORD *)(v46 + 32);
                *(_DWORD *)(v46 + 32) = v50 | 2;
                if ((v45 & 1) == 0)
                {
                  sub_223FC4F74(a5, v46, a2, 1);
                  goto LABEL_16;
                }
                v51 = v50 | 6;
              }
              else
              {
                if (v41 == (v45 & 1))
                  goto LABEL_16;
                if (v41)
                {
                  sub_223FC4F74(a5, v46, a2, 0);
                  goto LABEL_16;
                }
                v51 = *(_DWORD *)(v46 + 32) | 4;
              }
              *(_DWORD *)(v46 + 32) = v51;
            }
          }
LABEL_16:
          v29 += 3;
          v31 = v32;
        }
        while (v29 != v30);
      }
      v53 = a4[1];
      v52 = (unint64_t)a4[2];
      if ((unint64_t)v53 < v52)
      {
        *(_QWORD *)v53 = v26;
        v54 = (uint64_t)(v53 + 8);
LABEL_87:
        a4[1] = (char *)v54;
        return;
      }
      v55 = *a4;
      v56 = v53 - *a4;
      v57 = v56 >> 3;
      v58 = (v56 >> 3) + 1;
      if (v58 >> 61)
        sub_223FCCF04();
      v59 = v52 - (_QWORD)v55;
      if (v59 >> 2 > v58)
        v58 = v59 >> 2;
      if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
        v60 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v60 = v58;
      if (v60)
      {
        if (v60 >> 61)
          sub_223174E94();
        v61 = operator new(8 * v60);
        v62 = (uint64_t *)&v61[8 * v57];
        v63 = &v61[8 * v60];
        *v62 = v26;
        v54 = (uint64_t)(v62 + 1);
        v64 = (char *)(v53 - v55);
        if (v53 == v55)
          goto LABEL_85;
      }
      else
      {
        v61 = 0;
        v62 = (uint64_t *)(8 * v57);
        v63 = 0;
        *(_QWORD *)(8 * v57) = v26;
        v54 = 8 * v57 + 8;
        v64 = (char *)(v53 - v55);
        if (v53 == v55)
        {
LABEL_85:
          *a4 = (char *)v62;
          a4[1] = (char *)v54;
          a4[2] = v63;
          if (v53)
            operator delete(v53);
          goto LABEL_87;
        }
      }
      v65 = (unint64_t)(v64 - 8);
      if (v65 < 0x58)
        goto LABEL_93;
      if ((unint64_t)(v53 - &v61[v56]) < 0x20)
        goto LABEL_93;
      v66 = (v65 >> 3) + 1;
      v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
      v68 = &v53[-v67];
      v62 = (uint64_t *)((char *)v62 - v67);
      v69 = &v61[8 * v57 - 16];
      v70 = v53 - 16;
      v71 = v66 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v72 = *(_OWORD *)v70;
        *(v69 - 1) = *((_OWORD *)v70 - 1);
        *v69 = v72;
        v69 -= 2;
        v70 -= 32;
        v71 -= 4;
      }
      while (v71);
      v53 = v68;
      if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_93:
        do
        {
          v73 = *((_QWORD *)v53 - 1);
          v53 -= 8;
          *--v62 = v73;
        }
        while (v53 != v55);
      }
      v53 = *a4;
      goto LABEL_85;
    }
  }
}

_QWORD *sub_223FC56E0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = &off_24EC64D18;
  sub_223FC57CC((uint64_t)a1);
  v2 = (void *)a1[29];
  if (v2)
  {
    a1[30] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[24];
  if (v3)
  {
    a1[25] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[21];
  if (v4)
  {
    a1[22] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[18];
  if (v5)
  {
    a1[19] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[14];
  if (v6)
  {
    a1[15] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[11];
  if (v7)
  {
    a1[12] = v7;
    operator delete(v7);
  }
  v8 = (_QWORD *)a1[7];
  if (v8)
  {
    v9 = (_QWORD *)a1[8];
    v10 = (void *)a1[7];
    if (v9 != v8)
    {
      do
      {
        v12 = *--v9;
        v11 = v12;
        *v9 = 0;
        if (v12)
          MEMORY[0x227684CE8](v11, 0x1020C4034E03FFCLL);
      }
      while (v9 != v8);
      v10 = (void *)a1[7];
    }
    a1[8] = v8;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_223FC57CC(uint64_t a1)
{
  uint64_t i;
  void *v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;

  for (i = *(_QWORD *)(a1 + 40); i; i = *(_QWORD *)(a1 + 40))
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(i + 80);
    MEMORY[0x227684CE8]();
  }
  v3 = *(void **)(a1 + 112);
  if (v3)
  {
    *(_QWORD *)(a1 + 120) = v3;
    operator delete(v3);
  }
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a1 + 144);
  result = sub_223FC5908(a1);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
  v5 = *(_QWORD **)(a1 + 56);
  v6 = *(_QWORD **)(a1 + 64);
  while (v6 != v5)
  {
    v7 = *--v6;
    result = v7;
    *v6 = 0;
    if (v7)
      result = MEMORY[0x227684CE8](result, 0x1020C4034E03FFCLL);
  }
  *(_QWORD *)(a1 + 64) = v5;
  v8 = *(uint64_t **)(a1 + 88);
  v9 = *(uint64_t **)(a1 + 96);
  if (v8 != v9)
  {
    do
    {
      result = *v8;
      if (*v8)
        result = MEMORY[0x227684CB8](result, 0x1020C804DE2C876);
      ++v8;
    }
    while (v8 != v9);
    v8 = *(uint64_t **)(a1 + 88);
  }
  *(_QWORD *)(a1 + 96) = v8;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 56);
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  return result;
}

void sub_223FC58E4(_QWORD *a1)
{
  sub_223FC56E0(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FC5908(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;

  v1 = *(_QWORD *)(result + 232);
  v2 = *(_QWORD *)(result + 240);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD **)v1;
      v5 = *(_QWORD *)(*(_QWORD *)v1 + 32);
      if (v5)
      {
        *(_QWORD *)(*(_QWORD *)(v5 + 24) + 16) = 0;
        do
        {
          v6 = *(_QWORD *)(v5 + 16);
          MEMORY[0x227684CE8]();
          v5 = v6;
        }
        while (v6);
        v4[4] = 0;
      }
      v7 = v4[6];
      if (v7)
      {
        v8 = *(void **)v7;
        if (*(_QWORD *)v7)
        {
          *(_QWORD *)(v7 + 8) = v8;
          operator delete(v8);
        }
        MEMORY[0x227684CE8](v7, 0x80C40D6874129);
      }
      v9 = (void *)v4[12];
      if (v9)
      {
        v4[13] = v9;
        operator delete(v9);
      }
      result = MEMORY[0x227684CE8](v4, 0x1020C40358C0D7FLL);
      v1 += 8;
    }
    while (v1 != v2);
    v10 = *(_QWORD *)(v3 + 232);
    if (*(_QWORD *)(v3 + 240) != v10)
      *(_QWORD *)(v3 + 240) = v10;
  }
  return result;
}

void sub_223FC59F4(uint64_t a1)
{
  char *v2;
  char *v3;
  const std::nothrow_t *v4;
  unint64_t v5;
  char **v6;
  BOOL v7;
  char **v8;
  uint64_t i;
  uint64_t v10;
  char v11;
  uint64_t v12;

  if (!*(_BYTE *)(a1 + 32))
  {
    v2 = *(char **)(a1 + 56);
    v3 = *(char **)(a1 + 64);
    if (v3 - v2 < 1)
    {
LABEL_6:
      v8 = 0;
      v5 = 0;
    }
    else
    {
      v4 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
      v5 = (v3 - v2) >> 3;
      while (1)
      {
        v6 = (char **)operator new(8 * v5, v4);
        if (v6)
          break;
        v7 = v5 > 1;
        v5 >>= 1;
        if (!v7)
          goto LABEL_6;
      }
      v8 = v6;
    }
    sub_223FCECA8(v2, v3, (uint64_t)&v11, (v3 - v2) >> 3, v8, v5);
    if (v8)
      operator delete(v8);
    *(_BYTE *)(a1 + 32) = 1;
  }
  for (i = *(_QWORD *)(a1 + 64); i != *(_QWORD *)(a1 + 56); i -= 8)
  {
    v10 = *(_QWORD *)(i - 8);
    v12 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    sub_223FCCF18(a1 + 112, &v12);
  }
  *(_QWORD *)(a1 + 80) = i;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 225) = 1;
}

void sub_223FC5B00(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223FC5B18(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BOOL8 v19;
  int v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD *v24;
  uint64_t v25;

  v2 = a2[4];
  v3 = *(_QWORD *)(a1 + 32);
  if (v2 != v3)
    return v2 > v3;
  v5 = *a2;
  v4 = a2[1];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v9 = a2[2];
  v8 = a2[3];
  v10 = (double)(v8 - v4);
  v11 = (double)(v9 - *a2);
  v12 = (double)(*a2 - v6) * v10 - (double)(v4 - v7) * v11;
  if (v12 != 0.0)
    return v12 < 0.0;
  v14 = *(_QWORD *)(a1 + 112);
  if ((*(_BYTE *)(v14 + 32) & 4) != 0 || v7 <= v8)
  {
    v16 = a2[14];
    if ((*(_BYTE *)(v16 + 32) & 4) != 0 || v8 <= v7)
    {
      v18 = *((unsigned __int8 *)a2 + 128);
      v19 = *((_BYTE *)a2 + 128) != 0;
      if (*(_QWORD *)(a1 + 8) == v4
        && *(_QWORD *)(**(_QWORD **)(a1 + 120) + 8) == v4
        && *(unsigned __int8 *)(a1 + 128) == v18)
      {
        v21 = *(_DWORD *)(a1 + 48);
        if (v21 < 1)
          v22 = *(_QWORD *)(v14 + 16) + 16;
        else
          v22 = *(_QWORD *)(v14 + 24) + 24;
        if ((double)(uint64_t)(*(_QWORD *)a1 - **(_QWORD **)v22) * (double)(v7 - v4)
           - (double)(v4 - *(_QWORD *)(*(_QWORD *)v22 + 8)) * (double)(v6 - *(_QWORD *)a1) == 0.0)
          return 1;
        if (v21 < 1)
          v23 = (_QWORD **)(*(_QWORD *)(v14 + 16) + 16);
        else
          v23 = (_QWORD **)(*(_QWORD *)(v14 + 24) + 24);
        v24 = *v23;
        if (*((int *)a2 + 12) < 1)
          v25 = *(_QWORD *)(v16 + 16) + 16;
        else
          v25 = *(_QWORD *)(v16 + 24) + 24;
        return v18 == (double)(v5 - *v24) * (double)(*(_QWORD *)(*(_QWORD *)v25 + 8) - v4)
                    - (double)(v4 - v24[1]) * (double)(**(_QWORD **)v25 - v5) > 0.0;
      }
      return v19;
    }
    else
    {
      v17 = 24;
      if (*((int *)a2 + 12) > 0)
        v17 = 16;
      return v11 * (double)(*(_QWORD *)(*(_QWORD *)(v16 + v17) + 8) - v8)
           - v10 * (double)(**(_QWORD **)(v16 + v17) - v9) >= 0.0;
    }
  }
  else
  {
    v15 = 24;
    if (*(int *)(a1 + 48) > 0)
      v15 = 16;
    return (double)(v6 - v5) * (double)(*(_QWORD *)(*(_QWORD *)(v14 + v15) + 8) - v7)
         - (double)(v7 - v4) * (double)(**(_QWORD **)(v14 + v15) - v6) <= 0.0;
  }
}

void sub_223FC5D50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  _OWORD **v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __n128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _OWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  int32x2_t v53;
  int v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;

  v2 = *(_QWORD *)(a1 + 80);
  if (v2 != *(_QWORD *)(a1 + 64))
  {
    v5 = (uint64_t *)(a1 + 40);
    v6 = a1 + 112;
    while (1)
    {
      if (*(_QWORD *)(**(_QWORD **)v2 + 8) != a2)
        return;
      *(_QWORD *)(a1 + 80) = v2 + 8;
      v7 = *(_OWORD ***)v2;
      v8 = *(_DWORD *)(**(_QWORD **)v2 + 32);
      if ((v8 & 1) == 0)
        break;
      v13 = 0;
      v10 = 0;
      if ((v8 & 2) != 0)
      {
        MEMORY[0x80] = 1;
        v14 = *v5;
        if (!*v5)
          goto LABEL_44;
        goto LABEL_10;
      }
LABEL_30:
      v24 = operator new();
      *(_QWORD *)(v24 + 128) = 0;
      *(_OWORD *)(v24 + 32) = 0u;
      *(_OWORD *)(v24 + 48) = 0u;
      *(_OWORD *)v24 = 0u;
      *(_OWORD *)(v24 + 16) = 0u;
      *(_OWORD *)(v24 + 64) = 0u;
      *(_OWORD *)(v24 + 80) = 0u;
      *(_OWORD *)(v24 + 96) = 0u;
      *(_OWORD *)(v24 + 112) = 0u;
      *(_DWORD *)(v24 + 48) = 1;
      *(_BYTE *)(v24 + 128) = 0;
      if ((_OWORD *)v24 == *v7)
      {
        v25 = 0;
        v26 = (_OWORD *)v24;
      }
      else
      {
        *(_OWORD *)v24 = **v7;
        v25 = *(_QWORD *)v24;
        v26 = *v7;
      }
      *(_QWORD *)(v24 + 32) = v25;
      *(_DWORD *)(v24 + 48) = 1;
      v27 = (_OWORD *)*((_QWORD *)v26 + 2);
      *(_QWORD *)(v24 + 112) = v27;
      v28 = (_QWORD *)(v24 + 16);
      if ((_OWORD *)(v24 + 16) == v27)
      {
        v29 = 0;
        *(_QWORD *)(v24 + 120) = v7;
        v30 = *(_QWORD *)(v24 + 8);
        v31 = -v30;
        if (v30)
        {
LABEL_40:
          v32 = (double)(*v28 - v25) / (double)v31;
          *(double *)(v24 + 40) = v32;
          if (!v13)
            goto LABEL_43;
          goto LABEL_41;
        }
      }
      else
      {
        *(_OWORD *)v28 = *v27;
        v29 = *(_QWORD *)(v24 + 24);
        *(_QWORD *)(v24 + 120) = v7;
        v30 = *(_QWORD *)(v24 + 8);
        v31 = v29 - v30;
        if (v29 != v30)
          goto LABEL_40;
      }
      v32 = 1.79769313e308;
      if (*v28 > v25)
        v32 = -1.79769313e308;
      *(double *)(v24 + 40) = v32;
      if (!v13)
      {
LABEL_43:
        v10 = v24;
        *(_BYTE *)(v24 + 128) = 1;
        v14 = *v5;
        if (!*v5)
          goto LABEL_44;
        goto LABEL_10;
      }
LABEL_41:
      if (v13[1].n128_u64[1] == v13->n128_u64[1])
      {
        if (v13[2].n128_f64[1] == -1.79769313e308)
          goto LABEL_43;
      }
      else if (v29 == v30)
      {
        if (v32 == 1.79769313e308)
          goto LABEL_43;
      }
      else if (v13[2].n128_f64[1] < v32)
      {
        goto LABEL_43;
      }
      v10 = (uint64_t)v13;
      v13 = (__n128 *)v24;
      *(_BYTE *)(v10 + 128) = 1;
      v14 = *v5;
      if (!*v5)
      {
LABEL_44:
        *(_QWORD *)(v10 + 72) = 0;
        *(_QWORD *)(v10 + 80) = 0;
        v16 = v5;
        goto LABEL_45;
      }
LABEL_10:
      if (!sub_223FC5B18(v14, (uint64_t *)v10))
      {
        *(_QWORD *)(v10 + 72) = 0;
        *(_QWORD *)(v10 + 80) = v14;
        v16 = v5;
        *(_QWORD *)(v14 + 72) = v10;
LABEL_45:
        *v16 = v10;
        goto LABEL_46;
      }
      while (1)
      {
        v15 = v14;
        v14 = *(_QWORD *)(v14 + 80);
        if (!v14)
          break;
        if ((sub_223FC5B18(v14, (uint64_t *)v10) & 1) == 0)
        {
          if (*(_DWORD *)(v15 + 132) == 2)
            v15 = v14;
          *(_QWORD *)(v10 + 80) = *(_QWORD *)(v15 + 80);
          v16 = (uint64_t *)(v15 + 80);
          v17 = *(_QWORD *)(v15 + 80);
          if (v17)
LABEL_16:
            *(_QWORD *)(v17 + 72) = v10;
LABEL_17:
          *(_QWORD *)(v10 + 72) = v15;
          goto LABEL_45;
        }
      }
      if (*(_DWORD *)(v15 + 132) != 2)
      {
        *(_QWORD *)(v10 + 80) = 0;
        v16 = (uint64_t *)(v15 + 80);
        v17 = *(_QWORD *)(v15 + 80);
        if (v17)
          goto LABEL_16;
        goto LABEL_17;
      }
LABEL_46:
      v33 = *(_QWORD *)(v10 + 120);
      if (!*(_BYTE *)(v33 + 12))
      {
        v39 = *(_DWORD *)(v33 + 8);
        v40 = *(_QWORD *)(v10 + 72);
        if (v40)
        {
          while (1)
          {
            v45 = *(_QWORD *)(v40 + 120);
            if (*(_DWORD *)(v45 + 8) == v39 && !*(_BYTE *)(v45 + 12))
              break;
            v40 = *(_QWORD *)(v40 + 72);
            if (!v40)
              goto LABEL_56;
          }
          v42 = *(_DWORD *)(a1 + 12);
          if (!v42)
          {
            v41 = *(_DWORD *)(v10 + 48);
            *(_DWORD *)(v10 + 52) = v41;
            *(_DWORD *)(v10 + 56) = *(_DWORD *)(v40 + 56);
            v43 = *(_QWORD *)(v40 + 80);
            goto LABEL_104;
          }
          v47 = *(_DWORD *)(v40 + 48);
          v46 = *(_DWORD *)(v40 + 52);
          if (v47 * v46 < 0)
          {
            if (v46 >= 0)
              v58 = *(_DWORD *)(v40 + 52);
            else
              v58 = -v46;
            if (*(_DWORD *)(v10 + 48) * v47 >= 0)
              v59 = *(_DWORD *)(v10 + 48);
            else
              v59 = 0;
            v41 = v59 + v46;
            if (v58 < 2)
              v41 = *(_DWORD *)(v10 + 48);
            *(_DWORD *)(v10 + 52) = v41;
            *(_DWORD *)(v10 + 56) = *(_DWORD *)(v40 + 56);
            v43 = *(_QWORD *)(v40 + 80);
            if (v43 != v10)
            {
LABEL_58:
              v44 = *(_DWORD *)(v10 + 56);
              do
              {
                v49 = *(_QWORD *)(v43 + 120);
                if (*(_DWORD *)(v49 + 8) != v39 && !*(_BYTE *)(v49 + 12))
                {
                  v44 += *(_DWORD *)(v43 + 48);
                  *(_DWORD *)(v10 + 56) = v44;
                }
                v43 = *(_QWORD *)(v43 + 80);
              }
              while (v43 != v10);
            }
          }
          else
          {
            if (*(_DWORD *)(v10 + 48) * v47 >= 0)
              v48 = *(_DWORD *)(v10 + 48);
            else
              v48 = 0;
            v41 = v48 + v46;
            *(_DWORD *)(v10 + 52) = v41;
            *(_DWORD *)(v10 + 56) = *(_DWORD *)(v40 + 56);
            v43 = *(_QWORD *)(v40 + 80);
            if (v43 != v10)
              goto LABEL_58;
          }
LABEL_121:
          if (v42 == 3)
          {
            if (v41 == -1)
            {
              v42 = 3;
              v57 = *(_DWORD *)(a1 + 8) - 1;
              if (v57 <= 3)
                goto LABEL_129;
            }
          }
          else if (v42 == 2)
          {
            if (v41 == 1)
            {
              v42 = 2;
              v57 = *(_DWORD *)(a1 + 8) - 1;
              if (v57 <= 3)
                goto LABEL_129;
            }
          }
          else if (v42 != 1 || (v41 >= 0 ? (v42 = v41) : (v42 = -v41), v42 == 1))
          {
            v57 = *(_DWORD *)(a1 + 8) - 1;
LABEL_129:
            switch(v57)
            {
              case 0u:
                if (v42 == 3)
                {
                  v39 = *(_DWORD *)(v10 + 56) >> 31;
                  if (v13)
                    goto LABEL_159;
                }
                else if (v42 == 2)
                {
                  LOBYTE(v39) = *(_DWORD *)(v10 + 56) > 0;
                  if (v13)
                    goto LABEL_159;
                }
                else
                {
                  LOBYTE(v39) = *(_DWORD *)(v10 + 56) != 0;
                  if (v13)
                    goto LABEL_159;
                }
                break;
              case 1u:
                if (v42 == 3)
                {
                  LOBYTE(v39) = *(_DWORD *)(v10 + 56) >= 0;
                  if (v13)
                    goto LABEL_159;
                }
                else
                {
                  if (v42 != 2)
                  {
                    LOBYTE(v39) = *(_DWORD *)(v10 + 56) == 0;
                    goto LABEL_158;
                  }
                  LOBYTE(v39) = *(_DWORD *)(v10 + 56) < 1;
                  if (v13)
                    goto LABEL_159;
                }
                break;
              case 2u:
                if (v42 == 3)
                {
                  LOBYTE(v39) = (v39 != 0) ^ (*(_DWORD *)(v10 + 56) >= 0);
                  if (v13)
                    goto LABEL_159;
                }
                else if (v42 == 2)
                {
                  LOBYTE(v39) = (v39 != 0) ^ (*(_DWORD *)(v10 + 56) < 1);
                  if (v13)
                    goto LABEL_159;
                }
                else
                {
                  LOBYTE(v39) = (v39 != 0) ^ (*(_DWORD *)(v10 + 56) == 0);
                  if (v13)
                    goto LABEL_159;
                }
                break;
              case 3u:
                if (!v13)
                  goto LABEL_182;
                LOBYTE(v39) = 1;
                goto LABEL_159;
              default:
                goto LABEL_139;
            }
LABEL_181:
            if ((v39 & 1) != 0)
            {
LABEL_182:
              v65 = sub_223FC73F0((_QWORD *)a1);
              v66 = v65;
              *(_BYTE *)(v65 + 120) = 1;
              v67 = *(_DWORD *)(v10 + 48);
              v68 = v67 <= 0;
              if (v67 <= 0)
                v69 = 0;
              else
                v69 = v10;
              if (v68)
                v70 = v10;
              else
                v70 = 0;
              *(_QWORD *)(v65 + 16) = v69;
              *(_QWORD *)(v65 + 24) = v70;
              *(_QWORD *)(v10 + 64) = v65;
              v71 = operator new();
              *(_OWORD *)v71 = *(_OWORD *)v10;
              *(_QWORD *)(v71 + 32) = v66;
              *(_QWORD *)(v71 + 40) = 0;
              *(_QWORD *)(v71 + 16) = v71;
              *(_QWORD *)(v71 + 24) = v71;
              *(_QWORD *)(v66 + 32) = v71;
            }
            v62 = *(_QWORD *)(v10 + 24);
            if (v62 == *(_QWORD *)(v10 + 8))
              goto LABEL_190;
            goto LABEL_3;
          }
        }
        else
        {
LABEL_56:
          v41 = *(_DWORD *)(v10 + 48);
          *(_DWORD *)(v10 + 52) = v41;
          v42 = *(_DWORD *)(a1 + 12);
          v43 = *(_QWORD *)(a1 + 40);
          if (v42)
          {
            if (v43 != v10)
              goto LABEL_58;
            goto LABEL_121;
          }
LABEL_104:
          if (v43 != v10)
          {
            v55 = *(_DWORD *)(v10 + 56);
            do
            {
              v56 = *(_QWORD *)(v43 + 120);
              if (*(_DWORD *)(v56 + 8) != v39 && !*(_BYTE *)(v56 + 12))
              {
                v55 = v55 == 0;
                *(_DWORD *)(v10 + 56) = v55;
              }
              v43 = *(_QWORD *)(v43 + 80);
            }
            while (v43 != v10);
          }
          v42 = 0;
          v57 = *(_DWORD *)(a1 + 8) - 1;
          if (v57 <= 3)
            goto LABEL_129;
        }
LABEL_139:
        LOBYTE(v39) = 0;
        if (!v13)
          goto LABEL_181;
        goto LABEL_159;
      }
      v34 = *(_QWORD *)(a1 + 40);
      v35 = *(_DWORD *)(a1 + 12);
      if (v35)
      {
        if (v34 != v10)
        {
          v36 = *(_DWORD *)(v10 + 52);
          v37 = *(_DWORD *)(v10 + 56);
          do
          {
            v38 = *(_QWORD *)(v34 + 120);
            if (*(_DWORD *)(v38 + 8) == 1)
            {
              v37 += *(_DWORD *)(v34 + 48);
              *(_DWORD *)(v10 + 56) = v37;
            }
            else if (!*(_BYTE *)(v38 + 12))
            {
              v36 += *(_DWORD *)(v34 + 48);
              *(_DWORD *)(v10 + 52) = v36;
            }
            v34 = *(_QWORD *)(v34 + 80);
          }
          while (v34 != v10);
        }
      }
      else
      {
        if (v34 == v10)
        {
          v51 = 0;
          v50 = 0;
        }
        else
        {
          v50 = 0;
          v51 = 0;
          do
          {
            while (1)
            {
              v52 = *(_QWORD *)(v34 + 120);
              if (*(_DWORD *)(v52 + 8) != 1)
                break;
              ++v50;
              v34 = *(_QWORD *)(v34 + 80);
              if (v34 == v10)
                goto LABEL_88;
            }
            if (!*(_BYTE *)(v52 + 12))
              ++v51;
            v34 = *(_QWORD *)(v34 + 80);
          }
          while (v34 != v10);
        }
LABEL_88:
        *(_DWORD *)(v10 + 52) = v51 & 1;
        *(_DWORD *)(v10 + 56) = v50 & 1;
      }
      if (v35 == 3)
      {
        v53 = vcltz_s32(*(int32x2_t *)(v10 + 52));
        v41 = *(_QWORD *)(v10 + 52);
        v54 = *(_DWORD *)(a1 + 8);
        LOBYTE(v39) = v53.i8[4];
        if (v54 == 1)
          goto LABEL_158;
      }
      else if (v35 == 2)
      {
        v53 = vcgtz_s32(*(int32x2_t *)(v10 + 52));
        v41 = *(_QWORD *)(v10 + 52);
        v54 = *(_DWORD *)(a1 + 8);
        LOBYTE(v39) = v53.i8[4];
        if (v54 == 1)
          goto LABEL_158;
      }
      else
      {
        v53 = vtst_s32(*(int32x2_t *)(v10 + 52), *(int32x2_t *)(v10 + 52));
        v41 = *(_QWORD *)(v10 + 52);
        v54 = *(_DWORD *)(a1 + 8);
        LOBYTE(v39) = v53.i8[4];
        if (v54 == 1)
        {
LABEL_158:
          if (!v13)
            goto LABEL_181;
          goto LABEL_159;
        }
      }
      if (v54 == 2)
        LOBYTE(v39) = v53.i8[0] | v39;
      LOBYTE(v39) = v39 ^ 1;
      if (!v13)
        goto LABEL_181;
LABEL_159:
      v13[8].n128_u8[0] = 0;
      v13[3].n128_u32[1] = v41;
      v13[3].n128_u32[2] = *(_DWORD *)(v10 + 56);
      v60 = *(_QWORD *)(v10 + 80);
      v13[5].n128_u64[0] = v60;
      if (v60)
        *(_QWORD *)(v60 + 72) = v13;
      v13[4].n128_u64[1] = v10;
      *(_QWORD *)(v10 + 80) = v13;
      if ((v39 & 1) != 0)
      {
        sub_223FC6750(a1, v10, (uint64_t)v13, (__n128 *)v10, 1);
        if (*(_QWORD *)(v10 + 24) != *(_QWORD *)(v10 + 8))
          sub_223FC688C(a1, (_QWORD *)v10, (__n128 *)v10, 0);
      }
      v61 = v13[5].n128_i64[0];
      while (v61)
      {
        if (!sub_223FC5B18(v61, (uint64_t *)v13))
          break;
        sub_223FC6A28(a1, (uint64_t)v13, v61, v13);
        v63 = v13[5].n128_i64[0];
        v61 = *(_QWORD *)(v63 + 80);
        if (v61)
          *(_QWORD *)(v61 + 72) = v13;
        v64 = v13[4].n128_u64[1];
        if (v64)
          *(_QWORD *)(v64 + 80) = v63;
        *(_QWORD *)(v63 + 72) = v64;
        *(_QWORD *)(v63 + 80) = v13;
        v13[4].n128_u64[1] = v63;
        v13[5].n128_u64[0] = v61;
        if (!*(_QWORD *)(v63 + 72))
          *v5 = v63;
      }
      if (v13[1].n128_u64[1] == v13->n128_u64[1])
      {
        v13[6].n128_u64[0] = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v13;
        v62 = *(_QWORD *)(v10 + 24);
        if (v62 != *(_QWORD *)(v10 + 8))
          goto LABEL_3;
LABEL_190:
        *(_QWORD *)(v10 + 96) = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v10;
        v2 = *(_QWORD *)(a1 + 80);
        if (v2 == *(_QWORD *)(a1 + 64))
          return;
      }
      else
      {
        sub_223FC71D0(a1, (uint64_t)v13, v13, 0);
        v72 = v13[1].n128_u64[1];
        sub_223FCCF18(v6, &v72);
        v62 = *(_QWORD *)(v10 + 24);
        if (v62 == *(_QWORD *)(v10 + 8))
          goto LABEL_190;
LABEL_3:
        v72 = v62;
        sub_223FCCF18(v6, &v72);
        v2 = *(_QWORD *)(a1 + 80);
        if (v2 == *(_QWORD *)(a1 + 64))
          return;
      }
    }
    v9 = operator new();
    v10 = v9;
    *(_QWORD *)(v9 + 128) = 0;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    *(_OWORD *)(v9 + 80) = 0u;
    *(_OWORD *)(v9 + 96) = 0u;
    *(_OWORD *)(v9 + 112) = 0u;
    *(_DWORD *)(v9 + 48) = 1;
    *(_BYTE *)(v9 + 128) = 0;
    if ((_OWORD *)v9 == *v7)
    {
      v11 = 0;
      v12 = (_OWORD *)v9;
    }
    else
    {
      *(_OWORD *)v9 = **v7;
      v11 = *(_QWORD *)v9;
      v12 = *v7;
    }
    *(_QWORD *)(v9 + 32) = v11;
    *(_DWORD *)(v9 + 48) = -1;
    v18 = (_OWORD *)*((_QWORD *)v12 + 3);
    *(_QWORD *)(v9 + 112) = v18;
    v19 = (_QWORD *)(v9 + 16);
    if ((_OWORD *)(v9 + 16) == v18)
    {
      *(_QWORD *)(v9 + 120) = v7;
      v23 = *(_QWORD *)(v9 + 8);
      v21 = -v23;
      if (!v23)
      {
LABEL_22:
        v22 = 1.79769313e308;
        if (*v19 > v11)
          v22 = -1.79769313e308;
        *(double *)(v9 + 40) = v22;
        if (((*v7)[2] & 2) != 0)
        {
LABEL_25:
          v13 = 0;
          *(_BYTE *)(v9 + 128) = 1;
          v14 = *v5;
          if (!*v5)
            goto LABEL_44;
          goto LABEL_10;
        }
        goto LABEL_29;
      }
    }
    else
    {
      *(_OWORD *)v19 = *v18;
      v20 = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v9 + 120) = v7;
      v21 = v20 - *(_QWORD *)(v9 + 8);
      if (!v21)
        goto LABEL_22;
    }
    *(double *)(v9 + 40) = (double)(*v19 - v11) / (double)v21;
    if (((*v7)[2] & 2) != 0)
      goto LABEL_25;
LABEL_29:
    v13 = (__n128 *)v9;
    goto LABEL_30;
  }
}

__n128 sub_223FC6750(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __n128 result;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  BOOL v18;

  v10 = sub_223FC73F0((_QWORD *)a1);
  v11 = v10;
  *(_QWORD *)(a2 + 64) = v10;
  *(_QWORD *)(a3 + 64) = v10;
  if (!*(_BYTE *)(*(_QWORD *)(a2 + 120) + 12))
  {
    v12 = *(_QWORD **)(a2 + 72);
    if (v12)
    {
      while (1)
      {
        if (!*(_BYTE *)(v12[15] + 12))
        {
          v15 = v12[8];
          if (v15)
            break;
        }
        v12 = (_QWORD *)v12[9];
        if (!v12)
          goto LABEL_5;
      }
      if (*(_BYTE *)(a1 + 33))
      {
        for (i = *(_QWORD *)(v15 + 8); i; *(_QWORD *)(v15 + 8) = i)
        {
          if (*(_QWORD *)(i + 32))
            break;
          i = *(_QWORD *)(i + 8);
        }
        if (v15 == v10)
          goto LABEL_23;
        v17 = v15;
        do
        {
          v17 = *(_QWORD *)(v17 + 8);
          if (v17)
            v18 = v17 == v10;
          else
            v18 = 1;
        }
        while (!v18);
        if (v17)
LABEL_23:
          *(_QWORD *)(v15 + 8) = *(_QWORD *)(v10 + 8);
        *(_QWORD *)(v10 + 8) = v15;
      }
      if ((((*(_QWORD *)(v15 + 16) == (_QWORD)v12) ^ a5) & 1) != 0)
        goto LABEL_3;
    }
    else
    {
LABEL_5:
      *(_QWORD *)(v10 + 8) = 0;
      if (a5)
        goto LABEL_3;
    }
LABEL_6:
    *(_QWORD *)(v10 + 16) = a3;
    *(_QWORD *)(v10 + 24) = a2;
    goto LABEL_7;
  }
  *(_QWORD *)(v10 + 8) = 0;
  *(_BYTE *)(v10 + 120) = 1;
  if (*(int *)(a2 + 48) < 1)
    goto LABEL_6;
LABEL_3:
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
LABEL_7:
  v13 = operator new();
  result = *a4;
  *(__n128 *)v13 = *a4;
  *(_QWORD *)(v13 + 32) = v11;
  *(_QWORD *)(v13 + 40) = 0;
  *(_QWORD *)(v13 + 16) = v13;
  *(_QWORD *)(v13 + 24) = v13;
  *(_QWORD *)(v11 + 32) = v13;
  return result;
}

uint64_t sub_223FC688C(uint64_t result, _QWORD *a2, __n128 *a3, int a4)
{
  _QWORD *v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  if (!*(_BYTE *)(a2[15] + 12))
  {
    v4 = a2;
    v5 = (unint64_t *)a2[8];
    v6 = a2[9];
    if (v5 && v6 != 0 && !*(_BYTE *)(*(_QWORD *)(v6 + 120) + 12))
    {
      v8 = *(unint64_t **)(v6 + 64);
      if (v8)
      {
        if ((v9 = a3->n128_i64[1], v10 = a2[3], v9 >= v10 + 2) && v9 >= *(_QWORD *)(v6 + 24) + 2
          || a2[1] <= v9 && *(_QWORD *)(v6 + 8) <= v9)
        {
          if (a4)
          {
            v11 = *(_QWORD *)(v6 + 8);
            v12 = *(_QWORD *)(v6 + 24);
            v13 = (double)(v11 - v12);
            v14 = *(_QWORD *)(v6 + 16);
            v15 = v14 - *(_QWORD *)v6;
            v16 = a3->n128_u64[0];
            v17 = (double)v9 * (double)v15
                + v13 * (double)a3->n128_i64[0]
                - ((double)v11 * (double)v15
                 + v13 * (double)*(uint64_t *)v6);
            if (v17 * v17 / ((double)v15 * (double)v15 + v13 * v13) > 0.25)
              return result;
          }
          else
          {
            if (a2[4] != *(_QWORD *)(v6 + 32))
              return result;
            v16 = a3->n128_u64[0];
            v14 = *(_QWORD *)(v6 + 16);
            v12 = *(_QWORD *)(v6 + 24);
          }
          if ((double)(v16 - a2[2]) * (double)(v12 - v9) - (double)(v9 - v10) * (double)(v14 - v16) == 0.0)
          {
            v18 = *v5;
            v19 = *v8;
            if (v18 == v19)
            {
              result = (uint64_t)sub_223FC75B8(result, a2[9], (uint64_t)a2, a3);
            }
            else
            {
              if (v18 >= v19)
              {
                v20 = a2[9];
              }
              else
              {
                v20 = (uint64_t)a2;
                a2 = (_QWORD *)a2[9];
              }
              result = sub_223FC79EC(v20, (uint64_t)a2);
            }
            *(_DWORD *)(v6 + 132) = 2;
            *((_DWORD *)v4 + 33) = 1;
          }
        }
      }
    }
  }
  return result;
}

double sub_223FC6A28(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v6;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __n128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int8x16_t *v62;
  int8x16_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  _QWORD *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  BOOL v72;
  _QWORD *v73;
  _QWORD *v74;

  v6 = a2;
  if (*(_BYTE *)(a1 + 224))
  {
    if (*(_BYTE *)(*(_QWORD *)(a2 + 120) + 12))
    {
      v8 = a3;
      if (*(_BYTE *)(*(_QWORD *)(a3 + 120) + 12))
        return v16.n128_f64[0];
      v9 = *(_DWORD *)(a3 + 132);
      if (!v9)
      {
LABEL_5:
        v10 = *(_DWORD *)(v8 + 52);
        if (v10 >= 0)
          v11 = *(_DWORD *)(v8 + 52);
        else
          v11 = -v10;
        if (v11 != 1)
          return v16.n128_f64[0];
        goto LABEL_40;
      }
LABEL_12:
      *(_DWORD *)(v8 + 132) = 0;
      if (v9 == 2)
      {
        v12 = *(_QWORD *)(v8 + 80);
        *(_DWORD *)(v12 + 132) = 0;
        v13 = v8;
      }
      else
      {
        v13 = *(_QWORD *)(v8 + 72);
        *(_DWORD *)(v13 + 132) = 0;
        v12 = v8;
      }
      v16.n128_u64[0] = sub_223FC6750(a1, v13, v12, a4, 1).n128_u64[0];
      v10 = *(_DWORD *)(v8 + 52);
      if (v10 >= 0)
        v28 = *(_DWORD *)(v8 + 52);
      else
        v28 = -v10;
      if (v28 != 1)
        return v16.n128_f64[0];
LABEL_40:
      if (*(_DWORD *)(a1 + 8) == 2)
      {
        if (!*(_QWORD *)(v8 + 64))
          return v16.n128_f64[0];
      }
      else if (!*(_DWORD *)(*(_QWORD *)(v8 + 120) + 8))
      {
        return v16.n128_f64[0];
      }
      v34 = *(_DWORD *)(a1 + 12);
      if (v34 == 3)
      {
        if (v10 != -1)
          return v16.n128_f64[0];
      }
      else if (v34 == 2 && v10 != 1)
      {
        return v16.n128_f64[0];
      }
      v41 = *(_QWORD *)(v6 + 64);
      if (!v41)
      {
        v54 = **(_QWORD **)(v6 + 120);
        if (a4->n128_u64[0] == *(_QWORD *)v54
          && a4->n128_u64[1] == *(_QWORD *)(v54 + 8)
          && (*(_BYTE *)(v54 + 32) & 3) == 0
          && (v68 = sub_223FC8A6C((_QWORD *)v6)) != 0
          && (v69 = v68[8]) != 0)
        {
          *(_QWORD *)(v6 + 64) = v69;
          v70 = *(_DWORD *)(v6 + 48);
          v71 = v68[8];
          v72 = v70 <= 0;
          if (v70 <= 0)
            v73 = v68;
          else
            v73 = (_QWORD *)v6;
          if (v72)
            v74 = (_QWORD *)v6;
          else
            v74 = v68;
          *(_QWORD *)(v71 + 16) = v73;
          *(_QWORD *)(v71 + 24) = v74;
        }
        else
        {
          v16.n128_u64[0] = sub_223FC7374((_QWORD *)a1, v6, a4).n128_u64[0];
        }
        return v16.n128_f64[0];
      }
      v42 = *(_QWORD *)(v41 + 16);
      v43 = *(_QWORD **)(v41 + 32);
      v44 = (_QWORD *)v43[2];
      v45 = a4->n128_u64[0];
      if (v42 == v6)
      {
        if (v45 != *v43)
          goto LABEL_100;
        v46 = a4->n128_u64[1];
        v47 = v43[1];
      }
      else
      {
        if (v45 != *v44)
          goto LABEL_100;
        v46 = a4->n128_u64[1];
        v47 = v44[1];
      }
      if (v46 == v47)
      {
LABEL_102:
        v59 = *(_QWORD *)(v6 + 64);
        v60 = 24;
        if (*(_QWORD *)(v59 + 16) == v6)
          v60 = 16;
        *(_QWORD *)(v59 + v60) = 0;
        *(_QWORD *)(v6 + 64) = 0;
        return v16.n128_f64[0];
      }
LABEL_100:
      v58 = operator new();
      v16 = *a4;
      *(__n128 *)v58 = *a4;
      *(_QWORD *)(v58 + 32) = v41;
      *(_QWORD *)(v58 + 40) = 0;
      v44[3] = v58;
      *(_QWORD *)(v58 + 16) = v44;
      *(_QWORD *)(v58 + 24) = v43;
      v43[2] = v58;
      if (v42 == v6)
        *(_QWORD *)(v41 + 32) = v58;
      goto LABEL_102;
    }
    if (*(_BYTE *)(*(_QWORD *)(a3 + 120) + 12))
    {
      v8 = a2;
      v6 = a3;
      v9 = *(_DWORD *)(a2 + 132);
      if (!v9)
        goto LABEL_5;
      goto LABEL_12;
    }
  }
  v14 = *(_DWORD *)(a2 + 132);
  if (v14)
  {
    *(_DWORD *)(a2 + 132) = 0;
    if (v14 == 2)
    {
      v15 = *(_QWORD *)(a2 + 80);
      *(_DWORD *)(v15 + 132) = 0;
    }
    else
    {
      a2 = *(_QWORD *)(a2 + 72);
      *(_DWORD *)(a2 + 132) = 0;
      v15 = v6;
    }
    v16.n128_u64[0] = sub_223FC6750(a1, a2, v15, a4, 1).n128_u64[0];
  }
  v17 = *(_DWORD *)(a3 + 132);
  if (v17)
  {
    *(_DWORD *)(a3 + 132) = 0;
    if (v17 == 2)
    {
      v18 = *(_QWORD *)(a3 + 80);
      *(_DWORD *)(v18 + 132) = 0;
      v19 = a1;
      v20 = a3;
    }
    else
    {
      v20 = *(_QWORD *)(a3 + 72);
      *(_DWORD *)(v20 + 132) = 0;
      v19 = a1;
      v18 = a3;
    }
    v16.n128_u64[0] = sub_223FC6750(v19, v20, v18, a4, 1).n128_u64[0];
  }
  v21 = *(_DWORD *)(*(_QWORD *)(v6 + 120) + 8);
  v22 = *(_DWORD *)(*(_QWORD *)(a3 + 120) + 8);
  v23 = *(_DWORD *)(a1 + 12);
  if (v21 == v22)
  {
    v24 = *(_DWORD *)(v6 + 52);
    if (!v23)
    {
      *(_DWORD *)(v6 + 52) = *(_DWORD *)(a3 + 52);
      *(_DWORD *)(a3 + 52) = v24;
      goto LABEL_45;
    }
    if (*(_DWORD *)(a3 + 48) + v24)
      v25 = *(_DWORD *)(a3 + 48) + v24;
    else
      v25 = -v24;
    *(_DWORD *)(v6 + 52) = v25;
    v26 = *(_DWORD *)(a3 + 52);
    v27 = v26 - *(_DWORD *)(v6 + 48);
    if (v27)
    {
      *(_DWORD *)(a3 + 52) = v27;
      if (v23 > 1)
        goto LABEL_70;
    }
    else
    {
      *(_DWORD *)(a3 + 52) = -v26;
      if (v23 > 1)
      {
LABEL_70:
        v29 = *(_DWORD *)(v6 + 52);
        v31 = 0;
        if (v23 == *(_DWORD *)(a1 + 16))
        {
          v30 = *(_DWORD *)(a3 + 52);
        }
        else
        {
          v29 = -v29;
          v30 = -*(_DWORD *)(a3 + 52);
        }
        goto LABEL_50;
      }
    }
  }
  else
  {
    if (!v23)
    {
      *(_DWORD *)(v6 + 56) = *(_DWORD *)(v6 + 56) == 0;
      *(_DWORD *)(a3 + 56) = *(_DWORD *)(a3 + 56) == 0;
      goto LABEL_45;
    }
    *(_DWORD *)(v6 + 56) += *(_DWORD *)(a3 + 48);
    *(_DWORD *)(a3 + 56) -= *(_DWORD *)(v6 + 48);
    if (v23 > 1)
      goto LABEL_70;
  }
  v23 = 1;
LABEL_45:
  v29 = *(_DWORD *)(v6 + 52);
  if (v29 < 0)
    v29 = -v29;
  v30 = *(_DWORD *)(a3 + 52);
  if (v30 < 0)
    v30 = -v30;
  v31 = 1;
LABEL_50:
  v32 = *(_QWORD *)(v6 + 64);
  if (!v32 && v29 > 1)
    return v16.n128_f64[0];
  v33 = *(_QWORD *)(a3 + 64);
  if (!v33 && v30 > 1)
    return v16.n128_f64[0];
  if (v32)
  {
    if (v33)
    {
      if (v29 > 1 || v30 > 1 || v21 != v22 && *(_DWORD *)(a1 + 8) != 4)
      {
        sub_223FC75B8(a1, v6, a3, a4);
        return v16.n128_f64[0];
      }
      if (v32 != v33 && *(_QWORD *)(v32 + 16) != v6)
      {
        sub_223FC78FC(v6, (uint64_t *)a4);
        sub_223FC78FC(a3, (uint64_t *)a4);
        v16.n128_u64[0] = sub_223FC4F10(v6, a3).u64[0];
        return v16.n128_f64[0];
      }
      sub_223FC75B8(a1, v6, a3, a4);
      goto LABEL_155;
    }
    v48 = *(_QWORD *)(v32 + 16);
    v49 = *(_QWORD **)(v32 + 32);
    v50 = (_QWORD *)v49[2];
    v51 = a4->n128_u64[0];
    if (v48 == v6)
    {
      if (v51 == *v49)
      {
        v52 = a4->n128_u64[1];
        v53 = v49[1];
LABEL_122:
        if (v52 == v53)
          goto LABEL_125;
      }
    }
    else if (v51 == *v50)
    {
      v52 = a4->n128_u64[1];
      v53 = v50[1];
      goto LABEL_122;
    }
    v66 = operator new();
    v16 = *a4;
    *(__n128 *)v66 = *a4;
    *(_QWORD *)(v66 + 32) = v32;
    *(_QWORD *)(v66 + 40) = 0;
    v50[3] = v66;
    *(_QWORD *)(v66 + 16) = v50;
    *(_QWORD *)(v66 + 24) = v49;
    v49[2] = v66;
    if (v48 == v6)
      *(_QWORD *)(v32 + 32) = v66;
LABEL_125:
    v62 = *(int8x16_t **)(v6 + 64);
    v63 = *(int8x16_t **)(a3 + 64);
    if (v62 == v63)
      goto LABEL_126;
    goto LABEL_111;
  }
  if (!v33)
  {
    if (v31)
    {
      v55 = *(_DWORD *)(v6 + 56);
      if (v55 >= 0)
        v56 = v55;
      else
        v56 = -v55;
      LODWORD(v57) = *(_DWORD *)(a3 + 56);
      if ((int)v57 >= 0)
        v57 = v57;
      else
        v57 = -(int)v57;
    }
    else
    {
      v56 = *(int *)(v6 + 56);
      if (v23 == *(_DWORD *)(a1 + 16))
      {
        v57 = *(int *)(a3 + 56);
      }
      else
      {
        v56 = -(int)v56;
        v57 = -(uint64_t)*(int *)(a3 + 56);
      }
    }
    if (v21 == v22)
    {
      if (v29 != 1 || v30 != 1)
        return v16.n128_f64[0];
      v67 = *(_DWORD *)(a1 + 8);
      if (v67 != 4)
      {
        if (v67 == 3)
        {
          if (v21 == 1 && v56 >= 1 && v57 > 0)
            goto LABEL_155;
          if (v21)
            return v16.n128_f64[0];
        }
        else if (v67 != 2)
        {
          if (v56 < 1 || v57 < 1)
            return v16.n128_f64[0];
          goto LABEL_155;
        }
        if (v56 > 0 || v57 > 0)
          return v16.n128_f64[0];
      }
    }
LABEL_155:
    v16.n128_u64[0] = sub_223FC6750(a1, v6, a3, a4, 0).n128_u64[0];
    return v16.n128_f64[0];
  }
  v35 = *(_QWORD *)(v33 + 16);
  v36 = *(_QWORD **)(v33 + 32);
  v37 = (_QWORD *)v36[2];
  v38 = a4->n128_u64[0];
  if (v35 == a3)
  {
    if (v38 == *v36)
    {
      v39 = a4->n128_u64[1];
      v40 = v36[1];
LABEL_107:
      if (v39 == v40)
        goto LABEL_110;
    }
  }
  else if (v38 == *v37)
  {
    v39 = a4->n128_u64[1];
    v40 = v37[1];
    goto LABEL_107;
  }
  v61 = operator new();
  v16 = *a4;
  *(__n128 *)v61 = *a4;
  *(_QWORD *)(v61 + 32) = v33;
  *(_QWORD *)(v61 + 40) = 0;
  v37[3] = v61;
  *(_QWORD *)(v61 + 16) = v37;
  *(_QWORD *)(v61 + 24) = v36;
  v36[2] = v61;
  if (v35 == a3)
    *(_QWORD *)(v33 + 32) = v61;
LABEL_110:
  v62 = *(int8x16_t **)(v6 + 64);
  v63 = *(int8x16_t **)(a3 + 64);
  if (v62 == v63)
  {
LABEL_126:
    v16 = (__n128)vextq_s8(v62[1], v62[1], 8uLL);
    v62[1] = (int8x16_t)v16;
    return v16.n128_f64[0];
  }
LABEL_111:
  if (v62)
  {
    v64 = 3;
    if (v62[1].i64[0] == v6)
      v64 = 2;
    v62->i64[v64] = a3;
  }
  if (v63)
  {
    v65 = 3;
    if (v63[1].i64[0] == a3)
      v65 = 2;
    v63->i64[v65] = v6;
  }
  *(_QWORD *)(v6 + 64) = v63;
  *(_QWORD *)(a3 + 64) = v62;
  return v16.n128_f64[0];
}

uint64_t sub_223FC71D0(uint64_t result, uint64_t a2, __n128 *a3, int a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (!*(_BYTE *)(*(_QWORD *)(a2 + 120) + 12))
  {
    v5 = *(_QWORD *)(a2 + 80);
    v6 = *(unint64_t **)(a2 + 64);
    if (v6 && v5 != 0 && !*(_BYTE *)(*(_QWORD *)(v5 + 120) + 12))
    {
      v8 = *(unint64_t **)(v5 + 64);
      if (v8)
      {
        if ((v9 = a3->n128_i64[1], v10 = *(_QWORD *)(a2 + 24), v9 >= v10 + 2) && v9 >= *(_QWORD *)(v5 + 24) + 2
          || *(_QWORD *)(a2 + 8) <= v9 && *(_QWORD *)(v5 + 8) <= v9)
        {
          if (a4)
          {
            v11 = *(_QWORD *)(v5 + 8);
            v12 = *(_QWORD *)(v5 + 16);
            v13 = *(_QWORD *)(v5 + 24);
            v14 = (double)(v11 - v13);
            v15 = a3->n128_u64[0];
            v16 = v12 - *(_QWORD *)v5;
            v17 = (double)v9 * (double)v16
                + v14 * (double)a3->n128_i64[0]
                - ((double)v11 * (double)v16
                 + v14 * (double)*(uint64_t *)v5);
            if (v17 * v17 / ((double)v16 * (double)v16 + v14 * v14) > 0.35)
              return result;
          }
          else
          {
            if (*(_QWORD *)(a2 + 32) != *(_QWORD *)(v5 + 32))
              return result;
            v15 = a3->n128_u64[0];
            v12 = *(_QWORD *)(v5 + 16);
            v13 = *(_QWORD *)(v5 + 24);
          }
          if ((double)(v15 - *(_QWORD *)(a2 + 16)) * (double)(v13 - v9) - (double)(v9 - v10) * (double)(v12 - v15) == 0.0)
          {
            v18 = *v6;
            v19 = *v8;
            if (v18 == v19)
            {
              result = (uint64_t)sub_223FC75B8(result, a2, v5, a3);
            }
            else
            {
              if (v18 >= v19)
              {
                v20 = v5;
                v21 = a2;
              }
              else
              {
                v20 = a2;
                v21 = v5;
              }
              result = sub_223FC79EC(v20, v21);
            }
            *(_DWORD *)(a2 + 132) = 2;
            *(_DWORD *)(v5 + 132) = 1;
          }
        }
      }
    }
  }
  return result;
}

__n128 sub_223FC7374(_QWORD *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;

  v5 = sub_223FC73F0(a1);
  v6 = v5;
  *(_BYTE *)(v5 + 120) = 1;
  v7 = *(_DWORD *)(a2 + 48);
  v8 = v7 <= 0;
  if (v7 <= 0)
    v9 = 0;
  else
    v9 = a2;
  if (v8)
    v10 = a2;
  else
    v10 = 0;
  *(_QWORD *)(v5 + 16) = v9;
  *(_QWORD *)(v5 + 24) = v10;
  *(_QWORD *)(a2 + 64) = v5;
  v11 = operator new();
  result = *a3;
  *(__n128 *)v11 = *a3;
  *(_QWORD *)(v11 + 32) = v6;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 16) = v11;
  *(_QWORD *)(v11 + 24) = v11;
  *(_QWORD *)(v6 + 32) = v11;
  return result;
}

uint64_t sub_223FC73F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v2 = operator new();
  v3 = v2;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)(v2 + 120) = 0;
  v4 = (char *)a1[29];
  v5 = (uint64_t *)a1[30];
  v6 = v5;
  v7 = ((char *)v5 - v4) >> 3;
  *(_QWORD *)v2 = v7;
  v8 = a1[31];
  if ((unint64_t)v5 < v8)
  {
    *v5 = v2;
    v9 = (uint64_t)(v5 + 1);
    goto LABEL_23;
  }
  v10 = v7 + 1;
  if ((unint64_t)(v7 + 1) >> 61)
    sub_223FCCF04();
  v11 = v8 - (_QWORD)v4;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      sub_223174E94();
    v13 = operator new(8 * v12);
    v14 = (uint64_t *)&v13[8 * v7];
    v15 = &v13[8 * v12];
    *v14 = v3;
    v9 = (uint64_t)(v14 + 1);
    v16 = (char *)((char *)v5 - v4);
    if (v5 == (uint64_t *)v4)
      goto LABEL_21;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (uint64_t *)(8 * v7);
  v15 = 0;
  *(_QWORD *)(8 * v7) = v3;
  v9 = 8 * v7 + 8;
  v16 = (char *)((char *)v5 - v4);
  if (v5 != (uint64_t *)v4)
  {
LABEL_14:
    v17 = (unint64_t)(v16 - 8);
    if (v17 < 0x58)
      goto LABEL_28;
    if ((char *)v5 - v13 - (((char *)v5 - v4) & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_28;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[v19 / 0xFFFFFFFFFFFFFFF8];
    v14 = (uint64_t *)((char *)v14 - v19);
    v20 = &v13[8 * v7 - 16];
    v21 = v5 - 2;
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 4;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v24 = *--v6;
        *--v14 = v24;
      }
      while (v6 != (uint64_t *)v4);
    }
    v6 = (uint64_t *)a1[29];
  }
LABEL_21:
  a1[29] = v14;
  a1[30] = v9;
  a1[31] = v15;
  if (v6)
    operator delete(v6);
LABEL_23:
  a1[30] = v9;
  *(_QWORD *)(v3 + 8) = 0;
  *(_BYTE *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  return v3;
}

_QWORD *sub_223FC75B8(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v6;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t i;
  _QWORD *v36;
  BOOL v37;

  v6 = a2;
  v8 = *(_DWORD *)(a2 + 132);
  if (v8)
  {
    *(_DWORD *)(a2 + 132) = 0;
    if (v8 == 2)
    {
      v9 = *(_QWORD *)(a2 + 80);
      *(_DWORD *)(v9 + 132) = 0;
    }
    else
    {
      a2 = *(_QWORD *)(a2 + 72);
      *(_DWORD *)(a2 + 132) = 0;
      v9 = v6;
    }
    sub_223FC6750(a1, a2, v9, a4, 1);
  }
  v10 = *(_DWORD *)(a3 + 132);
  if (v10)
  {
    *(_DWORD *)(a3 + 132) = 0;
    if (v10 == 2)
    {
      v11 = *(_QWORD *)(a3 + 80);
      *(_DWORD *)(v11 + 132) = 0;
      v12 = a1;
      v13 = a3;
    }
    else
    {
      v13 = *(_QWORD *)(a3 + 72);
      *(_DWORD *)(v13 + 132) = 0;
      v12 = a1;
      v11 = a3;
    }
    sub_223FC6750(v12, v13, v11, a4, 1);
  }
  v14 = *(_QWORD **)(v6 + 64);
  v15 = v14[2];
  v16 = *(_QWORD **)(a3 + 64);
  v17 = v16[2];
  if ((v15 == v6) != (v17 == a3))
  {
LABEL_14:
    v20 = (_QWORD *)v14[4];
    v21 = (_QWORD *)v20[2];
    v22 = a4->n128_u64[0];
    if (v15 != v6)
      goto LABEL_15;
    goto LABEL_21;
  }
  if ((*(_BYTE *)(*(_QWORD *)(v6 + 112) + 32) & 3) != 0)
  {
    v18 = v14[3];
    v19 = v14[4];
    v14[2] = v18;
    v14[3] = v15;
    v14[4] = *(_QWORD *)(v19 + 16);
    v15 = v18;
    goto LABEL_14;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a3 + 112) + 32) & 3) == 0)
  {
    v23 = 0;
    *(_BYTE *)(a1 + 225) = 0;
    return v23;
  }
  v26 = v16[4];
  v16[2] = v16[3];
  v16[3] = v17;
  v16[4] = *(_QWORD *)(v26 + 16);
  v15 = v14[2];
  v20 = (_QWORD *)v14[4];
  v21 = (_QWORD *)v20[2];
  v22 = a4->n128_u64[0];
  if (v15 != v6)
  {
LABEL_15:
    if (v22 == *v21 && a4->n128_u64[1] == v21[1])
    {
      v23 = v21;
      v24 = *(_QWORD **)(v6 + 64);
      v25 = *(_QWORD **)(a3 + 64);
      if (v24 == v25)
        goto LABEL_31;
LABEL_27:
      if (*(_BYTE *)(*(_QWORD *)(v6 + 120) + 12))
      {
        if ((*(_DWORD *)(v6 + 48) & 0x80000000) == 0)
        {
LABEL_29:
          v28 = a3;
          v29 = v6;
LABEL_60:
          sub_223FC79EC(v28, v29);
          return v23;
        }
      }
      else if (*v24 >= *v25)
      {
        goto LABEL_29;
      }
      v28 = v6;
      v29 = a3;
      goto LABEL_60;
    }
    goto LABEL_25;
  }
LABEL_21:
  if (v22 == *v20 && a4->n128_u64[1] == v20[1])
  {
    v23 = v20;
    v24 = *(_QWORD **)(v6 + 64);
    v25 = *(_QWORD **)(a3 + 64);
    if (v24 == v25)
      goto LABEL_31;
    goto LABEL_27;
  }
LABEL_25:
  v27 = operator new();
  v23 = (_QWORD *)v27;
  *(__n128 *)v27 = *a4;
  *(_QWORD *)(v27 + 32) = v14;
  *(_QWORD *)(v27 + 40) = 0;
  v21[3] = v27;
  *(_QWORD *)(v27 + 16) = v21;
  *(_QWORD *)(v27 + 24) = v20;
  v20[2] = v27;
  if (v15 == v6)
  {
    v14[4] = v27;
    v24 = *(_QWORD **)(v6 + 64);
    v25 = *(_QWORD **)(a3 + 64);
    if (v24 != v25)
      goto LABEL_27;
  }
  else
  {
    v24 = *(_QWORD **)(v6 + 64);
    v25 = *(_QWORD **)(a3 + 64);
    if (v24 != v25)
      goto LABEL_27;
  }
LABEL_31:
  v24[4] = v23;
  if (*(_BYTE *)(a1 + 33))
  {
    v30 = *(_QWORD **)(v6 + 72);
    if (v30)
    {
      while (1)
      {
        if (!*(_BYTE *)(v30[15] + 12))
        {
          v31 = (_QWORD *)v30[8];
          if (v31)
            break;
        }
        v30 = (_QWORD *)v30[9];
        if (!v30)
          goto LABEL_33;
      }
      for (i = v31[1]; i; v31[1] = i)
      {
        if (*(_QWORD *)(i + 32))
          break;
        i = *(_QWORD *)(i + 8);
      }
      if (v31 == v24)
        goto LABEL_54;
      v36 = v31;
      do
      {
        v36 = (_QWORD *)v36[1];
        if (v36)
          v37 = v36 == v24;
        else
          v37 = 1;
      }
      while (!v37);
      if (v36)
LABEL_54:
        v31[1] = v24[1];
    }
    else
    {
LABEL_33:
      v31 = 0;
    }
    v24[1] = v31;
  }
  v32 = *(_QWORD *)(v6 + 64);
  if (v32)
  {
    v33 = *(_QWORD *)(v32 + 24);
    *(_QWORD *)(*(_QWORD *)(v32 + 16) + 64) = 0;
    *(_QWORD *)(v33 + 64) = 0;
    *(_QWORD *)(v32 + 16) = 0;
    *(_QWORD *)(v32 + 24) = 0;
    v23 = (_QWORD *)v24[4];
  }
  v34 = (_QWORD *)v24[1];
  if (v34 && !v34[2])
  {
    do
    {
      if (v34[4])
        break;
      v34 = (_QWORD *)v34[1];
    }
    while (v34);
    v24[1] = v34;
  }
  return v23;
}

uint64_t sub_223FC78FC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD **)(v4 + 32);
  v7 = (_QWORD *)v6[2];
  v8 = *a2;
  if (v5 == a1)
  {
    if (v8 == *v6 && a2[1] == v6[1])
      return *(_QWORD *)(v4 + 32);
  }
  else if (v8 == *v7 && a2[1] == v7[1])
  {
    return v6[2];
  }
  result = operator new();
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 32) = v4;
  *(_QWORD *)(result + 40) = 0;
  v7[3] = result;
  *(_QWORD *)(result + 16) = v7;
  *(_QWORD *)(result + 24) = v6;
  v6[2] = result;
  if (v5 == a1)
    *(_QWORD *)(v4 + 32) = result;
  return result;
}

uint64_t sub_223FC79EC(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t i;
  _QWORD *v11;
  BOOL v12;

  v2 = *(_QWORD **)(result + 64);
  v3 = v2[4];
  v4 = *(_QWORD **)(a2 + 64);
  v5 = v4[4];
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v5 + 16);
  if (v2[2] != result)
  {
    *(_QWORD *)(v6 + 24) = v5;
    *(_QWORD *)(v5 + 16) = v6;
    *(_QWORD *)(v3 + 16) = v7;
    *(_QWORD *)(v7 + 24) = v3;
    v8 = v4[3];
    v2[3] = v8;
    if (!v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  *(_QWORD *)(v7 + 24) = v3;
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v6 + 24) = v5;
  v2[4] = v5;
  v8 = v4[2];
  v2[2] = v8;
  if (v8)
  {
LABEL_3:
    *(_QWORD *)(v8 + 64) = v2;
    v4 = *(_QWORD **)(a2 + 64);
  }
LABEL_4:
  v4[2] = 0;
  v4[3] = 0;
  v4[4] = 0;
  v9 = *(_QWORD **)(result + 64);
  if ((*(_BYTE *)(*(_QWORD *)(result + 112) + 32) & 3) != 0)
  {
    v4[4] = v9[4];
    v9[4] = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(a2 + 64) = 0;
  }
  else
  {
    for (i = v9[1]; i; v9[1] = i)
    {
      if (*(_QWORD *)(i + 32))
        break;
      i = *(_QWORD *)(i + 8);
    }
    if (v9 == v4)
      goto LABEL_19;
    v11 = v9;
    do
    {
      v11 = (_QWORD *)v11[1];
      if (v11)
        v12 = v11 == v4;
      else
        v12 = 1;
    }
    while (!v12);
    if (v11)
LABEL_19:
      v9[1] = v4[1];
    v4[1] = v9;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(a2 + 64) = 0;
  }
  return result;
}

void sub_223FC7AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  uint64_t *v56;
  double v57;
  double v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  double v62;
  double v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  char **v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _BYTE *v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  _OWORD *v84;
  char *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;

  if (a2)
  {
    v4 = a2;
    while (1)
    {
      v6 = *(uint64_t **)(v4 + 32);
      if (v6)
        break;
      v4 = *(_QWORD *)(v4 + 8);
      if (!v4)
        return;
    }
    if (!*(_BYTE *)(v4 + 120))
    {
      v8 = (uint64_t *)v6[2];
      v7 = (uint64_t *)v6[3];
      if (v8 == v6)
        goto LABEL_102;
      if (v8 == v7)
      {
        v7 = (uint64_t *)v6[2];
        goto LABEL_102;
      }
      if ((uint64_t *)v8[2] == v7)
      {
        v90 = *v7;
        v91 = *v7 - *v8;
        if (v91 < 0)
          v91 = *v8 - *v7;
        if ((unint64_t)v91 <= 1)
        {
          v92 = v7[1] - v8[1];
          if (v92 < 0)
            v92 = v8[1] - v7[1];
          if ((unint64_t)v92 < 2)
            goto LABEL_102;
        }
        v93 = *v6;
        v94 = *v6 - *v8;
        if (v94 < 0)
          v94 = *v8 - *v6;
        if ((unint64_t)v94 <= 1)
        {
          v95 = v6[1] - v8[1];
          if (v95 < 0)
            v95 = -v95;
          if ((unint64_t)v95 < 2)
            goto LABEL_102;
        }
        v96 = v93 - v90;
        if (v93 - v90 < 0)
          v96 = v90 - v93;
        if (v96 <= 1)
        {
          v97 = v6[1] - v7[1];
          if (v97 < 0)
            v97 = v7[1] - v6[1];
          if ((unint64_t)v97 <= 1)
          {
LABEL_102:
            v7[2] = 0;
            do
            {
              v89 = (uint64_t *)v6[2];
              MEMORY[0x227684CE8]();
              v6 = v89;
            }
            while (v89);
LABEL_104:
            *(_QWORD *)(v4 + 32) = 0;
            return;
          }
        }
      }
LABEL_10:
      v9 = *v6;
      v10 = v6[1];
      v11 = v6;
      do
      {
        v13 = (uint64_t *)v11[2];
        v12 = (_QWORD *)v11[3];
        v14 = v12[1];
        v15 = (double)(v9 - *v12);
        v16 = v13[1];
        v17 = (double)(v16 - v10);
        v18 = (double)(v10 - v14);
        v19 = (double)(*v13 - v9);
        if (v15 * v17 - v18 * v19 == 0.0
          && (v9 == *v12 && v11[1] == v14
           || *v13 == v9 && v11[1] == v16
           || !*(_BYTE *)(a1 + 216)
           || v17 * v18 + v15 * v19 < 0.0))
        {
          if (v11 == *(uint64_t **)(v4 + 32))
            *(_QWORD *)(v4 + 32) = v12;
          v12[2] = v13;
          *(_QWORD *)(v11[2] + 24) = v12;
          MEMORY[0x227684CE8](v11, 0x1020C407A7E44B4);
          v20 = (uint64_t *)v13[2];
          if (v20 == v13)
            goto LABEL_42;
          v21 = (uint64_t *)v13[3];
          if (v20 == v21)
            goto LABEL_42;
          v6 = v13;
          if ((uint64_t *)v20[2] == v21)
          {
            v22 = *v21;
            v23 = *v21 - *v20;
            if (v23 < 0)
              v23 = *v20 - *v21;
            if ((unint64_t)v23 <= 1)
            {
              v24 = v21[1] - v20[1];
              if (v24 < 0)
                v24 = v20[1] - v21[1];
              if ((unint64_t)v24 < 2)
                goto LABEL_42;
            }
            v25 = *v13;
            v26 = *v13 - *v20;
            if (v26 < 0)
              v26 = *v20 - *v13;
            if ((unint64_t)v26 <= 1)
            {
              v27 = v13[1] - v20[1];
              if (v27 < 0)
                v27 = -v27;
              if ((unint64_t)v27 < 2)
                goto LABEL_42;
            }
            v28 = v25 - v22;
            if (v25 - v22 < 0)
              v28 = v22 - v25;
            v6 = v13;
            if (v28 <= 1)
            {
              v29 = v13[1] - v21[1];
              if (v29 < 0)
                v29 = -v29;
              v6 = v13;
              if ((unint64_t)v29 <= 1)
              {
LABEL_42:
                v30 = *(_QWORD *)(v4 + 32);
                *(_QWORD *)(*(_QWORD *)(v30 + 24) + 16) = 0;
                do
                {
                  v31 = *(_QWORD *)(v30 + 16);
                  MEMORY[0x227684CE8]();
                  v30 = v31;
                }
                while (v31);
                goto LABEL_104;
              }
            }
          }
          goto LABEL_10;
        }
        v10 = v13[1];
        v9 = *v13;
        v11 = (uint64_t *)v11[2];
      }
      while (v13 != v6);
      v32 = *(_QWORD *)(v4 + 32);
      v33 = *(uint64_t **)(v32 + 16);
      v34 = *(uint64_t **)(v32 + 24);
      v35 = (_QWORD *)v33[2];
      if (v34 != v35)
      {
        v36 = *(uint64_t **)(v4 + 32);
        do
        {
          v38 = v33[1];
          v39 = v34[1];
          v40 = v35[1];
          v41 = v36[1];
          if (((double)(*v33 - *v34) * (double)(v40 - v38) - (double)(v38 - v39) * (double)(*v35 - *v33))
             * ((double)(*v33 - *v36) * (double)(v40 - v38) - (double)(v38 - v41) * (double)(*v35 - *v33)) >= 0.0
            || ((double)(*v34 - *v33) * (double)(v41 - v39) - (double)(v39 - v38) * (double)(*v36 - *v34))
             * ((double)(*v34 - *v35) * (double)(v41 - v39) - (double)(v39 - v40) * (double)(*v36 - *v34)) >= 0.0)
          {
            if (v33 == (uint64_t *)v32)
              return;
          }
          else
          {
            *(_QWORD *)(v4 + 32) = v34;
            v42 = *v36;
            v43 = v36[1];
            v45 = *v34;
            v44 = v34[1];
            v46 = (double)(*v36 - *v34);
            v47 = (double)(v43 - v44);
            v48 = v35[1];
            v50 = *v33;
            v49 = v33[1];
            v51 = (double)(*v35 - *v33);
            v52 = (double)(v48 - v49);
            v53 = v47 * v51 - v52 * v46;
            if (v53 != 0.0)
            {
              v54 = ((double)(v45 - v50) * v52 - (double)(v44 - v49) * v51) / v53;
              if (v54 <= 0.0)
              {
                v3 = v34[1];
                v2 = *v34;
              }
              else if (v54 >= 1.0)
              {
                v3 = v36[1];
                v2 = *v36;
              }
              else
              {
                v2 = (uint64_t)((double)v45 + v54 * v46);
                v3 = (uint64_t)((double)v44 + v54 * v47);
              }
            }
            v55 = 0.0;
            v56 = v34;
            do
            {
              v55 = v55 + (double)(v56[1] + *(_QWORD *)(v56[3] + 8)) * (double)(*(_QWORD *)v56[3] - *v56);
              v56 = (uint64_t *)v56[2];
            }
            while (v56 != v34);
            v57 = v55 * 0.5;
            v58 = fabs(v55 * 0.5);
            if (v58 < 2.0)
            {
              *(_QWORD *)(v34[3] + 16) = 0;
              do
              {
                v98 = (uint64_t *)v34[2];
                MEMORY[0x227684CE8](v34, 0x1020C407A7E44B4);
                v34 = v98;
              }
              while (v98);
              goto LABEL_104;
            }
            if (v2 != v45 || (v59 = v34, v60 = v35, v3 != v44))
            {
              if (v2 != *v35 || (v59 = v34, v60 = v35, v3 != v48))
              {
                v99 = *v36;
                v59 = (_QWORD *)operator new();
                v42 = v99;
                v61 = v34[4];
                *v59 = v2;
                v59[1] = v3;
                v59[4] = v61;
                v59[5] = 0;
                v59[2] = v35;
                v59[3] = v34;
                v60 = v59;
              }
            }
            v62 = (double)(v3 + v43) * (double)(v2 - v42)
                + (double)(v3 + v49) * (double)(v50 - v2)
                + (double)(v49 + v43) * (double)(v42 - v50);
            v63 = fabs(v62);
            v35[3] = v59;
            v34[2] = (uint64_t)v60;
            if (v63 < 1.0 || v63 <= v58 && v62 <= 0.0 == v57 > 0.0)
            {
              v64 = v36[2];
              if (v64)
                MEMORY[0x227684CE8](v64, 0x1020C407A7E44B4);
              MEMORY[0x227684CE8](v36, 0x1020C407A7E44B4);
            }
            else
            {
              v65 = (_QWORD *)sub_223FC73F0((_QWORD *)a1);
              v65[1] = *(_QWORD *)(v4 + 8);
              v36[4] = (uint64_t)v65;
              *(_QWORD *)(v36[2] + 32) = v65;
              v66 = (uint64_t *)operator new();
              *v66 = v2;
              v66[1] = v3;
              v66[4] = (uint64_t)v65;
              v66[5] = 0;
              v67 = v36[2];
              v66[2] = (uint64_t)v36;
              v66[3] = v67;
              v65[4] = v66;
              v36[3] = (uint64_t)v66;
              *(_QWORD *)(v67 + 16) = v66;
              if (*(_BYTE *)(a1 + 33))
              {
                if (sub_223FC8304(v34, v66))
                {
                  v68 = (_QWORD *)operator new();
                  v68[1] = 0;
                  v68[2] = 0;
                  *v68 = 0;
                  v65[6] = v68;
                  v69 = operator new(8uLL);
                  *v68 = v69;
                  *v69++ = v4;
                  v68[1] = v69;
                  v68[2] = v69;
                }
                else
                {
                  v70 = *(char ***)(v4 + 48);
                  if (!v70)
                  {
                    v70 = (char **)operator new();
                    v70[1] = 0;
                    v70[2] = 0;
                    *v70 = 0;
                    *(_QWORD *)(v4 + 48) = v70;
                  }
                  v72 = v70[1];
                  v71 = (unint64_t)v70[2];
                  if ((unint64_t)v72 >= v71)
                  {
                    v73 = *v70;
                    v3 = v72 - *v70;
                    v74 = v3 >> 3;
                    v75 = (v3 >> 3) + 1;
                    if (v75 >> 61)
                      sub_223FCCF04();
                    v76 = v71 - (_QWORD)v73;
                    if (v76 >> 2 > v75)
                      v75 = v76 >> 2;
                    if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
                      v77 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v77 = v75;
                    if (v77)
                    {
                      if (v77 >> 61)
                        sub_223174E94();
                      v78 = operator new(8 * v77);
                    }
                    else
                    {
                      v78 = 0;
                    }
                    v79 = &v78[8 * v74];
                    *(_QWORD *)v79 = v65;
                    v2 = (uint64_t)(v79 + 8);
                    if (v72 != v73)
                    {
                      v80 = v72 - v73 - 8;
                      if (v80 < 0x58)
                        goto LABEL_132;
                      if ((unint64_t)(v72 - v78 - v3) < 0x20)
                        goto LABEL_132;
                      v81 = (v80 >> 3) + 1;
                      v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
                      v83 = &v72[-v82];
                      v79 -= v82;
                      v84 = &v78[8 * v74 - 16];
                      v85 = v72 - 16;
                      v86 = v81 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v87 = *(_OWORD *)v85;
                        *(v84 - 1) = *((_OWORD *)v85 - 1);
                        *v84 = v87;
                        v84 -= 2;
                        v85 -= 32;
                        v86 -= 4;
                      }
                      while (v86);
                      v72 = v83;
                      if (v81 != (v81 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_132:
                        do
                        {
                          v88 = *((_QWORD *)v72 - 1);
                          v72 -= 8;
                          *((_QWORD *)v79 - 1) = v88;
                          v79 -= 8;
                        }
                        while (v72 != v73);
                      }
                      v72 = *v70;
                    }
                    *v70 = v79;
                    v70[1] = (char *)v2;
                    v70[2] = &v78[8 * v77];
                    if (v72)
                      operator delete(v72);
                    v70[1] = (char *)v2;
                  }
                  else
                  {
                    *(_QWORD *)v72 = v65;
                    v2 = (uint64_t)(v72 + 8);
                    v70[1] = v72 + 8;
                  }
                }
              }
            }
            v32 = *(_QWORD *)(v4 + 32);
            v33 = (uint64_t *)v32;
            if (!v32)
              return;
          }
          v36 = v33;
          v37 = v33 + 2;
          v33 = (uint64_t *)v33[2];
          v34 = (uint64_t *)v37[1];
          v35 = (_QWORD *)v33[2];
        }
        while (v34 != v35);
      }
    }
  }
}

