void sub_2235C3194(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_2235C277C(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_2234DDE8C((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2235C3470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_2235C349C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x2235C32A8);
    JUMPOUT(0x2235C3278);
  }
  sub_2233236D4(3u);
}

void sub_2235C34F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_2235C3524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_2234DDE8C(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2235C3610(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng38GetListOfChunkUUIDInBoundingBoxRequestENS"
                     "t3__16vectorINS_3esn6random4UUIDENS7_9allocatorISB_EEEEvSE_Lb0EE25EnqueueMessageAndDispatchIZNKSF_7"
                     "ProcessERKS6_NS7_7promiseISE_EEEUlT_T0_E_EEvSI_SL_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng38GetListOfChunkUUIDInBoundingBo"
                                "xRequestENSt3__16vectorINS_3esn6random4UUIDENS7_9allocatorISB_EEEEvSE_Lb0EE25EnqueueMess"
                                "ageAndDispatchIZNKSF_7ProcessERKS6_NS7_7promiseISE_EEEUlT_T0_E_EEvSI_SL_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng38GetListOfChunkUUIDInBoundingBoxRequestENSt3__16vectorINS_3esn6random4UUIDENS7_9allocatorISB_EEEEvSE_Lb0EE25EnqueueMessageAndDispatchIZNKSF_7ProcessERKS6_NS7_7promiseISE_EEEUlT_T0_E_EEvSI_SL_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng38GetListOfChunkUUIDInBoundingBoxRequestENSt3__16vectorINS_3esn6random4UUIDENS7_9allocatorISB_EEEEvSE_Lb0EE25EnqueueMessageAndDispatchIZNKSF_7ProcessERKS6_NS7_7promiseISE_EEEUlT_T0_E_EEvSI_SL_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235C367C()
{
  return &unk_24EC4F1C0;
}

_QWORD *sub_2235C3688(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC4F1E0;
  v2 = (std::__shared_weak_count *)a1[14];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_2235C3704(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC4F1E0;
  v2 = (std::__shared_weak_count *)a1[14];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

char *sub_2235C3790(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = (char *)operator new(0x78uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)result = &off_24EC4F1E0;
  *((_QWORD *)result + 1) = v4;
  *((_QWORD *)result + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(result + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(result + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(result + 72) = *(_OWORD *)(a1 + 72);
  *((_QWORD *)result + 11) = *(_QWORD *)(a1 + 88);
  *((_DWORD *)result + 24) = *(_DWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 112);
  *((_QWORD *)result + 13) = *(_QWORD *)(a1 + 104);
  *((_QWORD *)result + 14) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_2235C3830(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC4F1E0;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_OWORD *)(result + 24);
  v7 = *(_OWORD *)(result + 40);
  v8 = *(_OWORD *)(result + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(result + 72);
  *(_OWORD *)(a2 + 56) = v8;
  *(_OWORD *)(a2 + 40) = v7;
  *(_OWORD *)(a2 + 24) = v6;
  v9 = *(_QWORD *)(result + 88);
  *(_DWORD *)(a2 + 96) = *(_DWORD *)(result + 96);
  *(_QWORD *)(a2 + 88) = v9;
  v10 = *(_QWORD *)(result + 112);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(result + 104);
  *(_QWORD *)(a2 + 112) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

void sub_2235C38B0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 112);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_2235C3920(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[14];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_2235C3990(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[13];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_2235C277C((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_2234DDE8C((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_2235C3AA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_2235C3B18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x2235C3B4CLL);
  JUMPOUT(0x2235C3B7CLL);
}

uint64_t sub_2235C3B84(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng38GetListOfChunkUUIDInBoundingBoxRequestENS"
                     "t3__16vectorINS_3esn6random4UUIDENS7_9allocatorISB_EEEEvSE_Lb0EE7ProcessERKS6_NS7_7promiseISE_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng38GetListOfChunkUUIDInBoundingBo"
                                "xRequestENSt3__16vectorINS_3esn6random4UUIDENS7_9allocatorISB_EEEEvSE_Lb0EE7ProcessERKS6"
                                "_NS7_7promiseISE_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng38GetListOfChunkUUIDInBoundingBoxRequestENSt3__16vectorINS_3esn6random4UUIDENS7_9allocatorISB_EEEEvSE_Lb0EE7ProcessERKS6_NS7_7promiseISE_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng38GetListOfChunkUUIDInBoundingBoxRequestENSt3__16vectorINS_3esn6random4UUIDENS7_9allocatorISB_EEEEvSE_Lb0EE7ProcessERKS6_NS7_7promiseISE_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235C3BF0()
{
  return &unk_24EC4F240;
}

_QWORD *sub_2235C3BFC(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC4F260;
  v2 = a1[4];
  a1[3] = &off_24EC2E4A8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2235C3C54(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC4F260;
  v2 = a1[4];
  a1[3] = &off_24EC2E4A8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235C3CBC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC4F260;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC2E4A8;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_2235C3D34(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2235C3D54(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC4F260;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC2E4A8;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_2235C3DBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_2235C3DD4(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC2E4A8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_2235C3E24(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC2E4A8;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_2235C3E70(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC2E4A8;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235C3F24(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235C3F60(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng38GetListOfChunkUUIDInBoundingBoxRequestENSt"
                     "3__16vectorINS_3esn6random4UUIDENS7_9allocatorISB_EEEEvSE_Lb0EE9SubscribeENS1_12ChannelInputISE_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng38GetListOfChunkUUIDInBoundingBox"
                                "RequestENSt3__16vectorINS_3esn6random4UUIDENS7_9allocatorISB_EEEEvSE_Lb0EE9SubscribeENS1"
                                "_12ChannelInputISE_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng38GetListOfChunkUUIDInBoundingBoxRequestENSt3__16vectorINS_3esn6random4UUIDENS7_9allocatorISB_EEEEvSE_Lb0EE9SubscribeENS1_12ChannelInputISE_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng38GetListOfChunkUUIDInBoundingBoxRequestENSt3__16vectorINS_3esn6random4UUIDENS7_9allocatorISB_EEEEvSE_Lb0EE9SubscribeENS1_12ChannelInputISE_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235C3FCC()
{
  return &unk_24EC4F2C0;
}

_QWORD *sub_2235C3FD8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC4F2E0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235C4010(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC4F2E0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235C4058(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC4F2E0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2235C40A8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC4F2E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2235C40D8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235C40E8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235C4114(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235C41A8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235C41E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng38GetListOfChunkUUIDInBoundingBoxRequestENSt"
                     "3__16vectorINS_3esn6random4UUIDENS7_9allocatorISB_EEEEvSE_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng38GetListOfChunkUUIDInBoundingBox"
                                "RequestENSt3__16vectorINS_3esn6random4UUIDENS7_9allocatorISB_EEEEvSE_Lb0EE15AddErrorHand"
                                "lerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng38GetListOfChunkUUIDInBoundingBoxRequestENSt3__16vectorINS_3esn6random4UUIDENS7_9allocatorISB_EEEEvSE_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng38GetListOfChunkUUIDInBoundingBoxRequestENSt3__16vectorINS_3esn6random4UUIDENS7_9allocatorISB_EEEEvSE_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235C4250()
{
  return &unk_24EC4F340;
}

_QWORD *sub_2235C425C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC4F360;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235C4294(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC4F360;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235C42DC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC4F360;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2235C4334(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC4F360;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2235C436C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235C437C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235C43A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_2235C4524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235C4594(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng38GetListOfChunkUUIDInBoundingBoxRequestENS"
                     "t3__16vectorINS_3esn6random4UUIDENS7_9allocatorISB_EEEEvSE_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng38GetListOfChunkUUIDInBoundingBo"
                                "xRequestENSt3__16vectorINS_3esn6random4UUIDENS7_9allocatorISB_EEEEvSE_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng38GetListOfChunkUUIDInBoundingBoxRequestENSt3__16vectorINS_3esn6random4UUIDENS7_9allocatorISB_EEEEvSE_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng38GetListOfChunkUUIDInBoundingBoxRequestENSt3__16vectorINS_3esn6random4UUIDENS7_9allocatorISB_EEEEvSE_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235C4600()
{
  return &unk_24EC4F3C0;
}

_QWORD *sub_2235C460C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC4F3E0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235C4644(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC4F3E0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235C468C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC4F3E0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2235C46E4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC4F3E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2235C471C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235C472C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235C4758(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235C4810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235C485C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng38GetListOfChunkUUIDInBoundingBoxRequestENS"
                     "t3__16vectorINS_3esn6random4UUIDENS7_9allocatorISB_EEEEvSE_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng38GetListOfChunkUUIDInBoundingBo"
                                "xRequestENSt3__16vectorINS_3esn6random4UUIDENS7_9allocatorISB_EEEEvSE_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng38GetListOfChunkUUIDInBoundingBoxRequestENSt3__16vectorINS_3esn6random4UUIDENS7_9allocatorISB_EEEEvSE_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng38GetListOfChunkUUIDInBoundingBoxRequestENSt3__16vectorINS_3esn6random4UUIDENS7_9allocatorISB_EEEEvSE_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235C48C8()
{
  return &unk_24EC4F440;
}

void sub_2235C48D8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2235C48FC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2235C4914(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng38GetListOfChunkUUIDInBo"
                     "undingBoxRequestENS_6vectorINS1_3esn6random4UUIDENS_9allocatorISC_EEEEvSF_Lb0EEEE27__shared_ptr_def"
                     "ault_deleteISG_SG_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng38GetListOfCh"
                                "unkUUIDInBoundingBoxRequestENS_6vectorINS1_3esn6random4UUIDENS_9allocatorISC_EEEEvSF_Lb0"
                                "EEEE27__shared_ptr_default_deleteISG_SG_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng38GetListOfChunkUUIDInBoundingBoxRequestENS_6vectorINS1_3esn6random4UUIDENS_9allocatorISC_EEEEvSF_Lb0EEEE27__shared_ptr_default_deleteISG_SG_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng38GetListOfChunkUUIDInBoundingBoxRequestENS_6vectorINS1_3esn6random4UUIDENS_9allocatorISC_EEEEvSF_Lb0EEEE27__shared_ptr_default_deleteISG_SG_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2235C4984(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235C49B0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235C49EC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC4F4B0;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_2235C4A54(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235C4AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235C4AF8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235C4B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235C4B9C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2235C4C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235C4C74(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2235C4D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235C4D4C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2235C4DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235C4E08(uint64_t a1)
{
  sub_2235C6994(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2235C4E2C(_QWORD *a1, __int128 *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  char *v48;
  __int128 v49;
  void *v50;
  uint64_t v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  __int128 *v55;
  uint64_t v56;
  std::__shared_weak_count *v57[2];
  __int128 v58;
  void *v59;
  _BYTE *v60;
  uint64_t (**v61)();
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  int v66;
  uint64_t v67;
  void *__p[2];
  uint64_t v69;
  char v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  __int128 v73;
  uint64_t v74;
  __int128 *v75;
  _BYTE v76[24];
  _BYTE *v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v4 = (std::__shared_weak_count *)operator new(0xC0uLL);
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__shared_weak_owners_ = 0;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC4F728;
    v6 = v4 + 1;
    sub_2235C77D4((uint64_t)&v4[1], a2);
    v71 = v4 + 1;
    v72 = v4;
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    v9 = (uint64_t *)a1[18];
    v10 = (_QWORD *)operator new();
    *v10 = v9 + 7;
    std::mutex::lock((std::mutex *)(v9 + 7));
    *(_QWORD *)&v73 = v10;
    *((_QWORD *)&v73 + 1) = v9;
    if (!*((_BYTE *)v9 + 48))
      sub_22324A974();
    v11 = v9[4];
    v12 = *v9;
    v13 = (std::__shared_weak_count **)(*v9 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v6;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v4;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v9[1] - *v9) >> 4;
    v20 = v9[5];
    v21 = v9[4] + 1;
    if (v21 >= v19)
      v22 = (v9[1] - *v9) >> 4;
    else
      v22 = 0;
    v9[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v9[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v9[3] = v23 - v19;
      v24 = (std::mutex **)v73;
      if (!(_QWORD)v73)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v73 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v73 = v38;
            *((_QWORD *)&v73 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v73 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24EC4F778;
        *(_OWORD *)(v43 + 8) = v73;
        v73 = 0uLL;
        *((_QWORD *)v43 + 3) = v6;
        *((_QWORD *)v43 + 4) = v4;
        v74 = 0;
        v75 = 0;
        v77 = v43;
        sub_2245022E4(*v34, (uint64_t)v76);
        v44 = v77;
        if (v77 == v76)
        {
          v45 = 4;
          v44 = v76;
        }
        else
        {
          if (!v77)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_47:
        if (v72)
        {
          v46 = &v72->__shared_owners_;
          do
            v47 = __ldaxr((unint64_t *)v46);
          while (__stlxr(v47 - 1, (unint64_t *)v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        return;
      }
    }
    else
    {
      v9[5] = v20 + 1;
      v24 = (std::mutex **)v73;
      if (!(_QWORD)v73)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  *(_OWORD *)v57 = 0uLL;
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    if (v27)
    {
      v28 = v27;
      v29 = (std::__shared_weak_count *)a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v57[0] = v29;
      v57[1] = v27;
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      *(_OWORD *)v57 = 0uLL;
    }
  }
  sub_2235C77D4((uint64_t)&v58, a2);
  v75 = 0;
  v48 = (char *)operator new(0xC0uLL);
  *(_QWORD *)v48 = &off_24EC4F7F8;
  *(_OWORD *)(v48 + 8) = *(_OWORD *)v57;
  v49 = v58;
  *((_QWORD *)v48 + 5) = 0;
  *(_OWORD *)(v48 + 24) = v49;
  *((_QWORD *)v48 + 6) = 0;
  *((_QWORD *)v48 + 7) = 0;
  v50 = v59;
  v51 = v60 - (_BYTE *)v59;
  if (v60 != v59)
  {
    if (v51 < 0)
      sub_223257BE4();
    v52 = (char *)operator new(v60 - (_BYTE *)v59);
    *((_QWORD *)v48 + 5) = v52;
    *((_QWORD *)v48 + 7) = &v52[64 * (v51 >> 6)];
    memcpy(v52, v50, v51 & 0xFFFFFFFFFFFFFFC0);
    *((_QWORD *)v48 + 6) = &v52[v51 & 0xFFFFFFFFFFFFFFC0];
  }
  v53 = v63;
  *((_OWORD *)v48 + 5) = v62;
  *((_OWORD *)v48 + 6) = v53;
  v54 = v65;
  *((_OWORD *)v48 + 7) = v64;
  *((_OWORD *)v48 + 8) = v54;
  *((_DWORD *)v48 + 36) = v66;
  *((_QWORD *)v48 + 19) = v67;
  *((_QWORD *)v48 + 8) = &off_24EC207B8;
  *((_QWORD *)v48 + 9) = &off_24EC20868;
  *((_OWORD *)v48 + 10) = *(_OWORD *)__p;
  *((_QWORD *)v48 + 22) = v69;
  __p[1] = 0;
  v69 = 0;
  __p[0] = 0;
  v48[184] = v70;
  v75 = (__int128 *)v48;
  sub_2245022E4(*v25, (uint64_t)&v73);
  v55 = v75;
  if (v75 == &v73)
  {
    v56 = 4;
    v55 = &v73;
    goto LABEL_60;
  }
  if (v75)
  {
    v56 = 5;
LABEL_60:
    (*(void (**)(__int128 *))(*(_QWORD *)v55 + 8 * v56))(v55);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v61 = &off_24EC20828;
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
}

void sub_2235C535C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;

  v13 = *(_QWORD **)(v11 - 120);
  if (v13 == v10)
  {
    v14 = 4;
    v13 = (_QWORD *)(v11 - 144);
  }
  else
  {
    if (!v13)
    {
      sub_2235C6B94(&a9);
      _Unwind_Resume(a1);
    }
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
  sub_2235C6B94(&a9);
  _Unwind_Resume(a1);
}

void sub_2235C5400(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 80);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 104);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  sub_223322894(v2 - 144);
  sub_223167354(v2 - 160);
  _Unwind_Resume(a1);
}

void sub_2235C5450(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  sub_223322848((std::mutex ***)(v2 - 144));
  std::__shared_weak_count::__release_weak(v1);
  sub_223167354(v2 - 160);
  _Unwind_Resume(a1);
}

void sub_2235C5474(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x227684CE8](v2, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v1);
  sub_223167354(v3 - 160);
  _Unwind_Resume(a1);
}

void sub_2235C54A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  std::__shared_weak_count::__release_weak(v1);
  sub_223167354(v2 - 160);
  _Unwind_Resume(a1);
}

void sub_2235C54C4()
{
  std::__shared_weak_count *v0;
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v1);
  JUMPOUT(0x2235C54D4);
}

uint64_t sub_2235C54E0(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2235C54F0(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2235C54FC(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_2235C550C(_QWORD *a1, __int128 *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  char *v50;
  std::string *v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  char *v60;
  __int128 v61;
  void *v62;
  uint64_t v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  __int128 *v76;
  std::string *v77;
  std::runtime_error *exception;
  std::runtime_error *v79;
  std::__shared_weak_count *v80[2];
  __int128 v81;
  void *v82;
  _BYTE *v83;
  uint64_t (**v84)();
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  int v89;
  uint64_t v90;
  void *__p[2];
  uint64_t v92;
  char v93;
  _QWORD *v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  std::runtime_error v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  __int128 v103;
  _QWORD *v104;
  __int128 *v105;
  _QWORD v106[3];
  std::string v107;
  std::string *v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v103 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v103 + 1) = 45;
    v75 = (_QWORD *)a1[6];
    v74 = a1 + 6;
    v73 = v75;
    v76 = (__int128 *)*((unsigned __int8 *)v74 + 23);
    if ((char)v76 < 0)
      v76 = (__int128 *)v74[1];
    else
      v73 = v74;
    v104 = v73;
    v105 = v76;
    sub_2231A9820((uint64_t)&v103, (uint64_t)v106, 0, 0, &v107);
    if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v77 = &v107;
    else
      v77 = (std::string *)v107.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v100, (const char *)v77);
    v100.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v79 = std::runtime_error::runtime_error(exception, &v100);
    v79->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v79, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC4F878;
    v6[1].__vftable = *a3;
    v98 = v6 + 1;
    v99 = v6;
    v96 = v6 + 1;
    v97 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0xC0uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC4F728;
    v11 = v9 + 1;
    sub_2235C77D4((uint64_t)&v9[1], a2);
    v101 = v9 + 1;
    v102 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v103 = v15;
    *((_QWORD *)&v103 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_22324A974();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v11;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v103;
      if (!(_QWORD)v103)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v103 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v103 = v43;
            *((_QWORD *)&v103 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v103 = 0uLL;
          }
        }
        v48 = v96;
        v49 = v97;
        v96 = 0;
        v97 = 0;
        v50 = (char *)operator new(0x38uLL);
        *(_QWORD *)v50 = &off_24EC4F8C8;
        *(_OWORD *)(v50 + 8) = v103;
        v103 = 0uLL;
        *((_QWORD *)v50 + 3) = v11;
        *((_QWORD *)v50 + 4) = v9;
        v104 = 0;
        v105 = 0;
        *((_QWORD *)v50 + 5) = v48;
        *((_QWORD *)v50 + 6) = v49;
        v106[0] = 0;
        v106[1] = 0;
        v108 = (std::string *)v50;
        sub_2245022E4(*v39, (uint64_t)&v107);
        v51 = v108;
        if (v108 == &v107)
        {
          v52 = 4;
          v51 = &v107;
        }
        else
        {
          if (!v108)
            goto LABEL_51;
          v52 = 5;
        }
        (*(void (**)(void))(v51->__r_.__value_.__r.__words[0] + 8 * v52))();
LABEL_51:
        if (v102)
        {
          v53 = &v102->__shared_owners_;
          do
            v54 = __ldaxr((unint64_t *)v53);
          while (__stlxr(v54 - 1, (unint64_t *)v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
            std::__shared_weak_count::__release_weak(v102);
          }
        }
        if (v97)
        {
          v55 = &v97->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
        }
        if (v99)
        {
          v57 = &v99->__shared_owners_;
          do
            v58 = __ldaxr((unint64_t *)v57);
          while (__stlxr(v58 - 1, (unint64_t *)v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v103;
      if (!(_QWORD)v103)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x227684CE8](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  *(_OWORD *)v80 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = (std::__shared_weak_count *)a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v80[0] = v34;
      v80[1] = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      *(_OWORD *)v80 = 0uLL;
    }
  }
  sub_2235C77D4((uint64_t)&v81, a2);
  v59 = (std::__shared_weak_count *)operator new(0x20uLL);
  v59->__shared_owners_ = 0;
  v59->__shared_weak_owners_ = 0;
  v59->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC4F878;
  v59[1].__vftable = *a3;
  *a3 = 0;
  v94 = &v59[1].__vftable;
  v95 = v59;
  v105 = 0;
  v60 = (char *)operator new(0xD0uLL);
  *(_QWORD *)v60 = &off_24EC4F948;
  *(_OWORD *)(v60 + 8) = *(_OWORD *)v80;
  v61 = v81;
  *((_QWORD *)v60 + 5) = 0;
  *(_OWORD *)(v60 + 24) = v61;
  *((_QWORD *)v60 + 6) = 0;
  *((_QWORD *)v60 + 7) = 0;
  v62 = v82;
  v63 = v83 - (_BYTE *)v82;
  if (v83 != v82)
  {
    if (v63 < 0)
      sub_223257BE4();
    v64 = (char *)operator new(v83 - (_BYTE *)v82);
    *((_QWORD *)v60 + 5) = v64;
    *((_QWORD *)v60 + 7) = &v64[64 * (v63 >> 6)];
    memcpy(v64, v62, v63 & 0xFFFFFFFFFFFFFFC0);
    *((_QWORD *)v60 + 6) = &v64[v63 & 0xFFFFFFFFFFFFFFC0];
  }
  v65 = v86;
  *((_OWORD *)v60 + 5) = v85;
  *((_OWORD *)v60 + 6) = v65;
  v66 = v87;
  v67 = v88;
  *((_DWORD *)v60 + 36) = v89;
  *((_QWORD *)v60 + 19) = v90;
  *((_OWORD *)v60 + 7) = v66;
  *((_OWORD *)v60 + 8) = v67;
  *((_QWORD *)v60 + 8) = &off_24EC207B8;
  *((_QWORD *)v60 + 9) = &off_24EC20868;
  *((_OWORD *)v60 + 10) = *(_OWORD *)__p;
  *((_QWORD *)v60 + 22) = v92;
  __p[1] = 0;
  v92 = 0;
  __p[0] = 0;
  v60[184] = v93;
  *((_QWORD *)v60 + 24) = v59 + 1;
  *((_QWORD *)v60 + 25) = v59;
  v94 = 0;
  v95 = 0;
  v105 = (__int128 *)v60;
  sub_2245022E4(*v30, (uint64_t)&v103);
  v68 = v105;
  if (v105 == &v103)
  {
    v69 = 4;
    v68 = &v103;
  }
  else
  {
    if (!v105)
      goto LABEL_75;
    v69 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v68 + 8 * v69))(v68);
LABEL_75:
  v70 = v95;
  if (v95)
  {
    v71 = (unint64_t *)&v95->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v84 = &off_24EC20828;
  if (v82)
  {
    v83 = v82;
    operator delete(v82);
  }
}

void sub_2235C5C6C(_Unwind_Exception *exception_object, int a2)
{
  std::__assoc_sub_state **v2;
  uint64_t v3;
  std::__assoc_sub_state *v4;
  std::exception_ptr v5;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v4 = *v2;
    if (*v2)
    {
      std::exception_ptr::exception_ptr((std::exception_ptr *)(v3 - 176), (const std::exception_ptr *)(v3 - 200));
      v5.__ptr_ = (void *)(v3 - 176);
      std::__assoc_sub_state::set_exception(v4, v5);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v3 - 176));
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v3 - 200));
      std::runtime_error::~runtime_error((std::runtime_error *)(v3 - 216));
      if (*(char *)(v3 - 97) < 0)
        operator delete(*(void **)(v3 - 120));
      JUMPOUT(0x2235C5B70);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_2235C5CE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 - 200));
  std::runtime_error::~runtime_error((std::runtime_error *)(v1 - 216));
  if (*(char *)(v1 - 97) < 0)
  {
    operator delete(*(void **)(v1 - 120));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2235C5D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;

  v13 = *(_QWORD **)(v11 - 152);
  if (v13 == v10)
  {
    v14 = 4;
    v13 = (_QWORD *)(v11 - 176);
  }
  else
  {
    if (!v13)
    {
      sub_2235C7D48(&a9);
      _Unwind_Resume(a1);
    }
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
  sub_2235C7D48(&a9);
  _Unwind_Resume(a1);
}

void sub_2235C5DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v39;
  uint64_t v40;

  v39 = *(_QWORD **)(v37 - 96);
  if (v39 == v36)
  {
    v40 = 4;
    v39 = (_QWORD *)(v37 - 120);
  }
  else
  {
    if (!v39)
      goto LABEL_6;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_6:
  sub_22332429C((_QWORD *)(v37 - 176));
  sub_223167354(v37 - 192);
  sub_223167354((uint64_t)&a34);
  sub_223167354((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_2235C5E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  std::__shared_weak_count *v36;
  void *v38;

  std::__shared_weak_count::~__shared_weak_count(v36);
  operator delete(v38);
  sub_223167354((uint64_t)&a34);
  sub_223167354((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_2235C5EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  sub_223167354((uint64_t)&a34);
  sub_223167354((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_2235C5ED8(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_2235C5F4C(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC4F9C8;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC48EF8;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_2235C607C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2235C60F0(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC4FA48;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2235C6200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2235C6264@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC4FAC8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2235C647C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_2235C6544@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC4FB48;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2235C675C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235C6824(uint64_t a1)
{
  return sub_2235C6994(a1 - 16);
}

void sub_2235C682C(uint64_t a1)
{
  sub_2235C6994(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235C6854(uint64_t a1, uint64_t a2)
{
  return sub_2235C5F4C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2235C685C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2235C6264((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2235C6864@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2235C6544((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_2235C686C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_2235C6874(uint64_t a1)
{
  return sub_2235C6994(a1 - 24);
}

void sub_2235C687C(uint64_t a1)
{
  sub_2235C6994(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235C68A4(uint64_t a1)
{
  return sub_2235C60F0((_QWORD *)(a1 - 24));
}

uint64_t sub_2235C68AC(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_2235C68B4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2235C691C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2235C6984(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_2235C6994(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC4F528;
  *(_QWORD *)(a1 + 16) = &unk_24EC4F5A0;
  *(_QWORD *)(a1 + 24) = &unk_24EC4F5E0;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_2235C6B94(_QWORD *a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;

  v2 = (void *)a1[19];
  if (v2)
  {
    a1[20] = v2;
    operator delete(v2);
  }
  a1[7] = &off_24EC20828;
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_2235C6BEC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC4F728;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2235C6BFC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC4F728;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2235C6C2C(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  a1[8] = &off_24EC20828;
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
}

_QWORD *sub_2235C6C80(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }
  a1[5] = &off_24EC20828;
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

_QWORD *sub_2235C6CCC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC4F778;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2235C6D10(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC4F778;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235C6D64(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC4F778;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_2235C6DD4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC4F778;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2235C6E24(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_2235C6E60(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_2235C6E98(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_2235C71BC((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_2235C76AC(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2235C7060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_2235C76AC(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235C7144(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17MappedStateBun"
                     "dleEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_4SendERKS6_EUlT_T0_E_EEvSB_SC_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17Map"
                                "pedStateBundleEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_4SendERKS6_EUlT_T0_E_EEvSB_SC_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17MappedStateBundleEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_4SendERKS6_EUlT_T0_E_EEvSB_SC_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17MappedStateBundleEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_4SendERKS6_EUlT_T0_E_EEvSB_SC_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235C71B0()
{
  return &unk_24EC4F7D8;
}

void sub_2235C71BC(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::exception_ptr v29;
  void *__p;
  char *v31;
  __int16 v32;

  v6 = *a1;
  if (!v6)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    v7 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (byte_255795670)
      v8 = byte_255795678 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_255795648;
      for (i = qword_255795650; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&__p, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, void **))(j[2] + 16))(j + 2, &__p);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_2233236D4(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v29.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v29), v15))
    {
      sub_2233236D4(2u);
    }
    *(_QWORD *)(v14 + 144) = 0;
    *(_QWORD *)(v14 + 152) = 0;
    *(_QWORD *)(v14 + 160) = 0;
    v16 = (char *)__p;
    v17 = v31;
    v18 = v31 - (_BYTE *)__p;
    if (v31 != __p)
    {
      if (v18 < 0)
        sub_22352449C();
      v19 = operator new(v31 - (_BYTE *)__p);
      *(_QWORD *)(v14 + 144) = v19;
      *(_QWORD *)(v14 + 152) = v19;
      *(_QWORD *)(v14 + 160) = &v19[2 * (v18 >> 4)];
      do
      {
        *v19 = *(_QWORD *)v16;
        v20 = *((_QWORD *)v16 + 1);
        v19[1] = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v16 += 16;
        v19 += 2;
      }
      while (v16 != v17);
      *(_QWORD *)(v14 + 152) = v19;
    }
    *(_WORD *)(v14 + 168) = v32;
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v23 = (char *)__p;
  if (__p)
  {
    v24 = v31;
    v25 = __p;
    if (v31 != __p)
    {
      do
      {
        v26 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v24 -= 16;
      }
      while (v24 != v23);
      v25 = __p;
    }
    v31 = v23;
    operator delete(v25);
  }
}

void sub_2235C751C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, void *a18)
{
  std::mutex *v18;
  void **v19;
  uint64_t v20;
  void **v22;
  char *v24;
  char *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  void **v34;

  v22 = v19;
  v34 = v22;
  v24 = (char *)*v22;
  if (*v22)
  {
    v25 = *(char **)(v20 + 152);
    v26 = *v22;
    if (v25 != v24)
    {
      do
      {
        v27 = (std::__shared_weak_count *)*((_QWORD *)v25 - 1);
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v25 -= 16;
      }
      while (v25 != v24);
      v26 = *v34;
    }
    *(_QWORD *)(v20 + 152) = v24;
    operator delete(v26);
  }
  std::mutex::unlock(v18);
  sub_2231B888C(&a18);
  if (a2 == 1)
  {
    v30 = (uint64_t *)__cxa_begin_catch(a1);
    v31 = *v30;
    a11 = *(_QWORD *)(*(_QWORD *)(*v30 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v31 + 16))();
    sub_2233233A4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v32 = (uint64_t *)&a12;
    else
      v32 = a12;
    if ((a17 & 0x80u) == 0)
      v33 = a17;
    else
      v33 = a13;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v32, v33, (void (*)(void **))sub_22457406C);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_2235C7680(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x2235C76A0);
}

uint64_t *sub_2235C76AC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x2276844A8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_2235C7798(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, char a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  MEMORY[0x2276844B4](&a11);
  JUMPOUT(0x2235C76F4);
}

uint64_t sub_2235C77D4(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 2);
  v5 = (_BYTE *)*((_QWORD *)a2 + 3);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_223257BE4();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = &v8[64 * (v7 >> 6)];
    memcpy(v8, v6, v7 & 0xFFFFFFFFFFFFFFC0);
    *(_QWORD *)(a1 + 24) = &v8[v7 & 0xFFFFFFFFFFFFFFC0];
  }
  *(_QWORD *)(a1 + 40) = &off_24EC20828;
  *(_QWORD *)(a1 + 48) = &off_24EC20868;
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
  v9 = *(__int128 *)((char *)a2 + 88);
  v10 = *(__int128 *)((char *)a2 + 104);
  *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 30);
  *(_OWORD *)(a1 + 104) = v10;
  *(_OWORD *)(a1 + 88) = v9;
  v11 = *((_QWORD *)a2 + 16);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = v11;
  *(_QWORD *)(a1 + 40) = &off_24EC207B8;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v13 = (_BYTE *)*((_QWORD *)a2 + 17);
  v12 = (_BYTE *)*((_QWORD *)a2 + 18);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      sub_22316E078();
    v15 = (char *)operator new(v12 - v13);
    *(_QWORD *)(a1 + 136) = v15;
    *(_QWORD *)(a1 + 144) = v15;
    v16 = &v15[16 * (v14 >> 4)];
    *(_QWORD *)(a1 + 152) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 144) = v16;
  }
  *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
  return a1;
}

void sub_2235C791C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;
  void *v5;
  void *v6;

  v5 = *v2;
  if (*v2)
  {
    v1[18] = v5;
    operator delete(v5);
  }
  v1[5] = v3;
  v6 = (void *)v1[2];
  if (v6)
  {
    v1[3] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2235C795C(_QWORD *a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;

  *a1 = &off_24EC4F7F8;
  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  a1[8] = &off_24EC20828;
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_2235C79C0(_QWORD *a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;

  *a1 = &off_24EC4F7F8;
  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  a1[8] = &off_24EC20828;
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235C7A34(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0xC0uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC4F7F8;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_2235C77D4((uint64_t)(v2 + 3), (__int128 *)(a1 + 24));
  return v3;
}

void sub_2235C7A98(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2235C7AB8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC4F7F8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return sub_2235C77D4((uint64_t)(a2 + 3), (__int128 *)(a1 + 24));
}

void sub_2235C7B10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_2235C7B28(_QWORD *a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;

  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  a1[8] = &off_24EC20828;
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void sub_2235C7B84(_QWORD *__p)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;

  v2 = (void *)__p[20];
  if (v2)
  {
    __p[21] = v2;
    operator delete(v2);
  }
  __p[8] = &off_24EC20828;
  v3 = (void *)__p[5];
  if (v3)
  {
    __p[6] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)__p[2];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(__p);
}

void sub_2235C7BDC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_2235C71BC((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_2235C76AC(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235C7C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_2235C76AC(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235C7CD0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17MappedStateBun"
                     "dleEvS7_Lb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17Map"
                                "pedStateBundleEvS7_Lb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17MappedStateBundleEvS7_Lb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17MappedStateBundleEvS7_Lb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235C7D3C()
{
  return &unk_24EC4F858;
}

_QWORD *sub_2235C7D48(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;

  v2 = (std::__shared_weak_count *)a1[24];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[19];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[19];
  if (v5)
  {
LABEL_6:
    a1[20] = v5;
    operator delete(v5);
  }
LABEL_7:
  a1[7] = &off_24EC20828;
  v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
  }
  v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  return a1;
}

void sub_2235C7DE4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC4F878;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2235C7DF4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC4F878;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t *sub_2235C7E24(uint64_t a1)
{
  return sub_2235C76AC((uint64_t *)(a1 + 24));
}

_QWORD *sub_2235C7E30(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC4F8C8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_2235C7EB8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC4F8C8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_2235C7F50(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC4F8C8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_2235C7FE0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC4F8C8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_2235C8050(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_2235C80D0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_2235C814C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_2235C71BC(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_2235C76AC((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2235C8428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_2235C8454(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x2235C8260);
    JUMPOUT(0x2235C8230);
  }
  sub_2233236D4(3u);
}

void sub_2235C84B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_2235C84DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_2235C76AC(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2235C85C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17MappedStateBun"
                     "dleEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_7ProcessERKS6_NSt3__17promiseIS7_EEEUlT_T0_E_EEvSB_SF_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17Map"
                                "pedStateBundleEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_7ProcessERKS6_NSt3__17promiseI"
                                "S7_EEEUlT_T0_E_EEvSB_SF_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17MappedStateBundleEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_7ProcessERKS6_NSt3__17promiseIS7_EEEUlT_T0_E_EEvSB_SF_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17MappedStateBundleEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_7ProcessERKS6_NSt3__17promiseIS7_EEEUlT_T0_E_EEvSB_SF_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235C8634()
{
  return &unk_24EC4F928;
}

_QWORD *sub_2235C8640(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;

  *a1 = &off_24EC4F948;
  v2 = (std::__shared_weak_count *)a1[25];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[20];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[20];
  if (v5)
  {
LABEL_6:
    a1[21] = v5;
    operator delete(v5);
  }
LABEL_7:
  a1[8] = &off_24EC20828;
  v6 = (void *)a1[5];
  if (v6)
  {
    a1[6] = v6;
    operator delete(v6);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  return a1;
}

void sub_2235C86E8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;

  *a1 = &off_24EC4F948;
  v2 = (std::__shared_weak_count *)a1[25];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)a1[20];
    if (!v5)
    {
LABEL_7:
      a1[8] = &off_24EC20828;
      v6 = (void *)a1[5];
      if (v6)
      {
        a1[6] = v6;
        operator delete(v6);
      }
      v7 = (std::__shared_weak_count *)a1[2];
      if (v7)
        std::__shared_weak_count::__release_weak(v7);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (void *)a1[20];
    if (!v5)
      goto LABEL_7;
  }
  a1[21] = v5;
  operator delete(v5);
  goto LABEL_7;
}

_QWORD *sub_2235C87A0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = operator new(0xD0uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC4F948;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_2235C77D4((uint64_t)(v2 + 3), (__int128 *)(a1 + 24));
  v8 = *(_QWORD *)(a1 + 200);
  v3[24] = *(_QWORD *)(a1 + 192);
  v3[25] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return v3;
}

void sub_2235C8824(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2235C8844(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC4F948;
  a2[1] = v5;
  a2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = sub_2235C77D4((uint64_t)(a2 + 3), (__int128 *)(a1 + 24));
  v9 = *(_QWORD *)(a1 + 200);
  a2[24] = *(_QWORD *)(a1 + 192);
  a2[25] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_2235C88BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_2235C88D4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;

  v2 = (std::__shared_weak_count *)a1[25];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[20];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[20];
  if (v5)
  {
LABEL_6:
    a1[21] = v5;
    operator delete(v5);
  }
LABEL_7:
  a1[8] = &off_24EC20828;
  v6 = (void *)a1[5];
  if (v6)
  {
    a1[6] = v6;
    operator delete(v6);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void sub_2235C8974(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;

  v2 = (std::__shared_weak_count *)__p[25];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)__p[20];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)__p[20];
  if (v5)
  {
LABEL_6:
    __p[21] = v5;
    operator delete(v5);
  }
LABEL_7:
  __p[8] = &off_24EC20828;
  v6 = (void *)__p[5];
  if (v6)
  {
    __p[6] = v6;
    operator delete(v6);
  }
  v7 = (std::__shared_weak_count *)__p[2];
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  operator delete(__p);
}

void sub_2235C8A10(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[24];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_2235C71BC((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_2235C76AC((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_2235C8B20(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_2235C8B98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x2235C8BCCLL);
  JUMPOUT(0x2235C8BFCLL);
}

uint64_t sub_2235C8C04(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17MappedStateBun"
                     "dleEvS7_Lb0EE7ProcessERKS6_NSt3__17promiseIS7_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17Map"
                                "pedStateBundleEvS7_Lb0EE7ProcessERKS6_NSt3__17promiseIS7_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17MappedStateBundleEvS7_Lb0EE7ProcessERKS6_NSt3__17promiseIS7_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17MappedStateBundleEvS7_Lb0EE7ProcessERKS6_NSt3__17promiseIS7_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235C8C70()
{
  return &unk_24EC4F9A8;
}

_QWORD *sub_2235C8C7C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC4F9C8;
  v2 = a1[4];
  a1[3] = &off_24EC48EF8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2235C8CD4(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC4F9C8;
  v2 = a1[4];
  a1[3] = &off_24EC48EF8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235C8D3C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC4F9C8;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC48EF8;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_2235C8DB4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2235C8DD4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC4F9C8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC48EF8;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_2235C8E3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_2235C8E54(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC48EF8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_2235C8EA4(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC48EF8;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_2235C8EF0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC48EF8;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235C8FA4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235C8FE0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17MappedStateBund"
                     "leEvS7_Lb0EE9SubscribeENS1_12ChannelInputIS7_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17Mapp"
                                "edStateBundleEvS7_Lb0EE9SubscribeENS1_12ChannelInputIS7_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17MappedStateBundleEvS7_Lb0EE9SubscribeENS1_12ChannelInputIS7_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17MappedStateBundleEvS7_Lb0EE9SubscribeENS1_12ChannelInputIS7_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235C904C()
{
  return &unk_24EC4FA28;
}

_QWORD *sub_2235C9058(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC4FA48;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235C9090(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC4FA48;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235C90D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC4FA48;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2235C9128(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC4FA48;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2235C9158(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235C9168(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235C9194(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235C9228(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235C9264(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17MappedStateBund"
                     "leEvS7_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17Mapp"
                                "edStateBundleEvS7_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17MappedStateBundleEvS7_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17MappedStateBundleEvS7_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235C92D0()
{
  return &unk_24EC4FAA8;
}

_QWORD *sub_2235C92DC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC4FAC8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235C9314(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC4FAC8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235C935C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC4FAC8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2235C93B4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC4FAC8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2235C93EC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235C93FC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235C9428(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_2235C95A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235C9614(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17MappedStateBun"
                     "dleEvS7_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17Map"
                                "pedStateBundleEvS7_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17MappedStateBundleEvS7_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17MappedStateBundleEvS7_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235C9680()
{
  return &unk_24EC4FB28;
}

_QWORD *sub_2235C968C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC4FB48;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235C96C4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC4FB48;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235C970C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC4FB48;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2235C9764(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC4FB48;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2235C979C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235C97AC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235C97D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235C9890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235C98DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17MappedStateBun"
                     "dleEvS7_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17Map"
                                "pedStateBundleEvS7_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17MappedStateBundleEvS7_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame18MappedStateRequestENS5_17MappedStateBundleEvS7_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235C9948()
{
  return &unk_24EC4FBA8;
}

void sub_2235C9958(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2235C997C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2235C9994(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon5frame18MappedStateRequestEN"
                     "S7_17MappedStateBundleEvS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon5frame18MappedSta"
                                "teRequestENS7_17MappedStateBundleEvS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon5frame18MappedStateRequestENS7_17MappedStateBundleEvS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon5frame18MappedStateRequestENS7_17MappedStateBundleEvS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2235C9A04(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235C9A30(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235C9A6C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC4FC18;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_2235C9AD4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235C9B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235C9B78(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235C9C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235C9C1C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2235C9CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235C9CF4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2235C9DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235C9DCC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2235C9E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235C9E88(uint64_t a1)
{
  sub_2235CB688(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2235C9EAC(_QWORD *a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count **v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  std::mutex **v22;
  uint64_t **v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t **v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 *v51;
  _BYTE v52[24];
  _BYTE *v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v2 = (uint64_t *)a1[18];
  if (v2)
  {
    v3 = (std::__shared_weak_count *)operator new(0x20uLL);
    v3->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    v3->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC4FE90;
    v6 = v3 + 1;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v8 = (_QWORD *)operator new();
    *v8 = v2 + 7;
    std::mutex::lock((std::mutex *)(v2 + 7));
    *(_QWORD *)&v49 = v8;
    *((_QWORD *)&v49 + 1) = v2;
    if (!*((_BYTE *)v2 + 48))
      sub_22324A974();
    v9 = v2[4];
    v10 = *v2;
    v11 = (std::__shared_weak_count **)(*v2 + 16 * v9);
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    *v11 = v6;
    v13 = v10 + 16 * v9;
    v14 = *(std::__shared_weak_count **)(v13 + 8);
    *(_QWORD *)(v13 + 8) = v3;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (v2[1] - *v2) >> 4;
    v18 = v2[5];
    v19 = v2[4] + 1;
    if (v19 >= v17)
      v20 = (v2[1] - *v2) >> 4;
    else
      v20 = 0;
    v2[4] = v19 - v20;
    if (v18 == v17)
    {
      v21 = v2[3] + 1;
      if (v21 < v17)
        v17 = 0;
      v2[3] = v21 - v17;
      v22 = (std::mutex **)v49;
      if (!(_QWORD)v49)
      {
LABEL_33:
        v32 = (uint64_t **)a1[9];
        v49 = 0uLL;
        v33 = (std::__shared_weak_count *)a1[5];
        if (v33)
        {
          v34 = std::__shared_weak_count::lock(v33);
          if (v34)
          {
            v35 = v34;
            v36 = a1[4];
            v37 = (unint64_t *)&v34->__shared_weak_owners_;
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
            *(_QWORD *)&v49 = v36;
            *((_QWORD *)&v49 + 1) = v34;
            v39 = (unint64_t *)&v34->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          else
          {
            v49 = 0uLL;
          }
        }
        v41 = (char *)operator new(0x30uLL);
        *(_QWORD *)v41 = &off_24EC4FEE0;
        *(_OWORD *)(v41 + 8) = v49;
        v49 = 0uLL;
        *((_QWORD *)v41 + 3) = v6;
        *((_QWORD *)v41 + 4) = v3;
        v50 = 0;
        v51 = 0;
        v53 = v41;
        sub_2245022E4(*v32, (uint64_t)v52);
        v42 = v53;
        if (v53 == v52)
        {
          v43 = 4;
          v42 = v52;
        }
        else
        {
          if (!v53)
            goto LABEL_47;
          v43 = 5;
        }
        (*(void (**)(_QWORD *))(*v42 + 8 * v43))(v42);
LABEL_47:
        if (v3)
        {
          v44 = (unint64_t *)&v3->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
        return;
      }
    }
    else
    {
      v2[5] = v18 + 1;
      v22 = (std::mutex **)v49;
      if (!(_QWORD)v49)
        goto LABEL_33;
    }
    std::mutex::unlock(*v22);
    MEMORY[0x227684CE8](v22, 0x20C4093837F09);
    goto LABEL_33;
  }
  v23 = (uint64_t **)a1[9];
  v24 = (std::__shared_weak_count *)a1[5];
  if (v24)
  {
    v25 = std::__shared_weak_count::lock(v24);
    v26 = v25;
    if (v25)
    {
      v27 = a1[4];
      v28 = (unint64_t *)&v25->__shared_weak_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      v30 = (unint64_t *)&v25->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    else
    {
      v27 = 0;
    }
  }
  else
  {
    v27 = 0;
    v26 = 0;
  }
  v46 = (__int128 *)operator new(0x20uLL);
  *(_QWORD *)v46 = &off_24EC4FF60;
  *((_QWORD *)v46 + 1) = v27;
  *((_QWORD *)v46 + 2) = v26;
  v51 = v46;
  sub_2245022E4(*v23, (uint64_t)&v49);
  v47 = v51;
  if (v51 == &v49)
  {
    v48 = 4;
    v47 = &v49;
  }
  else
  {
    if (!v51)
      return;
    v48 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
}

void sub_2235CA2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235CA3A0(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2235CA3B0(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2235CA3BC(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_2235CA3CC(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count **v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  std::string *v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  __int128 *v62;
  std::string *v63;
  std::runtime_error *exception;
  std::runtime_error *v65;
  __int128 v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  std::runtime_error v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  __int128 v73;
  _QWORD *v74;
  __int128 *v75;
  _QWORD v76[3];
  std::string v77;
  std::string *v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v73 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v73 + 1) = 45;
    v61 = (_QWORD *)a1[6];
    v60 = a1 + 6;
    v59 = v61;
    v62 = (__int128 *)*((unsigned __int8 *)v60 + 23);
    if ((char)v62 < 0)
      v62 = (__int128 *)v60[1];
    else
      v59 = v60;
    v74 = v59;
    v75 = v62;
    sub_2231A9820((uint64_t)&v73, (uint64_t)v76, 0, 0, &v77);
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = &v77;
    else
      v63 = (std::string *)v77.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v70, (const char *)v63);
    v70.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v65 = std::runtime_error::runtime_error(exception, &v70);
    v65->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v65, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC4FFE0;
    v5[1].__vftable = *a3;
    v69 = v5;
    v67 = &v5[1].__vftable;
    v68 = v5;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    *a3 = 0;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__shared_owners_ = 0;
    v9 = (unint64_t *)&v8->__shared_owners_;
    v8->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC4FE90;
    v11 = v8 + 1;
    v71 = v8 + 1;
    v72 = v8;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    v13 = (uint64_t *)a1[18];
    v14 = (_QWORD *)operator new();
    *v14 = v13 + 7;
    std::mutex::lock((std::mutex *)(v13 + 7));
    *(_QWORD *)&v73 = v14;
    *((_QWORD *)&v73 + 1) = v13;
    if (!*((_BYTE *)v13 + 48))
      sub_22324A974();
    v15 = v13[4];
    v16 = *v13;
    v17 = (std::__shared_weak_count **)(*v13 + 16 * v15);
    do
      v18 = __ldxr(v9);
    while (__stxr(v18 + 1, v9));
    *v17 = v11;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v8;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v13[1] - *v13) >> 4;
    v24 = v13[5];
    v25 = v13[4] + 1;
    if (v25 >= v23)
      v26 = (v13[1] - *v13) >> 4;
    else
      v26 = 0;
    v13[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v13[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v13[3] = v27 - v23;
      v28 = (std::mutex **)v73;
      if (!(_QWORD)v73)
      {
LABEL_37:
        v38 = (uint64_t **)a1[9];
        v73 = 0uLL;
        v39 = (std::__shared_weak_count *)a1[5];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
          {
            v41 = v40;
            v42 = a1[4];
            v43 = (unint64_t *)&v40->__shared_weak_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            *(_QWORD *)&v73 = v42;
            *((_QWORD *)&v73 + 1) = v40;
            v45 = (unint64_t *)&v40->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v73 = 0uLL;
          }
        }
        v47 = (char *)operator new(0x38uLL);
        *(_QWORD *)v47 = &off_24EC50030;
        *(_OWORD *)(v47 + 8) = v73;
        v73 = 0uLL;
        *((_QWORD *)v47 + 3) = v11;
        *((_QWORD *)v47 + 4) = v8;
        v74 = 0;
        v75 = 0;
        *((_QWORD *)v47 + 5) = v67;
        *((_QWORD *)v47 + 6) = v68;
        v76[0] = 0;
        v76[1] = 0;
        v78 = (std::string *)v47;
        sub_2245022E4(*v38, (uint64_t)&v77);
        v48 = v78;
        if (v78 == &v77)
        {
          v49 = 4;
          v48 = &v77;
        }
        else
        {
          if (!v78)
            goto LABEL_51;
          v49 = 5;
        }
        (*(void (**)(void))(v48->__r_.__value_.__r.__words[0] + 8 * v49))();
LABEL_51:
        if (v72)
        {
          v50 = &v72->__shared_owners_;
          do
            v51 = __ldaxr((unint64_t *)v50);
          while (__stlxr(v51 - 1, (unint64_t *)v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        if (v69)
        {
          v52 = (unint64_t *)&v69->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        return;
      }
    }
    else
    {
      v13[5] = v24 + 1;
      v28 = (std::mutex **)v73;
      if (!(_QWORD)v73)
        goto LABEL_37;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x227684CE8](v28, 0x20C4093837F09);
    goto LABEL_37;
  }
  v29 = (uint64_t **)a1[9];
  v66 = 0uLL;
  v30 = (std::__shared_weak_count *)a1[5];
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    if (v31)
    {
      v32 = v31;
      v33 = a1[4];
      v34 = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      *(_QWORD *)&v66 = v33;
      *((_QWORD *)&v66 + 1) = v31;
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      v66 = 0uLL;
    }
  }
  v54 = operator new(0x20uLL);
  v54[1] = 0;
  v54[2] = 0;
  *v54 = &off_24EC4FFE0;
  v54[3] = *a3;
  *a3 = 0;
  v55 = (char *)operator new(0x30uLL);
  *(_QWORD *)v55 = &off_24EC500B0;
  *(_OWORD *)(v55 + 8) = v66;
  *((_QWORD *)v55 + 4) = v54 + 3;
  *((_QWORD *)v55 + 5) = v54;
  v75 = (__int128 *)v55;
  sub_2245022E4(*v29, (uint64_t)&v73);
  v57 = v75;
  if (v75 == &v73)
  {
    v58 = 4;
    v57 = &v73;
  }
  else
  {
    if (!v75)
      return;
    v58 = 5;
  }
  (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)v57 + 8 * v58))(v57, v56);
}

void sub_2235CA9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  std::__assoc_sub_state **v22;
  uint64_t v23;
  std::__assoc_sub_state *v24;
  std::exception_ptr v25;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v24 = *v22;
    if (*v22)
    {
      std::exception_ptr::exception_ptr(&a22, &a19);
      v25.__ptr_ = &a22;
      std::__assoc_sub_state::set_exception(v24, v25);
      std::exception_ptr::~exception_ptr(&a22);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (*(char *)(v23 - 81) < 0)
        operator delete(*(void **)(v23 - 104));
      JUMPOUT(0x2235CA8E4);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_2235CAA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  uint64_t v22;

  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (*(char *)(v22 - 81) < 0)
  {
    operator delete(*(void **)(v22 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2235CAA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a26;
  if (a26 == v26)
  {
    v29 = 4;
    v28 = &a23;
  }
  else
  {
    if (!a26)
    {
      sub_22334FD8C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
  sub_22334FD8C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235CAAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2235CAB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_22332429C((uint64_t *)va3);
  sub_223167354((uint64_t)va2);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2235CABB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2235CABCC(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_2235CAC40(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC50130;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC48DB8;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_2235CAD70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2235CADE4(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC501B0;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2235CAEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2235CAF58@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC50230;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2235CB170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_2235CB238@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC502B0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2235CB450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235CB518(uint64_t a1)
{
  return sub_2235CB688(a1 - 16);
}

void sub_2235CB520(uint64_t a1)
{
  sub_2235CB688(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235CB548(uint64_t a1, uint64_t a2)
{
  return sub_2235CAC40((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2235CB550@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2235CAF58((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2235CB558@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2235CB238((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_2235CB560(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_2235CB568(uint64_t a1)
{
  return sub_2235CB688(a1 - 24);
}

void sub_2235CB570(uint64_t a1)
{
  sub_2235CB688(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235CB598(uint64_t a1)
{
  return sub_2235CADE4((_QWORD *)(a1 - 24));
}

uint64_t sub_2235CB5A0(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_2235CB5A8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2235CB610(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2235CB678(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_2235CB688(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC4FC90;
  *(_QWORD *)(a1 + 16) = &unk_24EC4FD08;
  *(_QWORD *)(a1 + 24) = &unk_24EC4FD48;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_2235CB888(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC4FE90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2235CB898(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC4FE90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235CB8D0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC4FEE0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2235CB914(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC4FEE0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235CB968(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC4FEE0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_2235CB9D8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC4FEE0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2235CBA28(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_2235CBA64(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_2235CBA9C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_2235CBDC0((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_2235CC310(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2235CBC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_2235CC310(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235CBD48(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE25Enq"
                     "ueueMessageAndDispatchIZNKS9_4SendERKS6_EUlT_T0_E_EEvSC_SD_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8"
                                "_Lb0EE25EnqueueMessageAndDispatchIZNKS9_4SendERKS6_EUlT_T0_E_EEvSC_SD_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE25EnqueueMessageAndDispatchIZNKS9_4SendERKS6_EUlT_T0_E_EEvSC_SD_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE25EnqueueMessageAndDispatchIZNKS9_4SendERKS6_EUlT_T0_E_EEvSC_SD_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235CBDB4()
{
  return &unk_24EC4FF40;
}

void sub_2235CBDC0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::exception_ptr v34;
  void *__p;
  char *v36;
  char v37;

  v6 = *a1;
  if (!v6)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    v7 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (byte_255795670)
      v8 = byte_255795678 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_255795648;
      for (i = qword_255795650; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&__p, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, void **))(j[2] + 16))(j + 2, &__p);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_2233236D4(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v34.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v34), v15))
    {
      sub_2233236D4(2u);
    }
    *(_QWORD *)(v14 + 144) = 0;
    *(_QWORD *)(v14 + 152) = 0;
    *(_QWORD *)(v14 + 160) = 0;
    v16 = (char *)__p;
    v17 = v36;
    v18 = v36 - (_BYTE *)__p;
    if (v36 != __p)
    {
      v19 = 0xEEEEEEEEEEEEEEEFLL * (v18 >> 3);
      if (v19 >= 0x222222222222223)
        sub_22316E078();
      v20 = (char *)operator new(v18);
      *(_QWORD *)(v14 + 144) = v20;
      *(_QWORD *)(v14 + 152) = v20;
      *(_QWORD *)(v14 + 160) = &v20[120 * v19];
      do
      {
        *(_OWORD *)v20 = *(_OWORD *)v16;
        *((_QWORD *)v20 + 2) = *((_QWORD *)v16 + 2);
        v22 = *((_QWORD *)v16 + 3);
        *((_QWORD *)v20 + 3) = v22;
        if (v22)
        {
          v23 = (unint64_t *)(v22 + 8);
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        v20[32] = 0;
        v20[96] = 0;
        if (v16[96])
        {
          v25 = *((_OWORD *)v16 + 2);
          v26 = *((_OWORD *)v16 + 3);
          v27 = *((_OWORD *)v16 + 5);
          *((_OWORD *)v20 + 4) = *((_OWORD *)v16 + 4);
          *((_OWORD *)v20 + 5) = v27;
          *((_OWORD *)v20 + 2) = v25;
          *((_OWORD *)v20 + 3) = v26;
          v20[96] = 1;
        }
        v21 = *(_OWORD *)(v16 + 100);
        v20[116] = v16[116];
        *(_OWORD *)(v20 + 100) = v21;
        v16 += 120;
        v20 += 120;
      }
      while (v16 != v17);
      *(_QWORD *)(v14 + 152) = v20;
    }
    *(_BYTE *)(v14 + 168) = v37;
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v28 = (char *)__p;
  if (__p)
  {
    v29 = v36;
    v30 = __p;
    if (v36 != __p)
    {
      do
      {
        v31 = (std::__shared_weak_count *)*((_QWORD *)v29 - 12);
        if (v31)
        {
          p_shared_owners = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(p_shared_owners);
          while (__stlxr(v33 - 1, p_shared_owners));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v29 -= 120;
      }
      while (v29 != v28);
      v30 = __p;
    }
    v36 = v28;
    operator delete(v30);
  }
}

void sub_2235CC180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, void *a18)
{
  std::mutex *v18;
  void **v19;
  uint64_t v20;
  void **v22;
  char *v24;
  char *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  void **v34;

  v22 = v19;
  v34 = v22;
  v24 = (char *)*v22;
  if (*v22)
  {
    v25 = *(char **)(v20 + 152);
    v26 = *v22;
    if (v25 != v24)
    {
      do
      {
        v27 = (std::__shared_weak_count *)*((_QWORD *)v25 - 12);
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v25 -= 120;
      }
      while (v25 != v24);
      v26 = *v34;
    }
    *(_QWORD *)(v20 + 152) = v24;
    operator delete(v26);
  }
  std::mutex::unlock(v18);
  sub_223295868(&a18);
  if (a2 == 1)
  {
    v30 = (uint64_t *)__cxa_begin_catch(a1);
    v31 = *v30;
    a11 = *(_QWORD *)(*(_QWORD *)(*v30 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v31 + 16))();
    sub_2233233A4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v32 = (uint64_t *)&a12;
    else
      v32 = a12;
    if ((a17 & 0x80u) == 0)
      v33 = a17;
    else
      v33 = a13;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v32, v33, (void (*)(void **))sub_22457406C);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_2235CC2E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x2235CC304);
}

uint64_t *sub_2235CC310(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x2276844A8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_2235CC3FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, char a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  MEMORY[0x2276844B4](&a11);
  JUMPOUT(0x2235CC358);
}

_QWORD *sub_2235CC438(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC4FF60;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235CC470(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC4FF60;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235CC4B8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC4FF60;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2235CC508(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC4FF60;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2235CC538(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235CC548(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235CC574(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_2235CBDC0((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_2235CC310(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235CC61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_2235CC310(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235CC668(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8"
                                "_Lb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235CC6D4()
{
  return &unk_24EC4FFC0;
}

void sub_2235CC6E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC4FFE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2235CC6F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC4FFE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t *sub_2235CC720(uint64_t a1)
{
  return sub_2235CC310((uint64_t *)(a1 + 24));
}

_QWORD *sub_2235CC72C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC50030;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_2235CC7B4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC50030;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_2235CC84C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC50030;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_2235CC8DC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC50030;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_2235CC94C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_2235CC9CC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_2235CCA48(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_2235CBDC0(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_2235CC310((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2235CCD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_2235CCD50(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x2235CCB5CLL);
    JUMPOUT(0x2235CCB2CLL);
  }
  sub_2233236D4(3u);
}

void sub_2235CCDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_2235CCDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_2235CC310(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2235CCEC4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE25Enq"
                     "ueueMessageAndDispatchIZNKS9_7ProcessERKS6_NSt3__17promiseIS8_EEEUlT_T0_E_EEvSC_SG_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8"
                                "_Lb0EE25EnqueueMessageAndDispatchIZNKS9_7ProcessERKS6_NSt3__17promiseIS8_EEEUlT_T0_E_EEvSC_SG_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE25EnqueueMessageAndDispatchIZNKS9_7ProcessERKS6_NSt3__17promiseIS8_EEEUlT_T0_E_EEvSC_SG_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE25EnqueueMessageAndDispatchIZNKS9_7ProcessERKS6_NSt3__17promiseIS8_EEEUlT_T0_E_EEvSC_SG_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235CCF30()
{
  return &unk_24EC50090;
}

_QWORD *sub_2235CCF3C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC500B0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_2235CCFB8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC500B0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235CD044(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC500B0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[5];
  result[4] = a1[4];
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_2235CD0B4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC500B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[5];
  a2[4] = result[4];
  a2[5] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2235CD104(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_2235CD174(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_2235CD1E4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_2235CBDC0((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_2235CC310((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_2235CD2F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_2235CD36C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x2235CD3A0);
  JUMPOUT(0x2235CD3D0);
}

uint64_t sub_2235CD3D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE7Proc"
                     "essERKS6_NSt3__17promiseIS8_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8"
                                "_Lb0EE7ProcessERKS6_NSt3__17promiseIS8_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE7ProcessERKS6_NSt3__17promiseIS8_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE7ProcessERKS6_NSt3__17promiseIS8_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235CD444()
{
  return &unk_24EC50110;
}

_QWORD *sub_2235CD450(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC50130;
  v2 = a1[4];
  a1[3] = &off_24EC48DB8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2235CD4A8(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC50130;
  v2 = a1[4];
  a1[3] = &off_24EC48DB8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235CD510(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC50130;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC48DB8;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_2235CD588(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2235CD5A8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC50130;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC48DB8;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_2235CD610(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_2235CD628(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC48DB8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_2235CD678(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC48DB8;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_2235CD6C4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC48DB8;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235CD778(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235CD7B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE9Subsc"
                     "ribeENS1_12ChannelInputIS8_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_"
                                "Lb0EE9SubscribeENS1_12ChannelInputIS8_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE9SubscribeENS1_12ChannelInputIS8_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE9SubscribeENS1_12ChannelInputIS8_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235CD820()
{
  return &unk_24EC50190;
}

_QWORD *sub_2235CD82C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC501B0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235CD864(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC501B0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235CD8AC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC501B0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2235CD8FC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC501B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2235CD92C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235CD93C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235CD968(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235CD9FC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235CDA38(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE15AddE"
                     "rrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_"
                                "Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235CDAA4()
{
  return &unk_24EC50210;
}

_QWORD *sub_2235CDAB0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC50230;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235CDAE8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC50230;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235CDB30(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC50230;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2235CDB88(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC50230;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2235CDBC0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235CDBD0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235CDBFC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_2235CDD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235CDDE8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE16Out"
                     "putHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8"
                                "_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235CDE54()
{
  return &unk_24EC50290;
}

_QWORD *sub_2235CDE60(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC502B0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235CDE98(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC502B0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235CDEE0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC502B0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2235CDF38(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC502B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2235CDF70(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235CDF80(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235CDFAC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235CE064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235CE0B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE15Err"
                     "orHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8"
                                "_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng8PRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235CE11C()
{
  return &unk_24EC50310;
}

void sub_2235CE12C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2235CE150(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2235CE168(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng8PRRQueryENS6_3vlm9PRRRe"
                     "sultEvSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng8PRRQueryENS6"
                                "_3vlm9PRRResultEvSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng8PRRQueryENS6_3vlm9PRRResultEvSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng8PRRQueryENS6_3vlm9PRRResultEvSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2235CE1D8(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235CE204(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235CE240@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC50380;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_2235CE2A8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235CE338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235CE34C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235CE3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235CE3F0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2235CE4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235CE4C8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2235CE58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235CE5A0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2235CE644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235CE65C(uint64_t a1)
{
  sub_2235CFE5C(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2235CE680(_QWORD *a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count **v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  std::mutex **v22;
  uint64_t **v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t **v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 *v51;
  _BYTE v52[24];
  _BYTE *v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v2 = (uint64_t *)a1[18];
  if (v2)
  {
    v3 = (std::__shared_weak_count *)operator new(0x20uLL);
    v3->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    v3->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC505E8;
    v6 = v3 + 1;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v8 = (_QWORD *)operator new();
    *v8 = v2 + 7;
    std::mutex::lock((std::mutex *)(v2 + 7));
    *(_QWORD *)&v49 = v8;
    *((_QWORD *)&v49 + 1) = v2;
    if (!*((_BYTE *)v2 + 48))
      sub_22324A974();
    v9 = v2[4];
    v10 = *v2;
    v11 = (std::__shared_weak_count **)(*v2 + 16 * v9);
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    *v11 = v6;
    v13 = v10 + 16 * v9;
    v14 = *(std::__shared_weak_count **)(v13 + 8);
    *(_QWORD *)(v13 + 8) = v3;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (v2[1] - *v2) >> 4;
    v18 = v2[5];
    v19 = v2[4] + 1;
    if (v19 >= v17)
      v20 = (v2[1] - *v2) >> 4;
    else
      v20 = 0;
    v2[4] = v19 - v20;
    if (v18 == v17)
    {
      v21 = v2[3] + 1;
      if (v21 < v17)
        v17 = 0;
      v2[3] = v21 - v17;
      v22 = (std::mutex **)v49;
      if (!(_QWORD)v49)
      {
LABEL_33:
        v32 = (uint64_t **)a1[9];
        v49 = 0uLL;
        v33 = (std::__shared_weak_count *)a1[5];
        if (v33)
        {
          v34 = std::__shared_weak_count::lock(v33);
          if (v34)
          {
            v35 = v34;
            v36 = a1[4];
            v37 = (unint64_t *)&v34->__shared_weak_owners_;
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
            *(_QWORD *)&v49 = v36;
            *((_QWORD *)&v49 + 1) = v34;
            v39 = (unint64_t *)&v34->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          else
          {
            v49 = 0uLL;
          }
        }
        v41 = (char *)operator new(0x30uLL);
        *(_QWORD *)v41 = &off_24EC50638;
        *(_OWORD *)(v41 + 8) = v49;
        v49 = 0uLL;
        *((_QWORD *)v41 + 3) = v6;
        *((_QWORD *)v41 + 4) = v3;
        v50 = 0;
        v51 = 0;
        v53 = v41;
        sub_2245022E4(*v32, (uint64_t)v52);
        v42 = v53;
        if (v53 == v52)
        {
          v43 = 4;
          v42 = v52;
        }
        else
        {
          if (!v53)
            goto LABEL_47;
          v43 = 5;
        }
        (*(void (**)(_QWORD *))(*v42 + 8 * v43))(v42);
LABEL_47:
        if (v3)
        {
          v44 = (unint64_t *)&v3->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
        return;
      }
    }
    else
    {
      v2[5] = v18 + 1;
      v22 = (std::mutex **)v49;
      if (!(_QWORD)v49)
        goto LABEL_33;
    }
    std::mutex::unlock(*v22);
    MEMORY[0x227684CE8](v22, 0x20C4093837F09);
    goto LABEL_33;
  }
  v23 = (uint64_t **)a1[9];
  v24 = (std::__shared_weak_count *)a1[5];
  if (v24)
  {
    v25 = std::__shared_weak_count::lock(v24);
    v26 = v25;
    if (v25)
    {
      v27 = a1[4];
      v28 = (unint64_t *)&v25->__shared_weak_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      v30 = (unint64_t *)&v25->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    else
    {
      v27 = 0;
    }
  }
  else
  {
    v27 = 0;
    v26 = 0;
  }
  v46 = (__int128 *)operator new(0x20uLL);
  *(_QWORD *)v46 = &off_24EC506B8;
  *((_QWORD *)v46 + 1) = v27;
  *((_QWORD *)v46 + 2) = v26;
  v51 = v46;
  sub_2245022E4(*v23, (uint64_t)&v49);
  v47 = v51;
  if (v51 == &v49)
  {
    v48 = 4;
    v47 = &v49;
  }
  else
  {
    if (!v51)
      return;
    v48 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
}

void sub_2235CEA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235CEB74(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2235CEB84(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2235CEB90(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_2235CEBA0(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count **v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  std::string *v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  __int128 *v62;
  std::string *v63;
  std::runtime_error *exception;
  std::runtime_error *v65;
  __int128 v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  std::runtime_error v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  __int128 v73;
  _QWORD *v74;
  __int128 *v75;
  _QWORD v76[3];
  std::string v77;
  std::string *v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v73 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v73 + 1) = 45;
    v61 = (_QWORD *)a1[6];
    v60 = a1 + 6;
    v59 = v61;
    v62 = (__int128 *)*((unsigned __int8 *)v60 + 23);
    if ((char)v62 < 0)
      v62 = (__int128 *)v60[1];
    else
      v59 = v60;
    v74 = v59;
    v75 = v62;
    sub_2231A9820((uint64_t)&v73, (uint64_t)v76, 0, 0, &v77);
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = &v77;
    else
      v63 = (std::string *)v77.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v70, (const char *)v63);
    v70.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v65 = std::runtime_error::runtime_error(exception, &v70);
    v65->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v65, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC4FFE0;
    v5[1].__vftable = *a3;
    v69 = v5;
    v67 = &v5[1].__vftable;
    v68 = v5;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    *a3 = 0;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__shared_owners_ = 0;
    v9 = (unint64_t *)&v8->__shared_owners_;
    v8->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC505E8;
    v11 = v8 + 1;
    v71 = v8 + 1;
    v72 = v8;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    v13 = (uint64_t *)a1[18];
    v14 = (_QWORD *)operator new();
    *v14 = v13 + 7;
    std::mutex::lock((std::mutex *)(v13 + 7));
    *(_QWORD *)&v73 = v14;
    *((_QWORD *)&v73 + 1) = v13;
    if (!*((_BYTE *)v13 + 48))
      sub_22324A974();
    v15 = v13[4];
    v16 = *v13;
    v17 = (std::__shared_weak_count **)(*v13 + 16 * v15);
    do
      v18 = __ldxr(v9);
    while (__stxr(v18 + 1, v9));
    *v17 = v11;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v8;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v13[1] - *v13) >> 4;
    v24 = v13[5];
    v25 = v13[4] + 1;
    if (v25 >= v23)
      v26 = (v13[1] - *v13) >> 4;
    else
      v26 = 0;
    v13[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v13[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v13[3] = v27 - v23;
      v28 = (std::mutex **)v73;
      if (!(_QWORD)v73)
      {
LABEL_37:
        v38 = (uint64_t **)a1[9];
        v73 = 0uLL;
        v39 = (std::__shared_weak_count *)a1[5];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
          {
            v41 = v40;
            v42 = a1[4];
            v43 = (unint64_t *)&v40->__shared_weak_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            *(_QWORD *)&v73 = v42;
            *((_QWORD *)&v73 + 1) = v40;
            v45 = (unint64_t *)&v40->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v73 = 0uLL;
          }
        }
        v47 = (char *)operator new(0x38uLL);
        *(_QWORD *)v47 = &off_24EC50738;
        *(_OWORD *)(v47 + 8) = v73;
        v73 = 0uLL;
        *((_QWORD *)v47 + 3) = v11;
        *((_QWORD *)v47 + 4) = v8;
        v74 = 0;
        v75 = 0;
        *((_QWORD *)v47 + 5) = v67;
        *((_QWORD *)v47 + 6) = v68;
        v76[0] = 0;
        v76[1] = 0;
        v78 = (std::string *)v47;
        sub_2245022E4(*v38, (uint64_t)&v77);
        v48 = v78;
        if (v78 == &v77)
        {
          v49 = 4;
          v48 = &v77;
        }
        else
        {
          if (!v78)
            goto LABEL_51;
          v49 = 5;
        }
        (*(void (**)(void))(v48->__r_.__value_.__r.__words[0] + 8 * v49))();
LABEL_51:
        if (v72)
        {
          v50 = &v72->__shared_owners_;
          do
            v51 = __ldaxr((unint64_t *)v50);
          while (__stlxr(v51 - 1, (unint64_t *)v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        if (v69)
        {
          v52 = (unint64_t *)&v69->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        return;
      }
    }
    else
    {
      v13[5] = v24 + 1;
      v28 = (std::mutex **)v73;
      if (!(_QWORD)v73)
        goto LABEL_37;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x227684CE8](v28, 0x20C4093837F09);
    goto LABEL_37;
  }
  v29 = (uint64_t **)a1[9];
  v66 = 0uLL;
  v30 = (std::__shared_weak_count *)a1[5];
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    if (v31)
    {
      v32 = v31;
      v33 = a1[4];
      v34 = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      *(_QWORD *)&v66 = v33;
      *((_QWORD *)&v66 + 1) = v31;
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      v66 = 0uLL;
    }
  }
  v54 = operator new(0x20uLL);
  v54[1] = 0;
  v54[2] = 0;
  *v54 = &off_24EC4FFE0;
  v54[3] = *a3;
  *a3 = 0;
  v55 = (char *)operator new(0x30uLL);
  *(_QWORD *)v55 = &off_24EC507B8;
  *(_OWORD *)(v55 + 8) = v66;
  *((_QWORD *)v55 + 4) = v54 + 3;
  *((_QWORD *)v55 + 5) = v54;
  v75 = (__int128 *)v55;
  sub_2245022E4(*v29, (uint64_t)&v73);
  v57 = v75;
  if (v75 == &v73)
  {
    v58 = 4;
    v57 = &v73;
  }
  else
  {
    if (!v75)
      return;
    v58 = 5;
  }
  (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)v57 + 8 * v58))(v57, v56);
}

void sub_2235CF1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  std::__assoc_sub_state **v22;
  uint64_t v23;
  std::__assoc_sub_state *v24;
  std::exception_ptr v25;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v24 = *v22;
    if (*v22)
    {
      std::exception_ptr::exception_ptr(&a22, &a19);
      v25.__ptr_ = &a22;
      std::__assoc_sub_state::set_exception(v24, v25);
      std::exception_ptr::~exception_ptr(&a22);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (*(char *)(v23 - 81) < 0)
        operator delete(*(void **)(v23 - 104));
      JUMPOUT(0x2235CF0B8);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_2235CF218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  uint64_t v22;

  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (*(char *)(v22 - 81) < 0)
  {
    operator delete(*(void **)(v22 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2235CF26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a26;
  if (a26 == v26)
  {
    v29 = 4;
    v28 = &a23;
  }
  else
  {
    if (!a26)
    {
      sub_22334FD8C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
  sub_22334FD8C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235CF2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2235CF2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_22332429C((uint64_t *)va3);
  sub_223167354((uint64_t)va2);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2235CF384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2235CF3A0(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_2235CF414(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC50838;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC48DB8;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_2235CF544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2235CF5B8(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC508B8;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2235CF6C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2235CF72C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC50938;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2235CF944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_2235CFA0C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC509B8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2235CFC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235CFCEC(uint64_t a1)
{
  return sub_2235CFE5C(a1 - 16);
}

void sub_2235CFCF4(uint64_t a1)
{
  sub_2235CFE5C(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235CFD1C(uint64_t a1, uint64_t a2)
{
  return sub_2235CF414((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2235CFD24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2235CF72C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2235CFD2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2235CFA0C((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_2235CFD34(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_2235CFD3C(uint64_t a1)
{
  return sub_2235CFE5C(a1 - 24);
}

void sub_2235CFD44(uint64_t a1)
{
  sub_2235CFE5C(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235CFD6C(uint64_t a1)
{
  return sub_2235CF5B8((_QWORD *)(a1 - 24));
}

uint64_t sub_2235CFD74(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_2235CFD7C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2235CFDE4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2235CFE4C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_2235CFE5C(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC503F8;
  *(_QWORD *)(a1 + 16) = &unk_24EC50470;
  *(_QWORD *)(a1 + 24) = &unk_24EC504B0;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_2235D005C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC505E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2235D006C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC505E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D00A4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC50638;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2235D00E8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC50638;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D013C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC50638;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_2235D01AC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC50638;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2235D01FC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_2235D0238(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_2235D0270(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_2235D0594((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_2235CC310(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2235D0438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_2235CC310(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235D051C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRResultEvS8_"
                     "Lb0EE25EnqueueMessageAndDispatchIZNKS9_4SendERKS6_EUlT_T0_E_EEvSC_SD_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRR"
                                "ResultEvS8_Lb0EE25EnqueueMessageAndDispatchIZNKS9_4SendERKS6_EUlT_T0_E_EEvSC_SD_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE25EnqueueMessageAndDispatchIZNKS9_4SendERKS6_EUlT_T0_E_EEvSC_SD_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE25EnqueueMessageAndDispatchIZNKS9_4SendERKS6_EUlT_T0_E_EEvSC_SD_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235D0588()
{
  return &unk_24EC50698;
}

void sub_2235D0594(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::exception_ptr v34;
  void *__p;
  char *v36;
  char v37;

  v6 = *a1;
  if (!v6)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    v7 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (byte_255795670)
      v8 = byte_255795678 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_255795648;
      for (i = qword_255795650; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&__p, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, void **))(j[2] + 16))(j + 2, &__p);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_2233236D4(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v34.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v34), v15))
    {
      sub_2233236D4(2u);
    }
    *(_QWORD *)(v14 + 144) = 0;
    *(_QWORD *)(v14 + 152) = 0;
    *(_QWORD *)(v14 + 160) = 0;
    v16 = (char *)__p;
    v17 = v36;
    v18 = v36 - (_BYTE *)__p;
    if (v36 != __p)
    {
      v19 = 0xEEEEEEEEEEEEEEEFLL * (v18 >> 3);
      if (v19 >= 0x222222222222223)
        sub_22316E078();
      v20 = (char *)operator new(v18);
      *(_QWORD *)(v14 + 144) = v20;
      *(_QWORD *)(v14 + 152) = v20;
      *(_QWORD *)(v14 + 160) = &v20[120 * v19];
      do
      {
        *(_OWORD *)v20 = *(_OWORD *)v16;
        *((_QWORD *)v20 + 2) = *((_QWORD *)v16 + 2);
        v22 = *((_QWORD *)v16 + 3);
        *((_QWORD *)v20 + 3) = v22;
        if (v22)
        {
          v23 = (unint64_t *)(v22 + 8);
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        v20[32] = 0;
        v20[96] = 0;
        if (v16[96])
        {
          v25 = *((_OWORD *)v16 + 2);
          v26 = *((_OWORD *)v16 + 3);
          v27 = *((_OWORD *)v16 + 5);
          *((_OWORD *)v20 + 4) = *((_OWORD *)v16 + 4);
          *((_OWORD *)v20 + 5) = v27;
          *((_OWORD *)v20 + 2) = v25;
          *((_OWORD *)v20 + 3) = v26;
          v20[96] = 1;
        }
        v21 = *(_OWORD *)(v16 + 100);
        v20[116] = v16[116];
        *(_OWORD *)(v20 + 100) = v21;
        v16 += 120;
        v20 += 120;
      }
      while (v16 != v17);
      *(_QWORD *)(v14 + 152) = v20;
    }
    *(_BYTE *)(v14 + 168) = v37;
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v28 = (char *)__p;
  if (__p)
  {
    v29 = v36;
    v30 = __p;
    if (v36 != __p)
    {
      do
      {
        v31 = (std::__shared_weak_count *)*((_QWORD *)v29 - 12);
        if (v31)
        {
          p_shared_owners = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(p_shared_owners);
          while (__stlxr(v33 - 1, p_shared_owners));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v29 -= 120;
      }
      while (v29 != v28);
      v30 = __p;
    }
    v36 = v28;
    operator delete(v30);
  }
}

void sub_2235D0954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, void *a18)
{
  std::mutex *v18;
  void **v19;
  uint64_t v20;
  void **v22;
  char *v24;
  char *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  void **v34;

  v22 = v19;
  v34 = v22;
  v24 = (char *)*v22;
  if (*v22)
  {
    v25 = *(char **)(v20 + 152);
    v26 = *v22;
    if (v25 != v24)
    {
      do
      {
        v27 = (std::__shared_weak_count *)*((_QWORD *)v25 - 12);
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v25 -= 120;
      }
      while (v25 != v24);
      v26 = *v34;
    }
    *(_QWORD *)(v20 + 152) = v24;
    operator delete(v26);
  }
  std::mutex::unlock(v18);
  sub_223295868(&a18);
  if (a2 == 1)
  {
    v30 = (uint64_t *)__cxa_begin_catch(a1);
    v31 = *v30;
    a11 = *(_QWORD *)(*(_QWORD *)(*v30 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v31 + 16))();
    sub_2233233A4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v32 = (uint64_t *)&a12;
    else
      v32 = a12;
    if ((a17 & 0x80u) == 0)
      v33 = a17;
    else
      v33 = a13;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v32, v33, (void (*)(void **))sub_22457406C);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_2235D0AB8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x2235D0AD8);
}

_QWORD *sub_2235D0AE4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC506B8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235D0B1C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC506B8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D0B64(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC506B8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2235D0BB4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC506B8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2235D0BE4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235D0BF4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235D0C20(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_2235D0594((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_2235CC310(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235D0CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_2235CC310(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235D0D14(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRResultEvS8_"
                     "Lb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRR"
                                "ResultEvS8_Lb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235D0D80()
{
  return &unk_24EC50718;
}

_QWORD *sub_2235D0D8C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC50738;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_2235D0E14(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC50738;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_2235D0EAC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC50738;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_2235D0F3C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC50738;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_2235D0FAC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_2235D102C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_2235D10A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_2235D0594(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_2235CC310((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2235D1384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_2235D13B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x2235D11BCLL);
    JUMPOUT(0x2235D118CLL);
  }
  sub_2233236D4(3u);
}

void sub_2235D140C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_2235D1438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_2235CC310(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2235D1524(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRResultEvS8_"
                     "Lb0EE25EnqueueMessageAndDispatchIZNKS9_7ProcessERKS6_NSt3__17promiseIS8_EEEUlT_T0_E_EEvSC_SG_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRR"
                                "ResultEvS8_Lb0EE25EnqueueMessageAndDispatchIZNKS9_7ProcessERKS6_NSt3__17promiseIS8_EEEUl"
                                "T_T0_E_EEvSC_SG_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE25EnqueueMessageAndDispatchIZNKS9_7ProcessERKS6_NSt3__17promiseIS8_EEEUlT_T0_E_EEvSC_SG_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE25EnqueueMessageAndDispatchIZNKS9_7ProcessERKS6_NSt3__17promiseIS8_EEEUlT_T0_E_EEvSC_SG_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235D1590()
{
  return &unk_24EC50798;
}

_QWORD *sub_2235D159C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC507B8;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_2235D1618(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC507B8;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D16A4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC507B8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[5];
  result[4] = a1[4];
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_2235D1714(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC507B8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[5];
  a2[4] = result[4];
  a2[5] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2235D1764(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_2235D17D4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_2235D1844(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_2235D0594((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_2235CC310((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_2235D1954(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_2235D19CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x2235D1A00);
  JUMPOUT(0x2235D1A30);
}

uint64_t sub_2235D1A38(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRResultEvS8_"
                     "Lb0EE7ProcessERKS6_NSt3__17promiseIS8_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRR"
                                "ResultEvS8_Lb0EE7ProcessERKS6_NSt3__17promiseIS8_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE7ProcessERKS6_NSt3__17promiseIS8_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE7ProcessERKS6_NSt3__17promiseIS8_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235D1AA4()
{
  return &unk_24EC50818;
}

_QWORD *sub_2235D1AB0(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC50838;
  v2 = a1[4];
  a1[3] = &off_24EC48DB8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2235D1B08(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC50838;
  v2 = a1[4];
  a1[3] = &off_24EC48DB8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D1B70(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC50838;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC48DB8;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_2235D1BE8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2235D1C08(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC50838;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC48DB8;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_2235D1C70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_2235D1C88(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC48DB8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_2235D1CD8(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC48DB8;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_2235D1D24(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC48DB8;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235D1DD8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235D1E14(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRResultEvS8_L"
                     "b0EE9SubscribeENS1_12ChannelInputIS8_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRR"
                                "esultEvS8_Lb0EE9SubscribeENS1_12ChannelInputIS8_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE9SubscribeENS1_12ChannelInputIS8_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE9SubscribeENS1_12ChannelInputIS8_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235D1E80()
{
  return &unk_24EC50898;
}

_QWORD *sub_2235D1E8C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC508B8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235D1EC4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC508B8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D1F0C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC508B8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2235D1F5C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC508B8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2235D1F8C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235D1F9C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235D1FC8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235D205C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235D2098(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRResultEvS8_L"
                     "b0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRR"
                                "esultEvS8_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235D2104()
{
  return &unk_24EC50918;
}

_QWORD *sub_2235D2110(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC50938;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235D2148(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC50938;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D2190(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC50938;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2235D21E8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC50938;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2235D2220(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235D2230(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235D225C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_2235D23D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235D2448(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRResultEvS8_"
                     "Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRR"
                                "ResultEvS8_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235D24B4()
{
  return &unk_24EC50998;
}

_QWORD *sub_2235D24C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC509B8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235D24F8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC509B8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D2540(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC509B8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2235D2598(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC509B8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2235D25D0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235D25E0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235D260C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235D26C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235D2710(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRResultEvS8_"
                     "Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRR"
                                "ResultEvS8_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng17SyntheticPRRQueryENS4_3vlm9PRRResultEvS8_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235D277C()
{
  return &unk_24EC50A18;
}

void sub_2235D278C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2235D27B0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2235D27C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng17SyntheticPRRQueryENS6_"
                     "3vlm9PRRResultEvSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng17SyntheticPR"
                                "RQueryENS6_3vlm9PRRResultEvSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng17SyntheticPRRQueryENS6_3vlm9PRRResultEvSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng17SyntheticPRRQueryENS6_3vlm9PRRResultEvSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2235D2838(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235D2864(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D28A0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC50A88;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_2235D2908(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235D2998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235D29AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235D2A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235D2A50(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2235D2B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235D2B28(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2235D2BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235D2C00(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2235D2CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235D2CBC(uint64_t a1)
{
  sub_2235D4484(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2235D2CE0(_QWORD *a1, std::__shared_weak_count_vtbl **a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  __int128 *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC50CF0;
    v5[1].__vftable = *a2;
    v8 = v5 + 1;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_22324A974();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24EC50D40;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_2245022E4(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *a2;
  v49 = (__int128 *)operator new(0x20uLL);
  *(_QWORD *)v49 = &off_24EC50DC0;
  *((_QWORD *)v49 + 1) = v29;
  *((_QWORD *)v49 + 2) = v28;
  *((_QWORD *)v49 + 3) = v48;
  v54 = v49;
  sub_2245022E4(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_2235D30F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235D31E4(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2235D31F4(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2235D3200(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_2235D3210(_QWORD *a1, std::__shared_weak_count_vtbl **a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  std::string *v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  __int128 v70;
  std::__shared_weak_count_vtbl *v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v65 = (_QWORD *)a1[6];
    v64 = a1 + 6;
    v63 = v65;
    v66 = (__int128 *)*((unsigned __int8 *)v64 + 23);
    if ((char)v66 < 0)
      v66 = (__int128 *)v64[1];
    else
      v63 = v64;
    v79 = v63;
    v80 = v66;
    sub_2231A9820((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v82;
    else
      v67 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v67);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v69 = std::runtime_error::runtime_error(exception, &v75);
    v69->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v69, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC2F420;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC50CF0;
    v9[1].__vftable = *a2;
    v12 = v9 + 1;
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_22324A974();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24EC50E40;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_2245022E4(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x227684CE8](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v70 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v70 = v34;
      *((_QWORD *)&v70 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v70 = 0uLL;
    }
  }
  v71 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &unk_24EC2F420;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x30uLL);
  *(_QWORD *)v56 = &off_24EC50EC0;
  *(_OWORD *)(v56 + 8) = v70;
  *((_QWORD *)v56 + 3) = v71;
  *((_QWORD *)v56 + 4) = v55 + 3;
  *((_QWORD *)v56 + 5) = v55;
  v80 = (__int128 *)v56;
  sub_2245022E4(*v30, (uint64_t)&v78);
  v61 = v80;
  if (v80 == &v78)
  {
    v62 = 4;
    v61 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v62 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 8 * v62))(v61, v57, v58, v59, v60);
}

void sub_2235D3834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::promise<void> *v25;
  uint64_t v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v27.__ptr_ = &a19;
    std::promise<void>::set_exception(v25, v27);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (*(char *)(v26 - 81) < 0)
      operator delete(*(void **)(v26 - 104));
    JUMPOUT(0x2235D3748);
  }
  _Unwind_Resume(exception_object);
}

void sub_2235D393C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_22332429C((uint64_t *)va3);
  sub_223167354((uint64_t)va2);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2235D39DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2235D39F8(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_2235D3A6C(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC50F40;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2235D3B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2235D3BE0(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC50FC0;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2235D3CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2235D3D54@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC51040;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2235D3F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_2235D4034@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC510C0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2235D424C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235D4314(uint64_t a1)
{
  return sub_2235D4484(a1 - 16);
}

void sub_2235D431C(uint64_t a1)
{
  sub_2235D4484(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D4344(uint64_t a1)
{
  return sub_2235D3A6C((_QWORD *)(a1 - 16));
}

uint64_t *sub_2235D434C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2235D3D54((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2235D4354@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2235D4034((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_2235D435C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_2235D4364(uint64_t a1)
{
  return sub_2235D4484(a1 - 24);
}

void sub_2235D436C(uint64_t a1)
{
  sub_2235D4484(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D4394(uint64_t a1)
{
  return sub_2235D3BE0((_QWORD *)(a1 - 24));
}

uint64_t sub_2235D439C(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_2235D43A4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2235D440C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2235D4474(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_2235D4484(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC50B00;
  *(_QWORD *)(a1 + 16) = &unk_24EC50B78;
  *(_QWORD *)(a1 + 24) = &unk_24EC50BB8;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_2235D4670(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC50CF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2235D4680(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC50CF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D46B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC50D40;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2235D46FC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC50D40;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D4750(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC50D40;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_2235D47C0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC50D40;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2235D4810(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_2235D484C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_2235D4884(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_2235D4BA8((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x227684B68](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2235D4A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x227684B68](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235D4B30(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEEEEvvvLb0EE"
                     "25EnqueueMessageAndDispatchIZNKSA_4SendERKS9_EUlT_T0_E_EEvSD_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EE"
                                "EEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSA_4SendERKS9_EUlT_T0_E_EEvSD_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSA_4SendERKS9_EUlT_T0_E_EEvSD_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSA_4SendERKS9_EUlT_T0_E_EEvSD_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235D4B9C()
{
  return &unk_24EC50DA0;
}

void sub_2235D4BA8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_2235D4C40()
{
  __break(1u);
}

void sub_2235D4CEC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x2235D4D0CLL);
}

_QWORD *sub_2235D4D18(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC50DC0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235D4D50(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC50DC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D4D98(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC50DC0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2235D4DF0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC50DC0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2235D4E28(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235D4E38(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235D4E64(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_2235D4BA8((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x227684B68](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235D4F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x227684B68](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235D4F58(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEEEEvvvLb0EE"
                     "4SendERKS9_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EE"
                                "EEEvvvLb0EE4SendERKS9_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEEEEvvvLb0EE4SendERKS9_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEEEEvvvLb0EE4SendERKS9_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235D4FC4()
{
  return &unk_24EC50E20;
}

_QWORD *sub_2235D4FD0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC50E40;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_2235D5058(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC50E40;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_2235D50F0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC50E40;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_2235D5180(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC50E40;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_2235D51F0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_2235D5270(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_2235D52EC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_2235D4BA8(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x227684B68](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2235D55A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2235D56F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEEEEvvvLb0EE"
                     "25EnqueueMessageAndDispatchIZNKSA_7ProcessERKS9_NS4_7promiseIvEEEUlT_T0_E_EEvSD_SG_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EE"
                                "EEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSA_7ProcessERKS9_NS4_7promiseIvEEEUlT_T0_E_EEvSD_SG_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSA_7ProcessERKS9_NS4_7promiseIvEEEUlT_T0_E_EEvSD_SG_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSA_7ProcessERKS9_NS4_7promiseIvEEEUlT_T0_E_EEvSD_SG_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235D5764()
{
  return &unk_24EC50EA0;
}

_QWORD *sub_2235D5770(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC50EC0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_2235D57EC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC50EC0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D5878(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC50EC0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  v8 = a1[5];
  result[5] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

_QWORD *sub_2235D58F0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC50EC0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  v7 = result[5];
  a2[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

void sub_2235D5948(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_2235D59B8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_2235D5A28(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_2235D4BA8((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x227684B68](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_2235D5B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x227684B68](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235D5BE4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEEEEvvvLb0EE"
                     "7ProcessERKS9_NS4_7promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EE"
                                "EEEvvvLb0EE7ProcessERKS9_NS4_7promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEEEEvvvLb0EE7ProcessERKS9_NS4_7promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEEEEvvvLb0EE7ProcessERKS9_NS4_7promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235D5C50()
{
  return &unk_24EC50F20;
}

_QWORD *sub_2235D5C5C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC50F40;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235D5C94(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC50F40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D5CDC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC50F40;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2235D5D2C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC50F40;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2235D5D5C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235D5D6C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235D5D98(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235D5E2C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235D5E68(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEEEEvvvLb0EE9"
                     "SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEE"
                                "EEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235D5ED4()
{
  return &unk_24EC50FA0;
}

_QWORD *sub_2235D5EE0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC50FC0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235D5F18(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC50FC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D5F60(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC50FC0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2235D5FB0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC50FC0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2235D5FE0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235D5FF0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235D601C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235D60B0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235D60EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEEEEvvvLb0EE1"
                     "5AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEE"
                                "EEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235D6158()
{
  return &unk_24EC51020;
}

_QWORD *sub_2235D6164(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC51040;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235D619C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC51040;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D61E4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC51040;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2235D623C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC51040;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2235D6274(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235D6284(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235D62B0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235D6368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235D63B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEEEEvvvLb0EE"
                     "16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EE"
                                "EEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235D6420()
{
  return &unk_24EC510A0;
}

_QWORD *sub_2235D642C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC510C0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235D6464(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC510C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D64AC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC510C0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2235D6504(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC510C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2235D653C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235D654C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235D6578(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235D6630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235D667C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEEEEvvvLb0EE"
                     "15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EE"
                                "EEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16chrono8durationIdNS4_5ratioILl1ELl1EEEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235D66E8()
{
  return &unk_24EC51120;
}

void sub_2235D66F8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2235D671C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2235D6734(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_6chrono8durationIdNS_5ratioILl1ELl1"
                     "EEEEEvvvLb0EEEE27__shared_ptr_default_deleteISB_SB_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_6chrono8durationIdNS_5ra"
                                "tioILl1ELl1EEEEEvvvLb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_6chrono8durationIdNS_5ratioILl1ELl1EEEEEvvvLb0EEEE27__shared_ptr_default_deleteISB_SB_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_6chrono8durationIdNS_5ratioILl1ELl1EEEEEvvvLb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2235D67A4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235D67D0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D680C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC51190;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_2235D6874(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235D6904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235D6918(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235D69A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235D69BC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2235D6A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235D6A94(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2235D6B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235D6B6C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2235D6C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235D6C28(uint64_t a1)
{
  sub_2235D8404(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2235D6C4C(_QWORD *a1, std::__shared_weak_count_vtbl **a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  __int128 *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC513F8;
    v5[1].__vftable = *a2;
    v8 = v5 + 1;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_22324A974();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24EC51448;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_2245022E4(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *a2;
  v49 = (__int128 *)operator new(0x20uLL);
  *(_QWORD *)v49 = &off_24EC514C8;
  *((_QWORD *)v49 + 1) = v29;
  *((_QWORD *)v49 + 2) = v28;
  *((_QWORD *)v49 + 3) = v48;
  v54 = v49;
  sub_2245022E4(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_2235D7068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235D715C(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2235D716C(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2235D7178(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_2235D7188(_QWORD *a1, std::__shared_weak_count_vtbl **a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count_vtbl *v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  __int128 *v67;
  std::string *v68;
  std::runtime_error *exception;
  std::runtime_error *v70;
  __int128 v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v66 = (_QWORD *)a1[6];
    v65 = a1 + 6;
    v64 = v66;
    v67 = (__int128 *)*((unsigned __int8 *)v65 + 23);
    if ((char)v67 < 0)
      v67 = (__int128 *)v65[1];
    else
      v64 = v65;
    v79 = v64;
    v80 = v67;
    sub_2231A9820((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v68 = &v82;
    else
      v68 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v68);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v70 = std::runtime_error::runtime_error(exception, &v75);
    v70->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v70, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC2F420;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC513F8;
    v9[1].__vftable = *a2;
    v12 = v9 + 1;
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_22324A974();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24EC51548;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_2245022E4(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x227684CE8](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v71 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v71 = v34;
      *((_QWORD *)&v71 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v71 = 0uLL;
    }
  }
  v55 = *a2;
  v56 = operator new(0x20uLL);
  v56[1] = 0;
  v56[2] = 0;
  *v56 = &unk_24EC2F420;
  v56[3] = *a3;
  *a3 = 0;
  v57 = (char *)operator new(0x30uLL);
  *(_QWORD *)v57 = &off_24EC515C8;
  *(_OWORD *)(v57 + 8) = v71;
  *((_QWORD *)v57 + 3) = v55;
  *((_QWORD *)v57 + 4) = v56 + 3;
  *((_QWORD *)v57 + 5) = v56;
  v80 = (__int128 *)v57;
  sub_2245022E4(*v30, (uint64_t)&v78);
  v62 = v80;
  if (v80 == &v78)
  {
    v63 = 4;
    v62 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v63 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v62 + 8 * v63))(v62, v58, v59, v60, v61);
}

void sub_2235D77B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::promise<void> *v25;
  uint64_t v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v27.__ptr_ = &a19;
    std::promise<void>::set_exception(v25, v27);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (*(char *)(v26 - 97) < 0)
      operator delete(*(void **)(v26 - 120));
    JUMPOUT(0x2235D76C4);
  }
  _Unwind_Resume(exception_object);
}

void sub_2235D78BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 96);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 120);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_22332429C((uint64_t *)va3);
  sub_223167354((uint64_t)va2);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2235D795C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2235D7978(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_2235D79EC(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC51648;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2235D7AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2235D7B60(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC516C8;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2235D7C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2235D7CD4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC51748;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2235D7EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_2235D7FB4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC517C8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2235D81CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235D8294(uint64_t a1)
{
  return sub_2235D8404(a1 - 16);
}

void sub_2235D829C(uint64_t a1)
{
  sub_2235D8404(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D82C4(uint64_t a1)
{
  return sub_2235D79EC((_QWORD *)(a1 - 16));
}

uint64_t *sub_2235D82CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2235D7CD4((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2235D82D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2235D7FB4((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_2235D82DC(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_2235D82E4(uint64_t a1)
{
  return sub_2235D8404(a1 - 24);
}

void sub_2235D82EC(uint64_t a1)
{
  sub_2235D8404(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D8314(uint64_t a1)
{
  return sub_2235D7B60((_QWORD *)(a1 - 24));
}

uint64_t sub_2235D831C(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_2235D8324(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2235D838C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2235D83F4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_2235D8404(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC51208;
  *(_QWORD *)(a1 + 16) = &unk_24EC51280;
  *(_QWORD *)(a1 + 24) = &unk_24EC512C0;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_2235D85F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC513F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2235D8600(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC513F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D8638(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC51448;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2235D867C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC51448;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D86D0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC51448;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_2235D8740(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC51448;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2235D8790(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_2235D87CC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_2235D8804(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_2235D8B28((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x227684B68](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2235D89CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x227684B68](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235D8AB0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE25EnqueueMessageAndDispatchIZNKS4_4SendERKdEUlT"
                     "_T0_E_EEvS7_S8_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE25EnqueueMessageAndDispatchIZNKS4_4S"
                                "endERKdEUlT_T0_E_EEvS7_S8_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE25EnqueueMessageAndDispatchIZNKS4_4SendERKdEUlT_T0_E_EEvS7_S8_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE25EnqueueMessageAndDispatchIZNKS4_4SendERKdEUlT_T0_E_EEvS7_S8_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235D8B1C()
{
  return &unk_24EC514A8;
}

void sub_2235D8B28(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_2235D8BC0()
{
  __break(1u);
}

void sub_2235D8C6C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x2235D8C8CLL);
}

_QWORD *sub_2235D8C98(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC514C8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235D8CD0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC514C8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

double sub_2235D8D18(uint64_t a1)
{
  double *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  double result;

  v2 = (double *)operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_24EC514C8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(double *)(a1 + 24);
  v2[3] = result;
  return result;
}

double sub_2235D8D70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  double result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24EC514C8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(double *)(a1 + 24);
  *(double *)(a2 + 24) = result;
  return result;
}

void sub_2235D8DA8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235D8DB8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235D8DE4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_2235D8B28((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x227684B68](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235D8E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x227684B68](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235D8ED8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE4SendERKdEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE4SendERKdEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE4SendERKdEUlvE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE4SendERKdEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235D8F44()
{
  return &unk_24EC51528;
}

_QWORD *sub_2235D8F50(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC51548;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_2235D8FD8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC51548;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_2235D9070(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC51548;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_2235D9100(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC51548;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_2235D9170(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_2235D91F0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_2235D926C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_2235D8B28(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x227684B68](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2235D9520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2235D9678(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE25EnqueueMessageAndDispatchIZNKS4_7ProcessERKdN"
                     "St3__17promiseIvEEEUlT_T0_E_EEvS7_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE25EnqueueMessageAndDispatchIZNKS4_7P"
                                "rocessERKdNSt3__17promiseIvEEEUlT_T0_E_EEvS7_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE25EnqueueMessageAndDispatchIZNKS4_7ProcessERKdNSt3__17promiseIvEEEUlT_T0_E_EEvS7_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE25EnqueueMessageAndDispatchIZNKS4_7ProcessERKdNSt3__17promiseIvEEEUlT_T0_E_EEvS7_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235D96E4()
{
  return &unk_24EC515A8;
}

_QWORD *sub_2235D96F0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC515C8;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_2235D976C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC515C8;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D97F8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC515C8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  v7 = a1[5];
  result[4] = a1[4];
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_2235D9870(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC515C8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  v6 = result[5];
  a2[4] = result[4];
  a2[5] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2235D98C8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_2235D9938(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_2235D99A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_2235D8B28((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x227684B68](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_2235D9ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x227684B68](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235D9B64(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE7ProcessERKdNSt3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE7ProcessERKdNSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE7ProcessERKdNSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE7ProcessERKdNSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235D9BD0()
{
  return &unk_24EC51628;
}

_QWORD *sub_2235D9BDC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC51648;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235D9C14(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC51648;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D9C5C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC51648;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2235D9CAC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC51648;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2235D9CDC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235D9CEC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235D9D18(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235D9DAC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235D9DE8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235D9E54()
{
  return &unk_24EC516A8;
}

_QWORD *sub_2235D9E60(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC516C8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235D9E98(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC516C8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235D9EE0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC516C8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2235D9F30(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC516C8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2235D9F60(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235D9F70(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235D9F9C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235DA030(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235DA06C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235DA0D8()
{
  return &unk_24EC51728;
}

_QWORD *sub_2235DA0E4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC51748;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235DA11C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC51748;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235DA164(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC51748;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2235DA1BC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC51748;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2235DA1F4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235DA204(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235DA230(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235DA2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235DA334(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE16OutputHandlerIDsEvEUlvE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235DA3A0()
{
  return &unk_24EC517A8;
}

_QWORD *sub_2235DA3AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC517C8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235DA3E4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC517C8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235DA42C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC517C8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2235DA484(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC517C8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2235DA4BC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235DA4CC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235DA4F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235DA5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235DA5FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235DA668()
{
  return &unk_24EC51828;
}

void sub_2235DA678(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2235DA69C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2235DA6B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EEEE27__shared_ptr_default_deleteIS6_S6_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EEEE27__shared_ptr_d"
                                "efault_deleteIS6_S6_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EEEE27__shared_ptr_default_deleteIS6_S6_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIdvvvLb0EEEE27__shared_ptr_default_deleteIS6_S6_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2235DA724(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235DA750(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235DA78C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC51898;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_2235DA7F4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235DA884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235DA898(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235DA928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235DA93C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2235DAA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235DAA14(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2235DAAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235DAAEC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2235DAB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235DABA8(uint64_t a1)
{
  sub_2235DC374(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2235DABCC(_QWORD *a1, _BYTE *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC51B00;
    LOBYTE(v5[1].__vftable) = *a2;
    v8 = v5 + 1;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_22324A974();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24EC51B50;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_2245022E4(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *a2;
  v49 = operator new(0x20uLL);
  *v49 = &off_24EC51BD0;
  v49[1] = v29;
  v49[2] = v28;
  *((_BYTE *)v49 + 24) = v48;
  v54 = (__int128 *)v49;
  sub_2245022E4(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_2235DAFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235DB0D4(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2235DB0E4(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2235DB0F0(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_2235DB100(_QWORD *a1, char *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  std::string *v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  __int128 v70;
  char v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v65 = (_QWORD *)a1[6];
    v64 = a1 + 6;
    v63 = v65;
    v66 = (__int128 *)*((unsigned __int8 *)v64 + 23);
    if ((char)v66 < 0)
      v66 = (__int128 *)v64[1];
    else
      v63 = v64;
    v79 = v63;
    v80 = v66;
    sub_2231A9820((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v82;
    else
      v67 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v67);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v69 = std::runtime_error::runtime_error(exception, &v75);
    v69->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v69, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC2F420;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC51B00;
    LOBYTE(v9[1].__vftable) = *a2;
    v12 = v9 + 1;
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_22324A974();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24EC51C50;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_2245022E4(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x227684CE8](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v70 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v70 = v34;
      *((_QWORD *)&v70 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v70 = 0uLL;
    }
  }
  v71 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &unk_24EC2F420;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x30uLL);
  *(_QWORD *)v56 = &off_24EC51CD0;
  *(_OWORD *)(v56 + 8) = v70;
  v56[24] = v71;
  *((_QWORD *)v56 + 4) = v55 + 3;
  *((_QWORD *)v56 + 5) = v55;
  v80 = (__int128 *)v56;
  sub_2245022E4(*v30, (uint64_t)&v78);
  v61 = v80;
  if (v80 == &v78)
  {
    v62 = 4;
    v61 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v62 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 8 * v62))(v61, v57, v58, v59, v60);
}

void sub_2235DB724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::promise<void> *v25;
  uint64_t v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v27.__ptr_ = &a19;
    std::promise<void>::set_exception(v25, v27);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (*(char *)(v26 - 81) < 0)
      operator delete(*(void **)(v26 - 104));
    JUMPOUT(0x2235DB638);
  }
  _Unwind_Resume(exception_object);
}

void sub_2235DB82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_22332429C((uint64_t *)va3);
  sub_223167354((uint64_t)va2);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2235DB8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2235DB8E8(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_2235DB95C(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC51D50;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2235DBA6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2235DBAD0(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC51DD0;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2235DBBE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2235DBC44@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC51E50;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2235DBE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_2235DBF24@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC51ED0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2235DC13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235DC204(uint64_t a1)
{
  return sub_2235DC374(a1 - 16);
}

void sub_2235DC20C(uint64_t a1)
{
  sub_2235DC374(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235DC234(uint64_t a1)
{
  return sub_2235DB95C((_QWORD *)(a1 - 16));
}

uint64_t *sub_2235DC23C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2235DBC44((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2235DC244@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2235DBF24((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_2235DC24C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_2235DC254(uint64_t a1)
{
  return sub_2235DC374(a1 - 24);
}

void sub_2235DC25C(uint64_t a1)
{
  sub_2235DC374(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235DC284(uint64_t a1)
{
  return sub_2235DBAD0((_QWORD *)(a1 - 24));
}

uint64_t sub_2235DC28C(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_2235DC294(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2235DC2FC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2235DC364(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_2235DC374(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC51910;
  *(_QWORD *)(a1 + 16) = &unk_24EC51988;
  *(_QWORD *)(a1 + 24) = &unk_24EC519C8;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_2235DC560(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC51B00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2235DC570(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC51B00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235DC5A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC51B50;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2235DC5EC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC51B50;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235DC640(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC51B50;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_2235DC6B0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC51B50;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2235DC700(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_2235DC73C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_2235DC774(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_2235DCA98((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x227684B68](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2235DC93C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x227684B68](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235DCA20(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EE25E"
                     "nqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestE"
                                "vvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235DCA8C()
{
  return &unk_24EC51BB0;
}

void sub_2235DCA98(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_2235DCB30()
{
  __break(1u);
}

void sub_2235DCBDC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x2235DCBFCLL);
}

_QWORD *sub_2235DCC08(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC51BD0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235DCC40(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC51BD0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235DCC88(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC51BD0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  return result;
}

uint64_t sub_2235DCCE0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC51BD0;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  return result;
}

void sub_2235DCD18(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235DCD28(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235DCD54(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_2235DCA98((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x227684B68](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235DCDFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x227684B68](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235DCE48(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestE"
                                "vvvLb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235DCEB4()
{
  return &unk_24EC51C30;
}

_QWORD *sub_2235DCEC0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC51C50;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_2235DCF48(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC51C50;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_2235DCFE0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC51C50;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_2235DD070(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC51C50;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_2235DD0E0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_2235DD160(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_2235DD1DC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_2235DCA98(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x227684B68](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2235DD490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2235DD5E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EE25E"
                     "nqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestE"
                                "vvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235DD654()
{
  return &unk_24EC51CB0;
}

_QWORD *sub_2235DD660(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC51CD0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_2235DD6DC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC51CD0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235DD768(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC51CD0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  result[4] = *(_QWORD *)(a1 + 32);
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_2235DD7E0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC51CD0;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  v6 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2235DD838(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_2235DD8A8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_2235DD918(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_2235DCA98((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x227684B68](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_2235DDA2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x227684B68](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235DDAD4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EE7Pr"
                     "ocessERKS6_NSt3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestE"
                                "vvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235DDB40()
{
  return &unk_24EC51D30;
}

_QWORD *sub_2235DDB4C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC51D50;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235DDB84(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC51D50;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235DDBCC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC51D50;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2235DDC1C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC51D50;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2235DDC4C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235DDC5C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235DDC88(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235DDD1C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235DDD58(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EE9Sub"
                     "scribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEv"
                                "vvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235DDDC4()
{
  return &unk_24EC51DB0;
}

_QWORD *sub_2235DDDD0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC51DD0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235DDE08(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC51DD0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235DDE50(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC51DD0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2235DDEA0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC51DD0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2235DDED0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235DDEE0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235DDF0C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235DDFA0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235DDFDC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EE15Ad"
                     "dErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEv"
                                "vvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235DE048()
{
  return &unk_24EC51E30;
}

_QWORD *sub_2235DE054(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC51E50;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235DE08C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC51E50;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235DE0D4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC51E50;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2235DE12C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC51E50;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2235DE164(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235DE174(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235DE1A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235DE258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235DE2A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EE16O"
                     "utputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestE"
                                "vvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235DE310()
{
  return &unk_24EC51EB0;
}

_QWORD *sub_2235DE31C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC51ED0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235DE354(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC51ED0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235DE39C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC51ED0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2235DE3F4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC51ED0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2235DE42C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235DE43C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235DE468(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235DE520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235DE56C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EE15E"
                     "rrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestE"
                                "vvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235DE5D8()
{
  return &unk_24EC51F30;
}

void sub_2235DE5E8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2235DE60C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2235DE624(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng29EnableMeshPlaneHarmony"
                     "RequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng29EnableMeshP"
                                "laneHarmonyRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng29EnableMeshPlaneHarmonyRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2235DE694(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235DE6C0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235DE6FC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC51FA0;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_2235DE764(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235DE7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235DE808(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235DE898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235DE8AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2235DE970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235DE984(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2235DEA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235DEA5C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2235DEB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235DEB18(uint64_t a1)
{
  sub_2235E02E4(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2235DEB3C(_QWORD *a1, _BYTE *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC52208;
    LOBYTE(v5[1].__vftable) = *a2;
    v8 = v5 + 1;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_22324A974();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24EC52258;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_2245022E4(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *a2;
  v49 = operator new(0x20uLL);
  *v49 = &off_24EC522D8;
  v49[1] = v29;
  v49[2] = v28;
  *((_BYTE *)v49 + 24) = v48;
  v54 = (__int128 *)v49;
  sub_2245022E4(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_2235DEF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235DF044(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2235DF054(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2235DF060(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_2235DF070(_QWORD *a1, char *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  std::string *v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  __int128 v70;
  char v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v65 = (_QWORD *)a1[6];
    v64 = a1 + 6;
    v63 = v65;
    v66 = (__int128 *)*((unsigned __int8 *)v64 + 23);
    if ((char)v66 < 0)
      v66 = (__int128 *)v64[1];
    else
      v63 = v64;
    v79 = v63;
    v80 = v66;
    sub_2231A9820((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v82;
    else
      v67 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v67);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v69 = std::runtime_error::runtime_error(exception, &v75);
    v69->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v69, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC2F420;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC52208;
    LOBYTE(v9[1].__vftable) = *a2;
    v12 = v9 + 1;
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_22324A974();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24EC52358;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_2245022E4(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x227684CE8](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v70 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v70 = v34;
      *((_QWORD *)&v70 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v70 = 0uLL;
    }
  }
  v71 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &unk_24EC2F420;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x30uLL);
  *(_QWORD *)v56 = &off_24EC523D8;
  *(_OWORD *)(v56 + 8) = v70;
  v56[24] = v71;
  *((_QWORD *)v56 + 4) = v55 + 3;
  *((_QWORD *)v56 + 5) = v55;
  v80 = (__int128 *)v56;
  sub_2245022E4(*v30, (uint64_t)&v78);
  v61 = v80;
  if (v80 == &v78)
  {
    v62 = 4;
    v61 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v62 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 8 * v62))(v61, v57, v58, v59, v60);
}

void sub_2235DF694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::promise<void> *v25;
  uint64_t v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v27.__ptr_ = &a19;
    std::promise<void>::set_exception(v25, v27);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (*(char *)(v26 - 81) < 0)
      operator delete(*(void **)(v26 - 104));
    JUMPOUT(0x2235DF5A8);
  }
  _Unwind_Resume(exception_object);
}

void sub_2235DF79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_22332429C((uint64_t *)va3);
  sub_223167354((uint64_t)va2);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2235DF83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2235DF858(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_2235DF8CC(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC52458;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2235DF9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2235DFA40(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC524D8;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2235DFB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2235DFBB4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC52558;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2235DFDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_2235DFE94@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC525D8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2235E00AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235E0174(uint64_t a1)
{
  return sub_2235E02E4(a1 - 16);
}

void sub_2235E017C(uint64_t a1)
{
  sub_2235E02E4(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E01A4(uint64_t a1)
{
  return sub_2235DF8CC((_QWORD *)(a1 - 16));
}

uint64_t *sub_2235E01AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2235DFBB4((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2235E01B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2235DFE94((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_2235E01BC(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_2235E01C4(uint64_t a1)
{
  return sub_2235E02E4(a1 - 24);
}

void sub_2235E01CC(uint64_t a1)
{
  sub_2235E02E4(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E01F4(uint64_t a1)
{
  return sub_2235DFA40((_QWORD *)(a1 - 24));
}

uint64_t sub_2235E01FC(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_2235E0204(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2235E026C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2235E02D4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_2235E02E4(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC52018;
  *(_QWORD *)(a1 + 16) = &unk_24EC52090;
  *(_QWORD *)(a1 + 24) = &unk_24EC520D0;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_2235E04D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC52208;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2235E04E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC52208;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E0518(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC52258;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2235E055C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC52258;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E05B0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC52258;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_2235E0620(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC52258;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2235E0670(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_2235E06AC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_2235E06E4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_2235E0A08((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x227684B68](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2235E08AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x227684B68](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235E0990(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE25EnqueueMessageAndD"
                     "ispatchIZNKS6_4SendERKS5_EUlT_T0_E_EEvS9_SA_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE25Enqueue"
                                "MessageAndDispatchIZNKS6_4SendERKS5_EUlT_T0_E_EEvS9_SA_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE25EnqueueMessageAndDispatchIZNKS6_4SendERKS5_EUlT_T0_E_EEvS9_SA_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE25EnqueueMessageAndDispatchIZNKS6_4SendERKS5_EUlT_T0_E_EEvS9_SA_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235E09FC()
{
  return &unk_24EC522B8;
}

void sub_2235E0A08(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_2235E0AA0()
{
  __break(1u);
}

void sub_2235E0B4C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x2235E0B6CLL);
}

_QWORD *sub_2235E0B78(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC522D8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235E0BB0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC522D8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E0BF8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC522D8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  return result;
}

uint64_t sub_2235E0C50(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC522D8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  return result;
}

void sub_2235E0C88(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235E0C98(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235E0CC4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_2235E0A08((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x227684B68](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235E0D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x227684B68](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235E0DB8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE4SendERKS5_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE4SendERKS5_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE4SendERKS5_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE4SendERKS5_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235E0E24()
{
  return &unk_24EC52338;
}

_QWORD *sub_2235E0E30(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC52358;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_2235E0EB8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC52358;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_2235E0F50(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC52358;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_2235E0FE0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC52358;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_2235E1050(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_2235E10D0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_2235E114C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_2235E0A08(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x227684B68](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2235E1400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2235E1558(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE25EnqueueMessageAndD"
                     "ispatchIZNKS6_7ProcessERKS5_NSt3__17promiseIvEEEUlT_T0_E_EEvS9_SD_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE25Enqueue"
                                "MessageAndDispatchIZNKS6_7ProcessERKS5_NSt3__17promiseIvEEEUlT_T0_E_EEvS9_SD_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE25EnqueueMessageAndDispatchIZNKS6_7ProcessERKS5_NSt3__17promiseIvEEEUlT_T0_E_EEvS9_SD_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE25EnqueueMessageAndDispatchIZNKS6_7ProcessERKS5_NSt3__17promiseIvEEEUlT_T0_E_EEvS9_SD_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235E15C4()
{
  return &unk_24EC523B8;
}

_QWORD *sub_2235E15D0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC523D8;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_2235E164C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC523D8;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E16D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC523D8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  result[4] = *(_QWORD *)(a1 + 32);
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_2235E1750(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC523D8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  v6 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2235E17A8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_2235E1818(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_2235E1888(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_2235E0A08((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x227684B68](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_2235E199C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x227684B68](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235E1A44(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE7ProcessERKS5_NSt3__"
                     "17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE7ProcessE"
                                "RKS5_NSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE7ProcessERKS5_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE7ProcessERKS5_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235E1AB0()
{
  return &unk_24EC52438;
}

_QWORD *sub_2235E1ABC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC52458;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235E1AF4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC52458;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E1B3C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC52458;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2235E1B8C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC52458;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2235E1BBC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235E1BCC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235E1BF8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235E1C8C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235E1CC8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE9SubscribeENS1_12Chan"
                     "nelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE9Subscribe"
                                "ENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235E1D34()
{
  return &unk_24EC524B8;
}

_QWORD *sub_2235E1D40(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC524D8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235E1D78(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC524D8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E1DC0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC524D8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2235E1E10(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC524D8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2235E1E40(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235E1E50(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235E1E7C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235E1F10(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235E1F4C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE15AddErrorHandlerENS1"
                     "_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE15AddError"
                                "HandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235E1FB8()
{
  return &unk_24EC52538;
}

_QWORD *sub_2235E1FC4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC52558;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235E1FFC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC52558;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E2044(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC52558;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2235E209C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC52558;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2235E20D4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235E20E4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235E2110(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235E21C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235E2214(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE16OutputH"
                                "andlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235E2280()
{
  return &unk_24EC525B8;
}

_QWORD *sub_2235E228C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC525D8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235E22C4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC525D8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E230C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC525D8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2235E2364(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC525D8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2235E239C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235E23AC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235E23D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235E2490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235E24DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE15ErrorHa"
                                "ndlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon16MappingAttributeEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235E2548()
{
  return &unk_24EC52638;
}

void sub_2235E2558(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2235E257C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2235E2594(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon16MappingAttributeEvvvLb0EEE"
                     "E27__shared_ptr_default_deleteIS8_S8_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon16MappingAttribut"
                                "eEvvvLb0EEEE27__shared_ptr_default_deleteIS8_S8_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon16MappingAttributeEvvvLb0EEEE27__shared_ptr_default_deleteIS8_S8_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon16MappingAttributeEvvvLb0EEEE27__shared_ptr_default_deleteIS8_S8_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2235E2604(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235E2630(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E266C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC526A8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_2235E26D4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235E2764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235E2778(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235E2808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235E281C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2235E28E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235E28F4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2235E29B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235E29CC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2235E2A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235E2A88(uint64_t a1)
{
  sub_2235E4254(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2235E2AAC(_QWORD *a1, _BYTE *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC52910;
    LOBYTE(v5[1].__vftable) = *a2;
    v8 = v5 + 1;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_22324A974();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24EC52960;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_2245022E4(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *a2;
  v49 = operator new(0x20uLL);
  *v49 = &off_24EC529E0;
  v49[1] = v29;
  v49[2] = v28;
  *((_BYTE *)v49 + 24) = v48;
  v54 = (__int128 *)v49;
  sub_2245022E4(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_2235E2EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235E2FB4(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2235E2FC4(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2235E2FD0(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_2235E2FE0(_QWORD *a1, char *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  std::string *v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  __int128 v70;
  char v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v65 = (_QWORD *)a1[6];
    v64 = a1 + 6;
    v63 = v65;
    v66 = (__int128 *)*((unsigned __int8 *)v64 + 23);
    if ((char)v66 < 0)
      v66 = (__int128 *)v64[1];
    else
      v63 = v64;
    v79 = v63;
    v80 = v66;
    sub_2231A9820((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v82;
    else
      v67 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v67);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v69 = std::runtime_error::runtime_error(exception, &v75);
    v69->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v69, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC2F420;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC52910;
    LOBYTE(v9[1].__vftable) = *a2;
    v12 = v9 + 1;
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_22324A974();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24EC52A60;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_2245022E4(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x227684CE8](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v70 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v70 = v34;
      *((_QWORD *)&v70 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v70 = 0uLL;
    }
  }
  v71 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &unk_24EC2F420;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x30uLL);
  *(_QWORD *)v56 = &off_24EC52AE0;
  *(_OWORD *)(v56 + 8) = v70;
  v56[24] = v71;
  *((_QWORD *)v56 + 4) = v55 + 3;
  *((_QWORD *)v56 + 5) = v55;
  v80 = (__int128 *)v56;
  sub_2245022E4(*v30, (uint64_t)&v78);
  v61 = v80;
  if (v80 == &v78)
  {
    v62 = 4;
    v61 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v62 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 8 * v62))(v61, v57, v58, v59, v60);
}

void sub_2235E3604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::promise<void> *v25;
  uint64_t v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v27.__ptr_ = &a19;
    std::promise<void>::set_exception(v25, v27);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (*(char *)(v26 - 81) < 0)
      operator delete(*(void **)(v26 - 104));
    JUMPOUT(0x2235E3518);
  }
  _Unwind_Resume(exception_object);
}

void sub_2235E370C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_22332429C((uint64_t *)va3);
  sub_223167354((uint64_t)va2);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2235E37AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2235E37C8(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_2235E383C(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC52B60;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2235E394C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2235E39B0(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC52BE0;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2235E3AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2235E3B24@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC52C60;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2235E3D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_2235E3E04@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC52CE0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2235E401C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235E40E4(uint64_t a1)
{
  return sub_2235E4254(a1 - 16);
}

void sub_2235E40EC(uint64_t a1)
{
  sub_2235E4254(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E4114(uint64_t a1)
{
  return sub_2235E383C((_QWORD *)(a1 - 16));
}

uint64_t *sub_2235E411C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2235E3B24((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2235E4124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2235E3E04((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_2235E412C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_2235E4134(uint64_t a1)
{
  return sub_2235E4254(a1 - 24);
}

void sub_2235E413C(uint64_t a1)
{
  sub_2235E4254(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E4164(uint64_t a1)
{
  return sub_2235E39B0((_QWORD *)(a1 - 24));
}

uint64_t sub_2235E416C(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_2235E4174(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2235E41DC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2235E4244(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_2235E4254(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC52720;
  *(_QWORD *)(a1 + 16) = &unk_24EC52798;
  *(_QWORD *)(a1 + 24) = &unk_24EC527D8;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_2235E4440(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC52910;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2235E4450(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC52910;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E4488(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC52960;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2235E44CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC52960;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E4520(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC52960;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_2235E4590(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC52960;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2235E45E0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_2235E461C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_2235E4654(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_2235E4978((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x227684B68](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2235E481C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x227684B68](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235E4900(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE25EnqueueMessage"
                     "AndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE25Enq"
                                "ueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235E496C()
{
  return &unk_24EC529C0;
}

void sub_2235E4978(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_2235E4A10()
{
  __break(1u);
}

void sub_2235E4ABC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x2235E4ADCLL);
}

_QWORD *sub_2235E4AE8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC529E0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235E4B20(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC529E0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E4B68(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC529E0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  return result;
}

uint64_t sub_2235E4BC0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC529E0;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  return result;
}

void sub_2235E4BF8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235E4C08(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235E4C34(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_2235E4978((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x227684B68](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235E4CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x227684B68](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235E4D28(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235E4D94()
{
  return &unk_24EC52A40;
}

_QWORD *sub_2235E4DA0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC52A60;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_2235E4E28(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC52A60;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_2235E4EC0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC52A60;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_2235E4F50(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC52A60;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_2235E4FC0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_2235E5040(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_2235E50BC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_2235E4978(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x227684B68](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2235E5370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2235E54C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE25EnqueueMessage"
                     "AndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE25Enq"
                                "ueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235E5534()
{
  return &unk_24EC52AC0;
}

_QWORD *sub_2235E5540(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC52AE0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_2235E55BC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC52AE0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E5648(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC52AE0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  result[4] = *(_QWORD *)(a1 + 32);
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_2235E56C0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC52AE0;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  v6 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2235E5718(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_2235E5788(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_2235E57F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_2235E4978((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x227684B68](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_2235E590C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x227684B68](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235E59B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE7ProcessERKS6_NS"
                     "t3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE7Proc"
                                "essERKS6_NSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235E5A20()
{
  return &unk_24EC52B40;
}

_QWORD *sub_2235E5A2C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC52B60;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235E5A64(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC52B60;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E5AAC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC52B60;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2235E5AFC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC52B60;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2235E5B2C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235E5B3C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235E5B68(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235E5BFC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235E5C38(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE9SubscribeENS1_12"
                     "ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE9Subsc"
                                "ribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235E5CA4()
{
  return &unk_24EC52BC0;
}

_QWORD *sub_2235E5CB0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC52BE0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235E5CE8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC52BE0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E5D30(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC52BE0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2235E5D80(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC52BE0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2235E5DB0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235E5DC0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235E5DEC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235E5E80(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235E5EBC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE15AddErrorHandler"
                     "ENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE15AddE"
                                "rrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235E5F28()
{
  return &unk_24EC52C40;
}

_QWORD *sub_2235E5F34(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC52C60;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235E5F6C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC52C60;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E5FB4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC52C60;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2235E600C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC52C60;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2235E6044(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235E6054(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235E6080(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235E6138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235E6184(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE16Out"
                                "putHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235E61F0()
{
  return &unk_24EC52CC0;
}

_QWORD *sub_2235E61FC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC52CE0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235E6234(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC52CE0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E627C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC52CE0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2235E62D4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC52CE0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2235E630C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235E631C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235E6348(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235E6400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235E644C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE15Err"
                                "orHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng16EnablePRRRequestEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235E64B8()
{
  return &unk_24EC52D40;
}

void sub_2235E64C8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2235E64EC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2235E6504(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng16EnablePRRRequestEvvvLb"
                     "0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng16EnablePRRRe"
                                "questEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng16EnablePRRRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng16EnablePRRRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2235E6574(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235E65A0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E65DC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC52DB0;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_2235E6644(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235E66D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235E66E8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235E6778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235E678C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2235E6850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235E6864(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2235E6928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235E693C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2235E69E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235E69F8(uint64_t a1)
{
  sub_2235E822C(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2235E6A1C(_QWORD *a1, _BYTE *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC53018;
    LOBYTE(v5[1].__vftable) = *a2;
    v8 = v5 + 1;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_22324A974();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24EC53068;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_2245022E4(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *a2;
  v49 = operator new(0x20uLL);
  *v49 = &off_24EC530E8;
  v49[1] = v29;
  v49[2] = v28;
  *((_BYTE *)v49 + 24) = v48;
  v54 = (__int128 *)v49;
  sub_2245022E4(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_2235E6E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235E6F24(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2235E6F34(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2235E6F40(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_2235E6F50(_QWORD *a1, char *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  std::string *v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  __int128 v70;
  char v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v65 = (_QWORD *)a1[6];
    v64 = a1 + 6;
    v63 = v65;
    v66 = (__int128 *)*((unsigned __int8 *)v64 + 23);
    if ((char)v66 < 0)
      v66 = (__int128 *)v64[1];
    else
      v63 = v64;
    v79 = v63;
    v80 = v66;
    sub_2231A9820((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v82;
    else
      v67 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v67);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v69 = std::runtime_error::runtime_error(exception, &v75);
    v69->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v69, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC3AC28;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC53018;
    LOBYTE(v9[1].__vftable) = *a2;
    v12 = v9 + 1;
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_22324A974();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24EC53168;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_2245022E4(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x227684CE8](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v70 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v70 = v34;
      *((_QWORD *)&v70 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v70 = 0uLL;
    }
  }
  v71 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &unk_24EC3AC28;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x30uLL);
  *(_QWORD *)v56 = &off_24EC531E8;
  *(_OWORD *)(v56 + 8) = v70;
  v56[24] = v71;
  *((_QWORD *)v56 + 4) = v55 + 3;
  *((_QWORD *)v56 + 5) = v55;
  v80 = (__int128 *)v56;
  sub_2245022E4(*v30, (uint64_t)&v78);
  v61 = v80;
  if (v80 == &v78)
  {
    v62 = 4;
    v61 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v62 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 8 * v62))(v61, v57, v58, v59, v60);
}

void sub_2235E7574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  std::__assoc_sub_state **v22;
  uint64_t v23;
  std::__assoc_sub_state *v24;
  std::exception_ptr v25;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v24 = *v22;
    if (*v22)
    {
      std::exception_ptr::exception_ptr(&a22, &a19);
      v25.__ptr_ = &a22;
      std::__assoc_sub_state::set_exception(v24, v25);
      std::exception_ptr::~exception_ptr(&a22);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (*(char *)(v23 - 81) < 0)
        operator delete(*(void **)(v23 - 104));
      JUMPOUT(0x2235E7488);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_2235E75E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  uint64_t v22;

  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (*(char *)(v22 - 81) < 0)
  {
    operator delete(*(void **)(v22 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2235E763C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a26;
  if (a26 == v26)
  {
    v29 = 4;
    v28 = &a23;
  }
  else
  {
    if (!a26)
    {
      sub_22334FD8C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
  sub_22334FD8C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235E7690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2235E76B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_22332429C((uint64_t *)va3);
  sub_223167354((uint64_t)va2);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2235E7754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2235E7770(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_2235E77E4(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC53268;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC2DF48;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_2235E7914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2235E7988(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC532E8;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2235E7A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2235E7AFC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC53368;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2235E7D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_2235E7DDC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC533E8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2235E7FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235E80BC(uint64_t a1)
{
  return sub_2235E822C(a1 - 16);
}

void sub_2235E80C4(uint64_t a1)
{
  sub_2235E822C(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E80EC(uint64_t a1, uint64_t a2)
{
  return sub_2235E77E4((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2235E80F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2235E7AFC((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2235E80FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2235E7DDC((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_2235E8104(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_2235E810C(uint64_t a1)
{
  return sub_2235E822C(a1 - 24);
}

void sub_2235E8114(uint64_t a1)
{
  sub_2235E822C(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E813C(uint64_t a1)
{
  return sub_2235E7988((_QWORD *)(a1 - 24));
}

uint64_t sub_2235E8144(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_2235E814C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2235E81B4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2235E821C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_2235E822C(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC52E28;
  *(_QWORD *)(a1 + 16) = &unk_24EC52EA0;
  *(_QWORD *)(a1 + 24) = &unk_24EC52EE0;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_2235E842C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC53018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2235E843C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC53018;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E8474(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC53068;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2235E84B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC53068;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E850C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC53068;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_2235E857C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC53068;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2235E85CC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_2235E8608(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_2235E8640(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_2235E8964((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_2234AB028(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2235E8808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_2234AB028(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235E88EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EE2"
                     "5EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionReques"
                                "tEbvbLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235E8958()
{
  return &unk_24EC530C8;
}

void sub_2235E8964(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::exception_ptr v16;
  char v17;

  v6 = *a1;
  if (!v6)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    v7 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (byte_255795670)
      v8 = byte_255795678 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_255795648;
      for (i = qword_255795650; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "callable_", 9, "", 0);
    v6 = *a1;
  }
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, char *))(j[2] + 16))(j + 2, &v17);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_2233236D4(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v16.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v16), v15))
    {
      sub_2233236D4(2u);
    }
    *(_BYTE *)(v14 + 140) = v17;
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
}

void sub_2235E8BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16)
{
  std::mutex *v16;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  std::mutex::unlock(v16);
  if (a2 == 1)
  {
    v19 = (uint64_t *)__cxa_begin_catch(a1);
    v20 = *v19;
    a10 = *(_QWORD *)(*(_QWORD *)(*v19 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v20 + 16))();
    sub_2233233A4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v21 = (uint64_t *)&a11;
    else
      v21 = a11;
    if ((a16 & 0x80u) == 0)
      v22 = a16;
    else
      v22 = a12;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v21, v22, (void (*)(void **))sub_22457406C);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_2235E8C98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x2235E8CB8);
}

_QWORD *sub_2235E8CC4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC530E8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235E8CFC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC530E8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E8D44(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC530E8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  return result;
}

uint64_t sub_2235E8D9C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC530E8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  return result;
}

void sub_2235E8DD4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235E8DE4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235E8E10(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_2235E8964((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_2234AB028(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235E8EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_2234AB028(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235E8F04(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EE4"
                     "SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionReques"
                                "tEbvbLb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235E8F70()
{
  return &unk_24EC53148;
}

_QWORD *sub_2235E8F7C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC53168;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_2235E9004(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC53168;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_2235E909C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC53168;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_2235E912C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC53168;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_2235E919C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_2235E921C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_2235E9298(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_2235E8964(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_2234AB028((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2235E9574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_2235E95A0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x2235E93ACLL);
    JUMPOUT(0x2235E937CLL);
  }
  sub_2233236D4(3u);
}

void sub_2235E95FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_2235E9628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_2234AB028(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2235E9714(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EE2"
                     "5EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIbEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionReques"
                                "tEbvbLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIbEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIbEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIbEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235E9780()
{
  return &unk_24EC531C8;
}

_QWORD *sub_2235E978C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC531E8;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_2235E9808(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC531E8;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E9894(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC531E8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  result[4] = *(_QWORD *)(a1 + 32);
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_2235E990C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC531E8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  v6 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2235E9964(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_2235E99D4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_2235E9A44(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_2235E8964((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_2234AB028((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_2235E9B54(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_2235E9BCC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x2235E9C00);
  JUMPOUT(0x2235E9C30);
}

uint64_t sub_2235E9C38(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EE7"
                     "ProcessERKS6_NSt3__17promiseIbEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionReques"
                                "tEbvbLb0EE7ProcessERKS6_NSt3__17promiseIbEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EE7ProcessERKS6_NSt3__17promiseIbEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EE7ProcessERKS6_NSt3__17promiseIbEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235E9CA4()
{
  return &unk_24EC53248;
}

_QWORD *sub_2235E9CB0(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC53268;
  v2 = a1[4];
  a1[3] = &off_24EC2DF48;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2235E9D08(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC53268;
  v2 = a1[4];
  a1[3] = &off_24EC2DF48;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235E9D70(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC53268;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC2DF48;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_2235E9DE8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2235E9E08(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC53268;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC2DF48;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_2235E9E70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_2235E9E88(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC2DF48;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_2235E9ED8(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC2DF48;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_2235E9F24(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC2DF48;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235E9FD8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235EA014(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EE9S"
                     "ubscribeENS1_12ChannelInputIbEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequest"
                                "EbvbLb0EE9SubscribeENS1_12ChannelInputIbEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EE9SubscribeENS1_12ChannelInputIbEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EE9SubscribeENS1_12ChannelInputIbEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235EA080()
{
  return &unk_24EC532C8;
}

_QWORD *sub_2235EA08C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC532E8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235EA0C4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC532E8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235EA10C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC532E8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2235EA15C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC532E8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2235EA18C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235EA19C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235EA1C8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235EA25C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235EA298(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EE15"
                     "AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequest"
                                "EbvbLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235EA304()
{
  return &unk_24EC53348;
}

_QWORD *sub_2235EA310(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC53368;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235EA348(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC53368;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235EA390(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC53368;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2235EA3E8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC53368;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2235EA420(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235EA430(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235EA45C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_2235EA5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235EA648(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EE1"
                     "6OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionReques"
                                "tEbvbLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235EA6B4()
{
  return &unk_24EC533C8;
}

_QWORD *sub_2235EA6C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC533E8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235EA6F8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC533E8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235EA740(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC533E8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2235EA798(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC533E8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2235EA7D0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235EA7E0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235EA80C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235EA8C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235EA910(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EE1"
                     "5ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionReques"
                                "tEbvbLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235EA97C()
{
  return &unk_24EC53448;
}

void sub_2235EA98C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2235EA9B0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2235EA9C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng31EnableSpatialSubdivisi"
                     "onRequestEbvbLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng31EnableSpati"
                                "alSubdivisionRequestEbvbLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng31EnableSpatialSubdivisionRequestEbvbLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2235EAA38(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235EAA64(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235EAAA0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC534B8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_2235EAB08(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235EAB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235EABAC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235EAC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235EAC50(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2235EAD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235EAD28(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2235EADEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235EAE00(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2235EAEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235EAEBC(uint64_t a1)
{
  sub_2235EC6F8(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2235EAEE0(_QWORD *a1, std::__shared_count *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 *v53;
  _BYTE v54[24];
  _BYTE *v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x28uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC53720;
    v8 = v5 + 1;
    v5[1].std::__shared_count = *a2;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v51 = v10;
    *((_QWORD *)&v51 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_22324A974();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v51;
      if (!(_QWORD)v51)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v51 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v51 = v38;
            *((_QWORD *)&v51 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v51 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24EC53770;
        *(_OWORD *)(v43 + 8) = v51;
        v51 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v52 = 0;
        v53 = 0;
        v55 = v43;
        sub_2245022E4(*v34, (uint64_t)v54);
        v44 = v55;
        if (v55 == v54)
        {
          v45 = 4;
          v44 = v54;
        }
        else
        {
          if (!v55)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v51;
      if (!(_QWORD)v51)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = (char *)operator new(0x28uLL);
  *(_QWORD *)v48 = &off_24EC537F0;
  *((_QWORD *)v48 + 1) = v29;
  *((_QWORD *)v48 + 2) = v28;
  *(std::__shared_count *)(v48 + 24) = *a2;
  v53 = (__int128 *)v48;
  sub_2245022E4(*v25, (uint64_t)&v51);
  v49 = v53;
  if (v53 == &v51)
  {
    v50 = 4;
    v49 = &v51;
  }
  else
  {
    if (!v53)
      return;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
}

void sub_2235EB2F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235EB3E8(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2235EB3F8(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2235EB404(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_2235EB414(_QWORD *a1, _OWORD *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  unint64_t *v10;
  unint64_t *v11;
  char *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *p_shared_weak_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  __int128 *v63;
  std::string *v64;
  std::runtime_error *exception;
  std::runtime_error *v66;
  __int128 v67;
  __int128 v68;
  _QWORD *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  std::runtime_error v72;
  char *v73;
  std::__shared_weak_count *v74;
  __int128 v75;
  _QWORD *v76;
  __int128 *v77;
  _QWORD v78[3];
  std::string v79;
  std::string *v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v75 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v75 + 1) = 45;
    v62 = (_QWORD *)a1[6];
    v61 = a1 + 6;
    v60 = v62;
    v63 = (__int128 *)*((unsigned __int8 *)v61 + 23);
    if ((char)v63 < 0)
      v63 = (__int128 *)v61[1];
    else
      v60 = v61;
    v76 = v60;
    v77 = v63;
    sub_2231A9820((uint64_t)&v75, (uint64_t)v78, 0, 0, &v79);
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = &v79;
    else
      v64 = (std::string *)v79.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v72, (const char *)v64);
    v72.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v66 = std::runtime_error::runtime_error(exception, &v72);
    v66->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v66, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC3AC28;
    v6[1].__vftable = *a3;
    v71 = v6;
    v69 = &v6[1].__vftable;
    v70 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (char *)operator new(0x28uLL);
    *((_QWORD *)v9 + 1) = 0;
    v10 = (unint64_t *)(v9 + 8);
    *((_QWORD *)v9 + 2) = 0;
    v11 = (unint64_t *)(v9 + 16);
    *(_QWORD *)v9 = &off_24EC53720;
    v12 = v9 + 24;
    *(_OWORD *)(v9 + 24) = *a2;
    v73 = v9 + 24;
    v74 = (std::__shared_weak_count *)v9;
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v75 = v15;
    *((_QWORD *)&v75 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_22324A974();
    v16 = v14[4];
    v17 = *v14;
    v18 = (_QWORD *)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v75;
      if (!(_QWORD)v75)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v75 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(p_shared_weak_owners);
            while (__stxr(v45 + 1, p_shared_weak_owners));
            *(_QWORD *)&v75 = v43;
            *((_QWORD *)&v75 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v75 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24EC53870;
        *(_OWORD *)(v48 + 8) = v75;
        v75 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v76 = 0;
        v77 = 0;
        *((_QWORD *)v48 + 5) = v69;
        *((_QWORD *)v48 + 6) = v70;
        v78[0] = 0;
        v78[1] = 0;
        v80 = (std::string *)v48;
        sub_2245022E4(*v39, (uint64_t)&v79);
        v49 = v80;
        if (v80 == &v79)
        {
          v50 = 4;
          v49 = &v79;
        }
        else
        {
          if (!v80)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v74)
        {
          v51 = &v74->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        if (v71)
        {
          v53 = (unint64_t *)&v71->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v75;
      if (!(_QWORD)v75)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x227684CE8](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v67 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v67 = v34;
      *((_QWORD *)&v67 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v67 = 0uLL;
    }
  }
  v68 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &unk_24EC3AC28;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x38uLL);
  *(_QWORD *)v56 = &off_24EC538F0;
  *(_OWORD *)(v56 + 8) = v67;
  *(_OWORD *)(v56 + 24) = v68;
  *((_QWORD *)v56 + 5) = v55 + 3;
  *((_QWORD *)v56 + 6) = v55;
  v77 = (__int128 *)v56;
  sub_2245022E4(*v30, (uint64_t)&v75);
  v58 = v77;
  if (v77 == &v75)
  {
    v59 = 4;
    v58 = &v75;
  }
  else
  {
    if (!v77)
      return;
    v59 = 5;
  }
  (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)v58 + 8 * v59))(v58, v57);
}

void sub_2235EBA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  std::__assoc_sub_state **v24;
  uint64_t v25;
  std::__assoc_sub_state *v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v26 = *v24;
    if (*v24)
    {
      std::exception_ptr::exception_ptr(&a24, &a21);
      v27.__ptr_ = &a24;
      std::__assoc_sub_state::set_exception(v26, v27);
      std::exception_ptr::~exception_ptr(&a24);
      std::exception_ptr::~exception_ptr(&a21);
      std::runtime_error::~runtime_error(&a20);
      if (*(char *)(v25 - 81) < 0)
        operator delete(*(void **)(v25 - 104));
      JUMPOUT(0x2235EB954);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_2235EBAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  uint64_t v24;

  std::exception_ptr::~exception_ptr(&a21);
  std::runtime_error::~runtime_error(&a20);
  if (*(char *)(v24 - 81) < 0)
  {
    operator delete(*(void **)(v24 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2235EBB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v28;
  char *v30;
  uint64_t v31;

  v30 = a28;
  if (a28 == v28)
  {
    v31 = 4;
    v30 = &a25;
  }
  else
  {
    if (!a28)
    {
      sub_22338B9C0((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
  sub_22338B9C0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235EBB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2235EBB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 80);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 104);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_22332429C((uint64_t *)va3);
  sub_223167354((uint64_t)va2);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2235EBC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2235EBC3C(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_2235EBCB0(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC53970;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC2DF48;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_2235EBDE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2235EBE54(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC539F0;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2235EBF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2235EBFC8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC53A70;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2235EC1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_2235EC2A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC53AF0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2235EC4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235EC588(uint64_t a1)
{
  return sub_2235EC6F8(a1 - 16);
}

void sub_2235EC590(uint64_t a1)
{
  sub_2235EC6F8(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235EC5B8(uint64_t a1, uint64_t a2)
{
  return sub_2235EBCB0((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2235EC5C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2235EBFC8((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2235EC5C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2235EC2A8((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_2235EC5D0(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_2235EC5D8(uint64_t a1)
{
  return sub_2235EC6F8(a1 - 24);
}

void sub_2235EC5E0(uint64_t a1)
{
  sub_2235EC6F8(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235EC608(uint64_t a1)
{
  return sub_2235EBE54((_QWORD *)(a1 - 24));
}

uint64_t sub_2235EC610(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_2235EC618(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2235EC680(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2235EC6E8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_2235EC6F8(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC53530;
  *(_QWORD *)(a1 + 16) = &unk_24EC535A8;
  *(_QWORD *)(a1 + 24) = &unk_24EC535E8;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_2235EC8F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC53720;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2235EC908(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC53720;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235EC940(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC53770;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2235EC984(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC53770;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235EC9D8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC53770;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_2235ECA48(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC53770;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2235ECA98(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_2235ECAD4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_2235ECB0C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_2235ECE30((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_2234AB028(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2235ECCD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_2234AB028(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235ECDB8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0E"
                     "E25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequ"
                                "estEbvbLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235ECE24()
{
  return &unk_24EC537D0;
}

void sub_2235ECE30(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::exception_ptr v16;
  char v17;

  v6 = *a1;
  if (!v6)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    v7 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (byte_255795670)
      v8 = byte_255795678 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_255795648;
      for (i = qword_255795650; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "callable_", 9, "", 0);
    v6 = *a1;
  }
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, char *))(j[2] + 16))(j + 2, &v17);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_2233236D4(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v16.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v16), v15))
    {
      sub_2233236D4(2u);
    }
    *(_BYTE *)(v14 + 140) = v17;
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
}

void sub_2235ED09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16)
{
  std::mutex *v16;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  std::mutex::unlock(v16);
  if (a2 == 1)
  {
    v19 = (uint64_t *)__cxa_begin_catch(a1);
    v20 = *v19;
    a10 = *(_QWORD *)(*(_QWORD *)(*v19 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v20 + 16))();
    sub_2233233A4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v21 = (uint64_t *)&a11;
    else
      v21 = a11;
    if ((a16 & 0x80u) == 0)
      v22 = a16;
    else
      v22 = a12;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v21, v22, (void (*)(void **))sub_22457406C);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_2235ED164(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x2235ED184);
}

_QWORD *sub_2235ED190(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC537F0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235ED1C8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC537F0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

__n128 sub_2235ED210(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_24EC537F0;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_2235ED268(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24EC537F0;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_2235ED2A0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235ED2B0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235ED2DC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_2235ECE30((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_2234AB028(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235ED384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_2234AB028(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235ED3D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0E"
                     "E4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequ"
                                "estEbvbLb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235ED43C()
{
  return &unk_24EC53850;
}

_QWORD *sub_2235ED448(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC53870;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_2235ED4D0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC53870;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_2235ED568(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC53870;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_2235ED5F8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC53870;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_2235ED668(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_2235ED6E8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_2235ED764(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_2235ECE30(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_2234AB028((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2235EDA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_2235EDA6C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x2235ED878);
    JUMPOUT(0x2235ED848);
  }
  sub_2233236D4(3u);
}

void sub_2235EDAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_2235EDAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_2234AB028(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2235EDBE0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0E"
                     "E25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIbEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequ"
                                "estEbvbLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIbEEEUlT_T0_E"
                                "_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIbEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIbEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235EDC4C()
{
  return &unk_24EC538D0;
}

_QWORD *sub_2235EDC58(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC538F0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_2235EDCD4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC538F0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

char *sub_2235EDD60(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = (char *)operator new(0x38uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)result = &off_24EC538F0;
  *((_QWORD *)result + 1) = v4;
  *((_QWORD *)result + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 48);
  *((_QWORD *)result + 5) = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 6) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_2235EDDD8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC538F0;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  v6 = *(_QWORD *)(result + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2235EDE30(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_2235EDEA0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_2235EDF10(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[5];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_2235ECE30((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_2234AB028((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_2235EE020(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_2235EE098(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x2235EE0CCLL);
  JUMPOUT(0x2235EE0FCLL);
}

uint64_t sub_2235EE104(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0E"
                     "E7ProcessERKS6_NSt3__17promiseIbEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequ"
                                "estEbvbLb0EE7ProcessERKS6_NSt3__17promiseIbEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0EE7ProcessERKS6_NSt3__17promiseIbEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0EE7ProcessERKS6_NSt3__17promiseIbEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235EE170()
{
  return &unk_24EC53950;
}

_QWORD *sub_2235EE17C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC53970;
  v2 = a1[4];
  a1[3] = &off_24EC2DF48;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2235EE1D4(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC53970;
  v2 = a1[4];
  a1[3] = &off_24EC2DF48;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235EE23C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC53970;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC2DF48;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_2235EE2B4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2235EE2D4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC53970;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC2DF48;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_2235EE33C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_2235EE354(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC2DF48;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_2235EE3A4(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC2DF48;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_2235EE3F0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC2DF48;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235EE4A4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235EE4E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0EE"
                     "9SubscribeENS1_12ChannelInputIbEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityReque"
                                "stEbvbLb0EE9SubscribeENS1_12ChannelInputIbEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0EE9SubscribeENS1_12ChannelInputIbEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0EE9SubscribeENS1_12ChannelInputIbEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235EE54C()
{
  return &unk_24EC539D0;
}

_QWORD *sub_2235EE558(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC539F0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235EE590(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC539F0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235EE5D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC539F0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2235EE628(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC539F0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2235EE658(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235EE668(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235EE694(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235EE728(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235EE764(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0EE"
                     "15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityReque"
                                "stEbvbLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235EE7D0()
{
  return &unk_24EC53A50;
}

_QWORD *sub_2235EE7DC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC53A70;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235EE814(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC53A70;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235EE85C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC53A70;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2235EE8B4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC53A70;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2235EE8EC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235EE8FC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235EE928(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_2235EEAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235EEB14(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0E"
                     "E16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequ"
                                "estEbvbLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235EEB80()
{
  return &unk_24EC53AD0;
}

_QWORD *sub_2235EEB8C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC53AF0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235EEBC4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC53AF0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235EEC0C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC53AF0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2235EEC64(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC53AF0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2235EEC9C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2235EECAC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2235EECD8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235EED90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235EEDDC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0E"
                     "E15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequ"
                                "estEbvbLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2235EEE48()
{
  return &unk_24EC53B50;
}

void sub_2235EEE58(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2235EEE7C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2235EEE94(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng33EnableOccupancyByProxi"
                     "mityRequestEbvbLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng33EnableOccup"
                                "ancyByProximityRequestEbvbLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng33EnableOccupancyByProximityRequestEbvbLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2235EEF04(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2235EEF30(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2235EEF6C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC53BC0;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_2235EEFD4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235EF064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235EF078(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2235EF108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235EF11C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2235EF1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235EF1F4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2235EF2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235EF2CC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2235EF370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2235EF384(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  _QWORD v13[2];

  v4 = *a3;
  v5 = (std::__shared_weak_count *)a3[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v13[0] = v4;
  v13[1] = v5;
  v12 = 0;
  sub_2235EF4B4(a1, (uint64_t)v13, a2, &v12);
  v8 = v12;
  v12 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void sub_2235EF484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_223167354((uint64_t)va1);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2235EF4B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void **v13;
  uint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  void **v22;
  _BYTE *v23;
  size_t v24;
  char *v25;
  void **v26;
  char *v27;
  char *v28;
  void **v29;
  char *v30;
  char *v31;
  void **v32;
  char *v33;
  void **v34;
  char *v35;
  void **v36;
  char *v37;
  void **v38;
  char *v39;
  void **v40;
  char *v41;
  void **v42;
  char *v43;
  char *v44;
  void **v45;
  void **v46;
  char *v47;
  char *v48;
  void **v49;
  char *v50;
  char *v51;
  void **v52;
  void **v53;
  char *v54;
  char *v55;
  void **v56;
  char *v57;
  void **v58;
  char *v59;
  void **v60;
  char *v61;
  void **v62;
  char *v63;
  char *v64;
  void **v65;
  char *v66;
  char *v67;
  void **v68;
  void **v69;
  char *v70;
  void **v71;
  char *v72;
  char *v73;
  void **v74;
  char *v75;
  char *v76;
  void **v77;
  void **v78;
  char *v79;
  char *v80;
  void **v81;
  char *v82;
  char *v83;
  void **v84;
  void **v85;
  char *v86;
  void **v87;
  char *v88;
  void **v89;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  void **v95;
  void **v96;
  void **v97;
  void **v98;
  void **v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE __p[24];
  void *__dst[2];
  uint64_t v106;

  *(_OWORD *)(a1 + 8) = 0u;
  v5 = (void **)(a1 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v6 = a1 + 64;
  *(_OWORD *)(a1 + 120) = 0u;
  v7 = a1 + 120;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v99 = (void **)(a1 + 176);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  v8 = (void **)(a1 + 232);
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  v9 = (void **)(a1 + 344);
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  v98 = (void **)(a1 + 456);
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  v10 = a1 + 568;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  v103 = a1 + 680;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  v101 = a1 + 792;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  v95 = (void **)(a1 + 904);
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  v97 = (void **)(a1 + 1016);
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  v102 = a1 + 1128;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  v96 = (void **)(a1 + 1240);
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  v100 = a1 + 1352;
  *(_QWORD *)a1 = &off_24EC53C38;
  *(_QWORD *)(a1 + 56) = &unk_24EC53D20;
  *(_QWORD *)(a1 + 112) = &unk_24EC53D48;
  *(_QWORD *)(a1 + 168) = &unk_24EC53D70;
  *(_QWORD *)(a1 + 224) = &unk_24EC53D98;
  *(_QWORD *)(a1 + 280) = &unk_24EC53DC0;
  *(_QWORD *)(a1 + 336) = &unk_24EC53DE8;
  *(_QWORD *)(a1 + 392) = &unk_24EC53E10;
  *(_QWORD *)(a1 + 448) = &unk_24EC53E38;
  *(_QWORD *)(a1 + 504) = &unk_24EC53E60;
  *(_QWORD *)(a1 + 560) = &unk_24EC53E88;
  *(_QWORD *)(a1 + 616) = &unk_24EC53EB0;
  *(_QWORD *)(a1 + 672) = &unk_24EC53ED8;
  *(_QWORD *)(a1 + 728) = &unk_24EC53F00;
  *(_QWORD *)(a1 + 784) = &unk_24EC53F28;
  *(_QWORD *)(a1 + 840) = &unk_24EC53F50;
  *(_QWORD *)(a1 + 896) = &unk_24EC53F78;
  *(_QWORD *)(a1 + 952) = &unk_24EC53FA0;
  *(_QWORD *)(a1 + 1008) = &unk_24EC53FC8;
  *(_QWORD *)(a1 + 1064) = &unk_24EC53FF0;
  *(_QWORD *)(a1 + 1120) = &unk_24EC54018;
  *(_QWORD *)(a1 + 1176) = &unk_24EC54040;
  *(_QWORD *)(a1 + 1232) = &unk_24EC54068;
  *(_QWORD *)(a1 + 1288) = &unk_24EC54090;
  *(_QWORD *)(a1 + 1344) = &unk_24EC540B8;
  v11 = *a4;
  if (*a4)
  {
    *a4 = 0;
  }
  else
  {
    v16 = operator new();
    v11 = v16;
    v17 = *(void **)a2;
    v18 = *(std::__shared_weak_count **)(a2 + 8);
    *(_QWORD *)__p = v17;
    *(_QWORD *)&__p[8] = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
      __dst[0] = v17;
      __dst[1] = v18;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    else
    {
      __dst[0] = v17;
      __dst[1] = 0;
    }
    sub_22355ACE8(v16, (uint64_t *)__dst, a3);
    if (v18)
    {
      v91 = (unint64_t *)&v18->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (*(_QWORD *)&__p[8])
    {
      v93 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)&__p[8] + 16))(*(_QWORD *)&__p[8]);
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[8]);
      }
    }
  }
  *(_QWORD *)(a1 + 1448) = v11;
  HIBYTE(v106) = 12;
  strcpy((char *)__dst, "Meshing Node");
  v12 = (char *)operator new(0x30uLL);
  v13 = (void **)(a1 + 1400);
  *(_QWORD *)__p = v12;
  *(_OWORD *)&__p[8] = xmmword_2245C7A50;
  strcpy(v12, "Handles all the volumetric meshing task.");
  if ((void **)(a1 + 1400) != __dst)
  {
    if (*(char *)(a1 + 1423) < 0)
    {
      sub_22319C4B8(v13, __dst, 0xCuLL);
    }
    else
    {
      *(_OWORD *)v13 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 1416) = v106;
    }
  }
  v22 = (void **)(a1 + 1424);
  if ((_BYTE *)(a1 + 1424) != __p)
  {
    if (*(char *)(a1 + 1447) < 0)
    {
      if (__p[23] >= 0)
        v23 = __p;
      else
        v23 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v24 = __p[23];
      else
        v24 = *(_QWORD *)&__p[8];
      sub_22319C4B8(v22, v23, v24);
    }
    else if ((__p[23] & 0x80) != 0)
    {
      sub_22319C3F4(v22, *(void **)__p, *(size_t *)&__p[8]);
    }
    else
    {
      *(_OWORD *)v22 = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 1440) = *(_QWORD *)&__p[16];
    }
  }
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((SHIBYTE(v106) & 0x80000000) == 0)
      goto LABEL_27;
  }
  else if ((SHIBYTE(v106) & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(__dst[0]);
LABEL_27:
  v25 = (char *)operator new(0x50uLL);
  strcpy(v25, "Given a frame bundle, processes and integrates the data in the volumetric map.");
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v5);
  strcpy((char *)(a1 + 8), "Process Frame Bundle");
  *(_BYTE *)(a1 + 31) = 20;
  sub_223197FA4(__dst, v25, 0x4EuLL);
  v26 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v26);
  *(_OWORD *)v26 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 48) = v106;
  operator delete(v25);
  v27 = (char *)operator new(0x20uLL);
  strcpy(v27, "Process KeyframeEngineResult");
  v28 = (char *)operator new(0x60uLL);
  strcpy(v28, "Given a list of keyframe bundles, processes and integrates the data in the volumetric map.");
  sub_223197FA4(__dst, v27, 0x1CuLL);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)v6);
  *(_OWORD *)v6 = *(_OWORD *)__dst;
  *(_QWORD *)(v6 + 16) = v106;
  sub_223197FA4(__dst, v28, 0x5AuLL);
  v29 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v29);
  *(_OWORD *)v29 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 104) = v106;
  operator delete(v28);
  operator delete(v27);
  v30 = (char *)operator new(0x28uLL);
  strcpy(v30, "Process KeyframeEngineResult Sync");
  v31 = (char *)operator new(0x80uLL);
  strcpy(v31, "Given a list of keyframe bundles, processes and integrates the data in the volumetric map without meshing updated chunks.");
  sub_223197FA4(__dst, v30, 0x21uLL);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)v7);
  *(_OWORD *)v7 = *(_OWORD *)__dst;
  *(_QWORD *)(v7 + 16) = v106;
  sub_223197FA4(__dst, v31, 0x79uLL);
  v32 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0)
    operator delete(*v32);
  *(_OWORD *)v32 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 160) = v106;
  operator delete(v31);
  operator delete(v30);
  v33 = (char *)operator new(0x28uLL);
  strcpy(v33, "Resets the current volumetric map.");
  if (*(char *)(a1 + 199) < 0)
    operator delete(*v99);
  strcpy((char *)(a1 + 176), "Reset Session");
  *(_WORD *)(a1 + 190) = 0;
  *(_BYTE *)(a1 + 199) = 13;
  sub_223197FA4(__dst, v33, 0x22uLL);
  v34 = (void **)(a1 + 200);
  if (*(char *)(a1 + 223) < 0)
    operator delete(*v34);
  *(_OWORD *)v34 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 216) = v106;
  operator delete(v33);
  v35 = (char *)operator new(0x38uLL);
  strcpy(v35, "Saves different modalities of volumetric map to disk.");
  if (*(char *)(a1 + 255) < 0)
    operator delete(*v8);
  strcpy((char *)(a1 + 232), "Save Diagnostic data");
  *(_BYTE *)(a1 + 255) = 20;
  sub_223197FA4(__dst, v35, 0x35uLL);
  v36 = (void **)(a1 + 256);
  if (*(char *)(a1 + 279) < 0)
    operator delete(*v36);
  *(_OWORD *)v36 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 272) = v106;
  operator delete(v35);
  if (*(char *)(a1 + 311) < 0)
    operator delete(*(void **)(a1 + 288));
  *(_QWORD *)(a1 + 288) = 0x73654D2065766153;
  *(_QWORD *)(a1 + 296) = 7562600;
  *(_BYTE *)(a1 + 311) = 11;
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  strcpy((char *)(a1 + 312), "Saves meshes to disk.");
  *(_BYTE *)(a1 + 335) = 21;
  v37 = (char *)operator new(0x38uLL);
  strcpy(v37, "Requests to incrementally re-mesh the volumetric map.");
  if (*(char *)(a1 + 367) < 0)
    operator delete(*v9);
  *(_QWORD *)(a1 + 344) = 0x4D2D6552206B7341;
  *(_QWORD *)(a1 + 352) = 6845285;
  *(_BYTE *)(a1 + 367) = 11;
  sub_223197FA4(__dst, v37, 0x35uLL);
  v38 = (void **)(a1 + 368);
  if (*(char *)(a1 + 391) < 0)
    operator delete(*v38);
  *(_OWORD *)v38 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 384) = v106;
  operator delete(v37);
  v39 = (char *)operator new(0x38uLL);
  strcpy(v39, "Requests to re-mesh the volumetric map all at once.");
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  strcpy((char *)(a1 + 400), "Ask Global Re-Mesh");
  *(_BYTE *)(a1 + 423) = 18;
  sub_223197FA4(__dst, v39, 0x33uLL);
  v40 = (void **)(a1 + 424);
  if (*(char *)(a1 + 447) < 0)
    operator delete(*v40);
  *(_OWORD *)v40 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 440) = v106;
  operator delete(v39);
  v41 = (char *)operator new(0x28uLL);
  strcpy(v41, "Requests to get the occupancy mesh.");
  if (*(char *)(a1 + 479) < 0)
    operator delete(*v98);
  strcpy((char *)(a1 + 456), "Ask Occupancy Mesh");
  *(_BYTE *)(a1 + 479) = 18;
  sub_223197FA4(__dst, v41, 0x23uLL);
  v42 = (void **)(a1 + 480);
  if (*(char *)(a1 + 503) < 0)
    operator delete(*v42);
  *(_OWORD *)v42 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 496) = v106;
  operator delete(v41);
  v43 = (char *)operator new(0x20uLL);
  strcpy(v43, "Ask Global Occupancy Mesh");
  v44 = (char *)operator new(0x30uLL);
  strcpy(v44, "Requests to get the global occupancy mesh.");
  sub_223197FA4(__dst, v43, 0x19uLL);
  v45 = (void **)(a1 + 512);
  if (*(char *)(a1 + 535) < 0)
    operator delete(*v45);
  *(_OWORD *)v45 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 528) = v106;
  sub_223197FA4(__dst, v44, 0x2AuLL);
  v46 = (void **)(a1 + 536);
  if (*(char *)(a1 + 559) < 0)
    operator delete(*v46);
  *(_OWORD *)v46 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 552) = v106;
  operator delete(v44);
  operator delete(v43);
  v47 = (char *)operator new(0x20uLL);
  strcpy(v47, "Ask Occupancy Block Mesh");
  v48 = (char *)operator new(0x48uLL);
  strcpy(v48, "Requests to get the occupancy map as a mesh with a cube for each block.");
  sub_223197FA4(__dst, v47, 0x18uLL);
  if (*(char *)(a1 + 591) < 0)
    operator delete(*(void **)v10);
  *(_OWORD *)v10 = *(_OWORD *)__dst;
  *(_QWORD *)(v10 + 16) = v106;
  sub_223197FA4(__dst, v48, 0x47uLL);
  v49 = (void **)(a1 + 592);
  if (*(char *)(a1 + 615) < 0)
    operator delete(*v49);
  *(_OWORD *)v49 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 608) = v106;
  operator delete(v48);
  operator delete(v47);
  v50 = (char *)operator new(0x30uLL);
  strcpy(v50, "Update Mesh Plane Harmony Tracked Planes");
  v51 = (char *)operator new(0x40uLL);
  strcpy(v51, "Given a set of tracked planes, updates the volumetric map.");
  sub_223197FA4(__dst, v50, 0x28uLL);
  v52 = (void **)(a1 + 624);
  if (*(char *)(a1 + 647) < 0)
    operator delete(*v52);
  *(_OWORD *)v52 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 640) = v106;
  sub_223197FA4(__dst, v51, 0x3AuLL);
  v53 = (void **)(a1 + 648);
  if (*(char *)(a1 + 671) < 0)
    operator delete(*v53);
  *(_OWORD *)v53 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 664) = v106;
  operator delete(v51);
  operator delete(v50);
  v54 = (char *)operator new(0x48uLL);
  strcpy(v54, "Process plane detection updates and contained keyframe engine results");
  v55 = (char *)operator new(0x78uLL);
  strcpy(v55, "Given a set of updated planes and a list of keyframe bundles, processes and integrates the data in the volumetric map.");
  sub_223197FA4(__dst, v54, 0x45uLL);
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)v103);
  *(_OWORD *)v103 = *(_OWORD *)__dst;
  *(_QWORD *)(v103 + 16) = v106;
  sub_223197FA4(__dst, v55, 0x76uLL);
  v56 = (void **)(a1 + 704);
  if (*(char *)(a1 + 727) < 0)
    operator delete(*v56);
  *(_OWORD *)v56 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 720) = v106;
  operator delete(v55);
  operator delete(v54);
  v57 = (char *)operator new(0x40uLL);
  strcpy(v57, "Queries occupancy status for a set of requested regions.");
  if (*(char *)(a1 + 759) < 0)
    operator delete(*(void **)(a1 + 736));
  strcpy((char *)(a1 + 736), "Query Occupancy");
  *(_BYTE *)(a1 + 759) = 15;
  sub_223197FA4(__dst, v57, 0x38uLL);
  v58 = (void **)(a1 + 760);
  if (*(char *)(a1 + 783) < 0)
    operator delete(*v58);
  *(_OWORD *)v58 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 776) = v106;
  operator delete(v57);
  v59 = (char *)operator new(0x38uLL);
  strcpy(v59, "Sets the frequency at which meshing is performed.");
  if (*(char *)(a1 + 1039) < 0)
    operator delete(*v97);
  strcpy((char *)(a1 + 1016), "Set Meshing Period");
  *(_BYTE *)(a1 + 1039) = 18;
  sub_223197FA4(__dst, v59, 0x31uLL);
  v60 = (void **)(a1 + 1040);
  if (*(char *)(a1 + 1063) < 0)
    operator delete(*v60);
  *(_OWORD *)v60 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 1056) = v106;
  operator delete(v59);
  v61 = (char *)operator new(0x30uLL);
  strcpy(v61, "Set the maximum weight for voxel integration.");
  if (*(char *)(a1 + 1095) < 0)
    operator delete(*(void **)(a1 + 1072));
  strcpy((char *)(a1 + 1072), "Set Max Weight");
  *(_BYTE *)(a1 + 1087) = 0;
  *(_BYTE *)(a1 + 1095) = 14;
  sub_223197FA4(__dst, v61, 0x2DuLL);
  v62 = (void **)(a1 + 1096);
  if (*(char *)(a1 + 1119) < 0)
    operator delete(*v62);
  *(_OWORD *)v62 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 1112) = v106;
  operator delete(v61);
  v63 = (char *)operator new(0x20uLL);
  strcpy(v63, "Set Mesh Plane Harmony Enabled");
  v64 = (char *)operator new(0x38uLL);
  strcpy(v64, "Enables/Disables the mesh plane harmony functionality.");
  sub_223197FA4(__dst, v63, 0x1EuLL);
  if (*(char *)(a1 + 1151) < 0)
    operator delete(*(void **)v102);
  *(_OWORD *)v102 = *(_OWORD *)__dst;
  *(_QWORD *)(v102 + 16) = v106;
  sub_223197FA4(__dst, v64, 0x36uLL);
  v65 = (void **)(a1 + 1152);
  if (*(char *)(a1 + 1175) < 0)
    operator delete(*v65);
  *(_OWORD *)v65 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 1168) = v106;
  operator delete(v64);
  operator delete(v63);
  v66 = (char *)operator new(0x28uLL);
  strcpy(v66, "Set Per Frame Mesh Attributes Enabled");
  v67 = (char *)operator new(0x50uLL);
  strcpy(v67, "Mask to enable mapping attributes computation during per-frame mesh updates.");
  sub_223197FA4(__dst, v66, 0x25uLL);
  v68 = (void **)(a1 + 1184);
  if (*(char *)(a1 + 1207) < 0)
    operator delete(*v68);
  *(_OWORD *)v68 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 1200) = v106;
  sub_223197FA4(__dst, v67, 0x4CuLL);
  v69 = (void **)(a1 + 1208);
  if (*(char *)(a1 + 1231) < 0)
    operator delete(*v69);
  *(_OWORD *)v69 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 1224) = v106;
  operator delete(v67);
  operator delete(v66);
  v70 = (char *)operator new(0x28uLL);
  strcpy(v70, "Enable PRR for a given output channel.");
  if (*(char *)(a1 + 1263) < 0)
    operator delete(*v96);
  *(_QWORD *)(a1 + 1240) = 0x5020656C62616E45;
  *(_QWORD *)(a1 + 1248) = 21074;
  *(_BYTE *)(a1 + 1263) = 10;
  sub_223197FA4(__dst, v70, 0x26uLL);
  v71 = (void **)(a1 + 1264);
  if (*(char *)(a1 + 1287) < 0)
    operator delete(*v71);
  *(_OWORD *)v71 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 1280) = v106;
  operator delete(v70);
  v72 = (char *)operator new(0x30uLL);
  strcpy(v72, "Get the list of chunks in a bounding box");
  v73 = (char *)operator new(0x40uLL);
  strcpy(v73, "Get the list of chunks intersecting with a given bounding box.");
  sub_223197FA4(__dst, v72, 0x28uLL);
  if (*(char *)(a1 + 815) < 0)
    operator delete(*(void **)v101);
  *(_OWORD *)v101 = *(_OWORD *)__dst;
  *(_QWORD *)(v101 + 16) = v106;
  sub_223197FA4(__dst, v73, 0x3EuLL);
  v74 = (void **)(a1 + 816);
  if (*(char *)(a1 + 839) < 0)
    operator delete(*v74);
  *(_OWORD *)v74 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 832) = v106;
  operator delete(v73);
  operator delete(v72);
  v75 = (char *)operator new(0x20uLL);
  strcpy(v75, "Enable Spatial Subdivision");
  v76 = (char *)operator new(0x20uLL);
  strcpy(v76, "Enable spatial subdivision.");
  sub_223197FA4(__dst, v75, 0x1AuLL);
  v77 = (void **)(a1 + 1296);
  if (*(char *)(a1 + 1319) < 0)
    operator delete(*v77);
  *(_OWORD *)v77 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 1312) = v106;
  sub_223197FA4(__dst, v76, 0x1BuLL);
  v78 = (void **)(a1 + 1320);
  if (*(char *)(a1 + 1343) < 0)
    operator delete(*v78);
  *(_OWORD *)v78 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 1336) = v106;
  operator delete(v76);
  operator delete(v75);
  v79 = (char *)operator new(0x20uLL);
  strcpy(v79, "Enable Occupancy by Proximity");
  v80 = (char *)operator new(0x20uLL);
  strcpy(v80, "Enable occupancy by proximity.");
  sub_223197FA4(__dst, v79, 0x1DuLL);
  if (*(char *)(a1 + 1375) < 0)
    operator delete(*(void **)v100);
  *(_OWORD *)v100 = *(_OWORD *)__dst;
  *(_QWORD *)(v100 + 16) = v106;
  sub_223197FA4(__dst, v80, 0x1EuLL);
  v81 = (void **)(a1 + 1376);
  if (*(char *)(a1 + 1399) < 0)
    operator delete(*v81);
  *(_OWORD *)v81 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 1392) = v106;
  operator delete(v80);
  operator delete(v79);
  v82 = (char *)operator new(0x30uLL);
  strcpy(v82, "Get representation of current mapped state");
  v83 = (char *)operator new(0x20uLL);
  strcpy(v83, "Get current mapped state.");
  sub_223197FA4(__dst, v82, 0x2AuLL);
  v84 = (void **)(a1 + 848);
  if (*(char *)(a1 + 871) < 0)
    operator delete(*v84);
  *(_OWORD *)v84 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 864) = v106;
  sub_223197FA4(__dst, v83, 0x19uLL);
  v85 = (void **)(a1 + 872);
  if (*(char *)(a1 + 895) < 0)
    operator delete(*v85);
  *(_OWORD *)v85 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 888) = v106;
  operator delete(v83);
  operator delete(v82);
  v86 = (char *)operator new(0x20uLL);
  strcpy(v86, "Get the current PRR result.");
  if (*(char *)(a1 + 927) < 0)
    operator delete(*v95);
  *(_QWORD *)(a1 + 904) = 0x5250207972657551;
  *(_QWORD *)(a1 + 912) = 82;
  *(_BYTE *)(a1 + 927) = 9;
  sub_223197FA4(__dst, v86, 0x1BuLL);
  v87 = (void **)(a1 + 928);
  if (*(char *)(a1 + 951) < 0)
    operator delete(*v87);
  *(_OWORD *)v87 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 944) = v106;
  operator delete(v86);
  v88 = (char *)operator new(0x20uLL);
  strcpy(v88, "Get the synthetic PRR result.");
  if (*(char *)(a1 + 983) < 0)
    operator delete(*(void **)(a1 + 960));
  strcpy((char *)(a1 + 960), "Query synthetic PRR");
  *(_BYTE *)(a1 + 983) = 19;
  sub_223197FA4(__dst, v88, 0x1DuLL);
  v89 = (void **)(a1 + 984);
  if (*(char *)(a1 + 1007) < 0)
    operator delete(*v89);
  *(_OWORD *)v89 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 1000) = v106;
  operator delete(v88);
  return a1;
}

void sub_2235F0B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223167354((uint64_t)va);
  MEMORY[0x227684CE8](v12, 0x10B3C40DF0DEA25);
  sub_2235F0ED4(v11);
  _Unwind_Resume(a1);
}

void sub_2235F0BBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2235F0ED4(v1);
  _Unwind_Resume(a1);
}

void sub_2235F0BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  uint64_t v32;

  if (a24 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0)
    {
LABEL_3:
      v32 = *(_QWORD *)(v30 + 1448);
      *(_QWORD *)(v30 + 1448) = 0;
      if (!v32)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a30 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a25);
  v32 = *(_QWORD *)(v30 + 1448);
  *(_QWORD *)(v30 + 1448) = 0;
  if (!v32)
  {
LABEL_4:
    sub_2235F0ED4(v30);
    _Unwind_Resume(a1);
  }
LABEL_7:
  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  sub_2235F0ED4(v30);
  _Unwind_Resume(a1);
}

uint64_t sub_2235F0ED4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC54460;
  *(_QWORD *)(a1 + 56) = &unk_24EC54488;
  *(_QWORD *)(a1 + 112) = &unk_24EC544B0;
  *(_QWORD *)(a1 + 168) = &unk_24EC544D8;
  *(_QWORD *)(a1 + 224) = &unk_24EC54500;
  *(_QWORD *)(a1 + 280) = &unk_24EC54528;
  *(_QWORD *)(a1 + 336) = &unk_24EC54550;
  *(_QWORD *)(a1 + 392) = &unk_24EC54578;
  *(_QWORD *)(a1 + 448) = &unk_24EC545A0;
  *(_QWORD *)(a1 + 504) = &unk_24EC545C8;
  *(_QWORD *)(a1 + 560) = &unk_24EC545F0;
  *(_QWORD *)(a1 + 616) = &unk_24EC54618;
  *(_QWORD *)(a1 + 672) = &unk_24EC54640;
  *(_QWORD *)(a1 + 728) = &unk_24EC54668;
  *(_QWORD *)(a1 + 784) = &unk_24EC54690;
  *(_QWORD *)(a1 + 840) = &unk_24EC546B8;
  *(_QWORD *)(a1 + 896) = &unk_24EC546E0;
  *(_QWORD *)(a1 + 952) = &unk_24EC54708;
  *(_QWORD *)(a1 + 1008) = &unk_24EC54730;
  *(_QWORD *)(a1 + 1064) = &unk_24EC54758;
  *(_QWORD *)(a1 + 1120) = &unk_24EC54780;
  *(_QWORD *)(a1 + 1176) = &unk_24EC547A8;
  *(_QWORD *)(a1 + 1232) = &unk_24EC547D0;
  *(_QWORD *)(a1 + 1288) = &unk_24EC547F8;
  *(_QWORD *)(a1 + 1344) = &unk_24EC54820;
  if (*(char *)(a1 + 1447) < 0)
  {
    operator delete(*(void **)(a1 + 1424));
    if ((*(char *)(a1 + 1423) & 0x80000000) == 0)
    {
LABEL_3:
      *(_QWORD *)(a1 + 1344) = off_24EC54BE0;
      if ((*(char *)(a1 + 1399) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_56;
    }
  }
  else if ((*(char *)(a1 + 1423) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 1400));
  *(_QWORD *)(a1 + 1344) = off_24EC54BE0;
  if ((*(char *)(a1 + 1399) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 1375) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_57;
  }
LABEL_56:
  operator delete(*(void **)(a1 + 1376));
  if ((*(char *)(a1 + 1375) & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(a1 + 1288) = off_24EC54BB8;
    if ((*(char *)(a1 + 1343) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_58;
  }
LABEL_57:
  operator delete(*(void **)(a1 + 1352));
  *(_QWORD *)(a1 + 1288) = off_24EC54BB8;
  if ((*(char *)(a1 + 1343) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 1319) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_59;
  }
LABEL_58:
  operator delete(*(void **)(a1 + 1320));
  if ((*(char *)(a1 + 1319) & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)(a1 + 1232) = off_24EC54B90;
    if ((*(char *)(a1 + 1287) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_60;
  }
LABEL_59:
  operator delete(*(void **)(a1 + 1296));
  *(_QWORD *)(a1 + 1232) = off_24EC54B90;
  if ((*(char *)(a1 + 1287) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 1263) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_61;
  }
LABEL_60:
  operator delete(*(void **)(a1 + 1264));
  if ((*(char *)(a1 + 1263) & 0x80000000) == 0)
  {
LABEL_9:
    *(_QWORD *)(a1 + 1176) = off_24EC54B68;
    if ((*(char *)(a1 + 1231) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_62;
  }
LABEL_61:
  operator delete(*(void **)(a1 + 1240));
  *(_QWORD *)(a1 + 1176) = off_24EC54B68;
  if ((*(char *)(a1 + 1231) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*(char *)(a1 + 1207) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_63;
  }
LABEL_62:
  operator delete(*(void **)(a1 + 1208));
  if ((*(char *)(a1 + 1207) & 0x80000000) == 0)
  {
LABEL_11:
    *(_QWORD *)(a1 + 1120) = off_24EC54B40;
    if ((*(char *)(a1 + 1175) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_64;
  }
LABEL_63:
  operator delete(*(void **)(a1 + 1184));
  *(_QWORD *)(a1 + 1120) = off_24EC54B40;
  if ((*(char *)(a1 + 1175) & 0x80000000) == 0)
  {
LABEL_12:
    if ((*(char *)(a1 + 1151) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_65;
  }
LABEL_64:
  operator delete(*(void **)(a1 + 1152));
  if ((*(char *)(a1 + 1151) & 0x80000000) == 0)
  {
LABEL_13:
    *(_QWORD *)(a1 + 1064) = off_24EC54B18;
    if ((*(char *)(a1 + 1119) & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_66;
  }
LABEL_65:
  operator delete(*(void **)(a1 + 1128));
  *(_QWORD *)(a1 + 1064) = off_24EC54B18;
  if ((*(char *)(a1 + 1119) & 0x80000000) == 0)
  {
LABEL_14:
    if ((*(char *)(a1 + 1095) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_67;
  }
LABEL_66:
  operator delete(*(void **)(a1 + 1096));
  if ((*(char *)(a1 + 1095) & 0x80000000) == 0)
  {
LABEL_15:
    *(_QWORD *)(a1 + 1008) = off_24EC54AF0;
    if ((*(char *)(a1 + 1063) & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_68;
  }
LABEL_67:
  operator delete(*(void **)(a1 + 1072));
  *(_QWORD *)(a1 + 1008) = off_24EC54AF0;
  if ((*(char *)(a1 + 1063) & 0x80000000) == 0)
  {
LABEL_16:
    if ((*(char *)(a1 + 1039) & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_69;
  }
LABEL_68:
  operator delete(*(void **)(a1 + 1040));
  if ((*(char *)(a1 + 1039) & 0x80000000) == 0)
  {
LABEL_17:
    *(_QWORD *)(a1 + 952) = off_24EC54AC8;
    if ((*(char *)(a1 + 1007) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_70;
  }
LABEL_69:
  operator delete(*(void **)(a1 + 1016));
  *(_QWORD *)(a1 + 952) = off_24EC54AC8;
  if ((*(char *)(a1 + 1007) & 0x80000000) == 0)
  {
LABEL_18:
    if ((*(char *)(a1 + 983) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_71;
  }
LABEL_70:
  operator delete(*(void **)(a1 + 984));
  if ((*(char *)(a1 + 983) & 0x80000000) == 0)
  {
LABEL_19:
    *(_QWORD *)(a1 + 896) = off_24EC54AA0;
    if ((*(char *)(a1 + 951) & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_72;
  }
LABEL_71:
  operator delete(*(void **)(a1 + 960));
  *(_QWORD *)(a1 + 896) = off_24EC54AA0;
  if ((*(char *)(a1 + 951) & 0x80000000) == 0)
  {
LABEL_20:
    if ((*(char *)(a1 + 927) & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_73;
  }
LABEL_72:
  operator delete(*(void **)(a1 + 928));
  if ((*(char *)(a1 + 927) & 0x80000000) == 0)
  {
LABEL_21:
    *(_QWORD *)(a1 + 840) = off_24EC54A78;
    if ((*(char *)(a1 + 895) & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_74;
  }
LABEL_73:
  operator delete(*(void **)(a1 + 904));
  *(_QWORD *)(a1 + 840) = off_24EC54A78;
  if ((*(char *)(a1 + 895) & 0x80000000) == 0)
  {
LABEL_22:
    if ((*(char *)(a1 + 871) & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_75;
  }
LABEL_74:
  operator delete(*(void **)(a1 + 872));
  if ((*(char *)(a1 + 871) & 0x80000000) == 0)
  {
LABEL_23:
    *(_QWORD *)(a1 + 784) = off_24EC54A50;
    if ((*(char *)(a1 + 839) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_76;
  }
LABEL_75:
  operator delete(*(void **)(a1 + 848));
  *(_QWORD *)(a1 + 784) = off_24EC54A50;
  if ((*(char *)(a1 + 839) & 0x80000000) == 0)
  {
LABEL_24:
    if ((*(char *)(a1 + 815) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_77;
  }
LABEL_76:
  operator delete(*(void **)(a1 + 816));
  if ((*(char *)(a1 + 815) & 0x80000000) == 0)
  {
LABEL_25:
    *(_QWORD *)(a1 + 728) = off_24EC54A28;
    if ((*(char *)(a1 + 783) & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_78;
  }
LABEL_77:
  operator delete(*(void **)(a1 + 792));
  *(_QWORD *)(a1 + 728) = off_24EC54A28;
  if ((*(char *)(a1 + 783) & 0x80000000) == 0)
  {
LABEL_26:
    if ((*(char *)(a1 + 759) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_79;
  }
LABEL_78:
  operator delete(*(void **)(a1 + 760));
  if ((*(char *)(a1 + 759) & 0x80000000) == 0)
  {
LABEL_27:
    *(_QWORD *)(a1 + 672) = off_24EC54A00;
    if ((*(char *)(a1 + 727) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_80;
  }
LABEL_79:
  operator delete(*(void **)(a1 + 736));
  *(_QWORD *)(a1 + 672) = off_24EC54A00;
  if ((*(char *)(a1 + 727) & 0x80000000) == 0)
  {
LABEL_28:
    if ((*(char *)(a1 + 703) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_81;
  }
LABEL_80:
  operator delete(*(void **)(a1 + 704));
  if ((*(char *)(a1 + 703) & 0x80000000) == 0)
  {
LABEL_29:
    *(_QWORD *)(a1 + 616) = off_24EC549D8;
    if ((*(char *)(a1 + 671) & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_82;
  }
LABEL_81:
  operator delete(*(void **)(a1 + 680));
  *(_QWORD *)(a1 + 616) = off_24EC549D8;
  if ((*(char *)(a1 + 671) & 0x80000000) == 0)
  {
LABEL_30:
    if ((*(char *)(a1 + 647) & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_83;
  }
LABEL_82:
  operator delete(*(void **)(a1 + 648));
  if ((*(char *)(a1 + 647) & 0x80000000) == 0)
  {
LABEL_31:
    *(_QWORD *)(a1 + 560) = off_24EC549B0;
    if ((*(char *)(a1 + 615) & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_84;
  }
LABEL_83:
  operator delete(*(void **)(a1 + 624));
  *(_QWORD *)(a1 + 560) = off_24EC549B0;
  if ((*(char *)(a1 + 615) & 0x80000000) == 0)
  {
LABEL_32:
    if ((*(char *)(a1 + 591) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_85;
  }
LABEL_84:
  operator delete(*(void **)(a1 + 592));
  if ((*(char *)(a1 + 591) & 0x80000000) == 0)
  {
LABEL_33:
    *(_QWORD *)(a1 + 504) = off_24EC54988;
    if ((*(char *)(a1 + 559) & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_86;
  }
LABEL_85:
  operator delete(*(void **)(a1 + 568));
  *(_QWORD *)(a1 + 504) = off_24EC54988;
  if ((*(char *)(a1 + 559) & 0x80000000) == 0)
  {
LABEL_34:
    if ((*(char *)(a1 + 535) & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_87;
  }
LABEL_86:
  operator delete(*(void **)(a1 + 536));
  if ((*(char *)(a1 + 535) & 0x80000000) == 0)
  {
LABEL_35:
    *(_QWORD *)(a1 + 448) = off_24EC54960;
    if ((*(char *)(a1 + 503) & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_88;
  }
LABEL_87:
  operator delete(*(void **)(a1 + 512));
  *(_QWORD *)(a1 + 448) = off_24EC54960;
  if ((*(char *)(a1 + 503) & 0x80000000) == 0)
  {
LABEL_36:
    if ((*(char *)(a1 + 479) & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_89;
  }
LABEL_88:
  operator delete(*(void **)(a1 + 480));
  if ((*(char *)(a1 + 479) & 0x80000000) == 0)
  {
LABEL_37:
    *(_QWORD *)(a1 + 392) = off_24EC54938;
    if ((*(char *)(a1 + 447) & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_90;
  }
LABEL_89:
  operator delete(*(void **)(a1 + 456));
  *(_QWORD *)(a1 + 392) = off_24EC54938;
  if ((*(char *)(a1 + 447) & 0x80000000) == 0)
  {
LABEL_38:
    if ((*(char *)(a1 + 423) & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_91;
  }
LABEL_90:
  operator delete(*(void **)(a1 + 424));
  if ((*(char *)(a1 + 423) & 0x80000000) == 0)
  {
LABEL_39:
    *(_QWORD *)(a1 + 336) = off_24EC54910;
    if ((*(char *)(a1 + 391) & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_92;
  }
LABEL_91:
  operator delete(*(void **)(a1 + 400));
  *(_QWORD *)(a1 + 336) = off_24EC54910;
  if ((*(char *)(a1 + 391) & 0x80000000) == 0)
  {
LABEL_40:
    if ((*(char *)(a1 + 367) & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_93;
  }
LABEL_92:
  operator delete(*(void **)(a1 + 368));
  if ((*(char *)(a1 + 367) & 0x80000000) == 0)
  {
LABEL_41:
    *(_QWORD *)(a1 + 280) = off_24EC548E8;
    if ((*(char *)(a1 + 335) & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_94;
  }
LABEL_93:
  operator delete(*(void **)(a1 + 344));
  *(_QWORD *)(a1 + 280) = off_24EC548E8;
  if ((*(char *)(a1 + 335) & 0x80000000) == 0)
  {
LABEL_42:
    if ((*(char *)(a1 + 311) & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_95;
  }
LABEL_94:
  operator delete(*(void **)(a1 + 312));
  if ((*(char *)(a1 + 311) & 0x80000000) == 0)
  {
LABEL_43:
    *(_QWORD *)(a1 + 224) = off_24EC41840;
    if ((*(char *)(a1 + 279) & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_96;
  }
LABEL_95:
  operator delete(*(void **)(a1 + 288));
  *(_QWORD *)(a1 + 224) = off_24EC41840;
  if ((*(char *)(a1 + 279) & 0x80000000) == 0)
  {
LABEL_44:
    if ((*(char *)(a1 + 255) & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_97;
  }
LABEL_96:
  operator delete(*(void **)(a1 + 256));
  if ((*(char *)(a1 + 255) & 0x80000000) == 0)
  {
LABEL_45:
    *(_QWORD *)(a1 + 168) = off_24EC548C0;
    if ((*(char *)(a1 + 223) & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_98;
  }
LABEL_97:
  operator delete(*(void **)(a1 + 232));
  *(_QWORD *)(a1 + 168) = off_24EC548C0;
  if ((*(char *)(a1 + 223) & 0x80000000) == 0)
  {
LABEL_46:
    if ((*(char *)(a1 + 199) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_99;
  }
LABEL_98:
  operator delete(*(void **)(a1 + 200));
  if ((*(char *)(a1 + 199) & 0x80000000) == 0)
  {
LABEL_47:
    *(_QWORD *)(a1 + 112) = off_24EC54898;
    if ((*(char *)(a1 + 167) & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_100;
  }
LABEL_99:
  operator delete(*(void **)(a1 + 176));
  *(_QWORD *)(a1 + 112) = off_24EC54898;
  if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
LABEL_48:
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
      goto LABEL_49;
    goto LABEL_101;
  }
LABEL_100:
  operator delete(*(void **)(a1 + 144));
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
LABEL_49:
    *(_QWORD *)(a1 + 56) = off_24EC54870;
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_50;
    goto LABEL_102;
  }
LABEL_101:
  operator delete(*(void **)(a1 + 120));
  *(_QWORD *)(a1 + 56) = off_24EC54870;
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_50:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_51;
    goto LABEL_103;
  }
LABEL_102:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_51:
    *(_QWORD *)a1 = off_24EC54848;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_52;
LABEL_104:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_105;
  }
LABEL_103:
  operator delete(*(void **)(a1 + 64));
  *(_QWORD *)a1 = off_24EC54848;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_104;
LABEL_52:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_105:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_2235F1700(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24EC53C38;
  a1[7] = &unk_24EC53D20;
  a1[14] = &unk_24EC53D48;
  a1[21] = &unk_24EC53D70;
  a1[28] = &unk_24EC53D98;
  a1[35] = &unk_24EC53DC0;
  a1[42] = &unk_24EC53DE8;
  a1[49] = &unk_24EC53E10;
  a1[56] = &unk_24EC53E38;
  a1[63] = &unk_24EC53E60;
  a1[70] = &unk_24EC53E88;
  a1[77] = &unk_24EC53EB0;
  a1[84] = &unk_24EC53ED8;
  a1[91] = &unk_24EC53F00;
  a1[98] = &unk_24EC53F28;
  a1[105] = &unk_24EC53F50;
  a1[112] = &unk_24EC53F78;
  a1[119] = &unk_24EC53FA0;
  a1[126] = &unk_24EC53FC8;
  a1[133] = &unk_24EC53FF0;
  a1[140] = &unk_24EC54018;
  a1[147] = &unk_24EC54040;
  a1[154] = &unk_24EC54068;
  a1[161] = &unk_24EC54090;
  a1[168] = &unk_24EC540B8;
  v2 = a1[181];
  a1[181] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_2235F0ED4((uint64_t)a1);
}

uint64_t sub_2235F1804(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24EC53D20;
  a1[7] = &unk_24EC53D48;
  a1[14] = &unk_24EC53D70;
  a1[21] = &unk_24EC53D98;
  a1[28] = &unk_24EC53DC0;
  a1[35] = &unk_24EC53DE8;
  a1[42] = &unk_24EC53E10;
  a1[49] = &unk_24EC53E38;
  a1[56] = &unk_24EC53E60;
  a1[63] = &unk_24EC53E88;
  a1[70] = &unk_24EC53EB0;
  a1[77] = &unk_24EC53ED8;
  a1[84] = &unk_24EC53F00;
  a1[91] = &unk_24EC53F28;
  a1[98] = &unk_24EC53F50;
  a1[105] = &unk_24EC53F78;
  a1[112] = &unk_24EC53FA0;
  a1[119] = &unk_24EC53FC8;
  a1[126] = &unk_24EC53FF0;
  a1[133] = &unk_24EC54018;
  a1[140] = &unk_24EC54040;
  a1[147] = &unk_24EC54068;
  a1[154] = &unk_24EC54090;
  a1[161] = &unk_24EC540B8;
  v2 = a1[174];
  a1[174] = 0;
  *(a1 - 7) = &off_24EC53C38;
  v3 = (uint64_t)(a1 - 7);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_2235F0ED4(v3);
}

uint64_t sub_2235F1908(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *(a1 - 7) = &unk_24EC53D20;
  *a1 = &unk_24EC53D48;
  a1[7] = &unk_24EC53D70;
  a1[14] = &unk_24EC53D98;
  a1[21] = &unk_24EC53DC0;
  a1[28] = &unk_24EC53DE8;
  a1[35] = &unk_24EC53E10;
  a1[42] = &unk_24EC53E38;
  a1[49] = &unk_24EC53E60;
  a1[56] = &unk_24EC53E88;
  a1[63] = &unk_24EC53EB0;
  a1[70] = &unk_24EC53ED8;
  a1[77] = &unk_24EC53F00;
  a1[84] = &unk_24EC53F28;
  a1[91] = &unk_24EC53F50;
  a1[98] = &unk_24EC53F78;
  a1[105] = &unk_24EC53FA0;
  a1[112] = &unk_24EC53FC8;
  a1[119] = &unk_24EC53FF0;
  a1[126] = &unk_24EC54018;
  a1[133] = &unk_24EC54040;
  a1[140] = &unk_24EC54068;
  a1[147] = &unk_24EC54090;
  a1[154] = &unk_24EC540B8;
  v2 = a1[167];
  a1[167] = 0;
  *(a1 - 14) = &off_24EC53C38;
  v3 = (uint64_t)(a1 - 14);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_2235F0ED4(v3);
}

uint64_t sub_2235F1A0C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *(a1 - 14) = &unk_24EC53D20;
  *(a1 - 7) = &unk_24EC53D48;
  *a1 = &unk_24EC53D70;
  a1[7] = &unk_24EC53D98;
  a1[14] = &unk_24EC53DC0;
  a1[21] = &unk_24EC53DE8;
  a1[28] = &unk_24EC53E10;
  a1[35] = &unk_24EC53E38;
  a1[42] = &unk_24EC53E60;
  a1[49] = &unk_24EC53E88;
  a1[56] = &unk_24EC53EB0;
  a1[63] = &unk_24EC53ED8;
  a1[70] = &unk_24EC53F00;
  a1[77] = &unk_24EC53F28;
  a1[84] = &unk_24EC53F50;
  a1[91] = &unk_24EC53F78;
  a1[98] = &unk_24EC53FA0;
  a1[105] = &unk_24EC53FC8;
  a1[112] = &unk_24EC53FF0;
  a1[119] = &unk_24EC54018;
  a1[126] = &unk_24EC54040;
  a1[133] = &unk_24EC54068;
  a1[140] = &unk_24EC54090;
  a1[147] = &unk_24EC540B8;
  v2 = a1[160];
  a1[160] = 0;
  *(a1 - 21) = &off_24EC53C38;
  v3 = (uint64_t)(a1 - 21);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_2235F0ED4(v3);
}

uint64_t sub_2235F1B10(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *(a1 - 21) = &unk_24EC53D20;
  *(a1 - 14) = &unk_24EC53D48;
  *(a1 - 7) = &unk_24EC53D70;
  *a1 = &unk_24EC53D98;
  a1[7] = &unk_24EC53DC0;
  a1[14] = &unk_24EC53DE8;
  a1[21] = &unk_24EC53E10;
  a1[28] = &unk_24EC53E38;
  a1[35] = &unk_24EC53E60;
  a1[42] = &unk_24EC53E88;
  a1[49] = &unk_24EC53EB0;
  a1[56] = &unk_24EC53ED8;
  a1[63] = &unk_24EC53F00;
  a1[70] = &unk_24EC53F28;
  a1[77] = &unk_24EC53F50;
  a1[84] = &unk_24EC53F78;
  a1[91] = &unk_24EC53FA0;
  a1[98] = &unk_24EC53FC8;
  a1[105] = &unk_24EC53FF0;
  a1[112] = &unk_24EC54018;
  a1[119] = &unk_24EC54040;
  a1[126] = &unk_24EC54068;
  a1[133] = &unk_24EC54090;
  a1[140] = &unk_24EC540B8;
  v2 = a1[153];
  a1[153] = 0;
  *(a1 - 28) = &off_24EC53C38;
  v3 = (uint64_t)(a1 - 28);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_2235F0ED4(v3);
}

uint64_t sub_2235F1C14(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (uint64_t)(a1 - 35);
  *(a1 - 35) = &off_24EC53C38;
  *(a1 - 28) = &unk_24EC53D20;
  *(a1 - 21) = &unk_24EC53D48;
  *(a1 - 14) = &unk_24EC53D70;
  *(a1 - 7) = &unk_24EC53D98;
  *a1 = &unk_24EC53DC0;
  a1[7] = &unk_24EC53DE8;
  a1[14] = &unk_24EC53E10;
  a1[21] = &unk_24EC53E38;
  a1[28] = &unk_24EC53E60;
  a1[35] = &unk_24EC53E88;
  a1[42] = &unk_24EC53EB0;
  a1[49] = &unk_24EC53ED8;
  a1[56] = &unk_24EC53F00;
  a1[63] = &unk_24EC53F28;
  a1[70] = &unk_24EC53F50;
  a1[77] = &unk_24EC53F78;
  a1[84] = &unk_24EC53FA0;
  a1[91] = &unk_24EC53FC8;
  a1[98] = &unk_24EC53FF0;
  a1[105] = &unk_24EC54018;
  a1[112] = &unk_24EC54040;
  a1[119] = &unk_24EC54068;
  a1[126] = &unk_24EC54090;
  a1[133] = &unk_24EC540B8;
  v3 = a1[146];
  a1[146] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_2235F0ED4(v2);
}

uint64_t sub_2235F1D1C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (uint64_t)(a1 - 42);
  *(a1 - 42) = &off_24EC53C38;
  *(a1 - 35) = &unk_24EC53D20;
  *(a1 - 28) = &unk_24EC53D48;
  *(a1 - 21) = &unk_24EC53D70;
  *(a1 - 14) = &unk_24EC53D98;
  *(a1 - 7) = &unk_24EC53DC0;
  *a1 = &unk_24EC53DE8;
  a1[7] = &unk_24EC53E10;
  a1[14] = &unk_24EC53E38;
  a1[21] = &unk_24EC53E60;
  a1[28] = &unk_24EC53E88;
  a1[35] = &unk_24EC53EB0;
  a1[42] = &unk_24EC53ED8;
  a1[49] = &unk_24EC53F00;
  a1[56] = &unk_24EC53F28;
  a1[63] = &unk_24EC53F50;
  a1[70] = &unk_24EC53F78;
  a1[77] = &unk_24EC53FA0;
  a1[84] = &unk_24EC53FC8;
  a1[91] = &unk_24EC53FF0;
  a1[98] = &unk_24EC54018;
  a1[105] = &unk_24EC54040;
  a1[112] = &unk_24EC54068;
  a1[119] = &unk_24EC54090;
  a1[126] = &unk_24EC540B8;
  v3 = a1[139];
  a1[139] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_2235F0ED4(v2);
}

uint64_t sub_2235F1E28(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (uint64_t)(a1 - 49);
  *(a1 - 49) = &off_24EC53C38;
  *(a1 - 42) = &unk_24EC53D20;
  *(a1 - 35) = &unk_24EC53D48;
  *(a1 - 28) = &unk_24EC53D70;
  *(a1 - 21) = &unk_24EC53D98;
  *(a1 - 14) = &unk_24EC53DC0;
  *(a1 - 7) = &unk_24EC53DE8;
  *a1 = &unk_24EC53E10;
  a1[7] = &unk_24EC53E38;
  a1[14] = &unk_24EC53E60;
  a1[21] = &unk_24EC53E88;
  a1[28] = &unk_24EC53EB0;
  a1[35] = &unk_24EC53ED8;
  a1[42] = &unk_24EC53F00;
  a1[49] = &unk_24EC53F28;
  a1[56] = &unk_24EC53F50;
  a1[63] = &unk_24EC53F78;
  a1[70] = &unk_24EC53FA0;
  a1[77] = &unk_24EC53FC8;
  a1[84] = &unk_24EC53FF0;
  a1[91] = &unk_24EC54018;
  a1[98] = &unk_24EC54040;
  a1[105] = &unk_24EC54068;
  a1[112] = &unk_24EC54090;
  a1[119] = &unk_24EC540B8;
  v3 = a1[132];
  a1[132] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_2235F0ED4(v2);
}

uint64_t sub_2235F1F38(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (uint64_t)(a1 - 56);
  *(a1 - 56) = &off_24EC53C38;
  *(a1 - 49) = &unk_24EC53D20;
  *(a1 - 42) = &unk_24EC53D48;
  *(a1 - 35) = &unk_24EC53D70;
  *(a1 - 28) = &unk_24EC53D98;
  *(a1 - 21) = &unk_24EC53DC0;
  *(a1 - 14) = &unk_24EC53DE8;
  *(a1 - 7) = &unk_24EC53E10;
  *a1 = &unk_24EC53E38;
  a1[7] = &unk_24EC53E60;
  a1[14] = &unk_24EC53E88;
  a1[21] = &unk_24EC53EB0;
  a1[28] = &unk_24EC53ED8;
  a1[35] = &unk_24EC53F00;
  a1[42] = &unk_24EC53F28;
  a1[49] = &unk_24EC53F50;
  a1[56] = &unk_24EC53F78;
  a1[63] = &unk_24EC53FA0;
  a1[70] = &unk_24EC53FC8;
  a1[77] = &unk_24EC53FF0;
  a1[84] = &unk_24EC54018;
  a1[91] = &unk_24EC54040;
  a1[98] = &unk_24EC54068;
  a1[105] = &unk_24EC54090;
  a1[112] = &unk_24EC540B8;
  v3 = a1[125];
  a1[125] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_2235F0ED4(v2);
}

uint64_t sub_2235F204C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 63);
  *(a1 - 63) = &off_24EC53C38;
  *(a1 - 56) = &unk_24EC53D20;
  *(a1 - 49) = &unk_24EC53D48;
  *(a1 - 42) = &unk_24EC53D70;
  *(a1 - 35) = &unk_24EC53D98;
  *(a1 - 28) = &unk_24EC53DC0;
  *(a1 - 21) = &unk_24EC53DE8;
  *(a1 - 14) = &unk_24EC53E10;
  *(a1 - 7) = &unk_24EC53E38;
  *a1 = &unk_24EC53E60;
  a1[7] = &unk_24EC53E88;
  a1[14] = &unk_24EC53EB0;
  a1[21] = &unk_24EC53ED8;
  a1[28] = &unk_24EC53F00;
  a1[35] = &unk_24EC53F28;
  a1[42] = &unk_24EC53F50;
  a1[49] = &unk_24EC53F78;
  a1[56] = &unk_24EC53FA0;
  a1[63] = &unk_24EC53FC8;
  a1[70] = &unk_24EC53FF0;
  a1[77] = &unk_24EC54018;
  a1[84] = &unk_24EC54040;
  a1[91] = &unk_24EC54068;
  a1[98] = &unk_24EC54090;
  a1[105] = &unk_24EC540B8;
  v2 = a1[118];
  a1[118] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_2235F0ED4(v1);
}

uint64_t sub_2235F2164(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 70);
  *(a1 - 70) = &off_24EC53C38;
  *(a1 - 63) = &unk_24EC53D20;
  *(a1 - 56) = &unk_24EC53D48;
  *(a1 - 49) = &unk_24EC53D70;
  *(a1 - 42) = &unk_24EC53D98;
  *(a1 - 35) = &unk_24EC53DC0;
  *(a1 - 28) = &unk_24EC53DE8;
  *(a1 - 21) = &unk_24EC53E10;
  *(a1 - 14) = &unk_24EC53E38;
  *(a1 - 7) = &unk_24EC53E60;
  *a1 = &unk_24EC53E88;
  a1[7] = &unk_24EC53EB0;
  a1[14] = &unk_24EC53ED8;
  a1[21] = &unk_24EC53F00;
  a1[28] = &unk_24EC53F28;
  a1[35] = &unk_24EC53F50;
  a1[42] = &unk_24EC53F78;
  a1[49] = &unk_24EC53FA0;
  a1[56] = &unk_24EC53FC8;
  a1[63] = &unk_24EC53FF0;
  a1[70] = &unk_24EC54018;
  a1[77] = &unk_24EC54040;
  a1[84] = &unk_24EC54068;
  a1[91] = &unk_24EC54090;
  a1[98] = &unk_24EC540B8;
  v2 = a1[111];
  a1[111] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_2235F0ED4(v1);
}

uint64_t sub_2235F2280(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 77);
  *(a1 - 77) = &off_24EC53C38;
  *(a1 - 70) = &unk_24EC53D20;
  *(a1 - 63) = &unk_24EC53D48;
  *(a1 - 56) = &unk_24EC53D70;
  *(a1 - 49) = &unk_24EC53D98;
  *(a1 - 42) = &unk_24EC53DC0;
  *(a1 - 35) = &unk_24EC53DE8;
  *(a1 - 28) = &unk_24EC53E10;
  *(a1 - 21) = &unk_24EC53E38;
  *(a1 - 14) = &unk_24EC53E60;
  *(a1 - 7) = &unk_24EC53E88;
  *a1 = &unk_24EC53EB0;
  a1[7] = &unk_24EC53ED8;
  a1[14] = &unk_24EC53F00;
  a1[21] = &unk_24EC53F28;
  a1[28] = &unk_24EC53F50;
  a1[35] = &unk_24EC53F78;
  a1[42] = &unk_24EC53FA0;
  a1[49] = &unk_24EC53FC8;
  a1[56] = &unk_24EC53FF0;
  a1[63] = &unk_24EC54018;
  a1[70] = &unk_24EC54040;
  a1[77] = &unk_24EC54068;
  a1[84] = &unk_24EC54090;
  a1[91] = &unk_24EC540B8;
  v2 = a1[104];
  a1[104] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_2235F0ED4(v1);
}

uint64_t sub_2235F23A0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 84);
  *(a1 - 84) = &off_24EC53C38;
  *(a1 - 77) = &unk_24EC53D20;
  *(a1 - 70) = &unk_24EC53D48;
  *(a1 - 63) = &unk_24EC53D70;
  *(a1 - 56) = &unk_24EC53D98;
  *(a1 - 49) = &unk_24EC53DC0;
  *(a1 - 42) = &unk_24EC53DE8;
  *(a1 - 35) = &unk_24EC53E10;
  *(a1 - 28) = &unk_24EC53E38;
  *(a1 - 21) = &unk_24EC53E60;
  *(a1 - 14) = &unk_24EC53E88;
  *(a1 - 7) = &unk_24EC53EB0;
  *a1 = &unk_24EC53ED8;
  a1[7] = &unk_24EC53F00;
  a1[14] = &unk_24EC53F28;
  a1[21] = &unk_24EC53F50;
  a1[28] = &unk_24EC53F78;
  a1[35] = &unk_24EC53FA0;
  a1[42] = &unk_24EC53FC8;
  a1[49] = &unk_24EC53FF0;
  a1[56] = &unk_24EC54018;
  a1[63] = &unk_24EC54040;
  a1[70] = &unk_24EC54068;
  a1[77] = &unk_24EC54090;
  a1[84] = &unk_24EC540B8;
  v2 = a1[97];
  a1[97] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_2235F0ED4(v1);
}

uint64_t sub_2235F24C4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 91);
  *(a1 - 91) = &off_24EC53C38;
  *(a1 - 84) = &unk_24EC53D20;
  *(a1 - 77) = &unk_24EC53D48;
  *(a1 - 70) = &unk_24EC53D70;
  *(a1 - 63) = &unk_24EC53D98;
  *(a1 - 56) = &unk_24EC53DC0;
  *(a1 - 49) = &unk_24EC53DE8;
  *(a1 - 42) = &unk_24EC53E10;
  *(a1 - 35) = &unk_24EC53E38;
  *(a1 - 28) = &unk_24EC53E60;
  *(a1 - 21) = &unk_24EC53E88;
  *(a1 - 14) = &unk_24EC53EB0;
  *(a1 - 7) = &unk_24EC53ED8;
  *a1 = &unk_24EC53F00;
  a1[7] = &unk_24EC53F28;
  a1[14] = &unk_24EC53F50;
  a1[21] = &unk_24EC53F78;
  a1[28] = &unk_24EC53FA0;
  a1[35] = &unk_24EC53FC8;
  a1[42] = &unk_24EC53FF0;
  a1[49] = &unk_24EC54018;
  a1[56] = &unk_24EC54040;
  a1[63] = &unk_24EC54068;
  a1[70] = &unk_24EC54090;
  a1[77] = &unk_24EC540B8;
  v2 = a1[90];
  a1[90] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_2235F0ED4(v1);
}

uint64_t sub_2235F25EC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 98);
  *(a1 - 98) = &off_24EC53C38;
  *(a1 - 91) = &unk_24EC53D20;
  *(a1 - 84) = &unk_24EC53D48;
  *(a1 - 77) = &unk_24EC53D70;
  *(a1 - 70) = &unk_24EC53D98;
  *(a1 - 63) = &unk_24EC53DC0;
  *(a1 - 56) = &unk_24EC53DE8;
  *(a1 - 49) = &unk_24EC53E10;
  *(a1 - 42) = &unk_24EC53E38;
  *(a1 - 35) = &unk_24EC53E60;
  *(a1 - 28) = &unk_24EC53E88;
  *(a1 - 21) = &unk_24EC53EB0;
  *(a1 - 14) = &unk_24EC53ED8;
  *(a1 - 7) = &unk_24EC53F00;
  *a1 = &unk_24EC53F28;
  a1[7] = &unk_24EC53F50;
  a1[14] = &unk_24EC53F78;
  a1[21] = &unk_24EC53FA0;
  a1[28] = &unk_24EC53FC8;
  a1[35] = &unk_24EC53FF0;
  a1[42] = &unk_24EC54018;
  a1[49] = &unk_24EC54040;
  a1[56] = &unk_24EC54068;
  a1[63] = &unk_24EC54090;
  a1[70] = &unk_24EC540B8;
  v2 = a1[83];
  a1[83] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_2235F0ED4(v1);
}

uint64_t sub_2235F2718(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 105);
  *(a1 - 105) = &off_24EC53C38;
  *(a1 - 98) = &unk_24EC53D20;
  *(a1 - 91) = &unk_24EC53D48;
  *(a1 - 84) = &unk_24EC53D70;
  *(a1 - 77) = &unk_24EC53D98;
  *(a1 - 70) = &unk_24EC53DC0;
  *(a1 - 63) = &unk_24EC53DE8;
  *(a1 - 56) = &unk_24EC53E10;
  *(a1 - 49) = &unk_24EC53E38;
  *(a1 - 42) = &unk_24EC53E60;
  *(a1 - 35) = &unk_24EC53E88;
  *(a1 - 28) = &unk_24EC53EB0;
  *(a1 - 21) = &unk_24EC53ED8;
  *(a1 - 14) = &unk_24EC53F00;
  *(a1 - 7) = &unk_24EC53F28;
  *a1 = &unk_24EC53F50;
  a1[7] = &unk_24EC53F78;
  a1[14] = &unk_24EC53FA0;
  a1[21] = &unk_24EC53FC8;
  a1[28] = &unk_24EC53FF0;
  a1[35] = &unk_24EC54018;
  a1[42] = &unk_24EC54040;
  a1[49] = &unk_24EC54068;
  a1[56] = &unk_24EC54090;
  a1[63] = &unk_24EC540B8;
  v2 = a1[76];
  a1[76] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_2235F0ED4(v1);
}

uint64_t sub_2235F2848(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 112);
  *(a1 - 112) = &off_24EC53C38;
  *(a1 - 105) = &unk_24EC53D20;
  *(a1 - 98) = &unk_24EC53D48;
  *(a1 - 91) = &unk_24EC53D70;
  *(a1 - 84) = &unk_24EC53D98;
  *(a1 - 77) = &unk_24EC53DC0;
  *(a1 - 70) = &unk_24EC53DE8;
  *(a1 - 63) = &unk_24EC53E10;
  *(a1 - 56) = &unk_24EC53E38;
  *(a1 - 49) = &unk_24EC53E60;
  *(a1 - 42) = &unk_24EC53E88;
  *(a1 - 35) = &unk_24EC53EB0;
  *(a1 - 28) = &unk_24EC53ED8;
  *(a1 - 21) = &unk_24EC53F00;
  *(a1 - 14) = &unk_24EC53F28;
  *(a1 - 7) = &unk_24EC53F50;
  *a1 = &unk_24EC53F78;
  a1[7] = &unk_24EC53FA0;
  a1[14] = &unk_24EC53FC8;
  a1[21] = &unk_24EC53FF0;
  a1[28] = &unk_24EC54018;
  a1[35] = &unk_24EC54040;
  a1[42] = &unk_24EC54068;
  a1[49] = &unk_24EC54090;
  a1[56] = &unk_24EC540B8;
  v2 = a1[69];
  a1[69] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_2235F0ED4(v1);
}

uint64_t sub_2235F297C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 119);
  *(a1 - 119) = &off_24EC53C38;
  *(a1 - 112) = &unk_24EC53D20;
  *(a1 - 105) = &unk_24EC53D48;
  *(a1 - 98) = &unk_24EC53D70;
  *(a1 - 91) = &unk_24EC53D98;
  *(a1 - 84) = &unk_24EC53DC0;
  *(a1 - 77) = &unk_24EC53DE8;
  *(a1 - 70) = &unk_24EC53E10;
  *(a1 - 63) = &unk_24EC53E38;
  *(a1 - 56) = &unk_24EC53E60;
  *(a1 - 49) = &unk_24EC53E88;
  *(a1 - 42) = &unk_24EC53EB0;
  *(a1 - 35) = &unk_24EC53ED8;
  *(a1 - 28) = &unk_24EC53F00;
  *(a1 - 21) = &unk_24EC53F28;
  *(a1 - 14) = &unk_24EC53F50;
  *(a1 - 7) = &unk_24EC53F78;
  *a1 = &unk_24EC53FA0;
  a1[7] = &unk_24EC53FC8;
  a1[14] = &unk_24EC53FF0;
  a1[21] = &unk_24EC54018;
  a1[28] = &unk_24EC54040;
  a1[35] = &unk_24EC54068;
  a1[42] = &unk_24EC54090;
  a1[49] = &unk_24EC540B8;
  v2 = a1[62];
  a1[62] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_2235F0ED4(v1);
}

uint64_t sub_2235F2AB4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 126);
  *(a1 - 126) = &off_24EC53C38;
  *(a1 - 119) = &unk_24EC53D20;
  *(a1 - 112) = &unk_24EC53D48;
  *(a1 - 105) = &unk_24EC53D70;
  *(a1 - 98) = &unk_24EC53D98;
  *(a1 - 91) = &unk_24EC53DC0;
  *(a1 - 84) = &unk_24EC53DE8;
  *(a1 - 77) = &unk_24EC53E10;
  *(a1 - 70) = &unk_24EC53E38;
  *(a1 - 63) = &unk_24EC53E60;
  *(a1 - 56) = &unk_24EC53E88;
  *(a1 - 49) = &unk_24EC53EB0;
  *(a1 - 42) = &unk_24EC53ED8;
  *(a1 - 35) = &unk_24EC53F00;
  *(a1 - 28) = &unk_24EC53F28;
  *(a1 - 21) = &unk_24EC53F50;
  *(a1 - 14) = &unk_24EC53F78;
  *(a1 - 7) = &unk_24EC53FA0;
  *a1 = &unk_24EC53FC8;
  a1[7] = &unk_24EC53FF0;
  a1[14] = &unk_24EC54018;
  a1[21] = &unk_24EC54040;
  a1[28] = &unk_24EC54068;
  a1[35] = &unk_24EC54090;
  a1[42] = &unk_24EC540B8;
  v2 = a1[55];
  a1[55] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_2235F0ED4(v1);
}

uint64_t sub_2235F2BF0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 133);
  *(a1 - 133) = &off_24EC53C38;
  *(a1 - 126) = &unk_24EC53D20;
  *(a1 - 119) = &unk_24EC53D48;
  *(a1 - 112) = &unk_24EC53D70;
  *(a1 - 105) = &unk_24EC53D98;
  *(a1 - 98) = &unk_24EC53DC0;
  *(a1 - 91) = &unk_24EC53DE8;
  *(a1 - 84) = &unk_24EC53E10;
  *(a1 - 77) = &unk_24EC53E38;
  *(a1 - 70) = &unk_24EC53E60;
  *(a1 - 63) = &unk_24EC53E88;
  *(a1 - 56) = &unk_24EC53EB0;
  *(a1 - 49) = &unk_24EC53ED8;
  *(a1 - 42) = &unk_24EC53F00;
  *(a1 - 35) = &unk_24EC53F28;
  *(a1 - 28) = &unk_24EC53F50;
  *(a1 - 21) = &unk_24EC53F78;
  *(a1 - 14) = &unk_24EC53FA0;
  *(a1 - 7) = &unk_24EC53FC8;
  *a1 = &unk_24EC53FF0;
  a1[7] = &unk_24EC54018;
  a1[14] = &unk_24EC54040;
  a1[21] = &unk_24EC54068;
  a1[28] = &unk_24EC54090;
  a1[35] = &unk_24EC540B8;
  v2 = a1[48];
  a1[48] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_2235F0ED4(v1);
}

uint64_t sub_2235F2D30(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 140);
  *(a1 - 140) = &off_24EC53C38;
  *(a1 - 133) = &unk_24EC53D20;
  *(a1 - 126) = &unk_24EC53D48;
  *(a1 - 119) = &unk_24EC53D70;
  *(a1 - 112) = &unk_24EC53D98;
  *(a1 - 105) = &unk_24EC53DC0;
  *(a1 - 98) = &unk_24EC53DE8;
  *(a1 - 91) = &unk_24EC53E10;
  *(a1 - 84) = &unk_24EC53E38;
  *(a1 - 77) = &unk_24EC53E60;
  *(a1 - 70) = &unk_24EC53E88;
  *(a1 - 63) = &unk_24EC53EB0;
  *(a1 - 56) = &unk_24EC53ED8;
  *(a1 - 49) = &unk_24EC53F00;
  *(a1 - 42) = &unk_24EC53F28;
  *(a1 - 35) = &unk_24EC53F50;
  *(a1 - 28) = &unk_24EC53F78;
  *(a1 - 21) = &unk_24EC53FA0;
  *(a1 - 14) = &unk_24EC53FC8;
  *(a1 - 7) = &unk_24EC53FF0;
  *a1 = &unk_24EC54018;
  a1[7] = &unk_24EC54040;
  a1[14] = &unk_24EC54068;
  a1[21] = &unk_24EC54090;
  a1[28] = &unk_24EC540B8;
  v2 = a1[41];
  a1[41] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_2235F0ED4(v1);
}

uint64_t sub_2235F2E74(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 147);
  *(a1 - 147) = &off_24EC53C38;
  *(a1 - 140) = &unk_24EC53D20;
  *(a1 - 133) = &unk_24EC53D48;
  *(a1 - 126) = &unk_24EC53D70;
  *(a1 - 119) = &unk_24EC53D98;
  *(a1 - 112) = &unk_24EC53DC0;
  *(a1 - 105) = &unk_24EC53DE8;
  *(a1 - 98) = &unk_24EC53E10;
  *(a1 - 91) = &unk_24EC53E38;
  *(a1 - 84) = &unk_24EC53E60;
  *(a1 - 77) = &unk_24EC53E88;
  *(a1 - 70) = &unk_24EC53EB0;
  *(a1 - 63) = &unk_24EC53ED8;
  *(a1 - 56) = &unk_24EC53F00;
  *(a1 - 49) = &unk_24EC53F28;
  *(a1 - 42) = &unk_24EC53F50;
  *(a1 - 35) = &unk_24EC53F78;
  *(a1 - 28) = &unk_24EC53FA0;
  *(a1 - 21) = &unk_24EC53FC8;
  *(a1 - 14) = &unk_24EC53FF0;
  *(a1 - 7) = &unk_24EC54018;
  *a1 = &unk_24EC54040;
  a1[7] = &unk_24EC54068;
  a1[14] = &unk_24EC54090;
  a1[21] = &unk_24EC540B8;
  v2 = a1[34];
  a1[34] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_2235F0ED4(v1);
}

uint64_t sub_2235F2FBC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 154);
  *(a1 - 154) = &off_24EC53C38;
  *(a1 - 147) = &unk_24EC53D20;
  *(a1 - 140) = &unk_24EC53D48;
  *(a1 - 133) = &unk_24EC53D70;
  *(a1 - 126) = &unk_24EC53D98;
  *(a1 - 119) = &unk_24EC53DC0;
  *(a1 - 112) = &unk_24EC53DE8;
  *(a1 - 105) = &unk_24EC53E10;
  *(a1 - 98) = &unk_24EC53E38;
  *(a1 - 91) = &unk_24EC53E60;
  *(a1 - 84) = &unk_24EC53E88;
  *(a1 - 77) = &unk_24EC53EB0;
  *(a1 - 70) = &unk_24EC53ED8;
  *(a1 - 63) = &unk_24EC53F00;
  *(a1 - 56) = &unk_24EC53F28;
  *(a1 - 49) = &unk_24EC53F50;
  *(a1 - 42) = &unk_24EC53F78;
  *(a1 - 35) = &unk_24EC53FA0;
  *(a1 - 28) = &unk_24EC53FC8;
  *(a1 - 21) = &unk_24EC53FF0;
  *(a1 - 14) = &unk_24EC54018;
  *(a1 - 7) = &unk_24EC54040;
  *a1 = &unk_24EC54068;
  a1[7] = &unk_24EC54090;
  a1[14] = &unk_24EC540B8;
  v2 = a1[27];
  a1[27] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_2235F0ED4(v1);
}

uint64_t sub_2235F3108(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 161);
  *(a1 - 161) = &off_24EC53C38;
  *(a1 - 154) = &unk_24EC53D20;
  *(a1 - 147) = &unk_24EC53D48;
  *(a1 - 140) = &unk_24EC53D70;
  *(a1 - 133) = &unk_24EC53D98;
  *(a1 - 126) = &unk_24EC53DC0;
  *(a1 - 119) = &unk_24EC53DE8;
  *(a1 - 112) = &unk_24EC53E10;
  *(a1 - 105) = &unk_24EC53E38;
  *(a1 - 98) = &unk_24EC53E60;
  *(a1 - 91) = &unk_24EC53E88;
  *(a1 - 84) = &unk_24EC53EB0;
  *(a1 - 77) = &unk_24EC53ED8;
  *(a1 - 70) = &unk_24EC53F00;
  *(a1 - 63) = &unk_24EC53F28;
  *(a1 - 56) = &unk_24EC53F50;
  *(a1 - 49) = &unk_24EC53F78;
  *(a1 - 42) = &unk_24EC53FA0;
  *(a1 - 35) = &unk_24EC53FC8;
  *(a1 - 28) = &unk_24EC53FF0;
  *(a1 - 21) = &unk_24EC54018;
  *(a1 - 14) = &unk_24EC54040;
  *(a1 - 7) = &unk_24EC54068;
  *a1 = &unk_24EC54090;
  a1[7] = &unk_24EC540B8;
  v2 = a1[20];
  a1[20] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_2235F0ED4(v1);
}

uint64_t sub_2235F3258(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 168);
  *(a1 - 168) = &off_24EC53C38;
  *(a1 - 161) = &unk_24EC53D20;
  *(a1 - 154) = &unk_24EC53D48;
  *(a1 - 147) = &unk_24EC53D70;
  *(a1 - 140) = &unk_24EC53D98;
  *(a1 - 133) = &unk_24EC53DC0;
  *(a1 - 126) = &unk_24EC53DE8;
  *(a1 - 119) = &unk_24EC53E10;
  *(a1 - 112) = &unk_24EC53E38;
  *(a1 - 105) = &unk_24EC53E60;
  *(a1 - 98) = &unk_24EC53E88;
  *(a1 - 91) = &unk_24EC53EB0;
  *(a1 - 84) = &unk_24EC53ED8;
  *(a1 - 77) = &unk_24EC53F00;
  *(a1 - 70) = &unk_24EC53F28;
  *(a1 - 63) = &unk_24EC53F50;
  *(a1 - 56) = &unk_24EC53F78;
  *(a1 - 49) = &unk_24EC53FA0;
  *(a1 - 42) = &unk_24EC53FC8;
  *(a1 - 35) = &unk_24EC53FF0;
  *(a1 - 28) = &unk_24EC54018;
  *(a1 - 21) = &unk_24EC54040;
  *(a1 - 14) = &unk_24EC54068;
  *(a1 - 7) = &unk_24EC54090;
  *a1 = &unk_24EC540B8;
  v2 = a1[13];
  a1[13] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_2235F0ED4(v1);
}

void sub_2235F33AC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24EC53C38;
  a1[7] = &unk_24EC53D20;
  a1[14] = &unk_24EC53D48;
  a1[21] = &unk_24EC53D70;
  a1[28] = &unk_24EC53D98;
  a1[35] = &unk_24EC53DC0;
  a1[42] = &unk_24EC53DE8;
  a1[49] = &unk_24EC53E10;
  a1[56] = &unk_24EC53E38;
  a1[63] = &unk_24EC53E60;
  a1[70] = &unk_24EC53E88;
  a1[77] = &unk_24EC53EB0;
  a1[84] = &unk_24EC53ED8;
  a1[91] = &unk_24EC53F00;
  a1[98] = &unk_24EC53F28;
  a1[105] = &unk_24EC53F50;
  a1[112] = &unk_24EC53F78;
  a1[119] = &unk_24EC53FA0;
  a1[126] = &unk_24EC53FC8;
  a1[133] = &unk_24EC53FF0;
  a1[140] = &unk_24EC54018;
  a1[147] = &unk_24EC54040;
  a1[154] = &unk_24EC54068;
  a1[161] = &unk_24EC54090;
  a1[168] = &unk_24EC540B8;
  v2 = a1[181];
  a1[181] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2235F0ED4((uint64_t)a1);
  JUMPOUT(0x227684CE8);
}

void sub_2235F34C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24EC53D20;
  a1[7] = &unk_24EC53D48;
  a1[14] = &unk_24EC53D70;
  a1[21] = &unk_24EC53D98;
  a1[28] = &unk_24EC53DC0;
  a1[35] = &unk_24EC53DE8;
  a1[42] = &unk_24EC53E10;
  a1[49] = &unk_24EC53E38;
  a1[56] = &unk_24EC53E60;
  a1[63] = &unk_24EC53E88;
  a1[70] = &unk_24EC53EB0;
  a1[77] = &unk_24EC53ED8;
  a1[84] = &unk_24EC53F00;
  a1[91] = &unk_24EC53F28;
  a1[98] = &unk_24EC53F50;
  a1[105] = &unk_24EC53F78;
  a1[112] = &unk_24EC53FA0;
  a1[119] = &unk_24EC53FC8;
  a1[126] = &unk_24EC53FF0;
  a1[133] = &unk_24EC54018;
  a1[140] = &unk_24EC54040;
  a1[147] = &unk_24EC54068;
  a1[154] = &unk_24EC54090;
  a1[161] = &unk_24EC540B8;
  v2 = a1[174];
  a1[174] = 0;
  *(a1 - 7) = &off_24EC53C38;
  v3 = (uint64_t)(a1 - 7);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2235F0ED4(v3);
  JUMPOUT(0x227684CE8);
}

void sub_2235F35DC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *(a1 - 7) = &unk_24EC53D20;
  *a1 = &unk_24EC53D48;
  a1[7] = &unk_24EC53D70;
  a1[14] = &unk_24EC53D98;
  a1[21] = &unk_24EC53DC0;
  a1[28] = &unk_24EC53DE8;
  a1[35] = &unk_24EC53E10;
  a1[42] = &unk_24EC53E38;
  a1[49] = &unk_24EC53E60;
  a1[56] = &unk_24EC53E88;
  a1[63] = &unk_24EC53EB0;
  a1[70] = &unk_24EC53ED8;
  a1[77] = &unk_24EC53F00;
  a1[84] = &unk_24EC53F28;
  a1[91] = &unk_24EC53F50;
  a1[98] = &unk_24EC53F78;
  a1[105] = &unk_24EC53FA0;
  a1[112] = &unk_24EC53FC8;
  a1[119] = &unk_24EC53FF0;
  a1[126] = &unk_24EC54018;
  a1[133] = &unk_24EC54040;
  a1[140] = &unk_24EC54068;
  a1[147] = &unk_24EC54090;
  a1[154] = &unk_24EC540B8;
  v2 = a1[167];
  a1[167] = 0;
  *(a1 - 14) = &off_24EC53C38;
  v3 = (uint64_t)(a1 - 14);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2235F0ED4(v3);
  JUMPOUT(0x227684CE8);
}

void sub_2235F36F4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *(a1 - 14) = &unk_24EC53D20;
  *(a1 - 7) = &unk_24EC53D48;
  *a1 = &unk_24EC53D70;
  a1[7] = &unk_24EC53D98;
  a1[14] = &unk_24EC53DC0;
  a1[21] = &unk_24EC53DE8;
  a1[28] = &unk_24EC53E10;
  a1[35] = &unk_24EC53E38;
  a1[42] = &unk_24EC53E60;
  a1[49] = &unk_24EC53E88;
  a1[56] = &unk_24EC53EB0;
  a1[63] = &unk_24EC53ED8;
  a1[70] = &unk_24EC53F00;
  a1[77] = &unk_24EC53F28;
  a1[84] = &unk_24EC53F50;
  a1[91] = &unk_24EC53F78;
  a1[98] = &unk_24EC53FA0;
  a1[105] = &unk_24EC53FC8;
  a1[112] = &unk_24EC53FF0;
  a1[119] = &unk_24EC54018;
  a1[126] = &unk_24EC54040;
  a1[133] = &unk_24EC54068;
  a1[140] = &unk_24EC54090;
  a1[147] = &unk_24EC540B8;
  v2 = a1[160];
  a1[160] = 0;
  *(a1 - 21) = &off_24EC53C38;
  v3 = (uint64_t)(a1 - 21);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2235F0ED4(v3);
  JUMPOUT(0x227684CE8);
}

void sub_2235F380C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *(a1 - 21) = &unk_24EC53D20;
  *(a1 - 14) = &unk_24EC53D48;
  *(a1 - 7) = &unk_24EC53D70;
  *a1 = &unk_24EC53D98;
  a1[7] = &unk_24EC53DC0;
  a1[14] = &unk_24EC53DE8;
  a1[21] = &unk_24EC53E10;
  a1[28] = &unk_24EC53E38;
  a1[35] = &unk_24EC53E60;
  a1[42] = &unk_24EC53E88;
  a1[49] = &unk_24EC53EB0;
  a1[56] = &unk_24EC53ED8;
  a1[63] = &unk_24EC53F00;
  a1[70] = &unk_24EC53F28;
  a1[77] = &unk_24EC53F50;
  a1[84] = &unk_24EC53F78;
  a1[91] = &unk_24EC53FA0;
  a1[98] = &unk_24EC53FC8;
  a1[105] = &unk_24EC53FF0;
  a1[112] = &unk_24EC54018;
  a1[119] = &unk_24EC54040;
  a1[126] = &unk_24EC54068;
  a1[133] = &unk_24EC54090;
  a1[140] = &unk_24EC540B8;
  v2 = a1[153];
  a1[153] = 0;
  *(a1 - 28) = &off_24EC53C38;
  v3 = (uint64_t)(a1 - 28);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2235F0ED4(v3);
  JUMPOUT(0x227684CE8);
}

void sub_2235F3924(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (uint64_t)(a1 - 35);
  *(a1 - 35) = &off_24EC53C38;
  *(a1 - 28) = &unk_24EC53D20;
  *(a1 - 21) = &unk_24EC53D48;
  *(a1 - 14) = &unk_24EC53D70;
  *(a1 - 7) = &unk_24EC53D98;
  *a1 = &unk_24EC53DC0;
  a1[7] = &unk_24EC53DE8;
  a1[14] = &unk_24EC53E10;
  a1[21] = &unk_24EC53E38;
  a1[28] = &unk_24EC53E60;
  a1[35] = &unk_24EC53E88;
  a1[42] = &unk_24EC53EB0;
  a1[49] = &unk_24EC53ED8;
  a1[56] = &unk_24EC53F00;
  a1[63] = &unk_24EC53F28;
  a1[70] = &unk_24EC53F50;
  a1[77] = &unk_24EC53F78;
  a1[84] = &unk_24EC53FA0;
  a1[91] = &unk_24EC53FC8;
  a1[98] = &unk_24EC53FF0;
  a1[105] = &unk_24EC54018;
  a1[112] = &unk_24EC54040;
  a1[119] = &unk_24EC54068;
  a1[126] = &unk_24EC54090;
  a1[133] = &unk_24EC540B8;
  v3 = a1[146];
  a1[146] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_2235F0ED4(v2);
  JUMPOUT(0x227684CE8);
}

void sub_2235F3A40(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (uint64_t)(a1 - 42);
  *(a1 - 42) = &off_24EC53C38;
  *(a1 - 35) = &unk_24EC53D20;
  *(a1 - 28) = &unk_24EC53D48;
  *(a1 - 21) = &unk_24EC53D70;
  *(a1 - 14) = &unk_24EC53D98;
  *(a1 - 7) = &unk_24EC53DC0;
  *a1 = &unk_24EC53DE8;
  a1[7] = &unk_24EC53E10;
  a1[14] = &unk_24EC53E38;
  a1[21] = &unk_24EC53E60;
  a1[28] = &unk_24EC53E88;
  a1[35] = &unk_24EC53EB0;
  a1[42] = &unk_24EC53ED8;
  a1[49] = &unk_24EC53F00;
  a1[56] = &unk_24EC53F28;
  a1[63] = &unk_24EC53F50;
  a1[70] = &unk_24EC53F78;
  a1[77] = &unk_24EC53FA0;
  a1[84] = &unk_24EC53FC8;
  a1[91] = &unk_24EC53FF0;
  a1[98] = &unk_24EC54018;
  a1[105] = &unk_24EC54040;
  a1[112] = &unk_24EC54068;
  a1[119] = &unk_24EC54090;
  a1[126] = &unk_24EC540B8;
  v3 = a1[139];
  a1[139] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_2235F0ED4(v2);
  JUMPOUT(0x227684CE8);
}

void sub_2235F3B60(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (uint64_t)(a1 - 49);
  *(a1 - 49) = &off_24EC53C38;
  *(a1 - 42) = &unk_24EC53D20;
  *(a1 - 35) = &unk_24EC53D48;
  *(a1 - 28) = &unk_24EC53D70;
  *(a1 - 21) = &unk_24EC53D98;
  *(a1 - 14) = &unk_24EC53DC0;
  *(a1 - 7) = &unk_24EC53DE8;
  *a1 = &unk_24EC53E10;
  a1[7] = &unk_24EC53E38;
  a1[14] = &unk_24EC53E60;
  a1[21] = &unk_24EC53E88;
  a1[28] = &unk_24EC53EB0;
  a1[35] = &unk_24EC53ED8;
  a1[42] = &unk_24EC53F00;
  a1[49] = &unk_24EC53F28;
  a1[56] = &unk_24EC53F50;
  a1[63] = &unk_24EC53F78;
  a1[70] = &unk_24EC53FA0;
  a1[77] = &unk_24EC53FC8;
  a1[84] = &unk_24EC53FF0;
  a1[91] = &unk_24EC54018;
  a1[98] = &unk_24EC54040;
  a1[105] = &unk_24EC54068;
  a1[112] = &unk_24EC54090;
  a1[119] = &unk_24EC540B8;
  v3 = a1[132];
  a1[132] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_2235F0ED4(v2);
  JUMPOUT(0x227684CE8);
}

void sub_2235F3C84(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (uint64_t)(a1 - 56);
  *(a1 - 56) = &off_24EC53C38;
  *(a1 - 49) = &unk_24EC53D20;
  *(a1 - 42) = &unk_24EC53D48;
  *(a1 - 35) = &unk_24EC53D70;
  *(a1 - 28) = &unk_24EC53D98;
  *(a1 - 21) = &unk_24EC53DC0;
  *(a1 - 14) = &unk_24EC53DE8;
  *(a1 - 7) = &unk_24EC53E10;
  *a1 = &unk_24EC53E38;
  a1[7] = &unk_24EC53E60;
  a1[14] = &unk_24EC53E88;
  a1[21] = &unk_24EC53EB0;
  a1[28] = &unk_24EC53ED8;
  a1[35] = &unk_24EC53F00;
  a1[42] = &unk_24EC53F28;
  a1[49] = &unk_24EC53F50;
  a1[56] = &unk_24EC53F78;
  a1[63] = &unk_24EC53FA0;
  a1[70] = &unk_24EC53FC8;
  a1[77] = &unk_24EC53FF0;
  a1[84] = &unk_24EC54018;
  a1[91] = &unk_24EC54040;
  a1[98] = &unk_24EC54068;
  a1[105] = &unk_24EC54090;
  a1[112] = &unk_24EC540B8;
  v3 = a1[125];
  a1[125] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_2235F0ED4(v2);
  JUMPOUT(0x227684CE8);
}

void sub_2235F3DAC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 63);
  *(a1 - 63) = &off_24EC53C38;
  *(a1 - 56) = &unk_24EC53D20;
  *(a1 - 49) = &unk_24EC53D48;
  *(a1 - 42) = &unk_24EC53D70;
  *(a1 - 35) = &unk_24EC53D98;
  *(a1 - 28) = &unk_24EC53DC0;
  *(a1 - 21) = &unk_24EC53DE8;
  *(a1 - 14) = &unk_24EC53E10;
  *(a1 - 7) = &unk_24EC53E38;
  *a1 = &unk_24EC53E60;
  a1[7] = &unk_24EC53E88;
  a1[14] = &unk_24EC53EB0;
  a1[21] = &unk_24EC53ED8;
  a1[28] = &unk_24EC53F00;
  a1[35] = &unk_24EC53F28;
  a1[42] = &unk_24EC53F50;
  a1[49] = &unk_24EC53F78;
  a1[56] = &unk_24EC53FA0;
  a1[63] = &unk_24EC53FC8;
  a1[70] = &unk_24EC53FF0;
  a1[77] = &unk_24EC54018;
  a1[84] = &unk_24EC54040;
  a1[91] = &unk_24EC54068;
  a1[98] = &unk_24EC54090;
  a1[105] = &unk_24EC540B8;
  v2 = a1[118];
  a1[118] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2235F0ED4(v1);
  JUMPOUT(0x227684CE8);
}

void sub_2235F3ED8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 70);
  *(a1 - 70) = &off_24EC53C38;
  *(a1 - 63) = &unk_24EC53D20;
  *(a1 - 56) = &unk_24EC53D48;
  *(a1 - 49) = &unk_24EC53D70;
  *(a1 - 42) = &unk_24EC53D98;
  *(a1 - 35) = &unk_24EC53DC0;
  *(a1 - 28) = &unk_24EC53DE8;
  *(a1 - 21) = &unk_24EC53E10;
  *(a1 - 14) = &unk_24EC53E38;
  *(a1 - 7) = &unk_24EC53E60;
  *a1 = &unk_24EC53E88;
  a1[7] = &unk_24EC53EB0;
  a1[14] = &unk_24EC53ED8;
  a1[21] = &unk_24EC53F00;
  a1[28] = &unk_24EC53F28;
  a1[35] = &unk_24EC53F50;
  a1[42] = &unk_24EC53F78;
  a1[49] = &unk_24EC53FA0;
  a1[56] = &unk_24EC53FC8;
  a1[63] = &unk_24EC53FF0;
  a1[70] = &unk_24EC54018;
  a1[77] = &unk_24EC54040;
  a1[84] = &unk_24EC54068;
  a1[91] = &unk_24EC54090;
  a1[98] = &unk_24EC540B8;
  v2 = a1[111];
  a1[111] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2235F0ED4(v1);
  JUMPOUT(0x227684CE8);
}

void sub_2235F4008(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 77);
  *(a1 - 77) = &off_24EC53C38;
  *(a1 - 70) = &unk_24EC53D20;
  *(a1 - 63) = &unk_24EC53D48;
  *(a1 - 56) = &unk_24EC53D70;
  *(a1 - 49) = &unk_24EC53D98;
  *(a1 - 42) = &unk_24EC53DC0;
  *(a1 - 35) = &unk_24EC53DE8;
  *(a1 - 28) = &unk_24EC53E10;
  *(a1 - 21) = &unk_24EC53E38;
  *(a1 - 14) = &unk_24EC53E60;
  *(a1 - 7) = &unk_24EC53E88;
  *a1 = &unk_24EC53EB0;
  a1[7] = &unk_24EC53ED8;
  a1[14] = &unk_24EC53F00;
  a1[21] = &unk_24EC53F28;
  a1[28] = &unk_24EC53F50;
  a1[35] = &unk_24EC53F78;
  a1[42] = &unk_24EC53FA0;
  a1[49] = &unk_24EC53FC8;
  a1[56] = &unk_24EC53FF0;
  a1[63] = &unk_24EC54018;
  a1[70] = &unk_24EC54040;
  a1[77] = &unk_24EC54068;
  a1[84] = &unk_24EC54090;
  a1[91] = &unk_24EC540B8;
  v2 = a1[104];
  a1[104] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2235F0ED4(v1);
  JUMPOUT(0x227684CE8);
}

void sub_2235F413C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 84);
  *(a1 - 84) = &off_24EC53C38;
  *(a1 - 77) = &unk_24EC53D20;
  *(a1 - 70) = &unk_24EC53D48;
  *(a1 - 63) = &unk_24EC53D70;
  *(a1 - 56) = &unk_24EC53D98;
  *(a1 - 49) = &unk_24EC53DC0;
  *(a1 - 42) = &unk_24EC53DE8;
  *(a1 - 35) = &unk_24EC53E10;
  *(a1 - 28) = &unk_24EC53E38;
  *(a1 - 21) = &unk_24EC53E60;
  *(a1 - 14) = &unk_24EC53E88;
  *(a1 - 7) = &unk_24EC53EB0;
  *a1 = &unk_24EC53ED8;
  a1[7] = &unk_24EC53F00;
  a1[14] = &unk_24EC53F28;
  a1[21] = &unk_24EC53F50;
  a1[28] = &unk_24EC53F78;
  a1[35] = &unk_24EC53FA0;
  a1[42] = &unk_24EC53FC8;
  a1[49] = &unk_24EC53FF0;
  a1[56] = &unk_24EC54018;
  a1[63] = &unk_24EC54040;
  a1[70] = &unk_24EC54068;
  a1[77] = &unk_24EC54090;
  a1[84] = &unk_24EC540B8;
  v2 = a1[97];
  a1[97] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2235F0ED4(v1);
  JUMPOUT(0x227684CE8);
}

void sub_2235F4274(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 91);
  *(a1 - 91) = &off_24EC53C38;
  *(a1 - 84) = &unk_24EC53D20;
  *(a1 - 77) = &unk_24EC53D48;
  *(a1 - 70) = &unk_24EC53D70;
  *(a1 - 63) = &unk_24EC53D98;
  *(a1 - 56) = &unk_24EC53DC0;
  *(a1 - 49) = &unk_24EC53DE8;
  *(a1 - 42) = &unk_24EC53E10;
  *(a1 - 35) = &unk_24EC53E38;
  *(a1 - 28) = &unk_24EC53E60;
  *(a1 - 21) = &unk_24EC53E88;
  *(a1 - 14) = &unk_24EC53EB0;
  *(a1 - 7) = &unk_24EC53ED8;
  *a1 = &unk_24EC53F00;
  a1[7] = &unk_24EC53F28;
  a1[14] = &unk_24EC53F50;
  a1[21] = &unk_24EC53F78;
  a1[28] = &unk_24EC53FA0;
  a1[35] = &unk_24EC53FC8;
  a1[42] = &unk_24EC53FF0;
  a1[49] = &unk_24EC54018;
  a1[56] = &unk_24EC54040;
  a1[63] = &unk_24EC54068;
  a1[70] = &unk_24EC54090;
  a1[77] = &unk_24EC540B8;
  v2 = a1[90];
  a1[90] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2235F0ED4(v1);
  JUMPOUT(0x227684CE8);
}

void sub_2235F43B0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 98);
  *(a1 - 98) = &off_24EC53C38;
  *(a1 - 91) = &unk_24EC53D20;
  *(a1 - 84) = &unk_24EC53D48;
  *(a1 - 77) = &unk_24EC53D70;
  *(a1 - 70) = &unk_24EC53D98;
  *(a1 - 63) = &unk_24EC53DC0;
  *(a1 - 56) = &unk_24EC53DE8;
  *(a1 - 49) = &unk_24EC53E10;
  *(a1 - 42) = &unk_24EC53E38;
  *(a1 - 35) = &unk_24EC53E60;
  *(a1 - 28) = &unk_24EC53E88;
  *(a1 - 21) = &unk_24EC53EB0;
  *(a1 - 14) = &unk_24EC53ED8;
  *(a1 - 7) = &unk_24EC53F00;
  *a1 = &unk_24EC53F28;
  a1[7] = &unk_24EC53F50;
  a1[14] = &unk_24EC53F78;
  a1[21] = &unk_24EC53FA0;
  a1[28] = &unk_24EC53FC8;
  a1[35] = &unk_24EC53FF0;
  a1[42] = &unk_24EC54018;
  a1[49] = &unk_24EC54040;
  a1[56] = &unk_24EC54068;
  a1[63] = &unk_24EC54090;
  a1[70] = &unk_24EC540B8;
  v2 = a1[83];
  a1[83] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2235F0ED4(v1);
  JUMPOUT(0x227684CE8);
}

void sub_2235F44F0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 105);
  *(a1 - 105) = &off_24EC53C38;
  *(a1 - 98) = &unk_24EC53D20;
  *(a1 - 91) = &unk_24EC53D48;
  *(a1 - 84) = &unk_24EC53D70;
  *(a1 - 77) = &unk_24EC53D98;
  *(a1 - 70) = &unk_24EC53DC0;
  *(a1 - 63) = &unk_24EC53DE8;
  *(a1 - 56) = &unk_24EC53E10;
  *(a1 - 49) = &unk_24EC53E38;
  *(a1 - 42) = &unk_24EC53E60;
  *(a1 - 35) = &unk_24EC53E88;
  *(a1 - 28) = &unk_24EC53EB0;
  *(a1 - 21) = &unk_24EC53ED8;
  *(a1 - 14) = &unk_24EC53F00;
  *(a1 - 7) = &unk_24EC53F28;
  *a1 = &unk_24EC53F50;
  a1[7] = &unk_24EC53F78;
  a1[14] = &unk_24EC53FA0;
  a1[21] = &unk_24EC53FC8;
  a1[28] = &unk_24EC53FF0;
  a1[35] = &unk_24EC54018;
  a1[42] = &unk_24EC54040;
  a1[49] = &unk_24EC54068;
  a1[56] = &unk_24EC54090;
  a1[63] = &unk_24EC540B8;
  v2 = a1[76];
  a1[76] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2235F0ED4(v1);
  JUMPOUT(0x227684CE8);
}

void sub_2235F4634(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 112);
  *(a1 - 112) = &off_24EC53C38;
  *(a1 - 105) = &unk_24EC53D20;
  *(a1 - 98) = &unk_24EC53D48;
  *(a1 - 91) = &unk_24EC53D70;
  *(a1 - 84) = &unk_24EC53D98;
  *(a1 - 77) = &unk_24EC53DC0;
  *(a1 - 70) = &unk_24EC53DE8;
  *(a1 - 63) = &unk_24EC53E10;
  *(a1 - 56) = &unk_24EC53E38;
  *(a1 - 49) = &unk_24EC53E60;
  *(a1 - 42) = &unk_24EC53E88;
  *(a1 - 35) = &unk_24EC53EB0;
  *(a1 - 28) = &unk_24EC53ED8;
  *(a1 - 21) = &unk_24EC53F00;
  *(a1 - 14) = &unk_24EC53F28;
  *(a1 - 7) = &unk_24EC53F50;
  *a1 = &unk_24EC53F78;
  a1[7] = &unk_24EC53FA0;
  a1[14] = &unk_24EC53FC8;
  a1[21] = &unk_24EC53FF0;
  a1[28] = &unk_24EC54018;
  a1[35] = &unk_24EC54040;
  a1[42] = &unk_24EC54068;
  a1[49] = &unk_24EC54090;
  a1[56] = &unk_24EC540B8;
  v2 = a1[69];
  a1[69] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2235F0ED4(v1);
  JUMPOUT(0x227684CE8);
}

void sub_2235F477C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 119);
  *(a1 - 119) = &off_24EC53C38;
  *(a1 - 112) = &unk_24EC53D20;
  *(a1 - 105) = &unk_24EC53D48;
  *(a1 - 98) = &unk_24EC53D70;
  *(a1 - 91) = &unk_24EC53D98;
  *(a1 - 84) = &unk_24EC53DC0;
  *(a1 - 77) = &unk_24EC53DE8;
  *(a1 - 70) = &unk_24EC53E10;
  *(a1 - 63) = &unk_24EC53E38;
  *(a1 - 56) = &unk_24EC53E60;
  *(a1 - 49) = &unk_24EC53E88;
  *(a1 - 42) = &unk_24EC53EB0;
  *(a1 - 35) = &unk_24EC53ED8;
  *(a1 - 28) = &unk_24EC53F00;
  *(a1 - 21) = &unk_24EC53F28;
  *(a1 - 14) = &unk_24EC53F50;
  *(a1 - 7) = &unk_24EC53F78;
  *a1 = &unk_24EC53FA0;
  a1[7] = &unk_24EC53FC8;
  a1[14] = &unk_24EC53FF0;
  a1[21] = &unk_24EC54018;
  a1[28] = &unk_24EC54040;
  a1[35] = &unk_24EC54068;
  a1[42] = &unk_24EC54090;
  a1[49] = &unk_24EC540B8;
  v2 = a1[62];
  a1[62] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2235F0ED4(v1);
  JUMPOUT(0x227684CE8);
}

void sub_2235F48C8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 126);
  *(a1 - 126) = &off_24EC53C38;
  *(a1 - 119) = &unk_24EC53D20;
  *(a1 - 112) = &unk_24EC53D48;
  *(a1 - 105) = &unk_24EC53D70;
  *(a1 - 98) = &unk_24EC53D98;
  *(a1 - 91) = &unk_24EC53DC0;
  *(a1 - 84) = &unk_24EC53DE8;
  *(a1 - 77) = &unk_24EC53E10;
  *(a1 - 70) = &unk_24EC53E38;
  *(a1 - 63) = &unk_24EC53E60;
  *(a1 - 56) = &unk_24EC53E88;
  *(a1 - 49) = &unk_24EC53EB0;
  *(a1 - 42) = &unk_24EC53ED8;
  *(a1 - 35) = &unk_24EC53F00;
  *(a1 - 28) = &unk_24EC53F28;
  *(a1 - 21) = &unk_24EC53F50;
  *(a1 - 14) = &unk_24EC53F78;
  *(a1 - 7) = &unk_24EC53FA0;
  *a1 = &unk_24EC53FC8;
  a1[7] = &unk_24EC53FF0;
  a1[14] = &unk_24EC54018;
  a1[21] = &unk_24EC54040;
  a1[28] = &unk_24EC54068;
  a1[35] = &unk_24EC54090;
  a1[42] = &unk_24EC540B8;
  v2 = a1[55];
  a1[55] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2235F0ED4(v1);
  JUMPOUT(0x227684CE8);
}

void sub_2235F4A18(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 133);
  *(a1 - 133) = &off_24EC53C38;
  *(a1 - 126) = &unk_24EC53D20;
  *(a1 - 119) = &unk_24EC53D48;
  *(a1 - 112) = &unk_24EC53D70;
  *(a1 - 105) = &unk_24EC53D98;
  *(a1 - 98) = &unk_24EC53DC0;
  *(a1 - 91) = &unk_24EC53DE8;
  *(a1 - 84) = &unk_24EC53E10;
  *(a1 - 77) = &unk_24EC53E38;
  *(a1 - 70) = &unk_24EC53E60;
  *(a1 - 63) = &unk_24EC53E88;
  *(a1 - 56) = &unk_24EC53EB0;
  *(a1 - 49) = &unk_24EC53ED8;
  *(a1 - 42) = &unk_24EC53F00;
  *(a1 - 35) = &unk_24EC53F28;
  *(a1 - 28) = &unk_24EC53F50;
  *(a1 - 21) = &unk_24EC53F78;
  *(a1 - 14) = &unk_24EC53FA0;
  *(a1 - 7) = &unk_24EC53FC8;
  *a1 = &unk_24EC53FF0;
  a1[7] = &unk_24EC54018;
  a1[14] = &unk_24EC54040;
  a1[21] = &unk_24EC54068;
  a1[28] = &unk_24EC54090;
  a1[35] = &unk_24EC540B8;
  v2 = a1[48];
  a1[48] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2235F0ED4(v1);
  JUMPOUT(0x227684CE8);
}

void sub_2235F4B6C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 140);
  *(a1 - 140) = &off_24EC53C38;
  *(a1 - 133) = &unk_24EC53D20;
  *(a1 - 126) = &unk_24EC53D48;
  *(a1 - 119) = &unk_24EC53D70;
  *(a1 - 112) = &unk_24EC53D98;
  *(a1 - 105) = &unk_24EC53DC0;
  *(a1 - 98) = &unk_24EC53DE8;
  *(a1 - 91) = &unk_24EC53E10;
  *(a1 - 84) = &unk_24EC53E38;
  *(a1 - 77) = &unk_24EC53E60;
  *(a1 - 70) = &unk_24EC53E88;
  *(a1 - 63) = &unk_24EC53EB0;
  *(a1 - 56) = &unk_24EC53ED8;
  *(a1 - 49) = &unk_24EC53F00;
  *(a1 - 42) = &unk_24EC53F28;
  *(a1 - 35) = &unk_24EC53F50;
  *(a1 - 28) = &unk_24EC53F78;
  *(a1 - 21) = &unk_24EC53FA0;
  *(a1 - 14) = &unk_24EC53FC8;
  *(a1 - 7) = &unk_24EC53FF0;
  *a1 = &unk_24EC54018;
  a1[7] = &unk_24EC54040;
  a1[14] = &unk_24EC54068;
  a1[21] = &unk_24EC54090;
  a1[28] = &unk_24EC540B8;
  v2 = a1[41];
  a1[41] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2235F0ED4(v1);
  JUMPOUT(0x227684CE8);
}

void sub_2235F4CC4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 147);
  *(a1 - 147) = &off_24EC53C38;
  *(a1 - 140) = &unk_24EC53D20;
  *(a1 - 133) = &unk_24EC53D48;
  *(a1 - 126) = &unk_24EC53D70;
  *(a1 - 119) = &unk_24EC53D98;
  *(a1 - 112) = &unk_24EC53DC0;
  *(a1 - 105) = &unk_24EC53DE8;
  *(a1 - 98) = &unk_24EC53E10;
  *(a1 - 91) = &unk_24EC53E38;
  *(a1 - 84) = &unk_24EC53E60;
  *(a1 - 77) = &unk_24EC53E88;
  *(a1 - 70) = &unk_24EC53EB0;
  *(a1 - 63) = &unk_24EC53ED8;
  *(a1 - 56) = &unk_24EC53F00;
  *(a1 - 49) = &unk_24EC53F28;
  *(a1 - 42) = &unk_24EC53F50;
  *(a1 - 35) = &unk_24EC53F78;
  *(a1 - 28) = &unk_24EC53FA0;
  *(a1 - 21) = &unk_24EC53FC8;
  *(a1 - 14) = &unk_24EC53FF0;
  *(a1 - 7) = &unk_24EC54018;
  *a1 = &unk_24EC54040;
  a1[7] = &unk_24EC54068;
  a1[14] = &unk_24EC54090;
  a1[21] = &unk_24EC540B8;
  v2 = a1[34];
  a1[34] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2235F0ED4(v1);
  JUMPOUT(0x227684CE8);
}

void sub_2235F4E20(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 154);
  *(a1 - 154) = &off_24EC53C38;
  *(a1 - 147) = &unk_24EC53D20;
  *(a1 - 140) = &unk_24EC53D48;
  *(a1 - 133) = &unk_24EC53D70;
  *(a1 - 126) = &unk_24EC53D98;
  *(a1 - 119) = &unk_24EC53DC0;
  *(a1 - 112) = &unk_24EC53DE8;
  *(a1 - 105) = &unk_24EC53E10;
  *(a1 - 98) = &unk_24EC53E38;
  *(a1 - 91) = &unk_24EC53E60;
  *(a1 - 84) = &unk_24EC53E88;
  *(a1 - 77) = &unk_24EC53EB0;
  *(a1 - 70) = &unk_24EC53ED8;
  *(a1 - 63) = &unk_24EC53F00;
  *(a1 - 56) = &unk_24EC53F28;
  *(a1 - 49) = &unk_24EC53F50;
  *(a1 - 42) = &unk_24EC53F78;
  *(a1 - 35) = &unk_24EC53FA0;
  *(a1 - 28) = &unk_24EC53FC8;
  *(a1 - 21) = &unk_24EC53FF0;
  *(a1 - 14) = &unk_24EC54018;
  *(a1 - 7) = &unk_24EC54040;
  *a1 = &unk_24EC54068;
  a1[7] = &unk_24EC54090;
  a1[14] = &unk_24EC540B8;
  v2 = a1[27];
  a1[27] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2235F0ED4(v1);
  JUMPOUT(0x227684CE8);
}

void sub_2235F4F80(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 161);
  *(a1 - 161) = &off_24EC53C38;
  *(a1 - 154) = &unk_24EC53D20;
  *(a1 - 147) = &unk_24EC53D48;
  *(a1 - 140) = &unk_24EC53D70;
  *(a1 - 133) = &unk_24EC53D98;
  *(a1 - 126) = &unk_24EC53DC0;
  *(a1 - 119) = &unk_24EC53DE8;
  *(a1 - 112) = &unk_24EC53E10;
  *(a1 - 105) = &unk_24EC53E38;
  *(a1 - 98) = &unk_24EC53E60;
  *(a1 - 91) = &unk_24EC53E88;
  *(a1 - 84) = &unk_24EC53EB0;
  *(a1 - 77) = &unk_24EC53ED8;
  *(a1 - 70) = &unk_24EC53F00;
  *(a1 - 63) = &unk_24EC53F28;
  *(a1 - 56) = &unk_24EC53F50;
  *(a1 - 49) = &unk_24EC53F78;
  *(a1 - 42) = &unk_24EC53FA0;
  *(a1 - 35) = &unk_24EC53FC8;
  *(a1 - 28) = &unk_24EC53FF0;
  *(a1 - 21) = &unk_24EC54018;
  *(a1 - 14) = &unk_24EC54040;
  *(a1 - 7) = &unk_24EC54068;
  *a1 = &unk_24EC54090;
  a1[7] = &unk_24EC540B8;
  v2 = a1[20];
  a1[20] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2235F0ED4(v1);
  JUMPOUT(0x227684CE8);
}

void sub_2235F50E4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)(a1 - 168);
  *(a1 - 168) = &off_24EC53C38;
  *(a1 - 161) = &unk_24EC53D20;
  *(a1 - 154) = &unk_24EC53D48;
  *(a1 - 147) = &unk_24EC53D70;
  *(a1 - 140) = &unk_24EC53D98;
  *(a1 - 133) = &unk_24EC53DC0;
  *(a1 - 126) = &unk_24EC53DE8;
  *(a1 - 119) = &unk_24EC53E10;
  *(a1 - 112) = &unk_24EC53E38;
  *(a1 - 105) = &unk_24EC53E60;
  *(a1 - 98) = &unk_24EC53E88;
  *(a1 - 91) = &unk_24EC53EB0;
  *(a1 - 84) = &unk_24EC53ED8;
  *(a1 - 77) = &unk_24EC53F00;
  *(a1 - 70) = &unk_24EC53F28;
  *(a1 - 63) = &unk_24EC53F50;
  *(a1 - 56) = &unk_24EC53F78;
  *(a1 - 49) = &unk_24EC53FA0;
  *(a1 - 42) = &unk_24EC53FC8;
  *(a1 - 35) = &unk_24EC53FF0;
  *(a1 - 28) = &unk_24EC54018;
  *(a1 - 21) = &unk_24EC54040;
  *(a1 - 14) = &unk_24EC54068;
  *(a1 - 7) = &unk_24EC54090;
  *a1 = &unk_24EC540B8;
  v2 = a1[13];
  a1[13] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2235F0ED4(v1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2235F524C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1448) + 16))(*(_QWORD *)(a1 + 1448));
}

void sub_2235F525C(uint64_t a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned __int8 v12;
  const void *v13;
  size_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  size_t v19;
  const char *v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  const char *v23;
  size_t v24;
  _BYTE *v25;
  const char *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  size_t v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  char *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  char *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  __int128 *v79;
  int v80;
  uint64_t v81;
  _QWORD v82[3];
  int v83;
  const char *v84;
  int v85;
  const char *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE object[24];
  __int128 v92;
  void *__p[2];
  unint64_t v94;
  char v95;
  __int128 v96;
  std::__shared_weak_count *v97;
  char *v98;
  char *v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)a2 + 120) || (v5 = *a2) == 0)
  {
    v12 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_2235F5DD8(object);
    if (*(char *)(*(_QWORD *)object + 39) < 0)
    {
      v13 = *(const void **)(*(_QWORD *)object + 16);
      v14 = *(_QWORD *)(*(_QWORD *)object + 24);
    }
    else
    {
      v13 = (const void *)(*(_QWORD *)object + 16);
      v14 = *(unsigned __int8 *)(*(_QWORD *)object + 39);
    }
    sub_223195728((uint64_t)&unk_255789280, v13, v14, "%{private}s processing failed, skipping meshing processing", 0x3AuLL);
    sub_2235F5ECC(&v89);
    if (**(int **)(v89 + 56) > 5)
      goto LABEL_121;
    v15 = *(unsigned __int8 *)(v89 + 72);
    v16 = sub_22322F254(v89, "OSLogSurrogateAppender", 1, 0);
    v17 = v16;
    if (!v15 && !v16)
      goto LABEL_121;
    v82[0] = &v89;
    v82[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v82[2] = std::chrono::system_clock::now().__d_.__rep_;
    v83 = 5;
    v84 = "unknown file";
    v85 = 115;
    v87 = 0;
    v88 = 0;
    v86 = "unknown function";
    v18 = v89;
    if (*(char *)(v89 + 39) < 0)
    {
      v20 = *(const char **)(v89 + 16);
      v19 = *(_QWORD *)(v89 + 24);
      v81 = *(_QWORD *)v82[0] + 16;
      v22 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v22 & 1) != 0)
        goto LABEL_22;
    }
    else
    {
      v19 = *(unsigned __int8 *)(v89 + 39);
      v20 = (const char *)(*(_QWORD *)v82[0] + 16);
      v81 = (uint64_t)v20;
      v21 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v21 & 1) != 0)
        goto LABEL_22;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
      if ((_BYTE)v92 && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_22:
    if (byte_255788F57 >= 0)
      v23 = (const char *)&xmmword_255788F40;
    else
      v23 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v24 = byte_255788F57;
    else
      v24 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)object = os_log_create(v23, v20);
    v25 = &object[8];
    if (v24 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v24 >= 0x17)
    {
      v26 = v20;
      v27 = v17;
      v28 = v18;
      v29 = v15;
      v30 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17)
        v30 = v24 | 7;
      v31 = v30 + 1;
      v25 = operator new(v30 + 1);
      *(_QWORD *)&object[16] = v24;
      *(_QWORD *)&v92 = v31 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v25;
      v15 = v29;
      v18 = v28;
      v17 = v27;
      v20 = v26;
    }
    else
    {
      BYTE7(v92) = v24;
      if (!v24)
      {
LABEL_36:
        v25[v24] = 0;
        BYTE8(v92) = 1;
        v32 = __p;
        if (v19 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v19 >= 0x17)
        {
          v33 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v33 = v19 | 7;
          v34 = v33 + 1;
          v32 = operator new(v33 + 1);
          __p[1] = (void *)v19;
          v94 = v34 | 0x8000000000000000;
          __p[0] = v32;
        }
        else
        {
          HIBYTE(v94) = v19;
          if (!v19)
          {
LABEL_44:
            *((_BYTE *)v32 + v19) = 0;
            v95 = 1;
            v35 = *(NSObject **)object;
            if (SHIBYTE(v94) < 0)
              operator delete(__p[0]);
            if (BYTE8(v92) && SBYTE7(v92) < 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (!v17 || !*(_QWORD *)(v17 + 24))
            {
              os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
              if (!v15)
              {
                *(_DWORD *)object = 136380675;
                *(_QWORD *)&object[4] = "Keyframing";
                v69 = (char *)_os_log_send_and_compose_impl();
                if (!v69)
                  goto LABEL_116;
                goto LABEL_115;
              }
              *(_DWORD *)object = 136380675;
              *(_QWORD *)&object[4] = "Keyframing";
              v69 = (char *)_os_log_send_and_compose_impl();
              sub_22322C138((uint64_t)v82, v69, object, 12);
              goto LABEL_113;
            }
            v36 = _os_log_pack_size();
            v37 = (std::__shared_weak_count_vtbl *)operator new(v36, (std::align_val_t)8uLL);
            v38 = (std::__shared_weak_count *)operator new();
            v38->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v38->__shared_owners_;
            v38->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v38->__shared_weak_owners_ = 0;
            v38[1].__vftable = v37;
            *(_QWORD *)&v96 = v37;
            *((_QWORD *)&v96 + 1) = v37;
            v98 = 0;
            v99 = 0;
            v97 = v38;
            v40 = (char *)operator new(0x38uLL);
            v41 = (std::__shared_weak_count *)v40;
            *((_QWORD *)v40 + 1) = 0;
            v42 = (unint64_t *)(v40 + 8);
            *((_QWORD *)v40 + 2) = 0;
            *(_QWORD *)v40 = &off_24EC1F9F8;
            *((_QWORD *)v40 + 3) = off_24EC1FA48;
            strcpy(v40 + 32, "Keyframing");
            v40[55] = 10;
            v98 = v40 + 24;
            v99 = v40;
            *(_QWORD *)object = v37;
            *(_QWORD *)&object[8] = v37;
            *(_QWORD *)&object[16] = v38;
            do
              v43 = __ldxr(p_shared_owners);
            while (__stxr(v43 + 1, p_shared_owners));
            *(_QWORD *)&v92 = v40 + 24;
            *((_QWORD *)&v92 + 1) = v40;
            do
              v44 = __ldxr(v42);
            while (__stxr(v44 + 1, v42));
            __p[0] = v40 + 24;
            do
              v45 = __ldaxr(v42);
            while (__stlxr(v45 - 1, v42));
            if (!v45)
            {
              (*(void (**)(char *))(*(_QWORD *)v40 + 16))(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
            v46 = v97;
            if (v97)
            {
              v47 = (unint64_t *)&v97->__shared_owners_;
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 - 1, v47));
              if (!v48)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
            }
            v49 = *(_QWORD *)object;
            if (*((char *)__p[0] + 31) >= 0)
              v50 = (char *)__p[0] + 8;
            else
              v50 = (char *)*((_QWORD *)__p[0] + 1);
            v51 = _os_log_pack_fill();
            *(_DWORD *)v51 = 136380675;
            *(_QWORD *)(v51 + 4) = v50;
            v52 = operator new();
            v53 = *(unsigned __int8 *)(v18 + 39);
            v54 = v81;
            if ((v53 & 0x80u) != 0)
            {
              v54 = *(_QWORD *)(v18 + 16);
              v53 = *(_QWORD *)(v18 + 24);
            }
            *(_QWORD *)v52 = v49;
            *(_OWORD *)(v52 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v52 + 24) = v92;
            v92 = 0uLL;
            *(_QWORD *)(v52 + 40) = v54;
            *(_QWORD *)(v52 + 48) = v53;
            *(_BYTE *)(v52 + 56) = 16;
            v90 = 0;
            *(_QWORD *)&v96 = v52;
            (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v17 + 24) + 40))(*(_QWORD *)(v17 + 24), &v96);
            v55 = v96;
            *(_QWORD *)&v96 = 0;
            if (v55)
            {
              v56 = *(std::__shared_weak_count **)(v55 + 32);
              if (v56)
              {
                v57 = (unint64_t *)&v56->__shared_owners_;
                do
                  v58 = __ldaxr(v57);
                while (__stlxr(v58 - 1, v57));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                  std::__shared_weak_count::__release_weak(v56);
                }
              }
              v59 = *(std::__shared_weak_count **)(v55 + 16);
              if (v59)
              {
                v60 = (unint64_t *)&v59->__shared_owners_;
                do
                  v61 = __ldaxr(v60);
                while (__stlxr(v61 - 1, v60));
                if (!v61)
                {
                  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                  std::__shared_weak_count::__release_weak(v59);
                }
              }
              MEMORY[0x227684CE8](v55, 0x10F0C40B62ED6C6);
              v62 = v90;
              v90 = 0;
              if (v62)
              {
                v63 = *(std::__shared_weak_count **)(v62 + 32);
                if (v63)
                {
                  v64 = (unint64_t *)&v63->__shared_owners_;
                  do
                    v65 = __ldaxr(v64);
                  while (__stlxr(v65 - 1, v64));
                  if (!v65)
                  {
                    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                    std::__shared_weak_count::__release_weak(v63);
                  }
                }
                v66 = *(std::__shared_weak_count **)(v62 + 16);
                if (v66)
                {
                  v67 = (unint64_t *)&v66->__shared_owners_;
                  do
                    v68 = __ldaxr(v67);
                  while (__stlxr(v68 - 1, v67));
                  if (!v68)
                  {
                    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                    std::__shared_weak_count::__release_weak(v66);
                  }
                }
                MEMORY[0x227684CE8](v62, 0x10F0C40B62ED6C6);
              }
            }
            if (v15)
            {
              LODWORD(v96) = 136380675;
              *(_QWORD *)((char *)&v96 + 4) = "Keyframing";
              v80 = 12;
              v79 = &v96;
              v69 = (char *)_os_log_send_and_compose_impl();
              v70 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
              if (!*((_QWORD *)&v92 + 1))
              {
LABEL_106:
                v73 = *(std::__shared_weak_count **)&object[16];
                if (*(_QWORD *)&object[16])
                {
                  v74 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                  do
                    v75 = __ldaxr(v74);
                  while (__stlxr(v75 - 1, v74));
                  if (!v75)
                  {
                    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                    std::__shared_weak_count::__release_weak(v73);
                  }
                }
                if (!v15)
                {
LABEL_114:
                  if (!v69)
                  {
LABEL_116:
                    sub_223182C08((uint64_t)v82);
                    v76 = v88;
                    if (v88)
                    {
                      v77 = (unint64_t *)&v88->__shared_owners_;
                      do
                        v78 = __ldaxr(v77);
                      while (__stlxr(v78 - 1, v77));
                      if (!v78)
                      {
                        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                        std::__shared_weak_count::__release_weak(v76);
                      }
                    }
LABEL_121:
                    *a3 = 0;
                    a3[440] = 0;
                    return;
                  }
LABEL_115:
                  free(v69);
                  goto LABEL_116;
                }
                sub_22322C138((uint64_t)v82, v69, v79, v80);
LABEL_113:
                sub_223182C08((uint64_t)v82);
                goto LABEL_114;
              }
            }
            else
            {
              v69 = 0;
              v70 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
              if (!*((_QWORD *)&v92 + 1))
                goto LABEL_106;
            }
            v71 = (unint64_t *)&v70->__shared_owners_;
            do
              v72 = __ldaxr(v71);
            while (__stlxr(v72 - 1, v71));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
            goto LABEL_106;
          }
        }
        memmove(v32, v20, v19);
        goto LABEL_44;
      }
    }
    memmove(v25, v23, v24);
    goto LABEL_36;
  }
  v6 = *(_QWORD *)(a1 + 1448);
  v7 = a2[1];
  *(_QWORD *)object = v5;
  *(_QWORD *)&object[8] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  if (*(_QWORD *)&object[8])
  {
    v10 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&object[8] + 16))(*(_QWORD *)&object[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&object[8]);
    }
  }
}

void sub_2235F5C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a35)
  {
    if (a34 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_2235F5CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  sub_22319A054((uint64_t *)(v29 - 144));
  sub_22319A054(&a28);
  sub_223199DE8((uint64_t)&a29);
  sub_223182DAC((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_2235F5CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  sub_223199DE8(v10 - 144);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2235F5CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  MEMORY[0x227684CE8](v10, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2235F5D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2235F5D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2235F5DD8(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CAF58);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAF58))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.sng");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CAF50);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CAF58);
  }
  *a1 = qword_2540CAF50;
}

void sub_2235F5E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CAF58);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CAF58);
  _Unwind_Resume(a1);
}

void sub_2235F5ECC(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CAF68);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAF68))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CAF60);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CAF68);
  }
  *a1 = qword_2540CAF60;
}

void sub_2235F5F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CAF68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CAF68);
  _Unwind_Resume(a1);
}

void sub_2235F5FC0(uint64_t a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  sub_2235F525C(a1 - 56, a2, a3);
}

void sub_2235F5FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(_QWORD *)(a1 + 1448);
  v6 = 0;
  v7 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v2 + 24))(v2, a2, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2235F6048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235F605C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(_QWORD *)(a1 + 1336);
  v6 = 0;
  v7 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v2 + 24))(v2, a2, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2235F60DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235F6120(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1448) + 80))(*(_QWORD *)(a1 + 1448));
}

uint64_t sub_2235F6130(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1280) + 80))(*(_QWORD *)(a1 + 1280));
}

uint64_t sub_2235F6140(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1448) + 88))(*(_QWORD *)(a1 + 1448));
}

uint64_t sub_2235F6150(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1224) + 88))(*(_QWORD *)(a1 + 1224));
}

uint64_t sub_2235F6160(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 1448);
  v3 = atomic_load((unsigned __int8 *)&qword_255795348);
  if ((v3 & 1) == 0)
  {
    v6 = a2;
    v7 = v2;
    v5 = __cxa_guard_acquire(&qword_255795348);
    a2 = v6;
    v2 = v7;
    if (v5)
    {
      __cxa_atexit((void (*)(void *))nullsub_599, &off_2540CA630, &dword_22314D000);
      __cxa_guard_release(&qword_255795348);
      a2 = v6;
      v2 = v7;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (***)()))(*(_QWORD *)v2 + 96))(v2, a2, &off_2540CA630);
}

uint64_t sub_2235F61EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 1168);
  v3 = atomic_load((unsigned __int8 *)&qword_255795348);
  if ((v3 & 1) == 0)
  {
    v6 = a2;
    v7 = v2;
    v5 = __cxa_guard_acquire(&qword_255795348);
    a2 = v6;
    v2 = v7;
    if (v5)
    {
      __cxa_atexit((void (*)(void *))nullsub_599, &off_2540CA630, &dword_22314D000);
      __cxa_guard_release(&qword_255795348);
      a2 = v6;
      v2 = v7;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (***)()))(*(_QWORD *)v2 + 96))(v2, a2, &off_2540CA630);
}

uint64_t sub_2235F6278(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1448) + 32))(*(_QWORD *)(a1 + 1448));
}

uint64_t sub_2235F6288(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1112) + 32))(*(_QWORD *)(a1 + 1112));
}

uint64_t sub_2235F6298@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;

  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a3 + 24) = a3;
      (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, a3);
    }
    else
    {
      *(_QWORD *)(a3 + 24) = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a3 + 24) = 0;
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1448) + 40))(*(_QWORD *)(a1 + 1448));
}

void sub_2235F6310(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235F634C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;

  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a3 + 24) = a3;
      (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, a3);
    }
    else
    {
      *(_QWORD *)(a3 + 24) = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a3 + 24) = 0;
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1056) + 40))(*(_QWORD *)(a1 + 1056));
}

void sub_2235F63C4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235F6400@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;

  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a3 + 24) = a3;
      (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, a3);
    }
    else
    {
      *(_QWORD *)(a3 + 24) = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a3 + 24) = 0;
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1448) + 48))(*(_QWORD *)(a1 + 1448));
}

void sub_2235F6478(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235F64B4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;

  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a3 + 24) = a3;
      (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, a3);
    }
    else
    {
      *(_QWORD *)(a3 + 24) = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a3 + 24) = 0;
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1000) + 48))(*(_QWORD *)(a1 + 1000));
}

void sub_2235F652C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235F6568@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;

  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a3 + 24) = a3;
      (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, a3);
    }
    else
    {
      *(_QWORD *)(a3 + 24) = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a3 + 24) = 0;
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1448) + 56))(*(_QWORD *)(a1 + 1448));
}

void sub_2235F65E0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235F661C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;

  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a3 + 24) = a3;
      (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, a3);
    }
    else
    {
      *(_QWORD *)(a3 + 24) = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a3 + 24) = 0;
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 56))(*(_QWORD *)(a1 + 944));
}

void sub_2235F6694(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235F66D0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;

  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a3 + 24) = a3;
      (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, a3);
    }
    else
    {
      *(_QWORD *)(a3 + 24) = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a3 + 24) = 0;
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1448) + 64))(*(_QWORD *)(a1 + 1448));
}

void sub_2235F6748(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235F6784@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;

  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a3 + 24) = a3;
      (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, a3);
    }
    else
    {
      *(_QWORD *)(a3 + 24) = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a3 + 24) = 0;
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 888) + 64))(*(_QWORD *)(a1 + 888));
}

void sub_2235F67FC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_2235F6838(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1448) + 136))(*(_QWORD *)(a1 + 1448));
}

uint64_t sub_2235F6848(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 832) + 136))(*(_QWORD *)(a1 + 832));
}

void sub_2235F6858(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  std::string::size_type v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  unsigned __int8 v12;
  const void *v13;
  size_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  std::string *v18;
  uint64_t v19;
  const char *v20;
  size_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  const char *v24;
  size_t v25;
  std::string::size_type *p_size;
  unint64_t v27;
  std::string *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  size_t v36;
  void *v37;
  _QWORD *v38;
  size_t v39;
  size_t v40;
  _QWORD *p_dst;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  void *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::string::size_type v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  __int128 v69;
  std::string::size_type v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  _QWORD *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::string *p_object;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *exception;
  _QWORD *v95;
  uint64_t v96;
  const char *v97;
  const char *__src;
  std::string v99;
  _QWORD v100[3];
  int v101;
  const char *v102;
  int v103;
  const char *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::string v108;
  char *v109;
  std::__shared_weak_count *v110;
  _QWORD *__dst;
  __int128 v112;
  std::string object;
  __int128 v114;
  void *v115;
  void *v116;
  unint64_t v117;
  char v118;
  char v119;
  void *__p;
  char v121;
  char v122;
  char v123;
  char v124;
  _QWORD v125[5];

  v125[2] = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a2 + 120))
  {
    v12 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_2235F5DD8(&object);
    if (*(char *)(object.__r_.__value_.__r.__words[0] + 39) < 0)
    {
      v13 = *(const void **)(object.__r_.__value_.__r.__words[0] + 16);
      v14 = *(_QWORD *)(object.__r_.__value_.__r.__words[0] + 24);
    }
    else
    {
      v13 = (const void *)(object.__r_.__value_.__r.__words[0] + 16);
      v14 = *(unsigned __int8 *)(object.__r_.__value_.__r.__words[0] + 39);
    }
    sub_223195728((uint64_t)&unk_255789280, v13, v14, "Plane Detection failed: %s", 0x1AuLL);
    sub_2235F5ECC(&v107);
    if (**(int **)(v107 + 56) > 5)
      goto LABEL_150;
    v15 = *(unsigned __int8 *)(v107 + 72);
    v16 = sub_22322F254(v107, "OSLogSurrogateAppender", 1, 0);
    v17 = v16;
    if (!v15 && !v16)
      goto LABEL_150;
    v100[0] = &v107;
    v100[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v100[2] = std::chrono::system_clock::now().__d_.__rep_;
    v101 = 5;
    v102 = "unknown file";
    v103 = 170;
    v105 = 0;
    v106 = 0;
    v104 = "unknown function";
    if (*(_BYTE *)(a2 + 120))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24EC1FCC0;
      __cxa_throw(exception, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
    }
    v18 = &v99;
    sub_22456A158(a2, &v99);
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v18 = (std::string *)v99.__r_.__value_.__r.__words[0];
    v19 = *(_QWORD *)v100[0];
    v20 = (const char *)(*(_QWORD *)v100[0] + 16);
    v96 = *(_QWORD *)v100[0];
    v97 = v20;
    if (*(char *)(*(_QWORD *)v100[0] + 39) < 0)
    {
      v20 = *(const char **)(v19 + 16);
      v21 = *(_QWORD *)(v19 + 24);
      v23 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v23 & 1) != 0)
        goto LABEL_34;
    }
    else
    {
      v21 = *(unsigned __int8 *)(*(_QWORD *)v100[0] + 39);
      v22 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v22 & 1) != 0)
        goto LABEL_34;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&object);
      sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
      if ((_BYTE)v114 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
        operator delete(object.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_34:
    if (byte_255788F57 >= 0)
      v24 = (const char *)&xmmword_255788F40;
    else
      v24 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v25 = byte_255788F57;
    else
      v25 = *((_QWORD *)&xmmword_255788F40 + 1);
    __src = v20;
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v24, v20);
    p_size = &object.__r_.__value_.__l.__size_;
    if (v25 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v25 >= 0x17)
    {
      v27 = v17;
      v28 = v18;
      v29 = v15;
      v30 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17)
        v30 = v25 | 7;
      v31 = v30 + 1;
      p_size = (std::string::size_type *)operator new(v30 + 1);
      object.__r_.__value_.__r.__words[2] = v25;
      *(_QWORD *)&v114 = v31 | 0x8000000000000000;
      object.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
      v15 = v29;
      v18 = v28;
      v17 = v27;
    }
    else
    {
      BYTE7(v114) = v25;
      if (!v25)
      {
LABEL_48:
        *((_BYTE *)p_size + v25) = 0;
        BYTE8(v114) = 1;
        v32 = &v115;
        if (v21 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v21 >= 0x17)
        {
          v33 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v21 | 7) != 0x17)
            v33 = v21 | 7;
          v34 = v33 + 1;
          v32 = operator new(v33 + 1);
          v116 = (void *)v21;
          v117 = v34 | 0x8000000000000000;
          v115 = v32;
        }
        else
        {
          HIBYTE(v117) = v21;
          if (!v21)
          {
LABEL_56:
            *((_BYTE *)v32 + v21) = 0;
            v118 = 1;
            v35 = object.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v117) < 0)
              operator delete(v115);
            if (BYTE8(v114) && SBYTE7(v114) < 0)
              operator delete((void *)object.__r_.__value_.__l.__size_);
            if (object.__r_.__value_.__r.__words[0])
              os_release(object.__r_.__value_.__l.__data_);
            if (!v17 || !*(_QWORD *)(v17 + 24))
            {
              os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
              LODWORD(object.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
              v42 = (void *)_os_log_send_and_compose_impl();
              if (v42)
                free(v42);
              goto LABEL_135;
            }
            v36 = _os_log_pack_size();
            v37 = operator new(v36, (std::align_val_t)8uLL);
            v38 = (_QWORD *)operator new();
            *v38 = &off_24EC1F7F0;
            v38[1] = 0;
            v38[2] = 0;
            v38[3] = v37;
            v108.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
            v108.__r_.__value_.__l.__size_ = (std::string::size_type)v37;
            v109 = 0;
            v110 = 0;
            v108.__r_.__value_.__r.__words[2] = (std::string::size_type)v38;
            v39 = strlen((const char *)v18);
            if (v39 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v40 = v39;
            if (v39 >= 0x17)
            {
              v43 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v39 | 7) != 0x17)
                v43 = v39 | 7;
              v44 = v43 + 1;
              p_dst = operator new(v43 + 1);
              *(_QWORD *)&v112 = v40;
              *((_QWORD *)&v112 + 1) = v44 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v112) = v39;
              p_dst = &__dst;
              if (!v39)
              {
LABEL_75:
                *((_BYTE *)p_dst + v40) = 0;
                v45 = __dst;
                v125[0] = v112;
                *(_QWORD *)((char *)v125 + 7) = *(_QWORD *)((char *)&v112 + 7);
                v46 = HIBYTE(v112);
                v47 = operator new(0x38uLL);
                v47[1] = 0;
                v47[2] = 0;
                v47[3] = off_24EC1FA48;
                *v47 = &off_24EC1F9F8;
                v48 = v125[0];
                v47[4] = v45;
                v47[5] = v48;
                *(_QWORD *)((char *)v47 + 47) = *(_QWORD *)((char *)v125 + 7);
                *((_BYTE *)v47 + 55) = v46;
                v125[0] = 0;
                *(_QWORD *)((char *)v125 + 7) = 0;
                v49 = v110;
                v109 = (char *)(v47 + 3);
                v110 = (std::__shared_weak_count *)v47;
                if (v49)
                {
                  p_shared_owners = (unint64_t *)&v49->__shared_owners_;
                  do
                    v51 = __ldaxr(p_shared_owners);
                  while (__stlxr(v51 - 1, p_shared_owners));
                  if (!v51)
                  {
                    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                    std::__shared_weak_count::__release_weak(v49);
                  }
                }
                object = v108;
                v52 = v109;
                if (v108.__r_.__value_.__r.__words[2])
                {
                  v53 = (unint64_t *)(v108.__r_.__value_.__r.__words[2] + 8);
                  do
                    v54 = __ldxr(v53);
                  while (__stxr(v54 + 1, v53));
                }
                v55 = v110;
                *(_QWORD *)&v114 = v52;
                *((_QWORD *)&v114 + 1) = v110;
                if (v110)
                {
                  v56 = (unint64_t *)&v110->__shared_owners_;
                  do
                    v57 = __ldxr(v56);
                  while (__stxr(v57 + 1, v56));
                  v115 = v52;
                  do
                    v58 = __ldaxr(v56);
                  while (__stlxr(v58 - 1, v56));
                  if (!v58)
                  {
                    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                    std::__shared_weak_count::__release_weak(v55);
                  }
                }
                else
                {
                  v115 = v52;
                }
                v59 = (std::__shared_weak_count *)v108.__r_.__value_.__r.__words[2];
                if (v108.__r_.__value_.__r.__words[2])
                {
                  v60 = (unint64_t *)(v108.__r_.__value_.__r.__words[2] + 8);
                  do
                    v61 = __ldaxr(v60);
                  while (__stlxr(v61 - 1, v60));
                  if (!v61)
                  {
                    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                    std::__shared_weak_count::__release_weak(v59);
                  }
                }
                v62 = object.__r_.__value_.__r.__words[0];
                if (*((char *)v115 + 31) >= 0)
                  v63 = (char *)v115 + 8;
                else
                  v63 = (char *)*((_QWORD *)v115 + 1);
                v64 = _os_log_pack_fill();
                *(_DWORD *)v64 = 136315138;
                *(_QWORD *)(v64 + 4) = v63;
                v65 = operator new();
                v66 = *(unsigned __int8 *)(v96 + 39);
                v67 = *(const char **)(v96 + 16);
                v68 = *(_QWORD *)(v96 + 24);
                v69 = v114;
                *(_OWORD *)(v65 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
                if ((v66 & 0x80u) != 0)
                  v66 = v68;
                else
                  v67 = v97;
                *(_QWORD *)v65 = v62;
                *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
                *(_OWORD *)(v65 + 24) = v69;
                v114 = 0uLL;
                *(_QWORD *)(v65 + 40) = v67;
                *(_QWORD *)(v65 + 48) = v66;
                *(_BYTE *)(v65 + 56) = 16;
                __dst = 0;
                v108.__r_.__value_.__r.__words[0] = v65;
                (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v17 + 24) + 40))(*(_QWORD *)(v17 + 24), &v108);
                v70 = v108.__r_.__value_.__r.__words[0];
                v108.__r_.__value_.__r.__words[0] = 0;
                if (v70)
                {
                  v71 = *(std::__shared_weak_count **)(v70 + 32);
                  if (v71)
                  {
                    v72 = (unint64_t *)&v71->__shared_owners_;
                    do
                      v73 = __ldaxr(v72);
                    while (__stlxr(v73 - 1, v72));
                    if (!v73)
                    {
                      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                      std::__shared_weak_count::__release_weak(v71);
                    }
                  }
                  v74 = *(std::__shared_weak_count **)(v70 + 16);
                  if (v74)
                  {
                    v75 = (unint64_t *)&v74->__shared_owners_;
                    do
                      v76 = __ldaxr(v75);
                    while (__stlxr(v76 - 1, v75));
                    if (!v76)
                    {
                      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                      std::__shared_weak_count::__release_weak(v74);
                    }
                  }
                  MEMORY[0x227684CE8](v70, 0x10F0C40B62ED6C6);
                  v77 = __dst;
                  __dst = 0;
                  if (v77)
                  {
                    v78 = (std::__shared_weak_count *)v77[4];
                    if (v78)
                    {
                      v79 = (unint64_t *)&v78->__shared_owners_;
                      do
                        v80 = __ldaxr(v79);
                      while (__stlxr(v80 - 1, v79));
                      if (!v80)
                      {
                        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                        std::__shared_weak_count::__release_weak(v78);
                      }
                    }
                    v81 = (std::__shared_weak_count *)v77[2];
                    if (v81)
                    {
                      v82 = (unint64_t *)&v81->__shared_owners_;
                      do
                        v83 = __ldaxr(v82);
                      while (__stlxr(v83 - 1, v82));
                      if (!v83)
                      {
                        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                        std::__shared_weak_count::__release_weak(v81);
                      }
                    }
                    MEMORY[0x227684CE8](v77, 0x10F0C40B62ED6C6);
                  }
                }
                v84 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
                if (*((_QWORD *)&v114 + 1))
                {
                  v85 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
                  do
                    v86 = __ldaxr(v85);
                  while (__stlxr(v86 - 1, v85));
                  if (!v86)
                  {
                    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                    std::__shared_weak_count::__release_weak(v84);
                  }
                }
                v87 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
                if (object.__r_.__value_.__r.__words[2])
                {
                  v88 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
                  do
                    v89 = __ldaxr(v88);
                  while (__stlxr(v89 - 1, v88));
                  if (!v89)
                  {
                    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                    std::__shared_weak_count::__release_weak(v87);
                  }
                }
LABEL_135:
                if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v99.__r_.__value_.__l.__data_);
                if (v15)
                {
                  if (*(_BYTE *)(a2 + 120))
                  {
                    v95 = __cxa_allocate_exception(8uLL);
                    *v95 = &off_24EC1FCC0;
                    __cxa_throw(v95, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
                  }
                  sub_22456A158(a2, &object);
                  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    p_object = &object;
                  else
                    p_object = (std::string *)object.__r_.__value_.__r.__words[0];
                  sub_22322C138((uint64_t)v100, "Plane Detection failed: %s", (const char *)p_object);
                  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(object.__r_.__value_.__l.__data_);
                  sub_223182C08((uint64_t)v100);
                }
                sub_223182C08((uint64_t)v100);
                v91 = v106;
                if (v106)
                {
                  v92 = (unint64_t *)&v106->__shared_owners_;
                  do
                    v93 = __ldaxr(v92);
                  while (__stlxr(v93 - 1, v92));
                  if (!v93)
                  {
                    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                    std::__shared_weak_count::__release_weak(v91);
                  }
                }
LABEL_150:
                *a3 = 0;
                a3[440] = 0;
                return;
              }
            }
            memcpy(p_dst, v18, v40);
            goto LABEL_75;
          }
        }
        memmove(v32, __src, v21);
        goto LABEL_56;
      }
    }
    memmove(p_size, v24, v25);
    goto LABEL_48;
  }
  v5 = *(_QWORD *)(a1 + 1448);
  v6 = *(_QWORD *)(a2 + 8);
  object.__r_.__value_.__r.__words[0] = *(_QWORD *)a2;
  object.__r_.__value_.__l.__size_ = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v124 = 1;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 144))(v5, &object);
  if (v124)
  {
    size = (std::__shared_weak_count *)object.__r_.__value_.__l.__size_;
    if (object.__r_.__value_.__l.__size_)
    {
      v10 = (unint64_t *)(object.__r_.__value_.__l.__size_ + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  else if (v123)
  {
    if (v122)
    {
      if (v121 < 0)
        operator delete(__p);
      if (v119 < 0)
        operator delete(v116);
    }
    if ((_BYTE)v115 && SHIBYTE(v114) < 0)
      operator delete((void *)object.__r_.__value_.__r.__words[2]);
  }
}

void sub_2235F732C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *__p,void *a39,int a40,__int16 a41,char a42,char a43,char a44,int a45,__int16 a46,char a47,char a48)
{
  if (a44 && a43 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  if (a19 < 0)
  {
    operator delete(a14);
    sub_223182DAC((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  sub_223182DAC((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_2235F747C()
{
  JUMPOUT(0x2235F7498);
}

void sub_2235F74A0(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  sub_2235F6858(a1 - 672, a2, a3);
}

double sub_2235F74A8@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  double result;
  __int128 v8;

  if (!a2[4]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/MeshingWorker.cpp", 178, (uint64_t)"request.request", 15, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 1448) + 152))(&v8);
  v6 = a2[3];
  if (v6)
  {
    if ((_QWORD *)v6 == a2)
    {
      *(_QWORD *)(a3 + 24) = a3;
      (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, a3);
      goto LABEL_8;
    }
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  }
  *(_QWORD *)(a3 + 24) = v6;
LABEL_8:
  result = *(double *)&v8;
  *(_OWORD *)(a3 + 32) = v8;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  return result;
}

void sub_2235F757C(_Unwind_Exception *a1, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *exception_ptr;
  _QWORD v7[8];

  sub_223167354((uint64_t)v7);
  if (a2 != 1)
    _Unwind_Resume(a1);
  exception_ptr = __cxa_get_exception_ptr(a1);
  sub_2232E56F4(v7, (uint64_t)exception_ptr);
  __cxa_begin_catch(a1);
  sub_2235F7658((uint64_t)v2, v3);
  v2[4] = 0;
  v2[5] = 0;
  sub_2232E56F4(v2 + 6, (uint64_t)v7);
  sub_223167354((uint64_t)v7);
  __cxa_end_catch();
}

uint64_t sub_2235F7658(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
    return a1;
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
    return a1;
  }
}

double sub_2235F76D4@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_2235F74A8(a1 - 728, a2, a3);
}

uint64_t sub_2235F76DC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1448) + 104))(*(_QWORD *)(a1 + 1448));
}

uint64_t sub_2235F76EC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 440) + 104))(*(_QWORD *)(a1 + 440));
}

uint64_t sub_2235F76FC(uint64_t a1, double *a2)
{
  return (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a1 + 1448) + 112))(*(_QWORD *)(a1 + 1448), *a2);
}

uint64_t sub_2235F7710(uint64_t a1, double *a2)
{
  return (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a1 + 384) + 112))(*(_QWORD *)(a1 + 384), *a2);
}

uint64_t sub_2235F7724(uint64_t a1, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 1448) + 120))(*(_QWORD *)(a1 + 1448), *a2);
}

uint64_t sub_2235F7738(uint64_t a1, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 328) + 120))(*(_QWORD *)(a1 + 328), *a2);
}

uint64_t sub_2235F774C(uint64_t a1, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 1448) + 128))(*(_QWORD *)(a1 + 1448), *a2);
}

uint64_t sub_2235F7760(uint64_t a1, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 272) + 128))(*(_QWORD *)(a1 + 272), *a2);
}

uint64_t sub_2235F7774(uint64_t a1, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 1448) + 168))(*(_QWORD *)(a1 + 1448), *a2);
}

uint64_t sub_2235F7788(uint64_t a1, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 216) + 168))(*(_QWORD *)(a1 + 216), *a2);
}

uint64_t sub_2235F779C(uint64_t a1, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 1448) + 224))(*(_QWORD *)(a1 + 1448), *a2);
}

uint64_t sub_2235F77B0(uint64_t a1, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 160) + 224))(*(_QWORD *)(a1 + 160), *a2);
}

uint64_t sub_2235F77C4(uint64_t a1, float *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, float, float, float))(**(_QWORD **)(a1 + 1448) + 200))(*(_QWORD *)(a1 + 1448), *(unsigned __int8 *)a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_2235F77E4(uint64_t a1, float *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, float, float, float))(**(_QWORD **)(a1 + 104) + 200))(*(_QWORD *)(a1 + 104), *(unsigned __int8 *)a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_2235F7804(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1448) + 232))(*(_QWORD *)(a1 + 1448));
}

uint64_t sub_2235F7814(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 608) + 232))(*(_QWORD *)(a1 + 608));
}

uint64_t sub_2235F7824(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1448) + 208))(*(_QWORD *)(a1 + 1448));
}

uint64_t sub_2235F7834(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 664) + 208))(*(_QWORD *)(a1 + 664));
}

uint64_t sub_2235F7844(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1448) + 176))(*(_QWORD *)(a1 + 1448));
}

uint64_t sub_2235F7854(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 552) + 176))(*(_QWORD *)(a1 + 552));
}

uint64_t sub_2235F7864(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1448) + 184))(*(_QWORD *)(a1 + 1448));
}

uint64_t sub_2235F7874(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 496) + 184))(*(_QWORD *)(a1 + 496));
}

void sub_2235F7A0C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  int v6;
  char *v7;
  size_t v8;
  CFTypeRef *v9;
  CFTypeID v10;
  CFTypeRef v11;
  CFTypeID TypeID;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  BOOL v19;
  BOOL v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  const void *v38;
  CFDictionaryRef v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  char *v60;
  std::string *p_p;
  uint64_t v62;
  const char *v63;
  size_t v64;
  unsigned __int8 v65;
  __int128 v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  unsigned __int8 v73;
  const char *v74;
  size_t v75;
  _QWORD *v76;
  unint64_t v77;
  const char *v78;
  int v79;
  std::string *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  NSObject *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  size_t v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  size_t v92;
  size_t v93;
  _QWORD *v94;
  void *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  std::string *v104;
  size_t v105;
  size_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  char *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  const char *v152;
  std::string *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  _QWORD *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  size_t v174;
  const char *v175;
  const char *v176;
  void *key[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v179;
  const char *v180;
  int v181;
  const char *v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  uint64_t v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  std::string __p;
  char v189;
  _QWORD v190[4];
  std::__shared_weak_count *v191;
  std::__shared_weak_count *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  std::__shared_weak_count *v197;
  CFDictionaryRef theDict[2];
  _BYTE v199[24];
  __int128 v200;
  char *v201;
  __int128 v202;
  std::__shared_weak_count *v203;
  char *v204;
  std::__shared_weak_count *v205;
  _QWORD *v206;
  __int128 v207;
  _QWORD *v208;
  __int128 v209;
  _QWORD v210[7];
  unint64_t v211;
  char v212;
  uint64_t v213;

  v213 = *MEMORY[0x24BDAC8D0];
  v210[1] = 0;
  v210[2] = 0;
  v210[0] = &v210[1];
  sub_2245314F4(v210, key);
  *(_OWORD *)theDict = *(_OWORD *)key;
  sub_22323DF84((uint64_t)v210, (char *)v210[1]);
  sub_224529FA0((uint64_t)&v193, a2);
  sub_22452AD84(a2, (uint64_t)v190);
  while (!v193 || v190[0] == 0)
  {
    if ((v193 != 0) != (v190[0] == 0))
      goto LABEL_276;
LABEL_10:
    v4 = sub_224529CD4((uint64_t)&v193);
    v5 = atomic_load((unsigned __int8 *)&qword_2557950D0);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_2557950D0))
    {
      v157 = operator new(0x20uLL);
      v157[1] = 0;
      v157[2] = 0;
      *v157 = &off_24EC65188;
      qword_2557950C0 = (uint64_t)(v157 + 3);
      *(_QWORD *)algn_2557950C8 = v157;
      __cxa_atexit((void (*)(void *))sub_223FE2D9C, &qword_2557950C0, &dword_22314D000);
      __cxa_guard_release(&qword_2557950D0);
    }
    v6 = *(char *)(v4 + 23);
    if (v6 >= 0)
      v7 = (char *)v4;
    else
      v7 = *(char **)v4;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(v4 + 23);
    else
      v8 = *(_QWORD *)(v4 + 8);
    sub_223FE2E04(v7, v8, 0, &__p);
    if (v189)
    {
      v9 = (CFTypeRef *)(v4 + 24);
      v10 = CFGetTypeID(*(CFTypeRef *)(v4 + 24));
      if (v10 != CFDictionaryGetTypeID())
      {
        sub_224527BAC((uint64_t)&__p, (CFStringRef *)v210);
        v19 = sub_223620DA8((uint64_t)theDict, (void *)v210[0], v4 + 24);
        v20 = v19;
        v21 = (std::__shared_weak_count *)v210[1];
        if (!v210[1])
          goto LABEL_34;
        v22 = (unint64_t *)(v210[1] + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
          if (!v20)
            goto LABEL_93;
        }
        else
        {
LABEL_34:
          if (!v19)
            goto LABEL_93;
        }
        goto LABEL_260;
      }
      v11 = *v9;
      if (*v9 && (TypeID = CFDictionaryGetTypeID(), CFGetTypeID(v11) == TypeID))
      {
        sub_22319EE1C(v210, *v9);
        key[0] = (void *)v210[0];
        key[1] = (void *)v210[1];
        if (v210[1])
        {
          v13 = (unint64_t *)(v210[1] + 8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
          v15 = (std::__shared_weak_count *)v210[1];
          if (v210[1])
          {
            v16 = (unint64_t *)(v210[1] + 8);
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
        }
        v18 = key[0];
      }
      else
      {
        v18 = 0;
        key[0] = 0;
        key[1] = 0;
      }
      sub_22319EE1C(v210, v18);
      v25 = v210[0];
      v24 = (std::__shared_weak_count *)v210[1];
      if (v210[1])
      {
        v26 = (unint64_t *)(v210[1] + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        v28 = (std::__shared_weak_count *)v210[1];
        if (v210[1])
        {
          v29 = (unint64_t *)(v210[1] + 8);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        do
          v31 = __ldxr(v26);
        while (__stxr(v31 + 1, v26));
        *(_QWORD *)v199 = v25;
        *(_QWORD *)&v199[8] = v24;
        do
          v32 = __ldxr(v26);
        while (__stxr(v32 + 1, v26));
        do
          v33 = __ldaxr(v26);
        while (__stlxr(v33 - 1, v26));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
        do
          v34 = __ldaxr(v26);
        while (__stlxr(v34 - 1, v26));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      else
      {
        *(_QWORD *)v199 = v210[0];
        *(_QWORD *)&v199[8] = 0;
      }
      v35 = (std::__shared_weak_count *)key[1];
      if (key[1])
      {
        v36 = (unint64_t *)((char *)key[1] + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      sub_22319ED0C(&v186, (uint64_t)v199);
      sub_2235F7A0C(&v202, &v186);
      sub_224527BAC((uint64_t)&__p, (CFStringRef *)key);
      v38 = key[0];
      v39 = theDict[0];
      v40 = (std::__shared_weak_count *)theDict[1];
      if (!theDict[1])
        goto LABEL_65;
      v41 = (unint64_t *)((char *)theDict[1] + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
      do
        v43 = __ldaxr(v41);
      while (__stlxr(v43 - 1, v41));
      if (v43)
      {
LABEL_65:
        if (v39)
          goto LABEL_66;
LABEL_68:
        v44 = (std::__shared_weak_count *)key[1];
        if (!key[1])
          goto LABEL_72;
        v45 = (unint64_t *)((char *)key[1] + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
          v47 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
          if (*((_QWORD *)&v202 + 1))
          {
LABEL_73:
            p_shared_owners = (unint64_t *)&v47->__shared_owners_;
            do
              v49 = __ldaxr(p_shared_owners);
            while (__stlxr(v49 - 1, p_shared_owners));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
        }
        else
        {
LABEL_72:
          v47 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
          if (*((_QWORD *)&v202 + 1))
            goto LABEL_73;
        }
        v50 = v187;
        if (!v187)
          goto LABEL_86;
        v51 = (unint64_t *)&v187->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
          v53 = *(std::__shared_weak_count **)&v199[8];
          if (*(_QWORD *)&v199[8])
          {
LABEL_87:
            v54 = (unint64_t *)&v53->__shared_owners_;
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
        }
        else
        {
LABEL_86:
          v53 = *(std::__shared_weak_count **)&v199[8];
          if (*(_QWORD *)&v199[8])
            goto LABEL_87;
        }
        if ((v39 & 1) != 0)
          goto LABEL_260;
LABEL_93:
        sub_2235F8ED4(&v185);
        if (**(int **)(v185 + 56) > 5)
          goto LABEL_260;
        v56 = *(unsigned __int8 *)(v185 + 72);
        v57 = sub_22322F254(v185, "OSLogSurrogateAppender", 1, 0);
        v58 = v57;
        if (!v56 && v57 == 0)
          goto LABEL_260;
        key[0] = &v185;
        key[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
        rep = std::chrono::system_clock::now().__d_.__rep_;
        v179 = 5;
        v180 = "unknown file";
        v181 = 76;
        v182 = "unknown function";
        v183 = 0;
        v184 = 0;
        if (*(char *)(v4 + 23) >= 0)
          v60 = (char *)v4;
        else
          v60 = *(char **)v4;
        v176 = v60;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v62 = *(_QWORD *)key[0];
        v63 = (const char *)(*(_QWORD *)key[0] + 16);
        v175 = v63;
        if (*(char *)(*(_QWORD *)key[0] + 39) < 0)
        {
          v63 = *(const char **)(v62 + 16);
          v64 = *(_QWORD *)(v62 + 24);
          v73 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v73 & 1) == 0)
          {
LABEL_271:
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)v199);
              sub_223199C58("com.apple.cv3d", (unint64_t)v199, &xmmword_255788F40);
              if ((_BYTE)v200 && (v199[23] & 0x80000000) != 0)
                operator delete(*(void **)v199);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
          }
        }
        else
        {
          v64 = *(unsigned __int8 *)(*(_QWORD *)key[0] + 39);
          v65 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v65 & 1) == 0)
            goto LABEL_271;
        }
        if (byte_255788F57 >= 0)
          v74 = (const char *)&xmmword_255788F40;
        else
          v74 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v75 = byte_255788F57;
        else
          v75 = *((_QWORD *)&xmmword_255788F40 + 1);
        v210[0] = os_log_create(v74, v63);
        if (v75 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v75 >= 0x17)
        {
          v174 = v64;
          v77 = v58;
          v78 = v63;
          v79 = v56;
          v80 = p_p;
          v81 = v62;
          v82 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v75 | 7) != 0x17)
            v82 = v75 | 7;
          v83 = v82 + 1;
          v76 = operator new(v82 + 1);
          v210[2] = v75;
          v210[3] = v83 | 0x8000000000000000;
          v210[1] = v76;
          v62 = v81;
          p_p = v80;
          v56 = v79;
          v63 = v78;
          v58 = v77;
          v64 = v174;
        }
        else
        {
          HIBYTE(v210[3]) = v75;
          v76 = &v210[1];
          if (!v75)
          {
LABEL_131:
            *((_BYTE *)v76 + v75) = 0;
            LOBYTE(v210[4]) = 1;
            if (v64 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v64 >= 0x17)
            {
              v87 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v64 | 7) != 0x17)
                v87 = v64 | 7;
              v88 = v87 + 1;
              v84 = operator new(v87 + 1);
              v210[6] = v64;
              v211 = v88 | 0x8000000000000000;
              v210[5] = v84;
            }
            else
            {
              HIBYTE(v211) = v64;
              v84 = &v210[5];
              if (!v64)
              {
                LOBYTE(v210[5]) = 0;
                v212 = 1;
                v85 = v210[0];
                if ((SHIBYTE(v211) & 0x80000000) == 0)
                  goto LABEL_135;
LABEL_141:
                operator delete((void *)v210[5]);
                v86 = v176;
                if (LOBYTE(v210[4]))
                  goto LABEL_142;
                goto LABEL_144;
              }
            }
            memmove(v84, v63, v64);
            *((_BYTE *)v84 + v64) = 0;
            v212 = 1;
            v85 = v210[0];
            if (SHIBYTE(v211) < 0)
              goto LABEL_141;
LABEL_135:
            v86 = v176;
            if (LOBYTE(v210[4]))
            {
LABEL_142:
              if (SHIBYTE(v210[3]) < 0)
                operator delete((void *)v210[1]);
            }
LABEL_144:
            if (v210[0])
              os_release((void *)v210[0]);
            if (v58 && *(_QWORD *)(v58 + 24))
            {
              v89 = _os_log_pack_size();
              v90 = (std::__shared_weak_count_vtbl *)operator new(v89, (std::align_val_t)8uLL);
              v91 = (std::__shared_weak_count *)operator new();
              v91->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v91->__shared_owners_ = 0;
              v91->__shared_weak_owners_ = 0;
              v91[1].__vftable = v90;
              *(_QWORD *)&v202 = v90;
              *((_QWORD *)&v202 + 1) = v90;
              v203 = v91;
              v204 = 0;
              v205 = 0;
              v92 = strlen(v86);
              if (v92 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v93 = v92;
              if (v92 >= 0x17)
              {
                v102 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v92 | 7) != 0x17)
                  v102 = v92 | 7;
                v103 = v102 + 1;
                v94 = operator new(v102 + 1);
                *(_QWORD *)&v209 = v93;
                *((_QWORD *)&v209 + 1) = v103 | 0x8000000000000000;
                v208 = v94;
              }
              else
              {
                HIBYTE(v209) = v92;
                v94 = &v208;
                if (!v92)
                {
LABEL_173:
                  *((_BYTE *)v94 + v93) = 0;
                  v104 = p_p;
                  v105 = strlen((const char *)p_p);
                  if (v105 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v106 = v105;
                  if (v105 >= 0x17)
                  {
                    v108 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v105 | 7) != 0x17)
                      v108 = v105 | 7;
                    v109 = v108 + 1;
                    v107 = operator new(v108 + 1);
                    *(_QWORD *)&v207 = v106;
                    *((_QWORD *)&v207 + 1) = v109 | 0x8000000000000000;
                    v206 = v107;
                  }
                  else
                  {
                    HIBYTE(v207) = v105;
                    v107 = &v206;
                    if (!v105)
                      goto LABEL_181;
                  }
                  memcpy(v107, v104, v106);
LABEL_181:
                  *((_BYTE *)v107 + v106) = 0;
                  v210[2] = v209;
                  *(_QWORD *)((char *)&v210[2] + 7) = *(_QWORD *)((char *)&v209 + 7);
                  v210[5] = v207;
                  *(_QWORD *)((char *)&v210[5] + 7) = *(_QWORD *)((char *)&v207 + 7);
                  v210[0] = off_24EC20780;
                  v210[1] = v208;
                  HIBYTE(v210[3]) = HIBYTE(v209);
                  v210[4] = v206;
                  HIBYTE(v210[6]) = HIBYTE(v207);
                  v110 = (char *)operator new(0x50uLL);
                  *((_QWORD *)v110 + 1) = 0;
                  *((_QWORD *)v110 + 2) = 0;
                  *((_QWORD *)v110 + 3) = off_24EC20780;
                  *(_QWORD *)v110 = &off_24EC20730;
                  *((_OWORD *)v110 + 2) = *(_OWORD *)&v210[1];
                  *((_QWORD *)v110 + 6) = v210[3];
                  memset(&v210[1], 0, 24);
                  *(_OWORD *)(v110 + 56) = *(_OWORD *)&v210[4];
                  *((_QWORD *)v110 + 9) = v210[6];
                  memset(&v210[4], 0, 24);
                  v111 = v205;
                  v204 = v110 + 24;
                  v205 = (std::__shared_weak_count *)v110;
                  if (!v111)
                    goto LABEL_185;
                  v112 = (unint64_t *)&v111->__shared_owners_;
                  do
                    v113 = __ldaxr(v112);
                  while (__stlxr(v113 - 1, v112));
                  if (v113)
                  {
LABEL_185:
                    if ((SHIBYTE(v210[6]) & 0x80000000) == 0)
                      goto LABEL_186;
LABEL_192:
                    operator delete((void *)v210[4]);
                    if (SHIBYTE(v210[3]) < 0)
                      goto LABEL_193;
LABEL_187:
                    *(_OWORD *)v199 = v202;
                    v115 = v203;
                    v114 = v204;
                    *(_QWORD *)&v199[16] = v203;
                    if (!v203)
                      goto LABEL_196;
LABEL_194:
                    v116 = (unint64_t *)&v115->__shared_owners_;
                    do
                      v117 = __ldxr(v116);
                    while (__stxr(v117 + 1, v116));
                    goto LABEL_196;
                  }
                  ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                  std::__shared_weak_count::__release_weak(v111);
                  if (SHIBYTE(v210[6]) < 0)
                    goto LABEL_192;
LABEL_186:
                  if ((SHIBYTE(v210[3]) & 0x80000000) == 0)
                    goto LABEL_187;
LABEL_193:
                  operator delete((void *)v210[1]);
                  *(_OWORD *)v199 = v202;
                  v115 = v203;
                  v114 = v204;
                  *(_QWORD *)&v199[16] = v203;
                  if (v203)
                    goto LABEL_194;
LABEL_196:
                  v118 = v205;
                  *(_QWORD *)&v200 = v114;
                  *((_QWORD *)&v200 + 1) = v205;
                  if (v205)
                  {
                    v119 = (unint64_t *)&v205->__shared_owners_;
                    do
                      v120 = __ldxr(v119);
                    while (__stxr(v120 + 1, v119));
                    v201 = v114;
                    do
                      v121 = __ldaxr(v119);
                    while (__stlxr(v121 - 1, v119));
                    if (!v121)
                    {
                      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                      std::__shared_weak_count::__release_weak(v118);
                    }
                  }
                  else
                  {
                    v201 = v114;
                  }
                  v122 = v203;
                  if (v203)
                  {
                    v123 = (unint64_t *)&v203->__shared_owners_;
                    do
                      v124 = __ldaxr(v123);
                    while (__stlxr(v124 - 1, v123));
                    if (!v124)
                    {
                      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                      std::__shared_weak_count::__release_weak(v122);
                    }
                  }
                  v125 = *(_QWORD *)v199;
                  if (v201[31] >= 0)
                    v126 = v201 + 8;
                  else
                    v126 = (char *)*((_QWORD *)v201 + 1);
                  if (v201[55] >= 0)
                    v127 = v201 + 32;
                  else
                    v127 = (char *)*((_QWORD *)v201 + 4);
                  v128 = _os_log_pack_fill();
                  *(_DWORD *)v128 = 136315394;
                  *(_QWORD *)(v128 + 4) = v126;
                  *(_WORD *)(v128 + 12) = 2080;
                  *(_QWORD *)(v128 + 14) = v127;
                  v129 = operator new();
                  v130 = *(unsigned __int8 *)(v62 + 39);
                  v131 = v175;
                  if ((v130 & 0x80u) != 0)
                  {
                    v131 = *(const char **)(v62 + 16);
                    v130 = *(_QWORD *)(v62 + 24);
                  }
                  *(_QWORD *)v129 = v125;
                  *(_OWORD *)(v129 + 8) = *(_OWORD *)&v199[8];
                  *(_QWORD *)&v199[8] = 0;
                  *(_QWORD *)&v199[16] = 0;
                  *(_OWORD *)(v129 + 24) = v200;
                  v200 = 0uLL;
                  *(_QWORD *)(v129 + 40) = v131;
                  *(_QWORD *)(v129 + 48) = v130;
                  *(_BYTE *)(v129 + 56) = 16;
                  *(_QWORD *)&v202 = 0;
                  v210[0] = v129;
                  (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v58 + 24) + 40))(*(_QWORD *)(v58 + 24), v210);
                  v132 = v210[0];
                  v210[0] = 0;
                  if (v132)
                  {
                    v133 = *(std::__shared_weak_count **)(v132 + 32);
                    if (v133)
                    {
                      v134 = (unint64_t *)&v133->__shared_owners_;
                      do
                        v135 = __ldaxr(v134);
                      while (__stlxr(v135 - 1, v134));
                      if (!v135)
                      {
                        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                        std::__shared_weak_count::__release_weak(v133);
                      }
                    }
                    v136 = *(std::__shared_weak_count **)(v132 + 16);
                    if (v136)
                    {
                      v137 = (unint64_t *)&v136->__shared_owners_;
                      do
                        v138 = __ldaxr(v137);
                      while (__stlxr(v138 - 1, v137));
                      if (!v138)
                      {
                        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                        std::__shared_weak_count::__release_weak(v136);
                      }
                    }
                    MEMORY[0x227684CE8](v132, 0x10F0C40B62ED6C6);
                    v139 = v202;
                    *(_QWORD *)&v202 = 0;
                    if (v139)
                    {
                      v140 = *(std::__shared_weak_count **)(v139 + 32);
                      if (v140)
                      {
                        v141 = (unint64_t *)&v140->__shared_owners_;
                        do
                          v142 = __ldaxr(v141);
                        while (__stlxr(v142 - 1, v141));
                        if (!v142)
                        {
                          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                          std::__shared_weak_count::__release_weak(v140);
                        }
                      }
                      v143 = *(std::__shared_weak_count **)(v139 + 16);
                      if (v143)
                      {
                        v144 = (unint64_t *)&v143->__shared_owners_;
                        do
                          v145 = __ldaxr(v144);
                        while (__stlxr(v145 - 1, v144));
                        if (!v145)
                        {
                          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                          std::__shared_weak_count::__release_weak(v143);
                        }
                      }
                      MEMORY[0x227684CE8](v139, 0x10F0C40B62ED6C6);
                    }
                  }
                  v146 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
                  if (*((_QWORD *)&v200 + 1))
                  {
                    v147 = (unint64_t *)(*((_QWORD *)&v200 + 1) + 8);
                    do
                      v148 = __ldaxr(v147);
                    while (__stlxr(v148 - 1, v147));
                    if (!v148)
                    {
                      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                      std::__shared_weak_count::__release_weak(v146);
                      v149 = *(std::__shared_weak_count **)&v199[16];
                      if (*(_QWORD *)&v199[16])
                        goto LABEL_245;
                      goto LABEL_248;
                    }
                  }
                  v149 = *(std::__shared_weak_count **)&v199[16];
                  if (!*(_QWORD *)&v199[16])
                    goto LABEL_248;
LABEL_245:
                  v150 = (unint64_t *)&v149->__shared_owners_;
                  do
                    v151 = __ldaxr(v150);
                  while (__stlxr(v151 - 1, v150));
                  if (v151)
                  {
LABEL_248:
                    if (v56)
                      goto LABEL_249;
LABEL_255:
                    sub_223182C08((uint64_t)key);
                    v154 = v184;
                    if (v184)
                    {
                      v155 = (unint64_t *)&v184->__shared_owners_;
                      do
                        v156 = __ldaxr(v155);
                      while (__stlxr(v156 - 1, v155));
                      if (!v156)
                      {
                        ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                        std::__shared_weak_count::__release_weak(v154);
                      }
                    }
LABEL_260:
                    if (v189 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                    goto LABEL_263;
                  }
                  ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                  std::__shared_weak_count::__release_weak(v149);
                  if (!v56)
                    goto LABEL_255;
LABEL_249:
                  if (*(char *)(v4 + 23) >= 0)
                    v152 = (const char *)v4;
                  else
                    v152 = *(const char **)v4;
                  v153 = &__p;
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v153 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  sub_22322C138((uint64_t)key, "SanitySummary censor - Key collision; colliding value was dropped. %s(%s)",
                    v152,
                    (const char *)v153);
                  sub_223182C08((uint64_t)key);
                  goto LABEL_255;
                }
              }
              memcpy(v94, v86, v93);
              goto LABEL_173;
            }
            os_log_type_enabled(v85, OS_LOG_TYPE_ERROR);
            LODWORD(v210[0]) = 136315394;
            *(_QWORD *)((char *)v210 + 4) = v86;
            WORD2(v210[1]) = 2080;
            *(_QWORD *)((char *)&v210[1] + 6) = p_p;
            v95 = (void *)_os_log_send_and_compose_impl();
            if (!v95)
              goto LABEL_248;
            free(v95);
            if (!v56)
              goto LABEL_255;
            goto LABEL_249;
          }
        }
        memmove(v76, v74, v75);
        goto LABEL_131;
      }
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
      if (!v39)
        goto LABEL_68;
LABEL_66:
      if (CFDictionaryContainsKey(theDict[0], v38))
      {
        LOBYTE(v39) = 0;
        goto LABEL_68;
      }
      v66 = v202;
      if (*((_QWORD *)&v202 + 1))
      {
        v67 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
        *(_OWORD *)v210 = v66;
        do
          v69 = __ldxr(v67);
        while (__stxr(v69 + 1, v67));
        do
          v70 = __ldaxr(v67);
        while (__stlxr(v70 - 1, v67));
        if (v70)
        {
          v72 = v210[0];
          v71 = (std::__shared_weak_count *)v210[1];
          if (!v210[1])
            goto LABEL_162;
        }
        else
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v66 + 1) + 16))(*((_QWORD *)&v66 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v66 + 1));
          v72 = v210[0];
          v71 = (std::__shared_weak_count *)v210[1];
          if (!v210[1])
            goto LABEL_162;
        }
        v96 = (unint64_t *)&v71->__shared_owners_;
        do
          v97 = __ldxr(v96);
        while (__stxr(v97 + 1, v96));
        do
          v98 = __ldaxr(v96);
        while (__stlxr(v98 - 1, v96));
        if (v98)
        {
LABEL_162:
          LOBYTE(v39) = v72 != 0;
          if (v72)
            goto LABEL_163;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
          LOBYTE(v39) = v72 != 0;
          if (v72)
LABEL_163:
            CFDictionaryAddValue(theDict[0], v38, (const void *)v210[0]);
        }
      }
      else
      {
        v210[0] = v202;
        v210[1] = 0;
        LOBYTE(v39) = (_QWORD)v202 != 0;
        if ((_QWORD)v202)
          goto LABEL_163;
      }
      v99 = (std::__shared_weak_count *)v210[1];
      if (v210[1])
      {
        v100 = (unint64_t *)(v210[1] + 8);
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
      goto LABEL_68;
    }
LABEL_263:
    if (++v194 >= v195)
      v193 = 0;
  }
  if (v194 != v190[1])
    goto LABEL_10;
LABEL_276:
  v158 = v192;
  if (v192)
  {
    v159 = (unint64_t *)&v192->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v161 = v191;
  if (v191)
  {
    v162 = (unint64_t *)&v191->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = v197;
  if (v197)
  {
    v165 = (unint64_t *)&v197->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = v196;
  if (v196)
  {
    v168 = (unint64_t *)&v196->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  sub_2231AEC20(a1, (uint64_t)theDict);
  v170 = (std::__shared_weak_count *)theDict[1];
  if (theDict[1])
  {
    v171 = (unint64_t *)((char *)theDict[1] + 8);
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
}

void sub_2235F8C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,int a46,__int16 a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,void *__p)
{
  char a68;
  char a69;

  if (a69 && a68 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a27);
  if (a45)
  {
    if (a44 < 0)
      operator delete(a39);
  }
  sub_2235F8FC8((uint64_t)&a47);
  sub_2235F8FC8((uint64_t)&a54);
  sub_223167354((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void sub_2235F8ED4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CAF78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAF78))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.sng");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CAF70);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CAF78);
  }
  *a1 = qword_2540CAF70;
}

void sub_2235F8F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CAF78);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CAF78);
  _Unwind_Resume(a1);
}

uint64_t sub_2235F8FC8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 32);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_2235F9074(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  std::mutex *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  std::mutex *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned __int8 v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  std::string::size_type size;
  std::string *v39;
  std::string::size_type v40;
  std::string::size_type v41;
  int v42;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  std::string v59;
  std::string __p;
  __int128 v61;
  __int128 v62;
  int v63;
  _QWORD v64[2];
  std::__shared_weak_count *v65;
  uint8_t v66[16];
  __int128 v67;
  int v68;
  std::string buf;
  char v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  mach_timebase_info info[2];
  __int128 v81;
  _DWORD v82[450];
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v61 = 0u;
  v62 = 0u;
  v63 = 728303492;
  kdebug_trace();
  sub_223C37324(a2);
  sub_223C41D68(a2);
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_8;
  v4 = sub_2241471F8();
  v5 = v4[2];
  if (!v5)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = v4[2];
  }
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (std::mutex *)(v6 + 32);
  std::mutex::lock((std::mutex *)(v6 + 32));
  v9 = *(_QWORD *)(v6 + 96);
  v8 = *(_QWORD *)(v6 + 104);
  std::mutex::unlock(v7);
  if (v9 == v8)
  {
LABEL_8:
    v11 = 0;
  }
  else
  {
    info[0] = (mach_timebase_info)"cv3d.recon.";
    info[1] = (mach_timebase_info)11;
    v81 = xmmword_24EC54BF8;
    sub_2231A9820((uint64_t)info, (uint64_t)v82, 0, 0, &__p);
    sub_2241471F8();
    v10 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
    v11 = 1;
    v12 = 1;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10) == 1)
    {
LABEL_16:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_21;
    }
  }
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_19;
  v13 = sub_2241471F8();
  v14 = v13[2];
  if (!v14)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v14 = v13[2];
  }
  v15 = *(_QWORD *)(v14 + 64);
  v16 = (std::mutex *)(v15 + 32);
  std::mutex::lock((std::mutex *)(v15 + 32));
  v18 = *(_QWORD *)(v15 + 96);
  v17 = *(_QWORD *)(v15 + 104);
  std::mutex::unlock(v16);
  if (v18 == v17)
  {
LABEL_19:
    if ((v11 & 1) == 0)
      goto LABEL_55;
    v12 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_17:
      if (!v12)
        goto LABEL_55;
      goto LABEL_25;
    }
LABEL_21:
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v12)
      goto LABEL_55;
    goto LABEL_25;
  }
  info[0] = (mach_timebase_info)"cv3d.recon.";
  info[1] = (mach_timebase_info)11;
  *(_QWORD *)&v81 = "api";
  *((_QWORD *)&v81 + 1) = 3;
  sub_2231A9820((uint64_t)info, (uint64_t)v82, 0, 0, &buf);
  sub_2241471F8();
  v19 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
  v12 = v20 == 1;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if (v11)
      goto LABEL_16;
  }
  else if (v11)
  {
    goto LABEL_16;
  }
  if (v20 != 1)
    goto LABEL_55;
LABEL_25:
  info[0] = (mach_timebase_info)"cv3d.recon.";
  info[1] = (mach_timebase_info)11;
  *(_QWORD *)&v81 = "api.FrameBundle";
  *((_QWORD *)&v81 + 1) = 15;
  sub_2231A9820((uint64_t)info, (uint64_t)v82, 0, 0, &v59);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v21 = sub_2241471F8();
    v22 = v21[2];
    if (!v22)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v22 = v21[2];
    }
    v23 = *(_QWORD *)(v22 + 64);
    v24 = (std::mutex *)(v23 + 32);
    std::mutex::lock((std::mutex *)(v23 + 32));
    v26 = *(_QWORD *)(v23 + 96);
    v25 = *(_QWORD *)(v23 + 104);
    std::mutex::unlock(v24);
    if (v26 != v25)
    {
      sub_2241471F8();
      v27 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27))
      {
        *(_OWORD *)v66 = 0u;
        v67 = 0u;
        v68 = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27))
        {
          v28 = *(double *)&qword_255788F20;
          v29 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27))
          {
            v30 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 56))(v27);
            v31 = mach_continuous_time();
            v32 = atomic_load((unsigned __int8 *)&qword_255795560);
            if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
            {
              mach_timebase_info(info);
              LODWORD(v55) = info[0].numer;
              LODWORD(v56) = info[0].denom;
              *(double *)&qword_255795558 = (double)v55 / (double)v56;
              __cxa_guard_release(&qword_255795560);
            }
            buf.__r_.__value_.__r.__words[0] = llround(*(double *)&qword_255795558 * (double)v31);
            buf.__r_.__value_.__l.__size_ = 2;
            buf.__r_.__value_.__s.__data_[16] = 0;
            v70 = 0;
            v71 = 0;
            v72 = 0;
            v73 = (uint64_t)(v28 * 1000000000.0);
            v74 = 2;
            v75 = 1;
            v76 = 0;
            v77 = 0;
            v78 = 0;
            v79 = 0;
            sub_223257000((uint64_t)info, a2);
            v33 = (std::__shared_weak_count_vtbl *)operator new();
            v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_24EC55B00;
            sub_2232568B4((uint64_t)&v33->~__shared_weak_count_0, (uint64_t)info);
            sub_2231AB0FC((uint64_t)&v33[46], (uint64_t)&buf);
            v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_24EC55A80;
            v64[0] = &off_24EC6A3B8;
            v64[1] = v33;
            v34 = (std::__shared_weak_count *)operator new();
            v34->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6A4B0;
            v34->__shared_owners_ = 0;
            v34->__shared_weak_owners_ = 0;
            v34[1].__vftable = v33;
            v65 = v34;
            sub_2232555B8((uint64_t)info);
            sub_2231AD66C((uint64_t)&buf);
            sub_2231AA5A4((uint64_t)v29, v30, (uint64_t)v64);
            v35 = v65;
            if (v65)
            {
              p_shared_owners = (unint64_t *)&v65->__shared_owners_;
              do
                v37 = __ldaxr(p_shared_owners);
              while (__stlxr(v37 - 1, p_shared_owners));
              if (!v37)
              {
                ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                std::__shared_weak_count::__release_weak(v35);
              }
            }
          }
        }
        kdebug_trace();
      }
    }
  }
  *(_OWORD *)&info[0].numer = 0u;
  v81 = 0u;
  v82[0] = 728325624;
  kdebug_trace();
  size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v59.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    v39 = &v59;
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v39 = (std::string *)v59.__r_.__value_.__r.__words[0];
    v40 = v39->__r_.__value_.__r.__words[0];
    v41 = v39->__r_.__value_.__l.__size_;
    v42 = v39->__r_.__value_.__s.__data_[16];
    if (v40 == 0x6365722E64337663 && v41 == 0x73746174532E6E6FLL && v42 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v59.__r_.__value_.__l.__data_);
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
      goto LABEL_76;
    goto LABEL_56;
  }
LABEL_55:
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    goto LABEL_76;
LABEL_56:
  if (!*(_BYTE *)(a2 + 1608))
    goto LABEL_76;
  sub_223C3828C(a2, 1, &v57);
  sub_2235F7A0C(info, (uint64_t)&v57);
  v45 = v58;
  if (v58)
  {
    v46 = (unint64_t *)&v58->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 138543362;
    *(mach_timebase_info *)((char *)buf.__r_.__value_.__r.__words + 4) = info[0];
    _os_log_impl(&dword_22314D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "FrameBundle: %{public}@", (uint8_t *)&buf, 0xCu);
  }
  sub_223C29670(a2 + 1408, 1, (uint64_t)&buf);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v66 = 138477827;
    *(_QWORD *)&v66[4] = buf.__r_.__value_.__r.__words[0];
    _os_log_debug_impl(&dword_22314D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "SlamAnchors: %{private}@", v66, 0xCu);
    v48 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
      goto LABEL_66;
  }
  else
  {
    v48 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
LABEL_66:
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
  }
  v51 = (std::__shared_weak_count *)info[1];
  if (info[1])
  {
    v52 = (unint64_t *)(*(_QWORD *)&info[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
LABEL_76:
  sub_223257000(a1, a2);
  *(_BYTE *)(a1 + 1824) = 1;
  return kdebug_trace();
}

void sub_2235F99B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, int a6, __int16 a7, char a8, char a9, void *a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v21 = va_arg(va1, _QWORD);
  __cxa_guard_abort(&qword_255795560);
  sub_2231874DC((uint64_t)va1);
  if (a9 < 0)
    operator delete(__p);
  sub_2231874DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2235F9B2C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  std::mutex *v11;
  int v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::unique_lock<std::mutex>::mutex_type *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  std::runtime_error *v25;
  std::exception_ptr v26;
  std::__shared_weak_count *v27;
  std::runtime_error v28;
  std::runtime_error_vtbl *v29;
  std::unique_lock<std::mutex> __lk;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4 || (v27 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *(_QWORD *)(a1 + 8)) == 0)
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 219, (uint64_t)"meshing_node", 12, (uint64_t)"Expected meshing node", 21, (void (*)(void **))sub_22457406C);
    abort();
  }
  v8 = *(_QWORD *)(v7 + 72);
  v9 = operator new();
  *(_QWORD *)(v9 + 8) = 0;
  v10 = (unint64_t *)(v9 + 8);
  *(_QWORD *)(v9 + 24) = 850045863;
  v11 = (std::mutex *)(v9 + 24);
  *(_QWORD *)(v9 + 16) = 0;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 1018212795;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 124) = 0u;
  *(_QWORD *)v9 = &off_24EC55428;
  v29 = (std::runtime_error_vtbl *)v9;
  std::mutex::lock((std::mutex *)(v9 + 24));
  v12 = *(_DWORD *)(v9 + 136);
  if ((v12 & 2) != 0)
    sub_2233236D4(1u);
  do
    v13 = __ldxr(v10);
  while (__stxr(v13 + 1, v10));
  *(_DWORD *)(v9 + 136) = v12 | 2;
  std::mutex::unlock(v11);
  __lk.__m_ = 0;
  *(_QWORD *)&__lk.__owns_ = 0;
  v14 = *(std::__shared_weak_count **)(v8 + 2632);
  if (!v14
    || (v15 = std::__shared_weak_count::lock(v14), (*(_QWORD *)&__lk.__owns_ = v15) == 0)
    || (v16 = v15, v17 = *(std::unique_lock<std::mutex>::mutex_type **)(v8 + 2624), (__lk.__m_ = v17) == 0))
  {
    std::runtime_error::runtime_error(&v28, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v28.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(exception, &v28);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v28.__vftable = v29;
  v29 = 0;
  (*(void (**)(std::unique_lock<std::mutex>::mutex_type *, uint64_t, std::runtime_error *))(v17->__m_.__sig + 56))(v17, a2, &v28);
  sub_2235C76AC((uint64_t *)&v28);
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  sub_2235C76AC((uint64_t *)&v29);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v9 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock(v11);
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v9, &__lk);
  v20 = *(_QWORD *)(v9 + 16);
  v28.__vftable = 0;
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&v28);
  if (v20)
  {
    std::exception_ptr::exception_ptr((std::exception_ptr *)&v28, (const std::exception_ptr *)(v9 + 16));
    v26.__ptr_ = &v28;
    std::rethrow_exception(v26);
    __break(1u);
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)(v9 + 144);
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(v9 + 160);
    *(_QWORD *)(v9 + 152) = 0;
    *(_QWORD *)(v9 + 160) = 0;
    *(_QWORD *)(v9 + 144) = 0;
    *(_WORD *)(a3 + 24) = *(_WORD *)(v9 + 168);
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    do
      v21 = __ldaxr(v10);
    while (__stlxr(v21 - 1, v10));
    if (!v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    v22 = (unint64_t *)&v27->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_2235F9F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::runtime_error a12, std::exception_ptr a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  unint64_t *v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  std::exception_ptr::~exception_ptr(&a13);
  std::runtime_error::~runtime_error(&a12);
  sub_223167354((uint64_t)&v21);
  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 - 1, v16));
  if (!v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
  sub_2235C76AC(&v20);
  sub_223167354((uint64_t)&v19);
  _Unwind_Resume(a1);
}

uint64_t sub_2235F9F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  char *v54;
  uint64_t **v55;
  uint64_t *v56;
  uint64_t v57;
  _QWORD *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  const void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  _QWORD *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  _DWORD *v138;
  uint64_t v139;
  unsigned __int8 v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void (*v187)(_QWORD *__return_ptr);
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204[2];
  __int128 v205[2];
  int v206;
  __int128 v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  uint64_t **v210;
  uint64_t **v211;
  _OWORD v212[2];
  _BYTE v213[24];
  __int128 v214;
  __int128 v215;
  uint64_t (**v216)();
  __int128 v217;
  uint64_t v218;
  uint64_t (**v219)();
  __int128 v220;
  uint64_t (**v221)();
  __int128 v222;
  __int128 v223;
  _QWORD v224[2];
  _QWORD v225[2];
  void *v226[2];
  __int128 v227;
  uint64_t v228;

  v228 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 16) = 0u;
  v201 = (uint64_t *)(a1 + 16);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v200 = (uint64_t *)(a1 + 40);
  v6 = a1 + 80;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_223223C50(a1 + 80);
  *(_BYTE *)(a1 + 1280) = 0;
  *(_QWORD *)(a1 + 1288) = 0;
  *(_QWORD *)(a1 + 1296) = sub_22361EFBC;
  *(_QWORD *)(a1 + 1304) = 850045863;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  sub_2235FBEE8(v6, a2);
  sub_224502FB8(a3, "FrameBundleDispatch ", 1, &v210);
  v7 = operator new();
  v8 = v210;
  v210 = 0;
  v211 = v8;
  *(_QWORD *)&v205[0] = v8;
  if (v8)
  {
    v9 = (std::__shared_weak_count *)operator new();
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2E800;
    v9->__shared_owners_ = 0;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  }
  else
  {
    v9 = 0;
  }
  v211 = 0;
  *(_QWORD *)v7 = &off_24EC54CA0;
  strcpy((char *)(v7 + 8), "FrameBundleDispatch ");
  *(_WORD *)(v7 + 29) = 0;
  *(_BYTE *)(v7 + 31) = 20;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = v8;
  *(_QWORD *)(v7 + 64) = v9;
  v205[0] = 0uLL;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = v224[0];
  v226[0] = (void *)v224[0];
  *(void **)((char *)v226 + 7) = *(void **)((char *)v224 + 7);
  *(_QWORD *)((char *)v225 + 7) = *(_QWORD *)((char *)v224 + 7);
  HIBYTE(v225[0]) = HIBYTE(v224[0]);
  v224[0] = 0;
  *(_QWORD *)((char *)v224 + 7) = 0;
  *(_QWORD *)&v223 = v13;
  *(_QWORD *)((char *)&v223 + 7) = *(_QWORD *)((char *)v225 + 7);
  *(_QWORD *)((char *)v225 + 7) = 0;
  v225[0] = 0;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v202 = a3;
  v203 = a2;
  v16 = operator new();
  *(_QWORD *)&v227 = v223;
  *(_QWORD *)((char *)&v227 + 7) = *(_QWORD *)((char *)&v223 + 7);
  *(_QWORD *)&v223 = 0;
  *(_QWORD *)((char *)&v223 + 7) = 0;
  *(_BYTE *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  *(_QWORD *)v16 = &off_24EC54D38;
  *(_QWORD *)(v16 + 16) = &unk_24EC54DB0;
  *(_QWORD *)(v16 + 24) = &unk_24EC54DF0;
  *(_QWORD *)(v16 + 63) = *(_QWORD *)((char *)&v227 + 7);
  v17 = v227;
  *(_QWORD *)(v16 + 48) = 0x6C656E6E616863;
  *(_QWORD *)(v16 + 56) = v17;
  *(_BYTE *)(v16 + 71) = 7;
  *(_QWORD *)&v227 = 0;
  *(_QWORD *)((char *)&v227 + 7) = 0;
  *(_QWORD *)(v16 + 72) = v8;
  *(_QWORD *)(v16 + 80) = v9;
  v18 = (_QWORD *)operator new();
  *v18 = &off_24EC54ED8;
  *(_QWORD *)(v16 + 136) = 0;
  *(_QWORD *)(v16 + 88) = v18;
  *(_QWORD *)(v16 + 96) = v16 + 96;
  *(_QWORD *)(v16 + 104) = v16 + 96;
  *(_QWORD *)(v16 + 112) = 0;
  *(_QWORD *)(v16 + 120) = v16 + 120;
  *(_QWORD *)(v16 + 128) = v16 + 120;
  *(_QWORD *)(v16 + 144) = 0;
  if (!*(_QWORD *)(v16 + 72)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v19 = (std::__shared_weak_count *)operator new();
  v19->__shared_owners_ = 0;
  v20 = (unint64_t *)&v19->__shared_owners_;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC553C0;
  v19->__shared_weak_owners_ = 0;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v21 = *(std::__shared_weak_count **)(v16 + 40);
  if (v21)
  {
    if (v21->__shared_owners_ != -1)
      goto LABEL_26;
    do
      v22 = __ldxr(v20);
    while (__stxr(v22 + 1, v20));
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v24 = __ldxr(p_shared_weak_owners);
    while (__stxr(v24 + 1, p_shared_weak_owners));
    *(_QWORD *)(v16 + 32) = v16;
    *(_QWORD *)(v16 + 40) = v19;
    std::__shared_weak_count::__release_weak(v21);
  }
  else
  {
    do
      v25 = __ldxr(v20);
    while (__stxr(v25 + 1, v20));
    v26 = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    *(_QWORD *)(v16 + 32) = v16;
    *(_QWORD *)(v16 + 40) = v19;
  }
  do
    v28 = __ldaxr(v20);
  while (__stlxr(v28 - 1, v20));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_26:
  *(_QWORD *)&v212[0] = &off_24EC54CD0;
  strcpy((char *)v212 + 8, "channel");
  *(void **)&v212[1] = v226[0];
  *(void **)((char *)&v212[1] + 7) = *(void **)((char *)v226 + 7);
  HIBYTE(v212[1]) = 7;
  memset(v226, 0, 15);
  *(_QWORD *)v213 = 0x7974706D45;
  *(_QWORD *)&v213[8] = v227;
  *(_QWORD *)&v213[15] = *(_QWORD *)((char *)&v227 + 7);
  v213[23] = 5;
  *(_QWORD *)&v227 = 0;
  *(_QWORD *)((char *)&v227 + 7) = 0;
  *(_QWORD *)&v214 = v8;
  *((_QWORD *)&v214 + 1) = v9;
  v29 = (unint64_t *)&v19->__shared_weak_owners_;
  *(_QWORD *)&v215 = v16;
  *((_QWORD *)&v215 + 1) = v19;
  do
    v30 = __ldxr(v29);
  while (__stxr(v30 + 1, v29));
  v216 = &off_24EC37B68;
  v31 = (_QWORD *)operator new();
  *v31 = &off_24EC38C40;
  v31[1] = v16;
  v31[2] = v19;
  *(_QWORD *)&v217 = v31;
  v33 = *((_QWORD *)&v215 + 1);
  v32 = v215;
  if (!*((_QWORD *)&v215 + 1))
  {
    *((_QWORD *)&v217 + 1) = v215;
    v218 = 0;
    if ((_QWORD)v215)
      v37 = v215 + 16;
    else
      v37 = 0;
    goto LABEL_45;
  }
  v34 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 16);
  do
    v35 = __ldxr(v34);
  while (__stxr(v35 + 1, v34));
  v36 = *((_QWORD *)&v215 + 1);
  *((_QWORD *)&v217 + 1) = v32;
  v218 = v33;
  if ((_QWORD)v215)
    v37 = v215 + 16;
  else
    v37 = 0;
  if (!*((_QWORD *)&v215 + 1))
  {
    v32 = v215;
LABEL_45:
    v40 = 0;
    v219 = &off_24EC54D00;
    v220 = v37;
    goto LABEL_46;
  }
  v38 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 16);
  do
    v39 = __ldxr(v38);
  while (__stxr(v39 + 1, v38));
  v40 = *((_QWORD *)&v215 + 1);
  v32 = v215;
  v219 = &off_24EC54D00;
  *(_QWORD *)&v220 = v37;
  *((_QWORD *)&v220 + 1) = v36;
  if (*((_QWORD *)&v215 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 16);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
LABEL_46:
  if (v32)
    v43 = v32 + 24;
  else
    v43 = 0;
  v221 = &off_24EC2E850;
  *(_QWORD *)&v222 = v43;
  *((_QWORD *)&v222 + 1) = v40;
  v44 = operator new();
  *(_QWORD *)v44 = &off_24EC54CD0;
  *(_OWORD *)(v44 + 8) = *(_OWORD *)((char *)v212 + 8);
  *(_QWORD *)(v44 + 24) = *((_QWORD *)&v212[1] + 1);
  memset((char *)v212 + 8, 0, 24);
  *(_OWORD *)(v44 + 32) = *(_OWORD *)v213;
  *(_QWORD *)(v44 + 48) = *(_QWORD *)&v213[16];
  memset(v213, 0, sizeof(v213));
  *(_OWORD *)(v44 + 56) = v214;
  v214 = 0uLL;
  *(_OWORD *)(v44 + 72) = v215;
  v215 = 0uLL;
  *(_QWORD *)(v44 + 88) = &off_24EC37B68;
  *(_OWORD *)(v44 + 96) = v217;
  v45 = v218;
  *((_QWORD *)&v217 + 1) = 0;
  v218 = 0;
  *(_QWORD *)(v44 + 112) = v45;
  *(_QWORD *)(v44 + 120) = &off_24EC54D00;
  *(_OWORD *)(v44 + 128) = v220;
  v220 = 0uLL;
  *(_QWORD *)&v217 = 0;
  *(_QWORD *)(v44 + 144) = &off_24EC2E850;
  *(_OWORD *)(v44 + 152) = v222;
  v222 = 0uLL;
  *(_QWORD *)(v7 + 72) = v44;
  sub_22361ECA0((uint64_t)v212);
  v46 = (char *)(v7 + 8);
  if (!v9)
    goto LABEL_265;
  v47 = (unint64_t *)&v9->__shared_owners_;
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (*(_QWORD *)(v7 + 56))
      goto LABEL_57;
  }
  else
  {
LABEL_265:
    if (*(_QWORD *)(v7 + 56))
      goto LABEL_57;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 374, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_57:
  if (*((_QWORD *)&v205[0] + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v205[0] + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v205[0] + 1) + 16))(*((_QWORD *)&v205[0] + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v205[0] + 1));
    }
  }
  v51 = (uint64_t)v211;
  if (v211)
  {
    v52 = *v211;
    *v211 = 0;
    if (v52)
      sub_22450297C(v51, v52);
    MEMORY[0x227684CE8](v51, 0x20C4093837F09);
  }
  if (*(char *)(v7 + 31) < 0)
  {
    *(_QWORD *)(v7 + 16) = 21;
    v46 = *(char **)(v7 + 8);
  }
  else
  {
    *(_BYTE *)(v7 + 31) = 21;
  }
  strcpy(v46, "Dispatch Frame Bundle");
  sub_2236226A8((void **)(v7 + 32), "Preprocess and dispatch frame bundle to meshing and or keyframing.", 0x42uLL);
  v53 = *(_QWORD *)(v7 + 72);
  if (*(char *)(v53 + 31) < 0)
  {
    *(_QWORD *)(v53 + 16) = 21;
    v54 = *(char **)(v53 + 8);
  }
  else
  {
    v54 = (char *)(v53 + 8);
    *(_BYTE *)(v53 + 31) = 21;
  }
  strcpy(v54, "Dispatch Frame Bundle");
  sub_2236226A8((void **)(v53 + 32), "Preprocess and dispatch frame bundle to meshing and or keyframing.", 0x42uLL);
  v55 = v210;
  if (v210)
  {
    v56 = *v210;
    *v210 = 0;
    if (v56)
      sub_22450297C((uint64_t)v55, v56);
    MEMORY[0x227684CE8](v55, 0x20C4093837F09);
  }
  v57 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v7;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = operator new(0x40uLL);
  v58[1] = 0;
  v58[2] = 0;
  *v58 = &off_24EC55470;
  v58[3] = &off_24EC54C48;
  *((_OWORD *)v58 + 2) = 0u;
  *((_OWORD *)v58 + 3) = 0u;
  v59 = *(std::__shared_weak_count **)(a1 + 8);
  *(_QWORD *)a1 = v58 + 3;
  *(_QWORD *)(a1 + 8) = v58;
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (*(_BYTE *)(v203 + 46))
    v62 = 4;
  else
    v62 = 3;
  sub_223227930((uint64_t *)v226);
  v223 = 0uLL;
  v63 = *(const void **)v203;
  if (*(_QWORD *)v203)
  {
    v64 = (std::__shared_weak_count *)operator new(0x20uLL);
    v64->__shared_owners_ = 0;
    v65 = (unint64_t *)&v64->__shared_owners_;
    v64->__shared_weak_owners_ = 0;
    v64->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25A90;
    v66 = sub_223228280(&v64[1].__vftable, v63, 1);
    do
      v67 = __ldxr(v65);
    while (__stxr(v67 + 1, v65));
    *(_QWORD *)&v223 = v66;
    *((_QWORD *)&v223 + 1) = v64;
    do
      v68 = __ldaxr(v65);
    while (__stlxr(v68 - 1, v65));
    if (v68)
    {
      if (!*(_BYTE *)(v203 + 560))
        goto LABEL_124;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
      if (!*(_BYTE *)(v203 + 560))
        goto LABEL_124;
    }
  }
  else
  {
    sub_2232279C4(v212);
    v223 = v212[0];
    if (!*(_BYTE *)(v203 + 560))
      goto LABEL_124;
  }
  memset(v212, 0, sizeof(v212));
  *(_DWORD *)v213 = 728303104;
  kdebug_trace();
  v69 = operator new();
  v70 = v69;
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v223 + 1);
  v205[0] = v223;
  if (*((_QWORD *)&v223 + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  sub_2235EF384(v69, v203, (uint64_t *)v205);
  if (v71)
  {
    v74 = (unint64_t *)&v71->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v208 = v70;
  v76 = (std::__shared_weak_count *)operator new();
  v76->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC554C0;
  v76->__shared_owners_ = 0;
  v76->__shared_weak_owners_ = 0;
  v76[1].__vftable = (std::__shared_weak_count_vtbl *)v70;
  v209 = v76;
  sub_223571AB4(&v208, v202, v62, (uint64_t *)v205);
  v77 = *(_QWORD *)&v205[0];
  if (*(_QWORD *)&v205[0])
  {
    v78 = (_QWORD *)operator new();
    *v78 = &off_24EC55510;
    v78[1] = 0;
    v78[2] = 0;
    v78[3] = v77;
    *(_QWORD *)&v205[0] = 0;
    v79 = *(std::__shared_weak_count **)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v77;
    *(_QWORD *)(a1 + 24) = v78;
    if (!v79)
      goto LABEL_113;
LABEL_109:
    v80 = (unint64_t *)&v79->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
    goto LABEL_113;
  }
  *(_QWORD *)&v205[0] = 0;
  v79 = *(std::__shared_weak_count **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (v79)
    goto LABEL_109;
LABEL_113:
  v82 = *(_QWORD *)&v205[0];
  *(_QWORD *)&v205[0] = 0;
  if (v82)
    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
  v83 = v209;
  if (v209)
  {
    v84 = (unint64_t *)&v209->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  sub_2235355D4(v202, v62, (uint64_t *)v205);
  v86 = *(_QWORD *)&v205[0];
  *(_QWORD *)&v205[0] = 0;
  v87 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v86;
  if (v87)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
    v88 = *(_QWORD *)&v205[0];
    *(_QWORD *)&v205[0] = 0;
    if (v88)
      (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  }
  kdebug_trace();
LABEL_124:
  if (!*(_BYTE *)(v203 + 880))
    goto LABEL_162;
  memset(v212, 0, sizeof(v212));
  *(_DWORD *)v213 = 728303112;
  kdebug_trace();
  v89 = atomic_load((unsigned __int8 *)&qword_255795348);
  if ((v89 & 1) == 0 && __cxa_guard_acquire(&qword_255795348))
  {
    __cxa_atexit((void (*)(void *))nullsub_599, &off_2540CA630, &dword_22314D000);
    __cxa_guard_release(&qword_255795348);
  }
  v90 = operator new();
  v91 = v90;
  v205[0] = v223;
  if (*((_QWORD *)&v223 + 1))
  {
    v92 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  v94 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)&v227 = *(_QWORD *)a1;
  *((_QWORD *)&v227 + 1) = v94;
  if (v94)
  {
    v95 = (unint64_t *)(v94 + 16);
    do
      v96 = __ldxr(v95);
    while (__stxr(v96 + 1, v95));
  }
  sub_2238476EC(v90, (uint64_t *)v205, v203, (uint64_t)&off_2540CA630, (uint64_t *)&v227);
  if (*((_QWORD *)&v227 + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v227 + 1));
  v97 = (std::__shared_weak_count *)*((_QWORD *)&v205[0] + 1);
  if (*((_QWORD *)&v205[0] + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&v205[0] + 1) + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = operator new();
  *(_QWORD *)&v205[0] = v91;
  sub_22350F360(v100, (uint64_t *)v205);
  if (*(_QWORD *)&v205[0])
    (*(void (**)(_QWORD))(**(_QWORD **)&v205[0] + 8))(*(_QWORD *)&v205[0]);
  *(_QWORD *)&v207 = v100;
  v101 = (_QWORD *)operator new();
  *v101 = &off_24EC55560;
  v101[1] = 0;
  v101[2] = 0;
  v101[3] = v100;
  *((_QWORD *)&v207 + 1) = v101;
  sub_2245030F0("Keyframe", 8uLL, v202, v62, v205);
  sub_223485628(v205, &v207, (uint64_t *)&v227);
  v102 = (std::__shared_weak_count *)*((_QWORD *)&v205[0] + 1);
  if (!*((_QWORD *)&v205[0] + 1))
    goto LABEL_145;
  v103 = (unint64_t *)(*((_QWORD *)&v205[0] + 1) + 8);
  do
    v104 = __ldaxr(v103);
  while (__stlxr(v104 - 1, v103));
  if (!v104)
  {
    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
    std::__shared_weak_count::__release_weak(v102);
    v105 = v227;
    if ((_QWORD)v227)
    {
LABEL_146:
      v106 = (_QWORD *)operator new();
      v107 = v227;
      *v106 = &off_24EC555B0;
      v106[1] = 0;
      v106[2] = 0;
      v106[3] = v107;
      *(_QWORD *)&v227 = 0;
      v108 = *(std::__shared_weak_count **)(a1 + 48);
      *(_QWORD *)(a1 + 40) = v105;
      *(_QWORD *)(a1 + 48) = v106;
      if (!v108)
        goto LABEL_154;
LABEL_150:
      v109 = (unint64_t *)&v108->__shared_owners_;
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
      goto LABEL_154;
    }
  }
  else
  {
LABEL_145:
    v105 = v227;
    if ((_QWORD)v227)
      goto LABEL_146;
  }
  *(_QWORD *)&v227 = 0;
  v108 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v105;
  *(_QWORD *)(a1 + 48) = 0;
  if (v108)
    goto LABEL_150;
LABEL_154:
  v111 = v227;
  *(_QWORD *)&v227 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  v112 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
  if (*((_QWORD *)&v207 + 1))
  {
    v113 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  kdebug_trace();
LABEL_162:
  v115 = *(_QWORD **)a1;
  v116 = *(_QWORD *)(a1 + 16);
  v117 = *(std::__shared_weak_count **)(a1 + 24);
  if (v117)
  {
    v118 = (unint64_t *)&v117->__shared_weak_owners_;
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
  }
  v121 = *(_QWORD *)(a1 + 40);
  v120 = *(std::__shared_weak_count **)(a1 + 48);
  if (v120)
  {
    v122 = (unint64_t *)&v120->__shared_weak_owners_;
    do
      v123 = __ldxr(v122);
    while (__stxr(v123 + 1, v122));
  }
  if (v117)
  {
    v124 = (unint64_t *)&v117->__shared_weak_owners_;
    do
      v125 = __ldxr(v124);
    while (__stxr(v125 + 1, v124));
  }
  v126 = (std::__shared_weak_count *)v115[2];
  v115[1] = v116;
  v115[2] = v117;
  if (v126)
    std::__shared_weak_count::__release_weak(v126);
  if (v120)
  {
    v127 = (unint64_t *)&v120->__shared_weak_owners_;
    do
      v128 = __ldxr(v127);
    while (__stxr(v128 + 1, v127));
  }
  v129 = (std::__shared_weak_count *)v115[4];
  v115[3] = v121;
  v115[4] = v120;
  if (v129)
    std::__shared_weak_count::__release_weak(v129);
  if (v120)
    std::__shared_weak_count::__release_weak(v120);
  if (v117)
    std::__shared_weak_count::__release_weak(v117);
  LOBYTE(v130) = *(_BYTE *)(v203 + 976);
  if ((_BYTE)v130)
  {
    v130 = *v200;
    if (*v200)
      LOBYTE(v130) = *v201 != 0;
  }
  *(_BYTE *)(a1 + 1280) = v130;
  if (*(_BYTE *)(v203 + 968))
  {
    memset(v205, 0, sizeof(v205));
    v206 = 728303120;
    kdebug_trace();
    v131 = operator new(0x1D8uLL);
    v131[1] = 0;
    v131[2] = 0;
    *v131 = &off_24EC55600;
    *(_QWORD *)&v212[0] = 0;
    sub_2234EFC5C((uint64_t)(v131 + 3), v203, (uint64_t *)v212);
    if (*(_QWORD *)&v212[0])
      (*(void (**)(_QWORD))(**(_QWORD **)&v212[0] + 8))(*(_QWORD *)&v212[0]);
    *(_QWORD *)&v227 = v131 + 3;
    *((_QWORD *)&v227 + 1) = v131;
    sub_2234F26AC((uint64_t *)&v227, v202, v62, (uint64_t)v212);
    v132 = operator new();
    *(_QWORD *)v132 = &off_24EC41908;
    *(_QWORD *)(v132 + 24) = *((_QWORD *)&v212[1] + 1);
    v133 = v215;
    *(_QWORD *)(v132 + 48) = *(_QWORD *)&v213[16];
    *(_OWORD *)(v132 + 8) = *(_OWORD *)((char *)v212 + 8);
    *((_QWORD *)&v212[0] + 1) = 0;
    *(_QWORD *)&v212[1] = 0;
    *(_OWORD *)(v132 + 32) = *(_OWORD *)v213;
    *((_QWORD *)&v212[1] + 1) = 0;
    memset(v213, 0, sizeof(v213));
    *(_OWORD *)(v132 + 56) = v214;
    v214 = 0uLL;
    *(_QWORD *)&v215 = 0;
    *(_QWORD *)(v132 + 72) = v133;
    v134 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v132;
    if (v134)
      (*(void (**)(uint64_t))(*(_QWORD *)v134 + 8))(v134);
    sub_22350F248((uint64_t)v212);
    v135 = (std::__shared_weak_count *)*((_QWORD *)&v227 + 1);
    if (*((_QWORD *)&v227 + 1))
    {
      v136 = (unint64_t *)(*((_QWORD *)&v227 + 1) + 8);
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 - 1, v136));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
        std::__shared_weak_count::__release_weak(v135);
      }
    }
    kdebug_trace();
  }
  v138 = (_DWORD *)operator new();
  *v138 = 12345;
  v139 = *(_QWORD *)(a1 + 1288);
  *(_QWORD *)(a1 + 1288) = v138;
  if (v139)
    (*(void (**)(uint64_t))(a1 + 1296))(v139);
  *(_QWORD *)(a1 + 1296) = sub_22361EFBC;
  v140 = atomic_load((unsigned __int8 *)&qword_255795348);
  if ((v140 & 1) == 0 && __cxa_guard_acquire(&qword_255795348))
  {
    __cxa_atexit((void (*)(void *))nullsub_599, &off_2540CA630, &dword_22314D000);
    __cxa_guard_release(&qword_255795348);
  }
  v141 = (std::__shared_weak_count *)operator new(0xFA0uLL);
  v141->__shared_owners_ = 0;
  v142 = (unint64_t *)&v141->__shared_owners_;
  v141->__shared_weak_owners_ = 0;
  v141->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC55650;
  *(_QWORD *)&v212[0] = 0;
  sub_22365B668();
  if (*(_QWORD *)&v212[0])
    (*(void (**)(_QWORD))(**(_QWORD **)&v212[0] + 8))(*(_QWORD *)&v212[0]);
  *(_QWORD *)&v205[0] = v141 + 1;
  *((_QWORD *)&v205[0] + 1) = v141;
  v204[0] = (uint64_t)&v141[1];
  v204[1] = (uint64_t)v141;
  do
    v143 = __ldxr(v142);
  while (__stxr(v143 + 1, v142));
  sub_22366232C(v204, v202, v212);
  v149 = *(_QWORD *)&v212[0];
  *(_QWORD *)&v212[0] = 0;
  v150 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v149;
  if (v150)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v150 + 8))(v150);
    *(_QWORD *)&v212[0] = 0;
  }
  do
    v151 = __ldaxr(v142);
  while (__stlxr(v151 - 1, v142));
  if (v151)
  {
    v152 = *v201;
    if (!*v201)
      goto LABEL_232;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
    std::__shared_weak_count::__release_weak(v141);
    v152 = *v201;
    if (!*v201)
      goto LABEL_232;
  }
  v153 = *(_QWORD *)(v152 + 72);
  v154 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72);
  *(_QWORD *)&v212[0] = &off_24EC2B380;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v154 + 96) + 16))((_QWORD *)v212 + 1);
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)(v153 + 120) + 16))(v153 + 120, v212);
  v155 = *((_QWORD *)&v212[0] + 1);
  v212[0] = (unint64_t)&off_24EC2B380;
  if (v155)
    (*(void (**)(uint64_t))(*(_QWORD *)v155 + 8))(v155);
  if (*(_BYTE *)(a1 + 1280))
  {
    if (*v200 && *(_QWORD *)(a1 + 56))
    {
      v156 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72);
      v157 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72);
      *(_QWORD *)&v212[0] = &off_24EC2B380;
      (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v157 + 96) + 16))((_QWORD *)v212 + 1);
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)(v156 + 2136) + 16))(v156 + 2136, v212);
    }
    else
    {
      v158 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72);
      v159 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72);
      *(_QWORD *)&v212[0] = &off_24EC2B380;
      (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v159 + 96) + 16))((_QWORD *)v212 + 1);
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)(v158 + 288) + 16))(v158 + 288, v212);
    }
    v160 = *((_QWORD *)&v212[0] + 1);
    v212[0] = (unint64_t)&off_24EC2B380;
    if (v160)
      (*(void (**)(uint64_t))(*(_QWORD *)v160 + 8))(v160);
  }
  v161 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72);
  v162 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72);
  *(_QWORD *)&v212[0] = &off_24EC2B3B8;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v162 + 264) + 16))((_QWORD *)v212 + 1);
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)(v161 + 1296) + 16))(v161 + 1296, v212);
  v163 = *((_QWORD *)&v212[0] + 1);
  v212[0] = (unint64_t)&off_24EC2B3B8;
  if (v163)
    (*(void (**)(uint64_t))(*(_QWORD *)v163 + 8))(v163);
  v164 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72);
  v165 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72);
  *(_QWORD *)&v212[0] = &off_24EC2B3F0;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v165 + 432) + 16))((_QWORD *)v212 + 1);
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)(v164 + 1464) + 16))(v164 + 1464, v212);
  v166 = *((_QWORD *)&v212[0] + 1);
  v212[0] = (unint64_t)&off_24EC2B3F0;
  if (v166)
    (*(void (**)(uint64_t))(*(_QWORD *)v166 + 8))(v166);
  v167 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72);
  v168 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72);
  *(_QWORD *)&v212[0] = &off_24EC2B428;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v168 + 600) + 16))((_QWORD *)v212 + 1);
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)(v167 + 1632) + 16))(v167 + 1632, v212);
  v169 = *((_QWORD *)&v212[0] + 1);
  v212[0] = (unint64_t)&off_24EC2B428;
  if (v169)
    (*(void (**)(uint64_t))(*(_QWORD *)v169 + 8))(v169);
  v170 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72);
  v171 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72);
  *(_QWORD *)&v212[0] = &off_24EC2B460;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v171 + 768) + 16))((_QWORD *)v212 + 1);
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)(v170 + 1800) + 16))(v170 + 1800, v212);
  v172 = *((_QWORD *)&v212[0] + 1);
  v212[0] = (unint64_t)&off_24EC2B460;
  if (v172)
    (*(void (**)(uint64_t))(*(_QWORD *)v172 + 8))(v172);
  v173 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72);
  v174 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72);
  *(_QWORD *)&v212[0] = &off_24EC2B498;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v174 + 936) + 16))((_QWORD *)v212 + 1);
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)(v173 + 2304) + 16))(v173 + 2304, v212);
  v175 = *((_QWORD *)&v212[0] + 1);
  v212[0] = (unint64_t)&off_24EC2B498;
  if (v175)
    (*(void (**)(uint64_t))(*(_QWORD *)v175 + 8))(v175);
  if (!*(_BYTE *)(a1 + 1280))
  {
    v176 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 72);
    v177 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72);
    *(_QWORD *)&v212[0] = &off_24EC37B68;
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v177 + 96) + 16))((_QWORD *)v212 + 1);
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)(v176 + 120) + 16))(v176 + 120, v212);
    v178 = *((_QWORD *)&v212[0] + 1);
    v212[0] = (unint64_t)&off_24EC37B68;
    if (v178)
      (*(void (**)(uint64_t))(*(_QWORD *)v178 + 8))(v178);
  }
LABEL_232:
  if (!*v200)
    goto LABEL_247;
  v179 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 72);
  v180 = *(_QWORD *)(*v200 + 72);
  *(_QWORD *)&v212[0] = &off_24EC37B68;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v180 + 96) + 16))((_QWORD *)v212 + 1);
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)(v179 + 120) + 16))(v179 + 120, v212);
  v181 = *((_QWORD *)&v212[0] + 1);
  v212[0] = (unint64_t)&off_24EC37B68;
  if (v181)
    (*(void (**)(uint64_t))(*(_QWORD *)v181 + 8))(v181);
  v182 = *(_QWORD *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 1280))
  {
LABEL_240:
    if (!v182)
      goto LABEL_247;
    v183 = *(_QWORD *)(a1 + 56);
    if (!v183)
      goto LABEL_247;
    goto LABEL_242;
  }
  v183 = *(_QWORD *)(a1 + 56);
  if (!v183)
  {
    v184 = *(_QWORD *)(v182 + 72);
    v185 = *(_QWORD *)(*v201 + 72);
    *(_QWORD *)&v212[0] = &off_24EC2B348;
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v185 + 264) + 16))((_QWORD *)v212 + 1);
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)(v184 + 120) + 16))(v184 + 120, v212);
    v186 = *((_QWORD *)&v212[0] + 1);
    v212[0] = (unint64_t)&off_24EC2B348;
    if (v186)
      (*(void (**)(uint64_t))(*(_QWORD *)v186 + 8))(v186);
    v182 = *v200;
    goto LABEL_240;
  }
LABEL_242:
  v187 = *(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(*(_QWORD *)(v183 + 72) + 96) + 16);
  v188 = *(_QWORD *)(v182 + 72);
  *(_QWORD *)&v212[0] = &off_24EC2B348;
  v187((_QWORD *)v212 + 1);
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)(v188 + 120) + 16))(v188 + 120, v212);
  v189 = *((_QWORD *)&v212[0] + 1);
  v212[0] = (unint64_t)&off_24EC2B348;
  if (v189)
    (*(void (**)(uint64_t))(*(_QWORD *)v189 + 8))(v189);
  if (*v201)
  {
    v190 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 72);
    v191 = *(_QWORD *)(*v201 + 72);
    *(_QWORD *)&v212[0] = &off_24EC2B310;
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v191 + 2112) + 16))((_QWORD *)v212 + 1);
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)(v190 + 120) + 16))(v190 + 120, v212);
    v192 = *((_QWORD *)&v212[0] + 1);
    v212[0] = (unint64_t)&off_24EC2B310;
    if (v192)
      (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
  }
LABEL_247:
  v193 = (std::__shared_weak_count *)*((_QWORD *)&v205[0] + 1);
  if (*((_QWORD *)&v205[0] + 1))
  {
    v194 = (unint64_t *)(*((_QWORD *)&v205[0] + 1) + 8);
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  v196 = (std::__shared_weak_count *)*((_QWORD *)&v223 + 1);
  if (*((_QWORD *)&v223 + 1))
  {
    v197 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  sub_22322797C(v226, v144, v145, v146, v147, v148);
  return a1;
}

void sub_2235FB750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _Unwind_Exception *exception_object, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v48 = a35;
  a35 = 0;
  if (v48)
    (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
  sub_223167354((uint64_t)&a19);
  sub_223167354(v47 - 192);
  sub_22322797C((void **)(v47 - 136), v49, v50, v51, v52, v53);
  std::mutex::~mutex((std::mutex *)(v46 + 1304));
  v54 = *(_QWORD *)(v46 + 1288);
  *(_QWORD *)(v46 + 1288) = 0;
  if (v54)
    (*(void (**)(void))(v46 + 1296))();
  sub_223223FC0(a9);
  v55 = *(_QWORD *)(v46 + 72);
  *(_QWORD *)(v46 + 72) = 0;
  if (v55)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
    v56 = *(_QWORD *)(v46 + 64);
    *(_QWORD *)(v46 + 64) = 0;
    if (!v56)
    {
LABEL_7:
      v57 = *(_QWORD *)(v46 + 56);
      *(_QWORD *)(v46 + 56) = 0;
      if (!v57)
        goto LABEL_8;
      goto LABEL_13;
    }
  }
  else
  {
    v56 = *(_QWORD *)(v46 + 64);
    *(_QWORD *)(v46 + 64) = 0;
    if (!v56)
      goto LABEL_7;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = *(_QWORD *)(v46 + 56);
  *(_QWORD *)(v46 + 56) = 0;
  if (!v57)
  {
LABEL_8:
    sub_223167354(a13);
    v58 = *(_QWORD *)(v46 + 32);
    *(_QWORD *)(v46 + 32) = 0;
    if (!v58)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_13:
  (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  sub_223167354(a13);
  v58 = *(_QWORD *)(v46 + 32);
  *(_QWORD *)(v46 + 32) = 0;
  if (!v58)
  {
LABEL_10:
    sub_223167354(a14);
    sub_223167354(v46);
    _Unwind_Resume(a1);
  }
LABEL_9:
  (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  goto LABEL_10;
}

uint64_t sub_2235FBEE8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  sub_22361F234(a1 + 48, (_QWORD *)(a2 + 48));
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 88);
  v7 = *(_OWORD *)(a2 + 104);
  v8 = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 134) = *(_QWORD *)(a2 + 134);
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v6;
  v9 = *(_OWORD *)(a2 + 144);
  v10 = *(_OWORD *)(a2 + 160);
  v11 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  v12 = *(_OWORD *)(a2 + 208);
  v13 = *(_OWORD *)(a2 + 224);
  v14 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v14;
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  memcpy((void *)(a1 + 280), (const void *)(a2 + 280), 0x2B9uLL);
  v15 = *(_QWORD *)(a2 + 984);
  v16 = *(_QWORD *)(a2 + 992);
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_QWORD *)(a1 + 984) = v15;
  v19 = *(std::__shared_weak_count **)(a1 + 992);
  *(_QWORD *)(a1 + 992) = v16;
  if (!v19)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    v22 = *(_QWORD *)(a2 + 1000);
    v23 = *(_QWORD *)(a2 + 1008);
    if (!v23)
      goto LABEL_11;
  }
  else
  {
LABEL_8:
    v22 = *(_QWORD *)(a2 + 1000);
    v23 = *(_QWORD *)(a2 + 1008);
    if (!v23)
      goto LABEL_11;
  }
  v24 = (unint64_t *)(v23 + 8);
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
LABEL_11:
  *(_QWORD *)(a1 + 1000) = v22;
  v26 = *(std::__shared_weak_count **)(a1 + 1008);
  *(_QWORD *)(a1 + 1008) = v23;
  if (!v26)
    goto LABEL_15;
  v27 = (unint64_t *)&v26->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    v29 = *(_QWORD *)(a2 + 1016);
    v30 = *(_QWORD *)(a2 + 1024);
    if (!v30)
      goto LABEL_18;
  }
  else
  {
LABEL_15:
    v29 = *(_QWORD *)(a2 + 1016);
    v30 = *(_QWORD *)(a2 + 1024);
    if (!v30)
      goto LABEL_18;
  }
  v31 = (unint64_t *)(v30 + 8);
  do
    v32 = __ldxr(v31);
  while (__stxr(v32 + 1, v31));
LABEL_18:
  *(_QWORD *)(a1 + 1016) = v29;
  v33 = *(std::__shared_weak_count **)(a1 + 1024);
  *(_QWORD *)(a1 + 1024) = v30;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  sub_22361EFD8((char *)(a1 + 1032), (char *)(a2 + 1032));
  v36 = *(_OWORD *)(a2 + 1181);
  *(_OWORD *)(a1 + 1168) = *(_OWORD *)(a2 + 1168);
  *(_OWORD *)(a1 + 1181) = v36;
  return a1;
}

void sub_2235FC104(std::__assoc_sub_state **a1@<X0>, const char *a2@<X1>, _BYTE *a3@<X8>)
{
  std::__assoc_sub_state *v6;
  int v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  size_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  const std::error_category *v16;
  void *__dst[2];
  unint64_t v18;
  __int128 v19;
  std::error_condition v20;

  v6 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 471, (uint64_t)"future.valid()", 14, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *a1;
  }
  *a1 = 0;
  sub_223622D08(v6);
  v8 = v7;
  if (!v6)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__assoc_sub_state *))v6->__on_zero_shared)(v6);
    if (v8)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    if (v7)
    {
LABEL_9:
      *a3 = 0;
      a3[16] = 0;
      return;
    }
  }
  v11 = strlen(a2);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = (void **)operator new(v14 + 1);
    __dst[1] = v12;
    v18 = v15 | 0x8000000000000000;
    __dst[0] = v13;
    goto LABEL_19;
  }
  HIBYTE(v18) = v11;
  v13 = __dst;
  if (v11)
LABEL_19:
    memmove(v13, a2, (size_t)v12);
  *((_BYTE *)v12 + (_QWORD)v13) = 0;
  v16 = std::generic_category();
  *(_QWORD *)&v20.__val_ = 22;
  v20.__cat_ = v16;
  sub_2245321DC(&v20, (uint64_t)__dst, (CFErrorRef *)&v19);
  *(_OWORD *)a3 = v19;
  v19 = 0uLL;
  a3[16] = 1;
  if (SHIBYTE(v18) < 0)
    operator delete(__dst[0]);
}

void sub_2235FC2B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,__int128 a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  char *v35;
  void *v38;
  char *v39;
  unsigned int v40;
  void *v41;
  char v42;
  void *v43[2];
  char v44;
  _OWORD v45[6];

  if (v44 < 0)
    operator delete(v43[0]);
  v38 = __cxa_begin_catch(a1);
  v40 = 89;
  if (a2 == 2)
  {
    v39 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v38 + 16))(v38);
    sub_223174DE4(v43, v39);
  }
  else
  {
    sub_223174DE4(v43, v35);
  }
  sub_223174DE4(&v41, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp");
  sub_2232B84FC(&v40, (uint64_t)v43, (CFErrorRef *)v45);
  *(_OWORD *)v34 = v45[0];
  v45[0] = 0uLL;
  *(_BYTE *)(v34 + 16) = 1;
  sub_223167354((uint64_t)v45);
  if (v42 < 0)
    operator delete(v41);
  if (v44 < 0)
    operator delete(v43[0]);
  __cxa_end_catch();
}

void sub_2235FC3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2235FC47C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  std::mutex *v9;
  int v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  void *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::runtime_error *exception;
  std::runtime_error *v35;
  std::exception_ptr v36;
  void *v37[2];
  void *v38[2];
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  void *__p[2];
  uint64_t v45;
  char v46;
  char v47;
  char v48;
  void *v49;
  std::exception_ptr v50;
  std::__shared_weak_count *v51;
  uint64_t v52[3];
  std::exception_ptr v53;
  std::unique_lock<std::mutex> __lk;

  if (!*(_QWORD *)(a2 + 40)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 509, (uint64_t)"HasKeyframingCapability()", 25, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223227930((uint64_t *)&v49);
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 72);
  sub_223257000((uint64_t)v37, a3);
  v7 = operator new();
  *(_QWORD *)(v7 + 8) = 0;
  v8 = (unint64_t *)(v7 + 8);
  *(_QWORD *)(v7 + 24) = 850045863;
  v9 = (std::mutex *)(v7 + 24);
  *(_QWORD *)(v7 + 16) = 0;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 1018212795;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 124) = 0u;
  *(_QWORD *)v7 = &off_24EC556A0;
  v52[0] = v7;
  std::mutex::lock((std::mutex *)(v7 + 24));
  v10 = *(_DWORD *)(v7 + 136);
  if ((v10 & 2) != 0)
    sub_2233236D4(1u);
  do
    v11 = __ldxr(v8);
  while (__stxr(v11 + 1, v8));
  *(_DWORD *)(v7 + 136) = v10 | 2;
  std::mutex::unlock(v9);
  v50.__ptr_ = 0;
  v51 = 0;
  v12 = *(std::__shared_weak_count **)(v6 + 280);
  if (!v12
    || (v13 = std::__shared_weak_count::lock(v12), (v51 = v13) == 0)
    || (v14 = v13, v15 = *(void **)(v6 + 272), (v50.__ptr_ = v15) == 0))
  {
    std::runtime_error::runtime_error((std::runtime_error *)&__lk, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v35 = std::runtime_error::runtime_error(exception, (const std::runtime_error *)&__lk);
    v35->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v35, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)v52[0];
  v52[0] = 0;
  (*(void (**)(void *, void **, std::unique_lock<std::mutex> *))(*(_QWORD *)v15 + 56))(v15, v37, &__lk);
  sub_22349580C((uint64_t *)&__lk);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  sub_22349580C(v52);
  sub_2232555B8((uint64_t)v37);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v7 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock(v9);
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v7, &__lk);
  v18 = *(_QWORD *)(v7 + 16);
  v50.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v50);
  if (!v18)
  {
    v24 = (_OWORD *)(v7 + 144);
    v48 = *(_BYTE *)(v7 + 264);
    if (v48)
    {
      *(_OWORD *)v37 = *v24;
      *(_QWORD *)v24 = 0;
      *(_QWORD *)(v7 + 152) = 0;
    }
    else
    {
      *(_OWORD *)v37 = *v24;
      LOBYTE(v38[0]) = 0;
      v47 = 0;
      if (*(_BYTE *)(v7 + 256))
      {
        v40 = 0;
        if (*(_BYTE *)(v7 + 184))
        {
          *(_OWORD *)v38 = *(_OWORD *)(v7 + 160);
          v39 = *(_QWORD *)(v7 + 176);
          *(_QWORD *)(v7 + 168) = 0;
          *(_QWORD *)(v7 + 176) = 0;
          *(_QWORD *)(v7 + 160) = 0;
          v40 = 1;
        }
        LOBYTE(v41) = 0;
        v46 = 0;
        if (*(_BYTE *)(v7 + 248))
        {
          v25 = *(_QWORD *)(v7 + 216);
          v42 = *(_QWORD *)(v7 + 208);
          v41 = *(_OWORD *)(v7 + 192);
          *(_QWORD *)(v7 + 200) = 0;
          *(_QWORD *)(v7 + 208) = 0;
          *(_QWORD *)(v7 + 192) = 0;
          v43 = v25;
          *(_OWORD *)__p = *(_OWORD *)(v7 + 224);
          v45 = *(_QWORD *)(v7 + 240);
          *(_QWORD *)(v7 + 224) = 0;
          *(_QWORD *)(v7 + 232) = 0;
          *(_QWORD *)(v7 + 240) = 0;
          v46 = 1;
        }
        v47 = 1;
      }
    }
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    do
      v26 = __ldaxr(v8);
    while (__stlxr(v26 - 1, v8));
    if (v26)
    {
      if (v48)
        goto LABEL_26;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      if (v48)
      {
LABEL_26:
        v28 = v37[0];
        v27 = v37[1];
        if (v37[1])
        {
          v29 = (unint64_t *)((char *)v37[1] + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        *(_QWORD *)a1 = v28;
        *(_QWORD *)(a1 + 8) = v27;
        *(_BYTE *)(a1 + 16) = 1;
        *(_BYTE *)(a1 + 24) = 1;
        if (v48)
          goto LABEL_30;
        goto LABEL_37;
      }
    }
    sub_224531A1C((CFErrorRef *)&__lk, (uint64_t)v37);
    *(std::unique_lock<std::mutex> *)a1 = __lk;
    *(_BYTE *)(a1 + 24) = 0;
    if (v48)
    {
LABEL_30:
      v31 = (std::__shared_weak_count *)v37[1];
      if (v37[1])
      {
        v32 = (unint64_t *)((char *)v37[1] + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
LABEL_46:
      sub_22322797C(&v49, v19, v20, v21, v22, v23);
      return;
    }
LABEL_37:
    if (v47)
    {
      if (v46)
      {
        if (SHIBYTE(v45) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v42) < 0)
          operator delete((void *)v41);
      }
      if (v40 && SHIBYTE(v39) < 0)
        operator delete(v38[0]);
    }
    goto LABEL_46;
  }
  v36.__ptr_ = std::exception_ptr::exception_ptr(&v53, (const std::exception_ptr *)(v7 + 16));
  std::rethrow_exception(v36);
  __break(1u);
}

void sub_2235FCB4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  unint64_t *v2;
  uint64_t v3;
  unint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v3 - 88));
  std::runtime_error::~runtime_error((std::runtime_error *)(v3 - 80));
  sub_223167354(v3 - 160);
  do
    v5 = __ldaxr(v2);
  while (__stlxr(v5 - 1, v2));
  if (!v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  sub_22349580C((uint64_t *)(v3 - 128));
  sub_2232555B8((uint64_t)&v11);
  sub_22322797C((void **)(v3 - 168), v6, v7, v8, v9, v10);
  _Unwind_Resume(a1);
}

void sub_2235FCBC8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::runtime_error_vtbl *v12;
  unint64_t *v13;
  int what;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::runtime_error *exception;
  std::runtime_error *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *v35;
  char v36;
  char v37;
  void *v38;
  char v39;
  void *__p;
  char v41;
  char v42;
  char v43;
  char v44;
  std::runtime_error_vtbl *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  std::runtime_error v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  std::runtime_error_vtbl *v51;

  if (!*(_BYTE *)(a2 + 1280)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 520, (uint64_t)"UseKeyframingForMeshing()", 25, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v6 = *a3;
  if (!*a3)
  {
    v46 = 0;
    v47 = 0;
    goto LABEL_11;
  }
  v7 = (std::__shared_weak_count *)a3[1];
  v46 = *a3;
  v47 = v7;
  if (!v7)
  {
LABEL_11:
    v10 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72);
    v33 = v6;
    v34 = 0;
    goto LABEL_12;
  }
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72);
  v33 = v6;
  v34 = v7;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
LABEL_12:
  v44 = 1;
  v12 = (std::runtime_error_vtbl *)operator new();
  v12->~runtime_error_0 = 0;
  v13 = (unint64_t *)&v12->~runtime_error_0;
  v12[1].~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))850045863;
  v12->what = 0;
  *(_OWORD *)&v12[1].~runtime_error_0 = 0u;
  *(_OWORD *)&v12[2].~runtime_error = 0u;
  *(_OWORD *)&v12[2].what = 0u;
  v12[3].~runtime_error_0 = 0;
  v12[3].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))1018212795;
  *(_OWORD *)&v12[4].~runtime_error = 0u;
  *(_OWORD *)&v12[4].what = 0u;
  *(_OWORD *)((char *)&v12[5].~runtime_error + 4) = 0u;
  v12->~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))&off_24EC556E8;
  v51 = v12;
  v45 = v12;
  std::mutex::lock((std::mutex *)&v12[1]);
  what = (int)v12[5].what;
  if ((what & 2) != 0)
    sub_2233236D4(1u);
  do
    v15 = __ldxr(v13);
  while (__stxr(v15 + 1, v13));
  LODWORD(v12[5].what) = what | 2;
  std::mutex::unlock((std::mutex *)&v12[1]);
  v49 = 0;
  v50 = 0;
  v16 = *(std::__shared_weak_count **)(v10 + 280);
  if (!v16
    || (v17 = std::__shared_weak_count::lock(v16), (v50 = v17) == 0)
    || (v18 = v17, v19 = *(_QWORD *)(v10 + 272), (v49 = v19) == 0))
  {
    std::runtime_error::runtime_error(&v48, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v48.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v32 = std::runtime_error::runtime_error(exception, &v48);
    v32->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v32, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v48.__vftable = v51;
  v51 = 0;
  (*(void (**)(uint64_t, uint64_t *, std::runtime_error *))(*(_QWORD *)v19 + 56))(v19, &v33, &v48);
  sub_22358838C((uint64_t *)&v48);
  v20 = (unint64_t *)&v18->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  sub_22358838C((uint64_t *)&v51);
  if (v44)
  {
    v22 = v34;
    if (v34)
    {
      v23 = (unint64_t *)&v34->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  else if (v43)
  {
    if (v42)
    {
      if (v41 < 0)
        operator delete(__p);
      if (v39 < 0)
        operator delete(v38);
    }
    if (v37 && v36 < 0)
      operator delete(v35);
  }
  sub_2235FD090(a1, (uint64_t *)&v45);
  v25 = (uint64_t)v45;
  if (v45)
  {
    v26 = (unint64_t *)&v45->~runtime_error_0;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
  }
  v28 = v47;
  if (v47)
  {
    v29 = (unint64_t *)&v47->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_2235FCF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  unint64_t v13;

  sub_22358838C((uint64_t *)(v10 - 104));
  sub_223167354(v10 - 80);
  v12 = v9 + 1;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
    (*(void (**)(unint64_t *))(*v9 + 16))(v9);
  sub_22358838C((uint64_t *)(v10 - 64));
  sub_2231A8D08((uint64_t)&a9);
  sub_223167354(v10 - 120);
  _Unwind_Resume(a1);
}

void sub_2235FCF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unint64_t *a25)
{
  uint64_t v25;
  unint64_t *v27;
  unint64_t v28;

  if (a25)
  {
    v27 = a25 + 1;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      (*(void (**)(unint64_t *))(*a25 + 16))(a25);
      sub_223167354(v25 - 120);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x2235FD080);
}

void sub_2235FCF80()
{
  std::mutex *v0;

  std::mutex::unlock(v0);
  JUMPOUT(0x2235FD070);
}

void sub_2235FCF90()
{
  JUMPOUT(0x2235FD070);
}

void sub_2235FCF98()
{
  JUMPOUT(0x2235FD078);
}

void sub_2235FCFA0(void *a1)
{
  uint64_t v1;
  std::__assoc_sub_state *v2;
  std::exception_ptr v3;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v2 = *(std::__assoc_sub_state **)(v1 - 64);
  if (v2)
  {
    std::exception_ptr::exception_ptr((std::exception_ptr *)(v1 - 56), (const std::exception_ptr *)(v1 - 88));
    v3.__ptr_ = (void *)(v1 - 56);
    std::__assoc_sub_state::set_exception(v2, v3);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 - 56));
    std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 - 88));
    std::runtime_error::~runtime_error((std::runtime_error *)(v1 - 104));
    if (!*(_QWORD *)(v1 - 72))
      JUMPOUT(0x2235FCDA4);
    JUMPOUT(0x2235FCD74);
  }
  sub_2233236D4(3u);
}

void sub_2235FD000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v25 - 88));
  std::runtime_error::~runtime_error((std::runtime_error *)(v25 - 104));
  sub_223167354(v25 - 80);
  if (!a25)
    JUMPOUT(0x2235FD070);
  JUMPOUT(0x2235FD048);
}

void sub_2235FD090(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  std::exception_ptr v43;
  std::exception_ptr v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int16 v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  unsigned __int8 v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  unsigned __int8 v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  __int128 v63;
  uint64_t v64;
  unsigned __int8 v65;
  __int128 v66;
  uint64_t v67;
  int v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  unsigned __int8 v83;
  uint64_t v84;
  __int128 v85;
  unsigned __int8 v86;
  char v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  __int16 v91;
  __int128 v92;
  uint64_t v93;
  char v94;
  char v95;
  __int128 v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  __int128 v106;
  uint64_t v107;
  char v108;
  __int128 v109;
  uint64_t v110;
  int v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  char v126;
  uint64_t v127;
  __int128 v128;
  char v129;
  char v130;
  char v131;
  std::exception_ptr v132;
  std::unique_lock<std::mutex> __lk;

  v4 = *a2;
  if (!*a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 460, (uint64_t)"future.valid()", 14, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_55;
    }
    v4 = *a2;
  }
  *a2 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v4 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v4, &__lk);
  v5 = *(_QWORD *)(v4 + 16);
  v44.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v44);
  if (v5)
  {
    v43.__ptr_ = std::exception_ptr::exception_ptr(&v132, (const std::exception_ptr *)(v4 + 16));
    std::rethrow_exception(v43);
    __break(1u);
LABEL_55:
    abort();
  }
  LOBYTE(v45) = 0;
  v87 = 0;
  if (*(_BYTE *)(v4 + 584))
  {
    v45 = *(_QWORD *)(v4 + 144);
    v46 = *(_OWORD *)(v4 + 152);
    v47 = *(_QWORD *)(v4 + 168);
    *(_QWORD *)(v4 + 152) = 0;
    *(_QWORD *)(v4 + 160) = 0;
    *(_QWORD *)(v4 + 168) = 0;
    v48 = *(_WORD *)(v4 + 176);
    LOBYTE(v49) = 0;
    v52 = 0;
    if (*(_BYTE *)(v4 + 216))
    {
      v49 = *(_OWORD *)(v4 + 184);
      v50 = *(_QWORD *)(v4 + 200);
      *(_QWORD *)(v4 + 192) = 0;
      *(_QWORD *)(v4 + 200) = 0;
      *(_QWORD *)(v4 + 184) = 0;
      v51 = *(_BYTE *)(v4 + 208);
      v52 = 1;
    }
    LOBYTE(v53) = 0;
    v56 = 0;
    if (*(_BYTE *)(v4 + 256))
    {
      v53 = *(_OWORD *)(v4 + 224);
      v54 = *(_QWORD *)(v4 + 240);
      *(_QWORD *)(v4 + 232) = 0;
      *(_QWORD *)(v4 + 240) = 0;
      *(_QWORD *)(v4 + 224) = 0;
      v55 = *(_BYTE *)(v4 + 248);
      v56 = 1;
    }
    LOBYTE(v57) = 0;
    v65 = 0;
    if (*(_BYTE *)(v4 + 328))
    {
      v57 = *(_QWORD *)(v4 + 264);
      v58 = *(_DWORD *)(v4 + 272);
      v6 = *(_DWORD *)(v4 + 284);
      v59 = *(_QWORD *)(v4 + 276);
      v61 = *(_QWORD *)(v4 + 288);
      v7 = *(_DWORD *)(v4 + 296);
      v60 = v6;
      v62 = v7;
      v63 = *(_OWORD *)(v4 + 304);
      v64 = *(_QWORD *)(v4 + 320);
      *(_QWORD *)(v4 + 312) = 0;
      *(_QWORD *)(v4 + 320) = 0;
      *(_QWORD *)(v4 + 304) = 0;
      v65 = 1;
    }
    LOBYTE(v66) = 0;
    v74 = 0;
    if (*(_BYTE *)(v4 + 424))
    {
      v66 = *(_OWORD *)(v4 + 336);
      v67 = *(_QWORD *)(v4 + 352);
      *(_QWORD *)(v4 + 344) = 0;
      *(_QWORD *)(v4 + 352) = 0;
      *(_QWORD *)(v4 + 336) = 0;
      v68 = *(_DWORD *)(v4 + 360);
      v69 = *(_OWORD *)(v4 + 368);
      v70 = *(_QWORD *)(v4 + 384);
      *(_QWORD *)(v4 + 368) = 0;
      *(_QWORD *)(v4 + 376) = 0;
      v71 = *(_OWORD *)(v4 + 392);
      *(_QWORD *)(v4 + 384) = 0;
      *(_QWORD *)(v4 + 392) = 0;
      v8 = *(_QWORD *)(v4 + 408);
      v9 = *(_QWORD *)(v4 + 416);
      *(_QWORD *)(v4 + 400) = 0;
      *(_QWORD *)(v4 + 408) = 0;
      v72 = v8;
      v73 = v9;
      v74 = 1;
    }
    LOBYTE(v75) = 0;
    v83 = 0;
    if (*(_BYTE *)(v4 + 544))
    {
      v75 = *(_OWORD *)(v4 + 432);
      v10 = *(_QWORD *)(v4 + 448);
      v11 = *(_QWORD *)(v4 + 456);
      *(_QWORD *)(v4 + 448) = 0;
      *(_QWORD *)(v4 + 456) = 0;
      *(_QWORD *)(v4 + 432) = 0;
      *(_QWORD *)(v4 + 440) = 0;
      v76 = v10;
      v77 = v11;
      v12 = *(_OWORD *)(v4 + 464);
      v13 = *(_OWORD *)(v4 + 480);
      *(_QWORD *)(v4 + 464) = 0;
      *(_QWORD *)(v4 + 472) = 0;
      v14 = *(_OWORD *)(v4 + 528);
      v81 = *(_OWORD *)(v4 + 512);
      v82 = v14;
      v15 = *(_OWORD *)(v4 + 496);
      v79 = v13;
      v80 = v15;
      v78 = v12;
      v83 = 1;
    }
    LOBYTE(v84) = 0;
    v86 = 0;
    if (*(_BYTE *)(v4 + 576))
    {
      v84 = *(_QWORD *)(v4 + 552);
      v85 = *(_OWORD *)(v4 + 560);
      *(_QWORD *)(v4 + 560) = 0;
      *(_QWORD *)(v4 + 568) = 0;
      *(_QWORD *)(v4 + 552) = 0;
      v86 = 1;
    }
    v87 = 1;
  }
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  v16 = (unint64_t *)(v4 + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    if (v87)
      goto LABEL_25;
LABEL_53:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 440) = 0;
    *(_BYTE *)(a1 + 448) = 1;
    *(_BYTE *)(a1 + 456) = 1;
    return;
  }
  if (!v87)
    goto LABEL_53;
LABEL_25:
  v18 = v45;
  v19 = v46;
  v88 = v45;
  v20 = *((_QWORD *)&v46 + 1);
  v89 = v46;
  v21 = v47;
  v90 = v47;
  v47 = 0;
  v46 = 0uLL;
  v22 = v48;
  v91 = v48;
  LOBYTE(v92) = 0;
  v95 = 0;
  v23 = v52;
  if (v52)
  {
    v92 = v49;
    v93 = v50;
    v50 = 0;
    v49 = 0uLL;
    v94 = v51;
    v95 = 1;
  }
  LOBYTE(v96) = 0;
  v99 = 0;
  v24 = v56;
  if (v56)
  {
    v96 = v53;
    v97 = v54;
    v54 = 0;
    v53 = 0uLL;
    v98 = v55;
    v99 = 1;
  }
  LOBYTE(v100) = 0;
  v108 = 0;
  v25 = v65;
  if (v65)
  {
    v100 = v57;
    v101 = v58;
    v102 = v59;
    v104 = v61;
    v103 = v60;
    v105 = v62;
    v106 = v63;
    v107 = v64;
    v64 = 0;
    v63 = 0uLL;
    v108 = 1;
  }
  LOBYTE(v109) = 0;
  v117 = 0;
  v26 = v74;
  if (v74)
  {
    v109 = v66;
    v110 = v67;
    v67 = 0;
    v66 = 0uLL;
    v111 = v68;
    v112 = v69;
    v113 = v70;
    v69 = 0uLL;
    v114 = v71;
    v70 = 0;
    v71 = 0uLL;
    v27 = v72;
    v72 = 0;
    v115 = v27;
    v116 = v73;
    v117 = 1;
  }
  LOBYTE(v118) = 0;
  v126 = 0;
  v28 = v83;
  if (v83)
  {
    v118 = v75;
    v29 = v76;
    v30 = v77;
    v76 = 0;
    v77 = 0;
    v75 = 0uLL;
    v119 = v29;
    v120 = v30;
    v31 = v78;
    v78 = 0uLL;
    v124 = v81;
    v125 = v82;
    v122 = v79;
    v123 = v80;
    v121 = v31;
    v126 = 1;
  }
  LOBYTE(v127) = 0;
  v129 = 0;
  v32 = v86;
  if (v86)
  {
    v127 = v84;
    v128 = v85;
    v85 = 0uLL;
    v84 = 0;
    v129 = 1;
  }
  v130 = 1;
  v131 = 1;
  *(_BYTE *)(a1 + 448) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v19;
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 24) = v21;
  v90 = 0;
  v89 = 0uLL;
  *(_WORD *)(a1 + 32) = v22;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (v23)
  {
    *(_OWORD *)(a1 + 40) = v92;
    *(_QWORD *)(a1 + 56) = v93;
    v93 = 0;
    v92 = 0uLL;
    *(_BYTE *)(a1 + 64) = v94;
    *(_BYTE *)(a1 + 72) = 1;
  }
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (v24)
  {
    *(_OWORD *)(a1 + 80) = v96;
    *(_QWORD *)(a1 + 96) = v97;
    v97 = 0;
    v96 = 0uLL;
    *(_BYTE *)(a1 + 104) = v98;
    *(_BYTE *)(a1 + 112) = 1;
  }
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  if (v25)
  {
    *(_QWORD *)(a1 + 120) = v100;
    *(_DWORD *)(a1 + 128) = v101;
    *(_QWORD *)(a1 + 132) = v102;
    v33 = v105;
    *(_DWORD *)(a1 + 140) = v103;
    *(_QWORD *)(a1 + 144) = v104;
    *(_DWORD *)(a1 + 152) = v33;
    *(_OWORD *)(a1 + 160) = v106;
    *(_QWORD *)(a1 + 176) = v107;
    v107 = 0;
    v106 = 0uLL;
    *(_BYTE *)(a1 + 184) = 1;
  }
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  if (v26)
  {
    *(_OWORD *)(a1 + 192) = v109;
    *(_QWORD *)(a1 + 208) = v110;
    v110 = 0;
    v109 = 0uLL;
    *(_DWORD *)(a1 + 216) = v111;
    *(_OWORD *)(a1 + 224) = v112;
    *(_QWORD *)(a1 + 240) = v113;
    v112 = 0uLL;
    *(_OWORD *)(a1 + 248) = v114;
    v113 = 0;
    v114 = 0uLL;
    v34 = v115;
    v35 = v116;
    v115 = 0;
    *(_QWORD *)(a1 + 264) = v34;
    *(_QWORD *)(a1 + 272) = v35;
    *(_BYTE *)(a1 + 280) = 1;
  }
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  if (v28)
  {
    v36 = v118;
    v37 = v119;
    v38 = v120;
    v119 = 0;
    v118 = 0uLL;
    *(_OWORD *)(a1 + 288) = v36;
    *(_QWORD *)(a1 + 304) = v37;
    *(_QWORD *)(a1 + 312) = v38;
    v39 = v121;
    v40 = v122;
    v120 = 0;
    v121 = 0uLL;
    v41 = v125;
    *(_OWORD *)(a1 + 368) = v124;
    *(_OWORD *)(a1 + 384) = v41;
    v42 = v123;
    *(_OWORD *)(a1 + 336) = v40;
    *(_OWORD *)(a1 + 352) = v42;
    *(_OWORD *)(a1 + 320) = v39;
    *(_BYTE *)(a1 + 400) = 1;
  }
  *(_BYTE *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  if (v32)
  {
    *(_QWORD *)(a1 + 408) = v127;
    *(_OWORD *)(a1 + 416) = v128;
    v128 = 0uLL;
    v127 = 0;
    *(_BYTE *)(a1 + 432) = 1;
  }
  *(_BYTE *)(a1 + 440) = 1;
  *(_BYTE *)(a1 + 448) = 1;
  *(_BYTE *)(a1 + 456) = 1;
  sub_2232954B0((uint64_t)&v88);
  if (v87)
    sub_2232954B0((uint64_t)&v45);
}

void sub_2235FD7BC(void *a1, int a2)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  char *v11;
  __int128 v12;
  unsigned int v13;
  __int128 v14;
  _QWORD v15[2];
  void *v16;
  char v17;
  _QWORD v18[2];
  char v19;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v5 - 72));
  if (*(_BYTE *)(v5 - 56))
    std::mutex::unlock(*(std::mutex **)(v4 + 464));
  if (v3)
  {
    v8 = v3 + 1;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
      (*(void (**)(unint64_t *))(*v3 + 16))(v3);
  }
  v10 = __cxa_begin_catch(a1);
  v13 = 89;
  if (a2 == 2)
  {
    v11 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v10 + 16))(v10);
    sub_223174DE4(v18, v11);
  }
  else
  {
    sub_223174DE4(v18, "Unknown error occurred in meshing.");
  }
  sub_223174DE4(&v16, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp");
  sub_2232B84FC(&v13, (uint64_t)v18, (CFErrorRef *)&v14);
  v12 = v14;
  v14 = 0uLL;
  *(_OWORD *)v2 = v12;
  v15[0] = 0;
  v15[1] = 0;
  *(_BYTE *)(v2 + 456) = 0;
  sub_223167354((uint64_t)v15);
  sub_223167354((uint64_t)&v14);
  if (v17 < 0)
    operator delete(v16);
  if (v19 < 0)
    operator delete(*(void **)v4);
  __cxa_end_catch();
}

void sub_2235FD918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void **v20;

  if (a20 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(*v20);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_2235FD998(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::runtime_error_vtbl *v10;
  unint64_t *v11;
  int what;
  unint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t result;
  unint64_t *v24;
  unint64_t v25;
  std::runtime_error *exception;
  std::runtime_error *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  void *v30;
  char v31;
  char v32;
  void *v33;
  char v34;
  void *__p;
  char v36;
  char v37;
  char v38;
  char v39;
  std::runtime_error_vtbl *v40;
  std::runtime_error v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  std::runtime_error_vtbl *v44;

  if (!*(_BYTE *)(a2 + 1280)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 535, (uint64_t)"UseKeyframingForMeshing()", 25, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72);
  v7 = (std::__shared_weak_count *)a3[1];
  v28 = *a3;
  v29 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v39 = 1;
  v10 = (std::runtime_error_vtbl *)operator new();
  v10->~runtime_error_0 = 0;
  v11 = (unint64_t *)&v10->~runtime_error_0;
  v10[1].~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))850045863;
  v10->what = 0;
  *(_OWORD *)&v10[1].~runtime_error_0 = 0u;
  *(_OWORD *)&v10[2].~runtime_error = 0u;
  *(_OWORD *)&v10[2].what = 0u;
  v10[3].~runtime_error_0 = 0;
  v10[3].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))1018212795;
  *(_OWORD *)&v10[4].~runtime_error = 0u;
  *(_OWORD *)&v10[4].what = 0u;
  *(_OWORD *)((char *)&v10[5].~runtime_error + 4) = 0u;
  v10->~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))&off_24EC556E8;
  v44 = v10;
  v40 = v10;
  std::mutex::lock((std::mutex *)&v10[1]);
  what = (int)v10[5].what;
  if ((what & 2) != 0)
    sub_2233236D4(1u);
  do
    v13 = __ldxr(v11);
  while (__stxr(v13 + 1, v11));
  LODWORD(v10[5].what) = what | 2;
  std::mutex::unlock((std::mutex *)&v10[1]);
  v42 = 0;
  v43 = 0;
  v14 = *(std::__shared_weak_count **)(v6 + 2128);
  if (!v14
    || (v15 = std::__shared_weak_count::lock(v14), (v43 = v15) == 0)
    || (v16 = v15, v17 = *(_QWORD *)(v6 + 2120), (v42 = v17) == 0))
  {
    std::runtime_error::runtime_error(&v41, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v41.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v27 = std::runtime_error::runtime_error(exception, &v41);
    v27->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v27, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v41.__vftable = v44;
  v44 = 0;
  (*(void (**)(uint64_t, uint64_t *, std::runtime_error *))(*(_QWORD *)v17 + 56))(v17, &v28, &v41);
  sub_22358838C((uint64_t *)&v41);
  v18 = (unint64_t *)&v16->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  sub_22358838C((uint64_t *)&v44);
  if (v39)
  {
    v20 = v29;
    if (v29)
    {
      v21 = (unint64_t *)&v29->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  else if (v38)
  {
    if (v37)
    {
      if (v36 < 0)
        operator delete(__p);
      if (v34 < 0)
        operator delete(v33);
    }
    if (v32 && v31 < 0)
      operator delete(v30);
  }
  sub_2235FD090(a1, (uint64_t *)&v40);
  result = (uint64_t)v40;
  if (v40)
  {
    v24 = (unint64_t *)&v40->~runtime_error_0;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_2235FDC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  unint64_t v13;

  sub_22358838C((uint64_t *)(v10 - 104));
  sub_223167354(v10 - 80);
  v12 = v9 + 1;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
    (*(void (**)(unint64_t *))(*v9 + 16))(v9);
  sub_22358838C((uint64_t *)(v10 - 64));
  sub_2231A8D08((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235FDCA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(unint64_t **)(v1 - 112);
  if (v3)
  {
    v4 = v3 + 1;
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
      (*(void (**)(unint64_t *))(*v3 + 16))(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2235FDCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;
  uint64_t v10;

  std::mutex::unlock(v9);
  sub_22358838C((uint64_t *)(v10 - 64));
  sub_2231A8D08((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235FDD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_22358838C((uint64_t *)(v9 - 64));
  sub_2231A8D08((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235FDD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231A8D08((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2235FDD34(void *a1)
{
  uint64_t v1;
  std::__assoc_sub_state *v2;
  std::exception_ptr v3;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v2 = *(std::__assoc_sub_state **)(v1 - 64);
  if (v2)
  {
    std::exception_ptr::exception_ptr((std::exception_ptr *)(v1 - 56), (const std::exception_ptr *)(v1 - 88));
    v3.__ptr_ = (void *)(v1 - 56);
    std::__assoc_sub_state::set_exception(v2, v3);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 - 56));
    std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 - 88));
    std::runtime_error::~runtime_error((std::runtime_error *)(v1 - 104));
    if (!*(_QWORD *)(v1 - 72))
      JUMPOUT(0x2235FDB44);
    JUMPOUT(0x2235FDB14);
  }
  sub_2233236D4(3u);
}

void sub_2235FDD94()
{
  uint64_t v0;
  uint64_t v1;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 88));
  std::runtime_error::~runtime_error((std::runtime_error *)(v0 - 104));
  v1 = *(_QWORD *)(v0 - 112);
  sub_223167354(v0 - 80);
  if (!v1)
    JUMPOUT(0x2235FDE04);
  JUMPOUT(0x2235FDDDCLL);
}

void sub_2235FDE1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  std::mutex *v13;
  int v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  void *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::runtime_error *exception;
  std::runtime_error *v37;
  std::exception_ptr v38;
  void *v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  void *v42[2];
  __int128 v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  void *__p[2];
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  std::exception_ptr v54;
  std::unique_lock<std::mutex> __lk;

  if (!*(_QWORD *)(a2 + 40) || (v6 = *(_QWORD *)(a2 + 56)) == 0)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 552, (uint64_t)"HasPlaneDetectionCapability()", 29, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *(_QWORD *)(a2 + 56);
  }
  v7 = *(_QWORD *)(v6 + 72);
  v8 = *(unint64_t **)(a3 + 8);
  v42[0] = *(void **)a3;
  v42[1] = v8;
  if (v8)
  {
    v9 = v8 + 1;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v53 = 1;
  v11 = operator new();
  *(_QWORD *)(v11 + 8) = 0;
  v12 = (unint64_t *)(v11 + 8);
  *(_QWORD *)(v11 + 24) = 850045863;
  v13 = (std::mutex *)(v11 + 24);
  *(_QWORD *)(v11 + 16) = 0;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_QWORD *)(v11 + 80) = 0;
  *(_QWORD *)(v11 + 88) = 1018212795;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 124) = 0u;
  *(_QWORD *)v11 = &off_24EC55730;
  *(_QWORD *)&v41 = v11;
  std::mutex::lock((std::mutex *)(v11 + 24));
  v14 = *(_DWORD *)(v11 + 136);
  if ((v14 & 2) != 0)
    sub_2233236D4(1u);
  do
    v15 = __ldxr(v12);
  while (__stxr(v15 + 1, v12));
  *(_DWORD *)(v11 + 136) = v14 | 2;
  std::mutex::unlock(v13);
  v39 = 0;
  v40 = 0;
  v16 = *(std::__shared_weak_count **)(v7 + 280);
  if (!v16
    || (v17 = std::__shared_weak_count::lock(v16), (v40 = v17) == 0)
    || (v18 = v17, v19 = *(void **)(v7 + 272), (v39 = v19) == 0))
  {
    std::runtime_error::runtime_error((std::runtime_error *)&__lk, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v37 = std::runtime_error::runtime_error(exception, (const std::runtime_error *)&__lk);
    v37->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v37, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)v41;
  *(_QWORD *)&v41 = 0;
  (*(void (**)(void *, void **, std::unique_lock<std::mutex> *))(*(_QWORD *)v19 + 56))(v19, v42, &__lk);
  sub_2234FA788((uint64_t *)&__lk);
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  sub_2234FA788((uint64_t *)&v41);
  if (v53)
  {
    v22 = (std::__shared_weak_count *)v42[1];
    if (v42[1])
    {
      v23 = (unint64_t *)((char *)v42[1] + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  else if (v52)
  {
    if (v51)
    {
      if (SHIBYTE(v50) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v47) < 0)
        operator delete((void *)v46);
    }
    if (v45 && SHIBYTE(v44) < 0)
      operator delete((void *)v43);
  }
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v11 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock(v13);
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v11, &__lk);
  v25 = *(_QWORD *)(v11 + 16);
  v39 = 0;
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&v39);
  if (v25)
  {
    v38.__ptr_ = std::exception_ptr::exception_ptr(&v54, (const std::exception_ptr *)(v11 + 16));
    std::rethrow_exception(v38);
    __break(1u);
    return;
  }
  v26 = (_OWORD *)(v11 + 144);
  v53 = *(_BYTE *)(v11 + 264);
  if (v53)
  {
    *(_OWORD *)v42 = *v26;
    *(_QWORD *)v26 = 0;
    *(_QWORD *)(v11 + 152) = 0;
  }
  else
  {
    *(_OWORD *)v42 = *v26;
    LOBYTE(v43) = 0;
    v52 = 0;
    if (*(_BYTE *)(v11 + 256))
    {
      v45 = 0;
      if (*(_BYTE *)(v11 + 184))
      {
        v43 = *(_OWORD *)(v11 + 160);
        v44 = *(_QWORD *)(v11 + 176);
        *(_QWORD *)(v11 + 168) = 0;
        *(_QWORD *)(v11 + 176) = 0;
        *(_QWORD *)(v11 + 160) = 0;
        v45 = 1;
      }
      LOBYTE(v46) = 0;
      v51 = 0;
      if (*(_BYTE *)(v11 + 248))
      {
        v27 = *(_QWORD *)(v11 + 216);
        v47 = *(_QWORD *)(v11 + 208);
        v46 = *(_OWORD *)(v11 + 192);
        *(_QWORD *)(v11 + 200) = 0;
        *(_QWORD *)(v11 + 208) = 0;
        *(_QWORD *)(v11 + 192) = 0;
        v48 = v27;
        *(_OWORD *)__p = *(_OWORD *)(v11 + 224);
        v50 = *(_QWORD *)(v11 + 240);
        *(_QWORD *)(v11 + 224) = 0;
        *(_QWORD *)(v11 + 232) = 0;
        *(_QWORD *)(v11 + 240) = 0;
        v51 = 1;
      }
      v52 = 1;
    }
  }
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  do
    v28 = __ldaxr(v12);
  while (__stlxr(v28 - 1, v12));
  if (v28)
  {
    if (v53)
      goto LABEL_46;
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    if (v53)
    {
LABEL_46:
      v30 = v42[0];
      v29 = v42[1];
      if (v42[1])
      {
        v31 = (unint64_t *)((char *)v42[1] + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      *(_QWORD *)a1 = v30;
      *(_QWORD *)(a1 + 8) = v29;
      *(_BYTE *)(a1 + 16) = 1;
      *(_BYTE *)(a1 + 24) = 1;
      if (v53)
        goto LABEL_50;
      goto LABEL_57;
    }
  }
  sub_224531A1C((CFErrorRef *)&__lk, (uint64_t)v42);
  *(std::unique_lock<std::mutex> *)a1 = __lk;
  *(_BYTE *)(a1 + 24) = 0;
  if (v53)
  {
LABEL_50:
    v33 = (std::__shared_weak_count *)v42[1];
    if (v42[1])
    {
      v34 = (unint64_t *)((char *)v42[1] + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    return;
  }
LABEL_57:
  if (v52)
  {
    if (v51)
    {
      if (SHIBYTE(v50) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v47) < 0)
        operator delete((void *)v46);
    }
    if (v45 && SHIBYTE(v44) < 0)
      operator delete((void *)v43);
  }
}

void sub_2235FE56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v17 - 88));
  std::runtime_error::~runtime_error((std::runtime_error *)(v17 - 80));
  sub_223167354((uint64_t)&v20);
  do
    v19 = __ldaxr(v16);
  while (__stlxr(v19 - 1, v16));
  if (!v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
  sub_2234FA788(&v21);
  sub_2231A8D08((uint64_t)&v22);
  _Unwind_Resume(a1);
}

void sub_2235FE5E0(unsigned int *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  CFArrayRef v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unsigned int Count;
  unsigned int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  std::mutex *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type size;
  std::string *p_info;
  std::string::size_type v26;
  std::string::size_type v27;
  int v28;
  __n128 *v31;
  std::string *v32;
  size_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  std::mutex *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  std::string::size_type v46;
  std::string *v47;
  std::string::size_type v48;
  std::string::size_type v49;
  int v50;
  __n128 *v53;
  std::string *v54;
  size_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  std::mutex *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  std::string::size_type v66;
  std::string *v67;
  std::string::size_type v68;
  std::string::size_type v69;
  int v70;
  __n128 *v73;
  std::string *v74;
  size_t v75;
  unsigned __int8 v76;
  uint64_t v77;
  unsigned __int8 v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  std::mutex *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  std::string::size_type v87;
  std::string *v88;
  std::string::size_type v89;
  std::string::size_type v90;
  int v91;
  __n128 *v94;
  std::string *v95;
  size_t v96;
  unsigned __int8 v97;
  int v98;
  unsigned __int8 v99;
  double v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  std::mutex *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  std::string::size_type v108;
  std::string *v109;
  std::string::size_type v110;
  std::string::size_type v111;
  int v112;
  __n128 *v115;
  std::string *v116;
  size_t v117;
  unsigned __int8 v118;
  float v119;
  unsigned __int8 v120;
  double v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  std::mutex *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  std::string::size_type v130;
  std::string *v131;
  std::string::size_type v132;
  std::string::size_type v133;
  int v134;
  __n128 *v137;
  std::string *v138;
  size_t v139;
  unsigned __int8 v140;
  float v141;
  unsigned __int8 v142;
  double v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  std::mutex *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  std::string::size_type v152;
  std::string *v153;
  std::string::size_type v154;
  std::string::size_type v155;
  int v156;
  __n128 *v159;
  std::string *v160;
  size_t v161;
  unsigned __int8 v162;
  float v163;
  unsigned __int8 v164;
  double v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  std::mutex *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  std::string::size_type v174;
  std::string *v175;
  std::string::size_type v176;
  std::string::size_type v177;
  int v178;
  __n128 *v181;
  std::string *v182;
  size_t v183;
  unsigned __int8 v184;
  float v185;
  unsigned __int8 v186;
  double v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  std::mutex *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  std::string::size_type v195;
  std::string *v196;
  std::string::size_type v197;
  std::string::size_type v198;
  int v199;
  __n128 *v202;
  std::string *v203;
  size_t v204;
  unsigned __int8 v205;
  float v206;
  unsigned __int8 v207;
  double v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  std::mutex *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  std::string::size_type v216;
  std::string *v217;
  std::string::size_type v218;
  std::string::size_type v219;
  int v220;
  __n128 *v223;
  std::string *v224;
  size_t v225;
  unsigned __int8 v226;
  uint64_t v227;
  unsigned __int8 v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t v231;
  std::mutex *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  std::string::size_type v236;
  std::string *v237;
  std::string::size_type v238;
  std::string::size_type v239;
  int v240;
  __n128 *v243;
  std::string *v244;
  size_t v245;
  unsigned __int8 v246;
  uint64_t v247;
  unsigned __int8 v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  std::mutex *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  std::string::size_type v257;
  std::string *v258;
  std::string::size_type v259;
  std::string::size_type v260;
  int v261;
  __n128 *v264;
  std::string *v265;
  size_t v266;
  unsigned __int8 v267;
  int v268;
  unsigned __int8 v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  std::string v297;
  uint64_t v298;
  std::__shared_weak_count *v299;
  void *__p;
  __int128 v301;
  float v302;
  char v303;
  float v304;
  char v305;
  float v306;
  char v307;
  unsigned int v308;
  char v309;
  unsigned int v310;
  char v311;
  int v312;
  char v313;
  unsigned __int8 v314;
  char v315;
  unsigned __int8 v316;
  char v317;
  unsigned __int8 v318;
  char v319;
  CFArrayRef theArray;
  std::__shared_weak_count *v321;
  char v322;
  unsigned int v323;
  char v324;
  __int128 v325;
  std::string info;
  __int128 v327;
  __int128 v328;
  int v329;
  uint64_t v330;

  v330 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v323) = 0;
  v324 = 0;
  __p = operator new(0x20uLL);
  v301 = xmmword_2245B9420;
  strcpy((char *)__p, "semanticMaterialPairTopK");
  sub_224527BAC((uint64_t)&__p, (CFStringRef *)&v327);
  sub_22361F9DC((void *)v327, a2, (uint64_t)&theArray);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v327 + 1);
  if (!*((_QWORD *)&v327 + 1))
    goto LABEL_5;
  v5 = (unint64_t *)(*((_QWORD *)&v327 + 1) + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
  if (v6)
  {
LABEL_5:
    if ((SHIBYTE(v301) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_9:
    operator delete(__p);
    if (!v322)
      goto LABEL_19;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (SHIBYTE(v301) < 0)
    goto LABEL_9;
LABEL_6:
  if (!v322)
    goto LABEL_19;
LABEL_10:
  v8 = theArray;
  v7 = v321;
  if (!v321)
    goto LABEL_15;
  p_shared_owners = (unint64_t *)&v321->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v8)
      goto LABEL_19;
  }
  else
  {
LABEL_15:
    if (!v8)
      goto LABEL_19;
  }
  if (!v322)
    sub_22324A974();
  Count = CFArrayGetCount(theArray);
  if (Count)
  {
    v13 = 214013 * *a1 + 2531011;
    *a1 = v13;
    v323 = (HIWORD(v13) & 0x7FFF) % Count;
    v324 = 1;
  }
LABEL_19:
  sub_22319ED0C(&v298, a2);
  sub_223FE1C14((uint64_t)&v298, &v323, (uint64_t)&__p);
  v14 = v299;
  if (v299)
  {
    v15 = (unint64_t *)&v299->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v315)
  {
    *(_QWORD *)&v327 = "cv3d.recon.";
    *((_QWORD *)&v327 + 1) = 11;
    *(_QWORD *)&v328 = "Stats.FrameBundle.AnalyticsMetadata";
    *((_QWORD *)&v328 + 1) = 35;
    sub_2231A9820((uint64_t)&v327, (uint64_t)&v329, 0, 0, &info);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v17 = sub_2241471F8();
      v18 = v17[2];
      if (!v18)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v18 = v17[2];
      }
      v19 = *(_QWORD *)(v18 + 64);
      v20 = (std::mutex *)(v19 + 32);
      std::mutex::lock((std::mutex *)(v19 + 32));
      v22 = *(_QWORD *)(v19 + 96);
      v21 = *(_QWORD *)(v19 + 104);
      std::mutex::unlock(v20);
      if (v22 != v21)
      {
        sub_2241471F8();
        v23 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23))
        {
          v327 = 0u;
          v328 = 0u;
          v329 = 728325608;
          kdebug_trace();
          if (!v315)
            sub_22324A974();
          sub_22361F34C((double *)&qword_255788F20, v23, (char *)&v314, "did_sink_task_skip_update");
          kdebug_trace();
        }
      }
    }
    v327 = 0u;
    v328 = 0u;
    v329 = 728325624;
    kdebug_trace();
    size = HIBYTE(info.__r_.__value_.__r.__words[2]);
    if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = info.__r_.__value_.__l.__size_;
    if (size >= 0x11)
    {
      p_info = &info;
      if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_info = (std::string *)info.__r_.__value_.__r.__words[0];
      v26 = p_info->__r_.__value_.__r.__words[0];
      v27 = p_info->__r_.__value_.__l.__size_;
      v28 = p_info->__r_.__value_.__s.__data_[16];
      if (v26 == 0x6365722E64337663 && v27 == 0x73746174532E6E6FLL && v28 == 46)
      {
        v31 = sub_223187510();
        if (!v315)
          sub_22324A974();
        if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v32 = &info;
        else
          v32 = (std::string *)info.__r_.__value_.__r.__words[0];
        if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = HIBYTE(info.__r_.__value_.__r.__words[2]);
        else
          v33 = info.__r_.__value_.__l.__size_;
        sub_223189538((uint64_t *)v31, v32, v33, (char *)&v314, (uint64_t)"did_sink_task_skip_update", 25);
      }
    }
    kdebug_trace();
    if (SHIBYTE(info.__r_.__value_.__r.__words[2]) < 0)
      operator delete(info.__r_.__value_.__l.__data_);
    v327 = 0u;
    v328 = 0u;
    v329 = 728325632;
    kdebug_trace();
    if (!v315)
      sub_22324A974();
    mach_absolute_time();
    v34 = atomic_load((unsigned __int8 *)&qword_255795560);
    if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
    {
      mach_timebase_info((mach_timebase_info_t)&info);
      LODWORD(v274) = HIDWORD(info.__r_.__value_.__r.__words[0]);
      LODWORD(v273) = info.__r_.__value_.__l.__data_;
      *(double *)&qword_255795558 = (double)v273 / (double)v274;
      __cxa_guard_release(&qword_255795560);
    }
    v35 = v314;
    v36 = atomic_load((unsigned __int8 *)&qword_25578DF68);
    if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
    {
      qword_25578BBC8 = (uint64_t)&off_24EC37778;
      sub_223476B20((uint64_t)&qword_25578BBD0);
      __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
      __cxa_guard_release(&qword_25578DF68);
    }
    std::mutex::lock(&stru_25578CA60);
    qword_25578CAA0 += v35;
    std::mutex::unlock(&stru_25578CA60);
    kdebug_trace();
  }
  if (v317)
  {
    *(_QWORD *)&v327 = "cv3d.recon.";
    *((_QWORD *)&v327 + 1) = 11;
    *(_QWORD *)&v328 = "Stats.FrameBundle.AnalyticsMetadata";
    *((_QWORD *)&v328 + 1) = 35;
    sub_2231A9820((uint64_t)&v327, (uint64_t)&v329, 0, 0, &v297);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v37 = sub_2241471F8();
      v38 = v37[2];
      if (!v38)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v38 = v37[2];
      }
      v39 = *(_QWORD *)(v38 + 64);
      v40 = (std::mutex *)(v39 + 32);
      std::mutex::lock((std::mutex *)(v39 + 32));
      v42 = *(_QWORD *)(v39 + 96);
      v41 = *(_QWORD *)(v39 + 104);
      std::mutex::unlock(v40);
      if (v42 != v41)
      {
        sub_2241471F8();
        v43 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43))
        {
          v327 = 0u;
          v328 = 0u;
          v329 = 728325608;
          kdebug_trace();
          if (!v317)
            sub_22324A974();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43))
          {
            v44 = (char *)operator new(0x20uLL);
            *(_OWORD *)&info.__r_.__value_.__r.__words[1] = xmmword_2245B8EA0;
            strcpy(v44, "did_sink_task_skip_many_updates");
            *(_QWORD *)&v325 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            *((_QWORD *)&v325 + 1) = 2;
            info.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
            v45 = sub_2241471F8();
            sub_2231AF6C8((uint64_t)v45, v43, (char *)&v316, (uint64_t)&info, &v325);
            if (SHIBYTE(info.__r_.__value_.__r.__words[2]) < 0)
              operator delete(info.__r_.__value_.__l.__data_);
          }
          kdebug_trace();
        }
      }
    }
    v327 = 0u;
    v328 = 0u;
    v329 = 728325624;
    kdebug_trace();
    v46 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v46 = v297.__r_.__value_.__l.__size_;
    if (v46 >= 0x11)
    {
      v47 = &v297;
      if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v47 = (std::string *)v297.__r_.__value_.__r.__words[0];
      v48 = v47->__r_.__value_.__r.__words[0];
      v49 = v47->__r_.__value_.__l.__size_;
      v50 = v47->__r_.__value_.__s.__data_[16];
      if (v48 == 0x6365722E64337663 && v49 == 0x73746174532E6E6FLL && v50 == 46)
      {
        v53 = sub_223187510();
        if (!v317)
          sub_22324A974();
        if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = &v297;
        else
          v54 = (std::string *)v297.__r_.__value_.__r.__words[0];
        if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v55 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
        else
          v55 = v297.__r_.__value_.__l.__size_;
        sub_223189538((uint64_t *)v53, v54, v55, (char *)&v316, (uint64_t)"did_sink_task_skip_many_updates", 31);
      }
    }
    kdebug_trace();
    if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v297.__r_.__value_.__l.__data_);
    v327 = 0u;
    v328 = 0u;
    v329 = 728325632;
    kdebug_trace();
    if (!v317)
      sub_22324A974();
    mach_absolute_time();
    v56 = atomic_load((unsigned __int8 *)&qword_255795560);
    if ((v56 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
    {
      mach_timebase_info((mach_timebase_info_t)&info);
      LODWORD(v276) = HIDWORD(info.__r_.__value_.__r.__words[0]);
      LODWORD(v275) = info.__r_.__value_.__l.__data_;
      *(double *)&qword_255795558 = (double)v275 / (double)v276;
      __cxa_guard_release(&qword_255795560);
    }
    v57 = v316;
    v58 = atomic_load((unsigned __int8 *)&qword_25578DF68);
    if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
    {
      qword_25578BBC8 = (uint64_t)&off_24EC37778;
      sub_223476B20((uint64_t)&qword_25578BBD0);
      __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
      __cxa_guard_release(&qword_25578DF68);
    }
    std::mutex::lock(&stru_25578CAC8);
    qword_25578CB08 += v57;
    std::mutex::unlock(&stru_25578CAC8);
    kdebug_trace();
  }
  if (v319)
  {
    *(_QWORD *)&v327 = "cv3d.recon.";
    *((_QWORD *)&v327 + 1) = 11;
    *(_QWORD *)&v328 = "Stats.FrameBundle.AnalyticsMetadata";
    *((_QWORD *)&v328 + 1) = 35;
    sub_2231A9820((uint64_t)&v327, (uint64_t)&v329, 0, 0, &info);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v59 = sub_2241471F8();
      v60 = v59[2];
      if (!v60)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v60 = v59[2];
      }
      v61 = *(_QWORD *)(v60 + 64);
      v62 = (std::mutex *)(v61 + 32);
      std::mutex::lock((std::mutex *)(v61 + 32));
      v64 = *(_QWORD *)(v61 + 96);
      v63 = *(_QWORD *)(v61 + 104);
      std::mutex::unlock(v62);
      if (v64 != v63)
      {
        sub_2241471F8();
        v65 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v65 + 24))(v65))
        {
          v327 = 0u;
          v328 = 0u;
          v329 = 728325608;
          kdebug_trace();
          if (!v319)
            sub_22324A974();
          sub_22361F488((double *)&qword_255788F20, v65, (char *)&v318, "did_sink_task_skip_large_updates");
          kdebug_trace();
        }
      }
    }
    v327 = 0u;
    v328 = 0u;
    v329 = 728325624;
    kdebug_trace();
    v66 = HIBYTE(info.__r_.__value_.__r.__words[2]);
    if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v66 = info.__r_.__value_.__l.__size_;
    if (v66 >= 0x11)
    {
      v67 = &info;
      if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v67 = (std::string *)info.__r_.__value_.__r.__words[0];
      v68 = v67->__r_.__value_.__r.__words[0];
      v69 = v67->__r_.__value_.__l.__size_;
      v70 = v67->__r_.__value_.__s.__data_[16];
      if (v68 == 0x6365722E64337663 && v69 == 0x73746174532E6E6FLL && v70 == 46)
      {
        v73 = sub_223187510();
        if (!v319)
          sub_22324A974();
        if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v74 = &info;
        else
          v74 = (std::string *)info.__r_.__value_.__r.__words[0];
        if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v75 = HIBYTE(info.__r_.__value_.__r.__words[2]);
        else
          v75 = info.__r_.__value_.__l.__size_;
        sub_223189538((uint64_t *)v73, v74, v75, (char *)&v318, (uint64_t)"did_sink_task_skip_large_updates", 32);
      }
    }
    kdebug_trace();
    if (SHIBYTE(info.__r_.__value_.__r.__words[2]) < 0)
      operator delete(info.__r_.__value_.__l.__data_);
    v327 = 0u;
    v328 = 0u;
    v329 = 728325632;
    kdebug_trace();
    if (!v319)
      sub_22324A974();
    mach_absolute_time();
    v76 = atomic_load((unsigned __int8 *)&qword_255795560);
    if ((v76 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
    {
      mach_timebase_info((mach_timebase_info_t)&info);
      LODWORD(v278) = HIDWORD(info.__r_.__value_.__r.__words[0]);
      LODWORD(v277) = info.__r_.__value_.__l.__data_;
      *(double *)&qword_255795558 = (double)v277 / (double)v278;
      __cxa_guard_release(&qword_255795560);
    }
    v77 = v318;
    v78 = atomic_load((unsigned __int8 *)&qword_25578DF68);
    if ((v78 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
    {
      qword_25578BBC8 = (uint64_t)&off_24EC37778;
      sub_223476B20((uint64_t)&qword_25578BBD0);
      __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
      __cxa_guard_release(&qword_25578DF68);
    }
    std::mutex::lock(&stru_25578CB30);
    qword_25578CB70 += v77;
    std::mutex::unlock(&stru_25578CB30);
    kdebug_trace();
  }
  if (BYTE4(__p))
  {
    *(_QWORD *)&v327 = "cv3d.recon.";
    *((_QWORD *)&v327 + 1) = 11;
    *(_QWORD *)&v328 = "Stats.FrameBundle";
    *((_QWORD *)&v328 + 1) = 17;
    sub_2231A9820((uint64_t)&v327, (uint64_t)&v329, 0, 0, &v297);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v79 = sub_2241471F8();
      v80 = v79[2];
      if (!v80)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v80 = v79[2];
      }
      v81 = *(_QWORD *)(v80 + 64);
      v82 = (std::mutex *)(v81 + 32);
      std::mutex::lock((std::mutex *)(v81 + 32));
      v84 = *(_QWORD *)(v81 + 96);
      v83 = *(_QWORD *)(v81 + 104);
      std::mutex::unlock(v82);
      if (v84 != v83)
      {
        sub_2241471F8();
        v85 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v85 + 24))(v85))
        {
          v327 = 0u;
          v328 = 0u;
          v329 = 728325608;
          kdebug_trace();
          if (!BYTE4(__p))
            sub_22324A974();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v85 + 24))(v85))
          {
            *((_BYTE *)&info.__r_.__value_.__s + 23) = 11;
            *(_QWORD *)&v325 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            *((_QWORD *)&v325 + 1) = 2;
            strcpy((char *)&info, "orientation");
            v86 = sub_2241471F8();
            sub_22361FB3C((uint64_t)v86, v85, (int *)&__p, (uint64_t)&info, &v325);
            if (SHIBYTE(info.__r_.__value_.__r.__words[2]) < 0)
              operator delete(info.__r_.__value_.__l.__data_);
          }
          kdebug_trace();
        }
      }
    }
    v327 = 0u;
    v328 = 0u;
    v329 = 728325624;
    kdebug_trace();
    v87 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v87 = v297.__r_.__value_.__l.__size_;
    if (v87 >= 0x11)
    {
      v88 = &v297;
      if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v88 = (std::string *)v297.__r_.__value_.__r.__words[0];
      v89 = v88->__r_.__value_.__r.__words[0];
      v90 = v88->__r_.__value_.__l.__size_;
      v91 = v88->__r_.__value_.__s.__data_[16];
      if (v89 == 0x6365722E64337663 && v90 == 0x73746174532E6E6FLL && v91 == 46)
      {
        v94 = sub_223187510();
        if (!BYTE4(__p))
          sub_22324A974();
        if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v95 = &v297;
        else
          v95 = (std::string *)v297.__r_.__value_.__r.__words[0];
        if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v96 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
        else
          v96 = v297.__r_.__value_.__l.__size_;
        sub_22361F5C4(v94, v95, v96, (int *)&__p, (uint64_t)"orientation", 11);
      }
    }
    kdebug_trace();
    if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v297.__r_.__value_.__l.__data_);
    v327 = 0u;
    v328 = 0u;
    v329 = 728325632;
    kdebug_trace();
    if (!BYTE4(__p))
      sub_22324A974();
    mach_absolute_time();
    v97 = atomic_load((unsigned __int8 *)&qword_255795560);
    if ((v97 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
    {
      mach_timebase_info((mach_timebase_info_t)&info);
      LODWORD(v280) = HIDWORD(info.__r_.__value_.__r.__words[0]);
      LODWORD(v279) = info.__r_.__value_.__l.__data_;
      *(double *)&qword_255795558 = (double)v279 / (double)v280;
      __cxa_guard_release(&qword_255795560);
    }
    v98 = (int)__p;
    v99 = atomic_load((unsigned __int8 *)&qword_25578DF68);
    if ((v99 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
    {
      qword_25578BBC8 = (uint64_t)&off_24EC37778;
      sub_223476B20((uint64_t)&qword_25578BBD0);
      __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
      __cxa_guard_release(&qword_25578DF68);
    }
    std::mutex::lock(&stru_25578BEC8);
    v100 = (double)v98;
    if (byte_25578BF10)
      v100 = *(double *)&qword_25578BF08 + v100;
    else
      byte_25578BF10 = 1;
    qword_25578BF08 = *(_QWORD *)&v100;
    *(double *)&qword_25578BF18 = *(double *)&qword_25578BF18 + 1.0;
    std::mutex::unlock(&stru_25578BEC8);
    kdebug_trace();
  }
  if (BYTE4(v301))
  {
    *(_QWORD *)&v327 = "cv3d.recon.";
    *((_QWORD *)&v327 + 1) = 11;
    *(_QWORD *)&v328 = "Stats.FrameBundle.AnalyticsMetadata";
    *((_QWORD *)&v328 + 1) = 35;
    sub_2231A9820((uint64_t)&v327, (uint64_t)&v329, 0, 0, &info);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v101 = sub_2241471F8();
      v102 = v101[2];
      if (!v102)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v102 = v101[2];
      }
      v103 = *(_QWORD *)(v102 + 64);
      v104 = (std::mutex *)(v103 + 32);
      std::mutex::lock((std::mutex *)(v103 + 32));
      v106 = *(_QWORD *)(v103 + 96);
      v105 = *(_QWORD *)(v103 + 104);
      std::mutex::unlock(v104);
      if (v106 != v105)
      {
        sub_2241471F8();
        v107 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v107 + 24))(v107))
        {
          v327 = 0u;
          v328 = 0u;
          v329 = 728325608;
          kdebug_trace();
          if (!BYTE4(v301))
            sub_22324A974();
          sub_22361F758((double *)&qword_255788F20, v107, (int *)&v301, "ceilingTotalRatio");
          kdebug_trace();
        }
      }
    }
    v327 = 0u;
    v328 = 0u;
    v329 = 728325624;
    kdebug_trace();
    v108 = HIBYTE(info.__r_.__value_.__r.__words[2]);
    if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v108 = info.__r_.__value_.__l.__size_;
    if (v108 >= 0x11)
    {
      v109 = &info;
      if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v109 = (std::string *)info.__r_.__value_.__r.__words[0];
      v110 = v109->__r_.__value_.__r.__words[0];
      v111 = v109->__r_.__value_.__l.__size_;
      v112 = v109->__r_.__value_.__s.__data_[16];
      if (v110 == 0x6365722E64337663 && v111 == 0x73746174532E6E6FLL && v112 == 46)
      {
        v115 = sub_223187510();
        if (!BYTE4(v301))
          sub_22324A974();
        if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v116 = &info;
        else
          v116 = (std::string *)info.__r_.__value_.__r.__words[0];
        if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v117 = HIBYTE(info.__r_.__value_.__r.__words[2]);
        else
          v117 = info.__r_.__value_.__l.__size_;
        sub_2231897A8((uint64_t *)v115, v116, v117, (float *)&v301, (uint64_t)"ceilingTotalRatio", 17);
      }
    }
    kdebug_trace();
    if (SHIBYTE(info.__r_.__value_.__r.__words[2]) < 0)
      operator delete(info.__r_.__value_.__l.__data_);
    v327 = 0u;
    v328 = 0u;
    v329 = 728325632;
    kdebug_trace();
    if (!BYTE4(v301))
      sub_22324A974();
    mach_absolute_time();
    v118 = atomic_load((unsigned __int8 *)&qword_255795560);
    if ((v118 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
    {
      mach_timebase_info((mach_timebase_info_t)&info);
      LODWORD(v282) = HIDWORD(info.__r_.__value_.__r.__words[0]);
      LODWORD(v281) = info.__r_.__value_.__l.__data_;
      *(double *)&qword_255795558 = (double)v281 / (double)v282;
      __cxa_guard_release(&qword_255795560);
    }
    v119 = *(float *)&v301;
    v120 = atomic_load((unsigned __int8 *)&qword_25578DF68);
    if ((v120 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
    {
      qword_25578BBC8 = (uint64_t)&off_24EC37778;
      sub_223476B20((uint64_t)&qword_25578BBD0);
      __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
      __cxa_guard_release(&qword_25578DF68);
    }
    std::mutex::lock(&stru_25578DBE0);
    v121 = v119;
    if (byte_25578DC28)
      v121 = *(double *)&qword_25578DC20 + v121;
    else
      byte_25578DC28 = 1;
    qword_25578DC20 = *(_QWORD *)&v121;
    *(double *)&qword_25578DC30 = *(double *)&qword_25578DC30 + 1.0;
    std::mutex::unlock(&stru_25578DBE0);
    kdebug_trace();
  }
  if (BYTE12(v301))
  {
    *(_QWORD *)&v327 = "cv3d.recon.";
    *((_QWORD *)&v327 + 1) = 11;
    *(_QWORD *)&v328 = "Stats.FrameBundle.AnalyticsMetadata";
    *((_QWORD *)&v328 + 1) = 35;
    sub_2231A9820((uint64_t)&v327, (uint64_t)&v329, 0, 0, &v297);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v122 = sub_2241471F8();
      v123 = v122[2];
      if (!v123)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v123 = v122[2];
      }
      v124 = *(_QWORD *)(v123 + 64);
      v125 = (std::mutex *)(v124 + 32);
      std::mutex::lock((std::mutex *)(v124 + 32));
      v127 = *(_QWORD *)(v124 + 96);
      v126 = *(_QWORD *)(v124 + 104);
      std::mutex::unlock(v125);
      if (v127 != v126)
      {
        sub_2241471F8();
        v128 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v128 + 24))(v128))
        {
          v327 = 0u;
          v328 = 0u;
          v329 = 728325608;
          kdebug_trace();
          if (!BYTE12(v301))
            sub_22324A974();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v128 + 24))(v128))
          {
            *((_BYTE *)&info.__r_.__value_.__s + 23) = 14;
            strcpy((char *)&info, "wallTotalRatio");
            *(_QWORD *)&v325 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            *((_QWORD *)&v325 + 1) = 2;
            v129 = sub_2241471F8();
            sub_22361FE58((uint64_t)v129, v128, (int *)&v301 + 2, (uint64_t)&info, &v325);
            if (SHIBYTE(info.__r_.__value_.__r.__words[2]) < 0)
              operator delete(info.__r_.__value_.__l.__data_);
          }
          kdebug_trace();
        }
      }
    }
    v327 = 0u;
    v328 = 0u;
    v329 = 728325624;
    kdebug_trace();
    v130 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v130 = v297.__r_.__value_.__l.__size_;
    if (v130 >= 0x11)
    {
      v131 = &v297;
      if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v131 = (std::string *)v297.__r_.__value_.__r.__words[0];
      v132 = v131->__r_.__value_.__r.__words[0];
      v133 = v131->__r_.__value_.__l.__size_;
      v134 = v131->__r_.__value_.__s.__data_[16];
      if (v132 == 0x6365722E64337663 && v133 == 0x73746174532E6E6FLL && v134 == 46)
      {
        v137 = sub_223187510();
        if (!BYTE12(v301))
          sub_22324A974();
        if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v138 = &v297;
        else
          v138 = (std::string *)v297.__r_.__value_.__r.__words[0];
        if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v139 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
        else
          v139 = v297.__r_.__value_.__l.__size_;
        sub_2231897A8((uint64_t *)v137, v138, v139, (float *)&v301 + 2, (uint64_t)"wallTotalRatio", 14);
      }
    }
    kdebug_trace();
    if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v297.__r_.__value_.__l.__data_);
    v327 = 0u;
    v328 = 0u;
    v329 = 728325632;
    kdebug_trace();
    if (!BYTE12(v301))
      sub_22324A974();
    mach_absolute_time();
    v140 = atomic_load((unsigned __int8 *)&qword_255795560);
    if ((v140 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
    {
      mach_timebase_info((mach_timebase_info_t)&info);
      LODWORD(v284) = HIDWORD(info.__r_.__value_.__r.__words[0]);
      LODWORD(v283) = info.__r_.__value_.__l.__data_;
      *(double *)&qword_255795558 = (double)v283 / (double)v284;
      __cxa_guard_release(&qword_255795560);
    }
    v141 = *((float *)&v301 + 2);
    v142 = atomic_load((unsigned __int8 *)&qword_25578DF68);
    if ((v142 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
    {
      qword_25578BBC8 = (uint64_t)&off_24EC37778;
      sub_223476B20((uint64_t)&qword_25578BBD0);
      __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
      __cxa_guard_release(&qword_25578DF68);
    }
    std::mutex::lock(&stru_25578DC58);
    v143 = v141;
    if (byte_25578DCA0)
      v143 = *(double *)&qword_25578DC98 + v143;
    else
      byte_25578DCA0 = 1;
    qword_25578DC98 = *(_QWORD *)&v143;
    *(double *)&qword_25578DCA8 = *(double *)&qword_25578DCA8 + 1.0;
    std::mutex::unlock(&stru_25578DC58);
    kdebug_trace();
  }
  if (v303)
  {
    *(_QWORD *)&v327 = "cv3d.recon.";
    *((_QWORD *)&v327 + 1) = 11;
    *(_QWORD *)&v328 = "Stats.FrameBundle.AnalyticsMetadata";
    *((_QWORD *)&v328 + 1) = 35;
    sub_2231A9820((uint64_t)&v327, (uint64_t)&v329, 0, 0, &v297);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v144 = sub_2241471F8();
      v145 = v144[2];
      if (!v145)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v145 = v144[2];
      }
      v146 = *(_QWORD *)(v145 + 64);
      v147 = (std::mutex *)(v146 + 32);
      std::mutex::lock((std::mutex *)(v146 + 32));
      v149 = *(_QWORD *)(v146 + 96);
      v148 = *(_QWORD *)(v146 + 104);
      std::mutex::unlock(v147);
      if (v149 != v148)
      {
        sub_2241471F8();
        v150 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v150 + 24))(v150))
        {
          v327 = 0u;
          v328 = 0u;
          v329 = 728325608;
          kdebug_trace();
          if (!v303)
            sub_22324A974();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v150 + 24))(v150))
          {
            *((_BYTE *)&info.__r_.__value_.__s + 23) = 15;
            strcpy((char *)&info, "floorTotalRatio");
            *(_QWORD *)&v325 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            *((_QWORD *)&v325 + 1) = 2;
            v151 = sub_2241471F8();
            sub_22361FE58((uint64_t)v151, v150, (int *)&v302, (uint64_t)&info, &v325);
            if (SHIBYTE(info.__r_.__value_.__r.__words[2]) < 0)
              operator delete(info.__r_.__value_.__l.__data_);
          }
          kdebug_trace();
        }
      }
    }
    v327 = 0u;
    v328 = 0u;
    v329 = 728325624;
    kdebug_trace();
    v152 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v152 = v297.__r_.__value_.__l.__size_;
    if (v152 >= 0x11)
    {
      v153 = &v297;
      if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v153 = (std::string *)v297.__r_.__value_.__r.__words[0];
      v154 = v153->__r_.__value_.__r.__words[0];
      v155 = v153->__r_.__value_.__l.__size_;
      v156 = v153->__r_.__value_.__s.__data_[16];
      if (v154 == 0x6365722E64337663 && v155 == 0x73746174532E6E6FLL && v156 == 46)
      {
        v159 = sub_223187510();
        if (!v303)
          sub_22324A974();
        if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v160 = &v297;
        else
          v160 = (std::string *)v297.__r_.__value_.__r.__words[0];
        if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v161 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
        else
          v161 = v297.__r_.__value_.__l.__size_;
        sub_2231897A8((uint64_t *)v159, v160, v161, &v302, (uint64_t)"floorTotalRatio", 15);
      }
    }
    kdebug_trace();
    if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v297.__r_.__value_.__l.__data_);
    v327 = 0u;
    v328 = 0u;
    v329 = 728325632;
    kdebug_trace();
    if (!v303)
      sub_22324A974();
    mach_absolute_time();
    v162 = atomic_load((unsigned __int8 *)&qword_255795560);
    if ((v162 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
    {
      mach_timebase_info((mach_timebase_info_t)&info);
      LODWORD(v286) = HIDWORD(info.__r_.__value_.__r.__words[0]);
      LODWORD(v285) = info.__r_.__value_.__l.__data_;
      *(double *)&qword_255795558 = (double)v285 / (double)v286;
      __cxa_guard_release(&qword_255795560);
    }
    v163 = v302;
    v164 = atomic_load((unsigned __int8 *)&qword_25578DF68);
    if ((v164 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
    {
      qword_25578BBC8 = (uint64_t)&off_24EC37778;
      sub_223476B20((uint64_t)&qword_25578BBD0);
      __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
      __cxa_guard_release(&qword_25578DF68);
    }
    std::mutex::lock(&stru_25578DCD0);
    v165 = v163;
    if (byte_25578DD18)
      v165 = *(double *)&qword_25578DD10 + v165;
    else
      byte_25578DD18 = 1;
    qword_25578DD10 = *(_QWORD *)&v165;
    *(double *)&qword_25578DD20 = *(double *)&qword_25578DD20 + 1.0;
    std::mutex::unlock(&stru_25578DCD0);
    kdebug_trace();
  }
  if (v305)
  {
    *(_QWORD *)&v327 = "cv3d.recon.";
    *((_QWORD *)&v327 + 1) = 11;
    *(_QWORD *)&v328 = "Stats.FrameBundle.AnalyticsMetadata";
    *((_QWORD *)&v328 + 1) = 35;
    sub_2231A9820((uint64_t)&v327, (uint64_t)&v329, 0, 0, &v297);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v166 = sub_2241471F8();
      v167 = v166[2];
      if (!v167)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v167 = v166[2];
      }
      v168 = *(_QWORD *)(v167 + 64);
      v169 = (std::mutex *)(v168 + 32);
      std::mutex::lock((std::mutex *)(v168 + 32));
      v171 = *(_QWORD *)(v168 + 96);
      v170 = *(_QWORD *)(v168 + 104);
      std::mutex::unlock(v169);
      if (v171 != v170)
      {
        sub_2241471F8();
        v172 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v172 + 24))(v172))
        {
          v327 = 0u;
          v328 = 0u;
          v329 = 728325608;
          kdebug_trace();
          if (!v305)
            sub_22324A974();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v172 + 24))(v172))
          {
            *((_BYTE *)&info.__r_.__value_.__s + 23) = 16;
            strcpy((char *)&info, "wallReplaceRatio");
            *(_QWORD *)&v325 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            *((_QWORD *)&v325 + 1) = 2;
            v173 = sub_2241471F8();
            sub_22361FE58((uint64_t)v173, v172, (int *)&v304, (uint64_t)&info, &v325);
            if (SHIBYTE(info.__r_.__value_.__r.__words[2]) < 0)
              operator delete(info.__r_.__value_.__l.__data_);
          }
          kdebug_trace();
        }
      }
    }
    v327 = 0u;
    v328 = 0u;
    v329 = 728325624;
    kdebug_trace();
    v174 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v174 = v297.__r_.__value_.__l.__size_;
    if (v174 >= 0x11)
    {
      v175 = &v297;
      if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v175 = (std::string *)v297.__r_.__value_.__r.__words[0];
      v176 = v175->__r_.__value_.__r.__words[0];
      v177 = v175->__r_.__value_.__l.__size_;
      v178 = v175->__r_.__value_.__s.__data_[16];
      if (v176 == 0x6365722E64337663 && v177 == 0x73746174532E6E6FLL && v178 == 46)
      {
        v181 = sub_223187510();
        if (!v305)
          sub_22324A974();
        if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v182 = &v297;
        else
          v182 = (std::string *)v297.__r_.__value_.__r.__words[0];
        if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v183 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
        else
          v183 = v297.__r_.__value_.__l.__size_;
        sub_2231897A8((uint64_t *)v181, v182, v183, &v304, (uint64_t)"wallReplaceRatio", 16);
      }
    }
    kdebug_trace();
    if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v297.__r_.__value_.__l.__data_);
    v327 = 0u;
    v328 = 0u;
    v329 = 728325632;
    kdebug_trace();
    if (!v305)
      sub_22324A974();
    mach_absolute_time();
    v184 = atomic_load((unsigned __int8 *)&qword_255795560);
    if ((v184 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
    {
      mach_timebase_info((mach_timebase_info_t)&info);
      LODWORD(v288) = HIDWORD(info.__r_.__value_.__r.__words[0]);
      LODWORD(v287) = info.__r_.__value_.__l.__data_;
      *(double *)&qword_255795558 = (double)v287 / (double)v288;
      __cxa_guard_release(&qword_255795560);
    }
    v185 = v304;
    v186 = atomic_load((unsigned __int8 *)&qword_25578DF68);
    if ((v186 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
    {
      qword_25578BBC8 = (uint64_t)&off_24EC37778;
      sub_223476B20((uint64_t)&qword_25578BBD0);
      __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
      __cxa_guard_release(&qword_25578DF68);
    }
    std::mutex::lock(&stru_25578DD48);
    v187 = v185;
    if (byte_25578DD90)
      v187 = *(double *)&qword_25578DD88 + v187;
    else
      byte_25578DD90 = 1;
    qword_25578DD88 = *(_QWORD *)&v187;
    *(double *)&qword_25578DD98 = *(double *)&qword_25578DD98 + 1.0;
    std::mutex::unlock(&stru_25578DD48);
    kdebug_trace();
  }
  if (v307)
  {
    *(_QWORD *)&v327 = "cv3d.recon.";
    *((_QWORD *)&v327 + 1) = 11;
    *(_QWORD *)&v328 = "Stats.FrameBundle.AnalyticsMetadata";
    *((_QWORD *)&v328 + 1) = 35;
    sub_2231A9820((uint64_t)&v327, (uint64_t)&v329, 0, 0, &info);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v188 = sub_2241471F8();
      v189 = v188[2];
      if (!v189)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v189 = v188[2];
      }
      v190 = *(_QWORD *)(v189 + 64);
      v191 = (std::mutex *)(v190 + 32);
      std::mutex::lock((std::mutex *)(v190 + 32));
      v193 = *(_QWORD *)(v190 + 96);
      v192 = *(_QWORD *)(v190 + 104);
      std::mutex::unlock(v191);
      if (v193 != v192)
      {
        sub_2241471F8();
        v194 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v194 + 24))(v194))
        {
          v327 = 0u;
          v328 = 0u;
          v329 = 728325608;
          kdebug_trace();
          if (!v307)
            sub_22324A974();
          sub_22361F758((double *)&qword_255788F20, v194, (int *)&v306, "floorReplaceRatio");
          kdebug_trace();
        }
      }
    }
    v327 = 0u;
    v328 = 0u;
    v329 = 728325624;
    kdebug_trace();
    v195 = HIBYTE(info.__r_.__value_.__r.__words[2]);
    if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v195 = info.__r_.__value_.__l.__size_;
    if (v195 >= 0x11)
    {
      v196 = &info;
      if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v196 = (std::string *)info.__r_.__value_.__r.__words[0];
      v197 = v196->__r_.__value_.__r.__words[0];
      v198 = v196->__r_.__value_.__l.__size_;
      v199 = v196->__r_.__value_.__s.__data_[16];
      if (v197 == 0x6365722E64337663 && v198 == 0x73746174532E6E6FLL && v199 == 46)
      {
        v202 = sub_223187510();
        if (!v307)
          sub_22324A974();
        if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v203 = &info;
        else
          v203 = (std::string *)info.__r_.__value_.__r.__words[0];
        if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v204 = HIBYTE(info.__r_.__value_.__r.__words[2]);
        else
          v204 = info.__r_.__value_.__l.__size_;
        sub_2231897A8((uint64_t *)v202, v203, v204, &v306, (uint64_t)"floorReplaceRatio", 17);
      }
    }
    kdebug_trace();
    if (SHIBYTE(info.__r_.__value_.__r.__words[2]) < 0)
      operator delete(info.__r_.__value_.__l.__data_);
    v327 = 0u;
    v328 = 0u;
    v329 = 728325632;
    kdebug_trace();
    if (!v307)
      sub_22324A974();
    mach_absolute_time();
    v205 = atomic_load((unsigned __int8 *)&qword_255795560);
    if ((v205 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
    {
      mach_timebase_info((mach_timebase_info_t)&info);
      LODWORD(v290) = HIDWORD(info.__r_.__value_.__r.__words[0]);
      LODWORD(v289) = info.__r_.__value_.__l.__data_;
      *(double *)&qword_255795558 = (double)v289 / (double)v290;
      __cxa_guard_release(&qword_255795560);
    }
    v206 = v306;
    v207 = atomic_load((unsigned __int8 *)&qword_25578DF68);
    if ((v207 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
    {
      qword_25578BBC8 = (uint64_t)&off_24EC37778;
      sub_223476B20((uint64_t)&qword_25578BBD0);
      __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
      __cxa_guard_release(&qword_25578DF68);
    }
    std::mutex::lock(&stru_25578DDC0);
    v208 = v206;
    if (byte_25578DE08)
      v208 = *(double *)&qword_25578DE00 + v208;
    else
      byte_25578DE08 = 1;
    qword_25578DE00 = *(_QWORD *)&v208;
    *(double *)&qword_25578DE10 = *(double *)&qword_25578DE10 + 1.0;
    std::mutex::unlock(&stru_25578DDC0);
    kdebug_trace();
  }
  if (v309 && v311 && v313)
  {
    *(_QWORD *)&v327 = "cv3d.recon.";
    *((_QWORD *)&v327 + 1) = 11;
    *(_QWORD *)&v328 = "Stats.FrameBundle.AnalyticsMetadata.TopKPairs";
    *((_QWORD *)&v328 + 1) = 45;
    sub_2231A9820((uint64_t)&v327, (uint64_t)&v329, 0, 0, &info);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v209 = sub_2241471F8();
      v210 = v209[2];
      if (!v210)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v210 = v209[2];
      }
      v211 = *(_QWORD *)(v210 + 64);
      v212 = (std::mutex *)(v211 + 32);
      std::mutex::lock((std::mutex *)(v211 + 32));
      v214 = *(_QWORD *)(v211 + 96);
      v213 = *(_QWORD *)(v211 + 104);
      std::mutex::unlock(v212);
      if (v214 != v213)
      {
        sub_2241471F8();
        v215 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v215 + 24))(v215))
        {
          v327 = 0u;
          v328 = 0u;
          v329 = 728325608;
          kdebug_trace();
          if (!v309)
            sub_22324A974();
          sub_22361F894(v215, (int *)&v308, "semanticIndex");
          kdebug_trace();
        }
      }
    }
    v327 = 0u;
    v328 = 0u;
    v329 = 728325624;
    kdebug_trace();
    v216 = HIBYTE(info.__r_.__value_.__r.__words[2]);
    if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v216 = info.__r_.__value_.__l.__size_;
    if (v216 >= 0x11)
    {
      v217 = &info;
      if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v217 = (std::string *)info.__r_.__value_.__r.__words[0];
      v218 = v217->__r_.__value_.__r.__words[0];
      v219 = v217->__r_.__value_.__l.__size_;
      v220 = v217->__r_.__value_.__s.__data_[16];
      if (v218 == 0x6365722E64337663 && v219 == 0x73746174532E6E6FLL && v220 == 46)
      {
        v223 = sub_223187510();
        if (!v309)
          sub_22324A974();
        if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v224 = &info;
        else
          v224 = (std::string *)info.__r_.__value_.__r.__words[0];
        if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v225 = HIBYTE(info.__r_.__value_.__r.__words[2]);
        else
          v225 = info.__r_.__value_.__l.__size_;
        sub_223532E4C(v223, v224, v225, &v308, (uint64_t)"semanticIndex", 13);
      }
    }
    kdebug_trace();
    if (SHIBYTE(info.__r_.__value_.__r.__words[2]) < 0)
      operator delete(info.__r_.__value_.__l.__data_);
    v327 = 0u;
    v328 = 0u;
    v329 = 728325632;
    kdebug_trace();
    if (!v309)
      sub_22324A974();
    mach_absolute_time();
    v226 = atomic_load((unsigned __int8 *)&qword_255795560);
    if ((v226 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
    {
      mach_timebase_info((mach_timebase_info_t)&info);
      LODWORD(v292) = HIDWORD(info.__r_.__value_.__r.__words[0]);
      LODWORD(v291) = info.__r_.__value_.__l.__data_;
      *(double *)&qword_255795558 = (double)v291 / (double)v292;
      __cxa_guard_release(&qword_255795560);
    }
    v227 = v308;
    v228 = atomic_load((unsigned __int8 *)&qword_25578DF68);
    if ((v228 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
    {
      qword_25578BBC8 = (uint64_t)&off_24EC37778;
      sub_223476B20((uint64_t)&qword_25578BBD0);
      __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
      __cxa_guard_release(&qword_25578DF68);
    }
    std::mutex::lock(&stru_25578DE38);
    qword_25578DE78 = v227;
    byte_25578DE80 = 1;
    std::mutex::unlock(&stru_25578DE38);
    kdebug_trace();
    *(_QWORD *)&v327 = "cv3d.recon.";
    *((_QWORD *)&v327 + 1) = 11;
    *(_QWORD *)&v328 = "Stats.FrameBundle.AnalyticsMetadata.TopKPairs";
    *((_QWORD *)&v328 + 1) = 45;
    sub_2231A9820((uint64_t)&v327, (uint64_t)&v329, 0, 0, &info);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v229 = sub_2241471F8();
      v230 = v229[2];
      if (!v230)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v230 = v229[2];
      }
      v231 = *(_QWORD *)(v230 + 64);
      v232 = (std::mutex *)(v231 + 32);
      std::mutex::lock((std::mutex *)(v231 + 32));
      v234 = *(_QWORD *)(v231 + 96);
      v233 = *(_QWORD *)(v231 + 104);
      std::mutex::unlock(v232);
      if (v234 != v233)
      {
        sub_2241471F8();
        v235 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v235 + 24))(v235))
        {
          v327 = 0u;
          v328 = 0u;
          v329 = 728325608;
          kdebug_trace();
          if (!v311)
            sub_22324A974();
          sub_22361F894(v235, (int *)&v310, "materialIndex");
          kdebug_trace();
        }
      }
    }
    v327 = 0u;
    v328 = 0u;
    v329 = 728325624;
    kdebug_trace();
    v236 = HIBYTE(info.__r_.__value_.__r.__words[2]);
    if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v236 = info.__r_.__value_.__l.__size_;
    if (v236 >= 0x11)
    {
      v237 = &info;
      if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v237 = (std::string *)info.__r_.__value_.__r.__words[0];
      v238 = v237->__r_.__value_.__r.__words[0];
      v239 = v237->__r_.__value_.__l.__size_;
      v240 = v237->__r_.__value_.__s.__data_[16];
      if (v238 == 0x6365722E64337663 && v239 == 0x73746174532E6E6FLL && v240 == 46)
      {
        v243 = sub_223187510();
        if (!v311)
          sub_22324A974();
        if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v244 = &info;
        else
          v244 = (std::string *)info.__r_.__value_.__r.__words[0];
        if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v245 = HIBYTE(info.__r_.__value_.__r.__words[2]);
        else
          v245 = info.__r_.__value_.__l.__size_;
        sub_223532E4C(v243, v244, v245, &v310, (uint64_t)"materialIndex", 13);
      }
    }
    kdebug_trace();
    if (SHIBYTE(info.__r_.__value_.__r.__words[2]) < 0)
      operator delete(info.__r_.__value_.__l.__data_);
    v327 = 0u;
    v328 = 0u;
    v329 = 728325632;
    kdebug_trace();
    if (!v311)
      sub_22324A974();
    mach_absolute_time();
    v246 = atomic_load((unsigned __int8 *)&qword_255795560);
    if ((v246 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
    {
      mach_timebase_info((mach_timebase_info_t)&info);
      LODWORD(v294) = HIDWORD(info.__r_.__value_.__r.__words[0]);
      LODWORD(v293) = info.__r_.__value_.__l.__data_;
      *(double *)&qword_255795558 = (double)v293 / (double)v294;
      __cxa_guard_release(&qword_255795560);
    }
    v247 = v310;
    v248 = atomic_load((unsigned __int8 *)&qword_25578DF68);
    if ((v248 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
    {
      qword_25578BBC8 = (uint64_t)&off_24EC37778;
      sub_223476B20((uint64_t)&qword_25578BBD0);
      __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
      __cxa_guard_release(&qword_25578DF68);
    }
    std::mutex::lock(&stru_25578DEA8);
    qword_25578DEE8 = v247;
    byte_25578DEF0 = 1;
    std::mutex::unlock(&stru_25578DEA8);
    kdebug_trace();
    *(_QWORD *)&v327 = "cv3d.recon.";
    *((_QWORD *)&v327 + 1) = 11;
    *(_QWORD *)&v328 = "Stats.FrameBundle.AnalyticsMetadata.TopKPairs";
    *((_QWORD *)&v328 + 1) = 45;
    sub_2231A9820((uint64_t)&v327, (uint64_t)&v329, 0, 0, &v297);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v249 = sub_2241471F8();
      v250 = v249[2];
      if (!v250)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v250 = v249[2];
      }
      v251 = *(_QWORD *)(v250 + 64);
      v252 = (std::mutex *)(v251 + 32);
      std::mutex::lock((std::mutex *)(v251 + 32));
      v254 = *(_QWORD *)(v251 + 96);
      v253 = *(_QWORD *)(v251 + 104);
      std::mutex::unlock(v252);
      if (v254 != v253)
      {
        sub_2241471F8();
        v255 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v255 + 24))(v255))
        {
          v327 = 0u;
          v328 = 0u;
          v329 = 728325608;
          kdebug_trace();
          if (!v313)
            sub_22324A974();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v255 + 24))(v255))
          {
            *((_BYTE *)&info.__r_.__value_.__s + 23) = 5;
            strcpy((char *)&info, "ratio");
            *(_QWORD *)&v325 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            *((_QWORD *)&v325 + 1) = 2;
            v256 = sub_2241471F8();
            sub_22361FE58((uint64_t)v256, v255, &v312, (uint64_t)&info, &v325);
            if (SHIBYTE(info.__r_.__value_.__r.__words[2]) < 0)
              operator delete(info.__r_.__value_.__l.__data_);
          }
          kdebug_trace();
        }
      }
    }
    v327 = 0u;
    v328 = 0u;
    v329 = 728325624;
    kdebug_trace();
    v257 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v257 = v297.__r_.__value_.__l.__size_;
    if (v257 >= 0x11)
    {
      v258 = &v297;
      if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v258 = (std::string *)v297.__r_.__value_.__r.__words[0];
      v259 = v258->__r_.__value_.__r.__words[0];
      v260 = v258->__r_.__value_.__l.__size_;
      v261 = v258->__r_.__value_.__s.__data_[16];
      if (v259 == 0x6365722E64337663 && v260 == 0x73746174532E6E6FLL && v261 == 46)
      {
        v264 = sub_223187510();
        if (!v313)
          sub_22324A974();
        if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v265 = &v297;
        else
          v265 = (std::string *)v297.__r_.__value_.__r.__words[0];
        if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v266 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
        else
          v266 = v297.__r_.__value_.__l.__size_;
        sub_2231897A8((uint64_t *)v264, v265, v266, (float *)&v312, (uint64_t)"ratio", 5);
      }
    }
    kdebug_trace();
    if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v297.__r_.__value_.__l.__data_);
    v327 = 0u;
    v328 = 0u;
    v329 = 728325632;
    kdebug_trace();
    if (!v313)
      sub_22324A974();
    mach_absolute_time();
    v267 = atomic_load((unsigned __int8 *)&qword_255795560);
    if ((v267 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
    {
      mach_timebase_info((mach_timebase_info_t)&info);
      LODWORD(v296) = HIDWORD(info.__r_.__value_.__r.__words[0]);
      LODWORD(v295) = info.__r_.__value_.__l.__data_;
      *(double *)&qword_255795558 = (double)v295 / (double)v296;
      __cxa_guard_release(&qword_255795560);
    }
    v268 = v312;
    v269 = atomic_load((unsigned __int8 *)&qword_25578DF68);
    if ((v269 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
    {
      qword_25578BBC8 = (uint64_t)&off_24EC37778;
      sub_223476B20((uint64_t)&qword_25578BBD0);
      __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
      __cxa_guard_release(&qword_25578DF68);
    }
    std::mutex::lock(&stru_25578DF18);
    dword_25578DF58 = v268;
    byte_25578DF5C = 1;
    std::mutex::unlock(&stru_25578DF18);
    kdebug_trace();
  }
  if (v322)
  {
    v270 = v321;
    if (v321)
    {
      v271 = (unint64_t *)&v321->__shared_owners_;
      do
        v272 = __ldaxr(v271);
      while (__stlxr(v272 - 1, v271));
      if (!v272)
      {
        ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
        std::__shared_weak_count::__release_weak(v270);
      }
    }
  }
}

void sub_22360191C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  __cxa_guard_abort(&qword_25578DF68);
  sub_2231874DC(v42 - 160);
  sub_223224234((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t sub_223601D10(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v1 = result;
  if (*(_BYTE *)(result + 24))
  {
    if (!*(_BYTE *)(result + 16))
      return result;
    v2 = *(std::__shared_weak_count **)(result + 8);
    if (!v2)
      return result;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (v4)
      return result;
LABEL_12:
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    return v1;
  }
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    v5 = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
      goto LABEL_12;
  }
  return result;
}

uint64_t sub_223601DA8(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  __int128 v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _BOOL4 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  unsigned __int8 v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int16 v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  char v77;
  uint64_t v78;
  __int128 v79;
  char v80;
  char v81;
  unsigned __int8 v82;
  _BYTE v83[24];
  uint64_t v84;
  __int16 v85;
  __int128 v86;
  uint64_t v87;
  char v88;
  char v89;
  __int128 v90;
  uint64_t v91;
  char v92;
  char v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  __int128 v100;
  uint64_t v101;
  char v102;
  __int128 v103;
  uint64_t v104;
  int v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  char v120;
  uint64_t v121;
  __int128 v122;
  char v123;
  unsigned __int8 v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  uint64_t v127;

  v127 = *MEMORY[0x24BDAC8D0];
  v126 = *(_BYTE *)(a2 + 456);
  if (!v126)
  {
    *(_OWORD *)v83 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    if (*(_BYTE *)(a1 + 456))
    {
      v7 = (unsigned __int8 *)(a1 + 456);
      goto LABEL_34;
    }
LABEL_40:
    v18 = *(_OWORD *)v83;
    *(_OWORD *)v83 = *(_OWORD *)a1;
    *(_OWORD *)a1 = v18;
    if (v126)
      goto LABEL_86;
    goto LABEL_94;
  }
  v83[0] = 0;
  v125 = 0;
  v3 = *(unsigned __int8 *)(a2 + 448);
  if (*(_BYTE *)(a2 + 448))
  {
    v124 = 0;
    v4 = *(unsigned __int8 *)(a2 + 440);
    v5 = 1;
    if (*(_BYTE *)(a2 + 440))
    {
      sub_22329ACE4((uint64_t)v83, a2);
      v124 = 1;
      v6 = v126;
      v4 = 1;
    }
    else
    {
      v6 = 1;
    }
    v125 = 1;
    v8 = *(unsigned __int8 *)(a1 + 456);
    if (!v6)
    {
LABEL_20:
      v7 = (unsigned __int8 *)(a1 + 456);
      if (v6)
      {
        if (!v8)
        {
          v10 = *(_OWORD *)a1;
          *(_BYTE *)(a1 + 448) = 0;
          *(_QWORD *)a1 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          if (v3)
          {
            *(_BYTE *)(a1 + 440) = 0;
            if (v4)
            {
              v38 = v10;
              sub_22329ACE4(a1, (uint64_t)v83);
              v10 = v38;
              *(_BYTE *)(a1 + 440) = 1;
              v11 = v125;
              v12 = v124;
              *(_BYTE *)(a1 + 448) = 1;
              if (v11 && v12)
              {
                sub_2232954B0((uint64_t)v83);
                v10 = v38;
              }
            }
            else
            {
              *(_BYTE *)(a1 + 448) = 1;
            }
          }
          *(_OWORD *)v83 = v10;
          v32 = v126;
          v126 = *v7;
          v33 = v126;
          *v7 = v32;
          if (!v33)
            goto LABEL_94;
          goto LABEL_86;
        }
        goto LABEL_40;
      }
      if (v8)
      {
LABEL_34:
        LOBYTE(v39) = 0;
        v82 = 0;
        v13 = *(unsigned __int8 *)(a1 + 448);
        if (*(_BYTE *)(a1 + 448))
        {
          v81 = 0;
          if (!*(_BYTE *)(a1 + 440))
          {
            v13 = 1;
            v82 = 1;
            *(_OWORD *)a1 = *(_OWORD *)v83;
            *(_QWORD *)v83 = 0;
            *(_QWORD *)&v83[8] = 0;
            v125 = 0;
LABEL_44:
            v124 = 0;
            if (v81)
            {
              *(_OWORD *)&v83[8] = v40;
              *(_QWORD *)v83 = v39;
              v84 = v41;
              v40 = 0uLL;
              v41 = 0;
              v85 = v42;
              LOBYTE(v86) = 0;
              v89 = 0;
              if (v46)
              {
                v86 = v43;
                v87 = v44;
                v44 = 0;
                v43 = 0uLL;
                v88 = v45;
                v89 = 1;
              }
              LOBYTE(v90) = 0;
              v93 = 0;
              if (v50)
              {
                v90 = v47;
                v91 = v48;
                v48 = 0;
                v47 = 0uLL;
                v92 = v49;
                v93 = 1;
              }
              LOBYTE(v94) = 0;
              v102 = 0;
              if (v59)
              {
                v94 = v51;
                v95 = v52;
                v96 = v53;
                v97 = v54;
                v98 = v55;
                v99 = v56;
                v100 = v57;
                v101 = v58;
                v58 = 0;
                v57 = 0uLL;
                v102 = 1;
              }
              LOBYTE(v103) = 0;
              v111 = 0;
              if (v68)
              {
                v103 = v60;
                v104 = v61;
                v60 = 0uLL;
                v105 = v62;
                v106 = v63;
                v61 = 0;
                v63 = 0uLL;
                v19 = v65;
                v20 = v64;
                v64 = 0;
                v65 = 0uLL;
                v108 = v19;
                v107 = v20;
                v109 = v66;
                v66 = 0;
                v110 = v67;
                v111 = 1;
              }
              LOBYTE(v112) = 0;
              v120 = 0;
              if (v77)
              {
                v112 = v69;
                v21 = v70;
                v22 = v71;
                v70 = 0;
                v71 = 0;
                v69 = 0uLL;
                v113 = v21;
                v114 = v22;
                v23 = v72;
                v72 = 0uLL;
                v118 = v75;
                v119 = v76;
                v116 = v73;
                v117 = v74;
                v115 = v23;
                v120 = 1;
              }
              LOBYTE(v121) = 0;
              v123 = 0;
              if (v80)
              {
                v121 = v78;
                v122 = v79;
                v79 = 0uLL;
                v78 = 0;
                v123 = 1;
              }
              v124 = 1;
              v125 = 1;
              v24 = v126;
              v126 = *v7;
              *v7 = v24;
              if (!v13)
                goto LABEL_85;
              goto LABEL_84;
            }
            v125 = 1;
LABEL_68:
            v25 = v126;
            v126 = *v7;
            v26 = v126;
            *v7 = v25;
            if (v26)
              goto LABEL_86;
            goto LABEL_94;
          }
          sub_22329ACE4((uint64_t)&v39, a1);
          v14 = 0;
          v13 = 1;
          v81 = 1;
          v15 = *(unsigned __int8 *)(a1 + 448);
          v16 = *(unsigned __int8 *)(a1 + 440);
          v82 = 1;
          if (v15 && v16)
          {
            sub_2232954B0(a1);
            v13 = v82;
            v17 = v82 == 0;
            *(_OWORD *)a1 = *(_OWORD *)v83;
            *(_QWORD *)v83 = 0;
            *(_QWORD *)&v83[8] = 0;
            v125 = 0;
            if (v17)
              goto LABEL_68;
            goto LABEL_44;
          }
        }
        else
        {
          v14 = 1;
        }
        *(_OWORD *)a1 = *(_OWORD *)v83;
        *(_QWORD *)v83 = 0;
        *(_QWORD *)&v83[8] = 0;
        v125 = 0;
        if (v14)
          goto LABEL_68;
        goto LABEL_44;
      }
      goto LABEL_40;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 1;
    v8 = *(unsigned __int8 *)(a1 + 456);
  }
  if (!v8)
    goto LABEL_20;
  v9 = *(unsigned __int8 *)(a1 + 448);
  if ((v3 != 0) == (*(_BYTE *)(a1 + 448) != 0))
  {
    if (!v3)
      goto LABEL_85;
    if ((v4 != 0) != (*(_BYTE *)(a1 + 440) != 0))
    {
      if (!v4)
      {
        sub_22329ACE4((uint64_t)v83, a1);
        v124 = 1;
        if (*(_BYTE *)(a1 + 440))
        {
          sub_2232954B0(a1);
          *(_BYTE *)(a1 + 440) = 0;
          if (v126)
            goto LABEL_86;
          goto LABEL_94;
        }
        goto LABEL_85;
      }
      sub_22329ACE4(a1, (uint64_t)v83);
      *(_BYTE *)(a1 + 440) = 1;
      if (!v124)
        goto LABEL_85;
      sub_2232954B0((uint64_t)v83);
      v124 = 0;
      if (v126)
        goto LABEL_86;
LABEL_94:
      v34 = *(std::__shared_weak_count **)&v83[8];
      if (*(_QWORD *)&v83[8])
      {
        v35 = (unint64_t *)(*(_QWORD *)&v83[8] + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      return a1;
    }
    if (!v4)
      goto LABEL_85;
    v39 = *(_QWORD *)v83;
    v40 = *(_OWORD *)&v83[8];
    v41 = v84;
    *(_QWORD *)&v83[8] = 0;
    *(_QWORD *)&v83[16] = 0;
    v84 = 0;
    v42 = v85;
    LOBYTE(v43) = 0;
    v46 = 0;
    if (v89)
    {
      v43 = v86;
      v44 = v87;
      v87 = 0;
      v86 = 0uLL;
      v45 = v88;
      v46 = 1;
    }
    LOBYTE(v47) = 0;
    v50 = 0;
    if (v93)
    {
      v47 = v90;
      v48 = v91;
      v91 = 0;
      v90 = 0uLL;
      v49 = v92;
      v50 = 1;
    }
    LOBYTE(v51) = 0;
    v59 = 0;
    if (v102)
    {
      v51 = v94;
      v52 = v95;
      v53 = v96;
      v54 = v97;
      v55 = v98;
      v56 = v99;
      v57 = v100;
      v58 = v101;
      v101 = 0;
      v100 = 0uLL;
      v59 = 1;
    }
    LOBYTE(v60) = 0;
    v68 = 0;
    if (v111)
    {
      v60 = v103;
      v61 = v104;
      v103 = 0uLL;
      v62 = v105;
      v63 = v106;
      v104 = 0;
      v106 = 0uLL;
      v65 = v108;
      v27 = v107;
      v28 = v109;
      v107 = 0;
      v64 = v27;
      v108 = 0uLL;
      v109 = 0;
      v66 = v28;
      v67 = v110;
      v68 = 1;
    }
    LOBYTE(v69) = 0;
    v77 = 0;
    if (v120)
    {
      v69 = v112;
      v29 = v113;
      v30 = v114;
      v114 = 0;
      v113 = 0;
      v112 = 0uLL;
      v70 = v29;
      v71 = v30;
      v31 = v115;
      v115 = 0uLL;
      v76 = v119;
      v75 = v118;
      v74 = v117;
      v72 = v31;
      v73 = v116;
      v77 = 1;
    }
    LOBYTE(v78) = 0;
    v80 = 0;
    if (v123)
    {
      v78 = v121;
      v79 = v122;
      v122 = 0uLL;
      v121 = 0;
      v80 = 1;
    }
    sub_2236232BC((uint64_t)v83, a1);
    sub_2236232BC(a1, (uint64_t)&v39);
LABEL_84:
    sub_2232954B0((uint64_t)&v39);
    goto LABEL_85;
  }
  if (!v3)
  {
    v83[0] = 0;
    v124 = 0;
    if (*(_BYTE *)(a1 + 440))
    {
      sub_22329ACE4((uint64_t)v83, a1);
      v124 = 1;
      v9 = *(unsigned __int8 *)(a1 + 448);
    }
    v125 = 1;
    if (v9)
    {
      if (*(_BYTE *)(a1 + 440))
        sub_2232954B0(a1);
      *(_BYTE *)(a1 + 448) = 0;
      if (!v126)
        goto LABEL_94;
      goto LABEL_86;
    }
    goto LABEL_85;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 440) = 0;
  if (v4)
  {
    sub_22329ACE4(a1, (uint64_t)v83);
    *(_BYTE *)(a1 + 440) = 1;
    v5 = v125;
  }
  *(_BYTE *)(a1 + 448) = 1;
  if (!v5)
  {
LABEL_85:
    if (v126)
      goto LABEL_86;
    goto LABEL_94;
  }
  if (v124)
    sub_2232954B0((uint64_t)v83);
  v125 = 0;
  if (!v126)
    goto LABEL_94;
LABEL_86:
  if (v125 && v124)
    sub_2232954B0((uint64_t)v83);
  return a1;
}

uint64_t sub_223602658(uint64_t a1)
{
  BOOL v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_BYTE *)(a1 + 456))
  {
    if (*(_BYTE *)(a1 + 448))
      v2 = *(_BYTE *)(a1 + 440) == 0;
    else
      v2 = 1;
    if (!v2)
      sub_2232954B0(a1);
    return a1;
  }
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    return a1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t sub_2236026E4(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  size_t v20;
  const char *v21;
  unsigned __int8 v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  size_t v29;
  const char *v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  const char *v33;
  size_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t *v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  std::__shared_weak_count_vtbl *v43;
  std::__shared_weak_count *v44;
  size_t v45;
  size_t v46;
  _QWORD *v47;
  void *v48;
  unsigned __int8 v49;
  const char *v50;
  size_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  float32x4_t *v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  size_t v59;
  std::__shared_weak_count_vtbl *v60;
  std::__shared_weak_count *v61;
  size_t v62;
  size_t v63;
  _QWORD *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char v69;
  _QWORD *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  char v118;
  _QWORD *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  _QWORD *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v174;
  int v175;
  const char *v176;
  int v177;
  const char *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  uint64_t v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  void *__p[2];
  std::__shared_weak_count *v187;
  char *v188;
  std::__shared_weak_count *v189;
  _QWORD *v190;
  __int128 v191;
  _BYTE v192[24];
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  char __s[37];
  _QWORD v198[5];

  v198[2] = *MEMORY[0x24BDAC8D0];
  if (!*a2
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 831, (uint64_t)"keyframing_result_ptr", 21, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v4 = (std::__shared_weak_count *)a1[134];
  v184 = a1[133];
  v185 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = a1[135];
  v8 = (std::__shared_weak_count *)a1[136];
  v182 = v7;
  v183 = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *a2;
  v12 = *(_QWORD *)(*a2 + 2160);
  v13 = *(_QWORD *)(v11 + 2168);
  if (v12 != v13)
  {
    v171 = *(_QWORD *)(v11 + 2168);
    while (1)
    {
      if (*(_BYTE *)(v12 + 152))
      {
        v14 = v184;
        if (v184)
        {
          sub_2235F8ED4(&v181);
          if (**(int **)(v181 + 56) > 3)
            goto LABEL_178;
          v15 = *(unsigned __int8 *)(v181 + 72);
          v16 = sub_22322F254(v181, "OSLogSurrogateAppender", 1, 0);
          v17 = v16;
          if (!v15 && v16 == 0)
            goto LABEL_178;
          v172 = &v181;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v174 = std::chrono::system_clock::now().__d_.__rep_;
          v175 = 3;
          v176 = "unknown file";
          v177 = 839;
          v178 = "unknown function";
          v179 = 0;
          v180 = 0;
          sub_2245664AC((unsigned __int8 *)v12, __s);
          v19 = *v172;
          if (*(char *)(*v172 + 39) < 0)
          {
            v21 = *(const char **)(v19 + 16);
            v20 = *(_QWORD *)(v19 + 24);
            v169 = *v172 + 16;
            v32 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v32 & 1) == 0)
            {
LABEL_259:
              if (__cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)__p);
                sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
                if ((_BYTE)v188 && SHIBYTE(v187) < 0)
                  operator delete(__p[0]);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
                v13 = v171;
              }
            }
          }
          else
          {
            v20 = *(unsigned __int8 *)(*v172 + 39);
            v21 = (const char *)(*v172 + 16);
            v169 = (uint64_t)v21;
            v22 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v22 & 1) == 0)
              goto LABEL_259;
          }
          if (byte_255788F57 >= 0)
            v33 = (const char *)&xmmword_255788F40;
          else
            v33 = (const char *)xmmword_255788F40;
          if (byte_255788F57 >= 0)
            v34 = byte_255788F57;
          else
            v34 = *((_QWORD *)&xmmword_255788F40 + 1);
          *(_QWORD *)v192 = os_log_create(v33, v21);
          if (v34 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v34 >= 0x17)
          {
            v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v34 | 7) != 0x17)
              v36 = v34 | 7;
            v37 = v36 + 1;
            v35 = operator new(v36 + 1);
            *(_QWORD *)&v192[16] = v34;
            v193.i64[0] = v37 | 0x8000000000000000;
            *(_QWORD *)&v192[8] = v35;
            v13 = v171;
          }
          else
          {
            v193.i8[7] = v34;
            v35 = &v192[8];
            if (!v34)
            {
LABEL_46:
              v35[v34] = 0;
              v193.i8[8] = 1;
              if (v20 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v20 >= 0x17)
              {
                v40 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v20 | 7) != 0x17)
                  v40 = v20 | 7;
                v41 = v40 + 1;
                v38 = (float32x4_t *)operator new(v40 + 1);
                v194.i64[1] = v20;
                v195.i64[0] = v41 | 0x8000000000000000;
                v194.i64[0] = (uint64_t)v38;
                v13 = v171;
              }
              else
              {
                v195.i8[7] = v20;
                v38 = &v194;
                if (!v20)
                {
                  v194.i8[0] = 0;
                  v195.i8[8] = 1;
                  v39 = *(NSObject **)v192;
                  if ((v195.i8[7] & 0x80000000) == 0)
                    goto LABEL_50;
LABEL_56:
                  operator delete((void *)v194.i64[0]);
                  if (v193.i8[8])
                    goto LABEL_57;
                  goto LABEL_59;
                }
              }
              memmove(v38, v21, v20);
              v38->i8[v20] = 0;
              v195.i8[8] = 1;
              v39 = *(NSObject **)v192;
              if (v195.i8[7] < 0)
                goto LABEL_56;
LABEL_50:
              if (v193.i8[8])
              {
LABEL_57:
                if (v193.i8[7] < 0)
                  operator delete(*(void **)&v192[8]);
              }
LABEL_59:
              if (*(_QWORD *)v192)
                os_release(*(void **)v192);
              if (v17 && *(_QWORD *)(v17 + 24))
              {
                v42 = _os_log_pack_size();
                v43 = (std::__shared_weak_count_vtbl *)operator new(v42, (std::align_val_t)8uLL);
                v44 = (std::__shared_weak_count *)operator new();
                v44->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v44->__shared_owners_ = 0;
                v44->__shared_weak_owners_ = 0;
                v44[1].__vftable = v43;
                __p[0] = v43;
                __p[1] = v43;
                v187 = v44;
                v188 = 0;
                v189 = 0;
                v45 = strlen(__s);
                if (v45 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v46 = v45;
                if (v45 >= 0x17)
                {
                  v66 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v45 | 7) != 0x17)
                    v66 = v45 | 7;
                  v67 = v66 + 1;
                  v47 = operator new(v66 + 1);
                  *(_QWORD *)&v191 = v46;
                  *((_QWORD *)&v191 + 1) = v67 | 0x8000000000000000;
                  v190 = v47;
                }
                else
                {
                  HIBYTE(v191) = v45;
                  v47 = &v190;
                  if (!v45)
                    goto LABEL_113;
                }
                memcpy(v47, __s, v46);
LABEL_113:
                *((_BYTE *)v47 + v46) = 0;
                v68 = v190;
                v198[0] = v191;
                *(_QWORD *)((char *)v198 + 7) = *(_QWORD *)((char *)&v191 + 7);
                v69 = HIBYTE(v191);
                v70 = operator new(0x38uLL);
                v70[1] = 0;
                v70[2] = 0;
                v70[3] = off_24EC1FA48;
                *v70 = &off_24EC1F9F8;
                v71 = v198[0];
                v70[4] = v68;
                v70[5] = v71;
                *(_QWORD *)((char *)v70 + 47) = *(_QWORD *)((char *)v198 + 7);
                *((_BYTE *)v70 + 55) = v69;
                v198[0] = 0;
                *(_QWORD *)((char *)v198 + 7) = 0;
                v72 = v189;
                v188 = (char *)(v70 + 3);
                v189 = (std::__shared_weak_count *)v70;
                if (v72)
                {
                  v73 = (unint64_t *)&v72->__shared_owners_;
                  do
                    v74 = __ldaxr(v73);
                  while (__stlxr(v74 - 1, v73));
                  if (!v74)
                  {
                    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                    std::__shared_weak_count::__release_weak(v72);
                  }
                }
                *(_OWORD *)v192 = *(_OWORD *)__p;
                v75 = (uint64_t)v188;
                *(_QWORD *)&v192[16] = v187;
                if (v187)
                {
                  v76 = (unint64_t *)&v187->__shared_owners_;
                  do
                    v77 = __ldxr(v76);
                  while (__stxr(v77 + 1, v76));
                }
                v78 = v189;
                v193.i64[0] = v75;
                v193.i64[1] = (uint64_t)v189;
                if (v189)
                {
                  v79 = (unint64_t *)&v189->__shared_owners_;
                  do
                    v80 = __ldxr(v79);
                  while (__stxr(v80 + 1, v79));
                  v194.i64[0] = v75;
                  do
                    v81 = __ldaxr(v79);
                  while (__stlxr(v81 - 1, v79));
                  if (!v81)
                  {
                    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                    std::__shared_weak_count::__release_weak(v78);
                  }
                }
                else
                {
                  v194.i64[0] = v75;
                }
                v82 = v187;
                if (v187)
                {
                  v83 = (unint64_t *)&v187->__shared_owners_;
                  do
                    v84 = __ldaxr(v83);
                  while (__stlxr(v84 - 1, v83));
                  if (!v84)
                  {
                    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                    std::__shared_weak_count::__release_weak(v82);
                  }
                }
                v85 = *(_QWORD *)v192;
                if (*(char *)(v194.i64[0] + 31) >= 0)
                  v86 = v194.i64[0] + 8;
                else
                  v86 = *(_QWORD *)(v194.i64[0] + 8);
                v87 = _os_log_pack_fill();
                *(_DWORD *)v87 = 136315138;
                *(_QWORD *)(v87 + 4) = v86;
                v88 = (char *)operator new();
                v89 = *(unsigned __int8 *)(v19 + 39);
                v90 = v169;
                if ((v89 & 0x80u) != 0)
                {
                  v90 = *(_QWORD *)(v19 + 16);
                  v89 = *(_QWORD *)(v19 + 24);
                }
                *(_QWORD *)v88 = v85;
                *(_OWORD *)(v88 + 8) = *(_OWORD *)&v192[8];
                *(_QWORD *)&v192[8] = 0;
                *(_QWORD *)&v192[16] = 0;
                *(float32x4_t *)(v88 + 24) = v193;
                v193 = 0uLL;
                *((_QWORD *)v88 + 5) = v90;
                *((_QWORD *)v88 + 6) = v89;
                v88[56] = 1;
                v190 = 0;
                __p[0] = v88;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v17 + 24) + 40))(*(_QWORD *)(v17 + 24), __p);
                v91 = __p[0];
                __p[0] = 0;
                if (v91)
                {
                  v92 = (std::__shared_weak_count *)*((_QWORD *)v91 + 4);
                  if (v92)
                  {
                    v93 = (unint64_t *)&v92->__shared_owners_;
                    do
                      v94 = __ldaxr(v93);
                    while (__stlxr(v94 - 1, v93));
                    if (!v94)
                    {
                      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                      std::__shared_weak_count::__release_weak(v92);
                    }
                  }
                  v95 = (std::__shared_weak_count *)*((_QWORD *)v91 + 2);
                  if (v95)
                  {
                    v96 = (unint64_t *)&v95->__shared_owners_;
                    do
                      v97 = __ldaxr(v96);
                    while (__stlxr(v97 - 1, v96));
                    if (!v97)
                    {
                      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                      std::__shared_weak_count::__release_weak(v95);
                    }
                  }
                  MEMORY[0x227684CE8](v91, 0x10F0C40B62ED6C6);
                  v98 = v190;
                  v190 = 0;
                  if (v98)
                  {
                    v99 = (std::__shared_weak_count *)v98[4];
                    if (v99)
                    {
                      v100 = (unint64_t *)&v99->__shared_owners_;
                      do
                        v101 = __ldaxr(v100);
                      while (__stlxr(v101 - 1, v100));
                      if (!v101)
                      {
                        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                        std::__shared_weak_count::__release_weak(v99);
                      }
                    }
                    v102 = (std::__shared_weak_count *)v98[2];
                    if (v102)
                    {
                      v103 = (unint64_t *)&v102->__shared_owners_;
                      do
                        v104 = __ldaxr(v103);
                      while (__stlxr(v104 - 1, v103));
                      if (!v104)
                      {
                        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                        std::__shared_weak_count::__release_weak(v102);
                      }
                    }
                    MEMORY[0x227684CE8](v98, 0x10F0C40B62ED6C6);
                  }
                }
                v105 = (std::__shared_weak_count *)v193.i64[1];
                if (v193.i64[1])
                {
                  v106 = (unint64_t *)(v193.i64[1] + 8);
                  do
                    v107 = __ldaxr(v106);
                  while (__stlxr(v107 - 1, v106));
                  if (!v107)
                  {
                    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                    std::__shared_weak_count::__release_weak(v105);
                    v108 = *(std::__shared_weak_count **)&v192[16];
                    if (*(_QWORD *)&v192[16])
                      goto LABEL_167;
                    goto LABEL_170;
                  }
                }
                v108 = *(std::__shared_weak_count **)&v192[16];
                if (!*(_QWORD *)&v192[16])
                  goto LABEL_170;
LABEL_167:
                v109 = (unint64_t *)&v108->__shared_owners_;
                do
                  v110 = __ldaxr(v109);
                while (__stlxr(v110 - 1, v109));
                if (v110)
                {
LABEL_170:
                  if (v15)
                    goto LABEL_171;
LABEL_172:
                  sub_223182C08((uint64_t)&v172);
                  v111 = v180;
                  if (v180)
                  {
                    v112 = (unint64_t *)&v180->__shared_owners_;
                    do
                      v113 = __ldaxr(v112);
                    while (__stlxr(v113 - 1, v112));
                    if (!v113)
                    {
                      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                      std::__shared_weak_count::__release_weak(v111);
                    }
                  }
                  v14 = v184;
LABEL_178:
                  *(_OWORD *)v192 = *(_OWORD *)v12;
                  *(_QWORD *)&v192[16] = *(_QWORD *)(v12 + 16);
                  v193 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v12 + 24)), *(float64x2_t *)(v12 + 40));
                  v194 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v12 + 56)), *(float64x2_t *)(v12 + 72));
                  v195 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v12 + 88)), *(float64x2_t *)(v12 + 104));
                  v196 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v12 + 120)), *(float64x2_t *)(v12 + 136));
                  v114 = *(_QWORD *)(v14 + 24);
                  if (!v114)
                    sub_223198474();
                  goto LABEL_179;
                }
                ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                std::__shared_weak_count::__release_weak(v108);
                if (!v15)
                  goto LABEL_172;
              }
              else
              {
                os_log_type_enabled(v39, OS_LOG_TYPE_INFO);
                *(_DWORD *)v192 = 136315138;
                *(_QWORD *)&v192[4] = __s;
                v48 = (void *)_os_log_send_and_compose_impl();
                if (!v48)
                  goto LABEL_170;
                free(v48);
                if (!v15)
                  goto LABEL_172;
              }
LABEL_171:
              sub_2245664AC((unsigned __int8 *)v12, v192);
              sub_22322C138((uint64_t)&v172, "added keyframe (%s), notifying slam", v192);
              sub_223182C08((uint64_t)&v172);
              goto LABEL_172;
            }
          }
          memmove(v35, v33, v34);
          goto LABEL_46;
        }
      }
      else
      {
        v23 = v182;
        if (v182)
        {
          sub_2235F8ED4(&v181);
          if (**(int **)(v181 + 56) > 3)
            goto LABEL_253;
          v24 = *(unsigned __int8 *)(v181 + 72);
          v25 = sub_22322F254(v181, "OSLogSurrogateAppender", 1, 0);
          v26 = v25;
          if (!v24 && v25 == 0)
            goto LABEL_253;
          v172 = &v181;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v174 = std::chrono::system_clock::now().__d_.__rep_;
          v175 = 3;
          v176 = "unknown file";
          v177 = 845;
          v178 = "unknown function";
          v179 = 0;
          v180 = 0;
          sub_2245664AC((unsigned __int8 *)v12, __s);
          v28 = *v172;
          if (*(char *)(*v172 + 39) < 0)
          {
            v30 = *(const char **)(v28 + 16);
            v29 = *(_QWORD *)(v28 + 24);
            v170 = *v172 + 16;
            v49 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v49 & 1) == 0)
            {
LABEL_264:
              if (__cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)__p);
                sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
                if ((_BYTE)v188 && SHIBYTE(v187) < 0)
                  operator delete(__p[0]);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
                v13 = v171;
              }
            }
          }
          else
          {
            v29 = *(unsigned __int8 *)(*v172 + 39);
            v30 = (const char *)(*v172 + 16);
            v170 = (uint64_t)v30;
            v31 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v31 & 1) == 0)
              goto LABEL_264;
          }
          if (byte_255788F57 >= 0)
            v50 = (const char *)&xmmword_255788F40;
          else
            v50 = (const char *)xmmword_255788F40;
          if (byte_255788F57 >= 0)
            v51 = byte_255788F57;
          else
            v51 = *((_QWORD *)&xmmword_255788F40 + 1);
          *(_QWORD *)v192 = os_log_create(v50, v30);
          if (v51 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v51 >= 0x17)
          {
            v53 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v51 | 7) != 0x17)
              v53 = v51 | 7;
            v54 = v53 + 1;
            v52 = operator new(v53 + 1);
            *(_QWORD *)&v192[16] = v51;
            v193.i64[0] = v54 | 0x8000000000000000;
            *(_QWORD *)&v192[8] = v52;
            v13 = v171;
          }
          else
          {
            v193.i8[7] = v51;
            v52 = &v192[8];
            if (!v51)
            {
LABEL_85:
              v52[v51] = 0;
              v193.i8[8] = 1;
              if (v29 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v29 >= 0x17)
              {
                v57 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v29 | 7) != 0x17)
                  v57 = v29 | 7;
                v58 = v57 + 1;
                v55 = (float32x4_t *)operator new(v57 + 1);
                v194.i64[1] = v29;
                v195.i64[0] = v58 | 0x8000000000000000;
                v194.i64[0] = (uint64_t)v55;
                v13 = v171;
              }
              else
              {
                v195.i8[7] = v29;
                v55 = &v194;
                if (!v29)
                {
                  v194.i8[0] = 0;
                  v195.i8[8] = 1;
                  v56 = *(NSObject **)v192;
                  if ((v195.i8[7] & 0x80000000) == 0)
                    goto LABEL_89;
LABEL_95:
                  operator delete((void *)v194.i64[0]);
                  if (v193.i8[8])
                    goto LABEL_96;
                  goto LABEL_98;
                }
              }
              memmove(v55, v30, v29);
              v55->i8[v29] = 0;
              v195.i8[8] = 1;
              v56 = *(NSObject **)v192;
              if (v195.i8[7] < 0)
                goto LABEL_95;
LABEL_89:
              if (v193.i8[8])
              {
LABEL_96:
                if (v193.i8[7] < 0)
                  operator delete(*(void **)&v192[8]);
              }
LABEL_98:
              if (*(_QWORD *)v192)
                os_release(*(void **)v192);
              if (v26 && *(_QWORD *)(v26 + 24))
              {
                v59 = _os_log_pack_size();
                v60 = (std::__shared_weak_count_vtbl *)operator new(v59, (std::align_val_t)8uLL);
                v61 = (std::__shared_weak_count *)operator new();
                v61->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v61->__shared_owners_ = 0;
                v61->__shared_weak_owners_ = 0;
                v61[1].__vftable = v60;
                __p[0] = v60;
                __p[1] = v60;
                v187 = v61;
                v188 = 0;
                v189 = 0;
                v62 = strlen(__s);
                if (v62 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v63 = v62;
                if (v62 >= 0x17)
                {
                  v115 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v62 | 7) != 0x17)
                    v115 = v62 | 7;
                  v116 = v115 + 1;
                  v64 = operator new(v115 + 1);
                  *(_QWORD *)&v191 = v63;
                  *((_QWORD *)&v191 + 1) = v116 | 0x8000000000000000;
                  v190 = v64;
                }
                else
                {
                  HIBYTE(v191) = v62;
                  v64 = &v190;
                  if (!v62)
                    goto LABEL_184;
                }
                memcpy(v64, __s, v63);
LABEL_184:
                *((_BYTE *)v64 + v63) = 0;
                v117 = v190;
                v198[0] = v191;
                *(_QWORD *)((char *)v198 + 7) = *(_QWORD *)((char *)&v191 + 7);
                v118 = HIBYTE(v191);
                v119 = operator new(0x38uLL);
                v119[1] = 0;
                v119[2] = 0;
                v119[3] = off_24EC1FA48;
                *v119 = &off_24EC1F9F8;
                v120 = v198[0];
                v119[4] = v117;
                v119[5] = v120;
                *(_QWORD *)((char *)v119 + 47) = *(_QWORD *)((char *)v198 + 7);
                *((_BYTE *)v119 + 55) = v118;
                v198[0] = 0;
                *(_QWORD *)((char *)v198 + 7) = 0;
                v121 = v189;
                v188 = (char *)(v119 + 3);
                v189 = (std::__shared_weak_count *)v119;
                if (v121)
                {
                  v122 = (unint64_t *)&v121->__shared_owners_;
                  do
                    v123 = __ldaxr(v122);
                  while (__stlxr(v123 - 1, v122));
                  if (!v123)
                  {
                    ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                    std::__shared_weak_count::__release_weak(v121);
                  }
                }
                *(_OWORD *)v192 = *(_OWORD *)__p;
                v124 = (uint64_t)v188;
                *(_QWORD *)&v192[16] = v187;
                if (v187)
                {
                  v125 = (unint64_t *)&v187->__shared_owners_;
                  do
                    v126 = __ldxr(v125);
                  while (__stxr(v126 + 1, v125));
                }
                v127 = v189;
                v193.i64[0] = v124;
                v193.i64[1] = (uint64_t)v189;
                if (v189)
                {
                  v128 = (unint64_t *)&v189->__shared_owners_;
                  do
                    v129 = __ldxr(v128);
                  while (__stxr(v129 + 1, v128));
                  v194.i64[0] = v124;
                  do
                    v130 = __ldaxr(v128);
                  while (__stlxr(v130 - 1, v128));
                  if (!v130)
                  {
                    ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                    std::__shared_weak_count::__release_weak(v127);
                  }
                }
                else
                {
                  v194.i64[0] = v124;
                }
                v131 = v187;
                if (v187)
                {
                  v132 = (unint64_t *)&v187->__shared_owners_;
                  do
                    v133 = __ldaxr(v132);
                  while (__stlxr(v133 - 1, v132));
                  if (!v133)
                  {
                    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                    std::__shared_weak_count::__release_weak(v131);
                  }
                }
                v134 = *(_QWORD *)v192;
                if (*(char *)(v194.i64[0] + 31) >= 0)
                  v135 = v194.i64[0] + 8;
                else
                  v135 = *(_QWORD *)(v194.i64[0] + 8);
                v136 = _os_log_pack_fill();
                *(_DWORD *)v136 = 136315138;
                *(_QWORD *)(v136 + 4) = v135;
                v137 = (char *)operator new();
                v138 = *(unsigned __int8 *)(v28 + 39);
                v139 = v170;
                if ((v138 & 0x80u) != 0)
                {
                  v139 = *(_QWORD *)(v28 + 16);
                  v138 = *(_QWORD *)(v28 + 24);
                }
                *(_QWORD *)v137 = v134;
                *(_OWORD *)(v137 + 8) = *(_OWORD *)&v192[8];
                *(_QWORD *)&v192[8] = 0;
                *(_QWORD *)&v192[16] = 0;
                *(float32x4_t *)(v137 + 24) = v193;
                v193 = 0uLL;
                *((_QWORD *)v137 + 5) = v139;
                *((_QWORD *)v137 + 6) = v138;
                v137[56] = 1;
                v190 = 0;
                __p[0] = v137;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v26 + 24) + 40))(*(_QWORD *)(v26 + 24), __p);
                v140 = __p[0];
                __p[0] = 0;
                if (v140)
                {
                  v141 = (std::__shared_weak_count *)*((_QWORD *)v140 + 4);
                  if (v141)
                  {
                    v142 = (unint64_t *)&v141->__shared_owners_;
                    do
                      v143 = __ldaxr(v142);
                    while (__stlxr(v143 - 1, v142));
                    if (!v143)
                    {
                      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                      std::__shared_weak_count::__release_weak(v141);
                    }
                  }
                  v144 = (std::__shared_weak_count *)*((_QWORD *)v140 + 2);
                  if (v144)
                  {
                    v145 = (unint64_t *)&v144->__shared_owners_;
                    do
                      v146 = __ldaxr(v145);
                    while (__stlxr(v146 - 1, v145));
                    if (!v146)
                    {
                      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                      std::__shared_weak_count::__release_weak(v144);
                    }
                  }
                  MEMORY[0x227684CE8](v140, 0x10F0C40B62ED6C6);
                  v147 = v190;
                  v190 = 0;
                  if (v147)
                  {
                    v148 = (std::__shared_weak_count *)v147[4];
                    if (v148)
                    {
                      v149 = (unint64_t *)&v148->__shared_owners_;
                      do
                        v150 = __ldaxr(v149);
                      while (__stlxr(v150 - 1, v149));
                      if (!v150)
                      {
                        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                        std::__shared_weak_count::__release_weak(v148);
                      }
                    }
                    v151 = (std::__shared_weak_count *)v147[2];
                    if (v151)
                    {
                      v152 = (unint64_t *)&v151->__shared_owners_;
                      do
                        v153 = __ldaxr(v152);
                      while (__stlxr(v153 - 1, v152));
                      if (!v153)
                      {
                        ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                        std::__shared_weak_count::__release_weak(v151);
                      }
                    }
                    MEMORY[0x227684CE8](v147, 0x10F0C40B62ED6C6);
                  }
                }
                v154 = (std::__shared_weak_count *)v193.i64[1];
                if (v193.i64[1])
                {
                  v155 = (unint64_t *)(v193.i64[1] + 8);
                  do
                    v156 = __ldaxr(v155);
                  while (__stlxr(v156 - 1, v155));
                  if (!v156)
                  {
                    ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                    std::__shared_weak_count::__release_weak(v154);
                    v157 = *(std::__shared_weak_count **)&v192[16];
                    if (*(_QWORD *)&v192[16])
                      goto LABEL_242;
                    goto LABEL_245;
                  }
                }
                v157 = *(std::__shared_weak_count **)&v192[16];
                if (!*(_QWORD *)&v192[16])
                  goto LABEL_245;
LABEL_242:
                v158 = (unint64_t *)&v157->__shared_owners_;
                do
                  v159 = __ldaxr(v158);
                while (__stlxr(v159 - 1, v158));
                if (v159)
                {
LABEL_245:
                  if (v24)
                    goto LABEL_246;
LABEL_247:
                  sub_223182C08((uint64_t)&v172);
                  v160 = v180;
                  if (v180)
                  {
                    v161 = (unint64_t *)&v180->__shared_owners_;
                    do
                      v162 = __ldaxr(v161);
                    while (__stlxr(v162 - 1, v161));
                    if (!v162)
                    {
                      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                      std::__shared_weak_count::__release_weak(v160);
                    }
                  }
                  v23 = v182;
LABEL_253:
                  *(_OWORD *)v192 = *(_OWORD *)v12;
                  v114 = *(_QWORD *)(v23 + 24);
                  if (!v114)
                    sub_223198474();
LABEL_179:
                  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v114 + 48))(v114, v192);
                  goto LABEL_11;
                }
                ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                std::__shared_weak_count::__release_weak(v157);
                if (!v24)
                  goto LABEL_247;
              }
              else
              {
                os_log_type_enabled(v56, OS_LOG_TYPE_INFO);
                *(_DWORD *)v192 = 136315138;
                *(_QWORD *)&v192[4] = __s;
                v65 = (void *)_os_log_send_and_compose_impl();
                if (!v65)
                  goto LABEL_245;
                free(v65);
                if (!v24)
                  goto LABEL_247;
              }
LABEL_246:
              sub_2245664AC((unsigned __int8 *)v12, v192);
              sub_22322C138((uint64_t)&v172, "keyframe (%s) has been pruned, notifying slam", v192);
              sub_223182C08((uint64_t)&v172);
              goto LABEL_247;
            }
          }
          memmove(v52, v50, v51);
          goto LABEL_85;
        }
      }
LABEL_11:
      v12 += 160;
      if (v12 == v13)
      {
        v8 = v183;
        break;
      }
    }
  }
  if (v8)
  {
    v163 = (unint64_t *)&v8->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v165 = v185;
  if (v185)
  {
    v166 = (unint64_t *)&v185->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  return 1;
}

void sub_223603A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,char a45)
{
  if (a43)
  {
    if (a42 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a23);
  sub_223167354((uint64_t)&a33);
  sub_223167354((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_223603C88(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  std::mutex *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::string::size_type v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  char v28;
  std::string *v29;
  uint64_t v30;
  uint64_t v31;
  std::string *v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *size;
  unint64_t *v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  BOOL v45;
  std::string::size_type v46;
  int v47;
  size_t v48;
  void **v49;
  unint64_t v50;
  unint64_t v51;
  const void **v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  std::string::size_type v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *p_category;
  uint64_t v61;
  const char *v62;
  size_t v63;
  unsigned __int8 v64;
  const char *v65;
  size_t v66;
  std::string::size_type *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  size_t v75;
  void *v76;
  _QWORD *v77;
  size_t v78;
  size_t v79;
  void **v80;
  int v81;
  char *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  void **v86;
  char v87;
  char *v88;
  void *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  char *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::string::size_type v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  std::string::size_type v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  void **v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  int v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void **v140;
  uint64_t v141;
  const char *v142;
  size_t v143;
  __int128 *v144;
  size_t v145;
  unsigned __int8 v146;
  size_t v147;
  const char *v148;
  const char *v149;
  std::string::size_type *p_size;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  NSObject *v156;
  size_t v157;
  void *v158;
  _QWORD *v159;
  size_t v160;
  size_t v161;
  void **p_dst;
  void *v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  void **v167;
  char v168;
  _QWORD *v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  char *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::string::size_type v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  const char *v189;
  std::string::size_type v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  void **v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::string *v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  std::__shared_weak_count *v228;
  std::__shared_weak_count *v229;
  std::string::size_type v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::runtime_error *exception;
  std::runtime_error *v237;
  std::exception_ptr v238;
  std::runtime_error *v239;
  std::runtime_error *v240;
  const char *v241;
  const char *v242;
  uint64_t v243;
  int v244;
  int v245;
  const char *v246;
  const char *v247;
  _BYTE __p[32];
  __int128 v249;
  CFTypeRef cf[2];
  __int128 v251;
  uint64_t v252;
  char *category;
  std::__shared_weak_count *v254;
  char v255;
  char v256;
  std::__fs::filesystem::path v257;
  std::__fs::filesystem::path v258;
  __int128 v259;
  uint64_t v260;
  char v261;
  __int128 v262;
  uint64_t v263;
  __int128 theDict;
  std::string v265;
  int v266;
  const char *v267;
  int v268;
  const char *v269;
  uint64_t v270;
  std::__shared_weak_count *v271;
  std::exception_ptr v272;
  std::unique_lock<std::mutex> __lk;
  void **__dst;
  __int128 v275;
  void *v276[2];
  char v277;
  std::string v278;
  __int128 v279;
  char *v280;
  size_t v281;
  unint64_t v282;
  char v283;
  _QWORD v284[2];
  std::string v285;
  char *v286;
  std::__shared_weak_count *v287;
  uint64_t v288;

  v288 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 72);
  v5 = operator new();
  *(_QWORD *)(v5 + 8) = 0;
  v6 = (unint64_t *)(v5 + 8);
  *(_QWORD *)(v5 + 24) = 850045863;
  v7 = (std::mutex *)(v5 + 24);
  *(_QWORD *)(v5 + 16) = 0;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 1018212795;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 124) = 0u;
  *(_QWORD *)v5 = &off_24EC55778;
  v285.__r_.__value_.__r.__words[0] = v5;
  std::mutex::lock((std::mutex *)(v5 + 24));
  v8 = *(_DWORD *)(v5 + 136);
  if ((v8 & 2) != 0)
    sub_2233236D4(1u);
  do
    v9 = __ldxr(v6);
  while (__stxr(v9 + 1, v6));
  *(_DWORD *)(v5 + 136) = v8 | 2;
  std::mutex::unlock(v7);
  *(_OWORD *)&v265.__r_.__value_.__l.__data_ = 0uLL;
  v10 = *(std::__shared_weak_count **)(v4 + 112);
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v265.__r_.__value_.__l.__size_ = (std::string::size_type)v11) == 0)
    || (v12 = v11, v13 = *(_QWORD *)(v4 + 104), (v265.__r_.__value_.__r.__words[0] = v13) == 0))
  {
    std::runtime_error::runtime_error((std::runtime_error *)&v278, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v278.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v237 = std::runtime_error::runtime_error(exception, (const std::runtime_error *)&v278);
    v237->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v237, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v278.__r_.__value_.__r.__words[0] = v285.__r_.__value_.__r.__words[0];
  v285.__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(std::string::size_type, uint64_t, std::string *))(*(_QWORD *)v13 + 56))(v13, a2, &v278);
  sub_223623B70((uint64_t *)&v278);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  sub_223623B70((uint64_t *)&v285);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v5 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock(v7);
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v5, &__lk);
  v16 = *(_QWORD *)(v5 + 16);
  v265.__r_.__value_.__r.__words[0] = 0;
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&v265);
  if (v16)
  {
    std::exception_ptr::exception_ptr(&v272, (const std::exception_ptr *)(v5 + 16));
    v238.__ptr_ = &v272;
    std::rethrow_exception(v238);
    __break(1u);
    return;
  }
  theDict = *(_OWORD *)(v5 + 144);
  *(_QWORD *)(v5 + 144) = 0;
  *(_QWORD *)(v5 + 152) = 0;
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  do
    v17 = __ldaxr(v6);
  while (__stlxr(v17 - 1, v6));
  if (!v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  if (*(_BYTE *)(a1 + 161))
  {
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      if (!*((_QWORD *)&theDict + 1))
        goto LABEL_23;
      v18 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&theDict + 1) + 16))(*((_QWORD *)&theDict + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&theDict + 1));
        if (!(_QWORD)theDict)
          goto LABEL_423;
      }
      else
      {
LABEL_23:
        if (!(_QWORD)theDict)
          goto LABEL_423;
      }
      if (CFDictionaryGetCount((CFDictionaryRef)theDict))
      {
        sub_224528E18((uint64_t)&v265, (uint64_t)&theDict);
        v21 = sub_224529CD4((uint64_t)&v265);
        if (*(char *)(v21 + 23) < 0)
        {
          sub_223197FA4(&v262, *(void **)v21, *(_QWORD *)(v21 + 8));
        }
        else
        {
          v262 = *(_OWORD *)v21;
          v263 = *(_QWORD *)(v21 + 16);
        }
        v22 = (std::__shared_weak_count *)v269;
        if (v269)
        {
          v23 = (unint64_t *)(v269 + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v25 = (std::__shared_weak_count *)v267;
        if (v267)
        {
          v26 = (unint64_t *)(v267 + 8);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        LOBYTE(v259) = 0;
        v261 = 0;
        if (!*(_BYTE *)(a1 + 152))
          sub_22324A974();
        memset(&v278, 0, sizeof(v278));
        v28 = *(_BYTE *)(a1 + 151);
        if (v28 >= 0)
          v29 = (std::string *)(a1 + 128);
        else
          v29 = *(std::string **)(a1 + 128);
        if (v28 >= 0)
          v30 = *(unsigned __int8 *)(a1 + 151);
        else
          v30 = *(_QWORD *)(a1 + 136);
        sub_2231816F0(&v278, v29, (std::string *)((char *)v29 + v30));
        memset(__p, 0, 24);
        sub_2231816F0((std::string *)__p, (std::string *)"failure_snapshots", (std::string *)"");
        if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v265, v278.__r_.__value_.__l.__data_, v278.__r_.__value_.__l.__size_);
        else
          v265 = v278;
        sub_22319C30C((uint64_t)&v265, (std::__fs::filesystem::path *)__p);
        memset(&v285, 0, sizeof(v285));
        v31 = HIBYTE(v263);
        if (v263 >= 0)
          v32 = (std::string *)&v262;
        else
          v32 = (std::string *)v262;
        if (v263 < 0)
          v31 = *((_QWORD *)&v262 + 1);
        sub_2231816F0(&v285, v32, (std::string *)((char *)v32 + v31));
        if (SHIBYTE(v265.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v258, v265.__r_.__value_.__l.__data_, v265.__r_.__value_.__l.__size_);
        else
          v258 = (std::__fs::filesystem::path)v265;
        sub_22319C30C((uint64_t)&v258, (std::__fs::filesystem::path *)&v285);
        if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v285.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v265.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_60:
            if ((__p[23] & 0x80000000) == 0)
              goto LABEL_61;
            goto LABEL_66;
          }
        }
        else if ((SHIBYTE(v265.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_60;
        }
        operator delete(v265.__r_.__value_.__l.__data_);
        if ((__p[23] & 0x80000000) == 0)
        {
LABEL_61:
          if ((SHIBYTE(v278.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_62;
          goto LABEL_67;
        }
LABEL_66:
        operator delete(*(void **)__p);
        if ((SHIBYTE(v278.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_62:
          v33 = atomic_load((unsigned __int8 *)&qword_255795348);
          if ((v33 & 1) != 0)
            goto LABEL_68;
LABEL_434:
          if (__cxa_guard_acquire(&qword_255795348))
          {
            __cxa_atexit((void (*)(void *))nullsub_599, &off_2540CA630, &dword_22314D000);
            __cxa_guard_release(&qword_255795348);
          }
LABEL_68:
          ((void (*)(int, std::__fs::filesystem::path *))off_2540CA630[14])((int)&off_2540CA630, &v258);
          if (SHIBYTE(v258.__pn_.__r_.__value_.__r.__words[2]) < 0)
            sub_223197FA4(&v257, v258.__pn_.__r_.__value_.__l.__data_, v258.__pn_.__r_.__value_.__l.__size_);
          else
            v257 = v258;
          *(_WORD *)__p = 257;
          *(std::__fs::filesystem::path *)&__p[8] = v257;
          memset(&v257, 0, sizeof(v257));
          v249 = 0u;
          *(_OWORD *)cf = 0u;
          sub_2231DD328(&v278, (uint64_t)&theDict);
          v35 = *(_OWORD *)&v278.__r_.__value_.__l.__data_;
          *(_OWORD *)&v278.__r_.__value_.__l.__data_ = 0uLL;
          v36 = (std::__shared_weak_count *)cf[1];
          *(_OWORD *)cf = v35;
          if (v36)
          {
            v37 = (unint64_t *)&v36->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          size = (std::__shared_weak_count *)v278.__r_.__value_.__l.__size_;
          if (v278.__r_.__value_.__l.__size_)
          {
            v40 = (unint64_t *)(v278.__r_.__value_.__l.__size_ + 8);
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          sub_223608000(&v251);
          if (**(int **)(v251 + 56) > 4
            || ((v42 = *(unsigned __int8 *)(v251 + 72),
                 v43 = sub_22322F254(v251, "OSLogSurrogateAppender", 1, 0),
                 v44 = v43,
                 !v42)
              ? (v45 = v43 == 0)
              : (v45 = 0),
                v45))
          {
LABEL_234:
            sub_2236080F4(a1, (uint64_t)__p, (uint64_t)&category);
            if (v255)
            {
              sub_223608000(&v252);
              if (**(int **)(v252 + 56) <= 4)
              {
                v132 = *(unsigned __int8 *)(v252 + 72);
                v133 = sub_22322F254(v252, "OSLogSurrogateAppender", 1, 0);
                v134 = v133;
                if (v132 || v133)
                {
                  v265.__r_.__value_.__r.__words[0] = (std::string::size_type)&v252;
                  v265.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
                  v265.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
                  v266 = 4;
                  v267 = "unknown file";
                  v268 = 690;
                  v270 = 0;
                  v271 = 0;
                  v269 = "unknown function";
                  if (!v255)
                    sub_22324A974();
                  sub_2232E5804(&v278, category);
                  v251 = *(_OWORD *)&v278.__r_.__value_.__l.__data_;
                  if (v278.__r_.__value_.__l.__size_)
                  {
                    v135 = (unint64_t *)(v278.__r_.__value_.__l.__size_ + 8);
                    do
                      v136 = __ldxr(v135);
                    while (__stxr(v136 + 1, v135));
                    v137 = (std::__shared_weak_count *)v278.__r_.__value_.__l.__size_;
                    if (v278.__r_.__value_.__l.__size_)
                    {
                      v138 = (unint64_t *)(v278.__r_.__value_.__l.__size_ + 8);
                      do
                        v139 = __ldaxr(v138);
                      while (__stlxr(v139 - 1, v138));
                      if (!v139)
                      {
                        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                        std::__shared_weak_count::__release_weak(v137);
                      }
                    }
                  }
                  v140 = v276;
                  sub_22360A904((uint64_t)v276, (CFTypeRef *)&v251);
                  v245 = v132;
                  if (v277 < 0)
                    v140 = (void **)v276[0];
                  v141 = *(_QWORD *)v265.__r_.__value_.__l.__data_;
                  v142 = (const char *)(*(_QWORD *)v265.__r_.__value_.__l.__data_ + 16);
                  v241 = v142;
                  v243 = *(_QWORD *)v265.__r_.__value_.__l.__data_;
                  if (*(char *)(*(_QWORD *)v265.__r_.__value_.__l.__data_ + 39) < 0)
                  {
                    v142 = *(const char **)(v141 + 16);
                    v143 = *(_QWORD *)(v141 + 24);
                  }
                  else
                  {
                    v143 = *(unsigned __int8 *)(*(_QWORD *)v265.__r_.__value_.__l.__data_ + 39);
                  }
                  v247 = (const char *)v140;
                  v146 = atomic_load((unsigned __int8 *)&qword_255788F58);
                  if ((v146 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
                  {
                    sub_224568628((uint64_t)&v278);
                    sub_223199C58("com.apple.cv3d", (unint64_t)&v278, &xmmword_255788F40);
                    if ((_BYTE)v279 && SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v278.__r_.__value_.__l.__data_);
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                    __cxa_guard_release(&qword_255788F58);
                  }
                  if (byte_255788F57 >= 0)
                    v147 = byte_255788F57;
                  else
                    v147 = *((_QWORD *)&xmmword_255788F40 + 1);
                  if (byte_255788F57 >= 0)
                    v148 = (const char *)&xmmword_255788F40;
                  else
                    v148 = (const char *)xmmword_255788F40;
                  v149 = v142;
                  v278.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v148, v142);
                  p_size = &v278.__r_.__value_.__l.__size_;
                  if (v147 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  if (v147 >= 0x17)
                  {
                    v151 = (v147 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v147 | 7) != 0x17)
                      v151 = v147 | 7;
                    v152 = v151 + 1;
                    p_size = (std::string::size_type *)operator new(v151 + 1);
                    v278.__r_.__value_.__r.__words[2] = v147;
                    *(_QWORD *)&v279 = v152 | 0x8000000000000000;
                    v278.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
                  }
                  else
                  {
                    BYTE7(v279) = v147;
                    if (!v147)
                    {
LABEL_280:
                      *((_BYTE *)p_size + v147) = 0;
                      BYTE8(v279) = 1;
                      v153 = (char *)&v280;
                      if (v143 > 0x7FFFFFFFFFFFFFF7)
                        sub_22316DBC0();
                      if (v143 >= 0x17)
                      {
                        v154 = (v143 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v143 | 7) != 0x17)
                          v154 = v143 | 7;
                        v155 = v154 + 1;
                        v153 = (char *)operator new(v154 + 1);
                        v281 = v143;
                        v282 = v155 | 0x8000000000000000;
                        v280 = v153;
                      }
                      else
                      {
                        HIBYTE(v282) = v143;
                        if (!v143)
                        {
LABEL_288:
                          v153[v143] = 0;
                          v283 = 1;
                          v156 = v278.__r_.__value_.__r.__words[0];
                          if (SHIBYTE(v282) < 0)
                            operator delete(v280);
                          if (BYTE8(v279) && SBYTE7(v279) < 0)
                            operator delete((void *)v278.__r_.__value_.__l.__size_);
                          if (v278.__r_.__value_.__r.__words[0])
                            os_release(v278.__r_.__value_.__l.__data_);
                          if (!v134 || !*(_QWORD *)(v134 + 24))
                          {
                            os_log_type_enabled(v156, OS_LOG_TYPE_ERROR);
                            LODWORD(v278.__r_.__value_.__l.__data_) = 136315138;
                            *(std::string::size_type *)((char *)v278.__r_.__value_.__r.__words + 4) = (std::string::size_type)v247;
                            v163 = (void *)_os_log_send_and_compose_impl();
                            v164 = v245;
                            if (v163)
                              free(v163);
                            goto LABEL_369;
                          }
                          v157 = _os_log_pack_size();
                          v158 = operator new(v157, (std::align_val_t)8uLL);
                          v159 = (_QWORD *)operator new();
                          *v159 = &off_24EC1F7F0;
                          v159[1] = 0;
                          v159[2] = 0;
                          v159[3] = v158;
                          v285.__r_.__value_.__r.__words[0] = (std::string::size_type)v158;
                          v285.__r_.__value_.__l.__size_ = (std::string::size_type)v158;
                          v286 = 0;
                          v287 = 0;
                          v285.__r_.__value_.__r.__words[2] = (std::string::size_type)v159;
                          v160 = strlen(v247);
                          if (v160 > 0x7FFFFFFFFFFFFFF7)
                            sub_22316DBC0();
                          v161 = v160;
                          if (v160 >= 0x17)
                          {
                            v165 = (v160 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v160 | 7) != 0x17)
                              v165 = v160 | 7;
                            v166 = v165 + 1;
                            p_dst = (void **)operator new(v165 + 1);
                            *(_QWORD *)&v275 = v161;
                            *((_QWORD *)&v275 + 1) = v166 | 0x8000000000000000;
                            __dst = p_dst;
                          }
                          else
                          {
                            HIBYTE(v275) = v160;
                            p_dst = (void **)&__dst;
                            if (!v160)
                            {
LABEL_310:
                              *((_BYTE *)p_dst + v161) = 0;
                              v167 = __dst;
                              v284[0] = v275;
                              *(_QWORD *)((char *)v284 + 7) = *(_QWORD *)((char *)&v275 + 7);
                              v168 = HIBYTE(v275);
                              v169 = operator new(0x38uLL);
                              v169[1] = 0;
                              v169[2] = 0;
                              v169[3] = off_24EC1FA48;
                              *v169 = &off_24EC1F9F8;
                              v170 = v284[0];
                              v169[4] = v167;
                              v169[5] = v170;
                              *(_QWORD *)((char *)v169 + 47) = *(_QWORD *)((char *)v284 + 7);
                              *((_BYTE *)v169 + 55) = v168;
                              v284[0] = 0;
                              *(_QWORD *)((char *)v284 + 7) = 0;
                              v171 = v287;
                              v286 = (char *)(v169 + 3);
                              v287 = (std::__shared_weak_count *)v169;
                              if (v171)
                              {
                                v172 = (unint64_t *)&v171->__shared_owners_;
                                do
                                  v173 = __ldaxr(v172);
                                while (__stlxr(v173 - 1, v172));
                                if (!v173)
                                {
                                  ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                                  std::__shared_weak_count::__release_weak(v171);
                                }
                              }
                              v278 = v285;
                              v174 = v286;
                              if (v285.__r_.__value_.__r.__words[2])
                              {
                                v175 = (unint64_t *)(v285.__r_.__value_.__r.__words[2] + 8);
                                do
                                  v176 = __ldxr(v175);
                                while (__stxr(v176 + 1, v175));
                              }
                              v177 = v287;
                              *(_QWORD *)&v279 = v174;
                              *((_QWORD *)&v279 + 1) = v287;
                              if (v287)
                              {
                                v178 = (unint64_t *)&v287->__shared_owners_;
                                do
                                  v179 = __ldxr(v178);
                                while (__stxr(v179 + 1, v178));
                                v280 = v174;
                                do
                                  v180 = __ldaxr(v178);
                                while (__stlxr(v180 - 1, v178));
                                if (!v180)
                                {
                                  ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                                  std::__shared_weak_count::__release_weak(v177);
                                }
                              }
                              else
                              {
                                v280 = v174;
                              }
                              v181 = (std::__shared_weak_count *)v285.__r_.__value_.__r.__words[2];
                              if (v285.__r_.__value_.__r.__words[2])
                              {
                                v182 = (unint64_t *)(v285.__r_.__value_.__r.__words[2] + 8);
                                do
                                  v183 = __ldaxr(v182);
                                while (__stlxr(v183 - 1, v182));
                                if (!v183)
                                {
                                  ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                                  std::__shared_weak_count::__release_weak(v181);
                                }
                              }
                              v184 = v278.__r_.__value_.__r.__words[0];
                              if (v280[31] >= 0)
                                v185 = v280 + 8;
                              else
                                v185 = (char *)*((_QWORD *)v280 + 1);
                              v186 = _os_log_pack_fill();
                              *(_DWORD *)v186 = 136315138;
                              *(_QWORD *)(v186 + 4) = v185;
                              v187 = operator new();
                              v188 = *(unsigned __int8 *)(v243 + 39);
                              v189 = v241;
                              if ((v188 & 0x80u) != 0)
                              {
                                v189 = *(const char **)(v243 + 16);
                                v188 = *(_QWORD *)(v243 + 24);
                              }
                              *(_QWORD *)v187 = v184;
                              *(_OWORD *)(v187 + 8) = *(_OWORD *)&v278.__r_.__value_.__r.__words[1];
                              *(_OWORD *)&v278.__r_.__value_.__r.__words[1] = 0uLL;
                              *(_OWORD *)(v187 + 24) = v279;
                              v279 = 0uLL;
                              *(_QWORD *)(v187 + 40) = v189;
                              *(_QWORD *)(v187 + 48) = v188;
                              *(_BYTE *)(v187 + 56) = 16;
                              __dst = 0;
                              v285.__r_.__value_.__r.__words[0] = v187;
                              (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v134 + 24) + 40))(*(_QWORD *)(v134 + 24), &v285);
                              v164 = v245;
                              v190 = v285.__r_.__value_.__r.__words[0];
                              v285.__r_.__value_.__r.__words[0] = 0;
                              if (v190)
                              {
                                v191 = *(std::__shared_weak_count **)(v190 + 32);
                                if (v191)
                                {
                                  v192 = (unint64_t *)&v191->__shared_owners_;
                                  do
                                    v193 = __ldaxr(v192);
                                  while (__stlxr(v193 - 1, v192));
                                  if (!v193)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                                    std::__shared_weak_count::__release_weak(v191);
                                  }
                                }
                                v194 = *(std::__shared_weak_count **)(v190 + 16);
                                if (v194)
                                {
                                  v195 = (unint64_t *)&v194->__shared_owners_;
                                  do
                                    v196 = __ldaxr(v195);
                                  while (__stlxr(v196 - 1, v195));
                                  if (!v196)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                                    std::__shared_weak_count::__release_weak(v194);
                                  }
                                }
                                MEMORY[0x227684CE8](v190, 0x10F0C40B62ED6C6);
                                v197 = __dst;
                                __dst = 0;
                                if (v197)
                                {
                                  v198 = (std::__shared_weak_count *)v197[4];
                                  if (v198)
                                  {
                                    v199 = (unint64_t *)&v198->__shared_owners_;
                                    do
                                      v200 = __ldaxr(v199);
                                    while (__stlxr(v200 - 1, v199));
                                    if (!v200)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
                                      std::__shared_weak_count::__release_weak(v198);
                                    }
                                  }
                                  v201 = (std::__shared_weak_count *)v197[2];
                                  if (v201)
                                  {
                                    v202 = (unint64_t *)&v201->__shared_owners_;
                                    do
                                      v203 = __ldaxr(v202);
                                    while (__stlxr(v203 - 1, v202));
                                    if (!v203)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
                                      std::__shared_weak_count::__release_weak(v201);
                                    }
                                  }
                                  MEMORY[0x227684CE8](v197, 0x10F0C40B62ED6C6);
                                }
                              }
                              v204 = (std::__shared_weak_count *)*((_QWORD *)&v279 + 1);
                              if (*((_QWORD *)&v279 + 1))
                              {
                                v205 = (unint64_t *)(*((_QWORD *)&v279 + 1) + 8);
                                do
                                  v206 = __ldaxr(v205);
                                while (__stlxr(v206 - 1, v205));
                                if (!v206)
                                {
                                  ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                                  std::__shared_weak_count::__release_weak(v204);
                                }
                              }
                              v207 = (std::__shared_weak_count *)v278.__r_.__value_.__r.__words[2];
                              if (v278.__r_.__value_.__r.__words[2])
                              {
                                v208 = (unint64_t *)(v278.__r_.__value_.__r.__words[2] + 8);
                                do
                                  v209 = __ldaxr(v208);
                                while (__stlxr(v209 - 1, v208));
                                if (!v209)
                                {
                                  ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                                  std::__shared_weak_count::__release_weak(v207);
                                }
                              }
LABEL_369:
                              if (v277 < 0)
                                operator delete(v276[0]);
                              v210 = (std::__shared_weak_count *)*((_QWORD *)&v251 + 1);
                              if (*((_QWORD *)&v251 + 1))
                              {
                                v211 = (unint64_t *)(*((_QWORD *)&v251 + 1) + 8);
                                do
                                  v212 = __ldaxr(v211);
                                while (__stlxr(v212 - 1, v211));
                                if (!v212)
                                {
                                  ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                                  std::__shared_weak_count::__release_weak(v210);
                                }
                              }
                              if (v164)
                              {
                                if (!v255)
                                  sub_22324A974();
                                sub_223620824(&v285, category);
                                sub_22360A904((uint64_t)&v278, (CFTypeRef *)&v285.__r_.__value_.__l.__data_);
                                if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v213 = &v278;
                                else
                                  v213 = (std::string *)v278.__r_.__value_.__r.__words[0];
                                sub_22322C138((uint64_t)&v265, "FailureSnapshot: snapshotting failed %s", (const char *)v213);
                                if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(v278.__r_.__value_.__l.__data_);
                                sub_223167354((uint64_t)&v285);
                                sub_223182C08((uint64_t)&v265);
                              }
                              sub_223182C08((uint64_t)&v265);
                              v214 = v271;
                              if (v271)
                              {
                                v215 = (unint64_t *)&v271->__shared_owners_;
                                do
                                  v216 = __ldaxr(v215);
                                while (__stlxr(v216 - 1, v215));
                                if (!v216)
                                {
                                  ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                                  std::__shared_weak_count::__release_weak(v214);
                                }
                              }
                              goto LABEL_389;
                            }
                          }
                          memcpy(p_dst, v247, v161);
                          goto LABEL_310;
                        }
                      }
                      memmove(v153, v149, v143);
                      goto LABEL_288;
                    }
                  }
                  memmove(p_size, v148, v147);
                  goto LABEL_280;
                }
              }
            }
            else if (v261)
            {
              if (SHIBYTE(v260) < 0)
              {
                if (v263 >= 0)
                  v144 = &v262;
                else
                  v144 = (__int128 *)v262;
                if (v263 >= 0)
                  v145 = HIBYTE(v263);
                else
                  v145 = *((_QWORD *)&v262 + 1);
                sub_22319C4B8((void **)&v259, v144, v145);
              }
              else if (v263 < 0)
              {
                sub_22319C3F4(&v259, (void *)v262, *((size_t *)&v262 + 1));
              }
              else
              {
                v259 = v262;
                v260 = v263;
              }
            }
            else
            {
              if (SHIBYTE(v263) < 0)
              {
                sub_223197FA4(&v259, (void *)v262, *((unint64_t *)&v262 + 1));
              }
              else
              {
                v259 = v262;
                v260 = v263;
              }
              v261 = 1;
            }
LABEL_389:
            if (v255)
            {
              v217 = v254;
              if (v254)
              {
                v218 = (unint64_t *)&v254->__shared_owners_;
                do
                  v219 = __ldaxr(v218);
                while (__stlxr(v219 - 1, v218));
                if (!v219)
                {
                  ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
                  std::__shared_weak_count::__release_weak(v217);
                }
              }
            }
            v220 = (std::__shared_weak_count *)cf[1];
            if (cf[1])
            {
              v221 = (unint64_t *)((char *)cf[1] + 8);
              do
                v222 = __ldaxr(v221);
              while (__stlxr(v222 - 1, v221));
              if (!v222)
              {
                ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                std::__shared_weak_count::__release_weak(v220);
              }
            }
            v223 = (std::__shared_weak_count *)*((_QWORD *)&v249 + 1);
            if (*((_QWORD *)&v249 + 1))
            {
              v224 = (unint64_t *)(*((_QWORD *)&v249 + 1) + 8);
              do
                v225 = __ldaxr(v224);
              while (__stlxr(v225 - 1, v224));
              if (!v225)
              {
                ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                std::__shared_weak_count::__release_weak(v223);
              }
            }
            if ((__p[31] & 0x80000000) != 0)
              operator delete(*(void **)&__p[8]);
            if (SHIBYTE(v258.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v258.__pn_.__r_.__value_.__l.__data_);
            v226 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 72);
            std::promise<void>::promise((std::promise<void> *)&v258);
            std::promise<void>::get_future((std::promise<void> *)&v258);
            *(_OWORD *)&v265.__r_.__value_.__l.__data_ = 0uLL;
            v227 = *(std::__shared_weak_count **)(v226 + 448);
            if (!v227
              || (v228 = std::__shared_weak_count::lock(v227),
                  (v265.__r_.__value_.__l.__size_ = (std::string::size_type)v228) == 0)
              || (v229 = v228, v230 = *(_QWORD *)(v226 + 440), (v265.__r_.__value_.__r.__words[0] = v230) == 0))
            {
              std::runtime_error::runtime_error((std::runtime_error *)__p, "ChannelInputWithPromise: Invalid operation. Processor is released.");
              *(_QWORD *)__p = &off_24EC77B58;
              v239 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              v240 = std::runtime_error::runtime_error(v239, (const std::runtime_error *)__p);
              v240->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
              __cxa_throw(v240, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
            }
            *(_QWORD *)__p = v258.__pn_.__r_.__value_.__r.__words[0];
            v258.__pn_.__r_.__value_.__r.__words[0] = 0;
            (*(void (**)(std::string::size_type, __int128 *, _BYTE *))(*(_QWORD *)v230 + 56))(v230, &v259, __p);
            MEMORY[0x227684B68](__p);
            v231 = (unint64_t *)&v229->__shared_owners_;
            do
              v232 = __ldaxr(v231);
            while (__stlxr(v232 - 1, v231));
            if (!v232)
            {
              ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
              std::__shared_weak_count::__release_weak(v229);
            }
            MEMORY[0x227684B68](&v258);
            if (!(_QWORD)v251
              && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 499, (uint64_t)"future.valid()", 14, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            std::future<void>::get((std::future<void> *)&v251);
            std::future<void>::~future((std::future<void> *)&v251);
            if (v261 && SHIBYTE(v260) < 0)
              operator delete((void *)v259);
            if (SHIBYTE(v263) < 0)
              operator delete((void *)v262);
            goto LABEL_423;
          }
          v265.__r_.__value_.__r.__words[0] = (std::string::size_type)&v251;
          v265.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v265.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          v266 = 4;
          v267 = "unknown file";
          v268 = 686;
          v270 = 0;
          v271 = 0;
          v269 = "unknown function";
          LODWORD(v286) = 0;
          v46 = operator new();
          v244 = v42;
          *(_QWORD *)(v46 + 272) = 0;
          *(_OWORD *)(v46 + 240) = 0u;
          *(_OWORD *)(v46 + 256) = 0u;
          *(_OWORD *)(v46 + 208) = 0u;
          *(_OWORD *)(v46 + 224) = 0u;
          *(_OWORD *)(v46 + 176) = 0u;
          *(_OWORD *)(v46 + 192) = 0u;
          *(_OWORD *)(v46 + 144) = 0u;
          *(_OWORD *)(v46 + 160) = 0u;
          *(_OWORD *)(v46 + 112) = 0u;
          *(_OWORD *)(v46 + 128) = 0u;
          *(_OWORD *)(v46 + 80) = 0u;
          *(_OWORD *)(v46 + 96) = 0u;
          *(_OWORD *)(v46 + 48) = 0u;
          *(_OWORD *)(v46 + 64) = 0u;
          *(_OWORD *)(v46 + 16) = 0u;
          *(_OWORD *)(v46 + 32) = 0u;
          *(_OWORD *)v46 = 0u;
          sub_223195210(v46);
          v278.__r_.__value_.__r.__words[0] = v46;
          sub_224532A28((_QWORD *)(v46 + 16), cf[0]);
          v47 = *(_DWORD *)(v46 + 120);
          if ((v47 & 0x10) != 0)
          {
            v50 = *(_QWORD *)(v46 + 112);
            v51 = *(_QWORD *)(v46 + 72);
            if (v50 < v51)
            {
              *(_QWORD *)(v46 + 112) = v51;
              v50 = v51;
            }
            v52 = (const void **)(v46 + 64);
          }
          else
          {
            if ((v47 & 8) == 0)
            {
              v48 = 0;
              HIBYTE(v275) = 0;
              v49 = (void **)&__dst;
              goto LABEL_101;
            }
            v52 = (const void **)(v46 + 40);
            v50 = *(_QWORD *)(v46 + 56);
          }
          v53 = *v52;
          v48 = v50 - (_QWORD)*v52;
          if (v48 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v48 >= 0x17)
          {
            v54 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v48 | 7) != 0x17)
              v54 = v48 | 7;
            v55 = v54 + 1;
            v49 = (void **)operator new(v54 + 1);
            *(_QWORD *)&v275 = v48;
            *((_QWORD *)&v275 + 1) = v55 | 0x8000000000000000;
            __dst = v49;
          }
          else
          {
            HIBYTE(v275) = v50 - *(_BYTE *)v52;
            v49 = (void **)&__dst;
            if (!v48)
            {
LABEL_101:
              *((_BYTE *)v49 + v48) = 0;
              v56 = v278.__r_.__value_.__r.__words[0];
              if (v278.__r_.__value_.__r.__words[0])
              {
                v57 = MEMORY[0x24BEDB7F0];
                v58 = *MEMORY[0x24BEDB7F0];
                *(_QWORD *)v278.__r_.__value_.__l.__data_ = *MEMORY[0x24BEDB7F0];
                v59 = *(_QWORD *)(v57 + 72);
                *(_QWORD *)(v56 + *(_QWORD *)(v58 - 24)) = *(_QWORD *)(v57 + 64);
                *(_QWORD *)(v56 + 24) = MEMORY[0x24BEDB848] + 16;
                *(_QWORD *)(v56 + 16) = v59;
                if (*(char *)(v56 + 111) < 0)
                  operator delete(*(void **)(v56 + 88));
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x227684BE0](v56 + 128);
                MEMORY[0x227684CE8](v56, 0x10B2C40EED050F3);
              }
              v278.__r_.__value_.__r.__words[0] = (std::string::size_type)&v285;
              v278.__r_.__value_.__l.__size_ = (std::string::size_type)&__dst;
              v278.__r_.__value_.__r.__words[2] = (std::string::size_type)&v285;
              *(_QWORD *)&v279 = &__dst;
              *((_QWORD *)&v279 + 1) = &__dst;
              if ((_DWORD)v286 == -1)
                sub_22316DD70();
              v276[0] = &v278;
              ((void (*)(void **, std::string *))off_24EC55400[v286])(v276, &v285);
              if (SHIBYTE(v275) < 0)
                operator delete(__dst);
              if ((_DWORD)v286 == -1)
                sub_22316DD70();
              v278.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
              ((void (*)(char **__return_ptr, std::string *, std::string *))off_24EC54FB8[v286])(&category, &v278, &v285);
              if ((_DWORD)v286 != -1)
                ((void (*)(std::string *, std::string *))off_24EC54F88[v286])(&v278, &v285);
              p_category = category;
              if (v256 >= 0)
                p_category = (const char *)&category;
              v61 = *(_QWORD *)v265.__r_.__value_.__l.__data_;
              v62 = (const char *)(*(_QWORD *)v265.__r_.__value_.__l.__data_ + 16);
              v242 = v62;
              if (*(char *)(*(_QWORD *)v265.__r_.__value_.__l.__data_ + 39) < 0)
              {
                v62 = *(const char **)(v61 + 16);
                v63 = *(_QWORD *)(v61 + 24);
              }
              else
              {
                v63 = *(unsigned __int8 *)(*(_QWORD *)v265.__r_.__value_.__l.__data_ + 39);
              }
              v246 = p_category;
              v64 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v64 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)&v278);
                sub_223199C58("com.apple.cv3d", (unint64_t)&v278, &xmmword_255788F40);
                if ((_BYTE)v279 && SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v278.__r_.__value_.__l.__data_);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
              }
              if (byte_255788F57 >= 0)
                v65 = (const char *)&xmmword_255788F40;
              else
                v65 = (const char *)xmmword_255788F40;
              if (byte_255788F57 >= 0)
                v66 = byte_255788F57;
              else
                v66 = *((_QWORD *)&xmmword_255788F40 + 1);
              v278.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v65, v62);
              v67 = &v278.__r_.__value_.__l.__size_;
              if (v66 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v66 >= 0x17)
              {
                v68 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v66 | 7) != 0x17)
                  v68 = v66 | 7;
                v69 = v68 + 1;
                v67 = (std::string::size_type *)operator new(v68 + 1);
                v278.__r_.__value_.__r.__words[2] = v66;
                *(_QWORD *)&v279 = v69 | 0x8000000000000000;
                v278.__r_.__value_.__l.__size_ = (std::string::size_type)v67;
              }
              else
              {
                BYTE7(v279) = v66;
                if (!v66)
                {
LABEL_131:
                  *((_BYTE *)v67 + v66) = 0;
                  BYTE8(v279) = 1;
                  v70 = (char *)&v280;
                  if (v63 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v71 = v246;
                  if (v63 >= 0x17)
                  {
                    v72 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v63 | 7) != 0x17)
                      v72 = v63 | 7;
                    v73 = v72 + 1;
                    v70 = (char *)operator new(v72 + 1);
                    v281 = v63;
                    v282 = v73 | 0x8000000000000000;
                    v280 = v70;
                  }
                  else
                  {
                    HIBYTE(v282) = v63;
                    if (!v63)
                    {
LABEL_139:
                      v70[v63] = 0;
                      v283 = 1;
                      v74 = v278.__r_.__value_.__r.__words[0];
                      if (SHIBYTE(v282) < 0)
                        operator delete(v280);
                      if (BYTE8(v279) && SBYTE7(v279) < 0)
                        operator delete((void *)v278.__r_.__value_.__l.__size_);
                      if (v278.__r_.__value_.__r.__words[0])
                        os_release(v278.__r_.__value_.__l.__data_);
                      if (!v44 || !*(_QWORD *)(v44 + 24))
                      {
                        os_log_type_enabled(v74, OS_LOG_TYPE_ERROR);
                        v81 = v244;
                        if (v244)
                        {
                          LODWORD(v278.__r_.__value_.__l.__data_) = 136380675;
                          *(std::string::size_type *)((char *)v278.__r_.__value_.__r.__words + 4) = (std::string::size_type)v246;
                          v82 = (char *)_os_log_send_and_compose_impl();
                        }
                        else
                        {
                          LODWORD(v278.__r_.__value_.__l.__data_) = 136380675;
                          *(std::string::size_type *)((char *)v278.__r_.__value_.__r.__words + 4) = (std::string::size_type)v246;
                          v83 = (void *)_os_log_send_and_compose_impl();
                          if (v83)
                            free(v83);
                          v82 = 0;
                        }
                        goto LABEL_223;
                      }
                      v75 = _os_log_pack_size();
                      v76 = operator new(v75, (std::align_val_t)8uLL);
                      v77 = (_QWORD *)operator new();
                      *v77 = &off_24EC1F7F0;
                      v77[1] = 0;
                      v77[2] = 0;
                      v77[3] = v76;
                      v285.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
                      v285.__r_.__value_.__l.__size_ = (std::string::size_type)v76;
                      v286 = 0;
                      v287 = 0;
                      v285.__r_.__value_.__r.__words[2] = (std::string::size_type)v77;
                      v78 = strlen(v246);
                      if (v78 > 0x7FFFFFFFFFFFFFF7)
                        sub_22316DBC0();
                      v79 = v78;
                      if (v78 >= 0x17)
                      {
                        v84 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v78 | 7) != 0x17)
                          v84 = v78 | 7;
                        v85 = v84 + 1;
                        v80 = (void **)operator new(v84 + 1);
                        *(_QWORD *)&v275 = v79;
                        *((_QWORD *)&v275 + 1) = v85 | 0x8000000000000000;
                        __dst = v80;
                        v71 = v246;
                      }
                      else
                      {
                        HIBYTE(v275) = v78;
                        v80 = (void **)&__dst;
                        if (!v78)
                        {
LABEL_161:
                          *((_BYTE *)v80 + v79) = 0;
                          v86 = __dst;
                          v276[0] = (void *)v275;
                          *(void **)((char *)v276 + 7) = *(void **)((char *)&v275 + 7);
                          v87 = HIBYTE(v275);
                          v88 = (char *)operator new(0x38uLL);
                          *((_QWORD *)v88 + 1) = 0;
                          *((_QWORD *)v88 + 2) = 0;
                          *((_QWORD *)v88 + 3) = off_24EC1FA48;
                          *(_QWORD *)v88 = &off_24EC1F9F8;
                          v89 = v276[0];
                          *((_QWORD *)v88 + 4) = v86;
                          *((_QWORD *)v88 + 5) = v89;
                          *(void **)(v88 + 47) = *(void **)((char *)v276 + 7);
                          v88[55] = v87;
                          memset(v276, 0, 15);
                          v90 = v287;
                          v286 = v88 + 24;
                          v287 = (std::__shared_weak_count *)v88;
                          if (v90)
                          {
                            v91 = (unint64_t *)&v90->__shared_owners_;
                            do
                              v92 = __ldaxr(v91);
                            while (__stlxr(v92 - 1, v91));
                            if (!v92)
                            {
                              ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                              std::__shared_weak_count::__release_weak(v90);
                            }
                          }
                          v278 = v285;
                          v93 = v286;
                          if (v285.__r_.__value_.__r.__words[2])
                          {
                            v94 = (unint64_t *)(v285.__r_.__value_.__r.__words[2] + 8);
                            do
                              v95 = __ldxr(v94);
                            while (__stxr(v95 + 1, v94));
                          }
                          v96 = v287;
                          *(_QWORD *)&v279 = v93;
                          *((_QWORD *)&v279 + 1) = v287;
                          if (v287)
                          {
                            v97 = (unint64_t *)&v287->__shared_owners_;
                            do
                              v98 = __ldxr(v97);
                            while (__stxr(v98 + 1, v97));
                            v280 = v93;
                            do
                              v99 = __ldaxr(v97);
                            while (__stlxr(v99 - 1, v97));
                            if (!v99)
                            {
                              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                              std::__shared_weak_count::__release_weak(v96);
                            }
                          }
                          else
                          {
                            v280 = v93;
                          }
                          v100 = (std::__shared_weak_count *)v285.__r_.__value_.__r.__words[2];
                          if (v285.__r_.__value_.__r.__words[2])
                          {
                            v101 = (unint64_t *)(v285.__r_.__value_.__r.__words[2] + 8);
                            do
                              v102 = __ldaxr(v101);
                            while (__stlxr(v102 - 1, v101));
                            if (!v102)
                            {
                              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                              std::__shared_weak_count::__release_weak(v100);
                            }
                          }
                          v103 = v278.__r_.__value_.__r.__words[0];
                          if (v280[31] >= 0)
                            v104 = v280 + 8;
                          else
                            v104 = (char *)*((_QWORD *)v280 + 1);
                          v105 = _os_log_pack_fill();
                          *(_DWORD *)v105 = 136380675;
                          *(_QWORD *)(v105 + 4) = v104;
                          v106 = operator new();
                          v107 = *(unsigned __int8 *)(v61 + 39);
                          v108 = v242;
                          if ((v107 & 0x80u) != 0)
                          {
                            v108 = *(const char **)(v61 + 16);
                            v107 = *(_QWORD *)(v61 + 24);
                          }
                          *(_QWORD *)v106 = v103;
                          *(_OWORD *)(v106 + 8) = *(_OWORD *)&v278.__r_.__value_.__r.__words[1];
                          *(_OWORD *)&v278.__r_.__value_.__r.__words[1] = 0uLL;
                          *(_OWORD *)(v106 + 24) = v279;
                          v279 = 0uLL;
                          *(_QWORD *)(v106 + 40) = v108;
                          *(_QWORD *)(v106 + 48) = v107;
                          *(_BYTE *)(v106 + 56) = 16;
                          __dst = 0;
                          v285.__r_.__value_.__r.__words[0] = v106;
                          (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v44 + 24) + 40))(*(_QWORD *)(v44 + 24), &v285);
                          v109 = v285.__r_.__value_.__r.__words[0];
                          v285.__r_.__value_.__r.__words[0] = 0;
                          v81 = v244;
                          if (v109)
                          {
                            v110 = *(std::__shared_weak_count **)(v109 + 32);
                            if (v110)
                            {
                              v111 = (unint64_t *)&v110->__shared_owners_;
                              do
                                v112 = __ldaxr(v111);
                              while (__stlxr(v112 - 1, v111));
                              if (!v112)
                              {
                                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                                std::__shared_weak_count::__release_weak(v110);
                              }
                            }
                            v113 = *(std::__shared_weak_count **)(v109 + 16);
                            if (v113)
                            {
                              v114 = (unint64_t *)&v113->__shared_owners_;
                              do
                                v115 = __ldaxr(v114);
                              while (__stlxr(v115 - 1, v114));
                              if (!v115)
                              {
                                ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                                std::__shared_weak_count::__release_weak(v113);
                              }
                            }
                            MEMORY[0x227684CE8](v109, 0x10F0C40B62ED6C6);
                            v116 = __dst;
                            __dst = 0;
                            if (v116)
                            {
                              v117 = (std::__shared_weak_count *)v116[4];
                              if (v117)
                              {
                                v118 = (unint64_t *)&v117->__shared_owners_;
                                do
                                  v119 = __ldaxr(v118);
                                while (__stlxr(v119 - 1, v118));
                                if (!v119)
                                {
                                  ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                                  std::__shared_weak_count::__release_weak(v117);
                                }
                              }
                              v120 = (std::__shared_weak_count *)v116[2];
                              if (v120)
                              {
                                v121 = (unint64_t *)&v120->__shared_owners_;
                                do
                                  v122 = __ldaxr(v121);
                                while (__stlxr(v122 - 1, v121));
                                if (!v122)
                                {
                                  ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                                  std::__shared_weak_count::__release_weak(v120);
                                }
                              }
                              MEMORY[0x227684CE8](v116, 0x10F0C40B62ED6C6);
                            }
                          }
                          if (v244)
                          {
                            LODWORD(v285.__r_.__value_.__l.__data_) = 136380675;
                            *(std::string::size_type *)((char *)v285.__r_.__value_.__r.__words + 4) = (std::string::size_type)v71;
                            v82 = (char *)_os_log_send_and_compose_impl();
                          }
                          else
                          {
                            v82 = 0;
                          }
                          v123 = (std::__shared_weak_count *)*((_QWORD *)&v279 + 1);
                          if (*((_QWORD *)&v279 + 1))
                          {
                            v124 = (unint64_t *)(*((_QWORD *)&v279 + 1) + 8);
                            do
                              v125 = __ldaxr(v124);
                            while (__stlxr(v125 - 1, v124));
                            if (!v125)
                            {
                              ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                              std::__shared_weak_count::__release_weak(v123);
                            }
                          }
                          v126 = (std::__shared_weak_count *)v278.__r_.__value_.__r.__words[2];
                          if (v278.__r_.__value_.__r.__words[2])
                          {
                            v127 = (unint64_t *)(v278.__r_.__value_.__r.__words[2] + 8);
                            do
                              v128 = __ldaxr(v127);
                            while (__stlxr(v128 - 1, v127));
                            if (!v128)
                            {
                              ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                              std::__shared_weak_count::__release_weak(v126);
                            }
                          }
LABEL_223:
                          if (v256 < 0)
                            operator delete(category);
                          if (v81)
                          {
                            sub_22322C138((uint64_t)&v265, v82);
                            sub_223182C08((uint64_t)&v265);
                          }
                          if (v82)
                            free(v82);
                          sub_223182C08((uint64_t)&v265);
                          v129 = v271;
                          if (v271)
                          {
                            v130 = (unint64_t *)&v271->__shared_owners_;
                            do
                              v131 = __ldaxr(v130);
                            while (__stlxr(v131 - 1, v130));
                            if (!v131)
                            {
                              ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                              std::__shared_weak_count::__release_weak(v129);
                            }
                          }
                          goto LABEL_234;
                        }
                      }
                      memcpy(v80, v71, v79);
                      goto LABEL_161;
                    }
                  }
                  memmove(v70, v62, v63);
                  goto LABEL_139;
                }
              }
              memmove(v67, v65, v66);
              goto LABEL_131;
            }
          }
          memmove(v49, v53, v48);
          goto LABEL_101;
        }
LABEL_67:
        operator delete(v278.__r_.__value_.__l.__data_);
        v34 = atomic_load((unsigned __int8 *)&qword_255795348);
        if ((v34 & 1) != 0)
          goto LABEL_68;
        goto LABEL_434;
      }
    }
  }
LABEL_423:
  v233 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
  if (*((_QWORD *)&theDict + 1))
  {
    v234 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
    do
      v235 = __ldaxr(v234);
    while (__stlxr(v235 - 1, v234));
    if (!v235)
    {
      ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
      std::__shared_weak_count::__release_weak(v233);
    }
  }
}

void sub_2236064B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::exception_ptr a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::exception_ptr a41)
{
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t v45;
  uint64_t v46;

  std::exception_ptr::~exception_ptr(&a18);
  std::exception_ptr::~exception_ptr(&a41);
  std::runtime_error::~runtime_error((std::runtime_error *)(v43 - 240));
  sub_223167354((uint64_t)&v46);
  do
    v45 = __ldaxr(v42);
  while (__stlxr(v45 - 1, v42));
  if (!v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
  sub_223623B70((uint64_t *)(v43 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_223606534(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 488))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 480);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (*(_BYTE *)(a1 + 464))
  {
    v5 = *(std::__shared_weak_count **)(a1 + 456);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (*(_BYTE *)(a1 + 440))
    sub_2232954B0(a1);
  return a1;
}

uint64_t sub_2236065E4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::runtime_error_vtbl *v15;
  unint64_t *v16;
  int what;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  std::runtime_error_vtbl *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  std::runtime_error_vtbl *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  std::__shared_weak_count *imp;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  std::runtime_error_vtbl *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::runtime_error *exception;
  std::runtime_error *v143;
  _OWORD v144[28];
  int v145;
  char v146;
  char v147;
  std::runtime_error_vtbl *v148;
  std::runtime_error v149;
  std::runtime_error_vtbl *v150;
  _BYTE v151[24];
  uint64_t v152;
  __int16 v153;
  __int128 v154;
  uint64_t v155;
  char v156;
  char v157;
  __int128 v158;
  uint64_t v159;
  char v160;
  char v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  int v167;
  __int128 v168;
  uint64_t v169;
  char v170;
  __int128 v171;
  uint64_t v172;
  int v173;
  __int128 v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  char v188;
  uint64_t v189;
  __int128 v190;
  char v191;
  char v192;
  __int128 v193;
  char v194;
  __int128 v195;
  char v196;
  uint64_t v197;
  char v198;
  char v199;
  _BYTE v200[24];
  uint64_t v201;
  __int16 v202;
  __int128 v203;
  uint64_t v204;
  char v205;
  char v206;
  __int128 v207;
  uint64_t v208;
  char v209;
  char v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  int v216;
  __int128 v217;
  uint64_t v218;
  char v219;
  __int128 v220;
  uint64_t v221;
  int v222;
  __int128 v223;
  uint64_t v224;
  __int128 v225;
  uint64_t v226;
  uint64_t v227;
  char v228;
  __int128 v229;
  uint64_t v230;
  uint64_t v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  char v237;
  uint64_t v238;
  __int128 v239;
  char v240;
  char v241;
  __int128 v242;
  char v243;
  __int128 v244;
  char v245;
  uint64_t v246;
  char v247;
  _BYTE v248[24];
  uint64_t v249;
  __int16 v250;
  __int128 v251;
  uint64_t v252;
  char v253;
  char v254;
  __int128 v255;
  uint64_t v256;
  char v257;
  char v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  int v264;
  __int128 v265;
  uint64_t v266;
  char v267;
  __int128 v268;
  uint64_t v269;
  int v270;
  __int128 v271;
  uint64_t v272;
  __int128 v273;
  uint64_t v274;
  uint64_t v275;
  char v276;
  __int128 v277;
  uint64_t v278;
  uint64_t v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  char v285;
  uint64_t v286;
  __int128 v287;
  char v288;
  char v289;
  __int128 v290;
  char v291;
  __int128 v292;
  char v293;
  uint64_t v294;
  __int128 v295;
  char v296;
  char v297;
  char v298[8];
  std::__shared_weak_count *v299;
  char v300;
  char v301;
  char v302;
  __int128 v303;
  char v304;
  char v305;
  uint64_t v306;

  v306 = *MEMORY[0x24BDAC8D0];
  sub_2235F9074((uint64_t)v144, a2);
  v6 = *(unsigned int **)(a1 + 1288);
  sub_22319ED0C(v200, a2 + 1808);
  sub_2235FE5E0(v6, (uint64_t)v200);
  v7 = *(std::__shared_weak_count **)&v200[8];
  if (!*(_QWORD *)&v200[8])
    goto LABEL_5;
  v8 = (unint64_t *)(*(_QWORD *)&v200[8] + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v147)
    {
LABEL_6:
      LOBYTE(v303) = 0;
      v304 = 0;
      v305 = 1;
      v298[0] = 0;
      v301 = 0;
      v302 = 1;
      LOBYTE(v295) = 0;
      v296 = 0;
      v297 = 1;
      if (*(_BYTE *)(a1 + 1280))
      {
        sub_2235FC47C((uint64_t)v248, a1, (uint64_t)v144);
        LOBYTE(v201) = v249;
        if ((_BYTE)v249)
        {
          v200[0] = 0;
          v200[16] = 0;
          if (v248[16])
          {
            *(_OWORD *)v200 = *(_OWORD *)v248;
            *(_OWORD *)v248 = 0uLL;
            v200[16] = 1;
          }
          sub_223623080((uint64_t *)v200, &v303);
          if ((_BYTE)v201)
            goto LABEL_11;
        }
        else
        {
          *(_OWORD *)v200 = *(_OWORD *)v248;
          *(_OWORD *)v248 = 0uLL;
          sub_223623080((uint64_t *)v200, &v303);
          if ((_BYTE)v201)
          {
LABEL_11:
            if (!v200[16])
              goto LABEL_43;
            v10 = *(std::__shared_weak_count **)&v200[8];
            if (!*(_QWORD *)&v200[8])
              goto LABEL_43;
            v11 = (unint64_t *)(*(_QWORD *)&v200[8] + 8);
            do
              v12 = __ldaxr(v11);
            while (__stlxr(v12 - 1, v11));
LABEL_42:
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
              if ((_BYTE)v249)
                goto LABEL_44;
              goto LABEL_50;
            }
LABEL_43:
            if ((_BYTE)v249)
            {
LABEL_44:
              if (v248[16])
              {
                v29 = *(std::__shared_weak_count **)&v248[8];
                if (*(_QWORD *)&v248[8])
                {
                  v30 = (unint64_t *)(*(_QWORD *)&v248[8] + 8);
                  do
                    v31 = __ldaxr(v30);
                  while (__stlxr(v31 - 1, v30));
                  goto LABEL_53;
                }
              }
              goto LABEL_54;
            }
LABEL_50:
            v29 = *(std::__shared_weak_count **)&v248[8];
            if (*(_QWORD *)&v248[8])
            {
              v32 = (unint64_t *)(*(_QWORD *)&v248[8] + 8);
              do
                v31 = __ldaxr(v32);
              while (__stlxr(v31 - 1, v32));
LABEL_53:
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
                if (v305)
                {
LABEL_55:
                  if (v304)
                  {
                    v33 = (std::runtime_error_vtbl *)v303;
                    if ((_QWORD)v303)
                    {
LABEL_59:
                      v149.__vftable = v33;
                      v149.__imp_.__imp_ = (const char *)*((_QWORD *)&v303 + 1);
                      if (*((_QWORD *)&v303 + 1))
                      {
                        v34 = (unint64_t *)(*((_QWORD *)&v303 + 1) + 8);
                        do
                          v35 = __ldxr(v34);
                        while (__stxr(v35 + 1, v34));
                      }
                      if (!*(_QWORD *)(a1 + 40) || !*(_QWORD *)(a1 + 56))
                      {
                        sub_2235FCBC8((uint64_t)v200, a1, (uint64_t *)&v149);
                        sub_223601DA8((uint64_t)v298, (uint64_t)v200);
                        if (BYTE8(v242))
                        {
LABEL_158:
                          if ((_BYTE)v242 && v241)
                            sub_2232954B0((uint64_t)v200);
                          goto LABEL_171;
                        }
                        v39 = *(std::__shared_weak_count **)&v200[8];
                        if (*(_QWORD *)&v200[8])
                        {
                          v40 = (unint64_t *)(*(_QWORD *)&v200[8] + 8);
                          do
                            v41 = __ldaxr(v40);
                          while (__stlxr(v41 - 1, v40));
LABEL_169:
                          if (!v41)
                          {
                            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                            std::__shared_weak_count::__release_weak(v39);
                          }
                        }
LABEL_171:
                        imp = (std::__shared_weak_count *)v149.__imp_.__imp_;
                        if (v149.__imp_.__imp_)
                        {
                          v67 = (unint64_t *)(v149.__imp_.__imp_ + 8);
                          do
                            v68 = __ldaxr(v67);
                          while (__stlxr(v68 - 1, v67));
                          if (!v68)
                          {
                            ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
                            std::__shared_weak_count::__release_weak(imp);
                          }
                        }
LABEL_176:
                        v248[0] = 0;
                        v289 = 0;
                        LOBYTE(v290) = 0;
                        v291 = 0;
                        LOBYTE(v292) = 0;
                        v293 = 0;
                        LOBYTE(v294) = 0;
                        BYTE4(v294) = 0;
                        if (v301 && v300)
                        {
                          sub_223299E34((uint64_t)v248, (uint64_t)v298);
                          v289 = 1;
                        }
                        if (!v304)
                          goto LABEL_204;
                        v69 = v303;
                        if (v291)
                        {
                          v70 = *((_QWORD *)&v303 + 1);
                          if (*((_QWORD *)&v303 + 1))
                          {
                            v71 = (unint64_t *)(*((_QWORD *)&v303 + 1) + 8);
                            do
                              v72 = __ldxr(v71);
                            while (__stxr(v72 + 1, v71));
                          }
                          v73 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
                          *(_QWORD *)&v290 = v69;
                          *((_QWORD *)&v290 + 1) = v70;
                          if (v73)
                          {
                            p_shared_owners = (unint64_t *)&v73->__shared_owners_;
                            do
                              v75 = __ldaxr(p_shared_owners);
                            while (__stlxr(v75 - 1, p_shared_owners));
                            if (!v75)
                            {
                              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                              std::__shared_weak_count::__release_weak(v73);
                            }
                          }
                          if (!v291)
                            goto LABEL_204;
                          v76 = (std::runtime_error_vtbl *)v290;
                          if (!(_QWORD)v290)
                            goto LABEL_204;
                        }
                        else
                        {
                          v290 = v303;
                          if (*((_QWORD *)&v303 + 1))
                          {
                            v77 = (unint64_t *)(*((_QWORD *)&v303 + 1) + 8);
                            do
                              v78 = __ldxr(v77);
                            while (__stxr(v78 + 1, v77));
                          }
                          v291 = 1;
                          v76 = (std::runtime_error_vtbl *)v290;
                          if (!(_QWORD)v290)
                            goto LABEL_204;
                        }
                        v79 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
                        v149.__vftable = v76;
                        v149.__imp_.__imp_ = (const char *)*((_QWORD *)&v290 + 1);
                        if (*((_QWORD *)&v290 + 1))
                        {
                          v80 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
                          do
                            v81 = __ldxr(v80);
                          while (__stxr(v81 + 1, v80));
                        }
                        sub_2236026E4((_QWORD *)a1, (uint64_t *)&v149);
                        if (v79)
                        {
                          v82 = (unint64_t *)&v79->__shared_owners_;
                          do
                            v83 = __ldaxr(v82);
                          while (__stlxr(v83 - 1, v82));
                          if (!v83)
                          {
                            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                            std::__shared_weak_count::__release_weak(v79);
                          }
                        }
LABEL_204:
                        if (v296)
                        {
                          v84 = v295;
                          if ((_QWORD)v295)
                          {
                            if (v293)
                            {
                              v85 = *((_QWORD *)&v295 + 1);
                              if (*((_QWORD *)&v295 + 1))
                              {
                                v86 = (unint64_t *)(*((_QWORD *)&v295 + 1) + 8);
                                do
                                  v87 = __ldxr(v86);
                                while (__stxr(v87 + 1, v86));
                              }
                              v88 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
                              *(_QWORD *)&v292 = v84;
                              *((_QWORD *)&v292 + 1) = v85;
                              if (v88)
                              {
                                v89 = (unint64_t *)&v88->__shared_owners_;
                                do
                                  v90 = __ldaxr(v89);
                                while (__stlxr(v90 - 1, v89));
                                if (!v90)
                                {
                                  ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                                  std::__shared_weak_count::__release_weak(v88);
                                }
                              }
                            }
                            else
                            {
                              v292 = v295;
                              if (*((_QWORD *)&v295 + 1))
                              {
                                v91 = (unint64_t *)(*((_QWORD *)&v295 + 1) + 8);
                                do
                                  v92 = __ldxr(v91);
                                while (__stxr(v92 + 1, v91));
                              }
                              v293 = 1;
                            }
                          }
                        }
                        LODWORD(v294) = v145;
                        BYTE4(v294) = v146;
                        sub_223603C88(a1, (uint64_t)v248);
                        v200[0] = 0;
                        v241 = 0;
                        if (v289)
                        {
                          *(_OWORD *)&v200[8] = *(_OWORD *)&v248[8];
                          *(_QWORD *)v200 = *(_QWORD *)v248;
                          v201 = v249;
                          *(_QWORD *)&v248[8] = 0;
                          *(_QWORD *)&v248[16] = 0;
                          v249 = 0;
                          v202 = v250;
                          LOBYTE(v203) = 0;
                          v206 = 0;
                          if (v254)
                          {
                            v203 = v251;
                            v204 = v252;
                            v252 = 0;
                            v251 = 0uLL;
                            v205 = v253;
                            v206 = 1;
                          }
                          LOBYTE(v207) = 0;
                          v210 = 0;
                          if (v258)
                          {
                            v207 = v255;
                            v208 = v256;
                            v256 = 0;
                            v255 = 0uLL;
                            v209 = v257;
                            v210 = 1;
                          }
                          LOBYTE(v211) = 0;
                          v219 = 0;
                          if (v267)
                          {
                            v211 = v259;
                            v212 = v260;
                            v213 = v261;
                            v214 = v262;
                            v215 = v263;
                            v216 = v264;
                            v217 = v265;
                            v218 = v266;
                            v266 = 0;
                            v265 = 0uLL;
                            v219 = 1;
                          }
                          LOBYTE(v220) = 0;
                          v228 = 0;
                          if (v276)
                          {
                            v220 = v268;
                            v221 = v269;
                            v268 = 0uLL;
                            v222 = v270;
                            v223 = v271;
                            v269 = 0;
                            v271 = 0uLL;
                            v93 = v272;
                            v272 = 0;
                            v225 = v273;
                            v224 = v93;
                            v226 = v274;
                            v273 = 0uLL;
                            v274 = 0;
                            v227 = v275;
                            v228 = 1;
                          }
                          LOBYTE(v229) = 0;
                          v237 = 0;
                          if (v285)
                          {
                            v229 = v277;
                            v94 = v278;
                            v95 = v279;
                            v279 = 0;
                            v278 = 0;
                            v277 = 0uLL;
                            v230 = v94;
                            v231 = v95;
                            v96 = v280;
                            v280 = 0uLL;
                            v236 = v284;
                            v235 = v283;
                            v234 = v282;
                            v232 = v96;
                            v233 = v281;
                            v237 = 1;
                          }
                          LOBYTE(v238) = 0;
                          v240 = 0;
                          if (v288)
                          {
                            v238 = v286;
                            v239 = v287;
                            v287 = 0uLL;
                            v286 = 0;
                            v240 = 1;
                          }
                          v241 = 1;
                        }
                        LOBYTE(v242) = 0;
                        v243 = 0;
                        if (v291)
                        {
                          v242 = v290;
                          v290 = 0uLL;
                          v243 = 1;
                        }
                        LOBYTE(v244) = 0;
                        v245 = 0;
                        if (v293)
                        {
                          v244 = v292;
                          v292 = 0uLL;
                          v245 = 1;
                        }
                        v246 = v294;
                        v247 = 1;
                        v151[0] = 0;
                        v192 = 0;
                        if (v289)
                        {
                          *(_OWORD *)&v151[8] = *(_OWORD *)&v200[8];
                          *(_QWORD *)v151 = *(_QWORD *)v200;
                          v152 = v201;
                          *(_QWORD *)&v200[8] = 0;
                          *(_QWORD *)&v200[16] = 0;
                          v201 = 0;
                          v153 = v202;
                          LOBYTE(v154) = 0;
                          v157 = 0;
                          if (v206)
                          {
                            v154 = v203;
                            v155 = v204;
                            v204 = 0;
                            v203 = 0uLL;
                            v156 = v205;
                            v157 = 1;
                          }
                          LOBYTE(v158) = 0;
                          v161 = 0;
                          if (v210)
                          {
                            v158 = v207;
                            v159 = v208;
                            v208 = 0;
                            v207 = 0uLL;
                            v160 = v209;
                            v161 = 1;
                          }
                          LOBYTE(v162) = 0;
                          v170 = 0;
                          if (v219)
                          {
                            v162 = v211;
                            v163 = v212;
                            v164 = v213;
                            v165 = v214;
                            v166 = v215;
                            v167 = v216;
                            v168 = v217;
                            v169 = v218;
                            v218 = 0;
                            v217 = 0uLL;
                            v170 = 1;
                          }
                          LOBYTE(v171) = 0;
                          v179 = 0;
                          if (v228)
                          {
                            v171 = v220;
                            v172 = v221;
                            v220 = 0uLL;
                            v173 = v222;
                            v174 = v223;
                            v221 = 0;
                            v223 = 0uLL;
                            v97 = v224;
                            v224 = 0;
                            v176 = v225;
                            v175 = v97;
                            v177 = v226;
                            v225 = 0uLL;
                            v226 = 0;
                            v178 = v227;
                            v179 = 1;
                          }
                          LOBYTE(v180) = 0;
                          v188 = 0;
                          if (v237)
                          {
                            v180 = v229;
                            v98 = v230;
                            v99 = v231;
                            v231 = 0;
                            v230 = 0;
                            v229 = 0uLL;
                            v181 = v98;
                            v182 = v99;
                            v100 = v232;
                            v232 = 0uLL;
                            v187 = v236;
                            v186 = v235;
                            v185 = v234;
                            v183 = v100;
                            v184 = v233;
                            v188 = 1;
                          }
                          LOBYTE(v189) = 0;
                          v191 = 0;
                          if (v240)
                          {
                            v189 = v238;
                            v190 = v239;
                            v239 = 0uLL;
                            v238 = 0;
                            v191 = 1;
                          }
                          v192 = 1;
                        }
                        LOBYTE(v193) = 0;
                        v194 = 0;
                        if (v291)
                        {
                          v193 = v242;
                          v242 = 0uLL;
                          v194 = 1;
                        }
                        LOBYTE(v195) = 0;
                        v196 = 0;
                        if (v293)
                        {
                          v195 = v244;
                          v244 = 0uLL;
                          v196 = 1;
                        }
                        v197 = v294;
                        v198 = 1;
                        v199 = 1;
                        if (v291)
                        {
                          v101 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
                          if (*((_QWORD *)&v242 + 1))
                          {
                            v102 = (unint64_t *)(*((_QWORD *)&v242 + 1) + 8);
                            do
                              v103 = __ldaxr(v102);
                            while (__stlxr(v103 - 1, v102));
                            if (!v103)
                            {
                              ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                              std::__shared_weak_count::__release_weak(v101);
                            }
                          }
                        }
                        if (v241)
                          sub_2232954B0((uint64_t)v200);
                        if (v293)
                        {
                          v104 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
                          if (*((_QWORD *)&v292 + 1))
                          {
                            v105 = (unint64_t *)(*((_QWORD *)&v292 + 1) + 8);
                            do
                              v106 = __ldaxr(v105);
                            while (__stlxr(v106 - 1, v105));
                            if (!v106)
                            {
                              ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                              std::__shared_weak_count::__release_weak(v104);
                            }
                          }
                        }
                        if (v291)
                        {
                          v107 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
                          if (*((_QWORD *)&v290 + 1))
                          {
                            v108 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
                            do
                              v109 = __ldaxr(v108);
                            while (__stlxr(v109 - 1, v108));
                            if (!v109)
                            {
                              ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                              std::__shared_weak_count::__release_weak(v107);
                            }
                          }
                        }
                        if (v289)
                          sub_2232954B0((uint64_t)v248);
                        goto LABEL_277;
                      }
                      sub_2235FDE1C((uint64_t)v248, a1, (uint64_t)&v149);
                      LOBYTE(v201) = v249;
                      if ((_BYTE)v249)
                      {
                        v200[0] = 0;
                        v200[16] = 0;
                        if (v248[16])
                        {
                          *(_OWORD *)v200 = *(_OWORD *)v248;
                          *(_OWORD *)v248 = 0uLL;
                          v200[16] = 1;
                        }
                        sub_223623080((uint64_t *)v200, &v295);
                        if ((_BYTE)v201)
                          goto LABEL_68;
                      }
                      else
                      {
                        *(_OWORD *)v200 = *(_OWORD *)v248;
                        *(_OWORD *)v248 = 0uLL;
                        sub_223623080((uint64_t *)v200, &v295);
                        if ((_BYTE)v201)
                        {
LABEL_68:
                          if (!v200[16])
                            goto LABEL_142;
                          v36 = *(std::__shared_weak_count **)&v200[8];
                          if (!*(_QWORD *)&v200[8])
                            goto LABEL_142;
                          v37 = (unint64_t *)(*(_QWORD *)&v200[8] + 8);
                          do
                            v38 = __ldaxr(v37);
                          while (__stlxr(v38 - 1, v37));
LABEL_140:
                          if (!v38)
                          {
                            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                            std::__shared_weak_count::__release_weak(v36);
                          }
LABEL_142:
                          if ((_BYTE)v249)
                          {
                            if (!v248[16])
                              goto LABEL_153;
                            v58 = *(std::__shared_weak_count **)&v248[8];
                            if (!*(_QWORD *)&v248[8])
                              goto LABEL_153;
                            v59 = (unint64_t *)(*(_QWORD *)&v248[8] + 8);
                            do
                              v60 = __ldaxr(v59);
                            while (__stlxr(v60 - 1, v59));
                          }
                          else
                          {
                            v58 = *(std::__shared_weak_count **)&v248[8];
                            if (!*(_QWORD *)&v248[8])
                              goto LABEL_153;
                            v61 = (unint64_t *)(*(_QWORD *)&v248[8] + 8);
                            do
                              v60 = __ldaxr(v61);
                            while (__stlxr(v60 - 1, v61));
                          }
                          if (!v60)
                          {
                            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                            std::__shared_weak_count::__release_weak(v58);
                          }
LABEL_153:
                          if (!v297)
                          {
                            sub_2232E56F4(v200, (uint64_t)&v295);
                            *(_OWORD *)v151 = *(_OWORD *)v200;
                            v199 = 0;
                            v62 = (std::__shared_weak_count *)v149.__imp_.__imp_;
                            if (v149.__imp_.__imp_)
                            {
                              v63 = (unint64_t *)(v149.__imp_.__imp_ + 8);
                              do
                                v64 = __ldaxr(v63);
                              while (__stlxr(v64 - 1, v63));
                              if (!v64)
                              {
                                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                                std::__shared_weak_count::__release_weak(v62);
                              }
                            }
LABEL_277:
                            if (v297)
                            {
                              if (!v296)
                                goto LABEL_287;
                              v110 = (std::__shared_weak_count *)*((_QWORD *)&v295 + 1);
                              if (!*((_QWORD *)&v295 + 1))
                                goto LABEL_287;
                              v111 = (unint64_t *)(*((_QWORD *)&v295 + 1) + 8);
                              do
                                v112 = __ldaxr(v111);
                              while (__stlxr(v112 - 1, v111));
                            }
                            else
                            {
                              v110 = (std::__shared_weak_count *)*((_QWORD *)&v295 + 1);
                              if (!*((_QWORD *)&v295 + 1))
                                goto LABEL_287;
                              v113 = (unint64_t *)(*((_QWORD *)&v295 + 1) + 8);
                              do
                                v112 = __ldaxr(v113);
                              while (__stlxr(v112 - 1, v113));
                            }
                            if (!v112)
                            {
                              ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                              std::__shared_weak_count::__release_weak(v110);
                              if (v302)
                                goto LABEL_288;
                              goto LABEL_296;
                            }
LABEL_287:
                            if (v302)
                            {
LABEL_288:
                              if (v301 && v300)
                              {
                                sub_2232954B0((uint64_t)v298);
                                if (!v305)
                                  goto LABEL_291;
LABEL_301:
                                if (v304)
                                {
                                  v114 = (std::__shared_weak_count *)*((_QWORD *)&v303 + 1);
                                  if (*((_QWORD *)&v303 + 1))
                                  {
                                    v120 = (unint64_t *)(*((_QWORD *)&v303 + 1) + 8);
                                    do
                                      v116 = __ldaxr(v120);
                                    while (__stlxr(v116 - 1, v120));
LABEL_305:
                                    if (!v116)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                                      std::__shared_weak_count::__release_weak(v114);
                                      if (v147)
                                        goto LABEL_307;
                                      goto LABEL_327;
                                    }
                                  }
                                }
LABEL_306:
                                if (v147)
                                  goto LABEL_307;
                                goto LABEL_327;
                              }
                              goto LABEL_300;
                            }
LABEL_296:
                            v117 = v299;
                            if (v299)
                            {
                              v118 = (unint64_t *)&v299->__shared_owners_;
                              do
                                v119 = __ldaxr(v118);
                              while (__stlxr(v119 - 1, v118));
                              if (!v119)
                              {
                                ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                                std::__shared_weak_count::__release_weak(v117);
                                if (v305)
                                  goto LABEL_301;
                                goto LABEL_291;
                              }
                            }
LABEL_300:
                            if (v305)
                              goto LABEL_301;
LABEL_291:
                            v114 = (std::__shared_weak_count *)*((_QWORD *)&v303 + 1);
                            if (*((_QWORD *)&v303 + 1))
                            {
                              v115 = (unint64_t *)(*((_QWORD *)&v303 + 1) + 8);
                              do
                                v116 = __ldaxr(v115);
                              while (__stlxr(v116 - 1, v115));
                              goto LABEL_305;
                            }
                            goto LABEL_306;
                          }
                          if ((!v296 || !(_QWORD)v295)
                            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 602, (uint64_t)"*ex_opt_plane_result && **ex_opt_plane_result", 45, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
                          {
                            abort();
                          }
                          sub_2235FD998((uint64_t)v200, a1, (uint64_t *)&v295);
                          sub_223601DA8((uint64_t)v298, (uint64_t)v200);
                          if (BYTE8(v242))
                            goto LABEL_158;
                          v39 = *(std::__shared_weak_count **)&v200[8];
                          if (*(_QWORD *)&v200[8])
                          {
                            v65 = (unint64_t *)(*(_QWORD *)&v200[8] + 8);
                            do
                              v41 = __ldaxr(v65);
                            while (__stlxr(v41 - 1, v65));
                            goto LABEL_169;
                          }
                          goto LABEL_171;
                        }
                      }
                      v36 = *(std::__shared_weak_count **)&v200[8];
                      if (!*(_QWORD *)&v200[8])
                        goto LABEL_142;
                      v57 = (unint64_t *)(*(_QWORD *)&v200[8] + 8);
                      do
                        v38 = __ldaxr(v57);
                      while (__stlxr(v38 - 1, v57));
                      goto LABEL_140;
                    }
                  }
                  if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 593, (uint64_t)"*ex_opt_kf_result && **ex_opt_kf_result", 39, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
                  {
                    v33 = (std::runtime_error_vtbl *)v303;
                    goto LABEL_59;
                  }
LABEL_366:
                  abort();
                }
                goto LABEL_134;
              }
            }
LABEL_54:
            if (v305)
              goto LABEL_55;
            goto LABEL_134;
          }
        }
        v10 = *(std::__shared_weak_count **)&v200[8];
        if (!*(_QWORD *)&v200[8])
          goto LABEL_43;
        v28 = (unint64_t *)(*(_QWORD *)&v200[8] + 8);
        do
          v12 = __ldaxr(v28);
        while (__stlxr(v12 - 1, v28));
        goto LABEL_42;
      }
      v13 = *(_QWORD *)(a1 + 16);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 72);
        v15 = (std::runtime_error_vtbl *)operator new();
        v15->~runtime_error_0 = 0;
        v16 = (unint64_t *)&v15->~runtime_error_0;
        v15[1].~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))850045863;
        v15->what = 0;
        *(_OWORD *)&v15[1].~runtime_error_0 = 0u;
        *(_OWORD *)&v15[2].~runtime_error = 0u;
        *(_OWORD *)&v15[2].what = 0u;
        v15[3].~runtime_error_0 = 0;
        v15[3].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))1018212795;
        *(_OWORD *)&v15[4].~runtime_error = 0u;
        *(_OWORD *)&v15[4].what = 0u;
        *(_OWORD *)((char *)&v15[5].~runtime_error + 4) = 0u;
        v15->~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))&off_24EC556E8;
        v150 = v15;
        v148 = v15;
        std::mutex::lock((std::mutex *)&v15[1]);
        what = (int)v15[5].what;
        if ((what & 2) != 0)
          sub_2233236D4(1u);
        do
          v18 = __ldxr(v16);
        while (__stxr(v18 + 1, v16));
        LODWORD(v15[5].what) = what | 2;
        std::mutex::unlock((std::mutex *)&v15[1]);
        *(_OWORD *)v248 = 0uLL;
        v19 = *(std::__shared_weak_count **)(v14 + 112);
        if (!v19
          || (v20 = std::__shared_weak_count::lock(v19), (*(_QWORD *)&v248[8] = v20) == 0)
          || (v21 = v20, v22 = *(_QWORD *)(v14 + 104), (*(_QWORD *)v248 = v22) == 0))
        {
          std::runtime_error::runtime_error(&v149, "ChannelInputWithPromise: Invalid operation. Processor is released.");
          v149.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          v143 = std::runtime_error::runtime_error(exception, &v149);
          v143->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
          __cxa_throw(v143, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
        }
        v149.__vftable = v150;
        v150 = 0;
        (*(void (**)(uint64_t, _OWORD *, std::runtime_error *))(*(_QWORD *)v22 + 56))(v22, v144, &v149);
        sub_22358838C((uint64_t *)&v149);
        v23 = (unint64_t *)&v21->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        sub_22358838C((uint64_t *)&v150);
        sub_2235FD090((uint64_t)v200, (uint64_t *)&v148);
        v25 = (uint64_t)v148;
        if (v148)
        {
          v26 = (unint64_t *)&v148->~runtime_error_0;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
        }
        sub_223601DA8((uint64_t)v298, (uint64_t)v200);
        if (BYTE8(v242))
        {
          if ((_BYTE)v242 && v241)
            sub_2232954B0((uint64_t)v200);
        }
        else
        {
          v42 = *(std::__shared_weak_count **)&v200[8];
          if (*(_QWORD *)&v200[8])
          {
            v43 = (unint64_t *)(*(_QWORD *)&v200[8] + 8);
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
        }
        if (!v302)
        {
          sub_2232E56F4(v200, (uint64_t)v298);
          goto LABEL_135;
        }
        if (!v301
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 613, (uint64_t)"*ex_opt_mesh_result", 19, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_366;
        }
      }
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_176;
      sub_2235FC47C((uint64_t)v248, a1, (uint64_t)v144);
      LOBYTE(v201) = v249;
      if ((_BYTE)v249)
      {
        v200[0] = 0;
        v200[16] = 0;
        if (v248[16])
        {
          *(_OWORD *)v200 = *(_OWORD *)v248;
          *(_OWORD *)v248 = 0uLL;
          v200[16] = 1;
        }
        sub_223623080((uint64_t *)v200, &v303);
        if ((_BYTE)v201)
          goto LABEL_93;
      }
      else
      {
        *(_OWORD *)v200 = *(_OWORD *)v248;
        *(_OWORD *)v248 = 0uLL;
        sub_223623080((uint64_t *)v200, &v303);
        if ((_BYTE)v201)
        {
LABEL_93:
          if (!v200[16])
            goto LABEL_105;
          v45 = *(std::__shared_weak_count **)&v200[8];
          if (!*(_QWORD *)&v200[8])
            goto LABEL_105;
          v46 = (unint64_t *)(*(_QWORD *)&v200[8] + 8);
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
LABEL_103:
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
LABEL_105:
          if ((_BYTE)v249)
          {
            if (!v248[16])
              goto LABEL_116;
            v49 = *(std::__shared_weak_count **)&v248[8];
            if (!*(_QWORD *)&v248[8])
              goto LABEL_116;
            v50 = (unint64_t *)(*(_QWORD *)&v248[8] + 8);
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
          }
          else
          {
            v49 = *(std::__shared_weak_count **)&v248[8];
            if (!*(_QWORD *)&v248[8])
              goto LABEL_116;
            v52 = (unint64_t *)(*(_QWORD *)&v248[8] + 8);
            do
              v51 = __ldaxr(v52);
            while (__stlxr(v51 - 1, v52));
          }
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
LABEL_116:
          if (!v305)
          {
LABEL_134:
            sub_2232E56F4(v200, (uint64_t)&v303);
            goto LABEL_135;
          }
          if (!*(_QWORD *)(a1 + 40))
            goto LABEL_176;
          v53 = *(_QWORD *)(a1 + 56);
          if (v53 && !v304)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 620, (uint64_t)"!HasPlaneDetectionCapability() || *ex_opt_kf_result", 51, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_366;
            }
            if (!*(_QWORD *)(a1 + 40))
              goto LABEL_176;
            v53 = *(_QWORD *)(a1 + 56);
          }
          if (!v53)
            goto LABEL_176;
          if (!v304 || (v54 = (std::runtime_error_vtbl *)v303) == 0)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 623, (uint64_t)"*ex_opt_kf_result && **ex_opt_kf_result", 39, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_366;
            }
            v54 = (std::runtime_error_vtbl *)v303;
          }
          v149.__vftable = v54;
          v149.__imp_.__imp_ = (const char *)*((_QWORD *)&v303 + 1);
          if (*((_QWORD *)&v303 + 1))
          {
            v55 = (unint64_t *)(*((_QWORD *)&v303 + 1) + 8);
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
          }
          sub_2235FDE1C((uint64_t)v248, a1, (uint64_t)&v149);
          LOBYTE(v201) = v249;
          if ((_BYTE)v249)
          {
            v200[0] = 0;
            v200[16] = 0;
            if (v248[16])
            {
              *(_OWORD *)v200 = *(_OWORD *)v248;
              *(_OWORD *)v248 = 0uLL;
              v200[16] = 1;
            }
          }
          else
          {
            *(_OWORD *)v200 = *(_OWORD *)v248;
            *(_OWORD *)v248 = 0uLL;
          }
          sub_223623080((uint64_t *)v200, &v295);
          if ((_BYTE)v201)
          {
            if (!v200[16])
              goto LABEL_346;
            v131 = *(std::__shared_weak_count **)&v200[8];
            if (!*(_QWORD *)&v200[8])
              goto LABEL_346;
            v132 = (unint64_t *)(*(_QWORD *)&v200[8] + 8);
            do
              v133 = __ldaxr(v132);
            while (__stlxr(v133 - 1, v132));
          }
          else
          {
            v131 = *(std::__shared_weak_count **)&v200[8];
            if (!*(_QWORD *)&v200[8])
              goto LABEL_346;
            v134 = (unint64_t *)(*(_QWORD *)&v200[8] + 8);
            do
              v133 = __ldaxr(v134);
            while (__stlxr(v133 - 1, v134));
          }
          if (!v133)
          {
            ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
            std::__shared_weak_count::__release_weak(v131);
          }
LABEL_346:
          if ((_BYTE)v249)
          {
            if (v248[16])
            {
              v135 = *(std::__shared_weak_count **)&v248[8];
              if (*(_QWORD *)&v248[8])
              {
                v136 = (unint64_t *)(*(_QWORD *)&v248[8] + 8);
                do
                  v137 = __ldaxr(v136);
                while (__stlxr(v137 - 1, v136));
                goto LABEL_355;
              }
            }
          }
          else
          {
            v135 = *(std::__shared_weak_count **)&v248[8];
            if (*(_QWORD *)&v248[8])
            {
              v138 = (unint64_t *)(*(_QWORD *)&v248[8] + 8);
              do
                v137 = __ldaxr(v138);
              while (__stlxr(v137 - 1, v138));
LABEL_355:
              if (!v137)
              {
                ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                std::__shared_weak_count::__release_weak(v135);
              }
            }
          }
          v139 = (std::__shared_weak_count *)v149.__imp_.__imp_;
          if (v149.__imp_.__imp_)
          {
            v140 = (unint64_t *)(v149.__imp_.__imp_ + 8);
            do
              v141 = __ldaxr(v140);
            while (__stlxr(v141 - 1, v140));
            if (!v141)
            {
              ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
              std::__shared_weak_count::__release_weak(v139);
            }
          }
          if (v297)
          {
            if (v296 && (_QWORD)v295
              || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 629, (uint64_t)"*ex_opt_plane_result && **ex_opt_plane_result", 45, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_176;
            }
            goto LABEL_366;
          }
          sub_2232E56F4(v200, (uint64_t)&v295);
LABEL_135:
          *(_OWORD *)v151 = *(_OWORD *)v200;
          v199 = 0;
          goto LABEL_277;
        }
      }
      v45 = *(std::__shared_weak_count **)&v200[8];
      if (!*(_QWORD *)&v200[8])
        goto LABEL_105;
      v48 = (unint64_t *)(*(_QWORD *)&v200[8] + 8);
      do
        v47 = __ldaxr(v48);
      while (__stlxr(v47 - 1, v48));
      goto LABEL_103;
    }
  }
  else
  {
LABEL_5:
    if (v147)
      goto LABEL_6;
  }
  sub_2232E56F4(v200, (uint64_t)v144);
  *(_OWORD *)v151 = *(_OWORD *)v200;
  v199 = 0;
  if (v147)
  {
LABEL_307:
    sub_2232555B8((uint64_t)v144);
    goto LABEL_308;
  }
LABEL_327:
  v128 = (std::__shared_weak_count *)*((_QWORD *)&v144[0] + 1);
  if (*((_QWORD *)&v144[0] + 1))
  {
    v129 = (unint64_t *)(*((_QWORD *)&v144[0] + 1) + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
LABEL_308:
  if (v199)
  {
    if (!v198
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 657, (uint64_t)"*ex_opt_result", 14, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 440) = 0;
    if (v192)
    {
      sub_223299E34(a3, (uint64_t)v151);
      *(_BYTE *)(a3 + 440) = 1;
    }
    *(_BYTE *)(a3 + 448) = 0;
    *(_BYTE *)(a3 + 464) = 0;
    if (v194)
    {
      v121 = *((_QWORD *)&v193 + 1);
      *(_QWORD *)(a3 + 448) = v193;
      *(_QWORD *)(a3 + 456) = v121;
      if (v121)
      {
        v122 = (unint64_t *)(v121 + 8);
        do
          v123 = __ldxr(v122);
        while (__stxr(v123 + 1, v122));
      }
      *(_BYTE *)(a3 + 464) = 1;
    }
    *(_BYTE *)(a3 + 472) = 0;
    *(_BYTE *)(a3 + 488) = 0;
    if (v196)
    {
      v124 = *((_QWORD *)&v195 + 1);
      *(_QWORD *)(a3 + 472) = v195;
      *(_QWORD *)(a3 + 480) = v124;
      if (v124)
      {
        v125 = (unint64_t *)(v124 + 8);
        do
          v126 = __ldxr(v125);
        while (__stxr(v126 + 1, v125));
      }
      *(_BYTE *)(a3 + 488) = 1;
    }
    *(_QWORD *)(a3 + 496) = v197;
    *(_BYTE *)(a3 + 504) = 1;
  }
  else
  {
    sub_2232E56F4(v144, (uint64_t)v151);
    *(_OWORD *)a3 = v144[0];
    *(_BYTE *)(a3 + 504) = 0;
  }
  return sub_22362071C((uint64_t)v151);
}

void sub_223607D78()
{
  sub_223167354((uint64_t)&STACK[0x738]);
  JUMPOUT(0x223607F9CLL);
}

void sub_223607E40(_Unwind_Exception *a1, int a2)
{
  std::__assoc_sub_state *v2;
  std::exception_ptr v3;

  if (a2)
  {
    __cxa_begin_catch(a1);
    std::current_exception();
    __cxa_end_catch();
    v2 = (std::__assoc_sub_state *)STACK[0x750];
    if (STACK[0x750])
    {
      std::exception_ptr::exception_ptr((std::exception_ptr *)&STACK[0x758], (const std::exception_ptr *)&STACK[0x748]);
      v3.__ptr_ = &STACK[0x758];
      std::__assoc_sub_state::set_exception(v2, v3);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)&STACK[0x758]);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)&STACK[0x748]);
      std::runtime_error::~runtime_error((std::runtime_error *)&STACK[0x738]);
      if (!STACK[0xB78])
        JUMPOUT(0x223606888);
      JUMPOUT(0x223606858);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(a1);
}

void sub_223607EAC()
{
  unint64_t v0;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&STACK[0x748]);
  std::runtime_error::~runtime_error((std::runtime_error *)&STACK[0x738]);
  v0 = STACK[0x730];
  sub_223167354((uint64_t)&STACK[0xB70]);
  if (!v0)
    JUMPOUT(0x223607F28);
  JUMPOUT(0x223607F00);
}

void sub_223607EE4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223607F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223251204((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223607F4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 440))
  {
    sub_2232954B0(v1);
    sub_22362071C((uint64_t)&STACK[0x760]);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x223607F80);
}

void sub_223607F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_223601D10((uint64_t)&STACK[0xD68]);
  sub_223602658((uint64_t)&STACK[0xD88]);
  sub_223601D10(v9 - 104);
  sub_223251204((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223607FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&STACK[0x970]);
  sub_223251204((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223607FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223251204((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223608000(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CAF88);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAF88))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CAF80);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CAF88);
  }
  *a1 = qword_2540CAF80;
}

void sub_22360809C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CAF88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CAF88);
  _Unwind_Resume(a1);
}

void sub_2236080F4(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  std::string *v16;
  int v17;
  std::string *v18;
  uint64_t v19;
  std::string::size_type size;
  unsigned __int8 v21;
  uint64_t v22;
  std::string::size_type v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__fs::filesystem::path *v26;
  size_t v27;
  _BYTE *v28;
  size_t v29;
  unint64_t v30;
  size_t v31;
  std::__fs::filesystem::path *p_dst;
  uint64_t v33;
  uint64_t v34;
  std::__fs::filesystem::path *v35;
  _BYTE *v36;
  size_t v37;
  std::string::size_type v38;
  size_t v39;
  size_t v40;
  unint64_t v41;
  std::__fs::filesystem::path *v42;
  unint64_t v43;
  std::__fs::filesystem::path *v44;
  size_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  std::string::size_type v49;
  uint64_t v50;
  unint64_t *v51;
  int v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  int v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__assoc_sub_state *v75;
  uint64_t *v76;
  unint64_t v77;
  unsigned __int8 v78;
  uint64_t v79;
  uint64_t i;
  unsigned __int8 v81;
  uint64_t v82;
  std::string::size_type v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__fs::filesystem::path *v86;
  size_t v87;
  _BYTE *v88;
  size_t v89;
  unint64_t v90;
  size_t v91;
  std::__fs::filesystem::path *v92;
  uint64_t v93;
  uint64_t v94;
  std::__fs::filesystem::path *v95;
  _BYTE *v96;
  size_t v97;
  std::string::size_type v98;
  size_t v99;
  size_t v100;
  unint64_t v101;
  std::__fs::filesystem::path *v102;
  unint64_t v103;
  std::__fs::filesystem::path *v104;
  size_t v105;
  unint64_t v106;
  uint64_t v107;
  void *v108;
  std::string::size_type v109;
  uint64_t v110;
  unint64_t *v111;
  int v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count *v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  int v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  std::__assoc_sub_state *v135;
  uint64_t *v136;
  unint64_t v137;
  unsigned __int8 v138;
  uint64_t v139;
  uint64_t j;
  unsigned __int8 v141;
  uint64_t v142;
  unint64_t *v143;
  int v144;
  unint64_t v145;
  unint64_t v146;
  std::string *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  std::string *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unsigned __int8 v159;
  unsigned __int8 v160;
  uint64_t *v161;
  std::__shared_weak_count *v162;
  uint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  std::string *v168;
  uint64_t v169;
  unsigned __int8 v170;
  unsigned __int8 v171;
  std::__assoc_sub_state *v172;
  char v173;
  char v174;
  unint64_t *v175;
  unint64_t v176;
  const char *v177;
  const std::error_category *v178;
  std::__assoc_sub_state *v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  std::runtime_error *exception;
  std::runtime_error *v187;
  std::runtime_error *v188;
  std::runtime_error *v189;
  std::__fs::filesystem::path *__p;
  std::__fs::filesystem::path *__src;
  void *__srca;
  std::__assoc_sub_state *v194;
  std::__shared_weak_count *v195;
  char v196;
  _BYTE v197[32];
  std::__assoc_sub_state *v198;
  std::__fs::filesystem::path __dst;
  std::__fs::filesystem::path v200;
  uint64_t v201[2];
  __int128 v202;
  std::runtime_error v203;
  std::string v204;
  std::string *v205;
  char v206;
  char v207;
  void *v208;
  char v209;
  void *v210;
  char v211;
  char v212;
  char v213;
  char v214;
  uint64_t v215;

  v215 = *MEMORY[0x24BDAC8D0];
  v5 = (std::mutex *)(a1 + 1304);
  std::mutex::lock((std::mutex *)(a1 + 1304));
  std::mutex::unlock(v5);
  v6 = *(_QWORD *)(a1 + 1368);
  *(_QWORD *)(a1 + 1368) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 72) + 96);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v8 = *(_QWORD *)(a1 + 40);
    if (v8)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 72) + 96) + 32))(*(_QWORD *)(*(_QWORD *)(v8 + 72) + 96));
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 72) + 264);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    }
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v10 + 72) + 96) + 32))(*(_QWORD *)(*(_QWORD *)(v10 + 72) + 96));
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 72) + 1944);
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 72) + 2112);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    }
    if (*(_QWORD *)(a1 + 40))
    {
      v13 = *(_QWORD *)(a1 + 56);
      if (v13)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v13 + 72) + 96) + 32))(*(_QWORD *)(*(_QWORD *)(v13 + 72) + 96));
        v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 72) + 264);
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
      }
    }
    v15 = *(_QWORD ***)(*(_QWORD *)(a1 + 72) + 72);
    (*(void (**)(_QWORD *))(*v15[12] + 32))(v15[12]);
    (*(void (**)(_QWORD *))(*v15[33] + 32))(v15[33]);
    (*(void (**)(_QWORD *))(*v15[54] + 32))(v15[54]);
    sub_22360D094((_QWORD *)a1);
  }
  v204.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC55970;
  *(_OWORD *)&v204.__r_.__value_.__r.__words[1] = a1;
  v205 = &v204;
  v16 = *(std::string **)(a2 + 8);
  memset(&v200, 0, sizeof(v200));
  v17 = *(char *)(a2 + 31);
  if (v17 >= 0)
    v18 = (std::string *)(a2 + 8);
  else
    v18 = v16;
  v19 = *(_QWORD *)(a2 + 16);
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a2 + 31);
  sub_2231816F0(&v200.__pn_, v18, (std::string *)((char *)v18 + v19));
  size = HIBYTE(v200.__pn_.__r_.__value_.__r.__words[2]);
  if ((v200.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v200.__pn_.__r_.__value_.__l.__size_;
  if (size)
  {
    v21 = atomic_load((unsigned __int8 *)&qword_255795348);
    if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_255795348))
    {
      __cxa_atexit((void (*)(void *))nullsub_599, &off_2540CA630, &dword_22314D000);
      __cxa_guard_release(&qword_255795348);
    }
    ((void (*)(int, std::__fs::filesystem::path *))off_2540CA630[16])((int)&off_2540CA630, &v200);
  }
  v22 = *(_QWORD *)(a1 + 40);
  if (!v22 || !*(_BYTE *)a2)
  {
    __dst.__pn_.__r_.__value_.__s.__data_[0] = 1;
    sub_22360D9DC((uint64_t *)v197, &__dst);
    v24 = *(std::__shared_weak_count **)v197;
    goto LABEL_156;
  }
  v23 = HIBYTE(v200.__pn_.__r_.__value_.__r.__words[2]);
  if ((v200.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v23 = v200.__pn_.__r_.__value_.__l.__size_;
  if (!v23)
  {
    memset(&__dst, 0, sizeof(__dst));
    v25 = *(_QWORD *)(v22 + 72);
    v197[0] = 0;
LABEL_106:
    *(std::__fs::filesystem::path *)&v197[8] = __dst;
    goto LABEL_108;
  }
  memset(v197, 0, 24);
  sub_2231816F0((std::string *)v197, (std::string *)"keyframe_db", (std::string *)"");
  if (SHIBYTE(v200.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&__dst, v200.__pn_.__r_.__value_.__l.__data_, v200.__pn_.__r_.__value_.__l.__size_);
  else
    __dst = v200;
  if (std::__fs::filesystem::path::__root_directory((const std::__fs::filesystem::path *)v197).__size_)
  {
    if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v197[23] >= 0)
        v28 = v197;
      else
        v28 = *(_BYTE **)v197;
      if (v197[23] >= 0)
        v29 = v197[23];
      else
        v29 = *(_QWORD *)&v197[8];
      sub_22319C4B8((void **)&__dst.__pn_.__r_.__value_.__l.__data_, v28, v29);
    }
    else
    {
      if ((v197[23] & 0x80) == 0)
      {
        __dst = *(std::__fs::filesystem::path *)v197;
        if ((v197[23] & 0x80000000) == 0)
          goto LABEL_105;
        goto LABEL_104;
      }
      sub_22319C3F4(&__dst, *(void **)v197, *(size_t *)&v197[8]);
    }
LABEL_103:
    if ((v197[23] & 0x80000000) == 0)
      goto LABEL_105;
    goto LABEL_104;
  }
  if (std::__fs::filesystem::path::__filename(&__dst).__size_)
  {
    if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      v27 = (__dst.__pn_.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (__dst.__pn_.__r_.__value_.__l.__size_ != v27)
      {
        v27 = __dst.__pn_.__r_.__value_.__l.__size_;
        p_dst = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
LABEL_65:
        __dst.__pn_.__r_.__value_.__l.__size_ = v27 + 1;
        goto LABEL_66;
      }
      if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
        goto LABEL_461;
      v26 = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
      if (v27 >= 0x3FFFFFFFFFFFFFF3)
      {
        v31 = 0x7FFFFFFFFFFFFFF7;
LABEL_61:
        v35 = (std::__fs::filesystem::path *)operator new(v31);
        p_dst = v35;
        if (!v27 || (memmove(v35, v26, v27), v27 != 22))
          operator delete(v26);
        __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        __dst.__pn_.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
        goto LABEL_65;
      }
    }
    else
    {
      if (HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) != 22)
      {
        v27 = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
        *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = (*((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) + 1) & 0x7F;
        p_dst = &__dst;
LABEL_66:
        *(_WORD *)((char *)&p_dst->__pn_.__r_.__value_.__l.__data_ + v27) = 47;
        goto LABEL_67;
      }
      v26 = &__dst;
      v27 = 22;
    }
    if (v27 + 1 > 2 * v27)
      v30 = v27 + 1;
    else
      v30 = 2 * v27;
    if (v30 >= 0x17)
    {
      v33 = (v30 & 0x7FFFFFFFFFFFFFF8) + 8;
      v34 = v30 | 7;
      if (v34 == 23)
        v34 = v33;
      v31 = v34 + 1;
    }
    else
    {
      v31 = 23;
    }
    goto LABEL_61;
  }
LABEL_67:
  if (v197[23] >= 0)
    v36 = v197;
  else
    v36 = *(_BYTE **)v197;
  if (v197[23] >= 0)
    v37 = v197[23];
  else
    v37 = *(_QWORD *)&v197[8];
  if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = 22;
  else
    v38 = (__dst.__pn_.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
  else
    v39 = __dst.__pn_.__r_.__value_.__l.__size_;
  if (v38 - v39 < v37)
  {
    v40 = 0x7FFFFFFFFFFFFFF7;
    v41 = v39 + v37;
    if (0x7FFFFFFFFFFFFFF6 - v38 >= v39 + v37 - v38)
    {
      v42 = &__dst;
      if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v42 = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
      __src = v42;
      if (v38 < 0x3FFFFFFFFFFFFFF3)
      {
        v43 = 2 * v38;
        if (v41 > 2 * v38)
          v43 = v39 + v37;
        if (v43 >= 0x17)
        {
          v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
          v47 = v43 | 7;
          if (v47 == 23)
            v47 = v46;
          v40 = v47 + 1;
        }
        else
        {
          v40 = 23;
        }
      }
      v48 = operator new(v40);
      v49 = (std::string::size_type)v48;
      if (v39)
        memmove(v48, __src, v39);
      memcpy((void *)(v49 + v39), v36, v37);
      if (v38 != 22)
        operator delete(__src);
      __dst.__pn_.__r_.__value_.__l.__size_ = v39 + v37;
      __dst.__pn_.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
      __dst.__pn_.__r_.__value_.__r.__words[0] = v49;
      *(_BYTE *)(v49 + v41) = 0;
      goto LABEL_103;
    }
LABEL_461:
    sub_22316DBC0();
  }
  if (!v37)
    goto LABEL_103;
  if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = &__dst;
  else
    v44 = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
  memmove((char *)v44 + v39, v36, v37);
  v45 = v39 + v37;
  if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = v45 & 0x7F;
    v44->__pn_.__r_.__value_.__s.__data_[v45] = 0;
    if ((v197[23] & 0x80000000) == 0)
      goto LABEL_105;
    goto LABEL_104;
  }
  __dst.__pn_.__r_.__value_.__l.__size_ = v39 + v37;
  v44->__pn_.__r_.__value_.__s.__data_[v45] = 0;
  if ((v197[23] & 0x80000000) != 0)
LABEL_104:
    operator delete(*(void **)v197);
LABEL_105:
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 72);
  v197[0] = 0;
  if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_106;
  sub_223197FA4(&v197[8], __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
LABEL_108:
  v50 = operator new();
  *(_QWORD *)(v50 + 8) = 0;
  v51 = (unint64_t *)(v50 + 8);
  *(_QWORD *)(v50 + 24) = 850045863;
  *(_QWORD *)(v50 + 16) = 0;
  *(_OWORD *)(v50 + 32) = 0u;
  *(_OWORD *)(v50 + 48) = 0u;
  *(_OWORD *)(v50 + 64) = 0u;
  *(_QWORD *)(v50 + 80) = 0;
  *(_QWORD *)(v50 + 88) = 1018212795;
  *(_OWORD *)(v50 + 96) = 0u;
  *(_OWORD *)(v50 + 112) = 0u;
  *(_OWORD *)(v50 + 124) = 0u;
  *(_QWORD *)v50 = &off_24EC559F0;
  v201[0] = v50;
  v198 = (std::__assoc_sub_state *)v50;
  std::mutex::lock((std::mutex *)(v50 + 24));
  v52 = *(_DWORD *)(v50 + 136);
  if ((v52 & 2) != 0)
    sub_2233236D4(1u);
  do
    v53 = __ldxr(v51);
  while (__stxr(v53 + 1, v51));
  *(_DWORD *)(v50 + 136) = v52 | 2;
  std::mutex::unlock((std::mutex *)(v50 + 24));
  v54 = *(std::__shared_weak_count **)(v25 + 1288);
  if (!v54 || (v55 = std::__shared_weak_count::lock(v54)) == 0 || (v56 = *(_QWORD *)(v25 + 1280)) == 0)
  {
    std::runtime_error::runtime_error(&v203, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v203.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v187 = std::runtime_error::runtime_error(exception, &v203);
    v187->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v187, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v203.__vftable = (std::runtime_error_vtbl *)v201[0];
  v201[0] = 0;
  (*(void (**)(uint64_t, _BYTE *, std::runtime_error *))(*(_QWORD *)v56 + 56))(v56, v197, &v203);
  sub_2234B3E44((uint64_t *)&v203);
  p_shared_owners = (unint64_t *)&v55->__shared_owners_;
  do
    v58 = __ldaxr(p_shared_owners);
  while (__stlxr(v58 - 1, p_shared_owners));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
  sub_2234B3E44(v201);
  if ((v197[31] & 0x80000000) != 0)
    operator delete(*(void **)&v197[8]);
  sub_22360D6E8((uint64_t)v197, &v198);
  v59 = v197[16];
  v24 = *(std::__shared_weak_count **)v197;
  if (!v197[16])
  {
    v60 = *(std::__shared_weak_count **)&v197[8];
    if (*(_QWORD *)&v197[8])
    {
      v61 = (unint64_t *)(*(_QWORD *)&v197[8] + 8);
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    if (v24)
      CFRetain(v24);
    v63 = (std::__shared_weak_count *)operator new();
    v64 = v63;
    v63->__shared_owners_ = 0;
    v65 = (unint64_t *)&v63->__shared_owners_;
    v63->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2B2C0;
    v63->__shared_weak_owners_ = 0;
    v63[1].__vftable = (std::__shared_weak_count_vtbl *)v24;
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
    do
      v67 = __ldaxr(v65);
    while (__stlxr(v67 - 1, v65));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v64);
    }
    if (v60)
    {
      v68 = (unint64_t *)&v60->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v194 = (std::__assoc_sub_state *)v24;
    v195 = v64;
    v196 = 0;
    if (v197[16])
    {
      v70 = *(_QWORD *)v197;
      if (*(_QWORD *)v197)
      {
        v71 = (unint64_t *)(*(_QWORD *)v197 + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 16))(v70);
      }
LABEL_146:
      v24 = 0;
      goto LABEL_147;
    }
    v24 = *(std::__shared_weak_count **)&v197[8];
    if (*(_QWORD *)&v197[8])
    {
      v73 = (unint64_t *)(*(_QWORD *)&v197[8] + 8);
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
      goto LABEL_146;
    }
  }
LABEL_147:
  v75 = v198;
  if (!v198)
    goto LABEL_151;
  v76 = &v198->__shared_owners_;
  do
    v77 = __ldaxr((unint64_t *)v76);
  while (__stlxr(v77 - 1, (unint64_t *)v76));
  if (!v77)
  {
    ((void (*)(std::__assoc_sub_state *))v75->__on_zero_shared)(v75);
    if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_152:
      if (!v59)
        goto LABEL_430;
      goto LABEL_156;
    }
  }
  else
  {
LABEL_151:
    if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_152;
  }
  operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
  if (!v59)
  {
LABEL_430:
    if (v24)
    {
      v184 = (unint64_t *)&v24->__shared_owners_;
      do
        v185 = __ldaxr(v184);
      while (__stlxr(v185 - 1, v184));
      if (!v185)
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    }
    goto LABEL_316;
  }
LABEL_156:
  if (!v24)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 985, (uint64_t)"keyframe_result_future.valid()", 30, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C);
    v78 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v78 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670 || byte_255795678)
    {
      v79 = qword_255795648;
      for (i = qword_255795650; v79 != i; v79 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v79)(*(_QWORD *)(v79 + 8), "keyframe_result_future.valid()", 30, &unk_22458ACF7, 0);
    }
    v81 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v81 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "keyframe_result_future.valid()", 30, &unk_22458ACF7, 0);
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v82 = *(_QWORD *)(a1 + 56);
    if (v82)
    {
      if (*(_BYTE *)(a2 + 1))
      {
        v83 = HIBYTE(v200.__pn_.__r_.__value_.__r.__words[2]);
        if ((v200.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v83 = v200.__pn_.__r_.__value_.__l.__size_;
        if (!v83)
        {
          memset(&__dst, 0, sizeof(__dst));
          v85 = *(_QWORD *)(v82 + 72);
          v197[0] = 0;
          goto LABEL_253;
        }
        memset(v197, 0, 24);
        sub_2231816F0((std::string *)v197, (std::string *)"planes_db", (std::string *)"");
        if (SHIBYTE(v200.__pn_.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&__dst, v200.__pn_.__r_.__value_.__l.__data_, v200.__pn_.__r_.__value_.__l.__size_);
        else
          __dst = v200;
        if (std::__fs::filesystem::path::__root_directory((const std::__fs::filesystem::path *)v197).__size_)
        {
          if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v197[23] >= 0)
              v88 = v197;
            else
              v88 = *(_BYTE **)v197;
            if (v197[23] >= 0)
              v89 = v197[23];
            else
              v89 = *(_QWORD *)&v197[8];
            sub_22319C4B8((void **)&__dst.__pn_.__r_.__value_.__l.__data_, v88, v89);
          }
          else
          {
            if ((v197[23] & 0x80) == 0)
            {
              __dst = *(std::__fs::filesystem::path *)v197;
              if ((v197[23] & 0x80000000) == 0)
                goto LABEL_252;
              goto LABEL_251;
            }
            sub_22319C3F4(&__dst, *(void **)v197, *(size_t *)&v197[8]);
          }
          goto LABEL_250;
        }
        if (!std::__fs::filesystem::path::__filename(&__dst).__size_)
          goto LABEL_215;
        if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
        {
          v87 = (__dst.__pn_.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (__dst.__pn_.__r_.__value_.__l.__size_ != v87)
          {
            v87 = __dst.__pn_.__r_.__value_.__l.__size_;
            v92 = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
LABEL_213:
            __dst.__pn_.__r_.__value_.__l.__size_ = v87 + 1;
            goto LABEL_214;
          }
          if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
            goto LABEL_462;
          v86 = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
          if (v87 >= 0x3FFFFFFFFFFFFFF3)
          {
            v91 = 0x7FFFFFFFFFFFFFF7;
LABEL_209:
            v95 = (std::__fs::filesystem::path *)operator new(v91);
            v92 = v95;
            if (!v87 || (memmove(v95, v86, v87), v87 != 22))
              operator delete(v86);
            __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v92;
            __dst.__pn_.__r_.__value_.__r.__words[2] = v91 | 0x8000000000000000;
            goto LABEL_213;
          }
        }
        else
        {
          if (HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) != 22)
          {
            v87 = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
            *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = (*((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) + 1) & 0x7F;
            v92 = &__dst;
LABEL_214:
            *(_WORD *)((char *)&v92->__pn_.__r_.__value_.__l.__data_ + v87) = 47;
LABEL_215:
            v96 = v197;
            if (v197[23] < 0)
              v96 = *(_BYTE **)v197;
            __srca = v96;
            if (v197[23] >= 0)
              v97 = v197[23];
            else
              v97 = *(_QWORD *)&v197[8];
            if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v98 = 22;
            else
              v98 = (__dst.__pn_.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v99 = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
            else
              v99 = __dst.__pn_.__r_.__value_.__l.__size_;
            if (v98 - v99 >= v97)
            {
              if (v97)
              {
                if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v104 = &__dst;
                else
                  v104 = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
                memmove((char *)v104 + v99, v96, v97);
                v105 = v99 + v97;
                if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
                {
                  __dst.__pn_.__r_.__value_.__l.__size_ = v99 + v97;
                  v104->__pn_.__r_.__value_.__s.__data_[v105] = 0;
                  if ((v197[23] & 0x80000000) == 0)
                  {
LABEL_252:
                    v85 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 72);
                    v197[0] = 0;
                    if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
                    {
                      sub_223197FA4(&v197[8], __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
LABEL_255:
                      v110 = operator new();
                      *(_QWORD *)(v110 + 8) = 0;
                      v111 = (unint64_t *)(v110 + 8);
                      *(_QWORD *)(v110 + 24) = 850045863;
                      *(_QWORD *)(v110 + 16) = 0;
                      *(_OWORD *)(v110 + 32) = 0u;
                      *(_OWORD *)(v110 + 48) = 0u;
                      *(_OWORD *)(v110 + 64) = 0u;
                      *(_QWORD *)(v110 + 80) = 0;
                      *(_QWORD *)(v110 + 88) = 1018212795;
                      *(_OWORD *)(v110 + 96) = 0u;
                      *(_OWORD *)(v110 + 112) = 0u;
                      *(_OWORD *)(v110 + 124) = 0u;
                      *(_QWORD *)v110 = &off_24EC559F0;
                      v201[0] = v110;
                      v198 = (std::__assoc_sub_state *)v110;
                      std::mutex::lock((std::mutex *)(v110 + 24));
                      v112 = *(_DWORD *)(v110 + 136);
                      if ((v112 & 2) != 0)
                        sub_2233236D4(1u);
                      do
                        v113 = __ldxr(v111);
                      while (__stxr(v113 + 1, v111));
                      *(_DWORD *)(v110 + 136) = v112 | 2;
                      std::mutex::unlock((std::mutex *)(v110 + 24));
                      v114 = *(std::__shared_weak_count **)(v85 + 616);
                      if (!v114
                        || (v115 = std::__shared_weak_count::lock(v114)) == 0
                        || (v116 = *(_QWORD *)(v85 + 608)) == 0)
                      {
                        std::runtime_error::runtime_error(&v203, "ChannelInputWithPromise: Invalid operation. Processor is released.");
                        v203.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
                        v188 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        v189 = std::runtime_error::runtime_error(v188, &v203);
                        v189->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
                        __cxa_throw(v189, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
                      }
                      v203.__vftable = (std::runtime_error_vtbl *)v201[0];
                      v201[0] = 0;
                      (*(void (**)(uint64_t, _BYTE *, std::runtime_error *))(*(_QWORD *)v116 + 56))(v116, v197, &v203);
                      sub_2234B3E44((uint64_t *)&v203);
                      v117 = (unint64_t *)&v115->__shared_owners_;
                      do
                        v118 = __ldaxr(v117);
                      while (__stlxr(v118 - 1, v117));
                      if (!v118)
                      {
                        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                        std::__shared_weak_count::__release_weak(v115);
                      }
                      sub_2234B3E44(v201);
                      if ((v197[31] & 0x80000000) != 0)
                        operator delete(*(void **)&v197[8]);
                      sub_22360D6E8((uint64_t)v197, &v198);
                      v119 = v197[16];
                      v84 = *(std::__shared_weak_count **)v197;
                      if (!v197[16])
                      {
                        v120 = *(std::__shared_weak_count **)&v197[8];
                        if (*(_QWORD *)&v197[8])
                        {
                          v121 = (unint64_t *)(*(_QWORD *)&v197[8] + 8);
                          do
                            v122 = __ldxr(v121);
                          while (__stxr(v122 + 1, v121));
                        }
                        if (v84)
                          CFRetain(v84);
                        v123 = (std::__shared_weak_count *)operator new();
                        v124 = v123;
                        v123->__shared_owners_ = 0;
                        v125 = (unint64_t *)&v123->__shared_owners_;
                        v123->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2B2C0;
                        v123->__shared_weak_owners_ = 0;
                        v123[1].__vftable = (std::__shared_weak_count_vtbl *)v84;
                        do
                          v126 = __ldxr(v125);
                        while (__stxr(v126 + 1, v125));
                        do
                          v127 = __ldaxr(v125);
                        while (__stlxr(v127 - 1, v125));
                        if (!v127)
                        {
                          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                          std::__shared_weak_count::__release_weak(v124);
                        }
                        if (v120)
                        {
                          v128 = (unint64_t *)&v120->__shared_owners_;
                          do
                            v129 = __ldaxr(v128);
                          while (__stlxr(v129 - 1, v128));
                          if (!v129)
                          {
                            ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                            std::__shared_weak_count::__release_weak(v120);
                          }
                        }
                        v194 = (std::__assoc_sub_state *)v84;
                        v195 = v124;
                        v196 = 0;
                        if (v197[16])
                        {
                          v130 = *(_QWORD *)v197;
                          if (*(_QWORD *)v197)
                          {
                            v131 = (unint64_t *)(*(_QWORD *)v197 + 8);
                            do
                              v132 = __ldaxr(v131);
                            while (__stlxr(v132 - 1, v131));
                            if (!v132)
                              (*(void (**)(uint64_t))(*(_QWORD *)v130 + 16))(v130);
                          }
LABEL_293:
                          v84 = 0;
                          goto LABEL_294;
                        }
                        v84 = *(std::__shared_weak_count **)&v197[8];
                        if (*(_QWORD *)&v197[8])
                        {
                          v133 = (unint64_t *)(*(_QWORD *)&v197[8] + 8);
                          do
                            v134 = __ldaxr(v133);
                          while (__stlxr(v134 - 1, v133));
                          if (!v134)
                          {
                            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                            std::__shared_weak_count::__release_weak(v84);
                          }
                          goto LABEL_293;
                        }
                      }
LABEL_294:
                      v135 = v198;
                      if (!v198)
                        goto LABEL_298;
                      v136 = &v198->__shared_owners_;
                      do
                        v137 = __ldaxr((unint64_t *)v136);
                      while (__stlxr(v137 - 1, (unint64_t *)v136));
                      if (!v137)
                      {
                        ((void (*)(std::__assoc_sub_state *))v135->__on_zero_shared)(v135);
                        if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
LABEL_299:
                          if (v119)
                            goto LABEL_300;
LABEL_425:
                          if (v84)
                          {
                            v182 = (unint64_t *)&v84->__shared_owners_;
                            do
                              v183 = __ldaxr(v182);
                            while (__stlxr(v183 - 1, v182));
                            if (!v183)
                              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                          }
                          goto LABEL_430;
                        }
                      }
                      else
                      {
LABEL_298:
                        if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          goto LABEL_299;
                      }
                      operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
                      if (v119)
                        goto LABEL_300;
                      goto LABEL_425;
                    }
LABEL_253:
                    *(std::__fs::filesystem::path *)&v197[8] = __dst;
                    goto LABEL_255;
                  }
                }
                else
                {
                  *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = v105 & 0x7F;
                  v104->__pn_.__r_.__value_.__s.__data_[v105] = 0;
                  if ((v197[23] & 0x80000000) == 0)
                    goto LABEL_252;
                }
LABEL_251:
                operator delete(*(void **)v197);
                goto LABEL_252;
              }
LABEL_250:
              if ((v197[23] & 0x80000000) == 0)
                goto LABEL_252;
              goto LABEL_251;
            }
            v100 = 0x7FFFFFFFFFFFFFF7;
            v101 = v99 + v97;
            if (0x7FFFFFFFFFFFFFF6 - v98 >= v99 + v97 - v98)
            {
              v102 = &__dst;
              if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v102 = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
              __p = v102;
              if (v98 < 0x3FFFFFFFFFFFFFF3)
              {
                v103 = 2 * v98;
                if (v101 > 2 * v98)
                  v103 = v99 + v97;
                if (v103 >= 0x17)
                {
                  v106 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
                  v107 = v103 | 7;
                  if (v107 == 23)
                    v107 = v106;
                  v100 = v107 + 1;
                }
                else
                {
                  v100 = 23;
                }
              }
              v108 = operator new(v100);
              v109 = (std::string::size_type)v108;
              if (v99)
                memmove(v108, __p, v99);
              memcpy((void *)(v109 + v99), __srca, v97);
              if (v98 != 22)
                operator delete(__p);
              __dst.__pn_.__r_.__value_.__l.__size_ = v99 + v97;
              __dst.__pn_.__r_.__value_.__r.__words[2] = v100 | 0x8000000000000000;
              __dst.__pn_.__r_.__value_.__r.__words[0] = v109;
              *(_BYTE *)(v109 + v101) = 0;
              goto LABEL_250;
            }
LABEL_462:
            sub_22316DBC0();
          }
          v86 = &__dst;
          v87 = 22;
        }
        if (v87 + 1 > 2 * v87)
          v90 = v87 + 1;
        else
          v90 = 2 * v87;
        if (v90 >= 0x17)
        {
          v93 = (v90 & 0x7FFFFFFFFFFFFFF8) + 8;
          v94 = v90 | 7;
          if (v94 == 23)
            v94 = v93;
          v91 = v94 + 1;
        }
        else
        {
          v91 = 23;
        }
        goto LABEL_209;
      }
    }
  }
  __dst.__pn_.__r_.__value_.__s.__data_[0] = 1;
  sub_22360D9DC((uint64_t *)v197, &__dst);
  v84 = *(std::__shared_weak_count **)v197;
LABEL_300:
  if (!v84)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 1001, (uint64_t)"planes_result_future.valid()", 28, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C);
    v138 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v138 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670 || byte_255795678)
    {
      v139 = qword_255795648;
      for (j = qword_255795650; v139 != j; v139 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v139)(*(_QWORD *)(v139 + 8), "planes_result_future.valid()", 28, &unk_22458ACF7, 0);
    }
    v141 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v141 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "planes_result_future.valid()", 28, &unk_22458ACF7, 0);
  }
  v142 = operator new();
  *(_QWORD *)(v142 + 8) = 0;
  v143 = (unint64_t *)(v142 + 8);
  *(_QWORD *)(v142 + 24) = 850045863;
  *(_QWORD *)(v142 + 16) = 0;
  *(_OWORD *)(v142 + 32) = 0u;
  *(_OWORD *)(v142 + 48) = 0u;
  *(_OWORD *)(v142 + 64) = 0u;
  *(_QWORD *)(v142 + 80) = 0;
  *(_QWORD *)(v142 + 88) = 1018212795;
  *(_OWORD *)(v142 + 96) = 0u;
  *(_OWORD *)(v142 + 112) = 0u;
  *(_QWORD *)(v142 + 128) = 0;
  *(_QWORD *)v142 = &off_24EC55A38;
  *(_QWORD *)(v142 + 144) = v24;
  *(_QWORD *)(v142 + 152) = v84;
  *(_DWORD *)(v142 + 136) = 8;
  std::mutex::lock((std::mutex *)(v142 + 24));
  v144 = *(_DWORD *)(v142 + 136);
  if ((v144 & 2) != 0)
    sub_2233236D4(1u);
  do
    v145 = __ldxr(v143);
  while (__stxr(v145 + 1, v143));
  *(_DWORD *)(v142 + 136) = v144 | 2;
  std::mutex::unlock((std::mutex *)(v142 + 24));
  do
    v146 = __ldaxr(v143);
  while (__stlxr(v146 - 1, v143));
  if (!v146)
    (*(void (**)(uint64_t))(*(_QWORD *)v142 + 16))(v142);
  v194 = (std::__assoc_sub_state *)v142;
  v196 = 1;
LABEL_316:
  if (SHIBYTE(v200.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v200.__pn_.__r_.__value_.__l.__data_);
  if (!v205)
    sub_223198474();
  (*(void (**)(std::string *))(v205->__r_.__value_.__r.__words[0] + 48))(v205);
  v147 = v205;
  if (v205 == &v204)
  {
    v148 = 4;
    v147 = &v204;
  }
  else
  {
    if (!v205)
      goto LABEL_324;
    v148 = 5;
  }
  (*(void (**)(void))(v147->__r_.__value_.__r.__words[0] + 8 * v148))();
LABEL_324:
  if (!v196)
  {
    *((_BYTE *)sub_2232E56F4((_QWORD *)a3, (uint64_t)&v194) + 16) = 1;
    if (!v196)
      goto LABEL_339;
    goto LABEL_415;
  }
  v150 = *(_QWORD *)(a2 + 48);
  v149 = *(std::__shared_weak_count **)(a2 + 56);
  if (!v149)
    goto LABEL_330;
  v151 = (unint64_t *)&v149->__shared_owners_;
  do
    v152 = __ldxr(v151);
  while (__stxr(v152 + 1, v151));
  do
    v153 = __ldaxr(v151);
  while (__stlxr(v153 - 1, v151));
  if (!v153)
  {
    ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
    std::__shared_weak_count::__release_weak(v149);
    if (!v150)
      goto LABEL_355;
  }
  else
  {
LABEL_330:
    if (!v150)
      goto LABEL_355;
  }
  memset(&v204, 0, sizeof(v204));
  v154 = *(unsigned __int8 *)(a2 + 31);
  if ((v154 & 0x80u) == 0)
    v155 = (std::string *)(a2 + 8);
  else
    v155 = *(std::string **)(a2 + 8);
  if ((v154 & 0x80u) != 0)
    v154 = *(_QWORD *)(a2 + 16);
  sub_2231816F0(&v204, v155, (std::string *)((char *)v155 + v154));
  memset(v197, 0, 24);
  sub_2231816F0((std::string *)v197, (std::string *)"user_data.plist", (std::string *)"");
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v200, v204.__r_.__value_.__l.__data_, v204.__r_.__value_.__l.__size_);
  else
    v200.__pn_ = v204;
  sub_22319C30C((uint64_t)&v200, (std::__fs::filesystem::path *)v197);
  if ((v197[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v204.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_349;
LABEL_352:
    operator delete(v204.__r_.__value_.__l.__data_);
    v160 = atomic_load((unsigned __int8 *)&qword_255795348);
    if ((v160 & 1) != 0)
      goto LABEL_353;
    goto LABEL_443;
  }
  operator delete(*(void **)v197);
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_352;
LABEL_349:
  v159 = atomic_load((unsigned __int8 *)&qword_255795348);
  if ((v159 & 1) != 0)
    goto LABEL_353;
LABEL_443:
  if (__cxa_guard_acquire(&qword_255795348))
  {
    __cxa_atexit((void (*)(void *))nullsub_599, &off_2540CA630, &dword_22314D000);
    __cxa_guard_release(&qword_255795348);
  }
LABEL_353:
  sub_22322956C((uint64_t *)(a2 + 48), (uint64_t)&v200, &off_2540CA630, (uint64_t)&v204);
  if (!v214)
  {
    *(_DWORD *)&v197[24] = 0;
    sub_223627410(v197, "Error saving user plist: ");
    sub_2232EDA70((uint64_t)&v203, (std::string::size_type)v197, (uint64_t)&v204);
    v169 = a3;
    if (*(_DWORD *)&v197[24] == -1)
      sub_22316DD70();
    v203.__vftable = (std::runtime_error_vtbl *)v201;
    ((void (*)(std::__fs::filesystem::path *__return_ptr, std::runtime_error *, _BYTE *))off_24EC54FB8[*(unsigned int *)&v197[24]])(&__dst, &v203, v197);
    if (*(_DWORD *)&v197[24] != -1)
      ((void (*)(std::runtime_error *, _BYTE *))off_24EC54F88[*(unsigned int *)&v197[24]])(&v203, v197);
LABEL_394:
    v177 = (const char *)std::generic_category();
    v203.__vftable = (std::runtime_error_vtbl *)89;
    v203.__imp_.__imp_ = v177;
    sub_2245321DC((const std::error_condition *)&v203, (uint64_t)&__dst, (CFErrorRef *)&v202);
    *(_OWORD *)v169 = v202;
    v202 = 0uLL;
    *(_BYTE *)(v169 + 16) = 1;
    if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
      if (!v214)
        goto LABEL_398;
    }
    else if (!v214)
    {
LABEL_398:
      if (v213)
      {
        if (v212)
        {
          if (v211 < 0)
            operator delete(v210);
          if (v209 < 0)
            operator delete(v208);
        }
        if (v207 && v206 < 0)
          operator delete((void *)v204.__r_.__value_.__r.__words[2]);
      }
    }
    if ((SHIBYTE(v200.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_414;
    operator delete(v200.__pn_.__r_.__value_.__l.__data_);
    if (v196)
      goto LABEL_415;
    goto LABEL_339;
  }
  if (SHIBYTE(v200.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v200.__pn_.__r_.__value_.__l.__data_);
    v163 = *(_QWORD *)(a2 + 32);
    v162 = *(std::__shared_weak_count **)(a2 + 40);
    v161 = (uint64_t *)(a2 + 32);
    if (!v162)
      goto LABEL_360;
    goto LABEL_356;
  }
LABEL_355:
  v163 = *(_QWORD *)(a2 + 32);
  v162 = *(std::__shared_weak_count **)(a2 + 40);
  v161 = (uint64_t *)(a2 + 32);
  if (!v162)
    goto LABEL_360;
LABEL_356:
  v164 = (unint64_t *)&v162->__shared_owners_;
  do
    v165 = __ldxr(v164);
  while (__stxr(v165 + 1, v164));
  do
    v166 = __ldaxr(v164);
  while (__stlxr(v166 - 1, v164));
  if (!v166)
  {
    ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
    std::__shared_weak_count::__release_weak(v162);
    if (!v163)
      goto LABEL_384;
    goto LABEL_361;
  }
LABEL_360:
  if (!v163)
    goto LABEL_384;
LABEL_361:
  memset(&v204, 0, sizeof(v204));
  v167 = *(unsigned __int8 *)(a2 + 31);
  if ((v167 & 0x80u) == 0)
    v168 = (std::string *)(a2 + 8);
  else
    v168 = *(std::string **)(a2 + 8);
  if ((v167 & 0x80u) != 0)
    v167 = *(_QWORD *)(a2 + 16);
  sub_2231816F0(&v204, v168, (std::string *)((char *)v168 + v167));
  memset(v197, 0, 24);
  sub_2231816F0((std::string *)v197, (std::string *)"system_data.plist", (std::string *)"");
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v200, v204.__r_.__value_.__l.__data_, v204.__r_.__value_.__l.__size_);
  else
    v200.__pn_ = v204;
  sub_22319C30C((uint64_t)&v200, (std::__fs::filesystem::path *)v197);
  if ((v197[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v204.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_377;
LABEL_380:
    operator delete(v204.__r_.__value_.__l.__data_);
    v171 = atomic_load((unsigned __int8 *)&qword_255795348);
    if ((v171 & 1) != 0)
      goto LABEL_381;
    goto LABEL_450;
  }
  operator delete(*(void **)v197);
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_380;
LABEL_377:
  v170 = atomic_load((unsigned __int8 *)&qword_255795348);
  if ((v170 & 1) != 0)
    goto LABEL_381;
LABEL_450:
  if (__cxa_guard_acquire(&qword_255795348))
  {
    __cxa_atexit((void (*)(void *))nullsub_599, &off_2540CA630, &dword_22314D000);
    __cxa_guard_release(&qword_255795348);
  }
LABEL_381:
  sub_22322956C(v161, (uint64_t)&v200, &off_2540CA630, (uint64_t)&v204);
  if (!v214)
  {
    *(_DWORD *)&v197[24] = 0;
    sub_223627500(v197, "Error saving system plist: ");
    sub_2232EDA70((uint64_t)&v203, (std::string::size_type)v197, (uint64_t)&v204);
    v169 = a3;
    if (*(_DWORD *)&v197[24] == -1)
      sub_22316DD70();
    v203.__vftable = (std::runtime_error_vtbl *)v201;
    ((void (*)(std::__fs::filesystem::path *__return_ptr, std::runtime_error *, _BYTE *))off_24EC54FB8[*(unsigned int *)&v197[24]])(&__dst, &v203, v197);
    if (*(_DWORD *)&v197[24] != -1)
      ((void (*)(std::runtime_error *, _BYTE *))off_24EC54F88[*(unsigned int *)&v197[24]])(&v203, v197);
    goto LABEL_394;
  }
  if (SHIBYTE(v200.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v200.__pn_.__r_.__value_.__l.__data_);
LABEL_384:
  v172 = v194;
  v194 = 0;
  sub_223622D08(v172);
  v174 = v173;
  if (!v172)
    goto LABEL_388;
  v175 = (unint64_t *)&v172->__shared_owners_;
  do
    v176 = __ldaxr(v175);
  while (__stlxr(v176 - 1, v175));
  if (v176)
  {
LABEL_388:
    if ((v173 & 1) != 0)
      goto LABEL_389;
    goto LABEL_413;
  }
  ((void (*)(std::__assoc_sub_state *))v172->__on_zero_shared)(v172);
  if ((v174 & 1) == 0)
  {
LABEL_413:
    v204.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    *(_OWORD *)&v204.__r_.__value_.__r.__words[1] = xmmword_2245C65C0;
    strcpy(v204.__r_.__value_.__l.__data_, "Unknown error while saving snapshot");
    v178 = std::generic_category();
    v200.__pn_.__r_.__value_.__r.__words[0] = 89;
    v200.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v178;
    sub_2245321DC((const std::error_condition *)&v200, (uint64_t)&v204, (CFErrorRef *)&__dst);
    *(_OWORD *)a3 = *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_;
    *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_ = 0uLL;
    *(_BYTE *)(a3 + 16) = 1;
    if ((SHIBYTE(v204.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_414:
      if (!v196)
        goto LABEL_339;
      goto LABEL_415;
    }
    operator delete(v204.__r_.__value_.__l.__data_);
    if (v196)
      goto LABEL_415;
LABEL_339:
    v156 = v195;
    if (v195)
    {
      v157 = (unint64_t *)&v195->__shared_owners_;
      do
        v158 = __ldaxr(v157);
      while (__stlxr(v158 - 1, v157));
      if (!v158)
      {
        ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
        std::__shared_weak_count::__release_weak(v156);
      }
    }
    return;
  }
LABEL_389:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  if (!v196)
    goto LABEL_339;
LABEL_415:
  v179 = v194;
  if (v194)
  {
    v180 = (unint64_t *)&v194->__shared_owners_;
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
      ((void (*)(std::__assoc_sub_state *))v179->__on_zero_shared)(v179);
  }
}

void sub_223609CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, char a14, unint64_t *a15, std::__shared_weak_count *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,unint64_t *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::exception_ptr a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,std::exception_ptr a41,uint64_t a42,std::runtime_error a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t *a51)
{
  unint64_t *v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;

  if (v52)
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v55 = __ldaxr(p_shared_owners);
    while (__stlxr(v55 - 1, p_shared_owners));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if ((_BYTE)a17)
  {
    if (a15)
    {
      v58 = a15 + 1;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
        (*(void (**)(unint64_t *))(*a15 + 16))(a15);
    }
  }
  else if (a16)
  {
    v56 = (unint64_t *)&a16->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  if (a22)
  {
    v60 = a22 + 1;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
      (*(void (**)(unint64_t *))(*a22 + 16))(a22);
  }
  if (a28 < 0)
    operator delete(__p);
  if (v51)
  {
    v62 = v51 + 1;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
      (*(void (**)(unint64_t *))(*v51 + 16))(v51);
  }
  if (a37 < 0)
    operator delete(a32);
  if (!a51)
    sub_223198474();
  (*(void (**)(uint64_t *))(*a51 + 48))(a51);
  if (a51 == &a45)
  {
    (*(void (**)(void))(a45 + 32))();
    _Unwind_Resume(a1);
  }
  if (a51)
  {
    (*(void (**)(void))(*a51 + 40))();
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22360A904(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  int v4;
  size_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[24];
  int v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v18 = 0;
  v3 = operator new();
  *(_QWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  sub_223195210(v3);
  v21[0] = v3;
  sub_224532A28((_QWORD *)(v3 + 16), *a2);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10) != 0)
  {
    v7 = *(_QWORD *)(v3 + 112);
    v8 = *(_QWORD *)(v3 + 72);
    if (v7 < v8)
    {
      *(_QWORD *)(v3 + 112) = v8;
      v7 = v8;
    }
    v9 = *(const void **)(v3 + 64);
    v5 = v7 - (_QWORD)v9;
    if (v7 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_26;
  }
  else
  {
    if ((v4 & 8) == 0)
    {
      v5 = 0;
      HIBYTE(v20) = 0;
      v6 = __dst;
      goto LABEL_14;
    }
    v9 = *(const void **)(v3 + 40);
    v5 = *(_QWORD *)(v3 + 56) - (_QWORD)v9;
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
LABEL_26:
      sub_22316DBC0();
  }
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    v6 = (void **)operator new(v10 + 1);
    __dst[1] = (void *)v5;
    v20 = v11 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_13;
  }
  HIBYTE(v20) = v5;
  v6 = __dst;
  if (v5)
LABEL_13:
    memmove(v6, v9, v5);
LABEL_14:
  *((_BYTE *)v6 + v5) = 0;
  v12 = v21[0];
  if (v21[0])
  {
    v13 = MEMORY[0x24BEDB7F0];
    v14 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v15 = *(_QWORD *)(v13 + 72);
    *(_QWORD *)(v12 + *(_QWORD *)(v14 - 24)) = *(_QWORD *)(v13 + 64);
    *(_QWORD *)(v12 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v12 + 16) = v15;
    if (*(char *)(v12 + 111) < 0)
      operator delete(*(void **)(v12 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v12 + 128);
    MEMORY[0x227684CE8](v12, 0x10B2C40EED050F3);
  }
  v21[0] = v17;
  v21[1] = __dst;
  v21[2] = v17;
  v21[3] = __dst;
  v21[4] = __dst;
  if (v18 == -1)
    sub_22316DD70();
  v22 = v21;
  ((void (*)(_QWORD **, _BYTE *))off_24EC55400[v18])(&v22, v17);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
  if (v18 == -1)
    sub_22316DD70();
  v21[0] = __dst;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC54FB8[v18])(v21, v17);
  if (v18 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC54F88[v18])(v21, v17);
  return result;
}

void sub_22360ABA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227684CE8](v2, 0x10B2C40EED050F3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22360ABD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22360ABE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_22319B964((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_22319B964((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_22360AC28(std::__assoc_sub_state **a1)
{
  std::__assoc_sub_state *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 499, (uint64_t)"future.valid()", 14, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = *a1;
  }
  *a1 = 0;
  sub_223622D08(v2);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
      ((void (*)(std::__assoc_sub_state *))v2->__on_zero_shared)(v2);
  }
}

uint64_t sub_22360ACD8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unint64_t *v12;
  unint64_t *v14;
  unint64_t v15;

  if (v12)
  {
    v14 = v12 + 1;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
      (*(void (**)(unint64_t *))(*v12 + 16))(v12);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

uint64_t sub_22360AD28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__assoc_sub_state *v5;
  uint64_t *p_shared_owners;
  unint64_t v7;
  void *__p[2];
  uint64_t v10;
  std::__assoc_sub_state *v11;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_223197FA4(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v10 = *(_QWORD *)(a2 + 16);
  }
  sub_2236248FC((uint64_t *)(v2 + 944), (uint64_t)__p, (uint64_t *)&v11);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  sub_22360AC28(&v11);
  v4 = v3;
  v5 = v11;
  if (!v11)
    return v4;
  p_shared_owners = &v11->__shared_owners_;
  do
    v7 = __ldaxr((unint64_t *)p_shared_owners);
  while (__stlxr(v7 - 1, (unint64_t *)p_shared_owners));
  if (v7)
    return v4;
  ((void (*)(std::__assoc_sub_state *))v5->__on_zero_shared)(v5);
  return v4;
}

void sub_22360ADEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, unint64_t *a15)
{
  unint64_t *v16;
  unint64_t v17;

  if (a15)
  {
    v16 = a15 + 1;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      (*(void (**)(unint64_t *))(*a15 + 16))(a15);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void **sub_22360AE40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[8];
  uint64_t v20;
  void *v21;

  sub_223227930((uint64_t *)&v21);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 72);
  v19[0] = 0;
  v19[4] = 0;
  sub_223624BD0((uint64_t *)(v4 + 1952), (uint64_t)v19, &v20);
  sub_22360AF3C(&v20, a2);
  v10 = v20;
  if (!v20)
    return sub_22322797C(&v21, v5, v6, v7, v8, v9);
  v11 = (unint64_t *)(v20 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12)
    return sub_22322797C(&v21, v5, v6, v7, v8, v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  return sub_22322797C(&v21, v14, v15, v16, v17, v18);
}

void sub_22360AEE8(_Unwind_Exception *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t *a9, ...)
{
  unint64_t *v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va;

  va_start(va, a9);
  if (a9)
  {
    v10 = a9 + 1;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      (*(void (**)(unint64_t *))(*a9 + 16))(a9);
      sub_22322797C((void **)va, v12, v13, v14, v15, v16);
      _Unwind_Resume(a1);
    }
  }
  sub_22322797C((void **)va, a2, a3, a4, a5, a6);
  _Unwind_Resume(a1);
}

void sub_22360AF3C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v4 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 499, (uint64_t)"future.valid()", 14, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *a1;
  }
  *a1 = 0;
  sub_223624FF8(v4, a2);
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
}

void sub_22360AFF0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  unint64_t *v15;
  unint64_t *v17;
  unint64_t v18;

  if (v15)
  {
    v17 = v15 + 1;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
      (*(void (**)(unint64_t *))(*v15 + 16))(v15);
  }
  __cxa_begin_catch(a1);
  v14[1] = 0;
  v14[2] = 0;
  *v14 = 0;
  __cxa_end_catch();
}

uint64_t sub_22360B040(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__assoc_sub_state *v11;
  uint64_t *p_shared_owners;
  unint64_t v13;
  std::__assoc_sub_state *v15;
  void *v16;

  sub_223227930((uint64_t *)&v16);
  sub_2236250CC((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 72) + 944), a2, (uint64_t *)&v15);
  sub_22360AC28(&v15);
  v10 = v9;
  v11 = v15;
  if (v15)
  {
    p_shared_owners = &v15->__shared_owners_;
    do
      v13 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v13 - 1, (unint64_t *)p_shared_owners));
    if (!v13)
      ((void (*)(std::__assoc_sub_state *))v11->__on_zero_shared)(v11);
  }
  sub_22322797C(&v16, v4, v5, v6, v7, v8);
  return v10;
}

void sub_22360B0CC(_Unwind_Exception *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7, ...)
{
  unint64_t *v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a7);
  if (a7)
  {
    v8 = a7 + 1;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      (*(void (**)(unint64_t *))(*a7 + 16))(a7);
      sub_22322797C((void **)va, v10, v11, v12, v13, v14);
      _Unwind_Resume(a1);
    }
  }
  sub_22322797C((void **)va, a2, a3, a4, a5, a6);
  _Unwind_Resume(a1);
}

void **sub_22360B120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::runtime_error_vtbl *v7;
  unint64_t *v8;
  int what;
  unint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::runtime_error *exception;
  std::runtime_error *v27;
  std::runtime_error_vtbl *v28;
  void *v29;
  std::runtime_error v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::runtime_error_vtbl *v33;

  sub_223227930((uint64_t *)&v29);
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 72);
  v7 = (std::runtime_error_vtbl *)operator new();
  v7->~runtime_error_0 = 0;
  v8 = (unint64_t *)&v7->~runtime_error_0;
  v7[1].~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))850045863;
  v7->what = 0;
  *(_OWORD *)&v7[1].~runtime_error_0 = 0u;
  *(_OWORD *)&v7[2].~runtime_error = 0u;
  *(_OWORD *)&v7[2].what = 0u;
  v7[3].~runtime_error_0 = 0;
  v7[3].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))1018212795;
  *(_OWORD *)&v7[4].~runtime_error = 0u;
  *(_OWORD *)&v7[4].what = 0u;
  *(_OWORD *)((char *)&v7[5].~runtime_error + 4) = 0u;
  v7->~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))&off_24EC55808;
  v33 = v7;
  v28 = v7;
  std::mutex::lock((std::mutex *)&v7[1]);
  what = (int)v7[5].what;
  if ((what & 2) != 0)
    sub_2233236D4(1u);
  do
    v10 = __ldxr(v8);
  while (__stxr(v10 + 1, v8));
  LODWORD(v7[5].what) = what | 2;
  std::mutex::unlock((std::mutex *)&v7[1]);
  v31 = 0;
  v32 = 0;
  v11 = *(std::__shared_weak_count **)(v6 + 2296);
  if (!v11
    || (v12 = std::__shared_weak_count::lock(v11), (v32 = v12) == 0)
    || (v13 = v12, v14 = *(_QWORD *)(v6 + 2288), (v31 = v14) == 0))
  {
    std::runtime_error::runtime_error(&v30, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v30.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v27 = std::runtime_error::runtime_error(exception, &v30);
    v27->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v27, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v30.__vftable = v33;
  v33 = 0;
  (*(void (**)(uint64_t, uint64_t, std::runtime_error *))(*(_QWORD *)v14 + 56))(v14, a3, &v30);
  sub_2234C7158((uint64_t *)&v30);
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  sub_2234C7158((uint64_t *)&v33);
  sub_22360AF3C((uint64_t *)&v28, a1);
  v22 = (uint64_t)v28;
  if (v28)
  {
    v23 = (unint64_t *)&v28->~runtime_error_0;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  }
  return sub_22322797C(&v29, v17, v18, v19, v20, v21);
}

void sub_22360B324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  unint64_t *v3;
  unint64_t *v5;
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;
  uint64_t v20;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v12 = va_arg(va1, void *);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v18 = va_arg(va3, _QWORD);
  v20 = va_arg(va3, _QWORD);
  sub_2234C7158((uint64_t *)va1);
  sub_223167354((uint64_t)va2);
  v5 = v3 + 1;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
  if (!v6)
    (*(void (**)(unint64_t *))(*v3 + 16))(v3);
  sub_2234C7158((uint64_t *)va3);
  sub_22322797C((void **)va, v7, v8, v9, v10, v11);
  _Unwind_Resume(a1);
}

void sub_22360B334(_Unwind_Exception *a1, uint64_t a2, unint64_t *a3, ...)
{
  unint64_t *v4;
  unint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a3);
  if (a3)
  {
    v4 = a3 + 1;
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      (*(void (**)(unint64_t *))(*a3 + 16))(a3);
      sub_22322797C((void **)va, v6, v7, v8, v9, v10);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x22360B478);
}

void sub_22360B374()
{
  std::mutex *v0;

  std::mutex::unlock(v0);
  JUMPOUT(0x22360B470);
}

void sub_22360B384()
{
  JUMPOUT(0x22360B470);
}

void sub_22360B38C(_Unwind_Exception *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_22322797C((void **)va, a2, a3, a4, a5, a6);
  _Unwind_Resume(a1);
}

void sub_22360B3A0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::runtime_error a12, std::exception_ptr a13, uint64_t a14, uint64_t a15, std::__assoc_sub_state *a16)
{
  uint64_t v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = a16;
  if (a16)
  {
    std::exception_ptr::exception_ptr((std::exception_ptr *)(v16 - 56), &a13);
    v18.__ptr_ = (void *)(v16 - 56);
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)(v16 - 56));
    std::exception_ptr::~exception_ptr(&a13);
    std::runtime_error::~runtime_error(&a12);
    if (!a15)
      JUMPOUT(0x22360B270);
    JUMPOUT(0x22360B240);
  }
  sub_2233236D4(3u);
}

void sub_22360B400(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::runtime_error a12, std::exception_ptr a13, char a14)
{
  std::exception_ptr::~exception_ptr(&a13);
  std::runtime_error::~runtime_error(&a12);
  sub_223167354((uint64_t)&a14);
  if (!a10)
    JUMPOUT(0x22360B470);
  JUMPOUT(0x22360B448);
}

void sub_22360B488(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  void **v5;
  std::__shared_weak_count_vtbl *v6;
  uint64_t shared_owners;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  int v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  int v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  std::runtime_error_vtbl *v48;
  unint64_t *v49;
  unint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::unique_lock<std::mutex>::mutex_type *v59;
  std::unique_lock<std::mutex>::mutex_type *m;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  char *v64;
  char *v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  char *v70;
  char *v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *imp;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  uint64_t v84;
  std::__assoc_sub_state *v85;
  unint64_t *v86;
  std::mutex *p_mut;
  unsigned int state;
  unint64_t v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  std::unique_lock<std::mutex>::mutex_type *v93;
  unint64_t *v94;
  unint64_t v95;
  void *ptr;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::unique_lock<std::mutex>::mutex_type *v101;
  std::unique_lock<std::mutex>::mutex_type *v102;
  std::unique_lock<std::mutex>::mutex_type *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::runtime_error *exception;
  std::runtime_error *v114;
  std::runtime_error *v115;
  std::runtime_error *v116;
  std::runtime_error *v117;
  std::runtime_error *v118;
  std::exception_ptr v119;
  __int128 v120;
  uint64_t v121;
  std::unique_lock<std::mutex> __p;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  char v129;
  _QWORD *v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  char *v133;
  std::runtime_error v134;
  std::exception_ptr v135;
  std::exception_ptr v136;
  std::exception_ptr v137;
  std::unique_lock<std::mutex> __lk;
  uint64_t v139;
  char v140;
  char v141;
  char v142;
  std::runtime_error v143;
  char v144;
  unsigned __int8 v145;
  void *v146[2];
  void *v147[2];
  __int128 v148;
  __int128 v149;
  char v150;
  char v151;
  char v152;
  uint64_t v153;

  v153 = *MEMORY[0x24BDAC8D0];
  if ((!a1[5] || !a1[2])
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 762, (uint64_t)"HasKeyframingCapability() && HasMeshingCapability()", 51, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v4 = (std::__shared_weak_count *)operator new(0xA08uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC4A2D8;
  bzero(&v4[1], 0x9F0uLL);
  v130 = &v4[1].__vftable;
  v131 = v4;
  v129 = 0;
  sub_22360B120((uint64_t)v146, (uint64_t)a1, (uint64_t)&v129);
  v5 = (void **)&v4[79].__vftable;
  v6 = v4[79].__vftable;
  if (v6)
  {
    shared_owners = v4[79].__shared_owners_;
    v8 = v4[79].__vftable;
    if ((std::__shared_weak_count_vtbl *)shared_owners != v6)
    {
      do
      {
        v9 = *(std::__shared_weak_count **)(shared_owners - 224);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        shared_owners -= 248;
      }
      while ((std::__shared_weak_count_vtbl *)shared_owners != v6);
      v8 = *v5;
    }
    v4[79].__shared_owners_ = (uint64_t)v6;
    operator delete(v8);
    *v5 = 0;
    v4[79].__shared_owners_ = 0;
    v4[79].__shared_weak_owners_ = 0;
  }
  *(_OWORD *)v5 = *(_OWORD *)v146;
  v4[79].__shared_weak_owners_ = (uint64_t)v147[0];
  *(_OWORD *)v146 = xmmword_224645140;
  *(_OWORD *)v147 = unk_224645150;
  v148 = xmmword_224645160;
  v149 = unk_224645170;
  sub_223227930((uint64_t *)&v135);
  v12 = *(_QWORD *)(a1[5] + 72);
  v13 = operator new();
  *(_QWORD *)(v13 + 8) = 0;
  v14 = (unint64_t *)(v13 + 8);
  *(_QWORD *)(v13 + 24) = 850045863;
  *(_QWORD *)(v13 + 16) = 0;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_QWORD *)(v13 + 80) = 0;
  *(_QWORD *)(v13 + 88) = 1018212795;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 124) = 0u;
  *(_QWORD *)v13 = &off_24EC55808;
  v137.__ptr_ = (void *)v13;
  v133 = (char *)v13;
  std::mutex::lock((std::mutex *)(v13 + 24));
  v15 = *(_DWORD *)(v13 + 136);
  if ((v15 & 2) != 0)
    sub_2233236D4(1u);
  do
    v16 = __ldxr(v14);
  while (__stxr(v16 + 1, v14));
  *(_DWORD *)(v13 + 136) = v15 | 2;
  std::mutex::unlock((std::mutex *)(v13 + 24));
  v121 = 0;
  __p.__m_ = 0;
  v17 = *(std::__shared_weak_count **)(v12 + 2128);
  if (!v17
    || (v18 = std::__shared_weak_count::lock(v17), (__p.__m_ = (std::unique_lock<std::mutex>::mutex_type *)v18) == 0)
    || (v19 = v18, v20 = *(_QWORD *)(v12 + 2120), (v121 = v20) == 0))
  {
    std::runtime_error::runtime_error(&v143, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v143.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v114 = std::runtime_error::runtime_error(exception, &v143);
    v114->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v114, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v143.__vftable = (std::runtime_error_vtbl *)v137.__ptr_;
  v137.__ptr_ = 0;
  (*(void (**)(uint64_t, void **, std::runtime_error *))(*(_QWORD *)v20 + 56))(v20, v146, &v143);
  sub_2234C7158((uint64_t *)&v143);
  v21 = (unint64_t *)&v19->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  sub_2234C7158((uint64_t *)&v137);
  sub_22360AF3C((uint64_t *)&v133, (uint64_t)&__lk);
  v28 = v133;
  if (v133)
  {
    v29 = (unint64_t *)(v133 + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
      (*(void (**)(char *))(*(_QWORD *)v28 + 16))(v28);
  }
  sub_22322797C(&v135.__ptr_, v23, v24, v25, v26, v27);
  v31 = (uint64_t)v130;
  v32 = (void **)(v130 + 315);
  v33 = v130[315];
  v34 = (uint64_t)v130;
  if (v33)
  {
    v35 = v130[316];
    v34 = (uint64_t)v130;
    v36 = (void *)v130[315];
    if (v35 != v33)
    {
      do
      {
        v37 = *(std::__shared_weak_count **)(v35 - 224);
        if (v37)
        {
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        v35 -= 248;
      }
      while (v35 != v33);
      v36 = *v32;
      v34 = (uint64_t)v130;
    }
    *(_QWORD *)(v31 + 2528) = v33;
    operator delete(v36);
    *v32 = 0;
    v32[1] = 0;
    v32[2] = 0;
  }
  *(std::unique_lock<std::mutex> *)v32 = __lk;
  *(_QWORD *)(v31 + 2536) = v139;
  v124 = 0u;
  v123 = 0u;
  __p = (std::unique_lock<std::mutex>)0;
  v125 = xmmword_224645140;
  v126 = unk_224645150;
  v127 = xmmword_224645160;
  v128 = unk_224645170;
  LOBYTE(v121) = 64;
  sub_223260C0C(v146, (uint64_t *)(v34 + 1872));
  sub_223260C0C(&v147[1], v130 + 315);
  sub_223227930((uint64_t *)&v133);
  v40 = *(_QWORD *)(a1[5] + 72);
  v41 = operator new();
  *(_QWORD *)(v41 + 8) = 0;
  v42 = (unint64_t *)(v41 + 8);
  *(_QWORD *)(v41 + 24) = 850045863;
  *(_QWORD *)(v41 + 16) = 0;
  *(_OWORD *)(v41 + 32) = 0u;
  *(_OWORD *)(v41 + 48) = 0u;
  *(_OWORD *)(v41 + 64) = 0u;
  *(_QWORD *)(v41 + 80) = 0;
  *(_QWORD *)(v41 + 88) = 1018212795;
  *(_OWORD *)(v41 + 96) = 0u;
  *(_OWORD *)(v41 + 112) = 0u;
  *(_OWORD *)(v41 + 124) = 0u;
  *(_QWORD *)v41 = &off_24EC55808;
  v136.__ptr_ = (void *)v41;
  v132 = v41;
  std::mutex::lock((std::mutex *)(v41 + 24));
  v43 = *(_DWORD *)(v41 + 136);
  if ((v43 & 2) != 0)
    sub_2233236D4(1u);
  do
    v44 = __ldxr(v42);
  while (__stxr(v44 + 1, v42));
  *(_DWORD *)(v41 + 136) = v43 | 2;
  std::mutex::unlock((std::mutex *)(v41 + 24));
  v143.__imp_.__imp_ = 0;
  v143.__vftable = 0;
  v45 = *(std::__shared_weak_count **)(v40 + 2464);
  if (!v45
    || (v46 = std::__shared_weak_count::lock(v45), (v143.__imp_.__imp_ = (const char *)v46) == 0)
    || (v47 = v46, v48 = *(std::runtime_error_vtbl **)(v40 + 2456), (v143.__vftable = v48) == 0))
  {
    std::runtime_error::runtime_error(&v134, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v134.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v115 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v116 = std::runtime_error::runtime_error(v115, &v134);
    v116->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v116, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v134.__vftable = (std::runtime_error_vtbl *)v136.__ptr_;
  v136.__ptr_ = 0;
  (*((void (**)(std::runtime_error_vtbl *, void **, std::runtime_error *))v48->~runtime_error + 7))(v48, v146, &v134);
  sub_2234C7158((uint64_t *)&v134);
  v49 = (unint64_t *)&v47->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  sub_2234C7158((uint64_t *)&v136);
  sub_22360AF3C(&v132, (uint64_t)&__lk);
  v56 = v132;
  if (v132)
  {
    v57 = (unint64_t *)(v132 + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 16))(v56);
  }
  sub_22322797C((void **)&v133, v51, v52, v53, v54, v55);
  if (__p.__m_)
  {
    v59 = *(std::unique_lock<std::mutex>::mutex_type **)&__p.__owns_;
    m = __p.__m_;
    if (*(std::unique_lock<std::mutex>::mutex_type **)&__p.__owns_ != __p.__m_)
    {
      do
      {
        v61 = *(std::__shared_weak_count **)&v59[-4].__m_.__opaque[24];
        if (v61)
        {
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v59 = (std::unique_lock<std::mutex>::mutex_type *)((char *)v59 - 248);
      }
      while (v59 != __p.__m_);
      m = __p.__m_;
    }
    *(_QWORD *)&__p.__owns_ = __p.__m_;
    operator delete(m);
  }
  __p = __lk;
  *(_QWORD *)&v123 = v139;
  v139 = 0;
  *(_QWORD *)&__lk.__owns_ = 0;
  __lk.__m_ = 0;
  v64 = (char *)v147[1];
  if (v147[1])
  {
    v65 = (char *)v148;
    v66 = v147[1];
    if ((void *)v148 != v147[1])
    {
      do
      {
        v67 = (std::__shared_weak_count *)*((_QWORD *)v65 - 28);
        if (v67)
        {
          v68 = (unint64_t *)&v67->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        v65 -= 248;
      }
      while (v65 != v64);
      v66 = v147[1];
    }
    *(_QWORD *)&v148 = v64;
    operator delete(v66);
  }
  v70 = (char *)v146[0];
  if (v146[0])
  {
    v71 = (char *)v146[1];
    v72 = v146[0];
    if (v146[1] != v146[0])
    {
      do
      {
        v73 = (std::__shared_weak_count *)*((_QWORD *)v71 - 28);
        if (v73)
        {
          v74 = (unint64_t *)&v73->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
        v71 -= 248;
      }
      while (v71 != v70);
      v72 = v146[0];
    }
    v146[1] = v70;
    operator delete(v72);
  }
  sub_22360C6EC((uint64_t)(v130 + 274), (uint64_t)&v121);
  LOBYTE(v146[0]) = 0;
  v151 = 0;
  v152 = 1;
  if (a1[5] && a1[7])
  {
    sub_2235FDE1C((uint64_t)&v143, (uint64_t)a1, (uint64_t)&v130);
    v76 = v145;
    if (v145)
    {
      if ((!v144 || !v143.__vftable)
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 783, (uint64_t)"*ex_opt_plane_result && **ex_opt_plane_result", 45, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      sub_2235FD998((uint64_t)&__lk, (uint64_t)a1, (uint64_t *)&v143);
      sub_223601DA8((uint64_t)v146, (uint64_t)&__lk);
      if (v142)
      {
        if (v141 && v140)
          sub_2232954B0((uint64_t)&__lk);
      }
      else
      {
        v110 = *(std::__shared_weak_count **)&__lk.__owns_;
        if (*(_QWORD *)&__lk.__owns_)
        {
          v111 = (unint64_t *)(*(_QWORD *)&__lk.__owns_ + 8);
          do
            v112 = __ldaxr(v111);
          while (__stlxr(v112 - 1, v111));
          if (!v112)
          {
            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
            std::__shared_weak_count::__release_weak(v110);
          }
        }
      }
    }
    else
    {
      sub_2232E56F4(&__lk, (uint64_t)&v143);
      *(std::unique_lock<std::mutex> *)a2 = __lk;
      *(_BYTE *)(a2 + 448) = 0;
    }
    if (v145)
    {
      if (v144)
      {
        imp = (std::__shared_weak_count *)v143.__imp_.__imp_;
        if (v143.__imp_.__imp_)
        {
          v81 = (unint64_t *)(v143.__imp_.__imp_ + 8);
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          goto LABEL_116;
        }
      }
    }
    else
    {
      imp = (std::__shared_weak_count *)v143.__imp_.__imp_;
      if (v143.__imp_.__imp_)
      {
        v83 = (unint64_t *)(v143.__imp_.__imp_ + 8);
        do
          v82 = __ldaxr(v83);
        while (__stlxr(v82 - 1, v83));
LABEL_116:
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
          std::__shared_weak_count::__release_weak(imp);
          if (!v76)
            goto LABEL_137;
          goto LABEL_118;
        }
      }
    }
    if (!v76)
      goto LABEL_137;
    goto LABEL_118;
  }
  sub_2235FCBC8((uint64_t)&__lk, (uint64_t)a1, (uint64_t *)&v130);
  sub_223601DA8((uint64_t)v146, (uint64_t)&__lk);
  if (v142)
  {
    if (v141 && v140)
      sub_2232954B0((uint64_t)&__lk);
  }
  else
  {
    v77 = *(std::__shared_weak_count **)&__lk.__owns_;
    if (*(_QWORD *)&__lk.__owns_)
    {
      v78 = (unint64_t *)(*(_QWORD *)&__lk.__owns_ + 8);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
  }
LABEL_118:
  if (!v152)
  {
    sub_2232E56F4(&__lk, (uint64_t)v146);
    *(std::unique_lock<std::mutex> *)a2 = __lk;
    *(_BYTE *)(a2 + 448) = 0;
    if (v152)
      goto LABEL_138;
LABEL_142:
    v98 = (std::__shared_weak_count *)v146[1];
    if (v146[1])
    {
      v99 = (unint64_t *)((char *)v146[1] + 8);
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    goto LABEL_147;
  }
  v84 = *(_QWORD *)(a1[2] + 72);
  v85 = (std::__assoc_sub_state *)operator new();
  v85->__shared_owners_ = 0;
  v86 = (unint64_t *)&v85->__shared_owners_;
  v85->__mut_.__m_.__sig = 850045863;
  p_mut = &v85->__mut_;
  v85->__exception_.__ptr_ = 0;
  *(_OWORD *)v85->__mut_.__m_.__opaque = 0u;
  *(_OWORD *)&v85->__mut_.__m_.__opaque[16] = 0u;
  *(_OWORD *)&v85->__mut_.__m_.__opaque[32] = 0u;
  *(_QWORD *)&v85->__mut_.__m_.__opaque[48] = 0;
  v85->__cv_.__cv_.__sig = 1018212795;
  *(_OWORD *)v85->__cv_.__cv_.__opaque = 0u;
  *(_OWORD *)&v85->__cv_.__cv_.__opaque[16] = 0u;
  *(_OWORD *)&v85->__cv_.__cv_.__opaque[28] = 0u;
  v85->__vftable = (std::__assoc_sub_state_vtbl *)&off_24EC55850;
  v137.__ptr_ = v85;
  std::mutex::lock(&v85->__mut_);
  state = v85->__state_;
  if ((state & 2) != 0)
    sub_2233236D4(1u);
  do
    v89 = __ldxr(v86);
  while (__stxr(v89 + 1, v86));
  v85->__state_ = state | 2;
  std::mutex::unlock(p_mut);
  *(_QWORD *)&__lk.__owns_ = 0;
  __lk.__m_ = 0;
  v90 = *(std::__shared_weak_count **)(v84 + 1120);
  if (!v90
    || (v91 = std::__shared_weak_count::lock(v90), (*(_QWORD *)&__lk.__owns_ = v91) == 0)
    || (v92 = v91, v93 = *(std::unique_lock<std::mutex>::mutex_type **)(v84 + 1112), (__lk.__m_ = v93) == 0))
  {
    std::runtime_error::runtime_error(&v143, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v143.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v117 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v118 = std::runtime_error::runtime_error(v117, &v143);
    v118->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v118, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v143.__vftable = (std::runtime_error_vtbl *)v137.__ptr_;
  v137.__ptr_ = 0;
  (*(void (**)(std::unique_lock<std::mutex>::mutex_type *, std::exception_ptr *, std::runtime_error *))(v93->__m_.__sig + 56))(v93, &v135, &v143);
  sub_22353C4D0((uint64_t *)&v143);
  v94 = (unint64_t *)&v92->__shared_owners_;
  do
    v95 = __ldaxr(v94);
  while (__stlxr(v95 - 1, v94));
  if (!v95)
  {
    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
    std::__shared_weak_count::__release_weak(v92);
  }
  sub_22353C4D0((uint64_t *)&v137);
  __lk.__m_ = &v85->__mut_;
  __lk.__owns_ = 1;
  std::mutex::lock(p_mut);
  std::__assoc_sub_state::__sub_wait(v85, &__lk);
  ptr = v85->__exception_.__ptr_;
  v143.__vftable = 0;
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&v143);
  if (ptr)
  {
    std::exception_ptr::exception_ptr((std::exception_ptr *)&v143, &v85->__exception_);
    v119.__ptr_ = &v143;
    std::rethrow_exception(v119);
    __break(1u);
    return;
  }
  sub_22329ACE4((uint64_t)&v120, (uint64_t)&v85[1]);
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  do
    v97 = __ldaxr(v86);
  while (__stlxr(v97 - 1, v86));
  if (!v97)
    ((void (*)(std::__assoc_sub_state *))v85->__on_zero_shared)(v85);
  sub_2232954B0((uint64_t)&v120);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 440) = 0;
  if (v150)
  {
    sub_223299E34(a2, (uint64_t)v146);
    *(_BYTE *)(a2 + 440) = 1;
  }
  *(_BYTE *)(a2 + 448) = 1;
LABEL_137:
  if (!v152)
    goto LABEL_142;
LABEL_138:
  if (v151 && v150)
    sub_2232954B0((uint64_t)v146);
LABEL_147:
  if (*((_QWORD *)&v123 + 1))
  {
    *(_QWORD *)&v124 = *((_QWORD *)&v123 + 1);
    operator delete(*((void **)&v123 + 1));
  }
  v101 = __p.__m_;
  if (__p.__m_)
  {
    v102 = *(std::unique_lock<std::mutex>::mutex_type **)&__p.__owns_;
    v103 = __p.__m_;
    if (*(std::unique_lock<std::mutex>::mutex_type **)&__p.__owns_ != __p.__m_)
    {
      do
      {
        v104 = *(std::__shared_weak_count **)&v102[-4].__m_.__opaque[24];
        if (v104)
        {
          v105 = (unint64_t *)&v104->__shared_owners_;
          do
            v106 = __ldaxr(v105);
          while (__stlxr(v106 - 1, v105));
          if (!v106)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        v102 = (std::unique_lock<std::mutex>::mutex_type *)((char *)v102 - 248);
      }
      while (v102 != v101);
      v103 = __p.__m_;
    }
    *(_QWORD *)&__p.__owns_ = v101;
    operator delete(v103);
  }
  v107 = v131;
  if (v131)
  {
    v108 = (unint64_t *)&v131->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
}

void sub_22360C650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  unint64_t v72;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&STACK[0x2B0]);
  std::runtime_error::~runtime_error((std::runtime_error *)&STACK[0x490]);
  v72 = STACK[0x290];
  sub_223167354((uint64_t)&a72);
  if (!v72)
    JUMPOUT(0x22360C6CCLL);
  JUMPOUT(0x22360C6A4);
}

uint64_t sub_22360C6EC(uint64_t a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  void **v6;
  char *v7;
  char *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v4 = *(unsigned __int8 *)(a1 + 120);
  v5 = (_QWORD *)(a2 + 8);
  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = (void **)(a1 + 8);
  if (v4)
  {
    v7 = (char *)*v6;
    if (*v6)
    {
      v8 = *(char **)(a1 + 16);
      v9 = *v6;
      if (v8 != v7)
      {
        do
        {
          v10 = (std::__shared_weak_count *)*((_QWORD *)v8 - 28);
          if (v10)
          {
            p_shared_owners = (unint64_t *)&v10->__shared_owners_;
            do
              v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          v8 -= 248;
        }
        while (v8 != v7);
        v9 = *v6;
      }
      *(_QWORD *)(a1 + 16) = v7;
      operator delete(v9);
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
    }
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v16 = *(void **)(a1 + 32);
    if (v16)
    {
      *(_QWORD *)(a1 + 40) = v16;
      operator delete(v16);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
    }
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    v17 = *(_OWORD *)(a2 + 56);
    v18 = *(_OWORD *)(a2 + 72);
    v19 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v19;
    *(_OWORD *)(a1 + 72) = v18;
    *(_OWORD *)(a1 + 56) = v17;
  }
  else
  {
    *v6 = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *v5 = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    v13 = *(_OWORD *)(a2 + 56);
    v14 = *(_OWORD *)(a2 + 72);
    v15 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v15;
    *(_OWORD *)(a1 + 72) = v14;
    *(_OWORD *)(a1 + 56) = v13;
    *(_BYTE *)(a1 + 120) = 1;
  }
  return a1;
}

void **sub_22360C890@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  void *v16;

  sub_223227930((uint64_t *)&v16);
  sub_223625484((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 72) + 2624), a2, &v15);
  sub_22360AF3C(&v15, a3);
  v11 = v15;
  if (v15)
  {
    v12 = (unint64_t *)(v15 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  }
  return sub_22322797C(&v16, v6, v7, v8, v9, v10);
}

void sub_22360C924(_Unwind_Exception *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7, ...)
{
  unint64_t *v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a7);
  if (a7)
  {
    v8 = a7 + 1;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      (*(void (**)(unint64_t *))(*a7 + 16))(a7);
      sub_22322797C((void **)va, v10, v11, v12, v13, v14);
      _Unwind_Resume(a1);
    }
  }
  sub_22322797C((void **)va, a2, a3, a4, a5, a6);
  _Unwind_Resume(a1);
}

void **sub_22360C978@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  void *v16;

  sub_223227930((uint64_t *)&v16);
  sub_223625758((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 72) + 2792), a2, &v15);
  sub_22360CA60(&v15, a3);
  v11 = v15;
  if (v15)
  {
    v12 = (unint64_t *)(v15 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  }
  return sub_22322797C(&v16, v6, v7, v8, v9, v10);
}

void sub_22360CA0C(_Unwind_Exception *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7, ...)
{
  unint64_t *v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a7);
  if (a7)
  {
    v8 = a7 + 1;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      (*(void (**)(unint64_t *))(*a7 + 16))(a7);
      sub_22322797C((void **)va, v10, v11, v12, v13, v14);
      _Unwind_Resume(a1);
    }
  }
  sub_22322797C((void **)va, a2, a3, a4, a5, a6);
  _Unwind_Resume(a1);
}

void sub_22360CA60(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v4 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 499, (uint64_t)"future.valid()", 14, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *a1;
  }
  *a1 = 0;
  sub_223625B18(v4, a2);
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
}

void sub_22360CB14(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  unint64_t *v15;
  unint64_t *v17;
  unint64_t v18;

  if (v15)
  {
    v17 = v15 + 1;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
      (*(void (**)(unint64_t *))(*v15 + 16))(v15);
  }
  __cxa_begin_catch(a1);
  v14[1] = 0;
  v14[2] = 0;
  *v14 = 0;
  __cxa_end_catch();
}

void **sub_22360CB64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  void *v16;

  sub_223227930((uint64_t *)&v16);
  sub_223625BEC((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 72) + 2960), a2, &v15);
  sub_22360CA60(&v15, a3);
  v11 = v15;
  if (v15)
  {
    v12 = (unint64_t *)(v15 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  }
  return sub_22322797C(&v16, v6, v7, v8, v9, v10);
}

void sub_22360CBF8(_Unwind_Exception *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7, ...)
{
  unint64_t *v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a7);
  if (a7)
  {
    v8 = a7 + 1;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      (*(void (**)(unint64_t *))(*a7 + 16))(a7);
      sub_22322797C((void **)va, v10, v11, v12, v13, v14);
      _Unwind_Resume(a1);
    }
  }
  sub_22322797C((void **)va, a2, a3, a4, a5, a6);
  _Unwind_Resume(a1);
}

void **sub_22360CC4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  void *v16;

  sub_223227930((uint64_t *)&v16);
  sub_223625EC0((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 72) + 3128), a2, &v15);
  sub_22360CD34(&v15, a3);
  v11 = v15;
  if (v15)
  {
    v12 = (unint64_t *)(v15 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  }
  return sub_22322797C(&v16, v6, v7, v8, v9, v10);
}

void sub_22360CCE0(_Unwind_Exception *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7, ...)
{
  unint64_t *v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a7);
  if (a7)
  {
    v8 = a7 + 1;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      (*(void (**)(unint64_t *))(*a7 + 16))(a7);
      sub_22322797C((void **)va, v10, v11, v12, v13, v14);
      _Unwind_Resume(a1);
    }
  }
  sub_22322797C((void **)va, a2, a3, a4, a5, a6);
  _Unwind_Resume(a1);
}

void sub_22360CD34(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  std::exception_ptr v23;
  std::exception_ptr v24;
  std::unique_lock<std::mutex> __lk;

  v4 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 499, (uint64_t)"future.valid()", 14, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_16;
    }
    v4 = *a1;
  }
  *a1 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v4 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v4, &__lk);
  v5 = *(_QWORD *)(v4 + 16);
  v24.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v24);
  if (v5)
  {
    std::exception_ptr::exception_ptr(&v24, (const std::exception_ptr *)(v4 + 16));
    v23.__ptr_ = &v24;
    std::rethrow_exception(v23);
    __break(1u);
LABEL_16:
    abort();
  }
  v6 = (_OWORD *)(v4 + 144);
  v7 = *(unsigned __int8 *)(v4 + 392);
  *(_BYTE *)(a2 + 248) = v7;
  if (!v7)
  {
    *(_OWORD *)a2 = *v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v4 + 152) = 0;
    if (!__lk.__owns_)
      goto LABEL_8;
    goto LABEL_7;
  }
  v8 = *(_OWORD *)(v4 + 160);
  v9 = *(_OWORD *)(v4 + 176);
  *(_OWORD *)a2 = *v6;
  *(_OWORD *)(a2 + 16) = v8;
  *(_QWORD *)(v4 + 160) = 0;
  *(_QWORD *)(v4 + 168) = 0;
  v10 = *(_OWORD *)(v4 + 192);
  v11 = *(_OWORD *)(v4 + 208);
  *(_OWORD *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 48) = v10;
  v12 = *(_OWORD *)(v4 + 224);
  v13 = *(_OWORD *)(v4 + 240);
  *(_OWORD *)(a2 + 64) = v11;
  *(_OWORD *)(a2 + 80) = v12;
  v14 = *(_OWORD *)(v4 + 256);
  v15 = *(_OWORD *)(v4 + 288);
  v16 = *(_OWORD *)(v4 + 304);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(v4 + 272);
  *(_OWORD *)(a2 + 144) = v15;
  *(_OWORD *)(a2 + 96) = v13;
  *(_OWORD *)(a2 + 112) = v14;
  v17 = *(_OWORD *)(v4 + 320);
  v18 = *(_OWORD *)(v4 + 336);
  *(_OWORD *)(a2 + 160) = v16;
  *(_OWORD *)(a2 + 176) = v17;
  v19 = *(_OWORD *)(v4 + 352);
  v20 = *(_OWORD *)(v4 + 368);
  *(_OWORD *)(a2 + 192) = v18;
  *(_OWORD *)(a2 + 208) = v19;
  *(_OWORD *)(a2 + 224) = v20;
  *(_WORD *)(a2 + 240) = *(_WORD *)(v4 + 384);
  if (__lk.__owns_)
LABEL_7:
    std::mutex::unlock(__lk.__m_);
LABEL_8:
  v21 = (unint64_t *)(v4 + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
}

void sub_22360CEBC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::mutex *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  unint64_t *v19;
  unint64_t *v21;
  unint64_t v22;
  std::exception_ptr v28[2];
  char v29;

  std::exception_ptr::~exception_ptr(v28);
  if (v29)
    std::mutex::unlock((std::mutex *)v28[1].__ptr_);
  if (v19)
  {
    v21 = v19 + 1;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
      (*(void (**)(unint64_t *))(*v19 + 16))(v19);
  }
  __cxa_begin_catch(a1);
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(_OWORD *)(v18 + 96) = 0u;
  *(_OWORD *)(v18 + 112) = 0u;
  *(_OWORD *)(v18 + 128) = 0u;
  *(_OWORD *)(v18 + 144) = 0u;
  *(_OWORD *)(v18 + 160) = 0u;
  *(_OWORD *)(v18 + 176) = 0u;
  *(_OWORD *)(v18 + 192) = 0u;
  *(_OWORD *)(v18 + 208) = 0u;
  *(_OWORD *)(v18 + 224) = 0u;
  *(_QWORD *)(v18 + 240) = 0;
  *(_OWORD *)(v18 + 64) = xmmword_224645160;
  *(_OWORD *)(v18 + 80) = unk_224645170;
  *(_OWORD *)(v18 + 32) = xmmword_224645140;
  *(_OWORD *)(v18 + 48) = unk_224645150;
  *(_OWORD *)(v18 + 132) = 0u;
  *(_OWORD *)(v18 + 148) = 0u;
  *(_OWORD *)(v18 + 116) = 0u;
  *(_QWORD *)(v18 + 164) = 0;
  *(_QWORD *)(v18 + 96) = 0;
  *(_QWORD *)(v18 + 104) = 0;
  *(_DWORD *)(v18 + 112) = 1065353216;
  *(_DWORD *)(v18 + 132) = 1065353216;
  *(_DWORD *)(v18 + 152) = 1065353216;
  *(_OWORD *)(v18 + 196) = 0u;
  *(_OWORD *)(v18 + 212) = 0u;
  *(_OWORD *)(v18 + 180) = 0u;
  *(_QWORD *)(v18 + 228) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v18 + 172) = _D0;
  *(_DWORD *)(v18 + 196) = 1065353216;
  *(_DWORD *)(v18 + 216) = 1065353216;
  *(_DWORD *)(v18 + 236) = 1065353216;
  *(_BYTE *)(v18 + 241) = 1;
  *(_BYTE *)(v18 + 248) = 1;
  __cxa_end_catch();
}

void sub_22360CFC8(_QWORD *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  std::future<void> v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a1[2] + 72) + 3792);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6) & 1) == 0
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 868, (uint64_t)"meshing_node_->C<MeshingChannels::EnablePRR>().InputEnabled()", 61, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223626CB8((uint64_t *)(*(_QWORD *)(a1[2] + 72) + 3800), a2);
  sub_22360D094(a1);
  *a3 = 0;
  a3[16] = 0;
  std::future<void>::~future(&v7);
}

void sub_22360D080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::future<void> a10)
{
  std::future<void>::~future(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_22360D094(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  _QWORD **v6;
  uint64_t v7;
  _QWORD **v8;
  _QWORD **v9;

  v2 = *(_QWORD *)(*(_QWORD *)(a1[8] + 72) + 72);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  v3 = a1[5];
  if (v3)
    sub_223656028(*(_QWORD ***)(v3 + 72));
  v4 = a1[2];
  if (v4)
  {
    v5 = *(_QWORD ***)(v4 + 72);
    (*(void (**)(_QWORD *))(*v5[9] + 64))(v5[9]);
    (*(void (**)(_QWORD *))(*v5[30] + 64))(v5[30]);
    (*(void (**)(_QWORD *))(*v5[51] + 64))(v5[51]);
    (*(void (**)(_QWORD *))(*v5[72] + 64))(v5[72]);
    (*(void (**)(_QWORD *))(*v5[93] + 64))(v5[93]);
    (*(void (**)(_QWORD *))(*v5[114] + 64))(v5[114]);
    (*(void (**)(_QWORD *))(*v5[135] + 64))(v5[135]);
    (*(void (**)(_QWORD *))(*v5[156] + 64))(v5[156]);
    (*(void (**)(_QWORD *))(*v5[177] + 64))(v5[177]);
    (*(void (**)(_QWORD *))(*v5[198] + 64))(v5[198]);
    (*(void (**)(_QWORD *))(*v5[219] + 64))(v5[219]);
    (*(void (**)(_QWORD *))(*v5[240] + 64))(v5[240]);
    (*(void (**)(_QWORD *))(*v5[261] + 64))(v5[261]);
    (*(void (**)(_QWORD *))(*v5[282] + 64))(v5[282]);
    (*(void (**)(_QWORD *))(*v5[303] + 64))(v5[303]);
    (*(void (**)(_QWORD *))(*v5[324] + 64))(v5[324]);
    (*(void (**)(_QWORD *))(*v5[345] + 64))(v5[345]);
    (*(void (**)(_QWORD *))(*v5[366] + 64))(v5[366]);
    (*(void (**)(_QWORD *))(*v5[387] + 64))(v5[387]);
    (*(void (**)(_QWORD *))(*v5[408] + 64))(v5[408]);
    (*(void (**)(_QWORD *))(*v5[429] + 64))(v5[429]);
    (*(void (**)(_QWORD *))(*v5[450] + 64))(v5[450]);
    (*(void (**)(_QWORD *))(*v5[471] + 64))(v5[471]);
    (*(void (**)(_QWORD *))(*v5[492] + 64))(v5[492]);
    (*(void (**)(_QWORD *))(*v5[513] + 64))(v5[513]);
    v6 = *(_QWORD ***)(a1[4] + 72);
    (*(void (**)(_QWORD *))(*v6[9] + 64))(v6[9]);
    (*(void (**)(_QWORD *))(*v6[30] + 64))(v6[30]);
    (*(void (**)(_QWORD *))(*v6[51] + 64))(v6[51]);
    (*(void (**)(_QWORD *))(*v6[72] + 64))(v6[72]);
    (*(void (**)(_QWORD *))(*v6[93] + 64))(v6[93]);
    (*(void (**)(_QWORD *))(*v6[114] + 64))(v6[114]);
  }
  if (a1[5])
  {
    v7 = a1[7];
    if (v7)
    {
      v8 = *(_QWORD ***)(v7 + 72);
      (*(void (**)(_QWORD *))(*v8[9] + 64))(v8[9]);
      (*(void (**)(_QWORD *))(*v8[30] + 64))(v8[30]);
      (*(void (**)(_QWORD *))(*v8[51] + 64))(v8[51]);
      (*(void (**)(_QWORD *))(*v8[72] + 64))(v8[72]);
      (*(void (**)(_QWORD *))(*v8[93] + 64))(v8[93]);
      (*(void (**)(_QWORD *))(*v8[114] + 64))(v8[114]);
      (*(void (**)(_QWORD *))(*v8[135] + 64))(v8[135]);
    }
  }
  v9 = *(_QWORD ***)(a1[9] + 72);
  (*(void (**)(_QWORD *))(*v9[9] + 64))(v9[9]);
  (*(void (**)(_QWORD *))(*v9[30] + 64))(v9[30]);
  return (*(uint64_t (**)(_QWORD *))(*v9[51] + 64))(v9[51]);
}

std::__assoc_sub_state *sub_22360D394@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  std::__assoc_sub_state *result;
  uint64_t *p_shared_owners;
  unint64_t v9;
  std::__assoc_sub_state *v10;

  v6 = *(_QWORD *)(*(_QWORD *)(a1[2] + 72) + 4128);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6) & 1) == 0
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 896, (uint64_t)"meshing_node_->C<MeshingChannels::EnableOccupancyByProximity>().InputEnabled()", 78, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_22362713C((uint64_t *)(*(_QWORD *)(a1[2] + 72) + 4136), a2, (uint64_t *)&v10);
  sub_2235FC104(&v10, "Error processing occupancy by proximity request", a3);
  if (!a3[16])
  {
    sub_22360D094(a1);
    *a3 = 0;
    a3[16] = 0;
  }
  result = v10;
  if (v10)
  {
    p_shared_owners = &v10->__shared_owners_;
    do
      v9 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v9 - 1, (unint64_t *)p_shared_owners));
    if (!v9)
      return (std::__assoc_sub_state *)((uint64_t (*)(std::__assoc_sub_state *))result->__on_zero_shared)(result);
  }
  return result;
}

void sub_22360D4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10)
{
  unint64_t *v11;
  unint64_t v12;

  if (a10)
  {
    v11 = a10 + 1;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
      (*(void (**)(unint64_t *))(*a10 + 16))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22360D4E0(uint64_t a1)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(unint64_t **)a1;
    if (!*(_QWORD *)a1)
      return a1;
    v3 = v2 + 1;
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (v4)
      return a1;
    (*(void (**)(unint64_t *))(*v2 + 16))(v2);
    return a1;
  }
  else
  {
    v6 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v6)
      return a1;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (v8)
      return a1;
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    return a1;
  }
}

void sub_22360D58C(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;

  v2 = (std::mutex *)(a1 + 1304);
  std::mutex::lock((std::mutex *)(a1 + 1304));
  std::mutex::unlock(v2);
  v3 = *(_QWORD *)(a1 + 1368);
  *(_QWORD *)(a1 + 1368) = v3 + 1;
  if (!v3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 72) + 96);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v5 = *(_QWORD *)(a1 + 40);
    if (v5)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 72) + 96) + 32))(*(_QWORD *)(*(_QWORD *)(v5 + 72) + 96));
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 72) + 264);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    }
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v7 + 72) + 96) + 32))(*(_QWORD *)(*(_QWORD *)(v7 + 72) + 96));
      v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 72) + 1944);
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 72) + 2112);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    }
    if (*(_QWORD *)(a1 + 40))
    {
      v10 = *(_QWORD *)(a1 + 56);
      if (v10)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v10 + 72) + 96) + 32))(*(_QWORD *)(*(_QWORD *)(v10 + 72) + 96));
        v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 72) + 264);
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
      }
    }
    v12 = *(_QWORD ***)(*(_QWORD *)(a1 + 72) + 72);
    (*(void (**)(_QWORD *))(*v12[12] + 32))(v12[12]);
    (*(void (**)(_QWORD *))(*v12[33] + 32))(v12[33]);
    (*(void (**)(_QWORD *))(*v12[54] + 32))(v12[54]);
    sub_22360D094((_QWORD *)a1);
  }
}

void sub_22360D6E8(uint64_t a1, std::__assoc_sub_state **a2)
{
  std::__assoc_sub_state *v4;
  void *ptr;
  std::__assoc_sub_state_vtbl *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::exception_ptr v9;
  std::exception_ptr v10;
  std::exception_ptr v11;
  std::unique_lock<std::mutex> __lk;

  v4 = *a2;
  if (!*a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 487, (uint64_t)"future.valid()", 14, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_13;
    }
    v4 = *a2;
  }
  *a2 = 0;
  __lk.__m_ = &v4->__mut_;
  __lk.__owns_ = 1;
  std::mutex::lock(&v4->__mut_);
  std::__assoc_sub_state::__sub_wait(v4, &__lk);
  ptr = v4->__exception_.__ptr_;
  v10.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v10);
  if (ptr)
  {
    v9.__ptr_ = std::exception_ptr::exception_ptr(&v11, &v4->__exception_);
    std::rethrow_exception(v9);
    __break(1u);
LABEL_13:
    abort();
  }
  v6 = v4[1].__vftable;
  v4[1].__vftable = 0;
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
    ((void (*)(std::__assoc_sub_state *))v4->__on_zero_shared)(v4);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 16) = 1;
}

void sub_22360D804(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,int a22,int a23,__int128 a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  char *v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t *v44;
  unint64_t v45;
  void *v46;
  char *v47;
  __int128 v48;
  void *v49;
  char v50;
  void *v51[2];
  char v52;
  unsigned int v53;
  __int128 v54;
  _QWORD v55[13];

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v41 - 72));
  if (*(_BYTE *)(v41 - 56))
    std::mutex::unlock(*(std::mutex **)(v41 - 64));
  if (v40)
  {
    v44 = v40 + 1;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
      (*(void (**)(unint64_t *))(*v40 + 16))(v40);
  }
  v46 = __cxa_begin_catch(a1);
  v53 = 89;
  if (a2 == 2)
  {
    v47 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v46 + 16))(v46);
    sub_223174DE4(v51, v47);
  }
  else
  {
    sub_223174DE4(v51, v39);
  }
  sub_223174DE4(&v49, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp");
  sub_2232B84FC(&v53, (uint64_t)v51, (CFErrorRef *)&v54);
  v48 = v54;
  v54 = 0uLL;
  *(_OWORD *)v38 = v48;
  v55[0] = 0;
  v55[1] = 0;
  *(_BYTE *)(v38 + 16) = 0;
  sub_223167354((uint64_t)v55);
  sub_223167354((uint64_t)&v54);
  if (v50 < 0)
    operator delete(v49);
  if (v52 < 0)
    operator delete(v51[0]);
  __cxa_end_catch();
}

void sub_22360D95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *sub_22360D9DC(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  std::exception_ptr v12;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC557C0;
  v11 = v4;
  *a1 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = v11;
  if (!v11)
    sub_2233236D4(3u);
  std::mutex::lock((std::mutex *)(v11 + 24));
  if ((*(_BYTE *)(v11 + 136) & 1) != 0
    || (v12.__ptr_ = 0, v9 = *(_QWORD *)(v11 + 16), std::exception_ptr::~exception_ptr(&v12), v9))
  {
    sub_2233236D4(2u);
  }
  *(_BYTE *)(v11 + 140) = *a2;
  *(_DWORD *)(v8 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v8 + 88));
  std::mutex::unlock((std::mutex *)(v8 + 24));
  return sub_2234AB028(&v11);
}

void sub_22360DB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  sub_2234AB028(&a9);
  _Unwind_Resume(a1);
}

void sub_22360DB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2234AB028(&a9);
  _Unwind_Resume(a1);
}

void sub_22360DB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  std::mutex *v10;
  unint64_t *v11;
  unint64_t v13;

  std::mutex::unlock(v10);
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (!v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  sub_2234AB028(&a9);
  _Unwind_Resume(a1);
}

void sub_22360DBAC(_QWORD *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  char __p[20];
  char v22;
  __int128 v23;
  std::error_condition v24;

  v6 = a1[2];
  if (v6)
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 72) + 768) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 768)) & 1) == 0
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 1056, (uint64_t)"meshing_node_->C<MeshingChannels::SaveDiagnosticData>().InputEnabled()", 70, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_36;
    }
    sub_223627B94((uint64_t *)__p, (uint64_t *)(*(_QWORD *)(a1[2] + 72) + 776), a2);
    sub_2235FC104((std::__assoc_sub_state **)__p, "Error saving diagnostic meshing data", a3);
    v7 = a3[16];
    v8 = *(_QWORD *)__p;
    if (!*(_QWORD *)__p)
      goto LABEL_8;
    v9 = (unint64_t *)(*(_QWORD *)__p + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v7)
        return;
    }
    else
    {
LABEL_8:
      if (v7)
        return;
    }
    v11 = a1[5];
    if (!v11)
    {
LABEL_29:
      *a3 = 0;
      a3[16] = 0;
      return;
    }
  }
  else
  {
    v11 = a1[5];
    if (!v11)
    {
      v22 = 19;
      strcpy(__p, "Nothing to be saved");
      *(_QWORD *)&v24.__val_ = 102;
      v24.__cat_ = std::generic_category();
      sub_2245321DC(&v24, (uint64_t)__p, (CFErrorRef *)&v23);
      *(_OWORD *)a3 = v23;
      v23 = 0uLL;
      a3[16] = 1;
      if (v22 < 0)
        operator delete(*(void **)__p);
      return;
    }
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v11 + 72) + 1440) + 40))(*(_QWORD *)(*(_QWORD *)(v11 + 72) + 1440)) & 1) == 0
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 1064, (uint64_t)"keyframing_node_->C<KeyframeChannels::SaveDiagnosticData>().InputEnabled()", 74, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_36;
  }
  sub_223627B94((uint64_t *)__p, (uint64_t *)(*(_QWORD *)(a1[5] + 72) + 1448), a2);
  sub_2235FC104((std::__assoc_sub_state **)__p, "Error saving diagnostic keyframe data", a3);
  v12 = a3[16];
  v13 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_18;
  v14 = (unint64_t *)(*(_QWORD *)__p + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
    if (v12)
      return;
  }
  else
  {
LABEL_18:
    if (v12)
      return;
  }
  if (!a1[5])
    goto LABEL_29;
  v16 = a1[7];
  if (!v16)
    goto LABEL_29;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v16 + 72) + 768) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 72) + 768)) & 1) == 0
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 1073, (uint64_t)"plane_detection_node_->C<KeyframeChannels::SaveDiagnosticData>().InputEnabled()", 79, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
  {
LABEL_36:
    abort();
  }
  sub_223627B94((uint64_t *)__p, (uint64_t *)(*(_QWORD *)(a1[5] + 72) + 1448), a2);
  sub_2235FC104((std::__assoc_sub_state **)__p, "Error saving diagnostic plane detection data", a3);
  v17 = a3[16];
  v18 = *(_QWORD *)__p;
  if (*(_QWORD *)__p)
  {
    v19 = (unint64_t *)(*(_QWORD *)__p + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
  }
  if (!v17)
    goto LABEL_29;
}

void sub_22360DECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  unint64_t *v19;
  unint64_t v20;

  if (__p)
  {
    v19 = __p + 1;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
      (*(void (**)(unint64_t *))(*__p + 16))(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22360DF68(void **a1, _QWORD *a2)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  __int128 *v10;
  char *v11;
  __int128 *v12;
  char *v13;
  __int128 v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 *v21;
  char *v22;
  __int128 *v23;
  char *v24;
  int v27;
  size_t v28;
  unint64_t v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *p_dst;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  _QWORD *v46;
  char *v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  __int128 v58;
  _BOOL4 v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  _BOOL4 v75;
  void **v76;
  void **v77;
  void **v78;
  char *v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  void **v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  _BOOL4 v87;
  void **v88;
  void **v89;
  void **v90;
  char *v91;
  __int128 v92;
  uint64_t v93;
  char *v94;
  void **v95;
  uint64_t v96;
  char *v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  unsigned __int8 v105;
  uint64_t v106;
  __int128 *v107;
  char *v108;
  __int128 *v109;
  char *v110;
  __int128 v111;
  char *v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  __int128 *v118;
  char *v119;
  __int128 *v120;
  char *v121;
  int v124;
  size_t v125;
  unint64_t v126;
  __int128 *v127;
  uint64_t v128;
  uint64_t v129;
  __int128 *v130;
  char *v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  std::__shared_weak_count *v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count *v138;
  uint64_t v139;
  _QWORD *v140;
  unint64_t *v141;
  unint64_t v142;
  _QWORD *v143;
  char *v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count *v147;
  uint64_t v148;
  _QWORD *v149;
  unint64_t *v150;
  unint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  __int128 *v157;
  char *v158;
  __int128 *v159;
  char *v160;
  char *v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  __int128 *v167;
  char *v168;
  __int128 *v169;
  char *v170;
  int v173;
  size_t v174;
  unint64_t v175;
  __int128 *v176;
  uint64_t v177;
  uint64_t v178;
  __int128 *v179;
  char *v180;
  uint64_t v181;
  __int128 v182;
  uint64_t v183;
  __int128 v184;
  std::__shared_weak_count *v185;
  std::__shared_weak_count *v186;
  std::__shared_weak_count *v187;
  uint64_t v188;
  _QWORD *v189;
  unint64_t *v190;
  unint64_t v191;
  _QWORD *v192;
  char *v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count *v195;
  std::__shared_weak_count *v196;
  uint64_t v197;
  _QWORD *v198;
  unint64_t *v199;
  unint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  __int128 *v206;
  char *v207;
  __int128 *v208;
  char *v209;
  char *v210;
  uint64_t v211;
  __int128 v212;
  uint64_t v213;
  __int128 v214;
  uint64_t v215;
  __int128 *v216;
  char *v217;
  __int128 *v218;
  char *v219;
  int v222;
  size_t v223;
  unint64_t v224;
  __int128 *v225;
  uint64_t v226;
  uint64_t v227;
  __int128 *v228;
  char *v229;
  uint64_t v230;
  __int128 v231;
  uint64_t v232;
  __int128 v233;
  std::__shared_weak_count *v234;
  std::__shared_weak_count *v235;
  std::__shared_weak_count *v236;
  uint64_t v237;
  _QWORD *v238;
  unint64_t *v239;
  unint64_t v240;
  _QWORD *v241;
  char *v242;
  std::__shared_weak_count *v243;
  std::__shared_weak_count *v244;
  std::__shared_weak_count *v245;
  uint64_t v246;
  uint64_t v247;
  void **v248;
  _QWORD *v249;
  unint64_t *v250;
  unint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  char *v254;
  __int128 v255;
  _BOOL4 v256;
  char *v257;
  char *v258;
  char *v259;
  char *v260;
  __int128 v261;
  uint64_t v262;
  char *v263;
  char *v264;
  __int128 v266;
  __int128 v267;
  _QWORD *v268;
  int v269;
  size_t v270;
  unint64_t v271;
  __int128 *v272;
  int v273;
  size_t v274;
  unint64_t v275;
  __int128 *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t *v282;
  _QWORD *v283;
  uint64_t v284;
  __int128 v286;
  uint64_t v287;
  __int128 v288;
  uint64_t v289;
  int v290;
  __int128 v291;
  uint64_t v292;
  __int128 v293;
  uint64_t v294;
  __int128 v295;
  uint64_t v296;
  void *v297;
  char *v298;
  unint64_t v299;
  void *v300;
  char *v301;
  unint64_t v302;
  _QWORD *v303;
  _QWORD *v304;
  uint64_t v305;
  __int128 v306;
  uint64_t v307;
  __int128 v308;
  __int128 v309;
  unint64_t v310;
  __int128 __p;
  _BYTE v312[24];
  uint64_t v313;
  __int128 v314;
  uint64_t v315;
  __int128 __dst;
  int64_t v317;

  v2 = a2;
  v3 = a1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a2[8];
  v300 = 0;
  v301 = 0;
  v302 = 0;
  v297 = 0;
  v298 = 0;
  v299 = 0;
  v5 = *(_QWORD *)(v4 + 72);
  if (!v5)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = *(_QWORD *)(v4 + 72);
    if ((*(char *)(v5 + 31) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    sub_223197FA4(&__dst, *(void **)(v5 + 8), *(_QWORD *)(v5 + 16));
    goto LABEL_7;
  }
  if (*(char *)(v5 + 31) < 0)
    goto LABEL_6;
LABEL_3:
  v6 = *(_OWORD *)(v5 + 8);
  v317 = *(_QWORD *)(v5 + 24);
  __dst = v6;
LABEL_7:
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 96) + 48))(*(_QWORD *)(v5 + 96));
  v8 = atomic_load((unsigned __int8 *)&qword_2540CAF90);
  if ((v8 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CAF90))
    goto LABEL_8;
  v268 = v2;
  sub_223627FC0();
  v269 = byte_2540CBB87;
  if (byte_2540CBB87 >= 0)
    v270 = byte_2540CBB87;
  else
    v270 = qword_2540CBB78;
  v271 = v270 + 1;
  if (v270 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v271 >= 0x17)
  {
    v277 = (v271 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v271 | 7) != 0x17)
      v277 = v271 | 7;
    v278 = v277 + 1;
    v272 = (__int128 *)operator new(v277 + 1);
    *((_QWORD *)&xmmword_2540CBB58 + 1) = v270 + 1;
    unk_2540CBB68 = v278 | 0x8000000000000000;
    *(_QWORD *)&xmmword_2540CBB58 = v272;
    goto LABEL_741;
  }
  v272 = &xmmword_2540CBB58;
  unk_2540CBB68 = 0;
  xmmword_2540CBB58 = 0uLL;
  byte_2540CBB6F = v270 + 1;
  if (v270)
  {
LABEL_741:
    if (v269 >= 0)
      v279 = &qword_2540CBB70;
    else
      v279 = (uint64_t *)qword_2540CBB70;
    memmove(v272, v279, v270);
  }
  *(_WORD *)((char *)v272 + v270) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CBB58, &dword_22314D000);
  __cxa_guard_release(&qword_2540CAF90);
  v3 = a1;
  v2 = v268;
LABEL_8:
  if (byte_2540CBB6F < 0)
  {
    sub_223197FA4(&v314, (void *)xmmword_2540CBB58, *((unint64_t *)&xmmword_2540CBB58 + 1));
  }
  else
  {
    v314 = xmmword_2540CBB58;
    v315 = unk_2540CBB68;
  }
  v9 = HIBYTE(v315);
  if (v315 >= 0)
  {
    v10 = &v314;
  }
  else
  {
    v9 = *((_QWORD *)&v314 + 1);
    v10 = (__int128 *)v314;
  }
  v283 = v2;
  if (v9 >= 4)
  {
    v11 = (char *)v10 + v9;
    v12 = v10;
    do
    {
      v13 = (char *)memchr(v12, 118, v9 - 3);
      if (!v13)
        break;
      if (*(_DWORD *)v13 == 1684631414)
      {
        if (v13 == v11 || v13 - (char *)v10 == -1)
          break;
        *(_QWORD *)&v308 = v7;
        DWORD2(v308) = 4;
        if (SHIBYTE(v317) < 0)
        {
          sub_223197FA4(&v309, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v309 = __dst;
          v310 = v317;
        }
        if (*(char *)(v5 + 55) < 0)
        {
          sub_223197FA4(&__p, *(void **)(v5 + 32), *(_QWORD *)(v5 + 40));
        }
        else
        {
          v266 = *(_OWORD *)(v5 + 32);
          *(_QWORD *)v312 = *(_QWORD *)(v5 + 48);
          __p = v266;
        }
        sub_2236287EC();
        if (byte_2540CBC17 < 0)
        {
          sub_223197FA4(&v312[8], (void *)xmmword_2540CBC00, *((unint64_t *)&xmmword_2540CBC00 + 1));
        }
        else
        {
          *(_OWORD *)&v312[8] = xmmword_2540CBC00;
          v313 = unk_2540CBC10;
        }
        v15 = v301;
        if ((unint64_t)v301 < v302)
          goto LABEL_34;
        goto LABEL_37;
      }
      v12 = (__int128 *)(v13 + 1);
      v9 = v11 - (char *)v12;
    }
    while (v11 - (char *)v12 >= 4);
  }
  *(_QWORD *)&v308 = v7;
  DWORD2(v308) = 2;
  if (SHIBYTE(v317) < 0)
  {
    sub_223197FA4(&v309, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v309 = __dst;
    v310 = v317;
  }
  if (*(char *)(v5 + 55) < 0)
  {
    sub_223197FA4(&__p, *(void **)(v5 + 32), *(_QWORD *)(v5 + 40));
  }
  else
  {
    v14 = *(_OWORD *)(v5 + 32);
    *(_QWORD *)v312 = *(_QWORD *)(v5 + 48);
    __p = v14;
  }
  sub_2236287EC();
  if (byte_2540CBC17 < 0)
  {
    sub_223197FA4(&v312[8], (void *)xmmword_2540CBC00, *((unint64_t *)&xmmword_2540CBC00 + 1));
  }
  else
  {
    *(_OWORD *)&v312[8] = xmmword_2540CBC00;
    v313 = unk_2540CBC10;
  }
  v15 = v301;
  if ((unint64_t)v301 >= v302)
  {
LABEL_37:
    v301 = sub_2236285DC((char **)&v300, (uint64_t)&v308);
    if (SHIBYTE(v313) < 0)
    {
      operator delete(*(void **)&v312[8]);
      if ((v312[7] & 0x80000000) == 0)
        goto LABEL_39;
    }
    else if ((v312[7] & 0x80000000) == 0)
    {
      goto LABEL_39;
    }
LABEL_35:
    operator delete((void *)__p);
    if ((SHIBYTE(v310) & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_36;
  }
LABEL_34:
  v16 = v308;
  *((_DWORD *)v15 + 2) = DWORD2(v308);
  *(_QWORD *)v15 = v16;
  v17 = v309;
  *((_QWORD *)v15 + 4) = v310;
  *((_OWORD *)v15 + 1) = v17;
  v310 = 0;
  v309 = 0uLL;
  v18 = *(_QWORD *)v312;
  *(_OWORD *)(v15 + 40) = __p;
  *((_QWORD *)v15 + 7) = v18;
  *(_QWORD *)v312 = 0;
  __p = 0uLL;
  v19 = *(_OWORD *)&v312[8];
  *((_QWORD *)v15 + 10) = v313;
  *((_OWORD *)v15 + 4) = v19;
  *(_QWORD *)&v312[8] = 0;
  *(_QWORD *)&v312[16] = 0;
  v313 = 0;
  v301 = v15 + 88;
  if ((v312[7] & 0x80000000) != 0)
    goto LABEL_35;
LABEL_39:
  if (SHIBYTE(v310) < 0)
LABEL_36:
    operator delete((void *)v309);
LABEL_40:
  sub_223627E68();
  if (byte_2540CBC48[23] < 0)
  {
    sub_223197FA4(&v306, *(void **)byte_2540CBC48, *(unint64_t *)&byte_2540CBC48[8]);
  }
  else
  {
    v306 = *(_OWORD *)byte_2540CBC48;
    v307 = *(_QWORD *)&byte_2540CBC48[16];
  }
  v20 = HIBYTE(v307);
  if (v307 >= 0)
  {
    v21 = &v306;
  }
  else
  {
    v20 = *((_QWORD *)&v306 + 1);
    v21 = (__int128 *)v306;
  }
  if (v20 >= 18)
  {
    v22 = (char *)v21 + v20;
    v23 = v21;
    do
    {
      v24 = (char *)memchr(v23, 67, v20 - 17);
      if (!v24)
        break;
      if (*(_QWORD *)v24 == 0x456C656E6E616843
        && *((_QWORD *)v24 + 1) == 0x696F763C726F7272
        && *((_WORD *)v24 + 8) == 15972)
      {
        if (v24 != v22 && v24 - (char *)v21 != -1)
          goto LABEL_84;
        break;
      }
      v23 = (__int128 *)(v24 + 1);
      v20 = v22 - (char *)v23;
    }
    while (v22 - (char *)v23 >= 18);
  }
  *(_QWORD *)&v308 = v7 + 1;
  DWORD2(v308) = 3;
  v27 = SHIBYTE(v317);
  if (v317 >= 0)
    v28 = HIBYTE(v317);
  else
    v28 = *((_QWORD *)&__dst + 1);
  v29 = v28 + 6;
  if (v28 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v29 >= 0x17)
  {
    v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v31 = v29 | 7;
    v32 = v31 + 1;
    v30 = (__int128 *)operator new(v31 + 1);
    *((_QWORD *)&v309 + 1) = v28 + 6;
    v310 = v32 | 0x8000000000000000;
    *(_QWORD *)&v309 = v30;
    v3 = a1;
  }
  else
  {
    v310 = 0;
    v309 = 0uLL;
    v30 = &v309;
    HIBYTE(v310) = v28 + 6;
    if (!v28)
      goto LABEL_76;
  }
  if (v27 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
  memmove(v30, p_dst, v28);
LABEL_76:
  strcpy((char *)v30 + v28, ".Error");
  *(_WORD *)&v312[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v313) = 0;
  v34 = v301;
  if ((unint64_t)v301 >= v302)
  {
    v301 = sub_2236285DC((char **)&v300, (uint64_t)&v308);
    if (SHIBYTE(v313) < 0)
    {
      operator delete(*(void **)&v312[8]);
      if ((v312[7] & 0x80000000) == 0)
        goto LABEL_83;
    }
    else if ((v312[7] & 0x80000000) == 0)
    {
      goto LABEL_83;
    }
LABEL_78:
    operator delete((void *)__p);
    if (SHIBYTE(v310) < 0)
      goto LABEL_79;
    goto LABEL_84;
  }
  v35 = v308;
  *((_DWORD *)v301 + 2) = DWORD2(v308);
  *(_QWORD *)v34 = v35;
  v36 = v309;
  *((_QWORD *)v34 + 4) = v310;
  *((_OWORD *)v34 + 1) = v36;
  v310 = 0;
  v309 = 0uLL;
  v37 = *(_QWORD *)v312;
  *(_OWORD *)(v34 + 40) = __p;
  *((_QWORD *)v34 + 7) = v37;
  *(_QWORD *)v312 = 0;
  __p = 0uLL;
  v38 = *(_OWORD *)&v312[8];
  *((_QWORD *)v34 + 10) = v313;
  *((_OWORD *)v34 + 4) = v38;
  *(_QWORD *)&v312[8] = 0;
  *(_QWORD *)&v312[16] = 0;
  v313 = 0;
  v301 = v34 + 88;
  if ((v312[7] & 0x80000000) != 0)
    goto LABEL_78;
LABEL_83:
  if (SHIBYTE(v310) < 0)
  {
LABEL_79:
    operator delete((void *)v309);
    v39 = *(std::__shared_weak_count **)(v5 + 136);
    if (!v39)
      goto LABEL_88;
    goto LABEL_85;
  }
LABEL_84:
  v39 = *(std::__shared_weak_count **)(v5 + 136);
  if (!v39)
  {
LABEL_88:
    v303 = 0;
    v304 = 0;
    v305 = 0;
    v43 = 0;
    goto LABEL_103;
  }
LABEL_85:
  v40 = std::__shared_weak_count::lock(v39);
  *((_QWORD *)&v308 + 1) = v40;
  if (!v40)
    goto LABEL_88;
  v41 = v40;
  v42 = *(_QWORD *)(v5 + 128);
  *(_QWORD *)&v308 = v42;
  if (v42)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v42 + 24))(&v303);
  }
  else
  {
    v303 = 0;
    v304 = 0;
    v305 = 0;
  }
  p_shared_owners = (unint64_t *)&v41->__shared_owners_;
  do
    v45 = __ldaxr(p_shared_owners);
  while (__stlxr(v45 - 1, p_shared_owners));
  if (v45)
  {
    v43 = v303;
    v46 = v304;
    if (v303 == v304)
      goto LABEL_103;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
    v43 = v303;
    v46 = v304;
    if (v303 == v304)
      goto LABEL_103;
  }
  do
  {
    *(_QWORD *)&v308 = v7;
    *((_QWORD *)&v308 + 1) = *v43;
    v310 = 0;
    v309 = 0uLL;
    v47 = v298;
    if ((unint64_t)v298 < v299)
    {
      *(_OWORD *)v298 = v308;
      *((_QWORD *)v47 + 3) = 0;
      *((_QWORD *)v47 + 4) = 0;
      *((_QWORD *)v47 + 2) = 0;
      v298 = v47 + 40;
    }
    else
    {
      v298 = sub_223628FA4(&v297, (uint64_t)&v308);
      if (SHIBYTE(v310) < 0)
        operator delete((void *)v309);
    }
    ++v43;
  }
  while (v43 != v46);
  v43 = v303;
LABEL_103:
  if (v43)
  {
    v304 = v43;
    operator delete(v43);
  }
  v48 = *(std::__shared_weak_count **)(v5 + 136);
  if (!v48 || (v49 = std::__shared_weak_count::lock(v48), (*((_QWORD *)&v308 + 1) = v49) == 0))
  {
    v303 = 0;
    v304 = 0;
    v305 = 0;
    v52 = 0;
    goto LABEL_124;
  }
  v50 = v49;
  v51 = *(_QWORD *)(v5 + 128);
  *(_QWORD *)&v308 = v51;
  if (v51)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v51 + 32))(&v303);
  }
  else
  {
    v303 = 0;
    v304 = 0;
    v305 = 0;
  }
  v53 = (unint64_t *)&v50->__shared_owners_;
  do
    v54 = __ldaxr(v53);
  while (__stlxr(v54 - 1, v53));
  if (v54)
  {
    v52 = v303;
    v55 = v304;
    if (v303 == v304)
      goto LABEL_124;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
    v52 = v303;
    v55 = v304;
    if (v303 == v304)
      goto LABEL_124;
  }
  v56 = v7 + 1;
  do
  {
    *(_QWORD *)&v308 = v56;
    *((_QWORD *)&v308 + 1) = *v52;
    v310 = 0;
    v309 = 0uLL;
    v57 = v298;
    if ((unint64_t)v298 < v299)
    {
      *(_OWORD *)v298 = v308;
      *((_QWORD *)v57 + 3) = 0;
      *((_QWORD *)v57 + 4) = 0;
      *((_QWORD *)v57 + 2) = 0;
      v298 = v57 + 40;
    }
    else
    {
      v298 = sub_223628FA4(&v297, (uint64_t)&v308);
      if (SHIBYTE(v310) < 0)
        operator delete((void *)v309);
    }
    ++v52;
  }
  while (v52 != v55);
  v52 = v303;
LABEL_124:
  if (v52)
  {
    v304 = v52;
    operator delete(v52);
  }
  if (SHIBYTE(v307) < 0)
  {
    operator delete((void *)v306);
    if ((SHIBYTE(v315) & 0x80000000) == 0)
    {
LABEL_128:
      if ((SHIBYTE(v317) & 0x80000000) == 0)
        goto LABEL_129;
LABEL_133:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 31) & 0x80000000) == 0)
        goto LABEL_130;
      goto LABEL_134;
    }
  }
  else if ((SHIBYTE(v315) & 0x80000000) == 0)
  {
    goto LABEL_128;
  }
  operator delete((void *)v314);
  if (SHIBYTE(v317) < 0)
    goto LABEL_133;
LABEL_129:
  if ((*(char *)(v4 + 31) & 0x80000000) == 0)
  {
LABEL_130:
    v58 = *(_OWORD *)(v4 + 8);
    *(_QWORD *)&v309 = *(_QWORD *)(v4 + 24);
    v308 = v58;
    goto LABEL_135;
  }
LABEL_134:
  sub_223197FA4(&v308, *(void **)(v4 + 8), *(_QWORD *)(v4 + 16));
LABEL_135:
  v59 = *(_QWORD *)(v4 + 56) != 0;
  if (*(char *)(v4 + 55) < 0)
  {
    sub_223197FA4(&__dst, *(void **)(v4 + 32), *(_QWORD *)(v4 + 40));
  }
  else
  {
    __dst = *(_OWORD *)(v4 + 32);
    v317 = *(_QWORD *)(v4 + 48);
  }
  sub_223629100((uint64_t)&v286, &v308, v59, (uint64_t *)&v300, (uint64_t *)&v297, &__dst);
  if (SHIBYTE(v317) < 0)
  {
    operator delete((void *)__dst);
    if ((SBYTE7(v309) & 0x80000000) == 0)
    {
LABEL_140:
      v60 = (char *)v297;
      if (v297)
        goto LABEL_141;
LABEL_152:
      v62 = (char *)v300;
      if (!v300)
        goto LABEL_143;
      goto LABEL_153;
    }
  }
  else if ((SBYTE7(v309) & 0x80000000) == 0)
  {
    goto LABEL_140;
  }
  operator delete((void *)v308);
  v60 = (char *)v297;
  if (!v297)
    goto LABEL_152;
LABEL_141:
  v61 = v298;
  if (v298 == v60)
  {
    v298 = v60;
    operator delete(v60);
    v62 = (char *)v300;
    if (!v300)
      goto LABEL_143;
    goto LABEL_153;
  }
  do
  {
    if (*(v61 - 1) < 0)
      operator delete(*((void **)v61 - 3));
    v61 -= 40;
  }
  while (v61 != v60);
  v298 = v60;
  operator delete(v297);
  v62 = (char *)v300;
  if (!v300)
  {
LABEL_143:
    v63 = (char *)v3[1];
    if (v63 >= v3[2])
      goto LABEL_155;
    goto LABEL_144;
  }
LABEL_153:
  v67 = v301;
  if (v301 == v62)
  {
    v301 = v62;
    operator delete(v62);
    v63 = (char *)v3[1];
    if (v63 >= v3[2])
      goto LABEL_155;
    goto LABEL_144;
  }
  do
  {
    while ((*(v67 - 1) & 0x80000000) == 0)
    {
      if ((*(v67 - 25) & 0x80000000) == 0)
        goto LABEL_165;
LABEL_159:
      operator delete(*((void **)v67 - 6));
      if (*(v67 - 49) < 0)
        goto LABEL_166;
LABEL_160:
      v67 -= 88;
      if (v67 == v62)
        goto LABEL_167;
    }
    operator delete(*((void **)v67 - 3));
    if (*(v67 - 25) < 0)
      goto LABEL_159;
LABEL_165:
    if ((*(v67 - 49) & 0x80000000) == 0)
      goto LABEL_160;
LABEL_166:
    operator delete(*((void **)v67 - 9));
    v67 -= 88;
  }
  while (v67 != v62);
LABEL_167:
  v301 = v62;
  operator delete(v300);
  v63 = (char *)v3[1];
  if (v63 < v3[2])
  {
LABEL_144:
    v64 = v286;
    *((_QWORD *)v63 + 2) = v287;
    *(_OWORD *)v63 = v64;
    v286 = 0uLL;
    v65 = v289;
    *(_OWORD *)(v63 + 24) = v288;
    *((_QWORD *)v63 + 5) = v65;
    v287 = 0;
    v288 = 0uLL;
    v289 = 0;
    *((_DWORD *)v63 + 12) = v290;
    *((_QWORD *)v63 + 7) = 0;
    *((_QWORD *)v63 + 8) = 0;
    *((_QWORD *)v63 + 9) = 0;
    *((_QWORD *)v63 + 10) = 0;
    *(_OWORD *)(v63 + 56) = v291;
    *((_QWORD *)v63 + 9) = v292;
    v291 = 0uLL;
    *((_QWORD *)v63 + 11) = 0;
    *((_QWORD *)v63 + 12) = 0;
    *((_OWORD *)v63 + 5) = v293;
    *((_QWORD *)v63 + 12) = v294;
    *((_QWORD *)v63 + 13) = 0;
    v292 = 0;
    v293 = 0uLL;
    v294 = 0;
    *((_QWORD *)v63 + 14) = 0;
    *((_QWORD *)v63 + 15) = 0;
    *(_OWORD *)(v63 + 104) = v295;
    *((_QWORD *)v63 + 15) = v296;
    v295 = 0uLL;
    v296 = 0;
    v66 = v63 + 128;
    goto LABEL_156;
  }
LABEL_155:
  v66 = sub_2236208C0(v3, (uint64_t)&v286);
LABEL_156:
  v3[1] = v66;
  sub_223620AC4((uint64_t)&v286);
  if (!v283[2])
    goto LABEL_198;
  sub_22361157C((uint64_t)&v286, v283[4]);
  v68 = (char *)v3[1];
  if (v68 >= v3[2])
  {
    v71 = sub_2236208C0(v3, (uint64_t)&v286);
  }
  else
  {
    v69 = v286;
    *((_QWORD *)v68 + 2) = v287;
    *(_OWORD *)v68 = v69;
    v286 = 0uLL;
    v70 = v289;
    *(_OWORD *)(v68 + 24) = v288;
    *((_QWORD *)v68 + 5) = v70;
    v287 = 0;
    v288 = 0uLL;
    v289 = 0;
    *((_DWORD *)v68 + 12) = v290;
    *((_QWORD *)v68 + 7) = 0;
    *((_QWORD *)v68 + 8) = 0;
    *((_QWORD *)v68 + 9) = 0;
    *((_QWORD *)v68 + 10) = 0;
    *(_OWORD *)(v68 + 56) = v291;
    *((_QWORD *)v68 + 9) = v292;
    v291 = 0uLL;
    *((_QWORD *)v68 + 11) = 0;
    *((_QWORD *)v68 + 12) = 0;
    *((_OWORD *)v68 + 5) = v293;
    *((_QWORD *)v68 + 12) = v294;
    *((_QWORD *)v68 + 13) = 0;
    v292 = 0;
    v293 = 0uLL;
    v294 = 0;
    *((_QWORD *)v68 + 14) = 0;
    *((_QWORD *)v68 + 15) = 0;
    *(_OWORD *)(v68 + 104) = v295;
    *((_QWORD *)v68 + 15) = v296;
    v295 = 0uLL;
    v296 = 0;
    v71 = v68 + 128;
  }
  v3[1] = v71;
  sub_223620AC4((uint64_t)&v286);
  v72 = v283[2];
  v308 = 0uLL;
  *(_QWORD *)&v309 = 0;
  __dst = 0uLL;
  v317 = 0;
  v73 = *(_QWORD *)(v72 + 72);
  if (!v73)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v73 = *(_QWORD *)(v72 + 72);
  }
  *(_QWORD *)&v314 = &v308;
  *((_QWORD *)&v314 + 1) = &__dst;
  sub_22362D870(v73, (uint64_t *)&v314);
  if (*(char *)(v72 + 31) < 0)
  {
    sub_223197FA4(&v314, *(void **)(v72 + 8), *(_QWORD *)(v72 + 16));
  }
  else
  {
    v74 = *(_OWORD *)(v72 + 8);
    v315 = *(_QWORD *)(v72 + 24);
    v314 = v74;
  }
  v75 = *(_QWORD *)(v72 + 56) != 0;
  if (*(char *)(v72 + 55) < 0)
  {
    sub_223197FA4(&v306, *(void **)(v72 + 32), *(_QWORD *)(v72 + 40));
  }
  else
  {
    v306 = *(_OWORD *)(v72 + 32);
    v307 = *(_QWORD *)(v72 + 48);
  }
  sub_223629100((uint64_t)&v286, &v314, v75, (uint64_t *)&v308, (uint64_t *)&__dst, &v306);
  if (SHIBYTE(v307) < 0)
  {
    operator delete((void *)v306);
    if (SHIBYTE(v315) < 0)
      goto LABEL_192;
LABEL_181:
    v76 = (void **)__dst;
    if ((_QWORD)__dst)
      goto LABEL_182;
LABEL_193:
    v78 = (void **)v308;
    if ((_QWORD)v308)
      goto LABEL_194;
LABEL_184:
    v79 = (char *)v3[1];
    if (v79 >= v3[2])
      goto LABEL_196;
    goto LABEL_185;
  }
  if ((SHIBYTE(v315) & 0x80000000) == 0)
    goto LABEL_181;
LABEL_192:
  operator delete((void *)v314);
  v76 = (void **)__dst;
  if (!(_QWORD)__dst)
    goto LABEL_193;
LABEL_182:
  v77 = (void **)*((_QWORD *)&__dst + 1);
  if (*((void ***)&__dst + 1) == v76)
  {
    *((_QWORD *)&__dst + 1) = v76;
    operator delete(v76);
    v78 = (void **)v308;
    if (!(_QWORD)v308)
      goto LABEL_184;
  }
  else
  {
    do
    {
      if (*((char *)v77 - 1) < 0)
        operator delete(*(v77 - 3));
      v77 -= 5;
    }
    while (v77 != v76);
    *((_QWORD *)&__dst + 1) = v76;
    operator delete((void *)__dst);
    v78 = (void **)v308;
    if (!(_QWORD)v308)
      goto LABEL_184;
  }
LABEL_194:
  v83 = (void **)*((_QWORD *)&v308 + 1);
  if (*((void ***)&v308 + 1) == v78)
  {
    *((_QWORD *)&v308 + 1) = v78;
    operator delete(v78);
    v79 = (char *)v3[1];
    if (v79 >= v3[2])
      goto LABEL_196;
    goto LABEL_185;
  }
  while (2)
  {
    while (2)
    {
      if (*((char *)v83 - 1) < 0)
      {
        operator delete(*(v83 - 3));
        if ((*((char *)v83 - 25) & 0x80000000) == 0)
          goto LABEL_210;
LABEL_204:
        operator delete(*(v83 - 6));
        if (*((char *)v83 - 49) < 0)
          goto LABEL_211;
LABEL_205:
        v83 -= 11;
        if (v83 == v78)
          goto LABEL_212;
        continue;
      }
      break;
    }
    if (*((char *)v83 - 25) < 0)
      goto LABEL_204;
LABEL_210:
    if ((*((char *)v83 - 49) & 0x80000000) == 0)
      goto LABEL_205;
LABEL_211:
    operator delete(*(v83 - 9));
    v83 -= 11;
    if (v83 != v78)
      continue;
    break;
  }
LABEL_212:
  *((_QWORD *)&v308 + 1) = v78;
  operator delete((void *)v308);
  v79 = (char *)v3[1];
  if (v79 < v3[2])
  {
LABEL_185:
    v80 = v286;
    *((_QWORD *)v79 + 2) = v287;
    *(_OWORD *)v79 = v80;
    v286 = 0uLL;
    v81 = v289;
    *(_OWORD *)(v79 + 24) = v288;
    *((_QWORD *)v79 + 5) = v81;
    v287 = 0;
    v288 = 0uLL;
    v289 = 0;
    *((_DWORD *)v79 + 12) = v290;
    *((_QWORD *)v79 + 7) = 0;
    *((_QWORD *)v79 + 8) = 0;
    *((_QWORD *)v79 + 9) = 0;
    *((_QWORD *)v79 + 10) = 0;
    *(_OWORD *)(v79 + 56) = v291;
    *((_QWORD *)v79 + 9) = v292;
    v291 = 0uLL;
    *((_QWORD *)v79 + 11) = 0;
    *((_QWORD *)v79 + 12) = 0;
    *((_OWORD *)v79 + 5) = v293;
    *((_QWORD *)v79 + 12) = v294;
    *((_QWORD *)v79 + 13) = 0;
    v292 = 0;
    v293 = 0uLL;
    v294 = 0;
    *((_QWORD *)v79 + 14) = 0;
    *((_QWORD *)v79 + 15) = 0;
    *(_OWORD *)(v79 + 104) = v295;
    *((_QWORD *)v79 + 15) = v296;
    v295 = 0uLL;
    v296 = 0;
    v82 = v79 + 128;
    goto LABEL_197;
  }
LABEL_196:
  v82 = sub_2236208C0(v3, (uint64_t)&v286);
LABEL_197:
  v3[1] = v82;
  sub_223620AC4((uint64_t)&v286);
LABEL_198:
  v84 = v283[5];
  if (!v84)
    goto LABEL_254;
  v308 = 0uLL;
  *(_QWORD *)&v309 = 0;
  __dst = 0uLL;
  v317 = 0;
  v85 = *(_QWORD *)(v84 + 72);
  if (!v85)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v85 = *(_QWORD *)(v84 + 72);
  }
  *(_QWORD *)&v314 = &v308;
  *((_QWORD *)&v314 + 1) = &__dst;
  sub_2236420A8(v85, (uint64_t *)&v314);
  if (*(char *)(v84 + 31) < 0)
  {
    sub_223197FA4(&v314, *(void **)(v84 + 8), *(_QWORD *)(v84 + 16));
  }
  else
  {
    v86 = *(_OWORD *)(v84 + 8);
    v315 = *(_QWORD *)(v84 + 24);
    v314 = v86;
  }
  v87 = *(_QWORD *)(v84 + 56) != 0;
  if (*(char *)(v84 + 55) < 0)
  {
    sub_223197FA4(&v306, *(void **)(v84 + 32), *(_QWORD *)(v84 + 40));
  }
  else
  {
    v306 = *(_OWORD *)(v84 + 32);
    v307 = *(_QWORD *)(v84 + 48);
  }
  sub_223629100((uint64_t)&v286, &v314, v87, (uint64_t *)&v308, (uint64_t *)&__dst, &v306);
  if (SHIBYTE(v307) < 0)
  {
    operator delete((void *)v306);
    if (SHIBYTE(v315) < 0)
      goto LABEL_231;
LABEL_220:
    v88 = (void **)__dst;
    if ((_QWORD)__dst)
      goto LABEL_221;
LABEL_232:
    v90 = (void **)v308;
    if ((_QWORD)v308)
      goto LABEL_233;
LABEL_223:
    v91 = (char *)v3[1];
    if (v91 >= v3[2])
      goto LABEL_235;
    goto LABEL_224;
  }
  if ((SHIBYTE(v315) & 0x80000000) == 0)
    goto LABEL_220;
LABEL_231:
  operator delete((void *)v314);
  v88 = (void **)__dst;
  if (!(_QWORD)__dst)
    goto LABEL_232;
LABEL_221:
  v89 = (void **)*((_QWORD *)&__dst + 1);
  if (*((void ***)&__dst + 1) == v88)
  {
    *((_QWORD *)&__dst + 1) = v88;
    operator delete(v88);
    v90 = (void **)v308;
    if (!(_QWORD)v308)
      goto LABEL_223;
  }
  else
  {
    do
    {
      if (*((char *)v89 - 1) < 0)
        operator delete(*(v89 - 3));
      v89 -= 5;
    }
    while (v89 != v88);
    *((_QWORD *)&__dst + 1) = v88;
    operator delete((void *)__dst);
    v90 = (void **)v308;
    if (!(_QWORD)v308)
      goto LABEL_223;
  }
LABEL_233:
  v95 = (void **)*((_QWORD *)&v308 + 1);
  if (*((void ***)&v308 + 1) == v90)
  {
    *((_QWORD *)&v308 + 1) = v90;
    operator delete(v90);
    v91 = (char *)v3[1];
    if (v91 >= v3[2])
      goto LABEL_235;
    goto LABEL_224;
  }
  while (2)
  {
    while (2)
    {
      if (*((char *)v95 - 1) < 0)
      {
        operator delete(*(v95 - 3));
        if ((*((char *)v95 - 25) & 0x80000000) == 0)
          goto LABEL_246;
LABEL_240:
        operator delete(*(v95 - 6));
        if (*((char *)v95 - 49) < 0)
          goto LABEL_247;
LABEL_241:
        v95 -= 11;
        if (v95 == v90)
          goto LABEL_248;
        continue;
      }
      break;
    }
    if (*((char *)v95 - 25) < 0)
      goto LABEL_240;
LABEL_246:
    if ((*((char *)v95 - 49) & 0x80000000) == 0)
      goto LABEL_241;
LABEL_247:
    operator delete(*(v95 - 9));
    v95 -= 11;
    if (v95 != v90)
      continue;
    break;
  }
LABEL_248:
  *((_QWORD *)&v308 + 1) = v90;
  operator delete((void *)v308);
  v91 = (char *)v3[1];
  if (v91 < v3[2])
  {
LABEL_224:
    v92 = v286;
    *((_QWORD *)v91 + 2) = v287;
    *(_OWORD *)v91 = v92;
    v286 = 0uLL;
    v93 = v289;
    *(_OWORD *)(v91 + 24) = v288;
    *((_QWORD *)v91 + 5) = v93;
    v287 = 0;
    v288 = 0uLL;
    v289 = 0;
    *((_DWORD *)v91 + 12) = v290;
    *((_QWORD *)v91 + 7) = 0;
    *((_QWORD *)v91 + 8) = 0;
    *((_QWORD *)v91 + 9) = 0;
    *((_QWORD *)v91 + 10) = 0;
    *(_OWORD *)(v91 + 56) = v291;
    *((_QWORD *)v91 + 9) = v292;
    v291 = 0uLL;
    *((_QWORD *)v91 + 11) = 0;
    *((_QWORD *)v91 + 12) = 0;
    *((_OWORD *)v91 + 5) = v293;
    *((_QWORD *)v91 + 12) = v294;
    *((_QWORD *)v91 + 13) = 0;
    v292 = 0;
    v293 = 0uLL;
    v294 = 0;
    *((_QWORD *)v91 + 14) = 0;
    *((_QWORD *)v91 + 15) = 0;
    *(_OWORD *)(v91 + 104) = v295;
    *((_QWORD *)v91 + 15) = v296;
    v295 = 0uLL;
    v296 = 0;
    v94 = v91 + 128;
    goto LABEL_236;
  }
LABEL_235:
  v94 = sub_2236208C0(v3, (uint64_t)&v286);
LABEL_236:
  v3[1] = v94;
  sub_223620AC4((uint64_t)&v286);
  if (v283[5])
  {
    v96 = v283[7];
    if (v96)
    {
      sub_223614F40((uint64_t)&v286, v96);
      v97 = (char *)v3[1];
      if (v97 >= v3[2])
      {
        v100 = sub_2236208C0(v3, (uint64_t)&v286);
      }
      else
      {
        v98 = v286;
        *((_QWORD *)v97 + 2) = v287;
        *(_OWORD *)v97 = v98;
        v286 = 0uLL;
        v99 = v289;
        *(_OWORD *)(v97 + 24) = v288;
        *((_QWORD *)v97 + 5) = v99;
        v287 = 0;
        v288 = 0uLL;
        v289 = 0;
        *((_DWORD *)v97 + 12) = v290;
        *((_QWORD *)v97 + 7) = 0;
        *((_QWORD *)v97 + 8) = 0;
        *((_QWORD *)v97 + 9) = 0;
        *((_QWORD *)v97 + 10) = 0;
        *(_OWORD *)(v97 + 56) = v291;
        *((_QWORD *)v97 + 9) = v292;
        v291 = 0uLL;
        *((_QWORD *)v97 + 11) = 0;
        *((_QWORD *)v97 + 12) = 0;
        *((_OWORD *)v97 + 5) = v293;
        *((_QWORD *)v97 + 12) = v294;
        *((_QWORD *)v97 + 13) = 0;
        v292 = 0;
        v293 = 0uLL;
        v294 = 0;
        *((_QWORD *)v97 + 14) = 0;
        *((_QWORD *)v97 + 15) = 0;
        *(_OWORD *)(v97 + 104) = v295;
        *((_QWORD *)v97 + 15) = v296;
        v295 = 0uLL;
        v296 = 0;
        v100 = v97 + 128;
      }
      v3[1] = v100;
      sub_223620AC4((uint64_t)&v286);
    }
  }
LABEL_254:
  v101 = v283[9];
  v300 = 0;
  v301 = 0;
  v302 = 0;
  v297 = 0;
  v298 = 0;
  v299 = 0;
  v284 = v101;
  v102 = *(_QWORD *)(v101 + 72);
  if (v102)
  {
    if ((*(char *)(v102 + 31) & 0x80000000) == 0)
      goto LABEL_256;
LABEL_259:
    sub_223197FA4(&__dst, *(void **)(v102 + 8), *(_QWORD *)(v102 + 16));
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v102 = *(_QWORD *)(v284 + 72);
    if (*(char *)(v102 + 31) < 0)
      goto LABEL_259;
LABEL_256:
    v103 = *(_OWORD *)(v102 + 8);
    v317 = *(_QWORD *)(v102 + 24);
    __dst = v103;
  }
  v104 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v102 + 96) + 48))(*(_QWORD *)(v102 + 96));
  v105 = atomic_load((unsigned __int8 *)&qword_2540CBAD8);
  if ((v105 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBAD8))
  {
    sub_223655328();
    v273 = byte_255794A6F;
    if (byte_255794A6F >= 0)
      v274 = byte_255794A6F;
    else
      v274 = qword_255794A60;
    v275 = v274 + 1;
    if (v274 + 1 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v275 >= 0x17)
    {
      v280 = (v275 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v275 | 7) != 0x17)
        v280 = v275 | 7;
      v281 = v280 + 1;
      v276 = (__int128 *)operator new(v280 + 1);
      *((_QWORD *)&xmmword_255794A40 + 1) = v274 + 1;
      unk_255794A50 = v281 | 0x8000000000000000;
      *(_QWORD *)&xmmword_255794A40 = v276;
    }
    else
    {
      v276 = &xmmword_255794A40;
      unk_255794A50 = 0;
      xmmword_255794A40 = 0uLL;
      byte_255794A57 = v274 + 1;
      if (!v274)
        goto LABEL_753;
    }
    if (v273 >= 0)
      v282 = &qword_255794A58;
    else
      v282 = (uint64_t *)qword_255794A58;
    memmove(v276, v282, v274);
LABEL_753:
    *(_WORD *)((char *)v276 + v274) = 38;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794A40, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBAD8);
  }
  if (byte_255794A57 < 0)
  {
    sub_223197FA4(&v314, (void *)xmmword_255794A40, *((unint64_t *)&xmmword_255794A40 + 1));
  }
  else
  {
    v314 = xmmword_255794A40;
    v315 = unk_255794A50;
  }
  v106 = HIBYTE(v315);
  if (v315 >= 0)
  {
    v107 = &v314;
  }
  else
  {
    v106 = *((_QWORD *)&v314 + 1);
    v107 = (__int128 *)v314;
  }
  if (v106 >= 4)
  {
    v108 = (char *)v107 + v106;
    v109 = v107;
    do
    {
      v110 = (char *)memchr(v109, 118, v106 - 3);
      if (!v110)
        break;
      if (*(_DWORD *)v110 == 1684631414)
      {
        if (v110 == v108 || v110 - (char *)v107 == -1)
          break;
        *(_QWORD *)&v308 = v104;
        DWORD2(v308) = 4;
        if (SHIBYTE(v317) < 0)
        {
          sub_223197FA4(&v309, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v309 = __dst;
          v310 = v317;
        }
        if (*(char *)(v102 + 55) < 0)
        {
          sub_223197FA4(&__p, *(void **)(v102 + 32), *(_QWORD *)(v102 + 40));
        }
        else
        {
          v267 = *(_OWORD *)(v102 + 32);
          *(_QWORD *)v312 = *(_QWORD *)(v102 + 48);
          __p = v267;
        }
        sub_223655AF0();
        if (byte_255794B47 < 0)
        {
          sub_223197FA4(&v312[8], (void *)xmmword_255794B30, *((unint64_t *)&xmmword_255794B30 + 1));
        }
        else
        {
          *(_OWORD *)&v312[8] = xmmword_255794B30;
          v313 = unk_255794B40;
        }
        v112 = v301;
        if ((unint64_t)v301 < v302)
          goto LABEL_287;
        goto LABEL_290;
      }
      v109 = (__int128 *)(v110 + 1);
      v106 = v108 - (char *)v109;
    }
    while (v108 - (char *)v109 >= 4);
  }
  *(_QWORD *)&v308 = v104;
  DWORD2(v308) = 2;
  if (SHIBYTE(v317) < 0)
  {
    sub_223197FA4(&v309, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v309 = __dst;
    v310 = v317;
  }
  if (*(char *)(v102 + 55) < 0)
  {
    sub_223197FA4(&__p, *(void **)(v102 + 32), *(_QWORD *)(v102 + 40));
  }
  else
  {
    v111 = *(_OWORD *)(v102 + 32);
    *(_QWORD *)v312 = *(_QWORD *)(v102 + 48);
    __p = v111;
  }
  sub_223655AF0();
  if (byte_255794B47 < 0)
  {
    sub_223197FA4(&v312[8], (void *)xmmword_255794B30, *((unint64_t *)&xmmword_255794B30 + 1));
  }
  else
  {
    *(_OWORD *)&v312[8] = xmmword_255794B30;
    v313 = unk_255794B40;
  }
  v112 = v301;
  if ((unint64_t)v301 < v302)
  {
LABEL_287:
    v113 = v308;
    *((_DWORD *)v112 + 2) = DWORD2(v308);
    *(_QWORD *)v112 = v113;
    v114 = v309;
    *((_QWORD *)v112 + 4) = v310;
    *((_OWORD *)v112 + 1) = v114;
    v310 = 0;
    v309 = 0uLL;
    v115 = *(_QWORD *)v312;
    *(_OWORD *)(v112 + 40) = __p;
    *((_QWORD *)v112 + 7) = v115;
    *(_QWORD *)v312 = 0;
    __p = 0uLL;
    v116 = *(_OWORD *)&v312[8];
    *((_QWORD *)v112 + 10) = v313;
    *((_OWORD *)v112 + 4) = v116;
    *(_QWORD *)&v312[8] = 0;
    *(_QWORD *)&v312[16] = 0;
    v313 = 0;
    v301 = v112 + 88;
    if ((v312[7] & 0x80000000) != 0)
      goto LABEL_288;
LABEL_292:
    if ((SHIBYTE(v310) & 0x80000000) == 0)
      goto LABEL_293;
LABEL_289:
    operator delete((void *)v309);
    goto LABEL_293;
  }
LABEL_290:
  v301 = sub_2236285DC((char **)&v300, (uint64_t)&v308);
  if (SHIBYTE(v313) < 0)
  {
    operator delete(*(void **)&v312[8]);
    if ((v312[7] & 0x80000000) == 0)
      goto LABEL_292;
  }
  else if ((v312[7] & 0x80000000) == 0)
  {
    goto LABEL_292;
  }
LABEL_288:
  operator delete((void *)__p);
  if (SHIBYTE(v310) < 0)
    goto LABEL_289;
LABEL_293:
  sub_223627E68();
  if (byte_2540CBC48[23] < 0)
  {
    sub_223197FA4(&v306, *(void **)byte_2540CBC48, *(unint64_t *)&byte_2540CBC48[8]);
  }
  else
  {
    v306 = *(_OWORD *)byte_2540CBC48;
    v307 = *(_QWORD *)&byte_2540CBC48[16];
  }
  v117 = HIBYTE(v307);
  if (v307 >= 0)
  {
    v118 = &v306;
  }
  else
  {
    v117 = *((_QWORD *)&v306 + 1);
    v118 = (__int128 *)v306;
  }
  if (v117 >= 18)
  {
    v119 = (char *)v118 + v117;
    v120 = v118;
    do
    {
      v121 = (char *)memchr(v120, 67, v117 - 17);
      if (!v121)
        break;
      if (*(_QWORD *)v121 == 0x456C656E6E616843
        && *((_QWORD *)v121 + 1) == 0x696F763C726F7272
        && *((_WORD *)v121 + 8) == 15972)
      {
        if (v121 != v119 && v121 - (char *)v118 != -1)
          goto LABEL_337;
        break;
      }
      v120 = (__int128 *)(v121 + 1);
      v117 = v119 - (char *)v120;
    }
    while (v119 - (char *)v120 >= 18);
  }
  *(_QWORD *)&v308 = v104 + 1;
  DWORD2(v308) = 3;
  v124 = SHIBYTE(v317);
  if (v317 >= 0)
    v125 = HIBYTE(v317);
  else
    v125 = *((_QWORD *)&__dst + 1);
  v126 = v125 + 6;
  if (v125 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v126 >= 0x17)
  {
    v128 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v126 | 7) != 0x17)
      v128 = v126 | 7;
    v129 = v128 + 1;
    v127 = (__int128 *)operator new(v128 + 1);
    *((_QWORD *)&v309 + 1) = v125 + 6;
    v310 = v129 | 0x8000000000000000;
    *(_QWORD *)&v309 = v127;
  }
  else
  {
    v310 = 0;
    v309 = 0uLL;
    v127 = &v309;
    HIBYTE(v310) = v125 + 6;
    if (!v125)
      goto LABEL_329;
  }
  if (v124 >= 0)
    v130 = &__dst;
  else
    v130 = (__int128 *)__dst;
  memmove(v127, v130, v125);
LABEL_329:
  strcpy((char *)v127 + v125, ".Error");
  *(_WORD *)&v312[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v313) = 0;
  v131 = v301;
  if ((unint64_t)v301 >= v302)
  {
    v301 = sub_2236285DC((char **)&v300, (uint64_t)&v308);
    if (SHIBYTE(v313) < 0)
    {
      operator delete(*(void **)&v312[8]);
      if ((v312[7] & 0x80000000) == 0)
        goto LABEL_336;
    }
    else if ((v312[7] & 0x80000000) == 0)
    {
      goto LABEL_336;
    }
LABEL_331:
    operator delete((void *)__p);
    if (SHIBYTE(v310) < 0)
      goto LABEL_332;
LABEL_337:
    v136 = *(std::__shared_weak_count **)(v102 + 136);
    if (v136)
      goto LABEL_338;
LABEL_341:
    v303 = 0;
    v304 = 0;
    v305 = 0;
    v140 = 0;
  }
  else
  {
    v132 = v308;
    *((_DWORD *)v301 + 2) = DWORD2(v308);
    *(_QWORD *)v131 = v132;
    v133 = v309;
    *((_QWORD *)v131 + 4) = v310;
    *((_OWORD *)v131 + 1) = v133;
    v310 = 0;
    v309 = 0uLL;
    v134 = *(_QWORD *)v312;
    *(_OWORD *)(v131 + 40) = __p;
    *((_QWORD *)v131 + 7) = v134;
    *(_QWORD *)v312 = 0;
    __p = 0uLL;
    v135 = *(_OWORD *)&v312[8];
    *((_QWORD *)v131 + 10) = v313;
    *((_OWORD *)v131 + 4) = v135;
    *(_QWORD *)&v312[8] = 0;
    *(_QWORD *)&v312[16] = 0;
    v313 = 0;
    v301 = v131 + 88;
    if ((v312[7] & 0x80000000) != 0)
      goto LABEL_331;
LABEL_336:
    if ((SHIBYTE(v310) & 0x80000000) == 0)
      goto LABEL_337;
LABEL_332:
    operator delete((void *)v309);
    v136 = *(std::__shared_weak_count **)(v102 + 136);
    if (!v136)
      goto LABEL_341;
LABEL_338:
    v137 = std::__shared_weak_count::lock(v136);
    *((_QWORD *)&v308 + 1) = v137;
    if (!v137)
      goto LABEL_341;
    v138 = v137;
    v139 = *(_QWORD *)(v102 + 128);
    *(_QWORD *)&v308 = v139;
    if (v139)
    {
      (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v139 + 24))(&v303);
    }
    else
    {
      v303 = 0;
      v304 = 0;
      v305 = 0;
    }
    v141 = (unint64_t *)&v138->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (v142)
    {
      v140 = v303;
      v143 = v304;
      if (v303 != v304)
        goto LABEL_352;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
      v140 = v303;
      v143 = v304;
      if (v303 != v304)
      {
        do
        {
LABEL_352:
          *(_QWORD *)&v308 = v104;
          *((_QWORD *)&v308 + 1) = *v140;
          v310 = 0;
          v309 = 0uLL;
          v144 = v298;
          if ((unint64_t)v298 < v299)
          {
            *(_OWORD *)v298 = v308;
            *((_QWORD *)v144 + 3) = 0;
            *((_QWORD *)v144 + 4) = 0;
            *((_QWORD *)v144 + 2) = 0;
            v298 = v144 + 40;
          }
          else
          {
            v298 = sub_223628FA4(&v297, (uint64_t)&v308);
            if (SHIBYTE(v310) < 0)
              operator delete((void *)v309);
          }
          ++v140;
        }
        while (v140 != v143);
        v140 = v303;
      }
    }
  }
  if (v140)
  {
    v304 = v140;
    operator delete(v140);
  }
  v145 = *(std::__shared_weak_count **)(v102 + 136);
  if (v145 && (v146 = std::__shared_weak_count::lock(v145), (*((_QWORD *)&v308 + 1) = v146) != 0))
  {
    v147 = v146;
    v148 = *(_QWORD *)(v102 + 128);
    *(_QWORD *)&v308 = v148;
    if (v148)
    {
      (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v148 + 32))(&v303);
    }
    else
    {
      v303 = 0;
      v304 = 0;
      v305 = 0;
    }
    v150 = (unint64_t *)&v147->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (v151)
    {
      v149 = v303;
      v152 = v304;
      if (v303 != v304)
      {
LABEL_370:
        v153 = v104 + 1;
        do
        {
          *(_QWORD *)&v308 = v153;
          *((_QWORD *)&v308 + 1) = *v149;
          v310 = 0;
          v309 = 0uLL;
          v154 = v298;
          if ((unint64_t)v298 < v299)
          {
            *(_OWORD *)v298 = v308;
            *((_QWORD *)v154 + 3) = 0;
            *((_QWORD *)v154 + 4) = 0;
            *((_QWORD *)v154 + 2) = 0;
            v298 = v154 + 40;
          }
          else
          {
            v298 = sub_223628FA4(&v297, (uint64_t)&v308);
            if (SHIBYTE(v310) < 0)
              operator delete((void *)v309);
          }
          ++v149;
        }
        while (v149 != v152);
        v149 = v303;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
      v149 = v303;
      v152 = v304;
      if (v303 != v304)
        goto LABEL_370;
    }
  }
  else
  {
    v303 = 0;
    v304 = 0;
    v305 = 0;
    v149 = 0;
  }
  if (v149)
  {
    v304 = v149;
    operator delete(v149);
  }
  if (SHIBYTE(v307) < 0)
  {
    operator delete((void *)v306);
    if (SHIBYTE(v315) < 0)
      goto LABEL_385;
LABEL_381:
    if ((SHIBYTE(v317) & 0x80000000) == 0)
      goto LABEL_382;
LABEL_386:
    operator delete((void *)__dst);
    if (*(char *)(v102 + 199) < 0)
      goto LABEL_387;
LABEL_383:
    __dst = *(_OWORD *)(v102 + 176);
    v317 = *(_QWORD *)(v102 + 192);
  }
  else
  {
    if ((SHIBYTE(v315) & 0x80000000) == 0)
      goto LABEL_381;
LABEL_385:
    operator delete((void *)v314);
    if (SHIBYTE(v317) < 0)
      goto LABEL_386;
LABEL_382:
    if ((*(char *)(v102 + 199) & 0x80000000) == 0)
      goto LABEL_383;
LABEL_387:
    sub_223197FA4(&__dst, *(void **)(v102 + 176), *(_QWORD *)(v102 + 184));
  }
  v155 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v102 + 264) + 48))(*(_QWORD *)(v102 + 264));
  sub_22363D7E4();
  if (byte_25579323F < 0)
  {
    sub_223197FA4(&v314, (void *)xmmword_255793228, *((unint64_t *)&xmmword_255793228 + 1));
  }
  else
  {
    v314 = xmmword_255793228;
    v315 = unk_255793238;
  }
  v156 = HIBYTE(v315);
  if (v315 >= 0)
  {
    v157 = &v314;
  }
  else
  {
    v156 = *((_QWORD *)&v314 + 1);
    v157 = (__int128 *)v314;
  }
  if (v156 >= 4)
  {
    v158 = (char *)v157 + v156;
    v159 = v157;
    do
    {
      v160 = (char *)memchr(v159, 118, v156 - 3);
      if (!v160)
        break;
      if (*(_DWORD *)v160 == 1684631414)
      {
        if (v160 == v158 || v160 - (char *)v157 == -1)
          break;
        *(_QWORD *)&v308 = v155;
        DWORD2(v308) = 4;
        if (SHIBYTE(v317) < 0)
        {
          sub_223197FA4(&v309, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v309 = __dst;
          v310 = v317;
        }
        if (*(char *)(v102 + 223) < 0)
        {
          sub_223197FA4(&__p, *(void **)(v102 + 200), *(_QWORD *)(v102 + 208));
        }
        else
        {
          __p = *(_OWORD *)(v102 + 200);
          *(_QWORD *)v312 = *(_QWORD *)(v102 + 216);
        }
        sub_223650834();
        if (byte_255793F8F < 0)
        {
          sub_223197FA4(&v312[8], (void *)xmmword_255793F78, *((unint64_t *)&xmmword_255793F78 + 1));
        }
        else
        {
          *(_OWORD *)&v312[8] = xmmword_255793F78;
          v313 = unk_255793F88;
        }
        v161 = v301;
        if ((unint64_t)v301 < v302)
          goto LABEL_414;
        goto LABEL_417;
      }
      v159 = (__int128 *)(v160 + 1);
      v156 = v158 - (char *)v159;
    }
    while (v158 - (char *)v159 >= 4);
  }
  *(_QWORD *)&v308 = v155;
  DWORD2(v308) = 2;
  if (SHIBYTE(v317) < 0)
  {
    sub_223197FA4(&v309, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v309 = __dst;
    v310 = v317;
  }
  if (*(char *)(v102 + 223) < 0)
  {
    sub_223197FA4(&__p, *(void **)(v102 + 200), *(_QWORD *)(v102 + 208));
  }
  else
  {
    __p = *(_OWORD *)(v102 + 200);
    *(_QWORD *)v312 = *(_QWORD *)(v102 + 216);
  }
  sub_223650834();
  if (byte_255793F8F < 0)
  {
    sub_223197FA4(&v312[8], (void *)xmmword_255793F78, *((unint64_t *)&xmmword_255793F78 + 1));
  }
  else
  {
    *(_OWORD *)&v312[8] = xmmword_255793F78;
    v313 = unk_255793F88;
  }
  v161 = v301;
  if ((unint64_t)v301 < v302)
  {
LABEL_414:
    v162 = v308;
    *((_DWORD *)v161 + 2) = DWORD2(v308);
    *(_QWORD *)v161 = v162;
    v163 = v309;
    *((_QWORD *)v161 + 4) = v310;
    *((_OWORD *)v161 + 1) = v163;
    v310 = 0;
    v309 = 0uLL;
    v164 = *(_QWORD *)v312;
    *(_OWORD *)(v161 + 40) = __p;
    *((_QWORD *)v161 + 7) = v164;
    *(_QWORD *)v312 = 0;
    __p = 0uLL;
    v165 = *(_OWORD *)&v312[8];
    *((_QWORD *)v161 + 10) = v313;
    *((_OWORD *)v161 + 4) = v165;
    *(_QWORD *)&v312[8] = 0;
    *(_QWORD *)&v312[16] = 0;
    v313 = 0;
    v301 = v161 + 88;
    if ((v312[7] & 0x80000000) != 0)
      goto LABEL_415;
LABEL_419:
    if ((SHIBYTE(v310) & 0x80000000) == 0)
      goto LABEL_420;
LABEL_416:
    operator delete((void *)v309);
    goto LABEL_420;
  }
LABEL_417:
  v301 = sub_2236285DC((char **)&v300, (uint64_t)&v308);
  if (SHIBYTE(v313) < 0)
  {
    operator delete(*(void **)&v312[8]);
    if ((v312[7] & 0x80000000) == 0)
      goto LABEL_419;
  }
  else if ((v312[7] & 0x80000000) == 0)
  {
    goto LABEL_419;
  }
LABEL_415:
  operator delete((void *)__p);
  if (SHIBYTE(v310) < 0)
    goto LABEL_416;
LABEL_420:
  sub_223627E68();
  if (byte_2540CBC48[23] < 0)
  {
    sub_223197FA4(&v306, *(void **)byte_2540CBC48, *(unint64_t *)&byte_2540CBC48[8]);
  }
  else
  {
    v306 = *(_OWORD *)byte_2540CBC48;
    v307 = *(_QWORD *)&byte_2540CBC48[16];
  }
  v166 = HIBYTE(v307);
  if (v307 >= 0)
  {
    v167 = &v306;
  }
  else
  {
    v166 = *((_QWORD *)&v306 + 1);
    v167 = (__int128 *)v306;
  }
  if (v166 >= 18)
  {
    v168 = (char *)v167 + v166;
    v169 = v167;
    do
    {
      v170 = (char *)memchr(v169, 67, v166 - 17);
      if (!v170)
        break;
      if (*(_QWORD *)v170 == 0x456C656E6E616843
        && *((_QWORD *)v170 + 1) == 0x696F763C726F7272
        && *((_WORD *)v170 + 8) == 15972)
      {
        if (v170 != v168 && v170 - (char *)v167 != -1)
          goto LABEL_464;
        break;
      }
      v169 = (__int128 *)(v170 + 1);
      v166 = v168 - (char *)v169;
    }
    while (v168 - (char *)v169 >= 18);
  }
  *(_QWORD *)&v308 = v155 + 1;
  DWORD2(v308) = 3;
  v173 = SHIBYTE(v317);
  if (v317 >= 0)
    v174 = HIBYTE(v317);
  else
    v174 = *((_QWORD *)&__dst + 1);
  v175 = v174 + 6;
  if (v174 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v175 >= 0x17)
  {
    v177 = (v175 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v175 | 7) != 0x17)
      v177 = v175 | 7;
    v178 = v177 + 1;
    v176 = (__int128 *)operator new(v177 + 1);
    *((_QWORD *)&v309 + 1) = v174 + 6;
    v310 = v178 | 0x8000000000000000;
    *(_QWORD *)&v309 = v176;
  }
  else
  {
    v310 = 0;
    v309 = 0uLL;
    v176 = &v309;
    HIBYTE(v310) = v174 + 6;
    if (!v174)
      goto LABEL_456;
  }
  if (v173 >= 0)
    v179 = &__dst;
  else
    v179 = (__int128 *)__dst;
  memmove(v176, v179, v174);
LABEL_456:
  strcpy((char *)v176 + v174, ".Error");
  *(_WORD *)&v312[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v313) = 0;
  v180 = v301;
  if ((unint64_t)v301 >= v302)
  {
    v301 = sub_2236285DC((char **)&v300, (uint64_t)&v308);
    if (SHIBYTE(v313) < 0)
    {
      operator delete(*(void **)&v312[8]);
      if ((v312[7] & 0x80000000) == 0)
        goto LABEL_463;
    }
    else if ((v312[7] & 0x80000000) == 0)
    {
      goto LABEL_463;
    }
LABEL_458:
    operator delete((void *)__p);
    if (SHIBYTE(v310) < 0)
      goto LABEL_459;
LABEL_464:
    v185 = *(std::__shared_weak_count **)(v102 + 304);
    if (v185)
      goto LABEL_465;
LABEL_468:
    v303 = 0;
    v304 = 0;
    v305 = 0;
    v189 = 0;
  }
  else
  {
    v181 = v308;
    *((_DWORD *)v301 + 2) = DWORD2(v308);
    *(_QWORD *)v180 = v181;
    v182 = v309;
    *((_QWORD *)v180 + 4) = v310;
    *((_OWORD *)v180 + 1) = v182;
    v310 = 0;
    v309 = 0uLL;
    v183 = *(_QWORD *)v312;
    *(_OWORD *)(v180 + 40) = __p;
    *((_QWORD *)v180 + 7) = v183;
    *(_QWORD *)v312 = 0;
    __p = 0uLL;
    v184 = *(_OWORD *)&v312[8];
    *((_QWORD *)v180 + 10) = v313;
    *((_OWORD *)v180 + 4) = v184;
    *(_QWORD *)&v312[8] = 0;
    *(_QWORD *)&v312[16] = 0;
    v313 = 0;
    v301 = v180 + 88;
    if ((v312[7] & 0x80000000) != 0)
      goto LABEL_458;
LABEL_463:
    if ((SHIBYTE(v310) & 0x80000000) == 0)
      goto LABEL_464;
LABEL_459:
    operator delete((void *)v309);
    v185 = *(std::__shared_weak_count **)(v102 + 304);
    if (!v185)
      goto LABEL_468;
LABEL_465:
    v186 = std::__shared_weak_count::lock(v185);
    *((_QWORD *)&v308 + 1) = v186;
    if (!v186)
      goto LABEL_468;
    v187 = v186;
    v188 = *(_QWORD *)(v102 + 296);
    *(_QWORD *)&v308 = v188;
    if (v188)
    {
      (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v188 + 24))(&v303);
    }
    else
    {
      v303 = 0;
      v304 = 0;
      v305 = 0;
    }
    v190 = (unint64_t *)&v187->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (v191)
    {
      v189 = v303;
      v192 = v304;
      if (v303 != v304)
        goto LABEL_481;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
      v189 = v303;
      v192 = v304;
      if (v303 != v304)
      {
        do
        {
LABEL_481:
          *(_QWORD *)&v308 = v155;
          *((_QWORD *)&v308 + 1) = *v189;
          v310 = 0;
          v309 = 0uLL;
          v193 = v298;
          if ((unint64_t)v298 < v299)
          {
            *(_OWORD *)v298 = v308;
            *((_QWORD *)v193 + 3) = 0;
            *((_QWORD *)v193 + 4) = 0;
            *((_QWORD *)v193 + 2) = 0;
            v298 = v193 + 40;
          }
          else
          {
            v298 = sub_223628FA4(&v297, (uint64_t)&v308);
            if (SHIBYTE(v310) < 0)
              operator delete((void *)v309);
          }
          ++v189;
        }
        while (v189 != v192);
        v189 = v303;
      }
    }
  }
  if (v189)
  {
    v304 = v189;
    operator delete(v189);
  }
  v194 = *(std::__shared_weak_count **)(v102 + 304);
  if (v194 && (v195 = std::__shared_weak_count::lock(v194), (*((_QWORD *)&v308 + 1) = v195) != 0))
  {
    v196 = v195;
    v197 = *(_QWORD *)(v102 + 296);
    *(_QWORD *)&v308 = v197;
    if (v197)
    {
      (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v197 + 32))(&v303);
    }
    else
    {
      v303 = 0;
      v304 = 0;
      v305 = 0;
    }
    v199 = (unint64_t *)&v196->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (v200)
    {
      v198 = v303;
      v201 = v304;
      if (v303 != v304)
      {
LABEL_499:
        v202 = v155 + 1;
        do
        {
          *(_QWORD *)&v308 = v202;
          *((_QWORD *)&v308 + 1) = *v198;
          v310 = 0;
          v309 = 0uLL;
          v203 = v298;
          if ((unint64_t)v298 < v299)
          {
            *(_OWORD *)v298 = v308;
            *((_QWORD *)v203 + 3) = 0;
            *((_QWORD *)v203 + 4) = 0;
            *((_QWORD *)v203 + 2) = 0;
            v298 = v203 + 40;
          }
          else
          {
            v298 = sub_223628FA4(&v297, (uint64_t)&v308);
            if (SHIBYTE(v310) < 0)
              operator delete((void *)v309);
          }
          ++v198;
        }
        while (v198 != v201);
        v198 = v303;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
      v198 = v303;
      v201 = v304;
      if (v303 != v304)
        goto LABEL_499;
    }
  }
  else
  {
    v303 = 0;
    v304 = 0;
    v305 = 0;
    v198 = 0;
  }
  if (v198)
  {
    v304 = v198;
    operator delete(v198);
  }
  if (SHIBYTE(v307) < 0)
  {
    operator delete((void *)v306);
    if (SHIBYTE(v315) < 0)
      goto LABEL_514;
LABEL_510:
    if ((SHIBYTE(v317) & 0x80000000) == 0)
      goto LABEL_511;
LABEL_515:
    operator delete((void *)__dst);
    if (*(char *)(v102 + 367) < 0)
      goto LABEL_516;
LABEL_512:
    __dst = *(_OWORD *)(v102 + 344);
    v317 = *(_QWORD *)(v102 + 360);
  }
  else
  {
    if ((SHIBYTE(v315) & 0x80000000) == 0)
      goto LABEL_510;
LABEL_514:
    operator delete((void *)v314);
    if (SHIBYTE(v317) < 0)
      goto LABEL_515;
LABEL_511:
    if ((*(char *)(v102 + 367) & 0x80000000) == 0)
      goto LABEL_512;
LABEL_516:
    sub_223197FA4(&__dst, *(void **)(v102 + 344), *(_QWORD *)(v102 + 352));
  }
  v204 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v102 + 432) + 48))(*(_QWORD *)(v102 + 432));
  sub_22363D7E4();
  if (byte_25579323F < 0)
  {
    sub_223197FA4(&v314, (void *)xmmword_255793228, *((unint64_t *)&xmmword_255793228 + 1));
  }
  else
  {
    v314 = xmmword_255793228;
    v315 = unk_255793238;
  }
  v205 = HIBYTE(v315);
  if (v315 >= 0)
  {
    v206 = &v314;
  }
  else
  {
    v205 = *((_QWORD *)&v314 + 1);
    v206 = (__int128 *)v314;
  }
  if (v205 >= 4)
  {
    v207 = (char *)v206 + v205;
    v208 = v206;
    do
    {
      v209 = (char *)memchr(v208, 118, v205 - 3);
      if (!v209)
        break;
      if (*(_DWORD *)v209 == 1684631414)
      {
        if (v209 == v207 || v209 - (char *)v206 == -1)
          break;
        *(_QWORD *)&v308 = v204;
        DWORD2(v308) = 4;
        if (SHIBYTE(v317) < 0)
        {
          sub_223197FA4(&v309, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v309 = __dst;
          v310 = v317;
        }
        if (*(char *)(v102 + 391) < 0)
        {
          sub_223197FA4(&__p, *(void **)(v102 + 368), *(_QWORD *)(v102 + 376));
        }
        else
        {
          __p = *(_OWORD *)(v102 + 368);
          *(_QWORD *)v312 = *(_QWORD *)(v102 + 384);
        }
        sub_223655CB4();
        if (byte_255794B8F < 0)
        {
          sub_223197FA4(&v312[8], (void *)xmmword_255794B78, *((unint64_t *)&xmmword_255794B78 + 1));
        }
        else
        {
          *(_OWORD *)&v312[8] = xmmword_255794B78;
          v313 = unk_255794B88;
        }
        v210 = v301;
        if ((unint64_t)v301 < v302)
          goto LABEL_543;
        goto LABEL_546;
      }
      v208 = (__int128 *)(v209 + 1);
      v205 = v207 - (char *)v208;
    }
    while (v207 - (char *)v208 >= 4);
  }
  *(_QWORD *)&v308 = v204;
  DWORD2(v308) = 2;
  if (SHIBYTE(v317) < 0)
  {
    sub_223197FA4(&v309, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v309 = __dst;
    v310 = v317;
  }
  if (*(char *)(v102 + 391) < 0)
  {
    sub_223197FA4(&__p, *(void **)(v102 + 368), *(_QWORD *)(v102 + 376));
  }
  else
  {
    __p = *(_OWORD *)(v102 + 368);
    *(_QWORD *)v312 = *(_QWORD *)(v102 + 384);
  }
  sub_223655CB4();
  if (byte_255794B8F < 0)
  {
    sub_223197FA4(&v312[8], (void *)xmmword_255794B78, *((unint64_t *)&xmmword_255794B78 + 1));
  }
  else
  {
    *(_OWORD *)&v312[8] = xmmword_255794B78;
    v313 = unk_255794B88;
  }
  v210 = v301;
  if ((unint64_t)v301 < v302)
  {
LABEL_543:
    v211 = v308;
    *((_DWORD *)v210 + 2) = DWORD2(v308);
    *(_QWORD *)v210 = v211;
    v212 = v309;
    *((_QWORD *)v210 + 4) = v310;
    *((_OWORD *)v210 + 1) = v212;
    v310 = 0;
    v309 = 0uLL;
    v213 = *(_QWORD *)v312;
    *(_OWORD *)(v210 + 40) = __p;
    *((_QWORD *)v210 + 7) = v213;
    *(_QWORD *)v312 = 0;
    __p = 0uLL;
    v214 = *(_OWORD *)&v312[8];
    *((_QWORD *)v210 + 10) = v313;
    *((_OWORD *)v210 + 4) = v214;
    *(_QWORD *)&v312[8] = 0;
    *(_QWORD *)&v312[16] = 0;
    v313 = 0;
    v301 = v210 + 88;
    if ((v312[7] & 0x80000000) != 0)
      goto LABEL_544;
LABEL_548:
    if ((SHIBYTE(v310) & 0x80000000) == 0)
      goto LABEL_549;
LABEL_545:
    operator delete((void *)v309);
    goto LABEL_549;
  }
LABEL_546:
  v301 = sub_2236285DC((char **)&v300, (uint64_t)&v308);
  if (SHIBYTE(v313) < 0)
  {
    operator delete(*(void **)&v312[8]);
    if ((v312[7] & 0x80000000) == 0)
      goto LABEL_548;
  }
  else if ((v312[7] & 0x80000000) == 0)
  {
    goto LABEL_548;
  }
LABEL_544:
  operator delete((void *)__p);
  if (SHIBYTE(v310) < 0)
    goto LABEL_545;
LABEL_549:
  sub_223627E68();
  if (byte_2540CBC48[23] < 0)
  {
    sub_223197FA4(&v306, *(void **)byte_2540CBC48, *(unint64_t *)&byte_2540CBC48[8]);
  }
  else
  {
    v306 = *(_OWORD *)byte_2540CBC48;
    v307 = *(_QWORD *)&byte_2540CBC48[16];
  }
  v215 = HIBYTE(v307);
  if (v307 >= 0)
  {
    v216 = &v306;
  }
  else
  {
    v215 = *((_QWORD *)&v306 + 1);
    v216 = (__int128 *)v306;
  }
  if (v215 >= 18)
  {
    v217 = (char *)v216 + v215;
    v218 = v216;
    do
    {
      v219 = (char *)memchr(v218, 67, v215 - 17);
      if (!v219)
        break;
      if (*(_QWORD *)v219 == 0x456C656E6E616843
        && *((_QWORD *)v219 + 1) == 0x696F763C726F7272
        && *((_WORD *)v219 + 8) == 15972)
      {
        if (v219 != v217 && v219 - (char *)v216 != -1)
          goto LABEL_593;
        break;
      }
      v218 = (__int128 *)(v219 + 1);
      v215 = v217 - (char *)v218;
    }
    while (v217 - (char *)v218 >= 18);
  }
  *(_QWORD *)&v308 = v204 + 1;
  DWORD2(v308) = 3;
  v222 = SHIBYTE(v317);
  if (v317 >= 0)
    v223 = HIBYTE(v317);
  else
    v223 = *((_QWORD *)&__dst + 1);
  v224 = v223 + 6;
  if (v223 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v224 >= 0x17)
  {
    v226 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v224 | 7) != 0x17)
      v226 = v224 | 7;
    v227 = v226 + 1;
    v225 = (__int128 *)operator new(v226 + 1);
    *((_QWORD *)&v309 + 1) = v223 + 6;
    v310 = v227 | 0x8000000000000000;
    *(_QWORD *)&v309 = v225;
  }
  else
  {
    v310 = 0;
    v309 = 0uLL;
    v225 = &v309;
    HIBYTE(v310) = v223 + 6;
    if (!v223)
      goto LABEL_585;
  }
  if (v222 >= 0)
    v228 = &__dst;
  else
    v228 = (__int128 *)__dst;
  memmove(v225, v228, v223);
LABEL_585:
  strcpy((char *)v225 + v223, ".Error");
  *(_WORD *)&v312[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v313) = 0;
  v229 = v301;
  if ((unint64_t)v301 >= v302)
  {
    v301 = sub_2236285DC((char **)&v300, (uint64_t)&v308);
    if (SHIBYTE(v313) < 0)
    {
      operator delete(*(void **)&v312[8]);
      if ((v312[7] & 0x80000000) == 0)
        goto LABEL_592;
    }
    else if ((v312[7] & 0x80000000) == 0)
    {
      goto LABEL_592;
    }
LABEL_587:
    operator delete((void *)__p);
    if (SHIBYTE(v310) < 0)
      goto LABEL_588;
LABEL_593:
    v234 = *(std::__shared_weak_count **)(v102 + 472);
    if (v234)
      goto LABEL_594;
LABEL_597:
    v303 = 0;
    v304 = 0;
    v305 = 0;
    v238 = 0;
  }
  else
  {
    v230 = v308;
    *((_DWORD *)v301 + 2) = DWORD2(v308);
    *(_QWORD *)v229 = v230;
    v231 = v309;
    *((_QWORD *)v229 + 4) = v310;
    *((_OWORD *)v229 + 1) = v231;
    v310 = 0;
    v309 = 0uLL;
    v232 = *(_QWORD *)v312;
    *(_OWORD *)(v229 + 40) = __p;
    *((_QWORD *)v229 + 7) = v232;
    *(_QWORD *)v312 = 0;
    __p = 0uLL;
    v233 = *(_OWORD *)&v312[8];
    *((_QWORD *)v229 + 10) = v313;
    *((_OWORD *)v229 + 4) = v233;
    *(_QWORD *)&v312[8] = 0;
    *(_QWORD *)&v312[16] = 0;
    v313 = 0;
    v301 = v229 + 88;
    if ((v312[7] & 0x80000000) != 0)
      goto LABEL_587;
LABEL_592:
    if ((SHIBYTE(v310) & 0x80000000) == 0)
      goto LABEL_593;
LABEL_588:
    operator delete((void *)v309);
    v234 = *(std::__shared_weak_count **)(v102 + 472);
    if (!v234)
      goto LABEL_597;
LABEL_594:
    v235 = std::__shared_weak_count::lock(v234);
    *((_QWORD *)&v308 + 1) = v235;
    if (!v235)
      goto LABEL_597;
    v236 = v235;
    v237 = *(_QWORD *)(v102 + 464);
    *(_QWORD *)&v308 = v237;
    if (v237)
    {
      (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v237 + 24))(&v303);
    }
    else
    {
      v303 = 0;
      v304 = 0;
      v305 = 0;
    }
    v239 = (unint64_t *)&v236->__shared_owners_;
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (v240)
    {
      v238 = v303;
      v241 = v304;
      if (v303 != v304)
        goto LABEL_610;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v236);
      v238 = v303;
      v241 = v304;
      if (v303 != v304)
      {
        do
        {
LABEL_610:
          *(_QWORD *)&v308 = v204;
          *((_QWORD *)&v308 + 1) = *v238;
          v310 = 0;
          v309 = 0uLL;
          v242 = v298;
          if ((unint64_t)v298 < v299)
          {
            *(_OWORD *)v298 = v308;
            *((_QWORD *)v242 + 3) = 0;
            *((_QWORD *)v242 + 4) = 0;
            *((_QWORD *)v242 + 2) = 0;
            v298 = v242 + 40;
          }
          else
          {
            v298 = sub_223628FA4(&v297, (uint64_t)&v308);
            if (SHIBYTE(v310) < 0)
              operator delete((void *)v309);
          }
          ++v238;
        }
        while (v238 != v241);
        v238 = v303;
      }
    }
  }
  if (v238)
  {
    v304 = v238;
    operator delete(v238);
  }
  v243 = *(std::__shared_weak_count **)(v102 + 472);
  if (v243 && (v244 = std::__shared_weak_count::lock(v243), (*((_QWORD *)&v308 + 1) = v244) != 0))
  {
    v245 = v244;
    v246 = *(_QWORD *)(v102 + 464);
    *(_QWORD *)&v308 = v246;
    if (v246)
    {
      (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v246 + 32))(&v303);
    }
    else
    {
      v303 = 0;
      v304 = 0;
      v305 = 0;
    }
    v250 = (unint64_t *)&v245->__shared_owners_;
    v247 = v284;
    v248 = a1;
    do
      v251 = __ldaxr(v250);
    while (__stlxr(v251 - 1, v250));
    if (v251)
    {
      v249 = v303;
      v252 = v304;
      if (v303 != v304)
      {
LABEL_628:
        v253 = v204 + 1;
        do
        {
          *(_QWORD *)&v308 = v253;
          *((_QWORD *)&v308 + 1) = *v249;
          v310 = 0;
          v309 = 0uLL;
          v254 = v298;
          if ((unint64_t)v298 < v299)
          {
            *(_OWORD *)v298 = v308;
            *((_QWORD *)v254 + 3) = 0;
            *((_QWORD *)v254 + 4) = 0;
            *((_QWORD *)v254 + 2) = 0;
            v298 = v254 + 40;
          }
          else
          {
            v298 = sub_223628FA4(&v297, (uint64_t)&v308);
            if (SHIBYTE(v310) < 0)
              operator delete((void *)v309);
          }
          ++v249;
        }
        while (v249 != v252);
        v249 = v303;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
      v249 = v303;
      v252 = v304;
      if (v303 != v304)
        goto LABEL_628;
    }
  }
  else
  {
    v303 = 0;
    v304 = 0;
    v305 = 0;
    v247 = v284;
    v248 = a1;
    v249 = 0;
  }
  if (v249)
  {
    v304 = v249;
    operator delete(v249);
  }
  if (SHIBYTE(v307) < 0)
  {
    operator delete((void *)v306);
    if (SHIBYTE(v315) < 0)
      goto LABEL_643;
LABEL_639:
    if ((SHIBYTE(v317) & 0x80000000) == 0)
      goto LABEL_640;
LABEL_644:
    operator delete((void *)__dst);
    if (*(char *)(v247 + 31) < 0)
      goto LABEL_645;
LABEL_641:
    v255 = *(_OWORD *)(v247 + 8);
    *(_QWORD *)&v309 = *(_QWORD *)(v247 + 24);
    v308 = v255;
  }
  else
  {
    if ((SHIBYTE(v315) & 0x80000000) == 0)
      goto LABEL_639;
LABEL_643:
    operator delete((void *)v314);
    if (SHIBYTE(v317) < 0)
      goto LABEL_644;
LABEL_640:
    if ((*(char *)(v247 + 31) & 0x80000000) == 0)
      goto LABEL_641;
LABEL_645:
    sub_223197FA4(&v308, *(void **)(v247 + 8), *(_QWORD *)(v247 + 16));
  }
  v256 = *(_QWORD *)(v247 + 56) != 0;
  if (*(char *)(v247 + 55) < 0)
  {
    sub_223197FA4(&__dst, *(void **)(v247 + 32), *(_QWORD *)(v247 + 40));
  }
  else
  {
    __dst = *(_OWORD *)(v247 + 32);
    v317 = *(_QWORD *)(v247 + 48);
  }
  sub_223629100((uint64_t)&v286, &v308, v256, (uint64_t *)&v300, (uint64_t *)&v297, &__dst);
  if (SHIBYTE(v317) < 0)
  {
    operator delete((void *)__dst);
    if (SBYTE7(v309) < 0)
      goto LABEL_662;
LABEL_651:
    v257 = (char *)v297;
    if (v297)
      goto LABEL_652;
LABEL_663:
    v259 = (char *)v300;
    if (v300)
      goto LABEL_664;
LABEL_654:
    v260 = (char *)v248[1];
    if (v260 >= v248[2])
      goto LABEL_666;
    goto LABEL_655;
  }
  if ((SBYTE7(v309) & 0x80000000) == 0)
    goto LABEL_651;
LABEL_662:
  operator delete((void *)v308);
  v257 = (char *)v297;
  if (!v297)
    goto LABEL_663;
LABEL_652:
  v258 = v298;
  if (v298 != v257)
  {
    do
    {
      if (*(v258 - 1) < 0)
        operator delete(*((void **)v258 - 3));
      v258 -= 40;
    }
    while (v258 != v257);
    v298 = v257;
    operator delete(v297);
    v259 = (char *)v300;
    if (v300)
      goto LABEL_664;
    goto LABEL_654;
  }
  v298 = v257;
  operator delete(v257);
  v259 = (char *)v300;
  if (!v300)
    goto LABEL_654;
LABEL_664:
  v264 = v301;
  if (v301 == v259)
  {
    v301 = v259;
    operator delete(v259);
    v260 = (char *)v248[1];
    if (v260 >= v248[2])
      goto LABEL_666;
    goto LABEL_655;
  }
  while (2)
  {
    while (2)
    {
      if (*(v264 - 1) < 0)
      {
        operator delete(*((void **)v264 - 3));
        if ((*(v264 - 25) & 0x80000000) == 0)
          goto LABEL_674;
LABEL_668:
        operator delete(*((void **)v264 - 6));
        if (*(v264 - 49) < 0)
          goto LABEL_675;
LABEL_669:
        v264 -= 88;
        if (v264 == v259)
          goto LABEL_676;
        continue;
      }
      break;
    }
    if (*(v264 - 25) < 0)
      goto LABEL_668;
LABEL_674:
    if ((*(v264 - 49) & 0x80000000) == 0)
      goto LABEL_669;
LABEL_675:
    operator delete(*((void **)v264 - 9));
    v264 -= 88;
    if (v264 != v259)
      continue;
    break;
  }
LABEL_676:
  v301 = v259;
  operator delete(v300);
  v260 = (char *)v248[1];
  if (v260 >= v248[2])
  {
LABEL_666:
    v263 = sub_2236208C0(v248, (uint64_t)&v286);
    goto LABEL_667;
  }
LABEL_655:
  v261 = v286;
  *((_QWORD *)v260 + 2) = v287;
  *(_OWORD *)v260 = v261;
  v286 = 0uLL;
  v262 = v289;
  *(_OWORD *)(v260 + 24) = v288;
  *((_QWORD *)v260 + 5) = v262;
  v287 = 0;
  v288 = 0uLL;
  v289 = 0;
  *((_DWORD *)v260 + 12) = v290;
  *((_QWORD *)v260 + 7) = 0;
  *((_QWORD *)v260 + 8) = 0;
  *((_QWORD *)v260 + 9) = 0;
  *((_QWORD *)v260 + 10) = 0;
  *(_OWORD *)(v260 + 56) = v291;
  *((_QWORD *)v260 + 9) = v292;
  v291 = 0uLL;
  *((_QWORD *)v260 + 11) = 0;
  *((_QWORD *)v260 + 12) = 0;
  *((_OWORD *)v260 + 5) = v293;
  *((_QWORD *)v260 + 12) = v294;
  *((_QWORD *)v260 + 13) = 0;
  v292 = 0;
  v293 = 0uLL;
  v294 = 0;
  *((_QWORD *)v260 + 14) = 0;
  *((_QWORD *)v260 + 15) = 0;
  *(_OWORD *)(v260 + 104) = v295;
  *((_QWORD *)v260 + 15) = v296;
  v295 = 0uLL;
  v296 = 0;
  v263 = v260 + 128;
LABEL_667:
  v248[1] = v263;
  return sub_223620AC4((uint64_t)&v286);
}

void sub_22361114C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;

  __cxa_guard_abort(&qword_2540CBAD8);
  if (*(char *)(v57 - 105) < 0)
    operator delete(*(void **)(v57 - 128));
  sub_223620C24(&a28);
  sub_223620C94(&a31);
  sub_22361923C(a11);
  _Unwind_Resume(a1);
}

void sub_22361157C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  char *v9;
  __int128 *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  void **v14;
  char *v15;
  void **v16;
  char *v17;
  int v20;
  size_t v21;
  unint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *p_dst;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  _QWORD *v39;
  char *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  char *v54;
  __int128 *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  void **v63;
  char *v64;
  void **v65;
  char *v66;
  int v69;
  size_t v70;
  unint64_t v71;
  __int128 *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  char *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  _QWORD *v94;
  unint64_t *v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  __int128 *v102;
  char *v103;
  __int128 *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  void **v112;
  char *v113;
  void **v114;
  char *v115;
  int v118;
  size_t v119;
  unint64_t v120;
  __int128 *v121;
  uint64_t v122;
  uint64_t v123;
  __int128 *v124;
  char *v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  __int128 v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  _QWORD *v134;
  unint64_t *v135;
  unint64_t v136;
  _QWORD *v137;
  char *v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  _QWORD *v143;
  unint64_t *v144;
  unint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  __int128 *v151;
  char *v152;
  __int128 *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  void **v161;
  char *v162;
  void **v163;
  char *v164;
  int v167;
  size_t v168;
  unint64_t v169;
  __int128 *v170;
  uint64_t v171;
  uint64_t v172;
  __int128 *v173;
  char *v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  __int128 v178;
  std::__shared_weak_count *v179;
  std::__shared_weak_count *v180;
  std::__shared_weak_count *v181;
  uint64_t v182;
  _QWORD *v183;
  unint64_t *v184;
  unint64_t v185;
  _QWORD *v186;
  char *v187;
  std::__shared_weak_count *v188;
  std::__shared_weak_count *v189;
  std::__shared_weak_count *v190;
  uint64_t v191;
  _QWORD *v192;
  unint64_t *v193;
  unint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  __int128 *v200;
  char *v201;
  __int128 *v202;
  char *v203;
  char *v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;
  void **v210;
  char *v211;
  void **v212;
  char *v213;
  int v216;
  size_t v217;
  unint64_t v218;
  __int128 *v219;
  uint64_t v220;
  uint64_t v221;
  __int128 *v222;
  char *v223;
  uint64_t v224;
  __int128 v225;
  uint64_t v226;
  __int128 v227;
  std::__shared_weak_count *v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count *v230;
  uint64_t v231;
  _QWORD *v232;
  unint64_t *v233;
  unint64_t v234;
  _QWORD *v235;
  char *v236;
  std::__shared_weak_count *v237;
  std::__shared_weak_count *v238;
  std::__shared_weak_count *v239;
  uint64_t v240;
  _QWORD *v241;
  unint64_t *v242;
  unint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  __int128 *v249;
  char *v250;
  __int128 *v251;
  char *v252;
  char *v253;
  uint64_t v254;
  __int128 v255;
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  void **v259;
  char *v260;
  void **v261;
  char *v262;
  int v265;
  size_t v266;
  unint64_t v267;
  __int128 *v268;
  uint64_t v269;
  uint64_t v270;
  __int128 *v271;
  char *v272;
  uint64_t v273;
  __int128 v274;
  uint64_t v275;
  __int128 v276;
  std::__shared_weak_count *v277;
  std::__shared_weak_count *v278;
  std::__shared_weak_count *v279;
  uint64_t v280;
  _QWORD *v281;
  unint64_t *v282;
  unint64_t v283;
  _QWORD *v284;
  char *v285;
  std::__shared_weak_count *v286;
  std::__shared_weak_count *v287;
  std::__shared_weak_count *v288;
  uint64_t v289;
  _QWORD *v290;
  unint64_t *v291;
  unint64_t v292;
  _QWORD *v293;
  char *v294;
  _BOOL4 v295;
  char *v296;
  char *v297;
  char *v298;
  char *v299;
  void *v300;
  __int128 v301;
  uint64_t v302;
  uint64_t v303;
  void *v304[2];
  uint64_t v305;
  void *v306[2];
  uint64_t v307;
  void *v308;
  char *v309;
  unint64_t v310;
  void *v311;
  char *v312;
  unint64_t v313;
  _QWORD *v314;
  _QWORD *v315;
  uint64_t v316;
  void *v317[2];
  uint64_t v318;
  __int128 v319;
  __int128 v320;
  unint64_t v321;
  __int128 __p;
  _BYTE v323[24];
  uint64_t v324;
  __int128 v325;
  uint64_t v326;
  __int128 __dst;
  int64_t v328;

  v311 = 0;
  v312 = 0;
  v313 = 0;
  v308 = 0;
  v309 = 0;
  v310 = 0;
  v4 = *(_QWORD *)(a2 + 72);
  if (v4)
  {
    v302 = a2;
    v303 = a1;
    if ((*(char *)(v4 + 31) & 0x80000000) == 0)
    {
LABEL_3:
      v5 = *(_OWORD *)(v4 + 8);
      v328 = *(_QWORD *)(v4 + 24);
      __dst = v5;
      goto LABEL_7;
    }
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *(_QWORD *)(a2 + 72);
    v302 = a2;
    v303 = a1;
    if ((*(char *)(v4 + 31) & 0x80000000) == 0)
      goto LABEL_3;
  }
  sub_223197FA4(&__dst, *(void **)(v4 + 8), *(_QWORD *)(v4 + 16));
LABEL_7:
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 96) + 48))(*(_QWORD *)(v4 + 96));
  sub_223629738();
  if (byte_2540CBD07 < 0)
  {
    sub_223197FA4(&v325, (void *)xmmword_2540CBCF0, *((unint64_t *)&xmmword_2540CBCF0 + 1));
  }
  else
  {
    v325 = xmmword_2540CBCF0;
    v326 = unk_2540CBD00;
  }
  v7 = HIBYTE(v326);
  if (v326 >= 0)
  {
    v8 = &v325;
  }
  else
  {
    v7 = *((_QWORD *)&v325 + 1);
    v8 = (__int128 *)v325;
  }
  if (v7 >= 4)
  {
    v9 = (char *)v8 + v7;
    v10 = v8;
    do
    {
      v11 = (char *)memchr(v10, 118, v7 - 3);
      if (!v11)
        break;
      if (*(_DWORD *)v11 == 1684631414)
      {
        if (v11 == v9 || v11 - (char *)v8 == -1)
          break;
        *(_QWORD *)&v319 = v6;
        DWORD2(v319) = 4;
        if (SHIBYTE(v328) < 0)
        {
          sub_223197FA4(&v320, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v320 = __dst;
          v321 = v328;
        }
        if (*(char *)(v4 + 55) < 0)
        {
          sub_223197FA4(&__p, *(void **)(v4 + 32), *(_QWORD *)(v4 + 40));
        }
        else
        {
          v301 = *(_OWORD *)(v4 + 32);
          *(_QWORD *)v323 = *(_QWORD *)(v4 + 48);
          __p = v301;
        }
        sub_22362A04C();
        if ((byte_2540CBDF7 & 0x80000000) == 0)
        {
          *(_OWORD *)&v323[8] = xmmword_2540CBDE0;
          v324 = unk_2540CBDF0;
          goto LABEL_34;
        }
        goto LABEL_31;
      }
      v10 = (__int128 *)(v11 + 1);
      v7 = v9 - (char *)v10;
    }
    while (v9 - (char *)v10 >= 4);
  }
  *(_QWORD *)&v319 = v6;
  DWORD2(v319) = 2;
  if (SHIBYTE(v328) < 0)
  {
    sub_223197FA4(&v320, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v320 = __dst;
    v321 = v328;
  }
  if (*(char *)(v4 + 55) < 0)
  {
    sub_223197FA4(&__p, *(void **)(v4 + 32), *(_QWORD *)(v4 + 40));
  }
  else
  {
    v12 = *(_OWORD *)(v4 + 32);
    *(_QWORD *)v323 = *(_QWORD *)(v4 + 48);
    __p = v12;
  }
  sub_22362A04C();
  if (byte_2540CBDF7 < 0)
  {
LABEL_31:
    sub_223197FA4(&v323[8], (void *)xmmword_2540CBDE0, *((unint64_t *)&xmmword_2540CBDE0 + 1));
  }
  else
  {
    *(_OWORD *)&v323[8] = xmmword_2540CBDE0;
    v324 = unk_2540CBDF0;
  }
LABEL_34:
  v312 = sub_2236285DC((char **)&v311, (uint64_t)&v319);
  if ((SHIBYTE(v324) & 0x80000000) == 0)
  {
    if ((v323[7] & 0x80000000) == 0)
      goto LABEL_36;
LABEL_32:
    operator delete((void *)__p);
    if ((SHIBYTE(v321) & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_33;
  }
  operator delete(*(void **)&v323[8]);
  if ((v323[7] & 0x80000000) != 0)
    goto LABEL_32;
LABEL_36:
  if (SHIBYTE(v321) < 0)
LABEL_33:
    operator delete((void *)v320);
LABEL_37:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v317, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v317 = xmmword_2540CBC48;
    v318 = unk_2540CBC58;
  }
  v13 = HIBYTE(v318);
  if (v318 >= 0)
  {
    v14 = v317;
  }
  else
  {
    v13 = (uint64_t)v317[1];
    v14 = (void **)v317[0];
  }
  if (v13 >= 18)
  {
    v15 = (char *)v14 + v13;
    v16 = v14;
    do
    {
      v17 = (char *)memchr(v16, 67, v13 - 17);
      if (!v17)
        break;
      if (*(_QWORD *)v17 == 0x456C656E6E616843
        && *((_QWORD *)v17 + 1) == 0x696F763C726F7272
        && *((_WORD *)v17 + 8) == 15972)
      {
        if (v17 != v15 && v17 - (char *)v14 != -1)
          goto LABEL_81;
        break;
      }
      v16 = (void **)(v17 + 1);
      v13 = v15 - (char *)v16;
    }
    while (v15 - (char *)v16 >= 18);
  }
  *(_QWORD *)&v319 = v6 + 1;
  DWORD2(v319) = 3;
  v20 = SHIBYTE(v328);
  if (v328 >= 0)
    v21 = HIBYTE(v328);
  else
    v21 = *((_QWORD *)&__dst + 1);
  v22 = v21 + 6;
  if (v21 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v22 >= 0x17)
  {
    v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v24 = v22 | 7;
    v25 = v24 + 1;
    v23 = (__int128 *)operator new(v24 + 1);
    *((_QWORD *)&v320 + 1) = v21 + 6;
    v321 = v25 | 0x8000000000000000;
    *(_QWORD *)&v320 = v23;
  }
  else
  {
    v321 = 0;
    v320 = 0uLL;
    v23 = &v320;
    HIBYTE(v321) = v21 + 6;
    if (!v21)
      goto LABEL_73;
  }
  if (v20 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
  memmove(v23, p_dst, v21);
LABEL_73:
  strcpy((char *)v23 + v21, ".Error");
  *(_WORD *)&v323[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v324) = 0;
  v27 = v312;
  if ((unint64_t)v312 >= v313)
  {
    v312 = sub_2236285DC((char **)&v311, (uint64_t)&v319);
    if (SHIBYTE(v324) < 0)
    {
      operator delete(*(void **)&v323[8]);
      if ((v323[7] & 0x80000000) == 0)
        goto LABEL_80;
    }
    else if ((v323[7] & 0x80000000) == 0)
    {
      goto LABEL_80;
    }
LABEL_75:
    operator delete((void *)__p);
    if (SHIBYTE(v321) < 0)
      goto LABEL_76;
    goto LABEL_81;
  }
  v28 = v319;
  *((_DWORD *)v312 + 2) = DWORD2(v319);
  *(_QWORD *)v27 = v28;
  v29 = v320;
  *((_QWORD *)v27 + 4) = v321;
  *((_OWORD *)v27 + 1) = v29;
  v321 = 0;
  v320 = 0uLL;
  v30 = *(_QWORD *)v323;
  *(_OWORD *)(v27 + 40) = __p;
  *((_QWORD *)v27 + 7) = v30;
  *(_QWORD *)v323 = 0;
  __p = 0uLL;
  v31 = *(_OWORD *)&v323[8];
  *((_QWORD *)v27 + 10) = v324;
  *((_OWORD *)v27 + 4) = v31;
  *(_QWORD *)&v323[8] = 0;
  *(_QWORD *)&v323[16] = 0;
  v324 = 0;
  v312 = v27 + 88;
  if ((v323[7] & 0x80000000) != 0)
    goto LABEL_75;
LABEL_80:
  if (SHIBYTE(v321) < 0)
  {
LABEL_76:
    operator delete((void *)v320);
    v32 = *(std::__shared_weak_count **)(v4 + 136);
    if (!v32)
      goto LABEL_85;
    goto LABEL_82;
  }
LABEL_81:
  v32 = *(std::__shared_weak_count **)(v4 + 136);
  if (!v32)
  {
LABEL_85:
    v314 = 0;
    v315 = 0;
    v316 = 0;
    v36 = 0;
    goto LABEL_100;
  }
LABEL_82:
  v33 = std::__shared_weak_count::lock(v32);
  *((_QWORD *)&v319 + 1) = v33;
  if (!v33)
    goto LABEL_85;
  v34 = v33;
  v35 = *(_QWORD *)(v4 + 128);
  *(_QWORD *)&v319 = v35;
  if (v35)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v35 + 24))(&v314);
  }
  else
  {
    v314 = 0;
    v315 = 0;
    v316 = 0;
  }
  p_shared_owners = (unint64_t *)&v34->__shared_owners_;
  do
    v38 = __ldaxr(p_shared_owners);
  while (__stlxr(v38 - 1, p_shared_owners));
  if (v38)
  {
    v36 = v314;
    v39 = v315;
    if (v314 == v315)
      goto LABEL_100;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    v36 = v314;
    v39 = v315;
    if (v314 == v315)
      goto LABEL_100;
  }
  do
  {
    *(_QWORD *)&v319 = v6;
    *((_QWORD *)&v319 + 1) = *v36;
    v321 = 0;
    v320 = 0uLL;
    v40 = v309;
    if ((unint64_t)v309 < v310)
    {
      *(_OWORD *)v309 = v319;
      *((_QWORD *)v40 + 3) = 0;
      *((_QWORD *)v40 + 4) = 0;
      *((_QWORD *)v40 + 2) = 0;
      v309 = v40 + 40;
    }
    else
    {
      v309 = sub_223628FA4(&v308, (uint64_t)&v319);
      if (SHIBYTE(v321) < 0)
        operator delete((void *)v320);
    }
    ++v36;
  }
  while (v36 != v39);
  v36 = v314;
LABEL_100:
  if (v36)
  {
    v315 = v36;
    operator delete(v36);
  }
  v41 = *(std::__shared_weak_count **)(v4 + 136);
  if (!v41 || (v42 = std::__shared_weak_count::lock(v41), (*((_QWORD *)&v319 + 1) = v42) == 0))
  {
    v314 = 0;
    v315 = 0;
    v316 = 0;
    v45 = 0;
    goto LABEL_121;
  }
  v43 = v42;
  v44 = *(_QWORD *)(v4 + 128);
  *(_QWORD *)&v319 = v44;
  if (v44)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v44 + 32))(&v314);
  }
  else
  {
    v314 = 0;
    v315 = 0;
    v316 = 0;
  }
  v46 = (unint64_t *)&v43->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (v47)
  {
    v45 = v314;
    v48 = v315;
    if (v314 == v315)
      goto LABEL_121;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
    v45 = v314;
    v48 = v315;
    if (v314 == v315)
      goto LABEL_121;
  }
  v49 = v6 + 1;
  do
  {
    *(_QWORD *)&v319 = v49;
    *((_QWORD *)&v319 + 1) = *v45;
    v321 = 0;
    v320 = 0uLL;
    v50 = v309;
    if ((unint64_t)v309 < v310)
    {
      *(_OWORD *)v309 = v319;
      *((_QWORD *)v50 + 3) = 0;
      *((_QWORD *)v50 + 4) = 0;
      *((_QWORD *)v50 + 2) = 0;
      v309 = v50 + 40;
    }
    else
    {
      v309 = sub_223628FA4(&v308, (uint64_t)&v319);
      if (SHIBYTE(v321) < 0)
        operator delete((void *)v320);
    }
    ++v45;
  }
  while (v45 != v48);
  v45 = v314;
LABEL_121:
  if (v45)
  {
    v315 = v45;
    operator delete(v45);
  }
  if (SHIBYTE(v318) < 0)
  {
    operator delete(v317[0]);
    if ((SHIBYTE(v326) & 0x80000000) == 0)
    {
LABEL_125:
      if ((SHIBYTE(v328) & 0x80000000) == 0)
        goto LABEL_126;
LABEL_130:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 199) & 0x80000000) == 0)
        goto LABEL_127;
      goto LABEL_131;
    }
  }
  else if ((SHIBYTE(v326) & 0x80000000) == 0)
  {
    goto LABEL_125;
  }
  operator delete((void *)v325);
  if (SHIBYTE(v328) < 0)
    goto LABEL_130;
LABEL_126:
  if ((*(char *)(v4 + 199) & 0x80000000) == 0)
  {
LABEL_127:
    __dst = *(_OWORD *)(v4 + 176);
    v328 = *(_QWORD *)(v4 + 192);
    goto LABEL_132;
  }
LABEL_131:
  sub_223197FA4(&__dst, *(void **)(v4 + 176), *(_QWORD *)(v4 + 184));
LABEL_132:
  v51 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 264) + 48))(*(_QWORD *)(v4 + 264));
  sub_22362A204();
  if (byte_2540CBE3F < 0)
  {
    sub_223197FA4(&v325, (void *)xmmword_2540CBE28, *((unint64_t *)&xmmword_2540CBE28 + 1));
  }
  else
  {
    v325 = xmmword_2540CBE28;
    v326 = unk_2540CBE38;
  }
  v52 = HIBYTE(v326);
  if (v326 >= 0)
  {
    v53 = &v325;
  }
  else
  {
    v52 = *((_QWORD *)&v325 + 1);
    v53 = (__int128 *)v325;
  }
  if (v52 >= 4)
  {
    v54 = (char *)v53 + v52;
    v55 = v53;
    do
    {
      v56 = (char *)memchr(v55, 118, v52 - 3);
      if (!v56)
        break;
      if (*(_DWORD *)v56 == 1684631414)
      {
        if (v56 == v54 || v56 - (char *)v53 == -1)
          break;
        *(_QWORD *)&v319 = v51;
        DWORD2(v319) = 4;
        if (SHIBYTE(v328) < 0)
        {
          sub_223197FA4(&v320, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v320 = __dst;
          v321 = v328;
        }
        if (*(char *)(v4 + 223) < 0)
        {
          sub_223197FA4(&__p, *(void **)(v4 + 200), *(_QWORD *)(v4 + 208));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 200);
          *(_QWORD *)v323 = *(_QWORD *)(v4 + 216);
        }
        sub_22362AB18();
        if (byte_2540CBF2F < 0)
        {
          sub_223197FA4(&v323[8], (void *)xmmword_2540CBF18, *((unint64_t *)&xmmword_2540CBF18 + 1));
        }
        else
        {
          *(_OWORD *)&v323[8] = xmmword_2540CBF18;
          v324 = unk_2540CBF28;
        }
        v57 = v312;
        if ((unint64_t)v312 < v313)
          goto LABEL_158;
        goto LABEL_161;
      }
      v55 = (__int128 *)(v56 + 1);
      v52 = v54 - (char *)v55;
    }
    while (v54 - (char *)v55 >= 4);
  }
  *(_QWORD *)&v319 = v51;
  DWORD2(v319) = 2;
  if (SHIBYTE(v328) < 0)
  {
    sub_223197FA4(&v320, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v320 = __dst;
    v321 = v328;
  }
  if (*(char *)(v4 + 223) < 0)
  {
    sub_223197FA4(&__p, *(void **)(v4 + 200), *(_QWORD *)(v4 + 208));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 200);
    *(_QWORD *)v323 = *(_QWORD *)(v4 + 216);
  }
  sub_22362AB18();
  if (byte_2540CBF2F < 0)
  {
    sub_223197FA4(&v323[8], (void *)xmmword_2540CBF18, *((unint64_t *)&xmmword_2540CBF18 + 1));
  }
  else
  {
    *(_OWORD *)&v323[8] = xmmword_2540CBF18;
    v324 = unk_2540CBF28;
  }
  v57 = v312;
  if ((unint64_t)v312 >= v313)
  {
LABEL_161:
    v312 = sub_2236285DC((char **)&v311, (uint64_t)&v319);
    if (SHIBYTE(v324) < 0)
    {
      operator delete(*(void **)&v323[8]);
      if ((v323[7] & 0x80000000) == 0)
        goto LABEL_163;
    }
    else if ((v323[7] & 0x80000000) == 0)
    {
      goto LABEL_163;
    }
LABEL_159:
    operator delete((void *)__p);
    if ((SHIBYTE(v321) & 0x80000000) == 0)
      goto LABEL_164;
    goto LABEL_160;
  }
LABEL_158:
  v58 = v319;
  *((_DWORD *)v57 + 2) = DWORD2(v319);
  *(_QWORD *)v57 = v58;
  v59 = v320;
  *((_QWORD *)v57 + 4) = v321;
  *((_OWORD *)v57 + 1) = v59;
  v321 = 0;
  v320 = 0uLL;
  v60 = *(_QWORD *)v323;
  *(_OWORD *)(v57 + 40) = __p;
  *((_QWORD *)v57 + 7) = v60;
  *(_QWORD *)v323 = 0;
  __p = 0uLL;
  v61 = *(_OWORD *)&v323[8];
  *((_QWORD *)v57 + 10) = v324;
  *((_OWORD *)v57 + 4) = v61;
  *(_QWORD *)&v323[8] = 0;
  *(_QWORD *)&v323[16] = 0;
  v324 = 0;
  v312 = v57 + 88;
  if ((v323[7] & 0x80000000) != 0)
    goto LABEL_159;
LABEL_163:
  if (SHIBYTE(v321) < 0)
LABEL_160:
    operator delete((void *)v320);
LABEL_164:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v317, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v317 = xmmword_2540CBC48;
    v318 = unk_2540CBC58;
  }
  v62 = HIBYTE(v318);
  if (v318 >= 0)
  {
    v63 = v317;
  }
  else
  {
    v62 = (uint64_t)v317[1];
    v63 = (void **)v317[0];
  }
  if (v62 >= 18)
  {
    v64 = (char *)v63 + v62;
    v65 = v63;
    do
    {
      v66 = (char *)memchr(v65, 67, v62 - 17);
      if (!v66)
        break;
      if (*(_QWORD *)v66 == 0x456C656E6E616843
        && *((_QWORD *)v66 + 1) == 0x696F763C726F7272
        && *((_WORD *)v66 + 8) == 15972)
      {
        if (v66 != v64 && v66 - (char *)v63 != -1)
          goto LABEL_208;
        break;
      }
      v65 = (void **)(v66 + 1);
      v62 = v64 - (char *)v65;
    }
    while (v64 - (char *)v65 >= 18);
  }
  *(_QWORD *)&v319 = v51 + 1;
  DWORD2(v319) = 3;
  v69 = SHIBYTE(v328);
  if (v328 >= 0)
    v70 = HIBYTE(v328);
  else
    v70 = *((_QWORD *)&__dst + 1);
  v71 = v70 + 6;
  if (v70 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v71 >= 0x17)
  {
    v73 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v71 | 7) != 0x17)
      v73 = v71 | 7;
    v74 = v73 + 1;
    v72 = (__int128 *)operator new(v73 + 1);
    *((_QWORD *)&v320 + 1) = v70 + 6;
    v321 = v74 | 0x8000000000000000;
    *(_QWORD *)&v320 = v72;
  }
  else
  {
    v321 = 0;
    v320 = 0uLL;
    v72 = &v320;
    HIBYTE(v321) = v70 + 6;
    if (!v70)
      goto LABEL_200;
  }
  if (v69 >= 0)
    v75 = &__dst;
  else
    v75 = (__int128 *)__dst;
  memmove(v72, v75, v70);
LABEL_200:
  strcpy((char *)v72 + v70, ".Error");
  *(_WORD *)&v323[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v324) = 0;
  v76 = v312;
  if ((unint64_t)v312 >= v313)
  {
    v312 = sub_2236285DC((char **)&v311, (uint64_t)&v319);
    if (SHIBYTE(v324) < 0)
    {
      operator delete(*(void **)&v323[8]);
      if ((v323[7] & 0x80000000) == 0)
        goto LABEL_207;
    }
    else if ((v323[7] & 0x80000000) == 0)
    {
      goto LABEL_207;
    }
LABEL_202:
    operator delete((void *)__p);
    if (SHIBYTE(v321) < 0)
      goto LABEL_203;
    goto LABEL_208;
  }
  v77 = v319;
  *((_DWORD *)v312 + 2) = DWORD2(v319);
  *(_QWORD *)v76 = v77;
  v78 = v320;
  *((_QWORD *)v76 + 4) = v321;
  *((_OWORD *)v76 + 1) = v78;
  v321 = 0;
  v320 = 0uLL;
  v79 = *(_QWORD *)v323;
  *(_OWORD *)(v76 + 40) = __p;
  *((_QWORD *)v76 + 7) = v79;
  *(_QWORD *)v323 = 0;
  __p = 0uLL;
  v80 = *(_OWORD *)&v323[8];
  *((_QWORD *)v76 + 10) = v324;
  *((_OWORD *)v76 + 4) = v80;
  *(_QWORD *)&v323[8] = 0;
  *(_QWORD *)&v323[16] = 0;
  v324 = 0;
  v312 = v76 + 88;
  if ((v323[7] & 0x80000000) != 0)
    goto LABEL_202;
LABEL_207:
  if (SHIBYTE(v321) < 0)
  {
LABEL_203:
    operator delete((void *)v320);
    v81 = *(std::__shared_weak_count **)(v4 + 304);
    if (!v81)
      goto LABEL_212;
    goto LABEL_209;
  }
LABEL_208:
  v81 = *(std::__shared_weak_count **)(v4 + 304);
  if (!v81)
  {
LABEL_212:
    v314 = 0;
    v315 = 0;
    v316 = 0;
    v85 = 0;
    goto LABEL_229;
  }
LABEL_209:
  v82 = std::__shared_weak_count::lock(v81);
  *((_QWORD *)&v319 + 1) = v82;
  if (!v82)
    goto LABEL_212;
  v83 = v82;
  v84 = *(_QWORD *)(v4 + 296);
  *(_QWORD *)&v319 = v84;
  if (v84)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v84 + 24))(&v314);
  }
  else
  {
    v314 = 0;
    v315 = 0;
    v316 = 0;
  }
  v86 = (unint64_t *)&v83->__shared_owners_;
  do
    v87 = __ldaxr(v86);
  while (__stlxr(v87 - 1, v86));
  if (v87)
  {
    v85 = v314;
    v88 = v315;
    if (v314 == v315)
      goto LABEL_229;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
    std::__shared_weak_count::__release_weak(v83);
    v85 = v314;
    v88 = v315;
    if (v314 == v315)
      goto LABEL_229;
  }
  do
  {
    *(_QWORD *)&v319 = v51;
    *((_QWORD *)&v319 + 1) = *v85;
    v321 = 0;
    v320 = 0uLL;
    v89 = v309;
    if ((unint64_t)v309 < v310)
    {
      *(_OWORD *)v309 = v319;
      *((_QWORD *)v89 + 3) = 0;
      *((_QWORD *)v89 + 4) = 0;
      *((_QWORD *)v89 + 2) = 0;
      v309 = v89 + 40;
    }
    else
    {
      v309 = sub_223628FA4(&v308, (uint64_t)&v319);
      if (SHIBYTE(v321) < 0)
        operator delete((void *)v320);
    }
    ++v85;
  }
  while (v85 != v88);
  v85 = v314;
LABEL_229:
  if (v85)
  {
    v315 = v85;
    operator delete(v85);
  }
  v90 = *(std::__shared_weak_count **)(v4 + 304);
  if (!v90 || (v91 = std::__shared_weak_count::lock(v90), (*((_QWORD *)&v319 + 1) = v91) == 0))
  {
    v314 = 0;
    v315 = 0;
    v316 = 0;
    v94 = 0;
    goto LABEL_250;
  }
  v92 = v91;
  v93 = *(_QWORD *)(v4 + 296);
  *(_QWORD *)&v319 = v93;
  if (v93)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v93 + 32))(&v314);
  }
  else
  {
    v314 = 0;
    v315 = 0;
    v316 = 0;
  }
  v95 = (unint64_t *)&v92->__shared_owners_;
  do
    v96 = __ldaxr(v95);
  while (__stlxr(v96 - 1, v95));
  if (v96)
  {
    v94 = v314;
    v97 = v315;
    if (v314 == v315)
      goto LABEL_250;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
    std::__shared_weak_count::__release_weak(v92);
    v94 = v314;
    v97 = v315;
    if (v314 == v315)
      goto LABEL_250;
  }
  v98 = v51 + 1;
  do
  {
    *(_QWORD *)&v319 = v98;
    *((_QWORD *)&v319 + 1) = *v94;
    v321 = 0;
    v320 = 0uLL;
    v99 = v309;
    if ((unint64_t)v309 < v310)
    {
      *(_OWORD *)v309 = v319;
      *((_QWORD *)v99 + 3) = 0;
      *((_QWORD *)v99 + 4) = 0;
      *((_QWORD *)v99 + 2) = 0;
      v309 = v99 + 40;
    }
    else
    {
      v309 = sub_223628FA4(&v308, (uint64_t)&v319);
      if (SHIBYTE(v321) < 0)
        operator delete((void *)v320);
    }
    ++v94;
  }
  while (v94 != v97);
  v94 = v314;
LABEL_250:
  if (v94)
  {
    v315 = v94;
    operator delete(v94);
  }
  if (SHIBYTE(v318) < 0)
  {
    operator delete(v317[0]);
    if ((SHIBYTE(v326) & 0x80000000) == 0)
    {
LABEL_254:
      if ((SHIBYTE(v328) & 0x80000000) == 0)
        goto LABEL_255;
LABEL_259:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 367) & 0x80000000) == 0)
        goto LABEL_256;
      goto LABEL_260;
    }
  }
  else if ((SHIBYTE(v326) & 0x80000000) == 0)
  {
    goto LABEL_254;
  }
  operator delete((void *)v325);
  if (SHIBYTE(v328) < 0)
    goto LABEL_259;
LABEL_255:
  if ((*(char *)(v4 + 367) & 0x80000000) == 0)
  {
LABEL_256:
    __dst = *(_OWORD *)(v4 + 344);
    v328 = *(_QWORD *)(v4 + 360);
    goto LABEL_261;
  }
LABEL_260:
  sub_223197FA4(&__dst, *(void **)(v4 + 344), *(_QWORD *)(v4 + 352));
LABEL_261:
  v100 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 432) + 48))(*(_QWORD *)(v4 + 432));
  sub_22362ACD0();
  if (byte_255792C87 < 0)
  {
    sub_223197FA4(&v325, (void *)xmmword_255792C70, *((unint64_t *)&xmmword_255792C70 + 1));
  }
  else
  {
    v325 = xmmword_255792C70;
    v326 = unk_255792C80;
  }
  v101 = HIBYTE(v326);
  if (v326 >= 0)
  {
    v102 = &v325;
  }
  else
  {
    v101 = *((_QWORD *)&v325 + 1);
    v102 = (__int128 *)v325;
  }
  if (v101 >= 4)
  {
    v103 = (char *)v102 + v101;
    v104 = v102;
    do
    {
      v105 = (char *)memchr(v104, 118, v101 - 3);
      if (!v105)
        break;
      if (*(_DWORD *)v105 == 1684631414)
      {
        if (v105 == v103 || v105 - (char *)v102 == -1)
          break;
        *(_QWORD *)&v319 = v100;
        DWORD2(v319) = 4;
        if (SHIBYTE(v328) < 0)
        {
          sub_223197FA4(&v320, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v320 = __dst;
          v321 = v328;
        }
        if (*(char *)(v4 + 391) < 0)
        {
          sub_223197FA4(&__p, *(void **)(v4 + 368), *(_QWORD *)(v4 + 376));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 368);
          *(_QWORD *)v323 = *(_QWORD *)(v4 + 384);
        }
        sub_22362B5F4();
        if (byte_255792D77 < 0)
        {
          sub_223197FA4(&v323[8], (void *)xmmword_255792D60, *((unint64_t *)&xmmword_255792D60 + 1));
        }
        else
        {
          *(_OWORD *)&v323[8] = xmmword_255792D60;
          v324 = unk_255792D70;
        }
        v106 = v312;
        if ((unint64_t)v312 < v313)
          goto LABEL_287;
        goto LABEL_290;
      }
      v104 = (__int128 *)(v105 + 1);
      v101 = v103 - (char *)v104;
    }
    while (v103 - (char *)v104 >= 4);
  }
  *(_QWORD *)&v319 = v100;
  DWORD2(v319) = 2;
  if (SHIBYTE(v328) < 0)
  {
    sub_223197FA4(&v320, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v320 = __dst;
    v321 = v328;
  }
  if (*(char *)(v4 + 391) < 0)
  {
    sub_223197FA4(&__p, *(void **)(v4 + 368), *(_QWORD *)(v4 + 376));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 368);
    *(_QWORD *)v323 = *(_QWORD *)(v4 + 384);
  }
  sub_22362B5F4();
  if (byte_255792D77 < 0)
  {
    sub_223197FA4(&v323[8], (void *)xmmword_255792D60, *((unint64_t *)&xmmword_255792D60 + 1));
  }
  else
  {
    *(_OWORD *)&v323[8] = xmmword_255792D60;
    v324 = unk_255792D70;
  }
  v106 = v312;
  if ((unint64_t)v312 >= v313)
  {
LABEL_290:
    v312 = sub_2236285DC((char **)&v311, (uint64_t)&v319);
    if (SHIBYTE(v324) < 0)
    {
      operator delete(*(void **)&v323[8]);
      if ((v323[7] & 0x80000000) == 0)
        goto LABEL_292;
    }
    else if ((v323[7] & 0x80000000) == 0)
    {
      goto LABEL_292;
    }
LABEL_288:
    operator delete((void *)__p);
    if ((SHIBYTE(v321) & 0x80000000) == 0)
      goto LABEL_293;
    goto LABEL_289;
  }
LABEL_287:
  v107 = v319;
  *((_DWORD *)v106 + 2) = DWORD2(v319);
  *(_QWORD *)v106 = v107;
  v108 = v320;
  *((_QWORD *)v106 + 4) = v321;
  *((_OWORD *)v106 + 1) = v108;
  v321 = 0;
  v320 = 0uLL;
  v109 = *(_QWORD *)v323;
  *(_OWORD *)(v106 + 40) = __p;
  *((_QWORD *)v106 + 7) = v109;
  *(_QWORD *)v323 = 0;
  __p = 0uLL;
  v110 = *(_OWORD *)&v323[8];
  *((_QWORD *)v106 + 10) = v324;
  *((_OWORD *)v106 + 4) = v110;
  *(_QWORD *)&v323[8] = 0;
  *(_QWORD *)&v323[16] = 0;
  v324 = 0;
  v312 = v106 + 88;
  if ((v323[7] & 0x80000000) != 0)
    goto LABEL_288;
LABEL_292:
  if (SHIBYTE(v321) < 0)
LABEL_289:
    operator delete((void *)v320);
LABEL_293:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v317, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v317 = xmmword_2540CBC48;
    v318 = unk_2540CBC58;
  }
  v111 = HIBYTE(v318);
  if (v318 >= 0)
  {
    v112 = v317;
  }
  else
  {
    v111 = (uint64_t)v317[1];
    v112 = (void **)v317[0];
  }
  if (v111 >= 18)
  {
    v113 = (char *)v112 + v111;
    v114 = v112;
    do
    {
      v115 = (char *)memchr(v114, 67, v111 - 17);
      if (!v115)
        break;
      if (*(_QWORD *)v115 == 0x456C656E6E616843
        && *((_QWORD *)v115 + 1) == 0x696F763C726F7272
        && *((_WORD *)v115 + 8) == 15972)
      {
        if (v115 != v113 && v115 - (char *)v112 != -1)
          goto LABEL_337;
        break;
      }
      v114 = (void **)(v115 + 1);
      v111 = v113 - (char *)v114;
    }
    while (v113 - (char *)v114 >= 18);
  }
  *(_QWORD *)&v319 = v100 + 1;
  DWORD2(v319) = 3;
  v118 = SHIBYTE(v328);
  if (v328 >= 0)
    v119 = HIBYTE(v328);
  else
    v119 = *((_QWORD *)&__dst + 1);
  v120 = v119 + 6;
  if (v119 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v120 >= 0x17)
  {
    v122 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17)
      v122 = v120 | 7;
    v123 = v122 + 1;
    v121 = (__int128 *)operator new(v122 + 1);
    *((_QWORD *)&v320 + 1) = v119 + 6;
    v321 = v123 | 0x8000000000000000;
    *(_QWORD *)&v320 = v121;
  }
  else
  {
    v321 = 0;
    v320 = 0uLL;
    v121 = &v320;
    HIBYTE(v321) = v119 + 6;
    if (!v119)
      goto LABEL_329;
  }
  if (v118 >= 0)
    v124 = &__dst;
  else
    v124 = (__int128 *)__dst;
  memmove(v121, v124, v119);
LABEL_329:
  strcpy((char *)v121 + v119, ".Error");
  *(_WORD *)&v323[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v324) = 0;
  v125 = v312;
  if ((unint64_t)v312 >= v313)
  {
    v312 = sub_2236285DC((char **)&v311, (uint64_t)&v319);
    if (SHIBYTE(v324) < 0)
    {
      operator delete(*(void **)&v323[8]);
      if ((v323[7] & 0x80000000) == 0)
        goto LABEL_336;
    }
    else if ((v323[7] & 0x80000000) == 0)
    {
      goto LABEL_336;
    }
LABEL_331:
    operator delete((void *)__p);
    if (SHIBYTE(v321) < 0)
      goto LABEL_332;
    goto LABEL_337;
  }
  v126 = v319;
  *((_DWORD *)v312 + 2) = DWORD2(v319);
  *(_QWORD *)v125 = v126;
  v127 = v320;
  *((_QWORD *)v125 + 4) = v321;
  *((_OWORD *)v125 + 1) = v127;
  v321 = 0;
  v320 = 0uLL;
  v128 = *(_QWORD *)v323;
  *(_OWORD *)(v125 + 40) = __p;
  *((_QWORD *)v125 + 7) = v128;
  *(_QWORD *)v323 = 0;
  __p = 0uLL;
  v129 = *(_OWORD *)&v323[8];
  *((_QWORD *)v125 + 10) = v324;
  *((_OWORD *)v125 + 4) = v129;
  *(_QWORD *)&v323[8] = 0;
  *(_QWORD *)&v323[16] = 0;
  v324 = 0;
  v312 = v125 + 88;
  if ((v323[7] & 0x80000000) != 0)
    goto LABEL_331;
LABEL_336:
  if (SHIBYTE(v321) < 0)
  {
LABEL_332:
    operator delete((void *)v320);
    v130 = *(std::__shared_weak_count **)(v4 + 472);
    if (!v130)
      goto LABEL_341;
    goto LABEL_338;
  }
LABEL_337:
  v130 = *(std::__shared_weak_count **)(v4 + 472);
  if (!v130)
  {
LABEL_341:
    v314 = 0;
    v315 = 0;
    v316 = 0;
    v134 = 0;
    goto LABEL_358;
  }
LABEL_338:
  v131 = std::__shared_weak_count::lock(v130);
  *((_QWORD *)&v319 + 1) = v131;
  if (!v131)
    goto LABEL_341;
  v132 = v131;
  v133 = *(_QWORD *)(v4 + 464);
  *(_QWORD *)&v319 = v133;
  if (v133)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v133 + 24))(&v314);
  }
  else
  {
    v314 = 0;
    v315 = 0;
    v316 = 0;
  }
  v135 = (unint64_t *)&v132->__shared_owners_;
  do
    v136 = __ldaxr(v135);
  while (__stlxr(v136 - 1, v135));
  if (v136)
  {
    v134 = v314;
    v137 = v315;
    if (v314 == v315)
      goto LABEL_358;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
    std::__shared_weak_count::__release_weak(v132);
    v134 = v314;
    v137 = v315;
    if (v314 == v315)
      goto LABEL_358;
  }
  do
  {
    *(_QWORD *)&v319 = v100;
    *((_QWORD *)&v319 + 1) = *v134;
    v321 = 0;
    v320 = 0uLL;
    v138 = v309;
    if ((unint64_t)v309 < v310)
    {
      *(_OWORD *)v309 = v319;
      *((_QWORD *)v138 + 3) = 0;
      *((_QWORD *)v138 + 4) = 0;
      *((_QWORD *)v138 + 2) = 0;
      v309 = v138 + 40;
    }
    else
    {
      v309 = sub_223628FA4(&v308, (uint64_t)&v319);
      if (SHIBYTE(v321) < 0)
        operator delete((void *)v320);
    }
    ++v134;
  }
  while (v134 != v137);
  v134 = v314;
LABEL_358:
  if (v134)
  {
    v315 = v134;
    operator delete(v134);
  }
  v139 = *(std::__shared_weak_count **)(v4 + 472);
  if (!v139 || (v140 = std::__shared_weak_count::lock(v139), (*((_QWORD *)&v319 + 1) = v140) == 0))
  {
    v314 = 0;
    v315 = 0;
    v316 = 0;
    v143 = 0;
    goto LABEL_379;
  }
  v141 = v140;
  v142 = *(_QWORD *)(v4 + 464);
  *(_QWORD *)&v319 = v142;
  if (v142)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v142 + 32))(&v314);
  }
  else
  {
    v314 = 0;
    v315 = 0;
    v316 = 0;
  }
  v144 = (unint64_t *)&v141->__shared_owners_;
  do
    v145 = __ldaxr(v144);
  while (__stlxr(v145 - 1, v144));
  if (v145)
  {
    v143 = v314;
    v146 = v315;
    if (v314 == v315)
      goto LABEL_379;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
    std::__shared_weak_count::__release_weak(v141);
    v143 = v314;
    v146 = v315;
    if (v314 == v315)
      goto LABEL_379;
  }
  v147 = v100 + 1;
  do
  {
    *(_QWORD *)&v319 = v147;
    *((_QWORD *)&v319 + 1) = *v143;
    v321 = 0;
    v320 = 0uLL;
    v148 = v309;
    if ((unint64_t)v309 < v310)
    {
      *(_OWORD *)v309 = v319;
      *((_QWORD *)v148 + 3) = 0;
      *((_QWORD *)v148 + 4) = 0;
      *((_QWORD *)v148 + 2) = 0;
      v309 = v148 + 40;
    }
    else
    {
      v309 = sub_223628FA4(&v308, (uint64_t)&v319);
      if (SHIBYTE(v321) < 0)
        operator delete((void *)v320);
    }
    ++v143;
  }
  while (v143 != v146);
  v143 = v314;
LABEL_379:
  if (v143)
  {
    v315 = v143;
    operator delete(v143);
  }
  if (SHIBYTE(v318) < 0)
  {
    operator delete(v317[0]);
    if ((SHIBYTE(v326) & 0x80000000) == 0)
    {
LABEL_383:
      if ((SHIBYTE(v328) & 0x80000000) == 0)
        goto LABEL_384;
LABEL_388:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 535) & 0x80000000) == 0)
        goto LABEL_385;
      goto LABEL_389;
    }
  }
  else if ((SHIBYTE(v326) & 0x80000000) == 0)
  {
    goto LABEL_383;
  }
  operator delete((void *)v325);
  if (SHIBYTE(v328) < 0)
    goto LABEL_388;
LABEL_384:
  if ((*(char *)(v4 + 535) & 0x80000000) == 0)
  {
LABEL_385:
    __dst = *(_OWORD *)(v4 + 512);
    v328 = *(_QWORD *)(v4 + 528);
    goto LABEL_390;
  }
LABEL_389:
  sub_223197FA4(&__dst, *(void **)(v4 + 512), *(_QWORD *)(v4 + 520));
LABEL_390:
  v149 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 600) + 48))(*(_QWORD *)(v4 + 600));
  sub_22362B7B8();
  if (byte_255792DBF < 0)
  {
    sub_223197FA4(&v325, (void *)xmmword_255792DA8, *((unint64_t *)&xmmword_255792DA8 + 1));
  }
  else
  {
    v325 = xmmword_255792DA8;
    v326 = unk_255792DB8;
  }
  v150 = HIBYTE(v326);
  if (v326 >= 0)
  {
    v151 = &v325;
  }
  else
  {
    v150 = *((_QWORD *)&v325 + 1);
    v151 = (__int128 *)v325;
  }
  if (v150 >= 4)
  {
    v152 = (char *)v151 + v150;
    v153 = v151;
    do
    {
      v154 = (char *)memchr(v153, 118, v150 - 3);
      if (!v154)
        break;
      if (*(_DWORD *)v154 == 1684631414)
      {
        if (v154 == v152 || v154 - (char *)v151 == -1)
          break;
        *(_QWORD *)&v319 = v149;
        DWORD2(v319) = 4;
        if (SHIBYTE(v328) < 0)
        {
          sub_223197FA4(&v320, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v320 = __dst;
          v321 = v328;
        }
        if (*(char *)(v4 + 559) < 0)
        {
          sub_223197FA4(&__p, *(void **)(v4 + 536), *(_QWORD *)(v4 + 544));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 536);
          *(_QWORD *)v323 = *(_QWORD *)(v4 + 552);
        }
        sub_22362C0DC();
        if (byte_255792EAF < 0)
        {
          sub_223197FA4(&v323[8], (void *)xmmword_255792E98, *((unint64_t *)&xmmword_255792E98 + 1));
        }
        else
        {
          *(_OWORD *)&v323[8] = xmmword_255792E98;
          v324 = unk_255792EA8;
        }
        v155 = v312;
        if ((unint64_t)v312 < v313)
          goto LABEL_416;
        goto LABEL_419;
      }
      v153 = (__int128 *)(v154 + 1);
      v150 = v152 - (char *)v153;
    }
    while (v152 - (char *)v153 >= 4);
  }
  *(_QWORD *)&v319 = v149;
  DWORD2(v319) = 2;
  if (SHIBYTE(v328) < 0)
  {
    sub_223197FA4(&v320, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v320 = __dst;
    v321 = v328;
  }
  if (*(char *)(v4 + 559) < 0)
  {
    sub_223197FA4(&__p, *(void **)(v4 + 536), *(_QWORD *)(v4 + 544));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 536);
    *(_QWORD *)v323 = *(_QWORD *)(v4 + 552);
  }
  sub_22362C0DC();
  if (byte_255792EAF < 0)
  {
    sub_223197FA4(&v323[8], (void *)xmmword_255792E98, *((unint64_t *)&xmmword_255792E98 + 1));
  }
  else
  {
    *(_OWORD *)&v323[8] = xmmword_255792E98;
    v324 = unk_255792EA8;
  }
  v155 = v312;
  if ((unint64_t)v312 >= v313)
  {
LABEL_419:
    v312 = sub_2236285DC((char **)&v311, (uint64_t)&v319);
    if (SHIBYTE(v324) < 0)
    {
      operator delete(*(void **)&v323[8]);
      if ((v323[7] & 0x80000000) == 0)
        goto LABEL_421;
    }
    else if ((v323[7] & 0x80000000) == 0)
    {
      goto LABEL_421;
    }
LABEL_417:
    operator delete((void *)__p);
    if ((SHIBYTE(v321) & 0x80000000) == 0)
      goto LABEL_422;
    goto LABEL_418;
  }
LABEL_416:
  v156 = v319;
  *((_DWORD *)v155 + 2) = DWORD2(v319);
  *(_QWORD *)v155 = v156;
  v157 = v320;
  *((_QWORD *)v155 + 4) = v321;
  *((_OWORD *)v155 + 1) = v157;
  v321 = 0;
  v320 = 0uLL;
  v158 = *(_QWORD *)v323;
  *(_OWORD *)(v155 + 40) = __p;
  *((_QWORD *)v155 + 7) = v158;
  *(_QWORD *)v323 = 0;
  __p = 0uLL;
  v159 = *(_OWORD *)&v323[8];
  *((_QWORD *)v155 + 10) = v324;
  *((_OWORD *)v155 + 4) = v159;
  *(_QWORD *)&v323[8] = 0;
  *(_QWORD *)&v323[16] = 0;
  v324 = 0;
  v312 = v155 + 88;
  if ((v323[7] & 0x80000000) != 0)
    goto LABEL_417;
LABEL_421:
  if (SHIBYTE(v321) < 0)
LABEL_418:
    operator delete((void *)v320);
LABEL_422:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v317, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v317 = xmmword_2540CBC48;
    v318 = unk_2540CBC58;
  }
  v160 = HIBYTE(v318);
  if (v318 >= 0)
  {
    v161 = v317;
  }
  else
  {
    v160 = (uint64_t)v317[1];
    v161 = (void **)v317[0];
  }
  if (v160 >= 18)
  {
    v162 = (char *)v161 + v160;
    v163 = v161;
    do
    {
      v164 = (char *)memchr(v163, 67, v160 - 17);
      if (!v164)
        break;
      if (*(_QWORD *)v164 == 0x456C656E6E616843
        && *((_QWORD *)v164 + 1) == 0x696F763C726F7272
        && *((_WORD *)v164 + 8) == 15972)
      {
        if (v164 != v162 && v164 - (char *)v161 != -1)
          goto LABEL_466;
        break;
      }
      v163 = (void **)(v164 + 1);
      v160 = v162 - (char *)v163;
    }
    while (v162 - (char *)v163 >= 18);
  }
  *(_QWORD *)&v319 = v149 + 1;
  DWORD2(v319) = 3;
  v167 = SHIBYTE(v328);
  if (v328 >= 0)
    v168 = HIBYTE(v328);
  else
    v168 = *((_QWORD *)&__dst + 1);
  v169 = v168 + 6;
  if (v168 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v169 >= 0x17)
  {
    v171 = (v169 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v169 | 7) != 0x17)
      v171 = v169 | 7;
    v172 = v171 + 1;
    v170 = (__int128 *)operator new(v171 + 1);
    *((_QWORD *)&v320 + 1) = v168 + 6;
    v321 = v172 | 0x8000000000000000;
    *(_QWORD *)&v320 = v170;
  }
  else
  {
    v321 = 0;
    v320 = 0uLL;
    v170 = &v320;
    HIBYTE(v321) = v168 + 6;
    if (!v168)
      goto LABEL_458;
  }
  if (v167 >= 0)
    v173 = &__dst;
  else
    v173 = (__int128 *)__dst;
  memmove(v170, v173, v168);
LABEL_458:
  strcpy((char *)v170 + v168, ".Error");
  *(_WORD *)&v323[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v324) = 0;
  v174 = v312;
  if ((unint64_t)v312 >= v313)
  {
    v312 = sub_2236285DC((char **)&v311, (uint64_t)&v319);
    if (SHIBYTE(v324) < 0)
    {
      operator delete(*(void **)&v323[8]);
      if ((v323[7] & 0x80000000) == 0)
        goto LABEL_465;
    }
    else if ((v323[7] & 0x80000000) == 0)
    {
      goto LABEL_465;
    }
LABEL_460:
    operator delete((void *)__p);
    if (SHIBYTE(v321) < 0)
      goto LABEL_461;
    goto LABEL_466;
  }
  v175 = v319;
  *((_DWORD *)v312 + 2) = DWORD2(v319);
  *(_QWORD *)v174 = v175;
  v176 = v320;
  *((_QWORD *)v174 + 4) = v321;
  *((_OWORD *)v174 + 1) = v176;
  v321 = 0;
  v320 = 0uLL;
  v177 = *(_QWORD *)v323;
  *(_OWORD *)(v174 + 40) = __p;
  *((_QWORD *)v174 + 7) = v177;
  *(_QWORD *)v323 = 0;
  __p = 0uLL;
  v178 = *(_OWORD *)&v323[8];
  *((_QWORD *)v174 + 10) = v324;
  *((_OWORD *)v174 + 4) = v178;
  *(_QWORD *)&v323[8] = 0;
  *(_QWORD *)&v323[16] = 0;
  v324 = 0;
  v312 = v174 + 88;
  if ((v323[7] & 0x80000000) != 0)
    goto LABEL_460;
LABEL_465:
  if (SHIBYTE(v321) < 0)
  {
LABEL_461:
    operator delete((void *)v320);
    v179 = *(std::__shared_weak_count **)(v4 + 640);
    if (!v179)
      goto LABEL_470;
    goto LABEL_467;
  }
LABEL_466:
  v179 = *(std::__shared_weak_count **)(v4 + 640);
  if (!v179)
  {
LABEL_470:
    v314 = 0;
    v315 = 0;
    v316 = 0;
    v183 = 0;
    goto LABEL_487;
  }
LABEL_467:
  v180 = std::__shared_weak_count::lock(v179);
  *((_QWORD *)&v319 + 1) = v180;
  if (!v180)
    goto LABEL_470;
  v181 = v180;
  v182 = *(_QWORD *)(v4 + 632);
  *(_QWORD *)&v319 = v182;
  if (v182)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v182 + 24))(&v314);
  }
  else
  {
    v314 = 0;
    v315 = 0;
    v316 = 0;
  }
  v184 = (unint64_t *)&v181->__shared_owners_;
  do
    v185 = __ldaxr(v184);
  while (__stlxr(v185 - 1, v184));
  if (v185)
  {
    v183 = v314;
    v186 = v315;
    if (v314 == v315)
      goto LABEL_487;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
    std::__shared_weak_count::__release_weak(v181);
    v183 = v314;
    v186 = v315;
    if (v314 == v315)
      goto LABEL_487;
  }
  do
  {
    *(_QWORD *)&v319 = v149;
    *((_QWORD *)&v319 + 1) = *v183;
    v321 = 0;
    v320 = 0uLL;
    v187 = v309;
    if ((unint64_t)v309 < v310)
    {
      *(_OWORD *)v309 = v319;
      *((_QWORD *)v187 + 3) = 0;
      *((_QWORD *)v187 + 4) = 0;
      *((_QWORD *)v187 + 2) = 0;
      v309 = v187 + 40;
    }
    else
    {
      v309 = sub_223628FA4(&v308, (uint64_t)&v319);
      if (SHIBYTE(v321) < 0)
        operator delete((void *)v320);
    }
    ++v183;
  }
  while (v183 != v186);
  v183 = v314;
LABEL_487:
  if (v183)
  {
    v315 = v183;
    operator delete(v183);
  }
  v188 = *(std::__shared_weak_count **)(v4 + 640);
  if (!v188 || (v189 = std::__shared_weak_count::lock(v188), (*((_QWORD *)&v319 + 1) = v189) == 0))
  {
    v314 = 0;
    v315 = 0;
    v316 = 0;
    v192 = 0;
    goto LABEL_508;
  }
  v190 = v189;
  v191 = *(_QWORD *)(v4 + 632);
  *(_QWORD *)&v319 = v191;
  if (v191)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v191 + 32))(&v314);
  }
  else
  {
    v314 = 0;
    v315 = 0;
    v316 = 0;
  }
  v193 = (unint64_t *)&v190->__shared_owners_;
  do
    v194 = __ldaxr(v193);
  while (__stlxr(v194 - 1, v193));
  if (v194)
  {
    v192 = v314;
    v195 = v315;
    if (v314 == v315)
      goto LABEL_508;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
    std::__shared_weak_count::__release_weak(v190);
    v192 = v314;
    v195 = v315;
    if (v314 == v315)
      goto LABEL_508;
  }
  v196 = v149 + 1;
  do
  {
    *(_QWORD *)&v319 = v196;
    *((_QWORD *)&v319 + 1) = *v192;
    v321 = 0;
    v320 = 0uLL;
    v197 = v309;
    if ((unint64_t)v309 < v310)
    {
      *(_OWORD *)v309 = v319;
      *((_QWORD *)v197 + 3) = 0;
      *((_QWORD *)v197 + 4) = 0;
      *((_QWORD *)v197 + 2) = 0;
      v309 = v197 + 40;
    }
    else
    {
      v309 = sub_223628FA4(&v308, (uint64_t)&v319);
      if (SHIBYTE(v321) < 0)
        operator delete((void *)v320);
    }
    ++v192;
  }
  while (v192 != v195);
  v192 = v314;
LABEL_508:
  if (v192)
  {
    v315 = v192;
    operator delete(v192);
  }
  if (SHIBYTE(v318) < 0)
  {
    operator delete(v317[0]);
    if ((SHIBYTE(v326) & 0x80000000) == 0)
    {
LABEL_512:
      if ((SHIBYTE(v328) & 0x80000000) == 0)
        goto LABEL_513;
LABEL_517:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 703) & 0x80000000) == 0)
        goto LABEL_514;
      goto LABEL_518;
    }
  }
  else if ((SHIBYTE(v326) & 0x80000000) == 0)
  {
    goto LABEL_512;
  }
  operator delete((void *)v325);
  if (SHIBYTE(v328) < 0)
    goto LABEL_517;
LABEL_513:
  if ((*(char *)(v4 + 703) & 0x80000000) == 0)
  {
LABEL_514:
    __dst = *(_OWORD *)(v4 + 680);
    v328 = *(_QWORD *)(v4 + 696);
    goto LABEL_519;
  }
LABEL_518:
  sub_223197FA4(&__dst, *(void **)(v4 + 680), *(_QWORD *)(v4 + 688));
LABEL_519:
  v198 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 768) + 48))(*(_QWORD *)(v4 + 768));
  sub_22362C2A0();
  if (byte_255792EF7 < 0)
  {
    sub_223197FA4(&v325, (void *)xmmword_255792EE0, *((unint64_t *)&xmmword_255792EE0 + 1));
  }
  else
  {
    v325 = xmmword_255792EE0;
    v326 = unk_255792EF0;
  }
  v199 = HIBYTE(v326);
  if (v326 >= 0)
  {
    v200 = &v325;
  }
  else
  {
    v199 = *((_QWORD *)&v325 + 1);
    v200 = (__int128 *)v325;
  }
  if (v199 >= 4)
  {
    v201 = (char *)v200 + v199;
    v202 = v200;
    do
    {
      v203 = (char *)memchr(v202, 118, v199 - 3);
      if (!v203)
        break;
      if (*(_DWORD *)v203 == 1684631414)
      {
        if (v203 == v201 || v203 - (char *)v200 == -1)
          break;
        *(_QWORD *)&v319 = v198;
        DWORD2(v319) = 4;
        if (SHIBYTE(v328) < 0)
        {
          sub_223197FA4(&v320, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v320 = __dst;
          v321 = v328;
        }
        if (*(char *)(v4 + 727) < 0)
        {
          sub_223197FA4(&__p, *(void **)(v4 + 704), *(_QWORD *)(v4 + 712));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 704);
          *(_QWORD *)v323 = *(_QWORD *)(v4 + 720);
        }
        sub_22362CBC4();
        if (byte_255792FE7 < 0)
        {
          sub_223197FA4(&v323[8], (void *)xmmword_255792FD0, *((unint64_t *)&xmmword_255792FD0 + 1));
        }
        else
        {
          *(_OWORD *)&v323[8] = xmmword_255792FD0;
          v324 = unk_255792FE0;
        }
        v204 = v312;
        if ((unint64_t)v312 < v313)
          goto LABEL_545;
        goto LABEL_548;
      }
      v202 = (__int128 *)(v203 + 1);
      v199 = v201 - (char *)v202;
    }
    while (v201 - (char *)v202 >= 4);
  }
  *(_QWORD *)&v319 = v198;
  DWORD2(v319) = 2;
  if (SHIBYTE(v328) < 0)
  {
    sub_223197FA4(&v320, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v320 = __dst;
    v321 = v328;
  }
  if (*(char *)(v4 + 727) < 0)
  {
    sub_223197FA4(&__p, *(void **)(v4 + 704), *(_QWORD *)(v4 + 712));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 704);
    *(_QWORD *)v323 = *(_QWORD *)(v4 + 720);
  }
  sub_22362CBC4();
  if (byte_255792FE7 < 0)
  {
    sub_223197FA4(&v323[8], (void *)xmmword_255792FD0, *((unint64_t *)&xmmword_255792FD0 + 1));
  }
  else
  {
    *(_OWORD *)&v323[8] = xmmword_255792FD0;
    v324 = unk_255792FE0;
  }
  v204 = v312;
  if ((unint64_t)v312 >= v313)
  {
LABEL_548:
    v312 = sub_2236285DC((char **)&v311, (uint64_t)&v319);
    if (SHIBYTE(v324) < 0)
    {
      operator delete(*(void **)&v323[8]);
      if ((v323[7] & 0x80000000) == 0)
        goto LABEL_550;
    }
    else if ((v323[7] & 0x80000000) == 0)
    {
      goto LABEL_550;
    }
LABEL_546:
    operator delete((void *)__p);
    if ((SHIBYTE(v321) & 0x80000000) == 0)
      goto LABEL_551;
    goto LABEL_547;
  }
LABEL_545:
  v205 = v319;
  *((_DWORD *)v204 + 2) = DWORD2(v319);
  *(_QWORD *)v204 = v205;
  v206 = v320;
  *((_QWORD *)v204 + 4) = v321;
  *((_OWORD *)v204 + 1) = v206;
  v321 = 0;
  v320 = 0uLL;
  v207 = *(_QWORD *)v323;
  *(_OWORD *)(v204 + 40) = __p;
  *((_QWORD *)v204 + 7) = v207;
  *(_QWORD *)v323 = 0;
  __p = 0uLL;
  v208 = *(_OWORD *)&v323[8];
  *((_QWORD *)v204 + 10) = v324;
  *((_OWORD *)v204 + 4) = v208;
  *(_QWORD *)&v323[8] = 0;
  *(_QWORD *)&v323[16] = 0;
  v324 = 0;
  v312 = v204 + 88;
  if ((v323[7] & 0x80000000) != 0)
    goto LABEL_546;
LABEL_550:
  if (SHIBYTE(v321) < 0)
LABEL_547:
    operator delete((void *)v320);
LABEL_551:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v317, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v317 = xmmword_2540CBC48;
    v318 = unk_2540CBC58;
  }
  v209 = HIBYTE(v318);
  if (v318 >= 0)
  {
    v210 = v317;
  }
  else
  {
    v209 = (uint64_t)v317[1];
    v210 = (void **)v317[0];
  }
  if (v209 >= 18)
  {
    v211 = (char *)v210 + v209;
    v212 = v210;
    do
    {
      v213 = (char *)memchr(v212, 67, v209 - 17);
      if (!v213)
        break;
      if (*(_QWORD *)v213 == 0x456C656E6E616843
        && *((_QWORD *)v213 + 1) == 0x696F763C726F7272
        && *((_WORD *)v213 + 8) == 15972)
      {
        if (v213 != v211 && v213 - (char *)v210 != -1)
          goto LABEL_595;
        break;
      }
      v212 = (void **)(v213 + 1);
      v209 = v211 - (char *)v212;
    }
    while (v211 - (char *)v212 >= 18);
  }
  *(_QWORD *)&v319 = v198 + 1;
  DWORD2(v319) = 3;
  v216 = SHIBYTE(v328);
  if (v328 >= 0)
    v217 = HIBYTE(v328);
  else
    v217 = *((_QWORD *)&__dst + 1);
  v218 = v217 + 6;
  if (v217 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v218 >= 0x17)
  {
    v220 = (v218 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v218 | 7) != 0x17)
      v220 = v218 | 7;
    v221 = v220 + 1;
    v219 = (__int128 *)operator new(v220 + 1);
    *((_QWORD *)&v320 + 1) = v217 + 6;
    v321 = v221 | 0x8000000000000000;
    *(_QWORD *)&v320 = v219;
  }
  else
  {
    v321 = 0;
    v320 = 0uLL;
    v219 = &v320;
    HIBYTE(v321) = v217 + 6;
    if (!v217)
      goto LABEL_587;
  }
  if (v216 >= 0)
    v222 = &__dst;
  else
    v222 = (__int128 *)__dst;
  memmove(v219, v222, v217);
LABEL_587:
  strcpy((char *)v219 + v217, ".Error");
  *(_WORD *)&v323[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v324) = 0;
  v223 = v312;
  if ((unint64_t)v312 >= v313)
  {
    v312 = sub_2236285DC((char **)&v311, (uint64_t)&v319);
    if (SHIBYTE(v324) < 0)
    {
      operator delete(*(void **)&v323[8]);
      if ((v323[7] & 0x80000000) == 0)
        goto LABEL_594;
    }
    else if ((v323[7] & 0x80000000) == 0)
    {
      goto LABEL_594;
    }
LABEL_589:
    operator delete((void *)__p);
    if (SHIBYTE(v321) < 0)
      goto LABEL_590;
    goto LABEL_595;
  }
  v224 = v319;
  *((_DWORD *)v312 + 2) = DWORD2(v319);
  *(_QWORD *)v223 = v224;
  v225 = v320;
  *((_QWORD *)v223 + 4) = v321;
  *((_OWORD *)v223 + 1) = v225;
  v321 = 0;
  v320 = 0uLL;
  v226 = *(_QWORD *)v323;
  *(_OWORD *)(v223 + 40) = __p;
  *((_QWORD *)v223 + 7) = v226;
  *(_QWORD *)v323 = 0;
  __p = 0uLL;
  v227 = *(_OWORD *)&v323[8];
  *((_QWORD *)v223 + 10) = v324;
  *((_OWORD *)v223 + 4) = v227;
  *(_QWORD *)&v323[8] = 0;
  *(_QWORD *)&v323[16] = 0;
  v324 = 0;
  v312 = v223 + 88;
  if ((v323[7] & 0x80000000) != 0)
    goto LABEL_589;
LABEL_594:
  if (SHIBYTE(v321) < 0)
  {
LABEL_590:
    operator delete((void *)v320);
    v228 = *(std::__shared_weak_count **)(v4 + 808);
    if (!v228)
      goto LABEL_599;
    goto LABEL_596;
  }
LABEL_595:
  v228 = *(std::__shared_weak_count **)(v4 + 808);
  if (!v228)
  {
LABEL_599:
    v314 = 0;
    v315 = 0;
    v316 = 0;
    v232 = 0;
    goto LABEL_616;
  }
LABEL_596:
  v229 = std::__shared_weak_count::lock(v228);
  *((_QWORD *)&v319 + 1) = v229;
  if (!v229)
    goto LABEL_599;
  v230 = v229;
  v231 = *(_QWORD *)(v4 + 800);
  *(_QWORD *)&v319 = v231;
  if (v231)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v231 + 24))(&v314);
  }
  else
  {
    v314 = 0;
    v315 = 0;
    v316 = 0;
  }
  v233 = (unint64_t *)&v230->__shared_owners_;
  do
    v234 = __ldaxr(v233);
  while (__stlxr(v234 - 1, v233));
  if (v234)
  {
    v232 = v314;
    v235 = v315;
    if (v314 == v315)
      goto LABEL_616;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
    std::__shared_weak_count::__release_weak(v230);
    v232 = v314;
    v235 = v315;
    if (v314 == v315)
      goto LABEL_616;
  }
  do
  {
    *(_QWORD *)&v319 = v198;
    *((_QWORD *)&v319 + 1) = *v232;
    v321 = 0;
    v320 = 0uLL;
    v236 = v309;
    if ((unint64_t)v309 < v310)
    {
      *(_OWORD *)v309 = v319;
      *((_QWORD *)v236 + 3) = 0;
      *((_QWORD *)v236 + 4) = 0;
      *((_QWORD *)v236 + 2) = 0;
      v309 = v236 + 40;
    }
    else
    {
      v309 = sub_223628FA4(&v308, (uint64_t)&v319);
      if (SHIBYTE(v321) < 0)
        operator delete((void *)v320);
    }
    ++v232;
  }
  while (v232 != v235);
  v232 = v314;
LABEL_616:
  if (v232)
  {
    v315 = v232;
    operator delete(v232);
  }
  v237 = *(std::__shared_weak_count **)(v4 + 808);
  if (!v237 || (v238 = std::__shared_weak_count::lock(v237), (*((_QWORD *)&v319 + 1) = v238) == 0))
  {
    v314 = 0;
    v315 = 0;
    v316 = 0;
    v241 = 0;
    goto LABEL_637;
  }
  v239 = v238;
  v240 = *(_QWORD *)(v4 + 800);
  *(_QWORD *)&v319 = v240;
  if (v240)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v240 + 32))(&v314);
  }
  else
  {
    v314 = 0;
    v315 = 0;
    v316 = 0;
  }
  v242 = (unint64_t *)&v239->__shared_owners_;
  do
    v243 = __ldaxr(v242);
  while (__stlxr(v243 - 1, v242));
  if (v243)
  {
    v241 = v314;
    v244 = v315;
    if (v314 == v315)
      goto LABEL_637;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
    std::__shared_weak_count::__release_weak(v239);
    v241 = v314;
    v244 = v315;
    if (v314 == v315)
      goto LABEL_637;
  }
  v245 = v198 + 1;
  do
  {
    *(_QWORD *)&v319 = v245;
    *((_QWORD *)&v319 + 1) = *v241;
    v321 = 0;
    v320 = 0uLL;
    v246 = v309;
    if ((unint64_t)v309 < v310)
    {
      *(_OWORD *)v309 = v319;
      *((_QWORD *)v246 + 3) = 0;
      *((_QWORD *)v246 + 4) = 0;
      *((_QWORD *)v246 + 2) = 0;
      v309 = v246 + 40;
    }
    else
    {
      v309 = sub_223628FA4(&v308, (uint64_t)&v319);
      if (SHIBYTE(v321) < 0)
        operator delete((void *)v320);
    }
    ++v241;
  }
  while (v241 != v244);
  v241 = v314;
LABEL_637:
  if (v241)
  {
    v315 = v241;
    operator delete(v241);
  }
  if (SHIBYTE(v318) < 0)
  {
    operator delete(v317[0]);
    if ((SHIBYTE(v326) & 0x80000000) == 0)
    {
LABEL_641:
      if ((SHIBYTE(v328) & 0x80000000) == 0)
        goto LABEL_642;
LABEL_646:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 871) & 0x80000000) == 0)
        goto LABEL_643;
      goto LABEL_647;
    }
  }
  else if ((SHIBYTE(v326) & 0x80000000) == 0)
  {
    goto LABEL_641;
  }
  operator delete((void *)v325);
  if (SHIBYTE(v328) < 0)
    goto LABEL_646;
LABEL_642:
  if ((*(char *)(v4 + 871) & 0x80000000) == 0)
  {
LABEL_643:
    __dst = *(_OWORD *)(v4 + 848);
    v328 = *(_QWORD *)(v4 + 864);
    goto LABEL_648;
  }
LABEL_647:
  sub_223197FA4(&__dst, *(void **)(v4 + 848), *(_QWORD *)(v4 + 856));
LABEL_648:
  v247 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 936) + 48))(*(_QWORD *)(v4 + 936));
  sub_22362CD88();
  if (byte_25579302F < 0)
  {
    sub_223197FA4(&v325, (void *)xmmword_255793018, *((unint64_t *)&xmmword_255793018 + 1));
  }
  else
  {
    v325 = xmmword_255793018;
    v326 = unk_255793028;
  }
  v248 = HIBYTE(v326);
  if (v326 >= 0)
  {
    v249 = &v325;
  }
  else
  {
    v248 = *((_QWORD *)&v325 + 1);
    v249 = (__int128 *)v325;
  }
  if (v248 >= 4)
  {
    v250 = (char *)v249 + v248;
    v251 = v249;
    do
    {
      v252 = (char *)memchr(v251, 118, v248 - 3);
      if (!v252)
        break;
      if (*(_DWORD *)v252 == 1684631414)
      {
        if (v252 == v250 || v252 - (char *)v249 == -1)
          break;
        *(_QWORD *)&v319 = v247;
        DWORD2(v319) = 4;
        if (SHIBYTE(v328) < 0)
        {
          sub_223197FA4(&v320, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v320 = __dst;
          v321 = v328;
        }
        if (*(char *)(v4 + 895) < 0)
        {
          sub_223197FA4(&__p, *(void **)(v4 + 872), *(_QWORD *)(v4 + 880));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 872);
          *(_QWORD *)v323 = *(_QWORD *)(v4 + 888);
        }
        sub_22362D6AC();
        if (byte_25579311F < 0)
        {
          sub_223197FA4(&v323[8], (void *)xmmword_255793108, *((unint64_t *)&xmmword_255793108 + 1));
        }
        else
        {
          *(_OWORD *)&v323[8] = xmmword_255793108;
          v324 = unk_255793118;
        }
        v253 = v312;
        if ((unint64_t)v312 < v313)
          goto LABEL_674;
        goto LABEL_677;
      }
      v251 = (__int128 *)(v252 + 1);
      v248 = v250 - (char *)v251;
    }
    while (v250 - (char *)v251 >= 4);
  }
  *(_QWORD *)&v319 = v247;
  DWORD2(v319) = 2;
  if (SHIBYTE(v328) < 0)
  {
    sub_223197FA4(&v320, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v320 = __dst;
    v321 = v328;
  }
  if (*(char *)(v4 + 895) < 0)
  {
    sub_223197FA4(&__p, *(void **)(v4 + 872), *(_QWORD *)(v4 + 880));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 872);
    *(_QWORD *)v323 = *(_QWORD *)(v4 + 888);
  }
  sub_22362D6AC();
  if (byte_25579311F < 0)
  {
    sub_223197FA4(&v323[8], (void *)xmmword_255793108, *((unint64_t *)&xmmword_255793108 + 1));
  }
  else
  {
    *(_OWORD *)&v323[8] = xmmword_255793108;
    v324 = unk_255793118;
  }
  v253 = v312;
  if ((unint64_t)v312 >= v313)
  {
LABEL_677:
    v312 = sub_2236285DC((char **)&v311, (uint64_t)&v319);
    if (SHIBYTE(v324) < 0)
    {
      operator delete(*(void **)&v323[8]);
      if ((v323[7] & 0x80000000) == 0)
        goto LABEL_679;
    }
    else if ((v323[7] & 0x80000000) == 0)
    {
      goto LABEL_679;
    }
LABEL_675:
    operator delete((void *)__p);
    if ((SHIBYTE(v321) & 0x80000000) == 0)
      goto LABEL_680;
    goto LABEL_676;
  }
LABEL_674:
  v254 = v319;
  *((_DWORD *)v253 + 2) = DWORD2(v319);
  *(_QWORD *)v253 = v254;
  v255 = v320;
  *((_QWORD *)v253 + 4) = v321;
  *((_OWORD *)v253 + 1) = v255;
  v321 = 0;
  v320 = 0uLL;
  v256 = *(_QWORD *)v323;
  *(_OWORD *)(v253 + 40) = __p;
  *((_QWORD *)v253 + 7) = v256;
  *(_QWORD *)v323 = 0;
  __p = 0uLL;
  v257 = *(_OWORD *)&v323[8];
  *((_QWORD *)v253 + 10) = v324;
  *((_OWORD *)v253 + 4) = v257;
  *(_QWORD *)&v323[8] = 0;
  *(_QWORD *)&v323[16] = 0;
  v324 = 0;
  v312 = v253 + 88;
  if ((v323[7] & 0x80000000) != 0)
    goto LABEL_675;
LABEL_679:
  if (SHIBYTE(v321) < 0)
LABEL_676:
    operator delete((void *)v320);
LABEL_680:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v317, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v317 = xmmword_2540CBC48;
    v318 = unk_2540CBC58;
  }
  v258 = HIBYTE(v318);
  if (v318 >= 0)
  {
    v259 = v317;
  }
  else
  {
    v258 = (uint64_t)v317[1];
    v259 = (void **)v317[0];
  }
  if (v258 >= 18)
  {
    v260 = (char *)v259 + v258;
    v261 = v259;
    do
    {
      v262 = (char *)memchr(v261, 67, v258 - 17);
      if (!v262)
        break;
      if (*(_QWORD *)v262 == 0x456C656E6E616843
        && *((_QWORD *)v262 + 1) == 0x696F763C726F7272
        && *((_WORD *)v262 + 8) == 15972)
      {
        if (v262 != v260 && v262 - (char *)v259 != -1)
          goto LABEL_724;
        break;
      }
      v261 = (void **)(v262 + 1);
      v258 = v260 - (char *)v261;
    }
    while (v260 - (char *)v261 >= 18);
  }
  *(_QWORD *)&v319 = v247 + 1;
  DWORD2(v319) = 3;
  v265 = SHIBYTE(v328);
  if (v328 >= 0)
    v266 = HIBYTE(v328);
  else
    v266 = *((_QWORD *)&__dst + 1);
  v267 = v266 + 6;
  if (v266 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v267 >= 0x17)
  {
    v269 = (v267 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v267 | 7) != 0x17)
      v269 = v267 | 7;
    v270 = v269 + 1;
    v268 = (__int128 *)operator new(v269 + 1);
    *((_QWORD *)&v320 + 1) = v266 + 6;
    v321 = v270 | 0x8000000000000000;
    *(_QWORD *)&v320 = v268;
  }
  else
  {
    v321 = 0;
    v320 = 0uLL;
    v268 = &v320;
    HIBYTE(v321) = v266 + 6;
    if (!v266)
      goto LABEL_716;
  }
  if (v265 >= 0)
    v271 = &__dst;
  else
    v271 = (__int128 *)__dst;
  memmove(v268, v271, v266);
LABEL_716:
  strcpy((char *)v268 + v266, ".Error");
  *(_WORD *)&v323[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v324) = 0;
  v272 = v312;
  if ((unint64_t)v312 >= v313)
  {
    v312 = sub_2236285DC((char **)&v311, (uint64_t)&v319);
    if (SHIBYTE(v324) < 0)
    {
      operator delete(*(void **)&v323[8]);
      if ((v323[7] & 0x80000000) == 0)
        goto LABEL_723;
    }
    else if ((v323[7] & 0x80000000) == 0)
    {
      goto LABEL_723;
    }
LABEL_718:
    operator delete((void *)__p);
    if (SHIBYTE(v321) < 0)
      goto LABEL_719;
    goto LABEL_724;
  }
  v273 = v319;
  *((_DWORD *)v312 + 2) = DWORD2(v319);
  *(_QWORD *)v272 = v273;
  v274 = v320;
  *((_QWORD *)v272 + 4) = v321;
  *((_OWORD *)v272 + 1) = v274;
  v321 = 0;
  v320 = 0uLL;
  v275 = *(_QWORD *)v323;
  *(_OWORD *)(v272 + 40) = __p;
  *((_QWORD *)v272 + 7) = v275;
  *(_QWORD *)v323 = 0;
  __p = 0uLL;
  v276 = *(_OWORD *)&v323[8];
  *((_QWORD *)v272 + 10) = v324;
  *((_OWORD *)v272 + 4) = v276;
  *(_QWORD *)&v323[8] = 0;
  *(_QWORD *)&v323[16] = 0;
  v324 = 0;
  v312 = v272 + 88;
  if ((v323[7] & 0x80000000) != 0)
    goto LABEL_718;
LABEL_723:
  if (SHIBYTE(v321) < 0)
  {
LABEL_719:
    operator delete((void *)v320);
    v277 = *(std::__shared_weak_count **)(v4 + 976);
    if (!v277)
      goto LABEL_728;
    goto LABEL_725;
  }
LABEL_724:
  v277 = *(std::__shared_weak_count **)(v4 + 976);
  if (!v277)
  {
LABEL_728:
    v314 = 0;
    v315 = 0;
    v316 = 0;
    v281 = 0;
    goto LABEL_745;
  }
LABEL_725:
  v278 = std::__shared_weak_count::lock(v277);
  *((_QWORD *)&v319 + 1) = v278;
  if (!v278)
    goto LABEL_728;
  v279 = v278;
  v280 = *(_QWORD *)(v4 + 968);
  *(_QWORD *)&v319 = v280;
  if (v280)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v280 + 24))(&v314);
  }
  else
  {
    v314 = 0;
    v315 = 0;
    v316 = 0;
  }
  v282 = (unint64_t *)&v279->__shared_owners_;
  do
    v283 = __ldaxr(v282);
  while (__stlxr(v283 - 1, v282));
  if (v283)
  {
    v281 = v314;
    v284 = v315;
    if (v314 == v315)
      goto LABEL_745;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
    std::__shared_weak_count::__release_weak(v279);
    v281 = v314;
    v284 = v315;
    if (v314 == v315)
      goto LABEL_745;
  }
  do
  {
    *(_QWORD *)&v319 = v247;
    *((_QWORD *)&v319 + 1) = *v281;
    v321 = 0;
    v320 = 0uLL;
    v285 = v309;
    if ((unint64_t)v309 < v310)
    {
      *(_OWORD *)v309 = v319;
      *((_QWORD *)v285 + 3) = 0;
      *((_QWORD *)v285 + 4) = 0;
      *((_QWORD *)v285 + 2) = 0;
      v309 = v285 + 40;
    }
    else
    {
      v309 = sub_223628FA4(&v308, (uint64_t)&v319);
      if (SHIBYTE(v321) < 0)
        operator delete((void *)v320);
    }
    ++v281;
  }
  while (v281 != v284);
  v281 = v314;
LABEL_745:
  if (v281)
  {
    v315 = v281;
    operator delete(v281);
  }
  v286 = *(std::__shared_weak_count **)(v4 + 976);
  if (!v286 || (v287 = std::__shared_weak_count::lock(v286), (*((_QWORD *)&v319 + 1) = v287) == 0))
  {
    v314 = 0;
    v315 = 0;
    v316 = 0;
    v290 = 0;
    goto LABEL_766;
  }
  v288 = v287;
  v289 = *(_QWORD *)(v4 + 968);
  *(_QWORD *)&v319 = v289;
  if (v289)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v289 + 32))(&v314);
  }
  else
  {
    v314 = 0;
    v315 = 0;
    v316 = 0;
  }
  v291 = (unint64_t *)&v288->__shared_owners_;
  do
    v292 = __ldaxr(v291);
  while (__stlxr(v292 - 1, v291));
  if (v292)
  {
    v290 = v314;
    v293 = v315;
    if (v314 == v315)
      goto LABEL_766;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
    std::__shared_weak_count::__release_weak(v288);
    v290 = v314;
    v293 = v315;
    if (v314 == v315)
      goto LABEL_766;
  }
  do
  {
    *(_QWORD *)&v319 = v247 + 1;
    *((_QWORD *)&v319 + 1) = *v290;
    v321 = 0;
    v320 = 0uLL;
    v294 = v309;
    if ((unint64_t)v309 < v310)
    {
      *(_OWORD *)v309 = v319;
      *((_QWORD *)v294 + 3) = 0;
      *((_QWORD *)v294 + 4) = 0;
      *((_QWORD *)v294 + 2) = 0;
      v309 = v294 + 40;
    }
    else
    {
      v309 = sub_223628FA4(&v308, (uint64_t)&v319);
      if (SHIBYTE(v321) < 0)
        operator delete((void *)v320);
    }
    ++v290;
  }
  while (v290 != v293);
  v290 = v314;
LABEL_766:
  if (v290)
  {
    v315 = v290;
    operator delete(v290);
  }
  if (SHIBYTE(v318) < 0)
  {
    operator delete(v317[0]);
    if ((SHIBYTE(v326) & 0x80000000) == 0)
    {
LABEL_770:
      if ((SHIBYTE(v328) & 0x80000000) == 0)
        goto LABEL_771;
LABEL_775:
      operator delete((void *)__dst);
      if ((*(char *)(v302 + 31) & 0x80000000) == 0)
        goto LABEL_772;
      goto LABEL_776;
    }
  }
  else if ((SHIBYTE(v326) & 0x80000000) == 0)
  {
    goto LABEL_770;
  }
  operator delete((void *)v325);
  if (SHIBYTE(v328) < 0)
    goto LABEL_775;
LABEL_771:
  if ((*(char *)(v302 + 31) & 0x80000000) == 0)
  {
LABEL_772:
    *(_OWORD *)v306 = *(_OWORD *)(v302 + 8);
    v307 = *(_QWORD *)(v302 + 24);
    goto LABEL_777;
  }
LABEL_776:
  sub_223197FA4(v306, *(void **)(v302 + 8), *(_QWORD *)(v302 + 16));
LABEL_777:
  v295 = *(_QWORD *)(v302 + 56) != 0;
  if (*(char *)(v302 + 55) < 0)
  {
    sub_223197FA4(v304, *(void **)(v302 + 32), *(_QWORD *)(v302 + 40));
  }
  else
  {
    *(_OWORD *)v304 = *(_OWORD *)(v302 + 32);
    v305 = *(_QWORD *)(v302 + 48);
  }
  sub_223629100(v303, (__int128 *)v306, v295, (uint64_t *)&v311, (uint64_t *)&v308, (__int128 *)v304);
  if (SHIBYTE(v305) < 0)
  {
    operator delete(v304[0]);
    if ((SHIBYTE(v307) & 0x80000000) == 0)
    {
LABEL_782:
      v296 = (char *)v308;
      if (v308)
        goto LABEL_783;
LABEL_793:
      v298 = (char *)v311;
      if (!v311)
        return;
LABEL_794:
      v299 = v312;
      v300 = v298;
      if (v312 == v298)
      {
LABEL_805:
        v312 = v298;
        operator delete(v300);
        return;
      }
      while (1)
      {
        while (*(v299 - 1) < 0)
        {
          operator delete(*((void **)v299 - 3));
          if (*(v299 - 25) < 0)
            goto LABEL_796;
LABEL_802:
          if ((*(v299 - 49) & 0x80000000) == 0)
            goto LABEL_797;
LABEL_803:
          operator delete(*((void **)v299 - 9));
          v299 -= 88;
          if (v299 == v298)
          {
LABEL_804:
            v300 = v311;
            goto LABEL_805;
          }
        }
        if ((*(v299 - 25) & 0x80000000) == 0)
          goto LABEL_802;
LABEL_796:
        operator delete(*((void **)v299 - 6));
        if (*(v299 - 49) < 0)
          goto LABEL_803;
LABEL_797:
        v299 -= 88;
        if (v299 == v298)
          goto LABEL_804;
      }
    }
  }
  else if ((SHIBYTE(v307) & 0x80000000) == 0)
  {
    goto LABEL_782;
  }
  operator delete(v306[0]);
  v296 = (char *)v308;
  if (!v308)
    goto LABEL_793;
LABEL_783:
  v297 = v309;
  if (v309 == v296)
  {
    v309 = v296;
    operator delete(v296);
    v298 = (char *)v311;
    if (!v311)
      return;
    goto LABEL_794;
  }
  do
  {
    if (*(v297 - 1) < 0)
      operator delete(*((void **)v297 - 3));
    v297 -= 40;
  }
  while (v297 != v296);
  v309 = v296;
  operator delete(v308);
  v298 = (char *)v311;
  if (v311)
    goto LABEL_794;
}

void sub_223614B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (a46 < 0)
    operator delete(__p);
  if (*(char *)(v52 - 137) < 0)
    operator delete(*(void **)(v52 - 160));
  if (*(char *)(v52 - 105) < 0)
    operator delete(*(void **)(v52 - 128));
  sub_223620C24(&a24);
  sub_223620C94(&a27);
  _Unwind_Resume(a1);
}

void sub_223614F40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  char *v9;
  __int128 *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  void **v14;
  char *v15;
  void **v16;
  char *v17;
  int v20;
  size_t v21;
  unint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *p_dst;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  _QWORD *v39;
  char *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  char *v54;
  __int128 *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  void **v63;
  char *v64;
  void **v65;
  char *v66;
  int v69;
  size_t v70;
  unint64_t v71;
  __int128 *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  char *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  _QWORD *v94;
  unint64_t *v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  __int128 *v102;
  char *v103;
  __int128 *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  void **v112;
  char *v113;
  void **v114;
  char *v115;
  int v118;
  size_t v119;
  unint64_t v120;
  __int128 *v121;
  uint64_t v122;
  uint64_t v123;
  __int128 *v124;
  char *v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  __int128 v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  _QWORD *v134;
  unint64_t *v135;
  unint64_t v136;
  _QWORD *v137;
  char *v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  _QWORD *v143;
  unint64_t *v144;
  unint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  __int128 *v151;
  char *v152;
  __int128 *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  void **v161;
  char *v162;
  void **v163;
  char *v164;
  int v167;
  size_t v168;
  unint64_t v169;
  __int128 *v170;
  uint64_t v171;
  uint64_t v172;
  __int128 *v173;
  char *v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  __int128 v178;
  std::__shared_weak_count *v179;
  std::__shared_weak_count *v180;
  std::__shared_weak_count *v181;
  uint64_t v182;
  _QWORD *v183;
  unint64_t *v184;
  unint64_t v185;
  _QWORD *v186;
  char *v187;
  std::__shared_weak_count *v188;
  std::__shared_weak_count *v189;
  std::__shared_weak_count *v190;
  uint64_t v191;
  _QWORD *v192;
  unint64_t *v193;
  unint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  __int128 *v200;
  char *v201;
  __int128 *v202;
  char *v203;
  char *v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;
  void **v210;
  char *v211;
  void **v212;
  char *v213;
  int v216;
  size_t v217;
  unint64_t v218;
  __int128 *v219;
  uint64_t v220;
  uint64_t v221;
  __int128 *v222;
  char *v223;
  uint64_t v224;
  __int128 v225;
  uint64_t v226;
  __int128 v227;
  std::__shared_weak_count *v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count *v230;
  uint64_t v231;
  _QWORD *v232;
  unint64_t *v233;
  unint64_t v234;
  _QWORD *v235;
  char *v236;
  std::__shared_weak_count *v237;
  std::__shared_weak_count *v238;
  std::__shared_weak_count *v239;
  uint64_t v240;
  _QWORD *v241;
  unint64_t *v242;
  unint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  __int128 *v249;
  char *v250;
  __int128 *v251;
  char *v252;
  char *v253;
  uint64_t v254;
  __int128 v255;
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  void **v259;
  char *v260;
  void **v261;
  char *v262;
  int v265;
  size_t v266;
  unint64_t v267;
  __int128 *v268;
  uint64_t v269;
  uint64_t v270;
  __int128 *v271;
  char *v272;
  uint64_t v273;
  __int128 v274;
  uint64_t v275;
  __int128 v276;
  std::__shared_weak_count *v277;
  std::__shared_weak_count *v278;
  std::__shared_weak_count *v279;
  uint64_t v280;
  _QWORD *v281;
  unint64_t *v282;
  unint64_t v283;
  _QWORD *v284;
  char *v285;
  std::__shared_weak_count *v286;
  std::__shared_weak_count *v287;
  std::__shared_weak_count *v288;
  uint64_t v289;
  _QWORD *v290;
  unint64_t *v291;
  unint64_t v292;
  _QWORD *v293;
  uint64_t v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  __int128 *v298;
  char *v299;
  __int128 *v300;
  char *v301;
  char *v302;
  uint64_t v303;
  __int128 v304;
  uint64_t v305;
  __int128 v306;
  uint64_t v307;
  void **v308;
  char *v309;
  void **v310;
  char *v311;
  int v314;
  size_t v315;
  unint64_t v316;
  __int128 *v317;
  uint64_t v318;
  uint64_t v319;
  __int128 *v320;
  char *v321;
  uint64_t v322;
  __int128 v323;
  uint64_t v324;
  __int128 v325;
  std::__shared_weak_count *v326;
  std::__shared_weak_count *v327;
  std::__shared_weak_count *v328;
  uint64_t v329;
  _QWORD *v330;
  unint64_t *v331;
  unint64_t v332;
  _QWORD *v333;
  char *v334;
  std::__shared_weak_count *v335;
  std::__shared_weak_count *v336;
  std::__shared_weak_count *v337;
  uint64_t v338;
  _QWORD *v339;
  unint64_t *v340;
  unint64_t v341;
  _QWORD *v342;
  char *v343;
  _BOOL4 v344;
  char *v345;
  char *v346;
  char *v347;
  char *v348;
  void *v349;
  __int128 v350;
  uint64_t v351;
  uint64_t v352;
  void *v353[2];
  uint64_t v354;
  void *v355[2];
  uint64_t v356;
  void *v357;
  char *v358;
  unint64_t v359;
  void *v360;
  char *v361;
  unint64_t v362;
  _QWORD *v363;
  _QWORD *v364;
  uint64_t v365;
  void *v366[2];
  uint64_t v367;
  __int128 v368;
  __int128 v369;
  unint64_t v370;
  __int128 __p;
  _BYTE v372[24];
  uint64_t v373;
  __int128 v374;
  uint64_t v375;
  __int128 __dst;
  int64_t v377;

  v360 = 0;
  v361 = 0;
  v362 = 0;
  v357 = 0;
  v358 = 0;
  v359 = 0;
  v4 = *(_QWORD *)(a2 + 72);
  if (v4)
  {
    v351 = a2;
    v352 = a1;
    if ((*(char *)(v4 + 31) & 0x80000000) == 0)
    {
LABEL_3:
      v5 = *(_OWORD *)(v4 + 8);
      v377 = *(_QWORD *)(v4 + 24);
      __dst = v5;
      goto LABEL_7;
    }
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *(_QWORD *)(a2 + 72);
    v351 = a2;
    v352 = a1;
    if ((*(char *)(v4 + 31) & 0x80000000) == 0)
      goto LABEL_3;
  }
  sub_223197FA4(&__dst, *(void **)(v4 + 8), *(_QWORD *)(v4 + 16));
LABEL_7:
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 96) + 48))(*(_QWORD *)(v4 + 96));
  sub_2236538B8();
  if (byte_255794757 < 0)
  {
    sub_223197FA4(&v374, (void *)xmmword_255794740, *((unint64_t *)&xmmword_255794740 + 1));
  }
  else
  {
    v374 = xmmword_255794740;
    v375 = unk_255794750;
  }
  v7 = HIBYTE(v375);
  if (v375 >= 0)
  {
    v8 = &v374;
  }
  else
  {
    v7 = *((_QWORD *)&v374 + 1);
    v8 = (__int128 *)v374;
  }
  if (v7 >= 4)
  {
    v9 = (char *)v8 + v7;
    v10 = v8;
    do
    {
      v11 = (char *)memchr(v10, 118, v7 - 3);
      if (!v11)
        break;
      if (*(_DWORD *)v11 == 1684631414)
      {
        if (v11 == v9 || v11 - (char *)v8 == -1)
          break;
        *(_QWORD *)&v368 = v6;
        DWORD2(v368) = 4;
        if (SHIBYTE(v377) < 0)
        {
          sub_223197FA4(&v369, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v369 = __dst;
          v370 = v377;
        }
        if (*(char *)(v4 + 55) < 0)
        {
          sub_223197FA4(&__p, *(void **)(v4 + 32), *(_QWORD *)(v4 + 40));
        }
        else
        {
          v350 = *(_OWORD *)(v4 + 32);
          *(_QWORD *)v372 = *(_QWORD *)(v4 + 48);
          __p = v350;
        }
        sub_223654A54();
        if ((byte_2557948EF & 0x80000000) == 0)
        {
          *(_OWORD *)&v372[8] = xmmword_2557948D8;
          v373 = unk_2557948E8;
          goto LABEL_34;
        }
        goto LABEL_31;
      }
      v10 = (__int128 *)(v11 + 1);
      v7 = v9 - (char *)v10;
    }
    while (v9 - (char *)v10 >= 4);
  }
  *(_QWORD *)&v368 = v6;
  DWORD2(v368) = 2;
  if (SHIBYTE(v377) < 0)
  {
    sub_223197FA4(&v369, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v369 = __dst;
    v370 = v377;
  }
  if (*(char *)(v4 + 55) < 0)
  {
    sub_223197FA4(&__p, *(void **)(v4 + 32), *(_QWORD *)(v4 + 40));
  }
  else
  {
    v12 = *(_OWORD *)(v4 + 32);
    *(_QWORD *)v372 = *(_QWORD *)(v4 + 48);
    __p = v12;
  }
  sub_223654A54();
  if (byte_2557948EF < 0)
  {
LABEL_31:
    sub_223197FA4(&v372[8], (void *)xmmword_2557948D8, *((unint64_t *)&xmmword_2557948D8 + 1));
  }
  else
  {
    *(_OWORD *)&v372[8] = xmmword_2557948D8;
    v373 = unk_2557948E8;
  }
LABEL_34:
  v361 = sub_2236285DC((char **)&v360, (uint64_t)&v368);
  if ((SHIBYTE(v373) & 0x80000000) == 0)
  {
    if ((v372[7] & 0x80000000) == 0)
      goto LABEL_36;
LABEL_32:
    operator delete((void *)__p);
    if ((SHIBYTE(v370) & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_33;
  }
  operator delete(*(void **)&v372[8]);
  if ((v372[7] & 0x80000000) != 0)
    goto LABEL_32;
LABEL_36:
  if (SHIBYTE(v370) < 0)
LABEL_33:
    operator delete((void *)v369);
LABEL_37:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v366, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v366 = xmmword_2540CBC48;
    v367 = unk_2540CBC58;
  }
  v13 = HIBYTE(v367);
  if (v367 >= 0)
  {
    v14 = v366;
  }
  else
  {
    v13 = (uint64_t)v366[1];
    v14 = (void **)v366[0];
  }
  if (v13 >= 18)
  {
    v15 = (char *)v14 + v13;
    v16 = v14;
    do
    {
      v17 = (char *)memchr(v16, 67, v13 - 17);
      if (!v17)
        break;
      if (*(_QWORD *)v17 == 0x456C656E6E616843
        && *((_QWORD *)v17 + 1) == 0x696F763C726F7272
        && *((_WORD *)v17 + 8) == 15972)
      {
        if (v17 != v15 && v17 - (char *)v14 != -1)
          goto LABEL_81;
        break;
      }
      v16 = (void **)(v17 + 1);
      v13 = v15 - (char *)v16;
    }
    while (v15 - (char *)v16 >= 18);
  }
  *(_QWORD *)&v368 = v6 + 1;
  DWORD2(v368) = 3;
  v20 = SHIBYTE(v377);
  if (v377 >= 0)
    v21 = HIBYTE(v377);
  else
    v21 = *((_QWORD *)&__dst + 1);
  v22 = v21 + 6;
  if (v21 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v22 >= 0x17)
  {
    v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v24 = v22 | 7;
    v25 = v24 + 1;
    v23 = (__int128 *)operator new(v24 + 1);
    *((_QWORD *)&v369 + 1) = v21 + 6;
    v370 = v25 | 0x8000000000000000;
    *(_QWORD *)&v369 = v23;
  }
  else
  {
    v370 = 0;
    v369 = 0uLL;
    v23 = &v369;
    HIBYTE(v370) = v21 + 6;
    if (!v21)
      goto LABEL_73;
  }
  if (v20 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
  memmove(v23, p_dst, v21);
LABEL_73:
  strcpy((char *)v23 + v21, ".Error");
  *(_WORD *)&v372[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v373) = 0;
  v27 = v361;
  if ((unint64_t)v361 >= v362)
  {
    v361 = sub_2236285DC((char **)&v360, (uint64_t)&v368);
    if (SHIBYTE(v373) < 0)
    {
      operator delete(*(void **)&v372[8]);
      if ((v372[7] & 0x80000000) == 0)
        goto LABEL_80;
    }
    else if ((v372[7] & 0x80000000) == 0)
    {
      goto LABEL_80;
    }
LABEL_75:
    operator delete((void *)__p);
    if (SHIBYTE(v370) < 0)
      goto LABEL_76;
    goto LABEL_81;
  }
  v28 = v368;
  *((_DWORD *)v361 + 2) = DWORD2(v368);
  *(_QWORD *)v27 = v28;
  v29 = v369;
  *((_QWORD *)v27 + 4) = v370;
  *((_OWORD *)v27 + 1) = v29;
  v370 = 0;
  v369 = 0uLL;
  v30 = *(_QWORD *)v372;
  *(_OWORD *)(v27 + 40) = __p;
  *((_QWORD *)v27 + 7) = v30;
  *(_QWORD *)v372 = 0;
  __p = 0uLL;
  v31 = *(_OWORD *)&v372[8];
  *((_QWORD *)v27 + 10) = v373;
  *((_OWORD *)v27 + 4) = v31;
  *(_QWORD *)&v372[8] = 0;
  *(_QWORD *)&v372[16] = 0;
  v373 = 0;
  v361 = v27 + 88;
  if ((v372[7] & 0x80000000) != 0)
    goto LABEL_75;
LABEL_80:
  if (SHIBYTE(v370) < 0)
  {
LABEL_76:
    operator delete((void *)v369);
    v32 = *(std::__shared_weak_count **)(v4 + 136);
    if (!v32)
      goto LABEL_85;
    goto LABEL_82;
  }
LABEL_81:
  v32 = *(std::__shared_weak_count **)(v4 + 136);
  if (!v32)
  {
LABEL_85:
    v363 = 0;
    v364 = 0;
    v365 = 0;
    v36 = 0;
    goto LABEL_100;
  }
LABEL_82:
  v33 = std::__shared_weak_count::lock(v32);
  *((_QWORD *)&v368 + 1) = v33;
  if (!v33)
    goto LABEL_85;
  v34 = v33;
  v35 = *(_QWORD *)(v4 + 128);
  *(_QWORD *)&v368 = v35;
  if (v35)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v35 + 24))(&v363);
  }
  else
  {
    v363 = 0;
    v364 = 0;
    v365 = 0;
  }
  p_shared_owners = (unint64_t *)&v34->__shared_owners_;
  do
    v38 = __ldaxr(p_shared_owners);
  while (__stlxr(v38 - 1, p_shared_owners));
  if (v38)
  {
    v36 = v363;
    v39 = v364;
    if (v363 == v364)
      goto LABEL_100;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    v36 = v363;
    v39 = v364;
    if (v363 == v364)
      goto LABEL_100;
  }
  do
  {
    *(_QWORD *)&v368 = v6;
    *((_QWORD *)&v368 + 1) = *v36;
    v370 = 0;
    v369 = 0uLL;
    v40 = v358;
    if ((unint64_t)v358 < v359)
    {
      *(_OWORD *)v358 = v368;
      *((_QWORD *)v40 + 3) = 0;
      *((_QWORD *)v40 + 4) = 0;
      *((_QWORD *)v40 + 2) = 0;
      v358 = v40 + 40;
    }
    else
    {
      v358 = sub_223628FA4(&v357, (uint64_t)&v368);
      if (SHIBYTE(v370) < 0)
        operator delete((void *)v369);
    }
    ++v36;
  }
  while (v36 != v39);
  v36 = v363;
LABEL_100:
  if (v36)
  {
    v364 = v36;
    operator delete(v36);
  }
  v41 = *(std::__shared_weak_count **)(v4 + 136);
  if (!v41 || (v42 = std::__shared_weak_count::lock(v41), (*((_QWORD *)&v368 + 1) = v42) == 0))
  {
    v363 = 0;
    v364 = 0;
    v365 = 0;
    v45 = 0;
    goto LABEL_121;
  }
  v43 = v42;
  v44 = *(_QWORD *)(v4 + 128);
  *(_QWORD *)&v368 = v44;
  if (v44)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v44 + 32))(&v363);
  }
  else
  {
    v363 = 0;
    v364 = 0;
    v365 = 0;
  }
  v46 = (unint64_t *)&v43->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (v47)
  {
    v45 = v363;
    v48 = v364;
    if (v363 == v364)
      goto LABEL_121;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
    v45 = v363;
    v48 = v364;
    if (v363 == v364)
      goto LABEL_121;
  }
  v49 = v6 + 1;
  do
  {
    *(_QWORD *)&v368 = v49;
    *((_QWORD *)&v368 + 1) = *v45;
    v370 = 0;
    v369 = 0uLL;
    v50 = v358;
    if ((unint64_t)v358 < v359)
    {
      *(_OWORD *)v358 = v368;
      *((_QWORD *)v50 + 3) = 0;
      *((_QWORD *)v50 + 4) = 0;
      *((_QWORD *)v50 + 2) = 0;
      v358 = v50 + 40;
    }
    else
    {
      v358 = sub_223628FA4(&v357, (uint64_t)&v368);
      if (SHIBYTE(v370) < 0)
        operator delete((void *)v369);
    }
    ++v45;
  }
  while (v45 != v48);
  v45 = v363;
LABEL_121:
  if (v45)
  {
    v364 = v45;
    operator delete(v45);
  }
  if (SHIBYTE(v367) < 0)
  {
    operator delete(v366[0]);
    if ((SHIBYTE(v375) & 0x80000000) == 0)
    {
LABEL_125:
      if ((SHIBYTE(v377) & 0x80000000) == 0)
        goto LABEL_126;
LABEL_130:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 199) & 0x80000000) == 0)
        goto LABEL_127;
      goto LABEL_131;
    }
  }
  else if ((SHIBYTE(v375) & 0x80000000) == 0)
  {
    goto LABEL_125;
  }
  operator delete((void *)v374);
  if (SHIBYTE(v377) < 0)
    goto LABEL_130;
LABEL_126:
  if ((*(char *)(v4 + 199) & 0x80000000) == 0)
  {
LABEL_127:
    __dst = *(_OWORD *)(v4 + 176);
    v377 = *(_QWORD *)(v4 + 192);
    goto LABEL_132;
  }
LABEL_131:
  sub_223197FA4(&__dst, *(void **)(v4 + 176), *(_QWORD *)(v4 + 184));
LABEL_132:
  v51 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 264) + 48))(*(_QWORD *)(v4 + 264));
  sub_2236538B8();
  if (byte_255794757 < 0)
  {
    sub_223197FA4(&v374, (void *)xmmword_255794740, *((unint64_t *)&xmmword_255794740 + 1));
  }
  else
  {
    v374 = xmmword_255794740;
    v375 = unk_255794750;
  }
  v52 = HIBYTE(v375);
  if (v375 >= 0)
  {
    v53 = &v374;
  }
  else
  {
    v52 = *((_QWORD *)&v374 + 1);
    v53 = (__int128 *)v374;
  }
  if (v52 >= 4)
  {
    v54 = (char *)v53 + v52;
    v55 = v53;
    do
    {
      v56 = (char *)memchr(v55, 118, v52 - 3);
      if (!v56)
        break;
      if (*(_DWORD *)v56 == 1684631414)
      {
        if (v56 == v54 || v56 - (char *)v53 == -1)
          break;
        *(_QWORD *)&v368 = v51;
        DWORD2(v368) = 4;
        if (SHIBYTE(v377) < 0)
        {
          sub_223197FA4(&v369, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v369 = __dst;
          v370 = v377;
        }
        if (*(char *)(v4 + 223) < 0)
        {
          sub_223197FA4(&__p, *(void **)(v4 + 200), *(_QWORD *)(v4 + 208));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 200);
          *(_QWORD *)v372 = *(_QWORD *)(v4 + 216);
        }
        sub_223654C18();
        if (byte_255794937 < 0)
        {
          sub_223197FA4(&v372[8], (void *)xmmword_255794920, *((unint64_t *)&xmmword_255794920 + 1));
        }
        else
        {
          *(_OWORD *)&v372[8] = xmmword_255794920;
          v373 = unk_255794930;
        }
        v57 = v361;
        if ((unint64_t)v361 < v362)
          goto LABEL_158;
        goto LABEL_161;
      }
      v55 = (__int128 *)(v56 + 1);
      v52 = v54 - (char *)v55;
    }
    while (v54 - (char *)v55 >= 4);
  }
  *(_QWORD *)&v368 = v51;
  DWORD2(v368) = 2;
  if (SHIBYTE(v377) < 0)
  {
    sub_223197FA4(&v369, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v369 = __dst;
    v370 = v377;
  }
  if (*(char *)(v4 + 223) < 0)
  {
    sub_223197FA4(&__p, *(void **)(v4 + 200), *(_QWORD *)(v4 + 208));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 200);
    *(_QWORD *)v372 = *(_QWORD *)(v4 + 216);
  }
  sub_223654C18();
  if (byte_255794937 < 0)
  {
    sub_223197FA4(&v372[8], (void *)xmmword_255794920, *((unint64_t *)&xmmword_255794920 + 1));
  }
  else
  {
    *(_OWORD *)&v372[8] = xmmword_255794920;
    v373 = unk_255794930;
  }
  v57 = v361;
  if ((unint64_t)v361 >= v362)
  {
LABEL_161:
    v361 = sub_2236285DC((char **)&v360, (uint64_t)&v368);
    if (SHIBYTE(v373) < 0)
    {
      operator delete(*(void **)&v372[8]);
      if ((v372[7] & 0x80000000) == 0)
        goto LABEL_163;
    }
    else if ((v372[7] & 0x80000000) == 0)
    {
      goto LABEL_163;
    }
LABEL_159:
    operator delete((void *)__p);
    if ((SHIBYTE(v370) & 0x80000000) == 0)
      goto LABEL_164;
    goto LABEL_160;
  }
LABEL_158:
  v58 = v368;
  *((_DWORD *)v57 + 2) = DWORD2(v368);
  *(_QWORD *)v57 = v58;
  v59 = v369;
  *((_QWORD *)v57 + 4) = v370;
  *((_OWORD *)v57 + 1) = v59;
  v370 = 0;
  v369 = 0uLL;
  v60 = *(_QWORD *)v372;
  *(_OWORD *)(v57 + 40) = __p;
  *((_QWORD *)v57 + 7) = v60;
  *(_QWORD *)v372 = 0;
  __p = 0uLL;
  v61 = *(_OWORD *)&v372[8];
  *((_QWORD *)v57 + 10) = v373;
  *((_OWORD *)v57 + 4) = v61;
  *(_QWORD *)&v372[8] = 0;
  *(_QWORD *)&v372[16] = 0;
  v373 = 0;
  v361 = v57 + 88;
  if ((v372[7] & 0x80000000) != 0)
    goto LABEL_159;
LABEL_163:
  if (SHIBYTE(v370) < 0)
LABEL_160:
    operator delete((void *)v369);
LABEL_164:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v366, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v366 = xmmword_2540CBC48;
    v367 = unk_2540CBC58;
  }
  v62 = HIBYTE(v367);
  if (v367 >= 0)
  {
    v63 = v366;
  }
  else
  {
    v62 = (uint64_t)v366[1];
    v63 = (void **)v366[0];
  }
  if (v62 >= 18)
  {
    v64 = (char *)v63 + v62;
    v65 = v63;
    do
    {
      v66 = (char *)memchr(v65, 67, v62 - 17);
      if (!v66)
        break;
      if (*(_QWORD *)v66 == 0x456C656E6E616843
        && *((_QWORD *)v66 + 1) == 0x696F763C726F7272
        && *((_WORD *)v66 + 8) == 15972)
      {
        if (v66 != v64 && v66 - (char *)v63 != -1)
          goto LABEL_208;
        break;
      }
      v65 = (void **)(v66 + 1);
      v62 = v64 - (char *)v65;
    }
    while (v64 - (char *)v65 >= 18);
  }
  *(_QWORD *)&v368 = v51 + 1;
  DWORD2(v368) = 3;
  v69 = SHIBYTE(v377);
  if (v377 >= 0)
    v70 = HIBYTE(v377);
  else
    v70 = *((_QWORD *)&__dst + 1);
  v71 = v70 + 6;
  if (v70 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v71 >= 0x17)
  {
    v73 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v71 | 7) != 0x17)
      v73 = v71 | 7;
    v74 = v73 + 1;
    v72 = (__int128 *)operator new(v73 + 1);
    *((_QWORD *)&v369 + 1) = v70 + 6;
    v370 = v74 | 0x8000000000000000;
    *(_QWORD *)&v369 = v72;
  }
  else
  {
    v370 = 0;
    v369 = 0uLL;
    v72 = &v369;
    HIBYTE(v370) = v70 + 6;
    if (!v70)
      goto LABEL_200;
  }
  if (v69 >= 0)
    v75 = &__dst;
  else
    v75 = (__int128 *)__dst;
  memmove(v72, v75, v70);
LABEL_200:
  strcpy((char *)v72 + v70, ".Error");
  *(_WORD *)&v372[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v373) = 0;
  v76 = v361;
  if ((unint64_t)v361 >= v362)
  {
    v361 = sub_2236285DC((char **)&v360, (uint64_t)&v368);
    if (SHIBYTE(v373) < 0)
    {
      operator delete(*(void **)&v372[8]);
      if ((v372[7] & 0x80000000) == 0)
        goto LABEL_207;
    }
    else if ((v372[7] & 0x80000000) == 0)
    {
      goto LABEL_207;
    }
LABEL_202:
    operator delete((void *)__p);
    if (SHIBYTE(v370) < 0)
      goto LABEL_203;
    goto LABEL_208;
  }
  v77 = v368;
  *((_DWORD *)v361 + 2) = DWORD2(v368);
  *(_QWORD *)v76 = v77;
  v78 = v369;
  *((_QWORD *)v76 + 4) = v370;
  *((_OWORD *)v76 + 1) = v78;
  v370 = 0;
  v369 = 0uLL;
  v79 = *(_QWORD *)v372;
  *(_OWORD *)(v76 + 40) = __p;
  *((_QWORD *)v76 + 7) = v79;
  *(_QWORD *)v372 = 0;
  __p = 0uLL;
  v80 = *(_OWORD *)&v372[8];
  *((_QWORD *)v76 + 10) = v373;
  *((_OWORD *)v76 + 4) = v80;
  *(_QWORD *)&v372[8] = 0;
  *(_QWORD *)&v372[16] = 0;
  v373 = 0;
  v361 = v76 + 88;
  if ((v372[7] & 0x80000000) != 0)
    goto LABEL_202;
LABEL_207:
  if (SHIBYTE(v370) < 0)
  {
LABEL_203:
    operator delete((void *)v369);
    v81 = *(std::__shared_weak_count **)(v4 + 304);
    if (!v81)
      goto LABEL_212;
    goto LABEL_209;
  }
LABEL_208:
  v81 = *(std::__shared_weak_count **)(v4 + 304);
  if (!v81)
  {
LABEL_212:
    v363 = 0;
    v364 = 0;
    v365 = 0;
    v85 = 0;
    goto LABEL_229;
  }
LABEL_209:
  v82 = std::__shared_weak_count::lock(v81);
  *((_QWORD *)&v368 + 1) = v82;
  if (!v82)
    goto LABEL_212;
  v83 = v82;
  v84 = *(_QWORD *)(v4 + 296);
  *(_QWORD *)&v368 = v84;
  if (v84)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v84 + 24))(&v363);
  }
  else
  {
    v363 = 0;
    v364 = 0;
    v365 = 0;
  }
  v86 = (unint64_t *)&v83->__shared_owners_;
  do
    v87 = __ldaxr(v86);
  while (__stlxr(v87 - 1, v86));
  if (v87)
  {
    v85 = v363;
    v88 = v364;
    if (v363 == v364)
      goto LABEL_229;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
    std::__shared_weak_count::__release_weak(v83);
    v85 = v363;
    v88 = v364;
    if (v363 == v364)
      goto LABEL_229;
  }
  do
  {
    *(_QWORD *)&v368 = v51;
    *((_QWORD *)&v368 + 1) = *v85;
    v370 = 0;
    v369 = 0uLL;
    v89 = v358;
    if ((unint64_t)v358 < v359)
    {
      *(_OWORD *)v358 = v368;
      *((_QWORD *)v89 + 3) = 0;
      *((_QWORD *)v89 + 4) = 0;
      *((_QWORD *)v89 + 2) = 0;
      v358 = v89 + 40;
    }
    else
    {
      v358 = sub_223628FA4(&v357, (uint64_t)&v368);
      if (SHIBYTE(v370) < 0)
        operator delete((void *)v369);
    }
    ++v85;
  }
  while (v85 != v88);
  v85 = v363;
LABEL_229:
  if (v85)
  {
    v364 = v85;
    operator delete(v85);
  }
  v90 = *(std::__shared_weak_count **)(v4 + 304);
  if (!v90 || (v91 = std::__shared_weak_count::lock(v90), (*((_QWORD *)&v368 + 1) = v91) == 0))
  {
    v363 = 0;
    v364 = 0;
    v365 = 0;
    v94 = 0;
    goto LABEL_250;
  }
  v92 = v91;
  v93 = *(_QWORD *)(v4 + 296);
  *(_QWORD *)&v368 = v93;
  if (v93)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v93 + 32))(&v363);
  }
  else
  {
    v363 = 0;
    v364 = 0;
    v365 = 0;
  }
  v95 = (unint64_t *)&v92->__shared_owners_;
  do
    v96 = __ldaxr(v95);
  while (__stlxr(v96 - 1, v95));
  if (v96)
  {
    v94 = v363;
    v97 = v364;
    if (v363 == v364)
      goto LABEL_250;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
    std::__shared_weak_count::__release_weak(v92);
    v94 = v363;
    v97 = v364;
    if (v363 == v364)
      goto LABEL_250;
  }
  v98 = v51 + 1;
  do
  {
    *(_QWORD *)&v368 = v98;
    *((_QWORD *)&v368 + 1) = *v94;
    v370 = 0;
    v369 = 0uLL;
    v99 = v358;
    if ((unint64_t)v358 < v359)
    {
      *(_OWORD *)v358 = v368;
      *((_QWORD *)v99 + 3) = 0;
      *((_QWORD *)v99 + 4) = 0;
      *((_QWORD *)v99 + 2) = 0;
      v358 = v99 + 40;
    }
    else
    {
      v358 = sub_223628FA4(&v357, (uint64_t)&v368);
      if (SHIBYTE(v370) < 0)
        operator delete((void *)v369);
    }
    ++v94;
  }
  while (v94 != v97);
  v94 = v363;
LABEL_250:
  if (v94)
  {
    v364 = v94;
    operator delete(v94);
  }
  if (SHIBYTE(v367) < 0)
  {
    operator delete(v366[0]);
    if ((SHIBYTE(v375) & 0x80000000) == 0)
    {
LABEL_254:
      if ((SHIBYTE(v377) & 0x80000000) == 0)
        goto LABEL_255;
LABEL_259:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 367) & 0x80000000) == 0)
        goto LABEL_256;
      goto LABEL_260;
    }
  }
  else if ((SHIBYTE(v375) & 0x80000000) == 0)
  {
    goto LABEL_254;
  }
  operator delete((void *)v374);
  if (SHIBYTE(v377) < 0)
    goto LABEL_259;
LABEL_255:
  if ((*(char *)(v4 + 367) & 0x80000000) == 0)
  {
LABEL_256:
    __dst = *(_OWORD *)(v4 + 344);
    v377 = *(_QWORD *)(v4 + 360);
    goto LABEL_261;
  }
LABEL_260:
  sub_223197FA4(&__dst, *(void **)(v4 + 344), *(_QWORD *)(v4 + 352));
LABEL_261:
  v100 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 432) + 48))(*(_QWORD *)(v4 + 432));
  sub_22363DFF4();
  if (byte_25579332F < 0)
  {
    sub_223197FA4(&v374, (void *)xmmword_255793318, *((unint64_t *)&xmmword_255793318 + 1));
  }
  else
  {
    v374 = xmmword_255793318;
    v375 = unk_255793328;
  }
  v101 = HIBYTE(v375);
  if (v375 >= 0)
  {
    v102 = &v374;
  }
  else
  {
    v101 = *((_QWORD *)&v374 + 1);
    v102 = (__int128 *)v374;
  }
  if (v101 >= 4)
  {
    v103 = (char *)v102 + v101;
    v104 = v102;
    do
    {
      v105 = (char *)memchr(v104, 118, v101 - 3);
      if (!v105)
        break;
      if (*(_DWORD *)v105 == 1684631414)
      {
        if (v105 == v103 || v105 - (char *)v102 == -1)
          break;
        *(_QWORD *)&v368 = v100;
        DWORD2(v368) = 4;
        if (SHIBYTE(v377) < 0)
        {
          sub_223197FA4(&v369, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v369 = __dst;
          v370 = v377;
        }
        if (*(char *)(v4 + 391) < 0)
        {
          sub_223197FA4(&__p, *(void **)(v4 + 368), *(_QWORD *)(v4 + 376));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 368);
          *(_QWORD *)v372 = *(_QWORD *)(v4 + 384);
        }
        sub_223654DDC();
        if (byte_25579497F < 0)
        {
          sub_223197FA4(&v372[8], (void *)xmmword_255794968, *((unint64_t *)&xmmword_255794968 + 1));
        }
        else
        {
          *(_OWORD *)&v372[8] = xmmword_255794968;
          v373 = unk_255794978;
        }
        v106 = v361;
        if ((unint64_t)v361 < v362)
          goto LABEL_287;
        goto LABEL_290;
      }
      v104 = (__int128 *)(v105 + 1);
      v101 = v103 - (char *)v104;
    }
    while (v103 - (char *)v104 >= 4);
  }
  *(_QWORD *)&v368 = v100;
  DWORD2(v368) = 2;
  if (SHIBYTE(v377) < 0)
  {
    sub_223197FA4(&v369, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v369 = __dst;
    v370 = v377;
  }
  if (*(char *)(v4 + 391) < 0)
  {
    sub_223197FA4(&__p, *(void **)(v4 + 368), *(_QWORD *)(v4 + 376));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 368);
    *(_QWORD *)v372 = *(_QWORD *)(v4 + 384);
  }
  sub_223654DDC();
  if (byte_25579497F < 0)
  {
    sub_223197FA4(&v372[8], (void *)xmmword_255794968, *((unint64_t *)&xmmword_255794968 + 1));
  }
  else
  {
    *(_OWORD *)&v372[8] = xmmword_255794968;
    v373 = unk_255794978;
  }
  v106 = v361;
  if ((unint64_t)v361 >= v362)
  {
LABEL_290:
    v361 = sub_2236285DC((char **)&v360, (uint64_t)&v368);
    if (SHIBYTE(v373) < 0)
    {
      operator delete(*(void **)&v372[8]);
      if ((v372[7] & 0x80000000) == 0)
        goto LABEL_292;
    }
    else if ((v372[7] & 0x80000000) == 0)
    {
      goto LABEL_292;
    }
LABEL_288:
    operator delete((void *)__p);
    if ((SHIBYTE(v370) & 0x80000000) == 0)
      goto LABEL_293;
    goto LABEL_289;
  }
LABEL_287:
  v107 = v368;
  *((_DWORD *)v106 + 2) = DWORD2(v368);
  *(_QWORD *)v106 = v107;
  v108 = v369;
  *((_QWORD *)v106 + 4) = v370;
  *((_OWORD *)v106 + 1) = v108;
  v370 = 0;
  v369 = 0uLL;
  v109 = *(_QWORD *)v372;
  *(_OWORD *)(v106 + 40) = __p;
  *((_QWORD *)v106 + 7) = v109;
  *(_QWORD *)v372 = 0;
  __p = 0uLL;
  v110 = *(_OWORD *)&v372[8];
  *((_QWORD *)v106 + 10) = v373;
  *((_OWORD *)v106 + 4) = v110;
  *(_QWORD *)&v372[8] = 0;
  *(_QWORD *)&v372[16] = 0;
  v373 = 0;
  v361 = v106 + 88;
  if ((v372[7] & 0x80000000) != 0)
    goto LABEL_288;
LABEL_292:
  if (SHIBYTE(v370) < 0)
LABEL_289:
    operator delete((void *)v369);
LABEL_293:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v366, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v366 = xmmword_2540CBC48;
    v367 = unk_2540CBC58;
  }
  v111 = HIBYTE(v367);
  if (v367 >= 0)
  {
    v112 = v366;
  }
  else
  {
    v111 = (uint64_t)v366[1];
    v112 = (void **)v366[0];
  }
  if (v111 >= 18)
  {
    v113 = (char *)v112 + v111;
    v114 = v112;
    do
    {
      v115 = (char *)memchr(v114, 67, v111 - 17);
      if (!v115)
        break;
      if (*(_QWORD *)v115 == 0x456C656E6E616843
        && *((_QWORD *)v115 + 1) == 0x696F763C726F7272
        && *((_WORD *)v115 + 8) == 15972)
      {
        if (v115 != v113 && v115 - (char *)v112 != -1)
          goto LABEL_337;
        break;
      }
      v114 = (void **)(v115 + 1);
      v111 = v113 - (char *)v114;
    }
    while (v113 - (char *)v114 >= 18);
  }
  *(_QWORD *)&v368 = v100 + 1;
  DWORD2(v368) = 3;
  v118 = SHIBYTE(v377);
  if (v377 >= 0)
    v119 = HIBYTE(v377);
  else
    v119 = *((_QWORD *)&__dst + 1);
  v120 = v119 + 6;
  if (v119 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v120 >= 0x17)
  {
    v122 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17)
      v122 = v120 | 7;
    v123 = v122 + 1;
    v121 = (__int128 *)operator new(v122 + 1);
    *((_QWORD *)&v369 + 1) = v119 + 6;
    v370 = v123 | 0x8000000000000000;
    *(_QWORD *)&v369 = v121;
  }
  else
  {
    v370 = 0;
    v369 = 0uLL;
    v121 = &v369;
    HIBYTE(v370) = v119 + 6;
    if (!v119)
      goto LABEL_329;
  }
  if (v118 >= 0)
    v124 = &__dst;
  else
    v124 = (__int128 *)__dst;
  memmove(v121, v124, v119);
LABEL_329:
  strcpy((char *)v121 + v119, ".Error");
  *(_WORD *)&v372[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v373) = 0;
  v125 = v361;
  if ((unint64_t)v361 >= v362)
  {
    v361 = sub_2236285DC((char **)&v360, (uint64_t)&v368);
    if (SHIBYTE(v373) < 0)
    {
      operator delete(*(void **)&v372[8]);
      if ((v372[7] & 0x80000000) == 0)
        goto LABEL_336;
    }
    else if ((v372[7] & 0x80000000) == 0)
    {
      goto LABEL_336;
    }
LABEL_331:
    operator delete((void *)__p);
    if (SHIBYTE(v370) < 0)
      goto LABEL_332;
    goto LABEL_337;
  }
  v126 = v368;
  *((_DWORD *)v361 + 2) = DWORD2(v368);
  *(_QWORD *)v125 = v126;
  v127 = v369;
  *((_QWORD *)v125 + 4) = v370;
  *((_OWORD *)v125 + 1) = v127;
  v370 = 0;
  v369 = 0uLL;
  v128 = *(_QWORD *)v372;
  *(_OWORD *)(v125 + 40) = __p;
  *((_QWORD *)v125 + 7) = v128;
  *(_QWORD *)v372 = 0;
  __p = 0uLL;
  v129 = *(_OWORD *)&v372[8];
  *((_QWORD *)v125 + 10) = v373;
  *((_OWORD *)v125 + 4) = v129;
  *(_QWORD *)&v372[8] = 0;
  *(_QWORD *)&v372[16] = 0;
  v373 = 0;
  v361 = v125 + 88;
  if ((v372[7] & 0x80000000) != 0)
    goto LABEL_331;
LABEL_336:
  if (SHIBYTE(v370) < 0)
  {
LABEL_332:
    operator delete((void *)v369);
    v130 = *(std::__shared_weak_count **)(v4 + 472);
    if (!v130)
      goto LABEL_341;
    goto LABEL_338;
  }
LABEL_337:
  v130 = *(std::__shared_weak_count **)(v4 + 472);
  if (!v130)
  {
LABEL_341:
    v363 = 0;
    v364 = 0;
    v365 = 0;
    v134 = 0;
    goto LABEL_358;
  }
LABEL_338:
  v131 = std::__shared_weak_count::lock(v130);
  *((_QWORD *)&v368 + 1) = v131;
  if (!v131)
    goto LABEL_341;
  v132 = v131;
  v133 = *(_QWORD *)(v4 + 464);
  *(_QWORD *)&v368 = v133;
  if (v133)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v133 + 24))(&v363);
  }
  else
  {
    v363 = 0;
    v364 = 0;
    v365 = 0;
  }
  v135 = (unint64_t *)&v132->__shared_owners_;
  do
    v136 = __ldaxr(v135);
  while (__stlxr(v136 - 1, v135));
  if (v136)
  {
    v134 = v363;
    v137 = v364;
    if (v363 == v364)
      goto LABEL_358;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
    std::__shared_weak_count::__release_weak(v132);
    v134 = v363;
    v137 = v364;
    if (v363 == v364)
      goto LABEL_358;
  }
  do
  {
    *(_QWORD *)&v368 = v100;
    *((_QWORD *)&v368 + 1) = *v134;
    v370 = 0;
    v369 = 0uLL;
    v138 = v358;
    if ((unint64_t)v358 < v359)
    {
      *(_OWORD *)v358 = v368;
      *((_QWORD *)v138 + 3) = 0;
      *((_QWORD *)v138 + 4) = 0;
      *((_QWORD *)v138 + 2) = 0;
      v358 = v138 + 40;
    }
    else
    {
      v358 = sub_223628FA4(&v357, (uint64_t)&v368);
      if (SHIBYTE(v370) < 0)
        operator delete((void *)v369);
    }
    ++v134;
  }
  while (v134 != v137);
  v134 = v363;
LABEL_358:
  if (v134)
  {
    v364 = v134;
    operator delete(v134);
  }
  v139 = *(std::__shared_weak_count **)(v4 + 472);
  if (!v139 || (v140 = std::__shared_weak_count::lock(v139), (*((_QWORD *)&v368 + 1) = v140) == 0))
  {
    v363 = 0;
    v364 = 0;
    v365 = 0;
    v143 = 0;
    goto LABEL_379;
  }
  v141 = v140;
  v142 = *(_QWORD *)(v4 + 464);
  *(_QWORD *)&v368 = v142;
  if (v142)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v142 + 32))(&v363);
  }
  else
  {
    v363 = 0;
    v364 = 0;
    v365 = 0;
  }
  v144 = (unint64_t *)&v141->__shared_owners_;
  do
    v145 = __ldaxr(v144);
  while (__stlxr(v145 - 1, v144));
  if (v145)
  {
    v143 = v363;
    v146 = v364;
    if (v363 == v364)
      goto LABEL_379;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
    std::__shared_weak_count::__release_weak(v141);
    v143 = v363;
    v146 = v364;
    if (v363 == v364)
      goto LABEL_379;
  }
  v147 = v100 + 1;
  do
  {
    *(_QWORD *)&v368 = v147;
    *((_QWORD *)&v368 + 1) = *v143;
    v370 = 0;
    v369 = 0uLL;
    v148 = v358;
    if ((unint64_t)v358 < v359)
    {
      *(_OWORD *)v358 = v368;
      *((_QWORD *)v148 + 3) = 0;
      *((_QWORD *)v148 + 4) = 0;
      *((_QWORD *)v148 + 2) = 0;
      v358 = v148 + 40;
    }
    else
    {
      v358 = sub_223628FA4(&v357, (uint64_t)&v368);
      if (SHIBYTE(v370) < 0)
        operator delete((void *)v369);
    }
    ++v143;
  }
  while (v143 != v146);
  v143 = v363;
LABEL_379:
  if (v143)
  {
    v364 = v143;
    operator delete(v143);
  }
  if (SHIBYTE(v367) < 0)
  {
    operator delete(v366[0]);
    if ((SHIBYTE(v375) & 0x80000000) == 0)
    {
LABEL_383:
      if ((SHIBYTE(v377) & 0x80000000) == 0)
        goto LABEL_384;
LABEL_388:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 535) & 0x80000000) == 0)
        goto LABEL_385;
      goto LABEL_389;
    }
  }
  else if ((SHIBYTE(v375) & 0x80000000) == 0)
  {
    goto LABEL_383;
  }
  operator delete((void *)v374);
  if (SHIBYTE(v377) < 0)
    goto LABEL_388;
LABEL_384:
  if ((*(char *)(v4 + 535) & 0x80000000) == 0)
  {
LABEL_385:
    __dst = *(_OWORD *)(v4 + 512);
    v377 = *(_QWORD *)(v4 + 528);
    goto LABEL_390;
  }
LABEL_389:
  sub_223197FA4(&__dst, *(void **)(v4 + 512), *(_QWORD *)(v4 + 520));
LABEL_390:
  v149 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 600) + 48))(*(_QWORD *)(v4 + 600));
  sub_223650D80();
  if (byte_255794067 < 0)
  {
    sub_223197FA4(&v374, (void *)xmmword_255794050, *((unint64_t *)&xmmword_255794050 + 1));
  }
  else
  {
    v374 = xmmword_255794050;
    v375 = unk_255794060;
  }
  v150 = HIBYTE(v375);
  if (v375 >= 0)
  {
    v151 = &v374;
  }
  else
  {
    v150 = *((_QWORD *)&v374 + 1);
    v151 = (__int128 *)v374;
  }
  if (v150 >= 4)
  {
    v152 = (char *)v151 + v150;
    v153 = v151;
    do
    {
      v154 = (char *)memchr(v153, 118, v150 - 3);
      if (!v154)
        break;
      if (*(_DWORD *)v154 == 1684631414)
      {
        if (v154 == v152 || v154 - (char *)v151 == -1)
          break;
        *(_QWORD *)&v368 = v149;
        DWORD2(v368) = 4;
        if (SHIBYTE(v377) < 0)
        {
          sub_223197FA4(&v369, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v369 = __dst;
          v370 = v377;
        }
        if (*(char *)(v4 + 559) < 0)
        {
          sub_223197FA4(&__p, *(void **)(v4 + 536), *(_QWORD *)(v4 + 544));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 536);
          *(_QWORD *)v372 = *(_QWORD *)(v4 + 552);
        }
        sub_223654FA0();
        if (byte_2557949C7 < 0)
        {
          sub_223197FA4(&v372[8], (void *)xmmword_2557949B0, *((unint64_t *)&xmmword_2557949B0 + 1));
        }
        else
        {
          *(_OWORD *)&v372[8] = xmmword_2557949B0;
          v373 = unk_2557949C0;
        }
        v155 = v361;
        if ((unint64_t)v361 < v362)
          goto LABEL_416;
        goto LABEL_419;
      }
      v153 = (__int128 *)(v154 + 1);
      v150 = v152 - (char *)v153;
    }
    while (v152 - (char *)v153 >= 4);
  }
  *(_QWORD *)&v368 = v149;
  DWORD2(v368) = 2;
  if (SHIBYTE(v377) < 0)
  {
    sub_223197FA4(&v369, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v369 = __dst;
    v370 = v377;
  }
  if (*(char *)(v4 + 559) < 0)
  {
    sub_223197FA4(&__p, *(void **)(v4 + 536), *(_QWORD *)(v4 + 544));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 536);
    *(_QWORD *)v372 = *(_QWORD *)(v4 + 552);
  }
  sub_223654FA0();
  if (byte_2557949C7 < 0)
  {
    sub_223197FA4(&v372[8], (void *)xmmword_2557949B0, *((unint64_t *)&xmmword_2557949B0 + 1));
  }
  else
  {
    *(_OWORD *)&v372[8] = xmmword_2557949B0;
    v373 = unk_2557949C0;
  }
  v155 = v361;
  if ((unint64_t)v361 >= v362)
  {
LABEL_419:
    v361 = sub_2236285DC((char **)&v360, (uint64_t)&v368);
    if (SHIBYTE(v373) < 0)
    {
      operator delete(*(void **)&v372[8]);
      if ((v372[7] & 0x80000000) == 0)
        goto LABEL_421;
    }
    else if ((v372[7] & 0x80000000) == 0)
    {
      goto LABEL_421;
    }
LABEL_417:
    operator delete((void *)__p);
    if ((SHIBYTE(v370) & 0x80000000) == 0)
      goto LABEL_422;
    goto LABEL_418;
  }
LABEL_416:
  v156 = v368;
  *((_DWORD *)v155 + 2) = DWORD2(v368);
  *(_QWORD *)v155 = v156;
  v157 = v369;
  *((_QWORD *)v155 + 4) = v370;
  *((_OWORD *)v155 + 1) = v157;
  v370 = 0;
  v369 = 0uLL;
  v158 = *(_QWORD *)v372;
  *(_OWORD *)(v155 + 40) = __p;
  *((_QWORD *)v155 + 7) = v158;
  *(_QWORD *)v372 = 0;
  __p = 0uLL;
  v159 = *(_OWORD *)&v372[8];
  *((_QWORD *)v155 + 10) = v373;
  *((_OWORD *)v155 + 4) = v159;
  *(_QWORD *)&v372[8] = 0;
  *(_QWORD *)&v372[16] = 0;
  v373 = 0;
  v361 = v155 + 88;
  if ((v372[7] & 0x80000000) != 0)
    goto LABEL_417;
LABEL_421:
  if (SHIBYTE(v370) < 0)
LABEL_418:
    operator delete((void *)v369);
LABEL_422:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v366, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v366 = xmmword_2540CBC48;
    v367 = unk_2540CBC58;
  }
  v160 = HIBYTE(v367);
  if (v367 >= 0)
  {
    v161 = v366;
  }
  else
  {
    v160 = (uint64_t)v366[1];
    v161 = (void **)v366[0];
  }
  if (v160 >= 18)
  {
    v162 = (char *)v161 + v160;
    v163 = v161;
    do
    {
      v164 = (char *)memchr(v163, 67, v160 - 17);
      if (!v164)
        break;
      if (*(_QWORD *)v164 == 0x456C656E6E616843
        && *((_QWORD *)v164 + 1) == 0x696F763C726F7272
        && *((_WORD *)v164 + 8) == 15972)
      {
        if (v164 != v162 && v164 - (char *)v161 != -1)
          goto LABEL_466;
        break;
      }
      v163 = (void **)(v164 + 1);
      v160 = v162 - (char *)v163;
    }
    while (v162 - (char *)v163 >= 18);
  }
  *(_QWORD *)&v368 = v149 + 1;
  DWORD2(v368) = 3;
  v167 = SHIBYTE(v377);
  if (v377 >= 0)
    v168 = HIBYTE(v377);
  else
    v168 = *((_QWORD *)&__dst + 1);
  v169 = v168 + 6;
  if (v168 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v169 >= 0x17)
  {
    v171 = (v169 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v169 | 7) != 0x17)
      v171 = v169 | 7;
    v172 = v171 + 1;
    v170 = (__int128 *)operator new(v171 + 1);
    *((_QWORD *)&v369 + 1) = v168 + 6;
    v370 = v172 | 0x8000000000000000;
    *(_QWORD *)&v369 = v170;
  }
  else
  {
    v370 = 0;
    v369 = 0uLL;
    v170 = &v369;
    HIBYTE(v370) = v168 + 6;
    if (!v168)
      goto LABEL_458;
  }
  if (v167 >= 0)
    v173 = &__dst;
  else
    v173 = (__int128 *)__dst;
  memmove(v170, v173, v168);
LABEL_458:
  strcpy((char *)v170 + v168, ".Error");
  *(_WORD *)&v372[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v373) = 0;
  v174 = v361;
  if ((unint64_t)v361 >= v362)
  {
    v361 = sub_2236285DC((char **)&v360, (uint64_t)&v368);
    if (SHIBYTE(v373) < 0)
    {
      operator delete(*(void **)&v372[8]);
      if ((v372[7] & 0x80000000) == 0)
        goto LABEL_465;
    }
    else if ((v372[7] & 0x80000000) == 0)
    {
      goto LABEL_465;
    }
LABEL_460:
    operator delete((void *)__p);
    if (SHIBYTE(v370) < 0)
      goto LABEL_461;
    goto LABEL_466;
  }
  v175 = v368;
  *((_DWORD *)v361 + 2) = DWORD2(v368);
  *(_QWORD *)v174 = v175;
  v176 = v369;
  *((_QWORD *)v174 + 4) = v370;
  *((_OWORD *)v174 + 1) = v176;
  v370 = 0;
  v369 = 0uLL;
  v177 = *(_QWORD *)v372;
  *(_OWORD *)(v174 + 40) = __p;
  *((_QWORD *)v174 + 7) = v177;
  *(_QWORD *)v372 = 0;
  __p = 0uLL;
  v178 = *(_OWORD *)&v372[8];
  *((_QWORD *)v174 + 10) = v373;
  *((_OWORD *)v174 + 4) = v178;
  *(_QWORD *)&v372[8] = 0;
  *(_QWORD *)&v372[16] = 0;
  v373 = 0;
  v361 = v174 + 88;
  if ((v372[7] & 0x80000000) != 0)
    goto LABEL_460;
LABEL_465:
  if (SHIBYTE(v370) < 0)
  {
LABEL_461:
    operator delete((void *)v369);
    v179 = *(std::__shared_weak_count **)(v4 + 640);
    if (!v179)
      goto LABEL_470;
    goto LABEL_467;
  }
LABEL_466:
  v179 = *(std::__shared_weak_count **)(v4 + 640);
  if (!v179)
  {
LABEL_470:
    v363 = 0;
    v364 = 0;
    v365 = 0;
    v183 = 0;
    goto LABEL_487;
  }
LABEL_467:
  v180 = std::__shared_weak_count::lock(v179);
  *((_QWORD *)&v368 + 1) = v180;
  if (!v180)
    goto LABEL_470;
  v181 = v180;
  v182 = *(_QWORD *)(v4 + 632);
  *(_QWORD *)&v368 = v182;
  if (v182)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v182 + 24))(&v363);
  }
  else
  {
    v363 = 0;
    v364 = 0;
    v365 = 0;
  }
  v184 = (unint64_t *)&v181->__shared_owners_;
  do
    v185 = __ldaxr(v184);
  while (__stlxr(v185 - 1, v184));
  if (v185)
  {
    v183 = v363;
    v186 = v364;
    if (v363 == v364)
      goto LABEL_487;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
    std::__shared_weak_count::__release_weak(v181);
    v183 = v363;
    v186 = v364;
    if (v363 == v364)
      goto LABEL_487;
  }
  do
  {
    *(_QWORD *)&v368 = v149;
    *((_QWORD *)&v368 + 1) = *v183;
    v370 = 0;
    v369 = 0uLL;
    v187 = v358;
    if ((unint64_t)v358 < v359)
    {
      *(_OWORD *)v358 = v368;
      *((_QWORD *)v187 + 3) = 0;
      *((_QWORD *)v187 + 4) = 0;
      *((_QWORD *)v187 + 2) = 0;
      v358 = v187 + 40;
    }
    else
    {
      v358 = sub_223628FA4(&v357, (uint64_t)&v368);
      if (SHIBYTE(v370) < 0)
        operator delete((void *)v369);
    }
    ++v183;
  }
  while (v183 != v186);
  v183 = v363;
LABEL_487:
  if (v183)
  {
    v364 = v183;
    operator delete(v183);
  }
  v188 = *(std::__shared_weak_count **)(v4 + 640);
  if (!v188 || (v189 = std::__shared_weak_count::lock(v188), (*((_QWORD *)&v368 + 1) = v189) == 0))
  {
    v363 = 0;
    v364 = 0;
    v365 = 0;
    v192 = 0;
    goto LABEL_508;
  }
  v190 = v189;
  v191 = *(_QWORD *)(v4 + 632);
  *(_QWORD *)&v368 = v191;
  if (v191)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v191 + 32))(&v363);
  }
  else
  {
    v363 = 0;
    v364 = 0;
    v365 = 0;
  }
  v193 = (unint64_t *)&v190->__shared_owners_;
  do
    v194 = __ldaxr(v193);
  while (__stlxr(v194 - 1, v193));
  if (v194)
  {
    v192 = v363;
    v195 = v364;
    if (v363 == v364)
      goto LABEL_508;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
    std::__shared_weak_count::__release_weak(v190);
    v192 = v363;
    v195 = v364;
    if (v363 == v364)
      goto LABEL_508;
  }
  v196 = v149 + 1;
  do
  {
    *(_QWORD *)&v368 = v196;
    *((_QWORD *)&v368 + 1) = *v192;
    v370 = 0;
    v369 = 0uLL;
    v197 = v358;
    if ((unint64_t)v358 < v359)
    {
      *(_OWORD *)v358 = v368;
      *((_QWORD *)v197 + 3) = 0;
      *((_QWORD *)v197 + 4) = 0;
      *((_QWORD *)v197 + 2) = 0;
      v358 = v197 + 40;
    }
    else
    {
      v358 = sub_223628FA4(&v357, (uint64_t)&v368);
      if (SHIBYTE(v370) < 0)
        operator delete((void *)v369);
    }
    ++v192;
  }
  while (v192 != v195);
  v192 = v363;
LABEL_508:
  if (v192)
  {
    v364 = v192;
    operator delete(v192);
  }
  if (SHIBYTE(v367) < 0)
  {
    operator delete(v366[0]);
    if ((SHIBYTE(v375) & 0x80000000) == 0)
    {
LABEL_512:
      if ((SHIBYTE(v377) & 0x80000000) == 0)
        goto LABEL_513;
LABEL_517:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 703) & 0x80000000) == 0)
        goto LABEL_514;
      goto LABEL_518;
    }
  }
  else if ((SHIBYTE(v375) & 0x80000000) == 0)
  {
    goto LABEL_512;
  }
  operator delete((void *)v374);
  if (SHIBYTE(v377) < 0)
    goto LABEL_517;
LABEL_513:
  if ((*(char *)(v4 + 703) & 0x80000000) == 0)
  {
LABEL_514:
    __dst = *(_OWORD *)(v4 + 680);
    v377 = *(_QWORD *)(v4 + 696);
    goto LABEL_519;
  }
LABEL_518:
  sub_223197FA4(&__dst, *(void **)(v4 + 680), *(_QWORD *)(v4 + 688));
LABEL_519:
  v198 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 768) + 48))(*(_QWORD *)(v4 + 768));
  sub_22363DFF4();
  if (byte_25579332F < 0)
  {
    sub_223197FA4(&v374, (void *)xmmword_255793318, *((unint64_t *)&xmmword_255793318 + 1));
  }
  else
  {
    v374 = xmmword_255793318;
    v375 = unk_255793328;
  }
  v199 = HIBYTE(v375);
  if (v375 >= 0)
  {
    v200 = &v374;
  }
  else
  {
    v199 = *((_QWORD *)&v374 + 1);
    v200 = (__int128 *)v374;
  }
  if (v199 >= 4)
  {
    v201 = (char *)v200 + v199;
    v202 = v200;
    do
    {
      v203 = (char *)memchr(v202, 118, v199 - 3);
      if (!v203)
        break;
      if (*(_DWORD *)v203 == 1684631414)
      {
        if (v203 == v201 || v203 - (char *)v200 == -1)
          break;
        *(_QWORD *)&v368 = v198;
        DWORD2(v368) = 4;
        if (SHIBYTE(v377) < 0)
        {
          sub_223197FA4(&v369, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v369 = __dst;
          v370 = v377;
        }
        if (*(char *)(v4 + 727) < 0)
        {
          sub_223197FA4(&__p, *(void **)(v4 + 704), *(_QWORD *)(v4 + 712));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 704);
          *(_QWORD *)v372 = *(_QWORD *)(v4 + 720);
        }
        sub_22363E750();
        if (byte_2557933D7 < 0)
        {
          sub_223197FA4(&v372[8], (void *)xmmword_2557933C0, *((unint64_t *)&xmmword_2557933C0 + 1));
        }
        else
        {
          *(_OWORD *)&v372[8] = xmmword_2557933C0;
          v373 = unk_2557933D0;
        }
        v204 = v361;
        if ((unint64_t)v361 < v362)
          goto LABEL_545;
        goto LABEL_548;
      }
      v202 = (__int128 *)(v203 + 1);
      v199 = v201 - (char *)v202;
    }
    while (v201 - (char *)v202 >= 4);
  }
  *(_QWORD *)&v368 = v198;
  DWORD2(v368) = 2;
  if (SHIBYTE(v377) < 0)
  {
    sub_223197FA4(&v369, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v369 = __dst;
    v370 = v377;
  }
  if (*(char *)(v4 + 727) < 0)
  {
    sub_223197FA4(&__p, *(void **)(v4 + 704), *(_QWORD *)(v4 + 712));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 704);
    *(_QWORD *)v372 = *(_QWORD *)(v4 + 720);
  }
  sub_22363E750();
  if (byte_2557933D7 < 0)
  {
    sub_223197FA4(&v372[8], (void *)xmmword_2557933C0, *((unint64_t *)&xmmword_2557933C0 + 1));
  }
  else
  {
    *(_OWORD *)&v372[8] = xmmword_2557933C0;
    v373 = unk_2557933D0;
  }
  v204 = v361;
  if ((unint64_t)v361 >= v362)
  {
LABEL_548:
    v361 = sub_2236285DC((char **)&v360, (uint64_t)&v368);
    if (SHIBYTE(v373) < 0)
    {
      operator delete(*(void **)&v372[8]);
      if ((v372[7] & 0x80000000) == 0)
        goto LABEL_550;
    }
    else if ((v372[7] & 0x80000000) == 0)
    {
      goto LABEL_550;
    }
LABEL_546:
    operator delete((void *)__p);
    if ((SHIBYTE(v370) & 0x80000000) == 0)
      goto LABEL_551;
    goto LABEL_547;
  }
LABEL_545:
  v205 = v368;
  *((_DWORD *)v204 + 2) = DWORD2(v368);
  *(_QWORD *)v204 = v205;
  v206 = v369;
  *((_QWORD *)v204 + 4) = v370;
  *((_OWORD *)v204 + 1) = v206;
  v370 = 0;
  v369 = 0uLL;
  v207 = *(_QWORD *)v372;
  *(_OWORD *)(v204 + 40) = __p;
  *((_QWORD *)v204 + 7) = v207;
  *(_QWORD *)v372 = 0;
  __p = 0uLL;
  v208 = *(_OWORD *)&v372[8];
  *((_QWORD *)v204 + 10) = v373;
  *((_OWORD *)v204 + 4) = v208;
  *(_QWORD *)&v372[8] = 0;
  *(_QWORD *)&v372[16] = 0;
  v373 = 0;
  v361 = v204 + 88;
  if ((v372[7] & 0x80000000) != 0)
    goto LABEL_546;
LABEL_550:
  if (SHIBYTE(v370) < 0)
LABEL_547:
    operator delete((void *)v369);
LABEL_551:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v366, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v366 = xmmword_2540CBC48;
    v367 = unk_2540CBC58;
  }
  v209 = HIBYTE(v367);
  if (v367 >= 0)
  {
    v210 = v366;
  }
  else
  {
    v209 = (uint64_t)v366[1];
    v210 = (void **)v366[0];
  }
  if (v209 >= 18)
  {
    v211 = (char *)v210 + v209;
    v212 = v210;
    do
    {
      v213 = (char *)memchr(v212, 67, v209 - 17);
      if (!v213)
        break;
      if (*(_QWORD *)v213 == 0x456C656E6E616843
        && *((_QWORD *)v213 + 1) == 0x696F763C726F7272
        && *((_WORD *)v213 + 8) == 15972)
      {
        if (v213 != v211 && v213 - (char *)v210 != -1)
          goto LABEL_595;
        break;
      }
      v212 = (void **)(v213 + 1);
      v209 = v211 - (char *)v212;
    }
    while (v211 - (char *)v212 >= 18);
  }
  *(_QWORD *)&v368 = v198 + 1;
  DWORD2(v368) = 3;
  v216 = SHIBYTE(v377);
  if (v377 >= 0)
    v217 = HIBYTE(v377);
  else
    v217 = *((_QWORD *)&__dst + 1);
  v218 = v217 + 6;
  if (v217 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v218 >= 0x17)
  {
    v220 = (v218 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v218 | 7) != 0x17)
      v220 = v218 | 7;
    v221 = v220 + 1;
    v219 = (__int128 *)operator new(v220 + 1);
    *((_QWORD *)&v369 + 1) = v217 + 6;
    v370 = v221 | 0x8000000000000000;
    *(_QWORD *)&v369 = v219;
  }
  else
  {
    v370 = 0;
    v369 = 0uLL;
    v219 = &v369;
    HIBYTE(v370) = v217 + 6;
    if (!v217)
      goto LABEL_587;
  }
  if (v216 >= 0)
    v222 = &__dst;
  else
    v222 = (__int128 *)__dst;
  memmove(v219, v222, v217);
LABEL_587:
  strcpy((char *)v219 + v217, ".Error");
  *(_WORD *)&v372[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v373) = 0;
  v223 = v361;
  if ((unint64_t)v361 >= v362)
  {
    v361 = sub_2236285DC((char **)&v360, (uint64_t)&v368);
    if (SHIBYTE(v373) < 0)
    {
      operator delete(*(void **)&v372[8]);
      if ((v372[7] & 0x80000000) == 0)
        goto LABEL_594;
    }
    else if ((v372[7] & 0x80000000) == 0)
    {
      goto LABEL_594;
    }
LABEL_589:
    operator delete((void *)__p);
    if (SHIBYTE(v370) < 0)
      goto LABEL_590;
    goto LABEL_595;
  }
  v224 = v368;
  *((_DWORD *)v361 + 2) = DWORD2(v368);
  *(_QWORD *)v223 = v224;
  v225 = v369;
  *((_QWORD *)v223 + 4) = v370;
  *((_OWORD *)v223 + 1) = v225;
  v370 = 0;
  v369 = 0uLL;
  v226 = *(_QWORD *)v372;
  *(_OWORD *)(v223 + 40) = __p;
  *((_QWORD *)v223 + 7) = v226;
  *(_QWORD *)v372 = 0;
  __p = 0uLL;
  v227 = *(_OWORD *)&v372[8];
  *((_QWORD *)v223 + 10) = v373;
  *((_OWORD *)v223 + 4) = v227;
  *(_QWORD *)&v372[8] = 0;
  *(_QWORD *)&v372[16] = 0;
  v373 = 0;
  v361 = v223 + 88;
  if ((v372[7] & 0x80000000) != 0)
    goto LABEL_589;
LABEL_594:
  if (SHIBYTE(v370) < 0)
  {
LABEL_590:
    operator delete((void *)v369);
    v228 = *(std::__shared_weak_count **)(v4 + 808);
    if (!v228)
      goto LABEL_599;
    goto LABEL_596;
  }
LABEL_595:
  v228 = *(std::__shared_weak_count **)(v4 + 808);
  if (!v228)
  {
LABEL_599:
    v363 = 0;
    v364 = 0;
    v365 = 0;
    v232 = 0;
    goto LABEL_616;
  }
LABEL_596:
  v229 = std::__shared_weak_count::lock(v228);
  *((_QWORD *)&v368 + 1) = v229;
  if (!v229)
    goto LABEL_599;
  v230 = v229;
  v231 = *(_QWORD *)(v4 + 800);
  *(_QWORD *)&v368 = v231;
  if (v231)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v231 + 24))(&v363);
  }
  else
  {
    v363 = 0;
    v364 = 0;
    v365 = 0;
  }
  v233 = (unint64_t *)&v230->__shared_owners_;
  do
    v234 = __ldaxr(v233);
  while (__stlxr(v234 - 1, v233));
  if (v234)
  {
    v232 = v363;
    v235 = v364;
    if (v363 == v364)
      goto LABEL_616;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
    std::__shared_weak_count::__release_weak(v230);
    v232 = v363;
    v235 = v364;
    if (v363 == v364)
      goto LABEL_616;
  }
  do
  {
    *(_QWORD *)&v368 = v198;
    *((_QWORD *)&v368 + 1) = *v232;
    v370 = 0;
    v369 = 0uLL;
    v236 = v358;
    if ((unint64_t)v358 < v359)
    {
      *(_OWORD *)v358 = v368;
      *((_QWORD *)v236 + 3) = 0;
      *((_QWORD *)v236 + 4) = 0;
      *((_QWORD *)v236 + 2) = 0;
      v358 = v236 + 40;
    }
    else
    {
      v358 = sub_223628FA4(&v357, (uint64_t)&v368);
      if (SHIBYTE(v370) < 0)
        operator delete((void *)v369);
    }
    ++v232;
  }
  while (v232 != v235);
  v232 = v363;
LABEL_616:
  if (v232)
  {
    v364 = v232;
    operator delete(v232);
  }
  v237 = *(std::__shared_weak_count **)(v4 + 808);
  if (!v237 || (v238 = std::__shared_weak_count::lock(v237), (*((_QWORD *)&v368 + 1) = v238) == 0))
  {
    v363 = 0;
    v364 = 0;
    v365 = 0;
    v241 = 0;
    goto LABEL_637;
  }
  v239 = v238;
  v240 = *(_QWORD *)(v4 + 800);
  *(_QWORD *)&v368 = v240;
  if (v240)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v240 + 32))(&v363);
  }
  else
  {
    v363 = 0;
    v364 = 0;
    v365 = 0;
  }
  v242 = (unint64_t *)&v239->__shared_owners_;
  do
    v243 = __ldaxr(v242);
  while (__stlxr(v243 - 1, v242));
  if (v243)
  {
    v241 = v363;
    v244 = v364;
    if (v363 == v364)
      goto LABEL_637;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
    std::__shared_weak_count::__release_weak(v239);
    v241 = v363;
    v244 = v364;
    if (v363 == v364)
      goto LABEL_637;
  }
  v245 = v198 + 1;
  do
  {
    *(_QWORD *)&v368 = v245;
    *((_QWORD *)&v368 + 1) = *v241;
    v370 = 0;
    v369 = 0uLL;
    v246 = v358;
    if ((unint64_t)v358 < v359)
    {
      *(_OWORD *)v358 = v368;
      *((_QWORD *)v246 + 3) = 0;
      *((_QWORD *)v246 + 4) = 0;
      *((_QWORD *)v246 + 2) = 0;
      v358 = v246 + 40;
    }
    else
    {
      v358 = sub_223628FA4(&v357, (uint64_t)&v368);
      if (SHIBYTE(v370) < 0)
        operator delete((void *)v369);
    }
    ++v241;
  }
  while (v241 != v244);
  v241 = v363;
LABEL_637:
  if (v241)
  {
    v364 = v241;
    operator delete(v241);
  }
  if (SHIBYTE(v367) < 0)
  {
    operator delete(v366[0]);
    if ((SHIBYTE(v375) & 0x80000000) == 0)
    {
LABEL_641:
      if ((SHIBYTE(v377) & 0x80000000) == 0)
        goto LABEL_642;
LABEL_646:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 871) & 0x80000000) == 0)
        goto LABEL_643;
      goto LABEL_647;
    }
  }
  else if ((SHIBYTE(v375) & 0x80000000) == 0)
  {
    goto LABEL_641;
  }
  operator delete((void *)v374);
  if (SHIBYTE(v377) < 0)
    goto LABEL_646;
LABEL_642:
  if ((*(char *)(v4 + 871) & 0x80000000) == 0)
  {
LABEL_643:
    __dst = *(_OWORD *)(v4 + 848);
    v377 = *(_QWORD *)(v4 + 864);
    goto LABEL_648;
  }
LABEL_647:
  sub_223197FA4(&__dst, *(void **)(v4 + 848), *(_QWORD *)(v4 + 856));
LABEL_648:
  v247 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 936) + 48))(*(_QWORD *)(v4 + 936));
  sub_22363D7E4();
  if (byte_25579323F < 0)
  {
    sub_223197FA4(&v374, (void *)xmmword_255793228, *((unint64_t *)&xmmword_255793228 + 1));
  }
  else
  {
    v374 = xmmword_255793228;
    v375 = unk_255793238;
  }
  v248 = HIBYTE(v375);
  if (v375 >= 0)
  {
    v249 = &v374;
  }
  else
  {
    v248 = *((_QWORD *)&v374 + 1);
    v249 = (__int128 *)v374;
  }
  if (v248 >= 4)
  {
    v250 = (char *)v249 + v248;
    v251 = v249;
    do
    {
      v252 = (char *)memchr(v251, 118, v248 - 3);
      if (!v252)
        break;
      if (*(_DWORD *)v252 == 1684631414)
      {
        if (v252 == v250 || v252 - (char *)v249 == -1)
          break;
        *(_QWORD *)&v368 = v247;
        DWORD2(v368) = 4;
        if (SHIBYTE(v377) < 0)
        {
          sub_223197FA4(&v369, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v369 = __dst;
          v370 = v377;
        }
        if (*(char *)(v4 + 895) < 0)
        {
          sub_223197FA4(&__p, *(void **)(v4 + 872), *(_QWORD *)(v4 + 880));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 872);
          *(_QWORD *)v372 = *(_QWORD *)(v4 + 888);
        }
        sub_223655164();
        if (byte_255794A0F < 0)
        {
          sub_223197FA4(&v372[8], (void *)xmmword_2557949F8, *((unint64_t *)&xmmword_2557949F8 + 1));
        }
        else
        {
          *(_OWORD *)&v372[8] = xmmword_2557949F8;
          v373 = unk_255794A08;
        }
        v253 = v361;
        if ((unint64_t)v361 < v362)
          goto LABEL_674;
        goto LABEL_677;
      }
      v251 = (__int128 *)(v252 + 1);
      v248 = v250 - (char *)v251;
    }
    while (v250 - (char *)v251 >= 4);
  }
  *(_QWORD *)&v368 = v247;
  DWORD2(v368) = 2;
  if (SHIBYTE(v377) < 0)
  {
    sub_223197FA4(&v369, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v369 = __dst;
    v370 = v377;
  }
  if (*(char *)(v4 + 895) < 0)
  {
    sub_223197FA4(&__p, *(void **)(v4 + 872), *(_QWORD *)(v4 + 880));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 872);
    *(_QWORD *)v372 = *(_QWORD *)(v4 + 888);
  }
  sub_223655164();
  if (byte_255794A0F < 0)
  {
    sub_223197FA4(&v372[8], (void *)xmmword_2557949F8, *((unint64_t *)&xmmword_2557949F8 + 1));
  }
  else
  {
    *(_OWORD *)&v372[8] = xmmword_2557949F8;
    v373 = unk_255794A08;
  }
  v253 = v361;
  if ((unint64_t)v361 >= v362)
  {
LABEL_677:
    v361 = sub_2236285DC((char **)&v360, (uint64_t)&v368);
    if (SHIBYTE(v373) < 0)
    {
      operator delete(*(void **)&v372[8]);
      if ((v372[7] & 0x80000000) == 0)
        goto LABEL_679;
    }
    else if ((v372[7] & 0x80000000) == 0)
    {
      goto LABEL_679;
    }
LABEL_675:
    operator delete((void *)__p);
    if ((SHIBYTE(v370) & 0x80000000) == 0)
      goto LABEL_680;
    goto LABEL_676;
  }
LABEL_674:
  v254 = v368;
  *((_DWORD *)v253 + 2) = DWORD2(v368);
  *(_QWORD *)v253 = v254;
  v255 = v369;
  *((_QWORD *)v253 + 4) = v370;
  *((_OWORD *)v253 + 1) = v255;
  v370 = 0;
  v369 = 0uLL;
  v256 = *(_QWORD *)v372;
  *(_OWORD *)(v253 + 40) = __p;
  *((_QWORD *)v253 + 7) = v256;
  *(_QWORD *)v372 = 0;
  __p = 0uLL;
  v257 = *(_OWORD *)&v372[8];
  *((_QWORD *)v253 + 10) = v373;
  *((_OWORD *)v253 + 4) = v257;
  *(_QWORD *)&v372[8] = 0;
  *(_QWORD *)&v372[16] = 0;
  v373 = 0;
  v361 = v253 + 88;
  if ((v372[7] & 0x80000000) != 0)
    goto LABEL_675;
LABEL_679:
  if (SHIBYTE(v370) < 0)
LABEL_676:
    operator delete((void *)v369);
LABEL_680:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v366, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v366 = xmmword_2540CBC48;
    v367 = unk_2540CBC58;
  }
  v258 = HIBYTE(v367);
  if (v367 >= 0)
  {
    v259 = v366;
  }
  else
  {
    v258 = (uint64_t)v366[1];
    v259 = (void **)v366[0];
  }
  if (v258 >= 18)
  {
    v260 = (char *)v259 + v258;
    v261 = v259;
    do
    {
      v262 = (char *)memchr(v261, 67, v258 - 17);
      if (!v262)
        break;
      if (*(_QWORD *)v262 == 0x456C656E6E616843
        && *((_QWORD *)v262 + 1) == 0x696F763C726F7272
        && *((_WORD *)v262 + 8) == 15972)
      {
        if (v262 != v260 && v262 - (char *)v259 != -1)
          goto LABEL_724;
        break;
      }
      v261 = (void **)(v262 + 1);
      v258 = v260 - (char *)v261;
    }
    while (v260 - (char *)v261 >= 18);
  }
  *(_QWORD *)&v368 = v247 + 1;
  DWORD2(v368) = 3;
  v265 = SHIBYTE(v377);
  if (v377 >= 0)
    v266 = HIBYTE(v377);
  else
    v266 = *((_QWORD *)&__dst + 1);
  v267 = v266 + 6;
  if (v266 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v267 >= 0x17)
  {
    v269 = (v267 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v267 | 7) != 0x17)
      v269 = v267 | 7;
    v270 = v269 + 1;
    v268 = (__int128 *)operator new(v269 + 1);
    *((_QWORD *)&v369 + 1) = v266 + 6;
    v370 = v270 | 0x8000000000000000;
    *(_QWORD *)&v369 = v268;
  }
  else
  {
    v370 = 0;
    v369 = 0uLL;
    v268 = &v369;
    HIBYTE(v370) = v266 + 6;
    if (!v266)
      goto LABEL_716;
  }
  if (v265 >= 0)
    v271 = &__dst;
  else
    v271 = (__int128 *)__dst;
  memmove(v268, v271, v266);
LABEL_716:
  strcpy((char *)v268 + v266, ".Error");
  *(_WORD *)&v372[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v373) = 0;
  v272 = v361;
  if ((unint64_t)v361 >= v362)
  {
    v361 = sub_2236285DC((char **)&v360, (uint64_t)&v368);
    if (SHIBYTE(v373) < 0)
    {
      operator delete(*(void **)&v372[8]);
      if ((v372[7] & 0x80000000) == 0)
        goto LABEL_723;
    }
    else if ((v372[7] & 0x80000000) == 0)
    {
      goto LABEL_723;
    }
LABEL_718:
    operator delete((void *)__p);
    if (SHIBYTE(v370) < 0)
      goto LABEL_719;
    goto LABEL_724;
  }
  v273 = v368;
  *((_DWORD *)v361 + 2) = DWORD2(v368);
  *(_QWORD *)v272 = v273;
  v274 = v369;
  *((_QWORD *)v272 + 4) = v370;
  *((_OWORD *)v272 + 1) = v274;
  v370 = 0;
  v369 = 0uLL;
  v275 = *(_QWORD *)v372;
  *(_OWORD *)(v272 + 40) = __p;
  *((_QWORD *)v272 + 7) = v275;
  *(_QWORD *)v372 = 0;
  __p = 0uLL;
  v276 = *(_OWORD *)&v372[8];
  *((_QWORD *)v272 + 10) = v373;
  *((_OWORD *)v272 + 4) = v276;
  *(_QWORD *)&v372[8] = 0;
  *(_QWORD *)&v372[16] = 0;
  v373 = 0;
  v361 = v272 + 88;
  if ((v372[7] & 0x80000000) != 0)
    goto LABEL_718;
LABEL_723:
  if (SHIBYTE(v370) < 0)
  {
LABEL_719:
    operator delete((void *)v369);
    v277 = *(std::__shared_weak_count **)(v4 + 976);
    if (!v277)
      goto LABEL_728;
    goto LABEL_725;
  }
LABEL_724:
  v277 = *(std::__shared_weak_count **)(v4 + 976);
  if (!v277)
  {
LABEL_728:
    v363 = 0;
    v364 = 0;
    v365 = 0;
    v281 = 0;
    goto LABEL_745;
  }
LABEL_725:
  v278 = std::__shared_weak_count::lock(v277);
  *((_QWORD *)&v368 + 1) = v278;
  if (!v278)
    goto LABEL_728;
  v279 = v278;
  v280 = *(_QWORD *)(v4 + 968);
  *(_QWORD *)&v368 = v280;
  if (v280)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v280 + 24))(&v363);
  }
  else
  {
    v363 = 0;
    v364 = 0;
    v365 = 0;
  }
  v282 = (unint64_t *)&v279->__shared_owners_;
  do
    v283 = __ldaxr(v282);
  while (__stlxr(v283 - 1, v282));
  if (v283)
  {
    v281 = v363;
    v284 = v364;
    if (v363 == v364)
      goto LABEL_745;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
    std::__shared_weak_count::__release_weak(v279);
    v281 = v363;
    v284 = v364;
    if (v363 == v364)
      goto LABEL_745;
  }
  do
  {
    *(_QWORD *)&v368 = v247;
    *((_QWORD *)&v368 + 1) = *v281;
    v370 = 0;
    v369 = 0uLL;
    v285 = v358;
    if ((unint64_t)v358 < v359)
    {
      *(_OWORD *)v358 = v368;
      *((_QWORD *)v285 + 3) = 0;
      *((_QWORD *)v285 + 4) = 0;
      *((_QWORD *)v285 + 2) = 0;
      v358 = v285 + 40;
    }
    else
    {
      v358 = sub_223628FA4(&v357, (uint64_t)&v368);
      if (SHIBYTE(v370) < 0)
        operator delete((void *)v369);
    }
    ++v281;
  }
  while (v281 != v284);
  v281 = v363;
LABEL_745:
  if (v281)
  {
    v364 = v281;
    operator delete(v281);
  }
  v286 = *(std::__shared_weak_count **)(v4 + 976);
  if (!v286 || (v287 = std::__shared_weak_count::lock(v286), (*((_QWORD *)&v368 + 1) = v287) == 0))
  {
    v363 = 0;
    v364 = 0;
    v365 = 0;
    v290 = 0;
    goto LABEL_766;
  }
  v288 = v287;
  v289 = *(_QWORD *)(v4 + 968);
  *(_QWORD *)&v368 = v289;
  if (v289)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v289 + 32))(&v363);
  }
  else
  {
    v363 = 0;
    v364 = 0;
    v365 = 0;
  }
  v291 = (unint64_t *)&v288->__shared_owners_;
  do
    v292 = __ldaxr(v291);
  while (__stlxr(v292 - 1, v291));
  if (v292)
  {
    v290 = v363;
    v293 = v364;
    if (v363 == v364)
      goto LABEL_766;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
    std::__shared_weak_count::__release_weak(v288);
    v290 = v363;
    v293 = v364;
    if (v363 == v364)
      goto LABEL_766;
  }
  v294 = v247 + 1;
  do
  {
    *(_QWORD *)&v368 = v294;
    *((_QWORD *)&v368 + 1) = *v290;
    v370 = 0;
    v369 = 0uLL;
    v295 = v358;
    if ((unint64_t)v358 < v359)
    {
      *(_OWORD *)v358 = v368;
      *((_QWORD *)v295 + 3) = 0;
      *((_QWORD *)v295 + 4) = 0;
      *((_QWORD *)v295 + 2) = 0;
      v358 = v295 + 40;
    }
    else
    {
      v358 = sub_223628FA4(&v357, (uint64_t)&v368);
      if (SHIBYTE(v370) < 0)
        operator delete((void *)v369);
    }
    ++v290;
  }
  while (v290 != v293);
  v290 = v363;
LABEL_766:
  if (v290)
  {
    v364 = v290;
    operator delete(v290);
  }
  if (SHIBYTE(v367) < 0)
  {
    operator delete(v366[0]);
    if ((SHIBYTE(v375) & 0x80000000) == 0)
    {
LABEL_770:
      if ((SHIBYTE(v377) & 0x80000000) == 0)
        goto LABEL_771;
LABEL_775:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 1039) & 0x80000000) == 0)
        goto LABEL_772;
      goto LABEL_776;
    }
  }
  else if ((SHIBYTE(v375) & 0x80000000) == 0)
  {
    goto LABEL_770;
  }
  operator delete((void *)v374);
  if (SHIBYTE(v377) < 0)
    goto LABEL_775;
LABEL_771:
  if ((*(char *)(v4 + 1039) & 0x80000000) == 0)
  {
LABEL_772:
    __dst = *(_OWORD *)(v4 + 1016);
    v377 = *(_QWORD *)(v4 + 1032);
    goto LABEL_777;
  }
LABEL_776:
  sub_223197FA4(&__dst, *(void **)(v4 + 1016), *(_QWORD *)(v4 + 1024));
LABEL_777:
  v296 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 1104) + 48))(*(_QWORD *)(v4 + 1104));
  sub_22363D7E4();
  if (byte_25579323F < 0)
  {
    sub_223197FA4(&v374, (void *)xmmword_255793228, *((unint64_t *)&xmmword_255793228 + 1));
  }
  else
  {
    v374 = xmmword_255793228;
    v375 = unk_255793238;
  }
  v297 = HIBYTE(v375);
  if (v375 >= 0)
  {
    v298 = &v374;
  }
  else
  {
    v297 = *((_QWORD *)&v374 + 1);
    v298 = (__int128 *)v374;
  }
  if (v297 >= 4)
  {
    v299 = (char *)v298 + v297;
    v300 = v298;
    do
    {
      v301 = (char *)memchr(v300, 118, v297 - 3);
      if (!v301)
        break;
      if (*(_DWORD *)v301 == 1684631414)
      {
        if (v301 == v299 || v301 - (char *)v298 == -1)
          break;
        *(_QWORD *)&v368 = v296;
        DWORD2(v368) = 4;
        if (SHIBYTE(v377) < 0)
        {
          sub_223197FA4(&v369, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v369 = __dst;
          v370 = v377;
        }
        if (*(char *)(v4 + 1063) < 0)
        {
          sub_223197FA4(&__p, *(void **)(v4 + 1040), *(_QWORD *)(v4 + 1048));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 1040);
          *(_QWORD *)v372 = *(_QWORD *)(v4 + 1056);
        }
        sub_223650834();
        if (byte_255793F8F < 0)
        {
          sub_223197FA4(&v372[8], (void *)xmmword_255793F78, *((unint64_t *)&xmmword_255793F78 + 1));
        }
        else
        {
          *(_OWORD *)&v372[8] = xmmword_255793F78;
          v373 = unk_255793F88;
        }
        v302 = v361;
        if ((unint64_t)v361 < v362)
          goto LABEL_803;
        goto LABEL_806;
      }
      v300 = (__int128 *)(v301 + 1);
      v297 = v299 - (char *)v300;
    }
    while (v299 - (char *)v300 >= 4);
  }
  *(_QWORD *)&v368 = v296;
  DWORD2(v368) = 2;
  if (SHIBYTE(v377) < 0)
  {
    sub_223197FA4(&v369, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v369 = __dst;
    v370 = v377;
  }
  if (*(char *)(v4 + 1063) < 0)
  {
    sub_223197FA4(&__p, *(void **)(v4 + 1040), *(_QWORD *)(v4 + 1048));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 1040);
    *(_QWORD *)v372 = *(_QWORD *)(v4 + 1056);
  }
  sub_223650834();
  if (byte_255793F8F < 0)
  {
    sub_223197FA4(&v372[8], (void *)xmmword_255793F78, *((unint64_t *)&xmmword_255793F78 + 1));
  }
  else
  {
    *(_OWORD *)&v372[8] = xmmword_255793F78;
    v373 = unk_255793F88;
  }
  v302 = v361;
  if ((unint64_t)v361 >= v362)
  {
LABEL_806:
    v361 = sub_2236285DC((char **)&v360, (uint64_t)&v368);
    if (SHIBYTE(v373) < 0)
    {
      operator delete(*(void **)&v372[8]);
      if ((v372[7] & 0x80000000) == 0)
        goto LABEL_808;
    }
    else if ((v372[7] & 0x80000000) == 0)
    {
      goto LABEL_808;
    }
LABEL_804:
    operator delete((void *)__p);
    if ((SHIBYTE(v370) & 0x80000000) == 0)
      goto LABEL_809;
    goto LABEL_805;
  }
LABEL_803:
  v303 = v368;
  *((_DWORD *)v302 + 2) = DWORD2(v368);
  *(_QWORD *)v302 = v303;
  v304 = v369;
  *((_QWORD *)v302 + 4) = v370;
  *((_OWORD *)v302 + 1) = v304;
  v370 = 0;
  v369 = 0uLL;
  v305 = *(_QWORD *)v372;
  *(_OWORD *)(v302 + 40) = __p;
  *((_QWORD *)v302 + 7) = v305;
  *(_QWORD *)v372 = 0;
  __p = 0uLL;
  v306 = *(_OWORD *)&v372[8];
  *((_QWORD *)v302 + 10) = v373;
  *((_OWORD *)v302 + 4) = v306;
  *(_QWORD *)&v372[8] = 0;
  *(_QWORD *)&v372[16] = 0;
  v373 = 0;
  v361 = v302 + 88;
  if ((v372[7] & 0x80000000) != 0)
    goto LABEL_804;
LABEL_808:
  if (SHIBYTE(v370) < 0)
LABEL_805:
    operator delete((void *)v369);
LABEL_809:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v366, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v366 = xmmword_2540CBC48;
    v367 = unk_2540CBC58;
  }
  v307 = HIBYTE(v367);
  if (v367 >= 0)
  {
    v308 = v366;
  }
  else
  {
    v307 = (uint64_t)v366[1];
    v308 = (void **)v366[0];
  }
  if (v307 >= 18)
  {
    v309 = (char *)v308 + v307;
    v310 = v308;
    do
    {
      v311 = (char *)memchr(v310, 67, v307 - 17);
      if (!v311)
        break;
      if (*(_QWORD *)v311 == 0x456C656E6E616843
        && *((_QWORD *)v311 + 1) == 0x696F763C726F7272
        && *((_WORD *)v311 + 8) == 15972)
      {
        if (v311 != v309 && v311 - (char *)v308 != -1)
          goto LABEL_853;
        break;
      }
      v310 = (void **)(v311 + 1);
      v307 = v309 - (char *)v310;
    }
    while (v309 - (char *)v310 >= 18);
  }
  *(_QWORD *)&v368 = v296 + 1;
  DWORD2(v368) = 3;
  v314 = SHIBYTE(v377);
  if (v377 >= 0)
    v315 = HIBYTE(v377);
  else
    v315 = *((_QWORD *)&__dst + 1);
  v316 = v315 + 6;
  if (v315 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v316 >= 0x17)
  {
    v318 = (v316 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v316 | 7) != 0x17)
      v318 = v316 | 7;
    v319 = v318 + 1;
    v317 = (__int128 *)operator new(v318 + 1);
    *((_QWORD *)&v369 + 1) = v315 + 6;
    v370 = v319 | 0x8000000000000000;
    *(_QWORD *)&v369 = v317;
  }
  else
  {
    v370 = 0;
    v369 = 0uLL;
    v317 = &v369;
    HIBYTE(v370) = v315 + 6;
    if (!v315)
      goto LABEL_845;
  }
  if (v314 >= 0)
    v320 = &__dst;
  else
    v320 = (__int128 *)__dst;
  memmove(v317, v320, v315);
LABEL_845:
  strcpy((char *)v317 + v315, ".Error");
  *(_WORD *)&v372[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v373) = 0;
  v321 = v361;
  if ((unint64_t)v361 >= v362)
  {
    v361 = sub_2236285DC((char **)&v360, (uint64_t)&v368);
    if (SHIBYTE(v373) < 0)
    {
      operator delete(*(void **)&v372[8]);
      if ((v372[7] & 0x80000000) == 0)
        goto LABEL_852;
    }
    else if ((v372[7] & 0x80000000) == 0)
    {
      goto LABEL_852;
    }
LABEL_847:
    operator delete((void *)__p);
    if (SHIBYTE(v370) < 0)
      goto LABEL_848;
    goto LABEL_853;
  }
  v322 = v368;
  *((_DWORD *)v361 + 2) = DWORD2(v368);
  *(_QWORD *)v321 = v322;
  v323 = v369;
  *((_QWORD *)v321 + 4) = v370;
  *((_OWORD *)v321 + 1) = v323;
  v370 = 0;
  v369 = 0uLL;
  v324 = *(_QWORD *)v372;
  *(_OWORD *)(v321 + 40) = __p;
  *((_QWORD *)v321 + 7) = v324;
  *(_QWORD *)v372 = 0;
  __p = 0uLL;
  v325 = *(_OWORD *)&v372[8];
  *((_QWORD *)v321 + 10) = v373;
  *((_OWORD *)v321 + 4) = v325;
  *(_QWORD *)&v372[8] = 0;
  *(_QWORD *)&v372[16] = 0;
  v373 = 0;
  v361 = v321 + 88;
  if ((v372[7] & 0x80000000) != 0)
    goto LABEL_847;
LABEL_852:
  if (SHIBYTE(v370) < 0)
  {
LABEL_848:
    operator delete((void *)v369);
    v326 = *(std::__shared_weak_count **)(v4 + 1144);
    if (!v326)
      goto LABEL_857;
    goto LABEL_854;
  }
LABEL_853:
  v326 = *(std::__shared_weak_count **)(v4 + 1144);
  if (!v326)
  {
LABEL_857:
    v363 = 0;
    v364 = 0;
    v365 = 0;
    v330 = 0;
    goto LABEL_874;
  }
LABEL_854:
  v327 = std::__shared_weak_count::lock(v326);
  *((_QWORD *)&v368 + 1) = v327;
  if (!v327)
    goto LABEL_857;
  v328 = v327;
  v329 = *(_QWORD *)(v4 + 1136);
  *(_QWORD *)&v368 = v329;
  if (v329)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v329 + 24))(&v363);
  }
  else
  {
    v363 = 0;
    v364 = 0;
    v365 = 0;
  }
  v331 = (unint64_t *)&v328->__shared_owners_;
  do
    v332 = __ldaxr(v331);
  while (__stlxr(v332 - 1, v331));
  if (v332)
  {
    v330 = v363;
    v333 = v364;
    if (v363 == v364)
      goto LABEL_874;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
    std::__shared_weak_count::__release_weak(v328);
    v330 = v363;
    v333 = v364;
    if (v363 == v364)
      goto LABEL_874;
  }
  do
  {
    *(_QWORD *)&v368 = v296;
    *((_QWORD *)&v368 + 1) = *v330;
    v370 = 0;
    v369 = 0uLL;
    v334 = v358;
    if ((unint64_t)v358 < v359)
    {
      *(_OWORD *)v358 = v368;
      *((_QWORD *)v334 + 3) = 0;
      *((_QWORD *)v334 + 4) = 0;
      *((_QWORD *)v334 + 2) = 0;
      v358 = v334 + 40;
    }
    else
    {
      v358 = sub_223628FA4(&v357, (uint64_t)&v368);
      if (SHIBYTE(v370) < 0)
        operator delete((void *)v369);
    }
    ++v330;
  }
  while (v330 != v333);
  v330 = v363;
LABEL_874:
  if (v330)
  {
    v364 = v330;
    operator delete(v330);
  }
  v335 = *(std::__shared_weak_count **)(v4 + 1144);
  if (!v335 || (v336 = std::__shared_weak_count::lock(v335), (*((_QWORD *)&v368 + 1) = v336) == 0))
  {
    v363 = 0;
    v364 = 0;
    v365 = 0;
    v339 = 0;
    goto LABEL_895;
  }
  v337 = v336;
  v338 = *(_QWORD *)(v4 + 1136);
  *(_QWORD *)&v368 = v338;
  if (v338)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v338 + 32))(&v363);
  }
  else
  {
    v363 = 0;
    v364 = 0;
    v365 = 0;
  }
  v340 = (unint64_t *)&v337->__shared_owners_;
  do
    v341 = __ldaxr(v340);
  while (__stlxr(v341 - 1, v340));
  if (v341)
  {
    v339 = v363;
    v342 = v364;
    if (v363 == v364)
      goto LABEL_895;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
    std::__shared_weak_count::__release_weak(v337);
    v339 = v363;
    v342 = v364;
    if (v363 == v364)
      goto LABEL_895;
  }
  do
  {
    *(_QWORD *)&v368 = v296 + 1;
    *((_QWORD *)&v368 + 1) = *v339;
    v370 = 0;
    v369 = 0uLL;
    v343 = v358;
    if ((unint64_t)v358 < v359)
    {
      *(_OWORD *)v358 = v368;
      *((_QWORD *)v343 + 3) = 0;
      *((_QWORD *)v343 + 4) = 0;
      *((_QWORD *)v343 + 2) = 0;
      v358 = v343 + 40;
    }
    else
    {
      v358 = sub_223628FA4(&v357, (uint64_t)&v368);
      if (SHIBYTE(v370) < 0)
        operator delete((void *)v369);
    }
    ++v339;
  }
  while (v339 != v342);
  v339 = v363;
LABEL_895:
  if (v339)
  {
    v364 = v339;
    operator delete(v339);
  }
  if (SHIBYTE(v367) < 0)
  {
    operator delete(v366[0]);
    if ((SHIBYTE(v375) & 0x80000000) == 0)
    {
LABEL_899:
      if ((SHIBYTE(v377) & 0x80000000) == 0)
        goto LABEL_900;
LABEL_904:
      operator delete((void *)__dst);
      if ((*(char *)(v351 + 31) & 0x80000000) == 0)
        goto LABEL_901;
      goto LABEL_905;
    }
  }
  else if ((SHIBYTE(v375) & 0x80000000) == 0)
  {
    goto LABEL_899;
  }
  operator delete((void *)v374);
  if (SHIBYTE(v377) < 0)
    goto LABEL_904;
LABEL_900:
  if ((*(char *)(v351 + 31) & 0x80000000) == 0)
  {
LABEL_901:
    *(_OWORD *)v355 = *(_OWORD *)(v351 + 8);
    v356 = *(_QWORD *)(v351 + 24);
    goto LABEL_906;
  }
LABEL_905:
  sub_223197FA4(v355, *(void **)(v351 + 8), *(_QWORD *)(v351 + 16));
LABEL_906:
  v344 = *(_QWORD *)(v351 + 56) != 0;
  if (*(char *)(v351 + 55) < 0)
  {
    sub_223197FA4(v353, *(void **)(v351 + 32), *(_QWORD *)(v351 + 40));
  }
  else
  {
    *(_OWORD *)v353 = *(_OWORD *)(v351 + 32);
    v354 = *(_QWORD *)(v351 + 48);
  }
  sub_223629100(v352, (__int128 *)v355, v344, (uint64_t *)&v360, (uint64_t *)&v357, (__int128 *)v353);
  if (SHIBYTE(v354) < 0)
  {
    operator delete(v353[0]);
    if ((SHIBYTE(v356) & 0x80000000) == 0)
    {
LABEL_911:
      v345 = (char *)v357;
      if (v357)
        goto LABEL_912;
LABEL_922:
      v347 = (char *)v360;
      if (!v360)
        return;
LABEL_923:
      v348 = v361;
      v349 = v347;
      if (v361 == v347)
      {
LABEL_934:
        v361 = v347;
        operator delete(v349);
        return;
      }
      while (1)
      {
        while (*(v348 - 1) < 0)
        {
          operator delete(*((void **)v348 - 3));
          if (*(v348 - 25) < 0)
            goto LABEL_925;
LABEL_931:
          if ((*(v348 - 49) & 0x80000000) == 0)
            goto LABEL_926;
LABEL_932:
          operator delete(*((void **)v348 - 9));
          v348 -= 88;
          if (v348 == v347)
          {
LABEL_933:
            v349 = v360;
            goto LABEL_934;
          }
        }
        if ((*(v348 - 25) & 0x80000000) == 0)
          goto LABEL_931;
LABEL_925:
        operator delete(*((void **)v348 - 6));
        if (*(v348 - 49) < 0)
          goto LABEL_932;
LABEL_926:
        v348 -= 88;
        if (v348 == v347)
          goto LABEL_933;
      }
    }
  }
  else if ((SHIBYTE(v356) & 0x80000000) == 0)
  {
    goto LABEL_911;
  }
  operator delete(v355[0]);
  v345 = (char *)v357;
  if (!v357)
    goto LABEL_922;
LABEL_912:
  v346 = v358;
  if (v358 == v345)
  {
    v358 = v345;
    operator delete(v345);
    v347 = (char *)v360;
    if (!v360)
      return;
    goto LABEL_923;
  }
  do
  {
    if (*(v346 - 1) < 0)
      operator delete(*((void **)v346 - 3));
    v346 -= 40;
  }
  while (v346 != v345);
  v358 = v345;
  operator delete(v357);
  v347 = (char *)v360;
  if (v360)
    goto LABEL_923;
}

void sub_223618DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (a46 < 0)
    operator delete(__p);
  if (*(char *)(v52 - 137) < 0)
    operator delete(*(void **)(v52 - 160));
  if (*(char *)(v52 - 105) < 0)
    operator delete(*(void **)(v52 - 128));
  sub_223620C24(&a24);
  sub_223620C94(&a27);
  _Unwind_Resume(a1);
}

void **sub_22361923C(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_223620AC4(v3 - 128);
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_223619294(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::promise<void> *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::runtime_error *exception;
  std::runtime_error *v17;
  std::future<void> v18;
  std::runtime_error v19;
  _BYTE v20[8];
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::promise<void> v23;

  v2 = a1[5];
  if (v2)
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 72) + 432) + 40))(*(_QWORD *)(*(_QWORD *)(v2 + 72) + 432)) & 1) == 0
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 1108, (uint64_t)"keyframing_node_->C<KeyframeChannels::ResetSession>().InputEnabled()", 68, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_21;
    }
    v3 = *(_QWORD *)(a1[5] + 72) + 424;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 16))(v3, &v21);
    if (a1[5])
    {
      v4 = a1[7];
      if (v4)
      {
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 72) + 936) + 40))(*(_QWORD *)(*(_QWORD *)(v4 + 72) + 936)) & 1) == 0
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 1113, (uint64_t)"plane_detection_node_->C<KFPDC::ResetSession>().InputEnabled()", 62, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_21;
        }
        v5 = *(_QWORD *)(a1[7] + 72);
        v6 = std::promise<void>::promise(&v23);
        std::promise<void>::get_future(v6);
        v21 = 0;
        v22 = 0;
        v7 = *(std::__shared_weak_count **)(v5 + 952);
        if (!v7
          || (v8 = std::__shared_weak_count::lock(v7), (v22 = v8) == 0)
          || (v9 = v8, v10 = *(_QWORD *)(v5 + 944), (v21 = v10) == 0))
        {
          std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
          v19.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          v17 = std::runtime_error::runtime_error(exception, &v19);
          v17->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
          __cxa_throw(v17, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
        }
        v19.__vftable = (std::runtime_error_vtbl *)v23.__state_;
        v23.__state_ = 0;
        (*(void (**)(uint64_t, _BYTE *, std::runtime_error *))(*(_QWORD *)v10 + 56))(v10, v20, &v19);
        MEMORY[0x227684B68](&v19);
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        MEMORY[0x227684B68](&v23);
        std::future<void>::~future(&v18);
      }
    }
  }
  v13 = a1[2];
  if (v13)
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v13 + 72) + 600) + 40))(*(_QWORD *)(*(_QWORD *)(v13 + 72) + 600)) & 1) != 0
      || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 1118, (uint64_t)"meshing_node_->C<MeshingChannels::ResetSession>().InputEnabled()", 64, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
    {
      v14 = *(_QWORD *)(a1[2] + 72) + 592;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 16))(v14, &v21);
      return sub_22360D094(a1);
    }
LABEL_21:
    abort();
  }
  return sub_22360D094(a1);
}

uint64_t sub_223619594(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::future<void> v6;
  std::future<void> v7;
  char v8;

  v2 = a1[5];
  if (v2)
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 72) + 768) + 40))(*(_QWORD *)(*(_QWORD *)(v2 + 72) + 768)) & 1) == 0
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 1127, (uint64_t)"keyframing_node_->C<KeyframeChannels::FilesystemAccessGranted>().InputEnabled()", 79, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_10;
    }
    v3 = *(_QWORD *)(a1[5] + 72) + 760;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v3 + 16))(v3, &v8);
    if (a1[5])
    {
      v4 = a1[7];
      if (v4)
      {
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 72) + 1104) + 40))(*(_QWORD *)(*(_QWORD *)(v4 + 72) + 1104)) & 1) != 0
          || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 1133, (uint64_t)"plane_detection_node_->C<KFPDC::FilesystemAccessGranted>().InputEnabled()", 73, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
        {
          sub_223655E78((uint64_t)&v7, (uint64_t *)(*(_QWORD *)(a1[7] + 72) + 1112), (uint64_t)&v8);
          std::future<void>::~future(&v7);
          goto LABEL_9;
        }
LABEL_10:
        abort();
      }
    }
  }
LABEL_9:
  sub_223655E78((uint64_t)&v6, (uint64_t *)(*(_QWORD *)(a1[9] + 72) + 272), (uint64_t)&v8);
  std::future<void>::~future(&v6);
  return sub_22360D094(a1);
}

void sub_2236196D0(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;
  _QWORD **v7;
  _QWORD **v8;
  uint64_t v9;
  _QWORD **v10;
  uint64_t v11;
  _QWORD **v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  const char *v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  const char *v24;
  size_t v25;
  void *v26;
  unint64_t v27;
  const char *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  size_t v38;
  std::__shared_weak_count_vtbl *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD v73[3];
  int v74;
  const char *v75;
  int v76;
  const char *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  void *object;
  void *v82[2];
  __int128 v83;
  void *__p[2];
  unint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;

  v2 = (std::mutex *)(a1 + 1304);
  std::mutex::lock((std::mutex *)(a1 + 1304));
  std::mutex::unlock(v2);
  v3 = *(_QWORD *)(a1 + 1368);
  if (v3)
  {
    v4 = v3 - 1;
    *(_QWORD *)(a1 + 1368) = v4;
    if (!v4)
    {
      v5 = *(_QWORD ***)(*(_QWORD *)(a1 + 72) + 72);
      (*(void (**)(_QWORD *))(*v5[12] + 24))(v5[12]);
      (*(void (**)(_QWORD *))(*v5[33] + 24))(v5[33]);
      (*(void (**)(_QWORD *))(*v5[54] + 24))(v5[54]);
      v6 = *(_QWORD *)(a1 + 16);
      if (v6)
      {
        v7 = *(_QWORD ***)(v6 + 72);
        (*(void (**)(_QWORD *))(*v7[12] + 24))(v7[12]);
        (*(void (**)(_QWORD *))(*v7[33] + 24))(v7[33]);
        (*(void (**)(_QWORD *))(*v7[54] + 24))(v7[54]);
        (*(void (**)(_QWORD *))(*v7[75] + 24))(v7[75]);
        (*(void (**)(_QWORD *))(*v7[96] + 24))(v7[96]);
        (*(void (**)(_QWORD *))(*v7[117] + 24))(v7[117]);
        (*(void (**)(_QWORD *))(*v7[138] + 24))(v7[138]);
        (*(void (**)(_QWORD *))(*v7[159] + 24))(v7[159]);
        (*(void (**)(_QWORD *))(*v7[180] + 24))(v7[180]);
        (*(void (**)(_QWORD *))(*v7[201] + 24))(v7[201]);
        (*(void (**)(_QWORD *))(*v7[222] + 24))(v7[222]);
        (*(void (**)(_QWORD *))(*v7[243] + 24))(v7[243]);
        (*(void (**)(_QWORD *))(*v7[264] + 24))(v7[264]);
        (*(void (**)(_QWORD *))(*v7[285] + 24))(v7[285]);
        (*(void (**)(_QWORD *))(*v7[306] + 24))(v7[306]);
        (*(void (**)(_QWORD *))(*v7[327] + 24))(v7[327]);
        (*(void (**)(_QWORD *))(*v7[348] + 24))(v7[348]);
        (*(void (**)(_QWORD *))(*v7[369] + 24))(v7[369]);
        (*(void (**)(_QWORD *))(*v7[390] + 24))(v7[390]);
        (*(void (**)(_QWORD *))(*v7[411] + 24))(v7[411]);
        (*(void (**)(_QWORD *))(*v7[432] + 24))(v7[432]);
        (*(void (**)(_QWORD *))(*v7[453] + 24))(v7[453]);
        (*(void (**)(_QWORD *))(*v7[474] + 24))(v7[474]);
        (*(void (**)(_QWORD *))(*v7[495] + 24))(v7[495]);
        (*(void (**)(_QWORD *))(*v7[516] + 24))(v7[516]);
        v8 = *(_QWORD ***)(*(_QWORD *)(a1 + 32) + 72);
        (*(void (**)(_QWORD *))(*v8[12] + 24))(v8[12]);
        (*(void (**)(_QWORD *))(*v8[33] + 24))(v8[33]);
        (*(void (**)(_QWORD *))(*v8[54] + 24))(v8[54]);
        (*(void (**)(_QWORD *))(*v8[75] + 24))(v8[75]);
        (*(void (**)(_QWORD *))(*v8[96] + 24))(v8[96]);
        (*(void (**)(_QWORD *))(*v8[117] + 24))(v8[117]);
      }
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
      {
        v10 = *(_QWORD ***)(v9 + 72);
        (*(void (**)(_QWORD *))(*v10[12] + 24))(v10[12]);
        (*(void (**)(_QWORD *))(*v10[33] + 24))(v10[33]);
        (*(void (**)(_QWORD *))(*v10[54] + 24))(v10[54]);
        (*(void (**)(_QWORD *))(*v10[75] + 24))(v10[75]);
        (*(void (**)(_QWORD *))(*v10[96] + 24))(v10[96]);
        (*(void (**)(_QWORD *))(*v10[117] + 24))(v10[117]);
        (*(void (**)(_QWORD *))(*v10[138] + 24))(v10[138]);
        (*(void (**)(_QWORD *))(*v10[159] + 24))(v10[159]);
        (*(void (**)(_QWORD *))(*v10[180] + 24))(v10[180]);
        (*(void (**)(_QWORD *))(*v10[201] + 24))(v10[201]);
        (*(void (**)(_QWORD *))(*v10[222] + 24))(v10[222]);
        (*(void (**)(_QWORD *))(*v10[243] + 24))(v10[243]);
        (*(void (**)(_QWORD *))(*v10[264] + 24))(v10[264]);
        (*(void (**)(_QWORD *))(*v10[285] + 24))(v10[285]);
        (*(void (**)(_QWORD *))(*v10[306] + 24))(v10[306]);
        (*(void (**)(_QWORD *))(*v10[327] + 24))(v10[327]);
        (*(void (**)(_QWORD *))(*v10[348] + 24))(v10[348]);
        (*(void (**)(_QWORD *))(*v10[369] + 24))(v10[369]);
        (*(void (**)(_QWORD *))(*v10[390] + 24))(v10[390]);
        (*(void (**)(_QWORD *))(*v10[411] + 24))(v10[411]);
        if (*(_QWORD *)(a1 + 40))
        {
          v11 = *(_QWORD *)(a1 + 56);
          if (v11)
          {
            v12 = *(_QWORD ***)(v11 + 72);
            (*(void (**)(_QWORD *))(*v12[12] + 24))(v12[12]);
            (*(void (**)(_QWORD *))(*v12[33] + 24))(v12[33]);
            (*(void (**)(_QWORD *))(*v12[54] + 24))(v12[54]);
            (*(void (**)(_QWORD *))(*v12[75] + 24))(v12[75]);
            (*(void (**)(_QWORD *))(*v12[96] + 24))(v12[96]);
            (*(void (**)(_QWORD *))(*v12[117] + 24))(v12[117]);
            (*(void (**)(_QWORD *))(*v12[138] + 24))(v12[138]);
          }
        }
      }
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 72) + 96);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      sub_22360D094((_QWORD *)a1);
    }
    return;
  }
  sub_2235F8ED4(&v80);
  if (**(int **)(v80 + 56) > 4)
    return;
  v14 = *(unsigned __int8 *)(v80 + 72);
  v15 = sub_22322F254(v80, "OSLogSurrogateAppender", 1, 0);
  if (!v14 && v15 == 0)
    return;
  v17 = v15;
  v73[0] = &v80;
  v73[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v73[2] = std::chrono::system_clock::now().__d_.__rep_;
  v74 = 4;
  v75 = "unknown file";
  v76 = 1148;
  v78 = 0;
  v79 = 0;
  v77 = "unknown function";
  v18 = v80;
  v19 = v80 + 16;
  if (*(char *)(v80 + 39) < 0)
  {
    v21 = *(const char **)(v80 + 16);
    v20 = *(_QWORD *)(v80 + 24);
    v23 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v23 & 1) != 0)
      goto LABEL_19;
  }
  else
  {
    v20 = *(unsigned __int8 *)(v80 + 39);
    v21 = (const char *)(*(_QWORD *)v73[0] + 16);
    v22 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v22 & 1) != 0)
      goto LABEL_19;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&object);
    sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
    if ((_BYTE)v83 && SHIBYTE(v82[1]) < 0)
      operator delete(object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_19:
  if (byte_255788F57 >= 0)
    v24 = (const char *)&xmmword_255788F40;
  else
    v24 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v25 = byte_255788F57;
  else
    v25 = *((_QWORD *)&xmmword_255788F40 + 1);
  object = os_log_create(v24, v21);
  v26 = v82;
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v25 >= 0x17)
  {
    v27 = v17;
    v28 = v21;
    v29 = v18;
    v30 = v14;
    v31 = v19;
    v32 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v32 = v25 | 7;
    v33 = v32 + 1;
    v26 = operator new(v32 + 1);
    v82[1] = (void *)v25;
    *(_QWORD *)&v83 = v33 | 0x8000000000000000;
    v82[0] = v26;
    v19 = v31;
    v14 = v30;
    v18 = v29;
    v21 = v28;
    v17 = v27;
    goto LABEL_32;
  }
  BYTE7(v83) = v25;
  if (v25)
LABEL_32:
    memmove(v26, v24, v25);
  *((_BYTE *)v26 + v25) = 0;
  BYTE8(v83) = 1;
  v34 = __p;
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v20 >= 0x17)
  {
    v35 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v35 = v20 | 7;
    v36 = v35 + 1;
    v34 = operator new(v35 + 1);
    __p[1] = (void *)v20;
    v85 = v36 | 0x8000000000000000;
    __p[0] = v34;
  }
  else
  {
    HIBYTE(v85) = v20;
    if (!v20)
      goto LABEL_41;
  }
  memmove(v34, v21, v20);
LABEL_41:
  *((_BYTE *)v34 + v20) = 0;
  v86 = 1;
  v37 = object;
  if (SHIBYTE(v85) < 0)
    operator delete(__p[0]);
  if (BYTE8(v83) && SBYTE7(v83) < 0)
    operator delete(v82[0]);
  if (object)
    os_release(object);
  if (v17 && *(_QWORD *)(v17 + 24))
  {
    v38 = _os_log_pack_size();
    v39 = (std::__shared_weak_count_vtbl *)operator new(v38, (std::align_val_t)8uLL);
    v40 = (std::__shared_weak_count *)operator new();
    v41 = v40;
    v40->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    v40->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v40->__shared_weak_owners_ = 0;
    v40[1].__vftable = v39;
    object = v39;
    v82[0] = v39;
    v82[1] = v40;
    do
      v43 = __ldxr(p_shared_owners);
    while (__stxr(v43 + 1, p_shared_owners));
    v83 = 0uLL;
    __p[0] = 0;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v41);
    }
    v45 = object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v46 = operator new();
    v47 = *(unsigned __int8 *)(v18 + 39);
    if ((v47 & 0x80u) == 0)
      v48 = v19;
    else
      v48 = *(_QWORD *)(v18 + 16);
    if ((v47 & 0x80u) != 0)
      v47 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)v46 = v45;
    *(_OWORD *)(v46 + 8) = *(_OWORD *)v82;
    v82[0] = 0;
    v82[1] = 0;
    *(_OWORD *)(v46 + 24) = v83;
    v83 = 0uLL;
    *(_QWORD *)(v46 + 40) = v48;
    *(_QWORD *)(v46 + 48) = v47;
    *(_BYTE *)(v46 + 56) = 16;
    v87 = 0;
    v88 = v46;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v17 + 24) + 40))(*(_QWORD *)(v17 + 24), &v88);
    v49 = v88;
    v88 = 0;
    if (v49)
    {
      v50 = *(std::__shared_weak_count **)(v49 + 32);
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v53 = *(std::__shared_weak_count **)(v49 + 16);
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      MEMORY[0x227684CE8](v49, 0x10F0C40B62ED6C6);
      v56 = v87;
      v87 = 0;
      if (v56)
      {
        v57 = *(std::__shared_weak_count **)(v56 + 32);
        if (v57)
        {
          v58 = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v60 = *(std::__shared_weak_count **)(v56 + 16);
        if (v60)
        {
          v61 = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        MEMORY[0x227684CE8](v56, 0x10F0C40B62ED6C6);
      }
    }
    v63 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
    if (*((_QWORD *)&v83 + 1))
    {
      v64 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = (std::__shared_weak_count *)v82[1];
    if (v82[1])
    {
      v67 = (unint64_t *)((char *)v82[1] + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
  }
  else
  {
    os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
    LOWORD(object) = 0;
    v69 = (void *)_os_log_send_and_compose_impl();
    if (v69)
      free(v69);
  }
  if (v14)
  {
    sub_22322C138((uint64_t)v73, "Attempting to enable an already-enabled session. Ignoring...");
    sub_223182C08((uint64_t)v73);
  }
  sub_223182C08((uint64_t)v73);
  v70 = v79;
  if (v79)
  {
    v71 = (unint64_t *)&v79->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
}

void sub_22361A204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a27)
  {
    if (a26 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_22361A244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_22319A054((uint64_t *)(v3 - 96));
  sub_22319A054((uint64_t *)(v3 - 104));
  sub_223199DE8((uint64_t)va1);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22361A278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x227684CE8](v3, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22361A2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22361A2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22361A2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28 && a27 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_22361A318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;

  *(_OWORD *)(a1 + 8) = 0u;
  v6 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = off_24EC54C18;
  v7 = operator new();
  sub_2235F9F94(v7, a2, a3);
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = sub_223656180;
  if (*(char *)(a1 + 31) < 0)
  {
    *(_QWORD *)(a1 + 16) = 18;
    v6 = *(char **)(a1 + 8);
  }
  else
  {
    *(_BYTE *)(a1 + 31) = 18;
  }
  strcpy(v6, "Session Node Group");
  sub_2236226A8((void **)(a1 + 32), "Node group to run the reconstruction session", 0x2CuLL);
  return a1;
}

void sub_22361A3F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = 0;
  if (v3)
    (*(void (**)(void))(v1 + 64))();
  sub_224501FF8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22361A454@<X0>(uint64_t a1@<X0>, void **a2@<X8>)
{
  return sub_22360DF68(a2, *(_QWORD **)(a1 + 56));
}

uint64_t sub_22361A460(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;

  result = sub_22360D094(*(_QWORD **)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(v3 + 40);
  if (v4)
  {
    (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(v4 + 72) + 592) + 16))(*(_QWORD *)(v4 + 72) + 592, &v5);
    return sub_223656028(*(_QWORD ***)(*(_QWORD *)(v3 + 40) + 72));
  }
  return result;
}

_QWORD *sub_22361A4BC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC54C48;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_22361A500(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC54C48;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22361A554(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24EC54C18;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 64))();
  *(_QWORD *)a1 = off_24EC77A78;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22361A5DC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24EC54C18;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 64))();
  *(_QWORD *)a1 = off_24EC77A78;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_8:
      JUMPOUT(0x227684CE8);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_8;
}

void sub_22361A66C(uint64_t a1)
{
  sub_22361EE84(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22361A694(uint64_t a1)
{
  sub_22361ECA0(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22361A6B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC54D00;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22361A6F0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC54D00;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

void sub_22361A738(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24EC37B68;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24EC37B68;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_22361A80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22361A83C(uint64_t a1)
{
  sub_22361C1F0(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22361A860(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  __int128 *v48;
  __int128 *v49;
  uint64_t v50;
  std::__shared_weak_count *v51[2];
  _QWORD v52[229];
  std::__shared_weak_count *v53;
  __int128 v54;
  uint64_t v55;
  __int128 *v56;
  _BYTE v57[24];
  _BYTE *v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (!a1[18])
  {
    v25 = (uint64_t **)a1[9];
    *(_OWORD *)v51 = 0uLL;
    v26 = (std::__shared_weak_count *)a1[5];
    if (v26)
    {
      v27 = std::__shared_weak_count::lock(v26);
      if (v27)
      {
        v28 = v27;
        v29 = (std::__shared_weak_count *)a1[4];
        p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
        do
          v31 = __ldxr(p_shared_weak_owners);
        while (__stxr(v31 + 1, p_shared_weak_owners));
        v51[0] = v29;
        v51[1] = v27;
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v33 = __ldaxr(p_shared_owners);
        while (__stlxr(v33 - 1, p_shared_owners));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      else
      {
        *(_OWORD *)v51 = 0uLL;
      }
    }
    sub_223257000((uint64_t)v52, a2);
    v56 = 0;
    v48 = (__int128 *)operator new(0x738uLL);
    *(_QWORD *)v48 = &off_24EC54FF0;
    *(__int128 *)((char *)v48 + 8) = *(_OWORD *)v51;
    sub_2232568B4((uint64_t)v48 + 24, (uint64_t)v52);
    v56 = v48;
    sub_2245022E4(*v25, (uint64_t)&v54);
    v49 = v56;
    if (v56 == &v54)
    {
      v50 = 4;
      v49 = &v54;
    }
    else
    {
      if (!v56)
      {
LABEL_58:
        sub_2232555B8((uint64_t)v52);
        return;
      }
      v50 = 5;
    }
    (*(void (**)(__int128 *))(*(_QWORD *)v49 + 8 * v50))(v49);
    goto LABEL_58;
  }
  v4 = (std::__shared_weak_count *)operator new(0x738uLL);
  v4->__shared_owners_ = 0;
  v5 = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC38750;
  v6 = v4 + 1;
  sub_223257000((uint64_t)&v4[1], a2);
  v52[228] = v4 + 1;
  v53 = v4;
  v7 = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  v9 = (uint64_t *)a1[18];
  v10 = (_QWORD *)operator new();
  *v10 = v9 + 7;
  std::mutex::lock((std::mutex *)(v9 + 7));
  *(_QWORD *)&v54 = v10;
  *((_QWORD *)&v54 + 1) = v9;
  if (!*((_BYTE *)v9 + 48))
    sub_22324A974();
  v11 = v9[4];
  v12 = *v9;
  v13 = (std::__shared_weak_count **)(*v9 + 16 * v11);
  do
    v14 = __ldxr(v5);
  while (__stxr(v14 + 1, v5));
  *v13 = v6;
  v15 = v12 + 16 * v11;
  v16 = *(std::__shared_weak_count **)(v15 + 8);
  *(_QWORD *)(v15 + 8) = v4;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (v9[1] - *v9) >> 4;
  v20 = v9[5];
  v21 = v9[4] + 1;
  if (v21 >= v19)
    v22 = (v9[1] - *v9) >> 4;
  else
    v22 = 0;
  v9[4] = v21 - v22;
  if (v20 != v19)
  {
    v9[5] = v20 + 1;
    v24 = (std::mutex **)v54;
    if (!(_QWORD)v54)
      goto LABEL_33;
    goto LABEL_32;
  }
  v23 = v9[3] + 1;
  if (v23 < v19)
    v19 = 0;
  v9[3] = v23 - v19;
  v24 = (std::mutex **)v54;
  if ((_QWORD)v54)
  {
LABEL_32:
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
  }
LABEL_33:
  v34 = (uint64_t **)a1[9];
  v54 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      *(_QWORD *)&v54 = v38;
      *((_QWORD *)&v54 + 1) = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      v54 = 0uLL;
    }
  }
  v43 = (char *)operator new(0x30uLL);
  *(_QWORD *)v43 = &off_24EC54F28;
  *(_OWORD *)(v43 + 8) = v54;
  v54 = 0uLL;
  *((_QWORD *)v43 + 3) = v6;
  *((_QWORD *)v43 + 4) = v4;
  v55 = 0;
  v56 = 0;
  v58 = v43;
  sub_2245022E4(*v34, (uint64_t)v57);
  v44 = v58;
  if (v58 == v57)
  {
    v45 = 4;
    v44 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_47;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_47:
  if (v53)
  {
    v46 = &v53->__shared_owners_;
    do
      v47 = __ldaxr((unint64_t *)v46);
    while (__stlxr(v47 - 1, (unint64_t *)v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
}

void sub_22361ACB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 120);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 144);
  }
  else
  {
    if (!v12)
    {
      sub_223494F34((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  sub_223494F34((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22361AD0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_22361AE04(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  char *v50;
  std::string *v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  __int128 *v60;
  __int128 *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  __int128 *v69;
  std::string *v70;
  std::runtime_error *exception;
  std::runtime_error *v72;
  std::__shared_weak_count *v73[2];
  _BYTE v74[1824];
  __int128 v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  std::runtime_error v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  __int128 v83;
  _QWORD *v84;
  __int128 *v85;
  _QWORD v86[3];
  std::string v87;
  std::string *v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v83 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v83 + 1) = 45;
    v68 = (_QWORD *)a1[6];
    v67 = a1 + 6;
    v66 = v68;
    v69 = (__int128 *)*((unsigned __int8 *)v67 + 23);
    if ((char)v69 < 0)
      v69 = (__int128 *)v67[1];
    else
      v66 = v67;
    v84 = v66;
    v85 = v69;
    sub_2231A9820((uint64_t)&v83, (uint64_t)v86, 0, 0, &v87);
    if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = &v87;
    else
      v70 = (std::string *)v87.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v80, (const char *)v70);
    v80.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v72 = std::runtime_error::runtime_error(exception, &v80);
    v72->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v72, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC55070;
    v6[1].__vftable = *a3;
    v78 = v6 + 1;
    v79 = v6;
    v76 = v6 + 1;
    v77 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x738uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC38750;
    v11 = v9 + 1;
    sub_223257000((uint64_t)&v9[1], a2);
    v81 = v9 + 1;
    v82 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v83 = v15;
    *((_QWORD *)&v83 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_22324A974();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v11;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v83;
      if (!(_QWORD)v83)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v83 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v83 = v43;
            *((_QWORD *)&v83 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v83 = 0uLL;
          }
        }
        v48 = v76;
        v49 = v77;
        v76 = 0;
        v77 = 0;
        v50 = (char *)operator new(0x38uLL);
        *(_QWORD *)v50 = &off_24EC550C0;
        *(_OWORD *)(v50 + 8) = v83;
        v83 = 0uLL;
        *((_QWORD *)v50 + 3) = v11;
        *((_QWORD *)v50 + 4) = v9;
        v84 = 0;
        v85 = 0;
        *((_QWORD *)v50 + 5) = v48;
        *((_QWORD *)v50 + 6) = v49;
        v86[0] = 0;
        v86[1] = 0;
        v88 = (std::string *)v50;
        sub_2245022E4(*v39, (uint64_t)&v87);
        v51 = v88;
        if (v88 == &v87)
        {
          v52 = 4;
          v51 = &v87;
        }
        else
        {
          if (!v88)
            goto LABEL_51;
          v52 = 5;
        }
        (*(void (**)(void))(v51->__r_.__value_.__r.__words[0] + 8 * v52))();
LABEL_51:
        if (v82)
        {
          v53 = &v82->__shared_owners_;
          do
            v54 = __ldaxr((unint64_t *)v53);
          while (__stlxr(v54 - 1, (unint64_t *)v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        if (v77)
        {
          v55 = &v77->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v79)
        {
          v57 = &v79->__shared_owners_;
          do
            v58 = __ldaxr((unint64_t *)v57);
          while (__stlxr(v58 - 1, (unint64_t *)v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v83;
      if (!(_QWORD)v83)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x227684CE8](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  *(_OWORD *)v73 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = (std::__shared_weak_count *)a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v73[0] = v34;
      v73[1] = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      *(_OWORD *)v73 = 0uLL;
    }
  }
  sub_223257000((uint64_t)v74, a2);
  v59 = operator new(0x20uLL);
  v59[1] = 0;
  v59[2] = 0;
  *v59 = &off_24EC55070;
  v59[3] = *a3;
  *a3 = 0;
  *(_QWORD *)&v75 = v59 + 3;
  *((_QWORD *)&v75 + 1) = v59;
  v85 = 0;
  v60 = (__int128 *)operator new(0x748uLL);
  *(_QWORD *)v60 = &off_24EC55140;
  *(__int128 *)((char *)v60 + 8) = *(_OWORD *)v73;
  sub_2232568B4((uint64_t)v60 + 24, (uint64_t)v74);
  *(__int128 *)((char *)v60 + 1848) = v75;
  v75 = 0uLL;
  v85 = v60;
  sub_2245022E4(*v30, (uint64_t)&v83);
  v61 = v85;
  if (v85 == &v83)
  {
    v62 = 4;
    v61 = &v83;
  }
  else
  {
    if (!v85)
      goto LABEL_72;
    v62 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v61 + 8 * v62))(v61);
LABEL_72:
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
  if (*((_QWORD *)&v75 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  sub_2232555B8((uint64_t)v74);
}

void sub_22361B48C(_Unwind_Exception *exception_object, int a2)
{
  std::__assoc_sub_state **v2;
  uint64_t v3;
  std::__assoc_sub_state *v4;
  std::exception_ptr v5;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v4 = *v2;
    if (*v2)
    {
      std::exception_ptr::exception_ptr((std::exception_ptr *)(v3 - 160), (const std::exception_ptr *)(v3 - 184));
      v5.__ptr_ = (void *)(v3 - 160);
      std::__assoc_sub_state::set_exception(v4, v5);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v3 - 160));
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v3 - 184));
      std::runtime_error::~runtime_error((std::runtime_error *)(v3 - 200));
      if (*(char *)(v3 - 81) < 0)
        operator delete(*(void **)(v3 - 104));
      JUMPOUT(0x22361B3A0);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_22361B500(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 - 184));
  std::runtime_error::~runtime_error((std::runtime_error *)(v1 - 200));
  if (*(char *)(v1 - 81) < 0)
  {
    operator delete(*(void **)(v1 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22361B554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 136);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 160);
  }
  else
  {
    if (!v12)
    {
      sub_223495C88((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  sub_223495C88((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22361B5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;

  sub_2232555B8(v10);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22361B5DC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 80);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 104);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  sub_22332429C((_QWORD *)(v2 - 160));
  sub_223167354(v2 - 176);
  sub_223167354(v2 - 232);
  sub_223167354(v2 - 216);
  _Unwind_Resume(a1);
}

void sub_22361B67C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  sub_223167354(v2 - 232);
  sub_223167354(v2 - 216);
  _Unwind_Resume(a1);
}

void sub_22361B6A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1 - 232);
  sub_223167354(v1 - 216);
  _Unwind_Resume(a1);
}

void sub_22361B6C0(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_22361B734(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC551C0;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC37B68;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_22361B864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22361B8D8(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC55240;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_22361B9E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_22361BA4C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC552C0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22361BC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_22361BD2C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC55340;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22361BF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22361C00C(uint64_t a1)
{
  return sub_22361C1F0(a1 - 16);
}

void sub_22361C014(uint64_t a1)
{
  sub_22361C1F0(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22361C03C(uint64_t a1, uint64_t a2)
{
  return sub_22361B734((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_22361C044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22361BA4C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_22361C04C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22361BD2C((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_22361C054(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_22361C05C(uint64_t a1)
{
  return sub_22361C1F0(a1 - 24);
}

void sub_22361C064(uint64_t a1)
{
  sub_22361C1F0(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22361C08C(uint64_t a1)
{
  return sub_22361B8D8((_QWORD *)(a1 - 24));
}

uint64_t sub_22361C094(uint64_t a1)
{
  return a1 - 24;
}

void sub_22361C0A0()
{
  JUMPOUT(0x227684CE8);
}

void sub_22361C0B4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BYTE v6[8];
  std::__shared_weak_count *v7;
  char v8;

  sub_2235F9074((uint64_t)v6, a1);
  if (!v8
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/SessionNodeGroup.cpp", 194, (uint64_t)"frame", 5, (uint64_t)"Preprocessing cannot fail", 25, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223257000(a2, (uint64_t)v6);
  if (v8)
  {
    sub_2232555B8((uint64_t)v6);
  }
  else
  {
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void sub_22361C194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  if (!LOBYTE(STACK[0x728]))
  {
    v12 = (std::__shared_weak_count *)a11;
    if (a11)
    {
      v13 = (unint64_t *)(a11 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    _Unwind_Resume(a1);
  }
  sub_2232555B8((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_22361C1F0(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC54D38;
  *(_QWORD *)(a1 + 16) = &unk_24EC54DB0;
  *(_QWORD *)(a1 + 24) = &unk_24EC54DF0;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_22361C3F0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC54F28;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_22361C434(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC54F28;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22361C488(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC54F28;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_22361C4F8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC54F28;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_22361C548(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_22361C584(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_22361C5BC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_22361C8E0((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_22361CC68(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22361C784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_22361CC68(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22361C868(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE25EnqueueMessag"
                     "eAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE25En"
                                "queueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22361C8D4()
{
  return &unk_24EC54FD0;
}

uint64_t sub_22361C8E0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::exception_ptr v17;
  _QWORD v18[228];

  v6 = *a1;
  if (!v6)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)&unk_22458ACF7, 0, (void (*)(void **))sub_22457406C);
    v7 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (byte_255795670)
      v8 = byte_255795678 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_255795648;
      for (i = qword_255795650; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, &unk_22458ACF7, 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "callable_", 9, &unk_22458ACF7, 0);
    v6 = *a1;
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v18, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, _QWORD *))(j[2] + 16))(j + 2, v18);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_2233236D4(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v17.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v17), v15))
    {
      sub_2233236D4(2u);
    }
    sub_223257000(v14 + 144, (uint64_t)v18);
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  return sub_2232555B8((uint64_t)v18);
}

void sub_22361CB60(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  uint64_t *v5;
  uint64_t v6;
  va_list v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;
  va_list v13;
  va_list va2;
  uint64_t v15;
  uint64_t v16;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, va_list);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  sub_2232555B8((uint64_t)va3);
  if (a2 == 1)
  {
    v5 = (uint64_t *)__cxa_begin_catch(a1);
    v6 = *v5;
    v11 = *(_QWORD *)(*(_QWORD *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    v9 = (*(uint64_t (**)(void))(v6 + 16))();
    sub_2233233A4("Caught unexpected exception of type: ", va1, "\n", "message: ", va, "\n");
    if (v16 >= 0)
      va_copy(v7, va2);
    else
      v7 = v13;
    if (v16 >= 0)
      v8 = HIBYTE(v16);
    else
      v8 = v15;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)&unk_22458ACF7, 0, (uint64_t)v7, v8, (void (*)(void **))sub_22457406C);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_22361CC3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x22361CC5CLL);
}

uint64_t *sub_22361CC68(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x2276844A8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_22361CD54(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, char a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  MEMORY[0x2276844B4](&a11);
  JUMPOUT(0x22361CCB0);
}

_QWORD *sub_22361CD90(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC54FF0;
  sub_2232555B8((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22361CDCC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC54FF0;
  sub_2232555B8((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22361CE18(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x738uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC54FF0;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_223257000((uint64_t)(v2 + 3), a1 + 24);
  return v3;
}

void sub_22361CE7C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22361CE9C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC54FF0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return sub_223257000((uint64_t)(a2 + 3), a1 + 24);
}

void sub_22361CEF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_22361CF0C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  sub_2232555B8(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_22361CF44(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  sub_2232555B8((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(a1);
}

void sub_22361CF78(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_22361C8E0((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_22361CC68(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22361D020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_22361CC68(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22361D06C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22361D0D8()
{
  return &unk_24EC55050;
}

void sub_22361D0E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC55070;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22361D0F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC55070;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t *sub_22361D124(uint64_t a1)
{
  return sub_22361CC68((uint64_t *)(a1 + 24));
}

_QWORD *sub_22361D130(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC550C0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_22361D1B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC550C0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_22361D250(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC550C0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_22361D2E0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC550C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_22361D350(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_22361D3D0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_22361D44C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_22361C8E0(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_22361CC68((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22361D728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_22361D754(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x22361D560);
    JUMPOUT(0x22361D530);
  }
  sub_2233236D4(3u);
}

void sub_22361D7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_22361D7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_22361CC68(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22361D8C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE25EnqueueMessag"
                     "eAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE25En"
                                "queueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22361D934()
{
  return &unk_24EC55120;
}

_QWORD *sub_22361D940(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC55140;
  v2 = (std::__shared_weak_count *)a1[232];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_2232555B8((uint64_t)(a1 + 3));
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  sub_2232555B8((uint64_t)(a1 + 3));
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_22361D9CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC55140;
  v2 = (std::__shared_weak_count *)a1[232];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    sub_2232555B8((uint64_t)(a1 + 3));
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    sub_2232555B8((uint64_t)(a1 + 3));
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22361DA68(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = operator new(0x748uLL);
  v3 = v2;
  v5 = a1[1];
  v4 = a1[2];
  *v2 = &off_24EC55140;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_223257000((uint64_t)(v2 + 3), (uint64_t)(a1 + 3));
  v3[231] = a1[231];
  v8 = a1[232];
  v3[232] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return v3;
}

void sub_22361DAF4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22361DB14(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = a1[1];
  v4 = a1[2];
  *a2 = &off_24EC55140;
  a2[1] = v5;
  a2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = sub_223257000((uint64_t)(a2 + 3), (uint64_t)(a1 + 3));
  a2[231] = a1[231];
  v9 = a1[232];
  a2[232] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_22361DB94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_22361DBAC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 1856);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    sub_2232555B8(a1 + 24);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  sub_2232555B8(a1 + 24);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_22361DC2C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)a1[232];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_2232555B8((uint64_t)(a1 + 3));
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  sub_2232555B8((uint64_t)(a1 + 3));
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(a1);
}

void sub_22361DCAC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[231];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_22361C8E0((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_22361CC68((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_22361DDBC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_22361DE34(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x22361DE68);
  JUMPOUT(0x22361DE98);
}

uint64_t sub_22361DEA0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE7ProcessERKS6_N"
                     "St3__17promiseIS6_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE7Pro"
                                "cessERKS6_NSt3__17promiseIS6_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE7ProcessERKS6_NSt3__17promiseIS6_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE7ProcessERKS6_NSt3__17promiseIS6_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22361DF0C()
{
  return &unk_24EC551A0;
}

_QWORD *sub_22361DF18(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC551C0;
  v2 = a1[4];
  a1[3] = &off_24EC37B68;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_22361DF70(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC551C0;
  v2 = a1[4];
  a1[3] = &off_24EC37B68;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22361DFD8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC551C0;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC37B68;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_22361E050(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22361E070(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC551C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC37B68;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_22361E0D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_22361E0F0(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC37B68;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_22361E140(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC37B68;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_22361E18C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC37B68;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22361E240(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22361E27C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE9SubscribeENS1_1"
                     "2ChannelInputIS6_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE9Subs"
                                "cribeENS1_12ChannelInputIS6_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22361E2E8()
{
  return &unk_24EC55220;
}

_QWORD *sub_22361E2F4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC55240;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22361E32C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC55240;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22361E374(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC55240;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_22361E3C4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC55240;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_22361E3F4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22361E404(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22361E430(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22361E4C4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22361E500(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE15AddErrorHandle"
                     "rENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE15Add"
                                "ErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22361E56C()
{
  return &unk_24EC552A0;
}

_QWORD *sub_22361E578(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC552C0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22361E5B0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC552C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22361E5F8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC552C0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_22361E650(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC552C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22361E688(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22361E698(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22361E6C4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_22361E840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22361E8B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE16Ou"
                                "tputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22361E91C()
{
  return &unk_24EC55320;
}

_QWORD *sub_22361E928(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC55340;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22361E960(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC55340;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22361E9A8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC55340;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_22361EA00(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC55340;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22361EA38(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22361EA48(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22361EA74(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22361EB2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22361EB78(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE15Er"
                                "rorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleES6_vS6_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22361EBE4()
{
  return &unk_24EC553A0;
}

void sub_22361EBF4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22361EC18(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22361EC30(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon5frame11FrameBundleES8_vS8_L"
                     "b0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon5frame11FrameBund"
                                "leES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon5frame11FrameBundleES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon5frame11FrameBundleES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_22361ECA0(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24EC54CD0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2245023F0(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24EC2E850;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24EC54D00;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24EC37B68;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_22361EE84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24EC54CA0;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_22361ECA0(v2);
    MEMORY[0x227684CE8](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_22361ECA0(v7);
    MEMORY[0x227684CE8](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_22361EFBC(uint64_t result)
{
  if (result)
    JUMPOUT(0x227684CE8);
  return result;
}

char *sub_22361EFD8(char *a1, char *a2)
{
  char *v2;
  __int128 v4;
  void **v5;
  char *v6;
  size_t v7;
  size_t v8;
  __int128 v9;
  void **v10;
  _QWORD *v11;
  size_t v12;
  void *v13;
  size_t v14;
  __int128 v15;
  void **v16;
  _QWORD *v17;
  size_t v18;
  void *v19;
  size_t v20;
  __int128 v21;
  void **v22;
  _QWORD *v23;
  size_t v24;
  void *v25;
  size_t v26;
  __int128 v27;
  void *v28;
  size_t v29;
  uint64_t v30;

  v2 = a2;
  if (a1 == a2)
    goto LABEL_54;
  if ((a1[23] & 0x80000000) == 0)
  {
    if (a2[23] < 0)
    {
      sub_22319C3F4(a1, *(void **)a2, *((_QWORD *)a2 + 1));
      v5 = (void **)(a1 + 24);
      v6 = v2 + 24;
      v7 = v2[47];
      if (a1[47] < 0)
        goto LABEL_14;
    }
    else
    {
      v4 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v4;
      v5 = (void **)(a1 + 24);
      v6 = a2 + 24;
      v7 = a2[47];
      if (a1[47] < 0)
        goto LABEL_14;
    }
LABEL_10:
    if ((v7 & 0x80) != 0)
    {
      sub_22319C3F4(v5, *((void **)v2 + 3), *((_QWORD *)v2 + 4));
      v10 = (void **)(a1 + 48);
      v11 = v2 + 48;
      v12 = v2[71];
      if ((a1[71] & 0x80000000) == 0)
        goto LABEL_21;
    }
    else
    {
      v9 = *(_OWORD *)v6;
      v5[2] = (void *)*((_QWORD *)v6 + 2);
      *(_OWORD *)v5 = v9;
      v10 = (void **)(a1 + 48);
      v11 = v2 + 48;
      v12 = v2[71];
      if ((a1[71] & 0x80000000) == 0)
        goto LABEL_21;
    }
    goto LABEL_25;
  }
  if (a2[23] >= 0)
  {
    v8 = a2[23];
  }
  else
  {
    a2 = *(char **)a2;
    v8 = *((_QWORD *)v2 + 1);
  }
  sub_22319C4B8((void **)a1, a2, v8);
  v5 = (void **)(a1 + 24);
  v6 = v2 + 24;
  v7 = v2[47];
  if ((a1[47] & 0x80000000) == 0)
    goto LABEL_10;
LABEL_14:
  if ((v7 & 0x80u) == 0)
    v13 = v6;
  else
    v13 = (void *)*((_QWORD *)v2 + 3);
  if ((v7 & 0x80u) == 0)
    v14 = v7;
  else
    v14 = *((_QWORD *)v2 + 4);
  sub_22319C4B8(v5, v13, v14);
  v10 = (void **)(a1 + 48);
  v11 = v2 + 48;
  v12 = v2[71];
  if ((a1[71] & 0x80000000) == 0)
  {
LABEL_21:
    if ((v12 & 0x80) != 0)
    {
      sub_22319C3F4(v10, *((void **)v2 + 6), *((_QWORD *)v2 + 7));
      v16 = (void **)(a1 + 72);
      v17 = v2 + 72;
      v18 = v2[95];
      if (a1[95] < 0)
        goto LABEL_36;
    }
    else
    {
      v15 = *(_OWORD *)v11;
      v10[2] = (void *)v11[2];
      *(_OWORD *)v10 = v15;
      v16 = (void **)(a1 + 72);
      v17 = v2 + 72;
      v18 = v2[95];
      if (a1[95] < 0)
        goto LABEL_36;
    }
    goto LABEL_32;
  }
LABEL_25:
  if ((v12 & 0x80u) == 0)
    v19 = v11;
  else
    v19 = (void *)*((_QWORD *)v2 + 6);
  if ((v12 & 0x80u) == 0)
    v20 = v12;
  else
    v20 = *((_QWORD *)v2 + 7);
  sub_22319C4B8(v10, v19, v20);
  v16 = (void **)(a1 + 72);
  v17 = v2 + 72;
  v18 = v2[95];
  if (a1[95] < 0)
  {
LABEL_36:
    if ((v18 & 0x80u) == 0)
      v25 = v17;
    else
      v25 = (void *)*((_QWORD *)v2 + 9);
    if ((v18 & 0x80u) == 0)
      v26 = v18;
    else
      v26 = *((_QWORD *)v2 + 10);
    sub_22319C4B8(v16, v25, v26);
    v22 = (void **)(a1 + 96);
    v23 = v2 + 96;
    v24 = v2[119];
    if ((a1[119] & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_46;
  }
LABEL_32:
  if ((v18 & 0x80) == 0)
  {
    v21 = *(_OWORD *)v17;
    v16[2] = (void *)v17[2];
    *(_OWORD *)v16 = v21;
    v22 = (void **)(a1 + 96);
    v23 = v2 + 96;
    v24 = v2[119];
    if (a1[119] < 0)
      goto LABEL_46;
LABEL_43:
    if ((v24 & 0x80) != 0)
    {
      sub_22319C3F4(v22, *((void **)v2 + 12), *((_QWORD *)v2 + 13));
    }
    else
    {
      v27 = *(_OWORD *)v23;
      v22[2] = (void *)v23[2];
      *(_OWORD *)v22 = v27;
    }
    goto LABEL_54;
  }
  sub_22319C3F4(v16, *((void **)v2 + 9), *((_QWORD *)v2 + 10));
  v22 = (void **)(a1 + 96);
  v23 = v2 + 96;
  v24 = v2[119];
  if ((a1[119] & 0x80000000) == 0)
    goto LABEL_43;
LABEL_46:
  if ((v24 & 0x80u) == 0)
    v28 = v23;
  else
    v28 = (void *)*((_QWORD *)v2 + 12);
  if ((v24 & 0x80u) == 0)
    v29 = v24;
  else
    v29 = *((_QWORD *)v2 + 13);
  sub_22319C4B8(v22, v28, v29);
LABEL_54:
  v30 = *((_QWORD *)v2 + 15);
  *((_DWORD *)a1 + 32) = *((_DWORD *)v2 + 32);
  *((_QWORD *)a1 + 15) = v30;
  return a1;
}

void sub_22361F234(uint64_t a1, _QWORD *a2)
{
  __int128 v3;
  __int128 v4;
  size_t v5;
  size_t v6;

  if (*(unsigned __int8 *)(a1 + 24) == *((unsigned __int8 *)a2 + 24))
  {
    if ((_QWORD *)a1 != a2 && *(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
      {
        v5 = a2[1];
        if (*((char *)a2 + 23) >= 0)
        {
          v6 = *((unsigned __int8 *)a2 + 23);
        }
        else
        {
          a2 = (_QWORD *)*a2;
          v6 = v5;
        }
        sub_22319C4B8((void **)a1, a2, v6);
      }
      else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
      {
        sub_22319C3F4((_QWORD *)a1, (void *)*a2, a2[1]);
      }
      else
      {
        v3 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_OWORD *)a1 = v3;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      operator delete(*(void **)a1);
      *(_BYTE *)(a1 + 24) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 24) = 0;
    }
  }
  else if (*((char *)a2 + 23) < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)*a2, a2[1]);
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    v4 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_OWORD *)a1 = v4;
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_22361F34C(double *a1, uint64_t a2, char *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231AF6C8((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_22361F46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22361F488(double *a1, uint64_t a2, char *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231AF6C8((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_22361F5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22361F5C4(_QWORD *a1, void *a2, size_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  size_t v10;
  __int128 v11;
  std::string *p_p;
  size_t v13;
  uint64_t v14;
  std::mutex *v15;
  std::string __p;
  _QWORD v17[6];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a6)
  {
    v9 = *a1;
    v17[0] = a2;
    v17[1] = a3;
    v17[2] = ".";
    v17[3] = 1;
    v17[4] = a5;
    v17[5] = a6;
    sub_2231A9820((uint64_t)v17, (uint64_t)&v18, 0, 0, &__p);
    v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v11 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    std::mutex::lock((std::mutex *)(v9 + 152));
    if ((v10 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)v11;
    if ((v10 & 0x80u) == 0)
      v13 = v10;
    else
      v13 = *((_QWORD *)&v11 + 1);
    sub_223FD46C8(v9 + 56, p_p, v13, a4);
    std::mutex::unlock((std::mutex *)(v9 + 152));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v14 = *a1;
    v15 = (std::mutex *)(*a1 + 152);
    std::mutex::lock(v15);
    sub_223FD46C8(v14 + 56, a2, a3, a4);
    std::mutex::unlock(v15);
  }
}

void sub_22361F70C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22361F720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::mutex *v14;

  std::mutex::unlock(v14);
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22361F758(double *a1, uint64_t a2, int *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_22361FE58((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_22361F878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22361F894(uint64_t a1, int *a2, const char *a3)
{
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  void *__dst[2];
  unint64_t v14;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v6 = strlen(a3);
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v7 = (void *)v6;
    if (v6 >= 0x17)
    {
      v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v9 = v6 | 7;
      v10 = v9 + 1;
      v8 = (void **)operator new(v9 + 1);
      __dst[1] = v7;
      v14 = v10 | 0x8000000000000000;
      __dst[0] = v8;
    }
    else
    {
      HIBYTE(v14) = v6;
      v8 = __dst;
      if (!v6)
      {
LABEL_10:
        *((_BYTE *)v7 + (_QWORD)v8) = 0;
        *(_QWORD *)&v12 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
        *((_QWORD *)&v12 + 1) = 2;
        v11 = sub_2241471F8();
        sub_2235347B4((uint64_t)v11, a1, a2, (uint64_t)__dst, &v12);
        if (SHIBYTE(v14) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v8, a3, (size_t)v7);
    goto LABEL_10;
  }
}

void sub_22361F9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22361F9DC(void *key@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  CFTypeID TypeID;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char v20;
  void *value;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v7 = *(CFDictionaryRef *)a2;
  v6 = *(std::__shared_weak_count **)(a2 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
LABEL_6:
    if (v7)
      goto LABEL_7;
LABEL_23:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (!v7)
    goto LABEL_23;
LABEL_7:
  value = 0;
  if (key
    && CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a2, key, (const void **)&value)
    && (v11 = value) != 0
    && (TypeID = CFArrayGetTypeID(), CFGetTypeID(v11) == TypeID))
  {
    sub_2231A7194(&v22, v11);
    v14 = v22;
    v13 = v23;
    if (v23)
    {
      v15 = (unint64_t *)&v23->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      v17 = v23;
      if (v23)
      {
        v18 = (unint64_t *)&v23->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    *(_QWORD *)a3 = v14;
    *(_QWORD *)(a3 + 8) = v13;
    v20 = 1;
  }
  else
  {
    v20 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v20;
}

uint64_t sub_22361FB3C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  std::__shared_weak_count *v19;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v17 = 1;
    sub_22361FC74(a3, (__int128 *)__p, a5, v18);
    sub_2231AA5A4(a1, v10, (uint64_t)v18);
    v11 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v17 && SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_22361FC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22361FC74@<X0>(int *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 v9;
  int v10;
  _DWORD *v11;
  unint64_t v13;
  unint64_t v14;
  mach_timebase_info info;
  void *__p;
  void *v17;
  _DWORD *v18;
  _QWORD v19[2];
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v13) = info.numer;
    LODWORD(v14) = info.denom;
    *(double *)&qword_255795558 = (double)v13 / (double)v14;
    __cxa_guard_release(&qword_255795560);
  }
  v19[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v19[1] = 2;
  LOBYTE(v20) = 0;
  v22 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v20 = *a2;
    v21 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v22 = 1;
  }
  v23 = 0;
  v24 = 0;
  v25 = *a3;
  v26 = 1;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v10 = *a1;
  LOBYTE(info.numer) = 7;
  v17 = 0;
  v18 = 0;
  __p = 0;
  v11 = operator new(4uLL);
  __p = v11;
  *v11 = v10;
  v17 = v11 + 1;
  v18 = v11 + 1;
  sub_2231AA8F0((char *)&info, (uint64_t)v19, a4);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  return sub_2231AD66C((uint64_t)v19);
}

void sub_22361FE08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_22361FE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    operator delete(__p);
    sub_2231AD66C((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_2231AD66C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_22361FE58(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  std::__shared_weak_count *v19;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v17 = 1;
    sub_22361FF90(a3, (__int128 *)__p, a5, v18);
    sub_2231AA5A4(a1, v10, (uint64_t)v18);
    v11 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v17 && SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_22361FF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22361FF90@<X0>(int *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 v9;
  int v10;
  _DWORD *v11;
  unint64_t v13;
  unint64_t v14;
  mach_timebase_info info;
  void *__p;
  void *v17;
  _DWORD *v18;
  _QWORD v19[2];
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v13) = info.numer;
    LODWORD(v14) = info.denom;
    *(double *)&qword_255795558 = (double)v13 / (double)v14;
    __cxa_guard_release(&qword_255795560);
  }
  v19[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v19[1] = 2;
  LOBYTE(v20) = 0;
  v22 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v20 = *a2;
    v21 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v22 = 1;
  }
  v23 = 0;
  v24 = 0;
  v25 = *a3;
  v26 = 1;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v10 = *a1;
  LOBYTE(info.numer) = 11;
  v17 = 0;
  v18 = 0;
  __p = 0;
  v11 = operator new(4uLL);
  __p = v11;
  *v11 = v10;
  v17 = v11 + 1;
  v18 = v11 + 1;
  sub_2231AA8F0((char *)&info, (uint64_t)v19, a4);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  return sub_2231AD66C((uint64_t)v19);
}

void sub_22362012C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_223620144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    operator delete(__p);
    sub_2231AD66C((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_2231AD66C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_22362017C(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  char **v6;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char **v11;
  char **v12;
  char **v13;
  char *v14;
  char *v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char **v26;
  char *v27;
  char *v28;

  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = *(char ***)(a1 + 8);
      v12 = *(char ***)a1;
      if (v11 != v10)
      {
        v13 = *(char ***)(a1 + 8);
        do
        {
          v15 = *(v13 - 3);
          v13 -= 3;
          v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          v11 = v13;
        }
        while (v13 != v10);
        v12 = *(char ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_40;
    v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= __sz)
      v21 = __sz;
    v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL)
LABEL_40:
      sub_22329A3C4();
    v23 = 3 * v22;
    v24 = operator new(24 * v22);
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = &v24[v23];
    v25 = sub_22329A6D8(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(_QWORD *)(a1 + 8) = v25;
    return;
  }
  v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10)
          sub_2233320C8(v10, *v6, v6[1], (v6[1] - *v6) >> 3);
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      v10 = *(char ***)(a1 + 8);
    }
    v25 = sub_22329A6D8(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    v19 = *(char ***)a1;
    do
    {
      if (v6 != v10)
        sub_2233320C8(v10, *v6, v6[1], (v6[1] - *v6) >> 3);
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    v16 = *(char ***)(a1 + 8);
    if (v16 == v19)
      goto LABEL_39;
    goto LABEL_35;
  }
  v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    v26 = v16;
    do
    {
      v28 = *(v26 - 3);
      v26 -= 3;
      v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(_QWORD *)(a1 + 8) = v19;
}

void sub_2236203E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2236203E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2236203F0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;

  if (*(_BYTE *)(a1 + 88))
  {
    v2 = *(void **)(a1 + 56);
    if (v2)
    {
      *(_QWORD *)(a1 + 64) = v2;
      operator delete(v2);
    }
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 40);
      v5 = *(void **)(a1 + 32);
      if (v4 != v3)
      {
        do
        {
          v6 = *(std::__shared_weak_count **)(v4 - 96);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v4 -= 120;
        }
        while (v4 != v3);
        v5 = *(void **)(a1 + 32);
      }
      *(_QWORD *)(a1 + 40) = v3;
      operator delete(v5);
    }
    v9 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v9);
    }
    *(_BYTE *)(a1 + 88) = 0;
  }
}

char *sub_2236204B0(char **a1, uint64_t *a2, uint64_t *a3, size_t __sz)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char **v16;
  char *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    v17 = a1[1];
    v16 = a1 + 1;
    v15 = v17;
    v18 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - result) >> 3);
    if (v18 >= __sz)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          v28 = *v6;
          *((_DWORD *)v27 + 2) = *((_DWORD *)v6 + 2);
          *(_QWORD *)v27 = v28;
          v29 = *(uint64_t *)((char *)v6 + 12);
          *((_DWORD *)v27 + 5) = *((_DWORD *)v6 + 5);
          *(_QWORD *)(v27 + 12) = v29;
          *(_OWORD *)(v27 + 24) = *(_OWORD *)(v6 + 3);
          v26 += 40;
          v6 += 5;
          v27 += 40;
        }
        while (v6 != a3);
      }
      *v16 = v26;
    }
    else
    {
      v19 = &a2[5 * v18];
      if (v15 != result)
      {
        do
        {
          v20 = *v6;
          *((_DWORD *)result + 2) = *((_DWORD *)v6 + 2);
          *(_QWORD *)result = v20;
          v21 = *(uint64_t *)((char *)v6 + 12);
          *((_DWORD *)result + 5) = *((_DWORD *)v6 + 5);
          *(_QWORD *)(result + 12) = v21;
          *(_OWORD *)(result + 24) = *(_OWORD *)(v6 + 3);
          v6 += 5;
          result += 40;
        }
        while (v6 != v19);
        result = *v16;
      }
      v22 = result;
      if (v19 != a3)
      {
        v22 = result;
        v23 = result;
        do
        {
          v24 = *v19;
          *((_DWORD *)v23 + 2) = *((_DWORD *)v19 + 2);
          *(_QWORD *)v23 = v24;
          v25 = *(uint64_t *)((char *)v19 + 12);
          *((_DWORD *)v23 + 5) = *((_DWORD *)v19 + 5);
          *(_QWORD *)(v23 + 12) = v25;
          *(_OWORD *)(v23 + 24) = *(_OWORD *)(v19 + 3);
          v22 += 40;
          v19 += 5;
          v23 += 40;
        }
        while (v19 != a3);
      }
      *v16 = v22;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x666666666666666)
      goto LABEL_27;
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x333333333333333 ? 0x666666666666666 : v11;
    if (v12 > 0x666666666666666)
LABEL_27:
      sub_22329A3C4();
    v13 = 40 * v12;
    result = (char *)operator new(40 * v12);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v14 = result;
    if (v6 != a3)
    {
      v14 = result;
      do
      {
        *(_QWORD *)v14 = *v6;
        *((_DWORD *)v14 + 2) = *((_DWORD *)v6 + 2);
        *(_QWORD *)(v14 + 12) = *(uint64_t *)((char *)v6 + 12);
        *((_DWORD *)v14 + 5) = *((_DWORD *)v6 + 5);
        *(_OWORD *)(v14 + 24) = *(_OWORD *)(v6 + 3);
        v14 += 40;
        v6 += 5;
      }
      while (v6 != a3);
    }
    a1[1] = v14;
  }
  return result;
}

uint64_t sub_22362071C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  if (*(_BYTE *)(a1 + 512))
  {
    if (*(_BYTE *)(a1 + 504))
    {
      if (*(_BYTE *)(a1 + 488))
      {
        v2 = *(std::__shared_weak_count **)(a1 + 480);
        if (v2)
        {
          p_shared_owners = (unint64_t *)&v2->__shared_owners_;
          do
            v4 = __ldaxr(p_shared_owners);
          while (__stlxr(v4 - 1, p_shared_owners));
          if (!v4)
          {
            ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
            std::__shared_weak_count::__release_weak(v2);
          }
        }
      }
      if (*(_BYTE *)(a1 + 464))
      {
        v5 = *(std::__shared_weak_count **)(a1 + 456);
        if (v5)
        {
          v6 = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(v6);
          while (__stlxr(v7 - 1, v6));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
      }
      if (*(_BYTE *)(a1 + 440))
        sub_2232954B0(a1);
    }
    return a1;
  }
  v9 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v9)
    return a1;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

_QWORD *sub_223620824(_QWORD *a1, const void *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  sub_2232E5804(&v10, a2);
  v3 = v11;
  *a1 = v10;
  a1[1] = v3;
  if (!v3)
    return a1;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  v6 = v11;
  if (!v11)
    return a1;
  v7 = (unint64_t *)&v11->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

char *sub_2236208C0(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 7;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 57)
    sub_22316E078();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 6 > v4)
    v4 = v5 >> 6;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFF80;
  v7 = 0x1FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 57)
    sub_223174E94();
  v9 = v7 << 7;
  v10 = (char *)operator new(v7 << 7);
  v11 = &v10[128 * v3];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v12 = &v10[v9];
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v11 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *((_DWORD *)v11 + 12) = *(_DWORD *)(a2 + 48);
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v11 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *((_QWORD *)v11 + 11) = 0;
  *((_QWORD *)v11 + 12) = 0;
  *((_OWORD *)v11 + 5) = *(_OWORD *)(a2 + 80);
  *((_QWORD *)v11 + 12) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *((_QWORD *)v11 + 14) = 0;
  *((_QWORD *)v11 + 15) = 0;
  *(_OWORD *)(v11 + 104) = *(_OWORD *)(a2 + 104);
  *((_QWORD *)v11 + 15) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  v13 = v11 + 128;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v15)
      return v13;
    goto LABEL_13;
  }
  v16 = 0;
  do
  {
    v17 = &v11[v16];
    v18 = &v15[v16];
    v19 = *(_OWORD *)&v15[v16 - 128];
    *((_QWORD *)v17 - 14) = *(_QWORD *)&v15[v16 - 112];
    *((_OWORD *)v17 - 8) = v19;
    *((_QWORD *)v18 - 15) = 0;
    *((_QWORD *)v18 - 14) = 0;
    *((_QWORD *)v18 - 16) = 0;
    v20 = *(_OWORD *)&v15[v16 - 104];
    *((_QWORD *)v17 - 11) = *(_QWORD *)&v15[v16 - 88];
    *(_OWORD *)(v17 - 104) = v20;
    *((_QWORD *)v18 - 12) = 0;
    *((_QWORD *)v18 - 11) = 0;
    *((_QWORD *)v18 - 13) = 0;
    *((_DWORD *)v17 - 20) = *(_DWORD *)&v15[v16 - 80];
    *(_OWORD *)(v17 - 72) = *(_OWORD *)&v15[v16 - 72];
    *((_QWORD *)v17 - 7) = *(_QWORD *)&v15[v16 - 56];
    *((_QWORD *)v18 - 8) = 0;
    *((_QWORD *)v18 - 7) = 0;
    *((_QWORD *)v18 - 9) = 0;
    *((_OWORD *)v17 - 3) = *(_OWORD *)&v15[v16 - 48];
    *((_QWORD *)v17 - 4) = *(_QWORD *)&v15[v16 - 32];
    *((_QWORD *)v18 - 6) = 0;
    *((_QWORD *)v18 - 5) = 0;
    *((_QWORD *)v18 - 4) = 0;
    *(_OWORD *)(v17 - 24) = *(_OWORD *)&v15[v16 - 24];
    *((_QWORD *)v17 - 1) = *(_QWORD *)&v15[v16 - 8];
    *((_QWORD *)v18 - 3) = 0;
    *((_QWORD *)v18 - 2) = 0;
    *((_QWORD *)v18 - 1) = 0;
    v16 -= 128;
  }
  while (&v15[v16] != v14);
  v15 = (char *)*a1;
  v21 = (uint64_t)a1[1];
  *a1 = &v11[v16];
  a1[1] = v13;
  for (a1[2] = v12; (char *)v21 != v15; v21 = sub_223620AC4(v21 - 128))
    ;
  if (v15)
LABEL_13:
    operator delete(v15);
  return v13;
}

uint64_t sub_223620AC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *(_QWORD *)(a1 + 104);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 112);
    v4 = *(void **)(a1 + 104);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(a1 + 80);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 88);
    v7 = *(void **)(a1 + 80);
    if (v6 != v5)
    {
      do
        v6 = sub_223620AC4(v6 - 128);
      while (v6 != v5);
      v7 = *(void **)(a1 + 80);
    }
    *(_QWORD *)(a1 + 88) = v5;
    operator delete(v7);
  }
  v8 = *(_QWORD *)(a1 + 56);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 64);
    v10 = *(void **)(a1 + 56);
    if (v9 == v8)
    {
LABEL_26:
      *(_QWORD *)(a1 + 64) = v8;
      operator delete(v10);
      goto LABEL_27;
    }
    while (1)
    {
      if (*(char *)(v9 - 1) < 0)
      {
        operator delete(*(void **)(v9 - 24));
        if ((*(char *)(v9 - 25) & 0x80000000) == 0)
        {
LABEL_20:
          if (*(char *)(v9 - 49) < 0)
            goto LABEL_24;
          goto LABEL_17;
        }
      }
      else if ((*(char *)(v9 - 25) & 0x80000000) == 0)
      {
        goto LABEL_20;
      }
      operator delete(*(void **)(v9 - 48));
      if (*(char *)(v9 - 49) < 0)
LABEL_24:
        operator delete(*(void **)(v9 - 72));
LABEL_17:
      v9 -= 88;
      if (v9 == v8)
      {
        v10 = *(void **)(a1 + 56);
        goto LABEL_26;
      }
    }
  }
LABEL_27:
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void **sub_223620C24(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 5;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_223620C94(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_13:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if ((*((char *)v3 - 25) & 0x80000000) == 0)
        {
LABEL_7:
          if (*((char *)v3 - 49) < 0)
            goto LABEL_11;
          goto LABEL_4;
        }
      }
      else if ((*((char *)v3 - 25) & 0x80000000) == 0)
      {
        goto LABEL_7;
      }
      operator delete(*(v3 - 6));
      if (*((char *)v3 - 49) < 0)
LABEL_11:
        operator delete(*(v3 - 9));
LABEL_4:
      v3 -= 11;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_13;
      }
    }
  }
  return a1;
}

uint64_t sub_223620D38(uint64_t a1)
{
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_6;
LABEL_3:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
LABEL_7:
  operator delete(*(void **)(a1 + 16));
  return a1;
}

BOOL sub_223620DA8(uint64_t a1, void *key, uint64_t a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return 0;
  sub_2231B9338(&value, a3);
  v14 = value;
  v13 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v11 = v14 != 0;
      if (!v14)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  v11 = v14 != 0;
  if (v14)
LABEL_18:
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, key, value);
LABEL_19:
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v11;
}

void sub_223620F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_223620F20(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24EC55B00;
  v2 = (uint64_t)(a1 + 1);
  sub_2231AD66C((uint64_t)(a1 + 230));
  sub_2232555B8(v2);
  return a1;
}

void sub_223620F60(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24EC55B00;
  v1 = (uint64_t)(a1 + 1);
  sub_2231AD66C((uint64_t)(a1 + 230));
  sub_2232555B8(v1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223620FB0(uint64_t a1)
{
  return a1 + 1840;
}

uint64_t sub_223620FB8(void *a1, void *lpsrc)
{
  uint64_t result;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC55AC0, 0);
  if (result)
  {
    if (a1 == lpsrc)
      return 1;
    else
      return sub_223C3BE94((uint64_t)a1 + 8, result + 8);
  }
  return result;
}

void sub_22362101C(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_223622120();
  sub_2236210D0(a1);
  sub_2231AC984(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 1840, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_2236210B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2236210D0(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_25578E0C8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578E0C8))
  {
    v4 = sub_223621F24();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_2231AD150((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_223197FA4(&xmmword_25578E0B0, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_25578E0C0 = *(_QWORD *)(v9 - 8);
      xmmword_25578E0B0 = v7;
    }
    sub_22319BB48(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578E0B0, &dword_22314D000);
    __cxa_guard_release(&qword_25578E0C8);
  }
  return sub_223622500(&xmmword_25578E0B0, (uint64_t)"{", a1 + 8, (uint64_t)"}");
}

void sub_2236211E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22319BB48(&a9);
  __cxa_guard_abort(&qword_25578E0C8);
  _Unwind_Resume(a1);
}

void sub_223621200(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E0C8);
  _Unwind_Resume(a1);
}

void sub_223621218(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 10;
  strcpy((char *)a1, "cv3d.recon");
  *(_DWORD *)(a1 + 24) = 1;
}

void sub_223621248(void *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_223B85EC0(a1, 1, a2);
}

_QWORD *sub_223621270(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24EC55B00;
  v2 = (uint64_t)(a1 + 1);
  sub_2231AD66C((uint64_t)(a1 + 230));
  sub_2232555B8(v2);
  return a1;
}

void sub_2236212B0(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24EC55B00;
  v1 = (uint64_t)(a1 + 1);
  sub_2231AD66C((uint64_t)(a1 + 230));
  sub_2232555B8(v1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223621300(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_2236219C0();
  return sub_223621454(v2, (uint64_t)"{", a1 + 8, (uint64_t)",", a1 + 1840, (uint64_t)"}");
}

uint64_t sub_223621358(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_223621680((uint64_t)v5, (uint64_t)v2, a1 + 8);
  if (v3 == -1)
    sub_22316DD70();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC54FB8[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC54F88[v3])(v5, v2);
  return result;
}

void sub_2236213F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24EC54F88[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_223621428(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_223621454(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_2231ABB0C((uint64_t *)&v19, (uint64_t)&__dst);
  sub_223621680((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC54FA0[v16])(&p_p_dst, &__dst);
  sub_2231AB90C((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC54FA0[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC54FB8[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC54F88[v16])(&p_dst, &__dst);
  return result;
}

void sub_2236215F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223621608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22362161C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223621630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223621644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223621658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22362166C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223621680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  void **v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char v39;
  _QWORD v40[3];

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v21 = (_QWORD *)v5;
  v22 = a3;
  v38 = (_QWORD *)(v5 + 16);
  v23 = (void **)(a3 + 232);
  v24 = a3 + 360;
  v25 = (void **)(a3 + 568);
  v26 = (void **)(a3 + 976);
  v27 = a3 + 1040;
  v28 = a3 + 1232;
  v29 = a3 + 1240;
  v30 = a3 + 1336;
  v31 = a3 + 1400;
  v32 = a3 + 1408;
  v33 = a3 + 1616;
  v34 = a3 + 1752;
  v35 = a3 + 1776;
  v36 = a3 + 1800;
  v37 = a3 + 1808;
  sub_2231813E8((_QWORD *)(v5 + 16), (uint64_t)"{", 1);
  LOBYTE(v40[0]) = 1;
  v40[1] = &v38;
  v40[2] = &v39;
  sub_223C6F1F4(&v22, (uint64_t)v40);
  sub_2231813E8(v38, (uint64_t)"}", 1);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21;
  if (v21)
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *v21 = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)((char *)v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    v14[3] = MEMORY[0x24BEDB848] + 16;
    v14[2] = v17;
    if (*((char *)v14 + 111) < 0)
      operator delete((void *)v14[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v14 + 16);
    MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
  }
  v22 = a2;
  v23 = __dst;
  v24 = a2;
  v25 = __dst;
  v26 = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_22316DD70();
  v40[0] = &v22;
  ((void (*)(_QWORD *, uint64_t))off_24EC55400[v18])(v40, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_22362196C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_223621990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2236219AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_2236219C0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578DF88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578DF88))
    return &xmmword_25578DF70;
  v2 = sub_223621A9C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578DF70, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578DF80 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578DF70 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578DF70, &dword_22314D000);
  __cxa_guard_release(&qword_25578DF88);
  return &xmmword_25578DF70;
}

void sub_223621A84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578DF88);
  _Unwind_Resume(a1);
}

std::string *sub_223621A9C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578DFA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578DFA8))
    return &stru_25578DF90;
  sub_223621D40((uint64_t)__p);
  sub_223621B8C((char *)__p, &stru_25578DF90);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578DF90, &dword_22314D000);
  __cxa_guard_release(&qword_25578DFA8);
  return &stru_25578DF90;
}

void sub_223621B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578DFA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578DFA8);
  _Unwind_Resume(a1);
}

void sub_223621B8C(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_223621F24();
  if (*((char *)v4 + 23) < 0)
  {
    sub_223197FA4(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_2231AC788();
  if (*((char *)v6 + 23) < 0)
  {
    sub_223197FA4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_223621CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_22319BB48((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223621D40(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578E028);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578E028))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::recon::frame::FrameBundle>]", qword_25578E010);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578E010, &dword_22314D000);
    __cxa_guard_release(&qword_25578E028);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578E048);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578E048))
  {
    v5 = sub_2231A38CC(qword_25578E010, "<", 0);
    sub_2231A37C8(qword_25578E010, 0, v5, qword_25578E030);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578E030, &dword_22314D000);
    __cxa_guard_release(&qword_25578E048);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578E068);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578E068))
  {
    sub_224573040((uint64_t)qword_25578E030, (uint64_t)&xmmword_25578E050);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578E050, &dword_22314D000);
    __cxa_guard_release(&qword_25578E068);
  }
  if (byte_25578E067 < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578E050, *((unint64_t *)&xmmword_25578E050 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578E050;
    *(_QWORD *)(a1 + 16) = unk_25578E060;
  }
}

void sub_223621EDC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E068);
  _Unwind_Resume(a1);
}

void sub_223621EF4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E048);
  _Unwind_Resume(a1);
}

void sub_223621F0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E028);
  _Unwind_Resume(a1);
}

__int128 *sub_223621F24()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578DFC8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578DFC8))
    return &xmmword_25578DFB0;
  v2 = (char *)sub_223622000();
  if (v2[23] < 0)
  {
    sub_223197FA4(&xmmword_25578DFB0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25578DFC0 = *((_QWORD *)v2 + 2);
    xmmword_25578DFB0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578DFB0, &dword_22314D000);
  __cxa_guard_release(&qword_25578DFC8);
  return &xmmword_25578DFB0;
}

void sub_223621FE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578DFC8);
  _Unwind_Resume(a1);
}

void *sub_223622000()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25578DFE8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578DFE8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::frame::FrameBundle]", qword_25578DFD0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578DFD0, &dword_22314D000);
    __cxa_guard_release(&qword_25578DFE8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25578E008);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25578E008))
    return &unk_25578DFF0;
  sub_224573040((uint64_t)qword_25578DFD0, (uint64_t)&unk_25578DFF0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25578DFF0, &dword_22314D000);
  __cxa_guard_release(&qword_25578E008);
  return &unk_25578DFF0;
}

void sub_2236220F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E008);
  _Unwind_Resume(a1);
}

void sub_223622108(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578DFE8);
  _Unwind_Resume(a1);
}

std::string *sub_223622120()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  __int128 *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void *v10[3];
  void *v11[2];
  char v12;
  void *__dst[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  void *__p[2];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578E088);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578E088))
  {
    sub_223174DE4(v11, "viz::PackageData");
    v2 = sub_223621F24();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v14 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    v4 = sub_2233032C8();
    if (*((char *)v4 + 23) < 0)
    {
      sub_223197FA4(&v15, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v5 = *v4;
      v16 = *((_QWORD *)v4 + 2);
      v15 = v5;
    }
    v6 = sub_223622408();
    if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_223197FA4(&v17, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
    }
    else
    {
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v18 = v6->__r_.__value_.__r.__words[2];
      v17 = v7;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v20 = 0x400000000000000;
    sub_22319BD1C(v10, (uint64_t)__dst, 4uLL);
    sub_2245730F4((char *)v11, (uint64_t *)v10, &stru_25578E070, v8, v9);
    sub_22319BB48(v10);
    if (SHIBYTE(v20) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v18) & 0x80000000) == 0)
      {
LABEL_15:
        if ((SHIBYTE(v16) & 0x80000000) == 0)
          goto LABEL_16;
        goto LABEL_21;
      }
    }
    else if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete((void *)v17);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_22;
    }
LABEL_21:
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_17:
      if ((v12 & 0x80000000) == 0)
      {
LABEL_18:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578E070, &dword_22314D000);
        __cxa_guard_release(&qword_25578E088);
        return &stru_25578E070;
      }
LABEL_23:
      operator delete(v11[0]);
      goto LABEL_18;
    }
LABEL_22:
    operator delete(__dst[0]);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_23;
  }
  return &stru_25578E070;
}

void sub_22362232C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_22319BB48(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
    {
LABEL_10:
      if (a18 < 0)
        operator delete(a13);
      __cxa_guard_abort(&qword_25578E088);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(a20);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_2236223E0()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x2236223BCLL);
  }
}

std::string *sub_223622408()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578E0A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578E0A8))
    return &stru_25578E090;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 1U]", __p);
  sub_22457326C((uint64_t)__p, &stru_25578E090);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578E090, &dword_22314D000);
  __cxa_guard_release(&qword_25578E0A8);
  return &stru_25578E090;
}

void sub_2236224C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578E0A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578E0A8);
  _Unwind_Resume(a1);
}

uint64_t sub_223622500(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_2231ABB0C((uint64_t *)&v14, (uint64_t)&__dst);
  sub_223621680((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC54FA0[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC54FB8[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC54F88[v11])(&p_dst, &__dst);
  return result;
}

void sub_223622640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223622658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22362266C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223622680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223622694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_2236226A8(void **__dst, void *__src, size_t __len)
{
  unint64_t v6;
  void *v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;

  LODWORD(v6) = *((char *)__dst + 23);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = (unint64_t)__dst[2];
    v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__len > v8)
    {
      v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __len - v8)
      {
        v9 = *__dst;
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          v7 = operator new(v11);
          memcpy(v7, __src, __len);
          if (v8 != 22)
            operator delete(v9);
          __dst[2] = (void *)(v11 | 0x8000000000000000);
          *__dst = v7;
LABEL_23:
          __dst[1] = (void *)__len;
          goto LABEL_24;
        }
LABEL_8:
        v12 = 2 * v8;
        if (__len > 2 * v8)
          v12 = __len;
        v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v13 = v12 | 7;
        if (v12 >= 0x17)
          v11 = v13 + 1;
        else
          v11 = 23;
        goto LABEL_15;
      }
LABEL_25:
      sub_22316DBC0();
    }
    v6 = HIBYTE(v10);
    v7 = *__dst;
  }
  else
  {
    v7 = __dst;
    if (__len > 0x16)
    {
      if (__len - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        v8 = 22;
        v9 = __dst;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((_BYTE *)__dst + 23);
  }
  if ((v6 & 0x80) != 0)
    goto LABEL_23;
  *((_BYTE *)__dst + 23) = __len & 0x7F;
LABEL_24:
  *((_BYTE *)v7 + __len) = 0;
  return __dst;
}

void sub_223622804(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_223622850(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2236228B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 144);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 152);
      v4 = *(void **)(a1 + 144);
      if (v3 != v2)
      {
        do
        {
          v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 144);
      }
      *(_QWORD *)(a1 + 152) = v2;
      operator delete(v4);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_223622958(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC55470;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223622968(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC55470;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223622998(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_2236229AC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2236229D0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2236229E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d5recon3sng13MeshingWorkerEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d5recon3sng13MeshingWorkerEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d5recon3sng13MeshingWorkerEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d5recon3sng13MeshingWorkerEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_223622A5C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223622A80(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_223622A98(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d5recon3sng11MeshingNodeEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d5recon3sng11MeshingNodeEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d5recon3sng11MeshingNodeEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d5recon3sng11MeshingNodeEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_223622B0C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223622B30(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_223622B48(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d5recon3sng14KeyframeWorkerEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d5recon3sng14KeyframeWorkerEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d5recon3sng14KeyframeWorkerEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d5recon3sng14KeyframeWorkerEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_223622BBC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223622BE0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_223622BF8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit11concurrency4NodeIJFNSt12experimental8expectedINS_10shared_ptrIN"
                     "S1_5recon2kf20KeyframeEngineResultEEENS1_3esn5ErrorEEERKNS8_5frame11FrameBundleEEFSE_RKNS8_3sng15Fr"
                     "ameBundleSyncEEFvRKNSK_24KeyframeNodeResetRequestEEFvRKNSK_23KeyframeNodeWaitRequestEEFvRKNSK_30Fil"
                     "esystemAccessGrantedRequestEEFbRKNSK_32LocalizeRestoredKeyframesRequestEEFbRKNSK_27KeyframeSaveSnap"
                     "shotRequestEEFNS_13shared_futureIbEERKNSK_29KeyframeSaveSnapshotToRequestEEFbRKNSK_25SaveDiagnostic"
                     "DataRequestEEFbRKNSK_20SaveKeyframesRequestEEFbRKNSK_25SaveRoomBoundariesRequestEEFNS_6vectorINSF_1"
                     "2KeyframeDataENS_9allocatorIS1S_EEEERKNS_8optionalIjEEEFS1V_RKN3cva15SE3GroupStorageIfNS21_6MatrixI"
                     "fLj4ELj4ELb1EEEEEEFS1V_RKNSK_35FlushPendingUpdatedKeyframesRequestEEFS1V_RKNSK_39FlushPendingUpdate"
                     "dKeyframesGrefRequestEEFS1V_RKNSK_37GetKeyframesOverlappingFrustumRequestEEFNS1R_INSC_6random4UUIDE"
                     "NS1T_IS2M_EEEERKNSK_36GetKeyframeUUIDsListForSphereRequestEEFS2O_RKNS_6chrono8durationIxNS_5ratioIL"
                     "l1ELl1000000000EEEEEEFNS6_IS1S_NS2_2cf8ErrorRefEEERKS2M_EFbNSK_31InvalidateKeyframesColorRequestEEEEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit11concurrency4NodeIJFNSt12experimental8expectedINS_10s"
                                "hared_ptrINS1_5recon2kf20KeyframeEngineResultEEENS1_3esn5ErrorEEERKNS8_5frame11FrameBund"
                                "leEEFSE_RKNS8_3sng15FrameBundleSyncEEFvRKNSK_24KeyframeNodeResetRequestEEFvRKNSK_23Keyfr"
                                "ameNodeWaitRequestEEFvRKNSK_30FilesystemAccessGrantedRequestEEFbRKNSK_32LocalizeRestored"
                                "KeyframesRequestEEFbRKNSK_27KeyframeSaveSnapshotRequestEEFNS_13shared_futureIbEERKNSK_29"
                                "KeyframeSaveSnapshotToRequestEEFbRKNSK_25SaveDiagnosticDataRequestEEFbRKNSK_20SaveKeyfra"
                                "mesRequestEEFbRKNSK_25SaveRoomBoundariesRequestEEFNS_6vectorINSF_12KeyframeDataENS_9allo"
                                "catorIS1S_EEEERKNS_8optionalIjEEEFS1V_RKN3cva15SE3GroupStorageIfNS21_6MatrixIfLj4ELj4ELb"
                                "1EEEEEEFS1V_RKNSK_35FlushPendingUpdatedKeyframesRequestEEFS1V_RKNSK_39FlushPendingUpdate"
                                "dKeyframesGrefRequestEEFS1V_RKNSK_37GetKeyframesOverlappingFrustumRequestEEFNS1R_INSC_6r"
                                "andom4UUIDENS1T_IS2M_EEEERKNSK_36GetKeyframeUUIDsListForSphereRequestEEFS2O_RKNS_6chrono"
                                "8durationIxNS_5ratioILl1ELl1000000000EEEEEEFNS6_IS1S_NS2_2cf8ErrorRefEEERKS2M_EFbNSK_31I"
                                "nvalidateKeyframesColorRequestEEEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit11concurrency4NodeIJFNSt12experimental8expectedINS_10shared_ptrINS1_5recon2kf20KeyframeEngineResultEEENS1_3esn5ErrorEEERKNS8_5frame11FrameBundleEEFSE_RKNS8_3sng15FrameBundleSyncEEFvRKNSK_24KeyframeNodeResetRequestEEFvRKNSK_23KeyframeNodeWaitRequestEEFvRKNSK_30FilesystemAccessGrantedRequestEEFbRKNSK_32LocalizeRestoredKeyframesRequestEEFbRKNSK_27KeyframeSaveSnapshotRequestEEFNS_13shared_futureIbEERKNSK_29KeyframeSaveSnapshotToRequestEEFbRKNSK_25SaveDiagnosticDataRequestEEFbRKNSK_20SaveKeyframesRequestEEFbRKNSK_25SaveRoomBoundariesRequestEEFNS_6vectorINSF_12KeyframeDataENS_9allocatorIS1S_EEEERKNS_8optionalIjEEEFS1V_RKN3cva15SE3GroupStorageIfNS21_6MatrixIfLj4ELj4ELb1EEEEEEFS1V_RKNSK_35FlushPendingUpdatedKeyframesRequestEEFS1V_RKNSK_39FlushPendingUpdatedKeyframesGrefRequestEEFS1V_RKNSK_37GetKeyframesOverlappingFrustumRequestEEFNS1R_INSC_6random4UUIDENS1T_IS2M"
                                                                      "_EEEERKNSK_36GetKeyframeUUIDsListForSphereRequestE"
                                                                      "EFS2O_RKNS_6chrono8durationIxNS_5ratioILl1ELl10000"
                                                                      "00000EEEEEEFNS6_IS1S_NS2_2cf8ErrorRefEEERKS2M_EFbN"
                                                                      "SK_31InvalidateKeyframesColorRequestEEEEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit11concurrency4NodeIJFNSt12experimental8expectedINS_10shared_ptrINS1_5recon2kf20KeyframeEngineResultEEENS1_3esn5ErrorEEERKNS8_5frame11FrameBundleEEFSE_RKNS8_3sng15FrameBundleSyncEEFvRKNSK_24KeyframeNodeResetRequestEEFvRKNSK_23KeyframeNodeWaitRequestEEFvRKNSK_30FilesystemAccessGrantedRequestEEFbRKNSK_32LocalizeRestoredKeyframesRequestEEFbRKNSK_27KeyframeSaveSnapshotRequestEEFNS_13shared_futureIbEERKNSK_29KeyframeSaveSnapshotToRequestEEFbRKNSK_25SaveDiagnosticDataRequestEEFbRKNSK_20SaveKeyframesRequestEEFbRKNSK_25SaveRoomBoundariesRequestEEFNS_6vectorINSF_12KeyframeDataENS_9allocatorIS1S_EEEERKNS_8optionalIjEEEFS1V_RKN3cva15SE3GroupStorageIfNS21_6MatrixIfLj4ELj4ELb1EEEEEEFS1V_RKNSK_35FlushPendingUpdatedKeyframesRequestEEFS1V_RKNSK_39FlushPendingUpdatedKeyframesGrefRequestEEFS1V_RKNSK_37GetKeyframesOverlappingFrustumRequestEEFNS1R_INSC_6random4UUIDENS1T_IS2M_EEEERKNSK_36GetKeyframeUUIDsListForSphereRequestEEFS2O_RKNS_6chrono8durationIxNS_5ratioILl1ELl1000000000EEEEEEFNS6_IS1S_NS2_2cf8ErrorRefEEERKS2M_EFbNSK_31InvalidateKeyframesColorRequestEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_223622C68(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC55600;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223622C78(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC55600;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223622CA8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_223622CB8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC55650;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223622CC8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC55650;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223622CF8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_223622D08(std::__assoc_sub_state *a1)
{
  void *ptr;
  std::exception_ptr v3;
  std::exception_ptr v4;
  std::exception_ptr v5;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = &a1->__mut_;
  __lk.__owns_ = 1;
  std::mutex::lock(&a1->__mut_);
  std::__assoc_sub_state::__sub_wait(a1, &__lk);
  ptr = a1->__exception_.__ptr_;
  v5.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v5);
  if (ptr)
  {
    std::exception_ptr::exception_ptr(&v4, &a1->__exception_);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else if (__lk.__owns_)
  {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_223622DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_223622DCC(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_223622E18(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223622E78(_BYTE *a1)
{
  if ((a1[136] & 1) != 0)
    sub_2231A8D08((uint64_t)(a1 + 144));
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1);
}

void sub_223622EB0(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_223622EFC(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223622F5C(_BYTE *a1)
{
  if ((a1[136] & 1) != 0 && a1[584])
    sub_2232954B0((uint64_t)(a1 + 144));
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1);
}

void sub_223622F9C(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_223622FE8(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223623048(_BYTE *a1)
{
  if ((a1[136] & 1) != 0)
    sub_2231A8D08((uint64_t)(a1 + 144));
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1);
}

void sub_223623080(uint64_t *a1, __int128 *a2)
{
  BOOL v3;
  __int128 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  __int128 v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;

  if (*((_BYTE *)a1 + 24))
    v3 = *((_BYTE *)a2 + 24) == 0;
  else
    v3 = 1;
  if (!v3)
  {
    if ((*((_BYTE *)a1 + 16) != 0) != (*((_BYTE *)a2 + 16) != 0))
    {
      if (*((_BYTE *)a1 + 16))
      {
        *a2 = *(_OWORD *)a1;
        *a1 = 0;
        a1[1] = 0;
        *((_BYTE *)a2 + 16) = 1;
        if (*((_BYTE *)a1 + 16))
          *((_BYTE *)a1 + 16) = 0;
      }
      else
      {
        *(_OWORD *)a1 = *a2;
        *(_QWORD *)a2 = 0;
        *((_QWORD *)a2 + 1) = 0;
        *((_BYTE *)a1 + 16) = 1;
        if (*((_BYTE *)a2 + 16))
          *((_BYTE *)a2 + 16) = 0;
      }
    }
    else if (*((_BYTE *)a1 + 16))
    {
      v6 = *a1;
      *a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v6;
      v7 = a1[1];
      a1[1] = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v7;
    }
    return;
  }
  if (*((_BYTE *)a1 + 24))
  {
    if (!*((_BYTE *)a2 + 24))
    {
      v4 = *a2;
      *((_BYTE *)a2 + 16) = 0;
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
      if (*((_BYTE *)a1 + 16))
      {
        *a2 = *(_OWORD *)a1;
        *((_BYTE *)a2 + 16) = 1;
      }
      *(_OWORD *)a1 = v4;
      v5 = *((_BYTE *)a1 + 24);
      *((_BYTE *)a1 + 24) = 0;
      *((_BYTE *)a2 + 24) = v5;
      return;
    }
  }
  else if (*((_BYTE *)a2 + 24))
  {
    if (*((_BYTE *)a2 + 16))
    {
      v8 = *a2;
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
      *a2 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v8;
      *((_BYTE *)a1 + 16) = 1;
      v9 = *((_BYTE *)a1 + 24);
      *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
      *((_BYTE *)a2 + 24) = v9;
    }
    else
    {
      *a2 = *(_OWORD *)a1;
      *a1 = 0;
      a1[1] = 0;
      *((_BYTE *)a1 + 16) = 0;
      *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
      *((_BYTE *)a2 + 24) = 0;
    }
    return;
  }
  v10 = *(_OWORD *)a1;
  *a1 = 0;
  a1[1] = 0;
  v11 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v12 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v11;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      v18 = v10;
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      v10 = v18;
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
  *a2 = v10;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

uint64_t sub_2236232BC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v4 = (_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = a1 + 8;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(void **)(a1 + 8);
    if (v7 != v6)
    {
      do
      {
        v9 = *(std::__shared_weak_count **)(v7 - 96);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v7 -= 120;
      }
      while (v7 != v6);
      v8 = *(void **)v5;
    }
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v8);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  sub_2235628FC((char **)(a1 + 40), a2 + 40);
  sub_2235628FC((char **)(a1 + 80), a2 + 80);
  sub_223623494(a1 + 120, (uint64_t *)(a2 + 120));
  v12 = (_QWORD *)(a1 + 192);
  v13 = (_QWORD *)(a2 + 192);
  if (*(unsigned __int8 *)(a1 + 280) == *(unsigned __int8 *)(a2 + 280))
  {
    if (*(_BYTE *)(a1 + 280))
      sub_223623614((uint64_t)v12, (uint64_t)v13);
  }
  else if (*(_BYTE *)(a1 + 280))
  {
    sub_2236203F0((uint64_t)v12);
  }
  else
  {
    *v12 = 0;
    *(_QWORD *)(a1 + 200) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a2 + 200) = 0;
    *(_QWORD *)(a2 + 208) = 0;
    *v13 = 0;
    *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a2 + 224) = 0;
    *(_QWORD *)(a2 + 232) = 0;
    *(_QWORD *)(a2 + 240) = 0;
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 264) = 0;
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    v14 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a2 + 256) = 0;
    *(_QWORD *)(a2 + 264) = 0;
    *(_QWORD *)(a2 + 248) = 0;
    *(_QWORD *)(a1 + 272) = v14;
    *(_BYTE *)(a1 + 280) = 1;
  }
  sub_223623758(a1 + 288, a2 + 288);
  sub_2236238A8((char **)(a1 + 408), a2 + 408);
  return a1;
}

__n128 sub_223623494(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  __n128 result;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(unsigned __int8 *)(a1 + 64) == *((unsigned __int8 *)a2 + 64))
  {
    if (*(_BYTE *)(a1 + 64))
    {
      v4 = *a2;
      *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
      *(_QWORD *)a1 = v4;
      v5 = *(uint64_t *)((char *)a2 + 12);
      *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
      *(_QWORD *)(a1 + 12) = v5;
      v6 = a2[3];
      *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
      *(_QWORD *)(a1 + 24) = v6;
      v7 = (void **)(a1 + 40);
      v8 = *(_QWORD **)(a1 + 40);
      if (v8)
      {
        v9 = *(_QWORD **)(a1 + 48);
        v10 = *(void **)(a1 + 40);
        if (v9 != v8)
        {
          do
            v9 = sub_2232959C0(v9 - 20);
          while (v9 != v8);
          v10 = *v7;
        }
        *(_QWORD *)(a1 + 48) = v8;
        operator delete(v10);
        *v7 = 0;
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 56) = 0;
      }
      result = *(__n128 *)(a2 + 5);
      *(__n128 *)(a1 + 40) = result;
      *(_QWORD *)(a1 + 56) = a2[7];
      a2[5] = 0;
      a2[6] = 0;
      a2[7] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 64))
  {
    v12 = *(_QWORD **)(a1 + 40);
    if (v12)
    {
      v13 = *(_QWORD **)(a1 + 48);
      v14 = *(void **)(a1 + 40);
      if (v13 != v12)
      {
        do
          v13 = sub_2232959C0(v13 - 20);
        while (v13 != v12);
        v14 = *(void **)(a1 + 40);
      }
      *(_QWORD *)(a1 + 48) = v12;
      operator delete(v14);
    }
    *(_BYTE *)(a1 + 64) = 0;
  }
  else
  {
    v15 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)a1 = v15;
    v16 = *(uint64_t *)((char *)a2 + 12);
    *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
    *(_QWORD *)(a1 + 12) = v16;
    v17 = a2[3];
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    *(_QWORD *)(a1 + 24) = v17;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    result = *(__n128 *)(a2 + 5);
    *(__n128 *)(a1 + 40) = result;
    *(_QWORD *)(a1 + 56) = a2[7];
    a2[5] = 0;
    a2[6] = 0;
    a2[7] = 0;
    *(_BYTE *)(a1 + 64) = 1;
  }
  return result;
}

uint64_t sub_223623614(uint64_t a1, uint64_t a2)
{
  void *v4;
  void **v5;
  char *v6;
  char *v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  uint64_t v13;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = (void **)(a1 + 32);
  v6 = *(char **)(a1 + 32);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  if (v6)
  {
    v7 = *(char **)(a1 + 40);
    v8 = v6;
    if (v7 != v6)
    {
      do
      {
        v9 = (std::__shared_weak_count *)*((_QWORD *)v7 - 12);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v7 -= 120;
      }
      while (v7 != v6);
      v8 = *v5;
    }
    *(_QWORD *)(a1 + 40) = v6;
    operator delete(v8);
    *v5 = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v12 = *(void **)(a1 + 56);
  if (v12)
  {
    *(_QWORD *)(a1 + 64) = v12;
    operator delete(v12);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 80) = v13;
  return a1;
}

__n128 sub_223623758(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  void *v9;
  void *v10;
  __int128 v11;
  __int128 v12;

  if (*(unsigned __int8 *)(a1 + 112) == *(unsigned __int8 *)(a2 + 112))
  {
    if (*(_BYTE *)(a1 + 112))
    {
      v4 = *(void **)a1;
      if (*(_QWORD *)a1)
      {
        *(_QWORD *)(a1 + 8) = v4;
        operator delete(v4);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v5 = *(void **)(a1 + 24);
      if (v5)
      {
        *(_QWORD *)(a1 + 32) = v5;
        operator delete(v5);
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = 0;
      }
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      result = *(__n128 *)(a2 + 48);
      v7 = *(_OWORD *)(a2 + 64);
      v8 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v8;
      *(__n128 *)(a1 + 48) = result;
      *(_OWORD *)(a1 + 64) = v7;
    }
  }
  else if (*(_BYTE *)(a1 + 112))
  {
    v9 = *(void **)(a1 + 24);
    if (v9)
    {
      *(_QWORD *)(a1 + 32) = v9;
      operator delete(v9);
    }
    v10 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v10);
    }
    *(_BYTE *)(a1 + 112) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    result = *(__n128 *)(a2 + 48);
    v11 = *(_OWORD *)(a2 + 64);
    v12 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v12;
    *(__n128 *)(a1 + 48) = result;
    *(_OWORD *)(a1 + 64) = v11;
    *(_BYTE *)(a1 + 112) = 1;
  }
  return result;
}

void sub_2236238A8(char **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;

  if (*((unsigned __int8 *)a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*((_BYTE *)a1 + 24))
    {
      v4 = *a1;
      if (*a1)
      {
        v5 = a1[1];
        v6 = *a1;
        if (v5 != v4)
        {
          do
          {
            v7 = (std::__shared_weak_count *)*((_QWORD *)v5 - 12);
            if (v7)
            {
              p_shared_owners = (unint64_t *)&v7->__shared_owners_;
              do
                v9 = __ldaxr(p_shared_owners);
              while (__stlxr(v9 - 1, p_shared_owners));
              if (!v9)
              {
                ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
                std::__shared_weak_count::__release_weak(v7);
              }
            }
            v5 -= 120;
          }
          while (v5 != v4);
          v6 = *a1;
        }
        a1[1] = v4;
        operator delete(v6);
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = *(char **)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
  }
  else if (*((_BYTE *)a1 + 24))
  {
    v10 = *a1;
    if (*a1)
    {
      v11 = a1[1];
      v12 = *a1;
      if (v11 != v10)
      {
        do
        {
          v13 = (std::__shared_weak_count *)*((_QWORD *)v11 - 12);
          if (v13)
          {
            v14 = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v11 -= 120;
        }
        while (v11 != v10);
        v12 = *a1;
      }
      a1[1] = v10;
      operator delete(v12);
    }
    *((_BYTE *)a1 + 24) = 0;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = *(char **)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *((_BYTE *)a1 + 24) = 1;
  }
}

void sub_223623A44(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_223623A90(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223623AF0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if ((*(_BYTE *)(a1 + 136) & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t *sub_223623B70(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x2276844A8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_223623C5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, char a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  MEMORY[0x2276844B4](&a11);
  JUMPOUT(0x223623BB8);
}

void sub_223623C98(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_22362420C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_223624230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223624244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_22362429C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24EC557C0;
  v23 = v6;
  *a3 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_2233236D4(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a1, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v18, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2, &v20);
  sub_2234AB028(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_2234AB028(&v23);
}

void sub_223624450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2234AB028((uint64_t *)va);
  sub_223167354((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_2234AB028((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_223624460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_2234AB028(&a15);
  _Unwind_Resume(a1);
}

void sub_22362447C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2234AB028((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223624490(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x2236243DCLL);
    JUMPOUT(0x2236243ACLL);
  }
  sub_2233236D4(3u);
}

void sub_2236244F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_223167354((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x223624560);
  JUMPOUT(0x223624538);
}

void sub_223624570(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_2236245BC(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22362461C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t *sub_223624628@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24EC557C0;
  v23 = v6;
  *a3 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_2233236D4(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a1, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v18, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2, &v20);
  sub_2234AB028(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_2234AB028(&v23);
}

void sub_2236247DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2234AB028((uint64_t *)va);
  sub_223167354((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_2234AB028((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_2236247EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_2234AB028(&a15);
  _Unwind_Resume(a1);
}

void sub_223624808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2234AB028((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22362481C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x223624768);
    JUMPOUT(0x223624738);
  }
  sub_2233236D4(3u);
}

void sub_22362487C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_223167354((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x2236248ECLL);
  JUMPOUT(0x2236248C4);
}

uint64_t *sub_2236248FC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24EC557C0;
  v23 = v6;
  *a3 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_2233236D4(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a1, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v18, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2, &v20);
  sub_2234AB028(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_2234AB028(&v23);
}

void sub_223624AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2234AB028((uint64_t *)va);
  sub_223167354((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_2234AB028((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_223624AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_2234AB028(&a15);
  _Unwind_Resume(a1);
}

void sub_223624ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2234AB028((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223624AF0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x223624A3CLL);
    JUMPOUT(0x223624A0CLL);
  }
  sub_2233236D4(3u);
}

void sub_223624B50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_223167354((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x223624BC0);
  JUMPOUT(0x223624B98);
}

uint64_t *sub_223624BD0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24EC55808;
  v23 = v6;
  *a3 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_2233236D4(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a1, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v18, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2, &v20);
  sub_2234C7158(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_2234C7158(&v23);
}

void sub_223624D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2234C7158((uint64_t *)va);
  sub_223167354((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_2234C7158((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_223624D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_2234C7158(&a15);
  _Unwind_Resume(a1);
}

void sub_223624DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2234C7158((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223624DC4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x223624D10);
    JUMPOUT(0x223624CE0);
  }
  sub_2233236D4(3u);
}

void sub_223624E24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_223167354((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x223624E94);
  JUMPOUT(0x223624E6CLL);
}

void sub_223624EA4(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_223624EF0(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223624F50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 144);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 152);
      v4 = *(void **)(a1 + 144);
      if (v3 != v2)
      {
        do
        {
          v5 = *(std::__shared_weak_count **)(v3 - 224);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 248;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 144);
      }
      *(_QWORD *)(a1 + 152) = v2;
      operator delete(v4);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_223624FF8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  std::exception_ptr v7;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  v4 = *(_QWORD *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_2236250A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_2236250CC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24EC557C0;
  v23 = v6;
  *a3 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_2233236D4(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a1, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v18, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2, &v20);
  sub_2234AB028(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_2234AB028(&v23);
}

void sub_223625280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2234AB028((uint64_t *)va);
  sub_223167354((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_2234AB028((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_223625290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_2234AB028(&a15);
  _Unwind_Resume(a1);
}

void sub_2236252AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2234AB028((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2236252C0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x22362520CLL);
    JUMPOUT(0x2236251DCLL);
  }
  sub_2233236D4(3u);
}

void sub_223625320(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_223167354((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x223625390);
  JUMPOUT(0x223625368);
}

void sub_2236253A0(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_2236253EC(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22362544C(_BYTE *a1)
{
  if ((a1[136] & 1) != 0)
    sub_2232954B0((uint64_t)(a1 + 144));
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t *sub_223625484@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24EC55808;
  v23 = v6;
  *a3 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_2233236D4(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a1, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v18, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2, &v20);
  sub_2234C7158(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_2234C7158(&v23);
}

void sub_223625638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2234C7158((uint64_t *)va);
  sub_223167354((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_2234C7158((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_223625648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_2234C7158(&a15);
  _Unwind_Resume(a1);
}

void sub_223625664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2234C7158((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223625678(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x2236255C4);
    JUMPOUT(0x223625594);
  }
  sub_2233236D4(3u);
}

void sub_2236256D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_223167354((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x223625748);
  JUMPOUT(0x223625720);
}

uint64_t *sub_223625758@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24EC55898;
  v23 = v6;
  *a3 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_2233236D4(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a1, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v18, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2, &v20);
  sub_2234DDE8C(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_2234DDE8C(&v23);
}

void sub_22362590C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2234DDE8C((uint64_t *)va);
  sub_223167354((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_2234DDE8C((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_22362591C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_2234DDE8C(&a15);
  _Unwind_Resume(a1);
}

void sub_223625938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2234DDE8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22362594C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x223625898);
    JUMPOUT(0x223625868);
  }
  sub_2233236D4(3u);
}

void sub_2236259AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_223167354((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x223625A1CLL);
  JUMPOUT(0x2236259F4);
}

void sub_223625A2C(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_223625A78(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223625AD8(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    v2 = *(void **)(a1 + 144);
    if (v2)
    {
      *(_QWORD *)(a1 + 152) = v2;
      operator delete(v2);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_223625B18(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  std::exception_ptr v7;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  v4 = *(_QWORD *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_223625BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_223625BEC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24EC55898;
  v23 = v6;
  *a3 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_2233236D4(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a1, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v18, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2, &v20);
  sub_2234DDE8C(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_2234DDE8C(&v23);
}

void sub_223625DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2234DDE8C((uint64_t *)va);
  sub_223167354((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_2234DDE8C((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_223625DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_2234DDE8C(&a15);
  _Unwind_Resume(a1);
}

void sub_223625DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2234DDE8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223625DE0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x223625D2CLL);
    JUMPOUT(0x223625CFCLL);
  }
  sub_2233236D4(3u);
}

void sub_223625E40(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_223167354((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x223625EB0);
  JUMPOUT(0x223625E88);
}

uint64_t *sub_223625EC0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24EC558E0;
  v23 = v6;
  *a3 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_2233236D4(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a1, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v18, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2, &v20);
  sub_2234E6CBC(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_2234E6CBC(&v23);
}

void sub_223626074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2234E6CBC((uint64_t *)va);
  sub_223167354((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_2234E6CBC((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_223626084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_2234E6CBC(&a15);
  _Unwind_Resume(a1);
}

void sub_2236260A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2234E6CBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2236260B4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x223626000);
    JUMPOUT(0x223625FD0);
  }
  sub_2233236D4(3u);
}

void sub_223626114(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_223167354((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x223626184);
  JUMPOUT(0x22362615CLL);
}

void sub_223626194(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_2236261E0(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223626240(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v6;
  unint64_t v7;

  if ((*(_BYTE *)(a1 + 136) & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  if (*(_BYTE *)(a1 + 392))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 168);
    if (!v2)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (v4)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  }
  else
  {
    v2 = *(std::__shared_weak_count **)(a1 + 152);
    if (!v2)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (v7)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t *sub_2236262E8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24EC557C0;
  v23 = v6;
  *a3 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_2233236D4(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a1, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v18, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2, &v20);
  sub_2234AB028(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_2234AB028(&v23);
}

