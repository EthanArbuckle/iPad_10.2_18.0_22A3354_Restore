void sub_223B0B274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52)
{
  if (LOBYTE(STACK[0x15E8]) && SLOBYTE(STACK[0x15E7]) < 0)
    operator delete((void *)STACK[0x15D0]);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x2C0]);
  if (!a52)
    _Unwind_Resume(a1);
  operator delete(a52);
  _Unwind_Resume(a1);
}

uint64_t sub_223B0B954@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  char *v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  std::mutex *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v29;
  std::string::size_type v30;
  int v31;
  __n128 *v34;
  std::string *v35;
  size_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  std::mutex *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type v46;
  std::string::size_type v47;
  int v48;
  __n128 *v51;
  std::string *v52;
  size_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::string __p;
  unsigned int v59;
  __int128 v60;
  __int128 v61;
  int v62;
  __int128 v63;
  __int128 v64;
  _QWORD v65[4];

  v65[2] = *MEMORY[0x24BDAC8D0];
  v60 = 0u;
  v61 = 0u;
  v62 = 728335840;
  kdebug_trace();
  v59 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v4 = *(_QWORD *)(a1 + 21496);
  v55 = a1;
  v56 = *(_QWORD *)(a1 + 21504);
  if (v4 != v56)
  {
    v5 = 0;
    v6 = a2 + 2;
    while (1)
    {
      v7 = *(_QWORD *)(v4 + 328);
      v8 = *(_QWORD *)(v4 + 336);
      v57 = v4;
      while (v7 != v8)
      {
        if (*(_DWORD *)(v7 + 448))
          ++v59;
        if ((unint64_t)v5 < *v6)
        {
          sub_223B246DC(v5, (uint64_t *)v7);
          v5 += 58;
          a2[1] = (uint64_t)v5;
          goto LABEL_6;
        }
        v9 = 0x34F72C234F72C235 * (((uint64_t)v5 - *a2) >> 4);
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) > 0x8D3DCB08D3DCB0)
          sub_22316E078();
        if (0x69EE58469EE5846ALL * ((*v6 - *a2) >> 4) > v10)
          v10 = 0x69EE58469EE5846ALL * ((*v6 - *a2) >> 4);
        if ((unint64_t)(0x34F72C234F72C235 * ((*v6 - *a2) >> 4)) >= 0x469EE58469EE58)
          v11 = 0x8D3DCB08D3DCB0;
        else
          v11 = v10;
        v65[0] = a2 + 2;
        if (v11)
        {
          if (v11 > 0x8D3DCB08D3DCB0)
            sub_223174E94();
          v12 = (char *)operator new(464 * v11);
        }
        else
        {
          v12 = 0;
        }
        *(_QWORD *)&v63 = v12;
        *((_QWORD *)&v63 + 1) = &v12[464 * v9];
        *(_QWORD *)&v64 = *((_QWORD *)&v63 + 1);
        *((_QWORD *)&v64 + 1) = &v12[464 * v11];
        sub_223B246DC(*((_QWORD **)&v63 + 1), (uint64_t *)v7);
        v13 = *((_QWORD *)&v63 + 1);
        v5 = (_QWORD *)(*((_QWORD *)&v63 + 1) + 464);
        v15 = (char *)*a2;
        v14 = (char *)a2[1];
        if (v14 == (char *)*a2)
        {
          *a2 = *((_QWORD *)&v63 + 1);
          a2[1] = (uint64_t)v5;
          a2[2] = *((_QWORD *)&v64 + 1);
          if (!v14)
            goto LABEL_6;
LABEL_28:
          operator delete(v14);
          goto LABEL_6;
        }
        do
        {
          v14 -= 464;
          v13 = sub_223B2502C(v13 - 464, (uint64_t)v14);
        }
        while (v14 != v15);
        v14 = (char *)*a2;
        v16 = a2[1];
        *a2 = v13;
        a2[1] = (uint64_t)v5;
        a2[2] = *((_QWORD *)&v64 + 1);
        while ((char *)v16 != v14)
        {
          v16 -= 464;
          sub_22388925C(v16);
        }
        if (v14)
          goto LABEL_28;
LABEL_6:
        a2[1] = (uint64_t)v5;
        v7 += 464;
      }
      v4 = v57 + 368;
      if (v57 + 368 == v56)
        goto LABEL_30;
    }
  }
  v5 = 0;
LABEL_30:
  if (*(_QWORD *)(a1 + 23400))
  {
    v17 = (uint64_t *)(a1 + 22968);
    if ((unint64_t)v5 >= a2[2])
    {
      v18 = sub_223B2455C(a2, v17);
    }
    else
    {
      sub_223B246DC(v5, v17);
      v18 = (char *)(v5 + 58);
      a2[1] = (uint64_t)(v5 + 58);
    }
    a2[1] = (uint64_t)v18;
  }
  v19 = v59;
  if (v59 < *(_DWORD *)(a1 + 22820))
    ++*(_DWORD *)(a1 + 22824);
  *(_DWORD *)(a1 + 22820) = v19;
  *(_QWORD *)&v63 = "cv3d.recon.";
  *((_QWORD *)&v63 + 1) = 11;
  *(_QWORD *)&v64 = "Stats.RoomBoundary.Rooms";
  *((_QWORD *)&v64 + 1) = 24;
  sub_2231A9820((uint64_t)&v63, (uint64_t)v65, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v20 = sub_2241471F8();
    v21 = v20[2];
    if (!v21)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v21 = v20[2];
    }
    v22 = *(_QWORD *)(v21 + 64);
    v23 = (std::mutex *)(v22 + 32);
    std::mutex::lock((std::mutex *)(v22 + 32));
    v25 = *(_QWORD *)(v22 + 96);
    v24 = *(_QWORD *)(v22 + 104);
    std::mutex::unlock(v23);
    if (v25 != v24)
    {
      sub_2241471F8();
      v26 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26))
      {
        v63 = 0u;
        v64 = 0u;
        LODWORD(v65[0]) = 728325608;
        kdebug_trace();
        sub_223990630((double *)&qword_255788F20, v26, (int *)&v59, "rooms with keyframes");
        kdebug_trace();
      }
    }
  }
  v63 = 0u;
  v64 = 0u;
  LODWORD(v65[0]) = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v29 = p_p->__r_.__value_.__r.__words[0];
    v30 = p_p->__r_.__value_.__l.__size_;
    v31 = p_p->__r_.__value_.__s.__data_[16];
    if (v29 == 0x6365722E64337663 && v30 == 0x73746174532E6E6FLL && v31 == 46)
    {
      v34 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &__p;
      else
        v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v36 = __p.__r_.__value_.__l.__size_;
      sub_223532E4C(v34, v35, v36, &v59, (uint64_t)"rooms with keyframes", 20);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v63 = "cv3d.recon.";
  *((_QWORD *)&v63 + 1) = 11;
  *(_QWORD *)&v64 = "Stats.RoomBoundary.Rooms";
  *((_QWORD *)&v64 + 1) = 24;
  sub_2231A9820((uint64_t)&v63, (uint64_t)v65, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v37 = sub_2241471F8();
    v38 = v37[2];
    if (!v38)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v38 = v37[2];
    }
    v39 = *(_QWORD *)(v38 + 64);
    v40 = (std::mutex *)(v39 + 32);
    std::mutex::lock((std::mutex *)(v39 + 32));
    v42 = *(_QWORD *)(v39 + 96);
    v41 = *(_QWORD *)(v39 + 104);
    std::mutex::unlock(v40);
    if (v42 != v41)
    {
      sub_2241471F8();
      v43 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43))
      {
        v63 = 0u;
        v64 = 0u;
        LODWORD(v65[0]) = 728325608;
        kdebug_trace();
        sub_223990630((double *)&qword_255788F20, v43, (int *)(v55 + 22824), "room count decreased");
        kdebug_trace();
      }
    }
  }
  v63 = 0u;
  v64 = 0u;
  LODWORD(v65[0]) = 728325624;
  kdebug_trace();
  v44 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v44 = __p.__r_.__value_.__l.__size_;
  if (v44 >= 0x11)
  {
    v45 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v46 = v45->__r_.__value_.__r.__words[0];
    v47 = v45->__r_.__value_.__l.__size_;
    v48 = v45->__r_.__value_.__s.__data_[16];
    if (v46 == 0x6365722E64337663 && v47 == 0x73746174532E6E6FLL && v48 == 46)
    {
      v51 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = &__p;
      else
        v52 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v53 = __p.__r_.__value_.__l.__size_;
      sub_223532E4C(v51, v52, v53, (unsigned int *)(v55 + 22824), (uint64_t)"room count decreased", 20);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return kdebug_trace();
}

void sub_223B0C118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223B0C1D8@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  _OWORD *v7;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v3 = (uint64_t *)result[2701];
  if (v3)
  {
    v4 = result;
    do
    {
      v5 = *((unsigned __int16 *)v3 + 8);
      v6 = v4[13];
      if (v5 >= (v4[14] - v6) >> 4)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 128, (uint64_t)"index < keyframe_uuids_.size() && \"No UUID for keyframe index\"", 62, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v6 = v4[13];
      }
      v7 = (_OWORD *)(v6 + 16 * v5);
      result = sub_223AEF408(a2, (uint64_t)v7, (uint64_t)&unk_2245BA939, &v7);
      result[4] = *(uint64_t *)((char *)v3 + 20);
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  return result;
}

void sub_223B0C2D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22322E828(v1);
  _Unwind_Resume(a1);
}

void sub_223B0C2E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22322E828(v1);
  _Unwind_Resume(a1);
}

void sub_223B0C2F8()
{
  uint64_t v0;
  uint64_t v1;
  _DWORD *v2;
  int v3;
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  float32x4_t v14;
  double v15;
  double v16;
  double v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  float32x4_t v41;
  double v42;
  double v43;
  double v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  signed int v69;
  signed int v70;
  uint64_t v71;
  _DWORD *v72;
  int v73;
  int v74;
  BOOL v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  signed int v83;
  signed int v84;
  uint64_t v85;
  _DWORD *v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  unsigned int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  unsigned int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  unsigned int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  unsigned int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  unsigned int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  unsigned int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  unsigned int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  unsigned int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  unsigned int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  unsigned int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  unsigned int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  unsigned int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int i;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int j;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  int v279;
  uint64_t v280;
  int v281;
  _DWORD *v282;
  _QWORD v283[3];
  _QWORD v284[2];
  _DWORD *v285;
  void *__p;
  __int128 v287;
  __int128 v288;
  void *v289;
  __int128 v290;
  __int128 v291;
  char v292;
  char v293;
  _QWORD *v294;
  _QWORD *v295;
  _QWORD *v296;
  uint64_t v297;
  char *v298;
  char *v299;
  _DWORD *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  __int128 v305;
  __int128 v306;
  unsigned int v307[13];
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  unsigned int v311;
  unsigned int v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  _QWORD *v318;
  char v319;
  unint64_t v320;
  unsigned int v321;
  uint64_t v322;
  int v323;
  int v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  _QWORD *v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  _QWORD *v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  _QWORD *v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  _QWORD *v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  _QWORD *v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  _QWORD *v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  _QWORD *v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  _QWORD *v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  _QWORD *v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  _QWORD *v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  _QWORD *v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  _QWORD *v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  _QWORD *v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  _QWORD *v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  _QWORD *v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  _QWORD *v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  _QWORD *v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  _QWORD *v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  _QWORD *v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  _QWORD *v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  _QWORD *v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  _QWORD *v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  _QWORD *v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  _QWORD *v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  _QWORD *v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  _QWORD *v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  _QWORD *v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  _QWORD *v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  _QWORD *v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  _QWORD *v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  _QWORD *v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  _QWORD *v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  _QWORD *v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  _QWORD *v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  _QWORD *v602;
  __int128 v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  _QWORD *v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  _QWORD *v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  _QWORD *v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  __int128 v633;
  _QWORD *v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  _QWORD *v642;
  __int128 v643;
  __int128 v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  _QWORD *v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  _QWORD *v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  __int128 v662;
  __int128 v663;
  __int128 v664;
  __int128 v665;
  _QWORD *v666;
  __int128 v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  _QWORD *v674;
  __int128 v675;
  __int128 v676;
  __int128 v677;
  __int128 v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  _QWORD *v682;
  __int128 v683;
  __int128 v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  _QWORD v732[4];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = (_DWORD *)v1;
  v4 = v3;
  v6 = v5;
  v7 = v0;
  v732[1] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(v1 + 8) = *(_QWORD *)v1;
  *(_QWORD *)(v1 + 40) = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 80) = *(_QWORD *)(v1 + 72);
  v8 = v1 + 112;
  *(_QWORD *)(v1 + 120) = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 152) = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v1 + 184) = *(_QWORD *)(v1 + 176);
  *(_QWORD *)(v1 + 216) = *(_QWORD *)(v1 + 208);
  v9 = v1 + 240;
  *(_QWORD *)(v1 + 248) = *(_QWORD *)(v1 + 240);
  v10 = v1 + 280;
  *(_QWORD *)(v1 + 288) = *(_QWORD *)(v1 + 280);
  v11 = v1 + 320;
  *(_QWORD *)(v1 + 328) = *(_QWORD *)(v1 + 320);
  if (*(_BYTE *)(v1 + 380))
    *(_BYTE *)(v1 + 380) = 0;
  sub_22339E3C8(v1, 0x190uLL);
  sub_223674C80(v11, 0x190uLL);
  v2[88] = 1;
  sub_22339E528(v8, 0x320uLL);
  sub_223674E10(v9, 0x320uLL);
  v2[68] = 2;
  sub_223674E10(v10, 0x320uLL);
  v2[78] = 2;
  v289 = &unk_2245C5160;
  v290 = 0u;
  v291 = 0u;
  __p = &unk_2245C5160;
  v287 = 0u;
  v288 = 0u;
  sub_223B26AA0((char **)&v289, (char *)0x1FF);
  sub_223B26AA0((char **)&__p, (char *)0x3F);
  v284[1] = &__p;
  v285 = v2;
  v283[2] = v7;
  v284[0] = &v285;
  v283[0] = &v285;
  v283[1] = &v289;
  v12 = v7 + 184;
  v282 = v2;
  if (v4)
  {
    v280 = *v6;
    v281 = *((_DWORD *)v6 + 2);
    v320 = v280 & 0xFFFFFFF8FFFFFFF8;
    v321 = v281 & 0xFFFFFFF8;
    v13 = sub_223E974E0(v12, (int *)&v320, v307);
    v18 = v13;
    if ((v13 & 0x80000000) != 0)
    {
      v21 = *(unsigned int *)(v7 + 21096);
      if ((v21 & 0x80000000) == 0)
        goto LABEL_9;
    }
    else
    {
      v19 = v13;
      v20 = *(_QWORD *)(v7 + 21104);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v7 + 21112) - v20) >> 4) <= v13)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_547;
        }
        v20 = *(_QWORD *)(v7 + 21104);
      }
      v21 = *(unsigned int *)(v20 + 48 * v19 + 40);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_9:
        v22 = *(_QWORD *)(v7 + 21008);
        if (v21 >= (*(_QWORD *)(v7 + 21016) - v22) >> 4)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 241, (uint64_t)"block_index < allocated_voxel_masks_.size()", 43, (uint64_t)"Invalid mask index", 18, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_547;
          }
          v22 = *(_QWORD *)(v7 + 21008);
        }
        v23 = *(_QWORD *)(v22 + 16 * v21 + 8);
        if ((v18 & 0x80000000) == 0)
        {
LABEL_13:
          v24 = v308;
          v25 = v7 + 21056;
          v26 = v7 + 21056;
          if ((v308 & 0x80000000) != 0)
            goto LABEL_14;
LABEL_208:
          v210 = v24;
          v211 = *(_QWORD *)(v7 + 21104);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v7 + 21112) - v211) >> 4) <= v210)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_547;
            }
            v211 = *(_QWORD *)(v7 + 21104);
          }
          v212 = v211 + 48 * v210;
          v27 = HIDWORD(v308);
          LODWORD(v308) = *(_DWORD *)(v212 + 40);
          v28 = v25;
          if ((v308 & 0x8000000000000000) != 0)
          {
LABEL_15:
            v29 = v309;
            HIDWORD(v308) = *(_DWORD *)(v28 + 40);
            v30 = v25;
            if ((v309 & 0x80000000) != 0)
              goto LABEL_16;
            goto LABEL_216;
          }
LABEL_212:
          v213 = *(_QWORD *)(v7 + 21104);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v7 + 21112) - v213) >> 4) <= v27)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_547;
            }
            v213 = *(_QWORD *)(v7 + 21104);
          }
          v214 = v213 + 48 * v27;
          v29 = v309;
          HIDWORD(v308) = *(_DWORD *)(v214 + 40);
          v30 = v25;
          if ((v309 & 0x80000000) != 0)
          {
LABEL_16:
            v31 = HIDWORD(v309);
            LODWORD(v309) = *(_DWORD *)(v30 + 40);
            v32 = v25;
            if ((v309 & 0x8000000000000000) != 0)
              goto LABEL_17;
            goto LABEL_220;
          }
LABEL_216:
          v215 = *(_QWORD *)(v7 + 21104);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v7 + 21112) - v215) >> 4) <= v29)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_547;
            }
            v215 = *(_QWORD *)(v7 + 21104);
          }
          v216 = v215 + 48 * v29;
          v31 = HIDWORD(v309);
          LODWORD(v309) = *(_DWORD *)(v216 + 40);
          v32 = v25;
          if ((v309 & 0x8000000000000000) != 0)
          {
LABEL_17:
            v33 = v310;
            HIDWORD(v309) = *(_DWORD *)(v32 + 40);
            v34 = v25;
            if ((v310 & 0x80000000) != 0)
              goto LABEL_18;
            goto LABEL_224;
          }
LABEL_220:
          v217 = *(_QWORD *)(v7 + 21104);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v7 + 21112) - v217) >> 4) <= v31)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_547;
            }
            v217 = *(_QWORD *)(v7 + 21104);
          }
          v218 = v217 + 48 * v31;
          v33 = v310;
          HIDWORD(v309) = *(_DWORD *)(v218 + 40);
          v34 = v25;
          if ((v310 & 0x80000000) != 0)
          {
LABEL_18:
            v35 = HIDWORD(v310);
            LODWORD(v310) = *(_DWORD *)(v34 + 40);
            v36 = v25;
            if ((v310 & 0x8000000000000000) != 0)
              goto LABEL_19;
            goto LABEL_228;
          }
LABEL_224:
          v219 = *(_QWORD *)(v7 + 21104);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v7 + 21112) - v219) >> 4) <= v33)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_547;
            }
            v219 = *(_QWORD *)(v7 + 21104);
          }
          v220 = v219 + 48 * v33;
          v35 = HIDWORD(v310);
          LODWORD(v310) = *(_DWORD *)(v220 + 40);
          v36 = v25;
          if ((v310 & 0x8000000000000000) != 0)
          {
LABEL_19:
            v37 = v311;
            HIDWORD(v310) = *(_DWORD *)(v36 + 40);
            v38 = v25;
            if ((v311 & 0x80000000) != 0)
              goto LABEL_20;
            goto LABEL_232;
          }
LABEL_228:
          v221 = *(_QWORD *)(v7 + 21104);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v7 + 21112) - v221) >> 4) <= v35)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_547;
            }
            v221 = *(_QWORD *)(v7 + 21104);
          }
          v222 = v221 + 48 * v35;
          v37 = v311;
          HIDWORD(v310) = *(_DWORD *)(v222 + 40);
          v38 = v25;
          if ((v311 & 0x80000000) != 0)
          {
LABEL_20:
            v39 = v312;
            v311 = *(_DWORD *)(v38 + 40);
            if ((v312 & 0x80000000) != 0)
              goto LABEL_240;
LABEL_236:
            v225 = *(_QWORD *)(v7 + 21104);
            if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v7 + 21112) - v225) >> 4) <= v39)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_547;
              }
              v225 = *(_QWORD *)(v7 + 21104);
            }
            v25 = v225 + 48 * v39;
LABEL_240:
            v226 = v308;
            v312 = *(_DWORD *)(v25 + 40);
            v306 = 0u;
            v305 = 0u;
            if ((v308 & 0x80000000) != 0)
            {
              v301 = v7 + 500;
              v228 = HIDWORD(v308);
              if ((v308 & 0x8000000000000000) == 0)
                goto LABEL_245;
            }
            else
            {
              v227 = *(_QWORD *)(v7 + 20984);
              if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v7 + 20992) - v227) >> 12) <= v308)
              {
                if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
                {
                  goto LABEL_547;
                }
                v227 = *(_QWORD *)(v7 + 20984);
              }
              v301 = v227 + 20480 * v226;
              v228 = HIDWORD(v308);
              if ((v308 & 0x8000000000000000) == 0)
              {
LABEL_245:
                v229 = *(_QWORD *)(v7 + 20984);
                if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v7 + 20992) - v229) >> 12) <= v228)
                {
                  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
                  {
                    goto LABEL_547;
                  }
                  v229 = *(_QWORD *)(v7 + 20984);
                }
                v302 = v229 + 20480 * v228;
                v230 = v309;
                if ((v309 & 0x80000000) == 0)
                {
LABEL_249:
                  v231 = *(_QWORD *)(v7 + 20984);
                  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v7 + 20992) - v231) >> 12) <= v230)
                  {
                    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
                    {
                      goto LABEL_547;
                    }
                    v231 = *(_QWORD *)(v7 + 20984);
                  }
                  v303 = v231 + 20480 * v230;
                  v232 = HIDWORD(v309);
                  if ((v309 & 0x8000000000000000) == 0)
                  {
LABEL_253:
                    v233 = *(_QWORD *)(v7 + 20984);
                    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v7 + 20992) - v233) >> 12) <= v232)
                    {
                      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
                      {
                        goto LABEL_547;
                      }
                      v233 = *(_QWORD *)(v7 + 20984);
                    }
                    v304 = v233 + 20480 * v232;
                    v234 = v310;
                    if ((v310 & 0x80000000) == 0)
                    {
LABEL_257:
                      v235 = *(_QWORD *)(v7 + 20984);
                      if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v7 + 20992) - v235) >> 12) <= v234)
                      {
                        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
                        {
                          goto LABEL_547;
                        }
                        v235 = *(_QWORD *)(v7 + 20984);
                      }
                      *(_QWORD *)&v305 = v235 + 20480 * v234;
                      v236 = HIDWORD(v310);
                      if ((v310 & 0x8000000000000000) == 0)
                      {
LABEL_261:
                        v237 = *(_QWORD *)(v7 + 20984);
                        if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v7 + 20992) - v237) >> 12) <= v236)
                        {
                          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
                          {
                            goto LABEL_547;
                          }
                          v237 = *(_QWORD *)(v7 + 20984);
                        }
                        *((_QWORD *)&v305 + 1) = v237 + 20480 * v236;
                        v238 = v311;
                        if ((v311 & 0x80000000) == 0)
                        {
LABEL_265:
                          v239 = *(_QWORD *)(v7 + 20984);
                          if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v7 + 20992) - v239) >> 12) <= v238)
                          {
                            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
                            {
                              goto LABEL_547;
                            }
                            v239 = *(_QWORD *)(v7 + 20984);
                          }
                          *(_QWORD *)&v306 = v239 + 20480 * v238;
                          v240 = v312;
                          if ((v312 & 0x80000000) == 0)
                          {
LABEL_269:
                            v241 = *(_QWORD *)(v7 + 20984);
                            if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v7 + 20992) - v241) >> 12) > v240)
                            {
LABEL_272:
                              v242 = v241 + 20480 * v240;
LABEL_281:
                              *((_QWORD *)&v306 + 1) = v242;
                              v243 = *(_DWORD *)(v7 + 312);
                              v294 = v284;
                              v295 = v283;
                              v296 = &v282;
                              v297 = v7;
                              v298 = &v293;
                              v299 = &v292;
                              v300 = v2;
                              v324 = v243;
                              v322 = 16;
                              v323 = 0;
                              v319 = 8;
                              *(_QWORD *)&v313 = &v280;
                              *((_QWORD *)&v313 + 1) = &v322;
                              *(_QWORD *)&v314 = v7 + 460;
                              *((_QWORD *)&v314 + 1) = &v301;
                              *(_QWORD *)&v315 = &v319;
                              *((_QWORD *)&v315 + 1) = &v320;
                              *(_QWORD *)&v316 = &v324;
                              *((_QWORD *)&v316 + 1) = &v687;
                              *(_QWORD *)&v317 = &v686;
                              *((_QWORD *)&v317 + 1) = &v685;
                              v318 = &v294;
                              v688 = 0;
                              v331 = xmmword_224662C2C;
                              v332 = *(_OWORD *)dbl_224662C3C;
                              if ((v23 & 1) != 0)
                                sub_223B26C48((uint64_t)&v313, 0, 0, 0, (uint64_t)&v688, (uint64_t)&v331, COERCE_DOUBLE(0x100000000), dbl_224662C3C[0], v14, v15, v16, v17);
                              v327 = v315;
                              v328 = v316;
                              v329 = v317;
                              v330 = v318;
                              v325 = v313;
                              v326 = v314;
                              v689 = 0;
                              v339 = xmmword_224662C88;
                              v340 = *(_OWORD *)dbl_224662C98;
                              if ((v23 & 3) != 0)
                                sub_223B26C48((uint64_t)&v325, 0, 0, 1, (uint64_t)&v689, (uint64_t)&v339, COERCE_DOUBLE(0x800000001), dbl_224662C98[0], v14, v15, v16, v17);
                              v335 = v315;
                              v336 = v316;
                              v337 = v317;
                              v338 = v318;
                              v333 = v313;
                              v334 = v314;
                              v690 = 0;
                              v347 = xmmword_224662CA8;
                              v348 = *(_OWORD *)dbl_224662CB8;
                              if ((v23 & 5) != 0)
                                sub_223B26C48((uint64_t)&v333, 0, 1, 0, (uint64_t)&v690, (uint64_t)&v347, COERCE_DOUBLE(0x300000002), dbl_224662CB8[0], v14, v15, v16, v17);
                              v343 = v315;
                              v344 = v316;
                              v345 = v317;
                              v346 = v318;
                              v341 = v313;
                              v342 = v314;
                              v691 = 0;
                              v355 = xmmword_224662CC8;
                              v356 = *(_OWORD *)dbl_224662CD8;
                              if ((v23 & 0xF) != 0)
                                sub_223B26C48((uint64_t)&v341, 0, 1, 1, (uint64_t)&v691, (uint64_t)&v355, COERCE_DOUBLE(0xA00000003), dbl_224662CD8[0], v14, v15, v16, v17);
                              v351 = v315;
                              v352 = v316;
                              v353 = v317;
                              v354 = v318;
                              v349 = v313;
                              v350 = v314;
                              v692 = 0;
                              v363 = xmmword_224662CE8;
                              v364 = *(_OWORD *)dbl_224662CF8;
                              if ((v23 & 0x11) != 0)
                                sub_223B26C48((uint64_t)&v349, 1, 0, 0, (uint64_t)&v692, (uint64_t)&v363, COERCE_DOUBLE(0x500000004), dbl_224662CF8[0], v14, v15, v16, v17);
                              v359 = v315;
                              v360 = v316;
                              v361 = v317;
                              v362 = v318;
                              v357 = v313;
                              v358 = v314;
                              v693 = 0;
                              v371 = xmmword_224662D08;
                              v372 = *(_OWORD *)dbl_224662D18;
                              if ((v23 & 0x33) != 0)
                                sub_223B26C48((uint64_t)&v357, 1, 0, 1, (uint64_t)&v693, (uint64_t)&v371, COERCE_DOUBLE(0xC00000005), dbl_224662D18[0], v14, v15, v16, v17);
                              v367 = v315;
                              v368 = v316;
                              v369 = v317;
                              v370 = v318;
                              v365 = v313;
                              v366 = v314;
                              v694 = 0;
                              v379 = xmmword_224662D28;
                              v380 = *(_OWORD *)dbl_224662D38;
                              if ((v23 & 0x55) != 0)
                                sub_223B26C48((uint64_t)&v365, 1, 1, 0, (uint64_t)&v694, (uint64_t)&v379, COERCE_DOUBLE(0x700000006), dbl_224662D38[0], v14, v15, v16, v17);
                              v375 = v315;
                              v376 = v316;
                              v377 = v317;
                              v378 = v318;
                              v373 = v313;
                              v374 = v314;
                              v695 = 0;
                              v387 = xmmword_224662D48;
                              v388 = *(_OWORD *)dbl_224662D58;
                              if ((_BYTE)v23)
                                sub_223B26C48((uint64_t)&v373, 1, 1, 1, (uint64_t)&v695, (uint64_t)&v387, COERCE_DOUBLE(0xE00000007), dbl_224662D58[0], v14, v15, v16, v17);
                              v383 = v315;
                              v384 = v316;
                              v385 = v317;
                              v381 = v313;
                              v382 = v314;
                              v395 = xmmword_224662D68;
                              v386 = v318;
                              v696 = 0;
                              v396 = *(_OWORD *)dbl_224662D78;
                              if ((v23 & 2) != 0)
                                sub_223B26C48((uint64_t)&v381, 0, 0, 2, (uint64_t)&v696, (uint64_t)&v395, COERCE_DOUBLE(0x900000008), dbl_224662D78[0], v14, v15, v16, v17);
                              v391 = v315;
                              v392 = v316;
                              v393 = v317;
                              v389 = v313;
                              v390 = v314;
                              v403 = xmmword_224662D88;
                              v394 = v318;
                              v697 = 0;
                              v404 = *(_OWORD *)dbl_224662D98;
                              if ((v23 & 0x102) != 0)
                                sub_223B26C48((uint64_t)&v389, 0, 0, 3, (uint64_t)&v697, (uint64_t)&v403, COERCE_DOUBLE(0x4000000009), dbl_224662D98[0], v14, v15, v16, v17);
                              v399 = v335;
                              v400 = v336;
                              v401 = v337;
                              v397 = v333;
                              v398 = v334;
                              v411 = xmmword_224662DA8;
                              v402 = v338;
                              v698 = 0;
                              v412 = *(_OWORD *)dbl_224662DB8;
                              if ((v23 & 0xA) != 0)
                                sub_223B26C48((uint64_t)&v397, 0, 1, 2, (uint64_t)&v698, (uint64_t)&v411, COERCE_DOUBLE(0xB0000000ALL), dbl_224662DB8[0], v14, v15, v16, v17);
                              v407 = v335;
                              v408 = v336;
                              v409 = v337;
                              v405 = v333;
                              v406 = v334;
                              v419 = xmmword_224662DC8;
                              v410 = v338;
                              v699 = 0;
                              v420 = *(_OWORD *)dbl_224662DD8;
                              if ((v23 & 0x50A) != 0)
                                sub_223B26C48((uint64_t)&v405, 0, 1, 3, (uint64_t)&v699, (uint64_t)&v419, COERCE_DOUBLE(0x420000000BLL), dbl_224662DD8[0], v14, v15, v16, v17);
                              v415 = v335;
                              v416 = v336;
                              v417 = v337;
                              v413 = v333;
                              v414 = v334;
                              v427 = xmmword_224662DE8;
                              v418 = v338;
                              v700 = 0;
                              v428 = *(_OWORD *)dbl_224662DF8;
                              if ((v23 & 0x22) != 0)
                                sub_223B26C48((uint64_t)&v413, 1, 0, 2, (uint64_t)&v700, (uint64_t)&v427, COERCE_DOUBLE(0xD0000000CLL), dbl_224662DF8[0], v14, v15, v16, v17);
                              v423 = v335;
                              v424 = v336;
                              v425 = v337;
                              v421 = v333;
                              v422 = v334;
                              v435 = xmmword_224662E08;
                              v426 = v338;
                              v701 = 0;
                              v436 = *(_OWORD *)dbl_224662E18;
                              if ((v23 & 0x1122) != 0)
                                sub_223B26C48((uint64_t)&v421, 1, 0, 3, (uint64_t)&v701, (uint64_t)&v435, COERCE_DOUBLE(0x440000000DLL), dbl_224662E18[0], v14, v15, v16, v17);
                              v431 = v367;
                              v432 = v368;
                              v433 = v369;
                              v429 = v365;
                              v430 = v366;
                              v443 = xmmword_224662E28;
                              v434 = v370;
                              v702 = 0;
                              v444 = *(_OWORD *)dbl_224662E38;
                              if ((v23 & 0xAA) != 0)
                                sub_223B26C48((uint64_t)&v429, 1, 1, 2, (uint64_t)&v702, (uint64_t)&v443, COERCE_DOUBLE(0xF0000000ELL), dbl_224662E38[0], v14, v15, v16, v17);
                              v439 = v367;
                              v440 = v368;
                              v441 = v369;
                              v437 = v365;
                              v438 = v366;
                              v451 = xmmword_224662E48;
                              v442 = v370;
                              v703 = 0;
                              v452 = *(_OWORD *)dbl_224662E58;
                              if ((v23 & 0x55AA) != 0)
                                sub_223B26C48((uint64_t)&v437, 1, 1, 3, (uint64_t)&v703, (uint64_t)&v451, COERCE_DOUBLE(0x460000000FLL), dbl_224662E58[0], v14, v15, v16, v17);
                              v447 = v367;
                              v448 = v368;
                              v449 = v369;
                              v445 = v365;
                              v446 = v366;
                              v459 = xmmword_224662E68;
                              v450 = v370;
                              v704 = 0;
                              v460 = *(_OWORD *)dbl_224662E78;
                              if ((v23 & 4) != 0)
                                sub_223B26C48((uint64_t)&v445, 0, 2, 0, (uint64_t)&v704, (uint64_t)&v459, COERCE_DOUBLE(0x1100000010), dbl_224662E78[0], v14, v15, v16, v17);
                              v455 = v367;
                              v456 = v368;
                              v457 = v369;
                              v453 = v365;
                              v454 = v366;
                              v467 = xmmword_224662E88;
                              v458 = v370;
                              v705 = 0;
                              v468 = *(_OWORD *)dbl_224662E98;
                              if ((v23 & 0xC) != 0)
                                sub_223B26C48((uint64_t)&v453, 0, 2, 1, (uint64_t)&v705, (uint64_t)&v467, COERCE_DOUBLE(0x1800000011), dbl_224662E98[0], v14, v15, v16, v17);
                              v463 = v399;
                              v464 = v400;
                              v465 = v401;
                              v461 = v397;
                              v462 = v398;
                              v475 = xmmword_224662EA8;
                              v466 = v402;
                              v706 = 0;
                              v476 = *(_OWORD *)dbl_224662EB8;
                              if ((v23 & 0x10004) != 0)
                                sub_223B26C48((uint64_t)&v461, 0, 3, 0, (uint64_t)&v706, (uint64_t)&v475, COERCE_DOUBLE(0x1300000012), dbl_224662EB8[0], v14, v15, v16, v17);
                              v471 = v399;
                              v472 = v400;
                              v473 = v401;
                              v469 = v397;
                              v470 = v398;
                              v483 = xmmword_224662EC8;
                              v474 = v402;
                              v707 = 0;
                              v484 = *(_OWORD *)dbl_224662ED8;
                              if ((v23 & 0x3000C) != 0)
                                sub_223B26C48((uint64_t)&v469, 0, 3, 1, (uint64_t)&v707, (uint64_t)&v483, COERCE_DOUBLE(0x1A00000013), dbl_224662ED8[0], v14, v15, v16, v17);
                              v479 = v399;
                              v480 = v400;
                              v481 = v401;
                              v477 = v397;
                              v478 = v398;
                              v491 = xmmword_224662EE8;
                              v482 = v402;
                              v708 = 0;
                              v492 = *(_OWORD *)dbl_224662EF8;
                              if ((v23 & 0x44) != 0)
                                sub_223B26C48((uint64_t)&v477, 1, 2, 0, (uint64_t)&v708, (uint64_t)&v491, COERCE_DOUBLE(0x1500000014), dbl_224662EF8[0], v14, v15, v16, v17);
                              v487 = v399;
                              v488 = v400;
                              v489 = v401;
                              v485 = v397;
                              v486 = v398;
                              v499 = xmmword_224662F08;
                              v490 = v402;
                              v709 = 0;
                              v500 = *(_OWORD *)dbl_224662F18;
                              if ((v23 & 0xCC) != 0)
                                sub_223B26C48((uint64_t)&v485, 1, 2, 1, (uint64_t)&v709, (uint64_t)&v499, COERCE_DOUBLE(0x1C00000015), dbl_224662F18[0], v14, v15, v16, v17);
                              v495 = v431;
                              v496 = v432;
                              v497 = v433;
                              v493 = v429;
                              v494 = v430;
                              v507 = xmmword_224662F28;
                              v498 = v434;
                              v710 = 0;
                              v508 = *(_OWORD *)dbl_224662F38;
                              if ((v23 & 0x110044) != 0)
                                sub_223B26C48((uint64_t)&v493, 1, 3, 0, (uint64_t)&v710, (uint64_t)&v507, COERCE_DOUBLE(0x1700000016), dbl_224662F38[0], v14, v15, v16, v17);
                              v503 = v431;
                              v504 = v432;
                              v505 = v433;
                              v501 = v429;
                              v502 = v430;
                              v515 = xmmword_224662F48;
                              v506 = v434;
                              v711 = 0;
                              v516 = *(_OWORD *)dbl_224662F58;
                              if ((v23 & 0x3300CC) != 0)
                                sub_223B26C48((uint64_t)&v501, 1, 3, 1, (uint64_t)&v711, (uint64_t)&v515, COERCE_DOUBLE(0x1E00000017), dbl_224662F58[0], v14, v15, v16, v17);
                              v511 = v431;
                              v512 = v432;
                              v513 = v433;
                              v509 = v429;
                              v510 = v430;
                              v523 = xmmword_224662F68;
                              v514 = v434;
                              v712 = 0;
                              v524 = *(_OWORD *)dbl_224662F78;
                              if ((v23 & 8) != 0)
                                sub_223B26C48((uint64_t)&v509, 0, 2, 2, (uint64_t)&v712, (uint64_t)&v523, COERCE_DOUBLE(0x1900000018), dbl_224662F78[0], v14, v15, v16, v17);
                              v519 = v431;
                              v520 = v432;
                              v521 = v433;
                              v517 = v429;
                              v518 = v430;
                              v531 = xmmword_224662F88;
                              v522 = v434;
                              v713 = 0;
                              v532 = *(_OWORD *)dbl_224662F98;
                              if ((v23 & 0x408) != 0)
                                sub_223B26C48((uint64_t)&v517, 0, 2, 3, (uint64_t)&v713, (uint64_t)&v531, COERCE_DOUBLE(0x5000000019), dbl_224662F98[0], v14, v15, v16, v17);
                              v527 = v463;
                              v528 = v464;
                              v529 = v465;
                              v525 = v461;
                              v526 = v462;
                              v539 = xmmword_224662FA8;
                              v530 = v466;
                              v714 = 0;
                              v540 = *(_OWORD *)dbl_224662FB8;
                              if ((v23 & 0x20008) != 0)
                                sub_223B26C48((uint64_t)&v525, 0, 3, 2, (uint64_t)&v714, (uint64_t)&v539, COERCE_DOUBLE(0x1B0000001ALL), dbl_224662FB8[0], v14, v15, v16, v17);
                              v535 = v463;
                              v536 = v464;
                              v537 = v465;
                              v533 = v461;
                              v534 = v462;
                              v547 = xmmword_224662FC8;
                              v538 = v466;
                              v715 = 0;
                              v548 = *(_OWORD *)dbl_224662FD8;
                              if ((v23 & 0x1020408) != 0)
                                sub_223B26C48((uint64_t)&v533, 0, 3, 3, (uint64_t)&v715, (uint64_t)&v547, COERCE_DOUBLE(0x520000001BLL), dbl_224662FD8[0], v14, v15, v16, v17);
                              v543 = v463;
                              v544 = v464;
                              v545 = v465;
                              v541 = v461;
                              v542 = v462;
                              v555 = xmmword_224662FE8;
                              v546 = v466;
                              v716 = 0;
                              v556 = *(_OWORD *)dbl_224662FF8;
                              if ((v23 & 0x88) != 0)
                                sub_223B26C48((uint64_t)&v541, 1, 2, 2, (uint64_t)&v716, (uint64_t)&v555, COERCE_DOUBLE(0x1D0000001CLL), dbl_224662FF8[0], v14, v15, v16, v17);
                              v551 = v463;
                              v552 = v464;
                              v553 = v465;
                              v549 = v461;
                              v550 = v462;
                              v563 = xmmword_224663008;
                              v554 = v466;
                              v717 = 0;
                              v564 = *(_OWORD *)dbl_224663018;
                              if ((v23 & 0x4488) != 0)
                                sub_223B26C48((uint64_t)&v549, 1, 2, 3, (uint64_t)&v717, (uint64_t)&v563, COERCE_DOUBLE(0x540000001DLL), dbl_224663018[0], v14, v15, v16, v17);
                              v559 = v495;
                              v560 = v496;
                              v561 = v497;
                              v557 = v493;
                              v558 = v494;
                              v571 = xmmword_224663028;
                              v562 = v498;
                              v718 = 0;
                              v572 = *(_OWORD *)dbl_224663038;
                              if ((v23 & 0x220088) != 0)
                                sub_223B26C48((uint64_t)&v557, 1, 3, 2, (uint64_t)&v718, (uint64_t)&v571, COERCE_DOUBLE(0x1F0000001ELL), dbl_224663038[0], v14, v15, v16, v17);
                              v567 = v495;
                              v568 = v496;
                              v569 = v497;
                              v565 = v493;
                              v566 = v494;
                              v579 = xmmword_224663048;
                              v570 = v498;
                              v719 = 0;
                              v580 = *(_OWORD *)dbl_224663058;
                              if ((v23 & 0x11224488) != 0)
                                sub_223B26C48((uint64_t)&v565, 1, 3, 3, (uint64_t)&v719, (uint64_t)&v579, COERCE_DOUBLE(0x560000001FLL), dbl_224663058[0], v14, v15, v16, v17);
                              v575 = v495;
                              v576 = v496;
                              v577 = v497;
                              v573 = v493;
                              v574 = v494;
                              v587 = xmmword_224663068;
                              v578 = v498;
                              v720 = 0;
                              v588 = *(_OWORD *)dbl_224663078;
                              if ((v23 & 0x10) != 0)
                                sub_223B26C48((uint64_t)&v573, 2, 0, 0, (uint64_t)&v720, (uint64_t)&v587, COERCE_DOUBLE(0x2100000020), dbl_224663078[0], v14, v15, v16, v17);
                              v583 = v495;
                              v584 = v496;
                              v585 = v497;
                              v581 = v493;
                              v582 = v494;
                              v595 = xmmword_224663088;
                              v586 = v498;
                              v721 = 0;
                              v596 = *(_OWORD *)dbl_224663098;
                              if ((v23 & 0x30) != 0)
                                sub_223B26C48((uint64_t)&v581, 2, 0, 1, (uint64_t)&v721, (uint64_t)&v595, COERCE_DOUBLE(0x2800000021), dbl_224663098[0], v14, v15, v16, v17);
                              v591 = v527;
                              v592 = v528;
                              v593 = v529;
                              v589 = v525;
                              v590 = v526;
                              v603 = xmmword_2246630A8;
                              v594 = v530;
                              v722 = 0;
                              v604 = *(_OWORD *)dbl_2246630B8;
                              if ((v23 & 0x50) != 0)
                                sub_223B26C48((uint64_t)&v589, 2, 1, 0, (uint64_t)&v722, (uint64_t)&v603, COERCE_DOUBLE(0x2300000022), dbl_2246630B8[0], v14, v15, v16, v17);
                              v599 = v527;
                              v600 = v528;
                              v601 = v529;
                              v597 = v525;
                              v598 = v526;
                              v611 = xmmword_2246630C8;
                              v602 = v530;
                              v723 = 0;
                              v612 = *(_OWORD *)dbl_2246630D8;
                              if ((v23 & 0xF0) != 0)
                                sub_223B26C48((uint64_t)&v597, 2, 1, 1, (uint64_t)&v723, (uint64_t)&v611, COERCE_DOUBLE(0x2A00000023), dbl_2246630D8[0], v14, v15, v16, v17);
                              v607 = v527;
                              v608 = v528;
                              v609 = v529;
                              v605 = v525;
                              v606 = v526;
                              v619 = xmmword_2246630E8;
                              v610 = v530;
                              v724 = 0;
                              v620 = *(_OWORD *)dbl_2246630F8;
                              if ((v23 & 0x100000010) != 0)
                                sub_223B26C48((uint64_t)&v605, 3, 0, 0, (uint64_t)&v724, (uint64_t)&v619, COERCE_DOUBLE(0x2500000024), dbl_2246630F8[0], v14, v15, v16, v17);
                              v615 = v527;
                              v616 = v528;
                              v617 = v529;
                              v613 = v525;
                              v614 = v526;
                              v627 = xmmword_224663108;
                              v618 = v530;
                              v725 = 0;
                              v628 = *(_OWORD *)dbl_224663118;
                              if ((v23 & 0x300000030) != 0)
                                sub_223B26C48((uint64_t)&v613, 3, 0, 1, (uint64_t)&v725, (uint64_t)&v627, COERCE_DOUBLE(0x2C00000025), dbl_224663118[0], v14, v15, v16, v17);
                              v623 = v559;
                              v624 = v560;
                              v625 = v561;
                              v621 = v557;
                              v622 = v558;
                              v635 = xmmword_224663128;
                              v626 = v562;
                              v726 = 0;
                              v636 = *(_OWORD *)dbl_224663138;
                              if ((v23 & 0x500000050) != 0)
                                sub_223B26C48((uint64_t)&v621, 3, 1, 0, (uint64_t)&v726, (uint64_t)&v635, COERCE_DOUBLE(0x2700000026), dbl_224663138[0], v14, v15, v16, v17);
                              v631 = v559;
                              v632 = v560;
                              v633 = v561;
                              v629 = v557;
                              v630 = v558;
                              v643 = xmmword_224663148;
                              v634 = v562;
                              v727 = 0;
                              v644 = *(_OWORD *)dbl_224663158;
                              if ((v23 & 0xF000000F0) != 0)
                                sub_223B26C48((uint64_t)&v629, 3, 1, 1, (uint64_t)&v727, (uint64_t)&v643, COERCE_DOUBLE(0x2E00000027), dbl_224663158[0], v14, v15, v16, v17);
                              v639 = v559;
                              v640 = v560;
                              v641 = v561;
                              v637 = v557;
                              v638 = v558;
                              v651 = xmmword_224663168;
                              v642 = v562;
                              v728 = 0;
                              v652 = *(_OWORD *)dbl_224663178;
                              if ((v23 & 0x20) != 0)
                                sub_223B26C48((uint64_t)&v637, 2, 0, 2, (uint64_t)&v728, (uint64_t)&v651, COERCE_DOUBLE(0x2900000028), dbl_224663178[0], v14, v15, v16, v17);
                              v647 = v559;
                              v648 = v560;
                              v649 = v561;
                              v645 = v557;
                              v646 = v558;
                              v659 = xmmword_224663188;
                              v650 = v562;
                              v729 = 0;
                              v660 = *(_OWORD *)dbl_224663198;
                              if ((v23 & 0x1020) != 0)
                                sub_223B26C48((uint64_t)&v645, 2, 0, 3, (uint64_t)&v729, (uint64_t)&v659, COERCE_DOUBLE(0x6000000029), dbl_224663198[0], v14, v15, v16, v17);
                              v655 = v591;
                              v656 = v592;
                              v657 = v593;
                              v653 = v589;
                              v654 = v590;
                              v667 = xmmword_2246631A8;
                              v658 = v594;
                              v730 = 0;
                              v668 = *(_OWORD *)dbl_2246631B8;
                              if ((v23 & 0xA0) != 0)
                                sub_223B26C48((uint64_t)&v653, 2, 1, 2, (uint64_t)&v730, (uint64_t)&v667, COERCE_DOUBLE(0x2B0000002ALL), dbl_2246631B8[0], v14, v15, v16, v17);
                              v663 = v591;
                              v664 = v592;
                              v665 = v593;
                              v661 = v589;
                              v662 = v590;
                              v675 = xmmword_2246631C8;
                              v666 = v594;
                              v731 = 0;
                              v676 = *(_OWORD *)dbl_2246631D8;
                              if ((v23 & 0x50A0) != 0)
                                sub_223B26C48((uint64_t)&v661, 2, 1, 3, (uint64_t)&v731, (uint64_t)&v675, COERCE_DOUBLE(0x620000002BLL), dbl_2246631D8[0], v14, v15, v16, v17);
                              v671 = v591;
                              v672 = v592;
                              v673 = v593;
                              v669 = v589;
                              v670 = v590;
                              v683 = xmmword_2246631E8;
                              v674 = v594;
                              v732[0] = 0;
                              v684 = *(_OWORD *)dbl_2246631F8;
                              if ((v23 & 0x200000020) != 0)
                                sub_223B26C48((uint64_t)&v669, 3, 0, 2, (uint64_t)v732, (uint64_t)&v683, COERCE_DOUBLE(0x2D0000002CLL), dbl_2246631F8[0], v14, v15, v16, v17);
                              v679 = v591;
                              v680 = v592;
                              v681 = v593;
                              v682 = v594;
                              v677 = v589;
                              v678 = v590;
                              sub_223B29E40();
                              goto LABEL_538;
                            }
                            if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
                            {
                              v241 = *(_QWORD *)(v7 + 20984);
                              goto LABEL_272;
                            }
LABEL_547:
                            abort();
                          }
LABEL_280:
                          v242 = v7 + 500;
                          goto LABEL_281;
                        }
LABEL_279:
                        *(_QWORD *)&v306 = v7 + 500;
                        v240 = v312;
                        if ((v312 & 0x80000000) == 0)
                          goto LABEL_269;
                        goto LABEL_280;
                      }
LABEL_278:
                      *((_QWORD *)&v305 + 1) = v7 + 500;
                      v238 = v311;
                      if ((v311 & 0x80000000) == 0)
                        goto LABEL_265;
                      goto LABEL_279;
                    }
LABEL_277:
                    *(_QWORD *)&v305 = v7 + 500;
                    v236 = HIDWORD(v310);
                    if ((v310 & 0x8000000000000000) == 0)
                      goto LABEL_261;
                    goto LABEL_278;
                  }
LABEL_276:
                  v304 = v7 + 500;
                  v234 = v310;
                  if ((v310 & 0x80000000) == 0)
                    goto LABEL_257;
                  goto LABEL_277;
                }
LABEL_275:
                v303 = v7 + 500;
                v232 = HIDWORD(v309);
                if ((v309 & 0x8000000000000000) == 0)
                  goto LABEL_253;
                goto LABEL_276;
              }
            }
            v302 = v7 + 500;
            v230 = v309;
            if ((v309 & 0x80000000) == 0)
              goto LABEL_249;
            goto LABEL_275;
          }
LABEL_232:
          v223 = *(_QWORD *)(v7 + 21104);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v7 + 21112) - v223) >> 4) <= v37)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_547;
            }
            v223 = *(_QWORD *)(v7 + 21104);
          }
          v224 = v223 + 48 * v37;
          v39 = v312;
          v311 = *(_DWORD *)(v224 + 40);
          if ((v312 & 0x80000000) != 0)
            goto LABEL_240;
          goto LABEL_236;
        }
LABEL_42:
        v67 = *(unsigned int *)(v7 + 360);
        if ((v67 & 0x80000000) != 0)
        {
          v308 = 0x8000000080000000;
          v309 = 0x8000000080000000;
          v310 = 0x8000000080000000;
          v24 = 0x80000000;
          v311 = 0x80000000;
        }
        else
        {
          v68 = v280 & 0xFFFFFFF8;
          v69 = HIDWORD(v280) & 0xFFFFFFF8;
          v70 = v281 & 0xFFFFFFF8;
          v71 = *(_QWORD *)(v7 + 368);
          v72 = (_DWORD *)(v71 + 4488 * (v67 & 0xFFFFFFFFCFFFFFFFLL));
          v24 = 0x80000000;
          v73 = (v280 & 0xFFFFFFF8) - *v72;
          if ((v280 & 0xFFFFFFF8) >= *v72)
          {
            v74 = v72[1];
            v75 = __OFSUB__(v69, v74);
            v76 = v69 - v74;
            if (v76 < 0 == v75)
            {
              v77 = v72[2];
              v75 = __OFSUB__(v70, v77);
              v78 = v70 - v77;
              if (v78 < 0 == v75)
              {
                v79 = v72[3];
                if (v68 < v79 && v69 < v72[4] && v70 < v72[5])
                {
                  v80 = v79 - *v72;
                  v24 = *(_DWORD *)(v7 + 360);
                  while (1)
                  {
                    v80 >>= 1;
                    v24 = *(_DWORD *)(v71
                                    + 4488 * (v24 & 0xCFFFFFFF)
                                    + 4 * ((4 * ((v80 & v73) != 0)) | (2 * ((v80 & v76) != 0)) | ((v80 & v78) != 0))
                                    + 24);
                    if (v80 == *(_DWORD *)(v7 + 320) || v24 >> 30)
                      break;
                    v73 -= v80 & v73;
                    v76 -= v80 & v76;
                    v78 -= v80 & v78;
                  }
                }
              }
            }
          }
          LODWORD(v308) = v24;
          v94 = v70 + 8;
          v95 = 0x80000000;
          v96 = v68 - *v72;
          if (v68 >= *v72)
          {
            v97 = v72[1];
            v75 = __OFSUB__(v69, v97);
            v98 = v69 - v97;
            if (v98 < 0 == v75)
            {
              v99 = v72[2];
              v75 = __OFSUB__(v94, v99);
              v100 = v94 - v99;
              if (v100 < 0 == v75)
              {
                v101 = v72[3];
                if (v68 < v101 && v69 < v72[4] && v94 < v72[5])
                {
                  v102 = v101 - *v72;
                  v95 = v67;
                  while (1)
                  {
                    v102 >>= 1;
                    v95 = *(_DWORD *)(v71
                                    + 4488 * (v95 & 0xCFFFFFFF)
                                    + 4
                                    * ((4 * ((v102 & v96) != 0)) | (2 * ((v102 & v98) != 0)) | ((v102 & v100) != 0))
                                    + 24);
                    if (v102 == *(_DWORD *)(v7 + 320) || v95 >> 30)
                      break;
                    v96 -= v102 & v96;
                    v98 -= v102 & v98;
                    v100 -= v102 & v100;
                  }
                }
              }
            }
          }
          HIDWORD(v308) = v95;
          v112 = v69 + 8;
          v113 = 0x80000000;
          v114 = v68 - *v72;
          if (v68 >= *v72)
          {
            v115 = v72[1];
            v75 = __OFSUB__(v112, v115);
            v116 = v112 - v115;
            if (v116 < 0 == v75)
            {
              v117 = v72[2];
              v75 = __OFSUB__(v70, v117);
              v118 = v70 - v117;
              if (v118 < 0 == v75)
              {
                v119 = v72[3];
                if (v68 < v119 && v112 < v72[4] && v70 < v72[5])
                {
                  v120 = v119 - *v72;
                  v113 = v67;
                  while (1)
                  {
                    v120 >>= 1;
                    v113 = *(_DWORD *)(v71
                                     + 4488 * (v113 & 0xCFFFFFFF)
                                     + 4
                                     * ((4 * ((v120 & v114) != 0)) | (2 * ((v120 & v116) != 0)) | ((v120 & v118) != 0))
                                     + 24);
                    if (v120 == *(_DWORD *)(v7 + 320) || v113 >> 30)
                      break;
                    v114 -= v120 & v114;
                    v116 -= v120 & v116;
                    v118 -= v120 & v118;
                  }
                }
              }
            }
          }
          LODWORD(v309) = v113;
          v130 = 0x80000000;
          v131 = v68 - *v72;
          if (v68 >= *v72)
          {
            v132 = v72[1];
            v75 = __OFSUB__(v112, v132);
            v133 = v112 - v132;
            if (v133 < 0 == v75)
            {
              v134 = v72[2];
              v75 = __OFSUB__(v94, v134);
              v135 = v94 - v134;
              if (v135 < 0 == v75)
              {
                v136 = v72[3];
                if (v68 < v136 && v112 < v72[4] && v94 < v72[5])
                {
                  v137 = v136 - *v72;
                  v130 = v67;
                  while (1)
                  {
                    v137 >>= 1;
                    v130 = *(_DWORD *)(v71
                                     + 4488 * (v130 & 0xCFFFFFFF)
                                     + 4
                                     * ((4 * ((v137 & v131) != 0)) | (2 * ((v137 & v133) != 0)) | ((v137 & v135) != 0))
                                     + 24);
                    if (v137 == *(_DWORD *)(v7 + 320) || v130 >> 30)
                      break;
                    v131 -= v137 & v131;
                    v133 -= v137 & v133;
                    v135 -= v137 & v135;
                  }
                }
              }
            }
          }
          HIDWORD(v309) = v130;
          v146 = v68 + 8;
          v147 = 0x80000000;
          v148 = v146 - *v72;
          if (v146 >= *v72)
          {
            v149 = v72[1];
            v75 = __OFSUB__(v69, v149);
            v150 = v69 - v149;
            if (v150 < 0 == v75)
            {
              v151 = v72[2];
              v75 = __OFSUB__(v70, v151);
              v152 = v70 - v151;
              if (v152 < 0 == v75)
              {
                v153 = v72[3];
                if (v146 < v153 && v69 < v72[4] && v70 < v72[5])
                {
                  v154 = v153 - *v72;
                  v147 = v67;
                  while (1)
                  {
                    v154 >>= 1;
                    v147 = *(_DWORD *)(v71
                                     + 4488 * (v147 & 0xCFFFFFFF)
                                     + 4
                                     * ((4 * ((v154 & v148) != 0)) | (2 * ((v154 & v150) != 0)) | ((v154 & v152) != 0))
                                     + 24);
                    if (v154 == *(_DWORD *)(v7 + 320) || v147 >> 30)
                      break;
                    v148 -= v154 & v148;
                    v150 -= v154 & v150;
                    v152 -= v154 & v152;
                  }
                }
              }
            }
          }
          LODWORD(v310) = v147;
          v164 = 0x80000000;
          v165 = v146 - *v72;
          if (v146 >= *v72)
          {
            v166 = v72[1];
            v75 = __OFSUB__(v69, v166);
            v167 = v69 - v166;
            if (v167 < 0 == v75)
            {
              v168 = v72[2];
              v75 = __OFSUB__(v94, v168);
              v169 = v94 - v168;
              if (v169 < 0 == v75)
              {
                v170 = v72[3];
                if (v146 < v170 && v69 < v72[4] && v94 < v72[5])
                {
                  v171 = v170 - *v72;
                  v164 = v67;
                  while (1)
                  {
                    v171 >>= 1;
                    v164 = *(_DWORD *)(v71
                                     + 4488 * (v164 & 0xCFFFFFFF)
                                     + 4
                                     * ((4 * ((v171 & v165) != 0)) | (2 * ((v171 & v167) != 0)) | ((v171 & v169) != 0))
                                     + 24);
                    if (v171 == *(_DWORD *)(v7 + 320) || v164 >> 30)
                      break;
                    v165 -= v171 & v165;
                    v167 -= v171 & v167;
                    v169 -= v171 & v169;
                  }
                }
              }
            }
          }
          HIDWORD(v310) = v164;
          v180 = 0x80000000;
          v181 = v146 - *v72;
          if (v146 >= *v72)
          {
            v182 = v72[1];
            v75 = __OFSUB__(v112, v182);
            v183 = v112 - v182;
            if (v183 < 0 == v75)
            {
              v184 = v72[2];
              v75 = __OFSUB__(v70, v184);
              v185 = v70 - v184;
              if (v185 < 0 == v75)
              {
                v186 = v72[3];
                if (v146 < v186 && v112 < v72[4] && v70 < v72[5])
                {
                  v187 = v186 - *v72;
                  v180 = v67;
                  while (1)
                  {
                    v187 >>= 1;
                    v180 = *(_DWORD *)(v71
                                     + 4488 * (v180 & 0xCFFFFFFF)
                                     + 4
                                     * ((4 * ((v187 & v181) != 0)) | (2 * ((v187 & v183) != 0)) | ((v187 & v185) != 0))
                                     + 24);
                    if (v187 == *(_DWORD *)(v7 + 320) || v180 >> 30)
                      break;
                    v181 -= v187 & v181;
                    v183 -= v187 & v183;
                    v185 -= v187 & v185;
                  }
                }
              }
            }
          }
          v311 = v180;
          v196 = v146 - *v72;
          if (v146 >= *v72)
          {
            v197 = v72[1];
            v75 = __OFSUB__(v112, v197);
            v198 = v112 - v197;
            if (v198 < 0 == v75)
            {
              v199 = v72[2];
              v75 = __OFSUB__(v94, v199);
              v200 = v94 - v199;
              if (v200 < 0 == v75)
              {
                v201 = v72[3];
                if (v146 < v201 && v112 < v72[4] && v94 < v72[5])
                {
                  for (i = v201 - *v72; ; v200 -= i & v200)
                  {
                    i >>= 1;
                    LODWORD(v67) = *(_DWORD *)(v71
                                             + 4488 * (v67 & 0xCFFFFFFF)
                                             + 4
                                             * ((4 * ((i & v196) != 0)) | (2 * ((i & v198) != 0)) | ((i & v200) != 0))
                                             + 24);
                    if (i == *(_DWORD *)(v7 + 320) || v67 >> 30)
                      break;
                    v196 -= i & v196;
                    v198 -= i & v198;
                  }
                  v312 = v67;
                  v25 = v7 + 21056;
                  v26 = v7 + 21056;
                  if ((v24 & 0x80000000) == 0)
                    goto LABEL_208;
LABEL_14:
                  v27 = HIDWORD(v308);
                  LODWORD(v308) = *(_DWORD *)(v26 + 40);
                  v28 = v25;
                  if ((v308 & 0x8000000000000000) != 0)
                    goto LABEL_15;
                  goto LABEL_212;
                }
              }
            }
          }
        }
        v312 = 0x80000000;
        v25 = v7 + 21056;
        v26 = v7 + 21056;
        if ((v24 & 0x80000000) == 0)
          goto LABEL_208;
        goto LABEL_14;
      }
    }
    v23 = 0;
    if ((v18 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_42;
  }
  v278 = *v6;
  v279 = *((_DWORD *)v6 + 2);
  v320 = v278 & 0xFFFFFFF8FFFFFFF8;
  v321 = v279 & 0xFFFFFFF8;
  v40 = sub_223E974E0(v12, (int *)&v320, v307);
  v45 = v40;
  if ((v40 & 0x80000000) != 0)
  {
    v48 = *(unsigned int *)(v7 + 21096);
    if ((v48 & 0x80000000) == 0)
      goto LABEL_27;
LABEL_54:
    v50 = 0;
    if ((v45 & 0x80000000) == 0)
      goto LABEL_31;
LABEL_55:
    v81 = *(unsigned int *)(v7 + 360);
    if ((v81 & 0x80000000) != 0)
    {
      v308 = 0x8000000080000000;
      v309 = 0x8000000080000000;
      v310 = 0x8000000080000000;
      v51 = 0x80000000;
      v311 = 0x80000000;
    }
    else
    {
      v82 = v278 & 0xFFFFFFF8;
      v83 = HIDWORD(v278) & 0xFFFFFFF8;
      v84 = v279 & 0xFFFFFFF8;
      v85 = *(_QWORD *)(v7 + 368);
      v86 = (_DWORD *)(v85 + 4488 * (v81 & 0xFFFFFFFFCFFFFFFFLL));
      v51 = 0x80000000;
      v87 = (v278 & 0xFFFFFFF8) - *v86;
      if ((v278 & 0xFFFFFFF8) >= *v86)
      {
        v88 = v86[1];
        v75 = __OFSUB__(v83, v88);
        v89 = v83 - v88;
        if (v89 < 0 == v75)
        {
          v90 = v86[2];
          v75 = __OFSUB__(v84, v90);
          v91 = v84 - v90;
          if (v91 < 0 == v75)
          {
            v92 = v86[3];
            if (v82 < v92 && v83 < v86[4] && v84 < v86[5])
            {
              v93 = v92 - *v86;
              v51 = *(_DWORD *)(v7 + 360);
              while (1)
              {
                v93 >>= 1;
                v51 = *(_DWORD *)(v85
                                + 4488 * (v51 & 0xCFFFFFFF)
                                + 4 * ((4 * ((v93 & v87) != 0)) | (2 * ((v93 & v89) != 0)) | ((v93 & v91) != 0))
                                + 24);
                if (v93 == *(_DWORD *)(v7 + 320) || v51 >> 30)
                  break;
                v87 -= v93 & v87;
                v89 -= v93 & v89;
                v91 -= v93 & v91;
              }
            }
          }
        }
      }
      LODWORD(v308) = v51;
      v103 = v84 + 8;
      v104 = 0x80000000;
      v105 = v82 - *v86;
      if (v82 >= *v86)
      {
        v106 = v86[1];
        v75 = __OFSUB__(v83, v106);
        v107 = v83 - v106;
        if (v107 < 0 == v75)
        {
          v108 = v86[2];
          v75 = __OFSUB__(v103, v108);
          v109 = v103 - v108;
          if (v109 < 0 == v75)
          {
            v110 = v86[3];
            if (v82 < v110 && v83 < v86[4] && v103 < v86[5])
            {
              v111 = v110 - *v86;
              v104 = v81;
              while (1)
              {
                v111 >>= 1;
                v104 = *(_DWORD *)(v85
                                 + 4488 * (v104 & 0xCFFFFFFF)
                                 + 4
                                 * ((4 * ((v111 & v105) != 0)) | (2 * ((v111 & v107) != 0)) | ((v111 & v109) != 0))
                                 + 24);
                if (v111 == *(_DWORD *)(v7 + 320) || v104 >> 30)
                  break;
                v105 -= v111 & v105;
                v107 -= v111 & v107;
                v109 -= v111 & v109;
              }
            }
          }
        }
      }
      HIDWORD(v308) = v104;
      v121 = v83 + 8;
      v122 = 0x80000000;
      v123 = v82 - *v86;
      if (v82 >= *v86)
      {
        v124 = v86[1];
        v75 = __OFSUB__(v121, v124);
        v125 = v121 - v124;
        if (v125 < 0 == v75)
        {
          v126 = v86[2];
          v75 = __OFSUB__(v84, v126);
          v127 = v84 - v126;
          if (v127 < 0 == v75)
          {
            v128 = v86[3];
            if (v82 < v128 && v121 < v86[4] && v84 < v86[5])
            {
              v129 = v128 - *v86;
              v122 = v81;
              while (1)
              {
                v129 >>= 1;
                v122 = *(_DWORD *)(v85
                                 + 4488 * (v122 & 0xCFFFFFFF)
                                 + 4
                                 * ((4 * ((v129 & v123) != 0)) | (2 * ((v129 & v125) != 0)) | ((v129 & v127) != 0))
                                 + 24);
                if (v129 == *(_DWORD *)(v7 + 320) || v122 >> 30)
                  break;
                v123 -= v129 & v123;
                v125 -= v129 & v125;
                v127 -= v129 & v127;
              }
            }
          }
        }
      }
      LODWORD(v309) = v122;
      v138 = 0x80000000;
      v139 = v82 - *v86;
      if (v82 >= *v86)
      {
        v140 = v86[1];
        v75 = __OFSUB__(v121, v140);
        v141 = v121 - v140;
        if (v141 < 0 == v75)
        {
          v142 = v86[2];
          v75 = __OFSUB__(v103, v142);
          v143 = v103 - v142;
          if (v143 < 0 == v75)
          {
            v144 = v86[3];
            if (v82 < v144 && v121 < v86[4] && v103 < v86[5])
            {
              v145 = v144 - *v86;
              v138 = v81;
              while (1)
              {
                v145 >>= 1;
                v138 = *(_DWORD *)(v85
                                 + 4488 * (v138 & 0xCFFFFFFF)
                                 + 4
                                 * ((4 * ((v145 & v139) != 0)) | (2 * ((v145 & v141) != 0)) | ((v145 & v143) != 0))
                                 + 24);
                if (v145 == *(_DWORD *)(v7 + 320) || v138 >> 30)
                  break;
                v139 -= v145 & v139;
                v141 -= v145 & v141;
                v143 -= v145 & v143;
              }
            }
          }
        }
      }
      HIDWORD(v309) = v138;
      v155 = v82 + 8;
      v156 = 0x80000000;
      v157 = v155 - *v86;
      if (v155 >= *v86)
      {
        v158 = v86[1];
        v75 = __OFSUB__(v83, v158);
        v159 = v83 - v158;
        if (v159 < 0 == v75)
        {
          v160 = v86[2];
          v75 = __OFSUB__(v84, v160);
          v161 = v84 - v160;
          if (v161 < 0 == v75)
          {
            v162 = v86[3];
            if (v155 < v162 && v83 < v86[4] && v84 < v86[5])
            {
              v163 = v162 - *v86;
              v156 = v81;
              while (1)
              {
                v163 >>= 1;
                v156 = *(_DWORD *)(v85
                                 + 4488 * (v156 & 0xCFFFFFFF)
                                 + 4
                                 * ((4 * ((v163 & v157) != 0)) | (2 * ((v163 & v159) != 0)) | ((v163 & v161) != 0))
                                 + 24);
                if (v163 == *(_DWORD *)(v7 + 320) || v156 >> 30)
                  break;
                v157 -= v163 & v157;
                v159 -= v163 & v159;
                v161 -= v163 & v161;
              }
            }
          }
        }
      }
      LODWORD(v310) = v156;
      v172 = 0x80000000;
      v173 = v155 - *v86;
      if (v155 >= *v86)
      {
        v174 = v86[1];
        v75 = __OFSUB__(v83, v174);
        v175 = v83 - v174;
        if (v175 < 0 == v75)
        {
          v176 = v86[2];
          v75 = __OFSUB__(v103, v176);
          v177 = v103 - v176;
          if (v177 < 0 == v75)
          {
            v178 = v86[3];
            if (v155 < v178 && v83 < v86[4] && v103 < v86[5])
            {
              v179 = v178 - *v86;
              v172 = v81;
              while (1)
              {
                v179 >>= 1;
                v172 = *(_DWORD *)(v85
                                 + 4488 * (v172 & 0xCFFFFFFF)
                                 + 4
                                 * ((4 * ((v179 & v173) != 0)) | (2 * ((v179 & v175) != 0)) | ((v179 & v177) != 0))
                                 + 24);
                if (v179 == *(_DWORD *)(v7 + 320) || v172 >> 30)
                  break;
                v173 -= v179 & v173;
                v175 -= v179 & v175;
                v177 -= v179 & v177;
              }
            }
          }
        }
      }
      HIDWORD(v310) = v172;
      v188 = 0x80000000;
      v189 = v155 - *v86;
      if (v155 >= *v86)
      {
        v190 = v86[1];
        v75 = __OFSUB__(v121, v190);
        v191 = v121 - v190;
        if (v191 < 0 == v75)
        {
          v192 = v86[2];
          v75 = __OFSUB__(v84, v192);
          v193 = v84 - v192;
          if (v193 < 0 == v75)
          {
            v194 = v86[3];
            if (v155 < v194 && v121 < v86[4] && v84 < v86[5])
            {
              v195 = v194 - *v86;
              v188 = v81;
              while (1)
              {
                v195 >>= 1;
                v188 = *(_DWORD *)(v85
                                 + 4488 * (v188 & 0xCFFFFFFF)
                                 + 4
                                 * ((4 * ((v195 & v189) != 0)) | (2 * ((v195 & v191) != 0)) | ((v195 & v193) != 0))
                                 + 24);
                if (v195 == *(_DWORD *)(v7 + 320) || v188 >> 30)
                  break;
                v189 -= v195 & v189;
                v191 -= v195 & v191;
                v193 -= v195 & v193;
              }
            }
          }
        }
      }
      v311 = v188;
      v203 = v155 - *v86;
      if (v155 >= *v86)
      {
        v204 = v86[1];
        v75 = __OFSUB__(v121, v204);
        v205 = v121 - v204;
        if (v205 < 0 == v75)
        {
          v206 = v86[2];
          v75 = __OFSUB__(v103, v206);
          v207 = v103 - v206;
          if (v207 < 0 == v75)
          {
            v208 = v86[3];
            if (v155 < v208 && v121 < v86[4] && v103 < v86[5])
            {
              for (j = v208 - *v86; ; v207 -= j & v207)
              {
                j >>= 1;
                LODWORD(v81) = *(_DWORD *)(v85
                                         + 4488 * (v81 & 0xCFFFFFFF)
                                         + 4
                                         * ((4 * ((j & v203) != 0)) | (2 * ((j & v205) != 0)) | ((j & v207) != 0))
                                         + 24);
                if (j == *(_DWORD *)(v7 + 320) || v81 >> 30)
                  break;
                v203 -= j & v203;
                v205 -= j & v205;
              }
              v312 = v81;
              v52 = v7 + 21056;
              v53 = v7 + 21056;
              if ((v51 & 0x80000000) == 0)
                goto LABEL_374;
LABEL_32:
              v54 = HIDWORD(v308);
              LODWORD(v308) = *(_DWORD *)(v53 + 40);
              v55 = v52;
              if ((v308 & 0x8000000000000000) != 0)
                goto LABEL_33;
              goto LABEL_378;
            }
          }
        }
      }
    }
    v312 = 0x80000000;
    v52 = v7 + 21056;
    v53 = v7 + 21056;
    if ((v51 & 0x80000000) == 0)
      goto LABEL_374;
    goto LABEL_32;
  }
  v46 = v40;
  v47 = *(_QWORD *)(v7 + 21104);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v7 + 21112) - v47) >> 4) <= v40)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_548;
    }
    v47 = *(_QWORD *)(v7 + 21104);
  }
  v48 = *(unsigned int *)(v47 + 48 * v46 + 40);
  if ((v48 & 0x80000000) != 0)
    goto LABEL_54;
LABEL_27:
  v49 = *(_QWORD *)(v7 + 21008);
  if (v48 >= (*(_QWORD *)(v7 + 21016) - v49) >> 4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 241, (uint64_t)"block_index < allocated_voxel_masks_.size()", 43, (uint64_t)"Invalid mask index", 18, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_548;
    }
    v49 = *(_QWORD *)(v7 + 21008);
  }
  v50 = *(_QWORD *)(v49 + 16 * v48 + 8);
  if ((v45 & 0x80000000) != 0)
    goto LABEL_55;
LABEL_31:
  v51 = v308;
  v52 = v7 + 21056;
  v53 = v7 + 21056;
  if ((v308 & 0x80000000) != 0)
    goto LABEL_32;
LABEL_374:
  v244 = v51;
  v245 = *(_QWORD *)(v7 + 21104);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v7 + 21112) - v245) >> 4) <= v244)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_548;
    }
    v245 = *(_QWORD *)(v7 + 21104);
  }
  v246 = v245 + 48 * v244;
  v54 = HIDWORD(v308);
  LODWORD(v308) = *(_DWORD *)(v246 + 40);
  v55 = v52;
  if ((v308 & 0x8000000000000000) != 0)
  {
LABEL_33:
    v56 = v309;
    HIDWORD(v308) = *(_DWORD *)(v55 + 40);
    v57 = v52;
    if ((v309 & 0x80000000) != 0)
      goto LABEL_34;
    goto LABEL_382;
  }
LABEL_378:
  v247 = *(_QWORD *)(v7 + 21104);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v7 + 21112) - v247) >> 4) <= v54)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_548;
    }
    v247 = *(_QWORD *)(v7 + 21104);
  }
  v248 = v247 + 48 * v54;
  v56 = v309;
  HIDWORD(v308) = *(_DWORD *)(v248 + 40);
  v57 = v52;
  if ((v309 & 0x80000000) != 0)
  {
LABEL_34:
    v58 = HIDWORD(v309);
    LODWORD(v309) = *(_DWORD *)(v57 + 40);
    v59 = v52;
    if ((v309 & 0x8000000000000000) != 0)
      goto LABEL_35;
    goto LABEL_386;
  }
LABEL_382:
  v249 = *(_QWORD *)(v7 + 21104);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v7 + 21112) - v249) >> 4) <= v56)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_548;
    }
    v249 = *(_QWORD *)(v7 + 21104);
  }
  v250 = v249 + 48 * v56;
  v58 = HIDWORD(v309);
  LODWORD(v309) = *(_DWORD *)(v250 + 40);
  v59 = v52;
  if ((v309 & 0x8000000000000000) != 0)
  {
LABEL_35:
    v60 = v310;
    HIDWORD(v309) = *(_DWORD *)(v59 + 40);
    v61 = v52;
    if ((v310 & 0x80000000) != 0)
      goto LABEL_36;
    goto LABEL_390;
  }
LABEL_386:
  v251 = *(_QWORD *)(v7 + 21104);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v7 + 21112) - v251) >> 4) <= v58)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_548;
    }
    v251 = *(_QWORD *)(v7 + 21104);
  }
  v252 = v251 + 48 * v58;
  v60 = v310;
  HIDWORD(v309) = *(_DWORD *)(v252 + 40);
  v61 = v52;
  if ((v310 & 0x80000000) != 0)
  {
LABEL_36:
    v62 = HIDWORD(v310);
    LODWORD(v310) = *(_DWORD *)(v61 + 40);
    v63 = v52;
    if ((v310 & 0x8000000000000000) != 0)
      goto LABEL_37;
    goto LABEL_394;
  }
LABEL_390:
  v253 = *(_QWORD *)(v7 + 21104);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v7 + 21112) - v253) >> 4) <= v60)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_548;
    }
    v253 = *(_QWORD *)(v7 + 21104);
  }
  v254 = v253 + 48 * v60;
  v62 = HIDWORD(v310);
  LODWORD(v310) = *(_DWORD *)(v254 + 40);
  v63 = v52;
  if ((v310 & 0x8000000000000000) != 0)
  {
LABEL_37:
    v64 = v311;
    HIDWORD(v310) = *(_DWORD *)(v63 + 40);
    v65 = v52;
    if ((v311 & 0x80000000) != 0)
      goto LABEL_38;
LABEL_398:
    v257 = *(_QWORD *)(v7 + 21104);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v7 + 21112) - v257) >> 4) <= v64)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_548;
      }
      v257 = *(_QWORD *)(v7 + 21104);
    }
    v258 = v257 + 48 * v64;
    v66 = v312;
    v311 = *(_DWORD *)(v258 + 40);
    if ((v312 & 0x80000000) != 0)
      goto LABEL_406;
    goto LABEL_402;
  }
LABEL_394:
  v255 = *(_QWORD *)(v7 + 21104);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v7 + 21112) - v255) >> 4) <= v62)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_548;
    }
    v255 = *(_QWORD *)(v7 + 21104);
  }
  v256 = v255 + 48 * v62;
  v64 = v311;
  HIDWORD(v310) = *(_DWORD *)(v256 + 40);
  v65 = v52;
  if ((v311 & 0x80000000) == 0)
    goto LABEL_398;
LABEL_38:
  v66 = v312;
  v311 = *(_DWORD *)(v65 + 40);
  if ((v312 & 0x80000000) != 0)
    goto LABEL_406;
LABEL_402:
  v259 = *(_QWORD *)(v7 + 21104);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v7 + 21112) - v259) >> 4) <= v66)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_548;
    }
    v259 = *(_QWORD *)(v7 + 21104);
  }
  v52 = v259 + 48 * v66;
LABEL_406:
  v260 = v308;
  v312 = *(_DWORD *)(v52 + 40);
  v306 = 0u;
  v305 = 0u;
  if ((v308 & 0x80000000) != 0)
  {
    v301 = v7 + 500;
    v262 = HIDWORD(v308);
    if ((v308 & 0x8000000000000000) == 0)
      goto LABEL_411;
LABEL_440:
    v302 = v7 + 500;
    v264 = v309;
    if ((v309 & 0x80000000) == 0)
      goto LABEL_415;
LABEL_441:
    v303 = v7 + 500;
    v266 = HIDWORD(v309);
    if ((v309 & 0x8000000000000000) == 0)
      goto LABEL_419;
LABEL_442:
    v304 = v7 + 500;
    v268 = v310;
    if ((v310 & 0x80000000) == 0)
      goto LABEL_423;
LABEL_443:
    *(_QWORD *)&v305 = v7 + 500;
    v270 = HIDWORD(v310);
    if ((v310 & 0x8000000000000000) == 0)
      goto LABEL_427;
LABEL_444:
    *((_QWORD *)&v305 + 1) = v7 + 500;
    v272 = v311;
    if ((v311 & 0x80000000) == 0)
      goto LABEL_431;
LABEL_445:
    *(_QWORD *)&v306 = v7 + 500;
    v274 = v312;
    if ((v312 & 0x80000000) == 0)
      goto LABEL_435;
LABEL_446:
    v276 = v7 + 500;
    goto LABEL_447;
  }
  v261 = *(_QWORD *)(v7 + 20984);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v7 + 20992) - v261) >> 12) <= v308)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_548;
    }
    v261 = *(_QWORD *)(v7 + 20984);
  }
  v301 = v261 + 20480 * v260;
  v262 = HIDWORD(v308);
  if ((v308 & 0x8000000000000000) != 0)
    goto LABEL_440;
LABEL_411:
  v263 = *(_QWORD *)(v7 + 20984);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v7 + 20992) - v263) >> 12) <= v262)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_548;
    }
    v263 = *(_QWORD *)(v7 + 20984);
  }
  v302 = v263 + 20480 * v262;
  v264 = v309;
  if ((v309 & 0x80000000) != 0)
    goto LABEL_441;
LABEL_415:
  v265 = *(_QWORD *)(v7 + 20984);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v7 + 20992) - v265) >> 12) <= v264)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_548;
    }
    v265 = *(_QWORD *)(v7 + 20984);
  }
  v303 = v265 + 20480 * v264;
  v266 = HIDWORD(v309);
  if ((v309 & 0x8000000000000000) != 0)
    goto LABEL_442;
LABEL_419:
  v267 = *(_QWORD *)(v7 + 20984);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v7 + 20992) - v267) >> 12) <= v266)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_548;
    }
    v267 = *(_QWORD *)(v7 + 20984);
  }
  v304 = v267 + 20480 * v266;
  v268 = v310;
  if ((v310 & 0x80000000) != 0)
    goto LABEL_443;
LABEL_423:
  v269 = *(_QWORD *)(v7 + 20984);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v7 + 20992) - v269) >> 12) <= v268)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_548;
    }
    v269 = *(_QWORD *)(v7 + 20984);
  }
  *(_QWORD *)&v305 = v269 + 20480 * v268;
  v270 = HIDWORD(v310);
  if ((v310 & 0x8000000000000000) != 0)
    goto LABEL_444;
LABEL_427:
  v271 = *(_QWORD *)(v7 + 20984);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v7 + 20992) - v271) >> 12) <= v270)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_548;
    }
    v271 = *(_QWORD *)(v7 + 20984);
  }
  *((_QWORD *)&v305 + 1) = v271 + 20480 * v270;
  v272 = v311;
  if ((v311 & 0x80000000) != 0)
    goto LABEL_445;
LABEL_431:
  v273 = *(_QWORD *)(v7 + 20984);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v7 + 20992) - v273) >> 12) <= v272)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_548;
    }
    v273 = *(_QWORD *)(v7 + 20984);
  }
  *(_QWORD *)&v306 = v273 + 20480 * v272;
  v274 = v312;
  if ((v312 & 0x80000000) != 0)
    goto LABEL_446;
LABEL_435:
  v275 = *(_QWORD *)(v7 + 20984);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v7 + 20992) - v275) >> 12) <= v274)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      v275 = *(_QWORD *)(v7 + 20984);
      goto LABEL_438;
    }
LABEL_548:
    abort();
  }
LABEL_438:
  v276 = v275 + 20480 * v274;
LABEL_447:
  *((_QWORD *)&v306 + 1) = v276;
  v277 = *(_DWORD *)(v7 + 312);
  v294 = v284;
  v295 = v283;
  v296 = &v282;
  v297 = v7;
  v298 = &v293;
  v299 = &v292;
  v300 = v2;
  v324 = v277;
  v322 = 16;
  v323 = 0;
  v319 = 8;
  *(_QWORD *)&v313 = &v278;
  *((_QWORD *)&v313 + 1) = &v322;
  *(_QWORD *)&v314 = v7 + 460;
  *((_QWORD *)&v314 + 1) = &v301;
  *(_QWORD *)&v315 = &v319;
  *((_QWORD *)&v315 + 1) = &v320;
  *(_QWORD *)&v316 = &v324;
  *((_QWORD *)&v316 + 1) = &v687;
  *(_QWORD *)&v317 = &v686;
  *((_QWORD *)&v317 + 1) = &v685;
  v318 = &v294;
  v688 = 0;
  v331 = xmmword_224662C2C;
  v332 = *(_OWORD *)dbl_224662C3C;
  if ((v50 & 1) != 0)
    sub_223B37328((uint64_t)&v313, 0, 0, 0, (uint64_t)&v688, (uint64_t)&v331, COERCE_DOUBLE(0x100000000), dbl_224662C3C[0], v41, v42, v43, v44);
  v327 = v315;
  v328 = v316;
  v329 = v317;
  v330 = v318;
  v325 = v313;
  v326 = v314;
  v689 = 0;
  v339 = xmmword_224662C88;
  v340 = *(_OWORD *)dbl_224662C98;
  if ((v50 & 3) != 0)
    sub_223B37328((uint64_t)&v325, 0, 0, 1, (uint64_t)&v689, (uint64_t)&v339, COERCE_DOUBLE(0x800000001), dbl_224662C98[0], v41, v42, v43, v44);
  v335 = v315;
  v336 = v316;
  v337 = v317;
  v338 = v318;
  v333 = v313;
  v334 = v314;
  v690 = 0;
  v347 = xmmword_224662CA8;
  v348 = *(_OWORD *)dbl_224662CB8;
  if ((v50 & 5) != 0)
    sub_223B37328((uint64_t)&v333, 0, 1, 0, (uint64_t)&v690, (uint64_t)&v347, COERCE_DOUBLE(0x300000002), dbl_224662CB8[0], v41, v42, v43, v44);
  v343 = v315;
  v344 = v316;
  v345 = v317;
  v346 = v318;
  v341 = v313;
  v342 = v314;
  v691 = 0;
  v355 = xmmword_224662CC8;
  v356 = *(_OWORD *)dbl_224662CD8;
  if ((v50 & 0xF) != 0)
    sub_223B37328((uint64_t)&v341, 0, 1, 1, (uint64_t)&v691, (uint64_t)&v355, COERCE_DOUBLE(0xA00000003), dbl_224662CD8[0], v41, v42, v43, v44);
  v351 = v315;
  v352 = v316;
  v353 = v317;
  v354 = v318;
  v349 = v313;
  v350 = v314;
  v692 = 0;
  v363 = xmmword_224662CE8;
  v364 = *(_OWORD *)dbl_224662CF8;
  if ((v50 & 0x11) != 0)
    sub_223B37328((uint64_t)&v349, 1, 0, 0, (uint64_t)&v692, (uint64_t)&v363, COERCE_DOUBLE(0x500000004), dbl_224662CF8[0], v41, v42, v43, v44);
  v359 = v315;
  v360 = v316;
  v361 = v317;
  v362 = v318;
  v357 = v313;
  v358 = v314;
  v693 = 0;
  v371 = xmmword_224662D08;
  v372 = *(_OWORD *)dbl_224662D18;
  if ((v50 & 0x33) != 0)
    sub_223B37328((uint64_t)&v357, 1, 0, 1, (uint64_t)&v693, (uint64_t)&v371, COERCE_DOUBLE(0xC00000005), dbl_224662D18[0], v41, v42, v43, v44);
  v367 = v315;
  v368 = v316;
  v369 = v317;
  v370 = v318;
  v365 = v313;
  v366 = v314;
  v694 = 0;
  v379 = xmmword_224662D28;
  v380 = *(_OWORD *)dbl_224662D38;
  if ((v50 & 0x55) != 0)
    sub_223B37328((uint64_t)&v365, 1, 1, 0, (uint64_t)&v694, (uint64_t)&v379, COERCE_DOUBLE(0x700000006), dbl_224662D38[0], v41, v42, v43, v44);
  v375 = v315;
  v376 = v316;
  v377 = v317;
  v378 = v318;
  v373 = v313;
  v374 = v314;
  v695 = 0;
  v387 = xmmword_224662D48;
  v388 = *(_OWORD *)dbl_224662D58;
  if ((_BYTE)v50)
    sub_223B37328((uint64_t)&v373, 1, 1, 1, (uint64_t)&v695, (uint64_t)&v387, COERCE_DOUBLE(0xE00000007), dbl_224662D58[0], v41, v42, v43, v44);
  v383 = v315;
  v384 = v316;
  v385 = v317;
  v381 = v313;
  v382 = v314;
  v395 = xmmword_224662D68;
  v386 = v318;
  v696 = 0;
  v396 = *(_OWORD *)dbl_224662D78;
  if ((v50 & 2) != 0)
    sub_223B37328((uint64_t)&v381, 0, 0, 2, (uint64_t)&v696, (uint64_t)&v395, COERCE_DOUBLE(0x900000008), dbl_224662D78[0], v41, v42, v43, v44);
  v391 = v315;
  v392 = v316;
  v393 = v317;
  v389 = v313;
  v390 = v314;
  v403 = xmmword_224662D88;
  v394 = v318;
  v697 = 0;
  v404 = *(_OWORD *)dbl_224662D98;
  if ((v50 & 0x102) != 0)
    sub_223B37328((uint64_t)&v389, 0, 0, 3, (uint64_t)&v697, (uint64_t)&v403, COERCE_DOUBLE(0x4000000009), dbl_224662D98[0], v41, v42, v43, v44);
  v399 = v335;
  v400 = v336;
  v401 = v337;
  v397 = v333;
  v398 = v334;
  v411 = xmmword_224662DA8;
  v402 = v338;
  v698 = 0;
  v412 = *(_OWORD *)dbl_224662DB8;
  if ((v50 & 0xA) != 0)
    sub_223B37328((uint64_t)&v397, 0, 1, 2, (uint64_t)&v698, (uint64_t)&v411, COERCE_DOUBLE(0xB0000000ALL), dbl_224662DB8[0], v41, v42, v43, v44);
  v407 = v335;
  v408 = v336;
  v409 = v337;
  v405 = v333;
  v406 = v334;
  v419 = xmmword_224662DC8;
  v410 = v338;
  v699 = 0;
  v420 = *(_OWORD *)dbl_224662DD8;
  if ((v50 & 0x50A) != 0)
    sub_223B37328((uint64_t)&v405, 0, 1, 3, (uint64_t)&v699, (uint64_t)&v419, COERCE_DOUBLE(0x420000000BLL), dbl_224662DD8[0], v41, v42, v43, v44);
  v415 = v335;
  v416 = v336;
  v417 = v337;
  v413 = v333;
  v414 = v334;
  v427 = xmmword_224662DE8;
  v418 = v338;
  v700 = 0;
  v428 = *(_OWORD *)dbl_224662DF8;
  if ((v50 & 0x22) != 0)
    sub_223B37328((uint64_t)&v413, 1, 0, 2, (uint64_t)&v700, (uint64_t)&v427, COERCE_DOUBLE(0xD0000000CLL), dbl_224662DF8[0], v41, v42, v43, v44);
  v423 = v335;
  v424 = v336;
  v425 = v337;
  v421 = v333;
  v422 = v334;
  v435 = xmmword_224662E08;
  v426 = v338;
  v701 = 0;
  v436 = *(_OWORD *)dbl_224662E18;
  if ((v50 & 0x1122) != 0)
    sub_223B37328((uint64_t)&v421, 1, 0, 3, (uint64_t)&v701, (uint64_t)&v435, COERCE_DOUBLE(0x440000000DLL), dbl_224662E18[0], v41, v42, v43, v44);
  v431 = v367;
  v432 = v368;
  v433 = v369;
  v429 = v365;
  v430 = v366;
  v443 = xmmword_224662E28;
  v434 = v370;
  v702 = 0;
  v444 = *(_OWORD *)dbl_224662E38;
  if ((v50 & 0xAA) != 0)
    sub_223B37328((uint64_t)&v429, 1, 1, 2, (uint64_t)&v702, (uint64_t)&v443, COERCE_DOUBLE(0xF0000000ELL), dbl_224662E38[0], v41, v42, v43, v44);
  v439 = v367;
  v440 = v368;
  v441 = v369;
  v437 = v365;
  v438 = v366;
  v451 = xmmword_224662E48;
  v442 = v370;
  v703 = 0;
  v452 = *(_OWORD *)dbl_224662E58;
  if ((v50 & 0x55AA) != 0)
    sub_223B37328((uint64_t)&v437, 1, 1, 3, (uint64_t)&v703, (uint64_t)&v451, COERCE_DOUBLE(0x460000000FLL), dbl_224662E58[0], v41, v42, v43, v44);
  v447 = v367;
  v448 = v368;
  v449 = v369;
  v445 = v365;
  v446 = v366;
  v459 = xmmword_224662E68;
  v450 = v370;
  v704 = 0;
  v460 = *(_OWORD *)dbl_224662E78;
  if ((v50 & 4) != 0)
    sub_223B37328((uint64_t)&v445, 0, 2, 0, (uint64_t)&v704, (uint64_t)&v459, COERCE_DOUBLE(0x1100000010), dbl_224662E78[0], v41, v42, v43, v44);
  v455 = v367;
  v456 = v368;
  v457 = v369;
  v453 = v365;
  v454 = v366;
  v467 = xmmword_224662E88;
  v458 = v370;
  v705 = 0;
  v468 = *(_OWORD *)dbl_224662E98;
  if ((v50 & 0xC) != 0)
    sub_223B37328((uint64_t)&v453, 0, 2, 1, (uint64_t)&v705, (uint64_t)&v467, COERCE_DOUBLE(0x1800000011), dbl_224662E98[0], v41, v42, v43, v44);
  v463 = v399;
  v464 = v400;
  v465 = v401;
  v461 = v397;
  v462 = v398;
  v475 = xmmword_224662EA8;
  v466 = v402;
  v706 = 0;
  v476 = *(_OWORD *)dbl_224662EB8;
  if ((v50 & 0x10004) != 0)
    sub_223B37328((uint64_t)&v461, 0, 3, 0, (uint64_t)&v706, (uint64_t)&v475, COERCE_DOUBLE(0x1300000012), dbl_224662EB8[0], v41, v42, v43, v44);
  v471 = v399;
  v472 = v400;
  v473 = v401;
  v469 = v397;
  v470 = v398;
  v483 = xmmword_224662EC8;
  v474 = v402;
  v707 = 0;
  v484 = *(_OWORD *)dbl_224662ED8;
  if ((v50 & 0x3000C) != 0)
    sub_223B37328((uint64_t)&v469, 0, 3, 1, (uint64_t)&v707, (uint64_t)&v483, COERCE_DOUBLE(0x1A00000013), dbl_224662ED8[0], v41, v42, v43, v44);
  v479 = v399;
  v480 = v400;
  v481 = v401;
  v477 = v397;
  v478 = v398;
  v491 = xmmword_224662EE8;
  v482 = v402;
  v708 = 0;
  v492 = *(_OWORD *)dbl_224662EF8;
  if ((v50 & 0x44) != 0)
    sub_223B37328((uint64_t)&v477, 1, 2, 0, (uint64_t)&v708, (uint64_t)&v491, COERCE_DOUBLE(0x1500000014), dbl_224662EF8[0], v41, v42, v43, v44);
  v487 = v399;
  v488 = v400;
  v489 = v401;
  v485 = v397;
  v486 = v398;
  v499 = xmmword_224662F08;
  v490 = v402;
  v709 = 0;
  v500 = *(_OWORD *)dbl_224662F18;
  if ((v50 & 0xCC) != 0)
    sub_223B37328((uint64_t)&v485, 1, 2, 1, (uint64_t)&v709, (uint64_t)&v499, COERCE_DOUBLE(0x1C00000015), dbl_224662F18[0], v41, v42, v43, v44);
  v495 = v431;
  v496 = v432;
  v497 = v433;
  v493 = v429;
  v494 = v430;
  v507 = xmmword_224662F28;
  v498 = v434;
  v710 = 0;
  v508 = *(_OWORD *)dbl_224662F38;
  if ((v50 & 0x110044) != 0)
    sub_223B37328((uint64_t)&v493, 1, 3, 0, (uint64_t)&v710, (uint64_t)&v507, COERCE_DOUBLE(0x1700000016), dbl_224662F38[0], v41, v42, v43, v44);
  v503 = v431;
  v504 = v432;
  v505 = v433;
  v501 = v429;
  v502 = v430;
  v515 = xmmword_224662F48;
  v506 = v434;
  v711 = 0;
  v516 = *(_OWORD *)dbl_224662F58;
  if ((v50 & 0x3300CC) != 0)
    sub_223B37328((uint64_t)&v501, 1, 3, 1, (uint64_t)&v711, (uint64_t)&v515, COERCE_DOUBLE(0x1E00000017), dbl_224662F58[0], v41, v42, v43, v44);
  v511 = v431;
  v512 = v432;
  v513 = v433;
  v509 = v429;
  v510 = v430;
  v523 = xmmword_224662F68;
  v514 = v434;
  v712 = 0;
  v524 = *(_OWORD *)dbl_224662F78;
  if ((v50 & 8) != 0)
    sub_223B37328((uint64_t)&v509, 0, 2, 2, (uint64_t)&v712, (uint64_t)&v523, COERCE_DOUBLE(0x1900000018), dbl_224662F78[0], v41, v42, v43, v44);
  v519 = v431;
  v520 = v432;
  v521 = v433;
  v517 = v429;
  v518 = v430;
  v531 = xmmword_224662F88;
  v522 = v434;
  v713 = 0;
  v532 = *(_OWORD *)dbl_224662F98;
  if ((v50 & 0x408) != 0)
    sub_223B37328((uint64_t)&v517, 0, 2, 3, (uint64_t)&v713, (uint64_t)&v531, COERCE_DOUBLE(0x5000000019), dbl_224662F98[0], v41, v42, v43, v44);
  v527 = v463;
  v528 = v464;
  v529 = v465;
  v525 = v461;
  v526 = v462;
  v539 = xmmword_224662FA8;
  v530 = v466;
  v714 = 0;
  v540 = *(_OWORD *)dbl_224662FB8;
  if ((v50 & 0x20008) != 0)
    sub_223B37328((uint64_t)&v525, 0, 3, 2, (uint64_t)&v714, (uint64_t)&v539, COERCE_DOUBLE(0x1B0000001ALL), dbl_224662FB8[0], v41, v42, v43, v44);
  v535 = v463;
  v536 = v464;
  v537 = v465;
  v533 = v461;
  v534 = v462;
  v547 = xmmword_224662FC8;
  v538 = v466;
  v715 = 0;
  v548 = *(_OWORD *)dbl_224662FD8;
  if ((v50 & 0x1020408) != 0)
    sub_223B37328((uint64_t)&v533, 0, 3, 3, (uint64_t)&v715, (uint64_t)&v547, COERCE_DOUBLE(0x520000001BLL), dbl_224662FD8[0], v41, v42, v43, v44);
  v543 = v463;
  v544 = v464;
  v545 = v465;
  v541 = v461;
  v542 = v462;
  v555 = xmmword_224662FE8;
  v546 = v466;
  v716 = 0;
  v556 = *(_OWORD *)dbl_224662FF8;
  if ((v50 & 0x88) != 0)
    sub_223B37328((uint64_t)&v541, 1, 2, 2, (uint64_t)&v716, (uint64_t)&v555, COERCE_DOUBLE(0x1D0000001CLL), dbl_224662FF8[0], v41, v42, v43, v44);
  v551 = v463;
  v552 = v464;
  v553 = v465;
  v549 = v461;
  v550 = v462;
  v563 = xmmword_224663008;
  v554 = v466;
  v717 = 0;
  v564 = *(_OWORD *)dbl_224663018;
  if ((v50 & 0x4488) != 0)
    sub_223B37328((uint64_t)&v549, 1, 2, 3, (uint64_t)&v717, (uint64_t)&v563, COERCE_DOUBLE(0x540000001DLL), dbl_224663018[0], v41, v42, v43, v44);
  v559 = v495;
  v560 = v496;
  v561 = v497;
  v557 = v493;
  v558 = v494;
  v571 = xmmword_224663028;
  v562 = v498;
  v718 = 0;
  v572 = *(_OWORD *)dbl_224663038;
  if ((v50 & 0x220088) != 0)
    sub_223B37328((uint64_t)&v557, 1, 3, 2, (uint64_t)&v718, (uint64_t)&v571, COERCE_DOUBLE(0x1F0000001ELL), dbl_224663038[0], v41, v42, v43, v44);
  v567 = v495;
  v568 = v496;
  v569 = v497;
  v565 = v493;
  v566 = v494;
  v579 = xmmword_224663048;
  v570 = v498;
  v719 = 0;
  v580 = *(_OWORD *)dbl_224663058;
  if ((v50 & 0x11224488) != 0)
    sub_223B37328((uint64_t)&v565, 1, 3, 3, (uint64_t)&v719, (uint64_t)&v579, COERCE_DOUBLE(0x560000001FLL), dbl_224663058[0], v41, v42, v43, v44);
  v575 = v495;
  v576 = v496;
  v577 = v497;
  v573 = v493;
  v574 = v494;
  v587 = xmmword_224663068;
  v578 = v498;
  v720 = 0;
  v588 = *(_OWORD *)dbl_224663078;
  if ((v50 & 0x10) != 0)
    sub_223B37328((uint64_t)&v573, 2, 0, 0, (uint64_t)&v720, (uint64_t)&v587, COERCE_DOUBLE(0x2100000020), dbl_224663078[0], v41, v42, v43, v44);
  v583 = v495;
  v584 = v496;
  v585 = v497;
  v581 = v493;
  v582 = v494;
  v595 = xmmword_224663088;
  v586 = v498;
  v721 = 0;
  v596 = *(_OWORD *)dbl_224663098;
  if ((v50 & 0x30) != 0)
    sub_223B37328((uint64_t)&v581, 2, 0, 1, (uint64_t)&v721, (uint64_t)&v595, COERCE_DOUBLE(0x2800000021), dbl_224663098[0], v41, v42, v43, v44);
  v591 = v527;
  v592 = v528;
  v593 = v529;
  v589 = v525;
  v590 = v526;
  v603 = xmmword_2246630A8;
  v594 = v530;
  v722 = 0;
  v604 = *(_OWORD *)dbl_2246630B8;
  if ((v50 & 0x50) != 0)
    sub_223B37328((uint64_t)&v589, 2, 1, 0, (uint64_t)&v722, (uint64_t)&v603, COERCE_DOUBLE(0x2300000022), dbl_2246630B8[0], v41, v42, v43, v44);
  v599 = v527;
  v600 = v528;
  v601 = v529;
  v597 = v525;
  v598 = v526;
  v611 = xmmword_2246630C8;
  v602 = v530;
  v723 = 0;
  v612 = *(_OWORD *)dbl_2246630D8;
  if ((v50 & 0xF0) != 0)
    sub_223B37328((uint64_t)&v597, 2, 1, 1, (uint64_t)&v723, (uint64_t)&v611, COERCE_DOUBLE(0x2A00000023), dbl_2246630D8[0], v41, v42, v43, v44);
  v607 = v527;
  v608 = v528;
  v609 = v529;
  v605 = v525;
  v606 = v526;
  v619 = xmmword_2246630E8;
  v610 = v530;
  v724 = 0;
  v620 = *(_OWORD *)dbl_2246630F8;
  if ((v50 & 0x100000010) != 0)
    sub_223B37328((uint64_t)&v605, 3, 0, 0, (uint64_t)&v724, (uint64_t)&v619, COERCE_DOUBLE(0x2500000024), dbl_2246630F8[0], v41, v42, v43, v44);
  v615 = v527;
  v616 = v528;
  v617 = v529;
  v613 = v525;
  v614 = v526;
  v627 = xmmword_224663108;
  v618 = v530;
  v725 = 0;
  v628 = *(_OWORD *)dbl_224663118;
  if ((v50 & 0x300000030) != 0)
    sub_223B37328((uint64_t)&v613, 3, 0, 1, (uint64_t)&v725, (uint64_t)&v627, COERCE_DOUBLE(0x2C00000025), dbl_224663118[0], v41, v42, v43, v44);
  v623 = v559;
  v624 = v560;
  v625 = v561;
  v621 = v557;
  v622 = v558;
  v635 = xmmword_224663128;
  v626 = v562;
  v726 = 0;
  v636 = *(_OWORD *)dbl_224663138;
  if ((v50 & 0x500000050) != 0)
    sub_223B37328((uint64_t)&v621, 3, 1, 0, (uint64_t)&v726, (uint64_t)&v635, COERCE_DOUBLE(0x2700000026), dbl_224663138[0], v41, v42, v43, v44);
  v631 = v559;
  v632 = v560;
  v633 = v561;
  v629 = v557;
  v630 = v558;
  v643 = xmmword_224663148;
  v634 = v562;
  v727 = 0;
  v644 = *(_OWORD *)dbl_224663158;
  if ((v50 & 0xF000000F0) != 0)
    sub_223B37328((uint64_t)&v629, 3, 1, 1, (uint64_t)&v727, (uint64_t)&v643, COERCE_DOUBLE(0x2E00000027), dbl_224663158[0], v41, v42, v43, v44);
  v639 = v559;
  v640 = v560;
  v641 = v561;
  v637 = v557;
  v638 = v558;
  v651 = xmmword_224663168;
  v642 = v562;
  v728 = 0;
  v652 = *(_OWORD *)dbl_224663178;
  if ((v50 & 0x20) != 0)
    sub_223B37328((uint64_t)&v637, 2, 0, 2, (uint64_t)&v728, (uint64_t)&v651, COERCE_DOUBLE(0x2900000028), dbl_224663178[0], v41, v42, v43, v44);
  v647 = v559;
  v648 = v560;
  v649 = v561;
  v645 = v557;
  v646 = v558;
  v659 = xmmword_224663188;
  v650 = v562;
  v729 = 0;
  v660 = *(_OWORD *)dbl_224663198;
  if ((v50 & 0x1020) != 0)
    sub_223B37328((uint64_t)&v645, 2, 0, 3, (uint64_t)&v729, (uint64_t)&v659, COERCE_DOUBLE(0x6000000029), dbl_224663198[0], v41, v42, v43, v44);
  v655 = v591;
  v656 = v592;
  v657 = v593;
  v653 = v589;
  v654 = v590;
  v667 = xmmword_2246631A8;
  v658 = v594;
  v730 = 0;
  v668 = *(_OWORD *)dbl_2246631B8;
  if ((v50 & 0xA0) != 0)
    sub_223B37328((uint64_t)&v653, 2, 1, 2, (uint64_t)&v730, (uint64_t)&v667, COERCE_DOUBLE(0x2B0000002ALL), dbl_2246631B8[0], v41, v42, v43, v44);
  v663 = v591;
  v664 = v592;
  v665 = v593;
  v661 = v589;
  v662 = v590;
  v675 = xmmword_2246631C8;
  v666 = v594;
  v731 = 0;
  v676 = *(_OWORD *)dbl_2246631D8;
  if ((v50 & 0x50A0) != 0)
    sub_223B37328((uint64_t)&v661, 2, 1, 3, (uint64_t)&v731, (uint64_t)&v675, COERCE_DOUBLE(0x620000002BLL), dbl_2246631D8[0], v41, v42, v43, v44);
  v671 = v591;
  v672 = v592;
  v673 = v593;
  v669 = v589;
  v670 = v590;
  v683 = xmmword_2246631E8;
  v674 = v594;
  v732[0] = 0;
  v684 = *(_OWORD *)dbl_2246631F8;
  if ((v50 & 0x200000020) != 0)
    sub_223B37328((uint64_t)&v669, 3, 0, 2, (uint64_t)v732, (uint64_t)&v683, COERCE_DOUBLE(0x2D0000002CLL), dbl_2246631F8[0], v41, v42, v43, v44);
  v679 = v591;
  v680 = v592;
  v681 = v593;
  v682 = v594;
  v677 = v589;
  v678 = v590;
  sub_223B39B04();
LABEL_538:
  if ((_QWORD)v288)
    operator delete(__p);
  if ((_QWORD)v291)
    operator delete(v289);
}

void sub_223B10D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a24)
  {
    operator delete(__p);
    if (!a29)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!a29)
  {
    goto LABEL_3;
  }
  operator delete(a26);
  _Unwind_Resume(exception_object);
}

void sub_223B10DAC(uint64_t a1, int32x2_t *a2, int a3, uint64_t *a4, uint64_t a5, __n128 a6, float32x4_t a7, double a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, int8x16_t a12, int8x16_t a13)
{
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t *v43;
  float32x4_t *v44;
  uint64_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x2_t v48;
  float32x2_t v49;
  char *v50;
  unint64_t v51;
  int v52;
  __int128 v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  BOOL v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  BOOL v68;
  char *v69;
  char *v70;
  char *v71;
  __int128 v72;
  char *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  float32x4_t v81;
  float32x4_t v82;
  BOOL v83;
  uint64_t v84;
  float32x4_t v85;
  int v86;
  int v87;
  int v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  unsigned int v92;
  uint64_t v93;
  int32x2_t *v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  void *v98;
  void *v99;
  uint64_t v101;
  uint64_t v102;
  char *v104;
  unsigned __int32 v105;
  __n128 v106;
  uint64_t *v107;
  float v109;
  char *v110;
  float v111;
  uint64_t v112;
  float32x2_t v113;
  float32x2_t v114;
  unsigned int v115;
  float32x2_t v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  void *__p[3];
  __int128 v124;
  void *v125;
  __int128 v126;
  __int128 v127;
  __int16 **v128;
  __int16 **v129;
  void *v130;
  __int128 v131;
  int32x2_t *v132;
  int *v133;
  unsigned __int8 *v134;
  unsigned __int8 *v135;
  char **v136;
  char *v137;
  unsigned __int8 *v138;
  __int16 *v139;
  int32x2_t *v140;
  int *v141;
  unsigned __int8 *v142;
  unsigned __int8 *v143;
  char **v144;
  unsigned __int8 *v145;
  __int16 v146;
  char v147;
  char v148;
  unsigned __int8 v149;
  unsigned __int8 v150;
  unsigned __int8 v151;
  uint64_t v152;
  __int32 v153;
  uint64_t v154;
  __int32 v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  unint64_t v160;
  unint64_t v161;
  int v162;
  char v163;
  char v164;
  char v165;
  char v166;
  uint64_t v167;

  v167 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
  *(_QWORD *)(a5 + 40) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 80) = *(_QWORD *)(a5 + 72);
  v102 = a5 + 112;
  *(_QWORD *)(a5 + 120) = *(_QWORD *)(a5 + 112);
  *(_QWORD *)(a5 + 152) = *(_QWORD *)(a5 + 144);
  *(_QWORD *)(a5 + 184) = *(_QWORD *)(a5 + 176);
  *(_QWORD *)(a5 + 216) = *(_QWORD *)(a5 + 208);
  v101 = a5 + 240;
  *(_QWORD *)(a5 + 248) = *(_QWORD *)(a5 + 240);
  *(_QWORD *)(a5 + 288) = *(_QWORD *)(a5 + 280);
  *(_QWORD *)(a5 + 328) = *(_QWORD *)(a5 + 320);
  if (*(_BYTE *)(a5 + 380))
    *(_BYTE *)(a5 + 380) = 0;
  v162 = 9;
  v159 = 0;
  v160 = 0;
  v161 = 0;
  v17 = *(int *)(a1 + 21348);
  if (v17 > 4)
  {
    v111 = 1.0;
    v117 = 0;
    v15.i32[0] = 0;
    v115 = 0;
    v13.i32[0] = 1.0;
    a6.n128_u32[0] = 0;
    v106 = a6;
    v109 = 1.0;
    v14.i32[0] = 0;
    a6.n128_u32[0] = 0;
  }
  else
  {
    v117 = dword_224666CA8[v17];
    v111 = flt_224666CBC[v17];
    v15.i32[0] = dword_224666CD0[v17];
    v115 = dword_224666CE4[v17];
    v13.i32[0] = dword_224666CF8[v17];
    a6.n128_u32[0] = dword_224666D0C[v17];
    v106 = a6;
    v109 = flt_224666D20[v17];
    v14.i32[0] = dword_224666D34[v17];
    a6.n128_u32[0] = dword_224666D48[v17];
  }
  v105 = a6.n128_u32[0];
  v156 = 0;
  v157 = 0;
  v158 = 0;
  a6.n128_u32[0] = *(_DWORD *)(a1 + 312);
  *(float32x2_t *)a7.f32 = vcvt_f32_s32(*a2);
  a7.f32[2] = (float)a2[1].i32[0];
  v18 = vmulq_n_f32(a7, a6.n128_f32[0]);
  a6.n128_f32[0] = a6.n128_f32[0] * 9.0;
  v153 = v18.i32[2];
  v152 = v18.i64[0];
  v19 = vaddq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)a6.n128_u64[0], 0), v18);
  v155 = v19.i32[2];
  v154 = v19.i64[0];
  if (v17 >= 4)
  {
    v20 = 0;
    v151 = 2;
  }
  else
  {
    v151 = 0x1010000u >> (8 * v17);
    v20 = (v151 + 1) & 3;
  }
  v150 = v20;
  if (v20 == 2)
    v21 = 0;
  else
    v21 = v20 + 1;
  v149 = v21;
  v148 = 0;
  v22 = *a4;
  v23 = a4[1];
  if (*a4 == v23)
  {
    v25 = 0;
    goto LABEL_50;
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  while (1)
  {
    v28 = *(_QWORD *)(v22 + 88);
    if (!v28)
      goto LABEL_16;
    v19.i32[0] = 0;
    sub_223E99E04((uint64_t)&v152, v28, (uint64_t)&v130, v19, a9, a10, a11, a12, a13);
    if (!(_DWORD)v130)
      goto LABEL_16;
    if ((_DWORD)v130 == 2)
      break;
    if (v25 >= v24)
    {
      v29 = v25 - v26;
      v30 = (v25 - v26) >> 2;
      v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 62)
        sub_22316E078();
      if ((v24 - v26) >> 1 > v31)
        v31 = (v24 - v26) >> 1;
      if ((unint64_t)(v24 - v26) >= 0x7FFFFFFFFFFFFFFCLL)
        v32 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v32 = v31;
      if (v32)
      {
        if (v32 >> 62)
          sub_223174E94();
        v33 = (char *)operator new(4 * v32);
        v34 = v25;
        v35 = &v33[4 * v30];
        *(_DWORD *)v35 = v27;
        v25 = v35 + 4;
        v36 = v34 - v26;
        if (v34 == v26)
          goto LABEL_35;
LABEL_32:
        v37 = v36 - 4;
        if (v37 < 0xBC)
        {
          v38 = v34;
          goto LABEL_34;
        }
        v40 = (v34 - 4 - v26) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v33[v29 - 4 - v40] > &v33[v29 - 4])
        {
          v38 = v34;
          goto LABEL_34;
        }
        if (&v34[-v40 - 4] > v34 - 4)
        {
          v38 = v34;
          goto LABEL_34;
        }
        if ((unint64_t)(v34 - v33 - v29) < 0x20)
        {
          v38 = v34;
          goto LABEL_34;
        }
        v41 = (v37 >> 2) + 1;
        v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
        v38 = &v34[-v42];
        v35 -= v42;
        v43 = (float32x4_t *)&v33[4 * v30 - 16];
        v44 = (float32x4_t *)(v34 - 16);
        v45 = v41 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v19 = *v44;
          v43[-1] = v44[-1];
          *v43 = v19;
          v43 -= 2;
          v44 -= 2;
          v45 -= 8;
        }
        while (v45);
        if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
        {
          do
          {
LABEL_34:
            v39 = *((_DWORD *)v38 - 1);
            v38 -= 4;
            *((_DWORD *)v35 - 1) = v39;
            v35 -= 4;
          }
          while (v38 != v26);
        }
      }
      else
      {
        v34 = v25;
        v33 = 0;
        v35 = (char *)(4 * v30);
        *(_DWORD *)(4 * v30) = v27;
        v25 = (char *)(4 * v30 + 4);
        v36 = v34 - v26;
        if (v34 != v26)
          goto LABEL_32;
      }
LABEL_35:
      v24 = &v33[4 * v32];
      v156 = v35;
      v157 = v25;
      v158 = v24;
      if (v26)
        operator delete(v26);
      v26 = v35;
      goto LABEL_15;
    }
    *(_DWORD *)v25 = v27;
    v25 += 4;
LABEL_15:
    v157 = v25;
LABEL_16:
    v22 += 360;
    ++v27;
    if (v22 == v23)
      goto LABEL_50;
  }
  v148 = 1;
  v157 = v26;
  v25 = v26;
LABEL_50:
  v147 = 0;
  v104 = v156;
  v146 = v156 != v25;
  if (v156 != v25)
  {
    v46.i64[0] = __PAIR64__(LODWORD(v111), v117);
    v47.i64[1] = v106.n128_i64[1];
    v116 = (float32x2_t)__PAIR64__(v106.n128_u32[0], v115);
    v48 = vmla_f32(vmul_f32((float32x2_t)__PAIR64__(v105, LODWORD(v109)), 0), 0, (float32x2_t)__PAIR64__(LODWORD(v111), v117));
    v14.f32[0] = v14.f32[0] * 0.0;
    v49 = vmla_f32(v14, 0, v15);
    v50 = v156;
    do
    {
      v112 = *a4;
      v51 = v160;
      v52 = v162;
      v110 = v50;
      v118 = *(_DWORD *)v50;
      if (v160 < v161)
      {
        DWORD1(v53) = 0;
        *(_OWORD *)(v160 + 16) = 0u;
        *(_OWORD *)(v51 + 32) = 0u;
        v54 = (v52 * v52);
        *(_OWORD *)v51 = 0u;
        if ((_DWORD)v54)
        {
          sub_2231DC564((char **)v51, (v52 * v52));
          v54 = (v52 * v52);
          v55 = *(_QWORD *)(v51 + 24);
          v56 = (*(_QWORD *)(v51 + 32) - v55) >> 2;
          v57 = v54 >= v56;
          if (v54 > v56)
          {
            sub_223B252B0(v51 + 24, v54 - v56);
LABEL_69:
            v62 = v51 + 64;
            goto LABEL_88;
          }
        }
        else
        {
          v55 = 0;
          v57 = 1;
        }
        if (!v57)
          *(_QWORD *)(v51 + 32) = v55 + 4 * v54;
        goto LABEL_69;
      }
      v58 = (uint64_t)(v160 - (_QWORD)v159) >> 6;
      if ((unint64_t)(v58 + 1) >> 58)
        sub_22316E078();
      v59 = (uint64_t)(v161 - (_QWORD)v159) >> 5;
      if (v59 <= v58 + 1)
        v59 = v58 + 1;
      if (v161 - (unint64_t)v159 >= 0x7FFFFFFFFFFFFFC0)
        v60 = 0x3FFFFFFFFFFFFFFLL;
      else
        v60 = v59;
      v133 = (int *)&v161;
      if (v60)
      {
        if (v60 >> 58)
          sub_223174E94();
        v61 = (char *)operator new(v60 << 6);
      }
      else
      {
        v61 = 0;
      }
      v63 = &v61[64 * v58];
      v130 = v61;
      *(_QWORD *)&v131 = v63;
      *((_QWORD *)&v131 + 1) = v63;
      v132 = (int32x2_t *)&v61[64 * v60];
      v107 = (uint64_t *)(v63 + 24);
      v64 = (v52 * v52);
      DWORD1(v53) = 0;
      *(_OWORD *)v63 = 0u;
      *((_OWORD *)v63 + 1) = 0u;
      *((_OWORD *)v63 + 2) = 0u;
      v65 = v61;
      if ((_DWORD)v64)
      {
        sub_2231DC564((char **)&v61[64 * v58], (v52 * v52));
        v64 = (v52 * v52);
        v66 = *v107;
        v67 = (*(_QWORD *)&v65[64 * v58 + 32] - *v107) >> 2;
        v68 = v64 >= v67;
        if (v64 > v67)
        {
          sub_223B252B0((uint64_t)v107, v64 - v67);
          goto LABEL_77;
        }
      }
      else
      {
        v66 = 0;
        v68 = 1;
      }
      if (!v68)
        *((_QWORD *)v63 + 4) = v66 + 4 * v64;
LABEL_77:
      v69 = (char *)v131;
      v62 = *((_QWORD *)&v131 + 1) + 64;
      v70 = v159;
      v71 = (char *)v160;
      if ((char *)v160 != v159)
      {
        do
        {
          *((_QWORD *)v69 - 8) = 0;
          *((_QWORD *)v69 - 7) = 0;
          v69 -= 64;
          *((_QWORD *)v69 + 2) = 0;
          v72 = *((_OWORD *)v71 - 4);
          v71 -= 64;
          *(_OWORD *)v69 = v72;
          *((_QWORD *)v69 + 2) = *((_QWORD *)v71 + 2);
          *(_QWORD *)v71 = 0;
          *((_QWORD *)v71 + 1) = 0;
          *((_QWORD *)v71 + 2) = 0;
          *((_QWORD *)v69 + 3) = 0;
          *((_QWORD *)v69 + 4) = 0;
          *((_QWORD *)v69 + 5) = 0;
          *(_OWORD *)(v69 + 24) = *(_OWORD *)(v71 + 24);
          *((_QWORD *)v69 + 5) = *((_QWORD *)v71 + 5);
          *((_QWORD *)v71 + 3) = 0;
          *((_QWORD *)v71 + 4) = 0;
          *((_QWORD *)v71 + 5) = 0;
          v53 = *((_OWORD *)v71 + 3);
          *((_OWORD *)v69 + 3) = v53;
        }
        while (v71 != v70);
        v71 = v159;
        v73 = (char *)v160;
        v159 = v69;
        v160 = v62;
        v161 = (unint64_t)v132;
        while (v73 != v71)
        {
          v74 = (void *)*((_QWORD *)v73 - 5);
          if (v74)
          {
            *((_QWORD *)v73 - 4) = v74;
            operator delete(v74);
          }
          v75 = (void *)*((_QWORD *)v73 - 8);
          if (v75)
          {
            *((_QWORD *)v73 - 7) = v75;
            operator delete(v75);
          }
          v73 -= 64;
        }
        if (!v71)
          goto LABEL_88;
LABEL_87:
        operator delete(v71);
        goto LABEL_88;
      }
      v159 = (char *)v131;
      v160 = *((_QWORD *)&v131 + 1) + 64;
      v161 = (unint64_t)v132;
      if (v71)
        goto LABEL_87;
LABEL_88:
      v160 = v62;
      v76 = v112 + 360 * v118;
      v78 = *(_QWORD *)(v76 + 88);
      v77 = (uint64_t *)(v76 + 88);
      LODWORD(v53) = *(_DWORD *)(v78 + 96);
      v46.f32[0] = *(float *)&v53 + *(float *)(v78 + 100);
      *(float32x2_t *)v47.f32 = vmla_n_f32(v48, v116, v46.f32[0]);
      v113 = vmla_f32(v49, *(float32x2_t *)v46.f32, v13);
      LODWORD(v131) = v113.i32[0];
      v130 = (void *)v47.i64[0];
      v79 = v151;
      v119 = v47.i64[0];
      *(_DWORD *)(v62 - 16) = *((_DWORD *)&v130 + v151);
      v80 = (v47.i32[0] & 0x7FFFFFFFu) < 0x7F800000;
      if ((v47.i32[0] & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        v80 = (HIDWORD(v130) & 0x7FFFFFFFu) < 0x7F800000;
        if ((HIDWORD(v130) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          v80 = (v131 & 0x7FFFFFFF) < 0x7F800000;
      }
      if (!v80)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.h", 173, (uint64_t)"math::IsFinite(pos)", 19, (uint64_t)"Converting nan value to voxel position", 38, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v79 = v151;
        LODWORD(v53) = *(_DWORD *)(*v77 + 96);
      }
      v81.i64[0] = v119;
      *(float32x2_t *)&v81.u32[2] = v113;
      v82 = vmulq_n_f32(v81, *(float *)(a1 + 316));
      v139 = (__int16 *)vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v82.f32));
      LODWORD(v140) = vcvtms_s32_f32(v82.f32[2]);
      *(_DWORD *)(v62 - 4) = *((_DWORD *)&v139 + v79);
      *(float32x2_t *)v81.f32 = vmla_n_f32(v48, v116, *(float *)&v53);
      v114 = vmla_f32(v49, *(float32x2_t *)&v53, v13);
      LODWORD(v140) = v114.i32[0];
      v139 = (__int16 *)v81.i64[0];
      v120 = v81.i64[0];
      *(_DWORD *)(v62 - 12) = *((_DWORD *)&v139 + v79);
      v83 = (v81.i32[0] & 0x7FFFFFFFu) < 0x7F800000;
      if ((v81.i32[0] & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        v83 = (HIDWORD(v139) & 0x7FFFFFFFu) < 0x7F800000;
        if ((HIDWORD(v139) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          v83 = (v140 & 0x7FFFFFFF) < 0x7F800000;
      }
      if (!v83)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.h", 173, (uint64_t)"math::IsFinite(pos)", 19, (uint64_t)"Converting nan value to voxel position", 38, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v79 = v151;
      }
      v84 = v120;
      *(float32x2_t *)&v46.u32[2] = v114;
      v85 = vmulq_n_f32(v46, *(float *)(a1 + 316));
      *(int32x2_t *)v46.f32 = vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v85.f32));
      v125 = (void *)v46.i64[0];
      LODWORD(v126) = vcvtms_s32_f32(v85.f32[2]);
      *(_DWORD *)(v62 - 8) = *((_DWORD *)&v125 + v79);
      v121 = v162;
      if (v162)
      {
        v86 = 0;
        v87 = v162;
LABEL_103:
        v88 = 0;
        do
        {
          v125 = (void *)*a2;
          LODWORD(v126) = a2[1].i32[0];
          *((_DWORD *)&v125 + v150) += v88;
          *((_DWORD *)&v125 + v149) += v86;
          v85.i32[0] = *(_DWORD *)(a1 + 312);
          *(float32x2_t *)v46.f32 = vcvt_f32_s32((int32x2_t)v125);
          v46.f32[2] = (float)(int)v126;
          v89 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v85.f32, 0);
          v90 = vmulq_n_f32(v46, v85.f32[0]);
          LODWORD(__p[1]) = v90.i32[2];
          __p[0] = (void *)v90.i64[0];
          *((float *)__p + v151) = (float)(*(float *)(*v77 + 96)
                                         + (float)(*(float *)(*v77 + 96) + *(float *)(*v77 + 100)))
                                 * 0.5;
          LODWORD(v131) = __p[1];
          v130 = __p[0];
          v91 = vaddq_f32(v89, *(float32x4_t *)__p);
          HIDWORD(v131) = v91.i32[2];
          *(_QWORD *)((char *)&v131 + 4) = v91.i64[0];
          v91.i32[0] = 0;
          sub_223E99E04((uint64_t)&v130, *v77, (uint64_t)&v139, v91, v47, a10, a11, a12, a13);
          if ((_DWORD)v139)
          {
            v92 = v88 + v86 * v162;
            *(_DWORD *)(*(_QWORD *)(v62 - 40) + 4 * v92) = (_DWORD)v139;
            if ((_DWORD)v139 == 1)
            {
              v93 = *(_QWORD *)(v62 - 64) + 12 * v92;
              v94 = v140;
              *(_DWORD *)(v93 + 8) = (_DWORD)v141;
              *(_QWORD *)v93 = v94;
            }
          }
          ++v88;
        }
        while (v87 != v88);
        while (++v86 != v121)
        {
          v87 = v162;
          if (v162)
            goto LABEL_103;
        }
      }
      v50 = v110 + 4;
    }
    while (v110 + 4 != v25);
  }
  v139 = &v146;
  v140 = a2;
  v141 = &v162;
  v142 = &v149;
  v143 = &v150;
  v144 = &v159;
  v145 = &v151;
  v130 = (void *)a1;
  *(_QWORD *)&v131 = &v148;
  *((_QWORD *)&v131 + 1) = &v146;
  v132 = a2;
  v133 = &v162;
  v134 = &v149;
  v135 = &v150;
  v136 = &v159;
  v137 = &v147;
  v138 = &v151;
  v129 = &v139;
  v128 = &v139;
  sub_22339E3C8(a5, 0x190uLL);
  sub_223674C80(a5 + 320, 0x190uLL);
  *(_DWORD *)(a5 + 352) = 1;
  sub_22339E528(v102, 0x320uLL);
  sub_223674E10(v101, 0x320uLL);
  *(_DWORD *)(a5 + 272) = 2;
  sub_223674E10(a5 + 280, 0x320uLL);
  *(_DWORD *)(a5 + 312) = 2;
  v125 = &unk_2245C5160;
  v126 = 0u;
  v127 = 0u;
  __p[0] = &unk_2245C5160;
  *(_OWORD *)&__p[1] = 0u;
  v124 = 0u;
  sub_223B26AA0((char **)&v125, (char *)0x1FF);
  if ((char *)__p[2] + *((_QWORD *)&v124 + 1) <= (void *)0x31)
    sub_223B26AA0((char **)__p, (char *)0x3F);
  if (a3)
  {
    v165 = 0;
    v166 = 0;
    sub_223B11D80();
  }
  else
  {
    v163 = 0;
    v164 = 0;
    sub_223B17640();
  }
  if ((_QWORD)v124)
    operator delete(__p[0]);
  if ((_QWORD)v127)
    operator delete(v125);
  if (v104)
    operator delete(v104);
  v95 = (unint64_t)v159;
  if (v159)
  {
    v96 = v160;
    v97 = v159;
    if ((char *)v160 != v159)
    {
      do
      {
        v98 = *(void **)(v96 - 40);
        if (v98)
        {
          *(_QWORD *)(v96 - 32) = v98;
          operator delete(v98);
        }
        v99 = *(void **)(v96 - 64);
        if (v99)
        {
          *(_QWORD *)(v96 - 56) = v99;
          operator delete(v99);
        }
        v96 -= 64;
      }
      while (v96 != v95);
      v97 = v159;
    }
    v160 = v95;
    operator delete(v97);
  }
}

void sub_223B11C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v14;
  char *v16;
  char *v17;
  char *v18;
  void *v19;
  void *v20;

  if (STACK[0x368])
    operator delete((void *)STACK[0x350]);
  if (STACK[0x390])
    operator delete((void *)STACK[0x378]);
  if (a14)
  {
    *(_QWORD *)(v14 - 216) = a14;
    operator delete(a14);
    v16 = *(char **)(v14 - 200);
    if (!v16)
LABEL_7:
      _Unwind_Resume(a1);
  }
  else
  {
    v16 = *(char **)(v14 - 200);
    if (!v16)
      goto LABEL_7;
  }
  v17 = *(char **)(v14 - 192);
  v18 = v16;
  if (v17 != v16)
  {
    do
    {
      v19 = (void *)*((_QWORD *)v17 - 5);
      if (v19)
      {
        *((_QWORD *)v17 - 4) = v19;
        operator delete(v19);
      }
      v20 = (void *)*((_QWORD *)v17 - 8);
      if (v20)
      {
        *((_QWORD *)v17 - 7) = v20;
        operator delete(v20);
      }
      v17 -= 64;
    }
    while (v17 != v16);
    v18 = *(char **)(v14 - 200);
  }
  *(_QWORD *)(v14 - 192) = v16;
  operator delete(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_223B11D80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 *v6;
  __int128 *v7;
  _DWORD *v8;
  unsigned int v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  double v14;
  double v15;
  uint64_t v16;
  signed int v17;
  signed int v18;
  signed int v19;
  uint64_t v20;
  _DWORD *v21;
  signed int v22;
  signed int v23;
  int v24;
  BOOL v26;
  signed int v27;
  BOOL v28;
  BOOL v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  int v37;
  int v38;
  signed int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  signed int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  signed int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  unsigned int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int i;
  int v91;
  int v92;
  int v93;
  uint64_t j;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  double v130;
  double v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  double v136;
  double v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  double v142;
  double v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  double v148;
  double v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  double v154;
  double v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  double v160;
  double v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  double v166;
  double v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  double v172;
  double v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  double v178;
  double v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  double v184;
  double v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  double v190;
  double v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  double v196;
  double v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  double v202;
  double v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  double v208;
  double v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  double v214;
  double v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  double v220;
  double v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  double v226;
  double v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  double v232;
  double v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  double v238;
  double v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  double v244;
  double v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  double v250;
  double v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  double v256;
  double v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  double v262;
  double v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  double v268;
  double v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  double v274;
  double v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  double v280;
  double v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  double v286;
  double v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  double v292;
  double v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  double v298;
  double v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  double v304;
  double v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  double v310;
  double v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  double v316;
  double v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v321;
  double v322;
  double v323;
  float32x4_t v324;
  float32x4_t v325;
  float32x4_t v326;
  float32x4_t v327;
  double v328;
  double v329;
  float32x4_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  double v334;
  double v335;
  float32x4_t v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v339;
  double v340;
  double v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  double v346;
  double v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t v350;
  float32x4_t v351;
  double v352;
  double v353;
  float32x4_t v354;
  float32x4_t v355;
  float32x4_t v356;
  float32x4_t v357;
  double v358;
  double v359;
  float32x4_t v360;
  float32x4_t v361;
  float32x4_t v362;
  float32x4_t v363;
  double v364;
  double v365;
  float32x4_t v366;
  float32x4_t v367;
  float32x4_t v368;
  float32x4_t v369;
  double v370;
  double v371;
  float32x4_t v372;
  float32x4_t v373;
  float32x4_t v374;
  float32x4_t v375;
  double v376;
  double v377;
  float32x4_t v378;
  float32x4_t v379;
  float32x4_t v380;
  float32x4_t v381;
  double v382;
  double v383;
  float32x4_t v384;
  float32x4_t v385;
  float32x4_t v386;
  float32x4_t v387;
  double v388;
  double v389;
  float32x4_t v390;
  float32x4_t v391;
  float32x4_t v392;
  float32x4_t v393;
  double v394;
  double v395;
  float32x4_t v396;
  float32x4_t v397;
  float32x4_t v398;
  float32x4_t v399;
  double v400;
  double v401;
  float32x4_t v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x4_t v405;
  double v406;
  double v407;
  float32x4_t v408;
  float32x4_t v409;
  float32x4_t v410;
  float32x4_t v411;
  double v412;
  double v413;
  float32x4_t v414;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  double v418;
  double v419;
  float32x4_t v420;
  float32x4_t v421;
  float32x4_t v422;
  float32x4_t v423;
  double v424;
  double v425;
  float32x4_t v426;
  float32x4_t v427;
  float32x4_t v428;
  float32x4_t v429;
  double v430;
  double v431;
  float32x4_t v432;
  float32x4_t v433;
  float32x4_t v434;
  float32x4_t v435;
  double v436;
  double v437;
  float32x4_t v438;
  float32x4_t v439;
  float32x4_t v440;
  float32x4_t v441;
  double v442;
  double v443;
  float32x4_t v444;
  float32x4_t v445;
  float32x4_t v446;
  float32x4_t v447;
  double v448;
  double v449;
  float32x4_t v450;
  float32x4_t v451;
  float32x4_t v452;
  float32x4_t v453;
  double v454;
  double v455;
  float32x4_t v456;
  float32x4_t v457;
  float32x4_t v458;
  float32x4_t v459;
  double v460;
  double v461;
  float32x4_t v462;
  float32x4_t v463;
  float32x4_t v464;
  float32x4_t v465;
  double v466;
  double v467;
  float32x4_t v468;
  float32x4_t v469;
  float32x4_t v470;
  float32x4_t v471;
  double v472;
  double v473;
  float32x4_t v474;
  float32x4_t v475;
  float32x4_t v476;
  float32x4_t v477;
  double v478;
  double v479;
  float32x4_t v480;
  float32x4_t v481;
  float32x4_t v482;
  float32x4_t v483;
  double v484;
  double v485;
  float32x4_t v486;
  float32x4_t v487;
  float32x4_t v488;
  float32x4_t v489;
  double v490;
  double v491;
  float32x4_t v492;
  float32x4_t v493;
  float32x4_t v494;
  float32x4_t v495;
  double v496;
  double v497;
  float32x4_t v498;
  float32x4_t v499;
  float32x4_t v500;
  float32x4_t v501;
  double v502;
  double v503;
  float32x4_t v504;
  float32x4_t v505;
  float32x4_t v506;
  float32x4_t v507;
  double v508;
  double v509;
  float32x4_t v510;
  float32x4_t v511;
  float32x4_t v512;
  float32x4_t v513;
  double v514;
  double v515;
  float32x4_t v516;
  float32x4_t v517;
  float32x4_t v518;
  float32x4_t v519;
  double v520;
  double v521;
  float32x4_t v522;
  float32x4_t v523;
  float32x4_t v524;
  float32x4_t v525;
  double v526;
  double v527;
  float32x4_t v528;
  float32x4_t v529;
  float32x4_t v530;
  float32x4_t v531;
  double v532;
  double v533;
  float32x4_t v534;
  float32x4_t v535;
  float32x4_t v536;
  float32x4_t v537;
  double v538;
  double v539;
  float32x4_t v540;
  float32x4_t v541;
  float32x4_t v542;
  float32x4_t v543;
  double v544;
  double v545;
  float32x4_t v546;
  float32x4_t v547;
  float32x4_t v548;
  float32x4_t v549;
  double v550;
  double v551;
  float32x4_t v552;
  float32x4_t v553;
  float32x4_t v554;
  float32x4_t v555;
  double v556;
  double v557;
  float32x4_t v558;
  float32x4_t v559;
  float32x4_t v560;
  float32x4_t v561;
  double v562;
  double v563;
  float32x4_t v564;
  float32x4_t v565;
  float32x4_t v566;
  float32x4_t v567;
  double v568;
  double v569;
  float32x4_t v570;
  float32x4_t v571;
  float32x4_t v572;
  float32x4_t v573;
  double v574;
  double v575;
  float32x4_t v576;
  float32x4_t v577;
  float32x4_t v578;
  float32x4_t v579;
  double v580;
  double v581;
  float32x4_t v582;
  float32x4_t v583;
  float32x4_t v584;
  float32x4_t v585;
  double v586;
  double v587;
  float32x4_t v588;
  float32x4_t v589;
  float32x4_t v590;
  float32x4_t v591;
  double v592;
  double v593;
  float32x4_t v594;
  float32x4_t v595;
  float32x4_t v596;
  float32x4_t v597;
  double v598;
  double v599;
  float32x4_t v600;
  float32x4_t v601;
  float32x4_t v602;
  float32x4_t v603;
  double v604;
  double v605;
  float32x4_t v606;
  float32x4_t v607;
  float32x4_t v608;
  float32x4_t v609;
  double v610;
  double v611;
  float32x4_t v612;
  float32x4_t v613;
  float32x4_t v614;
  float32x4_t v615;
  double v616;
  double v617;
  float32x4_t v618;
  float32x4_t v619;
  float32x4_t v620;
  float32x4_t v621;
  double v622;
  double v623;
  float32x4_t v624;
  float32x4_t v625;
  float32x4_t v626;
  float32x4_t v627;
  double v628;
  double v629;
  float32x4_t v630;
  float32x4_t v631;
  float32x4_t v632;
  float32x4_t v633;
  double v634;
  double v635;
  float32x4_t v636;
  float32x4_t v637;
  float32x4_t v638;
  float32x4_t v639;
  double v640;
  double v641;
  float32x4_t v642;
  float32x4_t v643;
  float32x4_t v644;
  float32x4_t v645;
  double v646;
  double v647;
  float32x4_t v648;
  float32x4_t v649;
  float32x4_t v650;
  float32x4_t v651;
  double v652;
  double v653;
  float32x4_t v654;
  float32x4_t v655;
  float32x4_t v656;
  float32x4_t v657;
  double v658;
  double v659;
  float32x4_t v660;
  float32x4_t v661;
  float32x4_t v662;
  float32x4_t v663;
  double v664;
  double v665;
  float32x4_t v666;
  float32x4_t v667;
  float32x4_t v668;
  float32x4_t v669;
  double v670;
  double v671;
  float32x4_t v672;
  float32x4_t v673;
  float32x4_t v674;
  float32x4_t v675;
  double v676;
  double v677;
  float32x4_t v678;
  float32x4_t v679;
  float32x4_t v680;
  float32x4_t v681;
  double v682;
  double v683;
  float32x4_t v684;
  float32x4_t v685;
  float32x4_t v686;
  float32x4_t v687;
  double v688;
  double v689;
  float32x4_t v690;
  float32x4_t v691;
  float32x4_t v692;
  float32x4_t v693;
  double v694;
  double v695;
  float32x4_t v696;
  float32x4_t v697;
  float32x4_t v698;
  float32x4_t v699;
  double v700;
  double v701;
  float32x4_t v702;
  float32x4_t v703;
  float32x4_t v704;
  float32x4_t v705;
  double v706;
  double v707;
  float32x4_t v708;
  float32x4_t v709;
  float32x4_t v710;
  float32x4_t v711;
  double v712;
  double v713;
  float32x4_t v714;
  float32x4_t v715;
  float32x4_t v716;
  float32x4_t v717;
  double v718;
  double v719;
  float32x4_t v720;
  float32x4_t v721;
  float32x4_t v722;
  float32x4_t v723;
  double v724;
  double v725;
  float32x4_t v726;
  float32x4_t v727;
  float32x4_t v728;
  float32x4_t v729;
  double v730;
  double v731;
  float32x4_t v732;
  float32x4_t v733;
  float32x4_t v734;
  float32x4_t v735;
  double v736;
  double v737;
  float32x4_t v738;
  float32x4_t v739;
  float32x4_t v740;
  float32x4_t v741;
  double v742;
  double v743;
  float32x4_t v744;
  float32x4_t v745;
  float32x4_t v746;
  float32x4_t v747;
  double v748;
  double v749;
  float32x4_t v750;
  float32x4_t v751;
  float32x4_t v752;
  float32x4_t v753;
  double v754;
  double v755;
  float32x4_t v756;
  float32x4_t v757;
  float32x4_t v758;
  float32x4_t v759;
  double v760;
  double v761;
  float32x4_t v762;
  float32x4_t v763;
  float32x4_t v764;
  float32x4_t v765;
  double v766;
  double v767;
  float32x4_t v768;
  float32x4_t v769;
  float32x4_t v770;
  float32x4_t v771;
  double v772;
  double v773;
  float32x4_t v774;
  float32x4_t v775;
  float32x4_t v776;
  float32x4_t v777;
  double v778;
  double v779;
  float32x4_t v780;
  float32x4_t v781;
  float32x4_t v782;
  float32x4_t v783;
  double v784;
  double v785;
  float32x4_t v786;
  float32x4_t v787;
  float32x4_t v788;
  float32x4_t v789;
  double v790;
  double v791;
  float32x4_t v792;
  float32x4_t v793;
  float32x4_t v794;
  float32x4_t v795;
  double v796;
  double v797;
  float32x4_t v798;
  float32x4_t v799;
  float32x4_t v800;
  float32x4_t v801;
  double v802;
  double v803;
  float32x4_t v804;
  float32x4_t v805;
  float32x4_t v806;
  float32x4_t v807;
  double v808;
  double v809;
  float32x4_t v810;
  float32x4_t v811;
  float32x4_t v812;
  float32x4_t v813;
  double v814;
  double v815;
  float32x4_t v816;
  float32x4_t v817;
  float32x4_t v818;
  float32x4_t v819;
  double v820;
  double v821;
  float32x4_t v822;
  float32x4_t v823;
  float32x4_t v824;
  float32x4_t v825;
  double v826;
  double v827;
  float32x4_t v828;
  float32x4_t v829;
  float32x4_t v830;
  float32x4_t v831;
  double v832;
  double v833;
  float32x4_t v834;
  float32x4_t v835;
  float32x4_t v836;
  float32x4_t v837;
  double v838;
  double v839;
  float32x4_t v840;
  float32x4_t v841;
  float32x4_t v842;
  float32x4_t v843;
  double v844;
  double v845;
  float32x4_t v846;
  float32x4_t v847;
  float32x4_t v848;
  float32x4_t v849;
  double v850;
  double v851;
  float32x4_t v852;
  float32x4_t v853;
  float32x4_t v854;
  float32x4_t v855;
  double v856;
  double v857;
  float32x4_t v858;
  float32x4_t v859;
  float32x4_t v860;
  float32x4_t v861;
  double v862;
  double v863;
  float32x4_t v864;
  float32x4_t v865;
  float32x4_t v866;
  float32x4_t v867;
  double v868;
  double v869;
  float32x4_t v870;
  float32x4_t v871;
  float32x4_t v872;
  float32x4_t v873;
  double v874;
  double v875;
  float32x4_t v876;
  float32x4_t v877;
  float32x4_t v878;
  float32x4_t v879;
  double v880;
  double v881;
  float32x4_t v882;
  float32x4_t v883;
  float32x4_t v884;
  float32x4_t v885;
  double v886;
  double v887;
  float32x4_t v888;
  float32x4_t v889;
  float32x4_t v890;
  float32x4_t v891;
  double v892;
  double v893;
  float32x4_t v894;
  float32x4_t v895;
  float32x4_t v896;
  float32x4_t v897;
  double v898;
  double v899;
  float32x4_t v900;
  float32x4_t v901;
  float32x4_t v902;
  float32x4_t v903;
  double v904;
  double v905;
  float32x4_t v906;
  float32x4_t v907;
  float32x4_t v908;
  float32x4_t v909;
  double v910;
  double v911;
  float32x4_t v912;
  float32x4_t v913;
  float32x4_t v914;
  float32x4_t v915;
  double v916;
  double v917;
  float32x4_t v918;
  float32x4_t v919;
  float32x4_t v920;
  float32x4_t v921;
  double v922;
  double v923;
  float32x4_t v924;
  float32x4_t v925;
  float32x4_t v926;
  float32x4_t v927;
  double v928;
  double v929;
  float32x4_t v930;
  float32x4_t v931;
  float32x4_t v932;
  float32x4_t v933;
  double v934;
  double v935;
  float32x4_t v936;
  float32x4_t v937;
  float32x4_t v938;
  float32x4_t v939;
  double v940;
  double v941;
  float32x4_t v942;
  float32x4_t v943;
  float32x4_t v944;
  float32x4_t v945;
  double v946;
  double v947;
  float32x4_t v948;
  float32x4_t v949;
  float32x4_t v950;
  float32x4_t v951;
  double v952;
  double v953;
  float32x4_t v954;
  float32x4_t v955;
  float32x4_t v956;
  float32x4_t v957;
  double v958;
  double v959;
  float32x4_t v960;
  float32x4_t v961;
  float32x4_t v962;
  float32x4_t v963;
  double v964;
  double v965;
  float32x4_t v966;
  float32x4_t v967;
  float32x4_t v968;
  float32x4_t v969;
  double v970;
  double v971;
  float32x4_t v972;
  float32x4_t v973;
  float32x4_t v974;
  float32x4_t v975;
  double v976;
  double v977;
  float32x4_t v978;
  float32x4_t v979;
  float32x4_t v980;
  float32x4_t v981;
  double v982;
  double v983;
  float32x4_t v984;
  float32x4_t v985;
  float32x4_t v986;
  float32x4_t v987;
  double v988;
  double v989;
  float32x4_t v990;
  float32x4_t v991;
  float32x4_t v992;
  float32x4_t v993;
  double v994;
  double v995;
  float32x4_t v996;
  float32x4_t v997;
  float32x4_t v998;
  float32x4_t v999;
  double v1000;
  double v1001;
  float32x4_t v1002;
  float32x4_t v1003;
  float32x4_t v1004;
  float32x4_t v1005;
  double v1006;
  double v1007;
  float32x4_t v1008;
  float32x4_t v1009;
  float32x4_t v1010;
  float32x4_t v1011;
  double v1012;
  double v1013;
  float32x4_t v1014;
  float32x4_t v1015;
  float32x4_t v1016;
  float32x4_t v1017;
  double v1018;
  double v1019;
  float32x4_t v1020;
  float32x4_t v1021;
  float32x4_t v1022;
  float32x4_t v1023;
  double v1024;
  double v1025;
  float32x4_t v1026;
  float32x4_t v1027;
  float32x4_t v1028;
  float32x4_t v1029;
  double v1030;
  double v1031;
  float32x4_t v1032;
  float32x4_t v1033;
  float32x4_t v1034;
  float32x4_t v1035;
  double v1036;
  double v1037;
  float32x4_t v1038;
  float32x4_t v1039;
  float32x4_t v1040;
  float32x4_t v1041;
  double v1042;
  double v1043;
  float32x4_t v1044;
  float32x4_t v1045;
  float32x4_t v1046;
  float32x4_t v1047;
  double v1048;
  double v1049;
  float32x4_t v1050;
  float32x4_t v1051;
  float32x4_t v1052;
  float32x4_t v1053;
  double v1054;
  double v1055;
  float32x4_t v1056;
  float32x4_t v1057;
  float32x4_t v1058;
  float32x4_t v1059;
  double v1060;
  double v1061;
  float32x4_t v1062;
  float32x4_t v1063;
  float32x4_t v1064;
  float32x4_t v1065;
  double v1066;
  double v1067;
  float32x4_t v1068;
  float32x4_t v1069;
  float32x4_t v1070;
  float32x4_t v1071;
  double v1072;
  double v1073;
  float32x4_t v1074;
  float32x4_t v1075;
  float32x4_t v1076;
  float32x4_t v1077;
  double v1078;
  double v1079;
  float32x4_t v1080;
  float32x4_t v1081;
  float32x4_t v1082;
  float32x4_t v1083;
  double v1084;
  double v1085;
  float32x4_t v1086;
  float32x4_t v1087;
  float32x4_t v1088;
  float32x4_t v1089;
  double v1090;
  double v1091;
  float32x4_t v1092;
  float32x4_t v1093;
  float32x4_t v1094;
  float32x4_t v1095;
  double v1096;
  double v1097;
  float32x4_t v1098;
  float32x4_t v1099;
  float32x4_t v1100;
  float32x4_t v1101;
  double v1102;
  double v1103;
  uint64_t v1105;
  uint64_t v1106;
  _OWORD *v1107;
  uint64_t v1108;
  uint64_t v1109;
  _DWORD *v1110;
  uint64_t v1111;
  _OWORD v1112[3];
  uint64_t v1113;
  _OWORD v1114[5];
  _OWORD v1115[4];
  uint64_t v1116;
  _OWORD v1117[4];
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  __int128 v1123;
  __int128 v1124;
  unsigned int v1125[13];
  unint64_t v1126;
  unint64_t v1127;
  unint64_t v1128;
  unsigned int v1129;
  unsigned int v1130;
  __int128 v1131;
  __int128 v1132;
  __int128 v1133;
  __int128 v1134;
  __int128 v1135;
  __int128 v1136;
  __int128 v1137;
  char v1138;
  char v1139;
  uint64_t v1140;
  int v1141;
  uint64_t v1142;
  _OWORD v1143[7];
  _OWORD v1144[2];
  _OWORD v1145[7];
  _OWORD v1146[2];
  __int128 v1147;
  __int128 v1148;
  __int128 v1149;
  __int128 v1150;
  __int128 v1151;
  __int128 v1152;
  __int128 v1153;
  _OWORD v1154[2];
  _OWORD v1155[7];
  _OWORD v1156[2];
  _OWORD v1157[7];
  _OWORD v1158[2];
  _OWORD v1159[7];
  _OWORD v1160[2];
  _OWORD v1161[7];
  _OWORD v1162[2];
  _OWORD v1163[7];
  _OWORD v1164[2];
  __int128 v1165;
  __int128 v1166;
  __int128 v1167;
  __int128 v1168;
  __int128 v1169;
  __int128 v1170;
  __int128 v1171;
  _OWORD v1172[2];
  _OWORD v1173[7];
  _OWORD v1174[2];
  _OWORD v1175[7];
  _OWORD v1176[2];
  _OWORD v1177[7];
  _OWORD v1178[2];
  _OWORD v1179[7];
  _OWORD v1180[2];
  _OWORD v1181[7];
  _OWORD v1182[2];
  __int128 v1183;
  __int128 v1184;
  __int128 v1185;
  __int128 v1186;
  __int128 v1187;
  __int128 v1188;
  __int128 v1189;
  _OWORD v1190[2];
  _OWORD v1191[7];
  _OWORD v1192[2];
  _OWORD v1193[7];
  _OWORD v1194[2];
  _OWORD v1195[7];
  _OWORD v1196[2];
  _OWORD v1197[7];
  _OWORD v1198[2];
  _OWORD v1199[7];
  _OWORD v1200[2];
  __int128 v1201;
  __int128 v1202;
  __int128 v1203;
  __int128 v1204;
  __int128 v1205;
  __int128 v1206;
  __int128 v1207;
  _OWORD v1208[2];
  _OWORD v1209[7];
  _OWORD v1210[2];
  _OWORD v1211[7];
  _OWORD v1212[2];
  _OWORD v1213[7];
  _OWORD v1214[2];
  _OWORD v1215[7];
  _OWORD v1216[2];
  _OWORD v1217[7];
  _OWORD v1218[2];
  __int128 v1219;
  __int128 v1220;
  __int128 v1221;
  __int128 v1222;
  __int128 v1223;
  __int128 v1224;
  __int128 v1225;
  _OWORD v1226[2];
  _OWORD v1227[7];
  _OWORD v1228[2];
  _OWORD v1229[7];
  _OWORD v1230[2];
  _OWORD v1231[7];
  _OWORD v1232[2];
  _OWORD v1233[7];
  _OWORD v1234[2];
  _OWORD v1235[7];
  _OWORD v1236[2];
  __int128 v1237;
  __int128 v1238;
  __int128 v1239;
  __int128 v1240;
  __int128 v1241;
  __int128 v1242;
  __int128 v1243;
  _OWORD v1244[2];
  _OWORD v1245[7];
  _OWORD v1246[2];
  _OWORD v1247[7];
  _OWORD v1248[2];
  _OWORD v1249[7];
  _OWORD v1250[2];
  _OWORD v1251[7];
  _OWORD v1252[2];
  _OWORD v1253[7];
  _OWORD v1254[2];
  __int128 v1255;
  __int128 v1256;
  __int128 v1257;
  __int128 v1258;
  __int128 v1259;
  __int128 v1260;
  __int128 v1261;
  _OWORD v1262[2];
  _OWORD v1263[7];
  _OWORD v1264[2];
  _OWORD v1265[7];
  _OWORD v1266[2];
  _OWORD v1267[7];
  _OWORD v1268[2];
  _OWORD v1269[7];
  _OWORD v1270[2];
  _OWORD v1271[7];
  _OWORD v1272[2];
  __int128 v1273;
  __int128 v1274;
  __int128 v1275;
  __int128 v1276;
  __int128 v1277;
  __int128 v1278;
  __int128 v1279;
  _OWORD v1280[2];
  _OWORD v1281[7];
  _OWORD v1282[2];
  _OWORD v1283[7];
  _OWORD v1284[2];
  _OWORD v1285[7];
  _OWORD v1286[2];
  _OWORD v1287[7];
  _OWORD v1288[2];
  _OWORD v1289[7];
  _OWORD v1290[2];
  __int128 v1291;
  __int128 v1292;
  __int128 v1293;
  __int128 v1294;
  __int128 v1295;
  __int128 v1296;
  __int128 v1297;
  _OWORD v1298[2];
  _OWORD v1299[7];
  _OWORD v1300[2];
  _OWORD v1301[7];
  _OWORD v1302[2];
  _OWORD v1303[7];
  _OWORD v1304[2];
  _OWORD v1305[7];
  _OWORD v1306[2];
  _OWORD v1307[7];
  _OWORD v1308[2];
  __int128 v1309;
  __int128 v1310;
  __int128 v1311;
  __int128 v1312;
  __int128 v1313;
  __int128 v1314;
  __int128 v1315;
  _OWORD v1316[2];
  _OWORD v1317[7];
  _OWORD v1318[2];
  _OWORD v1319[7];
  _OWORD v1320[2];
  _OWORD v1321[7];
  _OWORD v1322[2];
  _OWORD v1323[7];
  _OWORD v1324[2];
  _OWORD v1325[7];
  _OWORD v1326[2];
  __int128 v1327;
  __int128 v1328;
  __int128 v1329;
  __int128 v1330;
  __int128 v1331;
  __int128 v1332;
  __int128 v1333;
  _OWORD v1334[2];
  _OWORD v1335[7];
  _OWORD v1336[2];
  _OWORD v1337[7];
  _OWORD v1338[2];
  _OWORD v1339[7];
  _OWORD v1340[2];
  _OWORD v1341[7];
  _OWORD v1342[2];
  _OWORD v1343[7];
  _OWORD v1344[2];
  __int128 v1345;
  __int128 v1346;
  __int128 v1347;
  __int128 v1348;
  __int128 v1349;
  __int128 v1350;
  __int128 v1351;
  _OWORD v1352[2];
  _OWORD v1353[7];
  _OWORD v1354[2];
  _OWORD v1355[7];
  _OWORD v1356[2];
  _OWORD v1357[7];
  _OWORD v1358[2];
  _OWORD v1359[7];
  _OWORD v1360[2];
  _OWORD v1361[7];
  _OWORD v1362[2];
  __int128 v1363;
  __int128 v1364;
  __int128 v1365;
  __int128 v1366;
  __int128 v1367;
  __int128 v1368;
  __int128 v1369;
  _OWORD v1370[2];
  _OWORD v1371[7];
  _OWORD v1372[2];
  _OWORD v1373[7];
  _OWORD v1374[2];
  _OWORD v1375[7];
  _OWORD v1376[2];
  _OWORD v1377[7];
  _OWORD v1378[2];
  _OWORD v1379[7];
  _OWORD v1380[2];
  __int128 v1381;
  __int128 v1382;
  __int128 v1383;
  __int128 v1384;
  __int128 v1385;
  __int128 v1386;
  __int128 v1387;
  _OWORD v1388[2];
  _OWORD v1389[7];
  _OWORD v1390[2];
  _OWORD v1391[7];
  _OWORD v1392[2];
  _OWORD v1393[7];
  _OWORD v1394[2];
  _OWORD v1395[7];
  _OWORD v1396[2];
  _OWORD v1397[7];
  _OWORD v1398[2];
  __int128 v1399;
  __int128 v1400;
  __int128 v1401;
  __int128 v1402;
  __int128 v1403;
  __int128 v1404;
  __int128 v1405;
  _OWORD v1406[2];
  _OWORD v1407[7];
  _OWORD v1408[2];
  _OWORD v1409[7];
  _OWORD v1410[2];
  _OWORD v1411[7];
  _OWORD v1412[2];
  _OWORD v1413[7];
  _OWORD v1414[2];
  _OWORD v1415[7];
  _OWORD v1416[2];
  __int128 v1417;
  __int128 v1418;
  __int128 v1419;
  __int128 v1420;
  __int128 v1421;
  __int128 v1422;
  __int128 v1423;
  _OWORD v1424[2];
  _OWORD v1425[7];
  _OWORD v1426[2];
  _OWORD v1427[7];
  _OWORD v1428[2];
  _OWORD v1429[7];
  _OWORD v1430[2];
  _OWORD v1431[7];
  _OWORD v1432[2];
  _OWORD v1433[7];
  _OWORD v1434[2];
  __int128 v1435;
  __int128 v1436;
  __int128 v1437;
  __int128 v1438;
  __int128 v1439;
  __int128 v1440;
  __int128 v1441;
  _OWORD v1442[2];
  _OWORD v1443[7];
  _OWORD v1444[2];
  _OWORD v1445[7];
  _OWORD v1446[2];
  _OWORD v1447[7];
  _OWORD v1448[2];
  _OWORD v1449[7];
  _OWORD v1450[2];
  _OWORD v1451[7];
  _OWORD v1452[2];
  __int128 v1453;
  __int128 v1454;
  __int128 v1455;
  __int128 v1456;
  __int128 v1457;
  __int128 v1458;
  __int128 v1459;
  _OWORD v1460[2];
  _OWORD v1461[7];
  _OWORD v1462[2];
  _OWORD v1463[7];
  _OWORD v1464[2];
  _OWORD v1465[7];
  _OWORD v1466[2];
  _OWORD v1467[7];
  _OWORD v1468[2];
  _OWORD v1469[7];
  _OWORD v1470[2];
  __int128 v1471;
  __int128 v1472;
  __int128 v1473;
  __int128 v1474;
  __int128 v1475;
  __int128 v1476;
  __int128 v1477;
  _OWORD v1478[2];
  _OWORD v1479[7];
  _OWORD v1480[2];
  _OWORD v1481[7];
  _OWORD v1482[2];
  _OWORD v1483[7];
  _OWORD v1484[2];
  _OWORD v1485[7];
  _OWORD v1486[2];
  _OWORD v1487[7];
  _OWORD v1488[2];
  __int128 v1489;
  __int128 v1490;
  __int128 v1491;
  __int128 v1492;
  __int128 v1493;
  __int128 v1494;
  __int128 v1495;
  _OWORD v1496[2];
  _OWORD v1497[7];
  _OWORD v1498[2];
  _OWORD v1499[7];
  _OWORD v1500[2];
  _OWORD v1501[7];
  _OWORD v1502[2];
  _OWORD v1503[7];
  _OWORD v1504[2];
  _OWORD v1505[7];
  _OWORD v1506[2];
  __int128 v1507;
  __int128 v1508;
  __int128 v1509;
  __int128 v1510;
  __int128 v1511;
  __int128 v1512;
  __int128 v1513;
  _OWORD v1514[2];
  _OWORD v1515[7];
  _OWORD v1516[2];
  _OWORD v1517[7];
  _OWORD v1518[2];
  _OWORD v1519[7];
  _OWORD v1520[2];
  _OWORD v1521[7];
  _OWORD v1522[2];
  _OWORD v1523[7];
  _OWORD v1524[2];
  __int128 v1525;
  __int128 v1526;
  __int128 v1527;
  __int128 v1528;
  __int128 v1529;
  __int128 v1530;
  __int128 v1531;
  _OWORD v1532[2];
  _OWORD v1533[7];
  _OWORD v1534[2];
  _OWORD v1535[7];
  _OWORD v1536[2];
  _OWORD v1537[7];
  _OWORD v1538[2];
  _OWORD v1539[7];
  _OWORD v1540[2];
  _OWORD v1541[7];
  _OWORD v1542[2];
  __int128 v1543;
  __int128 v1544;
  __int128 v1545;
  __int128 v1546;
  __int128 v1547;
  __int128 v1548;
  __int128 v1549;
  _OWORD v1550[2];
  _OWORD v1551[7];
  _OWORD v1552[2];
  _OWORD v1553[7];
  _OWORD v1554[2];
  _OWORD v1555[7];
  _OWORD v1556[2];
  _OWORD v1557[7];
  _OWORD v1558[2];
  _OWORD v1559[7];
  _OWORD v1560[2];
  __int128 v1561;
  __int128 v1562;
  __int128 v1563;
  __int128 v1564;
  __int128 v1565;
  __int128 v1566;
  __int128 v1567;
  _OWORD v1568[2];
  _OWORD v1569[7];
  _OWORD v1570[2];
  _OWORD v1571[7];
  _OWORD v1572[2];
  _OWORD v1573[7];
  _OWORD v1574[2];
  _OWORD v1575[7];
  _OWORD v1576[2];
  _OWORD v1577[7];
  _OWORD v1578[2];
  __int128 v1579;
  __int128 v1580;
  __int128 v1581;
  __int128 v1582;
  __int128 v1583;
  __int128 v1584;
  __int128 v1585;
  _OWORD v1586[2];
  _OWORD v1587[7];
  _OWORD v1588[2];
  _OWORD v1589[7];
  _OWORD v1590[2];
  _OWORD v1591[7];
  _OWORD v1592[2];
  _OWORD v1593[7];
  _OWORD v1594[2];
  _OWORD v1595[7];
  _OWORD v1596[2];
  _OWORD v1597[7];
  _OWORD v1598[2];
  _OWORD v1599[7];
  _OWORD v1600[2];
  _OWORD v1601[7];
  _OWORD v1602[2];
  _OWORD v1603[7];
  _OWORD v1604[2];
  _OWORD v1605[7];
  _OWORD v1606[2];
  _OWORD v1607[7];
  _OWORD v1608[2];
  _OWORD v1609[7];
  _OWORD v1610[2];
  _OWORD v1611[7];
  _OWORD v1612[2];
  _OWORD v1613[7];
  _OWORD v1614[2];
  _OWORD v1615[7];
  _OWORD v1616[2];
  _OWORD v1617[7];
  _OWORD v1618[2];
  _OWORD v1619[7];
  _OWORD v1620[2];
  __int128 v1621;
  char v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t v1715;
  uint64_t v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  uint64_t v1723;
  uint64_t v1724;
  uint64_t v1725;
  uint64_t v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  uint64_t v1731;
  uint64_t v1732;
  uint64_t v1733;
  uint64_t v1734;
  uint64_t v1735;
  uint64_t v1736;
  uint64_t v1737;
  uint64_t v1738;
  uint64_t v1739;
  uint64_t v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  uint64_t v1747;
  uint64_t v1748;
  uint64_t v1749;
  uint64_t v1750;
  uint64_t v1751;
  uint64_t v1752;
  uint64_t v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  uint64_t v1758;
  uint64_t v1759;
  uint64_t v1760;
  uint64_t v1761;
  uint64_t v1762;
  uint64_t v1763;
  uint64_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  uint64_t v1767;
  uint64_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  uint64_t v1771;
  uint64_t v1772;
  uint64_t v1773;
  uint64_t v1774;
  uint64_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  uint64_t v1781;
  uint64_t v1782;
  uint64_t v1783;
  uint64_t v1784;
  uint64_t v1785;
  uint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  _QWORD v1789[4];

  v0 = MEMORY[0x24BDAC7A8]();
  v1108 = v2;
  v1109 = v1;
  v1105 = v3;
  v1106 = v4;
  v1107 = v5;
  v7 = v6;
  v1789[1] = *MEMORY[0x24BDAC8D0];
  v9 = v8[2] & 0xFFFFFFF8;
  v1110 = v8;
  v1111 = v0;
  *(_QWORD *)&v1619[0] = *(_QWORD *)v8 & 0xFFFFFFF8FFFFFFF8;
  DWORD2(v1619[0]) = v9;
  if ((sub_223E974E0(v0, (int *)v1619, v1125) & 0x80000000) != 0)
  {
    v16 = *(unsigned int *)(v1111 + 176);
    if ((v16 & 0x80000000) != 0)
    {
      v1126 = 0x8000000080000000;
      v1127 = 0x8000000080000000;
      v1128 = 0x8000000080000000;
      v83 = 0x80000000;
      v1129 = 0x80000000;
    }
    else
    {
      v17 = *v1110 & 0xFFFFFFF8;
      v18 = v1110[1] & 0xFFFFFFF8;
      v19 = v1110[2] & 0xFFFFFFF8;
      v20 = *(_QWORD *)(v1111 + 184);
      v21 = (_DWORD *)(v20 + 4488 * (v16 & 0xFFFFFFFFCFFFFFFFLL));
      v22 = v21[1];
      v23 = v21[2];
      v24 = v17 - *v21;
      v26 = v17 < *v21 || v18 < v22 || v19 < v23;
      if (!v26
        && ((v27 = v21[3], v17 < v27) ? (v28 = v18 < v21[4]) : (v28 = 0), v28 ? (v29 = v19 < v21[5]) : (v29 = 0), v29))
      {
        v91 = v18 - v22;
        v92 = v19 - v23;
        v93 = v27 - *v21;
        v30 = *(_DWORD *)(v1111 + 176);
        while (1)
        {
          v93 >>= 1;
          v30 = *(_DWORD *)(v20
                          + 4488 * (v30 & 0xCFFFFFFF)
                          + 4 * ((4 * ((v93 & v24) != 0)) | (2 * ((v93 & v91) != 0)) | ((v93 & v92) != 0))
                          + 24);
          if (v93 == *(_DWORD *)(v1111 + 136) || v30 >> 30)
            break;
          v24 -= v93 & v24;
          v91 -= v93 & v91;
          v92 -= v93 & v92;
        }
      }
      else
      {
        v30 = 0x80000000;
      }
      LODWORD(v1126) = v30;
      v31 = v19 + 8;
      v32 = 0x80000000;
      v33 = v17 - *v21;
      if (v17 >= *v21)
      {
        v34 = v21[1];
        v35 = __OFSUB__(v18, v34);
        v36 = v18 - v34;
        if (v36 < 0 == v35)
        {
          v37 = v21[2];
          v35 = __OFSUB__(v31, v37);
          v38 = v31 - v37;
          if (v38 < 0 == v35)
          {
            v39 = v21[3];
            if (v17 < v39 && v18 < v21[4] && v31 < v21[5])
            {
              v40 = v39 - *v21;
              v32 = v16;
              while (1)
              {
                v40 >>= 1;
                v32 = *(_DWORD *)(v20
                                + 4488 * (v32 & 0xCFFFFFFF)
                                + 4 * ((4 * ((v40 & v33) != 0)) | (2 * ((v40 & v36) != 0)) | ((v40 & v38) != 0))
                                + 24);
                if (v40 == *(_DWORD *)(v1111 + 136) || v32 >> 30)
                  break;
                v33 -= v40 & v33;
                v36 -= v40 & v36;
                v38 -= v40 & v38;
              }
            }
          }
        }
      }
      HIDWORD(v1126) = v32;
      v41 = v18 + 8;
      v42 = 0x80000000;
      v43 = v17 - *v21;
      if (v17 >= *v21)
      {
        v44 = v21[1];
        v35 = __OFSUB__(v41, v44);
        v45 = v41 - v44;
        if (v45 < 0 == v35)
        {
          v46 = v21[2];
          v35 = __OFSUB__(v19, v46);
          v47 = v19 - v46;
          if (v47 < 0 == v35)
          {
            v48 = v21[3];
            if (v17 < v48 && v41 < v21[4] && v19 < v21[5])
            {
              v49 = v48 - *v21;
              v42 = v16;
              while (1)
              {
                v49 >>= 1;
                v42 = *(_DWORD *)(v20
                                + 4488 * (v42 & 0xCFFFFFFF)
                                + 4 * ((4 * ((v49 & v43) != 0)) | (2 * ((v49 & v45) != 0)) | ((v49 & v47) != 0))
                                + 24);
                if (v49 == *(_DWORD *)(v1111 + 136) || v42 >> 30)
                  break;
                v43 -= v49 & v43;
                v45 -= v49 & v45;
                v47 -= v49 & v47;
              }
            }
          }
        }
      }
      LODWORD(v1127) = v42;
      v50 = 0x80000000;
      v51 = v17 - *v21;
      if (v17 >= *v21)
      {
        v52 = v21[1];
        v35 = __OFSUB__(v41, v52);
        v53 = v41 - v52;
        if (v53 < 0 == v35)
        {
          v54 = v21[2];
          v35 = __OFSUB__(v31, v54);
          v55 = v31 - v54;
          if (v55 < 0 == v35)
          {
            v56 = v21[3];
            if (v17 < v56 && v41 < v21[4] && v31 < v21[5])
            {
              v57 = v56 - *v21;
              v50 = v16;
              while (1)
              {
                v57 >>= 1;
                v50 = *(_DWORD *)(v20
                                + 4488 * (v50 & 0xCFFFFFFF)
                                + 4 * ((4 * ((v57 & v51) != 0)) | (2 * ((v57 & v53) != 0)) | ((v57 & v55) != 0))
                                + 24);
                if (v57 == *(_DWORD *)(v1111 + 136) || v50 >> 30)
                  break;
                v51 -= v57 & v51;
                v53 -= v57 & v53;
                v55 -= v57 & v55;
              }
            }
          }
        }
      }
      HIDWORD(v1127) = v50;
      v58 = v17 + 8;
      v59 = 0x80000000;
      v60 = v58 - *v21;
      if (v58 >= *v21)
      {
        v61 = v21[1];
        v35 = __OFSUB__(v18, v61);
        v62 = v18 - v61;
        if (v62 < 0 == v35)
        {
          v63 = v21[2];
          v35 = __OFSUB__(v19, v63);
          v64 = v19 - v63;
          if (v64 < 0 == v35)
          {
            v65 = v21[3];
            if (v58 < v65 && v18 < v21[4] && v19 < v21[5])
            {
              v66 = v65 - *v21;
              v59 = v16;
              while (1)
              {
                v66 >>= 1;
                v59 = *(_DWORD *)(v20
                                + 4488 * (v59 & 0xCFFFFFFF)
                                + 4 * ((4 * ((v66 & v60) != 0)) | (2 * ((v66 & v62) != 0)) | ((v66 & v64) != 0))
                                + 24);
                if (v66 == *(_DWORD *)(v1111 + 136) || v59 >> 30)
                  break;
                v60 -= v66 & v60;
                v62 -= v66 & v62;
                v64 -= v66 & v64;
              }
            }
          }
        }
      }
      LODWORD(v1128) = v59;
      v67 = 0x80000000;
      v68 = v58 - *v21;
      if (v58 >= *v21)
      {
        v69 = v21[1];
        v35 = __OFSUB__(v18, v69);
        v70 = v18 - v69;
        if (v70 < 0 == v35)
        {
          v71 = v21[2];
          v35 = __OFSUB__(v31, v71);
          v72 = v31 - v71;
          if (v72 < 0 == v35)
          {
            v73 = v21[3];
            if (v58 < v73 && v18 < v21[4] && v31 < v21[5])
            {
              v74 = v73 - *v21;
              v67 = v16;
              while (1)
              {
                v74 >>= 1;
                v67 = *(_DWORD *)(v20
                                + 4488 * (v67 & 0xCFFFFFFF)
                                + 4 * ((4 * ((v74 & v68) != 0)) | (2 * ((v74 & v70) != 0)) | ((v74 & v72) != 0))
                                + 24);
                if (v74 == *(_DWORD *)(v1111 + 136) || v67 >> 30)
                  break;
                v68 -= v74 & v68;
                v70 -= v74 & v70;
                v72 -= v74 & v72;
              }
            }
          }
        }
      }
      HIDWORD(v1128) = v67;
      v75 = 0x80000000;
      v76 = v58 - *v21;
      if (v58 >= *v21)
      {
        v77 = v21[1];
        v35 = __OFSUB__(v41, v77);
        v78 = v41 - v77;
        if (v78 < 0 == v35)
        {
          v79 = v21[2];
          v35 = __OFSUB__(v19, v79);
          v80 = v19 - v79;
          if (v80 < 0 == v35)
          {
            v81 = v21[3];
            if (v58 < v81 && v41 < v21[4] && v19 < v21[5])
            {
              v82 = v81 - *v21;
              v75 = v16;
              while (1)
              {
                v82 >>= 1;
                v75 = *(_DWORD *)(v20
                                + 4488 * (v75 & 0xCFFFFFFF)
                                + 4 * ((4 * ((v82 & v76) != 0)) | (2 * ((v82 & v78) != 0)) | ((v82 & v80) != 0))
                                + 24);
                if (v82 == *(_DWORD *)(v1111 + 136) || v75 >> 30)
                  break;
                v76 -= v82 & v76;
                v78 -= v82 & v78;
                v80 -= v82 & v80;
              }
            }
          }
        }
      }
      v1129 = v75;
      v83 = 0x80000000;
      v84 = v58 - *v21;
      if (v58 >= *v21)
      {
        v85 = v21[1];
        v35 = __OFSUB__(v41, v85);
        v86 = v41 - v85;
        if (v86 < 0 == v35)
        {
          v87 = v21[2];
          v35 = __OFSUB__(v31, v87);
          v88 = v31 - v87;
          if (v88 < 0 == v35)
          {
            v89 = v21[3];
            if (v58 < v89 && v41 < v21[4] && v31 < v21[5])
            {
              for (i = v89 - *v21; ; v88 -= i & v88)
              {
                i >>= 1;
                LODWORD(v16) = *(_DWORD *)(v20
                                         + 4488 * (v16 & 0xCFFFFFFF)
                                         + 4 * ((4 * ((i & v84) != 0)) | (2 * ((i & v86) != 0)) | ((i & v88) != 0))
                                         + 24);
                if (i == *(_DWORD *)(v1111 + 136) || v16 >> 30)
                  break;
                v84 -= i & v84;
                v86 -= i & v86;
              }
              v83 = v16;
            }
          }
        }
      }
    }
    v1130 = v83;
  }
  for (j = 0; j != 8; ++j)
  {
    v96 = (byte_22466137A[j] & 1)
        + ((byte_22466137A[j] << 30 >> 31) & 3)
        + ((byte_22466137A[j] << 29 >> 31) & 9u)
        + 13;
    v97 = v1125[v96];
    v98 = v1111 + 20872;
    if ((v97 & 0x80000000) == 0)
    {
      v99 = *(_QWORD *)(v1111 + 20920);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v1111 + 20928) - v99) >> 4) <= v97)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v99 = *(_QWORD *)(v1111 + 20920);
      }
      v98 = v99 + 48 * v97;
    }
    v1622 = *((_BYTE *)v7 + 16);
    v1621 = *v7;
    if (v1622)
    {
      v100 = sub_223340F28((_QWORD *)v98, (uint64_t)&v1621);
      if (v100)
        v95 = *((_DWORD *)v100 + 8);
      else
        v95 = 0x80000000;
    }
    else
    {
      v95 = *(_DWORD *)(v98 + 40);
    }
    v1125[v96] = v95;
  }
  v1123 = 0u;
  v1124 = 0u;
  v101 = v1126;
  if ((v1126 & 0x80000000) != 0)
  {
    v102 = v1111;
    v1119 = v1111 + 316;
    v104 = HIDWORD(v1126);
    if ((v1126 & 0x8000000000000000) == 0)
      goto LABEL_112;
LABEL_141:
    v1120 = v102 + 316;
    v106 = v1127;
    if ((v1127 & 0x80000000) == 0)
      goto LABEL_116;
LABEL_142:
    v1121 = v102 + 316;
    v108 = HIDWORD(v1127);
    if ((v1127 & 0x8000000000000000) == 0)
      goto LABEL_120;
LABEL_143:
    v1122 = v102 + 316;
    v110 = v1128;
    if ((v1128 & 0x80000000) == 0)
      goto LABEL_124;
LABEL_144:
    *(_QWORD *)&v1123 = v102 + 316;
    v112 = HIDWORD(v1128);
    if ((v1128 & 0x8000000000000000) == 0)
      goto LABEL_128;
LABEL_145:
    *((_QWORD *)&v1123 + 1) = v102 + 316;
    v114 = v1129;
    if ((v1129 & 0x80000000) == 0)
      goto LABEL_132;
    goto LABEL_146;
  }
  v102 = v1111;
  v103 = *(_QWORD *)(v1111 + 20800);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v1111 + 20808) - v103) >> 12) <= v1126)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v102 = v1111;
    v103 = *(_QWORD *)(v1111 + 20800);
  }
  v1119 = v103 + 20480 * v101;
  v104 = HIDWORD(v1126);
  if ((v1126 & 0x8000000000000000) != 0)
    goto LABEL_141;
LABEL_112:
  v105 = *(_QWORD *)(v102 + 20800);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v102 + 20808) - v105) >> 12) <= v104)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v102 = v1111;
    v105 = *(_QWORD *)(v1111 + 20800);
  }
  v1120 = v105 + 20480 * v104;
  v106 = v1127;
  if ((v1127 & 0x80000000) != 0)
    goto LABEL_142;
LABEL_116:
  v107 = *(_QWORD *)(v102 + 20800);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v102 + 20808) - v107) >> 12) <= v106)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v102 = v1111;
    v107 = *(_QWORD *)(v1111 + 20800);
  }
  v1121 = v107 + 20480 * v106;
  v108 = HIDWORD(v1127);
  if ((v1127 & 0x8000000000000000) != 0)
    goto LABEL_143;
LABEL_120:
  v109 = *(_QWORD *)(v102 + 20800);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v102 + 20808) - v109) >> 12) <= v108)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v102 = v1111;
    v109 = *(_QWORD *)(v1111 + 20800);
  }
  v1122 = v109 + 20480 * v108;
  v110 = v1128;
  if ((v1128 & 0x80000000) != 0)
    goto LABEL_144;
LABEL_124:
  v111 = *(_QWORD *)(v102 + 20800);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v102 + 20808) - v111) >> 12) <= v110)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v102 = v1111;
    v111 = *(_QWORD *)(v1111 + 20800);
  }
  *(_QWORD *)&v1123 = v111 + 20480 * v110;
  v112 = HIDWORD(v1128);
  if ((v1128 & 0x8000000000000000) != 0)
    goto LABEL_145;
LABEL_128:
  v113 = *(_QWORD *)(v102 + 20800);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v102 + 20808) - v113) >> 12) <= v112)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v102 = v1111;
    v113 = *(_QWORD *)(v1111 + 20800);
  }
  *((_QWORD *)&v1123 + 1) = v113 + 20480 * v112;
  v114 = v1129;
  if ((v1129 & 0x80000000) == 0)
  {
LABEL_132:
    v115 = *(_QWORD *)(v102 + 20800);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v102 + 20808) - v115) >> 12) <= v114)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v102 = v1111;
      v115 = *(_QWORD *)(v1111 + 20800);
    }
    *(_QWORD *)&v1124 = v115 + 20480 * v114;
    v116 = v1130;
    if ((v1130 & 0x80000000) == 0)
      goto LABEL_136;
LABEL_147:
    v118 = v102 + 316;
    goto LABEL_148;
  }
LABEL_146:
  *(_QWORD *)&v1124 = v102 + 316;
  v116 = v1130;
  if ((v1130 & 0x80000000) != 0)
    goto LABEL_147;
LABEL_136:
  v117 = *(_QWORD *)(v102 + 20800);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v102 + 20808) - v117) >> 12) <= v116)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v102 = v1111;
    v117 = *(_QWORD *)(v1111 + 20800);
  }
  v118 = v117 + 20480 * v116;
LABEL_148:
  *((_QWORD *)&v1124 + 1) = v118;
  v119 = *(_OWORD *)(v1105 + 48);
  v1117[2] = *(_OWORD *)(v1105 + 32);
  v1117[3] = v119;
  v1118 = *(_QWORD *)(v1105 + 64);
  v120 = *(_OWORD *)(v1105 + 16);
  v1117[0] = *(_OWORD *)v1105;
  v1117[1] = v120;
  v121 = *(_OWORD *)(v1106 + 48);
  v1115[2] = *(_OWORD *)(v1106 + 32);
  v1115[3] = v121;
  v1116 = *(_QWORD *)(v1106 + 64);
  v122 = *(_OWORD *)(v1106 + 16);
  v1115[0] = *(_OWORD *)v1106;
  v1115[1] = v122;
  v123 = v1107[3];
  v1114[2] = v1107[2];
  v1114[3] = v123;
  v1114[4] = v1107[4];
  v124 = v1107[1];
  v1114[0] = *v1107;
  v1114[1] = v124;
  v125 = *(_OWORD *)(v1108 + 16);
  v1112[0] = *(_OWORD *)v1108;
  v1112[1] = v125;
  v1112[2] = *(_OWORD *)(v1108 + 32);
  v1113 = *(_QWORD *)(v1108 + 48);
  v1142 = v1109;
  v1140 = 16;
  v1141 = 0;
  v1138 = 8;
  *(_QWORD *)&v1131 = v1110;
  *((_QWORD *)&v1131 + 1) = &v1140;
  *(_QWORD *)&v1132 = v102 + 276;
  *((_QWORD *)&v1132 + 1) = &v1119;
  *(_QWORD *)&v1133 = &v1138;
  *((_QWORD *)&v1133 + 1) = &v1139;
  *(_QWORD *)&v1134 = v1114;
  *((_QWORD *)&v1134 + 1) = &v1625;
  *(_QWORD *)&v1135 = v1117;
  *((_QWORD *)&v1135 + 1) = &v1624;
  *(_QWORD *)&v1136 = v1115;
  *((_QWORD *)&v1136 + 1) = &v1623;
  *(_QWORD *)&v1137 = &v1142;
  *((_QWORD *)&v1137 + 1) = v1112;
  v1626 = 0;
  v1144[0] = xmmword_224662C2C;
  v1144[1] = *(_OWORD *)dbl_224662C3C;
  sub_223B46FEC((uint64_t)&v1131, 0, 0, 0, (uint64_t)&v1626, (uint64_t)v1144, COERCE_DOUBLE(0x100000000), COERCE_DOUBLE(0x500000004), v10, v11, v12, v13, v14, v15);
  v1143[4] = v1135;
  v1143[5] = v1136;
  v1143[6] = v1137;
  v1143[0] = v1131;
  v1143[1] = v1132;
  v1143[2] = v1133;
  v1143[3] = v1134;
  v1627 = 0;
  v1146[0] = xmmword_224662C88;
  v1146[1] = *(_OWORD *)dbl_224662C98;
  sub_223B46FEC((uint64_t)v1143, 0, 0, 1, (uint64_t)&v1627, (uint64_t)v1146, COERCE_DOUBLE(0x800000001), COERCE_DOUBLE(0xC00000005), v126, v127, v128, v129, v130, v131);
  v1145[4] = v1135;
  v1145[5] = v1136;
  v1145[6] = v1137;
  v1145[0] = v1131;
  v1145[1] = v1132;
  v1145[2] = v1133;
  v1145[3] = v1134;
  v1628 = 0;
  v1154[0] = xmmword_224662CA8;
  v1154[1] = *(_OWORD *)dbl_224662CB8;
  sub_223B46FEC((uint64_t)v1145, 0, 1, 0, (uint64_t)&v1628, (uint64_t)v1154, COERCE_DOUBLE(0x300000002), COERCE_DOUBLE(0x700000006), v132, v133, v134, v135, v136, v137);
  v1151 = v1135;
  v1152 = v1136;
  v1153 = v1137;
  v1147 = v1131;
  v1148 = v1132;
  v1150 = v1134;
  v1149 = v1133;
  v1629 = 0;
  v1156[0] = xmmword_224662CC8;
  v1156[1] = *(_OWORD *)dbl_224662CD8;
  sub_223B46FEC((uint64_t)&v1147, 0, 1, 1, (uint64_t)&v1629, (uint64_t)v1156, COERCE_DOUBLE(0xA00000003), COERCE_DOUBLE(0xE00000007), v138, v139, v140, v141, v142, v143);
  v1155[4] = v1135;
  v1155[5] = v1136;
  v1155[6] = v1137;
  v1155[0] = v1131;
  v1155[1] = v1132;
  v1155[3] = v1134;
  v1155[2] = v1133;
  v1630 = 0;
  v1158[0] = xmmword_224662CE8;
  v1158[1] = *(_OWORD *)dbl_224662CF8;
  sub_223B46FEC((uint64_t)v1155, 1, 0, 0, (uint64_t)&v1630, (uint64_t)v1158, COERCE_DOUBLE(0x500000004), COERCE_DOUBLE(0x2100000020), v144, v145, v146, v147, v148, v149);
  v1157[4] = v1135;
  v1157[5] = v1136;
  v1157[6] = v1137;
  v1157[0] = v1131;
  v1157[1] = v1132;
  v1157[3] = v1134;
  v1157[2] = v1133;
  v1631 = 0;
  v1160[0] = xmmword_224662D08;
  v1160[1] = *(_OWORD *)dbl_224662D18;
  sub_223B46FEC((uint64_t)v1157, 1, 0, 1, (uint64_t)&v1631, (uint64_t)v1160, COERCE_DOUBLE(0xC00000005), COERCE_DOUBLE(0x2800000021), v150, v151, v152, v153, v154, v155);
  v1159[4] = v1135;
  v1159[5] = v1136;
  v1159[6] = v1137;
  v1159[0] = v1131;
  v1159[1] = v1132;
  v1159[3] = v1134;
  v1159[2] = v1133;
  v1632 = 0;
  v1162[0] = xmmword_224662D28;
  v1162[1] = *(_OWORD *)dbl_224662D38;
  sub_223B46FEC((uint64_t)v1159, 1, 1, 0, (uint64_t)&v1632, (uint64_t)v1162, COERCE_DOUBLE(0x700000006), COERCE_DOUBLE(0x2300000022), v156, v157, v158, v159, v160, v161);
  v1161[4] = v1135;
  v1161[5] = v1136;
  v1161[6] = v1137;
  v1161[0] = v1131;
  v1161[1] = v1132;
  v1161[3] = v1134;
  v1161[2] = v1133;
  v1633 = 0;
  v1164[0] = xmmword_224662D48;
  v1164[1] = *(_OWORD *)dbl_224662D58;
  sub_223B46FEC((uint64_t)v1161, 1, 1, 1, (uint64_t)&v1633, (uint64_t)v1164, COERCE_DOUBLE(0xE00000007), COERCE_DOUBLE(0x2A00000023), v162, v163, v164, v165, v166, v167);
  v1163[4] = v1135;
  v1163[5] = v1136;
  v1163[6] = v1137;
  v1163[0] = v1131;
  v1163[1] = v1132;
  v1163[3] = v1134;
  v1163[2] = v1133;
  v1634 = 0;
  v1172[0] = xmmword_224662D68;
  v1172[1] = *(_OWORD *)dbl_224662D78;
  sub_223B46FEC((uint64_t)v1163, 0, 0, 2, (uint64_t)&v1634, (uint64_t)v1172, COERCE_DOUBLE(0x900000008), COERCE_DOUBLE(0xD0000000CLL), v168, v169, v170, v171, v172, v173);
  v1169 = v1135;
  v1170 = v1136;
  v1171 = v1137;
  v1165 = v1131;
  v1166 = v1132;
  v1168 = v1134;
  v1167 = v1133;
  v1635 = 0;
  v1174[0] = xmmword_224662D88;
  v1174[1] = *(_OWORD *)dbl_224662D98;
  sub_223B46FEC((uint64_t)&v1165, 0, 0, 3, (uint64_t)&v1635, (uint64_t)v1174, COERCE_DOUBLE(0x4000000009), COERCE_DOUBLE(0x440000000DLL), v174, v175, v176, v177, v178, v179);
  v1173[4] = v1135;
  v1173[5] = v1136;
  v1173[6] = v1137;
  v1173[0] = v1131;
  v1173[1] = v1132;
  v1173[3] = v1134;
  v1173[2] = v1133;
  v1636 = 0;
  v1176[0] = xmmword_224662DA8;
  v1176[1] = *(_OWORD *)dbl_224662DB8;
  sub_223B46FEC((uint64_t)v1173, 0, 1, 2, (uint64_t)&v1636, (uint64_t)v1176, COERCE_DOUBLE(0xB0000000ALL), COERCE_DOUBLE(0xF0000000ELL), v180, v181, v182, v183, v184, v185);
  v1175[4] = v1135;
  v1175[5] = v1136;
  v1175[6] = v1137;
  v1175[0] = v1131;
  v1175[1] = v1132;
  v1175[3] = v1134;
  v1175[2] = v1133;
  v1637 = 0;
  v1178[0] = xmmword_224662DC8;
  v1178[1] = *(_OWORD *)dbl_224662DD8;
  sub_223B46FEC((uint64_t)v1175, 0, 1, 3, (uint64_t)&v1637, (uint64_t)v1178, COERCE_DOUBLE(0x420000000BLL), COERCE_DOUBLE(0x460000000FLL), v186, v187, v188, v189, v190, v191);
  v1177[4] = v1135;
  v1177[5] = v1136;
  v1177[6] = v1137;
  v1177[0] = v1131;
  v1177[1] = v1132;
  v1177[3] = v1134;
  v1177[2] = v1133;
  v1638 = 0;
  v1180[0] = xmmword_224662DE8;
  v1180[1] = *(_OWORD *)dbl_224662DF8;
  sub_223B46FEC((uint64_t)v1177, 1, 0, 2, (uint64_t)&v1638, (uint64_t)v1180, COERCE_DOUBLE(0xD0000000CLL), COERCE_DOUBLE(0x2900000028), v192, v193, v194, v195, v196, v197);
  v1179[4] = v1135;
  v1179[5] = v1136;
  v1179[6] = v1137;
  v1179[0] = v1131;
  v1179[1] = v1132;
  v1179[3] = v1134;
  v1179[2] = v1133;
  v1639 = 0;
  v1182[0] = xmmword_224662E08;
  v1182[1] = *(_OWORD *)dbl_224662E18;
  sub_223B46FEC((uint64_t)v1179, 1, 0, 3, (uint64_t)&v1639, (uint64_t)v1182, COERCE_DOUBLE(0x440000000DLL), COERCE_DOUBLE(0x6000000029), v198, v199, v200, v201, v202, v203);
  v1181[4] = v1135;
  v1181[5] = v1136;
  v1181[6] = v1137;
  v1181[0] = v1131;
  v1181[1] = v1132;
  v1181[3] = v1134;
  v1181[2] = v1133;
  v1640 = 0;
  v1190[0] = xmmword_224662E28;
  v1190[1] = *(_OWORD *)dbl_224662E38;
  sub_223B46FEC((uint64_t)v1181, 1, 1, 2, (uint64_t)&v1640, (uint64_t)v1190, COERCE_DOUBLE(0xF0000000ELL), COERCE_DOUBLE(0x2B0000002ALL), v204, v205, v206, v207, v208, v209);
  v1187 = v1135;
  v1188 = v1136;
  v1189 = v1137;
  v1183 = v1131;
  v1184 = v1132;
  v1186 = v1134;
  v1185 = v1133;
  v1641 = 0;
  v1192[0] = xmmword_224662E48;
  v1192[1] = *(_OWORD *)dbl_224662E58;
  sub_223B46FEC((uint64_t)&v1183, 1, 1, 3, (uint64_t)&v1641, (uint64_t)v1192, COERCE_DOUBLE(0x460000000FLL), COERCE_DOUBLE(0x620000002BLL), v210, v211, v212, v213, v214, v215);
  v1191[4] = v1135;
  v1191[5] = v1136;
  v1191[6] = v1137;
  v1191[0] = v1131;
  v1191[1] = v1132;
  v1191[3] = v1134;
  v1191[2] = v1133;
  v1642 = 0;
  v1194[0] = xmmword_224662E68;
  v1194[1] = *(_OWORD *)dbl_224662E78;
  sub_223B46FEC((uint64_t)v1191, 0, 2, 0, (uint64_t)&v1642, (uint64_t)v1194, COERCE_DOUBLE(0x1100000010), COERCE_DOUBLE(0x1500000014), v216, v217, v218, v219, v220, v221);
  v1193[4] = v1135;
  v1193[5] = v1136;
  v1193[6] = v1137;
  v1193[0] = v1131;
  v1193[1] = v1132;
  v1193[3] = v1134;
  v1193[2] = v1133;
  v1643 = 0;
  v1196[0] = xmmword_224662E88;
  v1196[1] = *(_OWORD *)dbl_224662E98;
  sub_223B46FEC((uint64_t)v1193, 0, 2, 1, (uint64_t)&v1643, (uint64_t)v1196, COERCE_DOUBLE(0x1800000011), COERCE_DOUBLE(0x1C00000015), v222, v223, v224, v225, v226, v227);
  v1195[4] = v1151;
  v1195[5] = v1152;
  v1195[6] = v1153;
  v1195[0] = v1147;
  v1195[1] = v1148;
  v1195[3] = v1150;
  v1195[2] = v1149;
  v1644 = 0;
  v1198[0] = xmmword_224662EA8;
  v1198[1] = *(_OWORD *)dbl_224662EB8;
  sub_223B46FEC((uint64_t)v1195, 0, 3, 0, (uint64_t)&v1644, (uint64_t)v1198, COERCE_DOUBLE(0x1300000012), COERCE_DOUBLE(0x1700000016), v228, v229, v230, v231, v232, v233);
  v1197[4] = v1151;
  v1197[5] = v1152;
  v1197[6] = v1153;
  v1197[0] = v1147;
  v1197[1] = v1148;
  v1197[3] = v1150;
  v1197[2] = v1149;
  v1645 = 0;
  v1200[0] = xmmword_224662EC8;
  v1200[1] = *(_OWORD *)dbl_224662ED8;
  sub_223B46FEC((uint64_t)v1197, 0, 3, 1, (uint64_t)&v1645, (uint64_t)v1200, COERCE_DOUBLE(0x1A00000013), COERCE_DOUBLE(0x1E00000017), v234, v235, v236, v237, v238, v239);
  v1199[4] = v1151;
  v1199[5] = v1152;
  v1199[6] = v1153;
  v1199[0] = v1147;
  v1199[1] = v1148;
  v1199[3] = v1150;
  v1199[2] = v1149;
  v1646 = 0;
  v1208[0] = xmmword_224662EE8;
  v1208[1] = *(_OWORD *)dbl_224662EF8;
  sub_223B46FEC((uint64_t)v1199, 1, 2, 0, (uint64_t)&v1646, (uint64_t)v1208, COERCE_DOUBLE(0x1500000014), COERCE_DOUBLE(0x3100000030), v240, v241, v242, v243, v244, v245);
  v1205 = v1151;
  v1206 = v1152;
  v1207 = v1153;
  v1201 = v1147;
  v1202 = v1148;
  v1204 = v1150;
  v1203 = v1149;
  v1647 = 0;
  v1210[0] = xmmword_224662F08;
  v1210[1] = *(_OWORD *)dbl_224662F18;
  sub_223B46FEC((uint64_t)&v1201, 1, 2, 1, (uint64_t)&v1647, (uint64_t)v1210, COERCE_DOUBLE(0x1C00000015), COERCE_DOUBLE(0x3800000031), v246, v247, v248, v249, v250, v251);
  v1209[4] = v1151;
  v1209[5] = v1152;
  v1209[6] = v1153;
  v1209[0] = v1147;
  v1209[1] = v1148;
  v1209[3] = v1150;
  v1209[2] = v1149;
  v1648 = 0;
  v1212[0] = xmmword_224662F28;
  v1212[1] = *(_OWORD *)dbl_224662F38;
  sub_223B46FEC((uint64_t)v1209, 1, 3, 0, (uint64_t)&v1648, (uint64_t)v1212, COERCE_DOUBLE(0x1700000016), COERCE_DOUBLE(0x3300000032), v252, v253, v254, v255, v256, v257);
  v1211[4] = v1151;
  v1211[5] = v1152;
  v1211[6] = v1153;
  v1211[0] = v1147;
  v1211[1] = v1148;
  v1211[3] = v1150;
  v1211[2] = v1149;
  v1649 = 0;
  v1214[0] = xmmword_224662F48;
  v1214[1] = *(_OWORD *)dbl_224662F58;
  sub_223B46FEC((uint64_t)v1211, 1, 3, 1, (uint64_t)&v1649, (uint64_t)v1214, COERCE_DOUBLE(0x1E00000017), COERCE_DOUBLE(0x3A00000033), v258, v259, v260, v261, v262, v263);
  v1213[4] = v1169;
  v1213[5] = v1170;
  v1213[6] = v1171;
  v1213[0] = v1165;
  v1213[1] = v1166;
  v1213[3] = v1168;
  v1213[2] = v1167;
  v1650 = 0;
  v1216[0] = xmmword_224662F68;
  v1216[1] = *(_OWORD *)dbl_224662F78;
  sub_223B46FEC((uint64_t)v1213, 0, 2, 2, (uint64_t)&v1650, (uint64_t)v1216, COERCE_DOUBLE(0x1900000018), COERCE_DOUBLE(0x1D0000001CLL), v264, v265, v266, v267, v268, v269);
  v1215[4] = v1169;
  v1215[5] = v1170;
  v1215[6] = v1171;
  v1215[0] = v1165;
  v1215[1] = v1166;
  v1215[3] = v1168;
  v1215[2] = v1167;
  v1651 = 0;
  v1218[0] = xmmword_224662F88;
  v1218[1] = *(_OWORD *)dbl_224662F98;
  sub_223B46FEC((uint64_t)v1215, 0, 2, 3, (uint64_t)&v1651, (uint64_t)v1218, COERCE_DOUBLE(0x5000000019), COERCE_DOUBLE(0x540000001DLL), v270, v271, v272, v273, v274, v275);
  v1217[4] = v1169;
  v1217[5] = v1170;
  v1217[6] = v1171;
  v1217[0] = v1165;
  v1217[1] = v1166;
  v1217[3] = v1168;
  v1217[2] = v1167;
  v1652 = 0;
  v1226[0] = xmmword_224662FA8;
  v1226[1] = *(_OWORD *)dbl_224662FB8;
  sub_223B46FEC((uint64_t)v1217, 0, 3, 2, (uint64_t)&v1652, (uint64_t)v1226, COERCE_DOUBLE(0x1B0000001ALL), COERCE_DOUBLE(0x1F0000001ELL), v276, v277, v278, v279, v280, v281);
  v1223 = v1169;
  v1224 = v1170;
  v1225 = v1171;
  v1219 = v1165;
  v1220 = v1166;
  v1222 = v1168;
  v1221 = v1167;
  v1653 = 0;
  v1228[0] = xmmword_224662FC8;
  v1228[1] = *(_OWORD *)dbl_224662FD8;
  sub_223B46FEC((uint64_t)&v1219, 0, 3, 3, (uint64_t)&v1653, (uint64_t)v1228, COERCE_DOUBLE(0x520000001BLL), COERCE_DOUBLE(0x560000001FLL), v282, v283, v284, v285, v286, v287);
  v1227[4] = v1169;
  v1227[5] = v1170;
  v1227[6] = v1171;
  v1227[0] = v1165;
  v1227[1] = v1166;
  v1227[3] = v1168;
  v1227[2] = v1167;
  v1654 = 0;
  v1230[0] = xmmword_224662FE8;
  v1230[1] = *(_OWORD *)dbl_224662FF8;
  sub_223B46FEC((uint64_t)v1227, 1, 2, 2, (uint64_t)&v1654, (uint64_t)v1230, COERCE_DOUBLE(0x1D0000001CLL), COERCE_DOUBLE(0x3900000038), v288, v289, v290, v291, v292, v293);
  v1229[4] = v1169;
  v1229[5] = v1170;
  v1229[6] = v1171;
  v1229[0] = v1165;
  v1229[1] = v1166;
  v1229[3] = v1168;
  v1229[2] = v1167;
  v1655 = 0;
  v1232[0] = xmmword_224663008;
  v1232[1] = *(_OWORD *)dbl_224663018;
  sub_223B46FEC((uint64_t)v1229, 1, 2, 3, (uint64_t)&v1655, (uint64_t)v1232, COERCE_DOUBLE(0x540000001DLL), COERCE_DOUBLE(0x7000000039), v294, v295, v296, v297, v298, v299);
  v1231[4] = v1187;
  v1231[5] = v1188;
  v1231[6] = v1189;
  v1231[0] = v1183;
  v1231[1] = v1184;
  v1231[3] = v1186;
  v1231[2] = v1185;
  v1656 = 0;
  v1234[0] = xmmword_224663028;
  v1234[1] = *(_OWORD *)dbl_224663038;
  sub_223B46FEC((uint64_t)v1231, 1, 3, 2, (uint64_t)&v1656, (uint64_t)v1234, COERCE_DOUBLE(0x1F0000001ELL), COERCE_DOUBLE(0x3B0000003ALL), v300, v301, v302, v303, v304, v305);
  v1233[4] = v1187;
  v1233[5] = v1188;
  v1233[6] = v1189;
  v1233[0] = v1183;
  v1233[1] = v1184;
  v1233[3] = v1186;
  v1233[2] = v1185;
  v1657 = 0;
  v1236[0] = xmmword_224663048;
  v1236[1] = *(_OWORD *)dbl_224663058;
  sub_223B46FEC((uint64_t)v1233, 1, 3, 3, (uint64_t)&v1657, (uint64_t)v1236, COERCE_DOUBLE(0x560000001FLL), COERCE_DOUBLE(0x720000003BLL), v306, v307, v308, v309, v310, v311);
  v1235[4] = v1187;
  v1235[5] = v1188;
  v1235[6] = v1189;
  v1235[0] = v1183;
  v1235[1] = v1184;
  v1235[3] = v1186;
  v1235[2] = v1185;
  v1658 = 0;
  v1244[0] = xmmword_224663068;
  v1244[1] = *(_OWORD *)dbl_224663078;
  sub_223B46FEC((uint64_t)v1235, 2, 0, 0, (uint64_t)&v1658, (uint64_t)v1244, COERCE_DOUBLE(0x2100000020), COERCE_DOUBLE(0x2500000024), v312, v313, v314, v315, v316, v317);
  v1241 = v1187;
  v1242 = v1188;
  v1243 = v1189;
  v1237 = v1183;
  v1238 = v1184;
  v1240 = v1186;
  v1239 = v1185;
  v1659 = 0;
  v1246[0] = xmmword_224663088;
  v1246[1] = *(_OWORD *)dbl_224663098;
  sub_223B46FEC((uint64_t)&v1237, 2, 0, 1, (uint64_t)&v1659, (uint64_t)v1246, COERCE_DOUBLE(0x2800000021), COERCE_DOUBLE(0x2C00000025), v318, v319, v320, v321, v322, v323);
  v1245[4] = v1187;
  v1245[5] = v1188;
  v1245[6] = v1189;
  v1245[0] = v1183;
  v1245[1] = v1184;
  v1245[3] = v1186;
  v1245[2] = v1185;
  v1660 = 0;
  v1248[0] = xmmword_2246630A8;
  v1248[1] = *(_OWORD *)dbl_2246630B8;
  sub_223B46FEC((uint64_t)v1245, 2, 1, 0, (uint64_t)&v1660, (uint64_t)v1248, COERCE_DOUBLE(0x2300000022), COERCE_DOUBLE(0x2700000026), v324, v325, v326, v327, v328, v329);
  v1247[4] = v1187;
  v1247[5] = v1188;
  v1247[6] = v1189;
  v1247[0] = v1183;
  v1247[1] = v1184;
  v1247[3] = v1186;
  v1247[2] = v1185;
  v1661 = 0;
  v1250[0] = xmmword_2246630C8;
  v1250[1] = *(_OWORD *)dbl_2246630D8;
  sub_223B46FEC((uint64_t)v1247, 2, 1, 1, (uint64_t)&v1661, (uint64_t)v1250, COERCE_DOUBLE(0x2A00000023), COERCE_DOUBLE(0x2E00000027), v330, v331, v332, v333, v334, v335);
  v1249[4] = v1205;
  v1249[5] = v1206;
  v1249[6] = v1207;
  v1249[0] = v1201;
  v1249[1] = v1202;
  v1249[3] = v1204;
  v1249[2] = v1203;
  v1662 = 0;
  v1252[0] = xmmword_2246630E8;
  v1252[1] = *(_OWORD *)dbl_2246630F8;
  sub_223B46FEC((uint64_t)v1249, 3, 0, 0, (uint64_t)&v1662, (uint64_t)v1252, COERCE_DOUBLE(0x2500000024), COERCE_DOUBLE(0x10100000100), v336, v337, v338, v339, v340, v341);
  v1251[4] = v1205;
  v1251[5] = v1206;
  v1251[6] = v1207;
  v1251[0] = v1201;
  v1251[1] = v1202;
  v1251[3] = v1204;
  v1251[2] = v1203;
  v1663 = 0;
  v1254[0] = xmmword_224663108;
  v1254[1] = *(_OWORD *)dbl_224663118;
  sub_223B46FEC((uint64_t)v1251, 3, 0, 1, (uint64_t)&v1663, (uint64_t)v1254, COERCE_DOUBLE(0x2C00000025), COERCE_DOUBLE(0x10800000101), v342, v343, v344, v345, v346, v347);
  v1253[4] = v1205;
  v1253[5] = v1206;
  v1253[6] = v1207;
  v1253[0] = v1201;
  v1253[1] = v1202;
  v1253[3] = v1204;
  v1253[2] = v1203;
  v1664 = 0;
  v1262[0] = xmmword_224663128;
  v1262[1] = *(_OWORD *)dbl_224663138;
  sub_223B46FEC((uint64_t)v1253, 3, 1, 0, (uint64_t)&v1664, (uint64_t)v1262, COERCE_DOUBLE(0x2700000026), COERCE_DOUBLE(0x10300000102), v348, v349, v350, v351, v352, v353);
  v1259 = v1205;
  v1260 = v1206;
  v1261 = v1207;
  v1255 = v1201;
  v1256 = v1202;
  v1258 = v1204;
  v1257 = v1203;
  v1665 = 0;
  v1264[0] = xmmword_224663148;
  v1264[1] = *(_OWORD *)dbl_224663158;
  sub_223B46FEC((uint64_t)&v1255, 3, 1, 1, (uint64_t)&v1665, (uint64_t)v1264, COERCE_DOUBLE(0x2E00000027), COERCE_DOUBLE(0x10A00000103), v354, v355, v356, v357, v358, v359);
  v1263[4] = v1205;
  v1263[5] = v1206;
  v1263[6] = v1207;
  v1263[0] = v1201;
  v1263[1] = v1202;
  v1263[3] = v1204;
  v1263[2] = v1203;
  v1666 = 0;
  v1266[0] = xmmword_224663168;
  v1266[1] = *(_OWORD *)dbl_224663178;
  sub_223B46FEC((uint64_t)v1263, 2, 0, 2, (uint64_t)&v1666, (uint64_t)v1266, COERCE_DOUBLE(0x2900000028), COERCE_DOUBLE(0x2D0000002CLL), v360, v361, v362, v363, v364, v365);
  v1265[4] = v1205;
  v1265[5] = v1206;
  v1265[6] = v1207;
  v1265[0] = v1201;
  v1265[1] = v1202;
  v1265[3] = v1204;
  v1265[2] = v1203;
  v1667 = 0;
  v1268[0] = xmmword_224663188;
  v1268[1] = *(_OWORD *)dbl_224663198;
  sub_223B46FEC((uint64_t)v1265, 2, 0, 3, (uint64_t)&v1667, (uint64_t)v1268, COERCE_DOUBLE(0x6000000029), COERCE_DOUBLE(0x640000002DLL), v366, v367, v368, v369, v370, v371);
  v1267[4] = v1223;
  v1267[5] = v1224;
  v1267[6] = v1225;
  v1267[0] = v1219;
  v1267[1] = v1220;
  v1267[3] = v1222;
  v1267[2] = v1221;
  v1668 = 0;
  v1270[0] = xmmword_2246631A8;
  v1270[1] = *(_OWORD *)dbl_2246631B8;
  sub_223B46FEC((uint64_t)v1267, 2, 1, 2, (uint64_t)&v1668, (uint64_t)v1270, COERCE_DOUBLE(0x2B0000002ALL), COERCE_DOUBLE(0x2F0000002ELL), v372, v373, v374, v375, v376, v377);
  v1269[4] = v1223;
  v1269[5] = v1224;
  v1269[6] = v1225;
  v1269[0] = v1219;
  v1269[1] = v1220;
  v1269[3] = v1222;
  v1269[2] = v1221;
  v1669 = 0;
  v1272[0] = xmmword_2246631C8;
  v1272[1] = *(_OWORD *)dbl_2246631D8;
  sub_223B46FEC((uint64_t)v1269, 2, 1, 3, (uint64_t)&v1669, (uint64_t)v1272, COERCE_DOUBLE(0x620000002BLL), COERCE_DOUBLE(0x660000002FLL), v378, v379, v380, v381, v382, v383);
  v1271[4] = v1223;
  v1271[5] = v1224;
  v1271[6] = v1225;
  v1271[0] = v1219;
  v1271[1] = v1220;
  v1271[3] = v1222;
  v1271[2] = v1221;
  v1670 = 0;
  v1280[0] = xmmword_2246631E8;
  v1280[1] = *(_OWORD *)dbl_2246631F8;
  sub_223B46FEC((uint64_t)v1271, 3, 0, 2, (uint64_t)&v1670, (uint64_t)v1280, COERCE_DOUBLE(0x2D0000002CLL), COERCE_DOUBLE(0x10900000108), v384, v385, v386, v387, v388, v389);
  v1277 = v1223;
  v1278 = v1224;
  v1279 = v1225;
  v1273 = v1219;
  v1274 = v1220;
  v1276 = v1222;
  v1275 = v1221;
  v1671 = 0;
  v1282[0] = xmmword_224663208;
  v1282[1] = *(_OWORD *)dbl_224663218;
  sub_223B46FEC((uint64_t)&v1273, 3, 0, 3, (uint64_t)&v1671, (uint64_t)v1282, COERCE_DOUBLE(0x640000002DLL), COERCE_DOUBLE(0x14000000109), v390, v391, v392, v393, v394, v395);
  v1281[4] = v1223;
  v1281[5] = v1224;
  v1281[6] = v1225;
  v1281[0] = v1219;
  v1281[1] = v1220;
  v1281[3] = v1222;
  v1281[2] = v1221;
  v1672 = 0;
  v1284[0] = xmmword_224663228;
  v1284[1] = *(_OWORD *)dbl_224663238;
  sub_223B46FEC((uint64_t)v1281, 3, 1, 2, (uint64_t)&v1672, (uint64_t)v1284, COERCE_DOUBLE(0x2F0000002ELL), COERCE_DOUBLE(0x10B0000010ALL), v396, v397, v398, v399, v400, v401);
  v1283[4] = v1223;
  v1283[5] = v1224;
  v1283[6] = v1225;
  v1283[0] = v1219;
  v1283[1] = v1220;
  v1283[3] = v1222;
  v1283[2] = v1221;
  v1673 = 0;
  v1286[0] = xmmword_224663248;
  v1286[1] = *(_OWORD *)dbl_224663258;
  sub_223B46FEC((uint64_t)v1283, 3, 1, 3, (uint64_t)&v1673, (uint64_t)v1286, COERCE_DOUBLE(0x660000002FLL), COERCE_DOUBLE(0x1420000010BLL), v402, v403, v404, v405, v406, v407);
  v1285[4] = v1241;
  v1285[5] = v1242;
  v1285[6] = v1243;
  v1285[0] = v1237;
  v1285[1] = v1238;
  v1285[3] = v1240;
  v1285[2] = v1239;
  v1674 = 0;
  v1288[0] = xmmword_224663268;
  v1288[1] = *(_OWORD *)dbl_224663278;
  sub_223B46FEC((uint64_t)v1285, 2, 2, 0, (uint64_t)&v1674, (uint64_t)v1288, COERCE_DOUBLE(0x3100000030), COERCE_DOUBLE(0x3500000034), v408, v409, v410, v411, v412, v413);
  v1287[4] = v1241;
  v1287[5] = v1242;
  v1287[6] = v1243;
  v1287[0] = v1237;
  v1287[1] = v1238;
  v1287[3] = v1240;
  v1287[2] = v1239;
  v1675 = 0;
  v1290[0] = xmmword_224663288;
  v1290[1] = *(_OWORD *)dbl_224663298;
  sub_223B46FEC((uint64_t)v1287, 2, 2, 1, (uint64_t)&v1675, (uint64_t)v1290, COERCE_DOUBLE(0x3800000031), COERCE_DOUBLE(0x3C00000035), v414, v415, v416, v417, v418, v419);
  v1289[4] = v1241;
  v1289[5] = v1242;
  v1289[6] = v1243;
  v1289[0] = v1237;
  v1289[1] = v1238;
  v1289[3] = v1240;
  v1289[2] = v1239;
  v1676 = 0;
  v1298[0] = xmmword_2246632A8;
  v1298[1] = *(_OWORD *)dbl_2246632B8;
  sub_223B46FEC((uint64_t)v1289, 2, 3, 0, (uint64_t)&v1676, (uint64_t)v1298, COERCE_DOUBLE(0x3300000032), COERCE_DOUBLE(0x3700000036), v420, v421, v422, v423, v424, v425);
  v1295 = v1241;
  v1296 = v1242;
  v1297 = v1243;
  v1291 = v1237;
  v1292 = v1238;
  v1294 = v1240;
  v1293 = v1239;
  v1677 = 0;
  v1300[0] = xmmword_2246632C8;
  v1300[1] = *(_OWORD *)dbl_2246632D8;
  sub_223B46FEC((uint64_t)&v1291, 2, 3, 1, (uint64_t)&v1677, (uint64_t)v1300, COERCE_DOUBLE(0x3A00000033), COERCE_DOUBLE(0x3E00000037), v426, v427, v428, v429, v430, v431);
  v1299[4] = v1241;
  v1299[5] = v1242;
  v1299[6] = v1243;
  v1299[0] = v1237;
  v1299[1] = v1238;
  v1299[3] = v1240;
  v1299[2] = v1239;
  v1678 = 0;
  v1302[0] = xmmword_2246632E8;
  v1302[1] = *(_OWORD *)dbl_2246632F8;
  sub_223B46FEC((uint64_t)v1299, 3, 2, 0, (uint64_t)&v1678, (uint64_t)v1302, COERCE_DOUBLE(0x3500000034), COERCE_DOUBLE(0x11100000110), v432, v433, v434, v435, v436, v437);
  v1301[4] = v1241;
  v1301[5] = v1242;
  v1301[6] = v1243;
  v1301[0] = v1237;
  v1301[1] = v1238;
  v1301[3] = v1240;
  v1301[2] = v1239;
  v1679 = 0;
  v1304[0] = xmmword_224663308;
  v1304[1] = *(_OWORD *)dbl_224663318;
  sub_223B46FEC((uint64_t)v1301, 3, 2, 1, (uint64_t)&v1679, (uint64_t)v1304, COERCE_DOUBLE(0x3C00000035), COERCE_DOUBLE(0x11800000111), v438, v439, v440, v441, v442, v443);
  v1303[4] = v1259;
  v1303[5] = v1260;
  v1303[6] = v1261;
  v1303[0] = v1255;
  v1303[1] = v1256;
  v1303[3] = v1258;
  v1303[2] = v1257;
  v1680 = 0;
  v1306[0] = xmmword_224663328;
  v1306[1] = *(_OWORD *)dbl_224663338;
  sub_223B46FEC((uint64_t)v1303, 3, 3, 0, (uint64_t)&v1680, (uint64_t)v1306, COERCE_DOUBLE(0x3700000036), COERCE_DOUBLE(0x11300000112), v444, v445, v446, v447, v448, v449);
  v1305[4] = v1259;
  v1305[5] = v1260;
  v1305[6] = v1261;
  v1305[0] = v1255;
  v1305[1] = v1256;
  v1305[3] = v1258;
  v1305[2] = v1257;
  v1681 = 0;
  v1308[0] = xmmword_224663348;
  v1308[1] = *(_OWORD *)dbl_224663358;
  sub_223B46FEC((uint64_t)v1305, 3, 3, 1, (uint64_t)&v1681, (uint64_t)v1308, COERCE_DOUBLE(0x3E00000037), COERCE_DOUBLE(0x11A00000113), v450, v451, v452, v453, v454, v455);
  v1307[4] = v1259;
  v1307[5] = v1260;
  v1307[6] = v1261;
  v1307[0] = v1255;
  v1307[1] = v1256;
  v1307[3] = v1258;
  v1307[2] = v1257;
  v1682 = 0;
  v1316[0] = xmmword_224663368;
  v1316[1] = *(_OWORD *)dbl_224663378;
  sub_223B46FEC((uint64_t)v1307, 2, 2, 2, (uint64_t)&v1682, (uint64_t)v1316, COERCE_DOUBLE(0x3900000038), COERCE_DOUBLE(0x3D0000003CLL), v456, v457, v458, v459, v460, v461);
  v1313 = v1259;
  v1314 = v1260;
  v1315 = v1261;
  v1309 = v1255;
  v1310 = v1256;
  v1312 = v1258;
  v1311 = v1257;
  v1683 = 0;
  v1318[0] = xmmword_224663388;
  v1318[1] = *(_OWORD *)dbl_224663398;
  sub_223B46FEC((uint64_t)&v1309, 2, 2, 3, (uint64_t)&v1683, (uint64_t)v1318, COERCE_DOUBLE(0x7000000039), COERCE_DOUBLE(0x740000003DLL), v462, v463, v464, v465, v466, v467);
  v1317[4] = v1259;
  v1317[5] = v1260;
  v1317[6] = v1261;
  v1317[0] = v1255;
  v1317[1] = v1256;
  v1317[3] = v1258;
  v1317[2] = v1257;
  v1684 = 0;
  v1320[0] = xmmword_2246633A8;
  v1320[1] = *(_OWORD *)dbl_2246633B8;
  sub_223B46FEC((uint64_t)v1317, 2, 3, 2, (uint64_t)&v1684, (uint64_t)v1320, COERCE_DOUBLE(0x3B0000003ALL), COERCE_DOUBLE(0x3F0000003ELL), v468, v469, v470, v471, v472, v473);
  v1319[4] = v1259;
  v1319[5] = v1260;
  v1319[6] = v1261;
  v1319[0] = v1255;
  v1319[1] = v1256;
  v1319[3] = v1258;
  v1319[2] = v1257;
  v1685 = 0;
  v1322[0] = xmmword_2246633C8;
  v1322[1] = *(_OWORD *)dbl_2246633D8;
  sub_223B46FEC((uint64_t)v1319, 2, 3, 3, (uint64_t)&v1685, (uint64_t)v1322, COERCE_DOUBLE(0x720000003BLL), COERCE_DOUBLE(0x760000003FLL), v474, v475, v476, v477, v478, v479);
  v1321[4] = v1277;
  v1321[5] = v1278;
  v1321[6] = v1279;
  v1321[0] = v1273;
  v1321[1] = v1274;
  v1321[3] = v1276;
  v1321[2] = v1275;
  v1686 = 0;
  v1324[0] = xmmword_2246633E8;
  v1324[1] = *(_OWORD *)dbl_2246633F8;
  sub_223B46FEC((uint64_t)v1321, 3, 2, 2, (uint64_t)&v1686, (uint64_t)v1324, COERCE_DOUBLE(0x3D0000003CLL), COERCE_DOUBLE(0x11900000118), v480, v481, v482, v483, v484, v485);
  v1323[4] = v1277;
  v1323[5] = v1278;
  v1323[6] = v1279;
  v1323[0] = v1273;
  v1323[1] = v1274;
  v1323[3] = v1276;
  v1323[2] = v1275;
  v1687 = 0;
  v1326[0] = xmmword_224663408;
  v1326[1] = *(_OWORD *)dbl_224663418;
  sub_223B46FEC((uint64_t)v1323, 3, 2, 3, (uint64_t)&v1687, (uint64_t)v1326, COERCE_DOUBLE(0x740000003DLL), COERCE_DOUBLE(0x15000000119), v486, v487, v488, v489, v490, v491);
  v1325[4] = v1277;
  v1325[5] = v1278;
  v1325[6] = v1279;
  v1325[0] = v1273;
  v1325[1] = v1274;
  v1325[3] = v1276;
  v1325[2] = v1275;
  v1688 = 0;
  v1334[0] = xmmword_224663428;
  v1334[1] = *(_OWORD *)dbl_224663438;
  sub_223B46FEC((uint64_t)v1325, 3, 3, 2, (uint64_t)&v1688, (uint64_t)v1334, COERCE_DOUBLE(0x3F0000003ELL), COERCE_DOUBLE(0x11B0000011ALL), v492, v493, v494, v495, v496, v497);
  v1331 = v1277;
  v1332 = v1278;
  v1333 = v1279;
  v1327 = v1273;
  v1328 = v1274;
  v1330 = v1276;
  v1329 = v1275;
  v1689 = 0;
  v1336[0] = xmmword_224663448;
  v1336[1] = *(_OWORD *)dbl_224663458;
  sub_223B46FEC((uint64_t)&v1327, 3, 3, 3, (uint64_t)&v1689, (uint64_t)v1336, COERCE_DOUBLE(0x760000003FLL), COERCE_DOUBLE(0x1520000011BLL), v498, v499, v500, v501, v502, v503);
  v1335[4] = v1277;
  v1335[5] = v1278;
  v1335[6] = v1279;
  v1335[0] = v1273;
  v1335[1] = v1274;
  v1335[3] = v1276;
  v1335[2] = v1275;
  v1690 = 0;
  v1338[0] = xmmword_224663468;
  v1338[1] = *(_OWORD *)dbl_224663478;
  sub_223B46FEC((uint64_t)v1335, 0, 0, 4, (uint64_t)&v1690, (uint64_t)v1338, COERCE_DOUBLE(0x4100000040), COERCE_DOUBLE(0x4500000044), v504, v505, v506, v507, v508, v509);
  v1337[4] = v1277;
  v1337[5] = v1278;
  v1337[6] = v1279;
  v1337[0] = v1273;
  v1337[1] = v1274;
  v1337[3] = v1276;
  v1337[2] = v1275;
  v1691 = 0;
  v1340[0] = xmmword_224663488;
  v1340[1] = *(_OWORD *)dbl_224663498;
  sub_223B46FEC((uint64_t)v1337, 0, 0, 5, (uint64_t)&v1691, (uint64_t)v1340, COERCE_DOUBLE(0x4800000041), COERCE_DOUBLE(0x4C00000045), v510, v511, v512, v513, v514, v515);
  v1339[4] = v1295;
  v1339[5] = v1296;
  v1339[6] = v1297;
  v1339[0] = v1291;
  v1339[1] = v1292;
  v1339[3] = v1294;
  v1339[2] = v1293;
  v1692 = 0;
  v1342[0] = xmmword_2246634A8;
  v1342[1] = *(_OWORD *)dbl_2246634B8;
  sub_223B46FEC((uint64_t)v1339, 0, 1, 4, (uint64_t)&v1692, (uint64_t)v1342, COERCE_DOUBLE(0x4300000042), COERCE_DOUBLE(0x4700000046), v516, v517, v518, v519, v520, v521);
  v1341[4] = v1295;
  v1341[5] = v1296;
  v1341[6] = v1297;
  v1341[0] = v1291;
  v1341[1] = v1292;
  v1341[3] = v1294;
  v1341[2] = v1293;
  v1693 = 0;
  v1344[0] = xmmword_2246634C8;
  v1344[1] = *(_OWORD *)dbl_2246634D8;
  sub_223B46FEC((uint64_t)v1341, 0, 1, 5, (uint64_t)&v1693, (uint64_t)v1344, COERCE_DOUBLE(0x4A00000043), COERCE_DOUBLE(0x4E00000047), v522, v523, v524, v525, v526, v527);
  v1343[4] = v1295;
  v1343[5] = v1296;
  v1343[6] = v1297;
  v1343[0] = v1291;
  v1343[1] = v1292;
  v1343[3] = v1294;
  v1343[2] = v1293;
  v1694 = 0;
  v1352[0] = xmmword_2246634E8;
  v1352[1] = *(_OWORD *)dbl_2246634F8;
  sub_223B46FEC((uint64_t)v1343, 1, 0, 4, (uint64_t)&v1694, (uint64_t)v1352, COERCE_DOUBLE(0x4500000044), COERCE_DOUBLE(0x6100000060), v528, v529, v530, v531, v532, v533);
  v1349 = v1295;
  v1350 = v1296;
  v1351 = v1297;
  v1345 = v1291;
  v1346 = v1292;
  v1348 = v1294;
  v1347 = v1293;
  v1695 = 0;
  v1354[0] = xmmword_224663508;
  v1354[1] = *(_OWORD *)dbl_224663518;
  sub_223B46FEC((uint64_t)&v1345, 1, 0, 5, (uint64_t)&v1695, (uint64_t)v1354, COERCE_DOUBLE(0x4C00000045), COERCE_DOUBLE(0x6800000061), v534, v535, v536, v537, v538, v539);
  v1353[4] = v1295;
  v1353[5] = v1296;
  v1353[6] = v1297;
  v1353[0] = v1291;
  v1353[1] = v1292;
  v1353[3] = v1294;
  v1353[2] = v1293;
  v1696 = 0;
  v1356[0] = xmmword_224663528;
  v1356[1] = *(_OWORD *)dbl_224663538;
  sub_223B46FEC((uint64_t)v1353, 1, 1, 4, (uint64_t)&v1696, (uint64_t)v1356, COERCE_DOUBLE(0x4700000046), COERCE_DOUBLE(0x6300000062), v540, v541, v542, v543, v544, v545);
  v1355[4] = v1295;
  v1355[5] = v1296;
  v1355[6] = v1297;
  v1355[0] = v1291;
  v1355[1] = v1292;
  v1355[3] = v1294;
  v1355[2] = v1293;
  v1697 = 0;
  v1358[0] = xmmword_224663548;
  v1358[1] = *(_OWORD *)dbl_224663558;
  sub_223B46FEC((uint64_t)v1355, 1, 1, 5, (uint64_t)&v1697, (uint64_t)v1358, COERCE_DOUBLE(0x4E00000047), COERCE_DOUBLE(0x6A00000063), v546, v547, v548, v549, v550, v551);
  v1357[4] = v1313;
  v1357[5] = v1314;
  v1357[6] = v1315;
  v1357[0] = v1309;
  v1357[1] = v1310;
  v1357[3] = v1312;
  v1357[2] = v1311;
  v1698 = 0;
  v1360[0] = xmmword_224663568;
  v1360[1] = *(_OWORD *)dbl_224663578;
  sub_223B46FEC((uint64_t)v1357, 0, 0, 6, (uint64_t)&v1698, (uint64_t)v1360, COERCE_DOUBLE(0x4900000048), COERCE_DOUBLE(0x4D0000004CLL), v552, v553, v554, v555, v556, v557);
  v1359[4] = v1313;
  v1359[5] = v1314;
  v1359[6] = v1315;
  v1359[0] = v1309;
  v1359[1] = v1310;
  v1359[3] = v1312;
  v1359[2] = v1311;
  v1699 = 0x100010001000100;
  v1362[0] = xmmword_224663588;
  v1362[1] = *(_OWORD *)dbl_224663598;
  sub_223B46FEC((uint64_t)v1359, 0, 0, 7, (uint64_t)&v1699, (uint64_t)v1362, COERCE_DOUBLE(73), COERCE_DOUBLE(0x40000004DLL), v558, v559, v560, v561, v562, v563);
  v1361[4] = v1313;
  v1361[5] = v1314;
  v1361[6] = v1315;
  v1361[0] = v1309;
  v1361[1] = v1310;
  v1361[3] = v1312;
  v1361[2] = v1311;
  v1700 = 0;
  v1370[0] = xmmword_2246635A8;
  v1370[1] = *(_OWORD *)dbl_2246635B8;
  sub_223B46FEC((uint64_t)v1361, 0, 1, 6, (uint64_t)&v1700, (uint64_t)v1370, COERCE_DOUBLE(0x4B0000004ALL), COERCE_DOUBLE(0x4F0000004ELL), v564, v565, v566, v567, v568, v569);
  v1367 = v1313;
  v1368 = v1314;
  v1369 = v1315;
  v1363 = v1309;
  v1364 = v1310;
  v1366 = v1312;
  v1365 = v1311;
  v1701 = 0x100010001000100;
  v1372[0] = xmmword_2246635C8;
  v1372[1] = *(_OWORD *)dbl_2246635D8;
  sub_223B46FEC((uint64_t)&v1363, 0, 1, 7, (uint64_t)&v1701, (uint64_t)v1372, COERCE_DOUBLE(0x20000004BLL), COERCE_DOUBLE(0x60000004FLL), v570, v571, v572, v573, v574, v575);
  v1371[4] = v1313;
  v1371[5] = v1314;
  v1371[6] = v1315;
  v1371[0] = v1309;
  v1371[1] = v1310;
  v1371[3] = v1312;
  v1371[2] = v1311;
  v1702 = 0;
  v1374[0] = xmmword_2246635E8;
  v1374[1] = *(_OWORD *)dbl_2246635F8;
  sub_223B46FEC((uint64_t)v1371, 1, 0, 6, (uint64_t)&v1702, (uint64_t)v1374, COERCE_DOUBLE(0x4D0000004CLL), COERCE_DOUBLE(0x6900000068), v576, v577, v578, v579, v580, v581);
  v1373[4] = v1313;
  v1373[5] = v1314;
  v1373[6] = v1315;
  v1373[0] = v1309;
  v1373[1] = v1310;
  v1373[3] = v1312;
  v1373[2] = v1311;
  v1703 = 0x100010001000100;
  v1376[0] = xmmword_224663608;
  v1376[1] = *(_OWORD *)dbl_224663618;
  sub_223B46FEC((uint64_t)v1373, 1, 0, 7, (uint64_t)&v1703, (uint64_t)v1376, COERCE_DOUBLE(0x40000004DLL), COERCE_DOUBLE(0x2000000069), v582, v583, v584, v585, v586, v587);
  v1375[4] = v1331;
  v1375[5] = v1332;
  v1375[6] = v1333;
  v1375[0] = v1327;
  v1375[1] = v1328;
  v1375[3] = v1330;
  v1375[2] = v1329;
  v1704 = 0;
  v1378[0] = xmmword_224663628;
  v1378[1] = *(_OWORD *)dbl_224663638;
  sub_223B46FEC((uint64_t)v1375, 1, 1, 6, (uint64_t)&v1704, (uint64_t)v1378, COERCE_DOUBLE(0x4F0000004ELL), COERCE_DOUBLE(0x6B0000006ALL), v588, v589, v590, v591, v592, v593);
  v1377[4] = v1331;
  v1377[5] = v1332;
  v1377[6] = v1333;
  v1377[0] = v1327;
  v1377[1] = v1328;
  v1377[3] = v1330;
  v1377[2] = v1329;
  v1705 = 0x100010001000100;
  v1380[0] = xmmword_224663648;
  v1380[1] = *(_OWORD *)dbl_224663658;
  sub_223B46FEC((uint64_t)v1377, 1, 1, 7, (uint64_t)&v1705, (uint64_t)v1380, COERCE_DOUBLE(0x60000004FLL), COERCE_DOUBLE(0x220000006BLL), v594, v595, v596, v597, v598, v599);
  v1379[4] = v1331;
  v1379[5] = v1332;
  v1379[6] = v1333;
  v1379[0] = v1327;
  v1379[1] = v1328;
  v1379[3] = v1330;
  v1379[2] = v1329;
  v1706 = 0;
  v1388[0] = xmmword_224663668;
  v1388[1] = *(_OWORD *)dbl_224663678;
  sub_223B46FEC((uint64_t)v1379, 0, 2, 4, (uint64_t)&v1706, (uint64_t)v1388, COERCE_DOUBLE(0x5100000050), COERCE_DOUBLE(0x5500000054), v600, v601, v602, v603, v604, v605);
  v1385 = v1331;
  v1386 = v1332;
  v1387 = v1333;
  v1381 = v1327;
  v1382 = v1328;
  v1384 = v1330;
  v1383 = v1329;
  v1707 = 0;
  v1390[0] = xmmword_224663688;
  v1390[1] = *(_OWORD *)dbl_224663698;
  sub_223B46FEC((uint64_t)&v1381, 0, 2, 5, (uint64_t)&v1707, (uint64_t)v1390, COERCE_DOUBLE(0x5800000051), COERCE_DOUBLE(0x5C00000055), v606, v607, v608, v609, v610, v611);
  v1389[4] = v1331;
  v1389[5] = v1332;
  v1389[6] = v1333;
  v1389[0] = v1327;
  v1389[1] = v1328;
  v1389[3] = v1330;
  v1389[2] = v1329;
  v1708 = 0;
  v1392[0] = xmmword_2246636A8;
  v1392[1] = *(_OWORD *)dbl_2246636B8;
  sub_223B46FEC((uint64_t)v1389, 0, 3, 4, (uint64_t)&v1708, (uint64_t)v1392, COERCE_DOUBLE(0x5300000052), COERCE_DOUBLE(0x5700000056), v612, v613, v614, v615, v616, v617);
  v1391[4] = v1331;
  v1391[5] = v1332;
  v1391[6] = v1333;
  v1391[0] = v1327;
  v1391[1] = v1328;
  v1391[3] = v1330;
  v1391[2] = v1329;
  v1709 = 0;
  v1394[0] = xmmword_2246636C8;
  v1394[1] = *(_OWORD *)dbl_2246636D8;
  sub_223B46FEC((uint64_t)v1391, 0, 3, 5, (uint64_t)&v1709, (uint64_t)v1394, COERCE_DOUBLE(0x5A00000053), COERCE_DOUBLE(0x5E00000057), v618, v619, v620, v621, v622, v623);
  v1393[4] = v1349;
  v1393[5] = v1350;
  v1393[6] = v1351;
  v1393[0] = v1345;
  v1393[1] = v1346;
  v1393[3] = v1348;
  v1393[2] = v1347;
  v1710 = 0;
  v1396[0] = xmmword_2246636E8;
  v1396[1] = *(_OWORD *)dbl_2246636F8;
  sub_223B46FEC((uint64_t)v1393, 1, 2, 4, (uint64_t)&v1710, (uint64_t)v1396, COERCE_DOUBLE(0x5500000054), COERCE_DOUBLE(0x7100000070), v624, v625, v626, v627, v628, v629);
  v1395[4] = v1349;
  v1395[5] = v1350;
  v1395[6] = v1351;
  v1395[0] = v1345;
  v1395[1] = v1346;
  v1395[3] = v1348;
  v1395[2] = v1347;
  v1711 = 0;
  v1398[0] = xmmword_224663708;
  v1398[1] = *(_OWORD *)dbl_224663718;
  sub_223B46FEC((uint64_t)v1395, 1, 2, 5, (uint64_t)&v1711, (uint64_t)v1398, COERCE_DOUBLE(0x5C00000055), COERCE_DOUBLE(0x7800000071), v630, v631, v632, v633, v634, v635);
  v1397[4] = v1349;
  v1397[5] = v1350;
  v1397[6] = v1351;
  v1397[0] = v1345;
  v1397[1] = v1346;
  v1397[3] = v1348;
  v1397[2] = v1347;
  v1712 = 0;
  v1406[0] = xmmword_224663728;
  v1406[1] = *(_OWORD *)dbl_224663738;
  sub_223B46FEC((uint64_t)v1397, 1, 3, 4, (uint64_t)&v1712, (uint64_t)v1406, COERCE_DOUBLE(0x5700000056), COERCE_DOUBLE(0x7300000072), v636, v637, v638, v639, v640, v641);
  v1403 = v1349;
  v1404 = v1350;
  v1405 = v1351;
  v1399 = v1345;
  v1400 = v1346;
  v1402 = v1348;
  v1401 = v1347;
  v1713 = 0;
  v1408[0] = xmmword_224663748;
  v1408[1] = *(_OWORD *)dbl_224663758;
  sub_223B46FEC((uint64_t)&v1399, 1, 3, 5, (uint64_t)&v1713, (uint64_t)v1408, COERCE_DOUBLE(0x5E00000057), COERCE_DOUBLE(0x7A00000073), v642, v643, v644, v645, v646, v647);
  v1407[4] = v1349;
  v1407[5] = v1350;
  v1407[6] = v1351;
  v1407[0] = v1345;
  v1407[1] = v1346;
  v1407[3] = v1348;
  v1407[2] = v1347;
  v1714 = 0;
  v1410[0] = xmmword_224663768;
  v1410[1] = *(_OWORD *)dbl_224663778;
  sub_223B46FEC((uint64_t)v1407, 0, 2, 6, (uint64_t)&v1714, (uint64_t)v1410, COERCE_DOUBLE(0x5900000058), COERCE_DOUBLE(0x5D0000005CLL), v648, v649, v650, v651, v652, v653);
  v1409[4] = v1349;
  v1409[5] = v1350;
  v1409[6] = v1351;
  v1409[0] = v1345;
  v1409[1] = v1346;
  v1409[3] = v1348;
  v1409[2] = v1347;
  v1715 = 0x100010001000100;
  v1412[0] = xmmword_224663788;
  v1412[1] = *(_OWORD *)dbl_224663798;
  sub_223B46FEC((uint64_t)v1409, 0, 2, 7, (uint64_t)&v1715, (uint64_t)v1412, COERCE_DOUBLE(0x1000000059), COERCE_DOUBLE(0x140000005DLL), v654, v655, v656, v657, v658, v659);
  v1411[4] = v1367;
  v1411[5] = v1368;
  v1411[6] = v1369;
  v1411[0] = v1363;
  v1411[1] = v1364;
  v1411[3] = v1366;
  v1411[2] = v1365;
  v1716 = 0;
  v1414[0] = xmmword_2246637A8;
  v1414[1] = *(_OWORD *)dbl_2246637B8;
  sub_223B46FEC((uint64_t)v1411, 0, 3, 6, (uint64_t)&v1716, (uint64_t)v1414, COERCE_DOUBLE(0x5B0000005ALL), COERCE_DOUBLE(0x5F0000005ELL), v660, v661, v662, v663, v664, v665);
  v1413[4] = v1367;
  v1413[5] = v1368;
  v1413[6] = v1369;
  v1413[0] = v1363;
  v1413[1] = v1364;
  v1413[3] = v1366;
  v1413[2] = v1365;
  v1717 = 0x100010001000100;
  v1416[0] = xmmword_2246637C8;
  v1416[1] = *(_OWORD *)dbl_2246637D8;
  sub_223B46FEC((uint64_t)v1413, 0, 3, 7, (uint64_t)&v1717, (uint64_t)v1416, COERCE_DOUBLE(0x120000005BLL), COERCE_DOUBLE(0x160000005FLL), v666, v667, v668, v669, v670, v671);
  v1415[4] = v1367;
  v1415[5] = v1368;
  v1415[6] = v1369;
  v1415[0] = v1363;
  v1415[1] = v1364;
  v1415[3] = v1366;
  v1415[2] = v1365;
  v1718 = 0;
  v1424[0] = xmmword_2246637E8;
  v1424[1] = *(_OWORD *)dbl_2246637F8;
  sub_223B46FEC((uint64_t)v1415, 1, 2, 6, (uint64_t)&v1718, (uint64_t)v1424, COERCE_DOUBLE(0x5D0000005CLL), COERCE_DOUBLE(0x7900000078), v672, v673, v674, v675, v676, v677);
  v1421 = v1367;
  v1422 = v1368;
  v1423 = v1369;
  v1417 = v1363;
  v1418 = v1364;
  v1420 = v1366;
  v1419 = v1365;
  v1719 = 0x100010001000100;
  v1426[0] = xmmword_224663808;
  v1426[1] = *(_OWORD *)dbl_224663818;
  sub_223B46FEC((uint64_t)&v1417, 1, 2, 7, (uint64_t)&v1719, (uint64_t)v1426, COERCE_DOUBLE(0x140000005DLL), COERCE_DOUBLE(0x3000000079), v678, v679, v680, v681, v682, v683);
  v1425[4] = v1367;
  v1425[5] = v1368;
  v1425[6] = v1369;
  v1425[0] = v1363;
  v1425[1] = v1364;
  v1425[3] = v1366;
  v1425[2] = v1365;
  v1720 = 0;
  v1428[0] = xmmword_224663828;
  v1428[1] = *(_OWORD *)dbl_224663838;
  sub_223B46FEC((uint64_t)v1425, 1, 3, 6, (uint64_t)&v1720, (uint64_t)v1428, COERCE_DOUBLE(0x5F0000005ELL), COERCE_DOUBLE(0x7B0000007ALL), v684, v685, v686, v687, v688, v689);
  v1427[4] = v1367;
  v1427[5] = v1368;
  v1427[6] = v1369;
  v1427[0] = v1363;
  v1427[1] = v1364;
  v1427[3] = v1366;
  v1427[2] = v1365;
  v1721 = 0x100010001000100;
  v1430[0] = xmmword_224663848;
  v1430[1] = *(_OWORD *)dbl_224663858;
  sub_223B46FEC((uint64_t)v1427, 1, 3, 7, (uint64_t)&v1721, (uint64_t)v1430, COERCE_DOUBLE(0x160000005FLL), COERCE_DOUBLE(0x320000007BLL), v690, v691, v692, v693, v694, v695);
  v1429[4] = v1385;
  v1429[5] = v1386;
  v1429[6] = v1387;
  v1429[0] = v1381;
  v1429[1] = v1382;
  v1429[3] = v1384;
  v1429[2] = v1383;
  v1722 = 0;
  v1432[0] = xmmword_224663868;
  v1432[1] = *(_OWORD *)dbl_224663878;
  sub_223B46FEC((uint64_t)v1429, 2, 0, 4, (uint64_t)&v1722, (uint64_t)v1432, COERCE_DOUBLE(0x6100000060), COERCE_DOUBLE(0x6500000064), v696, v697, v698, v699, v700, v701);
  v1431[4] = v1385;
  v1431[5] = v1386;
  v1431[6] = v1387;
  v1431[0] = v1381;
  v1431[1] = v1382;
  v1431[3] = v1384;
  v1431[2] = v1383;
  v1723 = 0;
  v1434[0] = xmmword_224663888;
  v1434[1] = *(_OWORD *)dbl_224663898;
  sub_223B46FEC((uint64_t)v1431, 2, 0, 5, (uint64_t)&v1723, (uint64_t)v1434, COERCE_DOUBLE(0x6800000061), COERCE_DOUBLE(0x6C00000065), v702, v703, v704, v705, v706, v707);
  v1433[4] = v1385;
  v1433[5] = v1386;
  v1433[6] = v1387;
  v1433[0] = v1381;
  v1433[1] = v1382;
  v1433[3] = v1384;
  v1433[2] = v1383;
  v1724 = 0;
  v1442[0] = xmmword_2246638A8;
  v1442[1] = *(_OWORD *)dbl_2246638B8;
  sub_223B46FEC((uint64_t)v1433, 2, 1, 4, (uint64_t)&v1724, (uint64_t)v1442, COERCE_DOUBLE(0x6300000062), COERCE_DOUBLE(0x6700000066), v708, v709, v710, v711, v712, v713);
  v1439 = v1385;
  v1440 = v1386;
  v1441 = v1387;
  v1435 = v1381;
  v1436 = v1382;
  v1438 = v1384;
  v1437 = v1383;
  v1725 = 0;
  v1444[0] = xmmword_2246638C8;
  v1444[1] = *(_OWORD *)dbl_2246638D8;
  sub_223B46FEC((uint64_t)&v1435, 2, 1, 5, (uint64_t)&v1725, (uint64_t)v1444, COERCE_DOUBLE(0x6A00000063), COERCE_DOUBLE(0x6E00000067), v714, v715, v716, v717, v718, v719);
  v1443[4] = v1385;
  v1443[5] = v1386;
  v1443[6] = v1387;
  v1443[0] = v1381;
  v1443[1] = v1382;
  v1443[3] = v1384;
  v1443[2] = v1383;
  v1726 = 0;
  v1446[0] = xmmword_2246638E8;
  v1446[1] = *(_OWORD *)dbl_2246638F8;
  sub_223B46FEC((uint64_t)v1443, 3, 0, 4, (uint64_t)&v1726, (uint64_t)v1446, COERCE_DOUBLE(0x6500000064), COERCE_DOUBLE(0x14100000140), v720, v721, v722, v723, v724, v725);
  v1445[4] = v1385;
  v1445[5] = v1386;
  v1445[6] = v1387;
  v1445[0] = v1381;
  v1445[1] = v1382;
  v1445[3] = v1384;
  v1445[2] = v1383;
  v1727 = 0;
  v1448[0] = xmmword_224663908;
  v1448[1] = *(_OWORD *)dbl_224663918;
  sub_223B46FEC((uint64_t)v1445, 3, 0, 5, (uint64_t)&v1727, (uint64_t)v1448, COERCE_DOUBLE(0x6C00000065), COERCE_DOUBLE(0x14800000141), v726, v727, v728, v729, v730, v731);
  v1447[4] = v1403;
  v1447[5] = v1404;
  v1447[6] = v1405;
  v1447[0] = v1399;
  v1447[1] = v1400;
  v1447[3] = v1402;
  v1447[2] = v1401;
  v1728 = 0;
  v1450[0] = xmmword_224663928;
  v1450[1] = *(_OWORD *)dbl_224663938;
  sub_223B46FEC((uint64_t)v1447, 3, 1, 4, (uint64_t)&v1728, (uint64_t)v1450, COERCE_DOUBLE(0x6700000066), COERCE_DOUBLE(0x14300000142), v732, v733, v734, v735, v736, v737);
  v1449[4] = v1403;
  v1449[5] = v1404;
  v1449[6] = v1405;
  v1449[0] = v1399;
  v1449[1] = v1400;
  v1449[3] = v1402;
  v1449[2] = v1401;
  v1729 = 0;
  v1452[0] = xmmword_224663948;
  v1452[1] = *(_OWORD *)dbl_224663958;
  sub_223B46FEC((uint64_t)v1449, 3, 1, 5, (uint64_t)&v1729, (uint64_t)v1452, COERCE_DOUBLE(0x6E00000067), COERCE_DOUBLE(0x14A00000143), v738, v739, v740, v741, v742, v743);
  v1451[4] = v1403;
  v1451[5] = v1404;
  v1451[6] = v1405;
  v1451[0] = v1399;
  v1451[1] = v1400;
  v1451[3] = v1402;
  v1451[2] = v1401;
  v1730 = 0;
  v1460[0] = xmmword_224663968;
  v1460[1] = *(_OWORD *)dbl_224663978;
  sub_223B46FEC((uint64_t)v1451, 2, 0, 6, (uint64_t)&v1730, (uint64_t)v1460, COERCE_DOUBLE(0x6900000068), COERCE_DOUBLE(0x6D0000006CLL), v744, v745, v746, v747, v748, v749);
  v1457 = v1403;
  v1458 = v1404;
  v1459 = v1405;
  v1453 = v1399;
  v1454 = v1400;
  v1456 = v1402;
  v1455 = v1401;
  v1731 = 0x100010001000100;
  v1462[0] = xmmword_224663988;
  v1462[1] = *(_OWORD *)dbl_224663998;
  sub_223B46FEC((uint64_t)&v1453, 2, 0, 7, (uint64_t)&v1731, (uint64_t)v1462, COERCE_DOUBLE(0x2000000069), COERCE_DOUBLE(0x240000006DLL), v750, v751, v752, v753, v754, v755);
  v1461[4] = v1403;
  v1461[5] = v1404;
  v1461[6] = v1405;
  v1461[0] = v1399;
  v1461[1] = v1400;
  v1461[3] = v1402;
  v1461[2] = v1401;
  v1732 = 0;
  v1464[0] = xmmword_2246639A8;
  v1464[1] = *(_OWORD *)dbl_2246639B8;
  sub_223B46FEC((uint64_t)v1461, 2, 1, 6, (uint64_t)&v1732, (uint64_t)v1464, COERCE_DOUBLE(0x6B0000006ALL), COERCE_DOUBLE(0x6F0000006ELL), v756, v757, v758, v759, v760, v761);
  v1463[4] = v1403;
  v1463[5] = v1404;
  v1463[6] = v1405;
  v1463[0] = v1399;
  v1463[1] = v1400;
  v1463[3] = v1402;
  v1463[2] = v1401;
  v1733 = 0x100010001000100;
  v1466[0] = xmmword_2246639C8;
  v1466[1] = *(_OWORD *)dbl_2246639D8;
  sub_223B46FEC((uint64_t)v1463, 2, 1, 7, (uint64_t)&v1733, (uint64_t)v1466, COERCE_DOUBLE(0x220000006BLL), COERCE_DOUBLE(0x260000006FLL), v762, v763, v764, v765, v766, v767);
  v1465[4] = v1421;
  v1465[5] = v1422;
  v1465[6] = v1423;
  v1465[0] = v1417;
  v1465[1] = v1418;
  v1465[3] = v1420;
  v1465[2] = v1419;
  v1734 = 0;
  v1468[0] = xmmword_2246639E8;
  v1468[1] = *(_OWORD *)dbl_2246639F8;
  sub_223B46FEC((uint64_t)v1465, 3, 0, 6, (uint64_t)&v1734, (uint64_t)v1468, COERCE_DOUBLE(0x6D0000006CLL), COERCE_DOUBLE(0x14900000148), v768, v769, v770, v771, v772, v773);
  v1467[4] = v1421;
  v1467[5] = v1422;
  v1467[6] = v1423;
  v1467[0] = v1417;
  v1467[1] = v1418;
  v1467[3] = v1420;
  v1467[2] = v1419;
  v1735 = 0x100010001000100;
  v1470[0] = xmmword_224663A08;
  v1470[1] = *(_OWORD *)dbl_224663A18;
  sub_223B46FEC((uint64_t)v1467, 3, 0, 7, (uint64_t)&v1735, (uint64_t)v1470, COERCE_DOUBLE(0x240000006DLL), COERCE_DOUBLE(0x10000000149), v774, v775, v776, v777, v778, v779);
  v1469[4] = v1421;
  v1469[5] = v1422;
  v1469[6] = v1423;
  v1469[0] = v1417;
  v1469[1] = v1418;
  v1469[3] = v1420;
  v1469[2] = v1419;
  v1736 = 0;
  v1478[0] = xmmword_224663A28;
  v1478[1] = *(_OWORD *)dbl_224663A38;
  sub_223B46FEC((uint64_t)v1469, 3, 1, 6, (uint64_t)&v1736, (uint64_t)v1478, COERCE_DOUBLE(0x6F0000006ELL), COERCE_DOUBLE(0x14B0000014ALL), v780, v781, v782, v783, v784, v785);
  v1475 = v1421;
  v1476 = v1422;
  v1477 = v1423;
  v1471 = v1417;
  v1472 = v1418;
  v1474 = v1420;
  v1473 = v1419;
  v1737 = 0x100010001000100;
  v1480[0] = xmmword_224663A48;
  v1480[1] = *(_OWORD *)dbl_224663A58;
  sub_223B46FEC((uint64_t)&v1471, 3, 1, 7, (uint64_t)&v1737, (uint64_t)v1480, COERCE_DOUBLE(0x260000006FLL), COERCE_DOUBLE(0x1020000014BLL), v786, v787, v788, v789, v790, v791);
  v1479[4] = v1421;
  v1479[5] = v1422;
  v1479[6] = v1423;
  v1479[0] = v1417;
  v1479[1] = v1418;
  v1479[3] = v1420;
  v1479[2] = v1419;
  v1738 = 0;
  v1482[0] = xmmword_224663A68;
  v1482[1] = *(_OWORD *)dbl_224663A78;
  sub_223B46FEC((uint64_t)v1479, 2, 2, 4, (uint64_t)&v1738, (uint64_t)v1482, COERCE_DOUBLE(0x7100000070), COERCE_DOUBLE(0x7500000074), v792, v793, v794, v795, v796, v797);
  v1481[4] = v1421;
  v1481[5] = v1422;
  v1481[6] = v1423;
  v1481[0] = v1417;
  v1481[1] = v1418;
  v1481[3] = v1420;
  v1481[2] = v1419;
  v1739 = 0;
  v1484[0] = xmmword_224663A88;
  v1484[1] = *(_OWORD *)dbl_224663A98;
  sub_223B46FEC((uint64_t)v1481, 2, 2, 5, (uint64_t)&v1739, (uint64_t)v1484, COERCE_DOUBLE(0x7800000071), COERCE_DOUBLE(0x7C00000075), v798, v799, v800, v801, v802, v803);
  v1483[4] = v1439;
  v1483[5] = v1440;
  v1483[6] = v1441;
  v1483[0] = v1435;
  v1483[1] = v1436;
  v1483[3] = v1438;
  v1483[2] = v1437;
  v1740 = 0;
  v1486[0] = xmmword_224663AA8;
  v1486[1] = *(_OWORD *)dbl_224663AB8;
  sub_223B46FEC((uint64_t)v1483, 2, 3, 4, (uint64_t)&v1740, (uint64_t)v1486, COERCE_DOUBLE(0x7300000072), COERCE_DOUBLE(0x7700000076), v804, v805, v806, v807, v808, v809);
  v1485[4] = v1439;
  v1485[5] = v1440;
  v1485[6] = v1441;
  v1485[0] = v1435;
  v1485[1] = v1436;
  v1485[3] = v1438;
  v1485[2] = v1437;
  v1741 = 0;
  v1488[0] = xmmword_224663AC8;
  v1488[1] = *(_OWORD *)dbl_224663AD8;
  sub_223B46FEC((uint64_t)v1485, 2, 3, 5, (uint64_t)&v1741, (uint64_t)v1488, COERCE_DOUBLE(0x7A00000073), COERCE_DOUBLE(0x7E00000077), v810, v811, v812, v813, v814, v815);
  v1487[4] = v1439;
  v1487[5] = v1440;
  v1487[6] = v1441;
  v1487[0] = v1435;
  v1487[1] = v1436;
  v1487[3] = v1438;
  v1487[2] = v1437;
  v1742 = 0;
  v1496[0] = xmmword_224663AE8;
  v1496[1] = *(_OWORD *)dbl_224663AF8;
  sub_223B46FEC((uint64_t)v1487, 3, 2, 4, (uint64_t)&v1742, (uint64_t)v1496, COERCE_DOUBLE(0x7500000074), COERCE_DOUBLE(0x15100000150), v816, v817, v818, v819, v820, v821);
  v1493 = v1439;
  v1494 = v1440;
  v1495 = v1441;
  v1489 = v1435;
  v1490 = v1436;
  v1492 = v1438;
  v1491 = v1437;
  v1743 = 0;
  v1498[0] = xmmword_224663B08;
  v1498[1] = *(_OWORD *)dbl_224663B18;
  sub_223B46FEC((uint64_t)&v1489, 3, 2, 5, (uint64_t)&v1743, (uint64_t)v1498, COERCE_DOUBLE(0x7C00000075), COERCE_DOUBLE(0x15800000151), v822, v823, v824, v825, v826, v827);
  v1497[4] = v1439;
  v1497[5] = v1440;
  v1497[6] = v1441;
  v1497[0] = v1435;
  v1497[1] = v1436;
  v1497[3] = v1438;
  v1497[2] = v1437;
  v1744 = 0;
  v1500[0] = xmmword_224663B28;
  v1500[1] = *(_OWORD *)dbl_224663B38;
  sub_223B46FEC((uint64_t)v1497, 3, 3, 4, (uint64_t)&v1744, (uint64_t)v1500, COERCE_DOUBLE(0x7700000076), COERCE_DOUBLE(0x15300000152), v828, v829, v830, v831, v832, v833);
  v1499[4] = v1439;
  v1499[5] = v1440;
  v1499[6] = v1441;
  v1499[0] = v1435;
  v1499[1] = v1436;
  v1499[3] = v1438;
  v1499[2] = v1437;
  v1745 = 0;
  v1502[0] = xmmword_224663B48;
  v1502[1] = *(_OWORD *)dbl_224663B58;
  sub_223B46FEC((uint64_t)v1499, 3, 3, 5, (uint64_t)&v1745, (uint64_t)v1502, COERCE_DOUBLE(0x7E00000077), COERCE_DOUBLE(0x15A00000153), v834, v835, v836, v837, v838, v839);
  v1501[4] = v1457;
  v1501[5] = v1458;
  v1501[6] = v1459;
  v1501[0] = v1453;
  v1501[1] = v1454;
  v1501[3] = v1456;
  v1501[2] = v1455;
  v1746 = 0;
  v1504[0] = xmmword_224663B68;
  v1504[1] = *(_OWORD *)dbl_224663B78;
  sub_223B46FEC((uint64_t)v1501, 2, 2, 6, (uint64_t)&v1746, (uint64_t)v1504, COERCE_DOUBLE(0x7900000078), COERCE_DOUBLE(0x7D0000007CLL), v840, v841, v842, v843, v844, v845);
  v1503[4] = v1457;
  v1503[5] = v1458;
  v1503[6] = v1459;
  v1503[0] = v1453;
  v1503[1] = v1454;
  v1503[3] = v1456;
  v1503[2] = v1455;
  v1747 = 0x100010001000100;
  v1506[0] = xmmword_224663B88;
  v1506[1] = *(_OWORD *)dbl_224663B98;
  sub_223B46FEC((uint64_t)v1503, 2, 2, 7, (uint64_t)&v1747, (uint64_t)v1506, COERCE_DOUBLE(0x3000000079), COERCE_DOUBLE(0x340000007DLL), v846, v847, v848, v849, v850, v851);
  v1505[4] = v1457;
  v1505[5] = v1458;
  v1505[6] = v1459;
  v1505[0] = v1453;
  v1505[1] = v1454;
  v1505[3] = v1456;
  v1505[2] = v1455;
  v1748 = 0;
  v1514[0] = xmmword_224663BA8;
  v1514[1] = *(_OWORD *)dbl_224663BB8;
  sub_223B46FEC((uint64_t)v1505, 2, 3, 6, (uint64_t)&v1748, (uint64_t)v1514, COERCE_DOUBLE(0x7B0000007ALL), COERCE_DOUBLE(0x7F0000007ELL), v852, v853, v854, v855, v856, v857);
  v1511 = v1457;
  v1512 = v1458;
  v1513 = v1459;
  v1507 = v1453;
  v1508 = v1454;
  v1510 = v1456;
  v1509 = v1455;
  v1749 = 0x100010001000100;
  v1516[0] = xmmword_224663BC8;
  v1516[1] = *(_OWORD *)dbl_224663BD8;
  sub_223B46FEC((uint64_t)&v1507, 2, 3, 7, (uint64_t)&v1749, (uint64_t)v1516, COERCE_DOUBLE(0x320000007BLL), COERCE_DOUBLE(0x360000007FLL), v858, v859, v860, v861, v862, v863);
  v1515[4] = v1457;
  v1515[5] = v1458;
  v1515[6] = v1459;
  v1515[0] = v1453;
  v1515[1] = v1454;
  v1515[3] = v1456;
  v1515[2] = v1455;
  v1750 = 0;
  v1518[0] = xmmword_224663BE8;
  v1518[1] = *(_OWORD *)dbl_224663BF8;
  sub_223B46FEC((uint64_t)v1515, 3, 2, 6, (uint64_t)&v1750, (uint64_t)v1518, COERCE_DOUBLE(0x7D0000007CLL), COERCE_DOUBLE(0x15900000158), v864, v865, v866, v867, v868, v869);
  v1517[4] = v1457;
  v1517[5] = v1458;
  v1517[6] = v1459;
  v1517[0] = v1453;
  v1517[1] = v1454;
  v1517[3] = v1456;
  v1517[2] = v1455;
  v1751 = 0x100010001000100;
  v1520[0] = xmmword_224663C08;
  v1520[1] = *(_OWORD *)dbl_224663C18;
  sub_223B46FEC((uint64_t)v1517, 3, 2, 7, (uint64_t)&v1751, (uint64_t)v1520, COERCE_DOUBLE(0x340000007DLL), COERCE_DOUBLE(0x11000000159), v870, v871, v872, v873, v874, v875);
  v1519[4] = v1475;
  v1519[5] = v1476;
  v1519[6] = v1477;
  v1519[0] = v1471;
  v1519[1] = v1472;
  v1519[3] = v1474;
  v1519[2] = v1473;
  v1752 = 0;
  v1522[0] = xmmword_224663C28;
  v1522[1] = *(_OWORD *)dbl_224663C38;
  sub_223B46FEC((uint64_t)v1519, 3, 3, 6, (uint64_t)&v1752, (uint64_t)v1522, COERCE_DOUBLE(0x7F0000007ELL), COERCE_DOUBLE(0x15B0000015ALL), v876, v877, v878, v879, v880, v881);
  v1521[4] = v1475;
  v1521[5] = v1476;
  v1521[6] = v1477;
  v1521[0] = v1471;
  v1521[1] = v1472;
  v1521[3] = v1474;
  v1521[2] = v1473;
  v1753 = 0x100010001000100;
  v1524[0] = xmmword_224663C48;
  v1524[1] = *(_OWORD *)dbl_224663C58;
  sub_223B46FEC((uint64_t)v1521, 3, 3, 7, (uint64_t)&v1753, (uint64_t)v1524, COERCE_DOUBLE(0x360000007FLL), COERCE_DOUBLE(0x1120000015BLL), v882, v883, v884, v885, v886, v887);
  v1523[4] = v1475;
  v1523[5] = v1476;
  v1523[6] = v1477;
  v1523[0] = v1471;
  v1523[1] = v1472;
  v1523[3] = v1474;
  v1523[2] = v1473;
  v1754 = 0;
  v1532[0] = xmmword_224663C68;
  v1532[1] = *(_OWORD *)dbl_224663C78;
  sub_223B46FEC((uint64_t)v1523, 0, 4, 0, (uint64_t)&v1754, (uint64_t)v1532, COERCE_DOUBLE(0x8100000080), COERCE_DOUBLE(0x8500000084), v888, v889, v890, v891, v892, v893);
  v1529 = v1475;
  v1530 = v1476;
  v1531 = v1477;
  v1525 = v1471;
  v1526 = v1472;
  v1528 = v1474;
  v1527 = v1473;
  v1755 = 0;
  v1534[0] = xmmword_224663C88;
  v1534[1] = *(_OWORD *)dbl_224663C98;
  sub_223B46FEC((uint64_t)&v1525, 0, 4, 1, (uint64_t)&v1755, (uint64_t)v1534, COERCE_DOUBLE(0x8800000081), COERCE_DOUBLE(0x8C00000085), v894, v895, v896, v897, v898, v899);
  v1533[4] = v1475;
  v1533[5] = v1476;
  v1533[6] = v1477;
  v1533[0] = v1471;
  v1533[1] = v1472;
  v1533[3] = v1474;
  v1533[2] = v1473;
  v1756 = 0;
  v1536[0] = xmmword_224663CA8;
  v1536[1] = *(_OWORD *)dbl_224663CB8;
  sub_223B46FEC((uint64_t)v1533, 0, 5, 0, (uint64_t)&v1756, (uint64_t)v1536, COERCE_DOUBLE(0x8300000082), COERCE_DOUBLE(0x8700000086), v900, v901, v902, v903, v904, v905);
  v1535[4] = v1475;
  v1535[5] = v1476;
  v1535[6] = v1477;
  v1535[0] = v1471;
  v1535[1] = v1472;
  v1535[3] = v1474;
  v1535[2] = v1473;
  v1757 = 0;
  v1538[0] = xmmword_224663CC8;
  v1538[1] = *(_OWORD *)dbl_224663CD8;
  sub_223B46FEC((uint64_t)v1535, 0, 5, 1, (uint64_t)&v1757, (uint64_t)v1538, COERCE_DOUBLE(0x8A00000083), COERCE_DOUBLE(0x8E00000087), v906, v907, v908, v909, v910, v911);
  v1537[4] = v1493;
  v1537[5] = v1494;
  v1537[6] = v1495;
  v1537[0] = v1489;
  v1537[1] = v1490;
  v1537[3] = v1492;
  v1537[2] = v1491;
  v1758 = 0;
  v1540[0] = xmmword_224663CE8;
  v1540[1] = *(_OWORD *)dbl_224663CF8;
  sub_223B46FEC((uint64_t)v1537, 1, 4, 0, (uint64_t)&v1758, (uint64_t)v1540, COERCE_DOUBLE(0x8500000084), COERCE_DOUBLE(0xA1000000A0), v912, v913, v914, v915, v916, v917);
  v1539[4] = v1493;
  v1539[5] = v1494;
  v1539[6] = v1495;
  v1539[0] = v1489;
  v1539[1] = v1490;
  v1539[3] = v1492;
  v1539[2] = v1491;
  v1759 = 0;
  v1542[0] = xmmword_224663D08;
  v1542[1] = *(_OWORD *)dbl_224663D18;
  sub_223B46FEC((uint64_t)v1539, 1, 4, 1, (uint64_t)&v1759, (uint64_t)v1542, COERCE_DOUBLE(0x8C00000085), COERCE_DOUBLE(0xA8000000A1), v918, v919, v920, v921, v922, v923);
  v1541[4] = v1493;
  v1541[5] = v1494;
  v1541[6] = v1495;
  v1541[0] = v1489;
  v1541[1] = v1490;
  v1541[3] = v1492;
  v1541[2] = v1491;
  v1760 = 0;
  v1550[0] = xmmword_224663D28;
  v1550[1] = *(_OWORD *)dbl_224663D38;
  sub_223B46FEC((uint64_t)v1541, 1, 5, 0, (uint64_t)&v1760, (uint64_t)v1550, COERCE_DOUBLE(0x8700000086), COERCE_DOUBLE(0xA3000000A2), v924, v925, v926, v927, v928, v929);
  v1547 = v1493;
  v1548 = v1494;
  v1549 = v1495;
  v1543 = v1489;
  v1544 = v1490;
  v1546 = v1492;
  v1545 = v1491;
  v1761 = 0;
  v1552[0] = xmmword_224663D48;
  v1552[1] = *(_OWORD *)dbl_224663D58;
  sub_223B46FEC((uint64_t)&v1543, 1, 5, 1, (uint64_t)&v1761, (uint64_t)v1552, COERCE_DOUBLE(0x8E00000087), COERCE_DOUBLE(0xAA000000A3), v930, v931, v932, v933, v934, v935);
  v1551[4] = v1493;
  v1551[5] = v1494;
  v1551[6] = v1495;
  v1551[0] = v1489;
  v1551[1] = v1490;
  v1551[3] = v1492;
  v1551[2] = v1491;
  v1762 = 0;
  v1554[0] = xmmword_224663D68;
  v1554[1] = *(_OWORD *)dbl_224663D78;
  sub_223B46FEC((uint64_t)v1551, 0, 4, 2, (uint64_t)&v1762, (uint64_t)v1554, COERCE_DOUBLE(0x8900000088), COERCE_DOUBLE(0x8D0000008CLL), v936, v937, v938, v939, v940, v941);
  v1553[4] = v1493;
  v1553[5] = v1494;
  v1553[6] = v1495;
  v1553[0] = v1489;
  v1553[1] = v1490;
  v1553[3] = v1492;
  v1553[2] = v1491;
  v1763 = 0;
  v1556[0] = xmmword_224663D88;
  v1556[1] = *(_OWORD *)dbl_224663D98;
  sub_223B46FEC((uint64_t)v1553, 0, 4, 3, (uint64_t)&v1763, (uint64_t)v1556, COERCE_DOUBLE(0xC000000089), COERCE_DOUBLE(0xC40000008DLL), v942, v943, v944, v945, v946, v947);
  v1555[4] = v1511;
  v1555[5] = v1512;
  v1555[6] = v1513;
  v1555[0] = v1507;
  v1555[1] = v1508;
  v1555[3] = v1510;
  v1555[2] = v1509;
  v1764 = 0;
  v1558[0] = xmmword_224663DA8;
  v1558[1] = *(_OWORD *)dbl_224663DB8;
  sub_223B46FEC((uint64_t)v1555, 0, 5, 2, (uint64_t)&v1764, (uint64_t)v1558, COERCE_DOUBLE(0x8B0000008ALL), COERCE_DOUBLE(0x8F0000008ELL), v948, v949, v950, v951, v952, v953);
  v1557[4] = v1511;
  v1557[5] = v1512;
  v1557[6] = v1513;
  v1557[0] = v1507;
  v1557[1] = v1508;
  v1557[3] = v1510;
  v1557[2] = v1509;
  v1765 = 0;
  v1560[0] = xmmword_224663DC8;
  v1560[1] = *(_OWORD *)dbl_224663DD8;
  sub_223B46FEC((uint64_t)v1557, 0, 5, 3, (uint64_t)&v1765, (uint64_t)v1560, COERCE_DOUBLE(0xC20000008BLL), COERCE_DOUBLE(0xC60000008FLL), v954, v955, v956, v957, v958, v959);
  v1559[4] = v1511;
  v1559[5] = v1512;
  v1559[6] = v1513;
  v1559[0] = v1507;
  v1559[1] = v1508;
  v1559[3] = v1510;
  v1559[2] = v1509;
  v1766 = 0;
  v1568[0] = xmmword_224663DE8;
  v1568[1] = *(_OWORD *)dbl_224663DF8;
  sub_223B46FEC((uint64_t)v1559, 1, 4, 2, (uint64_t)&v1766, (uint64_t)v1568, COERCE_DOUBLE(0x8D0000008CLL), COERCE_DOUBLE(0xA9000000A8), v960, v961, v962, v963, v964, v965);
  v1565 = v1511;
  v1566 = v1512;
  v1567 = v1513;
  v1561 = v1507;
  v1562 = v1508;
  v1564 = v1510;
  v1563 = v1509;
  v1767 = 0;
  v1570[0] = xmmword_224663E08;
  v1570[1] = *(_OWORD *)dbl_224663E18;
  sub_223B46FEC((uint64_t)&v1561, 1, 4, 3, (uint64_t)&v1767, (uint64_t)v1570, COERCE_DOUBLE(0xC40000008DLL), COERCE_DOUBLE(0xE0000000A9), v966, v967, v968, v969, v970, v971);
  v1569[4] = v1511;
  v1569[5] = v1512;
  v1569[6] = v1513;
  v1569[0] = v1507;
  v1569[1] = v1508;
  v1569[3] = v1510;
  v1569[2] = v1509;
  v1768 = 0;
  v1572[0] = xmmword_224663E28;
  v1572[1] = *(_OWORD *)dbl_224663E38;
  sub_223B46FEC((uint64_t)v1569, 1, 5, 2, (uint64_t)&v1768, (uint64_t)v1572, COERCE_DOUBLE(0x8F0000008ELL), COERCE_DOUBLE(0xAB000000AALL), v972, v973, v974, v975, v976, v977);
  v1571[4] = v1511;
  v1571[5] = v1512;
  v1571[6] = v1513;
  v1571[0] = v1507;
  v1571[1] = v1508;
  v1571[3] = v1510;
  v1571[2] = v1509;
  v1769 = 0;
  v1574[0] = xmmword_224663E48;
  v1574[1] = *(_OWORD *)dbl_224663E58;
  sub_223B46FEC((uint64_t)v1571, 1, 5, 3, (uint64_t)&v1769, (uint64_t)v1574, COERCE_DOUBLE(0xC60000008FLL), COERCE_DOUBLE(0xE2000000ABLL), v978, v979, v980, v981, v982, v983);
  v1573[4] = v1529;
  v1573[5] = v1530;
  v1573[6] = v1531;
  v1573[0] = v1525;
  v1573[1] = v1526;
  v1573[3] = v1528;
  v1573[2] = v1527;
  v1770 = 0;
  v1576[0] = xmmword_224663E68;
  v1576[1] = *(_OWORD *)dbl_224663E78;
  sub_223B46FEC((uint64_t)v1573, 0, 6, 0, (uint64_t)&v1770, (uint64_t)v1576, COERCE_DOUBLE(0x9100000090), COERCE_DOUBLE(0x9500000094), v984, v985, v986, v987, v988, v989);
  v1575[4] = v1529;
  v1575[5] = v1530;
  v1575[6] = v1531;
  v1575[0] = v1525;
  v1575[1] = v1526;
  v1575[3] = v1528;
  v1575[2] = v1527;
  v1771 = 0;
  v1578[0] = xmmword_224663E88;
  v1578[1] = *(_OWORD *)dbl_224663E98;
  sub_223B46FEC((uint64_t)v1575, 0, 6, 1, (uint64_t)&v1771, (uint64_t)v1578, COERCE_DOUBLE(0x9800000091), COERCE_DOUBLE(0x9C00000095), v990, v991, v992, v993, v994, v995);
  v1577[4] = v1529;
  v1577[5] = v1530;
  v1577[6] = v1531;
  v1577[0] = v1525;
  v1577[1] = v1526;
  v1577[3] = v1528;
  v1577[2] = v1527;
  v1772 = 0x202000002020000;
  v1586[0] = xmmword_224663EA8;
  v1586[1] = *(_OWORD *)dbl_224663EB8;
  sub_223B46FEC((uint64_t)v1577, 0, 7, 0, (uint64_t)&v1772, (uint64_t)v1586, COERCE_DOUBLE(0x9300000092), COERCE_DOUBLE(0x9700000096), v996, v997, v998, v999, v1000, v1001);
  v1583 = v1529;
  v1584 = v1530;
  v1585 = v1531;
  v1579 = v1525;
  v1580 = v1526;
  v1582 = v1528;
  v1581 = v1527;
  v1773 = 0x202000002020000;
  v1588[0] = xmmword_224663EC8;
  v1588[1] = *(_OWORD *)dbl_224663ED8;
  sub_223B46FEC((uint64_t)&v1579, 0, 7, 1, (uint64_t)&v1773, (uint64_t)v1588, COERCE_DOUBLE(0x9A00000093), COERCE_DOUBLE(0x9E00000097), v1002, v1003, v1004, v1005, v1006, v1007);
  v1587[4] = v1529;
  v1587[5] = v1530;
  v1587[6] = v1531;
  v1587[0] = v1525;
  v1587[1] = v1526;
  v1587[3] = v1528;
  v1587[2] = v1527;
  v1774 = 0;
  v1590[0] = xmmword_224663EE8;
  v1590[1] = *(_OWORD *)dbl_224663EF8;
  sub_223B46FEC((uint64_t)v1587, 1, 6, 0, (uint64_t)&v1774, (uint64_t)v1590, COERCE_DOUBLE(0x9500000094), COERCE_DOUBLE(0xB1000000B0), v1008, v1009, v1010, v1011, v1012, v1013);
  v1589[4] = v1529;
  v1589[5] = v1530;
  v1589[6] = v1531;
  v1589[0] = v1525;
  v1589[1] = v1526;
  v1589[3] = v1528;
  v1589[2] = v1527;
  v1775 = 0;
  v1592[0] = xmmword_224663F08;
  v1592[1] = *(_OWORD *)dbl_224663F18;
  sub_223B46FEC((uint64_t)v1589, 1, 6, 1, (uint64_t)&v1775, (uint64_t)v1592, COERCE_DOUBLE(0x9C00000095), COERCE_DOUBLE(0xB8000000B1), v1014, v1015, v1016, v1017, v1018, v1019);
  v1591[4] = v1547;
  v1591[5] = v1548;
  v1591[6] = v1549;
  v1591[0] = v1543;
  v1591[1] = v1544;
  v1591[3] = v1546;
  v1591[2] = v1545;
  v1776 = 0x202000002020000;
  v1594[0] = xmmword_224663F28;
  v1594[1] = *(_OWORD *)dbl_224663F38;
  sub_223B46FEC((uint64_t)v1591, 1, 7, 0, (uint64_t)&v1776, (uint64_t)v1594, COERCE_DOUBLE(0x9700000096), COERCE_DOUBLE(0xB3000000B2), v1020, v1021, v1022, v1023, v1024, v1025);
  v1593[4] = v1547;
  v1593[5] = v1548;
  v1593[6] = v1549;
  v1593[0] = v1543;
  v1593[1] = v1544;
  v1593[3] = v1546;
  v1593[2] = v1545;
  v1777 = 0x202000002020000;
  v1596[0] = xmmword_224663F48;
  v1596[1] = *(_OWORD *)dbl_224663F58;
  sub_223B46FEC((uint64_t)v1593, 1, 7, 1, (uint64_t)&v1777, (uint64_t)v1596, COERCE_DOUBLE(0x9E00000097), COERCE_DOUBLE(0xBA000000B3), v1026, v1027, v1028, v1029, v1030, v1031);
  v1595[4] = v1547;
  v1595[5] = v1548;
  v1595[6] = v1549;
  v1595[0] = v1543;
  v1595[1] = v1544;
  v1595[3] = v1546;
  v1595[2] = v1545;
  v1778 = 0;
  v1598[0] = xmmword_224663F68;
  v1598[1] = *(_OWORD *)dbl_224663F78;
  sub_223B46FEC((uint64_t)v1595, 0, 6, 2, (uint64_t)&v1778, (uint64_t)v1598, COERCE_DOUBLE(0x9900000098), COERCE_DOUBLE(0x9D0000009CLL), v1032, v1033, v1034, v1035, v1036, v1037);
  v1597[4] = v1547;
  v1597[5] = v1548;
  v1597[6] = v1549;
  v1597[0] = v1543;
  v1597[1] = v1544;
  v1597[3] = v1546;
  v1597[2] = v1545;
  v1779 = 0;
  v1600[0] = xmmword_224663F88;
  v1600[1] = *(_OWORD *)dbl_224663F98;
  sub_223B46FEC((uint64_t)v1597, 0, 6, 3, (uint64_t)&v1779, (uint64_t)v1600, COERCE_DOUBLE(0xD000000099), COERCE_DOUBLE(0xD40000009DLL), v1038, v1039, v1040, v1041, v1042, v1043);
  v1599[4] = v1547;
  v1599[5] = v1548;
  v1599[6] = v1549;
  v1599[0] = v1543;
  v1599[1] = v1544;
  v1599[3] = v1546;
  v1599[2] = v1545;
  v1780 = 0x202000002020000;
  v1602[0] = xmmword_224663FA8;
  v1602[1] = *(_OWORD *)dbl_224663FB8;
  sub_223B46FEC((uint64_t)v1599, 0, 7, 2, (uint64_t)&v1780, (uint64_t)v1602, COERCE_DOUBLE(0x9B0000009ALL), COERCE_DOUBLE(0x9F0000009ELL), v1044, v1045, v1046, v1047, v1048, v1049);
  v1601[4] = v1547;
  v1601[5] = v1548;
  v1601[6] = v1549;
  v1601[0] = v1543;
  v1601[1] = v1544;
  v1601[3] = v1546;
  v1601[2] = v1545;
  v1781 = 0x202000002020000;
  v1604[0] = xmmword_224663FC8;
  v1604[1] = *(_OWORD *)dbl_224663FD8;
  sub_223B46FEC((uint64_t)v1601, 0, 7, 3, (uint64_t)&v1781, (uint64_t)v1604, COERCE_DOUBLE(0xD20000009BLL), COERCE_DOUBLE(0xD60000009FLL), v1050, v1051, v1052, v1053, v1054, v1055);
  v1603[4] = v1565;
  v1603[5] = v1566;
  v1603[6] = v1567;
  v1603[0] = v1561;
  v1603[1] = v1562;
  v1603[3] = v1564;
  v1603[2] = v1563;
  v1782 = 0;
  v1606[0] = xmmword_224663FE8;
  v1606[1] = *(_OWORD *)dbl_224663FF8;
  sub_223B46FEC((uint64_t)v1603, 1, 6, 2, (uint64_t)&v1782, (uint64_t)v1606, COERCE_DOUBLE(0x9D0000009CLL), COERCE_DOUBLE(0xB9000000B8), v1056, v1057, v1058, v1059, v1060, v1061);
  v1605[4] = v1565;
  v1605[5] = v1566;
  v1605[6] = v1567;
  v1605[0] = v1561;
  v1605[1] = v1562;
  v1605[3] = v1564;
  v1605[2] = v1563;
  v1783 = 0;
  v1608[0] = xmmword_224664008;
  v1608[1] = *(_OWORD *)dbl_224664018;
  sub_223B46FEC((uint64_t)v1605, 1, 6, 3, (uint64_t)&v1783, (uint64_t)v1608, COERCE_DOUBLE(0xD40000009DLL), COERCE_DOUBLE(0xF0000000B9), v1062, v1063, v1064, v1065, v1066, v1067);
  v1607[4] = v1565;
  v1607[5] = v1566;
  v1607[6] = v1567;
  v1607[0] = v1561;
  v1607[1] = v1562;
  v1607[3] = v1564;
  v1607[2] = v1563;
  v1784 = 0x202000002020000;
  v1610[0] = xmmword_224664028;
  v1610[1] = *(_OWORD *)dbl_224664038;
  sub_223B46FEC((uint64_t)v1607, 1, 7, 2, (uint64_t)&v1784, (uint64_t)v1610, COERCE_DOUBLE(0x9F0000009ELL), COERCE_DOUBLE(0xBB000000BALL), v1068, v1069, v1070, v1071, v1072, v1073);
  v1609[4] = v1565;
  v1609[5] = v1566;
  v1609[6] = v1567;
  v1609[0] = v1561;
  v1609[1] = v1562;
  v1609[3] = v1564;
  v1609[2] = v1563;
  v1785 = 0x202000002020000;
  v1612[0] = xmmword_224664048;
  v1612[1] = *(_OWORD *)dbl_224664058;
  sub_223B46FEC((uint64_t)v1609, 1, 7, 3, (uint64_t)&v1785, (uint64_t)v1612, COERCE_DOUBLE(0xD60000009FLL), COERCE_DOUBLE(0xF2000000BBLL), v1074, v1075, v1076, v1077, v1078, v1079);
  v1611[4] = v1565;
  v1611[5] = v1566;
  v1611[6] = v1567;
  v1611[0] = v1561;
  v1611[1] = v1562;
  v1611[3] = v1564;
  v1611[2] = v1563;
  v1786 = 0;
  v1614[0] = xmmword_224664068;
  v1614[1] = *(_OWORD *)dbl_224664078;
  sub_223B46FEC((uint64_t)v1611, 2, 4, 0, (uint64_t)&v1786, (uint64_t)v1614, COERCE_DOUBLE(0xA1000000A0), COERCE_DOUBLE(0xA5000000A4), v1080, v1081, v1082, v1083, v1084, v1085);
  v1613[4] = v1565;
  v1613[5] = v1566;
  v1613[6] = v1567;
  v1613[0] = v1561;
  v1613[1] = v1562;
  v1613[3] = v1564;
  v1613[2] = v1563;
  v1787 = 0;
  v1616[0] = xmmword_224664088;
  v1616[1] = *(_OWORD *)dbl_224664098;
  sub_223B46FEC((uint64_t)v1613, 2, 4, 1, (uint64_t)&v1787, (uint64_t)v1616, COERCE_DOUBLE(0xA8000000A1), COERCE_DOUBLE(0xAC000000A5), v1086, v1087, v1088, v1089, v1090, v1091);
  v1615[4] = v1583;
  v1615[5] = v1584;
  v1615[6] = v1585;
  v1615[0] = v1579;
  v1615[1] = v1580;
  v1615[3] = v1582;
  v1615[2] = v1581;
  v1788 = 0;
  v1618[0] = xmmword_2246640A8;
  v1618[1] = *(_OWORD *)dbl_2246640B8;
  sub_223B46FEC((uint64_t)v1615, 2, 5, 0, (uint64_t)&v1788, (uint64_t)v1618, COERCE_DOUBLE(0xA3000000A2), COERCE_DOUBLE(0xA7000000A6), v1092, v1093, v1094, v1095, v1096, v1097);
  v1617[4] = v1583;
  v1617[5] = v1584;
  v1617[6] = v1585;
  v1617[0] = v1579;
  v1617[1] = v1580;
  v1617[3] = v1582;
  v1617[2] = v1581;
  v1789[0] = 0;
  v1620[0] = xmmword_2246640C8;
  v1620[1] = *(_OWORD *)dbl_2246640D8;
  sub_223B46FEC((uint64_t)v1617, 2, 5, 1, (uint64_t)v1789, (uint64_t)v1620, COERCE_DOUBLE(0xAA000000A3), COERCE_DOUBLE(0xAE000000A7), v1098, v1099, v1100, v1101, v1102, v1103);
  v1619[4] = v1583;
  v1619[5] = v1584;
  v1619[6] = v1585;
  v1619[0] = v1579;
  v1619[1] = v1580;
  v1619[3] = v1582;
  v1619[2] = v1581;
  return sub_223B4A3D0();
}

uint64_t sub_223B17640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 *v6;
  __int128 *v7;
  _DWORD *v8;
  unsigned int v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  double v14;
  double v15;
  uint64_t v16;
  signed int v17;
  signed int v18;
  signed int v19;
  uint64_t v20;
  _DWORD *v21;
  signed int v22;
  signed int v23;
  int v24;
  BOOL v26;
  signed int v27;
  BOOL v28;
  BOOL v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  int v37;
  int v38;
  signed int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  signed int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  signed int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  unsigned int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int i;
  int v91;
  int v92;
  int v93;
  uint64_t j;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  double v130;
  double v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  double v136;
  double v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  double v142;
  double v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  double v148;
  double v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  double v154;
  double v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  double v160;
  double v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  double v166;
  double v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  double v172;
  double v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  double v178;
  double v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  double v184;
  double v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  double v190;
  double v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  double v196;
  double v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  double v202;
  double v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  double v208;
  double v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  double v214;
  double v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  double v220;
  double v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  double v226;
  double v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  double v232;
  double v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  double v238;
  double v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  double v244;
  double v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  double v250;
  double v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  double v256;
  double v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  double v262;
  double v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  double v268;
  double v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  double v274;
  double v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  double v280;
  double v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  double v286;
  double v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  double v292;
  double v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  double v298;
  double v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  double v304;
  double v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  double v310;
  double v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  double v316;
  double v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v321;
  double v322;
  double v323;
  float32x4_t v324;
  float32x4_t v325;
  float32x4_t v326;
  float32x4_t v327;
  double v328;
  double v329;
  float32x4_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  double v334;
  double v335;
  float32x4_t v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v339;
  double v340;
  double v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  double v346;
  double v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t v350;
  float32x4_t v351;
  double v352;
  double v353;
  float32x4_t v354;
  float32x4_t v355;
  float32x4_t v356;
  float32x4_t v357;
  double v358;
  double v359;
  float32x4_t v360;
  float32x4_t v361;
  float32x4_t v362;
  float32x4_t v363;
  double v364;
  double v365;
  float32x4_t v366;
  float32x4_t v367;
  float32x4_t v368;
  float32x4_t v369;
  double v370;
  double v371;
  float32x4_t v372;
  float32x4_t v373;
  float32x4_t v374;
  float32x4_t v375;
  double v376;
  double v377;
  float32x4_t v378;
  float32x4_t v379;
  float32x4_t v380;
  float32x4_t v381;
  double v382;
  double v383;
  float32x4_t v384;
  float32x4_t v385;
  float32x4_t v386;
  float32x4_t v387;
  double v388;
  double v389;
  float32x4_t v390;
  float32x4_t v391;
  float32x4_t v392;
  float32x4_t v393;
  double v394;
  double v395;
  float32x4_t v396;
  float32x4_t v397;
  float32x4_t v398;
  float32x4_t v399;
  double v400;
  double v401;
  float32x4_t v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x4_t v405;
  double v406;
  double v407;
  float32x4_t v408;
  float32x4_t v409;
  float32x4_t v410;
  float32x4_t v411;
  double v412;
  double v413;
  float32x4_t v414;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  double v418;
  double v419;
  float32x4_t v420;
  float32x4_t v421;
  float32x4_t v422;
  float32x4_t v423;
  double v424;
  double v425;
  float32x4_t v426;
  float32x4_t v427;
  float32x4_t v428;
  float32x4_t v429;
  double v430;
  double v431;
  float32x4_t v432;
  float32x4_t v433;
  float32x4_t v434;
  float32x4_t v435;
  double v436;
  double v437;
  float32x4_t v438;
  float32x4_t v439;
  float32x4_t v440;
  float32x4_t v441;
  double v442;
  double v443;
  float32x4_t v444;
  float32x4_t v445;
  float32x4_t v446;
  float32x4_t v447;
  double v448;
  double v449;
  float32x4_t v450;
  float32x4_t v451;
  float32x4_t v452;
  float32x4_t v453;
  double v454;
  double v455;
  float32x4_t v456;
  float32x4_t v457;
  float32x4_t v458;
  float32x4_t v459;
  double v460;
  double v461;
  float32x4_t v462;
  float32x4_t v463;
  float32x4_t v464;
  float32x4_t v465;
  double v466;
  double v467;
  float32x4_t v468;
  float32x4_t v469;
  float32x4_t v470;
  float32x4_t v471;
  double v472;
  double v473;
  float32x4_t v474;
  float32x4_t v475;
  float32x4_t v476;
  float32x4_t v477;
  double v478;
  double v479;
  float32x4_t v480;
  float32x4_t v481;
  float32x4_t v482;
  float32x4_t v483;
  double v484;
  double v485;
  float32x4_t v486;
  float32x4_t v487;
  float32x4_t v488;
  float32x4_t v489;
  double v490;
  double v491;
  float32x4_t v492;
  float32x4_t v493;
  float32x4_t v494;
  float32x4_t v495;
  double v496;
  double v497;
  float32x4_t v498;
  float32x4_t v499;
  float32x4_t v500;
  float32x4_t v501;
  double v502;
  double v503;
  float32x4_t v504;
  float32x4_t v505;
  float32x4_t v506;
  float32x4_t v507;
  double v508;
  double v509;
  float32x4_t v510;
  float32x4_t v511;
  float32x4_t v512;
  float32x4_t v513;
  double v514;
  double v515;
  float32x4_t v516;
  float32x4_t v517;
  float32x4_t v518;
  float32x4_t v519;
  double v520;
  double v521;
  float32x4_t v522;
  float32x4_t v523;
  float32x4_t v524;
  float32x4_t v525;
  double v526;
  double v527;
  float32x4_t v528;
  float32x4_t v529;
  float32x4_t v530;
  float32x4_t v531;
  double v532;
  double v533;
  float32x4_t v534;
  float32x4_t v535;
  float32x4_t v536;
  float32x4_t v537;
  double v538;
  double v539;
  float32x4_t v540;
  float32x4_t v541;
  float32x4_t v542;
  float32x4_t v543;
  double v544;
  double v545;
  float32x4_t v546;
  float32x4_t v547;
  float32x4_t v548;
  float32x4_t v549;
  double v550;
  double v551;
  float32x4_t v552;
  float32x4_t v553;
  float32x4_t v554;
  float32x4_t v555;
  double v556;
  double v557;
  float32x4_t v558;
  float32x4_t v559;
  float32x4_t v560;
  float32x4_t v561;
  double v562;
  double v563;
  float32x4_t v564;
  float32x4_t v565;
  float32x4_t v566;
  float32x4_t v567;
  double v568;
  double v569;
  float32x4_t v570;
  float32x4_t v571;
  float32x4_t v572;
  float32x4_t v573;
  double v574;
  double v575;
  float32x4_t v576;
  float32x4_t v577;
  float32x4_t v578;
  float32x4_t v579;
  double v580;
  double v581;
  float32x4_t v582;
  float32x4_t v583;
  float32x4_t v584;
  float32x4_t v585;
  double v586;
  double v587;
  float32x4_t v588;
  float32x4_t v589;
  float32x4_t v590;
  float32x4_t v591;
  double v592;
  double v593;
  float32x4_t v594;
  float32x4_t v595;
  float32x4_t v596;
  float32x4_t v597;
  double v598;
  double v599;
  float32x4_t v600;
  float32x4_t v601;
  float32x4_t v602;
  float32x4_t v603;
  double v604;
  double v605;
  float32x4_t v606;
  float32x4_t v607;
  float32x4_t v608;
  float32x4_t v609;
  double v610;
  double v611;
  float32x4_t v612;
  float32x4_t v613;
  float32x4_t v614;
  float32x4_t v615;
  double v616;
  double v617;
  float32x4_t v618;
  float32x4_t v619;
  float32x4_t v620;
  float32x4_t v621;
  double v622;
  double v623;
  float32x4_t v624;
  float32x4_t v625;
  float32x4_t v626;
  float32x4_t v627;
  double v628;
  double v629;
  float32x4_t v630;
  float32x4_t v631;
  float32x4_t v632;
  float32x4_t v633;
  double v634;
  double v635;
  float32x4_t v636;
  float32x4_t v637;
  float32x4_t v638;
  float32x4_t v639;
  double v640;
  double v641;
  float32x4_t v642;
  float32x4_t v643;
  float32x4_t v644;
  float32x4_t v645;
  double v646;
  double v647;
  float32x4_t v648;
  float32x4_t v649;
  float32x4_t v650;
  float32x4_t v651;
  double v652;
  double v653;
  float32x4_t v654;
  float32x4_t v655;
  float32x4_t v656;
  float32x4_t v657;
  double v658;
  double v659;
  float32x4_t v660;
  float32x4_t v661;
  float32x4_t v662;
  float32x4_t v663;
  double v664;
  double v665;
  float32x4_t v666;
  float32x4_t v667;
  float32x4_t v668;
  float32x4_t v669;
  double v670;
  double v671;
  float32x4_t v672;
  float32x4_t v673;
  float32x4_t v674;
  float32x4_t v675;
  double v676;
  double v677;
  float32x4_t v678;
  float32x4_t v679;
  float32x4_t v680;
  float32x4_t v681;
  double v682;
  double v683;
  float32x4_t v684;
  float32x4_t v685;
  float32x4_t v686;
  float32x4_t v687;
  double v688;
  double v689;
  float32x4_t v690;
  float32x4_t v691;
  float32x4_t v692;
  float32x4_t v693;
  double v694;
  double v695;
  float32x4_t v696;
  float32x4_t v697;
  float32x4_t v698;
  float32x4_t v699;
  double v700;
  double v701;
  float32x4_t v702;
  float32x4_t v703;
  float32x4_t v704;
  float32x4_t v705;
  double v706;
  double v707;
  float32x4_t v708;
  float32x4_t v709;
  float32x4_t v710;
  float32x4_t v711;
  double v712;
  double v713;
  float32x4_t v714;
  float32x4_t v715;
  float32x4_t v716;
  float32x4_t v717;
  double v718;
  double v719;
  float32x4_t v720;
  float32x4_t v721;
  float32x4_t v722;
  float32x4_t v723;
  double v724;
  double v725;
  float32x4_t v726;
  float32x4_t v727;
  float32x4_t v728;
  float32x4_t v729;
  double v730;
  double v731;
  float32x4_t v732;
  float32x4_t v733;
  float32x4_t v734;
  float32x4_t v735;
  double v736;
  double v737;
  float32x4_t v738;
  float32x4_t v739;
  float32x4_t v740;
  float32x4_t v741;
  double v742;
  double v743;
  float32x4_t v744;
  float32x4_t v745;
  float32x4_t v746;
  float32x4_t v747;
  double v748;
  double v749;
  float32x4_t v750;
  float32x4_t v751;
  float32x4_t v752;
  float32x4_t v753;
  double v754;
  double v755;
  float32x4_t v756;
  float32x4_t v757;
  float32x4_t v758;
  float32x4_t v759;
  double v760;
  double v761;
  float32x4_t v762;
  float32x4_t v763;
  float32x4_t v764;
  float32x4_t v765;
  double v766;
  double v767;
  float32x4_t v768;
  float32x4_t v769;
  float32x4_t v770;
  float32x4_t v771;
  double v772;
  double v773;
  float32x4_t v774;
  float32x4_t v775;
  float32x4_t v776;
  float32x4_t v777;
  double v778;
  double v779;
  float32x4_t v780;
  float32x4_t v781;
  float32x4_t v782;
  float32x4_t v783;
  double v784;
  double v785;
  float32x4_t v786;
  float32x4_t v787;
  float32x4_t v788;
  float32x4_t v789;
  double v790;
  double v791;
  float32x4_t v792;
  float32x4_t v793;
  float32x4_t v794;
  float32x4_t v795;
  double v796;
  double v797;
  float32x4_t v798;
  float32x4_t v799;
  float32x4_t v800;
  float32x4_t v801;
  double v802;
  double v803;
  float32x4_t v804;
  float32x4_t v805;
  float32x4_t v806;
  float32x4_t v807;
  double v808;
  double v809;
  float32x4_t v810;
  float32x4_t v811;
  float32x4_t v812;
  float32x4_t v813;
  double v814;
  double v815;
  float32x4_t v816;
  float32x4_t v817;
  float32x4_t v818;
  float32x4_t v819;
  double v820;
  double v821;
  float32x4_t v822;
  float32x4_t v823;
  float32x4_t v824;
  float32x4_t v825;
  double v826;
  double v827;
  float32x4_t v828;
  float32x4_t v829;
  float32x4_t v830;
  float32x4_t v831;
  double v832;
  double v833;
  float32x4_t v834;
  float32x4_t v835;
  float32x4_t v836;
  float32x4_t v837;
  double v838;
  double v839;
  float32x4_t v840;
  float32x4_t v841;
  float32x4_t v842;
  float32x4_t v843;
  double v844;
  double v845;
  float32x4_t v846;
  float32x4_t v847;
  float32x4_t v848;
  float32x4_t v849;
  double v850;
  double v851;
  float32x4_t v852;
  float32x4_t v853;
  float32x4_t v854;
  float32x4_t v855;
  double v856;
  double v857;
  float32x4_t v858;
  float32x4_t v859;
  float32x4_t v860;
  float32x4_t v861;
  double v862;
  double v863;
  float32x4_t v864;
  float32x4_t v865;
  float32x4_t v866;
  float32x4_t v867;
  double v868;
  double v869;
  float32x4_t v870;
  float32x4_t v871;
  float32x4_t v872;
  float32x4_t v873;
  double v874;
  double v875;
  float32x4_t v876;
  float32x4_t v877;
  float32x4_t v878;
  float32x4_t v879;
  double v880;
  double v881;
  float32x4_t v882;
  float32x4_t v883;
  float32x4_t v884;
  float32x4_t v885;
  double v886;
  double v887;
  float32x4_t v888;
  float32x4_t v889;
  float32x4_t v890;
  float32x4_t v891;
  double v892;
  double v893;
  float32x4_t v894;
  float32x4_t v895;
  float32x4_t v896;
  float32x4_t v897;
  double v898;
  double v899;
  float32x4_t v900;
  float32x4_t v901;
  float32x4_t v902;
  float32x4_t v903;
  double v904;
  double v905;
  float32x4_t v906;
  float32x4_t v907;
  float32x4_t v908;
  float32x4_t v909;
  double v910;
  double v911;
  float32x4_t v912;
  float32x4_t v913;
  float32x4_t v914;
  float32x4_t v915;
  double v916;
  double v917;
  float32x4_t v918;
  float32x4_t v919;
  float32x4_t v920;
  float32x4_t v921;
  double v922;
  double v923;
  float32x4_t v924;
  float32x4_t v925;
  float32x4_t v926;
  float32x4_t v927;
  double v928;
  double v929;
  float32x4_t v930;
  float32x4_t v931;
  float32x4_t v932;
  float32x4_t v933;
  double v934;
  double v935;
  float32x4_t v936;
  float32x4_t v937;
  float32x4_t v938;
  float32x4_t v939;
  double v940;
  double v941;
  float32x4_t v942;
  float32x4_t v943;
  float32x4_t v944;
  float32x4_t v945;
  double v946;
  double v947;
  float32x4_t v948;
  float32x4_t v949;
  float32x4_t v950;
  float32x4_t v951;
  double v952;
  double v953;
  float32x4_t v954;
  float32x4_t v955;
  float32x4_t v956;
  float32x4_t v957;
  double v958;
  double v959;
  float32x4_t v960;
  float32x4_t v961;
  float32x4_t v962;
  float32x4_t v963;
  double v964;
  double v965;
  float32x4_t v966;
  float32x4_t v967;
  float32x4_t v968;
  float32x4_t v969;
  double v970;
  double v971;
  float32x4_t v972;
  float32x4_t v973;
  float32x4_t v974;
  float32x4_t v975;
  double v976;
  double v977;
  float32x4_t v978;
  float32x4_t v979;
  float32x4_t v980;
  float32x4_t v981;
  double v982;
  double v983;
  float32x4_t v984;
  float32x4_t v985;
  float32x4_t v986;
  float32x4_t v987;
  double v988;
  double v989;
  float32x4_t v990;
  float32x4_t v991;
  float32x4_t v992;
  float32x4_t v993;
  double v994;
  double v995;
  float32x4_t v996;
  float32x4_t v997;
  float32x4_t v998;
  float32x4_t v999;
  double v1000;
  double v1001;
  float32x4_t v1002;
  float32x4_t v1003;
  float32x4_t v1004;
  float32x4_t v1005;
  double v1006;
  double v1007;
  float32x4_t v1008;
  float32x4_t v1009;
  float32x4_t v1010;
  float32x4_t v1011;
  double v1012;
  double v1013;
  float32x4_t v1014;
  float32x4_t v1015;
  float32x4_t v1016;
  float32x4_t v1017;
  double v1018;
  double v1019;
  float32x4_t v1020;
  float32x4_t v1021;
  float32x4_t v1022;
  float32x4_t v1023;
  double v1024;
  double v1025;
  float32x4_t v1026;
  float32x4_t v1027;
  float32x4_t v1028;
  float32x4_t v1029;
  double v1030;
  double v1031;
  float32x4_t v1032;
  float32x4_t v1033;
  float32x4_t v1034;
  float32x4_t v1035;
  double v1036;
  double v1037;
  float32x4_t v1038;
  float32x4_t v1039;
  float32x4_t v1040;
  float32x4_t v1041;
  double v1042;
  double v1043;
  float32x4_t v1044;
  float32x4_t v1045;
  float32x4_t v1046;
  float32x4_t v1047;
  double v1048;
  double v1049;
  float32x4_t v1050;
  float32x4_t v1051;
  float32x4_t v1052;
  float32x4_t v1053;
  double v1054;
  double v1055;
  float32x4_t v1056;
  float32x4_t v1057;
  float32x4_t v1058;
  float32x4_t v1059;
  double v1060;
  double v1061;
  float32x4_t v1062;
  float32x4_t v1063;
  float32x4_t v1064;
  float32x4_t v1065;
  double v1066;
  double v1067;
  float32x4_t v1068;
  float32x4_t v1069;
  float32x4_t v1070;
  float32x4_t v1071;
  double v1072;
  double v1073;
  float32x4_t v1074;
  float32x4_t v1075;
  float32x4_t v1076;
  float32x4_t v1077;
  double v1078;
  double v1079;
  float32x4_t v1080;
  float32x4_t v1081;
  float32x4_t v1082;
  float32x4_t v1083;
  double v1084;
  double v1085;
  float32x4_t v1086;
  float32x4_t v1087;
  float32x4_t v1088;
  float32x4_t v1089;
  double v1090;
  double v1091;
  float32x4_t v1092;
  float32x4_t v1093;
  float32x4_t v1094;
  float32x4_t v1095;
  double v1096;
  double v1097;
  float32x4_t v1098;
  float32x4_t v1099;
  float32x4_t v1100;
  float32x4_t v1101;
  double v1102;
  double v1103;
  uint64_t v1105;
  uint64_t v1106;
  _OWORD *v1107;
  uint64_t v1108;
  uint64_t v1109;
  _DWORD *v1110;
  uint64_t v1111;
  _OWORD v1112[3];
  uint64_t v1113;
  _OWORD v1114[5];
  _OWORD v1115[4];
  uint64_t v1116;
  _OWORD v1117[4];
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  __int128 v1123;
  __int128 v1124;
  unsigned int v1125[13];
  unint64_t v1126;
  unint64_t v1127;
  unint64_t v1128;
  unsigned int v1129;
  unsigned int v1130;
  __int128 v1131;
  __int128 v1132;
  __int128 v1133;
  __int128 v1134;
  __int128 v1135;
  __int128 v1136;
  __int128 v1137;
  char v1138;
  char v1139;
  uint64_t v1140;
  int v1141;
  uint64_t v1142;
  _OWORD v1143[7];
  _OWORD v1144[2];
  _OWORD v1145[7];
  _OWORD v1146[2];
  __int128 v1147;
  __int128 v1148;
  __int128 v1149;
  __int128 v1150;
  __int128 v1151;
  __int128 v1152;
  __int128 v1153;
  _OWORD v1154[2];
  _OWORD v1155[7];
  _OWORD v1156[2];
  _OWORD v1157[7];
  _OWORD v1158[2];
  _OWORD v1159[7];
  _OWORD v1160[2];
  _OWORD v1161[7];
  _OWORD v1162[2];
  _OWORD v1163[7];
  _OWORD v1164[2];
  __int128 v1165;
  __int128 v1166;
  __int128 v1167;
  __int128 v1168;
  __int128 v1169;
  __int128 v1170;
  __int128 v1171;
  _OWORD v1172[2];
  _OWORD v1173[7];
  _OWORD v1174[2];
  _OWORD v1175[7];
  _OWORD v1176[2];
  _OWORD v1177[7];
  _OWORD v1178[2];
  _OWORD v1179[7];
  _OWORD v1180[2];
  _OWORD v1181[7];
  _OWORD v1182[2];
  __int128 v1183;
  __int128 v1184;
  __int128 v1185;
  __int128 v1186;
  __int128 v1187;
  __int128 v1188;
  __int128 v1189;
  _OWORD v1190[2];
  _OWORD v1191[7];
  _OWORD v1192[2];
  _OWORD v1193[7];
  _OWORD v1194[2];
  _OWORD v1195[7];
  _OWORD v1196[2];
  _OWORD v1197[7];
  _OWORD v1198[2];
  _OWORD v1199[7];
  _OWORD v1200[2];
  __int128 v1201;
  __int128 v1202;
  __int128 v1203;
  __int128 v1204;
  __int128 v1205;
  __int128 v1206;
  __int128 v1207;
  _OWORD v1208[2];
  _OWORD v1209[7];
  _OWORD v1210[2];
  _OWORD v1211[7];
  _OWORD v1212[2];
  _OWORD v1213[7];
  _OWORD v1214[2];
  _OWORD v1215[7];
  _OWORD v1216[2];
  _OWORD v1217[7];
  _OWORD v1218[2];
  __int128 v1219;
  __int128 v1220;
  __int128 v1221;
  __int128 v1222;
  __int128 v1223;
  __int128 v1224;
  __int128 v1225;
  _OWORD v1226[2];
  _OWORD v1227[7];
  _OWORD v1228[2];
  _OWORD v1229[7];
  _OWORD v1230[2];
  _OWORD v1231[7];
  _OWORD v1232[2];
  _OWORD v1233[7];
  _OWORD v1234[2];
  _OWORD v1235[7];
  _OWORD v1236[2];
  __int128 v1237;
  __int128 v1238;
  __int128 v1239;
  __int128 v1240;
  __int128 v1241;
  __int128 v1242;
  __int128 v1243;
  _OWORD v1244[2];
  _OWORD v1245[7];
  _OWORD v1246[2];
  _OWORD v1247[7];
  _OWORD v1248[2];
  _OWORD v1249[7];
  _OWORD v1250[2];
  _OWORD v1251[7];
  _OWORD v1252[2];
  _OWORD v1253[7];
  _OWORD v1254[2];
  __int128 v1255;
  __int128 v1256;
  __int128 v1257;
  __int128 v1258;
  __int128 v1259;
  __int128 v1260;
  __int128 v1261;
  _OWORD v1262[2];
  _OWORD v1263[7];
  _OWORD v1264[2];
  _OWORD v1265[7];
  _OWORD v1266[2];
  _OWORD v1267[7];
  _OWORD v1268[2];
  _OWORD v1269[7];
  _OWORD v1270[2];
  _OWORD v1271[7];
  _OWORD v1272[2];
  __int128 v1273;
  __int128 v1274;
  __int128 v1275;
  __int128 v1276;
  __int128 v1277;
  __int128 v1278;
  __int128 v1279;
  _OWORD v1280[2];
  _OWORD v1281[7];
  _OWORD v1282[2];
  _OWORD v1283[7];
  _OWORD v1284[2];
  _OWORD v1285[7];
  _OWORD v1286[2];
  _OWORD v1287[7];
  _OWORD v1288[2];
  _OWORD v1289[7];
  _OWORD v1290[2];
  __int128 v1291;
  __int128 v1292;
  __int128 v1293;
  __int128 v1294;
  __int128 v1295;
  __int128 v1296;
  __int128 v1297;
  _OWORD v1298[2];
  _OWORD v1299[7];
  _OWORD v1300[2];
  _OWORD v1301[7];
  _OWORD v1302[2];
  _OWORD v1303[7];
  _OWORD v1304[2];
  _OWORD v1305[7];
  _OWORD v1306[2];
  _OWORD v1307[7];
  _OWORD v1308[2];
  __int128 v1309;
  __int128 v1310;
  __int128 v1311;
  __int128 v1312;
  __int128 v1313;
  __int128 v1314;
  __int128 v1315;
  _OWORD v1316[2];
  _OWORD v1317[7];
  _OWORD v1318[2];
  _OWORD v1319[7];
  _OWORD v1320[2];
  _OWORD v1321[7];
  _OWORD v1322[2];
  _OWORD v1323[7];
  _OWORD v1324[2];
  _OWORD v1325[7];
  _OWORD v1326[2];
  __int128 v1327;
  __int128 v1328;
  __int128 v1329;
  __int128 v1330;
  __int128 v1331;
  __int128 v1332;
  __int128 v1333;
  _OWORD v1334[2];
  _OWORD v1335[7];
  _OWORD v1336[2];
  _OWORD v1337[7];
  _OWORD v1338[2];
  _OWORD v1339[7];
  _OWORD v1340[2];
  _OWORD v1341[7];
  _OWORD v1342[2];
  _OWORD v1343[7];
  _OWORD v1344[2];
  __int128 v1345;
  __int128 v1346;
  __int128 v1347;
  __int128 v1348;
  __int128 v1349;
  __int128 v1350;
  __int128 v1351;
  _OWORD v1352[2];
  _OWORD v1353[7];
  _OWORD v1354[2];
  _OWORD v1355[7];
  _OWORD v1356[2];
  _OWORD v1357[7];
  _OWORD v1358[2];
  _OWORD v1359[7];
  _OWORD v1360[2];
  _OWORD v1361[7];
  _OWORD v1362[2];
  __int128 v1363;
  __int128 v1364;
  __int128 v1365;
  __int128 v1366;
  __int128 v1367;
  __int128 v1368;
  __int128 v1369;
  _OWORD v1370[2];
  _OWORD v1371[7];
  _OWORD v1372[2];
  _OWORD v1373[7];
  _OWORD v1374[2];
  _OWORD v1375[7];
  _OWORD v1376[2];
  _OWORD v1377[7];
  _OWORD v1378[2];
  _OWORD v1379[7];
  _OWORD v1380[2];
  __int128 v1381;
  __int128 v1382;
  __int128 v1383;
  __int128 v1384;
  __int128 v1385;
  __int128 v1386;
  __int128 v1387;
  _OWORD v1388[2];
  _OWORD v1389[7];
  _OWORD v1390[2];
  _OWORD v1391[7];
  _OWORD v1392[2];
  _OWORD v1393[7];
  _OWORD v1394[2];
  _OWORD v1395[7];
  _OWORD v1396[2];
  _OWORD v1397[7];
  _OWORD v1398[2];
  __int128 v1399;
  __int128 v1400;
  __int128 v1401;
  __int128 v1402;
  __int128 v1403;
  __int128 v1404;
  __int128 v1405;
  _OWORD v1406[2];
  _OWORD v1407[7];
  _OWORD v1408[2];
  _OWORD v1409[7];
  _OWORD v1410[2];
  _OWORD v1411[7];
  _OWORD v1412[2];
  _OWORD v1413[7];
  _OWORD v1414[2];
  _OWORD v1415[7];
  _OWORD v1416[2];
  __int128 v1417;
  __int128 v1418;
  __int128 v1419;
  __int128 v1420;
  __int128 v1421;
  __int128 v1422;
  __int128 v1423;
  _OWORD v1424[2];
  _OWORD v1425[7];
  _OWORD v1426[2];
  _OWORD v1427[7];
  _OWORD v1428[2];
  _OWORD v1429[7];
  _OWORD v1430[2];
  _OWORD v1431[7];
  _OWORD v1432[2];
  _OWORD v1433[7];
  _OWORD v1434[2];
  __int128 v1435;
  __int128 v1436;
  __int128 v1437;
  __int128 v1438;
  __int128 v1439;
  __int128 v1440;
  __int128 v1441;
  _OWORD v1442[2];
  _OWORD v1443[7];
  _OWORD v1444[2];
  _OWORD v1445[7];
  _OWORD v1446[2];
  _OWORD v1447[7];
  _OWORD v1448[2];
  _OWORD v1449[7];
  _OWORD v1450[2];
  _OWORD v1451[7];
  _OWORD v1452[2];
  __int128 v1453;
  __int128 v1454;
  __int128 v1455;
  __int128 v1456;
  __int128 v1457;
  __int128 v1458;
  __int128 v1459;
  _OWORD v1460[2];
  _OWORD v1461[7];
  _OWORD v1462[2];
  _OWORD v1463[7];
  _OWORD v1464[2];
  _OWORD v1465[7];
  _OWORD v1466[2];
  _OWORD v1467[7];
  _OWORD v1468[2];
  _OWORD v1469[7];
  _OWORD v1470[2];
  __int128 v1471;
  __int128 v1472;
  __int128 v1473;
  __int128 v1474;
  __int128 v1475;
  __int128 v1476;
  __int128 v1477;
  _OWORD v1478[2];
  _OWORD v1479[7];
  _OWORD v1480[2];
  _OWORD v1481[7];
  _OWORD v1482[2];
  _OWORD v1483[7];
  _OWORD v1484[2];
  _OWORD v1485[7];
  _OWORD v1486[2];
  _OWORD v1487[7];
  _OWORD v1488[2];
  __int128 v1489;
  __int128 v1490;
  __int128 v1491;
  __int128 v1492;
  __int128 v1493;
  __int128 v1494;
  __int128 v1495;
  _OWORD v1496[2];
  _OWORD v1497[7];
  _OWORD v1498[2];
  _OWORD v1499[7];
  _OWORD v1500[2];
  _OWORD v1501[7];
  _OWORD v1502[2];
  _OWORD v1503[7];
  _OWORD v1504[2];
  _OWORD v1505[7];
  _OWORD v1506[2];
  __int128 v1507;
  __int128 v1508;
  __int128 v1509;
  __int128 v1510;
  __int128 v1511;
  __int128 v1512;
  __int128 v1513;
  _OWORD v1514[2];
  _OWORD v1515[7];
  _OWORD v1516[2];
  _OWORD v1517[7];
  _OWORD v1518[2];
  _OWORD v1519[7];
  _OWORD v1520[2];
  _OWORD v1521[7];
  _OWORD v1522[2];
  _OWORD v1523[7];
  _OWORD v1524[2];
  __int128 v1525;
  __int128 v1526;
  __int128 v1527;
  __int128 v1528;
  __int128 v1529;
  __int128 v1530;
  __int128 v1531;
  _OWORD v1532[2];
  _OWORD v1533[7];
  _OWORD v1534[2];
  _OWORD v1535[7];
  _OWORD v1536[2];
  _OWORD v1537[7];
  _OWORD v1538[2];
  _OWORD v1539[7];
  _OWORD v1540[2];
  _OWORD v1541[7];
  _OWORD v1542[2];
  __int128 v1543;
  __int128 v1544;
  __int128 v1545;
  __int128 v1546;
  __int128 v1547;
  __int128 v1548;
  __int128 v1549;
  _OWORD v1550[2];
  _OWORD v1551[7];
  _OWORD v1552[2];
  _OWORD v1553[7];
  _OWORD v1554[2];
  _OWORD v1555[7];
  _OWORD v1556[2];
  _OWORD v1557[7];
  _OWORD v1558[2];
  _OWORD v1559[7];
  _OWORD v1560[2];
  __int128 v1561;
  __int128 v1562;
  __int128 v1563;
  __int128 v1564;
  __int128 v1565;
  __int128 v1566;
  __int128 v1567;
  _OWORD v1568[2];
  _OWORD v1569[7];
  _OWORD v1570[2];
  _OWORD v1571[7];
  _OWORD v1572[2];
  _OWORD v1573[7];
  _OWORD v1574[2];
  _OWORD v1575[7];
  _OWORD v1576[2];
  _OWORD v1577[7];
  _OWORD v1578[2];
  __int128 v1579;
  __int128 v1580;
  __int128 v1581;
  __int128 v1582;
  __int128 v1583;
  __int128 v1584;
  __int128 v1585;
  _OWORD v1586[2];
  _OWORD v1587[7];
  _OWORD v1588[2];
  _OWORD v1589[7];
  _OWORD v1590[2];
  _OWORD v1591[7];
  _OWORD v1592[2];
  _OWORD v1593[7];
  _OWORD v1594[2];
  _OWORD v1595[7];
  _OWORD v1596[2];
  _OWORD v1597[7];
  _OWORD v1598[2];
  _OWORD v1599[7];
  _OWORD v1600[2];
  _OWORD v1601[7];
  _OWORD v1602[2];
  _OWORD v1603[7];
  _OWORD v1604[2];
  _OWORD v1605[7];
  _OWORD v1606[2];
  _OWORD v1607[7];
  _OWORD v1608[2];
  _OWORD v1609[7];
  _OWORD v1610[2];
  _OWORD v1611[7];
  _OWORD v1612[2];
  _OWORD v1613[7];
  _OWORD v1614[2];
  _OWORD v1615[7];
  _OWORD v1616[2];
  _OWORD v1617[7];
  _OWORD v1618[2];
  _OWORD v1619[7];
  _OWORD v1620[2];
  __int128 v1621;
  char v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t v1715;
  uint64_t v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  uint64_t v1723;
  uint64_t v1724;
  uint64_t v1725;
  uint64_t v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  uint64_t v1731;
  uint64_t v1732;
  uint64_t v1733;
  uint64_t v1734;
  uint64_t v1735;
  uint64_t v1736;
  uint64_t v1737;
  uint64_t v1738;
  uint64_t v1739;
  uint64_t v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  uint64_t v1747;
  uint64_t v1748;
  uint64_t v1749;
  uint64_t v1750;
  uint64_t v1751;
  uint64_t v1752;
  uint64_t v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  uint64_t v1758;
  uint64_t v1759;
  uint64_t v1760;
  uint64_t v1761;
  uint64_t v1762;
  uint64_t v1763;
  uint64_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  uint64_t v1767;
  uint64_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  uint64_t v1771;
  uint64_t v1772;
  uint64_t v1773;
  uint64_t v1774;
  uint64_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  uint64_t v1781;
  uint64_t v1782;
  uint64_t v1783;
  uint64_t v1784;
  uint64_t v1785;
  uint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  _QWORD v1789[4];

  v0 = MEMORY[0x24BDAC7A8]();
  v1108 = v2;
  v1109 = v1;
  v1105 = v3;
  v1106 = v4;
  v1107 = v5;
  v7 = v6;
  v1789[1] = *MEMORY[0x24BDAC8D0];
  v9 = v8[2] & 0xFFFFFFF8;
  v1110 = v8;
  v1111 = v0;
  *(_QWORD *)&v1619[0] = *(_QWORD *)v8 & 0xFFFFFFF8FFFFFFF8;
  DWORD2(v1619[0]) = v9;
  if ((sub_223E974E0(v0, (int *)v1619, v1125) & 0x80000000) != 0)
  {
    v16 = *(unsigned int *)(v1111 + 176);
    if ((v16 & 0x80000000) != 0)
    {
      v1126 = 0x8000000080000000;
      v1127 = 0x8000000080000000;
      v1128 = 0x8000000080000000;
      v83 = 0x80000000;
      v1129 = 0x80000000;
    }
    else
    {
      v17 = *v1110 & 0xFFFFFFF8;
      v18 = v1110[1] & 0xFFFFFFF8;
      v19 = v1110[2] & 0xFFFFFFF8;
      v20 = *(_QWORD *)(v1111 + 184);
      v21 = (_DWORD *)(v20 + 4488 * (v16 & 0xFFFFFFFFCFFFFFFFLL));
      v22 = v21[1];
      v23 = v21[2];
      v24 = v17 - *v21;
      v26 = v17 < *v21 || v18 < v22 || v19 < v23;
      if (!v26
        && ((v27 = v21[3], v17 < v27) ? (v28 = v18 < v21[4]) : (v28 = 0), v28 ? (v29 = v19 < v21[5]) : (v29 = 0), v29))
      {
        v91 = v18 - v22;
        v92 = v19 - v23;
        v93 = v27 - *v21;
        v30 = *(_DWORD *)(v1111 + 176);
        while (1)
        {
          v93 >>= 1;
          v30 = *(_DWORD *)(v20
                          + 4488 * (v30 & 0xCFFFFFFF)
                          + 4 * ((4 * ((v93 & v24) != 0)) | (2 * ((v93 & v91) != 0)) | ((v93 & v92) != 0))
                          + 24);
          if (v93 == *(_DWORD *)(v1111 + 136) || v30 >> 30)
            break;
          v24 -= v93 & v24;
          v91 -= v93 & v91;
          v92 -= v93 & v92;
        }
      }
      else
      {
        v30 = 0x80000000;
      }
      LODWORD(v1126) = v30;
      v31 = v19 + 8;
      v32 = 0x80000000;
      v33 = v17 - *v21;
      if (v17 >= *v21)
      {
        v34 = v21[1];
        v35 = __OFSUB__(v18, v34);
        v36 = v18 - v34;
        if (v36 < 0 == v35)
        {
          v37 = v21[2];
          v35 = __OFSUB__(v31, v37);
          v38 = v31 - v37;
          if (v38 < 0 == v35)
          {
            v39 = v21[3];
            if (v17 < v39 && v18 < v21[4] && v31 < v21[5])
            {
              v40 = v39 - *v21;
              v32 = v16;
              while (1)
              {
                v40 >>= 1;
                v32 = *(_DWORD *)(v20
                                + 4488 * (v32 & 0xCFFFFFFF)
                                + 4 * ((4 * ((v40 & v33) != 0)) | (2 * ((v40 & v36) != 0)) | ((v40 & v38) != 0))
                                + 24);
                if (v40 == *(_DWORD *)(v1111 + 136) || v32 >> 30)
                  break;
                v33 -= v40 & v33;
                v36 -= v40 & v36;
                v38 -= v40 & v38;
              }
            }
          }
        }
      }
      HIDWORD(v1126) = v32;
      v41 = v18 + 8;
      v42 = 0x80000000;
      v43 = v17 - *v21;
      if (v17 >= *v21)
      {
        v44 = v21[1];
        v35 = __OFSUB__(v41, v44);
        v45 = v41 - v44;
        if (v45 < 0 == v35)
        {
          v46 = v21[2];
          v35 = __OFSUB__(v19, v46);
          v47 = v19 - v46;
          if (v47 < 0 == v35)
          {
            v48 = v21[3];
            if (v17 < v48 && v41 < v21[4] && v19 < v21[5])
            {
              v49 = v48 - *v21;
              v42 = v16;
              while (1)
              {
                v49 >>= 1;
                v42 = *(_DWORD *)(v20
                                + 4488 * (v42 & 0xCFFFFFFF)
                                + 4 * ((4 * ((v49 & v43) != 0)) | (2 * ((v49 & v45) != 0)) | ((v49 & v47) != 0))
                                + 24);
                if (v49 == *(_DWORD *)(v1111 + 136) || v42 >> 30)
                  break;
                v43 -= v49 & v43;
                v45 -= v49 & v45;
                v47 -= v49 & v47;
              }
            }
          }
        }
      }
      LODWORD(v1127) = v42;
      v50 = 0x80000000;
      v51 = v17 - *v21;
      if (v17 >= *v21)
      {
        v52 = v21[1];
        v35 = __OFSUB__(v41, v52);
        v53 = v41 - v52;
        if (v53 < 0 == v35)
        {
          v54 = v21[2];
          v35 = __OFSUB__(v31, v54);
          v55 = v31 - v54;
          if (v55 < 0 == v35)
          {
            v56 = v21[3];
            if (v17 < v56 && v41 < v21[4] && v31 < v21[5])
            {
              v57 = v56 - *v21;
              v50 = v16;
              while (1)
              {
                v57 >>= 1;
                v50 = *(_DWORD *)(v20
                                + 4488 * (v50 & 0xCFFFFFFF)
                                + 4 * ((4 * ((v57 & v51) != 0)) | (2 * ((v57 & v53) != 0)) | ((v57 & v55) != 0))
                                + 24);
                if (v57 == *(_DWORD *)(v1111 + 136) || v50 >> 30)
                  break;
                v51 -= v57 & v51;
                v53 -= v57 & v53;
                v55 -= v57 & v55;
              }
            }
          }
        }
      }
      HIDWORD(v1127) = v50;
      v58 = v17 + 8;
      v59 = 0x80000000;
      v60 = v58 - *v21;
      if (v58 >= *v21)
      {
        v61 = v21[1];
        v35 = __OFSUB__(v18, v61);
        v62 = v18 - v61;
        if (v62 < 0 == v35)
        {
          v63 = v21[2];
          v35 = __OFSUB__(v19, v63);
          v64 = v19 - v63;
          if (v64 < 0 == v35)
          {
            v65 = v21[3];
            if (v58 < v65 && v18 < v21[4] && v19 < v21[5])
            {
              v66 = v65 - *v21;
              v59 = v16;
              while (1)
              {
                v66 >>= 1;
                v59 = *(_DWORD *)(v20
                                + 4488 * (v59 & 0xCFFFFFFF)
                                + 4 * ((4 * ((v66 & v60) != 0)) | (2 * ((v66 & v62) != 0)) | ((v66 & v64) != 0))
                                + 24);
                if (v66 == *(_DWORD *)(v1111 + 136) || v59 >> 30)
                  break;
                v60 -= v66 & v60;
                v62 -= v66 & v62;
                v64 -= v66 & v64;
              }
            }
          }
        }
      }
      LODWORD(v1128) = v59;
      v67 = 0x80000000;
      v68 = v58 - *v21;
      if (v58 >= *v21)
      {
        v69 = v21[1];
        v35 = __OFSUB__(v18, v69);
        v70 = v18 - v69;
        if (v70 < 0 == v35)
        {
          v71 = v21[2];
          v35 = __OFSUB__(v31, v71);
          v72 = v31 - v71;
          if (v72 < 0 == v35)
          {
            v73 = v21[3];
            if (v58 < v73 && v18 < v21[4] && v31 < v21[5])
            {
              v74 = v73 - *v21;
              v67 = v16;
              while (1)
              {
                v74 >>= 1;
                v67 = *(_DWORD *)(v20
                                + 4488 * (v67 & 0xCFFFFFFF)
                                + 4 * ((4 * ((v74 & v68) != 0)) | (2 * ((v74 & v70) != 0)) | ((v74 & v72) != 0))
                                + 24);
                if (v74 == *(_DWORD *)(v1111 + 136) || v67 >> 30)
                  break;
                v68 -= v74 & v68;
                v70 -= v74 & v70;
                v72 -= v74 & v72;
              }
            }
          }
        }
      }
      HIDWORD(v1128) = v67;
      v75 = 0x80000000;
      v76 = v58 - *v21;
      if (v58 >= *v21)
      {
        v77 = v21[1];
        v35 = __OFSUB__(v41, v77);
        v78 = v41 - v77;
        if (v78 < 0 == v35)
        {
          v79 = v21[2];
          v35 = __OFSUB__(v19, v79);
          v80 = v19 - v79;
          if (v80 < 0 == v35)
          {
            v81 = v21[3];
            if (v58 < v81 && v41 < v21[4] && v19 < v21[5])
            {
              v82 = v81 - *v21;
              v75 = v16;
              while (1)
              {
                v82 >>= 1;
                v75 = *(_DWORD *)(v20
                                + 4488 * (v75 & 0xCFFFFFFF)
                                + 4 * ((4 * ((v82 & v76) != 0)) | (2 * ((v82 & v78) != 0)) | ((v82 & v80) != 0))
                                + 24);
                if (v82 == *(_DWORD *)(v1111 + 136) || v75 >> 30)
                  break;
                v76 -= v82 & v76;
                v78 -= v82 & v78;
                v80 -= v82 & v80;
              }
            }
          }
        }
      }
      v1129 = v75;
      v83 = 0x80000000;
      v84 = v58 - *v21;
      if (v58 >= *v21)
      {
        v85 = v21[1];
        v35 = __OFSUB__(v41, v85);
        v86 = v41 - v85;
        if (v86 < 0 == v35)
        {
          v87 = v21[2];
          v35 = __OFSUB__(v31, v87);
          v88 = v31 - v87;
          if (v88 < 0 == v35)
          {
            v89 = v21[3];
            if (v58 < v89 && v41 < v21[4] && v31 < v21[5])
            {
              for (i = v89 - *v21; ; v88 -= i & v88)
              {
                i >>= 1;
                LODWORD(v16) = *(_DWORD *)(v20
                                         + 4488 * (v16 & 0xCFFFFFFF)
                                         + 4 * ((4 * ((i & v84) != 0)) | (2 * ((i & v86) != 0)) | ((i & v88) != 0))
                                         + 24);
                if (i == *(_DWORD *)(v1111 + 136) || v16 >> 30)
                  break;
                v84 -= i & v84;
                v86 -= i & v86;
              }
              v83 = v16;
            }
          }
        }
      }
    }
    v1130 = v83;
  }
  for (j = 0; j != 8; ++j)
  {
    v96 = (byte_22466137A[j] & 1)
        + ((byte_22466137A[j] << 30 >> 31) & 3)
        + ((byte_22466137A[j] << 29 >> 31) & 9u)
        + 13;
    v97 = v1125[v96];
    v98 = v1111 + 20872;
    if ((v97 & 0x80000000) == 0)
    {
      v99 = *(_QWORD *)(v1111 + 20920);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v1111 + 20928) - v99) >> 4) <= v97)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v99 = *(_QWORD *)(v1111 + 20920);
      }
      v98 = v99 + 48 * v97;
    }
    v1622 = *((_BYTE *)v7 + 16);
    v1621 = *v7;
    if (v1622)
    {
      v100 = sub_223340F28((_QWORD *)v98, (uint64_t)&v1621);
      if (v100)
        v95 = *((_DWORD *)v100 + 8);
      else
        v95 = 0x80000000;
    }
    else
    {
      v95 = *(_DWORD *)(v98 + 40);
    }
    v1125[v96] = v95;
  }
  v1123 = 0u;
  v1124 = 0u;
  v101 = v1126;
  if ((v1126 & 0x80000000) != 0)
  {
    v102 = v1111;
    v1119 = v1111 + 316;
    v104 = HIDWORD(v1126);
    if ((v1126 & 0x8000000000000000) == 0)
      goto LABEL_112;
LABEL_141:
    v1120 = v102 + 316;
    v106 = v1127;
    if ((v1127 & 0x80000000) == 0)
      goto LABEL_116;
LABEL_142:
    v1121 = v102 + 316;
    v108 = HIDWORD(v1127);
    if ((v1127 & 0x8000000000000000) == 0)
      goto LABEL_120;
LABEL_143:
    v1122 = v102 + 316;
    v110 = v1128;
    if ((v1128 & 0x80000000) == 0)
      goto LABEL_124;
LABEL_144:
    *(_QWORD *)&v1123 = v102 + 316;
    v112 = HIDWORD(v1128);
    if ((v1128 & 0x8000000000000000) == 0)
      goto LABEL_128;
LABEL_145:
    *((_QWORD *)&v1123 + 1) = v102 + 316;
    v114 = v1129;
    if ((v1129 & 0x80000000) == 0)
      goto LABEL_132;
    goto LABEL_146;
  }
  v102 = v1111;
  v103 = *(_QWORD *)(v1111 + 20800);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v1111 + 20808) - v103) >> 12) <= v1126)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v102 = v1111;
    v103 = *(_QWORD *)(v1111 + 20800);
  }
  v1119 = v103 + 20480 * v101;
  v104 = HIDWORD(v1126);
  if ((v1126 & 0x8000000000000000) != 0)
    goto LABEL_141;
LABEL_112:
  v105 = *(_QWORD *)(v102 + 20800);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v102 + 20808) - v105) >> 12) <= v104)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v102 = v1111;
    v105 = *(_QWORD *)(v1111 + 20800);
  }
  v1120 = v105 + 20480 * v104;
  v106 = v1127;
  if ((v1127 & 0x80000000) != 0)
    goto LABEL_142;
LABEL_116:
  v107 = *(_QWORD *)(v102 + 20800);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v102 + 20808) - v107) >> 12) <= v106)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v102 = v1111;
    v107 = *(_QWORD *)(v1111 + 20800);
  }
  v1121 = v107 + 20480 * v106;
  v108 = HIDWORD(v1127);
  if ((v1127 & 0x8000000000000000) != 0)
    goto LABEL_143;
LABEL_120:
  v109 = *(_QWORD *)(v102 + 20800);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v102 + 20808) - v109) >> 12) <= v108)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v102 = v1111;
    v109 = *(_QWORD *)(v1111 + 20800);
  }
  v1122 = v109 + 20480 * v108;
  v110 = v1128;
  if ((v1128 & 0x80000000) != 0)
    goto LABEL_144;
LABEL_124:
  v111 = *(_QWORD *)(v102 + 20800);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v102 + 20808) - v111) >> 12) <= v110)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v102 = v1111;
    v111 = *(_QWORD *)(v1111 + 20800);
  }
  *(_QWORD *)&v1123 = v111 + 20480 * v110;
  v112 = HIDWORD(v1128);
  if ((v1128 & 0x8000000000000000) != 0)
    goto LABEL_145;
LABEL_128:
  v113 = *(_QWORD *)(v102 + 20800);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v102 + 20808) - v113) >> 12) <= v112)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v102 = v1111;
    v113 = *(_QWORD *)(v1111 + 20800);
  }
  *((_QWORD *)&v1123 + 1) = v113 + 20480 * v112;
  v114 = v1129;
  if ((v1129 & 0x80000000) == 0)
  {
LABEL_132:
    v115 = *(_QWORD *)(v102 + 20800);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v102 + 20808) - v115) >> 12) <= v114)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v102 = v1111;
      v115 = *(_QWORD *)(v1111 + 20800);
    }
    *(_QWORD *)&v1124 = v115 + 20480 * v114;
    v116 = v1130;
    if ((v1130 & 0x80000000) == 0)
      goto LABEL_136;
LABEL_147:
    v118 = v102 + 316;
    goto LABEL_148;
  }
LABEL_146:
  *(_QWORD *)&v1124 = v102 + 316;
  v116 = v1130;
  if ((v1130 & 0x80000000) != 0)
    goto LABEL_147;
LABEL_136:
  v117 = *(_QWORD *)(v102 + 20800);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v102 + 20808) - v117) >> 12) <= v116)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v102 = v1111;
    v117 = *(_QWORD *)(v1111 + 20800);
  }
  v118 = v117 + 20480 * v116;
LABEL_148:
  *((_QWORD *)&v1124 + 1) = v118;
  v119 = *(_OWORD *)(v1105 + 48);
  v1117[2] = *(_OWORD *)(v1105 + 32);
  v1117[3] = v119;
  v1118 = *(_QWORD *)(v1105 + 64);
  v120 = *(_OWORD *)(v1105 + 16);
  v1117[0] = *(_OWORD *)v1105;
  v1117[1] = v120;
  v121 = *(_OWORD *)(v1106 + 48);
  v1115[2] = *(_OWORD *)(v1106 + 32);
  v1115[3] = v121;
  v1116 = *(_QWORD *)(v1106 + 64);
  v122 = *(_OWORD *)(v1106 + 16);
  v1115[0] = *(_OWORD *)v1106;
  v1115[1] = v122;
  v123 = v1107[3];
  v1114[2] = v1107[2];
  v1114[3] = v123;
  v1114[4] = v1107[4];
  v124 = v1107[1];
  v1114[0] = *v1107;
  v1114[1] = v124;
  v125 = *(_OWORD *)(v1108 + 16);
  v1112[0] = *(_OWORD *)v1108;
  v1112[1] = v125;
  v1112[2] = *(_OWORD *)(v1108 + 32);
  v1113 = *(_QWORD *)(v1108 + 48);
  v1142 = v1109;
  v1140 = 16;
  v1141 = 0;
  v1138 = 8;
  *(_QWORD *)&v1131 = v1110;
  *((_QWORD *)&v1131 + 1) = &v1140;
  *(_QWORD *)&v1132 = v102 + 276;
  *((_QWORD *)&v1132 + 1) = &v1119;
  *(_QWORD *)&v1133 = &v1138;
  *((_QWORD *)&v1133 + 1) = &v1139;
  *(_QWORD *)&v1134 = v1114;
  *((_QWORD *)&v1134 + 1) = &v1625;
  *(_QWORD *)&v1135 = v1117;
  *((_QWORD *)&v1135 + 1) = &v1624;
  *(_QWORD *)&v1136 = v1115;
  *((_QWORD *)&v1136 + 1) = &v1623;
  *(_QWORD *)&v1137 = &v1142;
  *((_QWORD *)&v1137 + 1) = v1112;
  v1626 = 0;
  v1144[0] = xmmword_224662C2C;
  v1144[1] = *(_OWORD *)dbl_224662C3C;
  sub_223B54204((uint64_t)&v1131, 0, 0, 0, (uint64_t)&v1626, (uint64_t)v1144, COERCE_DOUBLE(0x100000000), COERCE_DOUBLE(0x500000004), v10, v11, v12, v13, v14, v15);
  v1143[4] = v1135;
  v1143[5] = v1136;
  v1143[6] = v1137;
  v1143[0] = v1131;
  v1143[1] = v1132;
  v1143[2] = v1133;
  v1143[3] = v1134;
  v1627 = 0;
  v1146[0] = xmmword_224662C88;
  v1146[1] = *(_OWORD *)dbl_224662C98;
  sub_223B54204((uint64_t)v1143, 0, 0, 1, (uint64_t)&v1627, (uint64_t)v1146, COERCE_DOUBLE(0x800000001), COERCE_DOUBLE(0xC00000005), v126, v127, v128, v129, v130, v131);
  v1145[4] = v1135;
  v1145[5] = v1136;
  v1145[6] = v1137;
  v1145[0] = v1131;
  v1145[1] = v1132;
  v1145[2] = v1133;
  v1145[3] = v1134;
  v1628 = 0;
  v1154[0] = xmmword_224662CA8;
  v1154[1] = *(_OWORD *)dbl_224662CB8;
  sub_223B54204((uint64_t)v1145, 0, 1, 0, (uint64_t)&v1628, (uint64_t)v1154, COERCE_DOUBLE(0x300000002), COERCE_DOUBLE(0x700000006), v132, v133, v134, v135, v136, v137);
  v1151 = v1135;
  v1152 = v1136;
  v1153 = v1137;
  v1147 = v1131;
  v1148 = v1132;
  v1150 = v1134;
  v1149 = v1133;
  v1629 = 0;
  v1156[0] = xmmword_224662CC8;
  v1156[1] = *(_OWORD *)dbl_224662CD8;
  sub_223B54204((uint64_t)&v1147, 0, 1, 1, (uint64_t)&v1629, (uint64_t)v1156, COERCE_DOUBLE(0xA00000003), COERCE_DOUBLE(0xE00000007), v138, v139, v140, v141, v142, v143);
  v1155[4] = v1135;
  v1155[5] = v1136;
  v1155[6] = v1137;
  v1155[0] = v1131;
  v1155[1] = v1132;
  v1155[3] = v1134;
  v1155[2] = v1133;
  v1630 = 0;
  v1158[0] = xmmword_224662CE8;
  v1158[1] = *(_OWORD *)dbl_224662CF8;
  sub_223B54204((uint64_t)v1155, 1, 0, 0, (uint64_t)&v1630, (uint64_t)v1158, COERCE_DOUBLE(0x500000004), COERCE_DOUBLE(0x2100000020), v144, v145, v146, v147, v148, v149);
  v1157[4] = v1135;
  v1157[5] = v1136;
  v1157[6] = v1137;
  v1157[0] = v1131;
  v1157[1] = v1132;
  v1157[3] = v1134;
  v1157[2] = v1133;
  v1631 = 0;
  v1160[0] = xmmword_224662D08;
  v1160[1] = *(_OWORD *)dbl_224662D18;
  sub_223B54204((uint64_t)v1157, 1, 0, 1, (uint64_t)&v1631, (uint64_t)v1160, COERCE_DOUBLE(0xC00000005), COERCE_DOUBLE(0x2800000021), v150, v151, v152, v153, v154, v155);
  v1159[4] = v1135;
  v1159[5] = v1136;
  v1159[6] = v1137;
  v1159[0] = v1131;
  v1159[1] = v1132;
  v1159[3] = v1134;
  v1159[2] = v1133;
  v1632 = 0;
  v1162[0] = xmmword_224662D28;
  v1162[1] = *(_OWORD *)dbl_224662D38;
  sub_223B54204((uint64_t)v1159, 1, 1, 0, (uint64_t)&v1632, (uint64_t)v1162, COERCE_DOUBLE(0x700000006), COERCE_DOUBLE(0x2300000022), v156, v157, v158, v159, v160, v161);
  v1161[4] = v1135;
  v1161[5] = v1136;
  v1161[6] = v1137;
  v1161[0] = v1131;
  v1161[1] = v1132;
  v1161[3] = v1134;
  v1161[2] = v1133;
  v1633 = 0;
  v1164[0] = xmmword_224662D48;
  v1164[1] = *(_OWORD *)dbl_224662D58;
  sub_223B54204((uint64_t)v1161, 1, 1, 1, (uint64_t)&v1633, (uint64_t)v1164, COERCE_DOUBLE(0xE00000007), COERCE_DOUBLE(0x2A00000023), v162, v163, v164, v165, v166, v167);
  v1163[4] = v1135;
  v1163[5] = v1136;
  v1163[6] = v1137;
  v1163[0] = v1131;
  v1163[1] = v1132;
  v1163[3] = v1134;
  v1163[2] = v1133;
  v1634 = 0;
  v1172[0] = xmmword_224662D68;
  v1172[1] = *(_OWORD *)dbl_224662D78;
  sub_223B54204((uint64_t)v1163, 0, 0, 2, (uint64_t)&v1634, (uint64_t)v1172, COERCE_DOUBLE(0x900000008), COERCE_DOUBLE(0xD0000000CLL), v168, v169, v170, v171, v172, v173);
  v1169 = v1135;
  v1170 = v1136;
  v1171 = v1137;
  v1165 = v1131;
  v1166 = v1132;
  v1168 = v1134;
  v1167 = v1133;
  v1635 = 0;
  v1174[0] = xmmword_224662D88;
  v1174[1] = *(_OWORD *)dbl_224662D98;
  sub_223B54204((uint64_t)&v1165, 0, 0, 3, (uint64_t)&v1635, (uint64_t)v1174, COERCE_DOUBLE(0x4000000009), COERCE_DOUBLE(0x440000000DLL), v174, v175, v176, v177, v178, v179);
  v1173[4] = v1135;
  v1173[5] = v1136;
  v1173[6] = v1137;
  v1173[0] = v1131;
  v1173[1] = v1132;
  v1173[3] = v1134;
  v1173[2] = v1133;
  v1636 = 0;
  v1176[0] = xmmword_224662DA8;
  v1176[1] = *(_OWORD *)dbl_224662DB8;
  sub_223B54204((uint64_t)v1173, 0, 1, 2, (uint64_t)&v1636, (uint64_t)v1176, COERCE_DOUBLE(0xB0000000ALL), COERCE_DOUBLE(0xF0000000ELL), v180, v181, v182, v183, v184, v185);
  v1175[4] = v1135;
  v1175[5] = v1136;
  v1175[6] = v1137;
  v1175[0] = v1131;
  v1175[1] = v1132;
  v1175[3] = v1134;
  v1175[2] = v1133;
  v1637 = 0;
  v1178[0] = xmmword_224662DC8;
  v1178[1] = *(_OWORD *)dbl_224662DD8;
  sub_223B54204((uint64_t)v1175, 0, 1, 3, (uint64_t)&v1637, (uint64_t)v1178, COERCE_DOUBLE(0x420000000BLL), COERCE_DOUBLE(0x460000000FLL), v186, v187, v188, v189, v190, v191);
  v1177[4] = v1135;
  v1177[5] = v1136;
  v1177[6] = v1137;
  v1177[0] = v1131;
  v1177[1] = v1132;
  v1177[3] = v1134;
  v1177[2] = v1133;
  v1638 = 0;
  v1180[0] = xmmword_224662DE8;
  v1180[1] = *(_OWORD *)dbl_224662DF8;
  sub_223B54204((uint64_t)v1177, 1, 0, 2, (uint64_t)&v1638, (uint64_t)v1180, COERCE_DOUBLE(0xD0000000CLL), COERCE_DOUBLE(0x2900000028), v192, v193, v194, v195, v196, v197);
  v1179[4] = v1135;
  v1179[5] = v1136;
  v1179[6] = v1137;
  v1179[0] = v1131;
  v1179[1] = v1132;
  v1179[3] = v1134;
  v1179[2] = v1133;
  v1639 = 0;
  v1182[0] = xmmword_224662E08;
  v1182[1] = *(_OWORD *)dbl_224662E18;
  sub_223B54204((uint64_t)v1179, 1, 0, 3, (uint64_t)&v1639, (uint64_t)v1182, COERCE_DOUBLE(0x440000000DLL), COERCE_DOUBLE(0x6000000029), v198, v199, v200, v201, v202, v203);
  v1181[4] = v1135;
  v1181[5] = v1136;
  v1181[6] = v1137;
  v1181[0] = v1131;
  v1181[1] = v1132;
  v1181[3] = v1134;
  v1181[2] = v1133;
  v1640 = 0;
  v1190[0] = xmmword_224662E28;
  v1190[1] = *(_OWORD *)dbl_224662E38;
  sub_223B54204((uint64_t)v1181, 1, 1, 2, (uint64_t)&v1640, (uint64_t)v1190, COERCE_DOUBLE(0xF0000000ELL), COERCE_DOUBLE(0x2B0000002ALL), v204, v205, v206, v207, v208, v209);
  v1187 = v1135;
  v1188 = v1136;
  v1189 = v1137;
  v1183 = v1131;
  v1184 = v1132;
  v1186 = v1134;
  v1185 = v1133;
  v1641 = 0;
  v1192[0] = xmmword_224662E48;
  v1192[1] = *(_OWORD *)dbl_224662E58;
  sub_223B54204((uint64_t)&v1183, 1, 1, 3, (uint64_t)&v1641, (uint64_t)v1192, COERCE_DOUBLE(0x460000000FLL), COERCE_DOUBLE(0x620000002BLL), v210, v211, v212, v213, v214, v215);
  v1191[4] = v1135;
  v1191[5] = v1136;
  v1191[6] = v1137;
  v1191[0] = v1131;
  v1191[1] = v1132;
  v1191[3] = v1134;
  v1191[2] = v1133;
  v1642 = 0;
  v1194[0] = xmmword_224662E68;
  v1194[1] = *(_OWORD *)dbl_224662E78;
  sub_223B54204((uint64_t)v1191, 0, 2, 0, (uint64_t)&v1642, (uint64_t)v1194, COERCE_DOUBLE(0x1100000010), COERCE_DOUBLE(0x1500000014), v216, v217, v218, v219, v220, v221);
  v1193[4] = v1135;
  v1193[5] = v1136;
  v1193[6] = v1137;
  v1193[0] = v1131;
  v1193[1] = v1132;
  v1193[3] = v1134;
  v1193[2] = v1133;
  v1643 = 0;
  v1196[0] = xmmword_224662E88;
  v1196[1] = *(_OWORD *)dbl_224662E98;
  sub_223B54204((uint64_t)v1193, 0, 2, 1, (uint64_t)&v1643, (uint64_t)v1196, COERCE_DOUBLE(0x1800000011), COERCE_DOUBLE(0x1C00000015), v222, v223, v224, v225, v226, v227);
  v1195[4] = v1151;
  v1195[5] = v1152;
  v1195[6] = v1153;
  v1195[0] = v1147;
  v1195[1] = v1148;
  v1195[3] = v1150;
  v1195[2] = v1149;
  v1644 = 0;
  v1198[0] = xmmword_224662EA8;
  v1198[1] = *(_OWORD *)dbl_224662EB8;
  sub_223B54204((uint64_t)v1195, 0, 3, 0, (uint64_t)&v1644, (uint64_t)v1198, COERCE_DOUBLE(0x1300000012), COERCE_DOUBLE(0x1700000016), v228, v229, v230, v231, v232, v233);
  v1197[4] = v1151;
  v1197[5] = v1152;
  v1197[6] = v1153;
  v1197[0] = v1147;
  v1197[1] = v1148;
  v1197[3] = v1150;
  v1197[2] = v1149;
  v1645 = 0;
  v1200[0] = xmmword_224662EC8;
  v1200[1] = *(_OWORD *)dbl_224662ED8;
  sub_223B54204((uint64_t)v1197, 0, 3, 1, (uint64_t)&v1645, (uint64_t)v1200, COERCE_DOUBLE(0x1A00000013), COERCE_DOUBLE(0x1E00000017), v234, v235, v236, v237, v238, v239);
  v1199[4] = v1151;
  v1199[5] = v1152;
  v1199[6] = v1153;
  v1199[0] = v1147;
  v1199[1] = v1148;
  v1199[3] = v1150;
  v1199[2] = v1149;
  v1646 = 0;
  v1208[0] = xmmword_224662EE8;
  v1208[1] = *(_OWORD *)dbl_224662EF8;
  sub_223B54204((uint64_t)v1199, 1, 2, 0, (uint64_t)&v1646, (uint64_t)v1208, COERCE_DOUBLE(0x1500000014), COERCE_DOUBLE(0x3100000030), v240, v241, v242, v243, v244, v245);
  v1205 = v1151;
  v1206 = v1152;
  v1207 = v1153;
  v1201 = v1147;
  v1202 = v1148;
  v1204 = v1150;
  v1203 = v1149;
  v1647 = 0;
  v1210[0] = xmmword_224662F08;
  v1210[1] = *(_OWORD *)dbl_224662F18;
  sub_223B54204((uint64_t)&v1201, 1, 2, 1, (uint64_t)&v1647, (uint64_t)v1210, COERCE_DOUBLE(0x1C00000015), COERCE_DOUBLE(0x3800000031), v246, v247, v248, v249, v250, v251);
  v1209[4] = v1151;
  v1209[5] = v1152;
  v1209[6] = v1153;
  v1209[0] = v1147;
  v1209[1] = v1148;
  v1209[3] = v1150;
  v1209[2] = v1149;
  v1648 = 0;
  v1212[0] = xmmword_224662F28;
  v1212[1] = *(_OWORD *)dbl_224662F38;
  sub_223B54204((uint64_t)v1209, 1, 3, 0, (uint64_t)&v1648, (uint64_t)v1212, COERCE_DOUBLE(0x1700000016), COERCE_DOUBLE(0x3300000032), v252, v253, v254, v255, v256, v257);
  v1211[4] = v1151;
  v1211[5] = v1152;
  v1211[6] = v1153;
  v1211[0] = v1147;
  v1211[1] = v1148;
  v1211[3] = v1150;
  v1211[2] = v1149;
  v1649 = 0;
  v1214[0] = xmmword_224662F48;
  v1214[1] = *(_OWORD *)dbl_224662F58;
  sub_223B54204((uint64_t)v1211, 1, 3, 1, (uint64_t)&v1649, (uint64_t)v1214, COERCE_DOUBLE(0x1E00000017), COERCE_DOUBLE(0x3A00000033), v258, v259, v260, v261, v262, v263);
  v1213[4] = v1169;
  v1213[5] = v1170;
  v1213[6] = v1171;
  v1213[0] = v1165;
  v1213[1] = v1166;
  v1213[3] = v1168;
  v1213[2] = v1167;
  v1650 = 0;
  v1216[0] = xmmword_224662F68;
  v1216[1] = *(_OWORD *)dbl_224662F78;
  sub_223B54204((uint64_t)v1213, 0, 2, 2, (uint64_t)&v1650, (uint64_t)v1216, COERCE_DOUBLE(0x1900000018), COERCE_DOUBLE(0x1D0000001CLL), v264, v265, v266, v267, v268, v269);
  v1215[4] = v1169;
  v1215[5] = v1170;
  v1215[6] = v1171;
  v1215[0] = v1165;
  v1215[1] = v1166;
  v1215[3] = v1168;
  v1215[2] = v1167;
  v1651 = 0;
  v1218[0] = xmmword_224662F88;
  v1218[1] = *(_OWORD *)dbl_224662F98;
  sub_223B54204((uint64_t)v1215, 0, 2, 3, (uint64_t)&v1651, (uint64_t)v1218, COERCE_DOUBLE(0x5000000019), COERCE_DOUBLE(0x540000001DLL), v270, v271, v272, v273, v274, v275);
  v1217[4] = v1169;
  v1217[5] = v1170;
  v1217[6] = v1171;
  v1217[0] = v1165;
  v1217[1] = v1166;
  v1217[3] = v1168;
  v1217[2] = v1167;
  v1652 = 0;
  v1226[0] = xmmword_224662FA8;
  v1226[1] = *(_OWORD *)dbl_224662FB8;
  sub_223B54204((uint64_t)v1217, 0, 3, 2, (uint64_t)&v1652, (uint64_t)v1226, COERCE_DOUBLE(0x1B0000001ALL), COERCE_DOUBLE(0x1F0000001ELL), v276, v277, v278, v279, v280, v281);
  v1223 = v1169;
  v1224 = v1170;
  v1225 = v1171;
  v1219 = v1165;
  v1220 = v1166;
  v1222 = v1168;
  v1221 = v1167;
  v1653 = 0;
  v1228[0] = xmmword_224662FC8;
  v1228[1] = *(_OWORD *)dbl_224662FD8;
  sub_223B54204((uint64_t)&v1219, 0, 3, 3, (uint64_t)&v1653, (uint64_t)v1228, COERCE_DOUBLE(0x520000001BLL), COERCE_DOUBLE(0x560000001FLL), v282, v283, v284, v285, v286, v287);
  v1227[4] = v1169;
  v1227[5] = v1170;
  v1227[6] = v1171;
  v1227[0] = v1165;
  v1227[1] = v1166;
  v1227[3] = v1168;
  v1227[2] = v1167;
  v1654 = 0;
  v1230[0] = xmmword_224662FE8;
  v1230[1] = *(_OWORD *)dbl_224662FF8;
  sub_223B54204((uint64_t)v1227, 1, 2, 2, (uint64_t)&v1654, (uint64_t)v1230, COERCE_DOUBLE(0x1D0000001CLL), COERCE_DOUBLE(0x3900000038), v288, v289, v290, v291, v292, v293);
  v1229[4] = v1169;
  v1229[5] = v1170;
  v1229[6] = v1171;
  v1229[0] = v1165;
  v1229[1] = v1166;
  v1229[3] = v1168;
  v1229[2] = v1167;
  v1655 = 0;
  v1232[0] = xmmword_224663008;
  v1232[1] = *(_OWORD *)dbl_224663018;
  sub_223B54204((uint64_t)v1229, 1, 2, 3, (uint64_t)&v1655, (uint64_t)v1232, COERCE_DOUBLE(0x540000001DLL), COERCE_DOUBLE(0x7000000039), v294, v295, v296, v297, v298, v299);
  v1231[4] = v1187;
  v1231[5] = v1188;
  v1231[6] = v1189;
  v1231[0] = v1183;
  v1231[1] = v1184;
  v1231[3] = v1186;
  v1231[2] = v1185;
  v1656 = 0;
  v1234[0] = xmmword_224663028;
  v1234[1] = *(_OWORD *)dbl_224663038;
  sub_223B54204((uint64_t)v1231, 1, 3, 2, (uint64_t)&v1656, (uint64_t)v1234, COERCE_DOUBLE(0x1F0000001ELL), COERCE_DOUBLE(0x3B0000003ALL), v300, v301, v302, v303, v304, v305);
  v1233[4] = v1187;
  v1233[5] = v1188;
  v1233[6] = v1189;
  v1233[0] = v1183;
  v1233[1] = v1184;
  v1233[3] = v1186;
  v1233[2] = v1185;
  v1657 = 0;
  v1236[0] = xmmword_224663048;
  v1236[1] = *(_OWORD *)dbl_224663058;
  sub_223B54204((uint64_t)v1233, 1, 3, 3, (uint64_t)&v1657, (uint64_t)v1236, COERCE_DOUBLE(0x560000001FLL), COERCE_DOUBLE(0x720000003BLL), v306, v307, v308, v309, v310, v311);
  v1235[4] = v1187;
  v1235[5] = v1188;
  v1235[6] = v1189;
  v1235[0] = v1183;
  v1235[1] = v1184;
  v1235[3] = v1186;
  v1235[2] = v1185;
  v1658 = 0;
  v1244[0] = xmmword_224663068;
  v1244[1] = *(_OWORD *)dbl_224663078;
  sub_223B54204((uint64_t)v1235, 2, 0, 0, (uint64_t)&v1658, (uint64_t)v1244, COERCE_DOUBLE(0x2100000020), COERCE_DOUBLE(0x2500000024), v312, v313, v314, v315, v316, v317);
  v1241 = v1187;
  v1242 = v1188;
  v1243 = v1189;
  v1237 = v1183;
  v1238 = v1184;
  v1240 = v1186;
  v1239 = v1185;
  v1659 = 0;
  v1246[0] = xmmword_224663088;
  v1246[1] = *(_OWORD *)dbl_224663098;
  sub_223B54204((uint64_t)&v1237, 2, 0, 1, (uint64_t)&v1659, (uint64_t)v1246, COERCE_DOUBLE(0x2800000021), COERCE_DOUBLE(0x2C00000025), v318, v319, v320, v321, v322, v323);
  v1245[4] = v1187;
  v1245[5] = v1188;
  v1245[6] = v1189;
  v1245[0] = v1183;
  v1245[1] = v1184;
  v1245[3] = v1186;
  v1245[2] = v1185;
  v1660 = 0;
  v1248[0] = xmmword_2246630A8;
  v1248[1] = *(_OWORD *)dbl_2246630B8;
  sub_223B54204((uint64_t)v1245, 2, 1, 0, (uint64_t)&v1660, (uint64_t)v1248, COERCE_DOUBLE(0x2300000022), COERCE_DOUBLE(0x2700000026), v324, v325, v326, v327, v328, v329);
  v1247[4] = v1187;
  v1247[5] = v1188;
  v1247[6] = v1189;
  v1247[0] = v1183;
  v1247[1] = v1184;
  v1247[3] = v1186;
  v1247[2] = v1185;
  v1661 = 0;
  v1250[0] = xmmword_2246630C8;
  v1250[1] = *(_OWORD *)dbl_2246630D8;
  sub_223B54204((uint64_t)v1247, 2, 1, 1, (uint64_t)&v1661, (uint64_t)v1250, COERCE_DOUBLE(0x2A00000023), COERCE_DOUBLE(0x2E00000027), v330, v331, v332, v333, v334, v335);
  v1249[4] = v1205;
  v1249[5] = v1206;
  v1249[6] = v1207;
  v1249[0] = v1201;
  v1249[1] = v1202;
  v1249[3] = v1204;
  v1249[2] = v1203;
  v1662 = 0;
  v1252[0] = xmmword_2246630E8;
  v1252[1] = *(_OWORD *)dbl_2246630F8;
  sub_223B54204((uint64_t)v1249, 3, 0, 0, (uint64_t)&v1662, (uint64_t)v1252, COERCE_DOUBLE(0x2500000024), COERCE_DOUBLE(0x10100000100), v336, v337, v338, v339, v340, v341);
  v1251[4] = v1205;
  v1251[5] = v1206;
  v1251[6] = v1207;
  v1251[0] = v1201;
  v1251[1] = v1202;
  v1251[3] = v1204;
  v1251[2] = v1203;
  v1663 = 0;
  v1254[0] = xmmword_224663108;
  v1254[1] = *(_OWORD *)dbl_224663118;
  sub_223B54204((uint64_t)v1251, 3, 0, 1, (uint64_t)&v1663, (uint64_t)v1254, COERCE_DOUBLE(0x2C00000025), COERCE_DOUBLE(0x10800000101), v342, v343, v344, v345, v346, v347);
  v1253[4] = v1205;
  v1253[5] = v1206;
  v1253[6] = v1207;
  v1253[0] = v1201;
  v1253[1] = v1202;
  v1253[3] = v1204;
  v1253[2] = v1203;
  v1664 = 0;
  v1262[0] = xmmword_224663128;
  v1262[1] = *(_OWORD *)dbl_224663138;
  sub_223B54204((uint64_t)v1253, 3, 1, 0, (uint64_t)&v1664, (uint64_t)v1262, COERCE_DOUBLE(0x2700000026), COERCE_DOUBLE(0x10300000102), v348, v349, v350, v351, v352, v353);
  v1259 = v1205;
  v1260 = v1206;
  v1261 = v1207;
  v1255 = v1201;
  v1256 = v1202;
  v1258 = v1204;
  v1257 = v1203;
  v1665 = 0;
  v1264[0] = xmmword_224663148;
  v1264[1] = *(_OWORD *)dbl_224663158;
  sub_223B54204((uint64_t)&v1255, 3, 1, 1, (uint64_t)&v1665, (uint64_t)v1264, COERCE_DOUBLE(0x2E00000027), COERCE_DOUBLE(0x10A00000103), v354, v355, v356, v357, v358, v359);
  v1263[4] = v1205;
  v1263[5] = v1206;
  v1263[6] = v1207;
  v1263[0] = v1201;
  v1263[1] = v1202;
  v1263[3] = v1204;
  v1263[2] = v1203;
  v1666 = 0;
  v1266[0] = xmmword_224663168;
  v1266[1] = *(_OWORD *)dbl_224663178;
  sub_223B54204((uint64_t)v1263, 2, 0, 2, (uint64_t)&v1666, (uint64_t)v1266, COERCE_DOUBLE(0x2900000028), COERCE_DOUBLE(0x2D0000002CLL), v360, v361, v362, v363, v364, v365);
  v1265[4] = v1205;
  v1265[5] = v1206;
  v1265[6] = v1207;
  v1265[0] = v1201;
  v1265[1] = v1202;
  v1265[3] = v1204;
  v1265[2] = v1203;
  v1667 = 0;
  v1268[0] = xmmword_224663188;
  v1268[1] = *(_OWORD *)dbl_224663198;
  sub_223B54204((uint64_t)v1265, 2, 0, 3, (uint64_t)&v1667, (uint64_t)v1268, COERCE_DOUBLE(0x6000000029), COERCE_DOUBLE(0x640000002DLL), v366, v367, v368, v369, v370, v371);
  v1267[4] = v1223;
  v1267[5] = v1224;
  v1267[6] = v1225;
  v1267[0] = v1219;
  v1267[1] = v1220;
  v1267[3] = v1222;
  v1267[2] = v1221;
  v1668 = 0;
  v1270[0] = xmmword_2246631A8;
  v1270[1] = *(_OWORD *)dbl_2246631B8;
  sub_223B54204((uint64_t)v1267, 2, 1, 2, (uint64_t)&v1668, (uint64_t)v1270, COERCE_DOUBLE(0x2B0000002ALL), COERCE_DOUBLE(0x2F0000002ELL), v372, v373, v374, v375, v376, v377);
  v1269[4] = v1223;
  v1269[5] = v1224;
  v1269[6] = v1225;
  v1269[0] = v1219;
  v1269[1] = v1220;
  v1269[3] = v1222;
  v1269[2] = v1221;
  v1669 = 0;
  v1272[0] = xmmword_2246631C8;
  v1272[1] = *(_OWORD *)dbl_2246631D8;
  sub_223B54204((uint64_t)v1269, 2, 1, 3, (uint64_t)&v1669, (uint64_t)v1272, COERCE_DOUBLE(0x620000002BLL), COERCE_DOUBLE(0x660000002FLL), v378, v379, v380, v381, v382, v383);
  v1271[4] = v1223;
  v1271[5] = v1224;
  v1271[6] = v1225;
  v1271[0] = v1219;
  v1271[1] = v1220;
  v1271[3] = v1222;
  v1271[2] = v1221;
  v1670 = 0;
  v1280[0] = xmmword_2246631E8;
  v1280[1] = *(_OWORD *)dbl_2246631F8;
  sub_223B54204((uint64_t)v1271, 3, 0, 2, (uint64_t)&v1670, (uint64_t)v1280, COERCE_DOUBLE(0x2D0000002CLL), COERCE_DOUBLE(0x10900000108), v384, v385, v386, v387, v388, v389);
  v1277 = v1223;
  v1278 = v1224;
  v1279 = v1225;
  v1273 = v1219;
  v1274 = v1220;
  v1276 = v1222;
  v1275 = v1221;
  v1671 = 0;
  v1282[0] = xmmword_224663208;
  v1282[1] = *(_OWORD *)dbl_224663218;
  sub_223B54204((uint64_t)&v1273, 3, 0, 3, (uint64_t)&v1671, (uint64_t)v1282, COERCE_DOUBLE(0x640000002DLL), COERCE_DOUBLE(0x14000000109), v390, v391, v392, v393, v394, v395);
  v1281[4] = v1223;
  v1281[5] = v1224;
  v1281[6] = v1225;
  v1281[0] = v1219;
  v1281[1] = v1220;
  v1281[3] = v1222;
  v1281[2] = v1221;
  v1672 = 0;
  v1284[0] = xmmword_224663228;
  v1284[1] = *(_OWORD *)dbl_224663238;
  sub_223B54204((uint64_t)v1281, 3, 1, 2, (uint64_t)&v1672, (uint64_t)v1284, COERCE_DOUBLE(0x2F0000002ELL), COERCE_DOUBLE(0x10B0000010ALL), v396, v397, v398, v399, v400, v401);
  v1283[4] = v1223;
  v1283[5] = v1224;
  v1283[6] = v1225;
  v1283[0] = v1219;
  v1283[1] = v1220;
  v1283[3] = v1222;
  v1283[2] = v1221;
  v1673 = 0;
  v1286[0] = xmmword_224663248;
  v1286[1] = *(_OWORD *)dbl_224663258;
  sub_223B54204((uint64_t)v1283, 3, 1, 3, (uint64_t)&v1673, (uint64_t)v1286, COERCE_DOUBLE(0x660000002FLL), COERCE_DOUBLE(0x1420000010BLL), v402, v403, v404, v405, v406, v407);
  v1285[4] = v1241;
  v1285[5] = v1242;
  v1285[6] = v1243;
  v1285[0] = v1237;
  v1285[1] = v1238;
  v1285[3] = v1240;
  v1285[2] = v1239;
  v1674 = 0;
  v1288[0] = xmmword_224663268;
  v1288[1] = *(_OWORD *)dbl_224663278;
  sub_223B54204((uint64_t)v1285, 2, 2, 0, (uint64_t)&v1674, (uint64_t)v1288, COERCE_DOUBLE(0x3100000030), COERCE_DOUBLE(0x3500000034), v408, v409, v410, v411, v412, v413);
  v1287[4] = v1241;
  v1287[5] = v1242;
  v1287[6] = v1243;
  v1287[0] = v1237;
  v1287[1] = v1238;
  v1287[3] = v1240;
  v1287[2] = v1239;
  v1675 = 0;
  v1290[0] = xmmword_224663288;
  v1290[1] = *(_OWORD *)dbl_224663298;
  sub_223B54204((uint64_t)v1287, 2, 2, 1, (uint64_t)&v1675, (uint64_t)v1290, COERCE_DOUBLE(0x3800000031), COERCE_DOUBLE(0x3C00000035), v414, v415, v416, v417, v418, v419);
  v1289[4] = v1241;
  v1289[5] = v1242;
  v1289[6] = v1243;
  v1289[0] = v1237;
  v1289[1] = v1238;
  v1289[3] = v1240;
  v1289[2] = v1239;
  v1676 = 0;
  v1298[0] = xmmword_2246632A8;
  v1298[1] = *(_OWORD *)dbl_2246632B8;
  sub_223B54204((uint64_t)v1289, 2, 3, 0, (uint64_t)&v1676, (uint64_t)v1298, COERCE_DOUBLE(0x3300000032), COERCE_DOUBLE(0x3700000036), v420, v421, v422, v423, v424, v425);
  v1295 = v1241;
  v1296 = v1242;
  v1297 = v1243;
  v1291 = v1237;
  v1292 = v1238;
  v1294 = v1240;
  v1293 = v1239;
  v1677 = 0;
  v1300[0] = xmmword_2246632C8;
  v1300[1] = *(_OWORD *)dbl_2246632D8;
  sub_223B54204((uint64_t)&v1291, 2, 3, 1, (uint64_t)&v1677, (uint64_t)v1300, COERCE_DOUBLE(0x3A00000033), COERCE_DOUBLE(0x3E00000037), v426, v427, v428, v429, v430, v431);
  v1299[4] = v1241;
  v1299[5] = v1242;
  v1299[6] = v1243;
  v1299[0] = v1237;
  v1299[1] = v1238;
  v1299[3] = v1240;
  v1299[2] = v1239;
  v1678 = 0;
  v1302[0] = xmmword_2246632E8;
  v1302[1] = *(_OWORD *)dbl_2246632F8;
  sub_223B54204((uint64_t)v1299, 3, 2, 0, (uint64_t)&v1678, (uint64_t)v1302, COERCE_DOUBLE(0x3500000034), COERCE_DOUBLE(0x11100000110), v432, v433, v434, v435, v436, v437);
  v1301[4] = v1241;
  v1301[5] = v1242;
  v1301[6] = v1243;
  v1301[0] = v1237;
  v1301[1] = v1238;
  v1301[3] = v1240;
  v1301[2] = v1239;
  v1679 = 0;
  v1304[0] = xmmword_224663308;
  v1304[1] = *(_OWORD *)dbl_224663318;
  sub_223B54204((uint64_t)v1301, 3, 2, 1, (uint64_t)&v1679, (uint64_t)v1304, COERCE_DOUBLE(0x3C00000035), COERCE_DOUBLE(0x11800000111), v438, v439, v440, v441, v442, v443);
  v1303[4] = v1259;
  v1303[5] = v1260;
  v1303[6] = v1261;
  v1303[0] = v1255;
  v1303[1] = v1256;
  v1303[3] = v1258;
  v1303[2] = v1257;
  v1680 = 0;
  v1306[0] = xmmword_224663328;
  v1306[1] = *(_OWORD *)dbl_224663338;
  sub_223B54204((uint64_t)v1303, 3, 3, 0, (uint64_t)&v1680, (uint64_t)v1306, COERCE_DOUBLE(0x3700000036), COERCE_DOUBLE(0x11300000112), v444, v445, v446, v447, v448, v449);
  v1305[4] = v1259;
  v1305[5] = v1260;
  v1305[6] = v1261;
  v1305[0] = v1255;
  v1305[1] = v1256;
  v1305[3] = v1258;
  v1305[2] = v1257;
  v1681 = 0;
  v1308[0] = xmmword_224663348;
  v1308[1] = *(_OWORD *)dbl_224663358;
  sub_223B54204((uint64_t)v1305, 3, 3, 1, (uint64_t)&v1681, (uint64_t)v1308, COERCE_DOUBLE(0x3E00000037), COERCE_DOUBLE(0x11A00000113), v450, v451, v452, v453, v454, v455);
  v1307[4] = v1259;
  v1307[5] = v1260;
  v1307[6] = v1261;
  v1307[0] = v1255;
  v1307[1] = v1256;
  v1307[3] = v1258;
  v1307[2] = v1257;
  v1682 = 0;
  v1316[0] = xmmword_224663368;
  v1316[1] = *(_OWORD *)dbl_224663378;
  sub_223B54204((uint64_t)v1307, 2, 2, 2, (uint64_t)&v1682, (uint64_t)v1316, COERCE_DOUBLE(0x3900000038), COERCE_DOUBLE(0x3D0000003CLL), v456, v457, v458, v459, v460, v461);
  v1313 = v1259;
  v1314 = v1260;
  v1315 = v1261;
  v1309 = v1255;
  v1310 = v1256;
  v1312 = v1258;
  v1311 = v1257;
  v1683 = 0;
  v1318[0] = xmmword_224663388;
  v1318[1] = *(_OWORD *)dbl_224663398;
  sub_223B54204((uint64_t)&v1309, 2, 2, 3, (uint64_t)&v1683, (uint64_t)v1318, COERCE_DOUBLE(0x7000000039), COERCE_DOUBLE(0x740000003DLL), v462, v463, v464, v465, v466, v467);
  v1317[4] = v1259;
  v1317[5] = v1260;
  v1317[6] = v1261;
  v1317[0] = v1255;
  v1317[1] = v1256;
  v1317[3] = v1258;
  v1317[2] = v1257;
  v1684 = 0;
  v1320[0] = xmmword_2246633A8;
  v1320[1] = *(_OWORD *)dbl_2246633B8;
  sub_223B54204((uint64_t)v1317, 2, 3, 2, (uint64_t)&v1684, (uint64_t)v1320, COERCE_DOUBLE(0x3B0000003ALL), COERCE_DOUBLE(0x3F0000003ELL), v468, v469, v470, v471, v472, v473);
  v1319[4] = v1259;
  v1319[5] = v1260;
  v1319[6] = v1261;
  v1319[0] = v1255;
  v1319[1] = v1256;
  v1319[3] = v1258;
  v1319[2] = v1257;
  v1685 = 0;
  v1322[0] = xmmword_2246633C8;
  v1322[1] = *(_OWORD *)dbl_2246633D8;
  sub_223B54204((uint64_t)v1319, 2, 3, 3, (uint64_t)&v1685, (uint64_t)v1322, COERCE_DOUBLE(0x720000003BLL), COERCE_DOUBLE(0x760000003FLL), v474, v475, v476, v477, v478, v479);
  v1321[4] = v1277;
  v1321[5] = v1278;
  v1321[6] = v1279;
  v1321[0] = v1273;
  v1321[1] = v1274;
  v1321[3] = v1276;
  v1321[2] = v1275;
  v1686 = 0;
  v1324[0] = xmmword_2246633E8;
  v1324[1] = *(_OWORD *)dbl_2246633F8;
  sub_223B54204((uint64_t)v1321, 3, 2, 2, (uint64_t)&v1686, (uint64_t)v1324, COERCE_DOUBLE(0x3D0000003CLL), COERCE_DOUBLE(0x11900000118), v480, v481, v482, v483, v484, v485);
  v1323[4] = v1277;
  v1323[5] = v1278;
  v1323[6] = v1279;
  v1323[0] = v1273;
  v1323[1] = v1274;
  v1323[3] = v1276;
  v1323[2] = v1275;
  v1687 = 0;
  v1326[0] = xmmword_224663408;
  v1326[1] = *(_OWORD *)dbl_224663418;
  sub_223B54204((uint64_t)v1323, 3, 2, 3, (uint64_t)&v1687, (uint64_t)v1326, COERCE_DOUBLE(0x740000003DLL), COERCE_DOUBLE(0x15000000119), v486, v487, v488, v489, v490, v491);
  v1325[4] = v1277;
  v1325[5] = v1278;
  v1325[6] = v1279;
  v1325[0] = v1273;
  v1325[1] = v1274;
  v1325[3] = v1276;
  v1325[2] = v1275;
  v1688 = 0;
  v1334[0] = xmmword_224663428;
  v1334[1] = *(_OWORD *)dbl_224663438;
  sub_223B54204((uint64_t)v1325, 3, 3, 2, (uint64_t)&v1688, (uint64_t)v1334, COERCE_DOUBLE(0x3F0000003ELL), COERCE_DOUBLE(0x11B0000011ALL), v492, v493, v494, v495, v496, v497);
  v1331 = v1277;
  v1332 = v1278;
  v1333 = v1279;
  v1327 = v1273;
  v1328 = v1274;
  v1330 = v1276;
  v1329 = v1275;
  v1689 = 0;
  v1336[0] = xmmword_224663448;
  v1336[1] = *(_OWORD *)dbl_224663458;
  sub_223B54204((uint64_t)&v1327, 3, 3, 3, (uint64_t)&v1689, (uint64_t)v1336, COERCE_DOUBLE(0x760000003FLL), COERCE_DOUBLE(0x1520000011BLL), v498, v499, v500, v501, v502, v503);
  v1335[4] = v1277;
  v1335[5] = v1278;
  v1335[6] = v1279;
  v1335[0] = v1273;
  v1335[1] = v1274;
  v1335[3] = v1276;
  v1335[2] = v1275;
  v1690 = 0;
  v1338[0] = xmmword_224663468;
  v1338[1] = *(_OWORD *)dbl_224663478;
  sub_223B54204((uint64_t)v1335, 0, 0, 4, (uint64_t)&v1690, (uint64_t)v1338, COERCE_DOUBLE(0x4100000040), COERCE_DOUBLE(0x4500000044), v504, v505, v506, v507, v508, v509);
  v1337[4] = v1277;
  v1337[5] = v1278;
  v1337[6] = v1279;
  v1337[0] = v1273;
  v1337[1] = v1274;
  v1337[3] = v1276;
  v1337[2] = v1275;
  v1691 = 0;
  v1340[0] = xmmword_224663488;
  v1340[1] = *(_OWORD *)dbl_224663498;
  sub_223B54204((uint64_t)v1337, 0, 0, 5, (uint64_t)&v1691, (uint64_t)v1340, COERCE_DOUBLE(0x4800000041), COERCE_DOUBLE(0x4C00000045), v510, v511, v512, v513, v514, v515);
  v1339[4] = v1295;
  v1339[5] = v1296;
  v1339[6] = v1297;
  v1339[0] = v1291;
  v1339[1] = v1292;
  v1339[3] = v1294;
  v1339[2] = v1293;
  v1692 = 0;
  v1342[0] = xmmword_2246634A8;
  v1342[1] = *(_OWORD *)dbl_2246634B8;
  sub_223B54204((uint64_t)v1339, 0, 1, 4, (uint64_t)&v1692, (uint64_t)v1342, COERCE_DOUBLE(0x4300000042), COERCE_DOUBLE(0x4700000046), v516, v517, v518, v519, v520, v521);
  v1341[4] = v1295;
  v1341[5] = v1296;
  v1341[6] = v1297;
  v1341[0] = v1291;
  v1341[1] = v1292;
  v1341[3] = v1294;
  v1341[2] = v1293;
  v1693 = 0;
  v1344[0] = xmmword_2246634C8;
  v1344[1] = *(_OWORD *)dbl_2246634D8;
  sub_223B54204((uint64_t)v1341, 0, 1, 5, (uint64_t)&v1693, (uint64_t)v1344, COERCE_DOUBLE(0x4A00000043), COERCE_DOUBLE(0x4E00000047), v522, v523, v524, v525, v526, v527);
  v1343[4] = v1295;
  v1343[5] = v1296;
  v1343[6] = v1297;
  v1343[0] = v1291;
  v1343[1] = v1292;
  v1343[3] = v1294;
  v1343[2] = v1293;
  v1694 = 0;
  v1352[0] = xmmword_2246634E8;
  v1352[1] = *(_OWORD *)dbl_2246634F8;
  sub_223B54204((uint64_t)v1343, 1, 0, 4, (uint64_t)&v1694, (uint64_t)v1352, COERCE_DOUBLE(0x4500000044), COERCE_DOUBLE(0x6100000060), v528, v529, v530, v531, v532, v533);
  v1349 = v1295;
  v1350 = v1296;
  v1351 = v1297;
  v1345 = v1291;
  v1346 = v1292;
  v1348 = v1294;
  v1347 = v1293;
  v1695 = 0;
  v1354[0] = xmmword_224663508;
  v1354[1] = *(_OWORD *)dbl_224663518;
  sub_223B54204((uint64_t)&v1345, 1, 0, 5, (uint64_t)&v1695, (uint64_t)v1354, COERCE_DOUBLE(0x4C00000045), COERCE_DOUBLE(0x6800000061), v534, v535, v536, v537, v538, v539);
  v1353[4] = v1295;
  v1353[5] = v1296;
  v1353[6] = v1297;
  v1353[0] = v1291;
  v1353[1] = v1292;
  v1353[3] = v1294;
  v1353[2] = v1293;
  v1696 = 0;
  v1356[0] = xmmword_224663528;
  v1356[1] = *(_OWORD *)dbl_224663538;
  sub_223B54204((uint64_t)v1353, 1, 1, 4, (uint64_t)&v1696, (uint64_t)v1356, COERCE_DOUBLE(0x4700000046), COERCE_DOUBLE(0x6300000062), v540, v541, v542, v543, v544, v545);
  v1355[4] = v1295;
  v1355[5] = v1296;
  v1355[6] = v1297;
  v1355[0] = v1291;
  v1355[1] = v1292;
  v1355[3] = v1294;
  v1355[2] = v1293;
  v1697 = 0;
  v1358[0] = xmmword_224663548;
  v1358[1] = *(_OWORD *)dbl_224663558;
  sub_223B54204((uint64_t)v1355, 1, 1, 5, (uint64_t)&v1697, (uint64_t)v1358, COERCE_DOUBLE(0x4E00000047), COERCE_DOUBLE(0x6A00000063), v546, v547, v548, v549, v550, v551);
  v1357[4] = v1313;
  v1357[5] = v1314;
  v1357[6] = v1315;
  v1357[0] = v1309;
  v1357[1] = v1310;
  v1357[3] = v1312;
  v1357[2] = v1311;
  v1698 = 0;
  v1360[0] = xmmword_224663568;
  v1360[1] = *(_OWORD *)dbl_224663578;
  sub_223B54204((uint64_t)v1357, 0, 0, 6, (uint64_t)&v1698, (uint64_t)v1360, COERCE_DOUBLE(0x4900000048), COERCE_DOUBLE(0x4D0000004CLL), v552, v553, v554, v555, v556, v557);
  v1359[4] = v1313;
  v1359[5] = v1314;
  v1359[6] = v1315;
  v1359[0] = v1309;
  v1359[1] = v1310;
  v1359[3] = v1312;
  v1359[2] = v1311;
  v1699 = 0x100010001000100;
  v1362[0] = xmmword_224663588;
  v1362[1] = *(_OWORD *)dbl_224663598;
  sub_223B54204((uint64_t)v1359, 0, 0, 7, (uint64_t)&v1699, (uint64_t)v1362, COERCE_DOUBLE(73), COERCE_DOUBLE(0x40000004DLL), v558, v559, v560, v561, v562, v563);
  v1361[4] = v1313;
  v1361[5] = v1314;
  v1361[6] = v1315;
  v1361[0] = v1309;
  v1361[1] = v1310;
  v1361[3] = v1312;
  v1361[2] = v1311;
  v1700 = 0;
  v1370[0] = xmmword_2246635A8;
  v1370[1] = *(_OWORD *)dbl_2246635B8;
  sub_223B54204((uint64_t)v1361, 0, 1, 6, (uint64_t)&v1700, (uint64_t)v1370, COERCE_DOUBLE(0x4B0000004ALL), COERCE_DOUBLE(0x4F0000004ELL), v564, v565, v566, v567, v568, v569);
  v1367 = v1313;
  v1368 = v1314;
  v1369 = v1315;
  v1363 = v1309;
  v1364 = v1310;
  v1366 = v1312;
  v1365 = v1311;
  v1701 = 0x100010001000100;
  v1372[0] = xmmword_2246635C8;
  v1372[1] = *(_OWORD *)dbl_2246635D8;
  sub_223B54204((uint64_t)&v1363, 0, 1, 7, (uint64_t)&v1701, (uint64_t)v1372, COERCE_DOUBLE(0x20000004BLL), COERCE_DOUBLE(0x60000004FLL), v570, v571, v572, v573, v574, v575);
  v1371[4] = v1313;
  v1371[5] = v1314;
  v1371[6] = v1315;
  v1371[0] = v1309;
  v1371[1] = v1310;
  v1371[3] = v1312;
  v1371[2] = v1311;
  v1702 = 0;
  v1374[0] = xmmword_2246635E8;
  v1374[1] = *(_OWORD *)dbl_2246635F8;
  sub_223B54204((uint64_t)v1371, 1, 0, 6, (uint64_t)&v1702, (uint64_t)v1374, COERCE_DOUBLE(0x4D0000004CLL), COERCE_DOUBLE(0x6900000068), v576, v577, v578, v579, v580, v581);
  v1373[4] = v1313;
  v1373[5] = v1314;
  v1373[6] = v1315;
  v1373[0] = v1309;
  v1373[1] = v1310;
  v1373[3] = v1312;
  v1373[2] = v1311;
  v1703 = 0x100010001000100;
  v1376[0] = xmmword_224663608;
  v1376[1] = *(_OWORD *)dbl_224663618;
  sub_223B54204((uint64_t)v1373, 1, 0, 7, (uint64_t)&v1703, (uint64_t)v1376, COERCE_DOUBLE(0x40000004DLL), COERCE_DOUBLE(0x2000000069), v582, v583, v584, v585, v586, v587);
  v1375[4] = v1331;
  v1375[5] = v1332;
  v1375[6] = v1333;
  v1375[0] = v1327;
  v1375[1] = v1328;
  v1375[3] = v1330;
  v1375[2] = v1329;
  v1704 = 0;
  v1378[0] = xmmword_224663628;
  v1378[1] = *(_OWORD *)dbl_224663638;
  sub_223B54204((uint64_t)v1375, 1, 1, 6, (uint64_t)&v1704, (uint64_t)v1378, COERCE_DOUBLE(0x4F0000004ELL), COERCE_DOUBLE(0x6B0000006ALL), v588, v589, v590, v591, v592, v593);
  v1377[4] = v1331;
  v1377[5] = v1332;
  v1377[6] = v1333;
  v1377[0] = v1327;
  v1377[1] = v1328;
  v1377[3] = v1330;
  v1377[2] = v1329;
  v1705 = 0x100010001000100;
  v1380[0] = xmmword_224663648;
  v1380[1] = *(_OWORD *)dbl_224663658;
  sub_223B54204((uint64_t)v1377, 1, 1, 7, (uint64_t)&v1705, (uint64_t)v1380, COERCE_DOUBLE(0x60000004FLL), COERCE_DOUBLE(0x220000006BLL), v594, v595, v596, v597, v598, v599);
  v1379[4] = v1331;
  v1379[5] = v1332;
  v1379[6] = v1333;
  v1379[0] = v1327;
  v1379[1] = v1328;
  v1379[3] = v1330;
  v1379[2] = v1329;
  v1706 = 0;
  v1388[0] = xmmword_224663668;
  v1388[1] = *(_OWORD *)dbl_224663678;
  sub_223B54204((uint64_t)v1379, 0, 2, 4, (uint64_t)&v1706, (uint64_t)v1388, COERCE_DOUBLE(0x5100000050), COERCE_DOUBLE(0x5500000054), v600, v601, v602, v603, v604, v605);
  v1385 = v1331;
  v1386 = v1332;
  v1387 = v1333;
  v1381 = v1327;
  v1382 = v1328;
  v1384 = v1330;
  v1383 = v1329;
  v1707 = 0;
  v1390[0] = xmmword_224663688;
  v1390[1] = *(_OWORD *)dbl_224663698;
  sub_223B54204((uint64_t)&v1381, 0, 2, 5, (uint64_t)&v1707, (uint64_t)v1390, COERCE_DOUBLE(0x5800000051), COERCE_DOUBLE(0x5C00000055), v606, v607, v608, v609, v610, v611);
  v1389[4] = v1331;
  v1389[5] = v1332;
  v1389[6] = v1333;
  v1389[0] = v1327;
  v1389[1] = v1328;
  v1389[3] = v1330;
  v1389[2] = v1329;
  v1708 = 0;
  v1392[0] = xmmword_2246636A8;
  v1392[1] = *(_OWORD *)dbl_2246636B8;
  sub_223B54204((uint64_t)v1389, 0, 3, 4, (uint64_t)&v1708, (uint64_t)v1392, COERCE_DOUBLE(0x5300000052), COERCE_DOUBLE(0x5700000056), v612, v613, v614, v615, v616, v617);
  v1391[4] = v1331;
  v1391[5] = v1332;
  v1391[6] = v1333;
  v1391[0] = v1327;
  v1391[1] = v1328;
  v1391[3] = v1330;
  v1391[2] = v1329;
  v1709 = 0;
  v1394[0] = xmmword_2246636C8;
  v1394[1] = *(_OWORD *)dbl_2246636D8;
  sub_223B54204((uint64_t)v1391, 0, 3, 5, (uint64_t)&v1709, (uint64_t)v1394, COERCE_DOUBLE(0x5A00000053), COERCE_DOUBLE(0x5E00000057), v618, v619, v620, v621, v622, v623);
  v1393[4] = v1349;
  v1393[5] = v1350;
  v1393[6] = v1351;
  v1393[0] = v1345;
  v1393[1] = v1346;
  v1393[3] = v1348;
  v1393[2] = v1347;
  v1710 = 0;
  v1396[0] = xmmword_2246636E8;
  v1396[1] = *(_OWORD *)dbl_2246636F8;
  sub_223B54204((uint64_t)v1393, 1, 2, 4, (uint64_t)&v1710, (uint64_t)v1396, COERCE_DOUBLE(0x5500000054), COERCE_DOUBLE(0x7100000070), v624, v625, v626, v627, v628, v629);
  v1395[4] = v1349;
  v1395[5] = v1350;
  v1395[6] = v1351;
  v1395[0] = v1345;
  v1395[1] = v1346;
  v1395[3] = v1348;
  v1395[2] = v1347;
  v1711 = 0;
  v1398[0] = xmmword_224663708;
  v1398[1] = *(_OWORD *)dbl_224663718;
  sub_223B54204((uint64_t)v1395, 1, 2, 5, (uint64_t)&v1711, (uint64_t)v1398, COERCE_DOUBLE(0x5C00000055), COERCE_DOUBLE(0x7800000071), v630, v631, v632, v633, v634, v635);
  v1397[4] = v1349;
  v1397[5] = v1350;
  v1397[6] = v1351;
  v1397[0] = v1345;
  v1397[1] = v1346;
  v1397[3] = v1348;
  v1397[2] = v1347;
  v1712 = 0;
  v1406[0] = xmmword_224663728;
  v1406[1] = *(_OWORD *)dbl_224663738;
  sub_223B54204((uint64_t)v1397, 1, 3, 4, (uint64_t)&v1712, (uint64_t)v1406, COERCE_DOUBLE(0x5700000056), COERCE_DOUBLE(0x7300000072), v636, v637, v638, v639, v640, v641);
  v1403 = v1349;
  v1404 = v1350;
  v1405 = v1351;
  v1399 = v1345;
  v1400 = v1346;
  v1402 = v1348;
  v1401 = v1347;
  v1713 = 0;
  v1408[0] = xmmword_224663748;
  v1408[1] = *(_OWORD *)dbl_224663758;
  sub_223B54204((uint64_t)&v1399, 1, 3, 5, (uint64_t)&v1713, (uint64_t)v1408, COERCE_DOUBLE(0x5E00000057), COERCE_DOUBLE(0x7A00000073), v642, v643, v644, v645, v646, v647);
  v1407[4] = v1349;
  v1407[5] = v1350;
  v1407[6] = v1351;
  v1407[0] = v1345;
  v1407[1] = v1346;
  v1407[3] = v1348;
  v1407[2] = v1347;
  v1714 = 0;
  v1410[0] = xmmword_224663768;
  v1410[1] = *(_OWORD *)dbl_224663778;
  sub_223B54204((uint64_t)v1407, 0, 2, 6, (uint64_t)&v1714, (uint64_t)v1410, COERCE_DOUBLE(0x5900000058), COERCE_DOUBLE(0x5D0000005CLL), v648, v649, v650, v651, v652, v653);
  v1409[4] = v1349;
  v1409[5] = v1350;
  v1409[6] = v1351;
  v1409[0] = v1345;
  v1409[1] = v1346;
  v1409[3] = v1348;
  v1409[2] = v1347;
  v1715 = 0x100010001000100;
  v1412[0] = xmmword_224663788;
  v1412[1] = *(_OWORD *)dbl_224663798;
  sub_223B54204((uint64_t)v1409, 0, 2, 7, (uint64_t)&v1715, (uint64_t)v1412, COERCE_DOUBLE(0x1000000059), COERCE_DOUBLE(0x140000005DLL), v654, v655, v656, v657, v658, v659);
  v1411[4] = v1367;
  v1411[5] = v1368;
  v1411[6] = v1369;
  v1411[0] = v1363;
  v1411[1] = v1364;
  v1411[3] = v1366;
  v1411[2] = v1365;
  v1716 = 0;
  v1414[0] = xmmword_2246637A8;
  v1414[1] = *(_OWORD *)dbl_2246637B8;
  sub_223B54204((uint64_t)v1411, 0, 3, 6, (uint64_t)&v1716, (uint64_t)v1414, COERCE_DOUBLE(0x5B0000005ALL), COERCE_DOUBLE(0x5F0000005ELL), v660, v661, v662, v663, v664, v665);
  v1413[4] = v1367;
  v1413[5] = v1368;
  v1413[6] = v1369;
  v1413[0] = v1363;
  v1413[1] = v1364;
  v1413[3] = v1366;
  v1413[2] = v1365;
  v1717 = 0x100010001000100;
  v1416[0] = xmmword_2246637C8;
  v1416[1] = *(_OWORD *)dbl_2246637D8;
  sub_223B54204((uint64_t)v1413, 0, 3, 7, (uint64_t)&v1717, (uint64_t)v1416, COERCE_DOUBLE(0x120000005BLL), COERCE_DOUBLE(0x160000005FLL), v666, v667, v668, v669, v670, v671);
  v1415[4] = v1367;
  v1415[5] = v1368;
  v1415[6] = v1369;
  v1415[0] = v1363;
  v1415[1] = v1364;
  v1415[3] = v1366;
  v1415[2] = v1365;
  v1718 = 0;
  v1424[0] = xmmword_2246637E8;
  v1424[1] = *(_OWORD *)dbl_2246637F8;
  sub_223B54204((uint64_t)v1415, 1, 2, 6, (uint64_t)&v1718, (uint64_t)v1424, COERCE_DOUBLE(0x5D0000005CLL), COERCE_DOUBLE(0x7900000078), v672, v673, v674, v675, v676, v677);
  v1421 = v1367;
  v1422 = v1368;
  v1423 = v1369;
  v1417 = v1363;
  v1418 = v1364;
  v1420 = v1366;
  v1419 = v1365;
  v1719 = 0x100010001000100;
  v1426[0] = xmmword_224663808;
  v1426[1] = *(_OWORD *)dbl_224663818;
  sub_223B54204((uint64_t)&v1417, 1, 2, 7, (uint64_t)&v1719, (uint64_t)v1426, COERCE_DOUBLE(0x140000005DLL), COERCE_DOUBLE(0x3000000079), v678, v679, v680, v681, v682, v683);
  v1425[4] = v1367;
  v1425[5] = v1368;
  v1425[6] = v1369;
  v1425[0] = v1363;
  v1425[1] = v1364;
  v1425[3] = v1366;
  v1425[2] = v1365;
  v1720 = 0;
  v1428[0] = xmmword_224663828;
  v1428[1] = *(_OWORD *)dbl_224663838;
  sub_223B54204((uint64_t)v1425, 1, 3, 6, (uint64_t)&v1720, (uint64_t)v1428, COERCE_DOUBLE(0x5F0000005ELL), COERCE_DOUBLE(0x7B0000007ALL), v684, v685, v686, v687, v688, v689);
  v1427[4] = v1367;
  v1427[5] = v1368;
  v1427[6] = v1369;
  v1427[0] = v1363;
  v1427[1] = v1364;
  v1427[3] = v1366;
  v1427[2] = v1365;
  v1721 = 0x100010001000100;
  v1430[0] = xmmword_224663848;
  v1430[1] = *(_OWORD *)dbl_224663858;
  sub_223B54204((uint64_t)v1427, 1, 3, 7, (uint64_t)&v1721, (uint64_t)v1430, COERCE_DOUBLE(0x160000005FLL), COERCE_DOUBLE(0x320000007BLL), v690, v691, v692, v693, v694, v695);
  v1429[4] = v1385;
  v1429[5] = v1386;
  v1429[6] = v1387;
  v1429[0] = v1381;
  v1429[1] = v1382;
  v1429[3] = v1384;
  v1429[2] = v1383;
  v1722 = 0;
  v1432[0] = xmmword_224663868;
  v1432[1] = *(_OWORD *)dbl_224663878;
  sub_223B54204((uint64_t)v1429, 2, 0, 4, (uint64_t)&v1722, (uint64_t)v1432, COERCE_DOUBLE(0x6100000060), COERCE_DOUBLE(0x6500000064), v696, v697, v698, v699, v700, v701);
  v1431[4] = v1385;
  v1431[5] = v1386;
  v1431[6] = v1387;
  v1431[0] = v1381;
  v1431[1] = v1382;
  v1431[3] = v1384;
  v1431[2] = v1383;
  v1723 = 0;
  v1434[0] = xmmword_224663888;
  v1434[1] = *(_OWORD *)dbl_224663898;
  sub_223B54204((uint64_t)v1431, 2, 0, 5, (uint64_t)&v1723, (uint64_t)v1434, COERCE_DOUBLE(0x6800000061), COERCE_DOUBLE(0x6C00000065), v702, v703, v704, v705, v706, v707);
  v1433[4] = v1385;
  v1433[5] = v1386;
  v1433[6] = v1387;
  v1433[0] = v1381;
  v1433[1] = v1382;
  v1433[3] = v1384;
  v1433[2] = v1383;
  v1724 = 0;
  v1442[0] = xmmword_2246638A8;
  v1442[1] = *(_OWORD *)dbl_2246638B8;
  sub_223B54204((uint64_t)v1433, 2, 1, 4, (uint64_t)&v1724, (uint64_t)v1442, COERCE_DOUBLE(0x6300000062), COERCE_DOUBLE(0x6700000066), v708, v709, v710, v711, v712, v713);
  v1439 = v1385;
  v1440 = v1386;
  v1441 = v1387;
  v1435 = v1381;
  v1436 = v1382;
  v1438 = v1384;
  v1437 = v1383;
  v1725 = 0;
  v1444[0] = xmmword_2246638C8;
  v1444[1] = *(_OWORD *)dbl_2246638D8;
  sub_223B54204((uint64_t)&v1435, 2, 1, 5, (uint64_t)&v1725, (uint64_t)v1444, COERCE_DOUBLE(0x6A00000063), COERCE_DOUBLE(0x6E00000067), v714, v715, v716, v717, v718, v719);
  v1443[4] = v1385;
  v1443[5] = v1386;
  v1443[6] = v1387;
  v1443[0] = v1381;
  v1443[1] = v1382;
  v1443[3] = v1384;
  v1443[2] = v1383;
  v1726 = 0;
  v1446[0] = xmmword_2246638E8;
  v1446[1] = *(_OWORD *)dbl_2246638F8;
  sub_223B54204((uint64_t)v1443, 3, 0, 4, (uint64_t)&v1726, (uint64_t)v1446, COERCE_DOUBLE(0x6500000064), COERCE_DOUBLE(0x14100000140), v720, v721, v722, v723, v724, v725);
  v1445[4] = v1385;
  v1445[5] = v1386;
  v1445[6] = v1387;
  v1445[0] = v1381;
  v1445[1] = v1382;
  v1445[3] = v1384;
  v1445[2] = v1383;
  v1727 = 0;
  v1448[0] = xmmword_224663908;
  v1448[1] = *(_OWORD *)dbl_224663918;
  sub_223B54204((uint64_t)v1445, 3, 0, 5, (uint64_t)&v1727, (uint64_t)v1448, COERCE_DOUBLE(0x6C00000065), COERCE_DOUBLE(0x14800000141), v726, v727, v728, v729, v730, v731);
  v1447[4] = v1403;
  v1447[5] = v1404;
  v1447[6] = v1405;
  v1447[0] = v1399;
  v1447[1] = v1400;
  v1447[3] = v1402;
  v1447[2] = v1401;
  v1728 = 0;
  v1450[0] = xmmword_224663928;
  v1450[1] = *(_OWORD *)dbl_224663938;
  sub_223B54204((uint64_t)v1447, 3, 1, 4, (uint64_t)&v1728, (uint64_t)v1450, COERCE_DOUBLE(0x6700000066), COERCE_DOUBLE(0x14300000142), v732, v733, v734, v735, v736, v737);
  v1449[4] = v1403;
  v1449[5] = v1404;
  v1449[6] = v1405;
  v1449[0] = v1399;
  v1449[1] = v1400;
  v1449[3] = v1402;
  v1449[2] = v1401;
  v1729 = 0;
  v1452[0] = xmmword_224663948;
  v1452[1] = *(_OWORD *)dbl_224663958;
  sub_223B54204((uint64_t)v1449, 3, 1, 5, (uint64_t)&v1729, (uint64_t)v1452, COERCE_DOUBLE(0x6E00000067), COERCE_DOUBLE(0x14A00000143), v738, v739, v740, v741, v742, v743);
  v1451[4] = v1403;
  v1451[5] = v1404;
  v1451[6] = v1405;
  v1451[0] = v1399;
  v1451[1] = v1400;
  v1451[3] = v1402;
  v1451[2] = v1401;
  v1730 = 0;
  v1460[0] = xmmword_224663968;
  v1460[1] = *(_OWORD *)dbl_224663978;
  sub_223B54204((uint64_t)v1451, 2, 0, 6, (uint64_t)&v1730, (uint64_t)v1460, COERCE_DOUBLE(0x6900000068), COERCE_DOUBLE(0x6D0000006CLL), v744, v745, v746, v747, v748, v749);
  v1457 = v1403;
  v1458 = v1404;
  v1459 = v1405;
  v1453 = v1399;
  v1454 = v1400;
  v1456 = v1402;
  v1455 = v1401;
  v1731 = 0x100010001000100;
  v1462[0] = xmmword_224663988;
  v1462[1] = *(_OWORD *)dbl_224663998;
  sub_223B54204((uint64_t)&v1453, 2, 0, 7, (uint64_t)&v1731, (uint64_t)v1462, COERCE_DOUBLE(0x2000000069), COERCE_DOUBLE(0x240000006DLL), v750, v751, v752, v753, v754, v755);
  v1461[4] = v1403;
  v1461[5] = v1404;
  v1461[6] = v1405;
  v1461[0] = v1399;
  v1461[1] = v1400;
  v1461[3] = v1402;
  v1461[2] = v1401;
  v1732 = 0;
  v1464[0] = xmmword_2246639A8;
  v1464[1] = *(_OWORD *)dbl_2246639B8;
  sub_223B54204((uint64_t)v1461, 2, 1, 6, (uint64_t)&v1732, (uint64_t)v1464, COERCE_DOUBLE(0x6B0000006ALL), COERCE_DOUBLE(0x6F0000006ELL), v756, v757, v758, v759, v760, v761);
  v1463[4] = v1403;
  v1463[5] = v1404;
  v1463[6] = v1405;
  v1463[0] = v1399;
  v1463[1] = v1400;
  v1463[3] = v1402;
  v1463[2] = v1401;
  v1733 = 0x100010001000100;
  v1466[0] = xmmword_2246639C8;
  v1466[1] = *(_OWORD *)dbl_2246639D8;
  sub_223B54204((uint64_t)v1463, 2, 1, 7, (uint64_t)&v1733, (uint64_t)v1466, COERCE_DOUBLE(0x220000006BLL), COERCE_DOUBLE(0x260000006FLL), v762, v763, v764, v765, v766, v767);
  v1465[4] = v1421;
  v1465[5] = v1422;
  v1465[6] = v1423;
  v1465[0] = v1417;
  v1465[1] = v1418;
  v1465[3] = v1420;
  v1465[2] = v1419;
  v1734 = 0;
  v1468[0] = xmmword_2246639E8;
  v1468[1] = *(_OWORD *)dbl_2246639F8;
  sub_223B54204((uint64_t)v1465, 3, 0, 6, (uint64_t)&v1734, (uint64_t)v1468, COERCE_DOUBLE(0x6D0000006CLL), COERCE_DOUBLE(0x14900000148), v768, v769, v770, v771, v772, v773);
  v1467[4] = v1421;
  v1467[5] = v1422;
  v1467[6] = v1423;
  v1467[0] = v1417;
  v1467[1] = v1418;
  v1467[3] = v1420;
  v1467[2] = v1419;
  v1735 = 0x100010001000100;
  v1470[0] = xmmword_224663A08;
  v1470[1] = *(_OWORD *)dbl_224663A18;
  sub_223B54204((uint64_t)v1467, 3, 0, 7, (uint64_t)&v1735, (uint64_t)v1470, COERCE_DOUBLE(0x240000006DLL), COERCE_DOUBLE(0x10000000149), v774, v775, v776, v777, v778, v779);
  v1469[4] = v1421;
  v1469[5] = v1422;
  v1469[6] = v1423;
  v1469[0] = v1417;
  v1469[1] = v1418;
  v1469[3] = v1420;
  v1469[2] = v1419;
  v1736 = 0;
  v1478[0] = xmmword_224663A28;
  v1478[1] = *(_OWORD *)dbl_224663A38;
  sub_223B54204((uint64_t)v1469, 3, 1, 6, (uint64_t)&v1736, (uint64_t)v1478, COERCE_DOUBLE(0x6F0000006ELL), COERCE_DOUBLE(0x14B0000014ALL), v780, v781, v782, v783, v784, v785);
  v1475 = v1421;
  v1476 = v1422;
  v1477 = v1423;
  v1471 = v1417;
  v1472 = v1418;
  v1474 = v1420;
  v1473 = v1419;
  v1737 = 0x100010001000100;
  v1480[0] = xmmword_224663A48;
  v1480[1] = *(_OWORD *)dbl_224663A58;
  sub_223B54204((uint64_t)&v1471, 3, 1, 7, (uint64_t)&v1737, (uint64_t)v1480, COERCE_DOUBLE(0x260000006FLL), COERCE_DOUBLE(0x1020000014BLL), v786, v787, v788, v789, v790, v791);
  v1479[4] = v1421;
  v1479[5] = v1422;
  v1479[6] = v1423;
  v1479[0] = v1417;
  v1479[1] = v1418;
  v1479[3] = v1420;
  v1479[2] = v1419;
  v1738 = 0;
  v1482[0] = xmmword_224663A68;
  v1482[1] = *(_OWORD *)dbl_224663A78;
  sub_223B54204((uint64_t)v1479, 2, 2, 4, (uint64_t)&v1738, (uint64_t)v1482, COERCE_DOUBLE(0x7100000070), COERCE_DOUBLE(0x7500000074), v792, v793, v794, v795, v796, v797);
  v1481[4] = v1421;
  v1481[5] = v1422;
  v1481[6] = v1423;
  v1481[0] = v1417;
  v1481[1] = v1418;
  v1481[3] = v1420;
  v1481[2] = v1419;
  v1739 = 0;
  v1484[0] = xmmword_224663A88;
  v1484[1] = *(_OWORD *)dbl_224663A98;
  sub_223B54204((uint64_t)v1481, 2, 2, 5, (uint64_t)&v1739, (uint64_t)v1484, COERCE_DOUBLE(0x7800000071), COERCE_DOUBLE(0x7C00000075), v798, v799, v800, v801, v802, v803);
  v1483[4] = v1439;
  v1483[5] = v1440;
  v1483[6] = v1441;
  v1483[0] = v1435;
  v1483[1] = v1436;
  v1483[3] = v1438;
  v1483[2] = v1437;
  v1740 = 0;
  v1486[0] = xmmword_224663AA8;
  v1486[1] = *(_OWORD *)dbl_224663AB8;
  sub_223B54204((uint64_t)v1483, 2, 3, 4, (uint64_t)&v1740, (uint64_t)v1486, COERCE_DOUBLE(0x7300000072), COERCE_DOUBLE(0x7700000076), v804, v805, v806, v807, v808, v809);
  v1485[4] = v1439;
  v1485[5] = v1440;
  v1485[6] = v1441;
  v1485[0] = v1435;
  v1485[1] = v1436;
  v1485[3] = v1438;
  v1485[2] = v1437;
  v1741 = 0;
  v1488[0] = xmmword_224663AC8;
  v1488[1] = *(_OWORD *)dbl_224663AD8;
  sub_223B54204((uint64_t)v1485, 2, 3, 5, (uint64_t)&v1741, (uint64_t)v1488, COERCE_DOUBLE(0x7A00000073), COERCE_DOUBLE(0x7E00000077), v810, v811, v812, v813, v814, v815);
  v1487[4] = v1439;
  v1487[5] = v1440;
  v1487[6] = v1441;
  v1487[0] = v1435;
  v1487[1] = v1436;
  v1487[3] = v1438;
  v1487[2] = v1437;
  v1742 = 0;
  v1496[0] = xmmword_224663AE8;
  v1496[1] = *(_OWORD *)dbl_224663AF8;
  sub_223B54204((uint64_t)v1487, 3, 2, 4, (uint64_t)&v1742, (uint64_t)v1496, COERCE_DOUBLE(0x7500000074), COERCE_DOUBLE(0x15100000150), v816, v817, v818, v819, v820, v821);
  v1493 = v1439;
  v1494 = v1440;
  v1495 = v1441;
  v1489 = v1435;
  v1490 = v1436;
  v1492 = v1438;
  v1491 = v1437;
  v1743 = 0;
  v1498[0] = xmmword_224663B08;
  v1498[1] = *(_OWORD *)dbl_224663B18;
  sub_223B54204((uint64_t)&v1489, 3, 2, 5, (uint64_t)&v1743, (uint64_t)v1498, COERCE_DOUBLE(0x7C00000075), COERCE_DOUBLE(0x15800000151), v822, v823, v824, v825, v826, v827);
  v1497[4] = v1439;
  v1497[5] = v1440;
  v1497[6] = v1441;
  v1497[0] = v1435;
  v1497[1] = v1436;
  v1497[3] = v1438;
  v1497[2] = v1437;
  v1744 = 0;
  v1500[0] = xmmword_224663B28;
  v1500[1] = *(_OWORD *)dbl_224663B38;
  sub_223B54204((uint64_t)v1497, 3, 3, 4, (uint64_t)&v1744, (uint64_t)v1500, COERCE_DOUBLE(0x7700000076), COERCE_DOUBLE(0x15300000152), v828, v829, v830, v831, v832, v833);
  v1499[4] = v1439;
  v1499[5] = v1440;
  v1499[6] = v1441;
  v1499[0] = v1435;
  v1499[1] = v1436;
  v1499[3] = v1438;
  v1499[2] = v1437;
  v1745 = 0;
  v1502[0] = xmmword_224663B48;
  v1502[1] = *(_OWORD *)dbl_224663B58;
  sub_223B54204((uint64_t)v1499, 3, 3, 5, (uint64_t)&v1745, (uint64_t)v1502, COERCE_DOUBLE(0x7E00000077), COERCE_DOUBLE(0x15A00000153), v834, v835, v836, v837, v838, v839);
  v1501[4] = v1457;
  v1501[5] = v1458;
  v1501[6] = v1459;
  v1501[0] = v1453;
  v1501[1] = v1454;
  v1501[3] = v1456;
  v1501[2] = v1455;
  v1746 = 0;
  v1504[0] = xmmword_224663B68;
  v1504[1] = *(_OWORD *)dbl_224663B78;
  sub_223B54204((uint64_t)v1501, 2, 2, 6, (uint64_t)&v1746, (uint64_t)v1504, COERCE_DOUBLE(0x7900000078), COERCE_DOUBLE(0x7D0000007CLL), v840, v841, v842, v843, v844, v845);
  v1503[4] = v1457;
  v1503[5] = v1458;
  v1503[6] = v1459;
  v1503[0] = v1453;
  v1503[1] = v1454;
  v1503[3] = v1456;
  v1503[2] = v1455;
  v1747 = 0x100010001000100;
  v1506[0] = xmmword_224663B88;
  v1506[1] = *(_OWORD *)dbl_224663B98;
  sub_223B54204((uint64_t)v1503, 2, 2, 7, (uint64_t)&v1747, (uint64_t)v1506, COERCE_DOUBLE(0x3000000079), COERCE_DOUBLE(0x340000007DLL), v846, v847, v848, v849, v850, v851);
  v1505[4] = v1457;
  v1505[5] = v1458;
  v1505[6] = v1459;
  v1505[0] = v1453;
  v1505[1] = v1454;
  v1505[3] = v1456;
  v1505[2] = v1455;
  v1748 = 0;
  v1514[0] = xmmword_224663BA8;
  v1514[1] = *(_OWORD *)dbl_224663BB8;
  sub_223B54204((uint64_t)v1505, 2, 3, 6, (uint64_t)&v1748, (uint64_t)v1514, COERCE_DOUBLE(0x7B0000007ALL), COERCE_DOUBLE(0x7F0000007ELL), v852, v853, v854, v855, v856, v857);
  v1511 = v1457;
  v1512 = v1458;
  v1513 = v1459;
  v1507 = v1453;
  v1508 = v1454;
  v1510 = v1456;
  v1509 = v1455;
  v1749 = 0x100010001000100;
  v1516[0] = xmmword_224663BC8;
  v1516[1] = *(_OWORD *)dbl_224663BD8;
  sub_223B54204((uint64_t)&v1507, 2, 3, 7, (uint64_t)&v1749, (uint64_t)v1516, COERCE_DOUBLE(0x320000007BLL), COERCE_DOUBLE(0x360000007FLL), v858, v859, v860, v861, v862, v863);
  v1515[4] = v1457;
  v1515[5] = v1458;
  v1515[6] = v1459;
  v1515[0] = v1453;
  v1515[1] = v1454;
  v1515[3] = v1456;
  v1515[2] = v1455;
  v1750 = 0;
  v1518[0] = xmmword_224663BE8;
  v1518[1] = *(_OWORD *)dbl_224663BF8;
  sub_223B54204((uint64_t)v1515, 3, 2, 6, (uint64_t)&v1750, (uint64_t)v1518, COERCE_DOUBLE(0x7D0000007CLL), COERCE_DOUBLE(0x15900000158), v864, v865, v866, v867, v868, v869);
  v1517[4] = v1457;
  v1517[5] = v1458;
  v1517[6] = v1459;
  v1517[0] = v1453;
  v1517[1] = v1454;
  v1517[3] = v1456;
  v1517[2] = v1455;
  v1751 = 0x100010001000100;
  v1520[0] = xmmword_224663C08;
  v1520[1] = *(_OWORD *)dbl_224663C18;
  sub_223B54204((uint64_t)v1517, 3, 2, 7, (uint64_t)&v1751, (uint64_t)v1520, COERCE_DOUBLE(0x340000007DLL), COERCE_DOUBLE(0x11000000159), v870, v871, v872, v873, v874, v875);
  v1519[4] = v1475;
  v1519[5] = v1476;
  v1519[6] = v1477;
  v1519[0] = v1471;
  v1519[1] = v1472;
  v1519[3] = v1474;
  v1519[2] = v1473;
  v1752 = 0;
  v1522[0] = xmmword_224663C28;
  v1522[1] = *(_OWORD *)dbl_224663C38;
  sub_223B54204((uint64_t)v1519, 3, 3, 6, (uint64_t)&v1752, (uint64_t)v1522, COERCE_DOUBLE(0x7F0000007ELL), COERCE_DOUBLE(0x15B0000015ALL), v876, v877, v878, v879, v880, v881);
  v1521[4] = v1475;
  v1521[5] = v1476;
  v1521[6] = v1477;
  v1521[0] = v1471;
  v1521[1] = v1472;
  v1521[3] = v1474;
  v1521[2] = v1473;
  v1753 = 0x100010001000100;
  v1524[0] = xmmword_224663C48;
  v1524[1] = *(_OWORD *)dbl_224663C58;
  sub_223B54204((uint64_t)v1521, 3, 3, 7, (uint64_t)&v1753, (uint64_t)v1524, COERCE_DOUBLE(0x360000007FLL), COERCE_DOUBLE(0x1120000015BLL), v882, v883, v884, v885, v886, v887);
  v1523[4] = v1475;
  v1523[5] = v1476;
  v1523[6] = v1477;
  v1523[0] = v1471;
  v1523[1] = v1472;
  v1523[3] = v1474;
  v1523[2] = v1473;
  v1754 = 0;
  v1532[0] = xmmword_224663C68;
  v1532[1] = *(_OWORD *)dbl_224663C78;
  sub_223B54204((uint64_t)v1523, 0, 4, 0, (uint64_t)&v1754, (uint64_t)v1532, COERCE_DOUBLE(0x8100000080), COERCE_DOUBLE(0x8500000084), v888, v889, v890, v891, v892, v893);
  v1529 = v1475;
  v1530 = v1476;
  v1531 = v1477;
  v1525 = v1471;
  v1526 = v1472;
  v1528 = v1474;
  v1527 = v1473;
  v1755 = 0;
  v1534[0] = xmmword_224663C88;
  v1534[1] = *(_OWORD *)dbl_224663C98;
  sub_223B54204((uint64_t)&v1525, 0, 4, 1, (uint64_t)&v1755, (uint64_t)v1534, COERCE_DOUBLE(0x8800000081), COERCE_DOUBLE(0x8C00000085), v894, v895, v896, v897, v898, v899);
  v1533[4] = v1475;
  v1533[5] = v1476;
  v1533[6] = v1477;
  v1533[0] = v1471;
  v1533[1] = v1472;
  v1533[3] = v1474;
  v1533[2] = v1473;
  v1756 = 0;
  v1536[0] = xmmword_224663CA8;
  v1536[1] = *(_OWORD *)dbl_224663CB8;
  sub_223B54204((uint64_t)v1533, 0, 5, 0, (uint64_t)&v1756, (uint64_t)v1536, COERCE_DOUBLE(0x8300000082), COERCE_DOUBLE(0x8700000086), v900, v901, v902, v903, v904, v905);
  v1535[4] = v1475;
  v1535[5] = v1476;
  v1535[6] = v1477;
  v1535[0] = v1471;
  v1535[1] = v1472;
  v1535[3] = v1474;
  v1535[2] = v1473;
  v1757 = 0;
  v1538[0] = xmmword_224663CC8;
  v1538[1] = *(_OWORD *)dbl_224663CD8;
  sub_223B54204((uint64_t)v1535, 0, 5, 1, (uint64_t)&v1757, (uint64_t)v1538, COERCE_DOUBLE(0x8A00000083), COERCE_DOUBLE(0x8E00000087), v906, v907, v908, v909, v910, v911);
  v1537[4] = v1493;
  v1537[5] = v1494;
  v1537[6] = v1495;
  v1537[0] = v1489;
  v1537[1] = v1490;
  v1537[3] = v1492;
  v1537[2] = v1491;
  v1758 = 0;
  v1540[0] = xmmword_224663CE8;
  v1540[1] = *(_OWORD *)dbl_224663CF8;
  sub_223B54204((uint64_t)v1537, 1, 4, 0, (uint64_t)&v1758, (uint64_t)v1540, COERCE_DOUBLE(0x8500000084), COERCE_DOUBLE(0xA1000000A0), v912, v913, v914, v915, v916, v917);
  v1539[4] = v1493;
  v1539[5] = v1494;
  v1539[6] = v1495;
  v1539[0] = v1489;
  v1539[1] = v1490;
  v1539[3] = v1492;
  v1539[2] = v1491;
  v1759 = 0;
  v1542[0] = xmmword_224663D08;
  v1542[1] = *(_OWORD *)dbl_224663D18;
  sub_223B54204((uint64_t)v1539, 1, 4, 1, (uint64_t)&v1759, (uint64_t)v1542, COERCE_DOUBLE(0x8C00000085), COERCE_DOUBLE(0xA8000000A1), v918, v919, v920, v921, v922, v923);
  v1541[4] = v1493;
  v1541[5] = v1494;
  v1541[6] = v1495;
  v1541[0] = v1489;
  v1541[1] = v1490;
  v1541[3] = v1492;
  v1541[2] = v1491;
  v1760 = 0;
  v1550[0] = xmmword_224663D28;
  v1550[1] = *(_OWORD *)dbl_224663D38;
  sub_223B54204((uint64_t)v1541, 1, 5, 0, (uint64_t)&v1760, (uint64_t)v1550, COERCE_DOUBLE(0x8700000086), COERCE_DOUBLE(0xA3000000A2), v924, v925, v926, v927, v928, v929);
  v1547 = v1493;
  v1548 = v1494;
  v1549 = v1495;
  v1543 = v1489;
  v1544 = v1490;
  v1546 = v1492;
  v1545 = v1491;
  v1761 = 0;
  v1552[0] = xmmword_224663D48;
  v1552[1] = *(_OWORD *)dbl_224663D58;
  sub_223B54204((uint64_t)&v1543, 1, 5, 1, (uint64_t)&v1761, (uint64_t)v1552, COERCE_DOUBLE(0x8E00000087), COERCE_DOUBLE(0xAA000000A3), v930, v931, v932, v933, v934, v935);
  v1551[4] = v1493;
  v1551[5] = v1494;
  v1551[6] = v1495;
  v1551[0] = v1489;
  v1551[1] = v1490;
  v1551[3] = v1492;
  v1551[2] = v1491;
  v1762 = 0;
  v1554[0] = xmmword_224663D68;
  v1554[1] = *(_OWORD *)dbl_224663D78;
  sub_223B54204((uint64_t)v1551, 0, 4, 2, (uint64_t)&v1762, (uint64_t)v1554, COERCE_DOUBLE(0x8900000088), COERCE_DOUBLE(0x8D0000008CLL), v936, v937, v938, v939, v940, v941);
  v1553[4] = v1493;
  v1553[5] = v1494;
  v1553[6] = v1495;
  v1553[0] = v1489;
  v1553[1] = v1490;
  v1553[3] = v1492;
  v1553[2] = v1491;
  v1763 = 0;
  v1556[0] = xmmword_224663D88;
  v1556[1] = *(_OWORD *)dbl_224663D98;
  sub_223B54204((uint64_t)v1553, 0, 4, 3, (uint64_t)&v1763, (uint64_t)v1556, COERCE_DOUBLE(0xC000000089), COERCE_DOUBLE(0xC40000008DLL), v942, v943, v944, v945, v946, v947);
  v1555[4] = v1511;
  v1555[5] = v1512;
  v1555[6] = v1513;
  v1555[0] = v1507;
  v1555[1] = v1508;
  v1555[3] = v1510;
  v1555[2] = v1509;
  v1764 = 0;
  v1558[0] = xmmword_224663DA8;
  v1558[1] = *(_OWORD *)dbl_224663DB8;
  sub_223B54204((uint64_t)v1555, 0, 5, 2, (uint64_t)&v1764, (uint64_t)v1558, COERCE_DOUBLE(0x8B0000008ALL), COERCE_DOUBLE(0x8F0000008ELL), v948, v949, v950, v951, v952, v953);
  v1557[4] = v1511;
  v1557[5] = v1512;
  v1557[6] = v1513;
  v1557[0] = v1507;
  v1557[1] = v1508;
  v1557[3] = v1510;
  v1557[2] = v1509;
  v1765 = 0;
  v1560[0] = xmmword_224663DC8;
  v1560[1] = *(_OWORD *)dbl_224663DD8;
  sub_223B54204((uint64_t)v1557, 0, 5, 3, (uint64_t)&v1765, (uint64_t)v1560, COERCE_DOUBLE(0xC20000008BLL), COERCE_DOUBLE(0xC60000008FLL), v954, v955, v956, v957, v958, v959);
  v1559[4] = v1511;
  v1559[5] = v1512;
  v1559[6] = v1513;
  v1559[0] = v1507;
  v1559[1] = v1508;
  v1559[3] = v1510;
  v1559[2] = v1509;
  v1766 = 0;
  v1568[0] = xmmword_224663DE8;
  v1568[1] = *(_OWORD *)dbl_224663DF8;
  sub_223B54204((uint64_t)v1559, 1, 4, 2, (uint64_t)&v1766, (uint64_t)v1568, COERCE_DOUBLE(0x8D0000008CLL), COERCE_DOUBLE(0xA9000000A8), v960, v961, v962, v963, v964, v965);
  v1565 = v1511;
  v1566 = v1512;
  v1567 = v1513;
  v1561 = v1507;
  v1562 = v1508;
  v1564 = v1510;
  v1563 = v1509;
  v1767 = 0;
  v1570[0] = xmmword_224663E08;
  v1570[1] = *(_OWORD *)dbl_224663E18;
  sub_223B54204((uint64_t)&v1561, 1, 4, 3, (uint64_t)&v1767, (uint64_t)v1570, COERCE_DOUBLE(0xC40000008DLL), COERCE_DOUBLE(0xE0000000A9), v966, v967, v968, v969, v970, v971);
  v1569[4] = v1511;
  v1569[5] = v1512;
  v1569[6] = v1513;
  v1569[0] = v1507;
  v1569[1] = v1508;
  v1569[3] = v1510;
  v1569[2] = v1509;
  v1768 = 0;
  v1572[0] = xmmword_224663E28;
  v1572[1] = *(_OWORD *)dbl_224663E38;
  sub_223B54204((uint64_t)v1569, 1, 5, 2, (uint64_t)&v1768, (uint64_t)v1572, COERCE_DOUBLE(0x8F0000008ELL), COERCE_DOUBLE(0xAB000000AALL), v972, v973, v974, v975, v976, v977);
  v1571[4] = v1511;
  v1571[5] = v1512;
  v1571[6] = v1513;
  v1571[0] = v1507;
  v1571[1] = v1508;
  v1571[3] = v1510;
  v1571[2] = v1509;
  v1769 = 0;
  v1574[0] = xmmword_224663E48;
  v1574[1] = *(_OWORD *)dbl_224663E58;
  sub_223B54204((uint64_t)v1571, 1, 5, 3, (uint64_t)&v1769, (uint64_t)v1574, COERCE_DOUBLE(0xC60000008FLL), COERCE_DOUBLE(0xE2000000ABLL), v978, v979, v980, v981, v982, v983);
  v1573[4] = v1529;
  v1573[5] = v1530;
  v1573[6] = v1531;
  v1573[0] = v1525;
  v1573[1] = v1526;
  v1573[3] = v1528;
  v1573[2] = v1527;
  v1770 = 0;
  v1576[0] = xmmword_224663E68;
  v1576[1] = *(_OWORD *)dbl_224663E78;
  sub_223B54204((uint64_t)v1573, 0, 6, 0, (uint64_t)&v1770, (uint64_t)v1576, COERCE_DOUBLE(0x9100000090), COERCE_DOUBLE(0x9500000094), v984, v985, v986, v987, v988, v989);
  v1575[4] = v1529;
  v1575[5] = v1530;
  v1575[6] = v1531;
  v1575[0] = v1525;
  v1575[1] = v1526;
  v1575[3] = v1528;
  v1575[2] = v1527;
  v1771 = 0;
  v1578[0] = xmmword_224663E88;
  v1578[1] = *(_OWORD *)dbl_224663E98;
  sub_223B54204((uint64_t)v1575, 0, 6, 1, (uint64_t)&v1771, (uint64_t)v1578, COERCE_DOUBLE(0x9800000091), COERCE_DOUBLE(0x9C00000095), v990, v991, v992, v993, v994, v995);
  v1577[4] = v1529;
  v1577[5] = v1530;
  v1577[6] = v1531;
  v1577[0] = v1525;
  v1577[1] = v1526;
  v1577[3] = v1528;
  v1577[2] = v1527;
  v1772 = 0x202000002020000;
  v1586[0] = xmmword_224663EA8;
  v1586[1] = *(_OWORD *)dbl_224663EB8;
  sub_223B54204((uint64_t)v1577, 0, 7, 0, (uint64_t)&v1772, (uint64_t)v1586, COERCE_DOUBLE(0x9300000092), COERCE_DOUBLE(0x9700000096), v996, v997, v998, v999, v1000, v1001);
  v1583 = v1529;
  v1584 = v1530;
  v1585 = v1531;
  v1579 = v1525;
  v1580 = v1526;
  v1582 = v1528;
  v1581 = v1527;
  v1773 = 0x202000002020000;
  v1588[0] = xmmword_224663EC8;
  v1588[1] = *(_OWORD *)dbl_224663ED8;
  sub_223B54204((uint64_t)&v1579, 0, 7, 1, (uint64_t)&v1773, (uint64_t)v1588, COERCE_DOUBLE(0x9A00000093), COERCE_DOUBLE(0x9E00000097), v1002, v1003, v1004, v1005, v1006, v1007);
  v1587[4] = v1529;
  v1587[5] = v1530;
  v1587[6] = v1531;
  v1587[0] = v1525;
  v1587[1] = v1526;
  v1587[3] = v1528;
  v1587[2] = v1527;
  v1774 = 0;
  v1590[0] = xmmword_224663EE8;
  v1590[1] = *(_OWORD *)dbl_224663EF8;
  sub_223B54204((uint64_t)v1587, 1, 6, 0, (uint64_t)&v1774, (uint64_t)v1590, COERCE_DOUBLE(0x9500000094), COERCE_DOUBLE(0xB1000000B0), v1008, v1009, v1010, v1011, v1012, v1013);
  v1589[4] = v1529;
  v1589[5] = v1530;
  v1589[6] = v1531;
  v1589[0] = v1525;
  v1589[1] = v1526;
  v1589[3] = v1528;
  v1589[2] = v1527;
  v1775 = 0;
  v1592[0] = xmmword_224663F08;
  v1592[1] = *(_OWORD *)dbl_224663F18;
  sub_223B54204((uint64_t)v1589, 1, 6, 1, (uint64_t)&v1775, (uint64_t)v1592, COERCE_DOUBLE(0x9C00000095), COERCE_DOUBLE(0xB8000000B1), v1014, v1015, v1016, v1017, v1018, v1019);
  v1591[4] = v1547;
  v1591[5] = v1548;
  v1591[6] = v1549;
  v1591[0] = v1543;
  v1591[1] = v1544;
  v1591[3] = v1546;
  v1591[2] = v1545;
  v1776 = 0x202000002020000;
  v1594[0] = xmmword_224663F28;
  v1594[1] = *(_OWORD *)dbl_224663F38;
  sub_223B54204((uint64_t)v1591, 1, 7, 0, (uint64_t)&v1776, (uint64_t)v1594, COERCE_DOUBLE(0x9700000096), COERCE_DOUBLE(0xB3000000B2), v1020, v1021, v1022, v1023, v1024, v1025);
  v1593[4] = v1547;
  v1593[5] = v1548;
  v1593[6] = v1549;
  v1593[0] = v1543;
  v1593[1] = v1544;
  v1593[3] = v1546;
  v1593[2] = v1545;
  v1777 = 0x202000002020000;
  v1596[0] = xmmword_224663F48;
  v1596[1] = *(_OWORD *)dbl_224663F58;
  sub_223B54204((uint64_t)v1593, 1, 7, 1, (uint64_t)&v1777, (uint64_t)v1596, COERCE_DOUBLE(0x9E00000097), COERCE_DOUBLE(0xBA000000B3), v1026, v1027, v1028, v1029, v1030, v1031);
  v1595[4] = v1547;
  v1595[5] = v1548;
  v1595[6] = v1549;
  v1595[0] = v1543;
  v1595[1] = v1544;
  v1595[3] = v1546;
  v1595[2] = v1545;
  v1778 = 0;
  v1598[0] = xmmword_224663F68;
  v1598[1] = *(_OWORD *)dbl_224663F78;
  sub_223B54204((uint64_t)v1595, 0, 6, 2, (uint64_t)&v1778, (uint64_t)v1598, COERCE_DOUBLE(0x9900000098), COERCE_DOUBLE(0x9D0000009CLL), v1032, v1033, v1034, v1035, v1036, v1037);
  v1597[4] = v1547;
  v1597[5] = v1548;
  v1597[6] = v1549;
  v1597[0] = v1543;
  v1597[1] = v1544;
  v1597[3] = v1546;
  v1597[2] = v1545;
  v1779 = 0;
  v1600[0] = xmmword_224663F88;
  v1600[1] = *(_OWORD *)dbl_224663F98;
  sub_223B54204((uint64_t)v1597, 0, 6, 3, (uint64_t)&v1779, (uint64_t)v1600, COERCE_DOUBLE(0xD000000099), COERCE_DOUBLE(0xD40000009DLL), v1038, v1039, v1040, v1041, v1042, v1043);
  v1599[4] = v1547;
  v1599[5] = v1548;
  v1599[6] = v1549;
  v1599[0] = v1543;
  v1599[1] = v1544;
  v1599[3] = v1546;
  v1599[2] = v1545;
  v1780 = 0x202000002020000;
  v1602[0] = xmmword_224663FA8;
  v1602[1] = *(_OWORD *)dbl_224663FB8;
  sub_223B54204((uint64_t)v1599, 0, 7, 2, (uint64_t)&v1780, (uint64_t)v1602, COERCE_DOUBLE(0x9B0000009ALL), COERCE_DOUBLE(0x9F0000009ELL), v1044, v1045, v1046, v1047, v1048, v1049);
  v1601[4] = v1547;
  v1601[5] = v1548;
  v1601[6] = v1549;
  v1601[0] = v1543;
  v1601[1] = v1544;
  v1601[3] = v1546;
  v1601[2] = v1545;
  v1781 = 0x202000002020000;
  v1604[0] = xmmword_224663FC8;
  v1604[1] = *(_OWORD *)dbl_224663FD8;
  sub_223B54204((uint64_t)v1601, 0, 7, 3, (uint64_t)&v1781, (uint64_t)v1604, COERCE_DOUBLE(0xD20000009BLL), COERCE_DOUBLE(0xD60000009FLL), v1050, v1051, v1052, v1053, v1054, v1055);
  v1603[4] = v1565;
  v1603[5] = v1566;
  v1603[6] = v1567;
  v1603[0] = v1561;
  v1603[1] = v1562;
  v1603[3] = v1564;
  v1603[2] = v1563;
  v1782 = 0;
  v1606[0] = xmmword_224663FE8;
  v1606[1] = *(_OWORD *)dbl_224663FF8;
  sub_223B54204((uint64_t)v1603, 1, 6, 2, (uint64_t)&v1782, (uint64_t)v1606, COERCE_DOUBLE(0x9D0000009CLL), COERCE_DOUBLE(0xB9000000B8), v1056, v1057, v1058, v1059, v1060, v1061);
  v1605[4] = v1565;
  v1605[5] = v1566;
  v1605[6] = v1567;
  v1605[0] = v1561;
  v1605[1] = v1562;
  v1605[3] = v1564;
  v1605[2] = v1563;
  v1783 = 0;
  v1608[0] = xmmword_224664008;
  v1608[1] = *(_OWORD *)dbl_224664018;
  sub_223B54204((uint64_t)v1605, 1, 6, 3, (uint64_t)&v1783, (uint64_t)v1608, COERCE_DOUBLE(0xD40000009DLL), COERCE_DOUBLE(0xF0000000B9), v1062, v1063, v1064, v1065, v1066, v1067);
  v1607[4] = v1565;
  v1607[5] = v1566;
  v1607[6] = v1567;
  v1607[0] = v1561;
  v1607[1] = v1562;
  v1607[3] = v1564;
  v1607[2] = v1563;
  v1784 = 0x202000002020000;
  v1610[0] = xmmword_224664028;
  v1610[1] = *(_OWORD *)dbl_224664038;
  sub_223B54204((uint64_t)v1607, 1, 7, 2, (uint64_t)&v1784, (uint64_t)v1610, COERCE_DOUBLE(0x9F0000009ELL), COERCE_DOUBLE(0xBB000000BALL), v1068, v1069, v1070, v1071, v1072, v1073);
  v1609[4] = v1565;
  v1609[5] = v1566;
  v1609[6] = v1567;
  v1609[0] = v1561;
  v1609[1] = v1562;
  v1609[3] = v1564;
  v1609[2] = v1563;
  v1785 = 0x202000002020000;
  v1612[0] = xmmword_224664048;
  v1612[1] = *(_OWORD *)dbl_224664058;
  sub_223B54204((uint64_t)v1609, 1, 7, 3, (uint64_t)&v1785, (uint64_t)v1612, COERCE_DOUBLE(0xD60000009FLL), COERCE_DOUBLE(0xF2000000BBLL), v1074, v1075, v1076, v1077, v1078, v1079);
  v1611[4] = v1565;
  v1611[5] = v1566;
  v1611[6] = v1567;
  v1611[0] = v1561;
  v1611[1] = v1562;
  v1611[3] = v1564;
  v1611[2] = v1563;
  v1786 = 0;
  v1614[0] = xmmword_224664068;
  v1614[1] = *(_OWORD *)dbl_224664078;
  sub_223B54204((uint64_t)v1611, 2, 4, 0, (uint64_t)&v1786, (uint64_t)v1614, COERCE_DOUBLE(0xA1000000A0), COERCE_DOUBLE(0xA5000000A4), v1080, v1081, v1082, v1083, v1084, v1085);
  v1613[4] = v1565;
  v1613[5] = v1566;
  v1613[6] = v1567;
  v1613[0] = v1561;
  v1613[1] = v1562;
  v1613[3] = v1564;
  v1613[2] = v1563;
  v1787 = 0;
  v1616[0] = xmmword_224664088;
  v1616[1] = *(_OWORD *)dbl_224664098;
  sub_223B54204((uint64_t)v1613, 2, 4, 1, (uint64_t)&v1787, (uint64_t)v1616, COERCE_DOUBLE(0xA8000000A1), COERCE_DOUBLE(0xAC000000A5), v1086, v1087, v1088, v1089, v1090, v1091);
  v1615[4] = v1583;
  v1615[5] = v1584;
  v1615[6] = v1585;
  v1615[0] = v1579;
  v1615[1] = v1580;
  v1615[3] = v1582;
  v1615[2] = v1581;
  v1788 = 0;
  v1618[0] = xmmword_2246640A8;
  v1618[1] = *(_OWORD *)dbl_2246640B8;
  sub_223B54204((uint64_t)v1615, 2, 5, 0, (uint64_t)&v1788, (uint64_t)v1618, COERCE_DOUBLE(0xA3000000A2), COERCE_DOUBLE(0xA7000000A6), v1092, v1093, v1094, v1095, v1096, v1097);
  v1617[4] = v1583;
  v1617[5] = v1584;
  v1617[6] = v1585;
  v1617[0] = v1579;
  v1617[1] = v1580;
  v1617[3] = v1582;
  v1617[2] = v1581;
  v1789[0] = 0;
  v1620[0] = xmmword_2246640C8;
  v1620[1] = *(_OWORD *)dbl_2246640D8;
  sub_223B54204((uint64_t)v1617, 2, 5, 1, (uint64_t)v1789, (uint64_t)v1620, COERCE_DOUBLE(0xAA000000A3), COERCE_DOUBLE(0xAE000000A7), v1098, v1099, v1100, v1101, v1102, v1103);
  v1619[4] = v1583;
  v1619[5] = v1584;
  v1619[6] = v1585;
  v1619[0] = v1579;
  v1619[1] = v1580;
  v1619[3] = v1582;
  v1619[2] = v1581;
  return sub_223B57200();
}

uint64_t sub_223B1CF00(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  signed int v6;
  signed int v7;
  signed int v8;
  uint64_t v9;
  int *v10;
  int v11;
  signed int v12;
  signed int v13;
  int v14;
  BOOL v15;
  BOOL v16;
  signed int v17;
  signed int v18;
  signed int v19;
  _DWORD *v20;
  BOOL v21;
  BOOL v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v27;
  int v28;
  int i;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  __int128 v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned int *)(a1 + 176);
  if ((v5 & 0x80000000) != 0)
    goto LABEL_16;
  v6 = *a3 & 0xFFFFFFF8;
  v7 = a3[1] & 0xFFFFFFF8;
  v8 = a3[2] & 0xFFFFFFF8;
  v9 = *(_QWORD *)(a1 + 184);
  v10 = (int *)(v9 + 4488 * (v5 & 0xFFFFFFFFCFFFFFFFLL));
  v11 = *v10;
  v12 = v10[1];
  v13 = v10[2];
  v14 = v6 - *v10;
  v15 = v6 < *v10 || v7 < v12;
  v16 = v15 || v8 < v13;
  if (v16
    || ((v17 = v10[3], v20 = v10 + 4, v19 = v10[4], v18 = v20[1], v6 < v17) ? (v21 = v7 < v19) : (v21 = 0),
        v21 ? (v22 = v8 < v18) : (v22 = 0),
        !v22))
  {
LABEL_16:
    LODWORD(v5) = 0x80000000;
  }
  else
  {
    v27 = v7 - v12;
    v28 = v8 - v13;
    for (i = v17 - v11; ; v28 -= i & v28)
    {
      i >>= 1;
      LODWORD(v5) = *(_DWORD *)(v9
                              + 4488 * (v5 & 0xCFFFFFFF)
                              + 4 * ((4 * ((i & v14) != 0)) | (2 * ((i & v27) != 0)) | ((i & v28) != 0))
                              + 24);
      if (i == *(_DWORD *)(a1 + 136) || v5 >> 30)
        break;
      v14 -= i & v14;
      v27 -= i & v27;
    }
  }
  v30 = v5;
  v33 = *(_OWORD *)a2;
  v34 = *(_BYTE *)(a2 + 16);
  v23 = sub_223B61034(a1, &v33, &v30);
  if ((_DWORD)v5 != v30)
  {
    v24 = a3[2] & 0xFFFFFFF8;
    v31 = *(_QWORD *)a3 & 0xFFFFFFF8FFFFFFF8;
    v32 = v24;
    sub_223E8AD00(a1, (int8x8_t *)&v31, v30);
  }
  if ((v23 & 0x80000000) != 0
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 194, (uint64_t)"!VoxelBlockOctreeNode::IsUnknown(block_index)", 45, (uint64_t)"Unknown block index", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v25 = *(_QWORD *)(a1 + 20800);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 20808) - v25) >> 12) <= v23)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 195, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v25 = *(_QWORD *)(a1 + 20800);
  }
  return v25 + 20480 * v23;
}

char *sub_223B1D134(char *result, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v6;
  int v7;
  int v8;
  _BYTE v9[12];

  if (a2)
  {
    v6 = (uint64_t)result;
    sub_22397FD34(a3, (int *)v6, v6);
    result = sub_22397FD34(a4, (int *)v6, v6);
    if ((a2 & 1) != 0)
    {
      *(int32x2_t *)v9 = vadd_s32(*(int32x2_t *)v6, (int32x2_t)0x700000007);
      *(_DWORD *)&v9[8] = *(_DWORD *)(v6 + 8) - 8;
      result = sub_22397FD34(a4, (int *)v9, (uint64_t)v9);
    }
    if ((a2 & 0x303) != 0)
    {
      *(int32x2_t *)v9 = vadd_s32(*(int32x2_t *)v6, (int32x2_t)0x700000007);
      *(_DWORD *)&v9[8] = *(_DWORD *)(v6 + 8);
      result = sub_22397FD34(a4, (int *)v9, (uint64_t)v9);
    }
    if ((a2 & 0x50005) != 0)
    {
      v7 = *(_DWORD *)(v6 + 4);
      *(_DWORD *)v9 = *(_DWORD *)v6 - 8;
      *(_DWORD *)&v9[4] = v7;
      *(_DWORD *)&v9[8] = *(_DWORD *)(v6 + 8) - 8;
      result = sub_22397FD34(a4, (int *)v9, (uint64_t)v9);
    }
    if ((a2 & 0x1100000011) != 0)
    {
      *(_DWORD *)v9 = *(_DWORD *)v6;
      *(int32x2_t *)&v9[4] = vadd_s32(*(int32x2_t *)(v6 + 4), (int32x2_t)0x700000007);
      result = sub_22397FD34(a4, (int *)v9, (uint64_t)v9);
    }
    if ((a2 & 0xF0F0F0F) != 0)
    {
      *(_DWORD *)v9 = *(_DWORD *)v6 - 8;
      *(_QWORD *)&v9[4] = *(_QWORD *)(v6 + 4);
      result = sub_22397FD34(a4, (int *)v9, (uint64_t)v9);
    }
    if ((a2 & 0x333300003333) != 0)
    {
      v8 = *(_DWORD *)(v6 + 4) - 8;
      *(_DWORD *)v9 = *(_DWORD *)v6;
      *(_DWORD *)&v9[4] = v8;
      *(_DWORD *)&v9[8] = *(_DWORD *)(v6 + 8);
      result = sub_22397FD34(a4, (int *)v9, (uint64_t)v9);
    }
    if ((a2 & 0x55005500550055) != 0)
    {
      *(_QWORD *)v9 = *(_QWORD *)v6;
      *(_DWORD *)&v9[8] = *(_DWORD *)(v6 + 8) - 8;
      return sub_22397FD34(a4, (int *)v9, (uint64_t)v9);
    }
  }
  return result;
}

void sub_223B1D2F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  float32x2_t **v3;
  uint64_t v4;
  uint64_t v5;
  float32x2_t *v6;
  float32x2_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  size_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  const char *v17;
  size_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int v23;
  NSObject *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  _QWORD *v30;
  size_t v31;
  size_t v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  void *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  __int128 v85;
  BOOL v86;
  uint64_t v87;
  float32x4_t v88;
  _QWORD *v89;
  int32x2_t v90;
  signed int v91;
  signed int v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  signed int v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  __int32 v100;
  __int32 v101;
  __int32 v102;
  __int32 v103;
  uint64_t v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  size_t v110;
  const char *v111;
  unsigned __int8 v112;
  float v113;
  int v114;
  unsigned int v115;
  float32x4_t v116;
  float32x4_t v117;
  int8x16_t v118;
  float32x2_t v119;
  float32x2_t v120;
  float32x2_t v121;
  float32x4_t v122;
  float32x2_t v123;
  float32x4_t v124;
  float32x4_t v125;
  _BYTE *v126;
  float32x4_t v127;
  uint64_t v128;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  const float *v133;
  float32x4_t v134;
  int32x4_t v135;
  float *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int *v140;
  int v141;
  int v142;
  signed int v143;
  int v144;
  BOOL v145;
  BOOL v146;
  int v147;
  signed int v148;
  int v149;
  _DWORD *v150;
  BOOL v151;
  BOOL v152;
  int v153;
  int v154;
  int i;
  uint64_t v156;
  unsigned __int8 v157;
  uint64_t v158;
  uint64_t j;
  unsigned __int8 v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned __int8 v164;
  uint64_t v165;
  uint64_t k;
  unsigned __int8 v167;
  uint64_t v168;
  float *v169;
  unint64_t *v170;
  BOOL v171;
  float v172;
  unint64_t v173;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned __int8 v185;
  uint64_t m;
  uint64_t v187;
  unsigned __int8 v188;
  unint64_t v189;
  unint64_t v190;
  unsigned __int16 v191;
  unsigned int v192;
  signed int v193;
  float32x2_t *v195;
  float32x2_t v196;
  int8x8_t v197;
  float *v198;
  float32x4_t v199;
  int8x16_t v200;
  float32x2_t v201;
  float32x4_t v202;
  float32x4_t v203;
  int v205;
  float32x2_t *v206;
  float v207;
  float32x2_t *v208;
  int v209;
  unsigned __int8 *v210;
  int v211;
  _BOOL4 v212;
  _BOOL4 v213;
  _BOOL4 v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _DWORD *v218;
  unsigned __int32 v219;
  int v220;
  int v221;
  int v222;
  int v223;
  signed int v224;
  int n;
  uint64_t v226;
  uint64_t v227;
  signed __int32 v228;
  signed int v229;
  uint64_t v230;
  int *v231;
  int v232;
  signed __int32 v233;
  signed int v234;
  unsigned __int32 v235;
  BOOL v236;
  BOOL v237;
  signed int v238;
  signed int v239;
  signed __int32 v240;
  _DWORD *v241;
  BOOL v242;
  BOOL v243;
  unsigned int v244;
  float32x4_t v246;
  double v247;
  double v248;
  float32x2_t v249;
  float32x2_t v250;
  unsigned __int8 v251;
  uint64_t v252;
  uint64_t jj;
  unsigned __int8 v254;
  unsigned int v255;
  uint64_t v256;
  unsigned __int8 v257;
  uint64_t v258;
  uint64_t kk;
  unsigned __int8 v260;
  float v261;
  unint64_t v262;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unsigned __int8 v269;
  uint64_t v270;
  uint64_t mm;
  unsigned __int8 v272;
  unint64_t v273;
  unint64_t v274;
  unsigned __int16 v275;
  unsigned __int8 *v276;
  unsigned int v277;
  float32x2_t *v279;
  int32x2_t v280;
  float32x2_t v281;
  int8x8_t v282;
  float *v283;
  float32x4_t v284;
  int8x16_t v285;
  float32x2_t v286;
  float32x4_t v287;
  float32x4_t v288;
  int v290;
  float32x2_t *v291;
  float v292;
  float32x2_t *v293;
  int v294;
  unsigned __int8 *v295;
  unsigned int v296;
  unsigned int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  unsigned __int8 v303;
  __int16 v304;
  unsigned __int8 v305;
  int v306;
  __int16 v307;
  _BOOL4 v308;
  unsigned __int8 *v309;
  signed __int32 v310;
  int v311;
  int ii;
  float32x4_t v313;
  unsigned __int8 v314;
  const char *v315;
  size_t v316;
  _BYTE *v317;
  unint64_t v318;
  const char *v319;
  uint64_t v320;
  uint64_t v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  void **v325;
  uint64_t v326;
  uint64_t v327;
  NSObject *v328;
  size_t v329;
  std::__shared_weak_count_vtbl *v330;
  std::__shared_weak_count *v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  __int128 v342;
  int32x2_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  uint64_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  void *v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  signed int v373;
  signed int v374;
  uint64_t v375;
  signed int v376;
  signed int v377;
  uint64_t **v378;
  uint64_t **v379;
  uint64_t v380;
  uint64_t v381;
  int v382;
  int v383;
  uint64_t v384;
  int8x8_t v385;
  float32x2_t *v386;
  uint64_t v387;
  uint64_t v388;
  float32x2_t v389;
  float32x2_t v390;
  float32x2_t v391;
  int8x16_t v392;
  int8x16_t v393;
  int8x16_t v394;
  signed int v395;
  uint64_t v396;
  float v397;
  float v398;
  uint64_t v399;
  signed int v400;
  int v401;
  float32x4_t v402;
  uint64_t v403;
  uint64_t v404;
  float32x2_t **v405;
  uint64_t v406;
  int v407;
  unint64_t v408;
  int v409;
  const char *category;
  char *categorya[2];
  int categoryb;
  uint64_t v413;
  uint64_t v414;
  signed int v415;
  _QWORD v416[3];
  int v417;
  const char *v418;
  int v419;
  const char *v420;
  uint64_t v421;
  std::__shared_weak_count *v422;
  _QWORD *v423;
  __int128 v424;
  uint64_t v425;
  int v426;
  int v427;
  int v428;
  int v429;
  int32x2_t v430;
  unsigned int v431;
  uint64_t v432[2];
  char v433;
  uint64_t v434;
  int8x8_t v435[3];
  int v436;
  const char *v437;
  int v438;
  const char *v439;
  uint64_t v440;
  std::__shared_weak_count *v441;
  _BYTE object[24];
  __int128 v443;
  void *__p[2];
  unint64_t v445;
  char v446;
  _QWORD v447[2];
  std::__shared_weak_count *v448;
  uint64_t v449;
  int v450;
  int v451;
  _BYTE v452[24];
  __int128 v453;
  void *v454[2];
  unint64_t v455;
  char v456;
  uint64_t v457;
  float32x4x3_t v458;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v405 = v3;
  v5 = v4;
  v7 = v6;
  v375 = v8;
  v9 = v0;
  v457 = *MEMORY[0x24BDAC8D0];
  sub_223AF0EC4(v432);
  v387 = v2;
  if (**(int **)(v432[0] + 56) > 3)
    goto LABEL_118;
  v10 = *(unsigned __int8 *)(v432[0] + 72);
  v11 = sub_22322F254(v432[0], "OSLogSurrogateAppender", 1, 0);
  if (!v10 && v11 == 0)
    goto LABEL_118;
  v408 = v11;
  v416[0] = v432;
  v416[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v416[2] = std::chrono::system_clock::now().__d_.__rep_;
  v417 = 3;
  v418 = "unknown file";
  v419 = 1958;
  v421 = 0;
  v422 = 0;
  v420 = "unknown function";
  sub_2245664AC((unsigned __int8 *)v5, v435);
  v406 = v432[0] + 16;
  v404 = v432[0];
  if (*(char *)(v432[0] + 39) < 0)
  {
    v13 = *(_QWORD *)(v432[0] + 24);
    category = *(const char **)(v432[0] + 16);
    v14 = v9;
    v16 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v16 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v13 = *(unsigned __int8 *)(v432[0] + 39);
    category = (const char *)(v432[0] + 16);
    v14 = v9;
    v15 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v15 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
    if ((_BYTE)v443 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F40[23] >= 0)
    v17 = byte_255788F40;
  else
    v17 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v18 = byte_255788F40[23];
  else
    v18 = *(_QWORD *)&byte_255788F40[8];
  *(_QWORD *)object = os_log_create(v17, category);
  v19 = &object[8];
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v18 >= 0x17)
  {
    v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v20 = v18 | 7;
    v21 = v20 + 1;
    v19 = operator new(v20 + 1);
    *(_QWORD *)&v443 = v21 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v19;
    *(_QWORD *)&object[16] = v18;
    goto LABEL_23;
  }
  BYTE7(v443) = v18;
  if (v18)
LABEL_23:
    memmove(v19, v17, v18);
  v19[v18] = 0;
  BYTE8(v443) = 1;
  v22 = __p;
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v9 = v14;
  if (v13 >= 0x17)
  {
    v26 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v26 = v13 | 7;
    v27 = v26 + 1;
    v22 = operator new(v26 + 1);
    v23 = v10;
    v445 = v27 | 0x8000000000000000;
    __p[0] = v22;
    __p[1] = (void *)v13;
  }
  else
  {
    HIBYTE(v445) = v13;
    v23 = v10;
    if (!v13)
    {
      LOBYTE(__p[0]) = 0;
      v446 = 1;
      v24 = *(NSObject **)object;
      if ((SHIBYTE(v445) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v22, category, v13);
  *((_BYTE *)v22 + v13) = 0;
  v446 = 1;
  v24 = *(NSObject **)object;
  if ((SHIBYTE(v445) & 0x80000000) == 0)
  {
LABEL_28:
    v25 = v408;
    if (!BYTE8(v443))
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(__p[0]);
  v25 = v408;
  if (!BYTE8(v443))
    goto LABEL_37;
LABEL_35:
  if (SBYTE7(v443) < 0)
    operator delete(*(void **)&object[8]);
LABEL_37:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (!v25 || !*(_QWORD *)(v25 + 24))
  {
    os_log_type_enabled(v24, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 136315138;
    *(_QWORD *)&object[4] = v435;
    v34 = (void *)_os_log_send_and_compose_impl();
    if (v34)
      free(v34);
    goto LABEL_111;
  }
  v28 = _os_log_pack_size();
  v29 = operator new(v28, (std::align_val_t)8uLL);
  v30 = (_QWORD *)operator new();
  *v30 = &off_24EC1F7F0;
  v30[1] = 0;
  v30[2] = 0;
  v30[3] = v29;
  *(_QWORD *)v452 = v29;
  *(_QWORD *)&v452[8] = v29;
  v453 = 0uLL;
  *(_QWORD *)&v452[16] = v30;
  v31 = strlen((const char *)v435);
  if (v31 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v32 = v31;
  if (v31 >= 0x17)
  {
    v35 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v35 = v31 | 7;
    v36 = v35 + 1;
    v33 = operator new(v35 + 1);
    *((_QWORD *)&v424 + 1) = v36 | 0x8000000000000000;
    v423 = v33;
    *(_QWORD *)&v424 = v32;
    goto LABEL_50;
  }
  HIBYTE(v424) = v31;
  v33 = &v423;
  if (v31)
LABEL_50:
    memcpy(v33, v435, v32);
  *((_BYTE *)v33 + v32) = 0;
  v37 = v423;
  v447[0] = v424;
  *(_QWORD *)((char *)v447 + 7) = *(_QWORD *)((char *)&v424 + 7);
  v38 = HIBYTE(v424);
  v39 = operator new(0x38uLL);
  v39[1] = 0;
  v39[2] = 0;
  v39[3] = off_24EC1FA48;
  *v39 = &off_24EC1F9F8;
  v40 = v447[0];
  v39[4] = v37;
  v39[5] = v40;
  *(_QWORD *)((char *)v39 + 47) = *(_QWORD *)((char *)v447 + 7);
  *((_BYTE *)v39 + 55) = v38;
  v447[0] = 0;
  *(_QWORD *)((char *)v447 + 7) = 0;
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v453 + 1);
  *(_QWORD *)&v453 = v39 + 3;
  *((_QWORD *)&v453 + 1) = v39;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  *(_OWORD *)object = *(_OWORD *)v452;
  v44 = (void *)v453;
  *(_QWORD *)&object[16] = *(_QWORD *)&v452[16];
  if (*(_QWORD *)&v452[16])
  {
    v45 = (unint64_t *)(*(_QWORD *)&v452[16] + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v453 + 1);
  *(_QWORD *)&v443 = v44;
  *((_QWORD *)&v443 + 1) = *((_QWORD *)&v453 + 1);
  if (*((_QWORD *)&v453 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v453 + 1) + 8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
    __p[0] = v44;
    do
      v50 = __ldaxr(v48);
    while (__stlxr(v50 - 1, v48));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  else
  {
    __p[0] = v44;
  }
  v51 = *(std::__shared_weak_count **)&v452[16];
  if (*(_QWORD *)&v452[16])
  {
    v52 = (unint64_t *)(*(_QWORD *)&v452[16] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = *(_QWORD *)object;
  if (*((char *)__p[0] + 31) >= 0)
    v55 = (char *)__p[0] + 8;
  else
    v55 = (char *)*((_QWORD *)__p[0] + 1);
  v56 = _os_log_pack_fill();
  *(_DWORD *)v56 = 136315138;
  *(_QWORD *)(v56 + 4) = v55;
  v57 = operator new();
  v58 = *(unsigned __int8 *)(v404 + 39);
  v59 = *(_QWORD *)(v404 + 16);
  v60 = *(_QWORD *)(v404 + 24);
  v61 = v443;
  *(_OWORD *)(v57 + 8) = *(_OWORD *)&object[8];
  if ((v58 & 0x80u) != 0)
    v58 = v60;
  else
    v59 = v406;
  *(_QWORD *)v57 = v54;
  *(_QWORD *)&object[8] = 0;
  *(_QWORD *)&object[16] = 0;
  *(_OWORD *)(v57 + 24) = v61;
  v443 = 0uLL;
  *(_QWORD *)(v57 + 40) = v59;
  *(_QWORD *)(v57 + 48) = v58;
  *(_BYTE *)(v57 + 56) = 1;
  v423 = 0;
  *(_QWORD *)v452 = v57;
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v408 + 24) + 40))(*(_QWORD *)(v408 + 24), v452);
  v62 = *(_QWORD *)v452;
  *(_QWORD *)v452 = 0;
  if (v62)
  {
    v63 = *(std::__shared_weak_count **)(v62 + 32);
    if (v63)
    {
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = *(std::__shared_weak_count **)(v62 + 16);
    if (v66)
    {
      v67 = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    MEMORY[0x227684CE8](v62, 0x10F0C40B62ED6C6);
    v69 = v423;
    v423 = 0;
    if (v69)
    {
      v70 = (std::__shared_weak_count *)v69[4];
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v73 = (std::__shared_weak_count *)v69[2];
      if (v73)
      {
        v74 = (unint64_t *)&v73->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      MEMORY[0x227684CE8](v69, 0x10F0C40B62ED6C6);
    }
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v443 + 1);
  if (*((_QWORD *)&v443 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v443 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = *(std::__shared_weak_count **)&object[16];
  if (*(_QWORD *)&object[16])
  {
    v80 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
LABEL_111:
  if (v23)
  {
    sub_2245664AC((unsigned __int8 *)v5, object);
    sub_22322C138((uint64_t)v416, "Integrating free space for %s", object);
    sub_223182C08((uint64_t)v416);
  }
  sub_223182C08((uint64_t)v416);
  v82 = v422;
  if (v422)
  {
    v83 = (unint64_t *)&v422->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
LABEL_118:
  v432[1] = 0;
  v432[0] = 0;
  v433 = 0;
  v432[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v433 = 1;
  kdebug_trace();
  *(float32x2_t *)&v85 = v7[8];
  DWORD2(v85) = v7[9].i32[0];
  v86 = (v7[8].i32[0] & 0x7FFFFFFFu) < 0x7F800000;
  v87 = v387;
  *(_OWORD *)categorya = v85;
  if ((v7[8].i32[0] & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v86 = (DWORD1(v85) & 0x7FFFFFFFu) < 0x7F800000;
    if ((DWORD1(v85) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      v86 = (DWORD2(v85) & 0x7FFFFFFFu) < 0x7F800000;
  }
  if (!v86
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.h", 173, (uint64_t)"math::IsFinite(pos)", 19, (uint64_t)"Converting nan value to voxel position", 38, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v88 = vmulq_n_f32(*(float32x4_t *)categorya, *(float *)(v9 + 316));
  v430 = vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v88.f32));
  v431 = vcvtms_s32_f32(v88.f32[2]);
  if (!sub_223340F28((_QWORD *)(v9 + 64), (uint64_t)v7)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 136, (uint64_t)"KeyframeInfoExists(uuid)", 24, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v89 = sub_22342DA5C((_QWORD *)(v9 + 64), (uint64_t)v7);
  if (!v89)
    sub_223198218("unordered_map::at: key not found");
  v90 = v430;
  v89[22] = vmin_s32(v430, (int32x2_t)v89[22]);
  *(int32x2_t *)((char *)v89 + 188) = vmax_s32(*(int32x2_t *)((char *)v89 + 188), v90);
  v91 = v431;
  v92 = *((_DWORD *)v89 + 46);
  if ((int)v431 < v92)
    v92 = v431;
  *((_DWORD *)v89 + 46) = v92;
  if (*((_DWORD *)v89 + 49) > v91)
    v91 = *((_DWORD *)v89 + 49);
  *((_DWORD *)v89 + 49) = v91;
  sub_2231CC34C(*(_QWORD *)(v5 + 16), (uint64_t)&v423);
  sub_2231CC3F0(*(_QWORD *)(v5 + 16), (uint64_t)v447);
  categoryb = v426;
  v409 = v427;
  v396 = sub_2231D0224(*(_QWORD *)(v5 + 16));
  v380 = v9 + 184;
  v96 = v7[19].i32[0] & 0xFFFFFFF8;
  v374 = v7[20].i32[1] & 0xFFFFFFF8;
  if (v96 > v374)
  {
    LODWORD(v97) = 0;
    v382 = 0;
    goto LABEL_132;
  }
  LODWORD(v97) = 0;
  v373 = v7[18].i32[1] & 0xFFFFFFF8;
  v377 = v7[20].i32[0] & 0xFFFFFFF8;
  if (v373 > v377)
  {
    v382 = 0;
  }
  else
  {
    v382 = 0;
    v376 = v7[18].i32[0] & 0xFFFFFFF8;
    v395 = v7[19].i32[1] & 0xFFFFFFF8;
    if (v376 <= v395)
    {
      LODWORD(v97) = 0;
      v382 = 0;
      *(float32x2_t *)v93.f32 = v7[10];
      v93.i32[2] = v7[11].i32[0];
      v399 = v9 + 21056;
      v388 = v9 + 500;
      *(float32x2_t *)v94.f32 = v7[12];
      v379 = (uint64_t **)(v9 + 136);
      v94.i32[2] = v7[13].i32[0];
      v378 = (uint64_t **)(v9 + 160);
      *(float32x2_t *)v95.f32 = v7[14];
      v95.i32[2] = v7[15].i32[0];
      v113 = *(float *)(v9 + 312);
      v393 = (int8x16_t)vmulq_n_f32(v94, v113);
      v394 = (int8x16_t)vmulq_n_f32(v93, v113);
      v390 = (float32x2_t)vextq_s8(v393, v393, 8uLL).u64[0];
      v391 = (float32x2_t)vextq_s8(v394, v394, 8uLL).u64[0];
      v392 = (int8x16_t)vmulq_n_f32(v95, v113);
      v389 = (float32x2_t)vextq_s8(v392, v392, 8uLL).u64[0];
      v386 = v7;
      do
      {
        v397 = (float)v96;
        v114 = v373;
        v400 = v96;
        do
        {
          v401 = v114;
          v398 = (float)v114;
          v407 = v376;
          do
          {
            kdebug_trace();
            v115 = 0;
            v97 = (v97 + 1);
            v414 = __PAIR64__(v401, v407);
            v415 = v96;
            v116.f32[0] = (float)v407;
            v116.f32[1] = v398;
            v116.f32[2] = v397;
            v117.i64[0] = 0x3F0000003F000000;
            v117.i64[1] = 0x3F0000003F000000;
            v118 = (int8x16_t)vmulq_n_f32(vaddq_f32(v116, v117), *(float *)(v9 + 312));
            v117.i32[0] = v7[11].i32[0];
            v119 = v7[12];
            v120.i32[0] = v7[13].i32[0];
            v121.i32[0] = v7[15].i32[0];
            *(float32x2_t *)v124.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v7[10], *(float *)v118.i32), v119, *(float32x2_t *)v118.i8, 1), v7[14], (float32x4_t)v118, 2);
            *(float32x2_t *)v117.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v118.i8), v120, *(float32x2_t *)v118.i8, 1);
            v122 = (float32x4_t)vextq_s8(v118, v118, 8uLL);
            v123 = vmla_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v122.f32, v121);
            *(float32x2_t *)&v124.u32[2] = v123;
            *(float32x2_t *)v122.f32 = v7[16];
            v122.i32[2] = v7[17].i32[0];
            v125 = vaddq_f32(v122, v124);
            v126 = object;
            do
            {
              v124.f32[0] = (float)((v115 >> 6) & 4 | (v115 >> 4) & 2 | (v115 >> 2) & 1);
              v123.f32[0] = (float)((v115 >> 5) & 4 | (v115 >> 3) & 2 | (v115 >> 1) & 1);
              v119.f32[0] = (float)(int)(v115 & 1 | (2 * ((v115 >> 3) & 1)) | (v115 >> 4) & 4);
              *(float32x2_t *)v127.f32 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v394.i8, v124.f32[0]), *(float32x2_t *)v393.i8, v123.f32[0]), *(float32x2_t *)v392.i8, v119.f32[0]);
              *(float32x2_t *)&v127.u32[2] = vmla_f32(vmla_f32(vmul_f32(v391, *(float32x2_t *)v124.f32), v123, v390), v119, v389);
              v124 = vaddq_f32(v125, v127);
              *((_DWORD *)v126 + 2) = v124.i32[2];
              *(_QWORD *)v126 = v124.i64[0];
              v126 += 12;
              ++v115;
            }
            while (v115 != 512);
            v128 = 0;
            _Q0 = *(float32x4_t *)(v396 + 20);
            v130 = *(float32x4_t *)(v396 + 16);
            v131 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)(v396 + 24), 0);
            v132 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)(v396 + 28), 0);
            v133 = (const float *)object;
            do
            {
              v458 = vld3q_f32(v133);
              v133 += 12;
              v134 = vaddq_f32(v131, vdivq_f32(vmulq_n_f32(v458.val[0], v130.f32[0]), v458.val[2]));
              v458.val[0] = vaddq_f32(v132, vdivq_f32(vmulq_n_f32(v458.val[1], _Q0.f32[0]), v458.val[2]));
              v135 = vcvtq_s32_f32(v134);
              v458.val[2] = (float32x4_t)vcvtq_s32_f32(v458.val[0]);
              v136 = (float *)&v416[v128];
              vst2q_f32(v136, *(float32x4x2_t *)v135.i8);
              v128 += 4;
            }
            while (v128 != 512);
            v137 = *(unsigned int *)(v9 + 360);
            v138 = v399;
            if ((v137 & 0x80000000) == 0)
            {
              v139 = *(_QWORD *)(v9 + 368);
              v140 = (int *)(v139 + 4488 * (v137 & 0xFFFFFFFFCFFFFFFFLL));
              v142 = *v140;
              v141 = v140[1];
              v143 = v140[2];
              v144 = v407 - *v140;
              v145 = v407 < *v140 || v401 < v141;
              v146 = v145 || v96 < v143;
              v138 = v399;
              if (!v146)
              {
                v147 = v140[3];
                v150 = v140 + 4;
                v149 = v140[4];
                v148 = v150[1];
                v151 = v407 < v147 && v401 < v149;
                v152 = v151 && v96 < v148;
                v138 = v399;
                if (v152)
                {
                  v153 = v401 - v141;
                  v154 = v96 - v143;
                  for (i = v147 - v142; ; v154 -= i & v154)
                  {
                    i >>= 1;
                    v137 = *(unsigned int *)(v139
                                           + 4488 * (v137 & 0xCFFFFFFF)
                                           + 4
                                           * ((4 * ((i & v144) != 0)) | (2 * ((i & v153) != 0)) | ((i & v154) != 0))
                                           + 24);
                    if (i == *(_DWORD *)(v9 + 320) || v137 >> 30)
                      break;
                    v144 -= i & v144;
                    v153 -= i & v153;
                  }
                  v138 = v399;
                  if ((v137 & 0x80000000) == 0)
                  {
                    v156 = *(_QWORD *)(v9 + 21104);
                    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v9 + 21112) - v156) >> 4) <= v137)
                    {
                      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C);
                      v157 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v157 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670 || byte_255795678)
                      {
                        v158 = qword_255795648;
                        for (j = qword_255795650; v158 != j; v158 += 16)
                          (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v158)(*(_QWORD *)(v158 + 8), "info_index < allocated_voxel_block_infos_.size()", 48, "Invalid map index", 17);
                      }
                      v160 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v160 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670)
                        goto LABEL_505;
                      qword_255795660(*(_QWORD *)algn_255795668, "info_index < allocated_voxel_block_infos_.size()", 48, "Invalid map index", 17);
                      v156 = *(_QWORD *)(v9 + 21104);
                    }
                    v138 = v156 + 48 * v137;
                  }
                }
              }
            }
            v161 = *(unsigned int *)(v138 + 40);
            v162 = v388;
            if ((v161 & 0x80000000) == 0)
            {
              v163 = *(_QWORD *)(v9 + 20984);
              if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v9 + 20992) - v163) >> 12) <= v161)
              {
                sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
                v164 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v164 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670 || byte_255795678)
                {
                  v165 = qword_255795648;
                  for (k = qword_255795650; v165 != k; v165 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v165)(*(_QWORD *)(v165 + 8), "block_index < allocated_voxel_blocks_.size()", 44, "Invalid block index", 19);
                }
                v167 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v167 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670)
                  goto LABEL_505;
                qword_255795660(*(_QWORD *)algn_255795668, "block_index < allocated_voxel_blocks_.size()", 44, "Invalid block index", 19);
                v163 = *(_QWORD *)(v9 + 20984);
              }
              v162 = v163 + 20480 * v161;
            }
            v168 = 0;
            v169 = (float *)object;
            v170 = v416;
            while (1)
            {
              v172 = v169[2];
              if (v172 >= 10.0)
                goto LABEL_200;
              if (v172 <= 0.0)
                goto LABEL_200;
              v173 = *v170;
              if ((*v170 & 0x80000000) != 0
                || (int)v173 >= categoryb
                || (v173 & 0x8000000000000000) != 0
                || SHIDWORD(v173) >= v409)
              {
                goto LABEL_200;
              }
              _H0 = *(_WORD *)(v425 + 2 * (v428 * v173 + v429 * HIDWORD(v173)));
              __asm { FCVT            S14, H0 }
              _Q0.i16[0] = *(_WORD *)(v449 + 2 * (v450 * v173 + v451 * HIDWORD(v173)));
              __asm { FCVT            S9, H0 }
              if (*(_BYTE *)(v87 + 536))
              {
                v180 = sub_223CCAF1C(v87, *v170, *(float32x2_t *)_Q0.f32, v130, *(double *)v131.i64, *(double *)v132.i64);
                if ((v180 & 0xFF00000000) != 0)
                {
                  _Q0.i16[1] = WORD1(v180);
                  if (_S14 < *(float *)&v180)
                    goto LABEL_225;
                  _S9 = 1061997773;
                  _S14 = *(float *)&v180;
                }
                else
                {
                  v182 = *(_QWORD *)(v87 + 440);
                  v181 = *(_QWORD *)(v87 + 448);
                  if (v182 != v181)
                  {
                    if (*(_DWORD *)(v87 + 416) <= v173 || *(_DWORD *)(v87 + 420) <= HIDWORD(v173))
                    {
                      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/ImageProcessing/src/DepthCorrection/SpecularRegions.cpp", 41, (uint64_t)"idx[0] >= 0 && idx[1] >= 0 && idx[0] < regions_buffer_.Width() && idx[1] < regions_buffer_.Height()", 99, (uint64_t)&unk_2245A741E, 0, (void (*)(void **))sub_22457406C);
                      v183 = v97;
                      v184 = v9;
                      v185 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v185 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670 || byte_255795678)
                      {
                        v187 = qword_255795648;
                        for (m = qword_255795650; v187 != m; v187 += 16)
                          (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v187)(*(_QWORD *)(v187 + 8), "idx[0] >= 0 && idx[1] >= 0 && idx[0] < regions_buffer_.Width() && idx[1] < regions_buffer_.Height()", 99, &unk_2245A741E, 0);
                      }
                      v188 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v188 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670)
                        abort();
                      v9 = v184;
                      v97 = v183;
                      qword_255795660(*(_QWORD *)algn_255795668, "idx[0] >= 0 && idx[1] >= 0 && idx[0] < regions_buffer_.Width() && idx[1] < regions_buffer_.Height()", 99, &unk_2245A741E, 0);
                      v7 = v386;
                      v87 = v387;
                      v182 = *(_QWORD *)(v387 + 440);
                      v181 = *(_QWORD *)(v387 + 448);
                    }
                    v189 = *(unsigned __int8 *)(*(_QWORD *)(v87 + 408)
                                              + (*(_DWORD *)(v87 + 424) * v173
                                                             + *(_DWORD *)(v87 + 428) * HIDWORD(v173)));
                    v190 = 0xCCCCCCCCCCCCCCCDLL * ((v181 - v182) >> 3);
                    v191 = v189 - 100;
                    if (v190 > v189)
                      v191 = *(unsigned __int8 *)(*(_QWORD *)(v87 + 408)
                                                + (*(_DWORD *)(v87 + 424) * v173
                                                               + *(_DWORD *)(v87 + 428) * HIDWORD(v173)));
                    if (v190 > v191)
LABEL_225:
                      _S9 = 1008981770;
                  }
                }
              }
              if ((LODWORD(_S14) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
              {
                _Q0.f32[0] = (float)(_S14 - v172) * 10.0;
                v192 = (int)_Q0.f32[0];
                if ((int)_Q0.f32[0] >= 1)
                  break;
              }
LABEL_200:
              v169 += 3;
              ++v170;
              if (++v168 == 512)
                goto LABEL_310;
            }
            if (v192 >= 0x7F)
              v192 = 127;
            v193 = v415;
            __asm { FCVT            H0, S9 }
            v195 = v405[1];
            *(int32x2_t *)v130.f32 = vdup_n_s32(v168);
            *(uint32x2_t *)v131.f32 = vshl_u32(*(uint32x2_t *)v130.f32, (uint32x2_t)0xFFFFFFFBFFFFFFFCLL);
            v196 = (float32x2_t)vshl_u32(*(uint32x2_t *)v130.f32, (uint32x2_t)-2);
            v197 = vand_s8((int8x8_t)vzip1_s32((int32x2_t)v196, *(int32x2_t *)v131.f32), (int8x8_t)0x400000002);
            v198 = (float *)&v195[2725];
            *(int8x8_t *)v130.f32 = vorr_s8(vorr_s8(vand_s8(*(int8x8_t *)v131.f32, (int8x8_t)0x400000002), vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v130.f32, (uint32x2_t)0xFFFFFFFDFFFFFFFALL), (int8x8_t)0x200000004)), vand_s8((int8x8_t)v196, (int8x8_t)0x100000001));
            v131.i64[0] = v414;
            v402 = v131;
            *(float32x2_t *)v130.f32 = vcvt_f32_s32(vadd_s32(*(int32x2_t *)v130.f32, (int32x2_t)v414));
            v130.f32[2] = (float)(int)((v168 & 1 | v197.i32[0] | v197.i32[1]) + v415);
            v199.i64[0] = 0x3F0000003F000000;
            v199.i64[1] = 0x3F0000003F000000;
            v200 = (int8x16_t)vmulq_n_f32(vaddq_f32(v130, v199), v195[39].f32[0]);
            v196.i32[0] = (*v405)[1].i32[0];
            v135.i32[0] = (*v405)[3].i32[0];
            v134.i32[0] = (*v405)[5].i32[0];
            *(float32x2_t *)v199.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(**v405, *(float *)v200.i32), (*v405)[2], *(float32x2_t *)v200.i8, 1), (*v405)[4], (float32x4_t)v200, 2);
            v201 = vmla_lane_f32(vmul_f32(v196, *(float32x2_t *)v200.i8), *(float32x2_t *)v135.i8, *(float32x2_t *)v200.i8, 1);
            v202 = (float32x4_t)vextq_s8(v200, v200, 8uLL);
            *(float32x2_t *)&v199.u32[2] = vmla_f32(v201, *(float32x2_t *)v202.f32, *(float32x2_t *)v134.f32);
            *(float32x2_t *)v202.f32 = (*v405)[6];
            v202.i32[2] = (*v405)[7].i32[0];
            v203 = vaddq_f32(v202, v199);
            __asm { FCVT            S0, H0 }
            v205 = (int)(float)(_S0 * 255.0);
            if (v205 >= 255)
              v205 = 255;
            if (v205 <= 1)
              v205 = 1;
            v206 = v195 + 2724;
            v207 = v206->f32[v192] - v198[18];
            v208 = v405[3];
            _Q0.f32[0] = expf((float)((float)((float)(v206->f32[v205] - v198[253])+ (float)(fminf((float)(v207 - v198[254]) + (float)(*v198 * 0.5), 0.0)- vmuls_lane_f32((float)(v207 * -0.0722) + 0.2272, v203, 2)))+ (float)((float)(vmla_lane_f32(vmul_f32(*(float32x2_t *)v203.f32, *(float32x2_t *)v203.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v203.f32, 1), *(float32x2_t *)v203.f32, 1).f32[0]/ fmaxf(v203.f32[2], 0.1))* -0.6))* 0.1)* 255.0;
            v209 = (int)_Q0.f32[0];
            if (**(_DWORD **)&v208[1] < (int)_Q0.f32[0])
              v209 = **(_DWORD **)&v208[1];
            if (*(_DWORD *)v208->i32[0] > v209)
              LOBYTE(v209) = *(_DWORD *)v208->i32[0];
            v210 = (unsigned __int8 *)(v162 + 40 * v168);
            v211 = v7[72].u16[0];
            if (*((unsigned __int16 *)v210 + 4) == v211)
            {
              v212 = 0;
              if (*((unsigned __int16 *)v210 + 9) != v211)
                goto LABEL_240;
LABEL_244:
              v213 = 0;
              if (*((unsigned __int16 *)v210 + 14) == v211)
                goto LABEL_245;
LABEL_241:
              v214 = v210[20] < v209;
              if (*((unsigned __int16 *)v210 + 19) != v211)
                goto LABEL_246;
LABEL_198:
              v171 = 0;
              if (v212 || v213 || v214)
                goto LABEL_252;
              goto LABEL_199;
            }
            v212 = *v210 < v209;
            if (*((unsigned __int16 *)v210 + 9) == v211)
              goto LABEL_244;
LABEL_240:
            v213 = v210[10] < v209;
            if (*((unsigned __int16 *)v210 + 14) != v211)
              goto LABEL_241;
LABEL_245:
            v214 = 0;
            if (*((unsigned __int16 *)v210 + 19) == v211)
              goto LABEL_198;
LABEL_246:
            v171 = v210[30] < v209;
            if (!v212 && !v213 && !v214)
            {
LABEL_199:
              if (v171)
                goto LABEL_252;
              goto LABEL_200;
            }
LABEL_252:
            ++v382;
            if (!*(_DWORD *)(v9 + 8)
              || -858993459 * ((*(_QWORD *)(v9 + 21000) - *(_QWORD *)(v9 + 20984)) >> 12)
               + 858993459 * ((*(_QWORD *)(v9 + 20992) - *(_QWORD *)(v9 + 20984)) >> 12)
               + ((*(_QWORD *)(v9 + 21040) - *(_QWORD *)(v9 + 21032)) >> 2))
            {
              goto LABEL_272;
            }
            v215 = *(unsigned int *)(v9 + 360);
            v216 = v399;
            if ((v215 & 0x80000000) != 0)
              goto LABEL_270;
            _Q0.i32[3] = v402.i32[3];
            v217 = *(_QWORD *)(v9 + 368);
            v218 = (_DWORD *)(v217 + 4488 * (v215 & 0xFFFFFFFFCFFFFFFFLL));
            v216 = v399;
            v219 = (v402.i32[0] & 0xFFFFFFF8) - *v218;
            if ((signed int)(v402.i32[0] & 0xFFFFFFF8) < *v218)
              goto LABEL_270;
            _Q0.i32[3] = v402.i32[3];
            v220 = v218[1];
            v216 = v399;
            _VF = __OFSUB__(v402.i32[1] & 0xFFFFFFF8, v220);
            v221 = (v402.i32[1] & 0xFFFFFFF8) - v220;
            if (v221 < 0 != _VF)
              goto LABEL_270;
            v222 = v218[2];
            v216 = v399;
            _VF = __OFSUB__(v193 & 0xFFFFFFF8, v222);
            v223 = (v193 & 0xFFFFFFF8) - v222;
            if (v223 < 0 != _VF)
              goto LABEL_270;
            v224 = v218[3];
            v216 = v399;
            if ((int)(v402.i32[0] & 0xFFFFFFF8) >= v224)
              goto LABEL_270;
            v216 = v399;
            if ((signed int)(v402.i32[1] & 0xFFFFFFF8) >= v218[4])
              goto LABEL_270;
            v216 = v399;
            if ((signed int)(v193 & 0xFFFFFFF8) >= v218[5])
              goto LABEL_270;
            for (n = v224 - *v218; ; v223 -= n & v223)
            {
              n >>= 1;
              v215 = *(unsigned int *)(v217
                                     + 4488 * (v215 & 0xCFFFFFFF)
                                     + 4 * ((4 * ((n & v219) != 0)) | (2 * ((n & v221) != 0)) | ((n & v223) != 0))
                                     + 24);
              if (n == *(_DWORD *)(v9 + 320) || v215 >> 30)
                break;
              v219 -= n & v219;
              v221 -= n & v221;
            }
            v216 = v399;
            if ((v215 & 0x80000000) != 0)
              goto LABEL_270;
            v226 = *(_QWORD *)(v9 + 21104);
            if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v9 + 21112) - v226) >> 4) > v215)
              goto LABEL_269;
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C))
            {
LABEL_505:
              abort();
            }
            v226 = *(_QWORD *)(v9 + 21104);
LABEL_269:
            v216 = v226 + 48 * v215;
LABEL_270:
            if ((*(_DWORD *)(v216 + 40) & 0x80000000) != 0)
            {
              _Q0.i64[0] = *(_QWORD *)v375;
              _Q0.i32[2] = *(_DWORD *)(v375 + 8);
              sub_223AF27E4((uint64_t)v452, v380, (int *)&v414, v9, _Q0);
              if (!v452[12])
              {
LABEL_310:
                v96 = v400;
                goto LABEL_311;
              }
            }
LABEL_272:
            v227 = *(unsigned int *)(v9 + 360);
            if ((v227 & 0x80000000) != 0)
              goto LABEL_287;
            v228 = HIDWORD(v414) & 0xFFFFFFF8;
            v229 = v415 & 0xFFFFFFF8;
            v230 = *(_QWORD *)(v9 + 368);
            v231 = (int *)(v230 + 4488 * (v227 & 0xFFFFFFFFCFFFFFFFLL));
            v232 = *v231;
            v233 = v231[1];
            v234 = v231[2];
            v235 = (v414 & 0xFFFFFFF8) - *v231;
            v236 = (v414 & 0xFFFFFFF8) < *v231 || v228 < v233;
            v237 = v236 || v229 < v234;
            if (v237
              || ((v238 = v231[3], v241 = v231 + 4, v240 = v231[4], v239 = v241[1], (v414 & 0xFFFFFFF8) < v238)
                ? (v242 = v228 < v240)
                : (v242 = 0),
                  v242 ? (v243 = v229 < v239) : (v243 = 0),
                  !v243))
            {
LABEL_287:
              LODWORD(v227) = 0x80000000;
            }
            else
            {
              v310 = v228 - v233;
              v311 = v229 - v234;
              for (ii = v238 - v232; ; v311 -= ii & v311)
              {
                ii >>= 1;
                LODWORD(v227) = *(_DWORD *)(v230
                                          + 4488 * (v227 & 0xCFFFFFFF)
                                          + 4
                                          * ((4 * ((ii & v235) != 0)) | (2 * ((ii & v310) != 0)) | ((ii & v311) != 0))
                                          + 24);
                if (ii == *(_DWORD *)(v9 + 320) || v227 >> 30)
                  break;
                v235 -= ii & v235;
                v310 -= ii & v310;
              }
            }
            LODWORD(v434) = v227;
            v452[0] = 0;
            v452[16] = 0;
            v244 = sub_223B61034(v380, (__int128 *)v452, (unsigned int *)&v434);
            if ((_DWORD)v227 != (_DWORD)v434)
            {
              v435[0] = (int8x8_t)(v414 & 0xFFFFFFF8FFFFFFF8);
              v435[1].i32[0] = v415 & 0xFFFFFFF8;
              sub_223E8AD00(v380, v435, v434);
            }
            if ((v244 & 0x80000000) != 0)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 194, (uint64_t)"!VoxelBlockOctreeNode::IsUnknown(block_index)", 45, (uint64_t)"Unknown block index", 19, (void (*)(void **))sub_22457406C);
              v251 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v251 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v252 = qword_255795648;
                for (jj = qword_255795650; v252 != jj; v252 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v252)(*(_QWORD *)(v252 + 8), "!VoxelBlockOctreeNode::IsUnknown(block_index)", 45, "Unknown block index", 19);
              }
              v254 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v254 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (byte_255795670)
              {
                qword_255795660(*(_QWORD *)algn_255795668, "!VoxelBlockOctreeNode::IsUnknown(block_index)", 45, "Unknown block index", 19);
                goto LABEL_299;
              }
LABEL_506:
              abort();
            }
LABEL_299:
            v255 = v244;
            v256 = *(_QWORD *)(v9 + 20984);
            if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v9 + 20992) - v256) >> 12) <= v244)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 195, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
              v257 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v257 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v258 = qword_255795648;
                for (kk = qword_255795650; v258 != kk; v258 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v258)(*(_QWORD *)(v258 + 8), "block_index < allocated_voxel_blocks_.size()", 44, "Invalid block index", 19);
              }
              v260 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v260 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                goto LABEL_506;
              qword_255795660(*(_QWORD *)algn_255795668, "block_index < allocated_voxel_blocks_.size()", 44, "Invalid block index", 19);
              v256 = *(_QWORD *)(v9 + 20984);
            }
            if (v168 > 0x1FF)
              goto LABEL_310;
            v381 = 0;
            v403 = v256 + 20480 * v255;
            v96 = v400;
            while (2)
            {
              v261 = v169[2];
              if (v261 < 10.0 && v261 > 0.0)
              {
                v262 = *v170;
                if ((*v170 & 0x80000000) != 0
                  || (int)v262 >= categoryb
                  || (v262 & 0x8000000000000000) != 0
                  || SHIDWORD(v262) >= v409)
                {
                  goto LABEL_313;
                }
                _H0 = *(_WORD *)(v425 + 2 * (v428 * v262 + v429 * HIDWORD(v262)));
                __asm { FCVT            S14, H0 }
                _D0.i16[0] = *(_WORD *)(v449 + 2 * (v450 * v262 + v451 * HIDWORD(v262)));
                __asm { FCVT            S9, H0 }
                if (*(_BYTE *)(v87 + 536))
                {
                  v266 = sub_223CCAF1C(v87, *v170, _D0, v246, v247, v248);
                  if ((v266 & 0xFF00000000) != 0)
                  {
                    _D0.i16[1] = WORD1(v266);
                    if (_S14 >= *(float *)&v266)
                    {
                      _S9 = 1061997773;
                      _S14 = *(float *)&v266;
                      goto LABEL_340;
                    }
LABEL_339:
                    _S9 = 1008981770;
                    goto LABEL_340;
                  }
                  v268 = *(_QWORD *)(v87 + 440);
                  v267 = *(_QWORD *)(v87 + 448);
                  if (v268 != v267)
                  {
                    if (*(_DWORD *)(v87 + 416) <= v262 || *(_DWORD *)(v87 + 420) <= HIDWORD(v262))
                    {
                      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/ImageProcessing/src/DepthCorrection/SpecularRegions.cpp", 41, (uint64_t)"idx[0] >= 0 && idx[1] >= 0 && idx[0] < regions_buffer_.Width() && idx[1] < regions_buffer_.Height()", 99, (uint64_t)&unk_2245A741E, 0, (void (*)(void **))sub_22457406C);
                      v384 = v97;
                      v269 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v269 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670 || byte_255795678)
                      {
                        v270 = qword_255795648;
                        for (mm = qword_255795650; v270 != mm; v270 += 16)
                          (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v270)(*(_QWORD *)(v270 + 8), "idx[0] >= 0 && idx[1] >= 0 && idx[0] < regions_buffer_.Width() && idx[1] < regions_buffer_.Height()", 99, &unk_2245A741E, 0);
                      }
                      v272 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v272 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      v97 = v384;
                      if (!byte_255795670)
                        abort();
                      qword_255795660(*(_QWORD *)algn_255795668, "idx[0] >= 0 && idx[1] >= 0 && idx[0] < regions_buffer_.Width() && idx[1] < regions_buffer_.Height()", 99, &unk_2245A741E, 0);
                      v268 = *(_QWORD *)(v87 + 440);
                      v267 = *(_QWORD *)(v87 + 448);
                    }
                    v273 = *(unsigned __int8 *)(*(_QWORD *)(v87 + 408)
                                              + (*(_DWORD *)(v87 + 424) * v262
                                                             + *(_DWORD *)(v87 + 428) * HIDWORD(v262)));
                    v274 = 0xCCCCCCCCCCCCCCCDLL * ((v267 - v268) >> 3);
                    v275 = v273 - 100;
                    if (v274 > v273)
                      v275 = *(unsigned __int8 *)(*(_QWORD *)(v87 + 408)
                                                + (*(_DWORD *)(v87 + 424) * v262
                                                               + *(_DWORD *)(v87 + 428) * HIDWORD(v262)));
                    if (v274 > v275)
                      goto LABEL_339;
                  }
                }
LABEL_340:
                v96 = v400;
                if ((LODWORD(_S14) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
                {
                  _D0.f32[0] = (float)(_S14 - v261) * 10.0;
                  if ((int)_D0.f32[0] >= 1)
                  {
                    v276 = (unsigned __int8 *)(v403 + 40 * v168);
                    if ((int)_D0.f32[0] >= 0x7F)
                      v277 = 127;
                    else
                      v277 = (int)_D0.f32[0];
                    __asm { FCVT            H0, S9 }
                    v279 = v405[1];
                    *(int32x2_t *)v246.f32 = vdup_n_s32(v168);
                    v280 = (int32x2_t)vshl_u32(*(uint32x2_t *)v246.f32, (uint32x2_t)0xFFFFFFFBFFFFFFFCLL);
                    v281 = (float32x2_t)vshl_u32(*(uint32x2_t *)v246.f32, (uint32x2_t)-2);
                    v282 = vand_s8((int8x8_t)vzip1_s32((int32x2_t)v281, v280), (int8x8_t)0x400000002);
                    v283 = (float *)&v279[2725];
                    v385 = (int8x8_t)vshl_u32(*(uint32x2_t *)v246.f32, (uint32x2_t)0xFFFFFFFDFFFFFFFALL);
                    *(float32x2_t *)v246.f32 = vcvt_f32_s32(vadd_s32((int32x2_t)vorr_s8(vorr_s8(vand_s8((int8x8_t)v280, (int8x8_t)0x400000002), vand_s8(v385, (int8x8_t)0x200000004)), vand_s8((int8x8_t)v281, (int8x8_t)0x100000001)), (int32x2_t)v414));
                    v246.f32[2] = (float)(int)((v168 & 1 | v282.i32[0] | v282.i32[1]) + v415);
                    v284.i64[0] = 0x3F0000003F000000;
                    v284.i64[1] = 0x3F0000003F000000;
                    v285 = (int8x16_t)vmulq_n_f32(vaddq_f32(v246, v284), v279[39].f32[0]);
                    v281.i32[0] = (*v405)[1].i32[0];
                    v249.i32[0] = (*v405)[3].i32[0];
                    v250.i32[0] = (*v405)[5].i32[0];
                    *(float32x2_t *)v284.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(**v405, *(float *)v285.i32), (*v405)[2], *(float32x2_t *)v285.i8, 1), (*v405)[4], (float32x4_t)v285, 2);
                    v286 = vmla_lane_f32(vmul_f32(v281, *(float32x2_t *)v285.i8), v249, *(float32x2_t *)v285.i8, 1);
                    v287 = (float32x4_t)vextq_s8(v285, v285, 8uLL);
                    *(float32x2_t *)&v284.u32[2] = vmla_f32(v286, *(float32x2_t *)v287.f32, v250);
                    *(float32x2_t *)v287.f32 = (*v405)[6];
                    v287.i32[2] = (*v405)[7].i32[0];
                    v288 = vaddq_f32(v287, v284);
                    __asm { FCVT            S0, H0 }
                    v290 = (int)(float)(_S0 * 255.0);
                    if (v290 >= 255)
                      v290 = 255;
                    if (v290 <= 1)
                      v290 = 1;
                    v291 = v279 + 2724;
                    v292 = v291->f32[v277] - v283[18];
                    v293 = v405[3];
                    _D0.f32[0] = expf((float)((float)((float)(v291->f32[v290] - v283[253])+ (float)(fminf((float)(v292 - v283[254]) + (float)(*v283 * 0.5), 0.0)- vmuls_lane_f32((float)(v292 * -0.0722) + 0.2272, v288, 2)))+ (float)((float)(vmla_lane_f32(vmul_f32(*(float32x2_t *)v288.f32, *(float32x2_t *)v288.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v288.f32, 1), *(float32x2_t *)v288.f32, 1).f32[0]/ fmaxf(v288.f32[2], 0.1))* -0.6))* 0.1)* 255.0;
                    v294 = (int)_D0.f32[0];
                    if (**(_DWORD **)&v293[1] < (int)_D0.f32[0])
                      v294 = **(_DWORD **)&v293[1];
                    if (*(_DWORD *)v293->i32[0] > v294)
                      LOBYTE(v294) = *(_DWORD *)v293->i32[0];
                    LODWORD(v295) = v7[72].u16[0];
                    if (*((unsigned __int16 *)v276 + 19) != (_DWORD)v295
                      && *((unsigned __int16 *)v276 + 14) != (_DWORD)v295
                      && *((unsigned __int16 *)v276 + 9) != (_DWORD)v295
                      && *((unsigned __int16 *)v276 + 4) != (_DWORD)v295)
                    {
                      v296 = *v276;
                      v297 = v294;
                      if (v296 >= v294)
                      {
                        v298 = -1;
                      }
                      else
                      {
                        v297 = *v276;
                        v298 = 0;
                      }
                      if (v276[10] >= v297)
                      {
                        v299 = v298;
                      }
                      else
                      {
                        v297 = v276[10];
                        v299 = 1;
                      }
                      if (v276[20] >= v297)
                      {
                        v300 = v299;
                      }
                      else
                      {
                        v297 = v276[20];
                        v300 = 2;
                      }
                      v301 = v276[30] >= v297 ? v300 : 3;
                      if (v301 != -1)
                      {
                        if (v296 >= v294 || v301 == 0)
                        {
                          v308 = v301 == 0;
                          v303 = v301;
                        }
                        else
                        {
                          v303 = 0;
                          v295 = &v276[10 * v301];
                          *(_WORD *)v452 = *(_WORD *)v276;
                          v304 = *(_WORD *)v452;
                          v452[2] = v276[2];
                          v305 = v452[2];
                          *(_WORD *)&v452[3] = *(_WORD *)(v276 + 3);
                          v452[5] = v276[5];
                          v306 = *(_DWORD *)(v276 + 6);
                          *(_WORD *)v276 = *(_WORD *)v295;
                          v276[2] = v295[2];
                          *(_WORD *)(v276 + 3) = *(_WORD *)(v295 + 3);
                          v276[5] = v295[5];
                          *(_DWORD *)(v276 + 6) = *(_DWORD *)(v295 + 6);
                          v295[2] = v305;
                          *(_WORD *)v295 = v304;
                          v307 = *(_WORD *)&v452[3];
                          v295[5] = v452[5];
                          *(_WORD *)(v295 + 3) = v307;
                          *(_DWORD *)(v295 + 6) = v306;
                          LOWORD(v295) = v7[72].i16[0];
                          v308 = 1;
                        }
                        v309 = &v276[10 * v303];
                        *((_WORD *)v309 + 4) = (_WORD)v295;
                        v309[6] = v277;
                        *v309 = v294;
                        v309[7] = v7[23].u8[0];
                        if (v308)
                        {
                          _D0 = (float32x2_t)v385;
                          v381 |= 1 << v385.i8[4];
                        }
                      }
                    }
LABEL_313:
                    v96 = v400;
                  }
                }
              }
              v169 += 3;
              ++v170;
              if (++v168 != 512)
                continue;
              break;
            }
            if (v381)
              sub_223B1D134((char *)&v414, v381, v379, v378);
LABEL_311:
            kdebug_trace();
            v407 += 8;
          }
          while (v407 <= v395);
          v114 = v401 + 8;
        }
        while (v401 + 8 <= v377);
        v96 += 8;
      }
      while (v96 <= v374);
    }
  }
LABEL_132:
  if (!*(_DWORD *)(v9 + 8)
    || -858993459 * ((*(_QWORD *)(v9 + 21000) - *(_QWORD *)(v9 + 20984)) >> 12)
     + 858993459 * ((*(_QWORD *)(v9 + 20992) - *(_QWORD *)(v9 + 20984)) >> 12)
     + ((*(_QWORD *)(v9 + 21040) - *(_QWORD *)(v9 + 21032)) >> 2)
    || (v452[0] = 0, v452[16] = 0, sub_223AF25CC(v380, (__int128 *)v452, &v430))
    || (v313.i64[0] = *(_QWORD *)v375,
        v313.i32[2] = *(_DWORD *)(v375 + 8),
        sub_223AF27E4((uint64_t)v452, v380, (int *)&v430, v9, v313),
        v452[12]))
  {
    v452[0] = 0;
    v452[16] = 0;
    v98 = sub_223B1CF00(v380, (uint64_t)v452, &v430);
    v99 = v431;
    v100 = v430.i32[0];
    v101 = v430.i32[1];
    v102 = (32 * v430.i32[1]) & 0x80;
    v103 = (8 * v430.i32[1]) & 0x10;
    v104 = v98
         + 40
         * (v431 & 1 | (4 * (v430.i8[0] & 1)) & 0x97 | (2 * (v430.i8[4] & 1)) & 0x97 | (((v431 >> 2) & 1) << 6) & 0xFFFFFEFF | (8 * ((v431 >> 1) & 1)) & 0xFFFFFEDF | (32 * (((unsigned __int32)v430.i32[0] >> 1) & 1)) & 0xFFFFFEFF | ((((unsigned __int32)v430.i32[0] >> 2) & 1) << 8) | v102 | v103);
    if (*(char *)(v104 + 6) < 0)
    {
      *(_BYTE *)(v104 + 6) = 127;
      *(_BYTE *)v104 = 1;
      *(_WORD *)(v104 + 8) = v7[72].i16[0];
      *(_DWORD *)v452 = v100 & 0xFFFFFFF8;
      *(_DWORD *)&v452[4] = v101 & 0xFFFFFFF8;
      *(_DWORD *)&v452[8] = v99 & 0xFFFFFFF8;
      sub_223B1D134(v452, 1 << (((4 * v99) & 8 | (16 * v99) & 0x40 | (16 * v100) & 0x20 | (v100 << 6) & 0x100 | v102 | v103) >> 3), (uint64_t **)(v9 + 136), (uint64_t **)(v9 + 160));
    }
  }
  kdebug_trace();
  v452[23] = 13;
  strcpy(v452, "IntegrateFree");
  v435[2].i8[7] = 17;
  strcpy((char *)v435, "KeyframeOccupancy");
  sub_22391CC34((uint64_t *)v452, (uint64_t *)v435, (uint64_t)v432);
  if (v435[2].i8[7] < 0)
  {
    operator delete(*(void **)v435);
    if ((v452[23] & 0x80000000) == 0)
      goto LABEL_138;
LABEL_405:
    operator delete(*(void **)v452);
    goto LABEL_138;
  }
  if ((v452[23] & 0x80000000) != 0)
    goto LABEL_405;
LABEL_138:
  sub_223AF0EC4(&v413);
  if (**(int **)(v413 + 56) > 3)
    goto LABEL_493;
  v105 = *(unsigned __int8 *)(v413 + 72);
  v106 = sub_22322F254(v413, "OSLogSurrogateAppender", 1, 0);
  v107 = v106;
  if (!v105 && !v106)
    goto LABEL_493;
  v435[0] = (int8x8_t)&v413;
  v435[1] = (int8x8_t)std::chrono::steady_clock::now().__d_.__rep_;
  v435[2] = (int8x8_t)std::chrono::system_clock::now().__d_.__rep_;
  v436 = 3;
  v437 = "unknown file";
  v438 = 2188;
  v441 = 0;
  v439 = "unknown function";
  v440 = 0;
  v108 = **(_QWORD **)v435;
  v109 = **(_QWORD **)v435 + 16;
  if (*(char *)(**(_QWORD **)v435 + 39) < 0)
  {
    v111 = *(const char **)(v108 + 16);
    v110 = *(_QWORD *)(v108 + 24);
    v383 = v97;
    v314 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v314 & 1) != 0)
      goto LABEL_411;
  }
  else
  {
    v110 = *(unsigned __int8 *)(**(_QWORD **)v435 + 39);
    v111 = (const char *)(**(_QWORD **)v435 + 16);
    v383 = v97;
    v112 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v112 & 1) != 0)
      goto LABEL_411;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v452);
    sub_223199C58("com.apple.cv3d", (unint64_t)v452, byte_255788F40);
    if ((_BYTE)v453 && (v452[23] & 0x80000000) != 0)
      operator delete(*(void **)v452);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_411:
  if (byte_255788F40[23] >= 0)
    v315 = byte_255788F40;
  else
    v315 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v316 = byte_255788F40[23];
  else
    v316 = *(_QWORD *)&byte_255788F40[8];
  *(_QWORD *)v452 = os_log_create(v315, v111);
  v317 = &v452[8];
  if (v316 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v316 >= 0x17)
  {
    v318 = v107;
    v319 = v111;
    v320 = v108;
    v321 = v109;
    v322 = v105;
    v323 = (v316 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v316 | 7) != 0x17)
      v323 = v316 | 7;
    v324 = v323 + 1;
    v317 = operator new(v323 + 1);
    *(_QWORD *)&v452[16] = v316;
    *(_QWORD *)&v453 = v324 | 0x8000000000000000;
    *(_QWORD *)&v452[8] = v317;
    v105 = v322;
    v109 = v321;
    v108 = v320;
    v111 = v319;
    v107 = v318;
    goto LABEL_424;
  }
  BYTE7(v453) = v316;
  if (v316)
LABEL_424:
    memmove(v317, v315, v316);
  v317[v316] = 0;
  BYTE8(v453) = 1;
  v325 = v454;
  if (v110 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v110 >= 0x17)
  {
    v326 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v110 | 7) != 0x17)
      v326 = v110 | 7;
    v327 = v326 + 1;
    v325 = (void **)operator new(v326 + 1);
    v454[1] = (void *)v110;
    v455 = v327 | 0x8000000000000000;
    v454[0] = v325;
  }
  else
  {
    HIBYTE(v455) = v110;
    if (!v110)
      goto LABEL_433;
  }
  memmove(v325, v111, v110);
LABEL_433:
  *((_BYTE *)v325 + v110) = 0;
  v456 = 1;
  v328 = *(NSObject **)v452;
  if (SHIBYTE(v455) < 0)
    operator delete(v454[0]);
  if (BYTE8(v453) && SBYTE7(v453) < 0)
    operator delete(*(void **)&v452[8]);
  if (*(_QWORD *)v452)
    os_release(*(void **)v452);
  if (v107 && *(_QWORD *)(v107 + 24))
  {
    v329 = _os_log_pack_size();
    v330 = (std::__shared_weak_count_vtbl *)operator new(v329, (std::align_val_t)8uLL);
    v331 = (std::__shared_weak_count *)operator new();
    v332 = v331;
    v331->__shared_owners_ = 0;
    v333 = (unint64_t *)&v331->__shared_owners_;
    v331->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v331->__shared_weak_owners_ = 0;
    v331[1].__vftable = v330;
    *(_QWORD *)v452 = v330;
    *(_QWORD *)&v452[8] = v330;
    *(_QWORD *)&v452[16] = v331;
    do
      v334 = __ldxr(v333);
    while (__stxr(v334 + 1, v333));
    v453 = 0uLL;
    v454[0] = 0;
    do
      v335 = __ldaxr(v333);
    while (__stlxr(v335 - 1, v333));
    if (!v335)
    {
      ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
      std::__shared_weak_count::__release_weak(v332);
    }
    v336 = *(_QWORD *)v452;
    v337 = _os_log_pack_fill();
    *(_DWORD *)v337 = 67109376;
    *(_DWORD *)(v337 + 4) = v383;
    *(_WORD *)(v337 + 8) = 1024;
    *(_DWORD *)(v337 + 10) = v382;
    v338 = operator new();
    v339 = *(unsigned __int8 *)(v108 + 39);
    v340 = *(_QWORD *)(v108 + 16);
    v341 = *(_QWORD *)(v108 + 24);
    v342 = v453;
    *(_OWORD *)(v338 + 8) = *(_OWORD *)&v452[8];
    if ((v339 & 0x80u) != 0)
      v339 = v341;
    else
      v340 = v109;
    *(_QWORD *)v338 = v336;
    *(_QWORD *)&v452[8] = 0;
    *(_QWORD *)&v452[16] = 0;
    *(_OWORD *)(v338 + 24) = v342;
    v453 = 0uLL;
    *(_QWORD *)(v338 + 40) = v340;
    *(_QWORD *)(v338 + 48) = v339;
    *(_BYTE *)(v338 + 56) = 1;
    v434 = 0;
    v414 = v338;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v107 + 24) + 40))(*(_QWORD *)(v107 + 24), &v414);
    v343 = (int32x2_t)v414;
    v414 = 0;
    if (v343)
    {
      v344 = *(std::__shared_weak_count **)(*(_QWORD *)&v343 + 32);
      if (v344)
      {
        v345 = (unint64_t *)&v344->__shared_owners_;
        do
          v346 = __ldaxr(v345);
        while (__stlxr(v346 - 1, v345));
        if (!v346)
        {
          ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
          std::__shared_weak_count::__release_weak(v344);
        }
      }
      v347 = *(std::__shared_weak_count **)(*(_QWORD *)&v343 + 16);
      if (v347)
      {
        v348 = (unint64_t *)&v347->__shared_owners_;
        do
          v349 = __ldaxr(v348);
        while (__stlxr(v349 - 1, v348));
        if (!v349)
        {
          ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
          std::__shared_weak_count::__release_weak(v347);
        }
      }
      MEMORY[0x227684CE8](*(_QWORD *)&v343, 0x10F0C40B62ED6C6);
      v350 = v434;
      v434 = 0;
      if (v350)
      {
        v351 = *(std::__shared_weak_count **)(v350 + 32);
        if (v351)
        {
          v352 = (unint64_t *)&v351->__shared_owners_;
          do
            v353 = __ldaxr(v352);
          while (__stlxr(v353 - 1, v352));
          if (!v353)
          {
            ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
            std::__shared_weak_count::__release_weak(v351);
          }
        }
        v354 = *(std::__shared_weak_count **)(v350 + 16);
        if (v354)
        {
          v355 = (unint64_t *)&v354->__shared_owners_;
          do
            v356 = __ldaxr(v355);
          while (__stlxr(v356 - 1, v355));
          if (!v356)
          {
            ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
            std::__shared_weak_count::__release_weak(v354);
          }
        }
        MEMORY[0x227684CE8](v350, 0x10F0C40B62ED6C6);
      }
    }
    v357 = (std::__shared_weak_count *)*((_QWORD *)&v453 + 1);
    if (*((_QWORD *)&v453 + 1))
    {
      v358 = (unint64_t *)(*((_QWORD *)&v453 + 1) + 8);
      do
        v359 = __ldaxr(v358);
      while (__stlxr(v359 - 1, v358));
      if (!v359)
      {
        ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
        std::__shared_weak_count::__release_weak(v357);
      }
    }
    v360 = *(std::__shared_weak_count **)&v452[16];
    if (*(_QWORD *)&v452[16])
    {
      v361 = (unint64_t *)(*(_QWORD *)&v452[16] + 8);
      do
        v362 = __ldaxr(v361);
      while (__stlxr(v362 - 1, v361));
      if (!v362)
      {
        ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
        std::__shared_weak_count::__release_weak(v360);
      }
    }
  }
  else
  {
    os_log_type_enabled(v328, OS_LOG_TYPE_INFO);
    *(_DWORD *)v452 = 67109376;
    *(_DWORD *)&v452[4] = v383;
    *(_WORD *)&v452[8] = 1024;
    *(_DWORD *)&v452[10] = v382;
    v363 = (void *)_os_log_send_and_compose_impl();
    if (v363)
      free(v363);
  }
  if (v105)
  {
    sub_22322C138((uint64_t)v435, "Integrated free space (%i blocks tested, %i blocks had some free voxels)", v383, v382);
    sub_223182C08((uint64_t)v435);
  }
  sub_223182C08((uint64_t)v435);
  v364 = v441;
  if (v441)
  {
    v365 = (unint64_t *)&v441->__shared_owners_;
    do
      v366 = __ldaxr(v365);
    while (__stlxr(v366 - 1, v365));
    if (!v366)
    {
      ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
      std::__shared_weak_count::__release_weak(v364);
    }
  }
LABEL_493:
  v367 = v448;
  if (v448)
  {
    v368 = (unint64_t *)&v448->__shared_owners_;
    do
      v369 = __ldaxr(v368);
    while (__stlxr(v369 - 1, v368));
    if (!v369)
    {
      ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
      std::__shared_weak_count::__release_weak(v367);
    }
  }
  v370 = (std::__shared_weak_count *)*((_QWORD *)&v424 + 1);
  if (*((_QWORD *)&v424 + 1))
  {
    v371 = (unint64_t *)(*((_QWORD *)&v424 + 1) + 8);
    do
      v372 = __ldaxr(v371);
    while (__stlxr(v372 - 1, v371));
    if (!v372)
    {
      ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
      std::__shared_weak_count::__release_weak(v370);
    }
  }
}

void sub_223B20248(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  if (LOBYTE(STACK[0x2A98]) && SLOBYTE(STACK[0x2A97]) < 0)
    operator delete(*(void **)(v1 - 240));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x11F0]);
  v3 = (std::__shared_weak_count *)STACK[0x2A58];
  if (STACK[0x2A58])
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)STACK[0x1198];
  if (STACK[0x1198])
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223B20604(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 176);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_223B2064C(int8x8_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int32x2_t *a5, uint64_t a6, uint64_t a7, _QWORD *a8, _QWORD *a9, _QWORD *a10, uint64_t a11, uint64_t *a12)
{
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int32 v16;
  __int32 v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  std::mutex *v22;
  uint64_t v23;
  void *v24;
  _BYTE *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  void *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  std::mutex *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t *v65;
  void *v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  std::mutex *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t *v100;
  void *v101;
  unint64_t *v102;
  unint64_t v103;
  void *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  std::mutex *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  _BYTE *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  unint64_t *v135;
  void *v136;
  unint64_t *v137;
  unint64_t v138;
  void *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  int8x8_t v159;
  unsigned int v160;
  int8x8_t *v161;
  uint64_t i;
  int8x8_t v163;
  int8x8_t v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  uint64_t v171;
  int v172;
  void **v173;
  float v174;
  uint64_t v175;
  int v176;
  float *v177;
  float v178;
  _QWORD *v179;
  _QWORD *j;
  int32x2_t v181;
  uint64_t **v182;
  uint64_t *v183;
  int v184;
  unint64_t v185;
  uint64_t v186;
  unsigned __int8 v187;
  uint64_t v188;
  uint64_t k;
  unsigned __int8 v190;
  uint64_t v191;
  unint64_t v192;
  float32x2_t v193;
  float32x2_t v194;
  float32x2_t v195;
  int8x8_t v196;
  float32x2_t v197;
  unint64_t v198;
  float32x2_t **v199;
  float32x2_t *v200;
  uint64_t v201;
  float32x2_t v202;
  float32x2_t v204;
  float v207;
  float v208;
  _QWORD *v209;
  _QWORD *v210;
  void *v211;
  float v212;
  uint64_t v213;
  char v214;
  int32x4_t v215;
  __n128 v216;
  double v217;
  double v218;
  double v219;
  float32x2_t v220;
  int32x4_t v221;
  char v222;
  __int128 *v223;
  int v224;
  int v225;
  int v226;
  char v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  uint64_t v231;
  void *v232;
  void *v233;
  __int128 *v234;
  unint64_t v235;
  unint64_t v236;
  uint8x8_t v237;
  __int128 *v238;
  __int128 *v239;
  __int128 *v240;
  unint64_t v241;
  __int128 *v242;
  unint64_t v243;
  unint64_t v244;
  float v245;
  float v246;
  float v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float v251;
  float32x4_t v252;
  unint64_t v253;
  unint64_t v254;
  int8x8_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  void *v259;
  uint64_t v260;
  void *v261;
  void *v262;
  uint64_t v263;
  uint64_t v264;
  void *v265;
  uint64_t v266;
  void *v267;
  void *v268;
  float v269;
  float v270;
  float v271;
  int8x8_t *v272;
  int v273;
  unint64_t v274;
  unint64_t v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float v280;
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float v287;
  uint64_t v288;
  const char *v289;
  size_t v290;
  int8x8_t v291;
  unsigned __int8 v292;
  unsigned __int8 v293;
  const char *v294;
  size_t v295;
  void **v296;
  const char *v297;
  unint64_t v298;
  uint64_t v299;
  int8x8_t v300;
  uint64_t v301;
  uint64_t v302;
  _QWORD *v303;
  NSObject *v304;
  uint64_t v305;
  uint64_t v306;
  size_t v307;
  std::__shared_weak_count_vtbl *v308;
  std::__shared_weak_count *v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  unint64_t v313;
  void *v314;
  uint64_t v315;
  int v316;
  int v317;
  int v318;
  char *v319;
  uint64_t v320;
  const char *v321;
  void *v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  uint64_t (**v329)();
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  char *v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  int8x8_t v346;
  int8x8_t *v347;
  int8x8_t v348;
  _QWORD *v349;
  uint64_t *v350;
  uint64_t v351;
  uint64_t v352;
  std::mutex *v353;
  uint64_t v354;
  uint64_t v355;
  void *v356;
  _BYTE *v357;
  uint64_t v358;
  uint64_t *v359;
  uint64_t v360;
  unint64_t *v361;
  void *v362;
  unint64_t *v363;
  unint64_t v364;
  void *v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  unint64_t *v369;
  unint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  uint64_t *v386;
  uint64_t v387;
  uint64_t v388;
  std::mutex *v389;
  uint64_t v390;
  uint64_t v391;
  void *v392;
  _BYTE *v393;
  uint64_t v394;
  uint64_t *v395;
  uint64_t v396;
  unint64_t *v397;
  void *v398;
  unint64_t *v399;
  unint64_t v400;
  void *v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  unint64_t *v405;
  unint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  std::__shared_weak_count *v416;
  unint64_t *v417;
  unint64_t v418;
  std::__shared_weak_count *v419;
  unint64_t *v420;
  unint64_t v421;
  void **v422;
  uint64_t v423;
  int v425;
  float v426;
  float v427;
  unint64_t v428;
  unint64_t v429;
  const char *v433;
  int v435;
  int8x8_t v438;
  uint64_t v439;
  std::string v440;
  std::string v441;
  __int128 v442;
  int v443;
  void *v444;
  __int128 v445;
  __int128 v446;
  uint64_t v447;
  void *v448;
  int v449[2];
  uint64_t v450;
  int v451;
  uint64_t v452;
  int v453;
  uint64_t v454;
  int v455;
  __int128 v456;
  __int128 v457;
  int v458;
  _BYTE v459[32];
  int v460[2];
  int v461;
  void *v462;
  int v463[2];
  std::__shared_weak_count *v464;
  uint64_t v465;
  int v466;
  uint64_t v467;
  int v468;
  uint64_t v469;
  int v470;
  __int128 v471;
  __int128 v472;
  int v473;
  uint64_t (**v474)();
  void *v475;
  std::__shared_weak_count *v476;
  __int128 v477;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  void *v479;
  std::__shared_weak_count *v480;
  void *__p[4];
  _QWORD v482[4];
  _BYTE v483[40];
  _BYTE v484[20];
  __int128 v485;
  int v486;
  __int128 v487;
  _QWORD v488[4];
  uint64_t v489[6];
  _OWORD v490[3];
  _OWORD v491[2];
  _BYTE v492[20];
  __int128 v493;
  int v494;
  _QWORD v495[6];
  __int128 v496;
  __int128 v497;
  int v498;
  int v499;
  uint64_t v500;
  char v501;
  char v502;
  uint64_t v503;

  v14 = a2;
  v15 = (uint64_t)a1;
  v503 = *MEMORY[0x24BDAC8D0];
  if ((_BYTE)a6)
  {
    v17 = a5[1].i32[0];
    v16 = a5[1].i32[1];
    v18 = a5->i32[1] - 1;
    LODWORD(__p[0]) = a5->i32[0] - 1;
    HIDWORD(__p[0]) = v18;
    LODWORD(__p[1]) = v17 + 1;
    HIDWORD(__p[1]) = v16 + 1;
    sub_223AD7220((uint64_t)a1, a2, __p, 1u);
    sub_223AD7B78((uint64_t)a1, a2, a5, a6);
    v14 = a2;
    v15 = (uint64_t)a1;
  }
  else
  {
    sub_223AD7220((uint64_t)a1, a2, 0, 0);
    sub_223AD7B78(v15, v14, 0, 0);
  }
  sub_223AD80F0(v15, v14, a5, a6);
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_2245B8D50;
  strcpy((char *)__p[0], "ComputeRoomBoundaries-Step1");
  sub_223AD5BA8(a1, (uint64_t)__p, 0, 0);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v19 = sub_2241471F8();
    v20 = v19[2];
    if (!v20)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v20 = v19[2];
    }
    v21 = *(_QWORD *)(v20 + 64);
    v22 = (std::mutex *)(v21 + 32);
    std::mutex::lock((std::mutex *)(v21 + 32));
    v12 = *(_QWORD *)(v21 + 96);
    v23 = *(_QWORD *)(v21 + 104);
    std::mutex::unlock(v22);
    if (v12 != v23)
    {
      sub_22456D250("ObservationMapping.Res.Cluster.Areas-%i", (std::string *)v459, a2);
      __p[0] = "cv3d.recon.";
      __p[1] = (void *)11;
      v24 = (void *)v459[23];
      if (v459[23] >= 0)
        v25 = v459;
      else
        v25 = *(_BYTE **)v459;
      if (v459[23] < 0)
        v24 = *(void **)&v459[8];
      __p[2] = v25;
      __p[3] = v24;
      sub_2231A9820((uint64_t)__p, (uint64_t)v482, 0, 0, &v441);
      if ((v459[23] & 0x80000000) != 0)
        operator delete(*(void **)v459);
      sub_2241471F8();
      v12 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v12 + 24))(v12))
      {
        memset(v459, 0, sizeof(v459));
        v460[0] = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v12 + 24))(v12))
        {
          *(_QWORD *)&v477 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v477 + 1) = 2;
          v26 = sub_2241471F8();
          if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v12 + 24))(v12))
          {
            sub_223AE3EB4((uint64_t)a1, *(float *)(a3 + 8), 0, (uint64_t)__p);
            LOBYTE(v444) = 0;
            LOBYTE(v446) = 0;
            sub_22329F414((uint64_t)__p, (__int128 *)&v444, &v477, &rep);
            if ((_BYTE)v446 && SHIBYTE(v445) < 0)
              operator delete(v444);
            sub_22316F8F4((uint64_t *)__p);
            v27 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v12 + 56))(v12);
            v29 = *(void **)v27;
            v28 = *(unint64_t **)(v27 + 8);
            v440.__r_.__value_.__r.__words[0] = *(_QWORD *)v27;
            v440.__r_.__value_.__l.__size_ = (std::string::size_type)v28;
            if (v28)
            {
              v30 = v28 + 1;
              do
                v31 = __ldxr(v30);
              while (__stxr(v31 + 1, v30));
            }
            v32 = v479;
            v33 = v480;
            v474 = &off_24EC6A3B8;
            v475 = v479;
            v476 = v480;
            v480 = 0;
            v479 = 0;
            __p[0] = v29;
            __p[1] = v28;
            if (v28)
            {
              v34 = v28 + 1;
              do
                v35 = __ldxr(v34);
              while (__stxr(v35 + 1, v34));
            }
            __p[2] = &off_24EC6A3B8;
            __p[3] = v32;
            v482[0] = v33;
            if (v33)
            {
              p_shared_owners = (unint64_t *)&v33->__shared_owners_;
              do
                v37 = __ldxr(p_shared_owners);
              while (__stxr(v37 + 1, p_shared_owners));
            }
            (*(void (**)(uint64_t *, void **))(*v26 + 16))(v26, __p);
            v38 = (std::__shared_weak_count *)v482[0];
            if (v482[0])
            {
              v39 = (unint64_t *)(v482[0] + 8);
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
            v41 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v42 = (unint64_t *)((char *)__p[1] + 8);
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
            v44 = v476;
            if (v476)
            {
              v45 = (unint64_t *)&v476->__shared_owners_;
              do
                v46 = __ldaxr(v45);
              while (__stlxr(v46 - 1, v45));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                std::__shared_weak_count::__release_weak(v44);
              }
            }
            if (v440.__r_.__value_.__l.__size_)
            {
              v47 = (unint64_t *)(v440.__r_.__value_.__l.__size_ + 8);
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 - 1, v47));
              if (!v48)
              {
                (*(void (**)(std::string::size_type))(*(_QWORD *)v440.__r_.__value_.__l.__size_ + 16))(v440.__r_.__value_.__l.__size_);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v440.__r_.__value_.__l.__size_);
              }
            }
            v49 = v480;
            if (v480)
            {
              v50 = (unint64_t *)&v480->__shared_owners_;
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v441.__r_.__value_.__l.__data_);
    }
  }
  v52 = 0;
  do
  {
    v53 = v52;
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v54 = sub_2241471F8();
      v55 = v54[2];
      if (!v55)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v55 = v54[2];
      }
      v56 = *(_QWORD *)(v55 + 64);
      v57 = (std::mutex *)(v56 + 32);
      std::mutex::lock((std::mutex *)(v56 + 32));
      v59 = *(_QWORD *)(v56 + 96);
      v58 = *(_QWORD *)(v56 + 104);
      std::mutex::unlock(v57);
      if (v59 != v58)
      {
        sub_22456D250("ObservationMapping.Res.Cluster.ClutterDensity%i-%i", (std::string *)v459, a2, v52);
        __p[0] = "cv3d.recon.";
        __p[1] = (void *)11;
        v60 = (void *)v459[23];
        v61 = v459;
        if (v459[23] < 0)
        {
          v61 = *(_BYTE **)v459;
          v60 = *(void **)&v459[8];
        }
        __p[2] = v61;
        __p[3] = v60;
        sub_2231A9820((uint64_t)__p, (uint64_t)v482, 0, 0, &v441);
        if ((v459[23] & 0x80000000) != 0)
          operator delete(*(void **)v459);
        sub_2241471F8();
        v62 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v62 + 24))(v62))
        {
          memset(v459, 0, sizeof(v459));
          v460[0] = 728325616;
          kdebug_trace();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v62 + 24))(v62))
          {
            v12 = v12 & 0xFFFFFFFFFFFFFF00 | 2;
            *(_QWORD *)&v477 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            *((_QWORD *)&v477 + 1) = v12;
            v63 = sub_2241471F8();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v62 + 24))(v62))
            {
              sub_223AE3604((uint64_t)a1, v52, (uint64_t)__p);
              LOBYTE(v444) = 0;
              LOBYTE(v446) = 0;
              sub_22329F414((uint64_t)__p, (__int128 *)&v444, &v477, &rep);
              if ((_BYTE)v446 && SHIBYTE(v445) < 0)
                operator delete(v444);
              sub_22316F8F4((uint64_t *)__p);
              v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 56))(v62);
              v66 = *(void **)v64;
              v65 = *(unint64_t **)(v64 + 8);
              v440.__r_.__value_.__r.__words[0] = *(_QWORD *)v64;
              v440.__r_.__value_.__l.__size_ = (std::string::size_type)v65;
              if (v65)
              {
                v67 = v65 + 1;
                do
                  v68 = __ldxr(v67);
                while (__stxr(v68 + 1, v67));
              }
              v69 = v479;
              v70 = v480;
              v474 = &off_24EC6A3B8;
              v475 = v479;
              v476 = v480;
              v479 = 0;
              v480 = 0;
              __p[0] = v66;
              __p[1] = v65;
              if (v65)
              {
                v71 = v65 + 1;
                do
                  v72 = __ldxr(v71);
                while (__stxr(v72 + 1, v71));
              }
              __p[2] = &off_24EC6A3B8;
              __p[3] = v69;
              v482[0] = v70;
              if (v70)
              {
                v73 = (unint64_t *)&v70->__shared_owners_;
                do
                  v74 = __ldxr(v73);
                while (__stxr(v74 + 1, v73));
              }
              (*(void (**)(uint64_t *, void **))(*v63 + 16))(v63, __p);
              v75 = (std::__shared_weak_count *)v482[0];
              if (v482[0])
              {
                v76 = (unint64_t *)(v482[0] + 8);
                do
                  v77 = __ldaxr(v76);
                while (__stlxr(v77 - 1, v76));
                if (!v77)
                {
                  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                  std::__shared_weak_count::__release_weak(v75);
                }
              }
              v78 = (std::__shared_weak_count *)__p[1];
              if (__p[1])
              {
                v79 = (unint64_t *)((char *)__p[1] + 8);
                do
                  v80 = __ldaxr(v79);
                while (__stlxr(v80 - 1, v79));
                if (!v80)
                {
                  ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                  std::__shared_weak_count::__release_weak(v78);
                }
              }
              v81 = v476;
              if (v476)
              {
                v82 = (unint64_t *)&v476->__shared_owners_;
                do
                  v83 = __ldaxr(v82);
                while (__stlxr(v83 - 1, v82));
                if (!v83)
                {
                  ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                  std::__shared_weak_count::__release_weak(v81);
                }
              }
              if (v440.__r_.__value_.__l.__size_)
              {
                v84 = (unint64_t *)(v440.__r_.__value_.__l.__size_ + 8);
                do
                  v85 = __ldaxr(v84);
                while (__stlxr(v85 - 1, v84));
                if (!v85)
                {
                  (*(void (**)(std::string::size_type))(*(_QWORD *)v440.__r_.__value_.__l.__size_ + 16))(v440.__r_.__value_.__l.__size_);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v440.__r_.__value_.__l.__size_);
                }
              }
              v86 = v480;
              if (v480)
              {
                v87 = (unint64_t *)&v480->__shared_owners_;
                do
                  v88 = __ldaxr(v87);
                while (__stlxr(v88 - 1, v87));
                if (!v88)
                {
                  ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                  std::__shared_weak_count::__release_weak(v86);
                }
              }
            }
          }
          kdebug_trace();
        }
        if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v441.__r_.__value_.__l.__data_);
      }
    }
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v89 = sub_2241471F8();
      v90 = v89[2];
      if (!v90)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v90 = v89[2];
      }
      v91 = *(_QWORD *)(v90 + 64);
      v92 = (std::mutex *)(v91 + 32);
      std::mutex::lock((std::mutex *)(v91 + 32));
      v94 = *(_QWORD *)(v91 + 96);
      v93 = *(_QWORD *)(v91 + 104);
      std::mutex::unlock(v92);
      if (v94 != v93)
      {
        sub_22456D250("ObservationMapping.Res.Cluster.ClutterGradient%i-%i", (std::string *)v459, a2, v52);
        __p[0] = "cv3d.recon.";
        __p[1] = (void *)11;
        v95 = (void *)v459[23];
        v96 = v459;
        if (v459[23] < 0)
        {
          v96 = *(_BYTE **)v459;
          v95 = *(void **)&v459[8];
        }
        __p[2] = v96;
        __p[3] = v95;
        sub_2231A9820((uint64_t)__p, (uint64_t)v482, 0, 0, &v441);
        if ((v459[23] & 0x80000000) != 0)
          operator delete(*(void **)v459);
        sub_2241471F8();
        v97 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v97 + 24))(v97))
        {
          memset(v459, 0, sizeof(v459));
          v460[0] = 728325616;
          kdebug_trace();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v97 + 24))(v97))
          {
            v13 = v13 & 0xFFFFFFFFFFFFFF00 | 2;
            *(_QWORD *)&v477 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            *((_QWORD *)&v477 + 1) = v13;
            v98 = sub_2241471F8();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v97 + 24))(v97))
            {
              sub_223AE396C((uint64_t)a1, v52, (uint64_t)__p);
              LOBYTE(v444) = 0;
              LOBYTE(v446) = 0;
              sub_22329F414((uint64_t)__p, (__int128 *)&v444, &v477, &rep);
              if ((_BYTE)v446 && SHIBYTE(v445) < 0)
                operator delete(v444);
              sub_22316F8F4((uint64_t *)__p);
              v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v97 + 56))(v97);
              v101 = *(void **)v99;
              v100 = *(unint64_t **)(v99 + 8);
              v440.__r_.__value_.__r.__words[0] = *(_QWORD *)v99;
              v440.__r_.__value_.__l.__size_ = (std::string::size_type)v100;
              if (v100)
              {
                v102 = v100 + 1;
                do
                  v103 = __ldxr(v102);
                while (__stxr(v103 + 1, v102));
              }
              v104 = v479;
              v105 = v480;
              v474 = &off_24EC6A3B8;
              v475 = v479;
              v476 = v480;
              v479 = 0;
              v480 = 0;
              __p[0] = v101;
              __p[1] = v100;
              if (v100)
              {
                v106 = v100 + 1;
                do
                  v107 = __ldxr(v106);
                while (__stxr(v107 + 1, v106));
              }
              __p[2] = &off_24EC6A3B8;
              __p[3] = v104;
              v482[0] = v105;
              if (v105)
              {
                v108 = (unint64_t *)&v105->__shared_owners_;
                do
                  v109 = __ldxr(v108);
                while (__stxr(v109 + 1, v108));
              }
              (*(void (**)(uint64_t *, void **))(*v98 + 16))(v98, __p);
              v110 = (std::__shared_weak_count *)v482[0];
              if (v482[0])
              {
                v111 = (unint64_t *)(v482[0] + 8);
                do
                  v112 = __ldaxr(v111);
                while (__stlxr(v112 - 1, v111));
                if (!v112)
                {
                  ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                  std::__shared_weak_count::__release_weak(v110);
                }
              }
              v113 = (std::__shared_weak_count *)__p[1];
              if (__p[1])
              {
                v114 = (unint64_t *)((char *)__p[1] + 8);
                do
                  v115 = __ldaxr(v114);
                while (__stlxr(v115 - 1, v114));
                if (!v115)
                {
                  ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                  std::__shared_weak_count::__release_weak(v113);
                }
              }
              v116 = v476;
              if (v476)
              {
                v117 = (unint64_t *)&v476->__shared_owners_;
                do
                  v118 = __ldaxr(v117);
                while (__stlxr(v118 - 1, v117));
                if (!v118)
                {
                  ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                  std::__shared_weak_count::__release_weak(v116);
                }
              }
              if (v440.__r_.__value_.__l.__size_)
              {
                v119 = (unint64_t *)(v440.__r_.__value_.__l.__size_ + 8);
                do
                  v120 = __ldaxr(v119);
                while (__stlxr(v120 - 1, v119));
                if (!v120)
                {
                  (*(void (**)(std::string::size_type))(*(_QWORD *)v440.__r_.__value_.__l.__size_ + 16))(v440.__r_.__value_.__l.__size_);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v440.__r_.__value_.__l.__size_);
                }
              }
              v121 = v480;
              if (v480)
              {
                v122 = (unint64_t *)&v480->__shared_owners_;
                do
                  v123 = __ldaxr(v122);
                while (__stlxr(v123 - 1, v122));
                if (!v123)
                {
                  ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                  std::__shared_weak_count::__release_weak(v121);
                }
              }
            }
          }
          kdebug_trace();
        }
        if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v441.__r_.__value_.__l.__data_);
      }
    }
    v52 = 1;
  }
  while ((v53 & 1) == 0);
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_2245B8D50;
  strcpy((char *)__p[0], "ComputeRoomBoundaries-Step2");
  sub_223AD5BA8(a1, (uint64_t)__p, 0, 0);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  sub_223ADB5D4((uint64_t)a1);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v124 = sub_2241471F8();
    v125 = v124[2];
    if (!v125)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v125 = v124[2];
    }
    v126 = *(_QWORD *)(v125 + 64);
    v127 = (std::mutex *)(v126 + 32);
    std::mutex::lock((std::mutex *)(v126 + 32));
    v129 = *(_QWORD *)(v126 + 96);
    v128 = *(_QWORD *)(v126 + 104);
    std::mutex::unlock(v127);
    if (v129 != v128)
    {
      sub_22456D250("ObservationMapping.Res.Cluster.AreasFiltered-%i", (std::string *)v459, a2);
      __p[0] = "cv3d.recon.";
      __p[1] = (void *)11;
      v130 = (void *)v459[23];
      if (v459[23] >= 0)
        v131 = v459;
      else
        v131 = *(_BYTE **)v459;
      if (v459[23] < 0)
        v130 = *(void **)&v459[8];
      __p[2] = v131;
      __p[3] = v130;
      sub_2231A9820((uint64_t)__p, (uint64_t)v482, 0, 0, &v441);
      if ((v459[23] & 0x80000000) != 0)
        operator delete(*(void **)v459);
      sub_2241471F8();
      v132 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v132 + 24))(v132))
      {
        memset(v459, 0, sizeof(v459));
        v460[0] = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v132 + 24))(v132))
        {
          *(_QWORD *)&v477 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v477 + 1) = 2;
          v133 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v132 + 24))(v132))
          {
            sub_223AE3EB4((uint64_t)a1, *(float *)(a3 + 8), 0, (uint64_t)__p);
            LOBYTE(v444) = 0;
            LOBYTE(v446) = 0;
            sub_22329F414((uint64_t)__p, (__int128 *)&v444, &v477, &rep);
            if ((_BYTE)v446 && SHIBYTE(v445) < 0)
              operator delete(v444);
            sub_22316F8F4((uint64_t *)__p);
            v134 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v132 + 56))(v132);
            v136 = *(void **)v134;
            v135 = *(unint64_t **)(v134 + 8);
            v440.__r_.__value_.__r.__words[0] = *(_QWORD *)v134;
            v440.__r_.__value_.__l.__size_ = (std::string::size_type)v135;
            if (v135)
            {
              v137 = v135 + 1;
              do
                v138 = __ldxr(v137);
              while (__stxr(v138 + 1, v137));
            }
            v139 = v479;
            v140 = v480;
            v474 = &off_24EC6A3B8;
            v475 = v479;
            v476 = v480;
            v480 = 0;
            v479 = 0;
            __p[0] = v136;
            __p[1] = v135;
            if (v135)
            {
              v141 = v135 + 1;
              do
                v142 = __ldxr(v141);
              while (__stxr(v142 + 1, v141));
            }
            __p[2] = &off_24EC6A3B8;
            __p[3] = v139;
            v482[0] = v140;
            if (v140)
            {
              v143 = (unint64_t *)&v140->__shared_owners_;
              do
                v144 = __ldxr(v143);
              while (__stxr(v144 + 1, v143));
            }
            (*(void (**)(uint64_t *, void **))(*v133 + 16))(v133, __p);
            v145 = (std::__shared_weak_count *)v482[0];
            if (v482[0])
            {
              v146 = (unint64_t *)(v482[0] + 8);
              do
                v147 = __ldaxr(v146);
              while (__stlxr(v147 - 1, v146));
              if (!v147)
              {
                ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                std::__shared_weak_count::__release_weak(v145);
              }
            }
            v148 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v149 = (unint64_t *)((char *)__p[1] + 8);
              do
                v150 = __ldaxr(v149);
              while (__stlxr(v150 - 1, v149));
              if (!v150)
              {
                ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                std::__shared_weak_count::__release_weak(v148);
              }
            }
            v151 = v476;
            if (v476)
            {
              v152 = (unint64_t *)&v476->__shared_owners_;
              do
                v153 = __ldaxr(v152);
              while (__stlxr(v153 - 1, v152));
              if (!v153)
              {
                ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                std::__shared_weak_count::__release_weak(v151);
              }
            }
            if (v440.__r_.__value_.__l.__size_)
            {
              v154 = (unint64_t *)(v440.__r_.__value_.__l.__size_ + 8);
              do
                v155 = __ldaxr(v154);
              while (__stlxr(v155 - 1, v154));
              if (!v155)
              {
                (*(void (**)(std::string::size_type))(*(_QWORD *)v440.__r_.__value_.__l.__size_ + 16))(v440.__r_.__value_.__l.__size_);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v440.__r_.__value_.__l.__size_);
              }
            }
            v156 = v480;
            if (v480)
            {
              v157 = (unint64_t *)&v480->__shared_owners_;
              do
                v158 = __ldaxr(v157);
              while (__stlxr(v158 - 1, v157));
              if (!v158)
              {
                ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                std::__shared_weak_count::__release_weak(v156);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v441.__r_.__value_.__l.__data_);
    }
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_2245B8D50;
  strcpy((char *)__p[0], "ComputeRoomBoundaries-Step3");
  sub_223AD5BA8(a1, (uint64_t)__p, 0, 0);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  memset(&v441, 0, 17);
  v441.__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::steady_clock::now().__d_.__rep_;
  v441.__r_.__value_.__s.__data_[16] = 1;
  kdebug_trace();
  sub_223ADC204((uint64_t)a1);
  v159 = a1[22];
  if (v159)
  {
    v160 = 0x1Eu / (a1->i32[1] * a1->i32[1]);
    do
    {
      if (*(_BYTE *)(*(_QWORD *)&v159 + 24)
        && !*(_DWORD *)(*(_QWORD *)&v159 + 300)
        && *(_DWORD *)(*(_QWORD *)&v159 + 44) < v160)
      {
        *(_BYTE *)(*(_QWORD *)&v159 + 24) = 0;
      }
      v159 = **(int8x8_t **)&v159;
    }
    while (v159);
  }
  kdebug_trace();
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "MergeAreas");
  v459[23] = 17;
  strcpy(v459, "KeyframeOccupancy");
  sub_22391CC34((uint64_t *)__p, (uint64_t *)v459, (uint64_t)&v441);
  if ((v459[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v459);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_235;
LABEL_434:
    operator delete(__p[0]);
    goto LABEL_235;
  }
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_434;
LABEL_235:
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_2245B8D50;
  strcpy((char *)__p[0], "ComputeRoomBoundaries-Step4");
  sub_223AD5BA8(a1, (uint64_t)__p, 0, 0);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  kdebug_trace();
  sub_223AE1438((uint64_t)a1, a2, *(_DWORD *)(a3 + 8), *(_DWORD *)(a3 + 12));
  sub_223AE2AC4(a1);
  kdebug_trace();
  sub_223B646DC((uint64_t)a1, a5, a6, a8, a10, a11, a12);
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_2245B8D50;
  strcpy((char *)__p[0], "ComputeRoomBoundaries-After");
  v161 = a1;
  sub_223AD5BA8(a1, (uint64_t)__p, 0, 1);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v479 = 0;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  LOBYTE(v480) = 1;
  kdebug_trace();
  v163 = a1[41];
  for (i = (uint64_t)a1[42]; i != *(_QWORD *)&v163; i = sub_22388925C(i - 464))
    ;
  a1[42] = v163;
  LODWORD(v477) = 0;
  LODWORD(v442) = 0;
  v443 = 0;
  v164 = a1[22];
  if (!*(_QWORD *)&v164)
  {
    v428 = -1;
    v429 = 0;
    v170 = 0.0;
    v168 = 1.1755e-38;
    v169 = 3.4028e38;
    v270 = 0.0;
    v269 = 1.1755e-38;
    v271 = 1.1755e-38;
    goto LABEL_436;
  }
  v429 = 0;
  v165 = *(float *)a1[19].i32;
  v166 = v165 * (float)*(int *)(a3 + 12);
  v167 = v165 * (float)(*(_DWORD *)(a3 + 8) + 1);
  v168 = 1.1755e-38;
  v169 = 3.4028e38;
  v170 = 0.0;
  v426 = 0.0;
  v427 = 1.1755e-38;
  *(float *)&v425 = 1.1755e-38;
  v428 = -1;
  while (2)
  {
    if (!*(_BYTE *)(*(_QWORD *)&v164 + 24))
      goto LABEL_244;
    LODWORD(v444) = 0;
    sub_223ACB9B0(*(_QWORD *)&v164 + 416, (uint64_t)__p);
    v172 = sub_223ACBC74(v171, __p, (float *)v459, (float *)&v444);
    v173 = (void **)(*(_QWORD *)&v164 + 244);
    if (v172)
      v173 = &v444;
    v174 = *(float *)v173;
    *(_DWORD *)v459 = 0;
    sub_223ACB9B0(*(_QWORD *)&v164 + 376, (uint64_t)__p);
    v176 = sub_223ACBC74(v175, __p, (float *)v459, (float *)&v444);
    v177 = (float *)(*(_QWORD *)&v164 + 240);
    if (v176)
      v177 = (float *)v459;
    v178 = *v177;
    memset(v482, 0, sizeof(v482));
    memset(__p, 0, sizeof(__p));
    *(_OWORD *)&v483[8] = xmmword_224656660;
    *(_OWORD *)&v483[24] = xmmword_224660CB0;
    *(_QWORD *)v483 = 0;
    *(_QWORD *)v484 = 0x3F80000000000005;
    *(_DWORD *)&v484[16] = 0;
    v485 = 0x3F800000uLL;
    *(_QWORD *)&v484[8] = 0;
    v486 = 1065353216;
    v487 = 0u;
    memset(v488, 0, sizeof(v488));
    memset(v489, 0, sizeof(v489));
    memset(v490, 0, sizeof(v490));
    v491[0] = xmmword_224656660;
    v491[1] = xmmword_224660CB0;
    *(_QWORD *)v492 = 0x3F80000000000005;
    *(_DWORD *)&v492[16] = 0;
    v493 = 0x3F800000uLL;
    *(_QWORD *)&v492[8] = 0;
    v494 = 1065353216;
    memset(v495, 0, sizeof(v495));
    v496 = 0u;
    v497 = 0u;
    v498 = 1065353216;
    v499 = 0;
    v500 = 0;
    v502 = 0;
    memset(v459, 0, sizeof(v459));
    v460[0] = 1065353216;
    v179 = *(_QWORD **)(*(_QWORD *)&v164 + 264);
    if (!v179)
      goto LABEL_243;
    do
    {
      for (j = (_QWORD *)v179[6]; j; j = (_QWORD *)*j)
      {
        v181 = *(int32x2_t *)((char *)j + 20);
        v444 = j + 2;
        v182 = sub_223AEF740((uint64_t)v459, (unsigned __int16 *)j + 8, (uint64_t)&unk_2245BA939, (_WORD **)&v444);
        *(uint64_t **)((char *)v182 + 20) = (uint64_t *)vadd_s32(*(int32x2_t *)((char *)v182 + 20), v181);
      }
      v179 = (_QWORD *)*v179;
    }
    while (v179);
    v183 = *(uint64_t **)&v459[16];
    if (!*(_QWORD *)&v459[16])
    {
      v184 = 0;
      v211 = *(void **)v459;
      *(_QWORD *)v459 = 0;
      if (v211)
        goto LABEL_313;
      goto LABEL_314;
    }
    v184 = 0;
    do
    {
      v185 = *((unsigned __int16 *)v183 + 8);
      v186 = a9[13];
      if (v185 >= (a9[14] - v186) >> 4)
      {
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 128, (uint64_t)"index < keyframe_uuids_.size() && \"No UUID for keyframe index\"", 62, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C);
        v187 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v187 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v188 = qword_255795648;
          for (k = qword_255795650; v188 != k; v188 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v188)(*(_QWORD *)(v188 + 8), "index < keyframe_uuids_.size() && \"No UUID for keyframe index\"", 62, &unk_2245A1559, 0);
        }
        v190 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v190 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        v161 = a1;
        if (!byte_255795670)
          goto LABEL_687;
        qword_255795660(*(_QWORD *)algn_255795668, "index < keyframe_uuids_.size() && \"No UUID for keyframe index\"", 62, &unk_2245A1559, 0);
        v186 = a9[13];
      }
      v191 = v186 + 16 * v185;
      v192 = sub_22456636C((unsigned __int8 *)v191);
      v196 = (int8x8_t)a9[9];
      if (!*(_QWORD *)&v196)
        goto LABEL_686;
      v197 = (float32x2_t)vcnt_s8(v196);
      v197.i16[0] = vaddlv_u8((uint8x8_t)v197);
      if (v197.u32[0] > 1uLL)
      {
        v198 = v192;
        if (v192 >= *(_QWORD *)&v196)
          v198 = v192 % *(_QWORD *)&v196;
      }
      else
      {
        v198 = (*(_QWORD *)&v196 - 1) & v192;
      }
      v199 = *(float32x2_t ***)(a9[8] + 8 * v198);
      if (!v199 || (v200 = *v199) == 0)
      {
LABEL_686:
        sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 2730, (uint64_t)"kf_info_opt.has_value() && \"Keyframe pose not found\"", 52, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C);
LABEL_687:
        abort();
      }
      if (v197.u32[0] < 2uLL)
      {
        v201 = *(_QWORD *)&v196 - 1;
        while (1)
        {
          v204 = v200[1];
          if (v192 == *(_QWORD *)&v204)
          {
            if (*(_QWORD *)&v200[2] == *(_QWORD *)v191 && *(_QWORD *)&v200[3] == *(_QWORD *)(v191 + 8))
              goto LABEL_295;
          }
          else if ((*(_QWORD *)&v204 & v201) != v198)
          {
            goto LABEL_686;
          }
          v200 = (float32x2_t *)*v200;
          if (!v200)
            goto LABEL_686;
        }
      }
      while (1)
      {
        v202 = v200[1];
        if (v192 == *(_QWORD *)&v202)
          break;
        if (*(_QWORD *)&v202 >= *(_QWORD *)&v196)
          *(_QWORD *)&v202 %= *(_QWORD *)&v196;
        if (*(_QWORD *)&v202 != v198)
          goto LABEL_686;
LABEL_277:
        v200 = (float32x2_t *)*v200;
        if (!v200)
          goto LABEL_686;
      }
      if (*(_QWORD *)&v200[2] != *(_QWORD *)v191 || *(_QWORD *)&v200[3] != *(_QWORD *)(v191 + 8))
        goto LABEL_277;
LABEL_295:
      v193.i32[0] = v200[13].i32[0];
      v197.i32[0] = v161[15].i32[1];
      v194.i32[0] = v161[17].i32[0];
      v195.i32[0] = v161[18].i32[1];
      v197.f32[0] = vmla_f32(vmla_lane_f32(vmul_f32(v197, v200[12]), v194, v200[12], 1), v193, v195).f32[0];
      if (v197.f32[0] < v166 && v197.f32[0] > v167)
      {
        v207 = *(float *)v161[19].i32 * 0.4;
        if (v174 < (float)(v197.f32[0] + v207))
          v174 = v197.f32[0] + v207;
        v208 = v197.f32[0] - v207;
        if (v208 < v178)
          v178 = v208;
      }
      v444 = (void *)v191;
      sub_223AEF408((uint64_t)&v496, v191, (uint64_t)&unk_2245BA939, (_OWORD **)&v444)[4] = *(uint64_t *)((char *)v183 + 20);
      v184 += *((_DWORD *)v183 + 6);
      v183 = (uint64_t *)*v183;
    }
    while (v183);
    v209 = *(_QWORD **)&v459[16];
    if (*(_QWORD *)&v459[16])
    {
      do
      {
        v210 = (_QWORD *)*v209;
        operator delete(v209);
        v209 = v210;
      }
      while (v210);
      v161 = a1;
    }
    v211 = *(void **)v459;
    *(_QWORD *)v459 = 0;
    if (v211)
LABEL_313:
      operator delete(v211);
LABEL_314:
    if (v184)
    {
      v212 = v174 - v178;
      if ((float)(v174 - v178) < v169)
        v169 = v174 - v178;
      if (v168 < v212)
        v168 = v174 - v178;
      sub_223EB22AC((uint64_t)&v444, *(_QWORD *)&v164 + 48, v161->i32[0], v178, v212);
      LODWORD(v474) = 0;
      LODWORD(v440.__r_.__value_.__l.__data_) = 0;
      sub_223ACB9B0(*(_QWORD *)&v164 + 376, (uint64_t)v459);
      v214 = sub_223ACBC74(v213, v459, (float *)&v474, (float *)&v440);
      v221.i32[0] = 1.0;
      if ((float)(*(float *)&v440.__r_.__value_.__l.__data_ - *(float *)&v474) > 1.0)
        v222 = v214;
      else
        v222 = 0;
      v502 = v222;
      if (*(_BYTE *)(*(_QWORD *)&v164 + 464))
      {
        v501 = 1;
        v223 = (__int128 *)&v443;
        goto LABEL_335;
      }
      *(float *)v215.i32 = *(float *)&v440.__r_.__value_.__l.__data_ - *(float *)&v474;
      v224 = sub_223B7FA80(a4, (uint64_t)&v444, v215, v221, v216, v217, v218, v219, v220);
      v501 = v224;
      if (v224)
      {
        if (v224 == 2)
          goto LABEL_328;
LABEL_334:
        v223 = &v477;
      }
      else
      {
        v225 = *(_DWORD *)(*(_QWORD *)&v164 + 460);
        v226 = *(_DWORD *)(*(_QWORD *)&v164 + 456);
        if (v225 == v226)
          goto LABEL_334;
        v227 = v225 <= v226 ? 1 : 2;
        v501 = v227;
        if (v227 != 2)
          goto LABEL_334;
LABEL_328:
        v223 = &v442;
      }
LABEL_335:
      ++*(_DWORD *)v223;
      sub_2233320C8(__p, (char *)v444, (char *)v445, (uint64_t)(v445 - (_QWORD)v444) >> 3);
      sub_22362017C((uint64_t)&__p[3], (char **)v446, *((uint64_t *)&v446 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v446 + 1) - v446) >> 3));
      sub_223B26850((char **)&v482[2], (uint64_t *)v448, *(uint64_t **)v449, (uint64_t)(*(_QWORD *)v449 - (_QWORD)v448) >> 5);
      *(_QWORD *)&v483[8] = v450;
      *(_DWORD *)&v483[16] = v451;
      *(_QWORD *)&v483[20] = v452;
      *(_DWORD *)&v483[28] = v453;
      *(_QWORD *)&v483[32] = v454;
      *(_DWORD *)v484 = v455;
      *(_OWORD *)&v484[4] = v456;
      v485 = v457;
      v486 = v458;
      sub_223EB2DE0((uint64_t)v459, (uint64_t)&v444);
      v228 = v487;
      if ((_QWORD)v487)
      {
        v229 = *((_QWORD *)&v487 + 1);
        v230 = (void *)v487;
        if (*((_QWORD *)&v487 + 1) != (_QWORD)v487)
        {
          v231 = *((_QWORD *)&v487 + 1);
          do
          {
            v233 = *(void **)(v231 - 24);
            v231 -= 24;
            v232 = v233;
            if (v233)
            {
              *(_QWORD *)(v229 - 16) = v232;
              operator delete(v232);
            }
            v229 = v231;
          }
          while (v231 != v228);
          v230 = (void *)v487;
          v161 = a1;
        }
        *((_QWORD *)&v487 + 1) = v228;
        operator delete(v230);
      }
      v487 = *(_OWORD *)v459;
      v488[0] = *(_QWORD *)&v459[16];
      if (&v488[1] != (_QWORD *)(*(_QWORD *)&v164 + 96))
        sub_22342D7E8(&v488[1], *(char **)(*(_QWORD *)&v164 + 96), *(char **)(*(_QWORD *)&v164 + 104), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v164 + 104) - *(_QWORD *)(*(_QWORD *)&v164 + 96)) >> 2);
      if (v489 != (uint64_t *)(*(_QWORD *)&v164 + 120))
        sub_22342D7E8(v489, *(char **)(*(_QWORD *)&v164 + 120), *(char **)(*(_QWORD *)&v164 + 128), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v164 + 128) - *(_QWORD *)(*(_QWORD *)&v164 + 120)) >> 2);
      sub_223EB22AC((uint64_t)v459, *(_QWORD *)&v164 + 144, v161->i32[0], *(float *)&v454, *((float *)&v454 + 1));
      sub_2233320C8(&v489[3], *(char **)v459, *(char **)&v459[8], (uint64_t)(*(_QWORD *)&v459[8] - *(_QWORD *)v459) >> 3);
      sub_22362017C((uint64_t)v490, *(char ***)&v459[24], *(uint64_t *)v460, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v460 - *(_QWORD *)&v459[24]) >> 3));
      sub_223B26850((char **)&v490[1] + 1, (uint64_t *)v462, *(uint64_t **)v463, (uint64_t)(*(_QWORD *)v463 - (_QWORD)v462) >> 5);
      *(_QWORD *)&v491[0] = v465;
      DWORD2(v491[0]) = v466;
      *(_QWORD *)((char *)v491 + 12) = v467;
      DWORD1(v491[1]) = v468;
      *((_QWORD *)&v491[1] + 1) = v469;
      *(_DWORD *)v492 = v470;
      v494 = v473;
      *(_OWORD *)&v492[4] = v471;
      v493 = v472;
      if (v495 != (_QWORD *)(*(_QWORD *)&v164 + 192))
        sub_22342D7E8(v495, *(char **)(*(_QWORD *)&v164 + 192), *(char **)(*(_QWORD *)&v164 + 200), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v164 + 200) - *(_QWORD *)(*(_QWORD *)&v164 + 192)) >> 2);
      if (&v495[3] != (_QWORD *)(*(_QWORD *)&v164 + 216))
        sub_22342D7E8(&v495[3], *(char **)(*(_QWORD *)&v164 + 216), *(char **)(*(_QWORD *)&v164 + 224), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v164 + 224) - *(_QWORD *)(*(_QWORD *)&v164 + 216)) >> 2);
      v499 = *(_DWORD *)(*(_QWORD *)&v164 + 300);
      v500 = *(_QWORD *)(*(_QWORD *)&v164 + 368);
      v234 = (__int128 *)v497;
      if (!(_QWORD)v497)
      {
LABEL_384:
        v245 = sub_223B7EE5C((uint64_t *)__p);
        if (v170 < v245)
          v170 = v245;
        v246 = sub_223B7EE5C(&v489[3]);
        v247 = v426;
        v248.i64[0] = *(_QWORD *)&v483[20];
        v248.i32[2] = *(_DWORD *)&v483[28];
        v249.i64[0] = *(_QWORD *)&v483[8];
        v249.i32[2] = *(_DWORD *)&v483[16];
        if (v426 < v246)
          v247 = v246;
        v426 = v247;
        v250 = vsubq_f32(v248, v249);
        if (v250.f32[0] < v250.f32[1])
          v250.f32[0] = v250.f32[1];
        if (v250.f32[0] < v250.f32[2])
          v250.f32[0] = v250.f32[2];
        v251 = v427;
        if (v427 < v250.f32[0])
          v251 = v250.f32[0];
        v248.i32[2] = DWORD1(v491[1]);
        v249.i32[2] = DWORD2(v491[0]);
        v248.i64[0] = *(_QWORD *)((char *)v491 + 12);
        v249.i64[0] = *(_QWORD *)&v491[0];
        v252 = vsubq_f32(v248, v249);
        if (v252.f32[0] < v252.f32[1])
          v252.f32[0] = v252.f32[1];
        if (v252.f32[0] < v252.f32[2])
          v252.f32[0] = v252.f32[2];
        v427 = v251;
        if (v251 >= v252.f32[0])
          v252.f32[0] = v251;
        v425 = v252.i32[0];
        if (*((_QWORD *)&v497 + 1) >= v428)
          v253 = v428;
        else
          v253 = *((_QWORD *)&v497 + 1);
        v254 = v429;
        if (v429 <= *((_QWORD *)&v497 + 1))
          v254 = *((_QWORD *)&v497 + 1);
        v428 = v253;
        v429 = v254;
        v255 = v161[42];
        if (*(_QWORD *)&v255 >= *(_QWORD *)&v161[43])
        {
          v256 = sub_223B2455C((uint64_t *)&a1[41], (uint64_t *)__p);
        }
        else
        {
          sub_223B246DC(*(_QWORD **)&v161[42], (uint64_t *)__p);
          v256 = (char *)(*(_QWORD *)&v255 + 464);
          v161[42] = (int8x8_t)(*(_QWORD *)&v255 + 464);
        }
        v161[42] = (int8x8_t)v256;
        if (v462)
        {
          *(_QWORD *)v463 = v462;
          operator delete(v462);
        }
        v257 = *(_QWORD *)&v459[24];
        if (*(_QWORD *)&v459[24])
        {
          v258 = *(_QWORD *)v460;
          v259 = *(void **)&v459[24];
          if (*(_QWORD *)v460 != *(_QWORD *)&v459[24])
          {
            v260 = *(_QWORD *)v460;
            do
            {
              v262 = *(void **)(v260 - 24);
              v260 -= 24;
              v261 = v262;
              if (v262)
              {
                *(_QWORD *)(v258 - 16) = v261;
                operator delete(v261);
              }
              v258 = v260;
            }
            while (v260 != v257);
            v259 = *(void **)&v459[24];
            v161 = a1;
          }
          *(_QWORD *)v460 = v257;
          operator delete(v259);
        }
        if (*(_QWORD *)v459)
        {
          *(_QWORD *)&v459[8] = *(_QWORD *)v459;
          operator delete(*(void **)v459);
        }
        if (v448)
        {
          *(_QWORD *)v449 = v448;
          operator delete(v448);
        }
        v263 = v446;
        if ((_QWORD)v446)
        {
          v264 = *((_QWORD *)&v446 + 1);
          v265 = (void *)v446;
          if (*((_QWORD *)&v446 + 1) != (_QWORD)v446)
          {
            v266 = *((_QWORD *)&v446 + 1);
            do
            {
              v268 = *(void **)(v266 - 24);
              v266 -= 24;
              v267 = v268;
              if (v268)
              {
                *(_QWORD *)(v264 - 16) = v267;
                operator delete(v267);
              }
              v264 = v266;
            }
            while (v266 != v263);
            v265 = (void *)v446;
            v161 = a1;
          }
          *((_QWORD *)&v446 + 1) = v263;
          operator delete(v265);
        }
        if (v444)
        {
          *(_QWORD *)&v445 = v444;
          operator delete(v444);
        }
        goto LABEL_243;
      }
      while (2)
      {
        while (*((_DWORD *)v234 + 9) || !*((_DWORD *)v234 + 8))
        {
          v234 = *(__int128 **)v234;
          if (!v234)
            goto LABEL_384;
        }
        v235 = *((_QWORD *)&v496 + 1);
        v236 = *((_QWORD *)v234 + 1);
        v237 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v496 + 8));
        v237.i16[0] = vaddlv_u8(v237);
        if (v237.u32[0] > 1uLL)
        {
          if (v236 >= *((_QWORD *)&v496 + 1))
            v236 %= *((_QWORD *)&v496 + 1);
        }
        else
        {
          v236 &= *((_QWORD *)&v496 + 1) - 1;
        }
        v238 = *(__int128 **)v234;
        v239 = *(__int128 **)(v496 + 8 * v236);
        do
        {
          v240 = v239;
          v239 = *(__int128 **)v239;
        }
        while (v239 != v234);
        if (v240 == &v497)
          goto LABEL_703;
        v241 = *((_QWORD *)v240 + 1);
        if (v237.u32[0] > 1uLL)
        {
          if (v241 >= *((_QWORD *)&v496 + 1))
            v241 %= *((_QWORD *)&v496 + 1);
        }
        else
        {
          v241 &= *((_QWORD *)&v496 + 1) - 1;
        }
        v242 = *(__int128 **)v234;
        if (v241 == v236)
        {
LABEL_375:
          if (v242)
          {
            v243 = *((_QWORD *)v242 + 1);
            goto LABEL_377;
          }
        }
        else
        {
LABEL_703:
          if (!v238)
            goto LABEL_374;
          v243 = *((_QWORD *)v238 + 1);
          if (v237.u32[0] > 1uLL)
          {
            v244 = *((_QWORD *)v238 + 1);
            if (v243 >= *((_QWORD *)&v496 + 1))
              v244 = v243 % *((_QWORD *)&v496 + 1);
          }
          else
          {
            v244 = v243 & (*((_QWORD *)&v496 + 1) - 1);
          }
          v242 = *(__int128 **)v234;
          if (v244 != v236)
          {
LABEL_374:
            *(_QWORD *)(v496 + 8 * v236) = 0;
            v242 = *(__int128 **)v234;
            goto LABEL_375;
          }
LABEL_377:
          if (v237.u32[0] > 1uLL)
          {
            if (v243 >= v235)
              v243 %= v235;
          }
          else
          {
            v243 &= v235 - 1;
          }
          if (v243 != v236)
          {
            *(_QWORD *)(v496 + 8 * v243) = v240;
            v242 = *(__int128 **)v234;
          }
        }
        *(_QWORD *)v240 = v242;
        *(_QWORD *)v234 = 0;
        --*((_QWORD *)&v497 + 1);
        operator delete(v234);
        v234 = v238;
        if (!v238)
          goto LABEL_384;
        continue;
      }
    }
LABEL_243:
    sub_22388925C((uint64_t)__p);
LABEL_244:
    v164 = **(int8x8_t **)&v164;
    if (v164)
      continue;
    break;
  }
  v269 = v427;
  v270 = v426;
  v271 = *(float *)&v425;
LABEL_436:
  kdebug_trace();
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "ComputeOutputAreas");
  v459[23] = 17;
  strcpy(v459, "KeyframeOccupancy");
  sub_22391CC34((uint64_t *)__p, (uint64_t *)v459, (uint64_t)&rep);
  if ((v459[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v459);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_438;
LABEL_475:
    operator delete(__p[0]);
    goto LABEL_438;
  }
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_475;
LABEL_438:
  sub_223AF24D8(&v440);
  v272 = a1;
  if (**(int **)(v440.__r_.__value_.__r.__words[0] + 56) > 3)
    goto LABEL_566;
  v273 = *(unsigned __int8 *)(v440.__r_.__value_.__r.__words[0] + 72);
  v274 = sub_22322F254((uint64_t)v440.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0);
  v275 = v274;
  if (!v273 && !v274)
    goto LABEL_566;
  v435 = v273;
  *(_QWORD *)v459 = &v440;
  *(std::chrono::steady_clock::time_point *)&v459[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v459[16] = std::chrono::system_clock::now();
  *(_DWORD *)&v459[24] = 3;
  *(_QWORD *)v460 = "unknown file";
  v461 = 675;
  v464 = 0;
  v462 = "unknown function";
  *(_QWORD *)v463 = 0;
  v276 = v169 * 100.0;
  if ((float)(v169 * 100.0) > 1073700000.0)
    v276 = 1073700000.0;
  if (v276 >= -1073700000.0)
    v277 = v276;
  else
    v277 = -1073700000.0;
  v278 = v168 * 100.0;
  if ((float)(v168 * 100.0) > 1073700000.0)
    v278 = 1073700000.0;
  if (v278 >= -1073700000.0)
    v279 = v278;
  else
    v279 = -1073700000.0;
  v280 = v170 * 100.0;
  if ((float)(v170 * 100.0) > 1073700000.0)
    v280 = 1073700000.0;
  if (v280 >= -1073700000.0)
    v281 = v280;
  else
    v281 = -1073700000.0;
  v282 = v270 * 100.0;
  if ((float)(v270 * 100.0) > 1073700000.0)
    v282 = 1073700000.0;
  if (v282 >= -1073700000.0)
    v283 = v282;
  else
    v283 = -1073700000.0;
  v284 = v269 * 100.0;
  if ((float)(v269 * 100.0) > 1073700000.0)
    v284 = 1073700000.0;
  if (v284 >= -1073700000.0)
    v285 = v284;
  else
    v285 = -1073700000.0;
  v286 = v271 * 100.0;
  if ((float)(v271 * 100.0) > 1073700000.0)
    v286 = 1073700000.0;
  if (v286 >= -1073700000.0)
    v287 = v286;
  else
    v287 = -1073700000.0;
  v288 = **(_QWORD **)v459;
  v289 = (const char *)(**(_QWORD **)v459 + 16);
  v433 = v289;
  if (*(char *)(**(_QWORD **)v459 + 39) < 0)
  {
    v289 = *(const char **)(v288 + 16);
    v290 = *(_QWORD *)(v288 + 24);
    v291 = a1[42];
    v438 = a1[41];
    v293 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v293 & 1) == 0)
    {
LABEL_690:
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)__p);
        sub_223199C58("com.apple.cv3d", (unint64_t)__p, byte_255788F40);
        if (LOBYTE(__p[3]) && SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
        v272 = a1;
      }
    }
  }
  else
  {
    v290 = *(unsigned __int8 *)(**(_QWORD **)v459 + 39);
    v291 = a1[42];
    v438 = a1[41];
    v292 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v292 & 1) == 0)
      goto LABEL_690;
  }
  if (byte_255788F40[23] >= 0)
    v294 = byte_255788F40;
  else
    v294 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v295 = byte_255788F40[23];
  else
    v295 = *(_QWORD *)&byte_255788F40[8];
  __p[0] = os_log_create(v294, v289);
  v296 = &__p[1];
  if (v295 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v295 >= 0x17)
  {
    v297 = v289;
    v298 = v275;
    v299 = v288;
    v300 = v291;
    v301 = (v295 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v295 | 7) != 0x17)
      v301 = v295 | 7;
    v302 = v301 + 1;
    v296 = (void **)operator new(v301 + 1);
    __p[3] = (void *)(v302 | 0x8000000000000000);
    __p[1] = v296;
    __p[2] = (void *)v295;
    v291 = v300;
    v288 = v299;
    v275 = v298;
    v289 = v297;
    goto LABEL_490;
  }
  HIBYTE(__p[3]) = v295;
  if (v295)
LABEL_490:
    memmove(v296, v294, v295);
  *((_BYTE *)v296 + v295) = 0;
  LOBYTE(v482[0]) = 1;
  v303 = &v482[1];
  if (v290 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v290 >= 0x17)
  {
    v305 = (v290 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v290 | 7) != 0x17)
      v305 = v290 | 7;
    v306 = v305 + 1;
    v303 = operator new(v305 + 1);
    v482[3] = v306 | 0x8000000000000000;
    v482[1] = v303;
    v482[2] = v290;
  }
  else
  {
    HIBYTE(v482[3]) = v290;
    if (!v290)
    {
      LOBYTE(v482[1]) = 0;
      v483[0] = 1;
      v304 = __p[0];
      if ((SHIBYTE(v482[3]) & 0x80000000) == 0)
        goto LABEL_495;
LABEL_501:
      operator delete((void *)v482[1]);
      if (LOBYTE(v482[0]))
        goto LABEL_502;
      goto LABEL_504;
    }
  }
  memmove(v303, v289, v290);
  *((_BYTE *)v303 + v290) = 0;
  v483[0] = 1;
  v304 = __p[0];
  if (SHIBYTE(v482[3]) < 0)
    goto LABEL_501;
LABEL_495:
  if (LOBYTE(v482[0]))
  {
LABEL_502:
    if (SHIBYTE(__p[3]) < 0)
      operator delete(__p[1]);
  }
LABEL_504:
  if (__p[0])
    os_release(__p[0]);
  v439 = 0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)&v291 - *(_QWORD *)&v438) >> 4);
  if (v275 && *(_QWORD *)(v275 + 24))
  {
    v307 = _os_log_pack_size();
    v308 = (std::__shared_weak_count_vtbl *)operator new(v307, (std::align_val_t)8uLL);
    v309 = (std::__shared_weak_count *)operator new();
    v310 = v309;
    v309->__shared_owners_ = 0;
    v311 = (unint64_t *)&v309->__shared_owners_;
    v309->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v309->__shared_weak_owners_ = 0;
    v309[1].__vftable = v308;
    v444 = v308;
    *(_QWORD *)&v445 = v308;
    *((_QWORD *)&v445 + 1) = v309;
    do
      v312 = __ldxr(v311);
    while (__stxr(v312 + 1, v311));
    v446 = 0uLL;
    v447 = 0;
    do
      v313 = __ldaxr(v311);
    while (__stlxr(v313 - 1, v311));
    if (!v313)
    {
      ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
      std::__shared_weak_count::__release_weak(v310);
    }
    v314 = v444;
    v315 = _os_log_pack_fill();
    v316 = v477;
    v317 = v442;
    v318 = v443;
    *(_DWORD *)v315 = 134220801;
    *(_QWORD *)(v315 + 4) = v439;
    *(_WORD *)(v315 + 12) = 1024;
    *(_DWORD *)(v315 + 14) = v316;
    *(_WORD *)(v315 + 18) = 1024;
    *(_DWORD *)(v315 + 20) = v317;
    *(_WORD *)(v315 + 24) = 1024;
    *(_DWORD *)(v315 + 26) = v318;
    *(_WORD *)(v315 + 30) = 2048;
    *(_QWORD *)(v315 + 32) = v428;
    *(_WORD *)(v315 + 40) = 2048;
    *(_QWORD *)(v315 + 42) = v429;
    *(_WORD *)(v315 + 50) = 1025;
    *(_DWORD *)(v315 + 52) = (int)v277;
    *(_WORD *)(v315 + 56) = 1025;
    *(_DWORD *)(v315 + 58) = (int)v279;
    *(_WORD *)(v315 + 62) = 1025;
    *(_DWORD *)(v315 + 64) = (int)v281;
    *(_WORD *)(v315 + 68) = 1025;
    *(_DWORD *)(v315 + 70) = (int)v283;
    *(_WORD *)(v315 + 74) = 1025;
    *(_DWORD *)(v315 + 76) = (int)v285;
    *(_WORD *)(v315 + 80) = 1025;
    *(_DWORD *)(v315 + 82) = (int)v287;
    v319 = (char *)operator new();
    v320 = *(unsigned __int8 *)(v288 + 39);
    v321 = v433;
    if ((v320 & 0x80u) != 0)
    {
      v321 = *(const char **)(v288 + 16);
      v320 = *(_QWORD *)(v288 + 24);
    }
    *(_QWORD *)v319 = v314;
    *(_OWORD *)(v319 + 8) = v445;
    v445 = 0uLL;
    *(_OWORD *)(v319 + 24) = v446;
    v446 = 0uLL;
    *((_QWORD *)v319 + 5) = v321;
    *((_QWORD *)v319 + 6) = v320;
    v319[56] = 1;
    v474 = 0;
    __p[0] = v319;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v275 + 24) + 40))(*(_QWORD *)(v275 + 24), __p);
    v322 = __p[0];
    __p[0] = 0;
    if (v322)
    {
      v323 = (std::__shared_weak_count *)*((_QWORD *)v322 + 4);
      if (v323)
      {
        v324 = (unint64_t *)&v323->__shared_owners_;
        do
          v325 = __ldaxr(v324);
        while (__stlxr(v325 - 1, v324));
        if (!v325)
        {
          ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
          std::__shared_weak_count::__release_weak(v323);
        }
      }
      v326 = (std::__shared_weak_count *)*((_QWORD *)v322 + 2);
      if (v326)
      {
        v327 = (unint64_t *)&v326->__shared_owners_;
        do
          v328 = __ldaxr(v327);
        while (__stlxr(v328 - 1, v327));
        if (!v328)
        {
          ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
          std::__shared_weak_count::__release_weak(v326);
        }
      }
      MEMORY[0x227684CE8](v322, 0x10F0C40B62ED6C6);
      v329 = v474;
      v474 = 0;
      if (v329)
      {
        v330 = (std::__shared_weak_count *)v329[4];
        if (v330)
        {
          v331 = (unint64_t *)&v330->__shared_owners_;
          do
            v332 = __ldaxr(v331);
          while (__stlxr(v332 - 1, v331));
          if (!v332)
          {
            ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
            std::__shared_weak_count::__release_weak(v330);
          }
        }
        v333 = (std::__shared_weak_count *)v329[2];
        if (v333)
        {
          v334 = (unint64_t *)&v333->__shared_owners_;
          do
            v335 = __ldaxr(v334);
          while (__stlxr(v335 - 1, v334));
          if (!v335)
          {
            ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
            std::__shared_weak_count::__release_weak(v333);
          }
        }
        MEMORY[0x227684CE8](v329, 0x10F0C40B62ED6C6);
      }
    }
    if (v435)
    {
      LODWORD(__p[0]) = 134220801;
      *(void **)((char *)__p + 4) = (void *)v439;
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = v477;
      WORD1(__p[2]) = 1024;
      HIDWORD(__p[2]) = v442;
      LOWORD(__p[3]) = 1024;
      *(_DWORD *)((char *)&__p[3] + 2) = v443;
      HIWORD(__p[3]) = 2048;
      v482[0] = v428;
      LOWORD(v482[1]) = 2048;
      *(_QWORD *)((char *)&v482[1] + 2) = v429;
      WORD1(v482[2]) = 1025;
      HIDWORD(v482[2]) = (int)v277;
      LOWORD(v482[3]) = 1025;
      *(_DWORD *)((char *)&v482[3] + 2) = (int)v279;
      HIWORD(v482[3]) = 1025;
      *(_DWORD *)v483 = (int)v281;
      *(_WORD *)&v483[4] = 1025;
      *(_DWORD *)&v483[6] = (int)v283;
      *(_WORD *)&v483[10] = 1025;
      *(_DWORD *)&v483[12] = (int)v285;
      *(_WORD *)&v483[16] = 1025;
      *(_DWORD *)&v483[18] = (int)v287;
      LODWORD(v423) = 86;
      v422 = __p;
      v336 = (char *)_os_log_send_and_compose_impl();
      v337 = (std::__shared_weak_count *)*((_QWORD *)&v446 + 1);
      if (!*((_QWORD *)&v446 + 1))
        goto LABEL_551;
LABEL_547:
      v338 = (unint64_t *)&v337->__shared_owners_;
      do
        v339 = __ldaxr(v338);
      while (__stlxr(v339 - 1, v338));
      if (!v339)
      {
        ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
        std::__shared_weak_count::__release_weak(v337);
      }
    }
    else
    {
      v336 = 0;
      v337 = (std::__shared_weak_count *)*((_QWORD *)&v446 + 1);
      if (*((_QWORD *)&v446 + 1))
        goto LABEL_547;
    }
LABEL_551:
    v340 = (std::__shared_weak_count *)*((_QWORD *)&v445 + 1);
    if (*((_QWORD *)&v445 + 1))
    {
      v341 = (unint64_t *)(*((_QWORD *)&v445 + 1) + 8);
      do
        v342 = __ldaxr(v341);
      while (__stlxr(v342 - 1, v341));
      if (!v342)
      {
        ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
        std::__shared_weak_count::__release_weak(v340);
      }
    }
    if (v435)
    {
      sub_22322C138((uint64_t)v459, v336, v422, v423);
LABEL_558:
      sub_223182C08((uint64_t)v459);
    }
    if (v336)
      goto LABEL_560;
  }
  else
  {
    os_log_type_enabled(v304, OS_LOG_TYPE_INFO);
    if (v435)
    {
      LODWORD(__p[0]) = 134220801;
      *(void **)((char *)__p + 4) = (void *)v439;
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = v477;
      WORD1(__p[2]) = 1024;
      HIDWORD(__p[2]) = v442;
      LOWORD(__p[3]) = 1024;
      *(_DWORD *)((char *)&__p[3] + 2) = v443;
      HIWORD(__p[3]) = 2048;
      v482[0] = v428;
      LOWORD(v482[1]) = 2048;
      *(_QWORD *)((char *)&v482[1] + 2) = v429;
      WORD1(v482[2]) = 1025;
      HIDWORD(v482[2]) = (int)v277;
      LOWORD(v482[3]) = 1025;
      *(_DWORD *)((char *)&v482[3] + 2) = (int)v279;
      HIWORD(v482[3]) = 1025;
      *(_DWORD *)v483 = (int)v281;
      *(_WORD *)&v483[4] = 1025;
      *(_DWORD *)&v483[6] = (int)v283;
      *(_WORD *)&v483[10] = 1025;
      *(_DWORD *)&v483[12] = (int)v285;
      *(_WORD *)&v483[16] = 1025;
      *(_DWORD *)&v483[18] = (int)v287;
      LODWORD(v423) = 86;
      v336 = (char *)_os_log_send_and_compose_impl();
      v272 = a1;
      sub_22322C138((uint64_t)v459, v336, __p, v423);
      goto LABEL_558;
    }
    LODWORD(__p[0]) = 134220801;
    *(void **)((char *)__p + 4) = (void *)v439;
    WORD2(__p[1]) = 1024;
    *(_DWORD *)((char *)&__p[1] + 6) = v477;
    WORD1(__p[2]) = 1024;
    HIDWORD(__p[2]) = v442;
    LOWORD(__p[3]) = 1024;
    *(_DWORD *)((char *)&__p[3] + 2) = v443;
    HIWORD(__p[3]) = 2048;
    v482[0] = v428;
    LOWORD(v482[1]) = 2048;
    *(_QWORD *)((char *)&v482[1] + 2) = v429;
    WORD1(v482[2]) = 1025;
    HIDWORD(v482[2]) = (int)v277;
    LOWORD(v482[3]) = 1025;
    *(_DWORD *)((char *)&v482[3] + 2) = (int)v279;
    HIWORD(v482[3]) = 1025;
    *(_DWORD *)v483 = (int)v281;
    *(_WORD *)&v483[4] = 1025;
    *(_DWORD *)&v483[6] = (int)v283;
    *(_WORD *)&v483[10] = 1025;
    *(_DWORD *)&v483[12] = (int)v285;
    *(_WORD *)&v483[16] = 1025;
    *(_DWORD *)&v483[18] = (int)v287;
    v336 = (char *)_os_log_send_and_compose_impl();
    v272 = a1;
    if (v336)
LABEL_560:
      free(v336);
  }
  sub_223182C08((uint64_t)v459);
  v343 = v464;
  if (v464)
  {
    v344 = (unint64_t *)&v464->__shared_owners_;
    do
      v345 = __ldaxr(v344);
    while (__stlxr(v345 - 1, v344));
    if (!v345)
    {
      ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
      std::__shared_weak_count::__release_weak(v343);
    }
  }
LABEL_566:
  v346 = v272[22];
  if (v346)
  {
    v347 = v272 + 20;
    do
    {
      while (*(_DWORD *)(*(_QWORD *)&v346 + 44))
      {
        v346 = **(int8x8_t **)&v346;
        if (!*(_QWORD *)&v346)
          goto LABEL_575;
      }
      v348 = **(int8x8_t **)&v346;
      sub_2231AFBB8(v347, *(_QWORD **)&v346, (uint64_t)__p);
      v349 = __p[0];
      __p[0] = 0;
      if (v349)
      {
        if (LOBYTE(__p[2]))
          sub_22388AFA4(v349 + 3);
        operator delete(v349);
      }
      v346 = v348;
    }
    while (v348);
  }
LABEL_575:
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v350 = sub_2241471F8();
    v351 = v350[2];
    if (!v351)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v351 = v350[2];
    }
    v352 = *(_QWORD *)(v351 + 64);
    v353 = (std::mutex *)(v352 + 32);
    std::mutex::lock((std::mutex *)(v352 + 32));
    v355 = *(_QWORD *)(v352 + 96);
    v354 = *(_QWORD *)(v352 + 104);
    std::mutex::unlock(v353);
    if (v355 != v354)
    {
      sub_22456D250("ObservationMapping.Res.Cluster.KFDistribution-%i", (std::string *)v459, a2);
      __p[0] = "cv3d.recon.";
      __p[1] = (void *)11;
      v356 = (void *)v459[23];
      if (v459[23] >= 0)
        v357 = v459;
      else
        v357 = *(_BYTE **)v459;
      if (v459[23] < 0)
        v356 = *(void **)&v459[8];
      __p[2] = v357;
      __p[3] = v356;
      sub_2231A9820((uint64_t)__p, (uint64_t)v482, 0, 0, &v440);
      if ((v459[23] & 0x80000000) != 0)
        operator delete(*(void **)v459);
      sub_2241471F8();
      v358 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v358 + 24))(v358))
      {
        memset(v459, 0, sizeof(v459));
        v460[0] = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v358 + 24))(v358))
        {
          *(_QWORD *)&v442 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v442 + 1) = 2;
          v359 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v358 + 24))(v358))
          {
            sub_223AE438C((uint64_t)a1, (uint64_t)__p);
            LOBYTE(v444) = 0;
            LOBYTE(v446) = 0;
            sub_22329F414((uint64_t)__p, (__int128 *)&v444, &v442, &rep);
            if ((_BYTE)v446 && SHIBYTE(v445) < 0)
              operator delete(v444);
            sub_22316F8F4((uint64_t *)__p);
            v360 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v358 + 56))(v358);
            v362 = *(void **)v360;
            v361 = *(unint64_t **)(v360 + 8);
            *(_QWORD *)&v477 = *(_QWORD *)v360;
            *((_QWORD *)&v477 + 1) = v361;
            if (v361)
            {
              v363 = v361 + 1;
              do
                v364 = __ldxr(v363);
              while (__stxr(v364 + 1, v363));
            }
            v365 = v479;
            v366 = v480;
            v474 = &off_24EC6A3B8;
            v475 = v479;
            v476 = v480;
            v480 = 0;
            v479 = 0;
            __p[0] = v362;
            __p[1] = v361;
            if (v361)
            {
              v367 = v361 + 1;
              do
                v368 = __ldxr(v367);
              while (__stxr(v368 + 1, v367));
            }
            __p[2] = &off_24EC6A3B8;
            __p[3] = v365;
            v482[0] = v366;
            if (v366)
            {
              v369 = (unint64_t *)&v366->__shared_owners_;
              do
                v370 = __ldxr(v369);
              while (__stxr(v370 + 1, v369));
            }
            (*(void (**)(uint64_t *, void **))(*v359 + 16))(v359, __p);
            v371 = (std::__shared_weak_count *)v482[0];
            if (v482[0])
            {
              v372 = (unint64_t *)(v482[0] + 8);
              do
                v373 = __ldaxr(v372);
              while (__stlxr(v373 - 1, v372));
              if (!v373)
              {
                ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
                std::__shared_weak_count::__release_weak(v371);
              }
            }
            v374 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v375 = (unint64_t *)((char *)__p[1] + 8);
              do
                v376 = __ldaxr(v375);
              while (__stlxr(v376 - 1, v375));
              if (!v376)
              {
                ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
                std::__shared_weak_count::__release_weak(v374);
              }
            }
            v377 = v476;
            if (v476)
            {
              v378 = (unint64_t *)&v476->__shared_owners_;
              do
                v379 = __ldaxr(v378);
              while (__stlxr(v379 - 1, v378));
              if (!v379)
              {
                ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
                std::__shared_weak_count::__release_weak(v377);
              }
            }
            v380 = (std::__shared_weak_count *)*((_QWORD *)&v477 + 1);
            if (*((_QWORD *)&v477 + 1))
            {
              v381 = (unint64_t *)(*((_QWORD *)&v477 + 1) + 8);
              do
                v382 = __ldaxr(v381);
              while (__stlxr(v382 - 1, v381));
              if (!v382)
              {
                ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
                std::__shared_weak_count::__release_weak(v380);
              }
            }
            v383 = v480;
            if (v480)
            {
              v384 = (unint64_t *)&v480->__shared_owners_;
              do
                v385 = __ldaxr(v384);
              while (__stlxr(v385 - 1, v384));
              if (!v385)
              {
                ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
                std::__shared_weak_count::__release_weak(v383);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v440.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v440.__r_.__value_.__l.__data_);
    }
  }
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v386 = sub_2241471F8();
    v387 = v386[2];
    if (!v387)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v387 = v386[2];
    }
    v388 = *(_QWORD *)(v387 + 64);
    v389 = (std::mutex *)(v388 + 32);
    std::mutex::lock((std::mutex *)(v388 + 32));
    v391 = *(_QWORD *)(v388 + 96);
    v390 = *(_QWORD *)(v388 + 104);
    std::mutex::unlock(v389);
    if (v391 != v390)
    {
      sub_22456D250("ObservationMapping.Res.Cluster.ClutterScore-%i", (std::string *)v459, a2);
      __p[0] = "cv3d.recon.";
      __p[1] = (void *)11;
      v392 = (void *)v459[23];
      if (v459[23] >= 0)
        v393 = v459;
      else
        v393 = *(_BYTE **)v459;
      if (v459[23] < 0)
        v392 = *(void **)&v459[8];
      __p[2] = v393;
      __p[3] = v392;
      sub_2231A9820((uint64_t)__p, (uint64_t)v482, 0, 0, &v440);
      if ((v459[23] & 0x80000000) != 0)
        operator delete(*(void **)v459);
      sub_2241471F8();
      v394 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v394 + 24))(v394))
      {
        memset(v459, 0, sizeof(v459));
        v460[0] = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v394 + 24))(v394))
        {
          *(_QWORD *)&v442 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v442 + 1) = 2;
          v395 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v394 + 24))(v394))
          {
            sub_223AE327C((uint64_t)a1, (uint64_t)__p);
            LOBYTE(v444) = 0;
            LOBYTE(v446) = 0;
            sub_22329F414((uint64_t)__p, (__int128 *)&v444, &v442, &rep);
            if ((_BYTE)v446 && SHIBYTE(v445) < 0)
              operator delete(v444);
            sub_22316F8F4((uint64_t *)__p);
            v396 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v394 + 56))(v394);
            v398 = *(void **)v396;
            v397 = *(unint64_t **)(v396 + 8);
            *(_QWORD *)&v477 = *(_QWORD *)v396;
            *((_QWORD *)&v477 + 1) = v397;
            if (v397)
            {
              v399 = v397 + 1;
              do
                v400 = __ldxr(v399);
              while (__stxr(v400 + 1, v399));
            }
            v401 = v479;
            v402 = v480;
            v474 = &off_24EC6A3B8;
            v475 = v479;
            v476 = v480;
            v480 = 0;
            v479 = 0;
            __p[0] = v398;
            __p[1] = v397;
            if (v397)
            {
              v403 = v397 + 1;
              do
                v404 = __ldxr(v403);
              while (__stxr(v404 + 1, v403));
            }
            __p[2] = &off_24EC6A3B8;
            __p[3] = v401;
            v482[0] = v402;
            if (v402)
            {
              v405 = (unint64_t *)&v402->__shared_owners_;
              do
                v406 = __ldxr(v405);
              while (__stxr(v406 + 1, v405));
            }
            (*(void (**)(uint64_t *, void **))(*v395 + 16))(v395, __p);
            v407 = (std::__shared_weak_count *)v482[0];
            if (v482[0])
            {
              v408 = (unint64_t *)(v482[0] + 8);
              do
                v409 = __ldaxr(v408);
              while (__stlxr(v409 - 1, v408));
              if (!v409)
              {
                ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
                std::__shared_weak_count::__release_weak(v407);
              }
            }
            v410 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v411 = (unint64_t *)((char *)__p[1] + 8);
              do
                v412 = __ldaxr(v411);
              while (__stlxr(v412 - 1, v411));
              if (!v412)
              {
                ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
                std::__shared_weak_count::__release_weak(v410);
              }
            }
            v413 = v476;
            if (v476)
            {
              v414 = (unint64_t *)&v476->__shared_owners_;
              do
                v415 = __ldaxr(v414);
              while (__stlxr(v415 - 1, v414));
              if (!v415)
              {
                ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
                std::__shared_weak_count::__release_weak(v413);
              }
            }
            v416 = (std::__shared_weak_count *)*((_QWORD *)&v477 + 1);
            if (*((_QWORD *)&v477 + 1))
            {
              v417 = (unint64_t *)(*((_QWORD *)&v477 + 1) + 8);
              do
                v418 = __ldaxr(v417);
              while (__stlxr(v418 - 1, v417));
              if (!v418)
              {
                ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
                std::__shared_weak_count::__release_weak(v416);
              }
            }
            v419 = v480;
            if (v480)
            {
              v420 = (unint64_t *)&v480->__shared_owners_;
              do
                v421 = __ldaxr(v420);
              while (__stlxr(v421 - 1, v420));
              if (!v421)
              {
                ((void (*)(std::__shared_weak_count *))v419->__on_zero_shared)(v419);
                std::__shared_weak_count::__release_weak(v419);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v440.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v440.__r_.__value_.__l.__data_);
    }
  }
}

void sub_223B23E38(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x368]))
  {
    if (SLOBYTE(STACK[0x367]) < 0)
      operator delete((void *)STACK[0x350]);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x270]);
  _Unwind_Resume(a1);
}

void sub_223B23E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  char a65;

  sub_2231AA880((uint64_t)&STACK[0x350]);
  sub_2241231D8((uint64_t)&STACK[0x310]);
  sub_223167354((uint64_t)&STACK[0x328]);
  sub_2241231D8((uint64_t)&STACK[0x338]);
  sub_2231874DC((uint64_t)&STACK[0x270]);
  if (a65 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223B24228(_Unwind_Exception *a1)
{
  sub_22322E828((uint64_t)&STACK[0x270]);
  sub_22388925C((uint64_t)&STACK[0x350]);
  _Unwind_Resume(a1);
}

uint64_t sub_223B24244(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(a1 + 24);
    if (v4 != v3)
    {
      v6 = *(_QWORD *)(a1 + 32);
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v5);
  }
  v9 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_223B242D8()
{
  return 0;
}

void sub_223B242E4()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223B242F8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5FA58;
  result[1] = v3;
  return result;
}

uint64_t sub_223B2432C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5FA58;
  a2[1] = v2;
  return result;
}

uint64_t sub_223B24348(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(a1 + 8))(*a2, a3, *a4, a5, a6);
}

uint64_t sub_223B24368(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFbN4cv3d5recon5frame19KeyframeUpdateStateERKNS_3esn6random4UUIDENS1_26GlobalAnchorTrackingStatusER"
                     "KNSt3__13setIS5_NS9_4lessIS5_EENS9_9allocatorIS5_EEEERNS9_5arrayIyLm4EEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"PFbN4cv3d5recon5frame19KeyframeUpdateStateERKNS_3esn6random4UUIDENS1_26GlobalAnchorTrack"
                                "ingStatusERKNSt3__13setIS5_NS9_4lessIS5_EENS9_9allocatorIS5_EEEERNS9_5arrayIyLm4EEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFbN4cv3d5recon5frame19KeyframeUpdateStateERKNS_3esn6random4UUIDENS1_26GlobalAnchorTrackingStatusERKNSt3__13setIS5_NS9_4lessIS5_EENS9_9allocatorIS5_EEEERNS9_5arrayIyLm4EEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFbN4cv3d5recon5frame19KeyframeUpdateStateERKNS_3esn6random4UUIDENS1_26GlobalAnchorTrackingStatusERKNSt3__13setIS5_NS9_4lessIS5_EENS9_9allocatorIS5_EEEERNS9_5arrayIyLm4EEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223B243D4()
{
  return &unk_24EC5FAD8;
}

void sub_223B243E4()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223B243F8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5FB08;
  result[1] = v3;
  return result;
}

uint64_t sub_223B2442C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5FB08;
  a2[1] = v2;
  return result;
}

uint64_t sub_223B24448(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(a1 + 8))(*a2, a2[1], *a3, a3[1], a4);
}

uint64_t sub_223B24460(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFN4cv3d5recon5frame10SortResultENS_3esn11OptionalRefIKN3cva15SE3GroupStorageIfNS5_6MatrixIfLj4ELj4"
                     "ELb1EEEEEEENS4_IKfEERNSt3__16vectorINS1_12KeyframeDataENSE_9allocatorISG_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"PFN4cv3d5recon5frame10SortResultENS_3esn11OptionalRefIKN3cva15SE3GroupStorageIfNS5_6Matr"
                                "ixIfLj4ELj4ELb1EEEEEEENS4_IKfEERNSt3__16vectorINS1_12KeyframeDataENSE_9allocatorISG_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFN4cv3d5recon5frame10SortResultENS_3esn11OptionalRefIKN3cva15SE3GroupStorageIfNS5_6MatrixIfLj4ELj4ELb1EEEEEEENS4_IKfEERNSt3__16vectorINS1_12KeyframeDataENSE_9allocatorISG_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFN4cv3d5recon5frame10SortResultENS_3esn11OptionalRefIKN3cva15SE3GroupStorageIfNS5_6MatrixIfLj4ELj4ELb1EEEEEEENS4_IKfEERNSt3__16vectorINS1_12KeyframeDataENSE_9allocatorISG_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223B244CC()
{
  return &unk_24EC5FB88;
}

_QWORD *sub_223B244D8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (_QWORD *)*(v3 - 4);
        if (v5)
        {
          do
          {
            v6 = (_QWORD *)*v5;
            operator delete(v5);
            v5 = v6;
          }
          while (v6);
        }
        v8 = (void *)*(v3 - 6);
        v3 -= 6;
        v7 = v8;
        *v3 = 0;
        if (v8)
          operator delete(v7);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *sub_223B2455C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v14;
  char *v15;

  v2 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 4);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x8D3DCB08D3DCB0)
    sub_22316E078();
  if (0x69EE58469EE5846ALL * ((a1[2] - *a1) >> 4) > v3)
    v3 = 0x69EE58469EE5846ALL * ((a1[2] - *a1) >> 4);
  if ((unint64_t)(0x34F72C234F72C235 * ((a1[2] - *a1) >> 4)) >= 0x469EE58469EE58)
    v6 = 0x8D3DCB08D3DCB0;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x8D3DCB08D3DCB0)
      sub_223174E94();
    v7 = (char *)operator new(464 * v6);
  }
  else
  {
    v7 = 0;
  }
  v14 = &v7[464 * v2];
  v15 = &v7[464 * v6];
  sub_223B246DC(v14, a2);
  v8 = (uint64_t)v14;
  v9 = v14 + 464;
  v11 = (char *)*a1;
  v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v9;
    a1[2] = (uint64_t)v15;
    if (!v10)
      return v14 + 464;
    goto LABEL_16;
  }
  do
  {
    v10 -= 464;
    v8 = sub_223B2502C(v8 - 464, (uint64_t)v10);
  }
  while (v10 != v11);
  v10 = (char *)*a1;
  v12 = a1[1];
  *a1 = v8;
  a1[1] = (uint64_t)v9;
  a1[2] = (uint64_t)v15;
  while ((char *)v12 != v10)
  {
    v12 -= 464;
    sub_22388925C(v12);
  }
  if (v10)
LABEL_16:
    operator delete(v10);
  return v14 + 464;
}

void sub_223B246C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223B24FDC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_223B246DC(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  int64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v4 = (_QWORD *)(sub_2239367D8((uint64_t)a1, (uint64_t)a2) + 144);
  sub_223B2494C(v4, a2 + 18);
  a1[21] = 0;
  a1[22] = 0;
  a1[23] = 0;
  v6 = (_BYTE *)a2[21];
  v5 = (_BYTE *)a2[22];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_22316E078();
    v8 = (char *)operator new(v5 - v6);
    a1[21] = v8;
    a1[22] = v8;
    v9 = &v8[4 * (v7 >> 2)];
    a1[23] = v9;
    memcpy(v8, v6, v7);
    a1[22] = v9;
  }
  a1[24] = 0;
  a1[25] = 0;
  a1[26] = 0;
  v11 = (_BYTE *)a2[24];
  v10 = (_BYTE *)a2[25];
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_22316E078();
    v13 = (char *)operator new(v10 - v11);
    a1[24] = v13;
    a1[25] = v13;
    v14 = &v13[4 * (v12 >> 2)];
    a1[26] = v14;
    memcpy(v13, v11, v12);
    a1[25] = v14;
  }
  sub_2239367D8((uint64_t)(a1 + 27), (uint64_t)(a2 + 27));
  a1[45] = 0;
  a1[46] = 0;
  a1[47] = 0;
  v16 = (_BYTE *)a2[45];
  v15 = (_BYTE *)a2[46];
  v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0)
      sub_22316E078();
    v18 = (char *)operator new(v15 - v16);
    a1[45] = v18;
    a1[46] = v18;
    v19 = &v18[4 * (v17 >> 2)];
    a1[47] = v19;
    memcpy(v18, v16, v17);
    a1[46] = v19;
  }
  a1[48] = 0;
  a1[49] = 0;
  a1[50] = 0;
  v21 = (_BYTE *)a2[48];
  v20 = (_BYTE *)a2[49];
  v22 = v20 - v21;
  if (v20 != v21)
  {
    if (v22 < 0)
      sub_22316E078();
    v23 = (char *)operator new(v20 - v21);
    a1[48] = v23;
    a1[49] = v23;
    v24 = &v23[4 * (v22 >> 2)];
    a1[50] = v24;
    memcpy(v23, v21, v22);
    a1[49] = v24;
  }
  sub_223B24B64((uint64_t)(a1 + 51), (uint64_t)(a2 + 51));
  v25 = a2[56];
  *(_QWORD *)((char *)a1 + 454) = *(uint64_t *)((char *)a2 + 454);
  a1[56] = v25;
  return a1;
}

void sub_223B248B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  _QWORD *v10;
  void **v11;
  void **v12;
  uint64_t v13;
  void **v14;
  void **v15;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v17 = *v15;
  if (*v15)
  {
    v10[49] = v17;
    operator delete(v17);
  }
  v18 = *v14;
  if (*v14)
  {
    v10[46] = v18;
    operator delete(v18);
  }
  sub_223B24244(v13);
  v19 = *v12;
  if (*v12)
  {
    v10[25] = v19;
    operator delete(v19);
  }
  v20 = *v11;
  if (*v11)
  {
    v10[22] = v20;
    operator delete(v20);
  }
  sub_22317C838(a10);
  sub_223B24244((uint64_t)v10);
  _Unwind_Resume(a1);
}

_QWORD *sub_223B2494C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  _QWORD *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_223B24A58(v3, v4, v5, v8);
  }
  return a1;
}

void sub_223B249F4(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  void *v8;
  void *v9;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      v7 = (char *)v1[1];
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 3);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *((_QWORD *)v5 - 2) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223B24A58(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v10 = *(const void **)v6;
      v9 = *(_QWORD *)(v6 + 8);
      v11 = v9 - *(_QWORD *)v6;
      if (v9 != *(_QWORD *)v6)
      {
        if (v11 < 0)
          sub_22316E078();
        v7 = (char *)operator new(v9 - *(_QWORD *)v6);
        *a4 = v7;
        a4[1] = v7;
        a4[2] = &v7[16 * (v11 >> 4)];
        v8 = v11 & 0xFFFFFFFFFFFFFFF0;
        memcpy(v7, v10, v8);
        a4[1] = &v7[v8];
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_223B24B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22324A4B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223B24B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_22324A4B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223B24B64(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_2231B0668(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_223B24CA4(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_223B24C7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22322E828(v1);
  _Unwind_Resume(a1);
}

void sub_223B24C90(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22322E828(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223B24CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v15;
  float v17;
  float v18;
  uint64_t v19;
  _QWORD *v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v7 = sub_22456636C((unsigned __int8 *)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v12[1];
            if (v15 == v7)
            {
              if (v12[2] == *(_QWORD *)a2 && v12[3] == *(_QWORD *)(a2 + 8))
                return v12;
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_31;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_31;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v7)
          {
            if (v12[2] == *(_QWORD *)a2 && v12[3] == *(_QWORD *)(a2 + 8))
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_31:
  v12 = operator new(0x28uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = *(_OWORD *)a3;
  v12[4] = *(_QWORD *)(a3 + 16);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (v9 && (float)(v18 * (float)v9) >= v17)
  {
    v19 = *(_QWORD *)a1;
    v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v20)
    {
LABEL_34:
      *v12 = *v20;
LABEL_69:
      *v20 = v12;
      goto LABEL_70;
    }
  }
  else
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_45;
    if (prime < v9)
    {
      v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (prime <= v25)
        prime = v25;
      if (prime < v9)
LABEL_45:
        sub_2231B0668(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v28 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v3 = v8 % v9;
        v19 = *(_QWORD *)a1;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v20)
          goto LABEL_34;
      }
      else
      {
        v3 = v8;
        v19 = *(_QWORD *)a1;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v20)
          goto LABEL_34;
      }
    }
    else
    {
      v3 = v28 & v8;
      v19 = *(_QWORD *)a1;
      v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v28 & v8));
      if (v20)
        goto LABEL_34;
    }
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v29 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v29 >= v9)
        v29 %= v9;
    }
    else
    {
      v29 &= v9 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_69;
  }
LABEL_70:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_223B24FC8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223B24FDC(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 464;
    sub_22388925C(i - 464);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_223B2502C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  *(_QWORD *)(result + 16) = 0;
  *(_OWORD *)result = 0u;
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(_QWORD *)(result + 40) = 0;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(result + 64) = 0;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  v2 = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(result + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(result + 72) = v2;
  v3 = *(_QWORD *)(a2 + 84);
  *(_DWORD *)(result + 92) = *(_DWORD *)(a2 + 92);
  *(_QWORD *)(result + 84) = v3;
  v4 = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(result + 104) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(result + 96) = v4;
  v5 = *(_OWORD *)(a2 + 108);
  v6 = *(_OWORD *)(a2 + 124);
  *(_DWORD *)(result + 140) = *(_DWORD *)(a2 + 140);
  *(_OWORD *)(result + 124) = v6;
  *(_OWORD *)(result + 108) = v5;
  *(_QWORD *)(result + 144) = 0;
  *(_OWORD *)(result + 152) = 0u;
  *(_OWORD *)(result + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(result + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_QWORD *)(result + 184) = 0;
  *(_OWORD *)(result + 168) = 0u;
  *(_OWORD *)(result + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(result + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = 0;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_QWORD *)(result + 208) = 0;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(result + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 208) = 0;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(result + 216) = 0u;
  *(_QWORD *)(result + 232) = 0;
  *(_OWORD *)(result + 216) = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(result + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a2 + 232) = 0;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_QWORD *)(result + 256) = 0;
  *(_OWORD *)(result + 240) = 0u;
  *(_OWORD *)(result + 240) = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(result + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 256) = 0;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_QWORD *)(result + 280) = 0;
  *(_OWORD *)(result + 264) = 0u;
  v7 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(result + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(result + 272) = v7;
  *(_QWORD *)(result + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a2 + 280) = 0;
  *(_OWORD *)(a2 + 264) = 0u;
  v8 = *(_QWORD *)(a2 + 288);
  *(_DWORD *)(result + 296) = *(_DWORD *)(a2 + 296);
  *(_QWORD *)(result + 288) = v8;
  v9 = *(_QWORD *)(a2 + 300);
  *(_DWORD *)(result + 308) = *(_DWORD *)(a2 + 308);
  *(_QWORD *)(result + 300) = v9;
  v10 = *(_QWORD *)(a2 + 312);
  *(_DWORD *)(result + 320) = *(_DWORD *)(a2 + 320);
  *(_QWORD *)(result + 312) = v10;
  v11 = *(_OWORD *)(a2 + 324);
  v12 = *(_OWORD *)(a2 + 340);
  *(_DWORD *)(result + 356) = *(_DWORD *)(a2 + 356);
  *(_OWORD *)(result + 340) = v12;
  *(_OWORD *)(result + 324) = v11;
  *(_QWORD *)(result + 360) = 0;
  *(_OWORD *)(result + 368) = 0u;
  v13 = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(result + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(result + 368) = v13;
  *(_QWORD *)(result + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a2 + 376) = 0;
  *(_OWORD *)(a2 + 360) = 0u;
  *(_QWORD *)(result + 400) = 0;
  *(_OWORD *)(result + 384) = 0u;
  *(_OWORD *)(result + 384) = *(_OWORD *)(a2 + 384);
  *(_QWORD *)(result + 400) = *(_QWORD *)(a2 + 400);
  *(_OWORD *)(a2 + 384) = 0u;
  v14 = *(_QWORD *)(a2 + 408);
  *(_OWORD *)(a2 + 400) = 0u;
  *(_QWORD *)(result + 408) = v14;
  *(_QWORD *)(result + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a2 + 416) = 0;
  v15 = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(result + 424) = v15;
  v16 = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(result + 432) = v16;
  *(_DWORD *)(result + 440) = *(_DWORD *)(a2 + 440);
  if (v16)
  {
    v17 = *(_QWORD *)(v15 + 8);
    v18 = *(_QWORD *)(result + 416);
    if ((v18 & (v18 - 1)) != 0)
    {
      if (v17 >= v18)
        v17 %= v18;
    }
    else
    {
      v17 &= v18 - 1;
    }
    *(_QWORD *)(v14 + 8 * v17) = result + 424;
    *(_QWORD *)(a2 + 424) = 0;
    *(_QWORD *)(a2 + 432) = 0;
  }
  v19 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(result + 454) = *(_QWORD *)(a2 + 454);
  *(_QWORD *)(result + 448) = v19;
  return result;
}

void sub_223B252B0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      sub_22316E078();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_223174E94();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

uint64_t sub_223B25448(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void **v4;
  void *v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 64);
    *(_QWORD *)(a1 + 16) = i - 64;
    v5 = *(void **)(i - 40);
    if (v5)
    {
      *(_QWORD *)(i - 32) = v5;
      operator delete(v5);
    }
    v6 = *v4;
    if (*v4)
    {
      *(_QWORD *)(i - 56) = v6;
      operator delete(v6);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_223B254BC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  int8x8_t prime;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  size_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint64_t *i;
  uint8x8_t v31;
  unint64_t v32;
  uint64_t *v33;
  unsigned __int8 v34;
  int v35;
  int v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  size_t v45;
  void *v46;
  uint8x8_t v47;
  uint8x8_t v48;
  uint64_t v49;
  uint64_t *v50;
  char v51;
  int v52;
  char v53;
  uint64_t v54;
  unint64_t v55;

  v4 = *(unsigned __int16 *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v7 = *(float *)(a1 + 32);
  if (v5 && (float)(v7 * (float)v5) >= v6)
    goto LABEL_76;
  v8 = 1;
  if (v5 >= 3)
    v8 = (v5 & (v5 - 1)) != 0;
  v9 = v8 | (2 * v5);
  v10 = vcvtps_u32_f32(v6 / v7);
  if (v9 <= v10)
    prime = (int8x8_t)v10;
  else
    prime = (int8x8_t)v9;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v5 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime <= v5)
  {
    if (*(_QWORD *)&prime >= v5)
      goto LABEL_76;
    v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v45 = std::__next_prime(v25);
      if (*(_QWORD *)&prime <= v45)
        prime = (int8x8_t)v45;
      if (*(_QWORD *)&prime >= v5)
      {
LABEL_38:
        v5 = *(_QWORD *)(a1 + 8);
        v28 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
        v28.i16[0] = vaddlv_u8(v28);
        v29 = v28.u32[0];
        if (v28.u32[0] >= 2uLL)
          goto LABEL_44;
        goto LABEL_77;
      }
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v5)
        goto LABEL_38;
    }
    if (!*(_QWORD *)&prime)
    {
      v46 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v46)
        operator delete(v46);
      v5 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      v47 = (uint8x8_t)vcnt_s8(0);
      v47.i16[0] = vaddlv_u8(v47);
      v29 = v47.u32[0];
      if (v47.u32[0] >= 2uLL)
        goto LABEL_44;
      goto LABEL_77;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    sub_223174E94();
  v12 = operator new(8 * *(_QWORD *)&prime);
  v13 = *(void **)a1;
  *(_QWORD *)a1 = v12;
  if (v13)
    operator delete(v13);
  v14 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14++) = 0;
  while (*(_QWORD *)&prime != v14);
  v16 = a1 + 16;
  v15 = *(uint64_t ***)(a1 + 16);
  if (v15)
  {
    v17 = (unint64_t)v15[1];
    v18 = *(_QWORD *)&prime - 1;
    if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) == 0)
    {
      v19 = v17 & v18;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v16;
      v20 = *v15;
      if (!*v15)
        goto LABEL_43;
      do
      {
        v21 = v20[1] & v18;
        if (v21 == v19)
        {
          v15 = (uint64_t **)v20;
        }
        else
        {
          v22 = v20;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v21))
          {
            do
            {
              v23 = v22;
              v22 = (uint64_t *)*v22;
            }
            while (v22 && *((unsigned __int16 *)v20 + 8) == *((unsigned __int16 *)v22 + 8));
            *v15 = v22;
            v24 = 8 * v21;
            *v23 = **(_QWORD **)(*(_QWORD *)a1 + v24);
            **(_QWORD **)(*(_QWORD *)a1 + v24) = v20;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v15;
            v15 = (uint64_t **)v20;
            v19 = v21;
          }
        }
        v20 = *v15;
      }
      while (*v15);
      v5 = (unint64_t)prime;
LABEL_76:
      v48 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
      v48.i16[0] = vaddlv_u8(v48);
      v29 = v48.u32[0];
      if (v48.u32[0] >= 2uLL)
        goto LABEL_44;
      goto LABEL_77;
    }
    if (v17 >= *(_QWORD *)&prime)
      v17 %= *(_QWORD *)&prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = v16;
    for (i = *v15; *v15; i = *v15)
    {
      v40 = i[1];
      if (v40 >= *(_QWORD *)&prime)
        v40 %= *(_QWORD *)&prime;
      if (v40 == v17)
      {
        v15 = (uint64_t **)i;
      }
      else
      {
        v41 = i;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v40))
        {
          do
          {
            v42 = v41;
            v41 = (uint64_t *)*v41;
          }
          while (v41 && *((unsigned __int16 *)i + 8) == *((unsigned __int16 *)v41 + 8));
          *v15 = v41;
          v43 = 8 * v40;
          *v42 = **(_QWORD **)(*(_QWORD *)a1 + v43);
          **(_QWORD **)(*(_QWORD *)a1 + v43) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v15;
          v15 = (uint64_t **)i;
          v17 = v40;
        }
      }
    }
  }
LABEL_43:
  v5 = (unint64_t)prime;
  v31 = (uint8x8_t)vcnt_s8(prime);
  v31.i16[0] = vaddlv_u8(v31);
  v29 = v31.u32[0];
  if (v31.u32[0] >= 2uLL)
  {
LABEL_44:
    v32 = v4;
    if (v5 <= v4)
      v32 = v4 % v5;
    v33 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v32);
    if (!v33)
    {
      v37 = 0;
      v44 = *(_QWORD *)(a2 + 8);
      goto LABEL_85;
    }
    v34 = 0;
    v35 = *(unsigned __int16 *)(a2 + 16);
    while (1)
    {
      v37 = v33;
      v33 = (uint64_t *)*v33;
      if (!v33)
        goto LABEL_84;
      v38 = v33[1];
      v39 = v38;
      if (v38 >= v5)
        v39 = v38 % v5;
      if (v39 != v32)
        goto LABEL_84;
      if (v38 == v4)
      {
        v36 = v34 & (*((unsigned __int16 *)v33 + 8) != v35);
        v34 |= *((unsigned __int16 *)v33 + 8) == v35;
        if (v36 == 1)
          goto LABEL_84;
      }
      else if ((v34 & 1) == 1)
      {
        goto LABEL_84;
      }
    }
  }
LABEL_77:
  v49 = (v5 - 1) & v4;
  v50 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v49);
  if (!v50)
  {
    v37 = 0;
    v44 = *(_QWORD *)(a2 + 8);
LABEL_96:
    v44 &= v5 - 1;
    if (v37)
      goto LABEL_88;
LABEL_97:
    *(_QWORD *)a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = a1 + 16;
    if (!*(_QWORD *)a2)
      goto LABEL_103;
    v55 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v29 > 1)
    {
      if (v55 >= v5)
        v55 %= v5;
    }
    else
    {
      v55 &= v5 - 1;
    }
LABEL_102:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v55) = a2;
    goto LABEL_103;
  }
  v51 = 0;
  v52 = *(unsigned __int16 *)(a2 + 16);
  while (1)
  {
    v37 = v50;
    v50 = (uint64_t *)*v50;
    if (!v50)
      break;
    v54 = v50[1];
    if ((v54 & (v5 - 1)) != v49)
      break;
    if (v54 == v4)
    {
      v53 = v51 & (*((unsigned __int16 *)v50 + 8) != v52);
      v51 |= *((unsigned __int16 *)v50 + 8) == v52;
      if ((v53 & 1) != 0)
        break;
    }
    else if ((v51 & 1) != 0)
    {
      break;
    }
  }
LABEL_84:
  v44 = *(_QWORD *)(a2 + 8);
  if (v29 <= 1)
    goto LABEL_96;
LABEL_85:
  if (v44 >= v5)
    v44 %= v5;
  if (!v37)
    goto LABEL_97;
LABEL_88:
  *(_QWORD *)a2 = *v37;
  *v37 = a2;
  if (*(_QWORD *)a2)
  {
    v55 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v29 > 1)
    {
      if (v55 >= v5)
        v55 %= v5;
    }
    else
    {
      v55 &= v5 - 1;
    }
    if (v55 != v44)
      goto LABEL_102;
  }
LABEL_103:
  ++*(_QWORD *)(a1 + 24);
}

uint64_t sub_223B25A1C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 368;
    sub_22388AEE8((_QWORD *)(i - 368));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_223B25A6C(char *result, int a2, int a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int32x2_t v26;
  int v27;
  unsigned __int32 v28;
  unsigned __int32 v29;
  unsigned int v30;
  int32x2_t v31;
  int v32;
  uint64_t v33;
  int v34;

  v4 = a3 & 0xCFFFFFFF;
  v5 = *((_QWORD *)result + 23);
  v6 = v5 + 4488 * (a3 & 0xCFFFFFFF);
  v31 = *(int32x2_t *)v6;
  v32 = *(_DWORD *)(v6 + 8);
  v33 = *(_QWORD *)(v6 + 12);
  v34 = *(_DWORD *)(v6 + 20);
  if (*(_DWORD *)(v6 + 64))
  {
    if (a2)
    {
      v8 = result;
      v9 = *(_DWORD *)(v5 + 4488 * v4 + 24);
      v10 = (a2 - 1);
      if (a2 == 1)
      {
        if ((v9 & 0x80000000) == 0)
        {
          v11 = (v33 - v31.i32[0]) >> 1;
          v26 = v31;
          v27 = v32;
          v28 = v11 + v31.i32[0];
          v29 = v31.i32[1] + v11;
          v30 = v32 + v11;
          if (!(v9 >> 30))
          {
            result = sub_223B25F54(*(_QWORD **)(a4 + 8), &v26, v9);
            v5 = *((_QWORD *)v8 + 23);
          }
        }
        v12 = *(_DWORD *)(v5 + 4488 * v4 + 28);
        if ((v12 & 0x80000000) == 0)
        {
          v13 = (v33 - v31.i32[0]) >> 1;
          v26 = v31;
          v27 = v32 + v13;
          v28 = v13 + v31.i32[0];
          v29 = v31.i32[1] + v13;
          v30 = v32 + v13 + v13;
          if (!(v12 >> 30))
          {
            result = sub_223B25F54(*(_QWORD **)(a4 + 8), &v26, v12);
            v5 = *((_QWORD *)v8 + 23);
          }
        }
        v14 = *(_DWORD *)(v5 + 4488 * v4 + 32);
        if ((v14 & 0x80000000) == 0)
        {
          v15 = (v33 - v31.i32[0]) >> 1;
          v26.i32[0] = v31.i32[0];
          v26.i32[1] = v15 + v31.i32[1];
          v27 = v32;
          v28 = v15 + v31.i32[0];
          v29 = v15 + v31.i32[1] + v15;
          v30 = v32 + v15;
          if (!(v14 >> 30))
          {
            result = sub_223B25F54(*(_QWORD **)(a4 + 8), &v26, v14);
            v5 = *((_QWORD *)v8 + 23);
          }
        }
        v16 = *(_DWORD *)(v5 + 4488 * v4 + 36);
        if ((v16 & 0x80000000) == 0)
        {
          v17 = (v33 - v31.i32[0]) >> 1;
          v26.i32[0] = v31.i32[0];
          v26.i32[1] = v17 + v31.i32[1];
          v27 = v32 + v17;
          v28 = v17 + v31.i32[0];
          v29 = v17 + v31.i32[1] + v17;
          v30 = v32 + v17 + v17;
          if (!(v16 >> 30))
          {
            result = sub_223B25F54(*(_QWORD **)(a4 + 8), &v26, v16);
            v5 = *((_QWORD *)v8 + 23);
          }
        }
        v18 = *(_DWORD *)(v5 + 4488 * v4 + 40);
        if ((v18 & 0x80000000) == 0)
        {
          v19 = (v33 - v31.i32[0]) >> 1;
          v26.i32[0] = v19 + v31.i32[0];
          v26.i32[1] = v31.i32[1];
          v27 = v32;
          v28 = v19 + v31.i32[0] + v19;
          v29 = v31.i32[1] + v19;
          v30 = v32 + v19;
          if (!(v18 >> 30))
          {
            result = sub_223B25F54(*(_QWORD **)(a4 + 8), &v26, v18);
            v5 = *((_QWORD *)v8 + 23);
          }
        }
        v20 = *(_DWORD *)(v5 + 4488 * v4 + 44);
        if ((v20 & 0x80000000) == 0)
        {
          v21 = (v33 - v31.i32[0]) >> 1;
          v26.i32[0] = v21 + v31.i32[0];
          v26.i32[1] = v31.i32[1];
          v27 = v32 + v21;
          v28 = v21 + v31.i32[0] + v21;
          v29 = v31.i32[1] + v21;
          v30 = v32 + v21 + v21;
          if (!(v20 >> 30))
          {
            result = sub_223B25F54(*(_QWORD **)(a4 + 8), &v26, v20);
            v5 = *((_QWORD *)v8 + 23);
          }
        }
        v22 = *(_DWORD *)(v5 + 4488 * v4 + 48);
        if ((v22 & 0x80000000) == 0)
        {
          v23 = (v33 - v31.i32[0]) >> 1;
          v26.i32[0] = v23 + v31.i32[0];
          v26.i32[1] = v23 + v31.i32[1];
          v27 = v32;
          v28 = v23 + v31.i32[0] + v23;
          v29 = v23 + v31.i32[1] + v23;
          v30 = v32 + v23;
          if (!(v22 >> 30))
          {
            result = sub_223B25F54(*(_QWORD **)(a4 + 8), &v26, v22);
            v5 = *((_QWORD *)v8 + 23);
          }
        }
        v24 = *(_DWORD *)(v5 + 4488 * v4 + 52);
        if ((v24 & 0x80000000) == 0)
        {
          v25 = (v33 - v31.i32[0]) >> 1;
          v26.i32[0] = v25 + v31.i32[0];
          v26.i32[1] = v25 + v31.i32[1];
          v27 = v32 + v25;
          v28 = v25 + v31.i32[0] + v25;
          v29 = v25 + v31.i32[1] + v25;
          v30 = v32 + v25 + v25;
          if (!(v24 >> 30))
            return sub_223B25F54(*(_QWORD **)(a4 + 8), &v26, v24);
        }
      }
      else
      {
        if ((v9 & 0x80000000) == 0)
        {
          result = (char *)sub_223B25A6C(result, (a2 - 1));
          v5 = *((_QWORD *)v8 + 23);
        }
        if ((*(_DWORD *)(v5 + 4488 * v4 + 28) & 0x80000000) == 0)
        {
          result = (char *)sub_223B25A6C(v8, v10);
          v5 = *((_QWORD *)v8 + 23);
        }
        if ((*(_DWORD *)(v5 + 4488 * v4 + 32) & 0x80000000) == 0)
        {
          result = (char *)sub_223B25A6C(v8, v10);
          v5 = *((_QWORD *)v8 + 23);
        }
        if ((*(_DWORD *)(v5 + 4488 * v4 + 36) & 0x80000000) == 0)
        {
          result = (char *)sub_223B25A6C(v8, v10);
          v5 = *((_QWORD *)v8 + 23);
        }
        if ((*(_DWORD *)(v5 + 4488 * v4 + 40) & 0x80000000) == 0)
        {
          result = (char *)sub_223B25A6C(v8, v10);
          v5 = *((_QWORD *)v8 + 23);
        }
        if ((*(_DWORD *)(v5 + 4488 * v4 + 44) & 0x80000000) == 0)
        {
          result = (char *)sub_223B25A6C(v8, v10);
          v5 = *((_QWORD *)v8 + 23);
        }
        if ((*(_DWORD *)(v5 + 4488 * v4 + 48) & 0x80000000) == 0)
        {
          result = (char *)sub_223B25A6C(v8, v10);
          v5 = *((_QWORD *)v8 + 23);
        }
        if ((*(_DWORD *)(v5 + 4488 * v4 + 52) & 0x80000000) == 0)
          return (char *)sub_223B25A6C(v8, v10);
      }
    }
    else
    {
      return sub_223B25F54(*(_QWORD **)(a4 + 8), &v31, 0);
    }
  }
  return result;
}

char *sub_223B25F54(_QWORD *a1, int32x2_t *a2, unsigned int a3)
{
  _QWORD *v5;
  uint64_t v7;
  char *result;
  __int128 *v9;
  __int128 v10;
  unint64_t v11;
  __int128 *v12;
  __int128 v13;
  uint64_t ***v14;
  int32x2_t v15;
  __int32 v16;
  int32x2_t v17;
  __int32 v18;
  __int128 v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)*a1;
  if ((a3 & 0x80000000) != 0)
  {
    result = (char *)(v5 + 2609);
    v12 = (__int128 *)a1[1];
    v13 = *v12;
    LODWORD(v12) = *((unsigned __int8 *)v12 + 16);
    v20 = (char)v12;
    v19 = v13;
    if ((_DWORD)v12)
      goto LABEL_6;
  }
  else
  {
    v7 = v5[2615];
    if (0xAAAAAAAAAAAAAAABLL * ((v5[2616] - v7) >> 4) <= a3)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v7 = v5[2615];
    }
    result = (char *)(v7 + 48 * a3);
    v9 = (__int128 *)a1[1];
    v10 = *v9;
    LODWORD(v9) = *((unsigned __int8 *)v9 + 16);
    v20 = (char)v9;
    v19 = v10;
    if ((_DWORD)v9)
    {
LABEL_6:
      result = (char *)sub_223340F28(result, (uint64_t)&v19);
      if (!result)
        return result;
      v11 = *((unsigned int *)result + 8);
      if ((v11 & 0x80000000) != 0)
        return result;
      goto LABEL_11;
    }
  }
  v11 = *((unsigned int *)result + 10);
  if ((v11 & 0x80000000) != 0)
    return result;
LABEL_11:
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5[2601] - v5[2600]) >> 12) <= v11
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v14 = (uint64_t ***)a1[2];
  v15 = *a2;
  v16 = a2[1].i32[0];
  v17 = vadd_s32(*a2, (int32x2_t)0x800000008);
  v18 = v16 + 8;
  return sub_22397FD34(*v14, (int *)&v15, (uint64_t)&v15);
}

uint64_t sub_223B26124(uint64_t a1)
{
  uint64_t *v2;

  v2 = *(uint64_t **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_22316F8F4(v2 + 28);
    operator delete(v2);
  }
  return a1;
}

void sub_223B26168(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CCDE8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCDE8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.block");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CCDE0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CCDE8);
  }
  *a1 = qword_2540CCDE0;
}

void sub_223B26204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCDE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCDE8);
  _Unwind_Resume(a1);
}

void sub_223B2625C(_QWORD *a1, unsigned int a2)
{
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  unsigned int *v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  unsigned int v32;
  _QWORD *v33;

  v4 = (_QWORD *)*a1;
  v5 = a2;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*a1 + 20808) - *(_QWORD *)(*a1 + 20800)) >> 12) <= a2
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 335, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_12;
  }
  v7 = a1[1];
  v6 = (char *)a1[2];
  if ((a2 & 0x80000000) != 0)
  {
    v11 = 0;
    v10 = 0;
  }
  else
  {
    v8 = v4[2603];
    v9 = (v4[2604] - v8) >> 4;
    if (v9 <= v5)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 223, (uint64_t)"block_index < allocated_voxel_masks_.size()", 43, (uint64_t)"Invalid mask index", 18, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_12;
      }
      v8 = v4[2603];
      v9 = (v4[2604] - v8) >> 4;
    }
    v10 = *(_QWORD *)(v8 + 16 * v5);
    if (v9 <= v5)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 241, (uint64_t)"block_index < allocated_voxel_masks_.size()", 43, (uint64_t)"Invalid mask index", 18, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_12;
      }
      v8 = v4[2603];
    }
    v11 = *(_QWORD *)(v8 + 16 * v5 + 8);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4[2601] - v4[2600]) >> 12) <= v5
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
LABEL_12:
      abort();
    }
  }
  sub_223B1D134(v6, v10 | v11, (uint64_t **)(*(_QWORD *)v7 + 136), (uint64_t **)(*(_QWORD *)v7 + 160));
  v12 = (char *)v4[2607];
  v13 = v4[2608];
  if ((unint64_t)v12 < v13)
  {
    *(_DWORD *)v12 = a2;
    v14 = (uint64_t)(v12 + 4);
    goto LABEL_35;
  }
  v15 = (char *)v4[2606];
  v16 = (v12 - v15) >> 2;
  v17 = v16 + 1;
  if ((unint64_t)(v16 + 1) >> 62)
    sub_22316E078();
  v18 = v13 - (_QWORD)v15;
  if (v18 >> 1 > v17)
    v17 = v18 >> 1;
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
    v19 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 >> 62)
      sub_223174E94();
    v20 = operator new(4 * v19);
    v21 = (unsigned int *)&v20[4 * v16];
    v22 = &v20[4 * v19];
    *v21 = a2;
    v14 = (uint64_t)(v21 + 1);
    v23 = v12 - v15;
    if (v12 == v15)
      goto LABEL_33;
    goto LABEL_27;
  }
  v20 = 0;
  v21 = (unsigned int *)(4 * v16);
  v22 = 0;
  *(_DWORD *)(4 * v16) = a2;
  v14 = 4 * v16 + 4;
  v23 = v12 - v15;
  if (v12 != v15)
  {
LABEL_27:
    v24 = v23 - 4;
    if (v24 < 0x2C)
      goto LABEL_40;
    if ((unint64_t)(v15 - v20) < 0x20)
      goto LABEL_40;
    v25 = (v24 >> 2) + 1;
    v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
    v27 = &v12[-v26];
    v21 = (unsigned int *)((char *)v21 - v26);
    v28 = &v20[4 * v16 - 16];
    v29 = v12 - 16;
    v30 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *v28 = v31;
      v28 -= 2;
      v29 -= 32;
      v30 -= 8;
    }
    while (v30);
    v12 = v27;
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_40:
      do
      {
        v32 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *--v21 = v32;
      }
      while (v12 != v15);
    }
  }
LABEL_33:
  v4[2606] = v21;
  v4[2607] = v14;
  v4[2608] = v22;
  if (v15)
    operator delete(v15);
LABEL_35:
  v4[2607] = v14;
  v33 = (_QWORD *)(v4[2603] + 16 * v5);
  *v33 = 0;
  v33[1] = 0;
}

uint64_t sub_223B26574(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  void *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  void *v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  uint64_t v38;
  std::__shared_weak_count *v39;
  __int128 __p;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
    return a1;
  sub_223938204(a3);
  LOBYTE(__p) = 0;
  v42 = 0;
  sub_223937C0C((uint64_t)&v35, &__p, a4, &v43);
  if (v42 && v41 < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v37) < 0)
    operator delete(v35);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  v10 = *(void **)v8;
  v9 = *(std::__shared_weak_count **)(v8 + 8);
  v34 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = v44;
  v13 = v45;
  v33 = v45;
  v44 = 0;
  v45 = 0;
  v35 = v10;
  v36 = v9;
  if (v9)
  {
    v15 = (unint64_t *)&v9->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v37 = &off_24EC6A3B8;
  v38 = v14;
  v39 = v13;
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 16))(a1, &v35);
  v19 = v39;
  if (v39)
  {
    v20 = (unint64_t *)&v39->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v36;
  if (v36)
  {
    v23 = (unint64_t *)&v36->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v33)
  {
    v25 = (unint64_t *)&v33->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v34)
  {
    v27 = (unint64_t *)&v34->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      v29 = v45;
      if (v45)
        goto LABEL_36;
      return a1;
    }
  }
  v29 = v45;
  if (!v45)
    return a1;
LABEL_36:
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (v31)
    return a1;
  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
  std::__shared_weak_count::__release_weak(v29);
  return a1;
}

void sub_223B267E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  sub_2231AA880((uint64_t)va2);
  sub_2241231D8((uint64_t)va);
  sub_223167354((uint64_t)va1);
  sub_2241231D8(v2 - 56);
  _Unwind_Resume(a1);
}

void sub_223B2681C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a29 && a28 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *sub_223B26850(char **a1, uint64_t *a2, uint64_t *a3, size_t __sz)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  char **v17;
  char *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (__sz <= (v8 - (uint64_t)result) >> 5)
  {
    v18 = a1[1];
    v17 = a1 + 1;
    v16 = v18;
    v19 = (v18 - result) >> 5;
    if (v19 >= __sz)
    {
      v27 = result;
      if (a2 != a3)
      {
        v28 = result;
        do
        {
          v29 = *v6;
          *((_DWORD *)v28 + 2) = *((_DWORD *)v6 + 2);
          *(_QWORD *)v28 = v29;
          v30 = *(uint64_t *)((char *)v6 + 12);
          *((_DWORD *)v28 + 5) = *((_DWORD *)v6 + 5);
          *(_QWORD *)(v28 + 12) = v30;
          LODWORD(v30) = *((_DWORD *)v6 + 6);
          v28[28] = *((_BYTE *)v6 + 28);
          *((_DWORD *)v28 + 6) = v30;
          v27 += 32;
          v6 += 4;
          v28 += 32;
        }
        while (v6 != a3);
      }
      *v17 = v27;
    }
    else
    {
      v20 = &a2[4 * v19];
      if (v16 != result)
      {
        do
        {
          v21 = *v6;
          *((_DWORD *)result + 2) = *((_DWORD *)v6 + 2);
          *(_QWORD *)result = v21;
          v22 = *(uint64_t *)((char *)v6 + 12);
          *((_DWORD *)result + 5) = *((_DWORD *)v6 + 5);
          *(_QWORD *)(result + 12) = v22;
          LODWORD(v22) = *((_DWORD *)v6 + 6);
          result[28] = *((_BYTE *)v6 + 28);
          *((_DWORD *)result + 6) = v22;
          v6 += 4;
          result += 32;
        }
        while (v6 != v20);
        result = *v17;
      }
      v23 = result;
      if (v20 != a3)
      {
        v23 = result;
        v24 = result;
        do
        {
          v25 = *v20;
          *((_DWORD *)v24 + 2) = *((_DWORD *)v20 + 2);
          *(_QWORD *)v24 = v25;
          v26 = *(uint64_t *)((char *)v20 + 12);
          *((_DWORD *)v24 + 5) = *((_DWORD *)v20 + 5);
          *(_QWORD *)(v24 + 12) = v26;
          LODWORD(v26) = *((_DWORD *)v20 + 6);
          v24[28] = *((_BYTE *)v20 + 28);
          *((_DWORD *)v24 + 6) = v26;
          v23 += 32;
          v20 += 4;
          v24 += 32;
        }
        while (v20 != a3);
      }
      *v17 = v23;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz >> 59)
      goto LABEL_26;
    v10 = v8 >> 4;
    if (v8 >> 4 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    v12 = 0x7FFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 59)
LABEL_26:
      sub_22316E078();
    v13 = 32 * v12;
    result = (char *)operator new(32 * v12);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v14 = result;
    if (v6 != a3)
    {
      v14 = result;
      do
      {
        *(_QWORD *)v14 = *v6;
        *((_DWORD *)v14 + 2) = *((_DWORD *)v6 + 2);
        *(_QWORD *)(v14 + 12) = *(uint64_t *)((char *)v6 + 12);
        v15 = *((_DWORD *)v6 + 6);
        *((_DWORD *)v14 + 5) = *((_DWORD *)v6 + 5);
        *((_DWORD *)v14 + 6) = v15;
        v14[28] = *((_BYTE *)v6 + 28);
        v14 += 32;
        v6 += 4;
      }
      while (v6 != a3);
    }
    a1[1] = v14;
  }
  return result;
}

void sub_223B26AA0(char **a1, char *a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *i;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  v7 = (unint64_t)(a2 + 11) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = (char *)operator new((unint64_t)&a2[16 * (_QWORD)a2 + 11] & 0xFFFFFFFFFFFFFFFCLL);
  *a1 = v8;
  a1[1] = &v8[v7];
  memset(v8, 128, (size_t)(a2 + 8));
  a2[(_QWORD)v8] = -1;
  v9 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (char *)7)
    v9 = 6;
  a1[4] = (char *)(v9 - (_QWORD)a1[2]);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((i[(_QWORD)v4] & 0x80000000) == 0)
      {
        v15 = &v5[16 * (_QWORD)i];
        v16 = (19349669 * *((int *)v15 + 1)) ^ (73856093 * *(int *)v15) ^ (83492791 * *((int *)v15 + 2));
        v17 = *a1;
        v18 = a1[3];
        v19 = ((v16 >> 7) ^ 0x13701D) & (unint64_t)v18;
        v20 = *(_QWORD *)&(*a1)[v19] & (~*(_QWORD *)&(*a1)[v19] << 7) & 0x8080808080808080;
        if (!v20)
        {
          v21 = 8;
          do
          {
            v19 = (v19 + v21) & (unint64_t)v18;
            v21 += 8;
            v20 = *(_QWORD *)&v17[v19] & (~*(_QWORD *)&v17[v19] << 7) & 0x8080808080808080;
          }
          while (!v20);
        }
        v11 = (v19 + (__clz(__rbit64(v20)) >> 3)) & (unint64_t)v18;
        v12 = v16 & 0x7F;
        v17[v11] = v12;
        v17[((v11 - 7) & (unint64_t)v18) + (v18 & 7)] = v12;
        v13 = (uint64_t)&a1[1][16 * v11];
        v14 = *(_QWORD *)v15;
        *(_DWORD *)(v13 + 8) = *((_DWORD *)v15 + 2);
        *(_QWORD *)v13 = v14;
        *(_DWORD *)(v13 + 12) = *((_DWORD *)v15 + 3);
      }
    }
    operator delete(v4);
  }
}

uint64_t sub_223B26C48(uint64_t result, int a2, int a3, int a4, uint64_t a5, uint64_t a6, double a7, double a8, float32x4_t a9, double a10, double a11, double a12)
{
  uint64_t v12;
  uint64_t v13;
  __int32 v14;
  uint64_t v15;
  _BYTE *v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  _BYTE *v20;
  int32x2_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  unsigned int v26;
  _BYTE *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  int v66;
  int v67;
  unsigned int v68;
  float32x4_t v69;
  unsigned int v70;
  char *v71;
  unsigned __int8 *v72;
  uint64_t v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  float32x4_t v77;
  float32x4_t v78;
  unsigned int v79;
  int v80;
  float32x4_t v81;
  unsigned int v82;
  float32x4_t v83;
  double v84;
  char *v85;
  unsigned __int8 *v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  _BYTE *v99;
  unsigned int v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unsigned __int8 *v107;
  unsigned int v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int8 *v127;
  uint64_t v128;
  _BYTE *v129;
  uint64_t v130;
  _BYTE *v131;
  int v132;
  int v133;
  uint64_t v134;
  _BYTE *v135;
  int v136;
  int v137;
  uint64_t v138;
  _BYTE *v139;
  int v140;
  uint64_t v141;
  _BYTE *v142;
  int v143;
  int v144;
  uint64_t v145;
  _BYTE *v146;
  int v147;
  int v148;
  uint64_t v149;
  _BYTE *v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  _BYTE *v155;
  uint64_t v156;
  int v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  char *v161;
  unsigned __int8 *v162;
  uint64_t v163;
  unsigned int v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  unsigned int v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  unsigned __int8 *v179;
  unsigned int v180;
  BOOL v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  char *v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  char *v207;
  unsigned int v208;
  unsigned __int8 *v209;
  unsigned int v210;
  BOOL v211;
  uint64_t v212;
  unsigned int v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  unsigned int v219;
  uint64_t v220;
  unsigned int v221;
  uint64_t v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  unsigned __int8 *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  int v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  int v255;
  int v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  int v260;
  int v261;
  unsigned int v262;
  int v263;
  unsigned int v264;
  char *v265;
  unsigned __int8 *v266;
  uint64_t v267;
  unsigned int v268;
  char *v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  char *v275;
  unsigned int v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  unsigned __int8 *v283;
  unsigned int v284;
  BOOL v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unsigned __int8 *v301;
  char *v302;
  _DWORD *v303;
  int v304;
  int v305;
  float32x4_t v306;
  __int128 v307;
  int32x2_t v308;
  int v309;
  __int128 v310;
  int32x2_t *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int32x2_t v315;
  int v316;
  _BYTE v317[32];
  __int32 v318;
  uint64_t v319;
  __int32 v320;
  uint64_t v321;
  __int32 v322;
  uint64_t v323;
  __int32 v324;
  uint64_t v325;
  __int32 v326;
  uint64_t v327;
  __int32 v328;
  _OWORD v329[2];
  uint64_t v330;
  __int32 v331;
  uint64_t v332;
  __int32 v333;
  uint64_t v334;
  __int32 v335;
  uint64_t v336;
  __int32 v337;
  uint64_t v338;
  __int32 v339;
  uint64_t v340;
  __int32 v341;
  uint64_t v342;
  __int32 v343;
  uint64_t v344;
  __int32 v345;
  _BYTE v346[8];
  _BYTE v347[8];
  char v348;
  char v349;
  char v350;
  char v351;
  char v352;
  char v353;
  char v354;
  char v355;
  uint64_t v356;
  __int32 v357;
  unsigned __int8 v358;
  unsigned __int8 v359;
  char v360;
  unsigned __int8 v361;
  unsigned __int8 v362;
  char v363;
  unsigned __int8 v364;
  unsigned __int8 v365;
  uint64_t v366;

  v12 = 0;
  v366 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)result;
  v14 = *(_DWORD *)(*(_QWORD *)result + 4) + a3;
  v315.i32[0] = **(_DWORD **)result + a2;
  v315.i32[1] = v14;
  v316 = *(_DWORD *)(v13 + 8) + a4;
  v310 = *(_OWORD *)(result + 8);
  v15 = *(_QWORD *)(result + 24);
  v16 = *(_BYTE **)(result + 32);
  v311 = &v315;
  v312 = v15;
  v313 = a5;
  v314 = a6;
  *v16 = 8;
  v17 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v18.i64[0] = 0x3F0000003F000000;
  v18.i64[1] = 0x3F0000003F000000;
  do
  {
    v19 = byte_22466137A[v12];
    v20 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8 * *(unsigned __int8 *)(a5 + v19))
                  + 40 * *(unsigned int *)(a6 + 4 * v19));
    v21 = (int32x2_t *)((char *)&unk_224661384 + 12 * v19);
    v22.i32[1] = v315.i32[1];
    *(float32x2_t *)a9.f32 = vcvt_f32_s32(vadd_s32(v315, *v21));
    v22.f32[0] = (float)(v316 + v21[1].i32[0]);
    a9.f32[2] = v22.f32[0];
    v23 = vaddq_f32(a9, v18);
    if (!v20[6])
    {
      v22.i8[0] = v20[3];
      v24 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v22.f32));
      v24.f32[0] = (float)v24.i32[0];
      LOBYTE(a11) = v20[4];
      *(_QWORD *)&a11 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a11)).u64[0];
      *(float *)&a11 = (float)SLODWORD(a11);
      LOBYTE(a12) = v20[5];
      *(_QWORD *)&a12 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a12)).u64[0];
      *(float *)&a12 = (float)SLODWORD(a12);
      v24.i32[1] = LODWORD(a11);
      v24.i32[2] = LODWORD(a12);
      v22 = vmulq_f32(v24, v17);
      v23 = vaddq_f32(v23, v22);
    }
    v22.i32[0] = **(_DWORD **)(result + 48);
    a9 = vmulq_n_f32(v23, v22.f32[0]);
    v25 = *(_QWORD *)(result + 40) + 12 * byte_22466137A[v12];
    *(_QWORD *)v25 = a9.i64[0];
    *(_DWORD *)(v25 + 8) = a9.i32[2];
    v26 = v20[6];
    v27 = *(_BYTE **)(result + 56);
    v27[v19] = (char)v26 > 0;
    v28 = *(unsigned __int8 **)(result + 64);
    v28[v19] = v26 >> 7;
    v29 = *(_QWORD *)(result + 72);
    *(_BYTE *)(v29 + v19) = v27[v19] ^ 1;
    if (v27[v19])
    {
      v30 = *(_BYTE **)(result + 32);
      if (*v30 == 8)
        *v30 = v19;
    }
    ++v12;
  }
  while (v12 != 8);
  v31 = **(unsigned __int8 **)(result + 32);
  if ((_DWORD)v31 != 8)
  {
    *(int32x2_t *)v18.f32 = v315;
    v308 = vadd_s32(v315, (int32x2_t)(*(_QWORD *)&vshl_u32((uint32x2_t)vdup_n_s32(v31), (uint32x2_t)-2) & 0xFFFFFF01FFFFFF01));
    v309 = v316 + (v31 & 1);
    v32 = *(_QWORD *)(result + 40);
    v303 = *(_DWORD **)(result + 8);
    v306.i64[0] = (uint64_t)&v310;
    v306.i64[1] = v32;
    *(_QWORD *)&v307 = *(_QWORD *)(result + 80);
    *((_QWORD *)&v307 + 1) = &v308;
    if ((_DWORD)v31)
    {
      v33 = (unsigned __int8 *)&unk_2246613E4 + 9 * v31;
      v34 = *v33;
      v35 = v32 + 12 * v34;
      *(_QWORD *)v317 = *(_QWORD *)v35;
      *(_DWORD *)&v317[8] = *(_DWORD *)(v35 + 8);
      v348 = v27[v34];
      v347[0] = v28[v34];
      v346[0] = *(_BYTE *)(v29 + v34);
      v36 = v33[1];
      v37 = v32 + 12 * v36;
      *(_QWORD *)&v317[12] = *(_QWORD *)v37;
      *(_DWORD *)&v317[20] = *(_DWORD *)(v37 + 8);
      v349 = v27[v36];
      v38 = v28[v36];
      v347[1] = v28[v36];
      v346[1] = *(_BYTE *)(v29 + v36);
      v39 = v33[2];
      v40 = (uint64_t *)(v32 + 12 * v39);
      v41 = *v40;
      LODWORD(v40) = *((_DWORD *)v40 + 2);
      v42 = v27[v39];
      *(_QWORD *)&v317[24] = v41;
      v350 = v42;
      v43 = v28[v39];
      LOBYTE(v39) = *(_BYTE *)(v29 + v39);
      v347[2] = v43;
      v346[2] = v39;
      v44 = v33[3];
      v45 = (uint64_t *)(v32 + 12 * v44);
      v46 = *v45;
      LODWORD(v45) = *((_DWORD *)v45 + 2);
      v318 = (int)v40;
      v320 = (int)v45;
      v319 = v46;
      result = v27[v44];
      v351 = v27[v44];
      v47 = v28[v44];
      v347[3] = v28[v44];
      v346[3] = *(_BYTE *)(v29 + v44);
      v48 = v33[4];
      v49 = (uint64_t *)(v32 + 12 * v48);
      v50 = *v49;
      LODWORD(v49) = *((_DWORD *)v49 + 2);
      v51 = v27[v48];
      v321 = v50;
      v352 = v51;
      v52 = v28[v48];
      LOBYTE(v48) = *(_BYTE *)(v29 + v48);
      v347[4] = v52;
      v346[4] = v48;
      v53 = v33[5];
      v54 = (uint64_t *)(v32 + 12 * v53);
      v55 = *v54;
      LODWORD(v54) = *((_DWORD *)v54 + 2);
      v322 = (int)v49;
      v324 = (int)v54;
      v323 = v55;
      v56 = v27[v53];
      v353 = v27[v53];
      v57 = v28[v53];
      v347[5] = v28[v53];
      v346[5] = *(_BYTE *)(v29 + v53);
      v58 = v33[6];
      v59 = (uint64_t *)(v32 + 12 * v58);
      v60 = *v59;
      LODWORD(v59) = *((_DWORD *)v59 + 2);
      v61 = v27[v58];
      v325 = v60;
      v354 = v61;
      v62 = v28[v58];
      LOBYTE(v58) = *(_BYTE *)(v29 + v58);
      v347[6] = v62;
      v346[6] = v58;
      v301 = v33;
      v63 = v33[7];
      v64 = (uint64_t *)(v32 + 12 * v63);
      v65 = *v64;
      LODWORD(v64) = *((_DWORD *)v64 + 2);
      v326 = (int)v59;
      v328 = (int)v64;
      v327 = v65;
      v66 = v27[v63];
      v355 = v27[v63];
      v67 = v28[v63];
      v347[7] = v28[v63];
      v346[7] = *(_BYTE *)(v29 + v63);
      if (v349)
      {
        v68 = 0;
        v38 = 0;
        v69 = 0uLL;
        if (v42)
          goto LABEL_13;
      }
      else
      {
        v17.i64[0] = *(_QWORD *)&v317[12];
        v17.i32[2] = *(_DWORD *)&v317[20];
        v18 = 0uLL;
        v69 = vaddq_f32(v17, (float32x4_t)0);
        v68 = 1;
        if (v42)
        {
LABEL_13:
          v70 = v68;
          if ((_DWORD)result)
            goto LABEL_15;
          goto LABEL_14;
        }
      }
      v70 = v68 | 2;
      v18.i64[0] = *(_QWORD *)&v317[24];
      v18.i32[2] = v318;
      v69 = vaddq_f32(v69, v18);
      ++v68;
      v38 += v43;
      if ((_DWORD)result)
      {
LABEL_15:
        if (v51)
        {
          if (v56)
            goto LABEL_17;
        }
        else
        {
          v70 |= 8u;
          v18.i64[0] = v321;
          v18.i32[2] = v322;
          v69 = vaddq_f32(v69, v18);
          ++v68;
          v38 += v52;
          if (v56)
          {
LABEL_17:
            if (v61)
              goto LABEL_18;
            goto LABEL_39;
          }
        }
        v70 |= 0x10u;
        v18.i64[0] = v323;
        v18.i32[2] = v324;
        v69 = vaddq_f32(v69, v18);
        ++v68;
        v38 += v57;
        if (v61)
        {
LABEL_18:
          if (v66)
            goto LABEL_19;
LABEL_40:
          v70 |= 0x40u;
          v18.i64[0] = v327;
          v18.i32[2] = v328;
          v69 = vaddq_f32(v69, v18);
          ++v68;
          v38 += v67;
LABEL_19:
          ++*v303;
          v71 = (char *)&byte_22466142C[48 * v70];
          v74 = v71[31];
          v72 = (unsigned __int8 *)(v71 + 31);
          v73 = v74;
          if (v74 == 8)
          {
            v75 = v38;
            LOBYTE(v76) = v70;
            goto LABEL_60;
          }
          if (v346[v73])
          {
            v76 = v70 + (-1 << (v73 - 1));
            v91 = &v317[12 * v73];
            v18.i64[0] = *(_QWORD *)v91;
            v18.i32[2] = *((_DWORD *)v91 + 2);
            v69 = vsubq_f32(v69, v18);
            --v68;
            v75 = v38 - (char)v347[v73];
            v92 = v72[1];
            if ((_DWORD)v92 == 8)
              goto LABEL_60;
          }
          else
          {
            v75 = v38;
            v76 = v70;
            v92 = v72[1];
            if ((_DWORD)v92 == 8)
              goto LABEL_60;
          }
          if (v346[v92])
          {
            v76 += -1 << (v92 - 1);
            v95 = &v317[12 * v92];
            v18.i64[0] = *(_QWORD *)v95;
            v18.i32[2] = *((_DWORD *)v95 + 2);
            v69 = vsubq_f32(v69, v18);
            --v68;
            v75 -= (char)v347[v92];
          }
          v96 = v72[2];
          if ((_DWORD)v96 != 8)
          {
            if (v346[v96])
            {
              v76 += -1 << (v96 - 1);
              v97 = &v317[12 * v72[2]];
              v18.i64[0] = *(_QWORD *)v97;
              v18.i32[2] = *((_DWORD *)v97 + 2);
              v69 = vsubq_f32(v69, v18);
              --v68;
              v75 -= (char)v347[v96];
            }
            v98 = v72[3];
            if ((_DWORD)v98 != 8 && v346[v98])
            {
              v76 += -1 << (v98 - 1);
              v99 = &v317[12 * v98];
              v18.i64[0] = *(_QWORD *)v99;
              v18.i32[2] = *((_DWORD *)v99 + 2);
              v69 = vsubq_f32(v69, v18);
              --v68;
              v75 -= (char)v347[v98];
            }
          }
LABEL_60:
          if (v68)
          {
            v18.f32[0] = (float)v68;
            v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 0);
            v69 = vdivq_f32(v69, v18);
          }
          v331 = v69.i32[2];
          v330 = v69.i64[0];
          v100 = v76;
          v101 = (char *)&byte_22466142C[48 * v76];
          v102 = v101[1];
          if (v102 != 8)
          {
            result = sub_223B28F4C((uint64_t)&v306, 1, v301[v102], v301[v101[2]], v301[v101[3]], v301[v101[4]], &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
            v103 = v101[5];
            if (v103 != 8)
            {
              result = sub_223B28F4C((uint64_t)&v306, 1, v301[v103], v301[v101[6]], v301[v101[7]], v301[v101[8]], &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              v104 = v101[9];
              if (v104 != 8)
                result = sub_223B28F4C((uint64_t)&v306, 1, v301[v104], v301[v101[10]], v301[v101[11]], v301[v101[12]], &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
            }
          }
          v105 = (char *)&byte_22466142C[48 * v100];
          v108 = v105[13];
          v107 = (unsigned __int8 *)(v105 + 13);
          v106 = v108;
          v109 = v108 == 8;
          if (*v101)
          {
            if (v109)
              goto LABEL_93;
            v110 = v107[1];
            if (v346[v110])
              result = sub_223B28F4C((uint64_t)&v306, 0, v301[v106], v301[v110], v301[v107[2]], 8u, &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
            v111 = v107[3];
            if (v111 == 8)
              goto LABEL_93;
            v112 = v107[4];
            if (v346[v112])
              result = sub_223B28F4C((uint64_t)&v306, 0, v301[v111], v301[v112], v301[v107[5]], 8u, &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
            v113 = v107[6];
            if (v113 == 8)
              goto LABEL_93;
            v114 = v107[7];
            if (v346[v114])
              result = sub_223B28F4C((uint64_t)&v306, 0, v301[v113], v301[v114], v301[v107[8]], 8u, &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
            v115 = v107[9];
            if (v115 == 8)
              goto LABEL_93;
            v116 = v107[10];
            if (v346[v116])
              result = sub_223B28F4C((uint64_t)&v306, 0, v301[v115], v301[v116], v301[v107[11]], 8u, &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
            v117 = v107[12];
            if (v117 == 8)
              goto LABEL_93;
            v118 = v107[13];
            if (v346[v118])
              result = sub_223B28F4C((uint64_t)&v306, 0, v301[v117], v301[v118], v301[v107[14]], 8u, &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
            v119 = v107[15];
            if (v119 == 8)
              goto LABEL_93;
            v120 = v107[16];
            if (!v346[v120])
              goto LABEL_93;
          }
          else
          {
            if (v109)
              goto LABEL_93;
            result = sub_223B28F4C((uint64_t)&v306, 0, v301[v106], v301[v107[1]], v301[v107[2]], 8u, &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
            v121 = v107[3];
            if (v121 == 8)
              goto LABEL_93;
            result = sub_223B28F4C((uint64_t)&v306, 0, v301[v121], v301[v107[4]], v301[v107[5]], 8u, &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
            v122 = v107[6];
            if (v122 == 8)
              goto LABEL_93;
            result = sub_223B28F4C((uint64_t)&v306, 0, v301[v122], v301[v107[7]], v301[v107[8]], 8u, &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
            v123 = v107[9];
            if (v123 == 8)
              goto LABEL_93;
            result = sub_223B28F4C((uint64_t)&v306, 0, v301[v123], v301[v107[10]], v301[v107[11]], 8u, &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
            v124 = v107[12];
            if (v124 == 8)
              goto LABEL_93;
            result = sub_223B28F4C((uint64_t)&v306, 0, v301[v124], v301[v107[13]], v301[v107[14]], 8u, &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
            v119 = v107[15];
            if (v119 == 8)
              goto LABEL_93;
            v120 = v107[16];
          }
          result = sub_223B28F4C((uint64_t)&v306, 0, v301[v119], v301[v120], v301[v107[17]], 8u, &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
LABEL_93:
          v125 = 0;
          while (1)
          {
            v126 = byte_22466142C[48 * v70 + 35 + v125];
            if (v126 == 8)
              return result;
            v127 = (unsigned __int8 *)&unk_2246613E4 + 9 * v126;
            v128 = *v127;
            v129 = &v317[12 * v128];
            v330 = *(_QWORD *)v129;
            v331 = *((_DWORD *)v129 + 2);
            LOBYTE(v356) = v347[v128];
            v358 = v346[v128];
            v130 = v127[1];
            v131 = &v317[12 * v130];
            v332 = *(_QWORD *)v131;
            v333 = *((_DWORD *)v131 + 2);
            v132 = *(&v348 + v130);
            v133 = v347[v130];
            BYTE1(v356) = v347[v130];
            v359 = v346[v130];
            v134 = v127[2];
            v135 = &v317[12 * v134];
            v334 = *(_QWORD *)v135;
            v335 = *((_DWORD *)v135 + 2);
            v136 = *(&v348 + v134);
            v137 = v347[v134];
            LOBYTE(v134) = v346[v134];
            BYTE2(v356) = v137;
            v360 = v134;
            v138 = v127[3];
            v139 = &v317[12 * v138];
            v336 = *(_QWORD *)v139;
            v337 = *((_DWORD *)v139 + 2);
            v140 = *(&v348 + v138);
            result = v347[v138];
            BYTE3(v356) = v347[v138];
            v361 = v346[v138];
            v141 = v127[4];
            v142 = &v317[12 * v141];
            v339 = *((_DWORD *)v142 + 2);
            v338 = *(_QWORD *)v142;
            v143 = *(&v348 + v141);
            v144 = v347[v141];
            BYTE4(v356) = v347[v141];
            v362 = v346[v141];
            v145 = v127[5];
            v146 = &v317[12 * v145];
            v341 = *((_DWORD *)v146 + 2);
            v340 = *(_QWORD *)v146;
            v147 = *(&v348 + v145);
            v148 = v347[v145];
            LOBYTE(v145) = v346[v145];
            BYTE5(v356) = v148;
            v363 = v145;
            v149 = v127[6];
            v150 = &v317[12 * v149];
            v151 = *(_QWORD *)v150;
            v343 = *((_DWORD *)v150 + 2);
            v342 = v151;
            v152 = *(&v348 + v149);
            v153 = v347[v149];
            BYTE6(v356) = v347[v149];
            v364 = v346[v149];
            v154 = v127[7];
            v155 = &v317[12 * v154];
            v156 = *(_QWORD *)v155;
            v345 = *((_DWORD *)v155 + 2);
            v344 = v156;
            v157 = *(&v348 + v154);
            v158 = v347[v154];
            HIBYTE(v356) = v347[v154];
            v365 = v346[v154];
            if (v132)
            {
              v159 = 0;
              v69 = 0uLL;
              if (v136)
                goto LABEL_99;
            }
            else
            {
              v69.i64[0] = v332;
              v69.i32[2] = v333;
              v18 = 0uLL;
              v69 = vaddq_f32(v69, (float32x4_t)0);
              v38 += v133;
              v159 = 1;
              if (v136)
              {
LABEL_99:
                v160 = v159;
                if (v140)
                  goto LABEL_100;
                goto LABEL_143;
              }
            }
            v160 = v159 | 2;
            v18.i64[0] = v334;
            v18.i32[2] = v335;
            v69 = vaddq_f32(v69, v18);
            ++v159;
            v38 += v137;
            if (v140)
            {
LABEL_100:
              if (v143)
                goto LABEL_101;
              goto LABEL_144;
            }
LABEL_143:
            v160 |= 4u;
            v18.i64[0] = v336;
            v18.i32[2] = v337;
            v69 = vaddq_f32(v69, v18);
            ++v159;
            v38 += result;
            if (v143)
            {
LABEL_101:
              if (v147)
                goto LABEL_102;
              goto LABEL_145;
            }
LABEL_144:
            v160 |= 8u;
            v18.i64[0] = v338;
            v18.i32[2] = v339;
            v69 = vaddq_f32(v69, v18);
            ++v159;
            v38 += v144;
            if (v147)
            {
LABEL_102:
              if (!v152)
                goto LABEL_146;
              goto LABEL_103;
            }
LABEL_145:
            v160 |= 0x10u;
            v18.i64[0] = v340;
            v18.i32[2] = v341;
            v69 = vaddq_f32(v69, v18);
            ++v159;
            v38 += v148;
            if (!v152)
            {
LABEL_146:
              v160 |= 0x20u;
              v18.i64[0] = v342;
              v18.i32[2] = v343;
              v69 = vaddq_f32(v69, v18);
              ++v159;
              v38 += v153;
              if (v157)
                goto LABEL_104;
              goto LABEL_147;
            }
LABEL_103:
            if (v157)
              goto LABEL_104;
LABEL_147:
            v160 |= 0x40u;
            v18.i64[0] = v344;
            v18.i32[2] = v345;
            v69 = vaddq_f32(v69, v18);
            ++v159;
            v38 += v158;
LABEL_104:
            ++*v303;
            v161 = (char *)&byte_22466142C[48 * v160];
            v164 = v161[31];
            v162 = (unsigned __int8 *)(v161 + 31);
            v163 = v164;
            v304 = v38;
            if (v164 != 8)
            {
              if (*(&v358 + v163))
              {
                v165 = (char *)&v330 + 12 * v163;
                v18.i64[0] = *(_QWORD *)v165;
                v18.i32[2] = *((_DWORD *)v165 + 2);
                v160 += -1 << (v163 - 1);
                v69 = vsubq_f32(v69, v18);
                --v159;
                v38 -= *((char *)&v356 + v163);
              }
              v166 = v162[1];
              if ((_DWORD)v166 != 8)
              {
                if (*(&v358 + v166))
                {
                  v167 = (char *)&v330 + 12 * v162[1];
                  v18.i64[0] = *(_QWORD *)v167;
                  v18.i32[2] = *((_DWORD *)v167 + 2);
                  v160 += -1 << (v166 - 1);
                  v69 = vsubq_f32(v69, v18);
                  --v159;
                  v38 -= *((char *)&v356 + v166);
                }
                v168 = v162[2];
                if ((_DWORD)v168 != 8)
                {
                  if (*(&v358 + v168))
                  {
                    v169 = (char *)&v330 + 12 * v162[2];
                    v18.i64[0] = *(_QWORD *)v169;
                    v18.i32[2] = *((_DWORD *)v169 + 2);
                    v160 += -1 << (v168 - 1);
                    v69 = vsubq_f32(v69, v18);
                    --v159;
                    v38 -= *((char *)&v356 + v168);
                  }
                  v170 = v162[3];
                  if ((_DWORD)v170 != 8 && *(&v358 + v170))
                  {
                    v171 = (char *)&v330 + 12 * v170;
                    v18.i64[0] = *(_QWORD *)v171;
                    v18.i32[2] = *((_DWORD *)v171 + 2);
                    v160 += -1 << (v170 - 1);
                    v69 = vsubq_f32(v69, v18);
                    --v159;
                    v38 -= *((char *)&v356 + v170);
                  }
                }
              }
            }
            if (v159)
            {
              v18.f32[0] = (float)v159;
              v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 0);
              v69 = vdivq_f32(v69, v18);
            }
            DWORD2(v329[0]) = v69.i32[2];
            *(_QWORD *)&v329[0] = v69.i64[0];
            v172 = v160;
            v173 = (char *)&byte_22466142C[48 * v160];
            v174 = v173[1];
            if (v174 != 8)
            {
              result = sub_223B28F4C((uint64_t)&v306, 1, v301[v127[v174]], v301[v127[v173[2]]], v301[v127[v173[3]]], v301[v127[v173[4]]], (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              v175 = v173[5];
              if (v175 != 8)
              {
                result = sub_223B28F4C((uint64_t)&v306, 1, v301[v127[v175]], v301[v127[v173[6]]], v301[v127[v173[7]]], v301[v127[v173[8]]], (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
                v176 = v173[9];
                if (v176 != 8)
                  result = sub_223B28F4C((uint64_t)&v306, 1, v301[v127[v176]], v301[v127[v173[10]]], v301[v127[v173[11]]], v301[v127[v173[12]]], (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              }
            }
            v177 = (char *)&byte_22466142C[48 * v172];
            v180 = v177[13];
            v179 = (unsigned __int8 *)(v177 + 13);
            v178 = v180;
            v181 = v180 == 8;
            if (*v173)
            {
              if (v181)
                goto LABEL_95;
              v182 = v179[1];
              if (*(&v358 + v182))
                result = sub_223B28F4C((uint64_t)&v306, 0, v301[v127[v178]], v301[v127[v182]], v301[v127[v179[2]]], 8u, (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              v183 = v179[3];
              if (v183 == 8)
                goto LABEL_95;
              v184 = v179[4];
              if (*(&v358 + v184))
                result = sub_223B28F4C((uint64_t)&v306, 0, v301[v127[v183]], v301[v127[v184]], v301[v127[v179[5]]], 8u, (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              v185 = v179[6];
              if (v185 == 8)
                goto LABEL_95;
              v186 = v179[7];
              if (*(&v358 + v186))
                result = sub_223B28F4C((uint64_t)&v306, 0, v301[v127[v185]], v301[v127[v186]], v301[v127[v179[8]]], 8u, (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              v187 = v179[9];
              if (v187 == 8)
                goto LABEL_95;
              v188 = v179[10];
              if (*(&v358 + v188))
                result = sub_223B28F4C((uint64_t)&v306, 0, v301[v127[v187]], v301[v127[v188]], v301[v127[v179[11]]], 8u, (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              v189 = v179[12];
              if (v189 == 8)
                goto LABEL_95;
              v190 = v179[13];
              if (*(&v358 + v190))
                result = sub_223B28F4C((uint64_t)&v306, 0, v301[v127[v189]], v301[v127[v190]], v301[v127[v179[14]]], 8u, (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              v191 = v179[15];
              if (v191 == 8)
                goto LABEL_95;
              v192 = v179[16];
              if (!*(&v358 + v192))
                goto LABEL_95;
            }
            else
            {
              if (v181)
                goto LABEL_95;
              result = sub_223B28F4C((uint64_t)&v306, 0, v301[v127[v178]], v301[v127[v179[1]]], v301[v127[v179[2]]], 8u, (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              v193 = v179[3];
              if (v193 == 8)
                goto LABEL_95;
              result = sub_223B28F4C((uint64_t)&v306, 0, v301[v127[v193]], v301[v127[v179[4]]], v301[v127[v179[5]]], 8u, (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              v194 = v179[6];
              if (v194 == 8)
                goto LABEL_95;
              result = sub_223B28F4C((uint64_t)&v306, 0, v301[v127[v194]], v301[v127[v179[7]]], v301[v127[v179[8]]], 8u, (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              v195 = v179[9];
              if (v195 == 8)
                goto LABEL_95;
              result = sub_223B28F4C((uint64_t)&v306, 0, v301[v127[v195]], v301[v127[v179[10]]], v301[v127[v179[11]]], 8u, (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              v196 = v179[12];
              if (v196 == 8)
                goto LABEL_95;
              result = sub_223B28F4C((uint64_t)&v306, 0, v301[v127[v196]], v301[v127[v179[13]]], v301[v127[v179[14]]], 8u, (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              v191 = v179[15];
              if (v191 == 8)
                goto LABEL_95;
              v192 = v179[16];
            }
            result = sub_223B28F4C((uint64_t)&v306, 0, v301[v127[v191]], v301[v127[v192]], v301[v127[v179[17]]], 8u, (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
LABEL_95:
            ++v125;
            v38 = v304;
            if (v125 == 3)
              return result;
          }
        }
LABEL_39:
        v70 |= 0x20u;
        v18.i64[0] = v325;
        v18.i32[2] = v326;
        v69 = vaddq_f32(v69, v18);
        ++v68;
        v38 += v62;
        if (v66)
          goto LABEL_19;
        goto LABEL_40;
      }
LABEL_14:
      v70 |= 4u;
      v18.i64[0] = v319;
      result = (uint64_t)&v320;
      v18.i32[2] = v320;
      v69 = vaddq_f32(v69, v18);
      ++v68;
      v38 += v47;
      goto LABEL_15;
    }
    v77.i32[3] = v306.i32[3];
    v78.i32[3] = HIDWORD(v307);
    v329[0] = v306;
    v329[1] = v307;
    if (v27[1])
    {
      v79 = 0;
      v80 = 0;
      v81 = 0uLL;
      if (v27[2])
        goto LABEL_23;
    }
    else
    {
      v77.i64[0] = *(_QWORD *)(v32 + 12);
      v77.i32[2] = *(_DWORD *)(v32 + 20);
      v78.i32[3] = 0;
      v81 = vaddq_f32(v77, (float32x4_t)0);
      v80 = v28[1];
      v79 = 1;
      if (v27[2])
      {
LABEL_23:
        v82 = v79;
        if (v27[3])
          goto LABEL_25;
        goto LABEL_24;
      }
    }
    v82 = v79 | 2;
    v78.i64[0] = *(_QWORD *)(v32 + 24);
    v78.i32[2] = *(_DWORD *)(v32 + 32);
    v81 = vaddq_f32(v81, v78);
    ++v79;
    v80 += v28[2];
    if (v27[3])
    {
LABEL_25:
      if (v27[4])
      {
        if (v27[5])
          goto LABEL_27;
      }
      else
      {
        v82 |= 8u;
        v78.i64[0] = *(_QWORD *)(v32 + 48);
        v78.i32[2] = *(_DWORD *)(v32 + 56);
        v81 = vaddq_f32(v81, v78);
        ++v79;
        v80 += v28[4];
        if (v27[5])
        {
LABEL_27:
          if (v27[6])
            goto LABEL_28;
          goto LABEL_49;
        }
      }
      v82 |= 0x10u;
      v78.i64[0] = *(_QWORD *)(v32 + 60);
      v78.i32[2] = *(_DWORD *)(v32 + 68);
      v81 = vaddq_f32(v81, v78);
      ++v79;
      v80 += v28[5];
      if (v27[6])
      {
LABEL_28:
        if (v27[7])
          goto LABEL_29;
LABEL_50:
        v82 |= 0x40u;
        v78.i64[0] = *(_QWORD *)(v32 + 84);
        v78.i32[2] = *(_DWORD *)(v32 + 92);
        v81 = vaddq_f32(v81, v78);
        ++v79;
        v80 += v28[7];
LABEL_29:
        ++*v303;
        v83 = v306;
        v84 = *(double *)&v307;
        *(float32x4_t *)v317 = v306;
        *(_OWORD *)&v317[16] = v307;
        v85 = (char *)&byte_22466142C[48 * v82];
        v88 = v85[31];
        v86 = (unsigned __int8 *)(v85 + 31);
        v87 = v88;
        if (v88 == 8)
        {
          v89 = v80;
          LOBYTE(v90) = v82;
LABEL_164:
          v305 = v80;
          if (v79)
          {
            v83.f32[0] = (float)v79;
            v83 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 0);
            v81 = vdivq_f32(v81, v83);
          }
          v331 = v81.i32[2];
          v330 = v81.i64[0];
          v202 = v90;
          v203 = (char *)&byte_22466142C[48 * v90];
          v204 = v203[1];
          if (v204 != 8)
          {
            result = sub_223B28F4C((uint64_t)v317, 1, v204, v203[2], v203[3], v203[4], &v330, v89 != 0, v81, v83, *(double *)&v307, *(double *)v22.i64, *(int8x8_t *)&a11);
            v205 = v203[5];
            if (v205 != 8)
            {
              result = sub_223B28F4C((uint64_t)v317, 1, v205, v203[6], v203[7], v203[8], &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v206 = v203[9];
              if (v206 != 8)
                result = sub_223B28F4C((uint64_t)v317, 1, v206, v203[10], v203[11], v203[12], &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
            }
          }
          v207 = (char *)&byte_22466142C[48 * v202];
          v210 = v207[13];
          v209 = (unsigned __int8 *)(v207 + 13);
          v208 = v210;
          v211 = v210 == 8;
          if (*v203)
          {
            if (!v211)
            {
              v212 = v209[1];
              if (*(_BYTE *)(v29 + v212))
                result = sub_223B28F4C((uint64_t)v317, 0, v208, v212, v209[2], 8u, &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v213 = v209[3];
              if (v213 != 8)
              {
                v214 = v209[4];
                if (*(_BYTE *)(v29 + v214))
                  result = sub_223B28F4C((uint64_t)v317, 0, v213, v214, v209[5], 8u, &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
                v215 = v209[6];
                if (v215 != 8)
                {
                  v216 = v209[7];
                  if (*(_BYTE *)(v29 + v216))
                    result = sub_223B28F4C((uint64_t)v317, 0, v215, v216, v209[8], 8u, &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
                  v217 = v209[9];
                  if (v217 != 8)
                  {
                    v218 = v209[10];
                    if (*(_BYTE *)(v29 + v218))
                      result = sub_223B28F4C((uint64_t)v317, 0, v217, v218, v209[11], 8u, &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
                    v219 = v209[12];
                    if (v219 != 8)
                    {
                      v220 = v209[13];
                      if (*(_BYTE *)(v29 + v220))
                        result = sub_223B28F4C((uint64_t)v317, 0, v219, v220, v209[14], 8u, &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
                      v221 = v209[15];
                      if (v221 != 8)
                      {
                        v222 = v209[16];
                        if (*(_BYTE *)(v29 + v222))
                          result = sub_223B28F4C((uint64_t)v317, 0, v221, v222, v209[17], 8u, &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
                      }
                    }
                  }
                }
              }
            }
          }
          else if (!v211)
          {
            result = sub_223B28F4C((uint64_t)v317, 0, v208, v209[1], v209[2], 8u, &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
            v223 = v209[3];
            if (v223 != 8)
            {
              result = sub_223B28F4C((uint64_t)v317, 0, v223, v209[4], v209[5], 8u, &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v224 = v209[6];
              if (v224 != 8)
              {
                result = sub_223B28F4C((uint64_t)v317, 0, v224, v209[7], v209[8], 8u, &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
                v225 = v209[9];
                if (v225 != 8)
                {
                  result = sub_223B28F4C((uint64_t)v317, 0, v225, v209[10], v209[11], 8u, &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
                  v226 = v209[12];
                  if (v226 != 8)
                  {
                    result = sub_223B28F4C((uint64_t)v317, 0, v226, v209[13], v209[14], 8u, &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
                    v227 = v209[15];
                    if (v227 != 8)
                      result = sub_223B28F4C((uint64_t)v317, 0, v227, v209[16], v209[17], 8u, &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
                  }
                }
              }
            }
          }
          v228 = 0;
          v302 = (char *)&byte_22466142C[48 * v82 + 35];
          while (1)
          {
            v229 = v302[v228];
            if (v229 == 8)
              return result;
            v230 = (unsigned __int8 *)&unk_2246613E4 + 9 * v229;
            v231 = *v230;
            v232 = v32 + 12 * v231;
            v330 = *(_QWORD *)v232;
            v331 = *(_DWORD *)(v232 + 8);
            v358 = v28[v231];
            v348 = *(_BYTE *)(v29 + v231);
            v233 = v230[1];
            v234 = v32 + 12 * v233;
            v332 = *(_QWORD *)v234;
            v333 = *(_DWORD *)(v234 + 8);
            v235 = v27[v233];
            v236 = v28[v233];
            v359 = v28[v233];
            v349 = *(_BYTE *)(v29 + v233);
            v237 = v230[2];
            v238 = v32 + 12 * v237;
            v334 = *(_QWORD *)v238;
            v335 = *(_DWORD *)(v238 + 8);
            v239 = v27[v237];
            v240 = v28[v237];
            LOBYTE(v237) = *(_BYTE *)(v29 + v237);
            v360 = v240;
            v350 = v237;
            v241 = v230[3];
            v242 = v32 + 12 * v241;
            v336 = *(_QWORD *)v242;
            v337 = *(_DWORD *)(v242 + 8);
            v243 = v27[v241];
            result = v28[v241];
            v361 = v28[v241];
            v351 = *(_BYTE *)(v29 + v241);
            v244 = v230[4];
            v245 = v32 + 12 * v244;
            v339 = *(_DWORD *)(v245 + 8);
            v338 = *(_QWORD *)v245;
            v246 = v27[v244];
            v247 = v28[v244];
            v362 = v28[v244];
            v352 = *(_BYTE *)(v29 + v244);
            v248 = v230[5];
            v249 = v32 + 12 * v248;
            v341 = *(_DWORD *)(v249 + 8);
            v340 = *(_QWORD *)v249;
            v250 = v27[v248];
            v251 = v28[v248];
            LOBYTE(v248) = *(_BYTE *)(v29 + v248);
            v363 = v251;
            v353 = v248;
            v252 = v230[6];
            v253 = (uint64_t *)(v32 + 12 * v252);
            v254 = *v253;
            v343 = *((_DWORD *)v253 + 2);
            v342 = v254;
            v255 = v27[v252];
            v256 = v28[v252];
            v364 = v28[v252];
            v354 = *(_BYTE *)(v29 + v252);
            v257 = v230[7];
            v258 = (uint64_t *)(v32 + 12 * v257);
            v259 = *v258;
            v345 = *((_DWORD *)v258 + 2);
            v344 = v259;
            v260 = v27[v257];
            v261 = v28[v257];
            v365 = v28[v257];
            v355 = *(_BYTE *)(v29 + v257);
            if (v235)
            {
              v262 = 0;
              v81 = 0uLL;
              v263 = v305;
              if (v239)
                goto LABEL_202;
            }
            else
            {
              v81.i64[0] = v332;
              v81.i32[2] = v333;
              v83 = 0uLL;
              v81 = vaddq_f32(v81, (float32x4_t)0);
              v263 = v305 + v236;
              v262 = 1;
              if (v239)
              {
LABEL_202:
                v264 = v262;
                if (v243)
                  goto LABEL_203;
                goto LABEL_246;
              }
            }
            v264 = v262 | 2;
            v83.i64[0] = v334;
            v83.i32[2] = v335;
            v81 = vaddq_f32(v81, v83);
            ++v262;
            v263 += v240;
            if (v243)
            {
LABEL_203:
              if (v246)
                goto LABEL_204;
              goto LABEL_247;
            }
LABEL_246:
            v264 |= 4u;
            v83.i64[0] = v336;
            v83.i32[2] = v337;
            v81 = vaddq_f32(v81, v83);
            ++v262;
            v263 += result;
            if (v246)
            {
LABEL_204:
              if (v250)
                goto LABEL_205;
              goto LABEL_248;
            }
LABEL_247:
            v264 |= 8u;
            v83.i64[0] = v338;
            v83.i32[2] = v339;
            v81 = vaddq_f32(v81, v83);
            ++v262;
            v263 += v247;
            if (v250)
            {
LABEL_205:
              if (!v255)
                goto LABEL_249;
              goto LABEL_206;
            }
LABEL_248:
            v264 |= 0x10u;
            v83.i64[0] = v340;
            v83.i32[2] = v341;
            v81 = vaddq_f32(v81, v83);
            ++v262;
            v263 += v251;
            if (!v255)
            {
LABEL_249:
              v264 |= 0x20u;
              v83.i64[0] = v342;
              v83.i32[2] = v343;
              v81 = vaddq_f32(v81, v83);
              ++v262;
              v263 += v256;
              if (v260)
                goto LABEL_207;
              goto LABEL_250;
            }
LABEL_206:
            if (v260)
              goto LABEL_207;
LABEL_250:
            v264 |= 0x40u;
            v83.i64[0] = v344;
            v83.i32[2] = v345;
            v81 = vaddq_f32(v81, v83);
            ++v262;
            v263 += v261;
LABEL_207:
            ++*v303;
            v265 = (char *)&byte_22466142C[48 * v264];
            v268 = v265[31];
            v266 = (unsigned __int8 *)(v265 + 31);
            v267 = v268;
            v305 = v263;
            if (v268 != 8)
            {
              if (*(&v348 + v267))
              {
                v269 = (char *)&v330 + 12 * v267;
                v83.i64[0] = *(_QWORD *)v269;
                v83.i32[2] = *((_DWORD *)v269 + 2);
                v264 += -1 << (v267 - 1);
                v81 = vsubq_f32(v81, v83);
                --v262;
                v263 -= (char)*(&v358 + v267);
              }
              v270 = v266[1];
              if ((_DWORD)v270 != 8)
              {
                if (*(&v348 + v270))
                {
                  v271 = (char *)&v330 + 12 * v266[1];
                  v83.i64[0] = *(_QWORD *)v271;
                  v83.i32[2] = *((_DWORD *)v271 + 2);
                  v264 += -1 << (v270 - 1);
                  v81 = vsubq_f32(v81, v83);
                  --v262;
                  v263 -= (char)*(&v358 + v270);
                }
                v272 = v266[2];
                if ((_DWORD)v272 != 8)
                {
                  if (*(&v348 + v272))
                  {
                    v273 = (char *)&v330 + 12 * v266[2];
                    v83.i64[0] = *(_QWORD *)v273;
                    v83.i32[2] = *((_DWORD *)v273 + 2);
                    v264 += -1 << (v272 - 1);
                    v81 = vsubq_f32(v81, v83);
                    --v262;
                    v263 -= (char)*(&v358 + v272);
                  }
                  v274 = v266[3];
                  if ((_DWORD)v274 != 8 && *(&v348 + v274))
                  {
                    v275 = (char *)&v330 + 12 * v274;
                    v83.i64[0] = *(_QWORD *)v275;
                    v83.i32[2] = *((_DWORD *)v275 + 2);
                    v264 += -1 << (v274 - 1);
                    v81 = vsubq_f32(v81, v83);
                    --v262;
                    v263 -= (char)*(&v358 + v274);
                  }
                }
              }
            }
            if (v262)
            {
              v83.f32[0] = (float)v262;
              v83 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 0);
              v81 = vdivq_f32(v81, v83);
            }
            v357 = v81.i32[2];
            v356 = v81.i64[0];
            v276 = v264;
            v277 = (char *)&byte_22466142C[48 * v264];
            v278 = v277[1];
            if (v278 != 8)
            {
              result = sub_223B28F4C((uint64_t)v329, 1, v230[v278], v230[v277[2]], v230[v277[3]], v230[v277[4]], &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v279 = v277[5];
              if (v279 != 8)
              {
                result = sub_223B28F4C((uint64_t)v329, 1, v230[v279], v230[v277[6]], v230[v277[7]], v230[v277[8]], &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
                v280 = v277[9];
                if (v280 != 8)
                  result = sub_223B28F4C((uint64_t)v329, 1, v230[v280], v230[v277[10]], v230[v277[11]], v230[v277[12]], &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              }
            }
            v281 = (char *)&byte_22466142C[48 * v276];
            v284 = v281[13];
            v283 = (unsigned __int8 *)(v281 + 13);
            v282 = v284;
            v285 = v284 == 8;
            if (*v277)
            {
              if (v285)
                goto LABEL_198;
              v286 = v283[1];
              if (*(&v348 + v286))
                result = sub_223B28F4C((uint64_t)v329, 0, v230[v282], v230[v286], v230[v283[2]], 8u, &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v287 = v283[3];
              if (v287 == 8)
                goto LABEL_198;
              v288 = v283[4];
              if (*(&v348 + v288))
                result = sub_223B28F4C((uint64_t)v329, 0, v230[v287], v230[v288], v230[v283[5]], 8u, &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v289 = v283[6];
              if (v289 == 8)
                goto LABEL_198;
              v290 = v283[7];
              if (*(&v348 + v290))
                result = sub_223B28F4C((uint64_t)v329, 0, v230[v289], v230[v290], v230[v283[8]], 8u, &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v291 = v283[9];
              if (v291 == 8)
                goto LABEL_198;
              v292 = v283[10];
              if (*(&v348 + v292))
                result = sub_223B28F4C((uint64_t)v329, 0, v230[v291], v230[v292], v230[v283[11]], 8u, &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v293 = v283[12];
              if (v293 == 8)
                goto LABEL_198;
              v294 = v283[13];
              if (*(&v348 + v294))
                result = sub_223B28F4C((uint64_t)v329, 0, v230[v293], v230[v294], v230[v283[14]], 8u, &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v295 = v283[15];
              if (v295 == 8)
                goto LABEL_198;
              v296 = v283[16];
              if (!*(&v348 + v296))
                goto LABEL_198;
            }
            else
            {
              if (v285)
                goto LABEL_198;
              result = sub_223B28F4C((uint64_t)v329, 0, v230[v282], v230[v283[1]], v230[v283[2]], 8u, &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v297 = v283[3];
              if (v297 == 8)
                goto LABEL_198;
              result = sub_223B28F4C((uint64_t)v329, 0, v230[v297], v230[v283[4]], v230[v283[5]], 8u, &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v298 = v283[6];
              if (v298 == 8)
                goto LABEL_198;
              result = sub_223B28F4C((uint64_t)v329, 0, v230[v298], v230[v283[7]], v230[v283[8]], 8u, &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v299 = v283[9];
              if (v299 == 8)
                goto LABEL_198;
              result = sub_223B28F4C((uint64_t)v329, 0, v230[v299], v230[v283[10]], v230[v283[11]], 8u, &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v300 = v283[12];
              if (v300 == 8)
                goto LABEL_198;
              result = sub_223B28F4C((uint64_t)v329, 0, v230[v300], v230[v283[13]], v230[v283[14]], 8u, &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v295 = v283[15];
              if (v295 == 8)
                goto LABEL_198;
              v296 = v283[16];
            }
            result = sub_223B28F4C((uint64_t)v329, 0, v230[v295], v230[v296], v230[v283[17]], 8u, &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
LABEL_198:
            if (++v228 == 3)
              return result;
          }
        }
        if (*(_BYTE *)(v29 + v87))
        {
          v93 = v32 + 12 * v87;
          v83.i64[0] = *(_QWORD *)v93;
          v83.i32[2] = *(_DWORD *)(v93 + 8);
          v90 = v82 + (-1 << (v87 - 1));
          v81 = vsubq_f32(v81, v83);
          --v79;
          v89 = v80 - (char)v28[v87];
          v94 = v86[1];
          if ((_DWORD)v94 == 8)
            goto LABEL_164;
        }
        else
        {
          v89 = v80;
          v90 = v82;
          v94 = v86[1];
          if ((_DWORD)v94 == 8)
            goto LABEL_164;
        }
        if (*(_BYTE *)(v29 + v94))
        {
          v197 = v32 + 12 * v94;
          v83.i64[0] = *(_QWORD *)v197;
          v83.i32[2] = *(_DWORD *)(v197 + 8);
          v90 += -1 << (v94 - 1);
          v81 = vsubq_f32(v81, v83);
          --v79;
          v89 -= (char)v28[v94];
        }
        v198 = v86[2];
        if ((_DWORD)v198 != 8)
        {
          if (*(_BYTE *)(v29 + v198))
          {
            v199 = v32 + 12 * v86[2];
            v83.i64[0] = *(_QWORD *)v199;
            v83.i32[2] = *(_DWORD *)(v199 + 8);
            v90 += -1 << (v198 - 1);
            v81 = vsubq_f32(v81, v83);
            --v79;
            v89 -= (char)v28[v198];
          }
          v200 = v86[3];
          if ((_DWORD)v200 != 8 && *(_BYTE *)(v29 + v200))
          {
            v201 = v32 + 12 * v200;
            v83.i64[0] = *(_QWORD *)v201;
            v83.i32[2] = *(_DWORD *)(v201 + 8);
            v90 += -1 << (v200 - 1);
            v81 = vsubq_f32(v81, v83);
            --v79;
            v89 -= (char)v28[v200];
          }
        }
        goto LABEL_164;
      }
LABEL_49:
      v82 |= 0x20u;
      v78.i64[0] = *(_QWORD *)(v32 + 72);
      v78.i32[2] = *(_DWORD *)(v32 + 80);
      v81 = vaddq_f32(v81, v78);
      ++v79;
      v80 += v28[6];
      if (v27[7])
        goto LABEL_29;
      goto LABEL_50;
    }
LABEL_24:
    v82 |= 4u;
    v78.i64[0] = *(_QWORD *)(v32 + 36);
    v78.i32[2] = *(_DWORD *)(v32 + 44);
    v81 = vaddq_f32(v81, v78);
    ++v79;
    v80 += v28[3];
    goto LABEL_25;
  }
  return result;
}

uint64_t sub_223B28F4C(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t *a7, int a8, float32x4_t a9, float32x4_t a10, double a11, double a12, int8x8_t a13)
{
  unint64_t **v13;
  unint64_t v14;
  unint64_t *v15;
  int32x2_t *v16;
  char *v17;
  int32x2_t v18;
  uint64_t v19;
  int32x2_t *v20;
  char *v21;
  int32x2_t v22;
  uint64_t v23;
  int32x2_t *v24;
  char *v25;
  int32x2_t v26;
  uint64_t v27;
  char *v29;
  int v30;
  int32x2_t v31;
  int32x2_t *v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t v45;
  uint64_t v46;
  float32x4_t v47;
  uint64_t v48;
  float32x4_t v49;
  uint64_t v50;
  BOOL v51;
  unsigned int v52;
  uint64_t v53;
  float v54;
  float *v55;
  __int128 *v56;
  __int128 v57;
  uint64_t v58;
  _BYTE v59[4];
  unint64_t v60;
  int v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  __int32 v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  __int32 v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  __int32 v73;
  uint64_t v74;
  uint64_t v75;
  __int32 v76;
  uint64_t v77;
  __int32 v78;
  uint64_t v79;
  __int32 v80;

  v13 = *(unint64_t ***)a1;
  if (a3 == 8)
  {
    v14 = **v13;
    v61 = *((_DWORD *)*v13 + 2);
    v60 = v14;
    v15 = v13[1];
    v59[0] = 1;
    v62 = (uint64_t)v15;
    if (a4 != 8)
      goto LABEL_3;
  }
  else
  {
    v29 = (char *)&unk_224661384 + 12 * a3;
    v30 = *((_DWORD *)v29 + 2);
    v31 = *(int32x2_t *)v29;
    v32 = (int32x2_t *)v13[2];
    v33 = v13[3];
    *(int32x2_t *)a10.f32 = *v32;
    *(int32x2_t *)a9.f32 = vadd_s32(*v32, v31);
    v60 = a9.i64[0];
    v61 = v32[1].i32[0] + v30;
    v34 = v33[*((unsigned __int8 *)v13[4] + a3)] + 40 * *((unsigned int *)v13[5] + a3);
    v59[0] = 0;
    v62 = v34;
    if (a4 != 8)
    {
LABEL_3:
      v16 = (int32x2_t *)v13[2];
      v17 = (char *)&unk_224661384 + 12 * a4;
      v18 = *(int32x2_t *)v17;
      LODWORD(v17) = *((_DWORD *)v17 + 2);
      *(int32x2_t *)a10.f32 = *v16;
      *(int32x2_t *)a9.f32 = vadd_s32(*v16, v18);
      v64 = a9.i64[0];
      v65 = v16[1].i32[0] + (_DWORD)v17;
      v19 = v13[3][*((unsigned __int8 *)v13[4] + a4)] + 40 * *((unsigned int *)v13[5] + a4);
      v63 = 0;
      v66 = v19;
      if (a5 != 8)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  v35 = **v13;
  v65 = *((_DWORD *)*v13 + 2);
  v64 = v35;
  v36 = v13[1];
  v63 = 1;
  v66 = (uint64_t)v36;
  if (a5 != 8)
  {
LABEL_4:
    v20 = (int32x2_t *)v13[2];
    v21 = (char *)&unk_224661384 + 12 * a5;
    v22 = *(int32x2_t *)v21;
    LODWORD(v21) = *((_DWORD *)v21 + 2);
    *(int32x2_t *)a10.f32 = *v20;
    *(int32x2_t *)a9.f32 = vadd_s32(*v20, v22);
    v68 = a9.i64[0];
    v69 = v20[1].i32[0] + (_DWORD)v21;
    v23 = v13[3][*((unsigned __int8 *)v13[4] + a5)] + 40 * *((unsigned int *)v13[5] + a5);
    v67 = 0;
    v70 = v23;
    if (a6 != 8)
      goto LABEL_5;
LABEL_10:
    v39 = **v13;
    v73 = *((_DWORD *)*v13 + 2);
    v72 = v39;
    v40 = v13[1];
    v71 = 1;
    v74 = (uint64_t)v40;
    if (!a2)
      return sub_223B2937C(*(_QWORD *)(a1 + 16), a2, (uint64_t)v59, dword_224662C4C, dword_224662C4C, a7, a8, *(double *)a9.i64, a10, a11, *(int8x8_t *)&a12, a13);
    goto LABEL_11;
  }
LABEL_9:
  v37 = **v13;
  v69 = *((_DWORD *)*v13 + 2);
  v68 = v37;
  v38 = v13[1];
  v67 = 1;
  v70 = (uint64_t)v38;
  if (a6 == 8)
    goto LABEL_10;
LABEL_5:
  v24 = (int32x2_t *)v13[2];
  v25 = (char *)&unk_224661384 + 12 * a6;
  v26 = *(int32x2_t *)v25;
  LODWORD(v25) = *((_DWORD *)v25 + 2);
  *(int32x2_t *)a10.f32 = *v24;
  *(int32x2_t *)a9.f32 = vadd_s32(*v24, v26);
  v72 = a9.i64[0];
  v73 = v24[1].i32[0] + (_DWORD)v25;
  v27 = v13[3][*((unsigned __int8 *)v13[4] + a6)] + 40 * *((unsigned int *)v13[5] + a6);
  v71 = 0;
  v74 = v27;
  if (!a2)
    return sub_223B2937C(*(_QWORD *)(a1 + 16), a2, (uint64_t)v59, dword_224662C4C, dword_224662C4C, a7, a8, *(double *)a9.i64, a10, a11, *(int8x8_t *)&a12, a13);
LABEL_11:
  v41 = *(_QWORD *)(a1 + 8);
  if ((_DWORD)v60 == (_DWORD)v64 && (_DWORD)v60 == (_DWORD)v68 && (_DWORD)v60 == (_DWORD)v72)
  {
    v42 = 0;
  }
  else
  {
    v42 = 2;
    if (HIDWORD(v60) == HIDWORD(v64) && HIDWORD(v60) == HIDWORD(v68))
    {
      if (HIDWORD(v60) == HIDWORD(v72))
        v42 = 1;
      else
        v42 = 2;
    }
  }
  v43 = v41 + 12 * a4;
  a9.i64[0] = *(_QWORD *)v43;
  a9.i32[2] = *(_DWORD *)(v43 + 8);
  v44 = v41 + 12 * a3;
  a10.i64[0] = *(_QWORD *)v44;
  a10.i32[2] = *(_DWORD *)(v44 + 8);
  v45 = vsubq_f32(a9, a10);
  v80 = v45.i32[2];
  v79 = v45.i64[0];
  v46 = v41 + 12 * a5;
  v45.i64[0] = *(_QWORD *)v46;
  v45.i32[2] = *(_DWORD *)(v46 + 8);
  v47 = vsubq_f32(v45, a10);
  v78 = v47.i32[2];
  v77 = v47.i64[0];
  v48 = v41 + 12 * a6;
  v47.i64[0] = *(_QWORD *)v48;
  v47.i32[2] = *(_DWORD *)(v48 + 8);
  v49 = vsubq_f32(v47, a10);
  v76 = v49.i32[2];
  v75 = v49.i64[0];
  v50 = 2 * (v42 == 0);
  v51 = v42 > 1;
  if (v42 <= 1)
    v52 = v42 + 1;
  else
    v52 = 0;
  if (v51)
    v50 = 1;
  v53 = 4 * v52;
  v54 = *(float *)((char *)&v77 + v53);
  v55 = (float *)((unint64_t)&v77 & 0xFFFFFFFFFFFFFFF3 | (4 * (v50 & 3)));
  a10.f32[0] = (float)(v54 * *(float *)((unint64_t)&v79 | (4 * v50)))
             - (float)(*v55 * *(float *)((char *)&v79 + v53));
  *(float *)&a11 = *v55 * *(float *)((char *)&v75 + v53);
  LODWORD(a12) = *(_DWORD *)((unint64_t)&v75 & 0xFFFFFFFFFFFFFFF3 | (4 * (v50 & 3)));
  if ((float)(a10.f32[0] * (float)(*(float *)&a11 - (float)(v54 * *(float *)&a12))) >= 0.0)
  {
    v58 = 0x200000003;
    v56 = &xmmword_224662C58;
  }
  else
  {
    v58 = 0x300000000;
    v56 = &xmmword_224662C70;
  }
  return sub_223B2937C(*(_QWORD *)(a1 + 16), 1, (uint64_t)v59, (unsigned int *)&v57, (unsigned int *)((unint64_t)&v57 | 0xC), a7, a8, *(double *)v56, a10, a11, *(int8x8_t *)&a12, a13);
}

uint64_t sub_223B2937C(uint64_t a1, int a2, uint64_t a3, unsigned int *a4, unsigned int *a5, uint64_t *a6, int a7, double a8, float32x4_t a9, double a10, int8x8_t a11, int8x8_t a12)
{
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t **v21;
  uint64_t *v22;
  uint64_t *v23;
  float v24;
  _BYTE *v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  float32x4_t v29;
  unint64_t *v30;
  int v31;
  __int32 v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t *v36;
  int v37;
  __int32 v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  BOOL v47;
  char v48;
  char v49;
  char v50;
  int v51;
  int v52;
  char v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t result;
  char v59;
  char *v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  _BYTE *v64;
  float32x4_t v66;
  char v67;
  int v68;
  _QWORD v69[2];
  uint64_t v70;
  __int32 v71;

  v17 = 0;
  v69[0] = 0;
  v69[1] = 0;
  if (a7)
    v18 = 0.0;
  else
    v18 = 1.0;
  if (a2)
    v19 = 4;
  else
    v19 = 3;
  v20 = a3 + 12;
  v66 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  do
  {
    if (*(_BYTE *)(v20 - 12))
    {
      v21 = **(unint64_t ****)a1;
      v22 = *(uint64_t **)(*(_QWORD *)a1 + 8);
      v23 = a6;
      v24 = v18;
    }
    else
    {
      v25 = *(_BYTE **)(v20 + 4);
      if (v25[6])
        v24 = 0.0;
      else
        v24 = 1.0;
      *(float32x2_t *)a9.f32 = vcvt_f32_s32(*(int32x2_t *)(v20 - 8));
      a9.f32[2] = (float)*(int *)v20;
      v26.i64[0] = 0x3F0000003F000000;
      v26.i64[1] = 0x3F0000003F000000;
      if (!v25[6])
      {
        a9 = vaddq_f32(a9, v26);
        v26.i8[0] = v25[3];
        v27 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v26.f32));
        v27.f32[0] = (float)v27.i32[0];
        a11.i8[0] = v25[4];
        a12.i8[0] = v25[5];
        v27.f32[1] = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(a11)).i32[0];
        v27.f32[2] = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(a12)).i32[0];
        v26 = vmulq_f32(v27, v66);
      }
      v28 = *(_QWORD *)(a1 + 8);
      v22 = *(uint64_t **)(v28 + 8);
      v21 = *(unint64_t ***)v28;
      v29 = vmulq_n_f32(vaddq_f32(a9, v26), *(float *)(*(_QWORD *)(v28 + 16) + 312));
      v71 = v29.i32[2];
      v70 = v29.i64[0];
      v23 = &v70;
    }
    *((_DWORD *)v69 + v17++) = sub_223B297D0(v21, v22, (int *)(v20 - 8), (uint64_t)v23, v24);
    v20 += 24;
  }
  while (v19 != v17);
  v30 = **(unint64_t ***)(a1 + 16);
  v31 = *((_DWORD *)v69 + a4[1]);
  v32 = *((_DWORD *)v69 + a4[2]);
  LODWORD(v70) = *((_DWORD *)v69 + *a4);
  HIDWORD(v70) = v31;
  v71 = v32;
  v33 = v30[15];
  if (v33 < v30[16])
  {
    v34 = v70;
    *(_DWORD *)(v33 + 8) = v71;
    *(_QWORD *)v33 = v34;
    v35 = a2;
    v30[15] = v33 + 12;
    if ((a2 & 1) == 0)
      goto LABEL_25;
LABEL_21:
    v36 = **(unint64_t ***)(a1 + 16);
    v37 = *((_DWORD *)v69 + a5[1]);
    v38 = *((_DWORD *)v69 + a5[2]);
    LODWORD(v70) = *((_DWORD *)v69 + *a5);
    HIDWORD(v70) = v37;
    v71 = v38;
    v39 = v36[15];
    if (v39 >= v36[16])
    {
      v41 = sub_2233B29C0(v36 + 14, &v70);
    }
    else
    {
      v40 = v70;
      *(_DWORD *)(v39 + 8) = v71;
      *(_QWORD *)v39 = v40;
      v41 = v39 + 12;
    }
    v36[15] = v41;
    goto LABEL_25;
  }
  v35 = a2;
  v30[15] = sub_2233B29C0(v30 + 14, &v70);
  if ((a2 & 1) != 0)
    goto LABEL_21;
LABEL_25:
  v42 = 0;
  LODWORD(v70) = 0;
  v68 = 0;
  v43 = (uint64_t *)(a3 + 16);
  do
  {
    v45 = *v43;
    v43 += 3;
    v44 = v45;
    v46 = *(_BYTE *)(v45 + 1);
    v47 = *(_BYTE *)(v45 + 6) == 0;
    if (*(_BYTE *)(v45 + 6))
      v48 = -1;
    else
      v48 = v46;
    *((_BYTE *)&v70 + v42) = v48;
    v49 = *(_BYTE *)(v44 + 2);
    if (!v47)
      v49 = -1;
    *((_BYTE *)&v68 + v42++) = v49;
  }
  while (v19 != v42);
  v50 = v70;
  if (v70 != BYTE1(v70))
  {
    v59 = BYTE2(v70);
    if (v35)
    {
      if (v70 != BYTE2(v70) && BYTE1(v70) != BYTE2(v70))
        v59 = BYTE3(v70);
      v51 = v68;
      v52 = BYTE1(v68);
      if (v68 != BYTE1(v68))
        goto LABEL_45;
    }
    else if (v68 != BYTE1(v68))
    {
      goto LABEL_50;
    }
    v60 = (char *)&v68 + 1;
    goto LABEL_51;
  }
  v51 = v68;
  v52 = BYTE1(v68);
  if (v68 == BYTE1(v68))
  {
    v53 = BYTE1(v68);
    v54 = *(_QWORD *)(a1 + 48);
    v67 = v70;
    v55 = *(_BYTE **)(v54 + 248);
    if ((unint64_t)v55 >= *(_QWORD *)(v54 + 256))
      goto LABEL_35;
    goto LABEL_52;
  }
  v59 = v70;
  if (v35)
  {
LABEL_45:
    if (v51 != BYTE2(v68) && v52 != BYTE2(v68))
    {
      v60 = (char *)&v68 + 3;
      goto LABEL_51;
    }
  }
LABEL_50:
  v60 = (char *)&v68 + 2;
LABEL_51:
  v50 = v59;
  v53 = *v60;
  v54 = *(_QWORD *)(a1 + 48);
  v67 = v59;
  v55 = *(_BYTE **)(v54 + 248);
  if ((unint64_t)v55 >= *(_QWORD *)(v54 + 256))
  {
LABEL_35:
    *(_QWORD *)(v54 + 248) = sub_223984B3C(v54 + 240, &v67);
    v56 = *(_QWORD *)(a1 + 48);
    v67 = v53;
    v57 = *(_BYTE **)(v56 + 288);
    if ((unint64_t)v57 >= *(_QWORD *)(v56 + 296))
      goto LABEL_36;
LABEL_53:
    *v57 = v53;
    result = (uint64_t)(v57 + 1);
    *(_QWORD *)(v56 + 288) = result;
    if (!v35)
      return result;
LABEL_54:
    v61 = *(_QWORD *)(a1 + 48);
    v67 = v50;
    v62 = *(_BYTE **)(v61 + 248);
    if ((unint64_t)v62 >= *(_QWORD *)(v61 + 256))
    {
      *(_QWORD *)(v61 + 248) = sub_223984B3C(v61 + 240, &v67);
      v63 = *(_QWORD *)(a1 + 48);
      v67 = v53;
      v64 = *(_BYTE **)(v63 + 288);
      if ((unint64_t)v64 >= *(_QWORD *)(v63 + 296))
        goto LABEL_56;
    }
    else
    {
      *v62 = v50;
      *(_QWORD *)(v61 + 248) = v62 + 1;
      v63 = *(_QWORD *)(a1 + 48);
      v67 = v53;
      v64 = *(_BYTE **)(v63 + 288);
      if ((unint64_t)v64 >= *(_QWORD *)(v63 + 296))
      {
LABEL_56:
        result = sub_223984B3C(v63 + 280, &v67);
LABEL_59:
        *(_QWORD *)(v63 + 288) = result;
        return result;
      }
    }
    *v64 = v53;
    result = (uint64_t)(v64 + 1);
    goto LABEL_59;
  }
LABEL_52:
  *v55 = v50;
  *(_QWORD *)(v54 + 248) = v55 + 1;
  v56 = *(_QWORD *)(a1 + 48);
  v67 = v53;
  v57 = *(_BYTE **)(v56 + 288);
  if ((unint64_t)v57 < *(_QWORD *)(v56 + 296))
    goto LABEL_53;
LABEL_36:
  result = sub_223984B3C(v56 + 280, &v67);
  *(_QWORD *)(v56 + 288) = result;
  if (v35)
    goto LABEL_54;
  return result;
}

uint64_t sub_223B297D0(unint64_t **a1, uint64_t *a2, int *a3, uint64_t a4, float a5)
{
  uint64_t v10;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  _QWORD *v32;
  unsigned int v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  float *v38;
  _DWORD *v39;
  float v41;

  v10 = 0;
  v41 = a5;
  _X9 = *a2;
  __asm { PRFM            #4, [X9] }
  v17 = *a3;
  v18 = a3[1];
  v19 = a3[2];
  v20 = (19349669 * v18) ^ (73856093 * *a3) ^ (83492791 * v19);
  v21 = a2[3];
  v22 = (v20 >> 7) ^ 0x13701D;
  v23 = 0x101010101010101 * (v20 & 0x7F);
  v24 = a2[1];
  while (1)
  {
    v25 = v22 & v21;
    v26 = *(_QWORD *)(_X9 + v25);
    v27 = ((v26 ^ v23) - 0x101010101010101) & ~(v26 ^ v23) & 0x8080808080808080;
    if (v27)
      break;
LABEL_7:
    if ((v26 & (~v26 << 6) & 0x8080808080808080) != 0)
      goto LABEL_11;
    v10 += 8;
    v22 = v10 + v25;
  }
  while (1)
  {
    v28 = (_DWORD *)(v24 + 16 * ((v25 + (__clz(__rbit64(v27)) >> 3)) & v21));
    if (*v28 == v17 && v28[1] == v18 && v28[2] == v19)
      break;
    v27 &= v27 - 1;
    if (!v27)
      goto LABEL_7;
  }
  if (_X9)
    return v28[3];
LABEL_11:
  v29 = -1431655765 * (((*a1)[1] - **a1) >> 2);
  v30 = sub_223B299D8(a2, a3);
  if (v31)
  {
    v32 = (_QWORD *)(a2[1] + 16 * v30);
    v33 = a3[2];
    *v32 = *(_QWORD *)a3;
    v32[1] = v33;
  }
  *(_DWORD *)(a2[1] + 16 * v30 + 12) = v29;
  v34 = *a1;
  v35 = (*a1)[1];
  if (v35 >= (*a1)[2])
  {
    v34[1] = sub_2233B2B48(*a1, (uint64_t *)a4);
    v37 = *a1;
    v38 = (float *)v37[41];
    if ((unint64_t)v38 >= v37[42])
      goto LABEL_15;
LABEL_17:
    *v38 = a5;
    v39 = v38 + 1;
    goto LABEL_18;
  }
  v36 = *(_QWORD *)a4;
  *(_DWORD *)(v35 + 8) = *(_DWORD *)(a4 + 8);
  *(_QWORD *)v35 = v36;
  v34[1] = v35 + 12;
  v37 = *a1;
  v38 = (float *)v37[41];
  if ((unint64_t)v38 < v37[42])
    goto LABEL_17;
LABEL_15:
  v39 = sub_223A72B1C((uint64_t)(v37 + 40), &v41);
LABEL_18:
  v37[41] = (unint64_t)v39;
  return v29;
}

unint64_t sub_223B299D8(uint64_t *a1, int *a2)
{
  uint64_t v2;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _DWORD *v19;

  v2 = 0;
  _X10 = *a1;
  __asm { PRFM            #4, [X10] }
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = (19349669 * v10) ^ (73856093 * *a2) ^ (83492791 * v11);
  v13 = a1[3];
  for (i = (v12 >> 7) ^ 0x13701D; ; i = v2 + v15)
  {
    v15 = i & v13;
    v16 = *(_QWORD *)(_X10 + (i & v13));
    v17 = ((v16 ^ (0x101010101010101 * (v12 & 0x7F))) - 0x101010101010101) & ~(v16 ^ (0x101010101010101
                                                                                        * (v12 & 0x7F))) & 0x8080808080808080;
    if (v17)
      break;
LABEL_7:
    if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0)
      return sub_223B29AE4(a1, v12);
    v2 += 8;
  }
  while (1)
  {
    v18 = (v15 + (__clz(__rbit64(v17)) >> 3)) & v13;
    v19 = (_DWORD *)(a1[1] + 16 * v18);
    if (*v19 == v9 && v19[1] == v10 && v19[2] == v11)
      return v18;
    v17 &= v17 - 1;
    if (!v17)
      goto LABEL_7;
  }
}

unint64_t sub_223B29AE4(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t result;
  uint64_t v10;

  v4 = *a1;
  v5 = a1[3];
  v6 = v5 & ((a2 >> 7) ^ 0x13701D);
  v7 = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    v8 = 8;
    do
    {
      v6 = (v6 + v8) & v5;
      v8 += 8;
      v7 = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v5;
  v10 = a1[4];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + result) == 254)
    {
      v10 = 0;
    }
    else
    {
      sub_223B29BDC((uint64_t)a1);
      result = sub_22322944C(*a1, a2, a1[3]);
      v4 = *a1;
      v5 = a1[3];
      v10 = a1[4];
    }
  }
  ++a1[2];
  a1[4] = v10 - (*(unsigned __int8 *)(v4 + result) == 128);
  *(_BYTE *)(v4 + result) = a2 & 0x7F;
  *(_BYTE *)(v4 + ((result - 7) & v5) + (v5 & 7)) = a2 & 0x7F;
  return result;
}

void sub_223B29BDC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_5;
  }
  if (v1 < 9 || 25 * v1 < 32 * *(_QWORD *)(a1 + 16))
  {
    v2 = (2 * v1) | 1;
LABEL_5:
    sub_223B26AA0((char **)a1, (char *)v2);
    return;
  }
  sub_223B29C18((unint64_t *)a1);
}

unint64_t sub_223B29C18(unint64_t *a1)
{
  unint64_t result;
  unint64_t v3;
  uint64_t i;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  result = sub_2232294A8(*a1, a1[3]);
  v3 = a1[3];
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v8 = *a1;
      if (*(unsigned __int8 *)(*a1 + i) == 254)
      {
        v9 = a1[1];
        v10 = (int *)(v9 + 16 * i);
        v11 = (19349669 * v10[1]) ^ (73856093 * *v10) ^ (83492791 * v10[2]);
        v12 = ((v11 >> 7) ^ 0x13701D) & v3;
        v13 = *(_QWORD *)(v8 + v12) & (~*(_QWORD *)(v8 + v12) << 7) & 0x8080808080808080;
        if (v13)
        {
          v5 = ((v11 >> 7) ^ 0x13701D) & v3;
        }
        else
        {
          v14 = 8;
          v5 = ((v11 >> 7) ^ 0x13701D) & v3;
          do
          {
            v5 = (v5 + v14) & v3;
            v14 += 8;
            v13 = *(_QWORD *)(v8 + v5) & (~*(_QWORD *)(v8 + v5) << 7) & 0x8080808080808080;
          }
          while (!v13);
        }
        v6 = (v5 + (__clz(__rbit64(v13)) >> 3)) & v3;
        if ((((v6 - v12) ^ (i - v12)) & v3) > 7)
        {
          v15 = *(unsigned __int8 *)(v8 + v6);
          result = v11 & 0x7F;
          *(_BYTE *)(v8 + v6) = result;
          *(_BYTE *)(v8 + ((v6 - 7) & v3) + (v3 & 7)) = result;
          if (v15 == 128)
          {
            v16 = v9 + 16 * v6;
            v17 = *(_QWORD *)v10;
            v19 = v10[2];
            v18 = v10[3];
            *(_QWORD *)v16 = v17;
            *(_DWORD *)(v16 + 8) = v19;
            *(_DWORD *)(v16 + 12) = v18;
            v3 = a1[3];
            v20 = *a1;
            *(_BYTE *)(v20 + i) = 0x80;
            *(_BYTE *)(v20 + (v3 & (i - 7)) + (v3 & 7)) = 0x80;
          }
          else
          {
            v21 = *(_QWORD *)v10;
            result = v10[3];
            v22 = v10[2];
            v23 = 16 * v6;
            v24 = (uint64_t *)(v9 + 16 * v6);
            v25 = *v24;
            v26 = *((_DWORD *)v24 + 2);
            LODWORD(v24) = *((_DWORD *)v24 + 3);
            *(_QWORD *)v10 = v25;
            v10[2] = v26;
            v10[3] = (int)v24;
            v27 = a1[1] + v23;
            *(_QWORD *)v27 = v21;
            *(_DWORD *)(v27 + 8) = v22;
            *(_DWORD *)(v27 + 12) = result;
            --i;
            v3 = a1[3];
          }
        }
        else
        {
          v7 = v11 & 0x7F;
          *(_BYTE *)(v8 + i) = v11 & 0x7F;
          result = v3 & 7;
          *(_BYTE *)(v8 + ((i - 7) & v3) + result) = v7;
        }
      }
    }
    v28 = v3 - (v3 >> 3);
    if (v3 == 7)
      v28 = 6;
  }
  else
  {
    v28 = 0;
  }
  a1[4] = v28 - a1[2];
  return result;
}

uint64_t sub_223B29E40()
{
  uint64_t v0;
  uint64_t v1;
  float32x4_t v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  float32x4_t v10;
  double v11;
  double v12;
  double v13;
  float32x4_t v14;
  double v15;
  double v16;
  double v17;
  float32x4_t v18;
  double v19;
  double v20;
  double v21;
  float32x4_t v22;
  double v23;
  double v24;
  double v25;
  float32x4_t v26;
  double v27;
  double v28;
  double v29;
  float32x4_t v30;
  double v31;
  double v32;
  double v33;
  float32x4_t v34;
  double v35;
  double v36;
  double v37;
  float32x4_t v38;
  double v39;
  double v40;
  double v41;
  float32x4_t v42;
  double v43;
  double v44;
  double v45;
  float32x4_t v46;
  double v47;
  double v48;
  double v49;
  float32x4_t v50;
  double v51;
  double v52;
  double v53;
  float32x4_t v54;
  double v55;
  double v56;
  double v57;
  float32x4_t v58;
  double v59;
  double v60;
  double v61;
  float32x4_t v62;
  double v63;
  double v64;
  double v65;
  float32x4_t v66;
  double v67;
  double v68;
  double v69;
  float32x4_t v70;
  double v71;
  double v72;
  double v73;
  float32x4_t v74;
  double v75;
  double v76;
  double v77;
  float32x4_t v78;
  double v79;
  double v80;
  double v81;
  float32x4_t v82;
  double v83;
  double v84;
  double v85;
  float32x4_t v86;
  double v87;
  double v88;
  double v89;
  float32x4_t v90;
  double v91;
  double v92;
  double v93;
  float32x4_t v94;
  double v95;
  double v96;
  double v97;
  float32x4_t v98;
  double v99;
  double v100;
  double v101;
  float32x4_t v102;
  double v103;
  double v104;
  double v105;
  float32x4_t v106;
  double v107;
  double v108;
  double v109;
  float32x4_t v110;
  double v111;
  double v112;
  double v113;
  float32x4_t v114;
  double v115;
  double v116;
  double v117;
  float32x4_t v118;
  double v119;
  double v120;
  double v121;
  float32x4_t v122;
  double v123;
  double v124;
  double v125;
  float32x4_t v126;
  double v127;
  double v128;
  double v129;
  float32x4_t v130;
  double v131;
  double v132;
  double v133;
  float32x4_t v134;
  double v135;
  double v136;
  double v137;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  _OWORD v145[2];
  _OWORD v146[5];
  uint64_t v147;
  _OWORD v148[2];
  _OWORD v149[5];
  uint64_t v150;
  _OWORD v151[2];
  _OWORD v152[5];
  uint64_t v153;
  _OWORD v154[2];
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  _OWORD v161[2];
  _OWORD v162[5];
  uint64_t v163;
  _OWORD v164[2];
  _OWORD v165[5];
  uint64_t v166;
  _OWORD v167[2];
  _OWORD v168[5];
  uint64_t v169;
  _OWORD v170[2];
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  _OWORD v177[2];
  _OWORD v178[5];
  uint64_t v179;
  _OWORD v180[2];
  _OWORD v181[5];
  uint64_t v182;
  _OWORD v183[2];
  _OWORD v184[5];
  uint64_t v185;
  _OWORD v186[2];
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  _OWORD v193[2];
  _OWORD v194[5];
  uint64_t v195;
  _OWORD v196[2];
  _OWORD v197[5];
  uint64_t v198;
  _OWORD v199[2];
  _OWORD v200[5];
  uint64_t v201;
  _OWORD v202[2];
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  _OWORD v209[2];
  _OWORD v210[5];
  uint64_t v211;
  _OWORD v212[2];
  _OWORD v213[5];
  uint64_t v214;
  _OWORD v215[2];
  _OWORD v216[5];
  uint64_t v217;
  _OWORD v218[2];
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  _OWORD v225[2];
  _OWORD v226[5];
  uint64_t v227;
  _OWORD v228[2];
  _OWORD v229[5];
  uint64_t v230;
  _OWORD v231[2];
  _OWORD v232[5];
  uint64_t v233;
  _OWORD v234[2];
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  uint64_t v240;
  _OWORD v241[2];
  _OWORD v242[5];
  uint64_t v243;
  _OWORD v244[2];
  _OWORD v245[5];
  uint64_t v246;
  _OWORD v247[2];
  _OWORD v248[5];
  uint64_t v249;
  _OWORD v250[2];
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  uint64_t v256;
  _OWORD v257[2];
  _OWORD v258[5];
  uint64_t v259;
  _OWORD v260[2];
  _OWORD v261[5];
  uint64_t v262;
  _OWORD v263[2];
  _OWORD v264[5];
  uint64_t v265;
  _OWORD v266[2];
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  uint64_t v272;
  _OWORD v273[2];
  _OWORD v274[5];
  uint64_t v275;
  _OWORD v276[2];
  _OWORD v277[5];
  uint64_t v278;
  _OWORD v279[2];
  _OWORD v280[5];
  uint64_t v281;
  _OWORD v282[2];
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  uint64_t v288;
  _OWORD v289[2];
  _OWORD v290[5];
  uint64_t v291;
  _OWORD v292[2];
  _OWORD v293[5];
  uint64_t v294;
  _OWORD v295[2];
  _OWORD v296[5];
  uint64_t v297;
  _OWORD v298[2];
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  uint64_t v304;
  _OWORD v305[2];
  _OWORD v306[5];
  uint64_t v307;
  _OWORD v308[2];
  _OWORD v309[5];
  uint64_t v310;
  _OWORD v311[2];
  _OWORD v312[5];
  uint64_t v313;
  _OWORD v314[2];
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  uint64_t v320;
  _OWORD v321[2];
  _OWORD v322[5];
  uint64_t v323;
  _OWORD v324[2];
  _OWORD v325[5];
  uint64_t v326;
  _OWORD v327[2];
  _OWORD v328[5];
  uint64_t v329;
  _OWORD v330[2];
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  uint64_t v336;
  _OWORD v337[2];
  _OWORD v338[5];
  uint64_t v339;
  _OWORD v340[2];
  _OWORD v341[5];
  uint64_t v342;
  _OWORD v343[2];
  _OWORD v344[5];
  uint64_t v345;
  _OWORD v346[2];
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  uint64_t v352;
  _OWORD v353[2];
  _OWORD v354[5];
  uint64_t v355;
  _OWORD v356[2];
  _OWORD v357[5];
  uint64_t v358;
  _OWORD v359[2];
  _OWORD v360[5];
  uint64_t v361;
  _OWORD v362[2];
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  uint64_t v368;
  _OWORD v369[2];
  _OWORD v370[5];
  uint64_t v371;
  _OWORD v372[2];
  _OWORD v373[5];
  uint64_t v374;
  _OWORD v375[2];
  _OWORD v376[5];
  uint64_t v377;
  _OWORD v378[2];
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  uint64_t v384;
  _OWORD v385[2];
  _OWORD v386[5];
  uint64_t v387;
  _OWORD v388[2];
  _OWORD v389[5];
  uint64_t v390;
  _OWORD v391[2];
  _OWORD v392[5];
  uint64_t v393;
  _OWORD v394[2];
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  uint64_t v400;
  _OWORD v401[2];
  _OWORD v402[5];
  uint64_t v403;
  _OWORD v404[2];
  _OWORD v405[5];
  uint64_t v406;
  _OWORD v407[2];
  _OWORD v408[5];
  uint64_t v409;
  _OWORD v410[2];
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  uint64_t v416;
  _OWORD v417[2];
  _OWORD v418[5];
  uint64_t v419;
  _OWORD v420[2];
  _OWORD v421[5];
  uint64_t v422;
  _OWORD v423[2];
  _OWORD v424[5];
  uint64_t v425;
  _OWORD v426[2];
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  uint64_t v432;
  _OWORD v433[2];
  _OWORD v434[5];
  uint64_t v435;
  _OWORD v436[2];
  _OWORD v437[5];
  uint64_t v438;
  _OWORD v439[2];
  _OWORD v440[5];
  uint64_t v441;
  _OWORD v442[2];
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  uint64_t v448;
  _OWORD v449[2];
  _OWORD v450[5];
  uint64_t v451;
  _OWORD v452[2];
  _OWORD v453[5];
  uint64_t v454;
  _OWORD v455[2];
  _OWORD v456[5];
  uint64_t v457;
  _OWORD v458[2];
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  uint64_t v464;
  _OWORD v465[2];
  _OWORD v466[5];
  uint64_t v467;
  _OWORD v468[2];
  _OWORD v469[5];
  uint64_t v470;
  _OWORD v471[2];
  _OWORD v472[5];
  uint64_t v473;
  _OWORD v474[2];
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  uint64_t v480;
  _OWORD v481[2];
  _OWORD v482[5];
  uint64_t v483;
  _OWORD v484[2];
  _OWORD v485[5];
  uint64_t v486;
  _OWORD v487[2];
  _OWORD v488[5];
  uint64_t v489;
  _OWORD v490[2];
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  uint64_t v496;
  _OWORD v497[2];
  _OWORD v498[5];
  uint64_t v499;
  _OWORD v500[2];
  _OWORD v501[5];
  uint64_t v502;
  _OWORD v503[2];
  _OWORD v504[5];
  uint64_t v505;
  _OWORD v506[2];
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  uint64_t v512;
  _OWORD v513[2];
  _OWORD v514[5];
  uint64_t v515;
  _OWORD v516[2];
  _OWORD v517[5];
  uint64_t v518;
  _OWORD v519[2];
  _OWORD v520[5];
  uint64_t v521;
  _OWORD v522[2];
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  uint64_t v528;
  _OWORD v529[2];
  _OWORD v530[5];
  uint64_t v531;
  _OWORD v532[2];
  _OWORD v533[5];
  uint64_t v534;
  _OWORD v535[2];
  _OWORD v536[5];
  uint64_t v537;
  _OWORD v538[2];
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  uint64_t v544;
  _OWORD v545[2];
  _OWORD v546[5];
  uint64_t v547;
  _OWORD v548[2];
  _OWORD v549[5];
  uint64_t v550;
  _OWORD v551[2];
  _OWORD v552[5];
  uint64_t v553;
  _OWORD v554[2];
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  uint64_t v560;
  _OWORD v561[2];
  _OWORD v562[5];
  uint64_t v563;
  _OWORD v564[2];
  _OWORD v565[5];
  uint64_t v566;
  _OWORD v567[2];
  _OWORD v568[5];
  uint64_t v569;
  _OWORD v570[2];
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  uint64_t v576;
  _OWORD v577[2];
  _OWORD v578[5];
  uint64_t v579;
  _OWORD v580[2];
  _OWORD v581[5];
  uint64_t v582;
  _OWORD v583[2];
  _OWORD v584[5];
  uint64_t v585;
  _OWORD v586[2];
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  uint64_t v592;
  _OWORD v593[2];
  _OWORD v594[5];
  uint64_t v595;
  _OWORD v596[2];
  _OWORD v597[5];
  uint64_t v598;
  _OWORD v599[2];
  _OWORD v600[5];
  uint64_t v601;
  _OWORD v602[2];
  __int128 v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  uint64_t v608;
  _OWORD v609[2];
  _OWORD v610[5];
  uint64_t v611;
  _OWORD v612[2];
  _OWORD v613[5];
  uint64_t v614;
  _OWORD v615[2];
  _OWORD v616[5];
  uint64_t v617;
  _OWORD v618[2];
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  uint64_t v624;
  _OWORD v625[2];
  _OWORD v626[5];
  uint64_t v627;
  _OWORD v628[2];
  _OWORD v629[5];
  uint64_t v630;
  _OWORD v631[2];
  _OWORD v632[5];
  uint64_t v633;
  _OWORD v634[2];
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  uint64_t v640;
  _OWORD v641[2];
  _OWORD v642[5];
  uint64_t v643;
  _OWORD v644[2];
  _OWORD v645[5];
  uint64_t v646;
  _OWORD v647[2];
  _OWORD v648[5];
  uint64_t v649;
  _OWORD v650[2];
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  uint64_t v656;
  _OWORD v657[2];
  _OWORD v658[5];
  uint64_t v659;
  _OWORD v660[2];
  _OWORD v661[5];
  uint64_t v662;
  _OWORD v663[2];
  _OWORD v664[5];
  uint64_t v665;
  _OWORD v666[2];
  __int128 v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  uint64_t v672;
  _OWORD v673[2];
  _OWORD v674[5];
  uint64_t v675;
  _OWORD v676[2];
  _OWORD v677[5];
  uint64_t v678;
  _OWORD v679[2];
  _OWORD v680[5];
  uint64_t v681;
  _OWORD v682[2];
  __int128 v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  uint64_t v688;
  _OWORD v689[2];
  _OWORD v690[5];
  uint64_t v691;
  _OWORD v692[2];
  _OWORD v693[5];
  uint64_t v694;
  _OWORD v695[2];
  _OWORD v696[5];
  uint64_t v697;
  _OWORD v698[2];
  __int128 v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  __int128 v703;
  uint64_t v704;
  _OWORD v705[2];
  _OWORD v706[5];
  uint64_t v707;
  _OWORD v708[2];
  _OWORD v709[5];
  uint64_t v710;
  _OWORD v711[2];
  _OWORD v712[5];
  uint64_t v713;
  _OWORD v714[2];
  _OWORD v715[5];
  uint64_t v716;
  _OWORD v717[2];
  _OWORD v718[5];
  uint64_t v719;
  _OWORD v720[2];
  _OWORD v721[5];
  uint64_t v722;
  _OWORD v723[2];
  _OWORD v724[5];
  uint64_t v725;
  _OWORD v726[2];
  _OWORD v727[5];
  uint64_t v728;
  _OWORD v729[2];
  _OWORD v730[5];
  uint64_t v731;
  _OWORD v732[2];
  _OWORD v733[5];
  uint64_t v734;
  _OWORD v735[7];
  uint64_t v736;
  _OWORD v737[2];
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  _QWORD v889[2];

  v0 = MEMORY[0x24BDAC7A8]();
  v6 = v1;
  v7 = v0;
  v889[1] = *MEMORY[0x24BDAC8D0];
  v738 = 0;
  v145[0] = xmmword_224663208;
  v145[1] = *(_OWORD *)dbl_224663218;
  if ((v0 & 0x10200001020) != 0)
    sub_223B26C48(v1, 3, 0, 3, (uint64_t)&v738, (uint64_t)v145, COERCE_DOUBLE(0x640000002DLL), dbl_224663218[0], v2, v3, v4, v5);
  v8 = *(_OWORD *)(v6 + 48);
  v141 = *(_OWORD *)(v6 + 32);
  v142 = v8;
  v143 = *(_OWORD *)(v6 + 64);
  v144 = *(_QWORD *)(v6 + 80);
  v9 = *(_OWORD *)(v6 + 16);
  v139 = *(_OWORD *)v6;
  v140 = v9;
  v739 = 0;
  v148[0] = xmmword_224663228;
  v148[1] = *(_OWORD *)dbl_224663238;
  if ((v7 & 0xA000000A0) != 0)
    sub_223B26C48((uint64_t)&v139, 3, 1, 2, (uint64_t)&v739, (uint64_t)v148, COERCE_DOUBLE(0x2F0000002ELL), dbl_224663238[0], v2, v3, v4, v5);
  v146[2] = v141;
  v146[3] = v142;
  v146[4] = v143;
  v147 = v144;
  v146[0] = v139;
  v146[1] = v140;
  v740 = 0;
  v151[0] = xmmword_224663248;
  v151[1] = *(_OWORD *)dbl_224663258;
  if ((v7 & 0x50A000050A0) != 0)
    sub_223B26C48((uint64_t)v146, 3, 1, 3, (uint64_t)&v740, (uint64_t)v151, COERCE_DOUBLE(0x660000002FLL), dbl_224663258[0], v2, v3, v4, v5);
  v149[2] = v141;
  v149[3] = v142;
  v149[4] = v143;
  v150 = v144;
  v149[0] = v139;
  v149[1] = v140;
  v741 = 0;
  v154[0] = xmmword_224663268;
  v154[1] = *(_OWORD *)dbl_224663278;
  if ((v7 & 0x40) != 0)
    sub_223B26C48((uint64_t)v149, 2, 2, 0, (uint64_t)&v741, (uint64_t)v154, COERCE_DOUBLE(0x3100000030), dbl_224663278[0], v2, v3, v4, v5);
  v152[2] = v141;
  v152[3] = v142;
  v152[4] = v143;
  v153 = v144;
  v152[0] = v139;
  v152[1] = v140;
  v742 = 0;
  v161[0] = xmmword_224663288;
  v161[1] = *(_OWORD *)dbl_224663298;
  if ((v7 & 0xC0) != 0)
    sub_223B26C48((uint64_t)v152, 2, 2, 1, (uint64_t)&v742, (uint64_t)v161, COERCE_DOUBLE(0x3800000031), dbl_224663298[0], v2, v3, v4, v5);
  v157 = v141;
  v158 = v142;
  v159 = v143;
  v160 = v144;
  v155 = v139;
  v156 = v140;
  v743 = 0;
  v164[0] = xmmword_2246632A8;
  v164[1] = *(_OWORD *)dbl_2246632B8;
  if ((v7 & 0x100040) != 0)
    sub_223B26C48((uint64_t)&v155, 2, 3, 0, (uint64_t)&v743, (uint64_t)v164, COERCE_DOUBLE(0x3300000032), dbl_2246632B8[0], v2, v3, v4, v5);
  v162[2] = v141;
  v162[3] = v142;
  v162[4] = v143;
  v163 = v144;
  v162[0] = v139;
  v162[1] = v140;
  v744 = 0;
  v167[0] = xmmword_2246632C8;
  v167[1] = *(_OWORD *)dbl_2246632D8;
  if ((v7 & 0x3000C0) != 0)
    sub_223B26C48((uint64_t)v162, 2, 3, 1, (uint64_t)&v744, (uint64_t)v167, COERCE_DOUBLE(0x3A00000033), dbl_2246632D8[0], v2, v3, v4, v5);
  v165[2] = v141;
  v165[3] = v142;
  v165[4] = v143;
  v166 = v144;
  v165[0] = v139;
  v165[1] = v140;
  v745 = 0;
  v170[0] = xmmword_2246632E8;
  v170[1] = *(_OWORD *)dbl_2246632F8;
  if ((v7 & 0x400000040) != 0)
    sub_223B26C48((uint64_t)v165, 3, 2, 0, (uint64_t)&v745, (uint64_t)v170, COERCE_DOUBLE(0x3500000034), dbl_2246632F8[0], v2, v3, v4, v5);
  v168[2] = v141;
  v168[3] = v142;
  v168[4] = v143;
  v169 = v144;
  v168[0] = v139;
  v168[1] = v140;
  v746 = 0;
  v177[0] = xmmword_224663308;
  v177[1] = *(_OWORD *)dbl_224663318;
  if ((v7 & 0xC000000C0) != 0)
    sub_223B26C48((uint64_t)v168, 3, 2, 1, (uint64_t)&v746, (uint64_t)v177, COERCE_DOUBLE(0x3C00000035), dbl_224663318[0], v2, v3, v4, v5);
  v173 = v141;
  v174 = v142;
  v175 = v143;
  v176 = v144;
  v171 = v139;
  v172 = v140;
  v747 = 0;
  v180[0] = xmmword_224663328;
  v180[1] = *(_OWORD *)dbl_224663338;
  if ((v7 & 0x1000400100040) != 0)
    sub_223B26C48((uint64_t)&v171, 3, 3, 0, (uint64_t)&v747, (uint64_t)v180, COERCE_DOUBLE(0x3700000036), dbl_224663338[0], v2, v3, v4, v5);
  v178[2] = v141;
  v178[3] = v142;
  v178[4] = v143;
  v179 = v144;
  v178[0] = v139;
  v178[1] = v140;
  v748 = 0;
  v183[0] = xmmword_224663348;
  v183[1] = *(_OWORD *)dbl_224663358;
  if ((v7 & 0x3000C003000C0) != 0)
    sub_223B26C48((uint64_t)v178, 3, 3, 1, (uint64_t)&v748, (uint64_t)v183, COERCE_DOUBLE(0x3E00000037), dbl_224663358[0], v2, v3, v4, v5);
  v181[2] = v141;
  v181[3] = v142;
  v181[4] = v143;
  v182 = v144;
  v181[0] = v139;
  v181[1] = v140;
  v749 = 0;
  v186[0] = xmmword_224663368;
  v186[1] = *(_OWORD *)dbl_224663378;
  if ((v7 & 0x80) != 0)
    sub_223B26C48((uint64_t)v181, 2, 2, 2, (uint64_t)&v749, (uint64_t)v186, COERCE_DOUBLE(0x3900000038), dbl_224663378[0], v2, v3, v4, v5);
  v184[2] = v141;
  v184[3] = v142;
  v184[4] = v143;
  v185 = v144;
  v184[0] = v139;
  v184[1] = v140;
  v750 = 0;
  v193[0] = xmmword_224663388;
  v193[1] = *(_OWORD *)dbl_224663398;
  if ((v7 & 0x4080) != 0)
    sub_223B26C48((uint64_t)v184, 2, 2, 3, (uint64_t)&v750, (uint64_t)v193, COERCE_DOUBLE(0x7000000039), dbl_224663398[0], v2, v3, v4, v5);
  v189 = v157;
  v190 = v158;
  v191 = v159;
  v192 = v160;
  v187 = v155;
  v188 = v156;
  v751 = 0;
  v196[0] = xmmword_2246633A8;
  v196[1] = *(_OWORD *)dbl_2246633B8;
  if ((v7 & 0x200080) != 0)
    sub_223B26C48((uint64_t)&v187, 2, 3, 2, (uint64_t)&v751, (uint64_t)v196, COERCE_DOUBLE(0x3B0000003ALL), dbl_2246633B8[0], v2, v3, v4, v5);
  v194[2] = v157;
  v194[3] = v158;
  v194[4] = v159;
  v195 = v160;
  v194[0] = v155;
  v194[1] = v156;
  v752 = 0;
  v199[0] = xmmword_2246633C8;
  v199[1] = *(_OWORD *)dbl_2246633D8;
  if ((v7 & 0x10204080) != 0)
    sub_223B26C48((uint64_t)v194, 2, 3, 3, (uint64_t)&v752, (uint64_t)v199, COERCE_DOUBLE(0x720000003BLL), dbl_2246633D8[0], v2, v3, v4, v5);
  v197[2] = v157;
  v197[3] = v158;
  v197[4] = v159;
  v198 = v160;
  v197[0] = v155;
  v197[1] = v156;
  v753 = 0;
  v202[0] = xmmword_2246633E8;
  v202[1] = *(_OWORD *)dbl_2246633F8;
  if ((v7 & 0x800000080) != 0)
    sub_223B26C48((uint64_t)v197, 3, 2, 2, (uint64_t)&v753, (uint64_t)v202, COERCE_DOUBLE(0x3D0000003CLL), dbl_2246633F8[0], v2, v3, v4, v5);
  v200[2] = v157;
  v200[3] = v158;
  v200[4] = v159;
  v201 = v160;
  v200[0] = v155;
  v200[1] = v156;
  v754 = 0;
  v209[0] = xmmword_224663408;
  v209[1] = *(_OWORD *)dbl_224663418;
  if ((v7 & 0x40800004080) != 0)
    sub_223B26C48((uint64_t)v200, 3, 2, 3, (uint64_t)&v754, (uint64_t)v209, COERCE_DOUBLE(0x740000003DLL), dbl_224663418[0], v2, v3, v4, v5);
  v205 = v173;
  v206 = v174;
  v207 = v175;
  v208 = v176;
  v203 = v171;
  v204 = v172;
  v755 = 0;
  v212[0] = xmmword_224663428;
  v212[1] = *(_OWORD *)dbl_224663438;
  if ((v7 & 0x2000800200080) != 0)
    sub_223B26C48((uint64_t)&v203, 3, 3, 2, (uint64_t)&v755, (uint64_t)v212, COERCE_DOUBLE(0x3F0000003ELL), dbl_224663438[0], v2, v3, v4, v5);
  v210[2] = v173;
  v210[3] = v174;
  v210[4] = v175;
  v211 = v176;
  v210[0] = v171;
  v210[1] = v172;
  v756 = 0;
  v215[0] = xmmword_224663448;
  v215[1] = *(_OWORD *)dbl_224663458;
  if ((v7 & 0x102040810204080) != 0)
    sub_223B26C48((uint64_t)v210, 3, 3, 3, (uint64_t)&v756, (uint64_t)v215, COERCE_DOUBLE(0x760000003FLL), dbl_224663458[0], v2, v3, v4, v5);
  v213[2] = v173;
  v213[3] = v174;
  v213[4] = v175;
  v214 = v176;
  v213[0] = v171;
  v213[1] = v172;
  v757 = 0;
  v218[0] = xmmword_224663468;
  v218[1] = *(_OWORD *)dbl_224663478;
  if ((v7 & 0x100) != 0)
    sub_223B26C48((uint64_t)v213, 0, 0, 4, (uint64_t)&v757, (uint64_t)v218, COERCE_DOUBLE(0x4100000040), dbl_224663478[0], v2, v3, v4, v5);
  v216[2] = v173;
  v216[3] = v174;
  v216[4] = v175;
  v217 = v176;
  v216[0] = v171;
  v216[1] = v172;
  v758 = 0;
  v225[0] = xmmword_224663488;
  v225[1] = *(_OWORD *)dbl_224663498;
  if ((v7 & 0x300) != 0)
    sub_223B26C48((uint64_t)v216, 0, 0, 5, (uint64_t)&v758, (uint64_t)v225, COERCE_DOUBLE(0x4800000041), dbl_224663498[0], v2, v3, v4, v5);
  v221 = v189;
  v222 = v190;
  v223 = v191;
  v224 = v192;
  v219 = v187;
  v220 = v188;
  v759 = 0;
  v228[0] = xmmword_2246634A8;
  v228[1] = *(_OWORD *)dbl_2246634B8;
  if ((v7 & 0x500) != 0)
    sub_223B26C48((uint64_t)&v219, 0, 1, 4, (uint64_t)&v759, (uint64_t)v228, COERCE_DOUBLE(0x4300000042), dbl_2246634B8[0], v2, v3, v4, v5);
  v226[2] = v189;
  v226[3] = v190;
  v226[4] = v191;
  v227 = v192;
  v226[0] = v187;
  v226[1] = v188;
  v760 = 0;
  v231[0] = xmmword_2246634C8;
  v231[1] = *(_OWORD *)dbl_2246634D8;
  if ((v7 & 0xF00) != 0)
    sub_223B26C48((uint64_t)v226, 0, 1, 5, (uint64_t)&v760, (uint64_t)v231, COERCE_DOUBLE(0x4A00000043), dbl_2246634D8[0], v2, v3, v4, v5);
  v229[2] = v189;
  v229[3] = v190;
  v229[4] = v191;
  v230 = v192;
  v229[0] = v187;
  v229[1] = v188;
  v761 = 0;
  v234[0] = xmmword_2246634E8;
  v234[1] = *(_OWORD *)dbl_2246634F8;
  if ((v7 & 0x1100) != 0)
    sub_223B26C48((uint64_t)v229, 1, 0, 4, (uint64_t)&v761, (uint64_t)v234, COERCE_DOUBLE(0x4500000044), dbl_2246634F8[0], v2, v3, v4, v5);
  v232[2] = v189;
  v232[3] = v190;
  v232[4] = v191;
  v233 = v192;
  v232[0] = v187;
  v232[1] = v188;
  v762 = 0;
  v241[0] = xmmword_224663508;
  v241[1] = *(_OWORD *)dbl_224663518;
  if ((v7 & 0x3300) != 0)
    sub_223B26C48((uint64_t)v232, 1, 0, 5, (uint64_t)&v762, (uint64_t)v241, COERCE_DOUBLE(0x4C00000045), dbl_224663518[0], v2, v3, v4, v5);
  v237 = v205;
  v238 = v206;
  v239 = v207;
  v240 = v208;
  v235 = v203;
  v236 = v204;
  v763 = 0;
  v244[0] = xmmword_224663528;
  v244[1] = *(_OWORD *)dbl_224663538;
  if ((v7 & 0x5500) != 0)
    sub_223B26C48((uint64_t)&v235, 1, 1, 4, (uint64_t)&v763, (uint64_t)v244, COERCE_DOUBLE(0x4700000046), dbl_224663538[0], v2, v3, v4, v5);
  v242[2] = v205;
  v242[3] = v206;
  v242[4] = v207;
  v243 = v208;
  v242[0] = v203;
  v242[1] = v204;
  v764 = 0;
  v247[0] = xmmword_224663548;
  v247[1] = *(_OWORD *)dbl_224663558;
  if ((v7 & 0xFF00) != 0)
    sub_223B26C48((uint64_t)v242, 1, 1, 5, (uint64_t)&v764, (uint64_t)v247, COERCE_DOUBLE(0x4E00000047), dbl_224663558[0], v2, v3, v4, v5);
  v245[2] = v205;
  v245[3] = v206;
  v245[4] = v207;
  v246 = v208;
  v245[0] = v203;
  v245[1] = v204;
  v765 = 0;
  v250[0] = xmmword_224663568;
  v250[1] = *(_OWORD *)dbl_224663578;
  if ((v7 & 0x200) != 0)
    sub_223B26C48((uint64_t)v245, 0, 0, 6, (uint64_t)&v765, (uint64_t)v250, COERCE_DOUBLE(0x4900000048), dbl_224663578[0], v2, v3, v4, v5);
  v248[2] = v205;
  v248[3] = v206;
  v248[4] = v207;
  v249 = v208;
  v248[0] = v203;
  v248[1] = v204;
  v766 = 0x100010001000100;
  v257[0] = xmmword_224663588;
  v257[1] = *(_OWORD *)dbl_224663598;
  sub_223B26C48((uint64_t)v248, 0, 0, 7, (uint64_t)&v766, (uint64_t)v257, COERCE_DOUBLE(73), dbl_224663598[0], v2, v3, v4, v5);
  v253 = v205;
  v254 = v206;
  v255 = v207;
  v256 = v208;
  v251 = v203;
  v252 = v204;
  v767 = 0;
  v260[0] = xmmword_2246635A8;
  v260[1] = *(_OWORD *)dbl_2246635B8;
  if ((v7 & 0xA00) != 0)
    sub_223B26C48((uint64_t)&v251, 0, 1, 6, (uint64_t)&v767, (uint64_t)v260, COERCE_DOUBLE(0x4B0000004ALL), dbl_2246635B8[0], v10, v11, v12, v13);
  v258[2] = v221;
  v258[3] = v222;
  v258[4] = v223;
  v259 = v224;
  v258[0] = v219;
  v258[1] = v220;
  v768 = 0x100010001000100;
  v263[0] = xmmword_2246635C8;
  v263[1] = *(_OWORD *)dbl_2246635D8;
  sub_223B26C48((uint64_t)v258, 0, 1, 7, (uint64_t)&v768, (uint64_t)v263, COERCE_DOUBLE(0x20000004BLL), dbl_2246635D8[0], v10, v11, v12, v13);
  v261[2] = v221;
  v261[3] = v222;
  v261[4] = v223;
  v262 = v224;
  v261[0] = v219;
  v261[1] = v220;
  v769 = 0;
  v266[0] = xmmword_2246635E8;
  v266[1] = *(_OWORD *)dbl_2246635F8;
  if ((v7 & 0x2200) != 0)
    sub_223B26C48((uint64_t)v261, 1, 0, 6, (uint64_t)&v769, (uint64_t)v266, COERCE_DOUBLE(0x4D0000004CLL), dbl_2246635F8[0], v14, v15, v16, v17);
  v264[2] = v221;
  v264[3] = v222;
  v264[4] = v223;
  v265 = v224;
  v264[0] = v219;
  v264[1] = v220;
  v770 = 0x100010001000100;
  v273[0] = xmmword_224663608;
  v273[1] = *(_OWORD *)dbl_224663618;
  sub_223B26C48((uint64_t)v264, 1, 0, 7, (uint64_t)&v770, (uint64_t)v273, COERCE_DOUBLE(0x40000004DLL), dbl_224663618[0], v14, v15, v16, v17);
  v269 = v221;
  v270 = v222;
  v271 = v223;
  v272 = v224;
  v267 = v219;
  v268 = v220;
  v771 = 0;
  v276[0] = xmmword_224663628;
  v276[1] = *(_OWORD *)dbl_224663638;
  if ((v7 & 0xAA00) != 0)
    sub_223B26C48((uint64_t)&v267, 1, 1, 6, (uint64_t)&v771, (uint64_t)v276, COERCE_DOUBLE(0x4F0000004ELL), dbl_224663638[0], v18, v19, v20, v21);
  v274[2] = v237;
  v274[3] = v238;
  v274[4] = v239;
  v275 = v240;
  v274[0] = v235;
  v274[1] = v236;
  v772 = 0x100010001000100;
  v279[0] = xmmword_224663648;
  v279[1] = *(_OWORD *)dbl_224663658;
  sub_223B26C48((uint64_t)v274, 1, 1, 7, (uint64_t)&v772, (uint64_t)v279, COERCE_DOUBLE(0x60000004FLL), dbl_224663658[0], v18, v19, v20, v21);
  v277[2] = v237;
  v277[3] = v238;
  v277[4] = v239;
  v278 = v240;
  v277[0] = v235;
  v277[1] = v236;
  v773 = 0;
  v282[0] = xmmword_224663668;
  v282[1] = *(_OWORD *)dbl_224663678;
  if ((v7 & 0x400) != 0)
    sub_223B26C48((uint64_t)v277, 0, 2, 4, (uint64_t)&v773, (uint64_t)v282, COERCE_DOUBLE(0x5100000050), dbl_224663678[0], v22, v23, v24, v25);
  v280[2] = v253;
  v280[3] = v254;
  v280[4] = v255;
  v281 = v256;
  v280[0] = v251;
  v280[1] = v252;
  v774 = 0;
  v289[0] = xmmword_224663688;
  v289[1] = *(_OWORD *)dbl_224663698;
  if ((v7 & 0xC00) != 0)
    sub_223B26C48((uint64_t)v280, 0, 2, 5, (uint64_t)&v774, (uint64_t)v289, COERCE_DOUBLE(0x5800000051), dbl_224663698[0], v22, v23, v24, v25);
  v285 = v253;
  v286 = v254;
  v287 = v255;
  v288 = v256;
  v283 = v251;
  v284 = v252;
  v775 = 0;
  v292[0] = xmmword_2246636A8;
  v292[1] = *(_OWORD *)dbl_2246636B8;
  if ((v7 & 0x1000400) != 0)
    sub_223B26C48((uint64_t)&v283, 0, 3, 4, (uint64_t)&v775, (uint64_t)v292, COERCE_DOUBLE(0x5300000052), dbl_2246636B8[0], v22, v23, v24, v25);
  v290[2] = v253;
  v290[3] = v254;
  v290[4] = v255;
  v291 = v256;
  v290[0] = v251;
  v290[1] = v252;
  v776 = 0;
  v295[0] = xmmword_2246636C8;
  v295[1] = *(_OWORD *)dbl_2246636D8;
  if ((v7 & 0x3000C00) != 0)
    sub_223B26C48((uint64_t)v290, 0, 3, 5, (uint64_t)&v776, (uint64_t)v295, COERCE_DOUBLE(0x5A00000053), dbl_2246636D8[0], v22, v23, v24, v25);
  v293[2] = v253;
  v293[3] = v254;
  v293[4] = v255;
  v294 = v256;
  v293[0] = v251;
  v293[1] = v252;
  v777 = 0;
  v298[0] = xmmword_2246636E8;
  v298[1] = *(_OWORD *)dbl_2246636F8;
  if ((v7 & 0x4400) != 0)
    sub_223B26C48((uint64_t)v293, 1, 2, 4, (uint64_t)&v777, (uint64_t)v298, COERCE_DOUBLE(0x5500000054), dbl_2246636F8[0], v22, v23, v24, v25);
  v296[2] = v253;
  v296[3] = v254;
  v296[4] = v255;
  v297 = v256;
  v296[0] = v251;
  v296[1] = v252;
  v778 = 0;
  v305[0] = xmmword_224663708;
  v305[1] = *(_OWORD *)dbl_224663718;
  if ((v7 & 0xCC00) != 0)
    sub_223B26C48((uint64_t)v296, 1, 2, 5, (uint64_t)&v778, (uint64_t)v305, COERCE_DOUBLE(0x5C00000055), dbl_224663718[0], v22, v23, v24, v25);
  v301 = v269;
  v302 = v270;
  v303 = v271;
  v304 = v272;
  v299 = v267;
  v300 = v268;
  v779 = 0;
  v308[0] = xmmword_224663728;
  v308[1] = *(_OWORD *)dbl_224663738;
  if ((v7 & 0x11004400) != 0)
    sub_223B26C48((uint64_t)&v299, 1, 3, 4, (uint64_t)&v779, (uint64_t)v308, COERCE_DOUBLE(0x5700000056), dbl_224663738[0], v22, v23, v24, v25);
  v306[2] = v269;
  v306[3] = v270;
  v306[4] = v271;
  v307 = v272;
  v306[0] = v267;
  v306[1] = v268;
  v780 = 0;
  v311[0] = xmmword_224663748;
  v311[1] = *(_OWORD *)dbl_224663758;
  if ((v7 & 0x3300CC00) != 0)
    sub_223B26C48((uint64_t)v306, 1, 3, 5, (uint64_t)&v780, (uint64_t)v311, COERCE_DOUBLE(0x5E00000057), dbl_224663758[0], v22, v23, v24, v25);
  v309[2] = v269;
  v309[3] = v270;
  v309[4] = v271;
  v310 = v272;
  v309[0] = v267;
  v309[1] = v268;
  v781 = 0;
  v314[0] = xmmword_224663768;
  v314[1] = *(_OWORD *)dbl_224663778;
  if ((v7 & 0x800) != 0)
    sub_223B26C48((uint64_t)v309, 0, 2, 6, (uint64_t)&v781, (uint64_t)v314, COERCE_DOUBLE(0x5900000058), dbl_224663778[0], v22, v23, v24, v25);
  v312[2] = v269;
  v312[3] = v270;
  v312[4] = v271;
  v313 = v272;
  v312[0] = v267;
  v312[1] = v268;
  v782 = 0x100010001000100;
  v321[0] = xmmword_224663788;
  v321[1] = *(_OWORD *)dbl_224663798;
  sub_223B26C48((uint64_t)v312, 0, 2, 7, (uint64_t)&v782, (uint64_t)v321, COERCE_DOUBLE(0x1000000059), dbl_224663798[0], v22, v23, v24, v25);
  v317 = v269;
  v318 = v270;
  v319 = v271;
  v320 = v272;
  v315 = v267;
  v316 = v268;
  v783 = 0;
  v324[0] = xmmword_2246637A8;
  v324[1] = *(_OWORD *)dbl_2246637B8;
  if ((v7 & 0x2000800) != 0)
    sub_223B26C48((uint64_t)&v315, 0, 3, 6, (uint64_t)&v783, (uint64_t)v324, COERCE_DOUBLE(0x5B0000005ALL), dbl_2246637B8[0], v26, v27, v28, v29);
  v322[2] = v285;
  v322[3] = v286;
  v322[4] = v287;
  v323 = v288;
  v322[0] = v283;
  v322[1] = v284;
  v784 = 0x100010001000100;
  v327[0] = xmmword_2246637C8;
  v327[1] = *(_OWORD *)dbl_2246637D8;
  sub_223B26C48((uint64_t)v322, 0, 3, 7, (uint64_t)&v784, (uint64_t)v327, COERCE_DOUBLE(0x120000005BLL), dbl_2246637D8[0], v26, v27, v28, v29);
  v325[2] = v285;
  v325[3] = v286;
  v325[4] = v287;
  v326 = v288;
  v325[0] = v283;
  v325[1] = v284;
  v785 = 0;
  v330[0] = xmmword_2246637E8;
  v330[1] = *(_OWORD *)dbl_2246637F8;
  if ((v7 & 0x8800) != 0)
    sub_223B26C48((uint64_t)v325, 1, 2, 6, (uint64_t)&v785, (uint64_t)v330, COERCE_DOUBLE(0x5D0000005CLL), dbl_2246637F8[0], v30, v31, v32, v33);
  v328[2] = v285;
  v328[3] = v286;
  v328[4] = v287;
  v329 = v288;
  v328[0] = v283;
  v328[1] = v284;
  v786 = 0x100010001000100;
  v337[0] = xmmword_224663808;
  v337[1] = *(_OWORD *)dbl_224663818;
  sub_223B26C48((uint64_t)v328, 1, 2, 7, (uint64_t)&v786, (uint64_t)v337, COERCE_DOUBLE(0x140000005DLL), dbl_224663818[0], v30, v31, v32, v33);
  v333 = v285;
  v334 = v286;
  v335 = v287;
  v336 = v288;
  v331 = v283;
  v332 = v284;
  v787 = 0;
  v340[0] = xmmword_224663828;
  v340[1] = *(_OWORD *)dbl_224663838;
  if ((v7 & 0x22008800) != 0)
    sub_223B26C48((uint64_t)&v331, 1, 3, 6, (uint64_t)&v787, (uint64_t)v340, COERCE_DOUBLE(0x5F0000005ELL), dbl_224663838[0], v34, v35, v36, v37);
  v338[2] = v301;
  v338[3] = v302;
  v338[4] = v303;
  v339 = v304;
  v338[0] = v299;
  v338[1] = v300;
  v788 = 0x100010001000100;
  v343[0] = xmmword_224663848;
  v343[1] = *(_OWORD *)dbl_224663858;
  sub_223B26C48((uint64_t)v338, 1, 3, 7, (uint64_t)&v788, (uint64_t)v343, COERCE_DOUBLE(0x160000005FLL), dbl_224663858[0], v34, v35, v36, v37);
  v341[2] = v301;
  v341[3] = v302;
  v341[4] = v303;
  v342 = v304;
  v341[0] = v299;
  v341[1] = v300;
  v789 = 0;
  v346[0] = xmmword_224663868;
  v346[1] = *(_OWORD *)dbl_224663878;
  if ((v7 & 0x1000) != 0)
    sub_223B26C48((uint64_t)v341, 2, 0, 4, (uint64_t)&v789, (uint64_t)v346, COERCE_DOUBLE(0x6100000060), dbl_224663878[0], v38, v39, v40, v41);
  v344[2] = v317;
  v344[3] = v318;
  v344[4] = v319;
  v345 = v320;
  v344[0] = v315;
  v344[1] = v316;
  v790 = 0;
  v353[0] = xmmword_224663888;
  v353[1] = *(_OWORD *)dbl_224663898;
  if ((v7 & 0x3000) != 0)
    sub_223B26C48((uint64_t)v344, 2, 0, 5, (uint64_t)&v790, (uint64_t)v353, COERCE_DOUBLE(0x6800000061), dbl_224663898[0], v38, v39, v40, v41);
  v349 = v317;
  v350 = v318;
  v351 = v319;
  v352 = v320;
  v347 = v315;
  v348 = v316;
  v791 = 0;
  v356[0] = xmmword_2246638A8;
  v356[1] = *(_OWORD *)dbl_2246638B8;
  if ((v7 & 0x5000) != 0)
    sub_223B26C48((uint64_t)&v347, 2, 1, 4, (uint64_t)&v791, (uint64_t)v356, COERCE_DOUBLE(0x6300000062), dbl_2246638B8[0], v38, v39, v40, v41);
  v354[2] = v317;
  v354[3] = v318;
  v354[4] = v319;
  v355 = v320;
  v354[0] = v315;
  v354[1] = v316;
  v792 = 0;
  v359[0] = xmmword_2246638C8;
  v359[1] = *(_OWORD *)dbl_2246638D8;
  if ((v7 & 0xF000) != 0)
    sub_223B26C48((uint64_t)v354, 2, 1, 5, (uint64_t)&v792, (uint64_t)v359, COERCE_DOUBLE(0x6A00000063), dbl_2246638D8[0], v38, v39, v40, v41);
  v357[2] = v317;
  v357[3] = v318;
  v357[4] = v319;
  v358 = v320;
  v357[0] = v315;
  v357[1] = v316;
  v793 = 0;
  v362[0] = xmmword_2246638E8;
  v362[1] = *(_OWORD *)dbl_2246638F8;
  if ((v7 & 0x10000001000) != 0)
    sub_223B26C48((uint64_t)v357, 3, 0, 4, (uint64_t)&v793, (uint64_t)v362, COERCE_DOUBLE(0x6500000064), dbl_2246638F8[0], v38, v39, v40, v41);
  v360[2] = v317;
  v360[3] = v318;
  v360[4] = v319;
  v361 = v320;
  v360[0] = v315;
  v360[1] = v316;
  v794 = 0;
  v369[0] = xmmword_224663908;
  v369[1] = *(_OWORD *)dbl_224663918;
  if ((v7 & 0x30000003000) != 0)
    sub_223B26C48((uint64_t)v360, 3, 0, 5, (uint64_t)&v794, (uint64_t)v369, COERCE_DOUBLE(0x6C00000065), dbl_224663918[0], v38, v39, v40, v41);
  v365 = v333;
  v366 = v334;
  v367 = v335;
  v368 = v336;
  v363 = v331;
  v364 = v332;
  v795 = 0;
  v372[0] = xmmword_224663928;
  v372[1] = *(_OWORD *)dbl_224663938;
  if ((v7 & 0x50000005000) != 0)
    sub_223B26C48((uint64_t)&v363, 3, 1, 4, (uint64_t)&v795, (uint64_t)v372, COERCE_DOUBLE(0x6700000066), dbl_224663938[0], v38, v39, v40, v41);
  v370[2] = v333;
  v370[3] = v334;
  v370[4] = v335;
  v371 = v336;
  v370[0] = v331;
  v370[1] = v332;
  v796 = 0;
  v375[0] = xmmword_224663948;
  v375[1] = *(_OWORD *)dbl_224663958;
  if ((v7 & 0xF000000F000) != 0)
    sub_223B26C48((uint64_t)v370, 3, 1, 5, (uint64_t)&v796, (uint64_t)v375, COERCE_DOUBLE(0x6E00000067), dbl_224663958[0], v38, v39, v40, v41);
  v373[2] = v333;
  v373[3] = v334;
  v373[4] = v335;
  v374 = v336;
  v373[0] = v331;
  v373[1] = v332;
  v797 = 0;
  v378[0] = xmmword_224663968;
  v378[1] = *(_OWORD *)dbl_224663978;
  if ((v7 & 0x2000) != 0)
    sub_223B26C48((uint64_t)v373, 2, 0, 6, (uint64_t)&v797, (uint64_t)v378, COERCE_DOUBLE(0x6900000068), dbl_224663978[0], v38, v39, v40, v41);
  v376[2] = v333;
  v376[3] = v334;
  v376[4] = v335;
  v377 = v336;
  v376[0] = v331;
  v376[1] = v332;
  v798 = 0x100010001000100;
  v385[0] = xmmword_224663988;
  v385[1] = *(_OWORD *)dbl_224663998;
  sub_223B26C48((uint64_t)v376, 2, 0, 7, (uint64_t)&v798, (uint64_t)v385, COERCE_DOUBLE(0x2000000069), dbl_224663998[0], v38, v39, v40, v41);
  v381 = v333;
  v382 = v334;
  v383 = v335;
  v384 = v336;
  v379 = v331;
  v380 = v332;
  v799 = 0;
  v388[0] = xmmword_2246639A8;
  v388[1] = *(_OWORD *)dbl_2246639B8;
  if ((v7 & 0xA000) != 0)
    sub_223B26C48((uint64_t)&v379, 2, 1, 6, (uint64_t)&v799, (uint64_t)v388, COERCE_DOUBLE(0x6B0000006ALL), dbl_2246639B8[0], v42, v43, v44, v45);
  v386[2] = v349;
  v386[3] = v350;
  v386[4] = v351;
  v387 = v352;
  v386[0] = v347;
  v386[1] = v348;
  v800 = 0x100010001000100;
  v391[0] = xmmword_2246639C8;
  v391[1] = *(_OWORD *)dbl_2246639D8;
  sub_223B26C48((uint64_t)v386, 2, 1, 7, (uint64_t)&v800, (uint64_t)v391, COERCE_DOUBLE(0x220000006BLL), dbl_2246639D8[0], v42, v43, v44, v45);
  v389[2] = v349;
  v389[3] = v350;
  v389[4] = v351;
  v390 = v352;
  v389[0] = v347;
  v389[1] = v348;
  v801 = 0;
  v394[0] = xmmword_2246639E8;
  v394[1] = *(_OWORD *)dbl_2246639F8;
  if ((v7 & 0x20000002000) != 0)
    sub_223B26C48((uint64_t)v389, 3, 0, 6, (uint64_t)&v801, (uint64_t)v394, COERCE_DOUBLE(0x6D0000006CLL), dbl_2246639F8[0], v46, v47, v48, v49);
  v392[2] = v349;
  v392[3] = v350;
  v392[4] = v351;
  v393 = v352;
  v392[0] = v347;
  v392[1] = v348;
  v802 = 0x100010001000100;
  v401[0] = xmmword_224663A08;
  v401[1] = *(_OWORD *)dbl_224663A18;
  sub_223B26C48((uint64_t)v392, 3, 0, 7, (uint64_t)&v802, (uint64_t)v401, COERCE_DOUBLE(0x240000006DLL), dbl_224663A18[0], v46, v47, v48, v49);
  v397 = v349;
  v398 = v350;
  v399 = v351;
  v400 = v352;
  v395 = v347;
  v396 = v348;
  v803 = 0;
  v404[0] = xmmword_224663A28;
  v404[1] = *(_OWORD *)dbl_224663A38;
  if ((v7 & 0xA000000A000) != 0)
    sub_223B26C48((uint64_t)&v395, 3, 1, 6, (uint64_t)&v803, (uint64_t)v404, COERCE_DOUBLE(0x6F0000006ELL), dbl_224663A38[0], v50, v51, v52, v53);
  v402[2] = v365;
  v402[3] = v366;
  v402[4] = v367;
  v403 = v368;
  v402[0] = v363;
  v402[1] = v364;
  v804 = 0x100010001000100;
  v407[0] = xmmword_224663A48;
  v407[1] = *(_OWORD *)dbl_224663A58;
  sub_223B26C48((uint64_t)v402, 3, 1, 7, (uint64_t)&v804, (uint64_t)v407, COERCE_DOUBLE(0x260000006FLL), dbl_224663A58[0], v50, v51, v52, v53);
  v405[2] = v365;
  v405[3] = v366;
  v405[4] = v367;
  v406 = v368;
  v405[0] = v363;
  v405[1] = v364;
  v805 = 0;
  v410[0] = xmmword_224663A68;
  v410[1] = *(_OWORD *)dbl_224663A78;
  if ((v7 & 0x4000) != 0)
    sub_223B26C48((uint64_t)v405, 2, 2, 4, (uint64_t)&v805, (uint64_t)v410, COERCE_DOUBLE(0x7100000070), dbl_224663A78[0], v54, v55, v56, v57);
  v408[2] = v381;
  v408[3] = v382;
  v408[4] = v383;
  v409 = v384;
  v408[0] = v379;
  v408[1] = v380;
  v806 = 0;
  v417[0] = xmmword_224663A88;
  v417[1] = *(_OWORD *)dbl_224663A98;
  if ((v7 & 0xC000) != 0)
    sub_223B26C48((uint64_t)v408, 2, 2, 5, (uint64_t)&v806, (uint64_t)v417, COERCE_DOUBLE(0x7800000071), dbl_224663A98[0], v54, v55, v56, v57);
  v413 = v381;
  v414 = v382;
  v415 = v383;
  v416 = v384;
  v411 = v379;
  v412 = v380;
  v807 = 0;
  v420[0] = xmmword_224663AA8;
  v420[1] = *(_OWORD *)dbl_224663AB8;
  if ((v7 & 0x10004000) != 0)
    sub_223B26C48((uint64_t)&v411, 2, 3, 4, (uint64_t)&v807, (uint64_t)v420, COERCE_DOUBLE(0x7300000072), dbl_224663AB8[0], v54, v55, v56, v57);
  v418[2] = v381;
  v418[3] = v382;
  v418[4] = v383;
  v419 = v384;
  v418[0] = v379;
  v418[1] = v380;
  v808 = 0;
  v423[0] = xmmword_224663AC8;
  v423[1] = *(_OWORD *)dbl_224663AD8;
  if ((v7 & 0x3000C000) != 0)
    sub_223B26C48((uint64_t)v418, 2, 3, 5, (uint64_t)&v808, (uint64_t)v423, COERCE_DOUBLE(0x7A00000073), dbl_224663AD8[0], v54, v55, v56, v57);
  v421[2] = v381;
  v421[3] = v382;
  v421[4] = v383;
  v422 = v384;
  v421[0] = v379;
  v421[1] = v380;
  v809 = 0;
  v426[0] = xmmword_224663AE8;
  v426[1] = *(_OWORD *)dbl_224663AF8;
  if ((v7 & 0x40000004000) != 0)
    sub_223B26C48((uint64_t)v421, 3, 2, 4, (uint64_t)&v809, (uint64_t)v426, COERCE_DOUBLE(0x7500000074), dbl_224663AF8[0], v54, v55, v56, v57);
  v424[2] = v381;
  v424[3] = v382;
  v424[4] = v383;
  v425 = v384;
  v424[0] = v379;
  v424[1] = v380;
  v810 = 0;
  v433[0] = xmmword_224663B08;
  v433[1] = *(_OWORD *)dbl_224663B18;
  if ((v7 & 0xC000000C000) != 0)
    sub_223B26C48((uint64_t)v424, 3, 2, 5, (uint64_t)&v810, (uint64_t)v433, COERCE_DOUBLE(0x7C00000075), dbl_224663B18[0], v54, v55, v56, v57);
  v429 = v397;
  v430 = v398;
  v431 = v399;
  v432 = v400;
  v427 = v395;
  v428 = v396;
  v811 = 0;
  v436[0] = xmmword_224663B28;
  v436[1] = *(_OWORD *)dbl_224663B38;
  if ((v7 & 0x100040010004000) != 0)
    sub_223B26C48((uint64_t)&v427, 3, 3, 4, (uint64_t)&v811, (uint64_t)v436, COERCE_DOUBLE(0x7700000076), dbl_224663B38[0], v54, v55, v56, v57);
  v434[2] = v397;
  v434[3] = v398;
  v434[4] = v399;
  v435 = v400;
  v434[0] = v395;
  v434[1] = v396;
  v812 = 0;
  v439[0] = xmmword_224663B48;
  v439[1] = *(_OWORD *)dbl_224663B58;
  if ((v7 & 0x3000C003000C000) != 0)
    sub_223B26C48((uint64_t)v434, 3, 3, 5, (uint64_t)&v812, (uint64_t)v439, COERCE_DOUBLE(0x7E00000077), dbl_224663B58[0], v54, v55, v56, v57);
  v437[2] = v397;
  v437[3] = v398;
  v437[4] = v399;
  v438 = v400;
  v437[0] = v395;
  v437[1] = v396;
  v813 = 0;
  v442[0] = xmmword_224663B68;
  v442[1] = *(_OWORD *)dbl_224663B78;
  if ((v7 & 0x8000) != 0)
    sub_223B26C48((uint64_t)v437, 2, 2, 6, (uint64_t)&v813, (uint64_t)v442, COERCE_DOUBLE(0x7900000078), dbl_224663B78[0], v54, v55, v56, v57);
  v440[2] = v397;
  v440[3] = v398;
  v440[4] = v399;
  v441 = v400;
  v440[0] = v395;
  v440[1] = v396;
  v814 = 0x100010001000100;
  v449[0] = xmmword_224663B88;
  v449[1] = *(_OWORD *)dbl_224663B98;
  sub_223B26C48((uint64_t)v440, 2, 2, 7, (uint64_t)&v814, (uint64_t)v449, COERCE_DOUBLE(0x3000000079), dbl_224663B98[0], v54, v55, v56, v57);
  v445 = v397;
  v446 = v398;
  v447 = v399;
  v448 = v400;
  v443 = v395;
  v444 = v396;
  v815 = 0;
  v452[0] = xmmword_224663BA8;
  v452[1] = *(_OWORD *)dbl_224663BB8;
  if ((v7 & 0x20008000) != 0)
    sub_223B26C48((uint64_t)&v443, 2, 3, 6, (uint64_t)&v815, (uint64_t)v452, COERCE_DOUBLE(0x7B0000007ALL), dbl_224663BB8[0], v58, v59, v60, v61);
  v450[2] = v413;
  v450[3] = v414;
  v450[4] = v415;
  v451 = v416;
  v450[0] = v411;
  v450[1] = v412;
  v816 = 0x100010001000100;
  v455[0] = xmmword_224663BC8;
  v455[1] = *(_OWORD *)dbl_224663BD8;
  sub_223B26C48((uint64_t)v450, 2, 3, 7, (uint64_t)&v816, (uint64_t)v455, COERCE_DOUBLE(0x320000007BLL), dbl_224663BD8[0], v58, v59, v60, v61);
  v453[2] = v413;
  v453[3] = v414;
  v453[4] = v415;
  v454 = v416;
  v453[0] = v411;
  v453[1] = v412;
  v817 = 0;
  v458[0] = xmmword_224663BE8;
  v458[1] = *(_OWORD *)dbl_224663BF8;
  if ((v7 & 0x80000008000) != 0)
    sub_223B26C48((uint64_t)v453, 3, 2, 6, (uint64_t)&v817, (uint64_t)v458, COERCE_DOUBLE(0x7D0000007CLL), dbl_224663BF8[0], v62, v63, v64, v65);
  v456[2] = v413;
  v456[3] = v414;
  v456[4] = v415;
  v457 = v416;
  v456[0] = v411;
  v456[1] = v412;
  v818 = 0x100010001000100;
  v465[0] = xmmword_224663C08;
  v465[1] = *(_OWORD *)dbl_224663C18;
  sub_223B26C48((uint64_t)v456, 3, 2, 7, (uint64_t)&v818, (uint64_t)v465, COERCE_DOUBLE(0x340000007DLL), dbl_224663C18[0], v62, v63, v64, v65);
  v461 = v413;
  v462 = v414;
  v463 = v415;
  v464 = v416;
  v459 = v411;
  v460 = v412;
  v819 = 0;
  v468[0] = xmmword_224663C28;
  v468[1] = *(_OWORD *)dbl_224663C38;
  if ((v7 & 0x200080020008000) != 0)
    sub_223B26C48((uint64_t)&v459, 3, 3, 6, (uint64_t)&v819, (uint64_t)v468, COERCE_DOUBLE(0x7F0000007ELL), dbl_224663C38[0], v66, v67, v68, v69);
  v466[2] = v429;
  v466[3] = v430;
  v466[4] = v431;
  v467 = v432;
  v466[0] = v427;
  v466[1] = v428;
  v820 = 0x100010001000100;
  v471[0] = xmmword_224663C48;
  v471[1] = *(_OWORD *)dbl_224663C58;
  sub_223B26C48((uint64_t)v466, 3, 3, 7, (uint64_t)&v820, (uint64_t)v471, COERCE_DOUBLE(0x360000007FLL), dbl_224663C58[0], v66, v67, v68, v69);
  v469[2] = v429;
  v469[3] = v430;
  v469[4] = v431;
  v470 = v432;
  v469[0] = v427;
  v469[1] = v428;
  v821 = 0;
  v474[0] = xmmword_224663C68;
  v474[1] = *(_OWORD *)dbl_224663C78;
  if ((v7 & 0x10000) != 0)
    sub_223B26C48((uint64_t)v469, 0, 4, 0, (uint64_t)&v821, (uint64_t)v474, COERCE_DOUBLE(0x8100000080), dbl_224663C78[0], v70, v71, v72, v73);
  v472[2] = v445;
  v472[3] = v446;
  v472[4] = v447;
  v473 = v448;
  v472[0] = v443;
  v472[1] = v444;
  v822 = 0;
  v481[0] = xmmword_224663C88;
  v481[1] = *(_OWORD *)dbl_224663C98;
  if ((v7 & 0x30000) != 0)
    sub_223B26C48((uint64_t)v472, 0, 4, 1, (uint64_t)&v822, (uint64_t)v481, COERCE_DOUBLE(0x8800000081), dbl_224663C98[0], v70, v71, v72, v73);
  v477 = v445;
  v478 = v446;
  v479 = v447;
  v480 = v448;
  v475 = v443;
  v476 = v444;
  v823 = 0;
  v484[0] = xmmword_224663CA8;
  v484[1] = *(_OWORD *)dbl_224663CB8;
  if ((v7 & 0x50000) != 0)
    sub_223B26C48((uint64_t)&v475, 0, 5, 0, (uint64_t)&v823, (uint64_t)v484, COERCE_DOUBLE(0x8300000082), dbl_224663CB8[0], v70, v71, v72, v73);
  v482[2] = v445;
  v482[3] = v446;
  v482[4] = v447;
  v483 = v448;
  v482[0] = v443;
  v482[1] = v444;
  v824 = 0;
  v487[0] = xmmword_224663CC8;
  v487[1] = *(_OWORD *)dbl_224663CD8;
  if ((v7 & 0xF0000) != 0)
    sub_223B26C48((uint64_t)v482, 0, 5, 1, (uint64_t)&v824, (uint64_t)v487, COERCE_DOUBLE(0x8A00000083), dbl_224663CD8[0], v70, v71, v72, v73);
  v485[2] = v445;
  v485[3] = v446;
  v485[4] = v447;
  v486 = v448;
  v485[0] = v443;
  v485[1] = v444;
  v825 = 0;
  v490[0] = xmmword_224663CE8;
  v490[1] = *(_OWORD *)dbl_224663CF8;
  if ((v7 & 0x110000) != 0)
    sub_223B26C48((uint64_t)v485, 1, 4, 0, (uint64_t)&v825, (uint64_t)v490, COERCE_DOUBLE(0x8500000084), dbl_224663CF8[0], v70, v71, v72, v73);
  v488[2] = v445;
  v488[3] = v446;
  v488[4] = v447;
  v489 = v448;
  v488[0] = v443;
  v488[1] = v444;
  v826 = 0;
  v497[0] = xmmword_224663D08;
  v497[1] = *(_OWORD *)dbl_224663D18;
  if ((v7 & 0x330000) != 0)
    sub_223B26C48((uint64_t)v488, 1, 4, 1, (uint64_t)&v826, (uint64_t)v497, COERCE_DOUBLE(0x8C00000085), dbl_224663D18[0], v70, v71, v72, v73);
  v493 = v461;
  v494 = v462;
  v495 = v463;
  v496 = v464;
  v491 = v459;
  v492 = v460;
  v827 = 0;
  v500[0] = xmmword_224663D28;
  v500[1] = *(_OWORD *)dbl_224663D38;
  if ((v7 & 0x550000) != 0)
    sub_223B26C48((uint64_t)&v491, 1, 5, 0, (uint64_t)&v827, (uint64_t)v500, COERCE_DOUBLE(0x8700000086), dbl_224663D38[0], v70, v71, v72, v73);
  v498[2] = v461;
  v498[3] = v462;
  v498[4] = v463;
  v499 = v464;
  v498[0] = v459;
  v498[1] = v460;
  v828 = 0;
  v503[0] = xmmword_224663D48;
  v503[1] = *(_OWORD *)dbl_224663D58;
  if ((v7 & 0xFF0000) != 0)
    sub_223B26C48((uint64_t)v498, 1, 5, 1, (uint64_t)&v828, (uint64_t)v503, COERCE_DOUBLE(0x8E00000087), dbl_224663D58[0], v70, v71, v72, v73);
  v501[2] = v461;
  v501[3] = v462;
  v501[4] = v463;
  v502 = v464;
  v501[0] = v459;
  v501[1] = v460;
  v829 = 0;
  v506[0] = xmmword_224663D68;
  v506[1] = *(_OWORD *)dbl_224663D78;
  if ((v7 & 0x20000) != 0)
    sub_223B26C48((uint64_t)v501, 0, 4, 2, (uint64_t)&v829, (uint64_t)v506, COERCE_DOUBLE(0x8900000088), dbl_224663D78[0], v70, v71, v72, v73);
  v504[2] = v461;
  v504[3] = v462;
  v504[4] = v463;
  v505 = v464;
  v504[0] = v459;
  v504[1] = v460;
  v830 = 0;
  v513[0] = xmmword_224663D88;
  v513[1] = *(_OWORD *)dbl_224663D98;
  if ((v7 & 0x1020000) != 0)
    sub_223B26C48((uint64_t)v504, 0, 4, 3, (uint64_t)&v830, (uint64_t)v513, COERCE_DOUBLE(0xC000000089), dbl_224663D98[0], v70, v71, v72, v73);
  v509 = v477;
  v510 = v478;
  v511 = v479;
  v512 = v480;
  v507 = v475;
  v508 = v476;
  v831 = 0;
  v516[0] = xmmword_224663DA8;
  v516[1] = *(_OWORD *)dbl_224663DB8;
  if ((v7 & 0xA0000) != 0)
    sub_223B26C48((uint64_t)&v507, 0, 5, 2, (uint64_t)&v831, (uint64_t)v516, COERCE_DOUBLE(0x8B0000008ALL), dbl_224663DB8[0], v70, v71, v72, v73);
  v514[2] = v477;
  v514[3] = v478;
  v514[4] = v479;
  v515 = v480;
  v514[0] = v475;
  v514[1] = v476;
  v832 = 0;
  v519[0] = xmmword_224663DC8;
  v519[1] = *(_OWORD *)dbl_224663DD8;
  if ((v7 & 0x50A0000) != 0)
    sub_223B26C48((uint64_t)v514, 0, 5, 3, (uint64_t)&v832, (uint64_t)v519, COERCE_DOUBLE(0xC20000008BLL), dbl_224663DD8[0], v70, v71, v72, v73);
  v517[2] = v477;
  v517[3] = v478;
  v517[4] = v479;
  v518 = v480;
  v517[0] = v475;
  v517[1] = v476;
  v833 = 0;
  v522[0] = xmmword_224663DE8;
  v522[1] = *(_OWORD *)dbl_224663DF8;
  if ((v7 & 0x220000) != 0)
    sub_223B26C48((uint64_t)v517, 1, 4, 2, (uint64_t)&v833, (uint64_t)v522, COERCE_DOUBLE(0x8D0000008CLL), dbl_224663DF8[0], v70, v71, v72, v73);
  v520[2] = v477;
  v520[3] = v478;
  v520[4] = v479;
  v521 = v480;
  v520[0] = v475;
  v520[1] = v476;
  v834 = 0;
  v529[0] = xmmword_224663E08;
  v529[1] = *(_OWORD *)dbl_224663E18;
  if ((v7 & 0x11220000) != 0)
    sub_223B26C48((uint64_t)v520, 1, 4, 3, (uint64_t)&v834, (uint64_t)v529, COERCE_DOUBLE(0xC40000008DLL), dbl_224663E18[0], v70, v71, v72, v73);
  v525 = v493;
  v526 = v494;
  v527 = v495;
  v528 = v496;
  v523 = v491;
  v524 = v492;
  v835 = 0;
  v532[0] = xmmword_224663E28;
  v532[1] = *(_OWORD *)dbl_224663E38;
  if ((v7 & 0xAA0000) != 0)
    sub_223B26C48((uint64_t)&v523, 1, 5, 2, (uint64_t)&v835, (uint64_t)v532, COERCE_DOUBLE(0x8F0000008ELL), dbl_224663E38[0], v70, v71, v72, v73);
  v530[2] = v493;
  v530[3] = v494;
  v530[4] = v495;
  v531 = v496;
  v530[0] = v491;
  v530[1] = v492;
  v836 = 0;
  v535[0] = xmmword_224663E48;
  v535[1] = *(_OWORD *)dbl_224663E58;
  if ((v7 & 0x55AA0000) != 0)
    sub_223B26C48((uint64_t)v530, 1, 5, 3, (uint64_t)&v836, (uint64_t)v535, COERCE_DOUBLE(0xC60000008FLL), dbl_224663E58[0], v70, v71, v72, v73);
  v533[2] = v493;
  v533[3] = v494;
  v533[4] = v495;
  v534 = v496;
  v533[0] = v491;
  v533[1] = v492;
  v837 = 0;
  v538[0] = xmmword_224663E68;
  v538[1] = *(_OWORD *)dbl_224663E78;
  if ((v7 & 0x40000) != 0)
    sub_223B26C48((uint64_t)v533, 0, 6, 0, (uint64_t)&v837, (uint64_t)v538, COERCE_DOUBLE(0x9100000090), dbl_224663E78[0], v70, v71, v72, v73);
  v536[2] = v493;
  v536[3] = v494;
  v536[4] = v495;
  v537 = v496;
  v536[0] = v491;
  v536[1] = v492;
  v838 = 0;
  v545[0] = xmmword_224663E88;
  v545[1] = *(_OWORD *)dbl_224663E98;
  if ((v7 & 0xC0000) != 0)
    sub_223B26C48((uint64_t)v536, 0, 6, 1, (uint64_t)&v838, (uint64_t)v545, COERCE_DOUBLE(0x9800000091), dbl_224663E98[0], v70, v71, v72, v73);
  v541 = v509;
  v542 = v510;
  v543 = v511;
  v544 = v512;
  v539 = v507;
  v540 = v508;
  v839 = 0x202000002020000;
  v548[0] = xmmword_224663EA8;
  v548[1] = *(_OWORD *)dbl_224663EB8;
  sub_223B26C48((uint64_t)&v539, 0, 7, 0, (uint64_t)&v839, (uint64_t)v548, COERCE_DOUBLE(0x9300000092), dbl_224663EB8[0], v70, v71, v72, v73);
  v546[2] = v509;
  v546[3] = v510;
  v546[4] = v511;
  v547 = v512;
  v546[0] = v507;
  v546[1] = v508;
  v840 = 0x202000002020000;
  v551[0] = xmmword_224663EC8;
  v551[1] = *(_OWORD *)dbl_224663ED8;
  sub_223B26C48((uint64_t)v546, 0, 7, 1, (uint64_t)&v840, (uint64_t)v551, COERCE_DOUBLE(0x9A00000093), dbl_224663ED8[0], v74, v75, v76, v77);
  v549[2] = v509;
  v549[3] = v510;
  v549[4] = v511;
  v550 = v512;
  v549[0] = v507;
  v549[1] = v508;
  v841 = 0;
  v554[0] = xmmword_224663EE8;
  v554[1] = *(_OWORD *)dbl_224663EF8;
  if ((v7 & 0x440000) != 0)
    sub_223B26C48((uint64_t)v549, 1, 6, 0, (uint64_t)&v841, (uint64_t)v554, COERCE_DOUBLE(0x9500000094), dbl_224663EF8[0], v78, v79, v80, v81);
  v552[2] = v509;
  v552[3] = v510;
  v552[4] = v511;
  v553 = v512;
  v552[0] = v507;
  v552[1] = v508;
  v842 = 0;
  v561[0] = xmmword_224663F08;
  v561[1] = *(_OWORD *)dbl_224663F18;
  if ((v7 & 0xCC0000) != 0)
    sub_223B26C48((uint64_t)v552, 1, 6, 1, (uint64_t)&v842, (uint64_t)v561, COERCE_DOUBLE(0x9C00000095), dbl_224663F18[0], v78, v79, v80, v81);
  v557 = v525;
  v558 = v526;
  v559 = v527;
  v560 = v528;
  v555 = v523;
  v556 = v524;
  v843 = 0x202000002020000;
  v564[0] = xmmword_224663F28;
  v564[1] = *(_OWORD *)dbl_224663F38;
  sub_223B26C48((uint64_t)&v555, 1, 7, 0, (uint64_t)&v843, (uint64_t)v564, COERCE_DOUBLE(0x9700000096), dbl_224663F38[0], v78, v79, v80, v81);
  v562[2] = v525;
  v562[3] = v526;
  v562[4] = v527;
  v563 = v528;
  v562[0] = v523;
  v562[1] = v524;
  v844 = 0x202000002020000;
  v567[0] = xmmword_224663F48;
  v567[1] = *(_OWORD *)dbl_224663F58;
  sub_223B26C48((uint64_t)v562, 1, 7, 1, (uint64_t)&v844, (uint64_t)v567, COERCE_DOUBLE(0x9E00000097), dbl_224663F58[0], v82, v83, v84, v85);
  v565[2] = v525;
  v565[3] = v526;
  v565[4] = v527;
  v566 = v528;
  v565[0] = v523;
  v565[1] = v524;
  v845 = 0;
  v570[0] = xmmword_224663F68;
  v570[1] = *(_OWORD *)dbl_224663F78;
  if ((v7 & 0x80000) != 0)
    sub_223B26C48((uint64_t)v565, 0, 6, 2, (uint64_t)&v845, (uint64_t)v570, COERCE_DOUBLE(0x9900000098), dbl_224663F78[0], v86, v87, v88, v89);
  v568[2] = v525;
  v568[3] = v526;
  v568[4] = v527;
  v569 = v528;
  v568[0] = v523;
  v568[1] = v524;
  v846 = 0;
  v577[0] = xmmword_224663F88;
  v577[1] = *(_OWORD *)dbl_224663F98;
  if ((v7 & 0x4080000) != 0)
    sub_223B26C48((uint64_t)v568, 0, 6, 3, (uint64_t)&v846, (uint64_t)v577, COERCE_DOUBLE(0xD000000099), dbl_224663F98[0], v86, v87, v88, v89);
  v573 = v541;
  v574 = v542;
  v575 = v543;
  v576 = v544;
  v571 = v539;
  v572 = v540;
  v847 = 0x202000002020000;
  v580[0] = xmmword_224663FA8;
  v580[1] = *(_OWORD *)dbl_224663FB8;
  sub_223B26C48((uint64_t)&v571, 0, 7, 2, (uint64_t)&v847, (uint64_t)v580, COERCE_DOUBLE(0x9B0000009ALL), dbl_224663FB8[0], v86, v87, v88, v89);
  v578[2] = v541;
  v578[3] = v542;
  v578[4] = v543;
  v579 = v544;
  v578[0] = v539;
  v578[1] = v540;
  v848 = 0x202000002020000;
  v583[0] = xmmword_224663FC8;
  v583[1] = *(_OWORD *)dbl_224663FD8;
  sub_223B26C48((uint64_t)v578, 0, 7, 3, (uint64_t)&v848, (uint64_t)v583, COERCE_DOUBLE(0xD20000009BLL), dbl_224663FD8[0], v90, v91, v92, v93);
  v581[2] = v541;
  v581[3] = v542;
  v581[4] = v543;
  v582 = v544;
  v581[0] = v539;
  v581[1] = v540;
  v849 = 0;
  v586[0] = xmmword_224663FE8;
  v586[1] = *(_OWORD *)dbl_224663FF8;
  if ((v7 & 0x880000) != 0)
    sub_223B26C48((uint64_t)v581, 1, 6, 2, (uint64_t)&v849, (uint64_t)v586, COERCE_DOUBLE(0x9D0000009CLL), dbl_224663FF8[0], v94, v95, v96, v97);
  v584[2] = v541;
  v584[3] = v542;
  v584[4] = v543;
  v585 = v544;
  v584[0] = v539;
  v584[1] = v540;
  v850 = 0;
  v593[0] = xmmword_224664008;
  v593[1] = *(_OWORD *)dbl_224664018;
  if ((v7 & 0x44880000) != 0)
    sub_223B26C48((uint64_t)v584, 1, 6, 3, (uint64_t)&v850, (uint64_t)v593, COERCE_DOUBLE(0xD40000009DLL), dbl_224664018[0], v94, v95, v96, v97);
  v589 = v557;
  v590 = v558;
  v591 = v559;
  v592 = v560;
  v587 = v555;
  v588 = v556;
  v851 = 0x202000002020000;
  v596[0] = xmmword_224664028;
  v596[1] = *(_OWORD *)dbl_224664038;
  sub_223B26C48((uint64_t)&v587, 1, 7, 2, (uint64_t)&v851, (uint64_t)v596, COERCE_DOUBLE(0x9F0000009ELL), dbl_224664038[0], v94, v95, v96, v97);
  v594[2] = v557;
  v594[3] = v558;
  v594[4] = v559;
  v595 = v560;
  v594[0] = v555;
  v594[1] = v556;
  v852 = 0x202000002020000;
  v599[0] = xmmword_224664048;
  v599[1] = *(_OWORD *)dbl_224664058;
  sub_223B26C48((uint64_t)v594, 1, 7, 3, (uint64_t)&v852, (uint64_t)v599, COERCE_DOUBLE(0xD60000009FLL), dbl_224664058[0], v98, v99, v100, v101);
  v597[2] = v557;
  v597[3] = v558;
  v597[4] = v559;
  v598 = v560;
  v597[0] = v555;
  v597[1] = v556;
  v853 = 0;
  v602[0] = xmmword_224664068;
  v602[1] = *(_OWORD *)dbl_224664078;
  if ((v7 & 0x100000) != 0)
    sub_223B26C48((uint64_t)v597, 2, 4, 0, (uint64_t)&v853, (uint64_t)v602, COERCE_DOUBLE(0xA1000000A0), dbl_224664078[0], v102, v103, v104, v105);
  v600[2] = v557;
  v600[3] = v558;
  v600[4] = v559;
  v601 = v560;
  v600[0] = v555;
  v600[1] = v556;
  v854 = 0;
  v609[0] = xmmword_224664088;
  v609[1] = *(_OWORD *)dbl_224664098;
  if ((v7 & 0x300000) != 0)
    sub_223B26C48((uint64_t)v600, 2, 4, 1, (uint64_t)&v854, (uint64_t)v609, COERCE_DOUBLE(0xA8000000A1), dbl_224664098[0], v102, v103, v104, v105);
  v605 = v573;
  v606 = v574;
  v607 = v575;
  v608 = v576;
  v603 = v571;
  v604 = v572;
  v855 = 0;
  v612[0] = xmmword_2246640A8;
  v612[1] = *(_OWORD *)dbl_2246640B8;
  if ((v7 & 0x500000) != 0)
    sub_223B26C48((uint64_t)&v603, 2, 5, 0, (uint64_t)&v855, (uint64_t)v612, COERCE_DOUBLE(0xA3000000A2), dbl_2246640B8[0], v102, v103, v104, v105);
  v610[2] = v573;
  v610[3] = v574;
  v610[4] = v575;
  v611 = v576;
  v610[0] = v571;
  v610[1] = v572;
  v856 = 0;
  v615[0] = xmmword_2246640C8;
  v615[1] = *(_OWORD *)dbl_2246640D8;
  if ((v7 & 0xF00000) != 0)
    sub_223B26C48((uint64_t)v610, 2, 5, 1, (uint64_t)&v856, (uint64_t)v615, COERCE_DOUBLE(0xAA000000A3), dbl_2246640D8[0], v102, v103, v104, v105);
  v613[2] = v573;
  v613[3] = v574;
  v613[4] = v575;
  v614 = v576;
  v613[0] = v571;
  v613[1] = v572;
  v857 = 0;
  v618[0] = xmmword_2246640E8;
  v618[1] = *(_OWORD *)dbl_2246640F8;
  if ((v7 & 0x1000000100000) != 0)
    sub_223B26C48((uint64_t)v613, 3, 4, 0, (uint64_t)&v857, (uint64_t)v618, COERCE_DOUBLE(0xA5000000A4), dbl_2246640F8[0], v102, v103, v104, v105);
  v616[2] = v573;
  v616[3] = v574;
  v616[4] = v575;
  v617 = v576;
  v616[0] = v571;
  v616[1] = v572;
  v858 = 0;
  v625[0] = xmmword_224664108;
  v625[1] = *(_OWORD *)dbl_224664118;
  if ((v7 & 0x3000000300000) != 0)
    sub_223B26C48((uint64_t)v616, 3, 4, 1, (uint64_t)&v858, (uint64_t)v625, COERCE_DOUBLE(0xAC000000A5), dbl_224664118[0], v102, v103, v104, v105);
  v621 = v589;
  v622 = v590;
  v623 = v591;
  v624 = v592;
  v619 = v587;
  v620 = v588;
  v859 = 0;
  v628[0] = xmmword_224664128;
  v628[1] = *(_OWORD *)dbl_224664138;
  if ((v7 & 0x5000000500000) != 0)
    sub_223B26C48((uint64_t)&v619, 3, 5, 0, (uint64_t)&v859, (uint64_t)v628, COERCE_DOUBLE(0xA7000000A6), dbl_224664138[0], v102, v103, v104, v105);
  v626[2] = v589;
  v626[3] = v590;
  v626[4] = v591;
  v627 = v592;
  v626[0] = v587;
  v626[1] = v588;
  v860 = 0;
  v631[0] = xmmword_224664148;
  v631[1] = *(_OWORD *)dbl_224664158;
  if ((v7 & 0xF000000F00000) != 0)
    sub_223B26C48((uint64_t)v626, 3, 5, 1, (uint64_t)&v860, (uint64_t)v631, COERCE_DOUBLE(0xAE000000A7), dbl_224664158[0], v102, v103, v104, v105);
  v629[2] = v589;
  v629[3] = v590;
  v629[4] = v591;
  v630 = v592;
  v629[0] = v587;
  v629[1] = v588;
  v861 = 0;
  v634[0] = xmmword_224664168;
  v634[1] = *(_OWORD *)dbl_224664178;
  if ((v7 & 0x200000) != 0)
    sub_223B26C48((uint64_t)v629, 2, 4, 2, (uint64_t)&v861, (uint64_t)v634, COERCE_DOUBLE(0xA9000000A8), dbl_224664178[0], v102, v103, v104, v105);
  v632[2] = v589;
  v632[3] = v590;
  v632[4] = v591;
  v633 = v592;
  v632[0] = v587;
  v632[1] = v588;
  v862 = 0;
  v641[0] = xmmword_224664188;
  v641[1] = *(_OWORD *)dbl_224664198;
  if ((v7 & 0x10200000) != 0)
    sub_223B26C48((uint64_t)v632, 2, 4, 3, (uint64_t)&v862, (uint64_t)v641, COERCE_DOUBLE(0xE0000000A9), dbl_224664198[0], v102, v103, v104, v105);
  v637 = v605;
  v638 = v606;
  v639 = v607;
  v640 = v608;
  v635 = v603;
  v636 = v604;
  v863 = 0;
  v644[0] = xmmword_2246641A8;
  v644[1] = *(_OWORD *)dbl_2246641B8;
  if ((v7 & 0xA00000) != 0)
    sub_223B26C48((uint64_t)&v635, 2, 5, 2, (uint64_t)&v863, (uint64_t)v644, COERCE_DOUBLE(0xAB000000AALL), dbl_2246641B8[0], v102, v103, v104, v105);
  v642[2] = v605;
  v642[3] = v606;
  v642[4] = v607;
  v643 = v608;
  v642[0] = v603;
  v642[1] = v604;
  v864 = 0;
  v647[0] = xmmword_2246641C8;
  v647[1] = *(_OWORD *)dbl_2246641D8;
  if ((v7 & 0x50A00000) != 0)
    sub_223B26C48((uint64_t)v642, 2, 5, 3, (uint64_t)&v864, (uint64_t)v647, COERCE_DOUBLE(0xE2000000ABLL), dbl_2246641D8[0], v102, v103, v104, v105);
  v645[2] = v605;
  v645[3] = v606;
  v645[4] = v607;
  v646 = v608;
  v645[0] = v603;
  v645[1] = v604;
  v865 = 0;
  v650[0] = xmmword_2246641E8;
  v650[1] = *(_OWORD *)dbl_2246641F8;
  if ((v7 & 0x2000000200000) != 0)
    sub_223B26C48((uint64_t)v645, 3, 4, 2, (uint64_t)&v865, (uint64_t)v650, COERCE_DOUBLE(0xAD000000ACLL), dbl_2246641F8[0], v102, v103, v104, v105);
  v648[2] = v605;
  v648[3] = v606;
  v648[4] = v607;
  v649 = v608;
  v648[0] = v603;
  v648[1] = v604;
  v866 = 0;
  v657[0] = xmmword_224664208;
  v657[1] = *(_OWORD *)dbl_224664218;
  if ((v7 & 0x102000010200000) != 0)
    sub_223B26C48((uint64_t)v648, 3, 4, 3, (uint64_t)&v866, (uint64_t)v657, COERCE_DOUBLE(0xE4000000ADLL), dbl_224664218[0], v102, v103, v104, v105);
  v653 = v621;
  v654 = v622;
  v655 = v623;
  v656 = v624;
  v651 = v619;
  v652 = v620;
  v867 = 0;
  v660[0] = xmmword_224664228;
  v660[1] = *(_OWORD *)dbl_224664238;
  if ((v7 & 0xA000000A00000) != 0)
    sub_223B26C48((uint64_t)&v651, 3, 5, 2, (uint64_t)&v867, (uint64_t)v660, COERCE_DOUBLE(0xAF000000AELL), dbl_224664238[0], v102, v103, v104, v105);
  v658[2] = v621;
  v658[3] = v622;
  v658[4] = v623;
  v659 = v624;
  v658[0] = v619;
  v658[1] = v620;
  v868 = 0;
  v663[0] = xmmword_224664248;
  v663[1] = *(_OWORD *)dbl_224664258;
  if ((v7 & 0x50A000050A00000) != 0)
    sub_223B26C48((uint64_t)v658, 3, 5, 3, (uint64_t)&v868, (uint64_t)v663, COERCE_DOUBLE(0xE6000000AFLL), dbl_224664258[0], v102, v103, v104, v105);
  v661[2] = v621;
  v661[3] = v622;
  v661[4] = v623;
  v662 = v624;
  v661[0] = v619;
  v661[1] = v620;
  v869 = 0;
  v666[0] = xmmword_224664268;
  v666[1] = *(_OWORD *)dbl_224664278;
  if ((v7 & 0x400000) != 0)
    sub_223B26C48((uint64_t)v661, 2, 6, 0, (uint64_t)&v869, (uint64_t)v666, COERCE_DOUBLE(0xB1000000B0), dbl_224664278[0], v102, v103, v104, v105);
  v664[2] = v621;
  v664[3] = v622;
  v664[4] = v623;
  v665 = v624;
  v664[0] = v619;
  v664[1] = v620;
  v870 = 0;
  v673[0] = xmmword_224664288;
  v673[1] = *(_OWORD *)dbl_224664298;
  if ((v7 & 0xC00000) != 0)
    sub_223B26C48((uint64_t)v664, 2, 6, 1, (uint64_t)&v870, (uint64_t)v673, COERCE_DOUBLE(0xB8000000B1), dbl_224664298[0], v102, v103, v104, v105);
  v669 = v637;
  v670 = v638;
  v671 = v639;
  v672 = v640;
  v667 = v635;
  v668 = v636;
  v871 = 0x202000002020000;
  v676[0] = xmmword_2246642A8;
  v676[1] = *(_OWORD *)dbl_2246642B8;
  sub_223B26C48((uint64_t)&v667, 2, 7, 0, (uint64_t)&v871, (uint64_t)v676, COERCE_DOUBLE(0xB3000000B2), dbl_2246642B8[0], v102, v103, v104, v105);
  v674[2] = v637;
  v674[3] = v638;
  v674[4] = v639;
  v675 = v640;
  v674[0] = v635;
  v674[1] = v636;
  v872 = 0x202000002020000;
  v679[0] = xmmword_2246642C8;
  v679[1] = *(_OWORD *)dbl_2246642D8;
  sub_223B26C48((uint64_t)v674, 2, 7, 1, (uint64_t)&v872, (uint64_t)v679, COERCE_DOUBLE(0xBA000000B3), dbl_2246642D8[0], v106, v107, v108, v109);
  v677[2] = v637;
  v677[3] = v638;
  v677[4] = v639;
  v678 = v640;
  v677[0] = v635;
  v677[1] = v636;
  v873 = 0;
  v682[0] = xmmword_2246642E8;
  v682[1] = *(_OWORD *)dbl_2246642F8;
  if ((v7 & 0x4000000400000) != 0)
    sub_223B26C48((uint64_t)v677, 3, 6, 0, (uint64_t)&v873, (uint64_t)v682, COERCE_DOUBLE(0xB5000000B4), dbl_2246642F8[0], v110, v111, v112, v113);
  v680[2] = v637;
  v680[3] = v638;
  v680[4] = v639;
  v681 = v640;
  v680[0] = v635;
  v680[1] = v636;
  v874 = 0;
  v689[0] = xmmword_224664308;
  v689[1] = *(_OWORD *)dbl_224664318;
  if ((v7 & 0xC000000C00000) != 0)
    sub_223B26C48((uint64_t)v680, 3, 6, 1, (uint64_t)&v874, (uint64_t)v689, COERCE_DOUBLE(0xBC000000B5), dbl_224664318[0], v110, v111, v112, v113);
  v685 = v653;
  v686 = v654;
  v687 = v655;
  v688 = v656;
  v683 = v651;
  v684 = v652;
  v875 = 0x202000002020000;
  v692[0] = xmmword_224664328;
  v692[1] = *(_OWORD *)dbl_224664338;
  sub_223B26C48((uint64_t)&v683, 3, 7, 0, (uint64_t)&v875, (uint64_t)v692, COERCE_DOUBLE(0xB7000000B6), dbl_224664338[0], v110, v111, v112, v113);
  v690[2] = v653;
  v690[3] = v654;
  v690[4] = v655;
  v691 = v656;
  v690[0] = v651;
  v690[1] = v652;
  v876 = 0x202000002020000;
  v695[0] = xmmword_224664348;
  v695[1] = *(_OWORD *)dbl_224664358;
  sub_223B26C48((uint64_t)v690, 3, 7, 1, (uint64_t)&v876, (uint64_t)v695, COERCE_DOUBLE(0xBE000000B7), dbl_224664358[0], v114, v115, v116, v117);
  v693[2] = v653;
  v693[3] = v654;
  v693[4] = v655;
  v694 = v656;
  v693[0] = v651;
  v693[1] = v652;
  v877 = 0;
  v698[0] = xmmword_224664368;
  v698[1] = *(_OWORD *)dbl_224664378;
  if ((v7 & 0x800000) != 0)
    sub_223B26C48((uint64_t)v693, 2, 6, 2, (uint64_t)&v877, (uint64_t)v698, COERCE_DOUBLE(0xB9000000B8), dbl_224664378[0], v118, v119, v120, v121);
  v696[2] = v653;
  v696[3] = v654;
  v696[4] = v655;
  v697 = v656;
  v696[0] = v651;
  v696[1] = v652;
  v878 = 0;
  v705[0] = xmmword_224664388;
  v705[1] = *(_OWORD *)dbl_224664398;
  if ((v7 & 0x40800000) != 0)
    sub_223B26C48((uint64_t)v696, 2, 6, 3, (uint64_t)&v878, (uint64_t)v705, COERCE_DOUBLE(0xF0000000B9), dbl_224664398[0], v118, v119, v120, v121);
  v701 = v669;
  v702 = v670;
  v703 = v671;
  v704 = v672;
  v699 = v667;
  v700 = v668;
  v879 = 0x202000002020000;
  v708[0] = xmmword_2246643A8;
  v708[1] = *(_OWORD *)dbl_2246643B8;
  sub_223B26C48((uint64_t)&v699, 2, 7, 2, (uint64_t)&v879, (uint64_t)v708, COERCE_DOUBLE(0xBB000000BALL), dbl_2246643B8[0], v118, v119, v120, v121);
  v706[2] = v669;
  v706[3] = v670;
  v706[4] = v671;
  v707 = v672;
  v706[0] = v667;
  v706[1] = v668;
  v880 = 0x202000002020000;
  v711[0] = xmmword_2246643C8;
  v711[1] = *(_OWORD *)dbl_2246643D8;
  sub_223B26C48((uint64_t)v706, 2, 7, 3, (uint64_t)&v880, (uint64_t)v711, COERCE_DOUBLE(0xF2000000BBLL), dbl_2246643D8[0], v122, v123, v124, v125);
  v709[2] = v669;
  v709[3] = v670;
  v709[4] = v671;
  v710 = v672;
  v709[0] = v667;
  v709[1] = v668;
  v881 = 0;
  v714[0] = xmmword_2246643E8;
  v714[1] = *(_OWORD *)dbl_2246643F8;
  if ((v7 & 0x8000000800000) != 0)
    sub_223B26C48((uint64_t)v709, 3, 6, 2, (uint64_t)&v881, (uint64_t)v714, COERCE_DOUBLE(0xBD000000BCLL), dbl_2246643F8[0], v126, v127, v128, v129);
  v712[2] = v669;
  v712[3] = v670;
  v712[4] = v671;
  v713 = v672;
  v712[0] = v667;
  v712[1] = v668;
  v882 = 0;
  v717[0] = xmmword_224664408;
  v717[1] = *(_OWORD *)dbl_224664418;
  if ((v7 & 0x408000040800000) != 0)
    sub_223B26C48((uint64_t)v712, 3, 6, 3, (uint64_t)&v882, (uint64_t)v717, COERCE_DOUBLE(0xF4000000BDLL), dbl_224664418[0], v126, v127, v128, v129);
  v715[2] = v685;
  v715[3] = v686;
  v715[4] = v687;
  v716 = v688;
  v715[0] = v683;
  v715[1] = v684;
  v883 = 0x202000002020000;
  v720[0] = xmmword_224664428;
  v720[1] = *(_OWORD *)dbl_224664438;
  sub_223B26C48((uint64_t)v715, 3, 7, 2, (uint64_t)&v883, (uint64_t)v720, COERCE_DOUBLE(0xBF000000BELL), dbl_224664438[0], v126, v127, v128, v129);
  v718[2] = v685;
  v718[3] = v686;
  v718[4] = v687;
  v719 = v688;
  v718[0] = v683;
  v718[1] = v684;
  v884 = 0x202000002020000;
  v723[0] = xmmword_224664448;
  v723[1] = *(_OWORD *)dbl_224664458;
  sub_223B26C48((uint64_t)v718, 3, 7, 3, (uint64_t)&v884, (uint64_t)v723, COERCE_DOUBLE(0xF6000000BFLL), dbl_224664458[0], v130, v131, v132, v133);
  v721[2] = v685;
  v721[3] = v686;
  v721[4] = v687;
  v722 = v688;
  v721[0] = v683;
  v721[1] = v684;
  v885 = 0;
  v726[0] = xmmword_224664468;
  v726[1] = *(_OWORD *)dbl_224664478;
  if ((v7 & 0x1000000) != 0)
    sub_223B26C48((uint64_t)v721, 0, 4, 4, (uint64_t)&v885, (uint64_t)v726, COERCE_DOUBLE(0xC1000000C0), dbl_224664478[0], v134, v135, v136, v137);
  v724[2] = v685;
  v724[3] = v686;
  v724[4] = v687;
  v725 = v688;
  v724[0] = v683;
  v724[1] = v684;
  v886 = 0;
  v729[0] = xmmword_224664488;
  v729[1] = *(_OWORD *)dbl_224664498;
  if ((v7 & 0x3000000) != 0)
    sub_223B26C48((uint64_t)v724, 0, 4, 5, (uint64_t)&v886, (uint64_t)v729, COERCE_DOUBLE(0xC8000000C1), dbl_224664498[0], v134, v135, v136, v137);
  v727[2] = v701;
  v727[3] = v702;
  v727[4] = v703;
  v728 = v704;
  v727[0] = v699;
  v727[1] = v700;
  v887 = 0;
  v732[0] = xmmword_2246644A8;
  v732[1] = *(_OWORD *)dbl_2246644B8;
  if ((v7 & 0x5000000) != 0)
    sub_223B26C48((uint64_t)v727, 0, 5, 4, (uint64_t)&v887, (uint64_t)v732, COERCE_DOUBLE(0xC3000000C2), dbl_2246644B8[0], v134, v135, v136, v137);
  v730[2] = v701;
  v730[3] = v702;
  v730[4] = v703;
  v731 = v704;
  v730[0] = v699;
  v730[1] = v700;
  v888 = 0;
  v735[0] = xmmword_2246644C8;
  v735[1] = *(_OWORD *)dbl_2246644D8;
  if ((v7 & 0xF000000) != 0)
    sub_223B26C48((uint64_t)v730, 0, 5, 5, (uint64_t)&v888, (uint64_t)v735, COERCE_DOUBLE(0xCA000000C3), dbl_2246644D8[0], v134, v135, v136, v137);
  v733[2] = v701;
  v733[3] = v702;
  v733[4] = v703;
  v734 = v704;
  v733[0] = v699;
  v733[1] = v700;
  v889[0] = 0;
  v737[0] = xmmword_2246644E8;
  v737[1] = *(_OWORD *)dbl_2246644F8;
  if ((v7 & 0x11000000) != 0)
    sub_223B26C48((uint64_t)v733, 1, 4, 4, (uint64_t)v889, (uint64_t)v737, COERCE_DOUBLE(0xC5000000C4), dbl_2246644F8[0], v134, v135, v136, v137);
  v735[4] = v701;
  v735[5] = v702;
  v735[6] = v703;
  v736 = v704;
  v735[2] = v699;
  v735[3] = v700;
  return sub_223B2E4AC();
}

uint64_t sub_223B2E4AC()
{
  uint64_t v0;
  uint64_t v1;
  float32x4_t v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  float32x4_t v10;
  double v11;
  double v12;
  double v13;
  float32x4_t v14;
  double v15;
  double v16;
  double v17;
  float32x4_t v18;
  double v19;
  double v20;
  double v21;
  float32x4_t v22;
  double v23;
  double v24;
  double v25;
  float32x4_t v26;
  double v27;
  double v28;
  double v29;
  float32x4_t v30;
  double v31;
  double v32;
  double v33;
  float32x4_t v34;
  double v35;
  double v36;
  double v37;
  float32x4_t v38;
  double v39;
  double v40;
  double v41;
  float32x4_t v42;
  double v43;
  double v44;
  double v45;
  float32x4_t v46;
  double v47;
  double v48;
  double v49;
  float32x4_t v50;
  double v51;
  double v52;
  double v53;
  float32x4_t v54;
  double v55;
  double v56;
  double v57;
  float32x4_t v58;
  double v59;
  double v60;
  double v61;
  float32x4_t v62;
  double v63;
  double v64;
  double v65;
  float32x4_t v66;
  double v67;
  double v68;
  double v69;
  float32x4_t v70;
  double v71;
  double v72;
  double v73;
  float32x4_t v74;
  double v75;
  double v76;
  double v77;
  float32x4_t v78;
  double v79;
  double v80;
  double v81;
  float32x4_t v82;
  double v83;
  double v84;
  double v85;
  float32x4_t v86;
  double v87;
  double v88;
  double v89;
  float32x4_t v90;
  double v91;
  double v92;
  double v93;
  float32x4_t v94;
  double v95;
  double v96;
  double v97;
  float32x4_t v98;
  double v99;
  double v100;
  double v101;
  float32x4_t v102;
  double v103;
  double v104;
  double v105;
  float32x4_t v106;
  double v107;
  double v108;
  double v109;
  float32x4_t v110;
  double v111;
  double v112;
  double v113;
  float32x4_t v114;
  double v115;
  double v116;
  double v117;
  float32x4_t v118;
  double v119;
  double v120;
  double v121;
  float32x4_t v122;
  double v123;
  double v124;
  double v125;
  float32x4_t v126;
  double v127;
  double v128;
  double v129;
  float32x4_t v130;
  double v131;
  double v132;
  double v133;
  float32x4_t v134;
  double v135;
  double v136;
  double v137;
  float32x4_t v138;
  double v139;
  double v140;
  double v141;
  float32x4_t v142;
  double v143;
  double v144;
  double v145;
  float32x4_t v146;
  double v147;
  double v148;
  double v149;
  float32x4_t v150;
  double v151;
  double v152;
  double v153;
  float32x4_t v154;
  double v155;
  double v156;
  double v157;
  float32x4_t v158;
  double v159;
  double v160;
  double v161;
  float32x4_t v162;
  double v163;
  double v164;
  double v165;
  float32x4_t v166;
  double v167;
  double v168;
  double v169;
  float32x4_t v170;
  double v171;
  double v172;
  double v173;
  float32x4_t v174;
  double v175;
  double v176;
  double v177;
  float32x4_t v178;
  double v179;
  double v180;
  double v181;
  float32x4_t v182;
  double v183;
  double v184;
  double v185;
  float32x4_t v186;
  double v187;
  double v188;
  double v189;
  float32x4_t v190;
  double v191;
  double v192;
  double v193;
  float32x4_t v194;
  double v195;
  double v196;
  double v197;
  float32x4_t v198;
  double v199;
  double v200;
  double v201;
  float32x4_t v202;
  double v203;
  double v204;
  double v205;
  float32x4_t v206;
  double v207;
  double v208;
  double v209;
  float32x4_t v210;
  double v211;
  double v212;
  double v213;
  float32x4_t v214;
  double v215;
  double v216;
  double v217;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  _OWORD v225[2];
  _OWORD v226[5];
  uint64_t v227;
  _OWORD v228[2];
  _OWORD v229[5];
  uint64_t v230;
  _OWORD v231[2];
  _OWORD v232[5];
  uint64_t v233;
  _OWORD v234[2];
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  uint64_t v240;
  _OWORD v241[2];
  _OWORD v242[5];
  uint64_t v243;
  _OWORD v244[2];
  _OWORD v245[5];
  uint64_t v246;
  _OWORD v247[2];
  _OWORD v248[5];
  uint64_t v249;
  _OWORD v250[2];
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  uint64_t v256;
  _OWORD v257[2];
  _OWORD v258[5];
  uint64_t v259;
  _OWORD v260[2];
  _OWORD v261[5];
  uint64_t v262;
  _OWORD v263[2];
  _OWORD v264[5];
  uint64_t v265;
  _OWORD v266[2];
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  uint64_t v272;
  _OWORD v273[2];
  _OWORD v274[5];
  uint64_t v275;
  _OWORD v276[2];
  _OWORD v277[5];
  uint64_t v278;
  _OWORD v279[2];
  _OWORD v280[5];
  uint64_t v281;
  _OWORD v282[2];
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  uint64_t v288;
  _OWORD v289[2];
  _OWORD v290[5];
  uint64_t v291;
  _OWORD v292[2];
  _OWORD v293[5];
  uint64_t v294;
  _OWORD v295[2];
  _OWORD v296[5];
  uint64_t v297;
  _OWORD v298[2];
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  uint64_t v304;
  _OWORD v305[2];
  _OWORD v306[5];
  uint64_t v307;
  _OWORD v308[2];
  _OWORD v309[5];
  uint64_t v310;
  _OWORD v311[2];
  _OWORD v312[5];
  uint64_t v313;
  _OWORD v314[2];
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  uint64_t v320;
  _OWORD v321[2];
  _OWORD v322[5];
  uint64_t v323;
  _OWORD v324[2];
  _OWORD v325[5];
  uint64_t v326;
  _OWORD v327[2];
  _OWORD v328[5];
  uint64_t v329;
  _OWORD v330[2];
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  uint64_t v336;
  _OWORD v337[2];
  _OWORD v338[5];
  uint64_t v339;
  _OWORD v340[2];
  _OWORD v341[5];
  uint64_t v342;
  _OWORD v343[2];
  _OWORD v344[5];
  uint64_t v345;
  _OWORD v346[2];
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  uint64_t v352;
  _OWORD v353[2];
  _OWORD v354[5];
  uint64_t v355;
  _OWORD v356[2];
  _OWORD v357[5];
  uint64_t v358;
  _OWORD v359[2];
  _OWORD v360[5];
  uint64_t v361;
  _OWORD v362[2];
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  uint64_t v368;
  _OWORD v369[2];
  _OWORD v370[5];
  uint64_t v371;
  _OWORD v372[2];
  _OWORD v373[5];
  uint64_t v374;
  _OWORD v375[2];
  _OWORD v376[5];
  uint64_t v377;
  _OWORD v378[2];
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  uint64_t v384;
  _OWORD v385[2];
  _OWORD v386[5];
  uint64_t v387;
  _OWORD v388[2];
  _OWORD v389[5];
  uint64_t v390;
  _OWORD v391[2];
  _OWORD v392[5];
  uint64_t v393;
  _OWORD v394[2];
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  uint64_t v400;
  _OWORD v401[2];
  _OWORD v402[5];
  uint64_t v403;
  _OWORD v404[2];
  _OWORD v405[5];
  uint64_t v406;
  _OWORD v407[2];
  _OWORD v408[5];
  uint64_t v409;
  _OWORD v410[2];
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  uint64_t v416;
  _OWORD v417[2];
  _OWORD v418[5];
  uint64_t v419;
  _OWORD v420[2];
  _OWORD v421[5];
  uint64_t v422;
  _OWORD v423[2];
  _OWORD v424[5];
  uint64_t v425;
  _OWORD v426[2];
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  uint64_t v432;
  _OWORD v433[2];
  _OWORD v434[5];
  uint64_t v435;
  _OWORD v436[2];
  _OWORD v437[5];
  uint64_t v438;
  _OWORD v439[2];
  _OWORD v440[5];
  uint64_t v441;
  _OWORD v442[2];
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  uint64_t v448;
  _OWORD v449[2];
  _OWORD v450[5];
  uint64_t v451;
  _OWORD v452[2];
  _OWORD v453[5];
  uint64_t v454;
  _OWORD v455[2];
  _OWORD v456[5];
  uint64_t v457;
  _OWORD v458[2];
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  uint64_t v464;
  _OWORD v465[2];
  _OWORD v466[5];
  uint64_t v467;
  _OWORD v468[2];
  _OWORD v469[5];
  uint64_t v470;
  _OWORD v471[2];
  _OWORD v472[5];
  uint64_t v473;
  _OWORD v474[2];
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  uint64_t v480;
  _OWORD v481[2];
  _OWORD v482[5];
  uint64_t v483;
  _OWORD v484[2];
  _OWORD v485[5];
  uint64_t v486;
  _OWORD v487[2];
  _OWORD v488[5];
  uint64_t v489;
  _OWORD v490[2];
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  uint64_t v496;
  _OWORD v497[2];
  _OWORD v498[5];
  uint64_t v499;
  _OWORD v500[2];
  _OWORD v501[5];
  uint64_t v502;
  _OWORD v503[2];
  _OWORD v504[5];
  uint64_t v505;
  _OWORD v506[2];
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  uint64_t v512;
  _OWORD v513[2];
  _OWORD v514[5];
  uint64_t v515;
  _OWORD v516[2];
  _OWORD v517[5];
  uint64_t v518;
  _OWORD v519[2];
  _OWORD v520[5];
  uint64_t v521;
  _OWORD v522[2];
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  uint64_t v528;
  _OWORD v529[2];
  _OWORD v530[5];
  uint64_t v531;
  _OWORD v532[2];
  _OWORD v533[5];
  uint64_t v534;
  _OWORD v535[2];
  _OWORD v536[5];
  uint64_t v537;
  _OWORD v538[2];
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  uint64_t v544;
  _OWORD v545[2];
  _OWORD v546[5];
  uint64_t v547;
  _OWORD v548[2];
  _OWORD v549[5];
  uint64_t v550;
  _OWORD v551[2];
  _OWORD v552[5];
  uint64_t v553;
  _OWORD v554[2];
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  uint64_t v560;
  _OWORD v561[2];
  _OWORD v562[5];
  uint64_t v563;
  _OWORD v564[2];
  _OWORD v565[5];
  uint64_t v566;
  _OWORD v567[2];
  _OWORD v568[5];
  uint64_t v569;
  _OWORD v570[2];
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  uint64_t v576;
  _OWORD v577[2];
  _OWORD v578[5];
  uint64_t v579;
  _OWORD v580[2];
  _OWORD v581[5];
  uint64_t v582;
  _OWORD v583[2];
  _OWORD v584[5];
  uint64_t v585;
  _OWORD v586[2];
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  uint64_t v592;
  _OWORD v593[2];
  _OWORD v594[5];
  uint64_t v595;
  _OWORD v596[2];
  _OWORD v597[5];
  uint64_t v598;
  _OWORD v599[2];
  _OWORD v600[5];
  uint64_t v601;
  _OWORD v602[2];
  __int128 v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  uint64_t v608;
  _OWORD v609[2];
  _OWORD v610[5];
  uint64_t v611;
  _OWORD v612[2];
  _OWORD v613[5];
  uint64_t v614;
  _OWORD v615[2];
  _OWORD v616[5];
  uint64_t v617;
  _OWORD v618[2];
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  uint64_t v624;
  _OWORD v625[2];
  _OWORD v626[5];
  uint64_t v627;
  _OWORD v628[2];
  _OWORD v629[5];
  uint64_t v630;
  _OWORD v631[2];
  _OWORD v632[5];
  uint64_t v633;
  _OWORD v634[2];
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  uint64_t v640;
  _OWORD v641[2];
  _OWORD v642[5];
  uint64_t v643;
  _OWORD v644[2];
  _OWORD v645[5];
  uint64_t v646;
  _OWORD v647[2];
  _OWORD v648[5];
  uint64_t v649;
  _OWORD v650[2];
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  uint64_t v656;
  _OWORD v657[2];
  _OWORD v658[5];
  uint64_t v659;
  _OWORD v660[2];
  _OWORD v661[5];
  uint64_t v662;
  _OWORD v663[2];
  _OWORD v664[5];
  uint64_t v665;
  _OWORD v666[2];
  __int128 v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  uint64_t v672;
  _OWORD v673[2];
  _OWORD v674[5];
  uint64_t v675;
  _OWORD v676[2];
  _OWORD v677[5];
  uint64_t v678;
  _OWORD v679[2];
  _OWORD v680[5];
  uint64_t v681;
  _OWORD v682[2];
  __int128 v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  uint64_t v688;
  _OWORD v689[2];
  _OWORD v690[5];
  uint64_t v691;
  _OWORD v692[2];
  _OWORD v693[5];
  uint64_t v694;
  _OWORD v695[2];
  _OWORD v696[5];
  uint64_t v697;
  _OWORD v698[2];
  __int128 v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  __int128 v703;
  uint64_t v704;
  _OWORD v705[2];
  _OWORD v706[5];
  uint64_t v707;
  _OWORD v708[2];
  _OWORD v709[5];
  uint64_t v710;
  _OWORD v711[2];
  _OWORD v712[5];
  uint64_t v713;
  _OWORD v714[2];
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  uint64_t v720;
  _OWORD v721[2];
  _OWORD v722[5];
  uint64_t v723;
  _OWORD v724[2];
  _OWORD v725[5];
  uint64_t v726;
  _OWORD v727[2];
  _OWORD v728[5];
  uint64_t v729;
  _OWORD v730[2];
  __int128 v731;
  __int128 v732;
  __int128 v733;
  __int128 v734;
  __int128 v735;
  uint64_t v736;
  _OWORD v737[2];
  _OWORD v738[5];
  uint64_t v739;
  _OWORD v740[2];
  _OWORD v741[5];
  uint64_t v742;
  _OWORD v743[2];
  _OWORD v744[5];
  uint64_t v745;
  _OWORD v746[2];
  __int128 v747;
  __int128 v748;
  __int128 v749;
  __int128 v750;
  __int128 v751;
  uint64_t v752;
  _OWORD v753[2];
  _OWORD v754[5];
  uint64_t v755;
  _OWORD v756[2];
  _OWORD v757[5];
  uint64_t v758;
  _OWORD v759[2];
  _OWORD v760[5];
  uint64_t v761;
  _OWORD v762[2];
  __int128 v763;
  __int128 v764;
  __int128 v765;
  __int128 v766;
  __int128 v767;
  uint64_t v768;
  _OWORD v769[2];
  _OWORD v770[5];
  uint64_t v771;
  _OWORD v772[2];
  _OWORD v773[5];
  uint64_t v774;
  _OWORD v775[2];
  _OWORD v776[5];
  uint64_t v777;
  _OWORD v778[2];
  __int128 v779;
  __int128 v780;
  __int128 v781;
  __int128 v782;
  __int128 v783;
  uint64_t v784;
  _OWORD v785[2];
  _OWORD v786[5];
  uint64_t v787;
  _OWORD v788[2];
  _OWORD v789[5];
  uint64_t v790;
  _OWORD v791[2];
  _OWORD v792[5];
  uint64_t v793;
  _OWORD v794[2];
  __int128 v795;
  __int128 v796;
  __int128 v797;
  __int128 v798;
  __int128 v799;
  uint64_t v800;
  _OWORD v801[2];
  _OWORD v802[5];
  uint64_t v803;
  _OWORD v804[2];
  _OWORD v805[5];
  uint64_t v806;
  _OWORD v807[2];
  _OWORD v808[5];
  uint64_t v809;
  _OWORD v810[2];
  __int128 v811;
  __int128 v812;
  __int128 v813;
  __int128 v814;
  __int128 v815;
  uint64_t v816;
  _OWORD v817[2];
  _OWORD v818[5];
  uint64_t v819;
  _OWORD v820[2];
  _OWORD v821[5];
  uint64_t v822;
  _OWORD v823[2];
  _OWORD v824[5];
  uint64_t v825;
  _OWORD v826[2];
  _OWORD v827[5];
  uint64_t v828;
  _OWORD v829[2];
  _OWORD v830[5];
  uint64_t v831;
  _OWORD v832[2];
  _OWORD v833[5];
  uint64_t v834;
  _OWORD v835[7];
  uint64_t v836;
  _OWORD v837[2];
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  _QWORD v993[2];

  v0 = MEMORY[0x24BDAC7A8]();
  v6 = v1;
  v7 = v0;
  v993[1] = *MEMORY[0x24BDAC8D0];
  v838 = 0;
  v225[0] = xmmword_224664508;
  v225[1] = *(_OWORD *)dbl_224664518;
  if ((v0 & 0x33000000) != 0)
    sub_223B26C48(v1, 1, 4, 5, (uint64_t)&v838, (uint64_t)v225, COERCE_DOUBLE(0xCC000000C5), dbl_224664518[0], v2, v3, v4, v5);
  v8 = *(_OWORD *)(v6 + 48);
  v221 = *(_OWORD *)(v6 + 32);
  v222 = v8;
  v223 = *(_OWORD *)(v6 + 64);
  v224 = *(_QWORD *)(v6 + 80);
  v9 = *(_OWORD *)(v6 + 16);
  v219 = *(_OWORD *)v6;
  v220 = v9;
  v839 = 0;
  v228[0] = xmmword_224664528;
  v228[1] = *(_OWORD *)dbl_224664538;
  if ((v7 & 0x55000000) != 0)
    sub_223B26C48((uint64_t)&v219, 1, 5, 4, (uint64_t)&v839, (uint64_t)v228, COERCE_DOUBLE(0xC7000000C6), dbl_224664538[0], v2, v3, v4, v5);
  v226[2] = v221;
  v226[3] = v222;
  v226[4] = v223;
  v227 = v224;
  v226[0] = v219;
  v226[1] = v220;
  v840 = 0;
  v231[0] = xmmword_224664548;
  v231[1] = *(_OWORD *)dbl_224664558;
  if ((v7 & 0xFF000000) != 0)
    sub_223B26C48((uint64_t)v226, 1, 5, 5, (uint64_t)&v840, (uint64_t)v231, COERCE_DOUBLE(0xCE000000C7), dbl_224664558[0], v2, v3, v4, v5);
  v229[2] = v221;
  v229[3] = v222;
  v229[4] = v223;
  v230 = v224;
  v229[0] = v219;
  v229[1] = v220;
  v841 = 0;
  v234[0] = xmmword_224664568;
  v234[1] = *(_OWORD *)dbl_224664578;
  if ((v7 & 0x2000000) != 0)
    sub_223B26C48((uint64_t)v229, 0, 4, 6, (uint64_t)&v841, (uint64_t)v234, COERCE_DOUBLE(0xC9000000C8), dbl_224664578[0], v2, v3, v4, v5);
  v232[2] = v221;
  v232[3] = v222;
  v232[4] = v223;
  v233 = v224;
  v232[0] = v219;
  v232[1] = v220;
  v842 = 0x100010001000100;
  v241[0] = xmmword_224664588;
  v241[1] = *(_OWORD *)dbl_224664598;
  sub_223B26C48((uint64_t)v232, 0, 4, 7, (uint64_t)&v842, (uint64_t)v241, COERCE_DOUBLE(0x80000000C9), dbl_224664598[0], v2, v3, v4, v5);
  v237 = v221;
  v238 = v222;
  v239 = v223;
  v240 = v224;
  v235 = v219;
  v236 = v220;
  v843 = 0;
  v244[0] = xmmword_2246645A8;
  v244[1] = *(_OWORD *)dbl_2246645B8;
  if ((v7 & 0xA000000) != 0)
    sub_223B26C48((uint64_t)&v235, 0, 5, 6, (uint64_t)&v843, (uint64_t)v244, COERCE_DOUBLE(0xCB000000CALL), dbl_2246645B8[0], v10, v11, v12, v13);
  v242[2] = v221;
  v242[3] = v222;
  v242[4] = v223;
  v243 = v224;
  v242[0] = v219;
  v242[1] = v220;
  v844 = 0x100010001000100;
  v247[0] = xmmword_2246645C8;
  v247[1] = *(_OWORD *)dbl_2246645D8;
  sub_223B26C48((uint64_t)v242, 0, 5, 7, (uint64_t)&v844, (uint64_t)v247, COERCE_DOUBLE(0x82000000CBLL), dbl_2246645D8[0], v10, v11, v12, v13);
  v245[2] = v221;
  v245[3] = v222;
  v245[4] = v223;
  v246 = v224;
  v245[0] = v219;
  v245[1] = v220;
  v845 = 0;
  v250[0] = xmmword_2246645E8;
  v250[1] = *(_OWORD *)dbl_2246645F8;
  if ((v7 & 0x22000000) != 0)
    sub_223B26C48((uint64_t)v245, 1, 4, 6, (uint64_t)&v845, (uint64_t)v250, COERCE_DOUBLE(0xCD000000CCLL), dbl_2246645F8[0], v14, v15, v16, v17);
  v248[2] = v221;
  v248[3] = v222;
  v248[4] = v223;
  v249 = v224;
  v248[0] = v219;
  v248[1] = v220;
  v846 = 0x100010001000100;
  v257[0] = xmmword_224664608;
  v257[1] = *(_OWORD *)dbl_224664618;
  sub_223B26C48((uint64_t)v248, 1, 4, 7, (uint64_t)&v846, (uint64_t)v257, COERCE_DOUBLE(0x84000000CDLL), dbl_224664618[0], v14, v15, v16, v17);
  v253 = v221;
  v254 = v222;
  v255 = v223;
  v256 = v224;
  v251 = v219;
  v252 = v220;
  v847 = 0;
  v260[0] = xmmword_224664628;
  v260[1] = *(_OWORD *)dbl_224664638;
  if ((v7 & 0xAA000000) != 0)
    sub_223B26C48((uint64_t)&v251, 1, 5, 6, (uint64_t)&v847, (uint64_t)v260, COERCE_DOUBLE(0xCF000000CELL), dbl_224664638[0], v18, v19, v20, v21);
  v258[2] = v221;
  v258[3] = v222;
  v258[4] = v223;
  v259 = v224;
  v258[0] = v219;
  v258[1] = v220;
  v848 = 0x100010001000100;
  v263[0] = xmmword_224664648;
  v263[1] = *(_OWORD *)dbl_224664658;
  sub_223B26C48((uint64_t)v258, 1, 5, 7, (uint64_t)&v848, (uint64_t)v263, COERCE_DOUBLE(0x86000000CFLL), dbl_224664658[0], v18, v19, v20, v21);
  v261[2] = v221;
  v261[3] = v222;
  v261[4] = v223;
  v262 = v224;
  v261[0] = v219;
  v261[1] = v220;
  v849 = 0;
  v266[0] = xmmword_224664668;
  v266[1] = *(_OWORD *)dbl_224664678;
  if ((v7 & 0x4000000) != 0)
    sub_223B26C48((uint64_t)v261, 0, 6, 4, (uint64_t)&v849, (uint64_t)v266, COERCE_DOUBLE(0xD1000000D0), dbl_224664678[0], v22, v23, v24, v25);
  v264[2] = v237;
  v264[3] = v238;
  v264[4] = v239;
  v265 = v240;
  v264[0] = v235;
  v264[1] = v236;
  v850 = 0;
  v273[0] = xmmword_224664688;
  v273[1] = *(_OWORD *)dbl_224664698;
  if ((v7 & 0xC000000) != 0)
    sub_223B26C48((uint64_t)v264, 0, 6, 5, (uint64_t)&v850, (uint64_t)v273, COERCE_DOUBLE(0xD8000000D1), dbl_224664698[0], v22, v23, v24, v25);
  v269 = v237;
  v270 = v238;
  v271 = v239;
  v272 = v240;
  v267 = v235;
  v268 = v236;
  v851 = 0x202000002020000;
  v276[0] = xmmword_2246646A8;
  v276[1] = *(_OWORD *)dbl_2246646B8;
  sub_223B26C48((uint64_t)&v267, 0, 7, 4, (uint64_t)&v851, (uint64_t)v276, COERCE_DOUBLE(0xD3000000D2), dbl_2246646B8[0], v22, v23, v24, v25);
  v274[2] = v237;
  v274[3] = v238;
  v274[4] = v239;
  v275 = v240;
  v274[0] = v235;
  v274[1] = v236;
  v852 = 0x202000002020000;
  v279[0] = xmmword_2246646C8;
  v279[1] = *(_OWORD *)dbl_2246646D8;
  sub_223B26C48((uint64_t)v274, 0, 7, 5, (uint64_t)&v852, (uint64_t)v279, COERCE_DOUBLE(0xDA000000D3), dbl_2246646D8[0], v26, v27, v28, v29);
  v277[2] = v237;
  v277[3] = v238;
  v277[4] = v239;
  v278 = v240;
  v277[0] = v235;
  v277[1] = v236;
  v853 = 0;
  v282[0] = xmmword_2246646E8;
  v282[1] = *(_OWORD *)dbl_2246646F8;
  if ((v7 & 0x44000000) != 0)
    sub_223B26C48((uint64_t)v277, 1, 6, 4, (uint64_t)&v853, (uint64_t)v282, COERCE_DOUBLE(0xD5000000D4), dbl_2246646F8[0], v30, v31, v32, v33);
  v280[2] = v253;
  v280[3] = v254;
  v280[4] = v255;
  v281 = v256;
  v280[0] = v251;
  v280[1] = v252;
  v854 = 0;
  v289[0] = xmmword_224664708;
  v289[1] = *(_OWORD *)dbl_224664718;
  if ((v7 & 0xCC000000) != 0)
    sub_223B26C48((uint64_t)v280, 1, 6, 5, (uint64_t)&v854, (uint64_t)v289, COERCE_DOUBLE(0xDC000000D5), dbl_224664718[0], v30, v31, v32, v33);
  v285 = v253;
  v286 = v254;
  v287 = v255;
  v288 = v256;
  v283 = v251;
  v284 = v252;
  v855 = 0x202000002020000;
  v292[0] = xmmword_224664728;
  v292[1] = *(_OWORD *)dbl_224664738;
  sub_223B26C48((uint64_t)&v283, 1, 7, 4, (uint64_t)&v855, (uint64_t)v292, COERCE_DOUBLE(0xD7000000D6), dbl_224664738[0], v30, v31, v32, v33);
  v290[2] = v253;
  v290[3] = v254;
  v290[4] = v255;
  v291 = v256;
  v290[0] = v251;
  v290[1] = v252;
  v856 = 0x202000002020000;
  v295[0] = xmmword_224664748;
  v295[1] = *(_OWORD *)dbl_224664758;
  sub_223B26C48((uint64_t)v290, 1, 7, 5, (uint64_t)&v856, (uint64_t)v295, COERCE_DOUBLE(0xDE000000D7), dbl_224664758[0], v34, v35, v36, v37);
  v293[2] = v253;
  v293[3] = v254;
  v293[4] = v255;
  v294 = v256;
  v293[0] = v251;
  v293[1] = v252;
  v857 = 0;
  v298[0] = xmmword_224664768;
  v298[1] = *(_OWORD *)dbl_224664778;
  if ((v7 & 0x8000000) != 0)
    sub_223B26C48((uint64_t)v293, 0, 6, 6, (uint64_t)&v857, (uint64_t)v298, COERCE_DOUBLE(0xD9000000D8), dbl_224664778[0], v38, v39, v40, v41);
  v296[2] = v253;
  v296[3] = v254;
  v296[4] = v255;
  v297 = v256;
  v296[0] = v251;
  v296[1] = v252;
  v858 = 0x100010001000100;
  v305[0] = xmmword_224664788;
  v305[1] = *(_OWORD *)dbl_224664798;
  sub_223B26C48((uint64_t)v296, 0, 6, 7, (uint64_t)&v858, (uint64_t)v305, COERCE_DOUBLE(0x90000000D9), dbl_224664798[0], v38, v39, v40, v41);
  v301 = v269;
  v302 = v270;
  v303 = v271;
  v304 = v272;
  v299 = v267;
  v300 = v268;
  v859 = 0x202000002020000;
  v308[0] = xmmword_2246647A8;
  v308[1] = *(_OWORD *)dbl_2246647B8;
  sub_223B26C48((uint64_t)&v299, 0, 7, 6, (uint64_t)&v859, (uint64_t)v308, COERCE_DOUBLE(0xDB000000DALL), dbl_2246647B8[0], v42, v43, v44, v45);
  v306[2] = v269;
  v306[3] = v270;
  v306[4] = v271;
  v307 = v272;
  v306[0] = v267;
  v306[1] = v268;
  v860 = 0x302010003020100;
  v311[0] = xmmword_2246647C8;
  v311[1] = *(_OWORD *)dbl_2246647D8;
  sub_223B26C48((uint64_t)v306, 0, 7, 7, (uint64_t)&v860, (uint64_t)v311, COERCE_DOUBLE(0x92000000DBLL), dbl_2246647D8[0], v46, v47, v48, v49);
  v309[2] = v269;
  v309[3] = v270;
  v309[4] = v271;
  v310 = v272;
  v309[0] = v267;
  v309[1] = v268;
  v861 = 0;
  v314[0] = xmmword_2246647E8;
  v314[1] = *(_OWORD *)dbl_2246647F8;
  if ((v7 & 0x88000000) != 0)
    sub_223B26C48((uint64_t)v309, 1, 6, 6, (uint64_t)&v861, (uint64_t)v314, COERCE_DOUBLE(0xDD000000DCLL), dbl_2246647F8[0], v50, v51, v52, v53);
  v312[2] = v269;
  v312[3] = v270;
  v312[4] = v271;
  v313 = v272;
  v312[0] = v267;
  v312[1] = v268;
  v862 = 0x100010001000100;
  v321[0] = xmmword_224664808;
  v321[1] = *(_OWORD *)dbl_224664818;
  sub_223B26C48((uint64_t)v312, 1, 6, 7, (uint64_t)&v862, (uint64_t)v321, COERCE_DOUBLE(0x94000000DDLL), dbl_224664818[0], v50, v51, v52, v53);
  v317 = v285;
  v318 = v286;
  v319 = v287;
  v320 = v288;
  v315 = v283;
  v316 = v284;
  v863 = 0x202000002020000;
  v324[0] = xmmword_224664828;
  v324[1] = *(_OWORD *)dbl_224664838;
  sub_223B26C48((uint64_t)&v315, 1, 7, 6, (uint64_t)&v863, (uint64_t)v324, COERCE_DOUBLE(0xDF000000DELL), dbl_224664838[0], v54, v55, v56, v57);
  v322[2] = v285;
  v322[3] = v286;
  v322[4] = v287;
  v323 = v288;
  v322[0] = v283;
  v322[1] = v284;
  v864 = 0x302010003020100;
  v327[0] = xmmword_224664848;
  v327[1] = *(_OWORD *)dbl_224664858;
  sub_223B26C48((uint64_t)v322, 1, 7, 7, (uint64_t)&v864, (uint64_t)v327, COERCE_DOUBLE(0x96000000DFLL), dbl_224664858[0], v58, v59, v60, v61);
  v325[2] = v285;
  v325[3] = v286;
  v325[4] = v287;
  v326 = v288;
  v325[0] = v283;
  v325[1] = v284;
  v865 = 0;
  v330[0] = xmmword_224664868;
  v330[1] = *(_OWORD *)dbl_224664878;
  if ((v7 & 0x10000000) != 0)
    sub_223B26C48((uint64_t)v325, 2, 4, 4, (uint64_t)&v865, (uint64_t)v330, COERCE_DOUBLE(0xE1000000E0), dbl_224664878[0], v62, v63, v64, v65);
  v328[2] = v301;
  v328[3] = v302;
  v328[4] = v303;
  v329 = v304;
  v328[0] = v299;
  v328[1] = v300;
  v866 = 0;
  v337[0] = xmmword_224664888;
  v337[1] = *(_OWORD *)dbl_224664898;
  if ((v7 & 0x30000000) != 0)
    sub_223B26C48((uint64_t)v328, 2, 4, 5, (uint64_t)&v866, (uint64_t)v337, COERCE_DOUBLE(0xE8000000E1), dbl_224664898[0], v62, v63, v64, v65);
  v333 = v301;
  v334 = v302;
  v335 = v303;
  v336 = v304;
  v331 = v299;
  v332 = v300;
  v867 = 0;
  v340[0] = xmmword_2246648A8;
  v340[1] = *(_OWORD *)dbl_2246648B8;
  if ((v7 & 0x50000000) != 0)
    sub_223B26C48((uint64_t)&v331, 2, 5, 4, (uint64_t)&v867, (uint64_t)v340, COERCE_DOUBLE(0xE3000000E2), dbl_2246648B8[0], v62, v63, v64, v65);
  v338[2] = v301;
  v338[3] = v302;
  v338[4] = v303;
  v339 = v304;
  v338[0] = v299;
  v338[1] = v300;
  v868 = 0;
  v343[0] = xmmword_2246648C8;
  v343[1] = *(_OWORD *)dbl_2246648D8;
  if ((v7 & 0xF0000000) != 0)
    sub_223B26C48((uint64_t)v338, 2, 5, 5, (uint64_t)&v868, (uint64_t)v343, COERCE_DOUBLE(0xEA000000E3), dbl_2246648D8[0], v62, v63, v64, v65);
  v341[2] = v301;
  v341[3] = v302;
  v341[4] = v303;
  v342 = v304;
  v341[0] = v299;
  v341[1] = v300;
  v869 = 0;
  v346[0] = xmmword_2246648E8;
  v346[1] = *(_OWORD *)dbl_2246648F8;
  if ((v7 & 0x100000010000000) != 0)
    sub_223B26C48((uint64_t)v341, 3, 4, 4, (uint64_t)&v869, (uint64_t)v346, COERCE_DOUBLE(0xE5000000E4), dbl_2246648F8[0], v62, v63, v64, v65);
  v344[2] = v301;
  v344[3] = v302;
  v344[4] = v303;
  v345 = v304;
  v344[0] = v299;
  v344[1] = v300;
  v870 = 0;
  v353[0] = xmmword_224664908;
  v353[1] = *(_OWORD *)dbl_224664918;
  if ((v7 & 0x300000030000000) != 0)
    sub_223B26C48((uint64_t)v344, 3, 4, 5, (uint64_t)&v870, (uint64_t)v353, COERCE_DOUBLE(0xEC000000E5), dbl_224664918[0], v62, v63, v64, v65);
  v349 = v317;
  v350 = v318;
  v351 = v319;
  v352 = v320;
  v347 = v315;
  v348 = v316;
  v871 = 0;
  v356[0] = xmmword_224664928;
  v356[1] = *(_OWORD *)dbl_224664938;
  if ((v7 & 0x500000050000000) != 0)
    sub_223B26C48((uint64_t)&v347, 3, 5, 4, (uint64_t)&v871, (uint64_t)v356, COERCE_DOUBLE(0xE7000000E6), dbl_224664938[0], v62, v63, v64, v65);
  v354[2] = v317;
  v354[3] = v318;
  v354[4] = v319;
  v355 = v320;
  v354[0] = v315;
  v354[1] = v316;
  v872 = 0;
  v359[0] = xmmword_224664948;
  v359[1] = *(_OWORD *)dbl_224664958;
  if ((v7 & 0xF000000F0000000) != 0)
    sub_223B26C48((uint64_t)v354, 3, 5, 5, (uint64_t)&v872, (uint64_t)v359, COERCE_DOUBLE(0xEE000000E7), dbl_224664958[0], v62, v63, v64, v65);
  v357[2] = v317;
  v357[3] = v318;
  v357[4] = v319;
  v358 = v320;
  v357[0] = v315;
  v357[1] = v316;
  v873 = 0;
  v362[0] = xmmword_224664968;
  v362[1] = *(_OWORD *)dbl_224664978;
  if ((v7 & 0x20000000) != 0)
    sub_223B26C48((uint64_t)v357, 2, 4, 6, (uint64_t)&v873, (uint64_t)v362, COERCE_DOUBLE(0xE9000000E8), dbl_224664978[0], v62, v63, v64, v65);
  v360[2] = v317;
  v360[3] = v318;
  v360[4] = v319;
  v361 = v320;
  v360[0] = v315;
  v360[1] = v316;
  v874 = 0x100010001000100;
  v369[0] = xmmword_224664988;
  v369[1] = *(_OWORD *)dbl_224664998;
  sub_223B26C48((uint64_t)v360, 2, 4, 7, (uint64_t)&v874, (uint64_t)v369, COERCE_DOUBLE(0xA0000000E9), dbl_224664998[0], v62, v63, v64, v65);
  v365 = v317;
  v366 = v318;
  v367 = v319;
  v368 = v320;
  v363 = v315;
  v364 = v316;
  v875 = 0;
  v372[0] = xmmword_2246649A8;
  v372[1] = *(_OWORD *)dbl_2246649B8;
  if ((v7 & 0xA0000000) != 0)
    sub_223B26C48((uint64_t)&v363, 2, 5, 6, (uint64_t)&v875, (uint64_t)v372, COERCE_DOUBLE(0xEB000000EALL), dbl_2246649B8[0], v66, v67, v68, v69);
  v370[2] = v333;
  v370[3] = v334;
  v370[4] = v335;
  v371 = v336;
  v370[0] = v331;
  v370[1] = v332;
  v876 = 0x100010001000100;
  v375[0] = xmmword_2246649C8;
  v375[1] = *(_OWORD *)dbl_2246649D8;
  sub_223B26C48((uint64_t)v370, 2, 5, 7, (uint64_t)&v876, (uint64_t)v375, COERCE_DOUBLE(0xA2000000EBLL), dbl_2246649D8[0], v66, v67, v68, v69);
  v373[2] = v333;
  v373[3] = v334;
  v373[4] = v335;
  v374 = v336;
  v373[0] = v331;
  v373[1] = v332;
  v877 = 0;
  v378[0] = xmmword_2246649E8;
  v378[1] = *(_OWORD *)dbl_2246649F8;
  if ((v7 & 0x200000020000000) != 0)
    sub_223B26C48((uint64_t)v373, 3, 4, 6, (uint64_t)&v877, (uint64_t)v378, COERCE_DOUBLE(0xED000000ECLL), dbl_2246649F8[0], v70, v71, v72, v73);
  v376[2] = v333;
  v376[3] = v334;
  v376[4] = v335;
  v377 = v336;
  v376[0] = v331;
  v376[1] = v332;
  v878 = 0x100010001000100;
  v385[0] = xmmword_224664A08;
  v385[1] = *(_OWORD *)dbl_224664A18;
  sub_223B26C48((uint64_t)v376, 3, 4, 7, (uint64_t)&v878, (uint64_t)v385, COERCE_DOUBLE(0xA4000000EDLL), dbl_224664A18[0], v70, v71, v72, v73);
  v381 = v333;
  v382 = v334;
  v383 = v335;
  v384 = v336;
  v379 = v331;
  v380 = v332;
  v879 = 0;
  v388[0] = xmmword_224664A28;
  v388[1] = *(_OWORD *)dbl_224664A38;
  if ((v7 & 0xA000000A0000000) != 0)
    sub_223B26C48((uint64_t)&v379, 3, 5, 6, (uint64_t)&v879, (uint64_t)v388, COERCE_DOUBLE(0xEF000000EELL), dbl_224664A38[0], v74, v75, v76, v77);
  v386[2] = v349;
  v386[3] = v350;
  v386[4] = v351;
  v387 = v352;
  v386[0] = v347;
  v386[1] = v348;
  v880 = 0x100010001000100;
  v391[0] = xmmword_224664A48;
  v391[1] = *(_OWORD *)dbl_224664A58;
  sub_223B26C48((uint64_t)v386, 3, 5, 7, (uint64_t)&v880, (uint64_t)v391, COERCE_DOUBLE(0xA6000000EFLL), dbl_224664A58[0], v74, v75, v76, v77);
  v389[2] = v349;
  v389[3] = v350;
  v389[4] = v351;
  v390 = v352;
  v389[0] = v347;
  v389[1] = v348;
  v881 = 0;
  v394[0] = xmmword_224664A68;
  v394[1] = *(_OWORD *)dbl_224664A78;
  if ((v7 & 0x40000000) != 0)
    sub_223B26C48((uint64_t)v389, 2, 6, 4, (uint64_t)&v881, (uint64_t)v394, COERCE_DOUBLE(0xF1000000F0), dbl_224664A78[0], v78, v79, v80, v81);
  v392[2] = v365;
  v392[3] = v366;
  v392[4] = v367;
  v393 = v368;
  v392[0] = v363;
  v392[1] = v364;
  v882 = 0;
  v401[0] = xmmword_224664A88;
  v401[1] = *(_OWORD *)dbl_224664A98;
  if ((v7 & 0xC0000000) != 0)
    sub_223B26C48((uint64_t)v392, 2, 6, 5, (uint64_t)&v882, (uint64_t)v401, COERCE_DOUBLE(0xF8000000F1), dbl_224664A98[0], v78, v79, v80, v81);
  v397 = v365;
  v398 = v366;
  v399 = v367;
  v400 = v368;
  v395 = v363;
  v396 = v364;
  v883 = 0x202000002020000;
  v404[0] = xmmword_224664AA8;
  v404[1] = *(_OWORD *)dbl_224664AB8;
  sub_223B26C48((uint64_t)&v395, 2, 7, 4, (uint64_t)&v883, (uint64_t)v404, COERCE_DOUBLE(0xF3000000F2), dbl_224664AB8[0], v78, v79, v80, v81);
  v402[2] = v365;
  v402[3] = v366;
  v402[4] = v367;
  v403 = v368;
  v402[0] = v363;
  v402[1] = v364;
  v884 = 0x202000002020000;
  v407[0] = xmmword_224664AC8;
  v407[1] = *(_OWORD *)dbl_224664AD8;
  sub_223B26C48((uint64_t)v402, 2, 7, 5, (uint64_t)&v884, (uint64_t)v407, COERCE_DOUBLE(0xFA000000F3), dbl_224664AD8[0], v82, v83, v84, v85);
  v405[2] = v365;
  v405[3] = v366;
  v405[4] = v367;
  v406 = v368;
  v405[0] = v363;
  v405[1] = v364;
  v885 = 0;
  v410[0] = xmmword_224664AE8;
  v410[1] = *(_OWORD *)dbl_224664AF8;
  if ((v7 & 0x400000040000000) != 0)
    sub_223B26C48((uint64_t)v405, 3, 6, 4, (uint64_t)&v885, (uint64_t)v410, COERCE_DOUBLE(0xF5000000F4), dbl_224664AF8[0], v86, v87, v88, v89);
  v408[2] = v381;
  v408[3] = v382;
  v408[4] = v383;
  v409 = v384;
  v408[0] = v379;
  v408[1] = v380;
  v886 = 0;
  v417[0] = xmmword_224664B08;
  v417[1] = *(_OWORD *)dbl_224664B18;
  if ((v7 & 0xC000000C0000000) != 0)
    sub_223B26C48((uint64_t)v408, 3, 6, 5, (uint64_t)&v886, (uint64_t)v417, COERCE_DOUBLE(0xFC000000F5), dbl_224664B18[0], v86, v87, v88, v89);
  v413 = v381;
  v414 = v382;
  v415 = v383;
  v416 = v384;
  v411 = v379;
  v412 = v380;
  v887 = 0x202000002020000;
  v420[0] = xmmword_224664B28;
  v420[1] = *(_OWORD *)dbl_224664B38;
  sub_223B26C48((uint64_t)&v411, 3, 7, 4, (uint64_t)&v887, (uint64_t)v420, COERCE_DOUBLE(0xF7000000F6), dbl_224664B38[0], v86, v87, v88, v89);
  v418[2] = v381;
  v418[3] = v382;
  v418[4] = v383;
  v419 = v384;
  v418[0] = v379;
  v418[1] = v380;
  v888 = 0x202000002020000;
  v423[0] = xmmword_224664B48;
  v423[1] = *(_OWORD *)dbl_224664B58;
  sub_223B26C48((uint64_t)v418, 3, 7, 5, (uint64_t)&v888, (uint64_t)v423, COERCE_DOUBLE(0xFE000000F7), dbl_224664B58[0], v90, v91, v92, v93);
  v421[2] = v381;
  v421[3] = v382;
  v421[4] = v383;
  v422 = v384;
  v421[0] = v379;
  v421[1] = v380;
  v889 = 0;
  v426[0] = xmmword_224664B68;
  v426[1] = *(_OWORD *)dbl_224664B78;
  if ((v7 & 0x80000000) != 0)
    sub_223B26C48((uint64_t)v421, 2, 6, 6, (uint64_t)&v889, (uint64_t)v426, COERCE_DOUBLE(0xF9000000F8), dbl_224664B78[0], v94, v95, v96, v97);
  v424[2] = v381;
  v424[3] = v382;
  v424[4] = v383;
  v425 = v384;
  v424[0] = v379;
  v424[1] = v380;
  v890 = 0x100010001000100;
  v433[0] = xmmword_224664B88;
  v433[1] = *(_OWORD *)dbl_224664B98;
  sub_223B26C48((uint64_t)v424, 2, 6, 7, (uint64_t)&v890, (uint64_t)v433, COERCE_DOUBLE(0xB0000000F9), dbl_224664B98[0], v94, v95, v96, v97);
  v429 = v397;
  v430 = v398;
  v431 = v399;
  v432 = v400;
  v427 = v395;
  v428 = v396;
  v891 = 0x202000002020000;
  v436[0] = xmmword_224664BA8;
  v436[1] = *(_OWORD *)dbl_224664BB8;
  sub_223B26C48((uint64_t)&v427, 2, 7, 6, (uint64_t)&v891, (uint64_t)v436, COERCE_DOUBLE(0xFB000000FALL), dbl_224664BB8[0], v98, v99, v100, v101);
  v434[2] = v397;
  v434[3] = v398;
  v434[4] = v399;
  v435 = v400;
  v434[0] = v395;
  v434[1] = v396;
  v892 = 0x302010003020100;
  v439[0] = xmmword_224664BC8;
  v439[1] = *(_OWORD *)dbl_224664BD8;
  sub_223B26C48((uint64_t)v434, 2, 7, 7, (uint64_t)&v892, (uint64_t)v439, COERCE_DOUBLE(0xB2000000FBLL), dbl_224664BD8[0], v102, v103, v104, v105);
  v437[2] = v397;
  v437[3] = v398;
  v437[4] = v399;
  v438 = v400;
  v437[0] = v395;
  v437[1] = v396;
  v893 = 0;
  v442[0] = xmmword_224664BE8;
  v442[1] = *(_OWORD *)dbl_224664BF8;
  if ((v7 & 0x800000080000000) != 0)
    sub_223B26C48((uint64_t)v437, 3, 6, 6, (uint64_t)&v893, (uint64_t)v442, COERCE_DOUBLE(0xFD000000FCLL), dbl_224664BF8[0], v106, v107, v108, v109);
  v440[2] = v397;
  v440[3] = v398;
  v440[4] = v399;
  v441 = v400;
  v440[0] = v395;
  v440[1] = v396;
  v894 = 0x100010001000100;
  v449[0] = xmmword_224664C08;
  v449[1] = *(_OWORD *)dbl_224664C18;
  sub_223B26C48((uint64_t)v440, 3, 6, 7, (uint64_t)&v894, (uint64_t)v449, COERCE_DOUBLE(0xB4000000FDLL), dbl_224664C18[0], v106, v107, v108, v109);
  v445 = v413;
  v446 = v414;
  v447 = v415;
  v448 = v416;
  v443 = v411;
  v444 = v412;
  v895 = 0x202000002020000;
  v452[0] = xmmword_224664C28;
  v452[1] = *(_OWORD *)dbl_224664C38;
  sub_223B26C48((uint64_t)&v443, 3, 7, 6, (uint64_t)&v895, (uint64_t)v452, COERCE_DOUBLE(0xFF000000FELL), dbl_224664C38[0], v110, v111, v112, v113);
  v450[2] = v413;
  v450[3] = v414;
  v450[4] = v415;
  v451 = v416;
  v450[0] = v411;
  v450[1] = v412;
  v896 = 0x302010003020100;
  v455[0] = xmmword_224664C48;
  v455[1] = *(_OWORD *)dbl_224664C58;
  sub_223B26C48((uint64_t)v450, 3, 7, 7, (uint64_t)&v896, (uint64_t)v455, COERCE_DOUBLE(0xB6000000FFLL), dbl_224664C58[0], v114, v115, v116, v117);
  v453[2] = v413;
  v453[3] = v414;
  v453[4] = v415;
  v454 = v416;
  v453[0] = v411;
  v453[1] = v412;
  v897 = 0;
  v458[0] = xmmword_224664C68;
  v458[1] = *(_OWORD *)dbl_224664C78;
  if ((v7 & 0x100000000) != 0)
    sub_223B26C48((uint64_t)v453, 4, 0, 0, (uint64_t)&v897, (uint64_t)v458, COERCE_DOUBLE(0x10100000100), dbl_224664C78[0], v118, v119, v120, v121);
  v456[2] = v429;
  v456[3] = v430;
  v456[4] = v431;
  v457 = v432;
  v456[0] = v427;
  v456[1] = v428;
  v898 = 0;
  v465[0] = xmmword_224664C88;
  v465[1] = *(_OWORD *)dbl_224664C98;
  if ((v7 & 0x300000000) != 0)
    sub_223B26C48((uint64_t)v456, 4, 0, 1, (uint64_t)&v898, (uint64_t)v465, COERCE_DOUBLE(0x10800000101), dbl_224664C98[0], v118, v119, v120, v121);
  v461 = v429;
  v462 = v430;
  v463 = v431;
  v464 = v432;
  v459 = v427;
  v460 = v428;
  v899 = 0;
  v468[0] = xmmword_224664CA8;
  v468[1] = *(_OWORD *)dbl_224664CB8;
  if ((v7 & 0x500000000) != 0)
    sub_223B26C48((uint64_t)&v459, 4, 1, 0, (uint64_t)&v899, (uint64_t)v468, COERCE_DOUBLE(0x10300000102), dbl_224664CB8[0], v118, v119, v120, v121);
  v466[2] = v429;
  v466[3] = v430;
  v466[4] = v431;
  v467 = v432;
  v466[0] = v427;
  v466[1] = v428;
  v900 = 0;
  v471[0] = xmmword_224664CC8;
  v471[1] = *(_OWORD *)dbl_224664CD8;
  if ((v7 & 0xF00000000) != 0)
    sub_223B26C48((uint64_t)v466, 4, 1, 1, (uint64_t)&v900, (uint64_t)v471, COERCE_DOUBLE(0x10A00000103), dbl_224664CD8[0], v118, v119, v120, v121);
  v469[2] = v429;
  v469[3] = v430;
  v469[4] = v431;
  v470 = v432;
  v469[0] = v427;
  v469[1] = v428;
  v901 = 0;
  v474[0] = xmmword_224664CE8;
  v474[1] = *(_OWORD *)dbl_224664CF8;
  if ((v7 & 0x1100000000) != 0)
    sub_223B26C48((uint64_t)v469, 5, 0, 0, (uint64_t)&v901, (uint64_t)v474, COERCE_DOUBLE(0x10500000104), dbl_224664CF8[0], v118, v119, v120, v121);
  v472[2] = v429;
  v472[3] = v430;
  v472[4] = v431;
  v473 = v432;
  v472[0] = v427;
  v472[1] = v428;
  v902 = 0;
  v481[0] = xmmword_224664D08;
  v481[1] = *(_OWORD *)dbl_224664D18;
  if ((v7 & 0x3300000000) != 0)
    sub_223B26C48((uint64_t)v472, 5, 0, 1, (uint64_t)&v902, (uint64_t)v481, COERCE_DOUBLE(0x10C00000105), dbl_224664D18[0], v118, v119, v120, v121);
  v477 = v445;
  v478 = v446;
  v479 = v447;
  v480 = v448;
  v475 = v443;
  v476 = v444;
  v903 = 0;
  v484[0] = xmmword_224664D28;
  v484[1] = *(_OWORD *)dbl_224664D38;
  if ((v7 & 0x5500000000) != 0)
    sub_223B26C48((uint64_t)&v475, 5, 1, 0, (uint64_t)&v903, (uint64_t)v484, COERCE_DOUBLE(0x10700000106), dbl_224664D38[0], v118, v119, v120, v121);
  v482[2] = v445;
  v482[3] = v446;
  v482[4] = v447;
  v483 = v448;
  v482[0] = v443;
  v482[1] = v444;
  v904 = 0;
  v487[0] = xmmword_224664D48;
  v487[1] = *(_OWORD *)dbl_224664D58;
  if ((v7 & 0xFF00000000) != 0)
    sub_223B26C48((uint64_t)v482, 5, 1, 1, (uint64_t)&v904, (uint64_t)v487, COERCE_DOUBLE(0x10E00000107), dbl_224664D58[0], v118, v119, v120, v121);
  v485[2] = v445;
  v485[3] = v446;
  v485[4] = v447;
  v486 = v448;
  v485[0] = v443;
  v485[1] = v444;
  v905 = 0;
  v490[0] = xmmword_224664D68;
  v490[1] = *(_OWORD *)dbl_224664D78;
  if ((v7 & 0x200000000) != 0)
    sub_223B26C48((uint64_t)v485, 4, 0, 2, (uint64_t)&v905, (uint64_t)v490, COERCE_DOUBLE(0x10900000108), dbl_224664D78[0], v118, v119, v120, v121);
  v488[2] = v445;
  v488[3] = v446;
  v488[4] = v447;
  v489 = v448;
  v488[0] = v443;
  v488[1] = v444;
  v906 = 0;
  v497[0] = xmmword_224664D88;
  v497[1] = *(_OWORD *)dbl_224664D98;
  if ((v7 & 0x10200000000) != 0)
    sub_223B26C48((uint64_t)v488, 4, 0, 3, (uint64_t)&v906, (uint64_t)v497, COERCE_DOUBLE(0x14000000109), dbl_224664D98[0], v118, v119, v120, v121);
  v493 = v461;
  v494 = v462;
  v495 = v463;
  v496 = v464;
  v491 = v459;
  v492 = v460;
  v907 = 0;
  v500[0] = xmmword_224664DA8;
  v500[1] = *(_OWORD *)dbl_224664DB8;
  if ((v7 & 0xA00000000) != 0)
    sub_223B26C48((uint64_t)&v491, 4, 1, 2, (uint64_t)&v907, (uint64_t)v500, COERCE_DOUBLE(0x10B0000010ALL), dbl_224664DB8[0], v118, v119, v120, v121);
  v498[2] = v461;
  v498[3] = v462;
  v498[4] = v463;
  v499 = v464;
  v498[0] = v459;
  v498[1] = v460;
  v908 = 0;
  v503[0] = xmmword_224664DC8;
  v503[1] = *(_OWORD *)dbl_224664DD8;
  if ((v7 & 0x50A00000000) != 0)
    sub_223B26C48((uint64_t)v498, 4, 1, 3, (uint64_t)&v908, (uint64_t)v503, COERCE_DOUBLE(0x1420000010BLL), dbl_224664DD8[0], v118, v119, v120, v121);
  v501[2] = v461;
  v501[3] = v462;
  v501[4] = v463;
  v502 = v464;
  v501[0] = v459;
  v501[1] = v460;
  v909 = 0;
  v506[0] = xmmword_224664DE8;
  v506[1] = *(_OWORD *)dbl_224664DF8;
  if ((v7 & 0x2200000000) != 0)
    sub_223B26C48((uint64_t)v501, 5, 0, 2, (uint64_t)&v909, (uint64_t)v506, COERCE_DOUBLE(0x10D0000010CLL), dbl_224664DF8[0], v118, v119, v120, v121);
  v504[2] = v461;
  v504[3] = v462;
  v504[4] = v463;
  v505 = v464;
  v504[0] = v459;
  v504[1] = v460;
  v910 = 0;
  v513[0] = xmmword_224664E08;
  v513[1] = *(_OWORD *)dbl_224664E18;
  if ((v7 & 0x112200000000) != 0)
    sub_223B26C48((uint64_t)v504, 5, 0, 3, (uint64_t)&v910, (uint64_t)v513, COERCE_DOUBLE(0x1440000010DLL), dbl_224664E18[0], v118, v119, v120, v121);
  v509 = v477;
  v510 = v478;
  v511 = v479;
  v512 = v480;
  v507 = v475;
  v508 = v476;
  v911 = 0;
  v516[0] = xmmword_224664E28;
  v516[1] = *(_OWORD *)dbl_224664E38;
  if ((v7 & 0xAA00000000) != 0)
    sub_223B26C48((uint64_t)&v507, 5, 1, 2, (uint64_t)&v911, (uint64_t)v516, COERCE_DOUBLE(0x10F0000010ELL), dbl_224664E38[0], v118, v119, v120, v121);
  v514[2] = v477;
  v514[3] = v478;
  v514[4] = v479;
  v515 = v480;
  v514[0] = v475;
  v514[1] = v476;
  v912 = 0;
  v519[0] = xmmword_224664E48;
  v519[1] = *(_OWORD *)dbl_224664E58;
  if ((v7 & 0x55AA00000000) != 0)
    sub_223B26C48((uint64_t)v514, 5, 1, 3, (uint64_t)&v912, (uint64_t)v519, COERCE_DOUBLE(0x1460000010FLL), dbl_224664E58[0], v118, v119, v120, v121);
  v517[2] = v477;
  v517[3] = v478;
  v517[4] = v479;
  v518 = v480;
  v517[0] = v475;
  v517[1] = v476;
  v913 = 0;
  v522[0] = xmmword_224664E68;
  v522[1] = *(_OWORD *)dbl_224664E78;
  if ((v7 & 0x400000000) != 0)
    sub_223B26C48((uint64_t)v517, 4, 2, 0, (uint64_t)&v913, (uint64_t)v522, COERCE_DOUBLE(0x11100000110), dbl_224664E78[0], v118, v119, v120, v121);
  v520[2] = v477;
  v520[3] = v478;
  v520[4] = v479;
  v521 = v480;
  v520[0] = v475;
  v520[1] = v476;
  v914 = 0;
  v529[0] = xmmword_224664E88;
  v529[1] = *(_OWORD *)dbl_224664E98;
  if ((v7 & 0xC00000000) != 0)
    sub_223B26C48((uint64_t)v520, 4, 2, 1, (uint64_t)&v914, (uint64_t)v529, COERCE_DOUBLE(0x11800000111), dbl_224664E98[0], v118, v119, v120, v121);
  v525 = v493;
  v526 = v494;
  v527 = v495;
  v528 = v496;
  v523 = v491;
  v524 = v492;
  v915 = 0;
  v532[0] = xmmword_224664EA8;
  v532[1] = *(_OWORD *)dbl_224664EB8;
  if ((v7 & 0x1000400000000) != 0)
    sub_223B26C48((uint64_t)&v523, 4, 3, 0, (uint64_t)&v915, (uint64_t)v532, COERCE_DOUBLE(0x11300000112), dbl_224664EB8[0], v118, v119, v120, v121);
  v530[2] = v493;
  v530[3] = v494;
  v530[4] = v495;
  v531 = v496;
  v530[0] = v491;
  v530[1] = v492;
  v916 = 0;
  v535[0] = xmmword_224664EC8;
  v535[1] = *(_OWORD *)dbl_224664ED8;
  if ((v7 & 0x3000C00000000) != 0)
    sub_223B26C48((uint64_t)v530, 4, 3, 1, (uint64_t)&v916, (uint64_t)v535, COERCE_DOUBLE(0x11A00000113), dbl_224664ED8[0], v118, v119, v120, v121);
  v533[2] = v493;
  v533[3] = v494;
  v533[4] = v495;
  v534 = v496;
  v533[0] = v491;
  v533[1] = v492;
  v917 = 0;
  v538[0] = xmmword_224664EE8;
  v538[1] = *(_OWORD *)dbl_224664EF8;
  if ((v7 & 0x4400000000) != 0)
    sub_223B26C48((uint64_t)v533, 5, 2, 0, (uint64_t)&v917, (uint64_t)v538, COERCE_DOUBLE(0x11500000114), dbl_224664EF8[0], v118, v119, v120, v121);
  v536[2] = v493;
  v536[3] = v494;
  v536[4] = v495;
  v537 = v496;
  v536[0] = v491;
  v536[1] = v492;
  v918 = 0;
  v545[0] = xmmword_224664F08;
  v545[1] = *(_OWORD *)dbl_224664F18;
  if ((v7 & 0xCC00000000) != 0)
    sub_223B26C48((uint64_t)v536, 5, 2, 1, (uint64_t)&v918, (uint64_t)v545, COERCE_DOUBLE(0x11C00000115), dbl_224664F18[0], v118, v119, v120, v121);
  v541 = v509;
  v542 = v510;
  v543 = v511;
  v544 = v512;
  v539 = v507;
  v540 = v508;
  v919 = 0;
  v548[0] = xmmword_224664F28;
  v548[1] = *(_OWORD *)dbl_224664F38;
  if ((v7 & 0x11004400000000) != 0)
    sub_223B26C48((uint64_t)&v539, 5, 3, 0, (uint64_t)&v919, (uint64_t)v548, COERCE_DOUBLE(0x11700000116), dbl_224664F38[0], v118, v119, v120, v121);
  v546[2] = v509;
  v546[3] = v510;
  v546[4] = v511;
  v547 = v512;
  v546[0] = v507;
  v546[1] = v508;
  v920 = 0;
  v551[0] = xmmword_224664F48;
  v551[1] = *(_OWORD *)dbl_224664F58;
  if ((v7 & 0x3300CC00000000) != 0)
    sub_223B26C48((uint64_t)v546, 5, 3, 1, (uint64_t)&v920, (uint64_t)v551, COERCE_DOUBLE(0x11E00000117), dbl_224664F58[0], v118, v119, v120, v121);
  v549[2] = v509;
  v549[3] = v510;
  v549[4] = v511;
  v550 = v512;
  v549[0] = v507;
  v549[1] = v508;
  v921 = 0;
  v554[0] = xmmword_224664F68;
  v554[1] = *(_OWORD *)dbl_224664F78;
  if ((v7 & 0x800000000) != 0)
    sub_223B26C48((uint64_t)v549, 4, 2, 2, (uint64_t)&v921, (uint64_t)v554, COERCE_DOUBLE(0x11900000118), dbl_224664F78[0], v118, v119, v120, v121);
  v552[2] = v509;
  v552[3] = v510;
  v552[4] = v511;
  v553 = v512;
  v552[0] = v507;
  v552[1] = v508;
  v922 = 0;
  v561[0] = xmmword_224664F88;
  v561[1] = *(_OWORD *)dbl_224664F98;
  if ((v7 & 0x40800000000) != 0)
    sub_223B26C48((uint64_t)v552, 4, 2, 3, (uint64_t)&v922, (uint64_t)v561, COERCE_DOUBLE(0x15000000119), dbl_224664F98[0], v118, v119, v120, v121);
  v557 = v525;
  v558 = v526;
  v559 = v527;
  v560 = v528;
  v555 = v523;
  v556 = v524;
  v923 = 0;
  v564[0] = xmmword_224664FA8;
  v564[1] = *(_OWORD *)dbl_224664FB8;
  if ((v7 & 0x2000800000000) != 0)
    sub_223B26C48((uint64_t)&v555, 4, 3, 2, (uint64_t)&v923, (uint64_t)v564, COERCE_DOUBLE(0x11B0000011ALL), dbl_224664FB8[0], v118, v119, v120, v121);
  v562[2] = v525;
  v562[3] = v526;
  v562[4] = v527;
  v563 = v528;
  v562[0] = v523;
  v562[1] = v524;
  v924 = 0;
  v567[0] = xmmword_224664FC8;
  v567[1] = *(_OWORD *)dbl_224664FD8;
  if ((v7 & 0x102040800000000) != 0)
    sub_223B26C48((uint64_t)v562, 4, 3, 3, (uint64_t)&v924, (uint64_t)v567, COERCE_DOUBLE(0x1520000011BLL), dbl_224664FD8[0], v118, v119, v120, v121);
  v565[2] = v525;
  v565[3] = v526;
  v565[4] = v527;
  v566 = v528;
  v565[0] = v523;
  v565[1] = v524;
  v925 = 0;
  v570[0] = xmmword_224664FE8;
  v570[1] = *(_OWORD *)dbl_224664FF8;
  if ((v7 & 0x8800000000) != 0)
    sub_223B26C48((uint64_t)v565, 5, 2, 2, (uint64_t)&v925, (uint64_t)v570, COERCE_DOUBLE(0x11D0000011CLL), dbl_224664FF8[0], v118, v119, v120, v121);
  v568[2] = v525;
  v568[3] = v526;
  v568[4] = v527;
  v569 = v528;
  v568[0] = v523;
  v568[1] = v524;
  v926 = 0;
  v577[0] = xmmword_224665008;
  v577[1] = *(_OWORD *)dbl_224665018;
  if ((v7 & 0x448800000000) != 0)
    sub_223B26C48((uint64_t)v568, 5, 2, 3, (uint64_t)&v926, (uint64_t)v577, COERCE_DOUBLE(0x1540000011DLL), dbl_224665018[0], v118, v119, v120, v121);
  v573 = v541;
  v574 = v542;
  v575 = v543;
  v576 = v544;
  v571 = v539;
  v572 = v540;
  v927 = 0;
  v580[0] = xmmword_224665028;
  v580[1] = *(_OWORD *)dbl_224665038;
  if ((v7 & 0x22008800000000) != 0)
    sub_223B26C48((uint64_t)&v571, 5, 3, 2, (uint64_t)&v927, (uint64_t)v580, COERCE_DOUBLE(0x11F0000011ELL), dbl_224665038[0], v118, v119, v120, v121);
  v578[2] = v541;
  v578[3] = v542;
  v578[4] = v543;
  v579 = v544;
  v578[0] = v539;
  v578[1] = v540;
  v928 = 0;
  v583[0] = xmmword_224665048;
  v583[1] = *(_OWORD *)dbl_224665058;
  if ((v7 & 0x1122448800000000) != 0)
    sub_223B26C48((uint64_t)v578, 5, 3, 3, (uint64_t)&v928, (uint64_t)v583, COERCE_DOUBLE(0x1560000011FLL), dbl_224665058[0], v118, v119, v120, v121);
  v581[2] = v541;
  v581[3] = v542;
  v581[4] = v543;
  v582 = v544;
  v581[0] = v539;
  v581[1] = v540;
  v929 = 0;
  v586[0] = xmmword_224665068;
  v586[1] = *(_OWORD *)dbl_224665078;
  if ((v7 & 0x1000000000) != 0)
    sub_223B26C48((uint64_t)v581, 6, 0, 0, (uint64_t)&v929, (uint64_t)v586, COERCE_DOUBLE(0x12100000120), dbl_224665078[0], v118, v119, v120, v121);
  v584[2] = v541;
  v584[3] = v542;
  v584[4] = v543;
  v585 = v544;
  v584[0] = v539;
  v584[1] = v540;
  v930 = 0;
  v593[0] = xmmword_224665088;
  v593[1] = *(_OWORD *)dbl_224665098;
  if ((v7 & 0x3000000000) != 0)
    sub_223B26C48((uint64_t)v584, 6, 0, 1, (uint64_t)&v930, (uint64_t)v593, COERCE_DOUBLE(0x12800000121), dbl_224665098[0], v118, v119, v120, v121);
  v589 = v557;
  v590 = v558;
  v591 = v559;
  v592 = v560;
  v587 = v555;
  v588 = v556;
  v931 = 0;
  v596[0] = xmmword_2246650A8;
  v596[1] = *(_OWORD *)dbl_2246650B8;
  if ((v7 & 0x5000000000) != 0)
    sub_223B26C48((uint64_t)&v587, 6, 1, 0, (uint64_t)&v931, (uint64_t)v596, COERCE_DOUBLE(0x12300000122), dbl_2246650B8[0], v118, v119, v120, v121);
  v594[2] = v557;
  v594[3] = v558;
  v594[4] = v559;
  v595 = v560;
  v594[0] = v555;
  v594[1] = v556;
  v932 = 0;
  v599[0] = xmmword_2246650C8;
  v599[1] = *(_OWORD *)dbl_2246650D8;
  if ((v7 & 0xF000000000) != 0)
    sub_223B26C48((uint64_t)v594, 6, 1, 1, (uint64_t)&v932, (uint64_t)v599, COERCE_DOUBLE(0x12A00000123), dbl_2246650D8[0], v118, v119, v120, v121);
  v597[2] = v557;
  v597[3] = v558;
  v597[4] = v559;
  v598 = v560;
  v597[0] = v555;
  v597[1] = v556;
  v933 = 0x404040400000000;
  v602[0] = xmmword_2246650E8;
  v602[1] = *(_OWORD *)dbl_2246650F8;
  sub_223B26C48((uint64_t)v597, 7, 0, 0, (uint64_t)&v933, (uint64_t)v602, COERCE_DOUBLE(0x12500000124), dbl_2246650F8[0], v118, v119, v120, v121);
  v600[2] = v557;
  v600[3] = v558;
  v600[4] = v559;
  v601 = v560;
  v600[0] = v555;
  v600[1] = v556;
  v934 = 0x404040400000000;
  v609[0] = xmmword_224665108;
  v609[1] = *(_OWORD *)dbl_224665118;
  sub_223B26C48((uint64_t)v600, 7, 0, 1, (uint64_t)&v934, (uint64_t)v609, COERCE_DOUBLE(0x12C00000125), dbl_224665118[0], v122, v123, v124, v125);
  v605 = v557;
  v606 = v558;
  v607 = v559;
  v608 = v560;
  v603 = v555;
  v604 = v556;
  v935 = 0x404040400000000;
  v612[0] = xmmword_224665128;
  v612[1] = *(_OWORD *)dbl_224665138;
  sub_223B26C48((uint64_t)&v603, 7, 1, 0, (uint64_t)&v935, (uint64_t)v612, COERCE_DOUBLE(0x12700000126), dbl_224665138[0], v126, v127, v128, v129);
  v610[2] = v557;
  v610[3] = v558;
  v610[4] = v559;
  v611 = v560;
  v610[0] = v555;
  v610[1] = v556;
  v936 = 0x404040400000000;
  v615[0] = xmmword_224665148;
  v615[1] = *(_OWORD *)dbl_224665158;
  sub_223B26C48((uint64_t)v610, 7, 1, 1, (uint64_t)&v936, (uint64_t)v615, COERCE_DOUBLE(0x12E00000127), dbl_224665158[0], v130, v131, v132, v133);
  v613[2] = v573;
  v613[3] = v574;
  v613[4] = v575;
  v614 = v576;
  v613[0] = v571;
  v613[1] = v572;
  v937 = 0;
  v618[0] = xmmword_224665168;
  v618[1] = *(_OWORD *)dbl_224665178;
  if ((v7 & 0x2000000000) != 0)
    sub_223B26C48((uint64_t)v613, 6, 0, 2, (uint64_t)&v937, (uint64_t)v618, COERCE_DOUBLE(0x12900000128), dbl_224665178[0], v134, v135, v136, v137);
  v616[2] = v573;
  v616[3] = v574;
  v616[4] = v575;
  v617 = v576;
  v616[0] = v571;
  v616[1] = v572;
  v938 = 0;
  v625[0] = xmmword_224665188;
  v625[1] = *(_OWORD *)dbl_224665198;
  if ((v7 & 0x102000000000) != 0)
    sub_223B26C48((uint64_t)v616, 6, 0, 3, (uint64_t)&v938, (uint64_t)v625, COERCE_DOUBLE(0x16000000129), dbl_224665198[0], v134, v135, v136, v137);
  v621 = v589;
  v622 = v590;
  v623 = v591;
  v624 = v592;
  v619 = v587;
  v620 = v588;
  v939 = 0;
  v628[0] = xmmword_2246651A8;
  v628[1] = *(_OWORD *)dbl_2246651B8;
  if ((v7 & 0xA000000000) != 0)
    sub_223B26C48((uint64_t)&v619, 6, 1, 2, (uint64_t)&v939, (uint64_t)v628, COERCE_DOUBLE(0x12B0000012ALL), dbl_2246651B8[0], v134, v135, v136, v137);
  v626[2] = v589;
  v626[3] = v590;
  v626[4] = v591;
  v627 = v592;
  v626[0] = v587;
  v626[1] = v588;
  v940 = 0;
  v631[0] = xmmword_2246651C8;
  v631[1] = *(_OWORD *)dbl_2246651D8;
  if ((v7 & 0x50A000000000) != 0)
    sub_223B26C48((uint64_t)v626, 6, 1, 3, (uint64_t)&v940, (uint64_t)v631, COERCE_DOUBLE(0x1620000012BLL), dbl_2246651D8[0], v134, v135, v136, v137);
  v629[2] = v589;
  v629[3] = v590;
  v629[4] = v591;
  v630 = v592;
  v629[0] = v587;
  v629[1] = v588;
  v941 = 0x404040400000000;
  v634[0] = xmmword_2246651E8;
  v634[1] = *(_OWORD *)dbl_2246651F8;
  sub_223B26C48((uint64_t)v629, 7, 0, 2, (uint64_t)&v941, (uint64_t)v634, COERCE_DOUBLE(0x12D0000012CLL), dbl_2246651F8[0], v134, v135, v136, v137);
  v632[2] = v605;
  v632[3] = v606;
  v632[4] = v607;
  v633 = v608;
  v632[0] = v603;
  v632[1] = v604;
  v942 = 0x404040400000000;
  v641[0] = xmmword_224665208;
  v641[1] = *(_OWORD *)dbl_224665218;
  sub_223B26C48((uint64_t)v632, 7, 0, 3, (uint64_t)&v942, (uint64_t)v641, COERCE_DOUBLE(0x1640000012DLL), dbl_224665218[0], v138, v139, v140, v141);
  v637 = v605;
  v638 = v606;
  v639 = v607;
  v640 = v608;
  v635 = v603;
  v636 = v604;
  v943 = 0x404040400000000;
  v644[0] = xmmword_224665228;
  v644[1] = *(_OWORD *)dbl_224665238;
  sub_223B26C48((uint64_t)&v635, 7, 1, 2, (uint64_t)&v943, (uint64_t)v644, COERCE_DOUBLE(0x12F0000012ELL), dbl_224665238[0], v142, v143, v144, v145);
  v642[2] = v605;
  v642[3] = v606;
  v642[4] = v607;
  v643 = v608;
  v642[0] = v603;
  v642[1] = v604;
  v944 = 0x404040400000000;
  v647[0] = xmmword_224665248;
  v647[1] = *(_OWORD *)dbl_224665258;
  sub_223B26C48((uint64_t)v642, 7, 1, 3, (uint64_t)&v944, (uint64_t)v647, COERCE_DOUBLE(0x1660000012FLL), dbl_224665258[0], v146, v147, v148, v149);
  v645[2] = v605;
  v645[3] = v606;
  v645[4] = v607;
  v646 = v608;
  v645[0] = v603;
  v645[1] = v604;
  v945 = 0;
  v650[0] = xmmword_224665268;
  v650[1] = *(_OWORD *)dbl_224665278;
  if ((v7 & 0x4000000000) != 0)
    sub_223B26C48((uint64_t)v645, 6, 2, 0, (uint64_t)&v945, (uint64_t)v650, COERCE_DOUBLE(0x13100000130), dbl_224665278[0], v150, v151, v152, v153);
  v648[2] = v605;
  v648[3] = v606;
  v648[4] = v607;
  v649 = v608;
  v648[0] = v603;
  v648[1] = v604;
  v946 = 0;
  v657[0] = xmmword_224665288;
  v657[1] = *(_OWORD *)dbl_224665298;
  if ((v7 & 0xC000000000) != 0)
    sub_223B26C48((uint64_t)v648, 6, 2, 1, (uint64_t)&v946, (uint64_t)v657, COERCE_DOUBLE(0x13800000131), dbl_224665298[0], v150, v151, v152, v153);
  v653 = v621;
  v654 = v622;
  v655 = v623;
  v656 = v624;
  v651 = v619;
  v652 = v620;
  v947 = 0;
  v660[0] = xmmword_2246652A8;
  v660[1] = *(_OWORD *)dbl_2246652B8;
  if ((v7 & 0x10004000000000) != 0)
    sub_223B26C48((uint64_t)&v651, 6, 3, 0, (uint64_t)&v947, (uint64_t)v660, COERCE_DOUBLE(0x13300000132), dbl_2246652B8[0], v150, v151, v152, v153);
  v658[2] = v621;
  v658[3] = v622;
  v658[4] = v623;
  v659 = v624;
  v658[0] = v619;
  v658[1] = v620;
  v948 = 0;
  v663[0] = xmmword_2246652C8;
  v663[1] = *(_OWORD *)dbl_2246652D8;
  if ((v7 & 0x3000C000000000) != 0)
    sub_223B26C48((uint64_t)v658, 6, 3, 1, (uint64_t)&v948, (uint64_t)v663, COERCE_DOUBLE(0x13A00000133), dbl_2246652D8[0], v150, v151, v152, v153);
  v661[2] = v621;
  v661[3] = v622;
  v661[4] = v623;
  v662 = v624;
  v661[0] = v619;
  v661[1] = v620;
  v949 = 0x404040400000000;
  v666[0] = xmmword_2246652E8;
  v666[1] = *(_OWORD *)dbl_2246652F8;
  sub_223B26C48((uint64_t)v661, 7, 2, 0, (uint64_t)&v949, (uint64_t)v666, COERCE_DOUBLE(0x13500000134), dbl_2246652F8[0], v150, v151, v152, v153);
  v664[2] = v637;
  v664[3] = v638;
  v664[4] = v639;
  v665 = v640;
  v664[0] = v635;
  v664[1] = v636;
  v950 = 0x404040400000000;
  v673[0] = xmmword_224665308;
  v673[1] = *(_OWORD *)dbl_224665318;
  sub_223B26C48((uint64_t)v664, 7, 2, 1, (uint64_t)&v950, (uint64_t)v673, COERCE_DOUBLE(0x13C00000135), dbl_224665318[0], v154, v155, v156, v157);
  v669 = v637;
  v670 = v638;
  v671 = v639;
  v672 = v640;
  v667 = v635;
  v668 = v636;
  v951 = 0x404040400000000;
  v676[0] = xmmword_224665328;
  v676[1] = *(_OWORD *)dbl_224665338;
  sub_223B26C48((uint64_t)&v667, 7, 3, 0, (uint64_t)&v951, (uint64_t)v676, COERCE_DOUBLE(0x13700000136), dbl_224665338[0], v158, v159, v160, v161);
  v674[2] = v637;
  v674[3] = v638;
  v674[4] = v639;
  v675 = v640;
  v674[0] = v635;
  v674[1] = v636;
  v952 = 0x404040400000000;
  v679[0] = xmmword_224665348;
  v679[1] = *(_OWORD *)dbl_224665358;
  sub_223B26C48((uint64_t)v674, 7, 3, 1, (uint64_t)&v952, (uint64_t)v679, COERCE_DOUBLE(0x13E00000137), dbl_224665358[0], v162, v163, v164, v165);
  v677[2] = v637;
  v677[3] = v638;
  v677[4] = v639;
  v678 = v640;
  v677[0] = v635;
  v677[1] = v636;
  v953 = 0;
  v682[0] = xmmword_224665368;
  v682[1] = *(_OWORD *)dbl_224665378;
  if ((v7 & 0x8000000000) != 0)
    sub_223B26C48((uint64_t)v677, 6, 2, 2, (uint64_t)&v953, (uint64_t)v682, COERCE_DOUBLE(0x13900000138), dbl_224665378[0], v166, v167, v168, v169);
  v680[2] = v637;
  v680[3] = v638;
  v680[4] = v639;
  v681 = v640;
  v680[0] = v635;
  v680[1] = v636;
  v954 = 0;
  v689[0] = xmmword_224665388;
  v689[1] = *(_OWORD *)dbl_224665398;
  if ((v7 & 0x408000000000) != 0)
    sub_223B26C48((uint64_t)v680, 6, 2, 3, (uint64_t)&v954, (uint64_t)v689, COERCE_DOUBLE(0x17000000139), dbl_224665398[0], v166, v167, v168, v169);
  v685 = v653;
  v686 = v654;
  v687 = v655;
  v688 = v656;
  v683 = v651;
  v684 = v652;
  v955 = 0;
  v692[0] = xmmword_2246653A8;
  v692[1] = *(_OWORD *)dbl_2246653B8;
  if ((v7 & 0x20008000000000) != 0)
    sub_223B26C48((uint64_t)&v683, 6, 3, 2, (uint64_t)&v955, (uint64_t)v692, COERCE_DOUBLE(0x13B0000013ALL), dbl_2246653B8[0], v166, v167, v168, v169);
  v690[2] = v653;
  v690[3] = v654;
  v690[4] = v655;
  v691 = v656;
  v690[0] = v651;
  v690[1] = v652;
  v956 = 0;
  v695[0] = xmmword_2246653C8;
  v695[1] = *(_OWORD *)dbl_2246653D8;
  if ((v7 & 0x1020408000000000) != 0)
    sub_223B26C48((uint64_t)v690, 6, 3, 3, (uint64_t)&v956, (uint64_t)v695, COERCE_DOUBLE(0x1720000013BLL), dbl_2246653D8[0], v166, v167, v168, v169);
  v693[2] = v653;
  v693[3] = v654;
  v693[4] = v655;
  v694 = v656;
  v693[0] = v651;
  v693[1] = v652;
  v957 = 0x404040400000000;
  v698[0] = xmmword_2246653E8;
  v698[1] = *(_OWORD *)dbl_2246653F8;
  sub_223B26C48((uint64_t)v693, 7, 2, 2, (uint64_t)&v957, (uint64_t)v698, COERCE_DOUBLE(0x13D0000013CLL), dbl_2246653F8[0], v166, v167, v168, v169);
  v696[2] = v669;
  v696[3] = v670;
  v696[4] = v671;
  v697 = v672;
  v696[0] = v667;
  v696[1] = v668;
  v958 = 0x404040400000000;
  v705[0] = xmmword_224665408;
  v705[1] = *(_OWORD *)dbl_224665418;
  sub_223B26C48((uint64_t)v696, 7, 2, 3, (uint64_t)&v958, (uint64_t)v705, COERCE_DOUBLE(0x1740000013DLL), dbl_224665418[0], v170, v171, v172, v173);
  v701 = v669;
  v702 = v670;
  v703 = v671;
  v704 = v672;
  v699 = v667;
  v700 = v668;
  v959 = 0x404040400000000;
  v708[0] = xmmword_224665428;
  v708[1] = *(_OWORD *)dbl_224665438;
  sub_223B26C48((uint64_t)&v699, 7, 3, 2, (uint64_t)&v959, (uint64_t)v708, COERCE_DOUBLE(0x13F0000013ELL), dbl_224665438[0], v174, v175, v176, v177);
  v706[2] = v669;
  v706[3] = v670;
  v706[4] = v671;
  v707 = v672;
  v706[0] = v667;
  v706[1] = v668;
  v960 = 0x404040400000000;
  v711[0] = xmmword_224665448;
  v711[1] = *(_OWORD *)dbl_224665458;
  sub_223B26C48((uint64_t)v706, 7, 3, 3, (uint64_t)&v960, (uint64_t)v711, COERCE_DOUBLE(0x1760000013FLL), dbl_224665458[0], v178, v179, v180, v181);
  v709[2] = v669;
  v709[3] = v670;
  v709[4] = v671;
  v710 = v672;
  v709[0] = v667;
  v709[1] = v668;
  v961 = 0;
  v714[0] = xmmword_224665468;
  v714[1] = *(_OWORD *)dbl_224665478;
  if ((v7 & 0x10000000000) != 0)
    sub_223B26C48((uint64_t)v709, 4, 0, 4, (uint64_t)&v961, (uint64_t)v714, COERCE_DOUBLE(0x14100000140), dbl_224665478[0], v182, v183, v184, v185);
  v712[2] = v669;
  v712[3] = v670;
  v712[4] = v671;
  v713 = v672;
  v712[0] = v667;
  v712[1] = v668;
  v962 = 0;
  v721[0] = xmmword_224665488;
  v721[1] = *(_OWORD *)dbl_224665498;
  if ((v7 & 0x30000000000) != 0)
    sub_223B26C48((uint64_t)v712, 4, 0, 5, (uint64_t)&v962, (uint64_t)v721, COERCE_DOUBLE(0x14800000141), dbl_224665498[0], v182, v183, v184, v185);
  v717 = v685;
  v718 = v686;
  v719 = v687;
  v720 = v688;
  v715 = v683;
  v716 = v684;
  v963 = 0;
  v724[0] = xmmword_2246654A8;
  v724[1] = *(_OWORD *)dbl_2246654B8;
  if ((v7 & 0x50000000000) != 0)
    sub_223B26C48((uint64_t)&v715, 4, 1, 4, (uint64_t)&v963, (uint64_t)v724, COERCE_DOUBLE(0x14300000142), dbl_2246654B8[0], v182, v183, v184, v185);
  v722[2] = v685;
  v722[3] = v686;
  v722[4] = v687;
  v723 = v688;
  v722[0] = v683;
  v722[1] = v684;
  v964 = 0;
  v727[0] = xmmword_2246654C8;
  v727[1] = *(_OWORD *)dbl_2246654D8;
  if ((v7 & 0xF0000000000) != 0)
    sub_223B26C48((uint64_t)v722, 4, 1, 5, (uint64_t)&v964, (uint64_t)v727, COERCE_DOUBLE(0x14A00000143), dbl_2246654D8[0], v182, v183, v184, v185);
  v725[2] = v685;
  v725[3] = v686;
  v725[4] = v687;
  v726 = v688;
  v725[0] = v683;
  v725[1] = v684;
  v965 = 0;
  v730[0] = xmmword_2246654E8;
  v730[1] = *(_OWORD *)dbl_2246654F8;
  if ((v7 & 0x110000000000) != 0)
    sub_223B26C48((uint64_t)v725, 5, 0, 4, (uint64_t)&v965, (uint64_t)v730, COERCE_DOUBLE(0x14500000144), dbl_2246654F8[0], v182, v183, v184, v185);
  v728[2] = v701;
  v728[3] = v702;
  v728[4] = v703;
  v729 = v704;
  v728[0] = v699;
  v728[1] = v700;
  v966 = 0;
  v737[0] = xmmword_224665508;
  v737[1] = *(_OWORD *)dbl_224665518;
  if ((v7 & 0x330000000000) != 0)
    sub_223B26C48((uint64_t)v728, 5, 0, 5, (uint64_t)&v966, (uint64_t)v737, COERCE_DOUBLE(0x14C00000145), dbl_224665518[0], v182, v183, v184, v185);
  v733 = v701;
  v734 = v702;
  v735 = v703;
  v736 = v704;
  v731 = v699;
  v732 = v700;
  v967 = 0;
  v740[0] = xmmword_224665528;
  v740[1] = *(_OWORD *)dbl_224665538;
  if ((v7 & 0x550000000000) != 0)
    sub_223B26C48((uint64_t)&v731, 5, 1, 4, (uint64_t)&v967, (uint64_t)v740, COERCE_DOUBLE(0x14700000146), dbl_224665538[0], v182, v183, v184, v185);
  v738[2] = v701;
  v738[3] = v702;
  v738[4] = v703;
  v739 = v704;
  v738[0] = v699;
  v738[1] = v700;
  v968 = 0;
  v743[0] = xmmword_224665548;
  v743[1] = *(_OWORD *)dbl_224665558;
  if ((v7 & 0xFF0000000000) != 0)
    sub_223B26C48((uint64_t)v738, 5, 1, 5, (uint64_t)&v968, (uint64_t)v743, COERCE_DOUBLE(0x14E00000147), dbl_224665558[0], v182, v183, v184, v185);
  v741[2] = v701;
  v741[3] = v702;
  v741[4] = v703;
  v742 = v704;
  v741[0] = v699;
  v741[1] = v700;
  v969 = 0;
  v746[0] = xmmword_224665568;
  v746[1] = *(_OWORD *)dbl_224665578;
  if ((v7 & 0x20000000000) != 0)
    sub_223B26C48((uint64_t)v741, 4, 0, 6, (uint64_t)&v969, (uint64_t)v746, COERCE_DOUBLE(0x14900000148), dbl_224665578[0], v182, v183, v184, v185);
  v744[2] = v701;
  v744[3] = v702;
  v744[4] = v703;
  v745 = v704;
  v744[0] = v699;
  v744[1] = v700;
  v970 = 0x100010001000100;
  v753[0] = xmmword_224665588;
  v753[1] = *(_OWORD *)dbl_224665598;
  sub_223B26C48((uint64_t)v744, 4, 0, 7, (uint64_t)&v970, (uint64_t)v753, COERCE_DOUBLE(0x10000000149), dbl_224665598[0], v182, v183, v184, v185);
  v749 = v701;
  v750 = v702;
  v751 = v703;
  v752 = v704;
  v747 = v699;
  v748 = v700;
  v971 = 0;
  v756[0] = xmmword_2246655A8;
  v756[1] = *(_OWORD *)dbl_2246655B8;
  if ((v7 & 0xA0000000000) != 0)
    sub_223B26C48((uint64_t)&v747, 4, 1, 6, (uint64_t)&v971, (uint64_t)v756, COERCE_DOUBLE(0x14B0000014ALL), dbl_2246655B8[0], v186, v187, v188, v189);
  v754[2] = v717;
  v754[3] = v718;
  v754[4] = v719;
  v755 = v720;
  v754[0] = v715;
  v754[1] = v716;
  v972 = 0x100010001000100;
  v759[0] = xmmword_2246655C8;
  v759[1] = *(_OWORD *)dbl_2246655D8;
  sub_223B26C48((uint64_t)v754, 4, 1, 7, (uint64_t)&v972, (uint64_t)v759, COERCE_DOUBLE(0x1020000014BLL), dbl_2246655D8[0], v186, v187, v188, v189);
  v757[2] = v717;
  v757[3] = v718;
  v757[4] = v719;
  v758 = v720;
  v757[0] = v715;
  v757[1] = v716;
  v973 = 0;
  v762[0] = xmmword_2246655E8;
  v762[1] = *(_OWORD *)dbl_2246655F8;
  if ((v7 & 0x220000000000) != 0)
    sub_223B26C48((uint64_t)v757, 5, 0, 6, (uint64_t)&v973, (uint64_t)v762, COERCE_DOUBLE(0x14D0000014CLL), dbl_2246655F8[0], v190, v191, v192, v193);
  v760[2] = v717;
  v760[3] = v718;
  v760[4] = v719;
  v761 = v720;
  v760[0] = v715;
  v760[1] = v716;
  v974 = 0x100010001000100;
  v769[0] = xmmword_224665608;
  v769[1] = *(_OWORD *)dbl_224665618;
  sub_223B26C48((uint64_t)v760, 5, 0, 7, (uint64_t)&v974, (uint64_t)v769, COERCE_DOUBLE(0x1040000014DLL), dbl_224665618[0], v190, v191, v192, v193);
  v765 = v717;
  v766 = v718;
  v767 = v719;
  v768 = v720;
  v763 = v715;
  v764 = v716;
  v975 = 0;
  v772[0] = xmmword_224665628;
  v772[1] = *(_OWORD *)dbl_224665638;
  if ((v7 & 0xAA0000000000) != 0)
    sub_223B26C48((uint64_t)&v763, 5, 1, 6, (uint64_t)&v975, (uint64_t)v772, COERCE_DOUBLE(0x14F0000014ELL), dbl_224665638[0], v194, v195, v196, v197);
  v770[2] = v733;
  v770[3] = v734;
  v770[4] = v735;
  v771 = v736;
  v770[0] = v731;
  v770[1] = v732;
  v976 = 0x100010001000100;
  v775[0] = xmmword_224665648;
  v775[1] = *(_OWORD *)dbl_224665658;
  sub_223B26C48((uint64_t)v770, 5, 1, 7, (uint64_t)&v976, (uint64_t)v775, COERCE_DOUBLE(0x1060000014FLL), dbl_224665658[0], v194, v195, v196, v197);
  v773[2] = v733;
  v773[3] = v734;
  v773[4] = v735;
  v774 = v736;
  v773[0] = v731;
  v773[1] = v732;
  v977 = 0;
  v778[0] = xmmword_224665668;
  v778[1] = *(_OWORD *)dbl_224665678;
  if ((v7 & 0x40000000000) != 0)
    sub_223B26C48((uint64_t)v773, 4, 2, 4, (uint64_t)&v977, (uint64_t)v778, COERCE_DOUBLE(0x15100000150), dbl_224665678[0], v198, v199, v200, v201);
  v776[2] = v749;
  v776[3] = v750;
  v776[4] = v751;
  v777 = v752;
  v776[0] = v747;
  v776[1] = v748;
  v978 = 0;
  v785[0] = xmmword_224665688;
  v785[1] = *(_OWORD *)dbl_224665698;
  if ((v7 & 0xC0000000000) != 0)
    sub_223B26C48((uint64_t)v776, 4, 2, 5, (uint64_t)&v978, (uint64_t)v785, COERCE_DOUBLE(0x15800000151), dbl_224665698[0], v198, v199, v200, v201);
  v781 = v749;
  v782 = v750;
  v783 = v751;
  v784 = v752;
  v779 = v747;
  v780 = v748;
  v979 = 0;
  v788[0] = xmmword_2246656A8;
  v788[1] = *(_OWORD *)dbl_2246656B8;
  if ((v7 & 0x100040000000000) != 0)
    sub_223B26C48((uint64_t)&v779, 4, 3, 4, (uint64_t)&v979, (uint64_t)v788, COERCE_DOUBLE(0x15300000152), dbl_2246656B8[0], v198, v199, v200, v201);
  v786[2] = v749;
  v786[3] = v750;
  v786[4] = v751;
  v787 = v752;
  v786[0] = v747;
  v786[1] = v748;
  v980 = 0;
  v791[0] = xmmword_2246656C8;
  v791[1] = *(_OWORD *)dbl_2246656D8;
  if ((v7 & 0x3000C0000000000) != 0)
    sub_223B26C48((uint64_t)v786, 4, 3, 5, (uint64_t)&v980, (uint64_t)v791, COERCE_DOUBLE(0x15A00000153), dbl_2246656D8[0], v198, v199, v200, v201);
  v789[2] = v749;
  v789[3] = v750;
  v789[4] = v751;
  v790 = v752;
  v789[0] = v747;
  v789[1] = v748;
  v981 = 0;
  v794[0] = xmmword_2246656E8;
  v794[1] = *(_OWORD *)dbl_2246656F8;
  if ((v7 & 0x440000000000) != 0)
    sub_223B26C48((uint64_t)v789, 5, 2, 4, (uint64_t)&v981, (uint64_t)v794, COERCE_DOUBLE(0x15500000154), dbl_2246656F8[0], v198, v199, v200, v201);
  v792[2] = v749;
  v792[3] = v750;
  v792[4] = v751;
  v793 = v752;
  v792[0] = v747;
  v792[1] = v748;
  v982 = 0;
  v801[0] = xmmword_224665708;
  v801[1] = *(_OWORD *)dbl_224665718;
  if ((v7 & 0xCC0000000000) != 0)
    sub_223B26C48((uint64_t)v792, 5, 2, 5, (uint64_t)&v982, (uint64_t)v801, COERCE_DOUBLE(0x15C00000155), dbl_224665718[0], v198, v199, v200, v201);
  v797 = v765;
  v798 = v766;
  v799 = v767;
  v800 = v768;
  v795 = v763;
  v796 = v764;
  v983 = 0;
  v804[0] = xmmword_224665728;
  v804[1] = *(_OWORD *)dbl_224665738;
  if ((v7 & 0x1100440000000000) != 0)
    sub_223B26C48((uint64_t)&v795, 5, 3, 4, (uint64_t)&v983, (uint64_t)v804, COERCE_DOUBLE(0x15700000156), dbl_224665738[0], v198, v199, v200, v201);
  v802[2] = v765;
  v802[3] = v766;
  v802[4] = v767;
  v803 = v768;
  v802[0] = v763;
  v802[1] = v764;
  v984 = 0;
  v807[0] = xmmword_224665748;
  v807[1] = *(_OWORD *)dbl_224665758;
  if ((v7 & 0x3300CC0000000000) != 0)
    sub_223B26C48((uint64_t)v802, 5, 3, 5, (uint64_t)&v984, (uint64_t)v807, COERCE_DOUBLE(0x15E00000157), dbl_224665758[0], v198, v199, v200, v201);
  v805[2] = v765;
  v805[3] = v766;
  v805[4] = v767;
  v806 = v768;
  v805[0] = v763;
  v805[1] = v764;
  v985 = 0;
  v810[0] = xmmword_224665768;
  v810[1] = *(_OWORD *)dbl_224665778;
  if ((v7 & 0x80000000000) != 0)
    sub_223B26C48((uint64_t)v805, 4, 2, 6, (uint64_t)&v985, (uint64_t)v810, COERCE_DOUBLE(0x15900000158), dbl_224665778[0], v198, v199, v200, v201);
  v808[2] = v765;
  v808[3] = v766;
  v808[4] = v767;
  v809 = v768;
  v808[0] = v763;
  v808[1] = v764;
  v986 = 0x100010001000100;
  v817[0] = xmmword_224665788;
  v817[1] = *(_OWORD *)dbl_224665798;
  sub_223B26C48((uint64_t)v808, 4, 2, 7, (uint64_t)&v986, (uint64_t)v817, COERCE_DOUBLE(0x11000000159), dbl_224665798[0], v198, v199, v200, v201);
  v813 = v765;
  v814 = v766;
  v815 = v767;
  v816 = v768;
  v811 = v763;
  v812 = v764;
  v987 = 0;
  v820[0] = xmmword_2246657A8;
  v820[1] = *(_OWORD *)dbl_2246657B8;
  if ((v7 & 0x200080000000000) != 0)
    sub_223B26C48((uint64_t)&v811, 4, 3, 6, (uint64_t)&v987, (uint64_t)v820, COERCE_DOUBLE(0x15B0000015ALL), dbl_2246657B8[0], v202, v203, v204, v205);
  v818[2] = v781;
  v818[3] = v782;
  v818[4] = v783;
  v819 = v784;
  v818[0] = v779;
  v818[1] = v780;
  v988 = 0x100010001000100;
  v823[0] = xmmword_2246657C8;
  v823[1] = *(_OWORD *)dbl_2246657D8;
  sub_223B26C48((uint64_t)v818, 4, 3, 7, (uint64_t)&v988, (uint64_t)v823, COERCE_DOUBLE(0x1120000015BLL), dbl_2246657D8[0], v202, v203, v204, v205);
  v821[2] = v781;
  v821[3] = v782;
  v821[4] = v783;
  v822 = v784;
  v821[0] = v779;
  v821[1] = v780;
  v989 = 0;
  v826[0] = xmmword_2246657E8;
  v826[1] = *(_OWORD *)dbl_2246657F8;
  if ((v7 & 0x880000000000) != 0)
    sub_223B26C48((uint64_t)v821, 5, 2, 6, (uint64_t)&v989, (uint64_t)v826, COERCE_DOUBLE(0x15D0000015CLL), dbl_2246657F8[0], v206, v207, v208, v209);
  v824[2] = v781;
  v824[3] = v782;
  v824[4] = v783;
  v825 = v784;
  v824[0] = v779;
  v824[1] = v780;
  v990 = 0x100010001000100;
  v829[0] = xmmword_224665808;
  v829[1] = *(_OWORD *)dbl_224665818;
  sub_223B26C48((uint64_t)v824, 5, 2, 7, (uint64_t)&v990, (uint64_t)v829, COERCE_DOUBLE(0x1140000015DLL), dbl_224665818[0], v206, v207, v208, v209);
  v827[2] = v781;
  v827[3] = v782;
  v827[4] = v783;
  v828 = v784;
  v827[0] = v779;
  v827[1] = v780;
  v991 = 0;
  v832[0] = xmmword_224665828;
  v832[1] = *(_OWORD *)dbl_224665838;
  if ((v7 & 0x2200880000000000) != 0)
    sub_223B26C48((uint64_t)v827, 5, 3, 6, (uint64_t)&v991, (uint64_t)v832, COERCE_DOUBLE(0x15F0000015ELL), dbl_224665838[0], v210, v211, v212, v213);
  v830[2] = v797;
  v830[3] = v798;
  v830[4] = v799;
  v831 = v800;
  v830[0] = v795;
  v830[1] = v796;
  v992 = 0x100010001000100;
  v835[0] = xmmword_224665848;
  v835[1] = *(_OWORD *)dbl_224665858;
  sub_223B26C48((uint64_t)v830, 5, 3, 7, (uint64_t)&v992, (uint64_t)v835, COERCE_DOUBLE(0x1160000015FLL), dbl_224665858[0], v210, v211, v212, v213);
  v833[2] = v797;
  v833[3] = v798;
  v833[4] = v799;
  v834 = v800;
  v833[0] = v795;
  v833[1] = v796;
  v993[0] = 0;
  v837[0] = xmmword_224665868;
  v837[1] = *(_OWORD *)dbl_224665878;
  if ((v7 & 0x100000000000) != 0)
    sub_223B26C48((uint64_t)v833, 6, 0, 4, (uint64_t)v993, (uint64_t)v837, COERCE_DOUBLE(0x16100000160), dbl_224665878[0], v214, v215, v216, v217);
  v835[4] = v813;
  v835[5] = v814;
  v835[6] = v815;
  v836 = v816;
  v835[2] = v811;
  v835[3] = v812;
  return sub_223B32BB8();
}

uint64_t sub_223B32BB8()
{
  uint64_t v0;
  uint64_t v1;
  float32x4_t v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  float32x4_t v10;
  double v11;
  double v12;
  double v13;
  float32x4_t v14;
  double v15;
  double v16;
  double v17;
  float32x4_t v18;
  double v19;
  double v20;
  double v21;
  float32x4_t v22;
  double v23;
  double v24;
  double v25;
  float32x4_t v26;
  double v27;
  double v28;
  double v29;
  float32x4_t v30;
  double v31;
  double v32;
  double v33;
  float32x4_t v34;
  double v35;
  double v36;
  double v37;
  float32x4_t v38;
  double v39;
  double v40;
  double v41;
  float32x4_t v42;
  double v43;
  double v44;
  double v45;
  float32x4_t v46;
  double v47;
  double v48;
  double v49;
  float32x4_t v50;
  double v51;
  double v52;
  double v53;
  float32x4_t v54;
  double v55;
  double v56;
  double v57;
  float32x4_t v58;
  double v59;
  double v60;
  double v61;
  float32x4_t v62;
  double v63;
  double v64;
  double v65;
  float32x4_t v66;
  double v67;
  double v68;
  double v69;
  float32x4_t v70;
  double v71;
  double v72;
  double v73;
  float32x4_t v74;
  double v75;
  double v76;
  double v77;
  float32x4_t v78;
  double v79;
  double v80;
  double v81;
  float32x4_t v82;
  double v83;
  double v84;
  double v85;
  float32x4_t v86;
  double v87;
  double v88;
  double v89;
  float32x4_t v90;
  double v91;
  double v92;
  double v93;
  float32x4_t v94;
  double v95;
  double v96;
  double v97;
  float32x4_t v98;
  double v99;
  double v100;
  double v101;
  float32x4_t v102;
  double v103;
  double v104;
  double v105;
  float32x4_t v106;
  double v107;
  double v108;
  double v109;
  float32x4_t v110;
  double v111;
  double v112;
  double v113;
  float32x4_t v114;
  double v115;
  double v116;
  double v117;
  float32x4_t v118;
  double v119;
  double v120;
  double v121;
  float32x4_t v122;
  double v123;
  double v124;
  double v125;
  float32x4_t v126;
  double v127;
  double v128;
  double v129;
  float32x4_t v130;
  double v131;
  double v132;
  double v133;
  float32x4_t v134;
  double v135;
  double v136;
  double v137;
  float32x4_t v138;
  double v139;
  double v140;
  double v141;
  float32x4_t v142;
  double v143;
  double v144;
  double v145;
  float32x4_t v146;
  double v147;
  double v148;
  double v149;
  float32x4_t v150;
  double v151;
  double v152;
  double v153;
  float32x4_t v154;
  double v155;
  double v156;
  double v157;
  float32x4_t v158;
  double v159;
  double v160;
  double v161;
  float32x4_t v162;
  double v163;
  double v164;
  double v165;
  float32x4_t v166;
  double v167;
  double v168;
  double v169;
  float32x4_t v170;
  double v171;
  double v172;
  double v173;
  float32x4_t v174;
  double v175;
  double v176;
  double v177;
  float32x4_t v178;
  double v179;
  double v180;
  double v181;
  float32x4_t v182;
  double v183;
  double v184;
  double v185;
  float32x4_t v186;
  double v187;
  double v188;
  double v189;
  float32x4_t v190;
  double v191;
  double v192;
  double v193;
  float32x4_t v194;
  double v195;
  double v196;
  double v197;
  float32x4_t v198;
  double v199;
  double v200;
  double v201;
  double v202;
  float32x4_t v203;
  double v204;
  double v205;
  double v206;
  float32x4_t v207;
  double v208;
  double v209;
  double v210;
  float32x4_t v211;
  double v212;
  double v213;
  double v214;
  float32x4_t v215;
  double v216;
  double v217;
  double v218;
  float32x4_t v219;
  double v220;
  double v221;
  double v222;
  float32x4_t v223;
  double v224;
  double v225;
  double v226;
  float32x4_t v227;
  double v228;
  double v229;
  double v230;
  float32x4_t v231;
  double v232;
  double v233;
  double v234;
  float32x4_t v235;
  double v236;
  double v237;
  double v238;
  float32x4_t v239;
  double v240;
  double v241;
  double v242;
  float32x4_t v243;
  double v244;
  double v245;
  double v246;
  float32x4_t v247;
  double v248;
  double v249;
  double v250;
  float32x4_t v251;
  double v252;
  double v253;
  double v254;
  float32x4_t v255;
  double v256;
  double v257;
  double v258;
  double v259;
  float32x4_t v260;
  double v261;
  double v262;
  double v263;
  float32x4_t v264;
  double v265;
  double v266;
  double v267;
  float32x4_t v268;
  double v269;
  double v270;
  double v271;
  float32x4_t v272;
  double v273;
  double v274;
  double v275;
  float32x4_t v276;
  double v277;
  double v278;
  double v279;
  float32x4_t v280;
  double v281;
  double v282;
  double v283;
  float32x4_t v284;
  double v285;
  double v286;
  double v287;
  float32x4_t v288;
  double v289;
  double v290;
  double v291;
  float32x4_t v292;
  double v293;
  double v294;
  double v295;
  float32x4_t v296;
  double v297;
  double v298;
  double v299;
  double v300;
  float32x4_t v301;
  double v302;
  double v303;
  double v304;
  float32x4_t v305;
  double v306;
  double v307;
  double v308;
  float32x4_t v309;
  double v310;
  double v311;
  double v312;
  float32x4_t v313;
  double v314;
  double v315;
  double v316;
  float32x4_t v317;
  double v318;
  double v319;
  double v320;
  float32x4_t v321;
  double v322;
  double v323;
  double v324;
  float32x4_t v325;
  double v326;
  double v327;
  double v328;
  float32x4_t v329;
  double v330;
  double v331;
  double v332;
  float32x4_t v333;
  double v334;
  double v335;
  double v336;
  float32x4_t v337;
  double v338;
  double v339;
  double v340;
  float32x4_t v341;
  double v342;
  double v343;
  double v344;
  float32x4_t v345;
  double v346;
  double v347;
  double v348;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  uint64_t v355;
  _OWORD v356[2];
  _OWORD v357[5];
  uint64_t v358;
  _OWORD v359[2];
  _OWORD v360[5];
  uint64_t v361;
  _OWORD v362[2];
  _OWORD v363[5];
  uint64_t v364;
  _OWORD v365[2];
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  uint64_t v371;
  _OWORD v372[2];
  _OWORD v373[5];
  uint64_t v374;
  _OWORD v375[2];
  _OWORD v376[5];
  uint64_t v377;
  _OWORD v378[2];
  _OWORD v379[5];
  uint64_t v380;
  _OWORD v381[2];
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  uint64_t v387;
  _OWORD v388[2];
  _OWORD v389[5];
  uint64_t v390;
  _OWORD v391[2];
  _OWORD v392[5];
  uint64_t v393;
  _OWORD v394[2];
  _OWORD v395[5];
  uint64_t v396;
  _OWORD v397[2];
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  uint64_t v403;
  _OWORD v404[2];
  _OWORD v405[5];
  uint64_t v406;
  _OWORD v407[2];
  _OWORD v408[5];
  uint64_t v409;
  _OWORD v410[2];
  _OWORD v411[5];
  uint64_t v412;
  _OWORD v413[2];
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  uint64_t v419;
  _OWORD v420[2];
  _OWORD v421[5];
  uint64_t v422;
  _OWORD v423[2];
  _OWORD v424[5];
  uint64_t v425;
  _OWORD v426[2];
  _OWORD v427[5];
  uint64_t v428;
  _OWORD v429[2];
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  uint64_t v435;
  _OWORD v436[2];
  _OWORD v437[5];
  uint64_t v438;
  _OWORD v439[2];
  _OWORD v440[5];
  uint64_t v441;
  _OWORD v442[2];
  _OWORD v443[5];
  uint64_t v444;
  _OWORD v445[2];
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  uint64_t v451;
  _OWORD v452[2];
  _OWORD v453[5];
  uint64_t v454;
  _OWORD v455[2];
  _OWORD v456[5];
  uint64_t v457;
  _OWORD v458[2];
  _OWORD v459[5];
  uint64_t v460;
  _OWORD v461[2];
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  uint64_t v467;
  _OWORD v468[2];
  _OWORD v469[5];
  uint64_t v470;
  _OWORD v471[2];
  _OWORD v472[5];
  uint64_t v473;
  _OWORD v474[2];
  _OWORD v475[5];
  uint64_t v476;
  _OWORD v477[2];
  __int128 v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  uint64_t v483;
  _OWORD v484[2];
  _OWORD v485[5];
  uint64_t v486;
  _OWORD v487[2];
  _OWORD v488[5];
  uint64_t v489;
  _OWORD v490[2];
  _OWORD v491[5];
  uint64_t v492;
  _OWORD v493[2];
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  uint64_t v499;
  _OWORD v500[2];
  _OWORD v501[5];
  uint64_t v502;
  _OWORD v503[2];
  _OWORD v504[5];
  uint64_t v505;
  _OWORD v506[2];
  _OWORD v507[5];
  uint64_t v508;
  _OWORD v509[2];
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  uint64_t v515;
  _OWORD v516[2];
  _OWORD v517[5];
  uint64_t v518;
  _OWORD v519[2];
  _OWORD v520[5];
  uint64_t v521;
  _OWORD v522[2];
  _OWORD v523[5];
  uint64_t v524;
  _OWORD v525[2];
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  uint64_t v531;
  _OWORD v532[2];
  _OWORD v533[5];
  uint64_t v534;
  _OWORD v535[2];
  _OWORD v536[5];
  uint64_t v537;
  _OWORD v538[2];
  _OWORD v539[5];
  uint64_t v540;
  _OWORD v541[2];
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  uint64_t v547;
  _OWORD v548[2];
  _OWORD v549[5];
  uint64_t v550;
  _OWORD v551[2];
  _OWORD v552[5];
  uint64_t v553;
  _OWORD v554[2];
  _OWORD v555[5];
  uint64_t v556;
  _OWORD v557[2];
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  uint64_t v563;
  _OWORD v564[2];
  _OWORD v565[5];
  uint64_t v566;
  _OWORD v567[2];
  _OWORD v568[5];
  uint64_t v569;
  _OWORD v570[2];
  _OWORD v571[5];
  uint64_t v572;
  _OWORD v573[2];
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  uint64_t v579;
  _OWORD v580[2];
  _OWORD v581[5];
  uint64_t v582;
  _OWORD v583[2];
  _OWORD v584[5];
  uint64_t v585;
  _OWORD v586[2];
  _OWORD v587[5];
  uint64_t v588;
  _OWORD v589[2];
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  uint64_t v595;
  _OWORD v596[2];
  _OWORD v597[5];
  uint64_t v598;
  _OWORD v599[2];
  _OWORD v600[5];
  uint64_t v601;
  _OWORD v602[2];
  _OWORD v603[5];
  uint64_t v604;
  _OWORD v605[2];
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  uint64_t v611;
  _OWORD v612[2];
  _OWORD v613[5];
  uint64_t v614;
  _OWORD v615[2];
  _OWORD v616[5];
  uint64_t v617;
  _OWORD v618[2];
  _OWORD v619[5];
  uint64_t v620;
  _OWORD v621[2];
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  uint64_t v627;
  _OWORD v628[2];
  _OWORD v629[5];
  uint64_t v630;
  _OWORD v631[2];
  _OWORD v632[5];
  uint64_t v633;
  _OWORD v634[2];
  _OWORD v635[5];
  uint64_t v636;
  _OWORD v637[2];
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  uint64_t v643;
  _OWORD v644[2];
  _OWORD v645[5];
  uint64_t v646;
  _OWORD v647[2];
  _OWORD v648[5];
  uint64_t v649;
  _OWORD v650[2];
  _OWORD v651[5];
  uint64_t v652;
  _OWORD v653[2];
  __int128 v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  __int128 v658;
  uint64_t v659;
  _OWORD v660[2];
  _OWORD v661[5];
  uint64_t v662;
  _OWORD v663[2];
  _OWORD v664[5];
  uint64_t v665;
  _OWORD v666[2];
  _OWORD v667[5];
  uint64_t v668;
  _OWORD v669[2];
  __int128 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  __int128 v674;
  uint64_t v675;
  _OWORD v676[2];
  _OWORD v677[5];
  uint64_t v678;
  _OWORD v679[2];
  _OWORD v680[5];
  uint64_t v681;
  _OWORD v682[2];
  _OWORD v683[5];
  uint64_t v684;
  _OWORD v685[2];
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  uint64_t v691;
  _OWORD v692[2];
  _OWORD v693[5];
  uint64_t v694;
  _OWORD v695[2];
  _OWORD v696[5];
  uint64_t v697;
  _OWORD v698[2];
  _OWORD v699[5];
  uint64_t v700;
  _OWORD v701[2];
  __int128 v702;
  __int128 v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  uint64_t v707;
  _OWORD v708[2];
  _OWORD v709[5];
  uint64_t v710;
  _OWORD v711[2];
  _OWORD v712[5];
  uint64_t v713;
  _OWORD v714[2];
  _OWORD v715[5];
  uint64_t v716;
  _OWORD v717[2];
  _OWORD v718[5];
  uint64_t v719;
  _OWORD v720[2];
  __int128 v721;
  __int128 v722;
  __int128 v723;
  __int128 v724;
  __int128 v725;
  uint64_t v726;
  _OWORD v727[2];
  _OWORD v728[5];
  uint64_t v729;
  _OWORD v730[2];
  _OWORD v731[5];
  uint64_t v732;
  _OWORD v733[2];
  _OWORD v734[5];
  uint64_t v735;
  _OWORD v736[2];
  _OWORD v737[5];
  uint64_t v738;
  _OWORD v739[2];
  _OWORD v740[5];
  uint64_t v741;
  _OWORD v742[2];
  _OWORD v743[5];
  uint64_t v744;
  _OWORD v745[2];
  _OWORD v746[5];
  uint64_t v747;
  _OWORD v748[2];
  __int128 v749;
  __int128 v750;
  __int128 v751;
  __int128 v752;
  __int128 v753;
  uint64_t v754;
  _OWORD v755[2];
  _OWORD v756[5];
  uint64_t v757;
  __int128 v758;
  __int128 v759;
  _OWORD v760[5];
  uint64_t v761;
  _OWORD v762[2];
  __int128 v763;
  __int128 v764;
  __int128 v765;
  __int128 v766;
  __int128 v767;
  uint64_t v768;
  _OWORD v769[2];
  _OWORD v770[5];
  uint64_t v771;
  _OWORD v772[2];
  _OWORD v773[5];
  uint64_t v774;
  _OWORD v775[2];
  _OWORD v776[5];
  uint64_t v777;
  _OWORD v778[2];
  __int128 v779;
  __int128 v780;
  __int128 v781;
  __int128 v782;
  __int128 v783;
  uint64_t v784;
  _OWORD v785[2];
  _OWORD v786[5];
  uint64_t v787;
  _OWORD v788[2];
  _OWORD v789[5];
  uint64_t v790;
  _OWORD v791[2];
  _OWORD v792[5];
  uint64_t v793;
  _OWORD v794[2];
  __int128 v795;
  __int128 v796;
  __int128 v797;
  __int128 v798;
  __int128 v799;
  uint64_t v800;
  _OWORD v801[2];
  _OWORD v802[5];
  uint64_t v803;
  _OWORD v804[2];
  _OWORD v805[5];
  uint64_t v806;
  _OWORD v807[2];
  _OWORD v808[5];
  uint64_t v809;
  _OWORD v810[2];
  __int128 v811;
  __int128 v812;
  __int128 v813;
  __int128 v814;
  __int128 v815;
  uint64_t v816;
  _OWORD v817[2];
  _OWORD v818[5];
  uint64_t v819;
  _OWORD v820[2];
  _OWORD v821[5];
  uint64_t v822;
  _OWORD v823[2];
  _OWORD v824[5];
  uint64_t v825;
  _OWORD v826[2];
  __int128 v827;
  __int128 v828;
  __int128 v829;
  __int128 v830;
  __int128 v831;
  uint64_t v832;
  _OWORD v833[2];
  _OWORD v834[5];
  uint64_t v835;
  _OWORD v836[2];
  _OWORD v837[5];
  uint64_t v838;
  _OWORD v839[2];
  _OWORD v840[5];
  uint64_t v841;
  _OWORD v842[2];
  _OWORD v843[5];
  uint64_t v844;
  _OWORD v845[2];
  _OWORD v846[5];
  uint64_t v847;
  _OWORD v848[2];
  _OWORD v849[5];
  uint64_t v850;
  _OWORD v851[2];
  _OWORD v852[5];
  uint64_t v853;
  _OWORD v854[2];
  _OWORD v855[5];
  uint64_t v856;
  _OWORD v857[2];
  __int128 v858;
  __int128 v859;
  __int128 v860;
  __int128 v861;
  __int128 v862;
  uint64_t v863;
  _OWORD v864[2];
  _OWORD v865[5];
  uint64_t v866;
  __int128 v867;
  __int128 v868;
  _OWORD v869[5];
  uint64_t v870;
  _OWORD v871[2];
  __int128 v872;
  __int128 v873;
  __int128 v874;
  __int128 v875;
  __int128 v876;
  uint64_t v877;
  _OWORD v878[2];
  _OWORD v879[5];
  uint64_t v880;
  _OWORD v881[2];
  _OWORD v882[5];
  uint64_t v883;
  _OWORD v884[2];
  _OWORD v885[5];
  uint64_t v886;
  _OWORD v887[2];
  _OWORD v888[5];
  uint64_t v889;
  _OWORD v890[2];
  _OWORD v891[5];
  uint64_t v892;
  _OWORD v893[2];
  _OWORD v894[5];
  uint64_t v895;
  _OWORD v896[2];
  _OWORD v897[5];
  uint64_t v898;
  _OWORD v899[2];
  _OWORD v900[5];
  uint64_t v901;
  _OWORD v902[2];
  _OWORD v903[5];
  uint64_t v904;
  _OWORD v905[2];
  _OWORD v906[5];
  uint64_t v907;
  _OWORD v908[2];
  __int128 v909;
  __int128 v910;
  __int128 v911;
  __int128 v912;
  __int128 v913;
  uint64_t v914;
  _OWORD v915[2];
  __int128 v916;
  __int128 v917;
  __int128 v918;
  __int128 v919;
  __int128 v920;
  uint64_t v921;
  __int128 v922;
  __int128 v923;
  _OWORD v924[5];
  uint64_t v925;
  _OWORD v926[2];
  _OWORD v927[5];
  uint64_t v928;
  _OWORD v929[2];
  _OWORD v930[5];
  uint64_t v931;
  _OWORD v932[2];
  _OWORD v933[5];
  uint64_t v934;
  _OWORD v935[2];
  __int128 v936;
  __int128 v937;
  __int128 v938;
  __int128 v939;
  __int128 v940;
  uint64_t v941;
  _OWORD v942[2];
  _OWORD v943[5];
  uint64_t v944;
  _OWORD v945[2];
  _OWORD v946[5];
  uint64_t v947;
  _OWORD v948[2];
  _OWORD v949[5];
  uint64_t v950;
  _OWORD v951[2];
  _OWORD v952[5];
  uint64_t v953;
  _OWORD v954[2];
  _OWORD v955[5];
  uint64_t v956;
  _OWORD v957[2];
  _OWORD v958[5];
  uint64_t v959;
  _OWORD v960[2];
  _OWORD v961[5];
  uint64_t v962;
  _OWORD v963[2];
  _OWORD v964[5];
  uint64_t v965;
  _OWORD v966[2];
  _OWORD v967[2];
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  _QWORD v1126[2];

  v0 = MEMORY[0x24BDAC7A8]();
  v6 = v1;
  v7 = v0;
  v1126[1] = *MEMORY[0x24BDAC8D0];
  v968 = 0;
  v356[0] = xmmword_224665888;
  v356[1] = *(_OWORD *)dbl_224665898;
  if ((v0 & 0x300000000000) != 0)
    sub_223B26C48(v1, 6, 0, 5, (uint64_t)&v968, (uint64_t)v356, COERCE_DOUBLE(0x16800000161), dbl_224665898[0], v2, v3, v4, v5);
  v8 = *(_OWORD *)(v6 + 48);
  v352 = *(_OWORD *)(v6 + 32);
  v353 = v8;
  v354 = *(_OWORD *)(v6 + 64);
  v355 = *(_QWORD *)(v6 + 80);
  v9 = *(_OWORD *)(v6 + 16);
  v350 = *(_OWORD *)v6;
  v351 = v9;
  v969 = 0;
  v359[0] = xmmword_2246658A8;
  v359[1] = *(_OWORD *)dbl_2246658B8;
  if ((v7 & 0x500000000000) != 0)
    sub_223B26C48((uint64_t)&v350, 6, 1, 4, (uint64_t)&v969, (uint64_t)v359, COERCE_DOUBLE(0x16300000162), dbl_2246658B8[0], v2, v3, v4, v5);
  v357[2] = v352;
  v357[3] = v353;
  v357[4] = v354;
  v358 = v355;
  v357[0] = v350;
  v357[1] = v351;
  v970 = 0;
  v362[0] = xmmword_2246658C8;
  v362[1] = *(_OWORD *)dbl_2246658D8;
  if ((v7 & 0xF00000000000) != 0)
    sub_223B26C48((uint64_t)v357, 6, 1, 5, (uint64_t)&v970, (uint64_t)v362, COERCE_DOUBLE(0x16A00000163), dbl_2246658D8[0], v2, v3, v4, v5);
  v360[2] = v352;
  v360[3] = v353;
  v360[4] = v354;
  v361 = v355;
  v360[0] = v350;
  v360[1] = v351;
  v971 = 0x404040400000000;
  v365[0] = xmmword_2246658E8;
  v365[1] = *(_OWORD *)dbl_2246658F8;
  sub_223B26C48((uint64_t)v360, 7, 0, 4, (uint64_t)&v971, (uint64_t)v365, COERCE_DOUBLE(0x16500000164), dbl_2246658F8[0], v2, v3, v4, v5);
  v363[2] = v352;
  v363[3] = v353;
  v363[4] = v354;
  v364 = v355;
  v363[0] = v350;
  v363[1] = v351;
  v972 = 0x404040400000000;
  v372[0] = xmmword_224665908;
  v372[1] = *(_OWORD *)dbl_224665918;
  sub_223B26C48((uint64_t)v363, 7, 0, 5, (uint64_t)&v972, (uint64_t)v372, COERCE_DOUBLE(0x16C00000165), dbl_224665918[0], v10, v11, v12, v13);
  v368 = v352;
  v369 = v353;
  v370 = v354;
  v371 = v355;
  v366 = v350;
  v367 = v351;
  v973 = 0x404040400000000;
  v375[0] = xmmword_224665928;
  v375[1] = *(_OWORD *)dbl_224665938;
  sub_223B26C48((uint64_t)&v366, 7, 1, 4, (uint64_t)&v973, (uint64_t)v375, COERCE_DOUBLE(0x16700000166), dbl_224665938[0], v14, v15, v16, v17);
  v373[2] = v352;
  v373[3] = v353;
  v373[4] = v354;
  v374 = v355;
  v373[0] = v350;
  v373[1] = v351;
  v974 = 0x404040400000000;
  v378[0] = xmmword_224665948;
  v378[1] = *(_OWORD *)dbl_224665958;
  sub_223B26C48((uint64_t)v373, 7, 1, 5, (uint64_t)&v974, (uint64_t)v378, COERCE_DOUBLE(0x16E00000167), dbl_224665958[0], v18, v19, v20, v21);
  v376[2] = v352;
  v376[3] = v353;
  v376[4] = v354;
  v377 = v355;
  v376[0] = v350;
  v376[1] = v351;
  v975 = 0;
  v381[0] = xmmword_224665968;
  v381[1] = *(_OWORD *)dbl_224665978;
  if ((v7 & 0x200000000000) != 0)
    sub_223B26C48((uint64_t)v376, 6, 0, 6, (uint64_t)&v975, (uint64_t)v381, COERCE_DOUBLE(0x16900000168), dbl_224665978[0], v22, v23, v24, v25);
  v379[2] = v352;
  v379[3] = v353;
  v379[4] = v354;
  v380 = v355;
  v379[0] = v350;
  v379[1] = v351;
  v976 = 0x100010001000100;
  v388[0] = xmmword_224665988;
  v388[1] = *(_OWORD *)dbl_224665998;
  sub_223B26C48((uint64_t)v379, 6, 0, 7, (uint64_t)&v976, (uint64_t)v388, COERCE_DOUBLE(0x12000000169), dbl_224665998[0], v22, v23, v24, v25);
  v384 = v352;
  v385 = v353;
  v386 = v354;
  v387 = v355;
  v382 = v350;
  v383 = v351;
  v977 = 0;
  v391[0] = xmmword_2246659A8;
  v391[1] = *(_OWORD *)dbl_2246659B8;
  if ((v7 & 0xA00000000000) != 0)
    sub_223B26C48((uint64_t)&v382, 6, 1, 6, (uint64_t)&v977, (uint64_t)v391, COERCE_DOUBLE(0x16B0000016ALL), dbl_2246659B8[0], v26, v27, v28, v29);
  v389[2] = v352;
  v389[3] = v353;
  v389[4] = v354;
  v390 = v355;
  v389[0] = v350;
  v389[1] = v351;
  v978 = 0x100010001000100;
  v394[0] = xmmword_2246659C8;
  v394[1] = *(_OWORD *)dbl_2246659D8;
  sub_223B26C48((uint64_t)v389, 6, 1, 7, (uint64_t)&v978, (uint64_t)v394, COERCE_DOUBLE(0x1220000016BLL), dbl_2246659D8[0], v26, v27, v28, v29);
  v392[2] = v352;
  v392[3] = v353;
  v392[4] = v354;
  v393 = v355;
  v392[0] = v350;
  v392[1] = v351;
  v979 = 0x404040400000000;
  v397[0] = xmmword_2246659E8;
  v397[1] = *(_OWORD *)dbl_2246659F8;
  sub_223B26C48((uint64_t)v392, 7, 0, 6, (uint64_t)&v979, (uint64_t)v397, COERCE_DOUBLE(0x16D0000016CLL), dbl_2246659F8[0], v30, v31, v32, v33);
  v395[2] = v352;
  v395[3] = v353;
  v395[4] = v354;
  v396 = v355;
  v395[0] = v350;
  v395[1] = v351;
  v980 = 0x504050401000100;
  v404[0] = xmmword_224665A08;
  v404[1] = *(_OWORD *)dbl_224665A18;
  sub_223B26C48((uint64_t)v395, 7, 0, 7, (uint64_t)&v980, (uint64_t)v404, COERCE_DOUBLE(0x1240000016DLL), dbl_224665A18[0], v34, v35, v36, v37);
  v400 = v368;
  v401 = v369;
  v402 = v370;
  v403 = v371;
  v398 = v366;
  v399 = v367;
  v981 = 0x404040400000000;
  v407[0] = xmmword_224665A28;
  v407[1] = *(_OWORD *)dbl_224665A38;
  sub_223B26C48((uint64_t)&v398, 7, 1, 6, (uint64_t)&v981, (uint64_t)v407, COERCE_DOUBLE(0x16F0000016ELL), dbl_224665A38[0], v38, v39, v40, v41);
  v405[2] = v368;
  v405[3] = v369;
  v405[4] = v370;
  v406 = v371;
  v405[0] = v366;
  v405[1] = v367;
  v982 = 0x504050401000100;
  v410[0] = xmmword_224665A48;
  v410[1] = *(_OWORD *)dbl_224665A58;
  sub_223B26C48((uint64_t)v405, 7, 1, 7, (uint64_t)&v982, (uint64_t)v410, COERCE_DOUBLE(0x1260000016FLL), dbl_224665A58[0], v42, v43, v44, v45);
  v408[2] = v368;
  v408[3] = v369;
  v408[4] = v370;
  v409 = v371;
  v408[0] = v366;
  v408[1] = v367;
  v983 = 0;
  v413[0] = xmmword_224665A68;
  v413[1] = *(_OWORD *)dbl_224665A78;
  if ((v7 & 0x400000000000) != 0)
    sub_223B26C48((uint64_t)v408, 6, 2, 4, (uint64_t)&v983, (uint64_t)v413, COERCE_DOUBLE(0x17100000170), dbl_224665A78[0], v46, v47, v48, v49);
  v411[2] = v384;
  v411[3] = v385;
  v411[4] = v386;
  v412 = v387;
  v411[0] = v382;
  v411[1] = v383;
  v984 = 0;
  v420[0] = xmmword_224665A88;
  v420[1] = *(_OWORD *)dbl_224665A98;
  if ((v7 & 0xC00000000000) != 0)
    sub_223B26C48((uint64_t)v411, 6, 2, 5, (uint64_t)&v984, (uint64_t)v420, COERCE_DOUBLE(0x17800000171), dbl_224665A98[0], v46, v47, v48, v49);
  v416 = v384;
  v417 = v385;
  v418 = v386;
  v419 = v387;
  v414 = v382;
  v415 = v383;
  v985 = 0;
  v423[0] = xmmword_224665AA8;
  v423[1] = *(_OWORD *)dbl_224665AB8;
  if ((v7 & 0x1000400000000000) != 0)
    sub_223B26C48((uint64_t)&v414, 6, 3, 4, (uint64_t)&v985, (uint64_t)v423, COERCE_DOUBLE(0x17300000172), dbl_224665AB8[0], v46, v47, v48, v49);
  v421[2] = v384;
  v421[3] = v385;
  v421[4] = v386;
  v422 = v387;
  v421[0] = v382;
  v421[1] = v383;
  v986 = 0;
  v426[0] = xmmword_224665AC8;
  v426[1] = *(_OWORD *)dbl_224665AD8;
  if ((v7 & 0x3000C00000000000) != 0)
    sub_223B26C48((uint64_t)v421, 6, 3, 5, (uint64_t)&v986, (uint64_t)v426, COERCE_DOUBLE(0x17A00000173), dbl_224665AD8[0], v46, v47, v48, v49);
  v424[2] = v400;
  v424[3] = v401;
  v424[4] = v402;
  v425 = v403;
  v424[0] = v398;
  v424[1] = v399;
  v987 = 0x404040400000000;
  v429[0] = xmmword_224665AE8;
  v429[1] = *(_OWORD *)dbl_224665AF8;
  sub_223B26C48((uint64_t)v424, 7, 2, 4, (uint64_t)&v987, (uint64_t)v429, COERCE_DOUBLE(0x17500000174), dbl_224665AF8[0], v46, v47, v48, v49);
  v427[2] = v400;
  v427[3] = v401;
  v427[4] = v402;
  v428 = v403;
  v427[0] = v398;
  v427[1] = v399;
  v988 = 0x404040400000000;
  v436[0] = xmmword_224665B08;
  v436[1] = *(_OWORD *)dbl_224665B18;
  sub_223B26C48((uint64_t)v427, 7, 2, 5, (uint64_t)&v988, (uint64_t)v436, COERCE_DOUBLE(0x17C00000175), dbl_224665B18[0], v50, v51, v52, v53);
  v432 = v400;
  v433 = v401;
  v434 = v402;
  v435 = v403;
  v430 = v398;
  v431 = v399;
  v989 = 0x404040400000000;
  v439[0] = xmmword_224665B28;
  v439[1] = *(_OWORD *)dbl_224665B38;
  sub_223B26C48((uint64_t)&v430, 7, 3, 4, (uint64_t)&v989, (uint64_t)v439, COERCE_DOUBLE(0x17700000176), dbl_224665B38[0], v54, v55, v56, v57);
  v437[2] = v400;
  v437[3] = v401;
  v437[4] = v402;
  v438 = v403;
  v437[0] = v398;
  v437[1] = v399;
  v990 = 0x404040400000000;
  v442[0] = xmmword_224665B48;
  v442[1] = *(_OWORD *)dbl_224665B58;
  sub_223B26C48((uint64_t)v437, 7, 3, 5, (uint64_t)&v990, (uint64_t)v442, COERCE_DOUBLE(0x17E00000177), dbl_224665B58[0], v58, v59, v60, v61);
  v440[2] = v400;
  v440[3] = v401;
  v440[4] = v402;
  v441 = v403;
  v440[0] = v398;
  v440[1] = v399;
  v991 = 0;
  v445[0] = xmmword_224665B68;
  v445[1] = *(_OWORD *)dbl_224665B78;
  if ((v7 & 0x800000000000) != 0)
    sub_223B26C48((uint64_t)v440, 6, 2, 6, (uint64_t)&v991, (uint64_t)v445, COERCE_DOUBLE(0x17900000178), dbl_224665B78[0], v62, v63, v64, v65);
  v443[2] = v400;
  v443[3] = v401;
  v443[4] = v402;
  v444 = v403;
  v443[0] = v398;
  v443[1] = v399;
  v992 = 0x100010001000100;
  v452[0] = xmmword_224665B88;
  v452[1] = *(_OWORD *)dbl_224665B98;
  sub_223B26C48((uint64_t)v443, 6, 2, 7, (uint64_t)&v992, (uint64_t)v452, COERCE_DOUBLE(0x13000000179), dbl_224665B98[0], v62, v63, v64, v65);
  v448 = v416;
  v449 = v417;
  v450 = v418;
  v451 = v419;
  v446 = v414;
  v447 = v415;
  v993 = 0;
  v455[0] = xmmword_224665BA8;
  v455[1] = *(_OWORD *)dbl_224665BB8;
  if ((v7 & 0x2000800000000000) != 0)
    sub_223B26C48((uint64_t)&v446, 6, 3, 6, (uint64_t)&v993, (uint64_t)v455, COERCE_DOUBLE(0x17B0000017ALL), dbl_224665BB8[0], v66, v67, v68, v69);
  v453[2] = v416;
  v453[3] = v417;
  v453[4] = v418;
  v454 = v419;
  v453[0] = v414;
  v453[1] = v415;
  v994 = 0x100010001000100;
  v458[0] = xmmword_224665BC8;
  v458[1] = *(_OWORD *)dbl_224665BD8;
  sub_223B26C48((uint64_t)v453, 6, 3, 7, (uint64_t)&v994, (uint64_t)v458, COERCE_DOUBLE(0x1320000017BLL), dbl_224665BD8[0], v66, v67, v68, v69);
  v456[2] = v416;
  v456[3] = v417;
  v456[4] = v418;
  v457 = v419;
  v456[0] = v414;
  v456[1] = v415;
  v995 = 0x404040400000000;
  v461[0] = xmmword_224665BE8;
  v461[1] = *(_OWORD *)dbl_224665BF8;
  sub_223B26C48((uint64_t)v456, 7, 2, 6, (uint64_t)&v995, (uint64_t)v461, COERCE_DOUBLE(0x17D0000017CLL), dbl_224665BF8[0], v70, v71, v72, v73);
  v459[2] = v416;
  v459[3] = v417;
  v459[4] = v418;
  v460 = v419;
  v459[0] = v414;
  v459[1] = v415;
  v996 = 0x504050401000100;
  v468[0] = xmmword_224665C08;
  v468[1] = *(_OWORD *)dbl_224665C18;
  sub_223B26C48((uint64_t)v459, 7, 2, 7, (uint64_t)&v996, (uint64_t)v468, COERCE_DOUBLE(0x1340000017DLL), dbl_224665C18[0], v74, v75, v76, v77);
  v464 = v432;
  v465 = v433;
  v466 = v434;
  v467 = v435;
  v462 = v430;
  v463 = v431;
  v997 = 0x404040400000000;
  v471[0] = xmmword_224665C28;
  v471[1] = *(_OWORD *)dbl_224665C38;
  sub_223B26C48((uint64_t)&v462, 7, 3, 6, (uint64_t)&v997, (uint64_t)v471, COERCE_DOUBLE(0x17F0000017ELL), dbl_224665C38[0], v78, v79, v80, v81);
  v469[2] = v432;
  v469[3] = v433;
  v469[4] = v434;
  v470 = v435;
  v469[0] = v430;
  v469[1] = v431;
  v998 = 0x504050401000100;
  v474[0] = xmmword_224665C48;
  v474[1] = *(_OWORD *)dbl_224665C58;
  sub_223B26C48((uint64_t)v469, 7, 3, 7, (uint64_t)&v998, (uint64_t)v474, COERCE_DOUBLE(0x1360000017FLL), dbl_224665C58[0], v82, v83, v84, v85);
  v472[2] = v432;
  v472[3] = v433;
  v472[4] = v434;
  v473 = v435;
  v472[0] = v430;
  v472[1] = v431;
  v999 = 0;
  v477[0] = xmmword_224665C68;
  v477[1] = *(_OWORD *)dbl_224665C78;
  if ((v7 & 0x1000000000000) != 0)
    sub_223B26C48((uint64_t)v472, 4, 4, 0, (uint64_t)&v999, (uint64_t)v477, COERCE_DOUBLE(0x18100000180), dbl_224665C78[0], v86, v87, v88, v89);
  v475[2] = v448;
  v475[3] = v449;
  v475[4] = v450;
  v476 = v451;
  v475[0] = v446;
  v475[1] = v447;
  v1000 = 0;
  v484[0] = xmmword_224665C88;
  v484[1] = *(_OWORD *)dbl_224665C98;
  if ((v7 & 0x3000000000000) != 0)
    sub_223B26C48((uint64_t)v475, 4, 4, 1, (uint64_t)&v1000, (uint64_t)v484, COERCE_DOUBLE(0x18800000181), dbl_224665C98[0], v86, v87, v88, v89);
  v480 = v448;
  v481 = v449;
  v482 = v450;
  v483 = v451;
  v478 = v446;
  v479 = v447;
  v1001 = 0;
  v487[0] = xmmword_224665CA8;
  v487[1] = *(_OWORD *)dbl_224665CB8;
  if ((v7 & 0x5000000000000) != 0)
    sub_223B26C48((uint64_t)&v478, 4, 5, 0, (uint64_t)&v1001, (uint64_t)v487, COERCE_DOUBLE(0x18300000182), dbl_224665CB8[0], v86, v87, v88, v89);
  v485[2] = v448;
  v485[3] = v449;
  v485[4] = v450;
  v486 = v451;
  v485[0] = v446;
  v485[1] = v447;
  v1002 = 0;
  v490[0] = xmmword_224665CC8;
  v490[1] = *(_OWORD *)dbl_224665CD8;
  if ((v7 & 0xF000000000000) != 0)
    sub_223B26C48((uint64_t)v485, 4, 5, 1, (uint64_t)&v1002, (uint64_t)v490, COERCE_DOUBLE(0x18A00000183), dbl_224665CD8[0], v86, v87, v88, v89);
  v488[2] = v464;
  v488[3] = v465;
  v488[4] = v466;
  v489 = v467;
  v488[0] = v462;
  v488[1] = v463;
  v1003 = 0;
  v493[0] = xmmword_224665CE8;
  v493[1] = *(_OWORD *)dbl_224665CF8;
  if ((v7 & 0x11000000000000) != 0)
    sub_223B26C48((uint64_t)v488, 5, 4, 0, (uint64_t)&v1003, (uint64_t)v493, COERCE_DOUBLE(0x18500000184), dbl_224665CF8[0], v86, v87, v88, v89);
  v491[2] = v464;
  v491[3] = v465;
  v491[4] = v466;
  v492 = v467;
  v491[0] = v462;
  v491[1] = v463;
  v1004 = 0;
  v500[0] = xmmword_224665D08;
  v500[1] = *(_OWORD *)dbl_224665D18;
  if ((v7 & 0x33000000000000) != 0)
    sub_223B26C48((uint64_t)v491, 5, 4, 1, (uint64_t)&v1004, (uint64_t)v500, COERCE_DOUBLE(0x18C00000185), dbl_224665D18[0], v86, v87, v88, v89);
  v496 = v464;
  v497 = v465;
  v498 = v466;
  v499 = v467;
  v494 = v462;
  v495 = v463;
  v1005 = 0;
  v503[0] = xmmword_224665D28;
  v503[1] = *(_OWORD *)dbl_224665D38;
  if ((v7 & 0x55000000000000) != 0)
    sub_223B26C48((uint64_t)&v494, 5, 5, 0, (uint64_t)&v1005, (uint64_t)v503, COERCE_DOUBLE(0x18700000186), dbl_224665D38[0], v86, v87, v88, v89);
  v501[2] = v464;
  v501[3] = v465;
  v501[4] = v466;
  v502 = v467;
  v501[0] = v462;
  v501[1] = v463;
  v1006 = 0;
  v506[0] = xmmword_224665D48;
  v506[1] = *(_OWORD *)dbl_224665D58;
  if ((v7 & 0xFF000000000000) != 0)
    sub_223B26C48((uint64_t)v501, 5, 5, 1, (uint64_t)&v1006, (uint64_t)v506, COERCE_DOUBLE(0x18E00000187), dbl_224665D58[0], v86, v87, v88, v89);
  v504[2] = v464;
  v504[3] = v465;
  v504[4] = v466;
  v505 = v467;
  v504[0] = v462;
  v504[1] = v463;
  v1007 = 0;
  v509[0] = xmmword_224665D68;
  v509[1] = *(_OWORD *)dbl_224665D78;
  if ((v7 & 0x2000000000000) != 0)
    sub_223B26C48((uint64_t)v504, 4, 4, 2, (uint64_t)&v1007, (uint64_t)v509, COERCE_DOUBLE(0x18900000188), dbl_224665D78[0], v86, v87, v88, v89);
  v507[2] = v464;
  v507[3] = v465;
  v507[4] = v466;
  v508 = v467;
  v507[0] = v462;
  v507[1] = v463;
  v1008 = 0;
  v516[0] = xmmword_224665D88;
  v516[1] = *(_OWORD *)dbl_224665D98;
  if ((v7 & 0x102000000000000) != 0)
    sub_223B26C48((uint64_t)v507, 4, 4, 3, (uint64_t)&v1008, (uint64_t)v516, COERCE_DOUBLE(0x1C000000189), dbl_224665D98[0], v86, v87, v88, v89);
  v512 = v480;
  v513 = v481;
  v514 = v482;
  v515 = v483;
  v510 = v478;
  v511 = v479;
  v1009 = 0;
  v519[0] = xmmword_224665DA8;
  v519[1] = *(_OWORD *)dbl_224665DB8;
  if ((v7 & 0xA000000000000) != 0)
    sub_223B26C48((uint64_t)&v510, 4, 5, 2, (uint64_t)&v1009, (uint64_t)v519, COERCE_DOUBLE(0x18B0000018ALL), dbl_224665DB8[0], v86, v87, v88, v89);
  v517[2] = v480;
  v517[3] = v481;
  v517[4] = v482;
  v518 = v483;
  v517[0] = v478;
  v517[1] = v479;
  v1010 = 0;
  v522[0] = xmmword_224665DC8;
  v522[1] = *(_OWORD *)dbl_224665DD8;
  if ((v7 & 0x50A000000000000) != 0)
    sub_223B26C48((uint64_t)v517, 4, 5, 3, (uint64_t)&v1010, (uint64_t)v522, COERCE_DOUBLE(0x1C20000018BLL), dbl_224665DD8[0], v86, v87, v88, v89);
  v520[2] = v480;
  v520[3] = v481;
  v520[4] = v482;
  v521 = v483;
  v520[0] = v478;
  v520[1] = v479;
  v1011 = 0;
  v525[0] = xmmword_224665DE8;
  v525[1] = *(_OWORD *)dbl_224665DF8;
  if ((v7 & 0x22000000000000) != 0)
    sub_223B26C48((uint64_t)v520, 5, 4, 2, (uint64_t)&v1011, (uint64_t)v525, COERCE_DOUBLE(0x18D0000018CLL), dbl_224665DF8[0], v86, v87, v88, v89);
  v523[2] = v480;
  v523[3] = v481;
  v523[4] = v482;
  v524 = v483;
  v523[0] = v478;
  v523[1] = v479;
  v1012 = 0;
  v532[0] = xmmword_224665E08;
  v532[1] = *(_OWORD *)dbl_224665E18;
  if ((v7 & 0x1122000000000000) != 0)
    sub_223B26C48((uint64_t)v523, 5, 4, 3, (uint64_t)&v1012, (uint64_t)v532, COERCE_DOUBLE(0x1C40000018DLL), dbl_224665E18[0], v86, v87, v88, v89);
  v528 = v496;
  v529 = v497;
  v530 = v498;
  v531 = v499;
  v526 = v494;
  v527 = v495;
  v1013 = 0;
  v535[0] = xmmword_224665E28;
  v535[1] = *(_OWORD *)dbl_224665E38;
  if ((v7 & 0xAA000000000000) != 0)
    sub_223B26C48((uint64_t)&v526, 5, 5, 2, (uint64_t)&v1013, (uint64_t)v535, COERCE_DOUBLE(0x18F0000018ELL), dbl_224665E38[0], v86, v87, v88, v89);
  v533[2] = v496;
  v533[3] = v497;
  v533[4] = v498;
  v534 = v499;
  v533[0] = v494;
  v533[1] = v495;
  v1014 = 0;
  v538[0] = xmmword_224665E48;
  v538[1] = *(_OWORD *)dbl_224665E58;
  if ((v7 & 0x55AA000000000000) != 0)
    sub_223B26C48((uint64_t)v533, 5, 5, 3, (uint64_t)&v1014, (uint64_t)v538, COERCE_DOUBLE(0x1C60000018FLL), dbl_224665E58[0], v86, v87, v88, v89);
  v536[2] = v496;
  v536[3] = v497;
  v536[4] = v498;
  v537 = v499;
  v536[0] = v494;
  v536[1] = v495;
  v1015 = 0;
  v541[0] = xmmword_224665E68;
  v541[1] = *(_OWORD *)dbl_224665E78;
  if ((v7 & 0x4000000000000) != 0)
    sub_223B26C48((uint64_t)v536, 4, 6, 0, (uint64_t)&v1015, (uint64_t)v541, COERCE_DOUBLE(0x19100000190), dbl_224665E78[0], v86, v87, v88, v89);
  v539[2] = v496;
  v539[3] = v497;
  v539[4] = v498;
  v540 = v499;
  v539[0] = v494;
  v539[1] = v495;
  v1016 = 0;
  v548[0] = xmmword_224665E88;
  v548[1] = *(_OWORD *)dbl_224665E98;
  if ((v7 & 0xC000000000000) != 0)
    sub_223B26C48((uint64_t)v539, 4, 6, 1, (uint64_t)&v1016, (uint64_t)v548, COERCE_DOUBLE(0x19800000191), dbl_224665E98[0], v86, v87, v88, v89);
  v544 = v512;
  v545 = v513;
  v546 = v514;
  v547 = v515;
  v542 = v510;
  v543 = v511;
  v1017 = 0x202000002020000;
  v551[0] = xmmword_224665EA8;
  v551[1] = *(_OWORD *)dbl_224665EB8;
  sub_223B26C48((uint64_t)&v542, 4, 7, 0, (uint64_t)&v1017, (uint64_t)v551, COERCE_DOUBLE(0x19300000192), dbl_224665EB8[0], v86, v87, v88, v89);
  v549[2] = v512;
  v549[3] = v513;
  v549[4] = v514;
  v550 = v515;
  v549[0] = v510;
  v549[1] = v511;
  v1018 = 0x202000002020000;
  v554[0] = xmmword_224665EC8;
  v554[1] = *(_OWORD *)dbl_224665ED8;
  sub_223B26C48((uint64_t)v549, 4, 7, 1, (uint64_t)&v1018, (uint64_t)v554, COERCE_DOUBLE(0x19A00000193), dbl_224665ED8[0], v90, v91, v92, v93);
  v552[2] = v512;
  v552[3] = v513;
  v552[4] = v514;
  v553 = v515;
  v552[0] = v510;
  v552[1] = v511;
  v1019 = 0;
  v557[0] = xmmword_224665EE8;
  v557[1] = *(_OWORD *)dbl_224665EF8;
  if ((v7 & 0x44000000000000) != 0)
    sub_223B26C48((uint64_t)v552, 5, 6, 0, (uint64_t)&v1019, (uint64_t)v557, COERCE_DOUBLE(0x19500000194), dbl_224665EF8[0], v94, v95, v96, v97);
  v555[2] = v512;
  v555[3] = v513;
  v555[4] = v514;
  v556 = v515;
  v555[0] = v510;
  v555[1] = v511;
  v1020 = 0;
  v564[0] = xmmword_224665F08;
  v564[1] = *(_OWORD *)dbl_224665F18;
  if ((v7 & 0xCC000000000000) != 0)
    sub_223B26C48((uint64_t)v555, 5, 6, 1, (uint64_t)&v1020, (uint64_t)v564, COERCE_DOUBLE(0x19C00000195), dbl_224665F18[0], v94, v95, v96, v97);
  v560 = v528;
  v561 = v529;
  v562 = v530;
  v563 = v531;
  v558 = v526;
  v559 = v527;
  v1021 = 0x202000002020000;
  v567[0] = xmmword_224665F28;
  v567[1] = *(_OWORD *)dbl_224665F38;
  sub_223B26C48((uint64_t)&v558, 5, 7, 0, (uint64_t)&v1021, (uint64_t)v567, COERCE_DOUBLE(0x19700000196), dbl_224665F38[0], v94, v95, v96, v97);
  v565[2] = v528;
  v565[3] = v529;
  v565[4] = v530;
  v566 = v531;
  v565[0] = v526;
  v565[1] = v527;
  v1022 = 0x202000002020000;
  v570[0] = xmmword_224665F48;
  v570[1] = *(_OWORD *)dbl_224665F58;
  sub_223B26C48((uint64_t)v565, 5, 7, 1, (uint64_t)&v1022, (uint64_t)v570, COERCE_DOUBLE(0x19E00000197), dbl_224665F58[0], v98, v99, v100, v101);
  v568[2] = v528;
  v568[3] = v529;
  v568[4] = v530;
  v569 = v531;
  v568[0] = v526;
  v568[1] = v527;
  v1023 = 0;
  v573[0] = xmmword_224665F68;
  v573[1] = *(_OWORD *)dbl_224665F78;
  if ((v7 & 0x8000000000000) != 0)
    sub_223B26C48((uint64_t)v568, 4, 6, 2, (uint64_t)&v1023, (uint64_t)v573, COERCE_DOUBLE(0x19900000198), dbl_224665F78[0], v102, v103, v104, v105);
  v571[2] = v528;
  v571[3] = v529;
  v571[4] = v530;
  v572 = v531;
  v571[0] = v526;
  v571[1] = v527;
  v1024 = 0;
  v580[0] = xmmword_224665F88;
  v580[1] = *(_OWORD *)dbl_224665F98;
  if ((v7 & 0x408000000000000) != 0)
    sub_223B26C48((uint64_t)v571, 4, 6, 3, (uint64_t)&v1024, (uint64_t)v580, COERCE_DOUBLE(0x1D000000199), dbl_224665F98[0], v102, v103, v104, v105);
  v576 = v544;
  v577 = v545;
  v578 = v546;
  v579 = v547;
  v574 = v542;
  v575 = v543;
  v1025 = 0x202000002020000;
  v583[0] = xmmword_224665FA8;
  v583[1] = *(_OWORD *)dbl_224665FB8;
  sub_223B26C48((uint64_t)&v574, 4, 7, 2, (uint64_t)&v1025, (uint64_t)v583, COERCE_DOUBLE(0x19B0000019ALL), dbl_224665FB8[0], v102, v103, v104, v105);
  v581[2] = v544;
  v581[3] = v545;
  v581[4] = v546;
  v582 = v547;
  v581[0] = v542;
  v581[1] = v543;
  v1026 = 0x202000002020000;
  v586[0] = xmmword_224665FC8;
  v586[1] = *(_OWORD *)dbl_224665FD8;
  sub_223B26C48((uint64_t)v581, 4, 7, 3, (uint64_t)&v1026, (uint64_t)v586, COERCE_DOUBLE(0x1D20000019BLL), dbl_224665FD8[0], v106, v107, v108, v109);
  v584[2] = v544;
  v584[3] = v545;
  v584[4] = v546;
  v585 = v547;
  v584[0] = v542;
  v584[1] = v543;
  v1027 = 0;
  v589[0] = xmmword_224665FE8;
  v589[1] = *(_OWORD *)dbl_224665FF8;
  if ((v7 & 0x88000000000000) != 0)
    sub_223B26C48((uint64_t)v584, 5, 6, 2, (uint64_t)&v1027, (uint64_t)v589, COERCE_DOUBLE(0x19D0000019CLL), dbl_224665FF8[0], v110, v111, v112, v113);
  v587[2] = v544;
  v587[3] = v545;
  v587[4] = v546;
  v588 = v547;
  v587[0] = v542;
  v587[1] = v543;
  v1028 = 0;
  v596[0] = xmmword_224666008;
  v596[1] = *(_OWORD *)dbl_224666018;
  if ((v7 & 0x4488000000000000) != 0)
    sub_223B26C48((uint64_t)v587, 5, 6, 3, (uint64_t)&v1028, (uint64_t)v596, COERCE_DOUBLE(0x1D40000019DLL), dbl_224666018[0], v110, v111, v112, v113);
  v592 = v560;
  v593 = v561;
  v594 = v562;
  v595 = v563;
  v590 = v558;
  v591 = v559;
  v1029 = 0x202000002020000;
  v599[0] = xmmword_224666028;
  v599[1] = *(_OWORD *)dbl_224666038;
  sub_223B26C48((uint64_t)&v590, 5, 7, 2, (uint64_t)&v1029, (uint64_t)v599, COERCE_DOUBLE(0x19F0000019ELL), dbl_224666038[0], v110, v111, v112, v113);
  v597[2] = v560;
  v597[3] = v561;
  v597[4] = v562;
  v598 = v563;
  v597[0] = v558;
  v597[1] = v559;
  v1030 = 0x202000002020000;
  v602[0] = xmmword_224666048;
  v602[1] = *(_OWORD *)dbl_224666058;
  sub_223B26C48((uint64_t)v597, 5, 7, 3, (uint64_t)&v1030, (uint64_t)v602, COERCE_DOUBLE(0x1D60000019FLL), dbl_224666058[0], v114, v115, v116, v117);
  v600[2] = v560;
  v600[3] = v561;
  v600[4] = v562;
  v601 = v563;
  v600[0] = v558;
  v600[1] = v559;
  v1031 = 0;
  v605[0] = xmmword_224666068;
  v605[1] = *(_OWORD *)dbl_224666078;
  if ((v7 & 0x10000000000000) != 0)
    sub_223B26C48((uint64_t)v600, 6, 4, 0, (uint64_t)&v1031, (uint64_t)v605, COERCE_DOUBLE(0x1A1000001A0), dbl_224666078[0], v118, v119, v120, v121);
  v603[2] = v560;
  v603[3] = v561;
  v603[4] = v562;
  v604 = v563;
  v603[0] = v558;
  v603[1] = v559;
  v1032 = 0;
  v612[0] = xmmword_224666088;
  v612[1] = *(_OWORD *)dbl_224666098;
  if ((v7 & 0x30000000000000) != 0)
    sub_223B26C48((uint64_t)v603, 6, 4, 1, (uint64_t)&v1032, (uint64_t)v612, COERCE_DOUBLE(0x1A8000001A1), dbl_224666098[0], v118, v119, v120, v121);
  v608 = v576;
  v609 = v577;
  v610 = v578;
  v611 = v579;
  v606 = v574;
  v607 = v575;
  v1033 = 0;
  v615[0] = xmmword_2246660A8;
  v615[1] = *(_OWORD *)dbl_2246660B8;
  if ((v7 & 0x50000000000000) != 0)
    sub_223B26C48((uint64_t)&v606, 6, 5, 0, (uint64_t)&v1033, (uint64_t)v615, COERCE_DOUBLE(0x1A3000001A2), dbl_2246660B8[0], v118, v119, v120, v121);
  v613[2] = v576;
  v613[3] = v577;
  v613[4] = v578;
  v614 = v579;
  v613[0] = v574;
  v613[1] = v575;
  v1034 = 0;
  v618[0] = xmmword_2246660C8;
  v618[1] = *(_OWORD *)dbl_2246660D8;
  if ((v7 & 0xF0000000000000) != 0)
    sub_223B26C48((uint64_t)v613, 6, 5, 1, (uint64_t)&v1034, (uint64_t)v618, COERCE_DOUBLE(0x1AA000001A3), dbl_2246660D8[0], v118, v119, v120, v121);
  v616[2] = v576;
  v616[3] = v577;
  v616[4] = v578;
  v617 = v579;
  v616[0] = v574;
  v616[1] = v575;
  v1035 = 0x404040400000000;
  v621[0] = xmmword_2246660E8;
  v621[1] = *(_OWORD *)dbl_2246660F8;
  sub_223B26C48((uint64_t)v616, 7, 4, 0, (uint64_t)&v1035, (uint64_t)v621, COERCE_DOUBLE(0x1A5000001A4), dbl_2246660F8[0], v118, v119, v120, v121);
  v619[2] = v576;
  v619[3] = v577;
  v619[4] = v578;
  v620 = v579;
  v619[0] = v574;
  v619[1] = v575;
  v1036 = 0x404040400000000;
  v628[0] = xmmword_224666108;
  v628[1] = *(_OWORD *)dbl_224666118;
  sub_223B26C48((uint64_t)v619, 7, 4, 1, (uint64_t)&v1036, (uint64_t)v628, COERCE_DOUBLE(0x1AC000001A5), dbl_224666118[0], v122, v123, v124, v125);
  v624 = v576;
  v625 = v577;
  v626 = v578;
  v627 = v579;
  v622 = v574;
  v623 = v575;
  v1037 = 0x404040400000000;
  v631[0] = xmmword_224666128;
  v631[1] = *(_OWORD *)dbl_224666138;
  sub_223B26C48((uint64_t)&v622, 7, 5, 0, (uint64_t)&v1037, (uint64_t)v631, COERCE_DOUBLE(0x1A7000001A6), dbl_224666138[0], v126, v127, v128, v129);
  v629[2] = v592;
  v629[3] = v593;
  v629[4] = v594;
  v630 = v595;
  v629[0] = v590;
  v629[1] = v591;
  v1038 = 0x404040400000000;
  v634[0] = xmmword_224666148;
  v634[1] = *(_OWORD *)dbl_224666158;
  sub_223B26C48((uint64_t)v629, 7, 5, 1, (uint64_t)&v1038, (uint64_t)v634, COERCE_DOUBLE(0x1AE000001A7), dbl_224666158[0], v130, v131, v132, v133);
  v632[2] = v592;
  v632[3] = v593;
  v632[4] = v594;
  v633 = v595;
  v632[0] = v590;
  v632[1] = v591;
  v1039 = 0;
  v637[0] = xmmword_224666168;
  v637[1] = *(_OWORD *)dbl_224666178;
  if ((v7 & 0x20000000000000) != 0)
    sub_223B26C48((uint64_t)v632, 6, 4, 2, (uint64_t)&v1039, (uint64_t)v637, COERCE_DOUBLE(0x1A9000001A8), dbl_224666178[0], v134, v135, v136, v137);
  v635[2] = v592;
  v635[3] = v593;
  v635[4] = v594;
  v636 = v595;
  v635[0] = v590;
  v635[1] = v591;
  v1040 = 0;
  v644[0] = xmmword_224666188;
  v644[1] = *(_OWORD *)dbl_224666198;
  if ((v7 & 0x1020000000000000) != 0)
    sub_223B26C48((uint64_t)v635, 6, 4, 3, (uint64_t)&v1040, (uint64_t)v644, COERCE_DOUBLE(0x1E0000001A9), dbl_224666198[0], v134, v135, v136, v137);
  v640 = v608;
  v641 = v609;
  v642 = v610;
  v643 = v611;
  v638 = v606;
  v639 = v607;
  v1041 = 0;
  v647[0] = xmmword_2246661A8;
  v647[1] = *(_OWORD *)dbl_2246661B8;
  if ((v7 & 0xA0000000000000) != 0)
    sub_223B26C48((uint64_t)&v638, 6, 5, 2, (uint64_t)&v1041, (uint64_t)v647, COERCE_DOUBLE(0x1AB000001AALL), dbl_2246661B8[0], v134, v135, v136, v137);
  v645[2] = v608;
  v645[3] = v609;
  v645[4] = v610;
  v646 = v611;
  v645[0] = v606;
  v645[1] = v607;
  v1042 = 0;
  v650[0] = xmmword_2246661C8;
  v650[1] = *(_OWORD *)dbl_2246661D8;
  if ((v7 & 0x50A0000000000000) != 0)
    sub_223B26C48((uint64_t)v645, 6, 5, 3, (uint64_t)&v1042, (uint64_t)v650, COERCE_DOUBLE(0x1E2000001ABLL), dbl_2246661D8[0], v134, v135, v136, v137);
  v648[2] = v608;
  v648[3] = v609;
  v648[4] = v610;
  v649 = v611;
  v648[0] = v606;
  v648[1] = v607;
  v1043 = 0x404040400000000;
  v653[0] = xmmword_2246661E8;
  v653[1] = *(_OWORD *)dbl_2246661F8;
  sub_223B26C48((uint64_t)v648, 7, 4, 2, (uint64_t)&v1043, (uint64_t)v653, COERCE_DOUBLE(0x1AD000001ACLL), dbl_2246661F8[0], v134, v135, v136, v137);
  v651[2] = v624;
  v651[3] = v625;
  v651[4] = v626;
  v652 = v627;
  v651[0] = v622;
  v651[1] = v623;
  v1044 = 0x404040400000000;
  v660[0] = xmmword_224666208;
  v660[1] = *(_OWORD *)dbl_224666218;
  sub_223B26C48((uint64_t)v651, 7, 4, 3, (uint64_t)&v1044, (uint64_t)v660, COERCE_DOUBLE(0x1E4000001ADLL), dbl_224666218[0], v138, v139, v140, v141);
  v656 = v624;
  v657 = v625;
  v658 = v626;
  v659 = v627;
  v654 = v622;
  v655 = v623;
  v1045 = 0x404040400000000;
  v663[0] = xmmword_224666228;
  v663[1] = *(_OWORD *)dbl_224666238;
  sub_223B26C48((uint64_t)&v654, 7, 5, 2, (uint64_t)&v1045, (uint64_t)v663, COERCE_DOUBLE(0x1AF000001AELL), dbl_224666238[0], v142, v143, v144, v145);
  v661[2] = v624;
  v661[3] = v625;
  v661[4] = v626;
  v662 = v627;
  v661[0] = v622;
  v661[1] = v623;
  v1046 = 0x404040400000000;
  v666[0] = xmmword_224666248;
  v666[1] = *(_OWORD *)dbl_224666258;
  sub_223B26C48((uint64_t)v661, 7, 5, 3, (uint64_t)&v1046, (uint64_t)v666, COERCE_DOUBLE(0x1E6000001AFLL), dbl_224666258[0], v146, v147, v148, v149);
  v664[2] = v624;
  v664[3] = v625;
  v664[4] = v626;
  v665 = v627;
  v664[0] = v622;
  v664[1] = v623;
  v1047 = 0;
  v669[0] = xmmword_224666268;
  v669[1] = *(_OWORD *)dbl_224666278;
  if ((v7 & 0x40000000000000) != 0)
    sub_223B26C48((uint64_t)v664, 6, 6, 0, (uint64_t)&v1047, (uint64_t)v669, COERCE_DOUBLE(0x1B1000001B0), dbl_224666278[0], v150, v151, v152, v153);
  v667[2] = v624;
  v667[3] = v625;
  v667[4] = v626;
  v668 = v627;
  v667[0] = v622;
  v667[1] = v623;
  v1048 = 0;
  v676[0] = xmmword_224666288;
  v676[1] = *(_OWORD *)dbl_224666298;
  if ((v7 & 0xC0000000000000) != 0)
    sub_223B26C48((uint64_t)v667, 6, 6, 1, (uint64_t)&v1048, (uint64_t)v676, COERCE_DOUBLE(0x1B8000001B1), dbl_224666298[0], v150, v151, v152, v153);
  v672 = v640;
  v673 = v641;
  v674 = v642;
  v675 = v643;
  v670 = v638;
  v671 = v639;
  v1049 = 0x202000002020000;
  v679[0] = xmmword_2246662A8;
  v679[1] = *(_OWORD *)dbl_2246662B8;
  sub_223B26C48((uint64_t)&v670, 6, 7, 0, (uint64_t)&v1049, (uint64_t)v679, COERCE_DOUBLE(0x1B3000001B2), dbl_2246662B8[0], v150, v151, v152, v153);
  v677[2] = v640;
  v677[3] = v641;
  v677[4] = v642;
  v678 = v643;
  v677[0] = v638;
  v677[1] = v639;
  v1050 = 0x202000002020000;
  v682[0] = xmmword_2246662C8;
  v682[1] = *(_OWORD *)dbl_2246662D8;
  sub_223B26C48((uint64_t)v677, 6, 7, 1, (uint64_t)&v1050, (uint64_t)v682, COERCE_DOUBLE(0x1BA000001B3), dbl_2246662D8[0], v154, v155, v156, v157);
  v680[2] = v640;
  v680[3] = v641;
  v680[4] = v642;
  v681 = v643;
  v680[0] = v638;
  v680[1] = v639;
  v1051 = 0x404040400000000;
  v685[0] = xmmword_2246662E8;
  v685[1] = *(_OWORD *)dbl_2246662F8;
  sub_223B26C48((uint64_t)v680, 7, 6, 0, (uint64_t)&v1051, (uint64_t)v685, COERCE_DOUBLE(0x1B5000001B4), dbl_2246662F8[0], v158, v159, v160, v161);
  v683[2] = v640;
  v683[3] = v641;
  v683[4] = v642;
  v684 = v643;
  v683[0] = v638;
  v683[1] = v639;
  v1052 = 0x404040400000000;
  v692[0] = xmmword_224666308;
  v692[1] = *(_OWORD *)dbl_224666318;
  sub_223B26C48((uint64_t)v683, 7, 6, 1, (uint64_t)&v1052, (uint64_t)v692, COERCE_DOUBLE(0x1BC000001B5), dbl_224666318[0], v162, v163, v164, v165);
  v688 = v640;
  v689 = v641;
  v690 = v642;
  v691 = v643;
  v686 = v638;
  v687 = v639;
  v1053 = 0x606040402020000;
  v695[0] = xmmword_224666328;
  v695[1] = *(_OWORD *)dbl_224666338;
  sub_223B26C48((uint64_t)&v686, 7, 7, 0, (uint64_t)&v1053, (uint64_t)v695, COERCE_DOUBLE(0x1B7000001B6), dbl_224666338[0], v166, v167, v168, v169);
  v693[2] = v656;
  v693[3] = v657;
  v693[4] = v658;
  v694 = v659;
  v693[0] = v654;
  v693[1] = v655;
  v1054 = 0x606040402020000;
  v698[0] = xmmword_224666348;
  v698[1] = *(_OWORD *)dbl_224666358;
  sub_223B26C48((uint64_t)v693, 7, 7, 1, (uint64_t)&v1054, (uint64_t)v698, COERCE_DOUBLE(0x1BE000001B7), dbl_224666358[0], v170, v171, v172, v173);
  v696[2] = v656;
  v696[3] = v657;
  v696[4] = v658;
  v697 = v659;
  v696[0] = v654;
  v696[1] = v655;
  v1055 = 0;
  v701[0] = xmmword_224666368;
  v701[1] = *(_OWORD *)dbl_224666378;
  if ((v7 & 0x80000000000000) != 0)
    sub_223B26C48((uint64_t)v696, 6, 6, 2, (uint64_t)&v1055, (uint64_t)v701, COERCE_DOUBLE(0x1B9000001B8), dbl_224666378[0], v174, v175, v176, v177);
  v699[2] = v656;
  v699[3] = v657;
  v699[4] = v658;
  v700 = v659;
  v699[0] = v654;
  v699[1] = v655;
  v1056 = 0;
  v708[0] = xmmword_224666388;
  v708[1] = *(_OWORD *)dbl_224666398;
  if ((v7 & 0x4080000000000000) != 0)
    sub_223B26C48((uint64_t)v699, 6, 6, 3, (uint64_t)&v1056, (uint64_t)v708, COERCE_DOUBLE(0x1F0000001B9), dbl_224666398[0], v174, v175, v176, v177);
  v704 = v672;
  v705 = v673;
  v706 = v674;
  v707 = v675;
  v702 = v670;
  v703 = v671;
  v1057 = 0x202000002020000;
  v711[0] = xmmword_2246663A8;
  v711[1] = *(_OWORD *)dbl_2246663B8;
  sub_223B26C48((uint64_t)&v702, 6, 7, 2, (uint64_t)&v1057, (uint64_t)v711, COERCE_DOUBLE(0x1BB000001BALL), dbl_2246663B8[0], v174, v175, v176, v177);
  v709[2] = v672;
  v709[3] = v673;
  v709[4] = v674;
  v710 = v675;
  v709[0] = v670;
  v709[1] = v671;
  v1058 = 0x202000002020000;
  v714[0] = xmmword_2246663C8;
  v714[1] = *(_OWORD *)dbl_2246663D8;
  sub_223B26C48((uint64_t)v709, 6, 7, 3, (uint64_t)&v1058, (uint64_t)v714, COERCE_DOUBLE(0x1F2000001BBLL), dbl_2246663D8[0], v178, v179, v180, v181);
  v712[2] = v672;
  v712[3] = v673;
  v712[4] = v674;
  v713 = v675;
  v712[0] = v670;
  v712[1] = v671;
  v1059 = 0x404040400000000;
  v717[0] = xmmword_2246663E8;
  v717[1] = *(_OWORD *)dbl_2246663F8;
  sub_223B26C48((uint64_t)v712, 7, 6, 2, (uint64_t)&v1059, (uint64_t)v717, COERCE_DOUBLE(0x1BD000001BCLL), dbl_2246663F8[0], v182, v183, v184, v185);
  v715[2] = v688;
  v715[3] = v689;
  v715[4] = v690;
  v716 = v691;
  v715[0] = v686;
  v715[1] = v687;
  v1060 = 0x404040400000000;
  v720[0] = xmmword_224666408;
  v720[1] = *(_OWORD *)dbl_224666418;
  sub_223B26C48((uint64_t)v715, 7, 6, 3, (uint64_t)&v1060, (uint64_t)v720, COERCE_DOUBLE(0x1F4000001BDLL), dbl_224666418[0], v186, v187, v188, v189);
  v718[2] = v688;
  v718[3] = v689;
  v718[4] = v690;
  v719 = v691;
  v718[0] = v686;
  v718[1] = v687;
  v1061 = 0x606040402020000;
  v727[0] = xmmword_224666428;
  v727[1] = *(_OWORD *)dbl_224666438;
  sub_223B26C48((uint64_t)v718, 7, 7, 2, (uint64_t)&v1061, (uint64_t)v727, COERCE_DOUBLE(0x1BF000001BELL), dbl_224666438[0], v190, v191, v192, v193);
  v723 = v688;
  v724 = v689;
  v725 = v690;
  v726 = v691;
  v721 = v686;
  v722 = v687;
  v1062 = 0x606040402020000;
  v730[0] = xmmword_224666448;
  v730[1] = *(_OWORD *)dbl_224666458;
  sub_223B26C48((uint64_t)&v721, 7, 7, 3, (uint64_t)&v1062, (uint64_t)v730, COERCE_DOUBLE(0x1F6000001BFLL), dbl_224666458[0], v194, v195, v196, v197);
  v728[2] = v688;
  v728[3] = v689;
  v728[4] = v690;
  v729 = v691;
  v728[0] = v686;
  v728[1] = v687;
  v1063 = 0;
  v733[0] = xmmword_224666468;
  v733[1] = *(_OWORD *)dbl_224666478;
  if ((v7 & 0x100000000000000) != 0)
    sub_223B26C48((uint64_t)v728, 4, 4, 4, (uint64_t)&v1063, (uint64_t)v733, COERCE_DOUBLE(0x1C1000001C0), dbl_224666478[0], v198, v199, v200, v201);
  v731[2] = v688;
  v731[3] = v689;
  v731[4] = v690;
  v732 = v691;
  v731[0] = v686;
  v731[1] = v687;
  v1064 = 0;
  v736[0] = xmmword_224666488;
  v736[1] = *(_OWORD *)dbl_224666498;
  if ((v7 & 0x300000000000000) != 0)
    sub_223B26C48((uint64_t)v731, 4, 4, 5, (uint64_t)&v1064, (uint64_t)v736, COERCE_DOUBLE(0x1C8000001C1), dbl_224666498[0], v198, v199, v200, v201);
  v734[2] = v704;
  v734[3] = v705;
  v734[4] = v706;
  v735 = v707;
  v734[0] = v702;
  v734[1] = v703;
  v1065 = 0;
  v739[0] = xmmword_2246664A8;
  v739[1] = *(_OWORD *)dbl_2246664B8;
  if ((v7 & 0x500000000000000) != 0)
    sub_223B26C48((uint64_t)v734, 4, 5, 4, (uint64_t)&v1065, (uint64_t)v739, COERCE_DOUBLE(0x1C3000001C2), dbl_2246664B8[0], v198, v199, v200, v201);
  v737[2] = v704;
  v737[3] = v705;
  v737[4] = v706;
  v738 = v707;
  v737[0] = v702;
  v737[1] = v703;
  v1066 = 0;
  v742[0] = xmmword_2246664C8;
  v742[1] = *(_OWORD *)dbl_2246664D8;
  if ((v7 & 0xF00000000000000) != 0)
    sub_223B26C48((uint64_t)v737, 4, 5, 5, (uint64_t)&v1066, (uint64_t)v742, COERCE_DOUBLE(0x1CA000001C3), dbl_2246664D8[0], v198, v199, v200, v201);
  v740[2] = v723;
  v740[3] = v724;
  v740[4] = v725;
  v741 = v726;
  v740[0] = v721;
  v740[1] = v722;
  v1067 = 0;
  v745[0] = xmmword_2246664E8;
  v745[1] = *(_OWORD *)dbl_2246664F8;
  if ((v7 & 0x1100000000000000) != 0)
    sub_223B26C48((uint64_t)v740, 5, 4, 4, (uint64_t)&v1067, (uint64_t)v745, COERCE_DOUBLE(0x1C5000001C4), dbl_2246664F8[0], v198, v199, v200, v201);
  v743[2] = v723;
  v743[3] = v724;
  v743[4] = v725;
  v744 = v726;
  v743[0] = v721;
  v743[1] = v722;
  v1068 = 0;
  v748[0] = xmmword_224666508;
  v748[1] = *(_OWORD *)dbl_224666518;
  if ((v7 & 0x3300000000000000) != 0)
    sub_223B26C48((uint64_t)v743, 5, 4, 5, (uint64_t)&v1068, (uint64_t)v748, COERCE_DOUBLE(0x1CC000001C5), dbl_224666518[0], v198, v199, v200, v201);
  v746[2] = v723;
  v746[3] = v724;
  v746[4] = v725;
  v747 = v726;
  v746[0] = v721;
  v746[1] = v722;
  v1069 = 0;
  v755[0] = xmmword_224666528;
  v755[1] = *(_OWORD *)dbl_224666538;
  if ((v7 & 0x5500000000000000) != 0)
  {
    sub_223B26C48((uint64_t)v746, 5, 5, 4, (uint64_t)&v1069, (uint64_t)v755, COERCE_DOUBLE(0x1C7000001C6), dbl_224666538[0], v198, v199, v200, v201);
    v751 = v723;
    v752 = v724;
    v753 = v725;
    v754 = v726;
    v749 = v721;
    v750 = v722;
    v1070 = 0;
    v202 = dbl_224666558[0];
    v758 = xmmword_224666548;
    v759 = *(_OWORD *)dbl_224666558;
  }
  else
  {
    v751 = v723;
    v752 = v724;
    v753 = v725;
    v754 = v726;
    v749 = v721;
    v750 = v722;
    v1070 = 0;
    v202 = dbl_224666558[0];
    v758 = xmmword_224666548;
    v759 = *(_OWORD *)dbl_224666558;
    if (!HIBYTE(v7))
      goto LABEL_111;
  }
  sub_223B26C48((uint64_t)&v749, 5, 5, 5, (uint64_t)&v1070, (uint64_t)&v758, COERCE_DOUBLE(0x1CE000001C7), v202, v198, v199, v200, v201);
LABEL_111:
  v756[2] = v751;
  v756[3] = v752;
  v756[4] = v753;
  v757 = v754;
  v756[0] = v749;
  v756[1] = v750;
  v1071 = 0;
  v762[0] = xmmword_224666568;
  v762[1] = *(_OWORD *)dbl_224666578;
  if ((v7 & 0x200000000000000) != 0)
    sub_223B26C48((uint64_t)v756, 4, 4, 6, (uint64_t)&v1071, (uint64_t)v762, COERCE_DOUBLE(0x1C9000001C8), dbl_224666578[0], v198, v199, v200, v201);
  v760[2] = v751;
  v760[3] = v752;
  v760[4] = v753;
  v761 = v754;
  v760[0] = v749;
  v760[1] = v750;
  v1072 = 0x100010001000100;
  v769[0] = xmmword_224666588;
  v769[1] = *(_OWORD *)dbl_224666598;
  sub_223B26C48((uint64_t)v760, 4, 4, 7, (uint64_t)&v1072, (uint64_t)v769, COERCE_DOUBLE(0x180000001C9), dbl_224666598[0], v198, v199, v200, v201);
  v765 = v751;
  v766 = v752;
  v767 = v753;
  v768 = v754;
  v763 = v749;
  v764 = v750;
  v1073 = 0;
  v772[0] = xmmword_2246665A8;
  v772[1] = *(_OWORD *)dbl_2246665B8;
  if ((v7 & 0xA00000000000000) != 0)
    sub_223B26C48((uint64_t)&v763, 4, 5, 6, (uint64_t)&v1073, (uint64_t)v772, COERCE_DOUBLE(0x1CB000001CALL), dbl_2246665B8[0], v203, v204, v205, v206);
  v770[2] = v751;
  v770[3] = v752;
  v770[4] = v753;
  v771 = v754;
  v770[0] = v749;
  v770[1] = v750;
  v1074 = 0x100010001000100;
  v775[0] = xmmword_2246665C8;
  v775[1] = *(_OWORD *)dbl_2246665D8;
  sub_223B26C48((uint64_t)v770, 4, 5, 7, (uint64_t)&v1074, (uint64_t)v775, COERCE_DOUBLE(0x182000001CBLL), dbl_2246665D8[0], v203, v204, v205, v206);
  v773[2] = v751;
  v773[3] = v752;
  v773[4] = v753;
  v774 = v754;
  v773[0] = v749;
  v773[1] = v750;
  v1075 = 0;
  v778[0] = xmmword_2246665E8;
  v778[1] = *(_OWORD *)dbl_2246665F8;
  if ((v7 & 0x2200000000000000) != 0)
    sub_223B26C48((uint64_t)v773, 5, 4, 6, (uint64_t)&v1075, (uint64_t)v778, COERCE_DOUBLE(0x1CD000001CCLL), dbl_2246665F8[0], v207, v208, v209, v210);
  v776[2] = v751;
  v776[3] = v752;
  v776[4] = v753;
  v777 = v754;
  v776[0] = v749;
  v776[1] = v750;
  v1076 = 0x100010001000100;
  v785[0] = xmmword_224666608;
  v785[1] = *(_OWORD *)dbl_224666618;
  sub_223B26C48((uint64_t)v776, 5, 4, 7, (uint64_t)&v1076, (uint64_t)v785, COERCE_DOUBLE(0x184000001CDLL), dbl_224666618[0], v207, v208, v209, v210);
  v781 = v751;
  v782 = v752;
  v783 = v753;
  v784 = v754;
  v779 = v749;
  v780 = v750;
  v1077 = 0;
  v788[0] = xmmword_224666628;
  v788[1] = *(_OWORD *)dbl_224666638;
  if ((v7 & 0xAA00000000000000) != 0)
    sub_223B26C48((uint64_t)&v779, 5, 5, 6, (uint64_t)&v1077, (uint64_t)v788, COERCE_DOUBLE(0x1CF000001CELL), dbl_224666638[0], v211, v212, v213, v214);
  v786[2] = v751;
  v786[3] = v752;
  v786[4] = v753;
  v787 = v754;
  v786[0] = v749;
  v786[1] = v750;
  v1078 = 0x100010001000100;
  v791[0] = xmmword_224666648;
  v791[1] = *(_OWORD *)dbl_224666658;
  sub_223B26C48((uint64_t)v786, 5, 5, 7, (uint64_t)&v1078, (uint64_t)v791, COERCE_DOUBLE(0x186000001CFLL), dbl_224666658[0], v211, v212, v213, v214);
  v789[2] = v751;
  v789[3] = v752;
  v789[4] = v753;
  v790 = v754;
  v789[0] = v749;
  v789[1] = v750;
  v1079 = 0;
  v794[0] = xmmword_224666668;
  v794[1] = *(_OWORD *)dbl_224666678;
  if ((v7 & 0x400000000000000) != 0)
    sub_223B26C48((uint64_t)v789, 4, 6, 4, (uint64_t)&v1079, (uint64_t)v794, COERCE_DOUBLE(0x1D1000001D0), dbl_224666678[0], v215, v216, v217, v218);
  v792[2] = v765;
  v792[3] = v766;
  v792[4] = v767;
  v793 = v768;
  v792[0] = v763;
  v792[1] = v764;
  v1080 = 0;
  v801[0] = xmmword_224666688;
  v801[1] = *(_OWORD *)dbl_224666698;
  if ((v7 & 0xC00000000000000) != 0)
    sub_223B26C48((uint64_t)v792, 4, 6, 5, (uint64_t)&v1080, (uint64_t)v801, COERCE_DOUBLE(0x1D8000001D1), dbl_224666698[0], v215, v216, v217, v218);
  v797 = v765;
  v798 = v766;
  v799 = v767;
  v800 = v768;
  v795 = v763;
  v796 = v764;
  v1081 = 0x202000002020000;
  v804[0] = xmmword_2246666A8;
  v804[1] = *(_OWORD *)dbl_2246666B8;
  sub_223B26C48((uint64_t)&v795, 4, 7, 4, (uint64_t)&v1081, (uint64_t)v804, COERCE_DOUBLE(0x1D3000001D2), dbl_2246666B8[0], v215, v216, v217, v218);
  v802[2] = v765;
  v802[3] = v766;
  v802[4] = v767;
  v803 = v768;
  v802[0] = v763;
  v802[1] = v764;
  v1082 = 0x202000002020000;
  v807[0] = xmmword_2246666C8;
  v807[1] = *(_OWORD *)dbl_2246666D8;
  sub_223B26C48((uint64_t)v802, 4, 7, 5, (uint64_t)&v1082, (uint64_t)v807, COERCE_DOUBLE(0x1DA000001D3), dbl_2246666D8[0], v219, v220, v221, v222);
  v805[2] = v765;
  v805[3] = v766;
  v805[4] = v767;
  v806 = v768;
  v805[0] = v763;
  v805[1] = v764;
  v1083 = 0;
  v810[0] = xmmword_2246666E8;
  v810[1] = *(_OWORD *)dbl_2246666F8;
  if ((v7 & 0x4400000000000000) != 0)
    sub_223B26C48((uint64_t)v805, 5, 6, 4, (uint64_t)&v1083, (uint64_t)v810, COERCE_DOUBLE(0x1D5000001D4), dbl_2246666F8[0], v223, v224, v225, v226);
  v808[2] = v781;
  v808[3] = v782;
  v808[4] = v783;
  v809 = v784;
  v808[0] = v779;
  v808[1] = v780;
  v1084 = 0;
  v817[0] = xmmword_224666708;
  v817[1] = *(_OWORD *)dbl_224666718;
  if ((v7 & 0xCC00000000000000) != 0)
    sub_223B26C48((uint64_t)v808, 5, 6, 5, (uint64_t)&v1084, (uint64_t)v817, COERCE_DOUBLE(0x1DC000001D5), dbl_224666718[0], v223, v224, v225, v226);
  v813 = v781;
  v814 = v782;
  v815 = v783;
  v816 = v784;
  v811 = v779;
  v812 = v780;
  v1085 = 0x202000002020000;
  v820[0] = xmmword_224666728;
  v820[1] = *(_OWORD *)dbl_224666738;
  sub_223B26C48((uint64_t)&v811, 5, 7, 4, (uint64_t)&v1085, (uint64_t)v820, COERCE_DOUBLE(0x1D7000001D6), dbl_224666738[0], v223, v224, v225, v226);
  v818[2] = v781;
  v818[3] = v782;
  v818[4] = v783;
  v819 = v784;
  v818[0] = v779;
  v818[1] = v780;
  v1086 = 0x202000002020000;
  v823[0] = xmmword_224666748;
  v823[1] = *(_OWORD *)dbl_224666758;
  sub_223B26C48((uint64_t)v818, 5, 7, 5, (uint64_t)&v1086, (uint64_t)v823, COERCE_DOUBLE(0x1DE000001D7), dbl_224666758[0], v227, v228, v229, v230);
  v821[2] = v781;
  v821[3] = v782;
  v821[4] = v783;
  v822 = v784;
  v821[0] = v779;
  v821[1] = v780;
  v1087 = 0;
  v826[0] = xmmword_224666768;
  v826[1] = *(_OWORD *)dbl_224666778;
  if ((v7 & 0x800000000000000) != 0)
    sub_223B26C48((uint64_t)v821, 4, 6, 6, (uint64_t)&v1087, (uint64_t)v826, COERCE_DOUBLE(0x1D9000001D8), dbl_224666778[0], v231, v232, v233, v234);
  v824[2] = v781;
  v824[3] = v782;
  v824[4] = v783;
  v825 = v784;
  v824[0] = v779;
  v824[1] = v780;
  v1088 = 0x100010001000100;
  v833[0] = xmmword_224666788;
  v833[1] = *(_OWORD *)dbl_224666798;
  sub_223B26C48((uint64_t)v824, 4, 6, 7, (uint64_t)&v1088, (uint64_t)v833, COERCE_DOUBLE(0x190000001D9), dbl_224666798[0], v231, v232, v233, v234);
  v829 = v797;
  v830 = v798;
  v831 = v799;
  v832 = v800;
  v827 = v795;
  v828 = v796;
  v1089 = 0x202000002020000;
  v836[0] = xmmword_2246667A8;
  v836[1] = *(_OWORD *)dbl_2246667B8;
  sub_223B26C48((uint64_t)&v827, 4, 7, 6, (uint64_t)&v1089, (uint64_t)v836, COERCE_DOUBLE(0x1DB000001DALL), dbl_2246667B8[0], v235, v236, v237, v238);
  v834[2] = v797;
  v834[3] = v798;
  v834[4] = v799;
  v835 = v800;
  v834[0] = v795;
  v834[1] = v796;
  v1090 = 0x302010003020100;
  v839[0] = xmmword_2246667C8;
  v839[1] = *(_OWORD *)dbl_2246667D8;
  sub_223B26C48((uint64_t)v834, 4, 7, 7, (uint64_t)&v1090, (uint64_t)v839, COERCE_DOUBLE(0x192000001DBLL), dbl_2246667D8[0], v239, v240, v241, v242);
  v837[2] = v797;
  v837[3] = v798;
  v837[4] = v799;
  v838 = v800;
  v837[0] = v795;
  v837[1] = v796;
  v1091 = 0;
  v842[0] = xmmword_2246667E8;
  v842[1] = *(_OWORD *)dbl_2246667F8;
  if ((v7 & 0x8800000000000000) != 0)
    sub_223B26C48((uint64_t)v837, 5, 6, 6, (uint64_t)&v1091, (uint64_t)v842, COERCE_DOUBLE(0x1DD000001DCLL), dbl_2246667F8[0], v243, v244, v245, v246);
  v840[2] = v797;
  v840[3] = v798;
  v840[4] = v799;
  v841 = v800;
  v840[0] = v795;
  v840[1] = v796;
  v1092 = 0x100010001000100;
  v845[0] = xmmword_224666808;
  v845[1] = *(_OWORD *)dbl_224666818;
  sub_223B26C48((uint64_t)v840, 5, 6, 7, (uint64_t)&v1092, (uint64_t)v845, COERCE_DOUBLE(0x194000001DDLL), dbl_224666818[0], v243, v244, v245, v246);
  v843[2] = v813;
  v843[3] = v814;
  v843[4] = v815;
  v844 = v816;
  v843[0] = v811;
  v843[1] = v812;
  v1093 = 0x202000002020000;
  v848[0] = xmmword_224666828;
  v848[1] = *(_OWORD *)dbl_224666838;
  sub_223B26C48((uint64_t)v843, 5, 7, 6, (uint64_t)&v1093, (uint64_t)v848, COERCE_DOUBLE(0x1DF000001DELL), dbl_224666838[0], v247, v248, v249, v250);
  v846[2] = v813;
  v846[3] = v814;
  v846[4] = v815;
  v847 = v816;
  v846[0] = v811;
  v846[1] = v812;
  v1094 = 0x302010003020100;
  v851[0] = xmmword_224666848;
  v851[1] = *(_OWORD *)dbl_224666858;
  sub_223B26C48((uint64_t)v846, 5, 7, 7, (uint64_t)&v1094, (uint64_t)v851, COERCE_DOUBLE(0x196000001DFLL), dbl_224666858[0], v251, v252, v253, v254);
  v849[2] = v813;
  v849[3] = v814;
  v849[4] = v815;
  v850 = v816;
  v849[0] = v811;
  v849[1] = v812;
  v1095 = 0;
  v854[0] = xmmword_224666868;
  v854[1] = *(_OWORD *)dbl_224666878;
  if ((v7 & 0x1000000000000000) != 0)
    sub_223B26C48((uint64_t)v849, 6, 4, 4, (uint64_t)&v1095, (uint64_t)v854, COERCE_DOUBLE(0x1E1000001E0), dbl_224666878[0], v255, v256, v257, v258);
  v852[2] = v829;
  v852[3] = v830;
  v852[4] = v831;
  v853 = v832;
  v852[0] = v827;
  v852[1] = v828;
  v1096 = 0;
  v857[0] = xmmword_224666888;
  v857[1] = *(_OWORD *)dbl_224666898;
  if ((v7 & 0x3000000000000000) != 0)
    sub_223B26C48((uint64_t)v852, 6, 4, 5, (uint64_t)&v1096, (uint64_t)v857, COERCE_DOUBLE(0x1E8000001E1), dbl_224666898[0], v255, v256, v257, v258);
  v855[2] = v829;
  v855[3] = v830;
  v855[4] = v831;
  v856 = v832;
  v855[0] = v827;
  v855[1] = v828;
  v1097 = 0;
  v864[0] = xmmword_2246668A8;
  v864[1] = *(_OWORD *)dbl_2246668B8;
  if ((v7 & 0x5000000000000000) != 0)
  {
    sub_223B26C48((uint64_t)v855, 6, 5, 4, (uint64_t)&v1097, (uint64_t)v864, COERCE_DOUBLE(0x1E3000001E2), dbl_2246668B8[0], v255, v256, v257, v258);
    v860 = v829;
    v861 = v830;
    v862 = v831;
    v863 = v832;
    v858 = v827;
    v859 = v828;
    v1098 = 0;
    v259 = dbl_2246668D8[0];
    v867 = xmmword_2246668C8;
    v868 = *(_OWORD *)dbl_2246668D8;
  }
  else
  {
    v860 = v829;
    v861 = v830;
    v862 = v831;
    v863 = v832;
    v858 = v827;
    v859 = v828;
    v1098 = 0;
    v259 = dbl_2246668D8[0];
    v867 = xmmword_2246668C8;
    v868 = *(_OWORD *)dbl_2246668D8;
    if (!(v7 >> 60))
      goto LABEL_139;
  }
  sub_223B26C48((uint64_t)&v858, 6, 5, 5, (uint64_t)&v1098, (uint64_t)&v867, COERCE_DOUBLE(0x1EA000001E3), v259, v255, v256, v257, v258);
LABEL_139:
  v865[2] = v860;
  v865[3] = v861;
  v865[4] = v862;
  v866 = v863;
  v865[0] = v858;
  v865[1] = v859;
  v1099 = 0x404040400000000;
  v871[0] = xmmword_2246668E8;
  v871[1] = *(_OWORD *)dbl_2246668F8;
  sub_223B26C48((uint64_t)v865, 7, 4, 4, (uint64_t)&v1099, (uint64_t)v871, COERCE_DOUBLE(0x1E5000001E4), dbl_2246668F8[0], v255, v256, v257, v258);
  v869[2] = v860;
  v869[3] = v861;
  v869[4] = v862;
  v870 = v863;
  v869[0] = v858;
  v869[1] = v859;
  v1100 = 0x404040400000000;
  v878[0] = xmmword_224666908;
  v878[1] = *(_OWORD *)dbl_224666918;
  sub_223B26C48((uint64_t)v869, 7, 4, 5, (uint64_t)&v1100, (uint64_t)v878, COERCE_DOUBLE(0x1EC000001E5), dbl_224666918[0], v260, v261, v262, v263);
  v874 = v860;
  v875 = v861;
  v876 = v862;
  v877 = v863;
  v872 = v858;
  v873 = v859;
  v1101 = 0x404040400000000;
  v881[0] = xmmword_224666928;
  v881[1] = *(_OWORD *)dbl_224666938;
  sub_223B26C48((uint64_t)&v872, 7, 5, 4, (uint64_t)&v1101, (uint64_t)v881, COERCE_DOUBLE(0x1E7000001E6), dbl_224666938[0], v264, v265, v266, v267);
  v879[2] = v860;
  v879[3] = v861;
  v879[4] = v862;
  v880 = v863;
  v879[0] = v858;
  v879[1] = v859;
  v1102 = 0x404040400000000;
  v884[0] = xmmword_224666948;
  v884[1] = *(_OWORD *)dbl_224666958;
  sub_223B26C48((uint64_t)v879, 7, 5, 5, (uint64_t)&v1102, (uint64_t)v884, COERCE_DOUBLE(0x1EE000001E7), dbl_224666958[0], v268, v269, v270, v271);
  v882[2] = v860;
  v882[3] = v861;
  v882[4] = v862;
  v883 = v863;
  v882[0] = v858;
  v882[1] = v859;
  v1103 = 0;
  v887[0] = xmmword_224666968;
  v887[1] = *(_OWORD *)dbl_224666978;
  if ((v7 & 0x2000000000000000) != 0)
    sub_223B26C48((uint64_t)v882, 6, 4, 6, (uint64_t)&v1103, (uint64_t)v887, COERCE_DOUBLE(0x1E9000001E8), dbl_224666978[0], v272, v273, v274, v275);
  v885[2] = v860;
  v885[3] = v861;
  v885[4] = v862;
  v886 = v863;
  v885[0] = v858;
  v885[1] = v859;
  v1104 = 0x100010001000100;
  v890[0] = xmmword_224666988;
  v890[1] = *(_OWORD *)dbl_224666998;
  sub_223B26C48((uint64_t)v885, 6, 4, 7, (uint64_t)&v1104, (uint64_t)v890, COERCE_DOUBLE(0x1A0000001E9), dbl_224666998[0], v272, v273, v274, v275);
  v888[2] = v860;
  v888[3] = v861;
  v888[4] = v862;
  v889 = v863;
  v888[0] = v858;
  v888[1] = v859;
  v1105 = 0;
  v893[0] = xmmword_2246669A8;
  v893[1] = *(_OWORD *)dbl_2246669B8;
  if ((v7 & 0xA000000000000000) != 0)
    sub_223B26C48((uint64_t)v888, 6, 5, 6, (uint64_t)&v1105, (uint64_t)v893, COERCE_DOUBLE(0x1EB000001EALL), dbl_2246669B8[0], v276, v277, v278, v279);
  v891[2] = v860;
  v891[3] = v861;
  v891[4] = v862;
  v892 = v863;
  v891[0] = v858;
  v891[1] = v859;
  v1106 = 0x100010001000100;
  v896[0] = xmmword_2246669C8;
  v896[1] = *(_OWORD *)dbl_2246669D8;
  sub_223B26C48((uint64_t)v891, 6, 5, 7, (uint64_t)&v1106, (uint64_t)v896, COERCE_DOUBLE(0x1A2000001EBLL), dbl_2246669D8[0], v276, v277, v278, v279);
  v894[2] = v860;
  v894[3] = v861;
  v894[4] = v862;
  v895 = v863;
  v894[0] = v858;
  v894[1] = v859;
  v1107 = 0x404040400000000;
  v899[0] = xmmword_2246669E8;
  v899[1] = *(_OWORD *)dbl_2246669F8;
  sub_223B26C48((uint64_t)v894, 7, 4, 6, (uint64_t)&v1107, (uint64_t)v899, COERCE_DOUBLE(0x1ED000001ECLL), dbl_2246669F8[0], v280, v281, v282, v283);
  v897[2] = v860;
  v897[3] = v861;
  v897[4] = v862;
  v898 = v863;
  v897[0] = v858;
  v897[1] = v859;
  v1108 = 0x504050401000100;
  v902[0] = xmmword_224666A08;
  v902[1] = *(_OWORD *)dbl_224666A18;
  sub_223B26C48((uint64_t)v897, 7, 4, 7, (uint64_t)&v1108, (uint64_t)v902, COERCE_DOUBLE(0x1A4000001EDLL), dbl_224666A18[0], v284, v285, v286, v287);
  v900[2] = v874;
  v900[3] = v875;
  v900[4] = v876;
  v901 = v877;
  v900[0] = v872;
  v900[1] = v873;
  v1109 = 0x404040400000000;
  v905[0] = xmmword_224666A28;
  v905[1] = *(_OWORD *)dbl_224666A38;
  sub_223B26C48((uint64_t)v900, 7, 5, 6, (uint64_t)&v1109, (uint64_t)v905, COERCE_DOUBLE(0x1EF000001EELL), dbl_224666A38[0], v288, v289, v290, v291);
  v903[2] = v874;
  v903[3] = v875;
  v903[4] = v876;
  v904 = v877;
  v903[0] = v872;
  v903[1] = v873;
  v1110 = 0x504050401000100;
  v908[0] = xmmword_224666A48;
  v908[1] = *(_OWORD *)dbl_224666A58;
  sub_223B26C48((uint64_t)v903, 7, 5, 7, (uint64_t)&v1110, (uint64_t)v908, COERCE_DOUBLE(0x1A6000001EFLL), dbl_224666A58[0], v292, v293, v294, v295);
  v906[2] = v874;
  v906[3] = v875;
  v906[4] = v876;
  v907 = v877;
  v906[0] = v872;
  v906[1] = v873;
  v1111 = 0;
  v915[0] = xmmword_224666A68;
  v915[1] = *(_OWORD *)dbl_224666A78;
  if ((v7 & 0x4000000000000000) != 0)
  {
    sub_223B26C48((uint64_t)v906, 6, 6, 4, (uint64_t)&v1111, (uint64_t)v915, COERCE_DOUBLE(0x1F1000001F0), dbl_224666A78[0], v296, v297, v298, v299);
    v911 = v874;
    v912 = v875;
    v913 = v876;
    v914 = v877;
    v909 = v872;
    v910 = v873;
    v1112 = 0;
    v300 = dbl_224666A98[0];
    v922 = xmmword_224666A88;
    v923 = *(_OWORD *)dbl_224666A98;
    goto LABEL_147;
  }
  v911 = v874;
  v912 = v875;
  v913 = v876;
  v914 = v877;
  v909 = v872;
  v910 = v873;
  v1112 = 0;
  v300 = dbl_224666A98[0];
  v922 = xmmword_224666A88;
  v923 = *(_OWORD *)dbl_224666A98;
  if (v7 >> 62)
LABEL_147:
    sub_223B26C48((uint64_t)&v909, 6, 6, 5, (uint64_t)&v1112, (uint64_t)&v922, COERCE_DOUBLE(0x1F8000001F1), v300, v296, v297, v298, v299);
  v918 = v911;
  v919 = v912;
  v920 = v913;
  v921 = v914;
  v916 = v909;
  v917 = v910;
  v1113 = 0x202000002020000;
  v926[0] = xmmword_224666AA8;
  v926[1] = *(_OWORD *)dbl_224666AB8;
  sub_223B26C48((uint64_t)&v916, 6, 7, 4, (uint64_t)&v1113, (uint64_t)v926, COERCE_DOUBLE(0x1F3000001F2), dbl_224666AB8[0], v296, v297, v298, v299);
  v924[2] = v911;
  v924[3] = v912;
  v924[4] = v913;
  v925 = v914;
  v924[0] = v909;
  v924[1] = v910;
  v1114 = 0x202000002020000;
  v929[0] = xmmword_224666AC8;
  v929[1] = *(_OWORD *)dbl_224666AD8;
  sub_223B26C48((uint64_t)v924, 6, 7, 5, (uint64_t)&v1114, (uint64_t)v929, COERCE_DOUBLE(0x1FA000001F3), dbl_224666AD8[0], v301, v302, v303, v304);
  v927[2] = v911;
  v927[3] = v912;
  v927[4] = v913;
  v928 = v914;
  v927[0] = v909;
  v927[1] = v910;
  v1115 = 0x404040400000000;
  v932[0] = xmmword_224666AE8;
  v932[1] = *(_OWORD *)dbl_224666AF8;
  sub_223B26C48((uint64_t)v927, 7, 6, 4, (uint64_t)&v1115, (uint64_t)v932, COERCE_DOUBLE(0x1F5000001F4), dbl_224666AF8[0], v305, v306, v307, v308);
  v930[2] = v911;
  v930[3] = v912;
  v930[4] = v913;
  v931 = v914;
  v930[0] = v909;
  v930[1] = v910;
  v1116 = 0x404040400000000;
  v935[0] = xmmword_224666B08;
  v935[1] = *(_OWORD *)dbl_224666B18;
  sub_223B26C48((uint64_t)v930, 7, 6, 5, (uint64_t)&v1116, (uint64_t)v935, COERCE_DOUBLE(0x1FC000001F5), dbl_224666B18[0], v309, v310, v311, v312);
  v933[2] = v911;
  v933[3] = v912;
  v933[4] = v913;
  v934 = v914;
  v933[0] = v909;
  v933[1] = v910;
  v1117 = 0x606040402020000;
  v942[0] = xmmword_224666B28;
  v942[1] = *(_OWORD *)dbl_224666B38;
  sub_223B26C48((uint64_t)v933, 7, 7, 4, (uint64_t)&v1117, (uint64_t)v942, COERCE_DOUBLE(0x1F7000001F6), dbl_224666B38[0], v313, v314, v315, v316);
  v938 = v911;
  v939 = v912;
  v940 = v913;
  v941 = v914;
  v936 = v909;
  v937 = v910;
  v1118 = 0x606040402020000;
  v945[0] = xmmword_224666B48;
  v945[1] = *(_OWORD *)dbl_224666B58;
  sub_223B26C48((uint64_t)&v936, 7, 7, 5, (uint64_t)&v1118, (uint64_t)v945, COERCE_DOUBLE(0x1FE000001F7), dbl_224666B58[0], v317, v318, v319, v320);
  v943[2] = v911;
  v943[3] = v912;
  v943[4] = v913;
  v944 = v914;
  v943[0] = v909;
  v943[1] = v910;
  v1119 = 0;
  v948[0] = xmmword_224666B68;
  v948[1] = *(_OWORD *)dbl_224666B78;
  if ((v7 & 0x8000000000000000) != 0)
    sub_223B26C48((uint64_t)v943, 6, 6, 6, (uint64_t)&v1119, (uint64_t)v948, COERCE_DOUBLE(0x1F9000001F8), dbl_224666B78[0], v321, v322, v323, v324);
  v946[2] = v911;
  v946[3] = v912;
  v946[4] = v913;
  v947 = v914;
  v946[0] = v909;
  v946[1] = v910;
  v1120 = 0x100010001000100;
  v951[0] = xmmword_224666B88;
  v951[1] = *(_OWORD *)dbl_224666B98;
  sub_223B26C48((uint64_t)v946, 6, 6, 7, (uint64_t)&v1120, (uint64_t)v951, COERCE_DOUBLE(0x1B0000001F9), dbl_224666B98[0], v321, v322, v323, v324);
  v949[2] = v918;
  v949[3] = v919;
  v949[4] = v920;
  v950 = v921;
  v949[0] = v916;
  v949[1] = v917;
  v1121 = 0x202000002020000;
  v954[0] = xmmword_224666BA8;
  v954[1] = *(_OWORD *)dbl_224666BB8;
  sub_223B26C48((uint64_t)v949, 6, 7, 6, (uint64_t)&v1121, (uint64_t)v954, COERCE_DOUBLE(0x1FB000001FALL), dbl_224666BB8[0], v325, v326, v327, v328);
  v952[2] = v918;
  v952[3] = v919;
  v952[4] = v920;
  v953 = v921;
  v952[0] = v916;
  v952[1] = v917;
  v1122 = 0x302010003020100;
  v957[0] = xmmword_224666BC8;
  v957[1] = *(_OWORD *)dbl_224666BD8;
  sub_223B26C48((uint64_t)v952, 6, 7, 7, (uint64_t)&v1122, (uint64_t)v957, COERCE_DOUBLE(0x1B2000001FBLL), dbl_224666BD8[0], v329, v330, v331, v332);
  v955[2] = v918;
  v955[3] = v919;
  v955[4] = v920;
  v956 = v921;
  v955[0] = v916;
  v955[1] = v917;
  v1123 = 0x404040400000000;
  v960[0] = xmmword_224666BE8;
  v960[1] = *(_OWORD *)dbl_224666BF8;
  sub_223B26C48((uint64_t)v955, 7, 6, 6, (uint64_t)&v1123, (uint64_t)v960, COERCE_DOUBLE(0x1FD000001FCLL), dbl_224666BF8[0], v333, v334, v335, v336);
  v958[2] = v918;
  v958[3] = v919;
  v958[4] = v920;
  v959 = v921;
  v958[0] = v916;
  v958[1] = v917;
  v1124 = 0x504050401000100;
  v963[0] = xmmword_224666C08;
  v963[1] = *(_OWORD *)dbl_224666C18;
  sub_223B26C48((uint64_t)v958, 7, 6, 7, (uint64_t)&v1124, (uint64_t)v963, COERCE_DOUBLE(0x1B4000001FDLL), dbl_224666C18[0], v337, v338, v339, v340);
  v961[2] = v918;
  v961[3] = v919;
  v961[4] = v920;
  v962 = v921;
  v961[0] = v916;
  v961[1] = v917;
  v1125 = 0x606040402020000;
  v966[0] = xmmword_224666C28;
  v966[1] = *(_OWORD *)dbl_224666C38;
  sub_223B26C48((uint64_t)v961, 7, 7, 6, (uint64_t)&v1125, (uint64_t)v966, COERCE_DOUBLE(0x1FF000001FELL), dbl_224666C38[0], v341, v342, v343, v344);
  v964[2] = v938;
  v964[3] = v939;
  v964[4] = v940;
  v965 = v941;
  v964[0] = v936;
  v964[1] = v937;
  v1126[0] = 0x706050403020100;
  v967[0] = xmmword_224666C48;
  v967[1] = *(_OWORD *)dbl_224666C58;
  return sub_223B26C48((uint64_t)v964, 7, 7, 7, (uint64_t)v1126, (uint64_t)v967, COERCE_DOUBLE(0x1B6000001FFLL), dbl_224666C58[0], v345, v346, v347, v348);
}

uint64_t sub_223B37328(uint64_t result, int a2, int a3, int a4, uint64_t a5, uint64_t a6, double a7, double a8, float32x4_t a9, double a10, double a11, double a12)
{
  uint64_t v12;
  uint64_t v13;
  __int32 v14;
  uint64_t v15;
  _BYTE *v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  _BYTE *v20;
  int32x2_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  unsigned int v26;
  _BYTE *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unsigned int v68;
  float32x4_t v69;
  unsigned int v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  uint64_t v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  float32x4_t v77;
  float32x4_t v78;
  unsigned int v79;
  int v80;
  float32x4_t v81;
  int v82;
  float32x4_t v83;
  double v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  int v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  _BYTE *v99;
  int v100;
  unsigned __int8 *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 *v105;
  uint64_t v106;
  unsigned __int8 *v107;
  unsigned int v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int8 *v127;
  uint64_t v128;
  _BYTE *v129;
  uint64_t v130;
  _BYTE *v131;
  int v132;
  int v133;
  uint64_t v134;
  _BYTE *v135;
  int v136;
  int v137;
  uint64_t v138;
  _BYTE *v139;
  int v140;
  uint64_t v141;
  _BYTE *v142;
  int v143;
  int v144;
  uint64_t v145;
  _BYTE *v146;
  int v147;
  int v148;
  uint64_t v149;
  _BYTE *v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  _BYTE *v155;
  uint64_t v156;
  int v157;
  int v158;
  unsigned int v159;
  int v160;
  unsigned __int8 *v161;
  unsigned __int8 *v162;
  uint64_t v163;
  unsigned int v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  int v172;
  unsigned __int8 *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned __int8 *v177;
  uint64_t v178;
  unsigned __int8 *v179;
  unsigned int v180;
  BOOL v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  unsigned __int8 *v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned __int8 *v207;
  unsigned int v208;
  unsigned __int8 *v209;
  unsigned int v210;
  BOOL v211;
  uint64_t v212;
  unsigned int v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  unsigned int v219;
  uint64_t v220;
  unsigned int v221;
  uint64_t v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  unsigned __int8 *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  int v261;
  unsigned int v262;
  int v263;
  int v264;
  unsigned __int8 *v265;
  unsigned __int8 *v266;
  uint64_t v267;
  unsigned int v268;
  char *v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  char *v275;
  int v276;
  unsigned __int8 *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned __int8 *v281;
  uint64_t v282;
  unsigned __int8 *v283;
  unsigned int v284;
  BOOL v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unsigned __int8 *v301;
  unsigned __int8 *v302;
  _DWORD *v303;
  int v304;
  int v305;
  float32x4_t v306;
  __int128 v307;
  int32x2_t v308;
  int v309;
  __int128 v310;
  int32x2_t *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int32x2_t v315;
  int v316;
  _BYTE v317[32];
  __int32 v318;
  uint64_t v319;
  __int32 v320;
  uint64_t v321;
  __int32 v322;
  uint64_t v323;
  __int32 v324;
  uint64_t v325;
  __int32 v326;
  uint64_t v327;
  __int32 v328;
  _OWORD v329[2];
  uint64_t v330;
  __int32 v331;
  uint64_t v332;
  __int32 v333;
  uint64_t v334;
  __int32 v335;
  uint64_t v336;
  __int32 v337;
  uint64_t v338;
  __int32 v339;
  uint64_t v340;
  __int32 v341;
  uint64_t v342;
  __int32 v343;
  uint64_t v344;
  __int32 v345;
  _BYTE v346[8];
  _BYTE v347[8];
  char v348;
  char v349;
  char v350;
  char v351;
  char v352;
  char v353;
  char v354;
  char v355;
  uint64_t v356;
  __int32 v357;
  unsigned __int8 v358;
  unsigned __int8 v359;
  char v360;
  unsigned __int8 v361;
  unsigned __int8 v362;
  char v363;
  unsigned __int8 v364;
  unsigned __int8 v365;
  uint64_t v366;

  v12 = 0;
  v366 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)result;
  v14 = *(_DWORD *)(*(_QWORD *)result + 4) + a3;
  v315.i32[0] = **(_DWORD **)result + a2;
  v315.i32[1] = v14;
  v316 = *(_DWORD *)(v13 + 8) + a4;
  v310 = *(_OWORD *)(result + 8);
  v15 = *(_QWORD *)(result + 24);
  v16 = *(_BYTE **)(result + 32);
  v311 = &v315;
  v312 = v15;
  v313 = a5;
  v314 = a6;
  *v16 = 8;
  v17 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v18.i64[0] = 0x3F0000003F000000;
  v18.i64[1] = 0x3F0000003F000000;
  do
  {
    v19 = byte_22466137A[v12];
    v20 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8 * *(unsigned __int8 *)(a5 + v19))
                  + 40 * *(unsigned int *)(a6 + 4 * v19));
    v21 = (int32x2_t *)((char *)&unk_224661384 + 12 * v19);
    v22.i32[1] = v315.i32[1];
    *(float32x2_t *)a9.f32 = vcvt_f32_s32(vadd_s32(v315, *v21));
    v22.f32[0] = (float)(v316 + v21[1].i32[0]);
    a9.f32[2] = v22.f32[0];
    v23 = vaddq_f32(a9, v18);
    if (!v20[6])
    {
      v22.i8[0] = v20[3];
      v24 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v22.f32));
      v24.f32[0] = (float)v24.i32[0];
      LOBYTE(a11) = v20[4];
      *(_QWORD *)&a11 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a11)).u64[0];
      *(float *)&a11 = (float)SLODWORD(a11);
      LOBYTE(a12) = v20[5];
      *(_QWORD *)&a12 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a12)).u64[0];
      *(float *)&a12 = (float)SLODWORD(a12);
      v24.i32[1] = LODWORD(a11);
      v24.i32[2] = LODWORD(a12);
      v22 = vmulq_f32(v24, v17);
      v23 = vaddq_f32(v23, v22);
    }
    v22.i32[0] = **(_DWORD **)(result + 48);
    a9 = vmulq_n_f32(v23, v22.f32[0]);
    v25 = *(_QWORD *)(result + 40) + 12 * byte_22466137A[v12];
    *(_QWORD *)v25 = a9.i64[0];
    *(_DWORD *)(v25 + 8) = a9.i32[2];
    v26 = v20[6];
    v27 = *(_BYTE **)(result + 56);
    v27[v19] = (char)v26 > 0;
    v28 = *(unsigned __int8 **)(result + 64);
    v28[v19] = v26 >> 7;
    v29 = *(_QWORD *)(result + 72);
    *(_BYTE *)(v29 + v19) = v27[v19] ^ 1;
    if (v27[v19])
    {
      v30 = *(_BYTE **)(result + 32);
      if (*v30 == 8)
        *v30 = v19;
    }
    ++v12;
  }
  while (v12 != 8);
  v31 = **(unsigned __int8 **)(result + 32);
  if ((_DWORD)v31 != 8)
  {
    *(int32x2_t *)v18.f32 = v315;
    v308 = vadd_s32(v315, (int32x2_t)(*(_QWORD *)&vshl_u32((uint32x2_t)vdup_n_s32(v31), (uint32x2_t)-2) & 0xFFFFFF01FFFFFF01));
    v309 = v316 + (v31 & 1);
    v32 = *(_QWORD *)(result + 40);
    v303 = *(_DWORD **)(result + 8);
    v306.i64[0] = (uint64_t)&v310;
    v306.i64[1] = v32;
    *(_QWORD *)&v307 = *(_QWORD *)(result + 80);
    *((_QWORD *)&v307 + 1) = &v308;
    if ((_DWORD)v31)
    {
      v33 = (unsigned __int8 *)&unk_2246613E4 + 9 * v31;
      v34 = *v33;
      v35 = v32 + 12 * v34;
      *(_QWORD *)v317 = *(_QWORD *)v35;
      *(_DWORD *)&v317[8] = *(_DWORD *)(v35 + 8);
      v348 = v27[v34];
      v347[0] = v28[v34];
      v346[0] = *(_BYTE *)(v29 + v34);
      v36 = v33[1];
      v37 = v32 + 12 * v36;
      *(_QWORD *)&v317[12] = *(_QWORD *)v37;
      *(_DWORD *)&v317[20] = *(_DWORD *)(v37 + 8);
      v349 = v27[v36];
      v38 = v28[v36];
      v347[1] = v28[v36];
      v346[1] = *(_BYTE *)(v29 + v36);
      v39 = v33[2];
      v40 = (uint64_t *)(v32 + 12 * v39);
      v41 = *v40;
      LODWORD(v40) = *((_DWORD *)v40 + 2);
      v42 = v27[v39];
      *(_QWORD *)&v317[24] = v41;
      v350 = v42;
      v43 = v28[v39];
      LOBYTE(v39) = *(_BYTE *)(v29 + v39);
      v347[2] = v43;
      v346[2] = v39;
      v44 = v33[3];
      v45 = v32 + 12 * v44;
      v46 = *(_QWORD *)v45;
      LODWORD(v45) = *(_DWORD *)(v45 + 8);
      v318 = (int)v40;
      v320 = v45;
      v319 = v46;
      result = v27[v44];
      v351 = v27[v44];
      v47 = v28[v44];
      v347[3] = v28[v44];
      v346[3] = *(_BYTE *)(v29 + v44);
      v48 = v33[4];
      v49 = v32 + 12 * v48;
      v50 = *(_QWORD *)v49;
      LODWORD(v49) = *(_DWORD *)(v49 + 8);
      v51 = v27[v48];
      v321 = v50;
      v352 = v51;
      v52 = v28[v48];
      LOBYTE(v48) = *(_BYTE *)(v29 + v48);
      v347[4] = v52;
      v346[4] = v48;
      v53 = v33[5];
      v54 = v32 + 12 * v53;
      v55 = *(_QWORD *)v54;
      LODWORD(v54) = *(_DWORD *)(v54 + 8);
      v322 = v49;
      v324 = v54;
      v323 = v55;
      v56 = v27[v53];
      v353 = v27[v53];
      v57 = v28[v53];
      v347[5] = v28[v53];
      v346[5] = *(_BYTE *)(v29 + v53);
      v58 = v33[6];
      v59 = v32 + 12 * v58;
      v60 = *(_QWORD *)v59;
      LODWORD(v59) = *(_DWORD *)(v59 + 8);
      v61 = v27[v58];
      v325 = v60;
      v354 = v61;
      v62 = v28[v58];
      LOBYTE(v58) = *(_BYTE *)(v29 + v58);
      v347[6] = v62;
      v346[6] = v58;
      v301 = v33;
      v63 = v33[7];
      v64 = v32 + 12 * v63;
      v65 = *(_QWORD *)v64;
      LODWORD(v64) = *(_DWORD *)(v64 + 8);
      v326 = v59;
      v328 = v64;
      v327 = v65;
      v66 = v27[v63];
      v355 = v27[v63];
      v67 = v28[v63];
      v347[7] = v28[v63];
      v346[7] = *(_BYTE *)(v29 + v63);
      if (v349)
      {
        v68 = 0;
        v38 = 0;
        v69 = 0uLL;
        if (v42)
          goto LABEL_13;
      }
      else
      {
        v17.i64[0] = *(_QWORD *)&v317[12];
        v17.i32[2] = *(_DWORD *)&v317[20];
        v18 = 0uLL;
        v69 = vaddq_f32(v17, (float32x4_t)0);
        v68 = 1;
        if (v42)
        {
LABEL_13:
          v70 = v68;
          if ((_DWORD)result)
            goto LABEL_15;
          goto LABEL_14;
        }
      }
      v70 = v68 | 2;
      v18.i64[0] = *(_QWORD *)&v317[24];
      v18.i32[2] = v318;
      v69 = vaddq_f32(v69, v18);
      ++v68;
      v38 += v43;
      if ((_DWORD)result)
      {
LABEL_15:
        if (v51)
        {
          if (v56)
            goto LABEL_17;
        }
        else
        {
          v70 |= 8u;
          v18.i64[0] = v321;
          v18.i32[2] = v322;
          v69 = vaddq_f32(v69, v18);
          ++v68;
          v38 += v52;
          if (v56)
          {
LABEL_17:
            if (v61)
              goto LABEL_18;
            goto LABEL_39;
          }
        }
        v70 |= 0x10u;
        v18.i64[0] = v323;
        v18.i32[2] = v324;
        v69 = vaddq_f32(v69, v18);
        ++v68;
        v38 += v57;
        if (v61)
        {
LABEL_18:
          if (v66)
            goto LABEL_19;
LABEL_40:
          v70 |= 0x40u;
          v18.i64[0] = v327;
          v18.i32[2] = v328;
          v69 = vaddq_f32(v69, v18);
          ++v68;
          v38 += v67;
LABEL_19:
          ++*v303;
          v71 = &byte_22466142C[48 * v70];
          v74 = v71[31];
          v72 = v71 + 31;
          v73 = v74;
          if (v74 == 8)
          {
            v75 = v38;
            LOBYTE(v76) = v70;
            goto LABEL_60;
          }
          if (v346[v73])
          {
            v76 = v70 + (-1 << (v73 - 1));
            v91 = &v317[12 * v73];
            v18.i64[0] = *(_QWORD *)v91;
            v18.i32[2] = *((_DWORD *)v91 + 2);
            v69 = vsubq_f32(v69, v18);
            --v68;
            v75 = v38 - (char)v347[v73];
            v92 = v72[1];
            if ((_DWORD)v92 == 8)
              goto LABEL_60;
          }
          else
          {
            v75 = v38;
            v76 = v70;
            v92 = v72[1];
            if ((_DWORD)v92 == 8)
              goto LABEL_60;
          }
          if (v346[v92])
          {
            v76 += -1 << (v92 - 1);
            v95 = &v317[12 * v92];
            v18.i64[0] = *(_QWORD *)v95;
            v18.i32[2] = *((_DWORD *)v95 + 2);
            v69 = vsubq_f32(v69, v18);
            --v68;
            v75 -= (char)v347[v92];
          }
          v96 = v72[2];
          if ((_DWORD)v96 != 8)
          {
            if (v346[v96])
            {
              v76 += -1 << (v96 - 1);
              v97 = &v317[12 * v72[2]];
              v18.i64[0] = *(_QWORD *)v97;
              v18.i32[2] = *((_DWORD *)v97 + 2);
              v69 = vsubq_f32(v69, v18);
              --v68;
              v75 -= (char)v347[v96];
            }
            v98 = v72[3];
            if ((_DWORD)v98 != 8 && v346[v98])
            {
              v76 += -1 << (v98 - 1);
              v99 = &v317[12 * v98];
              v18.i64[0] = *(_QWORD *)v99;
              v18.i32[2] = *((_DWORD *)v99 + 2);
              v69 = vsubq_f32(v69, v18);
              --v68;
              v75 -= (char)v347[v98];
            }
          }
LABEL_60:
          if (v68)
          {
            v18.f32[0] = (float)v68;
            v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 0);
            v69 = vdivq_f32(v69, v18);
          }
          v331 = v69.i32[2];
          v330 = v69.i64[0];
          v100 = v76;
          v101 = &byte_22466142C[48 * v76];
          v102 = v101[1];
          if (v102 != 8)
          {
            result = sub_223B3962C((uint64_t)&v306, 1, v301[v102], v301[v101[2]], v301[v101[3]], v301[v101[4]], &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
            v103 = v101[5];
            if (v103 != 8)
            {
              result = sub_223B3962C((uint64_t)&v306, 1, v301[v103], v301[v101[6]], v301[v101[7]], v301[v101[8]], &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              v104 = v101[9];
              if (v104 != 8)
                result = sub_223B3962C((uint64_t)&v306, 1, v301[v104], v301[v101[10]], v301[v101[11]], v301[v101[12]], &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
            }
          }
          v105 = &byte_22466142C[48 * v100];
          v108 = v105[13];
          v107 = v105 + 13;
          v106 = v108;
          v109 = v108 == 8;
          if (*v101)
          {
            if (v109)
              goto LABEL_93;
            v110 = v107[1];
            if (v346[v110])
              result = sub_223B3962C((uint64_t)&v306, 0, v301[v106], v301[v110], v301[v107[2]], 8u, &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
            v111 = v107[3];
            if (v111 == 8)
              goto LABEL_93;
            v112 = v107[4];
            if (v346[v112])
              result = sub_223B3962C((uint64_t)&v306, 0, v301[v111], v301[v112], v301[v107[5]], 8u, &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
            v113 = v107[6];
            if (v113 == 8)
              goto LABEL_93;
            v114 = v107[7];
            if (v346[v114])
              result = sub_223B3962C((uint64_t)&v306, 0, v301[v113], v301[v114], v301[v107[8]], 8u, &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
            v115 = v107[9];
            if (v115 == 8)
              goto LABEL_93;
            v116 = v107[10];
            if (v346[v116])
              result = sub_223B3962C((uint64_t)&v306, 0, v301[v115], v301[v116], v301[v107[11]], 8u, &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
            v117 = v107[12];
            if (v117 == 8)
              goto LABEL_93;
            v118 = v107[13];
            if (v346[v118])
              result = sub_223B3962C((uint64_t)&v306, 0, v301[v117], v301[v118], v301[v107[14]], 8u, &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
            v119 = v107[15];
            if (v119 == 8)
              goto LABEL_93;
            v120 = v107[16];
            if (!v346[v120])
              goto LABEL_93;
          }
          else
          {
            if (v109)
              goto LABEL_93;
            result = sub_223B3962C((uint64_t)&v306, 0, v301[v106], v301[v107[1]], v301[v107[2]], 8u, &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
            v121 = v107[3];
            if (v121 == 8)
              goto LABEL_93;
            result = sub_223B3962C((uint64_t)&v306, 0, v301[v121], v301[v107[4]], v301[v107[5]], 8u, &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
            v122 = v107[6];
            if (v122 == 8)
              goto LABEL_93;
            result = sub_223B3962C((uint64_t)&v306, 0, v301[v122], v301[v107[7]], v301[v107[8]], 8u, &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
            v123 = v107[9];
            if (v123 == 8)
              goto LABEL_93;
            result = sub_223B3962C((uint64_t)&v306, 0, v301[v123], v301[v107[10]], v301[v107[11]], 8u, &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
            v124 = v107[12];
            if (v124 == 8)
              goto LABEL_93;
            result = sub_223B3962C((uint64_t)&v306, 0, v301[v124], v301[v107[13]], v301[v107[14]], 8u, &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
            v119 = v107[15];
            if (v119 == 8)
              goto LABEL_93;
            v120 = v107[16];
          }
          result = sub_223B3962C((uint64_t)&v306, 0, v301[v119], v301[v120], v301[v107[17]], 8u, &v330, v75 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
LABEL_93:
          v125 = 0;
          while (1)
          {
            v126 = byte_22466142C[48 * v70 + 35 + v125];
            if (v126 == 8)
              return result;
            v127 = (unsigned __int8 *)&unk_2246613E4 + 9 * v126;
            v128 = *v127;
            v129 = &v317[12 * v128];
            v330 = *(_QWORD *)v129;
            v331 = *((_DWORD *)v129 + 2);
            LOBYTE(v356) = v347[v128];
            v358 = v346[v128];
            v130 = v127[1];
            v131 = &v317[12 * v130];
            v332 = *(_QWORD *)v131;
            v333 = *((_DWORD *)v131 + 2);
            v132 = *(&v348 + v130);
            v133 = v347[v130];
            BYTE1(v356) = v347[v130];
            v359 = v346[v130];
            v134 = v127[2];
            v135 = &v317[12 * v134];
            v334 = *(_QWORD *)v135;
            v335 = *((_DWORD *)v135 + 2);
            v136 = *(&v348 + v134);
            v137 = v347[v134];
            LOBYTE(v134) = v346[v134];
            BYTE2(v356) = v137;
            v360 = v134;
            v138 = v127[3];
            v139 = &v317[12 * v138];
            v336 = *(_QWORD *)v139;
            v337 = *((_DWORD *)v139 + 2);
            v140 = *(&v348 + v138);
            result = v347[v138];
            BYTE3(v356) = v347[v138];
            v361 = v346[v138];
            v141 = v127[4];
            v142 = &v317[12 * v141];
            v339 = *((_DWORD *)v142 + 2);
            v338 = *(_QWORD *)v142;
            v143 = *(&v348 + v141);
            v144 = v347[v141];
            BYTE4(v356) = v347[v141];
            v362 = v346[v141];
            v145 = v127[5];
            v146 = &v317[12 * v145];
            v341 = *((_DWORD *)v146 + 2);
            v340 = *(_QWORD *)v146;
            v147 = *(&v348 + v145);
            v148 = v347[v145];
            LOBYTE(v145) = v346[v145];
            BYTE5(v356) = v148;
            v363 = v145;
            v149 = v127[6];
            v150 = &v317[12 * v149];
            v151 = *(_QWORD *)v150;
            v343 = *((_DWORD *)v150 + 2);
            v342 = v151;
            v152 = *(&v348 + v149);
            v153 = v347[v149];
            BYTE6(v356) = v347[v149];
            v364 = v346[v149];
            v154 = v127[7];
            v155 = &v317[12 * v154];
            v156 = *(_QWORD *)v155;
            v345 = *((_DWORD *)v155 + 2);
            v344 = v156;
            v157 = *(&v348 + v154);
            v158 = v347[v154];
            HIBYTE(v356) = v347[v154];
            v365 = v346[v154];
            if (v132)
            {
              v159 = 0;
              v69 = 0uLL;
              if (v136)
                goto LABEL_99;
            }
            else
            {
              v69.i64[0] = v332;
              v69.i32[2] = v333;
              v18 = 0uLL;
              v69 = vaddq_f32(v69, (float32x4_t)0);
              v38 += v133;
              v159 = 1;
              if (v136)
              {
LABEL_99:
                v160 = v159;
                if (v140)
                  goto LABEL_100;
                goto LABEL_143;
              }
            }
            v160 = v159 | 2;
            v18.i64[0] = v334;
            v18.i32[2] = v335;
            v69 = vaddq_f32(v69, v18);
            ++v159;
            v38 += v137;
            if (v140)
            {
LABEL_100:
              if (v143)
                goto LABEL_101;
              goto LABEL_144;
            }
LABEL_143:
            v160 |= 4u;
            v18.i64[0] = v336;
            v18.i32[2] = v337;
            v69 = vaddq_f32(v69, v18);
            ++v159;
            v38 += result;
            if (v143)
            {
LABEL_101:
              if (v147)
                goto LABEL_102;
              goto LABEL_145;
            }
LABEL_144:
            v160 |= 8u;
            v18.i64[0] = v338;
            v18.i32[2] = v339;
            v69 = vaddq_f32(v69, v18);
            ++v159;
            v38 += v144;
            if (v147)
            {
LABEL_102:
              if (!v152)
                goto LABEL_146;
              goto LABEL_103;
            }
LABEL_145:
            v160 |= 0x10u;
            v18.i64[0] = v340;
            v18.i32[2] = v341;
            v69 = vaddq_f32(v69, v18);
            ++v159;
            v38 += v148;
            if (!v152)
            {
LABEL_146:
              v160 |= 0x20u;
              v18.i64[0] = v342;
              v18.i32[2] = v343;
              v69 = vaddq_f32(v69, v18);
              ++v159;
              v38 += v153;
              if (v157)
                goto LABEL_104;
              goto LABEL_147;
            }
LABEL_103:
            if (v157)
              goto LABEL_104;
LABEL_147:
            v160 |= 0x40u;
            v18.i64[0] = v344;
            v18.i32[2] = v345;
            v69 = vaddq_f32(v69, v18);
            ++v159;
            v38 += v158;
LABEL_104:
            ++*v303;
            v161 = &byte_22466142C[48 * v160];
            v164 = v161[31];
            v162 = v161 + 31;
            v163 = v164;
            v304 = v38;
            if (v164 != 8)
            {
              if (*(&v358 + v163))
              {
                v165 = (char *)&v330 + 12 * v163;
                v18.i64[0] = *(_QWORD *)v165;
                v18.i32[2] = *((_DWORD *)v165 + 2);
                v160 += -1 << (v163 - 1);
                v69 = vsubq_f32(v69, v18);
                --v159;
                v38 -= *((char *)&v356 + v163);
              }
              v166 = v162[1];
              if ((_DWORD)v166 != 8)
              {
                if (*(&v358 + v166))
                {
                  v167 = (char *)&v330 + 12 * v162[1];
                  v18.i64[0] = *(_QWORD *)v167;
                  v18.i32[2] = *((_DWORD *)v167 + 2);
                  v160 += -1 << (v166 - 1);
                  v69 = vsubq_f32(v69, v18);
                  --v159;
                  v38 -= *((char *)&v356 + v166);
                }
                v168 = v162[2];
                if ((_DWORD)v168 != 8)
                {
                  if (*(&v358 + v168))
                  {
                    v169 = (char *)&v330 + 12 * v162[2];
                    v18.i64[0] = *(_QWORD *)v169;
                    v18.i32[2] = *((_DWORD *)v169 + 2);
                    v160 += -1 << (v168 - 1);
                    v69 = vsubq_f32(v69, v18);
                    --v159;
                    v38 -= *((char *)&v356 + v168);
                  }
                  v170 = v162[3];
                  if ((_DWORD)v170 != 8 && *(&v358 + v170))
                  {
                    v171 = (char *)&v330 + 12 * v170;
                    v18.i64[0] = *(_QWORD *)v171;
                    v18.i32[2] = *((_DWORD *)v171 + 2);
                    v160 += -1 << (v170 - 1);
                    v69 = vsubq_f32(v69, v18);
                    --v159;
                    v38 -= *((char *)&v356 + v170);
                  }
                }
              }
            }
            if (v159)
            {
              v18.f32[0] = (float)v159;
              v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 0);
              v69 = vdivq_f32(v69, v18);
            }
            DWORD2(v329[0]) = v69.i32[2];
            *(_QWORD *)&v329[0] = v69.i64[0];
            v172 = v160;
            v173 = &byte_22466142C[48 * v160];
            v174 = v173[1];
            if (v174 != 8)
            {
              result = sub_223B3962C((uint64_t)&v306, 1, v301[v127[v174]], v301[v127[v173[2]]], v301[v127[v173[3]]], v301[v127[v173[4]]], (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              v175 = v173[5];
              if (v175 != 8)
              {
                result = sub_223B3962C((uint64_t)&v306, 1, v301[v127[v175]], v301[v127[v173[6]]], v301[v127[v173[7]]], v301[v127[v173[8]]], (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
                v176 = v173[9];
                if (v176 != 8)
                  result = sub_223B3962C((uint64_t)&v306, 1, v301[v127[v176]], v301[v127[v173[10]]], v301[v127[v173[11]]], v301[v127[v173[12]]], (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              }
            }
            v177 = &byte_22466142C[48 * v172];
            v180 = v177[13];
            v179 = v177 + 13;
            v178 = v180;
            v181 = v180 == 8;
            if (*v173)
            {
              if (v181)
                goto LABEL_95;
              v182 = v179[1];
              if (*(&v358 + v182))
                result = sub_223B3962C((uint64_t)&v306, 0, v301[v127[v178]], v301[v127[v182]], v301[v127[v179[2]]], 8u, (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              v183 = v179[3];
              if (v183 == 8)
                goto LABEL_95;
              v184 = v179[4];
              if (*(&v358 + v184))
                result = sub_223B3962C((uint64_t)&v306, 0, v301[v127[v183]], v301[v127[v184]], v301[v127[v179[5]]], 8u, (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              v185 = v179[6];
              if (v185 == 8)
                goto LABEL_95;
              v186 = v179[7];
              if (*(&v358 + v186))
                result = sub_223B3962C((uint64_t)&v306, 0, v301[v127[v185]], v301[v127[v186]], v301[v127[v179[8]]], 8u, (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              v187 = v179[9];
              if (v187 == 8)
                goto LABEL_95;
              v188 = v179[10];
              if (*(&v358 + v188))
                result = sub_223B3962C((uint64_t)&v306, 0, v301[v127[v187]], v301[v127[v188]], v301[v127[v179[11]]], 8u, (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              v189 = v179[12];
              if (v189 == 8)
                goto LABEL_95;
              v190 = v179[13];
              if (*(&v358 + v190))
                result = sub_223B3962C((uint64_t)&v306, 0, v301[v127[v189]], v301[v127[v190]], v301[v127[v179[14]]], 8u, (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              v191 = v179[15];
              if (v191 == 8)
                goto LABEL_95;
              v192 = v179[16];
              if (!*(&v358 + v192))
                goto LABEL_95;
            }
            else
            {
              if (v181)
                goto LABEL_95;
              result = sub_223B3962C((uint64_t)&v306, 0, v301[v127[v178]], v301[v127[v179[1]]], v301[v127[v179[2]]], 8u, (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              v193 = v179[3];
              if (v193 == 8)
                goto LABEL_95;
              result = sub_223B3962C((uint64_t)&v306, 0, v301[v127[v193]], v301[v127[v179[4]]], v301[v127[v179[5]]], 8u, (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              v194 = v179[6];
              if (v194 == 8)
                goto LABEL_95;
              result = sub_223B3962C((uint64_t)&v306, 0, v301[v127[v194]], v301[v127[v179[7]]], v301[v127[v179[8]]], 8u, (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              v195 = v179[9];
              if (v195 == 8)
                goto LABEL_95;
              result = sub_223B3962C((uint64_t)&v306, 0, v301[v127[v195]], v301[v127[v179[10]]], v301[v127[v179[11]]], 8u, (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              v196 = v179[12];
              if (v196 == 8)
                goto LABEL_95;
              result = sub_223B3962C((uint64_t)&v306, 0, v301[v127[v196]], v301[v127[v179[13]]], v301[v127[v179[14]]], 8u, (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
              v191 = v179[15];
              if (v191 == 8)
                goto LABEL_95;
              v192 = v179[16];
            }
            result = sub_223B3962C((uint64_t)&v306, 0, v301[v127[v191]], v301[v127[v192]], v301[v127[v179[17]]], 8u, (uint64_t *)v329, v38 != 0, v69, v18, *(double *)a9.i64, *(double *)v22.i64, *(int8x8_t *)&a11);
LABEL_95:
            ++v125;
            v38 = v304;
            if (v125 == 3)
              return result;
          }
        }
LABEL_39:
        v70 |= 0x20u;
        v18.i64[0] = v325;
        v18.i32[2] = v326;
        v69 = vaddq_f32(v69, v18);
        ++v68;
        v38 += v62;
        if (v66)
          goto LABEL_19;
        goto LABEL_40;
      }
LABEL_14:
      v70 |= 4u;
      v18.i64[0] = v319;
      result = (uint64_t)&v320;
      v18.i32[2] = v320;
      v69 = vaddq_f32(v69, v18);
      ++v68;
      v38 += v47;
      goto LABEL_15;
    }
    v77.i32[3] = v306.i32[3];
    v78.i32[3] = HIDWORD(v307);
    v329[0] = v306;
    v329[1] = v307;
    if (v27[1])
    {
      v79 = 0;
      v80 = 0;
      v81 = 0uLL;
      if (v27[2])
        goto LABEL_23;
    }
    else
    {
      v77.i64[0] = *(_QWORD *)(v32 + 12);
      v77.i32[2] = *(_DWORD *)(v32 + 20);
      v78.i32[3] = 0;
      v81 = vaddq_f32(v77, (float32x4_t)0);
      v80 = v28[1];
      v79 = 1;
      if (v27[2])
      {
LABEL_23:
        v82 = v79;
        if (v27[3])
          goto LABEL_25;
        goto LABEL_24;
      }
    }
    v82 = v79 | 2;
    v78.i64[0] = *(_QWORD *)(v32 + 24);
    v78.i32[2] = *(_DWORD *)(v32 + 32);
    v81 = vaddq_f32(v81, v78);
    ++v79;
    v80 += v28[2];
    if (v27[3])
    {
LABEL_25:
      if (v27[4])
      {
        if (v27[5])
          goto LABEL_27;
      }
      else
      {
        v82 |= 8u;
        v78.i64[0] = *(_QWORD *)(v32 + 48);
        v78.i32[2] = *(_DWORD *)(v32 + 56);
        v81 = vaddq_f32(v81, v78);
        ++v79;
        v80 += v28[4];
        if (v27[5])
        {
LABEL_27:
          if (v27[6])
            goto LABEL_28;
          goto LABEL_49;
        }
      }
      v82 |= 0x10u;
      v78.i64[0] = *(_QWORD *)(v32 + 60);
      v78.i32[2] = *(_DWORD *)(v32 + 68);
      v81 = vaddq_f32(v81, v78);
      ++v79;
      v80 += v28[5];
      if (v27[6])
      {
LABEL_28:
        if (v27[7])
          goto LABEL_29;
LABEL_50:
        v82 |= 0x40u;
        v78.i64[0] = *(_QWORD *)(v32 + 84);
        v78.i32[2] = *(_DWORD *)(v32 + 92);
        v81 = vaddq_f32(v81, v78);
        ++v79;
        v80 += v28[7];
LABEL_29:
        ++*v303;
        v83 = v306;
        v84 = *(double *)&v307;
        *(float32x4_t *)v317 = v306;
        *(_OWORD *)&v317[16] = v307;
        v85 = &byte_22466142C[48 * v82];
        v88 = v85[31];
        v86 = v85 + 31;
        v87 = v88;
        if (v88 == 8)
        {
          v89 = v80;
          LOBYTE(v90) = v82;
LABEL_164:
          v305 = v80;
          if (v79)
          {
            v83.f32[0] = (float)v79;
            v83 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 0);
            v81 = vdivq_f32(v81, v83);
          }
          v331 = v81.i32[2];
          v330 = v81.i64[0];
          v202 = v90;
          v203 = &byte_22466142C[48 * v90];
          v204 = v203[1];
          if (v204 != 8)
          {
            result = sub_223B3962C((uint64_t)v317, 1, v204, v203[2], v203[3], v203[4], &v330, v89 != 0, v81, v83, *(double *)&v307, *(double *)v22.i64, *(int8x8_t *)&a11);
            v205 = v203[5];
            if (v205 != 8)
            {
              result = sub_223B3962C((uint64_t)v317, 1, v205, v203[6], v203[7], v203[8], &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v206 = v203[9];
              if (v206 != 8)
                result = sub_223B3962C((uint64_t)v317, 1, v206, v203[10], v203[11], v203[12], &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
            }
          }
          v207 = &byte_22466142C[48 * v202];
          v210 = v207[13];
          v209 = v207 + 13;
          v208 = v210;
          v211 = v210 == 8;
          if (*v203)
          {
            if (!v211)
            {
              v212 = v209[1];
              if (*(_BYTE *)(v29 + v212))
                result = sub_223B3962C((uint64_t)v317, 0, v208, v212, v209[2], 8u, &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v213 = v209[3];
              if (v213 != 8)
              {
                v214 = v209[4];
                if (*(_BYTE *)(v29 + v214))
                  result = sub_223B3962C((uint64_t)v317, 0, v213, v214, v209[5], 8u, &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
                v215 = v209[6];
                if (v215 != 8)
                {
                  v216 = v209[7];
                  if (*(_BYTE *)(v29 + v216))
                    result = sub_223B3962C((uint64_t)v317, 0, v215, v216, v209[8], 8u, &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
                  v217 = v209[9];
                  if (v217 != 8)
                  {
                    v218 = v209[10];
                    if (*(_BYTE *)(v29 + v218))
                      result = sub_223B3962C((uint64_t)v317, 0, v217, v218, v209[11], 8u, &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
                    v219 = v209[12];
                    if (v219 != 8)
                    {
                      v220 = v209[13];
                      if (*(_BYTE *)(v29 + v220))
                        result = sub_223B3962C((uint64_t)v317, 0, v219, v220, v209[14], 8u, &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
                      v221 = v209[15];
                      if (v221 != 8)
                      {
                        v222 = v209[16];
                        if (*(_BYTE *)(v29 + v222))
                          result = sub_223B3962C((uint64_t)v317, 0, v221, v222, v209[17], 8u, &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
                      }
                    }
                  }
                }
              }
            }
          }
          else if (!v211)
          {
            result = sub_223B3962C((uint64_t)v317, 0, v208, v209[1], v209[2], 8u, &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
            v223 = v209[3];
            if (v223 != 8)
            {
              result = sub_223B3962C((uint64_t)v317, 0, v223, v209[4], v209[5], 8u, &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v224 = v209[6];
              if (v224 != 8)
              {
                result = sub_223B3962C((uint64_t)v317, 0, v224, v209[7], v209[8], 8u, &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
                v225 = v209[9];
                if (v225 != 8)
                {
                  result = sub_223B3962C((uint64_t)v317, 0, v225, v209[10], v209[11], 8u, &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
                  v226 = v209[12];
                  if (v226 != 8)
                  {
                    result = sub_223B3962C((uint64_t)v317, 0, v226, v209[13], v209[14], 8u, &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
                    v227 = v209[15];
                    if (v227 != 8)
                      result = sub_223B3962C((uint64_t)v317, 0, v227, v209[16], v209[17], 8u, &v330, v89 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
                  }
                }
              }
            }
          }
          v228 = 0;
          v302 = &byte_22466142C[48 * v82 + 35];
          while (1)
          {
            v229 = v302[v228];
            if (v229 == 8)
              return result;
            v230 = (unsigned __int8 *)&unk_2246613E4 + 9 * v229;
            v231 = *v230;
            v232 = v32 + 12 * v231;
            v330 = *(_QWORD *)v232;
            v331 = *(_DWORD *)(v232 + 8);
            v358 = v28[v231];
            v348 = *(_BYTE *)(v29 + v231);
            v233 = v230[1];
            v234 = v32 + 12 * v233;
            v332 = *(_QWORD *)v234;
            v333 = *(_DWORD *)(v234 + 8);
            v235 = v27[v233];
            v236 = v28[v233];
            v359 = v28[v233];
            v349 = *(_BYTE *)(v29 + v233);
            v237 = v230[2];
            v238 = v32 + 12 * v237;
            v334 = *(_QWORD *)v238;
            v335 = *(_DWORD *)(v238 + 8);
            v239 = v27[v237];
            v240 = v28[v237];
            LOBYTE(v237) = *(_BYTE *)(v29 + v237);
            v360 = v240;
            v350 = v237;
            v241 = v230[3];
            v242 = v32 + 12 * v241;
            v336 = *(_QWORD *)v242;
            v337 = *(_DWORD *)(v242 + 8);
            v243 = v27[v241];
            result = v28[v241];
            v361 = v28[v241];
            v351 = *(_BYTE *)(v29 + v241);
            v244 = v230[4];
            v245 = v32 + 12 * v244;
            v339 = *(_DWORD *)(v245 + 8);
            v338 = *(_QWORD *)v245;
            v246 = v27[v244];
            v247 = v28[v244];
            v362 = v28[v244];
            v352 = *(_BYTE *)(v29 + v244);
            v248 = v230[5];
            v249 = v32 + 12 * v248;
            v341 = *(_DWORD *)(v249 + 8);
            v340 = *(_QWORD *)v249;
            v250 = v27[v248];
            v251 = v28[v248];
            LOBYTE(v248) = *(_BYTE *)(v29 + v248);
            v363 = v251;
            v353 = v248;
            v252 = v230[6];
            v253 = v32 + 12 * v252;
            v254 = *(_QWORD *)v253;
            v343 = *(_DWORD *)(v253 + 8);
            v342 = v254;
            v255 = v27[v252];
            v256 = v28[v252];
            v364 = v28[v252];
            v354 = *(_BYTE *)(v29 + v252);
            v257 = v230[7];
            v258 = v32 + 12 * v257;
            v259 = *(_QWORD *)v258;
            v345 = *(_DWORD *)(v258 + 8);
            v344 = v259;
            v260 = v27[v257];
            v261 = v28[v257];
            v365 = v28[v257];
            v355 = *(_BYTE *)(v29 + v257);
            if (v235)
            {
              v262 = 0;
              v81 = 0uLL;
              v263 = v305;
              if (v239)
                goto LABEL_202;
            }
            else
            {
              v81.i64[0] = v332;
              v81.i32[2] = v333;
              v83 = 0uLL;
              v81 = vaddq_f32(v81, (float32x4_t)0);
              v263 = v305 + v236;
              v262 = 1;
              if (v239)
              {
LABEL_202:
                v264 = v262;
                if (v243)
                  goto LABEL_203;
                goto LABEL_246;
              }
            }
            v264 = v262 | 2;
            v83.i64[0] = v334;
            v83.i32[2] = v335;
            v81 = vaddq_f32(v81, v83);
            ++v262;
            v263 += v240;
            if (v243)
            {
LABEL_203:
              if (v246)
                goto LABEL_204;
              goto LABEL_247;
            }
LABEL_246:
            v264 |= 4u;
            v83.i64[0] = v336;
            v83.i32[2] = v337;
            v81 = vaddq_f32(v81, v83);
            ++v262;
            v263 += result;
            if (v246)
            {
LABEL_204:
              if (v250)
                goto LABEL_205;
              goto LABEL_248;
            }
LABEL_247:
            v264 |= 8u;
            v83.i64[0] = v338;
            v83.i32[2] = v339;
            v81 = vaddq_f32(v81, v83);
            ++v262;
            v263 += v247;
            if (v250)
            {
LABEL_205:
              if (!v255)
                goto LABEL_249;
              goto LABEL_206;
            }
LABEL_248:
            v264 |= 0x10u;
            v83.i64[0] = v340;
            v83.i32[2] = v341;
            v81 = vaddq_f32(v81, v83);
            ++v262;
            v263 += v251;
            if (!v255)
            {
LABEL_249:
              v264 |= 0x20u;
              v83.i64[0] = v342;
              v83.i32[2] = v343;
              v81 = vaddq_f32(v81, v83);
              ++v262;
              v263 += v256;
              if (v260)
                goto LABEL_207;
              goto LABEL_250;
            }
LABEL_206:
            if (v260)
              goto LABEL_207;
LABEL_250:
            v264 |= 0x40u;
            v83.i64[0] = v344;
            v83.i32[2] = v345;
            v81 = vaddq_f32(v81, v83);
            ++v262;
            v263 += v261;
LABEL_207:
            ++*v303;
            v265 = &byte_22466142C[48 * v264];
            v268 = v265[31];
            v266 = v265 + 31;
            v267 = v268;
            v305 = v263;
            if (v268 != 8)
            {
              if (*(&v348 + v267))
              {
                v269 = (char *)&v330 + 12 * v267;
                v83.i64[0] = *(_QWORD *)v269;
                v83.i32[2] = *((_DWORD *)v269 + 2);
                v264 += -1 << (v267 - 1);
                v81 = vsubq_f32(v81, v83);
                --v262;
                v263 -= (char)*(&v358 + v267);
              }
              v270 = v266[1];
              if ((_DWORD)v270 != 8)
              {
                if (*(&v348 + v270))
                {
                  v271 = (char *)&v330 + 12 * v266[1];
                  v83.i64[0] = *(_QWORD *)v271;
                  v83.i32[2] = *((_DWORD *)v271 + 2);
                  v264 += -1 << (v270 - 1);
                  v81 = vsubq_f32(v81, v83);
                  --v262;
                  v263 -= (char)*(&v358 + v270);
                }
                v272 = v266[2];
                if ((_DWORD)v272 != 8)
                {
                  if (*(&v348 + v272))
                  {
                    v273 = (char *)&v330 + 12 * v266[2];
                    v83.i64[0] = *(_QWORD *)v273;
                    v83.i32[2] = *((_DWORD *)v273 + 2);
                    v264 += -1 << (v272 - 1);
                    v81 = vsubq_f32(v81, v83);
                    --v262;
                    v263 -= (char)*(&v358 + v272);
                  }
                  v274 = v266[3];
                  if ((_DWORD)v274 != 8 && *(&v348 + v274))
                  {
                    v275 = (char *)&v330 + 12 * v274;
                    v83.i64[0] = *(_QWORD *)v275;
                    v83.i32[2] = *((_DWORD *)v275 + 2);
                    v264 += -1 << (v274 - 1);
                    v81 = vsubq_f32(v81, v83);
                    --v262;
                    v263 -= (char)*(&v358 + v274);
                  }
                }
              }
            }
            if (v262)
            {
              v83.f32[0] = (float)v262;
              v83 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 0);
              v81 = vdivq_f32(v81, v83);
            }
            v357 = v81.i32[2];
            v356 = v81.i64[0];
            v276 = v264;
            v277 = &byte_22466142C[48 * v264];
            v278 = v277[1];
            if (v278 != 8)
            {
              result = sub_223B3962C((uint64_t)v329, 1, v230[v278], v230[v277[2]], v230[v277[3]], v230[v277[4]], &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v279 = v277[5];
              if (v279 != 8)
              {
                result = sub_223B3962C((uint64_t)v329, 1, v230[v279], v230[v277[6]], v230[v277[7]], v230[v277[8]], &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
                v280 = v277[9];
                if (v280 != 8)
                  result = sub_223B3962C((uint64_t)v329, 1, v230[v280], v230[v277[10]], v230[v277[11]], v230[v277[12]], &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              }
            }
            v281 = &byte_22466142C[48 * v276];
            v284 = v281[13];
            v283 = v281 + 13;
            v282 = v284;
            v285 = v284 == 8;
            if (*v277)
            {
              if (v285)
                goto LABEL_198;
              v286 = v283[1];
              if (*(&v348 + v286))
                result = sub_223B3962C((uint64_t)v329, 0, v230[v282], v230[v286], v230[v283[2]], 8u, &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v287 = v283[3];
              if (v287 == 8)
                goto LABEL_198;
              v288 = v283[4];
              if (*(&v348 + v288))
                result = sub_223B3962C((uint64_t)v329, 0, v230[v287], v230[v288], v230[v283[5]], 8u, &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v289 = v283[6];
              if (v289 == 8)
                goto LABEL_198;
              v290 = v283[7];
              if (*(&v348 + v290))
                result = sub_223B3962C((uint64_t)v329, 0, v230[v289], v230[v290], v230[v283[8]], 8u, &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v291 = v283[9];
              if (v291 == 8)
                goto LABEL_198;
              v292 = v283[10];
              if (*(&v348 + v292))
                result = sub_223B3962C((uint64_t)v329, 0, v230[v291], v230[v292], v230[v283[11]], 8u, &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v293 = v283[12];
              if (v293 == 8)
                goto LABEL_198;
              v294 = v283[13];
              if (*(&v348 + v294))
                result = sub_223B3962C((uint64_t)v329, 0, v230[v293], v230[v294], v230[v283[14]], 8u, &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v295 = v283[15];
              if (v295 == 8)
                goto LABEL_198;
              v296 = v283[16];
              if (!*(&v348 + v296))
                goto LABEL_198;
            }
            else
            {
              if (v285)
                goto LABEL_198;
              result = sub_223B3962C((uint64_t)v329, 0, v230[v282], v230[v283[1]], v230[v283[2]], 8u, &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v297 = v283[3];
              if (v297 == 8)
                goto LABEL_198;
              result = sub_223B3962C((uint64_t)v329, 0, v230[v297], v230[v283[4]], v230[v283[5]], 8u, &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v298 = v283[6];
              if (v298 == 8)
                goto LABEL_198;
              result = sub_223B3962C((uint64_t)v329, 0, v230[v298], v230[v283[7]], v230[v283[8]], 8u, &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v299 = v283[9];
              if (v299 == 8)
                goto LABEL_198;
              result = sub_223B3962C((uint64_t)v329, 0, v230[v299], v230[v283[10]], v230[v283[11]], 8u, &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v300 = v283[12];
              if (v300 == 8)
                goto LABEL_198;
              result = sub_223B3962C((uint64_t)v329, 0, v230[v300], v230[v283[13]], v230[v283[14]], 8u, &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
              v295 = v283[15];
              if (v295 == 8)
                goto LABEL_198;
              v296 = v283[16];
            }
            result = sub_223B3962C((uint64_t)v329, 0, v230[v295], v230[v296], v230[v283[17]], 8u, &v356, v263 != 0, v81, v83, v84, *(double *)v22.i64, *(int8x8_t *)&a11);
LABEL_198:
            if (++v228 == 3)
              return result;
          }
        }
        if (*(_BYTE *)(v29 + v87))
        {
          v93 = v32 + 12 * v87;
          v83.i64[0] = *(_QWORD *)v93;
          v83.i32[2] = *(_DWORD *)(v93 + 8);
          v90 = v82 + (-1 << (v87 - 1));
          v81 = vsubq_f32(v81, v83);
          --v79;
          v89 = v80 - (char)v28[v87];
          v94 = v86[1];
          if ((_DWORD)v94 == 8)
            goto LABEL_164;
        }
        else
        {
          v89 = v80;
          v90 = v82;
          v94 = v86[1];
          if ((_DWORD)v94 == 8)
            goto LABEL_164;
        }
        if (*(_BYTE *)(v29 + v94))
        {
          v197 = v32 + 12 * v94;
          v83.i64[0] = *(_QWORD *)v197;
          v83.i32[2] = *(_DWORD *)(v197 + 8);
          v90 += -1 << (v94 - 1);
          v81 = vsubq_f32(v81, v83);
          --v79;
          v89 -= (char)v28[v94];
        }
        v198 = v86[2];
        if ((_DWORD)v198 != 8)
        {
          if (*(_BYTE *)(v29 + v198))
          {
            v199 = v32 + 12 * v86[2];
            v83.i64[0] = *(_QWORD *)v199;
            v83.i32[2] = *(_DWORD *)(v199 + 8);
            v90 += -1 << (v198 - 1);
            v81 = vsubq_f32(v81, v83);
            --v79;
            v89 -= (char)v28[v198];
          }
          v200 = v86[3];
          if ((_DWORD)v200 != 8 && *(_BYTE *)(v29 + v200))
          {
            v201 = v32 + 12 * v200;
            v83.i64[0] = *(_QWORD *)v201;
            v83.i32[2] = *(_DWORD *)(v201 + 8);
            v90 += -1 << (v200 - 1);
            v81 = vsubq_f32(v81, v83);
            --v79;
            v89 -= (char)v28[v200];
          }
        }
        goto LABEL_164;
      }
LABEL_49:
      v82 |= 0x20u;
      v78.i64[0] = *(_QWORD *)(v32 + 72);
      v78.i32[2] = *(_DWORD *)(v32 + 80);
      v81 = vaddq_f32(v81, v78);
      ++v79;
      v80 += v28[6];
      if (v27[7])
        goto LABEL_29;
      goto LABEL_50;
    }
LABEL_24:
    v82 |= 4u;
    v78.i64[0] = *(_QWORD *)(v32 + 36);
    v78.i32[2] = *(_DWORD *)(v32 + 44);
    v81 = vaddq_f32(v81, v78);
    ++v79;
    v80 += v28[3];
    goto LABEL_25;
  }
  return result;
}

uint64_t sub_223B3962C(uint64_t result, int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t *a7, int a8, float32x4_t a9, float32x4_t a10, double a11, double a12, int8x8_t a13)
{
  unint64_t **v13;
  char *v14;
  int v15;
  int32x2_t v16;
  int32x2_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int32x2_t *v27;
  char *v28;
  int32x2_t v29;
  int32x2_t *v30;
  char *v31;
  int32x2_t v32;
  int32x2_t *v33;
  char *v34;
  int32x2_t v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  float32x4_t v42;
  uint64_t v43;
  float32x4_t v44;
  uint64_t v45;
  float32x4_t v46;
  uint64_t v47;
  BOOL v48;
  unsigned int v49;
  uint64_t v50;
  float v51;
  float *v52;
  __int128 *v53;
  __int128 v54;
  uint64_t v55;
  _BYTE v56[4];
  unint64_t v57;
  int v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  __int32 v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  __int32 v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  __int32 v70;
  uint64_t v71;
  uint64_t v72;
  __int32 v73;
  uint64_t v74;
  __int32 v75;
  uint64_t v76;
  __int32 v77;

  v13 = *(unint64_t ***)result;
  if (a3 == 8)
  {
    v26 = **v13;
    v58 = *((_DWORD *)*v13 + 2);
    v57 = v26;
    v19 = (uint64_t)v13[1];
    v56[0] = 1;
    v59 = v19;
    if (a4 == 8)
    {
LABEL_3:
      v20 = **v13;
      v62 = *((_DWORD *)*v13 + 2);
      v61 = v20;
      v21 = (uint64_t)v13[1];
      v60 = 1;
      v63 = v21;
      if (a5 == 8)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v14 = (char *)&unk_224661384 + 12 * a3;
    v15 = *((_DWORD *)v14 + 2);
    v16 = *(int32x2_t *)v14;
    v17 = (int32x2_t *)v13[2];
    v18 = v13[3];
    *(int32x2_t *)a10.f32 = *v17;
    *(int32x2_t *)a9.f32 = vadd_s32(*v17, v16);
    v57 = a9.i64[0];
    v58 = v17[1].i32[0] + v15;
    v19 = v18[*((unsigned __int8 *)v13[4] + a3)] + 40 * *((unsigned int *)v13[5] + a3);
    v56[0] = 0;
    v59 = v19;
    if (a4 == 8)
      goto LABEL_3;
  }
  v27 = (int32x2_t *)v13[2];
  v28 = (char *)&unk_224661384 + 12 * a4;
  v29 = *(int32x2_t *)v28;
  LODWORD(v28) = *((_DWORD *)v28 + 2);
  *(int32x2_t *)a10.f32 = *v27;
  *(int32x2_t *)a9.f32 = vadd_s32(*v27, v29);
  v61 = a9.i64[0];
  v62 = v27[1].i32[0] + (_DWORD)v28;
  v21 = v13[3][*((unsigned __int8 *)v13[4] + a4)] + 40 * *((unsigned int *)v13[5] + a4);
  v60 = 0;
  v63 = v21;
  if (a5 == 8)
  {
LABEL_4:
    v22 = **v13;
    v66 = *((_DWORD *)*v13 + 2);
    v65 = v22;
    v23 = (uint64_t)v13[1];
    v64 = 1;
    v67 = v23;
    if (a6 == 8)
      goto LABEL_5;
LABEL_10:
    v33 = (int32x2_t *)v13[2];
    v34 = (char *)&unk_224661384 + 12 * a6;
    v35 = *(int32x2_t *)v34;
    LODWORD(v34) = *((_DWORD *)v34 + 2);
    *(int32x2_t *)a10.f32 = *v33;
    *(int32x2_t *)a9.f32 = vadd_s32(*v33, v35);
    v69 = a9.i64[0];
    v70 = v33[1].i32[0] + (_DWORD)v34;
    v25 = v13[3][*((unsigned __int8 *)v13[4] + a6)] + 40 * *((unsigned int *)v13[5] + a6);
    v68 = 0;
    v71 = v25;
    if (a3 == 8)
      goto LABEL_13;
LABEL_11:
    if (*(char *)(v19 + 6) < 0)
      return result;
    goto LABEL_13;
  }
LABEL_9:
  v30 = (int32x2_t *)v13[2];
  v31 = (char *)&unk_224661384 + 12 * a5;
  v32 = *(int32x2_t *)v31;
  LODWORD(v31) = *((_DWORD *)v31 + 2);
  *(int32x2_t *)a10.f32 = *v30;
  *(int32x2_t *)a9.f32 = vadd_s32(*v30, v32);
  v65 = a9.i64[0];
  v66 = v30[1].i32[0] + (_DWORD)v31;
  v23 = v13[3][*((unsigned __int8 *)v13[4] + a5)] + 40 * *((unsigned int *)v13[5] + a5);
  v64 = 0;
  v67 = v23;
  if (a6 != 8)
    goto LABEL_10;
LABEL_5:
  v24 = **v13;
  v70 = *((_DWORD *)*v13 + 2);
  v69 = v24;
  v25 = (uint64_t)v13[1];
  v68 = 1;
  v71 = v25;
  if (a3 != 8)
    goto LABEL_11;
LABEL_13:
  if ((a4 == 8 || (*(char *)(v21 + 6) & 0x80000000) == 0) && (a5 == 8 || (*(char *)(v23 + 6) & 0x80000000) == 0))
  {
    if (a2)
    {
      if ((a6 == 8 || (*(char *)(v25 + 6) & 0x80000000) == 0)
        && ((a8 & 1) == 0 || a3 != 8 && a4 != 8 && a5 != 8 && a6 != 8))
      {
        v36 = *(_QWORD *)(result + 8);
        if ((_DWORD)v57 == (_DWORD)v61 && (_DWORD)v57 == (_DWORD)v65 && (_DWORD)v57 == (_DWORD)v69)
        {
          v37 = 0;
        }
        else
        {
          v37 = 2;
          if (HIDWORD(v57) == HIDWORD(v61) && HIDWORD(v57) == HIDWORD(v65))
          {
            if (HIDWORD(v57) == HIDWORD(v69))
              v37 = 1;
            else
              v37 = 2;
          }
        }
        v40 = v36 + 12 * a4;
        a9.i64[0] = *(_QWORD *)v40;
        a9.i32[2] = *(_DWORD *)(v40 + 8);
        v41 = v36 + 12 * a3;
        a10.i64[0] = *(_QWORD *)v41;
        a10.i32[2] = *(_DWORD *)(v41 + 8);
        v42 = vsubq_f32(a9, a10);
        v77 = v42.i32[2];
        v76 = v42.i64[0];
        v43 = v36 + 12 * a5;
        v42.i64[0] = *(_QWORD *)v43;
        v42.i32[2] = *(_DWORD *)(v43 + 8);
        v44 = vsubq_f32(v42, a10);
        v75 = v44.i32[2];
        v74 = v44.i64[0];
        v45 = v36 + 12 * a6;
        v44.i64[0] = *(_QWORD *)v45;
        v44.i32[2] = *(_DWORD *)(v45 + 8);
        v46 = vsubq_f32(v44, a10);
        v73 = v46.i32[2];
        v72 = v46.i64[0];
        v47 = 2 * (v37 == 0);
        v48 = v37 > 1;
        if (v37 <= 1)
          v49 = v37 + 1;
        else
          v49 = 0;
        if (v48)
          v47 = 1;
        v50 = 4 * v49;
        v51 = *(float *)((char *)&v74 + v50);
        v52 = (float *)((unint64_t)&v74 & 0xFFFFFFFFFFFFFFF3 | (4 * (v47 & 3)));
        a10.f32[0] = (float)(v51 * *(float *)((unint64_t)&v76 | (4 * v47)))
                   - (float)(*v52 * *(float *)((char *)&v76 + v50));
        *(float *)&a11 = *v52 * *(float *)((char *)&v72 + v50);
        LODWORD(a12) = *(_DWORD *)((unint64_t)&v72 & 0xFFFFFFFFFFFFFFF3 | (4 * (v47 & 3)));
        if ((float)(a10.f32[0] * (float)(*(float *)&a11 - (float)(v51 * *(float *)&a12))) >= 0.0)
        {
          v55 = 0x200000003;
          v53 = &xmmword_224662C58;
        }
        else
        {
          v55 = 0x300000000;
          v53 = &xmmword_224662C70;
        }
        return sub_223B2937C(*(_QWORD *)(result + 16), 1, (uint64_t)v56, (unsigned int *)&v54, (unsigned int *)((unint64_t)&v54 | 0xC), a7, a8, *(double *)v53, a10, a11, *(int8x8_t *)&a12, a13);
      }
    }
    else
    {
      v39 = a5 == 8 || a4 == 8 || a3 == 8;
      if (!v39 || !a8)
        return sub_223B2937C(*(_QWORD *)(result + 16), 0, (uint64_t)v56, dword_224662C4C, dword_224662C4C, a7, a8, *(double *)a9.i64, a10, a11, *(int8x8_t *)&a12, a13);
    }
  }
  return result;
}

uint64_t sub_223B39B04()
{
  uint64_t v0;
  uint64_t v1;
  float32x4_t v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  float32x4_t v10;
  double v11;
  double v12;
  double v13;
  float32x4_t v14;
  double v15;
  double v16;
  double v17;
  float32x4_t v18;
  double v19;
  double v20;
  double v21;
  float32x4_t v22;
  double v23;
  double v24;
  double v25;
  float32x4_t v26;
  double v27;
  double v28;
  double v29;
  float32x4_t v30;
  double v31;
  double v32;
  double v33;
  float32x4_t v34;
  double v35;
  double v36;
  double v37;
  float32x4_t v38;
  double v39;
  double v40;
  double v41;
  float32x4_t v42;
  double v43;
  double v44;
  double v45;
  float32x4_t v46;
  double v47;
  double v48;
  double v49;
  float32x4_t v50;
  double v51;
  double v52;
  double v53;
  float32x4_t v54;
  double v55;
  double v56;
  double v57;
  float32x4_t v58;
  double v59;
  double v60;
  double v61;
  float32x4_t v62;
  double v63;
  double v64;
  double v65;
  float32x4_t v66;
  double v67;
  double v68;
  double v69;
  float32x4_t v70;
  double v71;
  double v72;
  double v73;
  float32x4_t v74;
  double v75;
  double v76;
  double v77;
  float32x4_t v78;
  double v79;
  double v80;
  double v81;
  float32x4_t v82;
  double v83;
  double v84;
  double v85;
  float32x4_t v86;
  double v87;
  double v88;
  double v89;
  float32x4_t v90;
  double v91;
  double v92;
  double v93;
  float32x4_t v94;
  double v95;
  double v96;
  double v97;
  float32x4_t v98;
  double v99;
  double v100;
  double v101;
  float32x4_t v102;
  double v103;
  double v104;
  double v105;
  float32x4_t v106;
  double v107;
  double v108;
  double v109;
  float32x4_t v110;
  double v111;
  double v112;
  double v113;
  float32x4_t v114;
  double v115;
  double v116;
  double v117;
  float32x4_t v118;
  double v119;
  double v120;
  double v121;
  float32x4_t v122;
  double v123;
  double v124;
  double v125;
  float32x4_t v126;
  double v127;
  double v128;
  double v129;
  float32x4_t v130;
  double v131;
  double v132;
  double v133;
  float32x4_t v134;
  double v135;
  double v136;
  double v137;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  _OWORD v145[2];
  _OWORD v146[5];
  uint64_t v147;
  _OWORD v148[2];
  _OWORD v149[5];
  uint64_t v150;
  _OWORD v151[2];
  _OWORD v152[5];
  uint64_t v153;
  _OWORD v154[2];
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  _OWORD v161[2];
  _OWORD v162[5];
  uint64_t v163;
  _OWORD v164[2];
  _OWORD v165[5];
  uint64_t v166;
  _OWORD v167[2];
  _OWORD v168[5];
  uint64_t v169;
  _OWORD v170[2];
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  _OWORD v177[2];
  _OWORD v178[5];
  uint64_t v179;
  _OWORD v180[2];
  _OWORD v181[5];
  uint64_t v182;
  _OWORD v183[2];
  _OWORD v184[5];
  uint64_t v185;
  _OWORD v186[2];
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  _OWORD v193[2];
  _OWORD v194[5];
  uint64_t v195;
  _OWORD v196[2];
  _OWORD v197[5];
  uint64_t v198;
  _OWORD v199[2];
  _OWORD v200[5];
  uint64_t v201;
  _OWORD v202[2];
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  _OWORD v209[2];
  _OWORD v210[5];
  uint64_t v211;
  _OWORD v212[2];
  _OWORD v213[5];
  uint64_t v214;
  _OWORD v215[2];
  _OWORD v216[5];
  uint64_t v217;
  _OWORD v218[2];
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  _OWORD v225[2];
  _OWORD v226[5];
  uint64_t v227;
  _OWORD v228[2];
  _OWORD v229[5];
  uint64_t v230;
  _OWORD v231[2];
  _OWORD v232[5];
  uint64_t v233;
  _OWORD v234[2];
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  uint64_t v240;
  _OWORD v241[2];
  _OWORD v242[5];
  uint64_t v243;
  _OWORD v244[2];
  _OWORD v245[5];
  uint64_t v246;
  _OWORD v247[2];
  _OWORD v248[5];
  uint64_t v249;
  _OWORD v250[2];
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  uint64_t v256;
  _OWORD v257[2];
  _OWORD v258[5];
  uint64_t v259;
  _OWORD v260[2];
  _OWORD v261[5];
  uint64_t v262;
  _OWORD v263[2];
  _OWORD v264[5];
  uint64_t v265;
  _OWORD v266[2];
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  uint64_t v272;
  _OWORD v273[2];
  _OWORD v274[5];
  uint64_t v275;
  _OWORD v276[2];
  _OWORD v277[5];
  uint64_t v278;
  _OWORD v279[2];
  _OWORD v280[5];
  uint64_t v281;
  _OWORD v282[2];
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  uint64_t v288;
  _OWORD v289[2];
  _OWORD v290[5];
  uint64_t v291;
  _OWORD v292[2];
  _OWORD v293[5];
  uint64_t v294;
  _OWORD v295[2];
  _OWORD v296[5];
  uint64_t v297;
  _OWORD v298[2];
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  uint64_t v304;
  _OWORD v305[2];
  _OWORD v306[5];
  uint64_t v307;
  _OWORD v308[2];
  _OWORD v309[5];
  uint64_t v310;
  _OWORD v311[2];
  _OWORD v312[5];
  uint64_t v313;
  _OWORD v314[2];
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  uint64_t v320;
  _OWORD v321[2];
  _OWORD v322[5];
  uint64_t v323;
  _OWORD v324[2];
  _OWORD v325[5];
  uint64_t v326;
  _OWORD v327[2];
  _OWORD v328[5];
  uint64_t v329;
  _OWORD v330[2];
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  uint64_t v336;
  _OWORD v337[2];
  _OWORD v338[5];
  uint64_t v339;
  _OWORD v340[2];
  _OWORD v341[5];
  uint64_t v342;
  _OWORD v343[2];
  _OWORD v344[5];
  uint64_t v345;
  _OWORD v346[2];
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  uint64_t v352;
  _OWORD v353[2];
  _OWORD v354[5];
  uint64_t v355;
  _OWORD v356[2];
  _OWORD v357[5];
  uint64_t v358;
  _OWORD v359[2];
  _OWORD v360[5];
  uint64_t v361;
  _OWORD v362[2];
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  uint64_t v368;
  _OWORD v369[2];
  _OWORD v370[5];
  uint64_t v371;
  _OWORD v372[2];
  _OWORD v373[5];
  uint64_t v374;
  _OWORD v375[2];
  _OWORD v376[5];
  uint64_t v377;
  _OWORD v378[2];
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  uint64_t v384;
  _OWORD v385[2];
  _OWORD v386[5];
  uint64_t v387;
  _OWORD v388[2];
  _OWORD v389[5];
  uint64_t v390;
  _OWORD v391[2];
  _OWORD v392[5];
  uint64_t v393;
  _OWORD v394[2];
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  uint64_t v400;
  _OWORD v401[2];
  _OWORD v402[5];
  uint64_t v403;
  _OWORD v404[2];
  _OWORD v405[5];
  uint64_t v406;
  _OWORD v407[2];
  _OWORD v408[5];
  uint64_t v409;
  _OWORD v410[2];
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  uint64_t v416;
  _OWORD v417[2];
  _OWORD v418[5];
  uint64_t v419;
  _OWORD v420[2];
  _OWORD v421[5];
  uint64_t v422;
  _OWORD v423[2];
  _OWORD v424[5];
  uint64_t v425;
  _OWORD v426[2];
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  uint64_t v432;
  _OWORD v433[2];
  _OWORD v434[5];
  uint64_t v435;
  _OWORD v436[2];
  _OWORD v437[5];
  uint64_t v438;
  _OWORD v439[2];
  _OWORD v440[5];
  uint64_t v441;
  _OWORD v442[2];
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  uint64_t v448;
  _OWORD v449[2];
  _OWORD v450[5];
  uint64_t v451;
  _OWORD v452[2];
  _OWORD v453[5];
  uint64_t v454;
  _OWORD v455[2];
  _OWORD v456[5];
  uint64_t v457;
  _OWORD v458[2];
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  uint64_t v464;
  _OWORD v465[2];
  _OWORD v466[5];
  uint64_t v467;
  _OWORD v468[2];
  _OWORD v469[5];
  uint64_t v470;
  _OWORD v471[2];
  _OWORD v472[5];
  uint64_t v473;
  _OWORD v474[2];
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  uint64_t v480;
  _OWORD v481[2];
  _OWORD v482[5];
  uint64_t v483;
  _OWORD v484[2];
  _OWORD v485[5];
  uint64_t v486;
  _OWORD v487[2];
  _OWORD v488[5];
  uint64_t v489;
  _OWORD v490[2];
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  uint64_t v496;
  _OWORD v497[2];
  _OWORD v498[5];
  uint64_t v499;
  _OWORD v500[2];
  _OWORD v501[5];
  uint64_t v502;
  _OWORD v503[2];
  _OWORD v504[5];
  uint64_t v505;
  _OWORD v506[2];
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  uint64_t v512;
  _OWORD v513[2];
  _OWORD v514[5];
  uint64_t v515;
  _OWORD v516[2];
  _OWORD v517[5];
  uint64_t v518;
  _OWORD v519[2];
  _OWORD v520[5];
  uint64_t v521;
  _OWORD v522[2];
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  uint64_t v528;
  _OWORD v529[2];
  _OWORD v530[5];
  uint64_t v531;
  _OWORD v532[2];
  _OWORD v533[5];
  uint64_t v534;
  _OWORD v535[2];
  _OWORD v536[5];
  uint64_t v537;
  _OWORD v538[2];
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  uint64_t v544;
  _OWORD v545[2];
  _OWORD v546[5];
  uint64_t v547;
  _OWORD v548[2];
  _OWORD v549[5];
  uint64_t v550;
  _OWORD v551[2];
  _OWORD v552[5];
  uint64_t v553;
  _OWORD v554[2];
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  uint64_t v560;
  _OWORD v561[2];
  _OWORD v562[5];
  uint64_t v563;
  _OWORD v564[2];
  _OWORD v565[5];
  uint64_t v566;
  _OWORD v567[2];
  _OWORD v568[5];
  uint64_t v569;
  _OWORD v570[2];
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  uint64_t v576;
  _OWORD v577[2];
  _OWORD v578[5];
  uint64_t v579;
  _OWORD v580[2];
  _OWORD v581[5];
  uint64_t v582;
  _OWORD v583[2];
  _OWORD v584[5];
  uint64_t v585;
  _OWORD v586[2];
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  uint64_t v592;
  _OWORD v593[2];
  _OWORD v594[5];
  uint64_t v595;
  _OWORD v596[2];
  _OWORD v597[5];
  uint64_t v598;
  _OWORD v599[2];
  _OWORD v600[5];
  uint64_t v601;
  _OWORD v602[2];
  __int128 v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  uint64_t v608;
  _OWORD v609[2];
  _OWORD v610[5];
  uint64_t v611;
  _OWORD v612[2];
  _OWORD v613[5];
  uint64_t v614;
  _OWORD v615[2];
  _OWORD v616[5];
  uint64_t v617;
  _OWORD v618[2];
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  uint64_t v624;
  _OWORD v625[2];
  _OWORD v626[5];
  uint64_t v627;
  _OWORD v628[2];
  _OWORD v629[5];
  uint64_t v630;
  _OWORD v631[2];
  _OWORD v632[5];
  uint64_t v633;
  _OWORD v634[2];
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  uint64_t v640;
  _OWORD v641[2];
  _OWORD v642[5];
  uint64_t v643;
  _OWORD v644[2];
  _OWORD v645[5];
  uint64_t v646;
  _OWORD v647[2];
  _OWORD v648[5];
  uint64_t v649;
  _OWORD v650[2];
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  uint64_t v656;
  _OWORD v657[2];
  _OWORD v658[5];
  uint64_t v659;
  _OWORD v660[2];
  _OWORD v661[5];
  uint64_t v662;
  _OWORD v663[2];
  _OWORD v664[5];
  uint64_t v665;
  _OWORD v666[2];
  __int128 v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  uint64_t v672;
  _OWORD v673[2];
  _OWORD v674[5];
  uint64_t v675;
  _OWORD v676[2];
  _OWORD v677[5];
  uint64_t v678;
  _OWORD v679[2];
  _OWORD v680[5];
  uint64_t v681;
  _OWORD v682[2];
  __int128 v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  uint64_t v688;
  _OWORD v689[2];
  _OWORD v690[5];
  uint64_t v691;
  _OWORD v692[2];
  _OWORD v693[5];
  uint64_t v694;
  _OWORD v695[2];
  _OWORD v696[5];
  uint64_t v697;
  _OWORD v698[2];
  __int128 v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  __int128 v703;
  uint64_t v704;
  _OWORD v705[2];
  _OWORD v706[5];
  uint64_t v707;
  _OWORD v708[2];
  _OWORD v709[5];
  uint64_t v710;
  _OWORD v711[2];
  _OWORD v712[5];
  uint64_t v713;
  _OWORD v714[2];
  _OWORD v715[5];
  uint64_t v716;
  _OWORD v717[2];
  _OWORD v718[5];
  uint64_t v719;
  _OWORD v720[2];
  _OWORD v721[5];
  uint64_t v722;
  _OWORD v723[2];
  _OWORD v724[5];
  uint64_t v725;
  _OWORD v726[2];
  _OWORD v727[5];
  uint64_t v728;
  _OWORD v729[2];
  _OWORD v730[5];
  uint64_t v731;
  _OWORD v732[2];
  _OWORD v733[5];
  uint64_t v734;
  _OWORD v735[7];
  uint64_t v736;
  _OWORD v737[2];
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  _QWORD v889[2];

  v0 = MEMORY[0x24BDAC7A8]();
  v6 = v1;
  v7 = v0;
  v889[1] = *MEMORY[0x24BDAC8D0];
  v738 = 0;
  v145[0] = xmmword_224663208;
  v145[1] = *(_OWORD *)dbl_224663218;
  if ((v0 & 0x10200001020) != 0)
    sub_223B37328(v1, 3, 0, 3, (uint64_t)&v738, (uint64_t)v145, COERCE_DOUBLE(0x640000002DLL), COERCE_DOUBLE(0x14000000109), v2, v3, v4, v5);
  v8 = *(_OWORD *)(v6 + 48);
  v141 = *(_OWORD *)(v6 + 32);
  v142 = v8;
  v143 = *(_OWORD *)(v6 + 64);
  v144 = *(_QWORD *)(v6 + 80);
  v9 = *(_OWORD *)(v6 + 16);
  v139 = *(_OWORD *)v6;
  v140 = v9;
  v739 = 0;
  v148[0] = xmmword_224663228;
  v148[1] = *(_OWORD *)dbl_224663238;
  if ((v7 & 0xA000000A0) != 0)
    sub_223B37328((uint64_t)&v139, 3, 1, 2, (uint64_t)&v739, (uint64_t)v148, COERCE_DOUBLE(0x2F0000002ELL), COERCE_DOUBLE(0x10B0000010ALL), v2, v3, v4, v5);
  v146[2] = v141;
  v146[3] = v142;
  v146[4] = v143;
  v147 = v144;
  v146[0] = v139;
  v146[1] = v140;
  v740 = 0;
  v151[0] = xmmword_224663248;
  v151[1] = *(_OWORD *)dbl_224663258;
  if ((v7 & 0x50A000050A0) != 0)
    sub_223B37328((uint64_t)v146, 3, 1, 3, (uint64_t)&v740, (uint64_t)v151, COERCE_DOUBLE(0x660000002FLL), COERCE_DOUBLE(0x1420000010BLL), v2, v3, v4, v5);
  v149[2] = v141;
  v149[3] = v142;
  v149[4] = v143;
  v150 = v144;
  v149[0] = v139;
  v149[1] = v140;
  v741 = 0;
  v154[0] = xmmword_224663268;
  v154[1] = *(_OWORD *)dbl_224663278;
  if ((v7 & 0x40) != 0)
    sub_223B37328((uint64_t)v149, 2, 2, 0, (uint64_t)&v741, (uint64_t)v154, COERCE_DOUBLE(0x3100000030), COERCE_DOUBLE(0x3500000034), v2, v3, v4, v5);
  v152[2] = v141;
  v152[3] = v142;
  v152[4] = v143;
  v153 = v144;
  v152[0] = v139;
  v152[1] = v140;
  v742 = 0;
  v161[0] = xmmword_224663288;
  v161[1] = *(_OWORD *)dbl_224663298;
  if ((v7 & 0xC0) != 0)
    sub_223B37328((uint64_t)v152, 2, 2, 1, (uint64_t)&v742, (uint64_t)v161, COERCE_DOUBLE(0x3800000031), COERCE_DOUBLE(0x3C00000035), v2, v3, v4, v5);
  v157 = v141;
  v158 = v142;
  v159 = v143;
  v160 = v144;
  v155 = v139;
  v156 = v140;
  v743 = 0;
  v164[0] = xmmword_2246632A8;
  v164[1] = *(_OWORD *)dbl_2246632B8;
  if ((v7 & 0x100040) != 0)
    sub_223B37328((uint64_t)&v155, 2, 3, 0, (uint64_t)&v743, (uint64_t)v164, COERCE_DOUBLE(0x3300000032), COERCE_DOUBLE(0x3700000036), v2, v3, v4, v5);
  v162[2] = v141;
  v162[3] = v142;
  v162[4] = v143;
  v163 = v144;
  v162[0] = v139;
  v162[1] = v140;
  v744 = 0;
  v167[0] = xmmword_2246632C8;
  v167[1] = *(_OWORD *)dbl_2246632D8;
  if ((v7 & 0x3000C0) != 0)
    sub_223B37328((uint64_t)v162, 2, 3, 1, (uint64_t)&v744, (uint64_t)v167, COERCE_DOUBLE(0x3A00000033), COERCE_DOUBLE(0x3E00000037), v2, v3, v4, v5);
  v165[2] = v141;
  v165[3] = v142;
  v165[4] = v143;
  v166 = v144;
  v165[0] = v139;
  v165[1] = v140;
  v745 = 0;
  v170[0] = xmmword_2246632E8;
  v170[1] = *(_OWORD *)dbl_2246632F8;
  if ((v7 & 0x400000040) != 0)
    sub_223B37328((uint64_t)v165, 3, 2, 0, (uint64_t)&v745, (uint64_t)v170, COERCE_DOUBLE(0x3500000034), COERCE_DOUBLE(0x11100000110), v2, v3, v4, v5);
  v168[2] = v141;
  v168[3] = v142;
  v168[4] = v143;
  v169 = v144;
  v168[0] = v139;
  v168[1] = v140;
  v746 = 0;
  v177[0] = xmmword_224663308;
  v177[1] = *(_OWORD *)dbl_224663318;
  if ((v7 & 0xC000000C0) != 0)
    sub_223B37328((uint64_t)v168, 3, 2, 1, (uint64_t)&v746, (uint64_t)v177, COERCE_DOUBLE(0x3C00000035), COERCE_DOUBLE(0x11800000111), v2, v3, v4, v5);
  v173 = v141;
  v174 = v142;
  v175 = v143;
  v176 = v144;
  v171 = v139;
  v172 = v140;
  v747 = 0;
  v180[0] = xmmword_224663328;
  v180[1] = *(_OWORD *)dbl_224663338;
  if ((v7 & 0x1000400100040) != 0)
    sub_223B37328((uint64_t)&v171, 3, 3, 0, (uint64_t)&v747, (uint64_t)v180, COERCE_DOUBLE(0x3700000036), COERCE_DOUBLE(0x11300000112), v2, v3, v4, v5);
  v178[2] = v141;
  v178[3] = v142;
  v178[4] = v143;
  v179 = v144;
  v178[0] = v139;
  v178[1] = v140;
  v748 = 0;
  v183[0] = xmmword_224663348;
  v183[1] = *(_OWORD *)dbl_224663358;
  if ((v7 & 0x3000C003000C0) != 0)
    sub_223B37328((uint64_t)v178, 3, 3, 1, (uint64_t)&v748, (uint64_t)v183, COERCE_DOUBLE(0x3E00000037), COERCE_DOUBLE(0x11A00000113), v2, v3, v4, v5);
  v181[2] = v141;
  v181[3] = v142;
  v181[4] = v143;
  v182 = v144;
  v181[0] = v139;
  v181[1] = v140;
  v749 = 0;
  v186[0] = xmmword_224663368;
  v186[1] = *(_OWORD *)dbl_224663378;
  if ((v7 & 0x80) != 0)
    sub_223B37328((uint64_t)v181, 2, 2, 2, (uint64_t)&v749, (uint64_t)v186, COERCE_DOUBLE(0x3900000038), COERCE_DOUBLE(0x3D0000003CLL), v2, v3, v4, v5);
  v184[2] = v141;
  v184[3] = v142;
  v184[4] = v143;
  v185 = v144;
  v184[0] = v139;
  v184[1] = v140;
  v750 = 0;
  v193[0] = xmmword_224663388;
  v193[1] = *(_OWORD *)dbl_224663398;
  if ((v7 & 0x4080) != 0)
    sub_223B37328((uint64_t)v184, 2, 2, 3, (uint64_t)&v750, (uint64_t)v193, COERCE_DOUBLE(0x7000000039), COERCE_DOUBLE(0x740000003DLL), v2, v3, v4, v5);
  v189 = v157;
  v190 = v158;
  v191 = v159;
  v192 = v160;
  v187 = v155;
  v188 = v156;
  v751 = 0;
  v196[0] = xmmword_2246633A8;
  v196[1] = *(_OWORD *)dbl_2246633B8;
  if ((v7 & 0x200080) != 0)
    sub_223B37328((uint64_t)&v187, 2, 3, 2, (uint64_t)&v751, (uint64_t)v196, COERCE_DOUBLE(0x3B0000003ALL), COERCE_DOUBLE(0x3F0000003ELL), v2, v3, v4, v5);
  v194[2] = v157;
  v194[3] = v158;
  v194[4] = v159;
  v195 = v160;
  v194[0] = v155;
  v194[1] = v156;
  v752 = 0;
  v199[0] = xmmword_2246633C8;
  v199[1] = *(_OWORD *)dbl_2246633D8;
  if ((v7 & 0x10204080) != 0)
    sub_223B37328((uint64_t)v194, 2, 3, 3, (uint64_t)&v752, (uint64_t)v199, COERCE_DOUBLE(0x720000003BLL), COERCE_DOUBLE(0x760000003FLL), v2, v3, v4, v5);
  v197[2] = v157;
  v197[3] = v158;
  v197[4] = v159;
  v198 = v160;
  v197[0] = v155;
  v197[1] = v156;
  v753 = 0;
  v202[0] = xmmword_2246633E8;
  v202[1] = *(_OWORD *)dbl_2246633F8;
  if ((v7 & 0x800000080) != 0)
    sub_223B37328((uint64_t)v197, 3, 2, 2, (uint64_t)&v753, (uint64_t)v202, COERCE_DOUBLE(0x3D0000003CLL), COERCE_DOUBLE(0x11900000118), v2, v3, v4, v5);
  v200[2] = v157;
  v200[3] = v158;
  v200[4] = v159;
  v201 = v160;
  v200[0] = v155;
  v200[1] = v156;
  v754 = 0;
  v209[0] = xmmword_224663408;
  v209[1] = *(_OWORD *)dbl_224663418;
  if ((v7 & 0x40800004080) != 0)
    sub_223B37328((uint64_t)v200, 3, 2, 3, (uint64_t)&v754, (uint64_t)v209, COERCE_DOUBLE(0x740000003DLL), COERCE_DOUBLE(0x15000000119), v2, v3, v4, v5);
  v205 = v173;
  v206 = v174;
  v207 = v175;
  v208 = v176;
  v203 = v171;
  v204 = v172;
  v755 = 0;
  v212[0] = xmmword_224663428;
  v212[1] = *(_OWORD *)dbl_224663438;
  if ((v7 & 0x2000800200080) != 0)
    sub_223B37328((uint64_t)&v203, 3, 3, 2, (uint64_t)&v755, (uint64_t)v212, COERCE_DOUBLE(0x3F0000003ELL), COERCE_DOUBLE(0x11B0000011ALL), v2, v3, v4, v5);
  v210[2] = v173;
  v210[3] = v174;
  v210[4] = v175;
  v211 = v176;
  v210[0] = v171;
  v210[1] = v172;
  v756 = 0;
  v215[0] = xmmword_224663448;
  v215[1] = *(_OWORD *)dbl_224663458;
  if ((v7 & 0x102040810204080) != 0)
    sub_223B37328((uint64_t)v210, 3, 3, 3, (uint64_t)&v756, (uint64_t)v215, COERCE_DOUBLE(0x760000003FLL), COERCE_DOUBLE(0x1520000011BLL), v2, v3, v4, v5);
  v213[2] = v173;
  v213[3] = v174;
  v213[4] = v175;
  v214 = v176;
  v213[0] = v171;
  v213[1] = v172;
  v757 = 0;
  v218[0] = xmmword_224663468;
  v218[1] = *(_OWORD *)dbl_224663478;
  if ((v7 & 0x100) != 0)
    sub_223B37328((uint64_t)v213, 0, 0, 4, (uint64_t)&v757, (uint64_t)v218, COERCE_DOUBLE(0x4100000040), COERCE_DOUBLE(0x4500000044), v2, v3, v4, v5);
  v216[2] = v173;
  v216[3] = v174;
  v216[4] = v175;
  v217 = v176;
  v216[0] = v171;
  v216[1] = v172;
  v758 = 0;
  v225[0] = xmmword_224663488;
  v225[1] = *(_OWORD *)dbl_224663498;
  if ((v7 & 0x300) != 0)
    sub_223B37328((uint64_t)v216, 0, 0, 5, (uint64_t)&v758, (uint64_t)v225, COERCE_DOUBLE(0x4800000041), COERCE_DOUBLE(0x4C00000045), v2, v3, v4, v5);
  v221 = v189;
  v222 = v190;
  v223 = v191;
  v224 = v192;
  v219 = v187;
  v220 = v188;
  v759 = 0;
  v228[0] = xmmword_2246634A8;
  v228[1] = *(_OWORD *)dbl_2246634B8;
  if ((v7 & 0x500) != 0)
    sub_223B37328((uint64_t)&v219, 0, 1, 4, (uint64_t)&v759, (uint64_t)v228, COERCE_DOUBLE(0x4300000042), COERCE_DOUBLE(0x4700000046), v2, v3, v4, v5);
  v226[2] = v189;
  v226[3] = v190;
  v226[4] = v191;
  v227 = v192;
  v226[0] = v187;
  v226[1] = v188;
  v760 = 0;
  v231[0] = xmmword_2246634C8;
  v231[1] = *(_OWORD *)dbl_2246634D8;
  if ((v7 & 0xF00) != 0)
    sub_223B37328((uint64_t)v226, 0, 1, 5, (uint64_t)&v760, (uint64_t)v231, COERCE_DOUBLE(0x4A00000043), COERCE_DOUBLE(0x4E00000047), v2, v3, v4, v5);
  v229[2] = v189;
  v229[3] = v190;
  v229[4] = v191;
  v230 = v192;
  v229[0] = v187;
  v229[1] = v188;
  v761 = 0;
  v234[0] = xmmword_2246634E8;
  v234[1] = *(_OWORD *)dbl_2246634F8;
  if ((v7 & 0x1100) != 0)
    sub_223B37328((uint64_t)v229, 1, 0, 4, (uint64_t)&v761, (uint64_t)v234, COERCE_DOUBLE(0x4500000044), COERCE_DOUBLE(0x6100000060), v2, v3, v4, v5);
  v232[2] = v189;
  v232[3] = v190;
  v232[4] = v191;
  v233 = v192;
  v232[0] = v187;
  v232[1] = v188;
  v762 = 0;
  v241[0] = xmmword_224663508;
  v241[1] = *(_OWORD *)dbl_224663518;
  if ((v7 & 0x3300) != 0)
    sub_223B37328((uint64_t)v232, 1, 0, 5, (uint64_t)&v762, (uint64_t)v241, COERCE_DOUBLE(0x4C00000045), COERCE_DOUBLE(0x6800000061), v2, v3, v4, v5);
  v237 = v205;
  v238 = v206;
  v239 = v207;
  v240 = v208;
  v235 = v203;
  v236 = v204;
  v763 = 0;
  v244[0] = xmmword_224663528;
  v244[1] = *(_OWORD *)dbl_224663538;
  if ((v7 & 0x5500) != 0)
    sub_223B37328((uint64_t)&v235, 1, 1, 4, (uint64_t)&v763, (uint64_t)v244, COERCE_DOUBLE(0x4700000046), COERCE_DOUBLE(0x6300000062), v2, v3, v4, v5);
  v242[2] = v205;
  v242[3] = v206;
  v242[4] = v207;
  v243 = v208;
  v242[0] = v203;
  v242[1] = v204;
  v764 = 0;
  v247[0] = xmmword_224663548;
  v247[1] = *(_OWORD *)dbl_224663558;
  if ((v7 & 0xFF00) != 0)
    sub_223B37328((uint64_t)v242, 1, 1, 5, (uint64_t)&v764, (uint64_t)v247, COERCE_DOUBLE(0x4E00000047), COERCE_DOUBLE(0x6A00000063), v2, v3, v4, v5);
  v245[2] = v205;
  v245[3] = v206;
  v245[4] = v207;
  v246 = v208;
  v245[0] = v203;
  v245[1] = v204;
  v765 = 0;
  v250[0] = xmmword_224663568;
  v250[1] = *(_OWORD *)dbl_224663578;
  if ((v7 & 0x200) != 0)
    sub_223B37328((uint64_t)v245, 0, 0, 6, (uint64_t)&v765, (uint64_t)v250, COERCE_DOUBLE(0x4900000048), COERCE_DOUBLE(0x4D0000004CLL), v2, v3, v4, v5);
  v248[2] = v205;
  v248[3] = v206;
  v248[4] = v207;
  v249 = v208;
  v248[0] = v203;
  v248[1] = v204;
  v766 = 0x100010001000100;
  v257[0] = xmmword_224663588;
  v257[1] = *(_OWORD *)dbl_224663598;
  sub_223B37328((uint64_t)v248, 0, 0, 7, (uint64_t)&v766, (uint64_t)v257, COERCE_DOUBLE(73), COERCE_DOUBLE(0x40000004DLL), v2, v3, v4, v5);
  v253 = v205;
  v254 = v206;
  v255 = v207;
  v256 = v208;
  v251 = v203;
  v252 = v204;
  v767 = 0;
  v260[0] = xmmword_2246635A8;
  v260[1] = *(_OWORD *)dbl_2246635B8;
  if ((v7 & 0xA00) != 0)
    sub_223B37328((uint64_t)&v251, 0, 1, 6, (uint64_t)&v767, (uint64_t)v260, COERCE_DOUBLE(0x4B0000004ALL), COERCE_DOUBLE(0x4F0000004ELL), v10, v11, v12, v13);
  v258[2] = v221;
  v258[3] = v222;
  v258[4] = v223;
  v259 = v224;
  v258[0] = v219;
  v258[1] = v220;
  v768 = 0x100010001000100;
  v263[0] = xmmword_2246635C8;
  v263[1] = *(_OWORD *)dbl_2246635D8;
  sub_223B37328((uint64_t)v258, 0, 1, 7, (uint64_t)&v768, (uint64_t)v263, COERCE_DOUBLE(0x20000004BLL), COERCE_DOUBLE(0x60000004FLL), v10, v11, v12, v13);
  v261[2] = v221;
  v261[3] = v222;
  v261[4] = v223;
  v262 = v224;
  v261[0] = v219;
  v261[1] = v220;
  v769 = 0;
  v266[0] = xmmword_2246635E8;
  v266[1] = *(_OWORD *)dbl_2246635F8;
  if ((v7 & 0x2200) != 0)
    sub_223B37328((uint64_t)v261, 1, 0, 6, (uint64_t)&v769, (uint64_t)v266, COERCE_DOUBLE(0x4D0000004CLL), COERCE_DOUBLE(0x6900000068), v14, v15, v16, v17);
  v264[2] = v221;
  v264[3] = v222;
  v264[4] = v223;
  v265 = v224;
  v264[0] = v219;
  v264[1] = v220;
  v770 = 0x100010001000100;
  v273[0] = xmmword_224663608;
  v273[1] = *(_OWORD *)dbl_224663618;
  sub_223B37328((uint64_t)v264, 1, 0, 7, (uint64_t)&v770, (uint64_t)v273, COERCE_DOUBLE(0x40000004DLL), COERCE_DOUBLE(0x2000000069), v14, v15, v16, v17);
  v269 = v221;
  v270 = v222;
  v271 = v223;
  v272 = v224;
  v267 = v219;
  v268 = v220;
  v771 = 0;
  v276[0] = xmmword_224663628;
  v276[1] = *(_OWORD *)dbl_224663638;
  if ((v7 & 0xAA00) != 0)
    sub_223B37328((uint64_t)&v267, 1, 1, 6, (uint64_t)&v771, (uint64_t)v276, COERCE_DOUBLE(0x4F0000004ELL), COERCE_DOUBLE(0x6B0000006ALL), v18, v19, v20, v21);
  v274[2] = v237;
  v274[3] = v238;
  v274[4] = v239;
  v275 = v240;
  v274[0] = v235;
  v274[1] = v236;
  v772 = 0x100010001000100;
  v279[0] = xmmword_224663648;
  v279[1] = *(_OWORD *)dbl_224663658;
  sub_223B37328((uint64_t)v274, 1, 1, 7, (uint64_t)&v772, (uint64_t)v279, COERCE_DOUBLE(0x60000004FLL), COERCE_DOUBLE(0x220000006BLL), v18, v19, v20, v21);
  v277[2] = v237;
  v277[3] = v238;
  v277[4] = v239;
  v278 = v240;
  v277[0] = v235;
  v277[1] = v236;
  v773 = 0;
  v282[0] = xmmword_224663668;
  v282[1] = *(_OWORD *)dbl_224663678;
  if ((v7 & 0x400) != 0)
    sub_223B37328((uint64_t)v277, 0, 2, 4, (uint64_t)&v773, (uint64_t)v282, COERCE_DOUBLE(0x5100000050), COERCE_DOUBLE(0x5500000054), v22, v23, v24, v25);
  v280[2] = v253;
  v280[3] = v254;
  v280[4] = v255;
  v281 = v256;
  v280[0] = v251;
  v280[1] = v252;
  v774 = 0;
  v289[0] = xmmword_224663688;
  v289[1] = *(_OWORD *)dbl_224663698;
  if ((v7 & 0xC00) != 0)
    sub_223B37328((uint64_t)v280, 0, 2, 5, (uint64_t)&v774, (uint64_t)v289, COERCE_DOUBLE(0x5800000051), COERCE_DOUBLE(0x5C00000055), v22, v23, v24, v25);
  v285 = v253;
  v286 = v254;
  v287 = v255;
  v288 = v256;
  v283 = v251;
  v284 = v252;
  v775 = 0;
  v292[0] = xmmword_2246636A8;
  v292[1] = *(_OWORD *)dbl_2246636B8;
  if ((v7 & 0x1000400) != 0)
    sub_223B37328((uint64_t)&v283, 0, 3, 4, (uint64_t)&v775, (uint64_t)v292, COERCE_DOUBLE(0x5300000052), COERCE_DOUBLE(0x5700000056), v22, v23, v24, v25);
  v290[2] = v253;
  v290[3] = v254;
  v290[4] = v255;
  v291 = v256;
  v290[0] = v251;
  v290[1] = v252;
  v776 = 0;
  v295[0] = xmmword_2246636C8;
  v295[1] = *(_OWORD *)dbl_2246636D8;
  if ((v7 & 0x3000C00) != 0)
    sub_223B37328((uint64_t)v290, 0, 3, 5, (uint64_t)&v776, (uint64_t)v295, COERCE_DOUBLE(0x5A00000053), COERCE_DOUBLE(0x5E00000057), v22, v23, v24, v25);
  v293[2] = v253;
  v293[3] = v254;
  v293[4] = v255;
  v294 = v256;
  v293[0] = v251;
  v293[1] = v252;
  v777 = 0;
  v298[0] = xmmword_2246636E8;
  v298[1] = *(_OWORD *)dbl_2246636F8;
  if ((v7 & 0x4400) != 0)
    sub_223B37328((uint64_t)v293, 1, 2, 4, (uint64_t)&v777, (uint64_t)v298, COERCE_DOUBLE(0x5500000054), COERCE_DOUBLE(0x7100000070), v22, v23, v24, v25);
  v296[2] = v253;
  v296[3] = v254;
  v296[4] = v255;
  v297 = v256;
  v296[0] = v251;
  v296[1] = v252;
  v778 = 0;
  v305[0] = xmmword_224663708;
  v305[1] = *(_OWORD *)dbl_224663718;
  if ((v7 & 0xCC00) != 0)
    sub_223B37328((uint64_t)v296, 1, 2, 5, (uint64_t)&v778, (uint64_t)v305, COERCE_DOUBLE(0x5C00000055), COERCE_DOUBLE(0x7800000071), v22, v23, v24, v25);
  v301 = v269;
  v302 = v270;
  v303 = v271;
  v304 = v272;
  v299 = v267;
  v300 = v268;
  v779 = 0;
  v308[0] = xmmword_224663728;
  v308[1] = *(_OWORD *)dbl_224663738;
  if ((v7 & 0x11004400) != 0)
    sub_223B37328((uint64_t)&v299, 1, 3, 4, (uint64_t)&v779, (uint64_t)v308, COERCE_DOUBLE(0x5700000056), COERCE_DOUBLE(0x7300000072), v22, v23, v24, v25);
  v306[2] = v269;
  v306[3] = v270;
  v306[4] = v271;
  v307 = v272;
  v306[0] = v267;
  v306[1] = v268;
  v780 = 0;
  v311[0] = xmmword_224663748;
  v311[1] = *(_OWORD *)dbl_224663758;
  if ((v7 & 0x3300CC00) != 0)
    sub_223B37328((uint64_t)v306, 1, 3, 5, (uint64_t)&v780, (uint64_t)v311, COERCE_DOUBLE(0x5E00000057), COERCE_DOUBLE(0x7A00000073), v22, v23, v24, v25);
  v309[2] = v269;
  v309[3] = v270;
  v309[4] = v271;
  v310 = v272;
  v309[0] = v267;
  v309[1] = v268;
  v781 = 0;
  v314[0] = xmmword_224663768;
  v314[1] = *(_OWORD *)dbl_224663778;
  if ((v7 & 0x800) != 0)
    sub_223B37328((uint64_t)v309, 0, 2, 6, (uint64_t)&v781, (uint64_t)v314, COERCE_DOUBLE(0x5900000058), COERCE_DOUBLE(0x5D0000005CLL), v22, v23, v24, v25);
  v312[2] = v269;
  v312[3] = v270;
  v312[4] = v271;
  v313 = v272;
  v312[0] = v267;
  v312[1] = v268;
  v782 = 0x100010001000100;
  v321[0] = xmmword_224663788;
  v321[1] = *(_OWORD *)dbl_224663798;
  sub_223B37328((uint64_t)v312, 0, 2, 7, (uint64_t)&v782, (uint64_t)v321, COERCE_DOUBLE(0x1000000059), COERCE_DOUBLE(0x140000005DLL), v22, v23, v24, v25);
  v317 = v269;
  v318 = v270;
  v319 = v271;
  v320 = v272;
  v315 = v267;
  v316 = v268;
  v783 = 0;
  v324[0] = xmmword_2246637A8;
  v324[1] = *(_OWORD *)dbl_2246637B8;
  if ((v7 & 0x2000800) != 0)
    sub_223B37328((uint64_t)&v315, 0, 3, 6, (uint64_t)&v783, (uint64_t)v324, COERCE_DOUBLE(0x5B0000005ALL), COERCE_DOUBLE(0x5F0000005ELL), v26, v27, v28, v29);
  v322[2] = v285;
  v322[3] = v286;
  v322[4] = v287;
  v323 = v288;
  v322[0] = v283;
  v322[1] = v284;
  v784 = 0x100010001000100;
  v327[0] = xmmword_2246637C8;
  v327[1] = *(_OWORD *)dbl_2246637D8;
  sub_223B37328((uint64_t)v322, 0, 3, 7, (uint64_t)&v784, (uint64_t)v327, COERCE_DOUBLE(0x120000005BLL), COERCE_DOUBLE(0x160000005FLL), v26, v27, v28, v29);
  v325[2] = v285;
  v325[3] = v286;
  v325[4] = v287;
  v326 = v288;
  v325[0] = v283;
  v325[1] = v284;
  v785 = 0;
  v330[0] = xmmword_2246637E8;
  v330[1] = *(_OWORD *)dbl_2246637F8;
  if ((v7 & 0x8800) != 0)
    sub_223B37328((uint64_t)v325, 1, 2, 6, (uint64_t)&v785, (uint64_t)v330, COERCE_DOUBLE(0x5D0000005CLL), COERCE_DOUBLE(0x7900000078), v30, v31, v32, v33);
  v328[2] = v285;
  v328[3] = v286;
  v328[4] = v287;
  v329 = v288;
  v328[0] = v283;
  v328[1] = v284;
  v786 = 0x100010001000100;
  v337[0] = xmmword_224663808;
  v337[1] = *(_OWORD *)dbl_224663818;
  sub_223B37328((uint64_t)v328, 1, 2, 7, (uint64_t)&v786, (uint64_t)v337, COERCE_DOUBLE(0x140000005DLL), COERCE_DOUBLE(0x3000000079), v30, v31, v32, v33);
  v333 = v285;
  v334 = v286;
  v335 = v287;
  v336 = v288;
  v331 = v283;
  v332 = v284;
  v787 = 0;
  v340[0] = xmmword_224663828;
  v340[1] = *(_OWORD *)dbl_224663838;
  if ((v7 & 0x22008800) != 0)
    sub_223B37328((uint64_t)&v331, 1, 3, 6, (uint64_t)&v787, (uint64_t)v340, COERCE_DOUBLE(0x5F0000005ELL), COERCE_DOUBLE(0x7B0000007ALL), v34, v35, v36, v37);
  v338[2] = v301;
  v338[3] = v302;
  v338[4] = v303;
  v339 = v304;
  v338[0] = v299;
  v338[1] = v300;
  v788 = 0x100010001000100;
  v343[0] = xmmword_224663848;
  v343[1] = *(_OWORD *)dbl_224663858;
  sub_223B37328((uint64_t)v338, 1, 3, 7, (uint64_t)&v788, (uint64_t)v343, COERCE_DOUBLE(0x160000005FLL), COERCE_DOUBLE(0x320000007BLL), v34, v35, v36, v37);
  v341[2] = v301;
  v341[3] = v302;
  v341[4] = v303;
  v342 = v304;
  v341[0] = v299;
  v341[1] = v300;
  v789 = 0;
  v346[0] = xmmword_224663868;
  v346[1] = *(_OWORD *)dbl_224663878;
  if ((v7 & 0x1000) != 0)
    sub_223B37328((uint64_t)v341, 2, 0, 4, (uint64_t)&v789, (uint64_t)v346, COERCE_DOUBLE(0x6100000060), COERCE_DOUBLE(0x6500000064), v38, v39, v40, v41);
  v344[2] = v317;
  v344[3] = v318;
  v344[4] = v319;
  v345 = v320;
  v344[0] = v315;
  v344[1] = v316;
  v790 = 0;
  v353[0] = xmmword_224663888;
  v353[1] = *(_OWORD *)dbl_224663898;
  if ((v7 & 0x3000) != 0)
    sub_223B37328((uint64_t)v344, 2, 0, 5, (uint64_t)&v790, (uint64_t)v353, COERCE_DOUBLE(0x6800000061), COERCE_DOUBLE(0x6C00000065), v38, v39, v40, v41);
  v349 = v317;
  v350 = v318;
  v351 = v319;
  v352 = v320;
  v347 = v315;
  v348 = v316;
  v791 = 0;
  v356[0] = xmmword_2246638A8;
  v356[1] = *(_OWORD *)dbl_2246638B8;
  if ((v7 & 0x5000) != 0)
    sub_223B37328((uint64_t)&v347, 2, 1, 4, (uint64_t)&v791, (uint64_t)v356, COERCE_DOUBLE(0x6300000062), COERCE_DOUBLE(0x6700000066), v38, v39, v40, v41);
  v354[2] = v317;
  v354[3] = v318;
  v354[4] = v319;
  v355 = v320;
  v354[0] = v315;
  v354[1] = v316;
  v792 = 0;
  v359[0] = xmmword_2246638C8;
  v359[1] = *(_OWORD *)dbl_2246638D8;
  if ((v7 & 0xF000) != 0)
    sub_223B37328((uint64_t)v354, 2, 1, 5, (uint64_t)&v792, (uint64_t)v359, COERCE_DOUBLE(0x6A00000063), COERCE_DOUBLE(0x6E00000067), v38, v39, v40, v41);
  v357[2] = v317;
  v357[3] = v318;
  v357[4] = v319;
  v358 = v320;
  v357[0] = v315;
  v357[1] = v316;
  v793 = 0;
  v362[0] = xmmword_2246638E8;
  v362[1] = *(_OWORD *)dbl_2246638F8;
  if ((v7 & 0x10000001000) != 0)
    sub_223B37328((uint64_t)v357, 3, 0, 4, (uint64_t)&v793, (uint64_t)v362, COERCE_DOUBLE(0x6500000064), COERCE_DOUBLE(0x14100000140), v38, v39, v40, v41);
  v360[2] = v317;
  v360[3] = v318;
  v360[4] = v319;
  v361 = v320;
  v360[0] = v315;
  v360[1] = v316;
  v794 = 0;
  v369[0] = xmmword_224663908;
  v369[1] = *(_OWORD *)dbl_224663918;
  if ((v7 & 0x30000003000) != 0)
    sub_223B37328((uint64_t)v360, 3, 0, 5, (uint64_t)&v794, (uint64_t)v369, COERCE_DOUBLE(0x6C00000065), COERCE_DOUBLE(0x14800000141), v38, v39, v40, v41);
  v365 = v333;
  v366 = v334;
  v367 = v335;
  v368 = v336;
  v363 = v331;
  v364 = v332;
  v795 = 0;
  v372[0] = xmmword_224663928;
  v372[1] = *(_OWORD *)dbl_224663938;
  if ((v7 & 0x50000005000) != 0)
    sub_223B37328((uint64_t)&v363, 3, 1, 4, (uint64_t)&v795, (uint64_t)v372, COERCE_DOUBLE(0x6700000066), COERCE_DOUBLE(0x14300000142), v38, v39, v40, v41);
  v370[2] = v333;
  v370[3] = v334;
  v370[4] = v335;
  v371 = v336;
  v370[0] = v331;
  v370[1] = v332;
  v796 = 0;
  v375[0] = xmmword_224663948;
  v375[1] = *(_OWORD *)dbl_224663958;
  if ((v7 & 0xF000000F000) != 0)
    sub_223B37328((uint64_t)v370, 3, 1, 5, (uint64_t)&v796, (uint64_t)v375, COERCE_DOUBLE(0x6E00000067), COERCE_DOUBLE(0x14A00000143), v38, v39, v40, v41);
  v373[2] = v333;
  v373[3] = v334;
  v373[4] = v335;
  v374 = v336;
  v373[0] = v331;
  v373[1] = v332;
  v797 = 0;
  v378[0] = xmmword_224663968;
  v378[1] = *(_OWORD *)dbl_224663978;
  if ((v7 & 0x2000) != 0)
    sub_223B37328((uint64_t)v373, 2, 0, 6, (uint64_t)&v797, (uint64_t)v378, COERCE_DOUBLE(0x6900000068), COERCE_DOUBLE(0x6D0000006CLL), v38, v39, v40, v41);
  v376[2] = v333;
  v376[3] = v334;
  v376[4] = v335;
  v377 = v336;
  v376[0] = v331;
  v376[1] = v332;
  v798 = 0x100010001000100;
  v385[0] = xmmword_224663988;
  v385[1] = *(_OWORD *)dbl_224663998;
  sub_223B37328((uint64_t)v376, 2, 0, 7, (uint64_t)&v798, (uint64_t)v385, COERCE_DOUBLE(0x2000000069), COERCE_DOUBLE(0x240000006DLL), v38, v39, v40, v41);
  v381 = v333;
  v382 = v334;
  v383 = v335;
  v384 = v336;
  v379 = v331;
  v380 = v332;
  v799 = 0;
  v388[0] = xmmword_2246639A8;
  v388[1] = *(_OWORD *)dbl_2246639B8;
  if ((v7 & 0xA000) != 0)
    sub_223B37328((uint64_t)&v379, 2, 1, 6, (uint64_t)&v799, (uint64_t)v388, COERCE_DOUBLE(0x6B0000006ALL), COERCE_DOUBLE(0x6F0000006ELL), v42, v43, v44, v45);
  v386[2] = v349;
  v386[3] = v350;
  v386[4] = v351;
  v387 = v352;
  v386[0] = v347;
  v386[1] = v348;
  v800 = 0x100010001000100;
  v391[0] = xmmword_2246639C8;
  v391[1] = *(_OWORD *)dbl_2246639D8;
  sub_223B37328((uint64_t)v386, 2, 1, 7, (uint64_t)&v800, (uint64_t)v391, COERCE_DOUBLE(0x220000006BLL), COERCE_DOUBLE(0x260000006FLL), v42, v43, v44, v45);
  v389[2] = v349;
  v389[3] = v350;
  v389[4] = v351;
  v390 = v352;
  v389[0] = v347;
  v389[1] = v348;
  v801 = 0;
  v394[0] = xmmword_2246639E8;
  v394[1] = *(_OWORD *)dbl_2246639F8;
  if ((v7 & 0x20000002000) != 0)
    sub_223B37328((uint64_t)v389, 3, 0, 6, (uint64_t)&v801, (uint64_t)v394, COERCE_DOUBLE(0x6D0000006CLL), COERCE_DOUBLE(0x14900000148), v46, v47, v48, v49);
  v392[2] = v349;
  v392[3] = v350;
  v392[4] = v351;
  v393 = v352;
  v392[0] = v347;
  v392[1] = v348;
  v802 = 0x100010001000100;
  v401[0] = xmmword_224663A08;
  v401[1] = *(_OWORD *)dbl_224663A18;
  sub_223B37328((uint64_t)v392, 3, 0, 7, (uint64_t)&v802, (uint64_t)v401, COERCE_DOUBLE(0x240000006DLL), COERCE_DOUBLE(0x10000000149), v46, v47, v48, v49);
  v397 = v349;
  v398 = v350;
  v399 = v351;
  v400 = v352;
  v395 = v347;
  v396 = v348;
  v803 = 0;
  v404[0] = xmmword_224663A28;
  v404[1] = *(_OWORD *)dbl_224663A38;
  if ((v7 & 0xA000000A000) != 0)
    sub_223B37328((uint64_t)&v395, 3, 1, 6, (uint64_t)&v803, (uint64_t)v404, COERCE_DOUBLE(0x6F0000006ELL), COERCE_DOUBLE(0x14B0000014ALL), v50, v51, v52, v53);
  v402[2] = v365;
  v402[3] = v366;
  v402[4] = v367;
  v403 = v368;
  v402[0] = v363;
  v402[1] = v364;
  v804 = 0x100010001000100;
  v407[0] = xmmword_224663A48;
  v407[1] = *(_OWORD *)dbl_224663A58;
  sub_223B37328((uint64_t)v402, 3, 1, 7, (uint64_t)&v804, (uint64_t)v407, COERCE_DOUBLE(0x260000006FLL), COERCE_DOUBLE(0x1020000014BLL), v50, v51, v52, v53);
  v405[2] = v365;
  v405[3] = v366;
  v405[4] = v367;
  v406 = v368;
  v405[0] = v363;
  v405[1] = v364;
  v805 = 0;
  v410[0] = xmmword_224663A68;
  v410[1] = *(_OWORD *)dbl_224663A78;
  if ((v7 & 0x4000) != 0)
    sub_223B37328((uint64_t)v405, 2, 2, 4, (uint64_t)&v805, (uint64_t)v410, COERCE_DOUBLE(0x7100000070), COERCE_DOUBLE(0x7500000074), v54, v55, v56, v57);
  v408[2] = v381;
  v408[3] = v382;
  v408[4] = v383;
  v409 = v384;
  v408[0] = v379;
  v408[1] = v380;
  v806 = 0;
  v417[0] = xmmword_224663A88;
  v417[1] = *(_OWORD *)dbl_224663A98;
  if ((v7 & 0xC000) != 0)
    sub_223B37328((uint64_t)v408, 2, 2, 5, (uint64_t)&v806, (uint64_t)v417, COERCE_DOUBLE(0x7800000071), COERCE_DOUBLE(0x7C00000075), v54, v55, v56, v57);
  v413 = v381;
  v414 = v382;
  v415 = v383;
  v416 = v384;
  v411 = v379;
  v412 = v380;
  v807 = 0;
  v420[0] = xmmword_224663AA8;
  v420[1] = *(_OWORD *)dbl_224663AB8;
  if ((v7 & 0x10004000) != 0)
    sub_223B37328((uint64_t)&v411, 2, 3, 4, (uint64_t)&v807, (uint64_t)v420, COERCE_DOUBLE(0x7300000072), COERCE_DOUBLE(0x7700000076), v54, v55, v56, v57);
  v418[2] = v381;
  v418[3] = v382;
  v418[4] = v383;
  v419 = v384;
  v418[0] = v379;
  v418[1] = v380;
  v808 = 0;
  v423[0] = xmmword_224663AC8;
  v423[1] = *(_OWORD *)dbl_224663AD8;
  if ((v7 & 0x3000C000) != 0)
    sub_223B37328((uint64_t)v418, 2, 3, 5, (uint64_t)&v808, (uint64_t)v423, COERCE_DOUBLE(0x7A00000073), COERCE_DOUBLE(0x7E00000077), v54, v55, v56, v57);
  v421[2] = v381;
  v421[3] = v382;
  v421[4] = v383;
  v422 = v384;
  v421[0] = v379;
  v421[1] = v380;
  v809 = 0;
  v426[0] = xmmword_224663AE8;
  v426[1] = *(_OWORD *)dbl_224663AF8;
  if ((v7 & 0x40000004000) != 0)
    sub_223B37328((uint64_t)v421, 3, 2, 4, (uint64_t)&v809, (uint64_t)v426, COERCE_DOUBLE(0x7500000074), COERCE_DOUBLE(0x15100000150), v54, v55, v56, v57);
  v424[2] = v381;
  v424[3] = v382;
  v424[4] = v383;
  v425 = v384;
  v424[0] = v379;
  v424[1] = v380;
  v810 = 0;
  v433[0] = xmmword_224663B08;
  v433[1] = *(_OWORD *)dbl_224663B18;
  if ((v7 & 0xC000000C000) != 0)
    sub_223B37328((uint64_t)v424, 3, 2, 5, (uint64_t)&v810, (uint64_t)v433, COERCE_DOUBLE(0x7C00000075), COERCE_DOUBLE(0x15800000151), v54, v55, v56, v57);
  v429 = v397;
  v430 = v398;
  v431 = v399;
  v432 = v400;
  v427 = v395;
  v428 = v396;
  v811 = 0;
  v436[0] = xmmword_224663B28;
  v436[1] = *(_OWORD *)dbl_224663B38;
  if ((v7 & 0x100040010004000) != 0)
    sub_223B37328((uint64_t)&v427, 3, 3, 4, (uint64_t)&v811, (uint64_t)v436, COERCE_DOUBLE(0x7700000076), COERCE_DOUBLE(0x15300000152), v54, v55, v56, v57);
  v434[2] = v397;
  v434[3] = v398;
  v434[4] = v399;
  v435 = v400;
  v434[0] = v395;
  v434[1] = v396;
  v812 = 0;
  v439[0] = xmmword_224663B48;
  v439[1] = *(_OWORD *)dbl_224663B58;
  if ((v7 & 0x3000C003000C000) != 0)
    sub_223B37328((uint64_t)v434, 3, 3, 5, (uint64_t)&v812, (uint64_t)v439, COERCE_DOUBLE(0x7E00000077), COERCE_DOUBLE(0x15A00000153), v54, v55, v56, v57);
  v437[2] = v397;
  v437[3] = v398;
  v437[4] = v399;
  v438 = v400;
  v437[0] = v395;
  v437[1] = v396;
  v813 = 0;
  v442[0] = xmmword_224663B68;
  v442[1] = *(_OWORD *)dbl_224663B78;
  if ((v7 & 0x8000) != 0)
    sub_223B37328((uint64_t)v437, 2, 2, 6, (uint64_t)&v813, (uint64_t)v442, COERCE_DOUBLE(0x7900000078), COERCE_DOUBLE(0x7D0000007CLL), v54, v55, v56, v57);
  v440[2] = v397;
  v440[3] = v398;
  v440[4] = v399;
  v441 = v400;
  v440[0] = v395;
  v440[1] = v396;
  v814 = 0x100010001000100;
  v449[0] = xmmword_224663B88;
  v449[1] = *(_OWORD *)dbl_224663B98;
  sub_223B37328((uint64_t)v440, 2, 2, 7, (uint64_t)&v814, (uint64_t)v449, COERCE_DOUBLE(0x3000000079), COERCE_DOUBLE(0x340000007DLL), v54, v55, v56, v57);
  v445 = v397;
  v446 = v398;
  v447 = v399;
  v448 = v400;
  v443 = v395;
  v444 = v396;
  v815 = 0;
  v452[0] = xmmword_224663BA8;
  v452[1] = *(_OWORD *)dbl_224663BB8;
  if ((v7 & 0x20008000) != 0)
    sub_223B37328((uint64_t)&v443, 2, 3, 6, (uint64_t)&v815, (uint64_t)v452, COERCE_DOUBLE(0x7B0000007ALL), COERCE_DOUBLE(0x7F0000007ELL), v58, v59, v60, v61);
  v450[2] = v413;
  v450[3] = v414;
  v450[4] = v415;
  v451 = v416;
  v450[0] = v411;
  v450[1] = v412;
  v816 = 0x100010001000100;
  v455[0] = xmmword_224663BC8;
  v455[1] = *(_OWORD *)dbl_224663BD8;
  sub_223B37328((uint64_t)v450, 2, 3, 7, (uint64_t)&v816, (uint64_t)v455, COERCE_DOUBLE(0x320000007BLL), COERCE_DOUBLE(0x360000007FLL), v58, v59, v60, v61);
  v453[2] = v413;
  v453[3] = v414;
  v453[4] = v415;
  v454 = v416;
  v453[0] = v411;
  v453[1] = v412;
  v817 = 0;
  v458[0] = xmmword_224663BE8;
  v458[1] = *(_OWORD *)dbl_224663BF8;
  if ((v7 & 0x80000008000) != 0)
    sub_223B37328((uint64_t)v453, 3, 2, 6, (uint64_t)&v817, (uint64_t)v458, COERCE_DOUBLE(0x7D0000007CLL), COERCE_DOUBLE(0x15900000158), v62, v63, v64, v65);
  v456[2] = v413;
  v456[3] = v414;
  v456[4] = v415;
  v457 = v416;
  v456[0] = v411;
  v456[1] = v412;
  v818 = 0x100010001000100;
  v465[0] = xmmword_224663C08;
  v465[1] = *(_OWORD *)dbl_224663C18;
  sub_223B37328((uint64_t)v456, 3, 2, 7, (uint64_t)&v818, (uint64_t)v465, COERCE_DOUBLE(0x340000007DLL), COERCE_DOUBLE(0x11000000159), v62, v63, v64, v65);
  v461 = v413;
  v462 = v414;
  v463 = v415;
  v464 = v416;
  v459 = v411;
  v460 = v412;
  v819 = 0;
  v468[0] = xmmword_224663C28;
  v468[1] = *(_OWORD *)dbl_224663C38;
  if ((v7 & 0x200080020008000) != 0)
    sub_223B37328((uint64_t)&v459, 3, 3, 6, (uint64_t)&v819, (uint64_t)v468, COERCE_DOUBLE(0x7F0000007ELL), COERCE_DOUBLE(0x15B0000015ALL), v66, v67, v68, v69);
  v466[2] = v429;
  v466[3] = v430;
  v466[4] = v431;
  v467 = v432;
  v466[0] = v427;
  v466[1] = v428;
  v820 = 0x100010001000100;
  v471[0] = xmmword_224663C48;
  v471[1] = *(_OWORD *)dbl_224663C58;
  sub_223B37328((uint64_t)v466, 3, 3, 7, (uint64_t)&v820, (uint64_t)v471, COERCE_DOUBLE(0x360000007FLL), COERCE_DOUBLE(0x1120000015BLL), v66, v67, v68, v69);
  v469[2] = v429;
  v469[3] = v430;
  v469[4] = v431;
  v470 = v432;
  v469[0] = v427;
  v469[1] = v428;
  v821 = 0;
  v474[0] = xmmword_224663C68;
  v474[1] = *(_OWORD *)dbl_224663C78;
  if ((v7 & 0x10000) != 0)
    sub_223B37328((uint64_t)v469, 0, 4, 0, (uint64_t)&v821, (uint64_t)v474, COERCE_DOUBLE(0x8100000080), COERCE_DOUBLE(0x8500000084), v70, v71, v72, v73);
  v472[2] = v445;
  v472[3] = v446;
  v472[4] = v447;
  v473 = v448;
  v472[0] = v443;
  v472[1] = v444;
  v822 = 0;
  v481[0] = xmmword_224663C88;
  v481[1] = *(_OWORD *)dbl_224663C98;
  if ((v7 & 0x30000) != 0)
    sub_223B37328((uint64_t)v472, 0, 4, 1, (uint64_t)&v822, (uint64_t)v481, COERCE_DOUBLE(0x8800000081), COERCE_DOUBLE(0x8C00000085), v70, v71, v72, v73);
  v477 = v445;
  v478 = v446;
  v479 = v447;
  v480 = v448;
  v475 = v443;
  v476 = v444;
  v823 = 0;
  v484[0] = xmmword_224663CA8;
  v484[1] = *(_OWORD *)dbl_224663CB8;
  if ((v7 & 0x50000) != 0)
    sub_223B37328((uint64_t)&v475, 0, 5, 0, (uint64_t)&v823, (uint64_t)v484, COERCE_DOUBLE(0x8300000082), COERCE_DOUBLE(0x8700000086), v70, v71, v72, v73);
  v482[2] = v445;
  v482[3] = v446;
  v482[4] = v447;
  v483 = v448;
  v482[0] = v443;
  v482[1] = v444;
  v824 = 0;
  v487[0] = xmmword_224663CC8;
  v487[1] = *(_OWORD *)dbl_224663CD8;
  if ((v7 & 0xF0000) != 0)
    sub_223B37328((uint64_t)v482, 0, 5, 1, (uint64_t)&v824, (uint64_t)v487, COERCE_DOUBLE(0x8A00000083), COERCE_DOUBLE(0x8E00000087), v70, v71, v72, v73);
  v485[2] = v445;
  v485[3] = v446;
  v485[4] = v447;
  v486 = v448;
  v485[0] = v443;
  v485[1] = v444;
  v825 = 0;
  v490[0] = xmmword_224663CE8;
  v490[1] = *(_OWORD *)dbl_224663CF8;
  if ((v7 & 0x110000) != 0)
    sub_223B37328((uint64_t)v485, 1, 4, 0, (uint64_t)&v825, (uint64_t)v490, COERCE_DOUBLE(0x8500000084), COERCE_DOUBLE(0xA1000000A0), v70, v71, v72, v73);
  v488[2] = v445;
  v488[3] = v446;
  v488[4] = v447;
  v489 = v448;
  v488[0] = v443;
  v488[1] = v444;
  v826 = 0;
  v497[0] = xmmword_224663D08;
  v497[1] = *(_OWORD *)dbl_224663D18;
  if ((v7 & 0x330000) != 0)
    sub_223B37328((uint64_t)v488, 1, 4, 1, (uint64_t)&v826, (uint64_t)v497, COERCE_DOUBLE(0x8C00000085), COERCE_DOUBLE(0xA8000000A1), v70, v71, v72, v73);
  v493 = v461;
  v494 = v462;
  v495 = v463;
  v496 = v464;
  v491 = v459;
  v492 = v460;
  v827 = 0;
  v500[0] = xmmword_224663D28;
  v500[1] = *(_OWORD *)dbl_224663D38;
  if ((v7 & 0x550000) != 0)
    sub_223B37328((uint64_t)&v491, 1, 5, 0, (uint64_t)&v827, (uint64_t)v500, COERCE_DOUBLE(0x8700000086), COERCE_DOUBLE(0xA3000000A2), v70, v71, v72, v73);
  v498[2] = v461;
  v498[3] = v462;
  v498[4] = v463;
  v499 = v464;
  v498[0] = v459;
  v498[1] = v460;
  v828 = 0;
  v503[0] = xmmword_224663D48;
  v503[1] = *(_OWORD *)dbl_224663D58;
  if ((v7 & 0xFF0000) != 0)
    sub_223B37328((uint64_t)v498, 1, 5, 1, (uint64_t)&v828, (uint64_t)v503, COERCE_DOUBLE(0x8E00000087), COERCE_DOUBLE(0xAA000000A3), v70, v71, v72, v73);
  v501[2] = v461;
  v501[3] = v462;
  v501[4] = v463;
  v502 = v464;
  v501[0] = v459;
  v501[1] = v460;
  v829 = 0;
  v506[0] = xmmword_224663D68;
  v506[1] = *(_OWORD *)dbl_224663D78;
  if ((v7 & 0x20000) != 0)
    sub_223B37328((uint64_t)v501, 0, 4, 2, (uint64_t)&v829, (uint64_t)v506, COERCE_DOUBLE(0x8900000088), COERCE_DOUBLE(0x8D0000008CLL), v70, v71, v72, v73);
  v504[2] = v461;
  v504[3] = v462;
  v504[4] = v463;
  v505 = v464;
  v504[0] = v459;
  v504[1] = v460;
  v830 = 0;
  v513[0] = xmmword_224663D88;
  v513[1] = *(_OWORD *)dbl_224663D98;
  if ((v7 & 0x1020000) != 0)
    sub_223B37328((uint64_t)v504, 0, 4, 3, (uint64_t)&v830, (uint64_t)v513, COERCE_DOUBLE(0xC000000089), COERCE_DOUBLE(0xC40000008DLL), v70, v71, v72, v73);
  v509 = v477;
  v510 = v478;
  v511 = v479;
  v512 = v480;
  v507 = v475;
  v508 = v476;
  v831 = 0;
  v516[0] = xmmword_224663DA8;
  v516[1] = *(_OWORD *)dbl_224663DB8;
  if ((v7 & 0xA0000) != 0)
    sub_223B37328((uint64_t)&v507, 0, 5, 2, (uint64_t)&v831, (uint64_t)v516, COERCE_DOUBLE(0x8B0000008ALL), COERCE_DOUBLE(0x8F0000008ELL), v70, v71, v72, v73);
  v514[2] = v477;
  v514[3] = v478;
  v514[4] = v479;
  v515 = v480;
  v514[0] = v475;
  v514[1] = v476;
  v832 = 0;
  v519[0] = xmmword_224663DC8;
  v519[1] = *(_OWORD *)dbl_224663DD8;
  if ((v7 & 0x50A0000) != 0)
    sub_223B37328((uint64_t)v514, 0, 5, 3, (uint64_t)&v832, (uint64_t)v519, COERCE_DOUBLE(0xC20000008BLL), COERCE_DOUBLE(0xC60000008FLL), v70, v71, v72, v73);
  v517[2] = v477;
  v517[3] = v478;
  v517[4] = v479;
  v518 = v480;
  v517[0] = v475;
  v517[1] = v476;
  v833 = 0;
  v522[0] = xmmword_224663DE8;
  v522[1] = *(_OWORD *)dbl_224663DF8;
  if ((v7 & 0x220000) != 0)
    sub_223B37328((uint64_t)v517, 1, 4, 2, (uint64_t)&v833, (uint64_t)v522, COERCE_DOUBLE(0x8D0000008CLL), COERCE_DOUBLE(0xA9000000A8), v70, v71, v72, v73);
  v520[2] = v477;
  v520[3] = v478;
  v520[4] = v479;
  v521 = v480;
  v520[0] = v475;
  v520[1] = v476;
  v834 = 0;
  v529[0] = xmmword_224663E08;
  v529[1] = *(_OWORD *)dbl_224663E18;
  if ((v7 & 0x11220000) != 0)
    sub_223B37328((uint64_t)v520, 1, 4, 3, (uint64_t)&v834, (uint64_t)v529, COERCE_DOUBLE(0xC40000008DLL), COERCE_DOUBLE(0xE0000000A9), v70, v71, v72, v73);
  v525 = v493;
  v526 = v494;
  v527 = v495;
  v528 = v496;
  v523 = v491;
  v524 = v492;
  v835 = 0;
  v532[0] = xmmword_224663E28;
  v532[1] = *(_OWORD *)dbl_224663E38;
  if ((v7 & 0xAA0000) != 0)
    sub_223B37328((uint64_t)&v523, 1, 5, 2, (uint64_t)&v835, (uint64_t)v532, COERCE_DOUBLE(0x8F0000008ELL), COERCE_DOUBLE(0xAB000000AALL), v70, v71, v72, v73);
  v530[2] = v493;
  v530[3] = v494;
  v530[4] = v495;
  v531 = v496;
  v530[0] = v491;
  v530[1] = v492;
  v836 = 0;
  v535[0] = xmmword_224663E48;
  v535[1] = *(_OWORD *)dbl_224663E58;
  if ((v7 & 0x55AA0000) != 0)
    sub_223B37328((uint64_t)v530, 1, 5, 3, (uint64_t)&v836, (uint64_t)v535, COERCE_DOUBLE(0xC60000008FLL), COERCE_DOUBLE(0xE2000000ABLL), v70, v71, v72, v73);
  v533[2] = v493;
  v533[3] = v494;
  v533[4] = v495;
  v534 = v496;
  v533[0] = v491;
  v533[1] = v492;
  v837 = 0;
  v538[0] = xmmword_224663E68;
  v538[1] = *(_OWORD *)dbl_224663E78;
  if ((v7 & 0x40000) != 0)
    sub_223B37328((uint64_t)v533, 0, 6, 0, (uint64_t)&v837, (uint64_t)v538, COERCE_DOUBLE(0x9100000090), COERCE_DOUBLE(0x9500000094), v70, v71, v72, v73);
  v536[2] = v493;
  v536[3] = v494;
  v536[4] = v495;
  v537 = v496;
  v536[0] = v491;
  v536[1] = v492;
  v838 = 0;
  v545[0] = xmmword_224663E88;
  v545[1] = *(_OWORD *)dbl_224663E98;
  if ((v7 & 0xC0000) != 0)
    sub_223B37328((uint64_t)v536, 0, 6, 1, (uint64_t)&v838, (uint64_t)v545, COERCE_DOUBLE(0x9800000091), COERCE_DOUBLE(0x9C00000095), v70, v71, v72, v73);
  v541 = v509;
  v542 = v510;
  v543 = v511;
  v544 = v512;
  v539 = v507;
  v540 = v508;
  v839 = 0x202000002020000;
  v548[0] = xmmword_224663EA8;
  v548[1] = *(_OWORD *)dbl_224663EB8;
  sub_223B37328((uint64_t)&v539, 0, 7, 0, (uint64_t)&v839, (uint64_t)v548, COERCE_DOUBLE(0x9300000092), COERCE_DOUBLE(0x9700000096), v70, v71, v72, v73);
  v546[2] = v509;
  v546[3] = v510;
  v546[4] = v511;
  v547 = v512;
  v546[0] = v507;
  v546[1] = v508;
  v840 = 0x202000002020000;
  v551[0] = xmmword_224663EC8;
  v551[1] = *(_OWORD *)dbl_224663ED8;
  sub_223B37328((uint64_t)v546, 0, 7, 1, (uint64_t)&v840, (uint64_t)v551, COERCE_DOUBLE(0x9A00000093), COERCE_DOUBLE(0x9E00000097), v74, v75, v76, v77);
  v549[2] = v509;
  v549[3] = v510;
  v549[4] = v511;
  v550 = v512;
  v549[0] = v507;
  v549[1] = v508;
  v841 = 0;
  v554[0] = xmmword_224663EE8;
  v554[1] = *(_OWORD *)dbl_224663EF8;
  if ((v7 & 0x440000) != 0)
    sub_223B37328((uint64_t)v549, 1, 6, 0, (uint64_t)&v841, (uint64_t)v554, COERCE_DOUBLE(0x9500000094), COERCE_DOUBLE(0xB1000000B0), v78, v79, v80, v81);
  v552[2] = v509;
  v552[3] = v510;
  v552[4] = v511;
  v553 = v512;
  v552[0] = v507;
  v552[1] = v508;
  v842 = 0;
  v561[0] = xmmword_224663F08;
  v561[1] = *(_OWORD *)dbl_224663F18;
  if ((v7 & 0xCC0000) != 0)
    sub_223B37328((uint64_t)v552, 1, 6, 1, (uint64_t)&v842, (uint64_t)v561, COERCE_DOUBLE(0x9C00000095), COERCE_DOUBLE(0xB8000000B1), v78, v79, v80, v81);
  v557 = v525;
  v558 = v526;
  v559 = v527;
  v560 = v528;
  v555 = v523;
  v556 = v524;
  v843 = 0x202000002020000;
  v564[0] = xmmword_224663F28;
  v564[1] = *(_OWORD *)dbl_224663F38;
  sub_223B37328((uint64_t)&v555, 1, 7, 0, (uint64_t)&v843, (uint64_t)v564, COERCE_DOUBLE(0x9700000096), COERCE_DOUBLE(0xB3000000B2), v78, v79, v80, v81);
  v562[2] = v525;
  v562[3] = v526;
  v562[4] = v527;
  v563 = v528;
  v562[0] = v523;
  v562[1] = v524;
  v844 = 0x202000002020000;
  v567[0] = xmmword_224663F48;
  v567[1] = *(_OWORD *)dbl_224663F58;
  sub_223B37328((uint64_t)v562, 1, 7, 1, (uint64_t)&v844, (uint64_t)v567, COERCE_DOUBLE(0x9E00000097), COERCE_DOUBLE(0xBA000000B3), v82, v83, v84, v85);
  v565[2] = v525;
  v565[3] = v526;
  v565[4] = v527;
  v566 = v528;
  v565[0] = v523;
  v565[1] = v524;
  v845 = 0;
  v570[0] = xmmword_224663F68;
  v570[1] = *(_OWORD *)dbl_224663F78;
  if ((v7 & 0x80000) != 0)
    sub_223B37328((uint64_t)v565, 0, 6, 2, (uint64_t)&v845, (uint64_t)v570, COERCE_DOUBLE(0x9900000098), COERCE_DOUBLE(0x9D0000009CLL), v86, v87, v88, v89);
  v568[2] = v525;
  v568[3] = v526;
  v568[4] = v527;
  v569 = v528;
  v568[0] = v523;
  v568[1] = v524;
  v846 = 0;
  v577[0] = xmmword_224663F88;
  v577[1] = *(_OWORD *)dbl_224663F98;
  if ((v7 & 0x4080000) != 0)
    sub_223B37328((uint64_t)v568, 0, 6, 3, (uint64_t)&v846, (uint64_t)v577, COERCE_DOUBLE(0xD000000099), COERCE_DOUBLE(0xD40000009DLL), v86, v87, v88, v89);
  v573 = v541;
  v574 = v542;
  v575 = v543;
  v576 = v544;
  v571 = v539;
  v572 = v540;
  v847 = 0x202000002020000;
  v580[0] = xmmword_224663FA8;
  v580[1] = *(_OWORD *)dbl_224663FB8;
  sub_223B37328((uint64_t)&v571, 0, 7, 2, (uint64_t)&v847, (uint64_t)v580, COERCE_DOUBLE(0x9B0000009ALL), COERCE_DOUBLE(0x9F0000009ELL), v86, v87, v88, v89);
  v578[2] = v541;
  v578[3] = v542;
  v578[4] = v543;
  v579 = v544;
  v578[0] = v539;
  v578[1] = v540;
  v848 = 0x202000002020000;
  v583[0] = xmmword_224663FC8;
  v583[1] = *(_OWORD *)dbl_224663FD8;
  sub_223B37328((uint64_t)v578, 0, 7, 3, (uint64_t)&v848, (uint64_t)v583, COERCE_DOUBLE(0xD20000009BLL), COERCE_DOUBLE(0xD60000009FLL), v90, v91, v92, v93);
  v581[2] = v541;
  v581[3] = v542;
  v581[4] = v543;
  v582 = v544;
  v581[0] = v539;
  v581[1] = v540;
  v849 = 0;
  v586[0] = xmmword_224663FE8;
  v586[1] = *(_OWORD *)dbl_224663FF8;
  if ((v7 & 0x880000) != 0)
    sub_223B37328((uint64_t)v581, 1, 6, 2, (uint64_t)&v849, (uint64_t)v586, COERCE_DOUBLE(0x9D0000009CLL), COERCE_DOUBLE(0xB9000000B8), v94, v95, v96, v97);
  v584[2] = v541;
  v584[3] = v542;
  v584[4] = v543;
  v585 = v544;
  v584[0] = v539;
  v584[1] = v540;
  v850 = 0;
  v593[0] = xmmword_224664008;
  v593[1] = *(_OWORD *)dbl_224664018;
  if ((v7 & 0x44880000) != 0)
    sub_223B37328((uint64_t)v584, 1, 6, 3, (uint64_t)&v850, (uint64_t)v593, COERCE_DOUBLE(0xD40000009DLL), COERCE_DOUBLE(0xF0000000B9), v94, v95, v96, v97);
  v589 = v557;
  v590 = v558;
  v591 = v559;
  v592 = v560;
  v587 = v555;
  v588 = v556;
  v851 = 0x202000002020000;
  v596[0] = xmmword_224664028;
  v596[1] = *(_OWORD *)dbl_224664038;
  sub_223B37328((uint64_t)&v587, 1, 7, 2, (uint64_t)&v851, (uint64_t)v596, COERCE_DOUBLE(0x9F0000009ELL), COERCE_DOUBLE(0xBB000000BALL), v94, v95, v96, v97);
  v594[2] = v557;
  v594[3] = v558;
  v594[4] = v559;
  v595 = v560;
  v594[0] = v555;
  v594[1] = v556;
  v852 = 0x202000002020000;
  v599[0] = xmmword_224664048;
  v599[1] = *(_OWORD *)dbl_224664058;
  sub_223B37328((uint64_t)v594, 1, 7, 3, (uint64_t)&v852, (uint64_t)v599, COERCE_DOUBLE(0xD60000009FLL), COERCE_DOUBLE(0xF2000000BBLL), v98, v99, v100, v101);
  v597[2] = v557;
  v597[3] = v558;
  v597[4] = v559;
  v598 = v560;
  v597[0] = v555;
  v597[1] = v556;
  v853 = 0;
  v602[0] = xmmword_224664068;
  v602[1] = *(_OWORD *)dbl_224664078;
  if ((v7 & 0x100000) != 0)
    sub_223B37328((uint64_t)v597, 2, 4, 0, (uint64_t)&v853, (uint64_t)v602, COERCE_DOUBLE(0xA1000000A0), COERCE_DOUBLE(0xA5000000A4), v102, v103, v104, v105);
  v600[2] = v557;
  v600[3] = v558;
  v600[4] = v559;
  v601 = v560;
  v600[0] = v555;
  v600[1] = v556;
  v854 = 0;
  v609[0] = xmmword_224664088;
  v609[1] = *(_OWORD *)dbl_224664098;
  if ((v7 & 0x300000) != 0)
    sub_223B37328((uint64_t)v600, 2, 4, 1, (uint64_t)&v854, (uint64_t)v609, COERCE_DOUBLE(0xA8000000A1), COERCE_DOUBLE(0xAC000000A5), v102, v103, v104, v105);
  v605 = v573;
  v606 = v574;
  v607 = v575;
  v608 = v576;
  v603 = v571;
  v604 = v572;
  v855 = 0;
  v612[0] = xmmword_2246640A8;
  v612[1] = *(_OWORD *)dbl_2246640B8;
  if ((v7 & 0x500000) != 0)
    sub_223B37328((uint64_t)&v603, 2, 5, 0, (uint64_t)&v855, (uint64_t)v612, COERCE_DOUBLE(0xA3000000A2), COERCE_DOUBLE(0xA7000000A6), v102, v103, v104, v105);
  v610[2] = v573;
  v610[3] = v574;
  v610[4] = v575;
  v611 = v576;
  v610[0] = v571;
  v610[1] = v572;
  v856 = 0;
  v615[0] = xmmword_2246640C8;
  v615[1] = *(_OWORD *)dbl_2246640D8;
  if ((v7 & 0xF00000) != 0)
    sub_223B37328((uint64_t)v610, 2, 5, 1, (uint64_t)&v856, (uint64_t)v615, COERCE_DOUBLE(0xAA000000A3), COERCE_DOUBLE(0xAE000000A7), v102, v103, v104, v105);
  v613[2] = v573;
  v613[3] = v574;
  v613[4] = v575;
  v614 = v576;
  v613[0] = v571;
  v613[1] = v572;
  v857 = 0;
  v618[0] = xmmword_2246640E8;
  v618[1] = *(_OWORD *)dbl_2246640F8;
  if ((v7 & 0x1000000100000) != 0)
    sub_223B37328((uint64_t)v613, 3, 4, 0, (uint64_t)&v857, (uint64_t)v618, COERCE_DOUBLE(0xA5000000A4), COERCE_DOUBLE(0x18100000180), v102, v103, v104, v105);
  v616[2] = v573;
  v616[3] = v574;
  v616[4] = v575;
  v617 = v576;
  v616[0] = v571;
  v616[1] = v572;
  v858 = 0;
  v625[0] = xmmword_224664108;
  v625[1] = *(_OWORD *)dbl_224664118;
  if ((v7 & 0x3000000300000) != 0)
    sub_223B37328((uint64_t)v616, 3, 4, 1, (uint64_t)&v858, (uint64_t)v625, COERCE_DOUBLE(0xAC000000A5), COERCE_DOUBLE(0x18800000181), v102, v103, v104, v105);
  v621 = v589;
  v622 = v590;
  v623 = v591;
  v624 = v592;
  v619 = v587;
  v620 = v588;
  v859 = 0;
  v628[0] = xmmword_224664128;
  v628[1] = *(_OWORD *)dbl_224664138;
  if ((v7 & 0x5000000500000) != 0)
    sub_223B37328((uint64_t)&v619, 3, 5, 0, (uint64_t)&v859, (uint64_t)v628, COERCE_DOUBLE(0xA7000000A6), COERCE_DOUBLE(0x18300000182), v102, v103, v104, v105);
  v626[2] = v589;
  v626[3] = v590;
  v626[4] = v591;
  v627 = v592;
  v626[0] = v587;
  v626[1] = v588;
  v860 = 0;
  v631[0] = xmmword_224664148;
  v631[1] = *(_OWORD *)dbl_224664158;
  if ((v7 & 0xF000000F00000) != 0)
    sub_223B37328((uint64_t)v626, 3, 5, 1, (uint64_t)&v860, (uint64_t)v631, COERCE_DOUBLE(0xAE000000A7), COERCE_DOUBLE(0x18A00000183), v102, v103, v104, v105);
  v629[2] = v589;
  v629[3] = v590;
  v629[4] = v591;
  v630 = v592;
  v629[0] = v587;
  v629[1] = v588;
  v861 = 0;
  v634[0] = xmmword_224664168;
  v634[1] = *(_OWORD *)dbl_224664178;
  if ((v7 & 0x200000) != 0)
    sub_223B37328((uint64_t)v629, 2, 4, 2, (uint64_t)&v861, (uint64_t)v634, COERCE_DOUBLE(0xA9000000A8), COERCE_DOUBLE(0xAD000000ACLL), v102, v103, v104, v105);
  v632[2] = v589;
  v632[3] = v590;
  v632[4] = v591;
  v633 = v592;
  v632[0] = v587;
  v632[1] = v588;
  v862 = 0;
  v641[0] = xmmword_224664188;
  v641[1] = *(_OWORD *)dbl_224664198;
  if ((v7 & 0x10200000) != 0)
    sub_223B37328((uint64_t)v632, 2, 4, 3, (uint64_t)&v862, (uint64_t)v641, COERCE_DOUBLE(0xE0000000A9), COERCE_DOUBLE(0xE4000000ADLL), v102, v103, v104, v105);
  v637 = v605;
  v638 = v606;
  v639 = v607;
  v640 = v608;
  v635 = v603;
  v636 = v604;
  v863 = 0;
  v644[0] = xmmword_2246641A8;
  v644[1] = *(_OWORD *)dbl_2246641B8;
  if ((v7 & 0xA00000) != 0)
    sub_223B37328((uint64_t)&v635, 2, 5, 2, (uint64_t)&v863, (uint64_t)v644, COERCE_DOUBLE(0xAB000000AALL), COERCE_DOUBLE(0xAF000000AELL), v102, v103, v104, v105);
  v642[2] = v605;
  v642[3] = v606;
  v642[4] = v607;
  v643 = v608;
  v642[0] = v603;
  v642[1] = v604;
  v864 = 0;
  v647[0] = xmmword_2246641C8;
  v647[1] = *(_OWORD *)dbl_2246641D8;
  if ((v7 & 0x50A00000) != 0)
    sub_223B37328((uint64_t)v642, 2, 5, 3, (uint64_t)&v864, (uint64_t)v647, COERCE_DOUBLE(0xE2000000ABLL), COERCE_DOUBLE(0xE6000000AFLL), v102, v103, v104, v105);
  v645[2] = v605;
  v645[3] = v606;
  v645[4] = v607;
  v646 = v608;
  v645[0] = v603;
  v645[1] = v604;
  v865 = 0;
  v650[0] = xmmword_2246641E8;
  v650[1] = *(_OWORD *)dbl_2246641F8;
  if ((v7 & 0x2000000200000) != 0)
    sub_223B37328((uint64_t)v645, 3, 4, 2, (uint64_t)&v865, (uint64_t)v650, COERCE_DOUBLE(0xAD000000ACLL), COERCE_DOUBLE(0x18900000188), v102, v103, v104, v105);
  v648[2] = v605;
  v648[3] = v606;
  v648[4] = v607;
  v649 = v608;
  v648[0] = v603;
  v648[1] = v604;
  v866 = 0;
  v657[0] = xmmword_224664208;
  v657[1] = *(_OWORD *)dbl_224664218;
  if ((v7 & 0x102000010200000) != 0)
    sub_223B37328((uint64_t)v648, 3, 4, 3, (uint64_t)&v866, (uint64_t)v657, COERCE_DOUBLE(0xE4000000ADLL), COERCE_DOUBLE(0x1C000000189), v102, v103, v104, v105);
  v653 = v621;
  v654 = v622;
  v655 = v623;
  v656 = v624;
  v651 = v619;
  v652 = v620;
  v867 = 0;
  v660[0] = xmmword_224664228;
  v660[1] = *(_OWORD *)dbl_224664238;
  if ((v7 & 0xA000000A00000) != 0)
    sub_223B37328((uint64_t)&v651, 3, 5, 2, (uint64_t)&v867, (uint64_t)v660, COERCE_DOUBLE(0xAF000000AELL), COERCE_DOUBLE(0x18B0000018ALL), v102, v103, v104, v105);
  v658[2] = v621;
  v658[3] = v622;
  v658[4] = v623;
  v659 = v624;
  v658[0] = v619;
  v658[1] = v620;
  v868 = 0;
  v663[0] = xmmword_224664248;
  v663[1] = *(_OWORD *)dbl_224664258;
  if ((v7 & 0x50A000050A00000) != 0)
    sub_223B37328((uint64_t)v658, 3, 5, 3, (uint64_t)&v868, (uint64_t)v663, COERCE_DOUBLE(0xE6000000AFLL), COERCE_DOUBLE(0x1C20000018BLL), v102, v103, v104, v105);
  v661[2] = v621;
  v661[3] = v622;
  v661[4] = v623;
  v662 = v624;
  v661[0] = v619;
  v661[1] = v620;
  v869 = 0;
  v666[0] = xmmword_224664268;
  v666[1] = *(_OWORD *)dbl_224664278;
  if ((v7 & 0x400000) != 0)
    sub_223B37328((uint64_t)v661, 2, 6, 0, (uint64_t)&v869, (uint64_t)v666, COERCE_DOUBLE(0xB1000000B0), COERCE_DOUBLE(0xB5000000B4), v102, v103, v104, v105);
  v664[2] = v621;
  v664[3] = v622;
  v664[4] = v623;
  v665 = v624;
  v664[0] = v619;
  v664[1] = v620;
  v870 = 0;
  v673[0] = xmmword_224664288;
  v673[1] = *(_OWORD *)dbl_224664298;
  if ((v7 & 0xC00000) != 0)
    sub_223B37328((uint64_t)v664, 2, 6, 1, (uint64_t)&v870, (uint64_t)v673, COERCE_DOUBLE(0xB8000000B1), COERCE_DOUBLE(0xBC000000B5), v102, v103, v104, v105);
  v669 = v637;
  v670 = v638;
  v671 = v639;
  v672 = v640;
  v667 = v635;
  v668 = v636;
  v871 = 0x202000002020000;
  v676[0] = xmmword_2246642A8;
  v676[1] = *(_OWORD *)dbl_2246642B8;
  sub_223B37328((uint64_t)&v667, 2, 7, 0, (uint64_t)&v871, (uint64_t)v676, COERCE_DOUBLE(0xB3000000B2), COERCE_DOUBLE(0xB7000000B6), v102, v103, v104, v105);
  v674[2] = v637;
  v674[3] = v638;
  v674[4] = v639;
  v675 = v640;
  v674[0] = v635;
  v674[1] = v636;
  v872 = 0x202000002020000;
  v679[0] = xmmword_2246642C8;
  v679[1] = *(_OWORD *)dbl_2246642D8;
  sub_223B37328((uint64_t)v674, 2, 7, 1, (uint64_t)&v872, (uint64_t)v679, COERCE_DOUBLE(0xBA000000B3), COERCE_DOUBLE(0xBE000000B7), v106, v107, v108, v109);
  v677[2] = v637;
  v677[3] = v638;
  v677[4] = v639;
  v678 = v640;
  v677[0] = v635;
  v677[1] = v636;
  v873 = 0;
  v682[0] = xmmword_2246642E8;
  v682[1] = *(_OWORD *)dbl_2246642F8;
  if ((v7 & 0x4000000400000) != 0)
    sub_223B37328((uint64_t)v677, 3, 6, 0, (uint64_t)&v873, (uint64_t)v682, COERCE_DOUBLE(0xB5000000B4), COERCE_DOUBLE(0x19100000190), v110, v111, v112, v113);
  v680[2] = v637;
  v680[3] = v638;
  v680[4] = v639;
  v681 = v640;
  v680[0] = v635;
  v680[1] = v636;
  v874 = 0;
  v689[0] = xmmword_224664308;
  v689[1] = *(_OWORD *)dbl_224664318;
  if ((v7 & 0xC000000C00000) != 0)
    sub_223B37328((uint64_t)v680, 3, 6, 1, (uint64_t)&v874, (uint64_t)v689, COERCE_DOUBLE(0xBC000000B5), COERCE_DOUBLE(0x19800000191), v110, v111, v112, v113);
  v685 = v653;
  v686 = v654;
  v687 = v655;
  v688 = v656;
  v683 = v651;
  v684 = v652;
  v875 = 0x202000002020000;
  v692[0] = xmmword_224664328;
  v692[1] = *(_OWORD *)dbl_224664338;
  sub_223B37328((uint64_t)&v683, 3, 7, 0, (uint64_t)&v875, (uint64_t)v692, COERCE_DOUBLE(0xB7000000B6), COERCE_DOUBLE(0x19300000192), v110, v111, v112, v113);
  v690[2] = v653;
  v690[3] = v654;
  v690[4] = v655;
  v691 = v656;
  v690[0] = v651;
  v690[1] = v652;
  v876 = 0x202000002020000;
  v695[0] = xmmword_224664348;
  v695[1] = *(_OWORD *)dbl_224664358;
  sub_223B37328((uint64_t)v690, 3, 7, 1, (uint64_t)&v876, (uint64_t)v695, COERCE_DOUBLE(0xBE000000B7), COERCE_DOUBLE(0x19A00000193), v114, v115, v116, v117);
  v693[2] = v653;
  v693[3] = v654;
  v693[4] = v655;
  v694 = v656;
  v693[0] = v651;
  v693[1] = v652;
  v877 = 0;
  v698[0] = xmmword_224664368;
  v698[1] = *(_OWORD *)dbl_224664378;
  if ((v7 & 0x800000) != 0)
    sub_223B37328((uint64_t)v693, 2, 6, 2, (uint64_t)&v877, (uint64_t)v698, COERCE_DOUBLE(0xB9000000B8), COERCE_DOUBLE(0xBD000000BCLL), v118, v119, v120, v121);
  v696[2] = v653;
  v696[3] = v654;
  v696[4] = v655;
  v697 = v656;
  v696[0] = v651;
  v696[1] = v652;
  v878 = 0;
  v705[0] = xmmword_224664388;
  v705[1] = *(_OWORD *)dbl_224664398;
  if ((v7 & 0x40800000) != 0)
    sub_223B37328((uint64_t)v696, 2, 6, 3, (uint64_t)&v878, (uint64_t)v705, COERCE_DOUBLE(0xF0000000B9), COERCE_DOUBLE(0xF4000000BDLL), v118, v119, v120, v121);
  v701 = v669;
  v702 = v670;
  v703 = v671;
  v704 = v672;
  v699 = v667;
  v700 = v668;
  v879 = 0x202000002020000;
  v708[0] = xmmword_2246643A8;
  v708[1] = *(_OWORD *)dbl_2246643B8;
  sub_223B37328((uint64_t)&v699, 2, 7, 2, (uint64_t)&v879, (uint64_t)v708, COERCE_DOUBLE(0xBB000000BALL), COERCE_DOUBLE(0xBF000000BELL), v118, v119, v120, v121);
  v706[2] = v669;
  v706[3] = v670;
  v706[4] = v671;
  v707 = v672;
  v706[0] = v667;
  v706[1] = v668;
  v880 = 0x202000002020000;
  v711[0] = xmmword_2246643C8;
  v711[1] = *(_OWORD *)dbl_2246643D8;
  sub_223B37328((uint64_t)v706, 2, 7, 3, (uint64_t)&v880, (uint64_t)v711, COERCE_DOUBLE(0xF2000000BBLL), COERCE_DOUBLE(0xF6000000BFLL), v122, v123, v124, v125);
  v709[2] = v669;
  v709[3] = v670;
  v709[4] = v671;
  v710 = v672;
  v709[0] = v667;
  v709[1] = v668;
  v881 = 0;
  v714[0] = xmmword_2246643E8;
  v714[1] = *(_OWORD *)dbl_2246643F8;
  if ((v7 & 0x8000000800000) != 0)
    sub_223B37328((uint64_t)v709, 3, 6, 2, (uint64_t)&v881, (uint64_t)v714, COERCE_DOUBLE(0xBD000000BCLL), COERCE_DOUBLE(0x19900000198), v126, v127, v128, v129);
  v712[2] = v669;
  v712[3] = v670;
  v712[4] = v671;
  v713 = v672;
  v712[0] = v667;
  v712[1] = v668;
  v882 = 0;
  v717[0] = xmmword_224664408;
  v717[1] = *(_OWORD *)dbl_224664418;
  if ((v7 & 0x408000040800000) != 0)
    sub_223B37328((uint64_t)v712, 3, 6, 3, (uint64_t)&v882, (uint64_t)v717, COERCE_DOUBLE(0xF4000000BDLL), COERCE_DOUBLE(0x1D000000199), v126, v127, v128, v129);
  v715[2] = v685;
  v715[3] = v686;
  v715[4] = v687;
  v716 = v688;
  v715[0] = v683;
  v715[1] = v684;
  v883 = 0x202000002020000;
  v720[0] = xmmword_224664428;
  v720[1] = *(_OWORD *)dbl_224664438;
  sub_223B37328((uint64_t)v715, 3, 7, 2, (uint64_t)&v883, (uint64_t)v720, COERCE_DOUBLE(0xBF000000BELL), COERCE_DOUBLE(0x19B0000019ALL), v126, v127, v128, v129);
  v718[2] = v685;
  v718[3] = v686;
  v718[4] = v687;
  v719 = v688;
  v718[0] = v683;
  v718[1] = v684;
  v884 = 0x202000002020000;
  v723[0] = xmmword_224664448;
  v723[1] = *(_OWORD *)dbl_224664458;
  sub_223B37328((uint64_t)v718, 3, 7, 3, (uint64_t)&v884, (uint64_t)v723, COERCE_DOUBLE(0xF6000000BFLL), COERCE_DOUBLE(0x1D20000019BLL), v130, v131, v132, v133);
  v721[2] = v685;
  v721[3] = v686;
  v721[4] = v687;
  v722 = v688;
  v721[0] = v683;
  v721[1] = v684;
  v885 = 0;
  v726[0] = xmmword_224664468;
  v726[1] = *(_OWORD *)dbl_224664478;
  if ((v7 & 0x1000000) != 0)
    sub_223B37328((uint64_t)v721, 0, 4, 4, (uint64_t)&v885, (uint64_t)v726, COERCE_DOUBLE(0xC1000000C0), COERCE_DOUBLE(0xC5000000C4), v134, v135, v136, v137);
  v724[2] = v685;
  v724[3] = v686;
  v724[4] = v687;
  v725 = v688;
  v724[0] = v683;
  v724[1] = v684;
  v886 = 0;
  v729[0] = xmmword_224664488;
  v729[1] = *(_OWORD *)dbl_224664498;
  if ((v7 & 0x3000000) != 0)
    sub_223B37328((uint64_t)v724, 0, 4, 5, (uint64_t)&v886, (uint64_t)v729, COERCE_DOUBLE(0xC8000000C1), COERCE_DOUBLE(0xCC000000C5), v134, v135, v136, v137);
  v727[2] = v701;
  v727[3] = v702;
  v727[4] = v703;
  v728 = v704;
  v727[0] = v699;
  v727[1] = v700;
  v887 = 0;
  v732[0] = xmmword_2246644A8;
  v732[1] = *(_OWORD *)dbl_2246644B8;
  if ((v7 & 0x5000000) != 0)
    sub_223B37328((uint64_t)v727, 0, 5, 4, (uint64_t)&v887, (uint64_t)v732, COERCE_DOUBLE(0xC3000000C2), COERCE_DOUBLE(0xC7000000C6), v134, v135, v136, v137);
  v730[2] = v701;
  v730[3] = v702;
  v730[4] = v703;
  v731 = v704;
  v730[0] = v699;
  v730[1] = v700;
  v888 = 0;
  v735[0] = xmmword_2246644C8;
  v735[1] = *(_OWORD *)dbl_2246644D8;
  if ((v7 & 0xF000000) != 0)
    sub_223B37328((uint64_t)v730, 0, 5, 5, (uint64_t)&v888, (uint64_t)v735, COERCE_DOUBLE(0xCA000000C3), COERCE_DOUBLE(0xCE000000C7), v134, v135, v136, v137);
  v733[2] = v701;
  v733[3] = v702;
  v733[4] = v703;
  v734 = v704;
  v733[0] = v699;
  v733[1] = v700;
  v889[0] = 0;
  v737[0] = xmmword_2246644E8;
  v737[1] = *(_OWORD *)dbl_2246644F8;
  if ((v7 & 0x11000000) != 0)
    sub_223B37328((uint64_t)v733, 1, 4, 4, (uint64_t)v889, (uint64_t)v737, COERCE_DOUBLE(0xC5000000C4), COERCE_DOUBLE(0xE1000000E0), v134, v135, v136, v137);
  v735[4] = v701;
  v735[5] = v702;
  v735[6] = v703;
  v736 = v704;
  v735[2] = v699;
  v735[3] = v700;
  return sub_223B3E170();
}

uint64_t sub_223B3E170()
{
  uint64_t v0;
  uint64_t v1;
  float32x4_t v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  float32x4_t v10;
  double v11;
  double v12;
  double v13;
  float32x4_t v14;
  double v15;
  double v16;
  double v17;
  float32x4_t v18;
  double v19;
  double v20;
  double v21;
  float32x4_t v22;
  double v23;
  double v24;
  double v25;
  float32x4_t v26;
  double v27;
  double v28;
  double v29;
  float32x4_t v30;
  double v31;
  double v32;
  double v33;
  float32x4_t v34;
  double v35;
  double v36;
  double v37;
  float32x4_t v38;
  double v39;
  double v40;
  double v41;
  float32x4_t v42;
  double v43;
  double v44;
  double v45;
  float32x4_t v46;
  double v47;
  double v48;
  double v49;
  float32x4_t v50;
  double v51;
  double v52;
  double v53;
  float32x4_t v54;
  double v55;
  double v56;
  double v57;
  float32x4_t v58;
  double v59;
  double v60;
  double v61;
  float32x4_t v62;
  double v63;
  double v64;
  double v65;
  float32x4_t v66;
  double v67;
  double v68;
  double v69;
  float32x4_t v70;
  double v71;
  double v72;
  double v73;
  float32x4_t v74;
  double v75;
  double v76;
  double v77;
  float32x4_t v78;
  double v79;
  double v80;
  double v81;
  float32x4_t v82;
  double v83;
  double v84;
  double v85;
  float32x4_t v86;
  double v87;
  double v88;
  double v89;
  float32x4_t v90;
  double v91;
  double v92;
  double v93;
  float32x4_t v94;
  double v95;
  double v96;
  double v97;
  float32x4_t v98;
  double v99;
  double v100;
  double v101;
  float32x4_t v102;
  double v103;
  double v104;
  double v105;
  float32x4_t v106;
  double v107;
  double v108;
  double v109;
  float32x4_t v110;
  double v111;
  double v112;
  double v113;
  float32x4_t v114;
  double v115;
  double v116;
  double v117;
  float32x4_t v118;
  double v119;
  double v120;
  double v121;
  float32x4_t v122;
  double v123;
  double v124;
  double v125;
  float32x4_t v126;
  double v127;
  double v128;
  double v129;
  float32x4_t v130;
  double v131;
  double v132;
  double v133;
  float32x4_t v134;
  double v135;
  double v136;
  double v137;
  float32x4_t v138;
  double v139;
  double v140;
  double v141;
  float32x4_t v142;
  double v143;
  double v144;
  double v145;
  float32x4_t v146;
  double v147;
  double v148;
  double v149;
  float32x4_t v150;
  double v151;
  double v152;
  double v153;
  float32x4_t v154;
  double v155;
  double v156;
  double v157;
  float32x4_t v158;
  double v159;
  double v160;
  double v161;
  float32x4_t v162;
  double v163;
  double v164;
  double v165;
  float32x4_t v166;
  double v167;
  double v168;
  double v169;
  float32x4_t v170;
  double v171;
  double v172;
  double v173;
  float32x4_t v174;
  double v175;
  double v176;
  double v177;
  float32x4_t v178;
  double v179;
  double v180;
  double v181;
  float32x4_t v182;
  double v183;
  double v184;
  double v185;
  float32x4_t v186;
  double v187;
  double v188;
  double v189;
  float32x4_t v190;
  double v191;
  double v192;
  double v193;
  float32x4_t v194;
  double v195;
  double v196;
  double v197;
  float32x4_t v198;
  double v199;
  double v200;
  double v201;
  float32x4_t v202;
  double v203;
  double v204;
  double v205;
  float32x4_t v206;
  double v207;
  double v208;
  double v209;
  float32x4_t v210;
  double v211;
  double v212;
  double v213;
  float32x4_t v214;
  double v215;
  double v216;
  double v217;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  _OWORD v225[2];
  _OWORD v226[5];
  uint64_t v227;
  _OWORD v228[2];
  _OWORD v229[5];
  uint64_t v230;
  _OWORD v231[2];
  _OWORD v232[5];
  uint64_t v233;
  _OWORD v234[2];
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  uint64_t v240;
  _OWORD v241[2];
  _OWORD v242[5];
  uint64_t v243;
  _OWORD v244[2];
  _OWORD v245[5];
  uint64_t v246;
  _OWORD v247[2];
  _OWORD v248[5];
  uint64_t v249;
  _OWORD v250[2];
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  uint64_t v256;
  _OWORD v257[2];
  _OWORD v258[5];
  uint64_t v259;
  _OWORD v260[2];
  _OWORD v261[5];
  uint64_t v262;
  _OWORD v263[2];
  _OWORD v264[5];
  uint64_t v265;
  _OWORD v266[2];
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  uint64_t v272;
  _OWORD v273[2];
  _OWORD v274[5];
  uint64_t v275;
  _OWORD v276[2];
  _OWORD v277[5];
  uint64_t v278;
  _OWORD v279[2];
  _OWORD v280[5];
  uint64_t v281;
  _OWORD v282[2];
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  uint64_t v288;
  _OWORD v289[2];
  _OWORD v290[5];
  uint64_t v291;
  _OWORD v292[2];
  _OWORD v293[5];
  uint64_t v294;
  _OWORD v295[2];
  _OWORD v296[5];
  uint64_t v297;
  _OWORD v298[2];
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  uint64_t v304;
  _OWORD v305[2];
  _OWORD v306[5];
  uint64_t v307;
  _OWORD v308[2];
  _OWORD v309[5];
  uint64_t v310;
  _OWORD v311[2];
  _OWORD v312[5];
  uint64_t v313;
  _OWORD v314[2];
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  uint64_t v320;
  _OWORD v321[2];
  _OWORD v322[5];
  uint64_t v323;
  _OWORD v324[2];
  _OWORD v325[5];
  uint64_t v326;
  _OWORD v327[2];
  _OWORD v328[5];
  uint64_t v329;
  _OWORD v330[2];
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  uint64_t v336;
  _OWORD v337[2];
  _OWORD v338[5];
  uint64_t v339;
  _OWORD v340[2];
  _OWORD v341[5];
  uint64_t v342;
  _OWORD v343[2];
  _OWORD v344[5];
  uint64_t v345;
  _OWORD v346[2];
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  uint64_t v352;
  _OWORD v353[2];
  _OWORD v354[5];
  uint64_t v355;
  _OWORD v356[2];
  _OWORD v357[5];
  uint64_t v358;
  _OWORD v359[2];
  _OWORD v360[5];
  uint64_t v361;
  _OWORD v362[2];
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  uint64_t v368;
  _OWORD v369[2];
  _OWORD v370[5];
  uint64_t v371;
  _OWORD v372[2];
  _OWORD v373[5];
  uint64_t v374;
  _OWORD v375[2];
  _OWORD v376[5];
  uint64_t v377;
  _OWORD v378[2];
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  uint64_t v384;
  _OWORD v385[2];
  _OWORD v386[5];
  uint64_t v387;
  _OWORD v388[2];
  _OWORD v389[5];
  uint64_t v390;
  _OWORD v391[2];
  _OWORD v392[5];
  uint64_t v393;
  _OWORD v394[2];
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  uint64_t v400;
  _OWORD v401[2];
  _OWORD v402[5];
  uint64_t v403;
  _OWORD v404[2];
  _OWORD v405[5];
  uint64_t v406;
  _OWORD v407[2];
  _OWORD v408[5];
  uint64_t v409;
  _OWORD v410[2];
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  uint64_t v416;
  _OWORD v417[2];
  _OWORD v418[5];
  uint64_t v419;
  _OWORD v420[2];
  _OWORD v421[5];
  uint64_t v422;
  _OWORD v423[2];
  _OWORD v424[5];
  uint64_t v425;
  _OWORD v426[2];
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  uint64_t v432;
  _OWORD v433[2];
  _OWORD v434[5];
  uint64_t v435;
  _OWORD v436[2];
  _OWORD v437[5];
  uint64_t v438;
  _OWORD v439[2];
  _OWORD v440[5];
  uint64_t v441;
  _OWORD v442[2];
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  uint64_t v448;
  _OWORD v449[2];
  _OWORD v450[5];
  uint64_t v451;
  _OWORD v452[2];
  _OWORD v453[5];
  uint64_t v454;
  _OWORD v455[2];
  _OWORD v456[5];
  uint64_t v457;
  _OWORD v458[2];
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  uint64_t v464;
  _OWORD v465[2];
  _OWORD v466[5];
  uint64_t v467;
  _OWORD v468[2];
  _OWORD v469[5];
  uint64_t v470;
  _OWORD v471[2];
  _OWORD v472[5];
  uint64_t v473;
  _OWORD v474[2];
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  uint64_t v480;
  _OWORD v481[2];
  _OWORD v482[5];
  uint64_t v483;
  _OWORD v484[2];
  _OWORD v485[5];
  uint64_t v486;
  _OWORD v487[2];
  _OWORD v488[5];
  uint64_t v489;
  _OWORD v490[2];
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  uint64_t v496;
  _OWORD v497[2];
  _OWORD v498[5];
  uint64_t v499;
  _OWORD v500[2];
  _OWORD v501[5];
  uint64_t v502;
  _OWORD v503[2];
  _OWORD v504[5];
  uint64_t v505;
  _OWORD v506[2];
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  uint64_t v512;
  _OWORD v513[2];
  _OWORD v514[5];
  uint64_t v515;
  _OWORD v516[2];
  _OWORD v517[5];
  uint64_t v518;
  _OWORD v519[2];
  _OWORD v520[5];
  uint64_t v521;
  _OWORD v522[2];
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  uint64_t v528;
  _OWORD v529[2];
  _OWORD v530[5];
  uint64_t v531;
  _OWORD v532[2];
  _OWORD v533[5];
  uint64_t v534;
  _OWORD v535[2];
  _OWORD v536[5];
  uint64_t v537;
  _OWORD v538[2];
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  uint64_t v544;
  _OWORD v545[2];
  _OWORD v546[5];
  uint64_t v547;
  _OWORD v548[2];
  _OWORD v549[5];
  uint64_t v550;
  _OWORD v551[2];
  _OWORD v552[5];
  uint64_t v553;
  _OWORD v554[2];
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  uint64_t v560;
  _OWORD v561[2];
  _OWORD v562[5];
  uint64_t v563;
  _OWORD v564[2];
  _OWORD v565[5];
  uint64_t v566;
  _OWORD v567[2];
  _OWORD v568[5];
  uint64_t v569;
  _OWORD v570[2];
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  uint64_t v576;
  _OWORD v577[2];
  _OWORD v578[5];
  uint64_t v579;
  _OWORD v580[2];
  _OWORD v581[5];
  uint64_t v582;
  _OWORD v583[2];
  _OWORD v584[5];
  uint64_t v585;
  _OWORD v586[2];
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  uint64_t v592;
  _OWORD v593[2];
  _OWORD v594[5];
  uint64_t v595;
  _OWORD v596[2];
  _OWORD v597[5];
  uint64_t v598;
  _OWORD v599[2];
  _OWORD v600[5];
  uint64_t v601;
  _OWORD v602[2];
  __int128 v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  uint64_t v608;
  _OWORD v609[2];
  _OWORD v610[5];
  uint64_t v611;
  _OWORD v612[2];
  _OWORD v613[5];
  uint64_t v614;
  _OWORD v615[2];
  _OWORD v616[5];
  uint64_t v617;
  _OWORD v618[2];
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  uint64_t v624;
  _OWORD v625[2];
  _OWORD v626[5];
  uint64_t v627;
  _OWORD v628[2];
  _OWORD v629[5];
  uint64_t v630;
  _OWORD v631[2];
  _OWORD v632[5];
  uint64_t v633;
  _OWORD v634[2];
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  uint64_t v640;
  _OWORD v641[2];
  _OWORD v642[5];
  uint64_t v643;
  _OWORD v644[2];
  _OWORD v645[5];
  uint64_t v646;
  _OWORD v647[2];
  _OWORD v648[5];
  uint64_t v649;
  _OWORD v650[2];
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  uint64_t v656;
  _OWORD v657[2];
  _OWORD v658[5];
  uint64_t v659;
  _OWORD v660[2];
  _OWORD v661[5];
  uint64_t v662;
  _OWORD v663[2];
  _OWORD v664[5];
  uint64_t v665;
  _OWORD v666[2];
  __int128 v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  uint64_t v672;
  _OWORD v673[2];
  _OWORD v674[5];
  uint64_t v675;
  _OWORD v676[2];
  _OWORD v677[5];
  uint64_t v678;
  _OWORD v679[2];
  _OWORD v680[5];
  uint64_t v681;
  _OWORD v682[2];
  __int128 v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  uint64_t v688;
  _OWORD v689[2];
  _OWORD v690[5];
  uint64_t v691;
  _OWORD v692[2];
  _OWORD v693[5];
  uint64_t v694;
  _OWORD v695[2];
  _OWORD v696[5];
  uint64_t v697;
  _OWORD v698[2];
  __int128 v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  __int128 v703;
  uint64_t v704;
  _OWORD v705[2];
  _OWORD v706[5];
  uint64_t v707;
  _OWORD v708[2];
  _OWORD v709[5];
  uint64_t v710;
  _OWORD v711[2];
  _OWORD v712[5];
  uint64_t v713;
  _OWORD v714[2];
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  uint64_t v720;
  _OWORD v721[2];
  _OWORD v722[5];
  uint64_t v723;
  _OWORD v724[2];
  _OWORD v725[5];
  uint64_t v726;
  _OWORD v727[2];
  _OWORD v728[5];
  uint64_t v729;
  _OWORD v730[2];
  __int128 v731;
  __int128 v732;
  __int128 v733;
  __int128 v734;
  __int128 v735;
  uint64_t v736;
  _OWORD v737[2];
  _OWORD v738[5];
  uint64_t v739;
  _OWORD v740[2];
  _OWORD v741[5];
  uint64_t v742;
  _OWORD v743[2];
  _OWORD v744[5];
  uint64_t v745;
  _OWORD v746[2];
  __int128 v747;
  __int128 v748;
  __int128 v749;
  __int128 v750;
  __int128 v751;
  uint64_t v752;
  _OWORD v753[2];
  _OWORD v754[5];
  uint64_t v755;
  _OWORD v756[2];
  _OWORD v757[5];
  uint64_t v758;
  _OWORD v759[2];
  _OWORD v760[5];
  uint64_t v761;
  _OWORD v762[2];
  __int128 v763;
  __int128 v764;
  __int128 v765;
  __int128 v766;
  __int128 v767;
  uint64_t v768;
  _OWORD v769[2];
  _OWORD v770[5];
  uint64_t v771;
  _OWORD v772[2];
  _OWORD v773[5];
  uint64_t v774;
  _OWORD v775[2];
  _OWORD v776[5];
  uint64_t v777;
  _OWORD v778[2];
  __int128 v779;
  __int128 v780;
  __int128 v781;
  __int128 v782;
  __int128 v783;
  uint64_t v784;
  _OWORD v785[2];
  _OWORD v786[5];
  uint64_t v787;
  _OWORD v788[2];
  _OWORD v789[5];
  uint64_t v790;
  _OWORD v791[2];
  _OWORD v792[5];
  uint64_t v793;
  _OWORD v794[2];
  __int128 v795;
  __int128 v796;
  __int128 v797;
  __int128 v798;
  __int128 v799;
  uint64_t v800;
  _OWORD v801[2];
  _OWORD v802[5];
  uint64_t v803;
  _OWORD v804[2];
  _OWORD v805[5];
  uint64_t v806;
  _OWORD v807[2];
  _OWORD v808[5];
  uint64_t v809;
  _OWORD v810[2];
  __int128 v811;
  __int128 v812;
  __int128 v813;
  __int128 v814;
  __int128 v815;
  uint64_t v816;
  _OWORD v817[2];
  _OWORD v818[5];
  uint64_t v819;
  _OWORD v820[2];
  _OWORD v821[5];
  uint64_t v822;
  _OWORD v823[2];
  _OWORD v824[5];
  uint64_t v825;
  _OWORD v826[2];
  _OWORD v827[5];
  uint64_t v828;
  _OWORD v829[2];
  _OWORD v830[5];
  uint64_t v831;
  _OWORD v832[2];
  _OWORD v833[5];
  uint64_t v834;
  _OWORD v835[7];
  uint64_t v836;
  _OWORD v837[2];
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  _QWORD v993[2];

  v0 = MEMORY[0x24BDAC7A8]();
  v6 = v1;
  v7 = v0;
  v993[1] = *MEMORY[0x24BDAC8D0];
  v838 = 0;
  v225[0] = xmmword_224664508;
  v225[1] = *(_OWORD *)dbl_224664518;
  if ((v0 & 0x33000000) != 0)
    sub_223B37328(v1, 1, 4, 5, (uint64_t)&v838, (uint64_t)v225, COERCE_DOUBLE(0xCC000000C5), COERCE_DOUBLE(0xE8000000E1), v2, v3, v4, v5);
  v8 = *(_OWORD *)(v6 + 48);
  v221 = *(_OWORD *)(v6 + 32);
  v222 = v8;
  v223 = *(_OWORD *)(v6 + 64);
  v224 = *(_QWORD *)(v6 + 80);
  v9 = *(_OWORD *)(v6 + 16);
  v219 = *(_OWORD *)v6;
  v220 = v9;
  v839 = 0;
  v228[0] = xmmword_224664528;
  v228[1] = *(_OWORD *)dbl_224664538;
  if ((v7 & 0x55000000) != 0)
    sub_223B37328((uint64_t)&v219, 1, 5, 4, (uint64_t)&v839, (uint64_t)v228, COERCE_DOUBLE(0xC7000000C6), COERCE_DOUBLE(0xE3000000E2), v2, v3, v4, v5);
  v226[2] = v221;
  v226[3] = v222;
  v226[4] = v223;
  v227 = v224;
  v226[0] = v219;
  v226[1] = v220;
  v840 = 0;
  v231[0] = xmmword_224664548;
  v231[1] = *(_OWORD *)dbl_224664558;
  if ((v7 & 0xFF000000) != 0)
    sub_223B37328((uint64_t)v226, 1, 5, 5, (uint64_t)&v840, (uint64_t)v231, COERCE_DOUBLE(0xCE000000C7), COERCE_DOUBLE(0xEA000000E3), v2, v3, v4, v5);
  v229[2] = v221;
  v229[3] = v222;
  v229[4] = v223;
  v230 = v224;
  v229[0] = v219;
  v229[1] = v220;
  v841 = 0;
  v234[0] = xmmword_224664568;
  v234[1] = *(_OWORD *)dbl_224664578;
  if ((v7 & 0x2000000) != 0)
    sub_223B37328((uint64_t)v229, 0, 4, 6, (uint64_t)&v841, (uint64_t)v234, COERCE_DOUBLE(0xC9000000C8), COERCE_DOUBLE(0xCD000000CCLL), v2, v3, v4, v5);
  v232[2] = v221;
  v232[3] = v222;
  v232[4] = v223;
  v233 = v224;
  v232[0] = v219;
  v232[1] = v220;
  v842 = 0x100010001000100;
  v241[0] = xmmword_224664588;
  v241[1] = *(_OWORD *)dbl_224664598;
  sub_223B37328((uint64_t)v232, 0, 4, 7, (uint64_t)&v842, (uint64_t)v241, COERCE_DOUBLE(0x80000000C9), COERCE_DOUBLE(0x84000000CDLL), v2, v3, v4, v5);
  v237 = v221;
  v238 = v222;
  v239 = v223;
  v240 = v224;
  v235 = v219;
  v236 = v220;
  v843 = 0;
  v244[0] = xmmword_2246645A8;
  v244[1] = *(_OWORD *)dbl_2246645B8;
  if ((v7 & 0xA000000) != 0)
    sub_223B37328((uint64_t)&v235, 0, 5, 6, (uint64_t)&v843, (uint64_t)v244, COERCE_DOUBLE(0xCB000000CALL), COERCE_DOUBLE(0xCF000000CELL), v10, v11, v12, v13);
  v242[2] = v221;
  v242[3] = v222;
  v242[4] = v223;
  v243 = v224;
  v242[0] = v219;
  v242[1] = v220;
  v844 = 0x100010001000100;
  v247[0] = xmmword_2246645C8;
  v247[1] = *(_OWORD *)dbl_2246645D8;
  sub_223B37328((uint64_t)v242, 0, 5, 7, (uint64_t)&v844, (uint64_t)v247, COERCE_DOUBLE(0x82000000CBLL), COERCE_DOUBLE(0x86000000CFLL), v10, v11, v12, v13);
  v245[2] = v221;
  v245[3] = v222;
  v245[4] = v223;
  v246 = v224;
  v245[0] = v219;
  v245[1] = v220;
  v845 = 0;
  v250[0] = xmmword_2246645E8;
  v250[1] = *(_OWORD *)dbl_2246645F8;
  if ((v7 & 0x22000000) != 0)
    sub_223B37328((uint64_t)v245, 1, 4, 6, (uint64_t)&v845, (uint64_t)v250, COERCE_DOUBLE(0xCD000000CCLL), COERCE_DOUBLE(0xE9000000E8), v14, v15, v16, v17);
  v248[2] = v221;
  v248[3] = v222;
  v248[4] = v223;
  v249 = v224;
  v248[0] = v219;
  v248[1] = v220;
  v846 = 0x100010001000100;
  v257[0] = xmmword_224664608;
  v257[1] = *(_OWORD *)dbl_224664618;
  sub_223B37328((uint64_t)v248, 1, 4, 7, (uint64_t)&v846, (uint64_t)v257, COERCE_DOUBLE(0x84000000CDLL), COERCE_DOUBLE(0xA0000000E9), v14, v15, v16, v17);
  v253 = v221;
  v254 = v222;
  v255 = v223;
  v256 = v224;
  v251 = v219;
  v252 = v220;
  v847 = 0;
  v260[0] = xmmword_224664628;
  v260[1] = *(_OWORD *)dbl_224664638;
  if ((v7 & 0xAA000000) != 0)
    sub_223B37328((uint64_t)&v251, 1, 5, 6, (uint64_t)&v847, (uint64_t)v260, COERCE_DOUBLE(0xCF000000CELL), COERCE_DOUBLE(0xEB000000EALL), v18, v19, v20, v21);
  v258[2] = v221;
  v258[3] = v222;
  v258[4] = v223;
  v259 = v224;
  v258[0] = v219;
  v258[1] = v220;
  v848 = 0x100010001000100;
  v263[0] = xmmword_224664648;
  v263[1] = *(_OWORD *)dbl_224664658;
  sub_223B37328((uint64_t)v258, 1, 5, 7, (uint64_t)&v848, (uint64_t)v263, COERCE_DOUBLE(0x86000000CFLL), COERCE_DOUBLE(0xA2000000EBLL), v18, v19, v20, v21);
  v261[2] = v221;
  v261[3] = v222;
  v261[4] = v223;
  v262 = v224;
  v261[0] = v219;
  v261[1] = v220;
  v849 = 0;
  v266[0] = xmmword_224664668;
  v266[1] = *(_OWORD *)dbl_224664678;
  if ((v7 & 0x4000000) != 0)
    sub_223B37328((uint64_t)v261, 0, 6, 4, (uint64_t)&v849, (uint64_t)v266, COERCE_DOUBLE(0xD1000000D0), COERCE_DOUBLE(0xD5000000D4), v22, v23, v24, v25);
  v264[2] = v237;
  v264[3] = v238;
  v264[4] = v239;
  v265 = v240;
  v264[0] = v235;
  v264[1] = v236;
  v850 = 0;
  v273[0] = xmmword_224664688;
  v273[1] = *(_OWORD *)dbl_224664698;
  if ((v7 & 0xC000000) != 0)
    sub_223B37328((uint64_t)v264, 0, 6, 5, (uint64_t)&v850, (uint64_t)v273, COERCE_DOUBLE(0xD8000000D1), COERCE_DOUBLE(0xDC000000D5), v22, v23, v24, v25);
  v269 = v237;
  v270 = v238;
  v271 = v239;
  v272 = v240;
  v267 = v235;
  v268 = v236;
  v851 = 0x202000002020000;
  v276[0] = xmmword_2246646A8;
  v276[1] = *(_OWORD *)dbl_2246646B8;
  sub_223B37328((uint64_t)&v267, 0, 7, 4, (uint64_t)&v851, (uint64_t)v276, COERCE_DOUBLE(0xD3000000D2), COERCE_DOUBLE(0xD7000000D6), v22, v23, v24, v25);
  v274[2] = v237;
  v274[3] = v238;
  v274[4] = v239;
  v275 = v240;
  v274[0] = v235;
  v274[1] = v236;
  v852 = 0x202000002020000;
  v279[0] = xmmword_2246646C8;
  v279[1] = *(_OWORD *)dbl_2246646D8;
  sub_223B37328((uint64_t)v274, 0, 7, 5, (uint64_t)&v852, (uint64_t)v279, COERCE_DOUBLE(0xDA000000D3), COERCE_DOUBLE(0xDE000000D7), v26, v27, v28, v29);
  v277[2] = v237;
  v277[3] = v238;
  v277[4] = v239;
  v278 = v240;
  v277[0] = v235;
  v277[1] = v236;
  v853 = 0;
  v282[0] = xmmword_2246646E8;
  v282[1] = *(_OWORD *)dbl_2246646F8;
  if ((v7 & 0x44000000) != 0)
    sub_223B37328((uint64_t)v277, 1, 6, 4, (uint64_t)&v853, (uint64_t)v282, COERCE_DOUBLE(0xD5000000D4), COERCE_DOUBLE(0xF1000000F0), v30, v31, v32, v33);
  v280[2] = v253;
  v280[3] = v254;
  v280[4] = v255;
  v281 = v256;
  v280[0] = v251;
  v280[1] = v252;
  v854 = 0;
  v289[0] = xmmword_224664708;
  v289[1] = *(_OWORD *)dbl_224664718;
  if ((v7 & 0xCC000000) != 0)
    sub_223B37328((uint64_t)v280, 1, 6, 5, (uint64_t)&v854, (uint64_t)v289, COERCE_DOUBLE(0xDC000000D5), COERCE_DOUBLE(0xF8000000F1), v30, v31, v32, v33);
  v285 = v253;
  v286 = v254;
  v287 = v255;
  v288 = v256;
  v283 = v251;
  v284 = v252;
  v855 = 0x202000002020000;
  v292[0] = xmmword_224664728;
  v292[1] = *(_OWORD *)dbl_224664738;
  sub_223B37328((uint64_t)&v283, 1, 7, 4, (uint64_t)&v855, (uint64_t)v292, COERCE_DOUBLE(0xD7000000D6), COERCE_DOUBLE(0xF3000000F2), v30, v31, v32, v33);
  v290[2] = v253;
  v290[3] = v254;
  v290[4] = v255;
  v291 = v256;
  v290[0] = v251;
  v290[1] = v252;
  v856 = 0x202000002020000;
  v295[0] = xmmword_224664748;
  v295[1] = *(_OWORD *)dbl_224664758;
  sub_223B37328((uint64_t)v290, 1, 7, 5, (uint64_t)&v856, (uint64_t)v295, COERCE_DOUBLE(0xDE000000D7), COERCE_DOUBLE(0xFA000000F3), v34, v35, v36, v37);
  v293[2] = v253;
  v293[3] = v254;
  v293[4] = v255;
  v294 = v256;
  v293[0] = v251;
  v293[1] = v252;
  v857 = 0;
  v298[0] = xmmword_224664768;
  v298[1] = *(_OWORD *)dbl_224664778;
  if ((v7 & 0x8000000) != 0)
    sub_223B37328((uint64_t)v293, 0, 6, 6, (uint64_t)&v857, (uint64_t)v298, COERCE_DOUBLE(0xD9000000D8), COERCE_DOUBLE(0xDD000000DCLL), v38, v39, v40, v41);
  v296[2] = v253;
  v296[3] = v254;
  v296[4] = v255;
  v297 = v256;
  v296[0] = v251;
  v296[1] = v252;
  v858 = 0x100010001000100;
  v305[0] = xmmword_224664788;
  v305[1] = *(_OWORD *)dbl_224664798;
  sub_223B37328((uint64_t)v296, 0, 6, 7, (uint64_t)&v858, (uint64_t)v305, COERCE_DOUBLE(0x90000000D9), COERCE_DOUBLE(0x94000000DDLL), v38, v39, v40, v41);
  v301 = v269;
  v302 = v270;
  v303 = v271;
  v304 = v272;
  v299 = v267;
  v300 = v268;
  v859 = 0x202000002020000;
  v308[0] = xmmword_2246647A8;
  v308[1] = *(_OWORD *)dbl_2246647B8;
  sub_223B37328((uint64_t)&v299, 0, 7, 6, (uint64_t)&v859, (uint64_t)v308, COERCE_DOUBLE(0xDB000000DALL), COERCE_DOUBLE(0xDF000000DELL), v42, v43, v44, v45);
  v306[2] = v269;
  v306[3] = v270;
  v306[4] = v271;
  v307 = v272;
  v306[0] = v267;
  v306[1] = v268;
  v860 = 0x302010003020100;
  v311[0] = xmmword_2246647C8;
  v311[1] = *(_OWORD *)dbl_2246647D8;
  sub_223B37328((uint64_t)v306, 0, 7, 7, (uint64_t)&v860, (uint64_t)v311, COERCE_DOUBLE(0x92000000DBLL), COERCE_DOUBLE(0x96000000DFLL), v46, v47, v48, v49);
  v309[2] = v269;
  v309[3] = v270;
  v309[4] = v271;
  v310 = v272;
  v309[0] = v267;
  v309[1] = v268;
  v861 = 0;
  v314[0] = xmmword_2246647E8;
  v314[1] = *(_OWORD *)dbl_2246647F8;
  if ((v7 & 0x88000000) != 0)
    sub_223B37328((uint64_t)v309, 1, 6, 6, (uint64_t)&v861, (uint64_t)v314, COERCE_DOUBLE(0xDD000000DCLL), COERCE_DOUBLE(0xF9000000F8), v50, v51, v52, v53);
  v312[2] = v269;
  v312[3] = v270;
  v312[4] = v271;
  v313 = v272;
  v312[0] = v267;
  v312[1] = v268;
  v862 = 0x100010001000100;
  v321[0] = xmmword_224664808;
  v321[1] = *(_OWORD *)dbl_224664818;
  sub_223B37328((uint64_t)v312, 1, 6, 7, (uint64_t)&v862, (uint64_t)v321, COERCE_DOUBLE(0x94000000DDLL), COERCE_DOUBLE(0xB0000000F9), v50, v51, v52, v53);
  v317 = v285;
  v318 = v286;
  v319 = v287;
  v320 = v288;
  v315 = v283;
  v316 = v284;
  v863 = 0x202000002020000;
  v324[0] = xmmword_224664828;
  v324[1] = *(_OWORD *)dbl_224664838;
  sub_223B37328((uint64_t)&v315, 1, 7, 6, (uint64_t)&v863, (uint64_t)v324, COERCE_DOUBLE(0xDF000000DELL), COERCE_DOUBLE(0xFB000000FALL), v54, v55, v56, v57);
  v322[2] = v285;
  v322[3] = v286;
  v322[4] = v287;
  v323 = v288;
  v322[0] = v283;
  v322[1] = v284;
  v864 = 0x302010003020100;
  v327[0] = xmmword_224664848;
  v327[1] = *(_OWORD *)dbl_224664858;
  sub_223B37328((uint64_t)v322, 1, 7, 7, (uint64_t)&v864, (uint64_t)v327, COERCE_DOUBLE(0x96000000DFLL), COERCE_DOUBLE(0xB2000000FBLL), v58, v59, v60, v61);
  v325[2] = v285;
  v325[3] = v286;
  v325[4] = v287;
  v326 = v288;
  v325[0] = v283;
  v325[1] = v284;
  v865 = 0;
  v330[0] = xmmword_224664868;
  v330[1] = *(_OWORD *)dbl_224664878;
  if ((v7 & 0x10000000) != 0)
    sub_223B37328((uint64_t)v325, 2, 4, 4, (uint64_t)&v865, (uint64_t)v330, COERCE_DOUBLE(0xE1000000E0), COERCE_DOUBLE(0xE5000000E4), v62, v63, v64, v65);
  v328[2] = v301;
  v328[3] = v302;
  v328[4] = v303;
  v329 = v304;
  v328[0] = v299;
  v328[1] = v300;
  v866 = 0;
  v337[0] = xmmword_224664888;
  v337[1] = *(_OWORD *)dbl_224664898;
  if ((v7 & 0x30000000) != 0)
    sub_223B37328((uint64_t)v328, 2, 4, 5, (uint64_t)&v866, (uint64_t)v337, COERCE_DOUBLE(0xE8000000E1), COERCE_DOUBLE(0xEC000000E5), v62, v63, v64, v65);
  v333 = v301;
  v334 = v302;
  v335 = v303;
  v336 = v304;
  v331 = v299;
  v332 = v300;
  v867 = 0;
  v340[0] = xmmword_2246648A8;
  v340[1] = *(_OWORD *)dbl_2246648B8;
  if ((v7 & 0x50000000) != 0)
    sub_223B37328((uint64_t)&v331, 2, 5, 4, (uint64_t)&v867, (uint64_t)v340, COERCE_DOUBLE(0xE3000000E2), COERCE_DOUBLE(0xE7000000E6), v62, v63, v64, v65);
  v338[2] = v301;
  v338[3] = v302;
  v338[4] = v303;
  v339 = v304;
  v338[0] = v299;
  v338[1] = v300;
  v868 = 0;
  v343[0] = xmmword_2246648C8;
  v343[1] = *(_OWORD *)dbl_2246648D8;
  if ((v7 & 0xF0000000) != 0)
    sub_223B37328((uint64_t)v338, 2, 5, 5, (uint64_t)&v868, (uint64_t)v343, COERCE_DOUBLE(0xEA000000E3), COERCE_DOUBLE(0xEE000000E7), v62, v63, v64, v65);
  v341[2] = v301;
  v341[3] = v302;
  v341[4] = v303;
  v342 = v304;
  v341[0] = v299;
  v341[1] = v300;
  v869 = 0;
  v346[0] = xmmword_2246648E8;
  v346[1] = *(_OWORD *)dbl_2246648F8;
  if ((v7 & 0x100000010000000) != 0)
    sub_223B37328((uint64_t)v341, 3, 4, 4, (uint64_t)&v869, (uint64_t)v346, COERCE_DOUBLE(0xE5000000E4), COERCE_DOUBLE(0x1C1000001C0), v62, v63, v64, v65);
  v344[2] = v301;
  v344[3] = v302;
  v344[4] = v303;
  v345 = v304;
  v344[0] = v299;
  v344[1] = v300;
  v870 = 0;
  v353[0] = xmmword_224664908;
  v353[1] = *(_OWORD *)dbl_224664918;
  if ((v7 & 0x300000030000000) != 0)
    sub_223B37328((uint64_t)v344, 3, 4, 5, (uint64_t)&v870, (uint64_t)v353, COERCE_DOUBLE(0xEC000000E5), COERCE_DOUBLE(0x1C8000001C1), v62, v63, v64, v65);
  v349 = v317;
  v350 = v318;
  v351 = v319;
  v352 = v320;
  v347 = v315;
  v348 = v316;
  v871 = 0;
  v356[0] = xmmword_224664928;
  v356[1] = *(_OWORD *)dbl_224664938;
  if ((v7 & 0x500000050000000) != 0)
    sub_223B37328((uint64_t)&v347, 3, 5, 4, (uint64_t)&v871, (uint64_t)v356, COERCE_DOUBLE(0xE7000000E6), COERCE_DOUBLE(0x1C3000001C2), v62, v63, v64, v65);
  v354[2] = v317;
  v354[3] = v318;
  v354[4] = v319;
  v355 = v320;
  v354[0] = v315;
  v354[1] = v316;
  v872 = 0;
  v359[0] = xmmword_224664948;
  v359[1] = *(_OWORD *)dbl_224664958;
  if ((v7 & 0xF000000F0000000) != 0)
    sub_223B37328((uint64_t)v354, 3, 5, 5, (uint64_t)&v872, (uint64_t)v359, COERCE_DOUBLE(0xEE000000E7), COERCE_DOUBLE(0x1CA000001C3), v62, v63, v64, v65);
  v357[2] = v317;
  v357[3] = v318;
  v357[4] = v319;
  v358 = v320;
  v357[0] = v315;
  v357[1] = v316;
  v873 = 0;
  v362[0] = xmmword_224664968;
  v362[1] = *(_OWORD *)dbl_224664978;
  if ((v7 & 0x20000000) != 0)
    sub_223B37328((uint64_t)v357, 2, 4, 6, (uint64_t)&v873, (uint64_t)v362, COERCE_DOUBLE(0xE9000000E8), COERCE_DOUBLE(0xED000000ECLL), v62, v63, v64, v65);
  v360[2] = v317;
  v360[3] = v318;
  v360[4] = v319;
  v361 = v320;
  v360[0] = v315;
  v360[1] = v316;
  v874 = 0x100010001000100;
  v369[0] = xmmword_224664988;
  v369[1] = *(_OWORD *)dbl_224664998;
  sub_223B37328((uint64_t)v360, 2, 4, 7, (uint64_t)&v874, (uint64_t)v369, COERCE_DOUBLE(0xA0000000E9), COERCE_DOUBLE(0xA4000000EDLL), v62, v63, v64, v65);
  v365 = v317;
  v366 = v318;
  v367 = v319;
  v368 = v320;
  v363 = v315;
  v364 = v316;
  v875 = 0;
  v372[0] = xmmword_2246649A8;
  v372[1] = *(_OWORD *)dbl_2246649B8;
  if ((v7 & 0xA0000000) != 0)
    sub_223B37328((uint64_t)&v363, 2, 5, 6, (uint64_t)&v875, (uint64_t)v372, COERCE_DOUBLE(0xEB000000EALL), COERCE_DOUBLE(0xEF000000EELL), v66, v67, v68, v69);
  v370[2] = v333;
  v370[3] = v334;
  v370[4] = v335;
  v371 = v336;
  v370[0] = v331;
  v370[1] = v332;
  v876 = 0x100010001000100;
  v375[0] = xmmword_2246649C8;
  v375[1] = *(_OWORD *)dbl_2246649D8;
  sub_223B37328((uint64_t)v370, 2, 5, 7, (uint64_t)&v876, (uint64_t)v375, COERCE_DOUBLE(0xA2000000EBLL), COERCE_DOUBLE(0xA6000000EFLL), v66, v67, v68, v69);
  v373[2] = v333;
  v373[3] = v334;
  v373[4] = v335;
  v374 = v336;
  v373[0] = v331;
  v373[1] = v332;
  v877 = 0;
  v378[0] = xmmword_2246649E8;
  v378[1] = *(_OWORD *)dbl_2246649F8;
  if ((v7 & 0x200000020000000) != 0)
    sub_223B37328((uint64_t)v373, 3, 4, 6, (uint64_t)&v877, (uint64_t)v378, COERCE_DOUBLE(0xED000000ECLL), COERCE_DOUBLE(0x1C9000001C8), v70, v71, v72, v73);
  v376[2] = v333;
  v376[3] = v334;
  v376[4] = v335;
  v377 = v336;
  v376[0] = v331;
  v376[1] = v332;
  v878 = 0x100010001000100;
  v385[0] = xmmword_224664A08;
  v385[1] = *(_OWORD *)dbl_224664A18;
  sub_223B37328((uint64_t)v376, 3, 4, 7, (uint64_t)&v878, (uint64_t)v385, COERCE_DOUBLE(0xA4000000EDLL), COERCE_DOUBLE(0x180000001C9), v70, v71, v72, v73);
  v381 = v333;
  v382 = v334;
  v383 = v335;
  v384 = v336;
  v379 = v331;
  v380 = v332;
  v879 = 0;
  v388[0] = xmmword_224664A28;
  v388[1] = *(_OWORD *)dbl_224664A38;
  if ((v7 & 0xA000000A0000000) != 0)
    sub_223B37328((uint64_t)&v379, 3, 5, 6, (uint64_t)&v879, (uint64_t)v388, COERCE_DOUBLE(0xEF000000EELL), COERCE_DOUBLE(0x1CB000001CALL), v74, v75, v76, v77);
  v386[2] = v349;
  v386[3] = v350;
  v386[4] = v351;
  v387 = v352;
  v386[0] = v347;
  v386[1] = v348;
  v880 = 0x100010001000100;
  v391[0] = xmmword_224664A48;
  v391[1] = *(_OWORD *)dbl_224664A58;
  sub_223B37328((uint64_t)v386, 3, 5, 7, (uint64_t)&v880, (uint64_t)v391, COERCE_DOUBLE(0xA6000000EFLL), COERCE_DOUBLE(0x182000001CBLL), v74, v75, v76, v77);
  v389[2] = v349;
  v389[3] = v350;
  v389[4] = v351;
  v390 = v352;
  v389[0] = v347;
  v389[1] = v348;
  v881 = 0;
  v394[0] = xmmword_224664A68;
  v394[1] = *(_OWORD *)dbl_224664A78;
  if ((v7 & 0x40000000) != 0)
    sub_223B37328((uint64_t)v389, 2, 6, 4, (uint64_t)&v881, (uint64_t)v394, COERCE_DOUBLE(0xF1000000F0), COERCE_DOUBLE(0xF5000000F4), v78, v79, v80, v81);
  v392[2] = v365;
  v392[3] = v366;
  v392[4] = v367;
  v393 = v368;
  v392[0] = v363;
  v392[1] = v364;
  v882 = 0;
  v401[0] = xmmword_224664A88;
  v401[1] = *(_OWORD *)dbl_224664A98;
  if ((v7 & 0xC0000000) != 0)
    sub_223B37328((uint64_t)v392, 2, 6, 5, (uint64_t)&v882, (uint64_t)v401, COERCE_DOUBLE(0xF8000000F1), COERCE_DOUBLE(0xFC000000F5), v78, v79, v80, v81);
  v397 = v365;
  v398 = v366;
  v399 = v367;
  v400 = v368;
  v395 = v363;
  v396 = v364;
  v883 = 0x202000002020000;
  v404[0] = xmmword_224664AA8;
  v404[1] = *(_OWORD *)dbl_224664AB8;
  sub_223B37328((uint64_t)&v395, 2, 7, 4, (uint64_t)&v883, (uint64_t)v404, COERCE_DOUBLE(0xF3000000F2), COERCE_DOUBLE(0xF7000000F6), v78, v79, v80, v81);
  v402[2] = v365;
  v402[3] = v366;
  v402[4] = v367;
  v403 = v368;
  v402[0] = v363;
  v402[1] = v364;
  v884 = 0x202000002020000;
  v407[0] = xmmword_224664AC8;
  v407[1] = *(_OWORD *)dbl_224664AD8;
  sub_223B37328((uint64_t)v402, 2, 7, 5, (uint64_t)&v884, (uint64_t)v407, COERCE_DOUBLE(0xFA000000F3), COERCE_DOUBLE(0xFE000000F7), v82, v83, v84, v85);
  v405[2] = v365;
  v405[3] = v366;
  v405[4] = v367;
  v406 = v368;
  v405[0] = v363;
  v405[1] = v364;
  v885 = 0;
  v410[0] = xmmword_224664AE8;
  v410[1] = *(_OWORD *)dbl_224664AF8;
  if ((v7 & 0x400000040000000) != 0)
    sub_223B37328((uint64_t)v405, 3, 6, 4, (uint64_t)&v885, (uint64_t)v410, COERCE_DOUBLE(0xF5000000F4), COERCE_DOUBLE(0x1D1000001D0), v86, v87, v88, v89);
  v408[2] = v381;
  v408[3] = v382;
  v408[4] = v383;
  v409 = v384;
  v408[0] = v379;
  v408[1] = v380;
  v886 = 0;
  v417[0] = xmmword_224664B08;
  v417[1] = *(_OWORD *)dbl_224664B18;
  if ((v7 & 0xC000000C0000000) != 0)
    sub_223B37328((uint64_t)v408, 3, 6, 5, (uint64_t)&v886, (uint64_t)v417, COERCE_DOUBLE(0xFC000000F5), COERCE_DOUBLE(0x1D8000001D1), v86, v87, v88, v89);
  v413 = v381;
  v414 = v382;
  v415 = v383;
  v416 = v384;
  v411 = v379;
  v412 = v380;
  v887 = 0x202000002020000;
  v420[0] = xmmword_224664B28;
  v420[1] = *(_OWORD *)dbl_224664B38;
  sub_223B37328((uint64_t)&v411, 3, 7, 4, (uint64_t)&v887, (uint64_t)v420, COERCE_DOUBLE(0xF7000000F6), COERCE_DOUBLE(0x1D3000001D2), v86, v87, v88, v89);
  v418[2] = v381;
  v418[3] = v382;
  v418[4] = v383;
  v419 = v384;
  v418[0] = v379;
  v418[1] = v380;
  v888 = 0x202000002020000;
  v423[0] = xmmword_224664B48;
  v423[1] = *(_OWORD *)dbl_224664B58;
  sub_223B37328((uint64_t)v418, 3, 7, 5, (uint64_t)&v888, (uint64_t)v423, COERCE_DOUBLE(0xFE000000F7), COERCE_DOUBLE(0x1DA000001D3), v90, v91, v92, v93);
  v421[2] = v381;
  v421[3] = v382;
  v421[4] = v383;
  v422 = v384;
  v421[0] = v379;
  v421[1] = v380;
  v889 = 0;
  v426[0] = xmmword_224664B68;
  v426[1] = *(_OWORD *)dbl_224664B78;
  if ((v7 & 0x80000000) != 0)
    sub_223B37328((uint64_t)v421, 2, 6, 6, (uint64_t)&v889, (uint64_t)v426, COERCE_DOUBLE(0xF9000000F8), COERCE_DOUBLE(0xFD000000FCLL), v94, v95, v96, v97);
  v424[2] = v381;
  v424[3] = v382;
  v424[4] = v383;
  v425 = v384;
  v424[0] = v379;
  v424[1] = v380;
  v890 = 0x100010001000100;
  v433[0] = xmmword_224664B88;
  v433[1] = *(_OWORD *)dbl_224664B98;
  sub_223B37328((uint64_t)v424, 2, 6, 7, (uint64_t)&v890, (uint64_t)v433, COERCE_DOUBLE(0xB0000000F9), COERCE_DOUBLE(0xB4000000FDLL), v94, v95, v96, v97);
  v429 = v397;
  v430 = v398;
  v431 = v399;
  v432 = v400;
  v427 = v395;
  v428 = v396;
  v891 = 0x202000002020000;
  v436[0] = xmmword_224664BA8;
  v436[1] = *(_OWORD *)dbl_224664BB8;
  sub_223B37328((uint64_t)&v427, 2, 7, 6, (uint64_t)&v891, (uint64_t)v436, COERCE_DOUBLE(0xFB000000FALL), COERCE_DOUBLE(0xFF000000FELL), v98, v99, v100, v101);
  v434[2] = v397;
  v434[3] = v398;
  v434[4] = v399;
  v435 = v400;
  v434[0] = v395;
  v434[1] = v396;
  v892 = 0x302010003020100;
  v439[0] = xmmword_224664BC8;
  v439[1] = *(_OWORD *)dbl_224664BD8;
  sub_223B37328((uint64_t)v434, 2, 7, 7, (uint64_t)&v892, (uint64_t)v439, COERCE_DOUBLE(0xB2000000FBLL), COERCE_DOUBLE(0xB6000000FFLL), v102, v103, v104, v105);
  v437[2] = v397;
  v437[3] = v398;
  v437[4] = v399;
  v438 = v400;
  v437[0] = v395;
  v437[1] = v396;
  v893 = 0;
  v442[0] = xmmword_224664BE8;
  v442[1] = *(_OWORD *)dbl_224664BF8;
  if ((v7 & 0x800000080000000) != 0)
    sub_223B37328((uint64_t)v437, 3, 6, 6, (uint64_t)&v893, (uint64_t)v442, COERCE_DOUBLE(0xFD000000FCLL), COERCE_DOUBLE(0x1D9000001D8), v106, v107, v108, v109);
  v440[2] = v397;
  v440[3] = v398;
  v440[4] = v399;
  v441 = v400;
  v440[0] = v395;
  v440[1] = v396;
  v894 = 0x100010001000100;
  v449[0] = xmmword_224664C08;
  v449[1] = *(_OWORD *)dbl_224664C18;
  sub_223B37328((uint64_t)v440, 3, 6, 7, (uint64_t)&v894, (uint64_t)v449, COERCE_DOUBLE(0xB4000000FDLL), COERCE_DOUBLE(0x190000001D9), v106, v107, v108, v109);
  v445 = v413;
  v446 = v414;
  v447 = v415;
  v448 = v416;
  v443 = v411;
  v444 = v412;
  v895 = 0x202000002020000;
  v452[0] = xmmword_224664C28;
  v452[1] = *(_OWORD *)dbl_224664C38;
  sub_223B37328((uint64_t)&v443, 3, 7, 6, (uint64_t)&v895, (uint64_t)v452, COERCE_DOUBLE(0xFF000000FELL), COERCE_DOUBLE(0x1DB000001DALL), v110, v111, v112, v113);
  v450[2] = v413;
  v450[3] = v414;
  v450[4] = v415;
  v451 = v416;
  v450[0] = v411;
  v450[1] = v412;
  v896 = 0x302010003020100;
  v455[0] = xmmword_224664C48;
  v455[1] = *(_OWORD *)dbl_224664C58;
  sub_223B37328((uint64_t)v450, 3, 7, 7, (uint64_t)&v896, (uint64_t)v455, COERCE_DOUBLE(0xB6000000FFLL), COERCE_DOUBLE(0x192000001DBLL), v114, v115, v116, v117);
  v453[2] = v413;
  v453[3] = v414;
  v453[4] = v415;
  v454 = v416;
  v453[0] = v411;
  v453[1] = v412;
  v897 = 0;
  v458[0] = xmmword_224664C68;
  v458[1] = *(_OWORD *)dbl_224664C78;
  if ((v7 & 0x100000000) != 0)
    sub_223B37328((uint64_t)v453, 4, 0, 0, (uint64_t)&v897, (uint64_t)v458, COERCE_DOUBLE(0x10100000100), COERCE_DOUBLE(0x10500000104), v118, v119, v120, v121);
  v456[2] = v429;
  v456[3] = v430;
  v456[4] = v431;
  v457 = v432;
  v456[0] = v427;
  v456[1] = v428;
  v898 = 0;
  v465[0] = xmmword_224664C88;
  v465[1] = *(_OWORD *)dbl_224664C98;
  if ((v7 & 0x300000000) != 0)
    sub_223B37328((uint64_t)v456, 4, 0, 1, (uint64_t)&v898, (uint64_t)v465, COERCE_DOUBLE(0x10800000101), COERCE_DOUBLE(0x10C00000105), v118, v119, v120, v121);
  v461 = v429;
  v462 = v430;
  v463 = v431;
  v464 = v432;
  v459 = v427;
  v460 = v428;
  v899 = 0;
  v468[0] = xmmword_224664CA8;
  v468[1] = *(_OWORD *)dbl_224664CB8;
  if ((v7 & 0x500000000) != 0)
    sub_223B37328((uint64_t)&v459, 4, 1, 0, (uint64_t)&v899, (uint64_t)v468, COERCE_DOUBLE(0x10300000102), COERCE_DOUBLE(0x10700000106), v118, v119, v120, v121);
  v466[2] = v429;
  v466[3] = v430;
  v466[4] = v431;
  v467 = v432;
  v466[0] = v427;
  v466[1] = v428;
  v900 = 0;
  v471[0] = xmmword_224664CC8;
  v471[1] = *(_OWORD *)dbl_224664CD8;
  if ((v7 & 0xF00000000) != 0)
    sub_223B37328((uint64_t)v466, 4, 1, 1, (uint64_t)&v900, (uint64_t)v471, COERCE_DOUBLE(0x10A00000103), COERCE_DOUBLE(0x10E00000107), v118, v119, v120, v121);
  v469[2] = v429;
  v469[3] = v430;
  v469[4] = v431;
  v470 = v432;
  v469[0] = v427;
  v469[1] = v428;
  v901 = 0;
  v474[0] = xmmword_224664CE8;
  v474[1] = *(_OWORD *)dbl_224664CF8;
  if ((v7 & 0x1100000000) != 0)
    sub_223B37328((uint64_t)v469, 5, 0, 0, (uint64_t)&v901, (uint64_t)v474, COERCE_DOUBLE(0x10500000104), COERCE_DOUBLE(0x12100000120), v118, v119, v120, v121);
  v472[2] = v429;
  v472[3] = v430;
  v472[4] = v431;
  v473 = v432;
  v472[0] = v427;
  v472[1] = v428;
  v902 = 0;
  v481[0] = xmmword_224664D08;
  v481[1] = *(_OWORD *)dbl_224664D18;
  if ((v7 & 0x3300000000) != 0)
    sub_223B37328((uint64_t)v472, 5, 0, 1, (uint64_t)&v902, (uint64_t)v481, COERCE_DOUBLE(0x10C00000105), COERCE_DOUBLE(0x12800000121), v118, v119, v120, v121);
  v477 = v445;
  v478 = v446;
  v479 = v447;
  v480 = v448;
  v475 = v443;
  v476 = v444;
  v903 = 0;
  v484[0] = xmmword_224664D28;
  v484[1] = *(_OWORD *)dbl_224664D38;
  if ((v7 & 0x5500000000) != 0)
    sub_223B37328((uint64_t)&v475, 5, 1, 0, (uint64_t)&v903, (uint64_t)v484, COERCE_DOUBLE(0x10700000106), COERCE_DOUBLE(0x12300000122), v118, v119, v120, v121);
  v482[2] = v445;
  v482[3] = v446;
  v482[4] = v447;
  v483 = v448;
  v482[0] = v443;
  v482[1] = v444;
  v904 = 0;
  v487[0] = xmmword_224664D48;
  v487[1] = *(_OWORD *)dbl_224664D58;
  if ((v7 & 0xFF00000000) != 0)
    sub_223B37328((uint64_t)v482, 5, 1, 1, (uint64_t)&v904, (uint64_t)v487, COERCE_DOUBLE(0x10E00000107), COERCE_DOUBLE(0x12A00000123), v118, v119, v120, v121);
  v485[2] = v445;
  v485[3] = v446;
  v485[4] = v447;
  v486 = v448;
  v485[0] = v443;
  v485[1] = v444;
  v905 = 0;
  v490[0] = xmmword_224664D68;
  v490[1] = *(_OWORD *)dbl_224664D78;
  if ((v7 & 0x200000000) != 0)
    sub_223B37328((uint64_t)v485, 4, 0, 2, (uint64_t)&v905, (uint64_t)v490, COERCE_DOUBLE(0x10900000108), COERCE_DOUBLE(0x10D0000010CLL), v118, v119, v120, v121);
  v488[2] = v445;
  v488[3] = v446;
  v488[4] = v447;
  v489 = v448;
  v488[0] = v443;
  v488[1] = v444;
  v906 = 0;
  v497[0] = xmmword_224664D88;
  v497[1] = *(_OWORD *)dbl_224664D98;
  if ((v7 & 0x10200000000) != 0)
    sub_223B37328((uint64_t)v488, 4, 0, 3, (uint64_t)&v906, (uint64_t)v497, COERCE_DOUBLE(0x14000000109), COERCE_DOUBLE(0x1440000010DLL), v118, v119, v120, v121);
  v493 = v461;
  v494 = v462;
  v495 = v463;
  v496 = v464;
  v491 = v459;
  v492 = v460;
  v907 = 0;
  v500[0] = xmmword_224664DA8;
  v500[1] = *(_OWORD *)dbl_224664DB8;
  if ((v7 & 0xA00000000) != 0)
    sub_223B37328((uint64_t)&v491, 4, 1, 2, (uint64_t)&v907, (uint64_t)v500, COERCE_DOUBLE(0x10B0000010ALL), COERCE_DOUBLE(0x10F0000010ELL), v118, v119, v120, v121);
  v498[2] = v461;
  v498[3] = v462;
  v498[4] = v463;
  v499 = v464;
  v498[0] = v459;
  v498[1] = v460;
  v908 = 0;
  v503[0] = xmmword_224664DC8;
  v503[1] = *(_OWORD *)dbl_224664DD8;
  if ((v7 & 0x50A00000000) != 0)
    sub_223B37328((uint64_t)v498, 4, 1, 3, (uint64_t)&v908, (uint64_t)v503, COERCE_DOUBLE(0x1420000010BLL), COERCE_DOUBLE(0x1460000010FLL), v118, v119, v120, v121);
  v501[2] = v461;
  v501[3] = v462;
  v501[4] = v463;
  v502 = v464;
  v501[0] = v459;
  v501[1] = v460;
  v909 = 0;
  v506[0] = xmmword_224664DE8;
  v506[1] = *(_OWORD *)dbl_224664DF8;
  if ((v7 & 0x2200000000) != 0)
    sub_223B37328((uint64_t)v501, 5, 0, 2, (uint64_t)&v909, (uint64_t)v506, COERCE_DOUBLE(0x10D0000010CLL), COERCE_DOUBLE(0x12900000128), v118, v119, v120, v121);
  v504[2] = v461;
  v504[3] = v462;
  v504[4] = v463;
  v505 = v464;
  v504[0] = v459;
  v504[1] = v460;
  v910 = 0;
  v513[0] = xmmword_224664E08;
  v513[1] = *(_OWORD *)dbl_224664E18;
  if ((v7 & 0x112200000000) != 0)
    sub_223B37328((uint64_t)v504, 5, 0, 3, (uint64_t)&v910, (uint64_t)v513, COERCE_DOUBLE(0x1440000010DLL), COERCE_DOUBLE(0x16000000129), v118, v119, v120, v121);
  v509 = v477;
  v510 = v478;
  v511 = v479;
  v512 = v480;
  v507 = v475;
  v508 = v476;
  v911 = 0;
  v516[0] = xmmword_224664E28;
  v516[1] = *(_OWORD *)dbl_224664E38;
  if ((v7 & 0xAA00000000) != 0)
    sub_223B37328((uint64_t)&v507, 5, 1, 2, (uint64_t)&v911, (uint64_t)v516, COERCE_DOUBLE(0x10F0000010ELL), COERCE_DOUBLE(0x12B0000012ALL), v118, v119, v120, v121);
  v514[2] = v477;
  v514[3] = v478;
  v514[4] = v479;
  v515 = v480;
  v514[0] = v475;
  v514[1] = v476;
  v912 = 0;
  v519[0] = xmmword_224664E48;
  v519[1] = *(_OWORD *)dbl_224664E58;
  if ((v7 & 0x55AA00000000) != 0)
    sub_223B37328((uint64_t)v514, 5, 1, 3, (uint64_t)&v912, (uint64_t)v519, COERCE_DOUBLE(0x1460000010FLL), COERCE_DOUBLE(0x1620000012BLL), v118, v119, v120, v121);
  v517[2] = v477;
  v517[3] = v478;
  v517[4] = v479;
  v518 = v480;
  v517[0] = v475;
  v517[1] = v476;
  v913 = 0;
  v522[0] = xmmword_224664E68;
  v522[1] = *(_OWORD *)dbl_224664E78;
  if ((v7 & 0x400000000) != 0)
    sub_223B37328((uint64_t)v517, 4, 2, 0, (uint64_t)&v913, (uint64_t)v522, COERCE_DOUBLE(0x11100000110), COERCE_DOUBLE(0x11500000114), v118, v119, v120, v121);
  v520[2] = v477;
  v520[3] = v478;
  v520[4] = v479;
  v521 = v480;
  v520[0] = v475;
  v520[1] = v476;
  v914 = 0;
  v529[0] = xmmword_224664E88;
  v529[1] = *(_OWORD *)dbl_224664E98;
  if ((v7 & 0xC00000000) != 0)
    sub_223B37328((uint64_t)v520, 4, 2, 1, (uint64_t)&v914, (uint64_t)v529, COERCE_DOUBLE(0x11800000111), COERCE_DOUBLE(0x11C00000115), v118, v119, v120, v121);
  v525 = v493;
  v526 = v494;
  v527 = v495;
  v528 = v496;
  v523 = v491;
  v524 = v492;
  v915 = 0;
  v532[0] = xmmword_224664EA8;
  v532[1] = *(_OWORD *)dbl_224664EB8;
  if ((v7 & 0x1000400000000) != 0)
    sub_223B37328((uint64_t)&v523, 4, 3, 0, (uint64_t)&v915, (uint64_t)v532, COERCE_DOUBLE(0x11300000112), COERCE_DOUBLE(0x11700000116), v118, v119, v120, v121);
  v530[2] = v493;
  v530[3] = v494;
  v530[4] = v495;
  v531 = v496;
  v530[0] = v491;
  v530[1] = v492;
  v916 = 0;
  v535[0] = xmmword_224664EC8;
  v535[1] = *(_OWORD *)dbl_224664ED8;
  if ((v7 & 0x3000C00000000) != 0)
    sub_223B37328((uint64_t)v530, 4, 3, 1, (uint64_t)&v916, (uint64_t)v535, COERCE_DOUBLE(0x11A00000113), COERCE_DOUBLE(0x11E00000117), v118, v119, v120, v121);
  v533[2] = v493;
  v533[3] = v494;
  v533[4] = v495;
  v534 = v496;
  v533[0] = v491;
  v533[1] = v492;
  v917 = 0;
  v538[0] = xmmword_224664EE8;
  v538[1] = *(_OWORD *)dbl_224664EF8;
  if ((v7 & 0x4400000000) != 0)
    sub_223B37328((uint64_t)v533, 5, 2, 0, (uint64_t)&v917, (uint64_t)v538, COERCE_DOUBLE(0x11500000114), COERCE_DOUBLE(0x13100000130), v118, v119, v120, v121);
  v536[2] = v493;
  v536[3] = v494;
  v536[4] = v495;
  v537 = v496;
  v536[0] = v491;
  v536[1] = v492;
  v918 = 0;
  v545[0] = xmmword_224664F08;
  v545[1] = *(_OWORD *)dbl_224664F18;
  if ((v7 & 0xCC00000000) != 0)
    sub_223B37328((uint64_t)v536, 5, 2, 1, (uint64_t)&v918, (uint64_t)v545, COERCE_DOUBLE(0x11C00000115), COERCE_DOUBLE(0x13800000131), v118, v119, v120, v121);
  v541 = v509;
  v542 = v510;
  v543 = v511;
  v544 = v512;
  v539 = v507;
  v540 = v508;
  v919 = 0;
  v548[0] = xmmword_224664F28;
  v548[1] = *(_OWORD *)dbl_224664F38;
  if ((v7 & 0x11004400000000) != 0)
    sub_223B37328((uint64_t)&v539, 5, 3, 0, (uint64_t)&v919, (uint64_t)v548, COERCE_DOUBLE(0x11700000116), COERCE_DOUBLE(0x13300000132), v118, v119, v120, v121);
  v546[2] = v509;
  v546[3] = v510;
  v546[4] = v511;
  v547 = v512;
  v546[0] = v507;
  v546[1] = v508;
  v920 = 0;
  v551[0] = xmmword_224664F48;
  v551[1] = *(_OWORD *)dbl_224664F58;
  if ((v7 & 0x3300CC00000000) != 0)
    sub_223B37328((uint64_t)v546, 5, 3, 1, (uint64_t)&v920, (uint64_t)v551, COERCE_DOUBLE(0x11E00000117), COERCE_DOUBLE(0x13A00000133), v118, v119, v120, v121);
  v549[2] = v509;
  v549[3] = v510;
  v549[4] = v511;
  v550 = v512;
  v549[0] = v507;
  v549[1] = v508;
  v921 = 0;
  v554[0] = xmmword_224664F68;
  v554[1] = *(_OWORD *)dbl_224664F78;
  if ((v7 & 0x800000000) != 0)
    sub_223B37328((uint64_t)v549, 4, 2, 2, (uint64_t)&v921, (uint64_t)v554, COERCE_DOUBLE(0x11900000118), COERCE_DOUBLE(0x11D0000011CLL), v118, v119, v120, v121);
  v552[2] = v509;
  v552[3] = v510;
  v552[4] = v511;
  v553 = v512;
  v552[0] = v507;
  v552[1] = v508;
  v922 = 0;
  v561[0] = xmmword_224664F88;
  v561[1] = *(_OWORD *)dbl_224664F98;
  if ((v7 & 0x40800000000) != 0)
    sub_223B37328((uint64_t)v552, 4, 2, 3, (uint64_t)&v922, (uint64_t)v561, COERCE_DOUBLE(0x15000000119), COERCE_DOUBLE(0x1540000011DLL), v118, v119, v120, v121);
  v557 = v525;
  v558 = v526;
  v559 = v527;
  v560 = v528;
  v555 = v523;
  v556 = v524;
  v923 = 0;
  v564[0] = xmmword_224664FA8;
  v564[1] = *(_OWORD *)dbl_224664FB8;
  if ((v7 & 0x2000800000000) != 0)
    sub_223B37328((uint64_t)&v555, 4, 3, 2, (uint64_t)&v923, (uint64_t)v564, COERCE_DOUBLE(0x11B0000011ALL), COERCE_DOUBLE(0x11F0000011ELL), v118, v119, v120, v121);
  v562[2] = v525;
  v562[3] = v526;
  v562[4] = v527;
  v563 = v528;
  v562[0] = v523;
  v562[1] = v524;
  v924 = 0;
  v567[0] = xmmword_224664FC8;
  v567[1] = *(_OWORD *)dbl_224664FD8;
  if ((v7 & 0x102040800000000) != 0)
    sub_223B37328((uint64_t)v562, 4, 3, 3, (uint64_t)&v924, (uint64_t)v567, COERCE_DOUBLE(0x1520000011BLL), COERCE_DOUBLE(0x1560000011FLL), v118, v119, v120, v121);
  v565[2] = v525;
  v565[3] = v526;
  v565[4] = v527;
  v566 = v528;
  v565[0] = v523;
  v565[1] = v524;
  v925 = 0;
  v570[0] = xmmword_224664FE8;
  v570[1] = *(_OWORD *)dbl_224664FF8;
  if ((v7 & 0x8800000000) != 0)
    sub_223B37328((uint64_t)v565, 5, 2, 2, (uint64_t)&v925, (uint64_t)v570, COERCE_DOUBLE(0x11D0000011CLL), COERCE_DOUBLE(0x13900000138), v118, v119, v120, v121);
  v568[2] = v525;
  v568[3] = v526;
  v568[4] = v527;
  v569 = v528;
  v568[0] = v523;
  v568[1] = v524;
  v926 = 0;
  v577[0] = xmmword_224665008;
  v577[1] = *(_OWORD *)dbl_224665018;
  if ((v7 & 0x448800000000) != 0)
    sub_223B37328((uint64_t)v568, 5, 2, 3, (uint64_t)&v926, (uint64_t)v577, COERCE_DOUBLE(0x1540000011DLL), COERCE_DOUBLE(0x17000000139), v118, v119, v120, v121);
  v573 = v541;
  v574 = v542;
  v575 = v543;
  v576 = v544;
  v571 = v539;
  v572 = v540;
  v927 = 0;
  v580[0] = xmmword_224665028;
  v580[1] = *(_OWORD *)dbl_224665038;
  if ((v7 & 0x22008800000000) != 0)
    sub_223B37328((uint64_t)&v571, 5, 3, 2, (uint64_t)&v927, (uint64_t)v580, COERCE_DOUBLE(0x11F0000011ELL), COERCE_DOUBLE(0x13B0000013ALL), v118, v119, v120, v121);
  v578[2] = v541;
  v578[3] = v542;
  v578[4] = v543;
  v579 = v544;
  v578[0] = v539;
  v578[1] = v540;
  v928 = 0;
  v583[0] = xmmword_224665048;
  v583[1] = *(_OWORD *)dbl_224665058;
  if ((v7 & 0x1122448800000000) != 0)
    sub_223B37328((uint64_t)v578, 5, 3, 3, (uint64_t)&v928, (uint64_t)v583, COERCE_DOUBLE(0x1560000011FLL), COERCE_DOUBLE(0x1720000013BLL), v118, v119, v120, v121);
  v581[2] = v541;
  v581[3] = v542;
  v581[4] = v543;
  v582 = v544;
  v581[0] = v539;
  v581[1] = v540;
  v929 = 0;
  v586[0] = xmmword_224665068;
  v586[1] = *(_OWORD *)dbl_224665078;
  if ((v7 & 0x1000000000) != 0)
    sub_223B37328((uint64_t)v581, 6, 0, 0, (uint64_t)&v929, (uint64_t)v586, COERCE_DOUBLE(0x12100000120), COERCE_DOUBLE(0x12500000124), v118, v119, v120, v121);
  v584[2] = v541;
  v584[3] = v542;
  v584[4] = v543;
  v585 = v544;
  v584[0] = v539;
  v584[1] = v540;
  v930 = 0;
  v593[0] = xmmword_224665088;
  v593[1] = *(_OWORD *)dbl_224665098;
  if ((v7 & 0x3000000000) != 0)
    sub_223B37328((uint64_t)v584, 6, 0, 1, (uint64_t)&v930, (uint64_t)v593, COERCE_DOUBLE(0x12800000121), COERCE_DOUBLE(0x12C00000125), v118, v119, v120, v121);
  v589 = v557;
  v590 = v558;
  v591 = v559;
  v592 = v560;
  v587 = v555;
  v588 = v556;
  v931 = 0;
  v596[0] = xmmword_2246650A8;
  v596[1] = *(_OWORD *)dbl_2246650B8;
  if ((v7 & 0x5000000000) != 0)
    sub_223B37328((uint64_t)&v587, 6, 1, 0, (uint64_t)&v931, (uint64_t)v596, COERCE_DOUBLE(0x12300000122), COERCE_DOUBLE(0x12700000126), v118, v119, v120, v121);
  v594[2] = v557;
  v594[3] = v558;
  v594[4] = v559;
  v595 = v560;
  v594[0] = v555;
  v594[1] = v556;
  v932 = 0;
  v599[0] = xmmword_2246650C8;
  v599[1] = *(_OWORD *)dbl_2246650D8;
  if ((v7 & 0xF000000000) != 0)
    sub_223B37328((uint64_t)v594, 6, 1, 1, (uint64_t)&v932, (uint64_t)v599, COERCE_DOUBLE(0x12A00000123), COERCE_DOUBLE(0x12E00000127), v118, v119, v120, v121);
  v597[2] = v557;
  v597[3] = v558;
  v597[4] = v559;
  v598 = v560;
  v597[0] = v555;
  v597[1] = v556;
  v933 = 0x404040400000000;
  v602[0] = xmmword_2246650E8;
  v602[1] = *(_OWORD *)dbl_2246650F8;
  sub_223B37328((uint64_t)v597, 7, 0, 0, (uint64_t)&v933, (uint64_t)v602, COERCE_DOUBLE(0x12500000124), COERCE_DOUBLE(0x100000000), v118, v119, v120, v121);
  v600[2] = v557;
  v600[3] = v558;
  v600[4] = v559;
  v601 = v560;
  v600[0] = v555;
  v600[1] = v556;
  v934 = 0x404040400000000;
  v609[0] = xmmword_224665108;
  v609[1] = *(_OWORD *)dbl_224665118;
  sub_223B37328((uint64_t)v600, 7, 0, 1, (uint64_t)&v934, (uint64_t)v609, COERCE_DOUBLE(0x12C00000125), COERCE_DOUBLE(0x800000001), v122, v123, v124, v125);
  v605 = v557;
  v606 = v558;
  v607 = v559;
  v608 = v560;
  v603 = v555;
  v604 = v556;
  v935 = 0x404040400000000;
  v612[0] = xmmword_224665128;
  v612[1] = *(_OWORD *)dbl_224665138;
  sub_223B37328((uint64_t)&v603, 7, 1, 0, (uint64_t)&v935, (uint64_t)v612, COERCE_DOUBLE(0x12700000126), COERCE_DOUBLE(0x300000002), v126, v127, v128, v129);
  v610[2] = v557;
  v610[3] = v558;
  v610[4] = v559;
  v611 = v560;
  v610[0] = v555;
  v610[1] = v556;
  v936 = 0x404040400000000;
  v615[0] = xmmword_224665148;
  v615[1] = *(_OWORD *)dbl_224665158;
  sub_223B37328((uint64_t)v610, 7, 1, 1, (uint64_t)&v936, (uint64_t)v615, COERCE_DOUBLE(0x12E00000127), COERCE_DOUBLE(0xA00000003), v130, v131, v132, v133);
  v613[2] = v573;
  v613[3] = v574;
  v613[4] = v575;
  v614 = v576;
  v613[0] = v571;
  v613[1] = v572;
  v937 = 0;
  v618[0] = xmmword_224665168;
  v618[1] = *(_OWORD *)dbl_224665178;
  if ((v7 & 0x2000000000) != 0)
    sub_223B37328((uint64_t)v613, 6, 0, 2, (uint64_t)&v937, (uint64_t)v618, COERCE_DOUBLE(0x12900000128), COERCE_DOUBLE(0x12D0000012CLL), v134, v135, v136, v137);
  v616[2] = v573;
  v616[3] = v574;
  v616[4] = v575;
  v617 = v576;
  v616[0] = v571;
  v616[1] = v572;
  v938 = 0;
  v625[0] = xmmword_224665188;
  v625[1] = *(_OWORD *)dbl_224665198;
  if ((v7 & 0x102000000000) != 0)
    sub_223B37328((uint64_t)v616, 6, 0, 3, (uint64_t)&v938, (uint64_t)v625, COERCE_DOUBLE(0x16000000129), COERCE_DOUBLE(0x1640000012DLL), v134, v135, v136, v137);
  v621 = v589;
  v622 = v590;
  v623 = v591;
  v624 = v592;
  v619 = v587;
  v620 = v588;
  v939 = 0;
  v628[0] = xmmword_2246651A8;
  v628[1] = *(_OWORD *)dbl_2246651B8;
  if ((v7 & 0xA000000000) != 0)
    sub_223B37328((uint64_t)&v619, 6, 1, 2, (uint64_t)&v939, (uint64_t)v628, COERCE_DOUBLE(0x12B0000012ALL), COERCE_DOUBLE(0x12F0000012ELL), v134, v135, v136, v137);
  v626[2] = v589;
  v626[3] = v590;
  v626[4] = v591;
  v627 = v592;
  v626[0] = v587;
  v626[1] = v588;
  v940 = 0;
  v631[0] = xmmword_2246651C8;
  v631[1] = *(_OWORD *)dbl_2246651D8;
  if ((v7 & 0x50A000000000) != 0)
    sub_223B37328((uint64_t)v626, 6, 1, 3, (uint64_t)&v940, (uint64_t)v631, COERCE_DOUBLE(0x1620000012BLL), COERCE_DOUBLE(0x1660000012FLL), v134, v135, v136, v137);
  v629[2] = v589;
  v629[3] = v590;
  v629[4] = v591;
  v630 = v592;
  v629[0] = v587;
  v629[1] = v588;
  v941 = 0x404040400000000;
  v634[0] = xmmword_2246651E8;
  v634[1] = *(_OWORD *)dbl_2246651F8;
  sub_223B37328((uint64_t)v629, 7, 0, 2, (uint64_t)&v941, (uint64_t)v634, COERCE_DOUBLE(0x12D0000012CLL), COERCE_DOUBLE(0x900000008), v134, v135, v136, v137);
  v632[2] = v605;
  v632[3] = v606;
  v632[4] = v607;
  v633 = v608;
  v632[0] = v603;
  v632[1] = v604;
  v942 = 0x404040400000000;
  v641[0] = xmmword_224665208;
  v641[1] = *(_OWORD *)dbl_224665218;
  sub_223B37328((uint64_t)v632, 7, 0, 3, (uint64_t)&v942, (uint64_t)v641, COERCE_DOUBLE(0x1640000012DLL), COERCE_DOUBLE(0x4000000009), v138, v139, v140, v141);
  v637 = v605;
  v638 = v606;
  v639 = v607;
  v640 = v608;
  v635 = v603;
  v636 = v604;
  v943 = 0x404040400000000;
  v644[0] = xmmword_224665228;
  v644[1] = *(_OWORD *)dbl_224665238;
  sub_223B37328((uint64_t)&v635, 7, 1, 2, (uint64_t)&v943, (uint64_t)v644, COERCE_DOUBLE(0x12F0000012ELL), COERCE_DOUBLE(0xB0000000ALL), v142, v143, v144, v145);
  v642[2] = v605;
  v642[3] = v606;
  v642[4] = v607;
  v643 = v608;
  v642[0] = v603;
  v642[1] = v604;
  v944 = 0x404040400000000;
  v647[0] = xmmword_224665248;
  v647[1] = *(_OWORD *)dbl_224665258;
  sub_223B37328((uint64_t)v642, 7, 1, 3, (uint64_t)&v944, (uint64_t)v647, COERCE_DOUBLE(0x1660000012FLL), COERCE_DOUBLE(0x420000000BLL), v146, v147, v148, v149);
  v645[2] = v605;
  v645[3] = v606;
  v645[4] = v607;
  v646 = v608;
  v645[0] = v603;
  v645[1] = v604;
  v945 = 0;
  v650[0] = xmmword_224665268;
  v650[1] = *(_OWORD *)dbl_224665278;
  if ((v7 & 0x4000000000) != 0)
    sub_223B37328((uint64_t)v645, 6, 2, 0, (uint64_t)&v945, (uint64_t)v650, COERCE_DOUBLE(0x13100000130), COERCE_DOUBLE(0x13500000134), v150, v151, v152, v153);
  v648[2] = v605;
  v648[3] = v606;
  v648[4] = v607;
  v649 = v608;
  v648[0] = v603;
  v648[1] = v604;
  v946 = 0;
  v657[0] = xmmword_224665288;
  v657[1] = *(_OWORD *)dbl_224665298;
  if ((v7 & 0xC000000000) != 0)
    sub_223B37328((uint64_t)v648, 6, 2, 1, (uint64_t)&v946, (uint64_t)v657, COERCE_DOUBLE(0x13800000131), COERCE_DOUBLE(0x13C00000135), v150, v151, v152, v153);
  v653 = v621;
  v654 = v622;
  v655 = v623;
  v656 = v624;
  v651 = v619;
  v652 = v620;
  v947 = 0;
  v660[0] = xmmword_2246652A8;
  v660[1] = *(_OWORD *)dbl_2246652B8;
  if ((v7 & 0x10004000000000) != 0)
    sub_223B37328((uint64_t)&v651, 6, 3, 0, (uint64_t)&v947, (uint64_t)v660, COERCE_DOUBLE(0x13300000132), COERCE_DOUBLE(0x13700000136), v150, v151, v152, v153);
  v658[2] = v621;
  v658[3] = v622;
  v658[4] = v623;
  v659 = v624;
  v658[0] = v619;
  v658[1] = v620;
  v948 = 0;
  v663[0] = xmmword_2246652C8;
  v663[1] = *(_OWORD *)dbl_2246652D8;
  if ((v7 & 0x3000C000000000) != 0)
    sub_223B37328((uint64_t)v658, 6, 3, 1, (uint64_t)&v948, (uint64_t)v663, COERCE_DOUBLE(0x13A00000133), COERCE_DOUBLE(0x13E00000137), v150, v151, v152, v153);
  v661[2] = v621;
  v661[3] = v622;
  v661[4] = v623;
  v662 = v624;
  v661[0] = v619;
  v661[1] = v620;
  v949 = 0x404040400000000;
  v666[0] = xmmword_2246652E8;
  v666[1] = *(_OWORD *)dbl_2246652F8;
  sub_223B37328((uint64_t)v661, 7, 2, 0, (uint64_t)&v949, (uint64_t)v666, COERCE_DOUBLE(0x13500000134), COERCE_DOUBLE(0x1100000010), v150, v151, v152, v153);
  v664[2] = v637;
  v664[3] = v638;
  v664[4] = v639;
  v665 = v640;
  v664[0] = v635;
  v664[1] = v636;
  v950 = 0x404040400000000;
  v673[0] = xmmword_224665308;
  v673[1] = *(_OWORD *)dbl_224665318;
  sub_223B37328((uint64_t)v664, 7, 2, 1, (uint64_t)&v950, (uint64_t)v673, COERCE_DOUBLE(0x13C00000135), COERCE_DOUBLE(0x1800000011), v154, v155, v156, v157);
  v669 = v637;
  v670 = v638;
  v671 = v639;
  v672 = v640;
  v667 = v635;
  v668 = v636;
  v951 = 0x404040400000000;
  v676[0] = xmmword_224665328;
  v676[1] = *(_OWORD *)dbl_224665338;
  sub_223B37328((uint64_t)&v667, 7, 3, 0, (uint64_t)&v951, (uint64_t)v676, COERCE_DOUBLE(0x13700000136), COERCE_DOUBLE(0x1300000012), v158, v159, v160, v161);
  v674[2] = v637;
  v674[3] = v638;
  v674[4] = v639;
  v675 = v640;
  v674[0] = v635;
  v674[1] = v636;
  v952 = 0x404040400000000;
  v679[0] = xmmword_224665348;
  v679[1] = *(_OWORD *)dbl_224665358;
  sub_223B37328((uint64_t)v674, 7, 3, 1, (uint64_t)&v952, (uint64_t)v679, COERCE_DOUBLE(0x13E00000137), COERCE_DOUBLE(0x1A00000013), v162, v163, v164, v165);
  v677[2] = v637;
  v677[3] = v638;
  v677[4] = v639;
  v678 = v640;
  v677[0] = v635;
  v677[1] = v636;
  v953 = 0;
  v682[0] = xmmword_224665368;
  v682[1] = *(_OWORD *)dbl_224665378;
  if ((v7 & 0x8000000000) != 0)
    sub_223B37328((uint64_t)v677, 6, 2, 2, (uint64_t)&v953, (uint64_t)v682, COERCE_DOUBLE(0x13900000138), COERCE_DOUBLE(0x13D0000013CLL), v166, v167, v168, v169);
  v680[2] = v637;
  v680[3] = v638;
  v680[4] = v639;
  v681 = v640;
  v680[0] = v635;
  v680[1] = v636;
  v954 = 0;
  v689[0] = xmmword_224665388;
  v689[1] = *(_OWORD *)dbl_224665398;
  if ((v7 & 0x408000000000) != 0)
    sub_223B37328((uint64_t)v680, 6, 2, 3, (uint64_t)&v954, (uint64_t)v689, COERCE_DOUBLE(0x17000000139), COERCE_DOUBLE(0x1740000013DLL), v166, v167, v168, v169);
  v685 = v653;
  v686 = v654;
  v687 = v655;
  v688 = v656;
  v683 = v651;
  v684 = v652;
  v955 = 0;
  v692[0] = xmmword_2246653A8;
  v692[1] = *(_OWORD *)dbl_2246653B8;
  if ((v7 & 0x20008000000000) != 0)
    sub_223B37328((uint64_t)&v683, 6, 3, 2, (uint64_t)&v955, (uint64_t)v692, COERCE_DOUBLE(0x13B0000013ALL), COERCE_DOUBLE(0x13F0000013ELL), v166, v167, v168, v169);
  v690[2] = v653;
  v690[3] = v654;
  v690[4] = v655;
  v691 = v656;
  v690[0] = v651;
  v690[1] = v652;
  v956 = 0;
  v695[0] = xmmword_2246653C8;
  v695[1] = *(_OWORD *)dbl_2246653D8;
  if ((v7 & 0x1020408000000000) != 0)
    sub_223B37328((uint64_t)v690, 6, 3, 3, (uint64_t)&v956, (uint64_t)v695, COERCE_DOUBLE(0x1720000013BLL), COERCE_DOUBLE(0x1760000013FLL), v166, v167, v168, v169);
  v693[2] = v653;
  v693[3] = v654;
  v693[4] = v655;
  v694 = v656;
  v693[0] = v651;
  v693[1] = v652;
  v957 = 0x404040400000000;
  v698[0] = xmmword_2246653E8;
  v698[1] = *(_OWORD *)dbl_2246653F8;
  sub_223B37328((uint64_t)v693, 7, 2, 2, (uint64_t)&v957, (uint64_t)v698, COERCE_DOUBLE(0x13D0000013CLL), COERCE_DOUBLE(0x1900000018), v166, v167, v168, v169);
  v696[2] = v669;
  v696[3] = v670;
  v696[4] = v671;
  v697 = v672;
  v696[0] = v667;
  v696[1] = v668;
  v958 = 0x404040400000000;
  v705[0] = xmmword_224665408;
  v705[1] = *(_OWORD *)dbl_224665418;
  sub_223B37328((uint64_t)v696, 7, 2, 3, (uint64_t)&v958, (uint64_t)v705, COERCE_DOUBLE(0x1740000013DLL), COERCE_DOUBLE(0x5000000019), v170, v171, v172, v173);
  v701 = v669;
  v702 = v670;
  v703 = v671;
  v704 = v672;
  v699 = v667;
  v700 = v668;
  v959 = 0x404040400000000;
  v708[0] = xmmword_224665428;
  v708[1] = *(_OWORD *)dbl_224665438;
  sub_223B37328((uint64_t)&v699, 7, 3, 2, (uint64_t)&v959, (uint64_t)v708, COERCE_DOUBLE(0x13F0000013ELL), COERCE_DOUBLE(0x1B0000001ALL), v174, v175, v176, v177);
  v706[2] = v669;
  v706[3] = v670;
  v706[4] = v671;
  v707 = v672;
  v706[0] = v667;
  v706[1] = v668;
  v960 = 0x404040400000000;
  v711[0] = xmmword_224665448;
  v711[1] = *(_OWORD *)dbl_224665458;
  sub_223B37328((uint64_t)v706, 7, 3, 3, (uint64_t)&v960, (uint64_t)v711, COERCE_DOUBLE(0x1760000013FLL), COERCE_DOUBLE(0x520000001BLL), v178, v179, v180, v181);
  v709[2] = v669;
  v709[3] = v670;
  v709[4] = v671;
  v710 = v672;
  v709[0] = v667;
  v709[1] = v668;
  v961 = 0;
  v714[0] = xmmword_224665468;
  v714[1] = *(_OWORD *)dbl_224665478;
  if ((v7 & 0x10000000000) != 0)
    sub_223B37328((uint64_t)v709, 4, 0, 4, (uint64_t)&v961, (uint64_t)v714, COERCE_DOUBLE(0x14100000140), COERCE_DOUBLE(0x14500000144), v182, v183, v184, v185);
  v712[2] = v669;
  v712[3] = v670;
  v712[4] = v671;
  v713 = v672;
  v712[0] = v667;
  v712[1] = v668;
  v962 = 0;
  v721[0] = xmmword_224665488;
  v721[1] = *(_OWORD *)dbl_224665498;
  if ((v7 & 0x30000000000) != 0)
    sub_223B37328((uint64_t)v712, 4, 0, 5, (uint64_t)&v962, (uint64_t)v721, COERCE_DOUBLE(0x14800000141), COERCE_DOUBLE(0x14C00000145), v182, v183, v184, v185);
  v717 = v685;
  v718 = v686;
  v719 = v687;
  v720 = v688;
  v715 = v683;
  v716 = v684;
  v963 = 0;
  v724[0] = xmmword_2246654A8;
  v724[1] = *(_OWORD *)dbl_2246654B8;
  if ((v7 & 0x50000000000) != 0)
    sub_223B37328((uint64_t)&v715, 4, 1, 4, (uint64_t)&v963, (uint64_t)v724, COERCE_DOUBLE(0x14300000142), COERCE_DOUBLE(0x14700000146), v182, v183, v184, v185);
  v722[2] = v685;
  v722[3] = v686;
  v722[4] = v687;
  v723 = v688;
  v722[0] = v683;
  v722[1] = v684;
  v964 = 0;
  v727[0] = xmmword_2246654C8;
  v727[1] = *(_OWORD *)dbl_2246654D8;
  if ((v7 & 0xF0000000000) != 0)
    sub_223B37328((uint64_t)v722, 4, 1, 5, (uint64_t)&v964, (uint64_t)v727, COERCE_DOUBLE(0x14A00000143), COERCE_DOUBLE(0x14E00000147), v182, v183, v184, v185);
  v725[2] = v685;
  v725[3] = v686;
  v725[4] = v687;
  v726 = v688;
  v725[0] = v683;
  v725[1] = v684;
  v965 = 0;
  v730[0] = xmmword_2246654E8;
  v730[1] = *(_OWORD *)dbl_2246654F8;
  if ((v7 & 0x110000000000) != 0)
    sub_223B37328((uint64_t)v725, 5, 0, 4, (uint64_t)&v965, (uint64_t)v730, COERCE_DOUBLE(0x14500000144), COERCE_DOUBLE(0x16100000160), v182, v183, v184, v185);
  v728[2] = v701;
  v728[3] = v702;
  v728[4] = v703;
  v729 = v704;
  v728[0] = v699;
  v728[1] = v700;
  v966 = 0;
  v737[0] = xmmword_224665508;
  v737[1] = *(_OWORD *)dbl_224665518;
  if ((v7 & 0x330000000000) != 0)
    sub_223B37328((uint64_t)v728, 5, 0, 5, (uint64_t)&v966, (uint64_t)v737, COERCE_DOUBLE(0x14C00000145), COERCE_DOUBLE(0x16800000161), v182, v183, v184, v185);
  v733 = v701;
  v734 = v702;
  v735 = v703;
  v736 = v704;
  v731 = v699;
  v732 = v700;
  v967 = 0;
  v740[0] = xmmword_224665528;
  v740[1] = *(_OWORD *)dbl_224665538;
  if ((v7 & 0x550000000000) != 0)
    sub_223B37328((uint64_t)&v731, 5, 1, 4, (uint64_t)&v967, (uint64_t)v740, COERCE_DOUBLE(0x14700000146), COERCE_DOUBLE(0x16300000162), v182, v183, v184, v185);
  v738[2] = v701;
  v738[3] = v702;
  v738[4] = v703;
  v739 = v704;
  v738[0] = v699;
  v738[1] = v700;
  v968 = 0;
  v743[0] = xmmword_224665548;
  v743[1] = *(_OWORD *)dbl_224665558;
  if ((v7 & 0xFF0000000000) != 0)
    sub_223B37328((uint64_t)v738, 5, 1, 5, (uint64_t)&v968, (uint64_t)v743, COERCE_DOUBLE(0x14E00000147), COERCE_DOUBLE(0x16A00000163), v182, v183, v184, v185);
  v741[2] = v701;
  v741[3] = v702;
  v741[4] = v703;
  v742 = v704;
  v741[0] = v699;
  v741[1] = v700;
  v969 = 0;
  v746[0] = xmmword_224665568;
  v746[1] = *(_OWORD *)dbl_224665578;
  if ((v7 & 0x20000000000) != 0)
    sub_223B37328((uint64_t)v741, 4, 0, 6, (uint64_t)&v969, (uint64_t)v746, COERCE_DOUBLE(0x14900000148), COERCE_DOUBLE(0x14D0000014CLL), v182, v183, v184, v185);
  v744[2] = v701;
  v744[3] = v702;
  v744[4] = v703;
  v745 = v704;
  v744[0] = v699;
  v744[1] = v700;
  v970 = 0x100010001000100;
  v753[0] = xmmword_224665588;
  v753[1] = *(_OWORD *)dbl_224665598;
  sub_223B37328((uint64_t)v744, 4, 0, 7, (uint64_t)&v970, (uint64_t)v753, COERCE_DOUBLE(0x10000000149), COERCE_DOUBLE(0x1040000014DLL), v182, v183, v184, v185);
  v749 = v701;
  v750 = v702;
  v751 = v703;
  v752 = v704;
  v747 = v699;
  v748 = v700;
  v971 = 0;
  v756[0] = xmmword_2246655A8;
  v756[1] = *(_OWORD *)dbl_2246655B8;
  if ((v7 & 0xA0000000000) != 0)
    sub_223B37328((uint64_t)&v747, 4, 1, 6, (uint64_t)&v971, (uint64_t)v756, COERCE_DOUBLE(0x14B0000014ALL), COERCE_DOUBLE(0x14F0000014ELL), v186, v187, v188, v189);
  v754[2] = v717;
  v754[3] = v718;
  v754[4] = v719;
  v755 = v720;
  v754[0] = v715;
  v754[1] = v716;
  v972 = 0x100010001000100;
  v759[0] = xmmword_2246655C8;
  v759[1] = *(_OWORD *)dbl_2246655D8;
  sub_223B37328((uint64_t)v754, 4, 1, 7, (uint64_t)&v972, (uint64_t)v759, COERCE_DOUBLE(0x1020000014BLL), COERCE_DOUBLE(0x1060000014FLL), v186, v187, v188, v189);
  v757[2] = v717;
  v757[3] = v718;
  v757[4] = v719;
  v758 = v720;
  v757[0] = v715;
  v757[1] = v716;
  v973 = 0;
  v762[0] = xmmword_2246655E8;
  v762[1] = *(_OWORD *)dbl_2246655F8;
  if ((v7 & 0x220000000000) != 0)
    sub_223B37328((uint64_t)v757, 5, 0, 6, (uint64_t)&v973, (uint64_t)v762, COERCE_DOUBLE(0x14D0000014CLL), COERCE_DOUBLE(0x16900000168), v190, v191, v192, v193);
  v760[2] = v717;
  v760[3] = v718;
  v760[4] = v719;
  v761 = v720;
  v760[0] = v715;
  v760[1] = v716;
  v974 = 0x100010001000100;
  v769[0] = xmmword_224665608;
  v769[1] = *(_OWORD *)dbl_224665618;
  sub_223B37328((uint64_t)v760, 5, 0, 7, (uint64_t)&v974, (uint64_t)v769, COERCE_DOUBLE(0x1040000014DLL), COERCE_DOUBLE(0x12000000169), v190, v191, v192, v193);
  v765 = v717;
  v766 = v718;
  v767 = v719;
  v768 = v720;
  v763 = v715;
  v764 = v716;
  v975 = 0;
  v772[0] = xmmword_224665628;
  v772[1] = *(_OWORD *)dbl_224665638;
  if ((v7 & 0xAA0000000000) != 0)
    sub_223B37328((uint64_t)&v763, 5, 1, 6, (uint64_t)&v975, (uint64_t)v772, COERCE_DOUBLE(0x14F0000014ELL), COERCE_DOUBLE(0x16B0000016ALL), v194, v195, v196, v197);
  v770[2] = v733;
  v770[3] = v734;
  v770[4] = v735;
  v771 = v736;
  v770[0] = v731;
  v770[1] = v732;
  v976 = 0x100010001000100;
  v775[0] = xmmword_224665648;
  v775[1] = *(_OWORD *)dbl_224665658;
  sub_223B37328((uint64_t)v770, 5, 1, 7, (uint64_t)&v976, (uint64_t)v775, COERCE_DOUBLE(0x1060000014FLL), COERCE_DOUBLE(0x1220000016BLL), v194, v195, v196, v197);
  v773[2] = v733;
  v773[3] = v734;
  v773[4] = v735;
  v774 = v736;
  v773[0] = v731;
  v773[1] = v732;
  v977 = 0;
  v778[0] = xmmword_224665668;
  v778[1] = *(_OWORD *)dbl_224665678;
  if ((v7 & 0x40000000000) != 0)
    sub_223B37328((uint64_t)v773, 4, 2, 4, (uint64_t)&v977, (uint64_t)v778, COERCE_DOUBLE(0x15100000150), COERCE_DOUBLE(0x15500000154), v198, v199, v200, v201);
  v776[2] = v749;
  v776[3] = v750;
  v776[4] = v751;
  v777 = v752;
  v776[0] = v747;
  v776[1] = v748;
  v978 = 0;
  v785[0] = xmmword_224665688;
  v785[1] = *(_OWORD *)dbl_224665698;
  if ((v7 & 0xC0000000000) != 0)
    sub_223B37328((uint64_t)v776, 4, 2, 5, (uint64_t)&v978, (uint64_t)v785, COERCE_DOUBLE(0x15800000151), COERCE_DOUBLE(0x15C00000155), v198, v199, v200, v201);
  v781 = v749;
  v782 = v750;
  v783 = v751;
  v784 = v752;
  v779 = v747;
  v780 = v748;
  v979 = 0;
  v788[0] = xmmword_2246656A8;
  v788[1] = *(_OWORD *)dbl_2246656B8;
  if ((v7 & 0x100040000000000) != 0)
    sub_223B37328((uint64_t)&v779, 4, 3, 4, (uint64_t)&v979, (uint64_t)v788, COERCE_DOUBLE(0x15300000152), COERCE_DOUBLE(0x15700000156), v198, v199, v200, v201);
  v786[2] = v749;
  v786[3] = v750;
  v786[4] = v751;
  v787 = v752;
  v786[0] = v747;
  v786[1] = v748;
  v980 = 0;
  v791[0] = xmmword_2246656C8;
  v791[1] = *(_OWORD *)dbl_2246656D8;
  if ((v7 & 0x3000C0000000000) != 0)
    sub_223B37328((uint64_t)v786, 4, 3, 5, (uint64_t)&v980, (uint64_t)v791, COERCE_DOUBLE(0x15A00000153), COERCE_DOUBLE(0x15E00000157), v198, v199, v200, v201);
  v789[2] = v749;
  v789[3] = v750;
  v789[4] = v751;
  v790 = v752;
  v789[0] = v747;
  v789[1] = v748;
  v981 = 0;
  v794[0] = xmmword_2246656E8;
  v794[1] = *(_OWORD *)dbl_2246656F8;
  if ((v7 & 0x440000000000) != 0)
    sub_223B37328((uint64_t)v789, 5, 2, 4, (uint64_t)&v981, (uint64_t)v794, COERCE_DOUBLE(0x15500000154), COERCE_DOUBLE(0x17100000170), v198, v199, v200, v201);
  v792[2] = v749;
  v792[3] = v750;
  v792[4] = v751;
  v793 = v752;
  v792[0] = v747;
  v792[1] = v748;
  v982 = 0;
  v801[0] = xmmword_224665708;
  v801[1] = *(_OWORD *)dbl_224665718;
  if ((v7 & 0xCC0000000000) != 0)
    sub_223B37328((uint64_t)v792, 5, 2, 5, (uint64_t)&v982, (uint64_t)v801, COERCE_DOUBLE(0x15C00000155), COERCE_DOUBLE(0x17800000171), v198, v199, v200, v201);
  v797 = v765;
  v798 = v766;
  v799 = v767;
  v800 = v768;
  v795 = v763;
  v796 = v764;
  v983 = 0;
  v804[0] = xmmword_224665728;
  v804[1] = *(_OWORD *)dbl_224665738;
  if ((v7 & 0x1100440000000000) != 0)
    sub_223B37328((uint64_t)&v795, 5, 3, 4, (uint64_t)&v983, (uint64_t)v804, COERCE_DOUBLE(0x15700000156), COERCE_DOUBLE(0x17300000172), v198, v199, v200, v201);
  v802[2] = v765;
  v802[3] = v766;
  v802[4] = v767;
  v803 = v768;
  v802[0] = v763;
  v802[1] = v764;
  v984 = 0;
  v807[0] = xmmword_224665748;
  v807[1] = *(_OWORD *)dbl_224665758;
  if ((v7 & 0x3300CC0000000000) != 0)
    sub_223B37328((uint64_t)v802, 5, 3, 5, (uint64_t)&v984, (uint64_t)v807, COERCE_DOUBLE(0x15E00000157), COERCE_DOUBLE(0x17A00000173), v198, v199, v200, v201);
  v805[2] = v765;
  v805[3] = v766;
  v805[4] = v767;
  v806 = v768;
  v805[0] = v763;
  v805[1] = v764;
  v985 = 0;
  v810[0] = xmmword_224665768;
  v810[1] = *(_OWORD *)dbl_224665778;
  if ((v7 & 0x80000000000) != 0)
    sub_223B37328((uint64_t)v805, 4, 2, 6, (uint64_t)&v985, (uint64_t)v810, COERCE_DOUBLE(0x15900000158), COERCE_DOUBLE(0x15D0000015CLL), v198, v199, v200, v201);
  v808[2] = v765;
  v808[3] = v766;
  v808[4] = v767;
  v809 = v768;
  v808[0] = v763;
  v808[1] = v764;
  v986 = 0x100010001000100;
  v817[0] = xmmword_224665788;
  v817[1] = *(_OWORD *)dbl_224665798;
  sub_223B37328((uint64_t)v808, 4, 2, 7, (uint64_t)&v986, (uint64_t)v817, COERCE_DOUBLE(0x11000000159), COERCE_DOUBLE(0x1140000015DLL), v198, v199, v200, v201);
  v813 = v765;
  v814 = v766;
  v815 = v767;
  v816 = v768;
  v811 = v763;
  v812 = v764;
  v987 = 0;
  v820[0] = xmmword_2246657A8;
  v820[1] = *(_OWORD *)dbl_2246657B8;
  if ((v7 & 0x200080000000000) != 0)
    sub_223B37328((uint64_t)&v811, 4, 3, 6, (uint64_t)&v987, (uint64_t)v820, COERCE_DOUBLE(0x15B0000015ALL), COERCE_DOUBLE(0x15F0000015ELL), v202, v203, v204, v205);
  v818[2] = v781;
  v818[3] = v782;
  v818[4] = v783;
  v819 = v784;
  v818[0] = v779;
  v818[1] = v780;
  v988 = 0x100010001000100;
  v823[0] = xmmword_2246657C8;
  v823[1] = *(_OWORD *)dbl_2246657D8;
  sub_223B37328((uint64_t)v818, 4, 3, 7, (uint64_t)&v988, (uint64_t)v823, COERCE_DOUBLE(0x1120000015BLL), COERCE_DOUBLE(0x1160000015FLL), v202, v203, v204, v205);
  v821[2] = v781;
  v821[3] = v782;
  v821[4] = v783;
  v822 = v784;
  v821[0] = v779;
  v821[1] = v780;
  v989 = 0;
  v826[0] = xmmword_2246657E8;
  v826[1] = *(_OWORD *)dbl_2246657F8;
  if ((v7 & 0x880000000000) != 0)
    sub_223B37328((uint64_t)v821, 5, 2, 6, (uint64_t)&v989, (uint64_t)v826, COERCE_DOUBLE(0x15D0000015CLL), COERCE_DOUBLE(0x17900000178), v206, v207, v208, v209);
  v824[2] = v781;
  v824[3] = v782;
  v824[4] = v783;
  v825 = v784;
  v824[0] = v779;
  v824[1] = v780;
  v990 = 0x100010001000100;
  v829[0] = xmmword_224665808;
  v829[1] = *(_OWORD *)dbl_224665818;
  sub_223B37328((uint64_t)v824, 5, 2, 7, (uint64_t)&v990, (uint64_t)v829, COERCE_DOUBLE(0x1140000015DLL), COERCE_DOUBLE(0x13000000179), v206, v207, v208, v209);
  v827[2] = v781;
  v827[3] = v782;
  v827[4] = v783;
  v828 = v784;
  v827[0] = v779;
  v827[1] = v780;
  v991 = 0;
  v832[0] = xmmword_224665828;
  v832[1] = *(_OWORD *)dbl_224665838;
  if ((v7 & 0x2200880000000000) != 0)
    sub_223B37328((uint64_t)v827, 5, 3, 6, (uint64_t)&v991, (uint64_t)v832, COERCE_DOUBLE(0x15F0000015ELL), COERCE_DOUBLE(0x17B0000017ALL), v210, v211, v212, v213);
  v830[2] = v797;
  v830[3] = v798;
  v830[4] = v799;
  v831 = v800;
  v830[0] = v795;
  v830[1] = v796;
  v992 = 0x100010001000100;
  v835[0] = xmmword_224665848;
  v835[1] = *(_OWORD *)dbl_224665858;
  sub_223B37328((uint64_t)v830, 5, 3, 7, (uint64_t)&v992, (uint64_t)v835, COERCE_DOUBLE(0x1160000015FLL), COERCE_DOUBLE(0x1320000017BLL), v210, v211, v212, v213);
  v833[2] = v797;
  v833[3] = v798;
  v833[4] = v799;
  v834 = v800;
  v833[0] = v795;
  v833[1] = v796;
  v993[0] = 0;
  v837[0] = xmmword_224665868;
  v837[1] = *(_OWORD *)dbl_224665878;
  if ((v7 & 0x100000000000) != 0)
    sub_223B37328((uint64_t)v833, 6, 0, 4, (uint64_t)v993, (uint64_t)v837, COERCE_DOUBLE(0x16100000160), COERCE_DOUBLE(0x16500000164), v214, v215, v216, v217);
  v835[4] = v813;
  v835[5] = v814;
  v835[6] = v815;
  v836 = v816;
  v835[2] = v811;
  v835[3] = v812;
  return sub_223B4287C();
}

uint64_t sub_223B4287C()
{
  uint64_t v0;
  uint64_t v1;
  float32x4_t v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  float32x4_t v10;
  double v11;
  double v12;
  double v13;
  float32x4_t v14;
  double v15;
  double v16;
  double v17;
  float32x4_t v18;
  double v19;
  double v20;
  double v21;
  float32x4_t v22;
  double v23;
  double v24;
  double v25;
  float32x4_t v26;
  double v27;
  double v28;
  double v29;
  float32x4_t v30;
  double v31;
  double v32;
  double v33;
  float32x4_t v34;
  double v35;
  double v36;
  double v37;
  float32x4_t v38;
  double v39;
  double v40;
  double v41;
  float32x4_t v42;
  double v43;
  double v44;
  double v45;
  float32x4_t v46;
  double v47;
  double v48;
  double v49;
  float32x4_t v50;
  double v51;
  double v52;
  double v53;
  float32x4_t v54;
  double v55;
  double v56;
  double v57;
  float32x4_t v58;
  double v59;
  double v60;
  double v61;
  float32x4_t v62;
  double v63;
  double v64;
  double v65;
  float32x4_t v66;
  double v67;
  double v68;
  double v69;
  float32x4_t v70;
  double v71;
  double v72;
  double v73;
  float32x4_t v74;
  double v75;
  double v76;
  double v77;
  float32x4_t v78;
  double v79;
  double v80;
  double v81;
  float32x4_t v82;
  double v83;
  double v84;
  double v85;
  float32x4_t v86;
  double v87;
  double v88;
  double v89;
  float32x4_t v90;
  double v91;
  double v92;
  double v93;
  float32x4_t v94;
  double v95;
  double v96;
  double v97;
  float32x4_t v98;
  double v99;
  double v100;
  double v101;
  float32x4_t v102;
  double v103;
  double v104;
  double v105;
  float32x4_t v106;
  double v107;
  double v108;
  double v109;
  float32x4_t v110;
  double v111;
  double v112;
  double v113;
  float32x4_t v114;
  double v115;
  double v116;
  double v117;
  float32x4_t v118;
  double v119;
  double v120;
  double v121;
  float32x4_t v122;
  double v123;
  double v124;
  double v125;
  float32x4_t v126;
  double v127;
  double v128;
  double v129;
  float32x4_t v130;
  double v131;
  double v132;
  double v133;
  float32x4_t v134;
  double v135;
  double v136;
  double v137;
  float32x4_t v138;
  double v139;
  double v140;
  double v141;
  float32x4_t v142;
  double v143;
  double v144;
  double v145;
  float32x4_t v146;
  double v147;
  double v148;
  double v149;
  float32x4_t v150;
  double v151;
  double v152;
  double v153;
  float32x4_t v154;
  double v155;
  double v156;
  double v157;
  float32x4_t v158;
  double v159;
  double v160;
  double v161;
  float32x4_t v162;
  double v163;
  double v164;
  double v165;
  float32x4_t v166;
  double v167;
  double v168;
  double v169;
  float32x4_t v170;
  double v171;
  double v172;
  double v173;
  float32x4_t v174;
  double v175;
  double v176;
  double v177;
  float32x4_t v178;
  double v179;
  double v180;
  double v181;
  float32x4_t v182;
  double v183;
  double v184;
  double v185;
  float32x4_t v186;
  double v187;
  double v188;
  double v189;
  float32x4_t v190;
  double v191;
  double v192;
  double v193;
  float32x4_t v194;
  double v195;
  double v196;
  double v197;
  float32x4_t v198;
  double v199;
  double v200;
  double v201;
  float32x4_t v202;
  double v203;
  double v204;
  double v205;
  float32x4_t v206;
  double v207;
  double v208;
  double v209;
  float32x4_t v210;
  double v211;
  double v212;
  double v213;
  float32x4_t v214;
  double v215;
  double v216;
  double v217;
  float32x4_t v218;
  double v219;
  double v220;
  double v221;
  float32x4_t v222;
  double v223;
  double v224;
  double v225;
  float32x4_t v226;
  double v227;
  double v228;
  double v229;
  float32x4_t v230;
  double v231;
  double v232;
  double v233;
  float32x4_t v234;
  double v235;
  double v236;
  double v237;
  float32x4_t v238;
  double v239;
  double v240;
  double v241;
  float32x4_t v242;
  double v243;
  double v244;
  double v245;
  float32x4_t v246;
  double v247;
  double v248;
  double v249;
  float32x4_t v250;
  double v251;
  double v252;
  double v253;
  float32x4_t v254;
  double v255;
  double v256;
  double v257;
  float32x4_t v258;
  double v259;
  double v260;
  double v261;
  float32x4_t v262;
  double v263;
  double v264;
  double v265;
  float32x4_t v266;
  double v267;
  double v268;
  double v269;
  float32x4_t v270;
  double v271;
  double v272;
  double v273;
  float32x4_t v274;
  double v275;
  double v276;
  double v277;
  float32x4_t v278;
  double v279;
  double v280;
  double v281;
  float32x4_t v282;
  double v283;
  double v284;
  double v285;
  float32x4_t v286;
  double v287;
  double v288;
  double v289;
  float32x4_t v290;
  double v291;
  double v292;
  double v293;
  float32x4_t v294;
  double v295;
  double v296;
  double v297;
  float32x4_t v298;
  double v299;
  double v300;
  double v301;
  float32x4_t v302;
  double v303;
  double v304;
  double v305;
  float32x4_t v306;
  double v307;
  double v308;
  double v309;
  float32x4_t v310;
  double v311;
  double v312;
  double v313;
  float32x4_t v314;
  double v315;
  double v316;
  double v317;
  float32x4_t v318;
  double v319;
  double v320;
  double v321;
  float32x4_t v322;
  double v323;
  double v324;
  double v325;
  float32x4_t v326;
  double v327;
  double v328;
  double v329;
  float32x4_t v330;
  double v331;
  double v332;
  double v333;
  float32x4_t v334;
  double v335;
  double v336;
  double v337;
  float32x4_t v338;
  double v339;
  double v340;
  double v341;
  float32x4_t v342;
  double v343;
  double v344;
  double v345;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  uint64_t v352;
  _OWORD v353[2];
  _OWORD v354[5];
  uint64_t v355;
  _OWORD v356[2];
  _OWORD v357[5];
  uint64_t v358;
  _OWORD v359[2];
  _OWORD v360[5];
  uint64_t v361;
  _OWORD v362[2];
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  uint64_t v368;
  _OWORD v369[2];
  _OWORD v370[5];
  uint64_t v371;
  _OWORD v372[2];
  _OWORD v373[5];
  uint64_t v374;
  _OWORD v375[2];
  _OWORD v376[5];
  uint64_t v377;
  _OWORD v378[2];
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  uint64_t v384;
  _OWORD v385[2];
  _OWORD v386[5];
  uint64_t v387;
  _OWORD v388[2];
  _OWORD v389[5];
  uint64_t v390;
  _OWORD v391[2];
  _OWORD v392[5];
  uint64_t v393;
  _OWORD v394[2];
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  uint64_t v400;
  _OWORD v401[2];
  _OWORD v402[5];
  uint64_t v403;
  _OWORD v404[2];
  _OWORD v405[5];
  uint64_t v406;
  _OWORD v407[2];
  _OWORD v408[5];
  uint64_t v409;
  _OWORD v410[2];
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  uint64_t v416;
  _OWORD v417[2];
  _OWORD v418[5];
  uint64_t v419;
  _OWORD v420[2];
  _OWORD v421[5];
  uint64_t v422;
  _OWORD v423[2];
  _OWORD v424[5];
  uint64_t v425;
  _OWORD v426[2];
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  uint64_t v432;
  _OWORD v433[2];
  _OWORD v434[5];
  uint64_t v435;
  _OWORD v436[2];
  _OWORD v437[5];
  uint64_t v438;
  _OWORD v439[2];
  _OWORD v440[5];
  uint64_t v441;
  _OWORD v442[2];
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  uint64_t v448;
  _OWORD v449[2];
  _OWORD v450[5];
  uint64_t v451;
  _OWORD v452[2];
  _OWORD v453[5];
  uint64_t v454;
  _OWORD v455[2];
  _OWORD v456[5];
  uint64_t v457;
  _OWORD v458[2];
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  uint64_t v464;
  _OWORD v465[2];
  _OWORD v466[5];
  uint64_t v467;
  _OWORD v468[2];
  _OWORD v469[5];
  uint64_t v470;
  _OWORD v471[2];
  _OWORD v472[5];
  uint64_t v473;
  _OWORD v474[2];
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  uint64_t v480;
  _OWORD v481[2];
  _OWORD v482[5];
  uint64_t v483;
  _OWORD v484[2];
  _OWORD v485[5];
  uint64_t v486;
  _OWORD v487[2];
  _OWORD v488[5];
  uint64_t v489;
  _OWORD v490[2];
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  uint64_t v496;
  _OWORD v497[2];
  _OWORD v498[5];
  uint64_t v499;
  _OWORD v500[2];
  _OWORD v501[5];
  uint64_t v502;
  _OWORD v503[2];
  _OWORD v504[5];
  uint64_t v505;
  _OWORD v506[2];
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  uint64_t v512;
  _OWORD v513[2];
  _OWORD v514[5];
  uint64_t v515;
  _OWORD v516[2];
  _OWORD v517[5];
  uint64_t v518;
  _OWORD v519[2];
  _OWORD v520[5];
  uint64_t v521;
  _OWORD v522[2];
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  uint64_t v528;
  _OWORD v529[2];
  _OWORD v530[5];
  uint64_t v531;
  _OWORD v532[2];
  _OWORD v533[5];
  uint64_t v534;
  _OWORD v535[2];
  _OWORD v536[5];
  uint64_t v537;
  _OWORD v538[2];
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  uint64_t v544;
  _OWORD v545[2];
  _OWORD v546[5];
  uint64_t v547;
  _OWORD v548[2];
  _OWORD v549[5];
  uint64_t v550;
  _OWORD v551[2];
  _OWORD v552[5];
  uint64_t v553;
  _OWORD v554[2];
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  uint64_t v560;
  _OWORD v561[2];
  _OWORD v562[5];
  uint64_t v563;
  _OWORD v564[2];
  _OWORD v565[5];
  uint64_t v566;
  _OWORD v567[2];
  _OWORD v568[5];
  uint64_t v569;
  _OWORD v570[2];
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  uint64_t v576;
  _OWORD v577[2];
  _OWORD v578[5];
  uint64_t v579;
  _OWORD v580[2];
  _OWORD v581[5];
  uint64_t v582;
  _OWORD v583[2];
  _OWORD v584[5];
  uint64_t v585;
  _OWORD v586[2];
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  uint64_t v592;
  _OWORD v593[2];
  _OWORD v594[5];
  uint64_t v595;
  _OWORD v596[2];
  _OWORD v597[5];
  uint64_t v598;
  _OWORD v599[2];
  _OWORD v600[5];
  uint64_t v601;
  _OWORD v602[2];
  __int128 v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  uint64_t v608;
  _OWORD v609[2];
  _OWORD v610[5];
  uint64_t v611;
  _OWORD v612[2];
  _OWORD v613[5];
  uint64_t v614;
  _OWORD v615[2];
  _OWORD v616[5];
  uint64_t v617;
  _OWORD v618[2];
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  uint64_t v624;
  _OWORD v625[2];
  _OWORD v626[5];
  uint64_t v627;
  _OWORD v628[2];
  _OWORD v629[5];
  uint64_t v630;
  _OWORD v631[2];
  _OWORD v632[5];
  uint64_t v633;
  _OWORD v634[2];
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  uint64_t v640;
  _OWORD v641[2];
  _OWORD v642[5];
  uint64_t v643;
  _OWORD v644[2];
  _OWORD v645[5];
  uint64_t v646;
  _OWORD v647[2];
  _OWORD v648[5];
  uint64_t v649;
  _OWORD v650[2];
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  uint64_t v656;
  _OWORD v657[2];
  _OWORD v658[5];
  uint64_t v659;
  _OWORD v660[2];
  _OWORD v661[5];
  uint64_t v662;
  _OWORD v663[2];
  _OWORD v664[5];
  uint64_t v665;
  _OWORD v666[2];
  __int128 v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  uint64_t v672;
  _OWORD v673[2];
  _OWORD v674[5];
  uint64_t v675;
  _OWORD v676[2];
  _OWORD v677[5];
  uint64_t v678;
  _OWORD v679[2];
  _OWORD v680[5];
  uint64_t v681;
  _OWORD v682[2];
  __int128 v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  uint64_t v688;
  _OWORD v689[2];
  _OWORD v690[5];
  uint64_t v691;
  _OWORD v692[2];
  _OWORD v693[5];
  uint64_t v694;
  _OWORD v695[2];
  _OWORD v696[5];
  uint64_t v697;
  _OWORD v698[2];
  __int128 v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  __int128 v703;
  uint64_t v704;
  _OWORD v705[2];
  _OWORD v706[5];
  uint64_t v707;
  _OWORD v708[2];
  _OWORD v709[5];
  uint64_t v710;
  _OWORD v711[2];
  _OWORD v712[5];
  uint64_t v713;
  _OWORD v714[2];
  _OWORD v715[5];
  uint64_t v716;
  _OWORD v717[2];
  __int128 v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  uint64_t v723;
  _OWORD v724[2];
  _OWORD v725[5];
  uint64_t v726;
  _OWORD v727[2];
  _OWORD v728[5];
  uint64_t v729;
  _OWORD v730[2];
  _OWORD v731[5];
  uint64_t v732;
  _OWORD v733[2];
  _OWORD v734[5];
  uint64_t v735;
  _OWORD v736[2];
  _OWORD v737[5];
  uint64_t v738;
  _OWORD v739[2];
  _OWORD v740[5];
  uint64_t v741;
  _OWORD v742[2];
  _OWORD v743[5];
  uint64_t v744;
  _OWORD v745[2];
  __int128 v746;
  __int128 v747;
  __int128 v748;
  __int128 v749;
  __int128 v750;
  uint64_t v751;
  _OWORD v752[2];
  _OWORD v753[5];
  uint64_t v754;
  __int128 v755;
  __int128 v756;
  _OWORD v757[5];
  uint64_t v758;
  _OWORD v759[2];
  __int128 v760;
  __int128 v761;
  __int128 v762;
  __int128 v763;
  __int128 v764;
  uint64_t v765;
  _OWORD v766[2];
  _OWORD v767[5];
  uint64_t v768;
  _OWORD v769[2];
  _OWORD v770[5];
  uint64_t v771;
  _OWORD v772[2];
  _OWORD v773[5];
  uint64_t v774;
  _OWORD v775[2];
  __int128 v776;
  __int128 v777;
  __int128 v778;
  __int128 v779;
  __int128 v780;
  uint64_t v781;
  _OWORD v782[2];
  _OWORD v783[5];
  uint64_t v784;
  _OWORD v785[2];
  _OWORD v786[5];
  uint64_t v787;
  _OWORD v788[2];
  _OWORD v789[5];
  uint64_t v790;
  _OWORD v791[2];
  __int128 v792;
  __int128 v793;
  __int128 v794;
  __int128 v795;
  __int128 v796;
  uint64_t v797;
  _OWORD v798[2];
  _OWORD v799[5];
  uint64_t v800;
  _OWORD v801[2];
  _OWORD v802[5];
  uint64_t v803;
  _OWORD v804[2];
  _OWORD v805[5];
  uint64_t v806;
  _OWORD v807[2];
  __int128 v808;
  __int128 v809;
  __int128 v810;
  __int128 v811;
  __int128 v812;
  uint64_t v813;
  _OWORD v814[2];
  _OWORD v815[5];
  uint64_t v816;
  _OWORD v817[2];
  _OWORD v818[5];
  uint64_t v819;
  _OWORD v820[2];
  _OWORD v821[5];
  uint64_t v822;
  _OWORD v823[2];
  __int128 v824;
  __int128 v825;
  __int128 v826;
  __int128 v827;
  __int128 v828;
  uint64_t v829;
  _OWORD v830[2];
  _OWORD v831[5];
  uint64_t v832;
  _OWORD v833[2];
  _OWORD v834[5];
  uint64_t v835;
  _OWORD v836[2];
  _OWORD v837[5];
  uint64_t v838;
  _OWORD v839[2];
  _OWORD v840[5];
  uint64_t v841;
  _OWORD v842[2];
  _OWORD v843[5];
  uint64_t v844;
  _OWORD v845[2];
  _OWORD v846[5];
  uint64_t v847;
  _OWORD v848[2];
  _OWORD v849[5];
  uint64_t v850;
  _OWORD v851[2];
  _OWORD v852[5];
  uint64_t v853;
  _OWORD v854[2];
  __int128 v855;
  __int128 v856;
  __int128 v857;
  __int128 v858;
  __int128 v859;
  uint64_t v860;
  _OWORD v861[2];
  _OWORD v862[5];
  uint64_t v863;
  __int128 v864;
  __int128 v865;
  _OWORD v866[5];
  uint64_t v867;
  _OWORD v868[2];
  __int128 v869;
  __int128 v870;
  __int128 v871;
  __int128 v872;
  __int128 v873;
  uint64_t v874;
  _OWORD v875[2];
  _OWORD v876[5];
  uint64_t v877;
  _OWORD v878[2];
  _OWORD v879[5];
  uint64_t v880;
  _OWORD v881[2];
  _OWORD v882[5];
  uint64_t v883;
  _OWORD v884[2];
  _OWORD v885[5];
  uint64_t v886;
  _OWORD v887[2];
  _OWORD v888[5];
  uint64_t v889;
  _OWORD v890[2];
  _OWORD v891[5];
  uint64_t v892;
  _OWORD v893[2];
  _OWORD v894[5];
  uint64_t v895;
  _OWORD v896[2];
  _OWORD v897[5];
  uint64_t v898;
  _OWORD v899[2];
  _OWORD v900[5];
  uint64_t v901;
  _OWORD v902[2];
  _OWORD v903[5];
  uint64_t v904;
  _OWORD v905[2];
  __int128 v906;
  __int128 v907;
  __int128 v908;
  __int128 v909;
  __int128 v910;
  uint64_t v911;
  _OWORD v912[2];
  __int128 v913;
  __int128 v914;
  __int128 v915;
  __int128 v916;
  __int128 v917;
  uint64_t v918;
  __int128 v919;
  __int128 v920;
  _OWORD v921[5];
  uint64_t v922;
  _OWORD v923[2];
  _OWORD v924[5];
  uint64_t v925;
  _OWORD v926[2];
  _OWORD v927[5];
  uint64_t v928;
  _OWORD v929[2];
  _OWORD v930[5];
  uint64_t v931;
  _OWORD v932[2];
  __int128 v933;
  __int128 v934;
  __int128 v935;
  __int128 v936;
  __int128 v937;
  uint64_t v938;
  _OWORD v939[2];
  _OWORD v940[5];
  uint64_t v941;
  _OWORD v942[2];
  _OWORD v943[5];
  uint64_t v944;
  _OWORD v945[2];
  _OWORD v946[5];
  uint64_t v947;
  _OWORD v948[2];
  _OWORD v949[5];
  uint64_t v950;
  _OWORD v951[2];
  _OWORD v952[5];
  uint64_t v953;
  _OWORD v954[2];
  _OWORD v955[5];
  uint64_t v956;
  _OWORD v957[2];
  _OWORD v958[5];
  uint64_t v959;
  _OWORD v960[2];
  _OWORD v961[5];
  uint64_t v962;
  _OWORD v963[2];
  _OWORD v964[2];
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  _QWORD v1123[2];

  v0 = MEMORY[0x24BDAC7A8]();
  v6 = v1;
  v7 = v0;
  v1123[1] = *MEMORY[0x24BDAC8D0];
  v965 = 0;
  v353[0] = xmmword_224665888;
  v353[1] = *(_OWORD *)dbl_224665898;
  if ((v0 & 0x300000000000) != 0)
    sub_223B37328(v1, 6, 0, 5, (uint64_t)&v965, (uint64_t)v353, COERCE_DOUBLE(0x16800000161), COERCE_DOUBLE(0x16C00000165), v2, v3, v4, v5);
  v8 = *(_OWORD *)(v6 + 48);
  v349 = *(_OWORD *)(v6 + 32);
  v350 = v8;
  v351 = *(_OWORD *)(v6 + 64);
  v352 = *(_QWORD *)(v6 + 80);
  v9 = *(_OWORD *)(v6 + 16);
  v347 = *(_OWORD *)v6;
  v348 = v9;
  v966 = 0;
  v356[0] = xmmword_2246658A8;
  v356[1] = *(_OWORD *)dbl_2246658B8;
  if ((v7 & 0x500000000000) != 0)
    sub_223B37328((uint64_t)&v347, 6, 1, 4, (uint64_t)&v966, (uint64_t)v356, COERCE_DOUBLE(0x16300000162), COERCE_DOUBLE(0x16700000166), v2, v3, v4, v5);
  v354[2] = v349;
  v354[3] = v350;
  v354[4] = v351;
  v355 = v352;
  v354[0] = v347;
  v354[1] = v348;
  v967 = 0;
  v359[0] = xmmword_2246658C8;
  v359[1] = *(_OWORD *)dbl_2246658D8;
  if ((v7 & 0xF00000000000) != 0)
    sub_223B37328((uint64_t)v354, 6, 1, 5, (uint64_t)&v967, (uint64_t)v359, COERCE_DOUBLE(0x16A00000163), COERCE_DOUBLE(0x16E00000167), v2, v3, v4, v5);
  v357[2] = v349;
  v357[3] = v350;
  v357[4] = v351;
  v358 = v352;
  v357[0] = v347;
  v357[1] = v348;
  v968 = 0x404040400000000;
  v362[0] = xmmword_2246658E8;
  v362[1] = *(_OWORD *)dbl_2246658F8;
  sub_223B37328((uint64_t)v357, 7, 0, 4, (uint64_t)&v968, (uint64_t)v362, COERCE_DOUBLE(0x16500000164), COERCE_DOUBLE(0x4100000040), v2, v3, v4, v5);
  v360[2] = v349;
  v360[3] = v350;
  v360[4] = v351;
  v361 = v352;
  v360[0] = v347;
  v360[1] = v348;
  v969 = 0x404040400000000;
  v369[0] = xmmword_224665908;
  v369[1] = *(_OWORD *)dbl_224665918;
  sub_223B37328((uint64_t)v360, 7, 0, 5, (uint64_t)&v969, (uint64_t)v369, COERCE_DOUBLE(0x16C00000165), COERCE_DOUBLE(0x4800000041), v10, v11, v12, v13);
  v365 = v349;
  v366 = v350;
  v367 = v351;
  v368 = v352;
  v363 = v347;
  v364 = v348;
  v970 = 0x404040400000000;
  v372[0] = xmmword_224665928;
  v372[1] = *(_OWORD *)dbl_224665938;
  sub_223B37328((uint64_t)&v363, 7, 1, 4, (uint64_t)&v970, (uint64_t)v372, COERCE_DOUBLE(0x16700000166), COERCE_DOUBLE(0x4300000042), v14, v15, v16, v17);
  v370[2] = v349;
  v370[3] = v350;
  v370[4] = v351;
  v371 = v352;
  v370[0] = v347;
  v370[1] = v348;
  v971 = 0x404040400000000;
  v375[0] = xmmword_224665948;
  v375[1] = *(_OWORD *)dbl_224665958;
  sub_223B37328((uint64_t)v370, 7, 1, 5, (uint64_t)&v971, (uint64_t)v375, COERCE_DOUBLE(0x16E00000167), COERCE_DOUBLE(0x4A00000043), v18, v19, v20, v21);
  v373[2] = v349;
  v373[3] = v350;
  v373[4] = v351;
  v374 = v352;
  v373[0] = v347;
  v373[1] = v348;
  v972 = 0;
  v378[0] = xmmword_224665968;
  v378[1] = *(_OWORD *)dbl_224665978;
  if ((v7 & 0x200000000000) != 0)
    sub_223B37328((uint64_t)v373, 6, 0, 6, (uint64_t)&v972, (uint64_t)v378, COERCE_DOUBLE(0x16900000168), COERCE_DOUBLE(0x16D0000016CLL), v22, v23, v24, v25);
  v376[2] = v349;
  v376[3] = v350;
  v376[4] = v351;
  v377 = v352;
  v376[0] = v347;
  v376[1] = v348;
  v973 = 0x100010001000100;
  v385[0] = xmmword_224665988;
  v385[1] = *(_OWORD *)dbl_224665998;
  sub_223B37328((uint64_t)v376, 6, 0, 7, (uint64_t)&v973, (uint64_t)v385, COERCE_DOUBLE(0x12000000169), COERCE_DOUBLE(0x1240000016DLL), v22, v23, v24, v25);
  v381 = v349;
  v382 = v350;
  v383 = v351;
  v384 = v352;
  v379 = v347;
  v380 = v348;
  v974 = 0;
  v388[0] = xmmword_2246659A8;
  v388[1] = *(_OWORD *)dbl_2246659B8;
  if ((v7 & 0xA00000000000) != 0)
    sub_223B37328((uint64_t)&v379, 6, 1, 6, (uint64_t)&v974, (uint64_t)v388, COERCE_DOUBLE(0x16B0000016ALL), COERCE_DOUBLE(0x16F0000016ELL), v26, v27, v28, v29);
  v386[2] = v349;
  v386[3] = v350;
  v386[4] = v351;
  v387 = v352;
  v386[0] = v347;
  v386[1] = v348;
  v975 = 0x100010001000100;
  v391[0] = xmmword_2246659C8;
  v391[1] = *(_OWORD *)dbl_2246659D8;
  sub_223B37328((uint64_t)v386, 6, 1, 7, (uint64_t)&v975, (uint64_t)v391, COERCE_DOUBLE(0x1220000016BLL), COERCE_DOUBLE(0x1260000016FLL), v26, v27, v28, v29);
  v389[2] = v349;
  v389[3] = v350;
  v389[4] = v351;
  v390 = v352;
  v389[0] = v347;
  v389[1] = v348;
  v976 = 0x404040400000000;
  v394[0] = xmmword_2246659E8;
  v394[1] = *(_OWORD *)dbl_2246659F8;
  sub_223B37328((uint64_t)v389, 7, 0, 6, (uint64_t)&v976, (uint64_t)v394, COERCE_DOUBLE(0x16D0000016CLL), COERCE_DOUBLE(0x4900000048), v30, v31, v32, v33);
  v392[2] = v349;
  v392[3] = v350;
  v392[4] = v351;
  v393 = v352;
  v392[0] = v347;
  v392[1] = v348;
  v977 = 0x504050401000100;
  v401[0] = xmmword_224665A08;
  v401[1] = *(_OWORD *)dbl_224665A18;
  sub_223B37328((uint64_t)v392, 7, 0, 7, (uint64_t)&v977, (uint64_t)v401, COERCE_DOUBLE(0x1240000016DLL), COERCE_DOUBLE(73), v34, v35, v36, v37);
  v397 = v365;
  v398 = v366;
  v399 = v367;
  v400 = v368;
  v395 = v363;
  v396 = v364;
  v978 = 0x404040400000000;
  v404[0] = xmmword_224665A28;
  v404[1] = *(_OWORD *)dbl_224665A38;
  sub_223B37328((uint64_t)&v395, 7, 1, 6, (uint64_t)&v978, (uint64_t)v404, COERCE_DOUBLE(0x16F0000016ELL), COERCE_DOUBLE(0x4B0000004ALL), v38, v39, v40, v41);
  v402[2] = v365;
  v402[3] = v366;
  v402[4] = v367;
  v403 = v368;
  v402[0] = v363;
  v402[1] = v364;
  v979 = 0x504050401000100;
  v407[0] = xmmword_224665A48;
  v407[1] = *(_OWORD *)dbl_224665A58;
  sub_223B37328((uint64_t)v402, 7, 1, 7, (uint64_t)&v979, (uint64_t)v407, COERCE_DOUBLE(0x1260000016FLL), COERCE_DOUBLE(0x20000004BLL), v42, v43, v44, v45);
  v405[2] = v365;
  v405[3] = v366;
  v405[4] = v367;
  v406 = v368;
  v405[0] = v363;
  v405[1] = v364;
  v980 = 0;
  v410[0] = xmmword_224665A68;
  v410[1] = *(_OWORD *)dbl_224665A78;
  if ((v7 & 0x400000000000) != 0)
    sub_223B37328((uint64_t)v405, 6, 2, 4, (uint64_t)&v980, (uint64_t)v410, COERCE_DOUBLE(0x17100000170), COERCE_DOUBLE(0x17500000174), v46, v47, v48, v49);
  v408[2] = v381;
  v408[3] = v382;
  v408[4] = v383;
  v409 = v384;
  v408[0] = v379;
  v408[1] = v380;
  v981 = 0;
  v417[0] = xmmword_224665A88;
  v417[1] = *(_OWORD *)dbl_224665A98;
  if ((v7 & 0xC00000000000) != 0)
    sub_223B37328((uint64_t)v408, 6, 2, 5, (uint64_t)&v981, (uint64_t)v417, COERCE_DOUBLE(0x17800000171), COERCE_DOUBLE(0x17C00000175), v46, v47, v48, v49);
  v413 = v381;
  v414 = v382;
  v415 = v383;
  v416 = v384;
  v411 = v379;
  v412 = v380;
  v982 = 0;
  v420[0] = xmmword_224665AA8;
  v420[1] = *(_OWORD *)dbl_224665AB8;
  if ((v7 & 0x1000400000000000) != 0)
    sub_223B37328((uint64_t)&v411, 6, 3, 4, (uint64_t)&v982, (uint64_t)v420, COERCE_DOUBLE(0x17300000172), COERCE_DOUBLE(0x17700000176), v46, v47, v48, v49);
  v418[2] = v381;
  v418[3] = v382;
  v418[4] = v383;
  v419 = v384;
  v418[0] = v379;
  v418[1] = v380;
  v983 = 0;
  v423[0] = xmmword_224665AC8;
  v423[1] = *(_OWORD *)dbl_224665AD8;
  if ((v7 & 0x3000C00000000000) != 0)
    sub_223B37328((uint64_t)v418, 6, 3, 5, (uint64_t)&v983, (uint64_t)v423, COERCE_DOUBLE(0x17A00000173), COERCE_DOUBLE(0x17E00000177), v46, v47, v48, v49);
  v421[2] = v397;
  v421[3] = v398;
  v421[4] = v399;
  v422 = v400;
  v421[0] = v395;
  v421[1] = v396;
  v984 = 0x404040400000000;
  v426[0] = xmmword_224665AE8;
  v426[1] = *(_OWORD *)dbl_224665AF8;
  sub_223B37328((uint64_t)v421, 7, 2, 4, (uint64_t)&v984, (uint64_t)v426, COERCE_DOUBLE(0x17500000174), COERCE_DOUBLE(0x5100000050), v46, v47, v48, v49);
  v424[2] = v397;
  v424[3] = v398;
  v424[4] = v399;
  v425 = v400;
  v424[0] = v395;
  v424[1] = v396;
  v985 = 0x404040400000000;
  v433[0] = xmmword_224665B08;
  v433[1] = *(_OWORD *)dbl_224665B18;
  sub_223B37328((uint64_t)v424, 7, 2, 5, (uint64_t)&v985, (uint64_t)v433, COERCE_DOUBLE(0x17C00000175), COERCE_DOUBLE(0x5800000051), v50, v51, v52, v53);
  v429 = v397;
  v430 = v398;
  v431 = v399;
  v432 = v400;
  v427 = v395;
  v428 = v396;
  v986 = 0x404040400000000;
  v436[0] = xmmword_224665B28;
  v436[1] = *(_OWORD *)dbl_224665B38;
  sub_223B37328((uint64_t)&v427, 7, 3, 4, (uint64_t)&v986, (uint64_t)v436, COERCE_DOUBLE(0x17700000176), COERCE_DOUBLE(0x5300000052), v54, v55, v56, v57);
  v434[2] = v397;
  v434[3] = v398;
  v434[4] = v399;
  v435 = v400;
  v434[0] = v395;
  v434[1] = v396;
  v987 = 0x404040400000000;
  v439[0] = xmmword_224665B48;
  v439[1] = *(_OWORD *)dbl_224665B58;
  sub_223B37328((uint64_t)v434, 7, 3, 5, (uint64_t)&v987, (uint64_t)v439, COERCE_DOUBLE(0x17E00000177), COERCE_DOUBLE(0x5A00000053), v58, v59, v60, v61);
  v437[2] = v397;
  v437[3] = v398;
  v437[4] = v399;
  v438 = v400;
  v437[0] = v395;
  v437[1] = v396;
  v988 = 0;
  v442[0] = xmmword_224665B68;
  v442[1] = *(_OWORD *)dbl_224665B78;
  if ((v7 & 0x800000000000) != 0)
    sub_223B37328((uint64_t)v437, 6, 2, 6, (uint64_t)&v988, (uint64_t)v442, COERCE_DOUBLE(0x17900000178), COERCE_DOUBLE(0x17D0000017CLL), v62, v63, v64, v65);
  v440[2] = v397;
  v440[3] = v398;
  v440[4] = v399;
  v441 = v400;
  v440[0] = v395;
  v440[1] = v396;
  v989 = 0x100010001000100;
  v449[0] = xmmword_224665B88;
  v449[1] = *(_OWORD *)dbl_224665B98;
  sub_223B37328((uint64_t)v440, 6, 2, 7, (uint64_t)&v989, (uint64_t)v449, COERCE_DOUBLE(0x13000000179), COERCE_DOUBLE(0x1340000017DLL), v62, v63, v64, v65);
  v445 = v413;
  v446 = v414;
  v447 = v415;
  v448 = v416;
  v443 = v411;
  v444 = v412;
  v990 = 0;
  v452[0] = xmmword_224665BA8;
  v452[1] = *(_OWORD *)dbl_224665BB8;
  if ((v7 & 0x2000800000000000) != 0)
    sub_223B37328((uint64_t)&v443, 6, 3, 6, (uint64_t)&v990, (uint64_t)v452, COERCE_DOUBLE(0x17B0000017ALL), COERCE_DOUBLE(0x17F0000017ELL), v66, v67, v68, v69);
  v450[2] = v413;
  v450[3] = v414;
  v450[4] = v415;
  v451 = v416;
  v450[0] = v411;
  v450[1] = v412;
  v991 = 0x100010001000100;
  v455[0] = xmmword_224665BC8;
  v455[1] = *(_OWORD *)dbl_224665BD8;
  sub_223B37328((uint64_t)v450, 6, 3, 7, (uint64_t)&v991, (uint64_t)v455, COERCE_DOUBLE(0x1320000017BLL), COERCE_DOUBLE(0x1360000017FLL), v66, v67, v68, v69);
  v453[2] = v413;
  v453[3] = v414;
  v453[4] = v415;
  v454 = v416;
  v453[0] = v411;
  v453[1] = v412;
  v992 = 0x404040400000000;
  v458[0] = xmmword_224665BE8;
  v458[1] = *(_OWORD *)dbl_224665BF8;
  sub_223B37328((uint64_t)v453, 7, 2, 6, (uint64_t)&v992, (uint64_t)v458, COERCE_DOUBLE(0x17D0000017CLL), COERCE_DOUBLE(0x5900000058), v70, v71, v72, v73);
  v456[2] = v413;
  v456[3] = v414;
  v456[4] = v415;
  v457 = v416;
  v456[0] = v411;
  v456[1] = v412;
  v993 = 0x504050401000100;
  v465[0] = xmmword_224665C08;
  v465[1] = *(_OWORD *)dbl_224665C18;
  sub_223B37328((uint64_t)v456, 7, 2, 7, (uint64_t)&v993, (uint64_t)v465, COERCE_DOUBLE(0x1340000017DLL), COERCE_DOUBLE(0x1000000059), v74, v75, v76, v77);
  v461 = v429;
  v462 = v430;
  v463 = v431;
  v464 = v432;
  v459 = v427;
  v460 = v428;
  v994 = 0x404040400000000;
  v468[0] = xmmword_224665C28;
  v468[1] = *(_OWORD *)dbl_224665C38;
  sub_223B37328((uint64_t)&v459, 7, 3, 6, (uint64_t)&v994, (uint64_t)v468, COERCE_DOUBLE(0x17F0000017ELL), COERCE_DOUBLE(0x5B0000005ALL), v78, v79, v80, v81);
  v466[2] = v429;
  v466[3] = v430;
  v466[4] = v431;
  v467 = v432;
  v466[0] = v427;
  v466[1] = v428;
  v995 = 0x504050401000100;
  v471[0] = xmmword_224665C48;
  v471[1] = *(_OWORD *)dbl_224665C58;
  sub_223B37328((uint64_t)v466, 7, 3, 7, (uint64_t)&v995, (uint64_t)v471, COERCE_DOUBLE(0x1360000017FLL), COERCE_DOUBLE(0x120000005BLL), v82, v83, v84, v85);
  v469[2] = v429;
  v469[3] = v430;
  v469[4] = v431;
  v470 = v432;
  v469[0] = v427;
  v469[1] = v428;
  v996 = 0;
  v474[0] = xmmword_224665C68;
  v474[1] = *(_OWORD *)dbl_224665C78;
  if ((v7 & 0x1000000000000) != 0)
    sub_223B37328((uint64_t)v469, 4, 4, 0, (uint64_t)&v996, (uint64_t)v474, COERCE_DOUBLE(0x18100000180), COERCE_DOUBLE(0x18500000184), v86, v87, v88, v89);
  v472[2] = v445;
  v472[3] = v446;
  v472[4] = v447;
  v473 = v448;
  v472[0] = v443;
  v472[1] = v444;
  v997 = 0;
  v481[0] = xmmword_224665C88;
  v481[1] = *(_OWORD *)dbl_224665C98;
  if ((v7 & 0x3000000000000) != 0)
    sub_223B37328((uint64_t)v472, 4, 4, 1, (uint64_t)&v997, (uint64_t)v481, COERCE_DOUBLE(0x18800000181), COERCE_DOUBLE(0x18C00000185), v86, v87, v88, v89);
  v477 = v445;
  v478 = v446;
  v479 = v447;
  v480 = v448;
  v475 = v443;
  v476 = v444;
  v998 = 0;
  v484[0] = xmmword_224665CA8;
  v484[1] = *(_OWORD *)dbl_224665CB8;
  if ((v7 & 0x5000000000000) != 0)
    sub_223B37328((uint64_t)&v475, 4, 5, 0, (uint64_t)&v998, (uint64_t)v484, COERCE_DOUBLE(0x18300000182), COERCE_DOUBLE(0x18700000186), v86, v87, v88, v89);
  v482[2] = v445;
  v482[3] = v446;
  v482[4] = v447;
  v483 = v448;
  v482[0] = v443;
  v482[1] = v444;
  v999 = 0;
  v487[0] = xmmword_224665CC8;
  v487[1] = *(_OWORD *)dbl_224665CD8;
  if ((v7 & 0xF000000000000) != 0)
    sub_223B37328((uint64_t)v482, 4, 5, 1, (uint64_t)&v999, (uint64_t)v487, COERCE_DOUBLE(0x18A00000183), COERCE_DOUBLE(0x18E00000187), v86, v87, v88, v89);
  v485[2] = v461;
  v485[3] = v462;
  v485[4] = v463;
  v486 = v464;
  v485[0] = v459;
  v485[1] = v460;
  v1000 = 0;
  v490[0] = xmmword_224665CE8;
  v490[1] = *(_OWORD *)dbl_224665CF8;
  if ((v7 & 0x11000000000000) != 0)
    sub_223B37328((uint64_t)v485, 5, 4, 0, (uint64_t)&v1000, (uint64_t)v490, COERCE_DOUBLE(0x18500000184), COERCE_DOUBLE(0x1A1000001A0), v86, v87, v88, v89);
  v488[2] = v461;
  v488[3] = v462;
  v488[4] = v463;
  v489 = v464;
  v488[0] = v459;
  v488[1] = v460;
  v1001 = 0;
  v497[0] = xmmword_224665D08;
  v497[1] = *(_OWORD *)dbl_224665D18;
  if ((v7 & 0x33000000000000) != 0)
    sub_223B37328((uint64_t)v488, 5, 4, 1, (uint64_t)&v1001, (uint64_t)v497, COERCE_DOUBLE(0x18C00000185), COERCE_DOUBLE(0x1A8000001A1), v86, v87, v88, v89);
  v493 = v461;
  v494 = v462;
  v495 = v463;
  v496 = v464;
  v491 = v459;
  v492 = v460;
  v1002 = 0;
  v500[0] = xmmword_224665D28;
  v500[1] = *(_OWORD *)dbl_224665D38;
  if ((v7 & 0x55000000000000) != 0)
    sub_223B37328((uint64_t)&v491, 5, 5, 0, (uint64_t)&v1002, (uint64_t)v500, COERCE_DOUBLE(0x18700000186), COERCE_DOUBLE(0x1A3000001A2), v86, v87, v88, v89);
  v498[2] = v461;
  v498[3] = v462;
  v498[4] = v463;
  v499 = v464;
  v498[0] = v459;
  v498[1] = v460;
  v1003 = 0;
  v503[0] = xmmword_224665D48;
  v503[1] = *(_OWORD *)dbl_224665D58;
  if ((v7 & 0xFF000000000000) != 0)
    sub_223B37328((uint64_t)v498, 5, 5, 1, (uint64_t)&v1003, (uint64_t)v503, COERCE_DOUBLE(0x18E00000187), COERCE_DOUBLE(0x1AA000001A3), v86, v87, v88, v89);
  v501[2] = v461;
  v501[3] = v462;
  v501[4] = v463;
  v502 = v464;
  v501[0] = v459;
  v501[1] = v460;
  v1004 = 0;
  v506[0] = xmmword_224665D68;
  v506[1] = *(_OWORD *)dbl_224665D78;
  if ((v7 & 0x2000000000000) != 0)
    sub_223B37328((uint64_t)v501, 4, 4, 2, (uint64_t)&v1004, (uint64_t)v506, COERCE_DOUBLE(0x18900000188), COERCE_DOUBLE(0x18D0000018CLL), v86, v87, v88, v89);
  v504[2] = v461;
  v504[3] = v462;
  v504[4] = v463;
  v505 = v464;
  v504[0] = v459;
  v504[1] = v460;
  v1005 = 0;
  v513[0] = xmmword_224665D88;
  v513[1] = *(_OWORD *)dbl_224665D98;
  if ((v7 & 0x102000000000000) != 0)
    sub_223B37328((uint64_t)v504, 4, 4, 3, (uint64_t)&v1005, (uint64_t)v513, COERCE_DOUBLE(0x1C000000189), COERCE_DOUBLE(0x1C40000018DLL), v86, v87, v88, v89);
  v509 = v477;
  v510 = v478;
  v511 = v479;
  v512 = v480;
  v507 = v475;
  v508 = v476;
  v1006 = 0;
  v516[0] = xmmword_224665DA8;
  v516[1] = *(_OWORD *)dbl_224665DB8;
  if ((v7 & 0xA000000000000) != 0)
    sub_223B37328((uint64_t)&v507, 4, 5, 2, (uint64_t)&v1006, (uint64_t)v516, COERCE_DOUBLE(0x18B0000018ALL), COERCE_DOUBLE(0x18F0000018ELL), v86, v87, v88, v89);
  v514[2] = v477;
  v514[3] = v478;
  v514[4] = v479;
  v515 = v480;
  v514[0] = v475;
  v514[1] = v476;
  v1007 = 0;
  v519[0] = xmmword_224665DC8;
  v519[1] = *(_OWORD *)dbl_224665DD8;
  if ((v7 & 0x50A000000000000) != 0)
    sub_223B37328((uint64_t)v514, 4, 5, 3, (uint64_t)&v1007, (uint64_t)v519, COERCE_DOUBLE(0x1C20000018BLL), COERCE_DOUBLE(0x1C60000018FLL), v86, v87, v88, v89);
  v517[2] = v477;
  v517[3] = v478;
  v517[4] = v479;
  v518 = v480;
  v517[0] = v475;
  v517[1] = v476;
  v1008 = 0;
  v522[0] = xmmword_224665DE8;
  v522[1] = *(_OWORD *)dbl_224665DF8;
  if ((v7 & 0x22000000000000) != 0)
    sub_223B37328((uint64_t)v517, 5, 4, 2, (uint64_t)&v1008, (uint64_t)v522, COERCE_DOUBLE(0x18D0000018CLL), COERCE_DOUBLE(0x1A9000001A8), v86, v87, v88, v89);
  v520[2] = v477;
  v520[3] = v478;
  v520[4] = v479;
  v521 = v480;
  v520[0] = v475;
  v520[1] = v476;
  v1009 = 0;
  v529[0] = xmmword_224665E08;
  v529[1] = *(_OWORD *)dbl_224665E18;
  if ((v7 & 0x1122000000000000) != 0)
    sub_223B37328((uint64_t)v520, 5, 4, 3, (uint64_t)&v1009, (uint64_t)v529, COERCE_DOUBLE(0x1C40000018DLL), COERCE_DOUBLE(0x1E0000001A9), v86, v87, v88, v89);
  v525 = v493;
  v526 = v494;
  v527 = v495;
  v528 = v496;
  v523 = v491;
  v524 = v492;
  v1010 = 0;
  v532[0] = xmmword_224665E28;
  v532[1] = *(_OWORD *)dbl_224665E38;
  if ((v7 & 0xAA000000000000) != 0)
    sub_223B37328((uint64_t)&v523, 5, 5, 2, (uint64_t)&v1010, (uint64_t)v532, COERCE_DOUBLE(0x18F0000018ELL), COERCE_DOUBLE(0x1AB000001AALL), v86, v87, v88, v89);
  v530[2] = v493;
  v530[3] = v494;
  v530[4] = v495;
  v531 = v496;
  v530[0] = v491;
  v530[1] = v492;
  v1011 = 0;
  v535[0] = xmmword_224665E48;
  v535[1] = *(_OWORD *)dbl_224665E58;
  if ((v7 & 0x55AA000000000000) != 0)
    sub_223B37328((uint64_t)v530, 5, 5, 3, (uint64_t)&v1011, (uint64_t)v535, COERCE_DOUBLE(0x1C60000018FLL), COERCE_DOUBLE(0x1E2000001ABLL), v86, v87, v88, v89);
  v533[2] = v493;
  v533[3] = v494;
  v533[4] = v495;
  v534 = v496;
  v533[0] = v491;
  v533[1] = v492;
  v1012 = 0;
  v538[0] = xmmword_224665E68;
  v538[1] = *(_OWORD *)dbl_224665E78;
  if ((v7 & 0x4000000000000) != 0)
    sub_223B37328((uint64_t)v533, 4, 6, 0, (uint64_t)&v1012, (uint64_t)v538, COERCE_DOUBLE(0x19100000190), COERCE_DOUBLE(0x19500000194), v86, v87, v88, v89);
  v536[2] = v493;
  v536[3] = v494;
  v536[4] = v495;
  v537 = v496;
  v536[0] = v491;
  v536[1] = v492;
  v1013 = 0;
  v545[0] = xmmword_224665E88;
  v545[1] = *(_OWORD *)dbl_224665E98;
  if ((v7 & 0xC000000000000) != 0)
    sub_223B37328((uint64_t)v536, 4, 6, 1, (uint64_t)&v1013, (uint64_t)v545, COERCE_DOUBLE(0x19800000191), COERCE_DOUBLE(0x19C00000195), v86, v87, v88, v89);
  v541 = v509;
  v542 = v510;
  v543 = v511;
  v544 = v512;
  v539 = v507;
  v540 = v508;
  v1014 = 0x202000002020000;
  v548[0] = xmmword_224665EA8;
  v548[1] = *(_OWORD *)dbl_224665EB8;
  sub_223B37328((uint64_t)&v539, 4, 7, 0, (uint64_t)&v1014, (uint64_t)v548, COERCE_DOUBLE(0x19300000192), COERCE_DOUBLE(0x19700000196), v86, v87, v88, v89);
  v546[2] = v509;
  v546[3] = v510;
  v546[4] = v511;
  v547 = v512;
  v546[0] = v507;
  v546[1] = v508;
  v1015 = 0x202000002020000;
  v551[0] = xmmword_224665EC8;
  v551[1] = *(_OWORD *)dbl_224665ED8;
  sub_223B37328((uint64_t)v546, 4, 7, 1, (uint64_t)&v1015, (uint64_t)v551, COERCE_DOUBLE(0x19A00000193), COERCE_DOUBLE(0x19E00000197), v90, v91, v92, v93);
  v549[2] = v509;
  v549[3] = v510;
  v549[4] = v511;
  v550 = v512;
  v549[0] = v507;
  v549[1] = v508;
  v1016 = 0;
  v554[0] = xmmword_224665EE8;
  v554[1] = *(_OWORD *)dbl_224665EF8;
  if ((v7 & 0x44000000000000) != 0)
    sub_223B37328((uint64_t)v549, 5, 6, 0, (uint64_t)&v1016, (uint64_t)v554, COERCE_DOUBLE(0x19500000194), COERCE_DOUBLE(0x1B1000001B0), v94, v95, v96, v97);
  v552[2] = v509;
  v552[3] = v510;
  v552[4] = v511;
  v553 = v512;
  v552[0] = v507;
  v552[1] = v508;
  v1017 = 0;
  v561[0] = xmmword_224665F08;
  v561[1] = *(_OWORD *)dbl_224665F18;
  if ((v7 & 0xCC000000000000) != 0)
    sub_223B37328((uint64_t)v552, 5, 6, 1, (uint64_t)&v1017, (uint64_t)v561, COERCE_DOUBLE(0x19C00000195), COERCE_DOUBLE(0x1B8000001B1), v94, v95, v96, v97);
  v557 = v525;
  v558 = v526;
  v559 = v527;
  v560 = v528;
  v555 = v523;
  v556 = v524;
  v1018 = 0x202000002020000;
  v564[0] = xmmword_224665F28;
  v564[1] = *(_OWORD *)dbl_224665F38;
  sub_223B37328((uint64_t)&v555, 5, 7, 0, (uint64_t)&v1018, (uint64_t)v564, COERCE_DOUBLE(0x19700000196), COERCE_DOUBLE(0x1B3000001B2), v94, v95, v96, v97);
  v562[2] = v525;
  v562[3] = v526;
  v562[4] = v527;
  v563 = v528;
  v562[0] = v523;
  v562[1] = v524;
  v1019 = 0x202000002020000;
  v567[0] = xmmword_224665F48;
  v567[1] = *(_OWORD *)dbl_224665F58;
  sub_223B37328((uint64_t)v562, 5, 7, 1, (uint64_t)&v1019, (uint64_t)v567, COERCE_DOUBLE(0x19E00000197), COERCE_DOUBLE(0x1BA000001B3), v98, v99, v100, v101);
  v565[2] = v525;
  v565[3] = v526;
  v565[4] = v527;
  v566 = v528;
  v565[0] = v523;
  v565[1] = v524;
  v1020 = 0;
  v570[0] = xmmword_224665F68;
  v570[1] = *(_OWORD *)dbl_224665F78;
  if ((v7 & 0x8000000000000) != 0)
    sub_223B37328((uint64_t)v565, 4, 6, 2, (uint64_t)&v1020, (uint64_t)v570, COERCE_DOUBLE(0x19900000198), COERCE_DOUBLE(0x19D0000019CLL), v102, v103, v104, v105);
  v568[2] = v525;
  v568[3] = v526;
  v568[4] = v527;
  v569 = v528;
  v568[0] = v523;
  v568[1] = v524;
  v1021 = 0;
  v577[0] = xmmword_224665F88;
  v577[1] = *(_OWORD *)dbl_224665F98;
  if ((v7 & 0x408000000000000) != 0)
    sub_223B37328((uint64_t)v568, 4, 6, 3, (uint64_t)&v1021, (uint64_t)v577, COERCE_DOUBLE(0x1D000000199), COERCE_DOUBLE(0x1D40000019DLL), v102, v103, v104, v105);
  v573 = v541;
  v574 = v542;
  v575 = v543;
  v576 = v544;
  v571 = v539;
  v572 = v540;
  v1022 = 0x202000002020000;
  v580[0] = xmmword_224665FA8;
  v580[1] = *(_OWORD *)dbl_224665FB8;
  sub_223B37328((uint64_t)&v571, 4, 7, 2, (uint64_t)&v1022, (uint64_t)v580, COERCE_DOUBLE(0x19B0000019ALL), COERCE_DOUBLE(0x19F0000019ELL), v102, v103, v104, v105);
  v578[2] = v541;
  v578[3] = v542;
  v578[4] = v543;
  v579 = v544;
  v578[0] = v539;
  v578[1] = v540;
  v1023 = 0x202000002020000;
  v583[0] = xmmword_224665FC8;
  v583[1] = *(_OWORD *)dbl_224665FD8;
  sub_223B37328((uint64_t)v578, 4, 7, 3, (uint64_t)&v1023, (uint64_t)v583, COERCE_DOUBLE(0x1D20000019BLL), COERCE_DOUBLE(0x1D60000019FLL), v106, v107, v108, v109);
  v581[2] = v541;
  v581[3] = v542;
  v581[4] = v543;
  v582 = v544;
  v581[0] = v539;
  v581[1] = v540;
  v1024 = 0;
  v586[0] = xmmword_224665FE8;
  v586[1] = *(_OWORD *)dbl_224665FF8;
  if ((v7 & 0x88000000000000) != 0)
    sub_223B37328((uint64_t)v581, 5, 6, 2, (uint64_t)&v1024, (uint64_t)v586, COERCE_DOUBLE(0x19D0000019CLL), COERCE_DOUBLE(0x1B9000001B8), v110, v111, v112, v113);
  v584[2] = v541;
  v584[3] = v542;
  v584[4] = v543;
  v585 = v544;
  v584[0] = v539;
  v584[1] = v540;
  v1025 = 0;
  v593[0] = xmmword_224666008;
  v593[1] = *(_OWORD *)dbl_224666018;
  if ((v7 & 0x4488000000000000) != 0)
    sub_223B37328((uint64_t)v584, 5, 6, 3, (uint64_t)&v1025, (uint64_t)v593, COERCE_DOUBLE(0x1D40000019DLL), COERCE_DOUBLE(0x1F0000001B9), v110, v111, v112, v113);
  v589 = v557;
  v590 = v558;
  v591 = v559;
  v592 = v560;
  v587 = v555;
  v588 = v556;
  v1026 = 0x202000002020000;
  v596[0] = xmmword_224666028;
  v596[1] = *(_OWORD *)dbl_224666038;
  sub_223B37328((uint64_t)&v587, 5, 7, 2, (uint64_t)&v1026, (uint64_t)v596, COERCE_DOUBLE(0x19F0000019ELL), COERCE_DOUBLE(0x1BB000001BALL), v110, v111, v112, v113);
  v594[2] = v557;
  v594[3] = v558;
  v594[4] = v559;
  v595 = v560;
  v594[0] = v555;
  v594[1] = v556;
  v1027 = 0x202000002020000;
  v599[0] = xmmword_224666048;
  v599[1] = *(_OWORD *)dbl_224666058;
  sub_223B37328((uint64_t)v594, 5, 7, 3, (uint64_t)&v1027, (uint64_t)v599, COERCE_DOUBLE(0x1D60000019FLL), COERCE_DOUBLE(0x1F2000001BBLL), v114, v115, v116, v117);
  v597[2] = v557;
  v597[3] = v558;
  v597[4] = v559;
  v598 = v560;
  v597[0] = v555;
  v597[1] = v556;
  v1028 = 0;
  v602[0] = xmmword_224666068;
  v602[1] = *(_OWORD *)dbl_224666078;
  if ((v7 & 0x10000000000000) != 0)
    sub_223B37328((uint64_t)v597, 6, 4, 0, (uint64_t)&v1028, (uint64_t)v602, COERCE_DOUBLE(0x1A1000001A0), COERCE_DOUBLE(0x1A5000001A4), v118, v119, v120, v121);
  v600[2] = v557;
  v600[3] = v558;
  v600[4] = v559;
  v601 = v560;
  v600[0] = v555;
  v600[1] = v556;
  v1029 = 0;
  v609[0] = xmmword_224666088;
  v609[1] = *(_OWORD *)dbl_224666098;
  if ((v7 & 0x30000000000000) != 0)
    sub_223B37328((uint64_t)v600, 6, 4, 1, (uint64_t)&v1029, (uint64_t)v609, COERCE_DOUBLE(0x1A8000001A1), COERCE_DOUBLE(0x1AC000001A5), v118, v119, v120, v121);
  v605 = v573;
  v606 = v574;
  v607 = v575;
  v608 = v576;
  v603 = v571;
  v604 = v572;
  v1030 = 0;
  v612[0] = xmmword_2246660A8;
  v612[1] = *(_OWORD *)dbl_2246660B8;
  if ((v7 & 0x50000000000000) != 0)
    sub_223B37328((uint64_t)&v603, 6, 5, 0, (uint64_t)&v1030, (uint64_t)v612, COERCE_DOUBLE(0x1A3000001A2), COERCE_DOUBLE(0x1A7000001A6), v118, v119, v120, v121);
  v610[2] = v573;
  v610[3] = v574;
  v610[4] = v575;
  v611 = v576;
  v610[0] = v571;
  v610[1] = v572;
  v1031 = 0;
  v615[0] = xmmword_2246660C8;
  v615[1] = *(_OWORD *)dbl_2246660D8;
  if ((v7 & 0xF0000000000000) != 0)
    sub_223B37328((uint64_t)v610, 6, 5, 1, (uint64_t)&v1031, (uint64_t)v615, COERCE_DOUBLE(0x1AA000001A3), COERCE_DOUBLE(0x1AE000001A7), v118, v119, v120, v121);
  v613[2] = v573;
  v613[3] = v574;
  v613[4] = v575;
  v614 = v576;
  v613[0] = v571;
  v613[1] = v572;
  v1032 = 0x404040400000000;
  v618[0] = xmmword_2246660E8;
  v618[1] = *(_OWORD *)dbl_2246660F8;
  sub_223B37328((uint64_t)v613, 7, 4, 0, (uint64_t)&v1032, (uint64_t)v618, COERCE_DOUBLE(0x1A5000001A4), COERCE_DOUBLE(0x8100000080), v118, v119, v120, v121);
  v616[2] = v573;
  v616[3] = v574;
  v616[4] = v575;
  v617 = v576;
  v616[0] = v571;
  v616[1] = v572;
  v1033 = 0x404040400000000;
  v625[0] = xmmword_224666108;
  v625[1] = *(_OWORD *)dbl_224666118;
  sub_223B37328((uint64_t)v616, 7, 4, 1, (uint64_t)&v1033, (uint64_t)v625, COERCE_DOUBLE(0x1AC000001A5), COERCE_DOUBLE(0x8800000081), v122, v123, v124, v125);
  v621 = v573;
  v622 = v574;
  v623 = v575;
  v624 = v576;
  v619 = v571;
  v620 = v572;
  v1034 = 0x404040400000000;
  v628[0] = xmmword_224666128;
  v628[1] = *(_OWORD *)dbl_224666138;
  sub_223B37328((uint64_t)&v619, 7, 5, 0, (uint64_t)&v1034, (uint64_t)v628, COERCE_DOUBLE(0x1A7000001A6), COERCE_DOUBLE(0x8300000082), v126, v127, v128, v129);
  v626[2] = v589;
  v626[3] = v590;
  v626[4] = v591;
  v627 = v592;
  v626[0] = v587;
  v626[1] = v588;
  v1035 = 0x404040400000000;
  v631[0] = xmmword_224666148;
  v631[1] = *(_OWORD *)dbl_224666158;
  sub_223B37328((uint64_t)v626, 7, 5, 1, (uint64_t)&v1035, (uint64_t)v631, COERCE_DOUBLE(0x1AE000001A7), COERCE_DOUBLE(0x8A00000083), v130, v131, v132, v133);
  v629[2] = v589;
  v629[3] = v590;
  v629[4] = v591;
  v630 = v592;
  v629[0] = v587;
  v629[1] = v588;
  v1036 = 0;
  v634[0] = xmmword_224666168;
  v634[1] = *(_OWORD *)dbl_224666178;
  if ((v7 & 0x20000000000000) != 0)
    sub_223B37328((uint64_t)v629, 6, 4, 2, (uint64_t)&v1036, (uint64_t)v634, COERCE_DOUBLE(0x1A9000001A8), COERCE_DOUBLE(0x1AD000001ACLL), v134, v135, v136, v137);
  v632[2] = v589;
  v632[3] = v590;
  v632[4] = v591;
  v633 = v592;
  v632[0] = v587;
  v632[1] = v588;
  v1037 = 0;
  v641[0] = xmmword_224666188;
  v641[1] = *(_OWORD *)dbl_224666198;
  if ((v7 & 0x1020000000000000) != 0)
    sub_223B37328((uint64_t)v632, 6, 4, 3, (uint64_t)&v1037, (uint64_t)v641, COERCE_DOUBLE(0x1E0000001A9), COERCE_DOUBLE(0x1E4000001ADLL), v134, v135, v136, v137);
  v637 = v605;
  v638 = v606;
  v639 = v607;
  v640 = v608;
  v635 = v603;
  v636 = v604;
  v1038 = 0;
  v644[0] = xmmword_2246661A8;
  v644[1] = *(_OWORD *)dbl_2246661B8;
  if ((v7 & 0xA0000000000000) != 0)
    sub_223B37328((uint64_t)&v635, 6, 5, 2, (uint64_t)&v1038, (uint64_t)v644, COERCE_DOUBLE(0x1AB000001AALL), COERCE_DOUBLE(0x1AF000001AELL), v134, v135, v136, v137);
  v642[2] = v605;
  v642[3] = v606;
  v642[4] = v607;
  v643 = v608;
  v642[0] = v603;
  v642[1] = v604;
  v1039 = 0;
  v647[0] = xmmword_2246661C8;
  v647[1] = *(_OWORD *)dbl_2246661D8;
  if ((v7 & 0x50A0000000000000) != 0)
    sub_223B37328((uint64_t)v642, 6, 5, 3, (uint64_t)&v1039, (uint64_t)v647, COERCE_DOUBLE(0x1E2000001ABLL), COERCE_DOUBLE(0x1E6000001AFLL), v134, v135, v136, v137);
  v645[2] = v605;
  v645[3] = v606;
  v645[4] = v607;
  v646 = v608;
  v645[0] = v603;
  v645[1] = v604;
  v1040 = 0x404040400000000;
  v650[0] = xmmword_2246661E8;
  v650[1] = *(_OWORD *)dbl_2246661F8;
  sub_223B37328((uint64_t)v645, 7, 4, 2, (uint64_t)&v1040, (uint64_t)v650, COERCE_DOUBLE(0x1AD000001ACLL), COERCE_DOUBLE(0x8900000088), v134, v135, v136, v137);
  v648[2] = v621;
  v648[3] = v622;
  v648[4] = v623;
  v649 = v624;
  v648[0] = v619;
  v648[1] = v620;
  v1041 = 0x404040400000000;
  v657[0] = xmmword_224666208;
  v657[1] = *(_OWORD *)dbl_224666218;
  sub_223B37328((uint64_t)v648, 7, 4, 3, (uint64_t)&v1041, (uint64_t)v657, COERCE_DOUBLE(0x1E4000001ADLL), COERCE_DOUBLE(0xC000000089), v138, v139, v140, v141);
  v653 = v621;
  v654 = v622;
  v655 = v623;
  v656 = v624;
  v651 = v619;
  v652 = v620;
  v1042 = 0x404040400000000;
  v660[0] = xmmword_224666228;
  v660[1] = *(_OWORD *)dbl_224666238;
  sub_223B37328((uint64_t)&v651, 7, 5, 2, (uint64_t)&v1042, (uint64_t)v660, COERCE_DOUBLE(0x1AF000001AELL), COERCE_DOUBLE(0x8B0000008ALL), v142, v143, v144, v145);
  v658[2] = v621;
  v658[3] = v622;
  v658[4] = v623;
  v659 = v624;
  v658[0] = v619;
  v658[1] = v620;
  v1043 = 0x404040400000000;
  v663[0] = xmmword_224666248;
  v663[1] = *(_OWORD *)dbl_224666258;
  sub_223B37328((uint64_t)v658, 7, 5, 3, (uint64_t)&v1043, (uint64_t)v663, COERCE_DOUBLE(0x1E6000001AFLL), COERCE_DOUBLE(0xC20000008BLL), v146, v147, v148, v149);
  v661[2] = v621;
  v661[3] = v622;
  v661[4] = v623;
  v662 = v624;
  v661[0] = v619;
  v661[1] = v620;
  v1044 = 0;
  v666[0] = xmmword_224666268;
  v666[1] = *(_OWORD *)dbl_224666278;
  if ((v7 & 0x40000000000000) != 0)
    sub_223B37328((uint64_t)v661, 6, 6, 0, (uint64_t)&v1044, (uint64_t)v666, COERCE_DOUBLE(0x1B1000001B0), COERCE_DOUBLE(0x1B5000001B4), v150, v151, v152, v153);
  v664[2] = v621;
  v664[3] = v622;
  v664[4] = v623;
  v665 = v624;
  v664[0] = v619;
  v664[1] = v620;
  v1045 = 0;
  v673[0] = xmmword_224666288;
  v673[1] = *(_OWORD *)dbl_224666298;
  if ((v7 & 0xC0000000000000) != 0)
    sub_223B37328((uint64_t)v664, 6, 6, 1, (uint64_t)&v1045, (uint64_t)v673, COERCE_DOUBLE(0x1B8000001B1), COERCE_DOUBLE(0x1BC000001B5), v150, v151, v152, v153);
  v669 = v637;
  v670 = v638;
  v671 = v639;
  v672 = v640;
  v667 = v635;
  v668 = v636;
  v1046 = 0x202000002020000;
  v676[0] = xmmword_2246662A8;
  v676[1] = *(_OWORD *)dbl_2246662B8;
  sub_223B37328((uint64_t)&v667, 6, 7, 0, (uint64_t)&v1046, (uint64_t)v676, COERCE_DOUBLE(0x1B3000001B2), COERCE_DOUBLE(0x1B7000001B6), v150, v151, v152, v153);
  v674[2] = v637;
  v674[3] = v638;
  v674[4] = v639;
  v675 = v640;
  v674[0] = v635;
  v674[1] = v636;
  v1047 = 0x202000002020000;
  v679[0] = xmmword_2246662C8;
  v679[1] = *(_OWORD *)dbl_2246662D8;
  sub_223B37328((uint64_t)v674, 6, 7, 1, (uint64_t)&v1047, (uint64_t)v679, COERCE_DOUBLE(0x1BA000001B3), COERCE_DOUBLE(0x1BE000001B7), v154, v155, v156, v157);
  v677[2] = v637;
  v677[3] = v638;
  v677[4] = v639;
  v678 = v640;
  v677[0] = v635;
  v677[1] = v636;
  v1048 = 0x404040400000000;
  v682[0] = xmmword_2246662E8;
  v682[1] = *(_OWORD *)dbl_2246662F8;
  sub_223B37328((uint64_t)v677, 7, 6, 0, (uint64_t)&v1048, (uint64_t)v682, COERCE_DOUBLE(0x1B5000001B4), COERCE_DOUBLE(0x9100000090), v158, v159, v160, v161);
  v680[2] = v637;
  v680[3] = v638;
  v680[4] = v639;
  v681 = v640;
  v680[0] = v635;
  v680[1] = v636;
  v1049 = 0x404040400000000;
  v689[0] = xmmword_224666308;
  v689[1] = *(_OWORD *)dbl_224666318;
  sub_223B37328((uint64_t)v680, 7, 6, 1, (uint64_t)&v1049, (uint64_t)v689, COERCE_DOUBLE(0x1BC000001B5), COERCE_DOUBLE(0x9800000091), v162, v163, v164, v165);
  v685 = v637;
  v686 = v638;
  v687 = v639;
  v688 = v640;
  v683 = v635;
  v684 = v636;
  v1050 = 0x606040402020000;
  v692[0] = xmmword_224666328;
  v692[1] = *(_OWORD *)dbl_224666338;
  sub_223B37328((uint64_t)&v683, 7, 7, 0, (uint64_t)&v1050, (uint64_t)v692, COERCE_DOUBLE(0x1B7000001B6), COERCE_DOUBLE(0x9300000092), v166, v167, v168, v169);
  v690[2] = v653;
  v690[3] = v654;
  v690[4] = v655;
  v691 = v656;
  v690[0] = v651;
  v690[1] = v652;
  v1051 = 0x606040402020000;
  v695[0] = xmmword_224666348;
  v695[1] = *(_OWORD *)dbl_224666358;
  sub_223B37328((uint64_t)v690, 7, 7, 1, (uint64_t)&v1051, (uint64_t)v695, COERCE_DOUBLE(0x1BE000001B7), COERCE_DOUBLE(0x9A00000093), v170, v171, v172, v173);
  v693[2] = v653;
  v693[3] = v654;
  v693[4] = v655;
  v694 = v656;
  v693[0] = v651;
  v693[1] = v652;
  v1052 = 0;
  v698[0] = xmmword_224666368;
  v698[1] = *(_OWORD *)dbl_224666378;
  if ((v7 & 0x80000000000000) != 0)
    sub_223B37328((uint64_t)v693, 6, 6, 2, (uint64_t)&v1052, (uint64_t)v698, COERCE_DOUBLE(0x1B9000001B8), COERCE_DOUBLE(0x1BD000001BCLL), v174, v175, v176, v177);
  v696[2] = v653;
  v696[3] = v654;
  v696[4] = v655;
  v697 = v656;
  v696[0] = v651;
  v696[1] = v652;
  v1053 = 0;
  v705[0] = xmmword_224666388;
  v705[1] = *(_OWORD *)dbl_224666398;
  if ((v7 & 0x4080000000000000) != 0)
    sub_223B37328((uint64_t)v696, 6, 6, 3, (uint64_t)&v1053, (uint64_t)v705, COERCE_DOUBLE(0x1F0000001B9), COERCE_DOUBLE(0x1F4000001BDLL), v174, v175, v176, v177);
  v701 = v669;
  v702 = v670;
  v703 = v671;
  v704 = v672;
  v699 = v667;
  v700 = v668;
  v1054 = 0x202000002020000;
  v708[0] = xmmword_2246663A8;
  v708[1] = *(_OWORD *)dbl_2246663B8;
  sub_223B37328((uint64_t)&v699, 6, 7, 2, (uint64_t)&v1054, (uint64_t)v708, COERCE_DOUBLE(0x1BB000001BALL), COERCE_DOUBLE(0x1BF000001BELL), v174, v175, v176, v177);
  v706[2] = v669;
  v706[3] = v670;
  v706[4] = v671;
  v707 = v672;
  v706[0] = v667;
  v706[1] = v668;
  v1055 = 0x202000002020000;
  v711[0] = xmmword_2246663C8;
  v711[1] = *(_OWORD *)dbl_2246663D8;
  sub_223B37328((uint64_t)v706, 6, 7, 3, (uint64_t)&v1055, (uint64_t)v711, COERCE_DOUBLE(0x1F2000001BBLL), COERCE_DOUBLE(0x1F6000001BFLL), v178, v179, v180, v181);
  v709[2] = v669;
  v709[3] = v670;
  v709[4] = v671;
  v710 = v672;
  v709[0] = v667;
  v709[1] = v668;
  v1056 = 0x404040400000000;
  v714[0] = xmmword_2246663E8;
  v714[1] = *(_OWORD *)dbl_2246663F8;
  sub_223B37328((uint64_t)v709, 7, 6, 2, (uint64_t)&v1056, (uint64_t)v714, COERCE_DOUBLE(0x1BD000001BCLL), COERCE_DOUBLE(0x9900000098), v182, v183, v184, v185);
  v712[2] = v685;
  v712[3] = v686;
  v712[4] = v687;
  v713 = v688;
  v712[0] = v683;
  v712[1] = v684;
  v1057 = 0x404040400000000;
  v717[0] = xmmword_224666408;
  v717[1] = *(_OWORD *)dbl_224666418;
  sub_223B37328((uint64_t)v712, 7, 6, 3, (uint64_t)&v1057, (uint64_t)v717, COERCE_DOUBLE(0x1F4000001BDLL), COERCE_DOUBLE(0xD000000099), v186, v187, v188, v189);
  v715[2] = v685;
  v715[3] = v686;
  v715[4] = v687;
  v716 = v688;
  v715[0] = v683;
  v715[1] = v684;
  v1058 = 0x606040402020000;
  v724[0] = xmmword_224666428;
  v724[1] = *(_OWORD *)dbl_224666438;
  sub_223B37328((uint64_t)v715, 7, 7, 2, (uint64_t)&v1058, (uint64_t)v724, COERCE_DOUBLE(0x1BF000001BELL), COERCE_DOUBLE(0x9B0000009ALL), v190, v191, v192, v193);
  v720 = v685;
  v721 = v686;
  v722 = v687;
  v723 = v688;
  v718 = v683;
  v719 = v684;
  v1059 = 0x606040402020000;
  v727[0] = xmmword_224666448;
  v727[1] = *(_OWORD *)dbl_224666458;
  sub_223B37328((uint64_t)&v718, 7, 7, 3, (uint64_t)&v1059, (uint64_t)v727, COERCE_DOUBLE(0x1F6000001BFLL), COERCE_DOUBLE(0xD20000009BLL), v194, v195, v196, v197);
  v725[2] = v685;
  v725[3] = v686;
  v725[4] = v687;
  v726 = v688;
  v725[0] = v683;
  v725[1] = v684;
  v1060 = 0;
  v730[0] = xmmword_224666468;
  v730[1] = *(_OWORD *)dbl_224666478;
  if ((v7 & 0x100000000000000) != 0)
    sub_223B37328((uint64_t)v725, 4, 4, 4, (uint64_t)&v1060, (uint64_t)v730, COERCE_DOUBLE(0x1C1000001C0), COERCE_DOUBLE(0x1C5000001C4), v198, v199, v200, v201);
  v728[2] = v685;
  v728[3] = v686;
  v728[4] = v687;
  v729 = v688;
  v728[0] = v683;
  v728[1] = v684;
  v1061 = 0;
  v733[0] = xmmword_224666488;
  v733[1] = *(_OWORD *)dbl_224666498;
  if ((v7 & 0x300000000000000) != 0)
    sub_223B37328((uint64_t)v728, 4, 4, 5, (uint64_t)&v1061, (uint64_t)v733, COERCE_DOUBLE(0x1C8000001C1), COERCE_DOUBLE(0x1CC000001C5), v198, v199, v200, v201);
  v731[2] = v701;
  v731[3] = v702;
  v731[4] = v703;
  v732 = v704;
  v731[0] = v699;
  v731[1] = v700;
  v1062 = 0;
  v736[0] = xmmword_2246664A8;
  v736[1] = *(_OWORD *)dbl_2246664B8;
  if ((v7 & 0x500000000000000) != 0)
    sub_223B37328((uint64_t)v731, 4, 5, 4, (uint64_t)&v1062, (uint64_t)v736, COERCE_DOUBLE(0x1C3000001C2), COERCE_DOUBLE(0x1C7000001C6), v198, v199, v200, v201);
  v734[2] = v701;
  v734[3] = v702;
  v734[4] = v703;
  v735 = v704;
  v734[0] = v699;
  v734[1] = v700;
  v1063 = 0;
  v739[0] = xmmword_2246664C8;
  v739[1] = *(_OWORD *)dbl_2246664D8;
  if ((v7 & 0xF00000000000000) != 0)
    sub_223B37328((uint64_t)v734, 4, 5, 5, (uint64_t)&v1063, (uint64_t)v739, COERCE_DOUBLE(0x1CA000001C3), COERCE_DOUBLE(0x1CE000001C7), v198, v199, v200, v201);
  v737[2] = v720;
  v737[3] = v721;
  v737[4] = v722;
  v738 = v723;
  v737[0] = v718;
  v737[1] = v719;
  v1064 = 0;
  v742[0] = xmmword_2246664E8;
  v742[1] = *(_OWORD *)dbl_2246664F8;
  if ((v7 & 0x1100000000000000) != 0)
    sub_223B37328((uint64_t)v737, 5, 4, 4, (uint64_t)&v1064, (uint64_t)v742, COERCE_DOUBLE(0x1C5000001C4), COERCE_DOUBLE(0x1E1000001E0), v198, v199, v200, v201);
  v740[2] = v720;
  v740[3] = v721;
  v740[4] = v722;
  v741 = v723;
  v740[0] = v718;
  v740[1] = v719;
  v1065 = 0;
  v745[0] = xmmword_224666508;
  v745[1] = *(_OWORD *)dbl_224666518;
  if ((v7 & 0x3300000000000000) != 0)
    sub_223B37328((uint64_t)v740, 5, 4, 5, (uint64_t)&v1065, (uint64_t)v745, COERCE_DOUBLE(0x1CC000001C5), COERCE_DOUBLE(0x1E8000001E1), v198, v199, v200, v201);
  v743[2] = v720;
  v743[3] = v721;
  v743[4] = v722;
  v744 = v723;
  v743[0] = v718;
  v743[1] = v719;
  v1066 = 0;
  v752[0] = xmmword_224666528;
  v752[1] = *(_OWORD *)dbl_224666538;
  if ((v7 & 0x5500000000000000) != 0)
  {
    sub_223B37328((uint64_t)v743, 5, 5, 4, (uint64_t)&v1066, (uint64_t)v752, COERCE_DOUBLE(0x1C7000001C6), COERCE_DOUBLE(0x1E3000001E2), v198, v199, v200, v201);
    v748 = v720;
    v749 = v721;
    v750 = v722;
    v751 = v723;
    v746 = v718;
    v747 = v719;
    v1067 = 0;
    v755 = xmmword_224666548;
    v756 = *(_OWORD *)dbl_224666558;
  }
  else
  {
    v748 = v720;
    v749 = v721;
    v750 = v722;
    v751 = v723;
    v746 = v718;
    v747 = v719;
    v1067 = 0;
    v755 = xmmword_224666548;
    v756 = *(_OWORD *)dbl_224666558;
    if (!HIBYTE(v7))
      goto LABEL_111;
  }
  sub_223B37328((uint64_t)&v746, 5, 5, 5, (uint64_t)&v1067, (uint64_t)&v755, COERCE_DOUBLE(0x1CE000001C7), COERCE_DOUBLE(0x1EA000001E3), v198, v199, v200, v201);
LABEL_111:
  v753[2] = v748;
  v753[3] = v749;
  v753[4] = v750;
  v754 = v751;
  v753[0] = v746;
  v753[1] = v747;
  v1068 = 0;
  v759[0] = xmmword_224666568;
  v759[1] = *(_OWORD *)dbl_224666578;
  if ((v7 & 0x200000000000000) != 0)
    sub_223B37328((uint64_t)v753, 4, 4, 6, (uint64_t)&v1068, (uint64_t)v759, COERCE_DOUBLE(0x1C9000001C8), COERCE_DOUBLE(0x1CD000001CCLL), v198, v199, v200, v201);
  v757[2] = v748;
  v757[3] = v749;
  v757[4] = v750;
  v758 = v751;
  v757[0] = v746;
  v757[1] = v747;
  v1069 = 0x100010001000100;
  v766[0] = xmmword_224666588;
  v766[1] = *(_OWORD *)dbl_224666598;
  sub_223B37328((uint64_t)v757, 4, 4, 7, (uint64_t)&v1069, (uint64_t)v766, COERCE_DOUBLE(0x180000001C9), COERCE_DOUBLE(0x184000001CDLL), v198, v199, v200, v201);
  v762 = v748;
  v763 = v749;
  v764 = v750;
  v765 = v751;
  v760 = v746;
  v761 = v747;
  v1070 = 0;
  v769[0] = xmmword_2246665A8;
  v769[1] = *(_OWORD *)dbl_2246665B8;
  if ((v7 & 0xA00000000000000) != 0)
    sub_223B37328((uint64_t)&v760, 4, 5, 6, (uint64_t)&v1070, (uint64_t)v769, COERCE_DOUBLE(0x1CB000001CALL), COERCE_DOUBLE(0x1CF000001CELL), v202, v203, v204, v205);
  v767[2] = v748;
  v767[3] = v749;
  v767[4] = v750;
  v768 = v751;
  v767[0] = v746;
  v767[1] = v747;
  v1071 = 0x100010001000100;
  v772[0] = xmmword_2246665C8;
  v772[1] = *(_OWORD *)dbl_2246665D8;
  sub_223B37328((uint64_t)v767, 4, 5, 7, (uint64_t)&v1071, (uint64_t)v772, COERCE_DOUBLE(0x182000001CBLL), COERCE_DOUBLE(0x186000001CFLL), v202, v203, v204, v205);
  v770[2] = v748;
  v770[3] = v749;
  v770[4] = v750;
  v771 = v751;
  v770[0] = v746;
  v770[1] = v747;
  v1072 = 0;
  v775[0] = xmmword_2246665E8;
  v775[1] = *(_OWORD *)dbl_2246665F8;
  if ((v7 & 0x2200000000000000) != 0)
    sub_223B37328((uint64_t)v770, 5, 4, 6, (uint64_t)&v1072, (uint64_t)v775, COERCE_DOUBLE(0x1CD000001CCLL), COERCE_DOUBLE(0x1E9000001E8), v206, v207, v208, v209);
  v773[2] = v748;
  v773[3] = v749;
  v773[4] = v750;
  v774 = v751;
  v773[0] = v746;
  v773[1] = v747;
  v1073 = 0x100010001000100;
  v782[0] = xmmword_224666608;
  v782[1] = *(_OWORD *)dbl_224666618;
  sub_223B37328((uint64_t)v773, 5, 4, 7, (uint64_t)&v1073, (uint64_t)v782, COERCE_DOUBLE(0x184000001CDLL), COERCE_DOUBLE(0x1A0000001E9), v206, v207, v208, v209);
  v778 = v748;
  v779 = v749;
  v780 = v750;
  v781 = v751;
  v776 = v746;
  v777 = v747;
  v1074 = 0;
  v785[0] = xmmword_224666628;
  v785[1] = *(_OWORD *)dbl_224666638;
  if ((v7 & 0xAA00000000000000) != 0)
    sub_223B37328((uint64_t)&v776, 5, 5, 6, (uint64_t)&v1074, (uint64_t)v785, COERCE_DOUBLE(0x1CF000001CELL), COERCE_DOUBLE(0x1EB000001EALL), v210, v211, v212, v213);
  v783[2] = v748;
  v783[3] = v749;
  v783[4] = v750;
  v784 = v751;
  v783[0] = v746;
  v783[1] = v747;
  v1075 = 0x100010001000100;
  v788[0] = xmmword_224666648;
  v788[1] = *(_OWORD *)dbl_224666658;
  sub_223B37328((uint64_t)v783, 5, 5, 7, (uint64_t)&v1075, (uint64_t)v788, COERCE_DOUBLE(0x186000001CFLL), COERCE_DOUBLE(0x1A2000001EBLL), v210, v211, v212, v213);
  v786[2] = v748;
  v786[3] = v749;
  v786[4] = v750;
  v787 = v751;
  v786[0] = v746;
  v786[1] = v747;
  v1076 = 0;
  v791[0] = xmmword_224666668;
  v791[1] = *(_OWORD *)dbl_224666678;
  if ((v7 & 0x400000000000000) != 0)
    sub_223B37328((uint64_t)v786, 4, 6, 4, (uint64_t)&v1076, (uint64_t)v791, COERCE_DOUBLE(0x1D1000001D0), COERCE_DOUBLE(0x1D5000001D4), v214, v215, v216, v217);
  v789[2] = v762;
  v789[3] = v763;
  v789[4] = v764;
  v790 = v765;
  v789[0] = v760;
  v789[1] = v761;
  v1077 = 0;
  v798[0] = xmmword_224666688;
  v798[1] = *(_OWORD *)dbl_224666698;
  if ((v7 & 0xC00000000000000) != 0)
    sub_223B37328((uint64_t)v789, 4, 6, 5, (uint64_t)&v1077, (uint64_t)v798, COERCE_DOUBLE(0x1D8000001D1), COERCE_DOUBLE(0x1DC000001D5), v214, v215, v216, v217);
  v794 = v762;
  v795 = v763;
  v796 = v764;
  v797 = v765;
  v792 = v760;
  v793 = v761;
  v1078 = 0x202000002020000;
  v801[0] = xmmword_2246666A8;
  v801[1] = *(_OWORD *)dbl_2246666B8;
  sub_223B37328((uint64_t)&v792, 4, 7, 4, (uint64_t)&v1078, (uint64_t)v801, COERCE_DOUBLE(0x1D3000001D2), COERCE_DOUBLE(0x1D7000001D6), v214, v215, v216, v217);
  v799[2] = v762;
  v799[3] = v763;
  v799[4] = v764;
  v800 = v765;
  v799[0] = v760;
  v799[1] = v761;
  v1079 = 0x202000002020000;
  v804[0] = xmmword_2246666C8;
  v804[1] = *(_OWORD *)dbl_2246666D8;
  sub_223B37328((uint64_t)v799, 4, 7, 5, (uint64_t)&v1079, (uint64_t)v804, COERCE_DOUBLE(0x1DA000001D3), COERCE_DOUBLE(0x1DE000001D7), v218, v219, v220, v221);
  v802[2] = v762;
  v802[3] = v763;
  v802[4] = v764;
  v803 = v765;
  v802[0] = v760;
  v802[1] = v761;
  v1080 = 0;
  v807[0] = xmmword_2246666E8;
  v807[1] = *(_OWORD *)dbl_2246666F8;
  if ((v7 & 0x4400000000000000) != 0)
    sub_223B37328((uint64_t)v802, 5, 6, 4, (uint64_t)&v1080, (uint64_t)v807, COERCE_DOUBLE(0x1D5000001D4), COERCE_DOUBLE(0x1F1000001F0), v222, v223, v224, v225);
  v805[2] = v778;
  v805[3] = v779;
  v805[4] = v780;
  v806 = v781;
  v805[0] = v776;
  v805[1] = v777;
  v1081 = 0;
  v814[0] = xmmword_224666708;
  v814[1] = *(_OWORD *)dbl_224666718;
  if ((v7 & 0xCC00000000000000) != 0)
    sub_223B37328((uint64_t)v805, 5, 6, 5, (uint64_t)&v1081, (uint64_t)v814, COERCE_DOUBLE(0x1DC000001D5), COERCE_DOUBLE(0x1F8000001F1), v222, v223, v224, v225);
  v810 = v778;
  v811 = v779;
  v812 = v780;
  v813 = v781;
  v808 = v776;
  v809 = v777;
  v1082 = 0x202000002020000;
  v817[0] = xmmword_224666728;
  v817[1] = *(_OWORD *)dbl_224666738;
  sub_223B37328((uint64_t)&v808, 5, 7, 4, (uint64_t)&v1082, (uint64_t)v817, COERCE_DOUBLE(0x1D7000001D6), COERCE_DOUBLE(0x1F3000001F2), v222, v223, v224, v225);
  v815[2] = v778;
  v815[3] = v779;
  v815[4] = v780;
  v816 = v781;
  v815[0] = v776;
  v815[1] = v777;
  v1083 = 0x202000002020000;
  v820[0] = xmmword_224666748;
  v820[1] = *(_OWORD *)dbl_224666758;
  sub_223B37328((uint64_t)v815, 5, 7, 5, (uint64_t)&v1083, (uint64_t)v820, COERCE_DOUBLE(0x1DE000001D7), COERCE_DOUBLE(0x1FA000001F3), v226, v227, v228, v229);
  v818[2] = v778;
  v818[3] = v779;
  v818[4] = v780;
  v819 = v781;
  v818[0] = v776;
  v818[1] = v777;
  v1084 = 0;
  v823[0] = xmmword_224666768;
  v823[1] = *(_OWORD *)dbl_224666778;
  if ((v7 & 0x800000000000000) != 0)
    sub_223B37328((uint64_t)v818, 4, 6, 6, (uint64_t)&v1084, (uint64_t)v823, COERCE_DOUBLE(0x1D9000001D8), COERCE_DOUBLE(0x1DD000001DCLL), v230, v231, v232, v233);
  v821[2] = v778;
  v821[3] = v779;
  v821[4] = v780;
  v822 = v781;
  v821[0] = v776;
  v821[1] = v777;
  v1085 = 0x100010001000100;
  v830[0] = xmmword_224666788;
  v830[1] = *(_OWORD *)dbl_224666798;
  sub_223B37328((uint64_t)v821, 4, 6, 7, (uint64_t)&v1085, (uint64_t)v830, COERCE_DOUBLE(0x190000001D9), COERCE_DOUBLE(0x194000001DDLL), v230, v231, v232, v233);
  v826 = v794;
  v827 = v795;
  v828 = v796;
  v829 = v797;
  v824 = v792;
  v825 = v793;
  v1086 = 0x202000002020000;
  v833[0] = xmmword_2246667A8;
  v833[1] = *(_OWORD *)dbl_2246667B8;
  sub_223B37328((uint64_t)&v824, 4, 7, 6, (uint64_t)&v1086, (uint64_t)v833, COERCE_DOUBLE(0x1DB000001DALL), COERCE_DOUBLE(0x1DF000001DELL), v234, v235, v236, v237);
  v831[2] = v794;
  v831[3] = v795;
  v831[4] = v796;
  v832 = v797;
  v831[0] = v792;
  v831[1] = v793;
  v1087 = 0x302010003020100;
  v836[0] = xmmword_2246667C8;
  v836[1] = *(_OWORD *)dbl_2246667D8;
  sub_223B37328((uint64_t)v831, 4, 7, 7, (uint64_t)&v1087, (uint64_t)v836, COERCE_DOUBLE(0x192000001DBLL), COERCE_DOUBLE(0x196000001DFLL), v238, v239, v240, v241);
  v834[2] = v794;
  v834[3] = v795;
  v834[4] = v796;
  v835 = v797;
  v834[0] = v792;
  v834[1] = v793;
  v1088 = 0;
  v839[0] = xmmword_2246667E8;
  v839[1] = *(_OWORD *)dbl_2246667F8;
  if ((v7 & 0x8800000000000000) != 0)
    sub_223B37328((uint64_t)v834, 5, 6, 6, (uint64_t)&v1088, (uint64_t)v839, COERCE_DOUBLE(0x1DD000001DCLL), COERCE_DOUBLE(0x1F9000001F8), v242, v243, v244, v245);
  v837[2] = v794;
  v837[3] = v795;
  v837[4] = v796;
  v838 = v797;
  v837[0] = v792;
  v837[1] = v793;
  v1089 = 0x100010001000100;
  v842[0] = xmmword_224666808;
  v842[1] = *(_OWORD *)dbl_224666818;
  sub_223B37328((uint64_t)v837, 5, 6, 7, (uint64_t)&v1089, (uint64_t)v842, COERCE_DOUBLE(0x194000001DDLL), COERCE_DOUBLE(0x1B0000001F9), v242, v243, v244, v245);
  v840[2] = v810;
  v840[3] = v811;
  v840[4] = v812;
  v841 = v813;
  v840[0] = v808;
  v840[1] = v809;
  v1090 = 0x202000002020000;
  v845[0] = xmmword_224666828;
  v845[1] = *(_OWORD *)dbl_224666838;
  sub_223B37328((uint64_t)v840, 5, 7, 6, (uint64_t)&v1090, (uint64_t)v845, COERCE_DOUBLE(0x1DF000001DELL), COERCE_DOUBLE(0x1FB000001FALL), v246, v247, v248, v249);
  v843[2] = v810;
  v843[3] = v811;
  v843[4] = v812;
  v844 = v813;
  v843[0] = v808;
  v843[1] = v809;
  v1091 = 0x302010003020100;
  v848[0] = xmmword_224666848;
  v848[1] = *(_OWORD *)dbl_224666858;
  sub_223B37328((uint64_t)v843, 5, 7, 7, (uint64_t)&v1091, (uint64_t)v848, COERCE_DOUBLE(0x196000001DFLL), COERCE_DOUBLE(0x1B2000001FBLL), v250, v251, v252, v253);
  v846[2] = v810;
  v846[3] = v811;
  v846[4] = v812;
  v847 = v813;
  v846[0] = v808;
  v846[1] = v809;
  v1092 = 0;
  v851[0] = xmmword_224666868;
  v851[1] = *(_OWORD *)dbl_224666878;
  if ((v7 & 0x1000000000000000) != 0)
    sub_223B37328((uint64_t)v846, 6, 4, 4, (uint64_t)&v1092, (uint64_t)v851, COERCE_DOUBLE(0x1E1000001E0), COERCE_DOUBLE(0x1E5000001E4), v254, v255, v256, v257);
  v849[2] = v826;
  v849[3] = v827;
  v849[4] = v828;
  v850 = v829;
  v849[0] = v824;
  v849[1] = v825;
  v1093 = 0;
  v854[0] = xmmword_224666888;
  v854[1] = *(_OWORD *)dbl_224666898;
  if ((v7 & 0x3000000000000000) != 0)
    sub_223B37328((uint64_t)v849, 6, 4, 5, (uint64_t)&v1093, (uint64_t)v854, COERCE_DOUBLE(0x1E8000001E1), COERCE_DOUBLE(0x1EC000001E5), v254, v255, v256, v257);
  v852[2] = v826;
  v852[3] = v827;
  v852[4] = v828;
  v853 = v829;
  v852[0] = v824;
  v852[1] = v825;
  v1094 = 0;
  v861[0] = xmmword_2246668A8;
  v861[1] = *(_OWORD *)dbl_2246668B8;
  if ((v7 & 0x5000000000000000) != 0)
  {
    sub_223B37328((uint64_t)v852, 6, 5, 4, (uint64_t)&v1094, (uint64_t)v861, COERCE_DOUBLE(0x1E3000001E2), COERCE_DOUBLE(0x1E7000001E6), v254, v255, v256, v257);
    v857 = v826;
    v858 = v827;
    v859 = v828;
    v860 = v829;
    v855 = v824;
    v856 = v825;
    v1095 = 0;
    v864 = xmmword_2246668C8;
    v865 = *(_OWORD *)dbl_2246668D8;
  }
  else
  {
    v857 = v826;
    v858 = v827;
    v859 = v828;
    v860 = v829;
    v855 = v824;
    v856 = v825;
    v1095 = 0;
    v864 = xmmword_2246668C8;
    v865 = *(_OWORD *)dbl_2246668D8;
    if (!(v7 >> 60))
      goto LABEL_139;
  }
  sub_223B37328((uint64_t)&v855, 6, 5, 5, (uint64_t)&v1095, (uint64_t)&v864, COERCE_DOUBLE(0x1EA000001E3), COERCE_DOUBLE(0x1EE000001E7), v254, v255, v256, v257);
LABEL_139:
  v862[2] = v857;
  v862[3] = v858;
  v862[4] = v859;
  v863 = v860;
  v862[0] = v855;
  v862[1] = v856;
  v1096 = 0x404040400000000;
  v868[0] = xmmword_2246668E8;
  v868[1] = *(_OWORD *)dbl_2246668F8;
  sub_223B37328((uint64_t)v862, 7, 4, 4, (uint64_t)&v1096, (uint64_t)v868, COERCE_DOUBLE(0x1E5000001E4), COERCE_DOUBLE(0xC1000000C0), v254, v255, v256, v257);
  v866[2] = v857;
  v866[3] = v858;
  v866[4] = v859;
  v867 = v860;
  v866[0] = v855;
  v866[1] = v856;
  v1097 = 0x404040400000000;
  v875[0] = xmmword_224666908;
  v875[1] = *(_OWORD *)dbl_224666918;
  sub_223B37328((uint64_t)v866, 7, 4, 5, (uint64_t)&v1097, (uint64_t)v875, COERCE_DOUBLE(0x1EC000001E5), COERCE_DOUBLE(0xC8000000C1), v258, v259, v260, v261);
  v871 = v857;
  v872 = v858;
  v873 = v859;
  v874 = v860;
  v869 = v855;
  v870 = v856;
  v1098 = 0x404040400000000;
  v878[0] = xmmword_224666928;
  v878[1] = *(_OWORD *)dbl_224666938;
  sub_223B37328((uint64_t)&v869, 7, 5, 4, (uint64_t)&v1098, (uint64_t)v878, COERCE_DOUBLE(0x1E7000001E6), COERCE_DOUBLE(0xC3000000C2), v262, v263, v264, v265);
  v876[2] = v857;
  v876[3] = v858;
  v876[4] = v859;
  v877 = v860;
  v876[0] = v855;
  v876[1] = v856;
  v1099 = 0x404040400000000;
  v881[0] = xmmword_224666948;
  v881[1] = *(_OWORD *)dbl_224666958;
  sub_223B37328((uint64_t)v876, 7, 5, 5, (uint64_t)&v1099, (uint64_t)v881, COERCE_DOUBLE(0x1EE000001E7), COERCE_DOUBLE(0xCA000000C3), v266, v267, v268, v269);
  v879[2] = v857;
  v879[3] = v858;
  v879[4] = v859;
  v880 = v860;
  v879[0] = v855;
  v879[1] = v856;
  v1100 = 0;
  v884[0] = xmmword_224666968;
  v884[1] = *(_OWORD *)dbl_224666978;
  if ((v7 & 0x2000000000000000) != 0)
    sub_223B37328((uint64_t)v879, 6, 4, 6, (uint64_t)&v1100, (uint64_t)v884, COERCE_DOUBLE(0x1E9000001E8), COERCE_DOUBLE(0x1ED000001ECLL), v270, v271, v272, v273);
  v882[2] = v857;
  v882[3] = v858;
  v882[4] = v859;
  v883 = v860;
  v882[0] = v855;
  v882[1] = v856;
  v1101 = 0x100010001000100;
  v887[0] = xmmword_224666988;
  v887[1] = *(_OWORD *)dbl_224666998;
  sub_223B37328((uint64_t)v882, 6, 4, 7, (uint64_t)&v1101, (uint64_t)v887, COERCE_DOUBLE(0x1A0000001E9), COERCE_DOUBLE(0x1A4000001EDLL), v270, v271, v272, v273);
  v885[2] = v857;
  v885[3] = v858;
  v885[4] = v859;
  v886 = v860;
  v885[0] = v855;
  v885[1] = v856;
  v1102 = 0;
  v890[0] = xmmword_2246669A8;
  v890[1] = *(_OWORD *)dbl_2246669B8;
  if ((v7 & 0xA000000000000000) != 0)
    sub_223B37328((uint64_t)v885, 6, 5, 6, (uint64_t)&v1102, (uint64_t)v890, COERCE_DOUBLE(0x1EB000001EALL), COERCE_DOUBLE(0x1EF000001EELL), v274, v275, v276, v277);
  v888[2] = v857;
  v888[3] = v858;
  v888[4] = v859;
  v889 = v860;
  v888[0] = v855;
  v888[1] = v856;
  v1103 = 0x100010001000100;
  v893[0] = xmmword_2246669C8;
  v893[1] = *(_OWORD *)dbl_2246669D8;
  sub_223B37328((uint64_t)v888, 6, 5, 7, (uint64_t)&v1103, (uint64_t)v893, COERCE_DOUBLE(0x1A2000001EBLL), COERCE_DOUBLE(0x1A6000001EFLL), v274, v275, v276, v277);
  v891[2] = v857;
  v891[3] = v858;
  v891[4] = v859;
  v892 = v860;
  v891[0] = v855;
  v891[1] = v856;
  v1104 = 0x404040400000000;
  v896[0] = xmmword_2246669E8;
  v896[1] = *(_OWORD *)dbl_2246669F8;
  sub_223B37328((uint64_t)v891, 7, 4, 6, (uint64_t)&v1104, (uint64_t)v896, COERCE_DOUBLE(0x1ED000001ECLL), COERCE_DOUBLE(0xC9000000C8), v278, v279, v280, v281);
  v894[2] = v857;
  v894[3] = v858;
  v894[4] = v859;
  v895 = v860;
  v894[0] = v855;
  v894[1] = v856;
  v1105 = 0x504050401000100;
  v899[0] = xmmword_224666A08;
  v899[1] = *(_OWORD *)dbl_224666A18;
  sub_223B37328((uint64_t)v894, 7, 4, 7, (uint64_t)&v1105, (uint64_t)v899, COERCE_DOUBLE(0x1A4000001EDLL), COERCE_DOUBLE(0x80000000C9), v282, v283, v284, v285);
  v897[2] = v871;
  v897[3] = v872;
  v897[4] = v873;
  v898 = v874;
  v897[0] = v869;
  v897[1] = v870;
  v1106 = 0x404040400000000;
  v902[0] = xmmword_224666A28;
  v902[1] = *(_OWORD *)dbl_224666A38;
  sub_223B37328((uint64_t)v897, 7, 5, 6, (uint64_t)&v1106, (uint64_t)v902, COERCE_DOUBLE(0x1EF000001EELL), COERCE_DOUBLE(0xCB000000CALL), v286, v287, v288, v289);
  v900[2] = v871;
  v900[3] = v872;
  v900[4] = v873;
  v901 = v874;
  v900[0] = v869;
  v900[1] = v870;
  v1107 = 0x504050401000100;
  v905[0] = xmmword_224666A48;
  v905[1] = *(_OWORD *)dbl_224666A58;
  sub_223B37328((uint64_t)v900, 7, 5, 7, (uint64_t)&v1107, (uint64_t)v905, COERCE_DOUBLE(0x1A6000001EFLL), COERCE_DOUBLE(0x82000000CBLL), v290, v291, v292, v293);
  v903[2] = v871;
  v903[3] = v872;
  v903[4] = v873;
  v904 = v874;
  v903[0] = v869;
  v903[1] = v870;
  v1108 = 0;
  v912[0] = xmmword_224666A68;
  v912[1] = *(_OWORD *)dbl_224666A78;
  if ((v7 & 0x4000000000000000) != 0)
  {
    sub_223B37328((uint64_t)v903, 6, 6, 4, (uint64_t)&v1108, (uint64_t)v912, COERCE_DOUBLE(0x1F1000001F0), COERCE_DOUBLE(0x1F5000001F4), v294, v295, v296, v297);
    v908 = v871;
    v909 = v872;
    v910 = v873;
    v911 = v874;
    v906 = v869;
    v907 = v870;
    v1109 = 0;
    v919 = xmmword_224666A88;
    v920 = *(_OWORD *)dbl_224666A98;
    goto LABEL_147;
  }
  v908 = v871;
  v909 = v872;
  v910 = v873;
  v911 = v874;
  v906 = v869;
  v907 = v870;
  v1109 = 0;
  v919 = xmmword_224666A88;
  v920 = *(_OWORD *)dbl_224666A98;
  if (v7 >> 62)
LABEL_147:
    sub_223B37328((uint64_t)&v906, 6, 6, 5, (uint64_t)&v1109, (uint64_t)&v919, COERCE_DOUBLE(0x1F8000001F1), COERCE_DOUBLE(0x1FC000001F5), v294, v295, v296, v297);
  v915 = v908;
  v916 = v909;
  v917 = v910;
  v918 = v911;
  v913 = v906;
  v914 = v907;
  v1110 = 0x202000002020000;
  v923[0] = xmmword_224666AA8;
  v923[1] = *(_OWORD *)dbl_224666AB8;
  sub_223B37328((uint64_t)&v913, 6, 7, 4, (uint64_t)&v1110, (uint64_t)v923, COERCE_DOUBLE(0x1F3000001F2), COERCE_DOUBLE(0x1F7000001F6), v294, v295, v296, v297);
  v921[2] = v908;
  v921[3] = v909;
  v921[4] = v910;
  v922 = v911;
  v921[0] = v906;
  v921[1] = v907;
  v1111 = 0x202000002020000;
  v926[0] = xmmword_224666AC8;
  v926[1] = *(_OWORD *)dbl_224666AD8;
  sub_223B37328((uint64_t)v921, 6, 7, 5, (uint64_t)&v1111, (uint64_t)v926, COERCE_DOUBLE(0x1FA000001F3), COERCE_DOUBLE(0x1FE000001F7), v298, v299, v300, v301);
  v924[2] = v908;
  v924[3] = v909;
  v924[4] = v910;
  v925 = v911;
  v924[0] = v906;
  v924[1] = v907;
  v1112 = 0x404040400000000;
  v929[0] = xmmword_224666AE8;
  v929[1] = *(_OWORD *)dbl_224666AF8;
  sub_223B37328((uint64_t)v924, 7, 6, 4, (uint64_t)&v1112, (uint64_t)v929, COERCE_DOUBLE(0x1F5000001F4), COERCE_DOUBLE(0xD1000000D0), v302, v303, v304, v305);
  v927[2] = v908;
  v927[3] = v909;
  v927[4] = v910;
  v928 = v911;
  v927[0] = v906;
  v927[1] = v907;
  v1113 = 0x404040400000000;
  v932[0] = xmmword_224666B08;
  v932[1] = *(_OWORD *)dbl_224666B18;
  sub_223B37328((uint64_t)v927, 7, 6, 5, (uint64_t)&v1113, (uint64_t)v932, COERCE_DOUBLE(0x1FC000001F5), COERCE_DOUBLE(0xD8000000D1), v306, v307, v308, v309);
  v930[2] = v908;
  v930[3] = v909;
  v930[4] = v910;
  v931 = v911;
  v930[0] = v906;
  v930[1] = v907;
  v1114 = 0x606040402020000;
  v939[0] = xmmword_224666B28;
  v939[1] = *(_OWORD *)dbl_224666B38;
  sub_223B37328((uint64_t)v930, 7, 7, 4, (uint64_t)&v1114, (uint64_t)v939, COERCE_DOUBLE(0x1F7000001F6), COERCE_DOUBLE(0xD3000000D2), v310, v311, v312, v313);
  v935 = v908;
  v936 = v909;
  v937 = v910;
  v938 = v911;
  v933 = v906;
  v934 = v907;
  v1115 = 0x606040402020000;
  v942[0] = xmmword_224666B48;
  v942[1] = *(_OWORD *)dbl_224666B58;
  sub_223B37328((uint64_t)&v933, 7, 7, 5, (uint64_t)&v1115, (uint64_t)v942, COERCE_DOUBLE(0x1FE000001F7), COERCE_DOUBLE(0xDA000000D3), v314, v315, v316, v317);
  v940[2] = v908;
  v940[3] = v909;
  v940[4] = v910;
  v941 = v911;
  v940[0] = v906;
  v940[1] = v907;
  v1116 = 0;
  v945[0] = xmmword_224666B68;
  v945[1] = *(_OWORD *)dbl_224666B78;
  if ((v7 & 0x8000000000000000) != 0)
    sub_223B37328((uint64_t)v940, 6, 6, 6, (uint64_t)&v1116, (uint64_t)v945, COERCE_DOUBLE(0x1F9000001F8), COERCE_DOUBLE(0x1FD000001FCLL), v318, v319, v320, v321);
  v943[2] = v908;
  v943[3] = v909;
  v943[4] = v910;
  v944 = v911;
  v943[0] = v906;
  v943[1] = v907;
  v1117 = 0x100010001000100;
  v948[0] = xmmword_224666B88;
  v948[1] = *(_OWORD *)dbl_224666B98;
  sub_223B37328((uint64_t)v943, 6, 6, 7, (uint64_t)&v1117, (uint64_t)v948, COERCE_DOUBLE(0x1B0000001F9), COERCE_DOUBLE(0x1B4000001FDLL), v318, v319, v320, v321);
  v946[2] = v915;
  v946[3] = v916;
  v946[4] = v917;
  v947 = v918;
  v946[0] = v913;
  v946[1] = v914;
  v1118 = 0x202000002020000;
  v951[0] = xmmword_224666BA8;
  v951[1] = *(_OWORD *)dbl_224666BB8;
  sub_223B37328((uint64_t)v946, 6, 7, 6, (uint64_t)&v1118, (uint64_t)v951, COERCE_DOUBLE(0x1FB000001FALL), COERCE_DOUBLE(0x1FF000001FELL), v322, v323, v324, v325);
  v949[2] = v915;
  v949[3] = v916;
  v949[4] = v917;
  v950 = v918;
  v949[0] = v913;
  v949[1] = v914;
  v1119 = 0x302010003020100;
  v954[0] = xmmword_224666BC8;
  v954[1] = *(_OWORD *)dbl_224666BD8;
  sub_223B37328((uint64_t)v949, 6, 7, 7, (uint64_t)&v1119, (uint64_t)v954, COERCE_DOUBLE(0x1B2000001FBLL), COERCE_DOUBLE(0x1B6000001FFLL), v326, v327, v328, v329);
  v952[2] = v915;
  v952[3] = v916;
  v952[4] = v917;
  v953 = v918;
  v952[0] = v913;
  v952[1] = v914;
  v1120 = 0x404040400000000;
  v957[0] = xmmword_224666BE8;
  v957[1] = *(_OWORD *)dbl_224666BF8;
  sub_223B37328((uint64_t)v952, 7, 6, 6, (uint64_t)&v1120, (uint64_t)v957, COERCE_DOUBLE(0x1FD000001FCLL), COERCE_DOUBLE(0xD9000000D8), v330, v331, v332, v333);
  v955[2] = v915;
  v955[3] = v916;
  v955[4] = v917;
  v956 = v918;
  v955[0] = v913;
  v955[1] = v914;
  v1121 = 0x504050401000100;
  v960[0] = xmmword_224666C08;
  v960[1] = *(_OWORD *)dbl_224666C18;
  sub_223B37328((uint64_t)v955, 7, 6, 7, (uint64_t)&v1121, (uint64_t)v960, COERCE_DOUBLE(0x1B4000001FDLL), COERCE_DOUBLE(0x90000000D9), v334, v335, v336, v337);
  v958[2] = v915;
  v958[3] = v916;
  v958[4] = v917;
  v959 = v918;
  v958[0] = v913;
  v958[1] = v914;
  v1122 = 0x606040402020000;
  v963[0] = xmmword_224666C28;
  v963[1] = *(_OWORD *)dbl_224666C38;
  sub_223B37328((uint64_t)v958, 7, 7, 6, (uint64_t)&v1122, (uint64_t)v963, COERCE_DOUBLE(0x1FF000001FELL), COERCE_DOUBLE(0xDB000000DALL), v338, v339, v340, v341);
  v961[2] = v935;
  v961[3] = v936;
  v961[4] = v937;
  v962 = v938;
  v961[0] = v933;
  v961[1] = v934;
  v1123[0] = 0x706050403020100;
  v964[0] = xmmword_224666C48;
  v964[1] = *(_OWORD *)dbl_224666C58;
  return sub_223B37328((uint64_t)v961, 7, 7, 7, (uint64_t)v1123, (uint64_t)v964, COERCE_DOUBLE(0x1B6000001FFLL), COERCE_DOUBLE(0x92000000DBLL), v342, v343, v344, v345);
}

uint64_t sub_223B46FEC(uint64_t result, int a2, int a3, int a4, uint64_t a5, uint64_t a6, double a7, double a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, double a13, double a14)
{
  uint64_t v14;
  __int32 v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int32x2_t *v23;
  __int32 v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  float32x4_t v28;
  uint64_t v29;
  int v30;
  _BYTE *v31;
  unsigned __int8 *v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  char v36;
  int32x2_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  _BOOL4 v45;
  _BOOL4 v46;
  BOOL v47;
  _BOOL4 v48;
  _BOOL4 v49;
  BOOL v50;
  int32x2_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  _BOOL4 v60;
  _BOOL4 v61;
  BOOL v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  int32x2_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  _BOOL4 v74;
  _BOOL4 v75;
  BOOL v76;
  uint64_t v77;
  int32x2_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unsigned int v118;
  float32x4_t v119;
  unsigned int v120;
  unsigned __int8 *v121;
  unsigned __int8 *v122;
  uint64_t v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  float32x4_t v127;
  float32x4_t v128;
  unsigned int v129;
  int v130;
  float32x4_t v131;
  int v132;
  float32x4_t v133;
  float32x4_t v134;
  unsigned __int8 *v135;
  unsigned __int8 *v136;
  uint64_t v137;
  unsigned int v138;
  int v139;
  int v140;
  _BYTE *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BYTE *v145;
  uint64_t v146;
  _BYTE *v147;
  uint64_t v148;
  _BYTE *v149;
  int v150;
  unsigned __int8 *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned __int8 *v155;
  uint64_t v156;
  unsigned __int8 *v157;
  unsigned int v158;
  BOOL v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned __int8 *v177;
  uint64_t v178;
  _BYTE *v179;
  uint64_t v180;
  _BYTE *v181;
  int v182;
  int v183;
  uint64_t v184;
  _BYTE *v185;
  int v186;
  int v187;
  uint64_t v188;
  _BYTE *v189;
  int v190;
  uint64_t v191;
  _BYTE *v192;
  int v193;
  int v194;
  uint64_t v195;
  _BYTE *v196;
  int v197;
  int v198;
  uint64_t v199;
  _BYTE *v200;
  uint64_t v201;
  int v202;
  int v203;
  uint64_t v204;
  _BYTE *v205;
  uint64_t v206;
  int v207;
  int v208;
  unsigned int v209;
  int v210;
  unsigned __int8 *v211;
  unsigned __int8 *v212;
  uint64_t v213;
  unsigned int v214;
  char *v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  char *v221;
  int v222;
  unsigned __int8 *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unsigned __int8 *v227;
  uint64_t v228;
  unsigned __int8 *v229;
  unsigned int v230;
  BOOL v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  unsigned __int8 *v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned __int8 *v257;
  unsigned int v258;
  unsigned __int8 *v259;
  unsigned int v260;
  BOOL v261;
  uint64_t v262;
  unsigned int v263;
  uint64_t v264;
  unsigned int v265;
  uint64_t v266;
  unsigned int v267;
  uint64_t v268;
  unsigned int v269;
  uint64_t v270;
  unsigned int v271;
  uint64_t v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  uint64_t v278;
  uint64_t v279;
  unsigned __int8 *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  int v303;
  int v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  int v308;
  int v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  int v314;
  unsigned int v315;
  int v316;
  int v317;
  unsigned __int8 *v318;
  unsigned __int8 *v319;
  uint64_t v320;
  unsigned int v321;
  char *v322;
  uint64_t v323;
  char *v324;
  uint64_t v325;
  char *v326;
  uint64_t v327;
  char *v328;
  int v329;
  unsigned __int8 *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unsigned __int8 *v334;
  uint64_t v335;
  unsigned __int8 *v336;
  unsigned int v337;
  BOOL v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unsigned __int8 *v354;
  unsigned __int8 *v355;
  _DWORD *v356;
  int v357;
  int v358;
  float32x4_t v359;
  float32x4_t v360;
  int32x2_t v361;
  int v362;
  __int128 v363;
  int32x2_t *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  int32x2_t v368;
  int v369;
  _BYTE v370[32];
  __int32 v371;
  uint64_t v372;
  __int32 v373;
  uint64_t v374;
  __int32 v375;
  uint64_t v376;
  __int32 v377;
  uint64_t v378;
  __int32 v379;
  uint64_t v380;
  __int32 v381;
  _OWORD v382[2];
  unint64_t v383;
  __int32 v384;
  uint64_t v385;
  __int32 v386;
  uint64_t v387;
  __int32 v388;
  uint64_t v389;
  __int32 v390;
  uint64_t v391;
  __int32 v392;
  uint64_t v393;
  __int32 v394;
  uint64_t v395;
  __int32 v396;
  uint64_t v397;
  __int32 v398;
  _BYTE v399[8];
  _BYTE v400[8];
  char v401;
  char v402;
  char v403;
  char v404;
  char v405;
  char v406;
  char v407;
  char v408;
  unint64_t v409;
  unsigned __int32 v410;
  unsigned __int8 v411;
  unsigned __int8 v412;
  char v413;
  unsigned __int8 v414;
  unsigned __int8 v415;
  char v416;
  unsigned __int8 v417;
  unsigned __int8 v418;
  uint64_t v419;

  v419 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)result;
  v15 = *(_DWORD *)(*(_QWORD *)result + 4) + a3;
  v368.i32[0] = **(_DWORD **)result + a2;
  v368.i32[1] = v15;
  v369 = *(_DWORD *)(v14 + 8) + a4;
  v363 = *(_OWORD *)(result + 8);
  v16 = *(_QWORD *)(result + 24);
  v17 = *(_BYTE **)(result + 32);
  v364 = &v368;
  v365 = v16;
  v366 = a5;
  v367 = a6;
  v18 = byte_22466137A;
  *v17 = 8;
  v19.i64[0] = 0x3F0000003F000000;
  v19.i64[1] = 0x3F0000003F000000;
  v20 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  do
  {
    v21 = *v18;
    v22 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8 * *(unsigned __int8 *)(a5 + v21))
                            + 40 * *(unsigned int *)(a6 + 4 * v21));
    v23 = (int32x2_t *)((char *)&unk_224661384 + 12 * v21);
    v24 = v23[1].i32[0];
    *(int32x2_t *)a9.f32 = vadd_s32(v368, *v23);
    *(_QWORD *)&v382[0] = a9.i64[0];
    v25 = v369 + v24;
    DWORD2(v382[0]) = v369 + v24;
    v26 = *(uint64_t **)(result + 48);
    v27 = *v26;
    if (!v22[6])
    {
      *(float32x2_t *)a10.f32 = vcvt_f32_s32(*(int32x2_t *)a9.f32);
      a10.f32[2] = (float)v25;
      a11.i32[0] = *(_DWORD *)(v27 + 312);
      a12.i8[0] = v22[3];
      v28 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a12.f32));
      v28.f32[0] = (float)v28.i32[0];
      LOBYTE(a13) = v22[4];
      *(_QWORD *)&a13 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a13)).u64[0];
      *(float *)&a13 = (float)SLODWORD(a13);
      LOBYTE(a14) = v22[5];
      *(_QWORD *)&a14 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a14)).u64[0];
      *(float *)&a14 = (float)SLODWORD(a14);
      v28.i32[1] = LODWORD(a13);
      v28.i32[2] = LODWORD(a14);
      a12 = vmulq_f32(v28, v20);
      a10 = vmulq_n_f32(vaddq_f32(vaddq_f32(a10, v19), a12), a11.f32[0]);
      v410 = a10.u32[2];
      goto LABEL_7;
    }
    if (*(_BYTE *)v26[1]
      || !*(_BYTE *)v26[2]
      || (v51 = (int32x2_t *)v26[3],
          *(int32x2_t *)a10.f32 = vsub_s32(*(int32x2_t *)a9.f32, *v51),
          v383 = a10.i64[0],
          v384 = v25 - v51[1].i32[0],
          v52 = (uint64_t *)v26[7],
          v53 = *v52,
          v54 = v52[1],
          v53 == v54))
    {
LABEL_5:
      *(float32x2_t *)a11.f32 = vcvt_f32_s32(*(int32x2_t *)a9.f32);
      a12.f32[0] = (float)v25;
      a11.f32[2] = (float)v25;
      a11 = vaddq_f32(a11, v19);
      a10 = vmulq_n_f32(a11, *(float *)(v27 + 312));
      v410 = a10.u32[2];
LABEL_7:
      v409 = a10.i64[0];
      goto LABEL_8;
    }
    v55 = (*((_DWORD *)&v383 + *(unsigned __int8 *)v26[6])
                       + *(_DWORD *)v26[4] * *((_DWORD *)&v383 + *(unsigned __int8 *)v26[5]));
    v56 = *(unsigned __int8 *)v26[9];
    v57 = *((_DWORD *)v382 + v56);
    while (1)
    {
      v58 = *(_DWORD *)(v53 + 56);
      v59 = *(_DWORD *)(v53 + 60);
      v60 = v57 <= v59;
      v61 = v57 >= v58;
      if (v59 < v58)
      {
        v61 = v57 <= v58;
        v60 = v57 >= v59;
      }
      v62 = !v60 || !v61;
      if (!v62 && *(_DWORD *)(*(_QWORD *)(v53 + 24) + 4 * v55) == 1)
        break;
      v53 += 64;
      if (v53 == v54)
        goto LABEL_5;
    }
    v63 = *(_QWORD *)v53 + 12 * v55;
    v409 = *(_QWORD *)v63;
    v410 = *(_DWORD *)(v63 + 8);
    if (v57 == v59)
    {
      a10.i32[0] = *(_DWORD *)(v53 + 48);
      *((_DWORD *)&v409 + v56) = a10.i32[0];
    }
    else
    {
      if (v57 == v58)
      {
        a10.i32[0] = *(_DWORD *)(v53 + 52);
      }
      else
      {
        *(float32x2_t *)a10.f32 = vcvt_f32_s32(*(int32x2_t *)a9.f32);
        a10.f32[2] = (float)v25;
        a11.i32[0] = *(_DWORD *)(v27 + 312);
        a10 = vmulq_n_f32(vaddq_f32(a10, v19), a11.f32[0]);
        *(_DWORD *)&v370[8] = a10.i32[2];
        *(_QWORD *)v370 = a10.i64[0];
        a10.i32[0] = *(_DWORD *)&v370[4 * v56];
      }
      *((_DWORD *)&v409 + v56) = a10.i32[0];
    }
LABEL_8:
    v29 = *(_QWORD *)(result + 40) + 12 * v21;
    *(_QWORD *)v29 = v409;
    *(_DWORD *)(v29 + 8) = v410;
    v30 = (char)v22[6];
    if (v30 < 0)
    {
      v35 = *(_QWORD *)(result + 64);
      v36 = **(_BYTE **)v35;
      if (!v36 && **(_BYTE **)(v35 + 8))
      {
        v37 = *(int32x2_t **)(v35 + 16);
        *(int32x2_t *)a10.f32 = vsub_s32(*(int32x2_t *)a9.f32, *v37);
        v383 = a10.i64[0];
        v384 = v25 - v37[1].i32[0];
        v38 = *(uint64_t **)(v35 + 48);
        v39 = *v38;
        v40 = v38[1];
        if (v39 == v40)
        {
LABEL_40:
          v36 = 0;
        }
        else
        {
          v41 = (*((_DWORD *)&v383 + **(unsigned __int8 **)(v35 + 40))
                             + **(_DWORD **)(v35 + 24) * *((_DWORD *)&v383 + **(unsigned __int8 **)(v35 + 32)));
          v42 = *((_DWORD *)v382 + **(unsigned __int8 **)(v35 + 64));
          while (1)
          {
            v44 = *(_DWORD *)(v39 + 56);
            v43 = *(_DWORD *)(v39 + 60);
            v45 = v42 < v43;
            v46 = v42 > v43;
            v47 = v43 < v44;
            v48 = v43 >= v44 ? v42 > v44 : v42 < v44;
            v49 = v47 ? v46 : v45;
            v50 = !v49 || !v48;
            if (!v50 && *(_DWORD *)(*(_QWORD *)(v39 + 24) + 4 * v41) == 2)
              break;
            v39 += 64;
            if (v39 == v40)
              goto LABEL_40;
          }
          v36 = 1;
        }
      }
      v31 = *(_BYTE **)(result + 56);
      v64 = &v31[v21];
      v31[v21] = v36;
      v65 = *(_QWORD *)(result + 80);
      if (!**(_BYTE **)v65)
      {
        if (!**(_BYTE **)(v65 + 8)
          || (v66 = *(int32x2_t **)(v65 + 16),
              *(int32x2_t *)a10.f32 = vsub_s32(*(int32x2_t *)a9.f32, *v66),
              v383 = a10.i64[0],
              v384 = v25 - v66[1].i32[0],
              v67 = *(uint64_t **)(v65 + 48),
              v68 = *v67,
              v69 = v67[1],
              v68 == v69))
        {
LABEL_56:
          v32 = *(unsigned __int8 **)(result + 72);
          v32[v21] = 1;
          v34 = *v64 == 0;
LABEL_69:
          v82 = *(_QWORD *)(result + 88);
          *(_BYTE *)(v82 + v21) = v34;
          if (!v31[v21])
            goto LABEL_2;
LABEL_70:
          v84 = *(_BYTE **)(result + 32);
          if (*v84 == 8)
            *v84 = v21;
          goto LABEL_2;
        }
        v70 = (*((_DWORD *)&v383 + **(unsigned __int8 **)(v65 + 40))
                           + **(_DWORD **)(v65 + 24) * *((_DWORD *)&v383 + **(unsigned __int8 **)(v65 + 32)));
        v71 = *((_DWORD *)v382 + **(unsigned __int8 **)(v65 + 64));
        while (1)
        {
          v73 = *(_DWORD *)(v68 + 56);
          v72 = *(_DWORD *)(v68 + 60);
          v74 = v71 <= v73;
          if (v72 < v73)
          {
            v75 = v71 >= v72;
          }
          else
          {
            v74 = v71 >= v73;
            v75 = v71 <= v72;
          }
          v76 = !v75 || !v74;
          if (!v76 && *(_DWORD *)(*(_QWORD *)(v68 + 24) + 4 * v70))
            break;
          v68 += 64;
          if (v68 == v69)
            goto LABEL_56;
        }
      }
      v32 = *(unsigned __int8 **)(result + 72);
      v32[v21] = 0;
      v33 = *v64;
      v34 = *v64 == 0;
    }
    else
    {
      v31 = *(_BYTE **)(result + 56);
      v31[v21] = v30 != 0;
      v32 = *(unsigned __int8 **)(result + 72);
      v32[v21] = 0;
      v33 = v31[v21];
      v34 = v31[v21] == 0;
    }
    if (v33)
      goto LABEL_69;
    if (!v30)
    {
      v83 = v22[1];
      if (v83 > 0x29)
      {
        v82 = *(_QWORD *)(result + 88);
        *(_BYTE *)(v82 + v21) = 1;
        if (!v31[v21])
          goto LABEL_2;
        goto LABEL_70;
      }
      v34 = byte_224693ECF[v83] == 0;
      goto LABEL_69;
    }
    v77 = **(_QWORD **)(result + 96);
    if (!**(_BYTE **)v77)
      goto LABEL_63;
    v78 = *(int32x2_t **)(v77 + 8);
    *(int32x2_t *)a10.f32 = *v78;
    *(int32x2_t *)a9.f32 = vsub_s32(*(int32x2_t *)a9.f32, *v78);
    v383 = a9.i64[0];
    v384 = v25 - v78[1].i32[0];
    v79 = *(uint64_t **)(v77 + 40);
    v80 = *v79;
    v81 = v79[1];
    if (*v79 == v81)
    {
LABEL_63:
      v82 = *(_QWORD *)(result + 88);
      *(_BYTE *)(v82 + v21) = 1;
      if (!v31[v21])
        goto LABEL_2;
      goto LABEL_70;
    }
    while (!*(_DWORD *)(*(_QWORD *)(v80 + 24)
                       + 4
                       * (*((_DWORD *)&v383 + **(unsigned __int8 **)(v77 + 32))
                                      + **(_DWORD **)(v77 + 16) * *((_DWORD *)&v383 + **(unsigned __int8 **)(v77 + 24)))))
    {
      v80 += 64;
      if (v80 == v81)
        goto LABEL_63;
    }
    v85 = *((_DWORD *)v382 + **(unsigned __int8 **)(v77 + 48));
    if (v85 == *(_DWORD *)(v80 + 60))
    {
      v86 = 3u;
    }
    else if (v85 == *(_DWORD *)(v80 + 56))
    {
      v86 = 1;
    }
    else
    {
      v86 = 2;
    }
    v82 = *(_QWORD *)(result + 88);
    *(_BYTE *)(v82 + v21) = byte_224693ECF[v86] == 0;
    if (v31[v21])
      goto LABEL_70;
LABEL_2:
    ++v18;
  }
  while (v18 != (char *)&unk_224661382);
  v87 = **(unsigned __int8 **)(result + 32);
  if ((_DWORD)v87 != 8)
  {
    *(int32x2_t *)v20.f32 = v368;
    v361 = vadd_s32(v368, (int32x2_t)(*(_QWORD *)&vshl_u32((uint32x2_t)vdup_n_s32(v87), (uint32x2_t)-2) & 0xFFFFFF01FFFFFF01));
    v362 = v369 + (v87 & 1);
    v88 = *(_QWORD *)(result + 40);
    v356 = *(_DWORD **)(result + 8);
    v359.i64[0] = (uint64_t)&v363;
    v359.i64[1] = v88;
    v360.i64[0] = *(_QWORD *)(result + 104);
    v360.i64[1] = (uint64_t)&v361;
    if ((_DWORD)v87)
    {
      v89 = (unsigned __int8 *)&unk_2246613E4 + 9 * v87;
      v90 = *v89;
      v91 = v88 + 12 * v90;
      *(_QWORD *)v370 = *(_QWORD *)v91;
      *(_DWORD *)&v370[8] = *(_DWORD *)(v91 + 8);
      v401 = v31[v90];
      v400[0] = v32[v90];
      v399[0] = *(_BYTE *)(v82 + v90);
      v92 = v89[1];
      v93 = v88 + 12 * v92;
      *(_QWORD *)&v370[12] = *(_QWORD *)v93;
      *(_DWORD *)&v370[20] = *(_DWORD *)(v93 + 8);
      v402 = v31[v92];
      v94 = v32[v92];
      v400[1] = v32[v92];
      v399[1] = *(_BYTE *)(v82 + v92);
      v95 = v89[2];
      v96 = v88 + 12 * v95;
      v371 = *(_DWORD *)(v96 + 8);
      *(_QWORD *)&v370[24] = *(_QWORD *)v96;
      v97 = v31[v95];
      v403 = v31[v95];
      v98 = v32[v95];
      v400[2] = v32[v95];
      v399[2] = *(_BYTE *)(v82 + v95);
      v99 = v89[3];
      v100 = v88 + 12 * v99;
      v372 = *(_QWORD *)v100;
      v373 = *(_DWORD *)(v100 + 8);
      result = v31[v99];
      v404 = v31[v99];
      v101 = v32[v99];
      v400[3] = v32[v99];
      v399[3] = *(_BYTE *)(v82 + v99);
      v102 = v89[4];
      v103 = v88 + 12 * v102;
      v375 = *(_DWORD *)(v103 + 8);
      v374 = *(_QWORD *)v103;
      v104 = v31[v102];
      v405 = v31[v102];
      v105 = v32[v102];
      v400[4] = v32[v102];
      v399[4] = *(_BYTE *)(v82 + v102);
      v106 = v89[5];
      v107 = v88 + 12 * v106;
      v377 = *(_DWORD *)(v107 + 8);
      v376 = *(_QWORD *)v107;
      v108 = v31[v106];
      v406 = v31[v106];
      v109 = v32[v106];
      v400[5] = v32[v106];
      v399[5] = *(_BYTE *)(v82 + v106);
      v110 = v89[6];
      v111 = v88 + 12 * v110;
      v379 = *(_DWORD *)(v111 + 8);
      v378 = *(_QWORD *)v111;
      v112 = v31[v110];
      v407 = v31[v110];
      v113 = v32[v110];
      v400[6] = v32[v110];
      v399[6] = *(_BYTE *)(v82 + v110);
      v354 = v89;
      v114 = v89[7];
      v115 = v88 + 12 * v114;
      v381 = *(_DWORD *)(v115 + 8);
      v380 = *(_QWORD *)v115;
      v116 = v31[v114];
      v408 = v31[v114];
      v117 = v32[v114];
      v400[7] = v32[v114];
      v399[7] = *(_BYTE *)(v82 + v114);
      if (v402)
      {
        v118 = 0;
        v94 = 0;
        v119 = 0uLL;
        if (v97)
          goto LABEL_88;
      }
      else
      {
        v19.i64[0] = *(_QWORD *)&v370[12];
        v19.i32[2] = *(_DWORD *)&v370[20];
        v20 = 0uLL;
        v119 = vaddq_f32(v19, (float32x4_t)0);
        v118 = 1;
        if (v97)
        {
LABEL_88:
          v120 = v118;
          if ((_DWORD)result)
            goto LABEL_90;
          goto LABEL_89;
        }
      }
      v120 = v118 | 2;
      v20.i64[0] = *(_QWORD *)&v370[24];
      v20.i32[2] = v371;
      v119 = vaddq_f32(v119, v20);
      ++v118;
      v94 += v98;
      if ((_DWORD)result)
      {
LABEL_90:
        if (v104)
        {
          if (v108)
            goto LABEL_92;
        }
        else
        {
          v120 |= 8u;
          v20.i64[0] = v374;
          v20.i32[2] = v375;
          v119 = vaddq_f32(v119, v20);
          ++v118;
          v94 += v105;
          if (v108)
          {
LABEL_92:
            if (v112)
              goto LABEL_93;
            goto LABEL_114;
          }
        }
        v120 |= 0x10u;
        v20.i64[0] = v376;
        v20.i32[2] = v377;
        v119 = vaddq_f32(v119, v20);
        ++v118;
        v94 += v109;
        if (v112)
        {
LABEL_93:
          if (v116)
            goto LABEL_94;
LABEL_115:
          v120 |= 0x40u;
          v20.i64[0] = v380;
          v20.i32[2] = v381;
          v119 = vaddq_f32(v119, v20);
          ++v118;
          v94 += v117;
LABEL_94:
          ++*v356;
          v121 = &byte_22466142C[48 * v120];
          v124 = v121[31];
          v122 = v121 + 31;
          v123 = v124;
          if (v124 == 8)
          {
            v125 = v94;
            LOBYTE(v126) = v120;
            goto LABEL_135;
          }
          if (v399[v123])
          {
            v126 = v120 + (-1 << (v123 - 1));
            v141 = &v370[12 * v123];
            v20.i64[0] = *(_QWORD *)v141;
            v20.i32[2] = *((_DWORD *)v141 + 2);
            v119 = vsubq_f32(v119, v20);
            --v118;
            v125 = v94 - (char)v400[v123];
            v142 = v122[1];
            if ((_DWORD)v142 == 8)
              goto LABEL_135;
          }
          else
          {
            v125 = v94;
            v126 = v120;
            v142 = v122[1];
            if ((_DWORD)v142 == 8)
              goto LABEL_135;
          }
          if (v399[v142])
          {
            v126 += -1 << (v142 - 1);
            v145 = &v370[12 * v142];
            v20.i64[0] = *(_QWORD *)v145;
            v20.i32[2] = *((_DWORD *)v145 + 2);
            v119 = vsubq_f32(v119, v20);
            --v118;
            v125 -= (char)v400[v142];
          }
          v146 = v122[2];
          if ((_DWORD)v146 != 8)
          {
            if (v399[v146])
            {
              v126 += -1 << (v146 - 1);
              v147 = &v370[12 * v122[2]];
              v20.i64[0] = *(_QWORD *)v147;
              v20.i32[2] = *((_DWORD *)v147 + 2);
              v119 = vsubq_f32(v119, v20);
              --v118;
              v125 -= (char)v400[v146];
            }
            v148 = v122[3];
            if ((_DWORD)v148 != 8 && v399[v148])
            {
              v126 += -1 << (v148 - 1);
              v149 = &v370[12 * v148];
              v20.i64[0] = *(_QWORD *)v149;
              v20.i32[2] = *((_DWORD *)v149 + 2);
              v119 = vsubq_f32(v119, v20);
              --v118;
              v125 -= (char)v400[v148];
            }
          }
LABEL_135:
          if (v118)
          {
            v20.f32[0] = (float)v118;
            v20 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 0);
            v119 = vdivq_f32(v119, v20);
          }
          v384 = v119.i32[2];
          v383 = v119.i64[0];
          v150 = v126;
          v151 = &byte_22466142C[48 * v126];
          v152 = v151[1];
          if (v152 != 8)
          {
            result = sub_223B497A0((uint64_t)&v359, 1, v354[v152], v354[v151[2]], v354[v151[3]], v354[v151[4]], (uint64_t)&v383, v125 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v153 = v151[5];
            if (v153 != 8)
            {
              result = sub_223B497A0((uint64_t)&v359, 1, v354[v153], v354[v151[6]], v354[v151[7]], v354[v151[8]], (uint64_t)&v383, v125 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v154 = v151[9];
              if (v154 != 8)
                result = sub_223B497A0((uint64_t)&v359, 1, v354[v154], v354[v151[10]], v354[v151[11]], v354[v151[12]], (uint64_t)&v383, v125 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            }
          }
          v155 = &byte_22466142C[48 * v150];
          v158 = v155[13];
          v157 = v155 + 13;
          v156 = v158;
          v159 = v158 == 8;
          if (*v151)
          {
            if (v159)
              goto LABEL_168;
            v160 = v157[1];
            if (v399[v160])
              result = sub_223B497A0((uint64_t)&v359, 0, v354[v156], v354[v160], v354[v157[2]], 8u, (uint64_t)&v383, v125 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v161 = v157[3];
            if (v161 == 8)
              goto LABEL_168;
            v162 = v157[4];
            if (v399[v162])
              result = sub_223B497A0((uint64_t)&v359, 0, v354[v161], v354[v162], v354[v157[5]], 8u, (uint64_t)&v383, v125 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v163 = v157[6];
            if (v163 == 8)
              goto LABEL_168;
            v164 = v157[7];
            if (v399[v164])
              result = sub_223B497A0((uint64_t)&v359, 0, v354[v163], v354[v164], v354[v157[8]], 8u, (uint64_t)&v383, v125 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v165 = v157[9];
            if (v165 == 8)
              goto LABEL_168;
            v166 = v157[10];
            if (v399[v166])
              result = sub_223B497A0((uint64_t)&v359, 0, v354[v165], v354[v166], v354[v157[11]], 8u, (uint64_t)&v383, v125 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v167 = v157[12];
            if (v167 == 8)
              goto LABEL_168;
            v168 = v157[13];
            if (v399[v168])
              result = sub_223B497A0((uint64_t)&v359, 0, v354[v167], v354[v168], v354[v157[14]], 8u, (uint64_t)&v383, v125 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v169 = v157[15];
            if (v169 == 8)
              goto LABEL_168;
            v170 = v157[16];
            if (!v399[v170])
              goto LABEL_168;
          }
          else
          {
            if (v159)
              goto LABEL_168;
            result = sub_223B497A0((uint64_t)&v359, 0, v354[v156], v354[v157[1]], v354[v157[2]], 8u, (uint64_t)&v383, v125 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v171 = v157[3];
            if (v171 == 8)
              goto LABEL_168;
            result = sub_223B497A0((uint64_t)&v359, 0, v354[v171], v354[v157[4]], v354[v157[5]], 8u, (uint64_t)&v383, v125 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v172 = v157[6];
            if (v172 == 8)
              goto LABEL_168;
            result = sub_223B497A0((uint64_t)&v359, 0, v354[v172], v354[v157[7]], v354[v157[8]], 8u, (uint64_t)&v383, v125 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v173 = v157[9];
            if (v173 == 8)
              goto LABEL_168;
            result = sub_223B497A0((uint64_t)&v359, 0, v354[v173], v354[v157[10]], v354[v157[11]], 8u, (uint64_t)&v383, v125 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v174 = v157[12];
            if (v174 == 8)
              goto LABEL_168;
            result = sub_223B497A0((uint64_t)&v359, 0, v354[v174], v354[v157[13]], v354[v157[14]], 8u, (uint64_t)&v383, v125 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v169 = v157[15];
            if (v169 == 8)
              goto LABEL_168;
            v170 = v157[16];
          }
          result = sub_223B497A0((uint64_t)&v359, 0, v354[v169], v354[v170], v354[v157[17]], 8u, (uint64_t)&v383, v125 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
LABEL_168:
          v175 = 0;
          while (1)
          {
            v176 = byte_22466142C[48 * v120 + 35 + v175];
            if (v176 == 8)
              return result;
            v177 = (unsigned __int8 *)&unk_2246613E4 + 9 * v176;
            v178 = *v177;
            v179 = &v370[12 * v178];
            v383 = *(_QWORD *)v179;
            v384 = *((_DWORD *)v179 + 2);
            LOBYTE(v409) = v400[v178];
            v411 = v399[v178];
            v180 = v177[1];
            v181 = &v370[12 * v180];
            v385 = *(_QWORD *)v181;
            v386 = *((_DWORD *)v181 + 2);
            v182 = *(&v401 + v180);
            v183 = v400[v180];
            BYTE1(v409) = v400[v180];
            v412 = v399[v180];
            v184 = v177[2];
            v185 = &v370[12 * v184];
            v387 = *(_QWORD *)v185;
            v388 = *((_DWORD *)v185 + 2);
            v186 = *(&v401 + v184);
            v187 = v400[v184];
            LOBYTE(v184) = v399[v184];
            BYTE2(v409) = v187;
            v413 = v184;
            v188 = v177[3];
            v189 = &v370[12 * v188];
            v389 = *(_QWORD *)v189;
            v390 = *((_DWORD *)v189 + 2);
            v190 = *(&v401 + v188);
            result = v400[v188];
            BYTE3(v409) = v400[v188];
            v414 = v399[v188];
            v191 = v177[4];
            v192 = &v370[12 * v191];
            v392 = *((_DWORD *)v192 + 2);
            v391 = *(_QWORD *)v192;
            v193 = *(&v401 + v191);
            v194 = v400[v191];
            BYTE4(v409) = v400[v191];
            v415 = v399[v191];
            v195 = v177[5];
            v196 = &v370[12 * v195];
            v394 = *((_DWORD *)v196 + 2);
            v393 = *(_QWORD *)v196;
            v197 = *(&v401 + v195);
            v198 = v400[v195];
            LOBYTE(v195) = v399[v195];
            BYTE5(v409) = v198;
            v416 = v195;
            v199 = v177[6];
            v200 = &v370[12 * v199];
            v201 = *(_QWORD *)v200;
            v396 = *((_DWORD *)v200 + 2);
            v395 = v201;
            v202 = *(&v401 + v199);
            v203 = v400[v199];
            BYTE6(v409) = v400[v199];
            v417 = v399[v199];
            v204 = v177[7];
            v205 = &v370[12 * v204];
            v206 = *(_QWORD *)v205;
            v398 = *((_DWORD *)v205 + 2);
            v397 = v206;
            v207 = *(&v401 + v204);
            v208 = v400[v204];
            HIBYTE(v409) = v400[v204];
            v418 = v399[v204];
            if (v182)
            {
              v209 = 0;
              v119 = 0uLL;
              if (v186)
                goto LABEL_174;
            }
            else
            {
              v119.i64[0] = v385;
              v119.i32[2] = v386;
              v20 = 0uLL;
              v119 = vaddq_f32(v119, (float32x4_t)0);
              v94 += v183;
              v209 = 1;
              if (v186)
              {
LABEL_174:
                v210 = v209;
                if (v190)
                  goto LABEL_175;
                goto LABEL_218;
              }
            }
            v210 = v209 | 2;
            v20.i64[0] = v387;
            v20.i32[2] = v388;
            v119 = vaddq_f32(v119, v20);
            ++v209;
            v94 += v187;
            if (v190)
            {
LABEL_175:
              if (v193)
                goto LABEL_176;
              goto LABEL_219;
            }
LABEL_218:
            v210 |= 4u;
            v20.i64[0] = v389;
            v20.i32[2] = v390;
            v119 = vaddq_f32(v119, v20);
            ++v209;
            v94 += result;
            if (v193)
            {
LABEL_176:
              if (v197)
                goto LABEL_177;
              goto LABEL_220;
            }
LABEL_219:
            v210 |= 8u;
            v20.i64[0] = v391;
            v20.i32[2] = v392;
            v119 = vaddq_f32(v119, v20);
            ++v209;
            v94 += v194;
            if (v197)
            {
LABEL_177:
              if (!v202)
                goto LABEL_221;
              goto LABEL_178;
            }
LABEL_220:
            v210 |= 0x10u;
            v20.i64[0] = v393;
            v20.i32[2] = v394;
            v119 = vaddq_f32(v119, v20);
            ++v209;
            v94 += v198;
            if (!v202)
            {
LABEL_221:
              v210 |= 0x20u;
              v20.i64[0] = v395;
              v20.i32[2] = v396;
              v119 = vaddq_f32(v119, v20);
              ++v209;
              v94 += v203;
              if (v207)
                goto LABEL_179;
              goto LABEL_222;
            }
LABEL_178:
            if (v207)
              goto LABEL_179;
LABEL_222:
            v210 |= 0x40u;
            v20.i64[0] = v397;
            v20.i32[2] = v398;
            v119 = vaddq_f32(v119, v20);
            ++v209;
            v94 += v208;
LABEL_179:
            ++*v356;
            v211 = &byte_22466142C[48 * v210];
            v214 = v211[31];
            v212 = v211 + 31;
            v213 = v214;
            v357 = v94;
            if (v214 != 8)
            {
              if (*(&v411 + v213))
              {
                v215 = (char *)&v383 + 12 * v213;
                v20.i64[0] = *(_QWORD *)v215;
                v20.i32[2] = *((_DWORD *)v215 + 2);
                v210 += -1 << (v213 - 1);
                v119 = vsubq_f32(v119, v20);
                --v209;
                v94 -= *((char *)&v409 + v213);
              }
              v216 = v212[1];
              if ((_DWORD)v216 != 8)
              {
                if (*(&v411 + v216))
                {
                  v217 = (char *)&v383 + 12 * v212[1];
                  v20.i64[0] = *(_QWORD *)v217;
                  v20.i32[2] = *((_DWORD *)v217 + 2);
                  v210 += -1 << (v216 - 1);
                  v119 = vsubq_f32(v119, v20);
                  --v209;
                  v94 -= *((char *)&v409 + v216);
                }
                v218 = v212[2];
                if ((_DWORD)v218 != 8)
                {
                  if (*(&v411 + v218))
                  {
                    v219 = (char *)&v383 + 12 * v212[2];
                    v20.i64[0] = *(_QWORD *)v219;
                    v20.i32[2] = *((_DWORD *)v219 + 2);
                    v210 += -1 << (v218 - 1);
                    v119 = vsubq_f32(v119, v20);
                    --v209;
                    v94 -= *((char *)&v409 + v218);
                  }
                  v220 = v212[3];
                  if ((_DWORD)v220 != 8 && *(&v411 + v220))
                  {
                    v221 = (char *)&v383 + 12 * v220;
                    v20.i64[0] = *(_QWORD *)v221;
                    v20.i32[2] = *((_DWORD *)v221 + 2);
                    v210 += -1 << (v220 - 1);
                    v119 = vsubq_f32(v119, v20);
                    --v209;
                    v94 -= *((char *)&v409 + v220);
                  }
                }
              }
            }
            if (v209)
            {
              v20.f32[0] = (float)v209;
              v20 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 0);
              v119 = vdivq_f32(v119, v20);
            }
            DWORD2(v382[0]) = v119.i32[2];
            *(_QWORD *)&v382[0] = v119.i64[0];
            v222 = v210;
            v223 = &byte_22466142C[48 * v210];
            v224 = v223[1];
            if (v224 != 8)
            {
              result = sub_223B497A0((uint64_t)&v359, 1, v354[v177[v224]], v354[v177[v223[2]]], v354[v177[v223[3]]], v354[v177[v223[4]]], (uint64_t)v382, v94 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v225 = v223[5];
              if (v225 != 8)
              {
                result = sub_223B497A0((uint64_t)&v359, 1, v354[v177[v225]], v354[v177[v223[6]]], v354[v177[v223[7]]], v354[v177[v223[8]]], (uint64_t)v382, v94 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
                v226 = v223[9];
                if (v226 != 8)
                  result = sub_223B497A0((uint64_t)&v359, 1, v354[v177[v226]], v354[v177[v223[10]]], v354[v177[v223[11]]], v354[v177[v223[12]]], (uint64_t)v382, v94 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              }
            }
            v227 = &byte_22466142C[48 * v222];
            v230 = v227[13];
            v229 = v227 + 13;
            v228 = v230;
            v231 = v230 == 8;
            if (*v223)
            {
              if (v231)
                goto LABEL_170;
              v232 = v229[1];
              if (*(&v411 + v232))
                result = sub_223B497A0((uint64_t)&v359, 0, v354[v177[v228]], v354[v177[v232]], v354[v177[v229[2]]], 8u, (uint64_t)v382, v94 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v233 = v229[3];
              if (v233 == 8)
                goto LABEL_170;
              v234 = v229[4];
              if (*(&v411 + v234))
                result = sub_223B497A0((uint64_t)&v359, 0, v354[v177[v233]], v354[v177[v234]], v354[v177[v229[5]]], 8u, (uint64_t)v382, v94 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v235 = v229[6];
              if (v235 == 8)
                goto LABEL_170;
              v236 = v229[7];
              if (*(&v411 + v236))
                result = sub_223B497A0((uint64_t)&v359, 0, v354[v177[v235]], v354[v177[v236]], v354[v177[v229[8]]], 8u, (uint64_t)v382, v94 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v237 = v229[9];
              if (v237 == 8)
                goto LABEL_170;
              v238 = v229[10];
              if (*(&v411 + v238))
                result = sub_223B497A0((uint64_t)&v359, 0, v354[v177[v237]], v354[v177[v238]], v354[v177[v229[11]]], 8u, (uint64_t)v382, v94 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v239 = v229[12];
              if (v239 == 8)
                goto LABEL_170;
              v240 = v229[13];
              if (*(&v411 + v240))
                result = sub_223B497A0((uint64_t)&v359, 0, v354[v177[v239]], v354[v177[v240]], v354[v177[v229[14]]], 8u, (uint64_t)v382, v94 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v241 = v229[15];
              if (v241 == 8)
                goto LABEL_170;
              v242 = v229[16];
              if (!*(&v411 + v242))
                goto LABEL_170;
            }
            else
            {
              if (v231)
                goto LABEL_170;
              result = sub_223B497A0((uint64_t)&v359, 0, v354[v177[v228]], v354[v177[v229[1]]], v354[v177[v229[2]]], 8u, (uint64_t)v382, v94 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v243 = v229[3];
              if (v243 == 8)
                goto LABEL_170;
              result = sub_223B497A0((uint64_t)&v359, 0, v354[v177[v243]], v354[v177[v229[4]]], v354[v177[v229[5]]], 8u, (uint64_t)v382, v94 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v244 = v229[6];
              if (v244 == 8)
                goto LABEL_170;
              result = sub_223B497A0((uint64_t)&v359, 0, v354[v177[v244]], v354[v177[v229[7]]], v354[v177[v229[8]]], 8u, (uint64_t)v382, v94 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v245 = v229[9];
              if (v245 == 8)
                goto LABEL_170;
              result = sub_223B497A0((uint64_t)&v359, 0, v354[v177[v245]], v354[v177[v229[10]]], v354[v177[v229[11]]], 8u, (uint64_t)v382, v94 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v246 = v229[12];
              if (v246 == 8)
                goto LABEL_170;
              result = sub_223B497A0((uint64_t)&v359, 0, v354[v177[v246]], v354[v177[v229[13]]], v354[v177[v229[14]]], 8u, (uint64_t)v382, v94 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v241 = v229[15];
              if (v241 == 8)
                goto LABEL_170;
              v242 = v229[16];
            }
            result = sub_223B497A0((uint64_t)&v359, 0, v354[v177[v241]], v354[v177[v242]], v354[v177[v229[17]]], 8u, (uint64_t)v382, v94 != 0, v119, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
LABEL_170:
            ++v175;
            v94 = v357;
            if (v175 == 3)
              return result;
          }
        }
LABEL_114:
        v120 |= 0x20u;
        v20.i64[0] = v378;
        v20.i32[2] = v379;
        v119 = vaddq_f32(v119, v20);
        ++v118;
        v94 += v113;
        if (v116)
          goto LABEL_94;
        goto LABEL_115;
      }
LABEL_89:
      v120 |= 4u;
      v20.i64[0] = v372;
      result = (uint64_t)&v373;
      v20.i32[2] = v373;
      v119 = vaddq_f32(v119, v20);
      ++v118;
      v94 += v101;
      goto LABEL_90;
    }
    v127.i32[3] = v359.i32[3];
    v128.i32[3] = v360.i32[3];
    v382[0] = v359;
    v382[1] = v360;
    if (v31[1])
    {
      v129 = 0;
      v130 = 0;
      v131 = 0uLL;
      if (v31[2])
        goto LABEL_98;
    }
    else
    {
      v127.i64[0] = *(_QWORD *)(v88 + 12);
      v127.i32[2] = *(_DWORD *)(v88 + 20);
      v128.i32[3] = 0;
      v131 = vaddq_f32(v127, (float32x4_t)0);
      v130 = v32[1];
      v129 = 1;
      if (v31[2])
      {
LABEL_98:
        v132 = v129;
        if (v31[3])
          goto LABEL_100;
        goto LABEL_99;
      }
    }
    v132 = v129 | 2;
    v128.i64[0] = *(_QWORD *)(v88 + 24);
    v128.i32[2] = *(_DWORD *)(v88 + 32);
    v131 = vaddq_f32(v131, v128);
    ++v129;
    v130 += v32[2];
    if (v31[3])
    {
LABEL_100:
      if (v31[4])
      {
        if (v31[5])
          goto LABEL_102;
      }
      else
      {
        v132 |= 8u;
        v128.i64[0] = *(_QWORD *)(v88 + 48);
        v128.i32[2] = *(_DWORD *)(v88 + 56);
        v131 = vaddq_f32(v131, v128);
        ++v129;
        v130 += v32[4];
        if (v31[5])
        {
LABEL_102:
          if (v31[6])
            goto LABEL_103;
          goto LABEL_124;
        }
      }
      v132 |= 0x10u;
      v128.i64[0] = *(_QWORD *)(v88 + 60);
      v128.i32[2] = *(_DWORD *)(v88 + 68);
      v131 = vaddq_f32(v131, v128);
      ++v129;
      v130 += v32[5];
      if (v31[6])
      {
LABEL_103:
        if (v31[7])
          goto LABEL_104;
LABEL_125:
        v132 |= 0x40u;
        v128.i64[0] = *(_QWORD *)(v88 + 84);
        v128.i32[2] = *(_DWORD *)(v88 + 92);
        v131 = vaddq_f32(v131, v128);
        ++v129;
        v130 += v32[7];
LABEL_104:
        ++*v356;
        v133 = v359;
        v134 = v360;
        *(float32x4_t *)v370 = v359;
        *(float32x4_t *)&v370[16] = v360;
        v135 = &byte_22466142C[48 * v132];
        v138 = v135[31];
        v136 = v135 + 31;
        v137 = v138;
        if (v138 == 8)
        {
          v139 = v130;
          LOBYTE(v140) = v132;
LABEL_239:
          v358 = v130;
          if (v129)
          {
            v133.f32[0] = (float)v129;
            v133 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v133.f32, 0);
            v131 = vdivq_f32(v131, v133);
          }
          v384 = v131.i32[2];
          v383 = v131.i64[0];
          v252 = v140;
          v253 = &byte_22466142C[48 * v140];
          v254 = v253[1];
          if (v254 != 8)
          {
            result = sub_223B497A0((uint64_t)v370, 1, v254, v253[2], v253[3], v253[4], (uint64_t)&v383, v139 != 0, v131, v133, v360, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v255 = v253[5];
            if (v255 != 8)
            {
              result = sub_223B497A0((uint64_t)v370, 1, v255, v253[6], v253[7], v253[8], (uint64_t)&v383, v139 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v256 = v253[9];
              if (v256 != 8)
                result = sub_223B497A0((uint64_t)v370, 1, v256, v253[10], v253[11], v253[12], (uint64_t)&v383, v139 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            }
          }
          v257 = &byte_22466142C[48 * v252];
          v260 = v257[13];
          v259 = v257 + 13;
          v258 = v260;
          v261 = v260 == 8;
          if (*v253)
          {
            if (!v261)
            {
              v262 = v259[1];
              if (*(_BYTE *)(v82 + v262))
                result = sub_223B497A0((uint64_t)v370, 0, v258, v262, v259[2], 8u, (uint64_t)&v383, v139 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v263 = v259[3];
              if (v263 != 8)
              {
                v264 = v259[4];
                if (*(_BYTE *)(v82 + v264))
                  result = sub_223B497A0((uint64_t)v370, 0, v263, v264, v259[5], 8u, (uint64_t)&v383, v139 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
                v265 = v259[6];
                if (v265 != 8)
                {
                  v266 = v259[7];
                  if (*(_BYTE *)(v82 + v266))
                    result = sub_223B497A0((uint64_t)v370, 0, v265, v266, v259[8], 8u, (uint64_t)&v383, v139 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
                  v267 = v259[9];
                  if (v267 != 8)
                  {
                    v268 = v259[10];
                    if (*(_BYTE *)(v82 + v268))
                      result = sub_223B497A0((uint64_t)v370, 0, v267, v268, v259[11], 8u, (uint64_t)&v383, v139 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
                    v269 = v259[12];
                    if (v269 != 8)
                    {
                      v270 = v259[13];
                      if (*(_BYTE *)(v82 + v270))
                        result = sub_223B497A0((uint64_t)v370, 0, v269, v270, v259[14], 8u, (uint64_t)&v383, v139 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
                      v271 = v259[15];
                      if (v271 != 8)
                      {
                        v272 = v259[16];
                        if (*(_BYTE *)(v82 + v272))
                          result = sub_223B497A0((uint64_t)v370, 0, v271, v272, v259[17], 8u, (uint64_t)&v383, v139 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
                      }
                    }
                  }
                }
              }
            }
          }
          else if (!v261)
          {
            result = sub_223B497A0((uint64_t)v370, 0, v258, v259[1], v259[2], 8u, (uint64_t)&v383, v139 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v273 = v259[3];
            if (v273 != 8)
            {
              result = sub_223B497A0((uint64_t)v370, 0, v273, v259[4], v259[5], 8u, (uint64_t)&v383, v139 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v274 = v259[6];
              if (v274 != 8)
              {
                result = sub_223B497A0((uint64_t)v370, 0, v274, v259[7], v259[8], 8u, (uint64_t)&v383, v139 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
                v275 = v259[9];
                if (v275 != 8)
                {
                  result = sub_223B497A0((uint64_t)v370, 0, v275, v259[10], v259[11], 8u, (uint64_t)&v383, v139 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
                  v276 = v259[12];
                  if (v276 != 8)
                  {
                    result = sub_223B497A0((uint64_t)v370, 0, v276, v259[13], v259[14], 8u, (uint64_t)&v383, v139 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
                    v277 = v259[15];
                    if (v277 != 8)
                      result = sub_223B497A0((uint64_t)v370, 0, v277, v259[16], v259[17], 8u, (uint64_t)&v383, v139 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
                  }
                }
              }
            }
          }
          v278 = 0;
          v355 = &byte_22466142C[48 * v132 + 35];
          while (1)
          {
            v279 = v355[v278];
            if (v279 == 8)
              return result;
            v280 = (unsigned __int8 *)&unk_2246613E4 + 9 * v279;
            v281 = *v280;
            v282 = v88 + 12 * v281;
            v383 = *(_QWORD *)v282;
            v384 = *(_DWORD *)(v282 + 8);
            v411 = v32[v281];
            v401 = *(_BYTE *)(v82 + v281);
            v283 = v280[1];
            v284 = v88 + 12 * v283;
            v385 = *(_QWORD *)v284;
            v386 = *(_DWORD *)(v284 + 8);
            v285 = v31[v283];
            v286 = v32[v283];
            v412 = v32[v283];
            v402 = *(_BYTE *)(v82 + v283);
            v287 = v280[2];
            v288 = v88 + 12 * v287;
            v387 = *(_QWORD *)v288;
            v388 = *(_DWORD *)(v288 + 8);
            v289 = v31[v287];
            v290 = v32[v287];
            LOBYTE(v287) = *(_BYTE *)(v82 + v287);
            v413 = v290;
            v403 = v287;
            v291 = v280[3];
            v292 = v88 + 12 * v291;
            v293 = *(_QWORD *)v292;
            v390 = *(_DWORD *)(v292 + 8);
            v389 = v293;
            v294 = v31[v291];
            result = v32[v291];
            v414 = v32[v291];
            v404 = *(_BYTE *)(v82 + v291);
            v295 = v280[4];
            v296 = v88 + 12 * v295;
            v297 = *(_QWORD *)v296;
            v392 = *(_DWORD *)(v296 + 8);
            v391 = v297;
            v298 = v31[v295];
            v299 = v32[v295];
            v415 = v32[v295];
            v405 = *(_BYTE *)(v82 + v295);
            v300 = v280[5];
            v301 = v88 + 12 * v300;
            v302 = *(_QWORD *)v301;
            v394 = *(_DWORD *)(v301 + 8);
            v393 = v302;
            v303 = v31[v300];
            v304 = v32[v300];
            LOBYTE(v300) = *(_BYTE *)(v82 + v300);
            v416 = v304;
            v406 = v300;
            v305 = v280[6];
            v306 = v88 + 12 * v305;
            v307 = *(_QWORD *)v306;
            v396 = *(_DWORD *)(v306 + 8);
            v395 = v307;
            v308 = v31[v305];
            v309 = v32[v305];
            v417 = v32[v305];
            v407 = *(_BYTE *)(v82 + v305);
            v310 = v280[7];
            v311 = v88 + 12 * v310;
            v312 = *(_QWORD *)v311;
            v398 = *(_DWORD *)(v311 + 8);
            v397 = v312;
            v313 = v31[v310];
            v314 = v32[v310];
            v418 = v32[v310];
            v408 = *(_BYTE *)(v82 + v310);
            if (v285)
            {
              v315 = 0;
              v131 = 0uLL;
              v316 = v358;
              if (v289)
                goto LABEL_277;
            }
            else
            {
              v131.i64[0] = v385;
              v131.i32[2] = v386;
              v133 = 0uLL;
              v131 = vaddq_f32(v131, (float32x4_t)0);
              v316 = v358 + v286;
              v315 = 1;
              if (v289)
              {
LABEL_277:
                v317 = v315;
                if (v294)
                  goto LABEL_278;
                goto LABEL_321;
              }
            }
            v317 = v315 | 2;
            v133.i64[0] = v387;
            v133.i32[2] = v388;
            v131 = vaddq_f32(v131, v133);
            ++v315;
            v316 += v290;
            if (v294)
            {
LABEL_278:
              if (v298)
                goto LABEL_279;
              goto LABEL_322;
            }
LABEL_321:
            v317 |= 4u;
            v133.i64[0] = v389;
            v133.i32[2] = v390;
            v131 = vaddq_f32(v131, v133);
            ++v315;
            v316 += result;
            if (v298)
            {
LABEL_279:
              if (v303)
                goto LABEL_280;
              goto LABEL_323;
            }
LABEL_322:
            v317 |= 8u;
            v133.i64[0] = v391;
            v133.i32[2] = v392;
            v131 = vaddq_f32(v131, v133);
            ++v315;
            v316 += v299;
            if (v303)
            {
LABEL_280:
              if (!v308)
                goto LABEL_324;
              goto LABEL_281;
            }
LABEL_323:
            v317 |= 0x10u;
            v133.i64[0] = v393;
            v133.i32[2] = v394;
            v131 = vaddq_f32(v131, v133);
            ++v315;
            v316 += v304;
            if (!v308)
            {
LABEL_324:
              v317 |= 0x20u;
              v133.i64[0] = v395;
              v133.i32[2] = v396;
              v131 = vaddq_f32(v131, v133);
              ++v315;
              v316 += v309;
              if (v313)
                goto LABEL_282;
              goto LABEL_325;
            }
LABEL_281:
            if (v313)
              goto LABEL_282;
LABEL_325:
            v317 |= 0x40u;
            v133.i64[0] = v397;
            v133.i32[2] = v398;
            v131 = vaddq_f32(v131, v133);
            ++v315;
            v316 += v314;
LABEL_282:
            ++*v356;
            v318 = &byte_22466142C[48 * v317];
            v321 = v318[31];
            v319 = v318 + 31;
            v320 = v321;
            v358 = v316;
            if (v321 != 8)
            {
              if (*(&v401 + v320))
              {
                v322 = (char *)&v383 + 12 * v320;
                v133.i64[0] = *(_QWORD *)v322;
                v133.i32[2] = *((_DWORD *)v322 + 2);
                v317 += -1 << (v320 - 1);
                v131 = vsubq_f32(v131, v133);
                --v315;
                v316 -= (char)*(&v411 + v320);
              }
              v323 = v319[1];
              if ((_DWORD)v323 != 8)
              {
                if (*(&v401 + v323))
                {
                  v324 = (char *)&v383 + 12 * v319[1];
                  v133.i64[0] = *(_QWORD *)v324;
                  v133.i32[2] = *((_DWORD *)v324 + 2);
                  v317 += -1 << (v323 - 1);
                  v131 = vsubq_f32(v131, v133);
                  --v315;
                  v316 -= (char)*(&v411 + v323);
                }
                v325 = v319[2];
                if ((_DWORD)v325 != 8)
                {
                  if (*(&v401 + v325))
                  {
                    v326 = (char *)&v383 + 12 * v319[2];
                    v133.i64[0] = *(_QWORD *)v326;
                    v133.i32[2] = *((_DWORD *)v326 + 2);
                    v317 += -1 << (v325 - 1);
                    v131 = vsubq_f32(v131, v133);
                    --v315;
                    v316 -= (char)*(&v411 + v325);
                  }
                  v327 = v319[3];
                  if ((_DWORD)v327 != 8 && *(&v401 + v327))
                  {
                    v328 = (char *)&v383 + 12 * v327;
                    v133.i64[0] = *(_QWORD *)v328;
                    v133.i32[2] = *((_DWORD *)v328 + 2);
                    v317 += -1 << (v327 - 1);
                    v131 = vsubq_f32(v131, v133);
                    --v315;
                    v316 -= (char)*(&v411 + v327);
                  }
                }
              }
            }
            if (v315)
            {
              v133.f32[0] = (float)v315;
              v133 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v133.f32, 0);
              v131 = vdivq_f32(v131, v133);
            }
            v410 = v131.u32[2];
            v409 = v131.i64[0];
            v329 = v317;
            v330 = &byte_22466142C[48 * v317];
            v331 = v330[1];
            if (v331 != 8)
            {
              result = sub_223B497A0((uint64_t)v382, 1, v280[v331], v280[v330[2]], v280[v330[3]], v280[v330[4]], (uint64_t)&v409, v316 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v332 = v330[5];
              if (v332 != 8)
              {
                result = sub_223B497A0((uint64_t)v382, 1, v280[v332], v280[v330[6]], v280[v330[7]], v280[v330[8]], (uint64_t)&v409, v316 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
                v333 = v330[9];
                if (v333 != 8)
                  result = sub_223B497A0((uint64_t)v382, 1, v280[v333], v280[v330[10]], v280[v330[11]], v280[v330[12]], (uint64_t)&v409, v316 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              }
            }
            v334 = &byte_22466142C[48 * v329];
            v337 = v334[13];
            v336 = v334 + 13;
            v335 = v337;
            v338 = v337 == 8;
            if (*v330)
            {
              if (v338)
                goto LABEL_273;
              v339 = v336[1];
              if (*(&v401 + v339))
                result = sub_223B497A0((uint64_t)v382, 0, v280[v335], v280[v339], v280[v336[2]], 8u, (uint64_t)&v409, v316 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v340 = v336[3];
              if (v340 == 8)
                goto LABEL_273;
              v341 = v336[4];
              if (*(&v401 + v341))
                result = sub_223B497A0((uint64_t)v382, 0, v280[v340], v280[v341], v280[v336[5]], 8u, (uint64_t)&v409, v316 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v342 = v336[6];
              if (v342 == 8)
                goto LABEL_273;
              v343 = v336[7];
              if (*(&v401 + v343))
                result = sub_223B497A0((uint64_t)v382, 0, v280[v342], v280[v343], v280[v336[8]], 8u, (uint64_t)&v409, v316 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v344 = v336[9];
              if (v344 == 8)
                goto LABEL_273;
              v345 = v336[10];
              if (*(&v401 + v345))
                result = sub_223B497A0((uint64_t)v382, 0, v280[v344], v280[v345], v280[v336[11]], 8u, (uint64_t)&v409, v316 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v346 = v336[12];
              if (v346 == 8)
                goto LABEL_273;
              v347 = v336[13];
              if (*(&v401 + v347))
                result = sub_223B497A0((uint64_t)v382, 0, v280[v346], v280[v347], v280[v336[14]], 8u, (uint64_t)&v409, v316 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v348 = v336[15];
              if (v348 == 8)
                goto LABEL_273;
              v349 = v336[16];
              if (!*(&v401 + v349))
                goto LABEL_273;
            }
            else
            {
              if (v338)
                goto LABEL_273;
              result = sub_223B497A0((uint64_t)v382, 0, v280[v335], v280[v336[1]], v280[v336[2]], 8u, (uint64_t)&v409, v316 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v350 = v336[3];
              if (v350 == 8)
                goto LABEL_273;
              result = sub_223B497A0((uint64_t)v382, 0, v280[v350], v280[v336[4]], v280[v336[5]], 8u, (uint64_t)&v409, v316 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v351 = v336[6];
              if (v351 == 8)
                goto LABEL_273;
              result = sub_223B497A0((uint64_t)v382, 0, v280[v351], v280[v336[7]], v280[v336[8]], 8u, (uint64_t)&v409, v316 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v352 = v336[9];
              if (v352 == 8)
                goto LABEL_273;
              result = sub_223B497A0((uint64_t)v382, 0, v280[v352], v280[v336[10]], v280[v336[11]], 8u, (uint64_t)&v409, v316 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v353 = v336[12];
              if (v353 == 8)
                goto LABEL_273;
              result = sub_223B497A0((uint64_t)v382, 0, v280[v353], v280[v336[13]], v280[v336[14]], 8u, (uint64_t)&v409, v316 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v348 = v336[15];
              if (v348 == 8)
                goto LABEL_273;
              v349 = v336[16];
            }
            result = sub_223B497A0((uint64_t)v382, 0, v280[v348], v280[v349], v280[v336[17]], 8u, (uint64_t)&v409, v316 != 0, v131, v133, v134, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
LABEL_273:
            if (++v278 == 3)
              return result;
          }
        }
        if (*(_BYTE *)(v82 + v137))
        {
          v143 = v88 + 12 * v137;
          v133.i64[0] = *(_QWORD *)v143;
          v133.i32[2] = *(_DWORD *)(v143 + 8);
          v140 = v132 + (-1 << (v137 - 1));
          v131 = vsubq_f32(v131, v133);
          --v129;
          v139 = v130 - (char)v32[v137];
          v144 = v136[1];
          if ((_DWORD)v144 == 8)
            goto LABEL_239;
        }
        else
        {
          v139 = v130;
          v140 = v132;
          v144 = v136[1];
          if ((_DWORD)v144 == 8)
            goto LABEL_239;
        }
        if (*(_BYTE *)(v82 + v144))
        {
          v247 = v88 + 12 * v144;
          v133.i64[0] = *(_QWORD *)v247;
          v133.i32[2] = *(_DWORD *)(v247 + 8);
          v140 += -1 << (v144 - 1);
          v131 = vsubq_f32(v131, v133);
          --v129;
          v139 -= (char)v32[v144];
        }
        v248 = v136[2];
        if ((_DWORD)v248 != 8)
        {
          if (*(_BYTE *)(v82 + v248))
          {
            v249 = v88 + 12 * v136[2];
            v133.i64[0] = *(_QWORD *)v249;
            v133.i32[2] = *(_DWORD *)(v249 + 8);
            v140 += -1 << (v248 - 1);
            v131 = vsubq_f32(v131, v133);
            --v129;
            v139 -= (char)v32[v248];
          }
          v250 = v136[3];
          if ((_DWORD)v250 != 8 && *(_BYTE *)(v82 + v250))
          {
            v251 = v88 + 12 * v250;
            v133.i64[0] = *(_QWORD *)v251;
            v133.i32[2] = *(_DWORD *)(v251 + 8);
            v140 += -1 << (v250 - 1);
            v131 = vsubq_f32(v131, v133);
            --v129;
            v139 -= (char)v32[v250];
          }
        }
        goto LABEL_239;
      }
LABEL_124:
      v132 |= 0x20u;
      v128.i64[0] = *(_QWORD *)(v88 + 72);
      v128.i32[2] = *(_DWORD *)(v88 + 80);
      v131 = vaddq_f32(v131, v128);
      ++v129;
      v130 += v32[6];
      if (v31[7])
        goto LABEL_104;
      goto LABEL_125;
    }
LABEL_99:
    v132 |= 4u;
    v128.i64[0] = *(_QWORD *)(v88 + 36);
    v128.i32[2] = *(_DWORD *)(v88 + 44);
    v131 = vaddq_f32(v131, v128);
    ++v129;
    v130 += v32[3];
    goto LABEL_100;
  }
  return result;
}

uint64_t sub_223B497A0(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, int a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, int8x8_t a13, int8x8_t a14)
{
  unint64_t **v14;
  unint64_t v15;
  unint64_t *v16;
  int32x2_t *v17;
  char *v18;
  int32x2_t v19;
  uint64_t v20;
  int32x2_t *v21;
  char *v22;
  int32x2_t v23;
  uint64_t v24;
  int32x2_t *v25;
  char *v26;
  int32x2_t v27;
  uint64_t v28;
  char *v30;
  int v31;
  int32x2_t v32;
  int32x2_t *v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  float32x4_t v46;
  uint64_t v47;
  float32x4_t v48;
  uint64_t v49;
  float32x4_t v50;
  uint64_t v51;
  BOOL v52;
  unsigned int v53;
  uint64_t v54;
  float v55;
  float *v56;
  __int128 *v57;
  __int128 v58;
  uint64_t v59;
  _BYTE v60[4];
  unint64_t v61;
  int v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  __int32 v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  __int32 v70;
  uint64_t v71;
  char v72;
  unint64_t v73;
  __int32 v74;
  uint64_t v75;
  uint64_t v76;
  __int32 v77;
  uint64_t v78;
  __int32 v79;
  uint64_t v80;
  __int32 v81;

  v14 = *(unint64_t ***)a1;
  if (a3 == 8)
  {
    v15 = **v14;
    v62 = *((_DWORD *)*v14 + 2);
    v61 = v15;
    v16 = v14[1];
    v60[0] = 1;
    v63 = (uint64_t)v16;
    if (a4 != 8)
      goto LABEL_3;
  }
  else
  {
    v30 = (char *)&unk_224661384 + 12 * a3;
    v31 = *((_DWORD *)v30 + 2);
    v32 = *(int32x2_t *)v30;
    v33 = (int32x2_t *)v14[2];
    v34 = v14[3];
    *(int32x2_t *)a10.f32 = *v33;
    *(int32x2_t *)a9.f32 = vadd_s32(*v33, v32);
    v61 = a9.i64[0];
    v62 = v33[1].i32[0] + v31;
    v35 = v34[*((unsigned __int8 *)v14[4] + a3)] + 40 * *((unsigned int *)v14[5] + a3);
    v60[0] = 0;
    v63 = v35;
    if (a4 != 8)
    {
LABEL_3:
      v17 = (int32x2_t *)v14[2];
      v18 = (char *)&unk_224661384 + 12 * a4;
      v19 = *(int32x2_t *)v18;
      LODWORD(v18) = *((_DWORD *)v18 + 2);
      *(int32x2_t *)a10.f32 = *v17;
      *(int32x2_t *)a9.f32 = vadd_s32(*v17, v19);
      v65 = a9.i64[0];
      v66 = v17[1].i32[0] + (_DWORD)v18;
      v20 = v14[3][*((unsigned __int8 *)v14[4] + a4)] + 40 * *((unsigned int *)v14[5] + a4);
      v64 = 0;
      v67 = v20;
      if (a5 != 8)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  v36 = **v14;
  v66 = *((_DWORD *)*v14 + 2);
  v65 = v36;
  v37 = v14[1];
  v64 = 1;
  v67 = (uint64_t)v37;
  if (a5 != 8)
  {
LABEL_4:
    v21 = (int32x2_t *)v14[2];
    v22 = (char *)&unk_224661384 + 12 * a5;
    v23 = *(int32x2_t *)v22;
    LODWORD(v22) = *((_DWORD *)v22 + 2);
    *(int32x2_t *)a10.f32 = *v21;
    *(int32x2_t *)a9.f32 = vadd_s32(*v21, v23);
    v69 = a9.i64[0];
    v70 = v21[1].i32[0] + (_DWORD)v22;
    v24 = v14[3][*((unsigned __int8 *)v14[4] + a5)] + 40 * *((unsigned int *)v14[5] + a5);
    v68 = 0;
    v71 = v24;
    if (a6 != 8)
      goto LABEL_5;
LABEL_10:
    v40 = **v14;
    v74 = *((_DWORD *)*v14 + 2);
    v73 = v40;
    v41 = v14[1];
    v72 = 1;
    v75 = (uint64_t)v41;
    if (!a2)
      return sub_223B49BD0(*(_QWORD *)(a1 + 16), a2, (uint64_t)v60, dword_224662C4C, dword_224662C4C, a7, a8, *(double *)a9.i64, a10, a11, a12, a13, a14);
    goto LABEL_11;
  }
LABEL_9:
  v38 = **v14;
  v70 = *((_DWORD *)*v14 + 2);
  v69 = v38;
  v39 = v14[1];
  v68 = 1;
  v71 = (uint64_t)v39;
  if (a6 == 8)
    goto LABEL_10;
LABEL_5:
  v25 = (int32x2_t *)v14[2];
  v26 = (char *)&unk_224661384 + 12 * a6;
  v27 = *(int32x2_t *)v26;
  LODWORD(v26) = *((_DWORD *)v26 + 2);
  *(int32x2_t *)a10.f32 = *v25;
  *(int32x2_t *)a9.f32 = vadd_s32(*v25, v27);
  v73 = a9.i64[0];
  v74 = v25[1].i32[0] + (_DWORD)v26;
  v28 = v14[3][*((unsigned __int8 *)v14[4] + a6)] + 40 * *((unsigned int *)v14[5] + a6);
  v72 = 0;
  v75 = v28;
  if (!a2)
    return sub_223B49BD0(*(_QWORD *)(a1 + 16), a2, (uint64_t)v60, dword_224662C4C, dword_224662C4C, a7, a8, *(double *)a9.i64, a10, a11, a12, a13, a14);
LABEL_11:
  v42 = *(_QWORD *)(a1 + 8);
  if ((_DWORD)v61 == (_DWORD)v65 && (_DWORD)v61 == (_DWORD)v69 && (_DWORD)v61 == (_DWORD)v73)
  {
    v43 = 0;
  }
  else
  {
    v43 = 2;
    if (HIDWORD(v61) == HIDWORD(v65) && HIDWORD(v61) == HIDWORD(v69))
    {
      if (HIDWORD(v61) == HIDWORD(v73))
        v43 = 1;
      else
        v43 = 2;
    }
  }
  v44 = v42 + 12 * a4;
  a9.i64[0] = *(_QWORD *)v44;
  a9.i32[2] = *(_DWORD *)(v44 + 8);
  v45 = v42 + 12 * a3;
  a10.i64[0] = *(_QWORD *)v45;
  a10.i32[2] = *(_DWORD *)(v45 + 8);
  v46 = vsubq_f32(a9, a10);
  v81 = v46.i32[2];
  v80 = v46.i64[0];
  v47 = v42 + 12 * a5;
  v46.i64[0] = *(_QWORD *)v47;
  v46.i32[2] = *(_DWORD *)(v47 + 8);
  v48 = vsubq_f32(v46, a10);
  v79 = v48.i32[2];
  v78 = v48.i64[0];
  v49 = v42 + 12 * a6;
  v48.i64[0] = *(_QWORD *)v49;
  v48.i32[2] = *(_DWORD *)(v49 + 8);
  v50 = vsubq_f32(v48, a10);
  v77 = v50.i32[2];
  v76 = v50.i64[0];
  v51 = 2 * (v43 == 0);
  v52 = v43 > 1;
  if (v43 <= 1)
    v53 = v43 + 1;
  else
    v53 = 0;
  if (v52)
    v51 = 1;
  v54 = 4 * v53;
  v55 = *(float *)((char *)&v78 + v54);
  v56 = (float *)((unint64_t)&v78 & 0xFFFFFFFFFFFFFFF3 | (4 * (v51 & 3)));
  a10.f32[0] = (float)(v55 * *(float *)((unint64_t)&v80 | (4 * v51)))
             - (float)(*v56 * *(float *)((char *)&v80 + v54));
  a11.f32[0] = *v56 * *(float *)((char *)&v76 + v54);
  a12.i32[0] = *(_DWORD *)((unint64_t)&v76 & 0xFFFFFFFFFFFFFFF3 | (4 * (v51 & 3)));
  if ((float)(a10.f32[0] * (float)(a11.f32[0] - (float)(v55 * a12.f32[0]))) >= 0.0)
  {
    v59 = 0x200000003;
    v57 = &xmmword_224662C58;
  }
  else
  {
    v59 = 0x300000000;
    v57 = &xmmword_224662C70;
  }
  return sub_223B49BD0(*(_QWORD *)(a1 + 16), 1, (uint64_t)v60, (unsigned int *)&v58, (unsigned int *)((unint64_t)&v58 | 0xC), a7, a8, *(double *)v57, a10, a11, a12, a13, a14);
}

uint64_t sub_223B49BD0(uint64_t a1, int a2, uint64_t a3, unsigned int *a4, unsigned int *a5, uint64_t a6, int a7, double a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, int8x8_t a12, int8x8_t a13)
{
  uint64_t v19;
  int v20;
  float v21;
  _QWORD *v22;
  _BYTE *v23;
  _BYTE *v24;
  float v25;
  int32x2_t *v26;
  unint64_t *v27;
  __int32 v28;
  int v29;
  int32x2_t *v30;
  int32x2_t v31;
  unint64_t *v32;
  __int32 v33;
  int v34;
  int32x2_t *v35;
  int32x2_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  _BYTE *v41;
  int32x2_t *v42;
  uint64_t v43;
  int32x2_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int32x2_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  __int32 v54;
  __int32 v55;
  char v56;
  __int8 v57;
  int v58;
  int v59;
  __int8 v60;
  uint64_t v61;
  __int8 *v62;
  uint64_t v63;
  __int8 *v64;
  uint64_t result;
  __int8 v66;
  __int8 *v67;
  uint64_t v68;
  __int8 *v69;
  uint64_t v70;
  __int8 *v71;
  uint64_t v72;
  _QWORD v73[2];
  int32x2_t v74;
  int v75;

  v19 = 0;
  v73[0] = 0;
  v73[1] = 0;
  if (a2)
    v20 = 4;
  else
    v20 = 3;
  if (a7)
    v21 = 0.0;
  else
    v21 = 1.0;
  v22 = (_QWORD *)(a3 + 16);
  do
  {
    while (1)
    {
      v26 = (int32x2_t *)((char *)v22 - 12);
      if (!*((_BYTE *)v22 - 16))
        break;
      *((_DWORD *)v73 + v19++) = sub_223B297D0(**(unint64_t ****)a1, *(uint64_t **)(*(_QWORD *)a1 + 8), (int *)v26, a6, v21);
      v22 += 3;
      if (v20 == (_DWORD)v19)
        goto LABEL_14;
    }
    v24 = (_BYTE *)*v22;
    v22 += 3;
    v23 = v24;
    if (v24[6])
      v25 = 0.0;
    else
      v25 = 1.0;
    *((_DWORD *)v73 + v19++) = sub_223B4A154(*(_QWORD *)(a1 + 8), v26, v23, v25, a9, a10, a11, a12, a13);
  }
  while (v20 != (_DWORD)v19);
LABEL_14:
  v27 = **(unint64_t ***)(a1 + 16);
  v28 = *((_DWORD *)v73 + a4[1]);
  v29 = *((_DWORD *)v73 + a4[2]);
  v74.i32[0] = *((_DWORD *)v73 + *a4);
  v74.i32[1] = v28;
  v75 = v29;
  v30 = (int32x2_t *)v27[15];
  if ((unint64_t)v30 < v27[16])
  {
    v31 = v74;
    v30[1].i32[0] = v75;
    *v30 = v31;
    v27[15] = (unint64_t)&v30[1] + 4;
    if ((a2 & 1) == 0)
      goto LABEL_22;
LABEL_18:
    v32 = **(unint64_t ***)(a1 + 16);
    v33 = *((_DWORD *)v73 + a5[1]);
    v34 = *((_DWORD *)v73 + a5[2]);
    v74.i32[0] = *((_DWORD *)v73 + *a5);
    v74.i32[1] = v33;
    v75 = v34;
    v35 = (int32x2_t *)v32[15];
    if ((unint64_t)v35 >= v32[16])
    {
      v37 = sub_2233B29C0(v32 + 14, (uint64_t *)&v74);
    }
    else
    {
      v36 = v74;
      v35[1].i32[0] = v75;
      *v35 = v36;
      v37 = (unint64_t)&v35[1] + 4;
    }
    v32[15] = v37;
    goto LABEL_22;
  }
  v27[15] = sub_2233B29C0(v27 + 14, (uint64_t *)&v74);
  if ((a2 & 1) != 0)
    goto LABEL_18;
LABEL_22:
  v38 = 0;
  v72 = 0;
  do
  {
    if (*(_BYTE *)(a3 + 24 * v38))
    {
      v39 = -1;
      *((_BYTE *)&v72 + v38 + 4) = -1;
      goto LABEL_24;
    }
    v40 = a3 + 24 * v38;
    v41 = *(_BYTE **)(v40 + 16);
    if (!v41[6])
    {
      *((_BYTE *)&v72 + v38 + 4) = v41[1];
      v39 = v41[2];
      goto LABEL_24;
    }
    v42 = (int32x2_t *)(v40 + 4);
    v43 = **(_QWORD **)(a1 + 32);
    if (!**(_BYTE **)v43
      || (v44 = *(int32x2_t **)(v43 + 8),
          v74 = vsub_s32(*v42, *v44),
          v75 = v42[1].i32[0] - v44[1].i32[0],
          v45 = *(uint64_t **)(v43 + 40),
          v47 = *v45,
          v46 = v45[1],
          v47 == v46))
    {
LABEL_31:
      *((_BYTE *)&v72 + v38 + 4) = -1;
      v48 = **(_QWORD **)(a1 + 40);
      if (!**(_BYTE **)v48)
        goto LABEL_35;
    }
    else
    {
      while (!*(_DWORD *)(*(_QWORD *)(v47 + 24)
                         + 4
                         * (v74.i32[**(unsigned __int8 **)(v43 + 32)]
                                        + **(_DWORD **)(v43 + 16) * v74.i32[**(unsigned __int8 **)(v43 + 24)])))
      {
        v47 += 64;
        if (v47 == v46)
          goto LABEL_31;
      }
      v54 = v42->i32[**(unsigned __int8 **)(v43 + 48)];
      if (v54 == *(_DWORD *)(v47 + 60))
      {
        *((_BYTE *)&v72 + v38 + 4) = 3;
        v48 = **(_QWORD **)(a1 + 40);
        if (!**(_BYTE **)v48)
          goto LABEL_35;
      }
      else
      {
        if (v54 == *(_DWORD *)(v47 + 56))
          v56 = 1;
        else
          v56 = 2;
        *((_BYTE *)&v72 + v38 + 4) = v56;
        v48 = **(_QWORD **)(a1 + 40);
        if (!**(_BYTE **)v48)
          goto LABEL_35;
      }
    }
    v49 = *(int32x2_t **)(v48 + 8);
    v74 = vsub_s32(*v42, *v49);
    v75 = v42[1].i32[0] - v49[1].i32[0];
    v50 = *(uint64_t **)(v48 + 40);
    v52 = *v50;
    v51 = v50[1];
    if (v52 != v51)
    {
      while (!*(_DWORD *)(*(_QWORD *)(v52 + 24)
                         + 4
                         * (v74.i32[**(unsigned __int8 **)(v48 + 32)]
                                        + **(_DWORD **)(v48 + 16) * v74.i32[**(unsigned __int8 **)(v48 + 24)])))
      {
        v52 += 64;
        if (v52 == v51)
          goto LABEL_35;
      }
      v55 = v42->i32[**(unsigned __int8 **)(v48 + 48)];
      if (v55 == *(_DWORD *)(v52 + 60))
      {
        v53 = 3;
      }
      else if (v55 == *(_DWORD *)(v52 + 56))
      {
        v53 = 1;
      }
      else
      {
        v53 = 2;
      }
      goto LABEL_36;
    }
LABEL_35:
    v53 = -1;
LABEL_36:
    if ((v53 - 1) >= 3u)
      v39 = -1;
    else
      v39 = 23;
LABEL_24:
    *((_BYTE *)&v73[-1] + v38++) = v39;
  }
  while (v20 != (_DWORD)v38);
  v57 = BYTE4(v72);
  if (BYTE4(v72) == BYTE5(v72))
  {
    v58 = v72;
    v59 = BYTE1(v72);
    if (v72 == BYTE1(v72))
    {
      v60 = BYTE1(v72);
      v61 = *(_QWORD *)(a1 + 48);
      v74.i8[0] = BYTE4(v72);
      v62 = *(__int8 **)(v61 + 248);
      if ((unint64_t)v62 >= *(_QWORD *)(v61 + 256))
        goto LABEL_56;
LABEL_73:
      *v62 = v57;
      *(_QWORD *)(v61 + 248) = v62 + 1;
      v63 = *(_QWORD *)(a1 + 48);
      v74.i8[0] = v60;
      v64 = *(__int8 **)(v63 + 288);
      if ((unint64_t)v64 < *(_QWORD *)(v63 + 296))
        goto LABEL_74;
LABEL_57:
      result = sub_223984B3C(v63 + 280, &v74);
      *(_QWORD *)(v63 + 288) = result;
      if (!a2)
        return result;
LABEL_75:
      v68 = *(_QWORD *)(a1 + 48);
      v74.i8[0] = v57;
      v69 = *(__int8 **)(v68 + 248);
      if ((unint64_t)v69 >= *(_QWORD *)(v68 + 256))
      {
        *(_QWORD *)(v68 + 248) = sub_223984B3C(v68 + 240, &v74);
        v70 = *(_QWORD *)(a1 + 48);
        v74.i8[0] = v60;
        v71 = *(__int8 **)(v70 + 288);
        if ((unint64_t)v71 < *(_QWORD *)(v70 + 296))
          goto LABEL_79;
LABEL_77:
        result = sub_223984B3C(v70 + 280, &v74);
      }
      else
      {
        *v69 = v57;
        *(_QWORD *)(v68 + 248) = v69 + 1;
        v70 = *(_QWORD *)(a1 + 48);
        v74.i8[0] = v60;
        v71 = *(__int8 **)(v70 + 288);
        if ((unint64_t)v71 >= *(_QWORD *)(v70 + 296))
          goto LABEL_77;
LABEL_79:
        *v71 = v60;
        result = (uint64_t)(v71 + 1);
      }
      *(_QWORD *)(v70 + 288) = result;
      return result;
    }
    v66 = BYTE4(v72);
    if (a2)
    {
LABEL_66:
      if (v58 != BYTE2(v72) && v59 != BYTE2(v72))
      {
        v67 = (char *)&v72 + 3;
        goto LABEL_72;
      }
    }
LABEL_71:
    v67 = (char *)&v72 + 2;
  }
  else
  {
    v66 = BYTE6(v72);
    if (a2)
    {
      if (BYTE4(v72) != BYTE6(v72) && BYTE5(v72) != BYTE6(v72))
        v66 = HIBYTE(v72);
      v58 = v72;
      v59 = BYTE1(v72);
      if (v72 != BYTE1(v72))
        goto LABEL_66;
    }
    else if (v72 != BYTE1(v72))
    {
      goto LABEL_71;
    }
    v67 = (char *)&v72 + 1;
  }
LABEL_72:
  v57 = v66;
  v60 = *v67;
  v61 = *(_QWORD *)(a1 + 48);
  v74.i8[0] = v66;
  v62 = *(__int8 **)(v61 + 248);
  if ((unint64_t)v62 < *(_QWORD *)(v61 + 256))
    goto LABEL_73;
LABEL_56:
  *(_QWORD *)(v61 + 248) = sub_223984B3C(v61 + 240, &v74);
  v63 = *(_QWORD *)(a1 + 48);
  v74.i8[0] = v60;
  v64 = *(__int8 **)(v63 + 288);
  if ((unint64_t)v64 >= *(_QWORD *)(v63 + 296))
    goto LABEL_57;
LABEL_74:
  *v64 = v60;
  result = (uint64_t)(v64 + 1);
  *(_QWORD *)(v63 + 288) = result;
  if (a2)
    goto LABEL_75;
  return result;
}

uint64_t sub_223B4A154(uint64_t a1, int32x2_t *a2, _BYTE *a3, float a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, int8x8_t a8, int8x8_t a9)
{
  unint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned __int32 v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x8_t v20;
  uint64_t v22;
  int32x2_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int32 v29;
  __int32 v30;
  __int32 v31;
  _BOOL4 v32;
  _BOOL4 v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  float32x4_t v38;
  float32x4_t v39;
  uint64_t v40;
  __int32 v41;
  uint64_t v42;
  __int32 v43;
  unsigned __int32 v44;
  int32x2_t v45;

  v11 = *(unint64_t ***)a1;
  v12 = *(uint64_t **)(a1 + 8);
  v13 = *(uint64_t **)(a1 + 16);
  v14 = *v13;
  if (!a3[6])
  {
    *(float32x2_t *)a5.f32 = vcvt_f32_s32(*a2);
    a5.f32[2] = (float)a2[1].i32[0];
    v18.i64[0] = 0x3F0000003F000000;
    v18.i64[1] = 0x3F0000003F000000;
    a8.i8[0] = a3[3];
    v19 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(a8));
    v19.f32[0] = (float)v19.i32[0];
    a9.i8[0] = a3[4];
    v20 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(a9)).u64[0];
    *(float *)v20.i32 = (float)v20.i32[0];
    v19.i32[1] = v20.i32[0];
    v20.i8[0] = a3[5];
    v19.f32[2] = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v20)).i32[0];
    v17 = vmulq_n_f32(vaddq_f32(vaddq_f32(a5, v18), vmulq_f32(v19, (float32x4_t)vdupq_n_s32(0x3B808081u))), *(float *)(v14 + 312));
    goto LABEL_6;
  }
  if (*(_BYTE *)v13[1])
  {
    v15 = a2->i32[0];
LABEL_4:
    a6.i32[0] = v15;
    a6.i32[1] = a2->i32[1];
    *(float32x2_t *)a6.f32 = vcvt_f32_s32(*(int32x2_t *)a6.f32);
    a6.f32[2] = (float)a2[1].i32[0];
    v16.i64[0] = 0x3F0000003F000000;
    v16.i64[1] = 0x3F0000003F000000;
    v17 = vmulq_n_f32(vaddq_f32(a6, v16), *(float *)(v14 + 312));
LABEL_6:
    v41 = v17.i32[2];
    v40 = v17.i64[0];
    return sub_223B297D0(v11, v12, (int *)a2, (uint64_t)&v40, a4);
  }
  v15 = a2->i32[0];
  if (!*(_BYTE *)v13[2])
    goto LABEL_4;
  v22 = v13[3];
  v44 = v15 - *(_DWORD *)v22;
  v23 = *(int32x2_t *)((char *)a2 + 4);
  v45 = vsub_s32(v23, *(int32x2_t *)(v22 + 4));
  v24 = (uint64_t *)v13[7];
  v25 = *v24;
  v26 = v24[1];
  if (v25 == v26)
    goto LABEL_4;
  v27 = *(&v44 + *(unsigned __int8 *)v13[6]) + *(_DWORD *)v13[4] * *(&v44 + *(unsigned __int8 *)v13[5]);
  v28 = *(unsigned __int8 *)v13[9];
  v29 = a2->i32[v28];
  while (1)
  {
    v30 = *(_DWORD *)(v25 + 56);
    v31 = *(_DWORD *)(v25 + 60);
    v32 = v29 <= v31;
    v33 = v29 >= v30;
    if (v31 < v30)
    {
      v33 = v29 <= v30;
      v32 = v29 >= v31;
    }
    v34 = !v32 || !v33;
    if (!v34 && *(_DWORD *)(*(_QWORD *)(v25 + 24) + 4 * v27) == 1)
      break;
    v25 += 64;
    if (v25 == v26)
      goto LABEL_4;
  }
  v35 = *(_QWORD *)v25 + 12 * v27;
  v36 = *(_QWORD *)v35;
  v41 = *(_DWORD *)(v35 + 8);
  v40 = v36;
  if (v29 == v31)
  {
    v37 = *(_DWORD *)(v25 + 48);
LABEL_22:
    *((_DWORD *)&v40 + v28) = v37;
    return sub_223B297D0(v11, v12, (int *)a2, (uint64_t)&v40, a4);
  }
  if (v29 == v30)
  {
    v37 = *(_DWORD *)(v25 + 52);
    goto LABEL_22;
  }
  a7.i32[0] = v15;
  *(float32x2_t *)a7.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)a7.f32, v23));
  a7.f32[2] = (float)v23.i32[1];
  v38.i64[0] = 0x3F0000003F000000;
  v38.i64[1] = 0x3F0000003F000000;
  v39 = vmulq_n_f32(vaddq_f32(a7, v38), *(float *)(v14 + 312));
  v43 = v39.i32[2];
  v42 = v39.i64[0];
  *((_DWORD *)&v40 + v28) = *((_DWORD *)&v42 + v28);
  return sub_223B297D0(v11, v12, (int *)a2, (uint64_t)&v40, a4);
}

uint64_t sub_223B4A3D0()
{
  __int128 *v0;
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  double v5;
  double v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  double v14;
  double v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  double v20;
  double v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  double v26;
  double v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  double v32;
  double v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  double v38;
  double v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  double v44;
  double v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  double v50;
  double v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  double v56;
  double v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  double v62;
  double v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  double v68;
  double v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  double v74;
  double v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  double v80;
  double v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  double v86;
  double v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  double v92;
  double v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  double v98;
  double v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  double v104;
  double v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  double v110;
  double v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  double v116;
  double v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  double v122;
  double v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  double v128;
  double v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  double v134;
  double v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  double v140;
  double v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  double v146;
  double v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  double v152;
  double v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  double v158;
  double v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  double v164;
  double v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  double v170;
  double v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  double v176;
  double v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  double v182;
  double v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  double v188;
  double v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  double v194;
  double v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  double v200;
  double v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  double v206;
  double v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  double v212;
  double v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  double v218;
  double v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  double v224;
  double v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  double v230;
  double v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  double v236;
  double v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  double v242;
  double v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  double v248;
  double v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  double v254;
  double v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  double v260;
  double v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  double v266;
  double v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  double v272;
  double v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  double v278;
  double v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  double v284;
  double v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  double v290;
  double v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  double v296;
  double v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  double v302;
  double v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  double v308;
  double v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  double v314;
  double v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  double v320;
  double v321;
  float32x4_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  double v326;
  double v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  double v332;
  double v333;
  float32x4_t v334;
  float32x4_t v335;
  float32x4_t v336;
  float32x4_t v337;
  double v338;
  double v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  double v344;
  double v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  double v350;
  double v351;
  float32x4_t v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x4_t v355;
  double v356;
  double v357;
  float32x4_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  double v362;
  double v363;
  float32x4_t v364;
  float32x4_t v365;
  float32x4_t v366;
  float32x4_t v367;
  double v368;
  double v369;
  float32x4_t v370;
  float32x4_t v371;
  float32x4_t v372;
  float32x4_t v373;
  double v374;
  double v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t v378;
  float32x4_t v379;
  double v380;
  double v381;
  float32x4_t v382;
  float32x4_t v383;
  float32x4_t v384;
  float32x4_t v385;
  double v386;
  double v387;
  float32x4_t v388;
  float32x4_t v389;
  float32x4_t v390;
  float32x4_t v391;
  double v392;
  double v393;
  float32x4_t v394;
  float32x4_t v395;
  float32x4_t v396;
  float32x4_t v397;
  double v398;
  double v399;
  float32x4_t v400;
  float32x4_t v401;
  float32x4_t v402;
  float32x4_t v403;
  double v404;
  double v405;
  float32x4_t v406;
  float32x4_t v407;
  float32x4_t v408;
  float32x4_t v409;
  double v410;
  double v411;
  float32x4_t v412;
  float32x4_t v413;
  float32x4_t v414;
  float32x4_t v415;
  double v416;
  double v417;
  float32x4_t v418;
  float32x4_t v419;
  float32x4_t v420;
  float32x4_t v421;
  double v422;
  double v423;
  float32x4_t v424;
  float32x4_t v425;
  float32x4_t v426;
  float32x4_t v427;
  double v428;
  double v429;
  float32x4_t v430;
  float32x4_t v431;
  float32x4_t v432;
  float32x4_t v433;
  double v434;
  double v435;
  float32x4_t v436;
  float32x4_t v437;
  float32x4_t v438;
  float32x4_t v439;
  double v440;
  double v441;
  float32x4_t v442;
  float32x4_t v443;
  float32x4_t v444;
  float32x4_t v445;
  double v446;
  double v447;
  float32x4_t v448;
  float32x4_t v449;
  float32x4_t v450;
  float32x4_t v451;
  double v452;
  double v453;
  float32x4_t v454;
  float32x4_t v455;
  float32x4_t v456;
  float32x4_t v457;
  double v458;
  double v459;
  float32x4_t v460;
  float32x4_t v461;
  float32x4_t v462;
  float32x4_t v463;
  double v464;
  double v465;
  float32x4_t v466;
  float32x4_t v467;
  float32x4_t v468;
  float32x4_t v469;
  double v470;
  double v471;
  float32x4_t v472;
  float32x4_t v473;
  float32x4_t v474;
  float32x4_t v475;
  double v476;
  double v477;
  float32x4_t v478;
  float32x4_t v479;
  float32x4_t v480;
  float32x4_t v481;
  double v482;
  double v483;
  float32x4_t v484;
  float32x4_t v485;
  float32x4_t v486;
  float32x4_t v487;
  double v488;
  double v489;
  float32x4_t v490;
  float32x4_t v491;
  float32x4_t v492;
  float32x4_t v493;
  double v494;
  double v495;
  float32x4_t v496;
  float32x4_t v497;
  float32x4_t v498;
  float32x4_t v499;
  double v500;
  double v501;
  float32x4_t v502;
  float32x4_t v503;
  float32x4_t v504;
  float32x4_t v505;
  double v506;
  double v507;
  float32x4_t v508;
  float32x4_t v509;
  float32x4_t v510;
  float32x4_t v511;
  double v512;
  double v513;
  float32x4_t v514;
  float32x4_t v515;
  float32x4_t v516;
  float32x4_t v517;
  double v518;
  double v519;
  float32x4_t v520;
  float32x4_t v521;
  float32x4_t v522;
  float32x4_t v523;
  double v524;
  double v525;
  float32x4_t v526;
  float32x4_t v527;
  float32x4_t v528;
  float32x4_t v529;
  double v530;
  double v531;
  float32x4_t v532;
  float32x4_t v533;
  float32x4_t v534;
  float32x4_t v535;
  double v536;
  double v537;
  float32x4_t v538;
  float32x4_t v539;
  float32x4_t v540;
  float32x4_t v541;
  double v542;
  double v543;
  float32x4_t v544;
  float32x4_t v545;
  float32x4_t v546;
  float32x4_t v547;
  double v548;
  double v549;
  float32x4_t v550;
  float32x4_t v551;
  float32x4_t v552;
  float32x4_t v553;
  double v554;
  double v555;
  float32x4_t v556;
  float32x4_t v557;
  float32x4_t v558;
  float32x4_t v559;
  double v560;
  double v561;
  float32x4_t v562;
  float32x4_t v563;
  float32x4_t v564;
  float32x4_t v565;
  double v566;
  double v567;
  float32x4_t v568;
  float32x4_t v569;
  float32x4_t v570;
  float32x4_t v571;
  double v572;
  double v573;
  float32x4_t v574;
  float32x4_t v575;
  float32x4_t v576;
  float32x4_t v577;
  double v578;
  double v579;
  float32x4_t v580;
  float32x4_t v581;
  float32x4_t v582;
  float32x4_t v583;
  double v584;
  double v585;
  float32x4_t v586;
  float32x4_t v587;
  float32x4_t v588;
  float32x4_t v589;
  double v590;
  double v591;
  float32x4_t v592;
  float32x4_t v593;
  float32x4_t v594;
  float32x4_t v595;
  double v596;
  double v597;
  float32x4_t v598;
  float32x4_t v599;
  float32x4_t v600;
  float32x4_t v601;
  double v602;
  double v603;
  float32x4_t v604;
  float32x4_t v605;
  float32x4_t v606;
  float32x4_t v607;
  double v608;
  double v609;
  float32x4_t v610;
  float32x4_t v611;
  float32x4_t v612;
  float32x4_t v613;
  double v614;
  double v615;
  float32x4_t v616;
  float32x4_t v617;
  float32x4_t v618;
  float32x4_t v619;
  double v620;
  double v621;
  float32x4_t v622;
  float32x4_t v623;
  float32x4_t v624;
  float32x4_t v625;
  double v626;
  double v627;
  float32x4_t v628;
  float32x4_t v629;
  float32x4_t v630;
  float32x4_t v631;
  double v632;
  double v633;
  float32x4_t v634;
  float32x4_t v635;
  float32x4_t v636;
  float32x4_t v637;
  double v638;
  double v639;
  float32x4_t v640;
  float32x4_t v641;
  float32x4_t v642;
  float32x4_t v643;
  double v644;
  double v645;
  float32x4_t v646;
  float32x4_t v647;
  float32x4_t v648;
  float32x4_t v649;
  double v650;
  double v651;
  float32x4_t v652;
  float32x4_t v653;
  float32x4_t v654;
  float32x4_t v655;
  double v656;
  double v657;
  float32x4_t v658;
  float32x4_t v659;
  float32x4_t v660;
  float32x4_t v661;
  double v662;
  double v663;
  float32x4_t v664;
  float32x4_t v665;
  float32x4_t v666;
  float32x4_t v667;
  double v668;
  double v669;
  float32x4_t v670;
  float32x4_t v671;
  float32x4_t v672;
  float32x4_t v673;
  double v674;
  double v675;
  float32x4_t v676;
  float32x4_t v677;
  float32x4_t v678;
  float32x4_t v679;
  double v680;
  double v681;
  float32x4_t v682;
  float32x4_t v683;
  float32x4_t v684;
  float32x4_t v685;
  double v686;
  double v687;
  float32x4_t v688;
  float32x4_t v689;
  float32x4_t v690;
  float32x4_t v691;
  double v692;
  double v693;
  float32x4_t v694;
  float32x4_t v695;
  float32x4_t v696;
  float32x4_t v697;
  double v698;
  double v699;
  float32x4_t v700;
  float32x4_t v701;
  float32x4_t v702;
  float32x4_t v703;
  double v704;
  double v705;
  float32x4_t v706;
  float32x4_t v707;
  float32x4_t v708;
  float32x4_t v709;
  double v710;
  double v711;
  float32x4_t v712;
  float32x4_t v713;
  float32x4_t v714;
  float32x4_t v715;
  double v716;
  double v717;
  float32x4_t v718;
  float32x4_t v719;
  float32x4_t v720;
  float32x4_t v721;
  double v722;
  double v723;
  float32x4_t v724;
  float32x4_t v725;
  float32x4_t v726;
  float32x4_t v727;
  double v728;
  double v729;
  float32x4_t v730;
  float32x4_t v731;
  float32x4_t v732;
  float32x4_t v733;
  double v734;
  double v735;
  float32x4_t v736;
  float32x4_t v737;
  float32x4_t v738;
  float32x4_t v739;
  double v740;
  double v741;
  float32x4_t v742;
  float32x4_t v743;
  float32x4_t v744;
  float32x4_t v745;
  double v746;
  double v747;
  float32x4_t v748;
  float32x4_t v749;
  float32x4_t v750;
  float32x4_t v751;
  double v752;
  double v753;
  float32x4_t v754;
  float32x4_t v755;
  float32x4_t v756;
  float32x4_t v757;
  double v758;
  double v759;
  float32x4_t v760;
  float32x4_t v761;
  float32x4_t v762;
  float32x4_t v763;
  double v764;
  double v765;
  float32x4_t v766;
  float32x4_t v767;
  float32x4_t v768;
  float32x4_t v769;
  double v770;
  double v771;
  float32x4_t v772;
  float32x4_t v773;
  float32x4_t v774;
  float32x4_t v775;
  double v776;
  double v777;
  float32x4_t v778;
  float32x4_t v779;
  float32x4_t v780;
  float32x4_t v781;
  double v782;
  double v783;
  float32x4_t v784;
  float32x4_t v785;
  float32x4_t v786;
  float32x4_t v787;
  double v788;
  double v789;
  float32x4_t v790;
  float32x4_t v791;
  float32x4_t v792;
  float32x4_t v793;
  double v794;
  double v795;
  float32x4_t v796;
  float32x4_t v797;
  float32x4_t v798;
  float32x4_t v799;
  double v800;
  double v801;
  float32x4_t v802;
  float32x4_t v803;
  float32x4_t v804;
  float32x4_t v805;
  double v806;
  double v807;
  float32x4_t v808;
  float32x4_t v809;
  float32x4_t v810;
  float32x4_t v811;
  double v812;
  double v813;
  float32x4_t v814;
  float32x4_t v815;
  float32x4_t v816;
  float32x4_t v817;
  double v818;
  double v819;
  float32x4_t v820;
  float32x4_t v821;
  float32x4_t v822;
  float32x4_t v823;
  double v824;
  double v825;
  float32x4_t v826;
  float32x4_t v827;
  float32x4_t v828;
  float32x4_t v829;
  double v830;
  double v831;
  float32x4_t v832;
  float32x4_t v833;
  float32x4_t v834;
  float32x4_t v835;
  double v836;
  double v837;
  float32x4_t v838;
  float32x4_t v839;
  float32x4_t v840;
  float32x4_t v841;
  double v842;
  double v843;
  float32x4_t v844;
  float32x4_t v845;
  float32x4_t v846;
  float32x4_t v847;
  double v848;
  double v849;
  float32x4_t v850;
  float32x4_t v851;
  float32x4_t v852;
  float32x4_t v853;
  double v854;
  double v855;
  float32x4_t v856;
  float32x4_t v857;
  float32x4_t v858;
  float32x4_t v859;
  double v860;
  double v861;
  float32x4_t v862;
  float32x4_t v863;
  float32x4_t v864;
  float32x4_t v865;
  double v866;
  double v867;
  float32x4_t v868;
  float32x4_t v869;
  float32x4_t v870;
  float32x4_t v871;
  double v872;
  double v873;
  float32x4_t v874;
  float32x4_t v875;
  float32x4_t v876;
  float32x4_t v877;
  double v878;
  double v879;
  float32x4_t v880;
  float32x4_t v881;
  float32x4_t v882;
  float32x4_t v883;
  double v884;
  double v885;
  float32x4_t v886;
  float32x4_t v887;
  float32x4_t v888;
  float32x4_t v889;
  double v890;
  double v891;
  float32x4_t v892;
  float32x4_t v893;
  float32x4_t v894;
  float32x4_t v895;
  double v896;
  double v897;
  float32x4_t v898;
  float32x4_t v899;
  float32x4_t v900;
  float32x4_t v901;
  double v902;
  double v903;
  float32x4_t v904;
  float32x4_t v905;
  float32x4_t v906;
  float32x4_t v907;
  double v908;
  double v909;
  float32x4_t v910;
  float32x4_t v911;
  float32x4_t v912;
  float32x4_t v913;
  double v914;
  double v915;
  float32x4_t v916;
  float32x4_t v917;
  float32x4_t v918;
  float32x4_t v919;
  double v920;
  double v921;
  float32x4_t v922;
  float32x4_t v923;
  float32x4_t v924;
  float32x4_t v925;
  double v926;
  double v927;
  float32x4_t v928;
  float32x4_t v929;
  float32x4_t v930;
  float32x4_t v931;
  double v932;
  double v933;
  float32x4_t v934;
  float32x4_t v935;
  float32x4_t v936;
  float32x4_t v937;
  double v938;
  double v939;
  float32x4_t v940;
  float32x4_t v941;
  float32x4_t v942;
  float32x4_t v943;
  double v944;
  double v945;
  float32x4_t v946;
  float32x4_t v947;
  float32x4_t v948;
  float32x4_t v949;
  double v950;
  double v951;
  float32x4_t v952;
  float32x4_t v953;
  float32x4_t v954;
  float32x4_t v955;
  double v956;
  double v957;
  float32x4_t v958;
  float32x4_t v959;
  float32x4_t v960;
  float32x4_t v961;
  double v962;
  double v963;
  float32x4_t v964;
  float32x4_t v965;
  float32x4_t v966;
  float32x4_t v967;
  double v968;
  double v969;
  float32x4_t v970;
  float32x4_t v971;
  float32x4_t v972;
  float32x4_t v973;
  double v974;
  double v975;
  float32x4_t v976;
  float32x4_t v977;
  float32x4_t v978;
  float32x4_t v979;
  double v980;
  double v981;
  float32x4_t v982;
  float32x4_t v983;
  float32x4_t v984;
  float32x4_t v985;
  double v986;
  double v987;
  float32x4_t v988;
  float32x4_t v989;
  float32x4_t v990;
  float32x4_t v991;
  double v992;
  double v993;
  float32x4_t v994;
  float32x4_t v995;
  float32x4_t v996;
  float32x4_t v997;
  double v998;
  double v999;
  float32x4_t v1000;
  float32x4_t v1001;
  float32x4_t v1002;
  float32x4_t v1003;
  double v1004;
  double v1005;
  float32x4_t v1006;
  float32x4_t v1007;
  float32x4_t v1008;
  float32x4_t v1009;
  double v1010;
  double v1011;
  float32x4_t v1012;
  float32x4_t v1013;
  float32x4_t v1014;
  float32x4_t v1015;
  double v1016;
  double v1017;
  float32x4_t v1018;
  float32x4_t v1019;
  float32x4_t v1020;
  float32x4_t v1021;
  double v1022;
  double v1023;
  float32x4_t v1024;
  float32x4_t v1025;
  float32x4_t v1026;
  float32x4_t v1027;
  double v1028;
  double v1029;
  float32x4_t v1030;
  float32x4_t v1031;
  float32x4_t v1032;
  float32x4_t v1033;
  double v1034;
  double v1035;
  float32x4_t v1036;
  float32x4_t v1037;
  float32x4_t v1038;
  float32x4_t v1039;
  double v1040;
  double v1041;
  float32x4_t v1042;
  float32x4_t v1043;
  float32x4_t v1044;
  float32x4_t v1045;
  double v1046;
  double v1047;
  __int128 v1049;
  __int128 v1050;
  __int128 v1051;
  __int128 v1052;
  __int128 v1053;
  __int128 v1054;
  __int128 v1055;
  _OWORD v1056[2];
  _OWORD v1057[7];
  _OWORD v1058[2];
  _OWORD v1059[7];
  _OWORD v1060[2];
  _OWORD v1061[7];
  _OWORD v1062[2];
  _OWORD v1063[7];
  _OWORD v1064[2];
  _OWORD v1065[7];
  _OWORD v1066[2];
  __int128 v1067;
  __int128 v1068;
  __int128 v1069;
  __int128 v1070;
  __int128 v1071;
  __int128 v1072;
  __int128 v1073;
  _OWORD v1074[2];
  _OWORD v1075[7];
  _OWORD v1076[2];
  _OWORD v1077[7];
  _OWORD v1078[2];
  _OWORD v1079[7];
  _OWORD v1080[2];
  _OWORD v1081[7];
  _OWORD v1082[2];
  _OWORD v1083[7];
  _OWORD v1084[2];
  __int128 v1085;
  __int128 v1086;
  __int128 v1087;
  __int128 v1088;
  __int128 v1089;
  __int128 v1090;
  __int128 v1091;
  _OWORD v1092[2];
  _OWORD v1093[7];
  _OWORD v1094[2];
  _OWORD v1095[7];
  _OWORD v1096[2];
  _OWORD v1097[7];
  _OWORD v1098[2];
  _OWORD v1099[7];
  _OWORD v1100[2];
  _OWORD v1101[7];
  _OWORD v1102[2];
  __int128 v1103;
  __int128 v1104;
  __int128 v1105;
  __int128 v1106;
  __int128 v1107;
  __int128 v1108;
  __int128 v1109;
  _OWORD v1110[2];
  _OWORD v1111[7];
  _OWORD v1112[2];
  _OWORD v1113[7];
  _OWORD v1114[2];
  _OWORD v1115[7];
  _OWORD v1116[2];
  _OWORD v1117[7];
  _OWORD v1118[2];
  _OWORD v1119[7];
  _OWORD v1120[2];
  __int128 v1121;
  __int128 v1122;
  __int128 v1123;
  __int128 v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  _OWORD v1128[2];
  _OWORD v1129[7];
  _OWORD v1130[2];
  _OWORD v1131[7];
  _OWORD v1132[2];
  _OWORD v1133[7];
  _OWORD v1134[2];
  _OWORD v1135[7];
  _OWORD v1136[2];
  _OWORD v1137[7];
  _OWORD v1138[2];
  __int128 v1139;
  __int128 v1140;
  __int128 v1141;
  __int128 v1142;
  __int128 v1143;
  __int128 v1144;
  __int128 v1145;
  _OWORD v1146[2];
  _OWORD v1147[7];
  _OWORD v1148[2];
  _OWORD v1149[7];
  _OWORD v1150[2];
  _OWORD v1151[7];
  _OWORD v1152[2];
  _OWORD v1153[7];
  _OWORD v1154[2];
  _OWORD v1155[7];
  _OWORD v1156[2];
  __int128 v1157;
  __int128 v1158;
  __int128 v1159;
  __int128 v1160;
  __int128 v1161;
  __int128 v1162;
  __int128 v1163;
  _OWORD v1164[2];
  _OWORD v1165[7];
  _OWORD v1166[2];
  _OWORD v1167[7];
  _OWORD v1168[2];
  _OWORD v1169[7];
  _OWORD v1170[2];
  _OWORD v1171[7];
  _OWORD v1172[2];
  _OWORD v1173[7];
  _OWORD v1174[2];
  __int128 v1175;
  __int128 v1176;
  __int128 v1177;
  __int128 v1178;
  __int128 v1179;
  __int128 v1180;
  __int128 v1181;
  _OWORD v1182[2];
  _OWORD v1183[7];
  _OWORD v1184[2];
  _OWORD v1185[7];
  _OWORD v1186[2];
  _OWORD v1187[7];
  _OWORD v1188[2];
  _OWORD v1189[7];
  _OWORD v1190[2];
  _OWORD v1191[7];
  _OWORD v1192[2];
  __int128 v1193;
  __int128 v1194;
  __int128 v1195;
  __int128 v1196;
  __int128 v1197;
  __int128 v1198;
  __int128 v1199;
  _OWORD v1200[2];
  _OWORD v1201[7];
  _OWORD v1202[2];
  _OWORD v1203[7];
  _OWORD v1204[2];
  _OWORD v1205[7];
  _OWORD v1206[2];
  _OWORD v1207[7];
  _OWORD v1208[2];
  _OWORD v1209[7];
  _OWORD v1210[2];
  __int128 v1211;
  __int128 v1212;
  __int128 v1213;
  __int128 v1214;
  __int128 v1215;
  __int128 v1216;
  __int128 v1217;
  _OWORD v1218[2];
  _OWORD v1219[7];
  _OWORD v1220[2];
  _OWORD v1221[7];
  _OWORD v1222[2];
  _OWORD v1223[7];
  _OWORD v1224[2];
  _OWORD v1225[7];
  _OWORD v1226[2];
  _OWORD v1227[7];
  _OWORD v1228[2];
  __int128 v1229;
  __int128 v1230;
  __int128 v1231;
  __int128 v1232;
  __int128 v1233;
  __int128 v1234;
  __int128 v1235;
  _OWORD v1236[2];
  _OWORD v1237[7];
  _OWORD v1238[2];
  _OWORD v1239[7];
  _OWORD v1240[2];
  _OWORD v1241[7];
  _OWORD v1242[2];
  _OWORD v1243[7];
  _OWORD v1244[2];
  _OWORD v1245[7];
  _OWORD v1246[2];
  __int128 v1247;
  __int128 v1248;
  __int128 v1249;
  __int128 v1250;
  __int128 v1251;
  __int128 v1252;
  __int128 v1253;
  _OWORD v1254[2];
  _OWORD v1255[7];
  _OWORD v1256[2];
  _OWORD v1257[7];
  _OWORD v1258[2];
  _OWORD v1259[7];
  _OWORD v1260[2];
  _OWORD v1261[7];
  _OWORD v1262[2];
  _OWORD v1263[7];
  _OWORD v1264[2];
  __int128 v1265;
  __int128 v1266;
  __int128 v1267;
  __int128 v1268;
  __int128 v1269;
  __int128 v1270;
  __int128 v1271;
  _OWORD v1272[2];
  _OWORD v1273[7];
  _OWORD v1274[2];
  _OWORD v1275[7];
  _OWORD v1276[2];
  _OWORD v1277[7];
  _OWORD v1278[2];
  _OWORD v1279[7];
  _OWORD v1280[2];
  _OWORD v1281[7];
  _OWORD v1282[2];
  __int128 v1283;
  __int128 v1284;
  __int128 v1285;
  __int128 v1286;
  __int128 v1287;
  __int128 v1288;
  __int128 v1289;
  _OWORD v1290[2];
  _OWORD v1291[7];
  _OWORD v1292[2];
  _OWORD v1293[7];
  _OWORD v1294[2];
  _OWORD v1295[7];
  _OWORD v1296[2];
  _OWORD v1297[7];
  _OWORD v1298[2];
  _OWORD v1299[7];
  _OWORD v1300[2];
  __int128 v1301;
  __int128 v1302;
  __int128 v1303;
  __int128 v1304;
  __int128 v1305;
  __int128 v1306;
  __int128 v1307;
  _OWORD v1308[2];
  _OWORD v1309[7];
  _OWORD v1310[2];
  _OWORD v1311[7];
  _OWORD v1312[2];
  _OWORD v1313[7];
  _OWORD v1314[2];
  _OWORD v1315[7];
  _OWORD v1316[2];
  _OWORD v1317[7];
  _OWORD v1318[2];
  __int128 v1319;
  __int128 v1320;
  __int128 v1321;
  __int128 v1322;
  __int128 v1323;
  __int128 v1324;
  __int128 v1325;
  _OWORD v1326[2];
  _OWORD v1327[7];
  _OWORD v1328[2];
  _OWORD v1329[7];
  _OWORD v1330[2];
  _OWORD v1331[7];
  _OWORD v1332[2];
  _OWORD v1333[7];
  _OWORD v1334[2];
  _OWORD v1335[7];
  _OWORD v1336[2];
  __int128 v1337;
  __int128 v1338;
  __int128 v1339;
  __int128 v1340;
  __int128 v1341;
  __int128 v1342;
  __int128 v1343;
  _OWORD v1344[2];
  _OWORD v1345[7];
  _OWORD v1346[2];
  _OWORD v1347[7];
  _OWORD v1348[2];
  _OWORD v1349[7];
  _OWORD v1350[2];
  _OWORD v1351[7];
  _OWORD v1352[2];
  _OWORD v1353[7];
  _OWORD v1354[2];
  __int128 v1355;
  __int128 v1356;
  __int128 v1357;
  __int128 v1358;
  __int128 v1359;
  __int128 v1360;
  __int128 v1361;
  _OWORD v1362[2];
  _OWORD v1363[7];
  _OWORD v1364[2];
  _OWORD v1365[7];
  _OWORD v1366[2];
  _OWORD v1367[7];
  _OWORD v1368[2];
  _OWORD v1369[7];
  _OWORD v1370[2];
  _OWORD v1371[7];
  _OWORD v1372[2];
  __int128 v1373;
  __int128 v1374;
  __int128 v1375;
  __int128 v1376;
  __int128 v1377;
  __int128 v1378;
  __int128 v1379;
  _OWORD v1380[2];
  _OWORD v1381[7];
  _OWORD v1382[2];
  _OWORD v1383[7];
  _OWORD v1384[2];
  _OWORD v1385[7];
  _OWORD v1386[2];
  _OWORD v1387[7];
  _OWORD v1388[2];
  _OWORD v1389[7];
  _OWORD v1390[2];
  __int128 v1391;
  __int128 v1392;
  __int128 v1393;
  __int128 v1394;
  __int128 v1395;
  __int128 v1396;
  __int128 v1397;
  _OWORD v1398[2];
  _OWORD v1399[7];
  _OWORD v1400[2];
  _OWORD v1401[7];
  _OWORD v1402[2];
  _OWORD v1403[7];
  _OWORD v1404[2];
  _OWORD v1405[7];
  _OWORD v1406[2];
  _OWORD v1407[7];
  _OWORD v1408[2];
  __int128 v1409;
  __int128 v1410;
  __int128 v1411;
  __int128 v1412;
  __int128 v1413;
  __int128 v1414;
  __int128 v1415;
  _OWORD v1416[2];
  _OWORD v1417[7];
  _OWORD v1418[2];
  _OWORD v1419[7];
  _OWORD v1420[2];
  _OWORD v1421[7];
  _OWORD v1422[2];
  _OWORD v1423[7];
  _OWORD v1424[2];
  _OWORD v1425[7];
  _OWORD v1426[2];
  __int128 v1427;
  __int128 v1428;
  __int128 v1429;
  __int128 v1430;
  __int128 v1431;
  __int128 v1432;
  __int128 v1433;
  _OWORD v1434[2];
  _OWORD v1435[7];
  _OWORD v1436[2];
  _OWORD v1437[7];
  _OWORD v1438[2];
  _OWORD v1439[7];
  _OWORD v1440[2];
  _OWORD v1441[7];
  _OWORD v1442[2];
  _OWORD v1443[7];
  _OWORD v1444[2];
  __int128 v1445;
  __int128 v1446;
  __int128 v1447;
  __int128 v1448;
  __int128 v1449;
  __int128 v1450;
  __int128 v1451;
  _OWORD v1452[2];
  _OWORD v1453[7];
  _OWORD v1454[2];
  _OWORD v1455[7];
  _OWORD v1456[2];
  _OWORD v1457[7];
  _OWORD v1458[2];
  _OWORD v1459[7];
  _OWORD v1460[2];
  _OWORD v1461[7];
  _OWORD v1462[2];
  __int128 v1463;
  __int128 v1464;
  __int128 v1465;
  __int128 v1466;
  __int128 v1467;
  __int128 v1468;
  __int128 v1469;
  _OWORD v1470[2];
  _OWORD v1471[7];
  _OWORD v1472[2];
  _OWORD v1473[7];
  _OWORD v1474[2];
  _OWORD v1475[7];
  _OWORD v1476[2];
  _OWORD v1477[7];
  _OWORD v1478[2];
  _OWORD v1479[7];
  _OWORD v1480[2];
  __int128 v1481;
  __int128 v1482;
  __int128 v1483;
  __int128 v1484;
  __int128 v1485;
  __int128 v1486;
  __int128 v1487;
  _OWORD v1488[2];
  _OWORD v1489[7];
  _OWORD v1490[2];
  _OWORD v1491[7];
  _OWORD v1492[2];
  _OWORD v1493[7];
  _OWORD v1494[2];
  _OWORD v1495[7];
  _OWORD v1496[2];
  _OWORD v1497[7];
  _OWORD v1498[2];
  __int128 v1499;
  __int128 v1500;
  __int128 v1501;
  __int128 v1502;
  __int128 v1503;
  __int128 v1504;
  __int128 v1505;
  _OWORD v1506[2];
  _OWORD v1507[7];
  _OWORD v1508[2];
  _OWORD v1509[7];
  _OWORD v1510[2];
  _OWORD v1511[7];
  _OWORD v1512[2];
  _OWORD v1513[7];
  _OWORD v1514[2];
  _OWORD v1515[7];
  _OWORD v1516[2];
  __int128 v1517;
  __int128 v1518;
  __int128 v1519;
  __int128 v1520;
  __int128 v1521;
  __int128 v1522;
  __int128 v1523;
  _OWORD v1524[2];
  _OWORD v1525[7];
  _OWORD v1526[2];
  _OWORD v1527[7];
  _OWORD v1528[2];
  _OWORD v1529[7];
  _OWORD v1530[2];
  _OWORD v1531[7];
  _OWORD v1532[2];
  _OWORD v1533[7];
  _OWORD v1534[2];
  _OWORD v1535[7];
  _OWORD v1536[2];
  _OWORD v1537[7];
  _OWORD v1538[2];
  _OWORD v1539[7];
  _OWORD v1540[2];
  _OWORD v1541[7];
  _OWORD v1542[2];
  _OWORD v1543[7];
  _OWORD v1544[2];
  _OWORD v1545[7];
  _OWORD v1546[2];
  _OWORD v1547[7];
  _OWORD v1548[2];
  _OWORD v1549[7];
  _OWORD v1550[2];
  _OWORD v1551[7];
  _OWORD v1552[2];
  _OWORD v1553[7];
  _OWORD v1554[2];
  _OWORD v1555[7];
  _OWORD v1556[9];
  _OWORD v1557[2];
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  uint64_t v1611;
  uint64_t v1612;
  uint64_t v1613;
  uint64_t v1614;
  uint64_t v1615;
  uint64_t v1616;
  uint64_t v1617;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t v1715;
  uint64_t v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  uint64_t v1723;
  uint64_t v1724;
  uint64_t v1725;
  uint64_t v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  _QWORD v1731[2];

  v0 = (__int128 *)MEMORY[0x24BDAC7A8]();
  v1731[1] = *MEMORY[0x24BDAC8D0];
  v1558 = 0;
  v1056[0] = xmmword_2246640E8;
  v1056[1] = *(_OWORD *)dbl_2246640F8;
  sub_223B46FEC((uint64_t)v0, 3, 4, 0, (uint64_t)&v1558, (uint64_t)v1056, COERCE_DOUBLE(0xA5000000A4), COERCE_DOUBLE(0x18100000180), v1, v2, v3, v4, v5, v6);
  v7 = v0[5];
  v1053 = v0[4];
  v1054 = v7;
  v1055 = v0[6];
  v8 = v0[1];
  v1049 = *v0;
  v1050 = v8;
  v9 = v0[3];
  v1051 = v0[2];
  v1052 = v9;
  v1559 = 0;
  v1058[0] = xmmword_224664108;
  v1058[1] = *(_OWORD *)dbl_224664118;
  sub_223B46FEC((uint64_t)&v1049, 3, 4, 1, (uint64_t)&v1559, (uint64_t)v1058, COERCE_DOUBLE(0xAC000000A5), COERCE_DOUBLE(0x18800000181), v10, v11, v12, v13, v14, v15);
  v1057[4] = v1053;
  v1057[5] = v1054;
  v1057[6] = v1055;
  v1057[0] = v1049;
  v1057[1] = v1050;
  v1057[2] = v1051;
  v1057[3] = v1052;
  v1560 = 0;
  v1060[0] = xmmword_224664128;
  v1060[1] = *(_OWORD *)dbl_224664138;
  sub_223B46FEC((uint64_t)v1057, 3, 5, 0, (uint64_t)&v1560, (uint64_t)v1060, COERCE_DOUBLE(0xA7000000A6), COERCE_DOUBLE(0x18300000182), v16, v17, v18, v19, v20, v21);
  v1059[4] = v1053;
  v1059[5] = v1054;
  v1059[6] = v1055;
  v1059[0] = v1049;
  v1059[1] = v1050;
  v1059[2] = v1051;
  v1059[3] = v1052;
  v1561 = 0;
  v1062[0] = xmmword_224664148;
  v1062[1] = *(_OWORD *)dbl_224664158;
  sub_223B46FEC((uint64_t)v1059, 3, 5, 1, (uint64_t)&v1561, (uint64_t)v1062, COERCE_DOUBLE(0xAE000000A7), COERCE_DOUBLE(0x18A00000183), v22, v23, v24, v25, v26, v27);
  v1061[4] = v1053;
  v1061[5] = v1054;
  v1061[6] = v1055;
  v1061[0] = v1049;
  v1061[1] = v1050;
  v1061[2] = v1051;
  v1061[3] = v1052;
  v1562 = 0;
  v1064[0] = xmmword_224664168;
  v1064[1] = *(_OWORD *)dbl_224664178;
  sub_223B46FEC((uint64_t)v1061, 2, 4, 2, (uint64_t)&v1562, (uint64_t)v1064, COERCE_DOUBLE(0xA9000000A8), COERCE_DOUBLE(0xAD000000ACLL), v28, v29, v30, v31, v32, v33);
  v1063[4] = v1053;
  v1063[5] = v1054;
  v1063[6] = v1055;
  v1063[0] = v1049;
  v1063[1] = v1050;
  v1063[2] = v1051;
  v1063[3] = v1052;
  v1563 = 0;
  v1066[0] = xmmword_224664188;
  v1066[1] = *(_OWORD *)dbl_224664198;
  sub_223B46FEC((uint64_t)v1063, 2, 4, 3, (uint64_t)&v1563, (uint64_t)v1066, COERCE_DOUBLE(0xE0000000A9), COERCE_DOUBLE(0xE4000000ADLL), v34, v35, v36, v37, v38, v39);
  v1065[4] = v1053;
  v1065[5] = v1054;
  v1065[6] = v1055;
  v1065[0] = v1049;
  v1065[1] = v1050;
  v1065[2] = v1051;
  v1065[3] = v1052;
  v1564 = 0;
  v1074[0] = xmmword_2246641A8;
  v1074[1] = *(_OWORD *)dbl_2246641B8;
  sub_223B46FEC((uint64_t)v1065, 2, 5, 2, (uint64_t)&v1564, (uint64_t)v1074, COERCE_DOUBLE(0xAB000000AALL), COERCE_DOUBLE(0xAF000000AELL), v40, v41, v42, v43, v44, v45);
  v1071 = v1053;
  v1072 = v1054;
  v1073 = v1055;
  v1067 = v1049;
  v1068 = v1050;
  v1069 = v1051;
  v1070 = v1052;
  v1565 = 0;
  v1076[0] = xmmword_2246641C8;
  v1076[1] = *(_OWORD *)dbl_2246641D8;
  sub_223B46FEC((uint64_t)&v1067, 2, 5, 3, (uint64_t)&v1565, (uint64_t)v1076, COERCE_DOUBLE(0xE2000000ABLL), COERCE_DOUBLE(0xE6000000AFLL), v46, v47, v48, v49, v50, v51);
  v1075[4] = v1053;
  v1075[5] = v1054;
  v1075[6] = v1055;
  v1075[0] = v1049;
  v1075[1] = v1050;
  v1075[3] = v1052;
  v1075[2] = v1051;
  v1566 = 0;
  v1078[0] = xmmword_2246641E8;
  v1078[1] = *(_OWORD *)dbl_2246641F8;
  sub_223B46FEC((uint64_t)v1075, 3, 4, 2, (uint64_t)&v1566, (uint64_t)v1078, COERCE_DOUBLE(0xAD000000ACLL), COERCE_DOUBLE(0x18900000188), v52, v53, v54, v55, v56, v57);
  v1077[4] = v1053;
  v1077[5] = v1054;
  v1077[6] = v1055;
  v1077[0] = v1049;
  v1077[1] = v1050;
  v1077[3] = v1052;
  v1077[2] = v1051;
  v1567 = 0;
  v1080[0] = xmmword_224664208;
  v1080[1] = *(_OWORD *)dbl_224664218;
  sub_223B46FEC((uint64_t)v1077, 3, 4, 3, (uint64_t)&v1567, (uint64_t)v1080, COERCE_DOUBLE(0xE4000000ADLL), COERCE_DOUBLE(0x1C000000189), v58, v59, v60, v61, v62, v63);
  v1079[4] = v1053;
  v1079[5] = v1054;
  v1079[6] = v1055;
  v1079[0] = v1049;
  v1079[1] = v1050;
  v1079[3] = v1052;
  v1079[2] = v1051;
  v1568 = 0;
  v1082[0] = xmmword_224664228;
  v1082[1] = *(_OWORD *)dbl_224664238;
  sub_223B46FEC((uint64_t)v1079, 3, 5, 2, (uint64_t)&v1568, (uint64_t)v1082, COERCE_DOUBLE(0xAF000000AELL), COERCE_DOUBLE(0x18B0000018ALL), v64, v65, v66, v67, v68, v69);
  v1081[4] = v1053;
  v1081[5] = v1054;
  v1081[6] = v1055;
  v1081[0] = v1049;
  v1081[1] = v1050;
  v1081[3] = v1052;
  v1081[2] = v1051;
  v1569 = 0;
  v1084[0] = xmmword_224664248;
  v1084[1] = *(_OWORD *)dbl_224664258;
  sub_223B46FEC((uint64_t)v1081, 3, 5, 3, (uint64_t)&v1569, (uint64_t)v1084, COERCE_DOUBLE(0xE6000000AFLL), COERCE_DOUBLE(0x1C20000018BLL), v70, v71, v72, v73, v74, v75);
  v1083[4] = v1053;
  v1083[5] = v1054;
  v1083[6] = v1055;
  v1083[0] = v1049;
  v1083[1] = v1050;
  v1083[3] = v1052;
  v1083[2] = v1051;
  v1570 = 0;
  v1092[0] = xmmword_224664268;
  v1092[1] = *(_OWORD *)dbl_224664278;
  sub_223B46FEC((uint64_t)v1083, 2, 6, 0, (uint64_t)&v1570, (uint64_t)v1092, COERCE_DOUBLE(0xB1000000B0), COERCE_DOUBLE(0xB5000000B4), v76, v77, v78, v79, v80, v81);
  v1089 = v1053;
  v1090 = v1054;
  v1091 = v1055;
  v1085 = v1049;
  v1086 = v1050;
  v1088 = v1052;
  v1087 = v1051;
  v1571 = 0;
  v1094[0] = xmmword_224664288;
  v1094[1] = *(_OWORD *)dbl_224664298;
  sub_223B46FEC((uint64_t)&v1085, 2, 6, 1, (uint64_t)&v1571, (uint64_t)v1094, COERCE_DOUBLE(0xB8000000B1), COERCE_DOUBLE(0xBC000000B5), v82, v83, v84, v85, v86, v87);
  v1093[4] = v1053;
  v1093[5] = v1054;
  v1093[6] = v1055;
  v1093[0] = v1049;
  v1093[1] = v1050;
  v1093[3] = v1052;
  v1093[2] = v1051;
  v1572 = 0x202000002020000;
  v1096[0] = xmmword_2246642A8;
  v1096[1] = *(_OWORD *)dbl_2246642B8;
  sub_223B46FEC((uint64_t)v1093, 2, 7, 0, (uint64_t)&v1572, (uint64_t)v1096, COERCE_DOUBLE(0xB3000000B2), COERCE_DOUBLE(0xB7000000B6), v88, v89, v90, v91, v92, v93);
  v1095[4] = v1053;
  v1095[5] = v1054;
  v1095[6] = v1055;
  v1095[0] = v1049;
  v1095[1] = v1050;
  v1095[3] = v1052;
  v1095[2] = v1051;
  v1573 = 0x202000002020000;
  v1098[0] = xmmword_2246642C8;
  v1098[1] = *(_OWORD *)dbl_2246642D8;
  sub_223B46FEC((uint64_t)v1095, 2, 7, 1, (uint64_t)&v1573, (uint64_t)v1098, COERCE_DOUBLE(0xBA000000B3), COERCE_DOUBLE(0xBE000000B7), v94, v95, v96, v97, v98, v99);
  v1097[4] = v1053;
  v1097[5] = v1054;
  v1097[6] = v1055;
  v1097[0] = v1049;
  v1097[1] = v1050;
  v1097[3] = v1052;
  v1097[2] = v1051;
  v1574 = 0;
  v1100[0] = xmmword_2246642E8;
  v1100[1] = *(_OWORD *)dbl_2246642F8;
  sub_223B46FEC((uint64_t)v1097, 3, 6, 0, (uint64_t)&v1574, (uint64_t)v1100, COERCE_DOUBLE(0xB5000000B4), COERCE_DOUBLE(0x19100000190), v100, v101, v102, v103, v104, v105);
  v1099[4] = v1053;
  v1099[5] = v1054;
  v1099[6] = v1055;
  v1099[0] = v1049;
  v1099[1] = v1050;
  v1099[3] = v1052;
  v1099[2] = v1051;
  v1575 = 0;
  v1102[0] = xmmword_224664308;
  v1102[1] = *(_OWORD *)dbl_224664318;
  sub_223B46FEC((uint64_t)v1099, 3, 6, 1, (uint64_t)&v1575, (uint64_t)v1102, COERCE_DOUBLE(0xBC000000B5), COERCE_DOUBLE(0x19800000191), v106, v107, v108, v109, v110, v111);
  v1101[4] = v1053;
  v1101[5] = v1054;
  v1101[6] = v1055;
  v1101[0] = v1049;
  v1101[1] = v1050;
  v1101[3] = v1052;
  v1101[2] = v1051;
  v1576 = 0x202000002020000;
  v1110[0] = xmmword_224664328;
  v1110[1] = *(_OWORD *)dbl_224664338;
  sub_223B46FEC((uint64_t)v1101, 3, 7, 0, (uint64_t)&v1576, (uint64_t)v1110, COERCE_DOUBLE(0xB7000000B6), COERCE_DOUBLE(0x19300000192), v112, v113, v114, v115, v116, v117);
  v1107 = v1053;
  v1108 = v1054;
  v1109 = v1055;
  v1103 = v1049;
  v1104 = v1050;
  v1106 = v1052;
  v1105 = v1051;
  v1577 = 0x202000002020000;
  v1112[0] = xmmword_224664348;
  v1112[1] = *(_OWORD *)dbl_224664358;
  sub_223B46FEC((uint64_t)&v1103, 3, 7, 1, (uint64_t)&v1577, (uint64_t)v1112, COERCE_DOUBLE(0xBE000000B7), COERCE_DOUBLE(0x19A00000193), v118, v119, v120, v121, v122, v123);
  v1111[4] = v1053;
  v1111[5] = v1054;
  v1111[6] = v1055;
  v1111[0] = v1049;
  v1111[1] = v1050;
  v1111[3] = v1052;
  v1111[2] = v1051;
  v1578 = 0;
  v1114[0] = xmmword_224664368;
  v1114[1] = *(_OWORD *)dbl_224664378;
  sub_223B46FEC((uint64_t)v1111, 2, 6, 2, (uint64_t)&v1578, (uint64_t)v1114, COERCE_DOUBLE(0xB9000000B8), COERCE_DOUBLE(0xBD000000BCLL), v124, v125, v126, v127, v128, v129);
  v1113[4] = v1053;
  v1113[5] = v1054;
  v1113[6] = v1055;
  v1113[0] = v1049;
  v1113[1] = v1050;
  v1113[3] = v1052;
  v1113[2] = v1051;
  v1579 = 0;
  v1116[0] = xmmword_224664388;
  v1116[1] = *(_OWORD *)dbl_224664398;
  sub_223B46FEC((uint64_t)v1113, 2, 6, 3, (uint64_t)&v1579, (uint64_t)v1116, COERCE_DOUBLE(0xF0000000B9), COERCE_DOUBLE(0xF4000000BDLL), v130, v131, v132, v133, v134, v135);
  v1115[4] = v1071;
  v1115[5] = v1072;
  v1115[6] = v1073;
  v1115[0] = v1067;
  v1115[1] = v1068;
  v1115[3] = v1070;
  v1115[2] = v1069;
  v1580 = 0x202000002020000;
  v1118[0] = xmmword_2246643A8;
  v1118[1] = *(_OWORD *)dbl_2246643B8;
  sub_223B46FEC((uint64_t)v1115, 2, 7, 2, (uint64_t)&v1580, (uint64_t)v1118, COERCE_DOUBLE(0xBB000000BALL), COERCE_DOUBLE(0xBF000000BELL), v136, v137, v138, v139, v140, v141);
  v1117[4] = v1071;
  v1117[5] = v1072;
  v1117[6] = v1073;
  v1117[0] = v1067;
  v1117[1] = v1068;
  v1117[3] = v1070;
  v1117[2] = v1069;
  v1581 = 0x202000002020000;
  v1120[0] = xmmword_2246643C8;
  v1120[1] = *(_OWORD *)dbl_2246643D8;
  sub_223B46FEC((uint64_t)v1117, 2, 7, 3, (uint64_t)&v1581, (uint64_t)v1120, COERCE_DOUBLE(0xF2000000BBLL), COERCE_DOUBLE(0xF6000000BFLL), v142, v143, v144, v145, v146, v147);
  v1119[4] = v1071;
  v1119[5] = v1072;
  v1119[6] = v1073;
  v1119[0] = v1067;
  v1119[1] = v1068;
  v1119[3] = v1070;
  v1119[2] = v1069;
  v1582 = 0;
  v1128[0] = xmmword_2246643E8;
  v1128[1] = *(_OWORD *)dbl_2246643F8;
  sub_223B46FEC((uint64_t)v1119, 3, 6, 2, (uint64_t)&v1582, (uint64_t)v1128, COERCE_DOUBLE(0xBD000000BCLL), COERCE_DOUBLE(0x19900000198), v148, v149, v150, v151, v152, v153);
  v1125 = v1071;
  v1126 = v1072;
  v1127 = v1073;
  v1121 = v1067;
  v1122 = v1068;
  v1124 = v1070;
  v1123 = v1069;
  v1583 = 0;
  v1130[0] = xmmword_224664408;
  v1130[1] = *(_OWORD *)dbl_224664418;
  sub_223B46FEC((uint64_t)&v1121, 3, 6, 3, (uint64_t)&v1583, (uint64_t)v1130, COERCE_DOUBLE(0xF4000000BDLL), COERCE_DOUBLE(0x1D000000199), v154, v155, v156, v157, v158, v159);
  v1129[4] = v1071;
  v1129[5] = v1072;
  v1129[6] = v1073;
  v1129[0] = v1067;
  v1129[1] = v1068;
  v1129[3] = v1070;
  v1129[2] = v1069;
  v1584 = 0x202000002020000;
  v1132[0] = xmmword_224664428;
  v1132[1] = *(_OWORD *)dbl_224664438;
  sub_223B46FEC((uint64_t)v1129, 3, 7, 2, (uint64_t)&v1584, (uint64_t)v1132, COERCE_DOUBLE(0xBF000000BELL), COERCE_DOUBLE(0x19B0000019ALL), v160, v161, v162, v163, v164, v165);
  v1131[4] = v1071;
  v1131[5] = v1072;
  v1131[6] = v1073;
  v1131[0] = v1067;
  v1131[1] = v1068;
  v1131[3] = v1070;
  v1131[2] = v1069;
  v1585 = 0x202000002020000;
  v1134[0] = xmmword_224664448;
  v1134[1] = *(_OWORD *)dbl_224664458;
  sub_223B46FEC((uint64_t)v1131, 3, 7, 3, (uint64_t)&v1585, (uint64_t)v1134, COERCE_DOUBLE(0xF6000000BFLL), COERCE_DOUBLE(0x1D20000019BLL), v166, v167, v168, v169, v170, v171);
  v1133[4] = v1089;
  v1133[5] = v1090;
  v1133[6] = v1091;
  v1133[0] = v1085;
  v1133[1] = v1086;
  v1133[3] = v1088;
  v1133[2] = v1087;
  v1586 = 0;
  v1136[0] = xmmword_224664468;
  v1136[1] = *(_OWORD *)dbl_224664478;
  sub_223B46FEC((uint64_t)v1133, 0, 4, 4, (uint64_t)&v1586, (uint64_t)v1136, COERCE_DOUBLE(0xC1000000C0), COERCE_DOUBLE(0xC5000000C4), v172, v173, v174, v175, v176, v177);
  v1135[4] = v1089;
  v1135[5] = v1090;
  v1135[6] = v1091;
  v1135[0] = v1085;
  v1135[1] = v1086;
  v1135[3] = v1088;
  v1135[2] = v1087;
  v1587 = 0;
  v1138[0] = xmmword_224664488;
  v1138[1] = *(_OWORD *)dbl_224664498;
  sub_223B46FEC((uint64_t)v1135, 0, 4, 5, (uint64_t)&v1587, (uint64_t)v1138, COERCE_DOUBLE(0xC8000000C1), COERCE_DOUBLE(0xCC000000C5), v178, v179, v180, v181, v182, v183);
  v1137[4] = v1089;
  v1137[5] = v1090;
  v1137[6] = v1091;
  v1137[0] = v1085;
  v1137[1] = v1086;
  v1137[3] = v1088;
  v1137[2] = v1087;
  v1588 = 0;
  v1146[0] = xmmword_2246644A8;
  v1146[1] = *(_OWORD *)dbl_2246644B8;
  sub_223B46FEC((uint64_t)v1137, 0, 5, 4, (uint64_t)&v1588, (uint64_t)v1146, COERCE_DOUBLE(0xC3000000C2), COERCE_DOUBLE(0xC7000000C6), v184, v185, v186, v187, v188, v189);
  v1143 = v1089;
  v1144 = v1090;
  v1145 = v1091;
  v1139 = v1085;
  v1140 = v1086;
  v1142 = v1088;
  v1141 = v1087;
  v1589 = 0;
  v1148[0] = xmmword_2246644C8;
  v1148[1] = *(_OWORD *)dbl_2246644D8;
  sub_223B46FEC((uint64_t)&v1139, 0, 5, 5, (uint64_t)&v1589, (uint64_t)v1148, COERCE_DOUBLE(0xCA000000C3), COERCE_DOUBLE(0xCE000000C7), v190, v191, v192, v193, v194, v195);
  v1147[4] = v1089;
  v1147[5] = v1090;
  v1147[6] = v1091;
  v1147[0] = v1085;
  v1147[1] = v1086;
  v1147[3] = v1088;
  v1147[2] = v1087;
  v1590 = 0;
  v1150[0] = xmmword_2246644E8;
  v1150[1] = *(_OWORD *)dbl_2246644F8;
  sub_223B46FEC((uint64_t)v1147, 1, 4, 4, (uint64_t)&v1590, (uint64_t)v1150, COERCE_DOUBLE(0xC5000000C4), COERCE_DOUBLE(0xE1000000E0), v196, v197, v198, v199, v200, v201);
  v1149[4] = v1089;
  v1149[5] = v1090;
  v1149[6] = v1091;
  v1149[0] = v1085;
  v1149[1] = v1086;
  v1149[3] = v1088;
  v1149[2] = v1087;
  v1591 = 0;
  v1152[0] = xmmword_224664508;
  v1152[1] = *(_OWORD *)dbl_224664518;
  sub_223B46FEC((uint64_t)v1149, 1, 4, 5, (uint64_t)&v1591, (uint64_t)v1152, COERCE_DOUBLE(0xCC000000C5), COERCE_DOUBLE(0xE8000000E1), v202, v203, v204, v205, v206, v207);
  v1151[4] = v1107;
  v1151[5] = v1108;
  v1151[6] = v1109;
  v1151[0] = v1103;
  v1151[1] = v1104;
  v1151[3] = v1106;
  v1151[2] = v1105;
  v1592 = 0;
  v1154[0] = xmmword_224664528;
  v1154[1] = *(_OWORD *)dbl_224664538;
  sub_223B46FEC((uint64_t)v1151, 1, 5, 4, (uint64_t)&v1592, (uint64_t)v1154, COERCE_DOUBLE(0xC7000000C6), COERCE_DOUBLE(0xE3000000E2), v208, v209, v210, v211, v212, v213);
  v1153[4] = v1107;
  v1153[5] = v1108;
  v1153[6] = v1109;
  v1153[0] = v1103;
  v1153[1] = v1104;
  v1153[3] = v1106;
  v1153[2] = v1105;
  v1593 = 0;
  v1156[0] = xmmword_224664548;
  v1156[1] = *(_OWORD *)dbl_224664558;
  sub_223B46FEC((uint64_t)v1153, 1, 5, 5, (uint64_t)&v1593, (uint64_t)v1156, COERCE_DOUBLE(0xCE000000C7), COERCE_DOUBLE(0xEA000000E3), v214, v215, v216, v217, v218, v219);
  v1155[4] = v1107;
  v1155[5] = v1108;
  v1155[6] = v1109;
  v1155[0] = v1103;
  v1155[1] = v1104;
  v1155[3] = v1106;
  v1155[2] = v1105;
  v1594 = 0;
  v1164[0] = xmmword_224664568;
  v1164[1] = *(_OWORD *)dbl_224664578;
  sub_223B46FEC((uint64_t)v1155, 0, 4, 6, (uint64_t)&v1594, (uint64_t)v1164, COERCE_DOUBLE(0xC9000000C8), COERCE_DOUBLE(0xCD000000CCLL), v220, v221, v222, v223, v224, v225);
  v1161 = v1107;
  v1162 = v1108;
  v1163 = v1109;
  v1157 = v1103;
  v1158 = v1104;
  v1160 = v1106;
  v1159 = v1105;
  v1595 = 0x100010001000100;
  v1166[0] = xmmword_224664588;
  v1166[1] = *(_OWORD *)dbl_224664598;
  sub_223B46FEC((uint64_t)&v1157, 0, 4, 7, (uint64_t)&v1595, (uint64_t)v1166, COERCE_DOUBLE(0x80000000C9), COERCE_DOUBLE(0x84000000CDLL), v226, v227, v228, v229, v230, v231);
  v1165[4] = v1107;
  v1165[5] = v1108;
  v1165[6] = v1109;
  v1165[0] = v1103;
  v1165[1] = v1104;
  v1165[3] = v1106;
  v1165[2] = v1105;
  v1596 = 0;
  v1168[0] = xmmword_2246645A8;
  v1168[1] = *(_OWORD *)dbl_2246645B8;
  sub_223B46FEC((uint64_t)v1165, 0, 5, 6, (uint64_t)&v1596, (uint64_t)v1168, COERCE_DOUBLE(0xCB000000CALL), COERCE_DOUBLE(0xCF000000CELL), v232, v233, v234, v235, v236, v237);
  v1167[4] = v1107;
  v1167[5] = v1108;
  v1167[6] = v1109;
  v1167[0] = v1103;
  v1167[1] = v1104;
  v1167[3] = v1106;
  v1167[2] = v1105;
  v1597 = 0x100010001000100;
  v1170[0] = xmmword_2246645C8;
  v1170[1] = *(_OWORD *)dbl_2246645D8;
  sub_223B46FEC((uint64_t)v1167, 0, 5, 7, (uint64_t)&v1597, (uint64_t)v1170, COERCE_DOUBLE(0x82000000CBLL), COERCE_DOUBLE(0x86000000CFLL), v238, v239, v240, v241, v242, v243);
  v1169[4] = v1125;
  v1169[5] = v1126;
  v1169[6] = v1127;
  v1169[0] = v1121;
  v1169[1] = v1122;
  v1169[3] = v1124;
  v1169[2] = v1123;
  v1598 = 0;
  v1172[0] = xmmword_2246645E8;
  v1172[1] = *(_OWORD *)dbl_2246645F8;
  sub_223B46FEC((uint64_t)v1169, 1, 4, 6, (uint64_t)&v1598, (uint64_t)v1172, COERCE_DOUBLE(0xCD000000CCLL), COERCE_DOUBLE(0xE9000000E8), v244, v245, v246, v247, v248, v249);
  v1171[4] = v1125;
  v1171[5] = v1126;
  v1171[6] = v1127;
  v1171[0] = v1121;
  v1171[1] = v1122;
  v1171[3] = v1124;
  v1171[2] = v1123;
  v1599 = 0x100010001000100;
  v1174[0] = xmmword_224664608;
  v1174[1] = *(_OWORD *)dbl_224664618;
  sub_223B46FEC((uint64_t)v1171, 1, 4, 7, (uint64_t)&v1599, (uint64_t)v1174, COERCE_DOUBLE(0x84000000CDLL), COERCE_DOUBLE(0xA0000000E9), v250, v251, v252, v253, v254, v255);
  v1173[4] = v1125;
  v1173[5] = v1126;
  v1173[6] = v1127;
  v1173[0] = v1121;
  v1173[1] = v1122;
  v1173[3] = v1124;
  v1173[2] = v1123;
  v1600 = 0;
  v1182[0] = xmmword_224664628;
  v1182[1] = *(_OWORD *)dbl_224664638;
  sub_223B46FEC((uint64_t)v1173, 1, 5, 6, (uint64_t)&v1600, (uint64_t)v1182, COERCE_DOUBLE(0xCF000000CELL), COERCE_DOUBLE(0xEB000000EALL), v256, v257, v258, v259, v260, v261);
  v1179 = v1125;
  v1180 = v1126;
  v1181 = v1127;
  v1175 = v1121;
  v1176 = v1122;
  v1178 = v1124;
  v1177 = v1123;
  v1601 = 0x100010001000100;
  v1184[0] = xmmword_224664648;
  v1184[1] = *(_OWORD *)dbl_224664658;
  sub_223B46FEC((uint64_t)&v1175, 1, 5, 7, (uint64_t)&v1601, (uint64_t)v1184, COERCE_DOUBLE(0x86000000CFLL), COERCE_DOUBLE(0xA2000000EBLL), v262, v263, v264, v265, v266, v267);
  v1183[4] = v1125;
  v1183[5] = v1126;
  v1183[6] = v1127;
  v1183[0] = v1121;
  v1183[1] = v1122;
  v1183[3] = v1124;
  v1183[2] = v1123;
  v1602 = 0;
  v1186[0] = xmmword_224664668;
  v1186[1] = *(_OWORD *)dbl_224664678;
  sub_223B46FEC((uint64_t)v1183, 0, 6, 4, (uint64_t)&v1602, (uint64_t)v1186, COERCE_DOUBLE(0xD1000000D0), COERCE_DOUBLE(0xD5000000D4), v268, v269, v270, v271, v272, v273);
  v1185[4] = v1125;
  v1185[5] = v1126;
  v1185[6] = v1127;
  v1185[0] = v1121;
  v1185[1] = v1122;
  v1185[3] = v1124;
  v1185[2] = v1123;
  v1603 = 0;
  v1188[0] = xmmword_224664688;
  v1188[1] = *(_OWORD *)dbl_224664698;
  sub_223B46FEC((uint64_t)v1185, 0, 6, 5, (uint64_t)&v1603, (uint64_t)v1188, COERCE_DOUBLE(0xD8000000D1), COERCE_DOUBLE(0xDC000000D5), v274, v275, v276, v277, v278, v279);
  v1187[4] = v1143;
  v1187[5] = v1144;
  v1187[6] = v1145;
  v1187[0] = v1139;
  v1187[1] = v1140;
  v1187[3] = v1142;
  v1187[2] = v1141;
  v1604 = 0x202000002020000;
  v1190[0] = xmmword_2246646A8;
  v1190[1] = *(_OWORD *)dbl_2246646B8;
  sub_223B46FEC((uint64_t)v1187, 0, 7, 4, (uint64_t)&v1604, (uint64_t)v1190, COERCE_DOUBLE(0xD3000000D2), COERCE_DOUBLE(0xD7000000D6), v280, v281, v282, v283, v284, v285);
  v1189[4] = v1143;
  v1189[5] = v1144;
  v1189[6] = v1145;
  v1189[0] = v1139;
  v1189[1] = v1140;
  v1189[3] = v1142;
  v1189[2] = v1141;
  v1605 = 0x202000002020000;
  v1192[0] = xmmword_2246646C8;
  v1192[1] = *(_OWORD *)dbl_2246646D8;
  sub_223B46FEC((uint64_t)v1189, 0, 7, 5, (uint64_t)&v1605, (uint64_t)v1192, COERCE_DOUBLE(0xDA000000D3), COERCE_DOUBLE(0xDE000000D7), v286, v287, v288, v289, v290, v291);
  v1191[4] = v1143;
  v1191[5] = v1144;
  v1191[6] = v1145;
  v1191[0] = v1139;
  v1191[1] = v1140;
  v1191[3] = v1142;
  v1191[2] = v1141;
  v1606 = 0;
  v1200[0] = xmmword_2246646E8;
  v1200[1] = *(_OWORD *)dbl_2246646F8;
  sub_223B46FEC((uint64_t)v1191, 1, 6, 4, (uint64_t)&v1606, (uint64_t)v1200, COERCE_DOUBLE(0xD5000000D4), COERCE_DOUBLE(0xF1000000F0), v292, v293, v294, v295, v296, v297);
  v1197 = v1143;
  v1198 = v1144;
  v1199 = v1145;
  v1193 = v1139;
  v1194 = v1140;
  v1196 = v1142;
  v1195 = v1141;
  v1607 = 0;
  v1202[0] = xmmword_224664708;
  v1202[1] = *(_OWORD *)dbl_224664718;
  sub_223B46FEC((uint64_t)&v1193, 1, 6, 5, (uint64_t)&v1607, (uint64_t)v1202, COERCE_DOUBLE(0xDC000000D5), COERCE_DOUBLE(0xF8000000F1), v298, v299, v300, v301, v302, v303);
  v1201[4] = v1143;
  v1201[5] = v1144;
  v1201[6] = v1145;
  v1201[0] = v1139;
  v1201[1] = v1140;
  v1201[3] = v1142;
  v1201[2] = v1141;
  v1608 = 0x202000002020000;
  v1204[0] = xmmword_224664728;
  v1204[1] = *(_OWORD *)dbl_224664738;
  sub_223B46FEC((uint64_t)v1201, 1, 7, 4, (uint64_t)&v1608, (uint64_t)v1204, COERCE_DOUBLE(0xD7000000D6), COERCE_DOUBLE(0xF3000000F2), v304, v305, v306, v307, v308, v309);
  v1203[4] = v1143;
  v1203[5] = v1144;
  v1203[6] = v1145;
  v1203[0] = v1139;
  v1203[1] = v1140;
  v1203[3] = v1142;
  v1203[2] = v1141;
  v1609 = 0x202000002020000;
  v1206[0] = xmmword_224664748;
  v1206[1] = *(_OWORD *)dbl_224664758;
  sub_223B46FEC((uint64_t)v1203, 1, 7, 5, (uint64_t)&v1609, (uint64_t)v1206, COERCE_DOUBLE(0xDE000000D7), COERCE_DOUBLE(0xFA000000F3), v310, v311, v312, v313, v314, v315);
  v1205[4] = v1161;
  v1205[5] = v1162;
  v1205[6] = v1163;
  v1205[0] = v1157;
  v1205[1] = v1158;
  v1205[3] = v1160;
  v1205[2] = v1159;
  v1610 = 0;
  v1208[0] = xmmword_224664768;
  v1208[1] = *(_OWORD *)dbl_224664778;
  sub_223B46FEC((uint64_t)v1205, 0, 6, 6, (uint64_t)&v1610, (uint64_t)v1208, COERCE_DOUBLE(0xD9000000D8), COERCE_DOUBLE(0xDD000000DCLL), v316, v317, v318, v319, v320, v321);
  v1207[4] = v1161;
  v1207[5] = v1162;
  v1207[6] = v1163;
  v1207[0] = v1157;
  v1207[1] = v1158;
  v1207[3] = v1160;
  v1207[2] = v1159;
  v1611 = 0x100010001000100;
  v1210[0] = xmmword_224664788;
  v1210[1] = *(_OWORD *)dbl_224664798;
  sub_223B46FEC((uint64_t)v1207, 0, 6, 7, (uint64_t)&v1611, (uint64_t)v1210, COERCE_DOUBLE(0x90000000D9), COERCE_DOUBLE(0x94000000DDLL), v322, v323, v324, v325, v326, v327);
  v1209[4] = v1161;
  v1209[5] = v1162;
  v1209[6] = v1163;
  v1209[0] = v1157;
  v1209[1] = v1158;
  v1209[3] = v1160;
  v1209[2] = v1159;
  v1612 = 0x202000002020000;
  v1218[0] = xmmword_2246647A8;
  v1218[1] = *(_OWORD *)dbl_2246647B8;
  sub_223B46FEC((uint64_t)v1209, 0, 7, 6, (uint64_t)&v1612, (uint64_t)v1218, COERCE_DOUBLE(0xDB000000DALL), COERCE_DOUBLE(0xDF000000DELL), v328, v329, v330, v331, v332, v333);
  v1215 = v1161;
  v1216 = v1162;
  v1217 = v1163;
  v1211 = v1157;
  v1212 = v1158;
  v1214 = v1160;
  v1213 = v1159;
  v1613 = 0x302010003020100;
  v1220[0] = xmmword_2246647C8;
  v1220[1] = *(_OWORD *)dbl_2246647D8;
  sub_223B46FEC((uint64_t)&v1211, 0, 7, 7, (uint64_t)&v1613, (uint64_t)v1220, COERCE_DOUBLE(0x92000000DBLL), COERCE_DOUBLE(0x96000000DFLL), v334, v335, v336, v337, v338, v339);
  v1219[4] = v1161;
  v1219[5] = v1162;
  v1219[6] = v1163;
  v1219[0] = v1157;
  v1219[1] = v1158;
  v1219[3] = v1160;
  v1219[2] = v1159;
  v1614 = 0;
  v1222[0] = xmmword_2246647E8;
  v1222[1] = *(_OWORD *)dbl_2246647F8;
  sub_223B46FEC((uint64_t)v1219, 1, 6, 6, (uint64_t)&v1614, (uint64_t)v1222, COERCE_DOUBLE(0xDD000000DCLL), COERCE_DOUBLE(0xF9000000F8), v340, v341, v342, v343, v344, v345);
  v1221[4] = v1161;
  v1221[5] = v1162;
  v1221[6] = v1163;
  v1221[0] = v1157;
  v1221[1] = v1158;
  v1221[3] = v1160;
  v1221[2] = v1159;
  v1615 = 0x100010001000100;
  v1224[0] = xmmword_224664808;
  v1224[1] = *(_OWORD *)dbl_224664818;
  sub_223B46FEC((uint64_t)v1221, 1, 6, 7, (uint64_t)&v1615, (uint64_t)v1224, COERCE_DOUBLE(0x94000000DDLL), COERCE_DOUBLE(0xB0000000F9), v346, v347, v348, v349, v350, v351);
  v1223[4] = v1179;
  v1223[5] = v1180;
  v1223[6] = v1181;
  v1223[0] = v1175;
  v1223[1] = v1176;
  v1223[3] = v1178;
  v1223[2] = v1177;
  v1616 = 0x202000002020000;
  v1226[0] = xmmword_224664828;
  v1226[1] = *(_OWORD *)dbl_224664838;
  sub_223B46FEC((uint64_t)v1223, 1, 7, 6, (uint64_t)&v1616, (uint64_t)v1226, COERCE_DOUBLE(0xDF000000DELL), COERCE_DOUBLE(0xFB000000FALL), v352, v353, v354, v355, v356, v357);
  v1225[4] = v1179;
  v1225[5] = v1180;
  v1225[6] = v1181;
  v1225[0] = v1175;
  v1225[1] = v1176;
  v1225[3] = v1178;
  v1225[2] = v1177;
  v1617 = 0x302010003020100;
  v1228[0] = xmmword_224664848;
  v1228[1] = *(_OWORD *)dbl_224664858;
  sub_223B46FEC((uint64_t)v1225, 1, 7, 7, (uint64_t)&v1617, (uint64_t)v1228, COERCE_DOUBLE(0x96000000DFLL), COERCE_DOUBLE(0xB2000000FBLL), v358, v359, v360, v361, v362, v363);
  v1227[4] = v1179;
  v1227[5] = v1180;
  v1227[6] = v1181;
  v1227[0] = v1175;
  v1227[1] = v1176;
  v1227[3] = v1178;
  v1227[2] = v1177;
  v1618 = 0;
  v1236[0] = xmmword_224664868;
  v1236[1] = *(_OWORD *)dbl_224664878;
  sub_223B46FEC((uint64_t)v1227, 2, 4, 4, (uint64_t)&v1618, (uint64_t)v1236, COERCE_DOUBLE(0xE1000000E0), COERCE_DOUBLE(0xE5000000E4), v364, v365, v366, v367, v368, v369);
  v1233 = v1179;
  v1234 = v1180;
  v1235 = v1181;
  v1229 = v1175;
  v1230 = v1176;
  v1232 = v1178;
  v1231 = v1177;
  v1619 = 0;
  v1238[0] = xmmword_224664888;
  v1238[1] = *(_OWORD *)dbl_224664898;
  sub_223B46FEC((uint64_t)&v1229, 2, 4, 5, (uint64_t)&v1619, (uint64_t)v1238, COERCE_DOUBLE(0xE8000000E1), COERCE_DOUBLE(0xEC000000E5), v370, v371, v372, v373, v374, v375);
  v1237[4] = v1179;
  v1237[5] = v1180;
  v1237[6] = v1181;
  v1237[0] = v1175;
  v1237[1] = v1176;
  v1237[3] = v1178;
  v1237[2] = v1177;
  v1620 = 0;
  v1240[0] = xmmword_2246648A8;
  v1240[1] = *(_OWORD *)dbl_2246648B8;
  sub_223B46FEC((uint64_t)v1237, 2, 5, 4, (uint64_t)&v1620, (uint64_t)v1240, COERCE_DOUBLE(0xE3000000E2), COERCE_DOUBLE(0xE7000000E6), v376, v377, v378, v379, v380, v381);
  v1239[4] = v1179;
  v1239[5] = v1180;
  v1239[6] = v1181;
  v1239[0] = v1175;
  v1239[1] = v1176;
  v1239[3] = v1178;
  v1239[2] = v1177;
  v1621 = 0;
  v1242[0] = xmmword_2246648C8;
  v1242[1] = *(_OWORD *)dbl_2246648D8;
  sub_223B46FEC((uint64_t)v1239, 2, 5, 5, (uint64_t)&v1621, (uint64_t)v1242, COERCE_DOUBLE(0xEA000000E3), COERCE_DOUBLE(0xEE000000E7), v382, v383, v384, v385, v386, v387);
  v1241[4] = v1197;
  v1241[5] = v1198;
  v1241[6] = v1199;
  v1241[0] = v1193;
  v1241[1] = v1194;
  v1241[3] = v1196;
  v1241[2] = v1195;
  v1622 = 0;
  v1244[0] = xmmword_2246648E8;
  v1244[1] = *(_OWORD *)dbl_2246648F8;
  sub_223B46FEC((uint64_t)v1241, 3, 4, 4, (uint64_t)&v1622, (uint64_t)v1244, COERCE_DOUBLE(0xE5000000E4), COERCE_DOUBLE(0x1C1000001C0), v388, v389, v390, v391, v392, v393);
  v1243[4] = v1197;
  v1243[5] = v1198;
  v1243[6] = v1199;
  v1243[0] = v1193;
  v1243[1] = v1194;
  v1243[3] = v1196;
  v1243[2] = v1195;
  v1623 = 0;
  v1246[0] = xmmword_224664908;
  v1246[1] = *(_OWORD *)dbl_224664918;
  sub_223B46FEC((uint64_t)v1243, 3, 4, 5, (uint64_t)&v1623, (uint64_t)v1246, COERCE_DOUBLE(0xEC000000E5), COERCE_DOUBLE(0x1C8000001C1), v394, v395, v396, v397, v398, v399);
  v1245[4] = v1197;
  v1245[5] = v1198;
  v1245[6] = v1199;
  v1245[0] = v1193;
  v1245[1] = v1194;
  v1245[3] = v1196;
  v1245[2] = v1195;
  v1624 = 0;
  v1254[0] = xmmword_224664928;
  v1254[1] = *(_OWORD *)dbl_224664938;
  sub_223B46FEC((uint64_t)v1245, 3, 5, 4, (uint64_t)&v1624, (uint64_t)v1254, COERCE_DOUBLE(0xE7000000E6), COERCE_DOUBLE(0x1C3000001C2), v400, v401, v402, v403, v404, v405);
  v1251 = v1197;
  v1252 = v1198;
  v1253 = v1199;
  v1247 = v1193;
  v1248 = v1194;
  v1250 = v1196;
  v1249 = v1195;
  v1625 = 0;
  v1256[0] = xmmword_224664948;
  v1256[1] = *(_OWORD *)dbl_224664958;
  sub_223B46FEC((uint64_t)&v1247, 3, 5, 5, (uint64_t)&v1625, (uint64_t)v1256, COERCE_DOUBLE(0xEE000000E7), COERCE_DOUBLE(0x1CA000001C3), v406, v407, v408, v409, v410, v411);
  v1255[4] = v1197;
  v1255[5] = v1198;
  v1255[6] = v1199;
  v1255[0] = v1193;
  v1255[1] = v1194;
  v1255[3] = v1196;
  v1255[2] = v1195;
  v1626 = 0;
  v1258[0] = xmmword_224664968;
  v1258[1] = *(_OWORD *)dbl_224664978;
  sub_223B46FEC((uint64_t)v1255, 2, 4, 6, (uint64_t)&v1626, (uint64_t)v1258, COERCE_DOUBLE(0xE9000000E8), COERCE_DOUBLE(0xED000000ECLL), v412, v413, v414, v415, v416, v417);
  v1257[4] = v1197;
  v1257[5] = v1198;
  v1257[6] = v1199;
  v1257[0] = v1193;
  v1257[1] = v1194;
  v1257[3] = v1196;
  v1257[2] = v1195;
  v1627 = 0x100010001000100;
  v1260[0] = xmmword_224664988;
  v1260[1] = *(_OWORD *)dbl_224664998;
  sub_223B46FEC((uint64_t)v1257, 2, 4, 7, (uint64_t)&v1627, (uint64_t)v1260, COERCE_DOUBLE(0xA0000000E9), COERCE_DOUBLE(0xA4000000EDLL), v418, v419, v420, v421, v422, v423);
  v1259[4] = v1215;
  v1259[5] = v1216;
  v1259[6] = v1217;
  v1259[0] = v1211;
  v1259[1] = v1212;
  v1259[3] = v1214;
  v1259[2] = v1213;
  v1628 = 0;
  v1262[0] = xmmword_2246649A8;
  v1262[1] = *(_OWORD *)dbl_2246649B8;
  sub_223B46FEC((uint64_t)v1259, 2, 5, 6, (uint64_t)&v1628, (uint64_t)v1262, COERCE_DOUBLE(0xEB000000EALL), COERCE_DOUBLE(0xEF000000EELL), v424, v425, v426, v427, v428, v429);
  v1261[4] = v1215;
  v1261[5] = v1216;
  v1261[6] = v1217;
  v1261[0] = v1211;
  v1261[1] = v1212;
  v1261[3] = v1214;
  v1261[2] = v1213;
  v1629 = 0x100010001000100;
  v1264[0] = xmmword_2246649C8;
  v1264[1] = *(_OWORD *)dbl_2246649D8;
  sub_223B46FEC((uint64_t)v1261, 2, 5, 7, (uint64_t)&v1629, (uint64_t)v1264, COERCE_DOUBLE(0xA2000000EBLL), COERCE_DOUBLE(0xA6000000EFLL), v430, v431, v432, v433, v434, v435);
  v1263[4] = v1215;
  v1263[5] = v1216;
  v1263[6] = v1217;
  v1263[0] = v1211;
  v1263[1] = v1212;
  v1263[3] = v1214;
  v1263[2] = v1213;
  v1630 = 0;
  v1272[0] = xmmword_2246649E8;
  v1272[1] = *(_OWORD *)dbl_2246649F8;
  sub_223B46FEC((uint64_t)v1263, 3, 4, 6, (uint64_t)&v1630, (uint64_t)v1272, COERCE_DOUBLE(0xED000000ECLL), COERCE_DOUBLE(0x1C9000001C8), v436, v437, v438, v439, v440, v441);
  v1269 = v1215;
  v1270 = v1216;
  v1271 = v1217;
  v1265 = v1211;
  v1266 = v1212;
  v1268 = v1214;
  v1267 = v1213;
  v1631 = 0x100010001000100;
  v1274[0] = xmmword_224664A08;
  v1274[1] = *(_OWORD *)dbl_224664A18;
  sub_223B46FEC((uint64_t)&v1265, 3, 4, 7, (uint64_t)&v1631, (uint64_t)v1274, COERCE_DOUBLE(0xA4000000EDLL), COERCE_DOUBLE(0x180000001C9), v442, v443, v444, v445, v446, v447);
  v1273[4] = v1215;
  v1273[5] = v1216;
  v1273[6] = v1217;
  v1273[0] = v1211;
  v1273[1] = v1212;
  v1273[3] = v1214;
  v1273[2] = v1213;
  v1632 = 0;
  v1276[0] = xmmword_224664A28;
  v1276[1] = *(_OWORD *)dbl_224664A38;
  sub_223B46FEC((uint64_t)v1273, 3, 5, 6, (uint64_t)&v1632, (uint64_t)v1276, COERCE_DOUBLE(0xEF000000EELL), COERCE_DOUBLE(0x1CB000001CALL), v448, v449, v450, v451, v452, v453);
  v1275[4] = v1215;
  v1275[5] = v1216;
  v1275[6] = v1217;
  v1275[0] = v1211;
  v1275[1] = v1212;
  v1275[3] = v1214;
  v1275[2] = v1213;
  v1633 = 0x100010001000100;
  v1278[0] = xmmword_224664A48;
  v1278[1] = *(_OWORD *)dbl_224664A58;
  sub_223B46FEC((uint64_t)v1275, 3, 5, 7, (uint64_t)&v1633, (uint64_t)v1278, COERCE_DOUBLE(0xA6000000EFLL), COERCE_DOUBLE(0x182000001CBLL), v454, v455, v456, v457, v458, v459);
  v1277[4] = v1233;
  v1277[5] = v1234;
  v1277[6] = v1235;
  v1277[0] = v1229;
  v1277[1] = v1230;
  v1277[3] = v1232;
  v1277[2] = v1231;
  v1634 = 0;
  v1280[0] = xmmword_224664A68;
  v1280[1] = *(_OWORD *)dbl_224664A78;
  sub_223B46FEC((uint64_t)v1277, 2, 6, 4, (uint64_t)&v1634, (uint64_t)v1280, COERCE_DOUBLE(0xF1000000F0), COERCE_DOUBLE(0xF5000000F4), v460, v461, v462, v463, v464, v465);
  v1279[4] = v1233;
  v1279[5] = v1234;
  v1279[6] = v1235;
  v1279[0] = v1229;
  v1279[1] = v1230;
  v1279[3] = v1232;
  v1279[2] = v1231;
  v1635 = 0;
  v1282[0] = xmmword_224664A88;
  v1282[1] = *(_OWORD *)dbl_224664A98;
  sub_223B46FEC((uint64_t)v1279, 2, 6, 5, (uint64_t)&v1635, (uint64_t)v1282, COERCE_DOUBLE(0xF8000000F1), COERCE_DOUBLE(0xFC000000F5), v466, v467, v468, v469, v470, v471);
  v1281[4] = v1233;
  v1281[5] = v1234;
  v1281[6] = v1235;
  v1281[0] = v1229;
  v1281[1] = v1230;
  v1281[3] = v1232;
  v1281[2] = v1231;
  v1636 = 0x202000002020000;
  v1290[0] = xmmword_224664AA8;
  v1290[1] = *(_OWORD *)dbl_224664AB8;
  sub_223B46FEC((uint64_t)v1281, 2, 7, 4, (uint64_t)&v1636, (uint64_t)v1290, COERCE_DOUBLE(0xF3000000F2), COERCE_DOUBLE(0xF7000000F6), v472, v473, v474, v475, v476, v477);
  v1287 = v1233;
  v1288 = v1234;
  v1289 = v1235;
  v1283 = v1229;
  v1284 = v1230;
  v1286 = v1232;
  v1285 = v1231;
  v1637 = 0x202000002020000;
  v1292[0] = xmmword_224664AC8;
  v1292[1] = *(_OWORD *)dbl_224664AD8;
  sub_223B46FEC((uint64_t)&v1283, 2, 7, 5, (uint64_t)&v1637, (uint64_t)v1292, COERCE_DOUBLE(0xFA000000F3), COERCE_DOUBLE(0xFE000000F7), v478, v479, v480, v481, v482, v483);
  v1291[4] = v1233;
  v1291[5] = v1234;
  v1291[6] = v1235;
  v1291[0] = v1229;
  v1291[1] = v1230;
  v1291[3] = v1232;
  v1291[2] = v1231;
  v1638 = 0;
  v1294[0] = xmmword_224664AE8;
  v1294[1] = *(_OWORD *)dbl_224664AF8;
  sub_223B46FEC((uint64_t)v1291, 3, 6, 4, (uint64_t)&v1638, (uint64_t)v1294, COERCE_DOUBLE(0xF5000000F4), COERCE_DOUBLE(0x1D1000001D0), v484, v485, v486, v487, v488, v489);
  v1293[4] = v1233;
  v1293[5] = v1234;
  v1293[6] = v1235;
  v1293[0] = v1229;
  v1293[1] = v1230;
  v1293[3] = v1232;
  v1293[2] = v1231;
  v1639 = 0;
  v1296[0] = xmmword_224664B08;
  v1296[1] = *(_OWORD *)dbl_224664B18;
  sub_223B46FEC((uint64_t)v1293, 3, 6, 5, (uint64_t)&v1639, (uint64_t)v1296, COERCE_DOUBLE(0xFC000000F5), COERCE_DOUBLE(0x1D8000001D1), v490, v491, v492, v493, v494, v495);
  v1295[4] = v1251;
  v1295[5] = v1252;
  v1295[6] = v1253;
  v1295[0] = v1247;
  v1295[1] = v1248;
  v1295[3] = v1250;
  v1295[2] = v1249;
  v1640 = 0x202000002020000;
  v1298[0] = xmmword_224664B28;
  v1298[1] = *(_OWORD *)dbl_224664B38;
  sub_223B46FEC((uint64_t)v1295, 3, 7, 4, (uint64_t)&v1640, (uint64_t)v1298, COERCE_DOUBLE(0xF7000000F6), COERCE_DOUBLE(0x1D3000001D2), v496, v497, v498, v499, v500, v501);
  v1297[4] = v1251;
  v1297[5] = v1252;
  v1297[6] = v1253;
  v1297[0] = v1247;
  v1297[1] = v1248;
  v1297[3] = v1250;
  v1297[2] = v1249;
  v1641 = 0x202000002020000;
  v1300[0] = xmmword_224664B48;
  v1300[1] = *(_OWORD *)dbl_224664B58;
  sub_223B46FEC((uint64_t)v1297, 3, 7, 5, (uint64_t)&v1641, (uint64_t)v1300, COERCE_DOUBLE(0xFE000000F7), COERCE_DOUBLE(0x1DA000001D3), v502, v503, v504, v505, v506, v507);
  v1299[4] = v1251;
  v1299[5] = v1252;
  v1299[6] = v1253;
  v1299[0] = v1247;
  v1299[1] = v1248;
  v1299[3] = v1250;
  v1299[2] = v1249;
  v1642 = 0;
  v1308[0] = xmmword_224664B68;
  v1308[1] = *(_OWORD *)dbl_224664B78;
  sub_223B46FEC((uint64_t)v1299, 2, 6, 6, (uint64_t)&v1642, (uint64_t)v1308, COERCE_DOUBLE(0xF9000000F8), COERCE_DOUBLE(0xFD000000FCLL), v508, v509, v510, v511, v512, v513);
  v1305 = v1251;
  v1306 = v1252;
  v1307 = v1253;
  v1301 = v1247;
  v1302 = v1248;
  v1304 = v1250;
  v1303 = v1249;
  v1643 = 0x100010001000100;
  v1310[0] = xmmword_224664B88;
  v1310[1] = *(_OWORD *)dbl_224664B98;
  sub_223B46FEC((uint64_t)&v1301, 2, 6, 7, (uint64_t)&v1643, (uint64_t)v1310, COERCE_DOUBLE(0xB0000000F9), COERCE_DOUBLE(0xB4000000FDLL), v514, v515, v516, v517, v518, v519);
  v1309[4] = v1251;
  v1309[5] = v1252;
  v1309[6] = v1253;
  v1309[0] = v1247;
  v1309[1] = v1248;
  v1309[3] = v1250;
  v1309[2] = v1249;
  v1644 = 0x202000002020000;
  v1312[0] = xmmword_224664BA8;
  v1312[1] = *(_OWORD *)dbl_224664BB8;
  sub_223B46FEC((uint64_t)v1309, 2, 7, 6, (uint64_t)&v1644, (uint64_t)v1312, COERCE_DOUBLE(0xFB000000FALL), COERCE_DOUBLE(0xFF000000FELL), v520, v521, v522, v523, v524, v525);
  v1311[4] = v1251;
  v1311[5] = v1252;
  v1311[6] = v1253;
  v1311[0] = v1247;
  v1311[1] = v1248;
  v1311[3] = v1250;
  v1311[2] = v1249;
  v1645 = 0x302010003020100;
  v1314[0] = xmmword_224664BC8;
  v1314[1] = *(_OWORD *)dbl_224664BD8;
  sub_223B46FEC((uint64_t)v1311, 2, 7, 7, (uint64_t)&v1645, (uint64_t)v1314, COERCE_DOUBLE(0xB2000000FBLL), COERCE_DOUBLE(0xB6000000FFLL), v526, v527, v528, v529, v530, v531);
  v1313[4] = v1269;
  v1313[5] = v1270;
  v1313[6] = v1271;
  v1313[0] = v1265;
  v1313[1] = v1266;
  v1313[3] = v1268;
  v1313[2] = v1267;
  v1646 = 0;
  v1316[0] = xmmword_224664BE8;
  v1316[1] = *(_OWORD *)dbl_224664BF8;
  sub_223B46FEC((uint64_t)v1313, 3, 6, 6, (uint64_t)&v1646, (uint64_t)v1316, COERCE_DOUBLE(0xFD000000FCLL), COERCE_DOUBLE(0x1D9000001D8), v532, v533, v534, v535, v536, v537);
  v1315[4] = v1269;
  v1315[5] = v1270;
  v1315[6] = v1271;
  v1315[0] = v1265;
  v1315[1] = v1266;
  v1315[3] = v1268;
  v1315[2] = v1267;
  v1647 = 0x100010001000100;
  v1318[0] = xmmword_224664C08;
  v1318[1] = *(_OWORD *)dbl_224664C18;
  sub_223B46FEC((uint64_t)v1315, 3, 6, 7, (uint64_t)&v1647, (uint64_t)v1318, COERCE_DOUBLE(0xB4000000FDLL), COERCE_DOUBLE(0x190000001D9), v538, v539, v540, v541, v542, v543);
  v1317[4] = v1269;
  v1317[5] = v1270;
  v1317[6] = v1271;
  v1317[0] = v1265;
  v1317[1] = v1266;
  v1317[3] = v1268;
  v1317[2] = v1267;
  v1648 = 0x202000002020000;
  v1326[0] = xmmword_224664C28;
  v1326[1] = *(_OWORD *)dbl_224664C38;
  sub_223B46FEC((uint64_t)v1317, 3, 7, 6, (uint64_t)&v1648, (uint64_t)v1326, COERCE_DOUBLE(0xFF000000FELL), COERCE_DOUBLE(0x1DB000001DALL), v544, v545, v546, v547, v548, v549);
  v1323 = v1269;
  v1324 = v1270;
  v1325 = v1271;
  v1319 = v1265;
  v1320 = v1266;
  v1322 = v1268;
  v1321 = v1267;
  v1649 = 0x302010003020100;
  v1328[0] = xmmword_224664C48;
  v1328[1] = *(_OWORD *)dbl_224664C58;
  sub_223B46FEC((uint64_t)&v1319, 3, 7, 7, (uint64_t)&v1649, (uint64_t)v1328, COERCE_DOUBLE(0xB6000000FFLL), COERCE_DOUBLE(0x192000001DBLL), v550, v551, v552, v553, v554, v555);
  v1327[4] = v1269;
  v1327[5] = v1270;
  v1327[6] = v1271;
  v1327[0] = v1265;
  v1327[1] = v1266;
  v1327[3] = v1268;
  v1327[2] = v1267;
  v1650 = 0;
  v1330[0] = xmmword_224664C68;
  v1330[1] = *(_OWORD *)dbl_224664C78;
  sub_223B46FEC((uint64_t)v1327, 4, 0, 0, (uint64_t)&v1650, (uint64_t)v1330, COERCE_DOUBLE(0x10100000100), COERCE_DOUBLE(0x10500000104), v556, v557, v558, v559, v560, v561);
  v1329[4] = v1269;
  v1329[5] = v1270;
  v1329[6] = v1271;
  v1329[0] = v1265;
  v1329[1] = v1266;
  v1329[3] = v1268;
  v1329[2] = v1267;
  v1651 = 0;
  v1332[0] = xmmword_224664C88;
  v1332[1] = *(_OWORD *)dbl_224664C98;
  sub_223B46FEC((uint64_t)v1329, 4, 0, 1, (uint64_t)&v1651, (uint64_t)v1332, COERCE_DOUBLE(0x10800000101), COERCE_DOUBLE(0x10C00000105), v562, v563, v564, v565, v566, v567);
  v1331[4] = v1287;
  v1331[5] = v1288;
  v1331[6] = v1289;
  v1331[0] = v1283;
  v1331[1] = v1284;
  v1331[3] = v1286;
  v1331[2] = v1285;
  v1652 = 0;
  v1334[0] = xmmword_224664CA8;
  v1334[1] = *(_OWORD *)dbl_224664CB8;
  sub_223B46FEC((uint64_t)v1331, 4, 1, 0, (uint64_t)&v1652, (uint64_t)v1334, COERCE_DOUBLE(0x10300000102), COERCE_DOUBLE(0x10700000106), v568, v569, v570, v571, v572, v573);
  v1333[4] = v1287;
  v1333[5] = v1288;
  v1333[6] = v1289;
  v1333[0] = v1283;
  v1333[1] = v1284;
  v1333[3] = v1286;
  v1333[2] = v1285;
  v1653 = 0;
  v1336[0] = xmmword_224664CC8;
  v1336[1] = *(_OWORD *)dbl_224664CD8;
  sub_223B46FEC((uint64_t)v1333, 4, 1, 1, (uint64_t)&v1653, (uint64_t)v1336, COERCE_DOUBLE(0x10A00000103), COERCE_DOUBLE(0x10E00000107), v574, v575, v576, v577, v578, v579);
  v1335[4] = v1287;
  v1335[5] = v1288;
  v1335[6] = v1289;
  v1335[0] = v1283;
  v1335[1] = v1284;
  v1335[3] = v1286;
  v1335[2] = v1285;
  v1654 = 0;
  v1344[0] = xmmword_224664CE8;
  v1344[1] = *(_OWORD *)dbl_224664CF8;
  sub_223B46FEC((uint64_t)v1335, 5, 0, 0, (uint64_t)&v1654, (uint64_t)v1344, COERCE_DOUBLE(0x10500000104), COERCE_DOUBLE(0x12100000120), v580, v581, v582, v583, v584, v585);
  v1341 = v1287;
  v1342 = v1288;
  v1343 = v1289;
  v1337 = v1283;
  v1338 = v1284;
  v1340 = v1286;
  v1339 = v1285;
  v1655 = 0;
  v1346[0] = xmmword_224664D08;
  v1346[1] = *(_OWORD *)dbl_224664D18;
  sub_223B46FEC((uint64_t)&v1337, 5, 0, 1, (uint64_t)&v1655, (uint64_t)v1346, COERCE_DOUBLE(0x10C00000105), COERCE_DOUBLE(0x12800000121), v586, v587, v588, v589, v590, v591);
  v1345[4] = v1287;
  v1345[5] = v1288;
  v1345[6] = v1289;
  v1345[0] = v1283;
  v1345[1] = v1284;
  v1345[3] = v1286;
  v1345[2] = v1285;
  v1656 = 0;
  v1348[0] = xmmword_224664D28;
  v1348[1] = *(_OWORD *)dbl_224664D38;
  sub_223B46FEC((uint64_t)v1345, 5, 1, 0, (uint64_t)&v1656, (uint64_t)v1348, COERCE_DOUBLE(0x10700000106), COERCE_DOUBLE(0x12300000122), v592, v593, v594, v595, v596, v597);
  v1347[4] = v1287;
  v1347[5] = v1288;
  v1347[6] = v1289;
  v1347[0] = v1283;
  v1347[1] = v1284;
  v1347[3] = v1286;
  v1347[2] = v1285;
  v1657 = 0;
  v1350[0] = xmmword_224664D48;
  v1350[1] = *(_OWORD *)dbl_224664D58;
  sub_223B46FEC((uint64_t)v1347, 5, 1, 1, (uint64_t)&v1657, (uint64_t)v1350, COERCE_DOUBLE(0x10E00000107), COERCE_DOUBLE(0x12A00000123), v598, v599, v600, v601, v602, v603);
  v1349[4] = v1305;
  v1349[5] = v1306;
  v1349[6] = v1307;
  v1349[0] = v1301;
  v1349[1] = v1302;
  v1349[3] = v1304;
  v1349[2] = v1303;
  v1658 = 0;
  v1352[0] = xmmword_224664D68;
  v1352[1] = *(_OWORD *)dbl_224664D78;
  sub_223B46FEC((uint64_t)v1349, 4, 0, 2, (uint64_t)&v1658, (uint64_t)v1352, COERCE_DOUBLE(0x10900000108), COERCE_DOUBLE(0x10D0000010CLL), v604, v605, v606, v607, v608, v609);
  v1351[4] = v1305;
  v1351[5] = v1306;
  v1351[6] = v1307;
  v1351[0] = v1301;
  v1351[1] = v1302;
  v1351[3] = v1304;
  v1351[2] = v1303;
  v1659 = 0;
  v1354[0] = xmmword_224664D88;
  v1354[1] = *(_OWORD *)dbl_224664D98;
  sub_223B46FEC((uint64_t)v1351, 4, 0, 3, (uint64_t)&v1659, (uint64_t)v1354, COERCE_DOUBLE(0x14000000109), COERCE_DOUBLE(0x1440000010DLL), v610, v611, v612, v613, v614, v615);
  v1353[4] = v1305;
  v1353[5] = v1306;
  v1353[6] = v1307;
  v1353[0] = v1301;
  v1353[1] = v1302;
  v1353[3] = v1304;
  v1353[2] = v1303;
  v1660 = 0;
  v1362[0] = xmmword_224664DA8;
  v1362[1] = *(_OWORD *)dbl_224664DB8;
  sub_223B46FEC((uint64_t)v1353, 4, 1, 2, (uint64_t)&v1660, (uint64_t)v1362, COERCE_DOUBLE(0x10B0000010ALL), COERCE_DOUBLE(0x10F0000010ELL), v616, v617, v618, v619, v620, v621);
  v1359 = v1305;
  v1360 = v1306;
  v1361 = v1307;
  v1355 = v1301;
  v1356 = v1302;
  v1358 = v1304;
  v1357 = v1303;
  v1661 = 0;
  v1364[0] = xmmword_224664DC8;
  v1364[1] = *(_OWORD *)dbl_224664DD8;
  sub_223B46FEC((uint64_t)&v1355, 4, 1, 3, (uint64_t)&v1661, (uint64_t)v1364, COERCE_DOUBLE(0x1420000010BLL), COERCE_DOUBLE(0x1460000010FLL), v622, v623, v624, v625, v626, v627);
  v1363[4] = v1305;
  v1363[5] = v1306;
  v1363[6] = v1307;
  v1363[0] = v1301;
  v1363[1] = v1302;
  v1363[3] = v1304;
  v1363[2] = v1303;
  v1662 = 0;
  v1366[0] = xmmword_224664DE8;
  v1366[1] = *(_OWORD *)dbl_224664DF8;
  sub_223B46FEC((uint64_t)v1363, 5, 0, 2, (uint64_t)&v1662, (uint64_t)v1366, COERCE_DOUBLE(0x10D0000010CLL), COERCE_DOUBLE(0x12900000128), v628, v629, v630, v631, v632, v633);
  v1365[4] = v1305;
  v1365[5] = v1306;
  v1365[6] = v1307;
  v1365[0] = v1301;
  v1365[1] = v1302;
  v1365[3] = v1304;
  v1365[2] = v1303;
  v1663 = 0;
  v1368[0] = xmmword_224664E08;
  v1368[1] = *(_OWORD *)dbl_224664E18;
  sub_223B46FEC((uint64_t)v1365, 5, 0, 3, (uint64_t)&v1663, (uint64_t)v1368, COERCE_DOUBLE(0x1440000010DLL), COERCE_DOUBLE(0x16000000129), v634, v635, v636, v637, v638, v639);
  v1367[4] = v1323;
  v1367[5] = v1324;
  v1367[6] = v1325;
  v1367[0] = v1319;
  v1367[1] = v1320;
  v1367[3] = v1322;
  v1367[2] = v1321;
  v1664 = 0;
  v1370[0] = xmmword_224664E28;
  v1370[1] = *(_OWORD *)dbl_224664E38;
  sub_223B46FEC((uint64_t)v1367, 5, 1, 2, (uint64_t)&v1664, (uint64_t)v1370, COERCE_DOUBLE(0x10F0000010ELL), COERCE_DOUBLE(0x12B0000012ALL), v640, v641, v642, v643, v644, v645);
  v1369[4] = v1323;
  v1369[5] = v1324;
  v1369[6] = v1325;
  v1369[0] = v1319;
  v1369[1] = v1320;
  v1369[3] = v1322;
  v1369[2] = v1321;
  v1665 = 0;
  v1372[0] = xmmword_224664E48;
  v1372[1] = *(_OWORD *)dbl_224664E58;
  sub_223B46FEC((uint64_t)v1369, 5, 1, 3, (uint64_t)&v1665, (uint64_t)v1372, COERCE_DOUBLE(0x1460000010FLL), COERCE_DOUBLE(0x1620000012BLL), v646, v647, v648, v649, v650, v651);
  v1371[4] = v1323;
  v1371[5] = v1324;
  v1371[6] = v1325;
  v1371[0] = v1319;
  v1371[1] = v1320;
  v1371[3] = v1322;
  v1371[2] = v1321;
  v1666 = 0;
  v1380[0] = xmmword_224664E68;
  v1380[1] = *(_OWORD *)dbl_224664E78;
  sub_223B46FEC((uint64_t)v1371, 4, 2, 0, (uint64_t)&v1666, (uint64_t)v1380, COERCE_DOUBLE(0x11100000110), COERCE_DOUBLE(0x11500000114), v652, v653, v654, v655, v656, v657);
  v1377 = v1323;
  v1378 = v1324;
  v1379 = v1325;
  v1373 = v1319;
  v1374 = v1320;
  v1376 = v1322;
  v1375 = v1321;
  v1667 = 0;
  v1382[0] = xmmword_224664E88;
  v1382[1] = *(_OWORD *)dbl_224664E98;
  sub_223B46FEC((uint64_t)&v1373, 4, 2, 1, (uint64_t)&v1667, (uint64_t)v1382, COERCE_DOUBLE(0x11800000111), COERCE_DOUBLE(0x11C00000115), v658, v659, v660, v661, v662, v663);
  v1381[4] = v1323;
  v1381[5] = v1324;
  v1381[6] = v1325;
  v1381[0] = v1319;
  v1381[1] = v1320;
  v1381[3] = v1322;
  v1381[2] = v1321;
  v1668 = 0;
  v1384[0] = xmmword_224664EA8;
  v1384[1] = *(_OWORD *)dbl_224664EB8;
  sub_223B46FEC((uint64_t)v1381, 4, 3, 0, (uint64_t)&v1668, (uint64_t)v1384, COERCE_DOUBLE(0x11300000112), COERCE_DOUBLE(0x11700000116), v664, v665, v666, v667, v668, v669);
  v1383[4] = v1323;
  v1383[5] = v1324;
  v1383[6] = v1325;
  v1383[0] = v1319;
  v1383[1] = v1320;
  v1383[3] = v1322;
  v1383[2] = v1321;
  v1669 = 0;
  v1386[0] = xmmword_224664EC8;
  v1386[1] = *(_OWORD *)dbl_224664ED8;
  sub_223B46FEC((uint64_t)v1383, 4, 3, 1, (uint64_t)&v1669, (uint64_t)v1386, COERCE_DOUBLE(0x11A00000113), COERCE_DOUBLE(0x11E00000117), v670, v671, v672, v673, v674, v675);
  v1385[4] = v1341;
  v1385[5] = v1342;
  v1385[6] = v1343;
  v1385[0] = v1337;
  v1385[1] = v1338;
  v1385[3] = v1340;
  v1385[2] = v1339;
  v1670 = 0;
  v1388[0] = xmmword_224664EE8;
  v1388[1] = *(_OWORD *)dbl_224664EF8;
  sub_223B46FEC((uint64_t)v1385, 5, 2, 0, (uint64_t)&v1670, (uint64_t)v1388, COERCE_DOUBLE(0x11500000114), COERCE_DOUBLE(0x13100000130), v676, v677, v678, v679, v680, v681);
  v1387[4] = v1341;
  v1387[5] = v1342;
  v1387[6] = v1343;
  v1387[0] = v1337;
  v1387[1] = v1338;
  v1387[3] = v1340;
  v1387[2] = v1339;
  v1671 = 0;
  v1390[0] = xmmword_224664F08;
  v1390[1] = *(_OWORD *)dbl_224664F18;
  sub_223B46FEC((uint64_t)v1387, 5, 2, 1, (uint64_t)&v1671, (uint64_t)v1390, COERCE_DOUBLE(0x11C00000115), COERCE_DOUBLE(0x13800000131), v682, v683, v684, v685, v686, v687);
  v1389[4] = v1341;
  v1389[5] = v1342;
  v1389[6] = v1343;
  v1389[0] = v1337;
  v1389[1] = v1338;
  v1389[3] = v1340;
  v1389[2] = v1339;
  v1672 = 0;
  v1398[0] = xmmword_224664F28;
  v1398[1] = *(_OWORD *)dbl_224664F38;
  sub_223B46FEC((uint64_t)v1389, 5, 3, 0, (uint64_t)&v1672, (uint64_t)v1398, COERCE_DOUBLE(0x11700000116), COERCE_DOUBLE(0x13300000132), v688, v689, v690, v691, v692, v693);
  v1395 = v1341;
  v1396 = v1342;
  v1397 = v1343;
  v1391 = v1337;
  v1392 = v1338;
  v1394 = v1340;
  v1393 = v1339;
  v1673 = 0;
  v1400[0] = xmmword_224664F48;
  v1400[1] = *(_OWORD *)dbl_224664F58;
  sub_223B46FEC((uint64_t)&v1391, 5, 3, 1, (uint64_t)&v1673, (uint64_t)v1400, COERCE_DOUBLE(0x11E00000117), COERCE_DOUBLE(0x13A00000133), v694, v695, v696, v697, v698, v699);
  v1399[4] = v1341;
  v1399[5] = v1342;
  v1399[6] = v1343;
  v1399[0] = v1337;
  v1399[1] = v1338;
  v1399[3] = v1340;
  v1399[2] = v1339;
  v1674 = 0;
  v1402[0] = xmmword_224664F68;
  v1402[1] = *(_OWORD *)dbl_224664F78;
  sub_223B46FEC((uint64_t)v1399, 4, 2, 2, (uint64_t)&v1674, (uint64_t)v1402, COERCE_DOUBLE(0x11900000118), COERCE_DOUBLE(0x11D0000011CLL), v700, v701, v702, v703, v704, v705);
  v1401[4] = v1341;
  v1401[5] = v1342;
  v1401[6] = v1343;
  v1401[0] = v1337;
  v1401[1] = v1338;
  v1401[3] = v1340;
  v1401[2] = v1339;
  v1675 = 0;
  v1404[0] = xmmword_224664F88;
  v1404[1] = *(_OWORD *)dbl_224664F98;
  sub_223B46FEC((uint64_t)v1401, 4, 2, 3, (uint64_t)&v1675, (uint64_t)v1404, COERCE_DOUBLE(0x15000000119), COERCE_DOUBLE(0x1540000011DLL), v706, v707, v708, v709, v710, v711);
  v1403[4] = v1359;
  v1403[5] = v1360;
  v1403[6] = v1361;
  v1403[0] = v1355;
  v1403[1] = v1356;
  v1403[3] = v1358;
  v1403[2] = v1357;
  v1676 = 0;
  v1406[0] = xmmword_224664FA8;
  v1406[1] = *(_OWORD *)dbl_224664FB8;
  sub_223B46FEC((uint64_t)v1403, 4, 3, 2, (uint64_t)&v1676, (uint64_t)v1406, COERCE_DOUBLE(0x11B0000011ALL), COERCE_DOUBLE(0x11F0000011ELL), v712, v713, v714, v715, v716, v717);
  v1405[4] = v1359;
  v1405[5] = v1360;
  v1405[6] = v1361;
  v1405[0] = v1355;
  v1405[1] = v1356;
  v1405[3] = v1358;
  v1405[2] = v1357;
  v1677 = 0;
  v1408[0] = xmmword_224664FC8;
  v1408[1] = *(_OWORD *)dbl_224664FD8;
  sub_223B46FEC((uint64_t)v1405, 4, 3, 3, (uint64_t)&v1677, (uint64_t)v1408, COERCE_DOUBLE(0x1520000011BLL), COERCE_DOUBLE(0x1560000011FLL), v718, v719, v720, v721, v722, v723);
  v1407[4] = v1359;
  v1407[5] = v1360;
  v1407[6] = v1361;
  v1407[0] = v1355;
  v1407[1] = v1356;
  v1407[3] = v1358;
  v1407[2] = v1357;
  v1678 = 0;
  v1416[0] = xmmword_224664FE8;
  v1416[1] = *(_OWORD *)dbl_224664FF8;
  sub_223B46FEC((uint64_t)v1407, 5, 2, 2, (uint64_t)&v1678, (uint64_t)v1416, COERCE_DOUBLE(0x11D0000011CLL), COERCE_DOUBLE(0x13900000138), v724, v725, v726, v727, v728, v729);
  v1413 = v1359;
  v1414 = v1360;
  v1415 = v1361;
  v1409 = v1355;
  v1410 = v1356;
  v1412 = v1358;
  v1411 = v1357;
  v1679 = 0;
  v1418[0] = xmmword_224665008;
  v1418[1] = *(_OWORD *)dbl_224665018;
  sub_223B46FEC((uint64_t)&v1409, 5, 2, 3, (uint64_t)&v1679, (uint64_t)v1418, COERCE_DOUBLE(0x1540000011DLL), COERCE_DOUBLE(0x17000000139), v730, v731, v732, v733, v734, v735);
  v1417[4] = v1359;
  v1417[5] = v1360;
  v1417[6] = v1361;
  v1417[0] = v1355;
  v1417[1] = v1356;
  v1417[3] = v1358;
  v1417[2] = v1357;
  v1680 = 0;
  v1420[0] = xmmword_224665028;
  v1420[1] = *(_OWORD *)dbl_224665038;
  sub_223B46FEC((uint64_t)v1417, 5, 3, 2, (uint64_t)&v1680, (uint64_t)v1420, COERCE_DOUBLE(0x11F0000011ELL), COERCE_DOUBLE(0x13B0000013ALL), v736, v737, v738, v739, v740, v741);
  v1419[4] = v1359;
  v1419[5] = v1360;
  v1419[6] = v1361;
  v1419[0] = v1355;
  v1419[1] = v1356;
  v1419[3] = v1358;
  v1419[2] = v1357;
  v1681 = 0;
  v1422[0] = xmmword_224665048;
  v1422[1] = *(_OWORD *)dbl_224665058;
  sub_223B46FEC((uint64_t)v1419, 5, 3, 3, (uint64_t)&v1681, (uint64_t)v1422, COERCE_DOUBLE(0x1560000011FLL), COERCE_DOUBLE(0x1720000013BLL), v742, v743, v744, v745, v746, v747);
  v1421[4] = v1377;
  v1421[5] = v1378;
  v1421[6] = v1379;
  v1421[0] = v1373;
  v1421[1] = v1374;
  v1421[3] = v1376;
  v1421[2] = v1375;
  v1682 = 0;
  v1424[0] = xmmword_224665068;
  v1424[1] = *(_OWORD *)dbl_224665078;
  sub_223B46FEC((uint64_t)v1421, 6, 0, 0, (uint64_t)&v1682, (uint64_t)v1424, COERCE_DOUBLE(0x12100000120), COERCE_DOUBLE(0x12500000124), v748, v749, v750, v751, v752, v753);
  v1423[4] = v1377;
  v1423[5] = v1378;
  v1423[6] = v1379;
  v1423[0] = v1373;
  v1423[1] = v1374;
  v1423[3] = v1376;
  v1423[2] = v1375;
  v1683 = 0;
  v1426[0] = xmmword_224665088;
  v1426[1] = *(_OWORD *)dbl_224665098;
  sub_223B46FEC((uint64_t)v1423, 6, 0, 1, (uint64_t)&v1683, (uint64_t)v1426, COERCE_DOUBLE(0x12800000121), COERCE_DOUBLE(0x12C00000125), v754, v755, v756, v757, v758, v759);
  v1425[4] = v1377;
  v1425[5] = v1378;
  v1425[6] = v1379;
  v1425[0] = v1373;
  v1425[1] = v1374;
  v1425[3] = v1376;
  v1425[2] = v1375;
  v1684 = 0;
  v1434[0] = xmmword_2246650A8;
  v1434[1] = *(_OWORD *)dbl_2246650B8;
  sub_223B46FEC((uint64_t)v1425, 6, 1, 0, (uint64_t)&v1684, (uint64_t)v1434, COERCE_DOUBLE(0x12300000122), COERCE_DOUBLE(0x12700000126), v760, v761, v762, v763, v764, v765);
  v1431 = v1377;
  v1432 = v1378;
  v1433 = v1379;
  v1427 = v1373;
  v1428 = v1374;
  v1430 = v1376;
  v1429 = v1375;
  v1685 = 0;
  v1436[0] = xmmword_2246650C8;
  v1436[1] = *(_OWORD *)dbl_2246650D8;
  sub_223B46FEC((uint64_t)&v1427, 6, 1, 1, (uint64_t)&v1685, (uint64_t)v1436, COERCE_DOUBLE(0x12A00000123), COERCE_DOUBLE(0x12E00000127), v766, v767, v768, v769, v770, v771);
  v1435[4] = v1377;
  v1435[5] = v1378;
  v1435[6] = v1379;
  v1435[0] = v1373;
  v1435[1] = v1374;
  v1435[3] = v1376;
  v1435[2] = v1375;
  v1686 = 0x404040400000000;
  v1438[0] = xmmword_2246650E8;
  v1438[1] = *(_OWORD *)dbl_2246650F8;
  sub_223B46FEC((uint64_t)v1435, 7, 0, 0, (uint64_t)&v1686, (uint64_t)v1438, COERCE_DOUBLE(0x12500000124), COERCE_DOUBLE(0x100000000), v772, v773, v774, v775, v776, v777);
  v1437[4] = v1377;
  v1437[5] = v1378;
  v1437[6] = v1379;
  v1437[0] = v1373;
  v1437[1] = v1374;
  v1437[3] = v1376;
  v1437[2] = v1375;
  v1687 = 0x404040400000000;
  v1440[0] = xmmword_224665108;
  v1440[1] = *(_OWORD *)dbl_224665118;
  sub_223B46FEC((uint64_t)v1437, 7, 0, 1, (uint64_t)&v1687, (uint64_t)v1440, COERCE_DOUBLE(0x12C00000125), COERCE_DOUBLE(0x800000001), v778, v779, v780, v781, v782, v783);
  v1439[4] = v1395;
  v1439[5] = v1396;
  v1439[6] = v1397;
  v1439[0] = v1391;
  v1439[1] = v1392;
  v1439[3] = v1394;
  v1439[2] = v1393;
  v1688 = 0x404040400000000;
  v1442[0] = xmmword_224665128;
  v1442[1] = *(_OWORD *)dbl_224665138;
  sub_223B46FEC((uint64_t)v1439, 7, 1, 0, (uint64_t)&v1688, (uint64_t)v1442, COERCE_DOUBLE(0x12700000126), COERCE_DOUBLE(0x300000002), v784, v785, v786, v787, v788, v789);
  v1441[4] = v1395;
  v1441[5] = v1396;
  v1441[6] = v1397;
  v1441[0] = v1391;
  v1441[1] = v1392;
  v1441[3] = v1394;
  v1441[2] = v1393;
  v1689 = 0x404040400000000;
  v1444[0] = xmmword_224665148;
  v1444[1] = *(_OWORD *)dbl_224665158;
  sub_223B46FEC((uint64_t)v1441, 7, 1, 1, (uint64_t)&v1689, (uint64_t)v1444, COERCE_DOUBLE(0x12E00000127), COERCE_DOUBLE(0xA00000003), v790, v791, v792, v793, v794, v795);
  v1443[4] = v1395;
  v1443[5] = v1396;
  v1443[6] = v1397;
  v1443[0] = v1391;
  v1443[1] = v1392;
  v1443[3] = v1394;
  v1443[2] = v1393;
  v1690 = 0;
  v1452[0] = xmmword_224665168;
  v1452[1] = *(_OWORD *)dbl_224665178;
  sub_223B46FEC((uint64_t)v1443, 6, 0, 2, (uint64_t)&v1690, (uint64_t)v1452, COERCE_DOUBLE(0x12900000128), COERCE_DOUBLE(0x12D0000012CLL), v796, v797, v798, v799, v800, v801);
  v1449 = v1395;
  v1450 = v1396;
  v1451 = v1397;
  v1445 = v1391;
  v1446 = v1392;
  v1448 = v1394;
  v1447 = v1393;
  v1691 = 0;
  v1454[0] = xmmword_224665188;
  v1454[1] = *(_OWORD *)dbl_224665198;
  sub_223B46FEC((uint64_t)&v1445, 6, 0, 3, (uint64_t)&v1691, (uint64_t)v1454, COERCE_DOUBLE(0x16000000129), COERCE_DOUBLE(0x1640000012DLL), v802, v803, v804, v805, v806, v807);
  v1453[4] = v1395;
  v1453[5] = v1396;
  v1453[6] = v1397;
  v1453[0] = v1391;
  v1453[1] = v1392;
  v1453[3] = v1394;
  v1453[2] = v1393;
  v1692 = 0;
  v1456[0] = xmmword_2246651A8;
  v1456[1] = *(_OWORD *)dbl_2246651B8;
  sub_223B46FEC((uint64_t)v1453, 6, 1, 2, (uint64_t)&v1692, (uint64_t)v1456, COERCE_DOUBLE(0x12B0000012ALL), COERCE_DOUBLE(0x12F0000012ELL), v808, v809, v810, v811, v812, v813);
  v1455[4] = v1395;
  v1455[5] = v1396;
  v1455[6] = v1397;
  v1455[0] = v1391;
  v1455[1] = v1392;
  v1455[3] = v1394;
  v1455[2] = v1393;
  v1693 = 0;
  v1458[0] = xmmword_2246651C8;
  v1458[1] = *(_OWORD *)dbl_2246651D8;
  sub_223B46FEC((uint64_t)v1455, 6, 1, 3, (uint64_t)&v1693, (uint64_t)v1458, COERCE_DOUBLE(0x1620000012BLL), COERCE_DOUBLE(0x1660000012FLL), v814, v815, v816, v817, v818, v819);
  v1457[4] = v1413;
  v1457[5] = v1414;
  v1457[6] = v1415;
  v1457[0] = v1409;
  v1457[1] = v1410;
  v1457[3] = v1412;
  v1457[2] = v1411;
  v1694 = 0x404040400000000;
  v1460[0] = xmmword_2246651E8;
  v1460[1] = *(_OWORD *)dbl_2246651F8;
  sub_223B46FEC((uint64_t)v1457, 7, 0, 2, (uint64_t)&v1694, (uint64_t)v1460, COERCE_DOUBLE(0x12D0000012CLL), COERCE_DOUBLE(0x900000008), v820, v821, v822, v823, v824, v825);
  v1459[4] = v1413;
  v1459[5] = v1414;
  v1459[6] = v1415;
  v1459[0] = v1409;
  v1459[1] = v1410;
  v1459[3] = v1412;
  v1459[2] = v1411;
  v1695 = 0x404040400000000;
  v1462[0] = xmmword_224665208;
  v1462[1] = *(_OWORD *)dbl_224665218;
  sub_223B46FEC((uint64_t)v1459, 7, 0, 3, (uint64_t)&v1695, (uint64_t)v1462, COERCE_DOUBLE(0x1640000012DLL), COERCE_DOUBLE(0x4000000009), v826, v827, v828, v829, v830, v831);
  v1461[4] = v1413;
  v1461[5] = v1414;
  v1461[6] = v1415;
  v1461[0] = v1409;
  v1461[1] = v1410;
  v1461[3] = v1412;
  v1461[2] = v1411;
  v1696 = 0x404040400000000;
  v1470[0] = xmmword_224665228;
  v1470[1] = *(_OWORD *)dbl_224665238;
  sub_223B46FEC((uint64_t)v1461, 7, 1, 2, (uint64_t)&v1696, (uint64_t)v1470, COERCE_DOUBLE(0x12F0000012ELL), COERCE_DOUBLE(0xB0000000ALL), v832, v833, v834, v835, v836, v837);
  v1467 = v1413;
  v1468 = v1414;
  v1469 = v1415;
  v1463 = v1409;
  v1464 = v1410;
  v1466 = v1412;
  v1465 = v1411;
  v1697 = 0x404040400000000;
  v1472[0] = xmmword_224665248;
  v1472[1] = *(_OWORD *)dbl_224665258;
  sub_223B46FEC((uint64_t)&v1463, 7, 1, 3, (uint64_t)&v1697, (uint64_t)v1472, COERCE_DOUBLE(0x1660000012FLL), COERCE_DOUBLE(0x420000000BLL), v838, v839, v840, v841, v842, v843);
  v1471[4] = v1413;
  v1471[5] = v1414;
  v1471[6] = v1415;
  v1471[0] = v1409;
  v1471[1] = v1410;
  v1471[3] = v1412;
  v1471[2] = v1411;
  v1698 = 0;
  v1474[0] = xmmword_224665268;
  v1474[1] = *(_OWORD *)dbl_224665278;
  sub_223B46FEC((uint64_t)v1471, 6, 2, 0, (uint64_t)&v1698, (uint64_t)v1474, COERCE_DOUBLE(0x13100000130), COERCE_DOUBLE(0x13500000134), v844, v845, v846, v847, v848, v849);
  v1473[4] = v1413;
  v1473[5] = v1414;
  v1473[6] = v1415;
  v1473[0] = v1409;
  v1473[1] = v1410;
  v1473[3] = v1412;
  v1473[2] = v1411;
  v1699 = 0;
  v1476[0] = xmmword_224665288;
  v1476[1] = *(_OWORD *)dbl_224665298;
  sub_223B46FEC((uint64_t)v1473, 6, 2, 1, (uint64_t)&v1699, (uint64_t)v1476, COERCE_DOUBLE(0x13800000131), COERCE_DOUBLE(0x13C00000135), v850, v851, v852, v853, v854, v855);
  v1475[4] = v1431;
  v1475[5] = v1432;
  v1475[6] = v1433;
  v1475[0] = v1427;
  v1475[1] = v1428;
  v1475[3] = v1430;
  v1475[2] = v1429;
  v1700 = 0;
  v1478[0] = xmmword_2246652A8;
  v1478[1] = *(_OWORD *)dbl_2246652B8;
  sub_223B46FEC((uint64_t)v1475, 6, 3, 0, (uint64_t)&v1700, (uint64_t)v1478, COERCE_DOUBLE(0x13300000132), COERCE_DOUBLE(0x13700000136), v856, v857, v858, v859, v860, v861);
  v1477[4] = v1431;
  v1477[5] = v1432;
  v1477[6] = v1433;
  v1477[0] = v1427;
  v1477[1] = v1428;
  v1477[3] = v1430;
  v1477[2] = v1429;
  v1701 = 0;
  v1480[0] = xmmword_2246652C8;
  v1480[1] = *(_OWORD *)dbl_2246652D8;
  sub_223B46FEC((uint64_t)v1477, 6, 3, 1, (uint64_t)&v1701, (uint64_t)v1480, COERCE_DOUBLE(0x13A00000133), COERCE_DOUBLE(0x13E00000137), v862, v863, v864, v865, v866, v867);
  v1479[4] = v1431;
  v1479[5] = v1432;
  v1479[6] = v1433;
  v1479[0] = v1427;
  v1479[1] = v1428;
  v1479[3] = v1430;
  v1479[2] = v1429;
  v1702 = 0x404040400000000;
  v1488[0] = xmmword_2246652E8;
  v1488[1] = *(_OWORD *)dbl_2246652F8;
  sub_223B46FEC((uint64_t)v1479, 7, 2, 0, (uint64_t)&v1702, (uint64_t)v1488, COERCE_DOUBLE(0x13500000134), COERCE_DOUBLE(0x1100000010), v868, v869, v870, v871, v872, v873);
  v1485 = v1431;
  v1486 = v1432;
  v1487 = v1433;
  v1481 = v1427;
  v1482 = v1428;
  v1484 = v1430;
  v1483 = v1429;
  v1703 = 0x404040400000000;
  v1490[0] = xmmword_224665308;
  v1490[1] = *(_OWORD *)dbl_224665318;
  sub_223B46FEC((uint64_t)&v1481, 7, 2, 1, (uint64_t)&v1703, (uint64_t)v1490, COERCE_DOUBLE(0x13C00000135), COERCE_DOUBLE(0x1800000011), v874, v875, v876, v877, v878, v879);
  v1489[4] = v1431;
  v1489[5] = v1432;
  v1489[6] = v1433;
  v1489[0] = v1427;
  v1489[1] = v1428;
  v1489[3] = v1430;
  v1489[2] = v1429;
  v1704 = 0x404040400000000;
  v1492[0] = xmmword_224665328;
  v1492[1] = *(_OWORD *)dbl_224665338;
  sub_223B46FEC((uint64_t)v1489, 7, 3, 0, (uint64_t)&v1704, (uint64_t)v1492, COERCE_DOUBLE(0x13700000136), COERCE_DOUBLE(0x1300000012), v880, v881, v882, v883, v884, v885);
  v1491[4] = v1431;
  v1491[5] = v1432;
  v1491[6] = v1433;
  v1491[0] = v1427;
  v1491[1] = v1428;
  v1491[3] = v1430;
  v1491[2] = v1429;
  v1705 = 0x404040400000000;
  v1494[0] = xmmword_224665348;
  v1494[1] = *(_OWORD *)dbl_224665358;
  sub_223B46FEC((uint64_t)v1491, 7, 3, 1, (uint64_t)&v1705, (uint64_t)v1494, COERCE_DOUBLE(0x13E00000137), COERCE_DOUBLE(0x1A00000013), v886, v887, v888, v889, v890, v891);
  v1493[4] = v1449;
  v1493[5] = v1450;
  v1493[6] = v1451;
  v1493[0] = v1445;
  v1493[1] = v1446;
  v1493[3] = v1448;
  v1493[2] = v1447;
  v1706 = 0;
  v1496[0] = xmmword_224665368;
  v1496[1] = *(_OWORD *)dbl_224665378;
  sub_223B46FEC((uint64_t)v1493, 6, 2, 2, (uint64_t)&v1706, (uint64_t)v1496, COERCE_DOUBLE(0x13900000138), COERCE_DOUBLE(0x13D0000013CLL), v892, v893, v894, v895, v896, v897);
  v1495[4] = v1449;
  v1495[5] = v1450;
  v1495[6] = v1451;
  v1495[0] = v1445;
  v1495[1] = v1446;
  v1495[3] = v1448;
  v1495[2] = v1447;
  v1707 = 0;
  v1498[0] = xmmword_224665388;
  v1498[1] = *(_OWORD *)dbl_224665398;
  sub_223B46FEC((uint64_t)v1495, 6, 2, 3, (uint64_t)&v1707, (uint64_t)v1498, COERCE_DOUBLE(0x17000000139), COERCE_DOUBLE(0x1740000013DLL), v898, v899, v900, v901, v902, v903);
  v1497[4] = v1449;
  v1497[5] = v1450;
  v1497[6] = v1451;
  v1497[0] = v1445;
  v1497[1] = v1446;
  v1497[3] = v1448;
  v1497[2] = v1447;
  v1708 = 0;
  v1506[0] = xmmword_2246653A8;
  v1506[1] = *(_OWORD *)dbl_2246653B8;
  sub_223B46FEC((uint64_t)v1497, 6, 3, 2, (uint64_t)&v1708, (uint64_t)v1506, COERCE_DOUBLE(0x13B0000013ALL), COERCE_DOUBLE(0x13F0000013ELL), v904, v905, v906, v907, v908, v909);
  v1503 = v1449;
  v1504 = v1450;
  v1505 = v1451;
  v1499 = v1445;
  v1500 = v1446;
  v1502 = v1448;
  v1501 = v1447;
  v1709 = 0;
  v1508[0] = xmmword_2246653C8;
  v1508[1] = *(_OWORD *)dbl_2246653D8;
  sub_223B46FEC((uint64_t)&v1499, 6, 3, 3, (uint64_t)&v1709, (uint64_t)v1508, COERCE_DOUBLE(0x1720000013BLL), COERCE_DOUBLE(0x1760000013FLL), v910, v911, v912, v913, v914, v915);
  v1507[4] = v1449;
  v1507[5] = v1450;
  v1507[6] = v1451;
  v1507[0] = v1445;
  v1507[1] = v1446;
  v1507[3] = v1448;
  v1507[2] = v1447;
  v1710 = 0x404040400000000;
  v1510[0] = xmmword_2246653E8;
  v1510[1] = *(_OWORD *)dbl_2246653F8;
  sub_223B46FEC((uint64_t)v1507, 7, 2, 2, (uint64_t)&v1710, (uint64_t)v1510, COERCE_DOUBLE(0x13D0000013CLL), COERCE_DOUBLE(0x1900000018), v916, v917, v918, v919, v920, v921);
  v1509[4] = v1449;
  v1509[5] = v1450;
  v1509[6] = v1451;
  v1509[0] = v1445;
  v1509[1] = v1446;
  v1509[3] = v1448;
  v1509[2] = v1447;
  v1711 = 0x404040400000000;
  v1512[0] = xmmword_224665408;
  v1512[1] = *(_OWORD *)dbl_224665418;
  sub_223B46FEC((uint64_t)v1509, 7, 2, 3, (uint64_t)&v1711, (uint64_t)v1512, COERCE_DOUBLE(0x1740000013DLL), COERCE_DOUBLE(0x5000000019), v922, v923, v924, v925, v926, v927);
  v1511[4] = v1467;
  v1511[5] = v1468;
  v1511[6] = v1469;
  v1511[0] = v1463;
  v1511[1] = v1464;
  v1511[3] = v1466;
  v1511[2] = v1465;
  v1712 = 0x404040400000000;
  v1514[0] = xmmword_224665428;
  v1514[1] = *(_OWORD *)dbl_224665438;
  sub_223B46FEC((uint64_t)v1511, 7, 3, 2, (uint64_t)&v1712, (uint64_t)v1514, COERCE_DOUBLE(0x13F0000013ELL), COERCE_DOUBLE(0x1B0000001ALL), v928, v929, v930, v931, v932, v933);
  v1513[4] = v1467;
  v1513[5] = v1468;
  v1513[6] = v1469;
  v1513[0] = v1463;
  v1513[1] = v1464;
  v1513[3] = v1466;
  v1513[2] = v1465;
  v1713 = 0x404040400000000;
  v1516[0] = xmmword_224665448;
  v1516[1] = *(_OWORD *)dbl_224665458;
  sub_223B46FEC((uint64_t)v1513, 7, 3, 3, (uint64_t)&v1713, (uint64_t)v1516, COERCE_DOUBLE(0x1760000013FLL), COERCE_DOUBLE(0x520000001BLL), v934, v935, v936, v937, v938, v939);
  v1515[4] = v1467;
  v1515[5] = v1468;
  v1515[6] = v1469;
  v1515[0] = v1463;
  v1515[1] = v1464;
  v1515[3] = v1466;
  v1515[2] = v1465;
  v1714 = 0;
  v1524[0] = xmmword_224665468;
  v1524[1] = *(_OWORD *)dbl_224665478;
  sub_223B46FEC((uint64_t)v1515, 4, 0, 4, (uint64_t)&v1714, (uint64_t)v1524, COERCE_DOUBLE(0x14100000140), COERCE_DOUBLE(0x14500000144), v940, v941, v942, v943, v944, v945);
  v1521 = v1467;
  v1522 = v1468;
  v1523 = v1469;
  v1517 = v1463;
  v1518 = v1464;
  v1520 = v1466;
  v1519 = v1465;
  v1715 = 0;
  v1526[0] = xmmword_224665488;
  v1526[1] = *(_OWORD *)dbl_224665498;
  sub_223B46FEC((uint64_t)&v1517, 4, 0, 5, (uint64_t)&v1715, (uint64_t)v1526, COERCE_DOUBLE(0x14800000141), COERCE_DOUBLE(0x14C00000145), v946, v947, v948, v949, v950, v951);
  v1525[4] = v1467;
  v1525[5] = v1468;
  v1525[6] = v1469;
  v1525[0] = v1463;
  v1525[1] = v1464;
  v1525[3] = v1466;
  v1525[2] = v1465;
  v1716 = 0;
  v1528[0] = xmmword_2246654A8;
  v1528[1] = *(_OWORD *)dbl_2246654B8;
  sub_223B46FEC((uint64_t)v1525, 4, 1, 4, (uint64_t)&v1716, (uint64_t)v1528, COERCE_DOUBLE(0x14300000142), COERCE_DOUBLE(0x14700000146), v952, v953, v954, v955, v956, v957);
  v1527[4] = v1467;
  v1527[5] = v1468;
  v1527[6] = v1469;
  v1527[0] = v1463;
  v1527[1] = v1464;
  v1527[3] = v1466;
  v1527[2] = v1465;
  v1717 = 0;
  v1530[0] = xmmword_2246654C8;
  v1530[1] = *(_OWORD *)dbl_2246654D8;
  sub_223B46FEC((uint64_t)v1527, 4, 1, 5, (uint64_t)&v1717, (uint64_t)v1530, COERCE_DOUBLE(0x14A00000143), COERCE_DOUBLE(0x14E00000147), v958, v959, v960, v961, v962, v963);
  v1529[4] = v1485;
  v1529[5] = v1486;
  v1529[6] = v1487;
  v1529[0] = v1481;
  v1529[1] = v1482;
  v1529[3] = v1484;
  v1529[2] = v1483;
  v1718 = 0;
  v1532[0] = xmmword_2246654E8;
  v1532[1] = *(_OWORD *)dbl_2246654F8;
  sub_223B46FEC((uint64_t)v1529, 5, 0, 4, (uint64_t)&v1718, (uint64_t)v1532, COERCE_DOUBLE(0x14500000144), COERCE_DOUBLE(0x16100000160), v964, v965, v966, v967, v968, v969);
  v1531[4] = v1485;
  v1531[5] = v1486;
  v1531[6] = v1487;
  v1531[0] = v1481;
  v1531[1] = v1482;
  v1531[3] = v1484;
  v1531[2] = v1483;
  v1719 = 0;
  v1534[0] = xmmword_224665508;
  v1534[1] = *(_OWORD *)dbl_224665518;
  sub_223B46FEC((uint64_t)v1531, 5, 0, 5, (uint64_t)&v1719, (uint64_t)v1534, COERCE_DOUBLE(0x14C00000145), COERCE_DOUBLE(0x16800000161), v970, v971, v972, v973, v974, v975);
  v1533[4] = v1485;
  v1533[5] = v1486;
  v1533[6] = v1487;
  v1533[0] = v1481;
  v1533[1] = v1482;
  v1533[3] = v1484;
  v1533[2] = v1483;
  v1720 = 0;
  v1536[0] = xmmword_224665528;
  v1536[1] = *(_OWORD *)dbl_224665538;
  sub_223B46FEC((uint64_t)v1533, 5, 1, 4, (uint64_t)&v1720, (uint64_t)v1536, COERCE_DOUBLE(0x14700000146), COERCE_DOUBLE(0x16300000162), v976, v977, v978, v979, v980, v981);
  v1535[4] = v1485;
  v1535[5] = v1486;
  v1535[6] = v1487;
  v1535[0] = v1481;
  v1535[1] = v1482;
  v1535[3] = v1484;
  v1535[2] = v1483;
  v1721 = 0;
  v1538[0] = xmmword_224665548;
  v1538[1] = *(_OWORD *)dbl_224665558;
  sub_223B46FEC((uint64_t)v1535, 5, 1, 5, (uint64_t)&v1721, (uint64_t)v1538, COERCE_DOUBLE(0x14E00000147), COERCE_DOUBLE(0x16A00000163), v982, v983, v984, v985, v986, v987);
  v1537[4] = v1485;
  v1537[5] = v1486;
  v1537[6] = v1487;
  v1537[0] = v1481;
  v1537[1] = v1482;
  v1537[3] = v1484;
  v1537[2] = v1483;
  v1722 = 0;
  v1540[0] = xmmword_224665568;
  v1540[1] = *(_OWORD *)dbl_224665578;
  sub_223B46FEC((uint64_t)v1537, 4, 0, 6, (uint64_t)&v1722, (uint64_t)v1540, COERCE_DOUBLE(0x14900000148), COERCE_DOUBLE(0x14D0000014CLL), v988, v989, v990, v991, v992, v993);
  v1539[4] = v1485;
  v1539[5] = v1486;
  v1539[6] = v1487;
  v1539[0] = v1481;
  v1539[1] = v1482;
  v1539[3] = v1484;
  v1539[2] = v1483;
  v1723 = 0x100010001000100;
  v1542[0] = xmmword_224665588;
  v1542[1] = *(_OWORD *)dbl_224665598;
  sub_223B46FEC((uint64_t)v1539, 4, 0, 7, (uint64_t)&v1723, (uint64_t)v1542, COERCE_DOUBLE(0x10000000149), COERCE_DOUBLE(0x1040000014DLL), v994, v995, v996, v997, v998, v999);
  v1541[4] = v1503;
  v1541[5] = v1504;
  v1541[6] = v1505;
  v1541[0] = v1499;
  v1541[1] = v1500;
  v1541[3] = v1502;
  v1541[2] = v1501;
  v1724 = 0;
  v1544[0] = xmmword_2246655A8;
  v1544[1] = *(_OWORD *)dbl_2246655B8;
  sub_223B46FEC((uint64_t)v1541, 4, 1, 6, (uint64_t)&v1724, (uint64_t)v1544, COERCE_DOUBLE(0x14B0000014ALL), COERCE_DOUBLE(0x14F0000014ELL), v1000, v1001, v1002, v1003, v1004, v1005);
  v1543[4] = v1503;
  v1543[5] = v1504;
  v1543[6] = v1505;
  v1543[0] = v1499;
  v1543[1] = v1500;
  v1543[3] = v1502;
  v1543[2] = v1501;
  v1725 = 0x100010001000100;
  v1546[0] = xmmword_2246655C8;
  v1546[1] = *(_OWORD *)dbl_2246655D8;
  sub_223B46FEC((uint64_t)v1543, 4, 1, 7, (uint64_t)&v1725, (uint64_t)v1546, COERCE_DOUBLE(0x1020000014BLL), COERCE_DOUBLE(0x1060000014FLL), v1006, v1007, v1008, v1009, v1010, v1011);
  v1545[4] = v1503;
  v1545[5] = v1504;
  v1545[6] = v1505;
  v1545[0] = v1499;
  v1545[1] = v1500;
  v1545[3] = v1502;
  v1545[2] = v1501;
  v1726 = 0;
  v1548[0] = xmmword_2246655E8;
  v1548[1] = *(_OWORD *)dbl_2246655F8;
  sub_223B46FEC((uint64_t)v1545, 5, 0, 6, (uint64_t)&v1726, (uint64_t)v1548, COERCE_DOUBLE(0x14D0000014CLL), COERCE_DOUBLE(0x16900000168), v1012, v1013, v1014, v1015, v1016, v1017);
  v1547[4] = v1503;
  v1547[5] = v1504;
  v1547[6] = v1505;
  v1547[0] = v1499;
  v1547[1] = v1500;
  v1547[3] = v1502;
  v1547[2] = v1501;
  v1727 = 0x100010001000100;
  v1550[0] = xmmword_224665608;
  v1550[1] = *(_OWORD *)dbl_224665618;
  sub_223B46FEC((uint64_t)v1547, 5, 0, 7, (uint64_t)&v1727, (uint64_t)v1550, COERCE_DOUBLE(0x1040000014DLL), COERCE_DOUBLE(0x12000000169), v1018, v1019, v1020, v1021, v1022, v1023);
  v1549[4] = v1503;
  v1549[5] = v1504;
  v1549[6] = v1505;
  v1549[0] = v1499;
  v1549[1] = v1500;
  v1549[3] = v1502;
  v1549[2] = v1501;
  v1728 = 0;
  v1552[0] = xmmword_224665628;
  v1552[1] = *(_OWORD *)dbl_224665638;
  sub_223B46FEC((uint64_t)v1549, 5, 1, 6, (uint64_t)&v1728, (uint64_t)v1552, COERCE_DOUBLE(0x14F0000014ELL), COERCE_DOUBLE(0x16B0000016ALL), v1024, v1025, v1026, v1027, v1028, v1029);
  v1551[4] = v1503;
  v1551[5] = v1504;
  v1551[6] = v1505;
  v1551[0] = v1499;
  v1551[1] = v1500;
  v1551[3] = v1502;
  v1551[2] = v1501;
  v1729 = 0x100010001000100;
  v1554[0] = xmmword_224665648;
  v1554[1] = *(_OWORD *)dbl_224665658;
  sub_223B46FEC((uint64_t)v1551, 5, 1, 7, (uint64_t)&v1729, (uint64_t)v1554, COERCE_DOUBLE(0x1060000014FLL), COERCE_DOUBLE(0x1220000016BLL), v1030, v1031, v1032, v1033, v1034, v1035);
  v1553[4] = v1521;
  v1553[5] = v1522;
  v1553[6] = v1523;
  v1553[0] = v1517;
  v1553[1] = v1518;
  v1553[3] = v1520;
  v1553[2] = v1519;
  v1730 = 0;
  v1556[0] = xmmword_224665668;
  v1556[1] = *(_OWORD *)dbl_224665678;
  sub_223B46FEC((uint64_t)v1553, 4, 2, 4, (uint64_t)&v1730, (uint64_t)v1556, COERCE_DOUBLE(0x15100000150), COERCE_DOUBLE(0x15500000154), v1036, v1037, v1038, v1039, v1040, v1041);
  v1555[4] = v1521;
  v1555[5] = v1522;
  v1555[6] = v1523;
  v1555[0] = v1517;
  v1555[1] = v1518;
  v1555[3] = v1520;
  v1555[2] = v1519;
  v1731[0] = 0;
  v1557[0] = xmmword_224665688;
  v1557[1] = *(_OWORD *)dbl_224665698;
  sub_223B46FEC((uint64_t)v1555, 4, 2, 5, (uint64_t)v1731, (uint64_t)v1557, COERCE_DOUBLE(0x15800000151), COERCE_DOUBLE(0x15C00000155), v1042, v1043, v1044, v1045, v1046, v1047);
  v1556[6] = v1521;
  v1556[7] = v1522;
  v1556[8] = v1523;
  v1556[2] = v1517;
  v1556[3] = v1518;
  v1556[5] = v1520;
  v1556[4] = v1519;
  return sub_223B4F2E8();
}

uint64_t sub_223B4F2E8()
{
  __int128 *v0;
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  double v5;
  double v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  double v14;
  double v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  double v20;
  double v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  double v26;
  double v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  double v32;
  double v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  double v38;
  double v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  double v44;
  double v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  double v50;
  double v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  double v56;
  double v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  double v62;
  double v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  double v68;
  double v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  double v74;
  double v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  double v80;
  double v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  double v86;
  double v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  double v92;
  double v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  double v98;
  double v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  double v104;
  double v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  double v110;
  double v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  double v116;
  double v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  double v122;
  double v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  double v128;
  double v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  double v134;
  double v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  double v140;
  double v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  double v146;
  double v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  double v152;
  double v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  double v158;
  double v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  double v164;
  double v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  double v170;
  double v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  double v176;
  double v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  double v182;
  double v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  double v188;
  double v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  double v194;
  double v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  double v200;
  double v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  double v206;
  double v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  double v212;
  double v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  double v218;
  double v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  double v224;
  double v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  double v230;
  double v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  double v236;
  double v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  double v242;
  double v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  double v248;
  double v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  double v254;
  double v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  double v260;
  double v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  double v266;
  double v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  double v272;
  double v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  double v278;
  double v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  double v284;
  double v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  double v290;
  double v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  double v296;
  double v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  double v302;
  double v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  double v308;
  double v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  double v314;
  double v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  double v320;
  double v321;
  float32x4_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  double v326;
  double v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  double v332;
  double v333;
  float32x4_t v334;
  float32x4_t v335;
  float32x4_t v336;
  float32x4_t v337;
  double v338;
  double v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  double v344;
  double v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  double v350;
  double v351;
  float32x4_t v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x4_t v355;
  double v356;
  double v357;
  float32x4_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  double v362;
  double v363;
  float32x4_t v364;
  float32x4_t v365;
  float32x4_t v366;
  float32x4_t v367;
  double v368;
  double v369;
  float32x4_t v370;
  float32x4_t v371;
  float32x4_t v372;
  float32x4_t v373;
  double v374;
  double v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t v378;
  float32x4_t v379;
  double v380;
  double v381;
  float32x4_t v382;
  float32x4_t v383;
  float32x4_t v384;
  float32x4_t v385;
  double v386;
  double v387;
  float32x4_t v388;
  float32x4_t v389;
  float32x4_t v390;
  float32x4_t v391;
  double v392;
  double v393;
  float32x4_t v394;
  float32x4_t v395;
  float32x4_t v396;
  float32x4_t v397;
  double v398;
  double v399;
  float32x4_t v400;
  float32x4_t v401;
  float32x4_t v402;
  float32x4_t v403;
  double v404;
  double v405;
  float32x4_t v406;
  float32x4_t v407;
  float32x4_t v408;
  float32x4_t v409;
  double v410;
  double v411;
  float32x4_t v412;
  float32x4_t v413;
  float32x4_t v414;
  float32x4_t v415;
  double v416;
  double v417;
  float32x4_t v418;
  float32x4_t v419;
  float32x4_t v420;
  float32x4_t v421;
  double v422;
  double v423;
  float32x4_t v424;
  float32x4_t v425;
  float32x4_t v426;
  float32x4_t v427;
  double v428;
  double v429;
  float32x4_t v430;
  float32x4_t v431;
  float32x4_t v432;
  float32x4_t v433;
  double v434;
  double v435;
  float32x4_t v436;
  float32x4_t v437;
  float32x4_t v438;
  float32x4_t v439;
  double v440;
  double v441;
  float32x4_t v442;
  float32x4_t v443;
  float32x4_t v444;
  float32x4_t v445;
  double v446;
  double v447;
  float32x4_t v448;
  float32x4_t v449;
  float32x4_t v450;
  float32x4_t v451;
  double v452;
  double v453;
  float32x4_t v454;
  float32x4_t v455;
  float32x4_t v456;
  float32x4_t v457;
  double v458;
  double v459;
  float32x4_t v460;
  float32x4_t v461;
  float32x4_t v462;
  float32x4_t v463;
  double v464;
  double v465;
  float32x4_t v466;
  float32x4_t v467;
  float32x4_t v468;
  float32x4_t v469;
  double v470;
  double v471;
  float32x4_t v472;
  float32x4_t v473;
  float32x4_t v474;
  float32x4_t v475;
  double v476;
  double v477;
  float32x4_t v478;
  float32x4_t v479;
  float32x4_t v480;
  float32x4_t v481;
  double v482;
  double v483;
  float32x4_t v484;
  float32x4_t v485;
  float32x4_t v486;
  float32x4_t v487;
  double v488;
  double v489;
  float32x4_t v490;
  float32x4_t v491;
  float32x4_t v492;
  float32x4_t v493;
  double v494;
  double v495;
  float32x4_t v496;
  float32x4_t v497;
  float32x4_t v498;
  float32x4_t v499;
  double v500;
  double v501;
  float32x4_t v502;
  float32x4_t v503;
  float32x4_t v504;
  float32x4_t v505;
  double v506;
  double v507;
  float32x4_t v508;
  float32x4_t v509;
  float32x4_t v510;
  float32x4_t v511;
  double v512;
  double v513;
  float32x4_t v514;
  float32x4_t v515;
  float32x4_t v516;
  float32x4_t v517;
  double v518;
  double v519;
  float32x4_t v520;
  float32x4_t v521;
  float32x4_t v522;
  float32x4_t v523;
  double v524;
  double v525;
  float32x4_t v526;
  float32x4_t v527;
  float32x4_t v528;
  float32x4_t v529;
  double v530;
  double v531;
  float32x4_t v532;
  float32x4_t v533;
  float32x4_t v534;
  float32x4_t v535;
  double v536;
  double v537;
  float32x4_t v538;
  float32x4_t v539;
  float32x4_t v540;
  float32x4_t v541;
  double v542;
  double v543;
  float32x4_t v544;
  float32x4_t v545;
  float32x4_t v546;
  float32x4_t v547;
  double v548;
  double v549;
  float32x4_t v550;
  float32x4_t v551;
  float32x4_t v552;
  float32x4_t v553;
  double v554;
  double v555;
  float32x4_t v556;
  float32x4_t v557;
  float32x4_t v558;
  float32x4_t v559;
  double v560;
  double v561;
  float32x4_t v562;
  float32x4_t v563;
  float32x4_t v564;
  float32x4_t v565;
  double v566;
  double v567;
  float32x4_t v568;
  float32x4_t v569;
  float32x4_t v570;
  float32x4_t v571;
  double v572;
  double v573;
  float32x4_t v574;
  float32x4_t v575;
  float32x4_t v576;
  float32x4_t v577;
  double v578;
  double v579;
  float32x4_t v580;
  float32x4_t v581;
  float32x4_t v582;
  float32x4_t v583;
  double v584;
  double v585;
  float32x4_t v586;
  float32x4_t v587;
  float32x4_t v588;
  float32x4_t v589;
  double v590;
  double v591;
  float32x4_t v592;
  float32x4_t v593;
  float32x4_t v594;
  float32x4_t v595;
  double v596;
  double v597;
  float32x4_t v598;
  float32x4_t v599;
  float32x4_t v600;
  float32x4_t v601;
  double v602;
  double v603;
  float32x4_t v604;
  float32x4_t v605;
  float32x4_t v606;
  float32x4_t v607;
  double v608;
  double v609;
  float32x4_t v610;
  float32x4_t v611;
  float32x4_t v612;
  float32x4_t v613;
  double v614;
  double v615;
  float32x4_t v616;
  float32x4_t v617;
  float32x4_t v618;
  float32x4_t v619;
  double v620;
  double v621;
  float32x4_t v622;
  float32x4_t v623;
  float32x4_t v624;
  float32x4_t v625;
  double v626;
  double v627;
  float32x4_t v628;
  float32x4_t v629;
  float32x4_t v630;
  float32x4_t v631;
  double v632;
  double v633;
  float32x4_t v634;
  float32x4_t v635;
  float32x4_t v636;
  float32x4_t v637;
  double v638;
  double v639;
  float32x4_t v640;
  float32x4_t v641;
  float32x4_t v642;
  float32x4_t v643;
  double v644;
  double v645;
  float32x4_t v646;
  float32x4_t v647;
  float32x4_t v648;
  float32x4_t v649;
  double v650;
  double v651;
  float32x4_t v652;
  float32x4_t v653;
  float32x4_t v654;
  float32x4_t v655;
  double v656;
  double v657;
  float32x4_t v658;
  float32x4_t v659;
  float32x4_t v660;
  float32x4_t v661;
  double v662;
  double v663;
  float32x4_t v664;
  float32x4_t v665;
  float32x4_t v666;
  float32x4_t v667;
  double v668;
  double v669;
  float32x4_t v670;
  float32x4_t v671;
  float32x4_t v672;
  float32x4_t v673;
  double v674;
  double v675;
  float32x4_t v676;
  float32x4_t v677;
  float32x4_t v678;
  float32x4_t v679;
  double v680;
  double v681;
  float32x4_t v682;
  float32x4_t v683;
  float32x4_t v684;
  float32x4_t v685;
  double v686;
  double v687;
  float32x4_t v688;
  float32x4_t v689;
  float32x4_t v690;
  float32x4_t v691;
  double v692;
  double v693;
  float32x4_t v694;
  float32x4_t v695;
  float32x4_t v696;
  float32x4_t v697;
  double v698;
  double v699;
  float32x4_t v700;
  float32x4_t v701;
  float32x4_t v702;
  float32x4_t v703;
  double v704;
  double v705;
  float32x4_t v706;
  float32x4_t v707;
  float32x4_t v708;
  float32x4_t v709;
  double v710;
  double v711;
  float32x4_t v712;
  float32x4_t v713;
  float32x4_t v714;
  float32x4_t v715;
  double v716;
  double v717;
  float32x4_t v718;
  float32x4_t v719;
  float32x4_t v720;
  float32x4_t v721;
  double v722;
  double v723;
  float32x4_t v724;
  float32x4_t v725;
  float32x4_t v726;
  float32x4_t v727;
  double v728;
  double v729;
  float32x4_t v730;
  float32x4_t v731;
  float32x4_t v732;
  float32x4_t v733;
  double v734;
  double v735;
  float32x4_t v736;
  float32x4_t v737;
  float32x4_t v738;
  float32x4_t v739;
  double v740;
  double v741;
  float32x4_t v742;
  float32x4_t v743;
  float32x4_t v744;
  float32x4_t v745;
  double v746;
  double v747;
  float32x4_t v748;
  float32x4_t v749;
  float32x4_t v750;
  float32x4_t v751;
  double v752;
  double v753;
  float32x4_t v754;
  float32x4_t v755;
  float32x4_t v756;
  float32x4_t v757;
  double v758;
  double v759;
  float32x4_t v760;
  float32x4_t v761;
  float32x4_t v762;
  float32x4_t v763;
  double v764;
  double v765;
  float32x4_t v766;
  float32x4_t v767;
  float32x4_t v768;
  float32x4_t v769;
  double v770;
  double v771;
  float32x4_t v772;
  float32x4_t v773;
  float32x4_t v774;
  float32x4_t v775;
  double v776;
  double v777;
  float32x4_t v778;
  float32x4_t v779;
  float32x4_t v780;
  float32x4_t v781;
  double v782;
  double v783;
  float32x4_t v784;
  float32x4_t v785;
  float32x4_t v786;
  float32x4_t v787;
  double v788;
  double v789;
  float32x4_t v790;
  float32x4_t v791;
  float32x4_t v792;
  float32x4_t v793;
  double v794;
  double v795;
  float32x4_t v796;
  float32x4_t v797;
  float32x4_t v798;
  float32x4_t v799;
  double v800;
  double v801;
  float32x4_t v802;
  float32x4_t v803;
  float32x4_t v804;
  float32x4_t v805;
  double v806;
  double v807;
  float32x4_t v808;
  float32x4_t v809;
  float32x4_t v810;
  float32x4_t v811;
  double v812;
  double v813;
  float32x4_t v814;
  float32x4_t v815;
  float32x4_t v816;
  float32x4_t v817;
  double v818;
  double v819;
  float32x4_t v820;
  float32x4_t v821;
  float32x4_t v822;
  float32x4_t v823;
  double v824;
  double v825;
  float32x4_t v826;
  float32x4_t v827;
  float32x4_t v828;
  float32x4_t v829;
  double v830;
  double v831;
  float32x4_t v832;
  float32x4_t v833;
  float32x4_t v834;
  float32x4_t v835;
  double v836;
  double v837;
  float32x4_t v838;
  float32x4_t v839;
  float32x4_t v840;
  float32x4_t v841;
  double v842;
  double v843;
  float32x4_t v844;
  float32x4_t v845;
  float32x4_t v846;
  float32x4_t v847;
  double v848;
  double v849;
  float32x4_t v850;
  float32x4_t v851;
  float32x4_t v852;
  float32x4_t v853;
  double v854;
  double v855;
  float32x4_t v856;
  float32x4_t v857;
  float32x4_t v858;
  float32x4_t v859;
  double v860;
  double v861;
  float32x4_t v862;
  float32x4_t v863;
  float32x4_t v864;
  float32x4_t v865;
  double v866;
  double v867;
  float32x4_t v868;
  float32x4_t v869;
  float32x4_t v870;
  float32x4_t v871;
  double v872;
  double v873;
  float32x4_t v874;
  float32x4_t v875;
  float32x4_t v876;
  float32x4_t v877;
  double v878;
  double v879;
  float32x4_t v880;
  float32x4_t v881;
  float32x4_t v882;
  float32x4_t v883;
  double v884;
  double v885;
  float32x4_t v886;
  float32x4_t v887;
  float32x4_t v888;
  float32x4_t v889;
  double v890;
  double v891;
  float32x4_t v892;
  float32x4_t v893;
  float32x4_t v894;
  float32x4_t v895;
  double v896;
  double v897;
  float32x4_t v898;
  float32x4_t v899;
  float32x4_t v900;
  float32x4_t v901;
  double v902;
  double v903;
  float32x4_t v904;
  float32x4_t v905;
  float32x4_t v906;
  float32x4_t v907;
  double v908;
  double v909;
  float32x4_t v910;
  float32x4_t v911;
  float32x4_t v912;
  float32x4_t v913;
  double v914;
  double v915;
  float32x4_t v916;
  float32x4_t v917;
  float32x4_t v918;
  float32x4_t v919;
  double v920;
  double v921;
  float32x4_t v922;
  float32x4_t v923;
  float32x4_t v924;
  float32x4_t v925;
  double v926;
  double v927;
  float32x4_t v928;
  float32x4_t v929;
  float32x4_t v930;
  float32x4_t v931;
  double v932;
  double v933;
  float32x4_t v934;
  float32x4_t v935;
  float32x4_t v936;
  float32x4_t v937;
  double v938;
  double v939;
  float32x4_t v940;
  float32x4_t v941;
  float32x4_t v942;
  float32x4_t v943;
  double v944;
  double v945;
  float32x4_t v946;
  float32x4_t v947;
  float32x4_t v948;
  float32x4_t v949;
  double v950;
  double v951;
  float32x4_t v952;
  float32x4_t v953;
  float32x4_t v954;
  float32x4_t v955;
  double v956;
  double v957;
  float32x4_t v958;
  float32x4_t v959;
  float32x4_t v960;
  float32x4_t v961;
  double v962;
  double v963;
  float32x4_t v964;
  float32x4_t v965;
  float32x4_t v966;
  float32x4_t v967;
  double v968;
  double v969;
  float32x4_t v970;
  float32x4_t v971;
  float32x4_t v972;
  float32x4_t v973;
  double v974;
  double v975;
  float32x4_t v976;
  float32x4_t v977;
  float32x4_t v978;
  float32x4_t v979;
  double v980;
  double v981;
  float32x4_t v982;
  float32x4_t v983;
  float32x4_t v984;
  float32x4_t v985;
  double v986;
  double v987;
  float32x4_t v988;
  float32x4_t v989;
  float32x4_t v990;
  float32x4_t v991;
  double v992;
  double v993;
  float32x4_t v994;
  float32x4_t v995;
  float32x4_t v996;
  float32x4_t v997;
  double v998;
  double v999;
  float32x4_t v1000;
  float32x4_t v1001;
  float32x4_t v1002;
  float32x4_t v1003;
  double v1004;
  double v1005;
  float32x4_t v1006;
  float32x4_t v1007;
  float32x4_t v1008;
  float32x4_t v1009;
  double v1010;
  double v1011;
  float32x4_t v1012;
  float32x4_t v1013;
  float32x4_t v1014;
  float32x4_t v1015;
  double v1016;
  double v1017;
  float32x4_t v1018;
  float32x4_t v1019;
  float32x4_t v1020;
  float32x4_t v1021;
  double v1022;
  double v1023;
  float32x4_t v1024;
  float32x4_t v1025;
  float32x4_t v1026;
  float32x4_t v1027;
  double v1028;
  double v1029;
  float32x4_t v1030;
  float32x4_t v1031;
  float32x4_t v1032;
  float32x4_t v1033;
  double v1034;
  double v1035;
  float32x4_t v1036;
  float32x4_t v1037;
  float32x4_t v1038;
  float32x4_t v1039;
  double v1040;
  double v1041;
  float32x4_t v1042;
  float32x4_t v1043;
  float32x4_t v1044;
  float32x4_t v1045;
  double v1046;
  double v1047;
  __int128 v1049;
  __int128 v1050;
  __int128 v1051;
  __int128 v1052;
  __int128 v1053;
  __int128 v1054;
  __int128 v1055;
  _OWORD v1056[2];
  _OWORD v1057[7];
  _OWORD v1058[2];
  _OWORD v1059[7];
  _OWORD v1060[2];
  _OWORD v1061[7];
  _OWORD v1062[2];
  _OWORD v1063[7];
  _OWORD v1064[2];
  _OWORD v1065[7];
  _OWORD v1066[2];
  __int128 v1067;
  __int128 v1068;
  __int128 v1069;
  __int128 v1070;
  __int128 v1071;
  __int128 v1072;
  __int128 v1073;
  _OWORD v1074[2];
  _OWORD v1075[7];
  _OWORD v1076[2];
  _OWORD v1077[7];
  _OWORD v1078[2];
  _OWORD v1079[7];
  _OWORD v1080[2];
  _OWORD v1081[7];
  _OWORD v1082[2];
  _OWORD v1083[7];
  _OWORD v1084[2];
  __int128 v1085;
  __int128 v1086;
  __int128 v1087;
  __int128 v1088;
  __int128 v1089;
  __int128 v1090;
  __int128 v1091;
  _OWORD v1092[2];
  _OWORD v1093[7];
  _OWORD v1094[2];
  _OWORD v1095[7];
  _OWORD v1096[2];
  _OWORD v1097[7];
  _OWORD v1098[2];
  _OWORD v1099[7];
  _OWORD v1100[2];
  _OWORD v1101[7];
  _OWORD v1102[2];
  __int128 v1103;
  __int128 v1104;
  __int128 v1105;
  __int128 v1106;
  __int128 v1107;
  __int128 v1108;
  __int128 v1109;
  _OWORD v1110[2];
  _OWORD v1111[7];
  _OWORD v1112[2];
  _OWORD v1113[7];
  _OWORD v1114[2];
  _OWORD v1115[7];
  _OWORD v1116[2];
  _OWORD v1117[7];
  _OWORD v1118[2];
  _OWORD v1119[7];
  _OWORD v1120[2];
  __int128 v1121;
  __int128 v1122;
  __int128 v1123;
  __int128 v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  _OWORD v1128[2];
  _OWORD v1129[7];
  _OWORD v1130[2];
  _OWORD v1131[7];
  _OWORD v1132[2];
  _OWORD v1133[7];
  _OWORD v1134[2];
  _OWORD v1135[7];
  _OWORD v1136[2];
  _OWORD v1137[7];
  _OWORD v1138[2];
  __int128 v1139;
  __int128 v1140;
  __int128 v1141;
  __int128 v1142;
  __int128 v1143;
  __int128 v1144;
  __int128 v1145;
  _OWORD v1146[2];
  _OWORD v1147[7];
  _OWORD v1148[2];
  _OWORD v1149[7];
  _OWORD v1150[2];
  _OWORD v1151[7];
  _OWORD v1152[2];
  _OWORD v1153[7];
  _OWORD v1154[2];
  _OWORD v1155[7];
  _OWORD v1156[2];
  __int128 v1157;
  __int128 v1158;
  __int128 v1159;
  __int128 v1160;
  __int128 v1161;
  __int128 v1162;
  __int128 v1163;
  _OWORD v1164[2];
  _OWORD v1165[7];
  _OWORD v1166[2];
  _OWORD v1167[7];
  _OWORD v1168[2];
  _OWORD v1169[7];
  _OWORD v1170[2];
  _OWORD v1171[7];
  _OWORD v1172[2];
  _OWORD v1173[7];
  _OWORD v1174[2];
  __int128 v1175;
  __int128 v1176;
  __int128 v1177;
  __int128 v1178;
  __int128 v1179;
  __int128 v1180;
  __int128 v1181;
  _OWORD v1182[2];
  _OWORD v1183[7];
  _OWORD v1184[2];
  _OWORD v1185[7];
  _OWORD v1186[2];
  _OWORD v1187[7];
  _OWORD v1188[2];
  _OWORD v1189[7];
  _OWORD v1190[2];
  _OWORD v1191[7];
  _OWORD v1192[2];
  __int128 v1193;
  __int128 v1194;
  __int128 v1195;
  __int128 v1196;
  __int128 v1197;
  __int128 v1198;
  __int128 v1199;
  _OWORD v1200[2];
  _OWORD v1201[7];
  _OWORD v1202[2];
  _OWORD v1203[7];
  _OWORD v1204[2];
  _OWORD v1205[7];
  _OWORD v1206[2];
  _OWORD v1207[7];
  _OWORD v1208[2];
  _OWORD v1209[7];
  _OWORD v1210[2];
  __int128 v1211;
  __int128 v1212;
  __int128 v1213;
  __int128 v1214;
  __int128 v1215;
  __int128 v1216;
  __int128 v1217;
  _OWORD v1218[2];
  _OWORD v1219[7];
  _OWORD v1220[2];
  _OWORD v1221[7];
  _OWORD v1222[2];
  _OWORD v1223[7];
  _OWORD v1224[2];
  _OWORD v1225[7];
  _OWORD v1226[2];
  _OWORD v1227[7];
  _OWORD v1228[2];
  __int128 v1229;
  __int128 v1230;
  __int128 v1231;
  __int128 v1232;
  __int128 v1233;
  __int128 v1234;
  __int128 v1235;
  _OWORD v1236[2];
  _OWORD v1237[7];
  _OWORD v1238[2];
  _OWORD v1239[7];
  _OWORD v1240[2];
  _OWORD v1241[7];
  _OWORD v1242[2];
  _OWORD v1243[7];
  _OWORD v1244[2];
  _OWORD v1245[7];
  _OWORD v1246[2];
  __int128 v1247;
  __int128 v1248;
  __int128 v1249;
  __int128 v1250;
  __int128 v1251;
  __int128 v1252;
  __int128 v1253;
  _OWORD v1254[2];
  _OWORD v1255[7];
  _OWORD v1256[2];
  _OWORD v1257[7];
  _OWORD v1258[2];
  _OWORD v1259[7];
  _OWORD v1260[2];
  _OWORD v1261[7];
  _OWORD v1262[2];
  _OWORD v1263[7];
  _OWORD v1264[2];
  __int128 v1265;
  __int128 v1266;
  __int128 v1267;
  __int128 v1268;
  __int128 v1269;
  __int128 v1270;
  __int128 v1271;
  _OWORD v1272[2];
  _OWORD v1273[7];
  _OWORD v1274[2];
  _OWORD v1275[7];
  _OWORD v1276[2];
  _OWORD v1277[7];
  _OWORD v1278[2];
  _OWORD v1279[7];
  _OWORD v1280[2];
  _OWORD v1281[7];
  _OWORD v1282[2];
  __int128 v1283;
  __int128 v1284;
  __int128 v1285;
  __int128 v1286;
  __int128 v1287;
  __int128 v1288;
  __int128 v1289;
  _OWORD v1290[2];
  _OWORD v1291[7];
  _OWORD v1292[2];
  _OWORD v1293[7];
  _OWORD v1294[2];
  _OWORD v1295[7];
  _OWORD v1296[2];
  _OWORD v1297[7];
  _OWORD v1298[2];
  _OWORD v1299[7];
  _OWORD v1300[2];
  __int128 v1301;
  __int128 v1302;
  __int128 v1303;
  __int128 v1304;
  __int128 v1305;
  __int128 v1306;
  __int128 v1307;
  _OWORD v1308[2];
  _OWORD v1309[7];
  _OWORD v1310[2];
  _OWORD v1311[7];
  _OWORD v1312[2];
  _OWORD v1313[7];
  _OWORD v1314[2];
  _OWORD v1315[7];
  _OWORD v1316[2];
  _OWORD v1317[7];
  _OWORD v1318[2];
  __int128 v1319;
  __int128 v1320;
  __int128 v1321;
  __int128 v1322;
  __int128 v1323;
  __int128 v1324;
  __int128 v1325;
  _OWORD v1326[2];
  _OWORD v1327[7];
  _OWORD v1328[2];
  _OWORD v1329[7];
  _OWORD v1330[2];
  _OWORD v1331[7];
  _OWORD v1332[2];
  _OWORD v1333[7];
  _OWORD v1334[2];
  _OWORD v1335[7];
  _OWORD v1336[2];
  __int128 v1337;
  __int128 v1338;
  __int128 v1339;
  __int128 v1340;
  __int128 v1341;
  __int128 v1342;
  __int128 v1343;
  _OWORD v1344[2];
  _OWORD v1345[7];
  _OWORD v1346[2];
  _OWORD v1347[7];
  _OWORD v1348[2];
  _OWORD v1349[7];
  _OWORD v1350[2];
  _OWORD v1351[7];
  _OWORD v1352[2];
  _OWORD v1353[7];
  _OWORD v1354[2];
  __int128 v1355;
  __int128 v1356;
  __int128 v1357;
  __int128 v1358;
  __int128 v1359;
  __int128 v1360;
  __int128 v1361;
  _OWORD v1362[2];
  _OWORD v1363[7];
  _OWORD v1364[2];
  _OWORD v1365[7];
  _OWORD v1366[2];
  _OWORD v1367[7];
  _OWORD v1368[2];
  _OWORD v1369[7];
  _OWORD v1370[2];
  _OWORD v1371[7];
  _OWORD v1372[2];
  __int128 v1373;
  __int128 v1374;
  __int128 v1375;
  __int128 v1376;
  __int128 v1377;
  __int128 v1378;
  __int128 v1379;
  _OWORD v1380[2];
  _OWORD v1381[7];
  _OWORD v1382[2];
  _OWORD v1383[7];
  _OWORD v1384[2];
  _OWORD v1385[7];
  _OWORD v1386[2];
  _OWORD v1387[7];
  _OWORD v1388[2];
  _OWORD v1389[7];
  _OWORD v1390[2];
  __int128 v1391;
  __int128 v1392;
  __int128 v1393;
  __int128 v1394;
  __int128 v1395;
  __int128 v1396;
  __int128 v1397;
  _OWORD v1398[2];
  _OWORD v1399[7];
  _OWORD v1400[2];
  _OWORD v1401[7];
  _OWORD v1402[2];
  _OWORD v1403[7];
  _OWORD v1404[2];
  _OWORD v1405[7];
  _OWORD v1406[2];
  _OWORD v1407[7];
  _OWORD v1408[2];
  __int128 v1409;
  __int128 v1410;
  __int128 v1411;
  __int128 v1412;
  __int128 v1413;
  __int128 v1414;
  __int128 v1415;
  _OWORD v1416[2];
  _OWORD v1417[7];
  _OWORD v1418[2];
  _OWORD v1419[7];
  _OWORD v1420[2];
  _OWORD v1421[7];
  _OWORD v1422[2];
  _OWORD v1423[7];
  _OWORD v1424[2];
  _OWORD v1425[7];
  _OWORD v1426[2];
  __int128 v1427;
  __int128 v1428;
  __int128 v1429;
  __int128 v1430;
  __int128 v1431;
  __int128 v1432;
  __int128 v1433;
  _OWORD v1434[2];
  _OWORD v1435[7];
  _OWORD v1436[2];
  _OWORD v1437[7];
  _OWORD v1438[2];
  _OWORD v1439[7];
  _OWORD v1440[2];
  _OWORD v1441[7];
  _OWORD v1442[2];
  _OWORD v1443[7];
  _OWORD v1444[2];
  __int128 v1445;
  __int128 v1446;
  __int128 v1447;
  __int128 v1448;
  __int128 v1449;
  __int128 v1450;
  __int128 v1451;
  _OWORD v1452[2];
  _OWORD v1453[7];
  _OWORD v1454[2];
  _OWORD v1455[7];
  _OWORD v1456[2];
  _OWORD v1457[7];
  _OWORD v1458[2];
  _OWORD v1459[7];
  _OWORD v1460[2];
  _OWORD v1461[7];
  _OWORD v1462[2];
  __int128 v1463;
  __int128 v1464;
  __int128 v1465;
  __int128 v1466;
  __int128 v1467;
  __int128 v1468;
  __int128 v1469;
  _OWORD v1470[2];
  _OWORD v1471[7];
  _OWORD v1472[2];
  _OWORD v1473[7];
  _OWORD v1474[2];
  _OWORD v1475[7];
  _OWORD v1476[2];
  _OWORD v1477[7];
  _OWORD v1478[2];
  _OWORD v1479[7];
  _OWORD v1480[2];
  __int128 v1481;
  __int128 v1482;
  __int128 v1483;
  __int128 v1484;
  __int128 v1485;
  __int128 v1486;
  __int128 v1487;
  _OWORD v1488[2];
  _OWORD v1489[7];
  _OWORD v1490[2];
  _OWORD v1491[7];
  _OWORD v1492[2];
  _OWORD v1493[7];
  _OWORD v1494[2];
  _OWORD v1495[7];
  _OWORD v1496[2];
  _OWORD v1497[7];
  _OWORD v1498[2];
  __int128 v1499;
  __int128 v1500;
  __int128 v1501;
  __int128 v1502;
  __int128 v1503;
  __int128 v1504;
  __int128 v1505;
  _OWORD v1506[2];
  _OWORD v1507[7];
  _OWORD v1508[2];
  _OWORD v1509[7];
  _OWORD v1510[2];
  _OWORD v1511[7];
  _OWORD v1512[2];
  _OWORD v1513[7];
  _OWORD v1514[2];
  _OWORD v1515[7];
  _OWORD v1516[2];
  __int128 v1517;
  __int128 v1518;
  __int128 v1519;
  __int128 v1520;
  __int128 v1521;
  __int128 v1522;
  __int128 v1523;
  _OWORD v1524[2];
  _OWORD v1525[7];
  _OWORD v1526[2];
  _OWORD v1527[7];
  _OWORD v1528[2];
  _OWORD v1529[7];
  _OWORD v1530[2];
  _OWORD v1531[7];
  _OWORD v1532[2];
  _OWORD v1533[7];
  _OWORD v1534[2];
  _OWORD v1535[7];
  _OWORD v1536[2];
  _OWORD v1537[7];
  _OWORD v1538[2];
  _OWORD v1539[7];
  _OWORD v1540[2];
  _OWORD v1541[7];
  _OWORD v1542[2];
  _OWORD v1543[7];
  _OWORD v1544[2];
  _OWORD v1545[7];
  _OWORD v1546[2];
  _OWORD v1547[7];
  _OWORD v1548[2];
  _OWORD v1549[7];
  _OWORD v1550[2];
  _OWORD v1551[7];
  _OWORD v1552[2];
  _OWORD v1553[7];
  _OWORD v1554[2];
  _OWORD v1555[7];
  _OWORD v1556[2];
  _OWORD v1557[2];
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  uint64_t v1611;
  uint64_t v1612;
  uint64_t v1613;
  uint64_t v1614;
  uint64_t v1615;
  uint64_t v1616;
  uint64_t v1617;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t v1715;
  uint64_t v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  uint64_t v1723;
  uint64_t v1724;
  uint64_t v1725;
  uint64_t v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  _QWORD v1731[2];

  v0 = (__int128 *)MEMORY[0x24BDAC7A8]();
  v1731[1] = *MEMORY[0x24BDAC8D0];
  v1558 = 0;
  v1056[0] = xmmword_2246656A8;
  v1056[1] = *(_OWORD *)dbl_2246656B8;
  sub_223B46FEC((uint64_t)v0, 4, 3, 4, (uint64_t)&v1558, (uint64_t)v1056, COERCE_DOUBLE(0x15300000152), COERCE_DOUBLE(0x15700000156), v1, v2, v3, v4, v5, v6);
  v7 = v0[5];
  v1053 = v0[4];
  v1054 = v7;
  v1055 = v0[6];
  v8 = v0[1];
  v1049 = *v0;
  v1050 = v8;
  v9 = v0[3];
  v1051 = v0[2];
  v1052 = v9;
  v1559 = 0;
  v1058[0] = xmmword_2246656C8;
  v1058[1] = *(_OWORD *)dbl_2246656D8;
  sub_223B46FEC((uint64_t)&v1049, 4, 3, 5, (uint64_t)&v1559, (uint64_t)v1058, COERCE_DOUBLE(0x15A00000153), COERCE_DOUBLE(0x15E00000157), v10, v11, v12, v13, v14, v15);
  v1057[4] = v1053;
  v1057[5] = v1054;
  v1057[6] = v1055;
  v1057[0] = v1049;
  v1057[1] = v1050;
  v1057[2] = v1051;
  v1057[3] = v1052;
  v1560 = 0;
  v1060[0] = xmmword_2246656E8;
  v1060[1] = *(_OWORD *)dbl_2246656F8;
  sub_223B46FEC((uint64_t)v1057, 5, 2, 4, (uint64_t)&v1560, (uint64_t)v1060, COERCE_DOUBLE(0x15500000154), COERCE_DOUBLE(0x17100000170), v16, v17, v18, v19, v20, v21);
  v1059[4] = v1053;
  v1059[5] = v1054;
  v1059[6] = v1055;
  v1059[0] = v1049;
  v1059[1] = v1050;
  v1059[2] = v1051;
  v1059[3] = v1052;
  v1561 = 0;
  v1062[0] = xmmword_224665708;
  v1062[1] = *(_OWORD *)dbl_224665718;
  sub_223B46FEC((uint64_t)v1059, 5, 2, 5, (uint64_t)&v1561, (uint64_t)v1062, COERCE_DOUBLE(0x15C00000155), COERCE_DOUBLE(0x17800000171), v22, v23, v24, v25, v26, v27);
  v1061[4] = v1053;
  v1061[5] = v1054;
  v1061[6] = v1055;
  v1061[0] = v1049;
  v1061[1] = v1050;
  v1061[2] = v1051;
  v1061[3] = v1052;
  v1562 = 0;
  v1064[0] = xmmword_224665728;
  v1064[1] = *(_OWORD *)dbl_224665738;
  sub_223B46FEC((uint64_t)v1061, 5, 3, 4, (uint64_t)&v1562, (uint64_t)v1064, COERCE_DOUBLE(0x15700000156), COERCE_DOUBLE(0x17300000172), v28, v29, v30, v31, v32, v33);
  v1063[4] = v1053;
  v1063[5] = v1054;
  v1063[6] = v1055;
  v1063[0] = v1049;
  v1063[1] = v1050;
  v1063[2] = v1051;
  v1063[3] = v1052;
  v1563 = 0;
  v1066[0] = xmmword_224665748;
  v1066[1] = *(_OWORD *)dbl_224665758;
  sub_223B46FEC((uint64_t)v1063, 5, 3, 5, (uint64_t)&v1563, (uint64_t)v1066, COERCE_DOUBLE(0x15E00000157), COERCE_DOUBLE(0x17A00000173), v34, v35, v36, v37, v38, v39);
  v1065[4] = v1053;
  v1065[5] = v1054;
  v1065[6] = v1055;
  v1065[0] = v1049;
  v1065[1] = v1050;
  v1065[2] = v1051;
  v1065[3] = v1052;
  v1564 = 0;
  v1074[0] = xmmword_224665768;
  v1074[1] = *(_OWORD *)dbl_224665778;
  sub_223B46FEC((uint64_t)v1065, 4, 2, 6, (uint64_t)&v1564, (uint64_t)v1074, COERCE_DOUBLE(0x15900000158), COERCE_DOUBLE(0x15D0000015CLL), v40, v41, v42, v43, v44, v45);
  v1071 = v1053;
  v1072 = v1054;
  v1073 = v1055;
  v1067 = v1049;
  v1068 = v1050;
  v1069 = v1051;
  v1070 = v1052;
  v1565 = 0x100010001000100;
  v1076[0] = xmmword_224665788;
  v1076[1] = *(_OWORD *)dbl_224665798;
  sub_223B46FEC((uint64_t)&v1067, 4, 2, 7, (uint64_t)&v1565, (uint64_t)v1076, COERCE_DOUBLE(0x11000000159), COERCE_DOUBLE(0x1140000015DLL), v46, v47, v48, v49, v50, v51);
  v1075[4] = v1053;
  v1075[5] = v1054;
  v1075[6] = v1055;
  v1075[0] = v1049;
  v1075[1] = v1050;
  v1075[3] = v1052;
  v1075[2] = v1051;
  v1566 = 0;
  v1078[0] = xmmword_2246657A8;
  v1078[1] = *(_OWORD *)dbl_2246657B8;
  sub_223B46FEC((uint64_t)v1075, 4, 3, 6, (uint64_t)&v1566, (uint64_t)v1078, COERCE_DOUBLE(0x15B0000015ALL), COERCE_DOUBLE(0x15F0000015ELL), v52, v53, v54, v55, v56, v57);
  v1077[4] = v1053;
  v1077[5] = v1054;
  v1077[6] = v1055;
  v1077[0] = v1049;
  v1077[1] = v1050;
  v1077[3] = v1052;
  v1077[2] = v1051;
  v1567 = 0x100010001000100;
  v1080[0] = xmmword_2246657C8;
  v1080[1] = *(_OWORD *)dbl_2246657D8;
  sub_223B46FEC((uint64_t)v1077, 4, 3, 7, (uint64_t)&v1567, (uint64_t)v1080, COERCE_DOUBLE(0x1120000015BLL), COERCE_DOUBLE(0x1160000015FLL), v58, v59, v60, v61, v62, v63);
  v1079[4] = v1053;
  v1079[5] = v1054;
  v1079[6] = v1055;
  v1079[0] = v1049;
  v1079[1] = v1050;
  v1079[3] = v1052;
  v1079[2] = v1051;
  v1568 = 0;
  v1082[0] = xmmword_2246657E8;
  v1082[1] = *(_OWORD *)dbl_2246657F8;
  sub_223B46FEC((uint64_t)v1079, 5, 2, 6, (uint64_t)&v1568, (uint64_t)v1082, COERCE_DOUBLE(0x15D0000015CLL), COERCE_DOUBLE(0x17900000178), v64, v65, v66, v67, v68, v69);
  v1081[4] = v1053;
  v1081[5] = v1054;
  v1081[6] = v1055;
  v1081[0] = v1049;
  v1081[1] = v1050;
  v1081[3] = v1052;
  v1081[2] = v1051;
  v1569 = 0x100010001000100;
  v1084[0] = xmmword_224665808;
  v1084[1] = *(_OWORD *)dbl_224665818;
  sub_223B46FEC((uint64_t)v1081, 5, 2, 7, (uint64_t)&v1569, (uint64_t)v1084, COERCE_DOUBLE(0x1140000015DLL), COERCE_DOUBLE(0x13000000179), v70, v71, v72, v73, v74, v75);
  v1083[4] = v1053;
  v1083[5] = v1054;
  v1083[6] = v1055;
  v1083[0] = v1049;
  v1083[1] = v1050;
  v1083[3] = v1052;
  v1083[2] = v1051;
  v1570 = 0;
  v1092[0] = xmmword_224665828;
  v1092[1] = *(_OWORD *)dbl_224665838;
  sub_223B46FEC((uint64_t)v1083, 5, 3, 6, (uint64_t)&v1570, (uint64_t)v1092, COERCE_DOUBLE(0x15F0000015ELL), COERCE_DOUBLE(0x17B0000017ALL), v76, v77, v78, v79, v80, v81);
  v1089 = v1053;
  v1090 = v1054;
  v1091 = v1055;
  v1085 = v1049;
  v1086 = v1050;
  v1088 = v1052;
  v1087 = v1051;
  v1571 = 0x100010001000100;
  v1094[0] = xmmword_224665848;
  v1094[1] = *(_OWORD *)dbl_224665858;
  sub_223B46FEC((uint64_t)&v1085, 5, 3, 7, (uint64_t)&v1571, (uint64_t)v1094, COERCE_DOUBLE(0x1160000015FLL), COERCE_DOUBLE(0x1320000017BLL), v82, v83, v84, v85, v86, v87);
  v1093[4] = v1053;
  v1093[5] = v1054;
  v1093[6] = v1055;
  v1093[0] = v1049;
  v1093[1] = v1050;
  v1093[3] = v1052;
  v1093[2] = v1051;
  v1572 = 0;
  v1096[0] = xmmword_224665868;
  v1096[1] = *(_OWORD *)dbl_224665878;
  sub_223B46FEC((uint64_t)v1093, 6, 0, 4, (uint64_t)&v1572, (uint64_t)v1096, COERCE_DOUBLE(0x16100000160), COERCE_DOUBLE(0x16500000164), v88, v89, v90, v91, v92, v93);
  v1095[4] = v1053;
  v1095[5] = v1054;
  v1095[6] = v1055;
  v1095[0] = v1049;
  v1095[1] = v1050;
  v1095[3] = v1052;
  v1095[2] = v1051;
  v1573 = 0;
  v1098[0] = xmmword_224665888;
  v1098[1] = *(_OWORD *)dbl_224665898;
  sub_223B46FEC((uint64_t)v1095, 6, 0, 5, (uint64_t)&v1573, (uint64_t)v1098, COERCE_DOUBLE(0x16800000161), COERCE_DOUBLE(0x16C00000165), v94, v95, v96, v97, v98, v99);
  v1097[4] = v1053;
  v1097[5] = v1054;
  v1097[6] = v1055;
  v1097[0] = v1049;
  v1097[1] = v1050;
  v1097[3] = v1052;
  v1097[2] = v1051;
  v1574 = 0;
  v1100[0] = xmmword_2246658A8;
  v1100[1] = *(_OWORD *)dbl_2246658B8;
  sub_223B46FEC((uint64_t)v1097, 6, 1, 4, (uint64_t)&v1574, (uint64_t)v1100, COERCE_DOUBLE(0x16300000162), COERCE_DOUBLE(0x16700000166), v100, v101, v102, v103, v104, v105);
  v1099[4] = v1053;
  v1099[5] = v1054;
  v1099[6] = v1055;
  v1099[0] = v1049;
  v1099[1] = v1050;
  v1099[3] = v1052;
  v1099[2] = v1051;
  v1575 = 0;
  v1102[0] = xmmword_2246658C8;
  v1102[1] = *(_OWORD *)dbl_2246658D8;
  sub_223B46FEC((uint64_t)v1099, 6, 1, 5, (uint64_t)&v1575, (uint64_t)v1102, COERCE_DOUBLE(0x16A00000163), COERCE_DOUBLE(0x16E00000167), v106, v107, v108, v109, v110, v111);
  v1101[4] = v1053;
  v1101[5] = v1054;
  v1101[6] = v1055;
  v1101[0] = v1049;
  v1101[1] = v1050;
  v1101[3] = v1052;
  v1101[2] = v1051;
  v1576 = 0x404040400000000;
  v1110[0] = xmmword_2246658E8;
  v1110[1] = *(_OWORD *)dbl_2246658F8;
  sub_223B46FEC((uint64_t)v1101, 7, 0, 4, (uint64_t)&v1576, (uint64_t)v1110, COERCE_DOUBLE(0x16500000164), COERCE_DOUBLE(0x4100000040), v112, v113, v114, v115, v116, v117);
  v1107 = v1053;
  v1108 = v1054;
  v1109 = v1055;
  v1103 = v1049;
  v1104 = v1050;
  v1106 = v1052;
  v1105 = v1051;
  v1577 = 0x404040400000000;
  v1112[0] = xmmword_224665908;
  v1112[1] = *(_OWORD *)dbl_224665918;
  sub_223B46FEC((uint64_t)&v1103, 7, 0, 5, (uint64_t)&v1577, (uint64_t)v1112, COERCE_DOUBLE(0x16C00000165), COERCE_DOUBLE(0x4800000041), v118, v119, v120, v121, v122, v123);
  v1111[4] = v1053;
  v1111[5] = v1054;
  v1111[6] = v1055;
  v1111[0] = v1049;
  v1111[1] = v1050;
  v1111[3] = v1052;
  v1111[2] = v1051;
  v1578 = 0x404040400000000;
  v1114[0] = xmmword_224665928;
  v1114[1] = *(_OWORD *)dbl_224665938;
  sub_223B46FEC((uint64_t)v1111, 7, 1, 4, (uint64_t)&v1578, (uint64_t)v1114, COERCE_DOUBLE(0x16700000166), COERCE_DOUBLE(0x4300000042), v124, v125, v126, v127, v128, v129);
  v1113[4] = v1053;
  v1113[5] = v1054;
  v1113[6] = v1055;
  v1113[0] = v1049;
  v1113[1] = v1050;
  v1113[3] = v1052;
  v1113[2] = v1051;
  v1579 = 0x404040400000000;
  v1116[0] = xmmword_224665948;
  v1116[1] = *(_OWORD *)dbl_224665958;
  sub_223B46FEC((uint64_t)v1113, 7, 1, 5, (uint64_t)&v1579, (uint64_t)v1116, COERCE_DOUBLE(0x16E00000167), COERCE_DOUBLE(0x4A00000043), v130, v131, v132, v133, v134, v135);
  v1115[4] = v1071;
  v1115[5] = v1072;
  v1115[6] = v1073;
  v1115[0] = v1067;
  v1115[1] = v1068;
  v1115[3] = v1070;
  v1115[2] = v1069;
  v1580 = 0;
  v1118[0] = xmmword_224665968;
  v1118[1] = *(_OWORD *)dbl_224665978;
  sub_223B46FEC((uint64_t)v1115, 6, 0, 6, (uint64_t)&v1580, (uint64_t)v1118, COERCE_DOUBLE(0x16900000168), COERCE_DOUBLE(0x16D0000016CLL), v136, v137, v138, v139, v140, v141);
  v1117[4] = v1071;
  v1117[5] = v1072;
  v1117[6] = v1073;
  v1117[0] = v1067;
  v1117[1] = v1068;
  v1117[3] = v1070;
  v1117[2] = v1069;
  v1581 = 0x100010001000100;
  v1120[0] = xmmword_224665988;
  v1120[1] = *(_OWORD *)dbl_224665998;
  sub_223B46FEC((uint64_t)v1117, 6, 0, 7, (uint64_t)&v1581, (uint64_t)v1120, COERCE_DOUBLE(0x12000000169), COERCE_DOUBLE(0x1240000016DLL), v142, v143, v144, v145, v146, v147);
  v1119[4] = v1071;
  v1119[5] = v1072;
  v1119[6] = v1073;
  v1119[0] = v1067;
  v1119[1] = v1068;
  v1119[3] = v1070;
  v1119[2] = v1069;
  v1582 = 0;
  v1128[0] = xmmword_2246659A8;
  v1128[1] = *(_OWORD *)dbl_2246659B8;
  sub_223B46FEC((uint64_t)v1119, 6, 1, 6, (uint64_t)&v1582, (uint64_t)v1128, COERCE_DOUBLE(0x16B0000016ALL), COERCE_DOUBLE(0x16F0000016ELL), v148, v149, v150, v151, v152, v153);
  v1125 = v1071;
  v1126 = v1072;
  v1127 = v1073;
  v1121 = v1067;
  v1122 = v1068;
  v1124 = v1070;
  v1123 = v1069;
  v1583 = 0x100010001000100;
  v1130[0] = xmmword_2246659C8;
  v1130[1] = *(_OWORD *)dbl_2246659D8;
  sub_223B46FEC((uint64_t)&v1121, 6, 1, 7, (uint64_t)&v1583, (uint64_t)v1130, COERCE_DOUBLE(0x1220000016BLL), COERCE_DOUBLE(0x1260000016FLL), v154, v155, v156, v157, v158, v159);
  v1129[4] = v1071;
  v1129[5] = v1072;
  v1129[6] = v1073;
  v1129[0] = v1067;
  v1129[1] = v1068;
  v1129[3] = v1070;
  v1129[2] = v1069;
  v1584 = 0x404040400000000;
  v1132[0] = xmmword_2246659E8;
  v1132[1] = *(_OWORD *)dbl_2246659F8;
  sub_223B46FEC((uint64_t)v1129, 7, 0, 6, (uint64_t)&v1584, (uint64_t)v1132, COERCE_DOUBLE(0x16D0000016CLL), COERCE_DOUBLE(0x4900000048), v160, v161, v162, v163, v164, v165);
  v1131[4] = v1071;
  v1131[5] = v1072;
  v1131[6] = v1073;
  v1131[0] = v1067;
  v1131[1] = v1068;
  v1131[3] = v1070;
  v1131[2] = v1069;
  v1585 = 0x504050401000100;
  v1134[0] = xmmword_224665A08;
  v1134[1] = *(_OWORD *)dbl_224665A18;
  sub_223B46FEC((uint64_t)v1131, 7, 0, 7, (uint64_t)&v1585, (uint64_t)v1134, COERCE_DOUBLE(0x1240000016DLL), COERCE_DOUBLE(73), v166, v167, v168, v169, v170, v171);
  v1133[4] = v1089;
  v1133[5] = v1090;
  v1133[6] = v1091;
  v1133[0] = v1085;
  v1133[1] = v1086;
  v1133[3] = v1088;
  v1133[2] = v1087;
  v1586 = 0x404040400000000;
  v1136[0] = xmmword_224665A28;
  v1136[1] = *(_OWORD *)dbl_224665A38;
  sub_223B46FEC((uint64_t)v1133, 7, 1, 6, (uint64_t)&v1586, (uint64_t)v1136, COERCE_DOUBLE(0x16F0000016ELL), COERCE_DOUBLE(0x4B0000004ALL), v172, v173, v174, v175, v176, v177);
  v1135[4] = v1089;
  v1135[5] = v1090;
  v1135[6] = v1091;
  v1135[0] = v1085;
  v1135[1] = v1086;
  v1135[3] = v1088;
  v1135[2] = v1087;
  v1587 = 0x504050401000100;
  v1138[0] = xmmword_224665A48;
  v1138[1] = *(_OWORD *)dbl_224665A58;
  sub_223B46FEC((uint64_t)v1135, 7, 1, 7, (uint64_t)&v1587, (uint64_t)v1138, COERCE_DOUBLE(0x1260000016FLL), COERCE_DOUBLE(0x20000004BLL), v178, v179, v180, v181, v182, v183);
  v1137[4] = v1089;
  v1137[5] = v1090;
  v1137[6] = v1091;
  v1137[0] = v1085;
  v1137[1] = v1086;
  v1137[3] = v1088;
  v1137[2] = v1087;
  v1588 = 0;
  v1146[0] = xmmword_224665A68;
  v1146[1] = *(_OWORD *)dbl_224665A78;
  sub_223B46FEC((uint64_t)v1137, 6, 2, 4, (uint64_t)&v1588, (uint64_t)v1146, COERCE_DOUBLE(0x17100000170), COERCE_DOUBLE(0x17500000174), v184, v185, v186, v187, v188, v189);
  v1143 = v1089;
  v1144 = v1090;
  v1145 = v1091;
  v1139 = v1085;
  v1140 = v1086;
  v1142 = v1088;
  v1141 = v1087;
  v1589 = 0;
  v1148[0] = xmmword_224665A88;
  v1148[1] = *(_OWORD *)dbl_224665A98;
  sub_223B46FEC((uint64_t)&v1139, 6, 2, 5, (uint64_t)&v1589, (uint64_t)v1148, COERCE_DOUBLE(0x17800000171), COERCE_DOUBLE(0x17C00000175), v190, v191, v192, v193, v194, v195);
  v1147[4] = v1089;
  v1147[5] = v1090;
  v1147[6] = v1091;
  v1147[0] = v1085;
  v1147[1] = v1086;
  v1147[3] = v1088;
  v1147[2] = v1087;
  v1590 = 0;
  v1150[0] = xmmword_224665AA8;
  v1150[1] = *(_OWORD *)dbl_224665AB8;
  sub_223B46FEC((uint64_t)v1147, 6, 3, 4, (uint64_t)&v1590, (uint64_t)v1150, COERCE_DOUBLE(0x17300000172), COERCE_DOUBLE(0x17700000176), v196, v197, v198, v199, v200, v201);
  v1149[4] = v1089;
  v1149[5] = v1090;
  v1149[6] = v1091;
  v1149[0] = v1085;
  v1149[1] = v1086;
  v1149[3] = v1088;
  v1149[2] = v1087;
  v1591 = 0;
  v1152[0] = xmmword_224665AC8;
  v1152[1] = *(_OWORD *)dbl_224665AD8;
  sub_223B46FEC((uint64_t)v1149, 6, 3, 5, (uint64_t)&v1591, (uint64_t)v1152, COERCE_DOUBLE(0x17A00000173), COERCE_DOUBLE(0x17E00000177), v202, v203, v204, v205, v206, v207);
  v1151[4] = v1107;
  v1151[5] = v1108;
  v1151[6] = v1109;
  v1151[0] = v1103;
  v1151[1] = v1104;
  v1151[3] = v1106;
  v1151[2] = v1105;
  v1592 = 0x404040400000000;
  v1154[0] = xmmword_224665AE8;
  v1154[1] = *(_OWORD *)dbl_224665AF8;
  sub_223B46FEC((uint64_t)v1151, 7, 2, 4, (uint64_t)&v1592, (uint64_t)v1154, COERCE_DOUBLE(0x17500000174), COERCE_DOUBLE(0x5100000050), v208, v209, v210, v211, v212, v213);
  v1153[4] = v1107;
  v1153[5] = v1108;
  v1153[6] = v1109;
  v1153[0] = v1103;
  v1153[1] = v1104;
  v1153[3] = v1106;
  v1153[2] = v1105;
  v1593 = 0x404040400000000;
  v1156[0] = xmmword_224665B08;
  v1156[1] = *(_OWORD *)dbl_224665B18;
  sub_223B46FEC((uint64_t)v1153, 7, 2, 5, (uint64_t)&v1593, (uint64_t)v1156, COERCE_DOUBLE(0x17C00000175), COERCE_DOUBLE(0x5800000051), v214, v215, v216, v217, v218, v219);
  v1155[4] = v1107;
  v1155[5] = v1108;
  v1155[6] = v1109;
  v1155[0] = v1103;
  v1155[1] = v1104;
  v1155[3] = v1106;
  v1155[2] = v1105;
  v1594 = 0x404040400000000;
  v1164[0] = xmmword_224665B28;
  v1164[1] = *(_OWORD *)dbl_224665B38;
  sub_223B46FEC((uint64_t)v1155, 7, 3, 4, (uint64_t)&v1594, (uint64_t)v1164, COERCE_DOUBLE(0x17700000176), COERCE_DOUBLE(0x5300000052), v220, v221, v222, v223, v224, v225);
  v1161 = v1107;
  v1162 = v1108;
  v1163 = v1109;
  v1157 = v1103;
  v1158 = v1104;
  v1160 = v1106;
  v1159 = v1105;
  v1595 = 0x404040400000000;
  v1166[0] = xmmword_224665B48;
  v1166[1] = *(_OWORD *)dbl_224665B58;
  sub_223B46FEC((uint64_t)&v1157, 7, 3, 5, (uint64_t)&v1595, (uint64_t)v1166, COERCE_DOUBLE(0x17E00000177), COERCE_DOUBLE(0x5A00000053), v226, v227, v228, v229, v230, v231);
  v1165[4] = v1107;
  v1165[5] = v1108;
  v1165[6] = v1109;
  v1165[0] = v1103;
  v1165[1] = v1104;
  v1165[3] = v1106;
  v1165[2] = v1105;
  v1596 = 0;
  v1168[0] = xmmword_224665B68;
  v1168[1] = *(_OWORD *)dbl_224665B78;
  sub_223B46FEC((uint64_t)v1165, 6, 2, 6, (uint64_t)&v1596, (uint64_t)v1168, COERCE_DOUBLE(0x17900000178), COERCE_DOUBLE(0x17D0000017CLL), v232, v233, v234, v235, v236, v237);
  v1167[4] = v1107;
  v1167[5] = v1108;
  v1167[6] = v1109;
  v1167[0] = v1103;
  v1167[1] = v1104;
  v1167[3] = v1106;
  v1167[2] = v1105;
  v1597 = 0x100010001000100;
  v1170[0] = xmmword_224665B88;
  v1170[1] = *(_OWORD *)dbl_224665B98;
  sub_223B46FEC((uint64_t)v1167, 6, 2, 7, (uint64_t)&v1597, (uint64_t)v1170, COERCE_DOUBLE(0x13000000179), COERCE_DOUBLE(0x1340000017DLL), v238, v239, v240, v241, v242, v243);
  v1169[4] = v1125;
  v1169[5] = v1126;
  v1169[6] = v1127;
  v1169[0] = v1121;
  v1169[1] = v1122;
  v1169[3] = v1124;
  v1169[2] = v1123;
  v1598 = 0;
  v1172[0] = xmmword_224665BA8;
  v1172[1] = *(_OWORD *)dbl_224665BB8;
  sub_223B46FEC((uint64_t)v1169, 6, 3, 6, (uint64_t)&v1598, (uint64_t)v1172, COERCE_DOUBLE(0x17B0000017ALL), COERCE_DOUBLE(0x17F0000017ELL), v244, v245, v246, v247, v248, v249);
  v1171[4] = v1125;
  v1171[5] = v1126;
  v1171[6] = v1127;
  v1171[0] = v1121;
  v1171[1] = v1122;
  v1171[3] = v1124;
  v1171[2] = v1123;
  v1599 = 0x100010001000100;
  v1174[0] = xmmword_224665BC8;
  v1174[1] = *(_OWORD *)dbl_224665BD8;
  sub_223B46FEC((uint64_t)v1171, 6, 3, 7, (uint64_t)&v1599, (uint64_t)v1174, COERCE_DOUBLE(0x1320000017BLL), COERCE_DOUBLE(0x1360000017FLL), v250, v251, v252, v253, v254, v255);
  v1173[4] = v1125;
  v1173[5] = v1126;
  v1173[6] = v1127;
  v1173[0] = v1121;
  v1173[1] = v1122;
  v1173[3] = v1124;
  v1173[2] = v1123;
  v1600 = 0x404040400000000;
  v1182[0] = xmmword_224665BE8;
  v1182[1] = *(_OWORD *)dbl_224665BF8;
  sub_223B46FEC((uint64_t)v1173, 7, 2, 6, (uint64_t)&v1600, (uint64_t)v1182, COERCE_DOUBLE(0x17D0000017CLL), COERCE_DOUBLE(0x5900000058), v256, v257, v258, v259, v260, v261);
  v1179 = v1125;
  v1180 = v1126;
  v1181 = v1127;
  v1175 = v1121;
  v1176 = v1122;
  v1178 = v1124;
  v1177 = v1123;
  v1601 = 0x504050401000100;
  v1184[0] = xmmword_224665C08;
  v1184[1] = *(_OWORD *)dbl_224665C18;
  sub_223B46FEC((uint64_t)&v1175, 7, 2, 7, (uint64_t)&v1601, (uint64_t)v1184, COERCE_DOUBLE(0x1340000017DLL), COERCE_DOUBLE(0x1000000059), v262, v263, v264, v265, v266, v267);
  v1183[4] = v1125;
  v1183[5] = v1126;
  v1183[6] = v1127;
  v1183[0] = v1121;
  v1183[1] = v1122;
  v1183[3] = v1124;
  v1183[2] = v1123;
  v1602 = 0x404040400000000;
  v1186[0] = xmmword_224665C28;
  v1186[1] = *(_OWORD *)dbl_224665C38;
  sub_223B46FEC((uint64_t)v1183, 7, 3, 6, (uint64_t)&v1602, (uint64_t)v1186, COERCE_DOUBLE(0x17F0000017ELL), COERCE_DOUBLE(0x5B0000005ALL), v268, v269, v270, v271, v272, v273);
  v1185[4] = v1125;
  v1185[5] = v1126;
  v1185[6] = v1127;
  v1185[0] = v1121;
  v1185[1] = v1122;
  v1185[3] = v1124;
  v1185[2] = v1123;
  v1603 = 0x504050401000100;
  v1188[0] = xmmword_224665C48;
  v1188[1] = *(_OWORD *)dbl_224665C58;
  sub_223B46FEC((uint64_t)v1185, 7, 3, 7, (uint64_t)&v1603, (uint64_t)v1188, COERCE_DOUBLE(0x1360000017FLL), COERCE_DOUBLE(0x120000005BLL), v274, v275, v276, v277, v278, v279);
  v1187[4] = v1143;
  v1187[5] = v1144;
  v1187[6] = v1145;
  v1187[0] = v1139;
  v1187[1] = v1140;
  v1187[3] = v1142;
  v1187[2] = v1141;
  v1604 = 0;
  v1190[0] = xmmword_224665C68;
  v1190[1] = *(_OWORD *)dbl_224665C78;
  sub_223B46FEC((uint64_t)v1187, 4, 4, 0, (uint64_t)&v1604, (uint64_t)v1190, COERCE_DOUBLE(0x18100000180), COERCE_DOUBLE(0x18500000184), v280, v281, v282, v283, v284, v285);
  v1189[4] = v1143;
  v1189[5] = v1144;
  v1189[6] = v1145;
  v1189[0] = v1139;
  v1189[1] = v1140;
  v1189[3] = v1142;
  v1189[2] = v1141;
  v1605 = 0;
  v1192[0] = xmmword_224665C88;
  v1192[1] = *(_OWORD *)dbl_224665C98;
  sub_223B46FEC((uint64_t)v1189, 4, 4, 1, (uint64_t)&v1605, (uint64_t)v1192, COERCE_DOUBLE(0x18800000181), COERCE_DOUBLE(0x18C00000185), v286, v287, v288, v289, v290, v291);
  v1191[4] = v1143;
  v1191[5] = v1144;
  v1191[6] = v1145;
  v1191[0] = v1139;
  v1191[1] = v1140;
  v1191[3] = v1142;
  v1191[2] = v1141;
  v1606 = 0;
  v1200[0] = xmmword_224665CA8;
  v1200[1] = *(_OWORD *)dbl_224665CB8;
  sub_223B46FEC((uint64_t)v1191, 4, 5, 0, (uint64_t)&v1606, (uint64_t)v1200, COERCE_DOUBLE(0x18300000182), COERCE_DOUBLE(0x18700000186), v292, v293, v294, v295, v296, v297);
  v1197 = v1143;
  v1198 = v1144;
  v1199 = v1145;
  v1193 = v1139;
  v1194 = v1140;
  v1196 = v1142;
  v1195 = v1141;
  v1607 = 0;
  v1202[0] = xmmword_224665CC8;
  v1202[1] = *(_OWORD *)dbl_224665CD8;
  sub_223B46FEC((uint64_t)&v1193, 4, 5, 1, (uint64_t)&v1607, (uint64_t)v1202, COERCE_DOUBLE(0x18A00000183), COERCE_DOUBLE(0x18E00000187), v298, v299, v300, v301, v302, v303);
  v1201[4] = v1143;
  v1201[5] = v1144;
  v1201[6] = v1145;
  v1201[0] = v1139;
  v1201[1] = v1140;
  v1201[3] = v1142;
  v1201[2] = v1141;
  v1608 = 0;
  v1204[0] = xmmword_224665CE8;
  v1204[1] = *(_OWORD *)dbl_224665CF8;
  sub_223B46FEC((uint64_t)v1201, 5, 4, 0, (uint64_t)&v1608, (uint64_t)v1204, COERCE_DOUBLE(0x18500000184), COERCE_DOUBLE(0x1A1000001A0), v304, v305, v306, v307, v308, v309);
  v1203[4] = v1143;
  v1203[5] = v1144;
  v1203[6] = v1145;
  v1203[0] = v1139;
  v1203[1] = v1140;
  v1203[3] = v1142;
  v1203[2] = v1141;
  v1609 = 0;
  v1206[0] = xmmword_224665D08;
  v1206[1] = *(_OWORD *)dbl_224665D18;
  sub_223B46FEC((uint64_t)v1203, 5, 4, 1, (uint64_t)&v1609, (uint64_t)v1206, COERCE_DOUBLE(0x18C00000185), COERCE_DOUBLE(0x1A8000001A1), v310, v311, v312, v313, v314, v315);
  v1205[4] = v1161;
  v1205[5] = v1162;
  v1205[6] = v1163;
  v1205[0] = v1157;
  v1205[1] = v1158;
  v1205[3] = v1160;
  v1205[2] = v1159;
  v1610 = 0;
  v1208[0] = xmmword_224665D28;
  v1208[1] = *(_OWORD *)dbl_224665D38;
  sub_223B46FEC((uint64_t)v1205, 5, 5, 0, (uint64_t)&v1610, (uint64_t)v1208, COERCE_DOUBLE(0x18700000186), COERCE_DOUBLE(0x1A3000001A2), v316, v317, v318, v319, v320, v321);
  v1207[4] = v1161;
  v1207[5] = v1162;
  v1207[6] = v1163;
  v1207[0] = v1157;
  v1207[1] = v1158;
  v1207[3] = v1160;
  v1207[2] = v1159;
  v1611 = 0;
  v1210[0] = xmmword_224665D48;
  v1210[1] = *(_OWORD *)dbl_224665D58;
  sub_223B46FEC((uint64_t)v1207, 5, 5, 1, (uint64_t)&v1611, (uint64_t)v1210, COERCE_DOUBLE(0x18E00000187), COERCE_DOUBLE(0x1AA000001A3), v322, v323, v324, v325, v326, v327);
  v1209[4] = v1161;
  v1209[5] = v1162;
  v1209[6] = v1163;
  v1209[0] = v1157;
  v1209[1] = v1158;
  v1209[3] = v1160;
  v1209[2] = v1159;
  v1612 = 0;
  v1218[0] = xmmword_224665D68;
  v1218[1] = *(_OWORD *)dbl_224665D78;
  sub_223B46FEC((uint64_t)v1209, 4, 4, 2, (uint64_t)&v1612, (uint64_t)v1218, COERCE_DOUBLE(0x18900000188), COERCE_DOUBLE(0x18D0000018CLL), v328, v329, v330, v331, v332, v333);
  v1215 = v1161;
  v1216 = v1162;
  v1217 = v1163;
  v1211 = v1157;
  v1212 = v1158;
  v1214 = v1160;
  v1213 = v1159;
  v1613 = 0;
  v1220[0] = xmmword_224665D88;
  v1220[1] = *(_OWORD *)dbl_224665D98;
  sub_223B46FEC((uint64_t)&v1211, 4, 4, 3, (uint64_t)&v1613, (uint64_t)v1220, COERCE_DOUBLE(0x1C000000189), COERCE_DOUBLE(0x1C40000018DLL), v334, v335, v336, v337, v338, v339);
  v1219[4] = v1161;
  v1219[5] = v1162;
  v1219[6] = v1163;
  v1219[0] = v1157;
  v1219[1] = v1158;
  v1219[3] = v1160;
  v1219[2] = v1159;
  v1614 = 0;
  v1222[0] = xmmword_224665DA8;
  v1222[1] = *(_OWORD *)dbl_224665DB8;
  sub_223B46FEC((uint64_t)v1219, 4, 5, 2, (uint64_t)&v1614, (uint64_t)v1222, COERCE_DOUBLE(0x18B0000018ALL), COERCE_DOUBLE(0x18F0000018ELL), v340, v341, v342, v343, v344, v345);
  v1221[4] = v1161;
  v1221[5] = v1162;
  v1221[6] = v1163;
  v1221[0] = v1157;
  v1221[1] = v1158;
  v1221[3] = v1160;
  v1221[2] = v1159;
  v1615 = 0;
  v1224[0] = xmmword_224665DC8;
  v1224[1] = *(_OWORD *)dbl_224665DD8;
  sub_223B46FEC((uint64_t)v1221, 4, 5, 3, (uint64_t)&v1615, (uint64_t)v1224, COERCE_DOUBLE(0x1C20000018BLL), COERCE_DOUBLE(0x1C60000018FLL), v346, v347, v348, v349, v350, v351);
  v1223[4] = v1179;
  v1223[5] = v1180;
  v1223[6] = v1181;
  v1223[0] = v1175;
  v1223[1] = v1176;
  v1223[3] = v1178;
  v1223[2] = v1177;
  v1616 = 0;
  v1226[0] = xmmword_224665DE8;
  v1226[1] = *(_OWORD *)dbl_224665DF8;
  sub_223B46FEC((uint64_t)v1223, 5, 4, 2, (uint64_t)&v1616, (uint64_t)v1226, COERCE_DOUBLE(0x18D0000018CLL), COERCE_DOUBLE(0x1A9000001A8), v352, v353, v354, v355, v356, v357);
  v1225[4] = v1179;
  v1225[5] = v1180;
  v1225[6] = v1181;
  v1225[0] = v1175;
  v1225[1] = v1176;
  v1225[3] = v1178;
  v1225[2] = v1177;
  v1617 = 0;
  v1228[0] = xmmword_224665E08;
  v1228[1] = *(_OWORD *)dbl_224665E18;
  sub_223B46FEC((uint64_t)v1225, 5, 4, 3, (uint64_t)&v1617, (uint64_t)v1228, COERCE_DOUBLE(0x1C40000018DLL), COERCE_DOUBLE(0x1E0000001A9), v358, v359, v360, v361, v362, v363);
  v1227[4] = v1179;
  v1227[5] = v1180;
  v1227[6] = v1181;
  v1227[0] = v1175;
  v1227[1] = v1176;
  v1227[3] = v1178;
  v1227[2] = v1177;
  v1618 = 0;
  v1236[0] = xmmword_224665E28;
  v1236[1] = *(_OWORD *)dbl_224665E38;
  sub_223B46FEC((uint64_t)v1227, 5, 5, 2, (uint64_t)&v1618, (uint64_t)v1236, COERCE_DOUBLE(0x18F0000018ELL), COERCE_DOUBLE(0x1AB000001AALL), v364, v365, v366, v367, v368, v369);
  v1233 = v1179;
  v1234 = v1180;
  v1235 = v1181;
  v1229 = v1175;
  v1230 = v1176;
  v1232 = v1178;
  v1231 = v1177;
  v1619 = 0;
  v1238[0] = xmmword_224665E48;
  v1238[1] = *(_OWORD *)dbl_224665E58;
  sub_223B46FEC((uint64_t)&v1229, 5, 5, 3, (uint64_t)&v1619, (uint64_t)v1238, COERCE_DOUBLE(0x1C60000018FLL), COERCE_DOUBLE(0x1E2000001ABLL), v370, v371, v372, v373, v374, v375);
  v1237[4] = v1179;
  v1237[5] = v1180;
  v1237[6] = v1181;
  v1237[0] = v1175;
  v1237[1] = v1176;
  v1237[3] = v1178;
  v1237[2] = v1177;
  v1620 = 0;
  v1240[0] = xmmword_224665E68;
  v1240[1] = *(_OWORD *)dbl_224665E78;
  sub_223B46FEC((uint64_t)v1237, 4, 6, 0, (uint64_t)&v1620, (uint64_t)v1240, COERCE_DOUBLE(0x19100000190), COERCE_DOUBLE(0x19500000194), v376, v377, v378, v379, v380, v381);
  v1239[4] = v1179;
  v1239[5] = v1180;
  v1239[6] = v1181;
  v1239[0] = v1175;
  v1239[1] = v1176;
  v1239[3] = v1178;
  v1239[2] = v1177;
  v1621 = 0;
  v1242[0] = xmmword_224665E88;
  v1242[1] = *(_OWORD *)dbl_224665E98;
  sub_223B46FEC((uint64_t)v1239, 4, 6, 1, (uint64_t)&v1621, (uint64_t)v1242, COERCE_DOUBLE(0x19800000191), COERCE_DOUBLE(0x19C00000195), v382, v383, v384, v385, v386, v387);
  v1241[4] = v1197;
  v1241[5] = v1198;
  v1241[6] = v1199;
  v1241[0] = v1193;
  v1241[1] = v1194;
  v1241[3] = v1196;
  v1241[2] = v1195;
  v1622 = 0x202000002020000;
  v1244[0] = xmmword_224665EA8;
  v1244[1] = *(_OWORD *)dbl_224665EB8;
  sub_223B46FEC((uint64_t)v1241, 4, 7, 0, (uint64_t)&v1622, (uint64_t)v1244, COERCE_DOUBLE(0x19300000192), COERCE_DOUBLE(0x19700000196), v388, v389, v390, v391, v392, v393);
  v1243[4] = v1197;
  v1243[5] = v1198;
  v1243[6] = v1199;
  v1243[0] = v1193;
  v1243[1] = v1194;
  v1243[3] = v1196;
  v1243[2] = v1195;
  v1623 = 0x202000002020000;
  v1246[0] = xmmword_224665EC8;
  v1246[1] = *(_OWORD *)dbl_224665ED8;
  sub_223B46FEC((uint64_t)v1243, 4, 7, 1, (uint64_t)&v1623, (uint64_t)v1246, COERCE_DOUBLE(0x19A00000193), COERCE_DOUBLE(0x19E00000197), v394, v395, v396, v397, v398, v399);
  v1245[4] = v1197;
  v1245[5] = v1198;
  v1245[6] = v1199;
  v1245[0] = v1193;
  v1245[1] = v1194;
  v1245[3] = v1196;
  v1245[2] = v1195;
  v1624 = 0;
  v1254[0] = xmmword_224665EE8;
  v1254[1] = *(_OWORD *)dbl_224665EF8;
  sub_223B46FEC((uint64_t)v1245, 5, 6, 0, (uint64_t)&v1624, (uint64_t)v1254, COERCE_DOUBLE(0x19500000194), COERCE_DOUBLE(0x1B1000001B0), v400, v401, v402, v403, v404, v405);
  v1251 = v1197;
  v1252 = v1198;
  v1253 = v1199;
  v1247 = v1193;
  v1248 = v1194;
  v1250 = v1196;
  v1249 = v1195;
  v1625 = 0;
  v1256[0] = xmmword_224665F08;
  v1256[1] = *(_OWORD *)dbl_224665F18;
  sub_223B46FEC((uint64_t)&v1247, 5, 6, 1, (uint64_t)&v1625, (uint64_t)v1256, COERCE_DOUBLE(0x19C00000195), COERCE_DOUBLE(0x1B8000001B1), v406, v407, v408, v409, v410, v411);
  v1255[4] = v1197;
  v1255[5] = v1198;
  v1255[6] = v1199;
  v1255[0] = v1193;
  v1255[1] = v1194;
  v1255[3] = v1196;
  v1255[2] = v1195;
  v1626 = 0x202000002020000;
  v1258[0] = xmmword_224665F28;
  v1258[1] = *(_OWORD *)dbl_224665F38;
  sub_223B46FEC((uint64_t)v1255, 5, 7, 0, (uint64_t)&v1626, (uint64_t)v1258, COERCE_DOUBLE(0x19700000196), COERCE_DOUBLE(0x1B3000001B2), v412, v413, v414, v415, v416, v417);
  v1257[4] = v1197;
  v1257[5] = v1198;
  v1257[6] = v1199;
  v1257[0] = v1193;
  v1257[1] = v1194;
  v1257[3] = v1196;
  v1257[2] = v1195;
  v1627 = 0x202000002020000;
  v1260[0] = xmmword_224665F48;
  v1260[1] = *(_OWORD *)dbl_224665F58;
  sub_223B46FEC((uint64_t)v1257, 5, 7, 1, (uint64_t)&v1627, (uint64_t)v1260, COERCE_DOUBLE(0x19E00000197), COERCE_DOUBLE(0x1BA000001B3), v418, v419, v420, v421, v422, v423);
  v1259[4] = v1215;
  v1259[5] = v1216;
  v1259[6] = v1217;
  v1259[0] = v1211;
  v1259[1] = v1212;
  v1259[3] = v1214;
  v1259[2] = v1213;
  v1628 = 0;
  v1262[0] = xmmword_224665F68;
  v1262[1] = *(_OWORD *)dbl_224665F78;
  sub_223B46FEC((uint64_t)v1259, 4, 6, 2, (uint64_t)&v1628, (uint64_t)v1262, COERCE_DOUBLE(0x19900000198), COERCE_DOUBLE(0x19D0000019CLL), v424, v425, v426, v427, v428, v429);
  v1261[4] = v1215;
  v1261[5] = v1216;
  v1261[6] = v1217;
  v1261[0] = v1211;
  v1261[1] = v1212;
  v1261[3] = v1214;
  v1261[2] = v1213;
  v1629 = 0;
  v1264[0] = xmmword_224665F88;
  v1264[1] = *(_OWORD *)dbl_224665F98;
  sub_223B46FEC((uint64_t)v1261, 4, 6, 3, (uint64_t)&v1629, (uint64_t)v1264, COERCE_DOUBLE(0x1D000000199), COERCE_DOUBLE(0x1D40000019DLL), v430, v431, v432, v433, v434, v435);
  v1263[4] = v1215;
  v1263[5] = v1216;
  v1263[6] = v1217;
  v1263[0] = v1211;
  v1263[1] = v1212;
  v1263[3] = v1214;
  v1263[2] = v1213;
  v1630 = 0x202000002020000;
  v1272[0] = xmmword_224665FA8;
  v1272[1] = *(_OWORD *)dbl_224665FB8;
  sub_223B46FEC((uint64_t)v1263, 4, 7, 2, (uint64_t)&v1630, (uint64_t)v1272, COERCE_DOUBLE(0x19B0000019ALL), COERCE_DOUBLE(0x19F0000019ELL), v436, v437, v438, v439, v440, v441);
  v1269 = v1215;
  v1270 = v1216;
  v1271 = v1217;
  v1265 = v1211;
  v1266 = v1212;
  v1268 = v1214;
  v1267 = v1213;
  v1631 = 0x202000002020000;
  v1274[0] = xmmword_224665FC8;
  v1274[1] = *(_OWORD *)dbl_224665FD8;
  sub_223B46FEC((uint64_t)&v1265, 4, 7, 3, (uint64_t)&v1631, (uint64_t)v1274, COERCE_DOUBLE(0x1D20000019BLL), COERCE_DOUBLE(0x1D60000019FLL), v442, v443, v444, v445, v446, v447);
  v1273[4] = v1215;
  v1273[5] = v1216;
  v1273[6] = v1217;
  v1273[0] = v1211;
  v1273[1] = v1212;
  v1273[3] = v1214;
  v1273[2] = v1213;
  v1632 = 0;
  v1276[0] = xmmword_224665FE8;
  v1276[1] = *(_OWORD *)dbl_224665FF8;
  sub_223B46FEC((uint64_t)v1273, 5, 6, 2, (uint64_t)&v1632, (uint64_t)v1276, COERCE_DOUBLE(0x19D0000019CLL), COERCE_DOUBLE(0x1B9000001B8), v448, v449, v450, v451, v452, v453);
  v1275[4] = v1215;
  v1275[5] = v1216;
  v1275[6] = v1217;
  v1275[0] = v1211;
  v1275[1] = v1212;
  v1275[3] = v1214;
  v1275[2] = v1213;
  v1633 = 0;
  v1278[0] = xmmword_224666008;
  v1278[1] = *(_OWORD *)dbl_224666018;
  sub_223B46FEC((uint64_t)v1275, 5, 6, 3, (uint64_t)&v1633, (uint64_t)v1278, COERCE_DOUBLE(0x1D40000019DLL), COERCE_DOUBLE(0x1F0000001B9), v454, v455, v456, v457, v458, v459);
  v1277[4] = v1233;
  v1277[5] = v1234;
  v1277[6] = v1235;
  v1277[0] = v1229;
  v1277[1] = v1230;
  v1277[3] = v1232;
  v1277[2] = v1231;
  v1634 = 0x202000002020000;
  v1280[0] = xmmword_224666028;
  v1280[1] = *(_OWORD *)dbl_224666038;
  sub_223B46FEC((uint64_t)v1277, 5, 7, 2, (uint64_t)&v1634, (uint64_t)v1280, COERCE_DOUBLE(0x19F0000019ELL), COERCE_DOUBLE(0x1BB000001BALL), v460, v461, v462, v463, v464, v465);
  v1279[4] = v1233;
  v1279[5] = v1234;
  v1279[6] = v1235;
  v1279[0] = v1229;
  v1279[1] = v1230;
  v1279[3] = v1232;
  v1279[2] = v1231;
  v1635 = 0x202000002020000;
  v1282[0] = xmmword_224666048;
  v1282[1] = *(_OWORD *)dbl_224666058;
  sub_223B46FEC((uint64_t)v1279, 5, 7, 3, (uint64_t)&v1635, (uint64_t)v1282, COERCE_DOUBLE(0x1D60000019FLL), COERCE_DOUBLE(0x1F2000001BBLL), v466, v467, v468, v469, v470, v471);
  v1281[4] = v1233;
  v1281[5] = v1234;
  v1281[6] = v1235;
  v1281[0] = v1229;
  v1281[1] = v1230;
  v1281[3] = v1232;
  v1281[2] = v1231;
  v1636 = 0;
  v1290[0] = xmmword_224666068;
  v1290[1] = *(_OWORD *)dbl_224666078;
  sub_223B46FEC((uint64_t)v1281, 6, 4, 0, (uint64_t)&v1636, (uint64_t)v1290, COERCE_DOUBLE(0x1A1000001A0), COERCE_DOUBLE(0x1A5000001A4), v472, v473, v474, v475, v476, v477);
  v1287 = v1233;
  v1288 = v1234;
  v1289 = v1235;
  v1283 = v1229;
  v1284 = v1230;
  v1286 = v1232;
  v1285 = v1231;
  v1637 = 0;
  v1292[0] = xmmword_224666088;
  v1292[1] = *(_OWORD *)dbl_224666098;
  sub_223B46FEC((uint64_t)&v1283, 6, 4, 1, (uint64_t)&v1637, (uint64_t)v1292, COERCE_DOUBLE(0x1A8000001A1), COERCE_DOUBLE(0x1AC000001A5), v478, v479, v480, v481, v482, v483);
  v1291[4] = v1233;
  v1291[5] = v1234;
  v1291[6] = v1235;
  v1291[0] = v1229;
  v1291[1] = v1230;
  v1291[3] = v1232;
  v1291[2] = v1231;
  v1638 = 0;
  v1294[0] = xmmword_2246660A8;
  v1294[1] = *(_OWORD *)dbl_2246660B8;
  sub_223B46FEC((uint64_t)v1291, 6, 5, 0, (uint64_t)&v1638, (uint64_t)v1294, COERCE_DOUBLE(0x1A3000001A2), COERCE_DOUBLE(0x1A7000001A6), v484, v485, v486, v487, v488, v489);
  v1293[4] = v1233;
  v1293[5] = v1234;
  v1293[6] = v1235;
  v1293[0] = v1229;
  v1293[1] = v1230;
  v1293[3] = v1232;
  v1293[2] = v1231;
  v1639 = 0;
  v1296[0] = xmmword_2246660C8;
  v1296[1] = *(_OWORD *)dbl_2246660D8;
  sub_223B46FEC((uint64_t)v1293, 6, 5, 1, (uint64_t)&v1639, (uint64_t)v1296, COERCE_DOUBLE(0x1AA000001A3), COERCE_DOUBLE(0x1AE000001A7), v490, v491, v492, v493, v494, v495);
  v1295[4] = v1251;
  v1295[5] = v1252;
  v1295[6] = v1253;
  v1295[0] = v1247;
  v1295[1] = v1248;
  v1295[3] = v1250;
  v1295[2] = v1249;
  v1640 = 0x404040400000000;
  v1298[0] = xmmword_2246660E8;
  v1298[1] = *(_OWORD *)dbl_2246660F8;
  sub_223B46FEC((uint64_t)v1295, 7, 4, 0, (uint64_t)&v1640, (uint64_t)v1298, COERCE_DOUBLE(0x1A5000001A4), COERCE_DOUBLE(0x8100000080), v496, v497, v498, v499, v500, v501);
  v1297[4] = v1251;
  v1297[5] = v1252;
  v1297[6] = v1253;
  v1297[0] = v1247;
  v1297[1] = v1248;
  v1297[3] = v1250;
  v1297[2] = v1249;
  v1641 = 0x404040400000000;
  v1300[0] = xmmword_224666108;
  v1300[1] = *(_OWORD *)dbl_224666118;
  sub_223B46FEC((uint64_t)v1297, 7, 4, 1, (uint64_t)&v1641, (uint64_t)v1300, COERCE_DOUBLE(0x1AC000001A5), COERCE_DOUBLE(0x8800000081), v502, v503, v504, v505, v506, v507);
  v1299[4] = v1251;
  v1299[5] = v1252;
  v1299[6] = v1253;
  v1299[0] = v1247;
  v1299[1] = v1248;
  v1299[3] = v1250;
  v1299[2] = v1249;
  v1642 = 0x404040400000000;
  v1308[0] = xmmword_224666128;
  v1308[1] = *(_OWORD *)dbl_224666138;
  sub_223B46FEC((uint64_t)v1299, 7, 5, 0, (uint64_t)&v1642, (uint64_t)v1308, COERCE_DOUBLE(0x1A7000001A6), COERCE_DOUBLE(0x8300000082), v508, v509, v510, v511, v512, v513);
  v1305 = v1251;
  v1306 = v1252;
  v1307 = v1253;
  v1301 = v1247;
  v1302 = v1248;
  v1304 = v1250;
  v1303 = v1249;
  v1643 = 0x404040400000000;
  v1310[0] = xmmword_224666148;
  v1310[1] = *(_OWORD *)dbl_224666158;
  sub_223B46FEC((uint64_t)&v1301, 7, 5, 1, (uint64_t)&v1643, (uint64_t)v1310, COERCE_DOUBLE(0x1AE000001A7), COERCE_DOUBLE(0x8A00000083), v514, v515, v516, v517, v518, v519);
  v1309[4] = v1251;
  v1309[5] = v1252;
  v1309[6] = v1253;
  v1309[0] = v1247;
  v1309[1] = v1248;
  v1309[3] = v1250;
  v1309[2] = v1249;
  v1644 = 0;
  v1312[0] = xmmword_224666168;
  v1312[1] = *(_OWORD *)dbl_224666178;
  sub_223B46FEC((uint64_t)v1309, 6, 4, 2, (uint64_t)&v1644, (uint64_t)v1312, COERCE_DOUBLE(0x1A9000001A8), COERCE_DOUBLE(0x1AD000001ACLL), v520, v521, v522, v523, v524, v525);
  v1311[4] = v1251;
  v1311[5] = v1252;
  v1311[6] = v1253;
  v1311[0] = v1247;
  v1311[1] = v1248;
  v1311[3] = v1250;
  v1311[2] = v1249;
  v1645 = 0;
  v1314[0] = xmmword_224666188;
  v1314[1] = *(_OWORD *)dbl_224666198;
  sub_223B46FEC((uint64_t)v1311, 6, 4, 3, (uint64_t)&v1645, (uint64_t)v1314, COERCE_DOUBLE(0x1E0000001A9), COERCE_DOUBLE(0x1E4000001ADLL), v526, v527, v528, v529, v530, v531);
  v1313[4] = v1269;
  v1313[5] = v1270;
  v1313[6] = v1271;
  v1313[0] = v1265;
  v1313[1] = v1266;
  v1313[3] = v1268;
  v1313[2] = v1267;
  v1646 = 0;
  v1316[0] = xmmword_2246661A8;
  v1316[1] = *(_OWORD *)dbl_2246661B8;
  sub_223B46FEC((uint64_t)v1313, 6, 5, 2, (uint64_t)&v1646, (uint64_t)v1316, COERCE_DOUBLE(0x1AB000001AALL), COERCE_DOUBLE(0x1AF000001AELL), v532, v533, v534, v535, v536, v537);
  v1315[4] = v1269;
  v1315[5] = v1270;
  v1315[6] = v1271;
  v1315[0] = v1265;
  v1315[1] = v1266;
  v1315[3] = v1268;
  v1315[2] = v1267;
  v1647 = 0;
  v1318[0] = xmmword_2246661C8;
  v1318[1] = *(_OWORD *)dbl_2246661D8;
  sub_223B46FEC((uint64_t)v1315, 6, 5, 3, (uint64_t)&v1647, (uint64_t)v1318, COERCE_DOUBLE(0x1E2000001ABLL), COERCE_DOUBLE(0x1E6000001AFLL), v538, v539, v540, v541, v542, v543);
  v1317[4] = v1269;
  v1317[5] = v1270;
  v1317[6] = v1271;
  v1317[0] = v1265;
  v1317[1] = v1266;
  v1317[3] = v1268;
  v1317[2] = v1267;
  v1648 = 0x404040400000000;
  v1326[0] = xmmword_2246661E8;
  v1326[1] = *(_OWORD *)dbl_2246661F8;
  sub_223B46FEC((uint64_t)v1317, 7, 4, 2, (uint64_t)&v1648, (uint64_t)v1326, COERCE_DOUBLE(0x1AD000001ACLL), COERCE_DOUBLE(0x8900000088), v544, v545, v546, v547, v548, v549);
  v1323 = v1269;
  v1324 = v1270;
  v1325 = v1271;
  v1319 = v1265;
  v1320 = v1266;
  v1322 = v1268;
  v1321 = v1267;
  v1649 = 0x404040400000000;
  v1328[0] = xmmword_224666208;
  v1328[1] = *(_OWORD *)dbl_224666218;
  sub_223B46FEC((uint64_t)&v1319, 7, 4, 3, (uint64_t)&v1649, (uint64_t)v1328, COERCE_DOUBLE(0x1E4000001ADLL), COERCE_DOUBLE(0xC000000089), v550, v551, v552, v553, v554, v555);
  v1327[4] = v1269;
  v1327[5] = v1270;
  v1327[6] = v1271;
  v1327[0] = v1265;
  v1327[1] = v1266;
  v1327[3] = v1268;
  v1327[2] = v1267;
  v1650 = 0x404040400000000;
  v1330[0] = xmmword_224666228;
  v1330[1] = *(_OWORD *)dbl_224666238;
  sub_223B46FEC((uint64_t)v1327, 7, 5, 2, (uint64_t)&v1650, (uint64_t)v1330, COERCE_DOUBLE(0x1AF000001AELL), COERCE_DOUBLE(0x8B0000008ALL), v556, v557, v558, v559, v560, v561);
  v1329[4] = v1269;
  v1329[5] = v1270;
  v1329[6] = v1271;
  v1329[0] = v1265;
  v1329[1] = v1266;
  v1329[3] = v1268;
  v1329[2] = v1267;
  v1651 = 0x404040400000000;
  v1332[0] = xmmword_224666248;
  v1332[1] = *(_OWORD *)dbl_224666258;
  sub_223B46FEC((uint64_t)v1329, 7, 5, 3, (uint64_t)&v1651, (uint64_t)v1332, COERCE_DOUBLE(0x1E6000001AFLL), COERCE_DOUBLE(0xC20000008BLL), v562, v563, v564, v565, v566, v567);
  v1331[4] = v1287;
  v1331[5] = v1288;
  v1331[6] = v1289;
  v1331[0] = v1283;
  v1331[1] = v1284;
  v1331[3] = v1286;
  v1331[2] = v1285;
  v1652 = 0;
  v1334[0] = xmmword_224666268;
  v1334[1] = *(_OWORD *)dbl_224666278;
  sub_223B46FEC((uint64_t)v1331, 6, 6, 0, (uint64_t)&v1652, (uint64_t)v1334, COERCE_DOUBLE(0x1B1000001B0), COERCE_DOUBLE(0x1B5000001B4), v568, v569, v570, v571, v572, v573);
  v1333[4] = v1287;
  v1333[5] = v1288;
  v1333[6] = v1289;
  v1333[0] = v1283;
  v1333[1] = v1284;
  v1333[3] = v1286;
  v1333[2] = v1285;
  v1653 = 0;
  v1336[0] = xmmword_224666288;
  v1336[1] = *(_OWORD *)dbl_224666298;
  sub_223B46FEC((uint64_t)v1333, 6, 6, 1, (uint64_t)&v1653, (uint64_t)v1336, COERCE_DOUBLE(0x1B8000001B1), COERCE_DOUBLE(0x1BC000001B5), v574, v575, v576, v577, v578, v579);
  v1335[4] = v1287;
  v1335[5] = v1288;
  v1335[6] = v1289;
  v1335[0] = v1283;
  v1335[1] = v1284;
  v1335[3] = v1286;
  v1335[2] = v1285;
  v1654 = 0x202000002020000;
  v1344[0] = xmmword_2246662A8;
  v1344[1] = *(_OWORD *)dbl_2246662B8;
  sub_223B46FEC((uint64_t)v1335, 6, 7, 0, (uint64_t)&v1654, (uint64_t)v1344, COERCE_DOUBLE(0x1B3000001B2), COERCE_DOUBLE(0x1B7000001B6), v580, v581, v582, v583, v584, v585);
  v1341 = v1287;
  v1342 = v1288;
  v1343 = v1289;
  v1337 = v1283;
  v1338 = v1284;
  v1340 = v1286;
  v1339 = v1285;
  v1655 = 0x202000002020000;
  v1346[0] = xmmword_2246662C8;
  v1346[1] = *(_OWORD *)dbl_2246662D8;
  sub_223B46FEC((uint64_t)&v1337, 6, 7, 1, (uint64_t)&v1655, (uint64_t)v1346, COERCE_DOUBLE(0x1BA000001B3), COERCE_DOUBLE(0x1BE000001B7), v586, v587, v588, v589, v590, v591);
  v1345[4] = v1287;
  v1345[5] = v1288;
  v1345[6] = v1289;
  v1345[0] = v1283;
  v1345[1] = v1284;
  v1345[3] = v1286;
  v1345[2] = v1285;
  v1656 = 0x404040400000000;
  v1348[0] = xmmword_2246662E8;
  v1348[1] = *(_OWORD *)dbl_2246662F8;
  sub_223B46FEC((uint64_t)v1345, 7, 6, 0, (uint64_t)&v1656, (uint64_t)v1348, COERCE_DOUBLE(0x1B5000001B4), COERCE_DOUBLE(0x9100000090), v592, v593, v594, v595, v596, v597);
  v1347[4] = v1287;
  v1347[5] = v1288;
  v1347[6] = v1289;
  v1347[0] = v1283;
  v1347[1] = v1284;
  v1347[3] = v1286;
  v1347[2] = v1285;
  v1657 = 0x404040400000000;
  v1350[0] = xmmword_224666308;
  v1350[1] = *(_OWORD *)dbl_224666318;
  sub_223B46FEC((uint64_t)v1347, 7, 6, 1, (uint64_t)&v1657, (uint64_t)v1350, COERCE_DOUBLE(0x1BC000001B5), COERCE_DOUBLE(0x9800000091), v598, v599, v600, v601, v602, v603);
  v1349[4] = v1305;
  v1349[5] = v1306;
  v1349[6] = v1307;
  v1349[0] = v1301;
  v1349[1] = v1302;
  v1349[3] = v1304;
  v1349[2] = v1303;
  v1658 = 0x606040402020000;
  v1352[0] = xmmword_224666328;
  v1352[1] = *(_OWORD *)dbl_224666338;
  sub_223B46FEC((uint64_t)v1349, 7, 7, 0, (uint64_t)&v1658, (uint64_t)v1352, COERCE_DOUBLE(0x1B7000001B6), COERCE_DOUBLE(0x9300000092), v604, v605, v606, v607, v608, v609);
  v1351[4] = v1305;
  v1351[5] = v1306;
  v1351[6] = v1307;
  v1351[0] = v1301;
  v1351[1] = v1302;
  v1351[3] = v1304;
  v1351[2] = v1303;
  v1659 = 0x606040402020000;
  v1354[0] = xmmword_224666348;
  v1354[1] = *(_OWORD *)dbl_224666358;
  sub_223B46FEC((uint64_t)v1351, 7, 7, 1, (uint64_t)&v1659, (uint64_t)v1354, COERCE_DOUBLE(0x1BE000001B7), COERCE_DOUBLE(0x9A00000093), v610, v611, v612, v613, v614, v615);
  v1353[4] = v1305;
  v1353[5] = v1306;
  v1353[6] = v1307;
  v1353[0] = v1301;
  v1353[1] = v1302;
  v1353[3] = v1304;
  v1353[2] = v1303;
  v1660 = 0;
  v1362[0] = xmmword_224666368;
  v1362[1] = *(_OWORD *)dbl_224666378;
  sub_223B46FEC((uint64_t)v1353, 6, 6, 2, (uint64_t)&v1660, (uint64_t)v1362, COERCE_DOUBLE(0x1B9000001B8), COERCE_DOUBLE(0x1BD000001BCLL), v616, v617, v618, v619, v620, v621);
  v1359 = v1305;
  v1360 = v1306;
  v1361 = v1307;
  v1355 = v1301;
  v1356 = v1302;
  v1358 = v1304;
  v1357 = v1303;
  v1661 = 0;
  v1364[0] = xmmword_224666388;
  v1364[1] = *(_OWORD *)dbl_224666398;
  sub_223B46FEC((uint64_t)&v1355, 6, 6, 3, (uint64_t)&v1661, (uint64_t)v1364, COERCE_DOUBLE(0x1F0000001B9), COERCE_DOUBLE(0x1F4000001BDLL), v622, v623, v624, v625, v626, v627);
  v1363[4] = v1305;
  v1363[5] = v1306;
  v1363[6] = v1307;
  v1363[0] = v1301;
  v1363[1] = v1302;
  v1363[3] = v1304;
  v1363[2] = v1303;
  v1662 = 0x202000002020000;
  v1366[0] = xmmword_2246663A8;
  v1366[1] = *(_OWORD *)dbl_2246663B8;
  sub_223B46FEC((uint64_t)v1363, 6, 7, 2, (uint64_t)&v1662, (uint64_t)v1366, COERCE_DOUBLE(0x1BB000001BALL), COERCE_DOUBLE(0x1BF000001BELL), v628, v629, v630, v631, v632, v633);
  v1365[4] = v1305;
  v1365[5] = v1306;
  v1365[6] = v1307;
  v1365[0] = v1301;
  v1365[1] = v1302;
  v1365[3] = v1304;
  v1365[2] = v1303;
  v1663 = 0x202000002020000;
  v1368[0] = xmmword_2246663C8;
  v1368[1] = *(_OWORD *)dbl_2246663D8;
  sub_223B46FEC((uint64_t)v1365, 6, 7, 3, (uint64_t)&v1663, (uint64_t)v1368, COERCE_DOUBLE(0x1F2000001BBLL), COERCE_DOUBLE(0x1F6000001BFLL), v634, v635, v636, v637, v638, v639);
  v1367[4] = v1323;
  v1367[5] = v1324;
  v1367[6] = v1325;
  v1367[0] = v1319;
  v1367[1] = v1320;
  v1367[3] = v1322;
  v1367[2] = v1321;
  v1664 = 0x404040400000000;
  v1370[0] = xmmword_2246663E8;
  v1370[1] = *(_OWORD *)dbl_2246663F8;
  sub_223B46FEC((uint64_t)v1367, 7, 6, 2, (uint64_t)&v1664, (uint64_t)v1370, COERCE_DOUBLE(0x1BD000001BCLL), COERCE_DOUBLE(0x9900000098), v640, v641, v642, v643, v644, v645);
  v1369[4] = v1323;
  v1369[5] = v1324;
  v1369[6] = v1325;
  v1369[0] = v1319;
  v1369[1] = v1320;
  v1369[3] = v1322;
  v1369[2] = v1321;
  v1665 = 0x404040400000000;
  v1372[0] = xmmword_224666408;
  v1372[1] = *(_OWORD *)dbl_224666418;
  sub_223B46FEC((uint64_t)v1369, 7, 6, 3, (uint64_t)&v1665, (uint64_t)v1372, COERCE_DOUBLE(0x1F4000001BDLL), COERCE_DOUBLE(0xD000000099), v646, v647, v648, v649, v650, v651);
  v1371[4] = v1323;
  v1371[5] = v1324;
  v1371[6] = v1325;
  v1371[0] = v1319;
  v1371[1] = v1320;
  v1371[3] = v1322;
  v1371[2] = v1321;
  v1666 = 0x606040402020000;
  v1380[0] = xmmword_224666428;
  v1380[1] = *(_OWORD *)dbl_224666438;
  sub_223B46FEC((uint64_t)v1371, 7, 7, 2, (uint64_t)&v1666, (uint64_t)v1380, COERCE_DOUBLE(0x1BF000001BELL), COERCE_DOUBLE(0x9B0000009ALL), v652, v653, v654, v655, v656, v657);
  v1377 = v1323;
  v1378 = v1324;
  v1379 = v1325;
  v1373 = v1319;
  v1374 = v1320;
  v1376 = v1322;
  v1375 = v1321;
  v1667 = 0x606040402020000;
  v1382[0] = xmmword_224666448;
  v1382[1] = *(_OWORD *)dbl_224666458;
  sub_223B46FEC((uint64_t)&v1373, 7, 7, 3, (uint64_t)&v1667, (uint64_t)v1382, COERCE_DOUBLE(0x1F6000001BFLL), COERCE_DOUBLE(0xD20000009BLL), v658, v659, v660, v661, v662, v663);
  v1381[4] = v1323;
  v1381[5] = v1324;
  v1381[6] = v1325;
  v1381[0] = v1319;
  v1381[1] = v1320;
  v1381[3] = v1322;
  v1381[2] = v1321;
  v1668 = 0;
  v1384[0] = xmmword_224666468;
  v1384[1] = *(_OWORD *)dbl_224666478;
  sub_223B46FEC((uint64_t)v1381, 4, 4, 4, (uint64_t)&v1668, (uint64_t)v1384, COERCE_DOUBLE(0x1C1000001C0), COERCE_DOUBLE(0x1C5000001C4), v664, v665, v666, v667, v668, v669);
  v1383[4] = v1323;
  v1383[5] = v1324;
  v1383[6] = v1325;
  v1383[0] = v1319;
  v1383[1] = v1320;
  v1383[3] = v1322;
  v1383[2] = v1321;
  v1669 = 0;
  v1386[0] = xmmword_224666488;
  v1386[1] = *(_OWORD *)dbl_224666498;
  sub_223B46FEC((uint64_t)v1383, 4, 4, 5, (uint64_t)&v1669, (uint64_t)v1386, COERCE_DOUBLE(0x1C8000001C1), COERCE_DOUBLE(0x1CC000001C5), v670, v671, v672, v673, v674, v675);
  v1385[4] = v1341;
  v1385[5] = v1342;
  v1385[6] = v1343;
  v1385[0] = v1337;
  v1385[1] = v1338;
  v1385[3] = v1340;
  v1385[2] = v1339;
  v1670 = 0;
  v1388[0] = xmmword_2246664A8;
  v1388[1] = *(_OWORD *)dbl_2246664B8;
  sub_223B46FEC((uint64_t)v1385, 4, 5, 4, (uint64_t)&v1670, (uint64_t)v1388, COERCE_DOUBLE(0x1C3000001C2), COERCE_DOUBLE(0x1C7000001C6), v676, v677, v678, v679, v680, v681);
  v1387[4] = v1341;
  v1387[5] = v1342;
  v1387[6] = v1343;
  v1387[0] = v1337;
  v1387[1] = v1338;
  v1387[3] = v1340;
  v1387[2] = v1339;
  v1671 = 0;
  v1390[0] = xmmword_2246664C8;
  v1390[1] = *(_OWORD *)dbl_2246664D8;
  sub_223B46FEC((uint64_t)v1387, 4, 5, 5, (uint64_t)&v1671, (uint64_t)v1390, COERCE_DOUBLE(0x1CA000001C3), COERCE_DOUBLE(0x1CE000001C7), v682, v683, v684, v685, v686, v687);
  v1389[4] = v1341;
  v1389[5] = v1342;
  v1389[6] = v1343;
  v1389[0] = v1337;
  v1389[1] = v1338;
  v1389[3] = v1340;
  v1389[2] = v1339;
  v1672 = 0;
  v1398[0] = xmmword_2246664E8;
  v1398[1] = *(_OWORD *)dbl_2246664F8;
  sub_223B46FEC((uint64_t)v1389, 5, 4, 4, (uint64_t)&v1672, (uint64_t)v1398, COERCE_DOUBLE(0x1C5000001C4), COERCE_DOUBLE(0x1E1000001E0), v688, v689, v690, v691, v692, v693);
  v1395 = v1341;
  v1396 = v1342;
  v1397 = v1343;
  v1391 = v1337;
  v1392 = v1338;
  v1394 = v1340;
  v1393 = v1339;
  v1673 = 0;
  v1400[0] = xmmword_224666508;
  v1400[1] = *(_OWORD *)dbl_224666518;
  sub_223B46FEC((uint64_t)&v1391, 5, 4, 5, (uint64_t)&v1673, (uint64_t)v1400, COERCE_DOUBLE(0x1CC000001C5), COERCE_DOUBLE(0x1E8000001E1), v694, v695, v696, v697, v698, v699);
  v1399[4] = v1341;
  v1399[5] = v1342;
  v1399[6] = v1343;
  v1399[0] = v1337;
  v1399[1] = v1338;
  v1399[3] = v1340;
  v1399[2] = v1339;
  v1674 = 0;
  v1402[0] = xmmword_224666528;
  v1402[1] = *(_OWORD *)dbl_224666538;
  sub_223B46FEC((uint64_t)v1399, 5, 5, 4, (uint64_t)&v1674, (uint64_t)v1402, COERCE_DOUBLE(0x1C7000001C6), COERCE_DOUBLE(0x1E3000001E2), v700, v701, v702, v703, v704, v705);
  v1401[4] = v1341;
  v1401[5] = v1342;
  v1401[6] = v1343;
  v1401[0] = v1337;
  v1401[1] = v1338;
  v1401[3] = v1340;
  v1401[2] = v1339;
  v1675 = 0;
  v1404[0] = xmmword_224666548;
  v1404[1] = *(_OWORD *)dbl_224666558;
  sub_223B46FEC((uint64_t)v1401, 5, 5, 5, (uint64_t)&v1675, (uint64_t)v1404, COERCE_DOUBLE(0x1CE000001C7), COERCE_DOUBLE(0x1EA000001E3), v706, v707, v708, v709, v710, v711);
  v1403[4] = v1359;
  v1403[5] = v1360;
  v1403[6] = v1361;
  v1403[0] = v1355;
  v1403[1] = v1356;
  v1403[3] = v1358;
  v1403[2] = v1357;
  v1676 = 0;
  v1406[0] = xmmword_224666568;
  v1406[1] = *(_OWORD *)dbl_224666578;
  sub_223B46FEC((uint64_t)v1403, 4, 4, 6, (uint64_t)&v1676, (uint64_t)v1406, COERCE_DOUBLE(0x1C9000001C8), COERCE_DOUBLE(0x1CD000001CCLL), v712, v713, v714, v715, v716, v717);
  v1405[4] = v1359;
  v1405[5] = v1360;
  v1405[6] = v1361;
  v1405[0] = v1355;
  v1405[1] = v1356;
  v1405[3] = v1358;
  v1405[2] = v1357;
  v1677 = 0x100010001000100;
  v1408[0] = xmmword_224666588;
  v1408[1] = *(_OWORD *)dbl_224666598;
  sub_223B46FEC((uint64_t)v1405, 4, 4, 7, (uint64_t)&v1677, (uint64_t)v1408, COERCE_DOUBLE(0x180000001C9), COERCE_DOUBLE(0x184000001CDLL), v718, v719, v720, v721, v722, v723);
  v1407[4] = v1359;
  v1407[5] = v1360;
  v1407[6] = v1361;
  v1407[0] = v1355;
  v1407[1] = v1356;
  v1407[3] = v1358;
  v1407[2] = v1357;
  v1678 = 0;
  v1416[0] = xmmword_2246665A8;
  v1416[1] = *(_OWORD *)dbl_2246665B8;
  sub_223B46FEC((uint64_t)v1407, 4, 5, 6, (uint64_t)&v1678, (uint64_t)v1416, COERCE_DOUBLE(0x1CB000001CALL), COERCE_DOUBLE(0x1CF000001CELL), v724, v725, v726, v727, v728, v729);
  v1413 = v1359;
  v1414 = v1360;
  v1415 = v1361;
  v1409 = v1355;
  v1410 = v1356;
  v1412 = v1358;
  v1411 = v1357;
  v1679 = 0x100010001000100;
  v1418[0] = xmmword_2246665C8;
  v1418[1] = *(_OWORD *)dbl_2246665D8;
  sub_223B46FEC((uint64_t)&v1409, 4, 5, 7, (uint64_t)&v1679, (uint64_t)v1418, COERCE_DOUBLE(0x182000001CBLL), COERCE_DOUBLE(0x186000001CFLL), v730, v731, v732, v733, v734, v735);
  v1417[4] = v1359;
  v1417[5] = v1360;
  v1417[6] = v1361;
  v1417[0] = v1355;
  v1417[1] = v1356;
  v1417[3] = v1358;
  v1417[2] = v1357;
  v1680 = 0;
  v1420[0] = xmmword_2246665E8;
  v1420[1] = *(_OWORD *)dbl_2246665F8;
  sub_223B46FEC((uint64_t)v1417, 5, 4, 6, (uint64_t)&v1680, (uint64_t)v1420, COERCE_DOUBLE(0x1CD000001CCLL), COERCE_DOUBLE(0x1E9000001E8), v736, v737, v738, v739, v740, v741);
  v1419[4] = v1359;
  v1419[5] = v1360;
  v1419[6] = v1361;
  v1419[0] = v1355;
  v1419[1] = v1356;
  v1419[3] = v1358;
  v1419[2] = v1357;
  v1681 = 0x100010001000100;
  v1422[0] = xmmword_224666608;
  v1422[1] = *(_OWORD *)dbl_224666618;
  sub_223B46FEC((uint64_t)v1419, 5, 4, 7, (uint64_t)&v1681, (uint64_t)v1422, COERCE_DOUBLE(0x184000001CDLL), COERCE_DOUBLE(0x1A0000001E9), v742, v743, v744, v745, v746, v747);
  v1421[4] = v1377;
  v1421[5] = v1378;
  v1421[6] = v1379;
  v1421[0] = v1373;
  v1421[1] = v1374;
  v1421[3] = v1376;
  v1421[2] = v1375;
  v1682 = 0;
  v1424[0] = xmmword_224666628;
  v1424[1] = *(_OWORD *)dbl_224666638;
  sub_223B46FEC((uint64_t)v1421, 5, 5, 6, (uint64_t)&v1682, (uint64_t)v1424, COERCE_DOUBLE(0x1CF000001CELL), COERCE_DOUBLE(0x1EB000001EALL), v748, v749, v750, v751, v752, v753);
  v1423[4] = v1377;
  v1423[5] = v1378;
  v1423[6] = v1379;
  v1423[0] = v1373;
  v1423[1] = v1374;
  v1423[3] = v1376;
  v1423[2] = v1375;
  v1683 = 0x100010001000100;
  v1426[0] = xmmword_224666648;
  v1426[1] = *(_OWORD *)dbl_224666658;
  sub_223B46FEC((uint64_t)v1423, 5, 5, 7, (uint64_t)&v1683, (uint64_t)v1426, COERCE_DOUBLE(0x186000001CFLL), COERCE_DOUBLE(0x1A2000001EBLL), v754, v755, v756, v757, v758, v759);
  v1425[4] = v1377;
  v1425[5] = v1378;
  v1425[6] = v1379;
  v1425[0] = v1373;
  v1425[1] = v1374;
  v1425[3] = v1376;
  v1425[2] = v1375;
  v1684 = 0;
  v1434[0] = xmmword_224666668;
  v1434[1] = *(_OWORD *)dbl_224666678;
  sub_223B46FEC((uint64_t)v1425, 4, 6, 4, (uint64_t)&v1684, (uint64_t)v1434, COERCE_DOUBLE(0x1D1000001D0), COERCE_DOUBLE(0x1D5000001D4), v760, v761, v762, v763, v764, v765);
  v1431 = v1377;
  v1432 = v1378;
  v1433 = v1379;
  v1427 = v1373;
  v1428 = v1374;
  v1430 = v1376;
  v1429 = v1375;
  v1685 = 0;
  v1436[0] = xmmword_224666688;
  v1436[1] = *(_OWORD *)dbl_224666698;
  sub_223B46FEC((uint64_t)&v1427, 4, 6, 5, (uint64_t)&v1685, (uint64_t)v1436, COERCE_DOUBLE(0x1D8000001D1), COERCE_DOUBLE(0x1DC000001D5), v766, v767, v768, v769, v770, v771);
  v1435[4] = v1377;
  v1435[5] = v1378;
  v1435[6] = v1379;
  v1435[0] = v1373;
  v1435[1] = v1374;
  v1435[3] = v1376;
  v1435[2] = v1375;
  v1686 = 0x202000002020000;
  v1438[0] = xmmword_2246666A8;
  v1438[1] = *(_OWORD *)dbl_2246666B8;
  sub_223B46FEC((uint64_t)v1435, 4, 7, 4, (uint64_t)&v1686, (uint64_t)v1438, COERCE_DOUBLE(0x1D3000001D2), COERCE_DOUBLE(0x1D7000001D6), v772, v773, v774, v775, v776, v777);
  v1437[4] = v1377;
  v1437[5] = v1378;
  v1437[6] = v1379;
  v1437[0] = v1373;
  v1437[1] = v1374;
  v1437[3] = v1376;
  v1437[2] = v1375;
  v1687 = 0x202000002020000;
  v1440[0] = xmmword_2246666C8;
  v1440[1] = *(_OWORD *)dbl_2246666D8;
  sub_223B46FEC((uint64_t)v1437, 4, 7, 5, (uint64_t)&v1687, (uint64_t)v1440, COERCE_DOUBLE(0x1DA000001D3), COERCE_DOUBLE(0x1DE000001D7), v778, v779, v780, v781, v782, v783);
  v1439[4] = v1395;
  v1439[5] = v1396;
  v1439[6] = v1397;
  v1439[0] = v1391;
  v1439[1] = v1392;
  v1439[3] = v1394;
  v1439[2] = v1393;
  v1688 = 0;
  v1442[0] = xmmword_2246666E8;
  v1442[1] = *(_OWORD *)dbl_2246666F8;
  sub_223B46FEC((uint64_t)v1439, 5, 6, 4, (uint64_t)&v1688, (uint64_t)v1442, COERCE_DOUBLE(0x1D5000001D4), COERCE_DOUBLE(0x1F1000001F0), v784, v785, v786, v787, v788, v789);
  v1441[4] = v1395;
  v1441[5] = v1396;
  v1441[6] = v1397;
  v1441[0] = v1391;
  v1441[1] = v1392;
  v1441[3] = v1394;
  v1441[2] = v1393;
  v1689 = 0;
  v1444[0] = xmmword_224666708;
  v1444[1] = *(_OWORD *)dbl_224666718;
  sub_223B46FEC((uint64_t)v1441, 5, 6, 5, (uint64_t)&v1689, (uint64_t)v1444, COERCE_DOUBLE(0x1DC000001D5), COERCE_DOUBLE(0x1F8000001F1), v790, v791, v792, v793, v794, v795);
  v1443[4] = v1395;
  v1443[5] = v1396;
  v1443[6] = v1397;
  v1443[0] = v1391;
  v1443[1] = v1392;
  v1443[3] = v1394;
  v1443[2] = v1393;
  v1690 = 0x202000002020000;
  v1452[0] = xmmword_224666728;
  v1452[1] = *(_OWORD *)dbl_224666738;
  sub_223B46FEC((uint64_t)v1443, 5, 7, 4, (uint64_t)&v1690, (uint64_t)v1452, COERCE_DOUBLE(0x1D7000001D6), COERCE_DOUBLE(0x1F3000001F2), v796, v797, v798, v799, v800, v801);
  v1449 = v1395;
  v1450 = v1396;
  v1451 = v1397;
  v1445 = v1391;
  v1446 = v1392;
  v1448 = v1394;
  v1447 = v1393;
  v1691 = 0x202000002020000;
  v1454[0] = xmmword_224666748;
  v1454[1] = *(_OWORD *)dbl_224666758;
  sub_223B46FEC((uint64_t)&v1445, 5, 7, 5, (uint64_t)&v1691, (uint64_t)v1454, COERCE_DOUBLE(0x1DE000001D7), COERCE_DOUBLE(0x1FA000001F3), v802, v803, v804, v805, v806, v807);
  v1453[4] = v1395;
  v1453[5] = v1396;
  v1453[6] = v1397;
  v1453[0] = v1391;
  v1453[1] = v1392;
  v1453[3] = v1394;
  v1453[2] = v1393;
  v1692 = 0;
  v1456[0] = xmmword_224666768;
  v1456[1] = *(_OWORD *)dbl_224666778;
  sub_223B46FEC((uint64_t)v1453, 4, 6, 6, (uint64_t)&v1692, (uint64_t)v1456, COERCE_DOUBLE(0x1D9000001D8), COERCE_DOUBLE(0x1DD000001DCLL), v808, v809, v810, v811, v812, v813);
  v1455[4] = v1395;
  v1455[5] = v1396;
  v1455[6] = v1397;
  v1455[0] = v1391;
  v1455[1] = v1392;
  v1455[3] = v1394;
  v1455[2] = v1393;
  v1693 = 0x100010001000100;
  v1458[0] = xmmword_224666788;
  v1458[1] = *(_OWORD *)dbl_224666798;
  sub_223B46FEC((uint64_t)v1455, 4, 6, 7, (uint64_t)&v1693, (uint64_t)v1458, COERCE_DOUBLE(0x190000001D9), COERCE_DOUBLE(0x194000001DDLL), v814, v815, v816, v817, v818, v819);
  v1457[4] = v1413;
  v1457[5] = v1414;
  v1457[6] = v1415;
  v1457[0] = v1409;
  v1457[1] = v1410;
  v1457[3] = v1412;
  v1457[2] = v1411;
  v1694 = 0x202000002020000;
  v1460[0] = xmmword_2246667A8;
  v1460[1] = *(_OWORD *)dbl_2246667B8;
  sub_223B46FEC((uint64_t)v1457, 4, 7, 6, (uint64_t)&v1694, (uint64_t)v1460, COERCE_DOUBLE(0x1DB000001DALL), COERCE_DOUBLE(0x1DF000001DELL), v820, v821, v822, v823, v824, v825);
  v1459[4] = v1413;
  v1459[5] = v1414;
  v1459[6] = v1415;
  v1459[0] = v1409;
  v1459[1] = v1410;
  v1459[3] = v1412;
  v1459[2] = v1411;
  v1695 = 0x302010003020100;
  v1462[0] = xmmword_2246667C8;
  v1462[1] = *(_OWORD *)dbl_2246667D8;
  sub_223B46FEC((uint64_t)v1459, 4, 7, 7, (uint64_t)&v1695, (uint64_t)v1462, COERCE_DOUBLE(0x192000001DBLL), COERCE_DOUBLE(0x196000001DFLL), v826, v827, v828, v829, v830, v831);
  v1461[4] = v1413;
  v1461[5] = v1414;
  v1461[6] = v1415;
  v1461[0] = v1409;
  v1461[1] = v1410;
  v1461[3] = v1412;
  v1461[2] = v1411;
  v1696 = 0;
  v1470[0] = xmmword_2246667E8;
  v1470[1] = *(_OWORD *)dbl_2246667F8;
  sub_223B46FEC((uint64_t)v1461, 5, 6, 6, (uint64_t)&v1696, (uint64_t)v1470, COERCE_DOUBLE(0x1DD000001DCLL), COERCE_DOUBLE(0x1F9000001F8), v832, v833, v834, v835, v836, v837);
  v1467 = v1413;
  v1468 = v1414;
  v1469 = v1415;
  v1463 = v1409;
  v1464 = v1410;
  v1466 = v1412;
  v1465 = v1411;
  v1697 = 0x100010001000100;
  v1472[0] = xmmword_224666808;
  v1472[1] = *(_OWORD *)dbl_224666818;
  sub_223B46FEC((uint64_t)&v1463, 5, 6, 7, (uint64_t)&v1697, (uint64_t)v1472, COERCE_DOUBLE(0x194000001DDLL), COERCE_DOUBLE(0x1B0000001F9), v838, v839, v840, v841, v842, v843);
  v1471[4] = v1413;
  v1471[5] = v1414;
  v1471[6] = v1415;
  v1471[0] = v1409;
  v1471[1] = v1410;
  v1471[3] = v1412;
  v1471[2] = v1411;
  v1698 = 0x202000002020000;
  v1474[0] = xmmword_224666828;
  v1474[1] = *(_OWORD *)dbl_224666838;
  sub_223B46FEC((uint64_t)v1471, 5, 7, 6, (uint64_t)&v1698, (uint64_t)v1474, COERCE_DOUBLE(0x1DF000001DELL), COERCE_DOUBLE(0x1FB000001FALL), v844, v845, v846, v847, v848, v849);
  v1473[4] = v1413;
  v1473[5] = v1414;
  v1473[6] = v1415;
  v1473[0] = v1409;
  v1473[1] = v1410;
  v1473[3] = v1412;
  v1473[2] = v1411;
  v1699 = 0x302010003020100;
  v1476[0] = xmmword_224666848;
  v1476[1] = *(_OWORD *)dbl_224666858;
  sub_223B46FEC((uint64_t)v1473, 5, 7, 7, (uint64_t)&v1699, (uint64_t)v1476, COERCE_DOUBLE(0x196000001DFLL), COERCE_DOUBLE(0x1B2000001FBLL), v850, v851, v852, v853, v854, v855);
  v1475[4] = v1431;
  v1475[5] = v1432;
  v1475[6] = v1433;
  v1475[0] = v1427;
  v1475[1] = v1428;
  v1475[3] = v1430;
  v1475[2] = v1429;
  v1700 = 0;
  v1478[0] = xmmword_224666868;
  v1478[1] = *(_OWORD *)dbl_224666878;
  sub_223B46FEC((uint64_t)v1475, 6, 4, 4, (uint64_t)&v1700, (uint64_t)v1478, COERCE_DOUBLE(0x1E1000001E0), COERCE_DOUBLE(0x1E5000001E4), v856, v857, v858, v859, v860, v861);
  v1477[4] = v1431;
  v1477[5] = v1432;
  v1477[6] = v1433;
  v1477[0] = v1427;
  v1477[1] = v1428;
  v1477[3] = v1430;
  v1477[2] = v1429;
  v1701 = 0;
  v1480[0] = xmmword_224666888;
  v1480[1] = *(_OWORD *)dbl_224666898;
  sub_223B46FEC((uint64_t)v1477, 6, 4, 5, (uint64_t)&v1701, (uint64_t)v1480, COERCE_DOUBLE(0x1E8000001E1), COERCE_DOUBLE(0x1EC000001E5), v862, v863, v864, v865, v866, v867);
  v1479[4] = v1431;
  v1479[5] = v1432;
  v1479[6] = v1433;
  v1479[0] = v1427;
  v1479[1] = v1428;
  v1479[3] = v1430;
  v1479[2] = v1429;
  v1702 = 0;
  v1488[0] = xmmword_2246668A8;
  v1488[1] = *(_OWORD *)dbl_2246668B8;
  sub_223B46FEC((uint64_t)v1479, 6, 5, 4, (uint64_t)&v1702, (uint64_t)v1488, COERCE_DOUBLE(0x1E3000001E2), COERCE_DOUBLE(0x1E7000001E6), v868, v869, v870, v871, v872, v873);
  v1485 = v1431;
  v1486 = v1432;
  v1487 = v1433;
  v1481 = v1427;
  v1482 = v1428;
  v1484 = v1430;
  v1483 = v1429;
  v1703 = 0;
  v1490[0] = xmmword_2246668C8;
  v1490[1] = *(_OWORD *)dbl_2246668D8;
  sub_223B46FEC((uint64_t)&v1481, 6, 5, 5, (uint64_t)&v1703, (uint64_t)v1490, COERCE_DOUBLE(0x1EA000001E3), COERCE_DOUBLE(0x1EE000001E7), v874, v875, v876, v877, v878, v879);
  v1489[4] = v1431;
  v1489[5] = v1432;
  v1489[6] = v1433;
  v1489[0] = v1427;
  v1489[1] = v1428;
  v1489[3] = v1430;
  v1489[2] = v1429;
  v1704 = 0x404040400000000;
  v1492[0] = xmmword_2246668E8;
  v1492[1] = *(_OWORD *)dbl_2246668F8;
  sub_223B46FEC((uint64_t)v1489, 7, 4, 4, (uint64_t)&v1704, (uint64_t)v1492, COERCE_DOUBLE(0x1E5000001E4), COERCE_DOUBLE(0xC1000000C0), v880, v881, v882, v883, v884, v885);
  v1491[4] = v1431;
  v1491[5] = v1432;
  v1491[6] = v1433;
  v1491[0] = v1427;
  v1491[1] = v1428;
  v1491[3] = v1430;
  v1491[2] = v1429;
  v1705 = 0x404040400000000;
  v1494[0] = xmmword_224666908;
  v1494[1] = *(_OWORD *)dbl_224666918;
  sub_223B46FEC((uint64_t)v1491, 7, 4, 5, (uint64_t)&v1705, (uint64_t)v1494, COERCE_DOUBLE(0x1EC000001E5), COERCE_DOUBLE(0xC8000000C1), v886, v887, v888, v889, v890, v891);
  v1493[4] = v1449;
  v1493[5] = v1450;
  v1493[6] = v1451;
  v1493[0] = v1445;
  v1493[1] = v1446;
  v1493[3] = v1448;
  v1493[2] = v1447;
  v1706 = 0x404040400000000;
  v1496[0] = xmmword_224666928;
  v1496[1] = *(_OWORD *)dbl_224666938;
  sub_223B46FEC((uint64_t)v1493, 7, 5, 4, (uint64_t)&v1706, (uint64_t)v1496, COERCE_DOUBLE(0x1E7000001E6), COERCE_DOUBLE(0xC3000000C2), v892, v893, v894, v895, v896, v897);
  v1495[4] = v1449;
  v1495[5] = v1450;
  v1495[6] = v1451;
  v1495[0] = v1445;
  v1495[1] = v1446;
  v1495[3] = v1448;
  v1495[2] = v1447;
  v1707 = 0x404040400000000;
  v1498[0] = xmmword_224666948;
  v1498[1] = *(_OWORD *)dbl_224666958;
  sub_223B46FEC((uint64_t)v1495, 7, 5, 5, (uint64_t)&v1707, (uint64_t)v1498, COERCE_DOUBLE(0x1EE000001E7), COERCE_DOUBLE(0xCA000000C3), v898, v899, v900, v901, v902, v903);
  v1497[4] = v1449;
  v1497[5] = v1450;
  v1497[6] = v1451;
  v1497[0] = v1445;
  v1497[1] = v1446;
  v1497[3] = v1448;
  v1497[2] = v1447;
  v1708 = 0;
  v1506[0] = xmmword_224666968;
  v1506[1] = *(_OWORD *)dbl_224666978;
  sub_223B46FEC((uint64_t)v1497, 6, 4, 6, (uint64_t)&v1708, (uint64_t)v1506, COERCE_DOUBLE(0x1E9000001E8), COERCE_DOUBLE(0x1ED000001ECLL), v904, v905, v906, v907, v908, v909);
  v1503 = v1449;
  v1504 = v1450;
  v1505 = v1451;
  v1499 = v1445;
  v1500 = v1446;
  v1502 = v1448;
  v1501 = v1447;
  v1709 = 0x100010001000100;
  v1508[0] = xmmword_224666988;
  v1508[1] = *(_OWORD *)dbl_224666998;
  sub_223B46FEC((uint64_t)&v1499, 6, 4, 7, (uint64_t)&v1709, (uint64_t)v1508, COERCE_DOUBLE(0x1A0000001E9), COERCE_DOUBLE(0x1A4000001EDLL), v910, v911, v912, v913, v914, v915);
  v1507[4] = v1449;
  v1507[5] = v1450;
  v1507[6] = v1451;
  v1507[0] = v1445;
  v1507[1] = v1446;
  v1507[3] = v1448;
  v1507[2] = v1447;
  v1710 = 0;
  v1510[0] = xmmword_2246669A8;
  v1510[1] = *(_OWORD *)dbl_2246669B8;
  sub_223B46FEC((uint64_t)v1507, 6, 5, 6, (uint64_t)&v1710, (uint64_t)v1510, COERCE_DOUBLE(0x1EB000001EALL), COERCE_DOUBLE(0x1EF000001EELL), v916, v917, v918, v919, v920, v921);
  v1509[4] = v1449;
  v1509[5] = v1450;
  v1509[6] = v1451;
  v1509[0] = v1445;
  v1509[1] = v1446;
  v1509[3] = v1448;
  v1509[2] = v1447;
  v1711 = 0x100010001000100;
  v1512[0] = xmmword_2246669C8;
  v1512[1] = *(_OWORD *)dbl_2246669D8;
  sub_223B46FEC((uint64_t)v1509, 6, 5, 7, (uint64_t)&v1711, (uint64_t)v1512, COERCE_DOUBLE(0x1A2000001EBLL), COERCE_DOUBLE(0x1A6000001EFLL), v922, v923, v924, v925, v926, v927);
  v1511[4] = v1467;
  v1511[5] = v1468;
  v1511[6] = v1469;
  v1511[0] = v1463;
  v1511[1] = v1464;
  v1511[3] = v1466;
  v1511[2] = v1465;
  v1712 = 0x404040400000000;
  v1514[0] = xmmword_2246669E8;
  v1514[1] = *(_OWORD *)dbl_2246669F8;
  sub_223B46FEC((uint64_t)v1511, 7, 4, 6, (uint64_t)&v1712, (uint64_t)v1514, COERCE_DOUBLE(0x1ED000001ECLL), COERCE_DOUBLE(0xC9000000C8), v928, v929, v930, v931, v932, v933);
  v1513[4] = v1467;
  v1513[5] = v1468;
  v1513[6] = v1469;
  v1513[0] = v1463;
  v1513[1] = v1464;
  v1513[3] = v1466;
  v1513[2] = v1465;
  v1713 = 0x504050401000100;
  v1516[0] = xmmword_224666A08;
  v1516[1] = *(_OWORD *)dbl_224666A18;
  sub_223B46FEC((uint64_t)v1513, 7, 4, 7, (uint64_t)&v1713, (uint64_t)v1516, COERCE_DOUBLE(0x1A4000001EDLL), COERCE_DOUBLE(0x80000000C9), v934, v935, v936, v937, v938, v939);
  v1515[4] = v1467;
  v1515[5] = v1468;
  v1515[6] = v1469;
  v1515[0] = v1463;
  v1515[1] = v1464;
  v1515[3] = v1466;
  v1515[2] = v1465;
  v1714 = 0x404040400000000;
  v1524[0] = xmmword_224666A28;
  v1524[1] = *(_OWORD *)dbl_224666A38;
  sub_223B46FEC((uint64_t)v1515, 7, 5, 6, (uint64_t)&v1714, (uint64_t)v1524, COERCE_DOUBLE(0x1EF000001EELL), COERCE_DOUBLE(0xCB000000CALL), v940, v941, v942, v943, v944, v945);
  v1521 = v1467;
  v1522 = v1468;
  v1523 = v1469;
  v1517 = v1463;
  v1518 = v1464;
  v1520 = v1466;
  v1519 = v1465;
  v1715 = 0x504050401000100;
  v1526[0] = xmmword_224666A48;
  v1526[1] = *(_OWORD *)dbl_224666A58;
  sub_223B46FEC((uint64_t)&v1517, 7, 5, 7, (uint64_t)&v1715, (uint64_t)v1526, COERCE_DOUBLE(0x1A6000001EFLL), COERCE_DOUBLE(0x82000000CBLL), v946, v947, v948, v949, v950, v951);
  v1525[4] = v1467;
  v1525[5] = v1468;
  v1525[6] = v1469;
  v1525[0] = v1463;
  v1525[1] = v1464;
  v1525[3] = v1466;
  v1525[2] = v1465;
  v1716 = 0;
  v1528[0] = xmmword_224666A68;
  v1528[1] = *(_OWORD *)dbl_224666A78;
  sub_223B46FEC((uint64_t)v1525, 6, 6, 4, (uint64_t)&v1716, (uint64_t)v1528, COERCE_DOUBLE(0x1F1000001F0), COERCE_DOUBLE(0x1F5000001F4), v952, v953, v954, v955, v956, v957);
  v1527[4] = v1467;
  v1527[5] = v1468;
  v1527[6] = v1469;
  v1527[0] = v1463;
  v1527[1] = v1464;
  v1527[3] = v1466;
  v1527[2] = v1465;
  v1717 = 0;
  v1530[0] = xmmword_224666A88;
  v1530[1] = *(_OWORD *)dbl_224666A98;
  sub_223B46FEC((uint64_t)v1527, 6, 6, 5, (uint64_t)&v1717, (uint64_t)v1530, COERCE_DOUBLE(0x1F8000001F1), COERCE_DOUBLE(0x1FC000001F5), v958, v959, v960, v961, v962, v963);
  v1529[4] = v1485;
  v1529[5] = v1486;
  v1529[6] = v1487;
  v1529[0] = v1481;
  v1529[1] = v1482;
  v1529[3] = v1484;
  v1529[2] = v1483;
  v1718 = 0x202000002020000;
  v1532[0] = xmmword_224666AA8;
  v1532[1] = *(_OWORD *)dbl_224666AB8;
  sub_223B46FEC((uint64_t)v1529, 6, 7, 4, (uint64_t)&v1718, (uint64_t)v1532, COERCE_DOUBLE(0x1F3000001F2), COERCE_DOUBLE(0x1F7000001F6), v964, v965, v966, v967, v968, v969);
  v1531[4] = v1485;
  v1531[5] = v1486;
  v1531[6] = v1487;
  v1531[0] = v1481;
  v1531[1] = v1482;
  v1531[3] = v1484;
  v1531[2] = v1483;
  v1719 = 0x202000002020000;
  v1534[0] = xmmword_224666AC8;
  v1534[1] = *(_OWORD *)dbl_224666AD8;
  sub_223B46FEC((uint64_t)v1531, 6, 7, 5, (uint64_t)&v1719, (uint64_t)v1534, COERCE_DOUBLE(0x1FA000001F3), COERCE_DOUBLE(0x1FE000001F7), v970, v971, v972, v973, v974, v975);
  v1533[4] = v1485;
  v1533[5] = v1486;
  v1533[6] = v1487;
  v1533[0] = v1481;
  v1533[1] = v1482;
  v1533[3] = v1484;
  v1533[2] = v1483;
  v1720 = 0x404040400000000;
  v1536[0] = xmmword_224666AE8;
  v1536[1] = *(_OWORD *)dbl_224666AF8;
  sub_223B46FEC((uint64_t)v1533, 7, 6, 4, (uint64_t)&v1720, (uint64_t)v1536, COERCE_DOUBLE(0x1F5000001F4), COERCE_DOUBLE(0xD1000000D0), v976, v977, v978, v979, v980, v981);
  v1535[4] = v1485;
  v1535[5] = v1486;
  v1535[6] = v1487;
  v1535[0] = v1481;
  v1535[1] = v1482;
  v1535[3] = v1484;
  v1535[2] = v1483;
  v1721 = 0x404040400000000;
  v1538[0] = xmmword_224666B08;
  v1538[1] = *(_OWORD *)dbl_224666B18;
  sub_223B46FEC((uint64_t)v1535, 7, 6, 5, (uint64_t)&v1721, (uint64_t)v1538, COERCE_DOUBLE(0x1FC000001F5), COERCE_DOUBLE(0xD8000000D1), v982, v983, v984, v985, v986, v987);
  v1537[4] = v1485;
  v1537[5] = v1486;
  v1537[6] = v1487;
  v1537[0] = v1481;
  v1537[1] = v1482;
  v1537[3] = v1484;
  v1537[2] = v1483;
  v1722 = 0x606040402020000;
  v1540[0] = xmmword_224666B28;
  v1540[1] = *(_OWORD *)dbl_224666B38;
  sub_223B46FEC((uint64_t)v1537, 7, 7, 4, (uint64_t)&v1722, (uint64_t)v1540, COERCE_DOUBLE(0x1F7000001F6), COERCE_DOUBLE(0xD3000000D2), v988, v989, v990, v991, v992, v993);
  v1539[4] = v1485;
  v1539[5] = v1486;
  v1539[6] = v1487;
  v1539[0] = v1481;
  v1539[1] = v1482;
  v1539[3] = v1484;
  v1539[2] = v1483;
  v1723 = 0x606040402020000;
  v1542[0] = xmmword_224666B48;
  v1542[1] = *(_OWORD *)dbl_224666B58;
  sub_223B46FEC((uint64_t)v1539, 7, 7, 5, (uint64_t)&v1723, (uint64_t)v1542, COERCE_DOUBLE(0x1FE000001F7), COERCE_DOUBLE(0xDA000000D3), v994, v995, v996, v997, v998, v999);
  v1541[4] = v1503;
  v1541[5] = v1504;
  v1541[6] = v1505;
  v1541[0] = v1499;
  v1541[1] = v1500;
  v1541[3] = v1502;
  v1541[2] = v1501;
  v1724 = 0;
  v1544[0] = xmmword_224666B68;
  v1544[1] = *(_OWORD *)dbl_224666B78;
  sub_223B46FEC((uint64_t)v1541, 6, 6, 6, (uint64_t)&v1724, (uint64_t)v1544, COERCE_DOUBLE(0x1F9000001F8), COERCE_DOUBLE(0x1FD000001FCLL), v1000, v1001, v1002, v1003, v1004, v1005);
  v1543[4] = v1503;
  v1543[5] = v1504;
  v1543[6] = v1505;
  v1543[0] = v1499;
  v1543[1] = v1500;
  v1543[3] = v1502;
  v1543[2] = v1501;
  v1725 = 0x100010001000100;
  v1546[0] = xmmword_224666B88;
  v1546[1] = *(_OWORD *)dbl_224666B98;
  sub_223B46FEC((uint64_t)v1543, 6, 6, 7, (uint64_t)&v1725, (uint64_t)v1546, COERCE_DOUBLE(0x1B0000001F9), COERCE_DOUBLE(0x1B4000001FDLL), v1006, v1007, v1008, v1009, v1010, v1011);
  v1545[4] = v1503;
  v1545[5] = v1504;
  v1545[6] = v1505;
  v1545[0] = v1499;
  v1545[1] = v1500;
  v1545[3] = v1502;
  v1545[2] = v1501;
  v1726 = 0x202000002020000;
  v1548[0] = xmmword_224666BA8;
  v1548[1] = *(_OWORD *)dbl_224666BB8;
  sub_223B46FEC((uint64_t)v1545, 6, 7, 6, (uint64_t)&v1726, (uint64_t)v1548, COERCE_DOUBLE(0x1FB000001FALL), COERCE_DOUBLE(0x1FF000001FELL), v1012, v1013, v1014, v1015, v1016, v1017);
  v1547[4] = v1503;
  v1547[5] = v1504;
  v1547[6] = v1505;
  v1547[0] = v1499;
  v1547[1] = v1500;
  v1547[3] = v1502;
  v1547[2] = v1501;
  v1727 = 0x302010003020100;
  v1550[0] = xmmword_224666BC8;
  v1550[1] = *(_OWORD *)dbl_224666BD8;
  sub_223B46FEC((uint64_t)v1547, 6, 7, 7, (uint64_t)&v1727, (uint64_t)v1550, COERCE_DOUBLE(0x1B2000001FBLL), COERCE_DOUBLE(0x1B6000001FFLL), v1018, v1019, v1020, v1021, v1022, v1023);
  v1549[4] = v1503;
  v1549[5] = v1504;
  v1549[6] = v1505;
  v1549[0] = v1499;
  v1549[1] = v1500;
  v1549[3] = v1502;
  v1549[2] = v1501;
  v1728 = 0x404040400000000;
  v1552[0] = xmmword_224666BE8;
  v1552[1] = *(_OWORD *)dbl_224666BF8;
  sub_223B46FEC((uint64_t)v1549, 7, 6, 6, (uint64_t)&v1728, (uint64_t)v1552, COERCE_DOUBLE(0x1FD000001FCLL), COERCE_DOUBLE(0xD9000000D8), v1024, v1025, v1026, v1027, v1028, v1029);
  v1551[4] = v1503;
  v1551[5] = v1504;
  v1551[6] = v1505;
  v1551[0] = v1499;
  v1551[1] = v1500;
  v1551[3] = v1502;
  v1551[2] = v1501;
  v1729 = 0x504050401000100;
  v1554[0] = xmmword_224666C08;
  v1554[1] = *(_OWORD *)dbl_224666C18;
  sub_223B46FEC((uint64_t)v1551, 7, 6, 7, (uint64_t)&v1729, (uint64_t)v1554, COERCE_DOUBLE(0x1B4000001FDLL), COERCE_DOUBLE(0x90000000D9), v1030, v1031, v1032, v1033, v1034, v1035);
  v1553[4] = v1521;
  v1553[5] = v1522;
  v1553[6] = v1523;
  v1553[0] = v1517;
  v1553[1] = v1518;
  v1553[3] = v1520;
  v1553[2] = v1519;
  v1730 = 0x606040402020000;
  v1556[0] = xmmword_224666C28;
  v1556[1] = *(_OWORD *)dbl_224666C38;
  sub_223B46FEC((uint64_t)v1553, 7, 7, 6, (uint64_t)&v1730, (uint64_t)v1556, COERCE_DOUBLE(0x1FF000001FELL), COERCE_DOUBLE(0xDB000000DALL), v1036, v1037, v1038, v1039, v1040, v1041);
  v1555[4] = v1521;
  v1555[5] = v1522;
  v1555[6] = v1523;
  v1555[0] = v1517;
  v1555[1] = v1518;
  v1555[3] = v1520;
  v1555[2] = v1519;
  v1731[0] = 0x706050403020100;
  v1557[0] = xmmword_224666C48;
  v1557[1] = *(_OWORD *)dbl_224666C58;
  return sub_223B46FEC((uint64_t)v1555, 7, 7, 7, (uint64_t)v1731, (uint64_t)v1557, COERCE_DOUBLE(0x1B6000001FFLL), COERCE_DOUBLE(0x92000000DBLL), v1042, v1043, v1044, v1045, v1046, v1047);
}

uint64_t sub_223B54204(uint64_t result, int a2, int a3, int a4, uint64_t a5, uint64_t a6, double a7, double a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, double a13, double a14)
{
  uint64_t v14;
  __int32 v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int32x2_t *v23;
  __int32 v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  float32x4_t v28;
  uint64_t v29;
  int v30;
  _BYTE *v31;
  unsigned __int8 *v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  char v36;
  int32x2_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  _BOOL4 v45;
  _BOOL4 v46;
  BOOL v47;
  _BOOL4 v48;
  _BOOL4 v49;
  BOOL v50;
  int32x2_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  _BOOL4 v60;
  _BOOL4 v61;
  BOOL v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  int32x2_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  _BOOL4 v74;
  _BOOL4 v75;
  BOOL v76;
  uint64_t v77;
  int32x2_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  unsigned int v120;
  float32x4_t v121;
  unsigned int v122;
  unsigned __int8 *v123;
  unsigned __int8 *v124;
  uint64_t v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  float32x4_t v129;
  float32x4_t v130;
  unsigned int v131;
  int v132;
  float32x4_t v133;
  int v134;
  float32x4_t v135;
  float32x4_t v136;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  uint64_t v139;
  unsigned int v140;
  int v141;
  int v142;
  _BYTE *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE *v147;
  uint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  _BYTE *v151;
  int v152;
  unsigned __int8 *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned __int8 *v157;
  uint64_t v158;
  unsigned __int8 *v159;
  unsigned int v160;
  BOOL v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned __int8 *v179;
  uint64_t v180;
  _BYTE *v181;
  uint64_t v182;
  _BYTE *v183;
  int v184;
  int v185;
  uint64_t v186;
  _BYTE *v187;
  int v188;
  int v189;
  uint64_t v190;
  _BYTE *v191;
  int v192;
  uint64_t v193;
  _BYTE *v194;
  int v195;
  int v196;
  uint64_t v197;
  _BYTE *v198;
  int v199;
  int v200;
  uint64_t v201;
  _BYTE *v202;
  uint64_t v203;
  int v204;
  int v205;
  uint64_t v206;
  _BYTE *v207;
  uint64_t v208;
  int v209;
  int v210;
  unsigned int v211;
  int v212;
  unsigned __int8 *v213;
  unsigned __int8 *v214;
  uint64_t v215;
  unsigned int v216;
  char *v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  char *v223;
  int v224;
  unsigned __int8 *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unsigned __int8 *v229;
  uint64_t v230;
  unsigned __int8 *v231;
  unsigned int v232;
  BOOL v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  unsigned __int8 *v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned __int8 *v259;
  unsigned int v260;
  unsigned __int8 *v261;
  unsigned int v262;
  BOOL v263;
  uint64_t v264;
  unsigned int v265;
  uint64_t v266;
  unsigned int v267;
  uint64_t v268;
  unsigned int v269;
  uint64_t v270;
  unsigned int v271;
  uint64_t v272;
  unsigned int v273;
  uint64_t v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  uint64_t v280;
  uint64_t v281;
  unsigned __int8 *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  int v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  int v316;
  unsigned int v317;
  int v318;
  int v319;
  unsigned __int8 *v320;
  unsigned __int8 *v321;
  uint64_t v322;
  unsigned int v323;
  char *v324;
  uint64_t v325;
  char *v326;
  uint64_t v327;
  char *v328;
  uint64_t v329;
  char *v330;
  int v331;
  unsigned __int8 *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unsigned __int8 *v336;
  uint64_t v337;
  unsigned __int8 *v338;
  unsigned int v339;
  BOOL v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  int v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unsigned __int8 *v356;
  unsigned __int8 *v357;
  _DWORD *v358;
  int v359;
  int v360;
  float32x4_t v361;
  float32x4_t v362;
  int32x2_t *v363;
  int32x2_t v364;
  int v365;
  __int128 v366;
  int32x2_t *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int32x2_t v371;
  int v372;
  _BYTE v373[32];
  _BYTE v374[12];
  __int32 v375;
  uint64_t v376;
  __int32 v377;
  uint64_t v378;
  __int32 v379;
  uint64_t v380;
  __int32 v381;
  uint64_t v382;
  __int32 v383;
  _OWORD v384[2];
  int32x2_t *v385;
  unint64_t v386;
  __int32 v387;
  uint64_t v388;
  __int32 v389;
  uint64_t v390;
  __int32 v391;
  uint64_t v392;
  __int32 v393;
  uint64_t v394;
  __int32 v395;
  uint64_t v396;
  __int32 v397;
  uint64_t v398;
  __int32 v399;
  uint64_t v400;
  __int32 v401;
  _BYTE v402[8];
  _BYTE v403[8];
  char v404;
  char v405;
  char v406;
  char v407;
  char v408;
  char v409;
  char v410;
  char v411;
  unint64_t v412;
  unsigned __int32 v413;
  unsigned __int8 v414;
  unsigned __int8 v415;
  char v416;
  unsigned __int8 v417;
  unsigned __int8 v418;
  char v419;
  unsigned __int8 v420;
  unsigned __int8 v421;
  uint64_t v422;

  v422 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)result;
  v15 = *(_DWORD *)(*(_QWORD *)result + 4) + a3;
  v371.i32[0] = **(_DWORD **)result + a2;
  v371.i32[1] = v15;
  v372 = *(_DWORD *)(v14 + 8) + a4;
  v366 = *(_OWORD *)(result + 8);
  v16 = *(_QWORD *)(result + 24);
  v17 = *(_BYTE **)(result + 32);
  v367 = &v371;
  v368 = v16;
  v369 = a5;
  v370 = a6;
  v18 = byte_22466137A;
  *v17 = 8;
  v19.i64[0] = 0x3F0000003F000000;
  v19.i64[1] = 0x3F0000003F000000;
  v20 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  do
  {
    v21 = *v18;
    v22 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8 * *(unsigned __int8 *)(a5 + v21))
                            + 40 * *(unsigned int *)(a6 + 4 * v21));
    v23 = (int32x2_t *)((char *)&unk_224661384 + 12 * v21);
    v24 = v23[1].i32[0];
    *(int32x2_t *)a9.f32 = vadd_s32(v371, *v23);
    *(_QWORD *)&v384[0] = a9.i64[0];
    v25 = v372 + v24;
    DWORD2(v384[0]) = v372 + v24;
    v26 = *(uint64_t **)(result + 48);
    v27 = *v26;
    if (!v22[6])
    {
      *(float32x2_t *)a10.f32 = vcvt_f32_s32(*(int32x2_t *)a9.f32);
      a10.f32[2] = (float)v25;
      a11.i32[0] = *(_DWORD *)(v27 + 312);
      a12.i8[0] = v22[3];
      v28 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a12.f32));
      v28.f32[0] = (float)v28.i32[0];
      LOBYTE(a13) = v22[4];
      *(_QWORD *)&a13 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a13)).u64[0];
      *(float *)&a13 = (float)SLODWORD(a13);
      LOBYTE(a14) = v22[5];
      *(_QWORD *)&a14 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a14)).u64[0];
      *(float *)&a14 = (float)SLODWORD(a14);
      v28.i32[1] = LODWORD(a13);
      v28.i32[2] = LODWORD(a14);
      a12 = vmulq_f32(v28, v20);
      a10 = vmulq_n_f32(vaddq_f32(vaddq_f32(a10, v19), a12), a11.f32[0]);
      v413 = a10.u32[2];
      goto LABEL_7;
    }
    if (*(_BYTE *)v26[1]
      || !*(_BYTE *)v26[2]
      || (v51 = (int32x2_t *)v26[3],
          *(int32x2_t *)a10.f32 = vsub_s32(*(int32x2_t *)a9.f32, *v51),
          v386 = a10.i64[0],
          v387 = v25 - v51[1].i32[0],
          v52 = (uint64_t *)v26[7],
          v53 = *v52,
          v54 = v52[1],
          v53 == v54))
    {
LABEL_5:
      *(float32x2_t *)a11.f32 = vcvt_f32_s32(*(int32x2_t *)a9.f32);
      a12.f32[0] = (float)v25;
      a11.f32[2] = (float)v25;
      a11 = vaddq_f32(a11, v19);
      a10 = vmulq_n_f32(a11, *(float *)(v27 + 312));
      v413 = a10.u32[2];
LABEL_7:
      v412 = a10.i64[0];
      goto LABEL_8;
    }
    v55 = (*((_DWORD *)&v386 + *(unsigned __int8 *)v26[6])
                       + *(_DWORD *)v26[4] * *((_DWORD *)&v386 + *(unsigned __int8 *)v26[5]));
    v56 = *(unsigned __int8 *)v26[9];
    v57 = *((_DWORD *)v384 + v56);
    while (1)
    {
      v58 = *(_DWORD *)(v53 + 56);
      v59 = *(_DWORD *)(v53 + 60);
      v60 = v57 <= v59;
      v61 = v57 >= v58;
      if (v59 < v58)
      {
        v61 = v57 <= v58;
        v60 = v57 >= v59;
      }
      v62 = !v60 || !v61;
      if (!v62 && *(_DWORD *)(*(_QWORD *)(v53 + 24) + 4 * v55) == 1)
        break;
      v53 += 64;
      if (v53 == v54)
        goto LABEL_5;
    }
    v63 = *(_QWORD *)v53 + 12 * v55;
    v412 = *(_QWORD *)v63;
    v413 = *(_DWORD *)(v63 + 8);
    if (v57 == v59)
    {
      a10.i32[0] = *(_DWORD *)(v53 + 48);
      *((_DWORD *)&v412 + v56) = a10.i32[0];
    }
    else
    {
      if (v57 == v58)
      {
        a10.i32[0] = *(_DWORD *)(v53 + 52);
      }
      else
      {
        *(float32x2_t *)a10.f32 = vcvt_f32_s32(*(int32x2_t *)a9.f32);
        a10.f32[2] = (float)v25;
        a11.i32[0] = *(_DWORD *)(v27 + 312);
        a10 = vmulq_n_f32(vaddq_f32(a10, v19), a11.f32[0]);
        *(_DWORD *)&v373[8] = a10.i32[2];
        *(_QWORD *)v373 = a10.i64[0];
        a10.i32[0] = *(_DWORD *)&v373[4 * v56];
      }
      *((_DWORD *)&v412 + v56) = a10.i32[0];
    }
LABEL_8:
    v29 = *(_QWORD *)(result + 40) + 12 * v21;
    *(_QWORD *)v29 = v412;
    *(_DWORD *)(v29 + 8) = v413;
    v30 = (char)v22[6];
    if (v30 < 0)
    {
      v35 = *(_QWORD *)(result + 64);
      v36 = **(_BYTE **)v35;
      if (!v36 && **(_BYTE **)(v35 + 8))
      {
        v37 = *(int32x2_t **)(v35 + 16);
        *(int32x2_t *)a10.f32 = vsub_s32(*(int32x2_t *)a9.f32, *v37);
        v386 = a10.i64[0];
        v387 = v25 - v37[1].i32[0];
        v38 = *(uint64_t **)(v35 + 48);
        v39 = *v38;
        v40 = v38[1];
        if (v39 == v40)
        {
LABEL_40:
          v36 = 0;
        }
        else
        {
          v41 = (*((_DWORD *)&v386 + **(unsigned __int8 **)(v35 + 40))
                             + **(_DWORD **)(v35 + 24) * *((_DWORD *)&v386 + **(unsigned __int8 **)(v35 + 32)));
          v42 = *((_DWORD *)v384 + **(unsigned __int8 **)(v35 + 64));
          while (1)
          {
            v44 = *(_DWORD *)(v39 + 56);
            v43 = *(_DWORD *)(v39 + 60);
            v45 = v42 < v43;
            v46 = v42 > v43;
            v47 = v43 < v44;
            v48 = v43 >= v44 ? v42 > v44 : v42 < v44;
            v49 = v47 ? v46 : v45;
            v50 = !v49 || !v48;
            if (!v50 && *(_DWORD *)(*(_QWORD *)(v39 + 24) + 4 * v41) == 2)
              break;
            v39 += 64;
            if (v39 == v40)
              goto LABEL_40;
          }
          v36 = 1;
        }
      }
      v31 = *(_BYTE **)(result + 56);
      v64 = &v31[v21];
      v31[v21] = v36;
      v65 = *(_QWORD *)(result + 80);
      if (!**(_BYTE **)v65)
      {
        if (!**(_BYTE **)(v65 + 8)
          || (v66 = *(int32x2_t **)(v65 + 16),
              *(int32x2_t *)a10.f32 = vsub_s32(*(int32x2_t *)a9.f32, *v66),
              v386 = a10.i64[0],
              v387 = v25 - v66[1].i32[0],
              v67 = *(uint64_t **)(v65 + 48),
              v68 = *v67,
              v69 = v67[1],
              v68 == v69))
        {
LABEL_56:
          v32 = *(unsigned __int8 **)(result + 72);
          v32[v21] = 1;
          v34 = *v64 == 0;
LABEL_69:
          v82 = *(_QWORD *)(result + 88);
          *(_BYTE *)(v82 + v21) = v34;
          if (!v31[v21])
            goto LABEL_2;
LABEL_70:
          v84 = *(_BYTE **)(result + 32);
          if (*v84 == 8)
            *v84 = v21;
          goto LABEL_2;
        }
        v70 = (*((_DWORD *)&v386 + **(unsigned __int8 **)(v65 + 40))
                           + **(_DWORD **)(v65 + 24) * *((_DWORD *)&v386 + **(unsigned __int8 **)(v65 + 32)));
        v71 = *((_DWORD *)v384 + **(unsigned __int8 **)(v65 + 64));
        while (1)
        {
          v73 = *(_DWORD *)(v68 + 56);
          v72 = *(_DWORD *)(v68 + 60);
          v74 = v71 <= v73;
          if (v72 < v73)
          {
            v75 = v71 >= v72;
          }
          else
          {
            v74 = v71 >= v73;
            v75 = v71 <= v72;
          }
          v76 = !v75 || !v74;
          if (!v76 && *(_DWORD *)(*(_QWORD *)(v68 + 24) + 4 * v70))
            break;
          v68 += 64;
          if (v68 == v69)
            goto LABEL_56;
        }
      }
      v32 = *(unsigned __int8 **)(result + 72);
      v32[v21] = 0;
      v33 = *v64;
      v34 = *v64 == 0;
    }
    else
    {
      v31 = *(_BYTE **)(result + 56);
      v31[v21] = v30 != 0;
      v32 = *(unsigned __int8 **)(result + 72);
      v32[v21] = 0;
      v33 = v31[v21];
      v34 = v31[v21] == 0;
    }
    if (v33)
      goto LABEL_69;
    if (!v30)
    {
      v83 = v22[1];
      if (v83 > 0x29)
      {
        v82 = *(_QWORD *)(result + 88);
        *(_BYTE *)(v82 + v21) = 1;
        if (!v31[v21])
          goto LABEL_2;
        goto LABEL_70;
      }
      v34 = byte_224693ECF[v83] == 0;
      goto LABEL_69;
    }
    v77 = **(_QWORD **)(result + 96);
    if (!**(_BYTE **)v77)
      goto LABEL_63;
    v78 = *(int32x2_t **)(v77 + 8);
    *(int32x2_t *)a10.f32 = *v78;
    *(int32x2_t *)a9.f32 = vsub_s32(*(int32x2_t *)a9.f32, *v78);
    v386 = a9.i64[0];
    v387 = v25 - v78[1].i32[0];
    v79 = *(uint64_t **)(v77 + 40);
    v80 = *v79;
    v81 = v79[1];
    if (*v79 == v81)
    {
LABEL_63:
      v82 = *(_QWORD *)(result + 88);
      *(_BYTE *)(v82 + v21) = 1;
      if (!v31[v21])
        goto LABEL_2;
      goto LABEL_70;
    }
    while (!*(_DWORD *)(*(_QWORD *)(v80 + 24)
                       + 4
                       * (*((_DWORD *)&v386 + **(unsigned __int8 **)(v77 + 32))
                                      + **(_DWORD **)(v77 + 16) * *((_DWORD *)&v386 + **(unsigned __int8 **)(v77 + 24)))))
    {
      v80 += 64;
      if (v80 == v81)
        goto LABEL_63;
    }
    v85 = *((_DWORD *)v384 + **(unsigned __int8 **)(v77 + 48));
    if (v85 == *(_DWORD *)(v80 + 60))
    {
      v86 = 3u;
    }
    else if (v85 == *(_DWORD *)(v80 + 56))
    {
      v86 = 1;
    }
    else
    {
      v86 = 2;
    }
    v82 = *(_QWORD *)(result + 88);
    *(_BYTE *)(v82 + v21) = byte_224693ECF[v86] == 0;
    if (v31[v21])
      goto LABEL_70;
LABEL_2:
    ++v18;
  }
  while (v18 != (char *)&unk_224661382);
  v87 = **(unsigned __int8 **)(result + 32);
  if ((_DWORD)v87 != 8)
  {
    *(int32x2_t *)v20.f32 = v371;
    v364 = vadd_s32(v371, (int32x2_t)(*(_QWORD *)&vshl_u32((uint32x2_t)vdup_n_s32(v87), (uint32x2_t)-2) & 0xFFFFFF01FFFFFF01));
    v365 = v372 + (v87 & 1);
    v88 = *(_QWORD *)(result + 40);
    v358 = *(_DWORD **)(result + 8);
    v89 = *(_QWORD *)(result + 80);
    v361.i64[0] = (uint64_t)&v366;
    v361.i64[1] = v89;
    v90 = *(_QWORD *)(result + 104);
    v362.i64[0] = v88;
    v362.i64[1] = v90;
    v363 = &v364;
    if ((_DWORD)v87)
    {
      v91 = (unsigned __int8 *)&unk_2246613E4 + 9 * v87;
      v92 = *v91;
      v93 = v88 + 12 * v92;
      *(_QWORD *)v373 = *(_QWORD *)v93;
      *(_DWORD *)&v373[8] = *(_DWORD *)(v93 + 8);
      v404 = v31[v92];
      v403[0] = v32[v92];
      v402[0] = *(_BYTE *)(v82 + v92);
      v94 = v91[1];
      v95 = v88 + 12 * v94;
      *(_QWORD *)&v373[12] = *(_QWORD *)v95;
      *(_DWORD *)&v373[20] = *(_DWORD *)(v95 + 8);
      v405 = v31[v94];
      v96 = v32[v94];
      v403[1] = v32[v94];
      v402[1] = *(_BYTE *)(v82 + v94);
      v97 = v91[2];
      v98 = v88 + 12 * v97;
      *(_DWORD *)v374 = *(_DWORD *)(v98 + 8);
      *(_QWORD *)&v373[24] = *(_QWORD *)v98;
      v99 = v31[v97];
      v406 = v31[v97];
      v100 = v32[v97];
      v403[2] = v32[v97];
      v402[2] = *(_BYTE *)(v82 + v97);
      v101 = v91[3];
      v102 = v88 + 12 * v101;
      *(_QWORD *)&v374[4] = *(_QWORD *)v102;
      v375 = *(_DWORD *)(v102 + 8);
      result = v31[v101];
      v407 = v31[v101];
      v103 = v32[v101];
      v403[3] = v32[v101];
      v402[3] = *(_BYTE *)(v82 + v101);
      v104 = v91[4];
      v105 = v88 + 12 * v104;
      v377 = *(_DWORD *)(v105 + 8);
      v376 = *(_QWORD *)v105;
      v106 = v31[v104];
      v408 = v31[v104];
      v107 = v32[v104];
      v403[4] = v32[v104];
      v402[4] = *(_BYTE *)(v82 + v104);
      v108 = v91[5];
      v109 = v88 + 12 * v108;
      v379 = *(_DWORD *)(v109 + 8);
      v378 = *(_QWORD *)v109;
      v110 = v31[v108];
      v409 = v31[v108];
      v111 = v32[v108];
      v403[5] = v32[v108];
      v402[5] = *(_BYTE *)(v82 + v108);
      v112 = v91[6];
      v113 = v88 + 12 * v112;
      v381 = *(_DWORD *)(v113 + 8);
      v380 = *(_QWORD *)v113;
      v114 = v31[v112];
      v410 = v31[v112];
      v115 = v32[v112];
      v403[6] = v32[v112];
      v402[6] = *(_BYTE *)(v82 + v112);
      v356 = v91;
      v116 = v91[7];
      v117 = v88 + 12 * v116;
      v383 = *(_DWORD *)(v117 + 8);
      v382 = *(_QWORD *)v117;
      v118 = v31[v116];
      v411 = v31[v116];
      v119 = v32[v116];
      v403[7] = v32[v116];
      v402[7] = *(_BYTE *)(v82 + v116);
      if (v405)
      {
        v120 = 0;
        v96 = 0;
        v121 = 0uLL;
        if (v99)
          goto LABEL_88;
      }
      else
      {
        v19.i64[0] = *(_QWORD *)&v373[12];
        v19.i32[2] = *(_DWORD *)&v373[20];
        v20 = 0uLL;
        v121 = vaddq_f32(v19, (float32x4_t)0);
        v120 = 1;
        if (v99)
        {
LABEL_88:
          v122 = v120;
          if ((_DWORD)result)
            goto LABEL_90;
          goto LABEL_89;
        }
      }
      v122 = v120 | 2;
      v20.i64[0] = *(_QWORD *)&v373[24];
      v20.i32[2] = *(_DWORD *)v374;
      v121 = vaddq_f32(v121, v20);
      ++v120;
      v96 += v100;
      if ((_DWORD)result)
      {
LABEL_90:
        if (v106)
        {
          if (v110)
            goto LABEL_92;
        }
        else
        {
          v122 |= 8u;
          v20.i64[0] = v376;
          v20.i32[2] = v377;
          v121 = vaddq_f32(v121, v20);
          ++v120;
          v96 += v107;
          if (v110)
          {
LABEL_92:
            if (v114)
              goto LABEL_93;
            goto LABEL_114;
          }
        }
        v122 |= 0x10u;
        v20.i64[0] = v378;
        v20.i32[2] = v379;
        v121 = vaddq_f32(v121, v20);
        ++v120;
        v96 += v111;
        if (v114)
        {
LABEL_93:
          if (v118)
            goto LABEL_94;
LABEL_115:
          v122 |= 0x40u;
          v20.i64[0] = v382;
          v20.i32[2] = v383;
          v121 = vaddq_f32(v121, v20);
          ++v120;
          v96 += v119;
LABEL_94:
          ++*v358;
          v123 = &byte_22466142C[48 * v122];
          v126 = v123[31];
          v124 = v123 + 31;
          v125 = v126;
          if (v126 == 8)
          {
            v127 = v96;
            LOBYTE(v128) = v122;
            goto LABEL_135;
          }
          if (v402[v125])
          {
            v128 = v122 + (-1 << (v125 - 1));
            v143 = &v373[12 * v125];
            v20.i64[0] = *(_QWORD *)v143;
            v20.i32[2] = *((_DWORD *)v143 + 2);
            v121 = vsubq_f32(v121, v20);
            --v120;
            v127 = v96 - (char)v403[v125];
            v144 = v124[1];
            if ((_DWORD)v144 == 8)
              goto LABEL_135;
          }
          else
          {
            v127 = v96;
            v128 = v122;
            v144 = v124[1];
            if ((_DWORD)v144 == 8)
              goto LABEL_135;
          }
          if (v402[v144])
          {
            v128 += -1 << (v144 - 1);
            v147 = &v373[12 * v144];
            v20.i64[0] = *(_QWORD *)v147;
            v20.i32[2] = *((_DWORD *)v147 + 2);
            v121 = vsubq_f32(v121, v20);
            --v120;
            v127 -= (char)v403[v144];
          }
          v148 = v124[2];
          if ((_DWORD)v148 != 8)
          {
            if (v402[v148])
            {
              v128 += -1 << (v148 - 1);
              v149 = &v373[12 * v124[2]];
              v20.i64[0] = *(_QWORD *)v149;
              v20.i32[2] = *((_DWORD *)v149 + 2);
              v121 = vsubq_f32(v121, v20);
              --v120;
              v127 -= (char)v403[v148];
            }
            v150 = v124[3];
            if ((_DWORD)v150 != 8 && v402[v150])
            {
              v128 += -1 << (v150 - 1);
              v151 = &v373[12 * v150];
              v20.i64[0] = *(_QWORD *)v151;
              v20.i32[2] = *((_DWORD *)v151 + 2);
              v121 = vsubq_f32(v121, v20);
              --v120;
              v127 -= (char)v403[v150];
            }
          }
LABEL_135:
          if (v120)
          {
            v20.f32[0] = (float)v120;
            v20 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 0);
            v121 = vdivq_f32(v121, v20);
          }
          v387 = v121.i32[2];
          v386 = v121.i64[0];
          v152 = v128;
          v153 = &byte_22466142C[48 * v128];
          v154 = v153[1];
          if (v154 != 8)
          {
            result = sub_223B569E0((uint64_t)&v361, 1, v356[v154], v356[v153[2]], v356[v153[3]], v356[v153[4]], (uint64_t)&v386, v127 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v155 = v153[5];
            if (v155 != 8)
            {
              result = sub_223B569E0((uint64_t)&v361, 1, v356[v155], v356[v153[6]], v356[v153[7]], v356[v153[8]], (uint64_t)&v386, v127 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v156 = v153[9];
              if (v156 != 8)
                result = sub_223B569E0((uint64_t)&v361, 1, v356[v156], v356[v153[10]], v356[v153[11]], v356[v153[12]], (uint64_t)&v386, v127 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            }
          }
          v157 = &byte_22466142C[48 * v152];
          v160 = v157[13];
          v159 = v157 + 13;
          v158 = v160;
          v161 = v160 == 8;
          if (*v153)
          {
            if (v161)
              goto LABEL_168;
            v162 = v159[1];
            if (v402[v162])
              result = sub_223B569E0((uint64_t)&v361, 0, v356[v158], v356[v162], v356[v159[2]], 8u, (uint64_t)&v386, v127 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v163 = v159[3];
            if (v163 == 8)
              goto LABEL_168;
            v164 = v159[4];
            if (v402[v164])
              result = sub_223B569E0((uint64_t)&v361, 0, v356[v163], v356[v164], v356[v159[5]], 8u, (uint64_t)&v386, v127 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v165 = v159[6];
            if (v165 == 8)
              goto LABEL_168;
            v166 = v159[7];
            if (v402[v166])
              result = sub_223B569E0((uint64_t)&v361, 0, v356[v165], v356[v166], v356[v159[8]], 8u, (uint64_t)&v386, v127 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v167 = v159[9];
            if (v167 == 8)
              goto LABEL_168;
            v168 = v159[10];
            if (v402[v168])
              result = sub_223B569E0((uint64_t)&v361, 0, v356[v167], v356[v168], v356[v159[11]], 8u, (uint64_t)&v386, v127 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v169 = v159[12];
            if (v169 == 8)
              goto LABEL_168;
            v170 = v159[13];
            if (v402[v170])
              result = sub_223B569E0((uint64_t)&v361, 0, v356[v169], v356[v170], v356[v159[14]], 8u, (uint64_t)&v386, v127 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v171 = v159[15];
            if (v171 == 8)
              goto LABEL_168;
            v172 = v159[16];
            if (!v402[v172])
              goto LABEL_168;
          }
          else
          {
            if (v161)
              goto LABEL_168;
            result = sub_223B569E0((uint64_t)&v361, 0, v356[v158], v356[v159[1]], v356[v159[2]], 8u, (uint64_t)&v386, v127 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v173 = v159[3];
            if (v173 == 8)
              goto LABEL_168;
            result = sub_223B569E0((uint64_t)&v361, 0, v356[v173], v356[v159[4]], v356[v159[5]], 8u, (uint64_t)&v386, v127 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v174 = v159[6];
            if (v174 == 8)
              goto LABEL_168;
            result = sub_223B569E0((uint64_t)&v361, 0, v356[v174], v356[v159[7]], v356[v159[8]], 8u, (uint64_t)&v386, v127 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v175 = v159[9];
            if (v175 == 8)
              goto LABEL_168;
            result = sub_223B569E0((uint64_t)&v361, 0, v356[v175], v356[v159[10]], v356[v159[11]], 8u, (uint64_t)&v386, v127 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v176 = v159[12];
            if (v176 == 8)
              goto LABEL_168;
            result = sub_223B569E0((uint64_t)&v361, 0, v356[v176], v356[v159[13]], v356[v159[14]], 8u, (uint64_t)&v386, v127 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v171 = v159[15];
            if (v171 == 8)
              goto LABEL_168;
            v172 = v159[16];
          }
          result = sub_223B569E0((uint64_t)&v361, 0, v356[v171], v356[v172], v356[v159[17]], 8u, (uint64_t)&v386, v127 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
LABEL_168:
          v177 = 0;
          while (1)
          {
            v178 = byte_22466142C[48 * v122 + 35 + v177];
            if (v178 == 8)
              return result;
            v179 = (unsigned __int8 *)&unk_2246613E4 + 9 * v178;
            v180 = *v179;
            v181 = &v373[12 * v180];
            v386 = *(_QWORD *)v181;
            v387 = *((_DWORD *)v181 + 2);
            LOBYTE(v412) = v403[v180];
            v414 = v402[v180];
            v182 = v179[1];
            v183 = &v373[12 * v182];
            v388 = *(_QWORD *)v183;
            v389 = *((_DWORD *)v183 + 2);
            v184 = *(&v404 + v182);
            v185 = v403[v182];
            BYTE1(v412) = v403[v182];
            v415 = v402[v182];
            v186 = v179[2];
            v187 = &v373[12 * v186];
            v390 = *(_QWORD *)v187;
            v391 = *((_DWORD *)v187 + 2);
            v188 = *(&v404 + v186);
            v189 = v403[v186];
            LOBYTE(v186) = v402[v186];
            BYTE2(v412) = v189;
            v416 = v186;
            v190 = v179[3];
            v191 = &v373[12 * v190];
            v392 = *(_QWORD *)v191;
            v393 = *((_DWORD *)v191 + 2);
            v192 = *(&v404 + v190);
            result = v403[v190];
            BYTE3(v412) = v403[v190];
            v417 = v402[v190];
            v193 = v179[4];
            v194 = &v373[12 * v193];
            v395 = *((_DWORD *)v194 + 2);
            v394 = *(_QWORD *)v194;
            v195 = *(&v404 + v193);
            v196 = v403[v193];
            BYTE4(v412) = v403[v193];
            v418 = v402[v193];
            v197 = v179[5];
            v198 = &v373[12 * v197];
            v397 = *((_DWORD *)v198 + 2);
            v396 = *(_QWORD *)v198;
            v199 = *(&v404 + v197);
            v200 = v403[v197];
            LOBYTE(v197) = v402[v197];
            BYTE5(v412) = v200;
            v419 = v197;
            v201 = v179[6];
            v202 = &v373[12 * v201];
            v203 = *(_QWORD *)v202;
            v399 = *((_DWORD *)v202 + 2);
            v398 = v203;
            v204 = *(&v404 + v201);
            v205 = v403[v201];
            BYTE6(v412) = v403[v201];
            v420 = v402[v201];
            v206 = v179[7];
            v207 = &v373[12 * v206];
            v208 = *(_QWORD *)v207;
            v401 = *((_DWORD *)v207 + 2);
            v400 = v208;
            v209 = *(&v404 + v206);
            v210 = v403[v206];
            HIBYTE(v412) = v403[v206];
            v421 = v402[v206];
            if (v184)
            {
              v211 = 0;
              v121 = 0uLL;
              if (v188)
                goto LABEL_174;
            }
            else
            {
              v121.i64[0] = v388;
              v121.i32[2] = v389;
              v20 = 0uLL;
              v121 = vaddq_f32(v121, (float32x4_t)0);
              v96 += v185;
              v211 = 1;
              if (v188)
              {
LABEL_174:
                v212 = v211;
                if (v192)
                  goto LABEL_175;
                goto LABEL_218;
              }
            }
            v212 = v211 | 2;
            v20.i64[0] = v390;
            v20.i32[2] = v391;
            v121 = vaddq_f32(v121, v20);
            ++v211;
            v96 += v189;
            if (v192)
            {
LABEL_175:
              if (v195)
                goto LABEL_176;
              goto LABEL_219;
            }
LABEL_218:
            v212 |= 4u;
            v20.i64[0] = v392;
            v20.i32[2] = v393;
            v121 = vaddq_f32(v121, v20);
            ++v211;
            v96 += result;
            if (v195)
            {
LABEL_176:
              if (v199)
                goto LABEL_177;
              goto LABEL_220;
            }
LABEL_219:
            v212 |= 8u;
            v20.i64[0] = v394;
            v20.i32[2] = v395;
            v121 = vaddq_f32(v121, v20);
            ++v211;
            v96 += v196;
            if (v199)
            {
LABEL_177:
              if (!v204)
                goto LABEL_221;
              goto LABEL_178;
            }
LABEL_220:
            v212 |= 0x10u;
            v20.i64[0] = v396;
            v20.i32[2] = v397;
            v121 = vaddq_f32(v121, v20);
            ++v211;
            v96 += v200;
            if (!v204)
            {
LABEL_221:
              v212 |= 0x20u;
              v20.i64[0] = v398;
              v20.i32[2] = v399;
              v121 = vaddq_f32(v121, v20);
              ++v211;
              v96 += v205;
              if (v209)
                goto LABEL_179;
              goto LABEL_222;
            }
LABEL_178:
            if (v209)
              goto LABEL_179;
LABEL_222:
            v212 |= 0x40u;
            v20.i64[0] = v400;
            v20.i32[2] = v401;
            v121 = vaddq_f32(v121, v20);
            ++v211;
            v96 += v210;
LABEL_179:
            ++*v358;
            v213 = &byte_22466142C[48 * v212];
            v216 = v213[31];
            v214 = v213 + 31;
            v215 = v216;
            v359 = v96;
            if (v216 != 8)
            {
              if (*(&v414 + v215))
              {
                v217 = (char *)&v386 + 12 * v215;
                v20.i64[0] = *(_QWORD *)v217;
                v20.i32[2] = *((_DWORD *)v217 + 2);
                v212 += -1 << (v215 - 1);
                v121 = vsubq_f32(v121, v20);
                --v211;
                v96 -= *((char *)&v412 + v215);
              }
              v218 = v214[1];
              if ((_DWORD)v218 != 8)
              {
                if (*(&v414 + v218))
                {
                  v219 = (char *)&v386 + 12 * v214[1];
                  v20.i64[0] = *(_QWORD *)v219;
                  v20.i32[2] = *((_DWORD *)v219 + 2);
                  v212 += -1 << (v218 - 1);
                  v121 = vsubq_f32(v121, v20);
                  --v211;
                  v96 -= *((char *)&v412 + v218);
                }
                v220 = v214[2];
                if ((_DWORD)v220 != 8)
                {
                  if (*(&v414 + v220))
                  {
                    v221 = (char *)&v386 + 12 * v214[2];
                    v20.i64[0] = *(_QWORD *)v221;
                    v20.i32[2] = *((_DWORD *)v221 + 2);
                    v212 += -1 << (v220 - 1);
                    v121 = vsubq_f32(v121, v20);
                    --v211;
                    v96 -= *((char *)&v412 + v220);
                  }
                  v222 = v214[3];
                  if ((_DWORD)v222 != 8 && *(&v414 + v222))
                  {
                    v223 = (char *)&v386 + 12 * v222;
                    v20.i64[0] = *(_QWORD *)v223;
                    v20.i32[2] = *((_DWORD *)v223 + 2);
                    v212 += -1 << (v222 - 1);
                    v121 = vsubq_f32(v121, v20);
                    --v211;
                    v96 -= *((char *)&v412 + v222);
                  }
                }
              }
            }
            if (v211)
            {
              v20.f32[0] = (float)v211;
              v20 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 0);
              v121 = vdivq_f32(v121, v20);
            }
            DWORD2(v384[0]) = v121.i32[2];
            *(_QWORD *)&v384[0] = v121.i64[0];
            v224 = v212;
            v225 = &byte_22466142C[48 * v212];
            v226 = v225[1];
            if (v226 != 8)
            {
              result = sub_223B569E0((uint64_t)&v361, 1, v356[v179[v226]], v356[v179[v225[2]]], v356[v179[v225[3]]], v356[v179[v225[4]]], (uint64_t)v384, v96 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v227 = v225[5];
              if (v227 != 8)
              {
                result = sub_223B569E0((uint64_t)&v361, 1, v356[v179[v227]], v356[v179[v225[6]]], v356[v179[v225[7]]], v356[v179[v225[8]]], (uint64_t)v384, v96 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
                v228 = v225[9];
                if (v228 != 8)
                  result = sub_223B569E0((uint64_t)&v361, 1, v356[v179[v228]], v356[v179[v225[10]]], v356[v179[v225[11]]], v356[v179[v225[12]]], (uint64_t)v384, v96 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              }
            }
            v229 = &byte_22466142C[48 * v224];
            v232 = v229[13];
            v231 = v229 + 13;
            v230 = v232;
            v233 = v232 == 8;
            if (*v225)
            {
              if (v233)
                goto LABEL_170;
              v234 = v231[1];
              if (*(&v414 + v234))
                result = sub_223B569E0((uint64_t)&v361, 0, v356[v179[v230]], v356[v179[v234]], v356[v179[v231[2]]], 8u, (uint64_t)v384, v96 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v235 = v231[3];
              if (v235 == 8)
                goto LABEL_170;
              v236 = v231[4];
              if (*(&v414 + v236))
                result = sub_223B569E0((uint64_t)&v361, 0, v356[v179[v235]], v356[v179[v236]], v356[v179[v231[5]]], 8u, (uint64_t)v384, v96 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v237 = v231[6];
              if (v237 == 8)
                goto LABEL_170;
              v238 = v231[7];
              if (*(&v414 + v238))
                result = sub_223B569E0((uint64_t)&v361, 0, v356[v179[v237]], v356[v179[v238]], v356[v179[v231[8]]], 8u, (uint64_t)v384, v96 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v239 = v231[9];
              if (v239 == 8)
                goto LABEL_170;
              v240 = v231[10];
              if (*(&v414 + v240))
                result = sub_223B569E0((uint64_t)&v361, 0, v356[v179[v239]], v356[v179[v240]], v356[v179[v231[11]]], 8u, (uint64_t)v384, v96 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v241 = v231[12];
              if (v241 == 8)
                goto LABEL_170;
              v242 = v231[13];
              if (*(&v414 + v242))
                result = sub_223B569E0((uint64_t)&v361, 0, v356[v179[v241]], v356[v179[v242]], v356[v179[v231[14]]], 8u, (uint64_t)v384, v96 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v243 = v231[15];
              if (v243 == 8)
                goto LABEL_170;
              v244 = v231[16];
              if (!*(&v414 + v244))
                goto LABEL_170;
            }
            else
            {
              if (v233)
                goto LABEL_170;
              result = sub_223B569E0((uint64_t)&v361, 0, v356[v179[v230]], v356[v179[v231[1]]], v356[v179[v231[2]]], 8u, (uint64_t)v384, v96 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v245 = v231[3];
              if (v245 == 8)
                goto LABEL_170;
              result = sub_223B569E0((uint64_t)&v361, 0, v356[v179[v245]], v356[v179[v231[4]]], v356[v179[v231[5]]], 8u, (uint64_t)v384, v96 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v246 = v231[6];
              if (v246 == 8)
                goto LABEL_170;
              result = sub_223B569E0((uint64_t)&v361, 0, v356[v179[v246]], v356[v179[v231[7]]], v356[v179[v231[8]]], 8u, (uint64_t)v384, v96 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v247 = v231[9];
              if (v247 == 8)
                goto LABEL_170;
              result = sub_223B569E0((uint64_t)&v361, 0, v356[v179[v247]], v356[v179[v231[10]]], v356[v179[v231[11]]], 8u, (uint64_t)v384, v96 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v248 = v231[12];
              if (v248 == 8)
                goto LABEL_170;
              result = sub_223B569E0((uint64_t)&v361, 0, v356[v179[v248]], v356[v179[v231[13]]], v356[v179[v231[14]]], 8u, (uint64_t)v384, v96 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v243 = v231[15];
              if (v243 == 8)
                goto LABEL_170;
              v244 = v231[16];
            }
            result = sub_223B569E0((uint64_t)&v361, 0, v356[v179[v243]], v356[v179[v244]], v356[v179[v231[17]]], 8u, (uint64_t)v384, v96 != 0, v121, v20, a9, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
LABEL_170:
            ++v177;
            v96 = v359;
            if (v177 == 3)
              return result;
          }
        }
LABEL_114:
        v122 |= 0x20u;
        v20.i64[0] = v380;
        v20.i32[2] = v381;
        v121 = vaddq_f32(v121, v20);
        ++v120;
        v96 += v115;
        if (v118)
          goto LABEL_94;
        goto LABEL_115;
      }
LABEL_89:
      v122 |= 4u;
      v20.i64[0] = *(_QWORD *)&v374[4];
      result = (uint64_t)&v375;
      v20.i32[2] = v375;
      v121 = vaddq_f32(v121, v20);
      ++v120;
      v96 += v103;
      goto LABEL_90;
    }
    v129.i32[3] = v361.i32[3];
    v130.i32[3] = v362.i32[3];
    v384[0] = v361;
    v384[1] = v362;
    v385 = v363;
    if (v31[1])
    {
      v131 = 0;
      v132 = 0;
      v133 = 0uLL;
      if (v31[2])
        goto LABEL_98;
    }
    else
    {
      v129.i64[0] = *(_QWORD *)(v88 + 12);
      v129.i32[2] = *(_DWORD *)(v88 + 20);
      v130.i32[3] = 0;
      v133 = vaddq_f32(v129, (float32x4_t)0);
      v132 = v32[1];
      v131 = 1;
      if (v31[2])
      {
LABEL_98:
        v134 = v131;
        if (v31[3])
          goto LABEL_100;
        goto LABEL_99;
      }
    }
    v134 = v131 | 2;
    v130.i64[0] = *(_QWORD *)(v88 + 24);
    v130.i32[2] = *(_DWORD *)(v88 + 32);
    v133 = vaddq_f32(v133, v130);
    ++v131;
    v132 += v32[2];
    if (v31[3])
    {
LABEL_100:
      if (v31[4])
      {
        if (v31[5])
          goto LABEL_102;
      }
      else
      {
        v134 |= 8u;
        v130.i64[0] = *(_QWORD *)(v88 + 48);
        v130.i32[2] = *(_DWORD *)(v88 + 56);
        v133 = vaddq_f32(v133, v130);
        ++v131;
        v132 += v32[4];
        if (v31[5])
        {
LABEL_102:
          if (v31[6])
            goto LABEL_103;
          goto LABEL_124;
        }
      }
      v134 |= 0x10u;
      v130.i64[0] = *(_QWORD *)(v88 + 60);
      v130.i32[2] = *(_DWORD *)(v88 + 68);
      v133 = vaddq_f32(v133, v130);
      ++v131;
      v132 += v32[5];
      if (v31[6])
      {
LABEL_103:
        if (v31[7])
          goto LABEL_104;
LABEL_125:
        v134 |= 0x40u;
        v130.i64[0] = *(_QWORD *)(v88 + 84);
        v130.i32[2] = *(_DWORD *)(v88 + 92);
        v133 = vaddq_f32(v133, v130);
        ++v131;
        v132 += v32[7];
LABEL_104:
        ++*v358;
        v135 = v361;
        v136 = v362;
        *(float32x4_t *)v373 = v361;
        *(float32x4_t *)&v373[16] = v362;
        *(_QWORD *)v374 = v363;
        v137 = &byte_22466142C[48 * v134];
        v140 = v137[31];
        v138 = v137 + 31;
        v139 = v140;
        if (v140 == 8)
        {
          v141 = v132;
          LOBYTE(v142) = v134;
LABEL_239:
          v360 = v132;
          if (v131)
          {
            v135.f32[0] = (float)v131;
            v135 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v135.f32, 0);
            v133 = vdivq_f32(v133, v135);
          }
          v387 = v133.i32[2];
          v386 = v133.i64[0];
          v254 = v142;
          v255 = &byte_22466142C[48 * v142];
          v256 = v255[1];
          if (v256 != 8)
          {
            result = sub_223B569E0((uint64_t)v373, 1, v256, v255[2], v255[3], v255[4], (uint64_t)&v386, v141 != 0, v133, v135, v362, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v257 = v255[5];
            if (v257 != 8)
            {
              result = sub_223B569E0((uint64_t)v373, 1, v257, v255[6], v255[7], v255[8], (uint64_t)&v386, v141 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v258 = v255[9];
              if (v258 != 8)
                result = sub_223B569E0((uint64_t)v373, 1, v258, v255[10], v255[11], v255[12], (uint64_t)&v386, v141 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            }
          }
          v259 = &byte_22466142C[48 * v254];
          v262 = v259[13];
          v261 = v259 + 13;
          v260 = v262;
          v263 = v262 == 8;
          if (*v255)
          {
            if (!v263)
            {
              v264 = v261[1];
              if (*(_BYTE *)(v82 + v264))
                result = sub_223B569E0((uint64_t)v373, 0, v260, v264, v261[2], 8u, (uint64_t)&v386, v141 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v265 = v261[3];
              if (v265 != 8)
              {
                v266 = v261[4];
                if (*(_BYTE *)(v82 + v266))
                  result = sub_223B569E0((uint64_t)v373, 0, v265, v266, v261[5], 8u, (uint64_t)&v386, v141 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
                v267 = v261[6];
                if (v267 != 8)
                {
                  v268 = v261[7];
                  if (*(_BYTE *)(v82 + v268))
                    result = sub_223B569E0((uint64_t)v373, 0, v267, v268, v261[8], 8u, (uint64_t)&v386, v141 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
                  v269 = v261[9];
                  if (v269 != 8)
                  {
                    v270 = v261[10];
                    if (*(_BYTE *)(v82 + v270))
                      result = sub_223B569E0((uint64_t)v373, 0, v269, v270, v261[11], 8u, (uint64_t)&v386, v141 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
                    v271 = v261[12];
                    if (v271 != 8)
                    {
                      v272 = v261[13];
                      if (*(_BYTE *)(v82 + v272))
                        result = sub_223B569E0((uint64_t)v373, 0, v271, v272, v261[14], 8u, (uint64_t)&v386, v141 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
                      v273 = v261[15];
                      if (v273 != 8)
                      {
                        v274 = v261[16];
                        if (*(_BYTE *)(v82 + v274))
                          result = sub_223B569E0((uint64_t)v373, 0, v273, v274, v261[17], 8u, (uint64_t)&v386, v141 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
                      }
                    }
                  }
                }
              }
            }
          }
          else if (!v263)
          {
            result = sub_223B569E0((uint64_t)v373, 0, v260, v261[1], v261[2], 8u, (uint64_t)&v386, v141 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
            v275 = v261[3];
            if (v275 != 8)
            {
              result = sub_223B569E0((uint64_t)v373, 0, v275, v261[4], v261[5], 8u, (uint64_t)&v386, v141 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v276 = v261[6];
              if (v276 != 8)
              {
                result = sub_223B569E0((uint64_t)v373, 0, v276, v261[7], v261[8], 8u, (uint64_t)&v386, v141 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
                v277 = v261[9];
                if (v277 != 8)
                {
                  result = sub_223B569E0((uint64_t)v373, 0, v277, v261[10], v261[11], 8u, (uint64_t)&v386, v141 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
                  v278 = v261[12];
                  if (v278 != 8)
                  {
                    result = sub_223B569E0((uint64_t)v373, 0, v278, v261[13], v261[14], 8u, (uint64_t)&v386, v141 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
                    v279 = v261[15];
                    if (v279 != 8)
                      result = sub_223B569E0((uint64_t)v373, 0, v279, v261[16], v261[17], 8u, (uint64_t)&v386, v141 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
                  }
                }
              }
            }
          }
          v280 = 0;
          v357 = &byte_22466142C[48 * v134 + 35];
          while (1)
          {
            v281 = v357[v280];
            if (v281 == 8)
              return result;
            v282 = (unsigned __int8 *)&unk_2246613E4 + 9 * v281;
            v283 = *v282;
            v284 = v88 + 12 * v283;
            v386 = *(_QWORD *)v284;
            v387 = *(_DWORD *)(v284 + 8);
            v414 = v32[v283];
            v404 = *(_BYTE *)(v82 + v283);
            v285 = v282[1];
            v286 = v88 + 12 * v285;
            v388 = *(_QWORD *)v286;
            v389 = *(_DWORD *)(v286 + 8);
            v287 = v31[v285];
            v288 = v32[v285];
            v415 = v32[v285];
            v405 = *(_BYTE *)(v82 + v285);
            v289 = v282[2];
            v290 = v88 + 12 * v289;
            v390 = *(_QWORD *)v290;
            v391 = *(_DWORD *)(v290 + 8);
            v291 = v31[v289];
            v292 = v32[v289];
            LOBYTE(v289) = *(_BYTE *)(v82 + v289);
            v416 = v292;
            v406 = v289;
            v293 = v282[3];
            v294 = v88 + 12 * v293;
            v295 = *(_QWORD *)v294;
            v393 = *(_DWORD *)(v294 + 8);
            v392 = v295;
            v296 = v31[v293];
            result = v32[v293];
            v417 = v32[v293];
            v407 = *(_BYTE *)(v82 + v293);
            v297 = v282[4];
            v298 = v88 + 12 * v297;
            v299 = *(_QWORD *)v298;
            v395 = *(_DWORD *)(v298 + 8);
            v394 = v299;
            v300 = v31[v297];
            v301 = v32[v297];
            v418 = v32[v297];
            v408 = *(_BYTE *)(v82 + v297);
            v302 = v282[5];
            v303 = v88 + 12 * v302;
            v304 = *(_QWORD *)v303;
            v397 = *(_DWORD *)(v303 + 8);
            v396 = v304;
            v305 = v31[v302];
            v306 = v32[v302];
            LOBYTE(v302) = *(_BYTE *)(v82 + v302);
            v419 = v306;
            v409 = v302;
            v307 = v282[6];
            v308 = v88 + 12 * v307;
            v309 = *(_QWORD *)v308;
            v399 = *(_DWORD *)(v308 + 8);
            v398 = v309;
            v310 = v31[v307];
            v311 = v32[v307];
            v420 = v32[v307];
            v410 = *(_BYTE *)(v82 + v307);
            v312 = v282[7];
            v313 = v88 + 12 * v312;
            v314 = *(_QWORD *)v313;
            v401 = *(_DWORD *)(v313 + 8);
            v400 = v314;
            v315 = v31[v312];
            v316 = v32[v312];
            v421 = v32[v312];
            v411 = *(_BYTE *)(v82 + v312);
            if (v287)
            {
              v317 = 0;
              v133 = 0uLL;
              v318 = v360;
              if (v291)
                goto LABEL_277;
            }
            else
            {
              v133.i64[0] = v388;
              v133.i32[2] = v389;
              v135 = 0uLL;
              v133 = vaddq_f32(v133, (float32x4_t)0);
              v318 = v360 + v288;
              v317 = 1;
              if (v291)
              {
LABEL_277:
                v319 = v317;
                if (v296)
                  goto LABEL_278;
                goto LABEL_321;
              }
            }
            v319 = v317 | 2;
            v135.i64[0] = v390;
            v135.i32[2] = v391;
            v133 = vaddq_f32(v133, v135);
            ++v317;
            v318 += v292;
            if (v296)
            {
LABEL_278:
              if (v300)
                goto LABEL_279;
              goto LABEL_322;
            }
LABEL_321:
            v319 |= 4u;
            v135.i64[0] = v392;
            v135.i32[2] = v393;
            v133 = vaddq_f32(v133, v135);
            ++v317;
            v318 += result;
            if (v300)
            {
LABEL_279:
              if (v305)
                goto LABEL_280;
              goto LABEL_323;
            }
LABEL_322:
            v319 |= 8u;
            v135.i64[0] = v394;
            v135.i32[2] = v395;
            v133 = vaddq_f32(v133, v135);
            ++v317;
            v318 += v301;
            if (v305)
            {
LABEL_280:
              if (!v310)
                goto LABEL_324;
              goto LABEL_281;
            }
LABEL_323:
            v319 |= 0x10u;
            v135.i64[0] = v396;
            v135.i32[2] = v397;
            v133 = vaddq_f32(v133, v135);
            ++v317;
            v318 += v306;
            if (!v310)
            {
LABEL_324:
              v319 |= 0x20u;
              v135.i64[0] = v398;
              v135.i32[2] = v399;
              v133 = vaddq_f32(v133, v135);
              ++v317;
              v318 += v311;
              if (v315)
                goto LABEL_282;
              goto LABEL_325;
            }
LABEL_281:
            if (v315)
              goto LABEL_282;
LABEL_325:
            v319 |= 0x40u;
            v135.i64[0] = v400;
            v135.i32[2] = v401;
            v133 = vaddq_f32(v133, v135);
            ++v317;
            v318 += v316;
LABEL_282:
            ++*v358;
            v320 = &byte_22466142C[48 * v319];
            v323 = v320[31];
            v321 = v320 + 31;
            v322 = v323;
            v360 = v318;
            if (v323 != 8)
            {
              if (*(&v404 + v322))
              {
                v324 = (char *)&v386 + 12 * v322;
                v135.i64[0] = *(_QWORD *)v324;
                v135.i32[2] = *((_DWORD *)v324 + 2);
                v319 += -1 << (v322 - 1);
                v133 = vsubq_f32(v133, v135);
                --v317;
                v318 -= (char)*(&v414 + v322);
              }
              v325 = v321[1];
              if ((_DWORD)v325 != 8)
              {
                if (*(&v404 + v325))
                {
                  v326 = (char *)&v386 + 12 * v321[1];
                  v135.i64[0] = *(_QWORD *)v326;
                  v135.i32[2] = *((_DWORD *)v326 + 2);
                  v319 += -1 << (v325 - 1);
                  v133 = vsubq_f32(v133, v135);
                  --v317;
                  v318 -= (char)*(&v414 + v325);
                }
                v327 = v321[2];
                if ((_DWORD)v327 != 8)
                {
                  if (*(&v404 + v327))
                  {
                    v328 = (char *)&v386 + 12 * v321[2];
                    v135.i64[0] = *(_QWORD *)v328;
                    v135.i32[2] = *((_DWORD *)v328 + 2);
                    v319 += -1 << (v327 - 1);
                    v133 = vsubq_f32(v133, v135);
                    --v317;
                    v318 -= (char)*(&v414 + v327);
                  }
                  v329 = v321[3];
                  if ((_DWORD)v329 != 8 && *(&v404 + v329))
                  {
                    v330 = (char *)&v386 + 12 * v329;
                    v135.i64[0] = *(_QWORD *)v330;
                    v135.i32[2] = *((_DWORD *)v330 + 2);
                    v319 += -1 << (v329 - 1);
                    v133 = vsubq_f32(v133, v135);
                    --v317;
                    v318 -= (char)*(&v414 + v329);
                  }
                }
              }
            }
            if (v317)
            {
              v135.f32[0] = (float)v317;
              v135 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v135.f32, 0);
              v133 = vdivq_f32(v133, v135);
            }
            v413 = v133.u32[2];
            v412 = v133.i64[0];
            v331 = v319;
            v332 = &byte_22466142C[48 * v319];
            v333 = v332[1];
            if (v333 != 8)
            {
              result = sub_223B569E0((uint64_t)v384, 1, v282[v333], v282[v332[2]], v282[v332[3]], v282[v332[4]], (uint64_t)&v412, v318 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v334 = v332[5];
              if (v334 != 8)
              {
                result = sub_223B569E0((uint64_t)v384, 1, v282[v334], v282[v332[6]], v282[v332[7]], v282[v332[8]], (uint64_t)&v412, v318 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
                v335 = v332[9];
                if (v335 != 8)
                  result = sub_223B569E0((uint64_t)v384, 1, v282[v335], v282[v332[10]], v282[v332[11]], v282[v332[12]], (uint64_t)&v412, v318 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              }
            }
            v336 = &byte_22466142C[48 * v331];
            v339 = v336[13];
            v338 = v336 + 13;
            v337 = v339;
            v340 = v339 == 8;
            if (*v332)
            {
              if (v340)
                goto LABEL_273;
              v341 = v338[1];
              if (*(&v404 + v341))
                result = sub_223B569E0((uint64_t)v384, 0, v282[v337], v282[v341], v282[v338[2]], 8u, (uint64_t)&v412, v318 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v342 = v338[3];
              if (v342 == 8)
                goto LABEL_273;
              v343 = v338[4];
              if (*(&v404 + v343))
                result = sub_223B569E0((uint64_t)v384, 0, v282[v342], v282[v343], v282[v338[5]], 8u, (uint64_t)&v412, v318 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v344 = v338[6];
              if (v344 == 8)
                goto LABEL_273;
              v345 = v338[7];
              if (*(&v404 + v345))
                result = sub_223B569E0((uint64_t)v384, 0, v282[v344], v282[v345], v282[v338[8]], 8u, (uint64_t)&v412, v318 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v346 = v338[9];
              if (v346 == 8)
                goto LABEL_273;
              v347 = v338[10];
              if (*(&v404 + v347))
                result = sub_223B569E0((uint64_t)v384, 0, v282[v346], v282[v347], v282[v338[11]], 8u, (uint64_t)&v412, v318 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v348 = v338[12];
              if (v348 == 8)
                goto LABEL_273;
              v349 = v338[13];
              if (*(&v404 + v349))
                result = sub_223B569E0((uint64_t)v384, 0, v282[v348], v282[v349], v282[v338[14]], 8u, (uint64_t)&v412, v318 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v350 = v338[15];
              if (v350 == 8)
                goto LABEL_273;
              v351 = v338[16];
              if (!*(&v404 + v351))
                goto LABEL_273;
            }
            else
            {
              if (v340)
                goto LABEL_273;
              result = sub_223B569E0((uint64_t)v384, 0, v282[v337], v282[v338[1]], v282[v338[2]], 8u, (uint64_t)&v412, v318 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v352 = v338[3];
              if (v352 == 8)
                goto LABEL_273;
              result = sub_223B569E0((uint64_t)v384, 0, v282[v352], v282[v338[4]], v282[v338[5]], 8u, (uint64_t)&v412, v318 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v353 = v338[6];
              if (v353 == 8)
                goto LABEL_273;
              result = sub_223B569E0((uint64_t)v384, 0, v282[v353], v282[v338[7]], v282[v338[8]], 8u, (uint64_t)&v412, v318 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v354 = v338[9];
              if (v354 == 8)
                goto LABEL_273;
              result = sub_223B569E0((uint64_t)v384, 0, v282[v354], v282[v338[10]], v282[v338[11]], 8u, (uint64_t)&v412, v318 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v355 = v338[12];
              if (v355 == 8)
                goto LABEL_273;
              result = sub_223B569E0((uint64_t)v384, 0, v282[v355], v282[v338[13]], v282[v338[14]], 8u, (uint64_t)&v412, v318 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
              v350 = v338[15];
              if (v350 == 8)
                goto LABEL_273;
              v351 = v338[16];
            }
            result = sub_223B569E0((uint64_t)v384, 0, v282[v350], v282[v351], v282[v338[17]], 8u, (uint64_t)&v412, v318 != 0, v133, v135, v136, a10, *(int8x8_t *)a11.f32, *(int8x8_t *)a12.f32);
LABEL_273:
            if (++v280 == 3)
              return result;
          }
        }
        if (*(_BYTE *)(v82 + v139))
        {
          v145 = v88 + 12 * v139;
          v135.i64[0] = *(_QWORD *)v145;
          v135.i32[2] = *(_DWORD *)(v145 + 8);
          v142 = v134 + (-1 << (v139 - 1));
          v133 = vsubq_f32(v133, v135);
          --v131;
          v141 = v132 - (char)v32[v139];
          v146 = v138[1];
          if ((_DWORD)v146 == 8)
            goto LABEL_239;
        }
        else
        {
          v141 = v132;
          v142 = v134;
          v146 = v138[1];
          if ((_DWORD)v146 == 8)
            goto LABEL_239;
        }
        if (*(_BYTE *)(v82 + v146))
        {
          v249 = v88 + 12 * v146;
          v135.i64[0] = *(_QWORD *)v249;
          v135.i32[2] = *(_DWORD *)(v249 + 8);
          v142 += -1 << (v146 - 1);
          v133 = vsubq_f32(v133, v135);
          --v131;
          v141 -= (char)v32[v146];
        }
        v250 = v138[2];
        if ((_DWORD)v250 != 8)
        {
          if (*(_BYTE *)(v82 + v250))
          {
            v251 = v88 + 12 * v138[2];
            v135.i64[0] = *(_QWORD *)v251;
            v135.i32[2] = *(_DWORD *)(v251 + 8);
            v142 += -1 << (v250 - 1);
            v133 = vsubq_f32(v133, v135);
            --v131;
            v141 -= (char)v32[v250];
          }
          v252 = v138[3];
          if ((_DWORD)v252 != 8 && *(_BYTE *)(v82 + v252))
          {
            v253 = v88 + 12 * v252;
            v135.i64[0] = *(_QWORD *)v253;
            v135.i32[2] = *(_DWORD *)(v253 + 8);
            v142 += -1 << (v252 - 1);
            v133 = vsubq_f32(v133, v135);
            --v131;
            v141 -= (char)v32[v252];
          }
        }
        goto LABEL_239;
      }
LABEL_124:
      v134 |= 0x20u;
      v130.i64[0] = *(_QWORD *)(v88 + 72);
      v130.i32[2] = *(_DWORD *)(v88 + 80);
      v133 = vaddq_f32(v133, v130);
      ++v131;
      v132 += v32[6];
      if (v31[7])
        goto LABEL_104;
      goto LABEL_125;
    }
LABEL_99:
    v134 |= 4u;
    v130.i64[0] = *(_QWORD *)(v88 + 36);
    v130.i32[2] = *(_DWORD *)(v88 + 44);
    v133 = vaddq_f32(v133, v130);
    ++v131;
    v132 += v32[3];
    goto LABEL_100;
  }
  return result;
}

uint64_t sub_223B569E0(uint64_t result, int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, int a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, int8x8_t a13, int8x8_t a14)
{
  int32x2_t **v14;
  char *v15;
  int v16;
  int32x2_t v17;
  int32x2_t *v18;
  int32x2_t *v19;
  uint64_t v20;
  int32x2_t v21;
  uint64_t v22;
  int32x2_t v23;
  uint64_t v24;
  int32x2_t v25;
  uint64_t v26;
  uint64_t v27;
  int32x2_t v28;
  int32x2_t *v29;
  char *v30;
  int32x2_t v31;
  int32x2_t *v32;
  char *v33;
  int32x2_t v34;
  int32x2_t *v35;
  char *v36;
  int32x2_t v37;
  int32x2_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  __int32 v42;
  __int32 v43;
  __int32 v44;
  _BOOL4 v45;
  _BOOL4 v46;
  BOOL v47;
  _BOOL4 v48;
  _BOOL4 v49;
  BOOL v50;
  int32x2_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  __int32 v55;
  __int32 v56;
  __int32 v57;
  _BOOL4 v58;
  _BOOL4 v59;
  BOOL v60;
  _BOOL4 v61;
  _BOOL4 v62;
  BOOL v63;
  int32x2_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  __int32 v68;
  __int32 v69;
  __int32 v70;
  _BOOL4 v71;
  _BOOL4 v72;
  BOOL v73;
  _BOOL4 v74;
  _BOOL4 v75;
  BOOL v76;
  int32x2_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int32 v82;
  __int32 v83;
  __int32 v84;
  _BOOL4 v85;
  _BOOL4 v86;
  BOOL v87;
  _BOOL4 v88;
  _BOOL4 v89;
  BOOL v90;
  BOOL v92;
  uint64_t v93;
  float32x4_t *v94;
  int v95;
  unsigned int *v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  float32x4_t v101;
  uint64_t v102;
  float32x4_t v103;
  uint64_t v104;
  float32x4_t v105;
  uint64_t v106;
  BOOL v107;
  unsigned int v108;
  uint64_t v109;
  float v110;
  float *v111;
  __int128 *v112;
  float32x4_t v113;
  uint64_t v114;
  char v115[4];
  int32x2_t v116;
  __int32 v117;
  uint64_t v118;
  char v119;
  int32x2_t v120;
  __int32 v121;
  uint64_t v122;
  char v123;
  int32x2_t v124;
  __int32 v125;
  uint64_t v126;
  char v127;
  int32x2_t v128;
  __int32 v129;
  uint64_t v130;
  uint64_t v131;
  __int32 v132;
  uint64_t v133;
  __int32 v134;
  uint64_t v135;
  __int32 v136;

  v14 = *(int32x2_t ***)result;
  if (a3 == 8)
  {
    v28 = **v14;
    v117 = (*v14)[1].i32[0];
    v116 = v28;
    v20 = (uint64_t)v14[1];
    v115[0] = 1;
    v118 = v20;
    if (a4 == 8)
    {
LABEL_3:
      v21 = **v14;
      v121 = (*v14)[1].i32[0];
      v120 = v21;
      v22 = (uint64_t)v14[1];
      v119 = 1;
      v122 = v22;
      if (a5 == 8)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v15 = (char *)&unk_224661384 + 12 * a3;
    v16 = *((_DWORD *)v15 + 2);
    v17 = *(int32x2_t *)v15;
    v18 = v14[2];
    v19 = v14[3];
    *(int32x2_t *)a10.f32 = *v18;
    *(int32x2_t *)a9.f32 = vadd_s32(*v18, v17);
    v116 = *(int32x2_t *)a9.f32;
    v117 = v18[1].i32[0] + v16;
    v20 = *(_QWORD *)&v19[v14[4]->u8[a3]] + 40 * v14[5]->u32[a3];
    v115[0] = 0;
    v118 = v20;
    if (a4 == 8)
      goto LABEL_3;
  }
  v29 = v14[2];
  v30 = (char *)&unk_224661384 + 12 * a4;
  v31 = *(int32x2_t *)v30;
  LODWORD(v30) = *((_DWORD *)v30 + 2);
  *(int32x2_t *)a10.f32 = *v29;
  *(int32x2_t *)a9.f32 = vadd_s32(*v29, v31);
  v120 = *(int32x2_t *)a9.f32;
  v121 = v29[1].i32[0] + (_DWORD)v30;
  v22 = *(_QWORD *)&v14[3][v14[4]->u8[a4]] + 40 * v14[5]->u32[a4];
  v119 = 0;
  v122 = v22;
  if (a5 == 8)
  {
LABEL_4:
    v23 = **v14;
    v125 = (*v14)[1].i32[0];
    v124 = v23;
    v24 = (uint64_t)v14[1];
    v123 = 1;
    v126 = v24;
    if (a6 == 8)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  v32 = v14[2];
  v33 = (char *)&unk_224661384 + 12 * a5;
  v34 = *(int32x2_t *)v33;
  LODWORD(v33) = *((_DWORD *)v33 + 2);
  *(int32x2_t *)a10.f32 = *v32;
  *(int32x2_t *)a9.f32 = vadd_s32(*v32, v34);
  v124 = *(int32x2_t *)a9.f32;
  v125 = v32[1].i32[0] + (_DWORD)v33;
  v24 = *(_QWORD *)&v14[3][v14[4]->u8[a5]] + 40 * v14[5]->u32[a5];
  v123 = 0;
  v126 = v24;
  if (a6 == 8)
  {
LABEL_5:
    v25 = **v14;
    v129 = (*v14)[1].i32[0];
    v128 = v25;
    v26 = (uint64_t)v14[1];
    v127 = 1;
    v130 = v26;
    v27 = *(_QWORD *)(result + 8);
    if ((*(char *)(v20 + 6) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_11;
  }
LABEL_10:
  v35 = v14[2];
  v36 = (char *)&unk_224661384 + 12 * a6;
  v37 = *(int32x2_t *)v36;
  LODWORD(v36) = *((_DWORD *)v36 + 2);
  *(int32x2_t *)a10.f32 = *v35;
  *(int32x2_t *)a9.f32 = vadd_s32(*v35, v37);
  v128 = *(int32x2_t *)a9.f32;
  v129 = v35[1].i32[0] + (_DWORD)v36;
  v26 = *(_QWORD *)&v14[3][v14[4]->u8[a6]] + 40 * v14[5]->u32[a6];
  v127 = 0;
  v130 = v26;
  v27 = *(_QWORD *)(result + 8);
  if ((*(char *)(v20 + 6) & 0x80000000) == 0)
    goto LABEL_29;
LABEL_11:
  if (!**(_BYTE **)v27)
  {
    if (!**(_BYTE **)(v27 + 8))
      goto LABEL_28;
    v38 = *(int32x2_t **)(v27 + 16);
    *(int32x2_t *)a10.f32 = *v38;
    *(int32x2_t *)a9.f32 = vsub_s32(v116, *v38);
    v113.i64[0] = a9.i64[0];
    v113.i32[2] = v117 - v38[1].i32[0];
    v39 = *(uint64_t **)(v27 + 48);
    v40 = *v39;
    v41 = v39[1];
    if (v40 == v41)
    {
LABEL_28:
      if (a3 != 8)
        return result;
    }
    else
    {
      v42 = v116.i32[**(unsigned __int8 **)(v27 + 64)];
      while (1)
      {
        v44 = *(_DWORD *)(v40 + 56);
        v43 = *(_DWORD *)(v40 + 60);
        v45 = v42 <= v43;
        v46 = v42 >= v43;
        v47 = v43 < v44;
        v48 = v43 >= v44 ? v42 >= v44 : v42 <= v44;
        v49 = v47 ? v46 : v45;
        v50 = !v49 || !v48;
        if (!v50
          && *(_DWORD *)(*(_QWORD *)(v40 + 24)
                       + 4
                       * (v113.i32[**(unsigned __int8 **)(v27 + 40)]
                                      + **(_DWORD **)(v27 + 24) * v113.i32[**(unsigned __int8 **)(v27 + 32)])))
        {
          break;
        }
        v40 += 64;
        if (v40 == v41)
          goto LABEL_28;
      }
    }
  }
LABEL_29:
  if (*(char *)(v22 + 6) < 0 && !**(_BYTE **)v27)
  {
    if (!**(_BYTE **)(v27 + 8))
      goto LABEL_47;
    v51 = *(int32x2_t **)(v27 + 16);
    *(int32x2_t *)a10.f32 = *v51;
    *(int32x2_t *)a9.f32 = vsub_s32(v120, *v51);
    v113.i64[0] = a9.i64[0];
    v113.i32[2] = v121 - v51[1].i32[0];
    v52 = *(uint64_t **)(v27 + 48);
    v53 = *v52;
    v54 = v52[1];
    if (v53 == v54)
    {
LABEL_47:
      if (a4 != 8)
        return result;
    }
    else
    {
      v55 = v120.i32[**(unsigned __int8 **)(v27 + 64)];
      while (1)
      {
        v57 = *(_DWORD *)(v53 + 56);
        v56 = *(_DWORD *)(v53 + 60);
        v58 = v55 <= v56;
        v59 = v55 >= v56;
        v60 = v56 < v57;
        v61 = v56 >= v57 ? v55 >= v57 : v55 <= v57;
        v62 = v60 ? v59 : v58;
        v63 = !v62 || !v61;
        if (!v63
          && *(_DWORD *)(*(_QWORD *)(v53 + 24)
                       + 4
                       * (v113.i32[**(unsigned __int8 **)(v27 + 40)]
                                      + **(_DWORD **)(v27 + 24) * v113.i32[**(unsigned __int8 **)(v27 + 32)])))
        {
          break;
        }
        v53 += 64;
        if (v53 == v54)
          goto LABEL_47;
      }
    }
  }
  if (*(char *)(v24 + 6) < 0 && !**(_BYTE **)v27)
  {
    if (!**(_BYTE **)(v27 + 8))
      goto LABEL_66;
    v64 = *(int32x2_t **)(v27 + 16);
    *(int32x2_t *)a10.f32 = *v64;
    *(int32x2_t *)a9.f32 = vsub_s32(v124, *v64);
    v113.i64[0] = a9.i64[0];
    v113.i32[2] = v125 - v64[1].i32[0];
    v65 = *(uint64_t **)(v27 + 48);
    v66 = *v65;
    v67 = v65[1];
    if (v66 == v67)
    {
LABEL_66:
      if (a5 != 8)
        return result;
    }
    else
    {
      v68 = v124.i32[**(unsigned __int8 **)(v27 + 64)];
      while (1)
      {
        v70 = *(_DWORD *)(v66 + 56);
        v69 = *(_DWORD *)(v66 + 60);
        v71 = v68 <= v69;
        v72 = v68 >= v69;
        v73 = v69 < v70;
        v74 = v69 >= v70 ? v68 >= v70 : v68 <= v70;
        v75 = v73 ? v72 : v71;
        v76 = !v75 || !v74;
        if (!v76
          && *(_DWORD *)(*(_QWORD *)(v66 + 24)
                       + 4
                       * (v113.i32[**(unsigned __int8 **)(v27 + 40)]
                                      + **(_DWORD **)(v27 + 24) * v113.i32[**(unsigned __int8 **)(v27 + 32)])))
        {
          break;
        }
        v66 += 64;
        if (v66 == v67)
          goto LABEL_66;
      }
    }
  }
  if (a2)
  {
    if (*(char *)(v26 + 6) < 0 && !**(_BYTE **)v27)
    {
      if (!**(_BYTE **)(v27 + 8)
        || (v77 = *(int32x2_t **)(v27 + 16),
            *(int32x2_t *)v113.f32 = vsub_s32(v128, *v77),
            v113.i32[2] = v129 - v77[1].i32[0],
            v78 = *(uint64_t **)(v27 + 48),
            v79 = *v78,
            v80 = v78[1],
            v79 == v80))
      {
LABEL_96:
        if (a6 != 8)
          return result;
      }
      else
      {
        v81 = (v113.i32[**(unsigned __int8 **)(v27 + 40)]
                           + **(_DWORD **)(v27 + 24) * v113.i32[**(unsigned __int8 **)(v27 + 32)]);
        v82 = v128.i32[**(unsigned __int8 **)(v27 + 64)];
        while (1)
        {
          v84 = *(_DWORD *)(v79 + 56);
          v83 = *(_DWORD *)(v79 + 60);
          v85 = v82 <= v83;
          v86 = v82 >= v83;
          v87 = v83 < v84;
          v88 = v83 >= v84 ? v82 >= v84 : v82 <= v84;
          v89 = v87 ? v86 : v85;
          v90 = !v89 || !v88;
          if (!v90 && *(_DWORD *)(*(_QWORD *)(v79 + 24) + 4 * v81))
            break;
          v79 += 64;
          if (v79 == v80)
            goto LABEL_96;
        }
      }
    }
    if ((a8 & 1) == 0 || a6 != 8 && a3 != 8 && a4 != 8 && a5 != 8)
    {
      v97 = *(_QWORD *)(result + 16);
      if (v116.i32[0] == v120.i32[0] && v116.i32[0] == v124.i32[0] && v116.i32[0] == v128.i32[0])
      {
        v98 = 0;
      }
      else
      {
        v98 = 2;
        if (v116.i32[1] == v120.i32[1] && v116.i32[1] == v124.i32[1])
        {
          if (v116.i32[1] == v128.i32[1])
            v98 = 1;
          else
            v98 = 2;
        }
      }
      v99 = v97 + 12 * a4;
      a9.i64[0] = *(_QWORD *)v99;
      a9.i32[2] = *(_DWORD *)(v99 + 8);
      v100 = v97 + 12 * a3;
      a10.i64[0] = *(_QWORD *)v100;
      a10.i32[2] = *(_DWORD *)(v100 + 8);
      v101 = vsubq_f32(a9, a10);
      v136 = v101.i32[2];
      v135 = v101.i64[0];
      v102 = v97 + 12 * a5;
      v101.i64[0] = *(_QWORD *)v102;
      v101.i32[2] = *(_DWORD *)(v102 + 8);
      v103 = vsubq_f32(v101, a10);
      v134 = v103.i32[2];
      v133 = v103.i64[0];
      v104 = v97 + 12 * a6;
      v103.i64[0] = *(_QWORD *)v104;
      v103.i32[2] = *(_DWORD *)(v104 + 8);
      v105 = vsubq_f32(v103, a10);
      v132 = v105.i32[2];
      v131 = v105.i64[0];
      v106 = 2 * (v98 == 0);
      v107 = v98 > 1;
      if (v98 <= 1)
        v108 = v98 + 1;
      else
        v108 = 0;
      if (v107)
        v106 = 1;
      v109 = 4 * v108;
      v110 = *(float *)((char *)&v133 + v109);
      v111 = (float *)((unint64_t)&v133 & 0xFFFFFFFFFFFFFFF3 | (4 * (v106 & 3)));
      a10.f32[0] = (float)(v110 * *(float *)((unint64_t)&v135 | (4 * v106)))
                 - (float)(*v111 * *(float *)((char *)&v135 + v109));
      a11.f32[0] = *v111 * *(float *)((char *)&v131 + v109);
      a12.i32[0] = *(_DWORD *)((unint64_t)&v131 & 0xFFFFFFFFFFFFFFF3 | (4 * (v106 & 3)));
      if ((float)(a10.f32[0] * (float)(a11.f32[0] - (float)(v110 * a12.f32[0]))) >= 0.0)
      {
        v114 = 0x200000003;
        v112 = &xmmword_224662C58;
      }
      else
      {
        v114 = 0x300000000;
        v112 = &xmmword_224662C70;
      }
      a9 = (float32x4_t)*v112;
      v113 = (float32x4_t)*v112;
      v93 = *(_QWORD *)(result + 24);
      v96 = (unsigned int *)((unint64_t)&v113 | 0xC);
      v94 = &v113;
      v95 = 1;
      return sub_223B49BD0(v93, v95, (uint64_t)v115, (unsigned int *)v94, v96, a7, a8, *(double *)a9.i64, a10, a11, a12, a13, a14);
    }
  }
  else
  {
    v92 = a5 == 8 || a4 == 8 || a3 == 8;
    if (!v92 || !a8)
    {
      v93 = *(_QWORD *)(result + 24);
      v94 = (float32x4_t *)dword_224662C4C;
      v95 = 0;
      v96 = dword_224662C4C;
      return sub_223B49BD0(v93, v95, (uint64_t)v115, (unsigned int *)v94, v96, a7, a8, *(double *)a9.i64, a10, a11, a12, a13, a14);
    }
  }
  return result;
}

uint64_t sub_223B57200()
{
  __int128 *v0;
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  double v5;
  double v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  double v14;
  double v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  double v20;
  double v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  double v26;
  double v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  double v32;
  double v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  double v38;
  double v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  double v44;
  double v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  double v50;
  double v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  double v56;
  double v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  double v62;
  double v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  double v68;
  double v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  double v74;
  double v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  double v80;
  double v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  double v86;
  double v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  double v92;
  double v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  double v98;
  double v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  double v104;
  double v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  double v110;
  double v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  double v116;
  double v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  double v122;
  double v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  double v128;
  double v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  double v134;
  double v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  double v140;
  double v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  double v146;
  double v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  double v152;
  double v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  double v158;
  double v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  double v164;
  double v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  double v170;
  double v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  double v176;
  double v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  double v182;
  double v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  double v188;
  double v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  double v194;
  double v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  double v200;
  double v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  double v206;
  double v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  double v212;
  double v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  double v218;
  double v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  double v224;
  double v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  double v230;
  double v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  double v236;
  double v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  double v242;
  double v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  double v248;
  double v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  double v254;
  double v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  double v260;
  double v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  double v266;
  double v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  double v272;
  double v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  double v278;
  double v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  double v284;
  double v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  double v290;
  double v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  double v296;
  double v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  double v302;
  double v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  double v308;
  double v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  double v314;
  double v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  double v320;
  double v321;
  float32x4_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  double v326;
  double v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  double v332;
  double v333;
  float32x4_t v334;
  float32x4_t v335;
  float32x4_t v336;
  float32x4_t v337;
  double v338;
  double v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  double v344;
  double v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  double v350;
  double v351;
  float32x4_t v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x4_t v355;
  double v356;
  double v357;
  float32x4_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  double v362;
  double v363;
  float32x4_t v364;
  float32x4_t v365;
  float32x4_t v366;
  float32x4_t v367;
  double v368;
  double v369;
  float32x4_t v370;
  float32x4_t v371;
  float32x4_t v372;
  float32x4_t v373;
  double v374;
  double v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t v378;
  float32x4_t v379;
  double v380;
  double v381;
  float32x4_t v382;
  float32x4_t v383;
  float32x4_t v384;
  float32x4_t v385;
  double v386;
  double v387;
  float32x4_t v388;
  float32x4_t v389;
  float32x4_t v390;
  float32x4_t v391;
  double v392;
  double v393;
  float32x4_t v394;
  float32x4_t v395;
  float32x4_t v396;
  float32x4_t v397;
  double v398;
  double v399;
  float32x4_t v400;
  float32x4_t v401;
  float32x4_t v402;
  float32x4_t v403;
  double v404;
  double v405;
  float32x4_t v406;
  float32x4_t v407;
  float32x4_t v408;
  float32x4_t v409;
  double v410;
  double v411;
  float32x4_t v412;
  float32x4_t v413;
  float32x4_t v414;
  float32x4_t v415;
  double v416;
  double v417;
  float32x4_t v418;
  float32x4_t v419;
  float32x4_t v420;
  float32x4_t v421;
  double v422;
  double v423;
  float32x4_t v424;
  float32x4_t v425;
  float32x4_t v426;
  float32x4_t v427;
  double v428;
  double v429;
  float32x4_t v430;
  float32x4_t v431;
  float32x4_t v432;
  float32x4_t v433;
  double v434;
  double v435;
  float32x4_t v436;
  float32x4_t v437;
  float32x4_t v438;
  float32x4_t v439;
  double v440;
  double v441;
  float32x4_t v442;
  float32x4_t v443;
  float32x4_t v444;
  float32x4_t v445;
  double v446;
  double v447;
  float32x4_t v448;
  float32x4_t v449;
  float32x4_t v450;
  float32x4_t v451;
  double v452;
  double v453;
  float32x4_t v454;
  float32x4_t v455;
  float32x4_t v456;
  float32x4_t v457;
  double v458;
  double v459;
  float32x4_t v460;
  float32x4_t v461;
  float32x4_t v462;
  float32x4_t v463;
  double v464;
  double v465;
  float32x4_t v466;
  float32x4_t v467;
  float32x4_t v468;
  float32x4_t v469;
  double v470;
  double v471;
  float32x4_t v472;
  float32x4_t v473;
  float32x4_t v474;
  float32x4_t v475;
  double v476;
  double v477;
  float32x4_t v478;
  float32x4_t v479;
  float32x4_t v480;
  float32x4_t v481;
  double v482;
  double v483;
  float32x4_t v484;
  float32x4_t v485;
  float32x4_t v486;
  float32x4_t v487;
  double v488;
  double v489;
  float32x4_t v490;
  float32x4_t v491;
  float32x4_t v492;
  float32x4_t v493;
  double v494;
  double v495;
  float32x4_t v496;
  float32x4_t v497;
  float32x4_t v498;
  float32x4_t v499;
  double v500;
  double v501;
  float32x4_t v502;
  float32x4_t v503;
  float32x4_t v504;
  float32x4_t v505;
  double v506;
  double v507;
  float32x4_t v508;
  float32x4_t v509;
  float32x4_t v510;
  float32x4_t v511;
  double v512;
  double v513;
  float32x4_t v514;
  float32x4_t v515;
  float32x4_t v516;
  float32x4_t v517;
  double v518;
  double v519;
  float32x4_t v520;
  float32x4_t v521;
  float32x4_t v522;
  float32x4_t v523;
  double v524;
  double v525;
  float32x4_t v526;
  float32x4_t v527;
  float32x4_t v528;
  float32x4_t v529;
  double v530;
  double v531;
  float32x4_t v532;
  float32x4_t v533;
  float32x4_t v534;
  float32x4_t v535;
  double v536;
  double v537;
  float32x4_t v538;
  float32x4_t v539;
  float32x4_t v540;
  float32x4_t v541;
  double v542;
  double v543;
  float32x4_t v544;
  float32x4_t v545;
  float32x4_t v546;
  float32x4_t v547;
  double v548;
  double v549;
  float32x4_t v550;
  float32x4_t v551;
  float32x4_t v552;
  float32x4_t v553;
  double v554;
  double v555;
  float32x4_t v556;
  float32x4_t v557;
  float32x4_t v558;
  float32x4_t v559;
  double v560;
  double v561;
  float32x4_t v562;
  float32x4_t v563;
  float32x4_t v564;
  float32x4_t v565;
  double v566;
  double v567;
  float32x4_t v568;
  float32x4_t v569;
  float32x4_t v570;
  float32x4_t v571;
  double v572;
  double v573;
  float32x4_t v574;
  float32x4_t v575;
  float32x4_t v576;
  float32x4_t v577;
  double v578;
  double v579;
  float32x4_t v580;
  float32x4_t v581;
  float32x4_t v582;
  float32x4_t v583;
  double v584;
  double v585;
  float32x4_t v586;
  float32x4_t v587;
  float32x4_t v588;
  float32x4_t v589;
  double v590;
  double v591;
  float32x4_t v592;
  float32x4_t v593;
  float32x4_t v594;
  float32x4_t v595;
  double v596;
  double v597;
  float32x4_t v598;
  float32x4_t v599;
  float32x4_t v600;
  float32x4_t v601;
  double v602;
  double v603;
  float32x4_t v604;
  float32x4_t v605;
  float32x4_t v606;
  float32x4_t v607;
  double v608;
  double v609;
  float32x4_t v610;
  float32x4_t v611;
  float32x4_t v612;
  float32x4_t v613;
  double v614;
  double v615;
  float32x4_t v616;
  float32x4_t v617;
  float32x4_t v618;
  float32x4_t v619;
  double v620;
  double v621;
  float32x4_t v622;
  float32x4_t v623;
  float32x4_t v624;
  float32x4_t v625;
  double v626;
  double v627;
  float32x4_t v628;
  float32x4_t v629;
  float32x4_t v630;
  float32x4_t v631;
  double v632;
  double v633;
  float32x4_t v634;
  float32x4_t v635;
  float32x4_t v636;
  float32x4_t v637;
  double v638;
  double v639;
  float32x4_t v640;
  float32x4_t v641;
  float32x4_t v642;
  float32x4_t v643;
  double v644;
  double v645;
  float32x4_t v646;
  float32x4_t v647;
  float32x4_t v648;
  float32x4_t v649;
  double v650;
  double v651;
  float32x4_t v652;
  float32x4_t v653;
  float32x4_t v654;
  float32x4_t v655;
  double v656;
  double v657;
  float32x4_t v658;
  float32x4_t v659;
  float32x4_t v660;
  float32x4_t v661;
  double v662;
  double v663;
  float32x4_t v664;
  float32x4_t v665;
  float32x4_t v666;
  float32x4_t v667;
  double v668;
  double v669;
  float32x4_t v670;
  float32x4_t v671;
  float32x4_t v672;
  float32x4_t v673;
  double v674;
  double v675;
  float32x4_t v676;
  float32x4_t v677;
  float32x4_t v678;
  float32x4_t v679;
  double v680;
  double v681;
  float32x4_t v682;
  float32x4_t v683;
  float32x4_t v684;
  float32x4_t v685;
  double v686;
  double v687;
  float32x4_t v688;
  float32x4_t v689;
  float32x4_t v690;
  float32x4_t v691;
  double v692;
  double v693;
  float32x4_t v694;
  float32x4_t v695;
  float32x4_t v696;
  float32x4_t v697;
  double v698;
  double v699;
  float32x4_t v700;
  float32x4_t v701;
  float32x4_t v702;
  float32x4_t v703;
  double v704;
  double v705;
  float32x4_t v706;
  float32x4_t v707;
  float32x4_t v708;
  float32x4_t v709;
  double v710;
  double v711;
  float32x4_t v712;
  float32x4_t v713;
  float32x4_t v714;
  float32x4_t v715;
  double v716;
  double v717;
  float32x4_t v718;
  float32x4_t v719;
  float32x4_t v720;
  float32x4_t v721;
  double v722;
  double v723;
  float32x4_t v724;
  float32x4_t v725;
  float32x4_t v726;
  float32x4_t v727;
  double v728;
  double v729;
  float32x4_t v730;
  float32x4_t v731;
  float32x4_t v732;
  float32x4_t v733;
  double v734;
  double v735;
  float32x4_t v736;
  float32x4_t v737;
  float32x4_t v738;
  float32x4_t v739;
  double v740;
  double v741;
  float32x4_t v742;
  float32x4_t v743;
  float32x4_t v744;
  float32x4_t v745;
  double v746;
  double v747;
  float32x4_t v748;
  float32x4_t v749;
  float32x4_t v750;
  float32x4_t v751;
  double v752;
  double v753;
  float32x4_t v754;
  float32x4_t v755;
  float32x4_t v756;
  float32x4_t v757;
  double v758;
  double v759;
  float32x4_t v760;
  float32x4_t v761;
  float32x4_t v762;
  float32x4_t v763;
  double v764;
  double v765;
  float32x4_t v766;
  float32x4_t v767;
  float32x4_t v768;
  float32x4_t v769;
  double v770;
  double v771;
  float32x4_t v772;
  float32x4_t v773;
  float32x4_t v774;
  float32x4_t v775;
  double v776;
  double v777;
  float32x4_t v778;
  float32x4_t v779;
  float32x4_t v780;
  float32x4_t v781;
  double v782;
  double v783;
  float32x4_t v784;
  float32x4_t v785;
  float32x4_t v786;
  float32x4_t v787;
  double v788;
  double v789;
  float32x4_t v790;
  float32x4_t v791;
  float32x4_t v792;
  float32x4_t v793;
  double v794;
  double v795;
  float32x4_t v796;
  float32x4_t v797;
  float32x4_t v798;
  float32x4_t v799;
  double v800;
  double v801;
  float32x4_t v802;
  float32x4_t v803;
  float32x4_t v804;
  float32x4_t v805;
  double v806;
  double v807;
  float32x4_t v808;
  float32x4_t v809;
  float32x4_t v810;
  float32x4_t v811;
  double v812;
  double v813;
  float32x4_t v814;
  float32x4_t v815;
  float32x4_t v816;
  float32x4_t v817;
  double v818;
  double v819;
  float32x4_t v820;
  float32x4_t v821;
  float32x4_t v822;
  float32x4_t v823;
  double v824;
  double v825;
  float32x4_t v826;
  float32x4_t v827;
  float32x4_t v828;
  float32x4_t v829;
  double v830;
  double v831;
  float32x4_t v832;
  float32x4_t v833;
  float32x4_t v834;
  float32x4_t v835;
  double v836;
  double v837;
  float32x4_t v838;
  float32x4_t v839;
  float32x4_t v840;
  float32x4_t v841;
  double v842;
  double v843;
  float32x4_t v844;
  float32x4_t v845;
  float32x4_t v846;
  float32x4_t v847;
  double v848;
  double v849;
  float32x4_t v850;
  float32x4_t v851;
  float32x4_t v852;
  float32x4_t v853;
  double v854;
  double v855;
  float32x4_t v856;
  float32x4_t v857;
  float32x4_t v858;
  float32x4_t v859;
  double v860;
  double v861;
  float32x4_t v862;
  float32x4_t v863;
  float32x4_t v864;
  float32x4_t v865;
  double v866;
  double v867;
  float32x4_t v868;
  float32x4_t v869;
  float32x4_t v870;
  float32x4_t v871;
  double v872;
  double v873;
  float32x4_t v874;
  float32x4_t v875;
  float32x4_t v876;
  float32x4_t v877;
  double v878;
  double v879;
  float32x4_t v880;
  float32x4_t v881;
  float32x4_t v882;
  float32x4_t v883;
  double v884;
  double v885;
  float32x4_t v886;
  float32x4_t v887;
  float32x4_t v888;
  float32x4_t v889;
  double v890;
  double v891;
  float32x4_t v892;
  float32x4_t v893;
  float32x4_t v894;
  float32x4_t v895;
  double v896;
  double v897;
  float32x4_t v898;
  float32x4_t v899;
  float32x4_t v900;
  float32x4_t v901;
  double v902;
  double v903;
  float32x4_t v904;
  float32x4_t v905;
  float32x4_t v906;
  float32x4_t v907;
  double v908;
  double v909;
  float32x4_t v910;
  float32x4_t v911;
  float32x4_t v912;
  float32x4_t v913;
  double v914;
  double v915;
  float32x4_t v916;
  float32x4_t v917;
  float32x4_t v918;
  float32x4_t v919;
  double v920;
  double v921;
  float32x4_t v922;
  float32x4_t v923;
  float32x4_t v924;
  float32x4_t v925;
  double v926;
  double v927;
  float32x4_t v928;
  float32x4_t v929;
  float32x4_t v930;
  float32x4_t v931;
  double v932;
  double v933;
  float32x4_t v934;
  float32x4_t v935;
  float32x4_t v936;
  float32x4_t v937;
  double v938;
  double v939;
  float32x4_t v940;
  float32x4_t v941;
  float32x4_t v942;
  float32x4_t v943;
  double v944;
  double v945;
  float32x4_t v946;
  float32x4_t v947;
  float32x4_t v948;
  float32x4_t v949;
  double v950;
  double v951;
  float32x4_t v952;
  float32x4_t v953;
  float32x4_t v954;
  float32x4_t v955;
  double v956;
  double v957;
  float32x4_t v958;
  float32x4_t v959;
  float32x4_t v960;
  float32x4_t v961;
  double v962;
  double v963;
  float32x4_t v964;
  float32x4_t v965;
  float32x4_t v966;
  float32x4_t v967;
  double v968;
  double v969;
  float32x4_t v970;
  float32x4_t v971;
  float32x4_t v972;
  float32x4_t v973;
  double v974;
  double v975;
  float32x4_t v976;
  float32x4_t v977;
  float32x4_t v978;
  float32x4_t v979;
  double v980;
  double v981;
  float32x4_t v982;
  float32x4_t v983;
  float32x4_t v984;
  float32x4_t v985;
  double v986;
  double v987;
  float32x4_t v988;
  float32x4_t v989;
  float32x4_t v990;
  float32x4_t v991;
  double v992;
  double v993;
  float32x4_t v994;
  float32x4_t v995;
  float32x4_t v996;
  float32x4_t v997;
  double v998;
  double v999;
  float32x4_t v1000;
  float32x4_t v1001;
  float32x4_t v1002;
  float32x4_t v1003;
  double v1004;
  double v1005;
  float32x4_t v1006;
  float32x4_t v1007;
  float32x4_t v1008;
  float32x4_t v1009;
  double v1010;
  double v1011;
  float32x4_t v1012;
  float32x4_t v1013;
  float32x4_t v1014;
  float32x4_t v1015;
  double v1016;
  double v1017;
  float32x4_t v1018;
  float32x4_t v1019;
  float32x4_t v1020;
  float32x4_t v1021;
  double v1022;
  double v1023;
  float32x4_t v1024;
  float32x4_t v1025;
  float32x4_t v1026;
  float32x4_t v1027;
  double v1028;
  double v1029;
  float32x4_t v1030;
  float32x4_t v1031;
  float32x4_t v1032;
  float32x4_t v1033;
  double v1034;
  double v1035;
  float32x4_t v1036;
  float32x4_t v1037;
  float32x4_t v1038;
  float32x4_t v1039;
  double v1040;
  double v1041;
  float32x4_t v1042;
  float32x4_t v1043;
  float32x4_t v1044;
  float32x4_t v1045;
  double v1046;
  double v1047;
  __int128 v1049;
  __int128 v1050;
  __int128 v1051;
  __int128 v1052;
  __int128 v1053;
  __int128 v1054;
  __int128 v1055;
  _OWORD v1056[2];
  _OWORD v1057[7];
  _OWORD v1058[2];
  _OWORD v1059[7];
  _OWORD v1060[2];
  _OWORD v1061[7];
  _OWORD v1062[2];
  _OWORD v1063[7];
  _OWORD v1064[2];
  _OWORD v1065[7];
  _OWORD v1066[2];
  __int128 v1067;
  __int128 v1068;
  __int128 v1069;
  __int128 v1070;
  __int128 v1071;
  __int128 v1072;
  __int128 v1073;
  _OWORD v1074[2];
  _OWORD v1075[7];
  _OWORD v1076[2];
  _OWORD v1077[7];
  _OWORD v1078[2];
  _OWORD v1079[7];
  _OWORD v1080[2];
  _OWORD v1081[7];
  _OWORD v1082[2];
  _OWORD v1083[7];
  _OWORD v1084[2];
  __int128 v1085;
  __int128 v1086;
  __int128 v1087;
  __int128 v1088;
  __int128 v1089;
  __int128 v1090;
  __int128 v1091;
  _OWORD v1092[2];
  _OWORD v1093[7];
  _OWORD v1094[2];
  _OWORD v1095[7];
  _OWORD v1096[2];
  _OWORD v1097[7];
  _OWORD v1098[2];
  _OWORD v1099[7];
  _OWORD v1100[2];
  _OWORD v1101[7];
  _OWORD v1102[2];
  __int128 v1103;
  __int128 v1104;
  __int128 v1105;
  __int128 v1106;
  __int128 v1107;
  __int128 v1108;
  __int128 v1109;
  _OWORD v1110[2];
  _OWORD v1111[7];
  _OWORD v1112[2];
  _OWORD v1113[7];
  _OWORD v1114[2];
  _OWORD v1115[7];
  _OWORD v1116[2];
  _OWORD v1117[7];
  _OWORD v1118[2];
  _OWORD v1119[7];
  _OWORD v1120[2];
  __int128 v1121;
  __int128 v1122;
  __int128 v1123;
  __int128 v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  _OWORD v1128[2];
  _OWORD v1129[7];
  _OWORD v1130[2];
  _OWORD v1131[7];
  _OWORD v1132[2];
  _OWORD v1133[7];
  _OWORD v1134[2];
  _OWORD v1135[7];
  _OWORD v1136[2];
  _OWORD v1137[7];
  _OWORD v1138[2];
  __int128 v1139;
  __int128 v1140;
  __int128 v1141;
  __int128 v1142;
  __int128 v1143;
  __int128 v1144;
  __int128 v1145;
  _OWORD v1146[2];
  _OWORD v1147[7];
  _OWORD v1148[2];
  _OWORD v1149[7];
  _OWORD v1150[2];
  _OWORD v1151[7];
  _OWORD v1152[2];
  _OWORD v1153[7];
  _OWORD v1154[2];
  _OWORD v1155[7];
  _OWORD v1156[2];
  __int128 v1157;
  __int128 v1158;
  __int128 v1159;
  __int128 v1160;
  __int128 v1161;
  __int128 v1162;
  __int128 v1163;
  _OWORD v1164[2];
  _OWORD v1165[7];
  _OWORD v1166[2];
  _OWORD v1167[7];
  _OWORD v1168[2];
  _OWORD v1169[7];
  _OWORD v1170[2];
  _OWORD v1171[7];
  _OWORD v1172[2];
  _OWORD v1173[7];
  _OWORD v1174[2];
  __int128 v1175;
  __int128 v1176;
  __int128 v1177;
  __int128 v1178;
  __int128 v1179;
  __int128 v1180;
  __int128 v1181;
  _OWORD v1182[2];
  _OWORD v1183[7];
  _OWORD v1184[2];
  _OWORD v1185[7];
  _OWORD v1186[2];
  _OWORD v1187[7];
  _OWORD v1188[2];
  _OWORD v1189[7];
  _OWORD v1190[2];
  _OWORD v1191[7];
  _OWORD v1192[2];
  __int128 v1193;
  __int128 v1194;
  __int128 v1195;
  __int128 v1196;
  __int128 v1197;
  __int128 v1198;
  __int128 v1199;
  _OWORD v1200[2];
  _OWORD v1201[7];
  _OWORD v1202[2];
  _OWORD v1203[7];
  _OWORD v1204[2];
  _OWORD v1205[7];
  _OWORD v1206[2];
  _OWORD v1207[7];
  _OWORD v1208[2];
  _OWORD v1209[7];
  _OWORD v1210[2];
  __int128 v1211;
  __int128 v1212;
  __int128 v1213;
  __int128 v1214;
  __int128 v1215;
  __int128 v1216;
  __int128 v1217;
  _OWORD v1218[2];
  _OWORD v1219[7];
  _OWORD v1220[2];
  _OWORD v1221[7];
  _OWORD v1222[2];
  _OWORD v1223[7];
  _OWORD v1224[2];
  _OWORD v1225[7];
  _OWORD v1226[2];
  _OWORD v1227[7];
  _OWORD v1228[2];
  __int128 v1229;
  __int128 v1230;
  __int128 v1231;
  __int128 v1232;
  __int128 v1233;
  __int128 v1234;
  __int128 v1235;
  _OWORD v1236[2];
  _OWORD v1237[7];
  _OWORD v1238[2];
  _OWORD v1239[7];
  _OWORD v1240[2];
  _OWORD v1241[7];
  _OWORD v1242[2];
  _OWORD v1243[7];
  _OWORD v1244[2];
  _OWORD v1245[7];
  _OWORD v1246[2];
  __int128 v1247;
  __int128 v1248;
  __int128 v1249;
  __int128 v1250;
  __int128 v1251;
  __int128 v1252;
  __int128 v1253;
  _OWORD v1254[2];
  _OWORD v1255[7];
  _OWORD v1256[2];
  _OWORD v1257[7];
  _OWORD v1258[2];
  _OWORD v1259[7];
  _OWORD v1260[2];
  _OWORD v1261[7];
  _OWORD v1262[2];
  _OWORD v1263[7];
  _OWORD v1264[2];
  __int128 v1265;
  __int128 v1266;
  __int128 v1267;
  __int128 v1268;
  __int128 v1269;
  __int128 v1270;
  __int128 v1271;
  _OWORD v1272[2];
  _OWORD v1273[7];
  _OWORD v1274[2];
  _OWORD v1275[7];
  _OWORD v1276[2];
  _OWORD v1277[7];
  _OWORD v1278[2];
  _OWORD v1279[7];
  _OWORD v1280[2];
  _OWORD v1281[7];
  _OWORD v1282[2];
  __int128 v1283;
  __int128 v1284;
  __int128 v1285;
  __int128 v1286;
  __int128 v1287;
  __int128 v1288;
  __int128 v1289;
  _OWORD v1290[2];
  _OWORD v1291[7];
  _OWORD v1292[2];
  _OWORD v1293[7];
  _OWORD v1294[2];
  _OWORD v1295[7];
  _OWORD v1296[2];
  _OWORD v1297[7];
  _OWORD v1298[2];
  _OWORD v1299[7];
  _OWORD v1300[2];
  __int128 v1301;
  __int128 v1302;
  __int128 v1303;
  __int128 v1304;
  __int128 v1305;
  __int128 v1306;
  __int128 v1307;
  _OWORD v1308[2];
  _OWORD v1309[7];
  _OWORD v1310[2];
  _OWORD v1311[7];
  _OWORD v1312[2];
  _OWORD v1313[7];
  _OWORD v1314[2];
  _OWORD v1315[7];
  _OWORD v1316[2];
  _OWORD v1317[7];
  _OWORD v1318[2];
  __int128 v1319;
  __int128 v1320;
  __int128 v1321;
  __int128 v1322;
  __int128 v1323;
  __int128 v1324;
  __int128 v1325;
  _OWORD v1326[2];
  _OWORD v1327[7];
  _OWORD v1328[2];
  _OWORD v1329[7];
  _OWORD v1330[2];
  _OWORD v1331[7];
  _OWORD v1332[2];
  _OWORD v1333[7];
  _OWORD v1334[2];
  _OWORD v1335[7];
  _OWORD v1336[2];
  __int128 v1337;
  __int128 v1338;
  __int128 v1339;
  __int128 v1340;
  __int128 v1341;
  __int128 v1342;
  __int128 v1343;
  _OWORD v1344[2];
  _OWORD v1345[7];
  _OWORD v1346[2];
  _OWORD v1347[7];
  _OWORD v1348[2];
  _OWORD v1349[7];
  _OWORD v1350[2];
  _OWORD v1351[7];
  _OWORD v1352[2];
  _OWORD v1353[7];
  _OWORD v1354[2];
  __int128 v1355;
  __int128 v1356;
  __int128 v1357;
  __int128 v1358;
  __int128 v1359;
  __int128 v1360;
  __int128 v1361;
  _OWORD v1362[2];
  _OWORD v1363[7];
  _OWORD v1364[2];
  _OWORD v1365[7];
  _OWORD v1366[2];
  _OWORD v1367[7];
  _OWORD v1368[2];
  _OWORD v1369[7];
  _OWORD v1370[2];
  _OWORD v1371[7];
  _OWORD v1372[2];
  __int128 v1373;
  __int128 v1374;
  __int128 v1375;
  __int128 v1376;
  __int128 v1377;
  __int128 v1378;
  __int128 v1379;
  _OWORD v1380[2];
  _OWORD v1381[7];
  _OWORD v1382[2];
  _OWORD v1383[7];
  _OWORD v1384[2];
  _OWORD v1385[7];
  _OWORD v1386[2];
  _OWORD v1387[7];
  _OWORD v1388[2];
  _OWORD v1389[7];
  _OWORD v1390[2];
  __int128 v1391;
  __int128 v1392;
  __int128 v1393;
  __int128 v1394;
  __int128 v1395;
  __int128 v1396;
  __int128 v1397;
  _OWORD v1398[2];
  _OWORD v1399[7];
  _OWORD v1400[2];
  _OWORD v1401[7];
  _OWORD v1402[2];
  _OWORD v1403[7];
  _OWORD v1404[2];
  _OWORD v1405[7];
  _OWORD v1406[2];
  _OWORD v1407[7];
  _OWORD v1408[2];
  __int128 v1409;
  __int128 v1410;
  __int128 v1411;
  __int128 v1412;
  __int128 v1413;
  __int128 v1414;
  __int128 v1415;
  _OWORD v1416[2];
  _OWORD v1417[7];
  _OWORD v1418[2];
  _OWORD v1419[7];
  _OWORD v1420[2];
  _OWORD v1421[7];
  _OWORD v1422[2];
  _OWORD v1423[7];
  _OWORD v1424[2];
  _OWORD v1425[7];
  _OWORD v1426[2];
  __int128 v1427;
  __int128 v1428;
  __int128 v1429;
  __int128 v1430;
  __int128 v1431;
  __int128 v1432;
  __int128 v1433;
  _OWORD v1434[2];
  _OWORD v1435[7];
  _OWORD v1436[2];
  _OWORD v1437[7];
  _OWORD v1438[2];
  _OWORD v1439[7];
  _OWORD v1440[2];
  _OWORD v1441[7];
  _OWORD v1442[2];
  _OWORD v1443[7];
  _OWORD v1444[2];
  __int128 v1445;
  __int128 v1446;
  __int128 v1447;
  __int128 v1448;
  __int128 v1449;
  __int128 v1450;
  __int128 v1451;
  _OWORD v1452[2];
  _OWORD v1453[7];
  _OWORD v1454[2];
  _OWORD v1455[7];
  _OWORD v1456[2];
  _OWORD v1457[7];
  _OWORD v1458[2];
  _OWORD v1459[7];
  _OWORD v1460[2];
  _OWORD v1461[7];
  _OWORD v1462[2];
  __int128 v1463;
  __int128 v1464;
  __int128 v1465;
  __int128 v1466;
  __int128 v1467;
  __int128 v1468;
  __int128 v1469;
  _OWORD v1470[2];
  _OWORD v1471[7];
  _OWORD v1472[2];
  _OWORD v1473[7];
  _OWORD v1474[2];
  _OWORD v1475[7];
  _OWORD v1476[2];
  _OWORD v1477[7];
  _OWORD v1478[2];
  _OWORD v1479[7];
  _OWORD v1480[2];
  __int128 v1481;
  __int128 v1482;
  __int128 v1483;
  __int128 v1484;
  __int128 v1485;
  __int128 v1486;
  __int128 v1487;
  _OWORD v1488[2];
  _OWORD v1489[7];
  _OWORD v1490[2];
  _OWORD v1491[7];
  _OWORD v1492[2];
  _OWORD v1493[7];
  _OWORD v1494[2];
  _OWORD v1495[7];
  _OWORD v1496[2];
  _OWORD v1497[7];
  _OWORD v1498[2];
  __int128 v1499;
  __int128 v1500;
  __int128 v1501;
  __int128 v1502;
  __int128 v1503;
  __int128 v1504;
  __int128 v1505;
  _OWORD v1506[2];
  _OWORD v1507[7];
  _OWORD v1508[2];
  _OWORD v1509[7];
  _OWORD v1510[2];
  _OWORD v1511[7];
  _OWORD v1512[2];
  _OWORD v1513[7];
  _OWORD v1514[2];
  _OWORD v1515[7];
  _OWORD v1516[2];
  __int128 v1517;
  __int128 v1518;
  __int128 v1519;
  __int128 v1520;
  __int128 v1521;
  __int128 v1522;
  __int128 v1523;
  _OWORD v1524[2];
  _OWORD v1525[7];
  _OWORD v1526[2];
  _OWORD v1527[7];
  _OWORD v1528[2];
  _OWORD v1529[7];
  _OWORD v1530[2];
  _OWORD v1531[7];
  _OWORD v1532[2];
  _OWORD v1533[7];
  _OWORD v1534[2];
  _OWORD v1535[7];
  _OWORD v1536[2];
  _OWORD v1537[7];
  _OWORD v1538[2];
  _OWORD v1539[7];
  _OWORD v1540[2];
  _OWORD v1541[7];
  _OWORD v1542[2];
  _OWORD v1543[7];
  _OWORD v1544[2];
  _OWORD v1545[7];
  _OWORD v1546[2];
  _OWORD v1547[7];
  _OWORD v1548[2];
  _OWORD v1549[7];
  _OWORD v1550[2];
  _OWORD v1551[7];
  _OWORD v1552[2];
  _OWORD v1553[7];
  _OWORD v1554[2];
  _OWORD v1555[7];
  _OWORD v1556[9];
  _OWORD v1557[2];
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  uint64_t v1611;
  uint64_t v1612;
  uint64_t v1613;
  uint64_t v1614;
  uint64_t v1615;
  uint64_t v1616;
  uint64_t v1617;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t v1715;
  uint64_t v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  uint64_t v1723;
  uint64_t v1724;
  uint64_t v1725;
  uint64_t v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  _QWORD v1731[2];

  v0 = (__int128 *)MEMORY[0x24BDAC7A8]();
  v1731[1] = *MEMORY[0x24BDAC8D0];
  v1558 = 0;
  v1056[0] = xmmword_2246640E8;
  v1056[1] = *(_OWORD *)dbl_2246640F8;
  sub_223B54204((uint64_t)v0, 3, 4, 0, (uint64_t)&v1558, (uint64_t)v1056, COERCE_DOUBLE(0xA5000000A4), COERCE_DOUBLE(0x18100000180), v1, v2, v3, v4, v5, v6);
  v7 = v0[5];
  v1053 = v0[4];
  v1054 = v7;
  v1055 = v0[6];
  v8 = v0[1];
  v1049 = *v0;
  v1050 = v8;
  v9 = v0[3];
  v1051 = v0[2];
  v1052 = v9;
  v1559 = 0;
  v1058[0] = xmmword_224664108;
  v1058[1] = *(_OWORD *)dbl_224664118;
  sub_223B54204((uint64_t)&v1049, 3, 4, 1, (uint64_t)&v1559, (uint64_t)v1058, COERCE_DOUBLE(0xAC000000A5), COERCE_DOUBLE(0x18800000181), v10, v11, v12, v13, v14, v15);
  v1057[4] = v1053;
  v1057[5] = v1054;
  v1057[6] = v1055;
  v1057[0] = v1049;
  v1057[1] = v1050;
  v1057[2] = v1051;
  v1057[3] = v1052;
  v1560 = 0;
  v1060[0] = xmmword_224664128;
  v1060[1] = *(_OWORD *)dbl_224664138;
  sub_223B54204((uint64_t)v1057, 3, 5, 0, (uint64_t)&v1560, (uint64_t)v1060, COERCE_DOUBLE(0xA7000000A6), COERCE_DOUBLE(0x18300000182), v16, v17, v18, v19, v20, v21);
  v1059[4] = v1053;
  v1059[5] = v1054;
  v1059[6] = v1055;
  v1059[0] = v1049;
  v1059[1] = v1050;
  v1059[2] = v1051;
  v1059[3] = v1052;
  v1561 = 0;
  v1062[0] = xmmword_224664148;
  v1062[1] = *(_OWORD *)dbl_224664158;
  sub_223B54204((uint64_t)v1059, 3, 5, 1, (uint64_t)&v1561, (uint64_t)v1062, COERCE_DOUBLE(0xAE000000A7), COERCE_DOUBLE(0x18A00000183), v22, v23, v24, v25, v26, v27);
  v1061[4] = v1053;
  v1061[5] = v1054;
  v1061[6] = v1055;
  v1061[0] = v1049;
  v1061[1] = v1050;
  v1061[2] = v1051;
  v1061[3] = v1052;
  v1562 = 0;
  v1064[0] = xmmword_224664168;
  v1064[1] = *(_OWORD *)dbl_224664178;
  sub_223B54204((uint64_t)v1061, 2, 4, 2, (uint64_t)&v1562, (uint64_t)v1064, COERCE_DOUBLE(0xA9000000A8), COERCE_DOUBLE(0xAD000000ACLL), v28, v29, v30, v31, v32, v33);
  v1063[4] = v1053;
  v1063[5] = v1054;
  v1063[6] = v1055;
  v1063[0] = v1049;
  v1063[1] = v1050;
  v1063[2] = v1051;
  v1063[3] = v1052;
  v1563 = 0;
  v1066[0] = xmmword_224664188;
  v1066[1] = *(_OWORD *)dbl_224664198;
  sub_223B54204((uint64_t)v1063, 2, 4, 3, (uint64_t)&v1563, (uint64_t)v1066, COERCE_DOUBLE(0xE0000000A9), COERCE_DOUBLE(0xE4000000ADLL), v34, v35, v36, v37, v38, v39);
  v1065[4] = v1053;
  v1065[5] = v1054;
  v1065[6] = v1055;
  v1065[0] = v1049;
  v1065[1] = v1050;
  v1065[2] = v1051;
  v1065[3] = v1052;
  v1564 = 0;
  v1074[0] = xmmword_2246641A8;
  v1074[1] = *(_OWORD *)dbl_2246641B8;
  sub_223B54204((uint64_t)v1065, 2, 5, 2, (uint64_t)&v1564, (uint64_t)v1074, COERCE_DOUBLE(0xAB000000AALL), COERCE_DOUBLE(0xAF000000AELL), v40, v41, v42, v43, v44, v45);
  v1071 = v1053;
  v1072 = v1054;
  v1073 = v1055;
  v1067 = v1049;
  v1068 = v1050;
  v1069 = v1051;
  v1070 = v1052;
  v1565 = 0;
  v1076[0] = xmmword_2246641C8;
  v1076[1] = *(_OWORD *)dbl_2246641D8;
  sub_223B54204((uint64_t)&v1067, 2, 5, 3, (uint64_t)&v1565, (uint64_t)v1076, COERCE_DOUBLE(0xE2000000ABLL), COERCE_DOUBLE(0xE6000000AFLL), v46, v47, v48, v49, v50, v51);
  v1075[4] = v1053;
  v1075[5] = v1054;
  v1075[6] = v1055;
  v1075[0] = v1049;
  v1075[1] = v1050;
  v1075[3] = v1052;
  v1075[2] = v1051;
  v1566 = 0;
  v1078[0] = xmmword_2246641E8;
  v1078[1] = *(_OWORD *)dbl_2246641F8;
  sub_223B54204((uint64_t)v1075, 3, 4, 2, (uint64_t)&v1566, (uint64_t)v1078, COERCE_DOUBLE(0xAD000000ACLL), COERCE_DOUBLE(0x18900000188), v52, v53, v54, v55, v56, v57);
  v1077[4] = v1053;
  v1077[5] = v1054;
  v1077[6] = v1055;
  v1077[0] = v1049;
  v1077[1] = v1050;
  v1077[3] = v1052;
  v1077[2] = v1051;
  v1567 = 0;
  v1080[0] = xmmword_224664208;
  v1080[1] = *(_OWORD *)dbl_224664218;
  sub_223B54204((uint64_t)v1077, 3, 4, 3, (uint64_t)&v1567, (uint64_t)v1080, COERCE_DOUBLE(0xE4000000ADLL), COERCE_DOUBLE(0x1C000000189), v58, v59, v60, v61, v62, v63);
  v1079[4] = v1053;
  v1079[5] = v1054;
  v1079[6] = v1055;
  v1079[0] = v1049;
  v1079[1] = v1050;
  v1079[3] = v1052;
  v1079[2] = v1051;
  v1568 = 0;
  v1082[0] = xmmword_224664228;
  v1082[1] = *(_OWORD *)dbl_224664238;
  sub_223B54204((uint64_t)v1079, 3, 5, 2, (uint64_t)&v1568, (uint64_t)v1082, COERCE_DOUBLE(0xAF000000AELL), COERCE_DOUBLE(0x18B0000018ALL), v64, v65, v66, v67, v68, v69);
  v1081[4] = v1053;
  v1081[5] = v1054;
  v1081[6] = v1055;
  v1081[0] = v1049;
  v1081[1] = v1050;
  v1081[3] = v1052;
  v1081[2] = v1051;
  v1569 = 0;
  v1084[0] = xmmword_224664248;
  v1084[1] = *(_OWORD *)dbl_224664258;
  sub_223B54204((uint64_t)v1081, 3, 5, 3, (uint64_t)&v1569, (uint64_t)v1084, COERCE_DOUBLE(0xE6000000AFLL), COERCE_DOUBLE(0x1C20000018BLL), v70, v71, v72, v73, v74, v75);
  v1083[4] = v1053;
  v1083[5] = v1054;
  v1083[6] = v1055;
  v1083[0] = v1049;
  v1083[1] = v1050;
  v1083[3] = v1052;
  v1083[2] = v1051;
  v1570 = 0;
  v1092[0] = xmmword_224664268;
  v1092[1] = *(_OWORD *)dbl_224664278;
  sub_223B54204((uint64_t)v1083, 2, 6, 0, (uint64_t)&v1570, (uint64_t)v1092, COERCE_DOUBLE(0xB1000000B0), COERCE_DOUBLE(0xB5000000B4), v76, v77, v78, v79, v80, v81);
  v1089 = v1053;
  v1090 = v1054;
  v1091 = v1055;
  v1085 = v1049;
  v1086 = v1050;
  v1088 = v1052;
  v1087 = v1051;
  v1571 = 0;
  v1094[0] = xmmword_224664288;
  v1094[1] = *(_OWORD *)dbl_224664298;
  sub_223B54204((uint64_t)&v1085, 2, 6, 1, (uint64_t)&v1571, (uint64_t)v1094, COERCE_DOUBLE(0xB8000000B1), COERCE_DOUBLE(0xBC000000B5), v82, v83, v84, v85, v86, v87);
  v1093[4] = v1053;
  v1093[5] = v1054;
  v1093[6] = v1055;
  v1093[0] = v1049;
  v1093[1] = v1050;
  v1093[3] = v1052;
  v1093[2] = v1051;
  v1572 = 0x202000002020000;
  v1096[0] = xmmword_2246642A8;
  v1096[1] = *(_OWORD *)dbl_2246642B8;
  sub_223B54204((uint64_t)v1093, 2, 7, 0, (uint64_t)&v1572, (uint64_t)v1096, COERCE_DOUBLE(0xB3000000B2), COERCE_DOUBLE(0xB7000000B6), v88, v89, v90, v91, v92, v93);
  v1095[4] = v1053;
  v1095[5] = v1054;
  v1095[6] = v1055;
  v1095[0] = v1049;
  v1095[1] = v1050;
  v1095[3] = v1052;
  v1095[2] = v1051;
  v1573 = 0x202000002020000;
  v1098[0] = xmmword_2246642C8;
  v1098[1] = *(_OWORD *)dbl_2246642D8;
  sub_223B54204((uint64_t)v1095, 2, 7, 1, (uint64_t)&v1573, (uint64_t)v1098, COERCE_DOUBLE(0xBA000000B3), COERCE_DOUBLE(0xBE000000B7), v94, v95, v96, v97, v98, v99);
  v1097[4] = v1053;
  v1097[5] = v1054;
  v1097[6] = v1055;
  v1097[0] = v1049;
  v1097[1] = v1050;
  v1097[3] = v1052;
  v1097[2] = v1051;
  v1574 = 0;
  v1100[0] = xmmword_2246642E8;
  v1100[1] = *(_OWORD *)dbl_2246642F8;
  sub_223B54204((uint64_t)v1097, 3, 6, 0, (uint64_t)&v1574, (uint64_t)v1100, COERCE_DOUBLE(0xB5000000B4), COERCE_DOUBLE(0x19100000190), v100, v101, v102, v103, v104, v105);
  v1099[4] = v1053;
  v1099[5] = v1054;
  v1099[6] = v1055;
  v1099[0] = v1049;
  v1099[1] = v1050;
  v1099[3] = v1052;
  v1099[2] = v1051;
  v1575 = 0;
  v1102[0] = xmmword_224664308;
  v1102[1] = *(_OWORD *)dbl_224664318;
  sub_223B54204((uint64_t)v1099, 3, 6, 1, (uint64_t)&v1575, (uint64_t)v1102, COERCE_DOUBLE(0xBC000000B5), COERCE_DOUBLE(0x19800000191), v106, v107, v108, v109, v110, v111);
  v1101[4] = v1053;
  v1101[5] = v1054;
  v1101[6] = v1055;
  v1101[0] = v1049;
  v1101[1] = v1050;
  v1101[3] = v1052;
  v1101[2] = v1051;
  v1576 = 0x202000002020000;
  v1110[0] = xmmword_224664328;
  v1110[1] = *(_OWORD *)dbl_224664338;
  sub_223B54204((uint64_t)v1101, 3, 7, 0, (uint64_t)&v1576, (uint64_t)v1110, COERCE_DOUBLE(0xB7000000B6), COERCE_DOUBLE(0x19300000192), v112, v113, v114, v115, v116, v117);
  v1107 = v1053;
  v1108 = v1054;
  v1109 = v1055;
  v1103 = v1049;
  v1104 = v1050;
  v1106 = v1052;
  v1105 = v1051;
  v1577 = 0x202000002020000;
  v1112[0] = xmmword_224664348;
  v1112[1] = *(_OWORD *)dbl_224664358;
  sub_223B54204((uint64_t)&v1103, 3, 7, 1, (uint64_t)&v1577, (uint64_t)v1112, COERCE_DOUBLE(0xBE000000B7), COERCE_DOUBLE(0x19A00000193), v118, v119, v120, v121, v122, v123);
  v1111[4] = v1053;
  v1111[5] = v1054;
  v1111[6] = v1055;
  v1111[0] = v1049;
  v1111[1] = v1050;
  v1111[3] = v1052;
  v1111[2] = v1051;
  v1578 = 0;
  v1114[0] = xmmword_224664368;
  v1114[1] = *(_OWORD *)dbl_224664378;
  sub_223B54204((uint64_t)v1111, 2, 6, 2, (uint64_t)&v1578, (uint64_t)v1114, COERCE_DOUBLE(0xB9000000B8), COERCE_DOUBLE(0xBD000000BCLL), v124, v125, v126, v127, v128, v129);
  v1113[4] = v1053;
  v1113[5] = v1054;
  v1113[6] = v1055;
  v1113[0] = v1049;
  v1113[1] = v1050;
  v1113[3] = v1052;
  v1113[2] = v1051;
  v1579 = 0;
  v1116[0] = xmmword_224664388;
  v1116[1] = *(_OWORD *)dbl_224664398;
  sub_223B54204((uint64_t)v1113, 2, 6, 3, (uint64_t)&v1579, (uint64_t)v1116, COERCE_DOUBLE(0xF0000000B9), COERCE_DOUBLE(0xF4000000BDLL), v130, v131, v132, v133, v134, v135);
  v1115[4] = v1071;
  v1115[5] = v1072;
  v1115[6] = v1073;
  v1115[0] = v1067;
  v1115[1] = v1068;
  v1115[3] = v1070;
  v1115[2] = v1069;
  v1580 = 0x202000002020000;
  v1118[0] = xmmword_2246643A8;
  v1118[1] = *(_OWORD *)dbl_2246643B8;
  sub_223B54204((uint64_t)v1115, 2, 7, 2, (uint64_t)&v1580, (uint64_t)v1118, COERCE_DOUBLE(0xBB000000BALL), COERCE_DOUBLE(0xBF000000BELL), v136, v137, v138, v139, v140, v141);
  v1117[4] = v1071;
  v1117[5] = v1072;
  v1117[6] = v1073;
  v1117[0] = v1067;
  v1117[1] = v1068;
  v1117[3] = v1070;
  v1117[2] = v1069;
  v1581 = 0x202000002020000;
  v1120[0] = xmmword_2246643C8;
  v1120[1] = *(_OWORD *)dbl_2246643D8;
  sub_223B54204((uint64_t)v1117, 2, 7, 3, (uint64_t)&v1581, (uint64_t)v1120, COERCE_DOUBLE(0xF2000000BBLL), COERCE_DOUBLE(0xF6000000BFLL), v142, v143, v144, v145, v146, v147);
  v1119[4] = v1071;
  v1119[5] = v1072;
  v1119[6] = v1073;
  v1119[0] = v1067;
  v1119[1] = v1068;
  v1119[3] = v1070;
  v1119[2] = v1069;
  v1582 = 0;
  v1128[0] = xmmword_2246643E8;
  v1128[1] = *(_OWORD *)dbl_2246643F8;
  sub_223B54204((uint64_t)v1119, 3, 6, 2, (uint64_t)&v1582, (uint64_t)v1128, COERCE_DOUBLE(0xBD000000BCLL), COERCE_DOUBLE(0x19900000198), v148, v149, v150, v151, v152, v153);
  v1125 = v1071;
  v1126 = v1072;
  v1127 = v1073;
  v1121 = v1067;
  v1122 = v1068;
  v1124 = v1070;
  v1123 = v1069;
  v1583 = 0;
  v1130[0] = xmmword_224664408;
  v1130[1] = *(_OWORD *)dbl_224664418;
  sub_223B54204((uint64_t)&v1121, 3, 6, 3, (uint64_t)&v1583, (uint64_t)v1130, COERCE_DOUBLE(0xF4000000BDLL), COERCE_DOUBLE(0x1D000000199), v154, v155, v156, v157, v158, v159);
  v1129[4] = v1071;
  v1129[5] = v1072;
  v1129[6] = v1073;
  v1129[0] = v1067;
  v1129[1] = v1068;
  v1129[3] = v1070;
  v1129[2] = v1069;
  v1584 = 0x202000002020000;
  v1132[0] = xmmword_224664428;
  v1132[1] = *(_OWORD *)dbl_224664438;
  sub_223B54204((uint64_t)v1129, 3, 7, 2, (uint64_t)&v1584, (uint64_t)v1132, COERCE_DOUBLE(0xBF000000BELL), COERCE_DOUBLE(0x19B0000019ALL), v160, v161, v162, v163, v164, v165);
  v1131[4] = v1071;
  v1131[5] = v1072;
  v1131[6] = v1073;
  v1131[0] = v1067;
  v1131[1] = v1068;
  v1131[3] = v1070;
  v1131[2] = v1069;
  v1585 = 0x202000002020000;
  v1134[0] = xmmword_224664448;
  v1134[1] = *(_OWORD *)dbl_224664458;
  sub_223B54204((uint64_t)v1131, 3, 7, 3, (uint64_t)&v1585, (uint64_t)v1134, COERCE_DOUBLE(0xF6000000BFLL), COERCE_DOUBLE(0x1D20000019BLL), v166, v167, v168, v169, v170, v171);
  v1133[4] = v1089;
  v1133[5] = v1090;
  v1133[6] = v1091;
  v1133[0] = v1085;
  v1133[1] = v1086;
  v1133[3] = v1088;
  v1133[2] = v1087;
  v1586 = 0;
  v1136[0] = xmmword_224664468;
  v1136[1] = *(_OWORD *)dbl_224664478;
  sub_223B54204((uint64_t)v1133, 0, 4, 4, (uint64_t)&v1586, (uint64_t)v1136, COERCE_DOUBLE(0xC1000000C0), COERCE_DOUBLE(0xC5000000C4), v172, v173, v174, v175, v176, v177);
  v1135[4] = v1089;
  v1135[5] = v1090;
  v1135[6] = v1091;
  v1135[0] = v1085;
  v1135[1] = v1086;
  v1135[3] = v1088;
  v1135[2] = v1087;
  v1587 = 0;
  v1138[0] = xmmword_224664488;
  v1138[1] = *(_OWORD *)dbl_224664498;
  sub_223B54204((uint64_t)v1135, 0, 4, 5, (uint64_t)&v1587, (uint64_t)v1138, COERCE_DOUBLE(0xC8000000C1), COERCE_DOUBLE(0xCC000000C5), v178, v179, v180, v181, v182, v183);
  v1137[4] = v1089;
  v1137[5] = v1090;
  v1137[6] = v1091;
  v1137[0] = v1085;
  v1137[1] = v1086;
  v1137[3] = v1088;
  v1137[2] = v1087;
  v1588 = 0;
  v1146[0] = xmmword_2246644A8;
  v1146[1] = *(_OWORD *)dbl_2246644B8;
  sub_223B54204((uint64_t)v1137, 0, 5, 4, (uint64_t)&v1588, (uint64_t)v1146, COERCE_DOUBLE(0xC3000000C2), COERCE_DOUBLE(0xC7000000C6), v184, v185, v186, v187, v188, v189);
  v1143 = v1089;
  v1144 = v1090;
  v1145 = v1091;
  v1139 = v1085;
  v1140 = v1086;
  v1142 = v1088;
  v1141 = v1087;
  v1589 = 0;
  v1148[0] = xmmword_2246644C8;
  v1148[1] = *(_OWORD *)dbl_2246644D8;
  sub_223B54204((uint64_t)&v1139, 0, 5, 5, (uint64_t)&v1589, (uint64_t)v1148, COERCE_DOUBLE(0xCA000000C3), COERCE_DOUBLE(0xCE000000C7), v190, v191, v192, v193, v194, v195);
  v1147[4] = v1089;
  v1147[5] = v1090;
  v1147[6] = v1091;
  v1147[0] = v1085;
  v1147[1] = v1086;
  v1147[3] = v1088;
  v1147[2] = v1087;
  v1590 = 0;
  v1150[0] = xmmword_2246644E8;
  v1150[1] = *(_OWORD *)dbl_2246644F8;
  sub_223B54204((uint64_t)v1147, 1, 4, 4, (uint64_t)&v1590, (uint64_t)v1150, COERCE_DOUBLE(0xC5000000C4), COERCE_DOUBLE(0xE1000000E0), v196, v197, v198, v199, v200, v201);
  v1149[4] = v1089;
  v1149[5] = v1090;
  v1149[6] = v1091;
  v1149[0] = v1085;
  v1149[1] = v1086;
  v1149[3] = v1088;
  v1149[2] = v1087;
  v1591 = 0;
  v1152[0] = xmmword_224664508;
  v1152[1] = *(_OWORD *)dbl_224664518;
  sub_223B54204((uint64_t)v1149, 1, 4, 5, (uint64_t)&v1591, (uint64_t)v1152, COERCE_DOUBLE(0xCC000000C5), COERCE_DOUBLE(0xE8000000E1), v202, v203, v204, v205, v206, v207);
  v1151[4] = v1107;
  v1151[5] = v1108;
  v1151[6] = v1109;
  v1151[0] = v1103;
  v1151[1] = v1104;
  v1151[3] = v1106;
  v1151[2] = v1105;
  v1592 = 0;
  v1154[0] = xmmword_224664528;
  v1154[1] = *(_OWORD *)dbl_224664538;
  sub_223B54204((uint64_t)v1151, 1, 5, 4, (uint64_t)&v1592, (uint64_t)v1154, COERCE_DOUBLE(0xC7000000C6), COERCE_DOUBLE(0xE3000000E2), v208, v209, v210, v211, v212, v213);
  v1153[4] = v1107;
  v1153[5] = v1108;
  v1153[6] = v1109;
  v1153[0] = v1103;
  v1153[1] = v1104;
  v1153[3] = v1106;
  v1153[2] = v1105;
  v1593 = 0;
  v1156[0] = xmmword_224664548;
  v1156[1] = *(_OWORD *)dbl_224664558;
  sub_223B54204((uint64_t)v1153, 1, 5, 5, (uint64_t)&v1593, (uint64_t)v1156, COERCE_DOUBLE(0xCE000000C7), COERCE_DOUBLE(0xEA000000E3), v214, v215, v216, v217, v218, v219);
  v1155[4] = v1107;
  v1155[5] = v1108;
  v1155[6] = v1109;
  v1155[0] = v1103;
  v1155[1] = v1104;
  v1155[3] = v1106;
  v1155[2] = v1105;
  v1594 = 0;
  v1164[0] = xmmword_224664568;
  v1164[1] = *(_OWORD *)dbl_224664578;
  sub_223B54204((uint64_t)v1155, 0, 4, 6, (uint64_t)&v1594, (uint64_t)v1164, COERCE_DOUBLE(0xC9000000C8), COERCE_DOUBLE(0xCD000000CCLL), v220, v221, v222, v223, v224, v225);
  v1161 = v1107;
  v1162 = v1108;
  v1163 = v1109;
  v1157 = v1103;
  v1158 = v1104;
  v1160 = v1106;
  v1159 = v1105;
  v1595 = 0x100010001000100;
  v1166[0] = xmmword_224664588;
  v1166[1] = *(_OWORD *)dbl_224664598;
  sub_223B54204((uint64_t)&v1157, 0, 4, 7, (uint64_t)&v1595, (uint64_t)v1166, COERCE_DOUBLE(0x80000000C9), COERCE_DOUBLE(0x84000000CDLL), v226, v227, v228, v229, v230, v231);
  v1165[4] = v1107;
  v1165[5] = v1108;
  v1165[6] = v1109;
  v1165[0] = v1103;
  v1165[1] = v1104;
  v1165[3] = v1106;
  v1165[2] = v1105;
  v1596 = 0;
  v1168[0] = xmmword_2246645A8;
  v1168[1] = *(_OWORD *)dbl_2246645B8;
  sub_223B54204((uint64_t)v1165, 0, 5, 6, (uint64_t)&v1596, (uint64_t)v1168, COERCE_DOUBLE(0xCB000000CALL), COERCE_DOUBLE(0xCF000000CELL), v232, v233, v234, v235, v236, v237);
  v1167[4] = v1107;
  v1167[5] = v1108;
  v1167[6] = v1109;
  v1167[0] = v1103;
  v1167[1] = v1104;
  v1167[3] = v1106;
  v1167[2] = v1105;
  v1597 = 0x100010001000100;
  v1170[0] = xmmword_2246645C8;
  v1170[1] = *(_OWORD *)dbl_2246645D8;
  sub_223B54204((uint64_t)v1167, 0, 5, 7, (uint64_t)&v1597, (uint64_t)v1170, COERCE_DOUBLE(0x82000000CBLL), COERCE_DOUBLE(0x86000000CFLL), v238, v239, v240, v241, v242, v243);
  v1169[4] = v1125;
  v1169[5] = v1126;
  v1169[6] = v1127;
  v1169[0] = v1121;
  v1169[1] = v1122;
  v1169[3] = v1124;
  v1169[2] = v1123;
  v1598 = 0;
  v1172[0] = xmmword_2246645E8;
  v1172[1] = *(_OWORD *)dbl_2246645F8;
  sub_223B54204((uint64_t)v1169, 1, 4, 6, (uint64_t)&v1598, (uint64_t)v1172, COERCE_DOUBLE(0xCD000000CCLL), COERCE_DOUBLE(0xE9000000E8), v244, v245, v246, v247, v248, v249);
  v1171[4] = v1125;
  v1171[5] = v1126;
  v1171[6] = v1127;
  v1171[0] = v1121;
  v1171[1] = v1122;
  v1171[3] = v1124;
  v1171[2] = v1123;
  v1599 = 0x100010001000100;
  v1174[0] = xmmword_224664608;
  v1174[1] = *(_OWORD *)dbl_224664618;
  sub_223B54204((uint64_t)v1171, 1, 4, 7, (uint64_t)&v1599, (uint64_t)v1174, COERCE_DOUBLE(0x84000000CDLL), COERCE_DOUBLE(0xA0000000E9), v250, v251, v252, v253, v254, v255);
  v1173[4] = v1125;
  v1173[5] = v1126;
  v1173[6] = v1127;
  v1173[0] = v1121;
  v1173[1] = v1122;
  v1173[3] = v1124;
  v1173[2] = v1123;
  v1600 = 0;
  v1182[0] = xmmword_224664628;
  v1182[1] = *(_OWORD *)dbl_224664638;
  sub_223B54204((uint64_t)v1173, 1, 5, 6, (uint64_t)&v1600, (uint64_t)v1182, COERCE_DOUBLE(0xCF000000CELL), COERCE_DOUBLE(0xEB000000EALL), v256, v257, v258, v259, v260, v261);
  v1179 = v1125;
  v1180 = v1126;
  v1181 = v1127;
  v1175 = v1121;
  v1176 = v1122;
  v1178 = v1124;
  v1177 = v1123;
  v1601 = 0x100010001000100;
  v1184[0] = xmmword_224664648;
  v1184[1] = *(_OWORD *)dbl_224664658;
  sub_223B54204((uint64_t)&v1175, 1, 5, 7, (uint64_t)&v1601, (uint64_t)v1184, COERCE_DOUBLE(0x86000000CFLL), COERCE_DOUBLE(0xA2000000EBLL), v262, v263, v264, v265, v266, v267);
  v1183[4] = v1125;
  v1183[5] = v1126;
  v1183[6] = v1127;
  v1183[0] = v1121;
  v1183[1] = v1122;
  v1183[3] = v1124;
  v1183[2] = v1123;
  v1602 = 0;
  v1186[0] = xmmword_224664668;
  v1186[1] = *(_OWORD *)dbl_224664678;
  sub_223B54204((uint64_t)v1183, 0, 6, 4, (uint64_t)&v1602, (uint64_t)v1186, COERCE_DOUBLE(0xD1000000D0), COERCE_DOUBLE(0xD5000000D4), v268, v269, v270, v271, v272, v273);
  v1185[4] = v1125;
  v1185[5] = v1126;
  v1185[6] = v1127;
  v1185[0] = v1121;
  v1185[1] = v1122;
  v1185[3] = v1124;
  v1185[2] = v1123;
  v1603 = 0;
  v1188[0] = xmmword_224664688;
  v1188[1] = *(_OWORD *)dbl_224664698;
  sub_223B54204((uint64_t)v1185, 0, 6, 5, (uint64_t)&v1603, (uint64_t)v1188, COERCE_DOUBLE(0xD8000000D1), COERCE_DOUBLE(0xDC000000D5), v274, v275, v276, v277, v278, v279);
  v1187[4] = v1143;
  v1187[5] = v1144;
  v1187[6] = v1145;
  v1187[0] = v1139;
  v1187[1] = v1140;
  v1187[3] = v1142;
  v1187[2] = v1141;
  v1604 = 0x202000002020000;
  v1190[0] = xmmword_2246646A8;
  v1190[1] = *(_OWORD *)dbl_2246646B8;
  sub_223B54204((uint64_t)v1187, 0, 7, 4, (uint64_t)&v1604, (uint64_t)v1190, COERCE_DOUBLE(0xD3000000D2), COERCE_DOUBLE(0xD7000000D6), v280, v281, v282, v283, v284, v285);
  v1189[4] = v1143;
  v1189[5] = v1144;
  v1189[6] = v1145;
  v1189[0] = v1139;
  v1189[1] = v1140;
  v1189[3] = v1142;
  v1189[2] = v1141;
  v1605 = 0x202000002020000;
  v1192[0] = xmmword_2246646C8;
  v1192[1] = *(_OWORD *)dbl_2246646D8;
  sub_223B54204((uint64_t)v1189, 0, 7, 5, (uint64_t)&v1605, (uint64_t)v1192, COERCE_DOUBLE(0xDA000000D3), COERCE_DOUBLE(0xDE000000D7), v286, v287, v288, v289, v290, v291);
  v1191[4] = v1143;
  v1191[5] = v1144;
  v1191[6] = v1145;
  v1191[0] = v1139;
  v1191[1] = v1140;
  v1191[3] = v1142;
  v1191[2] = v1141;
  v1606 = 0;
  v1200[0] = xmmword_2246646E8;
  v1200[1] = *(_OWORD *)dbl_2246646F8;
  sub_223B54204((uint64_t)v1191, 1, 6, 4, (uint64_t)&v1606, (uint64_t)v1200, COERCE_DOUBLE(0xD5000000D4), COERCE_DOUBLE(0xF1000000F0), v292, v293, v294, v295, v296, v297);
  v1197 = v1143;
  v1198 = v1144;
  v1199 = v1145;
  v1193 = v1139;
  v1194 = v1140;
  v1196 = v1142;
  v1195 = v1141;
  v1607 = 0;
  v1202[0] = xmmword_224664708;
  v1202[1] = *(_OWORD *)dbl_224664718;
  sub_223B54204((uint64_t)&v1193, 1, 6, 5, (uint64_t)&v1607, (uint64_t)v1202, COERCE_DOUBLE(0xDC000000D5), COERCE_DOUBLE(0xF8000000F1), v298, v299, v300, v301, v302, v303);
  v1201[4] = v1143;
  v1201[5] = v1144;
  v1201[6] = v1145;
  v1201[0] = v1139;
  v1201[1] = v1140;
  v1201[3] = v1142;
  v1201[2] = v1141;
  v1608 = 0x202000002020000;
  v1204[0] = xmmword_224664728;
  v1204[1] = *(_OWORD *)dbl_224664738;
  sub_223B54204((uint64_t)v1201, 1, 7, 4, (uint64_t)&v1608, (uint64_t)v1204, COERCE_DOUBLE(0xD7000000D6), COERCE_DOUBLE(0xF3000000F2), v304, v305, v306, v307, v308, v309);
  v1203[4] = v1143;
  v1203[5] = v1144;
  v1203[6] = v1145;
  v1203[0] = v1139;
  v1203[1] = v1140;
  v1203[3] = v1142;
  v1203[2] = v1141;
  v1609 = 0x202000002020000;
  v1206[0] = xmmword_224664748;
  v1206[1] = *(_OWORD *)dbl_224664758;
  sub_223B54204((uint64_t)v1203, 1, 7, 5, (uint64_t)&v1609, (uint64_t)v1206, COERCE_DOUBLE(0xDE000000D7), COERCE_DOUBLE(0xFA000000F3), v310, v311, v312, v313, v314, v315);
  v1205[4] = v1161;
  v1205[5] = v1162;
  v1205[6] = v1163;
  v1205[0] = v1157;
  v1205[1] = v1158;
  v1205[3] = v1160;
  v1205[2] = v1159;
  v1610 = 0;
  v1208[0] = xmmword_224664768;
  v1208[1] = *(_OWORD *)dbl_224664778;
  sub_223B54204((uint64_t)v1205, 0, 6, 6, (uint64_t)&v1610, (uint64_t)v1208, COERCE_DOUBLE(0xD9000000D8), COERCE_DOUBLE(0xDD000000DCLL), v316, v317, v318, v319, v320, v321);
  v1207[4] = v1161;
  v1207[5] = v1162;
  v1207[6] = v1163;
  v1207[0] = v1157;
  v1207[1] = v1158;
  v1207[3] = v1160;
  v1207[2] = v1159;
  v1611 = 0x100010001000100;
  v1210[0] = xmmword_224664788;
  v1210[1] = *(_OWORD *)dbl_224664798;
  sub_223B54204((uint64_t)v1207, 0, 6, 7, (uint64_t)&v1611, (uint64_t)v1210, COERCE_DOUBLE(0x90000000D9), COERCE_DOUBLE(0x94000000DDLL), v322, v323, v324, v325, v326, v327);
  v1209[4] = v1161;
  v1209[5] = v1162;
  v1209[6] = v1163;
  v1209[0] = v1157;
  v1209[1] = v1158;
  v1209[3] = v1160;
  v1209[2] = v1159;
  v1612 = 0x202000002020000;
  v1218[0] = xmmword_2246647A8;
  v1218[1] = *(_OWORD *)dbl_2246647B8;
  sub_223B54204((uint64_t)v1209, 0, 7, 6, (uint64_t)&v1612, (uint64_t)v1218, COERCE_DOUBLE(0xDB000000DALL), COERCE_DOUBLE(0xDF000000DELL), v328, v329, v330, v331, v332, v333);
  v1215 = v1161;
  v1216 = v1162;
  v1217 = v1163;
  v1211 = v1157;
  v1212 = v1158;
  v1214 = v1160;
  v1213 = v1159;
  v1613 = 0x302010003020100;
  v1220[0] = xmmword_2246647C8;
  v1220[1] = *(_OWORD *)dbl_2246647D8;
  sub_223B54204((uint64_t)&v1211, 0, 7, 7, (uint64_t)&v1613, (uint64_t)v1220, COERCE_DOUBLE(0x92000000DBLL), COERCE_DOUBLE(0x96000000DFLL), v334, v335, v336, v337, v338, v339);
  v1219[4] = v1161;
  v1219[5] = v1162;
  v1219[6] = v1163;
  v1219[0] = v1157;
  v1219[1] = v1158;
  v1219[3] = v1160;
  v1219[2] = v1159;
  v1614 = 0;
  v1222[0] = xmmword_2246647E8;
  v1222[1] = *(_OWORD *)dbl_2246647F8;
  sub_223B54204((uint64_t)v1219, 1, 6, 6, (uint64_t)&v1614, (uint64_t)v1222, COERCE_DOUBLE(0xDD000000DCLL), COERCE_DOUBLE(0xF9000000F8), v340, v341, v342, v343, v344, v345);
  v1221[4] = v1161;
  v1221[5] = v1162;
  v1221[6] = v1163;
  v1221[0] = v1157;
  v1221[1] = v1158;
  v1221[3] = v1160;
  v1221[2] = v1159;
  v1615 = 0x100010001000100;
  v1224[0] = xmmword_224664808;
  v1224[1] = *(_OWORD *)dbl_224664818;
  sub_223B54204((uint64_t)v1221, 1, 6, 7, (uint64_t)&v1615, (uint64_t)v1224, COERCE_DOUBLE(0x94000000DDLL), COERCE_DOUBLE(0xB0000000F9), v346, v347, v348, v349, v350, v351);
  v1223[4] = v1179;
  v1223[5] = v1180;
  v1223[6] = v1181;
  v1223[0] = v1175;
  v1223[1] = v1176;
  v1223[3] = v1178;
  v1223[2] = v1177;
  v1616 = 0x202000002020000;
  v1226[0] = xmmword_224664828;
  v1226[1] = *(_OWORD *)dbl_224664838;
  sub_223B54204((uint64_t)v1223, 1, 7, 6, (uint64_t)&v1616, (uint64_t)v1226, COERCE_DOUBLE(0xDF000000DELL), COERCE_DOUBLE(0xFB000000FALL), v352, v353, v354, v355, v356, v357);
  v1225[4] = v1179;
  v1225[5] = v1180;
  v1225[6] = v1181;
  v1225[0] = v1175;
  v1225[1] = v1176;
  v1225[3] = v1178;
  v1225[2] = v1177;
  v1617 = 0x302010003020100;
  v1228[0] = xmmword_224664848;
  v1228[1] = *(_OWORD *)dbl_224664858;
  sub_223B54204((uint64_t)v1225, 1, 7, 7, (uint64_t)&v1617, (uint64_t)v1228, COERCE_DOUBLE(0x96000000DFLL), COERCE_DOUBLE(0xB2000000FBLL), v358, v359, v360, v361, v362, v363);
  v1227[4] = v1179;
  v1227[5] = v1180;
  v1227[6] = v1181;
  v1227[0] = v1175;
  v1227[1] = v1176;
  v1227[3] = v1178;
  v1227[2] = v1177;
  v1618 = 0;
  v1236[0] = xmmword_224664868;
  v1236[1] = *(_OWORD *)dbl_224664878;
  sub_223B54204((uint64_t)v1227, 2, 4, 4, (uint64_t)&v1618, (uint64_t)v1236, COERCE_DOUBLE(0xE1000000E0), COERCE_DOUBLE(0xE5000000E4), v364, v365, v366, v367, v368, v369);
  v1233 = v1179;
  v1234 = v1180;
  v1235 = v1181;
  v1229 = v1175;
  v1230 = v1176;
  v1232 = v1178;
  v1231 = v1177;
  v1619 = 0;
  v1238[0] = xmmword_224664888;
  v1238[1] = *(_OWORD *)dbl_224664898;
  sub_223B54204((uint64_t)&v1229, 2, 4, 5, (uint64_t)&v1619, (uint64_t)v1238, COERCE_DOUBLE(0xE8000000E1), COERCE_DOUBLE(0xEC000000E5), v370, v371, v372, v373, v374, v375);
  v1237[4] = v1179;
  v1237[5] = v1180;
  v1237[6] = v1181;
  v1237[0] = v1175;
  v1237[1] = v1176;
  v1237[3] = v1178;
  v1237[2] = v1177;
  v1620 = 0;
  v1240[0] = xmmword_2246648A8;
  v1240[1] = *(_OWORD *)dbl_2246648B8;
  sub_223B54204((uint64_t)v1237, 2, 5, 4, (uint64_t)&v1620, (uint64_t)v1240, COERCE_DOUBLE(0xE3000000E2), COERCE_DOUBLE(0xE7000000E6), v376, v377, v378, v379, v380, v381);
  v1239[4] = v1179;
  v1239[5] = v1180;
  v1239[6] = v1181;
  v1239[0] = v1175;
  v1239[1] = v1176;
  v1239[3] = v1178;
  v1239[2] = v1177;
  v1621 = 0;
  v1242[0] = xmmword_2246648C8;
  v1242[1] = *(_OWORD *)dbl_2246648D8;
  sub_223B54204((uint64_t)v1239, 2, 5, 5, (uint64_t)&v1621, (uint64_t)v1242, COERCE_DOUBLE(0xEA000000E3), COERCE_DOUBLE(0xEE000000E7), v382, v383, v384, v385, v386, v387);
  v1241[4] = v1197;
  v1241[5] = v1198;
  v1241[6] = v1199;
  v1241[0] = v1193;
  v1241[1] = v1194;
  v1241[3] = v1196;
  v1241[2] = v1195;
  v1622 = 0;
  v1244[0] = xmmword_2246648E8;
  v1244[1] = *(_OWORD *)dbl_2246648F8;
  sub_223B54204((uint64_t)v1241, 3, 4, 4, (uint64_t)&v1622, (uint64_t)v1244, COERCE_DOUBLE(0xE5000000E4), COERCE_DOUBLE(0x1C1000001C0), v388, v389, v390, v391, v392, v393);
  v1243[4] = v1197;
  v1243[5] = v1198;
  v1243[6] = v1199;
  v1243[0] = v1193;
  v1243[1] = v1194;
  v1243[3] = v1196;
  v1243[2] = v1195;
  v1623 = 0;
  v1246[0] = xmmword_224664908;
  v1246[1] = *(_OWORD *)dbl_224664918;
  sub_223B54204((uint64_t)v1243, 3, 4, 5, (uint64_t)&v1623, (uint64_t)v1246, COERCE_DOUBLE(0xEC000000E5), COERCE_DOUBLE(0x1C8000001C1), v394, v395, v396, v397, v398, v399);
  v1245[4] = v1197;
  v1245[5] = v1198;
  v1245[6] = v1199;
  v1245[0] = v1193;
  v1245[1] = v1194;
  v1245[3] = v1196;
  v1245[2] = v1195;
  v1624 = 0;
  v1254[0] = xmmword_224664928;
  v1254[1] = *(_OWORD *)dbl_224664938;
  sub_223B54204((uint64_t)v1245, 3, 5, 4, (uint64_t)&v1624, (uint64_t)v1254, COERCE_DOUBLE(0xE7000000E6), COERCE_DOUBLE(0x1C3000001C2), v400, v401, v402, v403, v404, v405);
  v1251 = v1197;
  v1252 = v1198;
  v1253 = v1199;
  v1247 = v1193;
  v1248 = v1194;
  v1250 = v1196;
  v1249 = v1195;
  v1625 = 0;
  v1256[0] = xmmword_224664948;
  v1256[1] = *(_OWORD *)dbl_224664958;
  sub_223B54204((uint64_t)&v1247, 3, 5, 5, (uint64_t)&v1625, (uint64_t)v1256, COERCE_DOUBLE(0xEE000000E7), COERCE_DOUBLE(0x1CA000001C3), v406, v407, v408, v409, v410, v411);
  v1255[4] = v1197;
  v1255[5] = v1198;
  v1255[6] = v1199;
  v1255[0] = v1193;
  v1255[1] = v1194;
  v1255[3] = v1196;
  v1255[2] = v1195;
  v1626 = 0;
  v1258[0] = xmmword_224664968;
  v1258[1] = *(_OWORD *)dbl_224664978;
  sub_223B54204((uint64_t)v1255, 2, 4, 6, (uint64_t)&v1626, (uint64_t)v1258, COERCE_DOUBLE(0xE9000000E8), COERCE_DOUBLE(0xED000000ECLL), v412, v413, v414, v415, v416, v417);
  v1257[4] = v1197;
  v1257[5] = v1198;
  v1257[6] = v1199;
  v1257[0] = v1193;
  v1257[1] = v1194;
  v1257[3] = v1196;
  v1257[2] = v1195;
  v1627 = 0x100010001000100;
  v1260[0] = xmmword_224664988;
  v1260[1] = *(_OWORD *)dbl_224664998;
  sub_223B54204((uint64_t)v1257, 2, 4, 7, (uint64_t)&v1627, (uint64_t)v1260, COERCE_DOUBLE(0xA0000000E9), COERCE_DOUBLE(0xA4000000EDLL), v418, v419, v420, v421, v422, v423);
  v1259[4] = v1215;
  v1259[5] = v1216;
  v1259[6] = v1217;
  v1259[0] = v1211;
  v1259[1] = v1212;
  v1259[3] = v1214;
  v1259[2] = v1213;
  v1628 = 0;
  v1262[0] = xmmword_2246649A8;
  v1262[1] = *(_OWORD *)dbl_2246649B8;
  sub_223B54204((uint64_t)v1259, 2, 5, 6, (uint64_t)&v1628, (uint64_t)v1262, COERCE_DOUBLE(0xEB000000EALL), COERCE_DOUBLE(0xEF000000EELL), v424, v425, v426, v427, v428, v429);
  v1261[4] = v1215;
  v1261[5] = v1216;
  v1261[6] = v1217;
  v1261[0] = v1211;
  v1261[1] = v1212;
  v1261[3] = v1214;
  v1261[2] = v1213;
  v1629 = 0x100010001000100;
  v1264[0] = xmmword_2246649C8;
  v1264[1] = *(_OWORD *)dbl_2246649D8;
  sub_223B54204((uint64_t)v1261, 2, 5, 7, (uint64_t)&v1629, (uint64_t)v1264, COERCE_DOUBLE(0xA2000000EBLL), COERCE_DOUBLE(0xA6000000EFLL), v430, v431, v432, v433, v434, v435);
  v1263[4] = v1215;
  v1263[5] = v1216;
  v1263[6] = v1217;
  v1263[0] = v1211;
  v1263[1] = v1212;
  v1263[3] = v1214;
  v1263[2] = v1213;
  v1630 = 0;
  v1272[0] = xmmword_2246649E8;
  v1272[1] = *(_OWORD *)dbl_2246649F8;
  sub_223B54204((uint64_t)v1263, 3, 4, 6, (uint64_t)&v1630, (uint64_t)v1272, COERCE_DOUBLE(0xED000000ECLL), COERCE_DOUBLE(0x1C9000001C8), v436, v437, v438, v439, v440, v441);
  v1269 = v1215;
  v1270 = v1216;
  v1271 = v1217;
  v1265 = v1211;
  v1266 = v1212;
  v1268 = v1214;
  v1267 = v1213;
  v1631 = 0x100010001000100;
  v1274[0] = xmmword_224664A08;
  v1274[1] = *(_OWORD *)dbl_224664A18;
  sub_223B54204((uint64_t)&v1265, 3, 4, 7, (uint64_t)&v1631, (uint64_t)v1274, COERCE_DOUBLE(0xA4000000EDLL), COERCE_DOUBLE(0x180000001C9), v442, v443, v444, v445, v446, v447);
  v1273[4] = v1215;
  v1273[5] = v1216;
  v1273[6] = v1217;
  v1273[0] = v1211;
  v1273[1] = v1212;
  v1273[3] = v1214;
  v1273[2] = v1213;
  v1632 = 0;
  v1276[0] = xmmword_224664A28;
  v1276[1] = *(_OWORD *)dbl_224664A38;
  sub_223B54204((uint64_t)v1273, 3, 5, 6, (uint64_t)&v1632, (uint64_t)v1276, COERCE_DOUBLE(0xEF000000EELL), COERCE_DOUBLE(0x1CB000001CALL), v448, v449, v450, v451, v452, v453);
  v1275[4] = v1215;
  v1275[5] = v1216;
  v1275[6] = v1217;
  v1275[0] = v1211;
  v1275[1] = v1212;
  v1275[3] = v1214;
  v1275[2] = v1213;
  v1633 = 0x100010001000100;
  v1278[0] = xmmword_224664A48;
  v1278[1] = *(_OWORD *)dbl_224664A58;
  sub_223B54204((uint64_t)v1275, 3, 5, 7, (uint64_t)&v1633, (uint64_t)v1278, COERCE_DOUBLE(0xA6000000EFLL), COERCE_DOUBLE(0x182000001CBLL), v454, v455, v456, v457, v458, v459);
  v1277[4] = v1233;
  v1277[5] = v1234;
  v1277[6] = v1235;
  v1277[0] = v1229;
  v1277[1] = v1230;
  v1277[3] = v1232;
  v1277[2] = v1231;
  v1634 = 0;
  v1280[0] = xmmword_224664A68;
  v1280[1] = *(_OWORD *)dbl_224664A78;
  sub_223B54204((uint64_t)v1277, 2, 6, 4, (uint64_t)&v1634, (uint64_t)v1280, COERCE_DOUBLE(0xF1000000F0), COERCE_DOUBLE(0xF5000000F4), v460, v461, v462, v463, v464, v465);
  v1279[4] = v1233;
  v1279[5] = v1234;
  v1279[6] = v1235;
  v1279[0] = v1229;
  v1279[1] = v1230;
  v1279[3] = v1232;
  v1279[2] = v1231;
  v1635 = 0;
  v1282[0] = xmmword_224664A88;
  v1282[1] = *(_OWORD *)dbl_224664A98;
  sub_223B54204((uint64_t)v1279, 2, 6, 5, (uint64_t)&v1635, (uint64_t)v1282, COERCE_DOUBLE(0xF8000000F1), COERCE_DOUBLE(0xFC000000F5), v466, v467, v468, v469, v470, v471);
  v1281[4] = v1233;
  v1281[5] = v1234;
  v1281[6] = v1235;
  v1281[0] = v1229;
  v1281[1] = v1230;
  v1281[3] = v1232;
  v1281[2] = v1231;
  v1636 = 0x202000002020000;
  v1290[0] = xmmword_224664AA8;
  v1290[1] = *(_OWORD *)dbl_224664AB8;
  sub_223B54204((uint64_t)v1281, 2, 7, 4, (uint64_t)&v1636, (uint64_t)v1290, COERCE_DOUBLE(0xF3000000F2), COERCE_DOUBLE(0xF7000000F6), v472, v473, v474, v475, v476, v477);
  v1287 = v1233;
  v1288 = v1234;
  v1289 = v1235;
  v1283 = v1229;
  v1284 = v1230;
  v1286 = v1232;
  v1285 = v1231;
  v1637 = 0x202000002020000;
  v1292[0] = xmmword_224664AC8;
  v1292[1] = *(_OWORD *)dbl_224664AD8;
  sub_223B54204((uint64_t)&v1283, 2, 7, 5, (uint64_t)&v1637, (uint64_t)v1292, COERCE_DOUBLE(0xFA000000F3), COERCE_DOUBLE(0xFE000000F7), v478, v479, v480, v481, v482, v483);
  v1291[4] = v1233;
  v1291[5] = v1234;
  v1291[6] = v1235;
  v1291[0] = v1229;
  v1291[1] = v1230;
  v1291[3] = v1232;
  v1291[2] = v1231;
  v1638 = 0;
  v1294[0] = xmmword_224664AE8;
  v1294[1] = *(_OWORD *)dbl_224664AF8;
  sub_223B54204((uint64_t)v1291, 3, 6, 4, (uint64_t)&v1638, (uint64_t)v1294, COERCE_DOUBLE(0xF5000000F4), COERCE_DOUBLE(0x1D1000001D0), v484, v485, v486, v487, v488, v489);
  v1293[4] = v1233;
  v1293[5] = v1234;
  v1293[6] = v1235;
  v1293[0] = v1229;
  v1293[1] = v1230;
  v1293[3] = v1232;
  v1293[2] = v1231;
  v1639 = 0;
  v1296[0] = xmmword_224664B08;
  v1296[1] = *(_OWORD *)dbl_224664B18;
  sub_223B54204((uint64_t)v1293, 3, 6, 5, (uint64_t)&v1639, (uint64_t)v1296, COERCE_DOUBLE(0xFC000000F5), COERCE_DOUBLE(0x1D8000001D1), v490, v491, v492, v493, v494, v495);
  v1295[4] = v1251;
  v1295[5] = v1252;
  v1295[6] = v1253;
  v1295[0] = v1247;
  v1295[1] = v1248;
  v1295[3] = v1250;
  v1295[2] = v1249;
  v1640 = 0x202000002020000;
  v1298[0] = xmmword_224664B28;
  v1298[1] = *(_OWORD *)dbl_224664B38;
  sub_223B54204((uint64_t)v1295, 3, 7, 4, (uint64_t)&v1640, (uint64_t)v1298, COERCE_DOUBLE(0xF7000000F6), COERCE_DOUBLE(0x1D3000001D2), v496, v497, v498, v499, v500, v501);
  v1297[4] = v1251;
  v1297[5] = v1252;
  v1297[6] = v1253;
  v1297[0] = v1247;
  v1297[1] = v1248;
  v1297[3] = v1250;
  v1297[2] = v1249;
  v1641 = 0x202000002020000;
  v1300[0] = xmmword_224664B48;
  v1300[1] = *(_OWORD *)dbl_224664B58;
  sub_223B54204((uint64_t)v1297, 3, 7, 5, (uint64_t)&v1641, (uint64_t)v1300, COERCE_DOUBLE(0xFE000000F7), COERCE_DOUBLE(0x1DA000001D3), v502, v503, v504, v505, v506, v507);
  v1299[4] = v1251;
  v1299[5] = v1252;
  v1299[6] = v1253;
  v1299[0] = v1247;
  v1299[1] = v1248;
  v1299[3] = v1250;
  v1299[2] = v1249;
  v1642 = 0;
  v1308[0] = xmmword_224664B68;
  v1308[1] = *(_OWORD *)dbl_224664B78;
  sub_223B54204((uint64_t)v1299, 2, 6, 6, (uint64_t)&v1642, (uint64_t)v1308, COERCE_DOUBLE(0xF9000000F8), COERCE_DOUBLE(0xFD000000FCLL), v508, v509, v510, v511, v512, v513);
  v1305 = v1251;
  v1306 = v1252;
  v1307 = v1253;
  v1301 = v1247;
  v1302 = v1248;
  v1304 = v1250;
  v1303 = v1249;
  v1643 = 0x100010001000100;
  v1310[0] = xmmword_224664B88;
  v1310[1] = *(_OWORD *)dbl_224664B98;
  sub_223B54204((uint64_t)&v1301, 2, 6, 7, (uint64_t)&v1643, (uint64_t)v1310, COERCE_DOUBLE(0xB0000000F9), COERCE_DOUBLE(0xB4000000FDLL), v514, v515, v516, v517, v518, v519);
  v1309[4] = v1251;
  v1309[5] = v1252;
  v1309[6] = v1253;
  v1309[0] = v1247;
  v1309[1] = v1248;
  v1309[3] = v1250;
  v1309[2] = v1249;
  v1644 = 0x202000002020000;
  v1312[0] = xmmword_224664BA8;
  v1312[1] = *(_OWORD *)dbl_224664BB8;
  sub_223B54204((uint64_t)v1309, 2, 7, 6, (uint64_t)&v1644, (uint64_t)v1312, COERCE_DOUBLE(0xFB000000FALL), COERCE_DOUBLE(0xFF000000FELL), v520, v521, v522, v523, v524, v525);
  v1311[4] = v1251;
  v1311[5] = v1252;
  v1311[6] = v1253;
  v1311[0] = v1247;
  v1311[1] = v1248;
  v1311[3] = v1250;
  v1311[2] = v1249;
  v1645 = 0x302010003020100;
  v1314[0] = xmmword_224664BC8;
  v1314[1] = *(_OWORD *)dbl_224664BD8;
  sub_223B54204((uint64_t)v1311, 2, 7, 7, (uint64_t)&v1645, (uint64_t)v1314, COERCE_DOUBLE(0xB2000000FBLL), COERCE_DOUBLE(0xB6000000FFLL), v526, v527, v528, v529, v530, v531);
  v1313[4] = v1269;
  v1313[5] = v1270;
  v1313[6] = v1271;
  v1313[0] = v1265;
  v1313[1] = v1266;
  v1313[3] = v1268;
  v1313[2] = v1267;
  v1646 = 0;
  v1316[0] = xmmword_224664BE8;
  v1316[1] = *(_OWORD *)dbl_224664BF8;
  sub_223B54204((uint64_t)v1313, 3, 6, 6, (uint64_t)&v1646, (uint64_t)v1316, COERCE_DOUBLE(0xFD000000FCLL), COERCE_DOUBLE(0x1D9000001D8), v532, v533, v534, v535, v536, v537);
  v1315[4] = v1269;
  v1315[5] = v1270;
  v1315[6] = v1271;
  v1315[0] = v1265;
  v1315[1] = v1266;
  v1315[3] = v1268;
  v1315[2] = v1267;
  v1647 = 0x100010001000100;
  v1318[0] = xmmword_224664C08;
  v1318[1] = *(_OWORD *)dbl_224664C18;
  sub_223B54204((uint64_t)v1315, 3, 6, 7, (uint64_t)&v1647, (uint64_t)v1318, COERCE_DOUBLE(0xB4000000FDLL), COERCE_DOUBLE(0x190000001D9), v538, v539, v540, v541, v542, v543);
  v1317[4] = v1269;
  v1317[5] = v1270;
  v1317[6] = v1271;
  v1317[0] = v1265;
  v1317[1] = v1266;
  v1317[3] = v1268;
  v1317[2] = v1267;
  v1648 = 0x202000002020000;
  v1326[0] = xmmword_224664C28;
  v1326[1] = *(_OWORD *)dbl_224664C38;
  sub_223B54204((uint64_t)v1317, 3, 7, 6, (uint64_t)&v1648, (uint64_t)v1326, COERCE_DOUBLE(0xFF000000FELL), COERCE_DOUBLE(0x1DB000001DALL), v544, v545, v546, v547, v548, v549);
  v1323 = v1269;
  v1324 = v1270;
  v1325 = v1271;
  v1319 = v1265;
  v1320 = v1266;
  v1322 = v1268;
  v1321 = v1267;
  v1649 = 0x302010003020100;
  v1328[0] = xmmword_224664C48;
  v1328[1] = *(_OWORD *)dbl_224664C58;
  sub_223B54204((uint64_t)&v1319, 3, 7, 7, (uint64_t)&v1649, (uint64_t)v1328, COERCE_DOUBLE(0xB6000000FFLL), COERCE_DOUBLE(0x192000001DBLL), v550, v551, v552, v553, v554, v555);
  v1327[4] = v1269;
  v1327[5] = v1270;
  v1327[6] = v1271;
  v1327[0] = v1265;
  v1327[1] = v1266;
  v1327[3] = v1268;
  v1327[2] = v1267;
  v1650 = 0;
  v1330[0] = xmmword_224664C68;
  v1330[1] = *(_OWORD *)dbl_224664C78;
  sub_223B54204((uint64_t)v1327, 4, 0, 0, (uint64_t)&v1650, (uint64_t)v1330, COERCE_DOUBLE(0x10100000100), COERCE_DOUBLE(0x10500000104), v556, v557, v558, v559, v560, v561);
  v1329[4] = v1269;
  v1329[5] = v1270;
  v1329[6] = v1271;
  v1329[0] = v1265;
  v1329[1] = v1266;
  v1329[3] = v1268;
  v1329[2] = v1267;
  v1651 = 0;
  v1332[0] = xmmword_224664C88;
  v1332[1] = *(_OWORD *)dbl_224664C98;
  sub_223B54204((uint64_t)v1329, 4, 0, 1, (uint64_t)&v1651, (uint64_t)v1332, COERCE_DOUBLE(0x10800000101), COERCE_DOUBLE(0x10C00000105), v562, v563, v564, v565, v566, v567);
  v1331[4] = v1287;
  v1331[5] = v1288;
  v1331[6] = v1289;
  v1331[0] = v1283;
  v1331[1] = v1284;
  v1331[3] = v1286;
  v1331[2] = v1285;
  v1652 = 0;
  v1334[0] = xmmword_224664CA8;
  v1334[1] = *(_OWORD *)dbl_224664CB8;
  sub_223B54204((uint64_t)v1331, 4, 1, 0, (uint64_t)&v1652, (uint64_t)v1334, COERCE_DOUBLE(0x10300000102), COERCE_DOUBLE(0x10700000106), v568, v569, v570, v571, v572, v573);
  v1333[4] = v1287;
  v1333[5] = v1288;
  v1333[6] = v1289;
  v1333[0] = v1283;
  v1333[1] = v1284;
  v1333[3] = v1286;
  v1333[2] = v1285;
  v1653 = 0;
  v1336[0] = xmmword_224664CC8;
  v1336[1] = *(_OWORD *)dbl_224664CD8;
  sub_223B54204((uint64_t)v1333, 4, 1, 1, (uint64_t)&v1653, (uint64_t)v1336, COERCE_DOUBLE(0x10A00000103), COERCE_DOUBLE(0x10E00000107), v574, v575, v576, v577, v578, v579);
  v1335[4] = v1287;
  v1335[5] = v1288;
  v1335[6] = v1289;
  v1335[0] = v1283;
  v1335[1] = v1284;
  v1335[3] = v1286;
  v1335[2] = v1285;
  v1654 = 0;
  v1344[0] = xmmword_224664CE8;
  v1344[1] = *(_OWORD *)dbl_224664CF8;
  sub_223B54204((uint64_t)v1335, 5, 0, 0, (uint64_t)&v1654, (uint64_t)v1344, COERCE_DOUBLE(0x10500000104), COERCE_DOUBLE(0x12100000120), v580, v581, v582, v583, v584, v585);
  v1341 = v1287;
  v1342 = v1288;
  v1343 = v1289;
  v1337 = v1283;
  v1338 = v1284;
  v1340 = v1286;
  v1339 = v1285;
  v1655 = 0;
  v1346[0] = xmmword_224664D08;
  v1346[1] = *(_OWORD *)dbl_224664D18;
  sub_223B54204((uint64_t)&v1337, 5, 0, 1, (uint64_t)&v1655, (uint64_t)v1346, COERCE_DOUBLE(0x10C00000105), COERCE_DOUBLE(0x12800000121), v586, v587, v588, v589, v590, v591);
  v1345[4] = v1287;
  v1345[5] = v1288;
  v1345[6] = v1289;
  v1345[0] = v1283;
  v1345[1] = v1284;
  v1345[3] = v1286;
  v1345[2] = v1285;
  v1656 = 0;
  v1348[0] = xmmword_224664D28;
  v1348[1] = *(_OWORD *)dbl_224664D38;
  sub_223B54204((uint64_t)v1345, 5, 1, 0, (uint64_t)&v1656, (uint64_t)v1348, COERCE_DOUBLE(0x10700000106), COERCE_DOUBLE(0x12300000122), v592, v593, v594, v595, v596, v597);
  v1347[4] = v1287;
  v1347[5] = v1288;
  v1347[6] = v1289;
  v1347[0] = v1283;
  v1347[1] = v1284;
  v1347[3] = v1286;
  v1347[2] = v1285;
  v1657 = 0;
  v1350[0] = xmmword_224664D48;
  v1350[1] = *(_OWORD *)dbl_224664D58;
  sub_223B54204((uint64_t)v1347, 5, 1, 1, (uint64_t)&v1657, (uint64_t)v1350, COERCE_DOUBLE(0x10E00000107), COERCE_DOUBLE(0x12A00000123), v598, v599, v600, v601, v602, v603);
  v1349[4] = v1305;
  v1349[5] = v1306;
  v1349[6] = v1307;
  v1349[0] = v1301;
  v1349[1] = v1302;
  v1349[3] = v1304;
  v1349[2] = v1303;
  v1658 = 0;
  v1352[0] = xmmword_224664D68;
  v1352[1] = *(_OWORD *)dbl_224664D78;
  sub_223B54204((uint64_t)v1349, 4, 0, 2, (uint64_t)&v1658, (uint64_t)v1352, COERCE_DOUBLE(0x10900000108), COERCE_DOUBLE(0x10D0000010CLL), v604, v605, v606, v607, v608, v609);
  v1351[4] = v1305;
  v1351[5] = v1306;
  v1351[6] = v1307;
  v1351[0] = v1301;
  v1351[1] = v1302;
  v1351[3] = v1304;
  v1351[2] = v1303;
  v1659 = 0;
  v1354[0] = xmmword_224664D88;
  v1354[1] = *(_OWORD *)dbl_224664D98;
  sub_223B54204((uint64_t)v1351, 4, 0, 3, (uint64_t)&v1659, (uint64_t)v1354, COERCE_DOUBLE(0x14000000109), COERCE_DOUBLE(0x1440000010DLL), v610, v611, v612, v613, v614, v615);
  v1353[4] = v1305;
  v1353[5] = v1306;
  v1353[6] = v1307;
  v1353[0] = v1301;
  v1353[1] = v1302;
  v1353[3] = v1304;
  v1353[2] = v1303;
  v1660 = 0;
  v1362[0] = xmmword_224664DA8;
  v1362[1] = *(_OWORD *)dbl_224664DB8;
  sub_223B54204((uint64_t)v1353, 4, 1, 2, (uint64_t)&v1660, (uint64_t)v1362, COERCE_DOUBLE(0x10B0000010ALL), COERCE_DOUBLE(0x10F0000010ELL), v616, v617, v618, v619, v620, v621);
  v1359 = v1305;
  v1360 = v1306;
  v1361 = v1307;
  v1355 = v1301;
  v1356 = v1302;
  v1358 = v1304;
  v1357 = v1303;
  v1661 = 0;
  v1364[0] = xmmword_224664DC8;
  v1364[1] = *(_OWORD *)dbl_224664DD8;
  sub_223B54204((uint64_t)&v1355, 4, 1, 3, (uint64_t)&v1661, (uint64_t)v1364, COERCE_DOUBLE(0x1420000010BLL), COERCE_DOUBLE(0x1460000010FLL), v622, v623, v624, v625, v626, v627);
  v1363[4] = v1305;
  v1363[5] = v1306;
  v1363[6] = v1307;
  v1363[0] = v1301;
  v1363[1] = v1302;
  v1363[3] = v1304;
  v1363[2] = v1303;
  v1662 = 0;
  v1366[0] = xmmword_224664DE8;
  v1366[1] = *(_OWORD *)dbl_224664DF8;
  sub_223B54204((uint64_t)v1363, 5, 0, 2, (uint64_t)&v1662, (uint64_t)v1366, COERCE_DOUBLE(0x10D0000010CLL), COERCE_DOUBLE(0x12900000128), v628, v629, v630, v631, v632, v633);
  v1365[4] = v1305;
  v1365[5] = v1306;
  v1365[6] = v1307;
  v1365[0] = v1301;
  v1365[1] = v1302;
  v1365[3] = v1304;
  v1365[2] = v1303;
  v1663 = 0;
  v1368[0] = xmmword_224664E08;
  v1368[1] = *(_OWORD *)dbl_224664E18;
  sub_223B54204((uint64_t)v1365, 5, 0, 3, (uint64_t)&v1663, (uint64_t)v1368, COERCE_DOUBLE(0x1440000010DLL), COERCE_DOUBLE(0x16000000129), v634, v635, v636, v637, v638, v639);
  v1367[4] = v1323;
  v1367[5] = v1324;
  v1367[6] = v1325;
  v1367[0] = v1319;
  v1367[1] = v1320;
  v1367[3] = v1322;
  v1367[2] = v1321;
  v1664 = 0;
  v1370[0] = xmmword_224664E28;
  v1370[1] = *(_OWORD *)dbl_224664E38;
  sub_223B54204((uint64_t)v1367, 5, 1, 2, (uint64_t)&v1664, (uint64_t)v1370, COERCE_DOUBLE(0x10F0000010ELL), COERCE_DOUBLE(0x12B0000012ALL), v640, v641, v642, v643, v644, v645);
  v1369[4] = v1323;
  v1369[5] = v1324;
  v1369[6] = v1325;
  v1369[0] = v1319;
  v1369[1] = v1320;
  v1369[3] = v1322;
  v1369[2] = v1321;
  v1665 = 0;
  v1372[0] = xmmword_224664E48;
  v1372[1] = *(_OWORD *)dbl_224664E58;
  sub_223B54204((uint64_t)v1369, 5, 1, 3, (uint64_t)&v1665, (uint64_t)v1372, COERCE_DOUBLE(0x1460000010FLL), COERCE_DOUBLE(0x1620000012BLL), v646, v647, v648, v649, v650, v651);
  v1371[4] = v1323;
  v1371[5] = v1324;
  v1371[6] = v1325;
  v1371[0] = v1319;
  v1371[1] = v1320;
  v1371[3] = v1322;
  v1371[2] = v1321;
  v1666 = 0;
  v1380[0] = xmmword_224664E68;
  v1380[1] = *(_OWORD *)dbl_224664E78;
  sub_223B54204((uint64_t)v1371, 4, 2, 0, (uint64_t)&v1666, (uint64_t)v1380, COERCE_DOUBLE(0x11100000110), COERCE_DOUBLE(0x11500000114), v652, v653, v654, v655, v656, v657);
  v1377 = v1323;
  v1378 = v1324;
  v1379 = v1325;
  v1373 = v1319;
  v1374 = v1320;
  v1376 = v1322;
  v1375 = v1321;
  v1667 = 0;
  v1382[0] = xmmword_224664E88;
  v1382[1] = *(_OWORD *)dbl_224664E98;
  sub_223B54204((uint64_t)&v1373, 4, 2, 1, (uint64_t)&v1667, (uint64_t)v1382, COERCE_DOUBLE(0x11800000111), COERCE_DOUBLE(0x11C00000115), v658, v659, v660, v661, v662, v663);
  v1381[4] = v1323;
  v1381[5] = v1324;
  v1381[6] = v1325;
  v1381[0] = v1319;
  v1381[1] = v1320;
  v1381[3] = v1322;
  v1381[2] = v1321;
  v1668 = 0;
  v1384[0] = xmmword_224664EA8;
  v1384[1] = *(_OWORD *)dbl_224664EB8;
  sub_223B54204((uint64_t)v1381, 4, 3, 0, (uint64_t)&v1668, (uint64_t)v1384, COERCE_DOUBLE(0x11300000112), COERCE_DOUBLE(0x11700000116), v664, v665, v666, v667, v668, v669);
  v1383[4] = v1323;
  v1383[5] = v1324;
  v1383[6] = v1325;
  v1383[0] = v1319;
  v1383[1] = v1320;
  v1383[3] = v1322;
  v1383[2] = v1321;
  v1669 = 0;
  v1386[0] = xmmword_224664EC8;
  v1386[1] = *(_OWORD *)dbl_224664ED8;
  sub_223B54204((uint64_t)v1383, 4, 3, 1, (uint64_t)&v1669, (uint64_t)v1386, COERCE_DOUBLE(0x11A00000113), COERCE_DOUBLE(0x11E00000117), v670, v671, v672, v673, v674, v675);
  v1385[4] = v1341;
  v1385[5] = v1342;
  v1385[6] = v1343;
  v1385[0] = v1337;
  v1385[1] = v1338;
  v1385[3] = v1340;
  v1385[2] = v1339;
  v1670 = 0;
  v1388[0] = xmmword_224664EE8;
  v1388[1] = *(_OWORD *)dbl_224664EF8;
  sub_223B54204((uint64_t)v1385, 5, 2, 0, (uint64_t)&v1670, (uint64_t)v1388, COERCE_DOUBLE(0x11500000114), COERCE_DOUBLE(0x13100000130), v676, v677, v678, v679, v680, v681);
  v1387[4] = v1341;
  v1387[5] = v1342;
  v1387[6] = v1343;
  v1387[0] = v1337;
  v1387[1] = v1338;
  v1387[3] = v1340;
  v1387[2] = v1339;
  v1671 = 0;
  v1390[0] = xmmword_224664F08;
  v1390[1] = *(_OWORD *)dbl_224664F18;
  sub_223B54204((uint64_t)v1387, 5, 2, 1, (uint64_t)&v1671, (uint64_t)v1390, COERCE_DOUBLE(0x11C00000115), COERCE_DOUBLE(0x13800000131), v682, v683, v684, v685, v686, v687);
  v1389[4] = v1341;
  v1389[5] = v1342;
  v1389[6] = v1343;
  v1389[0] = v1337;
  v1389[1] = v1338;
  v1389[3] = v1340;
  v1389[2] = v1339;
  v1672 = 0;
  v1398[0] = xmmword_224664F28;
  v1398[1] = *(_OWORD *)dbl_224664F38;
  sub_223B54204((uint64_t)v1389, 5, 3, 0, (uint64_t)&v1672, (uint64_t)v1398, COERCE_DOUBLE(0x11700000116), COERCE_DOUBLE(0x13300000132), v688, v689, v690, v691, v692, v693);
  v1395 = v1341;
  v1396 = v1342;
  v1397 = v1343;
  v1391 = v1337;
  v1392 = v1338;
  v1394 = v1340;
  v1393 = v1339;
  v1673 = 0;
  v1400[0] = xmmword_224664F48;
  v1400[1] = *(_OWORD *)dbl_224664F58;
  sub_223B54204((uint64_t)&v1391, 5, 3, 1, (uint64_t)&v1673, (uint64_t)v1400, COERCE_DOUBLE(0x11E00000117), COERCE_DOUBLE(0x13A00000133), v694, v695, v696, v697, v698, v699);
  v1399[4] = v1341;
  v1399[5] = v1342;
  v1399[6] = v1343;
  v1399[0] = v1337;
  v1399[1] = v1338;
  v1399[3] = v1340;
  v1399[2] = v1339;
  v1674 = 0;
  v1402[0] = xmmword_224664F68;
  v1402[1] = *(_OWORD *)dbl_224664F78;
  sub_223B54204((uint64_t)v1399, 4, 2, 2, (uint64_t)&v1674, (uint64_t)v1402, COERCE_DOUBLE(0x11900000118), COERCE_DOUBLE(0x11D0000011CLL), v700, v701, v702, v703, v704, v705);
  v1401[4] = v1341;
  v1401[5] = v1342;
  v1401[6] = v1343;
  v1401[0] = v1337;
  v1401[1] = v1338;
  v1401[3] = v1340;
  v1401[2] = v1339;
  v1675 = 0;
  v1404[0] = xmmword_224664F88;
  v1404[1] = *(_OWORD *)dbl_224664F98;
  sub_223B54204((uint64_t)v1401, 4, 2, 3, (uint64_t)&v1675, (uint64_t)v1404, COERCE_DOUBLE(0x15000000119), COERCE_DOUBLE(0x1540000011DLL), v706, v707, v708, v709, v710, v711);
  v1403[4] = v1359;
  v1403[5] = v1360;
  v1403[6] = v1361;
  v1403[0] = v1355;
  v1403[1] = v1356;
  v1403[3] = v1358;
  v1403[2] = v1357;
  v1676 = 0;
  v1406[0] = xmmword_224664FA8;
  v1406[1] = *(_OWORD *)dbl_224664FB8;
  sub_223B54204((uint64_t)v1403, 4, 3, 2, (uint64_t)&v1676, (uint64_t)v1406, COERCE_DOUBLE(0x11B0000011ALL), COERCE_DOUBLE(0x11F0000011ELL), v712, v713, v714, v715, v716, v717);
  v1405[4] = v1359;
  v1405[5] = v1360;
  v1405[6] = v1361;
  v1405[0] = v1355;
  v1405[1] = v1356;
  v1405[3] = v1358;
  v1405[2] = v1357;
  v1677 = 0;
  v1408[0] = xmmword_224664FC8;
  v1408[1] = *(_OWORD *)dbl_224664FD8;
  sub_223B54204((uint64_t)v1405, 4, 3, 3, (uint64_t)&v1677, (uint64_t)v1408, COERCE_DOUBLE(0x1520000011BLL), COERCE_DOUBLE(0x1560000011FLL), v718, v719, v720, v721, v722, v723);
  v1407[4] = v1359;
  v1407[5] = v1360;
  v1407[6] = v1361;
  v1407[0] = v1355;
  v1407[1] = v1356;
  v1407[3] = v1358;
  v1407[2] = v1357;
  v1678 = 0;
  v1416[0] = xmmword_224664FE8;
  v1416[1] = *(_OWORD *)dbl_224664FF8;
  sub_223B54204((uint64_t)v1407, 5, 2, 2, (uint64_t)&v1678, (uint64_t)v1416, COERCE_DOUBLE(0x11D0000011CLL), COERCE_DOUBLE(0x13900000138), v724, v725, v726, v727, v728, v729);
  v1413 = v1359;
  v1414 = v1360;
  v1415 = v1361;
  v1409 = v1355;
  v1410 = v1356;
  v1412 = v1358;
  v1411 = v1357;
  v1679 = 0;
  v1418[0] = xmmword_224665008;
  v1418[1] = *(_OWORD *)dbl_224665018;
  sub_223B54204((uint64_t)&v1409, 5, 2, 3, (uint64_t)&v1679, (uint64_t)v1418, COERCE_DOUBLE(0x1540000011DLL), COERCE_DOUBLE(0x17000000139), v730, v731, v732, v733, v734, v735);
  v1417[4] = v1359;
  v1417[5] = v1360;
  v1417[6] = v1361;
  v1417[0] = v1355;
  v1417[1] = v1356;
  v1417[3] = v1358;
  v1417[2] = v1357;
  v1680 = 0;
  v1420[0] = xmmword_224665028;
  v1420[1] = *(_OWORD *)dbl_224665038;
  sub_223B54204((uint64_t)v1417, 5, 3, 2, (uint64_t)&v1680, (uint64_t)v1420, COERCE_DOUBLE(0x11F0000011ELL), COERCE_DOUBLE(0x13B0000013ALL), v736, v737, v738, v739, v740, v741);
  v1419[4] = v1359;
  v1419[5] = v1360;
  v1419[6] = v1361;
  v1419[0] = v1355;
  v1419[1] = v1356;
  v1419[3] = v1358;
  v1419[2] = v1357;
  v1681 = 0;
  v1422[0] = xmmword_224665048;
  v1422[1] = *(_OWORD *)dbl_224665058;
  sub_223B54204((uint64_t)v1419, 5, 3, 3, (uint64_t)&v1681, (uint64_t)v1422, COERCE_DOUBLE(0x1560000011FLL), COERCE_DOUBLE(0x1720000013BLL), v742, v743, v744, v745, v746, v747);
  v1421[4] = v1377;
  v1421[5] = v1378;
  v1421[6] = v1379;
  v1421[0] = v1373;
  v1421[1] = v1374;
  v1421[3] = v1376;
  v1421[2] = v1375;
  v1682 = 0;
  v1424[0] = xmmword_224665068;
  v1424[1] = *(_OWORD *)dbl_224665078;
  sub_223B54204((uint64_t)v1421, 6, 0, 0, (uint64_t)&v1682, (uint64_t)v1424, COERCE_DOUBLE(0x12100000120), COERCE_DOUBLE(0x12500000124), v748, v749, v750, v751, v752, v753);
  v1423[4] = v1377;
  v1423[5] = v1378;
  v1423[6] = v1379;
  v1423[0] = v1373;
  v1423[1] = v1374;
  v1423[3] = v1376;
  v1423[2] = v1375;
  v1683 = 0;
  v1426[0] = xmmword_224665088;
  v1426[1] = *(_OWORD *)dbl_224665098;
  sub_223B54204((uint64_t)v1423, 6, 0, 1, (uint64_t)&v1683, (uint64_t)v1426, COERCE_DOUBLE(0x12800000121), COERCE_DOUBLE(0x12C00000125), v754, v755, v756, v757, v758, v759);
  v1425[4] = v1377;
  v1425[5] = v1378;
  v1425[6] = v1379;
  v1425[0] = v1373;
  v1425[1] = v1374;
  v1425[3] = v1376;
  v1425[2] = v1375;
  v1684 = 0;
  v1434[0] = xmmword_2246650A8;
  v1434[1] = *(_OWORD *)dbl_2246650B8;
  sub_223B54204((uint64_t)v1425, 6, 1, 0, (uint64_t)&v1684, (uint64_t)v1434, COERCE_DOUBLE(0x12300000122), COERCE_DOUBLE(0x12700000126), v760, v761, v762, v763, v764, v765);
  v1431 = v1377;
  v1432 = v1378;
  v1433 = v1379;
  v1427 = v1373;
  v1428 = v1374;
  v1430 = v1376;
  v1429 = v1375;
  v1685 = 0;
  v1436[0] = xmmword_2246650C8;
  v1436[1] = *(_OWORD *)dbl_2246650D8;
  sub_223B54204((uint64_t)&v1427, 6, 1, 1, (uint64_t)&v1685, (uint64_t)v1436, COERCE_DOUBLE(0x12A00000123), COERCE_DOUBLE(0x12E00000127), v766, v767, v768, v769, v770, v771);
  v1435[4] = v1377;
  v1435[5] = v1378;
  v1435[6] = v1379;
  v1435[0] = v1373;
  v1435[1] = v1374;
  v1435[3] = v1376;
  v1435[2] = v1375;
  v1686 = 0x404040400000000;
  v1438[0] = xmmword_2246650E8;
  v1438[1] = *(_OWORD *)dbl_2246650F8;
  sub_223B54204((uint64_t)v1435, 7, 0, 0, (uint64_t)&v1686, (uint64_t)v1438, COERCE_DOUBLE(0x12500000124), COERCE_DOUBLE(0x100000000), v772, v773, v774, v775, v776, v777);
  v1437[4] = v1377;
  v1437[5] = v1378;
  v1437[6] = v1379;
  v1437[0] = v1373;
  v1437[1] = v1374;
  v1437[3] = v1376;
  v1437[2] = v1375;
  v1687 = 0x404040400000000;
  v1440[0] = xmmword_224665108;
  v1440[1] = *(_OWORD *)dbl_224665118;
  sub_223B54204((uint64_t)v1437, 7, 0, 1, (uint64_t)&v1687, (uint64_t)v1440, COERCE_DOUBLE(0x12C00000125), COERCE_DOUBLE(0x800000001), v778, v779, v780, v781, v782, v783);
  v1439[4] = v1395;
  v1439[5] = v1396;
  v1439[6] = v1397;
  v1439[0] = v1391;
  v1439[1] = v1392;
  v1439[3] = v1394;
  v1439[2] = v1393;
  v1688 = 0x404040400000000;
  v1442[0] = xmmword_224665128;
  v1442[1] = *(_OWORD *)dbl_224665138;
  sub_223B54204((uint64_t)v1439, 7, 1, 0, (uint64_t)&v1688, (uint64_t)v1442, COERCE_DOUBLE(0x12700000126), COERCE_DOUBLE(0x300000002), v784, v785, v786, v787, v788, v789);
  v1441[4] = v1395;
  v1441[5] = v1396;
  v1441[6] = v1397;
  v1441[0] = v1391;
  v1441[1] = v1392;
  v1441[3] = v1394;
  v1441[2] = v1393;
  v1689 = 0x404040400000000;
  v1444[0] = xmmword_224665148;
  v1444[1] = *(_OWORD *)dbl_224665158;
  sub_223B54204((uint64_t)v1441, 7, 1, 1, (uint64_t)&v1689, (uint64_t)v1444, COERCE_DOUBLE(0x12E00000127), COERCE_DOUBLE(0xA00000003), v790, v791, v792, v793, v794, v795);
  v1443[4] = v1395;
  v1443[5] = v1396;
  v1443[6] = v1397;
  v1443[0] = v1391;
  v1443[1] = v1392;
  v1443[3] = v1394;
  v1443[2] = v1393;
  v1690 = 0;
  v1452[0] = xmmword_224665168;
  v1452[1] = *(_OWORD *)dbl_224665178;
  sub_223B54204((uint64_t)v1443, 6, 0, 2, (uint64_t)&v1690, (uint64_t)v1452, COERCE_DOUBLE(0x12900000128), COERCE_DOUBLE(0x12D0000012CLL), v796, v797, v798, v799, v800, v801);
  v1449 = v1395;
  v1450 = v1396;
  v1451 = v1397;
  v1445 = v1391;
  v1446 = v1392;
  v1448 = v1394;
  v1447 = v1393;
  v1691 = 0;
  v1454[0] = xmmword_224665188;
  v1454[1] = *(_OWORD *)dbl_224665198;
  sub_223B54204((uint64_t)&v1445, 6, 0, 3, (uint64_t)&v1691, (uint64_t)v1454, COERCE_DOUBLE(0x16000000129), COERCE_DOUBLE(0x1640000012DLL), v802, v803, v804, v805, v806, v807);
  v1453[4] = v1395;
  v1453[5] = v1396;
  v1453[6] = v1397;
  v1453[0] = v1391;
  v1453[1] = v1392;
  v1453[3] = v1394;
  v1453[2] = v1393;
  v1692 = 0;
  v1456[0] = xmmword_2246651A8;
  v1456[1] = *(_OWORD *)dbl_2246651B8;
  sub_223B54204((uint64_t)v1453, 6, 1, 2, (uint64_t)&v1692, (uint64_t)v1456, COERCE_DOUBLE(0x12B0000012ALL), COERCE_DOUBLE(0x12F0000012ELL), v808, v809, v810, v811, v812, v813);
  v1455[4] = v1395;
  v1455[5] = v1396;
  v1455[6] = v1397;
  v1455[0] = v1391;
  v1455[1] = v1392;
  v1455[3] = v1394;
  v1455[2] = v1393;
  v1693 = 0;
  v1458[0] = xmmword_2246651C8;
  v1458[1] = *(_OWORD *)dbl_2246651D8;
  sub_223B54204((uint64_t)v1455, 6, 1, 3, (uint64_t)&v1693, (uint64_t)v1458, COERCE_DOUBLE(0x1620000012BLL), COERCE_DOUBLE(0x1660000012FLL), v814, v815, v816, v817, v818, v819);
  v1457[4] = v1413;
  v1457[5] = v1414;
  v1457[6] = v1415;
  v1457[0] = v1409;
  v1457[1] = v1410;
  v1457[3] = v1412;
  v1457[2] = v1411;
  v1694 = 0x404040400000000;
  v1460[0] = xmmword_2246651E8;
  v1460[1] = *(_OWORD *)dbl_2246651F8;
  sub_223B54204((uint64_t)v1457, 7, 0, 2, (uint64_t)&v1694, (uint64_t)v1460, COERCE_DOUBLE(0x12D0000012CLL), COERCE_DOUBLE(0x900000008), v820, v821, v822, v823, v824, v825);
  v1459[4] = v1413;
  v1459[5] = v1414;
  v1459[6] = v1415;
  v1459[0] = v1409;
  v1459[1] = v1410;
  v1459[3] = v1412;
  v1459[2] = v1411;
  v1695 = 0x404040400000000;
  v1462[0] = xmmword_224665208;
  v1462[1] = *(_OWORD *)dbl_224665218;
  sub_223B54204((uint64_t)v1459, 7, 0, 3, (uint64_t)&v1695, (uint64_t)v1462, COERCE_DOUBLE(0x1640000012DLL), COERCE_DOUBLE(0x4000000009), v826, v827, v828, v829, v830, v831);
  v1461[4] = v1413;
  v1461[5] = v1414;
  v1461[6] = v1415;
  v1461[0] = v1409;
  v1461[1] = v1410;
  v1461[3] = v1412;
  v1461[2] = v1411;
  v1696 = 0x404040400000000;
  v1470[0] = xmmword_224665228;
  v1470[1] = *(_OWORD *)dbl_224665238;
  sub_223B54204((uint64_t)v1461, 7, 1, 2, (uint64_t)&v1696, (uint64_t)v1470, COERCE_DOUBLE(0x12F0000012ELL), COERCE_DOUBLE(0xB0000000ALL), v832, v833, v834, v835, v836, v837);
  v1467 = v1413;
  v1468 = v1414;
  v1469 = v1415;
  v1463 = v1409;
  v1464 = v1410;
  v1466 = v1412;
  v1465 = v1411;
  v1697 = 0x404040400000000;
  v1472[0] = xmmword_224665248;
  v1472[1] = *(_OWORD *)dbl_224665258;
  sub_223B54204((uint64_t)&v1463, 7, 1, 3, (uint64_t)&v1697, (uint64_t)v1472, COERCE_DOUBLE(0x1660000012FLL), COERCE_DOUBLE(0x420000000BLL), v838, v839, v840, v841, v842, v843);
  v1471[4] = v1413;
  v1471[5] = v1414;
  v1471[6] = v1415;
  v1471[0] = v1409;
  v1471[1] = v1410;
  v1471[3] = v1412;
  v1471[2] = v1411;
  v1698 = 0;
  v1474[0] = xmmword_224665268;
  v1474[1] = *(_OWORD *)dbl_224665278;
  sub_223B54204((uint64_t)v1471, 6, 2, 0, (uint64_t)&v1698, (uint64_t)v1474, COERCE_DOUBLE(0x13100000130), COERCE_DOUBLE(0x13500000134), v844, v845, v846, v847, v848, v849);
  v1473[4] = v1413;
  v1473[5] = v1414;
  v1473[6] = v1415;
  v1473[0] = v1409;
  v1473[1] = v1410;
  v1473[3] = v1412;
  v1473[2] = v1411;
  v1699 = 0;
  v1476[0] = xmmword_224665288;
  v1476[1] = *(_OWORD *)dbl_224665298;
  sub_223B54204((uint64_t)v1473, 6, 2, 1, (uint64_t)&v1699, (uint64_t)v1476, COERCE_DOUBLE(0x13800000131), COERCE_DOUBLE(0x13C00000135), v850, v851, v852, v853, v854, v855);
  v1475[4] = v1431;
  v1475[5] = v1432;
  v1475[6] = v1433;
  v1475[0] = v1427;
  v1475[1] = v1428;
  v1475[3] = v1430;
  v1475[2] = v1429;
  v1700 = 0;
  v1478[0] = xmmword_2246652A8;
  v1478[1] = *(_OWORD *)dbl_2246652B8;
  sub_223B54204((uint64_t)v1475, 6, 3, 0, (uint64_t)&v1700, (uint64_t)v1478, COERCE_DOUBLE(0x13300000132), COERCE_DOUBLE(0x13700000136), v856, v857, v858, v859, v860, v861);
  v1477[4] = v1431;
  v1477[5] = v1432;
  v1477[6] = v1433;
  v1477[0] = v1427;
  v1477[1] = v1428;
  v1477[3] = v1430;
  v1477[2] = v1429;
  v1701 = 0;
  v1480[0] = xmmword_2246652C8;
  v1480[1] = *(_OWORD *)dbl_2246652D8;
  sub_223B54204((uint64_t)v1477, 6, 3, 1, (uint64_t)&v1701, (uint64_t)v1480, COERCE_DOUBLE(0x13A00000133), COERCE_DOUBLE(0x13E00000137), v862, v863, v864, v865, v866, v867);
  v1479[4] = v1431;
  v1479[5] = v1432;
  v1479[6] = v1433;
  v1479[0] = v1427;
  v1479[1] = v1428;
  v1479[3] = v1430;
  v1479[2] = v1429;
  v1702 = 0x404040400000000;
  v1488[0] = xmmword_2246652E8;
  v1488[1] = *(_OWORD *)dbl_2246652F8;
  sub_223B54204((uint64_t)v1479, 7, 2, 0, (uint64_t)&v1702, (uint64_t)v1488, COERCE_DOUBLE(0x13500000134), COERCE_DOUBLE(0x1100000010), v868, v869, v870, v871, v872, v873);
  v1485 = v1431;
  v1486 = v1432;
  v1487 = v1433;
  v1481 = v1427;
  v1482 = v1428;
  v1484 = v1430;
  v1483 = v1429;
  v1703 = 0x404040400000000;
  v1490[0] = xmmword_224665308;
  v1490[1] = *(_OWORD *)dbl_224665318;
  sub_223B54204((uint64_t)&v1481, 7, 2, 1, (uint64_t)&v1703, (uint64_t)v1490, COERCE_DOUBLE(0x13C00000135), COERCE_DOUBLE(0x1800000011), v874, v875, v876, v877, v878, v879);
  v1489[4] = v1431;
  v1489[5] = v1432;
  v1489[6] = v1433;
  v1489[0] = v1427;
  v1489[1] = v1428;
  v1489[3] = v1430;
  v1489[2] = v1429;
  v1704 = 0x404040400000000;
  v1492[0] = xmmword_224665328;
  v1492[1] = *(_OWORD *)dbl_224665338;
  sub_223B54204((uint64_t)v1489, 7, 3, 0, (uint64_t)&v1704, (uint64_t)v1492, COERCE_DOUBLE(0x13700000136), COERCE_DOUBLE(0x1300000012), v880, v881, v882, v883, v884, v885);
  v1491[4] = v1431;
  v1491[5] = v1432;
  v1491[6] = v1433;
  v1491[0] = v1427;
  v1491[1] = v1428;
  v1491[3] = v1430;
  v1491[2] = v1429;
  v1705 = 0x404040400000000;
  v1494[0] = xmmword_224665348;
  v1494[1] = *(_OWORD *)dbl_224665358;
  sub_223B54204((uint64_t)v1491, 7, 3, 1, (uint64_t)&v1705, (uint64_t)v1494, COERCE_DOUBLE(0x13E00000137), COERCE_DOUBLE(0x1A00000013), v886, v887, v888, v889, v890, v891);
  v1493[4] = v1449;
  v1493[5] = v1450;
  v1493[6] = v1451;
  v1493[0] = v1445;
  v1493[1] = v1446;
  v1493[3] = v1448;
  v1493[2] = v1447;
  v1706 = 0;
  v1496[0] = xmmword_224665368;
  v1496[1] = *(_OWORD *)dbl_224665378;
  sub_223B54204((uint64_t)v1493, 6, 2, 2, (uint64_t)&v1706, (uint64_t)v1496, COERCE_DOUBLE(0x13900000138), COERCE_DOUBLE(0x13D0000013CLL), v892, v893, v894, v895, v896, v897);
  v1495[4] = v1449;
  v1495[5] = v1450;
  v1495[6] = v1451;
  v1495[0] = v1445;
  v1495[1] = v1446;
  v1495[3] = v1448;
  v1495[2] = v1447;
  v1707 = 0;
  v1498[0] = xmmword_224665388;
  v1498[1] = *(_OWORD *)dbl_224665398;
  sub_223B54204((uint64_t)v1495, 6, 2, 3, (uint64_t)&v1707, (uint64_t)v1498, COERCE_DOUBLE(0x17000000139), COERCE_DOUBLE(0x1740000013DLL), v898, v899, v900, v901, v902, v903);
  v1497[4] = v1449;
  v1497[5] = v1450;
  v1497[6] = v1451;
  v1497[0] = v1445;
  v1497[1] = v1446;
  v1497[3] = v1448;
  v1497[2] = v1447;
  v1708 = 0;
  v1506[0] = xmmword_2246653A8;
  v1506[1] = *(_OWORD *)dbl_2246653B8;
  sub_223B54204((uint64_t)v1497, 6, 3, 2, (uint64_t)&v1708, (uint64_t)v1506, COERCE_DOUBLE(0x13B0000013ALL), COERCE_DOUBLE(0x13F0000013ELL), v904, v905, v906, v907, v908, v909);
  v1503 = v1449;
  v1504 = v1450;
  v1505 = v1451;
  v1499 = v1445;
  v1500 = v1446;
  v1502 = v1448;
  v1501 = v1447;
  v1709 = 0;
  v1508[0] = xmmword_2246653C8;
  v1508[1] = *(_OWORD *)dbl_2246653D8;
  sub_223B54204((uint64_t)&v1499, 6, 3, 3, (uint64_t)&v1709, (uint64_t)v1508, COERCE_DOUBLE(0x1720000013BLL), COERCE_DOUBLE(0x1760000013FLL), v910, v911, v912, v913, v914, v915);
  v1507[4] = v1449;
  v1507[5] = v1450;
  v1507[6] = v1451;
  v1507[0] = v1445;
  v1507[1] = v1446;
  v1507[3] = v1448;
  v1507[2] = v1447;
  v1710 = 0x404040400000000;
  v1510[0] = xmmword_2246653E8;
  v1510[1] = *(_OWORD *)dbl_2246653F8;
  sub_223B54204((uint64_t)v1507, 7, 2, 2, (uint64_t)&v1710, (uint64_t)v1510, COERCE_DOUBLE(0x13D0000013CLL), COERCE_DOUBLE(0x1900000018), v916, v917, v918, v919, v920, v921);
  v1509[4] = v1449;
  v1509[5] = v1450;
  v1509[6] = v1451;
  v1509[0] = v1445;
  v1509[1] = v1446;
  v1509[3] = v1448;
  v1509[2] = v1447;
  v1711 = 0x404040400000000;
  v1512[0] = xmmword_224665408;
  v1512[1] = *(_OWORD *)dbl_224665418;
  sub_223B54204((uint64_t)v1509, 7, 2, 3, (uint64_t)&v1711, (uint64_t)v1512, COERCE_DOUBLE(0x1740000013DLL), COERCE_DOUBLE(0x5000000019), v922, v923, v924, v925, v926, v927);
  v1511[4] = v1467;
  v1511[5] = v1468;
  v1511[6] = v1469;
  v1511[0] = v1463;
  v1511[1] = v1464;
  v1511[3] = v1466;
  v1511[2] = v1465;
  v1712 = 0x404040400000000;
  v1514[0] = xmmword_224665428;
  v1514[1] = *(_OWORD *)dbl_224665438;
  sub_223B54204((uint64_t)v1511, 7, 3, 2, (uint64_t)&v1712, (uint64_t)v1514, COERCE_DOUBLE(0x13F0000013ELL), COERCE_DOUBLE(0x1B0000001ALL), v928, v929, v930, v931, v932, v933);
  v1513[4] = v1467;
  v1513[5] = v1468;
  v1513[6] = v1469;
  v1513[0] = v1463;
  v1513[1] = v1464;
  v1513[3] = v1466;
  v1513[2] = v1465;
  v1713 = 0x404040400000000;
  v1516[0] = xmmword_224665448;
  v1516[1] = *(_OWORD *)dbl_224665458;
  sub_223B54204((uint64_t)v1513, 7, 3, 3, (uint64_t)&v1713, (uint64_t)v1516, COERCE_DOUBLE(0x1760000013FLL), COERCE_DOUBLE(0x520000001BLL), v934, v935, v936, v937, v938, v939);
  v1515[4] = v1467;
  v1515[5] = v1468;
  v1515[6] = v1469;
  v1515[0] = v1463;
  v1515[1] = v1464;
  v1515[3] = v1466;
  v1515[2] = v1465;
  v1714 = 0;
  v1524[0] = xmmword_224665468;
  v1524[1] = *(_OWORD *)dbl_224665478;
  sub_223B54204((uint64_t)v1515, 4, 0, 4, (uint64_t)&v1714, (uint64_t)v1524, COERCE_DOUBLE(0x14100000140), COERCE_DOUBLE(0x14500000144), v940, v941, v942, v943, v944, v945);
  v1521 = v1467;
  v1522 = v1468;
  v1523 = v1469;
  v1517 = v1463;
  v1518 = v1464;
  v1520 = v1466;
  v1519 = v1465;
  v1715 = 0;
  v1526[0] = xmmword_224665488;
  v1526[1] = *(_OWORD *)dbl_224665498;
  sub_223B54204((uint64_t)&v1517, 4, 0, 5, (uint64_t)&v1715, (uint64_t)v1526, COERCE_DOUBLE(0x14800000141), COERCE_DOUBLE(0x14C00000145), v946, v947, v948, v949, v950, v951);
  v1525[4] = v1467;
  v1525[5] = v1468;
  v1525[6] = v1469;
  v1525[0] = v1463;
  v1525[1] = v1464;
  v1525[3] = v1466;
  v1525[2] = v1465;
  v1716 = 0;
  v1528[0] = xmmword_2246654A8;
  v1528[1] = *(_OWORD *)dbl_2246654B8;
  sub_223B54204((uint64_t)v1525, 4, 1, 4, (uint64_t)&v1716, (uint64_t)v1528, COERCE_DOUBLE(0x14300000142), COERCE_DOUBLE(0x14700000146), v952, v953, v954, v955, v956, v957);
  v1527[4] = v1467;
  v1527[5] = v1468;
  v1527[6] = v1469;
  v1527[0] = v1463;
  v1527[1] = v1464;
  v1527[3] = v1466;
  v1527[2] = v1465;
  v1717 = 0;
  v1530[0] = xmmword_2246654C8;
  v1530[1] = *(_OWORD *)dbl_2246654D8;
  sub_223B54204((uint64_t)v1527, 4, 1, 5, (uint64_t)&v1717, (uint64_t)v1530, COERCE_DOUBLE(0x14A00000143), COERCE_DOUBLE(0x14E00000147), v958, v959, v960, v961, v962, v963);
  v1529[4] = v1485;
  v1529[5] = v1486;
  v1529[6] = v1487;
  v1529[0] = v1481;
  v1529[1] = v1482;
  v1529[3] = v1484;
  v1529[2] = v1483;
  v1718 = 0;
  v1532[0] = xmmword_2246654E8;
  v1532[1] = *(_OWORD *)dbl_2246654F8;
  sub_223B54204((uint64_t)v1529, 5, 0, 4, (uint64_t)&v1718, (uint64_t)v1532, COERCE_DOUBLE(0x14500000144), COERCE_DOUBLE(0x16100000160), v964, v965, v966, v967, v968, v969);
  v1531[4] = v1485;
  v1531[5] = v1486;
  v1531[6] = v1487;
  v1531[0] = v1481;
  v1531[1] = v1482;
  v1531[3] = v1484;
  v1531[2] = v1483;
  v1719 = 0;
  v1534[0] = xmmword_224665508;
  v1534[1] = *(_OWORD *)dbl_224665518;
  sub_223B54204((uint64_t)v1531, 5, 0, 5, (uint64_t)&v1719, (uint64_t)v1534, COERCE_DOUBLE(0x14C00000145), COERCE_DOUBLE(0x16800000161), v970, v971, v972, v973, v974, v975);
  v1533[4] = v1485;
  v1533[5] = v1486;
  v1533[6] = v1487;
  v1533[0] = v1481;
  v1533[1] = v1482;
  v1533[3] = v1484;
  v1533[2] = v1483;
  v1720 = 0;
  v1536[0] = xmmword_224665528;
  v1536[1] = *(_OWORD *)dbl_224665538;
  sub_223B54204((uint64_t)v1533, 5, 1, 4, (uint64_t)&v1720, (uint64_t)v1536, COERCE_DOUBLE(0x14700000146), COERCE_DOUBLE(0x16300000162), v976, v977, v978, v979, v980, v981);
  v1535[4] = v1485;
  v1535[5] = v1486;
  v1535[6] = v1487;
  v1535[0] = v1481;
  v1535[1] = v1482;
  v1535[3] = v1484;
  v1535[2] = v1483;
  v1721 = 0;
  v1538[0] = xmmword_224665548;
  v1538[1] = *(_OWORD *)dbl_224665558;
  sub_223B54204((uint64_t)v1535, 5, 1, 5, (uint64_t)&v1721, (uint64_t)v1538, COERCE_DOUBLE(0x14E00000147), COERCE_DOUBLE(0x16A00000163), v982, v983, v984, v985, v986, v987);
  v1537[4] = v1485;
  v1537[5] = v1486;
  v1537[6] = v1487;
  v1537[0] = v1481;
  v1537[1] = v1482;
  v1537[3] = v1484;
  v1537[2] = v1483;
  v1722 = 0;
  v1540[0] = xmmword_224665568;
  v1540[1] = *(_OWORD *)dbl_224665578;
  sub_223B54204((uint64_t)v1537, 4, 0, 6, (uint64_t)&v1722, (uint64_t)v1540, COERCE_DOUBLE(0x14900000148), COERCE_DOUBLE(0x14D0000014CLL), v988, v989, v990, v991, v992, v993);
  v1539[4] = v1485;
  v1539[5] = v1486;
  v1539[6] = v1487;
  v1539[0] = v1481;
  v1539[1] = v1482;
  v1539[3] = v1484;
  v1539[2] = v1483;
  v1723 = 0x100010001000100;
  v1542[0] = xmmword_224665588;
  v1542[1] = *(_OWORD *)dbl_224665598;
  sub_223B54204((uint64_t)v1539, 4, 0, 7, (uint64_t)&v1723, (uint64_t)v1542, COERCE_DOUBLE(0x10000000149), COERCE_DOUBLE(0x1040000014DLL), v994, v995, v996, v997, v998, v999);
  v1541[4] = v1503;
  v1541[5] = v1504;
  v1541[6] = v1505;
  v1541[0] = v1499;
  v1541[1] = v1500;
  v1541[3] = v1502;
  v1541[2] = v1501;
  v1724 = 0;
  v1544[0] = xmmword_2246655A8;
  v1544[1] = *(_OWORD *)dbl_2246655B8;
  sub_223B54204((uint64_t)v1541, 4, 1, 6, (uint64_t)&v1724, (uint64_t)v1544, COERCE_DOUBLE(0x14B0000014ALL), COERCE_DOUBLE(0x14F0000014ELL), v1000, v1001, v1002, v1003, v1004, v1005);
  v1543[4] = v1503;
  v1543[5] = v1504;
  v1543[6] = v1505;
  v1543[0] = v1499;
  v1543[1] = v1500;
  v1543[3] = v1502;
  v1543[2] = v1501;
  v1725 = 0x100010001000100;
  v1546[0] = xmmword_2246655C8;
  v1546[1] = *(_OWORD *)dbl_2246655D8;
  sub_223B54204((uint64_t)v1543, 4, 1, 7, (uint64_t)&v1725, (uint64_t)v1546, COERCE_DOUBLE(0x1020000014BLL), COERCE_DOUBLE(0x1060000014FLL), v1006, v1007, v1008, v1009, v1010, v1011);
  v1545[4] = v1503;
  v1545[5] = v1504;
  v1545[6] = v1505;
  v1545[0] = v1499;
  v1545[1] = v1500;
  v1545[3] = v1502;
  v1545[2] = v1501;
  v1726 = 0;
  v1548[0] = xmmword_2246655E8;
  v1548[1] = *(_OWORD *)dbl_2246655F8;
  sub_223B54204((uint64_t)v1545, 5, 0, 6, (uint64_t)&v1726, (uint64_t)v1548, COERCE_DOUBLE(0x14D0000014CLL), COERCE_DOUBLE(0x16900000168), v1012, v1013, v1014, v1015, v1016, v1017);
  v1547[4] = v1503;
  v1547[5] = v1504;
  v1547[6] = v1505;
  v1547[0] = v1499;
  v1547[1] = v1500;
  v1547[3] = v1502;
  v1547[2] = v1501;
  v1727 = 0x100010001000100;
  v1550[0] = xmmword_224665608;
  v1550[1] = *(_OWORD *)dbl_224665618;
  sub_223B54204((uint64_t)v1547, 5, 0, 7, (uint64_t)&v1727, (uint64_t)v1550, COERCE_DOUBLE(0x1040000014DLL), COERCE_DOUBLE(0x12000000169), v1018, v1019, v1020, v1021, v1022, v1023);
  v1549[4] = v1503;
  v1549[5] = v1504;
  v1549[6] = v1505;
  v1549[0] = v1499;
  v1549[1] = v1500;
  v1549[3] = v1502;
  v1549[2] = v1501;
  v1728 = 0;
  v1552[0] = xmmword_224665628;
  v1552[1] = *(_OWORD *)dbl_224665638;
  sub_223B54204((uint64_t)v1549, 5, 1, 6, (uint64_t)&v1728, (uint64_t)v1552, COERCE_DOUBLE(0x14F0000014ELL), COERCE_DOUBLE(0x16B0000016ALL), v1024, v1025, v1026, v1027, v1028, v1029);
  v1551[4] = v1503;
  v1551[5] = v1504;
  v1551[6] = v1505;
  v1551[0] = v1499;
  v1551[1] = v1500;
  v1551[3] = v1502;
  v1551[2] = v1501;
  v1729 = 0x100010001000100;
  v1554[0] = xmmword_224665648;
  v1554[1] = *(_OWORD *)dbl_224665658;
  sub_223B54204((uint64_t)v1551, 5, 1, 7, (uint64_t)&v1729, (uint64_t)v1554, COERCE_DOUBLE(0x1060000014FLL), COERCE_DOUBLE(0x1220000016BLL), v1030, v1031, v1032, v1033, v1034, v1035);
  v1553[4] = v1521;
  v1553[5] = v1522;
  v1553[6] = v1523;
  v1553[0] = v1517;
  v1553[1] = v1518;
  v1553[3] = v1520;
  v1553[2] = v1519;
  v1730 = 0;
  v1556[0] = xmmword_224665668;
  v1556[1] = *(_OWORD *)dbl_224665678;
  sub_223B54204((uint64_t)v1553, 4, 2, 4, (uint64_t)&v1730, (uint64_t)v1556, COERCE_DOUBLE(0x15100000150), COERCE_DOUBLE(0x15500000154), v1036, v1037, v1038, v1039, v1040, v1041);
  v1555[4] = v1521;
  v1555[5] = v1522;
  v1555[6] = v1523;
  v1555[0] = v1517;
  v1555[1] = v1518;
  v1555[3] = v1520;
  v1555[2] = v1519;
  v1731[0] = 0;
  v1557[0] = xmmword_224665688;
  v1557[1] = *(_OWORD *)dbl_224665698;
  sub_223B54204((uint64_t)v1555, 4, 2, 5, (uint64_t)v1731, (uint64_t)v1557, COERCE_DOUBLE(0x15800000151), COERCE_DOUBLE(0x15C00000155), v1042, v1043, v1044, v1045, v1046, v1047);
  v1556[6] = v1521;
  v1556[7] = v1522;
  v1556[8] = v1523;
  v1556[2] = v1517;
  v1556[3] = v1518;
  v1556[5] = v1520;
  v1556[4] = v1519;
  return sub_223B5C118();
}

uint64_t sub_223B5C118()
{
  __int128 *v0;
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  double v5;
  double v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  double v14;
  double v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  double v20;
  double v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  double v26;
  double v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  double v32;
  double v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  double v38;
  double v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  double v44;
  double v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  double v50;
  double v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  double v56;
  double v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  double v62;
  double v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  double v68;
  double v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  double v74;
  double v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  double v80;
  double v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  double v86;
  double v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  double v92;
  double v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  double v98;
  double v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  double v104;
  double v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  double v110;
  double v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  double v116;
  double v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  double v122;
  double v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  double v128;
  double v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  double v134;
  double v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  double v140;
  double v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  double v146;
  double v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  double v152;
  double v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  double v158;
  double v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  double v164;
  double v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  double v170;
  double v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  double v176;
  double v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  double v182;
  double v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  double v188;
  double v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  double v194;
  double v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  double v200;
  double v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  double v206;
  double v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  double v212;
  double v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  double v218;
  double v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  double v224;
  double v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  double v230;
  double v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  double v236;
  double v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  double v242;
  double v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  double v248;
  double v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  double v254;
  double v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  double v260;
  double v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  double v266;
  double v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  double v272;
  double v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  double v278;
  double v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  double v284;
  double v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  double v290;
  double v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  double v296;
  double v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  double v302;
  double v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  double v308;
  double v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  double v314;
  double v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  double v320;
  double v321;
  float32x4_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  double v326;
  double v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  double v332;
  double v333;
  float32x4_t v334;
  float32x4_t v335;
  float32x4_t v336;
  float32x4_t v337;
  double v338;
  double v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  double v344;
  double v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  double v350;
  double v351;
  float32x4_t v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x4_t v355;
  double v356;
  double v357;
  float32x4_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  double v362;
  double v363;
  float32x4_t v364;
  float32x4_t v365;
  float32x4_t v366;
  float32x4_t v367;
  double v368;
  double v369;
  float32x4_t v370;
  float32x4_t v371;
  float32x4_t v372;
  float32x4_t v373;
  double v374;
  double v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t v378;
  float32x4_t v379;
  double v380;
  double v381;
  float32x4_t v382;
  float32x4_t v383;
  float32x4_t v384;
  float32x4_t v385;
  double v386;
  double v387;
  float32x4_t v388;
  float32x4_t v389;
  float32x4_t v390;
  float32x4_t v391;
  double v392;
  double v393;
  float32x4_t v394;
  float32x4_t v395;
  float32x4_t v396;
  float32x4_t v397;
  double v398;
  double v399;
  float32x4_t v400;
  float32x4_t v401;
  float32x4_t v402;
  float32x4_t v403;
  double v404;
  double v405;
  float32x4_t v406;
  float32x4_t v407;
  float32x4_t v408;
  float32x4_t v409;
  double v410;
  double v411;
  float32x4_t v412;
  float32x4_t v413;
  float32x4_t v414;
  float32x4_t v415;
  double v416;
  double v417;
  float32x4_t v418;
  float32x4_t v419;
  float32x4_t v420;
  float32x4_t v421;
  double v422;
  double v423;
  float32x4_t v424;
  float32x4_t v425;
  float32x4_t v426;
  float32x4_t v427;
  double v428;
  double v429;
  float32x4_t v430;
  float32x4_t v431;
  float32x4_t v432;
  float32x4_t v433;
  double v434;
  double v435;
  float32x4_t v436;
  float32x4_t v437;
  float32x4_t v438;
  float32x4_t v439;
  double v440;
  double v441;
  float32x4_t v442;
  float32x4_t v443;
  float32x4_t v444;
  float32x4_t v445;
  double v446;
  double v447;
  float32x4_t v448;
  float32x4_t v449;
  float32x4_t v450;
  float32x4_t v451;
  double v452;
  double v453;
  float32x4_t v454;
  float32x4_t v455;
  float32x4_t v456;
  float32x4_t v457;
  double v458;
  double v459;
  float32x4_t v460;
  float32x4_t v461;
  float32x4_t v462;
  float32x4_t v463;
  double v464;
  double v465;
  float32x4_t v466;
  float32x4_t v467;
  float32x4_t v468;
  float32x4_t v469;
  double v470;
  double v471;
  float32x4_t v472;
  float32x4_t v473;
  float32x4_t v474;
  float32x4_t v475;
  double v476;
  double v477;
  float32x4_t v478;
  float32x4_t v479;
  float32x4_t v480;
  float32x4_t v481;
  double v482;
  double v483;
  float32x4_t v484;
  float32x4_t v485;
  float32x4_t v486;
  float32x4_t v487;
  double v488;
  double v489;
  float32x4_t v490;
  float32x4_t v491;
  float32x4_t v492;
  float32x4_t v493;
  double v494;
  double v495;
  float32x4_t v496;
  float32x4_t v497;
  float32x4_t v498;
  float32x4_t v499;
  double v500;
  double v501;
  float32x4_t v502;
  float32x4_t v503;
  float32x4_t v504;
  float32x4_t v505;
  double v506;
  double v507;
  float32x4_t v508;
  float32x4_t v509;
  float32x4_t v510;
  float32x4_t v511;
  double v512;
  double v513;
  float32x4_t v514;
  float32x4_t v515;
  float32x4_t v516;
  float32x4_t v517;
  double v518;
  double v519;
  float32x4_t v520;
  float32x4_t v521;
  float32x4_t v522;
  float32x4_t v523;
  double v524;
  double v525;
  float32x4_t v526;
  float32x4_t v527;
  float32x4_t v528;
  float32x4_t v529;
  double v530;
  double v531;
  float32x4_t v532;
  float32x4_t v533;
  float32x4_t v534;
  float32x4_t v535;
  double v536;
  double v537;
  float32x4_t v538;
  float32x4_t v539;
  float32x4_t v540;
  float32x4_t v541;
  double v542;
  double v543;
  float32x4_t v544;
  float32x4_t v545;
  float32x4_t v546;
  float32x4_t v547;
  double v548;
  double v549;
  float32x4_t v550;
  float32x4_t v551;
  float32x4_t v552;
  float32x4_t v553;
  double v554;
  double v555;
  float32x4_t v556;
  float32x4_t v557;
  float32x4_t v558;
  float32x4_t v559;
  double v560;
  double v561;
  float32x4_t v562;
  float32x4_t v563;
  float32x4_t v564;
  float32x4_t v565;
  double v566;
  double v567;
  float32x4_t v568;
  float32x4_t v569;
  float32x4_t v570;
  float32x4_t v571;
  double v572;
  double v573;
  float32x4_t v574;
  float32x4_t v575;
  float32x4_t v576;
  float32x4_t v577;
  double v578;
  double v579;
  float32x4_t v580;
  float32x4_t v581;
  float32x4_t v582;
  float32x4_t v583;
  double v584;
  double v585;
  float32x4_t v586;
  float32x4_t v587;
  float32x4_t v588;
  float32x4_t v589;
  double v590;
  double v591;
  float32x4_t v592;
  float32x4_t v593;
  float32x4_t v594;
  float32x4_t v595;
  double v596;
  double v597;
  float32x4_t v598;
  float32x4_t v599;
  float32x4_t v600;
  float32x4_t v601;
  double v602;
  double v603;
  float32x4_t v604;
  float32x4_t v605;
  float32x4_t v606;
  float32x4_t v607;
  double v608;
  double v609;
  float32x4_t v610;
  float32x4_t v611;
  float32x4_t v612;
  float32x4_t v613;
  double v614;
  double v615;
  float32x4_t v616;
  float32x4_t v617;
  float32x4_t v618;
  float32x4_t v619;
  double v620;
  double v621;
  float32x4_t v622;
  float32x4_t v623;
  float32x4_t v624;
  float32x4_t v625;
  double v626;
  double v627;
  float32x4_t v628;
  float32x4_t v629;
  float32x4_t v630;
  float32x4_t v631;
  double v632;
  double v633;
  float32x4_t v634;
  float32x4_t v635;
  float32x4_t v636;
  float32x4_t v637;
  double v638;
  double v639;
  float32x4_t v640;
  float32x4_t v641;
  float32x4_t v642;
  float32x4_t v643;
  double v644;
  double v645;
  float32x4_t v646;
  float32x4_t v647;
  float32x4_t v648;
  float32x4_t v649;
  double v650;
  double v651;
  float32x4_t v652;
  float32x4_t v653;
  float32x4_t v654;
  float32x4_t v655;
  double v656;
  double v657;
  float32x4_t v658;
  float32x4_t v659;
  float32x4_t v660;
  float32x4_t v661;
  double v662;
  double v663;
  float32x4_t v664;
  float32x4_t v665;
  float32x4_t v666;
  float32x4_t v667;
  double v668;
  double v669;
  float32x4_t v670;
  float32x4_t v671;
  float32x4_t v672;
  float32x4_t v673;
  double v674;
  double v675;
  float32x4_t v676;
  float32x4_t v677;
  float32x4_t v678;
  float32x4_t v679;
  double v680;
  double v681;
  float32x4_t v682;
  float32x4_t v683;
  float32x4_t v684;
  float32x4_t v685;
  double v686;
  double v687;
  float32x4_t v688;
  float32x4_t v689;
  float32x4_t v690;
  float32x4_t v691;
  double v692;
  double v693;
  float32x4_t v694;
  float32x4_t v695;
  float32x4_t v696;
  float32x4_t v697;
  double v698;
  double v699;
  float32x4_t v700;
  float32x4_t v701;
  float32x4_t v702;
  float32x4_t v703;
  double v704;
  double v705;
  float32x4_t v706;
  float32x4_t v707;
  float32x4_t v708;
  float32x4_t v709;
  double v710;
  double v711;
  float32x4_t v712;
  float32x4_t v713;
  float32x4_t v714;
  float32x4_t v715;
  double v716;
  double v717;
  float32x4_t v718;
  float32x4_t v719;
  float32x4_t v720;
  float32x4_t v721;
  double v722;
  double v723;
  float32x4_t v724;
  float32x4_t v725;
  float32x4_t v726;
  float32x4_t v727;
  double v728;
  double v729;
  float32x4_t v730;
  float32x4_t v731;
  float32x4_t v732;
  float32x4_t v733;
  double v734;
  double v735;
  float32x4_t v736;
  float32x4_t v737;
  float32x4_t v738;
  float32x4_t v739;
  double v740;
  double v741;
  float32x4_t v742;
  float32x4_t v743;
  float32x4_t v744;
  float32x4_t v745;
  double v746;
  double v747;
  float32x4_t v748;
  float32x4_t v749;
  float32x4_t v750;
  float32x4_t v751;
  double v752;
  double v753;
  float32x4_t v754;
  float32x4_t v755;
  float32x4_t v756;
  float32x4_t v757;
  double v758;
  double v759;
  float32x4_t v760;
  float32x4_t v761;
  float32x4_t v762;
  float32x4_t v763;
  double v764;
  double v765;
  float32x4_t v766;
  float32x4_t v767;
  float32x4_t v768;
  float32x4_t v769;
  double v770;
  double v771;
  float32x4_t v772;
  float32x4_t v773;
  float32x4_t v774;
  float32x4_t v775;
  double v776;
  double v777;
  float32x4_t v778;
  float32x4_t v779;
  float32x4_t v780;
  float32x4_t v781;
  double v782;
  double v783;
  float32x4_t v784;
  float32x4_t v785;
  float32x4_t v786;
  float32x4_t v787;
  double v788;
  double v789;
  float32x4_t v790;
  float32x4_t v791;
  float32x4_t v792;
  float32x4_t v793;
  double v794;
  double v795;
  float32x4_t v796;
  float32x4_t v797;
  float32x4_t v798;
  float32x4_t v799;
  double v800;
  double v801;
  float32x4_t v802;
  float32x4_t v803;
  float32x4_t v804;
  float32x4_t v805;
  double v806;
  double v807;
  float32x4_t v808;
  float32x4_t v809;
  float32x4_t v810;
  float32x4_t v811;
  double v812;
  double v813;
  float32x4_t v814;
  float32x4_t v815;
  float32x4_t v816;
  float32x4_t v817;
  double v818;
  double v819;
  float32x4_t v820;
  float32x4_t v821;
  float32x4_t v822;
  float32x4_t v823;
  double v824;
  double v825;
  float32x4_t v826;
  float32x4_t v827;
  float32x4_t v828;
  float32x4_t v829;
  double v830;
  double v831;
  float32x4_t v832;
  float32x4_t v833;
  float32x4_t v834;
  float32x4_t v835;
  double v836;
  double v837;
  float32x4_t v838;
  float32x4_t v839;
  float32x4_t v840;
  float32x4_t v841;
  double v842;
  double v843;
  float32x4_t v844;
  float32x4_t v845;
  float32x4_t v846;
  float32x4_t v847;
  double v848;
  double v849;
  float32x4_t v850;
  float32x4_t v851;
  float32x4_t v852;
  float32x4_t v853;
  double v854;
  double v855;
  float32x4_t v856;
  float32x4_t v857;
  float32x4_t v858;
  float32x4_t v859;
  double v860;
  double v861;
  float32x4_t v862;
  float32x4_t v863;
  float32x4_t v864;
  float32x4_t v865;
  double v866;
  double v867;
  float32x4_t v868;
  float32x4_t v869;
  float32x4_t v870;
  float32x4_t v871;
  double v872;
  double v873;
  float32x4_t v874;
  float32x4_t v875;
  float32x4_t v876;
  float32x4_t v877;
  double v878;
  double v879;
  float32x4_t v880;
  float32x4_t v881;
  float32x4_t v882;
  float32x4_t v883;
  double v884;
  double v885;
  float32x4_t v886;
  float32x4_t v887;
  float32x4_t v888;
  float32x4_t v889;
  double v890;
  double v891;
  float32x4_t v892;
  float32x4_t v893;
  float32x4_t v894;
  float32x4_t v895;
  double v896;
  double v897;
  float32x4_t v898;
  float32x4_t v899;
  float32x4_t v900;
  float32x4_t v901;
  double v902;
  double v903;
  float32x4_t v904;
  float32x4_t v905;
  float32x4_t v906;
  float32x4_t v907;
  double v908;
  double v909;
  float32x4_t v910;
  float32x4_t v911;
  float32x4_t v912;
  float32x4_t v913;
  double v914;
  double v915;
  float32x4_t v916;
  float32x4_t v917;
  float32x4_t v918;
  float32x4_t v919;
  double v920;
  double v921;
  float32x4_t v922;
  float32x4_t v923;
  float32x4_t v924;
  float32x4_t v925;
  double v926;
  double v927;
  float32x4_t v928;
  float32x4_t v929;
  float32x4_t v930;
  float32x4_t v931;
  double v932;
  double v933;
  float32x4_t v934;
  float32x4_t v935;
  float32x4_t v936;
  float32x4_t v937;
  double v938;
  double v939;
  float32x4_t v940;
  float32x4_t v941;
  float32x4_t v942;
  float32x4_t v943;
  double v944;
  double v945;
  float32x4_t v946;
  float32x4_t v947;
  float32x4_t v948;
  float32x4_t v949;
  double v950;
  double v951;
  float32x4_t v952;
  float32x4_t v953;
  float32x4_t v954;
  float32x4_t v955;
  double v956;
  double v957;
  float32x4_t v958;
  float32x4_t v959;
  float32x4_t v960;
  float32x4_t v961;
  double v962;
  double v963;
  float32x4_t v964;
  float32x4_t v965;
  float32x4_t v966;
  float32x4_t v967;
  double v968;
  double v969;
  float32x4_t v970;
  float32x4_t v971;
  float32x4_t v972;
  float32x4_t v973;
  double v974;
  double v975;
  float32x4_t v976;
  float32x4_t v977;
  float32x4_t v978;
  float32x4_t v979;
  double v980;
  double v981;
  float32x4_t v982;
  float32x4_t v983;
  float32x4_t v984;
  float32x4_t v985;
  double v986;
  double v987;
  float32x4_t v988;
  float32x4_t v989;
  float32x4_t v990;
  float32x4_t v991;
  double v992;
  double v993;
  float32x4_t v994;
  float32x4_t v995;
  float32x4_t v996;
  float32x4_t v997;
  double v998;
  double v999;
  float32x4_t v1000;
  float32x4_t v1001;
  float32x4_t v1002;
  float32x4_t v1003;
  double v1004;
  double v1005;
  float32x4_t v1006;
  float32x4_t v1007;
  float32x4_t v1008;
  float32x4_t v1009;
  double v1010;
  double v1011;
  float32x4_t v1012;
  float32x4_t v1013;
  float32x4_t v1014;
  float32x4_t v1015;
  double v1016;
  double v1017;
  float32x4_t v1018;
  float32x4_t v1019;
  float32x4_t v1020;
  float32x4_t v1021;
  double v1022;
  double v1023;
  float32x4_t v1024;
  float32x4_t v1025;
  float32x4_t v1026;
  float32x4_t v1027;
  double v1028;
  double v1029;
  float32x4_t v1030;
  float32x4_t v1031;
  float32x4_t v1032;
  float32x4_t v1033;
  double v1034;
  double v1035;
  float32x4_t v1036;
  float32x4_t v1037;
  float32x4_t v1038;
  float32x4_t v1039;
  double v1040;
  double v1041;
  float32x4_t v1042;
  float32x4_t v1043;
  float32x4_t v1044;
  float32x4_t v1045;
  double v1046;
  double v1047;
  __int128 v1049;
  __int128 v1050;
  __int128 v1051;
  __int128 v1052;
  __int128 v1053;
  __int128 v1054;
  __int128 v1055;
  _OWORD v1056[2];
  _OWORD v1057[7];
  _OWORD v1058[2];
  _OWORD v1059[7];
  _OWORD v1060[2];
  _OWORD v1061[7];
  _OWORD v1062[2];
  _OWORD v1063[7];
  _OWORD v1064[2];
  _OWORD v1065[7];
  _OWORD v1066[2];
  __int128 v1067;
  __int128 v1068;
  __int128 v1069;
  __int128 v1070;
  __int128 v1071;
  __int128 v1072;
  __int128 v1073;
  _OWORD v1074[2];
  _OWORD v1075[7];
  _OWORD v1076[2];
  _OWORD v1077[7];
  _OWORD v1078[2];
  _OWORD v1079[7];
  _OWORD v1080[2];
  _OWORD v1081[7];
  _OWORD v1082[2];
  _OWORD v1083[7];
  _OWORD v1084[2];
  __int128 v1085;
  __int128 v1086;
  __int128 v1087;
  __int128 v1088;
  __int128 v1089;
  __int128 v1090;
  __int128 v1091;
  _OWORD v1092[2];
  _OWORD v1093[7];
  _OWORD v1094[2];
  _OWORD v1095[7];
  _OWORD v1096[2];
  _OWORD v1097[7];
  _OWORD v1098[2];
  _OWORD v1099[7];
  _OWORD v1100[2];
  _OWORD v1101[7];
  _OWORD v1102[2];
  __int128 v1103;
  __int128 v1104;
  __int128 v1105;
  __int128 v1106;
  __int128 v1107;
  __int128 v1108;
  __int128 v1109;
  _OWORD v1110[2];
  _OWORD v1111[7];
  _OWORD v1112[2];
  _OWORD v1113[7];
  _OWORD v1114[2];
  _OWORD v1115[7];
  _OWORD v1116[2];
  _OWORD v1117[7];
  _OWORD v1118[2];
  _OWORD v1119[7];
  _OWORD v1120[2];
  __int128 v1121;
  __int128 v1122;
  __int128 v1123;
  __int128 v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  _OWORD v1128[2];
  _OWORD v1129[7];
  _OWORD v1130[2];
  _OWORD v1131[7];
  _OWORD v1132[2];
  _OWORD v1133[7];
  _OWORD v1134[2];
  _OWORD v1135[7];
  _OWORD v1136[2];
  _OWORD v1137[7];
  _OWORD v1138[2];
  __int128 v1139;
  __int128 v1140;
  __int128 v1141;
  __int128 v1142;
  __int128 v1143;
  __int128 v1144;
  __int128 v1145;
  _OWORD v1146[2];
  _OWORD v1147[7];
  _OWORD v1148[2];
  _OWORD v1149[7];
  _OWORD v1150[2];
  _OWORD v1151[7];
  _OWORD v1152[2];
  _OWORD v1153[7];
  _OWORD v1154[2];
  _OWORD v1155[7];
  _OWORD v1156[2];
  __int128 v1157;
  __int128 v1158;
  __int128 v1159;
  __int128 v1160;
  __int128 v1161;
  __int128 v1162;
  __int128 v1163;
  _OWORD v1164[2];
  _OWORD v1165[7];
  _OWORD v1166[2];
  _OWORD v1167[7];
  _OWORD v1168[2];
  _OWORD v1169[7];
  _OWORD v1170[2];
  _OWORD v1171[7];
  _OWORD v1172[2];
  _OWORD v1173[7];
  _OWORD v1174[2];
  __int128 v1175;
  __int128 v1176;
  __int128 v1177;
  __int128 v1178;
  __int128 v1179;
  __int128 v1180;
  __int128 v1181;
  _OWORD v1182[2];
  _OWORD v1183[7];
  _OWORD v1184[2];
  _OWORD v1185[7];
  _OWORD v1186[2];
  _OWORD v1187[7];
  _OWORD v1188[2];
  _OWORD v1189[7];
  _OWORD v1190[2];
  _OWORD v1191[7];
  _OWORD v1192[2];
  __int128 v1193;
  __int128 v1194;
  __int128 v1195;
  __int128 v1196;
  __int128 v1197;
  __int128 v1198;
  __int128 v1199;
  _OWORD v1200[2];
  _OWORD v1201[7];
  _OWORD v1202[2];
  _OWORD v1203[7];
  _OWORD v1204[2];
  _OWORD v1205[7];
  _OWORD v1206[2];
  _OWORD v1207[7];
  _OWORD v1208[2];
  _OWORD v1209[7];
  _OWORD v1210[2];
  __int128 v1211;
  __int128 v1212;
  __int128 v1213;
  __int128 v1214;
  __int128 v1215;
  __int128 v1216;
  __int128 v1217;
  _OWORD v1218[2];
  _OWORD v1219[7];
  _OWORD v1220[2];
  _OWORD v1221[7];
  _OWORD v1222[2];
  _OWORD v1223[7];
  _OWORD v1224[2];
  _OWORD v1225[7];
  _OWORD v1226[2];
  _OWORD v1227[7];
  _OWORD v1228[2];
  __int128 v1229;
  __int128 v1230;
  __int128 v1231;
  __int128 v1232;
  __int128 v1233;
  __int128 v1234;
  __int128 v1235;
  _OWORD v1236[2];
  _OWORD v1237[7];
  _OWORD v1238[2];
  _OWORD v1239[7];
  _OWORD v1240[2];
  _OWORD v1241[7];
  _OWORD v1242[2];
  _OWORD v1243[7];
  _OWORD v1244[2];
  _OWORD v1245[7];
  _OWORD v1246[2];
  __int128 v1247;
  __int128 v1248;
  __int128 v1249;
  __int128 v1250;
  __int128 v1251;
  __int128 v1252;
  __int128 v1253;
  _OWORD v1254[2];
  _OWORD v1255[7];
  _OWORD v1256[2];
  _OWORD v1257[7];
  _OWORD v1258[2];
  _OWORD v1259[7];
  _OWORD v1260[2];
  _OWORD v1261[7];
  _OWORD v1262[2];
  _OWORD v1263[7];
  _OWORD v1264[2];
  __int128 v1265;
  __int128 v1266;
  __int128 v1267;
  __int128 v1268;
  __int128 v1269;
  __int128 v1270;
  __int128 v1271;
  _OWORD v1272[2];
  _OWORD v1273[7];
  _OWORD v1274[2];
  _OWORD v1275[7];
  _OWORD v1276[2];
  _OWORD v1277[7];
  _OWORD v1278[2];
  _OWORD v1279[7];
  _OWORD v1280[2];
  _OWORD v1281[7];
  _OWORD v1282[2];
  __int128 v1283;
  __int128 v1284;
  __int128 v1285;
  __int128 v1286;
  __int128 v1287;
  __int128 v1288;
  __int128 v1289;
  _OWORD v1290[2];
  _OWORD v1291[7];
  _OWORD v1292[2];
  _OWORD v1293[7];
  _OWORD v1294[2];
  _OWORD v1295[7];
  _OWORD v1296[2];
  _OWORD v1297[7];
  _OWORD v1298[2];
  _OWORD v1299[7];
  _OWORD v1300[2];
  __int128 v1301;
  __int128 v1302;
  __int128 v1303;
  __int128 v1304;
  __int128 v1305;
  __int128 v1306;
  __int128 v1307;
  _OWORD v1308[2];
  _OWORD v1309[7];
  _OWORD v1310[2];
  _OWORD v1311[7];
  _OWORD v1312[2];
  _OWORD v1313[7];
  _OWORD v1314[2];
  _OWORD v1315[7];
  _OWORD v1316[2];
  _OWORD v1317[7];
  _OWORD v1318[2];
  __int128 v1319;
  __int128 v1320;
  __int128 v1321;
  __int128 v1322;
  __int128 v1323;
  __int128 v1324;
  __int128 v1325;
  _OWORD v1326[2];
  _OWORD v1327[7];
  _OWORD v1328[2];
  _OWORD v1329[7];
  _OWORD v1330[2];
  _OWORD v1331[7];
  _OWORD v1332[2];
  _OWORD v1333[7];
  _OWORD v1334[2];
  _OWORD v1335[7];
  _OWORD v1336[2];
  __int128 v1337;
  __int128 v1338;
  __int128 v1339;
  __int128 v1340;
  __int128 v1341;
  __int128 v1342;
  __int128 v1343;
  _OWORD v1344[2];
  _OWORD v1345[7];
  _OWORD v1346[2];
  _OWORD v1347[7];
  _OWORD v1348[2];
  _OWORD v1349[7];
  _OWORD v1350[2];
  _OWORD v1351[7];
  _OWORD v1352[2];
  _OWORD v1353[7];
  _OWORD v1354[2];
  __int128 v1355;
  __int128 v1356;
  __int128 v1357;
  __int128 v1358;
  __int128 v1359;
  __int128 v1360;
  __int128 v1361;
  _OWORD v1362[2];
  _OWORD v1363[7];
  _OWORD v1364[2];
  _OWORD v1365[7];
  _OWORD v1366[2];
  _OWORD v1367[7];
  _OWORD v1368[2];
  _OWORD v1369[7];
  _OWORD v1370[2];
  _OWORD v1371[7];
  _OWORD v1372[2];
  __int128 v1373;
  __int128 v1374;
  __int128 v1375;
  __int128 v1376;
  __int128 v1377;
  __int128 v1378;
  __int128 v1379;
  _OWORD v1380[2];
  _OWORD v1381[7];
  _OWORD v1382[2];
  _OWORD v1383[7];
  _OWORD v1384[2];
  _OWORD v1385[7];
  _OWORD v1386[2];
  _OWORD v1387[7];
  _OWORD v1388[2];
  _OWORD v1389[7];
  _OWORD v1390[2];
  __int128 v1391;
  __int128 v1392;
  __int128 v1393;
  __int128 v1394;
  __int128 v1395;
  __int128 v1396;
  __int128 v1397;
  _OWORD v1398[2];
  _OWORD v1399[7];
  _OWORD v1400[2];
  _OWORD v1401[7];
  _OWORD v1402[2];
  _OWORD v1403[7];
  _OWORD v1404[2];
  _OWORD v1405[7];
  _OWORD v1406[2];
  _OWORD v1407[7];
  _OWORD v1408[2];
  __int128 v1409;
  __int128 v1410;
  __int128 v1411;
  __int128 v1412;
  __int128 v1413;
  __int128 v1414;
  __int128 v1415;
  _OWORD v1416[2];
  _OWORD v1417[7];
  _OWORD v1418[2];
  _OWORD v1419[7];
  _OWORD v1420[2];
  _OWORD v1421[7];
  _OWORD v1422[2];
  _OWORD v1423[7];
  _OWORD v1424[2];
  _OWORD v1425[7];
  _OWORD v1426[2];
  __int128 v1427;
  __int128 v1428;
  __int128 v1429;
  __int128 v1430;
  __int128 v1431;
  __int128 v1432;
  __int128 v1433;
  _OWORD v1434[2];
  _OWORD v1435[7];
  _OWORD v1436[2];
  _OWORD v1437[7];
  _OWORD v1438[2];
  _OWORD v1439[7];
  _OWORD v1440[2];
  _OWORD v1441[7];
  _OWORD v1442[2];
  _OWORD v1443[7];
  _OWORD v1444[2];
  __int128 v1445;
  __int128 v1446;
  __int128 v1447;
  __int128 v1448;
  __int128 v1449;
  __int128 v1450;
  __int128 v1451;
  _OWORD v1452[2];
  _OWORD v1453[7];
  _OWORD v1454[2];
  _OWORD v1455[7];
  _OWORD v1456[2];
  _OWORD v1457[7];
  _OWORD v1458[2];
  _OWORD v1459[7];
  _OWORD v1460[2];
  _OWORD v1461[7];
  _OWORD v1462[2];
  __int128 v1463;
  __int128 v1464;
  __int128 v1465;
  __int128 v1466;
  __int128 v1467;
  __int128 v1468;
  __int128 v1469;
  _OWORD v1470[2];
  _OWORD v1471[7];
  _OWORD v1472[2];
  _OWORD v1473[7];
  _OWORD v1474[2];
  _OWORD v1475[7];
  _OWORD v1476[2];
  _OWORD v1477[7];
  _OWORD v1478[2];
  _OWORD v1479[7];
  _OWORD v1480[2];
  __int128 v1481;
  __int128 v1482;
  __int128 v1483;
  __int128 v1484;
  __int128 v1485;
  __int128 v1486;
  __int128 v1487;
  _OWORD v1488[2];
  _OWORD v1489[7];
  _OWORD v1490[2];
  _OWORD v1491[7];
  _OWORD v1492[2];
  _OWORD v1493[7];
  _OWORD v1494[2];
  _OWORD v1495[7];
  _OWORD v1496[2];
  _OWORD v1497[7];
  _OWORD v1498[2];
  __int128 v1499;
  __int128 v1500;
  __int128 v1501;
  __int128 v1502;
  __int128 v1503;
  __int128 v1504;
  __int128 v1505;
  _OWORD v1506[2];
  _OWORD v1507[7];
  _OWORD v1508[2];
  _OWORD v1509[7];
  _OWORD v1510[2];
  _OWORD v1511[7];
  _OWORD v1512[2];
  _OWORD v1513[7];
  _OWORD v1514[2];
  _OWORD v1515[7];
  _OWORD v1516[2];
  __int128 v1517;
  __int128 v1518;
  __int128 v1519;
  __int128 v1520;
  __int128 v1521;
  __int128 v1522;
  __int128 v1523;
  _OWORD v1524[2];
  _OWORD v1525[7];
  _OWORD v1526[2];
  _OWORD v1527[7];
  _OWORD v1528[2];
  _OWORD v1529[7];
  _OWORD v1530[2];
  _OWORD v1531[7];
  _OWORD v1532[2];
  _OWORD v1533[7];
  _OWORD v1534[2];
  _OWORD v1535[7];
  _OWORD v1536[2];
  _OWORD v1537[7];
  _OWORD v1538[2];
  _OWORD v1539[7];
  _OWORD v1540[2];
  _OWORD v1541[7];
  _OWORD v1542[2];
  _OWORD v1543[7];
  _OWORD v1544[2];
  _OWORD v1545[7];
  _OWORD v1546[2];
  _OWORD v1547[7];
  _OWORD v1548[2];
  _OWORD v1549[7];
  _OWORD v1550[2];
  _OWORD v1551[7];
  _OWORD v1552[2];
  _OWORD v1553[7];
  _OWORD v1554[2];
  _OWORD v1555[7];
  _OWORD v1556[2];
  _OWORD v1557[2];
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  uint64_t v1611;
  uint64_t v1612;
  uint64_t v1613;
  uint64_t v1614;
  uint64_t v1615;
  uint64_t v1616;
  uint64_t v1617;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t v1715;
  uint64_t v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  uint64_t v1723;
  uint64_t v1724;
  uint64_t v1725;
  uint64_t v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  _QWORD v1731[2];

  v0 = (__int128 *)MEMORY[0x24BDAC7A8]();
  v1731[1] = *MEMORY[0x24BDAC8D0];
  v1558 = 0;
  v1056[0] = xmmword_2246656A8;
  v1056[1] = *(_OWORD *)dbl_2246656B8;
  sub_223B54204((uint64_t)v0, 4, 3, 4, (uint64_t)&v1558, (uint64_t)v1056, COERCE_DOUBLE(0x15300000152), COERCE_DOUBLE(0x15700000156), v1, v2, v3, v4, v5, v6);
  v7 = v0[5];
  v1053 = v0[4];
  v1054 = v7;
  v1055 = v0[6];
  v8 = v0[1];
  v1049 = *v0;
  v1050 = v8;
  v9 = v0[3];
  v1051 = v0[2];
  v1052 = v9;
  v1559 = 0;
  v1058[0] = xmmword_2246656C8;
  v1058[1] = *(_OWORD *)dbl_2246656D8;
  sub_223B54204((uint64_t)&v1049, 4, 3, 5, (uint64_t)&v1559, (uint64_t)v1058, COERCE_DOUBLE(0x15A00000153), COERCE_DOUBLE(0x15E00000157), v10, v11, v12, v13, v14, v15);
  v1057[4] = v1053;
  v1057[5] = v1054;
  v1057[6] = v1055;
  v1057[0] = v1049;
  v1057[1] = v1050;
  v1057[2] = v1051;
  v1057[3] = v1052;
  v1560 = 0;
  v1060[0] = xmmword_2246656E8;
  v1060[1] = *(_OWORD *)dbl_2246656F8;
  sub_223B54204((uint64_t)v1057, 5, 2, 4, (uint64_t)&v1560, (uint64_t)v1060, COERCE_DOUBLE(0x15500000154), COERCE_DOUBLE(0x17100000170), v16, v17, v18, v19, v20, v21);
  v1059[4] = v1053;
  v1059[5] = v1054;
  v1059[6] = v1055;
  v1059[0] = v1049;
  v1059[1] = v1050;
  v1059[2] = v1051;
  v1059[3] = v1052;
  v1561 = 0;
  v1062[0] = xmmword_224665708;
  v1062[1] = *(_OWORD *)dbl_224665718;
  sub_223B54204((uint64_t)v1059, 5, 2, 5, (uint64_t)&v1561, (uint64_t)v1062, COERCE_DOUBLE(0x15C00000155), COERCE_DOUBLE(0x17800000171), v22, v23, v24, v25, v26, v27);
  v1061[4] = v1053;
  v1061[5] = v1054;
  v1061[6] = v1055;
  v1061[0] = v1049;
  v1061[1] = v1050;
  v1061[2] = v1051;
  v1061[3] = v1052;
  v1562 = 0;
  v1064[0] = xmmword_224665728;
  v1064[1] = *(_OWORD *)dbl_224665738;
  sub_223B54204((uint64_t)v1061, 5, 3, 4, (uint64_t)&v1562, (uint64_t)v1064, COERCE_DOUBLE(0x15700000156), COERCE_DOUBLE(0x17300000172), v28, v29, v30, v31, v32, v33);
  v1063[4] = v1053;
  v1063[5] = v1054;
  v1063[6] = v1055;
  v1063[0] = v1049;
  v1063[1] = v1050;
  v1063[2] = v1051;
  v1063[3] = v1052;
  v1563 = 0;
  v1066[0] = xmmword_224665748;
  v1066[1] = *(_OWORD *)dbl_224665758;
  sub_223B54204((uint64_t)v1063, 5, 3, 5, (uint64_t)&v1563, (uint64_t)v1066, COERCE_DOUBLE(0x15E00000157), COERCE_DOUBLE(0x17A00000173), v34, v35, v36, v37, v38, v39);
  v1065[4] = v1053;
  v1065[5] = v1054;
  v1065[6] = v1055;
  v1065[0] = v1049;
  v1065[1] = v1050;
  v1065[2] = v1051;
  v1065[3] = v1052;
  v1564 = 0;
  v1074[0] = xmmword_224665768;
  v1074[1] = *(_OWORD *)dbl_224665778;
  sub_223B54204((uint64_t)v1065, 4, 2, 6, (uint64_t)&v1564, (uint64_t)v1074, COERCE_DOUBLE(0x15900000158), COERCE_DOUBLE(0x15D0000015CLL), v40, v41, v42, v43, v44, v45);
  v1071 = v1053;
  v1072 = v1054;
  v1073 = v1055;
  v1067 = v1049;
  v1068 = v1050;
  v1069 = v1051;
  v1070 = v1052;
  v1565 = 0x100010001000100;
  v1076[0] = xmmword_224665788;
  v1076[1] = *(_OWORD *)dbl_224665798;
  sub_223B54204((uint64_t)&v1067, 4, 2, 7, (uint64_t)&v1565, (uint64_t)v1076, COERCE_DOUBLE(0x11000000159), COERCE_DOUBLE(0x1140000015DLL), v46, v47, v48, v49, v50, v51);
  v1075[4] = v1053;
  v1075[5] = v1054;
  v1075[6] = v1055;
  v1075[0] = v1049;
  v1075[1] = v1050;
  v1075[3] = v1052;
  v1075[2] = v1051;
  v1566 = 0;
  v1078[0] = xmmword_2246657A8;
  v1078[1] = *(_OWORD *)dbl_2246657B8;
  sub_223B54204((uint64_t)v1075, 4, 3, 6, (uint64_t)&v1566, (uint64_t)v1078, COERCE_DOUBLE(0x15B0000015ALL), COERCE_DOUBLE(0x15F0000015ELL), v52, v53, v54, v55, v56, v57);
  v1077[4] = v1053;
  v1077[5] = v1054;
  v1077[6] = v1055;
  v1077[0] = v1049;
  v1077[1] = v1050;
  v1077[3] = v1052;
  v1077[2] = v1051;
  v1567 = 0x100010001000100;
  v1080[0] = xmmword_2246657C8;
  v1080[1] = *(_OWORD *)dbl_2246657D8;
  sub_223B54204((uint64_t)v1077, 4, 3, 7, (uint64_t)&v1567, (uint64_t)v1080, COERCE_DOUBLE(0x1120000015BLL), COERCE_DOUBLE(0x1160000015FLL), v58, v59, v60, v61, v62, v63);
  v1079[4] = v1053;
  v1079[5] = v1054;
  v1079[6] = v1055;
  v1079[0] = v1049;
  v1079[1] = v1050;
  v1079[3] = v1052;
  v1079[2] = v1051;
  v1568 = 0;
  v1082[0] = xmmword_2246657E8;
  v1082[1] = *(_OWORD *)dbl_2246657F8;
  sub_223B54204((uint64_t)v1079, 5, 2, 6, (uint64_t)&v1568, (uint64_t)v1082, COERCE_DOUBLE(0x15D0000015CLL), COERCE_DOUBLE(0x17900000178), v64, v65, v66, v67, v68, v69);
  v1081[4] = v1053;
  v1081[5] = v1054;
  v1081[6] = v1055;
  v1081[0] = v1049;
  v1081[1] = v1050;
  v1081[3] = v1052;
  v1081[2] = v1051;
  v1569 = 0x100010001000100;
  v1084[0] = xmmword_224665808;
  v1084[1] = *(_OWORD *)dbl_224665818;
  sub_223B54204((uint64_t)v1081, 5, 2, 7, (uint64_t)&v1569, (uint64_t)v1084, COERCE_DOUBLE(0x1140000015DLL), COERCE_DOUBLE(0x13000000179), v70, v71, v72, v73, v74, v75);
  v1083[4] = v1053;
  v1083[5] = v1054;
  v1083[6] = v1055;
  v1083[0] = v1049;
  v1083[1] = v1050;
  v1083[3] = v1052;
  v1083[2] = v1051;
  v1570 = 0;
  v1092[0] = xmmword_224665828;
  v1092[1] = *(_OWORD *)dbl_224665838;
  sub_223B54204((uint64_t)v1083, 5, 3, 6, (uint64_t)&v1570, (uint64_t)v1092, COERCE_DOUBLE(0x15F0000015ELL), COERCE_DOUBLE(0x17B0000017ALL), v76, v77, v78, v79, v80, v81);
  v1089 = v1053;
  v1090 = v1054;
  v1091 = v1055;
  v1085 = v1049;
  v1086 = v1050;
  v1088 = v1052;
  v1087 = v1051;
  v1571 = 0x100010001000100;
  v1094[0] = xmmword_224665848;
  v1094[1] = *(_OWORD *)dbl_224665858;
  sub_223B54204((uint64_t)&v1085, 5, 3, 7, (uint64_t)&v1571, (uint64_t)v1094, COERCE_DOUBLE(0x1160000015FLL), COERCE_DOUBLE(0x1320000017BLL), v82, v83, v84, v85, v86, v87);
  v1093[4] = v1053;
  v1093[5] = v1054;
  v1093[6] = v1055;
  v1093[0] = v1049;
  v1093[1] = v1050;
  v1093[3] = v1052;
  v1093[2] = v1051;
  v1572 = 0;
  v1096[0] = xmmword_224665868;
  v1096[1] = *(_OWORD *)dbl_224665878;
  sub_223B54204((uint64_t)v1093, 6, 0, 4, (uint64_t)&v1572, (uint64_t)v1096, COERCE_DOUBLE(0x16100000160), COERCE_DOUBLE(0x16500000164), v88, v89, v90, v91, v92, v93);
  v1095[4] = v1053;
  v1095[5] = v1054;
  v1095[6] = v1055;
  v1095[0] = v1049;
  v1095[1] = v1050;
  v1095[3] = v1052;
  v1095[2] = v1051;
  v1573 = 0;
  v1098[0] = xmmword_224665888;
  v1098[1] = *(_OWORD *)dbl_224665898;
  sub_223B54204((uint64_t)v1095, 6, 0, 5, (uint64_t)&v1573, (uint64_t)v1098, COERCE_DOUBLE(0x16800000161), COERCE_DOUBLE(0x16C00000165), v94, v95, v96, v97, v98, v99);
  v1097[4] = v1053;
  v1097[5] = v1054;
  v1097[6] = v1055;
  v1097[0] = v1049;
  v1097[1] = v1050;
  v1097[3] = v1052;
  v1097[2] = v1051;
  v1574 = 0;
  v1100[0] = xmmword_2246658A8;
  v1100[1] = *(_OWORD *)dbl_2246658B8;
  sub_223B54204((uint64_t)v1097, 6, 1, 4, (uint64_t)&v1574, (uint64_t)v1100, COERCE_DOUBLE(0x16300000162), COERCE_DOUBLE(0x16700000166), v100, v101, v102, v103, v104, v105);
  v1099[4] = v1053;
  v1099[5] = v1054;
  v1099[6] = v1055;
  v1099[0] = v1049;
  v1099[1] = v1050;
  v1099[3] = v1052;
  v1099[2] = v1051;
  v1575 = 0;
  v1102[0] = xmmword_2246658C8;
  v1102[1] = *(_OWORD *)dbl_2246658D8;
  sub_223B54204((uint64_t)v1099, 6, 1, 5, (uint64_t)&v1575, (uint64_t)v1102, COERCE_DOUBLE(0x16A00000163), COERCE_DOUBLE(0x16E00000167), v106, v107, v108, v109, v110, v111);
  v1101[4] = v1053;
  v1101[5] = v1054;
  v1101[6] = v1055;
  v1101[0] = v1049;
  v1101[1] = v1050;
  v1101[3] = v1052;
  v1101[2] = v1051;
  v1576 = 0x404040400000000;
  v1110[0] = xmmword_2246658E8;
  v1110[1] = *(_OWORD *)dbl_2246658F8;
  sub_223B54204((uint64_t)v1101, 7, 0, 4, (uint64_t)&v1576, (uint64_t)v1110, COERCE_DOUBLE(0x16500000164), COERCE_DOUBLE(0x4100000040), v112, v113, v114, v115, v116, v117);
  v1107 = v1053;
  v1108 = v1054;
  v1109 = v1055;
  v1103 = v1049;
  v1104 = v1050;
  v1106 = v1052;
  v1105 = v1051;
  v1577 = 0x404040400000000;
  v1112[0] = xmmword_224665908;
  v1112[1] = *(_OWORD *)dbl_224665918;
  sub_223B54204((uint64_t)&v1103, 7, 0, 5, (uint64_t)&v1577, (uint64_t)v1112, COERCE_DOUBLE(0x16C00000165), COERCE_DOUBLE(0x4800000041), v118, v119, v120, v121, v122, v123);
  v1111[4] = v1053;
  v1111[5] = v1054;
  v1111[6] = v1055;
  v1111[0] = v1049;
  v1111[1] = v1050;
  v1111[3] = v1052;
  v1111[2] = v1051;
  v1578 = 0x404040400000000;
  v1114[0] = xmmword_224665928;
  v1114[1] = *(_OWORD *)dbl_224665938;
  sub_223B54204((uint64_t)v1111, 7, 1, 4, (uint64_t)&v1578, (uint64_t)v1114, COERCE_DOUBLE(0x16700000166), COERCE_DOUBLE(0x4300000042), v124, v125, v126, v127, v128, v129);
  v1113[4] = v1053;
  v1113[5] = v1054;
  v1113[6] = v1055;
  v1113[0] = v1049;
  v1113[1] = v1050;
  v1113[3] = v1052;
  v1113[2] = v1051;
  v1579 = 0x404040400000000;
  v1116[0] = xmmword_224665948;
  v1116[1] = *(_OWORD *)dbl_224665958;
  sub_223B54204((uint64_t)v1113, 7, 1, 5, (uint64_t)&v1579, (uint64_t)v1116, COERCE_DOUBLE(0x16E00000167), COERCE_DOUBLE(0x4A00000043), v130, v131, v132, v133, v134, v135);
  v1115[4] = v1071;
  v1115[5] = v1072;
  v1115[6] = v1073;
  v1115[0] = v1067;
  v1115[1] = v1068;
  v1115[3] = v1070;
  v1115[2] = v1069;
  v1580 = 0;
  v1118[0] = xmmword_224665968;
  v1118[1] = *(_OWORD *)dbl_224665978;
  sub_223B54204((uint64_t)v1115, 6, 0, 6, (uint64_t)&v1580, (uint64_t)v1118, COERCE_DOUBLE(0x16900000168), COERCE_DOUBLE(0x16D0000016CLL), v136, v137, v138, v139, v140, v141);
  v1117[4] = v1071;
  v1117[5] = v1072;
  v1117[6] = v1073;
  v1117[0] = v1067;
  v1117[1] = v1068;
  v1117[3] = v1070;
  v1117[2] = v1069;
  v1581 = 0x100010001000100;
  v1120[0] = xmmword_224665988;
  v1120[1] = *(_OWORD *)dbl_224665998;
  sub_223B54204((uint64_t)v1117, 6, 0, 7, (uint64_t)&v1581, (uint64_t)v1120, COERCE_DOUBLE(0x12000000169), COERCE_DOUBLE(0x1240000016DLL), v142, v143, v144, v145, v146, v147);
  v1119[4] = v1071;
  v1119[5] = v1072;
  v1119[6] = v1073;
  v1119[0] = v1067;
  v1119[1] = v1068;
  v1119[3] = v1070;
  v1119[2] = v1069;
  v1582 = 0;
  v1128[0] = xmmword_2246659A8;
  v1128[1] = *(_OWORD *)dbl_2246659B8;
  sub_223B54204((uint64_t)v1119, 6, 1, 6, (uint64_t)&v1582, (uint64_t)v1128, COERCE_DOUBLE(0x16B0000016ALL), COERCE_DOUBLE(0x16F0000016ELL), v148, v149, v150, v151, v152, v153);
  v1125 = v1071;
  v1126 = v1072;
  v1127 = v1073;
  v1121 = v1067;
  v1122 = v1068;
  v1124 = v1070;
  v1123 = v1069;
  v1583 = 0x100010001000100;
  v1130[0] = xmmword_2246659C8;
  v1130[1] = *(_OWORD *)dbl_2246659D8;
  sub_223B54204((uint64_t)&v1121, 6, 1, 7, (uint64_t)&v1583, (uint64_t)v1130, COERCE_DOUBLE(0x1220000016BLL), COERCE_DOUBLE(0x1260000016FLL), v154, v155, v156, v157, v158, v159);
  v1129[4] = v1071;
  v1129[5] = v1072;
  v1129[6] = v1073;
  v1129[0] = v1067;
  v1129[1] = v1068;
  v1129[3] = v1070;
  v1129[2] = v1069;
  v1584 = 0x404040400000000;
  v1132[0] = xmmword_2246659E8;
  v1132[1] = *(_OWORD *)dbl_2246659F8;
  sub_223B54204((uint64_t)v1129, 7, 0, 6, (uint64_t)&v1584, (uint64_t)v1132, COERCE_DOUBLE(0x16D0000016CLL), COERCE_DOUBLE(0x4900000048), v160, v161, v162, v163, v164, v165);
  v1131[4] = v1071;
  v1131[5] = v1072;
  v1131[6] = v1073;
  v1131[0] = v1067;
  v1131[1] = v1068;
  v1131[3] = v1070;
  v1131[2] = v1069;
  v1585 = 0x504050401000100;
  v1134[0] = xmmword_224665A08;
  v1134[1] = *(_OWORD *)dbl_224665A18;
  sub_223B54204((uint64_t)v1131, 7, 0, 7, (uint64_t)&v1585, (uint64_t)v1134, COERCE_DOUBLE(0x1240000016DLL), COERCE_DOUBLE(73), v166, v167, v168, v169, v170, v171);
  v1133[4] = v1089;
  v1133[5] = v1090;
  v1133[6] = v1091;
  v1133[0] = v1085;
  v1133[1] = v1086;
  v1133[3] = v1088;
  v1133[2] = v1087;
  v1586 = 0x404040400000000;
  v1136[0] = xmmword_224665A28;
  v1136[1] = *(_OWORD *)dbl_224665A38;
  sub_223B54204((uint64_t)v1133, 7, 1, 6, (uint64_t)&v1586, (uint64_t)v1136, COERCE_DOUBLE(0x16F0000016ELL), COERCE_DOUBLE(0x4B0000004ALL), v172, v173, v174, v175, v176, v177);
  v1135[4] = v1089;
  v1135[5] = v1090;
  v1135[6] = v1091;
  v1135[0] = v1085;
  v1135[1] = v1086;
  v1135[3] = v1088;
  v1135[2] = v1087;
  v1587 = 0x504050401000100;
  v1138[0] = xmmword_224665A48;
  v1138[1] = *(_OWORD *)dbl_224665A58;
  sub_223B54204((uint64_t)v1135, 7, 1, 7, (uint64_t)&v1587, (uint64_t)v1138, COERCE_DOUBLE(0x1260000016FLL), COERCE_DOUBLE(0x20000004BLL), v178, v179, v180, v181, v182, v183);
  v1137[4] = v1089;
  v1137[5] = v1090;
  v1137[6] = v1091;
  v1137[0] = v1085;
  v1137[1] = v1086;
  v1137[3] = v1088;
  v1137[2] = v1087;
  v1588 = 0;
  v1146[0] = xmmword_224665A68;
  v1146[1] = *(_OWORD *)dbl_224665A78;
  sub_223B54204((uint64_t)v1137, 6, 2, 4, (uint64_t)&v1588, (uint64_t)v1146, COERCE_DOUBLE(0x17100000170), COERCE_DOUBLE(0x17500000174), v184, v185, v186, v187, v188, v189);
  v1143 = v1089;
  v1144 = v1090;
  v1145 = v1091;
  v1139 = v1085;
  v1140 = v1086;
  v1142 = v1088;
  v1141 = v1087;
  v1589 = 0;
  v1148[0] = xmmword_224665A88;
  v1148[1] = *(_OWORD *)dbl_224665A98;
  sub_223B54204((uint64_t)&v1139, 6, 2, 5, (uint64_t)&v1589, (uint64_t)v1148, COERCE_DOUBLE(0x17800000171), COERCE_DOUBLE(0x17C00000175), v190, v191, v192, v193, v194, v195);
  v1147[4] = v1089;
  v1147[5] = v1090;
  v1147[6] = v1091;
  v1147[0] = v1085;
  v1147[1] = v1086;
  v1147[3] = v1088;
  v1147[2] = v1087;
  v1590 = 0;
  v1150[0] = xmmword_224665AA8;
  v1150[1] = *(_OWORD *)dbl_224665AB8;
  sub_223B54204((uint64_t)v1147, 6, 3, 4, (uint64_t)&v1590, (uint64_t)v1150, COERCE_DOUBLE(0x17300000172), COERCE_DOUBLE(0x17700000176), v196, v197, v198, v199, v200, v201);
  v1149[4] = v1089;
  v1149[5] = v1090;
  v1149[6] = v1091;
  v1149[0] = v1085;
  v1149[1] = v1086;
  v1149[3] = v1088;
  v1149[2] = v1087;
  v1591 = 0;
  v1152[0] = xmmword_224665AC8;
  v1152[1] = *(_OWORD *)dbl_224665AD8;
  sub_223B54204((uint64_t)v1149, 6, 3, 5, (uint64_t)&v1591, (uint64_t)v1152, COERCE_DOUBLE(0x17A00000173), COERCE_DOUBLE(0x17E00000177), v202, v203, v204, v205, v206, v207);
  v1151[4] = v1107;
  v1151[5] = v1108;
  v1151[6] = v1109;
  v1151[0] = v1103;
  v1151[1] = v1104;
  v1151[3] = v1106;
  v1151[2] = v1105;
  v1592 = 0x404040400000000;
  v1154[0] = xmmword_224665AE8;
  v1154[1] = *(_OWORD *)dbl_224665AF8;
  sub_223B54204((uint64_t)v1151, 7, 2, 4, (uint64_t)&v1592, (uint64_t)v1154, COERCE_DOUBLE(0x17500000174), COERCE_DOUBLE(0x5100000050), v208, v209, v210, v211, v212, v213);
  v1153[4] = v1107;
  v1153[5] = v1108;
  v1153[6] = v1109;
  v1153[0] = v1103;
  v1153[1] = v1104;
  v1153[3] = v1106;
  v1153[2] = v1105;
  v1593 = 0x404040400000000;
  v1156[0] = xmmword_224665B08;
  v1156[1] = *(_OWORD *)dbl_224665B18;
  sub_223B54204((uint64_t)v1153, 7, 2, 5, (uint64_t)&v1593, (uint64_t)v1156, COERCE_DOUBLE(0x17C00000175), COERCE_DOUBLE(0x5800000051), v214, v215, v216, v217, v218, v219);
  v1155[4] = v1107;
  v1155[5] = v1108;
  v1155[6] = v1109;
  v1155[0] = v1103;
  v1155[1] = v1104;
  v1155[3] = v1106;
  v1155[2] = v1105;
  v1594 = 0x404040400000000;
  v1164[0] = xmmword_224665B28;
  v1164[1] = *(_OWORD *)dbl_224665B38;
  sub_223B54204((uint64_t)v1155, 7, 3, 4, (uint64_t)&v1594, (uint64_t)v1164, COERCE_DOUBLE(0x17700000176), COERCE_DOUBLE(0x5300000052), v220, v221, v222, v223, v224, v225);
  v1161 = v1107;
  v1162 = v1108;
  v1163 = v1109;
  v1157 = v1103;
  v1158 = v1104;
  v1160 = v1106;
  v1159 = v1105;
  v1595 = 0x404040400000000;
  v1166[0] = xmmword_224665B48;
  v1166[1] = *(_OWORD *)dbl_224665B58;
  sub_223B54204((uint64_t)&v1157, 7, 3, 5, (uint64_t)&v1595, (uint64_t)v1166, COERCE_DOUBLE(0x17E00000177), COERCE_DOUBLE(0x5A00000053), v226, v227, v228, v229, v230, v231);
  v1165[4] = v1107;
  v1165[5] = v1108;
  v1165[6] = v1109;
  v1165[0] = v1103;
  v1165[1] = v1104;
  v1165[3] = v1106;
  v1165[2] = v1105;
  v1596 = 0;
  v1168[0] = xmmword_224665B68;
  v1168[1] = *(_OWORD *)dbl_224665B78;
  sub_223B54204((uint64_t)v1165, 6, 2, 6, (uint64_t)&v1596, (uint64_t)v1168, COERCE_DOUBLE(0x17900000178), COERCE_DOUBLE(0x17D0000017CLL), v232, v233, v234, v235, v236, v237);
  v1167[4] = v1107;
  v1167[5] = v1108;
  v1167[6] = v1109;
  v1167[0] = v1103;
  v1167[1] = v1104;
  v1167[3] = v1106;
  v1167[2] = v1105;
  v1597 = 0x100010001000100;
  v1170[0] = xmmword_224665B88;
  v1170[1] = *(_OWORD *)dbl_224665B98;
  sub_223B54204((uint64_t)v1167, 6, 2, 7, (uint64_t)&v1597, (uint64_t)v1170, COERCE_DOUBLE(0x13000000179), COERCE_DOUBLE(0x1340000017DLL), v238, v239, v240, v241, v242, v243);
  v1169[4] = v1125;
  v1169[5] = v1126;
  v1169[6] = v1127;
  v1169[0] = v1121;
  v1169[1] = v1122;
  v1169[3] = v1124;
  v1169[2] = v1123;
  v1598 = 0;
  v1172[0] = xmmword_224665BA8;
  v1172[1] = *(_OWORD *)dbl_224665BB8;
  sub_223B54204((uint64_t)v1169, 6, 3, 6, (uint64_t)&v1598, (uint64_t)v1172, COERCE_DOUBLE(0x17B0000017ALL), COERCE_DOUBLE(0x17F0000017ELL), v244, v245, v246, v247, v248, v249);
  v1171[4] = v1125;
  v1171[5] = v1126;
  v1171[6] = v1127;
  v1171[0] = v1121;
  v1171[1] = v1122;
  v1171[3] = v1124;
  v1171[2] = v1123;
  v1599 = 0x100010001000100;
  v1174[0] = xmmword_224665BC8;
  v1174[1] = *(_OWORD *)dbl_224665BD8;
  sub_223B54204((uint64_t)v1171, 6, 3, 7, (uint64_t)&v1599, (uint64_t)v1174, COERCE_DOUBLE(0x1320000017BLL), COERCE_DOUBLE(0x1360000017FLL), v250, v251, v252, v253, v254, v255);
  v1173[4] = v1125;
  v1173[5] = v1126;
  v1173[6] = v1127;
  v1173[0] = v1121;
  v1173[1] = v1122;
  v1173[3] = v1124;
  v1173[2] = v1123;
  v1600 = 0x404040400000000;
  v1182[0] = xmmword_224665BE8;
  v1182[1] = *(_OWORD *)dbl_224665BF8;
  sub_223B54204((uint64_t)v1173, 7, 2, 6, (uint64_t)&v1600, (uint64_t)v1182, COERCE_DOUBLE(0x17D0000017CLL), COERCE_DOUBLE(0x5900000058), v256, v257, v258, v259, v260, v261);
  v1179 = v1125;
  v1180 = v1126;
  v1181 = v1127;
  v1175 = v1121;
  v1176 = v1122;
  v1178 = v1124;
  v1177 = v1123;
  v1601 = 0x504050401000100;
  v1184[0] = xmmword_224665C08;
  v1184[1] = *(_OWORD *)dbl_224665C18;
  sub_223B54204((uint64_t)&v1175, 7, 2, 7, (uint64_t)&v1601, (uint64_t)v1184, COERCE_DOUBLE(0x1340000017DLL), COERCE_DOUBLE(0x1000000059), v262, v263, v264, v265, v266, v267);
  v1183[4] = v1125;
  v1183[5] = v1126;
  v1183[6] = v1127;
  v1183[0] = v1121;
  v1183[1] = v1122;
  v1183[3] = v1124;
  v1183[2] = v1123;
  v1602 = 0x404040400000000;
  v1186[0] = xmmword_224665C28;
  v1186[1] = *(_OWORD *)dbl_224665C38;
  sub_223B54204((uint64_t)v1183, 7, 3, 6, (uint64_t)&v1602, (uint64_t)v1186, COERCE_DOUBLE(0x17F0000017ELL), COERCE_DOUBLE(0x5B0000005ALL), v268, v269, v270, v271, v272, v273);
  v1185[4] = v1125;
  v1185[5] = v1126;
  v1185[6] = v1127;
  v1185[0] = v1121;
  v1185[1] = v1122;
  v1185[3] = v1124;
  v1185[2] = v1123;
  v1603 = 0x504050401000100;
  v1188[0] = xmmword_224665C48;
  v1188[1] = *(_OWORD *)dbl_224665C58;
  sub_223B54204((uint64_t)v1185, 7, 3, 7, (uint64_t)&v1603, (uint64_t)v1188, COERCE_DOUBLE(0x1360000017FLL), COERCE_DOUBLE(0x120000005BLL), v274, v275, v276, v277, v278, v279);
  v1187[4] = v1143;
  v1187[5] = v1144;
  v1187[6] = v1145;
  v1187[0] = v1139;
  v1187[1] = v1140;
  v1187[3] = v1142;
  v1187[2] = v1141;
  v1604 = 0;
  v1190[0] = xmmword_224665C68;
  v1190[1] = *(_OWORD *)dbl_224665C78;
  sub_223B54204((uint64_t)v1187, 4, 4, 0, (uint64_t)&v1604, (uint64_t)v1190, COERCE_DOUBLE(0x18100000180), COERCE_DOUBLE(0x18500000184), v280, v281, v282, v283, v284, v285);
  v1189[4] = v1143;
  v1189[5] = v1144;
  v1189[6] = v1145;
  v1189[0] = v1139;
  v1189[1] = v1140;
  v1189[3] = v1142;
  v1189[2] = v1141;
  v1605 = 0;
  v1192[0] = xmmword_224665C88;
  v1192[1] = *(_OWORD *)dbl_224665C98;
  sub_223B54204((uint64_t)v1189, 4, 4, 1, (uint64_t)&v1605, (uint64_t)v1192, COERCE_DOUBLE(0x18800000181), COERCE_DOUBLE(0x18C00000185), v286, v287, v288, v289, v290, v291);
  v1191[4] = v1143;
  v1191[5] = v1144;
  v1191[6] = v1145;
  v1191[0] = v1139;
  v1191[1] = v1140;
  v1191[3] = v1142;
  v1191[2] = v1141;
  v1606 = 0;
  v1200[0] = xmmword_224665CA8;
  v1200[1] = *(_OWORD *)dbl_224665CB8;
  sub_223B54204((uint64_t)v1191, 4, 5, 0, (uint64_t)&v1606, (uint64_t)v1200, COERCE_DOUBLE(0x18300000182), COERCE_DOUBLE(0x18700000186), v292, v293, v294, v295, v296, v297);
  v1197 = v1143;
  v1198 = v1144;
  v1199 = v1145;
  v1193 = v1139;
  v1194 = v1140;
  v1196 = v1142;
  v1195 = v1141;
  v1607 = 0;
  v1202[0] = xmmword_224665CC8;
  v1202[1] = *(_OWORD *)dbl_224665CD8;
  sub_223B54204((uint64_t)&v1193, 4, 5, 1, (uint64_t)&v1607, (uint64_t)v1202, COERCE_DOUBLE(0x18A00000183), COERCE_DOUBLE(0x18E00000187), v298, v299, v300, v301, v302, v303);
  v1201[4] = v1143;
  v1201[5] = v1144;
  v1201[6] = v1145;
  v1201[0] = v1139;
  v1201[1] = v1140;
  v1201[3] = v1142;
  v1201[2] = v1141;
  v1608 = 0;
  v1204[0] = xmmword_224665CE8;
  v1204[1] = *(_OWORD *)dbl_224665CF8;
  sub_223B54204((uint64_t)v1201, 5, 4, 0, (uint64_t)&v1608, (uint64_t)v1204, COERCE_DOUBLE(0x18500000184), COERCE_DOUBLE(0x1A1000001A0), v304, v305, v306, v307, v308, v309);
  v1203[4] = v1143;
  v1203[5] = v1144;
  v1203[6] = v1145;
  v1203[0] = v1139;
  v1203[1] = v1140;
  v1203[3] = v1142;
  v1203[2] = v1141;
  v1609 = 0;
  v1206[0] = xmmword_224665D08;
  v1206[1] = *(_OWORD *)dbl_224665D18;
  sub_223B54204((uint64_t)v1203, 5, 4, 1, (uint64_t)&v1609, (uint64_t)v1206, COERCE_DOUBLE(0x18C00000185), COERCE_DOUBLE(0x1A8000001A1), v310, v311, v312, v313, v314, v315);
  v1205[4] = v1161;
  v1205[5] = v1162;
  v1205[6] = v1163;
  v1205[0] = v1157;
  v1205[1] = v1158;
  v1205[3] = v1160;
  v1205[2] = v1159;
  v1610 = 0;
  v1208[0] = xmmword_224665D28;
  v1208[1] = *(_OWORD *)dbl_224665D38;
  sub_223B54204((uint64_t)v1205, 5, 5, 0, (uint64_t)&v1610, (uint64_t)v1208, COERCE_DOUBLE(0x18700000186), COERCE_DOUBLE(0x1A3000001A2), v316, v317, v318, v319, v320, v321);
  v1207[4] = v1161;
  v1207[5] = v1162;
  v1207[6] = v1163;
  v1207[0] = v1157;
  v1207[1] = v1158;
  v1207[3] = v1160;
  v1207[2] = v1159;
  v1611 = 0;
  v1210[0] = xmmword_224665D48;
  v1210[1] = *(_OWORD *)dbl_224665D58;
  sub_223B54204((uint64_t)v1207, 5, 5, 1, (uint64_t)&v1611, (uint64_t)v1210, COERCE_DOUBLE(0x18E00000187), COERCE_DOUBLE(0x1AA000001A3), v322, v323, v324, v325, v326, v327);
  v1209[4] = v1161;
  v1209[5] = v1162;
  v1209[6] = v1163;
  v1209[0] = v1157;
  v1209[1] = v1158;
  v1209[3] = v1160;
  v1209[2] = v1159;
  v1612 = 0;
  v1218[0] = xmmword_224665D68;
  v1218[1] = *(_OWORD *)dbl_224665D78;
  sub_223B54204((uint64_t)v1209, 4, 4, 2, (uint64_t)&v1612, (uint64_t)v1218, COERCE_DOUBLE(0x18900000188), COERCE_DOUBLE(0x18D0000018CLL), v328, v329, v330, v331, v332, v333);
  v1215 = v1161;
  v1216 = v1162;
  v1217 = v1163;
  v1211 = v1157;
  v1212 = v1158;
  v1214 = v1160;
  v1213 = v1159;
  v1613 = 0;
  v1220[0] = xmmword_224665D88;
  v1220[1] = *(_OWORD *)dbl_224665D98;
  sub_223B54204((uint64_t)&v1211, 4, 4, 3, (uint64_t)&v1613, (uint64_t)v1220, COERCE_DOUBLE(0x1C000000189), COERCE_DOUBLE(0x1C40000018DLL), v334, v335, v336, v337, v338, v339);
  v1219[4] = v1161;
  v1219[5] = v1162;
  v1219[6] = v1163;
  v1219[0] = v1157;
  v1219[1] = v1158;
  v1219[3] = v1160;
  v1219[2] = v1159;
  v1614 = 0;
  v1222[0] = xmmword_224665DA8;
  v1222[1] = *(_OWORD *)dbl_224665DB8;
  sub_223B54204((uint64_t)v1219, 4, 5, 2, (uint64_t)&v1614, (uint64_t)v1222, COERCE_DOUBLE(0x18B0000018ALL), COERCE_DOUBLE(0x18F0000018ELL), v340, v341, v342, v343, v344, v345);
  v1221[4] = v1161;
  v1221[5] = v1162;
  v1221[6] = v1163;
  v1221[0] = v1157;
  v1221[1] = v1158;
  v1221[3] = v1160;
  v1221[2] = v1159;
  v1615 = 0;
  v1224[0] = xmmword_224665DC8;
  v1224[1] = *(_OWORD *)dbl_224665DD8;
  sub_223B54204((uint64_t)v1221, 4, 5, 3, (uint64_t)&v1615, (uint64_t)v1224, COERCE_DOUBLE(0x1C20000018BLL), COERCE_DOUBLE(0x1C60000018FLL), v346, v347, v348, v349, v350, v351);
  v1223[4] = v1179;
  v1223[5] = v1180;
  v1223[6] = v1181;
  v1223[0] = v1175;
  v1223[1] = v1176;
  v1223[3] = v1178;
  v1223[2] = v1177;
  v1616 = 0;
  v1226[0] = xmmword_224665DE8;
  v1226[1] = *(_OWORD *)dbl_224665DF8;
  sub_223B54204((uint64_t)v1223, 5, 4, 2, (uint64_t)&v1616, (uint64_t)v1226, COERCE_DOUBLE(0x18D0000018CLL), COERCE_DOUBLE(0x1A9000001A8), v352, v353, v354, v355, v356, v357);
  v1225[4] = v1179;
  v1225[5] = v1180;
  v1225[6] = v1181;
  v1225[0] = v1175;
  v1225[1] = v1176;
  v1225[3] = v1178;
  v1225[2] = v1177;
  v1617 = 0;
  v1228[0] = xmmword_224665E08;
  v1228[1] = *(_OWORD *)dbl_224665E18;
  sub_223B54204((uint64_t)v1225, 5, 4, 3, (uint64_t)&v1617, (uint64_t)v1228, COERCE_DOUBLE(0x1C40000018DLL), COERCE_DOUBLE(0x1E0000001A9), v358, v359, v360, v361, v362, v363);
  v1227[4] = v1179;
  v1227[5] = v1180;
  v1227[6] = v1181;
  v1227[0] = v1175;
  v1227[1] = v1176;
  v1227[3] = v1178;
  v1227[2] = v1177;
  v1618 = 0;
  v1236[0] = xmmword_224665E28;
  v1236[1] = *(_OWORD *)dbl_224665E38;
  sub_223B54204((uint64_t)v1227, 5, 5, 2, (uint64_t)&v1618, (uint64_t)v1236, COERCE_DOUBLE(0x18F0000018ELL), COERCE_DOUBLE(0x1AB000001AALL), v364, v365, v366, v367, v368, v369);
  v1233 = v1179;
  v1234 = v1180;
  v1235 = v1181;
  v1229 = v1175;
  v1230 = v1176;
  v1232 = v1178;
  v1231 = v1177;
  v1619 = 0;
  v1238[0] = xmmword_224665E48;
  v1238[1] = *(_OWORD *)dbl_224665E58;
  sub_223B54204((uint64_t)&v1229, 5, 5, 3, (uint64_t)&v1619, (uint64_t)v1238, COERCE_DOUBLE(0x1C60000018FLL), COERCE_DOUBLE(0x1E2000001ABLL), v370, v371, v372, v373, v374, v375);
  v1237[4] = v1179;
  v1237[5] = v1180;
  v1237[6] = v1181;
  v1237[0] = v1175;
  v1237[1] = v1176;
  v1237[3] = v1178;
  v1237[2] = v1177;
  v1620 = 0;
  v1240[0] = xmmword_224665E68;
  v1240[1] = *(_OWORD *)dbl_224665E78;
  sub_223B54204((uint64_t)v1237, 4, 6, 0, (uint64_t)&v1620, (uint64_t)v1240, COERCE_DOUBLE(0x19100000190), COERCE_DOUBLE(0x19500000194), v376, v377, v378, v379, v380, v381);
  v1239[4] = v1179;
  v1239[5] = v1180;
  v1239[6] = v1181;
  v1239[0] = v1175;
  v1239[1] = v1176;
  v1239[3] = v1178;
  v1239[2] = v1177;
  v1621 = 0;
  v1242[0] = xmmword_224665E88;
  v1242[1] = *(_OWORD *)dbl_224665E98;
  sub_223B54204((uint64_t)v1239, 4, 6, 1, (uint64_t)&v1621, (uint64_t)v1242, COERCE_DOUBLE(0x19800000191), COERCE_DOUBLE(0x19C00000195), v382, v383, v384, v385, v386, v387);
  v1241[4] = v1197;
  v1241[5] = v1198;
  v1241[6] = v1199;
  v1241[0] = v1193;
  v1241[1] = v1194;
  v1241[3] = v1196;
  v1241[2] = v1195;
  v1622 = 0x202000002020000;
  v1244[0] = xmmword_224665EA8;
  v1244[1] = *(_OWORD *)dbl_224665EB8;
  sub_223B54204((uint64_t)v1241, 4, 7, 0, (uint64_t)&v1622, (uint64_t)v1244, COERCE_DOUBLE(0x19300000192), COERCE_DOUBLE(0x19700000196), v388, v389, v390, v391, v392, v393);
  v1243[4] = v1197;
  v1243[5] = v1198;
  v1243[6] = v1199;
  v1243[0] = v1193;
  v1243[1] = v1194;
  v1243[3] = v1196;
  v1243[2] = v1195;
  v1623 = 0x202000002020000;
  v1246[0] = xmmword_224665EC8;
  v1246[1] = *(_OWORD *)dbl_224665ED8;
  sub_223B54204((uint64_t)v1243, 4, 7, 1, (uint64_t)&v1623, (uint64_t)v1246, COERCE_DOUBLE(0x19A00000193), COERCE_DOUBLE(0x19E00000197), v394, v395, v396, v397, v398, v399);
  v1245[4] = v1197;
  v1245[5] = v1198;
  v1245[6] = v1199;
  v1245[0] = v1193;
  v1245[1] = v1194;
  v1245[3] = v1196;
  v1245[2] = v1195;
  v1624 = 0;
  v1254[0] = xmmword_224665EE8;
  v1254[1] = *(_OWORD *)dbl_224665EF8;
  sub_223B54204((uint64_t)v1245, 5, 6, 0, (uint64_t)&v1624, (uint64_t)v1254, COERCE_DOUBLE(0x19500000194), COERCE_DOUBLE(0x1B1000001B0), v400, v401, v402, v403, v404, v405);
  v1251 = v1197;
  v1252 = v1198;
  v1253 = v1199;
  v1247 = v1193;
  v1248 = v1194;
  v1250 = v1196;
  v1249 = v1195;
  v1625 = 0;
  v1256[0] = xmmword_224665F08;
  v1256[1] = *(_OWORD *)dbl_224665F18;
  sub_223B54204((uint64_t)&v1247, 5, 6, 1, (uint64_t)&v1625, (uint64_t)v1256, COERCE_DOUBLE(0x19C00000195), COERCE_DOUBLE(0x1B8000001B1), v406, v407, v408, v409, v410, v411);
  v1255[4] = v1197;
  v1255[5] = v1198;
  v1255[6] = v1199;
  v1255[0] = v1193;
  v1255[1] = v1194;
  v1255[3] = v1196;
  v1255[2] = v1195;
  v1626 = 0x202000002020000;
  v1258[0] = xmmword_224665F28;
  v1258[1] = *(_OWORD *)dbl_224665F38;
  sub_223B54204((uint64_t)v1255, 5, 7, 0, (uint64_t)&v1626, (uint64_t)v1258, COERCE_DOUBLE(0x19700000196), COERCE_DOUBLE(0x1B3000001B2), v412, v413, v414, v415, v416, v417);
  v1257[4] = v1197;
  v1257[5] = v1198;
  v1257[6] = v1199;
  v1257[0] = v1193;
  v1257[1] = v1194;
  v1257[3] = v1196;
  v1257[2] = v1195;
  v1627 = 0x202000002020000;
  v1260[0] = xmmword_224665F48;
  v1260[1] = *(_OWORD *)dbl_224665F58;
  sub_223B54204((uint64_t)v1257, 5, 7, 1, (uint64_t)&v1627, (uint64_t)v1260, COERCE_DOUBLE(0x19E00000197), COERCE_DOUBLE(0x1BA000001B3), v418, v419, v420, v421, v422, v423);
  v1259[4] = v1215;
  v1259[5] = v1216;
  v1259[6] = v1217;
  v1259[0] = v1211;
  v1259[1] = v1212;
  v1259[3] = v1214;
  v1259[2] = v1213;
  v1628 = 0;
  v1262[0] = xmmword_224665F68;
  v1262[1] = *(_OWORD *)dbl_224665F78;
  sub_223B54204((uint64_t)v1259, 4, 6, 2, (uint64_t)&v1628, (uint64_t)v1262, COERCE_DOUBLE(0x19900000198), COERCE_DOUBLE(0x19D0000019CLL), v424, v425, v426, v427, v428, v429);
  v1261[4] = v1215;
  v1261[5] = v1216;
  v1261[6] = v1217;
  v1261[0] = v1211;
  v1261[1] = v1212;
  v1261[3] = v1214;
  v1261[2] = v1213;
  v1629 = 0;
  v1264[0] = xmmword_224665F88;
  v1264[1] = *(_OWORD *)dbl_224665F98;
  sub_223B54204((uint64_t)v1261, 4, 6, 3, (uint64_t)&v1629, (uint64_t)v1264, COERCE_DOUBLE(0x1D000000199), COERCE_DOUBLE(0x1D40000019DLL), v430, v431, v432, v433, v434, v435);
  v1263[4] = v1215;
  v1263[5] = v1216;
  v1263[6] = v1217;
  v1263[0] = v1211;
  v1263[1] = v1212;
  v1263[3] = v1214;
  v1263[2] = v1213;
  v1630 = 0x202000002020000;
  v1272[0] = xmmword_224665FA8;
  v1272[1] = *(_OWORD *)dbl_224665FB8;
  sub_223B54204((uint64_t)v1263, 4, 7, 2, (uint64_t)&v1630, (uint64_t)v1272, COERCE_DOUBLE(0x19B0000019ALL), COERCE_DOUBLE(0x19F0000019ELL), v436, v437, v438, v439, v440, v441);
  v1269 = v1215;
  v1270 = v1216;
  v1271 = v1217;
  v1265 = v1211;
  v1266 = v1212;
  v1268 = v1214;
  v1267 = v1213;
  v1631 = 0x202000002020000;
  v1274[0] = xmmword_224665FC8;
  v1274[1] = *(_OWORD *)dbl_224665FD8;
  sub_223B54204((uint64_t)&v1265, 4, 7, 3, (uint64_t)&v1631, (uint64_t)v1274, COERCE_DOUBLE(0x1D20000019BLL), COERCE_DOUBLE(0x1D60000019FLL), v442, v443, v444, v445, v446, v447);
  v1273[4] = v1215;
  v1273[5] = v1216;
  v1273[6] = v1217;
  v1273[0] = v1211;
  v1273[1] = v1212;
  v1273[3] = v1214;
  v1273[2] = v1213;
  v1632 = 0;
  v1276[0] = xmmword_224665FE8;
  v1276[1] = *(_OWORD *)dbl_224665FF8;
  sub_223B54204((uint64_t)v1273, 5, 6, 2, (uint64_t)&v1632, (uint64_t)v1276, COERCE_DOUBLE(0x19D0000019CLL), COERCE_DOUBLE(0x1B9000001B8), v448, v449, v450, v451, v452, v453);
  v1275[4] = v1215;
  v1275[5] = v1216;
  v1275[6] = v1217;
  v1275[0] = v1211;
  v1275[1] = v1212;
  v1275[3] = v1214;
  v1275[2] = v1213;
  v1633 = 0;
  v1278[0] = xmmword_224666008;
  v1278[1] = *(_OWORD *)dbl_224666018;
  sub_223B54204((uint64_t)v1275, 5, 6, 3, (uint64_t)&v1633, (uint64_t)v1278, COERCE_DOUBLE(0x1D40000019DLL), COERCE_DOUBLE(0x1F0000001B9), v454, v455, v456, v457, v458, v459);
  v1277[4] = v1233;
  v1277[5] = v1234;
  v1277[6] = v1235;
  v1277[0] = v1229;
  v1277[1] = v1230;
  v1277[3] = v1232;
  v1277[2] = v1231;
  v1634 = 0x202000002020000;
  v1280[0] = xmmword_224666028;
  v1280[1] = *(_OWORD *)dbl_224666038;
  sub_223B54204((uint64_t)v1277, 5, 7, 2, (uint64_t)&v1634, (uint64_t)v1280, COERCE_DOUBLE(0x19F0000019ELL), COERCE_DOUBLE(0x1BB000001BALL), v460, v461, v462, v463, v464, v465);
  v1279[4] = v1233;
  v1279[5] = v1234;
  v1279[6] = v1235;
  v1279[0] = v1229;
  v1279[1] = v1230;
  v1279[3] = v1232;
  v1279[2] = v1231;
  v1635 = 0x202000002020000;
  v1282[0] = xmmword_224666048;
  v1282[1] = *(_OWORD *)dbl_224666058;
  sub_223B54204((uint64_t)v1279, 5, 7, 3, (uint64_t)&v1635, (uint64_t)v1282, COERCE_DOUBLE(0x1D60000019FLL), COERCE_DOUBLE(0x1F2000001BBLL), v466, v467, v468, v469, v470, v471);
  v1281[4] = v1233;
  v1281[5] = v1234;
  v1281[6] = v1235;
  v1281[0] = v1229;
  v1281[1] = v1230;
  v1281[3] = v1232;
  v1281[2] = v1231;
  v1636 = 0;
  v1290[0] = xmmword_224666068;
  v1290[1] = *(_OWORD *)dbl_224666078;
  sub_223B54204((uint64_t)v1281, 6, 4, 0, (uint64_t)&v1636, (uint64_t)v1290, COERCE_DOUBLE(0x1A1000001A0), COERCE_DOUBLE(0x1A5000001A4), v472, v473, v474, v475, v476, v477);
  v1287 = v1233;
  v1288 = v1234;
  v1289 = v1235;
  v1283 = v1229;
  v1284 = v1230;
  v1286 = v1232;
  v1285 = v1231;
  v1637 = 0;
  v1292[0] = xmmword_224666088;
  v1292[1] = *(_OWORD *)dbl_224666098;
  sub_223B54204((uint64_t)&v1283, 6, 4, 1, (uint64_t)&v1637, (uint64_t)v1292, COERCE_DOUBLE(0x1A8000001A1), COERCE_DOUBLE(0x1AC000001A5), v478, v479, v480, v481, v482, v483);
  v1291[4] = v1233;
  v1291[5] = v1234;
  v1291[6] = v1235;
  v1291[0] = v1229;
  v1291[1] = v1230;
  v1291[3] = v1232;
  v1291[2] = v1231;
  v1638 = 0;
  v1294[0] = xmmword_2246660A8;
  v1294[1] = *(_OWORD *)dbl_2246660B8;
  sub_223B54204((uint64_t)v1291, 6, 5, 0, (uint64_t)&v1638, (uint64_t)v1294, COERCE_DOUBLE(0x1A3000001A2), COERCE_DOUBLE(0x1A7000001A6), v484, v485, v486, v487, v488, v489);
  v1293[4] = v1233;
  v1293[5] = v1234;
  v1293[6] = v1235;
  v1293[0] = v1229;
  v1293[1] = v1230;
  v1293[3] = v1232;
  v1293[2] = v1231;
  v1639 = 0;
  v1296[0] = xmmword_2246660C8;
  v1296[1] = *(_OWORD *)dbl_2246660D8;
  sub_223B54204((uint64_t)v1293, 6, 5, 1, (uint64_t)&v1639, (uint64_t)v1296, COERCE_DOUBLE(0x1AA000001A3), COERCE_DOUBLE(0x1AE000001A7), v490, v491, v492, v493, v494, v495);
  v1295[4] = v1251;
  v1295[5] = v1252;
  v1295[6] = v1253;
  v1295[0] = v1247;
  v1295[1] = v1248;
  v1295[3] = v1250;
  v1295[2] = v1249;
  v1640 = 0x404040400000000;
  v1298[0] = xmmword_2246660E8;
  v1298[1] = *(_OWORD *)dbl_2246660F8;
  sub_223B54204((uint64_t)v1295, 7, 4, 0, (uint64_t)&v1640, (uint64_t)v1298, COERCE_DOUBLE(0x1A5000001A4), COERCE_DOUBLE(0x8100000080), v496, v497, v498, v499, v500, v501);
  v1297[4] = v1251;
  v1297[5] = v1252;
  v1297[6] = v1253;
  v1297[0] = v1247;
  v1297[1] = v1248;
  v1297[3] = v1250;
  v1297[2] = v1249;
  v1641 = 0x404040400000000;
  v1300[0] = xmmword_224666108;
  v1300[1] = *(_OWORD *)dbl_224666118;
  sub_223B54204((uint64_t)v1297, 7, 4, 1, (uint64_t)&v1641, (uint64_t)v1300, COERCE_DOUBLE(0x1AC000001A5), COERCE_DOUBLE(0x8800000081), v502, v503, v504, v505, v506, v507);
  v1299[4] = v1251;
  v1299[5] = v1252;
  v1299[6] = v1253;
  v1299[0] = v1247;
  v1299[1] = v1248;
  v1299[3] = v1250;
  v1299[2] = v1249;
  v1642 = 0x404040400000000;
  v1308[0] = xmmword_224666128;
  v1308[1] = *(_OWORD *)dbl_224666138;
  sub_223B54204((uint64_t)v1299, 7, 5, 0, (uint64_t)&v1642, (uint64_t)v1308, COERCE_DOUBLE(0x1A7000001A6), COERCE_DOUBLE(0x8300000082), v508, v509, v510, v511, v512, v513);
  v1305 = v1251;
  v1306 = v1252;
  v1307 = v1253;
  v1301 = v1247;
  v1302 = v1248;
  v1304 = v1250;
  v1303 = v1249;
  v1643 = 0x404040400000000;
  v1310[0] = xmmword_224666148;
  v1310[1] = *(_OWORD *)dbl_224666158;
  sub_223B54204((uint64_t)&v1301, 7, 5, 1, (uint64_t)&v1643, (uint64_t)v1310, COERCE_DOUBLE(0x1AE000001A7), COERCE_DOUBLE(0x8A00000083), v514, v515, v516, v517, v518, v519);
  v1309[4] = v1251;
  v1309[5] = v1252;
  v1309[6] = v1253;
  v1309[0] = v1247;
  v1309[1] = v1248;
  v1309[3] = v1250;
  v1309[2] = v1249;
  v1644 = 0;
  v1312[0] = xmmword_224666168;
  v1312[1] = *(_OWORD *)dbl_224666178;
  sub_223B54204((uint64_t)v1309, 6, 4, 2, (uint64_t)&v1644, (uint64_t)v1312, COERCE_DOUBLE(0x1A9000001A8), COERCE_DOUBLE(0x1AD000001ACLL), v520, v521, v522, v523, v524, v525);
  v1311[4] = v1251;
  v1311[5] = v1252;
  v1311[6] = v1253;
  v1311[0] = v1247;
  v1311[1] = v1248;
  v1311[3] = v1250;
  v1311[2] = v1249;
  v1645 = 0;
  v1314[0] = xmmword_224666188;
  v1314[1] = *(_OWORD *)dbl_224666198;
  sub_223B54204((uint64_t)v1311, 6, 4, 3, (uint64_t)&v1645, (uint64_t)v1314, COERCE_DOUBLE(0x1E0000001A9), COERCE_DOUBLE(0x1E4000001ADLL), v526, v527, v528, v529, v530, v531);
  v1313[4] = v1269;
  v1313[5] = v1270;
  v1313[6] = v1271;
  v1313[0] = v1265;
  v1313[1] = v1266;
  v1313[3] = v1268;
  v1313[2] = v1267;
  v1646 = 0;
  v1316[0] = xmmword_2246661A8;
  v1316[1] = *(_OWORD *)dbl_2246661B8;
  sub_223B54204((uint64_t)v1313, 6, 5, 2, (uint64_t)&v1646, (uint64_t)v1316, COERCE_DOUBLE(0x1AB000001AALL), COERCE_DOUBLE(0x1AF000001AELL), v532, v533, v534, v535, v536, v537);
  v1315[4] = v1269;
  v1315[5] = v1270;
  v1315[6] = v1271;
  v1315[0] = v1265;
  v1315[1] = v1266;
  v1315[3] = v1268;
  v1315[2] = v1267;
  v1647 = 0;
  v1318[0] = xmmword_2246661C8;
  v1318[1] = *(_OWORD *)dbl_2246661D8;
  sub_223B54204((uint64_t)v1315, 6, 5, 3, (uint64_t)&v1647, (uint64_t)v1318, COERCE_DOUBLE(0x1E2000001ABLL), COERCE_DOUBLE(0x1E6000001AFLL), v538, v539, v540, v541, v542, v543);
  v1317[4] = v1269;
  v1317[5] = v1270;
  v1317[6] = v1271;
  v1317[0] = v1265;
  v1317[1] = v1266;
  v1317[3] = v1268;
  v1317[2] = v1267;
  v1648 = 0x404040400000000;
  v1326[0] = xmmword_2246661E8;
  v1326[1] = *(_OWORD *)dbl_2246661F8;
  sub_223B54204((uint64_t)v1317, 7, 4, 2, (uint64_t)&v1648, (uint64_t)v1326, COERCE_DOUBLE(0x1AD000001ACLL), COERCE_DOUBLE(0x8900000088), v544, v545, v546, v547, v548, v549);
  v1323 = v1269;
  v1324 = v1270;
  v1325 = v1271;
  v1319 = v1265;
  v1320 = v1266;
  v1322 = v1268;
  v1321 = v1267;
  v1649 = 0x404040400000000;
  v1328[0] = xmmword_224666208;
  v1328[1] = *(_OWORD *)dbl_224666218;
  sub_223B54204((uint64_t)&v1319, 7, 4, 3, (uint64_t)&v1649, (uint64_t)v1328, COERCE_DOUBLE(0x1E4000001ADLL), COERCE_DOUBLE(0xC000000089), v550, v551, v552, v553, v554, v555);
  v1327[4] = v1269;
  v1327[5] = v1270;
  v1327[6] = v1271;
  v1327[0] = v1265;
  v1327[1] = v1266;
  v1327[3] = v1268;
  v1327[2] = v1267;
  v1650 = 0x404040400000000;
  v1330[0] = xmmword_224666228;
  v1330[1] = *(_OWORD *)dbl_224666238;
  sub_223B54204((uint64_t)v1327, 7, 5, 2, (uint64_t)&v1650, (uint64_t)v1330, COERCE_DOUBLE(0x1AF000001AELL), COERCE_DOUBLE(0x8B0000008ALL), v556, v557, v558, v559, v560, v561);
  v1329[4] = v1269;
  v1329[5] = v1270;
  v1329[6] = v1271;
  v1329[0] = v1265;
  v1329[1] = v1266;
  v1329[3] = v1268;
  v1329[2] = v1267;
  v1651 = 0x404040400000000;
  v1332[0] = xmmword_224666248;
  v1332[1] = *(_OWORD *)dbl_224666258;
  sub_223B54204((uint64_t)v1329, 7, 5, 3, (uint64_t)&v1651, (uint64_t)v1332, COERCE_DOUBLE(0x1E6000001AFLL), COERCE_DOUBLE(0xC20000008BLL), v562, v563, v564, v565, v566, v567);
  v1331[4] = v1287;
  v1331[5] = v1288;
  v1331[6] = v1289;
  v1331[0] = v1283;
  v1331[1] = v1284;
  v1331[3] = v1286;
  v1331[2] = v1285;
  v1652 = 0;
  v1334[0] = xmmword_224666268;
  v1334[1] = *(_OWORD *)dbl_224666278;
  sub_223B54204((uint64_t)v1331, 6, 6, 0, (uint64_t)&v1652, (uint64_t)v1334, COERCE_DOUBLE(0x1B1000001B0), COERCE_DOUBLE(0x1B5000001B4), v568, v569, v570, v571, v572, v573);
  v1333[4] = v1287;
  v1333[5] = v1288;
  v1333[6] = v1289;
  v1333[0] = v1283;
  v1333[1] = v1284;
  v1333[3] = v1286;
  v1333[2] = v1285;
  v1653 = 0;
  v1336[0] = xmmword_224666288;
  v1336[1] = *(_OWORD *)dbl_224666298;
  sub_223B54204((uint64_t)v1333, 6, 6, 1, (uint64_t)&v1653, (uint64_t)v1336, COERCE_DOUBLE(0x1B8000001B1), COERCE_DOUBLE(0x1BC000001B5), v574, v575, v576, v577, v578, v579);
  v1335[4] = v1287;
  v1335[5] = v1288;
  v1335[6] = v1289;
  v1335[0] = v1283;
  v1335[1] = v1284;
  v1335[3] = v1286;
  v1335[2] = v1285;
  v1654 = 0x202000002020000;
  v1344[0] = xmmword_2246662A8;
  v1344[1] = *(_OWORD *)dbl_2246662B8;
  sub_223B54204((uint64_t)v1335, 6, 7, 0, (uint64_t)&v1654, (uint64_t)v1344, COERCE_DOUBLE(0x1B3000001B2), COERCE_DOUBLE(0x1B7000001B6), v580, v581, v582, v583, v584, v585);
  v1341 = v1287;
  v1342 = v1288;
  v1343 = v1289;
  v1337 = v1283;
  v1338 = v1284;
  v1340 = v1286;
  v1339 = v1285;
  v1655 = 0x202000002020000;
  v1346[0] = xmmword_2246662C8;
  v1346[1] = *(_OWORD *)dbl_2246662D8;
  sub_223B54204((uint64_t)&v1337, 6, 7, 1, (uint64_t)&v1655, (uint64_t)v1346, COERCE_DOUBLE(0x1BA000001B3), COERCE_DOUBLE(0x1BE000001B7), v586, v587, v588, v589, v590, v591);
  v1345[4] = v1287;
  v1345[5] = v1288;
  v1345[6] = v1289;
  v1345[0] = v1283;
  v1345[1] = v1284;
  v1345[3] = v1286;
  v1345[2] = v1285;
  v1656 = 0x404040400000000;
  v1348[0] = xmmword_2246662E8;
  v1348[1] = *(_OWORD *)dbl_2246662F8;
  sub_223B54204((uint64_t)v1345, 7, 6, 0, (uint64_t)&v1656, (uint64_t)v1348, COERCE_DOUBLE(0x1B5000001B4), COERCE_DOUBLE(0x9100000090), v592, v593, v594, v595, v596, v597);
  v1347[4] = v1287;
  v1347[5] = v1288;
  v1347[6] = v1289;
  v1347[0] = v1283;
  v1347[1] = v1284;
  v1347[3] = v1286;
  v1347[2] = v1285;
  v1657 = 0x404040400000000;
  v1350[0] = xmmword_224666308;
  v1350[1] = *(_OWORD *)dbl_224666318;
  sub_223B54204((uint64_t)v1347, 7, 6, 1, (uint64_t)&v1657, (uint64_t)v1350, COERCE_DOUBLE(0x1BC000001B5), COERCE_DOUBLE(0x9800000091), v598, v599, v600, v601, v602, v603);
  v1349[4] = v1305;
  v1349[5] = v1306;
  v1349[6] = v1307;
  v1349[0] = v1301;
  v1349[1] = v1302;
  v1349[3] = v1304;
  v1349[2] = v1303;
  v1658 = 0x606040402020000;
  v1352[0] = xmmword_224666328;
  v1352[1] = *(_OWORD *)dbl_224666338;
  sub_223B54204((uint64_t)v1349, 7, 7, 0, (uint64_t)&v1658, (uint64_t)v1352, COERCE_DOUBLE(0x1B7000001B6), COERCE_DOUBLE(0x9300000092), v604, v605, v606, v607, v608, v609);
  v1351[4] = v1305;
  v1351[5] = v1306;
  v1351[6] = v1307;
  v1351[0] = v1301;
  v1351[1] = v1302;
  v1351[3] = v1304;
  v1351[2] = v1303;
  v1659 = 0x606040402020000;
  v1354[0] = xmmword_224666348;
  v1354[1] = *(_OWORD *)dbl_224666358;
  sub_223B54204((uint64_t)v1351, 7, 7, 1, (uint64_t)&v1659, (uint64_t)v1354, COERCE_DOUBLE(0x1BE000001B7), COERCE_DOUBLE(0x9A00000093), v610, v611, v612, v613, v614, v615);
  v1353[4] = v1305;
  v1353[5] = v1306;
  v1353[6] = v1307;
  v1353[0] = v1301;
  v1353[1] = v1302;
  v1353[3] = v1304;
  v1353[2] = v1303;
  v1660 = 0;
  v1362[0] = xmmword_224666368;
  v1362[1] = *(_OWORD *)dbl_224666378;
  sub_223B54204((uint64_t)v1353, 6, 6, 2, (uint64_t)&v1660, (uint64_t)v1362, COERCE_DOUBLE(0x1B9000001B8), COERCE_DOUBLE(0x1BD000001BCLL), v616, v617, v618, v619, v620, v621);
  v1359 = v1305;
  v1360 = v1306;
  v1361 = v1307;
  v1355 = v1301;
  v1356 = v1302;
  v1358 = v1304;
  v1357 = v1303;
  v1661 = 0;
  v1364[0] = xmmword_224666388;
  v1364[1] = *(_OWORD *)dbl_224666398;
  sub_223B54204((uint64_t)&v1355, 6, 6, 3, (uint64_t)&v1661, (uint64_t)v1364, COERCE_DOUBLE(0x1F0000001B9), COERCE_DOUBLE(0x1F4000001BDLL), v622, v623, v624, v625, v626, v627);
  v1363[4] = v1305;
  v1363[5] = v1306;
  v1363[6] = v1307;
  v1363[0] = v1301;
  v1363[1] = v1302;
  v1363[3] = v1304;
  v1363[2] = v1303;
  v1662 = 0x202000002020000;
  v1366[0] = xmmword_2246663A8;
  v1366[1] = *(_OWORD *)dbl_2246663B8;
  sub_223B54204((uint64_t)v1363, 6, 7, 2, (uint64_t)&v1662, (uint64_t)v1366, COERCE_DOUBLE(0x1BB000001BALL), COERCE_DOUBLE(0x1BF000001BELL), v628, v629, v630, v631, v632, v633);
  v1365[4] = v1305;
  v1365[5] = v1306;
  v1365[6] = v1307;
  v1365[0] = v1301;
  v1365[1] = v1302;
  v1365[3] = v1304;
  v1365[2] = v1303;
  v1663 = 0x202000002020000;
  v1368[0] = xmmword_2246663C8;
  v1368[1] = *(_OWORD *)dbl_2246663D8;
  sub_223B54204((uint64_t)v1365, 6, 7, 3, (uint64_t)&v1663, (uint64_t)v1368, COERCE_DOUBLE(0x1F2000001BBLL), COERCE_DOUBLE(0x1F6000001BFLL), v634, v635, v636, v637, v638, v639);
  v1367[4] = v1323;
  v1367[5] = v1324;
  v1367[6] = v1325;
  v1367[0] = v1319;
  v1367[1] = v1320;
  v1367[3] = v1322;
  v1367[2] = v1321;
  v1664 = 0x404040400000000;
  v1370[0] = xmmword_2246663E8;
  v1370[1] = *(_OWORD *)dbl_2246663F8;
  sub_223B54204((uint64_t)v1367, 7, 6, 2, (uint64_t)&v1664, (uint64_t)v1370, COERCE_DOUBLE(0x1BD000001BCLL), COERCE_DOUBLE(0x9900000098), v640, v641, v642, v643, v644, v645);
  v1369[4] = v1323;
  v1369[5] = v1324;
  v1369[6] = v1325;
  v1369[0] = v1319;
  v1369[1] = v1320;
  v1369[3] = v1322;
  v1369[2] = v1321;
  v1665 = 0x404040400000000;
  v1372[0] = xmmword_224666408;
  v1372[1] = *(_OWORD *)dbl_224666418;
  sub_223B54204((uint64_t)v1369, 7, 6, 3, (uint64_t)&v1665, (uint64_t)v1372, COERCE_DOUBLE(0x1F4000001BDLL), COERCE_DOUBLE(0xD000000099), v646, v647, v648, v649, v650, v651);
  v1371[4] = v1323;
  v1371[5] = v1324;
  v1371[6] = v1325;
  v1371[0] = v1319;
  v1371[1] = v1320;
  v1371[3] = v1322;
  v1371[2] = v1321;
  v1666 = 0x606040402020000;
  v1380[0] = xmmword_224666428;
  v1380[1] = *(_OWORD *)dbl_224666438;
  sub_223B54204((uint64_t)v1371, 7, 7, 2, (uint64_t)&v1666, (uint64_t)v1380, COERCE_DOUBLE(0x1BF000001BELL), COERCE_DOUBLE(0x9B0000009ALL), v652, v653, v654, v655, v656, v657);
  v1377 = v1323;
  v1378 = v1324;
  v1379 = v1325;
  v1373 = v1319;
  v1374 = v1320;
  v1376 = v1322;
  v1375 = v1321;
  v1667 = 0x606040402020000;
  v1382[0] = xmmword_224666448;
  v1382[1] = *(_OWORD *)dbl_224666458;
  sub_223B54204((uint64_t)&v1373, 7, 7, 3, (uint64_t)&v1667, (uint64_t)v1382, COERCE_DOUBLE(0x1F6000001BFLL), COERCE_DOUBLE(0xD20000009BLL), v658, v659, v660, v661, v662, v663);
  v1381[4] = v1323;
  v1381[5] = v1324;
  v1381[6] = v1325;
  v1381[0] = v1319;
  v1381[1] = v1320;
  v1381[3] = v1322;
  v1381[2] = v1321;
  v1668 = 0;
  v1384[0] = xmmword_224666468;
  v1384[1] = *(_OWORD *)dbl_224666478;
  sub_223B54204((uint64_t)v1381, 4, 4, 4, (uint64_t)&v1668, (uint64_t)v1384, COERCE_DOUBLE(0x1C1000001C0), COERCE_DOUBLE(0x1C5000001C4), v664, v665, v666, v667, v668, v669);
  v1383[4] = v1323;
  v1383[5] = v1324;
  v1383[6] = v1325;
  v1383[0] = v1319;
  v1383[1] = v1320;
  v1383[3] = v1322;
  v1383[2] = v1321;
  v1669 = 0;
  v1386[0] = xmmword_224666488;
  v1386[1] = *(_OWORD *)dbl_224666498;
  sub_223B54204((uint64_t)v1383, 4, 4, 5, (uint64_t)&v1669, (uint64_t)v1386, COERCE_DOUBLE(0x1C8000001C1), COERCE_DOUBLE(0x1CC000001C5), v670, v671, v672, v673, v674, v675);
  v1385[4] = v1341;
  v1385[5] = v1342;
  v1385[6] = v1343;
  v1385[0] = v1337;
  v1385[1] = v1338;
  v1385[3] = v1340;
  v1385[2] = v1339;
  v1670 = 0;
  v1388[0] = xmmword_2246664A8;
  v1388[1] = *(_OWORD *)dbl_2246664B8;
  sub_223B54204((uint64_t)v1385, 4, 5, 4, (uint64_t)&v1670, (uint64_t)v1388, COERCE_DOUBLE(0x1C3000001C2), COERCE_DOUBLE(0x1C7000001C6), v676, v677, v678, v679, v680, v681);
  v1387[4] = v1341;
  v1387[5] = v1342;
  v1387[6] = v1343;
  v1387[0] = v1337;
  v1387[1] = v1338;
  v1387[3] = v1340;
  v1387[2] = v1339;
  v1671 = 0;
  v1390[0] = xmmword_2246664C8;
  v1390[1] = *(_OWORD *)dbl_2246664D8;
  sub_223B54204((uint64_t)v1387, 4, 5, 5, (uint64_t)&v1671, (uint64_t)v1390, COERCE_DOUBLE(0x1CA000001C3), COERCE_DOUBLE(0x1CE000001C7), v682, v683, v684, v685, v686, v687);
  v1389[4] = v1341;
  v1389[5] = v1342;
  v1389[6] = v1343;
  v1389[0] = v1337;
  v1389[1] = v1338;
  v1389[3] = v1340;
  v1389[2] = v1339;
  v1672 = 0;
  v1398[0] = xmmword_2246664E8;
  v1398[1] = *(_OWORD *)dbl_2246664F8;
  sub_223B54204((uint64_t)v1389, 5, 4, 4, (uint64_t)&v1672, (uint64_t)v1398, COERCE_DOUBLE(0x1C5000001C4), COERCE_DOUBLE(0x1E1000001E0), v688, v689, v690, v691, v692, v693);
  v1395 = v1341;
  v1396 = v1342;
  v1397 = v1343;
  v1391 = v1337;
  v1392 = v1338;
  v1394 = v1340;
  v1393 = v1339;
  v1673 = 0;
  v1400[0] = xmmword_224666508;
  v1400[1] = *(_OWORD *)dbl_224666518;
  sub_223B54204((uint64_t)&v1391, 5, 4, 5, (uint64_t)&v1673, (uint64_t)v1400, COERCE_DOUBLE(0x1CC000001C5), COERCE_DOUBLE(0x1E8000001E1), v694, v695, v696, v697, v698, v699);
  v1399[4] = v1341;
  v1399[5] = v1342;
  v1399[6] = v1343;
  v1399[0] = v1337;
  v1399[1] = v1338;
  v1399[3] = v1340;
  v1399[2] = v1339;
  v1674 = 0;
  v1402[0] = xmmword_224666528;
  v1402[1] = *(_OWORD *)dbl_224666538;
  sub_223B54204((uint64_t)v1399, 5, 5, 4, (uint64_t)&v1674, (uint64_t)v1402, COERCE_DOUBLE(0x1C7000001C6), COERCE_DOUBLE(0x1E3000001E2), v700, v701, v702, v703, v704, v705);
  v1401[4] = v1341;
  v1401[5] = v1342;
  v1401[6] = v1343;
  v1401[0] = v1337;
  v1401[1] = v1338;
  v1401[3] = v1340;
  v1401[2] = v1339;
  v1675 = 0;
  v1404[0] = xmmword_224666548;
  v1404[1] = *(_OWORD *)dbl_224666558;
  sub_223B54204((uint64_t)v1401, 5, 5, 5, (uint64_t)&v1675, (uint64_t)v1404, COERCE_DOUBLE(0x1CE000001C7), COERCE_DOUBLE(0x1EA000001E3), v706, v707, v708, v709, v710, v711);
  v1403[4] = v1359;
  v1403[5] = v1360;
  v1403[6] = v1361;
  v1403[0] = v1355;
  v1403[1] = v1356;
  v1403[3] = v1358;
  v1403[2] = v1357;
  v1676 = 0;
  v1406[0] = xmmword_224666568;
  v1406[1] = *(_OWORD *)dbl_224666578;
  sub_223B54204((uint64_t)v1403, 4, 4, 6, (uint64_t)&v1676, (uint64_t)v1406, COERCE_DOUBLE(0x1C9000001C8), COERCE_DOUBLE(0x1CD000001CCLL), v712, v713, v714, v715, v716, v717);
  v1405[4] = v1359;
  v1405[5] = v1360;
  v1405[6] = v1361;
  v1405[0] = v1355;
  v1405[1] = v1356;
  v1405[3] = v1358;
  v1405[2] = v1357;
  v1677 = 0x100010001000100;
  v1408[0] = xmmword_224666588;
  v1408[1] = *(_OWORD *)dbl_224666598;
  sub_223B54204((uint64_t)v1405, 4, 4, 7, (uint64_t)&v1677, (uint64_t)v1408, COERCE_DOUBLE(0x180000001C9), COERCE_DOUBLE(0x184000001CDLL), v718, v719, v720, v721, v722, v723);
  v1407[4] = v1359;
  v1407[5] = v1360;
  v1407[6] = v1361;
  v1407[0] = v1355;
  v1407[1] = v1356;
  v1407[3] = v1358;
  v1407[2] = v1357;
  v1678 = 0;
  v1416[0] = xmmword_2246665A8;
  v1416[1] = *(_OWORD *)dbl_2246665B8;
  sub_223B54204((uint64_t)v1407, 4, 5, 6, (uint64_t)&v1678, (uint64_t)v1416, COERCE_DOUBLE(0x1CB000001CALL), COERCE_DOUBLE(0x1CF000001CELL), v724, v725, v726, v727, v728, v729);
  v1413 = v1359;
  v1414 = v1360;
  v1415 = v1361;
  v1409 = v1355;
  v1410 = v1356;
  v1412 = v1358;
  v1411 = v1357;
  v1679 = 0x100010001000100;
  v1418[0] = xmmword_2246665C8;
  v1418[1] = *(_OWORD *)dbl_2246665D8;
  sub_223B54204((uint64_t)&v1409, 4, 5, 7, (uint64_t)&v1679, (uint64_t)v1418, COERCE_DOUBLE(0x182000001CBLL), COERCE_DOUBLE(0x186000001CFLL), v730, v731, v732, v733, v734, v735);
  v1417[4] = v1359;
  v1417[5] = v1360;
  v1417[6] = v1361;
  v1417[0] = v1355;
  v1417[1] = v1356;
  v1417[3] = v1358;
  v1417[2] = v1357;
  v1680 = 0;
  v1420[0] = xmmword_2246665E8;
  v1420[1] = *(_OWORD *)dbl_2246665F8;
  sub_223B54204((uint64_t)v1417, 5, 4, 6, (uint64_t)&v1680, (uint64_t)v1420, COERCE_DOUBLE(0x1CD000001CCLL), COERCE_DOUBLE(0x1E9000001E8), v736, v737, v738, v739, v740, v741);
  v1419[4] = v1359;
  v1419[5] = v1360;
  v1419[6] = v1361;
  v1419[0] = v1355;
  v1419[1] = v1356;
  v1419[3] = v1358;
  v1419[2] = v1357;
  v1681 = 0x100010001000100;
  v1422[0] = xmmword_224666608;
  v1422[1] = *(_OWORD *)dbl_224666618;
  sub_223B54204((uint64_t)v1419, 5, 4, 7, (uint64_t)&v1681, (uint64_t)v1422, COERCE_DOUBLE(0x184000001CDLL), COERCE_DOUBLE(0x1A0000001E9), v742, v743, v744, v745, v746, v747);
  v1421[4] = v1377;
  v1421[5] = v1378;
  v1421[6] = v1379;
  v1421[0] = v1373;
  v1421[1] = v1374;
  v1421[3] = v1376;
  v1421[2] = v1375;
  v1682 = 0;
  v1424[0] = xmmword_224666628;
  v1424[1] = *(_OWORD *)dbl_224666638;
  sub_223B54204((uint64_t)v1421, 5, 5, 6, (uint64_t)&v1682, (uint64_t)v1424, COERCE_DOUBLE(0x1CF000001CELL), COERCE_DOUBLE(0x1EB000001EALL), v748, v749, v750, v751, v752, v753);
  v1423[4] = v1377;
  v1423[5] = v1378;
  v1423[6] = v1379;
  v1423[0] = v1373;
  v1423[1] = v1374;
  v1423[3] = v1376;
  v1423[2] = v1375;
  v1683 = 0x100010001000100;
  v1426[0] = xmmword_224666648;
  v1426[1] = *(_OWORD *)dbl_224666658;
  sub_223B54204((uint64_t)v1423, 5, 5, 7, (uint64_t)&v1683, (uint64_t)v1426, COERCE_DOUBLE(0x186000001CFLL), COERCE_DOUBLE(0x1A2000001EBLL), v754, v755, v756, v757, v758, v759);
  v1425[4] = v1377;
  v1425[5] = v1378;
  v1425[6] = v1379;
  v1425[0] = v1373;
  v1425[1] = v1374;
  v1425[3] = v1376;
  v1425[2] = v1375;
  v1684 = 0;
  v1434[0] = xmmword_224666668;
  v1434[1] = *(_OWORD *)dbl_224666678;
  sub_223B54204((uint64_t)v1425, 4, 6, 4, (uint64_t)&v1684, (uint64_t)v1434, COERCE_DOUBLE(0x1D1000001D0), COERCE_DOUBLE(0x1D5000001D4), v760, v761, v762, v763, v764, v765);
  v1431 = v1377;
  v1432 = v1378;
  v1433 = v1379;
  v1427 = v1373;
  v1428 = v1374;
  v1430 = v1376;
  v1429 = v1375;
  v1685 = 0;
  v1436[0] = xmmword_224666688;
  v1436[1] = *(_OWORD *)dbl_224666698;
  sub_223B54204((uint64_t)&v1427, 4, 6, 5, (uint64_t)&v1685, (uint64_t)v1436, COERCE_DOUBLE(0x1D8000001D1), COERCE_DOUBLE(0x1DC000001D5), v766, v767, v768, v769, v770, v771);
  v1435[4] = v1377;
  v1435[5] = v1378;
  v1435[6] = v1379;
  v1435[0] = v1373;
  v1435[1] = v1374;
  v1435[3] = v1376;
  v1435[2] = v1375;
  v1686 = 0x202000002020000;
  v1438[0] = xmmword_2246666A8;
  v1438[1] = *(_OWORD *)dbl_2246666B8;
  sub_223B54204((uint64_t)v1435, 4, 7, 4, (uint64_t)&v1686, (uint64_t)v1438, COERCE_DOUBLE(0x1D3000001D2), COERCE_DOUBLE(0x1D7000001D6), v772, v773, v774, v775, v776, v777);
  v1437[4] = v1377;
  v1437[5] = v1378;
  v1437[6] = v1379;
  v1437[0] = v1373;
  v1437[1] = v1374;
  v1437[3] = v1376;
  v1437[2] = v1375;
  v1687 = 0x202000002020000;
  v1440[0] = xmmword_2246666C8;
  v1440[1] = *(_OWORD *)dbl_2246666D8;
  sub_223B54204((uint64_t)v1437, 4, 7, 5, (uint64_t)&v1687, (uint64_t)v1440, COERCE_DOUBLE(0x1DA000001D3), COERCE_DOUBLE(0x1DE000001D7), v778, v779, v780, v781, v782, v783);
  v1439[4] = v1395;
  v1439[5] = v1396;
  v1439[6] = v1397;
  v1439[0] = v1391;
  v1439[1] = v1392;
  v1439[3] = v1394;
  v1439[2] = v1393;
  v1688 = 0;
  v1442[0] = xmmword_2246666E8;
  v1442[1] = *(_OWORD *)dbl_2246666F8;
  sub_223B54204((uint64_t)v1439, 5, 6, 4, (uint64_t)&v1688, (uint64_t)v1442, COERCE_DOUBLE(0x1D5000001D4), COERCE_DOUBLE(0x1F1000001F0), v784, v785, v786, v787, v788, v789);
  v1441[4] = v1395;
  v1441[5] = v1396;
  v1441[6] = v1397;
  v1441[0] = v1391;
  v1441[1] = v1392;
  v1441[3] = v1394;
  v1441[2] = v1393;
  v1689 = 0;
  v1444[0] = xmmword_224666708;
  v1444[1] = *(_OWORD *)dbl_224666718;
  sub_223B54204((uint64_t)v1441, 5, 6, 5, (uint64_t)&v1689, (uint64_t)v1444, COERCE_DOUBLE(0x1DC000001D5), COERCE_DOUBLE(0x1F8000001F1), v790, v791, v792, v793, v794, v795);
  v1443[4] = v1395;
  v1443[5] = v1396;
  v1443[6] = v1397;
  v1443[0] = v1391;
  v1443[1] = v1392;
  v1443[3] = v1394;
  v1443[2] = v1393;
  v1690 = 0x202000002020000;
  v1452[0] = xmmword_224666728;
  v1452[1] = *(_OWORD *)dbl_224666738;
  sub_223B54204((uint64_t)v1443, 5, 7, 4, (uint64_t)&v1690, (uint64_t)v1452, COERCE_DOUBLE(0x1D7000001D6), COERCE_DOUBLE(0x1F3000001F2), v796, v797, v798, v799, v800, v801);
  v1449 = v1395;
  v1450 = v1396;
  v1451 = v1397;
  v1445 = v1391;
  v1446 = v1392;
  v1448 = v1394;
  v1447 = v1393;
  v1691 = 0x202000002020000;
  v1454[0] = xmmword_224666748;
  v1454[1] = *(_OWORD *)dbl_224666758;
  sub_223B54204((uint64_t)&v1445, 5, 7, 5, (uint64_t)&v1691, (uint64_t)v1454, COERCE_DOUBLE(0x1DE000001D7), COERCE_DOUBLE(0x1FA000001F3), v802, v803, v804, v805, v806, v807);
  v1453[4] = v1395;
  v1453[5] = v1396;
  v1453[6] = v1397;
  v1453[0] = v1391;
  v1453[1] = v1392;
  v1453[3] = v1394;
  v1453[2] = v1393;
  v1692 = 0;
  v1456[0] = xmmword_224666768;
  v1456[1] = *(_OWORD *)dbl_224666778;
  sub_223B54204((uint64_t)v1453, 4, 6, 6, (uint64_t)&v1692, (uint64_t)v1456, COERCE_DOUBLE(0x1D9000001D8), COERCE_DOUBLE(0x1DD000001DCLL), v808, v809, v810, v811, v812, v813);
  v1455[4] = v1395;
  v1455[5] = v1396;
  v1455[6] = v1397;
  v1455[0] = v1391;
  v1455[1] = v1392;
  v1455[3] = v1394;
  v1455[2] = v1393;
  v1693 = 0x100010001000100;
  v1458[0] = xmmword_224666788;
  v1458[1] = *(_OWORD *)dbl_224666798;
  sub_223B54204((uint64_t)v1455, 4, 6, 7, (uint64_t)&v1693, (uint64_t)v1458, COERCE_DOUBLE(0x190000001D9), COERCE_DOUBLE(0x194000001DDLL), v814, v815, v816, v817, v818, v819);
  v1457[4] = v1413;
  v1457[5] = v1414;
  v1457[6] = v1415;
  v1457[0] = v1409;
  v1457[1] = v1410;
  v1457[3] = v1412;
  v1457[2] = v1411;
  v1694 = 0x202000002020000;
  v1460[0] = xmmword_2246667A8;
  v1460[1] = *(_OWORD *)dbl_2246667B8;
  sub_223B54204((uint64_t)v1457, 4, 7, 6, (uint64_t)&v1694, (uint64_t)v1460, COERCE_DOUBLE(0x1DB000001DALL), COERCE_DOUBLE(0x1DF000001DELL), v820, v821, v822, v823, v824, v825);
  v1459[4] = v1413;
  v1459[5] = v1414;
  v1459[6] = v1415;
  v1459[0] = v1409;
  v1459[1] = v1410;
  v1459[3] = v1412;
  v1459[2] = v1411;
  v1695 = 0x302010003020100;
  v1462[0] = xmmword_2246667C8;
  v1462[1] = *(_OWORD *)dbl_2246667D8;
  sub_223B54204((uint64_t)v1459, 4, 7, 7, (uint64_t)&v1695, (uint64_t)v1462, COERCE_DOUBLE(0x192000001DBLL), COERCE_DOUBLE(0x196000001DFLL), v826, v827, v828, v829, v830, v831);
  v1461[4] = v1413;
  v1461[5] = v1414;
  v1461[6] = v1415;
  v1461[0] = v1409;
  v1461[1] = v1410;
  v1461[3] = v1412;
  v1461[2] = v1411;
  v1696 = 0;
  v1470[0] = xmmword_2246667E8;
  v1470[1] = *(_OWORD *)dbl_2246667F8;
  sub_223B54204((uint64_t)v1461, 5, 6, 6, (uint64_t)&v1696, (uint64_t)v1470, COERCE_DOUBLE(0x1DD000001DCLL), COERCE_DOUBLE(0x1F9000001F8), v832, v833, v834, v835, v836, v837);
  v1467 = v1413;
  v1468 = v1414;
  v1469 = v1415;
  v1463 = v1409;
  v1464 = v1410;
  v1466 = v1412;
  v1465 = v1411;
  v1697 = 0x100010001000100;
  v1472[0] = xmmword_224666808;
  v1472[1] = *(_OWORD *)dbl_224666818;
  sub_223B54204((uint64_t)&v1463, 5, 6, 7, (uint64_t)&v1697, (uint64_t)v1472, COERCE_DOUBLE(0x194000001DDLL), COERCE_DOUBLE(0x1B0000001F9), v838, v839, v840, v841, v842, v843);
  v1471[4] = v1413;
  v1471[5] = v1414;
  v1471[6] = v1415;
  v1471[0] = v1409;
  v1471[1] = v1410;
  v1471[3] = v1412;
  v1471[2] = v1411;
  v1698 = 0x202000002020000;
  v1474[0] = xmmword_224666828;
  v1474[1] = *(_OWORD *)dbl_224666838;
  sub_223B54204((uint64_t)v1471, 5, 7, 6, (uint64_t)&v1698, (uint64_t)v1474, COERCE_DOUBLE(0x1DF000001DELL), COERCE_DOUBLE(0x1FB000001FALL), v844, v845, v846, v847, v848, v849);
  v1473[4] = v1413;
  v1473[5] = v1414;
  v1473[6] = v1415;
  v1473[0] = v1409;
  v1473[1] = v1410;
  v1473[3] = v1412;
  v1473[2] = v1411;
  v1699 = 0x302010003020100;
  v1476[0] = xmmword_224666848;
  v1476[1] = *(_OWORD *)dbl_224666858;
  sub_223B54204((uint64_t)v1473, 5, 7, 7, (uint64_t)&v1699, (uint64_t)v1476, COERCE_DOUBLE(0x196000001DFLL), COERCE_DOUBLE(0x1B2000001FBLL), v850, v851, v852, v853, v854, v855);
  v1475[4] = v1431;
  v1475[5] = v1432;
  v1475[6] = v1433;
  v1475[0] = v1427;
  v1475[1] = v1428;
  v1475[3] = v1430;
  v1475[2] = v1429;
  v1700 = 0;
  v1478[0] = xmmword_224666868;
  v1478[1] = *(_OWORD *)dbl_224666878;
  sub_223B54204((uint64_t)v1475, 6, 4, 4, (uint64_t)&v1700, (uint64_t)v1478, COERCE_DOUBLE(0x1E1000001E0), COERCE_DOUBLE(0x1E5000001E4), v856, v857, v858, v859, v860, v861);
  v1477[4] = v1431;
  v1477[5] = v1432;
  v1477[6] = v1433;
  v1477[0] = v1427;
  v1477[1] = v1428;
  v1477[3] = v1430;
  v1477[2] = v1429;
  v1701 = 0;
  v1480[0] = xmmword_224666888;
  v1480[1] = *(_OWORD *)dbl_224666898;
  sub_223B54204((uint64_t)v1477, 6, 4, 5, (uint64_t)&v1701, (uint64_t)v1480, COERCE_DOUBLE(0x1E8000001E1), COERCE_DOUBLE(0x1EC000001E5), v862, v863, v864, v865, v866, v867);
  v1479[4] = v1431;
  v1479[5] = v1432;
  v1479[6] = v1433;
  v1479[0] = v1427;
  v1479[1] = v1428;
  v1479[3] = v1430;
  v1479[2] = v1429;
  v1702 = 0;
  v1488[0] = xmmword_2246668A8;
  v1488[1] = *(_OWORD *)dbl_2246668B8;
  sub_223B54204((uint64_t)v1479, 6, 5, 4, (uint64_t)&v1702, (uint64_t)v1488, COERCE_DOUBLE(0x1E3000001E2), COERCE_DOUBLE(0x1E7000001E6), v868, v869, v870, v871, v872, v873);
  v1485 = v1431;
  v1486 = v1432;
  v1487 = v1433;
  v1481 = v1427;
  v1482 = v1428;
  v1484 = v1430;
  v1483 = v1429;
  v1703 = 0;
  v1490[0] = xmmword_2246668C8;
  v1490[1] = *(_OWORD *)dbl_2246668D8;
  sub_223B54204((uint64_t)&v1481, 6, 5, 5, (uint64_t)&v1703, (uint64_t)v1490, COERCE_DOUBLE(0x1EA000001E3), COERCE_DOUBLE(0x1EE000001E7), v874, v875, v876, v877, v878, v879);
  v1489[4] = v1431;
  v1489[5] = v1432;
  v1489[6] = v1433;
  v1489[0] = v1427;
  v1489[1] = v1428;
  v1489[3] = v1430;
  v1489[2] = v1429;
  v1704 = 0x404040400000000;
  v1492[0] = xmmword_2246668E8;
  v1492[1] = *(_OWORD *)dbl_2246668F8;
  sub_223B54204((uint64_t)v1489, 7, 4, 4, (uint64_t)&v1704, (uint64_t)v1492, COERCE_DOUBLE(0x1E5000001E4), COERCE_DOUBLE(0xC1000000C0), v880, v881, v882, v883, v884, v885);
  v1491[4] = v1431;
  v1491[5] = v1432;
  v1491[6] = v1433;
  v1491[0] = v1427;
  v1491[1] = v1428;
  v1491[3] = v1430;
  v1491[2] = v1429;
  v1705 = 0x404040400000000;
  v1494[0] = xmmword_224666908;
  v1494[1] = *(_OWORD *)dbl_224666918;
  sub_223B54204((uint64_t)v1491, 7, 4, 5, (uint64_t)&v1705, (uint64_t)v1494, COERCE_DOUBLE(0x1EC000001E5), COERCE_DOUBLE(0xC8000000C1), v886, v887, v888, v889, v890, v891);
  v1493[4] = v1449;
  v1493[5] = v1450;
  v1493[6] = v1451;
  v1493[0] = v1445;
  v1493[1] = v1446;
  v1493[3] = v1448;
  v1493[2] = v1447;
  v1706 = 0x404040400000000;
  v1496[0] = xmmword_224666928;
  v1496[1] = *(_OWORD *)dbl_224666938;
  sub_223B54204((uint64_t)v1493, 7, 5, 4, (uint64_t)&v1706, (uint64_t)v1496, COERCE_DOUBLE(0x1E7000001E6), COERCE_DOUBLE(0xC3000000C2), v892, v893, v894, v895, v896, v897);
  v1495[4] = v1449;
  v1495[5] = v1450;
  v1495[6] = v1451;
  v1495[0] = v1445;
  v1495[1] = v1446;
  v1495[3] = v1448;
  v1495[2] = v1447;
  v1707 = 0x404040400000000;
  v1498[0] = xmmword_224666948;
  v1498[1] = *(_OWORD *)dbl_224666958;
  sub_223B54204((uint64_t)v1495, 7, 5, 5, (uint64_t)&v1707, (uint64_t)v1498, COERCE_DOUBLE(0x1EE000001E7), COERCE_DOUBLE(0xCA000000C3), v898, v899, v900, v901, v902, v903);
  v1497[4] = v1449;
  v1497[5] = v1450;
  v1497[6] = v1451;
  v1497[0] = v1445;
  v1497[1] = v1446;
  v1497[3] = v1448;
  v1497[2] = v1447;
  v1708 = 0;
  v1506[0] = xmmword_224666968;
  v1506[1] = *(_OWORD *)dbl_224666978;
  sub_223B54204((uint64_t)v1497, 6, 4, 6, (uint64_t)&v1708, (uint64_t)v1506, COERCE_DOUBLE(0x1E9000001E8), COERCE_DOUBLE(0x1ED000001ECLL), v904, v905, v906, v907, v908, v909);
  v1503 = v1449;
  v1504 = v1450;
  v1505 = v1451;
  v1499 = v1445;
  v1500 = v1446;
  v1502 = v1448;
  v1501 = v1447;
  v1709 = 0x100010001000100;
  v1508[0] = xmmword_224666988;
  v1508[1] = *(_OWORD *)dbl_224666998;
  sub_223B54204((uint64_t)&v1499, 6, 4, 7, (uint64_t)&v1709, (uint64_t)v1508, COERCE_DOUBLE(0x1A0000001E9), COERCE_DOUBLE(0x1A4000001EDLL), v910, v911, v912, v913, v914, v915);
  v1507[4] = v1449;
  v1507[5] = v1450;
  v1507[6] = v1451;
  v1507[0] = v1445;
  v1507[1] = v1446;
  v1507[3] = v1448;
  v1507[2] = v1447;
  v1710 = 0;
  v1510[0] = xmmword_2246669A8;
  v1510[1] = *(_OWORD *)dbl_2246669B8;
  sub_223B54204((uint64_t)v1507, 6, 5, 6, (uint64_t)&v1710, (uint64_t)v1510, COERCE_DOUBLE(0x1EB000001EALL), COERCE_DOUBLE(0x1EF000001EELL), v916, v917, v918, v919, v920, v921);
  v1509[4] = v1449;
  v1509[5] = v1450;
  v1509[6] = v1451;
  v1509[0] = v1445;
  v1509[1] = v1446;
  v1509[3] = v1448;
  v1509[2] = v1447;
  v1711 = 0x100010001000100;
  v1512[0] = xmmword_2246669C8;
  v1512[1] = *(_OWORD *)dbl_2246669D8;
  sub_223B54204((uint64_t)v1509, 6, 5, 7, (uint64_t)&v1711, (uint64_t)v1512, COERCE_DOUBLE(0x1A2000001EBLL), COERCE_DOUBLE(0x1A6000001EFLL), v922, v923, v924, v925, v926, v927);
  v1511[4] = v1467;
  v1511[5] = v1468;
  v1511[6] = v1469;
  v1511[0] = v1463;
  v1511[1] = v1464;
  v1511[3] = v1466;
  v1511[2] = v1465;
  v1712 = 0x404040400000000;
  v1514[0] = xmmword_2246669E8;
  v1514[1] = *(_OWORD *)dbl_2246669F8;
  sub_223B54204((uint64_t)v1511, 7, 4, 6, (uint64_t)&v1712, (uint64_t)v1514, COERCE_DOUBLE(0x1ED000001ECLL), COERCE_DOUBLE(0xC9000000C8), v928, v929, v930, v931, v932, v933);
  v1513[4] = v1467;
  v1513[5] = v1468;
  v1513[6] = v1469;
  v1513[0] = v1463;
  v1513[1] = v1464;
  v1513[3] = v1466;
  v1513[2] = v1465;
  v1713 = 0x504050401000100;
  v1516[0] = xmmword_224666A08;
  v1516[1] = *(_OWORD *)dbl_224666A18;
  sub_223B54204((uint64_t)v1513, 7, 4, 7, (uint64_t)&v1713, (uint64_t)v1516, COERCE_DOUBLE(0x1A4000001EDLL), COERCE_DOUBLE(0x80000000C9), v934, v935, v936, v937, v938, v939);
  v1515[4] = v1467;
  v1515[5] = v1468;
  v1515[6] = v1469;
  v1515[0] = v1463;
  v1515[1] = v1464;
  v1515[3] = v1466;
  v1515[2] = v1465;
  v1714 = 0x404040400000000;
  v1524[0] = xmmword_224666A28;
  v1524[1] = *(_OWORD *)dbl_224666A38;
  sub_223B54204((uint64_t)v1515, 7, 5, 6, (uint64_t)&v1714, (uint64_t)v1524, COERCE_DOUBLE(0x1EF000001EELL), COERCE_DOUBLE(0xCB000000CALL), v940, v941, v942, v943, v944, v945);
  v1521 = v1467;
  v1522 = v1468;
  v1523 = v1469;
  v1517 = v1463;
  v1518 = v1464;
  v1520 = v1466;
  v1519 = v1465;
  v1715 = 0x504050401000100;
  v1526[0] = xmmword_224666A48;
  v1526[1] = *(_OWORD *)dbl_224666A58;
  sub_223B54204((uint64_t)&v1517, 7, 5, 7, (uint64_t)&v1715, (uint64_t)v1526, COERCE_DOUBLE(0x1A6000001EFLL), COERCE_DOUBLE(0x82000000CBLL), v946, v947, v948, v949, v950, v951);
  v1525[4] = v1467;
  v1525[5] = v1468;
  v1525[6] = v1469;
  v1525[0] = v1463;
  v1525[1] = v1464;
  v1525[3] = v1466;
  v1525[2] = v1465;
  v1716 = 0;
  v1528[0] = xmmword_224666A68;
  v1528[1] = *(_OWORD *)dbl_224666A78;
  sub_223B54204((uint64_t)v1525, 6, 6, 4, (uint64_t)&v1716, (uint64_t)v1528, COERCE_DOUBLE(0x1F1000001F0), COERCE_DOUBLE(0x1F5000001F4), v952, v953, v954, v955, v956, v957);
  v1527[4] = v1467;
  v1527[5] = v1468;
  v1527[6] = v1469;
  v1527[0] = v1463;
  v1527[1] = v1464;
  v1527[3] = v1466;
  v1527[2] = v1465;
  v1717 = 0;
  v1530[0] = xmmword_224666A88;
  v1530[1] = *(_OWORD *)dbl_224666A98;
  sub_223B54204((uint64_t)v1527, 6, 6, 5, (uint64_t)&v1717, (uint64_t)v1530, COERCE_DOUBLE(0x1F8000001F1), COERCE_DOUBLE(0x1FC000001F5), v958, v959, v960, v961, v962, v963);
  v1529[4] = v1485;
  v1529[5] = v1486;
  v1529[6] = v1487;
  v1529[0] = v1481;
  v1529[1] = v1482;
  v1529[3] = v1484;
  v1529[2] = v1483;
  v1718 = 0x202000002020000;
  v1532[0] = xmmword_224666AA8;
  v1532[1] = *(_OWORD *)dbl_224666AB8;
  sub_223B54204((uint64_t)v1529, 6, 7, 4, (uint64_t)&v1718, (uint64_t)v1532, COERCE_DOUBLE(0x1F3000001F2), COERCE_DOUBLE(0x1F7000001F6), v964, v965, v966, v967, v968, v969);
  v1531[4] = v1485;
  v1531[5] = v1486;
  v1531[6] = v1487;
  v1531[0] = v1481;
  v1531[1] = v1482;
  v1531[3] = v1484;
  v1531[2] = v1483;
  v1719 = 0x202000002020000;
  v1534[0] = xmmword_224666AC8;
  v1534[1] = *(_OWORD *)dbl_224666AD8;
  sub_223B54204((uint64_t)v1531, 6, 7, 5, (uint64_t)&v1719, (uint64_t)v1534, COERCE_DOUBLE(0x1FA000001F3), COERCE_DOUBLE(0x1FE000001F7), v970, v971, v972, v973, v974, v975);
  v1533[4] = v1485;
  v1533[5] = v1486;
  v1533[6] = v1487;
  v1533[0] = v1481;
  v1533[1] = v1482;
  v1533[3] = v1484;
  v1533[2] = v1483;
  v1720 = 0x404040400000000;
  v1536[0] = xmmword_224666AE8;
  v1536[1] = *(_OWORD *)dbl_224666AF8;
  sub_223B54204((uint64_t)v1533, 7, 6, 4, (uint64_t)&v1720, (uint64_t)v1536, COERCE_DOUBLE(0x1F5000001F4), COERCE_DOUBLE(0xD1000000D0), v976, v977, v978, v979, v980, v981);
  v1535[4] = v1485;
  v1535[5] = v1486;
  v1535[6] = v1487;
  v1535[0] = v1481;
  v1535[1] = v1482;
  v1535[3] = v1484;
  v1535[2] = v1483;
  v1721 = 0x404040400000000;
  v1538[0] = xmmword_224666B08;
  v1538[1] = *(_OWORD *)dbl_224666B18;
  sub_223B54204((uint64_t)v1535, 7, 6, 5, (uint64_t)&v1721, (uint64_t)v1538, COERCE_DOUBLE(0x1FC000001F5), COERCE_DOUBLE(0xD8000000D1), v982, v983, v984, v985, v986, v987);
  v1537[4] = v1485;
  v1537[5] = v1486;
  v1537[6] = v1487;
  v1537[0] = v1481;
  v1537[1] = v1482;
  v1537[3] = v1484;
  v1537[2] = v1483;
  v1722 = 0x606040402020000;
  v1540[0] = xmmword_224666B28;
  v1540[1] = *(_OWORD *)dbl_224666B38;
  sub_223B54204((uint64_t)v1537, 7, 7, 4, (uint64_t)&v1722, (uint64_t)v1540, COERCE_DOUBLE(0x1F7000001F6), COERCE_DOUBLE(0xD3000000D2), v988, v989, v990, v991, v992, v993);
  v1539[4] = v1485;
  v1539[5] = v1486;
  v1539[6] = v1487;
  v1539[0] = v1481;
  v1539[1] = v1482;
  v1539[3] = v1484;
  v1539[2] = v1483;
  v1723 = 0x606040402020000;
  v1542[0] = xmmword_224666B48;
  v1542[1] = *(_OWORD *)dbl_224666B58;
  sub_223B54204((uint64_t)v1539, 7, 7, 5, (uint64_t)&v1723, (uint64_t)v1542, COERCE_DOUBLE(0x1FE000001F7), COERCE_DOUBLE(0xDA000000D3), v994, v995, v996, v997, v998, v999);
  v1541[4] = v1503;
  v1541[5] = v1504;
  v1541[6] = v1505;
  v1541[0] = v1499;
  v1541[1] = v1500;
  v1541[3] = v1502;
  v1541[2] = v1501;
  v1724 = 0;
  v1544[0] = xmmword_224666B68;
  v1544[1] = *(_OWORD *)dbl_224666B78;
  sub_223B54204((uint64_t)v1541, 6, 6, 6, (uint64_t)&v1724, (uint64_t)v1544, COERCE_DOUBLE(0x1F9000001F8), COERCE_DOUBLE(0x1FD000001FCLL), v1000, v1001, v1002, v1003, v1004, v1005);
  v1543[4] = v1503;
  v1543[5] = v1504;
  v1543[6] = v1505;
  v1543[0] = v1499;
  v1543[1] = v1500;
  v1543[3] = v1502;
  v1543[2] = v1501;
  v1725 = 0x100010001000100;
  v1546[0] = xmmword_224666B88;
  v1546[1] = *(_OWORD *)dbl_224666B98;
  sub_223B54204((uint64_t)v1543, 6, 6, 7, (uint64_t)&v1725, (uint64_t)v1546, COERCE_DOUBLE(0x1B0000001F9), COERCE_DOUBLE(0x1B4000001FDLL), v1006, v1007, v1008, v1009, v1010, v1011);
  v1545[4] = v1503;
  v1545[5] = v1504;
  v1545[6] = v1505;
  v1545[0] = v1499;
  v1545[1] = v1500;
  v1545[3] = v1502;
  v1545[2] = v1501;
  v1726 = 0x202000002020000;
  v1548[0] = xmmword_224666BA8;
  v1548[1] = *(_OWORD *)dbl_224666BB8;
  sub_223B54204((uint64_t)v1545, 6, 7, 6, (uint64_t)&v1726, (uint64_t)v1548, COERCE_DOUBLE(0x1FB000001FALL), COERCE_DOUBLE(0x1FF000001FELL), v1012, v1013, v1014, v1015, v1016, v1017);
  v1547[4] = v1503;
  v1547[5] = v1504;
  v1547[6] = v1505;
  v1547[0] = v1499;
  v1547[1] = v1500;
  v1547[3] = v1502;
  v1547[2] = v1501;
  v1727 = 0x302010003020100;
  v1550[0] = xmmword_224666BC8;
  v1550[1] = *(_OWORD *)dbl_224666BD8;
  sub_223B54204((uint64_t)v1547, 6, 7, 7, (uint64_t)&v1727, (uint64_t)v1550, COERCE_DOUBLE(0x1B2000001FBLL), COERCE_DOUBLE(0x1B6000001FFLL), v1018, v1019, v1020, v1021, v1022, v1023);
  v1549[4] = v1503;
  v1549[5] = v1504;
  v1549[6] = v1505;
  v1549[0] = v1499;
  v1549[1] = v1500;
  v1549[3] = v1502;
  v1549[2] = v1501;
  v1728 = 0x404040400000000;
  v1552[0] = xmmword_224666BE8;
  v1552[1] = *(_OWORD *)dbl_224666BF8;
  sub_223B54204((uint64_t)v1549, 7, 6, 6, (uint64_t)&v1728, (uint64_t)v1552, COERCE_DOUBLE(0x1FD000001FCLL), COERCE_DOUBLE(0xD9000000D8), v1024, v1025, v1026, v1027, v1028, v1029);
  v1551[4] = v1503;
  v1551[5] = v1504;
  v1551[6] = v1505;
  v1551[0] = v1499;
  v1551[1] = v1500;
  v1551[3] = v1502;
  v1551[2] = v1501;
  v1729 = 0x504050401000100;
  v1554[0] = xmmword_224666C08;
  v1554[1] = *(_OWORD *)dbl_224666C18;
  sub_223B54204((uint64_t)v1551, 7, 6, 7, (uint64_t)&v1729, (uint64_t)v1554, COERCE_DOUBLE(0x1B4000001FDLL), COERCE_DOUBLE(0x90000000D9), v1030, v1031, v1032, v1033, v1034, v1035);
  v1553[4] = v1521;
  v1553[5] = v1522;
  v1553[6] = v1523;
  v1553[0] = v1517;
  v1553[1] = v1518;
  v1553[3] = v1520;
  v1553[2] = v1519;
  v1730 = 0x606040402020000;
  v1556[0] = xmmword_224666C28;
  v1556[1] = *(_OWORD *)dbl_224666C38;
  sub_223B54204((uint64_t)v1553, 7, 7, 6, (uint64_t)&v1730, (uint64_t)v1556, COERCE_DOUBLE(0x1FF000001FELL), COERCE_DOUBLE(0xDB000000DALL), v1036, v1037, v1038, v1039, v1040, v1041);
  v1555[4] = v1521;
  v1555[5] = v1522;
  v1555[6] = v1523;
  v1555[0] = v1517;
  v1555[1] = v1518;
  v1555[3] = v1520;
  v1555[2] = v1519;
  v1731[0] = 0x706050403020100;
  v1557[0] = xmmword_224666C48;
  v1557[1] = *(_OWORD *)dbl_224666C58;
  return sub_223B54204((uint64_t)v1555, 7, 7, 7, (uint64_t)v1731, (uint64_t)v1557, COERCE_DOUBLE(0x1B6000001FFLL), COERCE_DOUBLE(0x92000000DBLL), v1042, v1043, v1044, v1045, v1046, v1047);
}

uint64_t sub_223B61034(uint64_t a1, __int128 *a2, unsigned int *a3)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unsigned int *v39;
  uint64_t result;
  _QWORD *v41;
  int v42;
  int v43;
  unint64_t v44;
  size_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  const char *v50;
  size_t v51;
  __int128 *v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void **v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  int v62;
  size_t v63;
  std::__shared_weak_count_vtbl *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  unint64_t v69;
  NSObject *v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  char *v102;
  unint64_t v103;
  uint64_t j;
  char *v105;
  char *v106;
  _BYTE *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  uint64_t i;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  __int16 v121;
  __int16 v122;
  char *v123;
  __int16 v124;
  __int16 v125;
  __int16 v126;
  __int16 v127;
  __int16 v128;
  __int16 v129;
  char *v130;
  unint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  __int16 *v143;
  unint64_t k;
  __int16 v145;
  __int16 v146;
  __int16 v147;
  __int16 v148;
  __int16 v149;
  __int16 v150;
  __int16 v151;
  __int16 v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  const char *__src;
  unint64_t v160;
  _QWORD v161[3];
  int v162;
  const char *v163;
  int v164;
  const char *v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __int128 v171;
  char v172;
  NSObject *v173;
  __int128 v174;
  __int128 v175;
  void *v176[2];
  unint64_t v177;
  char v178;
  uint64_t v179;

  v179 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  if ((*a3 & 0x80000000) == 0)
    goto LABEL_34;
  v7 = *(_QWORD *)(a1 + 20952);
  if (*(_QWORD *)(a1 + 20944) == v7)
  {
    v9 = *(_OWORD **)(a1 + 20928);
    v10 = *(_OWORD **)(a1 + 20920);
    v11 = v9 - v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * v11;
    *a3 = -1431655765 * v11;
    v13 = *(_QWORD *)(a1 + 20936);
    if ((unint64_t)v9 >= v13)
    {
      v15 = v12 + 1;
      if (v12 + 1 > 0x555555555555555)
        sub_22316E078();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v10) >> 4);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x2AAAAAAAAAAAAAALL)
        v17 = 0x555555555555555;
      else
        v17 = v15;
      if (v17 > 0x555555555555555)
        sub_223174E94();
      v18 = 48 * v17;
      v19 = (char *)operator new(48 * v17);
      v20 = &v19[48 * v12];
      *((_OWORD *)v20 + 1) = 0u;
      *((_OWORD *)v20 + 2) = 0u;
      v21 = &v19[v18];
      *(_OWORD *)v20 = 0u;
      *((_DWORD *)v20 + 8) = 1065353216;
      *((_DWORD *)v20 + 10) = 0x80000000;
      v14 = v20 + 48;
      if (v9 == v10)
      {
        *(_QWORD *)(a1 + 20920) = v20;
        *(_QWORD *)(a1 + 20928) = v14;
        *(_QWORD *)(a1 + 20936) = v21;
      }
      else
      {
        v22 = 0;
        do
        {
          v24 = &v20[v22 * 16];
          v25 = &v9[v22];
          v26 = *(_QWORD *)&v9[v22 - 3];
          *((_QWORD *)v25 - 6) = 0;
          *((_QWORD *)v24 - 6) = v26;
          v27 = *((_QWORD *)&v9[v22 - 2] - 1);
          *((_QWORD *)v24 - 5) = v27;
          *((_QWORD *)v25 - 5) = 0;
          v28 = *(_QWORD *)&v9[v22 - 2];
          *(_QWORD *)&v20[v22 * 16 - 32] = v28;
          v29 = (uint64_t)&v20[v22 * 16 - 32];
          v30 = *((_QWORD *)&v9[v22 - 1] - 1);
          *(_QWORD *)(v29 + 8) = v30;
          *(_DWORD *)(v29 + 16) = v9[v22 - 1];
          if (v30)
          {
            v23 = *(_QWORD *)(v28 + 8);
            if ((v27 & (v27 - 1)) != 0)
            {
              if (v23 >= v27)
                v23 %= v27;
            }
            else
            {
              v23 &= v27 - 1;
            }
            *(_QWORD *)(v26 + 8 * v23) = v29;
            *(_QWORD *)&v9[v22 - 2] = 0;
            *((_QWORD *)&v9[v22 - 1] - 1) = 0;
          }
          *((_DWORD *)v24 - 2) = *((_DWORD *)v25 - 2);
          v22 -= 3;
        }
        while (&v9[v22] != v10);
        v9 = *(_OWORD **)(a1 + 20920);
        v31 = *(_QWORD **)(a1 + 20928);
        *(_QWORD *)(a1 + 20920) = &v20[v22 * 16];
        *(_QWORD *)(a1 + 20928) = v14;
        *(_QWORD *)(a1 + 20936) = v21;
        while (v31 != (_QWORD *)v9)
        {
          v32 = (_QWORD *)*(v31 - 4);
          if (v32)
          {
            do
            {
              v33 = (_QWORD *)*v32;
              operator delete(v32);
              v32 = v33;
            }
            while (v33);
          }
          v35 = (void *)*(v31 - 6);
          v31 -= 6;
          v34 = v35;
          *v31 = 0;
          if (v35)
            operator delete(v34);
        }
      }
      if (v9)
        operator delete(v9);
    }
    else
    {
      v9[1] = 0u;
      v9[2] = 0u;
      *v9 = 0u;
      *((_DWORD *)v9 + 8) = 1065353216;
      *((_DWORD *)v9 + 10) = 0x80000000;
      v14 = v9 + 3;
    }
    *(_QWORD *)(a1 + 20928) = v14;
    v5 = *a3;
    if ((*a3 & 0x80000000) == 0)
      goto LABEL_34;
  }
  else
  {
    v8 = *(_DWORD *)(v7 - 4);
    v5 = v8;
    *a3 = v8;
    *(_QWORD *)(a1 + 20952) = v7 - 4;
    if ((v8 & 0x80000000) == 0)
      goto LABEL_34;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1050, (uint64_t)"!VoxelBlockOctreeNode::IsUnknown(info_index)", 44, (uint64_t)"Unknown info index", 18, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_199;
  }
LABEL_34:
  v36 = *(_QWORD *)(a1 + 20920);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 20928) - v36) >> 4) > v5)
    goto LABEL_37;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1051, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid info index", 18, (void (*)(void **))sub_22457406C))
  {
LABEL_199:
    abort();
  }
  v36 = *(_QWORD *)(a1 + 20920);
LABEL_37:
  v172 = *((_BYTE *)a2 + 16);
  v171 = *a2;
  if (v172)
  {
    v37 = (_QWORD *)(v36 + 48 * v5);
    v38 = sub_22342DA5C(v37, (uint64_t)&v171);
    if (!v38)
    {
      v173 = &v171;
      v41 = sub_2238F1DD0((uint64_t)v37, (uint64_t)&v171, (uint64_t)&unk_2245BA939, (_OWORD **)&v173);
      *((_DWORD *)v41 + 8) = 0x80000000;
      v39 = (unsigned int *)(v41 + 4);
      if (!*(_DWORD *)(a1 + 272))
        goto LABEL_133;
      goto LABEL_45;
    }
    v39 = (unsigned int *)(v38 + 4);
    result = *((unsigned int *)v38 + 8);
    if ((result & 0x80000000) == 0)
      return result;
  }
  else
  {
    v39 = (unsigned int *)(v36 + 48 * v5 + 40);
    result = *v39;
    if ((result & 0x80000000) == 0)
      return result;
  }
  if (!*(_DWORD *)(a1 + 272))
    goto LABEL_133;
LABEL_45:
  if (-858993459 * ((*(_QWORD *)(a1 + 20816) - *(_QWORD *)(a1 + 20800)) >> 12)
     + 858993459 * ((*(_QWORD *)(a1 + 20808) - *(_QWORD *)(a1 + 20800)) >> 12)
     + ((*(_QWORD *)(a1 + 20856) - *(_QWORD *)(a1 + 20848)) >> 2))
  {
    goto LABEL_133;
  }
  sub_223B26168(&v168);
  if (**(int **)(v168 + 56) > 4)
    goto LABEL_133;
  v42 = *(unsigned __int8 *)(v168 + 72);
  v43 = *(_BYTE *)(v168 + 72) != 0;
  v44 = sub_22322F254(v168, "OSLogSurrogateAppender", 1, 0);
  if (((v44 == 0) & ~v43) != 0)
    goto LABEL_133;
  v161[0] = &v168;
  v161[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v161[2] = std::chrono::system_clock::now().__d_.__rep_;
  v162 = 4;
  v163 = "unknown file";
  v164 = 284;
  v166 = 0;
  v167 = 0;
  v165 = "unknown function";
  v158 = v168;
  v160 = v44;
  if (*(char *)(v168 + 39) < 0)
  {
    v46 = *(const char **)(v168 + 16);
    v45 = *(_QWORD *)(v168 + 24);
  }
  else
  {
    v45 = *(unsigned __int8 *)(v168 + 39);
    v46 = (const char *)(v168 + 16);
  }
  v157 = v168 + 16;
  v47 = *(_QWORD *)(a1 + 20808);
  v48 = *(_QWORD *)(a1 + 20800);
  v49 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&v173);
    sub_223199C58("com.apple.cv3d", (unint64_t)&v173, byte_255788F40);
    if ((_BYTE)v175 && SHIBYTE(v174) < 0)
      operator delete(v173);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F40[23] >= 0)
    v50 = byte_255788F40;
  else
    v50 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v51 = byte_255788F40[23];
  else
    v51 = *(_QWORD *)&byte_255788F40[8];
  __src = v46;
  v173 = os_log_create(v50, v46);
  v52 = &v174;
  if (v51 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v53 = v42;
  if (v51 >= 0x17)
  {
    v156 = v48;
    v55 = v160;
    v56 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v51 | 7) != 0x17)
      v56 = v51 | 7;
    v57 = v56 + 1;
    v52 = (__int128 *)operator new(v56 + 1);
    *((_QWORD *)&v174 + 1) = v51;
    *(_QWORD *)&v175 = v57 | 0x8000000000000000;
    *(_QWORD *)&v174 = v52;
    v53 = v42;
    v54 = v156;
    goto LABEL_65;
  }
  BYTE7(v175) = v51;
  v54 = v48;
  v55 = v160;
  if (v51)
LABEL_65:
    memmove(v52, v50, v51);
  *((_BYTE *)v52 + v51) = 0;
  BYTE8(v175) = 1;
  v58 = v176;
  if (v45 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v45 >= 0x17)
  {
    v59 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v45 | 7) != 0x17)
      v59 = v45 | 7;
    v60 = v59 + 1;
    v58 = (void **)operator new(v59 + 1);
    v176[1] = (void *)v45;
    v177 = v60 | 0x8000000000000000;
    v176[0] = v58;
  }
  else
  {
    HIBYTE(v177) = v45;
    if (!v45)
      goto LABEL_74;
  }
  memmove(v58, __src, v45);
LABEL_74:
  *((_BYTE *)v58 + v45) = 0;
  v178 = 1;
  v61 = v173;
  if (SHIBYTE(v177) < 0)
    operator delete(v176[0]);
  if (BYTE8(v175) && SBYTE7(v175) < 0)
    operator delete((void *)v174);
  if (v173)
    os_release(v173);
  v62 = -858993459 * ((unint64_t)(v47 - v54) >> 12);
  if (v55 && *(_QWORD *)(v55 + 24))
  {
    v63 = _os_log_pack_size();
    v64 = (std::__shared_weak_count_vtbl *)operator new(v63, (std::align_val_t)8uLL);
    v65 = (std::__shared_weak_count *)operator new();
    v66 = v65;
    v65->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v65->__shared_owners_;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v65->__shared_weak_owners_ = 0;
    v65[1].__vftable = v64;
    v173 = v64;
    *(_QWORD *)&v174 = v64;
    *((_QWORD *)&v174 + 1) = v65;
    do
      v68 = __ldxr(p_shared_owners);
    while (__stxr(v68 + 1, p_shared_owners));
    v175 = 0uLL;
    v176[0] = 0;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v66);
    }
    v70 = v173;
    v71 = (_DWORD *)_os_log_pack_fill();
    *v71 = 67109120;
    v71[1] = v62;
    v72 = operator new();
    v73 = *(unsigned __int8 *)(v158 + 39);
    v74 = v157;
    if ((v73 & 0x80u) != 0)
    {
      v74 = *(_QWORD *)(v158 + 16);
      v73 = *(_QWORD *)(v158 + 24);
    }
    *(_QWORD *)v72 = v70;
    *(_OWORD *)(v72 + 8) = v174;
    v174 = 0uLL;
    *(_OWORD *)(v72 + 24) = v175;
    v175 = 0uLL;
    *(_QWORD *)(v72 + 40) = v74;
    *(_QWORD *)(v72 + 48) = v73;
    *(_BYTE *)(v72 + 56) = 16;
    v169 = 0;
    v170 = v72;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v55 + 24) + 40))(*(_QWORD *)(v55 + 24), &v170);
    v75 = v170;
    v170 = 0;
    if (v75)
    {
      v76 = *(std::__shared_weak_count **)(v75 + 32);
      if (v76)
      {
        v77 = (unint64_t *)&v76->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      v79 = *(std::__shared_weak_count **)(v75 + 16);
      if (v79)
      {
        v80 = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      MEMORY[0x227684CE8](v75, 0x10F0C40B62ED6C6);
      v82 = v169;
      v169 = 0;
      if (v82)
      {
        v83 = *(std::__shared_weak_count **)(v82 + 32);
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        v86 = *(std::__shared_weak_count **)(v82 + 16);
        if (v86)
        {
          v87 = (unint64_t *)&v86->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        MEMORY[0x227684CE8](v82, 0x10F0C40B62ED6C6);
      }
    }
    v89 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
    if (*((_QWORD *)&v175 + 1))
    {
      v90 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    v92 = (std::__shared_weak_count *)*((_QWORD *)&v174 + 1);
    if (*((_QWORD *)&v174 + 1))
    {
      v93 = (unint64_t *)(*((_QWORD *)&v174 + 1) + 8);
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
  }
  else
  {
    os_log_type_enabled(v61, OS_LOG_TYPE_ERROR);
    LODWORD(v173) = 67109120;
    HIDWORD(v173) = -858993459 * ((unint64_t)(v47 - v54) >> 12);
    v95 = (void *)_os_log_send_and_compose_impl();
    if (v95)
      free(v95);
  }
  if (v53)
  {
    sub_22322C138((uint64_t)v161, "Voxel store allocates blocks above capacity %i", -858993459 * ((uint64_t)(*(_QWORD *)(a1 + 20808) - *(_QWORD *)(a1 + 20800)) >> 12));
    sub_223182C08((uint64_t)v161);
  }
  sub_223182C08((uint64_t)v161);
  v96 = v167;
  if (v167)
  {
    v97 = (unint64_t *)&v167->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
LABEL_133:
  v99 = *(_QWORD *)(a1 + 20856);
  if (*(_QWORD *)(a1 + 20848) == v99)
  {
    v102 = *(char **)(a1 + 20808);
    v103 = *(_QWORD *)(a1 + 20816);
    if ((unint64_t)v102 >= v103)
    {
      v107 = *(_BYTE **)(a1 + 20800);
      v108 = 0xCCCCCCCCCCCCCCCDLL * ((v102 - v107) >> 12) + 1;
      if (v108 > 0x3333333333333)
        sub_22316E078();
      v109 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v103 - (_QWORD)v107) >> 12);
      if (2 * v109 > v108)
        v108 = 2 * v109;
      if (v109 >= 0x1999999999999)
        v110 = 0x3333333333333;
      else
        v110 = v108;
      if (v110)
      {
        if (v110 > 0x3333333333333)
          sub_223174E94();
        v111 = (char *)operator new(20480 * v110);
      }
      else
      {
        v111 = 0;
      }
      v112 = &v111[4096 * ((v102 - v107) >> 12)];
      bzero(v112, 0x5000uLL);
      for (i = 0; i != 20480; i += 40)
      {
        v114 = &v112[i];
        *(_QWORD *)v114 = 0x80000000FFFF00;
        *((_WORD *)v114 + 4) = -1;
        *(_QWORD *)(v114 + 10) = 0x80000000FFFF00;
        *((_WORD *)v114 + 9) = -1;
        *(_QWORD *)(v114 + 20) = 0x80000000FFFF00;
        *((_WORD *)v114 + 14) = -1;
        *(_QWORD *)(v114 + 30) = 0x80000000FFFF00;
        *((_WORD *)v114 + 19) = -1;
      }
      v115 = &v111[20480 * v110];
      v106 = v112 + 20480;
      if (v102 != v107)
      {
        do
        {
          v116 = v112;
          v117 = v102;
          v112 -= 20480;
          v102 -= 20480;
          v118 = -20480;
          v119 = -20444;
          do
          {
            v120 = &v116[v118];
            v121 = *(_WORD *)&v117[v118];
            v120[2] = v117[v118 + 2];
            *(_WORD *)v120 = v121;
            v122 = *(_WORD *)&v117[v118 + 3];
            v120[5] = v117[v118 + 5];
            *(_WORD *)(v120 + 3) = v122;
            v123 = &v116[v119];
            *(_DWORD *)(v123 - 30) = *(_DWORD *)&v117[v119 - 30];
            v124 = *(_WORD *)&v117[v118 + 10];
            v120[12] = v117[v118 + 12];
            *((_WORD *)v120 + 5) = v124;
            v125 = *(_WORD *)&v117[v118 + 13];
            v120[15] = v117[v118 + 15];
            *(_WORD *)(v120 + 13) = v125;
            *((_DWORD *)v123 - 5) = *(_DWORD *)&v117[v119 - 20];
            v126 = *(_WORD *)&v117[v118 + 20];
            v120[22] = v117[v118 + 22];
            *((_WORD *)v120 + 10) = v126;
            v127 = *(_WORD *)&v117[v118 + 23];
            v120[25] = v117[v118 + 25];
            *(_WORD *)(v120 + 23) = v127;
            *(_DWORD *)(v123 - 10) = *(_DWORD *)&v117[v119 - 10];
            v128 = *(_WORD *)&v117[v118 + 30];
            v120[32] = v117[v118 + 32];
            *((_WORD *)v120 + 15) = v128;
            v129 = *(_WORD *)&v117[v118 + 33];
            v120[35] = v117[v118 + 35];
            *(_WORD *)(v120 + 33) = v129;
            *(_DWORD *)v123 = *(_DWORD *)&v117[v119];
            v119 += 40;
            v118 += 40;
          }
          while (v118);
        }
        while (v102 != v107);
        v102 = *(char **)(a1 + 20800);
      }
      *(_QWORD *)(a1 + 20800) = v112;
      *(_QWORD *)(a1 + 20808) = v106;
      *(_QWORD *)(a1 + 20816) = v115;
      if (v102)
        operator delete(v102);
    }
    else
    {
      bzero(*(void **)(a1 + 20808), 0x5000uLL);
      for (j = 0; j != 20480; j += 40)
      {
        v105 = &v102[j];
        *(_QWORD *)v105 = 0x80000000FFFF00;
        *((_WORD *)v105 + 4) = -1;
        *(_QWORD *)(v105 + 10) = 0x80000000FFFF00;
        *((_WORD *)v105 + 9) = -1;
        *(_QWORD *)(v105 + 20) = 0x80000000FFFF00;
        *((_WORD *)v105 + 14) = -1;
        *(_QWORD *)(v105 + 30) = 0x80000000FFFF00;
        *((_WORD *)v105 + 19) = -1;
      }
      v106 = v102 + 20480;
    }
    *(_QWORD *)(a1 + 20808) = v106;
    v130 = *(char **)(a1 + 20832);
    v131 = *(_QWORD *)(a1 + 20840);
    if ((unint64_t)v130 < v131)
    {
      *(_QWORD *)v130 = 0;
      *((_QWORD *)v130 + 1) = 0;
      v132 = (uint64_t)(v130 + 16);
      goto LABEL_176;
    }
    v133 = *(char **)(a1 + 20824);
    v134 = (v130 - v133) >> 4;
    v135 = v134 + 1;
    if ((unint64_t)(v134 + 1) >> 60)
      sub_22316E078();
    v136 = v131 - (_QWORD)v133;
    if (v136 >> 3 > v135)
      v135 = v136 >> 3;
    if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF0)
      v137 = 0xFFFFFFFFFFFFFFFLL;
    else
      v137 = v135;
    if (v137)
    {
      if (v137 >> 60)
        sub_223174E94();
      v138 = (char *)operator new(16 * v137);
      v139 = &v138[16 * v134];
      v140 = &v138[16 * v137];
      *(_QWORD *)v139 = 0;
      *((_QWORD *)v139 + 1) = 0;
      v132 = (uint64_t)(v139 + 16);
      if (v130 == v133)
        goto LABEL_174;
    }
    else
    {
      v139 = (char *)(16 * v134);
      v140 = 0;
      *(_QWORD *)v139 = 0;
      *((_QWORD *)v139 + 1) = 0;
      v132 = 16 * v134 + 16;
      if (v130 == v133)
        goto LABEL_174;
    }
    do
    {
      *((_OWORD *)v139 - 1) = *((_OWORD *)v130 - 1);
      v139 -= 16;
      v130 -= 16;
    }
    while (v130 != v133);
    v130 = *(char **)(a1 + 20824);
LABEL_174:
    *(_QWORD *)(a1 + 20824) = v139;
    *(_QWORD *)(a1 + 20832) = v132;
    *(_QWORD *)(a1 + 20840) = v140;
    if (v130)
      operator delete(v130);
LABEL_176:
    *(_QWORD *)(a1 + 20832) = v132;
    v100 = -858993459 * ((*(_QWORD *)(a1 + 20808) - *(_QWORD *)(a1 + 20800)) >> 12) - 1;
    *v39 = v100;
    if ((v100 & 0x80000000) == 0)
      goto LABEL_178;
    goto LABEL_177;
  }
  v101 = *(_DWORD *)(v99 - 4);
  v100 = v101;
  *v39 = v101;
  *(_QWORD *)(a1 + 20856) = v99 - 4;
  if ((v101 & 0x80000000) == 0)
    goto LABEL_178;
LABEL_177:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 194, (uint64_t)"!VoxelBlockOctreeNode::IsUnknown(block_index)", 45, (uint64_t)"Unknown block index", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_178:
  v141 = *(_QWORD *)(a1 + 20800);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 20808) - v141) >> 12) <= v100)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 195, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v141 = *(_QWORD *)(a1 + 20800);
  }
  v142 = v141 + 20480 * v100;
  v143 = (__int16 *)(a1 + 276);
  for (k = 513; k > 1; --k)
  {
    if ((__int16 *)v142 != v143)
    {
      v145 = *v143;
      *(_BYTE *)(v142 + 2) = *(_BYTE *)(a1 + 278);
      *(_WORD *)v142 = v145;
      v146 = *(_WORD *)(a1 + 279);
      *(_BYTE *)(v142 + 5) = *(_BYTE *)(a1 + 281);
      *(_WORD *)(v142 + 3) = v146;
      *(_DWORD *)(v142 + 6) = *(_DWORD *)(a1 + 282);
      v147 = *(_WORD *)(a1 + 286);
      *(_BYTE *)(v142 + 12) = *(_BYTE *)(a1 + 288);
      *(_WORD *)(v142 + 10) = v147;
      v148 = *(_WORD *)(a1 + 289);
      *(_BYTE *)(v142 + 15) = *(_BYTE *)(a1 + 291);
      *(_WORD *)(v142 + 13) = v148;
      *(_DWORD *)(v142 + 16) = *(_DWORD *)(a1 + 292);
      v149 = *(_WORD *)(a1 + 296);
      *(_BYTE *)(v142 + 22) = *(_BYTE *)(a1 + 298);
      *(_WORD *)(v142 + 20) = v149;
      v150 = *(_WORD *)(a1 + 299);
      *(_BYTE *)(v142 + 25) = *(_BYTE *)(a1 + 301);
      *(_WORD *)(v142 + 23) = v150;
      *(_DWORD *)(v142 + 26) = *(_DWORD *)(a1 + 302);
      v151 = *(_WORD *)(a1 + 306);
      *(_BYTE *)(v142 + 32) = *(_BYTE *)(a1 + 308);
      *(_WORD *)(v142 + 30) = v151;
      v152 = *(_WORD *)(a1 + 309);
      *(_BYTE *)(v142 + 35) = *(_BYTE *)(a1 + 311);
      *(_WORD *)(v142 + 33) = v152;
      *(_DWORD *)(v142 + 36) = *(_DWORD *)(a1 + 312);
    }
    v142 += 40;
  }
  v153 = *v39;
  if ((v153 & 0x80000000) != 0
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 212, (uint64_t)"!VoxelBlockOctreeNode::IsUnknown(block_index)", 45, (uint64_t)"Unknown mask index", 18, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v154 = *(_QWORD *)(a1 + 20824);
  if (v153 >= (*(_QWORD *)(a1 + 20832) - v154) >> 4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 213, (uint64_t)"block_index < allocated_voxel_masks_.size()", 43, (uint64_t)"Invalid mask index", 18, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v154 = *(_QWORD *)(a1 + 20824);
  }
  *(_QWORD *)(v154 + 16 * v153) = 0;
  v155 = *v39;
  if ((v155 & 0x80000000) != 0)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 230, (uint64_t)"!VoxelBlockOctreeNode::IsUnknown(block_index)", 45, (uint64_t)"Unknown mask index", 18, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v154 = *(_QWORD *)(a1 + 20824);
    if (v155 < (*(_QWORD *)(a1 + 20832) - v154) >> 4)
      goto LABEL_197;
    goto LABEL_195;
  }
  if (v155 >= (*(_QWORD *)(a1 + 20832) - v154) >> 4)
  {
LABEL_195:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 231, (uint64_t)"block_index < allocated_voxel_masks_.size()", 43, (uint64_t)"Invalid mask index", 18, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v154 = *(_QWORD *)(a1 + 20824);
  }
LABEL_197:
  *(_QWORD *)(v154 + 16 * v155 + 8) = 0;
  return *v39;
}

void sub_223B621A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  if (*(_BYTE *)(v9 - 152))
  {
    if (*(char *)(v9 - 153) < 0)
      operator delete(*(void **)(v9 - 176));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B621E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;

  sub_22319A054(&a28);
  sub_22319A054(&a27);
  sub_223199DE8(v28 - 176);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_223B62214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  MEMORY[0x227684CE8](v9, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B62240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B62254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223B622CC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[26];
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = (void *)v2[24];
      v2[24] = 0;
      if (v5)
        operator delete(v5);
    }
    operator delete(v2);
  }
  return a1;
}

void sub_223B62338(uint64_t a1, unsigned int a2)
{
  double v4;
  std::mutex *v5;
  uint64_t v6;

  if (a2 <= 1)
    v4 = 0.0;
  else
    v4 = 1.0;
  v5 = (std::mutex *)(a1 + 6376);
  std::mutex::lock((std::mutex *)(a1 + 6376));
  if (*(_BYTE *)(a1 + 6448))
    v4 = *(double *)(a1 + 6440) + v4;
  else
    *(_BYTE *)(a1 + 6448) = 1;
  *(double *)(a1 + 6440) = v4;
  *(double *)(a1 + 6456) = *(double *)(a1 + 6456) + 1.0;
  std::mutex::unlock(v5);
  std::mutex::lock((std::mutex *)(a1 + 72));
  if (*(_BYTE *)(a1 + 140))
    v6 = *(_DWORD *)(a1 + 136) != a2;
  else
    v6 = 0;
  std::mutex::lock((std::mutex *)(a1 + 6496));
  *(_QWORD *)(a1 + 6560) += v6;
  std::mutex::unlock((std::mutex *)(a1 + 6496));
  *(_DWORD *)(a1 + 136) = a2;
  *(_BYTE *)(a1 + 140) = 1;
  std::mutex::unlock((std::mutex *)(a1 + 72));
}

void sub_223B6242C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223B62440(uint64_t result, int a2, int a3, __int16 *a4)
{
  _QWORD *v7;
  int v8;
  __int16 v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  size_t v13;
  void **v14;
  unint64_t v15;
  const void **v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  size_t v23;
  const char *v24;
  unsigned __int8 v25;
  const char *v26;
  size_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  size_t v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  size_t v39;
  size_t v40;
  _QWORD *v41;
  void *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  void *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  const char *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  float *v100;
  float32x4_t v101;
  float32x4_t v102;
  int32x2_t *v103;
  unsigned int v104;
  int32x2_t v105;
  float32x4_t v106;
  unsigned int v107;
  uint64_t v108;
  _DWORD *v109;
  __int32 v110;
  int v111;
  __int32 v112;
  int v113;
  int v114;
  int v115;
  unsigned int v116;
  int v117;
  char *v118;
  int v119;
  int v120;
  uint64_t v121;
  int v122;
  char *v123;
  int v124;
  int v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  int v137;
  int v138;
  int v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  const char *__src;
  int v146;
  char *__s;
  uint64_t v148;
  _QWORD v149[3];
  int v150;
  const char *v151;
  int v152;
  const char *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  void *__dst[2];
  int64_t v157;
  uint64_t v158;
  int v159;
  _QWORD v160[3];
  _QWORD v161[3];
  uint64_t v162;
  unint64_t v163;
  void *__p;
  char v165;
  unint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  std::__shared_weak_count *v171;
  char *v172;
  std::__shared_weak_count *v173;
  _QWORD *v174;
  __int128 v175;
  _BYTE v176[24];
  __int128 v177;
  void *v178[2];
  unint64_t v179;
  char v180;
  _QWORD v181[5];

  v7 = (_QWORD *)result;
  v181[2] = *MEMORY[0x24BDAC8D0];
  v148 = *(_QWORD *)(result + 8);
  v8 = (unsigned __int16)a4[3];
  v9 = *a4;
  if (a4[3] && !(*a4 + a4[1]))
  {
    sub_223AF0EC4(&v169);
    result = v169;
    if (**(int **)(v169 + 56) > 3
      || ((v10 = *(unsigned __int8 *)(v169 + 72), result = sub_22322F254(v169, "OSLogSurrogateAppender", 1, 0), !v10)
        ? (v11 = result == 0)
        : (v11 = 0),
          v11))
    {
LABEL_144:
      v9 = *a4;
      v8 = (unsigned __int16)a4[3];
      goto LABEL_145;
    }
    v12 = result;
    sub_223195210((uint64_t)&v158);
    sub_2231813E8(v160, (uint64_t)"Voxel has zero contribution but non zero keyframes", 50);
    if ((v167 & 0x10) != 0)
    {
      v15 = v166;
      if (v166 < v163)
      {
        v166 = v163;
        v15 = v163;
      }
      v16 = (const void **)&v162;
    }
    else
    {
      if ((v167 & 8) == 0)
      {
        v13 = 0;
        HIBYTE(v157) = 0;
        v14 = __dst;
        goto LABEL_23;
      }
      v16 = (const void **)v161;
      v15 = v161[2];
    }
    v17 = *v16;
    v13 = v15 - (_QWORD)*v16;
    if (v13 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v13 >= 0x17)
    {
      v18 = v12;
      v19 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v19 = v13 | 7;
      v20 = v19 + 1;
      v14 = (void **)operator new(v19 + 1);
      __dst[1] = (void *)v13;
      v157 = v20 | 0x8000000000000000;
      __dst[0] = v14;
      v12 = v18;
    }
    else
    {
      HIBYTE(v157) = v15 - *(_BYTE *)v16;
      v14 = __dst;
      if (!v13)
      {
LABEL_23:
        *((_BYTE *)v14 + v13) = 0;
        v149[0] = &v169;
        v149[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v149[2] = std::chrono::system_clock::now().__d_.__rep_;
        v150 = 3;
        v151 = "unknown file";
        v152 = 40;
        v154 = 0;
        v155 = 0;
        v153 = "unknown function";
        v21 = __dst;
        if (v157 < 0)
          v21 = (void **)__dst[0];
        __s = (char *)v21;
        v22 = *(_QWORD *)v149[0];
        if (*(char *)(*(_QWORD *)v149[0] + 39) < 0)
        {
          v24 = *(const char **)(v22 + 16);
          v23 = *(_QWORD *)(v22 + 24);
        }
        else
        {
          v23 = *(unsigned __int8 *)(*(_QWORD *)v149[0] + 39);
          v24 = (const char *)(*(_QWORD *)v149[0] + 16);
        }
        v143 = *(_QWORD *)v149[0];
        v144 = *(_QWORD *)v149[0] + 16;
        v146 = v10;
        v25 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v176);
          sub_223199C58("com.apple.cv3d", (unint64_t)v176, byte_255788F40);
          if ((_BYTE)v177 && (v176[23] & 0x80000000) != 0)
            operator delete(*(void **)v176);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F40[23] >= 0)
          v26 = byte_255788F40;
        else
          v26 = *(const char **)byte_255788F40;
        if (byte_255788F40[23] >= 0)
          v27 = byte_255788F40[23];
        else
          v27 = *(_QWORD *)&byte_255788F40[8];
        __src = v24;
        *(_QWORD *)v176 = os_log_create(v26, v24);
        v28 = &v176[8];
        if (v27 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v27 >= 0x17)
        {
          v29 = v12;
          v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v27 | 7) != 0x17)
            v30 = v27 | 7;
          v31 = v30 + 1;
          v28 = operator new(v30 + 1);
          *(_QWORD *)&v176[16] = v27;
          *(_QWORD *)&v177 = v31 | 0x8000000000000000;
          *(_QWORD *)&v176[8] = v28;
          v12 = v29;
        }
        else
        {
          BYTE7(v177) = v27;
          if (!v27)
          {
LABEL_43:
            v28[v27] = 0;
            BYTE8(v177) = 1;
            v32 = v178;
            if (v23 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v23 >= 0x17)
            {
              v33 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v23 | 7) != 0x17)
                v33 = v23 | 7;
              v34 = v33 + 1;
              v32 = (void **)operator new(v33 + 1);
              v178[1] = (void *)v23;
              v179 = v34 | 0x8000000000000000;
              v178[0] = v32;
            }
            else
            {
              HIBYTE(v179) = v23;
              if (!v23)
              {
LABEL_51:
                *((_BYTE *)v32 + v23) = 0;
                v180 = 1;
                v35 = *(NSObject **)v176;
                if (SHIBYTE(v179) < 0)
                  operator delete(v178[0]);
                if (BYTE8(v177) && SBYTE7(v177) < 0)
                  operator delete(*(void **)&v176[8]);
                if (*(_QWORD *)v176)
                  os_release(*(void **)v176);
                if (!v12 || !*(_QWORD *)(v12 + 24))
                {
                  os_log_type_enabled(v35, OS_LOG_TYPE_INFO);
                  *(_DWORD *)v176 = 136315138;
                  *(_QWORD *)&v176[4] = __s;
                  v42 = (void *)_os_log_send_and_compose_impl();
                  v43 = v146;
                  if (v42)
                    free(v42);
                  goto LABEL_130;
                }
                v36 = _os_log_pack_size();
                v37 = (std::__shared_weak_count_vtbl *)operator new(v36, (std::align_val_t)8uLL);
                v38 = (std::__shared_weak_count *)operator new();
                v38->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v38->__shared_owners_ = 0;
                v38->__shared_weak_owners_ = 0;
                v38[1].__vftable = v37;
                *(_QWORD *)&v170 = v37;
                *((_QWORD *)&v170 + 1) = v37;
                v172 = 0;
                v173 = 0;
                v171 = v38;
                v39 = strlen(__s);
                if (v39 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v40 = v39;
                if (v39 >= 0x17)
                {
                  v44 = v12;
                  v45 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v39 | 7) != 0x17)
                    v45 = v39 | 7;
                  v46 = v45 + 1;
                  v41 = operator new(v45 + 1);
                  *(_QWORD *)&v175 = v40;
                  *((_QWORD *)&v175 + 1) = v46 | 0x8000000000000000;
                  v174 = v41;
                  v12 = v44;
                }
                else
                {
                  HIBYTE(v175) = v39;
                  v41 = &v174;
                  if (!v39)
                  {
LABEL_70:
                    *((_BYTE *)v41 + v40) = 0;
                    v47 = v174;
                    v181[0] = v175;
                    *(_QWORD *)((char *)v181 + 7) = *(_QWORD *)((char *)&v175 + 7);
                    v48 = HIBYTE(v175);
                    v49 = operator new(0x38uLL);
                    v49[1] = 0;
                    v49[2] = 0;
                    v49[3] = off_24EC1FA48;
                    *v49 = &off_24EC1F9F8;
                    v50 = v181[0];
                    v49[4] = v47;
                    v49[5] = v50;
                    *(_QWORD *)((char *)v49 + 47) = *(_QWORD *)((char *)v181 + 7);
                    *((_BYTE *)v49 + 55) = v48;
                    v181[0] = 0;
                    *(_QWORD *)((char *)v181 + 7) = 0;
                    v51 = v173;
                    v172 = (char *)(v49 + 3);
                    v173 = (std::__shared_weak_count *)v49;
                    if (v51)
                    {
                      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
                      do
                        v53 = __ldaxr(p_shared_owners);
                      while (__stlxr(v53 - 1, p_shared_owners));
                      if (!v53)
                      {
                        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                        std::__shared_weak_count::__release_weak(v51);
                      }
                    }
                    *(_OWORD *)v176 = v170;
                    v54 = v172;
                    *(_QWORD *)&v176[16] = v171;
                    if (v171)
                    {
                      v55 = (unint64_t *)&v171->__shared_owners_;
                      do
                        v56 = __ldxr(v55);
                      while (__stxr(v56 + 1, v55));
                    }
                    v57 = v173;
                    *(_QWORD *)&v177 = v54;
                    *((_QWORD *)&v177 + 1) = v173;
                    if (v173)
                    {
                      v58 = (unint64_t *)&v173->__shared_owners_;
                      do
                        v59 = __ldxr(v58);
                      while (__stxr(v59 + 1, v58));
                      v178[0] = v54;
                      do
                        v60 = __ldaxr(v58);
                      while (__stlxr(v60 - 1, v58));
                      if (!v60)
                      {
                        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                        std::__shared_weak_count::__release_weak(v57);
                      }
                    }
                    else
                    {
                      v178[0] = v54;
                    }
                    v61 = v171;
                    if (v171)
                    {
                      v62 = (unint64_t *)&v171->__shared_owners_;
                      do
                        v63 = __ldaxr(v62);
                      while (__stlxr(v63 - 1, v62));
                      if (!v63)
                      {
                        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                        std::__shared_weak_count::__release_weak(v61);
                      }
                    }
                    v64 = *(_QWORD *)v176;
                    if (*((char *)v178[0] + 31) >= 0)
                      v65 = (char *)v178[0] + 8;
                    else
                      v65 = (char *)*((_QWORD *)v178[0] + 1);
                    v66 = _os_log_pack_fill();
                    *(_DWORD *)v66 = 136315138;
                    *(_QWORD *)(v66 + 4) = v65;
                    v67 = operator new();
                    v68 = *(unsigned __int8 *)(v143 + 39);
                    v69 = *(_QWORD *)(v143 + 16);
                    v70 = *(_QWORD *)(v143 + 24);
                    v71 = v177;
                    *(_OWORD *)(v67 + 8) = *(_OWORD *)&v176[8];
                    if ((v68 & 0x80u) != 0)
                      v68 = v70;
                    else
                      v69 = v144;
                    *(_QWORD *)v67 = v64;
                    *(_QWORD *)&v176[8] = 0;
                    *(_QWORD *)&v176[16] = 0;
                    *(_OWORD *)(v67 + 24) = v71;
                    v177 = 0uLL;
                    *(_QWORD *)(v67 + 40) = v69;
                    *(_QWORD *)(v67 + 48) = v68;
                    *(_BYTE *)(v67 + 56) = 1;
                    v174 = 0;
                    *(_QWORD *)&v170 = v67;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v12 + 24) + 40))(*(_QWORD *)(v12 + 24), &v170);
                    v72 = v170;
                    *(_QWORD *)&v170 = 0;
                    v43 = v146;
                    if (v72)
                    {
                      v73 = *(std::__shared_weak_count **)(v72 + 32);
                      if (v73)
                      {
                        v74 = (unint64_t *)&v73->__shared_owners_;
                        do
                          v75 = __ldaxr(v74);
                        while (__stlxr(v75 - 1, v74));
                        if (!v75)
                        {
                          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                          std::__shared_weak_count::__release_weak(v73);
                        }
                      }
                      v76 = *(std::__shared_weak_count **)(v72 + 16);
                      if (v76)
                      {
                        v77 = (unint64_t *)&v76->__shared_owners_;
                        do
                          v78 = __ldaxr(v77);
                        while (__stlxr(v78 - 1, v77));
                        if (!v78)
                        {
                          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                          std::__shared_weak_count::__release_weak(v76);
                        }
                      }
                      MEMORY[0x227684CE8](v72, 0x10F0C40B62ED6C6);
                      v79 = v174;
                      v174 = 0;
                      if (v79)
                      {
                        v80 = (std::__shared_weak_count *)v79[4];
                        if (v80)
                        {
                          v81 = (unint64_t *)&v80->__shared_owners_;
                          do
                            v82 = __ldaxr(v81);
                          while (__stlxr(v82 - 1, v81));
                          if (!v82)
                          {
                            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                            std::__shared_weak_count::__release_weak(v80);
                          }
                        }
                        v83 = (std::__shared_weak_count *)v79[2];
                        if (v83)
                        {
                          v84 = (unint64_t *)&v83->__shared_owners_;
                          do
                            v85 = __ldaxr(v84);
                          while (__stlxr(v85 - 1, v84));
                          if (!v85)
                          {
                            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                            std::__shared_weak_count::__release_weak(v83);
                          }
                        }
                        MEMORY[0x227684CE8](v79, 0x10F0C40B62ED6C6);
                      }
                    }
                    v86 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
                    if (*((_QWORD *)&v177 + 1))
                    {
                      v87 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
                      do
                        v88 = __ldaxr(v87);
                      while (__stlxr(v88 - 1, v87));
                      if (!v88)
                      {
                        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                        std::__shared_weak_count::__release_weak(v86);
                      }
                    }
                    v89 = *(std::__shared_weak_count **)&v176[16];
                    if (*(_QWORD *)&v176[16])
                    {
                      v90 = (unint64_t *)(*(_QWORD *)&v176[16] + 8);
                      do
                        v91 = __ldaxr(v90);
                      while (__stlxr(v91 - 1, v90));
                      if (!v91)
                      {
                        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                        std::__shared_weak_count::__release_weak(v89);
                      }
                    }
LABEL_130:
                    if (v43)
                    {
                      v92 = (const char *)__dst;
                      if (v157 < 0)
                        v92 = (const char *)__dst[0];
                      sub_22322C138((uint64_t)v149, "%s", v92);
                      sub_223182C08((uint64_t)v149);
                    }
                    sub_223182C08((uint64_t)v149);
                    v93 = v155;
                    if (v155)
                    {
                      v94 = (unint64_t *)&v155->__shared_owners_;
                      do
                        v95 = __ldaxr(v94);
                      while (__stlxr(v95 - 1, v94));
                      if (!v95)
                      {
                        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                        std::__shared_weak_count::__release_weak(v93);
                      }
                    }
                    if (SHIBYTE(v157) < 0)
                      operator delete(__dst[0]);
                    v158 = *MEMORY[0x24BEDB7F0];
                    v96 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(uint64_t *)((char *)&v158 + *(_QWORD *)(v158 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    v160[0] = v96;
                    v160[1] = MEMORY[0x24BEDB848] + 16;
                    if (v165 < 0)
                      operator delete(__p);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    result = MEMORY[0x227684BE0](&v168);
                    goto LABEL_144;
                  }
                }
                memcpy(v41, __s, v40);
                goto LABEL_70;
              }
            }
            memmove(v32, __src, v23);
            goto LABEL_51;
          }
        }
        memmove(v28, v26, v27);
        goto LABEL_43;
      }
    }
    memmove(v14, v17, v13);
    goto LABEL_23;
  }
LABEL_145:
  if (v8 + v9 + a4[1] + *((_DWORD *)a4 + 2) >= 1)
  {
    v97 = *v7;
    v98 = *(_DWORD *)(*v7 + 4) + a3;
    LODWORD(v158) = *(_DWORD *)*v7 + a2;
    HIDWORD(v158) = v98;
    v99 = *(_DWORD *)(v97 + 8);
    v159 = v99;
    v100 = (float *)(v148 + 208);
    result = (uint64_t)sub_223B63730((float *)(v148 + 208), (int *)&v158, (uint64_t)&v158);
    v103 = (int32x2_t *)result;
    if (*(__int16 *)(result + 28) < *a4)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterMap.hpp", 50, (uint64_t)"cluster_sum_voxel.occupied >= voxel.occupied", 44, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
        abort();
    }
    if (v103[3].i16[3] < a4[1])
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterMap.hpp", 51, (uint64_t)"cluster_sum_voxel.free >= voxel.free", 36, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
        abort();
    }
    if (v103[4].i16[0] < a4[2])
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterMap.hpp", 52, (uint64_t)"cluster_sum_voxel.clutter >= voxel.clutter", 42, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
        abort();
    }
    v104 = v103[4].u16[1];
    if (v104 < (unsigned __int16)a4[3])
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterMap.hpp", 53, (uint64_t)"cluster_sum_voxel.keyframes >= voxel.keyframes", 46, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C);
      if ((result & 1) != 0)
        abort();
      LOWORD(v104) = v103[4].i16[1];
    }
    v103[3].i16[2] -= *a4;
    v103[3].i16[3] -= a4[1];
    v103[4].i16[0] -= a4[2];
    v105 = v103[5];
    *(int32x2_t *)v101.f32 = v103[6];
    v101.i32[2] = v103[7].i32[0];
    v102.i64[0] = *(_QWORD *)(a4 + 10);
    v102.i32[2] = *((_DWORD *)a4 + 7);
    v106 = vsubq_f32(v101, v102);
    v103[7].i32[0] = v106.i32[2];
    v103[6] = *(int32x2_t *)v106.f32;
    v103[4].i16[1] = v104 - a4[3];
    v103[5] = vsub_s32(v105, *(int32x2_t *)(a4 + 6));
    v107 = v103[9].u32[1];
    if (v107 != -1)
    {
      v108 = v7[2];
      if (*(_BYTE *)(v108 + 8))
      {
        v109 = *(_DWORD **)v108;
        v98 = HIDWORD(v158);
        if (*v109 > (int)v158 || v109[2] < (int)v158 || v109[1] > SHIDWORD(v158) || v109[3] < SHIDWORD(v158))
        {
          result = (uint64_t)sub_223AD5A88(v148, v107);
          *(_DWORD *)(result + 264) -= *((_DWORD *)a4 + 13);
          *(_DWORD *)(result + 268) -= *((_DWORD *)a4 + 14);
          *(_DWORD *)(result + 272) -= *((_DWORD *)a4 + 15);
          *(_DWORD *)(result + 276) -= (unsigned __int16)a4[3];
          *(int32x2_t *)(result + 432) = vsub_s32(*(int32x2_t *)(result + 432), *(int32x2_t *)(a4 + 6));
        }
      }
    }
    v110 = v103[10].i32[1];
    v111 = v103[10].i32[0] - *((_DWORD *)a4 + 13);
    v103[10].i32[0] = v111;
    v112 = v110 - *((_DWORD *)a4 + 14);
    v103[10].i32[1] = v112;
    v113 = v103[11].i32[0] - *((_DWORD *)a4 + 15);
    v103[11].i32[0] = v113;
    if (v111 < 0 || v112 < 0 || v113 < 0)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterMap.hpp", 76, (uint64_t)"(cluster_sum_voxel.semantic_contribution.e() >= 0).all()", 56, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
        abort();
    }
    if (a4[3])
    {
      v114 = v158;
      v115 = -2;
      while (1)
      {
        v116 = v115 >= 0 ? v115 : -v115;
        if (v116 <= 1)
          break;
        if (v116 == 2)
        {
          v117 = v114 + v115;
LABEL_182:
          *(_DWORD *)v176 = v117;
          *(_DWORD *)&v176[4] = v98 - 1;
          *(_DWORD *)&v176[8] = v99;
          v123 = sub_223B63730(v100, (int *)v176, (uint64_t)v176);
          v124 = *((_DWORD *)v123 + 9) - (unsigned __int16)a4[3];
          *((_DWORD *)v123 + 9) = v124;
          v125 = v124 + *((__int16 *)v123 + 14) + *((__int16 *)v123 + 15);
          if ((v125 + *((unsigned __int16 *)v123 + 17) < 0) ^ __OFADD__(v125, *((unsigned __int16 *)v123 + 17)) | (v125 + *((unsigned __int16 *)v123 + 17) == 0))
          {
            v126 = v148;
            v127 = *(_DWORD *)(v148 + 248);
            if (!v127)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterMap.hpp", 91, (uint64_t)"count_observed_voxels_ > 0", 26, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_219;
              }
              v126 = v148;
              v127 = *(_DWORD *)(v148 + 248);
            }
            *(_DWORD *)(v126 + 248) = v127 - 1;
          }
          v128 = 1;
          goto LABEL_189;
        }
        if (v116 > 3)
          goto LABEL_169;
        v128 = 0;
        v117 = v114 + v115;
LABEL_189:
        *(_DWORD *)v176 = v117;
        *(_DWORD *)&v176[4] = v98;
        *(_DWORD *)&v176[8] = v99;
        result = (uint64_t)sub_223B63730(v100, (int *)v176, (uint64_t)v176);
        v129 = *(_DWORD *)(result + 36) - (unsigned __int16)a4[3];
        *(_DWORD *)(result + 36) = v129;
        v130 = v129 + *(__int16 *)(result + 28) + *(__int16 *)(result + 30);
        if ((v130 + *(unsigned __int16 *)(result + 34) < 0) ^ __OFADD__(v130, *(unsigned __int16 *)(result + 34)) | (v130 + *(unsigned __int16 *)(result + 34) == 0))
        {
          v131 = *(_DWORD *)(v148 + 248);
          if (v131)
          {
            *(_DWORD *)(v148 + 248) = v131 - 1;
            if (!v128)
              goto LABEL_200;
          }
          else
          {
            result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterMap.hpp", 91, (uint64_t)"count_observed_voxels_ > 0", 26, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C);
            if ((result & 1) != 0)
              goto LABEL_219;
            --*(_DWORD *)(v148 + 248);
            if (!v128)
            {
LABEL_200:
              if (v116 > 1)
                goto LABEL_169;
              goto LABEL_201;
            }
          }
        }
        else if (!v128)
        {
          goto LABEL_200;
        }
        *(_DWORD *)v176 = v117;
        *(_DWORD *)&v176[4] = v98 + 1;
        *(_DWORD *)&v176[8] = v99;
        result = (uint64_t)sub_223B63730(v100, (int *)v176, (uint64_t)v176);
        v132 = *(_DWORD *)(result + 36) - (unsigned __int16)a4[3];
        *(_DWORD *)(result + 36) = v132;
        v133 = v132 + *(__int16 *)(result + 28) + *(__int16 *)(result + 30);
        if (!((v133 + *(unsigned __int16 *)(result + 34) < 0) ^ __OFADD__(v133, *(unsigned __int16 *)(result + 34)) | (v133 + *(unsigned __int16 *)(result + 34) == 0)))
          goto LABEL_200;
        v138 = *(_DWORD *)(v148 + 248);
        if (v138)
        {
          *(_DWORD *)(v148 + 248) = v138 - 1;
          if (v116 > 1)
            goto LABEL_169;
LABEL_201:
          *(_DWORD *)v176 = v117;
          *(_DWORD *)&v176[4] = v98 + 2;
          *(_DWORD *)&v176[8] = v99;
          result = (uint64_t)sub_223B63730(v100, (int *)v176, (uint64_t)v176);
          v134 = *(_DWORD *)(result + 36) - (unsigned __int16)a4[3];
          *(_DWORD *)(result + 36) = v134;
          v135 = v134 + *(__int16 *)(result + 28) + *(__int16 *)(result + 30);
          if ((v135 + *(unsigned __int16 *)(result + 34) < 0) ^ __OFADD__(v135, *(unsigned __int16 *)(result + 34)) | (v135 + *(unsigned __int16 *)(result + 34) == 0))
          {
            v136 = v148;
            v137 = *(_DWORD *)(v148 + 248);
            if (!v137)
            {
              result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterMap.hpp", 91, (uint64_t)"count_observed_voxels_ > 0", 26, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C);
              if ((result & 1) != 0)
                goto LABEL_219;
              v136 = v148;
              v137 = *(_DWORD *)(v148 + 248);
            }
            *(_DWORD *)(v136 + 248) = v137 - 1;
          }
          goto LABEL_169;
        }
        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterMap.hpp", 91, (uint64_t)"count_observed_voxels_ > 0", 26, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C);
        if ((result & 1) != 0)
LABEL_219:
          abort();
        --*(_DWORD *)(v148 + 248);
        if (v116 <= 1)
          goto LABEL_201;
LABEL_169:
        if (++v115 == 3)
          return result;
      }
      v117 = v114 + v115;
      *(_DWORD *)v176 = v114 + v115;
      *(_DWORD *)&v176[4] = v98 - 2;
      *(_DWORD *)&v176[8] = v99;
      v118 = sub_223B63730(v100, (int *)v176, (uint64_t)v176);
      v119 = *((_DWORD *)v118 + 9) - (unsigned __int16)a4[3];
      *((_DWORD *)v118 + 9) = v119;
      v120 = v119 + *((__int16 *)v118 + 14) + *((__int16 *)v118 + 15);
      if ((v120 + *((unsigned __int16 *)v118 + 17) < 0) ^ __OFADD__(v120, *((unsigned __int16 *)v118 + 17)) | (v120 + *((unsigned __int16 *)v118 + 17) == 0))
      {
        v121 = v148;
        v122 = *(_DWORD *)(v148 + 248);
        if (!v122)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterMap.hpp", 91, (uint64_t)"count_observed_voxels_ > 0", 26, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_219;
          }
          v121 = v148;
          v122 = *(_DWORD *)(v148 + 248);
        }
        *(_DWORD *)(v121 + 248) = v122 - 1;
      }
      goto LABEL_182;
    }
    v139 = v103[3].i16[3] + v103[3].i16[2];
    v140 = v103[4].i32[1] + v103[4].u16[1];
    if ((v139 + v140 < 0) ^ __OFADD__(v139, v140) | (v139 + v140 == 0))
    {
      v141 = v148;
      v142 = *(_DWORD *)(v148 + 248);
      if (!v142)
      {
        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterMap.hpp", 101, (uint64_t)"count_observed_voxels_ > 0", 26, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C);
        if ((result & 1) != 0)
          abort();
        v141 = v148;
        v142 = *(_DWORD *)(v148 + 248);
      }
      *(_DWORD *)(v141 + 248) = v142 - 1;
    }
  }
  return result;
}

void sub_223B635DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  uint64_t v32;

  if (*(_BYTE *)(v32 - 168) && *(char *)(v32 - 169) < 0)
    operator delete(*(void **)(v32 - 192));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a17);
  if (a31 < 0)
    operator delete(__p);
  sub_223195348((uint64_t)&a32);
  _Unwind_Resume(a1);
}

char *sub_223B63730(float *a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  _QWORD *v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  size_t v29;
  size_t v30;
  size_t v31;
  _QWORD *i;
  size_t v33;
  uint64_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = (19349669 * v7) ^ (73856093 * *a2) ^ (83492791 * v8);
  v10 = *((_QWORD *)a1 + 1);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = (19349669 * v7) ^ (73856093 * v6) ^ (83492791 * v8);
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = *((_QWORD *)v13 + 1);
            if (v15 == v9)
            {
              if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == v7 && *((_DWORD *)v13 + 6) == v8)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_27;
            }
            v13 = *(char **)v13;
            if (!v13)
              goto LABEL_27;
          }
        }
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == v7 && *((_DWORD *)v13 + 6) == v8)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
LABEL_27:
  v13 = (char *)operator new(0x68uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v9;
  *((_QWORD *)v13 + 2) = *(_QWORD *)a3;
  *((_DWORD *)v13 + 6) = *(_DWORD *)(a3 + 8);
  *(_OWORD *)(v13 + 60) = 0u;
  *(_OWORD *)(v13 + 76) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_OWORD *)(v13 + 28) = 0u;
  *(_OWORD *)(v13 + 44) = 0u;
  *((_WORD *)v13 + 36) = 3341;
  v13[74] = 13;
  *((_DWORD *)v13 + 19) = -1;
  *((_QWORD *)v13 + 10) = 0;
  *(_QWORD *)(v13 + 85) = 0;
  v16 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v17 = a1[8];
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *((_QWORD *)a1 + 1);
    }
    if (prime > v10)
    {
LABEL_41:
      if (prime >> 61)
        sub_223174E94();
      v24 = operator new(8 * prime);
      v25 = *(_QWORD **)a1;
      *(_QWORD *)a1 = v24;
      if (v25)
        operator delete(v25);
      v26 = 0;
      *((_QWORD *)a1 + 1) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v26++) = 0;
      while (prime != v26);
      v28 = (uint64_t *)(a1 + 4);
      v27 = (_QWORD *)*((_QWORD *)a1 + 2);
      if (!v27)
        goto LABEL_73;
      v29 = v27[1];
      v30 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v31 = v29 & v30;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v28;
        for (i = (_QWORD *)*v27; *v27; i = (_QWORD *)*v27)
        {
          v33 = i[1] & v30;
          if (v33 == v31)
          {
            v27 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v33))
          {
            *v27 = *i;
            v34 = 8 * v33;
            *i = **(_QWORD **)(*(_QWORD *)a1 + v34);
            **(_QWORD **)(*(_QWORD *)a1 + v34) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v27;
            v27 = i;
            v31 = v33;
          }
        }
        goto LABEL_73;
      }
      if (v29 >= prime)
        v29 %= prime;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v28;
      v38 = (_QWORD *)*v27;
      if (!*v27)
      {
LABEL_73:
        v10 = prime;
        v41 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_74;
        goto LABEL_89;
      }
      while (1)
      {
        v40 = v38[1];
        if (v40 >= prime)
          v40 %= prime;
        if (v40 == v29)
          goto LABEL_67;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v40))
        {
          *v27 = *v38;
          v39 = 8 * v40;
          *v38 = **(_QWORD **)(*(_QWORD *)a1 + v39);
          **(_QWORD **)(*(_QWORD *)a1 + v39) = v38;
          v38 = v27;
LABEL_67:
          v27 = v38;
          v38 = (_QWORD *)*v38;
          if (!v38)
            goto LABEL_73;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v27;
          v27 = v38;
          v38 = (_QWORD *)*v38;
          v29 = v40;
          if (!v38)
            goto LABEL_73;
        }
      }
    }
    if (prime < v10)
    {
      v35 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v10 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < v10)
      {
        if (!prime)
        {
          v42 = *(_QWORD **)a1;
          *(_QWORD *)a1 = 0;
          if (v42)
            operator delete(v42);
          v10 = 0;
          *((_QWORD *)a1 + 1) = 0;
          v41 = -1;
          goto LABEL_89;
        }
        goto LABEL_41;
      }
      v10 = *((_QWORD *)a1 + 1);
    }
    v41 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
LABEL_74:
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v18 = *(_QWORD **)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v19)
          goto LABEL_30;
      }
      else
      {
        v3 = v9;
        v18 = *(_QWORD **)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v19)
          goto LABEL_30;
      }
      goto LABEL_90;
    }
LABEL_89:
    v3 = v41 & v9;
    v18 = *(_QWORD **)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v9));
    if (v19)
      goto LABEL_30;
    goto LABEL_90;
  }
  v18 = *(_QWORD **)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
LABEL_30:
    *(_QWORD *)v13 = *v19;
LABEL_96:
    *v19 = v13;
    goto LABEL_97;
  }
LABEL_90:
  *(_QWORD *)v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v18[v3] = a1 + 4;
  if (*(_QWORD *)v13)
  {
    v43 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v43 >= v10)
        v43 %= v10;
    }
    else
    {
      v43 &= v10 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v43);
    goto LABEL_96;
  }
LABEL_97:
  ++*((_QWORD *)a1 + 3);
  return v13;
}

void sub_223B63C68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223B63C7C(float *a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  float v20;
  float v21;
  _QWORD *v22;
  _QWORD *v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  size_t v33;
  size_t v34;
  size_t v35;
  _QWORD *i;
  size_t v37;
  uint64_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = (19349669 * v7) ^ (73856093 * *a2) ^ (83492791 * v8);
  v10 = *((_QWORD *)a1 + 1);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = (19349669 * v7) ^ (73856093 * v6) ^ (83492791 * v8);
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == v7 && *((_DWORD *)v13 + 6) == v8)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_27;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_27;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == v7 && *((_DWORD *)v13 + 6) == v8)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_27:
  v16 = operator new(0x1320uLL);
  v13 = v16;
  v17 = 0;
  *v16 = 0;
  v16[1] = v9;
  v16[2] = *(_QWORD *)a3;
  *((_DWORD *)v16 + 6) = *(_DWORD *)(a3 + 8);
  v18 = 64;
  do
  {
    v19 = (char *)v16 + v17;
    *(_OWORD *)(v19 + 56) = 0uLL;
    *(_OWORD *)(v19 + 44) = 0uLL;
    *(_OWORD *)(v19 + 28) = 0uLL;
    *((_WORD *)v19 + 36) = 3341;
    v19[74] = 13;
    *((_DWORD *)v19 + 19) = -1;
    *((_DWORD *)v19 + 24) = 0;
    v19[100] = 0;
    *((_QWORD *)v19 + 10) = 0;
    v17 += 76;
    *(_QWORD *)(v19 + 85) = 0;
    --v18;
  }
  while (v18);
  *((_DWORD *)v16 + 1223) = 8;
  v20 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v21 = a1[8];
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    v24 = 1;
    if (v10 >= 3)
      v24 = (v10 & (v10 - 1)) != 0;
    v25 = v24 | (2 * v10);
    v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *((_QWORD *)a1 + 1);
    }
    if (prime > v10)
    {
LABEL_43:
      if (prime >> 61)
        sub_223174E94();
      v28 = operator new(8 * prime);
      v29 = *(_QWORD **)a1;
      *(_QWORD *)a1 = v28;
      if (v29)
        operator delete(v29);
      v30 = 0;
      *((_QWORD *)a1 + 1) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v30++) = 0;
      while (prime != v30);
      v32 = (uint64_t *)(a1 + 4);
      v31 = (_QWORD *)*((_QWORD *)a1 + 2);
      if (!v31)
        goto LABEL_75;
      v33 = v31[1];
      v34 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v35 = v33 & v34;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v32;
        for (i = (_QWORD *)*v31; *v31; i = (_QWORD *)*v31)
        {
          v37 = i[1] & v34;
          if (v37 == v35)
          {
            v31 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
          {
            *v31 = *i;
            v38 = 8 * v37;
            *i = **(_QWORD **)(*(_QWORD *)a1 + v38);
            **(_QWORD **)(*(_QWORD *)a1 + v38) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v31;
            v31 = i;
            v35 = v37;
          }
        }
        goto LABEL_75;
      }
      if (v33 >= prime)
        v33 %= prime;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v32;
      v42 = (_QWORD *)*v31;
      if (!*v31)
      {
LABEL_75:
        v10 = prime;
        v45 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_76;
        goto LABEL_91;
      }
      while (1)
      {
        v44 = v42[1];
        if (v44 >= prime)
          v44 %= prime;
        if (v44 == v33)
          goto LABEL_69;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v44))
        {
          *v31 = *v42;
          v43 = 8 * v44;
          *v42 = **(_QWORD **)(*(_QWORD *)a1 + v43);
          **(_QWORD **)(*(_QWORD *)a1 + v43) = v42;
          v42 = v31;
LABEL_69:
          v31 = v42;
          v42 = (_QWORD *)*v42;
          if (!v42)
            goto LABEL_75;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = v31;
          v31 = v42;
          v42 = (_QWORD *)*v42;
          v33 = v44;
          if (!v42)
            goto LABEL_75;
        }
      }
    }
    if (prime < v10)
    {
      v39 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v10 < 3 || (v40 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < v10)
      {
        if (!prime)
        {
          v46 = *(_QWORD **)a1;
          *(_QWORD *)a1 = 0;
          if (v46)
            operator delete(v46);
          v10 = 0;
          *((_QWORD *)a1 + 1) = 0;
          v45 = -1;
          goto LABEL_91;
        }
        goto LABEL_43;
      }
      v10 = *((_QWORD *)a1 + 1);
    }
    v45 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
LABEL_76:
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v22 = *(_QWORD **)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v23)
          goto LABEL_32;
      }
      else
      {
        v3 = v9;
        v22 = *(_QWORD **)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v23)
          goto LABEL_32;
      }
      goto LABEL_92;
    }
LABEL_91:
    v3 = v45 & v9;
    v22 = *(_QWORD **)a1;
    v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v45 & v9));
    if (v23)
      goto LABEL_32;
    goto LABEL_92;
  }
  v22 = *(_QWORD **)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
LABEL_32:
    *v13 = *v23;
LABEL_98:
    *v23 = v13;
    goto LABEL_99;
  }
LABEL_92:
  *v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v22[v3] = a1 + 4;
  if (*v13)
  {
    v47 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v47 >= v10)
        v47 %= v10;
    }
    else
    {
      v47 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v47);
    goto LABEL_98;
  }
LABEL_99:
  ++*((_QWORD *)a1 + 3);
  return v13;
}

void sub_223B641D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

int32x2_t sub_223B641E8(_QWORD *a1, int a2, int a3, __int16 *a4)
{
  _DWORD *v6;
  uint64_t v7;
  int v8;
  char *v9;
  float32x4_t v10;
  float32x2_t v11;
  float32x4_t v12;
  int32x2_t *v13;
  __int16 v14;
  __int16 v15;
  int v16;
  int32x2_t v17;
  float32x4_t v18;
  int32x2_t result;
  int v20;
  unsigned int v21;
  int v22;
  char *v23;
  int v24;
  int v25;
  char *v26;
  int v27;
  int v28;
  int v29;
  char *v30;
  int v31;
  int v32;
  char *v33;
  int v34;
  int v35;
  char *v36;
  int v37;
  int v38;
  unsigned int v39;
  __int32 v40;
  uint64_t v41;
  _DWORD *v42;
  BOOL v43;
  int v44;
  int v45;
  BOOL v46;
  int32x2_t *v47;
  _QWORD *v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;

  if (a4[1] + *a4 + *((_DWORD *)a4 + 2) + (unsigned __int16)a4[3] >= 1)
  {
    v6 = (_DWORD *)*a1;
    v7 = a1[1];
    LODWORD(v49) = *(_DWORD *)*a1 + a2;
    HIDWORD(v49) = *(_DWORD *)(*a1 + 4) + a3;
    v53 = v49;
    v8 = v6[2];
    v54 = v8;
    v9 = sub_223B63730((float *)(v7 + 208), (int *)&v53, (uint64_t)&v53);
    v13 = (int32x2_t *)v9;
    v14 = *((_WORD *)v9 + 14);
    v15 = *((_WORD *)v9 + 15);
    v16 = *((unsigned __int16 *)v9 + 17);
    if ((v15 + v14 + *((_DWORD *)v9 + 9) + v16 < 0) ^ __OFADD__(v15 + v14, *((_DWORD *)v9 + 9) + v16) | (v15 + v14 + *((_DWORD *)v9 + 9) + v16 == 0))
      ++*(_DWORD *)(v7 + 248);
    *((_WORD *)v9 + 14) = *a4 + v14;
    *((_WORD *)v9 + 15) = a4[1] + v15;
    *((_WORD *)v9 + 16) += a4[2];
    if (a4[2] <= 0)
    {
      v11.i32[0] = *((_DWORD *)a4 + 7);
      if (sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a4 + 10), *(float32x2_t *)(a4 + 10)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a4 + 10), 1), *(float32x2_t *)(a4 + 10), 1), v11, v11).f32[0]) >= 0.001)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterMap.hpp", 128, (uint64_t)"voxel.clutter > 0 || voxel.point.norm2() < 1e-3f", 48, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        LOWORD(v16) = v13[4].i16[1];
      }
    }
    v48 = a1;
    v17 = v13[5];
    *(int32x2_t *)v10.f32 = v13[6];
    v10.i32[2] = v13[7].i32[0];
    v12.i64[0] = *(_QWORD *)(a4 + 10);
    v12.i32[2] = *((_DWORD *)a4 + 7);
    v18 = vaddq_f32(v10, v12);
    v13[7].i32[0] = v18.i32[2];
    v13[6] = *(int32x2_t *)v18.f32;
    v13[4].i16[1] = a4[3] + v16;
    result = vadd_s32(v17, *(int32x2_t *)(a4 + 6));
    v13[5] = result;
    if (a4[3])
    {
      v20 = -2;
      while (1)
      {
        v21 = v20 >= 0 ? v20 : -v20;
        if (v21 <= 1)
          break;
        if (v21 == 2)
        {
          v22 = v49 + v20;
LABEL_23:
          v50 = v22;
          v51 = HIDWORD(v49) - 1;
          v52 = v8;
          v26 = sub_223B63730((float *)(v7 + 208), &v50, (uint64_t)&v50);
          v27 = *((__int16 *)v26 + 15) + *((__int16 *)v26 + 14);
          v28 = *((_DWORD *)v26 + 9);
          if ((v27 + v28 + *((unsigned __int16 *)v26 + 17) < 0) ^ __OFADD__(v27, v28 + *((unsigned __int16 *)v26 + 17)) | (v27 + v28 + *((unsigned __int16 *)v26 + 17) == 0))
            ++*(_DWORD *)(v7 + 248);
          *((_DWORD *)v26 + 9) = v28 + (unsigned __int16)a4[3];
          v29 = 1;
          goto LABEL_27;
        }
        if (v21 > 3)
          goto LABEL_12;
        v29 = 0;
        v22 = v49 + v20;
LABEL_27:
        v50 = v22;
        v51 = HIDWORD(v49);
        v52 = v8;
        v30 = sub_223B63730((float *)(v7 + 208), &v50, (uint64_t)&v50);
        v31 = *((__int16 *)v30 + 15) + *((__int16 *)v30 + 14);
        v32 = *((_DWORD *)v30 + 9);
        if ((v31 + v32 + *((unsigned __int16 *)v30 + 17) < 0) ^ __OFADD__(v31, v32 + *((unsigned __int16 *)v30 + 17)) | (v31 + v32 + *((unsigned __int16 *)v30 + 17) == 0))
        {
          ++*(_DWORD *)(v7 + 248);
          *((_DWORD *)v30 + 9) = v32 + (unsigned __int16)a4[3];
          if (!v29)
          {
LABEL_29:
            if (v21 <= 1)
              goto LABEL_38;
            goto LABEL_12;
          }
        }
        else
        {
          *((_DWORD *)v30 + 9) = v32 + (unsigned __int16)a4[3];
          if (!v29)
            goto LABEL_29;
        }
        v50 = v22;
        v51 = HIDWORD(v49) + 1;
        v52 = v8;
        v33 = sub_223B63730((float *)(v7 + 208), &v50, (uint64_t)&v50);
        v34 = *((__int16 *)v33 + 15) + *((__int16 *)v33 + 14);
        v35 = *((_DWORD *)v33 + 9);
        if ((v34 + v35 + *((unsigned __int16 *)v33 + 17) < 0) ^ __OFADD__(v34, v35 + *((unsigned __int16 *)v33 + 17)) | (v34 + v35 + *((unsigned __int16 *)v33 + 17) == 0))
        {
          ++*(_DWORD *)(v7 + 248);
          *((_DWORD *)v33 + 9) = v35 + (unsigned __int16)a4[3];
          if (v21 <= 1)
          {
LABEL_38:
            v50 = v22;
            v51 = HIDWORD(v49) + 2;
            v52 = v8;
            v36 = sub_223B63730((float *)(v7 + 208), &v50, (uint64_t)&v50);
            v37 = *((__int16 *)v36 + 15) + *((__int16 *)v36 + 14);
            v38 = *((_DWORD *)v36 + 9);
            if ((v37 + v38 + *((unsigned __int16 *)v36 + 17) < 0) ^ __OFADD__(v37, v38 + *((unsigned __int16 *)v36 + 17)) | (v37 + v38 + *((unsigned __int16 *)v36 + 17) == 0))++*(_DWORD *)(v7 + 248);
            *((_DWORD *)v36 + 9) = v38 + (unsigned __int16)a4[3];
          }
        }
        else
        {
          *((_DWORD *)v33 + 9) = v35 + (unsigned __int16)a4[3];
          if (v21 <= 1)
            goto LABEL_38;
        }
LABEL_12:
        if (++v20 == 3)
          goto LABEL_41;
      }
      v22 = v20 + v49;
      v50 = v20 + v49;
      v51 = HIDWORD(v49) - 2;
      v52 = v8;
      v23 = sub_223B63730((float *)(v7 + 208), &v50, (uint64_t)&v50);
      v24 = *((__int16 *)v23 + 15) + *((__int16 *)v23 + 14);
      v25 = *((_DWORD *)v23 + 9);
      if ((v24 + v25 + *((unsigned __int16 *)v23 + 17) < 0) ^ __OFADD__(v24, v25 + *((unsigned __int16 *)v23 + 17)) | (v24 + v25 + *((unsigned __int16 *)v23 + 17) == 0))
        ++*(_DWORD *)(v7 + 248);
      *((_DWORD *)v23 + 9) = v25 + (unsigned __int16)a4[3];
      goto LABEL_23;
    }
LABEL_41:
    v39 = v13[9].u32[1];
    v13[10].i32[0] += *((_DWORD *)a4 + 13);
    v40 = v13[11].i32[0];
    v13[10].i32[1] += *((_DWORD *)a4 + 14);
    v13[11].i32[0] = v40 + *((_DWORD *)a4 + 15);
    if (v39 != -1)
    {
      v41 = v48[2];
      if (*(_BYTE *)(v41 + 8))
      {
        v42 = *(_DWORD **)v41;
        v43 = *v42 > (int)v53 || v42[2] < (int)v53;
        if (v43 || ((v44 = v42[1], v45 = v42[3], v44 <= SHIDWORD(v53)) ? (v46 = v45 < SHIDWORD(v53)) : (v46 = 1), v46))
        {
          v47 = (int32x2_t *)sub_223AD5A88(v7, v39);
          v47[33].i32[0] += *((_DWORD *)a4 + 13);
          v47[33].i32[1] += *((_DWORD *)a4 + 14);
          v47[34].i32[0] += *((_DWORD *)a4 + 15);
          v47[34].i32[1] += (unsigned __int16)a4[3];
          result = vadd_s32(v47[54], *(int32x2_t *)(a4 + 6));
          v47[54] = result;
        }
      }
    }
  }
  return result;
}

void sub_223B646DC(uint64_t a1, _DWORD *a2, char a3, _QWORD *a4, _QWORD *a5, uint64_t a6, uint64_t *a7)
{
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  int v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  int v19;
  int v20;
  int v21;
  int v22;
  _DWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  signed int v26;
  signed int v27;
  int v28;
  signed int v29;
  signed int v30;
  BOOL v31;
  char *v32;
  signed int v33;
  uint64_t *v34;
  uint64_t **j;
  signed int v36;
  BOOL v37;
  signed int v38;
  int v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  _BYTE *v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *i;
  int v56;
  unint64_t v57;
  unint64_t v58;
  BOOL v59;
  Class isa;
  size_t v61;
  const char *v62;
  signed int v63;
  signed int v64;
  signed int v65;
  uint64_t *v66;
  uint64_t **v67;
  uint64_t **v68;
  signed int v69;
  signed int v70;
  signed int v71;
  _DWORD *v72;
  unsigned __int8 v73;
  const char *v74;
  size_t v75;
  void **v76;
  unint64_t v77;
  const char *v78;
  objc_class *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  size_t v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  unint64_t *p_shared_owners;
  unint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  void *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t **v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  NSObject *v127;
  uint64_t *k;
  uint64_t v129;
  int64_t v130;
  void **v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t m;
  char *v144;
  char *v145;
  int8x8_t v146;
  uint64_t v147;
  unint64_t v148;
  uint8x8_t v149;
  uint64_t v150;
  uint64_t **v151;
  uint64_t *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t *v157;
  uint64_t *v158;
  void **v159;
  int32x2_t *v160;
  int v161;
  uint64_t **v162;
  int v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  size_t v168;
  const char *v169;
  unsigned __int8 v170;
  int v171;
  unint64_t v172;
  unint64_t v173;
  size_t v175;
  void **v176;
  unsigned int v177;
  uint64_t v178;
  const float *v179;
  int32x2_t v180;
  unsigned int v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  const float *v190;
  int32x2_t v191;
  int32x4_t v192;
  void *v193;
  int32x2_t v194;
  int v195;
  int v196;
  uint64_t v197;
  unsigned __int8 v198;
  uint64_t v199;
  uint64_t n;
  unsigned __int8 v201;
  uint32x4_t v202;
  int8x16_t v203;
  int8x8_t v204;
  uint64_t v205;
  int v206;
  void *v207;
  uint64_t **v208;
  float32x4_t v209;
  float32x2_t v210;
  float32x2_t v211;
  int v212;
  int v213;
  int v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  int8x16_t v218;
  float v219;
  int v220;
  char *v221;
  int v222;
  int v223;
  BOOL v224;
  unint64_t v225;
  void **v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  const char *v230;
  uint64_t v231;
  size_t v232;
  const char *v233;
  unsigned __int8 v234;
  unsigned __int8 v235;
  const char *v236;
  size_t v237;
  _BYTE *v238;
  const char *v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  NSObject *v243;
  uint64_t v244;
  uint64_t v245;
  size_t v246;
  std::__shared_weak_count_vtbl *v247;
  std::__shared_weak_count *v248;
  size_t v249;
  size_t v250;
  const char *v251;
  uint64_t *v252;
  uint64_t v253;
  void *v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char v259;
  _QWORD *v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  char *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t v271;
  unsigned __int8 v272;
  const char *v273;
  size_t v274;
  NSObject *v275;
  unint64_t v276;
  uint64_t v277;
  int v278;
  uint64_t v279;
  const char *v280;
  const char *v281;
  uint64_t v282;
  uint64_t v283;
  void *v284;
  NSObject *v285;
  uint64_t v286;
  uint64_t v287;
  size_t v288;
  NSObject *v289;
  NSObject *v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  unint64_t v294;
  os_log_t v295;
  _DWORD *v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  void *v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  void *v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  void *v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  uint64_t v327;
  char *v328;
  uint64_t v329;
  char *v330;
  uint64_t v331;
  uint64_t v332;
  void *v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  uint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  const char *v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  uint64_t *v357;
  uint64_t **v358;
  uint64_t v359;
  NSObject *v360;
  NSObject *v361;
  NSObject *v362;
  uint64_t **v363;
  int v366;
  uint64_t v367;
  uint64_t v368;
  unsigned int v369;
  uint64_t v370;
  int v371;
  size_t v372;
  float32x4_t v373;
  char *v374;
  char *v375;
  uint64_t **v377;
  uint64_t *v378;
  char *v379;
  _QWORD v380[2];
  char v381;
  void *v382;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v384;
  int v385;
  const char *v386;
  int v387;
  const char *v388;
  uint64_t v389;
  std::__shared_weak_count *v390;
  void *__dst[2];
  int64_t v392;
  uint64_t v393;
  unint64_t v394;
  int v395;
  void *v396[2];
  char v397;
  uint64_t v398[3];
  _QWORD v399[2];
  char v400;
  __int128 v401;
  __int128 v402;
  int v403;
  void *v404[2];
  std::__shared_weak_count *v405;
  char *v406;
  std::__shared_weak_count *v407;
  uint64_t *v408;
  __int128 v409;
  os_log_t oslog[3];
  __int128 v411;
  void *v412;
  const char *v413;
  unint64_t v414;
  std::__shared_weak_count *v415;
  unint64_t v416;
  void *v417;
  char v418;
  unint64_t v419;
  int v420;
  uint64_t v421;
  void *object[3];
  __int128 v423;
  void *__p[2];
  unint64_t v425;
  char v426;
  _BYTE v427[24];
  __int128 v428;
  char *v429;
  const char *v430;
  unint64_t v431;
  std::__shared_weak_count *v432;
  _QWORD v433[5];

  v433[2] = *MEMORY[0x24BDAC8D0];
  v380[1] = 0;
  v380[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v381 = 1;
  kdebug_trace();
  v378 = 0;
  v379 = 0;
  v377 = &v378;
  if (!a3)
  {
    for (i = *(uint64_t **)(a1 + 224); i; i = (uint64_t *)*i)
    {
      v63 = i[2] & 0xFFFFFFF8;
      v64 = *((_DWORD *)i + 5) & 0xFFFFFFF8;
      v65 = i[3] & 0xFFFFFFF8;
      v66 = v378;
      v67 = &v378;
LABEL_93:
      v68 = v67;
      if (v66)
      {
        do
        {
          v67 = (uint64_t **)v66;
          v69 = *((_DWORD *)v66 + 7);
          if (v63 == v69)
          {
            v70 = *((_DWORD *)v67 + 8);
            if (v64 == v70)
            {
              v71 = *((_DWORD *)v67 + 9);
              if (v65 < v71)
                goto LABEL_92;
              if (v71 >= v65)
                goto LABEL_90;
            }
            else
            {
              if (v64 < v70)
              {
LABEL_92:
                v66 = *v67;
                goto LABEL_93;
              }
              if (v70 >= v64)
                goto LABEL_90;
            }
          }
          else
          {
            if (v63 < v69)
              goto LABEL_92;
            if (v69 >= v63)
              goto LABEL_90;
          }
          v66 = v67[1];
        }
        while (v66);
        v68 = v67 + 1;
      }
      v72 = operator new(0x28uLL);
      v72[7] = v63;
      v72[8] = v64;
      v72[9] = v65;
      *(_QWORD *)v72 = 0;
      *((_QWORD *)v72 + 1) = 0;
      *((_QWORD *)v72 + 2) = v67;
      *v68 = (uint64_t *)v72;
      if (*v377)
      {
        v377 = (uint64_t **)*v377;
        v72 = *v68;
      }
      sub_2231A9A8C(v378, (uint64_t *)v72);
      ++v379;
LABEL_90:
      ;
    }
    goto LABEL_82;
  }
  v13 = (_QWORD *)*a4;
  v11 = a4 + 1;
  v12 = v13;
  if (v13 != v11)
  {
    do
    {
      object[0] = (void *)(a1 + 44);
      object[1] = (char *)v12 + 28;
      sub_223AE5064((int *)oslog, (int **)object);
      v14 = *(_DWORD *)(a1 + 4);
      v15 = SLODWORD(oslog[0]) / v14;
      v16 = v378;
      v17 = &v378;
      v18 = &v378;
      v19 = SHIDWORD(oslog[0]) / v14;
      if (!v378)
        goto LABEL_20;
      do
      {
        while (1)
        {
          v17 = (uint64_t **)v16;
          v21 = *((_DWORD *)v16 + 7);
          if (v15 != v21)
          {
            if (v15 < v21)
              goto LABEL_8;
            if (v21 >= v15)
              goto LABEL_23;
            goto LABEL_18;
          }
          v22 = *((_DWORD *)v17 + 8);
          if (v19 == v22)
            break;
          if (v19 >= v22)
          {
            if (v22 >= v19)
              goto LABEL_23;
            goto LABEL_18;
          }
LABEL_8:
          v16 = *v17;
          v18 = v17;
          if (!*v17)
            goto LABEL_20;
        }
        v20 = *((_DWORD *)v17 + 9);
        if (v20 > 0)
          goto LABEL_8;
        if ((v20 & 0x80000000) == 0)
          goto LABEL_23;
LABEL_18:
        v16 = v17[1];
      }
      while (v16);
      v18 = v17 + 1;
LABEL_20:
      v23 = operator new(0x28uLL);
      v23[7] = v15;
      v23[8] = v19;
      v23[9] = 0;
      *(_QWORD *)v23 = 0;
      *((_QWORD *)v23 + 1) = 0;
      *((_QWORD *)v23 + 2) = v17;
      *v18 = (uint64_t *)v23;
      if (*v377)
      {
        v377 = (uint64_t **)*v377;
        v23 = *v18;
      }
      sub_2231A9A8C(v378, (uint64_t *)v23);
      ++v379;
LABEL_23:
      v24 = (_QWORD *)v12[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v12[2];
          v59 = *v25 == (_QWORD)v12;
          v12 = v25;
        }
        while (!v59);
      }
      v12 = v25;
    }
    while (v25 != v11);
  }
  v26 = *a2 & 0xFFFFFFF8;
  v27 = a2[1] & 0xFFFFFFF8;
  v28 = a2[3];
  v29 = a2[2] & 0xFFFFFFF8;
  v30 = v28 & 0xFFFFFFF8;
  v31 = v27 <= (int)(v28 & 0xFFFFFFF8) && v26 <= v29;
  if (v31)
  {
    v32 = v379;
    do
    {
      v33 = v26;
      do
      {
        v34 = v378;
        for (j = &v378; ; v34 = *j)
        {
          v40 = j;
          if (!v34)
            break;
          while (1)
          {
            j = (uint64_t **)v34;
            v36 = *((_DWORD *)v34 + 7);
            v37 = v33 < v36;
            if (v33 != v36)
              break;
            v38 = *((_DWORD *)j + 8);
            v37 = v27 < v38;
            if (v27 != v38)
              break;
            v39 = *((_DWORD *)j + 9);
            if (v39 > 0)
              goto LABEL_46;
            if ((v39 & 0x80000000) == 0)
              goto LABEL_73;
LABEL_44:
            v34 = j[1];
            if (!v34)
            {
              v40 = j + 1;
              goto LABEL_48;
            }
          }
          if (!v37)
            goto LABEL_44;
LABEL_46:
          ;
        }
LABEL_48:
        v41 = (uint64_t *)operator new(0x28uLL);
        *((_DWORD *)v41 + 7) = v33;
        *((_DWORD *)v41 + 8) = v27;
        *((_DWORD *)v41 + 9) = 0;
        *v41 = 0;
        v41[1] = 0;
        v41[2] = (uint64_t)j;
        *v40 = v41;
        if (*v377)
        {
          v377 = (uint64_t **)*v377;
          v41 = *v40;
        }
        v42 = v378;
        v59 = v41 == v378;
        *((_BYTE *)v41 + 24) = v41 == v378;
        if (!v59)
        {
          do
          {
            v43 = v41[2];
            if (*(_BYTE *)(v43 + 24))
              break;
            v44 = *(uint64_t **)(v43 + 16);
            v45 = *v44;
            if (*v44 == v43)
            {
              v48 = v44[1];
              if (!v48 || (v49 = *(unsigned __int8 *)(v48 + 24), v46 = (_BYTE *)(v48 + 24), v49))
              {
                if (*(uint64_t **)v43 == v41)
                {
                  *(_BYTE *)(v43 + 24) = 1;
                  *((_BYTE *)v44 + 24) = 0;
                  v52 = *(_QWORD *)(v43 + 8);
                  *v44 = v52;
                  if (v52)
                    goto LABEL_65;
                }
                else
                {
                  v50 = *(uint64_t **)(v43 + 8);
                  v51 = *v50;
                  *(_QWORD *)(v43 + 8) = *v50;
                  if (v51)
                  {
                    *(_QWORD *)(v51 + 16) = v43;
                    v44 = *(uint64_t **)(v43 + 16);
                  }
                  v50[2] = (uint64_t)v44;
                  *(_QWORD *)(*(_QWORD *)(v43 + 16) + 8 * (**(_QWORD **)(v43 + 16) != v43)) = v50;
                  *v50 = v43;
                  *(_QWORD *)(v43 + 16) = v50;
                  v44 = (uint64_t *)v50[2];
                  v43 = *v44;
                  *((_BYTE *)v50 + 24) = 1;
                  *((_BYTE *)v44 + 24) = 0;
                  v52 = *(_QWORD *)(v43 + 8);
                  *v44 = v52;
                  if (v52)
LABEL_65:
                    *(_QWORD *)(v52 + 16) = v44;
                }
                *(_QWORD *)(v43 + 16) = v44[2];
                *(_QWORD *)(v44[2] + 8 * (*(_QWORD *)v44[2] != (_QWORD)v44)) = v43;
                *(_QWORD *)(v43 + 8) = v44;
LABEL_71:
                v44[2] = v43;
                break;
              }
            }
            else if (!v45 || (v47 = *(unsigned __int8 *)(v45 + 24), v46 = (_BYTE *)(v45 + 24), v47))
            {
              if (*(uint64_t **)v43 == v41)
              {
                v54 = v41[1];
                *(_QWORD *)v43 = v54;
                if (v54)
                {
                  *(_QWORD *)(v54 + 16) = v43;
                  v44 = *(uint64_t **)(v43 + 16);
                }
                v41[2] = (uint64_t)v44;
                *(_QWORD *)(*(_QWORD *)(v43 + 16) + 8 * (**(_QWORD **)(v43 + 16) != v43)) = v41;
                v41[1] = v43;
                *(_QWORD *)(v43 + 16) = v41;
                v44 = (uint64_t *)v41[2];
                *((_BYTE *)v41 + 24) = 1;
                *((_BYTE *)v44 + 24) = 0;
                v43 = v44[1];
                v53 = *(uint64_t **)v43;
                v44[1] = *(_QWORD *)v43;
                if (v53)
LABEL_69:
                  v53[2] = (uint64_t)v44;
              }
              else
              {
                *(_BYTE *)(v43 + 24) = 1;
                *((_BYTE *)v44 + 24) = 0;
                v43 = v44[1];
                v53 = *(uint64_t **)v43;
                v44[1] = *(_QWORD *)v43;
                if (v53)
                  goto LABEL_69;
              }
              *(_QWORD *)(v43 + 16) = v44[2];
              *(_QWORD *)(v44[2] + 8 * (*(_QWORD *)v44[2] != (_QWORD)v44)) = v43;
              *(_QWORD *)v43 = v44;
              goto LABEL_71;
            }
            *(_BYTE *)(v43 + 24) = 1;
            v41 = v44;
            *((_BYTE *)v44 + 24) = v44 == v42;
            *v46 = 1;
          }
          while (v44 != v42);
        }
        v379 = ++v32;
LABEL_73:
        v33 += 8;
      }
      while (v33 <= v29);
      v27 += 8;
    }
    while (v27 <= v30);
  }
LABEL_82:
  sub_223AF0EC4(&v382);
  if (**((int **)v382 + 7) > 3)
    goto LABEL_190;
  v56 = *((unsigned __int8 *)v382 + 72);
  v57 = sub_22322F254((uint64_t)v382, "OSLogSurrogateAppender", 1, 0);
  v58 = v57;
  v59 = !v56 && v57 == 0;
  if (v59)
    goto LABEL_190;
  oslog[0] = (os_log_t)&v382;
  oslog[1] = (os_log_t)std::chrono::steady_clock::now().__d_.__rep_;
  oslog[2] = (os_log_t)std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v411) = 3;
  *((_QWORD *)&v411 + 1) = "unknown file";
  LODWORD(v412) = 359;
  v415 = 0;
  v413 = "unknown function";
  v414 = 0;
  isa = oslog[0]->isa;
  if (*((char *)oslog[0]->isa + 39) < 0)
  {
    v62 = (const char *)*((_QWORD *)isa + 2);
    v61 = *((_QWORD *)isa + 3);
  }
  else
  {
    v61 = *((unsigned __int8 *)oslog[0]->isa + 39);
    v62 = (char *)oslog[0]->isa + 16;
  }
  v374 = (char *)oslog[0]->isa + 16;
  v375 = v379;
  v73 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v73 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
    if ((_BYTE)v423 && SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F40[23] >= 0)
    v74 = byte_255788F40;
  else
    v74 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v75 = byte_255788F40[23];
  else
    v75 = *(_QWORD *)&byte_255788F40[8];
  object[0] = os_log_create(v74, v62);
  v76 = &object[1];
  if (v75 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v75 >= 0x17)
  {
    v77 = v58;
    v78 = v62;
    v79 = isa;
    v80 = v56;
    v81 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v75 | 7) != 0x17)
      v81 = v75 | 7;
    v82 = v81 + 1;
    v76 = (void **)operator new(v81 + 1);
    *(_QWORD *)&v423 = v82 | 0x8000000000000000;
    object[1] = v76;
    object[2] = (void *)v75;
    v56 = v80;
    isa = v79;
    v62 = v78;
    v58 = v77;
    goto LABEL_123;
  }
  BYTE7(v423) = v75;
  if (v75)
LABEL_123:
    memmove(v76, v74, v75);
  *((_BYTE *)v76 + v75) = 0;
  BYTE8(v423) = 1;
  v83 = __p;
  if (v61 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v61 >= 0x17)
  {
    v85 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v61 | 7) != 0x17)
      v85 = v61 | 7;
    v86 = v85 + 1;
    v83 = operator new(v85 + 1);
    v425 = v86 | 0x8000000000000000;
    __p[0] = v83;
    __p[1] = (void *)v61;
  }
  else
  {
    HIBYTE(v425) = v61;
    if (!v61)
    {
      LOBYTE(__p[0]) = 0;
      v426 = 1;
      v84 = object[0];
      if ((SHIBYTE(v425) & 0x80000000) == 0)
        goto LABEL_128;
      goto LABEL_134;
    }
  }
  memmove(v83, v62, v61);
  *((_BYTE *)v83 + v61) = 0;
  v426 = 1;
  v84 = object[0];
  if ((SHIBYTE(v425) & 0x80000000) == 0)
  {
LABEL_128:
    if (!BYTE8(v423))
      goto LABEL_137;
    goto LABEL_135;
  }
LABEL_134:
  operator delete(__p[0]);
  if (!BYTE8(v423))
    goto LABEL_137;
LABEL_135:
  if (SBYTE7(v423) < 0)
    operator delete(object[1]);
LABEL_137:
  if (object[0])
    os_release(object[0]);
  if (v58 && *(_QWORD *)(v58 + 24))
  {
    v87 = _os_log_pack_size();
    v88 = (std::__shared_weak_count_vtbl *)operator new(v87, (std::align_val_t)8uLL);
    v89 = (std::__shared_weak_count *)operator new();
    v90 = v89;
    v89->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v89->__shared_owners_;
    v89->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = v88;
    object[0] = v88;
    object[1] = v88;
    object[2] = v89;
    do
      v92 = __ldxr(p_shared_owners);
    while (__stxr(v92 + 1, p_shared_owners));
    v423 = 0uLL;
    __p[0] = 0;
    do
      v93 = __ldaxr(p_shared_owners);
    while (__stlxr(v93 - 1, p_shared_owners));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v90);
    }
    v94 = object[0];
    v95 = _os_log_pack_fill();
    *(_DWORD *)v95 = 134217984;
    *(_QWORD *)(v95 + 4) = v375;
    v96 = operator new();
    v97 = *((unsigned __int8 *)isa + 39);
    v98 = v374;
    if ((v97 & 0x80u) != 0)
    {
      v98 = (char *)*((_QWORD *)isa + 2);
      v97 = *((_QWORD *)isa + 3);
    }
    *(_QWORD *)v96 = v94;
    *(_OWORD *)(v96 + 8) = *(_OWORD *)&object[1];
    object[1] = 0;
    object[2] = 0;
    *(_OWORD *)(v96 + 24) = v423;
    v423 = 0uLL;
    *(_QWORD *)(v96 + 40) = v98;
    *(_QWORD *)(v96 + 48) = v97;
    *(_BYTE *)(v96 + 56) = 1;
    v396[0] = 0;
    *(_QWORD *)v427 = v96;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v58 + 24) + 40))(*(_QWORD *)(v58 + 24), v427);
    v99 = *(_QWORD *)v427;
    *(_QWORD *)v427 = 0;
    if (v99)
    {
      v100 = *(std::__shared_weak_count **)(v99 + 32);
      if (v100)
      {
        v101 = (unint64_t *)&v100->__shared_owners_;
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      v103 = *(std::__shared_weak_count **)(v99 + 16);
      if (v103)
      {
        v104 = (unint64_t *)&v103->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      MEMORY[0x227684CE8](v99, 0x10F0C40B62ED6C6);
      v106 = v396[0];
      v396[0] = 0;
      if (v106)
      {
        v107 = (std::__shared_weak_count *)*((_QWORD *)v106 + 4);
        if (v107)
        {
          v108 = (unint64_t *)&v107->__shared_owners_;
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 - 1, v108));
          if (!v109)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
        v110 = (std::__shared_weak_count *)*((_QWORD *)v106 + 2);
        if (v110)
        {
          v111 = (unint64_t *)&v110->__shared_owners_;
          do
            v112 = __ldaxr(v111);
          while (__stlxr(v112 - 1, v111));
          if (!v112)
          {
            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
            std::__shared_weak_count::__release_weak(v110);
          }
        }
        MEMORY[0x227684CE8](v106, 0x10F0C40B62ED6C6);
      }
    }
    v113 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
    if (*((_QWORD *)&v423 + 1))
    {
      v114 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 8);
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
    }
    v116 = (std::__shared_weak_count *)object[2];
    if (object[2])
    {
      v117 = (unint64_t *)((char *)object[2] + 8);
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
  }
  else
  {
    os_log_type_enabled(v84, OS_LOG_TYPE_INFO);
    LODWORD(object[0]) = 134217984;
    *(void **)((char *)object + 4) = v375;
    v119 = (void *)_os_log_send_and_compose_impl();
    if (v119)
      free(v119);
  }
  if (v56)
  {
    sub_22322C138((uint64_t)oslog, "Updating %lu block statistics", v379);
    sub_223182C08((uint64_t)oslog);
  }
  sub_223182C08((uint64_t)oslog);
  v120 = v415;
  if (v415)
  {
    v121 = (unint64_t *)&v415->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
      v123 = v377;
      if (v377 != &v378)
        goto LABEL_191;
      goto LABEL_573;
    }
  }
LABEL_190:
  v123 = v377;
  if (v377 != &v378)
  {
LABEL_191:
    v361 = *(NSObject **)(MEMORY[0x24BEDB7F0] + 64);
    v362 = *MEMORY[0x24BEDB7F0];
    v360 = *(NSObject **)(MEMORY[0x24BEDB7F0] + 72);
    v373 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v359 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      v401 = 0u;
      v402 = 0u;
      v403 = 728335896;
      kdebug_trace();
      v124 = (char *)operator new(0x20uLL);
      strcpy(v124, "ComputeAreaStatisticsPerBlock");
      sub_223197FA4(v396, v124, 0x1DuLL);
      strcpy((char *)v398, "KeyframeOccupancy");
      HIBYTE(v398[2]) = 17;
      v399[0] = 0;
      v399[1] = 0;
      v400 = 0;
      v399[0] = std::chrono::steady_clock::now().__d_.__rep_;
      v400 = 1;
      operator delete(v124);
      v125 = *(uint64_t *)((char *)v123 + 28);
      v126 = HIDWORD(v125);
      if ((v125 & 7) != 0)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterMap.hpp", 225, (uint64_t)"(block_pos[0] & kBlockRelativeLastIndex) == 0", 45, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_579;
        }
        LODWORD(v126) = *((_DWORD *)v123 + 8);
      }
      if ((v126 & 7) != 0
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterMap.hpp", 226, (uint64_t)"(block_pos[1] & kBlockRelativeLastIndex) == 0", 45, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C)|| *((_DWORD *)v123 + 9)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterMap.hpp", 227, (uint64_t)"block_pos[2] == 0", 17, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
      {
LABEL_579:
        abort();
      }
      v363 = v123;
      v127 = ((char *)v123 + 28);
      for (k = *(uint64_t **)(a1 + 176); k; k = (uint64_t *)*k)
      {
        if (*((_BYTE *)k + 24))
        {
          if (sub_2239942A0(k + 31, (int *)v127))
          {
            object[0] = v127;
            v138 = sub_223ACC774(k + 31, (int *)v127, (uint64_t)&unk_2245BA939, (uint64_t **)object);
            v139 = v138;
            if (v138[7])
            {
              v140 = (_QWORD *)v138[6];
              if (v140)
              {
                do
                {
                  v141 = (_QWORD *)*v140;
                  operator delete(v140);
                  v140 = v141;
                }
                while (v141);
              }
              v139[6] = 0;
              v142 = v139[5];
              if (v142)
              {
                for (m = 0; m != v142; ++m)
                  *(_QWORD *)(v139[4] + 8 * m) = 0;
              }
              v139[7] = 0;
            }
          }
          if (sub_2239942A0(k + 47, (int *)v127))
          {
            object[0] = v127;
            v144 = sub_223ACC3BC((uint64_t)(k + 47), (int *)v127, (uint64_t)&unk_2245BA939, (uint64_t **)object);
            *(_OWORD *)(v144 + 172) = 0u;
            *(_OWORD *)(v144 + 156) = 0u;
            *(_OWORD *)(v144 + 140) = 0u;
            *(_OWORD *)(v144 + 124) = 0u;
            *(_OWORD *)(v144 + 108) = 0u;
            *(_OWORD *)(v144 + 92) = 0u;
            *(_OWORD *)(v144 + 76) = 0u;
            *(_OWORD *)(v144 + 60) = 0u;
            *(_OWORD *)(v144 + 44) = 0u;
            *(_OWORD *)(v144 + 28) = 0u;
          }
          if (sub_2239942A0(k + 52, (int *)v127))
          {
            object[0] = v127;
            v145 = sub_223ACC3BC((uint64_t)(k + 52), (int *)v127, (uint64_t)&unk_2245BA939, (uint64_t **)object);
            *(_OWORD *)(v145 + 172) = 0u;
            *(_OWORD *)(v145 + 156) = 0u;
            *(_OWORD *)(v145 + 140) = 0u;
            *(_OWORD *)(v145 + 124) = 0u;
            *(_OWORD *)(v145 + 108) = 0u;
            *(_OWORD *)(v145 + 92) = 0u;
            *(_OWORD *)(v145 + 76) = 0u;
            *(_OWORD *)(v145 + 60) = 0u;
            *(_OWORD *)(v145 + 44) = 0u;
            *(_OWORD *)(v145 + 28) = 0u;
          }
        }
      }
      v129 = 0;
      v130 = (v125 & 0xFFFFFFFF00000000) + 0x700000000;
      v394 = 0x8000000080000000;
      v395 = 0x7FFFFFFF;
      do
      {
        v131 = &object[v129];
        *v131 = (void *)0x8000000080000000;
        *((_DWORD *)v131 + 2) = 0x7FFFFFFF;
        v131[3] = 0;
        v131[4] = 0;
        v129 += 5;
        v131[2] = 0;
      }
      while (v129 != 320);
      if (SHIDWORD(v125) > SHIDWORD(v130) || (int)v125 > 2147483640)
        break;
      v132 = 0;
      v133 = v125 >> 32;
      v368 = (int)v125;
      v134 = (int)v125 + 7;
      v135 = v130 >> 32;
      v136 = v133 <= v135 ? v135 : v133;
      v137 = v136;
      do
      {
        v146 = *(int8x8_t *)(a1 + 216);
        if (v146)
        {
          v147 = v368;
LABEL_227:
          v148 = (73856093 * v147) ^ (19349669 * v133);
          v149 = (uint8x8_t)vcnt_s8(v146);
          v149.i16[0] = vaddlv_u8(v149);
          if (v149.u32[0] > 1uLL)
          {
            v150 = (73856093 * v147) ^ (19349669 * v133);
            if (v148 >= *(_QWORD *)&v146)
              v150 = v148 % *(_QWORD *)&v146;
          }
          else
          {
            v150 = v148 & (*(_QWORD *)&v146 - 1);
          }
          v151 = *(uint64_t ***)(*(_QWORD *)(a1 + 208) + 8 * v150);
          if (v151)
          {
            v152 = *v151;
            if (v152)
            {
              if (v149.u32[0] < 2uLL)
              {
                v153 = *(_QWORD *)&v146 - 1;
                while (1)
                {
                  v155 = v152[1];
                  if (v155 == v148)
                  {
                    if (*((_DWORD *)v152 + 4) == (_DWORD)v147
                      && *((_DWORD *)v152 + 5) == (_DWORD)v133
                      && !*((_DWORD *)v152 + 6))
                    {
                      goto LABEL_250;
                    }
                  }
                  else if ((v155 & v153) != v150)
                  {
                    goto LABEL_254;
                  }
                  v152 = (uint64_t *)*v152;
                  if (!v152)
                    goto LABEL_254;
                }
              }
              do
              {
                v154 = v152[1];
                if (v154 == v148)
                {
                  if (*((_DWORD *)v152 + 4) == (_DWORD)v147
                    && *((_DWORD *)v152 + 5) == (_DWORD)v133
                    && !*((_DWORD *)v152 + 6))
                  {
LABEL_250:
                    v156 = *((_DWORD *)v152 + 19);
                    if (v156 != -1)
                    {
                      v157 = sub_223AD5A88(a1, v156);
                      v158 = v157;
                      if (*(_BYTE *)v157)
                      {
                        v159 = &object[5 * v132];
                        *(_DWORD *)v159 = v147;
                        *((_DWORD *)v159 + 1) = v133;
                        *((_DWORD *)v159 + 2) = 0;
                        oslog[0] = v127;
                        v159[2] = sub_223ACC774(v157 + 28, (int *)v127, (uint64_t)&unk_2245BA939, (uint64_t **)oslog) + 4;
                        oslog[0] = v127;
                        object[5 * v132 + 3] = sub_223ACC3BC((uint64_t)(v158 + 44), (int *)v127, (uint64_t)&unk_2245BA939, (uint64_t **)oslog)+ 28;
                        oslog[0] = v127;
                        __p[5 * v132++ - 1] = sub_223ACC3BC((uint64_t)(v158 + 49), (int *)v127, (uint64_t)&unk_2245BA939, (uint64_t **)oslog)+ 28;
                      }
                    }
                    v136 = v137;
                    break;
                  }
                }
                else
                {
                  if (v154 >= *(_QWORD *)&v146)
                    v154 %= *(_QWORD *)&v146;
                  if (v154 != v150)
                    break;
                }
                v152 = (uint64_t *)*v152;
              }
              while (v152);
            }
          }
LABEL_254:
          while (v147 != v134)
          {
            ++v147;
            v146 = *(int8x8_t *)(a1 + 216);
            if (v146)
              goto LABEL_227;
          }
        }
        v59 = v133++ == v136;
      }
      while (!v59);
      v160 = (int32x2_t *)v127;
      if (!v132)
        break;
      v161 = *(_DWORD *)(a1 + 356);
      if (v161 <= *(_DWORD *)(a1 + 360))
      {
        v366 = 0;
        v177 = 0;
        v178 = v132;
        while (1)
        {
          v179 = (const float *)(a1 + 4);
          v180 = (int32x2_t)vld1_dup_f32(v179);
          *(int32x2_t *)v427 = vmul_s32(*v160, v180);
          *(_DWORD *)&v427[8] = v161;
          oslog[0] = (os_log_t)(a1 + 8);
          oslog[1] = (os_log_t)v427;
          sub_223AE5064((int *)&v382, (int **)oslog);
          if ((v382 & 0xFFFFFFF8) != (_DWORD)v394
            || (HIDWORD(v382) & 0xFFFFFFF8) != HIDWORD(v394)
            || (rep & 0xFFFFFFF8) != v395)
          {
            v394 = (unint64_t)v382 & 0xFFFFFFF8FFFFFFF8;
            v395 = rep & 0xFFFFFFF8;
            LOBYTE(oslog[0]) = 0;
            LOBYTE(oslog[2]) = 0;
            v183 = sub_223950A98(a6 + 184, (__int128 *)oslog, &v394);
            v184 = a6 + 500;
            if ((v183 & 0x80000000) == 0)
            {
              v185 = v183;
              v186 = *(_QWORD *)(a6 + 20984);
              if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a6 + 20992) - v186) >> 12) <= v183)
              {
                if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
                {
                  abort();
                }
                v186 = *(_QWORD *)(a6 + 20984);
              }
              v184 = v186 + 20480 * v185;
            }
            *a5 = v184;
            ++v366;
          }
          v187 = 0;
          v369 = v177;
          if (v177 >= 0x13)
            v188 = 19;
          else
            v188 = v177;
          do
          {
            v190 = (const float *)(a1 + 4);
            v191 = (int32x2_t)vld1_dup_f32(v190);
            *(int32x2_t *)v427 = vmul_s32((int32x2_t)object[5 * v187], v191);
            *(_DWORD *)&v427[8] = v161;
            oslog[0] = (os_log_t)(a1 + 8);
            oslog[1] = (os_log_t)v427;
            sub_223AE5064((int *)&v382, (int **)oslog);
            v193 = v382;
            v194 = (int32x2_t)v394;
            v195 = rep;
            v196 = v395;
            v197 = *a7;
            if (!*a7)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 2742, (uint64_t)"block_cache != nullptr", 22, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C);
              v198 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v198 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v199 = qword_255795648;
                for (n = qword_255795650; v199 != n; v199 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v199)(*(_QWORD *)(v199 + 8), "block_cache != nullptr", 22, &unk_2245A1559, 0);
              }
              v201 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v201 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                abort();
              qword_255795660(*(_QWORD *)algn_255795668, "block_cache != nullptr", 22, &unk_2245A1559, 0);
              v197 = *a7;
            }
            *(int32x2_t *)v192.i8 = vsub_s32((int32x2_t)v193, v194);
            v202 = (uint32x4_t)vzip1q_s32(v192, v192);
            v202.i32[2] = v192.i32[0];
            v203 = vandq_s8((int8x16_t)vshlq_u32(v202, (uint32x4_t)xmmword_224660CC0), (int8x16_t)xmmword_224660CD0);
            v204 = vorr_s8(*(int8x8_t *)v203.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v203, v203, 8uLL));
            v205 = v197
                 + 40
                 * (v204.i32[0] | (8 * v192.i32[1]) & 0x10 | v204.i32[1] | (v195 - v196) & 1 | (2 * (v192.i8[4] & 1)) | (4 * (v195 - v196)) & 8 | ((((v195 - v196) >> 2) & 1) << 6));
            v206 = *(char *)(v205 + 6);
            if (v206 < 0 || !*(_BYTE *)v205)
              goto LABEL_293;
            v207 = object[5 * v187 + 2];
            *(_WORD *)v427 = *(_WORD *)(v205 + 8);
            oslog[0] = (os_log_t)v427;
            v208 = sub_223AEF740((uint64_t)v207, (unsigned __int16 *)v427, (uint64_t)&unk_2245BA939, (_WORD **)oslog);
            v212 = *((_DWORD *)v208 + 5);
            v213 = *((_DWORD *)v208 + 6);
            if ((_BYTE)v206)
              ++v213;
            else
              ++v212;
            *((_DWORD *)v208 + 5) = v212;
            *((_DWORD *)v208 + 6) = v213;
            v214 = *(unsigned __int8 *)(v205 + 1);
            if ((v214 | 2) != 3)
              goto LABEL_293;
            *(float32x2_t *)v209.f32 = vcvt_f32_s32((int32x2_t)v382);
            v209.f32[2] = (float)(int)rep;
            v215.i64[0] = 0x3F0000003F000000;
            v215.i64[1] = 0x3F0000003F000000;
            if (!*(_BYTE *)(v205 + 6))
            {
              v209 = vaddq_f32(v209, v215);
              v215.i8[0] = *(_BYTE *)(v205 + 3);
              v216 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v215.f32));
              v216.f32[0] = (float)v216.i32[0];
              v210.i8[0] = *(_BYTE *)(v205 + 4);
              v211.i8[0] = *(_BYTE *)(v205 + 5);
              v211 = (float32x2_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)v211)).u64[0];
              v216.f32[1] = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)v210)).i32[0];
              v216.f32[2] = (float)v211.i32[0];
              v210.i32[1] = v373.i32[1];
              v215 = vmulq_f32(v216, v373);
            }
            v217 = vaddq_f32(v209, v215);
            v210.i32[0] = *(_DWORD *)(a1 + 148);
            v218 = (int8x16_t)vmulq_n_f32(v217, *(float *)(a1 + 152));
            v217.i32[0] = *(_DWORD *)(a1 + 124);
            v211.i32[0] = *(_DWORD *)(a1 + 136);
            LODWORD(v219) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v217.f32, *(float32x2_t *)v218.i8), v211, *(float32x2_t *)v218.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v218, v218, 8uLL), v210).u32[0];
            v220 = *(_DWORD *)(a1 + 356);
            if (v161 != v220)
            {
              if (v214 != 1)
                goto LABEL_317;
              if (v161 >= v220 + 7)
              {
                if (v161 == *(_DWORD *)(a1 + 360))
                  goto LABEL_292;
                goto LABEL_293;
              }
            }
            v221 = (char *)object[5 * v187 + 3] + 8 * v188;
            *(float *)v221 = v219 + *(float *)v221;
            ++*((_DWORD *)v221 + 1);
LABEL_317:
            v222 = *(_DWORD *)(a1 + 360);
            if (v161 == v222 || ((v223 = v222 - 7, v214 == 3) ? (v224 = v161 <= v223) : (v224 = 1), !v224))
            {
LABEL_292:
              v189 = (char *)__p[5 * v187 - 1] + 8 * v188;
              *(float *)v189 = v219 + *(float *)v189;
              ++*((_DWORD *)v189 + 1);
            }
LABEL_293:
            ++v187;
          }
          while (v187 != v178);
          v177 = v369 + 1;
          v31 = v161++ < *(_DWORD *)(a1 + 360);
          v160 = (int32x2_t *)v127;
          if (!v31)
            goto LABEL_259;
        }
      }
      v366 = 0;
LABEL_259:
      sub_223AF0EC4(&v408);
      v162 = v363;
      if (*(int *)v408[7] <= 2)
      {
        v163 = *((unsigned __int8 *)v408 + 72);
        v164 = sub_22322F254((uint64_t)v408, "OSLogSurrogateAppender", 1, 0);
        v165 = v164;
        if (v163 || v164)
        {
          *(_QWORD *)v427 = &v408;
          *(std::chrono::steady_clock::time_point *)&v427[8] = std::chrono::steady_clock::now();
          *(std::chrono::system_clock::time_point *)&v427[16] = std::chrono::system_clock::now();
          LODWORD(v428) = 2;
          *((_QWORD *)&v428 + 1) = "unknown file";
          LODWORD(v429) = 323;
          v430 = "unknown function";
          v431 = 0;
          v432 = 0;
          v166 = **(_QWORD **)v427;
          v167 = **(_QWORD **)v427 + 16;
          if (*(char *)(**(_QWORD **)v427 + 39) < 0)
          {
            v169 = *(const char **)(v166 + 16);
            v168 = *(_QWORD *)(v166 + 24);
            v272 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v272 & 1) == 0)
            {
LABEL_567:
              if (__cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)&v382);
                sub_223199C58("com.apple.cv3d", (unint64_t)&v382, byte_255788F40);
                if ((_BYTE)v385 && SHIBYTE(v384) < 0)
                  operator delete(v382);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
              }
            }
          }
          else
          {
            v168 = *(unsigned __int8 *)(**(_QWORD **)v427 + 39);
            v169 = (const char *)(v166 + 16);
            v170 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v170 & 1) == 0)
              goto LABEL_567;
          }
          if (byte_255788F40[23] >= 0)
            v273 = byte_255788F40;
          else
            v273 = *(const char **)byte_255788F40;
          if (byte_255788F40[23] >= 0)
            v274 = byte_255788F40[23];
          else
            v274 = *(_QWORD *)&byte_255788F40[8];
          oslog[0] = os_log_create(v273, v169);
          if (v274 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v274 >= 0x17)
          {
            v372 = v168;
            v276 = v165;
            v277 = v166;
            v278 = v163;
            v279 = v167;
            v280 = v273;
            v281 = v169;
            v282 = (v274 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v274 | 7) != 0x17)
              v282 = v274 | 7;
            v283 = v282 + 1;
            v275 = operator new(v282 + 1);
            *(_QWORD *)&v411 = v283 | 0x8000000000000000;
            oslog[1] = v275;
            oslog[2] = (os_log_t)v274;
            v169 = v281;
            v273 = v280;
            v167 = v279;
            v163 = v278;
            v166 = v277;
            v165 = v276;
            v168 = v372;
          }
          else
          {
            BYTE7(v411) = v274;
            v275 = &oslog[1];
            if (!v274)
            {
LABEL_418:
              *((_BYTE *)&v275->isa + v274) = 0;
              BYTE8(v411) = 1;
              if (v168 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v168 >= 0x17)
              {
                v286 = (v168 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v168 | 7) != 0x17)
                  v286 = v168 | 7;
                v287 = v286 + 1;
                v284 = operator new(v286 + 1);
                v414 = v287 | 0x8000000000000000;
                v412 = v284;
                v413 = (const char *)v168;
                v162 = v363;
              }
              else
              {
                HIBYTE(v414) = v168;
                v284 = &v412;
                v162 = v363;
                if (!v168)
                {
                  LOBYTE(v412) = 0;
                  LOBYTE(v415) = 1;
                  v285 = oslog[0];
                  if ((SHIBYTE(v414) & 0x80000000) == 0)
                    goto LABEL_422;
LABEL_428:
                  operator delete(v412);
                  if (BYTE8(v411))
                    goto LABEL_429;
                  goto LABEL_431;
                }
              }
              memmove(v284, v169, v168);
              *((_BYTE *)v284 + v168) = 0;
              LOBYTE(v415) = 1;
              v285 = oslog[0];
              if (SHIBYTE(v414) < 0)
                goto LABEL_428;
LABEL_422:
              if (BYTE8(v411))
              {
LABEL_429:
                if (SBYTE7(v411) < 0)
                  operator delete(oslog[1]);
              }
LABEL_431:
              if (oslog[0])
                os_release(oslog[0]);
              if (v165 && *(_QWORD *)(v165 + 24))
              {
                v288 = _os_log_pack_size();
                v289 = operator new(v288, (std::align_val_t)8uLL);
                v290 = operator new();
                v291 = (std::__shared_weak_count *)v290;
                v290[1].isa = 0;
                v292 = (unint64_t *)&v290[1];
                v290->isa = (Class)&off_24EC1F7F0;
                v290[2].isa = 0;
                v290[3].isa = (Class)v289;
                oslog[0] = v289;
                oslog[1] = v289;
                oslog[2] = v290;
                do
                  v293 = __ldxr(v292);
                while (__stxr(v293 + 1, v292));
                v411 = 0uLL;
                v412 = 0;
                do
                  v294 = __ldaxr(v292);
                while (__stlxr(v294 - 1, v292));
                if (!v294)
                {
                  (*((void (**))v290->isa + 2))(v290);
                  std::__shared_weak_count::__release_weak(v291);
                }
                v295 = oslog[0];
                v296 = (_DWORD *)_os_log_pack_fill();
                *v296 = 67109120;
                v296[1] = v366;
                v297 = (char *)operator new();
                v298 = *(unsigned __int8 *)(v166 + 39);
                if ((v298 & 0x80u) == 0)
                  v299 = v167;
                else
                  v299 = *(_QWORD *)(v166 + 16);
                if ((v298 & 0x80u) != 0)
                  v298 = *(_QWORD *)(v166 + 24);
                *(_QWORD *)v297 = v295;
                *(_OWORD *)(v297 + 8) = *(_OWORD *)&oslog[1];
                oslog[1] = 0;
                oslog[2] = 0;
                *(_OWORD *)(v297 + 24) = v411;
                v411 = 0uLL;
                *((_QWORD *)v297 + 5) = v299;
                *((_QWORD *)v297 + 6) = v298;
                v297[56] = 2;
                v404[0] = 0;
                v382 = v297;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v165 + 24) + 40))(*(_QWORD *)(v165 + 24), &v382);
                v300 = v382;
                v382 = 0;
                if (v300)
                {
                  v301 = (std::__shared_weak_count *)*((_QWORD *)v300 + 4);
                  if (v301)
                  {
                    v302 = (unint64_t *)&v301->__shared_owners_;
                    do
                      v303 = __ldaxr(v302);
                    while (__stlxr(v303 - 1, v302));
                    if (!v303)
                    {
                      ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                      std::__shared_weak_count::__release_weak(v301);
                    }
                  }
                  v304 = (std::__shared_weak_count *)*((_QWORD *)v300 + 2);
                  if (v304)
                  {
                    v305 = (unint64_t *)&v304->__shared_owners_;
                    do
                      v306 = __ldaxr(v305);
                    while (__stlxr(v306 - 1, v305));
                    if (!v306)
                    {
                      ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
                      std::__shared_weak_count::__release_weak(v304);
                    }
                  }
                  MEMORY[0x227684CE8](v300, 0x10F0C40B62ED6C6);
                  v307 = v404[0];
                  v404[0] = 0;
                  if (v307)
                  {
                    v308 = (std::__shared_weak_count *)*((_QWORD *)v307 + 4);
                    if (v308)
                    {
                      v309 = (unint64_t *)&v308->__shared_owners_;
                      do
                        v310 = __ldaxr(v309);
                      while (__stlxr(v310 - 1, v309));
                      if (!v310)
                      {
                        ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
                        std::__shared_weak_count::__release_weak(v308);
                      }
                    }
                    v311 = (std::__shared_weak_count *)*((_QWORD *)v307 + 2);
                    if (v311)
                    {
                      v312 = (unint64_t *)&v311->__shared_owners_;
                      do
                        v313 = __ldaxr(v312);
                      while (__stlxr(v313 - 1, v312));
                      if (!v313)
                      {
                        ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                        std::__shared_weak_count::__release_weak(v311);
                      }
                    }
                    MEMORY[0x227684CE8](v307, 0x10F0C40B62ED6C6);
                  }
                }
                v314 = (std::__shared_weak_count *)*((_QWORD *)&v411 + 1);
                v162 = v363;
                if (*((_QWORD *)&v411 + 1))
                {
                  v315 = (unint64_t *)(*((_QWORD *)&v411 + 1) + 8);
                  do
                    v316 = __ldaxr(v315);
                  while (__stlxr(v316 - 1, v315));
                  if (!v316)
                  {
                    ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                    std::__shared_weak_count::__release_weak(v314);
                  }
                }
                v317 = (std::__shared_weak_count *)oslog[2];
                if (oslog[2])
                {
                  v318 = (unint64_t *)&oslog[2][1];
                  do
                    v319 = __ldaxr(v318);
                  while (__stlxr(v319 - 1, v318));
                  if (!v319)
                  {
                    ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
                    std::__shared_weak_count::__release_weak(v317);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v285, OS_LOG_TYPE_DEBUG);
                LODWORD(oslog[0]) = 67109120;
                HIDWORD(oslog[0]) = v366;
                v320 = (void *)_os_log_send_and_compose_impl();
                if (v320)
                  free(v320);
              }
              if (v163)
              {
                sub_22322C138((uint64_t)v427, "Per block area statistics calculations had %u cache fetches", v366);
                sub_223182C08((uint64_t)v427);
              }
              sub_223182C08((uint64_t)v427);
              v321 = v432;
              if (v432)
              {
                v322 = (unint64_t *)&v432->__shared_owners_;
                do
                  v323 = __ldaxr(v322);
                while (__stlxr(v323 - 1, v322));
                if (!v323)
                {
                  ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
                  std::__shared_weak_count::__release_weak(v321);
                }
              }
              goto LABEL_546;
            }
          }
          memmove(v275, v273, v274);
          goto LABEL_418;
        }
      }
LABEL_546:
      sub_22391CC34((uint64_t *)v396, v398, (uint64_t)v399);
      if (SHIBYTE(v398[2]) < 0)
      {
        operator delete((void *)v398[0]);
        if (v397 < 0)
LABEL_555:
          operator delete(v396[0]);
      }
      else if (v397 < 0)
      {
        goto LABEL_555;
      }
      kdebug_trace();
      v357 = v162[1];
      if (v357)
      {
        do
        {
          v358 = (uint64_t **)v357;
          v357 = (uint64_t *)*v357;
        }
        while (v357);
      }
      else
      {
        do
        {
          v358 = (uint64_t **)v162[2];
          v59 = *v358 == (uint64_t *)v162;
          v162 = v358;
        }
        while (!v59);
      }
      v123 = v358;
      if (v358 == &v378)
        goto LABEL_573;
    }
    sub_223AF0EC4(&v393);
    v162 = v363;
    if (**(int **)(v393 + 56) > 2)
      goto LABEL_546;
    v171 = *(unsigned __int8 *)(v393 + 72);
    v172 = sub_22322F254(v393, "OSLogSurrogateAppender", 1, 0);
    v173 = v172;
    if (!v171 && v172 == 0)
      goto LABEL_546;
    sub_223195210((uint64_t)oslog);
    sub_2231813E8(&oslog[2], (uint64_t)"Per block area statistics had zero valid area entries", 53);
    v371 = v171;
    if ((v420 & 0x10) != 0)
    {
      v225 = v419;
      v226 = (void **)&v415;
      if (v419 < v416)
      {
        v419 = v416;
        v225 = v416;
        v226 = (void **)&v415;
      }
    }
    else
    {
      if ((v420 & 8) == 0)
      {
        v175 = 0;
        HIBYTE(v392) = 0;
        v176 = __dst;
        goto LABEL_339;
      }
      v225 = v414;
      v226 = &v412;
    }
    v227 = *v226;
    v175 = v225 - (_QWORD)*v226;
    if (v175 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v175 >= 0x17)
    {
      v228 = (v175 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v175 | 7) != 0x17)
        v228 = v175 | 7;
      v229 = v228 + 1;
      v176 = (void **)operator new(v228 + 1);
      __dst[1] = (void *)v175;
      v392 = v229 | 0x8000000000000000;
      __dst[0] = v176;
    }
    else
    {
      HIBYTE(v392) = v225 - *(_BYTE *)v226;
      v176 = __dst;
      if (!v175)
      {
LABEL_339:
        *((_BYTE *)v176 + v175) = 0;
        v382 = &v393;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v384 = std::chrono::system_clock::now().__d_.__rep_;
        v385 = 2;
        v386 = "unknown file";
        v387 = 280;
        v388 = "unknown function";
        v389 = 0;
        v390 = 0;
        if (v392 >= 0)
          v230 = (const char *)__dst;
        else
          v230 = (const char *)__dst[0];
        v231 = *(_QWORD *)v382;
        if (*(char *)(*(_QWORD *)v382 + 39) < 0)
        {
          v233 = *(const char **)(v231 + 16);
          v232 = *(_QWORD *)(v231 + 24);
          v370 = *(_QWORD *)v382 + 16;
          v235 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v235 & 1) != 0)
            goto LABEL_346;
        }
        else
        {
          v232 = *(unsigned __int8 *)(*(_QWORD *)v382 + 39);
          v233 = (const char *)(*(_QWORD *)v382 + 16);
          v370 = (uint64_t)v233;
          v234 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v234 & 1) != 0)
            goto LABEL_346;
        }
        if (__cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v404);
          sub_223199C58("com.apple.cv3d", (unint64_t)v404, byte_255788F40);
          if ((_BYTE)v406 && SHIBYTE(v405) < 0)
            operator delete(v404[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
LABEL_346:
        if (byte_255788F40[23] >= 0)
          v236 = byte_255788F40;
        else
          v236 = *(const char **)byte_255788F40;
        if (byte_255788F40[23] >= 0)
          v237 = byte_255788F40[23];
        else
          v237 = *(_QWORD *)&byte_255788F40[8];
        *(_QWORD *)v427 = os_log_create(v236, v233);
        if (v237 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v237 >= 0x17)
        {
          v239 = v230;
          v240 = (v237 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v237 | 7) != 0x17)
            v240 = v237 | 7;
          v241 = v240 + 1;
          v238 = operator new(v240 + 1);
          *(_QWORD *)&v427[16] = v237;
          *(_QWORD *)&v428 = v241 | 0x8000000000000000;
          *(_QWORD *)&v427[8] = v238;
          v230 = v239;
        }
        else
        {
          BYTE7(v428) = v237;
          v238 = &v427[8];
          if (!v237)
          {
LABEL_360:
            v238[v237] = 0;
            BYTE8(v428) = 1;
            if (v232 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v232 >= 0x17)
            {
              v244 = (v232 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v232 | 7) != 0x17)
                v244 = v232 | 7;
              v245 = v244 + 1;
              v242 = (char *)operator new(v244 + 1);
              v430 = (const char *)v232;
              v431 = v245 | 0x8000000000000000;
              v429 = v242;
              v162 = v363;
            }
            else
            {
              HIBYTE(v431) = v232;
              v242 = (char *)&v429;
              v162 = v363;
              if (!v232)
              {
                LOBYTE(v429) = 0;
                LOBYTE(v432) = 1;
                v243 = *(NSObject **)v427;
                if ((SHIBYTE(v431) & 0x80000000) == 0)
                  goto LABEL_364;
                goto LABEL_370;
              }
            }
            memmove(v242, v233, v232);
            v242[v232] = 0;
            LOBYTE(v432) = 1;
            v243 = *(NSObject **)v427;
            if ((SHIBYTE(v431) & 0x80000000) == 0)
            {
LABEL_364:
              if (!BYTE8(v428))
                goto LABEL_373;
              goto LABEL_371;
            }
LABEL_370:
            operator delete(v429);
            if (!BYTE8(v428))
              goto LABEL_373;
LABEL_371:
            if (SBYTE7(v428) < 0)
              operator delete(*(void **)&v427[8]);
LABEL_373:
            if (*(_QWORD *)v427)
              os_release(*(void **)v427);
            if (!v173 || !*(_QWORD *)(v173 + 24))
            {
              os_log_type_enabled(v243, OS_LOG_TYPE_DEBUG);
              *(_DWORD *)v427 = 136315138;
              *(_QWORD *)&v427[4] = v230;
              v254 = (void *)_os_log_send_and_compose_impl();
              v255 = v371;
              if (!v254)
                goto LABEL_533;
              free(v254);
              if (!v371)
                goto LABEL_537;
              goto LABEL_534;
            }
            v246 = _os_log_pack_size();
            v247 = (std::__shared_weak_count_vtbl *)operator new(v246, (std::align_val_t)8uLL);
            v248 = (std::__shared_weak_count *)operator new();
            v248->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v248->__shared_owners_ = 0;
            v248->__shared_weak_owners_ = 0;
            v248[1].__vftable = v247;
            v404[0] = v247;
            v404[1] = v247;
            v405 = v248;
            v406 = 0;
            v407 = 0;
            v249 = strlen(v230);
            if (v249 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v250 = v249;
            v251 = v230;
            v367 = v231;
            if (v249 >= 0x17)
            {
              v256 = (v249 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v249 | 7) != 0x17)
                v256 = v249 | 7;
              v257 = v256 + 1;
              v252 = (uint64_t *)operator new(v256 + 1);
              *((_QWORD *)&v409 + 1) = v257 | 0x8000000000000000;
              v408 = v252;
              *(_QWORD *)&v409 = v250;
              v253 = v370;
            }
            else
            {
              HIBYTE(v409) = v249;
              v252 = (uint64_t *)&v408;
              v253 = v370;
              if (!v249)
              {
LABEL_388:
                *((_BYTE *)v252 + v250) = 0;
                v258 = (uint64_t)v408;
                v433[0] = v409;
                *(_QWORD *)((char *)v433 + 7) = *(_QWORD *)((char *)&v409 + 7);
                v259 = HIBYTE(v409);
                v260 = operator new(0x38uLL);
                v260[1] = 0;
                v260[2] = 0;
                v260[3] = off_24EC1FA48;
                *v260 = &off_24EC1F9F8;
                v261 = v433[0];
                v260[4] = v258;
                v260[5] = v261;
                *(_QWORD *)((char *)v260 + 47) = *(_QWORD *)((char *)v433 + 7);
                *((_BYTE *)v260 + 55) = v259;
                v433[0] = 0;
                *(_QWORD *)((char *)v433 + 7) = 0;
                v262 = v407;
                v406 = (char *)(v260 + 3);
                v407 = (std::__shared_weak_count *)v260;
                if (v262)
                {
                  v263 = (unint64_t *)&v262->__shared_owners_;
                  do
                    v264 = __ldaxr(v263);
                  while (__stlxr(v264 - 1, v263));
                  if (!v264)
                  {
                    ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
                    std::__shared_weak_count::__release_weak(v262);
                  }
                }
                *(_OWORD *)v427 = *(_OWORD *)v404;
                v265 = v406;
                *(_QWORD *)&v427[16] = v405;
                if (v405)
                {
                  v266 = (unint64_t *)&v405->__shared_owners_;
                  do
                    v267 = __ldxr(v266);
                  while (__stxr(v267 + 1, v266));
                }
                v268 = v407;
                *(_QWORD *)&v428 = v265;
                *((_QWORD *)&v428 + 1) = v407;
                if (v407)
                {
                  v269 = (unint64_t *)&v407->__shared_owners_;
                  do
                    v270 = __ldxr(v269);
                  while (__stxr(v270 + 1, v269));
                  v429 = v265;
                  do
                    v271 = __ldaxr(v269);
                  while (__stlxr(v271 - 1, v269));
                  if (!v271)
                  {
                    ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                    std::__shared_weak_count::__release_weak(v268);
                  }
                }
                else
                {
                  v429 = v265;
                }
                v324 = v405;
                if (v405)
                {
                  v325 = (unint64_t *)&v405->__shared_owners_;
                  do
                    v326 = __ldaxr(v325);
                  while (__stlxr(v326 - 1, v325));
                  if (!v326)
                  {
                    ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
                    std::__shared_weak_count::__release_weak(v324);
                  }
                }
                v327 = *(_QWORD *)v427;
                if (v429[31] >= 0)
                  v328 = v429 + 8;
                else
                  v328 = (char *)*((_QWORD *)v429 + 1);
                v329 = _os_log_pack_fill();
                *(_DWORD *)v329 = 136315138;
                *(_QWORD *)(v329 + 4) = v328;
                v330 = (char *)operator new();
                v331 = *(unsigned __int8 *)(v367 + 39);
                if ((v331 & 0x80u) == 0)
                  v332 = v253;
                else
                  v332 = *(_QWORD *)(v367 + 16);
                if ((v331 & 0x80u) != 0)
                  v331 = *(_QWORD *)(v367 + 24);
                *(_QWORD *)v330 = v327;
                *(_OWORD *)(v330 + 8) = *(_OWORD *)&v427[8];
                *(_QWORD *)&v427[8] = 0;
                *(_QWORD *)&v427[16] = 0;
                *(_OWORD *)(v330 + 24) = v428;
                v428 = 0uLL;
                *((_QWORD *)v330 + 5) = v332;
                *((_QWORD *)v330 + 6) = v331;
                v330[56] = 2;
                v408 = 0;
                v404[0] = v330;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v173 + 24) + 40))(*(_QWORD *)(v173 + 24), v404);
                v255 = v371;
                v333 = v404[0];
                v404[0] = 0;
                if (v333)
                {
                  v334 = (std::__shared_weak_count *)*((_QWORD *)v333 + 4);
                  if (v334)
                  {
                    v335 = (unint64_t *)&v334->__shared_owners_;
                    do
                      v336 = __ldaxr(v335);
                    while (__stlxr(v336 - 1, v335));
                    if (!v336)
                    {
                      ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
                      std::__shared_weak_count::__release_weak(v334);
                    }
                  }
                  v337 = (std::__shared_weak_count *)*((_QWORD *)v333 + 2);
                  if (v337)
                  {
                    v338 = (unint64_t *)&v337->__shared_owners_;
                    do
                      v339 = __ldaxr(v338);
                    while (__stlxr(v339 - 1, v338));
                    if (!v339)
                    {
                      ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
                      std::__shared_weak_count::__release_weak(v337);
                    }
                  }
                  MEMORY[0x227684CE8](v333, 0x10F0C40B62ED6C6);
                  v340 = (uint64_t)v408;
                  v408 = 0;
                  if (v340)
                  {
                    v341 = *(std::__shared_weak_count **)(v340 + 32);
                    if (v341)
                    {
                      v342 = (unint64_t *)&v341->__shared_owners_;
                      do
                        v343 = __ldaxr(v342);
                      while (__stlxr(v343 - 1, v342));
                      if (!v343)
                      {
                        ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
                        std::__shared_weak_count::__release_weak(v341);
                      }
                    }
                    v344 = *(std::__shared_weak_count **)(v340 + 16);
                    if (v344)
                    {
                      v345 = (unint64_t *)&v344->__shared_owners_;
                      do
                        v346 = __ldaxr(v345);
                      while (__stlxr(v346 - 1, v345));
                      if (!v346)
                      {
                        ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
                        std::__shared_weak_count::__release_weak(v344);
                      }
                    }
                    MEMORY[0x227684CE8](v340, 0x10F0C40B62ED6C6);
                  }
                }
                v347 = (std::__shared_weak_count *)*((_QWORD *)&v428 + 1);
                v162 = v363;
                if (!*((_QWORD *)&v428 + 1))
                  goto LABEL_529;
                v348 = (unint64_t *)(*((_QWORD *)&v428 + 1) + 8);
                do
                  v349 = __ldaxr(v348);
                while (__stlxr(v349 - 1, v348));
                if (!v349)
                {
                  ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
                  std::__shared_weak_count::__release_weak(v347);
                  v350 = *(std::__shared_weak_count **)&v427[16];
                  if (!*(_QWORD *)&v427[16])
                    goto LABEL_533;
                }
                else
                {
LABEL_529:
                  v350 = *(std::__shared_weak_count **)&v427[16];
                  if (!*(_QWORD *)&v427[16])
                    goto LABEL_533;
                }
                v351 = (unint64_t *)&v350->__shared_owners_;
                do
                  v352 = __ldaxr(v351);
                while (__stlxr(v352 - 1, v351));
                if (v352)
                {
LABEL_533:
                  if (!v255)
                    goto LABEL_537;
                  goto LABEL_534;
                }
                ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
                std::__shared_weak_count::__release_weak(v350);
                if (!v371)
                  goto LABEL_537;
LABEL_534:
                v353 = (const char *)__dst;
                if (v392 < 0)
                  v353 = (const char *)__dst[0];
                sub_22322C138((uint64_t)&v382, "%s", v353);
                sub_223182C08((uint64_t)&v382);
LABEL_537:
                sub_223182C08((uint64_t)&v382);
                v354 = v390;
                if (!v390)
                  goto LABEL_541;
                v355 = (unint64_t *)&v390->__shared_owners_;
                do
                  v356 = __ldaxr(v355);
                while (__stlxr(v356 - 1, v355));
                if (!v356)
                {
                  ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
                  std::__shared_weak_count::__release_weak(v354);
                  if ((SHIBYTE(v392) & 0x80000000) == 0)
                    goto LABEL_543;
                }
                else
                {
LABEL_541:
                  if ((SHIBYTE(v392) & 0x80000000) == 0)
                  {
LABEL_543:
                    oslog[0] = v362;
                    *(os_log_t *)((char *)oslog + (unint64_t)v362[-3].isa) = v361;
                    oslog[2] = v360;
                    *(_QWORD *)&v411 = v359;
                    if (v418 < 0)
                      operator delete(v417);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x227684BE0](&v421);
                    goto LABEL_546;
                  }
                }
                operator delete(__dst[0]);
                goto LABEL_543;
              }
            }
            memcpy(v252, v251, v250);
            goto LABEL_388;
          }
        }
        memmove(v238, v236, v237);
        goto LABEL_360;
      }
    }
    memmove(v176, v227, v175);
    goto LABEL_339;
  }
LABEL_573:
  kdebug_trace();
  HIBYTE(object[2]) = 21;
  strcpy((char *)object, "ComputeAreaStatistics");
  HIBYTE(oslog[2]) = 17;
  strcpy((char *)oslog, "KeyframeOccupancy");
  sub_22391CC34((uint64_t *)object, (uint64_t *)oslog, (uint64_t)v380);
  if (SHIBYTE(oslog[2]) < 0)
  {
    operator delete(oslog[0]);
    if ((SHIBYTE(object[2]) & 0x80000000) == 0)
      goto LABEL_575;
LABEL_577:
    operator delete(object[0]);
    goto LABEL_575;
  }
  if (SHIBYTE(object[2]) < 0)
    goto LABEL_577;
LABEL_575:
  sub_223198030((uint64_t)&v377, v378);
}

void sub_223B671E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54)
{
  if (LOBYTE(STACK[0x3F8]))
  {
    if (SLOBYTE(STACK[0x3F7]) < 0)
      operator delete((void *)STACK[0x3E0]);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x2C0]);
  sub_223198030((uint64_t)&a53, (_QWORD *)a54);
  _Unwind_Resume(a1);
}

uint64_t sub_223B675E0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, __int128 *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  __int128 __p;
  char v44;
  char v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t (**v48)();
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t *v54[4];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v12 = (_QWORD *)*a3;
    v10 = a3 + 1;
    v11 = v12;
    if (v12 != v10)
    {
      do
      {
        kdebug_trace();
        v54[0] = (_QWORD *)((char *)v11 + 28);
        sub_223939EBC(a4 + 21304, (int *)v11 + 7, (uint64_t)&unk_2245BA939, v54);
        sub_223B0C2F8();
        kdebug_trace();
        v13 = (_QWORD *)v11[1];
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v11[2];
            v15 = *v14 == (_QWORD)v11;
            v11 = v14;
          }
          while (!v15);
        }
        v11 = v14;
      }
      while (v14 != v10);
    }
    v54[0] = *(uint64_t **)(a4 + 21320);
    v54[2] = 0;
    sub_2241498F4((uint64_t)&v46, 0);
    sub_22392E874(&v46, (uint64_t)v54);
    LOBYTE(__p) = 0;
    v45 = 0;
    sub_22329F414((uint64_t)&v46, &__p, a5, &v51);
    if (v45 && v44 < 0)
      operator delete((void *)__p);
    sub_22316F8F4(&v46);
    v16 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    v18 = *v16;
    v17 = (std::__shared_weak_count *)v16[1];
    v42 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    v22 = v52;
    v21 = v53;
    v41 = v53;
    v52 = 0;
    v53 = 0;
    v46 = v18;
    v47 = v17;
    if (v17)
    {
      v23 = (unint64_t *)&v17->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v48 = &off_24EC6A3B8;
    v49 = v22;
    v50 = v21;
    if (v21)
    {
      v25 = (unint64_t *)&v21->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 16))(a1, &v46);
    v27 = v50;
    if (v50)
    {
      v28 = (unint64_t *)&v50->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = v47;
    if (v47)
    {
      v31 = (unint64_t *)&v47->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    if (v41)
    {
      v33 = (unint64_t *)&v41->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (v42)
    {
      v35 = (unint64_t *)&v42->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v37 = v53;
    if (v53)
    {
      v38 = (unint64_t *)&v53->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  return a1;
}

void sub_223B67950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  sub_2231AA880((uint64_t)va2);
  sub_2241231D8((uint64_t)va);
  sub_223167354((uint64_t)va1);
  sub_2241231D8(v3 - 152);
  _Unwind_Resume(a1);
}

void sub_223B6797C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2241231D8(v1 - 152);
  _Unwind_Resume(a1);
}

void sub_223B67990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,int a23,uint64_t a24)
{
  if (a22)
  {
    if (a21 < 0)
    {
      operator delete(__p);
      sub_22316F8F4(&a24);
      _Unwind_Resume(a1);
    }
  }
  sub_22316F8F4(&a24);
  _Unwind_Resume(a1);
}

int32x4_t sub_223B679D8(int32x4_t *a1, int32x4_t *a2)
{
  unsigned __int32 v4;
  unsigned __int32 v5;
  int32x4_t result;

  if (a1->i32[0] < (unsigned __int32)a2->i32[0]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/MultiFloorDetection.cpp", 55, (uint64_t)"floor >= other.floor", 20, (uint64_t)&unk_2245A288A, 0, (void (*)(void **))sub_22457406C)|| a1->i32[1] < (unsigned __int32)a2->i32[1]&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/MultiFloorDetection.cpp", 56, (uint64_t)"ceiling >= other.ceiling", 24, (uint64_t)&unk_2245A288A, 0, (void (*)(void **))sub_22457406C)|| a1->i32[2] < (unsigned __int32)a2->i32[2]&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/MultiFloorDetection.cpp",
         57,
         (uint64_t)"occupied >= other.occupied",
         26,
         (uint64_t)&unk_2245A288A,
         0,
         (void (*)(void **))sub_22457406C)
    || a1->i32[3] < (unsigned __int32)a2->i32[3]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/MultiFloorDetection.cpp", 58, (uint64_t)"free >= other.free", 18, (uint64_t)&unk_2245A288A, 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_13;
  }
  v4 = a1[1].u32[0];
  v5 = a2[1].u32[0];
  if (v4 < v5)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/MultiFloorDetection.cpp", 59, (uint64_t)"kf_pose >= other.kf_pose", 24, (uint64_t)&unk_2245A288A, 0, (void (*)(void **))sub_22457406C))
    {
      v5 = a2[1].u32[0];
      v4 = a1[1].u32[0];
      goto LABEL_12;
    }
LABEL_13:
    abort();
  }
LABEL_12:
  result = vsubq_s32(*a1, *a2);
  *a1 = result;
  a1[1].i32[0] = v4 - v5;
  return result;
}

double sub_223B67B70(uint64_t a1, __int32 a2, int32x4_t *a3)
{
  int32x4_t *v6;
  int32x4_t *v7;
  uint64_t *v8;
  __int32 v9;
  int32x4_t *v10;
  __int32 v11;
  int32x4_t *v12;
  uint64_t v13;
  uint64_t *v14;
  double result;

  v7 = (int32x4_t *)(a1 + 16);
  v6 = *(int32x4_t **)(a1 + 16);
  if (v6)
  {
    v8 = *(uint64_t **)(a1 + 16);
    do
    {
      v9 = *((_DWORD *)v8 + 7);
      if (v9 <= a2)
      {
        if (v9 >= a2)
          goto LABEL_12;
        ++v8;
      }
      v8 = (uint64_t *)*v8;
    }
    while (v8);
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/MultiFloorDetection.cpp", 81, (uint64_t)"global_heights_.count(height) > 0", 33, (uint64_t)&unk_2245A288A, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v6 = (int32x4_t *)v7->i64[0];
  v10 = v7;
  if (v7->i64[0])
  {
    while (1)
    {
LABEL_12:
      while (1)
      {
        v10 = v6;
        v11 = v6[1].i32[3];
        if (v11 <= a2)
          break;
        v6 = (int32x4_t *)v10->i64[0];
        v7 = v10;
        if (!v10->i64[0])
          goto LABEL_16;
      }
      if (v11 >= a2)
        break;
      v6 = (int32x4_t *)v10->i64[1];
      if (!v6)
      {
        v7 = (int32x4_t *)&v10->u64[1];
        goto LABEL_16;
      }
    }
  }
  else
  {
LABEL_16:
    v12 = v10;
    v10 = (int32x4_t *)operator new(0x38uLL);
    v10[1].i32[3] = a2;
    v10[2].i64[0] = 0;
    v10[2].i64[1] = 0;
    v10[3].i32[0] = 0;
    v10->i64[0] = 0;
    v10->i64[1] = 0;
    v10[1].i64[0] = (uint64_t)v12;
    v7->i64[0] = (uint64_t)v10;
    v13 = **(_QWORD **)(a1 + 8);
    v14 = (uint64_t *)v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 8) = v13;
      v14 = (uint64_t *)v7->i64[0];
    }
    sub_2231A9A8C(*(uint64_t **)(a1 + 16), v14);
    ++*(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)&result = sub_223B679D8(v10 + 2, a3).u64[0];
  return result;
}

int32x4_t sub_223B67CB0(uint64_t a1, __int32 a2, int32x4_t *a3)
{
  int32x4_t *v6;
  uint64_t **v7;
  int32x4_t *v8;
  __int32 v9;
  int32x4_t *v10;
  uint64_t v11;
  uint64_t *v12;
  int32x4_t result;

  v7 = (uint64_t **)(a1 + 16);
  v6 = *(int32x4_t **)(a1 + 16);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = v6[1].i32[3];
        if (v9 <= a2)
          break;
        v6 = (int32x4_t *)v8->i64[0];
        v7 = (uint64_t **)v8;
        if (!v8->i64[0])
          goto LABEL_8;
      }
      if (v9 >= a2)
        break;
      v6 = (int32x4_t *)v8->i64[1];
      if (!v6)
      {
        v7 = (uint64_t **)&v8->i64[1];
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = (int32x4_t *)(a1 + 16);
LABEL_8:
    v10 = v8;
    v8 = (int32x4_t *)operator new(0x38uLL);
    v8[1].i32[3] = a2;
    v8[2].i64[0] = 0;
    v8[2].i64[1] = 0;
    v8[3].i32[0] = 0;
    v8->i64[0] = 0;
    v8->i64[1] = 0;
    v8[1].i64[0] = (uint64_t)v10;
    *v7 = (uint64_t *)v8;
    v11 = **(_QWORD **)(a1 + 8);
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *(_QWORD *)(a1 + 8) = v11;
      v12 = *v7;
    }
    sub_2231A9A8C(*(uint64_t **)(a1 + 16), v12);
    ++*(_QWORD *)(a1 + 24);
  }
  result = vaddq_s32(v8[2], *a3);
  v8[2] = result;
  v8[3].i32[0] += a3[1].i32[0];
  return result;
}

void sub_223B67D98(float *a1, int a2, int a3)
{
  char __p[18];
  char v7;
  void *v8;
  __int128 v9;
  _QWORD v10[2];
  char v11;

  v10[1] = 0;
  v10[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v11 = 1;
  kdebug_trace();
  sub_223B67F0C(a1, a2, a3);
  kdebug_trace();
  v8 = operator new(0x28uLL);
  v9 = xmmword_2245C77E0;
  strcpy((char *)v8, "MultiFloorDetection_DetectFloors");
  v7 = 17;
  strcpy(__p, "KeyframeOccupancy");
  sub_22391CC34((uint64_t *)&v8, (uint64_t *)__p, (uint64_t)v10);
  if ((v7 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v9) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v8);
    return;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v9) < 0)
    goto LABEL_5;
}

void sub_223B67EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_223B67F0C(float *a1, int a2, int a3)
{
  float *v4;
  float v5;
  int v6;
  int v7;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  signed int v11;
  int v12;
  signed int v13;
  float v14;
  int v15;
  int v16;
  signed int v17;
  _QWORD *v18;
  signed int v19;
  unsigned int v20;
  int v21;
  signed int v22;
  int v23;
  signed int v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD *v27;
  _DWORD *v28;
  int v29;
  int v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  int v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  size_t v42;
  const char *v43;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  const char *v49;
  size_t v50;
  unint64_t v51;
  unsigned __int8 v52;
  const char *v53;
  size_t v54;
  const char *v55;
  void **v56;
  uint64_t v57;
  uint64_t v58;
  void **v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  size_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  char *v103;
  _BYTE *v104;
  unint64_t v105;
  char *v106;
  _QWORD *v107;
  float v108;
  int v109;
  int v110;
  int v111;
  _QWORD *v112;
  _QWORD *v113;
  float v114;
  int v115;
  char *v116;
  int v117;
  BOOL v118;
  float v119;
  float v120;
  int v121;
  float v122;
  float v123;
  char *v124;
  int v125;
  unint64_t v126;
  int v127;
  int v128;
  float v129;
  int v130;
  char *v131;
  uint64_t v132;
  char *v133;
  int64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  int *v140;
  int64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  __int128 v149;
  int v150;
  float v151;
  char *v152;
  char *v153;
  unint64_t v154;
  int64_t v155;
  float **v156;
  float *v157;
  float *v158;
  unint64_t v159;
  float *v160;
  uint64_t v161;
  char *v162;
  unint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  void *v170;
  unint64_t v171;
  char *v172;
  void *v173;
  void *v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  size_t v182;
  unint64_t v183;
  char *v184;
  unint64_t v185;
  char *v186;
  int64_t v187;
  unint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  __int128 *v194;
  char *v195;
  uint64_t v196;
  __int128 v197;
  uint64_t v198;
  char *v199;
  char *v200;
  char *v201;
  void *v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  unint64_t v212;
  char *v213;
  char *v214;
  unint64_t v215;
  int64_t v216;
  unint64_t v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  __int128 *v224;
  char *v225;
  uint64_t v226;
  __int128 v227;
  unint64_t v228;
  _BYTE *v229;
  unint64_t v230;
  char *v231;
  char *v232;
  char *v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  __int128 *v237;
  _OWORD *v238;
  uint64_t v239;
  __int128 v240;
  uint64_t v241;
  void **v242;
  void **v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  void **v247;
  unint64_t v248;
  char *v249;
  unint64_t v250;
  char *v251;
  int64_t v252;
  unint64_t v253;
  char *v254;
  void **v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  __int128 *v259;
  char *v260;
  uint64_t v261;
  __int128 v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  int v271;
  __int16 v272;
  _QWORD *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  int v286;
  int v287;
  char *i;
  char *v289;
  char *v290;
  char *v291;
  BOOL v292;
  char *v293;
  uint64_t v294;
  int v295;
  _QWORD *v296;
  int v297;
  BOOL v298;
  uint64_t *v299;
  int64_t v300;
  _QWORD *v301;
  _QWORD *v302;
  uint64_t v303;
  int v304;
  _QWORD *v305;
  int v306;
  BOOL v307;
  uint64_t *v308;
  char *v309;
  _QWORD *v310;
  _QWORD *v311;
  int v312;
  unint64_t v313;
  char *v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  unint64_t v318;
  char *v319;
  char *v320;
  char *v321;
  char *v322;
  void **v323;
  void **v324;
  unint64_t v325;
  int v326;
  int v327;
  unint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  _DWORD *v334;
  char *v335;
  void *v336;
  unint64_t v337;
  unsigned __int8 v338;
  const char *v339;
  size_t v340;
  const char *v341;
  void **v342;
  uint64_t v343;
  uint64_t v344;
  void **v345;
  uint64_t v346;
  uint64_t v347;
  NSObject *v348;
  size_t v349;
  std::__shared_weak_count_vtbl *v350;
  std::__shared_weak_count *v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  unint64_t v355;
  void *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  const char *v360;
  uint64_t v361;
  int v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  uint64_t v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  std::__shared_weak_count *v379;
  unint64_t *v380;
  unint64_t v381;
  void *v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  float *v386;
  float *v387;
  int v388;
  signed int v389;
  char *v390;
  uint64_t v391;
  const char *v392;
  uint64_t v393;
  float v394;
  char *v395;
  char *v396;
  char *v397;
  char *v398;
  int v399;
  int v400;
  int v401;
  int v402;
  void **v403;
  int v404;
  int v405;
  char *v406;
  char *v407;
  char *v408;
  int v409;
  int v410;
  _QWORD *v411;
  void *v412;
  char *rep;
  char *v414;
  int v415;
  const char *v416;
  int v417;
  const char *v418;
  uint64_t v419;
  std::__shared_weak_count *v420;
  uint64_t v421;
  uint64_t v422;
  __int128 v423;
  void *object[6];
  size_t v425;
  unint64_t v426;
  char v427;
  uint64_t v428;

  v4 = a1;
  v428 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  if (a2 != 1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/MultiFloorDetection.cpp", 116, (uint64_t)"up_sign == 1 && \"Only support coordinates where up points to positive direction\"", 80, (uint64_t)&unk_2245A288A, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v6 = (int)(float)(1.5 / v5);
  v7 = (int)(float)(1.0 / v5);
  v8 = (char *)*((_QWORD *)v4 + 4);
  v398 = (char *)*((_QWORD *)v4 + 5);
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = 0;
  *((_QWORD *)v4 + 4) = 0;
  v9 = *((_QWORD *)v4 + 1);
  v403 = (void **)(v4 + 8);
  v411 = v4 + 4;
  if ((float *)v9 == v4 + 4)
    goto LABEL_32;
  v10 = 0;
  v11 = 0;
  v12 = (int)(float)(2.5 / v5);
  v404 = (int)(float)(5.0 / v5);
  v13 = 0x80000000;
  v14 = 1.0 / (float)v12;
  v15 = 0x7FFFFFFF;
  v16 = 0x7FFFFFFF;
  v17 = 0x80000000;
  v18 = (_QWORD *)*((_QWORD *)v4 + 1);
  do
  {
    v19 = *((_DWORD *)v18 + 7);
    v20 = *((_DWORD *)v18 + 12);
    if (v19 >= v15)
      v21 = v15;
    else
      v21 = *((_DWORD *)v18 + 7);
    if (v13 <= v19)
      v22 = *((_DWORD *)v18 + 7);
    else
      v22 = v13;
    if (*((_DWORD *)v18 + 11))
    {
      v13 = v22;
      v15 = v21;
    }
    if (v19 >= v16)
      v23 = v16;
    else
      v23 = *((_DWORD *)v18 + 7);
    if (v17 <= v19)
      v24 = *((_DWORD *)v18 + 7);
    else
      v24 = v17;
    if (v20 > v10)
    {
      v25 = *((_DWORD *)v18 + 12);
    }
    else
    {
      v19 = v11;
      v25 = v10;
    }
    if (v20)
    {
      v17 = v24;
      v16 = v23;
      v11 = v19;
      v10 = v25;
    }
    v26 = (_QWORD *)v18[1];
    if (v26)
    {
      do
      {
        v27 = v26;
        v26 = (_QWORD *)*v26;
      }
      while (v26);
    }
    else
    {
      do
      {
        v27 = (_QWORD *)v18[2];
        v39 = *v27 == (_QWORD)v18;
        v18 = v27;
      }
      while (!v39);
    }
    v18 = v27;
  }
  while (v27 != v411);
  if (v17 < v16)
  {
LABEL_32:
    v28 = operator new(0x10uLL);
    v29 = v7 + a3;
    v30 = a3 - v6;
LABEL_33:
    *(_QWORD *)v28 = 0x7FFFFFFF80000000;
    v28[2] = v30;
    v28[3] = v29;
    *((_QWORD *)v4 + 5) = v28 + 4;
    *((_QWORD *)v4 + 6) = v28 + 4;
    *((_QWORD *)v4 + 4) = v28;
    goto LABEL_34;
  }
  if (v13 < v15)
  {
    v28 = operator new(0x10uLL);
    v29 = v11 + v7;
    v30 = v11 - v6;
    goto LABEL_33;
  }
  v388 = (int)(float)(1.0 / v5);
  v31 = *(_DWORD *)(v9 + 28) - v404 + 1;
  v32 = v4 + 4;
  v33 = *v411;
  if (*v411)
  {
    do
    {
      v34 = v33;
      v33 = *(_QWORD *)(v33 + 8);
    }
    while (v33);
  }
  else
  {
    v35 = v4 + 4;
    do
    {
      v34 = v35[2];
      v39 = *(_QWORD *)v34 == (_QWORD)v35;
      v35 = (_QWORD *)v34;
    }
    while (v39);
  }
  v36 = v404 + *(_DWORD *)(v34 + 28) - 1;
  if (v31 >= v36
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/MultiFloorDetection.cpp", 220, (uint64_t)"min_h < max_h", 13, (uint64_t)&unk_2245A288A, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v410 = v11 - 256;
  v405 = (int)(float)(1.5 / v5);
  v389 = v11;
  if (v31 < v11 - 256)
  {
    sub_223B6A53C(&v421);
    if (**(int **)(v421 + 56) > 5)
      goto LABEL_145;
    v37 = *(unsigned __int8 *)(v421 + 72);
    v38 = sub_22322F254(v421, "OSLogSurrogateAppender", 1, 0);
    v39 = !v37 && v38 == 0;
    if (v39)
      goto LABEL_145;
    v40 = v38;
    v386 = v4;
    v395 = v8;
    v412 = &v421;
    rep = (char *)std::chrono::steady_clock::now().__d_.__rep_;
    v414 = (char *)std::chrono::system_clock::now().__d_.__rep_;
    v415 = 5;
    v416 = "unknown file";
    v417 = 229;
    v419 = 0;
    v420 = 0;
    v418 = "unknown function";
    v41 = v421;
    if (*(char *)(v421 + 39) < 0)
    {
      v43 = *(const char **)(v421 + 16);
      v42 = *(_QWORD *)(v421 + 24);
    }
    else
    {
      v42 = *(unsigned __int8 *)(v421 + 39);
      v43 = (const char *)(*(_QWORD *)v412 + 16);
    }
    v51 = v40;
    v401 = v37;
    v393 = v421 + 16;
    v52 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
      if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
        operator delete(object[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
      v51 = v40;
    }
    if (byte_255788F40[23] >= 0)
      v53 = byte_255788F40;
    else
      v53 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v54 = byte_255788F40[23];
    else
      v54 = *(_QWORD *)&byte_255788F40[8];
    v55 = v43;
    object[0] = os_log_create(v53, v43);
    v56 = &object[1];
    if (v54 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v54 >= 0x17)
    {
      v57 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v54 | 7) != 0x17)
        v57 = v54 | 7;
      v58 = v57 + 1;
      v56 = (void **)operator new(v57 + 1);
      object[2] = (void *)v54;
      object[3] = (void *)(v58 | 0x8000000000000000);
      object[1] = v56;
    }
    else
    {
      HIBYTE(object[3]) = v54;
      if (!v54)
      {
LABEL_76:
        *((_BYTE *)v56 + v54) = 0;
        LOBYTE(object[4]) = 1;
        v59 = &object[5];
        if (v42 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v60 = v410;
        if (v42 >= 0x17)
        {
          v61 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v42 | 7) != 0x17)
            v61 = v42 | 7;
          v62 = v61 + 1;
          v59 = (void **)operator new(v61 + 1);
          v425 = v42;
          v426 = v62 | 0x8000000000000000;
          object[5] = v59;
          v6 = (int)(float)(1.5 / v5);
        }
        else
        {
          HIBYTE(v426) = v42;
          v6 = (int)(float)(1.5 / v5);
          if (!v42)
            goto LABEL_84;
        }
        memmove(v59, v55, v42);
LABEL_84:
        *((_BYTE *)v59 + v42) = 0;
        v427 = 1;
        v63 = object[0];
        if (SHIBYTE(v426) < 0)
          operator delete(object[5]);
        if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
          operator delete(object[1]);
        if (object[0])
          os_release(object[0]);
        if (v51 && *(_QWORD *)(v51 + 24))
        {
          v64 = _os_log_pack_size();
          v65 = (std::__shared_weak_count_vtbl *)operator new(v64, (std::align_val_t)8uLL);
          v66 = (std::__shared_weak_count *)operator new();
          v67 = v66;
          v66->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v66->__shared_owners_;
          v66->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v66->__shared_weak_owners_ = 0;
          v66[1].__vftable = v65;
          object[0] = v65;
          object[1] = v65;
          object[2] = v66;
          do
            v69 = __ldxr(p_shared_owners);
          while (__stxr(v69 + 1, p_shared_owners));
          memset(&object[3], 0, 24);
          do
            v70 = __ldaxr(p_shared_owners);
          while (__stlxr(v70 - 1, p_shared_owners));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v67);
          }
          v71 = object[0];
          v72 = _os_log_pack_fill();
          *(_DWORD *)v72 = 67109376;
          *(_DWORD *)(v72 + 4) = v31;
          *(_WORD *)(v72 + 8) = 1024;
          *(_DWORD *)(v72 + 10) = v410;
          v73 = operator new();
          v74 = *(unsigned __int8 *)(v41 + 39);
          v75 = v393;
          if ((v74 & 0x80u) != 0)
          {
            v75 = *(_QWORD *)(v41 + 16);
            v74 = *(_QWORD *)(v41 + 24);
          }
          *(_QWORD *)v73 = v71;
          *(_OWORD *)(v73 + 8) = *(_OWORD *)&object[1];
          object[1] = 0;
          object[2] = 0;
          *(_OWORD *)(v73 + 24) = *(_OWORD *)&object[3];
          object[3] = 0;
          object[4] = 0;
          *(_QWORD *)(v73 + 40) = v75;
          *(_QWORD *)(v73 + 48) = v74;
          *(_BYTE *)(v73 + 56) = 16;
          v422 = 0;
          *(_QWORD *)&v423 = v73;
          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v51 + 24) + 40))(*(_QWORD *)(v51 + 24), &v423);
          v76 = v423;
          *(_QWORD *)&v423 = 0;
          v8 = v395;
          v4 = v386;
          if (v76)
          {
            v77 = *(std::__shared_weak_count **)(v76 + 32);
            if (v77)
            {
              v78 = (unint64_t *)&v77->__shared_owners_;
              do
                v79 = __ldaxr(v78);
              while (__stlxr(v79 - 1, v78));
              if (!v79)
              {
                ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                std::__shared_weak_count::__release_weak(v77);
              }
            }
            v80 = *(std::__shared_weak_count **)(v76 + 16);
            if (v80)
            {
              v81 = (unint64_t *)&v80->__shared_owners_;
              do
                v82 = __ldaxr(v81);
              while (__stlxr(v82 - 1, v81));
              if (!v82)
              {
                ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                std::__shared_weak_count::__release_weak(v80);
              }
            }
            MEMORY[0x227684CE8](v76, 0x10F0C40B62ED6C6);
            v83 = v422;
            v422 = 0;
            if (v83)
            {
              v84 = *(std::__shared_weak_count **)(v83 + 32);
              if (v84)
              {
                v85 = (unint64_t *)&v84->__shared_owners_;
                do
                  v86 = __ldaxr(v85);
                while (__stlxr(v86 - 1, v85));
                if (!v86)
                {
                  ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                  std::__shared_weak_count::__release_weak(v84);
                }
              }
              v87 = *(std::__shared_weak_count **)(v83 + 16);
              if (v87)
              {
                v88 = (unint64_t *)&v87->__shared_owners_;
                do
                  v89 = __ldaxr(v88);
                while (__stlxr(v89 - 1, v88));
                if (!v89)
                {
                  ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                  std::__shared_weak_count::__release_weak(v87);
                }
              }
              MEMORY[0x227684CE8](v83, 0x10F0C40B62ED6C6);
            }
          }
          v90 = (std::__shared_weak_count *)object[4];
          v12 = (int)(float)(2.5 / v5);
          if (object[4])
          {
            v91 = (unint64_t *)((char *)object[4] + 8);
            do
              v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
              std::__shared_weak_count::__release_weak(v90);
            }
          }
          v93 = (std::__shared_weak_count *)object[2];
          if (object[2])
          {
            v94 = (unint64_t *)((char *)object[2] + 8);
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
            }
          }
          v60 = v410;
        }
        else
        {
          os_log_type_enabled(v63, OS_LOG_TYPE_ERROR);
          LODWORD(object[0]) = 67109376;
          HIDWORD(object[0]) = v31;
          LOWORD(object[1]) = 1024;
          *(_DWORD *)((char *)&object[1] + 2) = v410;
          v96 = (void *)_os_log_send_and_compose_impl();
          v8 = v395;
          v4 = v386;
          v12 = (int)(float)(2.5 / v5);
          if (v96)
            free(v96);
        }
        if (v401)
        {
          sub_22322C138((uint64_t)&v412, "MultiFloorDetection scene min height %d under limit %d", v31, v60);
          sub_223182C08((uint64_t)&v412);
        }
        sub_223182C08((uint64_t)&v412);
        v97 = v420;
        if (v420)
        {
          v98 = (unint64_t *)&v420->__shared_owners_;
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
        }
        v32 = v411;
LABEL_145:
        v44 = v389 + 256;
        if (v36 <= v389 + 256)
          goto LABEL_146;
        goto LABEL_55;
      }
    }
    memmove(v56, v53, v54);
    goto LABEL_76;
  }
  v410 = v31;
  v44 = v11 + 256;
  if (v36 <= v44)
  {
LABEL_146:
    v44 = v36;
    goto LABEL_147;
  }
LABEL_55:
  sub_223B6A53C(&v421);
  if (**(int **)(v421 + 56) > 5
    || (v45 = *(unsigned __int8 *)(v421 + 72),
        v46 = sub_22322F254(v421, "OSLogSurrogateAppender", 1, 0),
        v47 = v46,
        !v45)
    && !v46)
  {
LABEL_147:
    v412 = 0;
    rep = 0;
    v414 = 0;
    v100 = v44 - v410;
    v101 = v44 - v410 + 1;
    if (v44 - v410 == -1)
      goto LABEL_150;
    goto LABEL_148;
  }
  v399 = v12;
  v400 = v44;
  v396 = v8;
  v412 = &v421;
  rep = (char *)std::chrono::steady_clock::now().__d_.__rep_;
  v414 = (char *)std::chrono::system_clock::now().__d_.__rep_;
  v415 = 5;
  v416 = "unknown file";
  v417 = 234;
  v419 = 0;
  v420 = 0;
  v418 = "unknown function";
  v48 = *(_QWORD *)v412;
  v49 = (const char *)(*(_QWORD *)v412 + 16);
  v392 = v49;
  if (*(char *)(*(_QWORD *)v412 + 39) < 0)
  {
    v49 = *(const char **)(v48 + 16);
    v50 = *(_QWORD *)(v48 + 24);
  }
  else
  {
    v50 = *(unsigned __int8 *)(*(_QWORD *)v412 + 39);
  }
  v337 = v47;
  v409 = v36;
  v338 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v338 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
    if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
    v337 = v47;
  }
  if (byte_255788F40[23] >= 0)
    v339 = byte_255788F40;
  else
    v339 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v340 = byte_255788F40[23];
  else
    v340 = *(_QWORD *)&byte_255788F40[8];
  v341 = v49;
  object[0] = os_log_create(v339, v49);
  v342 = &object[1];
  if (v340 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v340 >= 0x17)
  {
    v343 = (v340 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v340 | 7) != 0x17)
      v343 = v340 | 7;
    v344 = v343 + 1;
    v342 = (void **)operator new(v343 + 1);
    object[2] = (void *)v340;
    object[3] = (void *)(v344 | 0x8000000000000000);
    object[1] = v342;
    goto LABEL_480;
  }
  HIBYTE(object[3]) = v340;
  if (v340)
LABEL_480:
    memmove(v342, v339, v340);
  *((_BYTE *)v342 + v340) = 0;
  LOBYTE(object[4]) = 1;
  v345 = &object[5];
  if (v50 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v50 >= 0x17)
  {
    v346 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17)
      v346 = v50 | 7;
    v347 = v346 + 1;
    v345 = (void **)operator new(v346 + 1);
    v425 = v50;
    v426 = v347 | 0x8000000000000000;
    object[5] = v345;
    v6 = (int)(float)(1.5 / v5);
    goto LABEL_488;
  }
  HIBYTE(v426) = v50;
  v6 = (int)(float)(1.5 / v5);
  if (v50)
LABEL_488:
    memmove(v345, v341, v50);
  *((_BYTE *)v345 + v50) = 0;
  v427 = 1;
  v348 = object[0];
  if (SHIBYTE(v426) < 0)
    operator delete(object[5]);
  if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
    operator delete(object[1]);
  if (object[0])
    os_release(object[0]);
  if (v337 && *(_QWORD *)(v337 + 24))
  {
    v349 = _os_log_pack_size();
    v350 = (std::__shared_weak_count_vtbl *)operator new(v349, (std::align_val_t)8uLL);
    v351 = (std::__shared_weak_count *)operator new();
    v352 = v351;
    v351->__shared_owners_ = 0;
    v353 = (unint64_t *)&v351->__shared_owners_;
    v351->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v351->__shared_weak_owners_ = 0;
    v351[1].__vftable = v350;
    object[0] = v350;
    object[1] = v350;
    object[2] = v351;
    do
      v354 = __ldxr(v353);
    while (__stxr(v354 + 1, v353));
    memset(&object[3], 0, 24);
    do
      v355 = __ldaxr(v353);
    while (__stlxr(v355 - 1, v353));
    if (!v355)
    {
      ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
      std::__shared_weak_count::__release_weak(v352);
    }
    v356 = object[0];
    v357 = _os_log_pack_fill();
    *(_DWORD *)v357 = 67109376;
    *(_DWORD *)(v357 + 4) = v409;
    *(_WORD *)(v357 + 8) = 1024;
    *(_DWORD *)(v357 + 10) = v400;
    v358 = operator new();
    v359 = *(unsigned __int8 *)(v48 + 39);
    v360 = v392;
    if ((v359 & 0x80u) != 0)
    {
      v360 = *(const char **)(v48 + 16);
      v359 = *(_QWORD *)(v48 + 24);
    }
    *(_QWORD *)v358 = v356;
    *(_OWORD *)(v358 + 8) = *(_OWORD *)&object[1];
    object[1] = 0;
    object[2] = 0;
    *(_OWORD *)(v358 + 24) = *(_OWORD *)&object[3];
    object[3] = 0;
    object[4] = 0;
    *(_QWORD *)(v358 + 40) = v360;
    *(_QWORD *)(v358 + 48) = v359;
    *(_BYTE *)(v358 + 56) = 16;
    v422 = 0;
    *(_QWORD *)&v423 = v358;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v337 + 24) + 40))(*(_QWORD *)(v337 + 24), &v423);
    v361 = v423;
    *(_QWORD *)&v423 = 0;
    v8 = v396;
    v44 = v400;
    v362 = v409;
    if (v361)
    {
      v363 = *(std::__shared_weak_count **)(v361 + 32);
      if (v363)
      {
        v364 = (unint64_t *)&v363->__shared_owners_;
        do
          v365 = __ldaxr(v364);
        while (__stlxr(v365 - 1, v364));
        if (!v365)
        {
          ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
          std::__shared_weak_count::__release_weak(v363);
        }
      }
      v366 = *(std::__shared_weak_count **)(v361 + 16);
      if (v366)
      {
        v367 = (unint64_t *)&v366->__shared_owners_;
        do
          v368 = __ldaxr(v367);
        while (__stlxr(v368 - 1, v367));
        if (!v368)
        {
          ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
          std::__shared_weak_count::__release_weak(v366);
        }
      }
      MEMORY[0x227684CE8](v361, 0x10F0C40B62ED6C6);
      v369 = v422;
      v422 = 0;
      if (v369)
      {
        v370 = *(std::__shared_weak_count **)(v369 + 32);
        if (v370)
        {
          v371 = (unint64_t *)&v370->__shared_owners_;
          do
            v372 = __ldaxr(v371);
          while (__stlxr(v372 - 1, v371));
          if (!v372)
          {
            ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
            std::__shared_weak_count::__release_weak(v370);
          }
        }
        v373 = *(std::__shared_weak_count **)(v369 + 16);
        if (v373)
        {
          v374 = (unint64_t *)&v373->__shared_owners_;
          do
            v375 = __ldaxr(v374);
          while (__stlxr(v375 - 1, v374));
          if (!v375)
          {
            ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
            std::__shared_weak_count::__release_weak(v373);
          }
        }
        MEMORY[0x227684CE8](v369, 0x10F0C40B62ED6C6);
      }
    }
    v376 = (std::__shared_weak_count *)object[4];
    v12 = v399;
    if (object[4])
    {
      v377 = (unint64_t *)((char *)object[4] + 8);
      do
        v378 = __ldaxr(v377);
      while (__stlxr(v378 - 1, v377));
      if (!v378)
      {
        ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
        std::__shared_weak_count::__release_weak(v376);
      }
    }
    v379 = (std::__shared_weak_count *)object[2];
    if (object[2])
    {
      v380 = (unint64_t *)((char *)object[2] + 8);
      do
        v381 = __ldaxr(v380);
      while (__stlxr(v381 - 1, v380));
      if (!v381)
      {
        ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
        std::__shared_weak_count::__release_weak(v379);
      }
    }
  }
  else
  {
    os_log_type_enabled(v348, OS_LOG_TYPE_ERROR);
    LODWORD(object[0]) = 67109376;
    v362 = v409;
    HIDWORD(object[0]) = v409;
    LOWORD(object[1]) = 1024;
    v44 = v400;
    *(_DWORD *)((char *)&object[1] + 2) = v400;
    v382 = (void *)_os_log_send_and_compose_impl();
    v8 = v396;
    v12 = v399;
    if (v382)
      free(v382);
  }
  if (v45)
  {
    sub_22322C138((uint64_t)&v412, "MultiFloorDetection scene max height %d over limit %d", v362, v44);
    sub_223182C08((uint64_t)&v412);
  }
  sub_223182C08((uint64_t)&v412);
  v383 = v420;
  if (v420)
  {
    v384 = (unint64_t *)&v420->__shared_owners_;
    do
      v385 = __ldaxr(v384);
    while (__stlxr(v385 - 1, v384));
    if (!v385)
    {
      ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
      std::__shared_weak_count::__release_weak(v383);
    }
  }
  v32 = v411;
  v412 = 0;
  rep = 0;
  v414 = 0;
  v100 = v44 - v410;
  v101 = v44 - v410 + 1;
  if (v44 - v410 != -1)
  {
LABEL_148:
    if (v100 <= -2)
      sub_22352449C();
    v102 = v101;
    v412 = operator new(4 * v101);
    rep = (char *)v412;
    v414 = (char *)v412 + 4 * v102;
  }
LABEL_150:
  memset(object, 0, sizeof(object));
  if (v44 >= v410)
  {
    v402 = v44;
    v387 = v4;
    v107 = (_QWORD *)*((_QWORD *)v4 + 1);
    v394 = (float)(1.0 - v14) * 200.0;
    v108 = logf((float)(float)((float)(v14 * 200.0) + 0.0)/ (float)((float)(v394 + 0.0) + (float)((float)(v14 * 200.0) + 0.0)));
    v103 = 0;
    v397 = v8;
    v390 = v8 + 16;
    v391 = v6 - 1;
    v109 = -v12;
    v110 = v410;
    while (1)
    {
      while (1)
      {
        v111 = *((_DWORD *)v107 + 7);
        if (v107 == v32 || v111 >= v110)
          break;
        v112 = (_QWORD *)v107[1];
        v113 = v107;
        if (v112)
        {
          do
          {
            v107 = v112;
            v112 = (_QWORD *)*v112;
          }
          while (v112);
        }
        else
        {
          do
          {
            v107 = (_QWORD *)v113[2];
            v39 = *v107 == (_QWORD)v113;
            v113 = v107;
          }
          while (!v39);
        }
      }
      v114 = v14;
      if (v111 == v110)
      {
        v115 = *((_DWORD *)v107 + 9) + *((_DWORD *)v107 + 8);
        v114 = (float)(float)((float)(v14 * 200.0)
                                          + (float)(*((_DWORD *)v107 + 10) + 4 * v115))
             / (float)((float)((float)(v14 * 200.0)
                                           + (float)(*((_DWORD *)v107 + 10) + 4 * v115))
                     + (float)(v394 + (float)(4 * *((_DWORD *)v107 + 11))));
        if (v397 != v398)
        {
          v116 = v390;
          while (*((_DWORD *)v116 - 2) != v110)
          {
            v117 = *((_DWORD *)v116 - 1);
            v118 = v117 == v110 || v116 == v398;
            v116 += 16;
            if (v118)
            {
              if (v117 != v110)
                goto LABEL_175;
              break;
            }
          }
          if ((float)((float)((float)(1.0 - v114) * -0.75) + 1.0) >= (float)(v114 * 1.25))
            v114 = v114 * 1.25;
          else
            v114 = (float)((float)(1.0 - v114) * -0.75) + 1.0;
        }
      }
LABEL_175:
      v119 = logf(v114);
      v120 = logf(1.0 - v114);
      v121 = LODWORD(object[5]) - 1;
      if (LODWORD(object[5]) - 1 >= v404)
        v121 = v404;
      v406 = v103;
      if (v121 >= v6)
      {
        v124 = (char *)object[1];
        v125 = v121 + 1;
        v126 = (unint64_t)object[4] + v391;
        v122 = 0.0;
        v123 = -3.4028e38;
        v127 = v6;
        do
        {
          v128 = v109 + v127;
          if (v109 + v127 < 0)
            v128 = -v128;
          v129 = *(float *)(*(_QWORD *)&v124[(v126 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v126 & 0x3FF))
               + logf((float)((float)v128 * -0.01) + 1.0);
          if (v129 > v123)
          {
            v123 = v129;
            v122 = (float)v127;
          }
          ++v126;
          ++v127;
        }
        while (v125 != v127);
      }
      else
      {
        v122 = 0.0;
        v123 = -3.4028e38;
      }
      v130 = (int)(float)((float)v110 - v122);
      v131 = rep;
      if (rep < v414)
      {
        *(_DWORD *)rep = v130;
        v132 = (uint64_t)(v131 + 4);
        v103 = v406;
        goto LABEL_207;
      }
      v133 = (char *)v412;
      v134 = rep - (_BYTE *)v412;
      v135 = (rep - (_BYTE *)v412) >> 2;
      v136 = v135 + 1;
      if ((unint64_t)(v135 + 1) >> 62)
        sub_22352449C();
      v137 = v414 - (_BYTE *)v412;
      if ((v414 - (_BYTE *)v412) >> 1 > v136)
        v136 = v137 >> 1;
      if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFFCLL)
        v138 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v138 = v136;
      if (v138)
      {
        if (v138 >> 62)
          sub_223174E94();
        v139 = (char *)operator new(4 * v138);
        v140 = (int *)&v139[4 * v135];
        *v140 = v130;
        v132 = (uint64_t)(v140 + 1);
        v141 = v131 - v133;
        if (v131 == v133)
        {
LABEL_205:
          v412 = v140;
          rep = (char *)v132;
          v414 = &v139[4 * v138];
          if (v133)
            goto LABEL_203;
          goto LABEL_206;
        }
      }
      else
      {
        v139 = 0;
        v140 = (int *)(4 * v135);
        *(_DWORD *)(4 * v135) = v130;
        v132 = 4 * v135 + 4;
        v141 = v131 - v133;
        if (v131 == v133)
          goto LABEL_205;
      }
      v142 = v141 - 4;
      if (v142 < 0x2C)
        goto LABEL_578;
      if ((unint64_t)(v131 - &v139[v134]) < 0x20)
        goto LABEL_578;
      v143 = (v142 >> 2) + 1;
      v144 = 4 * (v143 & 0x7FFFFFFFFFFFFFF8);
      v145 = &v131[-v144];
      v140 = (int *)((char *)v140 - v144);
      v146 = &v139[4 * v135 - 16];
      v147 = v131 - 16;
      v148 = v143 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v149 = *(_OWORD *)v147;
        *((_OWORD *)v146 - 1) = *((_OWORD *)v147 - 1);
        *(_OWORD *)v146 = v149;
        v146 -= 32;
        v147 -= 32;
        v148 -= 8;
      }
      while (v148);
      v131 = v145;
      if (v143 != (v143 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_578:
        do
        {
          v150 = *((_DWORD *)v131 - 1);
          v131 -= 4;
          *--v140 = v150;
        }
        while (v131 != v133);
      }
      v412 = v140;
      rep = (char *)v132;
      v414 = &v139[4 * v138];
      if (v133)
      {
LABEL_203:
        operator delete(v133);
        v103 = (char *)object[2];
        v6 = v405;
        goto LABEL_207;
      }
LABEL_206:
      v6 = v405;
      v103 = v406;
LABEL_207:
      rep = (char *)v132;
      if (v122 <= 0.0)
        v151 = v108 * (float)(v110 - v410);
      else
        v151 = v123;
      v152 = (char *)object[1];
      v153 = (char *)object[4];
      v154 = (unint64_t)object[4] >> 10;
      v155 = v103 - (char *)object[1];
      if (v103 != object[1])
      {
        v156 = (float **)((char *)object[1] + 8 * v154);
        v157 = *v156;
        v158 = &(*v156)[(uint64_t)object[4] & 0x3FF];
        v159 = *(_QWORD *)((char *)object[1]
                         + ((((unint64_t)object[5] + (unint64_t)object[4]) >> 7) & 0x1FFFFFFFFFFFFF8))
             + 4 * (((unint64_t)object[5] + (unint64_t)object[4]) & 0x3FF);
        while (v158 != (float *)v159)
        {
          *v158 = v120 + *v158;
          if ((char *)++v158 - (char *)v157 == 4096)
          {
            v160 = v156[1];
            ++v156;
            v157 = v160;
            v158 = v160;
          }
        }
      }
      if (v153)
        goto LABEL_325;
      v161 = (v155 << 7) - 1;
      v162 = v103;
      v163 = v103 - v152;
      if (!v163)
        v161 = 0;
      if (v161 - (unint64_t)object[5] < 0x400)
      {
        v168 = (char *)object[3];
        v169 = (char *)object[0];
        if (v163 >= (char *)object[3] - (char *)object[0])
        {
          if (object[3] == object[0])
            v171 = 1;
          else
            v171 = ((char *)object[3] - (char *)object[0]) >> 2;
          if (v171 >> 61)
LABEL_556:
            sub_223174E94();
          v172 = (char *)operator new(8 * v171);
          v173 = operator new(0x1000uLL);
          v174 = v173;
          if (v171)
          {
            v175 = v162;
            v176 = &v172[8 * v171];
            *(_QWORD *)v172 = v173;
            v177 = v172 + 8;
            v407 = v172;
            v178 = v172;
            if (v152 != v175)
              goto LABEL_261;
            goto LABEL_255;
          }
          v408 = v172;
          v200 = (char *)operator new(8uLL);
          v176 = v200 + 8;
          operator delete(v408);
          v152 = (char *)object[1];
          v201 = (char *)object[2];
          *(_QWORD *)v200 = v174;
          v177 = v200 + 8;
          v407 = v200;
          v178 = v200;
          if (v152 == v201)
          {
LABEL_255:
            v202 = object[0];
            object[0] = v407;
            object[1] = v178;
            object[2] = v177;
            object[3] = v176;
            v203 = (uint64_t)object[4] + 1024;
            if (v177 - v178 == 8)
              v203 = 512;
            object[4] = (void *)v203;
            v152 = v178;
            v6 = v405;
            if (v202)
            {
              operator delete(v202);
              v152 = (char *)object[1];
            }
            goto LABEL_324;
          }
LABEL_261:
          while (2)
          {
            if (v177 != v176)
            {
              v204 = v178;
              v205 = v177;
              v177 = v176;
              goto LABEL_260;
            }
            if (v178 > v407)
            {
              v207 = (v178 - v407) >> 3;
              if (v207 >= -1)
                v208 = v207 + 1;
              else
                v208 = v207 + 2;
              v209 = v208 >> 1;
              v210 = &v178[-8 * (v208 >> 1)];
              v211 = v177;
              if (v177 != v178)
              {
                memmove(v210, v178, v177 - v178);
                v211 = v178;
              }
              v205 = &v210[v177 - v178];
              v204 = &v211[-8 * v209];
              goto LABEL_260;
            }
            if (v177 == v407)
              v212 = 1;
            else
              v212 = (v177 - v407) >> 2;
            if (v212 >> 61)
              sub_223174E94();
            v213 = (char *)operator new(8 * v212);
            v214 = v213;
            v215 = v212 >> 2;
            v204 = &v213[8 * (v212 >> 2)];
            v205 = v204;
            v216 = v177 - v178;
            if (v177 != v178)
            {
              v205 = &v204[v216 & 0xFFFFFFFFFFFFFFF8];
              v217 = v216 - 8;
              if (v217 < 0x38 || (v218 = 8 * v215, (unint64_t)(&v213[8 * v215] - v178) < 0x20))
              {
                v219 = &v213[8 * (v212 >> 2)];
                v220 = v178;
                goto LABEL_277;
              }
              v222 = (v217 >> 3) + 1;
              v223 = 8 * (v222 & 0x3FFFFFFFFFFFFFFCLL);
              v219 = &v204[v223];
              v220 = &v178[v223];
              v224 = (__int128 *)(v178 + 16);
              v225 = &v213[v218 + 16];
              v226 = v222 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v227 = *v224;
                *((_OWORD *)v225 - 1) = *(v224 - 1);
                *(_OWORD *)v225 = v227;
                v224 += 2;
                v225 += 32;
                v226 -= 4;
              }
              while (v226);
              if (v222 != (v222 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_277:
                  v221 = *(_QWORD *)v220;
                  v220 += 8;
                  *(_QWORD *)v219 = v221;
                  v219 += 8;
                }
                while (v219 != v205);
              }
            }
            v177 = &v213[8 * v212];
            if (v407)
              operator delete(v407);
            v407 = v214;
LABEL_260:
            v206 = *(_QWORD *)v152;
            v152 += 8;
            *(_QWORD *)v205 = v206;
            v178 = v204;
            v176 = v177;
            v177 = v205 + 8;
            if (v152 == object[2])
              goto LABEL_255;
            continue;
          }
        }
        v170 = operator new(0x1000uLL);
        if (v152 == v169)
        {
          v199 = v162;
          if (v162 == v168)
          {
            if (v162 == v152)
              v228 = 1;
            else
              v228 = (v162 - v169) >> 2;
            if (v228 >> 61)
              goto LABEL_556;
            v229 = operator new(8 * v228);
            v230 = v228 >> 2;
            v231 = &v229[8 * (v228 >> 2)];
            v39 = v162 == v152;
            v199 = v231;
            v6 = v405;
            if (!v39)
            {
              v232 = &v229[8 * (v228 >> 2)];
              v233 = v152;
              if (v163 - 8 < 0x38)
                goto LABEL_579;
              v234 = 8 * v230;
              v232 = &v229[8 * (v228 >> 2)];
              v233 = v152;
              if ((unint64_t)(&v229[8 * v230] - v152) < 0x20)
                goto LABEL_579;
              v235 = ((v163 - 8) >> 3) + 1;
              v236 = 8 * (v235 & 0x3FFFFFFFFFFFFFFCLL);
              v232 = &v231[v236];
              v233 = &v152[v236];
              v237 = (__int128 *)(v152 + 16);
              v238 = &v229[v234 + 16];
              v239 = v235 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v240 = *v237;
                *(v238 - 1) = *(v237 - 1);
                *v238 = v240;
                v237 += 2;
                v238 += 2;
                v239 -= 4;
              }
              while (v239);
              if (v235 != (v235 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_579:
                do
                {
                  v241 = *(_QWORD *)v233;
                  v233 += 8;
                  *(_QWORD *)v232 = v241;
                  v232 += 8;
                }
                while (v232 != &v231[v163 & 0xFFFFFFFFFFFFFFF8]);
              }
              v199 = &v231[v163 & 0xFFFFFFFFFFFFFFF8];
            }
            object[0] = v229;
            object[1] = &v229[8 * (v228 >> 2)];
            object[2] = v199;
            object[3] = &v229[8 * v228];
            if (v152)
            {
              operator delete(v152);
              v199 = (char *)object[2];
            }
          }
          else
          {
            v6 = v405;
          }
          *(_QWORD *)v199 = v170;
          v242 = (void **)object[1];
          v243 = (void **)object[2];
          object[2] = (char *)object[2] + 8;
          v170 = *v243;
          object[2] = v243;
          if (object[1] == object[0])
          {
            if (v243 >= object[3])
            {
              if (object[3] == object[1])
                v248 = 1;
              else
                v248 = ((char *)object[3] - (char *)object[1]) >> 2;
              if (v248 >> 61)
                goto LABEL_556;
              v249 = (char *)operator new(8 * v248);
              v250 = (v248 + 3) >> 2;
              v152 = &v249[8 * v250];
              v251 = v152;
              v252 = (char *)v243 - (char *)v242;
              v6 = v405;
              if (v243 != v242)
              {
                v251 = &v152[v252 & 0xFFFFFFFFFFFFFFF8];
                v253 = v252 - 8;
                v254 = &v249[8 * v250];
                v255 = v242;
                if (v253 < 0x38)
                  goto LABEL_580;
                v256 = 8 * v250;
                v254 = &v249[8 * v250];
                v255 = v242;
                if ((unint64_t)(v254 - (char *)v242) < 0x20)
                  goto LABEL_580;
                v257 = (v253 >> 3) + 1;
                v258 = v257 & 0x3FFFFFFFFFFFFFFCLL;
                v254 = &v152[v258 * 8];
                v255 = &v242[v258];
                v259 = (__int128 *)(v242 + 2);
                v260 = &v249[v256 + 16];
                v261 = v257 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v262 = *v259;
                  *((_OWORD *)v260 - 1) = *(v259 - 1);
                  *(_OWORD *)v260 = v262;
                  v259 += 2;
                  v260 += 32;
                  v261 -= 4;
                }
                while (v261);
                if (v257 != (v257 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_580:
                  do
                  {
                    v263 = (uint64_t)*v255++;
                    *(_QWORD *)v254 = v263;
                    v254 += 8;
                  }
                  while (v254 != v251);
                }
              }
              object[0] = v249;
              object[1] = v152;
              object[2] = v251;
              object[3] = &v249[8 * v248];
              if (v242)
              {
                operator delete(v242);
                v152 = (char *)object[1];
              }
            }
            else
            {
              v244 = ((char *)object[3] - (char *)v243) >> 3;
              if (v244 >= -1)
                v245 = v244 + 1;
              else
                v245 = v244 + 2;
              v246 = v245 >> 1;
              v247 = &v243[v245 >> 1];
              v152 = (char *)v247 - ((char *)v243 - (char *)object[1]);
              if (v243 != object[1])
              {
                memmove((char *)v247 - ((char *)v243 - (char *)object[1]), object[1], (char *)v243 - (char *)object[1]);
                v243 = (void **)object[2];
              }
              object[1] = v152;
              object[2] = &v243[v246];
            }
          }
          else
          {
            v152 = (char *)object[1];
          }
        }
        else
        {
          v6 = v405;
        }
        *((_QWORD *)v152 - 1) = v170;
        v152 = (char *)object[1] - 8;
        v264 = 512;
        if ((void *)((char *)object[2] - ((char *)object[1] - 8)) != (void *)8)
          v264 = (uint64_t)object[4] + 1024;
        object[1] = (char *)object[1] - 8;
        object[4] = (void *)v264;
      }
      else
      {
        object[4] = (void *)1024;
        v166 = *((_QWORD *)v162 - 1);
        v165 = v162 - 8;
        v164 = v166;
        object[2] = v165;
        if (v152 == object[0])
        {
          if (v165 >= object[3])
          {
            if (object[3] == v152)
              v183 = 1;
            else
              v183 = ((char *)object[3] - (char *)v152) >> 2;
            if (v183 >> 61)
              goto LABEL_556;
            v184 = (char *)operator new(8 * v183);
            v185 = (v183 + 3) >> 2;
            v167 = &v184[8 * v185];
            v186 = v167;
            v187 = v165 - v152;
            v39 = v165 == v152;
            v6 = v405;
            if (!v39)
            {
              v186 = &v167[v187 & 0xFFFFFFFFFFFFFFF8];
              v188 = v187 - 8;
              v189 = &v184[8 * v185];
              v190 = v152;
              if (v188 < 0x38)
                goto LABEL_581;
              v191 = 8 * v185;
              v189 = &v184[8 * v185];
              v190 = v152;
              if ((unint64_t)(v189 - v152) < 0x20)
                goto LABEL_581;
              v192 = (v188 >> 3) + 1;
              v193 = 8 * (v192 & 0x3FFFFFFFFFFFFFFCLL);
              v189 = &v167[v193];
              v190 = &v152[v193];
              v194 = (__int128 *)(v152 + 16);
              v195 = &v184[v191 + 16];
              v196 = v192 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v197 = *v194;
                *((_OWORD *)v195 - 1) = *(v194 - 1);
                *(_OWORD *)v195 = v197;
                v194 += 2;
                v195 += 32;
                v196 -= 4;
              }
              while (v196);
              if (v192 != (v192 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_581:
                do
                {
                  v198 = *(_QWORD *)v190;
                  v190 += 8;
                  *(_QWORD *)v189 = v198;
                  v189 += 8;
                }
                while (v189 != v186);
              }
            }
            object[0] = v184;
            object[1] = v167;
            object[2] = v186;
            object[3] = &v184[8 * v183];
            if (v152)
            {
              operator delete(v152);
              v167 = (char *)object[1];
            }
          }
          else
          {
            v179 = ((char *)object[3] - (char *)v165) >> 3;
            if (v179 >= -1)
              v180 = v179 + 1;
            else
              v180 = v179 + 2;
            v181 = v180 >> 1;
            v167 = &v152[8 * (v180 >> 1)];
            v182 = v165 - v152;
            v39 = v165 == v152;
            v6 = v405;
            if (!v39)
            {
              memmove(v167, v152, v182);
              v152 = (char *)object[2];
            }
            object[1] = v167;
            object[2] = &v152[8 * v181];
          }
        }
        else
        {
          v167 = v152;
          v6 = v405;
        }
        *((_QWORD *)v167 - 1) = v164;
        v152 = (char *)object[1] - 8;
        object[1] = (char *)object[1] - 8;
      }
LABEL_324:
      v153 = (char *)object[4];
      v103 = (char *)object[2];
      v154 = (unint64_t)object[4] >> 10;
LABEL_325:
      v265 = &v152[8 * v154];
      v266 = *(_QWORD *)v265 + 4 * ((unsigned __int16)v153 & 0x3FF);
      if (v103 == v152)
        v266 = 0;
      if (v266 == *(_QWORD *)v265)
        v266 = *((_QWORD *)v265 - 1) + 4096;
      *(float *)(v266 - 4) = v119 + v151;
      v267 = object[5];
      object[4] = v153 - 1;
      if (++object[5] > (void *)v404)
      {
        object[5] = v267;
        v268 = (v103 - v152) << 7;
        if (v103 == v152)
          v268 = 1;
        if ((unint64_t)(v268 - (_QWORD)v153 - (_QWORD)v267) >= 0x800)
        {
          operator delete(*((void **)v103 - 1));
          v103 = (char *)object[2] - 8;
          object[2] = (char *)object[2] - 8;
        }
      }
      v32 = v411;
      v39 = v110++ == v402;
      if (v39)
      {
        v105 = (unint64_t)object[4];
        v106 = (char *)object[5];
        v104 = object[1];
        v8 = v397;
        v4 = v387;
        v44 = v402;
        goto LABEL_335;
      }
    }
  }
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
LABEL_335:
  if (v103 == v104)
    v269 = 0;
  else
    v269 = ((v103 - v104) << 7) - 1;
  v270 = v106 - 1;
  object[5] = v106 - 1;
  if ((unint64_t)(v269 - (_QWORD)&v106[v105] + 1) >= 0x800)
  {
    operator delete(*((void **)v103 - 1));
    v104 = object[1];
    v103 = (char *)object[2] - 8;
    object[2] = (char *)object[2] - 8;
    v105 = (unint64_t)object[4];
    v270 = (char *)object[5];
  }
  v271 = v44;
  v272 = (_WORD)v270 + v105;
  v273 = &v104[8 * ((unint64_t)&v270[v105] >> 10)];
  if (v103 == v104)
  {
    v275 = 0;
    v276 = 0;
    goto LABEL_358;
  }
  v274 = *v273;
  v275 = *v273 + 4 * (v272 & 0x3FF);
  v276 = *(_QWORD *)&v104[8 * (v105 >> 10)] + 4 * (v105 & 0x3FF);
  if (v275 == v276)
    goto LABEL_353;
LABEL_342:
  v277 = v273;
  v278 = v275;
  while (1)
  {
    if (v275 == v274)
    {
      v281 = *--v273;
      v274 = v281;
      v275 = v281 + 4096;
    }
    v275 -= 4;
    if (v275 == v276)
      break;
    v279 = v278;
    if (v278 == *v277)
    {
      v279 = *(v277 - 1) + 4096;
      v280 = v275;
      if (v275 != v274)
        goto LABEL_344;
LABEL_350:
      if (*(float *)(v279 - 4) < *(float *)(*(v273 - 1) + 4092))
        goto LABEL_342;
    }
    else
    {
      v280 = v275;
      if (v275 == v274)
        goto LABEL_350;
LABEL_344:
      if (*(float *)(v279 - 4) < *(float *)(v280 - 4))
        goto LABEL_342;
    }
  }
  v275 = v278;
  v273 = v277;
LABEL_353:
  if (v275 != v276)
  {
    v276 = v275;
    v282 = &v104[8 * (v105 >> 10)];
    if (v103 == v104)
      goto LABEL_355;
LABEL_360:
    v283 = *(_QWORD *)v282 + 4 * (v105 & 0x3FF);
    if (v276 != v283)
      goto LABEL_361;
LABEL_356:
    LODWORD(v284) = 0;
    goto LABEL_362;
  }
LABEL_358:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/MultiFloorDetection.cpp", 351, (uint64_t)"max_it != ln_likelihood_previous_floors.rend()", 46, (uint64_t)&unk_2245A288A, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  LOWORD(v105) = object[4];
  v282 = (char *)object[1] + 8 * ((unint64_t)object[4] >> 10);
  if (object[2] != object[1])
    goto LABEL_360;
LABEL_355:
  v283 = 0;
  if (!v276)
    goto LABEL_356;
LABEL_361:
  v284 = ((v282 - (char *)v273) << 7) - ((v275 - *v273) >> 2) + ((v283 - *(_QWORD *)v282) >> 2);
LABEL_362:
  v285 = v410;
  v286 = v271 + v284 + 1;
  v287 = *((_DWORD *)v412 + v286 - v410);
  for (i = (char *)*((_QWORD *)v4 + 5); v287 != v286; v287 = *((_DWORD *)v412 + v286 - v410))
  {
    while (1)
    {
      v312 = v286;
      v286 = v287;
      v313 = *((_QWORD *)v4 + 6);
      if ((unint64_t)i >= v313)
        break;
      *(_DWORD *)i = v286;
      *((_DWORD *)i + 1) = v312;
      *((_DWORD *)i + 2) = v286;
      *((_DWORD *)i + 3) = v312;
      i += 16;
      *((_QWORD *)v4 + 5) = i;
      v287 = *((_DWORD *)v412 + v286 - v285);
      if (v287 == v286)
        goto LABEL_363;
    }
    v314 = (char *)*v403;
    v315 = (i - (_BYTE *)*v403) >> 4;
    v316 = v315 + 1;
    if ((unint64_t)(v315 + 1) >> 60)
      sub_22316E078();
    v317 = v313 - (_QWORD)v314;
    if (v317 >> 3 > v316)
      v316 = v317 >> 3;
    if ((unint64_t)v317 >= 0x7FFFFFFFFFFFFFF0)
      v318 = 0xFFFFFFFFFFFFFFFLL;
    else
      v318 = v316;
    if (v318 >> 60)
      sub_223174E94();
    v319 = (char *)operator new(16 * v318);
    v320 = &v319[16 * v315];
    *(_DWORD *)v320 = v286;
    *((_DWORD *)v320 + 1) = v312;
    *((_DWORD *)v320 + 2) = v286;
    *((_DWORD *)v320 + 3) = v312;
    if (i == v314)
    {
      v6 = v405;
      i = v320 + 16;
      *((_QWORD *)v4 + 4) = v320;
      *((_QWORD *)v4 + 5) = v320 + 16;
      *((_QWORD *)v4 + 6) = &v319[16 * v318];
      if (!v314)
        goto LABEL_432;
    }
    else
    {
      v321 = &v319[16 * v315];
      v6 = v405;
      do
      {
        v322 = v321 - 16;
        *((_OWORD *)v321 - 1) = *((_OWORD *)i - 1);
        i -= 16;
        v321 -= 16;
      }
      while (i != v314);
      i = v320 + 16;
      *((_QWORD *)v4 + 4) = v322;
      *((_QWORD *)v4 + 5) = v320 + 16;
      *((_QWORD *)v4 + 6) = &v319[16 * v318];
      if (!v314)
        goto LABEL_432;
    }
    operator delete(v314);
LABEL_432:
    v285 = v410;
    *((_QWORD *)v4 + 5) = i;
  }
LABEL_363:
  v289 = (char *)*v403;
  if (*v403 == i)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/MultiFloorDetection.cpp", 365, (uint64_t)"!floor_infos_.empty()", 21, (uint64_t)&unk_2245A288A, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v289 = (char *)*((_QWORD *)v4 + 4);
    i = (char *)*((_QWORD *)v4 + 5);
  }
  if (v289 != i)
  {
    v290 = i - 16;
    if (i - 16 > v289)
    {
      v291 = v289 + 16;
      do
      {
        v423 = *((_OWORD *)v291 - 1);
        *((_OWORD *)v291 - 1) = *(_OWORD *)v290;
        *(_OWORD *)v290 = v423;
        v290 -= 16;
        v292 = v291 >= v290;
        v291 += 16;
      }
      while (!v292);
      v289 = (char *)*((_QWORD *)v4 + 4);
      i = (char *)*((_QWORD *)v4 + 5);
    }
  }
  if (v289 == i)
  {
    v293 = i;
  }
  else
  {
    do
    {
      v294 = *v411;
      if (*v411)
      {
        v295 = *((_DWORD *)v289 + 2);
        v296 = v411;
        do
        {
          v297 = *(_DWORD *)(v294 + 28);
          v298 = v297 < v295;
          if (v297 >= v295)
            v299 = (uint64_t *)v294;
          else
            v299 = (uint64_t *)(v294 + 8);
          if (!v298)
            v296 = (_QWORD *)v294;
          v294 = *v299;
        }
        while (*v299);
        if (v296 != v411)
        {
          while (*((_DWORD *)v296 + 7) < *((_DWORD *)v289 + 3))
          {
            if (*((_DWORD *)v296 + 12))
            {
              v293 = v289;
              if (v289 != i)
              {
                do
                {
                  v303 = *v411;
                  if (*v411)
                  {
                    v304 = *((_DWORD *)i - 2);
                    v305 = v411;
                    do
                    {
                      v306 = *(_DWORD *)(v303 + 28);
                      v307 = v306 < v304;
                      if (v306 >= v304)
                        v308 = (uint64_t *)v303;
                      else
                        v308 = (uint64_t *)(v303 + 8);
                      if (!v307)
                        v305 = (_QWORD *)v303;
                      v303 = *v308;
                    }
                    while (*v308);
                    if (v305 != v411)
                    {
                      while (*((_DWORD *)v305 + 7) < *((_DWORD *)i - 1))
                      {
                        if (*((_DWORD *)v305 + 12))
                        {
                          if (v293 == i)
                            goto LABEL_439;
                          *(_DWORD *)v293 = 0x80000000;
                          *((_DWORD *)i - 3) = 0x7FFFFFFF;
                          v323 = (void **)object[1];
                          v324 = (void **)object[2];
                          object[5] = 0;
                          v325 = (char *)object[2] - (char *)object[1];
                          if ((void *)((char *)object[2] - (char *)object[1]) >= (void *)0x11)
                            goto LABEL_441;
                          goto LABEL_442;
                        }
                        v310 = (_QWORD *)v305[1];
                        if (v310)
                        {
                          do
                          {
                            v311 = v310;
                            v310 = (_QWORD *)*v310;
                          }
                          while (v310);
                        }
                        else
                        {
                          do
                          {
                            v311 = (_QWORD *)v305[2];
                            v39 = *v311 == (_QWORD)v305;
                            v305 = v311;
                          }
                          while (!v39);
                        }
                        v305 = v311;
                        if (v311 == v411)
                          break;
                      }
                    }
                  }
                  v309 = i - 16;
                  i -= 16;
                  *((_QWORD *)v4 + 5) = v309;
                }
                while (v293 != v309);
              }
              goto LABEL_439;
            }
            v301 = (_QWORD *)v296[1];
            if (v301)
            {
              do
              {
                v302 = v301;
                v301 = (_QWORD *)*v301;
              }
              while (v301);
            }
            else
            {
              do
              {
                v302 = (_QWORD *)v296[2];
                v39 = *v302 == (_QWORD)v296;
                v296 = v302;
              }
              while (!v39);
            }
            v296 = v302;
            if (v302 == v411)
              break;
          }
        }
      }
      v293 = v289;
      v300 = i - (v289 + 16);
      if (i != v289 + 16)
      {
        memmove(v289, v289 + 16, i - (v289 + 16));
        v293 = (char *)*v403;
      }
      i -= 16;
      *((_QWORD *)v4 + 5) = &v289[v300];
      v289 = v293;
    }
    while (v293 != i);
  }
LABEL_439:
  v326 = v389 - v6;
  v327 = v389 + v388;
  v328 = *((_QWORD *)v4 + 6);
  if ((unint64_t)v293 >= v328)
  {
    v331 = v328 - (_QWORD)v293;
    v332 = v331 >> 3;
    if ((unint64_t)(v331 >> 3) <= 1)
      v332 = 1;
    if ((unint64_t)v331 >= 0x7FFFFFFFFFFFFFF0)
      v333 = 0xFFFFFFFFFFFFFFFLL;
    else
      v333 = v332;
    if (v333 >> 60)
      sub_223174E94();
    v334 = operator new(16 * v333);
    *(_QWORD *)v334 = 0x7FFFFFFF80000000;
    v334[2] = v326;
    v334[3] = v327;
    v335 = (char *)(v334 + 4);
    *((_QWORD *)v4 + 4) = v334;
    *((_QWORD *)v4 + 5) = v334 + 4;
    *((_QWORD *)v4 + 6) = &v334[4 * v333];
    if (v293)
      operator delete(v293);
    *((_QWORD *)v4 + 5) = v335;
    v323 = (void **)object[1];
    v324 = (void **)object[2];
    object[5] = 0;
    v325 = (char *)object[2] - (char *)object[1];
    if ((void *)((char *)object[2] - (char *)object[1]) >= (void *)0x11)
    {
      do
      {
LABEL_441:
        operator delete(*v323);
        v324 = (void **)object[2];
        v323 = (void **)((char *)object[1] + 8);
        object[1] = v323;
        v325 = (char *)object[2] - (char *)v323;
      }
      while ((void *)((char *)object[2] - (char *)v323) > (void *)0x10);
    }
  }
  else
  {
    *(_QWORD *)v293 = 0x7FFFFFFF80000000;
    *((_DWORD *)v293 + 2) = v326;
    *((_DWORD *)v293 + 3) = v327;
    *((_QWORD *)v4 + 5) = v293 + 16;
    v323 = (void **)object[1];
    v324 = (void **)object[2];
    object[5] = 0;
    v325 = (char *)object[2] - (char *)object[1];
    if ((void *)((char *)object[2] - (char *)object[1]) >= (void *)0x11)
      goto LABEL_441;
  }
LABEL_442:
  v329 = v325 >> 3;
  if (v329 == 1)
  {
    v330 = 512;
LABEL_456:
    object[4] = (void *)v330;
  }
  else if (v329 == 2)
  {
    v330 = 1024;
    goto LABEL_456;
  }
  if (v323 != v324)
  {
    do
    {
      v336 = *v323++;
      operator delete(v336);
    }
    while (v323 != v324);
    if (object[2] != object[1])
      object[2] = (char *)object[2] + (((char *)object[1] - (char *)object[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (object[0])
    operator delete(object[0]);
  if (v412)
  {
    rep = (char *)v412;
    operator delete(v412);
  }
LABEL_34:
  if (v8)
    operator delete(v8);
}

void sub_223B6A32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,void *a43,int a44,__int16 a45,char a46,char a47,char a48,int a49,__int16 a50,char a51,char a52)
{
  if (a48 && a47 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a26);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_223B6A53C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CCDF8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCDF8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CCDF0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CCDF8);
  }
  *a1 = qword_2540CCDF0;
}

void sub_223B6A5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCDF8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCDF8);
  _Unwind_Resume(a1);
}

uint64_t sub_223B6A630(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 1024;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_223B6A6F4(uint64_t a1, uint64_t a2, char a3, char a4, int32x2_t a5)
{
  double v9;
  double v10;
  int8x16_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x2_t v24;
  float32x2_t v25;
  uint64_t v26;
  uint64_t v27;
  float32x2_t v28;
  float32x2_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  int32x2_t *v36;
  uint64_t v37;
  unint64_t v38;
  int32x2_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  __int32 v45;
  uint64_t v46;

  sub_2241498F4(a1, 0);
  sub_223EBA970((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 3, **(int32x4_t ***)a2, a1 + 112, -1431655765 * ((*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2), v9, v10, v11);
  *(_DWORD *)(a1 + 272) = 2;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 2);
  LOBYTE(v44) = a3;
  v18 = *(_QWORD *)(a1 + 240);
  result = a1 + 240;
  v19 = *(_QWORD *)(a1 + 248) - v18;
  if (v16 <= v19)
  {
    if (v16 < v19)
      *(_QWORD *)(a1 + 248) = v18 + v16;
  }
  else
  {
    result = sub_223A72CE0(result, v16 - v19, (const char *)&v44);
  }
  v20 = *(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2;
  if (v20)
  {
    v21 = 0;
    v22 = 0;
    v23 = v20 >> 3;
    v24.i32[1] = a5.i32[1];
    v25 = (float32x2_t)vdup_lane_s32(a5, 0);
    do
    {
      v46 = v22;
      v26 = *(_QWORD *)(a2 + 8);
      v27 = **(_QWORD **)a2 + v21;
      v24.i32[0] = *(_DWORD *)v27;
      v12.i32[0] = *(_DWORD *)(v27 + 4);
      v13.i32[0] = *(_DWORD *)(v26 + 116);
      v14.i32[0] = *(_DWORD *)(v26 + 128);
      v15.i32[0] = *(_DWORD *)(v26 + 140);
      v28 = vmla_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)(v26 + 108), *(float *)v27), *(float32x2_t *)(v26 + 120), v12.f32[0]), v25, *(float32x2_t *)(v26 + 132));
      v29 = vmla_f32(vmul_f32(v13, v24), v12, v14);
      v12.i32[1] = a5.i32[1];
      v24 = vmla_f32(v29, (float32x2_t)a5, v15);
      v45 = v24.i32[0];
      v44 = (uint64_t)v28;
      v30 = *(_QWORD *)(a1 + 8);
      if (v30 >= *(_QWORD *)(a1 + 16))
      {
        v32 = sub_2233B2B48((unint64_t *)a1, &v44);
      }
      else
      {
        v31 = v44;
        *(_DWORD *)(v30 + 8) = v45;
        *(_QWORD *)v30 = v31;
        v32 = v30 + 12;
      }
      *(_QWORD *)(a1 + 8) = v32;
      v33 = v22 + 1;
      v34 = (v22 + 1) % (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 3);
      v43 = v34;
      v35 = *(unint64_t **)(a1 + 152);
      if ((unint64_t)v35 < *(_QWORD *)(a1 + 160))
      {
        *v35 = v22 | ((unint64_t)v34 << 32);
        result = (uint64_t)(v35 + 1);
      }
      else
      {
        result = (uint64_t)sub_223B7CC54(a1 + 144, (unsigned int *)&v46, &v43);
      }
      *(_QWORD *)(a1 + 152) = result;
      v21 += 8;
      ++v22;
    }
    while (v23 != v33);
  }
  if ((a4 & 1) != 0)
  {
    v37 = *(_QWORD *)(a1 + 112);
    v36 = *(int32x2_t **)(a1 + 120);
    if ((int32x2_t *)v37 != v36)
    {
      v38 = (unint64_t)&v36[-1] - v37 - 4;
      if (v38 < 0xC)
      {
        v39 = *(int32x2_t **)(a1 + 112);
        do
        {
LABEL_21:
          *v39 = vrev64_s32(*v39);
          v39 = (int32x2_t *)((char *)v39 + 12);
        }
        while (v39 != v36);
        return result;
      }
      v40 = v38 / 0xC + 1;
      v39 = (int32x2_t *)(v37 + 12 * (v40 & 0x3FFFFFFFFFFFFFFELL));
      v41 = v40 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        *(int32x2_t *)v37 = vrev64_s32(*(int32x2_t *)v37);
        *(int32x2_t *)(v37 + 12) = vrev64_s32(*(int32x2_t *)(v37 + 12));
        v37 += 24;
        v41 -= 2;
      }
      while (v41);
      if (v40 != (v40 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_21;
    }
  }
  return result;
}

void sub_223B6A970(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223B6A984(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223B6A998(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223B6A9AC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223B6A9C0(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int32x2_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _BYTE *v20;
  _BYTE *v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  _DWORD *v25;
  unint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  int32x2_t v29;
  float32x4_t v30;
  int v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  unsigned int *v48;
  uint64_t v49;
  float32x4_t v50;
  uint64_t v51;
  float32x4_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58[48];
  int32x4_t **v59[4];
  int v60;
  int v61;
  int v62;
  char v63;

  v63 = a2;
  if (a2)
    v4 = 248;
  else
    v4 = 32;
  if (a2)
    v5 = a1 + 248;
  else
    v5 = a1 + 32;
  v6 = a1 + 416;
  v7 = 224;
  if (a2)
    v7 = 416;
  else
    v6 = a1 + 224;
  v56 = v7;
  if ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)(a1 + v7)) >> 2 < (unint64_t)((uint64_t)(*(_QWORD *)(v5 + 8)
                                                                                               - *(_QWORD *)(a1 + v4)) >> 3)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/RoomBoundaryIdentification.cpp", 121, (uint64_t)"completeness.size() >= polygon.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2241498F4(a3, 0);
  *(_DWORD *)(a3 + 312) = 2;
  *(_DWORD *)(a3 + 352) = 2;
  *(_DWORD *)(a3 + 104) = 1;
  v54 = v5;
  v9 = *(_QWORD *)(v5 + 8) - *(_QWORD *)(a1 + v4);
  v10 = v9 >> 3;
  if ((v9 >> 3))
  {
    v11 = 0;
    v55 = a3 + 112;
    v12 = (v9 >> 3);
    do
    {
      LODWORD(v58[0]) = v11;
      v14 = v11 + 1;
      v15 = ((int)v11 + 1) % (int)v10;
      LODWORD(v59[0]) = v15;
      v16 = v15 + v10;
      v61 = v15 + v10;
      v62 = v10 + v11;
      v18 = *(_DWORD **)(a3 + 120);
      v17 = *(_QWORD *)(a3 + 128);
      if ((unint64_t)v18 >= v17)
      {
        v19 = sub_223B7C910(v55, v58, v59, &v61);
        v22 = *(_QWORD *)(a3 + 128);
        *(_QWORD *)(a3 + 120) = v19;
        if ((unint64_t)v19 < v22)
        {
LABEL_18:
          *v19 = v16;
          v19[1] = v10 + v11;
          v19[2] = v11;
          *(_QWORD *)(a3 + 120) = v19 + 3;
          LOBYTE(v60) = 2;
          v20 = *(_BYTE **)(a3 + 248);
          if ((unint64_t)v20 < *(_QWORD *)(a3 + 256))
            goto LABEL_19;
          goto LABEL_22;
        }
      }
      else
      {
        *v18 = v11;
        v18[1] = v15;
        v19 = v18 + 3;
        v18[2] = v16;
        *(_QWORD *)(a3 + 120) = v18 + 3;
        if ((unint64_t)(v18 + 3) < v17)
          goto LABEL_18;
      }
      *(_QWORD *)(a3 + 120) = sub_223B7C910(v55, &v61, &v62, v58);
      LOBYTE(v60) = 2;
      v20 = *(_BYTE **)(a3 + 248);
      if ((unint64_t)v20 < *(_QWORD *)(a3 + 256))
      {
LABEL_19:
        *v20 = 2;
        v21 = v20 + 1;
        goto LABEL_23;
      }
LABEL_22:
      v21 = (_BYTE *)sub_223B7CAB0(a3 + 240, &v60);
LABEL_23:
      *(_QWORD *)(a3 + 248) = v21;
      LOBYTE(v60) = 2;
      if ((unint64_t)v21 >= *(_QWORD *)(a3 + 256))
      {
        v23 = sub_223B7CAB0(a3 + 240, &v60);
      }
      else
      {
        *v21 = 2;
        v23 = (uint64_t)(v21 + 1);
      }
      *(_QWORD *)(a3 + 248) = v23;
      v24 = *(_DWORD *)(*(_QWORD *)(a1 + v56) + 4 * v11);
      v60 = v24;
      v25 = *(_DWORD **)(a3 + 328);
      v26 = *(_QWORD *)(a3 + 336);
      if ((unint64_t)v25 >= v26)
      {
        v27 = sub_223B7CE1C(a3 + 320, &v60);
        v28 = *(_QWORD *)(a3 + 336);
        *(_QWORD *)(a3 + 328) = v27;
        if ((unint64_t)v27 >= v28)
        {
LABEL_30:
          v13 = sub_223B7CE1C(a3 + 320, &v60);
          goto LABEL_15;
        }
      }
      else
      {
        *v25 = v24;
        v27 = v25 + 1;
        *(_QWORD *)(a3 + 328) = v27;
        if ((unint64_t)v27 >= v26)
          goto LABEL_30;
      }
      *v27 = v24;
      v13 = v27 + 1;
LABEL_15:
      *(_QWORD *)(a3 + 328) = v13;
      ++v11;
    }
    while (v12 != v14);
  }
  v59[0] = (int32x4_t **)v54;
  v59[1] = (int32x4_t **)v54;
  v59[2] = (int32x4_t **)&v63;
  v59[3] = (int32x4_t **)a1;
  *(float *)v8.i32 = *(float *)(v54 + 96) + *(float *)(v54 + 100);
  sub_223B6AF34((uint64_t)v58, v59, 3, 1, v8);
  sub_22414E9E0(a3, (uint64_t)v58);
  sub_22316F8F4(v58);
  v29.i32[0] = *(_DWORD *)(v54 + 96);
  sub_223B6AF34((uint64_t)v58, v59, 1, 0, v29);
  sub_22414E9E0(a3, (uint64_t)v58);
  sub_22316F8F4(v58);
  v31 = *(unsigned __int8 *)(a1 + 492);
  if (v31 == 2)
    v32 = 25;
  else
    v32 = -3;
  if (v31 == 1)
    v32 = 24;
  v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 120) - *(_QWORD *)(a3 + 112)) >> 2);
  LOBYTE(v58[0]) = v32;
  v34 = *(_QWORD *)(a3 + 280);
  v35 = *(_QWORD *)(a3 + 288) - v34;
  if (v33 <= v35)
  {
    if (v33 < v35)
      *(_QWORD *)(a3 + 288) = v34 + v33;
  }
  else
  {
    sub_223A72CE0(a3 + 280, v33 - v35, (const char *)v58);
  }
  v37 = (_QWORD *)(a3 + 32);
  v36 = *(_QWORD *)(a3 + 32);
  *(_DWORD *)(a3 + 64) = 1;
  v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v39 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a3 + 40) - v36) >> 2);
  if (v38 <= v39)
  {
    if (v38 < v39)
      *(_QWORD *)(a3 + 40) = v36 + 4 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
  else
  {
    sub_2235341F4(a3 + 32, v38 - v39, (uint64_t *)(a1 + 16));
  }
  if (*(_BYTE *)(a1 + 493))
  {
    v40 = *(_BYTE **)(a3 + 240);
    v41 = *(_BYTE **)(a3 + 248);
    if (v40 != v41)
    {
      v42 = 0;
      __asm { FMOV            V0.4S, #0.25 }
      do
      {
        if (*v40 == 1)
        {
          v48 = (unsigned int *)(*(_QWORD *)(a3 + 112) + v42);
          v49 = *v37 + 12 * *v48;
          v30.i64[0] = *(_QWORD *)v49;
          v30.i32[2] = *(_DWORD *)(v49 + 8);
          v50 = vmulq_f32(v30, _Q0);
          *(_DWORD *)(v49 + 8) = v50.i32[2];
          *(_QWORD *)v49 = v50.i64[0];
          v51 = *v37 + 12 * v48[1];
          v50.i64[0] = *(_QWORD *)v51;
          v50.i32[2] = *(_DWORD *)(v51 + 8);
          v52 = vmulq_f32(v50, _Q0);
          *(_DWORD *)(v51 + 8) = v52.i32[2];
          *(_QWORD *)v51 = v52.i64[0];
          v53 = *v37 + 12 * v48[2];
          v52.i64[0] = *(_QWORD *)v53;
          v52.i32[2] = *(_DWORD *)(v53 + 8);
          v30 = vmulq_f32(v52, _Q0);
          *(_DWORD *)(v53 + 8) = v30.i32[2];
          *(_QWORD *)v53 = v30.i64[0];
        }
        ++v40;
        v42 += 12;
      }
      while (v40 != v41);
    }
  }
  sub_223CD8718((_QWORD *)a3, (unsigned int **)(a3 + 112), (int32x2_t **)(a3 + 72));
}

void sub_223B6AE74(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223B6AE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t *v6;
  va_list va;

  va_start(va, a6);
  sub_22316F8F4((uint64_t *)va);
  sub_22316F8F4(v6);
  _Unwind_Resume(a1);
}

void sub_223B6AEBC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223B6AED0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223B6AEE4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223B6AEF8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223B6AF0C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223B6AF20(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223B6AF34(uint64_t a1, int32x4_t ***a2, char a3, int a4, int32x2_t a5)
{
  int32x4_t **v9;
  double v10;
  double v11;
  int8x16_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x2_t v25;
  float32x2_t v26;
  int32x4_t **v27;
  __int8 *v28;
  float32x2_t v29;
  float32x2_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  int32x2_t *v37;
  int32x2_t *v38;
  unint64_t v39;
  int32x2_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  const float *v47;
  unint64_t v49;
  uint64_t v50;
  __int32 v51;
  uint64_t v52;

  v9 = a2[3];
  sub_2241498F4(a1, 0);
  sub_223EBA970(((char *)(*a2)[1] - (char *)**a2) >> 3, **a2, a1 + 112, -1431655765 * ((*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2), v10, v11, v12);
  *(_DWORD *)(a1 + 272) = 2;
  v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 2);
  LOBYTE(v50) = a3;
  v19 = *(_QWORD *)(a1 + 240);
  result = a1 + 240;
  v20 = *(_QWORD *)(a1 + 248) - v19;
  if (v17 <= v20)
  {
    if (v17 < v20)
      *(_QWORD *)(a1 + 248) = v19 + v17;
  }
  else
  {
    result = sub_223A72CE0(result, v17 - v20, (const char *)&v50);
  }
  v21 = (char *)(*a2)[1] - (char *)**a2;
  if (v21)
  {
    v22 = 0;
    v23 = 0;
    v24 = v21 >> 3;
    v25.i32[1] = a5.i32[1];
    v26 = (float32x2_t)vdup_lane_s32(a5, 0);
    do
    {
      v52 = v23;
      v27 = a2[1];
      v28 = &(**a2)->i8[v22];
      v25.i32[0] = *(_DWORD *)v28;
      v13.i32[0] = *((_DWORD *)v28 + 1);
      v14.i32[0] = *((_DWORD *)v27 + 29);
      v15.i32[0] = *((_DWORD *)v27 + 32);
      v16.i32[0] = *((_DWORD *)v27 + 35);
      v29 = vmla_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)((char *)v27 + 108), *(float *)v28), (float32x2_t)v27[15], v13.f32[0]), v26, *(float32x2_t *)((char *)v27 + 132));
      v30 = vmla_f32(vmul_f32(v14, v25), v13, v15);
      v13.i32[1] = a5.i32[1];
      v25 = vmla_f32(v30, (float32x2_t)a5, v16);
      v51 = v25.i32[0];
      v50 = (uint64_t)v29;
      v31 = *(_QWORD *)(a1 + 8);
      if (v31 >= *(_QWORD *)(a1 + 16))
      {
        v33 = sub_2233B2B48((unint64_t *)a1, &v50);
      }
      else
      {
        v32 = v50;
        *(_DWORD *)(v31 + 8) = v51;
        *(_QWORD *)v31 = v32;
        v33 = v31 + 12;
      }
      *(_QWORD *)(a1 + 8) = v33;
      v34 = v23 + 1;
      v35 = (v23 + 1) % (unint64_t)(((char *)(*a2)[1] - (char *)**a2) >> 3);
      v49 = v35;
      v36 = *(unint64_t **)(a1 + 152);
      if ((unint64_t)v36 < *(_QWORD *)(a1 + 160))
      {
        *v36 = v23 | ((unint64_t)v35 << 32);
        result = (uint64_t)(v36 + 1);
      }
      else
      {
        result = (uint64_t)sub_223B7CC54(a1 + 144, (unsigned int *)&v52, &v49);
      }
      *(_QWORD *)(a1 + 152) = result;
      v22 += 8;
      ++v23;
    }
    while (v24 != v34);
  }
  v38 = *(int32x2_t **)(a1 + 112);
  v37 = *(int32x2_t **)(a1 + 120);
  if (a4 && v38 != v37)
  {
    v39 = (char *)v37 - (char *)v38 - 12;
    if (v39 < 0xC)
    {
      v40 = *(int32x2_t **)(a1 + 112);
      do
      {
LABEL_21:
        *v40 = vrev64_s32(*v40);
        v40 = (int32x2_t *)((char *)v40 + 12);
      }
      while (v40 != v37);
      goto LABEL_22;
    }
    v41 = v39 / 0xC + 1;
    v40 = (int32x2_t *)((char *)v38 + 12 * (v41 & 0x3FFFFFFFFFFFFFFELL));
    v42 = v41 & 0x3FFFFFFFFFFFFFFELL;
    v43 = *(_QWORD *)(a1 + 112);
    do
    {
      *(int32x2_t *)v43 = vrev64_s32(*(int32x2_t *)v43);
      *(int32x2_t *)(v43 + 12) = vrev64_s32(*(int32x2_t *)(v43 + 12));
      v43 += 24;
      v42 -= 2;
    }
    while (v42);
    if (v41 != (v41 & 0x3FFFFFFFFFFFFFFELL))
      goto LABEL_21;
  }
LABEL_22:
  *(_DWORD *)(a1 + 352) = 2;
  v44 = 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v38) >> 2);
  v45 = *(_QWORD *)(a1 + 320);
  v46 = (*(_QWORD *)(a1 + 328) - v45) >> 2;
  if (v44 <= v46)
  {
    if (v44 < v46)
      *(_QWORD *)(a1 + 328) = v45 + 4 * v44;
  }
  else
  {
    if (*(_BYTE *)a2[2])
      v47 = (const float *)(v9 + 61);
    else
      v47 = (const float *)v9 + 121;
    return sub_223937944(a1 + 320, v44 - v46, v47);
  }
  return result;
}

void sub_223B6B220(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223B6B234(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223B6B248(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223B6B25C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223B6B270(uint64_t a1)
{
  _OWORD *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t i;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __n128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t (**v29)();
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;

  v2 = (_OWORD *)(a1 + 2776);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  v3 = 42;
  v4 = 1;
  v5 = 31;
  *(_DWORD *)(a1 + 120) = 42;
  do
  {
    v6 = 1812433253 * (v3 ^ (v3 >> 30));
    v3 = v6 + v4;
    *(_DWORD *)(a1 + 4 * v5) = v5 + v6 - 30;
    ++v4;
    ++v5;
  }
  while (v5 != 654);
  *(_QWORD *)(a1 + 2616) = 0;
  v7 = 5489;
  v24 = 5489;
  for (i = 1; i != 624; ++i)
  {
    v7 = i + 1812433253 * (v7 ^ (v7 >> 30));
    *(&v24 + i) = v7;
  }
  v28 = 0;
  v9 = (std::__shared_weak_count *)operator new(0x28uLL);
  v10 = v9;
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC7A710;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24EC7A760;
  LODWORD(v9[1].__shared_owners_) = 5489;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v29 = &off_24EC7A6B0;
  v30 = v9 + 1;
  v31 = v9;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v10);
  }
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  v16.n128_f64[0] = sub_223524E3C();
  v17 = v31;
  if (v31)
  {
    v18 = (unint64_t *)&v31->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v17->__on_zero_shared)(v17, v16);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  *(_BYTE *)(a1 + 2648) = 0;
  *(_BYTE *)(a1 + 2664) = 0;
  v32 = *(_QWORD *)(a1 + 2624);
  sub_2232D69F0(&v24, &v32);
  v20 = v26;
  v21 = v27;
  *(_QWORD *)(a1 + 2672) = (v24 | ((unint64_t)v25 << 32) | ((unint64_t)BYTE1(v25) << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)HIBYTE(v25) << 56) | ((unint64_t)(HIWORD(v25) & 0xF | 0x40) << 48);
  *(_QWORD *)(a1 + 2680) = ((unint64_t)v21 << 32) | ((unint64_t)BYTE1(v21) << 40) | v20 & 0xFFFFFF00 | (v21 << 32) & 0xFF00000000000000 | ((unint64_t)BYTE2(v21) << 48) | v20 & 0x3F | 0x80;
  *(_OWORD *)(a1 + 2688) = 0u;
  *(_OWORD *)(a1 + 2704) = 0u;
  *(_OWORD *)(a1 + 2720) = 0u;
  *(_OWORD *)(a1 + 2736) = 0u;
  *(_OWORD *)(a1 + 2752) = 0u;
  *(_QWORD *)(a1 + 2768) = 0;
  *v2 = xmmword_224656660;
  v2[1] = xmmword_224660CB0;
  *(_QWORD *)(a1 + 2808) = 0x3F80000000000005;
  *(_QWORD *)(a1 + 2824) = 0;
  *(_QWORD *)(a1 + 2816) = 0;
  *(_QWORD *)(a1 + 2832) = 0;
  *(_QWORD *)(a1 + 2840) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 2828) = 1065353216;
  *(_OWORD *)(a1 + 2848) = 0u;
  *(_OWORD *)(a1 + 2864) = 0u;
  *(_OWORD *)(a1 + 2880) = 0u;
  *(_OWORD *)(a1 + 2896) = 0u;
  *(_OWORD *)(a1 + 2912) = 0u;
  *(_OWORD *)(a1 + 2928) = 0u;
  *(_OWORD *)(a1 + 2944) = 0u;
  *(_OWORD *)(a1 + 2960) = 0u;
  *(_OWORD *)(a1 + 2976) = 0u;
  *(_OWORD *)(a1 + 2992) = xmmword_224656660;
  *(_OWORD *)(a1 + 3008) = xmmword_224660CB0;
  *(_QWORD *)(a1 + 3024) = 0x3F80000000000005;
  *(_QWORD *)(a1 + 3040) = 0;
  *(_QWORD *)(a1 + 3048) = 0;
  *(_QWORD *)(a1 + 3032) = 0;
  *(_QWORD *)(a1 + 3056) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 3044) = 1065353216;
  *(_OWORD *)(a1 + 3064) = 0u;
  *(_OWORD *)(a1 + 3080) = 0u;
  *(_OWORD *)(a1 + 3096) = 0u;
  *(_OWORD *)(a1 + 3112) = 0u;
  *(_OWORD *)(a1 + 3128) = 0u;
  *(_DWORD *)(a1 + 3144) = 1065353216;
  *(_DWORD *)(a1 + 3152) = 0;
  *(_QWORD *)(a1 + 3156) = 0;
  *(_BYTE *)(a1 + 3165) = 0;
  *(_OWORD *)(a1 + 3168) = 0u;
  *(_OWORD *)(a1 + 3184) = 0u;
  v22 = operator new();
  sub_223EB3030(v22);
  *(_QWORD *)(a1 + 3200) = v22;
  *(_BYTE *)(a1 + 3164) = 2;
  return a1;
}

void sub_223B6B5EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x227684CE8](v5, 0x20C40DC1BFBCFLL);
  sub_22391786C((uint64_t *)(v1 + 3168));
  sub_22388925C(v1 + 2704);
  sub_2232D3808(v4);
  sub_223B6B668(v3);
  sub_223B6B668(v2);
  sub_22322E828(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223B6B668(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_22388925C((uint64_t)(v2 + 8));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_223B6B6C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  size_t v10;
  const char *v11;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  _BYTE *v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *p_p;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  int v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  _OWORD *v65;
  char *v66;
  _OWORD *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  float v76;
  _BYTE *v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  float *v85;
  int64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  __int128 *v92;
  uint64_t v93;
  __int128 v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD v106[3];
  int v107;
  const char *v108;
  int v109;
  const char *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE object[24];
  __int128 v120;
  __int128 __p;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  char v127;
  char v128;
  char v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  char v135;
  char v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;

  v141 = *MEMORY[0x24BDAC8D0];
  v114 = 0u;
  v115 = 0u;
  v116 = 728335872;
  kdebug_trace();
  sub_223B6C304(&v113);
  if (**(int **)(v113 + 56) > 3)
    goto LABEL_91;
  v6 = *(unsigned __int8 *)(v113 + 72);
  v7 = sub_22322F254(v113, "OSLogSurrogateAppender", 1, 0);
  v8 = v7;
  if (!v6 && v7 == 0)
    goto LABEL_91;
  v103 = v6;
  v104 = a1;
  v106[0] = &v113;
  v106[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v106[2] = std::chrono::system_clock::now().__d_.__rep_;
  v107 = 3;
  v108 = "unknown file";
  v109 = 222;
  v111 = 0;
  v112 = 0;
  v110 = "unknown function";
  v102 = v113;
  if (*(char *)(v113 + 39) < 0)
  {
    v11 = *(const char **)(v113 + 16);
    v10 = *(_QWORD *)(v113 + 24);
  }
  else
  {
    v10 = *(unsigned __int8 *)(v113 + 39);
    v11 = (const char *)(v113 + 16);
  }
  v101 = v113 + 16;
  v105 = *(_QWORD *)(a2 + 24);
  v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
    if ((_BYTE)v120 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F40[23] >= 0)
    v13 = byte_255788F40;
  else
    v13 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v14 = byte_255788F40[23];
  else
    v14 = *(_QWORD *)&byte_255788F40[8];
  *(_QWORD *)object = os_log_create(v13, v11);
  v15 = &object[8];
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v14 >= 0x17)
  {
    v16 = v8;
    v17 = v11;
    v18 = a2;
    v19 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v19 = v14 | 7;
    v20 = v19 + 1;
    v15 = operator new(v19 + 1);
    *(_QWORD *)&object[16] = v14;
    *(_QWORD *)&v120 = v20 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v15;
    a2 = v18;
    v11 = v17;
    v8 = v16;
    goto LABEL_23;
  }
  BYTE7(v120) = v14;
  if (v14)
LABEL_23:
    memmove(v15, v13, v14);
  v15[v14] = 0;
  BYTE8(v120) = 1;
  p_p = &__p;
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v10 >= 0x17)
  {
    v23 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v23 = v10 | 7;
    v24 = v23 + 1;
    p_p = (__int128 *)operator new(v23 + 1);
    *((_QWORD *)&__p + 1) = v10;
    *(_QWORD *)&v122 = v24 | 0x8000000000000000;
    *(_QWORD *)&__p = p_p;
  }
  else
  {
    BYTE7(v122) = v10;
    if (!v10)
    {
      LOBYTE(__p) = 0;
      BYTE8(v122) = 1;
      v22 = *(NSObject **)object;
      if ((SBYTE7(v122) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(p_p, v11, v10);
  *((_BYTE *)p_p + v10) = 0;
  BYTE8(v122) = 1;
  v22 = *(NSObject **)object;
  if ((SBYTE7(v122) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v120))
      goto LABEL_37;
LABEL_35:
    if (SBYTE7(v120) < 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete((void *)__p);
  if (BYTE8(v120))
    goto LABEL_35;
LABEL_37:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v8 && *(_QWORD *)(v8 + 24))
  {
    v25 = _os_log_pack_size();
    v26 = (std::__shared_weak_count_vtbl *)operator new(v25, (std::align_val_t)8uLL);
    v27 = (std::__shared_weak_count *)operator new();
    v28 = v27;
    v27->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    v27->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v27->__shared_weak_owners_ = 0;
    v27[1].__vftable = v26;
    *(_QWORD *)object = v26;
    *(_QWORD *)&object[8] = v26;
    *(_QWORD *)&object[16] = v27;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
    v120 = 0uLL;
    *(_QWORD *)&__p = 0;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v28);
    }
    v32 = *(_QWORD *)object;
    v33 = _os_log_pack_fill();
    *(_DWORD *)v33 = 134217984;
    *(_QWORD *)(v33 + 4) = v105;
    v34 = operator new();
    v35 = *(unsigned __int8 *)(v102 + 39);
    v36 = v101;
    if ((v35 & 0x80u) != 0)
    {
      v36 = *(_QWORD *)(v102 + 16);
      v35 = *(_QWORD *)(v102 + 24);
    }
    *(_QWORD *)v34 = v32;
    *(_OWORD *)(v34 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v34 + 24) = v120;
    v120 = 0uLL;
    *(_QWORD *)(v34 + 40) = v36;
    *(_QWORD *)(v34 + 48) = v35;
    *(_BYTE *)(v34 + 56) = 1;
    v117 = 0;
    v118 = v34;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), &v118);
    v37 = v118;
    v118 = 0;
    if (v37)
    {
      v38 = *(std::__shared_weak_count **)(v37 + 32);
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v41 = *(std::__shared_weak_count **)(v37 + 16);
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      MEMORY[0x227684CE8](v37, 0x10F0C40B62ED6C6);
      v44 = v117;
      v117 = 0;
      if (v44)
      {
        v45 = *(std::__shared_weak_count **)(v44 + 32);
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v48 = *(std::__shared_weak_count **)(v44 + 16);
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        MEMORY[0x227684CE8](v44, 0x10F0C40B62ED6C6);
      }
    }
    v51 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
    a1 = v104;
    v52 = v103;
    if (*((_QWORD *)&v120 + 1))
    {
      v53 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v55 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v56 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
  }
  else
  {
    os_log_type_enabled(v22, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 134217984;
    *(_QWORD *)&object[4] = v105;
    v58 = (void *)_os_log_send_and_compose_impl();
    a1 = v104;
    v52 = v103;
    if (v58)
      free(v58);
  }
  if (v52)
  {
    sub_22322C138((uint64_t)v106, "RoomBoundaryIdentification: Creating a travel mode result with %lu keyframes in the statistics", *(_QWORD *)(a2 + 24));
    sub_223182C08((uint64_t)v106);
  }
  sub_223182C08((uint64_t)v106);
  v59 = v112;
  if (v112)
  {
    v60 = (unint64_t *)&v112->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
LABEL_91:
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 48) = 1065353216;
  *(_DWORD *)(a3 + 68) = 1065353216;
  *(_DWORD *)(a3 + 88) = 1065353216;
  *(_DWORD *)(a3 + 108) = 1065353216;
  *(_BYTE *)(a3 + 112) = 0;
  v62 = (_OWORD *)(a3 + 112);
  *(_BYTE *)(a3 + 128) = 0;
  v128 = 0;
  v129 = 0;
  v130 = 0;
  v135 = 0;
  v136 = 0;
  v137 = 0;
  v120 = 0u;
  __p = 0u;
  v122 = 0u;
  v123 = 0u;
  v124 = 0u;
  v125 = 0u;
  v126 = 0u;
  v127 = 0;
  v132 = 0;
  v133 = 0;
  v131 = 0;
  v134 = 0;
  v139 = 0;
  v138 = 0;
  v140 = 0;
  object[16] = 0;
  *(_OWORD *)object = *(_OWORD *)(a1 + 2672);
  v63 = *(uint64_t **)(a2 + 16);
  if (!v63)
  {
    object[16] = 2;
    goto LABEL_137;
  }
  do
  {
    if (*((_DWORD *)v63 + 9))
    {
      v65 = v63 + 2;
      v66 = (char *)*((_QWORD *)&v120 + 1);
      if (*((_QWORD *)&v120 + 1) < (unint64_t)__p)
      {
        **((_OWORD **)&v120 + 1) = *v65;
        v67 = v66 + 16;
        goto LABEL_110;
      }
      v68 = (char *)v120;
      v69 = (uint64_t)(*((_QWORD *)&v120 + 1) - v120) >> 4;
      v70 = v69 + 1;
      if ((unint64_t)(v69 + 1) >> 60)
        sub_22316E078();
      v71 = __p - v120;
      if ((uint64_t)(__p - v120) >> 3 > v70)
        v70 = v71 >> 3;
      if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF0)
        v72 = 0xFFFFFFFFFFFFFFFLL;
      else
        v72 = v70;
      if (v72)
      {
        if (v72 >> 60)
          goto LABEL_141;
        v73 = (char *)operator new(16 * v72);
        v74 = &v73[16 * v69];
        *(_OWORD *)v74 = *v65;
        v75 = (uint64_t)v74;
        if (v66 == v68)
        {
LABEL_108:
          v67 = v74 + 16;
          *(_QWORD *)&v120 = v75;
          *((_QWORD *)&v120 + 1) = v74 + 16;
          *(_QWORD *)&__p = &v73[16 * v72];
          if (!v66)
            goto LABEL_110;
          goto LABEL_109;
        }
      }
      else
      {
        v73 = 0;
        v74 = (char *)(16 * v69);
        *(_OWORD *)(16 * v69) = *v65;
        v75 = 16 * v69;
        if (v66 == v68)
          goto LABEL_108;
      }
      do
      {
        *(_OWORD *)(v75 - 16) = *((_OWORD *)v66 - 1);
        v75 -= 16;
        v66 -= 16;
      }
      while (v66 != v68);
      v66 = (char *)v120;
      v67 = v74 + 16;
      *(_QWORD *)&v120 = v75;
      *((_QWORD *)&v120 + 1) = v74 + 16;
      *(_QWORD *)&__p = &v73[16 * v72];
      if (!v66)
      {
LABEL_110:
        *((_QWORD *)&v120 + 1) = v67;
        v76 = (float)(*((_DWORD *)v63 + 8) + *((_DWORD *)v63 + 9));
        v77 = (_BYTE *)v122;
        if ((unint64_t)v122 < *((_QWORD *)&v122 + 1))
        {
          *(float *)v122 = v76;
          v64 = (uint64_t)(v77 + 4);
LABEL_94:
          *(_QWORD *)&v122 = v64;
          goto LABEL_95;
        }
        v78 = (_BYTE *)*((_QWORD *)&__p + 1);
        v79 = v122 - *((_QWORD *)&__p + 1);
        v80 = (uint64_t)(v122 - *((_QWORD *)&__p + 1)) >> 2;
        v81 = v80 + 1;
        if ((unint64_t)(v80 + 1) >> 62)
          sub_22316E078();
        v82 = *((_QWORD *)&v122 + 1) - *((_QWORD *)&__p + 1);
        if ((uint64_t)(*((_QWORD *)&v122 + 1) - *((_QWORD *)&__p + 1)) >> 1 > v81)
          v81 = v82 >> 1;
        if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
          v83 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v83 = v81;
        if (v83)
        {
          if (v83 >> 62)
LABEL_141:
            sub_223174E94();
          v84 = (char *)operator new(4 * v83);
          v85 = (float *)&v84[4 * v80];
          *v85 = v76;
          v64 = (uint64_t)(v85 + 1);
          v86 = v77 - v78;
          if (v77 == v78)
            goto LABEL_132;
        }
        else
        {
          v84 = 0;
          v85 = (float *)(4 * v80);
          *(float *)(4 * v80) = v76;
          v64 = 4 * v80 + 4;
          v86 = v77 - v78;
          if (v77 == v78)
          {
LABEL_132:
            *((_QWORD *)&__p + 1) = v85;
            *(_QWORD *)&v122 = v64;
            *((_QWORD *)&v122 + 1) = &v84[4 * v83];
            if (v78)
              operator delete(v78);
            goto LABEL_94;
          }
        }
        v87 = v86 - 4;
        if (v87 < 0x2C)
          goto LABEL_153;
        if ((unint64_t)(v77 - v84 - v79) < 0x20)
          goto LABEL_153;
        v88 = (v87 >> 2) + 1;
        v89 = 4 * (v88 & 0x7FFFFFFFFFFFFFF8);
        v90 = &v77[-v89];
        v85 = (float *)((char *)v85 - v89);
        v91 = &v84[4 * v80 - 16];
        v92 = (__int128 *)(v77 - 16);
        v93 = v88 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v94 = *v92;
          *((_OWORD *)v91 - 1) = *(v92 - 1);
          *(_OWORD *)v91 = v94;
          v91 -= 32;
          v92 -= 2;
          v93 -= 8;
        }
        while (v93);
        v77 = v90;
        if (v88 != (v88 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_153:
          do
          {
            v95 = *((_DWORD *)v77 - 1);
            v77 -= 4;
            *((_DWORD *)v85-- - 1) = v95;
          }
          while (v77 != v78);
        }
        goto LABEL_132;
      }
LABEL_109:
      operator delete(v66);
      goto LABEL_110;
    }
LABEL_95:
    v63 = (uint64_t *)*v63;
  }
  while (v63);
  v97 = *(_QWORD *)(a3 + 8);
  v96 = *(_QWORD *)(a3 + 16);
  object[16] = 2;
  v62 = (_OWORD *)(a3 + 112);
  if (v97 < v96)
  {
    sub_223174250(v97, (__int128 *)object);
    v98 = v97 + 360;
    *(_QWORD *)(a3 + 8) = v97 + 360;
    goto LABEL_138;
  }
LABEL_137:
  v98 = sub_2232D6118((__int128 **)a3, (__int128 *)object);
LABEL_138:
  *(_QWORD *)(a3 + 8) = v98;
  v99 = *(unsigned __int8 *)(a3 + 128);
  *v62 = *(_OWORD *)object;
  if (!v99)
    *(_BYTE *)(a3 + 128) = 1;
  sub_223173E64(object);
  return kdebug_trace();
}

void sub_223B6C1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37,void *__p,void *a39,int a40,__int16 a41,char a42,char a43,char a44,int a45,__int16 a46,char a47,char a48)
{
  if (a44)
  {
    if (a43 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a17);
  sub_2231874DC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_223B6C304(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CCE08);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCE08))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CCE00);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CCE08);
  }
  *a1 = qword_2540CCE00;
}

void sub_223B6C3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCE08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCE08);
  _Unwind_Resume(a1);
}

uint64_t sub_223B6C3F8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, unint64_t j@<X2>, void **a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t i;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int32x2_t *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  double ***v27;
  double **v28;
  char *v29;
  void *v30;
  char *v31;
  void *v32;
  void *v33;
  double **v34;
  double **v35;
  double v36;
  double *v37;
  double *v38;
  unint64_t v39;
  double *v40;
  double v41;
  double v42;
  double v43;
  float v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  __n128 *v53;
  char *v54;
  __n128 v55;
  char *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char ****v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  float v65;
  float v66;
  double ***v67;
  double **v68;
  char *v69;
  void *v70;
  char ****v71;
  char *v72;
  void *v73;
  void *v74;
  double **v75;
  double **v76;
  double v77;
  double *v78;
  double *v79;
  unint64_t v80;
  double *v81;
  double v82;
  double v83;
  double v84;
  float v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  __n128 *v92;
  char *v93;
  __n128 v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  float v98;
  void **v99;
  __int128 v100;
  uint8x8_t v101;
  unint64_t v102;
  uint64_t **v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  unint64_t v108;
  unint64_t v109;
  _OWORD *v111;
  __int128 v112;
  uint64_t v113;
  const char *v114;
  size_t v115;
  unsigned __int8 v116;
  unsigned __int8 v117;
  const char *v118;
  size_t v119;
  void **v120;
  uint64_t v121;
  uint64_t v122;
  NSObject *v123;
  uint64_t v124;
  uint64_t v125;
  size_t v126;
  void *v127;
  _QWORD *v128;
  size_t v129;
  void *v130;
  void *v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  char v136;
  _QWORD *v137;
  std::string::size_type v138;
  std::__shared_weak_count *v139;
  unint64_t *p_shared_owners;
  unint64_t v141;
  void *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  double v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  void *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  _OWORD *v179;
  __int128 v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  int v184;
  unint64_t v185;
  unint64_t v186;
  size_t v187;
  _BYTE *v188;
  _BYTE *v189;
  const void **v190;
  const void *v191;
  uint64_t v192;
  uint64_t v193;
  const char *v194;
  uint64_t v195;
  const char *v196;
  size_t v197;
  unsigned __int8 v198;
  unsigned __int8 v199;
  const char *v200;
  size_t v201;
  _BYTE *v202;
  uint64_t v203;
  uint64_t v204;
  NSObject *v205;
  uint64_t v206;
  uint64_t v207;
  size_t v208;
  void *v209;
  _QWORD *v210;
  size_t v211;
  std::string::size_type v212;
  std::string *v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  std::string::size_type v217;
  char v218;
  char *v219;
  void *v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  void *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  char *v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  const char *v238;
  void *v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t *v243;
  unint64_t v244;
  std::string::size_type v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  const char *v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  int v261;
  unint64_t v262;
  unint64_t v263;
  _OWORD *v264;
  __int128 v265;
  uint64_t v266;
  const char *v267;
  size_t v268;
  unsigned __int8 v269;
  unsigned __int8 v270;
  const char *v271;
  size_t v272;
  void **v273;
  uint64_t v274;
  uint64_t v275;
  void **v276;
  uint64_t v277;
  uint64_t v278;
  NSObject *v279;
  size_t v280;
  void *v281;
  _QWORD *v282;
  size_t v283;
  void *v284;
  void *v285;
  void *v286;
  uint64_t v287;
  uint64_t v288;
  void *v289;
  char v290;
  _QWORD *v291;
  std::string::size_type v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  void *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  unint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  void *v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  __int128 v313;
  uint64_t v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  void *v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  _OWORD *v334;
  __int128 v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  __int128 *v339;
  _QWORD *v340;
  void *v341;
  _QWORD *v342;
  unsigned int v343;
  uint64_t v344;
  uint64_t v345;
  float v346;
  float v347;
  float v348;
  float v349;
  unint64_t v350;
  _BYTE *v351;
  char *v352;
  _BYTE *v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  char *v357;
  char *v358;
  char *v359;
  __int128 v360;
  __int128 v361;
  char *v362;
  char *v363;
  uint64_t *v364;
  _OWORD *v365;
  int v366;
  unint64_t v367;
  unint64_t v368;
  _QWORD *v370;
  size_t v371;
  _BYTE *v372;
  _BYTE *v373;
  const void **v374;
  const void *v375;
  uint64_t v376;
  uint64_t v377;
  char *v378;
  uint64_t v379;
  size_t v380;
  const char *v381;
  unsigned __int8 v382;
  unsigned __int8 v383;
  const char *v384;
  size_t v385;
  uint64_t v386;
  uint64_t v387;
  void *v388;
  NSObject *v389;
  uint64_t v390;
  size_t v391;
  std::__shared_weak_count_vtbl *v392;
  std::__shared_weak_count *v393;
  unint64_t *v394;
  size_t v395;
  size_t v396;
  _BYTE *v397;
  void *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  char v402;
  char *v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  char *v406;
  char *v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  std::__shared_weak_count *v417;
  unint64_t *v418;
  unint64_t v419;
  unint64_t *v420;
  unint64_t v421;
  const char *v422;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  unint64_t v426;
  _BYTE *v427;
  char *v428;
  _BYTE *v429;
  unint64_t v430;
  unint64_t v431;
  unint64_t v432;
  char *v433;
  char *v434;
  char *v435;
  __int128 v436;
  __int128 v437;
  char *v438;
  unint64_t v439;
  unint64_t v440;
  unint64_t v441;
  uint8x8_t v442;
  _QWORD *v443;
  _QWORD *v444;
  unint64_t v446;
  uint64_t v448;
  _QWORD *v449;
  int v450;
  float v451;
  float v452;
  _QWORD *v453;
  _QWORD *v454;
  _QWORD *v455;
  _BOOL8 v456;
  unint64_t v457;
  unint64_t v458;
  size_t prime;
  int8x8_t v460;
  unint64_t v461;
  uint8x8_t v462;
  uint64_t v463;
  unint64_t v464;
  unint64_t v465;
  float v466;
  uint64_t *v467;
  uint64_t v468;
  uint64_t v469;
  std::mutex *v470;
  uint64_t v471;
  char v472;
  _BYTE *v473;
  _BYTE *v474;
  uint64_t v475;
  __int128 v476;
  uint64_t *v477;
  void *v478;
  unint64_t v479;
  _BYTE *v480;
  uint64_t v481;
  uint64_t v482;
  int v483;
  uint64_t *v486;
  uint64_t v487;
  uint64_t v488;
  std::mutex *v489;
  uint64_t v490;
  char v491;
  _BYTE *v492;
  _BYTE *v493;
  uint64_t v494;
  __int128 v495;
  uint64_t *v496;
  void *v497;
  unint64_t v498;
  _BYTE *v499;
  uint64_t v500;
  uint64_t v501;
  int v502;
  uint64_t *v505;
  void *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  char *v510;
  uint8x8_t v511;
  unint64_t v512;
  uint64_t **v513;
  uint64_t *v514;
  unint64_t v515;
  uint64_t v516;
  uint64_t v517;
  float v518;
  int v519;
  unint64_t v520;
  unint64_t v521;
  std::string::size_type v522;
  std::string *v523;
  __n128 v524;
  unsigned int v525;
  unsigned int v526;
  int v527;
  _QWORD *v528;
  size_t v529;
  _BYTE *v530;
  _BYTE *v531;
  const void **v532;
  int32x2_t *v533;
  void **v534;
  const void *v535;
  uint64_t v536;
  uint64_t v537;
  std::string *v538;
  uint64_t v539;
  size_t v540;
  const char *v541;
  unsigned __int8 v542;
  unsigned __int8 v543;
  const char *v544;
  size_t v545;
  _BYTE *v546;
  uint64_t v547;
  uint64_t v548;
  void *v549;
  NSObject *v550;
  uint64_t v551;
  uint64_t v552;
  size_t v553;
  void *v554;
  _QWORD *v555;
  size_t v556;
  size_t v557;
  char *v558;
  _BYTE *v559;
  uint64_t v560;
  void *v561;
  void *v562;
  uint64_t v563;
  uint64_t v564;
  char *v565;
  uint64_t v566;
  size_t v567;
  const char *v568;
  unsigned __int8 v569;
  unsigned __int8 v570;
  const char *v571;
  size_t v572;
  _BYTE *v573;
  uint64_t v574;
  uint64_t v575;
  void *v576;
  NSObject *v577;
  uint64_t v578;
  uint64_t v579;
  size_t v580;
  void *v581;
  _QWORD *v582;
  size_t v583;
  std::string::size_type v584;
  std::string *v585;
  int v586;
  void *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  char v591;
  _QWORD *v592;
  uint64_t v593;
  std::__shared_weak_count *v594;
  unint64_t *v595;
  unint64_t v596;
  void *v597;
  unint64_t *v598;
  unint64_t v599;
  std::__shared_weak_count *v600;
  unint64_t *v601;
  unint64_t v602;
  unint64_t v603;
  uint64_t v604;
  uint64_t v605;
  std::string::size_type v606;
  char v607;
  char *v608;
  void *v609;
  std::__shared_weak_count *v610;
  unint64_t *v611;
  unint64_t v612;
  void *v613;
  unint64_t *v614;
  unint64_t v615;
  std::__shared_weak_count *v616;
  unint64_t *v617;
  unint64_t v618;
  unint64_t v619;
  std::__shared_weak_count *v620;
  unint64_t *v621;
  unint64_t v622;
  uint64_t v623;
  char *v624;
  uint64_t v625;
  char *v626;
  uint64_t v627;
  char *v628;
  void *v629;
  std::__shared_weak_count *v630;
  unint64_t *v631;
  unint64_t v632;
  std::__shared_weak_count *v633;
  unint64_t *v634;
  unint64_t v635;
  uint64_t v636;
  std::__shared_weak_count *v637;
  unint64_t *v638;
  unint64_t v639;
  std::__shared_weak_count *v640;
  unint64_t *v641;
  unint64_t v642;
  std::__shared_weak_count *v643;
  unint64_t *v644;
  unint64_t v645;
  std::__shared_weak_count *v646;
  unint64_t *v647;
  unint64_t v648;
  std::string *v649;
  std::__shared_weak_count *v650;
  unint64_t *v651;
  unint64_t v652;
  std::__shared_weak_count *v653;
  unint64_t *v654;
  unint64_t v655;
  uint64_t v656;
  char *v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  __int128 v663;
  uint64_t v664;
  std::__shared_weak_count *v665;
  unint64_t *v666;
  unint64_t v667;
  std::__shared_weak_count *v668;
  unint64_t *v669;
  unint64_t v670;
  std::string::size_type v671;
  std::__shared_weak_count *v672;
  unint64_t *v673;
  unint64_t v674;
  std::__shared_weak_count *v675;
  unint64_t *v676;
  unint64_t v677;
  std::__shared_weak_count *v678;
  unint64_t *v679;
  unint64_t v680;
  std::__shared_weak_count *v681;
  unint64_t *v682;
  unint64_t v683;
  const char *v684;
  std::__shared_weak_count *v685;
  unint64_t *v686;
  unint64_t v687;
  unint64_t v688;
  char *v689;
  char *v690;
  unint64_t v691;
  unint64_t v692;
  unint64_t v693;
  unint64_t v694;
  char *v695;
  char *v696;
  char *v697;
  __int128 v698;
  __int128 v699;
  char *v700;
  uint64_t *v701;
  uint64_t v702;
  uint64_t v703;
  std::mutex *v704;
  uint64_t v705;
  uint64_t v706;
  char v707;
  _BYTE *v708;
  _BYTE *v709;
  uint64_t v710;
  unint64_t v711;
  _BYTE *v712;
  uint64_t v713;
  uint64_t v714;
  int v715;
  __n128 *v718;
  _BYTE *v719;
  size_t v720;
  uint64_t *v721;
  uint64_t v722;
  uint64_t v723;
  std::mutex *v724;
  uint64_t v725;
  uint64_t v726;
  char v727;
  _BYTE *v728;
  _BYTE *v729;
  uint64_t v730;
  uint64_t *v731;
  unint64_t v732;
  _BYTE *v733;
  uint64_t v734;
  uint64_t v735;
  int v736;
  __n128 *v739;
  _BYTE *v740;
  size_t v741;
  uint64_t *v742;
  uint64_t v743;
  uint64_t v744;
  std::mutex *v745;
  uint64_t v746;
  uint64_t v747;
  char v748;
  _BYTE *v749;
  _BYTE *v750;
  uint64_t v751;
  unint64_t v752;
  _BYTE *v753;
  uint64_t v754;
  uint64_t v755;
  int v756;
  __n128 *v759;
  _BYTE *v760;
  size_t v761;
  uint64_t *v762;
  uint64_t v763;
  uint64_t v764;
  std::mutex *v765;
  uint64_t v766;
  uint64_t v767;
  char v768;
  _BYTE *v769;
  _BYTE *v770;
  uint64_t v771;
  uint64_t *v772;
  unint64_t v773;
  _BYTE *v774;
  uint64_t v775;
  uint64_t v776;
  int v777;
  __n128 *v780;
  _BYTE *v781;
  size_t v782;
  uint64_t *v783;
  uint64_t v784;
  uint64_t v785;
  std::mutex *v786;
  uint64_t v787;
  uint64_t v788;
  char v789;
  _BYTE *v790;
  _BYTE *v791;
  uint64_t v792;
  unint64_t v793;
  _BYTE *v794;
  uint64_t v795;
  uint64_t v796;
  int v797;
  __n128 *v800;
  _BYTE *v801;
  size_t v802;
  uint64_t v803;
  unsigned __int8 v804;
  unsigned __int8 v805;
  float *v806;
  uint64_t *v807;
  uint64_t v808;
  uint64_t v809;
  std::mutex *v810;
  uint64_t v811;
  uint64_t v812;
  char v813;
  _BYTE *v814;
  _BYTE *v815;
  uint64_t v816;
  unint64_t v817;
  _BYTE *v818;
  uint64_t v819;
  uint64_t v820;
  int v821;
  __n128 *v824;
  _BYTE *v825;
  size_t v826;
  float *v827;
  uint64_t *v828;
  uint64_t v829;
  uint64_t v830;
  std::mutex *v831;
  uint64_t v832;
  uint64_t v833;
  char v834;
  _BYTE *v835;
  _BYTE *v836;
  uint64_t v837;
  uint64_t *v838;
  unint64_t v839;
  _BYTE *v840;
  uint64_t v841;
  uint64_t v842;
  int v843;
  __n128 *v846;
  _BYTE *v847;
  size_t v848;
  float32x2_t v849;
  float32x2_t v850;
  uint64_t *v851;
  uint64_t v852;
  uint64_t v853;
  float v854;
  float v855;
  const float *v856;
  char v857;
  uint64_t v858;
  uint64_t v859;
  float v860;
  float v861;
  const float *v862;
  void *v863;
  uint64_t v864;
  _OWORD *v865;
  __int128 v866;
  int v867;
  _QWORD *v868;
  int v869;
  void **v870;
  void **v871;
  _BYTE *v872;
  int v873;
  unint64_t v874;
  unint64_t v875;
  _BYTE *v876;
  void **v877;
  uint64_t v878;
  const char *v879;
  size_t v880;
  unsigned __int8 v881;
  unsigned __int8 v882;
  const char *v883;
  size_t v884;
  void **v885;
  uint64_t v886;
  uint64_t v887;
  void **v888;
  NSObject *v889;
  uint64_t v890;
  uint64_t v891;
  size_t v892;
  void *v893;
  _QWORD *v894;
  size_t v895;
  size_t v896;
  _BYTE *v897;
  int v898;
  void *v899;
  uint64_t v900;
  uint64_t v901;
  size_t v902;
  std::string::size_type v903;
  std::string *v904;
  uint64_t v905;
  uint64_t v906;
  char *v907;
  std::__shared_weak_count *v908;
  unint64_t *v909;
  unint64_t v910;
  void *v911;
  unint64_t *v912;
  unint64_t v913;
  std::__shared_weak_count *v914;
  unint64_t *v915;
  unint64_t v916;
  unint64_t v917;
  std::__shared_weak_count *v918;
  unint64_t *v919;
  unint64_t v920;
  uint64_t v921;
  char *v922;
  char *v923;
  uint64_t v924;
  char *v925;
  uint64_t v926;
  char *v927;
  uint64_t v928;
  __int128 v929;
  void *v930;
  std::__shared_weak_count *v931;
  unint64_t *v932;
  unint64_t v933;
  std::__shared_weak_count *v934;
  unint64_t *v935;
  unint64_t v936;
  void *v937;
  std::__shared_weak_count *v938;
  unint64_t *v939;
  unint64_t v940;
  std::__shared_weak_count *v941;
  unint64_t *v942;
  unint64_t v943;
  std::__shared_weak_count *v944;
  unint64_t *v945;
  unint64_t v946;
  std::__shared_weak_count *v947;
  unint64_t *v948;
  unint64_t v949;
  const char *v950;
  const char *v951;
  std::__shared_weak_count *v952;
  unint64_t *v953;
  unint64_t v954;
  uint64_t *v955;
  uint64_t v956;
  uint64_t v957;
  std::mutex *v958;
  uint64_t v959;
  uint64_t v960;
  char v961;
  std::string::size_type v962;
  std::string *v963;
  uint64_t v964;
  uint64_t *v965;
  uint64_t *k;
  uint64_t v967;
  void *v968;
  std::__shared_weak_count *v969;
  unint64_t *v970;
  unint64_t v971;
  void *v972;
  unint64_t *v973;
  unint64_t *v974;
  unint64_t v975;
  unint64_t *v976;
  unint64_t v977;
  std::__shared_weak_count *v978;
  unint64_t *v979;
  unint64_t v980;
  std::__shared_weak_count *v981;
  unint64_t *v982;
  unint64_t v983;
  std::__shared_weak_count *v984;
  unint64_t *v985;
  unint64_t v986;
  unint64_t *v987;
  unint64_t v988;
  std::__shared_weak_count *v989;
  unint64_t *v990;
  unint64_t v991;
  uint64_t *v992;
  uint64_t v993;
  uint64_t v994;
  std::mutex *v995;
  uint64_t v996;
  uint64_t v997;
  char v998;
  std::string::size_type v999;
  std::string *v1000;
  uint64_t v1001;
  uint64_t *v1002;
  uint64_t *m;
  uint64_t v1004;
  void *v1005;
  std::__shared_weak_count *v1006;
  unint64_t *v1007;
  unint64_t v1008;
  void *v1009;
  unint64_t *v1010;
  unint64_t *v1011;
  unint64_t v1012;
  unint64_t *v1013;
  unint64_t v1014;
  std::__shared_weak_count *v1015;
  unint64_t *v1016;
  unint64_t v1017;
  std::__shared_weak_count *v1018;
  unint64_t *v1019;
  unint64_t v1020;
  std::__shared_weak_count *v1021;
  unint64_t *v1022;
  unint64_t v1023;
  unint64_t *v1024;
  unint64_t v1025;
  std::__shared_weak_count *v1026;
  unint64_t *v1027;
  unint64_t v1028;
  uint64_t *v1029;
  uint64_t v1030;
  uint64_t v1031;
  std::mutex *v1032;
  uint64_t v1033;
  uint64_t v1034;
  char v1035;
  std::string::size_type v1036;
  std::string *v1037;
  uint64_t v1038;
  uint64_t *v1039;
  uint64_t *n;
  uint64_t v1041;
  void *v1042;
  std::__shared_weak_count *v1043;
  unint64_t *v1044;
  unint64_t v1045;
  void *v1046;
  unint64_t *v1047;
  unint64_t *v1048;
  unint64_t v1049;
  unint64_t *v1050;
  unint64_t v1051;
  std::__shared_weak_count *v1052;
  unint64_t *v1053;
  unint64_t v1054;
  std::__shared_weak_count *v1055;
  unint64_t *v1056;
  unint64_t v1057;
  std::__shared_weak_count *v1058;
  unint64_t *v1059;
  unint64_t v1060;
  unint64_t *v1061;
  unint64_t v1062;
  std::__shared_weak_count *v1063;
  unint64_t *v1064;
  unint64_t v1065;
  uint64_t *v1066;
  uint64_t v1067;
  uint64_t v1068;
  std::mutex *v1069;
  uint64_t v1070;
  uint64_t v1071;
  char v1072;
  std::string::size_type v1073;
  std::string *v1074;
  uint64_t v1075;
  uint64_t *v1076;
  uint64_t *ii;
  uint64_t v1078;
  void *v1079;
  std::__shared_weak_count *v1080;
  unint64_t *v1081;
  unint64_t v1082;
  void *v1083;
  unint64_t *v1084;
  unint64_t *v1085;
  unint64_t v1086;
  unint64_t *v1087;
  unint64_t v1088;
  std::__shared_weak_count *v1089;
  unint64_t *v1090;
  unint64_t v1091;
  std::__shared_weak_count *v1092;
  unint64_t *v1093;
  unint64_t v1094;
  std::__shared_weak_count *v1095;
  unint64_t *v1096;
  unint64_t v1097;
  unint64_t *v1098;
  unint64_t v1099;
  std::__shared_weak_count *v1100;
  unint64_t *v1101;
  unint64_t v1102;
  uint64_t *v1103;
  uint64_t v1104;
  uint64_t v1105;
  std::mutex *v1106;
  uint64_t v1107;
  uint64_t v1108;
  char v1109;
  std::string::size_type v1110;
  std::string *v1111;
  uint64_t v1112;
  uint64_t *v1113;
  uint64_t *jj;
  uint64_t v1115;
  void *v1116;
  std::__shared_weak_count *v1117;
  unint64_t *v1118;
  unint64_t v1119;
  void *v1120;
  unint64_t *v1121;
  unint64_t *v1122;
  unint64_t v1123;
  unint64_t *v1124;
  unint64_t v1125;
  std::__shared_weak_count *v1126;
  unint64_t *v1127;
  unint64_t v1128;
  std::__shared_weak_count *v1129;
  unint64_t *v1130;
  unint64_t v1131;
  std::__shared_weak_count *v1132;
  unint64_t *v1133;
  unint64_t v1134;
  unint64_t *v1135;
  unint64_t v1136;
  std::__shared_weak_count *v1137;
  unint64_t *v1138;
  unint64_t v1139;
  uint64_t *v1140;
  uint64_t v1141;
  uint64_t v1142;
  std::mutex *v1143;
  uint64_t v1144;
  uint64_t v1145;
  char v1146;
  std::string::size_type v1147;
  std::string *v1148;
  uint64_t v1149;
  uint64_t *v1150;
  uint64_t *kk;
  uint64_t v1152;
  void *v1153;
  std::__shared_weak_count *v1154;
  unint64_t *v1155;
  unint64_t v1156;
  void *v1157;
  unint64_t *v1158;
  unint64_t *v1159;
  unint64_t v1160;
  unint64_t *v1161;
  unint64_t v1162;
  std::__shared_weak_count *v1163;
  unint64_t *v1164;
  unint64_t v1165;
  std::__shared_weak_count *v1166;
  unint64_t *v1167;
  unint64_t v1168;
  std::__shared_weak_count *v1169;
  unint64_t *v1170;
  unint64_t v1171;
  unint64_t *v1172;
  unint64_t v1173;
  std::__shared_weak_count *v1174;
  unint64_t *v1175;
  unint64_t v1176;
  uint64_t *v1177;
  uint64_t v1178;
  uint64_t v1179;
  std::mutex *v1180;
  uint64_t v1181;
  uint64_t v1182;
  char v1183;
  std::string::size_type v1184;
  std::string *v1185;
  uint64_t v1186;
  uint64_t *v1187;
  uint64_t *mm;
  uint64_t v1189;
  void *v1190;
  std::__shared_weak_count *v1191;
  unint64_t *v1192;
  unint64_t v1193;
  void *v1194;
  unint64_t *v1195;
  unint64_t *v1196;
  unint64_t v1197;
  unint64_t *v1198;
  unint64_t v1199;
  std::__shared_weak_count *v1200;
  unint64_t *v1201;
  unint64_t v1202;
  std::__shared_weak_count *v1203;
  unint64_t *v1204;
  unint64_t v1205;
  std::__shared_weak_count *v1206;
  unint64_t *v1207;
  unint64_t v1208;
  unint64_t *v1209;
  unint64_t v1210;
  std::__shared_weak_count *v1211;
  unint64_t *v1212;
  unint64_t v1213;
  uint64_t *v1214;
  uint64_t v1215;
  uint64_t v1216;
  std::mutex *v1217;
  uint64_t v1218;
  uint64_t v1219;
  char v1220;
  std::string::size_type v1221;
  std::string *v1222;
  uint64_t v1223;
  uint64_t *v1224;
  uint64_t *nn;
  uint64_t v1226;
  void *v1227;
  std::__shared_weak_count *v1228;
  unint64_t *v1229;
  unint64_t v1230;
  void *v1231;
  unint64_t *v1232;
  unint64_t *v1233;
  unint64_t v1234;
  unint64_t *v1235;
  unint64_t v1236;
  std::__shared_weak_count *v1237;
  unint64_t *v1238;
  unint64_t v1239;
  std::__shared_weak_count *v1240;
  unint64_t *v1241;
  unint64_t v1242;
  std::__shared_weak_count *v1243;
  unint64_t *v1244;
  unint64_t v1245;
  unint64_t *v1246;
  unint64_t v1247;
  std::__shared_weak_count *v1248;
  unint64_t *v1249;
  unint64_t v1250;
  uint64_t *v1251;
  uint64_t v1252;
  uint64_t v1253;
  std::mutex *v1254;
  uint64_t v1255;
  uint64_t v1256;
  char v1257;
  std::string::size_type v1258;
  std::string *v1259;
  uint64_t v1260;
  uint64_t *v1261;
  uint64_t v1262;
  uint64_t v1263;
  void *v1264;
  int32x2_t v1265;
  unint64_t v1266;
  unint64_t v1267;
  int v1268;
  uint64_t v1269;
  int v1270;
  int v1271;
  int v1272;
  char *v1273;
  unint64_t v1274;
  char *v1275;
  _BYTE *v1276;
  _BYTE *v1277;
  int32x2_t v1278;
  unint64_t v1279;
  unint64_t v1280;
  unint64_t v1281;
  unint64_t v1282;
  unint64_t v1283;
  uint64_t v1284;
  void *v1285;
  std::__shared_weak_count *v1286;
  unint64_t *v1287;
  unint64_t v1288;
  void *v1289;
  unint64_t *v1290;
  unint64_t *v1291;
  unint64_t v1292;
  unint64_t *v1293;
  unint64_t v1294;
  std::__shared_weak_count *v1295;
  unint64_t *v1296;
  unint64_t v1297;
  std::__shared_weak_count *v1298;
  unint64_t *v1299;
  unint64_t v1300;
  std::__shared_weak_count *v1301;
  unint64_t *v1302;
  unint64_t v1303;
  unint64_t *v1304;
  unint64_t v1305;
  std::__shared_weak_count *v1306;
  unint64_t *v1307;
  unint64_t v1308;
  _QWORD *v1309;
  _QWORD *v1310;
  void *v1311;
  _QWORD *v1312;
  _QWORD *v1313;
  void *v1314;
  void **v1316;
  unint64_t v1317;
  unint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  float32x2_t *v1321;
  void *v1322;
  std::__shared_weak_count_vtbl *v1323;
  std::__shared_weak_count *__dst;
  void *v1325;
  char *v1326;
  void *v1327;
  uint64_t v1328;
  uint64_t v1329;
  _OWORD *v1330;
  const char *v1331;
  const char *v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  int __s;
  int __sa;
  char *__sb;
  char *__sc;
  int __sd;
  char *__se;
  char *__sf;
  void *v1343;
  void *v1344;
  void *v1345;
  _QWORD *v1346;
  uint64_t v1347;
  uint64_t *v1348;
  void **v1349;
  __n128 v1350;
  uint64_t v1351;
  __n128 v1352;
  _QWORD *v1353;
  char *v1354;
  char *v1355;
  char *v1356;
  char *v1357;
  char *v1358;
  char *v1359;
  uint64_t v1360;
  char *v1362;
  uint64_t v1363[2];
  uint64_t v1364;
  void *v1365[2];
  void *v1366[2];
  int v1367;
  void *v1368[2];
  void *v1369[2];
  int v1370;
  uint64_t v1371;
  _QWORD v1372[5];
  int v1373;
  __int128 v1374;
  __int128 v1375;
  char v1376;
  int v1377;
  int v1378;
  void *v1379[2];
  char v1380;
  void *v1381[4];
  const char *v1382;
  int v1383;
  const char *v1384;
  uint64_t v1385;
  std::__shared_weak_count *v1386;
  void *__p[8];
  __int128 v1388;
  __int128 v1389;
  uint64_t v1390;
  __int128 v1391;
  __int128 v1392;
  int v1393;
  int v1394;
  uint64_t v1395;
  int v1396;
  int v1397;
  uint64_t v1398;
  int v1399;
  int v1400;
  __int128 v1401;
  __int128 v1402;
  __int128 v1403;
  __int128 v1404;
  __int128 v1405;
  __int128 v1406;
  __int128 v1407;
  __int128 v1408;
  __int128 v1409;
  __int128 v1410;
  __int128 v1411;
  int v1412;
  int v1413;
  uint64_t v1414;
  int v1415;
  int v1416;
  uint64_t v1417;
  int v1418;
  int v1419;
  __int128 v1420;
  __int128 v1421;
  __int128 v1422;
  __int128 v1423;
  __int128 v1424;
  int v1425;
  int v1426;
  uint64_t v1427;
  char v1428;
  _BYTE v1429[24];
  _BYTE v1430[32];
  std::__shared_weak_count *v1431;
  std::string v1432;
  _BYTE oslog[40];
  void *v1434;
  const char *v1435;
  unint64_t v1436;
  std::__shared_weak_count *v1437;
  _BYTE object[40];
  void *v1439;
  const char *v1440;
  unint64_t v1441;
  std::__shared_weak_count *v1442;
  int32x2_t *v1443[4];
  int v1444;
  char v1445;
  int32x2_t *v1446;
  char *v1447;
  unint64_t v1448[14];
  uint64_t v1449;
  _BYTE *v1450;
  unint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  int v1454;
  uint64_t v1455;
  uint64_t v1456;
  int v1457;
  uint64_t v1458;
  float32x2x3_t v1459;
  float32x2x3_t v1460;

  v1458 = *MEMORY[0x24BDAC8D0];
  v7 = a1[8];
  v1372[1] = 0x34F72C234F72C235 * ((a2[1] - *a2) >> 4);
  v1372[2] = v7;
  v1372[4] = 0;
  v1372[3] = 0;
  v1373 = 728335864;
  kdebug_trace();
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v1372[0] = 0;
  v1371 = 0;
  if (a1[392])
  {
    v8 = (_QWORD *)a1[391];
    if (v8)
    {
      do
      {
        v9 = (_QWORD *)*v8;
        operator delete(v8);
        v8 = v9;
      }
      while (v9);
    }
    a1[391] = 0;
    v10 = a1[390];
    if (v10)
    {
      for (i = 0; i != v10; ++i)
        *(_QWORD *)(a1[389] + 8 * i) = 0;
    }
    a1[392] = 0;
  }
  v1321 = (float32x2_t *)j;
  sub_2238891A0(a1 + 396);
  v13 = *a2;
  v14 = a2[1];
  if (*a2 != v14)
  {
    do
    {
      if (*(_BYTE *)(v13 + 460) == 2)
      {
        for (j = *(_QWORD *)(v13 + 424); j; j = *(_QWORD *)j)
        {
          __p[0] = (void *)(j + 16);
          v16 = (int32x2_t *)sub_223AEF408((uint64_t)(a1 + 389), j + 16, (uint64_t)&unk_2245BA939, (_OWORD **)__p);
          v12.n128_u64[0] = (unint64_t)vadd_s32(v16[4], *(int32x2_t *)(j + 32));
          v16[4] = (int32x2_t)v12.n128_u64[0];
        }
        if (*(_QWORD *)(v13 + 8) != *(_QWORD *)v13)
        {
          j = a1[397];
          if (j >= a1[398])
          {
            v15 = sub_22393654C(a1 + 396, v13);
          }
          else
          {
            sub_2239367D8(a1[397], v13);
            v15 = j + 144;
            a1[397] = j + 144;
          }
          a1[397] = v15;
        }
      }
      v13 += 464;
    }
    while (v13 != v14);
  }
  v1349 = a4;
  v1360 = (uint64_t)a1;
  v17 = (uint64_t *)a1[7];
  if (v17)
  {
    v1354 = 0;
    v1359 = 0;
    v18 = 0;
    while (1)
    {
      v19 = a2[1] - *a2;
      if (v19)
        break;
LABEL_21:
      v17 = (uint64_t *)*v17;
      if (!v17)
        goto LABEL_79;
    }
    v20 = 0;
    v21 = 0x34F72C234F72C235 * (v19 >> 4);
    while (1)
    {
      v22 = *a2;
      if (*(_BYTE *)(*a2 + 464 * v20 + 460) == 2)
        goto LABEL_25;
      v23 = v22 + 464 * v20;
      v12.n128_u32[0] = *((_DWORD *)v17 + 40);
      v24 = v12.n128_f32[0] + *((float *)v17 + 41);
      v25 = *(float *)(v23 + 96);
      if ((float)(v25 + *(float *)(v23 + 100)) < v24)
        v24 = v25 + *(float *)(v23 + 100);
      if (v12.n128_f32[0] < v25)
        v12.n128_u32[0] = *(_DWORD *)(v23 + 96);
      v26 = v24 - v12.n128_f32[0];
      if ((float)(v24 - v12.n128_f32[0]) <= 0.0)
        goto LABEL_25;
      v27 = (double ***)a1[400];
      v28 = v27[3];
      sub_223769CCC((char ****)v17 + 26, (_DWORD *)v28 + 55, (uint64_t)__p, *((float64_t *)v28 + 32), *((float64_t *)v28 + 32));
      *((_BYTE *)v28 + 32) = 0;
      sub_223FC51A4((uint64_t)__p, 0, 0, (char **)v28 + 11, (uint64_t **)v28 + 7);
      j = (unint64_t)__p[0];
      if (__p[0])
      {
        v29 = (char *)__p[1];
        v30 = __p[0];
        if (__p[1] != __p[0])
        {
          v31 = (char *)__p[1];
          do
          {
            v33 = (void *)*((_QWORD *)v31 - 3);
            v31 -= 24;
            v32 = v33;
            if (v33)
            {
              *((_QWORD *)v29 - 2) = v32;
              operator delete(v32);
            }
            v29 = v31;
          }
          while (v31 != (char *)j);
          v30 = __p[0];
        }
        __p[1] = (void *)j;
        operator delete(v30);
      }
      sub_223769A0C((uint64_t)v27[3], (char ****)(v22 + 464 * v20 + 144));
      sub_223769AC8((uint64_t)v27[3], 1, 1, (uint64_t)v27);
      sub_223FC57CC((uint64_t)v27[3]);
      v34 = *v27;
      v35 = v27[1];
      if (*v27 == v35)
      {
        v12.n128_f32[0] = v26 * 0.0;
        if ((float)(v26 * 0.0) <= 1.25)
          goto LABEL_25;
      }
      else
      {
        v12.n128_u64[0] = 0;
        do
        {
          v37 = *v34;
          v38 = v34[1];
          v39 = (char *)v38 - (char *)*v34;
          v36 = 0.0;
          if (v39 >= 0x30)
          {
            v40 = v38 - 2;
            if ((v39 & 0x10) != 0)
              v38 -= 2;
            if (v37 != v38)
            {
              v41 = *v40;
              do
              {
                v42 = v37[1];
                v43 = v36 + (v40[1] + v42) * (v41 - *v37);
                v40 = v37 + 2;
                v41 = v37[2];
                v36 = v43 + (v42 + v37[3]) * (*v37 - v41);
                v37 += 4;
              }
              while (v37 != v38);
              v40 = v37 - 2;
              v37 = v38;
            }
            if ((v39 & 0x10) != 0)
              v36 = v36 + (v40[1] + v37[1]) * (*v40 - *v37);
            v36 = v36 * 0.5;
          }
          v12.n128_f64[0] = v12.n128_f64[0] + v36;
          v34 += 3;
        }
        while (v34 != v35);
        v44 = v12.n128_f64[0];
        v12.n128_f32[0] = v26 * v44;
        if (v12.n128_f32[0] <= 1.25)
          goto LABEL_25;
      }
      if (*(_DWORD *)(v22 + 464 * v20 + 448))
        v45 = 2;
      else
        v45 = 1;
      if (*((_DWORD *)v17 + 128))
        v46 = v45 + 1;
      else
        v46 = v45;
      j = v17[2];
      v47 = v17[3];
      if (v18 >= v1354)
      {
        v48 = (v18 - v1359) >> 5;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 59)
          sub_22316E078();
        v1350 = v12;
        if ((v1354 - v1359) >> 4 > v49)
          v49 = (v1354 - v1359) >> 4;
        if ((unint64_t)(v1354 - v1359) >= 0x7FFFFFFFFFFFFFE0)
          v50 = 0x7FFFFFFFFFFFFFFLL;
        else
          v50 = v49;
        if (v50 >> 59)
          sub_223174E94();
        v51 = (char *)operator new(32 * v50);
        v52 = &v51[32 * v48];
        *(_DWORD *)v52 = v20;
        *(_QWORD *)(v52 + 4) = j;
        *(_QWORD *)(v52 + 12) = v47;
        v12.n128_u64[1] = v1350.n128_u64[1];
        v12.n128_u64[0] = (unint64_t)vdup_lane_s32((int32x2_t)v1350.n128_u64[0], 0);
        *(_QWORD *)(v52 + 20) = v12.n128_u64[0];
        *((_DWORD *)v52 + 7) = v46;
        if (v18 == v1359)
        {
          v56 = &v51[32 * v48];
          v54 = v1359;
          v1354 = &v51[32 * v50];
          v18 = v52 + 32;
          if (v1359)
            goto LABEL_74;
        }
        else
        {
          v53 = (__n128 *)&v51[32 * v48];
          v54 = v1359;
          do
          {
            v12 = *((__n128 *)v18 - 2);
            v55 = *((__n128 *)v18 - 1);
            v56 = (char *)&v53[-2];
            v53[-2] = v12;
            v53[-1] = v55;
            v18 -= 32;
            v53 -= 2;
          }
          while (v18 != v1359);
          v1354 = &v51[32 * v50];
          v18 = v52 + 32;
          if (v1359)
LABEL_74:
            operator delete(v54);
        }
        v1359 = v56;
        goto LABEL_25;
      }
      *(_DWORD *)v18 = v20;
      *(_QWORD *)(v18 + 4) = j;
      *(_QWORD *)(v18 + 12) = v47;
      *((_DWORD *)v18 + 5) = v12.n128_u32[0];
      *((_DWORD *)v18 + 6) = v12.n128_u32[0];
      *((_DWORD *)v18 + 7) = v46;
      v18 += 32;
LABEL_25:
      if (++v20 == v21)
        goto LABEL_21;
    }
  }
  v1354 = 0;
  v1359 = 0;
  v18 = 0;
LABEL_79:
  v57 = (uint64_t *)a1[12];
  v1346 = a1 + 12;
  if (v57)
  {
    while (1)
    {
      v58 = a2[1] - *a2;
      if (v58)
        break;
LABEL_81:
      v57 = (uint64_t *)*v57;
      if (!v57)
        goto LABEL_132;
    }
    v59 = 0;
    v60 = 0x34F72C234F72C235 * (v58 >> 4);
    v61 = (char ****)(v57 + 26);
    while (1)
    {
      v62 = *a2;
      if (*(_BYTE *)(*a2 + 464 * v59 + 460) == 2)
        goto LABEL_85;
      v63 = v62 + 464 * v59;
      v12.n128_u32[0] = *((_DWORD *)v57 + 40);
      v64 = v12.n128_f32[0] + *((float *)v57 + 41);
      v65 = *(float *)(v63 + 96);
      if ((float)(v65 + *(float *)(v63 + 100)) < v64)
        v64 = v65 + *(float *)(v63 + 100);
      if (v12.n128_f32[0] < v65)
        v12.n128_u32[0] = *(_DWORD *)(v63 + 96);
      v66 = v64 - v12.n128_f32[0];
      if ((float)(v64 - v12.n128_f32[0]) <= 0.0)
        goto LABEL_85;
      v67 = *(double ****)(v1360 + 3200);
      v68 = v67[3];
      sub_223769CCC(v61, (_DWORD *)v68 + 55, (uint64_t)__p, *((float64_t *)v68 + 32), *((float64_t *)v68 + 32));
      *((_BYTE *)v68 + 32) = 0;
      sub_223FC51A4((uint64_t)__p, 0, 0, (char **)v68 + 11, (uint64_t **)v68 + 7);
      j = (unint64_t)__p[0];
      if (__p[0])
      {
        v69 = (char *)__p[1];
        v70 = __p[0];
        if (__p[1] != __p[0])
        {
          v71 = v61;
          v72 = (char *)__p[1];
          do
          {
            v74 = (void *)*((_QWORD *)v72 - 3);
            v72 -= 24;
            v73 = v74;
            if (v74)
            {
              *((_QWORD *)v69 - 2) = v73;
              operator delete(v73);
            }
            v69 = v72;
          }
          while (v72 != (char *)j);
          v70 = __p[0];
          v61 = v71;
        }
        __p[1] = (void *)j;
        operator delete(v70);
      }
      sub_223769A0C((uint64_t)v67[3], (char ****)(v62 + 464 * v59 + 144));
      sub_223769AC8((uint64_t)v67[3], 1, 1, (uint64_t)v67);
      sub_223FC57CC((uint64_t)v67[3]);
      v75 = *v67;
      v76 = v67[1];
      if (*v67 == v76)
      {
        v12.n128_f32[0] = v66 * 0.0;
        if ((float)(v66 * 0.0) <= 1.25)
          goto LABEL_85;
      }
      else
      {
        v12.n128_u64[0] = 0;
        do
        {
          v78 = *v75;
          v79 = v75[1];
          v80 = (char *)v79 - (char *)*v75;
          v77 = 0.0;
          if (v80 >= 0x30)
          {
            v81 = v79 - 2;
            if ((v80 & 0x10) != 0)
              v79 -= 2;
            if (v78 != v79)
            {
              v82 = *v81;
              do
              {
                v83 = v78[1];
                v84 = v77 + (v81[1] + v83) * (v82 - *v78);
                v81 = v78 + 2;
                v82 = v78[2];
                v77 = v84 + (v83 + v78[3]) * (*v78 - v82);
                v78 += 4;
              }
              while (v78 != v79);
              v81 = v78 - 2;
              v78 = v79;
            }
            if ((v80 & 0x10) != 0)
              v77 = v77 + (v81[1] + v78[1]) * (*v81 - *v78);
            v77 = v77 * 0.5;
          }
          v12.n128_f64[0] = v12.n128_f64[0] + v77;
          v75 += 3;
        }
        while (v75 != v76);
        v85 = v12.n128_f64[0];
        v12.n128_f32[0] = v66 * v85;
        if (v12.n128_f32[0] <= 1.25)
          goto LABEL_85;
      }
      j = v57[2];
      v86 = v57[3];
      if (v18 >= v1354)
      {
        v87 = (v18 - v1359) >> 5;
        v88 = v87 + 1;
        if ((unint64_t)(v87 + 1) >> 59)
          sub_22316E078();
        v1352 = v12;
        if ((v1354 - v1359) >> 4 > v88)
          v88 = (v1354 - v1359) >> 4;
        if ((unint64_t)(v1354 - v1359) >= 0x7FFFFFFFFFFFFFE0)
          v89 = 0x7FFFFFFFFFFFFFFLL;
        else
          v89 = v88;
        if (v89 >> 59)
          sub_223174E94();
        v90 = (char *)operator new(32 * v89);
        v91 = &v90[32 * v87];
        *(_DWORD *)v91 = v59;
        *(_QWORD *)(v91 + 4) = j;
        *(_QWORD *)(v91 + 12) = v86;
        v12.n128_u64[1] = v1352.n128_u64[1];
        v12.n128_u64[0] = (unint64_t)vdup_lane_s32((int32x2_t)v1352.n128_u64[0], 0);
        *(_QWORD *)(v91 + 20) = v12.n128_u64[0];
        *((_DWORD *)v91 + 7) = 0;
        if (v18 == v1359)
        {
          v95 = &v90[32 * v87];
          v93 = v1359;
          v1354 = &v90[32 * v89];
          v18 = v91 + 32;
          if (v1359)
            goto LABEL_128;
        }
        else
        {
          v92 = (__n128 *)&v90[32 * v87];
          v93 = v1359;
          do
          {
            v12 = *((__n128 *)v18 - 2);
            v94 = *((__n128 *)v18 - 1);
            v95 = (char *)&v92[-2];
            v92[-2] = v12;
            v92[-1] = v94;
            v18 -= 32;
            v92 -= 2;
          }
          while (v18 != v1359);
          v1354 = &v90[32 * v89];
          v18 = v91 + 32;
          if (v1359)
LABEL_128:
            operator delete(v93);
        }
        v1359 = v95;
        goto LABEL_85;
      }
      *(_DWORD *)v18 = v59;
      *(_QWORD *)(v18 + 4) = j;
      *(_QWORD *)(v18 + 12) = v86;
      *((_DWORD *)v18 + 5) = v12.n128_u32[0];
      *((_DWORD *)v18 + 6) = v12.n128_u32[0];
      *((_DWORD *)v18 + 7) = 0;
      v18 += 32;
LABEL_85:
      if (++v59 == v60)
        goto LABEL_81;
    }
  }
LABEL_132:
  v1353 = (_QWORD *)(v1360 + 40);
  v1355 = (char *)(v1346 - 2);
  v96 = 126 - 2 * __clz((v18 - v1359) >> 5);
  if (v18 == v1359)
    v97 = 0;
  else
    v97 = v96;
  sub_223B7CFE0((uint64_t)v1359, (__int128 *)v18, v97, 1, v12);
  *(_OWORD *)v1368 = 0u;
  *(_OWORD *)v1369 = 0u;
  v1370 = 1065353216;
  *(_OWORD *)v1365 = 0u;
  *(_OWORD *)v1366 = 0u;
  v1367 = 1065353216;
  v1343 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  v1344 = (void *)*MEMORY[0x24BEDB7F0];
  v1345 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
  v98 = 0.0;
  v1325 = (void *)(MEMORY[0x24BEDB848] + 16);
  v99 = v1349;
LABEL_137:
  while (v1359 != v18)
  {
    v100 = *((_OWORD *)v18 - 2);
    *(_OWORD *)&v1430[16] = *((_OWORD *)v18 - 1);
    *(_OWORD *)v1430 = v100;
    v18 -= 32;
    if (!sub_223340F28(v1368, (uint64_t)&v1430[4]))
    {
      if (v1365[1])
      {
        v101 = (uint8x8_t)vcnt_s8((int8x8_t)v1365[1]);
        v101.i16[0] = vaddlv_u8(v101);
        if (v101.u32[0] > 1uLL)
        {
          v102 = *(unsigned int *)v1430;
          if (v1365[1] <= (void *)*(unsigned int *)v1430)
            v102 = *(unsigned int *)v1430 % (unint64_t)v1365[1];
        }
        else
        {
          v102 = (LODWORD(v1365[1]) - 1) & *(_DWORD *)v1430;
        }
        v103 = (uint64_t **)*((_QWORD *)v1365[0] + v102);
        if (v103)
        {
          v104 = *v103;
          if (v104)
          {
            if (v101.u32[0] < 2uLL)
            {
              while (1)
              {
                v106 = v104[1];
                if (v106 == *(unsigned int *)v1430)
                {
                  if (*((_DWORD *)v104 + 4) == *(_DWORD *)v1430)
                    goto LABEL_137;
                }
                else if ((v106 & ((uint64_t)v1365[1] - 1)) != v102)
                {
                  goto LABEL_159;
                }
                v104 = (uint64_t *)*v104;
                if (!v104)
                  goto LABEL_159;
              }
            }
            do
            {
              v105 = v104[1];
              if (v105 == *(unsigned int *)v1430)
              {
                if (*((_DWORD *)v104 + 4) == *(_DWORD *)v1430)
                  goto LABEL_137;
              }
              else
              {
                if ((void *)v105 >= v1365[1])
                  v105 %= (unint64_t)v1365[1];
                if (v105 != v102)
                  break;
              }
              v104 = (uint64_t *)*v104;
            }
            while (v104);
          }
        }
      }
LABEL_159:
      sub_223B6C304(v1429);
      if (**(int **)(*(_QWORD *)v1429 + 56) > 3)
        goto LABEL_275;
      v107 = *(unsigned __int8 *)(*(_QWORD *)v1429 + 72);
      v108 = sub_22322F254(*(uint64_t *)v1429, "OSLogSurrogateAppender", 1, 0);
      v109 = v108;
      if (!v107 && v108 == 0)
        goto LABEL_275;
      *(_QWORD *)object = v1429;
      *(std::chrono::steady_clock::time_point *)&object[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&object[16] = std::chrono::system_clock::now();
      *(_DWORD *)&object[24] = 3;
      *(_QWORD *)&object[32] = "unknown file";
      LODWORD(v1439) = 364;
      v1440 = "unknown function";
      v1441 = 0;
      v1442 = 0;
      sub_2245664AC(&v1430[4], __p);
      v111 = operator new(0x28uLL);
      __s = v107;
      v112 = *(_OWORD *)&__p[2];
      *v111 = *(_OWORD *)__p;
      v111[1] = v112;
      *((_DWORD *)v111 + 8) = __p[4];
      *((_BYTE *)v111 + 36) = 0;
      v113 = **(_QWORD **)object;
      v114 = (const char *)(**(_QWORD **)object + 16);
      v1328 = **(_QWORD **)object;
      v1331 = v114;
      if (*(char *)(**(_QWORD **)object + 39) < 0)
      {
        v114 = *(const char **)(v113 + 16);
        v115 = *(_QWORD *)(v113 + 24);
        v117 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v117 & 1) != 0)
          goto LABEL_168;
      }
      else
      {
        v115 = *(unsigned __int8 *)(**(_QWORD **)object + 39);
        v116 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v116 & 1) != 0)
          goto LABEL_168;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)oslog);
        sub_223199C58("com.apple.cv3d", (unint64_t)oslog, byte_255788F40);
        if (oslog[24] && (oslog[23] & 0x80000000) != 0)
          operator delete(*(void **)oslog);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_168:
      if (byte_255788F40[23] >= 0)
        v118 = byte_255788F40;
      else
        v118 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v119 = byte_255788F40[23];
      else
        v119 = *(_QWORD *)&byte_255788F40[8];
      __p[0] = os_log_create(v118, v114);
      if (v119 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v119 >= 0x17)
      {
        v121 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v119 | 7) != 0x17)
          v121 = v119 | 7;
        v122 = v121 + 1;
        v120 = (void **)operator new(v121 + 1);
        __p[3] = (void *)(v122 | 0x8000000000000000);
        __p[1] = v120;
        __p[2] = (void *)v119;
LABEL_181:
        memmove(v120, v118, v119);
        goto LABEL_182;
      }
      HIBYTE(__p[3]) = v119;
      v120 = &__p[1];
      if (v119)
        goto LABEL_181;
LABEL_182:
      *((_BYTE *)v120 + v119) = 0;
      LOBYTE(__p[4]) = 1;
      if (v115 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v99 = v1349;
      if (v115 >= 0x17)
      {
        v124 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v115 | 7) != 0x17)
          v124 = v115 | 7;
        v125 = v124 + 1;
        j = (unint64_t)operator new(v124 + 1);
        __p[7] = (void *)(v125 | 0x8000000000000000);
        __p[5] = (void *)j;
        __p[6] = (void *)v115;
      }
      else
      {
        HIBYTE(__p[7]) = v115;
        j = (unint64_t)&__p[5];
        if (!v115)
        {
          LOBYTE(__p[5]) = 0;
          LOBYTE(v1388) = 1;
          v123 = __p[0];
          if ((SHIBYTE(__p[7]) & 0x80000000) == 0)
            goto LABEL_186;
          goto LABEL_192;
        }
      }
      memmove((void *)j, v114, v115);
      *(_BYTE *)(j + v115) = 0;
      LOBYTE(v1388) = 1;
      v123 = __p[0];
      if ((SHIBYTE(__p[7]) & 0x80000000) == 0)
      {
LABEL_186:
        if (!LOBYTE(__p[4]))
          goto LABEL_195;
        goto LABEL_193;
      }
LABEL_192:
      operator delete(__p[5]);
      if (!LOBYTE(__p[4]))
        goto LABEL_195;
LABEL_193:
      if (SHIBYTE(__p[3]) < 0)
        operator delete(__p[1]);
LABEL_195:
      if (__p[0])
        os_release(__p[0]);
      if (!v109 || !*(_QWORD *)(v109 + 24))
      {
        os_log_type_enabled(v123, OS_LOG_TYPE_INFO);
        LODWORD(__p[0]) = 136315650;
        *(void **)((char *)__p + 4) = v111;
        WORD2(__p[1]) = 2048;
        *(double *)((char *)&__p[1] + 6) = *(float *)&v1430[20];
        HIWORD(__p[2]) = 1024;
        LODWORD(__p[3]) = *(_DWORD *)&v1430[28];
        v132 = (void *)_os_log_send_and_compose_impl();
        if (v132)
        {
          free(v132);
          operator delete(v111);
          if (!__s)
            goto LABEL_270;
          goto LABEL_269;
        }
        goto LABEL_268;
      }
      v126 = _os_log_pack_size();
      v127 = operator new(v126, (std::align_val_t)8uLL);
      v128 = (_QWORD *)operator new();
      *v128 = &off_24EC1F7F0;
      v128[1] = 0;
      v128[2] = 0;
      v128[3] = v127;
      *(_QWORD *)oslog = v127;
      *(_QWORD *)&oslog[8] = v127;
      *(_QWORD *)&oslog[16] = v128;
      *(_QWORD *)&oslog[24] = 0;
      *(_QWORD *)&oslog[32] = 0;
      v129 = strlen((const char *)v111);
      if (v129 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v130 = (void *)v129;
      if (v129 >= 0x17)
      {
        v133 = (v129 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v129 | 7) != 0x17)
          v133 = v129 | 7;
        v134 = v133 + 1;
        v131 = operator new(v133 + 1);
        v1381[2] = (void *)(v134 | 0x8000000000000000);
        v1381[0] = v131;
        v1381[1] = v130;
LABEL_209:
        memcpy(v131, v111, (size_t)v130);
        goto LABEL_210;
      }
      HIBYTE(v1381[2]) = v129;
      v131 = v1381;
      if (v129)
        goto LABEL_209;
LABEL_210:
      *((_BYTE *)v130 + (_QWORD)v131) = 0;
      v135 = v1381[0];
      v1432.__r_.__value_.__l.__data_ = (std::string::pointer)v1381[1];
      *(std::string::size_type *)((char *)v1432.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v1381[1] + 7);
      v136 = HIBYTE(v1381[2]);
      v137 = operator new(0x40uLL);
      v137[1] = 0;
      v137[2] = 0;
      v137[3] = off_24EC1F890;
      *v137 = &off_24EC1F840;
      v138 = v1432.__r_.__value_.__r.__words[0];
      v137[4] = v135;
      v137[5] = v138;
      *(_QWORD *)((char *)v137 + 47) = *(std::string::size_type *)((char *)v1432.__r_.__value_.__r.__words + 7);
      *((_BYTE *)v137 + 55) = v136;
      v1432.__r_.__value_.__r.__words[0] = 0;
      *(std::string::size_type *)((char *)v1432.__r_.__value_.__r.__words + 7) = 0;
      v139 = *(std::__shared_weak_count **)&oslog[32];
      *(_QWORD *)&oslog[24] = v137 + 3;
      *(_QWORD *)&oslog[32] = v137;
      if (v139)
      {
        p_shared_owners = (unint64_t *)&v139->__shared_owners_;
        do
          v141 = __ldaxr(p_shared_owners);
        while (__stlxr(v141 - 1, p_shared_owners));
        if (!v141)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
      }
      *(_OWORD *)__p = *(_OWORD *)oslog;
      v142 = *(void **)&oslog[24];
      __p[2] = *(void **)&oslog[16];
      if (*(_QWORD *)&oslog[16])
      {
        v143 = (unint64_t *)(*(_QWORD *)&oslog[16] + 8);
        do
          v144 = __ldxr(v143);
        while (__stxr(v144 + 1, v143));
      }
      v145 = *(std::__shared_weak_count **)&oslog[32];
      __p[3] = v142;
      __p[4] = *(void **)&oslog[32];
      if (*(_QWORD *)&oslog[32])
      {
        v146 = (unint64_t *)(*(_QWORD *)&oslog[32] + 8);
        do
          v147 = __ldxr(v146);
        while (__stxr(v147 + 1, v146));
        __p[5] = v142;
        do
          v148 = __ldaxr(v146);
        while (__stlxr(v148 - 1, v146));
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
          std::__shared_weak_count::__release_weak(v145);
        }
      }
      else
      {
        __p[5] = v142;
      }
      v149 = *(std::__shared_weak_count **)&oslog[16];
      if (*(_QWORD *)&oslog[16])
      {
        v150 = (unint64_t *)(*(_QWORD *)&oslog[16] + 8);
        do
          v151 = __ldaxr(v150);
        while (__stlxr(v151 - 1, v150));
        if (!v151)
        {
          ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
          std::__shared_weak_count::__release_weak(v149);
        }
      }
      j = (unint64_t)__p[0];
      if (*((char *)__p[5] + 31) >= 0)
        v152 = (char *)__p[5] + 8;
      else
        v152 = (char *)*((_QWORD *)__p[5] + 1);
      v153 = _os_log_pack_fill();
      v154 = *(float *)&v1430[20];
      v155 = *(_DWORD *)&v1430[28];
      *(_DWORD *)v153 = 136315650;
      *(_QWORD *)(v153 + 4) = v152;
      *(_WORD *)(v153 + 12) = 2048;
      *(double *)(v153 + 14) = v154;
      *(_WORD *)(v153 + 22) = 1024;
      *(_DWORD *)(v153 + 24) = v155;
      v156 = operator new();
      v157 = *(unsigned __int8 *)(v1328 + 39);
      v158 = *(const char **)(v1328 + 16);
      v159 = *(_QWORD *)(v1328 + 24);
      v160 = *(_OWORD *)&__p[3];
      *(_OWORD *)(v156 + 8) = *(_OWORD *)&__p[1];
      if ((v157 & 0x80u) != 0)
        v157 = v159;
      else
        v158 = v1331;
      *(_QWORD *)v156 = j;
      __p[1] = 0;
      __p[2] = 0;
      *(_OWORD *)(v156 + 24) = v160;
      __p[3] = 0;
      __p[4] = 0;
      *(_QWORD *)(v156 + 40) = v158;
      *(_QWORD *)(v156 + 48) = v157;
      *(_BYTE *)(v156 + 56) = 1;
      v1381[0] = 0;
      *(_QWORD *)oslog = v156;
      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v109 + 24) + 40))(*(_QWORD *)(v109 + 24), oslog);
      v161 = *(_QWORD *)oslog;
      *(_QWORD *)oslog = 0;
      if (v161)
      {
        v162 = *(std::__shared_weak_count **)(v161 + 32);
        if (v162)
        {
          v163 = (unint64_t *)&v162->__shared_owners_;
          do
            v164 = __ldaxr(v163);
          while (__stlxr(v164 - 1, v163));
          if (!v164)
          {
            ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
            std::__shared_weak_count::__release_weak(v162);
          }
        }
        j = *(_QWORD *)(v161 + 16);
        if (j)
        {
          v165 = (unint64_t *)(j + 8);
          do
            v166 = __ldaxr(v165);
          while (__stlxr(v166 - 1, v165));
          if (!v166)
          {
            (*(void (**)(unint64_t))(*(_QWORD *)j + 16))(j);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)j);
          }
        }
        MEMORY[0x227684CE8](v161, 0x10F0C40B62ED6C6);
        v167 = v1381[0];
        v1381[0] = 0;
        if (v167)
        {
          v168 = (std::__shared_weak_count *)*((_QWORD *)v167 + 4);
          if (v168)
          {
            v169 = (unint64_t *)&v168->__shared_owners_;
            do
              v170 = __ldaxr(v169);
            while (__stlxr(v170 - 1, v169));
            if (!v170)
            {
              ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
              std::__shared_weak_count::__release_weak(v168);
            }
          }
          j = *((_QWORD *)v167 + 2);
          if (j)
          {
            v171 = (unint64_t *)(j + 8);
            do
              v172 = __ldaxr(v171);
            while (__stlxr(v172 - 1, v171));
            if (!v172)
            {
              (*(void (**)(unint64_t))(*(_QWORD *)j + 16))(j);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)j);
            }
          }
          MEMORY[0x227684CE8](v167, 0x10F0C40B62ED6C6);
        }
      }
      v173 = (std::__shared_weak_count *)__p[4];
      if (!__p[4])
        goto LABEL_264;
      v174 = (unint64_t *)((char *)__p[4] + 8);
      do
        v175 = __ldaxr(v174);
      while (__stlxr(v175 - 1, v174));
      if (!v175)
      {
        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
        std::__shared_weak_count::__release_weak(v173);
        v176 = (std::__shared_weak_count *)__p[2];
        if (!__p[2])
          goto LABEL_268;
      }
      else
      {
LABEL_264:
        v176 = (std::__shared_weak_count *)__p[2];
        if (!__p[2])
          goto LABEL_268;
      }
      v177 = (unint64_t *)&v176->__shared_owners_;
      do
        v178 = __ldaxr(v177);
      while (__stlxr(v178 - 1, v177));
      if (!v178)
      {
        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
        std::__shared_weak_count::__release_weak(v176);
        operator delete(v111);
        if (!__s)
          goto LABEL_270;
LABEL_269:
        sub_2245664AC(&v1430[4], __p);
        v179 = operator new(0x28uLL);
        v180 = *(_OWORD *)&__p[2];
        *v179 = *(_OWORD *)__p;
        v179[1] = v180;
        *((_DWORD *)v179 + 8) = __p[4];
        *((_BYTE *)v179 + 36) = 0;
        sub_22322C138((uint64_t)object, "RoomBoundaryIdentification: Updating room %s with an overlap to new area: %f (similarity class: %u)", (const char *)v179, *(float *)&v1430[20], *(_DWORD *)&v1430[28]);
        operator delete(v179);
        sub_223182C08((uint64_t)object);
        goto LABEL_270;
      }
LABEL_268:
      operator delete(v111);
      if (__s)
        goto LABEL_269;
LABEL_270:
      sub_223182C08((uint64_t)object);
      v181 = v1442;
      if (v1442)
      {
        v182 = (unint64_t *)&v1442->__shared_owners_;
        do
          v183 = __ldaxr(v182);
        while (__stlxr(v183 - 1, v182));
        if (!v183)
        {
          ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
          std::__shared_weak_count::__release_weak(v181);
        }
      }
LABEL_275:
      if (sub_223340F28(v1353, (uint64_t)&v1430[4]))
        goto LABEL_542;
      if (sub_223340F28(v1355, (uint64_t)&v1430[4]))
      {
        sub_223B6C304(v1429);
        if (**(int **)(*(_QWORD *)v1429 + 56) <= 3)
        {
          v261 = *(unsigned __int8 *)(*(_QWORD *)v1429 + 72);
          v262 = sub_22322F254(*(uint64_t *)v1429, "OSLogSurrogateAppender", 1, 0);
          v263 = v262;
          if (v261 || v262)
          {
            *(_QWORD *)object = v1429;
            *(std::chrono::steady_clock::time_point *)&object[8] = std::chrono::steady_clock::now();
            *(std::chrono::system_clock::time_point *)&object[16] = std::chrono::system_clock::now();
            *(_DWORD *)&object[24] = 3;
            *(_QWORD *)&object[32] = "unknown file";
            LODWORD(v1439) = 376;
            v1440 = "unknown function";
            v1441 = 0;
            v1442 = 0;
            sub_2245664AC(&v1430[4], __p);
            v264 = operator new(0x28uLL);
            v265 = *(_OWORD *)&__p[2];
            *v264 = *(_OWORD *)__p;
            v264[1] = v265;
            *((_DWORD *)v264 + 8) = __p[4];
            *((_BYTE *)v264 + 36) = 0;
            v266 = **(_QWORD **)object;
            v267 = (const char *)(**(_QWORD **)object + 16);
            __sb = (char *)v267;
            v1333 = **(_QWORD **)object;
            if (*(char *)(**(_QWORD **)object + 39) < 0)
            {
              v267 = *(const char **)(v266 + 16);
              v268 = *(_QWORD *)(v266 + 24);
              v270 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v270 & 1) == 0)
              {
LABEL_572:
                if (__cxa_guard_acquire(&qword_255788F58))
                {
                  sub_224568628((uint64_t)oslog);
                  sub_223199C58("com.apple.cv3d", (unint64_t)oslog, byte_255788F40);
                  if (oslog[24] && (oslog[23] & 0x80000000) != 0)
                    operator delete(*(void **)oslog);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
                  __cxa_guard_release(&qword_255788F58);
                }
              }
            }
            else
            {
              v268 = *(unsigned __int8 *)(**(_QWORD **)object + 39);
              v269 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v269 & 1) == 0)
                goto LABEL_572;
            }
            if (byte_255788F40[23] >= 0)
              v271 = byte_255788F40;
            else
              v271 = *(const char **)byte_255788F40;
            if (byte_255788F40[23] >= 0)
              v272 = byte_255788F40[23];
            else
              v272 = *(_QWORD *)&byte_255788F40[8];
            __p[0] = os_log_create(v271, v267);
            if (v272 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v272 >= 0x17)
            {
              v1330 = v264;
              v274 = (v272 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v272 | 7) != 0x17)
                v274 = v272 | 7;
              v275 = v274 + 1;
              v273 = (void **)operator new(v274 + 1);
              __p[3] = (void *)(v275 | 0x8000000000000000);
              __p[1] = v273;
              __p[2] = (void *)v272;
              v264 = v1330;
            }
            else
            {
              HIBYTE(__p[3]) = v272;
              v273 = &__p[1];
              if (!v272)
              {
LABEL_443:
                *((_BYTE *)v273 + v272) = 0;
                LOBYTE(__p[4]) = 1;
                if (v268 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v99 = v1349;
                if (v268 >= 0x17)
                {
                  v277 = (v268 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v268 | 7) != 0x17)
                    v277 = v268 | 7;
                  v278 = v277 + 1;
                  v276 = (void **)operator new(v277 + 1);
                  __p[7] = (void *)(v278 | 0x8000000000000000);
                  __p[5] = v276;
                  __p[6] = (void *)v268;
                }
                else
                {
                  HIBYTE(__p[7]) = v268;
                  v276 = &__p[5];
                  if (!v268)
                  {
LABEL_451:
                    *((_BYTE *)v276 + v268) = 0;
                    LOBYTE(v1388) = 1;
                    v279 = __p[0];
                    if (SHIBYTE(__p[7]) < 0)
                      operator delete(__p[5]);
                    if (LOBYTE(__p[4]) && SHIBYTE(__p[3]) < 0)
                      operator delete(__p[1]);
                    if (__p[0])
                      os_release(__p[0]);
                    if (v263 && *(_QWORD *)(v263 + 24))
                    {
                      v280 = _os_log_pack_size();
                      v281 = operator new(v280, (std::align_val_t)8uLL);
                      v282 = (_QWORD *)operator new();
                      *v282 = &off_24EC1F7F0;
                      v282[1] = 0;
                      v282[2] = 0;
                      v282[3] = v281;
                      *(_QWORD *)oslog = v281;
                      *(_QWORD *)&oslog[8] = v281;
                      *(_QWORD *)&oslog[16] = v282;
                      *(_QWORD *)&oslog[24] = 0;
                      *(_QWORD *)&oslog[32] = 0;
                      v283 = strlen((const char *)v264);
                      if (v283 > 0x7FFFFFFFFFFFFFF7)
                        sub_22316DBC0();
                      v284 = (void *)v283;
                      if (v283 >= 0x17)
                      {
                        v287 = (v283 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v283 | 7) != 0x17)
                          v287 = v283 | 7;
                        v288 = v287 + 1;
                        v285 = operator new(v287 + 1);
                        v1381[2] = (void *)(v288 | 0x8000000000000000);
                        v1381[0] = v285;
                        v1381[1] = v284;
                      }
                      else
                      {
                        HIBYTE(v1381[2]) = v283;
                        v285 = v1381;
                        if (!v283)
                          goto LABEL_470;
                      }
                      memcpy(v285, v264, (size_t)v284);
LABEL_470:
                      *((_BYTE *)v284 + (_QWORD)v285) = 0;
                      v289 = v1381[0];
                      v1432.__r_.__value_.__l.__data_ = (std::string::pointer)v1381[1];
                      *(std::string::size_type *)((char *)v1432.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v1381[1] + 7);
                      v290 = HIBYTE(v1381[2]);
                      v291 = operator new(0x38uLL);
                      v291[1] = 0;
                      v291[2] = 0;
                      v291[3] = off_24EC1FA48;
                      *v291 = &off_24EC1F9F8;
                      v292 = v1432.__r_.__value_.__r.__words[0];
                      v291[4] = v289;
                      v291[5] = v292;
                      *(_QWORD *)((char *)v291 + 47) = *(std::string::size_type *)((char *)v1432.__r_.__value_.__r.__words
                                                                                 + 7);
                      *((_BYTE *)v291 + 55) = v290;
                      v1432.__r_.__value_.__r.__words[0] = 0;
                      *(std::string::size_type *)((char *)v1432.__r_.__value_.__r.__words + 7) = 0;
                      v293 = *(std::__shared_weak_count **)&oslog[32];
                      *(_QWORD *)&oslog[24] = v291 + 3;
                      *(_QWORD *)&oslog[32] = v291;
                      if (v293)
                      {
                        v294 = (unint64_t *)&v293->__shared_owners_;
                        do
                          v295 = __ldaxr(v294);
                        while (__stlxr(v295 - 1, v294));
                        if (!v295)
                        {
                          ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
                          std::__shared_weak_count::__release_weak(v293);
                        }
                      }
                      *(_OWORD *)__p = *(_OWORD *)oslog;
                      v296 = *(void **)&oslog[24];
                      __p[2] = *(void **)&oslog[16];
                      if (*(_QWORD *)&oslog[16])
                      {
                        v297 = (unint64_t *)(*(_QWORD *)&oslog[16] + 8);
                        do
                          v298 = __ldxr(v297);
                        while (__stxr(v298 + 1, v297));
                      }
                      v299 = *(std::__shared_weak_count **)&oslog[32];
                      __p[3] = v296;
                      __p[4] = *(void **)&oslog[32];
                      if (*(_QWORD *)&oslog[32])
                      {
                        v300 = (unint64_t *)(*(_QWORD *)&oslog[32] + 8);
                        do
                          v301 = __ldxr(v300);
                        while (__stxr(v301 + 1, v300));
                        __p[5] = v296;
                        do
                          v302 = __ldaxr(v300);
                        while (__stlxr(v302 - 1, v300));
                        if (!v302)
                        {
                          ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
                          std::__shared_weak_count::__release_weak(v299);
                        }
                      }
                      else
                      {
                        __p[5] = v296;
                      }
                      v303 = *(std::__shared_weak_count **)&oslog[16];
                      if (*(_QWORD *)&oslog[16])
                      {
                        v304 = (unint64_t *)(*(_QWORD *)&oslog[16] + 8);
                        do
                          v305 = __ldaxr(v304);
                        while (__stlxr(v305 - 1, v304));
                        if (!v305)
                        {
                          ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
                          std::__shared_weak_count::__release_weak(v303);
                        }
                      }
                      v306 = __p[0];
                      if (*((char *)__p[5] + 31) >= 0)
                        v307 = (char *)__p[5] + 8;
                      else
                        v307 = (char *)*((_QWORD *)__p[5] + 1);
                      v308 = _os_log_pack_fill();
                      *(_DWORD *)v308 = 136315138;
                      *(_QWORD *)(v308 + 4) = v307;
                      v309 = operator new();
                      v310 = *(unsigned __int8 *)(v1333 + 39);
                      v311 = *(char **)(v1333 + 16);
                      v312 = *(_QWORD *)(v1333 + 24);
                      v313 = *(_OWORD *)&__p[3];
                      *(_OWORD *)(v309 + 8) = *(_OWORD *)&__p[1];
                      if ((v310 & 0x80u) != 0)
                        v310 = v312;
                      else
                        v311 = __sb;
                      *(_QWORD *)v309 = v306;
                      __p[1] = 0;
                      __p[2] = 0;
                      *(_OWORD *)(v309 + 24) = v313;
                      __p[3] = 0;
                      __p[4] = 0;
                      *(_QWORD *)(v309 + 40) = v311;
                      *(_QWORD *)(v309 + 48) = v310;
                      *(_BYTE *)(v309 + 56) = 1;
                      v1381[0] = 0;
                      *(_QWORD *)oslog = v309;
                      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v263 + 24) + 40))(*(_QWORD *)(v263 + 24), oslog);
                      v314 = *(_QWORD *)oslog;
                      *(_QWORD *)oslog = 0;
                      if (v314)
                      {
                        v315 = *(std::__shared_weak_count **)(v314 + 32);
                        if (v315)
                        {
                          v316 = (unint64_t *)&v315->__shared_owners_;
                          do
                            v317 = __ldaxr(v316);
                          while (__stlxr(v317 - 1, v316));
                          if (!v317)
                          {
                            ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
                            std::__shared_weak_count::__release_weak(v315);
                          }
                        }
                        v318 = *(std::__shared_weak_count **)(v314 + 16);
                        if (v318)
                        {
                          v319 = (unint64_t *)&v318->__shared_owners_;
                          do
                            v320 = __ldaxr(v319);
                          while (__stlxr(v320 - 1, v319));
                          if (!v320)
                          {
                            ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
                            std::__shared_weak_count::__release_weak(v318);
                          }
                        }
                        MEMORY[0x227684CE8](v314, 0x10F0C40B62ED6C6);
                        v321 = v1381[0];
                        v1381[0] = 0;
                        if (v321)
                        {
                          v322 = (std::__shared_weak_count *)*((_QWORD *)v321 + 4);
                          if (v322)
                          {
                            v323 = (unint64_t *)&v322->__shared_owners_;
                            do
                              v324 = __ldaxr(v323);
                            while (__stlxr(v324 - 1, v323));
                            if (!v324)
                            {
                              ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
                              std::__shared_weak_count::__release_weak(v322);
                            }
                          }
                          v325 = (std::__shared_weak_count *)*((_QWORD *)v321 + 2);
                          if (v325)
                          {
                            v326 = (unint64_t *)&v325->__shared_owners_;
                            do
                              v327 = __ldaxr(v326);
                            while (__stlxr(v327 - 1, v326));
                            if (!v327)
                            {
                              ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
                              std::__shared_weak_count::__release_weak(v325);
                            }
                          }
                          MEMORY[0x227684CE8](v321, 0x10F0C40B62ED6C6);
                        }
                      }
                      v328 = (std::__shared_weak_count *)__p[4];
                      if (__p[4])
                      {
                        v329 = (unint64_t *)((char *)__p[4] + 8);
                        do
                          v330 = __ldaxr(v329);
                        while (__stlxr(v330 - 1, v329));
                        if (!v330)
                        {
                          ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
                          std::__shared_weak_count::__release_weak(v328);
                        }
                      }
                      v331 = (std::__shared_weak_count *)__p[2];
                      if (__p[2])
                      {
                        v332 = (unint64_t *)((char *)__p[2] + 8);
                        do
                          v333 = __ldaxr(v332);
                        while (__stlxr(v333 - 1, v332));
                        if (!v333)
                        {
                          ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
                          std::__shared_weak_count::__release_weak(v331);
                        }
                      }
                    }
                    else
                    {
                      os_log_type_enabled(v279, OS_LOG_TYPE_INFO);
                      LODWORD(__p[0]) = 136315138;
                      *(void **)((char *)__p + 4) = v264;
                      v286 = (void *)_os_log_send_and_compose_impl();
                      if (v286)
                        free(v286);
                    }
                    operator delete(v264);
                    if (v261)
                    {
                      sub_2245664AC(&v1430[4], __p);
                      v334 = operator new(0x28uLL);
                      v335 = *(_OWORD *)&__p[2];
                      *v334 = *(_OWORD *)__p;
                      v334[1] = v335;
                      *((_DWORD *)v334 + 8) = __p[4];
                      *((_BYTE *)v334 + 36) = 0;
                      sub_22322C138((uint64_t)object, "RoomBoundaryIdentification: Recovering a previously removed room, id %s", (const char *)v334);
                      operator delete(v334);
                      sub_223182C08((uint64_t)object);
                    }
                    sub_223182C08((uint64_t)object);
                    v336 = v1442;
                    if (v1442)
                    {
                      v337 = (unint64_t *)&v1442->__shared_owners_;
                      do
                        v338 = __ldaxr(v337);
                      while (__stlxr(v338 - 1, v337));
                      if (!v338)
                      {
                        ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
                        std::__shared_weak_count::__release_weak(v336);
                      }
                    }
                    goto LABEL_537;
                  }
                }
                memmove(v276, v267, v268);
                goto LABEL_451;
              }
            }
            memmove(v273, v271, v272);
            goto LABEL_443;
          }
        }
LABEL_537:
        v339 = (__int128 *)(sub_22342DA5C(v1355, (uint64_t)&v1430[4]) + 4);
        sub_223B7EA98((uint64_t)v1353, (uint64_t)v339, v339, v339);
        v340 = sub_22342DA5C(v1355, (uint64_t)v339);
        if (v340)
        {
          sub_2237382CC((uint64_t)__p, v1355, v340);
          v341 = __p[0];
          if (__p[0])
          {
            if (LOBYTE(__p[2]))
              sub_22388925C((uint64_t)__p[0] + 64);
            operator delete(v341);
          }
        }
LABEL_542:
        v342 = sub_22342DA5C(v1353, (uint64_t)&v1430[4]);
        v343 = *(_DWORD *)v1430;
        v344 = *a2;
        v345 = *a2 + 464 * *(unsigned int *)v1430;
        v346 = sub_223B7EE5C((uint64_t *)v345) * *(float *)(v345 + 100);
        v347 = sub_223B7EE5C(v342 + 8) * *((float *)v342 + 41);
        v348 = fmaxf((float)(v346 + v347) - (float)(*(float *)&v1430[20] + *(float *)&v1430[20]), 0.0);
        *((float *)v342 + 15) = v348;
        v349 = fabsf(v348);
        *((float *)v1372 + 1) = *((float *)v1372 + 1) + v349;
        *(float *)v1372 = *(float *)v1372 + v346;
        if (*(_DWORD *)(v344 + 464 * v343 + 448))
        {
          *((float *)&v1371 + 1) = v349 + *((float *)&v1371 + 1);
          *(float *)&v1371 = *(float *)&v1371 + v346;
        }
        sub_223B78024((uint64_t)(v342 + 8), v345);
        j = 0xF0F0F0F0F0F0F0F1;
        sub_223A1AA44((uint64_t)v1365, (unsigned int *)v1430, v1430);
        sub_223340BF8((uint64_t)v1368, (uint64_t)&v1430[4], &v1430[4]);
        v351 = v99[1];
        v350 = (unint64_t)v99[2];
        if ((unint64_t)v351 >= v350)
        {
          v353 = *v99;
          v354 = 0xF0F0F0F0F0F0F0F1 * ((v351 - (_BYTE *)*v99) >> 1);
          v355 = v354 + 1;
          if (v354 + 1 > 0x787878787878787)
            sub_22316E078();
          v356 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v350 - (_QWORD)v353) >> 1);
          if (2 * v356 > v355)
            v355 = 2 * v356;
          if (v356 >= 0x3C3C3C3C3C3C3C3)
            j = 0x787878787878787;
          else
            j = v355;
          if (j > 0x787878787878787)
            sub_223174E94();
          v357 = (char *)operator new(34 * j);
          v358 = &v357[34 * v354];
          *v358 = 1;
          *(_OWORD *)(v358 + 1) = *(_OWORD *)&v1430[4];
          v358[17] = 0;
          v358[33] = 0;
          if (v351 == v353)
          {
            v352 = v358 + 34;
            *v99 = v358;
            v99[1] = v358 + 34;
            v99[2] = &v357[34 * j];
            if (!v353)
              goto LABEL_558;
          }
          else
          {
            v359 = &v357[34 * v354];
            do
            {
              v360 = *(_OWORD *)(v351 - 34);
              v361 = *(_OWORD *)(v351 - 18);
              v362 = v359 - 34;
              *((_WORD *)v359 - 1) = *((_WORD *)v351 - 1);
              *(_OWORD *)(v359 - 18) = v361;
              *(_OWORD *)(v359 - 34) = v360;
              v351 -= 34;
              v359 -= 34;
            }
            while (v351 != v353);
            v352 = v358 + 34;
            *v99 = v362;
            v99[1] = v358 + 34;
            v99[2] = &v357[34 * j];
            if (!v353)
              goto LABEL_558;
          }
          operator delete(v353);
        }
        else
        {
          *v351 = 1;
          *(_OWORD *)(v351 + 1) = *(_OWORD *)&v1430[4];
          v351[17] = 0;
          v351[33] = 0;
          v352 = v351 + 34;
        }
LABEL_558:
        v98 = v98 + (float)(v346 - v347);
        v99[1] = v352;
        if (v1366[1] == (void *)(0x34F72C234F72C235 * ((a2[1] - *a2) >> 4)))
          break;
      }
      else
      {
        sub_223B6C304(&v1375);
        if (**(int **)(v1375 + 56) <= 5)
        {
          v184 = *(unsigned __int8 *)(v1375 + 72);
          v185 = sub_22322F254(v1375, "OSLogSurrogateAppender", 1, 0);
          v186 = v185;
          if (v184 || v185)
          {
            sub_223195210((uint64_t)__p);
            sub_2231813E8(&__p[2], (uint64_t)"RoomBoundaryIdentification: Unknown room id in similarity", 57);
            __sa = v184;
            if ((v1392 & 0x10) != 0)
            {
              v189 = (_BYTE *)*((_QWORD *)&v1391 + 1);
              v190 = (const void **)&v1388;
              if (*((_QWORD *)&v1391 + 1) < *((_QWORD *)&v1388 + 1))
              {
                *((_QWORD *)&v1391 + 1) = *((_QWORD *)&v1388 + 1);
                v189 = (_BYTE *)*((_QWORD *)&v1388 + 1);
                v190 = (const void **)&v1388;
              }
            }
            else
            {
              if ((v1392 & 8) == 0)
              {
                v187 = 0;
                v1429[23] = 0;
                v188 = v1429;
                goto LABEL_294;
              }
              v189 = __p[7];
              v190 = (const void **)&__p[5];
            }
            v191 = *v190;
            v187 = v189 - (_BYTE *)*v190;
            if (v187 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v187 >= 0x17)
            {
              v192 = (v187 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v187 | 7) != 0x17)
                v192 = v187 | 7;
              v193 = v192 + 1;
              v188 = operator new(v192 + 1);
              *(_QWORD *)&v1429[16] = v193 | 0x8000000000000000;
              *(_QWORD *)v1429 = v188;
              *(_QWORD *)&v1429[8] = v187;
LABEL_293:
              memmove(v188, v191, v187);
              goto LABEL_294;
            }
            v1429[23] = (_BYTE)v189 - *(_BYTE *)v190;
            v188 = v1429;
            if (v187)
              goto LABEL_293;
LABEL_294:
            v188[v187] = 0;
            *(_QWORD *)oslog = &v1375;
            *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
            *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
            *(_DWORD *)&oslog[24] = 5;
            *(_QWORD *)&oslog[32] = "unknown file";
            LODWORD(v1434) = 370;
            v1435 = "unknown function";
            v1436 = 0;
            v1437 = 0;
            if (v1429[23] >= 0)
              v194 = v1429;
            else
              v194 = *(const char **)v1429;
            v195 = **(_QWORD **)oslog;
            v196 = (const char *)(**(_QWORD **)oslog + 16);
            v1329 = **(_QWORD **)oslog;
            v1332 = v196;
            if (*(char *)(**(_QWORD **)oslog + 39) < 0)
            {
              v196 = *(const char **)(v195 + 16);
              v197 = *(_QWORD *)(v195 + 24);
              v199 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v199 & 1) != 0)
                goto LABEL_301;
            }
            else
            {
              v197 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
              v198 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v198 & 1) != 0)
                goto LABEL_301;
            }
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)v1381);
              sub_223199C58("com.apple.cv3d", (unint64_t)v1381, byte_255788F40);
              if (LOBYTE(v1381[3]) && SHIBYTE(v1381[2]) < 0)
                operator delete(v1381[0]);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
LABEL_301:
            if (byte_255788F40[23] >= 0)
              v200 = byte_255788F40;
            else
              v200 = *(const char **)byte_255788F40;
            if (byte_255788F40[23] >= 0)
              v201 = byte_255788F40[23];
            else
              v201 = *(_QWORD *)&byte_255788F40[8];
            *(_QWORD *)object = os_log_create(v200, v196);
            if (v201 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v201 >= 0x17)
            {
              v203 = (v201 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v201 | 7) != 0x17)
                v203 = v201 | 7;
              v204 = v203 + 1;
              v202 = operator new(v203 + 1);
              *(_QWORD *)&object[24] = v204 | 0x8000000000000000;
              *(_QWORD *)&object[8] = v202;
              *(_QWORD *)&object[16] = v201;
LABEL_314:
              memmove(v202, v200, v201);
              goto LABEL_315;
            }
            object[31] = v201;
            v202 = &object[8];
            if (v201)
              goto LABEL_314;
LABEL_315:
            v202[v201] = 0;
            object[32] = 1;
            if (v197 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v99 = v1349;
            if (v197 >= 0x17)
            {
              v206 = (v197 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v197 | 7) != 0x17)
                v206 = v197 | 7;
              v207 = v206 + 1;
              j = (unint64_t)operator new(v206 + 1);
              v1441 = v207 | 0x8000000000000000;
              v1439 = (void *)j;
              v1440 = (const char *)v197;
            }
            else
            {
              HIBYTE(v1441) = v197;
              j = (unint64_t)&v1439;
              if (!v197)
              {
                LOBYTE(v1439) = 0;
                LOBYTE(v1442) = 1;
                v205 = *(NSObject **)object;
                if ((SHIBYTE(v1441) & 0x80000000) == 0)
                  goto LABEL_319;
                goto LABEL_325;
              }
            }
            memmove((void *)j, v196, v197);
            *(_BYTE *)(j + v197) = 0;
            LOBYTE(v1442) = 1;
            v205 = *(NSObject **)object;
            if ((SHIBYTE(v1441) & 0x80000000) == 0)
            {
LABEL_319:
              if (!object[32])
                goto LABEL_328;
              goto LABEL_326;
            }
LABEL_325:
            operator delete(v1439);
            if (!object[32])
              goto LABEL_328;
LABEL_326:
            if ((object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
LABEL_328:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (!v186 || !*(_QWORD *)(v186 + 24))
            {
              os_log_type_enabled(v205, OS_LOG_TYPE_ERROR);
              *(_DWORD *)object = 136315138;
              *(_QWORD *)&object[4] = v194;
              v214 = (void *)_os_log_send_and_compose_impl();
              if (!v214)
                goto LABEL_400;
              free(v214);
              if (!__sa)
                goto LABEL_404;
              goto LABEL_401;
            }
            v208 = _os_log_pack_size();
            v209 = operator new(v208, (std::align_val_t)8uLL);
            v210 = (_QWORD *)operator new();
            *v210 = &off_24EC1F7F0;
            v210[1] = 0;
            v210[2] = 0;
            v210[3] = v209;
            v1381[0] = v209;
            v1381[1] = v209;
            v1381[2] = v210;
            v1381[3] = 0;
            v1382 = 0;
            v211 = strlen(v194);
            if (v211 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v212 = v211;
            if (v211 >= 0x17)
            {
              v215 = (v211 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v211 | 7) != 0x17)
                v215 = v211 | 7;
              v216 = v215 + 1;
              v213 = (std::string *)operator new(v215 + 1);
              v1432.__r_.__value_.__r.__words[2] = v216 | 0x8000000000000000;
              v1432.__r_.__value_.__r.__words[0] = (std::string::size_type)v213;
              v1432.__r_.__value_.__l.__size_ = v212;
LABEL_342:
              memcpy(v213, v194, v212);
              goto LABEL_343;
            }
            *((_BYTE *)&v1432.__r_.__value_.__s + 23) = v211;
            v213 = &v1432;
            if (v211)
              goto LABEL_342;
LABEL_343:
            v213->__r_.__value_.__s.__data_[v212] = 0;
            v1379[0] = (void *)v1432.__r_.__value_.__l.__size_;
            v217 = v1432.__r_.__value_.__r.__words[0];
            *(void **)((char *)v1379 + 7) = *(void **)((char *)&v1432.__r_.__value_.__r.__words[1] + 7);
            v218 = HIBYTE(v1432.__r_.__value_.__r.__words[2]);
            v219 = (char *)operator new(0x38uLL);
            *((_QWORD *)v219 + 1) = 0;
            *((_QWORD *)v219 + 2) = 0;
            *((_QWORD *)v219 + 3) = off_24EC1FA48;
            *(_QWORD *)v219 = &off_24EC1F9F8;
            v220 = v1379[0];
            *((_QWORD *)v219 + 4) = v217;
            *((_QWORD *)v219 + 5) = v220;
            *(void **)(v219 + 47) = *(void **)((char *)v1379 + 7);
            v219[55] = v218;
            v1379[0] = 0;
            *(void **)((char *)v1379 + 7) = 0;
            v221 = (std::__shared_weak_count *)v1382;
            v1381[3] = v219 + 24;
            v1382 = v219;
            if (v221)
            {
              v222 = (unint64_t *)&v221->__shared_owners_;
              do
                v223 = __ldaxr(v222);
              while (__stlxr(v223 - 1, v222));
              if (!v223)
              {
                ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                std::__shared_weak_count::__release_weak(v221);
              }
            }
            *(_OWORD *)object = *(_OWORD *)v1381;
            v224 = v1381[3];
            *(void **)&object[16] = v1381[2];
            if (v1381[2])
            {
              v225 = (unint64_t *)((char *)v1381[2] + 8);
              do
                v226 = __ldxr(v225);
              while (__stxr(v226 + 1, v225));
            }
            v227 = (std::__shared_weak_count *)v1382;
            *(_QWORD *)&object[24] = v224;
            *(_QWORD *)&object[32] = v1382;
            if (v1382)
            {
              v228 = (unint64_t *)(v1382 + 8);
              do
                v229 = __ldxr(v228);
              while (__stxr(v229 + 1, v228));
              v1439 = v224;
              do
                v230 = __ldaxr(v228);
              while (__stlxr(v230 - 1, v228));
              if (!v230)
              {
                ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                std::__shared_weak_count::__release_weak(v227);
              }
            }
            else
            {
              v1439 = v224;
            }
            v231 = (std::__shared_weak_count *)v1381[2];
            if (v1381[2])
            {
              v232 = (unint64_t *)((char *)v1381[2] + 8);
              do
                v233 = __ldaxr(v232);
              while (__stlxr(v233 - 1, v232));
              if (!v233)
              {
                ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                std::__shared_weak_count::__release_weak(v231);
              }
            }
            j = *(_QWORD *)object;
            if (*((char *)v1439 + 31) >= 0)
              v234 = (char *)v1439 + 8;
            else
              v234 = (char *)*((_QWORD *)v1439 + 1);
            v235 = _os_log_pack_fill();
            *(_DWORD *)v235 = 136315138;
            *(_QWORD *)(v235 + 4) = v234;
            v236 = (char *)operator new();
            v237 = *(unsigned __int8 *)(v1329 + 39);
            v238 = v1332;
            if ((v237 & 0x80u) != 0)
            {
              v238 = *(const char **)(v1329 + 16);
              v237 = *(_QWORD *)(v1329 + 24);
            }
            *(_QWORD *)v236 = j;
            *(_OWORD *)(v236 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v236 + 24) = *(_OWORD *)&object[24];
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            *((_QWORD *)v236 + 5) = v238;
            *((_QWORD *)v236 + 6) = v237;
            v236[56] = 16;
            v1432.__r_.__value_.__r.__words[0] = 0;
            v1381[0] = v236;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v186 + 24) + 40))(*(_QWORD *)(v186 + 24), v1381);
            v239 = v1381[0];
            v1381[0] = 0;
            if (v239)
            {
              v240 = (std::__shared_weak_count *)*((_QWORD *)v239 + 4);
              if (v240)
              {
                v241 = (unint64_t *)&v240->__shared_owners_;
                do
                  v242 = __ldaxr(v241);
                while (__stlxr(v242 - 1, v241));
                if (!v242)
                {
                  ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                  std::__shared_weak_count::__release_weak(v240);
                }
              }
              j = *((_QWORD *)v239 + 2);
              if (j)
              {
                v243 = (unint64_t *)(j + 8);
                do
                  v244 = __ldaxr(v243);
                while (__stlxr(v244 - 1, v243));
                if (!v244)
                {
                  (*(void (**)(unint64_t))(*(_QWORD *)j + 16))(j);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)j);
                }
              }
              MEMORY[0x227684CE8](v239, 0x10F0C40B62ED6C6);
              v245 = v1432.__r_.__value_.__r.__words[0];
              v1432.__r_.__value_.__r.__words[0] = 0;
              if (v245)
              {
                v246 = *(std::__shared_weak_count **)(v245 + 32);
                if (v246)
                {
                  v247 = (unint64_t *)&v246->__shared_owners_;
                  do
                    v248 = __ldaxr(v247);
                  while (__stlxr(v248 - 1, v247));
                  if (!v248)
                  {
                    ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                    std::__shared_weak_count::__release_weak(v246);
                  }
                }
                j = *(_QWORD *)(v245 + 16);
                if (j)
                {
                  v249 = (unint64_t *)(j + 8);
                  do
                    v250 = __ldaxr(v249);
                  while (__stlxr(v250 - 1, v249));
                  if (!v250)
                  {
                    (*(void (**)(unint64_t))(*(_QWORD *)j + 16))(j);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)j);
                  }
                }
                MEMORY[0x227684CE8](v245, 0x10F0C40B62ED6C6);
              }
            }
            v251 = *(std::__shared_weak_count **)&object[32];
            if (!*(_QWORD *)&object[32])
              goto LABEL_396;
            v252 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v253 = __ldaxr(v252);
            while (__stlxr(v253 - 1, v252));
            if (!v253)
            {
              ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
              std::__shared_weak_count::__release_weak(v251);
              v254 = *(std::__shared_weak_count **)&object[16];
              if (!*(_QWORD *)&object[16])
                goto LABEL_400;
            }
            else
            {
LABEL_396:
              v254 = *(std::__shared_weak_count **)&object[16];
              if (!*(_QWORD *)&object[16])
                goto LABEL_400;
            }
            v255 = (unint64_t *)&v254->__shared_owners_;
            do
              v256 = __ldaxr(v255);
            while (__stlxr(v256 - 1, v255));
            if (v256)
            {
LABEL_400:
              if (!__sa)
                goto LABEL_404;
              goto LABEL_401;
            }
            ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
            std::__shared_weak_count::__release_weak(v254);
            if (!__sa)
              goto LABEL_404;
LABEL_401:
            v257 = v1429;
            if (v1429[23] < 0)
              v257 = *(const char **)v1429;
            sub_22322C138((uint64_t)oslog, "%s", v257);
            sub_223182C08((uint64_t)oslog);
LABEL_404:
            sub_223182C08((uint64_t)oslog);
            v258 = v1437;
            if (!v1437)
              goto LABEL_408;
            v259 = (unint64_t *)&v1437->__shared_owners_;
            do
              v260 = __ldaxr(v259);
            while (__stlxr(v260 - 1, v259));
            if (v260)
            {
LABEL_408:
              if ((v1429[23] & 0x80000000) == 0)
                goto LABEL_410;
LABEL_409:
              operator delete(*(void **)v1429);
              goto LABEL_410;
            }
            ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
            std::__shared_weak_count::__release_weak(v258);
            if ((v1429[23] & 0x80000000) != 0)
              goto LABEL_409;
LABEL_410:
            __p[0] = v1344;
            *(void **)((char *)__p + *((_QWORD *)v1344 - 3)) = v1343;
            __p[2] = v1345;
            __p[3] = v1325;
            if (SBYTE7(v1391) < 0)
              operator delete(*((void **)&v1389 + 1));
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x227684BE0]((char *)&v1392 + 8);
          }
        }
      }
    }
  }
  v363 = v1359;
  v364 = *(uint64_t **)(v1360 + 56);
  if (v364)
  {
    v1327 = (void *)(MEMORY[0x24BEDB848] + 16);
    while (1)
    {
      while (1)
      {
        v365 = v364 + 2;
        if (!sub_223340F28(v1368, (uint64_t)(v364 + 2)))
          break;
        v364 = (uint64_t *)*v364;
        if (!v364)
          goto LABEL_847;
      }
      sub_223B6C304(&v1432);
      if (**(int **)(v1432.__r_.__value_.__r.__words[0] + 56) <= 3)
      {
        v366 = *(unsigned __int8 *)(v1432.__r_.__value_.__r.__words[0] + 72);
        v367 = sub_22322F254((uint64_t)v1432.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0);
        v368 = v367;
        if (v366 || v367 != 0)
          break;
      }
LABEL_688:
      v427 = v99[1];
      v426 = (unint64_t)v99[2];
      if ((unint64_t)v427 >= v426)
      {
        v429 = *v99;
        v430 = 0xF0F0F0F0F0F0F0F1 * ((v427 - (_BYTE *)*v99) >> 1);
        v431 = v430 + 1;
        if (v430 + 1 > 0x787878787878787)
          sub_22316E078();
        v432 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v426 - (_QWORD)v429) >> 1);
        if (2 * v432 > v431)
          v431 = 2 * v432;
        if (v432 >= 0x3C3C3C3C3C3C3C3)
          j = 0x787878787878787;
        else
          j = v431;
        if (j > 0x787878787878787)
          sub_223174E94();
        v433 = (char *)operator new(34 * j);
        v434 = &v433[34 * v430];
        *v434 = 3;
        *(_OWORD *)(v434 + 1) = *v365;
        v434[17] = 0;
        v434[33] = 0;
        if (v427 == v429)
        {
          v428 = v434 + 34;
          *v99 = v434;
          v99[1] = v434 + 34;
          v99[2] = &v433[34 * j];
          if (!v429)
            goto LABEL_702;
        }
        else
        {
          v435 = &v433[34 * v430];
          do
          {
            v436 = *(_OWORD *)(v427 - 34);
            v437 = *(_OWORD *)(v427 - 18);
            v438 = v435 - 34;
            *((_WORD *)v435 - 1) = *((_WORD *)v427 - 1);
            *(_OWORD *)(v435 - 18) = v437;
            *(_OWORD *)(v435 - 34) = v436;
            v427 -= 34;
            v435 -= 34;
          }
          while (v427 != v429);
          v428 = v434 + 34;
          *v99 = v438;
          v99[1] = v434 + 34;
          v99[2] = &v433[34 * j];
          if (!v429)
            goto LABEL_702;
        }
        operator delete(v429);
      }
      else
      {
        *v427 = 3;
        *(_OWORD *)(v427 + 1) = *v365;
        v427[17] = 0;
        v427[33] = 0;
        v428 = v427 + 34;
      }
LABEL_702:
      v99[1] = v428;
      v439 = sub_22456636C((unsigned __int8 *)v364 + 16);
      v440 = v439;
      v441 = *(_QWORD *)(v1360 + 88);
      if (v441)
      {
        v442 = (uint8x8_t)vcnt_s8((int8x8_t)v441);
        v442.i16[0] = vaddlv_u8(v442);
        if (v442.u32[0] > 1uLL)
        {
          j = v439;
          if (v439 >= v441)
            j = v439 % v441;
        }
        else
        {
          j = (v441 - 1) & v439;
        }
        v443 = *(_QWORD **)(*(_QWORD *)v1355 + 8 * j);
        if (v443)
        {
          v444 = (_QWORD *)*v443;
          if (v444)
          {
            if (v442.u32[0] < 2uLL)
            {
              while (1)
              {
                v448 = v444[1];
                if (v448 == v439)
                {
                  if (v444[2] == *(_QWORD *)v365 && v444[3] == v364[3])
                    goto LABEL_770;
                }
                else if ((v448 & (v441 - 1)) != j)
                {
                  goto LABEL_728;
                }
                v444 = (_QWORD *)*v444;
                if (!v444)
                  goto LABEL_728;
              }
            }
            do
            {
              v446 = v444[1];
              if (v446 == v439)
              {
                if (v444[2] == *(_QWORD *)v365 && v444[3] == v364[3])
                  goto LABEL_770;
              }
              else
              {
                if (v446 >= v441)
                  v446 %= v441;
                if (v446 != j)
                  break;
              }
              v444 = (_QWORD *)*v444;
            }
            while (v444);
          }
        }
      }
LABEL_728:
      v449 = operator new(0x210uLL);
      __p[0] = v449;
      __p[1] = v1346;
      LOBYTE(__p[2]) = 0;
      *v449 = 0;
      v449[1] = v440;
      *((_OWORD *)v449 + 1) = *v365;
      *((_OWORD *)v449 + 2) = *((_OWORD *)v364 + 2);
      v450 = *((_DWORD *)v364 + 14);
      v449[6] = v364[6];
      *((_DWORD *)v449 + 14) = v450;
      *((_DWORD *)v449 + 15) = *((_DWORD *)v364 + 15);
      sub_223B246DC(v449 + 8, v364 + 8);
      LOBYTE(__p[2]) = 1;
      v451 = (float)(unint64_t)(*(_QWORD *)(v1360 + 104) + 1);
      v452 = *(float *)(v1360 + 112);
      if (v441 && (float)(v452 * (float)v441) >= v451)
      {
        v453 = v1346 - 2;
        v454 = *(_QWORD **)(*(_QWORD *)v1355 + 8 * j);
        v455 = __p[0];
        if (!v454)
          goto LABEL_758;
      }
      else
      {
        v456 = v441 < 3 || (v441 & (v441 - 1)) != 0;
        v457 = v456 | (2 * v441);
        v458 = vcvtps_u32_f32(v451 / v452);
        if (v457 <= v458)
          prime = v458;
        else
          prime = v457;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
        }
        v460 = *(int8x8_t *)(v1360 + 88);
        if (prime > *(_QWORD *)&v460)
          goto LABEL_743;
        if (prime < *(_QWORD *)&v460)
        {
          v461 = vcvtps_u32_f32((float)*(unint64_t *)(v1360 + 104) / *(float *)(v1360 + 112));
          if (*(_QWORD *)&v460 < 3uLL
            || (v462 = (uint8x8_t)vcnt_s8(v460), v462.i16[0] = vaddlv_u8(v462), v462.u32[0] > 1uLL))
          {
            v461 = std::__next_prime(v461);
          }
          else
          {
            v463 = 1 << -(char)__clz(v461 - 1);
            if (v461 >= 2)
              v461 = v463;
          }
          if (prime <= v461)
            prime = v461;
          if (prime < *(_QWORD *)&v460)
LABEL_743:
            sub_2231B0668((uint64_t)v1355, prime);
        }
        v441 = *(_QWORD *)(v1360 + 88);
        v464 = v441 - 1;
        if ((v441 & (v441 - 1)) != 0)
        {
          if (v440 >= v441)
          {
            j = v440 % v441;
            v453 = v1346 - 2;
            v454 = *(_QWORD **)(*(_QWORD *)v1355 + 8 * (v440 % v441));
            v455 = __p[0];
            if (!v454)
            {
LABEL_758:
              *v455 = *v1346;
              *v1346 = __p[0];
              *(_QWORD *)(*v453 + 8 * j) = v1346;
              if (*(_QWORD *)__p[0])
              {
                v465 = *(_QWORD *)(*(_QWORD *)__p[0] + 8);
                if ((v441 & (v441 - 1)) != 0)
                {
                  if (v465 >= v441)
                    v465 %= v441;
                }
                else
                {
                  v465 &= v441 - 1;
                }
                *(void **)(*(_QWORD *)v1355 + 8 * v465) = __p[0];
              }
              goto LABEL_769;
            }
          }
          else
          {
            j = v440;
            v453 = v1346 - 2;
            v454 = *(_QWORD **)(*(_QWORD *)v1355 + 8 * v440);
            v455 = __p[0];
            if (!v454)
              goto LABEL_758;
          }
        }
        else
        {
          j = v464 & v440;
          v453 = v1346 - 2;
          v454 = *(_QWORD **)(*(_QWORD *)v1355 + 8 * (v464 & v440));
          v455 = __p[0];
          if (!v454)
            goto LABEL_758;
        }
      }
      *v455 = *v454;
      *v454 = __p[0];
LABEL_769:
      ++*(_QWORD *)(v1360 + 104);
LABEL_770:
      v466 = sub_223B7EE5C(v364 + 8) * *((float *)v364 + 41);
      *((float *)v1372 + 1) = *((float *)v1372 + 1) + v466;
      if (*((_DWORD *)v364 + 128))
        *((float *)&v1371 + 1) = *((float *)&v1371 + 1) + v466;
      __p[0] = "cv3d.recon.";
      __p[1] = (void *)11;
      __p[2] = "PRR.RoomBoundaryIdentification.Rooms.Keyframes";
      __p[3] = (void *)46;
      sub_2231A9820((uint64_t)__p, (uint64_t)&__p[4], 0, 0, (std::string *)oslog);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v467 = sub_2241471F8();
        v468 = v467[2];
        if (!v468)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v468 = v467[2];
        }
        v469 = *(_QWORD *)(v468 + 64);
        v470 = (std::mutex *)(v469 + 32);
        std::mutex::lock((std::mutex *)(v469 + 32));
        j = *(_QWORD *)(v469 + 96);
        v471 = *(_QWORD *)(v469 + 104);
        std::mutex::unlock(v470);
        if (j != v471)
        {
          v472 = oslog[23];
          v473 = *(_BYTE **)oslog;
          j = *(_QWORD *)&oslog[8];
          sub_2241471F8();
          v474 = v472 >= 0 ? oslog : v473;
          v475 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v474);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v475 + 24))(v475))
          {
            kdebug_trace();
            sub_2241498F4((uint64_t)__p, 0);
            sub_2245664AC((unsigned __int8 *)v364 + 16, object);
            j = (unint64_t)operator new(0x28uLL);
            v476 = *(_OWORD *)&object[16];
            *(_OWORD *)j = *(_OWORD *)object;
            *(_OWORD *)(j + 16) = v476;
            *(_DWORD *)(j + 32) = *(_DWORD *)&object[32];
            *(_BYTE *)(j + 36) = 0;
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v475 + 24))(v475))
            {
              *(_QWORD *)object = j;
              *(_OWORD *)&object[8] = xmmword_2245C4640;
              v1381[0] = (void *)(uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
              v1381[1] = (void *)2;
              v477 = sub_2241471F8();
              sub_223452794((uint64_t)v477, v475, (uint64_t)__p, (uint64_t)object, (__int128 *)v1381);
              if ((object[23] & 0x80000000) != 0)
              {
                v478 = *(void **)object;
                goto LABEL_785;
              }
            }
            else
            {
              v478 = (void *)j;
LABEL_785:
              operator delete(v478);
            }
            sub_22316F8F4((uint64_t *)__p);
            kdebug_trace();
          }
        }
      }
      kdebug_trace();
      v479 = oslog[23];
      if (oslog[23] < 0)
        v479 = *(_QWORD *)&oslog[8];
      if (v479 >= 0x11)
      {
        v480 = oslog;
        if (oslog[23] < 0)
          v480 = *(_BYTE **)oslog;
        v481 = *(_QWORD *)v480;
        v482 = *((_QWORD *)v480 + 1);
        v483 = v480[16];
        if (v481 == 0x6365722E64337663 && v482 == 0x73746174532E6E6FLL && v483 == 46)
        {
          sub_223187510();
          sub_2241498F4((uint64_t)__p, 0);
          sub_2245664AC((unsigned __int8 *)v364 + 16, object);
          sub_22316F8F4((uint64_t *)__p);
        }
      }
      kdebug_trace();
      if ((oslog[23] & 0x80000000) != 0)
        operator delete(*(void **)oslog);
      __p[0] = "cv3d.recon.";
      __p[1] = (void *)11;
      __p[2] = "ObservationMapping.Res.Rooms.Keyframes";
      __p[3] = (void *)38;
      sub_2231A9820((uint64_t)__p, (uint64_t)&__p[4], 0, 0, (std::string *)oslog);
      sub_224569D7C();
      sub_224569A80();
      if (!os_variant_has_internal_diagnostics())
        goto LABEL_818;
      v486 = sub_2241471F8();
      v487 = v486[2];
      if (!v487)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v487 = v486[2];
      }
      v488 = *(_QWORD *)(v487 + 64);
      v489 = (std::mutex *)(v488 + 32);
      std::mutex::lock((std::mutex *)(v488 + 32));
      j = *(_QWORD *)(v488 + 96);
      v490 = *(_QWORD *)(v488 + 104);
      std::mutex::unlock(v489);
      if (j == v490)
        goto LABEL_818;
      v491 = oslog[23];
      v492 = *(_BYTE **)oslog;
      j = *(_QWORD *)&oslog[8];
      sub_2241471F8();
      v493 = v491 >= 0 ? oslog : v492;
      v494 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v493);
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v494 + 24))(v494))
        goto LABEL_818;
      kdebug_trace();
      sub_2241498F4((uint64_t)__p, 0);
      sub_2245664AC((unsigned __int8 *)v364 + 16, object);
      j = (unint64_t)operator new(0x28uLL);
      v495 = *(_OWORD *)&object[16];
      *(_OWORD *)j = *(_OWORD *)object;
      *(_OWORD *)(j + 16) = v495;
      *(_DWORD *)(j + 32) = *(_DWORD *)&object[32];
      *(_BYTE *)(j + 36) = 0;
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v494 + 24))(v494))
      {
        v497 = (void *)j;
        goto LABEL_816;
      }
      *(_QWORD *)object = j;
      *(_OWORD *)&object[8] = xmmword_2245C4640;
      v1381[0] = (void *)(uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
      v1381[1] = (void *)2;
      v496 = sub_2241471F8();
      sub_223452794((uint64_t)v496, v494, (uint64_t)__p, (uint64_t)object, (__int128 *)v1381);
      if ((object[23] & 0x80000000) != 0)
      {
        v497 = *(void **)object;
LABEL_816:
        operator delete(v497);
      }
      sub_22316F8F4((uint64_t *)__p);
      kdebug_trace();
LABEL_818:
      kdebug_trace();
      v498 = oslog[23];
      if (oslog[23] < 0)
        v498 = *(_QWORD *)&oslog[8];
      if (v498 >= 0x11)
      {
        v499 = oslog;
        if (oslog[23] < 0)
          v499 = *(_BYTE **)oslog;
        v500 = *(_QWORD *)v499;
        v501 = *((_QWORD *)v499 + 1);
        v502 = v499[16];
        if (v500 == 0x6365722E64337663 && v501 == 0x73746174532E6E6FLL && v502 == 46)
        {
          sub_223187510();
          sub_2241498F4((uint64_t)__p, 0);
          sub_2245664AC((unsigned __int8 *)v364 + 16, object);
          sub_22316F8F4((uint64_t *)__p);
        }
      }
      kdebug_trace();
      if ((oslog[23] & 0x80000000) != 0)
        operator delete(*(void **)oslog);
      v505 = (uint64_t *)*v364;
      sub_2237382CC((uint64_t)__p, v1353, v364);
      v506 = __p[0];
      if (__p[0])
      {
        if (LOBYTE(__p[2]))
          sub_22388925C((uint64_t)__p[0] + 64);
        operator delete(v506);
      }
      v364 = v505;
      if (!v505)
        goto LABEL_847;
    }
    sub_223195210((uint64_t)__p);
    v370 = sub_2231813E8(&__p[2], (uint64_t)"RoomBoundaryIdentification: Removing room (no match in any of the areas) ", 73);
    sub_2245664AC((unsigned __int8 *)v364 + 16, object);
    sub_2231813E8(v370, (uint64_t)object, 36);
    if ((v1392 & 0x10) != 0)
    {
      v373 = (_BYTE *)*((_QWORD *)&v1391 + 1);
      v374 = (const void **)&v1388;
      if (*((_QWORD *)&v1391 + 1) < *((_QWORD *)&v1388 + 1))
      {
        *((_QWORD *)&v1391 + 1) = *((_QWORD *)&v1388 + 1);
        v373 = (_BYTE *)*((_QWORD *)&v1388 + 1);
        v374 = (const void **)&v1388;
      }
    }
    else
    {
      if ((v1392 & 8) == 0)
      {
        v371 = 0;
        v1430[23] = 0;
        v372 = v1430;
        goto LABEL_600;
      }
      v373 = __p[7];
      v374 = (const void **)&__p[5];
    }
    v375 = *v374;
    v371 = v373 - (_BYTE *)*v374;
    if (v371 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v371 >= 0x17)
    {
      v376 = (v371 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v371 | 7) != 0x17)
        v376 = v371 | 7;
      v377 = v376 + 1;
      v372 = operator new(v376 + 1);
      *(_QWORD *)&v1430[16] = v377 | 0x8000000000000000;
      *(_QWORD *)v1430 = v372;
      *(_QWORD *)&v1430[8] = v371;
      v99 = v1349;
    }
    else
    {
      v1430[23] = (_BYTE)v373 - *(_BYTE *)v374;
      v372 = v1430;
      if (!v371)
      {
LABEL_600:
        v372[v371] = 0;
        *(_QWORD *)oslog = &v1432;
        *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
        *(_DWORD *)&oslog[24] = 3;
        *(_QWORD *)&oslog[32] = "unknown file";
        LODWORD(v1434) = 424;
        v1435 = "unknown function";
        v1436 = 0;
        v1437 = 0;
        if (v1430[23] >= 0)
          v378 = v1430;
        else
          v378 = *(char **)v1430;
        v379 = **(_QWORD **)oslog;
        v1335 = **(_QWORD **)oslog;
        __sc = v378;
        if (*(char *)(**(_QWORD **)oslog + 39) < 0)
        {
          v381 = *(const char **)(v379 + 16);
          v380 = *(_QWORD *)(v379 + 24);
          v1334 = **(_QWORD **)oslog + 16;
          v383 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v383 & 1) != 0)
            goto LABEL_607;
        }
        else
        {
          v380 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
          v381 = (const char *)(**(_QWORD **)oslog + 16);
          v1334 = (uint64_t)v381;
          v382 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v382 & 1) != 0)
            goto LABEL_607;
        }
        if (__cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v1381);
          if (LOBYTE(v1381[3]))
          {
            *(_OWORD *)byte_255788F40 = *(_OWORD *)v1381;
            *(void **)&byte_255788F40[16] = v1381[2];
          }
          else
          {
            byte_255788F40[23] = 14;
            strcpy(byte_255788F40, "com.apple.cv3d");
          }
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
          v99 = v1349;
        }
LABEL_607:
        if (byte_255788F40[23] >= 0)
          v384 = byte_255788F40;
        else
          v384 = *(const char **)byte_255788F40;
        if (byte_255788F40[23] >= 0)
          v385 = byte_255788F40[23];
        else
          v385 = *(_QWORD *)&byte_255788F40[8];
        *(_QWORD *)object = os_log_create(v384, v381);
        if (v385 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v385 >= 0x17)
        {
          v386 = (v385 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v385 | 7) != 0x17)
            v386 = v385 | 7;
          v387 = v386 + 1;
          j = (unint64_t)operator new(v386 + 1);
          *(_QWORD *)&object[24] = v387 | 0x8000000000000000;
          *(_QWORD *)&object[8] = j;
          *(_QWORD *)&object[16] = v385;
          v99 = v1349;
        }
        else
        {
          object[31] = v385;
          j = (unint64_t)&object[8];
          if (!v385)
          {
LABEL_621:
            *(_BYTE *)(j + v385) = 0;
            object[32] = 1;
            if (v380 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v363 = v1359;
            if (v380 >= 0x17)
            {
              v390 = (v380 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v380 | 7) != 0x17)
                v390 = v380 | 7;
              j = v390 + 1;
              v388 = operator new(v390 + 1);
              v1441 = j | 0x8000000000000000;
              v1439 = v388;
              v1440 = (const char *)v380;
            }
            else
            {
              HIBYTE(v1441) = v380;
              v388 = &v1439;
              if (!v380)
              {
                LOBYTE(v1439) = 0;
                LOBYTE(v1442) = 1;
                v389 = *(NSObject **)object;
                if ((SHIBYTE(v1441) & 0x80000000) == 0)
                  goto LABEL_625;
                goto LABEL_631;
              }
            }
            memmove(v388, v381, v380);
            *((_BYTE *)v388 + v380) = 0;
            LOBYTE(v1442) = 1;
            v389 = *(NSObject **)object;
            if ((SHIBYTE(v1441) & 0x80000000) == 0)
            {
LABEL_625:
              if (!object[32])
                goto LABEL_634;
              goto LABEL_632;
            }
LABEL_631:
            operator delete(v1439);
            if (!object[32])
              goto LABEL_634;
LABEL_632:
            if ((object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
LABEL_634:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (!v368 || !*(_QWORD *)(v368 + 24))
            {
              os_log_type_enabled(v389, OS_LOG_TYPE_INFO);
              *(_DWORD *)object = 136315138;
              *(_QWORD *)&object[4] = __sc;
              v398 = (void *)_os_log_send_and_compose_impl();
              if (v398)
                free(v398);
LABEL_675:
              if (v366)
              {
                v422 = v1430;
                if (v1430[23] < 0)
                  v422 = *(const char **)v1430;
                sub_22322C138((uint64_t)oslog, "%s", v422);
                sub_223182C08((uint64_t)oslog);
              }
              sub_223182C08((uint64_t)oslog);
              v423 = v1437;
              if (!v1437)
                goto LABEL_683;
              v424 = (unint64_t *)&v1437->__shared_owners_;
              do
                v425 = __ldaxr(v424);
              while (__stlxr(v425 - 1, v424));
              if (!v425)
              {
                ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
                std::__shared_weak_count::__release_weak(v423);
                if ((v1430[23] & 0x80000000) == 0)
                  goto LABEL_685;
              }
              else
              {
LABEL_683:
                if ((v1430[23] & 0x80000000) == 0)
                {
LABEL_685:
                  __p[0] = v1344;
                  *(void **)((char *)__p + *((_QWORD *)v1344 - 3)) = v1343;
                  __p[2] = v1345;
                  __p[3] = v1327;
                  if (SBYTE7(v1391) < 0)
                    operator delete(*((void **)&v1389 + 1));
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x227684BE0]((char *)&v1392 + 8);
                  goto LABEL_688;
                }
              }
              operator delete(*(void **)v1430);
              goto LABEL_685;
            }
            v391 = _os_log_pack_size();
            v392 = (std::__shared_weak_count_vtbl *)operator new(v391, (std::align_val_t)8uLL);
            v393 = (std::__shared_weak_count *)operator new();
            v393->__shared_owners_ = 0;
            v394 = (unint64_t *)&v393->__shared_owners_;
            v393->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v393->__shared_weak_owners_ = 0;
            v393[1].__vftable = v392;
            __dst = v393;
            v395 = strlen(__sc);
            if (v395 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v396 = v395;
            v1323 = v392;
            if (v395 >= 0x17)
            {
              v399 = (v395 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v395 | 7) != 0x17)
                v399 = v395 | 7;
              v400 = v399 + 1;
              v397 = operator new(v399 + 1);
              *(_QWORD *)&object[16] = v400 | 0x8000000000000000;
              *(_QWORD *)object = v397;
              *(_QWORD *)&object[8] = v396;
            }
            else
            {
              object[23] = v395;
              v397 = object;
              if (!v395)
              {
LABEL_648:
                __sd = v366;
                v397[v396] = 0;
                v401 = *(_QWORD *)object;
                v1381[0] = *(void **)&object[8];
                *(void **)((char *)v1381 + 7) = *(void **)&object[15];
                v402 = object[23];
                v403 = (char *)operator new(0x38uLL);
                v404 = (std::__shared_weak_count *)v403;
                *((_QWORD *)v403 + 1) = 0;
                v405 = (unint64_t *)(v403 + 8);
                *((_QWORD *)v403 + 2) = 0;
                *((_QWORD *)v403 + 3) = off_24EC1FA48;
                v406 = v403 + 24;
                *((_QWORD *)v403 + 4) = v401;
                v407 = v403 + 32;
                *(_QWORD *)v403 = &off_24EC1F9F8;
                *((void **)v403 + 5) = v1381[0];
                *(void **)(v403 + 47) = *(void **)((char *)v1381 + 7);
                v403[55] = v402;
                do
                  v408 = __ldxr(v394);
                while (__stxr(v408 + 1, v394));
                v99 = v1349;
                do
                  v409 = __ldxr(v405);
                while (__stxr(v409 + 1, v405));
                do
                  v410 = __ldaxr(v405);
                while (__stlxr(v410 - 1, v405));
                if (!v410)
                {
                  (*(void (**)(char *))(*(_QWORD *)v403 + 16))(v403);
                  std::__shared_weak_count::__release_weak(v404);
                }
                do
                  v411 = __ldaxr(v394);
                while (__stlxr(v411 - 1, v394));
                if (!v411)
                {
                  ((void (*)(std::__shared_weak_count *))__dst->__on_zero_shared)(__dst);
                  std::__shared_weak_count::__release_weak(__dst);
                }
                if (SHIBYTE(v404[2].__vftable) >= 0)
                  j = (unint64_t)v407;
                else
                  j = v404[1].__shared_owners_;
                v412 = _os_log_pack_fill();
                *(_DWORD *)v412 = 136315138;
                *(_QWORD *)(v412 + 4) = j;
                v413 = operator new();
                v414 = *(unsigned __int8 *)(v1335 + 39);
                v415 = v1334;
                if ((v414 & 0x80u) != 0)
                {
                  v415 = *(_QWORD *)(v1335 + 16);
                  v414 = *(_QWORD *)(v1335 + 24);
                }
                *(_QWORD *)v413 = v1323;
                *(_QWORD *)(v413 + 8) = v1323;
                *(_QWORD *)(v413 + 16) = __dst;
                *(_QWORD *)(v413 + 24) = v406;
                *(_QWORD *)(v413 + 32) = v404;
                *(_QWORD *)(v413 + 40) = v415;
                *(_QWORD *)(v413 + 48) = v414;
                *(_BYTE *)(v413 + 56) = 1;
                *(_QWORD *)object = v413;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v368 + 24) + 40))(*(_QWORD *)(v368 + 24), object);
                v416 = *(_QWORD *)object;
                *(_QWORD *)object = 0;
                v363 = v1359;
                v366 = __sd;
                if (v416)
                {
                  v417 = *(std::__shared_weak_count **)(v416 + 32);
                  if (v417)
                  {
                    v418 = (unint64_t *)&v417->__shared_owners_;
                    do
                      v419 = __ldaxr(v418);
                    while (__stlxr(v419 - 1, v418));
                    if (!v419)
                    {
                      ((void (*)(std::__shared_weak_count *))v417->__on_zero_shared)(v417);
                      std::__shared_weak_count::__release_weak(v417);
                    }
                  }
                  j = *(_QWORD *)(v416 + 16);
                  if (j)
                  {
                    v420 = (unint64_t *)(j + 8);
                    do
                      v421 = __ldaxr(v420);
                    while (__stlxr(v421 - 1, v420));
                    if (!v421)
                    {
                      (*(void (**)(unint64_t))(*(_QWORD *)j + 16))(j);
                      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)j);
                    }
                  }
                  MEMORY[0x227684CE8](v416, 0x10F0C40B62ED6C6);
                }
                goto LABEL_675;
              }
            }
            memcpy(v397, __sc, v396);
            goto LABEL_648;
          }
        }
        memmove((void *)j, v384, v385);
        goto LABEL_621;
      }
    }
    memmove(v372, v375, v371);
    goto LABEL_600;
  }
LABEL_847:
  v507 = a2[1] - *a2;
  if (v507)
  {
    v508 = 0;
    v509 = 0x34F72C234F72C235 * (v507 >> 4);
    v1322 = (void *)(MEMORY[0x24BEDB848] + 16);
    v1347 = v509;
    v1359 = v363;
    while (1)
    {
      if (v1365[1])
      {
        v511 = (uint8x8_t)vcnt_s8((int8x8_t)v1365[1]);
        v511.i16[0] = vaddlv_u8(v511);
        if (v511.u32[0] > 1uLL)
        {
          v512 = v508;
          if (v1365[1] <= (void *)v508)
            v512 = v508 % (unint64_t)v1365[1];
        }
        else
        {
          v512 = (LODWORD(v1365[1]) - 1) & v508;
        }
        v513 = (uint64_t **)*((_QWORD *)v1365[0] + v512);
        if (v513)
        {
          v514 = *v513;
          if (v514)
          {
            if (v511.u32[0] < 2uLL)
            {
              while (1)
              {
                v516 = v514[1];
                if (v516 == v508)
                {
                  if (*((_DWORD *)v514 + 4) == (_DWORD)v508)
                    goto LABEL_851;
                }
                else if ((v516 & ((uint64_t)v1365[1] - 1)) != v512)
                {
                  goto LABEL_872;
                }
                v514 = (uint64_t *)*v514;
                if (!v514)
                  goto LABEL_872;
              }
            }
            do
            {
              v515 = v514[1];
              if (v515 == v508)
              {
                if (*((_DWORD *)v514 + 4) == (_DWORD)v508)
                  goto LABEL_851;
              }
              else
              {
                if ((void *)v515 >= v1365[1])
                  v515 %= (unint64_t)v1365[1];
                if (v515 != v512)
                  break;
              }
              v514 = (uint64_t *)*v514;
            }
            while (v514);
          }
        }
      }
LABEL_872:
      v517 = *a2 + 464 * v508;
      if (*(_BYTE *)(v517 + 460) == 2)
        goto LABEL_851;
      v1356 = (char *)*a2;
      if (*(_QWORD *)(v517 + 8) == *(_QWORD *)v517)
        goto LABEL_851;
      v518 = sub_223B7EE5C((uint64_t *)v517)
           * (float)((float)(*(float *)(v517 + 96) + *(float *)(v517 + 100)) - *(float *)(v517 + 96));
      if (v518 >= 1.25)
      {
        *(_QWORD *)oslog = *(_QWORD *)(v1360 + 2624);
        sub_2232D69F0((unsigned int *)object, (uint64_t *)oslog);
        __p[0] = (void *)((*(unsigned int *)object | ((unint64_t)object[4] << 32) | ((unint64_t)object[5] << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)object[7] << 56) | ((unint64_t)(HIWORD(*(_DWORD *)&object[4]) & 0xF | 0x40u) << 48));
        __p[1] = (void *)(((unint64_t)object[12] << 32) | ((unint64_t)object[13] << 40) | *(_DWORD *)&object[8] & 0xFFFFFF00 | ((unint64_t)*(unsigned int *)&object[12] << 32) & 0xFF00000000000000 | ((unint64_t)object[14] << 48) | object[8] & 0x3F | 0x80);
        memset(&__p[2], 0, 48);
        v1388 = 0u;
        v1389 = 0u;
        v1390 = 0;
        v1391 = xmmword_224656660;
        v1392 = xmmword_224660CB0;
        v1396 = 0;
        v1398 = 0;
        v1395 = 0;
        v1399 = 0;
        v1393 = 5;
        v1394 = 1065353216;
        v1397 = 1065353216;
        v1400 = 1065353216;
        v1408 = 0u;
        v1409 = 0u;
        v1406 = 0u;
        v1407 = 0u;
        v1404 = 0u;
        v1405 = 0u;
        v1402 = 0u;
        v1403 = 0u;
        v1401 = 0u;
        v1410 = xmmword_224656660;
        v1411 = xmmword_224660CB0;
        v1412 = 5;
        v1414 = 0;
        v1415 = 0;
        v1418 = 0;
        v1417 = 0;
        v1413 = 1065353216;
        v1416 = 1065353216;
        v1419 = 1065353216;
        v1423 = 0u;
        v1424 = 0u;
        v1421 = 0u;
        v1422 = 0u;
        v1420 = 0u;
        v1425 = 1065353216;
        v1426 = 0;
        v1427 = 0;
        v1428 = 0;
        sub_223B6C304(&v1375);
        if (**(int **)(v1375 + 56) > 3)
          goto LABEL_1148;
        v527 = *(unsigned __int8 *)(v1375 + 72);
        __se = (char *)sub_22322F254(v1375, "OSLogSurrogateAppender", 1, 0);
        if (!v527 && !__se)
          goto LABEL_1148;
        sub_223195210((uint64_t)object);
        v528 = sub_2231813E8(&object[16], (uint64_t)"RoomBoundaryIdentification: Creating a new room id ", 51);
        sub_2245664AC((unsigned __int8 *)__p, oslog);
        sub_2231813E8(v528, (uint64_t)oslog, 36);
        if ((v1447 & 0x10) != 0)
        {
          v533 = v1446;
          v534 = (void **)&v1442;
          if (v1446 < v1443[0])
          {
            v1446 = v1443[0];
            v533 = v1443[0];
            v534 = (void **)&v1442;
          }
        }
        else
        {
          if ((v1447 & 8) == 0)
          {
            v529 = 0;
            v1429[23] = 0;
            v530 = v1429;
            goto LABEL_953;
          }
          v533 = (int32x2_t *)v1441;
          v534 = &v1439;
        }
        v562 = *v534;
        v529 = (char *)v533 - (_BYTE *)*v534;
        if (v529 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v529 >= 0x17)
        {
          v563 = (v529 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v529 | 7) != 0x17)
            v563 = v529 | 7;
          v564 = v563 + 1;
          v530 = operator new(v563 + 1);
          *(_QWORD *)&v1429[16] = v564 | 0x8000000000000000;
          *(_QWORD *)v1429 = v530;
          *(_QWORD *)&v1429[8] = v529;
        }
        else
        {
          v1429[23] = (_BYTE)v533 - *(_BYTE *)v534;
          v530 = v1429;
          if (!v529)
          {
LABEL_953:
            v530[v529] = 0;
            v1381[0] = &v1375;
            v1381[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
            v1381[2] = (void *)std::chrono::system_clock::now().__d_.__rep_;
            LODWORD(v1381[3]) = 3;
            v1382 = "unknown file";
            v1383 = 469;
            v1384 = "unknown function";
            v1385 = 0;
            v1386 = 0;
            v565 = v1429;
            if (v1429[23] < 0)
              v565 = *(char **)v1429;
            v1326 = v565;
            v566 = *(_QWORD *)v1381[0];
            v1319 = *(_QWORD *)v1381[0];
            if (*(char *)(*(_QWORD *)v1381[0] + 39) < 0)
            {
              v568 = *(const char **)(v566 + 16);
              v567 = *(_QWORD *)(v566 + 24);
              v1320 = *(_QWORD *)v1381[0] + 16;
              v570 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v570 & 1) == 0)
              {
LABEL_1181:
                if (__cxa_guard_acquire(&qword_255788F58))
                {
                  sub_224568628((uint64_t)v1430);
                  sub_223199C58("com.apple.cv3d", (unint64_t)v1430, byte_255788F40);
                  if (v1430[24] && (v1430[23] & 0x80000000) != 0)
                    operator delete(*(void **)v1430);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
                  __cxa_guard_release(&qword_255788F58);
                }
              }
            }
            else
            {
              v567 = *(unsigned __int8 *)(*(_QWORD *)v1381[0] + 39);
              v568 = (const char *)(*(_QWORD *)v1381[0] + 16);
              v1320 = (uint64_t)v568;
              v569 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v569 & 1) == 0)
                goto LABEL_1181;
            }
            if (byte_255788F40[23] >= 0)
              v571 = byte_255788F40;
            else
              v571 = *(const char **)byte_255788F40;
            if (byte_255788F40[23] >= 0)
              v572 = byte_255788F40[23];
            else
              v572 = *(_QWORD *)&byte_255788F40[8];
            *(_QWORD *)oslog = os_log_create(v571, v568);
            if (v572 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v572 >= 0x17)
            {
              v574 = (v572 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v572 | 7) != 0x17)
                v574 = v572 | 7;
              v575 = v574 + 1;
              v573 = operator new(v574 + 1);
              *(_QWORD *)&oslog[24] = v575 | 0x8000000000000000;
              *(_QWORD *)&oslog[8] = v573;
              *(_QWORD *)&oslog[16] = v572;
            }
            else
            {
              oslog[31] = v572;
              v573 = &oslog[8];
              if (!v572)
              {
LABEL_973:
                v573[v572] = 0;
                oslog[32] = 1;
                if (v567 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                if (v567 >= 0x17)
                {
                  v578 = (v567 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v567 | 7) != 0x17)
                    v578 = v567 | 7;
                  v579 = v578 + 1;
                  v576 = operator new(v578 + 1);
                  v1436 = v579 | 0x8000000000000000;
                  v1434 = v576;
                  v1435 = (const char *)v567;
                }
                else
                {
                  HIBYTE(v1436) = v567;
                  v576 = &v1434;
                  if (!v567)
                  {
                    LOBYTE(v1434) = 0;
                    LOBYTE(v1437) = 1;
                    v577 = *(NSObject **)oslog;
                    if ((SHIBYTE(v1436) & 0x80000000) == 0)
                      goto LABEL_977;
LABEL_983:
                    operator delete(v1434);
                    if (oslog[32])
                      goto LABEL_984;
                    goto LABEL_986;
                  }
                }
                memmove(v576, v568, v567);
                *((_BYTE *)v576 + v567) = 0;
                LOBYTE(v1437) = 1;
                v577 = *(NSObject **)oslog;
                if (SHIBYTE(v1436) < 0)
                  goto LABEL_983;
LABEL_977:
                if (oslog[32])
                {
LABEL_984:
                  if ((oslog[31] & 0x80000000) != 0)
                    operator delete(*(void **)&oslog[8]);
                }
LABEL_986:
                if (*(_QWORD *)oslog)
                  os_release(*(void **)oslog);
                if (__se && *((_QWORD *)__se + 3))
                {
                  v580 = _os_log_pack_size();
                  v581 = operator new(v580, (std::align_val_t)8uLL);
                  v582 = (_QWORD *)operator new();
                  *v582 = &off_24EC1F7F0;
                  v582[1] = 0;
                  v582[2] = 0;
                  v582[3] = v581;
                  *(_QWORD *)v1430 = v581;
                  *(_QWORD *)&v1430[8] = v581;
                  *(_QWORD *)&v1430[16] = v582;
                  *(_QWORD *)&v1430[24] = 0;
                  v1431 = 0;
                  v583 = strlen(v1326);
                  if (v583 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v584 = v583;
                  if (v583 >= 0x17)
                  {
                    v604 = (v583 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v583 | 7) != 0x17)
                      v604 = v583 | 7;
                    v605 = v604 + 1;
                    v585 = (std::string *)operator new(v604 + 1);
                    v1432.__r_.__value_.__r.__words[2] = v605 | 0x8000000000000000;
                    v1432.__r_.__value_.__r.__words[0] = (std::string::size_type)v585;
                    v1432.__r_.__value_.__l.__size_ = v584;
                  }
                  else
                  {
                    *((_BYTE *)&v1432.__r_.__value_.__s + 23) = v583;
                    v585 = &v1432;
                    if (!v583)
                    {
                      v586 = v527;
LABEL_1020:
                      v585->__r_.__value_.__s.__data_[v584] = 0;
                      v1379[0] = (void *)v1432.__r_.__value_.__l.__size_;
                      v606 = v1432.__r_.__value_.__r.__words[0];
                      *(void **)((char *)v1379 + 7) = *(void **)((char *)&v1432.__r_.__value_.__r.__words[1] + 7);
                      v607 = HIBYTE(v1432.__r_.__value_.__r.__words[2]);
                      v608 = (char *)operator new(0x38uLL);
                      *((_QWORD *)v608 + 1) = 0;
                      *((_QWORD *)v608 + 2) = 0;
                      *((_QWORD *)v608 + 3) = off_24EC1FA48;
                      *(_QWORD *)v608 = &off_24EC1F9F8;
                      v609 = v1379[0];
                      *((_QWORD *)v608 + 4) = v606;
                      *((_QWORD *)v608 + 5) = v609;
                      *(void **)(v608 + 47) = *(void **)((char *)v1379 + 7);
                      v608[55] = v607;
                      v1379[0] = 0;
                      *(void **)((char *)v1379 + 7) = 0;
                      v610 = v1431;
                      *(_QWORD *)&v1430[24] = v608 + 24;
                      v1431 = (std::__shared_weak_count *)v608;
                      if (v610)
                      {
                        v611 = (unint64_t *)&v610->__shared_owners_;
                        do
                          v612 = __ldaxr(v611);
                        while (__stlxr(v612 - 1, v611));
                        if (!v612)
                        {
                          ((void (*)(std::__shared_weak_count *))v610->__on_zero_shared)(v610);
                          std::__shared_weak_count::__release_weak(v610);
                        }
                      }
                      *(_OWORD *)oslog = *(_OWORD *)v1430;
                      v613 = *(void **)&v1430[24];
                      *(_QWORD *)&oslog[16] = *(_QWORD *)&v1430[16];
                      if (*(_QWORD *)&v1430[16])
                      {
                        v614 = (unint64_t *)(*(_QWORD *)&v1430[16] + 8);
                        do
                          v615 = __ldxr(v614);
                        while (__stxr(v615 + 1, v614));
                      }
                      v616 = v1431;
                      *(_QWORD *)&oslog[24] = v613;
                      *(_QWORD *)&oslog[32] = v1431;
                      if (v1431)
                      {
                        v617 = (unint64_t *)&v1431->__shared_owners_;
                        do
                          v618 = __ldxr(v617);
                        while (__stxr(v618 + 1, v617));
                        v1434 = v613;
                        do
                          v619 = __ldaxr(v617);
                        while (__stlxr(v619 - 1, v617));
                        if (!v619)
                        {
                          ((void (*)(std::__shared_weak_count *))v616->__on_zero_shared)(v616);
                          std::__shared_weak_count::__release_weak(v616);
                        }
                      }
                      else
                      {
                        v1434 = v613;
                      }
                      v653 = *(std::__shared_weak_count **)&v1430[16];
                      if (*(_QWORD *)&v1430[16])
                      {
                        v654 = (unint64_t *)(*(_QWORD *)&v1430[16] + 8);
                        do
                          v655 = __ldaxr(v654);
                        while (__stlxr(v655 - 1, v654));
                        if (!v655)
                        {
                          ((void (*)(std::__shared_weak_count *))v653->__on_zero_shared)(v653);
                          std::__shared_weak_count::__release_weak(v653);
                        }
                      }
                      v656 = *(_QWORD *)oslog;
                      if (*((char *)v1434 + 31) >= 0)
                        v657 = (char *)v1434 + 8;
                      else
                        v657 = (char *)*((_QWORD *)v1434 + 1);
                      v658 = _os_log_pack_fill();
                      *(_DWORD *)v658 = 136315138;
                      *(_QWORD *)(v658 + 4) = v657;
                      v659 = operator new();
                      v660 = *(unsigned __int8 *)(v1319 + 39);
                      v661 = *(_QWORD *)(v1319 + 16);
                      v662 = *(_QWORD *)(v1319 + 24);
                      v663 = *(_OWORD *)&oslog[24];
                      *(_OWORD *)(v659 + 8) = *(_OWORD *)&oslog[8];
                      if ((v660 & 0x80u) != 0)
                        v660 = v662;
                      else
                        v661 = v1320;
                      *(_QWORD *)v659 = v656;
                      *(_QWORD *)&oslog[8] = 0;
                      *(_QWORD *)&oslog[16] = 0;
                      *(_OWORD *)(v659 + 24) = v663;
                      *(_QWORD *)&oslog[24] = 0;
                      *(_QWORD *)&oslog[32] = 0;
                      *(_QWORD *)(v659 + 40) = v661;
                      *(_QWORD *)(v659 + 48) = v660;
                      *(_BYTE *)(v659 + 56) = 1;
                      v1432.__r_.__value_.__r.__words[0] = 0;
                      *(_QWORD *)v1430 = v659;
                      (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)__se + 3) + 40))(*((_QWORD *)__se + 3), v1430);
                      v664 = *(_QWORD *)v1430;
                      *(_QWORD *)v1430 = 0;
                      if (v664)
                      {
                        v665 = *(std::__shared_weak_count **)(v664 + 32);
                        if (v665)
                        {
                          v666 = (unint64_t *)&v665->__shared_owners_;
                          do
                            v667 = __ldaxr(v666);
                          while (__stlxr(v667 - 1, v666));
                          if (!v667)
                          {
                            ((void (*)(std::__shared_weak_count *))v665->__on_zero_shared)(v665);
                            std::__shared_weak_count::__release_weak(v665);
                          }
                        }
                        v668 = *(std::__shared_weak_count **)(v664 + 16);
                        if (v668)
                        {
                          v669 = (unint64_t *)&v668->__shared_owners_;
                          do
                            v670 = __ldaxr(v669);
                          while (__stlxr(v670 - 1, v669));
                          if (!v670)
                          {
                            ((void (*)(std::__shared_weak_count *))v668->__on_zero_shared)(v668);
                            std::__shared_weak_count::__release_weak(v668);
                          }
                        }
                        MEMORY[0x227684CE8](v664, 0x10F0C40B62ED6C6);
                        v671 = v1432.__r_.__value_.__r.__words[0];
                        v1432.__r_.__value_.__r.__words[0] = 0;
                        if (v671)
                        {
                          v672 = *(std::__shared_weak_count **)(v671 + 32);
                          if (v672)
                          {
                            v673 = (unint64_t *)&v672->__shared_owners_;
                            do
                              v674 = __ldaxr(v673);
                            while (__stlxr(v674 - 1, v673));
                            if (!v674)
                            {
                              ((void (*)(std::__shared_weak_count *))v672->__on_zero_shared)(v672);
                              std::__shared_weak_count::__release_weak(v672);
                            }
                          }
                          v675 = *(std::__shared_weak_count **)(v671 + 16);
                          if (v675)
                          {
                            v676 = (unint64_t *)&v675->__shared_owners_;
                            do
                              v677 = __ldaxr(v676);
                            while (__stlxr(v677 - 1, v676));
                            if (!v677)
                            {
                              ((void (*)(std::__shared_weak_count *))v675->__on_zero_shared)(v675);
                              std::__shared_weak_count::__release_weak(v675);
                            }
                          }
                          MEMORY[0x227684CE8](v671, 0x10F0C40B62ED6C6);
                        }
                      }
                      v678 = *(std::__shared_weak_count **)&oslog[32];
                      if (*(_QWORD *)&oslog[32])
                      {
                        v679 = (unint64_t *)(*(_QWORD *)&oslog[32] + 8);
                        do
                          v680 = __ldaxr(v679);
                        while (__stlxr(v680 - 1, v679));
                        if (!v680)
                        {
                          ((void (*)(std::__shared_weak_count *))v678->__on_zero_shared)(v678);
                          std::__shared_weak_count::__release_weak(v678);
                          v681 = *(std::__shared_weak_count **)&oslog[16];
                          if (*(_QWORD *)&oslog[16])
                            goto LABEL_1132;
                          goto LABEL_1135;
                        }
                      }
                      v681 = *(std::__shared_weak_count **)&oslog[16];
                      if (!*(_QWORD *)&oslog[16])
                        goto LABEL_1135;
LABEL_1132:
                      v682 = (unint64_t *)&v681->__shared_owners_;
                      do
                        v683 = __ldaxr(v682);
                      while (__stlxr(v683 - 1, v682));
                      if (v683)
                      {
LABEL_1135:
                        if (v586)
                          goto LABEL_1136;
LABEL_1139:
                        sub_223182C08((uint64_t)v1381);
                        v685 = v1386;
                        v363 = v1359;
                        if (!v1386)
                          goto LABEL_1143;
                        v686 = (unint64_t *)&v1386->__shared_owners_;
                        do
                          v687 = __ldaxr(v686);
                        while (__stlxr(v687 - 1, v686));
                        if (!v687)
                        {
                          ((void (*)(std::__shared_weak_count *))v685->__on_zero_shared)(v685);
                          std::__shared_weak_count::__release_weak(v685);
                          if ((v1429[23] & 0x80000000) != 0)
LABEL_1144:
                            operator delete(*(void **)v1429);
                        }
                        else
                        {
LABEL_1143:
                          if ((v1429[23] & 0x80000000) != 0)
                            goto LABEL_1144;
                        }
                        *(_QWORD *)object = v1344;
                        *(_QWORD *)&object[*((_QWORD *)v1344 - 3)] = v1343;
                        *(_QWORD *)&object[16] = v1345;
                        *(_QWORD *)&object[24] = MEMORY[0x24BEDB848] + 16;
                        if (v1445 < 0)
                          operator delete(v1443[2]);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        v524 = MEMORY[0x227684BE0](v1448);
LABEL_1148:
                        LOBYTE(v525) = BYTE1(__p[0]);
                        v524.n128_u8[0] = __p[0];
                        LOBYTE(v526) = BYTE2(__p[0]);
                        *(float *)&__p[2] = (float)v524.n128_u32[0] / 255.0;
                        *((float *)&__p[2] + 1) = (float)v525 / 255.0;
                        *(float *)&__p[3] = (float)v526 / 255.0;
                        sub_223B78024((uint64_t)&__p[4], v517);
                        *((float *)&__p[3] + 1) = v518;
                        *((float *)v1372 + 1) = *((float *)v1372 + 1) + v518;
                        *(float *)v1372 = *(float *)v1372 + v518;
                        if (*(_DWORD *)&v1356[464 * v508 + 448])
                        {
                          *(float *)&v1371 = *(float *)&v1371 + v518;
                          *((float *)&v1371 + 1) = *((float *)&v1371 + 1) + v518;
                        }
                        sub_223B7EA98((uint64_t)v1353, (uint64_t)__p, __p, (__int128 *)__p);
                        v689 = (char *)v1349[1];
                        v688 = (unint64_t)v1349[2];
                        if ((unint64_t)v689 < v688)
                        {
                          *v689 = 0;
                          *(_OWORD *)(v689 + 1) = *(_OWORD *)__p;
                          v689[17] = 0;
                          v689[33] = 0;
                          v510 = v689 + 34;
                        }
                        else
                        {
                          v690 = (char *)*v1349;
                          v691 = 0xF0F0F0F0F0F0F0F1 * ((v689 - (_BYTE *)*v1349) >> 1);
                          v692 = v691 + 1;
                          if (v691 + 1 > 0x787878787878787)
                            sub_22316E078();
                          v693 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v688 - (_QWORD)v690) >> 1);
                          if (2 * v693 > v692)
                            v692 = 2 * v693;
                          if (v693 >= 0x3C3C3C3C3C3C3C3)
                            v694 = 0x787878787878787;
                          else
                            v694 = v692;
                          if (v694 > 0x787878787878787)
                            sub_223174E94();
                          v695 = (char *)operator new(34 * v694);
                          v696 = &v695[34 * v691];
                          *v696 = 0;
                          *(_OWORD *)(v696 + 1) = *(_OWORD *)__p;
                          v696[17] = 0;
                          v696[33] = 0;
                          if (v689 == v690)
                          {
                            v700 = &v695[34 * v691];
                          }
                          else
                          {
                            v697 = &v695[34 * v691];
                            do
                            {
                              v698 = *(_OWORD *)(v689 - 34);
                              v699 = *(_OWORD *)(v689 - 18);
                              v700 = v697 - 34;
                              *((_WORD *)v697 - 1) = *((_WORD *)v689 - 1);
                              *(_OWORD *)(v697 - 18) = v699;
                              *(_OWORD *)(v697 - 34) = v698;
                              v689 -= 34;
                              v697 -= 34;
                            }
                            while (v689 != v690);
                          }
                          v510 = v696 + 34;
                          *v1349 = v700;
                          v1349[1] = v696 + 34;
                          v1349[2] = &v695[34 * v694];
                          if (v690)
                            operator delete(v690);
                        }
                        v98 = v98 + v518;
                        v1349[1] = v510;
                        sub_22388925C((uint64_t)&__p[4]);
                        v509 = v1347;
                        goto LABEL_851;
                      }
                      ((void (*)(std::__shared_weak_count *))v681->__on_zero_shared)(v681);
                      std::__shared_weak_count::__release_weak(v681);
                      if (!v586)
                        goto LABEL_1139;
LABEL_1136:
                      v684 = v1429;
                      if (v1429[23] < 0)
                        v684 = *(const char **)v1429;
                      sub_22322C138((uint64_t)v1381, "%s", v684);
                      sub_223182C08((uint64_t)v1381);
                      goto LABEL_1139;
                    }
                  }
                  v586 = v527;
                  memcpy(v585, v1326, v584);
                  goto LABEL_1020;
                }
                v586 = v527;
                os_log_type_enabled(v577, OS_LOG_TYPE_INFO);
                *(_DWORD *)oslog = 136315138;
                *(_QWORD *)&oslog[4] = v1326;
                v587 = (void *)_os_log_send_and_compose_impl();
                if (!v587)
                  goto LABEL_1135;
                free(v587);
                if (!v527)
                  goto LABEL_1139;
                goto LABEL_1136;
              }
            }
            memmove(v573, v571, v572);
            goto LABEL_973;
          }
        }
        memmove(v530, v562, v529);
        goto LABEL_953;
      }
      sub_223B6C304(v1379);
      if (**((int **)v1379[0] + 7) <= 3)
      {
        v519 = *((unsigned __int8 *)v1379[0] + 72);
        v520 = sub_22322F254((uint64_t)v1379[0], "OSLogSurrogateAppender", 1, 0);
        v521 = v520;
        if (v519 || v520)
          break;
      }
LABEL_851:
      if (++v508 == v509)
        goto LABEL_1186;
    }
    sub_223195210((uint64_t)__p);
    sub_2231813E8(&__p[2], (uint64_t)"RoomBoundaryIdentification: Skipping the creation of a new room id due to small volume", 86);
    if ((v1392 & 0x10) != 0)
    {
      v531 = (_BYTE *)*((_QWORD *)&v1391 + 1);
      v532 = (const void **)&v1388;
      if (*((_QWORD *)&v1391 + 1) < *((_QWORD *)&v1388 + 1))
      {
        *((_QWORD *)&v1391 + 1) = *((_QWORD *)&v1388 + 1);
        v531 = (_BYTE *)*((_QWORD *)&v1388 + 1);
        v532 = (const void **)&v1388;
      }
    }
    else
    {
      if ((v1392 & 8) == 0)
      {
        v522 = 0;
        *((_BYTE *)&v1432.__r_.__value_.__s + 23) = 0;
        v523 = &v1432;
        goto LABEL_900;
      }
      v531 = __p[7];
      v532 = (const void **)&__p[5];
    }
    v535 = *v532;
    v522 = v531 - (_BYTE *)*v532;
    if (v522 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v522 >= 0x17)
    {
      v536 = (v522 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v522 | 7) != 0x17)
        v536 = v522 | 7;
      v537 = v536 + 1;
      v523 = (std::string *)operator new(v536 + 1);
      v1432.__r_.__value_.__r.__words[2] = v537 | 0x8000000000000000;
      v1432.__r_.__value_.__r.__words[0] = (std::string::size_type)v523;
      v1432.__r_.__value_.__l.__size_ = v522;
    }
    else
    {
      *((_BYTE *)&v1432.__r_.__value_.__s + 23) = (_BYTE)v531 - *(_BYTE *)v532;
      v523 = &v1432;
      if (!v522)
      {
LABEL_900:
        v523->__r_.__value_.__s.__data_[v522] = 0;
        *(_QWORD *)oslog = v1379;
        *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
        *(_DWORD *)&oslog[24] = 3;
        *(_QWORD *)&oslog[32] = "unknown file";
        LODWORD(v1434) = 464;
        v1435 = "unknown function";
        v1436 = 0;
        v1437 = 0;
        v538 = &v1432;
        if ((v1432.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v538 = (std::string *)v1432.__r_.__value_.__r.__words[0];
        v1357 = (char *)v538;
        v539 = **(_QWORD **)oslog;
        if (*(char *)(**(_QWORD **)oslog + 39) < 0)
        {
          v541 = *(const char **)(v539 + 16);
          v540 = *(_QWORD *)(v539 + 24);
          __sf = (char *)(**(_QWORD **)oslog + 16);
          v543 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v543 & 1) != 0)
            goto LABEL_906;
        }
        else
        {
          v540 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
          v541 = (const char *)(**(_QWORD **)oslog + 16);
          __sf = (char *)v541;
          v542 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v542 & 1) != 0)
            goto LABEL_906;
        }
        if (__cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v1381);
          sub_223199C58("com.apple.cv3d", (unint64_t)v1381, byte_255788F40);
          if (LOBYTE(v1381[3]) && SHIBYTE(v1381[2]) < 0)
            operator delete(v1381[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
LABEL_906:
        if (byte_255788F40[23] >= 0)
          v544 = byte_255788F40;
        else
          v544 = *(const char **)byte_255788F40;
        if (byte_255788F40[23] >= 0)
          v545 = byte_255788F40[23];
        else
          v545 = *(_QWORD *)&byte_255788F40[8];
        *(_QWORD *)object = os_log_create(v544, v541);
        if (v545 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v545 >= 0x17)
        {
          v547 = (v545 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v545 | 7) != 0x17)
            v547 = v545 | 7;
          v548 = v547 + 1;
          v546 = operator new(v547 + 1);
          *(_QWORD *)&object[24] = v548 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v546;
          *(_QWORD *)&object[16] = v545;
        }
        else
        {
          object[31] = v545;
          v546 = &object[8];
          if (!v545)
          {
LABEL_920:
            v546[v545] = 0;
            object[32] = 1;
            if (v540 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v363 = v1359;
            if (v540 >= 0x17)
            {
              v551 = (v540 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v540 | 7) != 0x17)
                v551 = v540 | 7;
              v552 = v551 + 1;
              v549 = operator new(v551 + 1);
              v1441 = v552 | 0x8000000000000000;
              v1439 = v549;
              v1440 = (const char *)v540;
            }
            else
            {
              HIBYTE(v1441) = v540;
              v549 = &v1439;
              if (!v540)
              {
                LOBYTE(v1439) = 0;
                LOBYTE(v1442) = 1;
                v550 = *(NSObject **)object;
                if ((SHIBYTE(v1441) & 0x80000000) == 0)
                  goto LABEL_924;
                goto LABEL_930;
              }
            }
            memmove(v549, v541, v540);
            *((_BYTE *)v549 + v540) = 0;
            LOBYTE(v1442) = 1;
            v550 = *(NSObject **)object;
            if ((SHIBYTE(v1441) & 0x80000000) == 0)
            {
LABEL_924:
              if (!object[32])
                goto LABEL_933;
              goto LABEL_931;
            }
LABEL_930:
            operator delete(v1439);
            if (!object[32])
              goto LABEL_933;
LABEL_931:
            if ((object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
LABEL_933:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (!v521 || !*(_QWORD *)(v521 + 24))
            {
              os_log_type_enabled(v550, OS_LOG_TYPE_INFO);
              v509 = v1347;
              *(_DWORD *)object = 136315138;
              *(_QWORD *)&object[4] = v1357;
              v561 = (void *)_os_log_send_and_compose_impl();
              if (!v561)
                goto LABEL_1077;
              free(v561);
              if (!v519)
                goto LABEL_1081;
              goto LABEL_1078;
            }
            v553 = _os_log_pack_size();
            v554 = operator new(v553, (std::align_val_t)8uLL);
            v555 = (_QWORD *)operator new();
            *v555 = &off_24EC1F7F0;
            v555[1] = 0;
            v555[2] = 0;
            v555[3] = v554;
            v1381[0] = v554;
            v1381[1] = v554;
            v1381[2] = v555;
            v1381[3] = 0;
            v1382 = 0;
            v556 = strlen(v1357);
            if (v556 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v557 = v556;
            if (v556 >= 0x17)
            {
              v588 = (v556 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v556 | 7) != 0x17)
                v588 = v556 | 7;
              v589 = v588 + 1;
              v559 = operator new(v588 + 1);
              v558 = v1359;
              *(_QWORD *)&v1430[16] = v589 | 0x8000000000000000;
              *(_QWORD *)v1430 = v559;
              *(_QWORD *)&v1430[8] = v557;
            }
            else
            {
              v558 = v1359;
              v1430[23] = v556;
              v559 = v1430;
              if (!v556)
              {
                v560 = v539;
                goto LABEL_1001;
              }
            }
            v560 = v539;
            memcpy(v559, v1357, v557);
LABEL_1001:
            v559[v557] = 0;
            v590 = *(_QWORD *)v1430;
            *(_QWORD *)v1429 = *(_QWORD *)&v1430[8];
            *(_QWORD *)&v1429[7] = *(_QWORD *)&v1430[15];
            v591 = v1430[23];
            v592 = operator new(0x38uLL);
            v592[1] = 0;
            v592[2] = 0;
            v592[3] = off_24EC1FA48;
            *v592 = &off_24EC1F9F8;
            v593 = *(_QWORD *)v1429;
            v592[4] = v590;
            v592[5] = v593;
            *(_QWORD *)((char *)v592 + 47) = *(_QWORD *)&v1429[7];
            *((_BYTE *)v592 + 55) = v591;
            *(_QWORD *)v1429 = 0;
            *(_QWORD *)&v1429[7] = 0;
            v594 = (std::__shared_weak_count *)v1382;
            v1381[3] = v592 + 3;
            v1382 = (const char *)v592;
            if (v594)
            {
              v595 = (unint64_t *)&v594->__shared_owners_;
              do
                v596 = __ldaxr(v595);
              while (__stlxr(v596 - 1, v595));
              if (!v596)
              {
                ((void (*)(std::__shared_weak_count *))v594->__on_zero_shared)(v594);
                std::__shared_weak_count::__release_weak(v594);
              }
            }
            *(_OWORD *)object = *(_OWORD *)v1381;
            v597 = v1381[3];
            *(void **)&object[16] = v1381[2];
            if (v1381[2])
            {
              v598 = (unint64_t *)((char *)v1381[2] + 8);
              do
                v599 = __ldxr(v598);
              while (__stxr(v599 + 1, v598));
            }
            v600 = (std::__shared_weak_count *)v1382;
            *(_QWORD *)&object[24] = v597;
            *(_QWORD *)&object[32] = v1382;
            if (v1382)
            {
              v601 = (unint64_t *)(v1382 + 8);
              do
                v602 = __ldxr(v601);
              while (__stxr(v602 + 1, v601));
              v1439 = v597;
              do
                v603 = __ldaxr(v601);
              while (__stlxr(v603 - 1, v601));
              if (!v603)
              {
                ((void (*)(std::__shared_weak_count *))v600->__on_zero_shared)(v600);
                std::__shared_weak_count::__release_weak(v600);
              }
            }
            else
            {
              v1439 = v597;
            }
            v620 = (std::__shared_weak_count *)v1381[2];
            if (v1381[2])
            {
              v621 = (unint64_t *)((char *)v1381[2] + 8);
              do
                v622 = __ldaxr(v621);
              while (__stlxr(v622 - 1, v621));
              if (!v622)
              {
                ((void (*)(std::__shared_weak_count *))v620->__on_zero_shared)(v620);
                std::__shared_weak_count::__release_weak(v620);
              }
            }
            v623 = *(_QWORD *)object;
            if (*((char *)v1439 + 31) >= 0)
              v624 = (char *)v1439 + 8;
            else
              v624 = (char *)*((_QWORD *)v1439 + 1);
            v625 = _os_log_pack_fill();
            *(_DWORD *)v625 = 136315138;
            *(_QWORD *)(v625 + 4) = v624;
            v626 = (char *)operator new();
            v627 = *(unsigned __int8 *)(v560 + 39);
            v628 = __sf;
            if ((v627 & 0x80u) != 0)
            {
              v628 = *(char **)(v560 + 16);
              v627 = *(_QWORD *)(v560 + 24);
            }
            *(_QWORD *)v626 = v623;
            *(_OWORD *)(v626 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v626 + 24) = *(_OWORD *)&object[24];
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            *((_QWORD *)v626 + 5) = v628;
            *((_QWORD *)v626 + 6) = v627;
            v626[56] = 1;
            *(_QWORD *)v1430 = 0;
            v1381[0] = v626;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v521 + 24) + 40))(*(_QWORD *)(v521 + 24), v1381);
            v509 = v1347;
            v629 = v1381[0];
            v1381[0] = 0;
            v363 = v558;
            if (v629)
            {
              v630 = (std::__shared_weak_count *)*((_QWORD *)v629 + 4);
              if (v630)
              {
                v631 = (unint64_t *)&v630->__shared_owners_;
                do
                  v632 = __ldaxr(v631);
                while (__stlxr(v632 - 1, v631));
                if (!v632)
                {
                  ((void (*)(std::__shared_weak_count *))v630->__on_zero_shared)(v630);
                  std::__shared_weak_count::__release_weak(v630);
                }
              }
              v633 = (std::__shared_weak_count *)*((_QWORD *)v629 + 2);
              if (v633)
              {
                v634 = (unint64_t *)&v633->__shared_owners_;
                do
                  v635 = __ldaxr(v634);
                while (__stlxr(v635 - 1, v634));
                if (!v635)
                {
                  ((void (*)(std::__shared_weak_count *))v633->__on_zero_shared)(v633);
                  std::__shared_weak_count::__release_weak(v633);
                }
              }
              MEMORY[0x227684CE8](v629, 0x10F0C40B62ED6C6);
              v636 = *(_QWORD *)v1430;
              *(_QWORD *)v1430 = 0;
              if (v636)
              {
                v637 = *(std::__shared_weak_count **)(v636 + 32);
                if (v637)
                {
                  v638 = (unint64_t *)&v637->__shared_owners_;
                  do
                    v639 = __ldaxr(v638);
                  while (__stlxr(v639 - 1, v638));
                  if (!v639)
                  {
                    ((void (*)(std::__shared_weak_count *))v637->__on_zero_shared)(v637);
                    std::__shared_weak_count::__release_weak(v637);
                  }
                }
                v640 = *(std::__shared_weak_count **)(v636 + 16);
                if (v640)
                {
                  v641 = (unint64_t *)&v640->__shared_owners_;
                  do
                    v642 = __ldaxr(v641);
                  while (__stlxr(v642 - 1, v641));
                  if (!v642)
                  {
                    ((void (*)(std::__shared_weak_count *))v640->__on_zero_shared)(v640);
                    std::__shared_weak_count::__release_weak(v640);
                  }
                }
                MEMORY[0x227684CE8](v636, 0x10F0C40B62ED6C6);
              }
            }
            v643 = *(std::__shared_weak_count **)&object[32];
            if (!*(_QWORD *)&object[32])
              goto LABEL_1073;
            v644 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v645 = __ldaxr(v644);
            while (__stlxr(v645 - 1, v644));
            if (!v645)
            {
              ((void (*)(std::__shared_weak_count *))v643->__on_zero_shared)(v643);
              std::__shared_weak_count::__release_weak(v643);
              v646 = *(std::__shared_weak_count **)&object[16];
              if (!*(_QWORD *)&object[16])
                goto LABEL_1077;
            }
            else
            {
LABEL_1073:
              v646 = *(std::__shared_weak_count **)&object[16];
              if (!*(_QWORD *)&object[16])
                goto LABEL_1077;
            }
            v647 = (unint64_t *)&v646->__shared_owners_;
            do
              v648 = __ldaxr(v647);
            while (__stlxr(v648 - 1, v647));
            if (v648)
            {
LABEL_1077:
              if (!v519)
                goto LABEL_1081;
              goto LABEL_1078;
            }
            ((void (*)(std::__shared_weak_count *))v646->__on_zero_shared)(v646);
            std::__shared_weak_count::__release_weak(v646);
            if (!v519)
              goto LABEL_1081;
LABEL_1078:
            v649 = &v1432;
            if ((v1432.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v649 = (std::string *)v1432.__r_.__value_.__r.__words[0];
            sub_22322C138((uint64_t)oslog, "%s", (const char *)v649);
            sub_223182C08((uint64_t)oslog);
LABEL_1081:
            sub_223182C08((uint64_t)oslog);
            v650 = v1437;
            if (!v1437)
              goto LABEL_1085;
            v651 = (unint64_t *)&v1437->__shared_owners_;
            do
              v652 = __ldaxr(v651);
            while (__stlxr(v652 - 1, v651));
            if (!v652)
            {
              ((void (*)(std::__shared_weak_count *))v650->__on_zero_shared)(v650);
              std::__shared_weak_count::__release_weak(v650);
              if ((SHIBYTE(v1432.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_1087;
            }
            else
            {
LABEL_1085:
              if ((SHIBYTE(v1432.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_1087:
                __p[0] = v1344;
                *(void **)((char *)__p + *((_QWORD *)v1344 - 3)) = v1343;
                __p[2] = v1345;
                __p[3] = v1322;
                if (SBYTE7(v1391) < 0)
                  operator delete(*((void **)&v1389 + 1));
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x227684BE0]((char *)&v1392 + 8);
                goto LABEL_851;
              }
            }
            operator delete(v1432.__r_.__value_.__l.__data_);
            goto LABEL_1087;
          }
        }
        memmove(v546, v544, v545);
        goto LABEL_920;
      }
    }
    memmove(v523, v535, v522);
    goto LABEL_900;
  }
LABEL_1186:
  __p[0] = "cv3d.recon.";
  __p[1] = (void *)11;
  __p[2] = "Stats.ObservationMapping.RoomBoundary";
  __p[3] = (void *)37;
  sub_2231A9820((uint64_t)__p, (uint64_t)&__p[4], 0, 0, (std::string *)object);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v701 = sub_2241471F8();
    v702 = v701[2];
    if (!v702)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v702 = v701[2];
    }
    v703 = *(_QWORD *)(v702 + 64);
    v704 = (std::mutex *)(v703 + 32);
    std::mutex::lock((std::mutex *)(v703 + 32));
    v706 = *(_QWORD *)(v703 + 96);
    v705 = *(_QWORD *)(v703 + 104);
    std::mutex::unlock(v704);
    if (v706 != v705)
    {
      v707 = object[23];
      v708 = *(_BYTE **)object;
      sub_2241471F8();
      v709 = v707 >= 0 ? object : v708;
      v710 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v709);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v710 + 24))(v710))
      {
        memset(__p, 0, 32);
        LODWORD(__p[4]) = 728325608;
        kdebug_trace();
        sub_223189A18((double *)&qword_255788F20, v710, (float *)v1372 + 1, "total_volume_change");
        kdebug_trace();
      }
    }
  }
  memset(__p, 0, 32);
  LODWORD(__p[4]) = 728325624;
  kdebug_trace();
  v711 = object[23];
  if (object[23] < 0)
    v711 = *(_QWORD *)&object[8];
  if (v711 >= 0x11)
  {
    v712 = object;
    if (object[23] < 0)
      v712 = *(_BYTE **)object;
    v713 = *(_QWORD *)v712;
    v714 = *((_QWORD *)v712 + 1);
    v715 = v712[16];
    if (v713 == 0x6365722E64337663 && v714 == 0x73746174532E6E6FLL && v715 == 46)
    {
      v718 = sub_223187510();
      if (object[23] >= 0)
        v719 = object;
      else
        v719 = *(_BYTE **)object;
      if (object[23] >= 0)
        v720 = object[23];
      else
        v720 = *(_QWORD *)&object[8];
      sub_2231897A8((uint64_t *)v718, v719, v720, (float *)v1372 + 1, (uint64_t)"total_volume_change", 19);
    }
  }
  kdebug_trace();
  if ((object[23] & 0x80000000) != 0)
    operator delete(*(void **)object);
  __p[0] = "cv3d.recon.";
  __p[1] = (void *)11;
  __p[2] = "Stats.ObservationMapping.RoomBoundary";
  __p[3] = (void *)37;
  sub_2231A9820((uint64_t)__p, (uint64_t)&__p[4], 0, 0, (std::string *)oslog);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v721 = sub_2241471F8();
    v722 = v721[2];
    if (!v722)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v722 = v721[2];
    }
    v723 = *(_QWORD *)(v722 + 64);
    v724 = (std::mutex *)(v723 + 32);
    std::mutex::lock((std::mutex *)(v723 + 32));
    v726 = *(_QWORD *)(v723 + 96);
    v725 = *(_QWORD *)(v723 + 104);
    std::mutex::unlock(v724);
    if (v726 != v725)
    {
      v727 = oslog[23];
      v728 = *(_BYTE **)oslog;
      sub_2241471F8();
      v729 = v727 >= 0 ? oslog : v728;
      v730 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v729);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v730 + 24))(v730))
      {
        memset(__p, 0, 32);
        LODWORD(__p[4]) = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v730 + 24))(v730))
        {
          *(_QWORD *)object = operator new(0x30uLL);
          *(_OWORD *)&object[8] = xmmword_2245C7A50;
          strcpy(*(char **)object, "total_volume_change_rooms_with_keyframes");
          v1381[0] = (void *)(uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v1381[1] = (void *)2;
          v731 = sub_2241471F8();
          sub_2231AF940((uint64_t)v731, v730, (float *)&v1371 + 1, (uint64_t)object, (__int128 *)v1381);
          if ((object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
        }
        kdebug_trace();
      }
    }
  }
  memset(__p, 0, 32);
  LODWORD(__p[4]) = 728325624;
  kdebug_trace();
  v732 = oslog[23];
  if (oslog[23] < 0)
    v732 = *(_QWORD *)&oslog[8];
  if (v732 >= 0x11)
  {
    v733 = oslog;
    if (oslog[23] < 0)
      v733 = *(_BYTE **)oslog;
    v734 = *(_QWORD *)v733;
    v735 = *((_QWORD *)v733 + 1);
    v736 = v733[16];
    if (v734 == 0x6365722E64337663 && v735 == 0x73746174532E6E6FLL && v736 == 46)
    {
      v739 = sub_223187510();
      if (oslog[23] >= 0)
        v740 = oslog;
      else
        v740 = *(_BYTE **)oslog;
      if (oslog[23] >= 0)
        v741 = oslog[23];
      else
        v741 = *(_QWORD *)&oslog[8];
      sub_2231897A8((uint64_t *)v739, v740, v741, (float *)&v1371 + 1, (uint64_t)"total_volume_change_rooms_with_keyframes", 40);
    }
  }
  kdebug_trace();
  if ((oslog[23] & 0x80000000) != 0)
    operator delete(*(void **)oslog);
  __p[0] = "cv3d.recon.";
  __p[1] = (void *)11;
  __p[2] = "Stats.ObservationMapping.RoomBoundary";
  __p[3] = (void *)37;
  sub_2231A9820((uint64_t)__p, (uint64_t)&__p[4], 0, 0, (std::string *)object);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v742 = sub_2241471F8();
    v743 = v742[2];
    if (!v743)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v743 = v742[2];
    }
    v744 = *(_QWORD *)(v743 + 64);
    v745 = (std::mutex *)(v744 + 32);
    std::mutex::lock((std::mutex *)(v744 + 32));
    v747 = *(_QWORD *)(v744 + 96);
    v746 = *(_QWORD *)(v744 + 104);
    std::mutex::unlock(v745);
    if (v747 != v746)
    {
      v748 = object[23];
      v749 = *(_BYTE **)object;
      sub_2241471F8();
      v750 = v748 >= 0 ? object : v749;
      v751 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v750);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v751 + 24))(v751))
      {
        memset(__p, 0, 32);
        LODWORD(__p[4]) = 728325608;
        kdebug_trace();
        *(_DWORD *)oslog = fabsf(v98);
        sub_223456130((double *)&qword_255788F20, v751, (float *)oslog, "summed_volume_change");
        kdebug_trace();
      }
    }
  }
  memset(__p, 0, 32);
  LODWORD(__p[4]) = 728325624;
  kdebug_trace();
  v752 = object[23];
  if (object[23] < 0)
    v752 = *(_QWORD *)&object[8];
  if (v752 >= 0x11)
  {
    v753 = object;
    if (object[23] < 0)
      v753 = *(_BYTE **)object;
    v754 = *(_QWORD *)v753;
    v755 = *((_QWORD *)v753 + 1);
    v756 = v753[16];
    if (v754 == 0x6365722E64337663 && v755 == 0x73746174532E6E6FLL && v756 == 46)
    {
      v759 = sub_223187510();
      if (object[23] >= 0)
        v760 = object;
      else
        v760 = *(_BYTE **)object;
      if (object[23] >= 0)
        v761 = object[23];
      else
        v761 = *(_QWORD *)&object[8];
      *(_DWORD *)oslog = fabsf(v98);
      sub_2231897A8((uint64_t *)v759, v760, v761, (float *)oslog, (uint64_t)"summed_volume_change", 20);
    }
  }
  kdebug_trace();
  if ((object[23] & 0x80000000) != 0)
    operator delete(*(void **)object);
  __p[0] = "cv3d.recon.";
  __p[1] = (void *)11;
  __p[2] = "Stats.ObservationMapping.RoomBoundary";
  __p[3] = (void *)37;
  sub_2231A9820((uint64_t)__p, (uint64_t)&__p[4], 0, 0, (std::string *)oslog);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v762 = sub_2241471F8();
    v763 = v762[2];
    if (!v763)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v763 = v762[2];
    }
    v764 = *(_QWORD *)(v763 + 64);
    v765 = (std::mutex *)(v764 + 32);
    std::mutex::lock((std::mutex *)(v764 + 32));
    v767 = *(_QWORD *)(v764 + 96);
    v766 = *(_QWORD *)(v764 + 104);
    std::mutex::unlock(v765);
    if (v767 != v766)
    {
      v768 = oslog[23];
      v769 = *(_BYTE **)oslog;
      sub_2241471F8();
      v770 = v768 >= 0 ? oslog : v769;
      v771 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v770);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v771 + 24))(v771))
      {
        memset(__p, 0, 32);
        LODWORD(__p[4]) = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v771 + 24))(v771))
        {
          object[23] = 12;
          strcpy(object, "total_volume");
          v1381[0] = (void *)(uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v1381[1] = (void *)2;
          v772 = sub_2241471F8();
          sub_2231AF940((uint64_t)v772, v771, (float *)v1372, (uint64_t)object, (__int128 *)v1381);
          if ((object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
        }
        kdebug_trace();
      }
    }
  }
  memset(__p, 0, 32);
  LODWORD(__p[4]) = 728325624;
  kdebug_trace();
  v773 = oslog[23];
  if (oslog[23] < 0)
    v773 = *(_QWORD *)&oslog[8];
  if (v773 >= 0x11)
  {
    v774 = oslog;
    if (oslog[23] < 0)
      v774 = *(_BYTE **)oslog;
    v775 = *(_QWORD *)v774;
    v776 = *((_QWORD *)v774 + 1);
    v777 = v774[16];
    if (v775 == 0x6365722E64337663 && v776 == 0x73746174532E6E6FLL && v777 == 46)
    {
      v780 = sub_223187510();
      if (oslog[23] >= 0)
        v781 = oslog;
      else
        v781 = *(_BYTE **)oslog;
      if (oslog[23] >= 0)
        v782 = oslog[23];
      else
        v782 = *(_QWORD *)&oslog[8];
      sub_2231897A8((uint64_t *)v780, v781, v782, (float *)v1372, (uint64_t)"total_volume", 12);
    }
  }
  kdebug_trace();
  if ((oslog[23] & 0x80000000) != 0)
    operator delete(*(void **)oslog);
  __p[0] = "cv3d.recon.";
  __p[1] = (void *)11;
  __p[2] = "Stats.ObservationMapping.RoomBoundary";
  __p[3] = (void *)37;
  sub_2231A9820((uint64_t)__p, (uint64_t)&__p[4], 0, 0, (std::string *)object);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v783 = sub_2241471F8();
    v784 = v783[2];
    if (!v784)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v784 = v783[2];
    }
    v785 = *(_QWORD *)(v784 + 64);
    v786 = (std::mutex *)(v785 + 32);
    std::mutex::lock((std::mutex *)(v785 + 32));
    v788 = *(_QWORD *)(v785 + 96);
    v787 = *(_QWORD *)(v785 + 104);
    std::mutex::unlock(v786);
    if (v788 != v787)
    {
      v789 = object[23];
      v790 = *(_BYTE **)object;
      sub_2241471F8();
      v791 = v789 >= 0 ? object : v790;
      v792 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v791);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v792 + 24))(v792))
      {
        memset(__p, 0, 32);
        LODWORD(__p[4]) = 728325608;
        kdebug_trace();
        sub_223189660((double *)&qword_255788F20, v792, (float *)&v1371, "total_volume_rooms_with_keyframes");
        kdebug_trace();
      }
    }
  }
  memset(__p, 0, 32);
  LODWORD(__p[4]) = 728325624;
  kdebug_trace();
  v793 = object[23];
  if (object[23] < 0)
    v793 = *(_QWORD *)&object[8];
  if (v793 >= 0x11)
  {
    v794 = object;
    if (object[23] < 0)
      v794 = *(_BYTE **)object;
    v795 = *(_QWORD *)v794;
    v796 = *((_QWORD *)v794 + 1);
    v797 = v794[16];
    if (v795 == 0x6365722E64337663 && v796 == 0x73746174532E6E6FLL && v797 == 46)
    {
      v800 = sub_223187510();
      if (object[23] >= 0)
        v801 = object;
      else
        v801 = *(_BYTE **)object;
      if (object[23] >= 0)
        v802 = object[23];
      else
        v802 = *(_QWORD *)&object[8];
      sub_2231897A8((uint64_t *)v800, v801, v802, (float *)&v1371, (uint64_t)"total_volume_rooms_with_keyframes", 33);
    }
  }
  kdebug_trace();
  if ((object[23] & 0x80000000) != 0)
    operator delete(*(void **)object);
  memset(__p, 0, 32);
  LODWORD(__p[4]) = 728325632;
  kdebug_trace();
  v803 = v1372[0];
  mach_absolute_time();
  v804 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v804 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)object);
    LODWORD(v1318) = *(_DWORD *)&object[4];
    LODWORD(v1317) = *(_DWORD *)object;
    *(double *)&qword_255795558 = (double)v1317 / (double)v1318;
    __cxa_guard_release(&qword_255795560);
    v363 = v1359;
  }
  v805 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v805 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
    v363 = v1359;
  }
  sub_223B7F0F4((uint64_t)&qword_25578BBD0, *(float *)&v803, *((float *)&v803 + 1), v98);
  kdebug_trace();
  *(float *)(v1360 + 3192) = *((float *)v1372 + 1) + *(float *)(v1360 + 3192);
  *(float *)(v1360 + 3196) = *((float *)&v1371 + 1) + *(float *)(v1360 + 3196);
  __p[0] = "cv3d.recon.";
  __p[1] = (void *)11;
  __p[2] = "Stats.ObservationMapping.RoomBoundaryCumulative";
  __p[3] = (void *)47;
  sub_2231A9820((uint64_t)__p, (uint64_t)&__p[4], 0, 0, (std::string *)object);
  sub_224569D7C();
  sub_224569A80();
  v806 = (float *)(v1360 + 3192);
  if (os_variant_has_internal_diagnostics())
  {
    v807 = sub_2241471F8();
    v808 = v807[2];
    if (!v808)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v808 = v807[2];
    }
    v809 = *(_QWORD *)(v808 + 64);
    v810 = (std::mutex *)(v809 + 32);
    std::mutex::lock((std::mutex *)(v809 + 32));
    v812 = *(_QWORD *)(v809 + 96);
    v811 = *(_QWORD *)(v809 + 104);
    std::mutex::unlock(v810);
    if (v812 != v811)
    {
      v813 = object[23];
      v814 = *(_BYTE **)object;
      sub_2241471F8();
      v815 = v813 >= 0 ? object : v814;
      v816 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v815);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v816 + 24))(v816))
      {
        memset(__p, 0, 32);
        LODWORD(__p[4]) = 728325608;
        kdebug_trace();
        sub_223B78554(v816, v806, "cumulative_volume_change");
        kdebug_trace();
      }
    }
  }
  memset(__p, 0, 32);
  LODWORD(__p[4]) = 728325624;
  kdebug_trace();
  v817 = object[23];
  if (object[23] < 0)
    v817 = *(_QWORD *)&object[8];
  if (v817 >= 0x11)
  {
    v818 = object;
    if (object[23] < 0)
      v818 = *(_BYTE **)object;
    v819 = *(_QWORD *)v818;
    v820 = *((_QWORD *)v818 + 1);
    v821 = v818[16];
    if (v819 == 0x6365722E64337663 && v820 == 0x73746174532E6E6FLL && v821 == 46)
    {
      v824 = sub_223187510();
      if (object[23] >= 0)
        v825 = object;
      else
        v825 = *(_BYTE **)object;
      if (object[23] >= 0)
        v826 = object[23];
      else
        v826 = *(_QWORD *)&object[8];
      sub_2231897A8((uint64_t *)v824, v825, v826, v806, (uint64_t)"cumulative_volume_change", 24);
    }
  }
  kdebug_trace();
  if ((object[23] & 0x80000000) != 0)
    operator delete(*(void **)object);
  __p[0] = "cv3d.recon.";
  __p[1] = (void *)11;
  __p[2] = "Stats.ObservationMapping.RoomBoundaryCumulative";
  __p[3] = (void *)47;
  sub_2231A9820((uint64_t)__p, (uint64_t)&__p[4], 0, 0, (std::string *)oslog);
  sub_224569D7C();
  sub_224569A80();
  v827 = (float *)(v1360 + 3196);
  if (os_variant_has_internal_diagnostics())
  {
    v828 = sub_2241471F8();
    v829 = v828[2];
    if (!v829)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v829 = v828[2];
    }
    v830 = *(_QWORD *)(v829 + 64);
    v831 = (std::mutex *)(v830 + 32);
    std::mutex::lock((std::mutex *)(v830 + 32));
    v833 = *(_QWORD *)(v830 + 96);
    v832 = *(_QWORD *)(v830 + 104);
    std::mutex::unlock(v831);
    if (v833 != v832)
    {
      v834 = oslog[23];
      v835 = *(_BYTE **)oslog;
      sub_2241471F8();
      v836 = v834 >= 0 ? oslog : v835;
      v837 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v836);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v837 + 24))(v837))
      {
        memset(__p, 0, 32);
        LODWORD(__p[4]) = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v837 + 24))(v837))
        {
          *(_QWORD *)object = operator new(0x30uLL);
          *(_OWORD *)&object[8] = xmmword_2245C44E0;
          strcpy(*(char **)object, "cumulative_volume_change_rooms_with_keyframes");
          v1381[0] = (void *)(uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v1381[1] = (void *)2;
          v838 = sub_2241471F8();
          sub_2231AF940((uint64_t)v838, v837, v827, (uint64_t)object, (__int128 *)v1381);
          if ((object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
        }
        kdebug_trace();
      }
    }
  }
  memset(__p, 0, 32);
  LODWORD(__p[4]) = 728325624;
  kdebug_trace();
  v839 = oslog[23];
  if (oslog[23] < 0)
    v839 = *(_QWORD *)&oslog[8];
  if (v839 >= 0x11)
  {
    v840 = oslog;
    if (oslog[23] < 0)
      v840 = *(_BYTE **)oslog;
    v841 = *(_QWORD *)v840;
    v842 = *((_QWORD *)v840 + 1);
    v843 = v840[16];
    if (v841 == 0x6365722E64337663 && v842 == 0x73746174532E6E6FLL && v843 == 46)
    {
      v846 = sub_223187510();
      if (oslog[23] >= 0)
        v847 = oslog;
      else
        v847 = *(_BYTE **)oslog;
      if (oslog[23] >= 0)
        v848 = oslog[23];
      else
        v848 = *(_QWORD *)&oslog[8];
      sub_2231897A8((uint64_t *)v846, v847, v848, v827, (uint64_t)"cumulative_volume_change_rooms_with_keyframes", 45);
    }
  }
  kdebug_trace();
  if ((oslog[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)oslog);
    v851 = *(uint64_t **)(v1360 + 56);
    if (v851)
      goto LABEL_1425;
    goto LABEL_1423;
  }
  v851 = *(uint64_t **)(v1360 + 56);
  if (!v851)
  {
LABEL_1423:
    v852 = *(_QWORD *)(v1360 + 3168);
    v853 = *(_QWORD *)(v1360 + 3176);
    while (v852 != v853)
    {
      v850.i32[0] = *(_DWORD *)(v852 + 140);
      v849.i32[0] = v1321[1].i32[0];
      v860 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(v852 + 132), *v1321), (float32x2_t)vdup_lane_s32((int32x2_t)*v1321, 1), *(float32x2_t *)(v852 + 132), 1), v849, v850).f32[0];
      v861 = *(float *)(v852 + 96);
      if (v860 >= v861 && v860 <= (float)(v861 + *(float *)(v852 + 100)))
      {
        v862 = (const float *)(v852 + 108);
        v1460 = vld3_f32(v862);
        *(float32x2_t *)object = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v1460.val[0], COERCE_FLOAT(*v1321)), v1460.val[1], *v1321, 1), v1460.val[2], v849.f32[0]);
        if ((sub_223EA98C0((float *)object, (float **)v852) & 0x80000000) == 0)
        {
          v859 = v1360;
          v857 = *(_BYTE *)(v1360 + 2672);
          v858 = v1360 + 2673;
          goto LABEL_1436;
        }
      }
      v852 += 144;
    }
    *(_BYTE *)(v1360 + 2648) = 0;
    *(void **)(v1360 + 2656) = *(void **)((char *)__p + 7);
    *(void **)(v1360 + 2649) = __p[0];
    *(_BYTE *)(v1360 + 2664) = 0;
    v1429[23] = 7;
    strcpy(v1429, "Unknown");
    v1380 = 9;
    qmemcpy(v1379, "Undefined", 9);
    v871 = v1379;
    goto LABEL_1444;
  }
LABEL_1425:
  while (1)
  {
    if (*((_DWORD *)v851 + 128))
    {
      v850.i32[0] = *((_DWORD *)v851 + 51);
      v849.i32[0] = v1321[1].i32[0];
      v854 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)((char *)v851 + 196), *v1321), (float32x2_t)vdup_lane_s32((int32x2_t)*v1321, 1), *(float32x2_t *)((char *)v851 + 196), 1), v849, v850).f32[0];
      v855 = *((float *)v851 + 40);
      if (v854 >= v855 && v854 <= (float)(v855 + *((float *)v851 + 41)))
      {
        v856 = (const float *)v851 + 43;
        v1459 = vld3_f32(v856);
        *(float32x2_t *)object = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v1459.val[0], COERCE_FLOAT(*v1321)), v1459.val[1], *v1321, 1), v1459.val[2], v849.f32[0]);
        if ((sub_223EA98C0((float *)object, (float **)v851 + 8) & 0x80000000) == 0)
          break;
      }
    }
    v851 = (uint64_t *)*v851;
    if (!v851)
      goto LABEL_1423;
  }
  v857 = *((_BYTE *)v851 + 32);
  v858 = (uint64_t)v851 + 33;
  v859 = v1360;
LABEL_1436:
  __p[0] = *(void **)v858;
  v863 = *(void **)(v858 + 7);
  *(void **)((char *)__p + 7) = v863;
  v864 = v859 + 2648;
  *(_BYTE *)(v859 + 2648) = v857;
  *(void **)(v859 + 2649) = __p[0];
  *(_QWORD *)(v859 + 2656) = v863;
  *(_BYTE *)(v859 + 2664) = 1;
  sub_2245664AC((unsigned __int8 *)(v859 + 2648), __p);
  v865 = operator new(0x28uLL);
  *(_QWORD *)v1429 = v865;
  *(_OWORD *)&v1429[8] = xmmword_2245C4640;
  v866 = *(_OWORD *)&__p[2];
  *v865 = *(_OWORD *)__p;
  v865[1] = v866;
  *((_DWORD *)v865 + 8) = __p[4];
  *((_BYTE *)v865 + 36) = 0;
  v867 = *(unsigned __int8 *)(v1360 + 2664);
  v1380 = 9;
  strcpy((char *)v1379, "Undefined");
  if (v867 && sub_223340F28(v1353, v864))
  {
    v868 = sub_22342DA5C(v1353, v864);
    v869 = *((unsigned __int8 *)v868 + 524);
    if (!*((_BYTE *)v868 + 524))
    {
      if (v1380 < 0)
      {
        v1379[1] = (void *)9;
        v871 = (void **)v1379[0];
      }
      else
      {
        v1380 = 9;
        v871 = v1379;
      }
      *((_BYTE *)v871 + 8) = 116;
      *v871 = *(void **)"NoContext";
LABEL_1444:
      v872 = (char *)v871 + 9;
LABEL_1445:
      *v872 = 0;
      goto LABEL_1446;
    }
    if (v869 == 1)
    {
      if (v1380 < 0)
      {
        v1379[1] = (void *)6;
        v1316 = (void **)v1379[0];
      }
      else
      {
        v1380 = 6;
        v1316 = v1379;
      }
      *((_WORD *)v1316 + 2) = 29295;
      *(_DWORD *)v1316 = 1868852809;
      v872 = (char *)v1316 + 6;
      goto LABEL_1445;
    }
    if (v869 == 2)
    {
      if (v1380 < 0)
      {
        v1379[1] = (void *)7;
        v870 = (void **)v1379[0];
      }
      else
      {
        v1380 = 7;
        v870 = v1379;
      }
      *(_DWORD *)((char *)v870 + 3) = 1919905636;
      *(_DWORD *)v870 = 1685353807;
      v872 = (char *)v870 + 7;
      goto LABEL_1445;
    }
  }
LABEL_1446:
  sub_223B6C304(&v1375);
  if (**(int **)(v1375 + 56) > 3)
    goto LABEL_1585;
  v873 = *(unsigned __int8 *)(v1375 + 72);
  v874 = sub_22322F254(v1375, "OSLogSurrogateAppender", 1, 0);
  v875 = v874;
  if (!v873 && !v874)
    goto LABEL_1585;
  *(_QWORD *)object = &v1375;
  *(std::chrono::steady_clock::time_point *)&object[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&object[16] = std::chrono::system_clock::now();
  *(_DWORD *)&object[24] = 3;
  *(_QWORD *)&object[32] = "unknown file";
  LODWORD(v1439) = 531;
  v1442 = 0;
  v1440 = "unknown function";
  v1441 = 0;
  if (v1429[23] >= 0)
    v876 = v1429;
  else
    v876 = *(_BYTE **)v1429;
  v877 = v1379;
  if (v1380 < 0)
    v877 = (void **)v1379[0];
  v1362 = (char *)v877;
  v878 = **(_QWORD **)object;
  v879 = (const char *)(**(_QWORD **)object + 16);
  v1358 = (char *)v879;
  if (*(char *)(**(_QWORD **)object + 39) < 0)
  {
    v879 = *(const char **)(v878 + 16);
    v880 = *(_QWORD *)(v878 + 24);
    v882 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v882 & 1) != 0)
      goto LABEL_1458;
  }
  else
  {
    v880 = *(unsigned __int8 *)(**(_QWORD **)object + 39);
    v881 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v881 & 1) != 0)
      goto LABEL_1458;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)__p);
    sub_223199C58("com.apple.cv3d", (unint64_t)__p, byte_255788F40);
    if (LOBYTE(__p[3]) && SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_1458:
  if (byte_255788F40[23] >= 0)
    v883 = byte_255788F40;
  else
    v883 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v884 = byte_255788F40[23];
  else
    v884 = *(_QWORD *)&byte_255788F40[8];
  __p[0] = os_log_create(v883, v879);
  v885 = &__p[1];
  if (v884 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v884 >= 0x17)
  {
    v886 = (v884 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v884 | 7) != 0x17)
      v886 = v884 | 7;
    v887 = v886 + 1;
    v885 = (void **)operator new(v886 + 1);
    __p[3] = (void *)(v887 | 0x8000000000000000);
    __p[1] = v885;
    __p[2] = (void *)v884;
    goto LABEL_1471;
  }
  HIBYTE(__p[3]) = v884;
  if (v884)
LABEL_1471:
    memmove(v885, v883, v884);
  *((_BYTE *)v885 + v884) = 0;
  LOBYTE(__p[4]) = 1;
  v888 = &__p[5];
  if (v880 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v363 = v1359;
  if (v880 >= 0x17)
  {
    v890 = (v880 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v880 | 7) != 0x17)
      v890 = v880 | 7;
    v891 = v890 + 1;
    v888 = (void **)operator new(v890 + 1);
    __p[7] = (void *)(v891 | 0x8000000000000000);
    __p[5] = v888;
    __p[6] = (void *)v880;
  }
  else
  {
    HIBYTE(__p[7]) = v880;
    if (!v880)
    {
      LOBYTE(__p[5]) = 0;
      LOBYTE(v1388) = 1;
      v889 = __p[0];
      if ((SHIBYTE(__p[7]) & 0x80000000) == 0)
        goto LABEL_1476;
      goto LABEL_1482;
    }
  }
  memmove(v888, v879, v880);
  *((_BYTE *)v888 + v880) = 0;
  LOBYTE(v1388) = 1;
  v889 = __p[0];
  if ((SHIBYTE(__p[7]) & 0x80000000) == 0)
  {
LABEL_1476:
    if (!LOBYTE(__p[4]))
      goto LABEL_1485;
    goto LABEL_1483;
  }
LABEL_1482:
  operator delete(__p[5]);
  if (!LOBYTE(__p[4]))
    goto LABEL_1485;
LABEL_1483:
  if (SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
LABEL_1485:
  if (__p[0])
    os_release(__p[0]);
  if (!v875 || !*(_QWORD *)(v875 + 24))
  {
    v898 = v873;
    os_log_type_enabled(v889, OS_LOG_TYPE_INFO);
    LODWORD(__p[0]) = 136315394;
    *(void **)((char *)__p + 4) = v876;
    WORD2(__p[1]) = 2080;
    *(void **)((char *)&__p[1] + 6) = v1362;
    v899 = (void *)_os_log_send_and_compose_impl();
    if (v899)
      free(v899);
    goto LABEL_1574;
  }
  v892 = _os_log_pack_size();
  v893 = operator new(v892, (std::align_val_t)8uLL);
  v894 = (_QWORD *)operator new();
  *v894 = &off_24EC1F7F0;
  v894[1] = 0;
  v894[2] = 0;
  v894[3] = v893;
  v1381[0] = v893;
  v1381[1] = v893;
  v1382 = 0;
  v1381[2] = v894;
  v1381[3] = 0;
  v895 = strlen(v876);
  if (v895 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v896 = v895;
  if (v895 >= 0x17)
  {
    v900 = (v895 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v895 | 7) != 0x17)
      v900 = v895 | 7;
    v901 = v900 + 1;
    v897 = operator new(v900 + 1);
    *(_QWORD *)&v1430[16] = v901 | 0x8000000000000000;
    *(_QWORD *)v1430 = v897;
    *(_QWORD *)&v1430[8] = v896;
    goto LABEL_1498;
  }
  v1430[23] = v895;
  v897 = v1430;
  if (v895)
LABEL_1498:
    memcpy(v897, v876, v896);
  v897[v896] = 0;
  v902 = strlen(v1362);
  if (v902 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v903 = v902;
  if (v902 >= 0x17)
  {
    v905 = (v902 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v902 | 7) != 0x17)
      v905 = v902 | 7;
    v906 = v905 + 1;
    v904 = (std::string *)operator new(v905 + 1);
    v1432.__r_.__value_.__r.__words[2] = v906 | 0x8000000000000000;
    v1432.__r_.__value_.__r.__words[0] = (std::string::size_type)v904;
    v1432.__r_.__value_.__l.__size_ = v903;
  }
  else
  {
    *((_BYTE *)&v1432.__r_.__value_.__s + 23) = v902;
    v904 = &v1432;
    if (!v902)
    {
      v898 = v873;
      goto LABEL_1507;
    }
  }
  v898 = v873;
  memcpy(v904, v1362, v903);
LABEL_1507:
  v904->__r_.__value_.__s.__data_[v903] = 0;
  __p[2] = *(void **)&v1430[8];
  *(void **)((char *)&__p[2] + 7) = *(void **)&v1430[15];
  __p[5] = (void *)v1432.__r_.__value_.__l.__size_;
  *(void **)((char *)&__p[5] + 7) = *(void **)((char *)&v1432.__r_.__value_.__r.__words[1] + 7);
  __p[0] = off_24EC20780;
  __p[1] = *(void **)v1430;
  HIBYTE(__p[3]) = v1430[23];
  __p[4] = v1432.__r_.__value_.__l.__data_;
  HIBYTE(__p[6]) = *((_BYTE *)&v1432.__r_.__value_.__s + 23);
  v907 = (char *)operator new(0x50uLL);
  *((_QWORD *)v907 + 3) = off_24EC20780;
  *((_QWORD *)v907 + 1) = 0;
  *((_QWORD *)v907 + 2) = 0;
  *(_QWORD *)v907 = &off_24EC20730;
  *((_OWORD *)v907 + 2) = *(_OWORD *)&__p[1];
  *((void **)v907 + 6) = __p[3];
  memset(&__p[1], 0, 24);
  *(_OWORD *)(v907 + 56) = *(_OWORD *)&__p[4];
  *((void **)v907 + 9) = __p[6];
  memset(&__p[4], 0, 24);
  v908 = (std::__shared_weak_count *)v1382;
  v1381[3] = v907 + 24;
  v1382 = v907;
  if (v908)
  {
    v909 = (unint64_t *)&v908->__shared_owners_;
    do
      v910 = __ldaxr(v909);
    while (__stlxr(v910 - 1, v909));
    if (!v910)
    {
      ((void (*)(std::__shared_weak_count *))v908->__on_zero_shared)(v908);
      std::__shared_weak_count::__release_weak(v908);
    }
  }
  if (SHIBYTE(__p[6]) < 0)
    operator delete(__p[4]);
  if (SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
  *(_OWORD *)oslog = *(_OWORD *)v1381;
  v911 = v1381[3];
  *(void **)&oslog[16] = v1381[2];
  if (v1381[2])
  {
    v912 = (unint64_t *)((char *)v1381[2] + 8);
    do
      v913 = __ldxr(v912);
    while (__stxr(v913 + 1, v912));
  }
  v914 = (std::__shared_weak_count *)v1382;
  *(_QWORD *)&oslog[24] = v911;
  *(_QWORD *)&oslog[32] = v1382;
  if (v1382)
  {
    v915 = (unint64_t *)(v1382 + 8);
    do
      v916 = __ldxr(v915);
    while (__stxr(v916 + 1, v915));
    v1434 = v911;
    do
      v917 = __ldaxr(v915);
    while (__stlxr(v917 - 1, v915));
    if (!v917)
    {
      ((void (*)(std::__shared_weak_count *))v914->__on_zero_shared)(v914);
      std::__shared_weak_count::__release_weak(v914);
    }
  }
  else
  {
    v1434 = v911;
  }
  v918 = (std::__shared_weak_count *)v1381[2];
  if (v1381[2])
  {
    v919 = (unint64_t *)((char *)v1381[2] + 8);
    do
      v920 = __ldaxr(v919);
    while (__stlxr(v920 - 1, v919));
    if (!v920)
    {
      ((void (*)(std::__shared_weak_count *))v918->__on_zero_shared)(v918);
      std::__shared_weak_count::__release_weak(v918);
    }
  }
  v921 = *(_QWORD *)oslog;
  if (*((char *)v1434 + 31) >= 0)
    v922 = (char *)v1434 + 8;
  else
    v922 = (char *)*((_QWORD *)v1434 + 1);
  if (*((char *)v1434 + 55) >= 0)
    v923 = (char *)v1434 + 32;
  else
    v923 = (char *)*((_QWORD *)v1434 + 4);
  v924 = _os_log_pack_fill();
  *(_DWORD *)v924 = 136315394;
  *(_QWORD *)(v924 + 4) = v922;
  *(_WORD *)(v924 + 12) = 2080;
  *(_QWORD *)(v924 + 14) = v923;
  v925 = (char *)operator new();
  v926 = *(unsigned __int8 *)(v878 + 39);
  v927 = *(char **)(v878 + 16);
  v928 = *(_QWORD *)(v878 + 24);
  v929 = *(_OWORD *)&oslog[24];
  *(_OWORD *)(v925 + 8) = *(_OWORD *)&oslog[8];
  if ((v926 & 0x80u) != 0)
    v926 = v928;
  else
    v927 = v1358;
  *(_QWORD *)v925 = v921;
  *(_QWORD *)&oslog[8] = 0;
  *(_QWORD *)&oslog[16] = 0;
  *(_OWORD *)(v925 + 24) = v929;
  *(_QWORD *)&oslog[24] = 0;
  *(_QWORD *)&oslog[32] = 0;
  *((_QWORD *)v925 + 5) = v927;
  *((_QWORD *)v925 + 6) = v926;
  v925[56] = 1;
  v1381[0] = 0;
  __p[0] = v925;
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v875 + 24) + 40))(*(_QWORD *)(v875 + 24), __p);
  v930 = __p[0];
  __p[0] = 0;
  if (v930)
  {
    v931 = (std::__shared_weak_count *)*((_QWORD *)v930 + 4);
    if (v931)
    {
      v932 = (unint64_t *)&v931->__shared_owners_;
      do
        v933 = __ldaxr(v932);
      while (__stlxr(v933 - 1, v932));
      if (!v933)
      {
        ((void (*)(std::__shared_weak_count *))v931->__on_zero_shared)(v931);
        std::__shared_weak_count::__release_weak(v931);
      }
    }
    v934 = (std::__shared_weak_count *)*((_QWORD *)v930 + 2);
    if (v934)
    {
      v935 = (unint64_t *)&v934->__shared_owners_;
      do
        v936 = __ldaxr(v935);
      while (__stlxr(v936 - 1, v935));
      if (!v936)
      {
        ((void (*)(std::__shared_weak_count *))v934->__on_zero_shared)(v934);
        std::__shared_weak_count::__release_weak(v934);
      }
    }
    MEMORY[0x227684CE8](v930, 0x10F0C40B62ED6C6);
    v937 = v1381[0];
    v1381[0] = 0;
    if (v937)
    {
      v938 = (std::__shared_weak_count *)*((_QWORD *)v937 + 4);
      if (v938)
      {
        v939 = (unint64_t *)&v938->__shared_owners_;
        do
          v940 = __ldaxr(v939);
        while (__stlxr(v940 - 1, v939));
        if (!v940)
        {
          ((void (*)(std::__shared_weak_count *))v938->__on_zero_shared)(v938);
          std::__shared_weak_count::__release_weak(v938);
        }
      }
      v941 = (std::__shared_weak_count *)*((_QWORD *)v937 + 2);
      if (v941)
      {
        v942 = (unint64_t *)&v941->__shared_owners_;
        do
          v943 = __ldaxr(v942);
        while (__stlxr(v943 - 1, v942));
        if (!v943)
        {
          ((void (*)(std::__shared_weak_count *))v941->__on_zero_shared)(v941);
          std::__shared_weak_count::__release_weak(v941);
        }
      }
      MEMORY[0x227684CE8](v937, 0x10F0C40B62ED6C6);
    }
  }
  v944 = *(std::__shared_weak_count **)&oslog[32];
  if (*(_QWORD *)&oslog[32])
  {
    v945 = (unint64_t *)(*(_QWORD *)&oslog[32] + 8);
    do
      v946 = __ldaxr(v945);
    while (__stlxr(v946 - 1, v945));
    if (!v946)
    {
      ((void (*)(std::__shared_weak_count *))v944->__on_zero_shared)(v944);
      std::__shared_weak_count::__release_weak(v944);
    }
  }
  v947 = *(std::__shared_weak_count **)&oslog[16];
  if (*(_QWORD *)&oslog[16])
  {
    v948 = (unint64_t *)(*(_QWORD *)&oslog[16] + 8);
    do
      v949 = __ldaxr(v948);
    while (__stlxr(v949 - 1, v948));
    if (!v949)
    {
      ((void (*)(std::__shared_weak_count *))v947->__on_zero_shared)(v947);
      std::__shared_weak_count::__release_weak(v947);
    }
  }
LABEL_1574:
  if (v898)
  {
    v950 = v1429;
    if (v1429[23] < 0)
      v950 = *(const char **)v1429;
    v951 = (const char *)v1379;
    if (v1380 < 0)
      v951 = (const char *)v1379[0];
    sub_22322C138((uint64_t)object, "RoomBoundaryIdentification: Current room: %s (%s)", v950, v951);
    sub_223182C08((uint64_t)object);
  }
  sub_223182C08((uint64_t)object);
  v952 = v1442;
  if (v1442)
  {
    v953 = (unint64_t *)&v1442->__shared_owners_;
    do
      v954 = __ldaxr(v953);
    while (__stlxr(v954 - 1, v953));
    if (!v954)
    {
      ((void (*)(std::__shared_weak_count *))v952->__on_zero_shared)(v952);
      std::__shared_weak_count::__release_weak(v952);
    }
  }
LABEL_1585:
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v955 = sub_2241471F8();
    v956 = v955[2];
    if (!v956)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_2157;
      }
      v956 = v955[2];
    }
    v957 = *(_QWORD *)(v956 + 64);
    v958 = (std::mutex *)(v957 + 32);
    std::mutex::lock((std::mutex *)(v957 + 32));
    v960 = *(_QWORD *)(v957 + 96);
    v959 = *(_QWORD *)(v957 + 104);
    std::mutex::unlock(v958);
    if (v960 != v959)
    {
      __p[0] = "cv3d.recon.";
      __p[1] = (void *)11;
      __p[2] = "PRR.RoomBoundaryIdentification.Rooms-with-keyframes";
      __p[3] = (void *)51;
      sub_2231A9820((uint64_t)__p, (uint64_t)&__p[4], 0, 0, &v1432);
      v961 = HIBYTE(v1432.__r_.__value_.__r.__words[2]);
      v962 = v1432.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      if (v961 >= 0)
        v963 = &v1432;
      else
        v963 = (std::string *)v962;
      v964 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v963);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v964 + 24))(v964))
      {
        memset(oslog, 0, 32);
        *(_DWORD *)&oslog[32] = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v964 + 24))(v964))
        {
          *(_QWORD *)&v1375 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v1375 + 1) = 2;
          v965 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v964 + 24))(v964))
          {
            sub_2241498F4((uint64_t)object, 0);
            for (k = *(uint64_t **)(v1360 + 56); k; k = (uint64_t *)*k)
            {
              if (*((_DWORD *)k + 128))
              {
                sub_223B6A9C0((uint64_t)(k + 4), 0, (uint64_t)__p);
                sub_22414E9E0((uint64_t)object, (uint64_t)__p);
                sub_22316F8F4((uint64_t *)__p);
              }
            }
            LOBYTE(v1381[0]) = 0;
            LOBYTE(v1381[3]) = 0;
            sub_22329F414((uint64_t)object, (__int128 *)v1381, &v1375, v1430);
            if (LOBYTE(v1381[3]) && SHIBYTE(v1381[2]) < 0)
              operator delete(v1381[0]);
            sub_22316F8F4((uint64_t *)object);
            v967 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v964 + 56))(v964);
            v968 = *(void **)v967;
            v969 = *(std::__shared_weak_count **)(v967 + 8);
            if (v969)
            {
              v970 = (unint64_t *)&v969->__shared_owners_;
              do
                v971 = __ldxr(v970);
              while (__stxr(v971 + 1, v970));
            }
            v972 = *(void **)&v1430[8];
            v973 = *(unint64_t **)&v1430[16];
            *(_QWORD *)object = &off_24EC6A3B8;
            *(_QWORD *)&object[8] = *(_QWORD *)&v1430[8];
            *(_QWORD *)&object[16] = *(_QWORD *)&v1430[16];
            *(_QWORD *)&v1430[16] = 0;
            *(_QWORD *)&v1430[8] = 0;
            __p[0] = v968;
            __p[1] = v969;
            if (v969)
            {
              v974 = (unint64_t *)&v969->__shared_owners_;
              do
                v975 = __ldxr(v974);
              while (__stxr(v975 + 1, v974));
            }
            __p[2] = &off_24EC6A3B8;
            __p[3] = v972;
            __p[4] = v973;
            if (v973)
            {
              v976 = v973 + 1;
              do
                v977 = __ldxr(v976);
              while (__stxr(v977 + 1, v976));
            }
            (*(void (**)(uint64_t *, void **))(*v965 + 16))(v965, __p);
            v978 = (std::__shared_weak_count *)__p[4];
            if (__p[4])
            {
              v979 = (unint64_t *)((char *)__p[4] + 8);
              do
                v980 = __ldaxr(v979);
              while (__stlxr(v980 - 1, v979));
              if (!v980)
              {
                ((void (*)(std::__shared_weak_count *))v978->__on_zero_shared)(v978);
                std::__shared_weak_count::__release_weak(v978);
              }
            }
            v981 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v982 = (unint64_t *)((char *)__p[1] + 8);
              do
                v983 = __ldaxr(v982);
              while (__stlxr(v983 - 1, v982));
              if (!v983)
              {
                ((void (*)(std::__shared_weak_count *))v981->__on_zero_shared)(v981);
                std::__shared_weak_count::__release_weak(v981);
              }
            }
            v984 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v985 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v986 = __ldaxr(v985);
              while (__stlxr(v986 - 1, v985));
              if (!v986)
              {
                ((void (*)(std::__shared_weak_count *))v984->__on_zero_shared)(v984);
                std::__shared_weak_count::__release_weak(v984);
              }
            }
            if (v969)
            {
              v987 = (unint64_t *)&v969->__shared_owners_;
              do
                v988 = __ldaxr(v987);
              while (__stlxr(v988 - 1, v987));
              if (!v988)
              {
                ((void (*)(std::__shared_weak_count *))v969->__on_zero_shared)(v969);
                std::__shared_weak_count::__release_weak(v969);
              }
            }
            v989 = *(std::__shared_weak_count **)&v1430[16];
            if (*(_QWORD *)&v1430[16])
            {
              v990 = (unint64_t *)(*(_QWORD *)&v1430[16] + 8);
              do
                v991 = __ldaxr(v990);
              while (__stlxr(v991 - 1, v990));
              if (!v991)
              {
                ((void (*)(std::__shared_weak_count *))v989->__on_zero_shared)(v989);
                std::__shared_weak_count::__release_weak(v989);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v1432.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1432.__r_.__value_.__l.__data_);
    }
  }
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v992 = sub_2241471F8();
    v993 = v992[2];
    if (!v993)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_2157;
      }
      v993 = v992[2];
    }
    v994 = *(_QWORD *)(v993 + 64);
    v995 = (std::mutex *)(v994 + 32);
    std::mutex::lock((std::mutex *)(v994 + 32));
    v997 = *(_QWORD *)(v994 + 96);
    v996 = *(_QWORD *)(v994 + 104);
    std::mutex::unlock(v995);
    if (v997 != v996)
    {
      __p[0] = "cv3d.recon.";
      __p[1] = (void *)11;
      __p[2] = "PRR.RoomBoundaryIdentification.RoomsHallucinated-with-keyframes";
      __p[3] = (void *)63;
      sub_2231A9820((uint64_t)__p, (uint64_t)&__p[4], 0, 0, &v1432);
      v998 = HIBYTE(v1432.__r_.__value_.__r.__words[2]);
      v999 = v1432.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      if (v998 >= 0)
        v1000 = &v1432;
      else
        v1000 = (std::string *)v999;
      v1001 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v1000);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1001 + 24))(v1001))
      {
        memset(oslog, 0, 32);
        *(_DWORD *)&oslog[32] = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1001 + 24))(v1001))
        {
          *(_QWORD *)&v1375 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v1375 + 1) = 2;
          v1002 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1001 + 24))(v1001))
          {
            sub_2241498F4((uint64_t)object, 0);
            for (m = *(uint64_t **)(v1360 + 56); m; m = (uint64_t *)*m)
            {
              if (*((_DWORD *)m + 128))
              {
                sub_223B6A9C0((uint64_t)(m + 4), 1, (uint64_t)__p);
                sub_22414E9E0((uint64_t)object, (uint64_t)__p);
                sub_22316F8F4((uint64_t *)__p);
              }
            }
            LOBYTE(v1381[0]) = 0;
            LOBYTE(v1381[3]) = 0;
            sub_22329F414((uint64_t)object, (__int128 *)v1381, &v1375, v1430);
            if (LOBYTE(v1381[3]) && SHIBYTE(v1381[2]) < 0)
              operator delete(v1381[0]);
            sub_22316F8F4((uint64_t *)object);
            v1004 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1001 + 56))(v1001);
            v1005 = *(void **)v1004;
            v1006 = *(std::__shared_weak_count **)(v1004 + 8);
            if (v1006)
            {
              v1007 = (unint64_t *)&v1006->__shared_owners_;
              do
                v1008 = __ldxr(v1007);
              while (__stxr(v1008 + 1, v1007));
            }
            v1009 = *(void **)&v1430[8];
            v1010 = *(unint64_t **)&v1430[16];
            *(_QWORD *)object = &off_24EC6A3B8;
            *(_QWORD *)&object[8] = *(_QWORD *)&v1430[8];
            *(_QWORD *)&object[16] = *(_QWORD *)&v1430[16];
            *(_QWORD *)&v1430[16] = 0;
            *(_QWORD *)&v1430[8] = 0;
            __p[0] = v1005;
            __p[1] = v1006;
            if (v1006)
            {
              v1011 = (unint64_t *)&v1006->__shared_owners_;
              do
                v1012 = __ldxr(v1011);
              while (__stxr(v1012 + 1, v1011));
            }
            __p[2] = &off_24EC6A3B8;
            __p[3] = v1009;
            __p[4] = v1010;
            if (v1010)
            {
              v1013 = v1010 + 1;
              do
                v1014 = __ldxr(v1013);
              while (__stxr(v1014 + 1, v1013));
            }
            (*(void (**)(uint64_t *, void **))(*v1002 + 16))(v1002, __p);
            v1015 = (std::__shared_weak_count *)__p[4];
            if (__p[4])
            {
              v1016 = (unint64_t *)((char *)__p[4] + 8);
              do
                v1017 = __ldaxr(v1016);
              while (__stlxr(v1017 - 1, v1016));
              if (!v1017)
              {
                ((void (*)(std::__shared_weak_count *))v1015->__on_zero_shared)(v1015);
                std::__shared_weak_count::__release_weak(v1015);
              }
            }
            v1018 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v1019 = (unint64_t *)((char *)__p[1] + 8);
              do
                v1020 = __ldaxr(v1019);
              while (__stlxr(v1020 - 1, v1019));
              if (!v1020)
              {
                ((void (*)(std::__shared_weak_count *))v1018->__on_zero_shared)(v1018);
                std::__shared_weak_count::__release_weak(v1018);
              }
            }
            v1021 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v1022 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v1023 = __ldaxr(v1022);
              while (__stlxr(v1023 - 1, v1022));
              if (!v1023)
              {
                ((void (*)(std::__shared_weak_count *))v1021->__on_zero_shared)(v1021);
                std::__shared_weak_count::__release_weak(v1021);
              }
            }
            if (v1006)
            {
              v1024 = (unint64_t *)&v1006->__shared_owners_;
              do
                v1025 = __ldaxr(v1024);
              while (__stlxr(v1025 - 1, v1024));
              if (!v1025)
              {
                ((void (*)(std::__shared_weak_count *))v1006->__on_zero_shared)(v1006);
                std::__shared_weak_count::__release_weak(v1006);
              }
            }
            v1026 = *(std::__shared_weak_count **)&v1430[16];
            if (*(_QWORD *)&v1430[16])
            {
              v1027 = (unint64_t *)(*(_QWORD *)&v1430[16] + 8);
              do
                v1028 = __ldaxr(v1027);
              while (__stlxr(v1028 - 1, v1027));
              if (!v1028)
              {
                ((void (*)(std::__shared_weak_count *))v1026->__on_zero_shared)(v1026);
                std::__shared_weak_count::__release_weak(v1026);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v1432.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1432.__r_.__value_.__l.__data_);
    }
  }
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v1029 = sub_2241471F8();
    v1030 = v1029[2];
    if (!v1030)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_2157;
      }
      v1030 = v1029[2];
    }
    v1031 = *(_QWORD *)(v1030 + 64);
    v1032 = (std::mutex *)(v1031 + 32);
    std::mutex::lock((std::mutex *)(v1031 + 32));
    v1034 = *(_QWORD *)(v1031 + 96);
    v1033 = *(_QWORD *)(v1031 + 104);
    std::mutex::unlock(v1032);
    if (v1034 != v1033)
    {
      __p[0] = "cv3d.recon.";
      __p[1] = (void *)11;
      __p[2] = "PRR.RoomBoundaryIdentification.Rooms-without-keyframes";
      __p[3] = (void *)54;
      sub_2231A9820((uint64_t)__p, (uint64_t)&__p[4], 0, 0, &v1432);
      v1035 = HIBYTE(v1432.__r_.__value_.__r.__words[2]);
      v1036 = v1432.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      if (v1035 >= 0)
        v1037 = &v1432;
      else
        v1037 = (std::string *)v1036;
      v1038 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v1037);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1038 + 24))(v1038))
      {
        memset(oslog, 0, 32);
        *(_DWORD *)&oslog[32] = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1038 + 24))(v1038))
        {
          *(_QWORD *)&v1375 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v1375 + 1) = 2;
          v1039 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1038 + 24))(v1038))
          {
            sub_2241498F4((uint64_t)object, 0);
            for (n = *(uint64_t **)(v1360 + 56); n; n = (uint64_t *)*n)
            {
              if (!*((_DWORD *)n + 128))
              {
                sub_223B6A9C0((uint64_t)(n + 4), 0, (uint64_t)__p);
                sub_22414E9E0((uint64_t)object, (uint64_t)__p);
                sub_22316F8F4((uint64_t *)__p);
              }
            }
            LOBYTE(v1381[0]) = 0;
            LOBYTE(v1381[3]) = 0;
            sub_22329F414((uint64_t)object, (__int128 *)v1381, &v1375, v1430);
            if (LOBYTE(v1381[3]) && SHIBYTE(v1381[2]) < 0)
              operator delete(v1381[0]);
            sub_22316F8F4((uint64_t *)object);
            v1041 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1038 + 56))(v1038);
            v1042 = *(void **)v1041;
            v1043 = *(std::__shared_weak_count **)(v1041 + 8);
            if (v1043)
            {
              v1044 = (unint64_t *)&v1043->__shared_owners_;
              do
                v1045 = __ldxr(v1044);
              while (__stxr(v1045 + 1, v1044));
            }
            v1046 = *(void **)&v1430[8];
            v1047 = *(unint64_t **)&v1430[16];
            *(_QWORD *)object = &off_24EC6A3B8;
            *(_QWORD *)&object[8] = *(_QWORD *)&v1430[8];
            *(_QWORD *)&object[16] = *(_QWORD *)&v1430[16];
            *(_QWORD *)&v1430[16] = 0;
            *(_QWORD *)&v1430[8] = 0;
            __p[0] = v1042;
            __p[1] = v1043;
            if (v1043)
            {
              v1048 = (unint64_t *)&v1043->__shared_owners_;
              do
                v1049 = __ldxr(v1048);
              while (__stxr(v1049 + 1, v1048));
            }
            __p[2] = &off_24EC6A3B8;
            __p[3] = v1046;
            __p[4] = v1047;
            if (v1047)
            {
              v1050 = v1047 + 1;
              do
                v1051 = __ldxr(v1050);
              while (__stxr(v1051 + 1, v1050));
            }
            (*(void (**)(uint64_t *, void **))(*v1039 + 16))(v1039, __p);
            v1052 = (std::__shared_weak_count *)__p[4];
            if (__p[4])
            {
              v1053 = (unint64_t *)((char *)__p[4] + 8);
              do
                v1054 = __ldaxr(v1053);
              while (__stlxr(v1054 - 1, v1053));
              if (!v1054)
              {
                ((void (*)(std::__shared_weak_count *))v1052->__on_zero_shared)(v1052);
                std::__shared_weak_count::__release_weak(v1052);
              }
            }
            v1055 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v1056 = (unint64_t *)((char *)__p[1] + 8);
              do
                v1057 = __ldaxr(v1056);
              while (__stlxr(v1057 - 1, v1056));
              if (!v1057)
              {
                ((void (*)(std::__shared_weak_count *))v1055->__on_zero_shared)(v1055);
                std::__shared_weak_count::__release_weak(v1055);
              }
            }
            v1058 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v1059 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v1060 = __ldaxr(v1059);
              while (__stlxr(v1060 - 1, v1059));
              if (!v1060)
              {
                ((void (*)(std::__shared_weak_count *))v1058->__on_zero_shared)(v1058);
                std::__shared_weak_count::__release_weak(v1058);
              }
            }
            if (v1043)
            {
              v1061 = (unint64_t *)&v1043->__shared_owners_;
              do
                v1062 = __ldaxr(v1061);
              while (__stlxr(v1062 - 1, v1061));
              if (!v1062)
              {
                ((void (*)(std::__shared_weak_count *))v1043->__on_zero_shared)(v1043);
                std::__shared_weak_count::__release_weak(v1043);
              }
            }
            v1063 = *(std::__shared_weak_count **)&v1430[16];
            if (*(_QWORD *)&v1430[16])
            {
              v1064 = (unint64_t *)(*(_QWORD *)&v1430[16] + 8);
              do
                v1065 = __ldaxr(v1064);
              while (__stlxr(v1065 - 1, v1064));
              if (!v1065)
              {
                ((void (*)(std::__shared_weak_count *))v1063->__on_zero_shared)(v1063);
                std::__shared_weak_count::__release_weak(v1063);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v1432.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1432.__r_.__value_.__l.__data_);
    }
  }
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v1066 = sub_2241471F8();
    v1067 = v1066[2];
    if (!v1067)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_2157;
      }
      v1067 = v1066[2];
    }
    v1068 = *(_QWORD *)(v1067 + 64);
    v1069 = (std::mutex *)(v1068 + 32);
    std::mutex::lock((std::mutex *)(v1068 + 32));
    v1071 = *(_QWORD *)(v1068 + 96);
    v1070 = *(_QWORD *)(v1068 + 104);
    std::mutex::unlock(v1069);
    if (v1071 != v1070)
    {
      __p[0] = "cv3d.recon.";
      __p[1] = (void *)11;
      __p[2] = "PRR.RoomBoundaryIdentification.RoomsHallucinated-without-keyframes";
      __p[3] = (void *)66;
      sub_2231A9820((uint64_t)__p, (uint64_t)&__p[4], 0, 0, &v1432);
      v1072 = HIBYTE(v1432.__r_.__value_.__r.__words[2]);
      v1073 = v1432.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      if (v1072 >= 0)
        v1074 = &v1432;
      else
        v1074 = (std::string *)v1073;
      v1075 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v1074);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1075 + 24))(v1075))
      {
        memset(oslog, 0, 32);
        *(_DWORD *)&oslog[32] = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1075 + 24))(v1075))
        {
          *(_QWORD *)&v1375 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v1375 + 1) = 2;
          v1076 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1075 + 24))(v1075))
          {
            sub_2241498F4((uint64_t)object, 0);
            for (ii = *(uint64_t **)(v1360 + 56); ii; ii = (uint64_t *)*ii)
            {
              if (!*((_DWORD *)ii + 128))
              {
                sub_223B6A9C0((uint64_t)(ii + 4), 1, (uint64_t)__p);
                sub_22414E9E0((uint64_t)object, (uint64_t)__p);
                sub_22316F8F4((uint64_t *)__p);
              }
            }
            LOBYTE(v1381[0]) = 0;
            LOBYTE(v1381[3]) = 0;
            sub_22329F414((uint64_t)object, (__int128 *)v1381, &v1375, v1430);
            if (LOBYTE(v1381[3]) && SHIBYTE(v1381[2]) < 0)
              operator delete(v1381[0]);
            sub_22316F8F4((uint64_t *)object);
            v1078 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1075 + 56))(v1075);
            v1079 = *(void **)v1078;
            v1080 = *(std::__shared_weak_count **)(v1078 + 8);
            if (v1080)
            {
              v1081 = (unint64_t *)&v1080->__shared_owners_;
              do
                v1082 = __ldxr(v1081);
              while (__stxr(v1082 + 1, v1081));
            }
            v1083 = *(void **)&v1430[8];
            v1084 = *(unint64_t **)&v1430[16];
            *(_QWORD *)object = &off_24EC6A3B8;
            *(_QWORD *)&object[8] = *(_QWORD *)&v1430[8];
            *(_QWORD *)&object[16] = *(_QWORD *)&v1430[16];
            *(_QWORD *)&v1430[16] = 0;
            *(_QWORD *)&v1430[8] = 0;
            __p[0] = v1079;
            __p[1] = v1080;
            if (v1080)
            {
              v1085 = (unint64_t *)&v1080->__shared_owners_;
              do
                v1086 = __ldxr(v1085);
              while (__stxr(v1086 + 1, v1085));
            }
            __p[2] = &off_24EC6A3B8;
            __p[3] = v1083;
            __p[4] = v1084;
            if (v1084)
            {
              v1087 = v1084 + 1;
              do
                v1088 = __ldxr(v1087);
              while (__stxr(v1088 + 1, v1087));
            }
            (*(void (**)(uint64_t *, void **))(*v1076 + 16))(v1076, __p);
            v1089 = (std::__shared_weak_count *)__p[4];
            if (__p[4])
            {
              v1090 = (unint64_t *)((char *)__p[4] + 8);
              do
                v1091 = __ldaxr(v1090);
              while (__stlxr(v1091 - 1, v1090));
              if (!v1091)
              {
                ((void (*)(std::__shared_weak_count *))v1089->__on_zero_shared)(v1089);
                std::__shared_weak_count::__release_weak(v1089);
              }
            }
            v1092 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v1093 = (unint64_t *)((char *)__p[1] + 8);
              do
                v1094 = __ldaxr(v1093);
              while (__stlxr(v1094 - 1, v1093));
              if (!v1094)
              {
                ((void (*)(std::__shared_weak_count *))v1092->__on_zero_shared)(v1092);
                std::__shared_weak_count::__release_weak(v1092);
              }
            }
            v1095 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v1096 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v1097 = __ldaxr(v1096);
              while (__stlxr(v1097 - 1, v1096));
              if (!v1097)
              {
                ((void (*)(std::__shared_weak_count *))v1095->__on_zero_shared)(v1095);
                std::__shared_weak_count::__release_weak(v1095);
              }
            }
            if (v1080)
            {
              v1098 = (unint64_t *)&v1080->__shared_owners_;
              do
                v1099 = __ldaxr(v1098);
              while (__stlxr(v1099 - 1, v1098));
              if (!v1099)
              {
                ((void (*)(std::__shared_weak_count *))v1080->__on_zero_shared)(v1080);
                std::__shared_weak_count::__release_weak(v1080);
              }
            }
            v1100 = *(std::__shared_weak_count **)&v1430[16];
            if (*(_QWORD *)&v1430[16])
            {
              v1101 = (unint64_t *)(*(_QWORD *)&v1430[16] + 8);
              do
                v1102 = __ldaxr(v1101);
              while (__stlxr(v1102 - 1, v1101));
              if (!v1102)
              {
                ((void (*)(std::__shared_weak_count *))v1100->__on_zero_shared)(v1100);
                std::__shared_weak_count::__release_weak(v1100);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v1432.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1432.__r_.__value_.__l.__data_);
    }
  }
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v1103 = sub_2241471F8();
    v1104 = v1103[2];
    if (!v1104)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_2157;
      }
      v1104 = v1103[2];
    }
    v1105 = *(_QWORD *)(v1104 + 64);
    v1106 = (std::mutex *)(v1105 + 32);
    std::mutex::lock((std::mutex *)(v1105 + 32));
    v1108 = *(_QWORD *)(v1105 + 96);
    v1107 = *(_QWORD *)(v1105 + 104);
    std::mutex::unlock(v1106);
    if (v1108 != v1107)
    {
      __p[0] = "cv3d.recon.";
      __p[1] = (void *)11;
      __p[2] = "ObservationMapping.Res.Rooms-with-keyframes";
      __p[3] = (void *)43;
      sub_2231A9820((uint64_t)__p, (uint64_t)&__p[4], 0, 0, &v1432);
      v1109 = HIBYTE(v1432.__r_.__value_.__r.__words[2]);
      v1110 = v1432.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      if (v1109 >= 0)
        v1111 = &v1432;
      else
        v1111 = (std::string *)v1110;
      v1112 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v1111);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1112 + 24))(v1112))
      {
        memset(oslog, 0, 32);
        *(_DWORD *)&oslog[32] = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1112 + 24))(v1112))
        {
          *(_QWORD *)&v1375 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v1375 + 1) = 2;
          v1113 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1112 + 24))(v1112))
          {
            sub_2241498F4((uint64_t)object, 0);
            for (jj = *(uint64_t **)(v1360 + 56); jj; jj = (uint64_t *)*jj)
            {
              if (*((_DWORD *)jj + 128))
              {
                sub_223B6A9C0((uint64_t)(jj + 4), 0, (uint64_t)__p);
                sub_22414E9E0((uint64_t)object, (uint64_t)__p);
                sub_22316F8F4((uint64_t *)__p);
              }
            }
            LOBYTE(v1381[0]) = 0;
            LOBYTE(v1381[3]) = 0;
            sub_22329F414((uint64_t)object, (__int128 *)v1381, &v1375, v1430);
            if (LOBYTE(v1381[3]) && SHIBYTE(v1381[2]) < 0)
              operator delete(v1381[0]);
            sub_22316F8F4((uint64_t *)object);
            v1115 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1112 + 56))(v1112);
            v1116 = *(void **)v1115;
            v1117 = *(std::__shared_weak_count **)(v1115 + 8);
            if (v1117)
            {
              v1118 = (unint64_t *)&v1117->__shared_owners_;
              do
                v1119 = __ldxr(v1118);
              while (__stxr(v1119 + 1, v1118));
            }
            v1120 = *(void **)&v1430[8];
            v1121 = *(unint64_t **)&v1430[16];
            *(_QWORD *)object = &off_24EC6A3B8;
            *(_QWORD *)&object[8] = *(_QWORD *)&v1430[8];
            *(_QWORD *)&object[16] = *(_QWORD *)&v1430[16];
            *(_QWORD *)&v1430[16] = 0;
            *(_QWORD *)&v1430[8] = 0;
            __p[0] = v1116;
            __p[1] = v1117;
            if (v1117)
            {
              v1122 = (unint64_t *)&v1117->__shared_owners_;
              do
                v1123 = __ldxr(v1122);
              while (__stxr(v1123 + 1, v1122));
            }
            __p[2] = &off_24EC6A3B8;
            __p[3] = v1120;
            __p[4] = v1121;
            if (v1121)
            {
              v1124 = v1121 + 1;
              do
                v1125 = __ldxr(v1124);
              while (__stxr(v1125 + 1, v1124));
            }
            (*(void (**)(uint64_t *, void **))(*v1113 + 16))(v1113, __p);
            v1126 = (std::__shared_weak_count *)__p[4];
            if (__p[4])
            {
              v1127 = (unint64_t *)((char *)__p[4] + 8);
              do
                v1128 = __ldaxr(v1127);
              while (__stlxr(v1128 - 1, v1127));
              if (!v1128)
              {
                ((void (*)(std::__shared_weak_count *))v1126->__on_zero_shared)(v1126);
                std::__shared_weak_count::__release_weak(v1126);
              }
            }
            v1129 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v1130 = (unint64_t *)((char *)__p[1] + 8);
              do
                v1131 = __ldaxr(v1130);
              while (__stlxr(v1131 - 1, v1130));
              if (!v1131)
              {
                ((void (*)(std::__shared_weak_count *))v1129->__on_zero_shared)(v1129);
                std::__shared_weak_count::__release_weak(v1129);
              }
            }
            v1132 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v1133 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v1134 = __ldaxr(v1133);
              while (__stlxr(v1134 - 1, v1133));
              if (!v1134)
              {
                ((void (*)(std::__shared_weak_count *))v1132->__on_zero_shared)(v1132);
                std::__shared_weak_count::__release_weak(v1132);
              }
            }
            if (v1117)
            {
              v1135 = (unint64_t *)&v1117->__shared_owners_;
              do
                v1136 = __ldaxr(v1135);
              while (__stlxr(v1136 - 1, v1135));
              if (!v1136)
              {
                ((void (*)(std::__shared_weak_count *))v1117->__on_zero_shared)(v1117);
                std::__shared_weak_count::__release_weak(v1117);
              }
            }
            v1137 = *(std::__shared_weak_count **)&v1430[16];
            if (*(_QWORD *)&v1430[16])
            {
              v1138 = (unint64_t *)(*(_QWORD *)&v1430[16] + 8);
              do
                v1139 = __ldaxr(v1138);
              while (__stlxr(v1139 - 1, v1138));
              if (!v1139)
              {
                ((void (*)(std::__shared_weak_count *))v1137->__on_zero_shared)(v1137);
                std::__shared_weak_count::__release_weak(v1137);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v1432.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1432.__r_.__value_.__l.__data_);
    }
  }
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v1140 = sub_2241471F8();
    v1141 = v1140[2];
    if (!v1141)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_2157;
      }
      v1141 = v1140[2];
    }
    v1142 = *(_QWORD *)(v1141 + 64);
    v1143 = (std::mutex *)(v1142 + 32);
    std::mutex::lock((std::mutex *)(v1142 + 32));
    v1145 = *(_QWORD *)(v1142 + 96);
    v1144 = *(_QWORD *)(v1142 + 104);
    std::mutex::unlock(v1143);
    if (v1145 != v1144)
    {
      __p[0] = "cv3d.recon.";
      __p[1] = (void *)11;
      __p[2] = "ObservationMapping.Res.RoomsHallucinated-with-keyframes";
      __p[3] = (void *)55;
      sub_2231A9820((uint64_t)__p, (uint64_t)&__p[4], 0, 0, &v1432);
      v1146 = HIBYTE(v1432.__r_.__value_.__r.__words[2]);
      v1147 = v1432.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      if (v1146 >= 0)
        v1148 = &v1432;
      else
        v1148 = (std::string *)v1147;
      v1149 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v1148);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1149 + 24))(v1149))
      {
        memset(oslog, 0, 32);
        *(_DWORD *)&oslog[32] = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1149 + 24))(v1149))
        {
          *(_QWORD *)&v1375 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v1375 + 1) = 2;
          v1150 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1149 + 24))(v1149))
          {
            sub_2241498F4((uint64_t)object, 0);
            for (kk = *(uint64_t **)(v1360 + 56); kk; kk = (uint64_t *)*kk)
            {
              if (*((_DWORD *)kk + 128))
              {
                sub_223B6A9C0((uint64_t)(kk + 4), 1, (uint64_t)__p);
                sub_22414E9E0((uint64_t)object, (uint64_t)__p);
                sub_22316F8F4((uint64_t *)__p);
              }
            }
            LOBYTE(v1381[0]) = 0;
            LOBYTE(v1381[3]) = 0;
            sub_22329F414((uint64_t)object, (__int128 *)v1381, &v1375, v1430);
            if (LOBYTE(v1381[3]) && SHIBYTE(v1381[2]) < 0)
              operator delete(v1381[0]);
            sub_22316F8F4((uint64_t *)object);
            v1152 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1149 + 56))(v1149);
            v1153 = *(void **)v1152;
            v1154 = *(std::__shared_weak_count **)(v1152 + 8);
            if (v1154)
            {
              v1155 = (unint64_t *)&v1154->__shared_owners_;
              do
                v1156 = __ldxr(v1155);
              while (__stxr(v1156 + 1, v1155));
            }
            v1157 = *(void **)&v1430[8];
            v1158 = *(unint64_t **)&v1430[16];
            *(_QWORD *)object = &off_24EC6A3B8;
            *(_QWORD *)&object[8] = *(_QWORD *)&v1430[8];
            *(_QWORD *)&object[16] = *(_QWORD *)&v1430[16];
            *(_QWORD *)&v1430[16] = 0;
            *(_QWORD *)&v1430[8] = 0;
            __p[0] = v1153;
            __p[1] = v1154;
            if (v1154)
            {
              v1159 = (unint64_t *)&v1154->__shared_owners_;
              do
                v1160 = __ldxr(v1159);
              while (__stxr(v1160 + 1, v1159));
            }
            __p[2] = &off_24EC6A3B8;
            __p[3] = v1157;
            __p[4] = v1158;
            if (v1158)
            {
              v1161 = v1158 + 1;
              do
                v1162 = __ldxr(v1161);
              while (__stxr(v1162 + 1, v1161));
            }
            (*(void (**)(uint64_t *, void **))(*v1150 + 16))(v1150, __p);
            v1163 = (std::__shared_weak_count *)__p[4];
            if (__p[4])
            {
              v1164 = (unint64_t *)((char *)__p[4] + 8);
              do
                v1165 = __ldaxr(v1164);
              while (__stlxr(v1165 - 1, v1164));
              if (!v1165)
              {
                ((void (*)(std::__shared_weak_count *))v1163->__on_zero_shared)(v1163);
                std::__shared_weak_count::__release_weak(v1163);
              }
            }
            v1166 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v1167 = (unint64_t *)((char *)__p[1] + 8);
              do
                v1168 = __ldaxr(v1167);
              while (__stlxr(v1168 - 1, v1167));
              if (!v1168)
              {
                ((void (*)(std::__shared_weak_count *))v1166->__on_zero_shared)(v1166);
                std::__shared_weak_count::__release_weak(v1166);
              }
            }
            v1169 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v1170 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v1171 = __ldaxr(v1170);
              while (__stlxr(v1171 - 1, v1170));
              if (!v1171)
              {
                ((void (*)(std::__shared_weak_count *))v1169->__on_zero_shared)(v1169);
                std::__shared_weak_count::__release_weak(v1169);
              }
            }
            if (v1154)
            {
              v1172 = (unint64_t *)&v1154->__shared_owners_;
              do
                v1173 = __ldaxr(v1172);
              while (__stlxr(v1173 - 1, v1172));
              if (!v1173)
              {
                ((void (*)(std::__shared_weak_count *))v1154->__on_zero_shared)(v1154);
                std::__shared_weak_count::__release_weak(v1154);
              }
            }
            v1174 = *(std::__shared_weak_count **)&v1430[16];
            if (*(_QWORD *)&v1430[16])
            {
              v1175 = (unint64_t *)(*(_QWORD *)&v1430[16] + 8);
              do
                v1176 = __ldaxr(v1175);
              while (__stlxr(v1176 - 1, v1175));
              if (!v1176)
              {
                ((void (*)(std::__shared_weak_count *))v1174->__on_zero_shared)(v1174);
                std::__shared_weak_count::__release_weak(v1174);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v1432.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1432.__r_.__value_.__l.__data_);
    }
  }
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v1177 = sub_2241471F8();
    v1178 = v1177[2];
    if (!v1178)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_2157;
      }
      v1178 = v1177[2];
    }
    v1179 = *(_QWORD *)(v1178 + 64);
    v1180 = (std::mutex *)(v1179 + 32);
    std::mutex::lock((std::mutex *)(v1179 + 32));
    v1182 = *(_QWORD *)(v1179 + 96);
    v1181 = *(_QWORD *)(v1179 + 104);
    std::mutex::unlock(v1180);
    if (v1182 != v1181)
    {
      __p[0] = "cv3d.recon.";
      __p[1] = (void *)11;
      __p[2] = "ObservationMapping.Res.Rooms-without-keyframes";
      __p[3] = (void *)46;
      sub_2231A9820((uint64_t)__p, (uint64_t)&__p[4], 0, 0, &v1432);
      v1183 = HIBYTE(v1432.__r_.__value_.__r.__words[2]);
      v1184 = v1432.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      if (v1183 >= 0)
        v1185 = &v1432;
      else
        v1185 = (std::string *)v1184;
      v1186 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v1185);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1186 + 24))(v1186))
      {
        memset(oslog, 0, 32);
        *(_DWORD *)&oslog[32] = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1186 + 24))(v1186))
        {
          *(_QWORD *)&v1375 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v1375 + 1) = 2;
          v1187 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1186 + 24))(v1186))
          {
            sub_2241498F4((uint64_t)object, 0);
            for (mm = *(uint64_t **)(v1360 + 56); mm; mm = (uint64_t *)*mm)
            {
              if (!*((_DWORD *)mm + 128))
              {
                sub_223B6A9C0((uint64_t)(mm + 4), 0, (uint64_t)__p);
                sub_22414E9E0((uint64_t)object, (uint64_t)__p);
                sub_22316F8F4((uint64_t *)__p);
              }
            }
            LOBYTE(v1381[0]) = 0;
            LOBYTE(v1381[3]) = 0;
            sub_22329F414((uint64_t)object, (__int128 *)v1381, &v1375, v1430);
            if (LOBYTE(v1381[3]) && SHIBYTE(v1381[2]) < 0)
              operator delete(v1381[0]);
            sub_22316F8F4((uint64_t *)object);
            v1189 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1186 + 56))(v1186);
            v1190 = *(void **)v1189;
            v1191 = *(std::__shared_weak_count **)(v1189 + 8);
            if (v1191)
            {
              v1192 = (unint64_t *)&v1191->__shared_owners_;
              do
                v1193 = __ldxr(v1192);
              while (__stxr(v1193 + 1, v1192));
            }
            v1194 = *(void **)&v1430[8];
            v1195 = *(unint64_t **)&v1430[16];
            *(_QWORD *)object = &off_24EC6A3B8;
            *(_QWORD *)&object[8] = *(_QWORD *)&v1430[8];
            *(_QWORD *)&object[16] = *(_QWORD *)&v1430[16];
            *(_QWORD *)&v1430[16] = 0;
            *(_QWORD *)&v1430[8] = 0;
            __p[0] = v1190;
            __p[1] = v1191;
            if (v1191)
            {
              v1196 = (unint64_t *)&v1191->__shared_owners_;
              do
                v1197 = __ldxr(v1196);
              while (__stxr(v1197 + 1, v1196));
            }
            __p[2] = &off_24EC6A3B8;
            __p[3] = v1194;
            __p[4] = v1195;
            if (v1195)
            {
              v1198 = v1195 + 1;
              do
                v1199 = __ldxr(v1198);
              while (__stxr(v1199 + 1, v1198));
            }
            (*(void (**)(uint64_t *, void **))(*v1187 + 16))(v1187, __p);
            v1200 = (std::__shared_weak_count *)__p[4];
            if (__p[4])
            {
              v1201 = (unint64_t *)((char *)__p[4] + 8);
              do
                v1202 = __ldaxr(v1201);
              while (__stlxr(v1202 - 1, v1201));
              if (!v1202)
              {
                ((void (*)(std::__shared_weak_count *))v1200->__on_zero_shared)(v1200);
                std::__shared_weak_count::__release_weak(v1200);
              }
            }
            v1203 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v1204 = (unint64_t *)((char *)__p[1] + 8);
              do
                v1205 = __ldaxr(v1204);
              while (__stlxr(v1205 - 1, v1204));
              if (!v1205)
              {
                ((void (*)(std::__shared_weak_count *))v1203->__on_zero_shared)(v1203);
                std::__shared_weak_count::__release_weak(v1203);
              }
            }
            v1206 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v1207 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v1208 = __ldaxr(v1207);
              while (__stlxr(v1208 - 1, v1207));
              if (!v1208)
              {
                ((void (*)(std::__shared_weak_count *))v1206->__on_zero_shared)(v1206);
                std::__shared_weak_count::__release_weak(v1206);
              }
            }
            if (v1191)
            {
              v1209 = (unint64_t *)&v1191->__shared_owners_;
              do
                v1210 = __ldaxr(v1209);
              while (__stlxr(v1210 - 1, v1209));
              if (!v1210)
              {
                ((void (*)(std::__shared_weak_count *))v1191->__on_zero_shared)(v1191);
                std::__shared_weak_count::__release_weak(v1191);
              }
            }
            v1211 = *(std::__shared_weak_count **)&v1430[16];
            if (*(_QWORD *)&v1430[16])
            {
              v1212 = (unint64_t *)(*(_QWORD *)&v1430[16] + 8);
              do
                v1213 = __ldaxr(v1212);
              while (__stlxr(v1213 - 1, v1212));
              if (!v1213)
              {
                ((void (*)(std::__shared_weak_count *))v1211->__on_zero_shared)(v1211);
                std::__shared_weak_count::__release_weak(v1211);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v1432.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1432.__r_.__value_.__l.__data_);
    }
  }
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v1214 = sub_2241471F8();
    v1215 = v1214[2];
    if (v1215)
      goto LABEL_1981;
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      v1215 = v1214[2];
LABEL_1981:
      v1216 = *(_QWORD *)(v1215 + 64);
      v1217 = (std::mutex *)(v1216 + 32);
      std::mutex::lock((std::mutex *)(v1216 + 32));
      v1219 = *(_QWORD *)(v1216 + 96);
      v1218 = *(_QWORD *)(v1216 + 104);
      std::mutex::unlock(v1217);
      if (v1219 != v1218)
      {
        __p[0] = "cv3d.recon.";
        __p[1] = (void *)11;
        __p[2] = "ObservationMapping.Res.RoomsHallucinated-without-keyframes";
        __p[3] = (void *)58;
        sub_2231A9820((uint64_t)__p, (uint64_t)&__p[4], 0, 0, &v1432);
        v1220 = HIBYTE(v1432.__r_.__value_.__r.__words[2]);
        v1221 = v1432.__r_.__value_.__r.__words[0];
        sub_2241471F8();
        if (v1220 >= 0)
          v1222 = &v1432;
        else
          v1222 = (std::string *)v1221;
        v1223 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v1222);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1223 + 24))(v1223))
        {
          memset(oslog, 0, 32);
          *(_DWORD *)&oslog[32] = 728325616;
          kdebug_trace();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1223 + 24))(v1223))
          {
            *(_QWORD *)&v1375 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            *((_QWORD *)&v1375 + 1) = 2;
            v1224 = sub_2241471F8();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1223 + 24))(v1223))
            {
              sub_2241498F4((uint64_t)object, 0);
              for (nn = *(uint64_t **)(v1360 + 56); nn; nn = (uint64_t *)*nn)
              {
                if (!*((_DWORD *)nn + 128))
                {
                  sub_223B6A9C0((uint64_t)(nn + 4), 1, (uint64_t)__p);
                  sub_22414E9E0((uint64_t)object, (uint64_t)__p);
                  sub_22316F8F4((uint64_t *)__p);
                }
              }
              LOBYTE(v1381[0]) = 0;
              LOBYTE(v1381[3]) = 0;
              sub_22329F414((uint64_t)object, (__int128 *)v1381, &v1375, v1430);
              if (LOBYTE(v1381[3]) && SHIBYTE(v1381[2]) < 0)
                operator delete(v1381[0]);
              sub_22316F8F4((uint64_t *)object);
              v1226 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1223 + 56))(v1223);
              v1227 = *(void **)v1226;
              v1228 = *(std::__shared_weak_count **)(v1226 + 8);
              if (v1228)
              {
                v1229 = (unint64_t *)&v1228->__shared_owners_;
                do
                  v1230 = __ldxr(v1229);
                while (__stxr(v1230 + 1, v1229));
              }
              v1231 = *(void **)&v1430[8];
              v1232 = *(unint64_t **)&v1430[16];
              *(_QWORD *)object = &off_24EC6A3B8;
              *(_QWORD *)&object[8] = *(_QWORD *)&v1430[8];
              *(_QWORD *)&object[16] = *(_QWORD *)&v1430[16];
              *(_QWORD *)&v1430[16] = 0;
              *(_QWORD *)&v1430[8] = 0;
              __p[0] = v1227;
              __p[1] = v1228;
              if (v1228)
              {
                v1233 = (unint64_t *)&v1228->__shared_owners_;
                do
                  v1234 = __ldxr(v1233);
                while (__stxr(v1234 + 1, v1233));
              }
              __p[2] = &off_24EC6A3B8;
              __p[3] = v1231;
              __p[4] = v1232;
              if (v1232)
              {
                v1235 = v1232 + 1;
                do
                  v1236 = __ldxr(v1235);
                while (__stxr(v1236 + 1, v1235));
              }
              (*(void (**)(uint64_t *, void **))(*v1224 + 16))(v1224, __p);
              v1237 = (std::__shared_weak_count *)__p[4];
              if (__p[4])
              {
                v1238 = (unint64_t *)((char *)__p[4] + 8);
                do
                  v1239 = __ldaxr(v1238);
                while (__stlxr(v1239 - 1, v1238));
                if (!v1239)
                {
                  ((void (*)(std::__shared_weak_count *))v1237->__on_zero_shared)(v1237);
                  std::__shared_weak_count::__release_weak(v1237);
                }
              }
              v1240 = (std::__shared_weak_count *)__p[1];
              if (__p[1])
              {
                v1241 = (unint64_t *)((char *)__p[1] + 8);
                do
                  v1242 = __ldaxr(v1241);
                while (__stlxr(v1242 - 1, v1241));
                if (!v1242)
                {
                  ((void (*)(std::__shared_weak_count *))v1240->__on_zero_shared)(v1240);
                  std::__shared_weak_count::__release_weak(v1240);
                }
              }
              v1243 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v1244 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v1245 = __ldaxr(v1244);
                while (__stlxr(v1245 - 1, v1244));
                if (!v1245)
                {
                  ((void (*)(std::__shared_weak_count *))v1243->__on_zero_shared)(v1243);
                  std::__shared_weak_count::__release_weak(v1243);
                }
              }
              if (v1228)
              {
                v1246 = (unint64_t *)&v1228->__shared_owners_;
                do
                  v1247 = __ldaxr(v1246);
                while (__stlxr(v1247 - 1, v1246));
                if (!v1247)
                {
                  ((void (*)(std::__shared_weak_count *))v1228->__on_zero_shared)(v1228);
                  std::__shared_weak_count::__release_weak(v1228);
                }
              }
              v1248 = *(std::__shared_weak_count **)&v1430[16];
              if (*(_QWORD *)&v1430[16])
              {
                v1249 = (unint64_t *)(*(_QWORD *)&v1430[16] + 8);
                do
                  v1250 = __ldaxr(v1249);
                while (__stlxr(v1250 - 1, v1249));
                if (!v1250)
                {
                  ((void (*)(std::__shared_weak_count *))v1248->__on_zero_shared)(v1248);
                  std::__shared_weak_count::__release_weak(v1248);
                }
              }
            }
          }
          kdebug_trace();
        }
        if (SHIBYTE(v1432.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1432.__r_.__value_.__l.__data_);
      }
      goto LABEL_2033;
    }
LABEL_2157:
    abort();
  }
LABEL_2033:
  v1363[0] = v1360;
  v1363[1] = (uint64_t)&v1364;
  v1364 = v1360;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_2245C43D0;
  strcpy((char *)__p[0], "PRR.RoomBoundaryIdentification.Rooms.Keyframes");
  sub_223B7869C(v1363, (uint64_t *)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_2245B8E00;
  strcpy((char *)__p[0], "ObservationMapping.Res.Rooms.Keyframes");
  sub_223B7869C(v1363, (uint64_t *)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_2117;
  v1251 = sub_2241471F8();
  v1252 = v1251[2];
  if (!v1252)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v1252 = v1251[2];
  }
  v1253 = *(_QWORD *)(v1252 + 64);
  v1254 = (std::mutex *)(v1253 + 32);
  std::mutex::lock((std::mutex *)(v1253 + 32));
  v1256 = *(_QWORD *)(v1253 + 96);
  v1255 = *(_QWORD *)(v1253 + 104);
  std::mutex::unlock(v1254);
  if (v1256 == v1255)
    goto LABEL_2117;
  __p[0] = "cv3d.recon.";
  __p[1] = (void *)11;
  __p[2] = "ObservationMapping.Res.Outdoor";
  __p[3] = (void *)30;
  sub_2231A9820((uint64_t)__p, (uint64_t)&__p[4], 0, 0, &v1432);
  v1257 = HIBYTE(v1432.__r_.__value_.__r.__words[2]);
  v1258 = v1432.__r_.__value_.__r.__words[0];
  sub_2241471F8();
  if (v1257 >= 0)
    v1259 = &v1432;
  else
    v1259 = (std::string *)v1258;
  v1260 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v1259);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1260 + 24))(v1260))
  {
    memset(v1381, 0, sizeof(v1381));
    LODWORD(v1382) = 728325616;
    kdebug_trace();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1260 + 24))(v1260))
    {
      *(_QWORD *)&v1374 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
      *((_QWORD *)&v1374 + 1) = 2;
      v1261 = sub_2241471F8();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1260 + 24))(v1260))
      {
        v1351 = v1260;
        v1348 = v1261;
        sub_2241498F4((uint64_t)oslog, 0);
        v1262 = *(_QWORD *)(v1360 + 3168);
        v1263 = *(_QWORD *)(v1360 + 3176);
        if (v1262 != v1263)
        {
          v1264 = (void *)vdup_n_s32(0x3F666666u);
          do
          {
            sub_2241498F4((uint64_t)object, 0);
            v1457 = 2;
            v1454 = 2;
            v1444 = 1;
            v1266 = *(_QWORD *)(v1262 + 8) - *(_QWORD *)v1262;
            if (v1266 >= 0x18)
            {
              v1267 = v1266 >> 3;
              if ((v1266 >> 3))
              {
                v1268 = 0;
                do
                {
                  LODWORD(__p[0]) = v1268;
                  v1270 = v1268 + 1;
                  v1271 = (v1268 + 1) % (int)v1267;
                  LODWORD(v1375) = v1271;
                  v1378 = v1267 + v1268;
                  v1272 = v1271 + v1267;
                  v1377 = v1271 + v1267;
                  v1273 = v1447;
                  v1274 = v1448[0];
                  if ((unint64_t)v1447 >= v1448[0])
                  {
                    v1275 = (char *)sub_223B7C910((uint64_t)&v1446, __p, &v1375, &v1377);
                    v1447 = v1275;
                    if ((unint64_t)v1275 < v1448[0])
                    {
LABEL_2057:
                      *(_DWORD *)v1275 = v1272;
                      *((_DWORD *)v1275 + 1) = v1267 + v1268;
                      *((_DWORD *)v1275 + 2) = v1268;
                      v1447 = v1275 + 12;
                      v1376 = 2;
                      v1276 = v1450;
                      if ((unint64_t)v1450 >= v1451)
                        goto LABEL_2061;
                      goto LABEL_2058;
                    }
                  }
                  else
                  {
                    *(_DWORD *)v1447 = v1268;
                    *((_DWORD *)v1273 + 1) = v1271;
                    v1275 = v1273 + 12;
                    *((_DWORD *)v1273 + 2) = v1272;
                    v1447 = v1273 + 12;
                    if ((unint64_t)(v1273 + 12) < v1274)
                      goto LABEL_2057;
                  }
                  v1447 = (char *)sub_223B7C910((uint64_t)&v1446, &v1377, &v1378, __p);
                  v1376 = 2;
                  v1276 = v1450;
                  if ((unint64_t)v1450 >= v1451)
                  {
LABEL_2061:
                    v1277 = (_BYTE *)sub_223B7CAB0((uint64_t)&v1449, &v1376);
                    goto LABEL_2062;
                  }
LABEL_2058:
                  *v1276 = 2;
                  v1277 = v1276 + 1;
LABEL_2062:
                  v1450 = v1277;
                  v1376 = 2;
                  if ((unint64_t)v1277 < v1451)
                  {
                    *v1277 = 2;
                    v1269 = (uint64_t)(v1277 + 1);
                  }
                  else
                  {
                    v1269 = sub_223B7CAB0((uint64_t)&v1449, &v1376);
                  }
                  v1450 = (_BYTE *)v1269;
                  ++v1268;
                }
                while ((_DWORD)v1267 != v1270);
              }
              *(_QWORD *)&v1375 = v1262;
              *((_QWORD *)&v1375 + 1) = v1262;
              *(float *)v1265.i32 = *(float *)(v1262 + 96) + *(float *)(v1262 + 100);
              sub_223B6A6F4((uint64_t)__p, (uint64_t)&v1375, 33, 1, v1265);
              sub_22414E9E0((uint64_t)object, (uint64_t)__p);
              sub_22316F8F4((uint64_t *)__p);
              v1278.i32[0] = *(_DWORD *)(v1262 + 96);
              sub_223B6A6F4((uint64_t)__p, (uint64_t)&v1375, 1, 0, v1278);
              v363 = v1359;
              sub_22414E9E0((uint64_t)object, (uint64_t)__p);
              sub_22316F8F4((uint64_t *)__p);
              v1279 = 0xAAAAAAAAAAAAAAABLL * ((v1447 - (char *)v1446) >> 2);
              LOBYTE(__p[0]) = 25;
              if (v1279 <= v1453 - v1452)
              {
                if (v1279 < v1453 - v1452)
                  v1453 = v1452 - 0x5555555555555555 * ((v1447 - (char *)v1446) >> 2);
              }
              else
              {
                sub_223A72CE0((uint64_t)&v1452, v1279 - (v1453 - v1452), (const char *)__p);
              }
              LODWORD(v1442) = 1;
              v1280 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&object[8] - *(_QWORD *)object) >> 2);
              __p[0] = v1264;
              LODWORD(__p[1]) = 1065353216;
              v1281 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v1439 - *(_QWORD *)&object[32]) >> 2);
              if (v1280 <= v1281)
              {
                if (v1280 < v1281)
                  v1439 = (void *)(*(_QWORD *)&object[32]
                                 + 4 * ((uint64_t)(*(_QWORD *)&object[8] - *(_QWORD *)object) >> 2));
              }
              else
              {
                sub_2235341F4((uint64_t)&object[32], v1280 - v1281, (uint64_t *)__p);
              }
              LODWORD(__p[0]) = 0;
              v1457 = 2;
              v1282 = 0xAAAAAAAAAAAAAAABLL * ((v1447 - (char *)v1446) >> 2);
              v1283 = (v1456 - v1455) >> 2;
              if (v1282 <= v1283)
              {
                if (v1282 < v1283)
                  v1456 = v1455 - 0x5555555555555554 * ((v1447 - (char *)v1446) >> 2);
              }
              else
              {
                sub_223937944((uint64_t)&v1455, v1282 - v1283, (const float *)__p);
              }
              sub_223CD8718(object, (unsigned int **)&v1446, v1443);
            }
            sub_22414E9E0((uint64_t)oslog, (uint64_t)object);
            sub_22316F8F4((uint64_t *)object);
            v1262 += 144;
          }
          while (v1262 != v1263);
        }
        object[0] = 0;
        object[24] = 0;
        sub_22329F414((uint64_t)oslog, (__int128 *)object, &v1374, v1430);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        sub_22316F8F4((uint64_t *)oslog);
        v1284 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1351 + 56))(v1351);
        v1285 = *(void **)v1284;
        v1286 = *(std::__shared_weak_count **)(v1284 + 8);
        if (v1286)
        {
          v1287 = (unint64_t *)&v1286->__shared_owners_;
          do
            v1288 = __ldxr(v1287);
          while (__stxr(v1288 + 1, v1287));
        }
        v1289 = *(void **)&v1430[8];
        v1290 = *(unint64_t **)&v1430[16];
        *(_QWORD *)oslog = &off_24EC6A3B8;
        *(_QWORD *)&oslog[8] = *(_QWORD *)&v1430[8];
        *(_QWORD *)&oslog[16] = *(_QWORD *)&v1430[16];
        *(_QWORD *)&v1430[16] = 0;
        *(_QWORD *)&v1430[8] = 0;
        __p[0] = v1285;
        __p[1] = v1286;
        if (v1286)
        {
          v1291 = (unint64_t *)&v1286->__shared_owners_;
          do
            v1292 = __ldxr(v1291);
          while (__stxr(v1292 + 1, v1291));
        }
        __p[2] = &off_24EC6A3B8;
        __p[3] = v1289;
        __p[4] = v1290;
        if (v1290)
        {
          v1293 = v1290 + 1;
          do
            v1294 = __ldxr(v1293);
          while (__stxr(v1294 + 1, v1293));
        }
        (*(void (**)(uint64_t *, void **))(*v1348 + 16))(v1348, __p);
        v1295 = (std::__shared_weak_count *)__p[4];
        if (__p[4])
        {
          v1296 = (unint64_t *)((char *)__p[4] + 8);
          do
            v1297 = __ldaxr(v1296);
          while (__stlxr(v1297 - 1, v1296));
          if (!v1297)
          {
            ((void (*)(std::__shared_weak_count *))v1295->__on_zero_shared)(v1295);
            std::__shared_weak_count::__release_weak(v1295);
          }
        }
        v1298 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v1299 = (unint64_t *)((char *)__p[1] + 8);
          do
            v1300 = __ldaxr(v1299);
          while (__stlxr(v1300 - 1, v1299));
          if (!v1300)
          {
            ((void (*)(std::__shared_weak_count *))v1298->__on_zero_shared)(v1298);
            std::__shared_weak_count::__release_weak(v1298);
          }
        }
        v1301 = *(std::__shared_weak_count **)&oslog[16];
        if (*(_QWORD *)&oslog[16])
        {
          v1302 = (unint64_t *)(*(_QWORD *)&oslog[16] + 8);
          do
            v1303 = __ldaxr(v1302);
          while (__stlxr(v1303 - 1, v1302));
          if (!v1303)
          {
            ((void (*)(std::__shared_weak_count *))v1301->__on_zero_shared)(v1301);
            std::__shared_weak_count::__release_weak(v1301);
          }
        }
        if (v1286)
        {
          v1304 = (unint64_t *)&v1286->__shared_owners_;
          do
            v1305 = __ldaxr(v1304);
          while (__stlxr(v1305 - 1, v1304));
          if (!v1305)
          {
            ((void (*)(std::__shared_weak_count *))v1286->__on_zero_shared)(v1286);
            std::__shared_weak_count::__release_weak(v1286);
          }
        }
        v1306 = *(std::__shared_weak_count **)&v1430[16];
        if (*(_QWORD *)&v1430[16])
        {
          v1307 = (unint64_t *)(*(_QWORD *)&v1430[16] + 8);
          do
            v1308 = __ldaxr(v1307);
          while (__stlxr(v1308 - 1, v1307));
          if (!v1308)
          {
            ((void (*)(std::__shared_weak_count *))v1306->__on_zero_shared)(v1306);
            std::__shared_weak_count::__release_weak(v1306);
          }
        }
      }
    }
    kdebug_trace();
  }
  if (SHIBYTE(v1432.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v1432.__r_.__value_.__l.__data_);
    if ((v1380 & 0x80000000) == 0)
    {
LABEL_2118:
      if ((v1429[23] & 0x80000000) == 0)
        goto LABEL_2119;
LABEL_2132:
      operator delete(*(void **)v1429);
      v1309 = v1366[0];
      if (!v1366[0])
        goto LABEL_2121;
      goto LABEL_2120;
    }
  }
  else
  {
LABEL_2117:
    if ((v1380 & 0x80000000) == 0)
      goto LABEL_2118;
  }
  operator delete(v1379[0]);
  if ((v1429[23] & 0x80000000) != 0)
    goto LABEL_2132;
LABEL_2119:
  v1309 = v1366[0];
  if (!v1366[0])
    goto LABEL_2121;
  do
  {
LABEL_2120:
    v1310 = (_QWORD *)*v1309;
    operator delete(v1309);
    v1309 = v1310;
  }
  while (v1310);
LABEL_2121:
  v1311 = v1365[0];
  v1365[0] = 0;
  if (v1311)
    operator delete(v1311);
  v1312 = v1369[0];
  if (v1369[0])
  {
    do
    {
      v1313 = (_QWORD *)*v1312;
      operator delete(v1312);
      v1312 = v1313;
    }
    while (v1313);
  }
  v1314 = v1368[0];
  v1368[0] = 0;
  if (v1314)
    operator delete(v1314);
  if (v363)
    operator delete(v363);
  return kdebug_trace();
}

void sub_223B769D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a69;
  void *v70;

  if (LOBYTE(STACK[0x328]) && SLOBYTE(STACK[0x327]) < 0)
    operator delete((void *)STACK[0x310]);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x6E0]);
  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  if (SLOBYTE(STACK[0x51F]) < 0)
    operator delete((void *)STACK[0x508]);
  sub_22322E828((uint64_t)&a69);
  sub_22322E828((uint64_t)&STACK[0x210]);
  if (a63)
  {
    operator delete(a63);
    v70 = *(void **)a56;
    if (!*(_QWORD *)a56)
    {
LABEL_10:
      sub_2231874DC((uint64_t)&STACK[0x250]);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v70 = *(void **)a56;
    if (!*(_QWORD *)a56)
      goto LABEL_10;
  }
  *(_QWORD *)(a56 + 8) = v70;
  operator delete(v70);
  sub_2231874DC((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

uint64_t sub_223B78024(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  char **v9;
  void **v10;
  uint64_t v11;
  char **v12;
  unint64_t v13;
  uint64_t v14;
  char **v15;
  void *v16;
  char **v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t i;
  uint64_t *v41;
  uint64_t *v42;
  _QWORD *v43;
  __int128 v44;
  uint64_t *v45;
  uint64_t v46;

  if (a1 != a2)
  {
    sub_2233320C8((_QWORD *)a1, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    sub_22362017C(a1 + 24, *(char ***)(a2 + 24), *(_QWORD *)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
    sub_223B26850((char **)(a1 + 48), *(uint64_t **)(a2 + 48), *(uint64_t **)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 5);
  }
  v4 = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v4;
  v5 = *(_QWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 84) = v5;
  v6 = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v6;
  v7 = *(_OWORD *)(a2 + 108);
  v8 = *(_OWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 124) = v8;
  *(_OWORD *)(a1 + 108) = v7;
  if (a1 != a2)
  {
    v10 = (void **)(a1 + 144);
    v9 = *(char ***)(a1 + 144);
    v12 = *(char ***)(a2 + 144);
    v11 = *(_QWORD *)(a2 + 152);
    v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v12) >> 3);
    v14 = *(_QWORD *)(a1 + 160);
    if (0xAAAAAAAAAAAAAAABLL * ((v14 - (uint64_t)v9) >> 3) < v13)
    {
      if (v9)
      {
        v15 = *(char ***)(a1 + 152);
        v16 = *(void **)(a1 + 144);
        if (v15 != v9)
        {
          v17 = *(char ***)(a1 + 152);
          do
          {
            v19 = *(v17 - 3);
            v17 -= 3;
            v18 = v19;
            if (v19)
            {
              *(v15 - 2) = v18;
              operator delete(v18);
            }
            v15 = v17;
          }
          while (v17 != v9);
          v16 = *v10;
        }
        *(_QWORD *)(a1 + 152) = v9;
        operator delete(v16);
        v14 = 0;
        *v10 = 0;
        *(_QWORD *)(a1 + 152) = 0;
        *(_QWORD *)(a1 + 160) = 0;
      }
      if (v13 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_56;
      v24 = 0xAAAAAAAAAAAAAAABLL * (v14 >> 3);
      v25 = 2 * v24;
      if (2 * v24 <= v13)
        v25 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v12) >> 3);
      v26 = v24 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v25;
      if (v26 > 0xAAAAAAAAAAAAAAALL)
LABEL_56:
        sub_22316E078();
      v27 = 3 * v26;
      v28 = operator new(24 * v26);
      *(_QWORD *)(a1 + 144) = v28;
      *(_QWORD *)(a1 + 152) = v28;
      *(_QWORD *)(a1 + 160) = &v28[v27];
      v29 = sub_223B24A58(a1 + 160, (uint64_t)v12, v11, v28);
LABEL_34:
      *(_QWORD *)(a1 + 152) = v29;
LABEL_43:
      sub_22342D7E8((_QWORD *)(a1 + 168), *(char **)(a2 + 168), *(char **)(a2 + 176), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 2);
      sub_22342D7E8((_QWORD *)(a1 + 192), *(char **)(a2 + 192), *(char **)(a2 + 200), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 2);
      sub_2233320C8((_QWORD *)(a1 + 216), *(char **)(a2 + 216), *(char **)(a2 + 224), (uint64_t)(*(_QWORD *)(a2 + 224) - *(_QWORD *)(a2 + 216)) >> 3);
      sub_22362017C(a1 + 240, *(char ***)(a2 + 240), *(_QWORD *)(a2 + 248), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 3));
      sub_223B26850((char **)(a1 + 264), *(uint64_t **)(a2 + 264), *(uint64_t **)(a2 + 272), (uint64_t)(*(_QWORD *)(a2 + 272) - *(_QWORD *)(a2 + 264)) >> 5);
      goto LABEL_44;
    }
    v20 = *(_QWORD **)(a1 + 152);
    if (0xAAAAAAAAAAAAAAABLL * ((char **)v20 - v9) < v13)
    {
      v21 = (uint64_t)&v12[(char **)v20 - v9];
      if (v20 != v9)
      {
        v22 = 8 * ((char **)v20 - v9);
        do
        {
          if (v12 != v9)
            sub_223B7E7B8(v9, *v12, v12[1], (v12[1] - *v12) >> 4);
          v12 += 3;
          v9 += 3;
          v22 -= 24;
        }
        while (v22);
        v9 = *(char ***)(a1 + 152);
      }
      v29 = sub_223B24A58(a1 + 160, v21, v11, v9);
      goto LABEL_34;
    }
    if (v12 == (char **)v11)
    {
      v23 = *(_QWORD **)(a1 + 144);
      if (v20 == v9)
      {
LABEL_42:
        *(_QWORD *)(a1 + 152) = v23;
        goto LABEL_43;
      }
    }
    else
    {
      v23 = *(_QWORD **)(a1 + 144);
      do
      {
        if (v12 != v9)
          sub_223B7E7B8(v9, *v12, v12[1], (v12[1] - *v12) >> 4);
        v12 += 3;
        v9 += 3;
        v23 += 3;
      }
      while (v12 != (char **)v11);
      v20 = *(_QWORD **)(a1 + 152);
      if (v20 == v23)
        goto LABEL_42;
    }
    v30 = v20;
    do
    {
      v32 = (void *)*(v30 - 3);
      v30 -= 3;
      v31 = v32;
      if (v32)
      {
        *(v20 - 2) = v31;
        operator delete(v31);
      }
      v20 = v30;
    }
    while (v30 != v23);
    goto LABEL_42;
  }
LABEL_44:
  v33 = *(_QWORD *)(a2 + 288);
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v33;
  v34 = *(_QWORD *)(a2 + 300);
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 308);
  *(_QWORD *)(a1 + 300) = v34;
  v35 = *(_QWORD *)(a2 + 312);
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 312) = v35;
  v36 = *(_OWORD *)(a2 + 324);
  v37 = *(_OWORD *)(a2 + 340);
  *(_DWORD *)(a1 + 356) = *(_DWORD *)(a2 + 356);
  *(_OWORD *)(a1 + 340) = v37;
  *(_OWORD *)(a1 + 324) = v36;
  if (a1 != a2)
  {
    sub_22342D7E8((_QWORD *)(a1 + 360), *(char **)(a2 + 360), *(char **)(a2 + 368), (uint64_t)(*(_QWORD *)(a2 + 368) - *(_QWORD *)(a2 + 360)) >> 2);
    sub_22342D7E8((_QWORD *)(a1 + 384), *(char **)(a2 + 384), *(char **)(a2 + 392), (uint64_t)(*(_QWORD *)(a2 + 392) - *(_QWORD *)(a2 + 384)) >> 2);
    *(_DWORD *)(a1 + 440) = *(_DWORD *)(a2 + 440);
    v38 = *(uint64_t **)(a2 + 424);
    v39 = *(_QWORD *)(a1 + 416);
    if (!v39)
      goto LABEL_51;
    for (i = 0; i != v39; ++i)
      *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * i) = 0;
    v41 = *(uint64_t **)(a1 + 424);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 432) = 0;
    if (v41)
    {
      while (v38)
      {
        *((_OWORD *)v41 + 1) = *((_OWORD *)v38 + 1);
        v41[4] = v38[4];
        v42 = (uint64_t *)*v41;
        sub_2234838BC(a1 + 408, v41);
        v38 = (uint64_t *)*v38;
        v41 = v42;
        if (!v42)
          goto LABEL_51;
      }
      do
      {
        v45 = (uint64_t *)*v41;
        operator delete(v41);
        v41 = v45;
      }
      while (v45);
    }
    else
    {
LABEL_51:
      while (v38)
      {
        v43 = operator new(0x28uLL);
        *v43 = 0;
        v43[1] = 0;
        v44 = *((_OWORD *)v38 + 1);
        v43[4] = v38[4];
        *((_OWORD *)v43 + 1) = v44;
        v43[1] = sub_22456636C((unsigned __int8 *)v43 + 16);
        sub_2234838BC(a1 + 408, v43);
        v38 = (uint64_t *)*v38;
      }
    }
  }
  v46 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 454) = *(_QWORD *)(a2 + 454);
  *(_QWORD *)(a1 + 448) = v46;
  return a1;
}

void sub_223B784FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 152) = v2;
  _Unwind_Resume(a1);
}

void sub_223B78504(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 152) = v2;
  _Unwind_Resume(a1);
}

void sub_223B7850C(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_223B7852C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_223B78554(uint64_t a1, float *a2, const char *a3)
{
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  void *__dst[2];
  unint64_t v14;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v6 = strlen(a3);
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v7 = (void *)v6;
    if (v6 >= 0x17)
    {
      v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v9 = v6 | 7;
      v10 = v9 + 1;
      v8 = (void **)operator new(v9 + 1);
      __dst[1] = v7;
      v14 = v10 | 0x8000000000000000;
      __dst[0] = v8;
    }
    else
    {
      HIBYTE(v14) = v6;
      v8 = __dst;
      if (!v6)
      {
LABEL_10:
        *((_BYTE *)v7 + (_QWORD)v8) = 0;
        *(_QWORD *)&v12 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
        *((_QWORD *)&v12 + 1) = 2;
        v11 = sub_2241471F8();
        sub_2231AF940((uint64_t)v11, a1, a2, (uint64_t)__dst, &v12);
        if (SHIBYTE(v14) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v8, a3, (size_t)v7);
    goto LABEL_10;
  }
}

void sub_223B78680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223B7869C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  std::mutex *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  std::mutex *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t *i;
  _OWORD *v30;
  __int128 v31;
  uint64_t *v32;
  void *v33;
  float32x2_t *v34;
  int32x4_t v35;
  int32x4_t v36;
  float32x2_t v37;
  __int128 v38;
  float32x4_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  float32x2_t v43;
  int v44;
  int v45;
  float32x2_t v46;
  float v47;
  float v48;
  BOOL v49;
  float v50;
  std::string::size_type size;
  std::string *v52;
  std::string::size_type v53;
  std::string::size_type v54;
  int v55;
  BOOL v56;
  uint64_t v58;
  float32x4_t v59;
  float32x4_t v60;
  uint64_t *j;
  _QWORD *v62;
  unint64_t v63;
  int8x8_t v64;
  uint8x8_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v71;
  uint64_t v73;
  float32x2_t *v74;
  int32x4_t v75;
  int32x4_t v76;
  float32x2_t v77;
  __int128 v78;
  float32x4_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  float32x2_t v83;
  int v84;
  int v85;
  float32x2_t v86;
  float v87;
  float v88;
  float v89;
  float32x4_t v90;
  unsigned __int8 *v92;
  std::string __p[16];
  __int128 v94;
  __int128 v95;
  int v96;
  std::string v97;
  __int128 v98;
  int8x16_t v99;
  int8x16_t v100;
  float32x2_t v101;
  unsigned __int32 v102;
  int v103;
  uint64_t v104;
  __int32 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  int v119;
  _BYTE v120[32];
  _DWORD v121[88];
  uint64_t v122;

  v122 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v4 = sub_2241471F8();
    v5 = v4[2];
    if (!v5)
    {
      v6 = v4;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v5 = v6[2];
    }
    v7 = *(_QWORD *)(v5 + 64);
    v8 = (std::mutex *)(v7 + 32);
    std::mutex::lock((std::mutex *)(v7 + 32));
    v10 = *(_QWORD *)(v7 + 96);
    v9 = *(_QWORD *)(v7 + 104);
    std::mutex::unlock(v8);
    if (v10 != v9)
    {
      *(_QWORD *)v120 = "cv3d.recon.";
      *(_QWORD *)&v120[8] = 11;
      v11 = *((unsigned __int8 *)a2 + 23);
      if ((v11 & 0x80u) == 0)
        v12 = a2;
      else
        v12 = (uint64_t *)*a2;
      if ((v11 & 0x80u) != 0)
        v11 = a2[1];
      *(_QWORD *)&v120[16] = v12;
      *(_QWORD *)&v120[24] = v11;
      sub_2231A9820((uint64_t)v120, (uint64_t)v121, 0, 0, __p);
      sub_2241471F8();
      v13 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      v15 = v14;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p[0].__r_.__value_.__l.__data_);
        if (!v15)
          return;
      }
      else if (!v14)
      {
        return;
      }
      v16 = *(uint64_t **)(v3 + 56);
      if (v16)
      {
        v90 = (float32x4_t)vdupq_n_s32(0x3F666666u);
        while (1)
        {
          *(_QWORD *)v120 = "cv3d.recon.";
          *(_QWORD *)&v120[8] = 11;
          v17 = *((unsigned __int8 *)a2 + 23);
          if ((v17 & 0x80u) == 0)
            v18 = a2;
          else
            v18 = (uint64_t *)*a2;
          if ((v17 & 0x80u) != 0)
            v17 = a2[1];
          *(_QWORD *)&v120[16] = v18;
          *(_QWORD *)&v120[24] = v17;
          sub_2231A9820((uint64_t)v120, (uint64_t)v121, 0, 0, &v97);
          sub_224569D7C();
          sub_224569A80();
          v92 = (unsigned __int8 *)(v16 + 2);
          if (!os_variant_has_internal_diagnostics())
            goto LABEL_42;
          v19 = sub_2241471F8();
          v20 = v19[2];
          if (!v20)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v20 = v19[2];
          }
          v21 = *(_QWORD *)(v20 + 64);
          v22 = (std::mutex *)(v21 + 32);
          std::mutex::lock((std::mutex *)(v21 + 32));
          v24 = *(_QWORD *)(v21 + 96);
          v23 = *(_QWORD *)(v21 + 104);
          std::mutex::unlock(v22);
          if (v24 == v23)
            goto LABEL_42;
          sub_2241471F8();
          v25 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25))
            goto LABEL_42;
          v94 = 0u;
          v95 = 0u;
          v96 = 728325608;
          kdebug_trace();
          v26 = *(float **)a1[1];
          sub_2241498F4((uint64_t)__p, 0);
          v27.i64[0] = v16[6];
          v27.i32[2] = *((_DWORD *)v16 + 14);
          v28 = vmulq_f32(v27, v90);
          v105 = v28.i32[2];
          v104 = v28.i64[0];
          for (i = (uint64_t *)v16[61]; i; i = (uint64_t *)*i)
          {
            if (sub_223340F28(v26, (uint64_t)(i + 2)))
            {
              *(_QWORD *)v120 = i + 2;
              v34 = (float32x2_t *)sub_223B7F1FC(v26, (uint64_t)(i + 2), (uint64_t)&unk_2245BA939, (_OWORD **)v120);
              *(float32x2_t *)v35.i8 = v34[4];
              v35.i32[2] = v34[5].i32[0];
              *(float32x2_t *)v36.i8 = v34[6];
              v36.i32[2] = v34[7].i32[0];
              v37.i32[0] = v34[9].i32[0];
              *(_QWORD *)&v38 = vzip1q_s32(v35, v36).u64[0];
              *(float32x2_t *)v39.f32 = v34[10];
              v39.i32[2] = v34[11].i32[0];
              v40 = (int8x16_t)vnegq_f32(v39);
              v41 = (int8x16_t)vtrn2q_s32(v35, v36);
              v41.i32[2] = HIDWORD(*(_QWORD *)&v34[8]);
              v42 = (int8x16_t)vzip2q_s32(v35, v36);
              v43 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v38, *(float *)v40.i32), *(float32x2_t *)v41.i8, *(float32x2_t *)v39.f32, 1), *(float32x2_t *)v42.i8, v39, 2);
              v42.i32[2] = v37.i32[0];
              v45 = *((_DWORD *)i + 8);
              v44 = *((_DWORD *)i + 9);
              v46 = vmls_lane_f32(vmul_f32(v34[8], *(float32x2_t *)v40.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v34[8], 1), *(float32x2_t *)v39.f32, 1);
              v39.i64[0] = vextq_s8(v40, v40, 8uLL).u64[0];
              *((_QWORD *)&v38 + 1) = *(_QWORD *)&v34[8];
              v40.i32[3] = 0;
              v40.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v41, 0).i32[3];
              *(uint64_t *)((char *)v40.i64 + 4) = vextq_s8(v41, v42, 4uLL).u64[0];
              v42.i64[1] = vdupq_laneq_s32((int32x4_t)v42, 2).u32[0];
              v99 = v40;
              v100 = v42;
              v98 = v38;
              v101 = v43;
              v102 = vmla_f32(v46, *(float32x2_t *)v39.f32, v37).u32[0];
              v103 = 1065353216;
              v106 = xmmword_224651370;
              sub_223207E58(&v114, (int *)&v106);
              v47 = (float)(v45 + v44) * 0.001;
              v48 = v47 + 0.1;
              v108 = v115;
              v49 = v47 <= 0.5;
              v50 = 0.6;
              if (v49)
                v50 = v48;
              v109 = v116;
              v110 = v117;
              v111 = v118;
              v112 = v119;
              v113 = 0xA0000000ALL;
              *((_QWORD *)&v107 + 1) = &off_24EC20868;
              *(_QWORD *)&v107 = &off_24EC207B8;
              sub_224002D14((uint64_t)&v107, (int32x2_t *)&v98, &v104, (uint64_t)v120, v50);
              sub_22414E9E0((uint64_t)__p, (uint64_t)v120);
              sub_22316F8F4((uint64_t *)v120);
            }
          }
          sub_2245664AC(v92, v120);
          v30 = operator new(0x28uLL);
          v31 = *(_OWORD *)&v120[16];
          *v30 = *(_OWORD *)v120;
          v30[1] = v31;
          *((_DWORD *)v30 + 8) = v121[0];
          *((_BYTE *)v30 + 36) = 0;
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25))
            break;
          *(_QWORD *)v120 = v30;
          *(_OWORD *)&v120[8] = xmmword_2245C4640;
          *(_QWORD *)&v107 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v107 + 1) = 2;
          v32 = sub_2241471F8();
          sub_223452794((uint64_t)v32, v25, (uint64_t)__p, (uint64_t)v120, &v107);
          if ((v120[23] & 0x80000000) != 0)
          {
            v33 = *(void **)v120;
LABEL_40:
            operator delete(v33);
          }
          sub_22316F8F4((uint64_t *)__p);
          kdebug_trace();
LABEL_42:
          v94 = 0u;
          v95 = 0u;
          v96 = 728325624;
          kdebug_trace();
          size = HIBYTE(v97.__r_.__value_.__r.__words[2]);
          if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v97.__r_.__value_.__l.__size_;
          if (size >= 0x11)
          {
            v52 = &v97;
            if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v52 = (std::string *)v97.__r_.__value_.__r.__words[0];
            v53 = v52->__r_.__value_.__r.__words[0];
            v54 = v52->__r_.__value_.__l.__size_;
            v55 = v52->__r_.__value_.__s.__data_[16];
            v56 = v53 == 0x6365722E64337663 && v54 == 0x73746174532E6E6FLL;
            if (v56 && v55 == 46)
            {
              sub_223187510();
              v58 = *(_QWORD *)a1[1];
              sub_2241498F4((uint64_t)__p, 0);
              v59.i64[0] = v16[6];
              v59.i32[2] = *((_DWORD *)v16 + 14);
              v60 = vmulq_f32(v59, v90);
              v105 = v60.i32[2];
              v104 = v60.i64[0];
              for (j = (uint64_t *)v16[61]; j; j = (uint64_t *)*j)
              {
                v62 = j + 2;
                v63 = sub_22456636C((unsigned __int8 *)j + 16);
                v64 = *(int8x8_t *)(v58 + 8);
                if (v64)
                {
                  v65 = (uint8x8_t)vcnt_s8(v64);
                  v65.i16[0] = vaddlv_u8(v65);
                  if (v65.u32[0] > 1uLL)
                  {
                    v66 = v63;
                    if (v63 >= *(_QWORD *)&v64)
                      v66 = v63 % *(_QWORD *)&v64;
                  }
                  else
                  {
                    v66 = (*(_QWORD *)&v64 - 1) & v63;
                  }
                  v67 = *(_QWORD **)(*(_QWORD *)v58 + 8 * v66);
                  if (v67)
                  {
                    v68 = (_QWORD *)*v67;
                    if (v68)
                    {
                      if (v65.u32[0] < 2uLL)
                      {
                        v69 = *(_QWORD *)&v64 - 1;
                        while (1)
                        {
                          v73 = v68[1];
                          if (v63 == v73)
                          {
                            if (v68[2] == *v62 && v68[3] == j[3])
                              goto LABEL_86;
                          }
                          else if ((v73 & v69) != v66)
                          {
                            goto LABEL_58;
                          }
                          v68 = (_QWORD *)*v68;
                          if (!v68)
                            goto LABEL_58;
                        }
                      }
                      do
                      {
                        v71 = v68[1];
                        if (v63 == v71)
                        {
                          if (v68[2] == *v62 && v68[3] == j[3])
                          {
LABEL_86:
                            *(_QWORD *)v120 = j + 2;
                            v74 = (float32x2_t *)sub_223B7F1FC((float *)v58, (uint64_t)(j + 2), (uint64_t)&unk_2245BA939, (_OWORD **)v120);
                            *(float32x2_t *)v75.i8 = v74[4];
                            v75.i32[2] = v74[5].i32[0];
                            *(float32x2_t *)v76.i8 = v74[6];
                            v76.i32[2] = v74[7].i32[0];
                            v77.i32[0] = v74[9].i32[0];
                            *(_QWORD *)&v78 = vzip1q_s32(v75, v76).u64[0];
                            *(float32x2_t *)v79.f32 = v74[10];
                            v79.i32[2] = v74[11].i32[0];
                            v80 = (int8x16_t)vnegq_f32(v79);
                            v81 = (int8x16_t)vtrn2q_s32(v75, v76);
                            v81.i32[2] = HIDWORD(*(_QWORD *)&v74[8]);
                            v82 = (int8x16_t)vzip2q_s32(v75, v76);
                            v83 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v78, *(float *)v80.i32), *(float32x2_t *)v81.i8, *(float32x2_t *)v79.f32, 1), *(float32x2_t *)v82.i8, v79, 2);
                            v82.i32[2] = v77.i32[0];
                            v85 = *((_DWORD *)j + 8);
                            v84 = *((_DWORD *)j + 9);
                            v86 = vmls_lane_f32(vmul_f32(v74[8], *(float32x2_t *)v80.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v74[8], 1), *(float32x2_t *)v79.f32, 1);
                            v79.i64[0] = vextq_s8(v80, v80, 8uLL).u64[0];
                            *((_QWORD *)&v78 + 1) = *(_QWORD *)&v74[8];
                            v80.i32[3] = 0;
                            v80.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v81, 0).i32[3];
                            *(uint64_t *)((char *)v80.i64 + 4) = vextq_s8(v81, v82, 4uLL).u64[0];
                            v82.i64[1] = vdupq_laneq_s32((int32x4_t)v82, 2).u32[0];
                            v99 = v80;
                            v100 = v82;
                            v98 = v78;
                            v101 = v83;
                            v102 = vmla_f32(v86, *(float32x2_t *)v79.f32, v77).u32[0];
                            v103 = 1065353216;
                            v106 = xmmword_224651370;
                            sub_223207E58(&v114, (int *)&v106);
                            v87 = (float)(v85 + v84) * 0.001;
                            v88 = v87 + 0.1;
                            v108 = v115;
                            v49 = v87 <= 0.5;
                            v89 = 0.6;
                            if (v49)
                              v89 = v88;
                            v109 = v116;
                            v110 = v117;
                            v111 = v118;
                            v112 = v119;
                            v113 = 0xA0000000ALL;
                            *((_QWORD *)&v107 + 1) = &off_24EC20868;
                            *(_QWORD *)&v107 = &off_24EC207B8;
                            sub_224002D14((uint64_t)&v107, (int32x2_t *)&v98, &v104, (uint64_t)v120, v89);
                            sub_22414E9E0((uint64_t)__p, (uint64_t)v120);
                            sub_22316F8F4((uint64_t *)v120);
                            break;
                          }
                        }
                        else
                        {
                          if (v71 >= *(_QWORD *)&v64)
                            v71 %= *(_QWORD *)&v64;
                          if (v71 != v66)
                            break;
                        }
                        v68 = (_QWORD *)*v68;
                      }
                      while (v68);
                    }
                  }
                }
LABEL_58:
                ;
              }
              sub_2245664AC(v92, v120);
              sub_22316F8F4((uint64_t *)__p);
            }
          }
          kdebug_trace();
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v97.__r_.__value_.__l.__data_);
          v16 = (uint64_t *)*v16;
          if (!v16)
            return;
        }
        v33 = v30;
        goto LABEL_40;
      }
    }
  }
}

void sub_223B790C4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223B79198(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t j;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t k;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t m;

  if (*(_QWORD *)(a1 + 64))
  {
    v2 = *(_QWORD **)(a1 + 56);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        sub_22388925C((uint64_t)(v2 + 8));
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    *(_QWORD *)(a1 + 56) = 0;
    v4 = *(_QWORD *)(a1 + 48);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 64) = 0;
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v6 = *(_QWORD **)(a1 + 16);
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        operator delete(v6);
        v6 = v7;
      }
      while (v7);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v8 = *(_QWORD *)(a1 + 8);
    if (v8)
    {
      for (j = 0; j != v8; ++j)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * j) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_BYTE *)(a1 + 2664))
    *(_BYTE *)(a1 + 2664) = 0;
  if (*(_QWORD *)(a1 + 104))
  {
    v10 = *(_QWORD **)(a1 + 96);
    if (v10)
    {
      do
      {
        v11 = (_QWORD *)*v10;
        sub_22388925C((uint64_t)(v10 + 8));
        operator delete(v10);
        v10 = v11;
      }
      while (v11);
    }
    *(_QWORD *)(a1 + 96) = 0;
    v12 = *(_QWORD *)(a1 + 88);
    if (v12)
    {
      for (k = 0; k != v12; ++k)
        *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * k) = 0;
    }
    *(_QWORD *)(a1 + 104) = 0;
  }
  if (*(_QWORD *)(a1 + 3136))
  {
    v14 = *(_QWORD **)(a1 + 3128);
    if (v14)
    {
      do
      {
        v15 = (_QWORD *)*v14;
        operator delete(v14);
        v14 = v15;
      }
      while (v15);
    }
    *(_QWORD *)(a1 + 3128) = 0;
    v16 = *(_QWORD *)(a1 + 3120);
    if (v16)
    {
      for (m = 0; m != v16; ++m)
        *(_QWORD *)(*(_QWORD *)(a1 + 3112) + 8 * m) = 0;
    }
    *(_QWORD *)(a1 + 3136) = 0;
  }
  sub_2238891A0((uint64_t *)(a1 + 3168));
}

uint64_t sub_223B79304(float *a1, _QWORD *a2)
{
  float32x4_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _OWORD *v9;
  float32x4_t *v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  _OWORD *v34[3];

  kdebug_trace();
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = *a2 + 128;
    do
    {
      v7 = v6 - 128;
      if ((*(_BYTE *)(v6 + 112) & 0x30) != 0)
      {
        v8 = sub_22342DA5C(a1, v7);
        if (v8)
        {
          sub_2231AFBB8(a1, v8, (uint64_t)v34);
          v9 = v34[0];
          v34[0] = 0;
          if (v9)
            operator delete(v9);
        }
      }
      else
      {
        v4.i64[0] = *(_QWORD *)(v6 + 48);
        v4.i32[2] = *(_DWORD *)(v6 + 56);
        v24 = (int32x4_t)v4;
        v4.i64[0] = *(_QWORD *)(v6 + 64);
        v4.i32[2] = *(_DWORD *)(v6 + 72);
        v23 = (int32x4_t)v4;
        v4.i64[0] = *(_QWORD *)(v6 + 80);
        v4.i32[2] = *(_DWORD *)(v6 + 88);
        v25 = (int8x16_t)v4;
        v4.i64[0] = *(_QWORD *)(v6 + 96);
        v4.i32[2] = *(_DWORD *)(v6 + 104);
        v22 = v4;
        v26 = *(float32x4_t *)(v6 - 16);
        v27 = *(float32x4_t *)v6;
        v28 = *(float32x4_t *)(v6 + 16);
        v29 = *(float32x4_t *)(v6 + 32);
        v30 = *(float32x4_t *)(v6 - 96);
        v31 = *(float32x4_t *)(v6 - 80);
        v32 = *(float32x4_t *)(v6 - 64);
        v33 = *(float32x4_t *)(v6 - 48);
        v34[0] = (_OWORD *)(v6 - 128);
        v10 = (float32x4_t *)sub_223B7F1FC(a1, v7, (uint64_t)&unk_2245BA939, v34);
        v11.i64[0] = vzip1q_s32(v24, v23).u64[0];
        v12 = (int8x16_t)vnegq_f32(v22);
        v11.i64[1] = v25.u32[0];
        v13 = (int8x16_t)vtrn2q_s32(v24, v23);
        v13.i32[2] = v25.i32[1];
        v14 = vzip2q_s32(v24, v23);
        v15 = (float32x4_t)v14;
        v15.i32[2] = v25.i32[2];
        v16.i32[3] = 0;
        v16.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v13, 0).i32[3];
        *(uint64_t *)((char *)v16.i64 + 4) = vextq_s8(v13, v11, 4uLL).u64[0];
        v15.i64[1] = vdupq_laneq_s32((int32x4_t)v15, 2).u32[0];
        *(float32x2_t *)v17.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v11.i8, *(float *)v12.i32), *(float32x2_t *)v13.i8, *(float32x2_t *)v22.f32, 1), *(float32x2_t *)v14.i8, v22, 2);
        v17.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v12.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25.i8, 1), *(float32x2_t *)v22.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)).u32[0]);
        v18 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v11, v26.f32[0]), v16, *(float32x2_t *)v26.f32, 1), v15, v26, 2), v17, v26, 3);
        v19 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v11, v27.f32[0]), v16, *(float32x2_t *)v27.f32, 1), v15, v27, 2), v17, v27, 3);
        v20 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v11, v28.f32[0]), v16, *(float32x2_t *)v28.f32, 1), v15, v28, 2), v17, v28, 3);
        v4 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v11, v29.f32[0]), v16, *(float32x2_t *)v29.f32, 1), v15, v29, 2), v17, v29, 3);
        v10[2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, v30.f32[0]), v19, *(float32x2_t *)v30.f32, 1), v20, v30, 2), v4, v30, 3);
        v10[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, v31.f32[0]), v19, *(float32x2_t *)v31.f32, 1), v20, v31, 2), v4, v31, 3);
        v10[4] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, v32.f32[0]), v19, *(float32x2_t *)v32.f32, 1), v20, v32, 2), v4, v32, 3);
        v10[5] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, v33.f32[0]), v19, *(float32x2_t *)v33.f32, 1), v20, v33, 2), v4, v33, 3);
      }
      v6 += 248;
    }
    while (v6 - 128 != v5);
  }
  return kdebug_trace();
}

void sub_223B795A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2231874DC(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_223B795B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2231874DC(v1 - 128);
  _Unwind_Resume(a1);
}

uint64_t sub_223B795CC@<X0>(uint64_t a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t *v12;
  char *v13;
  _OWORD *v14;
  uint64_t (**v15)();
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t (**v37)();
  _OWORD *v38;
  uint64_t *v39;
  const void *v40;
  uint64_t v41;
  _QWORD *v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  int64_t v49;
  char *v50;
  char *v51;
  char *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v58;
  float32x2_t *v59;
  float32x2_t *v60;
  float32x2_t *v61;
  float32x2_t *v62;
  float32x2_t v63;
  unsigned __int32 v64;
  uint64_t v65;
  float32x2_t *v66;
  float32x2_t *v67;
  float32x2_t *v68;
  float32x2_t *v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  unsigned __int32 v73;
  unint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  unint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  _OWORD *v104;
  __int128 v105;
  uint64_t v106;
  const char *v107;
  size_t v108;
  unsigned __int8 v109;
  unsigned __int8 v110;
  const char *v111;
  size_t v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  size_t v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  size_t v123;
  size_t v124;
  _QWORD *p_dst;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  char v130;
  _QWORD *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  void *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  const char *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  _QWORD *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  _OWORD *v172;
  __int128 v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  std::mutex *v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  _BYTE *v184;
  _BYTE *v185;
  uint64_t v186;
  unint64_t v187;
  _BYTE *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  __n128 *v194;
  _BYTE *v195;
  size_t v196;
  unsigned __int8 v197;
  float v198;
  unsigned __int8 v199;
  double v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  std::mutex *v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  _BYTE *v208;
  _BYTE *v209;
  uint64_t v210;
  unint64_t v211;
  _BYTE *v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  __n128 *v218;
  _BYTE *v219;
  size_t v220;
  unsigned __int8 v221;
  float v222;
  unsigned __int8 v223;
  int v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  std::mutex *v228;
  uint64_t v229;
  uint64_t v230;
  char v231;
  _BYTE *v232;
  _BYTE *v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  std::mutex *v238;
  uint64_t v239;
  uint64_t v240;
  char v241;
  _BYTE *v242;
  _BYTE *v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  std::mutex *v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  _BYTE *v252;
  _BYTE *v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  std::mutex *v258;
  uint64_t v259;
  uint64_t v260;
  char v261;
  _BYTE *v262;
  _BYTE *v263;
  uint64_t v264;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  float32x2_t *v270;
  uint64_t v271;
  uint64_t *v272;
  const char *v273;
  int v274;
  uint64_t *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  float *v279;
  __int128 v280;
  __int128 v281;
  int v282;
  float v283;
  __int128 v284;
  std::__shared_weak_count *v285;
  char *v286;
  std::__shared_weak_count *v287;
  _QWORD *__dst;
  __int128 v289;
  _QWORD v290[3];
  int v291;
  const char *v292;
  int v293;
  const char *v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  __int128 v297;
  _BYTE v298[24];
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  char v305;
  char v306;
  char v307;
  char v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  char v312;
  char v313;
  char v314;
  char v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  _BYTE object[40];
  void *__p[4];
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  char v329;
  char v330;
  char v331;
  __int16 v332;
  char v333;
  uint64_t v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  char v340;
  _BYTE v341[28];
  uint64_t v342;
  int v343;
  _QWORD v344[5];

  v344[2] = *MEMORY[0x24BDAC8D0];
  v283 = a4;
  v280 = 0u;
  v281 = 0u;
  v282 = 728335872;
  kdebug_trace();
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v7 = *(_OWORD *)a2->f32;
  v8 = *(_OWORD *)a2[2].f32;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = v7;
  v9 = *(_OWORD *)a2[4].f32;
  v10 = *(_OWORD *)a2[6].f32;
  v270 = a2;
  v271 = a1;
  *(_OWORD *)(a3 + 64) = v8;
  *(_OWORD *)(a3 + 80) = v9;
  v278 = 0;
  v279 = &v283;
  v11 = *(_OWORD *)(a1 + 2648);
  *(_OWORD *)(a3 + 96) = v10;
  *(_OWORD *)(a3 + 112) = v11;
  *(_BYTE *)(a3 + 128) = *(_BYTE *)(a1 + 2664);
  v12 = *(uint64_t **)(a1 + 56);
  if (v12)
  {
    v13 = &v330;
    v14 = (_OWORD *)((char *)v290 + 3);
    v15 = &off_24EC5FC38;
    while (1)
    {
      v329 = 0;
      v330 = 0;
      v331 = 0;
      v340 = 0;
      v341[0] = 0;
      v341[16] = 0;
      *(_OWORD *)&object[24] = 0u;
      memset(__p, 0, sizeof(__p));
      v321 = 0u;
      v322 = 0u;
      v323 = 0u;
      v324 = 0u;
      LOBYTE(v325) = 0;
      v335 = 0uLL;
      v334 = 0;
      LOBYTE(v336) = 0;
      *(_QWORD *)&v341[20] = 0;
      v342 = 0;
      v343 = 0;
      memset(object, 0, 17);
      sub_223B7B9E8(&v279, (uint64_t *)v12[61], object);
      *(_OWORD *)object = *((_OWORD *)v12 + 1);
      object[16] = *((_BYTE *)v12 + 524);
      v17 = operator new(0xA8uLL);
      v17[2] = 0;
      *v17 = v15;
      v17[1] = 0;
      v272 = v12 + 8;
      v18 = sub_2239367D8((uint64_t)(v17 + 3), (uint64_t)(v12 + 8));
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v321 + 1);
      *(_QWORD *)&v321 = v18;
      *((_QWORD *)&v321 + 1) = v17;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      sub_223B6A9C0((uint64_t)(v12 + 4), 0, (uint64_t)&v297);
      v22 = operator new(0x198uLL);
      v22[2] = 0;
      *v22 = &off_24EC1F0A0;
      v22[1] = 0;
      v23 = sub_223180698((uint64_t)(v22 + 3), (uint64_t)&v297);
      v275 = v12 + 2;
      *v14 = *((_OWORD *)v12 + 1);
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v324 + 1);
      *(_QWORD *)&v324 = v23;
      *((_QWORD *)&v324 + 1) = v22;
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
          break;
      }
      if (v329)
        goto LABEL_16;
LABEL_17:
      *(_OWORD *)v13 = *v14;
      v331 = 1;
      v332 = v284;
      v333 = BYTE2(v284);
      v334 = 0;
      sub_22316F8F4((uint64_t *)&v297);
      v27 = operator new(0xA8uLL);
      v27[2] = 0;
      *v27 = v15;
      v27[1] = 0;
      v28 = sub_2239367D8((uint64_t)(v27 + 3), (uint64_t)(v12 + 35));
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v322 + 1);
      *(_QWORD *)&v322 = v28;
      *((_QWORD *)&v322 + 1) = v27;
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      sub_223B6A9C0((uint64_t)(v12 + 4), 1, (uint64_t)&v297);
      v32 = operator new(0x198uLL);
      v32[2] = 0;
      *v32 = &off_24EC1F0A0;
      v32[1] = 0;
      v33 = sub_223180698((uint64_t)(v32 + 3), (uint64_t)&v297);
      *v14 = *(_OWORD *)v275;
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v335 + 1);
      *(_QWORD *)&v335 = v33;
      *((_QWORD *)&v335 + 1) = v32;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
          v37 = v15;
          if (!v340)
            goto LABEL_28;
LABEL_27:
          v340 = 0;
          goto LABEL_28;
        }
      }
      v37 = v15;
      if (v340)
        goto LABEL_27;
LABEL_28:
      v38 = v14;
      *(_OWORD *)v341 = *v14;
      v341[16] = 1;
      *(_WORD *)&v341[17] = v284;
      v341[19] = BYTE2(v284);
      *(_QWORD *)&v341[20] = 0;
      sub_22316F8F4((uint64_t *)&v297);
      v39 = v12;
      v40 = (const void *)v12[56];
      v41 = v12[57];
      v42 = operator new(0x30uLL);
      v42[1] = 0;
      v42[2] = 0;
      *v42 = &unk_24EC5FC88;
      v42[3] = 0;
      v42[4] = 0;
      v42[5] = 0;
      v49 = v41 - (_QWORD)v40;
      if (v49)
      {
        if (v49 < 0)
          sub_22316E078();
        v50 = v13;
        v51 = (char *)operator new(v49);
        v42[3] = v51;
        v52 = &v51[4 * (v49 >> 2)];
        v42[5] = v52;
        memcpy(v51, v40, v49);
        v42[4] = v52;
        v13 = v50;
      }
      v53 = (std::__shared_weak_count *)*((_QWORD *)&v323 + 1);
      *(_QWORD *)&v323 = v42 + 3;
      *((_QWORD *)&v323 + 1) = v42;
      v14 = v38;
      v15 = v37;
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v56 = *(uint64_t *)((char *)v39 + 516);
      v342 = v56;
      v343 = *((_DWORD *)v39 + 15);
      if (*(_BYTE *)(a3 + 128))
      {
        if (*v275 == *(_QWORD *)(a3 + 112) && v275[1] == *(_QWORD *)(a3 + 120))
        {
          HIDWORD(v278) = v56;
          *(float *)v43.i32 = sub_223B7EE5C(v272);
          LODWORD(v278) = v43.i32[0];
        }
      }
      v58 = v324;
      v59 = *(float32x2_t **)v324;
      v60 = *(float32x2_t **)(v324 + 8);
      while (v59 != v60)
      {
        v44.i32[0] = v59[1].i32[0];
        v46.i32[0] = *(_DWORD *)(a3 + 56);
        v47.i32[0] = *(_DWORD *)(a3 + 72);
        v48.i32[0] = *(_DWORD *)(a3 + 88);
        *(float32x2_t *)v45.i8 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a3 + 48), COERCE_FLOAT(*v59)), *(float32x2_t *)(a3 + 64), *v59, 1), *(float32x2_t *)(a3 + 80), *(float *)v44.i32);
        v46 = vmla_f32(vmla_lane_f32(vmul_f32(v46, *v59), v47, *v59, 1), *(float32x2_t *)v44.i8, v48);
        v45.u64[1] = (unint64_t)v46;
        v43.i64[0] = *(_QWORD *)(a3 + 96);
        v43.i32[2] = *(_DWORD *)(a3 + 104);
        v43 = (int8x16_t)vaddq_f32((float32x4_t)v45, (float32x4_t)v43);
        v59[1].i32[0] = v43.i32[2];
        *v59 = *(float32x2_t *)v43.i8;
        v59 = (float32x2_t *)((char *)v59 + 12);
      }
      v62 = *(float32x2_t **)(v58 + 72);
      v61 = *(float32x2_t **)(v58 + 80);
      if (v62 != v61)
      {
        v43.i64[0] = *(_QWORD *)(a3 + 48);
        v43.i32[2] = *(_DWORD *)(a3 + 56);
        v44.i64[0] = *(_QWORD *)(a3 + 64);
        v44.i32[2] = *(_DWORD *)(a3 + 72);
        v45.i64[0] = *(_QWORD *)(a3 + 80);
        v45.i32[2] = *(_DWORD *)(a3 + 88);
        v46 = (float32x2_t)vextq_s8(v43, v43, 8uLL).u64[0];
        v63 = (float32x2_t)vextq_s8(v44, v44, 8uLL).u64[0];
        v47 = (float32x2_t)vextq_s8(v45, v45, 8uLL).u64[0];
        do
        {
          v48.i32[0] = v62[1].i32[0];
          v64 = vmla_f32(vmla_lane_f32(vmul_f32(v46, *v62), v63, *v62, 1), v48, v47).u32[0];
          *v62 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v43.i8, COERCE_FLOAT(*v62)), *(float32x2_t *)v44.i8, *v62, 1), *(float32x2_t *)v45.i8, v48.f32[0]);
          v62[1].i32[0] = v64;
          v62 = (float32x2_t *)((char *)v62 + 12);
        }
        while (v62 != v61);
      }
      v65 = v335;
      v66 = *(float32x2_t **)v335;
      v67 = *(float32x2_t **)(v335 + 8);
      while (v66 != v67)
      {
        v44.i32[0] = v66[1].i32[0];
        v46.i32[0] = *(_DWORD *)(a3 + 56);
        v47.i32[0] = *(_DWORD *)(a3 + 72);
        v48.i32[0] = *(_DWORD *)(a3 + 88);
        *(float32x2_t *)v45.i8 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a3 + 48), COERCE_FLOAT(*v66)), *(float32x2_t *)(a3 + 64), *v66, 1), *(float32x2_t *)(a3 + 80), *(float *)v44.i32);
        v46 = vmla_f32(vmla_lane_f32(vmul_f32(v46, *v66), v47, *v66, 1), *(float32x2_t *)v44.i8, v48);
        v45.u64[1] = (unint64_t)v46;
        v43.i64[0] = *(_QWORD *)(a3 + 96);
        v43.i32[2] = *(_DWORD *)(a3 + 104);
        v43 = (int8x16_t)vaddq_f32((float32x4_t)v45, (float32x4_t)v43);
        v66[1].i32[0] = v43.i32[2];
        *v66 = *(float32x2_t *)v43.i8;
        v66 = (float32x2_t *)((char *)v66 + 12);
      }
      v69 = *(float32x2_t **)(v65 + 72);
      v68 = *(float32x2_t **)(v65 + 80);
      if (v69 != v68)
      {
        v43.i64[0] = *(_QWORD *)(a3 + 48);
        v43.i32[2] = *(_DWORD *)(a3 + 56);
        v44.i64[0] = *(_QWORD *)(a3 + 64);
        v44.i32[2] = *(_DWORD *)(a3 + 72);
        v45.i64[0] = *(_QWORD *)(a3 + 80);
        v45.i32[2] = *(_DWORD *)(a3 + 88);
        v70 = (float32x2_t)vextq_s8(v43, v43, 8uLL).u64[0];
        v71 = (float32x2_t)vextq_s8(v44, v44, 8uLL).u64[0];
        v72 = (float32x2_t)vextq_s8(v45, v45, 8uLL).u64[0];
        do
        {
          v48.i32[0] = v69[1].i32[0];
          v73 = vmla_f32(vmla_lane_f32(vmul_f32(v70, *v69), v71, *v69, 1), v48, v72).u32[0];
          *v69 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v43.i8, COERCE_FLOAT(*v69)), *(float32x2_t *)v44.i8, *v69, 1), *(float32x2_t *)v45.i8, v48.f32[0]);
          v69[1].i32[0] = v73;
          v69 = (float32x2_t *)((char *)v69 + 12);
        }
        while (v69 != v68);
      }
      if (*((_DWORD *)v39 + 128))
      {
        v74 = *(_QWORD *)(a3 + 8);
        if (v74 >= *(_QWORD *)(a3 + 16))
        {
          *(_QWORD *)(a3 + 8) = sub_223B7E944((__int128 **)a3, (__int128 *)object);
        }
        else
        {
          v75 = *(_OWORD *)object;
          *(_BYTE *)(v74 + 16) = object[16];
          *(_OWORD *)v74 = v75;
          *(_QWORD *)(v74 + 24) = 0;
          *(_QWORD *)(v74 + 32) = 0;
          *(_QWORD *)(v74 + 40) = 0;
          *(_QWORD *)(v74 + 48) = 0;
          *(_OWORD *)(v74 + 24) = *(_OWORD *)&object[24];
          *(void **)(v74 + 40) = __p[0];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          __p[0] = 0;
          *(_QWORD *)(v74 + 56) = 0;
          *(_QWORD *)(v74 + 64) = 0;
          *(_OWORD *)(v74 + 48) = *(_OWORD *)&__p[1];
          *(void **)(v74 + 64) = __p[3];
          memset(&__p[1], 0, 24);
          *(_OWORD *)(v74 + 72) = v321;
          v321 = 0uLL;
          *(_OWORD *)(v74 + 88) = v322;
          v322 = 0uLL;
          *(_OWORD *)(v74 + 104) = v323;
          v323 = 0uLL;
          *(_OWORD *)(v74 + 120) = v324;
          v324 = 0uLL;
          *(_BYTE *)(v74 + 136) = 0;
          *(_BYTE *)(v74 + 200) = 0;
          if (v329)
          {
            v76 = v325;
            v77 = v326;
            v78 = v328;
            *(_OWORD *)(v74 + 168) = v327;
            *(_OWORD *)(v74 + 184) = v78;
            *(_OWORD *)(v74 + 136) = v76;
            *(_OWORD *)(v74 + 152) = v77;
            *(_BYTE *)(v74 + 200) = 1;
          }
          v79 = *(_OWORD *)v13;
          v80 = *(_OWORD *)(v13 + 12);
          *(_BYTE *)(v74 + 248) = 0;
          *(_OWORD *)(v74 + 216) = v80;
          *(_OWORD *)(v74 + 204) = v79;
          *(_OWORD *)(v74 + 232) = v335;
          v335 = 0uLL;
          *(_BYTE *)(v74 + 312) = 0;
          if (v340)
          {
            v81 = v336;
            v82 = v337;
            v83 = v339;
            *(_OWORD *)(v74 + 280) = v338;
            *(_OWORD *)(v74 + 296) = v83;
            *(_OWORD *)(v74 + 248) = v81;
            *(_OWORD *)(v74 + 264) = v82;
            *(_BYTE *)(v74 + 312) = 1;
          }
          v84 = *(_OWORD *)v341;
          *(_OWORD *)(v74 + 328) = *(_OWORD *)&v341[12];
          *(_OWORD *)(v74 + 316) = v84;
          v85 = v342;
          *(_DWORD *)(v74 + 352) = v343;
          *(_QWORD *)(v74 + 344) = v85;
          *(_QWORD *)(a3 + 8) = v74 + 360;
        }
      }
      else
      {
        v86 = *(_QWORD *)(a3 + 32);
        if (v86 >= *(_QWORD *)(a3 + 40))
        {
          v16 = sub_223B7E944((__int128 **)(a3 + 24), (__int128 *)object);
        }
        else
        {
          v87 = *(_OWORD *)object;
          *(_BYTE *)(v86 + 16) = object[16];
          *(_OWORD *)v86 = v87;
          *(_QWORD *)(v86 + 24) = 0;
          *(_QWORD *)(v86 + 32) = 0;
          *(_QWORD *)(v86 + 40) = 0;
          *(_QWORD *)(v86 + 48) = 0;
          *(_OWORD *)(v86 + 24) = *(_OWORD *)&object[24];
          *(void **)(v86 + 40) = __p[0];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          __p[0] = 0;
          *(_QWORD *)(v86 + 56) = 0;
          *(_QWORD *)(v86 + 64) = 0;
          *(_OWORD *)(v86 + 48) = *(_OWORD *)&__p[1];
          *(void **)(v86 + 64) = __p[3];
          memset(&__p[1], 0, 24);
          *(_OWORD *)(v86 + 72) = v321;
          v321 = 0uLL;
          *(_OWORD *)(v86 + 88) = v322;
          v322 = 0uLL;
          *(_OWORD *)(v86 + 104) = v323;
          v323 = 0uLL;
          *(_OWORD *)(v86 + 120) = v324;
          v324 = 0uLL;
          *(_BYTE *)(v86 + 136) = 0;
          *(_BYTE *)(v86 + 200) = 0;
          if (v329)
          {
            v88 = v325;
            v89 = v326;
            v90 = v328;
            *(_OWORD *)(v86 + 168) = v327;
            *(_OWORD *)(v86 + 184) = v90;
            *(_OWORD *)(v86 + 136) = v88;
            *(_OWORD *)(v86 + 152) = v89;
            *(_BYTE *)(v86 + 200) = 1;
          }
          v91 = *(_OWORD *)v13;
          v92 = *(_OWORD *)(v13 + 12);
          *(_BYTE *)(v86 + 248) = 0;
          *(_OWORD *)(v86 + 216) = v92;
          *(_OWORD *)(v86 + 204) = v91;
          *(_OWORD *)(v86 + 232) = v335;
          v335 = 0uLL;
          *(_BYTE *)(v86 + 312) = 0;
          if (v340)
          {
            v93 = v336;
            v94 = v337;
            v95 = v339;
            *(_OWORD *)(v86 + 280) = v338;
            *(_OWORD *)(v86 + 296) = v95;
            *(_OWORD *)(v86 + 248) = v93;
            *(_OWORD *)(v86 + 264) = v94;
            *(_BYTE *)(v86 + 312) = 1;
          }
          v96 = *(_OWORD *)v341;
          *(_OWORD *)(v86 + 328) = *(_OWORD *)&v341[12];
          *(_OWORD *)(v86 + 316) = v96;
          v97 = v342;
          *(_DWORD *)(v86 + 352) = v343;
          *(_QWORD *)(v86 + 344) = v97;
          v16 = v86 + 360;
        }
        *(_QWORD *)(a3 + 32) = v16;
      }
      sub_223173E64(object);
      v12 = (uint64_t *)*v39;
      if (!*v39)
        goto LABEL_73;
    }
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if (!v329)
      goto LABEL_17;
LABEL_16:
    v329 = 0;
    goto LABEL_17;
  }
LABEL_73:
  v98 = v271;
  if (*(_QWORD *)(v271 + 3136))
  {
    v306 = 0;
    v307 = 0;
    v308 = 0;
    v313 = 0;
    v314 = 0;
    v315 = 0;
    *(_OWORD *)&v298[8] = 0u;
    v299 = 0u;
    v300 = 0u;
    v301 = 0u;
    v302 = 0u;
    v303 = 0u;
    v304 = 0u;
    v305 = 0;
    v311 = 0;
    v309 = 0;
    v310 = 0;
    v312 = 0;
    v317 = 0;
    v316 = 0;
    v318 = 0;
    v298[0] = 0;
    v297 = *(_OWORD *)(v271 + 2672);
    sub_223B7B9E8(&v279, *(uint64_t **)(v271 + 3128), &v297);
    v298[0] = 2;
    v99 = *(_QWORD *)(a3 + 8);
    if (v99 >= *(_QWORD *)(a3 + 16))
    {
      v100 = sub_2232D6118((__int128 **)a3, &v297);
    }
    else
    {
      sub_223174250(*(_QWORD *)(a3 + 8), &v297);
      v100 = v99 + 360;
      *(_QWORD *)(a3 + 8) = v99 + 360;
    }
    *(_QWORD *)(a3 + 8) = v100;
    sub_223B6C304(&v277);
    if (**(int **)(v277 + 56) > 3
      || (v101 = *(unsigned __int8 *)(v277 + 72),
          v102 = sub_22322F254(v277, "OSLogSurrogateAppender", 1, 0),
          v103 = v102,
          !v101)
      && !v102)
    {
LABEL_191:
      sub_223173E64(&v297);
      goto LABEL_192;
    }
    v290[0] = &v277;
    v290[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v290[2] = std::chrono::system_clock::now().__d_.__rep_;
    v291 = 3;
    v292 = "unknown file";
    v293 = 767;
    v295 = 0;
    v296 = 0;
    v294 = "unknown function";
    sub_2245664AC((unsigned __int8 *)&v297, object);
    v104 = operator new(0x28uLL);
    v274 = v101;
    v105 = *(_OWORD *)&object[16];
    *v104 = *(_OWORD *)object;
    v104[1] = v105;
    *((_DWORD *)v104 + 8) = *(_DWORD *)&object[32];
    *((_BYTE *)v104 + 36) = 0;
    v106 = *(_QWORD *)v290[0];
    v107 = (const char *)(*(_QWORD *)v290[0] + 16);
    v273 = v107;
    if (*(char *)(*(_QWORD *)v290[0] + 39) < 0)
    {
      v107 = *(const char **)(v106 + 16);
      v108 = *(_QWORD *)(v106 + 24);
      v276 = (char *)v104;
      v110 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v110 & 1) != 0)
        goto LABEL_84;
    }
    else
    {
      v108 = *(unsigned __int8 *)(*(_QWORD *)v290[0] + 39);
      v276 = (char *)v104;
      v109 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v109 & 1) != 0)
        goto LABEL_84;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_84:
    if (byte_255788F40[23] >= 0)
      v111 = byte_255788F40;
    else
      v111 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v112 = byte_255788F40[23];
    else
      v112 = *(_QWORD *)&byte_255788F40[8];
    *(_QWORD *)object = os_log_create(v111, v107);
    v113 = &object[8];
    if (v112 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v112 >= 0x17)
    {
      v114 = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v112 | 7) != 0x17)
        v114 = v112 | 7;
      v115 = v114 + 1;
      v113 = operator new(v114 + 1);
      *(_QWORD *)&object[24] = v115 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v113;
      *(_QWORD *)&object[16] = v112;
    }
    else
    {
      object[31] = v112;
      if (!v112)
      {
LABEL_98:
        v113[v112] = 0;
        object[32] = 1;
        v116 = __p;
        if (v108 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v98 = v271;
        if (v108 >= 0x17)
        {
          v117 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v108 | 7) != 0x17)
            v117 = v108 | 7;
          v118 = v117 + 1;
          v116 = operator new(v117 + 1);
          __p[2] = (void *)(v118 | 0x8000000000000000);
          __p[0] = v116;
          __p[1] = (void *)v108;
        }
        else
        {
          HIBYTE(__p[2]) = v108;
          if (!v108)
          {
LABEL_106:
            *((_BYTE *)v116 + v108) = 0;
            LOBYTE(__p[3]) = 1;
            v119 = *(NSObject **)object;
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
            if (object[32] && (object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (!v103 || !*(_QWORD *)(v103 + 24))
            {
              os_log_type_enabled(v119, OS_LOG_TYPE_INFO);
              *(_DWORD *)object = 136315138;
              *(_QWORD *)&object[4] = v276;
              v126 = (void *)_os_log_send_and_compose_impl();
              if (v126)
                free(v126);
              goto LABEL_184;
            }
            v120 = _os_log_pack_size();
            v121 = (std::__shared_weak_count_vtbl *)operator new(v120, (std::align_val_t)8uLL);
            v122 = (std::__shared_weak_count *)operator new();
            v122->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v122->__shared_owners_ = 0;
            v122->__shared_weak_owners_ = 0;
            v122[1].__vftable = v121;
            *(_QWORD *)&v284 = v121;
            *((_QWORD *)&v284 + 1) = v121;
            v286 = 0;
            v287 = 0;
            v285 = v122;
            v123 = strlen(v276);
            if (v123 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v124 = v123;
            if (v123 >= 0x17)
            {
              v127 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v123 | 7) != 0x17)
                v127 = v123 | 7;
              v128 = v127 + 1;
              p_dst = operator new(v127 + 1);
              *(_QWORD *)&v289 = v124;
              *((_QWORD *)&v289 + 1) = v128 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v289) = v123;
              p_dst = &__dst;
              if (!v123)
              {
LABEL_125:
                *((_BYTE *)p_dst + v124) = 0;
                v129 = __dst;
                v344[0] = v289;
                *(_QWORD *)((char *)v344 + 7) = *(_QWORD *)((char *)&v289 + 7);
                v130 = HIBYTE(v289);
                v131 = operator new(0x38uLL);
                v131[1] = 0;
                v131[2] = 0;
                v131[3] = off_24EC1FA48;
                *v131 = &off_24EC1F9F8;
                v132 = v344[0];
                v131[4] = v129;
                v131[5] = v132;
                *(_QWORD *)((char *)v131 + 47) = *(_QWORD *)((char *)v344 + 7);
                *((_BYTE *)v131 + 55) = v130;
                v344[0] = 0;
                *(_QWORD *)((char *)v344 + 7) = 0;
                v133 = v287;
                v286 = (char *)(v131 + 3);
                v287 = (std::__shared_weak_count *)v131;
                if (v133)
                {
                  v134 = (unint64_t *)&v133->__shared_owners_;
                  do
                    v135 = __ldaxr(v134);
                  while (__stlxr(v135 - 1, v134));
                  if (!v135)
                  {
                    ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                    std::__shared_weak_count::__release_weak(v133);
                  }
                }
                *(_OWORD *)object = v284;
                v136 = v286;
                *(_QWORD *)&object[16] = v285;
                if (v285)
                {
                  v137 = (unint64_t *)&v285->__shared_owners_;
                  do
                    v138 = __ldxr(v137);
                  while (__stxr(v138 + 1, v137));
                }
                v139 = v287;
                *(_QWORD *)&object[24] = v136;
                *(_QWORD *)&object[32] = v287;
                if (v287)
                {
                  v140 = (unint64_t *)&v287->__shared_owners_;
                  do
                    v141 = __ldxr(v140);
                  while (__stxr(v141 + 1, v140));
                  __p[0] = v136;
                  do
                    v142 = __ldaxr(v140);
                  while (__stlxr(v142 - 1, v140));
                  if (!v142)
                  {
                    ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                    std::__shared_weak_count::__release_weak(v139);
                  }
                }
                else
                {
                  __p[0] = v136;
                }
                v143 = v285;
                if (v285)
                {
                  v144 = (unint64_t *)&v285->__shared_owners_;
                  do
                    v145 = __ldaxr(v144);
                  while (__stlxr(v145 - 1, v144));
                  if (!v145)
                  {
                    ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                    std::__shared_weak_count::__release_weak(v143);
                  }
                }
                v146 = *(_QWORD *)object;
                if (*((char *)__p[0] + 31) >= 0)
                  v147 = (char *)__p[0] + 8;
                else
                  v147 = (char *)*((_QWORD *)__p[0] + 1);
                v148 = _os_log_pack_fill();
                *(_DWORD *)v148 = 136315138;
                *(_QWORD *)(v148 + 4) = v147;
                v149 = operator new();
                v150 = *(unsigned __int8 *)(v106 + 39);
                v151 = v273;
                if ((v150 & 0x80u) != 0)
                {
                  v151 = *(const char **)(v106 + 16);
                  v150 = *(_QWORD *)(v106 + 24);
                }
                *(_QWORD *)v149 = v146;
                *(_OWORD *)(v149 + 8) = *(_OWORD *)&object[8];
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                *(_OWORD *)(v149 + 24) = *(_OWORD *)&object[24];
                *(_QWORD *)&object[24] = 0;
                *(_QWORD *)&object[32] = 0;
                *(_QWORD *)(v149 + 40) = v151;
                *(_QWORD *)(v149 + 48) = v150;
                *(_BYTE *)(v149 + 56) = 1;
                __dst = 0;
                *(_QWORD *)&v284 = v149;
                (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v103 + 24) + 40))(*(_QWORD *)(v103 + 24), &v284);
                v152 = v284;
                *(_QWORD *)&v284 = 0;
                if (v152)
                {
                  v153 = *(std::__shared_weak_count **)(v152 + 32);
                  if (v153)
                  {
                    v154 = (unint64_t *)&v153->__shared_owners_;
                    do
                      v155 = __ldaxr(v154);
                    while (__stlxr(v155 - 1, v154));
                    if (!v155)
                    {
                      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                      std::__shared_weak_count::__release_weak(v153);
                    }
                  }
                  v156 = *(std::__shared_weak_count **)(v152 + 16);
                  if (v156)
                  {
                    v157 = (unint64_t *)&v156->__shared_owners_;
                    do
                      v158 = __ldaxr(v157);
                    while (__stlxr(v158 - 1, v157));
                    if (!v158)
                    {
                      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                      std::__shared_weak_count::__release_weak(v156);
                    }
                  }
                  MEMORY[0x227684CE8](v152, 0x10F0C40B62ED6C6);
                  v159 = __dst;
                  __dst = 0;
                  if (v159)
                  {
                    v160 = (std::__shared_weak_count *)v159[4];
                    if (v160)
                    {
                      v161 = (unint64_t *)&v160->__shared_owners_;
                      do
                        v162 = __ldaxr(v161);
                      while (__stlxr(v162 - 1, v161));
                      if (!v162)
                      {
                        ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                        std::__shared_weak_count::__release_weak(v160);
                      }
                    }
                    v163 = (std::__shared_weak_count *)v159[2];
                    if (v163)
                    {
                      v164 = (unint64_t *)&v163->__shared_owners_;
                      do
                        v165 = __ldaxr(v164);
                      while (__stlxr(v165 - 1, v164));
                      if (!v165)
                      {
                        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                        std::__shared_weak_count::__release_weak(v163);
                      }
                    }
                    MEMORY[0x227684CE8](v159, 0x10F0C40B62ED6C6);
                  }
                }
                v166 = *(std::__shared_weak_count **)&object[32];
                v101 = v274;
                if (*(_QWORD *)&object[32])
                {
                  v167 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                  do
                    v168 = __ldaxr(v167);
                  while (__stlxr(v168 - 1, v167));
                  if (!v168)
                  {
                    ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                    std::__shared_weak_count::__release_weak(v166);
                  }
                }
                v169 = *(std::__shared_weak_count **)&object[16];
                if (*(_QWORD *)&object[16])
                {
                  v170 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                  do
                    v171 = __ldaxr(v170);
                  while (__stlxr(v171 - 1, v170));
                  if (!v171)
                  {
                    ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                    std::__shared_weak_count::__release_weak(v169);
                  }
                }
LABEL_184:
                operator delete(v276);
                if (v101)
                {
                  sub_2245664AC((unsigned __int8 *)&v297, object);
                  v172 = operator new(0x28uLL);
                  v173 = *(_OWORD *)&object[16];
                  *v172 = *(_OWORD *)object;
                  v172[1] = v173;
                  *((_DWORD *)v172 + 8) = *(_DWORD *)&object[32];
                  *((_BYTE *)v172 + 36) = 0;
                  sub_22322C138((uint64_t)v290, "RoomBoundaryIdentification: Outdoor room %s added to the result", (const char *)v172);
                  operator delete(v172);
                  sub_223182C08((uint64_t)v290);
                }
                sub_223182C08((uint64_t)v290);
                v174 = v296;
                if (v296)
                {
                  v175 = (unint64_t *)&v296->__shared_owners_;
                  do
                    v176 = __ldaxr(v175);
                  while (__stlxr(v176 - 1, v175));
                  if (!v176)
                  {
                    ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                    std::__shared_weak_count::__release_weak(v174);
                  }
                }
                goto LABEL_191;
              }
            }
            memcpy(p_dst, v276, v124);
            goto LABEL_125;
          }
        }
        memmove(v116, v107, v108);
        goto LABEL_106;
      }
    }
    memmove(v113, v111, v112);
    goto LABEL_98;
  }
LABEL_192:
  *(_QWORD *)&v297 = "cv3d.recon.";
  *((_QWORD *)&v297 + 1) = 11;
  *(_QWORD *)v298 = "Stats.RoomBoundary";
  *(_QWORD *)&v298[8] = 18;
  sub_2231A9820((uint64_t)&v297, (uint64_t)&v298[16], 0, 0, (std::string *)object);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v177 = sub_2241471F8();
    v178 = v177[2];
    if (!v178)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v178 = v177[2];
    }
    v179 = *(_QWORD *)(v178 + 64);
    v180 = (std::mutex *)(v179 + 32);
    std::mutex::lock((std::mutex *)(v179 + 32));
    v182 = *(_QWORD *)(v179 + 96);
    v181 = *(_QWORD *)(v179 + 104);
    std::mutex::unlock(v180);
    if (v182 != v181)
    {
      v183 = object[23];
      v184 = *(_BYTE **)object;
      sub_2241471F8();
      v185 = v183 >= 0 ? object : v184;
      v186 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v185);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v186 + 24))(v186))
      {
        v297 = 0u;
        *(_OWORD *)v298 = 0u;
        *(_DWORD *)&v298[16] = 728325608;
        kdebug_trace();
        sub_2231898D0((double *)&qword_255788F20, v186, (float *)&v278, "current_room_area");
        kdebug_trace();
      }
    }
  }
  v297 = 0u;
  *(_OWORD *)v298 = 0u;
  *(_DWORD *)&v298[16] = 728325624;
  kdebug_trace();
  v187 = object[23];
  if (object[23] < 0)
    v187 = *(_QWORD *)&object[8];
  if (v187 >= 0x11)
  {
    v188 = object;
    if (object[23] < 0)
      v188 = *(_BYTE **)object;
    v189 = *(_QWORD *)v188;
    v190 = *((_QWORD *)v188 + 1);
    v191 = v188[16];
    if (v189 == 0x6365722E64337663 && v190 == 0x73746174532E6E6FLL && v191 == 46)
    {
      v194 = sub_223187510();
      if (object[23] >= 0)
        v195 = object;
      else
        v195 = *(_BYTE **)object;
      if (object[23] >= 0)
        v196 = object[23];
      else
        v196 = *(_QWORD *)&object[8];
      sub_2231897A8((uint64_t *)v194, v195, v196, (float *)&v278, (uint64_t)"current_room_area", 17);
    }
  }
  kdebug_trace();
  if ((object[23] & 0x80000000) != 0)
    operator delete(*(void **)object);
  v297 = 0u;
  *(_OWORD *)v298 = 0u;
  *(_DWORD *)&v298[16] = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v197 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v197 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)object);
    LODWORD(v267) = *(_DWORD *)&object[4];
    LODWORD(v266) = *(_DWORD *)object;
    *(double *)&qword_255795558 = (double)v266 / (double)v267;
    __cxa_guard_release(&qword_255795560);
    v98 = v271;
  }
  v198 = *(float *)&v278;
  v199 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v199 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
    v98 = v271;
  }
  std::mutex::lock(&stru_25578D6E0);
  v200 = v198;
  if (byte_25578D728)
    v200 = *(double *)&qword_25578D720 + v200;
  else
    byte_25578D728 = 1;
  qword_25578D720 = *(_QWORD *)&v200;
  *(double *)&qword_25578D730 = *(double *)&qword_25578D730 + 1.0;
  std::mutex::unlock(&stru_25578D6E0);
  kdebug_trace();
  *(_QWORD *)&v297 = "cv3d.recon.";
  *((_QWORD *)&v297 + 1) = 11;
  *(_QWORD *)v298 = "Stats.RoomBoundary";
  *(_QWORD *)&v298[8] = 18;
  sub_2231A9820((uint64_t)&v297, (uint64_t)&v298[16], 0, 0, (std::string *)object);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v201 = sub_2241471F8();
    v202 = v201[2];
    if (!v202)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v202 = v201[2];
    }
    v203 = *(_QWORD *)(v202 + 64);
    v204 = (std::mutex *)(v203 + 32);
    std::mutex::lock((std::mutex *)(v203 + 32));
    v206 = *(_QWORD *)(v203 + 96);
    v205 = *(_QWORD *)(v203 + 104);
    std::mutex::unlock(v204);
    if (v206 != v205)
    {
      v207 = object[23];
      v208 = *(_BYTE **)object;
      sub_2241471F8();
      v209 = v207 >= 0 ? object : v208;
      v210 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v209);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v210 + 24))(v210))
      {
        v297 = 0u;
        *(_OWORD *)v298 = 0u;
        *(_DWORD *)&v298[16] = 728325608;
        kdebug_trace();
        sub_223B78554(v210, (float *)&v278 + 1, "current_room_completenes");
        kdebug_trace();
      }
    }
  }
  v297 = 0u;
  *(_OWORD *)v298 = 0u;
  *(_DWORD *)&v298[16] = 728325624;
  kdebug_trace();
  v211 = object[23];
  if (object[23] < 0)
    v211 = *(_QWORD *)&object[8];
  if (v211 >= 0x11)
  {
    v212 = object;
    if (object[23] < 0)
      v212 = *(_BYTE **)object;
    v213 = *(_QWORD *)v212;
    v214 = *((_QWORD *)v212 + 1);
    v215 = v212[16];
    if (v213 == 0x6365722E64337663 && v214 == 0x73746174532E6E6FLL && v215 == 46)
    {
      v218 = sub_223187510();
      if (object[23] >= 0)
        v219 = object;
      else
        v219 = *(_BYTE **)object;
      if (object[23] >= 0)
        v220 = object[23];
      else
        v220 = *(_QWORD *)&object[8];
      sub_2231897A8((uint64_t *)v218, v219, v220, (float *)&v278 + 1, (uint64_t)"current_room_completenes", 24);
    }
  }
  kdebug_trace();
  if ((object[23] & 0x80000000) != 0)
    operator delete(*(void **)object);
  v297 = 0u;
  *(_OWORD *)v298 = 0u;
  *(_DWORD *)&v298[16] = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v221 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v221 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)object);
    LODWORD(v269) = *(_DWORD *)&object[4];
    LODWORD(v268) = *(_DWORD *)object;
    *(double *)&qword_255795558 = (double)v268 / (double)v269;
    __cxa_guard_release(&qword_255795560);
    v98 = v271;
  }
  v222 = *((float *)&v278 + 1);
  v223 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v223 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
    v98 = v271;
  }
  std::mutex::lock(&stru_25578D758);
  v224 = dword_25578D7A0;
  if (*(float *)&dword_25578D7A0 >= v222)
    *(float *)&v224 = v222;
  if (!byte_25578D7A4)
    *(float *)&v224 = v222;
  dword_25578D7A0 = v224;
  byte_25578D7A4 = 1;
  std::mutex::unlock(&stru_25578D758);
  kdebug_trace();
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v225 = sub_2241471F8();
    v226 = v225[2];
    if (!v226)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_325;
      }
      v226 = v225[2];
    }
    v227 = *(_QWORD *)(v226 + 64);
    v228 = (std::mutex *)(v227 + 32);
    std::mutex::lock((std::mutex *)(v227 + 32));
    v230 = *(_QWORD *)(v227 + 96);
    v229 = *(_QWORD *)(v227 + 104);
    std::mutex::unlock(v228);
    if (v230 != v229)
    {
      *(_QWORD *)&v297 = "cv3d.recon.";
      *((_QWORD *)&v297 + 1) = 11;
      *(_QWORD *)v298 = "PRR.CurrentRoom";
      *(_QWORD *)&v298[8] = 15;
      sub_2231A9820((uint64_t)&v297, (uint64_t)&v298[16], 0, 0, (std::string *)object);
      v231 = object[23];
      v232 = *(_BYTE **)object;
      sub_2241471F8();
      if (v231 >= 0)
        v233 = object;
      else
        v233 = v232;
      v234 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v233);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v234 + 24))(v234))
      {
        v297 = 0u;
        *(_OWORD *)v298 = 0u;
        *(_DWORD *)&v298[16] = 728325616;
        kdebug_trace();
        sub_223B7BCC0(v234, v98, v270);
        kdebug_trace();
      }
      if ((object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
    }
  }
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v235 = sub_2241471F8();
    v236 = v235[2];
    if (!v236)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_325;
      }
      v236 = v235[2];
    }
    v237 = *(_QWORD *)(v236 + 64);
    v238 = (std::mutex *)(v237 + 32);
    std::mutex::lock((std::mutex *)(v237 + 32));
    v240 = *(_QWORD *)(v237 + 96);
    v239 = *(_QWORD *)(v237 + 104);
    std::mutex::unlock(v238);
    if (v240 != v239)
    {
      *(_QWORD *)&v297 = "cv3d.recon.";
      *((_QWORD *)&v297 + 1) = 11;
      *(_QWORD *)v298 = "PRR.CurrentRoom";
      *(_QWORD *)&v298[8] = 15;
      sub_2231A9820((uint64_t)&v297, (uint64_t)&v298[16], 0, 0, (std::string *)object);
      v241 = object[23];
      v242 = *(_BYTE **)object;
      sub_2241471F8();
      if (v241 >= 0)
        v243 = object;
      else
        v243 = v242;
      v244 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v243);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v244 + 24))(v244))
      {
        v297 = 0u;
        *(_OWORD *)v298 = 0u;
        *(_DWORD *)&v298[16] = 728325616;
        kdebug_trace();
        sub_223B7C1A8(v244, v98, v270);
        kdebug_trace();
      }
      if ((object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
    }
  }
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v245 = sub_2241471F8();
    v246 = v245[2];
    if (!v246)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_325;
      }
      v246 = v245[2];
    }
    v247 = *(_QWORD *)(v246 + 64);
    v248 = (std::mutex *)(v247 + 32);
    std::mutex::lock((std::mutex *)(v247 + 32));
    v250 = *(_QWORD *)(v247 + 96);
    v249 = *(_QWORD *)(v247 + 104);
    std::mutex::unlock(v248);
    if (v250 != v249)
    {
      *(_QWORD *)&v297 = "cv3d.recon.";
      *((_QWORD *)&v297 + 1) = 11;
      *(_QWORD *)v298 = "RoomAssociations.CurrentRoom";
      *(_QWORD *)&v298[8] = 28;
      sub_2231A9820((uint64_t)&v297, (uint64_t)&v298[16], 0, 0, (std::string *)object);
      v251 = object[23];
      v252 = *(_BYTE **)object;
      sub_2241471F8();
      if (v251 >= 0)
        v253 = object;
      else
        v253 = v252;
      v254 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v253);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v254 + 24))(v254))
      {
        v297 = 0u;
        *(_OWORD *)v298 = 0u;
        *(_DWORD *)&v298[16] = 728325616;
        kdebug_trace();
        sub_223B7BCC0(v254, v98, v270);
        kdebug_trace();
      }
      if ((object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
    }
  }
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    return kdebug_trace();
  v255 = sub_2241471F8();
  v256 = v255[2];
  if (!v256)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      v256 = v255[2];
      goto LABEL_307;
    }
LABEL_325:
    abort();
  }
LABEL_307:
  v257 = *(_QWORD *)(v256 + 64);
  v258 = (std::mutex *)(v257 + 32);
  std::mutex::lock((std::mutex *)(v257 + 32));
  v260 = *(_QWORD *)(v257 + 96);
  v259 = *(_QWORD *)(v257 + 104);
  std::mutex::unlock(v258);
  if (v260 != v259)
  {
    *(_QWORD *)&v297 = "cv3d.recon.";
    *((_QWORD *)&v297 + 1) = 11;
    *(_QWORD *)v298 = "RoomAssociations.CurrentRoom";
    *(_QWORD *)&v298[8] = 28;
    sub_2231A9820((uint64_t)&v297, (uint64_t)&v298[16], 0, 0, (std::string *)object);
    v261 = object[23];
    v262 = *(_BYTE **)object;
    sub_2241471F8();
    if (v261 >= 0)
      v263 = object;
    else
      v263 = v262;
    v264 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v263);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v264 + 24))(v264))
    {
      v297 = 0u;
      *(_OWORD *)v298 = 0u;
      *(_DWORD *)&v298[16] = 728325616;
      kdebug_trace();
      sub_223B7C1A8(v264, v98, v270);
      kdebug_trace();
    }
    if ((object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
  }
  return kdebug_trace();
}

void sub_223B7B6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  _QWORD *v61;

  if (LOBYTE(STACK[0x338]))
  {
    if (SLOBYTE(STACK[0x337]) < 0)
      operator delete((void *)STACK[0x320]);
  }
  __cxa_guard_abort(&qword_255788F58);
  operator delete(a33);
  sub_223182DAC((uint64_t)&a52);
  sub_223173E64(&a61);
  sub_22386E26C(v61);
  sub_2231874DC((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_223B7B9E8(float **a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v4;
  _QWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  float v20;
  unint64_t v21;
  float *v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  float *v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  _OWORD *v36;
  float *v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  void **v41;

  if (a2)
  {
    v4 = a2;
    v6 = a3 + 3;
    v41 = (void **)(a3 + 6);
    do
    {
      if (!*((_DWORD *)v4 + 9))
        goto LABEL_5;
      v8 = v4 + 2;
      v10 = (_OWORD *)a3[4];
      v9 = a3[5];
      if ((unint64_t)v10 < v9)
      {
        *v10 = *v8;
        v11 = v10 + 1;
        goto LABEL_24;
      }
      v12 = (_OWORD *)*v6;
      v13 = ((uint64_t)v10 - *v6) >> 4;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60)
        sub_22316E078();
      v15 = v9 - (_QWORD)v12;
      if (v15 >> 3 > v14)
        v14 = v15 >> 3;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
        v16 = 0xFFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        if (v16 >> 60)
          goto LABEL_45;
        v17 = (char *)operator new(16 * v16);
        v18 = &v17[16 * v13];
        *(_OWORD *)v18 = *v8;
        v19 = (uint64_t)v18;
        if (v10 == v12)
          goto LABEL_22;
      }
      else
      {
        v17 = 0;
        v18 = (char *)(16 * v13);
        *(_OWORD *)(16 * v13) = *v8;
        v19 = 16 * v13;
        if (v10 == v12)
          goto LABEL_22;
      }
      do
      {
        *(_OWORD *)(v19 - 16) = *(v10 - 1);
        v19 -= 16;
        --v10;
      }
      while (v10 != v12);
      v10 = (_OWORD *)*v6;
LABEL_22:
      v11 = v18 + 16;
      a3[3] = v19;
      a3[4] = v18 + 16;
      a3[5] = &v17[16 * v16];
      if (v10)
        operator delete(v10);
LABEL_24:
      a3[4] = v11;
      v20 = (float)(float)((float)(**a1 * (float)(*((_DWORD *)v4 + 8) + *((_DWORD *)v4 + 9)))
                                       * 100.0)
          * 0.01;
      v22 = (float *)a3[7];
      v21 = a3[8];
      if ((unint64_t)v22 >= v21)
      {
        v23 = (float *)*v41;
        v24 = (char *)v22 - (_BYTE *)*v41;
        v25 = v24 >> 2;
        v26 = (v24 >> 2) + 1;
        if (v26 >> 62)
          sub_22316E078();
        v27 = v21 - (_QWORD)v23;
        if (v27 >> 1 > v26)
          v26 = v27 >> 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
          v28 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          if (v28 >> 62)
LABEL_45:
            sub_223174E94();
          v29 = operator new(4 * v28);
          v30 = (float *)&v29[4 * v25];
          *v30 = v20;
          v7 = (uint64_t)(v30 + 1);
          v31 = (char *)v22 - (char *)v23;
          if (v22 == v23)
            goto LABEL_42;
LABEL_36:
          v32 = v31 - 4;
          if (v32 < 0x2C)
            goto LABEL_50;
          if ((unint64_t)((char *)v22 - v29 - v24) < 0x20)
            goto LABEL_50;
          v33 = (v32 >> 2) + 1;
          v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
          v35 = &v22[v34 / 0xFFFFFFFFFFFFFFFCLL];
          v30 = (float *)((char *)v30 - v34);
          v36 = &v29[4 * v25 - 16];
          v37 = v22 - 4;
          v38 = v33 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v39 = *(_OWORD *)v37;
            *(v36 - 1) = *((_OWORD *)v37 - 1);
            *v36 = v39;
            v36 -= 2;
            v37 -= 8;
            v38 -= 8;
          }
          while (v38);
          v22 = v35;
          if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_50:
            do
            {
              v40 = *((_DWORD *)v22-- - 1);
              *((_DWORD *)v30-- - 1) = v40;
            }
            while (v22 != v23);
          }
        }
        else
        {
          v29 = 0;
          v30 = (float *)(4 * v25);
          *(float *)(4 * v25) = v20;
          v7 = 4 * v25 + 4;
          v31 = (char *)v22 - (char *)v23;
          if (v22 != v23)
            goto LABEL_36;
        }
LABEL_42:
        a3[6] = v30;
        a3[7] = v7;
        a3[8] = &v29[4 * v28];
        if (v23)
          operator delete(v23);
        goto LABEL_4;
      }
      *v22 = v20;
      v7 = (uint64_t)(v22 + 1);
LABEL_4:
      a3[7] = v7;
LABEL_5:
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
}

void sub_223B7BCC0(uint64_t a1, uint64_t a2, float32x2_t *a3)
{
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t *v16;
  float32x2_t *v17;
  float32x2_t *v18;
  float32x2_t *v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  unsigned __int32 v23;
  uint64_t *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t (**v30)();
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  void *__p[2];
  __int16 v51;
  uint64_t (**v52)();
  uint64_t (**v53)();
  std::__shared_weak_count *v54;
  float32x2_t *v55;
  float32x2_t *v56;
  uint64_t v57;
  uint64_t (**v58)();
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t (**v62)();
  uint64_t (**v63)();
  std::__shared_weak_count *v64;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    *(_QWORD *)&v49 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v49 + 1) = 2;
    v6 = sub_2241471F8();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    {
      sub_2241498F4((uint64_t)&v52, 0);
      if (*(_BYTE *)(a2 + 2664))
      {
        v7 = a2 + 2648;
        v8 = (_QWORD *)(a2 + 40);
        if (sub_223340F28(v8, v7))
        {
          v9 = sub_223340F28(v8, v7);
          if (!v9)
            sub_223198218("unordered_map::at: key not found");
          sub_223B6A9C0((uint64_t)(v9 + 4), 0, (uint64_t)&v60);
          sub_2237C2E74((uint64_t *)&v52, (uint64_t)&v60);
          sub_22316F8F4(&v60);
          v16 = (float32x2_t *)v52;
          v17 = (float32x2_t *)v53;
          if (v52 != v53)
          {
            do
            {
              v11.i32[0] = v16[1].i32[0];
              v13.i32[0] = a3[1].i32[0];
              v14.i32[0] = a3[3].i32[0];
              v15.i32[0] = a3[5].i32[0];
              *(float32x2_t *)v12.i8 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a3, COERCE_FLOAT(*v16)), a3[2], *v16, 1), a3[4], *(float *)v11.i32);
              v13 = vmla_f32(vmla_lane_f32(vmul_f32(v13, *v16), v14, *v16, 1), *(float32x2_t *)v11.i8, v15);
              v12.u64[1] = (unint64_t)v13;
              *(float32x2_t *)v10.i8 = a3[6];
              v10.i32[2] = a3[7].i32[0];
              v10 = (int8x16_t)vaddq_f32((float32x4_t)v12, (float32x4_t)v10);
              v16[1].i32[0] = v10.i32[2];
              *v16 = *(float32x2_t *)v10.i8;
              v16 = (float32x2_t *)((char *)v16 + 12);
            }
            while (v16 != v17);
          }
          v18 = v55;
          v19 = v56;
          if (v55 != v56)
          {
            *(float32x2_t *)v10.i8 = *a3;
            v10.i32[2] = a3[1].i32[0];
            *(float32x2_t *)v11.i8 = a3[2];
            v11.i32[2] = a3[3].i32[0];
            *(float32x2_t *)v12.i8 = a3[4];
            v12.i32[2] = a3[5].i32[0];
            v20 = (float32x2_t)vextq_s8(v10, v10, 8uLL).u64[0];
            v21 = (float32x2_t)vextq_s8(v11, v11, 8uLL).u64[0];
            v22 = (float32x2_t)vextq_s8(v12, v12, 8uLL).u64[0];
            do
            {
              v15.i32[0] = v18[1].i32[0];
              v23 = vmla_f32(vmla_lane_f32(vmul_f32(v20, *v18), v21, *v18, 1), v15, v22).u32[0];
              *v18 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v10.i8, COERCE_FLOAT(*v18)), *(float32x2_t *)v11.i8, *v18, 1), *(float32x2_t *)v12.i8, v15.f32[0]);
              v18[1].i32[0] = v23;
              v18 = (float32x2_t *)((char *)v18 + 12);
            }
            while (v18 != v19);
          }
        }
      }
      strcpy((char *)__p, "RoomBoundary");
      v51 = 268;
      sub_22329F414((uint64_t)&v52, (__int128 *)__p, &v49, &v57);
      if (HIBYTE(v51) && (char)v51 < 0)
        operator delete(__p[0]);
      sub_22316F8F4((uint64_t *)&v52);
      v24 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      v25 = *v24;
      v26 = (std::__shared_weak_count *)v24[1];
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }
      v30 = v58;
      v29 = v59;
      v52 = &off_24EC6A3B8;
      v53 = v58;
      v54 = v59;
      v58 = 0;
      v59 = 0;
      v60 = v25;
      v61 = v26;
      if (v26)
      {
        v31 = (unint64_t *)&v26->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      v62 = &off_24EC6A3B8;
      v63 = v30;
      v64 = v29;
      if (v29)
      {
        v33 = (unint64_t *)&v29->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      (*(void (**)(uint64_t *, uint64_t *))(*v6 + 16))(v6, &v60);
      v35 = v64;
      if (v64)
      {
        v36 = (unint64_t *)&v64->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v38 = v61;
      if (v61)
      {
        v39 = (unint64_t *)&v61->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v41 = v54;
      if (v54)
      {
        v42 = (unint64_t *)&v54->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      if (v26)
      {
        v44 = (unint64_t *)&v26->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v46 = v59;
      if (v59)
      {
        v47 = (unint64_t *)&v59->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
    }
  }
}

void sub_223B7C0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *__p, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_22316F8F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223B7C1A8(uint64_t a1, uint64_t a2, float32x2_t *a3)
{
  uint64_t *v6;
  _QWORD *v7;
  float32x4_t v8;
  float32x4_t v9;
  _QWORD *i;
  float32x2_t *v11;
  int32x4_t v12;
  int32x4_t v13;
  float32x4_t v14;
  float32x2_t v15;
  __int128 v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int32x4_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t *v30;
  float32x2_t *v31;
  float32x2_t *v32;
  float32x2_t *v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  unsigned __int32 v37;
  uint64_t *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 v63;
  uint64_t v64[2];
  std::__shared_weak_count *v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  _OWORD v69[3];
  float32x2_t v70;
  unsigned __int32 v71;
  int v72;
  float32x2_t *v73;
  std::__shared_weak_count *v74;
  uint64_t (**v75)();
  uint64_t v76;
  std::__shared_weak_count *v77;
  float32x2_t *v78;
  float32x2_t *v79;
  uint64_t v80;
  __int32 v81;
  __int128 v82;
  _BYTE __p[32];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  int v94;
  _QWORD v95[5];

  v95[2] = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    *(_QWORD *)&v63 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v63 + 1) = 2;
    v6 = sub_2241471F8();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    {
      sub_2241498F4((uint64_t)v64, 0);
      if (*(_BYTE *)(a2 + 2664) && sub_223340F28((_QWORD *)(a2 + 40), a2 + 2648))
      {
        v7 = sub_223340F28((_QWORD *)(a2 + 40), a2 + 2648);
        if (!v7)
          sub_223198218("unordered_map::at: key not found");
        v8.i64[0] = v7[6];
        v8.i32[2] = *((_DWORD *)v7 + 14);
        v9 = vmulq_f32(v8, (float32x4_t)vdupq_n_s32(0x3F666666u));
        v81 = v9.i32[2];
        v80 = v9.i64[0];
        for (i = (_QWORD *)v7[61]; i; i = (_QWORD *)*i)
        {
          if (sub_223340F28((_QWORD *)a2, (uint64_t)(i + 2)))
          {
            v11 = (float32x2_t *)sub_223340F28((_QWORD *)a2, (uint64_t)(i + 2));
            if (!v11)
              sub_223198218("unordered_map::at: key not found");
            *(float32x2_t *)v12.i8 = v11[4];
            v12.i32[2] = v11[5].i32[0];
            *(float32x2_t *)v13.i8 = v11[6];
            v13.i32[2] = v11[7].i32[0];
            *(float32x2_t *)v14.f32 = v11[10];
            v14.i32[2] = v11[11].i32[0];
            *(_QWORD *)&v16 = vzip1q_s32(v12, v13).u64[0];
            v17 = (int8x16_t)vnegq_f32(v14);
            v15.i32[0] = v11[9].i32[0];
            v18 = (int8x16_t)vtrn2q_s32(v12, v13);
            v18.i32[2] = HIDWORD(*(_QWORD *)&v11[8]);
            v19 = (int8x16_t)vzip2q_s32(v12, v13);
            v20 = (int32x4_t)v19;
            v20.i32[2] = v15.i32[0];
            v21 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v16, *(float *)v17.i32), *(float32x2_t *)v18.i8, *(float32x2_t *)v14.f32, 1), *(float32x2_t *)v19.i8, v14, 2);
            v22 = vmls_lane_f32(vmul_f32(v11[8], *(float32x2_t *)v17.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v11[8], 1), *(float32x2_t *)v14.f32, 1);
            v23 = (float32x2_t)vextq_s8(v17, v17, 8uLL).u64[0];
            *((_QWORD *)&v16 + 1) = *(_QWORD *)&v11[8];
            v17.i32[3] = 0;
            v17.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v18, 0).i32[3];
            *(uint64_t *)((char *)v17.i64 + 4) = vextq_s8(v18, v19, 4uLL).u64[0];
            v20.i64[1] = vdupq_laneq_s32(v20, 2).u32[0];
            v69[1] = v17;
            v69[2] = v20;
            v69[0] = v16;
            v70 = v21;
            v71 = vmla_f32(v22, v23, v15).u32[0];
            v72 = 1065353216;
            v82 = xmmword_224651370;
            sub_223207E58(&v89, (int *)&v82);
            *(_OWORD *)&__p[16] = v90;
            v84 = v91;
            v85 = v92;
            v86 = v93;
            v87 = v94;
            v88 = 0xA0000000ALL;
            *(_QWORD *)&__p[8] = &off_24EC20868;
            *(_QWORD *)__p = &off_24EC207B8;
            sub_224002D14((uint64_t)__p, (int32x2_t *)v69, &v80, (uint64_t)&v73, 0.5);
            v30 = v73;
            v31 = (float32x2_t *)v74;
            if (v73 != (float32x2_t *)v74)
            {
              do
              {
                v25.i32[0] = v30[1].i32[0];
                v27.i32[0] = a3[1].i32[0];
                v28.i32[0] = a3[3].i32[0];
                v29.i32[0] = a3[5].i32[0];
                *(float32x2_t *)v26.i8 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a3, COERCE_FLOAT(*v30)), a3[2], *v30, 1), a3[4], *(float *)v25.i32);
                v27 = vmla_f32(vmla_lane_f32(vmul_f32(v27, *v30), v28, *v30, 1), *(float32x2_t *)v25.i8, v29);
                v26.u64[1] = (unint64_t)v27;
                *(float32x2_t *)v24.i8 = a3[6];
                v24.i32[2] = a3[7].i32[0];
                v24 = (int8x16_t)vaddq_f32((float32x4_t)v26, (float32x4_t)v24);
                v30[1].i32[0] = v24.i32[2];
                *v30 = *(float32x2_t *)v24.i8;
                v30 = (float32x2_t *)((char *)v30 + 12);
              }
              while (v30 != v31);
            }
            v32 = v78;
            v33 = v79;
            if (v78 != v79)
            {
              *(float32x2_t *)v24.i8 = *a3;
              v24.i32[2] = a3[1].i32[0];
              *(float32x2_t *)v25.i8 = a3[2];
              v25.i32[2] = a3[3].i32[0];
              *(float32x2_t *)v26.i8 = a3[4];
              v26.i32[2] = a3[5].i32[0];
              v34 = (float32x2_t)vextq_s8(v24, v24, 8uLL).u64[0];
              v35 = (float32x2_t)vextq_s8(v25, v25, 8uLL).u64[0];
              v36 = (float32x2_t)vextq_s8(v26, v26, 8uLL).u64[0];
              do
              {
                v29.i32[0] = v32[1].i32[0];
                v37 = vmla_f32(vmla_lane_f32(vmul_f32(v34, *v32), v35, *v32, 1), v29, v36).u32[0];
                *v32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v24.i8, COERCE_FLOAT(*v32)), *(float32x2_t *)v25.i8, *v32, 1), *(float32x2_t *)v26.i8, v29.f32[0]);
                v32[1].i32[0] = v37;
                v32 = (float32x2_t *)((char *)v32 + 12);
              }
              while (v32 != v33);
            }
            sub_22414E9E0((uint64_t)v64, (uint64_t)&v73);
            sub_22316F8F4((uint64_t *)&v73);
          }
        }
      }
      strcpy(__p, "Keyframes");
      *(_QWORD *)&__p[10] = v95[0];
      *(_QWORD *)&__p[15] = *(_QWORD *)((char *)v95 + 5);
      *(_WORD *)&__p[23] = 265;
      v95[0] = 0;
      *(_QWORD *)((char *)v95 + 5) = 0;
      sub_22329F414((uint64_t)v64, (__int128 *)__p, &v63, &v66);
      if (__p[24] && (__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      sub_22316F8F4(v64);
      v38 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      v39 = *v38;
      v40 = (std::__shared_weak_count *)v38[1];
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(p_shared_owners);
        while (__stxr(v42 + 1, p_shared_owners));
      }
      v44 = v67;
      v43 = v68;
      v64[0] = (uint64_t)&off_24EC6A3B8;
      v64[1] = v67;
      v65 = v68;
      v67 = 0;
      v68 = 0;
      v73 = (float32x2_t *)v39;
      v74 = v40;
      if (v40)
      {
        v45 = (unint64_t *)&v40->__shared_owners_;
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      v75 = &off_24EC6A3B8;
      v76 = v44;
      v77 = v43;
      if (v43)
      {
        v47 = (unint64_t *)&v43->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      (*(void (**)(uint64_t *, float32x2_t **))(*v6 + 16))(v6, &v73);
      v49 = v77;
      if (v77)
      {
        v50 = (unint64_t *)&v77->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v52 = v74;
      if (v74)
      {
        v53 = (unint64_t *)&v74->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v55 = v65;
      if (v65)
      {
        v56 = (unint64_t *)&v65->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      if (v40)
      {
        v58 = (unint64_t *)&v40->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v60 = v68;
      if (v68)
      {
        v61 = (unint64_t *)&v68->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
    }
  }
}

void sub_223B7C7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_22316F8F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223B7C7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_22316F8F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223B7C7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;

  sub_2241231D8(v65);
  v67 = (std::__shared_weak_count *)STACK[0x218];
  if (STACK[0x218])
  {
    p_shared_owners = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  sub_2241231D8((uint64_t)&a16);
  if (v64)
  {
    v70 = (unint64_t *)&v64->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
      sub_2241231D8((uint64_t)&a64);
      _Unwind_Resume(a1);
    }
  }
  sub_2241231D8((uint64_t)&a64);
  _Unwind_Resume(a1);
}

void sub_223B7C878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  if (LOBYTE(STACK[0x3D0]))
  {
    if (SLOBYTE(STACK[0x3CF]) < 0)
    {
      operator delete((void *)STACK[0x3B8]);
      sub_22316F8F4((uint64_t *)va);
      _Unwind_Resume(a1);
    }
  }
  sub_22316F8F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_223B7C910(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD **v23;
  int v24;
  _QWORD *v25;

  v5 = 0x1555555555555555;
  v6 = *(_QWORD ***)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *(_QWORD *)a1) >> 2);
  v9 = v8 + 1;
  if (v8 + 1 > 0x1555555555555555)
    sub_22316E078();
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v6) >> 2) > v9)
    v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v6) >> 2);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v6) >> 2) < 0xAAAAAAAAAAAAAAALL)
    v5 = v9;
  if (v5)
  {
    LODWORD(v25) = v5;
    v13 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v13 == -1)
      sub_22316DD70();
    v23 = &v25;
    v14 = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC5FBA8[v13])(&v23, a1 + 24);
    v6 = *(_QWORD ***)a1;
    v7 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v16 = (_DWORD *)(v14 + 12 * v8);
  *v16 = *a2;
  v16[1] = *a3;
  v16[2] = *a4;
  v17 = v16 + 3;
  if ((_QWORD **)v7 != v6)
  {
    do
    {
      v18 = *(_QWORD *)(v7 - 12);
      v7 -= 12;
      v19 = *(_DWORD *)(v7 + 8);
      *(_QWORD *)(v16 - 3) = v18;
      v16 -= 3;
      v16[2] = v19;
    }
    while ((_QWORD **)v7 != v6);
    v6 = *(_QWORD ***)a1;
  }
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v17;
  v20 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14 + 12 * v15;
  if (v6)
  {
    v23 = v6;
    v24 = -1431655765 * ((unint64_t)(v20 - (_QWORD)v6) >> 2);
    v21 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v21 == -1)
      sub_22316DD70();
    v25 = &v23;
    ((void (*)(_QWORD **, uint64_t))off_24EC5FBB8[v21])(&v25, a1 + 24);
  }
  return v17;
}

uint64_t sub_223B7CAB0(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  _QWORD **v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD **v14;
  _QWORD **v15;
  unint64_t v16;
  _QWORD **v17;
  _OWORD *v18;
  __int128 *v19;
  unint64_t v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD **v26;
  int v27;
  _QWORD *v28;

  v4 = *(_QWORD ***)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = v3 - *(_QWORD *)a1;
  v6 = v5 + 1;
  if (v5 + 1 < 0)
    sub_22316E078();
  v8 = *(_QWORD *)(a1 + 16) - (_QWORD)v4;
  if (2 * v8 > v6)
    v6 = 2 * v8;
  if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
    v6 = 0x7FFFFFFFFFFFFFFFLL;
  if (v6)
  {
    LODWORD(v28) = v6;
    v9 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v9 == -1)
      sub_22316DD70();
    v26 = &v28;
    v10 = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC5FBC8[v9])(&v26, a1 + 24);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = v10 + v5;
  *(_BYTE *)(v10 + v5) = *a2;
  v13 = v10 + v5 + 1;
  v14 = *(_QWORD ***)a1;
  v15 = *(_QWORD ***)(a1 + 8);
  v16 = (unint64_t)v15 - *(_QWORD *)a1;
  if (v15 != *(_QWORD ***)a1)
  {
    if (v16 < 0x20)
      goto LABEL_27;
    if ((_QWORD **)((char *)v15 + (_QWORD)((char *)v4 - v10 - v3)) < (_QWORD **)0x20)
      goto LABEL_27;
    v17 = (_QWORD **)((char *)v15 - (v16 & 0xFFFFFFFFFFFFFFE0));
    v12 -= v16 & 0xFFFFFFFFFFFFFFE0;
    v18 = (_OWORD *)(v5 + v10 - 16);
    v19 = (__int128 *)(v15 - 2);
    v20 = v16 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v21 = *v19;
      *(v18 - 1) = *(v19 - 1);
      *v18 = v21;
      v18 -= 2;
      v19 -= 2;
      v20 -= 32;
    }
    while (v20);
    v15 = v17;
    if (v16 != (v16 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_27:
      do
      {
        v22 = *((_BYTE *)v15 - 1);
        v15 = (_QWORD **)((char *)v15 - 1);
        *(_BYTE *)--v12 = v22;
      }
      while (v15 != v14);
    }
    v15 = *(_QWORD ***)a1;
  }
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v13;
  v23 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10 + v11;
  if (v15)
  {
    v26 = v15;
    v27 = v23 - (_DWORD)v15;
    v24 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v24 == -1)
      sub_22316DD70();
    v28 = &v26;
    ((void (*)(_QWORD **, uint64_t))off_24EC5FBD8[v24])(&v28, a1 + 24);
  }
  return v13;
}

_QWORD *sub_223B7CC54(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD **v17;
  _QWORD **v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD **v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD **v31;
  int v32;
  _QWORD *v33;

  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  v5 = v4 >> 3;
  v6 = (v4 >> 3) + 1;
  if (v6 >> 61)
    sub_22316E078();
  v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
  if (v9 >> 2 > v6)
    v6 = v9 >> 2;
  v10 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8;
  v11 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v10)
    v11 = v6;
  if (v11)
  {
    LODWORD(v33) = v11;
    v12 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v12 == -1)
      sub_22316DD70();
    v31 = &v33;
    v13 = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC5FBE8[v12])(&v31, a1 + 24);
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  v15 = (_QWORD *)(v13 + 8 * v5);
  *v15 = *a2 | (*a3 << 32);
  v16 = v15 + 1;
  v17 = *(_QWORD ***)a1;
  v18 = *(_QWORD ***)(a1 + 8);
  if (v18 != *(_QWORD ***)a1)
  {
    v19 = (unint64_t)v18 - *(_QWORD *)a1 - 8;
    if (v19 < 0x58)
      goto LABEL_27;
    if ((unint64_t)v18 - v13 - v4 < 0x20)
      goto LABEL_27;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v21 / 0xFFFFFFFFFFFFFFF8];
    v15 = (_QWORD *)((char *)v15 - v21);
    v23 = (_OWORD *)(v13 + 8 * v5 - 16);
    v24 = (__int128 *)(v18 - 2);
    v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *v24;
      *(v23 - 1) = *(v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 2;
      v25 -= 4;
    }
    while (v25);
    v18 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v27 = (uint64_t)*--v18;
        *--v15 = v27;
      }
      while (v18 != v17);
    }
    v18 = *(_QWORD ***)a1;
  }
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v16;
  v28 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13 + 8 * v14;
  if (v18)
  {
    v31 = v18;
    v32 = (unint64_t)(v28 - (_QWORD)v18) >> 3;
    v29 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v29 == -1)
      sub_22316DD70();
    v33 = &v31;
    ((void (*)(_QWORD **, uint64_t))off_24EC5FBF8[v29])(&v33, a1 + 24);
  }
  return v16;
}

_DWORD *sub_223B7CE1C(uint64_t a1, _DWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v27;
  int v28;
  char **v29;

  v3 = *(char **)a1;
  v4 = *(char **)(a1 + 8);
  v5 = (uint64_t)&v4[-*(_QWORD *)a1];
  v6 = v5 >> 2;
  v7 = (v5 >> 2) + 1;
  if (v7 >> 62)
    sub_22316E078();
  v9 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v9 >> 1 > v7)
    v7 = v9 >> 1;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
    v7 = 0x3FFFFFFFFFFFFFFFLL;
  if (v7)
  {
    LODWORD(v29) = v7;
    v10 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v10 == -1)
      sub_22316DD70();
    v27 = (char *)&v29;
    v11 = ((uint64_t (*)(char **, uint64_t))off_24EC5FC18[v10])(&v27, a1 + 24);
    v3 = *(char **)a1;
    v4 = *(char **)(a1 + 8);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = (_DWORD *)(v11 + 4 * v6);
  *v13 = *a2;
  v14 = v13 + 1;
  if (v4 != v3)
  {
    v15 = v4 - v3 - 4;
    if (v15 < 0x2C)
    {
      v16 = v4;
      goto LABEL_18;
    }
    if ((unint64_t)&v4[-v11 - v5] < 0x20)
    {
      v16 = v4;
      do
      {
LABEL_18:
        v23 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *--v13 = v23;
      }
      while (v16 != v3);
      goto LABEL_19;
    }
    v17 = (v15 >> 2) + 1;
    v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
    v16 = &v4[-v18];
    v13 = (_DWORD *)((char *)v13 - v18);
    v19 = (_OWORD *)(v11 + 4 * v6 - 16);
    v20 = (__int128 *)(v4 - 16);
    v21 = v17 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v22 = *v20;
      *(v19 - 1) = *(v20 - 1);
      *v19 = v22;
      v19 -= 2;
      v20 -= 2;
      v21 -= 8;
    }
    while (v21);
    if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_18;
  }
LABEL_19:
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v14;
  v24 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11 + 4 * v12;
  if (v3)
  {
    v27 = v3;
    v28 = (unint64_t)(v24 - (_QWORD)v3) >> 2;
    v25 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v25 == -1)
      sub_22316DD70();
    v29 = &v27;
    ((void (*)(char ***, uint64_t))off_24EC5FC08[v25])(&v29, a1 + 24);
  }
  return v14;
}

void sub_223B7CFE0(uint64_t a1, __int128 *a2, uint64_t a3, char a4, __n128 a5)
{
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  float v17;
  unsigned int v18;
  float v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  _BOOL4 v23;
  __int128 v24;
  float v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  _BOOL4 v29;
  __int128 v30;
  __int128 v31;
  unsigned int v32;
  unsigned int v33;
  _BOOL4 v34;
  __int128 v35;
  __int128 v36;
  unsigned int v37;
  unsigned int v38;
  _BOOL4 v39;
  __int128 v40;
  __int128 v41;
  unsigned int v42;
  unsigned int v43;
  _BOOL4 v44;
  __int128 v45;
  __int128 *v46;
  unint64_t v47;
  unint64_t v48;
  float v49;
  unsigned int v50;
  unsigned int v51;
  BOOL v52;
  unsigned int v53;
  _BOOL4 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unsigned int v59;
  unsigned int v60;
  _BOOL4 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  unsigned int v65;
  unsigned int v66;
  _BOOL4 v67;
  __int128 v68;
  unsigned int v69;
  __int128 v70;
  __int128 v71;
  unsigned int v72;
  unsigned int v73;
  _BOOL4 v74;
  __int128 v75;
  __int128 *v76;
  unint64_t v77;
  unint64_t v78;
  float v79;
  unsigned int v80;
  unsigned int v81;
  BOOL v82;
  unsigned int v83;
  _BOOL4 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  unsigned int v89;
  unsigned int v90;
  _BOOL4 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  unsigned int v96;
  unsigned int v97;
  _BOOL4 v98;
  __int128 v99;
  float v100;
  unsigned int v101;
  unsigned int v102;
  BOOL v103;
  unsigned int v104;
  _BOOL4 v105;
  __int128 v106;
  __int128 v107;
  unsigned int v108;
  unsigned int v109;
  _BOOL4 v110;
  __int128 v111;
  __int128 v112;
  unsigned int v113;
  unsigned int v114;
  _BOOL4 v115;
  __int128 v116;
  __int128 v117;
  unsigned int v118;
  BOOL v119;
  uint64_t v120;
  unsigned int v121;
  BOOL v122;
  unint64_t v123;
  __int128 *v124;
  __int128 *v125;
  float v126;
  unsigned int v127;
  _BOOL4 v128;
  _BOOL4 v129;
  __int128 *v130;
  float v131;
  unsigned int v132;
  BOOL v133;
  BOOL v134;
  float *v135;
  __int128 v136;
  float v137;
  unsigned int v138;
  BOOL v139;
  float v140;
  unsigned int v141;
  _BOOL4 v142;
  __int128 *v143;
  __int128 v144;
  BOOL v145;
  __n128 v146;
  unsigned int v147;
  unsigned int v148;
  BOOL v149;
  unint64_t v150;
  float v151;
  unsigned int v152;
  BOOL v153;
  BOOL v154;
  unint64_t v155;
  float v156;
  unsigned int v157;
  _BOOL4 v158;
  _BOOL4 v159;
  float *v160;
  float *v161;
  float v162;
  unsigned int v163;
  BOOL v164;
  BOOL v165;
  __int128 v166;
  float v167;
  unsigned int v168;
  _BOOL4 v169;
  float v170;
  unsigned int v171;
  BOOL v172;
  __int128 *v173;
  __int128 v174;
  unsigned int v175;
  unsigned int v176;
  _BOOL4 v177;
  __int128 v178;
  __int128 *v179;
  float v180;
  unsigned int v181;
  unsigned int v182;
  BOOL v183;
  unsigned int v184;
  _BOOL4 v185;
  __int128 v186;
  unsigned int v187;
  unsigned int v188;
  _BOOL4 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 *v193;
  __int128 *v194;
  unsigned int v195;
  unsigned int v196;
  _BOOL4 v197;
  __int128 v198;
  __int128 v199;
  unsigned int v200;
  unsigned int v201;
  _BOOL4 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  unsigned int v206;
  unsigned int v207;
  _BOOL4 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  unsigned int v212;
  unsigned int v213;
  _BOOL4 v214;
  __int128 v215;
  __int128 *v216;
  BOOL v217;
  char v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  float v222;
  unsigned int v223;
  float v224;
  unsigned int v225;
  _BOOL4 v226;
  _BOOL4 v227;
  uint64_t v228;
  uint64_t v229;
  __int128 v230;
  float v231;
  unsigned int v232;
  BOOL v233;
  int64_t v234;
  int64_t v235;
  int64_t v236;
  uint64_t v237;
  unint64_t v238;
  unsigned int v239;
  unsigned int v240;
  uint64_t v241;
  unint64_t v242;
  unsigned int v243;
  float v244;
  unsigned int v245;
  BOOL v246;
  unsigned int v247;
  _BOOL4 v248;
  _BOOL4 v249;
  _OWORD *v250;
  __int128 v251;
  uint64_t v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v259;
  _OWORD *v260;
  __int128 v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unsigned int v265;
  unsigned int v266;
  uint64_t v267;
  __int128 v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  unsigned int v272;
  float v273;
  unsigned int v274;
  _BOOL4 v275;
  _OWORD *v276;
  __int128 v277;
  unsigned int v278;
  BOOL v279;
  __int128 v280;
  __int128 v281;
  unsigned int v282;
  unsigned int v283;
  _BOOL4 v284;
  __int128 v285;
  float v286;
  unsigned int v287;
  float v288;
  unsigned int v289;
  _BOOL4 v290;
  __int128 *v291;
  __int128 v292;
  float v293;
  unsigned int v294;
  BOOL v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  __int128 v302;
  __n128 v303;
  __n128 v304;
  __int128 v305;
  __n128 v306;
  __n128 v307;
  __int128 v308;
  __int128 v309;
  __n128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __n128 v314;
  __n128 v315;
  __n128 v316;
  __n128 v317;
  __n128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  uint64_t v356;
  uint64_t v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  uint64_t v361;

BOOL sub_223B7E0E0(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  _BOOL8 result;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  _BOOL4 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 *v15;
  float v16;
  unsigned int v17;
  float v18;
  unsigned int v19;
  BOOL v20;
  float v21;
  unsigned int v22;
  _BOOL4 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 *v27;
  __int128 *v28;
  float v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  _BOOL4 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 *v38;
  __int128 *v39;
  __int128 *v40;
  unsigned int v41;
  unsigned int v42;
  _BOOL4 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unsigned int v47;
  unsigned int v48;
  _BOOL4 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  unsigned int v53;
  unsigned int v54;
  _BOOL4 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unsigned int v59;
  unsigned int v60;
  _BOOL4 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  unsigned int v68;
  _BOOL4 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  unsigned int v76;
  unsigned int v77;
  _BOOL4 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  unsigned int v85;
  _BOOL4 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  float v92;
  unsigned int v93;
  float v94;
  unsigned int v95;
  _BOOL4 v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  float v100;
  unsigned int v101;
  BOOL v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  unsigned int v106;
  unsigned int v107;
  _BOOL4 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;

  v5 = (a2 - a1) >> 5;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = *(_DWORD *)(a2 - 4);
      v8 = *(_DWORD *)(a1 + 28);
      v9 = v7 == v8;
      v10 = v7 < v8;
      if (v9)
        v10 = *(float *)(a2 - 8) < *(float *)(a1 + 24);
      if (v10)
      {
        v12 = *(_OWORD *)a1;
        v11 = *(_OWORD *)(a1 + 16);
        v13 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 16) = v13;
        *(_OWORD *)(a2 - 32) = v12;
        *(_OWORD *)(a2 - 16) = v11;
      }
      return result;
    case 3:
      v27 = (__int128 *)(a1 + 32);
      v28 = (__int128 *)(a2 - 32);
      v29 = *(float *)(a1 + 56);
      v30 = *(_DWORD *)(a1 + 60);
      v31 = *(_DWORD *)(a1 + 28);
      v9 = v30 == v31;
      v32 = v30 < v31;
      if (v9)
        v32 = v29 < *(float *)(a1 + 24);
      v33 = *(_DWORD *)(a2 - 4);
      v9 = v33 == v30;
      v34 = v33 < v30;
      if (v9)
        v34 = *(float *)(a2 - 8) < v29;
      if (v32)
      {
        if (v34)
        {
          v36 = *(_OWORD *)a1;
          v35 = *(_OWORD *)(a1 + 16);
          v37 = *(_OWORD *)(a2 - 16);
          *(_OWORD *)a1 = *v28;
          *(_OWORD *)(a1 + 16) = v37;
LABEL_69:
          *v28 = v36;
          *(_OWORD *)(a2 - 16) = v35;
          return result;
        }
        v104 = *(_OWORD *)a1;
        v103 = *(_OWORD *)(a1 + 16);
        v105 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)a1 = *v27;
        *(_OWORD *)(a1 + 16) = v105;
        *v27 = v104;
        *(_OWORD *)(a1 + 48) = v103;
        v106 = *(_DWORD *)(a2 - 4);
        v107 = *(_DWORD *)(a1 + 60);
        v9 = v106 == v107;
        v108 = v106 < v107;
        if (v9)
          v108 = *(float *)(a2 - 8) < *(float *)(a1 + 56);
        if (v108)
        {
          v36 = *v27;
          v35 = *(_OWORD *)(a1 + 48);
          v109 = *(_OWORD *)(a2 - 16);
          *v27 = *v28;
          *(_OWORD *)(a1 + 48) = v109;
          goto LABEL_69;
        }
      }
      else if (v34)
      {
        v74 = *v27;
        v73 = *(_OWORD *)(a1 + 48);
        v75 = *(_OWORD *)(a2 - 16);
        *v27 = *v28;
        *(_OWORD *)(a1 + 48) = v75;
        *v28 = v74;
        *(_OWORD *)(a2 - 16) = v73;
        v76 = *(_DWORD *)(a1 + 60);
        v77 = *(_DWORD *)(a1 + 28);
        v9 = v76 == v77;
        v78 = v76 < v77;
        if (v9)
          v78 = *(float *)(a1 + 56) < *(float *)(a1 + 24);
        if (v78)
        {
          v80 = *(_OWORD *)a1;
          v79 = *(_OWORD *)(a1 + 16);
          v81 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)a1 = *v27;
          *(_OWORD *)(a1 + 16) = v81;
          *v27 = v80;
          *(_OWORD *)(a1 + 48) = v79;
        }
      }
      return result;
    case 4:
      sub_223B7E5C0((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64), (__int128 *)(a2 - 32), a3);
      return 1;
    case 5:
      v38 = (__int128 *)(a1 + 32);
      v39 = (__int128 *)(a1 + 64);
      v40 = (__int128 *)(a1 + 96);
      sub_223B7E5C0((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64), (__int128 *)(a1 + 96), a3);
      v41 = *(_DWORD *)(a2 - 4);
      v42 = *(_DWORD *)(a1 + 124);
      v9 = v41 == v42;
      v43 = v41 < v42;
      if (v9)
        v43 = *(float *)(a2 - 8) < *(float *)(a1 + 120);
      if (v43)
      {
        v45 = *v40;
        v44 = *(_OWORD *)(a1 + 112);
        v46 = *(_OWORD *)(a2 - 16);
        *v40 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 112) = v46;
        *(_OWORD *)(a2 - 32) = v45;
        *(_OWORD *)(a2 - 16) = v44;
        v47 = *(_DWORD *)(a1 + 124);
        v48 = *(_DWORD *)(a1 + 92);
        v9 = v47 == v48;
        v49 = v47 < v48;
        if (v9)
          v49 = *(float *)(a1 + 120) < *(float *)(a1 + 88);
        if (v49)
        {
          v51 = *v39;
          v50 = *(_OWORD *)(a1 + 80);
          v52 = *(_OWORD *)(a1 + 112);
          *v39 = *v40;
          *(_OWORD *)(a1 + 80) = v52;
          *v40 = v51;
          *(_OWORD *)(a1 + 112) = v50;
          v53 = *(_DWORD *)(a1 + 92);
          v54 = *(_DWORD *)(a1 + 60);
          v9 = v53 == v54;
          v55 = v53 < v54;
          if (v9)
            v55 = *(float *)(a1 + 88) < *(float *)(a1 + 56);
          if (v55)
          {
            v57 = *v38;
            v56 = *(_OWORD *)(a1 + 48);
            v58 = *(_OWORD *)(a1 + 80);
            *v38 = *v39;
            *(_OWORD *)(a1 + 48) = v58;
            *v39 = v57;
            *(_OWORD *)(a1 + 80) = v56;
            v59 = *(_DWORD *)(a1 + 60);
            v60 = *(_DWORD *)(a1 + 28);
            v9 = v59 == v60;
            v61 = v59 < v60;
            if (v9)
              v61 = *(float *)(a1 + 56) < *(float *)(a1 + 24);
            if (v61)
            {
              v63 = *(_OWORD *)a1;
              v62 = *(_OWORD *)(a1 + 16);
              v64 = *(_OWORD *)(a1 + 48);
              *(_OWORD *)a1 = *v38;
              *(_OWORD *)(a1 + 16) = v64;
              *v38 = v63;
              *(_OWORD *)(a1 + 48) = v62;
            }
          }
        }
      }
      return 1;
    default:
      v14 = a1 + 64;
      v15 = (__int128 *)(a1 + 32);
      v16 = *(float *)(a1 + 56);
      v17 = *(_DWORD *)(a1 + 60);
      v18 = *(float *)(a1 + 24);
      v19 = *(_DWORD *)(a1 + 28);
      v20 = v17 < v19;
      if (v17 == v19)
        v20 = v16 < v18;
      v21 = *(float *)(a1 + 88);
      v22 = *(_DWORD *)(a1 + 92);
      v9 = v22 == v17;
      v23 = v22 < v17;
      if (v9)
        v23 = v21 < v16;
      if (v20)
      {
        if (v23)
        {
          v25 = *(_OWORD *)a1;
          v24 = *(_OWORD *)(a1 + 16);
          v26 = *(_OWORD *)(a1 + 80);
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(_OWORD *)(a1 + 16) = v26;
LABEL_48:
          *(_OWORD *)v14 = v25;
          *(_OWORD *)(a1 + 80) = v24;
          goto LABEL_49;
        }
        v83 = *(_OWORD *)a1;
        v82 = *(_OWORD *)(a1 + 16);
        v84 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)a1 = *v15;
        *(_OWORD *)(a1 + 16) = v84;
        *v15 = v83;
        *(_OWORD *)(a1 + 48) = v82;
        v85 = *(_DWORD *)(a1 + 60);
        v9 = v22 == v85;
        v86 = v22 < v85;
        if (v9)
          v86 = v21 < *(float *)(a1 + 56);
        if (v86)
        {
          v25 = *v15;
          v24 = *(_OWORD *)(a1 + 48);
          v87 = *(_OWORD *)(a1 + 80);
          *v15 = *(_OWORD *)v14;
          *(_OWORD *)(a1 + 48) = v87;
          goto LABEL_48;
        }
      }
      else if (v23)
      {
        v66 = *v15;
        v65 = *(_OWORD *)(a1 + 48);
        v67 = *(_OWORD *)(a1 + 80);
        *v15 = *(_OWORD *)v14;
        *(_OWORD *)(a1 + 48) = v67;
        *(_OWORD *)v14 = v66;
        *(_OWORD *)(a1 + 80) = v65;
        v68 = *(_DWORD *)(a1 + 60);
        v9 = v68 == v19;
        v69 = v68 < v19;
        if (v9)
          v69 = *(float *)(a1 + 56) < v18;
        if (v69)
        {
          v71 = *(_OWORD *)a1;
          v70 = *(_OWORD *)(a1 + 16);
          v72 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)a1 = *v15;
          *(_OWORD *)(a1 + 16) = v72;
          *v15 = v71;
          *(_OWORD *)(a1 + 48) = v70;
        }
      }
LABEL_49:
      v88 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v89 = 0;
      v90 = 0;
      while (1)
      {
        v92 = *(float *)(v88 + 24);
        v93 = *(_DWORD *)(v88 + 28);
        v94 = *(float *)(v14 + 24);
        v95 = *(_DWORD *)(v14 + 28);
        v9 = v93 == v95;
        v96 = v93 < v95;
        if (v9)
          v96 = v92 < v94;
        if (v96)
        {
          v110 = *(_OWORD *)v88;
          v111 = *(_QWORD *)(v88 + 16);
          v97 = v89;
          do
          {
            v98 = a1 + v97;
            v99 = *(_OWORD *)(a1 + v97 + 80);
            *(_OWORD *)(v98 + 96) = *(_OWORD *)(a1 + v97 + 64);
            *(_OWORD *)(v98 + 112) = v99;
            if (v97 == -64)
            {
              v91 = a1;
              goto LABEL_52;
            }
            v100 = *(float *)(v98 + 56);
            v101 = *(_DWORD *)(v98 + 60);
            v9 = v93 == v101;
            v102 = v93 < v101;
            if (v9)
              v102 = v92 < v100;
            v97 -= 32;
          }
          while (v102);
          v91 = a1 + v97 + 96;
LABEL_52:
          *(_OWORD *)v91 = v110;
          *(_QWORD *)(v91 + 16) = v111;
          *(float *)(v91 + 24) = v92;
          *(_DWORD *)(v91 + 28) = v93;
          if (++v90 == 8)
            return v88 + 32 == a2;
        }
        v14 = v88;
        v89 += 32;
        v88 += 32;
        if (v88 == a2)
          return 1;
      }
  }
}

__n128 sub_223B7E5C0(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, __n128 result)
{
  float v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  BOOL v9;
  unsigned int v10;
  _BOOL4 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unsigned int v16;
  unsigned int v17;
  _BOOL4 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unsigned int v23;
  unsigned int v24;
  _BOOL4 v25;
  __int128 v26;
  unsigned int v27;
  unsigned int v28;
  _BOOL4 v29;
  __int128 v30;
  __int128 v31;
  unsigned int v32;
  unsigned int v33;
  _BOOL4 v34;
  __int128 v35;
  __int128 v36;
  unsigned int v37;
  unsigned int v38;
  _BOOL4 v39;
  __int128 v40;
  __int128 v41;

  v5 = *((float *)a2 + 6);
  v6 = *((_DWORD *)a2 + 7);
  v7 = *((_DWORD *)a1 + 7);
  v8 = v6 == v7;
  v9 = v6 < v7;
  if (v8)
    v9 = v5 < *((float *)a1 + 6);
  v10 = *((_DWORD *)a3 + 7);
  v8 = v10 == v6;
  v11 = v10 < v6;
  if (v8)
    v11 = *((float *)a3 + 6) < v5;
  if (v9)
  {
    if (v11)
    {
      v12 = *a1;
      result = (__n128)a1[1];
      v13 = a3[1];
      *a1 = *a3;
      a1[1] = v13;
LABEL_17:
      *a3 = v12;
      a3[1] = (__int128)result;
      goto LABEL_18;
    }
    v21 = *a1;
    result = (__n128)a1[1];
    v22 = a2[1];
    *a1 = *a2;
    a1[1] = v22;
    *a2 = v21;
    a2[1] = (__int128)result;
    v23 = *((_DWORD *)a3 + 7);
    v24 = *((_DWORD *)a2 + 7);
    v8 = v23 == v24;
    v25 = v23 < v24;
    if (v8)
      v25 = *((float *)a3 + 6) < *((float *)a2 + 6);
    if (v25)
    {
      v12 = *a2;
      result = (__n128)a2[1];
      v26 = a3[1];
      *a2 = *a3;
      a2[1] = v26;
      goto LABEL_17;
    }
  }
  else if (v11)
  {
    v14 = *a2;
    result = (__n128)a2[1];
    v15 = a3[1];
    *a2 = *a3;
    a2[1] = v15;
    *a3 = v14;
    a3[1] = (__int128)result;
    v16 = *((_DWORD *)a2 + 7);
    v17 = *((_DWORD *)a1 + 7);
    v8 = v16 == v17;
    v18 = v16 < v17;
    if (v8)
      v18 = *((float *)a2 + 6) < *((float *)a1 + 6);
    if (v18)
    {
      v19 = *a1;
      result = (__n128)a1[1];
      v20 = a2[1];
      *a1 = *a2;
      a1[1] = v20;
      *a2 = v19;
      a2[1] = (__int128)result;
    }
  }
LABEL_18:
  result.n128_u32[0] = *((_DWORD *)a4 + 6);
  v27 = *((_DWORD *)a4 + 7);
  v28 = *((_DWORD *)a3 + 7);
  v8 = v27 == v28;
  v29 = v27 < v28;
  if (v8)
    v29 = result.n128_f32[0] < *((float *)a3 + 6);
  if (v29)
  {
    v30 = *a3;
    result = (__n128)a3[1];
    v31 = a4[1];
    *a3 = *a4;
    a3[1] = v31;
    *a4 = v30;
    a4[1] = (__int128)result;
    result.n128_u32[0] = *((_DWORD *)a3 + 6);
    v32 = *((_DWORD *)a3 + 7);
    v33 = *((_DWORD *)a2 + 7);
    v8 = v32 == v33;
    v34 = v32 < v33;
    if (v8)
      v34 = result.n128_f32[0] < *((float *)a2 + 6);
    if (v34)
    {
      v35 = *a2;
      result = (__n128)a2[1];
      v36 = a3[1];
      *a2 = *a3;
      a2[1] = v36;
      *a3 = v35;
      a3[1] = (__int128)result;
      result.n128_u32[0] = *((_DWORD *)a2 + 6);
      v37 = *((_DWORD *)a2 + 7);
      v38 = *((_DWORD *)a1 + 7);
      v8 = v37 == v38;
      v39 = v37 < v38;
      if (v8)
        v39 = result.n128_f32[0] < *((float *)a1 + 6);
      if (v39)
      {
        v40 = *a1;
        result = (__n128)a1[1];
        v41 = a2[1];
        *a1 = *a2;
        a1[1] = v41;
        *a2 = v40;
        a2[1] = (__int128)result;
      }
    }
  }
  return result;
}

_QWORD *sub_223B7E7B8(_QWORD *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char **v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 v27;

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz <= (v8 - *result) >> 4)
  {
    v16 = (char **)(result + 1);
    v17 = (char *)result[1];
    v18 = (v17 - v9) >> 4;
    if (v18 >= __sz)
    {
      v25 = *result;
      if (a2 != a3)
      {
        v26 = (_OWORD *)*result;
        do
        {
          v27 = *(_OWORD *)v6;
          v6 += 16;
          *v26++ = v27;
          v25 += 16;
        }
        while (v6 != a3);
      }
      v15 = v25 - (_QWORD)v9;
    }
    else
    {
      v19 = &a2[16 * v18];
      if (v17 != v9)
      {
        v20 = 16 * v18;
        do
        {
          v21 = *(_OWORD *)v6;
          v6 += 16;
          *(_OWORD *)v9 = v21;
          v9 += 16;
          v20 -= 16;
        }
        while (v20);
        v9 = *v16;
      }
      v22 = v9;
      if (v19 != a3)
      {
        v22 = v9;
        v23 = v9;
        do
        {
          v24 = *(_OWORD *)v19;
          v19 += 16;
          *(_OWORD *)v23 = v24;
          v23 += 16;
          v22 += 16;
        }
        while (v19 != a3);
      }
      v15 = v22 - v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60)
      goto LABEL_27;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 60)
LABEL_27:
      sub_22316E078();
    v13 = 2 * v12;
    result = operator new(16 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = (char *)result;
    if (v6 != a3)
    {
      result = memcpy(result, v6, (a3 - v6) & 0xFFFFFFFFFFFFFFF0);
      v14 = &v9[(a3 - v6) & 0xFFFFFFFFFFFFFFF0];
    }
    v15 = v14 - v9;
    v16 = (char **)(v7 + 1);
  }
  *v16 = &v9[v15];
  return result;
}

uint64_t sub_223B7E944(__int128 **a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;

  v3 = 0x4FA4FA4FA4FA4FA5 * (((char *)a1[1] - (char *)*a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0xB60B60B60B60B6)
    sub_22316E078();
  if (0x9F49F49F49F49F4ALL * (((char *)a1[2] - (char *)*a1) >> 3) > v4)
    v4 = 0x9F49F49F49F49F4ALL * (((char *)a1[2] - (char *)*a1) >> 3);
  if ((unint64_t)(0x4FA4FA4FA4FA4FA5 * (((char *)a1[2] - (char *)*a1) >> 3)) >= 0x5B05B05B05B05BLL)
    v6 = 0xB60B60B60B60B6;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xB60B60B60B60B6)
      sub_223174E94();
    v7 = (char *)operator new(360 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (uint64_t)&v7[360 * v3];
  v9 = (__int128 *)&v7[360 * v6];
  sub_2232D62F4(v8, a2);
  v10 = v8 + 360;
  v12 = *a1;
  v11 = a1[1];
  if (v11 == *a1)
  {
    *a1 = (__int128 *)v8;
    a1[1] = (__int128 *)v10;
    a1[2] = v9;
    if (!v11)
      return v10;
    goto LABEL_16;
  }
  do
  {
    v8 -= 360;
    v11 = (__int128 *)((char *)v11 - 360);
    sub_2232D62F4(v8, v11);
  }
  while (v11 != v12);
  v11 = *a1;
  v13 = a1[1];
  *a1 = (__int128 *)v8;
  a1[1] = (__int128 *)v10;
  for (a1[2] = v9; v13 != v11; v13 = (__int128 *)sub_223173E64((_QWORD *)v13 - 45))
    ;
  if (v11)
LABEL_16:
    operator delete(v11);
  return v10;
}

void sub_223B7EA98(uint64_t a1, uint64_t a2, _OWORD *a3, __int128 *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v16;
  uint64_t v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  int8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;

  v9 = sub_22456636C((unsigned __int8 *)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (v14)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v18 = v14[1];
            if (v18 == v9)
            {
              if (v14[2] == *(_QWORD *)a2 && v14[3] == *(_QWORD *)(a2 + 8))
                return;
            }
            else if ((v18 & (v11 - 1)) != v4)
            {
              goto LABEL_28;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_28;
          }
        }
        do
        {
          v16 = v14[1];
          if (v16 == v9)
          {
            if (v14[2] == *(_QWORD *)a2 && v14[3] == *(_QWORD *)(a2 + 8))
              return;
          }
          else
          {
            if (v16 >= v11)
              v16 %= v11;
            if (v16 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_28:
  v34 = operator new(0x210uLL);
  *v34 = 0;
  v34[1] = v10;
  v19 = *a4;
  *((_OWORD *)v34 + 1) = *a3;
  *((_OWORD *)v34 + 2) = v19;
  v34[6] = *((_QWORD *)a4 + 2);
  *((_DWORD *)v34 + 14) = *((_DWORD *)a4 + 6);
  *((_DWORD *)v34 + 15) = *((_DWORD *)a4 + 7);
  sub_223B246DC(v34 + 8, (uint64_t *)a4 + 4);
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (v11 && (float)(v21 * (float)v11) >= v20)
    goto LABEL_56;
  v22 = 1;
  if (v11 >= 3)
    v22 = (v11 & (v11 - 1)) != 0;
  v23 = v22 | (2 * v11);
  v24 = vcvtps_u32_f32(v20 / v21);
  if (v23 <= v24)
    prime = v24;
  else
    prime = v23;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v26 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v26)
    goto LABEL_40;
  if (prime < *(_QWORD *)&v26)
  {
    v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v26 < 3uLL || (v28 = (uint8x8_t)vcnt_s8(v26), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
    {
      v27 = std::__next_prime(v27);
    }
    else
    {
      v29 = 1 << -(char)__clz(v27 - 1);
      if (v27 >= 2)
        v27 = v29;
    }
    if (prime <= v27)
      prime = v27;
    if (prime < *(_QWORD *)&v26)
LABEL_40:
      sub_2231B0668(a1, prime);
  }
  v11 = *(_QWORD *)(a1 + 8);
  v30 = v11 - 1;
  if ((v11 & (v11 - 1)) != 0)
  {
    if (v10 >= v11)
    {
      v4 = v10 % v11;
      v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
      v32 = v34;
      if (!v31)
        goto LABEL_59;
      goto LABEL_57;
    }
    v4 = v10;
LABEL_56:
    v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    v32 = v34;
    if (!v31)
      goto LABEL_59;
    goto LABEL_57;
  }
  v4 = v30 & v10;
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 & v10));
  v32 = v34;
  if (!v31)
  {
LABEL_59:
    *v32 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v34;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v34)
    {
      v33 = *(_QWORD *)(*v34 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v33 >= v11)
          v33 %= v11;
      }
      else
      {
        v33 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v34;
    }
    goto LABEL_65;
  }
LABEL_57:
  *v32 = *v31;
  *v31 = v34;
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
}

void sub_223B7EDF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223B7EE18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B7EE04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223B7EE18((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223B7EE18(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_22388925C((uint64_t)v2 + 64);
    operator delete(v2);
  }
  return a1;
}

double sub_223B7EE5C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  float *v13;
  uint64_t *v14;
  uint64_t *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  uint64_t v26;
  float *v27;

  v2 = *a1;
  v1 = a1[1];
  v3 = v1 - *a1;
  v4 = 0.0;
  v5 = 0.0;
  if ((unint64_t)v3 >= 0x18)
  {
    v6 = v3 >> 3;
    if (v1 == v2)
      v7 = 0;
    else
      v7 = v6 + 1;
    v8 = v7 - 1;
    if (v7 >= v6)
    {
      v9 = a1[1];
      if (v8 <= v6)
        v9 = v2 + 8 * (v8 % v6);
    }
    else
    {
      v9 = v1 - 8;
    }
    if (v8)
    {
      v10 = a1[1];
      do
      {
        if (v8 + 1 >= v6)
        {
          v11 = (float *)a1[1];
          if (v8 <= v6)
            v11 = (float *)(v2 + 8 * (v8 % v6));
        }
        else
        {
          v11 = (float *)(v10 - 8);
        }
        v12 = v8 - 1;
        if (v8 >= v6)
        {
          v13 = (float *)a1[1];
          if (v12 <= v6)
            v13 = (float *)(v2 + 8 * (v12 % v6));
        }
        else
        {
          v13 = (float *)(v9 - 8);
        }
        if (v8 + 1 >= v6)
        {
          v10 = a1[1];
          if (v8 <= v6)
            v10 = v2 + 8 * (v8 % v6);
        }
        else
        {
          v10 -= 8;
        }
        if (v8 >= v6)
        {
          v9 = v2 + 8 * (v12 % v6);
          if (v12 > v6)
            v9 = a1[1];
        }
        else
        {
          v9 -= 8;
        }
        v5 = v5 + (*v11 + *v13) * (v11[1] - v13[1]);
        --v8;
      }
      while (v12);
      v5 = v5 * 0.5;
    }
  }
  v14 = (uint64_t *)a1[3];
  v15 = (uint64_t *)a1[4];
  if (v14 != v15)
  {
    v4 = 0.0;
    do
    {
      v18 = *v14;
      v17 = v14[1];
      v19 = v17 - *v14;
      v16 = 0.0;
      if ((unint64_t)v19 >= 0x18)
      {
        v20 = v19 >> 3;
        if (v17 == v18)
          v21 = 0;
        else
          v21 = v20 + 1;
        v22 = v21 - 1;
        if (v21 >= v20)
        {
          v23 = v14[1];
          if (v22 <= v20)
            v23 = v18 + 8 * (v22 % v20);
        }
        else
        {
          v23 = v17 - 8;
        }
        if (v22)
        {
          v24 = v14[1];
          do
          {
            if (v22 + 1 >= v20)
            {
              v25 = (float *)v14[1];
              if (v22 <= v20)
                v25 = (float *)(v18 + 8 * (v22 % v20));
            }
            else
            {
              v25 = (float *)(v24 - 8);
            }
            v26 = v22 - 1;
            if (v22 >= v20)
            {
              v27 = (float *)v14[1];
              if (v26 <= v20)
                v27 = (float *)(v18 + 8 * (v26 % v20));
            }
            else
            {
              v27 = (float *)(v23 - 8);
            }
            if (v22 + 1 >= v20)
            {
              v24 = v14[1];
              if (v22 <= v20)
                v24 = v18 + 8 * (v22 % v20);
            }
            else
            {
              v24 -= 8;
            }
            if (v22 >= v20)
            {
              v23 = v18 + 8 * (v26 % v20);
              if (v26 > v20)
                v23 = v14[1];
            }
            else
            {
              v23 -= 8;
            }
            v16 = v16 + (*v25 + *v27) * (v25[1] - v27[1]);
            --v22;
          }
          while (v26);
          v16 = v16 * 0.5;
        }
      }
      v4 = v4 + v16;
      v14 += 3;
    }
    while (v14 != v15);
  }
  return v5 + v4;
}

void sub_223B7F0F4(uint64_t a1, float a2, float a3, float a4)
{
  double v7;
  std::mutex *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = a2;
  v8 = (std::mutex *)(a1 + 6600);
  std::mutex::lock((std::mutex *)(a1 + 6600));
  if (*(_BYTE *)(a1 + 6672))
    v7 = *(double *)(a1 + 6664) + v7;
  else
    *(_BYTE *)(a1 + 6672) = 1;
  *(double *)(a1 + 6664) = v7;
  *(double *)(a1 + 6680) = *(double *)(a1 + 6680) + 1.0;
  std::mutex::unlock(v8);
  if (a3 <= 0.75)
    v9 = a3 > 0.27;
  else
    v9 = (a3 > 0.27) + 1;
  std::mutex::lock((std::mutex *)(a1 + 6720));
  *(_QWORD *)(a1 + 6784) += v9;
  std::mutex::unlock((std::mutex *)(a1 + 6720));
  v10 = a4 < 0.03 && a3 > 0.27;
  std::mutex::lock((std::mutex *)(a1 + 6824));
  *(_QWORD *)(a1 + 6888) += v10;
  std::mutex::unlock((std::mutex *)(a1 + 6824));
}

_QWORD *sub_223B7F1FC(float *a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v16;
  float v18;
  float v19;
  _QWORD *v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  size_t v31;
  size_t v32;
  size_t v33;
  _QWORD *i;
  size_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;

  v8 = sub_22456636C((unsigned __int8 *)a2);
  v9 = v8;
  v10 = *((_QWORD *)a1 + 1);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v13[1];
            if (v16 == v8)
            {
              if (v13[2] == *(_QWORD *)a2 && v13[3] == *(_QWORD *)(a2 + 8))
                return v13;
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_31;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            if (v13[2] == *(_QWORD *)a2 && v13[3] == *(_QWORD *)(a2 + 8))
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  v13 = operator new(0x60uLL);
  *v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = **a4;
  *((_OWORD *)v13 + 2) = xmmword_224666D8C;
  *((_OWORD *)v13 + 3) = *(_OWORD *)algn_224666D9C;
  *((_OWORD *)v13 + 4) = xmmword_224666DAC;
  *((_OWORD *)v13 + 5) = unk_224666DBC;
  v18 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v19 = a1[8];
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *((_QWORD *)a1 + 1);
    }
    if (prime > v10)
    {
LABEL_45:
      if (prime >> 61)
        sub_223174E94();
      v26 = operator new(8 * prime);
      v27 = *(_QWORD **)a1;
      *(_QWORD *)a1 = v26;
      if (v27)
        operator delete(v27);
      v28 = 0;
      *((_QWORD *)a1 + 1) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
      while (prime != v28);
      v30 = (uint64_t *)(a1 + 4);
      v29 = (_QWORD *)*((_QWORD *)a1 + 2);
      if (!v29)
        goto LABEL_77;
      v31 = v29[1];
      v32 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v33 = v31 & v32;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v30;
        for (i = (_QWORD *)*v29; *v29; i = (_QWORD *)*v29)
        {
          v35 = i[1] & v32;
          if (v35 == v33)
          {
            v29 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
          {
            *v29 = *i;
            v36 = 8 * v35;
            *i = **(_QWORD **)(*(_QWORD *)a1 + v36);
            **(_QWORD **)(*(_QWORD *)a1 + v36) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v29;
            v29 = i;
            v33 = v35;
          }
        }
        goto LABEL_77;
      }
      if (v31 >= prime)
        v31 %= prime;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v30;
      v40 = (_QWORD *)*v29;
      if (!*v29)
      {
LABEL_77:
        v10 = prime;
        v43 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_78;
        goto LABEL_93;
      }
      while (1)
      {
        v42 = v40[1];
        if (v42 >= prime)
          v42 %= prime;
        if (v42 == v31)
          goto LABEL_71;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v42))
        {
          *v29 = *v40;
          v41 = 8 * v42;
          *v40 = **(_QWORD **)(*(_QWORD *)a1 + v41);
          **(_QWORD **)(*(_QWORD *)a1 + v41) = v40;
          v40 = v29;
LABEL_71:
          v29 = v40;
          v40 = (_QWORD *)*v40;
          if (!v40)
            goto LABEL_77;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v29;
          v29 = v40;
          v40 = (_QWORD *)*v40;
          v31 = v42;
          if (!v40)
            goto LABEL_77;
        }
      }
    }
    if (prime < v10)
    {
      v37 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v10 < 3 || (v38 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime < v10)
      {
        if (!prime)
        {
          v44 = *(_QWORD **)a1;
          *(_QWORD *)a1 = 0;
          if (v44)
            operator delete(v44);
          v10 = 0;
          *((_QWORD *)a1 + 1) = 0;
          v43 = -1;
          goto LABEL_93;
        }
        goto LABEL_45;
      }
      v10 = *((_QWORD *)a1 + 1);
    }
    v43 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
LABEL_78:
      if (v9 >= v10)
      {
        v4 = v9 % v10;
        v20 = *(_QWORD **)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_34;
      }
      else
      {
        v4 = v9;
        v20 = *(_QWORD **)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_34;
      }
      goto LABEL_94;
    }
LABEL_93:
    v4 = v43 & v9;
    v20 = *(_QWORD **)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v43 & v9));
    if (v21)
      goto LABEL_34;
    goto LABEL_94;
  }
  v20 = *(_QWORD **)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
LABEL_34:
    *v13 = *v21;
LABEL_100:
    *v21 = v13;
    goto LABEL_101;
  }
LABEL_94:
  *v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v20[v4] = a1 + 4;
  if (*v13)
  {
    v45 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v45 >= v10)
        v45 %= v10;
    }
    else
    {
      v45 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v45);
    goto LABEL_100;
  }
LABEL_101:
  ++*((_QWORD *)a1 + 3);
  return v13;
}

